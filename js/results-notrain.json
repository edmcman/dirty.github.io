[{"repo_owner": "yuroc5390", "repo_name": "fuzz_target", "path": "yuroc5390/fuzz_target/4540148d811f80e8fbe254c30795b2dd9c6a3d4ac90ac841554c6940dfd1f227", "path_in_repo": "yuroc5390/fuzz_target/qemu_mode/qemu-2.10.0/hw/block/xen_disk.o", "objdump": "00000000000004db <ioreq_start>:\n     4db:\t55                   \tpush   %rbp\n     4dc:\t48 89 e5             \tmov    %rsp,%rbp\n     4df:\t48 83 ec 20          \tsub    $0x20,%rsp\n     4e3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     4e7:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     4ee:\t00 \n     4ef:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4f3:\t48 8b 80 e8 05 00 00 \tmov    0x5e8(%rax),%rax\n     4fa:\t48 85 c0             \ttest   %rax,%rax\n     4fd:\t75 69                \tjne    568 <ioreq_start+0x8d>\n     4ff:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     503:\t8b 80 f0 05 00 00    \tmov    0x5f0(%rax),%eax\n     509:\t89 c2                \tmov    %eax,%edx\n     50b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     50f:\t8b 80 fc 05 00 00    \tmov    0x5fc(%rax),%eax\n     515:\t39 c2                \tcmp    %eax,%edx\n     517:\t0f 83 21 01 00 00    \tjae    63e <ioreq_start+0x163>\n     51d:\tbf a0 01 00 00       \tmov    $0x1a0,%edi\n     522:\te8 00 00 00 00       \tcallq  527 <ioreq_start+0x4c>\n     527:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     52b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     52f:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     533:\t48 89 90 70 01 00 00 \tmov    %rdx,0x170(%rax)\n     53a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     53e:\t8b 80 f0 05 00 00    \tmov    0x5f0(%rax),%eax\n     544:\t8d 50 01             \tlea    0x1(%rax),%edx\n     547:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     54b:\t89 90 f0 05 00 00    \tmov    %edx,0x5f0(%rax)\n     551:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     555:\t48 83 e8 80          \tsub    $0xffffffffffffff80,%rax\n     559:\tbe 0b 00 00 00       \tmov    $0xb,%esi\n     55e:\t48 89 c7             \tmov    %rax,%rdi\n     561:\te8 00 00 00 00       \tcallq  566 <ioreq_start+0x8b>\n     566:\teb 55                \tjmp    5bd <ioreq_start+0xe2>\n     568:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     56c:\t48 8b 80 e8 05 00 00 \tmov    0x5e8(%rax),%rax\n     573:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     577:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     57b:\t48 8b 80 78 01 00 00 \tmov    0x178(%rax),%rax\n     582:\t48 85 c0             \ttest   %rax,%rax\n     585:\t74 1d                \tje     5a4 <ioreq_start+0xc9>\n     587:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     58b:\t48 8b 80 78 01 00 00 \tmov    0x178(%rax),%rax\n     592:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     596:\t48 8b 92 80 01 00 00 \tmov    0x180(%rdx),%rdx\n     59d:\t48 89 90 80 01 00 00 \tmov    %rdx,0x180(%rax)\n     5a4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     5a8:\t48 8b 80 80 01 00 00 \tmov    0x180(%rax),%rax\n     5af:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     5b3:\t48 8b 92 78 01 00 00 \tmov    0x178(%rdx),%rdx\n     5ba:\t48 89 10             \tmov    %rdx,(%rax)\n     5bd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5c1:\t48 8b 90 d8 05 00 00 \tmov    0x5d8(%rax),%rdx\n     5c8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     5cc:\t48 89 90 78 01 00 00 \tmov    %rdx,0x178(%rax)\n     5d3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     5d7:\t48 8b 80 78 01 00 00 \tmov    0x178(%rax),%rax\n     5de:\t48 85 c0             \ttest   %rax,%rax\n     5e1:\t74 1d                \tje     600 <ioreq_start+0x125>\n     5e3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5e7:\t48 8b 80 d8 05 00 00 \tmov    0x5d8(%rax),%rax\n     5ee:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     5f2:\t48 81 c2 78 01 00 00 \tadd    $0x178,%rdx\n     5f9:\t48 89 90 80 01 00 00 \tmov    %rdx,0x180(%rax)\n     600:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     604:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     608:\t48 89 90 d8 05 00 00 \tmov    %rdx,0x5d8(%rax)\n     60f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     613:\t48 8d 90 d8 05 00 00 \tlea    0x5d8(%rax),%rdx\n     61a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     61e:\t48 89 90 80 01 00 00 \tmov    %rdx,0x180(%rax)\n     625:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     629:\t8b 80 f4 05 00 00    \tmov    0x5f4(%rax),%eax\n     62f:\t8d 50 01             \tlea    0x1(%rax),%edx\n     632:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     636:\t89 90 f4 05 00 00    \tmov    %edx,0x5f4(%rax)\n     63c:\teb 01                \tjmp    63f <ioreq_start+0x164>\n     63e:\t90                   \tnop\n     63f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     643:\tc9                   \tleaveq \n     644:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall ioreq_start(__int64 a1) {\n  _QWORD *<span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = Number L;\n  if (*(_QWORD *)(a1 + Number)) {\n    <span class=\"supfact\">v2</span> = *(_QWORD **)(a1 + Number);\n    if (<span class=\"supfact\">v2</span>[Number])\n      *(_QWORD *)(<span class=\"supfact\">v2</span>[Number] + Number L) =\n          <span class=\"supfact\">v2</span>[Number];\n    *(_QWORD *)<span class=\"supfact\">v2</span>[Number] = <span class=\"supfact\">v2</span>[Number];\n  } else {\n    if (*(_DWORD *)(a1 + Number) >= *(_DWORD *)(a1 + Number))\n      return <span class=\"supfact\">v2</span>;\n    <span class=\"supfact\">v2</span> = (_QWORD *)g_malloc0(Number L);\n    <span class=\"supfact\">v2</span>[Number] = a1;\n    ++*(_DWORD *)(a1 + Number);\n    qemu_iovec_init(<span class=\"supfact\">v2</span> + Number, Number L);\n  }\n  <span class=\"supfact\">v2</span>[Number] = *(_QWORD *)(a1 + Number);\n  if (<span class=\"supfact\">v2</span>[Number])\n    *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L) =\n        <span class=\"supfact\">v2</span> + Number;\n  *(_QWORD *)(a1 + Number) = <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span>[Number] = a1 + Number;\n  ++*(_DWORD *)(a1 + Number);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "<span class=\"supfact\">ioreq</span> *__cdecl ioreq_start(XenBlkDev *blkdev) {\n  <span class=\"supfact\">ioreq</span> *<span class=\"supfact\">ioreq</span>;\n  <span class=\"supfact\">ioreq</span> = Number L;\n  if (blkdev->freelist.lh_first) {\n    <span class=\"supfact\">ioreq</span> = blkdev->freelist.lh_first;\n    if (<span class=\"supfact\">ioreq</span>->list.le_next)\n      <span class=\"supfact\">ioreq</span>->list.le_next->list.le_prev =\n          <span class=\"supfact\">ioreq</span>->list.le_prev;\n    *<span class=\"supfact\">ioreq</span>->list.le_prev = <span class=\"supfact\">ioreq</span>->list.le_next;\n  } else {\n    if (blkdev->requests_total >= blkdev->max_requests)\n      return <span class=\"supfact\">ioreq</span>;\n    <span class=\"supfact\">ioreq</span> = (<span class=\"supfact\">ioreq</span> *)g_malloc0(Number L);\n    <span class=\"supfact\">ioreq</span>->blkdev = blkdev;\n    ++blkdev->requests_total;\n    qemu_iovec_init(&<span class=\"supfact\">ioreq</span>->v, Number L);\n  }\n  <span class=\"supfact\">ioreq</span>->list.le_next = blkdev->inflight.lh_first;\n  if (<span class=\"supfact\">ioreq</span>->list.le_next)\n    blkdev->inflight.lh_first->list.le_prev =\n        &<span class=\"supfact\">ioreq</span>->list.le_next;\n  blkdev->inflight.lh_first = <span class=\"supfact\">ioreq</span>;\n  <span class=\"supfact\">ioreq</span>->list.le_prev = &blkdev->inflight.lh_first;\n  ++blkdev->requests_inflight;\n  return <span class=\"supfact\">ioreq</span>;\n}", "var": [{"name": "v2", "type": "size_t", "ref_name": "ioreq", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "ralph-irving", "repo_name": "zapwireless", "path": "ralph-irving/zapwireless/768664298d96eb137a1945609ea9cd4affd1a7be1e15427a515de140e85afa17", "path_in_repo": "ralph-irving/zapwireless//bin/linux/zap", "objdump": "00000000004065aa <get_data>:\n  4065aa:\t55                   \tpush   %rbp\n  4065ab:\t48 89 e5             \tmov    %rsp,%rbp\n  4065ae:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n  4065b5:\t89 bd 3c ff ff ff    \tmov    %edi,-0xc4(%rbp)\n  4065bb:\t48 89 b5 30 ff ff ff \tmov    %rsi,-0xd0(%rbp)\n  4065c2:\t89 95 38 ff ff ff    \tmov    %edx,-0xc8(%rbp)\n  4065c8:\t48 89 8d 28 ff ff ff \tmov    %rcx,-0xd8(%rbp)\n  4065cf:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4065d6:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  4065dd:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4065e4:\te9 41 01 00 00       \tjmpq   40672a <get_data+0x180>\n  4065e9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4065ee:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  4065f3:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n  4065fa:\t48 89 d7             \tmov    %rdx,%rdi\n  4065fd:\tfc                   \tcld    \n  4065fe:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  406601:\t89 f8                \tmov    %edi,%eax\n  406603:\t89 ca                \tmov    %ecx,%edx\n  406605:\t89 55 f0             \tmov    %edx,-0x10(%rbp)\n  406608:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  40660b:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n  406611:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  406614:\t85 c0                \ttest   %eax,%eax\n  406616:\t0f 48 c2             \tcmovs  %edx,%eax\n  406619:\tc1 f8 06             \tsar    $0x6,%eax\n  40661c:\t89 c6                \tmov    %eax,%esi\n  40661e:\t48 63 c6             \tmovslq %esi,%rax\n  406621:\t48 8b bc c5 50 ff ff \tmov    -0xb0(%rbp,%rax,8),%rdi\n  406628:\tff \n  406629:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n  40662f:\t99                   \tcltd   \n  406630:\tc1 ea 1a             \tshr    $0x1a,%edx\n  406633:\t01 d0                \tadd    %edx,%eax\n  406635:\t83 e0 3f             \tand    $0x3f,%eax\n  406638:\t29 d0                \tsub    %edx,%eax\n  40663a:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40663f:\t89 c1                \tmov    %eax,%ecx\n  406641:\t48 d3 e2             \tshl    %cl,%rdx\n  406644:\t48 89 d0             \tmov    %rdx,%rax\n  406647:\t48 09 c7             \tor     %rax,%rdi\n  40664a:\t48 89 fa             \tmov    %rdi,%rdx\n  40664d:\t48 63 c6             \tmovslq %esi,%rax\n  406650:\t48 89 94 c5 50 ff ff \tmov    %rdx,-0xb0(%rbp,%rax,8)\n  406657:\tff \n  406658:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n  40665e:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n  406661:\t7c 0c                \tjl     40666f <get_data+0xc5>\n  406663:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n  406669:\t83 c0 01             \tadd    $0x1,%eax\n  40666c:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40666f:\t48 c7 85 40 ff ff ff \tmovq   $0xa,-0xc0(%rbp)\n  406676:\t0a 00 00 00 \n  40667a:\t48 c7 85 48 ff ff ff \tmovq   $0x0,-0xb8(%rbp)\n  406681:\t00 00 00 00 \n  406685:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  406688:\t8d 78 01             \tlea    0x1(%rax),%edi\n  40668b:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n  406692:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  406699:\t49 89 d0             \tmov    %rdx,%r8\n  40669c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  4066a1:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4066a6:\t48 89 c6             \tmov    %rax,%rsi\n  4066a9:\te8 52 bb ff ff       \tcallq  402200 <select@plt>\n  4066ae:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4066b1:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  4066b5:\t75 1b                \tjne    4066d2 <get_data+0x128>\n  4066b7:\tba ef 00 00 00       \tmov    $0xef,%edx\n  4066bc:\tbe d0 be 40 00       \tmov    $0x40bed0,%esi\n  4066c1:\tbf e0 be 40 00       \tmov    $0x40bee0,%edi\n  4066c6:\te8 50 2e 00 00       \tcallq  40951b <warn_errno>\n  4066cb:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4066d0:\teb 6d                \tjmp    40673f <get_data+0x195>\n  4066d2:\t83 7d f4 ff          \tcmpl   $0xffffffff,-0xc(%rbp)\n  4066d6:\t75 07                \tjne    4066df <get_data+0x135>\n  4066d8:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4066dd:\teb 60                \tjmp    40673f <get_data+0x195>\n  4066df:\tc7 45 e8 10 00 00 00 \tmovl   $0x10,-0x18(%rbp)\n  4066e6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4066e9:\t8b 95 38 ff ff ff    \tmov    -0xc8(%rbp),%edx\n  4066ef:\t29 c2                \tsub    %eax,%edx\n  4066f1:\t89 d0                \tmov    %edx,%eax\n  4066f3:\t89 c7                \tmov    %eax,%edi\n  4066f5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4066f8:\t48 63 d0             \tmovslq %eax,%rdx\n  4066fb:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n  406702:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n  406706:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n  40670c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  406711:\t48 89 fa             \tmov    %rdi,%rdx\n  406714:\t89 c7                \tmov    %eax,%edi\n  406716:\te8 25 b9 ff ff       \tcallq  402040 <recv@plt>\n  40671b:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  40671e:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  406722:\t7e 17                \tjle    40673b <get_data+0x191>\n  406724:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  406727:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  40672a:\t8b 85 38 ff ff ff    \tmov    -0xc8(%rbp),%eax\n  406730:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  406733:\t0f 8c b0 fe ff ff    \tjl     4065e9 <get_data+0x3f>\n  406739:\teb 01                \tjmp    40673c <get_data+0x192>\n  40673b:\t90                   \tnop\n  40673c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40673f:\tc9                   \tleaveq \n  406740:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_data(int a1, __int64 a2, signed int a3) {\n  struct timeval <span class=\"supfact\">timeout</span>;\n  fd_set <span class=\"supfact\">readfds</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  unsigned int <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v14</span> = Number;\n  <span class=\"supfact\">v12</span> = Number;\n  <span class=\"supfact\">v13</span> = Number;\n  while ((int)<span class=\"supfact\">v14</span> < a3) {\n    memset(&<span class=\"supfact\">readfds</span>, Number, sizeof(<span class=\"supfact\">readfds</span>));\n    <span class=\"supfact\">v11</span> = Number;\n    <span class=\"supfact\">v10</span> = (unsigned int)&<span class=\"supfact\">v7</span>;\n    <span class=\"supfact\">readfds</span>.fds_bits[a1 / Number] |= Number L << (a1 % Number);\n    if (a1 >= <span class=\"supfact\">v13</span>)\n      <span class=\"supfact\">v13</span> = a1 + Number;\n    <span class=\"supfact\">timeout</span>.tv_sec = Number L;\n    <span class=\"supfact\">timeout</span>.tv_usec = Number L;\n    <span class=\"supfact\">v12</span> =\n        select(<span class=\"supfact\">v13</span> + Number, &<span class=\"supfact\">readfds</span>, Number L,\n               Number L, &<span class=\"supfact\">timeout</span>);\n    if (!<span class=\"supfact\">v12</span>) {\n      warn_errno(String, String, Number L);\n      return Number L;\n    }\n    if (<span class=\"supfact\">v12</span> == Number)\n      return Number L;\n    <span class=\"supfact\">v9</span> = Number;\n    <span class=\"supfact\">v8</span> = recv(a1, (void *)((int)<span class=\"supfact\">v14</span> + a2),\n                              a3 - <span class=\"supfact\">v14</span>, Number);\n    if (<span class=\"supfact\">v8</span> <= Number)\n      break;\n    <span class=\"supfact\">v14</span> += <span class=\"supfact\">v8</span>;\n  }\n  return <span class=\"supfact\">v14</span>;\n}", "code_t": "int __cdecl get_data(int sock, unsigned __int8 *data, unsigned int len,\n                     unsigned int *remote_addr) {\n  timeval <span class=\"supfact\">tv</span>;\n  fd_set <span class=\"supfact\">read_fds</span>;\n  sockaddr_in <span class=\"supfact\">addr</span>;\n  int <span class=\"supfact\">rlen</span>;\n  int <span class=\"supfact\">addr_len</span>;\n  int <span class=\"supfact\">__d1</span>;\n  int <span class=\"supfact\">__d0</span>;\n  int <span class=\"supfact\">ttsk</span>;\n  int <span class=\"supfact\">n_fd</span>;\n  int <span class=\"supfact\">total</span>;\n  <span class=\"supfact\">total</span> = Number;\n  <span class=\"supfact\">ttsk</span> = Number;\n  <span class=\"supfact\">n_fd</span> = Number;\n  while (<span class=\"supfact\">total</span> < (int)len) {\n    memset(&<span class=\"supfact\">read_fds</span>, Number, sizeof(<span class=\"supfact\">read_fds</span>));\n    <span class=\"supfact\">__d0</span> = Number;\n    <span class=\"supfact\">__d1</span> = (unsigned int)&<span class=\"supfact\">addr</span>;\n    <span class=\"supfact\">read_fds</span>.__fds_bits[sock / Number] |= Number L\n                                                          << (sock % Number);\n    if (sock >= <span class=\"supfact\">n_fd</span>)\n      <span class=\"supfact\">n_fd</span> = sock + Number;\n    <span class=\"supfact\">tv</span>.tv_sec = Number L;\n    <span class=\"supfact\">tv</span>.tv_usec = Number L;\n    <span class=\"supfact\">ttsk</span> =\n        select(<span class=\"supfact\">n_fd</span> + Number, &<span class=\"supfact\">read_fds</span>,\n               Number L, Number L, &<span class=\"supfact\">tv</span>);\n    if (!<span class=\"supfact\">ttsk</span>) {\n      warn_errno(String, String, Number);\n      return Number;\n    }\n    if (<span class=\"supfact\">ttsk</span> == Number)\n      return Number;\n    <span class=\"supfact\">addr_len</span> = Number;\n    <span class=\"supfact\">rlen</span> = recv(sock, &data[<span class=\"supfact\">total</span>],\n                                len - <span class=\"supfact\">total</span>, Number);\n    if (<span class=\"supfact\">rlen</span> <= Number)\n      break;\n    <span class=\"supfact\">total</span> += <span class=\"supfact\">rlen</span>;\n  }\n  return <span class=\"supfact\">total</span>;\n}", "var": [{"name": "v14", "type": "int", "ref_name": "total", "ref_type": "int"}, {"name": "v13", "type": "int", "ref_name": "n_fd", "ref_type": "int"}, {"name": "v12", "type": "int", "ref_name": "ttsk", "ref_type": "int"}, {"name": "v11", "type": "int", "ref_name": "__d0", "ref_type": "int"}, {"name": "v10", "type": "int", "ref_name": "__d1", "ref_type": "int"}, {"name": "v9", "type": "int", "ref_name": "addr_len", "ref_type": "int"}, {"name": "v8", "type": "int", "ref_name": "rlen", "ref_type": "int"}, {"name": "v7", "type": "__int64", "ref_name": "addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}, {"name": "readfds", "type": "struct fd_set { __fd_mask[16] __fds_bits; }", "ref_name": "read_fds", "ref_type": "struct fd_set { __fd_mask[16] __fds_bits; }"}, {"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/64bc886c5ea6e01228b6da2d232fc8e810371c20ee53a23c5e949cdbf0fcdc3e", "path_in_repo": "XanClic/qemu//s390x-softmmu/target/s390x/translate.o", "objdump": "0000000000005fff <gen_helper_gvec_vpkls_cc16>:\n    5fff:\t55                   \tpush   %rbp\n    6000:\t48 89 e5             \tmov    %rsp,%rbp\n    6003:\t48 83 ec 60          \tsub    $0x60,%rsp\n    6007:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    600b:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    600f:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    6013:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n    6017:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n    601b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    6022:\t00 00 \n    6024:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    6028:\t31 c0                \txor    %eax,%eax\n    602a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    602e:\t48 89 c7             \tmov    %rax,%rdi\n    6031:\te8 c5 a4 ff ff       \tcallq  4fb <tcgv_ptr_temp>\n    6036:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    603a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    603e:\t48 89 c7             \tmov    %rax,%rdi\n    6041:\te8 b5 a4 ff ff       \tcallq  4fb <tcgv_ptr_temp>\n    6046:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    604a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    604e:\t48 89 c7             \tmov    %rax,%rdi\n    6051:\te8 a5 a4 ff ff       \tcallq  4fb <tcgv_ptr_temp>\n    6056:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    605a:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    605e:\t48 89 c7             \tmov    %rax,%rdi\n    6061:\te8 95 a4 ff ff       \tcallq  4fb <tcgv_ptr_temp>\n    6066:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    606a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    606e:\t48 89 c7             \tmov    %rax,%rdi\n    6071:\te8 14 a4 ff ff       \tcallq  48a <tcgv_i32_temp>\n    6076:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    607a:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    607e:\t48 89 c1             \tmov    %rax,%rcx\n    6081:\tba 05 00 00 00       \tmov    $0x5,%edx\n    6086:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    608b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6092 <gen_helper_gvec_vpkls_cc16+0x93>\n    6092:\t48 89 c7             \tmov    %rax,%rdi\n    6095:\te8 00 00 00 00       \tcallq  609a <gen_helper_gvec_vpkls_cc16+0x9b>\n    609a:\t90                   \tnop\n    609b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    609f:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    60a6:\t00 00 \n    60a8:\t74 05                \tje     60af <gen_helper_gvec_vpkls_cc16+0xb0>\n    60aa:\te8 00 00 00 00       \tcallq  60af <gen_helper_gvec_vpkls_cc16+0xb0>\n    60af:\tc9                   \tleaveq \n    60b0:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall gen_helper_gvec_vpkls_cc16(__int64 a1, __int64 a2,\n                                                       __int64 a3, __int64 a4,\n                                                       __int64 a5) {\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  <span class=\"supfact\">v9</span>[Number] = tcgv_ptr_temp(a1);\n  <span class=\"supfact\">v9</span>[Number] = tcgv_ptr_temp(a2);\n  <span class=\"supfact\">v9</span>[Number] = tcgv_ptr_temp(a3);\n  <span class=\"supfact\">v9</span>[Number] = tcgv_ptr_temp(a4);\n  <span class=\"supfact\">v9</span>[Number] = tcgv_i32_temp(a5);\n  tcg_gen_callN(&helper_gvec_vpkls_cc16, Number L, Number L,\n                <span class=\"supfact\">v9</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v10</span>;\n}", "code_t": "void __cdecl gen_helper_gvec_vpkls_cc16(TCGv_ptr arg1, TCGv_ptr arg2,\n                                        TCGv_ptr arg3, TCGv_ptr arg4,\n                                        TCGv_i32 arg5) {\n  TCGTemp_0 *<span class=\"supfact\">args</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  <span class=\"supfact\">args</span>[Number] = tcgv_ptr_temp(arg1);\n  <span class=\"supfact\">args</span>[Number] = tcgv_ptr_temp(arg2);\n  <span class=\"supfact\">args</span>[Number] = tcgv_ptr_temp(arg3);\n  <span class=\"supfact\">args</span>[Number] = tcgv_ptr_temp(arg4);\n  <span class=\"supfact\">args</span>[Number] = tcgv_i32_temp(arg5);\n  tcg_gen_callN(&helper_gvec_vpkls_cc16, Number L, Number L,\n                <span class=\"supfact\">args</span>);\n}", "var": [{"name": "v10", "type": "unsigned __int64", "ref_name": "v9", "ref_type": "unsigned __int64"}, {"name": "v9", "type": "TCGTemp_0 *[5]", "ref_name": "args", "ref_type": "TCGTemp_0 *[5]"}], "body_in_train": false}, {"repo_owner": "sshirokov", "repo_name": "csgtool", "path": "sshirokov/csgtool/a4c3a292fbd42975121003013eb7f3500def71a89e7e05689f6ea06b5595b830", "path_in_repo": "sshirokov/csgtool//libcsg.so", "objdump": "0000000000005eee <bsp_copy_node_polygons>:\n    5eee:\t55                   \tpush   %rbp\n    5eef:\t48 89 e5             \tmov    %rsp,%rbp\n    5ef2:\t41 54                \tpush   %r12\n    5ef4:\t53                   \tpush   %rbx\n    5ef5:\t48 83 ec 70          \tsub    $0x70,%rsp\n    5ef9:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    5efd:\t89 75 94             \tmov    %esi,-0x6c(%rbp)\n    5f00:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n    5f04:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    5f0b:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    5f0f:\t48 8b 00             \tmov    (%rax),%rax\n    5f12:\t48 8b 00             \tmov    (%rax),%rax\n    5f15:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    5f19:\te9 82 01 00 00       \tjmpq   60a0 <bsp_copy_node_polygons+0x1b2>\n    5f1e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    5f22:\t48 8b 00             \tmov    (%rax),%rax\n    5f25:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    5f29:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5f2d:\t48 89 c7             \tmov    %rax,%rdi\n    5f30:\te8 eb e5 ff ff       \tcallq  4520 <poly_vertex_count@plt>\n    5f35:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    5f38:\t83 7d 94 00          \tcmpl   $0x0,-0x6c(%rbp)\n    5f3c:\t74 06                \tje     5f44 <bsp_copy_node_polygons+0x56>\n    5f3e:\t83 7d cc 03          \tcmpl   $0x3,-0x34(%rbp)\n    5f42:\t75 28                \tjne    5f6c <bsp_copy_node_polygons+0x7e>\n    5f44:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5f48:\t48 89 c7             \tmov    %rax,%rdi\n    5f4b:\te8 10 e7 ff ff       \tcallq  4660 <clone_poly@plt>\n    5f50:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    5f54:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    5f58:\t48 89 c7             \tmov    %rax,%rdi\n    5f5b:\te8 83 f2 ff ff       \tcallq  51e3 <kl_pushp_poly>\n    5f60:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    5f64:\t48 89 10             \tmov    %rdx,(%rax)\n    5f67:\te9 24 01 00 00       \tjmpq   6090 <bsp_copy_node_polygons+0x1a2>\n    5f6c:\t83 7d cc 03          \tcmpl   $0x3,-0x34(%rbp)\n    5f70:\t0f 8e 95 00 00 00    \tjle    600b <bsp_copy_node_polygons+0x11d>\n    5f76:\tc7 45 dc 02 00 00 00 \tmovl   $0x2,-0x24(%rbp)\n    5f7d:\teb 7b                \tjmp    5ffa <bsp_copy_node_polygons+0x10c>\n    5f7f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5f83:\t48 8b 08             \tmov    (%rax),%rcx\n    5f86:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    5f89:\t48 63 d0             \tmovslq %eax,%rdx\n    5f8c:\t48 89 d0             \tmov    %rdx,%rax\n    5f8f:\t48 01 c0             \tadd    %rax,%rax\n    5f92:\t48 01 d0             \tadd    %rdx,%rax\n    5f95:\t48 c1 e0 02          \tshl    $0x2,%rax\n    5f99:\t48 01 c8             \tadd    %rcx,%rax\n    5f9c:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    5fa0:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5fa4:\t48 8b 08             \tmov    (%rax),%rcx\n    5fa7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    5faa:\t48 63 d0             \tmovslq %eax,%rdx\n    5fad:\t48 89 d0             \tmov    %rdx,%rax\n    5fb0:\t48 01 c0             \tadd    %rax,%rax\n    5fb3:\t48 01 d0             \tadd    %rdx,%rax\n    5fb6:\t48 c1 e0 02          \tshl    $0x2,%rax\n    5fba:\t48 83 e8 0c          \tsub    $0xc,%rax\n    5fbe:\t48 01 c8             \tadd    %rcx,%rax\n    5fc1:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    5fc5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5fc9:\t48 8b 00             \tmov    (%rax),%rax\n    5fcc:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    5fd0:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    5fd4:\t48 89 ce             \tmov    %rcx,%rsi\n    5fd7:\t48 89 c7             \tmov    %rax,%rdi\n    5fda:\te8 01 e6 ff ff       \tcallq  45e0 <poly_make_triangle@plt>\n    5fdf:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    5fe3:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    5fe7:\t48 89 c7             \tmov    %rax,%rdi\n    5fea:\te8 f4 f1 ff ff       \tcallq  51e3 <kl_pushp_poly>\n    5fef:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n    5ff3:\t48 89 10             \tmov    %rdx,(%rax)\n    5ff6:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n    5ffa:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    5ffd:\t3b 45 cc             \tcmp    -0x34(%rbp),%eax\n    6000:\t0f 8c 79 ff ff ff    \tjl     5f7f <bsp_copy_node_polygons+0x91>\n    6006:\te9 85 00 00 00       \tjmpq   6090 <bsp_copy_node_polygons+0x1a2>\n    600b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    600f:\t48 89 c7             \tmov    %rax,%rdi\n    6012:\te8 09 e5 ff ff       \tcallq  4520 <poly_vertex_count@plt>\n    6017:\t41 89 c4             \tmov    %eax,%r12d\n    601a:\te8 41 e0 ff ff       \tcallq  4060 <__errno_location@plt>\n    601f:\t8b 00                \tmov    (%rax),%eax\n    6021:\t85 c0                \ttest   %eax,%eax\n    6023:\t74 13                \tje     6038 <bsp_copy_node_polygons+0x14a>\n    6025:\te8 36 e0 ff ff       \tcallq  4060 <__errno_location@plt>\n    602a:\t8b 00                \tmov    (%rax),%eax\n    602c:\t89 c7                \tmov    %eax,%edi\n    602e:\te8 bd e5 ff ff       \tcallq  45f0 <strerror@plt>\n    6033:\t48 89 c3             \tmov    %rax,%rbx\n    6036:\teb 07                \tjmp    603f <bsp_copy_node_polygons+0x151>\n    6038:\t48 8d 1d f3 92 00 00 \tlea    0x92f3(%rip),%rbx        # f332 <_fini+0xd72>\n    603f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6044:\te8 17 e5 ff ff       \tcallq  4560 <dbg_get_log@plt>\n    6049:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    604d:\t48 83 ec 08          \tsub    $0x8,%rsp\n    6051:\t41 54                \tpush   %r12\n    6053:\t49 89 d1             \tmov    %rdx,%r9\n    6056:\t49 89 d8             \tmov    %rbx,%r8\n    6059:\tb9 1d 01 00 00       \tmov    $0x11d,%ecx\n    605e:\t48 8d 15 9b 92 00 00 \tlea    0x929b(%rip),%rdx        # f300 <_fini+0xd40>\n    6065:\t48 8d 35 ac 94 00 00 \tlea    0x94ac(%rip),%rsi        # f518 <_fini+0xf58>\n    606c:\t48 89 c7             \tmov    %rax,%rdi\n    606f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6074:\te8 c7 e2 ff ff       \tcallq  4340 <fprintf@plt>\n    6079:\t48 83 c4 10          \tadd    $0x10,%rsp\n    607d:\te8 de df ff ff       \tcallq  4060 <__errno_location@plt>\n    6082:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    6088:\t90                   \tnop\n    6089:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    608e:\teb 28                \tjmp    60b8 <bsp_copy_node_polygons+0x1ca>\n    6090:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    6094:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    6098:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    609c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    60a0:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    60a4:\t48 8b 00             \tmov    (%rax),%rax\n    60a7:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    60ab:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n    60af:\t0f 85 69 fe ff ff    \tjne    5f1e <bsp_copy_node_polygons+0x30>\n    60b5:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    60b8:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n    60bc:\t5b                   \tpop    %rbx\n    60bd:\t41 5c                \tpop    %r12\n    60bf:\t5d                   \tpop    %rbp\n    60c0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bsp_copy_node_polygons(_QWORD **a1, int a2, __int64 a3) {\n  __int64 v3;\n  int *v4;\n  char *v5;\n  FILE *v6;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  _QWORD *<span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">j</span>;\n  _QWORD *<span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v15</span> = Number;\n  for (<span class=\"supfact\">i</span> = (_QWORD *)**a1;;\n       <span class=\"supfact\">i</span> = (_QWORD *)<span class=\"supfact\">i</span>[Number]) {\n    if (<span class=\"supfact\">i</span> == (_QWORD *)(*a1)[Number])\n      return <span class=\"supfact\">v15</span>;\n    <span class=\"supfact\">v12</span> = (_QWORD *)*<span class=\"supfact\">i</span>;\n    <span class=\"supfact\">v11</span> = poly_vertex_count(*<span class=\"supfact\">i</span>);\n    if (!a2 || <span class=\"supfact\">v11</span> == Number) {\n      <span class=\"supfact\">v9</span> = clone_poly(<span class=\"supfact\">v12</span>);\n      *(_QWORD *)kl_pushp_poly(a3) = <span class=\"supfact\">v9</span>;\n      goto LABEL_14;\n    }\n    if (<span class=\"supfact\">v11</span> <= Number)\n      break;\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < <span class=\"supfact\">v11</span>;\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">v10</span> = poly_make_triangle(\n          *<span class=\"supfact\">v12</span>,\n          *<span class=\"supfact\">v12</span> + Number L * <span class=\"supfact\">j</span> - Number,\n          *<span class=\"supfact\">v12</span> + Number L * <span class=\"supfact\">j</span>);\n      *(_QWORD *)kl_pushp_poly(a3) = <span class=\"supfact\">v10</span>;\n    }\n  LABEL_14:\n    ++<span class=\"supfact\">v15</span>;\n  }\n  v3 = (unsigned int)poly_vertex_count(<span class=\"supfact\">v12</span>);\n  if (*__errno_location()) {\n    v4 = __errno_location();\n    v5 = strerror(*v4);\n  } else {\n    v5 = String;\n  }\n  v6 = (FILE *)dbg_get_log();\n  fprintf(v6, String, String, Number L, v5, <span class=\"supfact\">v12</span>, v3);\n  *__errno_location() = Number;\n  return Number;\n}", "code_t": "int __cdecl bsp_copy_node_polygons(bsp_node_t *node, int make_triangles,\n                                   kl_poly_t *dst) {\n  __int64 v3;\n  int *v4;\n  char *v5;\n  FILE *v6;\n  poly_t *<span class=\"supfact\">copy</span>;\n  poly_t *<span class=\"supfact\">tri</span>;\n  int <span class=\"supfact\">vertex_count</span>;\n  poly_t *<span class=\"supfact\">poly</span>;\n  int <span class=\"supfact\">i</span>;\n  kl1_poly *<span class=\"supfact\">iter</span>;\n  int <span class=\"supfact\">copied</span>;\n  <span class=\"supfact\">copied</span> = Number;\n  for (<span class=\"supfact\">iter</span> = node->polygons->head;;\n       <span class=\"supfact\">iter</span> = <span class=\"supfact\">iter</span>->next) {\n    if (<span class=\"supfact\">iter</span> == node->polygons->tail)\n      return <span class=\"supfact\">copied</span>;\n    <span class=\"supfact\">poly</span> = <span class=\"supfact\">iter</span>->data;\n    <span class=\"supfact\">vertex_count</span> =\n        poly_vertex_count(<span class=\"supfact\">iter</span>->data);\n    if (!make_triangles || <span class=\"supfact\">vertex_count</span> == Number) {\n      <span class=\"supfact\">copy</span> = clone_poly(<span class=\"supfact\">poly</span>);\n      *kl_pushp_poly(dst) = <span class=\"supfact\">copy</span>;\n      goto LABEL_14;\n    }\n    if (<span class=\"supfact\">vertex_count</span> <= Number)\n      break;\n    for (<span class=\"supfact\">i</span> = Number;\n         <span class=\"supfact\">i</span> < <span class=\"supfact\">vertex_count</span>;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">tri</span> = poly_make_triangle(\n          (float *)<span class=\"supfact\">poly</span>->vertices,\n          <span class=\"supfact\">poly</span>->vertices[<span class=\"supfact\">i</span> - Number],\n          <span class=\"supfact\">poly</span>->vertices[<span class=\"supfact\">i</span>]);\n      *kl_pushp_poly(dst) = <span class=\"supfact\">tri</span>;\n    }\n  LABEL_14:\n    ++<span class=\"supfact\">copied</span>;\n  }\n  v3 = (unsigned int)poly_vertex_count(<span class=\"supfact\">poly</span>);\n  if (*__errno_location()) {\n    v4 = __errno_location();\n    v5 = strerror(*v4);\n  } else {\n    v5 = String;\n  }\n  v6 = dbg_get_log();\n  fprintf(v6, String, String, Number L, v5, <span class=\"supfact\">poly</span>, v3);\n  *__errno_location() = Number;\n  return Number;\n}", "var": [{"name": "v15", "type": "int", "ref_name": "copied", "ref_type": "int"}, {"name": "i", "type": "__unk__", "ref_name": "iter", "ref_type": "__unk__"}, {"name": "j", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v12", "type": "poly_t *", "ref_name": "poly", "ref_type": "poly_t *"}, {"name": "v11", "type": "int", "ref_name": "vertex_count", "ref_type": "int"}, {"name": "v10", "type": "__unk__", "ref_name": "tri", "ref_type": "poly_t *"}, {"name": "v9", "type": "poly_t *", "ref_name": "copy", "ref_type": "poly_t *"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/560880a0d78a16c1d09b1d26c617d93994fcc3deea10e346cbe2cb3ba3e3c537", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/royalmah.o", "objdump": "0000000000000000 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 60          \tsub    $0x60,%rsp\n   b:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n   f:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  13:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  17:\t89 4d 94             \tmov    %ecx,-0x6c(%rbp)\n  1a:\t48 c7 45 e8 28 02 00 \tmovq   $0x228,-0x18(%rbp)\n  21:\t00 \n  22:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  29:\t00 \n  2a:\tc7 45 dc 57 02 00 00 \tmovl   $0x257,-0x24(%rbp)\n  31:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  34:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  38:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  3c:\t48 89 ce             \tmov    %rcx,%rsi\n  3f:\t48 89 c7             \tmov    %rax,%rdi\n  42:\te8 00 00 00 00       \tcallq  47 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0x47>\n  47:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4b:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  50:\t75 27                \tjne    79 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0x79>\n  52:\tbf 08 00 00 00       \tmov    $0x8,%edi\n  57:\te8 00 00 00 00       \tcallq  5c <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0x5c>\n  5c:\t48 89 c3             \tmov    %rax,%rbx\n  5f:\t48 89 df             \tmov    %rbx,%rdi\n  62:\te8 00 00 00 00       \tcallq  67 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0x67>\n  67:\tba 00 00 00 00       \tmov    $0x0,%edx\n  6c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  71:\t48 89 df             \tmov    %rbx,%rdi\n  74:\te8 00 00 00 00       \tcallq  79 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0x79>\n  79:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  7d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  81:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  86:\t48 89 c7             \tmov    %rax,%rdi\n  89:\te8 00 00 00 00       \tcallq  8e <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0x8e>\n  8e:\t48 8b 5d d0          \tmov    -0x30(%rbp),%rbx\n  92:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n  96:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  9a:\t48 89 d1             \tmov    %rdx,%rcx\n  9d:\tba 00 00 00 00       \tmov    $0x0,%edx\n  a2:\t48 89 c6             \tmov    %rax,%rsi\n  a5:\t48 89 df             \tmov    %rbx,%rdi\n  a8:\te8 00 00 00 00       \tcallq  ad <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0xad>\n  ad:\teb 16                \tjmp    c5 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0xc5>\n  af:\t48 83 fa ff          \tcmp    $0xffffffffffffffff,%rdx\n  b3:\t74 08                \tje     bd <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0xbd>\n  b5:\t48 89 c7             \tmov    %rax,%rdi\n  b8:\te8 00 00 00 00       \tcallq  bd <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0xbd>\n  bd:\t48 89 c7             \tmov    %rax,%rdi\n  c0:\te8 00 00 00 00       \tcallq  c5 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0xc5>\n  c5:\t48 89 de             \tmov    %rbx,%rsi\n  c8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  cd:\te8 00 00 00 00       \tcallq  d2 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0xd2>\n  d2:\teb 3f                \tjmp    113 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0x113>\n  d4:\t49 89 c4             \tmov    %rax,%r12\n  d7:\t48 89 5d c8          \tmov    %rbx,-0x38(%rbp)\n  db:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n  e2:\t00 \n  e3:\tc7 45 bc 57 02 00 00 \tmovl   $0x257,-0x44(%rbp)\n  ea:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  ef:\t74 16                \tje     107 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0x107>\n  f1:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n  f4:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  f8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  fc:\t48 89 ce             \tmov    %rcx,%rsi\n  ff:\t48 89 c7             \tmov    %rax,%rdi\n 102:\te8 00 00 00 00       \tcallq  107 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0x107>\n 107:\t90                   \tnop\n 108:\t4c 89 e0             \tmov    %r12,%rax\n 10b:\t48 89 c7             \tmov    %rax,%rdi\n 10e:\te8 00 00 00 00       \tcallq  113 <_Z21driver_device_creatorI14royalmah_stateEP8device_tRK14machine_configPKcS2_j+0x113>\n 113:\t48 83 c4 60          \tadd    $0x60,%rsp\n 117:\t5b                   \tpop    %rbx\n 118:\t41 5c                \tpop    %r12\n 11a:\t5d                   \tpop    %rbp\n 11b:\tc3                   \tretq   ", "code_s": "device_t *__fastcall driver_device_creator<royalmah_state>(\n    const machine_config *a1, const char *a2, device_t *a3) {\n  std bad_alloc *v3;\n  void *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (void *)malloc_file_line(Number, String, Number);\n  if (!<span class=\"supfact\">s</span>) {\n    v3 = (std bad_alloc *)_cxa_allocate_exception(Number);\n    std bad_alloc bad_alloc(v3); _cxa_throw ( v3 , ( struct type_info * ) & ` typeinfo for ' std bad_alloc , ( void ( __fastcall * ) ( void * ) ) & std bad_alloc ~ bad_alloc ) ; } memset ( <span class=\"supfact\">s</span> , Number , Number ) ; royalmah_state royalmah_state ( ( royalmah_state * ) <span class=\"supfact\">s</span> , a1 , driver_device_creator < royalmah_state > , a2 ) ; return ( device_t * ) resource_pool add_object < royalmah_state > ( & global_resource_pool , <span class=\"supfact\">s</span> ) ; }", "code_t": "device_t *__cdecl driver_device_creator<royalmah_state>(\n    const machine_config *mconfig, const char *tag, device_t *owner,\n    UINT32 clock) {\n  std bad_alloc *v4;\n  royalmah_state *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> =\n      (royalmah_state *)malloc_file_line(Number, String, Number);\n  if (!<span class=\"supfact\">s</span>) {\n    v4 = (std bad_alloc *)_cxa_allocate_exception(Number);\n    std bad_alloc bad_alloc(v4); _cxa_throw ( v4 , ( struct type_info * ) & ` typeinfo for ' std bad_alloc , ( void ( __fastcall * ) ( void * ) ) & std bad_alloc ~ bad_alloc ) ; } memset ( <span class=\"supfact\">s</span> , Number , sizeof ( royalmah_state ) ) ; royalmah_state royalmah_state ( <span class=\"supfact\">s</span> , mconfig , ( device_type ) driver_device_creator < royalmah_state > , tag ) ; return ( device_t * ) resource_pool add_object < royalmah_state > ( & global_resource_pool , <span class=\"supfact\">s</span> ) ; }", "var": [{"name": "s", "type": "__unk__", "ref_name": "s", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "sunway513", "repo_name": "Rodinia_3.0", "path": "sunway513/Rodinia_3.0/4fe17f9e02b64d4938b65eba7cae746ba9f71eb04c1c53e87c059fb7484c9238", "path_in_repo": "sunway513/Rodinia_3.0/cuda/leukocyte/meschach_lib/zfunc.o", "objdump": "000000000000087c <zlog>:\n 87c:\t55                   \tpush   %rbp\n 87d:\t48 89 e5             \tmov    %rsp,%rbp\n 880:\t53                   \tpush   %rbx\n 881:\t48 83 ec 28          \tsub    $0x28,%rsp\n 885:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 88a:\tba 00 00 00 00       \tmov    $0x0,%edx\n 88f:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n 894:\t66 48 0f 7e ca       \tmovq   %xmm1,%rdx\n 899:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 89d:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 8a1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 8a5:\tf2 0f 10 4d d8       \tmovsd  -0x28(%rbp),%xmm1\n 8aa:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n 8af:\te8 00 00 00 00       \tcallq  8b4 <zlog+0x38>\n 8b4:\te8 00 00 00 00       \tcallq  8b9 <zlog+0x3d>\n 8b9:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n 8be:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 8c2:\tf2 0f 10 45 d0       \tmovsd  -0x30(%rbp),%xmm0\n 8c7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 8cb:\t66 0f 28 c8          \tmovapd %xmm0,%xmm1\n 8cf:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n 8d4:\te8 00 00 00 00       \tcallq  8d9 <zlog+0x5d>\n 8d9:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n 8de:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 8e2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 8e6:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 8ea:\t48 89 c1             \tmov    %rax,%rcx\n 8ed:\t48 89 d3             \tmov    %rdx,%rbx\n 8f0:\t66 48 0f 6e c1       \tmovq   %rcx,%xmm0\n 8f5:\t66 48 0f 6e ca       \tmovq   %rdx,%xmm1\n 8fa:\t48 83 c4 28          \tadd    $0x28,%rsp\n 8fe:\t5b                   \tpop    %rbx\n 8ff:\t5d                   \tpop    %rbp\n 900:\tc3                   \tretq   ", "code_s": "double __fastcall zlog(double a1, double a2) {\n  double v2;\n  double <span class=\"supfact\">v5</span>;\n  v2 = zabs(a1, a2);\n  <span class=\"supfact\">v5</span> = log(v2);\n  atan2(a2, a1);\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "complex __cdecl zlog(complex z) {\n  double v1;\n  double v2;\n  complex result;\n  double za;\n  double <span class=\"supfact\">w</span>;\n  double w_8;\n  za = z.re;\n  z.re = zabs((complex)__PAIR128__(*(unsigned __int64 *)&z.im,\n                                   *(unsigned __int64 *)&z.re));\n  <span class=\"supfact\">w</span> = log(z.re);\n  w_8 = atan2(z.im, za);\n  v1 = <span class=\"supfact\">w</span>;\n  v2 = w_8;\n  result.im = v2;\n  result.re = v1;\n  return result;\n}", "var": [{"name": "v5", "type": "double", "ref_name": "w", "ref_type": "double"}], "body_in_train": false}, {"repo_owner": "zwjsylar", "repo_name": "cubieboard", "path": "zwjsylar/cubieboard/0316e2bcee29e6d2f60b727f3642738e9cb071db2a21ae1fe5ecf8036ca0aa76", "path_in_repo": "zwjsylar/cubieboard/broadcom-bluetooth/brcm_patchram_plus_h5", "objdump": "000000000040144d <validate_baudrate>:\n  40144d:\t55                   \tpush   %rbp\n  40144e:\t48 89 e5             \tmov    %rsp,%rbp\n  401451:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  401454:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  401458:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40145f:\teb 2a                \tjmp    40148b <validate_baudrate+0x3e>\n  401461:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401464:\t8b 04 c5 e0 61 40 00 \tmov    0x4061e0(,%rax,8),%eax\n  40146b:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  40146e:\t75 17                \tjne    401487 <validate_baudrate+0x3a>\n  401470:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401473:\t8b 14 c5 e4 61 40 00 \tmov    0x4061e4(,%rax,8),%edx\n  40147a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40147e:\t89 10                \tmov    %edx,(%rax)\n  401480:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401485:\teb 0f                \tjmp    401496 <validate_baudrate+0x49>\n  401487:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40148b:\t83 7d fc 0d          \tcmpl   $0xd,-0x4(%rbp)\n  40148f:\t76 d0                \tjbe    401461 <validate_baudrate+0x14>\n  401491:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401496:\t5d                   \tpop    %rbp\n  401497:\tc3                   \tretq   ", "code_s": "__int64 __fastcall validate_baudrate(int a1, _DWORD *a2) {\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (a1 == baud_rates[Number * <span class=\"supfact\">i</span>]) {\n      *a2 = dword_4061E4[Number * <span class=\"supfact\">i</span>];\n      return Number L;\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl validate_baudrate(int baud_rate, int *value) {\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (baud_rate == baud_rates[<span class=\"supfact\">i</span>].baud_rate) {\n      *value = baud_rates[<span class=\"supfact\">i</span>].termios_value;\n      return Number;\n    }\n  }\n  return Number;\n}", "var": [{"name": "i", "type": "unsigned int", "ref_name": "i", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/e8da449a44a80cd6ebeed00f7ba6c947b29e130a8750f4945bf74dda9ab9d2c5", "path_in_repo": "XanClic/qemu//block/blkdebug.o", "objdump": "00000000000006be <blkdebug_parse_filename>:\n     6be:\t55                   \tpush   %rbp\n     6bf:\t48 89 e5             \tmov    %rsp,%rbp\n     6c2:\t48 83 ec 40          \tsub    $0x40,%rsp\n     6c6:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     6ca:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     6ce:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     6d2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6d6:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n     6da:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6e1 <blkdebug_parse_filename+0x23>\n     6e1:\t48 89 c7             \tmov    %rax,%rdi\n     6e4:\te8 00 00 00 00       \tcallq  6e9 <blkdebug_parse_filename+0x2b>\n     6e9:\t85 c0                \ttest   %eax,%eax\n     6eb:\t75 1c                \tjne    709 <blkdebug_parse_filename+0x4b>\n     6ed:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     6f1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     6f5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6fc <blkdebug_parse_filename+0x3e>\n     6fc:\t48 89 c7             \tmov    %rax,%rdi\n     6ff:\te8 00 00 00 00       \tcallq  704 <blkdebug_parse_filename+0x46>\n     704:\te9 d7 00 00 00       \tjmpq   7e0 <blkdebug_parse_filename+0x122>\n     709:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     70d:\tbe 3a 00 00 00       \tmov    $0x3a,%esi\n     712:\t48 89 c7             \tmov    %rax,%rdi\n     715:\te8 00 00 00 00       \tcallq  71a <blkdebug_parse_filename+0x5c>\n     71a:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     71e:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n     723:\t75 30                \tjne    755 <blkdebug_parse_filename+0x97>\n     725:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     729:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 730 <blkdebug_parse_filename+0x72>\n     730:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 737 <blkdebug_parse_filename+0x79>\n     737:\tba 4c 01 00 00       \tmov    $0x14c,%edx\n     73c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 743 <blkdebug_parse_filename+0x85>\n     743:\t48 89 c7             \tmov    %rax,%rdi\n     746:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     74b:\te8 00 00 00 00       \tcallq  750 <blkdebug_parse_filename+0x92>\n     750:\te9 8b 00 00 00       \tjmpq   7e0 <blkdebug_parse_filename+0x122>\n     755:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     759:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n     75d:\t74 5e                \tje     7bd <blkdebug_parse_filename+0xff>\n     75f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     763:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     767:\t48 29 c2             \tsub    %rax,%rdx\n     76a:\t48 89 d0             \tmov    %rdx,%rax\n     76d:\t48 89 c2             \tmov    %rax,%rdx\n     770:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     774:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     779:\t48 89 c7             \tmov    %rax,%rdi\n     77c:\te8 00 00 00 00       \tcallq  781 <blkdebug_parse_filename+0xc3>\n     781:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     785:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     789:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     78d:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     792:\t74 0e                \tje     7a2 <blkdebug_parse_filename+0xe4>\n     794:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     798:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     79c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7a0:\teb 05                \tjmp    7a7 <blkdebug_parse_filename+0xe9>\n     7a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     7a7:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     7ab:\t48 89 c2             \tmov    %rax,%rdx\n     7ae:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 7b5 <blkdebug_parse_filename+0xf7>\n     7b5:\t48 89 cf             \tmov    %rcx,%rdi\n     7b8:\te8 00 00 00 00       \tcallq  7bd <blkdebug_parse_filename+0xff>\n     7bd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     7c1:\t48 83 c0 01          \tadd    $0x1,%rax\n     7c5:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     7c9:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     7cd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     7d1:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 7d8 <blkdebug_parse_filename+0x11a>\n     7d8:\t48 89 c7             \tmov    %rax,%rdi\n     7db:\te8 00 00 00 00       \tcallq  7e0 <blkdebug_parse_filename+0x122>\n     7e0:\tc9                   \tleaveq \n     7e1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall blkdebug_parse_filename(char *a1, __int64 a2, __int64 a3) {\n  __int64 v4;\n  char *<span class=\"supfact\">s</span>;\n  char *<span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">s</span> = a1;\n  if (!(unsigned int)strstart(a1, String, &<span class=\"supfact\">s</span>))\n    return qdict_put_str(a2, String, <span class=\"supfact\">s</span>);\n  <span class=\"supfact\">v7</span> = strchr(<span class=\"supfact\">s</span>, Number);\n  if (!<span class=\"supfact\">v7</span>)\n    return error_setg_internal(a3, String, Number L, String, String);\n  if (<span class=\"supfact\">v7</span> != <span class=\"supfact\">s</span>) {\n    <span class=\"supfact\">v8</span> = qstring_from_substr(\n        <span class=\"supfact\">s</span>, Number L, <span class=\"supfact\">v7</span> - <span class=\"supfact\">s</span>);\n    <span class=\"supfact\">v9</span> = <span class=\"supfact\">v8</span>;\n    if (<span class=\"supfact\">v8</span>) {\n      <span class=\"supfact\">v10</span> = <span class=\"supfact\">v9</span>;\n      v4 = <span class=\"supfact\">v9</span>;\n    } else {\n      v4 = Number L;\n    }\n    qdict_put_obj(a2, String, v4);\n  }\n  <span class=\"supfact\">s</span> = <span class=\"supfact\">v7</span> + Number;\n  return qdict_put_str(a2, String, <span class=\"supfact\">v7</span> + Number);\n}", "code_t": "void __cdecl blkdebug_parse_filename(const char *filename, QDict_0 *options,\n                                     Error_0 **errp) {\n  QString_0 *v3;\n  const char *<span class=\"supfact\">filenamea</span>;\n  const char *<span class=\"supfact\">c</span>;\n  QString_0 *<span class=\"supfact\">config_path</span>;\n  QString_0 *<span class=\"supfact\">_obj</span>;\n  const QObjectBase_ *<span class=\"supfact\">__mptr</span>;\n  <span class=\"supfact\">filenamea</span> = filename;\n  if ((unsigned int)strstart(filename, String, &<span class=\"supfact\">filenamea</span>)) {\n    <span class=\"supfact\">c</span> = strchr(<span class=\"supfact\">filenamea</span>, Number);\n    if (<span class=\"supfact\">c</span>) {\n      if (<span class=\"supfact\">c</span> != <span class=\"supfact\">filenamea</span>) {\n        <span class=\"supfact\">config_path</span> = (QString_0 *)qstring_from_substr(\n            <span class=\"supfact\">filenamea</span>, Number L,\n            <span class=\"supfact\">c</span> - <span class=\"supfact\">filenamea</span>);\n        <span class=\"supfact\">_obj</span> = <span class=\"supfact\">config_path</span>;\n        if (<span class=\"supfact\">config_path</span>) {\n          <span class=\"supfact\">__mptr</span> = &<span class=\"supfact\">_obj</span>->base;\n          v3 = <span class=\"supfact\">_obj</span>;\n        } else {\n          v3 = Number L;\n        }\n        qdict_put_obj(options, String, v3);\n      }\n      <span class=\"supfact\">filenamea</span> = <span class=\"supfact\">c</span> + Number;\n      qdict_put_str(options, String, <span class=\"supfact\">c</span> + Number);\n    } else {\n      error_setg_internal(errp, String, Number L, String, String);\n    }\n  } else {\n    qdict_put_str(options, String, <span class=\"supfact\">filenamea</span>);\n  }\n}", "var": [{"name": "v10", "type": "QString_0 *", "ref_name": "__mptr", "ref_type": "const QObjectBase_ *"}, {"name": "v9", "type": "const char *", "ref_name": "_obj", "ref_type": "QString_0 *"}, {"name": "v8", "type": "const char *", "ref_name": "config_path", "ref_type": "QString_0 *"}, {"name": "v7", "type": "QString_0 *", "ref_name": "c", "ref_type": "const char *"}, {"name": "s", "type": "const char *", "ref_name": "filenamea", "ref_type": "const char *"}], "body_in_train": false}, {"repo_owner": "Simmani", "repo_name": "simmani-sdk", "path": "Simmani/simmani-sdk/62e8d694e3504100b809df7673e060943bd56d7ada99eaba80aa8925611c4ecf", "path_in_repo": "Simmani/simmani-sdk/linux/tools/testing/radix-tree/main.o", "objdump": "0000000000000000 <__gang_check>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t41 56                \tpush   %r14\n       6:\t41 55                \tpush   %r13\n       8:\t41 54                \tpush   %r12\n       a:\t53                   \tpush   %rbx\n       b:\t48 83 ec 70          \tsub    $0x70,%rsp\n       f:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n      13:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n      17:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n      1e:\t89 8d 74 ff ff ff    \tmov    %ecx,-0x8c(%rbp)\n      24:\t44 89 85 70 ff ff ff \tmov    %r8d,-0x90(%rbp)\n      2b:\t4c 8d 65 a0          \tlea    -0x60(%rbp),%r12\n      2f:\t4d 89 e6             \tmov    %r12,%r14\n      32:\t83 3d 00 00 00 00 00 \tcmpl   $0x0,0x0(%rip)        # 39 <__gang_check+0x39>\n      39:\t74 12                \tje     4d <__gang_check+0x4d>\n      3b:\tbf 40 00 00 00       \tmov    $0x40,%edi\n      40:\te8 00 00 00 00       \tcallq  45 <__gang_check+0x45>\n      45:\t48 85 c0             \ttest   %rax,%rax\n      48:\t74 03                \tje     4d <__gang_check+0x4d>\n      4a:\t49 89 c4             \tmov    %rax,%r12\n      4d:\t49 8d 44 24 40       \tlea    0x40(%r12),%rax\n      52:\t48 89 c3             \tmov    %rax,%rbx\n      55:\t49 c7 04 24 b3 8a b5 \tmovq   $0x41b58ab3,(%r12)\n      5c:\t41 \n      5d:\t49 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%r12)\n      64:\t00 00 \n      66:\t49 c7 44 24 10 00 00 \tmovq   $0x0,0x10(%r12)\n      6d:\t00 00 \n      6f:\t4d 89 e5             \tmov    %r12,%r13\n      72:\t49 c1 ed 03          \tshr    $0x3,%r13\n      76:\t41 c7 85 00 80 ff 7f \tmovl   $0xf1f1f1f1,0x7fff8000(%r13)\n      7d:\tf1 f1 f1 f1 \n      81:\t41 c7 85 04 80 ff 7f \tmovl   $0xf3f30000,0x7fff8004(%r13)\n      88:\t00 00 f3 f3 \n      8c:\t48 8d 43 e0          \tlea    -0x20(%rbx),%rax\n      90:\t48 89 c2             \tmov    %rax,%rdx\n      93:\t48 89 d0             \tmov    %rdx,%rax\n      96:\t48 c1 e8 03          \tshr    $0x3,%rax\n      9a:\t48 05 00 80 ff 7f    \tadd    $0x7fff8000,%rax\n      a0:\t0f b6 00             \tmovzbl (%rax),%eax\n      a3:\t84 c0                \ttest   %al,%al\n      a5:\t0f 95 c1             \tsetne  %cl\n      a8:\t3c 03                \tcmp    $0x3,%al\n      aa:\t0f 9e c0             \tsetle  %al\n      ad:\t21 c8                \tand    %ecx,%eax\n      af:\t84 c0                \ttest   %al,%al\n      b1:\t74 08                \tje     bb <__gang_check+0xbb>\n      b3:\t48 89 d7             \tmov    %rdx,%rdi\n      b6:\te8 00 00 00 00       \tcallq  bb <__gang_check+0xbb>\n      bb:\tc7 43 e0 c0 00 40 02 \tmovl   $0x24000c0,-0x20(%rbx)\n      c2:\t48 8d 43 e0          \tlea    -0x20(%rbx),%rax\n      c6:\t48 83 c0 08          \tadd    $0x8,%rax\n      ca:\t48 89 c2             \tmov    %rax,%rdx\n      cd:\t48 c1 ea 03          \tshr    $0x3,%rdx\n      d1:\t48 81 c2 00 80 ff 7f \tadd    $0x7fff8000,%rdx\n      d8:\t0f b6 12             \tmovzbl (%rdx),%edx\n      db:\t84 d2                \ttest   %dl,%dl\n      dd:\t74 08                \tje     e7 <__gang_check+0xe7>\n      df:\t48 89 c7             \tmov    %rax,%rdi\n      e2:\te8 00 00 00 00       \tcallq  e7 <__gang_check+0xe7>\n      e7:\t48 c7 43 e8 00 00 00 \tmovq   $0x0,-0x18(%rbx)\n      ee:\t00 \n      ef:\t48 c7 45 88 00 00 00 \tmovq   $0x40000000,-0x78(%rbp)\n      f6:\t40 \n      f7:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n      fb:\t48 f7 d8             \tneg    %rax\n      fe:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n     102:\teb 1f                \tjmp    123 <__gang_check+0x123>\n     104:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n     108:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     10c:\t48 01 c2             \tadd    %rax,%rdx\n     10f:\t48 8d 43 e0          \tlea    -0x20(%rbx),%rax\n     113:\t48 89 d6             \tmov    %rdx,%rsi\n     116:\t48 89 c7             \tmov    %rax,%rdi\n     119:\te8 00 00 00 00       \tcallq  11e <__gang_check+0x11e>\n     11e:\t48 83 45 98 01       \taddq   $0x1,-0x68(%rbp)\n     123:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     127:\t48 3b 85 78 ff ff ff \tcmp    -0x88(%rbp),%rax\n     12e:\t7c d4                \tjl     104 <__gang_check+0x104>\n     130:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     134:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n     138:\t48 29 c2             \tsub    %rax,%rdx\n     13b:\t48 89 d0             \tmov    %rdx,%rax\n     13e:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n     142:\t48 8d 43 e0          \tlea    -0x20(%rbx),%rax\n     146:\t48 89 d6             \tmov    %rdx,%rsi\n     149:\t48 89 c7             \tmov    %rax,%rdi\n     14c:\te8 00 00 00 00       \tcallq  151 <__gang_check+0x151>\n     151:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     155:\t48 f7 d8             \tneg    %rax\n     158:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n     15c:\teb 1f                \tjmp    17d <__gang_check+0x17d>\n     15e:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n     162:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     166:\t48 01 c2             \tadd    %rax,%rdx\n     169:\t48 8d 43 e0          \tlea    -0x20(%rbx),%rax\n     16d:\t48 89 d6             \tmov    %rdx,%rsi\n     170:\t48 89 c7             \tmov    %rax,%rdi\n     173:\te8 00 00 00 00       \tcallq  178 <__gang_check+0x178>\n     178:\t48 83 45 98 01       \taddq   $0x1,-0x68(%rbp)\n     17d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     181:\t48 3b 85 78 ff ff ff \tcmp    -0x88(%rbp),%rax\n     188:\t7c d4                \tjl     15e <__gang_check+0x15e>\n     18a:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     191:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     195:\t48 01 c2             \tadd    %rax,%rdx\n     198:\t48 8d 43 e0          \tlea    -0x20(%rbx),%rax\n     19c:\t48 89 d6             \tmov    %rdx,%rsi\n     19f:\t48 89 c7             \tmov    %rax,%rdi\n     1a2:\te8 00 00 00 00       \tcallq  1a7 <__gang_check+0x1a7>\n     1a7:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     1ae:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     1b2:\t48 01 d0             \tadd    %rdx,%rax\n     1b5:\t48 89 c7             \tmov    %rax,%rdi\n     1b8:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     1bc:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n     1c0:\t48 89 d6             \tmov    %rdx,%rsi\n     1c3:\t48 29 c6             \tsub    %rax,%rsi\n     1c6:\t8b 8d 70 ff ff ff    \tmov    -0x90(%rbp),%ecx\n     1cc:\t8b 95 74 ff ff ff    \tmov    -0x8c(%rbp),%edx\n     1d2:\t48 8d 43 e0          \tlea    -0x20(%rbx),%rax\n     1d6:\t41 89 c8             \tmov    %ecx,%r8d\n     1d9:\t89 d1                \tmov    %edx,%ecx\n     1db:\t48 89 fa             \tmov    %rdi,%rdx\n     1de:\t48 89 c7             \tmov    %rax,%rdi\n     1e1:\te8 00 00 00 00       \tcallq  1e6 <__gang_check+0x1e6>\n     1e6:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n     1ea:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     1f1:\t48 01 d0             \tadd    %rdx,%rax\n     1f4:\t48 89 c7             \tmov    %rax,%rdi\n     1f7:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     1fb:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n     1ff:\t48 89 d6             \tmov    %rdx,%rsi\n     202:\t48 29 c6             \tsub    %rax,%rsi\n     205:\t8b 95 74 ff ff ff    \tmov    -0x8c(%rbp),%edx\n     20b:\t48 8d 43 e0          \tlea    -0x20(%rbx),%rax\n     20f:\t89 d1                \tmov    %edx,%ecx\n     211:\t48 89 fa             \tmov    %rdi,%rdx\n     214:\t48 89 c7             \tmov    %rax,%rdi\n     217:\te8 00 00 00 00       \tcallq  21c <__gang_check+0x21c>\n     21c:\t48 8d 43 e0          \tlea    -0x20(%rbx),%rax\n     220:\t48 89 c7             \tmov    %rax,%rdi\n     223:\te8 00 00 00 00       \tcallq  228 <__gang_check+0x228>\n     228:\t90                   \tnop\n     229:\t4d 39 e6             \tcmp    %r12,%r14\n     22c:\t74 1b                \tje     249 <__gang_check+0x249>\n     22e:\t49 c7 04 24 0e 36 e0 \tmovq   $0x45e0360e,(%r12)\n     235:\t45 \n     236:\t48 b8 f5 f5 f5 f5 f5 \tmovabs $0xf5f5f5f5f5f5f5f5,%rax\n     23d:\tf5 f5 f5 \n     240:\t49 89 85 00 80 ff 7f \tmov    %rax,0x7fff8000(%r13)\n     247:\teb 0b                \tjmp    254 <__gang_check+0x254>\n     249:\t49 c7 85 00 80 ff 7f \tmovq   $0x0,0x7fff8000(%r13)\n     250:\t00 00 00 00 \n     254:\t48 83 c4 70          \tadd    $0x70,%rsp\n     258:\t5b                   \tpop    %rbx\n     259:\t41 5c                \tpop    %r12\n     25b:\t41 5d                \tpop    %r13\n     25d:\t41 5e                \tpop    %r14\n     25f:\t5d                   \tpop    %rbp\n     260:\tc3                   \tretq   ", "code_s": "__int64 __fastcall _gang_check(__int64 a1, __int64 a2, __int64 a3,\n                               unsigned int a4, unsigned int a5) {\n  unsigned __int64 v5;\n  __int64 v6;\n  unsigned __int64 v7;\n  __int64 result;\n  __int64 i;\n  __int64 j;\n  char <span class=\"supfact\">v14</span>[Number];\n  v5 = (unsigned __int64)<span class=\"supfact\">v14</span>;\n  if (_asan_option_detect_stack_use_after_return) {\n    v6 = _asan_stack_malloc_0(Number L);\n    if (v6)\n      v5 = v6;\n  }\n  *(_QWORD *)v5 = Number L;\n  *(_QWORD *)(v5 + Number) = String;\n  *(_QWORD *)(v5 + Number) = _gang_check;\n  v7 = v5 >> Number;\n  *(_DWORD *)(v7 + Number) = Number;\n  *(_DWORD *)(v7 + Number) = Number;\n  if (*(_BYTE *)(((v5 + Number) >> Number) + Number) != Number &&\n      *(_BYTE *)(((v5 + Number) >> Number) + Number) <= Number)\n    _asan_report_store4(v5 + Number);\n  *(_DWORD *)(v5 + Number) = Number;\n  if (*(_BYTE *)(((v5 + Number) >> Number) + Number))\n    _asan_report_store8(v5 + Number);\n  *(_QWORD *)(v5 + Number) = Number L;\n  for (i = -a2; i < a3; ++i)\n    item_insert(v5 + Number, i + Number);\n  item_check_absent(v5 + Number, Number - a2 - Number);\n  for (j = -a2; j < a3; ++j)\n    item_check_present(v5 + Number, j + Number);\n  item_check_absent(v5 + Number, a3 + Number);\n  item_gang_check_present(v5 + Number, Number - a2, a3 + a2, a4, a5);\n  item_full_scan(v5 + Number, Number - a2, a2 + a3, a4);\n  result = item_kill_tree(v5 + Number);\n  if (<span class=\"supfact\">v14</span> == (char *)v5) {\n    *(_QWORD *)((v5 >> Number) + Number) = Number L;\n  } else {\n    *(_QWORD *)v5 = Number L;\n    result = Number;\n    *(_QWORD *)((v5 >> Number) + Number) = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl _gang_check(unsigned __int64 middle, __int64 down, __int64 up,\n                         int chunk, int hop) {\n  unsigned __int64 v5;\n  __int64 v6;\n  unsigned __int64 v7;\n  __int64 idx;\n  __int64 idxa;\n  char <span class=\"supfact\">v13</span>[Number];\n  v5 = (unsigned __int64)<span class=\"supfact\">v13</span>;\n  if (_asan_option_detect_stack_use_after_return) {\n    v6 = _asan_stack_malloc_0(Number L);\n    if (v6)\n      v5 = v6;\n  }\n  *(_QWORD *)v5 = Number L;\n  *(_QWORD *)(v5 + Number) = String;\n  *(_QWORD *)(v5 + Number) = _gang_check;\n  v7 = v5 >> Number;\n  *(_DWORD *)(v7 + Number) = Number;\n  *(_DWORD *)(v7 + Number) = Number;\n  if (*(_BYTE *)(((v5 + Number) >> Number) + Number) != Number &&\n      *(_BYTE *)(((v5 + Number) >> Number) + Number) <= Number)\n    _asan_report_store4(v5 + Number);\n  *(_DWORD *)(v5 + Number) = Number;\n  if (*(_BYTE *)(((v5 + Number) >> Number) + Number))\n    _asan_report_store8(v5 + Number);\n  *(_QWORD *)(v5 + Number) = Number L;\n  for (idx = -down; idx < up; ++idx)\n    item_insert(v5 + Number, idx + Number);\n  item_check_absent(v5 + Number, Number - down - Number);\n  for (idxa = -down; idxa < up; ++idxa)\n    item_check_present(v5 + Number, idxa + Number);\n  item_check_absent(v5 + Number, up + Number);\n  item_gang_check_present(v5 + Number, Number - down, up + down,\n                          (unsigned int)chunk, (unsigned int)hop);\n  item_full_scan(v5 + Number, Number - down, down + up, (unsigned int)chunk);\n  item_kill_tree(v5 + Number);\n  if (<span class=\"supfact\">v13</span> == (char *)v5) {\n    *(_QWORD *)((v5 >> Number) + Number) = Number L;\n  } else {\n    *(_QWORD *)v5 = Number L;\n    *(_QWORD *)((v5 >> Number) + Number) = Number;\n  }\n}", "var": [{"name": "v14", "type": "char[96]", "ref_name": "v13", "ref_type": "char[96]"}], "body_in_train": false}, {"repo_owner": "fgadaleta", "repo_name": "C-code", "path": "fgadaleta/C-code/b91edded1797f608cb7701c7ef73a905a9bd520c4f24f359673930dbf53bc114", "path_in_repo": "fgadaleta/C-code/bitvisor-1.3/idman/lib/ccid/output.o", "objdump": "0000000000005a10 <T1XfrBlockExtendedAPDU>:\n    5a10:\t48 83 ec 78          \tsub    $0x78,%rsp\n    5a14:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n    5a19:\t89 f0                \tmov    %esi,%eax\n    5a1b:\t89 54 24 20          \tmov    %edx,0x20(%rsp)\n    5a1f:\t48 89 4c 24 18       \tmov    %rcx,0x18(%rsp)\n    5a24:\t4c 89 44 24 10       \tmov    %r8,0x10(%rsp)\n    5a29:\t4c 89 4c 24 08       \tmov    %r9,0x8(%rsp)\n    5a2e:\t88 44 24 24          \tmov    %al,0x24(%rsp)\n    5a32:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    5a37:\t48 83 c0 48          \tadd    $0x48,%rax\n    5a3b:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n    5a40:\tc7 44 24 54 00 00 00 \tmovl   $0x0,0x54(%rsp)\n    5a47:\t00 \n    5a48:\t48 c7 44 24 58 00 00 \tmovq   $0x0,0x58(%rsp)\n    5a4f:\t00 00 \n    5a51:\tc6 44 24 47 00       \tmovb   $0x0,0x47(%rsp)\n    5a56:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n    5a5a:\t48 98                \tcltq   \n    5a5c:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n    5a61:\t48 81 7c 24 60 06 01 \tcmpq   $0x106,0x60(%rsp)\n    5a68:\t00 00 \n    5a6a:\t76 0e                \tjbe    5a7a <T1XfrBlockExtendedAPDU+0x6a>\n    5a6c:\t48 c7 44 24 60 06 01 \tmovq   $0x106,0x60(%rsp)\n    5a73:\t00 00 \n    5a75:\tc6 44 24 47 01       \tmovb   $0x1,0x47(%rsp)\n    5a7a:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n    5a7f:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    5a83:\t48 83 e8 0a          \tsub    $0xa,%rax\n    5a87:\t48 39 44 24 60       \tcmp    %rax,0x60(%rsp)\n    5a8c:\t76 17                \tjbe    5aa5 <T1XfrBlockExtendedAPDU+0x95>\n    5a8e:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n    5a93:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    5a97:\t48 83 e8 0a          \tsub    $0xa,%rax\n    5a9b:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n    5aa0:\tc6 44 24 47 01       \tmovb   $0x1,0x47(%rsp)\n    5aa5:\t0f b6 44 24 47       \tmovzbl 0x47(%rsp),%eax\n    5aaa:\t66 98                \tcbtw   \n    5aac:\t0f b7 f8             \tmovzwl %ax,%edi\n    5aaf:\t0f b6 44 24 24       \tmovzbl 0x24(%rsp),%eax\n    5ab4:\t0f b6 f0             \tmovzbl %al,%esi\n    5ab7:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n    5abc:\t48 8b 54 24 60       \tmov    0x60(%rsp),%rdx\n    5ac1:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    5ac6:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    5acc:\t41 89 f8             \tmov    %edi,%r8d\n    5acf:\t48 89 c7             \tmov    %rax,%rdi\n    5ad2:\te8 00 00 00 00       \tcallq  5ad7 <T1XfrBlockExtendedAPDU+0xc7>\n    5ad7:\t89 44 24 6c          \tmov    %eax,0x6c(%rsp)\n    5adb:\t83 7c 24 6c 00       \tcmpl   $0x0,0x6c(%rsp)\n    5ae0:\t74 09                \tje     5aeb <T1XfrBlockExtendedAPDU+0xdb>\n    5ae2:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    5ae6:\te9 c5 01 00 00       \tjmpq   5cb0 <T1XfrBlockExtendedAPDU+0x2a0>\n    5aeb:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    5af0:\t48 01 44 24 58       \tadd    %rax,0x58(%rsp)\n    5af5:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    5afa:\t48 01 44 24 18       \tadd    %rax,0x18(%rsp)\n    5aff:\t0f b6 44 24 47       \tmovzbl 0x47(%rsp),%eax\n    5b04:\t3c 02                \tcmp    $0x2,%al\n    5b06:\t74 75                \tje     5b7d <T1XfrBlockExtendedAPDU+0x16d>\n    5b08:\t0f b6 44 24 47       \tmovzbl 0x47(%rsp),%eax\n    5b0d:\t84 c0                \ttest   %al,%al\n    5b0f:\t74 6c                \tje     5b7d <T1XfrBlockExtendedAPDU+0x16d>\n    5b11:\t0f be 74 24 24       \tmovsbl 0x24(%rsp),%esi\n    5b16:\t48 8d 54 24 38       \tlea    0x38(%rsp),%rdx\n    5b1b:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    5b20:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    5b26:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    5b2b:\t48 89 c7             \tmov    %rax,%rdi\n    5b2e:\te8 00 00 00 00       \tcallq  5b33 <T1XfrBlockExtendedAPDU+0x123>\n    5b33:\t89 44 24 6c          \tmov    %eax,0x6c(%rsp)\n    5b37:\t83 7c 24 6c 00       \tcmpl   $0x0,0x6c(%rsp)\n    5b3c:\t74 09                \tje     5b47 <T1XfrBlockExtendedAPDU+0x137>\n    5b3e:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    5b42:\te9 69 01 00 00       \tjmpq   5cb0 <T1XfrBlockExtendedAPDU+0x2a0>\n    5b47:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n    5b4b:\t48 98                \tcltq   \n    5b4d:\t48 2b 44 24 58       \tsub    0x58(%rsp),%rax\n    5b52:\t48 39 44 24 60       \tcmp    %rax,0x60(%rsp)\n    5b57:\t73 0a                \tjae    5b63 <T1XfrBlockExtendedAPDU+0x153>\n    5b59:\tc6 44 24 47 03       \tmovb   $0x3,0x47(%rsp)\n    5b5e:\te9 42 ff ff ff       \tjmpq   5aa5 <T1XfrBlockExtendedAPDU+0x95>\n    5b63:\tc6 44 24 47 02       \tmovb   $0x2,0x47(%rsp)\n    5b68:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n    5b6c:\t48 98                \tcltq   \n    5b6e:\t48 2b 44 24 58       \tsub    0x58(%rsp),%rax\n    5b73:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n    5b78:\te9 28 ff ff ff       \tjmpq   5aa5 <T1XfrBlockExtendedAPDU+0x95>\n    5b7d:\t48 c7 44 24 58 00 00 \tmovq   $0x0,0x58(%rsp)\n    5b84:\t00 00 \n    5b86:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    5b8b:\t48 8b 00             \tmov    (%rax),%rax\n    5b8e:\t48 2b 44 24 58       \tsub    0x58(%rsp),%rax\n    5b93:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    5b98:\t0f be 74 24 24       \tmovsbl 0x24(%rsp),%esi\n    5b9d:\t48 8d 7c 24 47       \tlea    0x47(%rsp),%rdi\n    5ba2:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    5ba7:\t48 8d 54 24 38       \tlea    0x38(%rsp),%rdx\n    5bac:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    5bb1:\t49 89 f8             \tmov    %rdi,%r8\n    5bb4:\t48 89 c7             \tmov    %rax,%rdi\n    5bb7:\te8 00 00 00 00       \tcallq  5bbc <T1XfrBlockExtendedAPDU+0x1ac>\n    5bbc:\t89 44 24 6c          \tmov    %eax,0x6c(%rsp)\n    5bc0:\t83 7c 24 6c f6       \tcmpl   $0xfffffff6,0x6c(%rsp)\n    5bc5:\t75 10                \tjne    5bd7 <T1XfrBlockExtendedAPDU+0x1c7>\n    5bc7:\tc7 44 24 54 01 00 00 \tmovl   $0x1,0x54(%rsp)\n    5bce:\t00 \n    5bcf:\tc7 44 24 6c 00 00 00 \tmovl   $0x0,0x6c(%rsp)\n    5bd6:\t00 \n    5bd7:\t83 7c 24 6c 00       \tcmpl   $0x0,0x6c(%rsp)\n    5bdc:\t74 09                \tje     5be7 <T1XfrBlockExtendedAPDU+0x1d7>\n    5bde:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    5be2:\te9 c9 00 00 00       \tjmpq   5cb0 <T1XfrBlockExtendedAPDU+0x2a0>\n    5be7:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    5bec:\t48 01 44 24 08       \tadd    %rax,0x8(%rsp)\n    5bf1:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    5bf6:\t48 01 44 24 58       \tadd    %rax,0x58(%rsp)\n    5bfb:\t0f b6 44 24 47       \tmovzbl 0x47(%rsp),%eax\n    5c00:\t0f be c0             \tmovsbl %al,%eax\n    5c03:\t83 f8 10             \tcmp    $0x10,%eax\n    5c06:\t0f 97 c2             \tseta   %dl\n    5c09:\t84 d2                \ttest   %dl,%dl\n    5c0b:\t75 58                \tjne    5c65 <T1XfrBlockExtendedAPDU+0x255>\n    5c0d:\tba 01 00 00 00       \tmov    $0x1,%edx\n    5c12:\t89 c1                \tmov    %eax,%ecx\n    5c14:\t48 d3 e2             \tshl    %cl,%rdx\n    5c17:\t48 89 d0             \tmov    %rdx,%rax\n    5c1a:\t25 0a 00 01 00       \tand    $0x1000a,%eax\n    5c1f:\t48 85 c0             \ttest   %rax,%rax\n    5c22:\t0f 95 c0             \tsetne  %al\n    5c25:\t84 c0                \ttest   %al,%al\n    5c27:\t74 3c                \tje     5c65 <T1XfrBlockExtendedAPDU+0x255>\n    5c29:\t0f b6 44 24 24       \tmovzbl 0x24(%rsp),%eax\n    5c2e:\t0f b6 f0             \tmovzbl %al,%esi\n    5c31:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    5c36:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    5c3c:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    5c42:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    5c47:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5c4c:\t48 89 c7             \tmov    %rax,%rdi\n    5c4f:\te8 00 00 00 00       \tcallq  5c54 <T1XfrBlockExtendedAPDU+0x244>\n    5c54:\t89 44 24 6c          \tmov    %eax,0x6c(%rsp)\n    5c58:\t83 7c 24 6c 00       \tcmpl   $0x0,0x6c(%rsp)\n    5c5d:\t74 09                \tje     5c68 <T1XfrBlockExtendedAPDU+0x258>\n    5c5f:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    5c63:\teb 4b                \tjmp    5cb0 <T1XfrBlockExtendedAPDU+0x2a0>\n    5c65:\t90                   \tnop\n    5c66:\teb 01                \tjmp    5c69 <T1XfrBlockExtendedAPDU+0x259>\n    5c68:\t90                   \tnop\n    5c69:\t0f b6 44 24 47       \tmovzbl 0x47(%rsp),%eax\n    5c6e:\t3c 01                \tcmp    $0x1,%al\n    5c70:\t0f 84 10 ff ff ff    \tje     5b86 <T1XfrBlockExtendedAPDU+0x176>\n    5c76:\t0f b6 44 24 47       \tmovzbl 0x47(%rsp),%eax\n    5c7b:\t3c 03                \tcmp    $0x3,%al\n    5c7d:\t0f 84 03 ff ff ff    \tje     5b86 <T1XfrBlockExtendedAPDU+0x176>\n    5c83:\t0f b6 44 24 47       \tmovzbl 0x47(%rsp),%eax\n    5c88:\t3c 10                \tcmp    $0x10,%al\n    5c8a:\t0f 84 f6 fe ff ff    \tje     5b86 <T1XfrBlockExtendedAPDU+0x176>\n    5c90:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    5c95:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    5c9a:\t48 89 10             \tmov    %rdx,(%rax)\n    5c9d:\t83 7c 24 54 00       \tcmpl   $0x0,0x54(%rsp)\n    5ca2:\t74 07                \tje     5cab <T1XfrBlockExtendedAPDU+0x29b>\n    5ca4:\tb8 f6 ff ff ff       \tmov    $0xfffffff6,%eax\n    5ca9:\teb 05                \tjmp    5cb0 <T1XfrBlockExtendedAPDU+0x2a0>\n    5cab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5cb0:\t48 83 c4 78          \tadd    $0x78,%rsp\n    5cb4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall T1XfrBlockExtendedAPDU(__int64 a1, char a2, int a3,\n                                          __int64 a4, _QWORD *a5, _BYTE *a6) {\n  __int64 result;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  char <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  unsigned __int64 <span class=\"supfact\">v16</span>;\n  unsigned int <span class=\"supfact\">v17</span>;\n  <span class=\"supfact\">v13</span> = a1 + Number;\n  <span class=\"supfact\">v14</span> = Number;\n  <span class=\"supfact\">v15</span> = Number L;\n  <span class=\"supfact\">v12</span> = Number;\n  <span class=\"supfact\">v16</span> = a3;\n  if ((unsigned __int64)a3 > Number) {\n    <span class=\"supfact\">v16</span> = Number L;\n    <span class=\"supfact\">v12</span> = Number;\n  }\n  if (<span class=\"supfact\">v16</span> >\n      *(_QWORD *)(<span class=\"supfact\">v13</span> + Number) - Number L) {\n    <span class=\"supfact\">v16</span> = *(_QWORD *)(<span class=\"supfact\">v13</span> + Number) - Number L;\n    <span class=\"supfact\">v12</span> = Number;\n  }\n  while (Number) {\n    <span class=\"supfact\">v17</span> = TransmitCommand(a1, a2, <span class=\"supfact\">v16</span>, a4,\n                                          <span class=\"supfact\">v12</span>, Number);\n    if (<span class=\"supfact\">v17</span>)\n      return <span class=\"supfact\">v17</span>;\n    <span class=\"supfact\">v15</span> += <span class=\"supfact\">v16</span>;\n    a4 += <span class=\"supfact\">v16</span>;\n    if (<span class=\"supfact\">v12</span> == Number || !<span class=\"supfact\">v12</span>)\n      break;\n    <span class=\"supfact\">v17</span> =\n        ReceiveReply(a1, a2, &<span class=\"supfact\">v11</span>, Number L, Number L);\n    if (<span class=\"supfact\">v17</span>)\n      return <span class=\"supfact\">v17</span>;\n    if (<span class=\"supfact\">v16</span> >= a3 - <span class=\"supfact\">v15</span>) {\n      <span class=\"supfact\">v12</span> = Number;\n      <span class=\"supfact\">v16</span> = a3 - <span class=\"supfact\">v15</span>;\n    } else {\n      <span class=\"supfact\">v12</span> = Number;\n    }\n  }\n  <span class=\"supfact\">v15</span> = Number L;\n  do {\n    <span class=\"supfact\">v11</span> = *a5 - <span class=\"supfact\">v15</span>;\n    <span class=\"supfact\">v17</span> =\n        ReceiveReply(a1, a2, &<span class=\"supfact\">v11</span>, a6, &<span class=\"supfact\">v12</span>);\n    if (<span class=\"supfact\">v17</span> == Number) {\n      <span class=\"supfact\">v14</span> = Number;\n      <span class=\"supfact\">v17</span> = Number;\n    }\n    if (<span class=\"supfact\">v17</span>)\n      return <span class=\"supfact\">v17</span>;\n    a6 += <span class=\"supfact\">v11</span>;\n    <span class=\"supfact\">v15</span> += <span class=\"supfact\">v11</span>;\n    if ((unsigned int)<span class=\"supfact\">v12</span> <= Number &&\n        ((Number L << <span class=\"supfact\">v12</span>) & Number) != Number) {\n      <span class=\"supfact\">v17</span> =\n          TransmitCommand(a1, a2, Number L, Number L, Number, Number);\n      if (<span class=\"supfact\">v17</span>)\n        return <span class=\"supfact\">v17</span>;\n    }\n  } while (<span class=\"supfact\">v12</span> == Number || <span class=\"supfact\">v12</span> == Number ||\n           <span class=\"supfact\">v12</span> == Number);\n  *a5 = <span class=\"supfact\">v15</span>;\n  if (<span class=\"supfact\">v14</span>)\n    result = Number L;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl T1XfrBlockExtendedAPDU(ReaderMng *gReder, char SlotNum,\n                                   int SendDataLen, char *pSendData,\n                                   unsigned __int64 *pRecBufferLen,\n                                   char *pRecBuffer) {\n  int result;\n  unsigned __int64 <span class=\"supfact\">rec_data_len</span>;\n  char <span class=\"supfact\">wLevelParameter</span>;\n  CcidMng *<span class=\"supfact\">ccid_mng</span>;\n  int <span class=\"supfact\">buf_overflow_flag</span>;\n  unsigned __int64 <span class=\"supfact\">sumLength</span>;\n  unsigned __int64 <span class=\"supfact\">send_data_len</span>;\n  int <span class=\"supfact\">iRet</span>;\n  <span class=\"supfact\">ccid_mng</span> = &gReder-><span class=\"supfact\">ccid_mng</span>;\n  <span class=\"supfact\">buf_overflow_flag</span> = Number;\n  <span class=\"supfact\">sumLength</span> = Number L;\n  <span class=\"supfact\">wLevelParameter</span> = Number;\n  <span class=\"supfact\">send_data_len</span> = SendDataLen;\n  if ((unsigned __int64)SendDataLen > Number) {\n    <span class=\"supfact\">send_data_len</span> = Number L;\n    <span class=\"supfact\">wLevelParameter</span> = Number;\n  }\n  if (<span class=\"supfact\">send_data_len</span> >\n      <span class=\"supfact\">ccid_mng</span>->dwMaxCCIDMessageLength - Number) {\n    <span class=\"supfact\">send_data_len</span> =\n        <span class=\"supfact\">ccid_mng</span>->dwMaxCCIDMessageLength - Number;\n    <span class=\"supfact\">wLevelParameter</span> = Number;\n  }\n  while (Number) {\n    <span class=\"supfact\">iRet</span> =\n        TransmitCommand(gReder, SlotNum, <span class=\"supfact\">send_data_len</span>,\n                        pSendData, <span class=\"supfact\">wLevelParameter</span>, Number);\n    if (<span class=\"supfact\">iRet</span>)\n      return <span class=\"supfact\">iRet</span>;\n    <span class=\"supfact\">sumLength</span> += <span class=\"supfact\">send_data_len</span>;\n    pSendData += <span class=\"supfact\">send_data_len</span>;\n    if (<span class=\"supfact\">wLevelParameter</span> == Number ||\n        !<span class=\"supfact\">wLevelParameter</span>)\n      break;\n    <span class=\"supfact\">iRet</span> = ReceiveReply(\n        gReder, SlotNum, &<span class=\"supfact\">rec_data_len</span>, Number L, Number L);\n    if (<span class=\"supfact\">iRet</span>)\n      return <span class=\"supfact\">iRet</span>;\n    if (<span class=\"supfact\">send_data_len</span> >=\n        SendDataLen - <span class=\"supfact\">sumLength</span>) {\n      <span class=\"supfact\">wLevelParameter</span> = Number;\n      <span class=\"supfact\">send_data_len</span> = SendDataLen - <span class=\"supfact\">sumLength</span>;\n    } else {\n      <span class=\"supfact\">wLevelParameter</span> = Number;\n    }\n  }\n  <span class=\"supfact\">sumLength</span> = Number L;\n  do {\n    <span class=\"supfact\">rec_data_len</span> = *pRecBufferLen - <span class=\"supfact\">sumLength</span>;\n    <span class=\"supfact\">iRet</span> =\n        ReceiveReply(gReder, SlotNum, &<span class=\"supfact\">rec_data_len</span>, pRecBuffer,\n                     &<span class=\"supfact\">wLevelParameter</span>);\n    if (<span class=\"supfact\">iRet</span> == Number) {\n      <span class=\"supfact\">buf_overflow_flag</span> = Number;\n      <span class=\"supfact\">iRet</span> = Number;\n    }\n    if (<span class=\"supfact\">iRet</span>)\n      return <span class=\"supfact\">iRet</span>;\n    pRecBuffer += <span class=\"supfact\">rec_data_len</span>;\n    <span class=\"supfact\">sumLength</span> += <span class=\"supfact\">rec_data_len</span>;\n    if ((unsigned int)<span class=\"supfact\">wLevelParameter</span> <= Number &&\n        ((Number L << <span class=\"supfact\">wLevelParameter</span>) & Number) != Number) {\n      <span class=\"supfact\">iRet</span> =\n          TransmitCommand(gReder, SlotNum, Number L, Number L, Number, Number);\n      if (<span class=\"supfact\">iRet</span>)\n        return <span class=\"supfact\">iRet</span>;\n    }\n  } while (<span class=\"supfact\">wLevelParameter</span> == Number ||\n           <span class=\"supfact\">wLevelParameter</span> == Number ||\n           <span class=\"supfact\">wLevelParameter</span> == Number);\n  *pRecBufferLen = <span class=\"supfact\">sumLength</span>;\n  if (<span class=\"supfact\">buf_overflow_flag</span>)\n    result = Number;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v17", "type": "int", "ref_name": "iRet", "ref_type": "int"}, {"name": "v16", "type": "uint64_t", "ref_name": "send_data_len", "ref_type": "unsigned __int64"}, {"name": "v15", "type": "uint64_t", "ref_name": "sumLength", "ref_type": "unsigned __int64"}, {"name": "v14", "type": "uint32_t", "ref_name": "buf_overflow_flag", "ref_type": "int"}, {"name": "v13", "type": "uint64_t", "ref_name": "ccid_mng", "ref_type": "__unk__"}, {"name": "v12", "type": "uint8_t", "ref_name": "wLevelParameter", "ref_type": "char"}, {"name": "v11", "type": "uint8_t *", "ref_name": "rec_data_len", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/06598c09babb55e178e8c8c3155b037a828ea5bef219725349a6c3eae0c73702", "path_in_repo": "XanClic/qemu//hw/scsi/scsi-generic.o", "objdump": "00000000000007d0 <_nocheck__trace_scsi_generic_send_command>:\n     7d0:\t55                   \tpush   %rbp\n     7d1:\t48 89 e5             \tmov    %rsp,%rbp\n     7d4:\t41 54                \tpush   %r12\n     7d6:\t53                   \tpush   %rbx\n     7d7:\t48 83 ec 30          \tsub    $0x30,%rsp\n     7db:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     7df:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     7e6:\t00 00 \n     7e8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     7ec:\t31 c0                \txor    %eax,%eax\n     7ee:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7f4 <_nocheck__trace_scsi_generic_send_command+0x24>\n     7f4:\t85 c0                \ttest   %eax,%eax\n     7f6:\t0f 95 c0             \tsetne  %al\n     7f9:\t0f b6 c0             \tmovzbl %al,%eax\n     7fc:\t48 85 c0             \ttest   %rax,%rax\n     7ff:\t74 5e                \tje     85f <_nocheck__trace_scsi_generic_send_command+0x8f>\n     801:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 808 <_nocheck__trace_scsi_generic_send_command+0x38>\n     808:\t66 85 c0             \ttest   %ax,%ax\n     80b:\t74 52                \tje     85f <_nocheck__trace_scsi_generic_send_command+0x8f>\n     80d:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     812:\te8 d4 fa ff ff       \tcallq  2eb <qemu_loglevel_mask>\n     817:\t84 c0                \ttest   %al,%al\n     819:\t74 44                \tje     85f <_nocheck__trace_scsi_generic_send_command+0x8f>\n     81b:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     81f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     824:\t48 89 c7             \tmov    %rax,%rdi\n     827:\te8 00 00 00 00       \tcallq  82c <_nocheck__trace_scsi_generic_send_command+0x5c>\n     82c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     830:\t49 89 c4             \tmov    %rax,%r12\n     833:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     837:\t48 89 c3             \tmov    %rax,%rbx\n     83a:\te8 00 00 00 00       \tcallq  83f <_nocheck__trace_scsi_generic_send_command+0x6f>\n     83f:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     843:\t49 89 d0             \tmov    %rdx,%r8\n     846:\t4c 89 e1             \tmov    %r12,%rcx\n     849:\t48 89 da             \tmov    %rbx,%rdx\n     84c:\t89 c6                \tmov    %eax,%esi\n     84e:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 855 <_nocheck__trace_scsi_generic_send_command+0x85>\n     855:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     85a:\te8 00 00 00 00       \tcallq  85f <_nocheck__trace_scsi_generic_send_command+0x8f>\n     85f:\t90                   \tnop\n     860:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     864:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     86b:\t00 00 \n     86d:\t74 05                \tje     874 <_nocheck__trace_scsi_generic_send_command+0xa4>\n     86f:\te8 00 00 00 00       \tcallq  874 <_nocheck__trace_scsi_generic_send_command+0xa4>\n     874:\t48 83 c4 30          \tadd    $0x30,%rsp\n     878:\t5b                   \tpop    %rbx\n     879:\t41 5c                \tpop    %r12\n     87b:\t5d                   \tpop    %rbp\n     87c:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_scsi_generic_send_command(\n    const char *a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SCSI_GENERIC_SEND_COMMAND_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl nocheck__trace_scsi_generic_send_command(const char *line) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SCSI_GENERIC_SEND_COMMAND_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, line);\n  }\n}", "var": [{"name": "v6", "type": "unsigned __int64", "ref_name": "v5", "ref_type": "unsigned __int64"}, {"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "KorolevaYana", "repo_name": "OS", "path": "KorolevaYana/OS/8bbedd3253fbf649fcd4e5064ab8fff58a83f533e114f4317cd045c6d45d5c9e", "path_in_repo": "KorolevaYana/OS/netsh/netsh", "objdump": "0000000000409a98 <_ZNSt8_Rb_treeIiSt4pairIKi6serverESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:\n  409a98:\t55                   \tpush   %rbp\n  409a99:\t48 89 e5             \tmov    %rsp,%rbp\n  409a9c:\t41 54                \tpush   %r12\n  409a9e:\t53                   \tpush   %rbx\n  409a9f:\t48 83 ec 30          \tsub    $0x30,%rsp\n  409aa3:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  409aa7:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  409aab:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  409aaf:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  409ab3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  409ab7:\t48 89 c7             \tmov    %rax,%rdi\n  409aba:\te8 73 18 00 00       \tcallq  40b332 <_ZNSt8_Rb_treeIiSt4pairIKi6serverESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_M_get_nodeEv>\n  409abf:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  409ac3:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  409ac7:\t48 89 c7             \tmov    %rax,%rdi\n  409aca:\te8 8d f9 ff ff       \tcallq  40945c <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>\n  409acf:\t49 89 c4             \tmov    %rax,%r12\n  409ad2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  409ad6:\t48 89 c7             \tmov    %rax,%rdi\n  409ad9:\te8 70 f9 ff ff       \tcallq  40944e <_ZSt7forwardISt5tupleIJRKiEEEOT_RNSt16remove_referenceIS4_E4typeE>\n  409ade:\t48 89 c3             \tmov    %rax,%rbx\n  409ae1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  409ae5:\t48 89 c7             \tmov    %rax,%rdi\n  409ae8:\te8 53 f9 ff ff       \tcallq  409440 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>\n  409aed:\t48 89 c2             \tmov    %rax,%rdx\n  409af0:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n  409af4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  409af8:\t4d 89 e0             \tmov    %r12,%r8\n  409afb:\t48 89 d9             \tmov    %rbx,%rcx\n  409afe:\t48 89 c7             \tmov    %rax,%rdi\n  409b01:\te8 54 18 00 00       \tcallq  40b35a <_ZNSt8_Rb_treeIiSt4pairIKi6serverESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>\n  409b06:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409b0a:\t48 83 c4 30          \tadd    $0x30,%rsp\n  409b0e:\t5b                   \tpop    %rbx\n  409b0f:\t41 5c                \tpop    %r12\n  409b11:\t5d                   \tpop    %rbp\n  409b12:\tc3                   \tretq   \n  409b13:\t90                   \tnop", "code_s": "__int64 __fastcall std\n    _Rb_tree<int, std pair<int const, server>,\n             std _Select1st<std pair<int const, server>>, std less<int>,\n             std allocator<std pair<int const, server>>>\n    _M_create_node<std piecewise_construct_t const &, std tuple<int const &>,\n                   std tuple<>>(__int64 a1, __int64 a2, __int64 a3,\n                                __int64 a4) {\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> =\n      std _Rb_tree<int, std pair<int const, server>,\n                   std _Select1st<std pair<int const, server>>, std less<int>,\n                   std allocator<std pair<int const, server>>>\n          _M_get_node(a1);\n  v4 = std forward<std tuple<>>(a4);\n  v5 = std forward<std tuple<int const &>>(a3);\n  v6 = std forward<std piecewise_construct_t const &>(a2);\n  std _Rb_tree<int, std pair<int const, server>,\n               std _Select1st<std pair<int const, server>>, std less<int>,\n               std allocator<std pair<int const, server>>>\n      _M_construct_node<std piecewise_construct_t const &,\n                        std tuple<int const &>, std tuple<>>(\n          a1, <span class=\"supfact\">v10</span>, v6, v5, v4);\n  return <span class=\"supfact\">v10</span>;\n}", "code_t": "std _Rb_tree<int, std pair<int const, server>,\n             std _Select1st<std pair<int const, server>>, std less<int>,\n             std allocator<std pair<int const, server>>>\n    _Link_type __fastcall std _Rb_tree<\n        int, std pair<int const, server>,\n        std _Select1st<std pair<int const, server>>, std less<int>,\n        std allocator<std pair<int const, server>>>\n    _M_create_node<std piecewise_construct_t const &, std tuple<int const &>,\n                   std tuple<>>(\n        std _Rb_tree<int, std pair<int const, server>,\n                     std _Select1st<std pair<int const, server>>, std less<int>,\n                     std allocator<std pair<int const, server>>> *const this,\n        const std piecewise_construct_t *a2, std tuple<int const &> *a3,\n        std tuple<> *a4, const std piecewise_construct_t *__args_0,\n        std tuple<int const &> *__args_1) {\n  std tuple<> *v6;\n  std tuple<int const &> *v7;\n  const std piecewise_construct_t *v8;\n  const std piecewise_construct_t *v9;\n  std _Rb_tree_node<std pair<int const, server>> *<span class=\"supfact\">__tmp</span>;\n  <span class=\"supfact\">__tmp</span> =\n      std _Rb_tree<int, std pair<int const, server>,\n                   std _Select1st<std pair<int const, server>>, std less<int>,\n                   std allocator<std pair<int const, server>>>\n          _M_get_node(this);\n  v6 = std forward<std tuple<>>(a4);\n  v7 = std forward<std tuple<int const &>>(a3);\n  v8 = std forward<std piecewise_construct_t const &>(\n      (std remove_reference<const std piecewise_construct_t &> type *)a2);\n  std _Rb_tree<int, std pair<int const, server>,\n               std _Select1st<std pair<int const, server>>, std less<int>,\n               std allocator<std pair<int const, server>>>\n      _M_construct_node<std piecewise_construct_t const &,\n                        std tuple<int const &>, std tuple<>>(\n          this, <span class=\"supfact\">__tmp</span>, v8, v7, v6, v9,\n          (std tuple<int const &> *)a4, (std tuple<> *)a3);\n  return <span class=\"supfact\">__tmp</span>;\n}", "var": [{"name": "v10", "type": "__int64", "ref_name": "__tmp", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "AlexanderDenkMA", "repo_name": "TypeChef-mplayerAnalysis", "path": "AlexanderDenkMA/TypeChef-mplayerAnalysis/cafbc4ca6c6d9f9f20027239352c551f8de7a21e82c77c63443f1556bb86fa4f", "path_in_repo": "AlexanderDenkMA/TypeChef-mplayerAnalysis/MPlayer-1.1.1/ffmpeg/libavfilter/af_aresample.o", "objdump": "0000000000000000 <init>:\n   0:\t48 83 ec 68          \tsub    $0x68,%rsp\n   4:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n   9:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n   e:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n  13:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  18:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n  1c:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n  21:\tc7 44 24 5c 00 00 00 \tmovl   $0x0,0x5c(%rsp)\n  28:\t00 \n  29:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n  2e:\t48 89 c7             \tmov    %rax,%rdi\n  31:\te8 00 00 00 00       \tcallq  36 <init+0x36>\n  36:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n  3b:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  40:\t48 b9 00 00 00 00 00 \tmovabs $0x8000000000000000,%rcx\n  47:\t00 00 80 \n  4a:\t48 89 48 10          \tmov    %rcx,0x10(%rax)\n  4e:\te8 00 00 00 00       \tcallq  53 <init+0x53>\n  53:\t48 8b 54 24 50       \tmov    0x50(%rsp),%rdx\n  58:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n  5c:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  61:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  65:\t48 85 c0             \ttest   %rax,%rax\n  68:\t75 0a                \tjne    74 <init+0x74>\n  6a:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n  6f:\te9 00 01 00 00       \tjmpq   174 <init+0x174>\n  74:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n  7a:\t0f 84 dc 00 00 00    \tje     15c <init+0x15c>\n  80:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n  85:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n  8a:\te9 a3 00 00 00       \tjmpq   132 <init+0x132>\n  8f:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n  94:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n  99:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  9e:\t48 89 c7             \tmov    %rax,%rdi\n  a1:\te8 00 00 00 00       \tcallq  a6 <init+0xa6>\n  a6:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n  ab:\t48 85 c0             \ttest   %rax,%rax\n  ae:\t74 30                \tje     e0 <init+0xe0>\n  b0:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n  b5:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n  ba:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  be:\t48 8b 74 24 40       \tmov    0x40(%rsp),%rsi\n  c3:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  c8:\t48 89 c7             \tmov    %rax,%rdi\n  cb:\te8 00 00 00 00       \tcallq  d0 <init+0xd0>\n  d0:\t89 44 24 5c          \tmov    %eax,0x5c(%rsp)\n  d4:\t83 7c 24 5c 00       \tcmpl   $0x0,0x5c(%rsp)\n  d9:\t79 57                \tjns    132 <init+0x132>\n  db:\te9 83 00 00 00       \tjmpq   163 <init+0x163>\n  e0:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n  e5:\t48 8b 4c 24 40       \tmov    0x40(%rsp),%rcx\n  ea:\t48 8d 44 24 2c       \tlea    0x2c(%rsp),%rax\n  ef:\t48 89 ce             \tmov    %rcx,%rsi\n  f2:\t48 89 c7             \tmov    %rax,%rdi\n  f5:\te8 00 00 00 00       \tcallq  fa <init+0xfa>\n  fa:\t89 44 24 5c          \tmov    %eax,0x5c(%rsp)\n  fe:\t83 7c 24 5c 00       \tcmpl   $0x0,0x5c(%rsp)\n 103:\t78 5a                \tjs     15f <init+0x15f>\n 105:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n 109:\t48 63 d0             \tmovslq %eax,%rdx\n 10c:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n 111:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 115:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 11a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 11f:\t48 89 c7             \tmov    %rax,%rdi\n 122:\te8 00 00 00 00       \tcallq  127 <init+0x127>\n 127:\t89 44 24 5c          \tmov    %eax,0x5c(%rsp)\n 12b:\t83 7c 24 5c 00       \tcmpl   $0x0,0x5c(%rsp)\n 130:\t78 30                \tjs     162 <init+0x162>\n 132:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n 137:\t48 8d 54 24 38       \tlea    0x38(%rsp),%rdx\n 13c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 141:\t48 89 c7             \tmov    %rax,%rdi\n 144:\te8 00 00 00 00       \tcallq  149 <init+0x149>\n 149:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n 14e:\t48 83 7c 24 40 00    \tcmpq   $0x0,0x40(%rsp)\n 154:\t0f 85 35 ff ff ff    \tjne    8f <init+0x8f>\n 15a:\teb 07                \tjmp    163 <init+0x163>\n 15c:\t90                   \tnop\n 15d:\teb 04                \tjmp    163 <init+0x163>\n 15f:\t90                   \tnop\n 160:\teb 01                \tjmp    163 <init+0x163>\n 162:\t90                   \tnop\n 163:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n 168:\t48 89 c7             \tmov    %rax,%rdi\n 16b:\te8 00 00 00 00       \tcallq  170 <init+0x170>\n 170:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n 174:\t48 83 c4 68          \tadd    $0x68,%rsp\n 178:\tc3                   \tretq   ", "code_s": "__int64 __fastcall init(__int64 a1, __int64 a2) {\n  int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v8</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v9</span> = Number;\n  <span class=\"supfact\">v7</span> = av_strdup(a2);\n  *(_QWORD *)(<span class=\"supfact\">v8</span> + Number) = Number;\n  *(_QWORD *)(<span class=\"supfact\">v8</span> + Number) = swr_alloc();\n  if (!*(_QWORD *)(<span class=\"supfact\">v8</span> + Number))\n    return Number L;\n  if (a2) {\n    <span class=\"supfact\">v5</span> = <span class=\"supfact\">v7</span>;\n    while (Number) {\n      <span class=\"supfact\">v6</span> =\n          av_strtok(<span class=\"supfact\">v5</span>, &unk_C1E, &<span class=\"supfact\">v5</span>);\n      if (!<span class=\"supfact\">v6</span>)\n        break;\n      av_strtok(<span class=\"supfact\">v6</span>, &unk_C18, &<span class=\"supfact\">v4</span>);\n      if (<span class=\"supfact\">v4</span>) {\n        <span class=\"supfact\">v9</span> =\n            av_opt_set(*(_QWORD *)(<span class=\"supfact\">v8</span> + Number),\n                       <span class=\"supfact\">v6</span>, <span class=\"supfact\">v4</span>, Number L);\n        if (<span class=\"supfact\">v9</span> < Number)\n          break;\n      } else {\n        <span class=\"supfact\">v9</span> =\n            ff_parse_sample_rate(&<span class=\"supfact\">v3</span>, <span class=\"supfact\">v6</span>, a1);\n        if (<span class=\"supfact\">v9</span> < Number)\n          break;\n        <span class=\"supfact\">v9</span> =\n            av_opt_set_int(*(_QWORD *)(<span class=\"supfact\">v8</span> + Number), &unk_C1A,\n                           <span class=\"supfact\">v3</span>, Number L);\n        if (<span class=\"supfact\">v9</span> < Number)\n          break;\n      }\n    }\n  }\n  av_free(<span class=\"supfact\">v7</span>);\n  return (unsigned int)<span class=\"supfact\">v9</span>;\n}", "code_t": "int __cdecl init(AVFilterContext_0 *ctx, const char *args, void *opaque) {\n  int <span class=\"supfact\">out_rate</span>;\n  char *<span class=\"supfact\">value</span>;\n  char *<span class=\"supfact\">ptr</span>;\n  char *<span class=\"supfact\">token</span>;\n  char *<span class=\"supfact\">argd</span>;\n  AResampleContext *<span class=\"supfact\">aresample</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">aresample</span> = (AResampleContext *)ctx->priv;\n  <span class=\"supfact\">ret</span> = Number;\n  <span class=\"supfact\">argd</span> = (char *)av_strdup(args);\n  <span class=\"supfact\">aresample</span>->next_pts = Number;\n  <span class=\"supfact\">aresample</span>->swr = (SwrContext *)swr_alloc();\n  if (!<span class=\"supfact\">aresample</span>->swr)\n    return Number;\n  if (args) {\n    <span class=\"supfact\">ptr</span> = <span class=\"supfact\">argd</span>;\n    while (Number) {\n      <span class=\"supfact\">token</span> = (char *)av_strtok(<span class=\"supfact\">ptr</span>, &unk_C1E,\n                                                &<span class=\"supfact\">ptr</span>);\n      if (!<span class=\"supfact\">token</span>)\n        break;\n      av_strtok(<span class=\"supfact\">token</span>, &unk_C18, &<span class=\"supfact\">value</span>);\n      if (<span class=\"supfact\">value</span>) {\n        <span class=\"supfact\">ret</span> =\n            av_opt_set(<span class=\"supfact\">aresample</span>->swr, <span class=\"supfact\">token</span>,\n                       <span class=\"supfact\">value</span>, Number L);\n        if (<span class=\"supfact\">ret</span> < Number)\n          break;\n      } else {\n        <span class=\"supfact\">ret</span> = ff_parse_sample_rate(&<span class=\"supfact\">out_rate</span>,\n                                                   <span class=\"supfact\">token</span>, ctx);\n        if (<span class=\"supfact\">ret</span> < Number)\n          break;\n        <span class=\"supfact\">ret</span> =\n            av_opt_set_int(<span class=\"supfact\">aresample</span>->swr, &unk_C1A,\n                           <span class=\"supfact\">out_rate</span>, Number L);\n        if (<span class=\"supfact\">ret</span> < Number)\n          break;\n      }\n    }\n  }\n  av_free(<span class=\"supfact\">argd</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v9", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "v8", "type": "char *", "ref_name": "aresample", "ref_type": "AResampleContext *"}, {"name": "v7", "type": "char *", "ref_name": "argd", "ref_type": "char *"}, {"name": "v6", "type": "AVBitStreamFilterContext_0 *", "ref_name": "token", "ref_type": "char *"}, {"name": "v5", "type": "char *", "ref_name": "ptr", "ref_type": "char *"}, {"name": "v4", "type": "char *", "ref_name": "value", "ref_type": "char *"}, {"name": "v3", "type": "int", "ref_name": "out_rate", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "Aestek", "repo_name": "raccoon-server", "path": "Aestek/raccoon-server/3dafd84239da609e7901a2275ecf40024164e10244254c4858cbf53898f3a31a", "path_in_repo": "Aestek/raccoon-server//src/server.o", "objdump": "000000000000018a <handle_connection>:\n 18a:\t55                   \tpush   %rbp\n 18b:\t48 89 e5             \tmov    %rsp,%rbp\n 18e:\t48 83 ec 50          \tsub    $0x50,%rsp\n 192:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 196:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n 199:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n 19d:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n 1a1:\tc7 45 dc 10 00 00 00 \tmovl   $0x10,-0x24(%rbp)\n 1a8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1ae <handle_connection+0x24>\n 1ae:\t48 8d 55 dc          \tlea    -0x24(%rbp),%rdx\n 1b2:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n 1b6:\t48 89 ce             \tmov    %rcx,%rsi\n 1b9:\t89 c7                \tmov    %eax,%edi\n 1bb:\te8 00 00 00 00       \tcallq  1c0 <handle_connection+0x36>\n 1c0:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 1c3:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 1c7:\t0f 88 b1 00 00 00    \tjs     27e <handle_connection+0xf4>\n 1cd:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 1d0:\tba 00 00 00 00       \tmov    $0x0,%edx\n 1d5:\tbe 03 00 00 00       \tmov    $0x3,%esi\n 1da:\t89 c7                \tmov    %eax,%edi\n 1dc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1e1:\te8 00 00 00 00       \tcallq  1e6 <handle_connection+0x5c>\n 1e6:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 1e9:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 1ec:\t80 cc 08             \tor     $0x8,%ah\n 1ef:\t89 c2                \tmov    %eax,%edx\n 1f1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 1f4:\tbe 04 00 00 00       \tmov    $0x4,%esi\n 1f9:\t89 c7                \tmov    %eax,%edi\n 1fb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 200:\te8 00 00 00 00       \tcallq  205 <handle_connection+0x7b>\n 205:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 20a:\te8 00 00 00 00       \tcallq  20f <handle_connection+0x85>\n 20f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 213:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 217:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 21a:\t89 90 10 b0 00 00    \tmov    %edx,0xb010(%rax)\n 220:\tba 00 00 00 00       \tmov    $0x0,%edx\n 225:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 22a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 22f:\te8 00 00 00 00       \tcallq  234 <handle_connection+0xaa>\n 234:\t48 89 c2             \tmov    %rax,%rdx\n 237:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 23c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 241:\te8 00 00 00 00       \tcallq  246 <handle_connection+0xbc>\n 246:\t48 89 c2             \tmov    %rax,%rdx\n 249:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 24e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 253:\te8 00 00 00 00       \tcallq  258 <handle_connection+0xce>\n 258:\t48 89 c2             \tmov    %rax,%rdx\n 25b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 25f:\t48 89 c6             \tmov    %rax,%rsi\n 262:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 267:\te8 00 00 00 00       \tcallq  26c <handle_connection+0xe2>\n 26c:\t48 89 c2             \tmov    %rax,%rdx\n 26f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 273:\t48 89 d6             \tmov    %rdx,%rsi\n 276:\t48 89 c7             \tmov    %rax,%rdi\n 279:\te8 00 00 00 00       \tcallq  27e <handle_connection+0xf4>\n 27e:\tba 00 00 00 00       \tmov    $0x0,%edx\n 283:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 288:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 28d:\te8 00 00 00 00       \tcallq  292 <handle_connection+0x108>\n 292:\t48 89 c2             \tmov    %rax,%rdx\n 295:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 299:\t48 89 d6             \tmov    %rdx,%rsi\n 29c:\t48 89 c7             \tmov    %rax,%rdi\n 29f:\te8 00 00 00 00       \tcallq  2a4 <handle_connection+0x11a>\n 2a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2a9:\tc9                   \tleaveq \n 2aa:\tc3                   \tretq   ", "code_s": "__int64 __fastcall handle_connection(__int64 a1) {\n  unsigned int v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  socklen_t <span class=\"supfact\">addr_len</span>;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  unsigned int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">addr_len</span> = Number;\n  <span class=\"supfact\">fd</span> =\n      accept(server_sockfd, &<span class=\"supfact\">addr</span>, &<span class=\"supfact\">addr_len</span>);\n  if (<span class=\"supfact\">fd</span> >= Number) {\n    v1 = fcntl(<span class=\"supfact\">fd</span>, Number, Number L);\n    <span class=\"supfact\">v13</span> = v1;\n    BYTE1(v1) |= Number;\n    v2 = (unsigned int)<span class=\"supfact\">fd</span>;\n    fcntl(<span class=\"supfact\">fd</span>, Number, v1);\n    <span class=\"supfact\">v12</span> = http_request_new(v2, Number L);\n    *(_DWORD *)(<span class=\"supfact\">v12</span> + Number) = <span class=\"supfact\">fd</span>;\n    v3 = call_new(clean_up, Number L, Number L);\n    v4 = call_new(&http_response_write, Number L, v3);\n    v5 = call_new(process_connection, Number L, v4);\n    v6 = call_new(&http_request_parse, <span class=\"supfact\">v12</span>, v5);\n    array_queue_push(a1, v6);\n  }\n  v7 = call_new(handle_connection, Number L, Number L);\n  array_queue_push(a1, v7);\n  return Number L;\n}", "code_t": "int __cdecl handle_connection(array_queue *equeue, int err, void *arg,\n                              call_0 *next) {\n  unsigned int v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  socklen_t <span class=\"supfact\">client_addr_length</span>;\n  sockaddr_in <span class=\"supfact\">cli_addr</span>;\n  http_request *<span class=\"supfact\">req</span>;\n  int <span class=\"supfact\">flags</span>;\n  int <span class=\"supfact\">sock_fd</span>;\n  <span class=\"supfact\">client_addr_length</span> = Number;\n  <span class=\"supfact\">sock_fd</span> =\n      accept(server_sockfd, (struct sockaddr *)&<span class=\"supfact\">cli_addr</span>,\n             &<span class=\"supfact\">client_addr_length</span>);\n  if (<span class=\"supfact\">sock_fd</span> >= Number) {\n    v4 = fcntl(<span class=\"supfact\">sock_fd</span>, Number, Number L);\n    <span class=\"supfact\">flags</span> = v4;\n    BYTE1(v4) |= Number;\n    v5 = (unsigned int)<span class=\"supfact\">sock_fd</span>;\n    fcntl(<span class=\"supfact\">sock_fd</span>, Number, v4);\n    <span class=\"supfact\">req</span> = (http_request *)http_request_new(v5, Number L);\n    <span class=\"supfact\">req</span>->client_sockfd = <span class=\"supfact\">sock_fd</span>;\n    v6 = call_new(clean_up, Number L, Number L);\n    v7 = call_new(&http_response_write, Number L, v6);\n    v8 = call_new(process_connection, Number L, v7);\n    v9 = call_new(&http_request_parse, <span class=\"supfact\">req</span>, v8);\n    array_queue_push(equeue, v9);\n  }\n  v10 = call_new(handle_connection, Number L, Number L);\n  array_queue_push(equeue, v10);\n  return Number;\n}", "var": [{"name": "fd", "type": "int", "ref_name": "sock_fd", "ref_type": "int"}, {"name": "v13", "type": "int", "ref_name": "flags", "ref_type": "int"}, {"name": "v12", "type": "ssize_t", "ref_name": "req", "ref_type": "http_request *"}, {"name": "addr", "type": "struct sockaddr { sa_family_t sa_family; char[14] sa_data; }", "ref_name": "cli_addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}, {"name": "addr_len", "type": "socklen_t", "ref_name": "client_addr_length", "ref_type": "socklen_t"}], "body_in_train": false}, {"repo_owner": "gyc2015", "repo_name": "GYC", "path": "gyc2015/GYC/13d4c4562380f7847b4b217c5c6122066b08231da8d7403b78680f7e0d366512", "path_in_repo": "gyc2015/GYC/network/ctparser.o", "objdump": "000000000000115e <vector_ffpair_fill>:\n    115e:\t55                   \tpush   %rbp\n    115f:\t48 89 e5             \tmov    %rsp,%rbp\n    1162:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1166:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    116a:\t48 89 d1             \tmov    %rdx,%rcx\n    116d:\t48 89 f0             \tmov    %rsi,%rax\n    1170:\t48 89 fa             \tmov    %rdi,%rdx\n    1173:\t48 89 ca             \tmov    %rcx,%rdx\n    1176:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    117a:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    117e:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    1183:\t75 19                \tjne    119e <vector_ffpair_fill+0x40>\n    1185:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    118a:\tba 91 01 00 00       \tmov    $0x191,%edx\n    118f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1194:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1199:\te8 00 00 00 00       \tcallq  119e <vector_ffpair_fill+0x40>\n    119e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11a2:\t48 8b 00             \tmov    (%rax),%rax\n    11a5:\t48 85 c0             \ttest   %rax,%rax\n    11a8:\t75 19                \tjne    11c3 <vector_ffpair_fill+0x65>\n    11aa:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    11af:\tba 92 01 00 00       \tmov    $0x192,%edx\n    11b4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11b9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    11be:\te8 00 00 00 00       \tcallq  11c3 <vector_ffpair_fill+0x65>\n    11c3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11c7:\t48 8b 00             \tmov    (%rax),%rax\n    11ca:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    11ce:\teb 18                \tjmp    11e8 <vector_ffpair_fill+0x8a>\n    11d0:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    11d4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    11d8:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    11dc:\t48 89 01             \tmov    %rax,(%rcx)\n    11df:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n    11e3:\t48 83 45 f8 10       \taddq   $0x10,-0x8(%rbp)\n    11e8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11ec:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    11f0:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n    11f4:\t72 da                \tjb     11d0 <vector_ffpair_fill+0x72>\n    11f6:\t90                   \tnop\n    11f7:\t90                   \tnop\n    11f8:\tc9                   \tleaveq \n    11f9:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall vector_ffpair_fill(_QWORD *a1, __int64 a2,\n                                               __int64 a3) {\n  unsigned __int64 result;\n  _QWORD *<span class=\"supfact\">i</span>;\n  if (!a1)\n    _assert_fail(String, String, Number, String);\n  if (!*a1)\n    _assert_fail(String, String, Number, String);\n  for (<span class=\"supfact\">i</span> = (_QWORD *)*a1;; <span class=\"supfact\">i</span> += Number) {\n    result = a1[Number];\n    if ((unsigned __int64)<span class=\"supfact\">i</span> >= result)\n      break;\n    *<span class=\"supfact\">i</span> = a2;\n    <span class=\"supfact\">i</span>[Number] = a3;\n  }\n  return result;\n}", "code_t": "void __cdecl vector_ffpair_fill(vector_ffpair_0 *v, ffpair_0 e) {\n  ffpair_0 *<span class=\"supfact\">ptr</span>;\n  if (!v)\n    _assert_fail(String, String, Number, String);\n  if (!v->stor_begin)\n    _assert_fail(String, String, Number, String);\n  for (<span class=\"supfact\">ptr</span> = v->stor_begin; <span class=\"supfact\">ptr</span> < v->stor_end;\n       ++<span class=\"supfact\">ptr</span>)\n    *<span class=\"supfact\">ptr</span> = e;\n}", "var": [{"name": "i", "type": "size_t", "ref_name": "ptr", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "FPar", "repo_name": "GT-P1010", "path": "FPar/GT-P1010/1e33639de97b7354207b8e9736338f08d2f46fbb530099d92cd76cfa9a35f526", "path_in_repo": "FPar/GT-P1010/Kernel/tools/perf/builtin-top.o", "objdump": "0000000000001f56 <prompt_symbol>:\n    1f56:\t55                   \tpush   %rbp\n    1f57:\t48 89 e5             \tmov    %rsp,%rbp\n    1f5a:\t48 83 ec 70          \tsub    $0x70,%rsp\n    1f5e:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    1f62:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n    1f66:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1f6d:\t00 00 \n    1f6f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1f73:\t31 c0                \txor    %eax,%eax\n    1f75:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1f7a:\te8 00 00 00 00       \tcallq  1f7f <prompt_symbol+0x29>\n    1f7f:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    1f83:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1f87:\t48 8b 00             \tmov    (%rax),%rax\n    1f8a:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    1f8e:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n    1f95:\t00 \n    1f96:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n    1f9d:\t00 \n    1f9e:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n    1fa3:\t74 3f                \tje     1fe4 <prompt_symbol+0x8e>\n    1fa5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1fa9:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    1fad:\t48 83 c0 18          \tadd    $0x18,%rax\n    1fb1:\t48 89 c7             \tmov    %rax,%rdi\n    1fb4:\te8 00 00 00 00       \tcallq  1fb9 <prompt_symbol+0x63>\n    1fb9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1fbd:\t48 89 c7             \tmov    %rax,%rdi\n    1fc0:\te8 09 ea ff ff       \tcallq  9ce <__zero_source_counters>\n    1fc5:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1fc9:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    1fd0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1fd4:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    1fd8:\t48 83 c0 18          \tadd    $0x18,%rax\n    1fdc:\t48 89 c7             \tmov    %rax,%rdi\n    1fdf:\te8 00 00 00 00       \tcallq  1fe4 <prompt_symbol+0x8e>\n    1fe4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1feb <prompt_symbol+0x95>\n    1feb:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    1fef:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ff4:\t48 89 c7             \tmov    %rax,%rdi\n    1ff7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ffc:\te8 00 00 00 00       \tcallq  2001 <prompt_symbol+0xab>\n    2001:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2008 <prompt_symbol+0xb2>\n    2008:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n    200c:\t48 8d 45 a8          \tlea    -0x58(%rbp),%rax\n    2010:\t48 89 ce             \tmov    %rcx,%rsi\n    2013:\t48 89 c7             \tmov    %rax,%rdi\n    2016:\te8 00 00 00 00       \tcallq  201b <prompt_symbol+0xc5>\n    201b:\t48 85 c0             \ttest   %rax,%rax\n    201e:\t0f 88 0b 01 00 00    \tjs     212f <prompt_symbol+0x1d9>\n    2024:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2028:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n    202d:\t48 89 c7             \tmov    %rax,%rdi\n    2030:\te8 00 00 00 00       \tcallq  2035 <prompt_symbol+0xdf>\n    2035:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    2039:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n    203e:\t74 07                \tje     2047 <prompt_symbol+0xf1>\n    2040:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2044:\tc6 00 00             \tmovb   $0x0,(%rax)\n    2047:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    204c:\te8 00 00 00 00       \tcallq  2051 <prompt_symbol+0xfb>\n    2051:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2058 <prompt_symbol+0x102>\n    2058:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    205c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2060:\t48 83 e8 18          \tsub    $0x18,%rax\n    2064:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    2068:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    206d:\te8 00 00 00 00       \tcallq  2072 <prompt_symbol+0x11c>\n    2072:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2076:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    207a:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    207e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2082:\t48 83 e8 18          \tsub    $0x18,%rax\n    2086:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    208a:\teb 55                \tjmp    20e1 <prompt_symbol+0x18b>\n    208c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2090:\t48 89 c7             \tmov    %rax,%rdi\n    2093:\te8 51 e3 ff ff       \tcallq  3e9 <sym_entry__symbol>\n    2098:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    209c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    20a0:\t48 8d 50 2a          \tlea    0x2a(%rax),%rdx\n    20a4:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    20a8:\t48 89 d6             \tmov    %rdx,%rsi\n    20ab:\t48 89 c7             \tmov    %rax,%rdi\n    20ae:\te8 00 00 00 00       \tcallq  20b3 <prompt_symbol+0x15d>\n    20b3:\t85 c0                \ttest   %eax,%eax\n    20b5:\t75 0a                \tjne    20c1 <prompt_symbol+0x16b>\n    20b7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    20bb:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    20bf:\teb 30                \tjmp    20f1 <prompt_symbol+0x19b>\n    20c1:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    20c5:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    20c9:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    20cd:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    20d1:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    20d5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    20d9:\t48 83 e8 18          \tsub    $0x18,%rax\n    20dd:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    20e1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    20e5:\t48 83 c0 18          \tadd    $0x18,%rax\n    20e9:\t48 3d 00 00 00 00    \tcmp    $0x0,%rax\n    20ef:\t75 9b                \tjne    208c <prompt_symbol+0x136>\n    20f1:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    20f6:\t75 29                \tjne    2121 <prompt_symbol+0x1cb>\n    20f8:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    20fc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2103 <prompt_symbol+0x1ad>\n    2103:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2108:\t48 89 c7             \tmov    %rax,%rdi\n    210b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2110:\te8 00 00 00 00       \tcallq  2115 <prompt_symbol+0x1bf>\n    2115:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    211a:\te8 00 00 00 00       \tcallq  211f <prompt_symbol+0x1c9>\n    211f:\teb 1b                \tjmp    213c <prompt_symbol+0x1e6>\n    2121:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2125:\t48 89 c7             \tmov    %rax,%rdi\n    2128:\te8 8f e4 ff ff       \tcallq  5bc <parse_source>\n    212d:\teb 01                \tjmp    2130 <prompt_symbol+0x1da>\n    212f:\t90                   \tnop\n    2130:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2134:\t48 89 c7             \tmov    %rax,%rdi\n    2137:\te8 00 00 00 00       \tcallq  213c <prompt_symbol+0x1e6>\n    213c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2140:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    2147:\t00 00 \n    2149:\t74 05                \tje     2150 <prompt_symbol+0x1fa>\n    214b:\te8 00 00 00 00       \tcallq  2150 <prompt_symbol+0x1fa>\n    2150:\tc9                   \tleaveq \n    2151:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall prompt_symbol(__int64 *a1, const char *a2) {\n  char *<span class=\"supfact\">lineptr</span>;\n  size_t <span class=\"supfact\">n</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  char *<span class=\"supfact\">v8</span>;\n  void *<span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  unsigned __int64 <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v13</span> = __readfsqword(Number);\n  <span class=\"supfact\">lineptr</span> = (char *)malloc(Number L);\n  <span class=\"supfact\">v5</span> = *a1;\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">n</span> = Number L;\n  if (<span class=\"supfact\">v5</span>) {\n    pthread_mutex_lock(\n        (pthread_mutex_t *)(*(_QWORD *)(<span class=\"supfact\">v5</span> + Number) +\n                            Number L));\n    _zero_source_counters(<span class=\"supfact\">v5</span>);\n    *a1 = Number L;\n    pthread_mutex_unlock(\n        (pthread_mutex_t *)(*(_QWORD *)(<span class=\"supfact\">v5</span> + Number) +\n                            Number L));\n  }\n  fprintf(stdout, String, a2);\n  if (getline(&<span class=\"supfact\">lineptr</span>, &<span class=\"supfact\">n</span>, stdin) < Number)\n    goto LABEL_14;\n  <span class=\"supfact\">v8</span> = strchr(<span class=\"supfact\">lineptr</span>, Number);\n  if (<span class=\"supfact\">v8</span>)\n    *<span class=\"supfact\">v8</span> = Number;\n  pthread_mutex_lock(&active_symbols_lock);\n  <span class=\"supfact\">v9</span> = active_symbols;\n  <span class=\"supfact\">v5</span> = (__int64)active_symbols - Number;\n  pthread_mutex_unlock(&active_symbols_lock);\n  <span class=\"supfact\">v10</span> = *(_QWORD *)(<span class=\"supfact\">v5</span> + Number);\n  <span class=\"supfact\">v6</span> = <span class=\"supfact\">v10</span> - Number;\n  while ((void **)(<span class=\"supfact\">v5</span> + Number) != &active_symbols) {\n    <span class=\"supfact\">v11</span> = sym_entry__symbol(<span class=\"supfact\">v5</span>);\n    if (!strcmp(<span class=\"supfact\">lineptr</span>,\n                (const char *)(<span class=\"supfact\">v11</span> + Number))) {\n      <span class=\"supfact\">v7</span> = <span class=\"supfact\">v5</span>;\n      break;\n    }\n    <span class=\"supfact\">v5</span> = <span class=\"supfact\">v6</span>;\n    <span class=\"supfact\">v12</span> = *(_QWORD *)(<span class=\"supfact\">v6</span> + Number);\n    <span class=\"supfact\">v6</span> = <span class=\"supfact\">v12</span> - Number;\n  }\n  if (<span class=\"supfact\">v7</span>) {\n    parse_source(<span class=\"supfact\">v7</span>);\n  LABEL_14:\n    free(<span class=\"supfact\">lineptr</span>);\n    return __readfsqword(Number) ^ <span class=\"supfact\">v13</span>;\n  }\n  fprintf(stderr, String, <span class=\"supfact\">lineptr</span>);\n  sleep(Number);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v13</span>;\n}", "code_t": "void __cdecl prompt_symbol(sym_entry **target, const char *msg) {\n  char *<span class=\"supfact\">buf</span>;\n  size_t <span class=\"supfact\">dummy</span>;\n  sym_entry *<span class=\"supfact\">syme</span>;\n  sym_entry *<span class=\"supfact\">n</span>;\n  sym_entry *<span class=\"supfact\">found</span>;\n  char *<span class=\"supfact\">p</span>;\n  const list_head *<span class=\"supfact\">__mptr</span>;\n  const list_head *<span class=\"supfact\">__mptr_0</span>;\n  symbol *<span class=\"supfact\">sym</span>;\n  const list_head *<span class=\"supfact\">__mptr_1</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  <span class=\"supfact\">buf</span> = (char *)malloc(Number L);\n  <span class=\"supfact\">syme</span> = *target;\n  <span class=\"supfact\">found</span> = Number L;\n  <span class=\"supfact\">dummy</span> = Number L;\n  if (<span class=\"supfact\">syme</span>) {\n    pthread_mutex_lock(&<span class=\"supfact\">syme</span>->src->lock);\n    _zero_source_counters(<span class=\"supfact\">syme</span>);\n    *target = Number L;\n    pthread_mutex_unlock(&<span class=\"supfact\">syme</span>->src->lock);\n  }\n  fprintf(stdout, String, msg);\n  if (getline(&<span class=\"supfact\">buf</span>, &<span class=\"supfact\">dummy</span>, stdin) >= Number) {\n    <span class=\"supfact\">p</span> = strchr(<span class=\"supfact\">buf</span>, Number);\n    if (<span class=\"supfact\">p</span>)\n      *<span class=\"supfact\">p</span> = Number;\n    pthread_mutex_lock(&active_symbols_lock);\n    <span class=\"supfact\">__mptr</span> = active_symbols.next;\n    <span class=\"supfact\">syme</span> = (sym_entry *)&active_symbols.next[Number].prev;\n    pthread_mutex_unlock(&active_symbols_lock);\n    <span class=\"supfact\">__mptr_0</span> = <span class=\"supfact\">syme</span>->node.next;\n    <span class=\"supfact\">n</span> =\n        CONTAINING_RECORD(<span class=\"supfact\">__mptr_0</span>, sym_entry, node);\n    while (&<span class=\"supfact\">syme</span>->node != &active_symbols) {\n      <span class=\"supfact\">sym</span> = sym_entry__symbol(<span class=\"supfact\">syme</span>);\n      if (!strcmp(<span class=\"supfact\">buf</span>, <span class=\"supfact\">sym</span>->name)) {\n        <span class=\"supfact\">found</span> = <span class=\"supfact\">syme</span>;\n        break;\n      }\n      <span class=\"supfact\">syme</span> = <span class=\"supfact\">n</span>;\n      <span class=\"supfact\">__mptr_1</span> = <span class=\"supfact\">n</span>->node.next;\n      <span class=\"supfact\">n</span> =\n          CONTAINING_RECORD(<span class=\"supfact\">__mptr_1</span>, sym_entry, node);\n    }\n    if (!<span class=\"supfact\">found</span>) {\n      fprintf(stderr, String, <span class=\"supfact\">buf</span>);\n      sleep(Number);\n      return;\n    }\n    parse_source(<span class=\"supfact\">found</span>);\n  }\n  free(<span class=\"supfact\">buf</span>);\n}", "var": [{"name": "v13", "type": "unsigned __int64", "ref_name": "v12", "ref_type": "unsigned __int64"}, {"name": "v12", "type": "const list_head *", "ref_name": "__mptr_1", "ref_type": "const list_head *"}, {"name": "v11", "type": "const list_head *", "ref_name": "sym", "ref_type": "symbol *"}, {"name": "v10", "type": "const list_head *", "ref_name": "__mptr_0", "ref_type": "const list_head *"}, {"name": "v9", "type": "const list_head *", "ref_name": "__mptr", "ref_type": "const list_head *"}, {"name": "v8", "type": "const list_head *", "ref_name": "p", "ref_type": "char *"}, {"name": "v7", "type": "const list_head *", "ref_name": "found", "ref_type": "sym_entry *"}, {"name": "v6", "type": "const list_head *", "ref_name": "n", "ref_type": "sym_entry *"}, {"name": "v5", "type": "const list_head *", "ref_name": "syme", "ref_type": "sym_entry *"}, {"name": "n", "type": "size_t", "ref_name": "dummy", "ref_type": "size_t"}, {"name": "lineptr", "type": "char *", "ref_name": "buf", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "tss", "repo_name": "qemu", "path": "tss/qemu/402922e5610e1bf3cfe7ab7f31010ce04aaf2fbc60517bdba73977073579991c", "path_in_repo": "tss/qemu//hw/usb/hcd-ehci-pci.o", "objdump": "00000000000003dd <usb_ehci_pci_init>:\n 3dd:\t55                   \tpush   %rbp\n 3de:\t48 89 e5             \tmov    %rsp,%rbp\n 3e1:\t48 83 ec 20          \tsub    $0x20,%rsp\n 3e5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 3e9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3ed:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 3f4 <usb_ehci_pci_init+0x17>\n 3f4:\tb9 4a 00 00 00       \tmov    $0x4a,%ecx\n 3f9:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 400 <usb_ehci_pci_init+0x23>\n 400:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 407 <usb_ehci_pci_init+0x2a>\n 407:\t48 89 c7             \tmov    %rax,%rdi\n 40a:\te8 00 00 00 00       \tcallq  40f <usb_ehci_pci_init+0x32>\n 40f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 413:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 417:\t48 05 48 08 00 00    \tadd    $0x848,%rax\n 41d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 421:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 425:\tc6 80 b1 04 00 00 68 \tmovb   $0x68,0x4b1(%rax)\n 42c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 430:\t66 c7 80 9c 04 00 00 \tmovw   $0x0,0x49c(%rax)\n 437:\t00 00 \n 439:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 43d:\t66 c7 80 9e 04 00 00 \tmovw   $0x20,0x49e(%rax)\n 444:\t20 00 \n 446:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 44a:\t66 c7 80 a0 04 00 00 \tmovw   $0x44,0x4a0(%rax)\n 451:\t44 00 \n 453:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 457:\t66 c7 80 a2 04 00 00 \tmovw   $0x6,0x4a2(%rax)\n 45e:\t06 00 \n 460:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 464:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 46b <usb_ehci_pci_init+0x8e>\n 46b:\tb9 54 00 00 00       \tmov    $0x54,%ecx\n 470:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 477 <usb_ehci_pci_init+0x9a>\n 477:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 47e <usb_ehci_pci_init+0xa1>\n 47e:\t48 89 c7             \tmov    %rax,%rdi\n 481:\te8 00 00 00 00       \tcallq  486 <usb_ehci_pci_init+0xa9>\n 486:\t48 89 c2             \tmov    %rax,%rdx\n 489:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 48d:\t48 89 d6             \tmov    %rdx,%rsi\n 490:\t48 89 c7             \tmov    %rax,%rdi\n 493:\te8 00 00 00 00       \tcallq  498 <usb_ehci_pci_init+0xbb>\n 498:\t90                   \tnop\n 499:\tc9                   \tleaveq \n 49a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall usb_ehci_pci_init(__int64 a1) {\n  __int64 v1;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> =\n      object_dynamic_cast_assert(a1, String, String, Number L, String);\n  *(_BYTE *)(<span class=\"supfact\">v3</span> + Number) = Number;\n  *(_WORD *)(<span class=\"supfact\">v3</span> + Number) = Number;\n  *(_WORD *)(<span class=\"supfact\">v3</span> + Number) = Number;\n  *(_WORD *)(<span class=\"supfact\">v3</span> + Number) = Number;\n  *(_WORD *)(<span class=\"supfact\">v3</span> + Number) = Number;\n  v1 = object_dynamic_cast_assert(a1, String, String, Number L, String);\n  return usb_ehci_init(<span class=\"supfact\">v3</span> + Number, v1);\n}", "code_t": "void __cdecl usb_ehci_pci_init(Object_0 *obj) {\n  __int64 v1;\n  EHCIPCIState_0 *<span class=\"supfact\">i</span>;\n  <span class=\"supfact\">i</span> = (EHCIPCIState_0 *)object_dynamic_cast_assert(\n      obj, String, String, Number L, String);\n  <span class=\"supfact\">i</span>->ehci.caps[Number] = Number;\n  <span class=\"supfact\">i</span>->ehci.capsbase = Number;\n  <span class=\"supfact\">i</span>->ehci.opregbase = Number;\n  <span class=\"supfact\">i</span>->ehci.portscbase = Number;\n  <span class=\"supfact\">i</span>->ehci.portnr = Number;\n  v1 = object_dynamic_cast_assert(obj, String, String, Number L, String);\n  usb_ehci_init(&<span class=\"supfact\">i</span>->ehci, v1);\n}", "var": [{"name": "v3", "type": "EHCIPCIState_0 *", "ref_name": "i", "ref_type": "EHCIPCIState_0 *"}], "body_in_train": false}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5ec5f2ec6084c7eab51809436b73c760d744b2bd8da2176f43ca7af193270f51", "path_in_repo": "peresvetos/xsrc/external/mit/freetype/dist/src/bzip2/ftbzip2.o", "objdump": "00000000000003ba <ft_bzip2_file_fill_input>:\n 3ba:\t55                   \tpush   %rbp\n 3bb:\t48 89 e5             \tmov    %rsp,%rbp\n 3be:\t48 83 ec 30          \tsub    $0x30,%rsp\n 3c2:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 3c6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3ca:\t48 83 c0 18          \tadd    $0x18,%rax\n 3ce:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 3d2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3d6:\t48 8b 00             \tmov    (%rax),%rax\n 3d9:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 3dd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3e1:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n 3e5:\t48 85 c0             \ttest   %rax,%rax\n 3e8:\t74 56                \tje     440 <ft_bzip2_file_fill_input+0x86>\n 3ea:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3ee:\t4c 8b 40 28          \tmov    0x28(%rax),%r8\n 3f2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3f6:\t48 8d 50 68          \tlea    0x68(%rax),%rdx\n 3fa:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3fe:\t48 8b 70 10          \tmov    0x10(%rax),%rsi\n 402:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 406:\tb9 00 10 00 00       \tmov    $0x1000,%ecx\n 40b:\t48 89 c7             \tmov    %rax,%rdi\n 40e:\t41 ff d0             \tcallq  *%r8\n 411:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 415:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 41a:\t0f 85 9a 00 00 00    \tjne    4ba <ft_bzip2_file_fill_input+0x100>\n 420:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 424:\t48 8b 90 70 20 00 00 \tmov    0x2070(%rax),%rdx\n 42b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 42f:\t48 89 90 78 20 00 00 \tmov    %rdx,0x2078(%rax)\n 436:\tb8 55 00 00 00       \tmov    $0x55,%eax\n 43b:\te9 b2 00 00 00       \tjmpq   4f2 <ft_bzip2_file_fill_input+0x138>\n 440:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 444:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 448:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 44c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 450:\t48 29 c2             \tsub    %rax,%rdx\n 453:\t48 89 d0             \tmov    %rdx,%rax\n 456:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 45a:\t48 81 7d f8 00 10 00 \tcmpq   $0x1000,-0x8(%rbp)\n 461:\t00 \n 462:\t76 08                \tjbe    46c <ft_bzip2_file_fill_input+0xb2>\n 464:\t48 c7 45 f8 00 10 00 \tmovq   $0x1000,-0x8(%rbp)\n 46b:\t00 \n 46c:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 471:\t75 1d                \tjne    490 <ft_bzip2_file_fill_input+0xd6>\n 473:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 477:\t48 8b 90 70 20 00 00 \tmov    0x2070(%rax),%rdx\n 47e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 482:\t48 89 90 78 20 00 00 \tmov    %rdx,0x2078(%rax)\n 489:\tb8 55 00 00 00       \tmov    $0x55,%eax\n 48e:\teb 62                \tjmp    4f2 <ft_bzip2_file_fill_input+0x138>\n 490:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 494:\t48 8b 10             \tmov    (%rax),%rdx\n 497:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 49b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 49f:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n 4a3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 4a7:\t48 8d 48 68          \tlea    0x68(%rax),%rcx\n 4ab:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 4af:\t48 89 c2             \tmov    %rax,%rdx\n 4b2:\t48 89 cf             \tmov    %rcx,%rdi\n 4b5:\te8 00 00 00 00       \tcallq  4ba <ft_bzip2_file_fill_input+0x100>\n 4ba:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4be:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n 4c2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 4c6:\t48 01 c2             \tadd    %rax,%rdx\n 4c9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4cd:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 4d1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 4d5:\t48 8d 50 68          \tlea    0x68(%rax),%rdx\n 4d9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 4dd:\t48 89 10             \tmov    %rdx,(%rax)\n 4e0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 4e4:\t89 c2                \tmov    %eax,%edx\n 4e6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 4ea:\t89 50 08             \tmov    %edx,0x8(%rax)\n 4ed:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4f2:\tc9                   \tleaveq \n 4f3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ft_bzip2_file_fill_input(__int64 *a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  unsigned __int64 <span class=\"supfact\">n</span>;\n  <span class=\"supfact\">v2</span> = *a1;\n  if (*(_QWORD *)(*a1 + Number)) {\n    <span class=\"supfact\">n</span> = (*(__int64(__fastcall **)(\n        __int64, _QWORD, __int64 *, __int64))(<span class=\"supfact\">v2</span> + Number))(\n        <span class=\"supfact\">v2</span>, *(_QWORD *)(<span class=\"supfact\">v2</span> + Number),\n        a1 + Number, Number L);\n    if (!<span class=\"supfact\">n</span>) {\n      a1[Number] = a1[Number];\n      return Number L;\n    }\n  } else {\n    <span class=\"supfact\">n</span> = *(_QWORD *)(<span class=\"supfact\">v2</span> + Number) -\n                        *(_QWORD *)(<span class=\"supfact\">v2</span> + Number);\n    if (<span class=\"supfact\">n</span> > Number)\n      <span class=\"supfact\">n</span> = Number L;\n    if (!<span class=\"supfact\">n</span>) {\n      a1[Number] = a1[Number];\n      return Number L;\n    }\n    memcpy(a1 + Number,\n           (const void *)(*(_QWORD *)<span class=\"supfact\">v2</span> +\n                          *(_QWORD *)(<span class=\"supfact\">v2</span> + Number)),\n           <span class=\"supfact\">n</span>);\n  }\n  *(_QWORD *)(<span class=\"supfact\">v2</span> + Number) += <span class=\"supfact\">n</span>;\n  a1[Number] = (__int64)(a1 + Number);\n  *((_DWORD *)a1 + Number) = <span class=\"supfact\">n</span>;\n  return Number L;\n}", "code_t": "FT_Error __cdecl ft_bzip2_file_fill_input(FT_BZip2File zip) {\n  FT_Stream <span class=\"supfact\">stream</span>;\n  FT_ULong <span class=\"supfact\">size</span>;\n  <span class=\"supfact\">stream</span> = zip->source;\n  if (zip->source->read) {\n    <span class=\"supfact\">size</span> = <span class=\"supfact\">stream</span>->read(\n        <span class=\"supfact\">stream</span>, <span class=\"supfact\">stream</span>->pos, zip->input,\n        Number);\n    if (!<span class=\"supfact\">size</span>) {\n      zip->limit = zip->cursor;\n      return Number;\n    }\n  } else {\n    <span class=\"supfact\">size</span> = <span class=\"supfact\">stream</span>-><span class=\"supfact\">size</span> -\n                           <span class=\"supfact\">stream</span>->pos;\n    if (<span class=\"supfact\">size</span> > Number)\n      <span class=\"supfact\">size</span> = Number L;\n    if (!<span class=\"supfact\">size</span>) {\n      zip->limit = zip->cursor;\n      return Number;\n    }\n    memcpy(zip->input,\n           &<span class=\"supfact\">stream</span>->base[<span class=\"supfact\">stream</span>->pos],\n           <span class=\"supfact\">size</span>);\n  }\n  <span class=\"supfact\">stream</span>->pos += <span class=\"supfact\">size</span>;\n  zip->bzstream.next_in = (char *)zip->input;\n  zip->bzstream.avail_in = <span class=\"supfact\">size</span>;\n  return Number;\n}", "var": [{"name": "n", "type": "size_t", "ref_name": "size", "ref_type": "FT_ULong"}, {"name": "v2", "type": "size_t", "ref_name": "stream", "ref_type": "FT_Stream"}], "body_in_train": false}, {"repo_owner": "jahir", "repo_name": "2vz", "path": "jahir/2vz/5450cf2efa11fb9568e63ab883c87a621980eb72c09b8ce7f7f9c5890bb37a84", "path_in_repo": "jahir/2vz/d0/d0.o", "objdump": "0000000000000000 <txline>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 60          \tsub    $0x60,%rsp\n   8:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n   c:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  10:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n  14:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  18:\t48 89 d1             \tmov    %rdx,%rcx\n  1b:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 22 <txline+0x22>\n  22:\tbe 40 00 00 00       \tmov    $0x40,%esi\n  27:\t48 89 c7             \tmov    %rax,%rdi\n  2a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  2f:\te8 00 00 00 00       \tcallq  34 <txline+0x34>\n  34:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  37:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  3b:\t78 1c                \tjs     59 <txline+0x59>\n  3d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40:\t48 63 d0             \tmovslq %eax,%rdx\n  43:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  47:\t8b 00                \tmov    (%rax),%eax\n  49:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n  4d:\t48 89 ce             \tmov    %rcx,%rsi\n  50:\t89 c7                \tmov    %eax,%edi\n  52:\te8 00 00 00 00       \tcallq  57 <txline+0x57>\n  57:\teb 01                \tjmp    5a <txline+0x5a>\n  59:\t90                   \tnop\n  5a:\tc9                   \tleaveq \n  5b:\tc3                   \tretq   ", "code_s": "int __fastcall txline(int *a1, const char *a2) {\n  int result;\n  char <span class=\"supfact\">s</span>[Number];\n  int <span class=\"supfact\">v4</span>;\n  result = snprintf(<span class=\"supfact\">s</span>, Number, String, a2);\n  <span class=\"supfact\">v4</span> = result;\n  if (result >= Number)\n    result = write(*a1, <span class=\"supfact\">s</span>, <span class=\"supfact\">v4</span>);\n  return result;\n}", "code_t": "void __cdecl txline(pollfd *fds, char *line) {\n  char <span class=\"supfact\">buf</span>[Number];\n  int <span class=\"supfact\">len</span>;\n  <span class=\"supfact\">len</span> = snprintf(<span class=\"supfact\">buf</span>, Number, String, line);\n  if (<span class=\"supfact\">len</span> >= Number)\n    write(fds->fd, <span class=\"supfact\">buf</span>, <span class=\"supfact\">len</span>);\n}", "var": [{"name": "v4", "type": "int", "ref_name": "len", "ref_type": "int"}, {"name": "s", "type": "char[80]", "ref_name": "buf", "ref_type": "char[64]"}], "body_in_train": false}, {"repo_owner": "ps3dev", "repo_name": "mesa-7.10.2-PS3", "path": "ps3dev/mesa-7.10.2-PS3/3c85c587c20330625e8634fea55856a0f1a13907b6ebab97e8d599ca2f3573d3", "path_in_repo": "ps3dev/mesa-7.10.2-PS3/src/mesa/drivers/dri/r300/compiler/radeon_emulate_loops.o", "objdump": "0000000000000e42 <rc_transform_loops>:\n     e42:\t55                   \tpush   %rbp\n     e43:\t48 89 e5             \tmov    %rsp,%rbp\n     e46:\t48 83 ec 20          \tsub    $0x20,%rsp\n     e4a:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     e4e:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     e52:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e56:\t48 05 d0 00 00 00    \tadd    $0xd0,%rax\n     e5c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     e60:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     e64:\tba 18 00 00 00       \tmov    $0x18,%edx\n     e69:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     e6e:\t48 89 c7             \tmov    %rax,%rdi\n     e71:\te8 00 00 00 00       \tcallq  e76 <rc_transform_loops+0x34>\n     e76:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     e7a:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     e7e:\t48 89 10             \tmov    %rdx,(%rax)\n     e81:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     e85:\t48 8b 00             \tmov    (%rax),%rax\n     e88:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n     e8c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     e90:\teb 3a                \tjmp    ecc <rc_transform_loops+0x8a>\n     e92:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e96:\t8b 40 10             \tmov    0x10(%rax),%eax\n     e99:\t85 c0                \ttest   %eax,%eax\n     e9b:\t75 23                \tjne    ec0 <rc_transform_loops+0x7e>\n     e9d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     ea1:\t0f b6 40 30          \tmovzbl 0x30(%rax),%eax\n     ea5:\t3c 36                \tcmp    $0x36,%al\n     ea7:\t75 17                \tjne    ec0 <rc_transform_loops+0x7e>\n     ea9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     ead:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     eb1:\t48 89 d6             \tmov    %rdx,%rsi\n     eb4:\t48 89 c7             \tmov    %rax,%rdi\n     eb7:\te8 5e fd ff ff       \tcallq  c1a <transform_loop>\n     ebc:\t85 c0                \ttest   %eax,%eax\n     ebe:\t74 1f                \tje     edf <rc_transform_loops+0x9d>\n     ec0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     ec4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     ec8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     ecc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     ed0:\t48 8b 00             \tmov    (%rax),%rax\n     ed3:\t48 83 c0 20          \tadd    $0x20,%rax\n     ed7:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n     edb:\t75 b5                \tjne    e92 <rc_transform_loops+0x50>\n     edd:\teb 01                \tjmp    ee0 <rc_transform_loops+0x9e>\n     edf:\t90                   \tnop\n     ee0:\tc9                   \tleaveq \n     ee1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rc_transform_loops(__int64 a1) {\n  __int64 result;\n  __int64 *<span class=\"supfact\">s</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">s</span> = (__int64 *)(a1 + Number);\n  memset((void *)(a1 + Number), Number, Number);\n  *(_QWORD *)(a1 + Number) = a1;\n  for (<span class=\"supfact\">i</span> = *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L);;\n       <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number)) {\n    result = *<span class=\"supfact\">s</span> + Number;\n    if (<span class=\"supfact\">i</span> == result)\n      break;\n    if (!*(_DWORD *)(<span class=\"supfact\">i</span> + Number) &&\n        *(_BYTE *)(<span class=\"supfact\">i</span> + Number) == Number) {\n      result = transform_loop(<span class=\"supfact\">s</span>, <span class=\"supfact\">i</span>);\n      if (!(_DWORD)result)\n        break;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl rc_transform_loops(radeon_compiler *c, void *user) {\n  emulate_loop_state *<span class=\"supfact\">s</span>;\n  rc_instruction *<span class=\"supfact\">ptr</span>;\n  <span class=\"supfact\">s</span> = &c->loop_state;\n  memset(&c->loop_state, Number, sizeof(c->loop_state));\n  c->loop_state.C = c;\n  for (<span class=\"supfact\">ptr</span> = c->loop_state.C->Program.Instructions.Next;\n       <span class=\"supfact\">ptr</span> != &<span class=\"supfact\">s</span>->C->Program.Instructions &&\n       (<span class=\"supfact\">ptr</span>->Type ||\n        <span class=\"supfact\">ptr</span>->U.P.RGB.Arg[Number] != Number ||\n        transform_loop(<span class=\"supfact\">s</span>, <span class=\"supfact\">ptr</span>));\n       <span class=\"supfact\">ptr</span> = <span class=\"supfact\">ptr</span>->Next) {\n    ;\n  }\n}", "var": [{"name": "i", "type": "rc_instruction *", "ref_name": "ptr", "ref_type": "rc_instruction *"}, {"name": "s", "type": "rc_instruction *", "ref_name": "s", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "dumb0002", "repo_name": "viro-geni", "path": "dumb0002/viro-geni/4631ec07afd28c75b2145b96d0c07d6dad33cd51d7e45c56fd96d7e14ad6bfce", "path_in_repo": "dumb0002/viro-geni/geni-viro/sparse-0.5.0/compile-i386.o", "objdump": "0000000000003cc0 <loopstk_pop>:\n    3cc0:\t55                   \tpush   %rbp\n    3cc1:\t48 89 e5             \tmov    %rsp,%rbp\n    3cc4:\t48 83 ec 10          \tsub    $0x10,%rsp\n    3cc8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3ccf <loopstk_pop+0xf>\n    3ccf:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3cd3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3cd7:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    3cdb:\t48 85 c0             \ttest   %rax,%rax\n    3cde:\t75 19                \tjne    3cf9 <loopstk_pop+0x39>\n    3ce0:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    3ce5:\tba 6a 07 00 00       \tmov    $0x76a,%edx\n    3cea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3cef:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3cf4:\te8 00 00 00 00       \tcallq  3cf9 <loopstk_pop+0x39>\n    3cf9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3cfd:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    3d01:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    3d05:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3d09:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    3d0d:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    3d11:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3d15:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n    3d19:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3d1d:\t48 89 c7             \tmov    %rax,%rdi\n    3d20:\te8 00 00 00 00       \tcallq  3d25 <loopstk_pop+0x65>\n    3d25:\t90                   \tnop\n    3d26:\tc9                   \tleaveq \n    3d27:\tc3                   \tretq   ", "code_s": "void loopstk_pop() {\n  _QWORD *<span class=\"supfact\">ptr</span>;\n  if (!*(_QWORD *)(current_func + Number))\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">ptr</span> = *(_QWORD **)(current_func + Number);\n  *(_QWORD *)(current_func + Number) = <span class=\"supfact\">ptr</span>[Number];\n  free(<span class=\"supfact\">ptr</span>);\n}", "code_t": "void __cdecl loopstk_pop() {\n  loop_stack *<span class=\"supfact\">ls</span>;\n  if (!current_func->loop_stack)\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">ls</span> = current_func->loop_stack;\n  current_func->loop_stack = <span class=\"supfact\">ls</span>->next;\n  free(<span class=\"supfact\">ls</span>);\n}", "var": [{"name": "ptr", "type": "__unk__", "ref_name": "ls", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "filipeaguiargeissler", "repo_name": "faultinjector_sw_based", "path": "filipeaguiargeissler/faultinjector_sw_based/804a9f6c0d746cf3df5c64c43d1decf783119bd2fccb65fe78cd8864990f6f06", "path_in_repo": "filipeaguiargeissler/faultinjector_sw_based/qemu-1.6.0/qemu-char.o", "objdump": "00000000000078ec <qmp_chardev_open_udp>:\n    78ec:\t55                   \tpush   %rbp\n    78ed:\t48 89 e5             \tmov    %rsp,%rbp\n    78f0:\t48 83 ec 20          \tsub    $0x20,%rsp\n    78f4:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    78f8:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    78fc:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    7903:\t00 00 \n    7905:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    7909:\t31 c0                \txor    %eax,%eax\n    790b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    790f:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n    7913:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7917:\t48 8b 00             \tmov    (%rax),%rax\n    791a:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    791e:\t48 89 ce             \tmov    %rcx,%rsi\n    7921:\t48 89 c7             \tmov    %rax,%rdi\n    7924:\te8 00 00 00 00       \tcallq  7929 <qmp_chardev_open_udp+0x3d>\n    7929:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    792c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    7930:\t48 89 c7             \tmov    %rax,%rdi\n    7933:\te8 00 00 00 00       \tcallq  7938 <qmp_chardev_open_udp+0x4c>\n    7938:\t84 c0                \ttest   %al,%al\n    793a:\t74 07                \tje     7943 <qmp_chardev_open_udp+0x57>\n    793c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7941:\teb 0a                \tjmp    794d <qmp_chardev_open_udp+0x61>\n    7943:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    7946:\t89 c7                \tmov    %eax,%edi\n    7948:\te8 40 c5 ff ff       \tcallq  3e8d <qemu_chr_open_udp_fd>\n    794d:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    7951:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    7958:\t00 00 \n    795a:\t74 05                \tje     7961 <qmp_chardev_open_udp+0x75>\n    795c:\te8 00 00 00 00       \tcallq  7961 <qmp_chardev_open_udp+0x75>\n    7961:\tc9                   \tleaveq \n    7962:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qmp_chardev_open_udp(_QWORD *a1, __int64 a2) {\n  __int64 result;\n  int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = socket_dgram(*a1, a1[Number], a2);\n  if ((unsigned __int8)error_is_set(a2))\n    result = Number L;\n  else\n    result = qemu_chr_open_udp_fd(<span class=\"supfact\">v3</span>);\n  return result;\n}", "code_t": "CharDriverState_0 *__cdecl qmp_chardev_open_udp(ChardevUdp_0 *udp,\n                                                Error_0 **errp) {\n  CharDriverState_0 *result;\n  int <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">fd</span> = socket_dgram(udp->remote, udp->local, errp);\n  if ((unsigned __int8)error_is_set(errp))\n    result = Number L;\n  else\n    result = qemu_chr_open_udp_fd(<span class=\"supfact\">fd</span>);\n  return result;\n}", "var": [{"name": "v3", "type": "unsigned int", "ref_name": "fd", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7c8b7a7781f1cadd00b86bd331a6acad366142cb3db9ab2fde20cee244c5ff14", "path_in_repo": "XanClic/qemu//qemu-ga", "objdump": "0000000000026dfa <qobject_input_type_bool>:\n   26dfa:\t55                   \tpush   %rbp\n   26dfb:\t48 89 e5             \tmov    %rsp,%rbp\n   26dfe:\t48 83 ec 40          \tsub    $0x40,%rsp\n   26e02:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   26e06:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n   26e0a:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n   26e0e:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n   26e12:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   26e16:\t48 89 c7             \tmov    %rax,%rdi\n   26e19:\te8 7f ed ff ff       \tcallq  25b9d <to_qiv>\n   26e1e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   26e22:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n   26e26:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n   26e2a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   26e2e:\t48 89 d1             \tmov    %rdx,%rcx\n   26e31:\tba 01 00 00 00       \tmov    $0x1,%edx\n   26e36:\t48 89 c7             \tmov    %rax,%rdi\n   26e39:\te8 e3 f1 ff ff       \tcallq  26021 <qobject_input_get_object>\n   26e3e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   26e42:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n   26e47:\t0f 84 86 00 00 00    \tje     26ed3 <qobject_input_type_bool+0xd9>\n   26e4d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   26e51:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   26e56:\t48 89 c7             \tmov    %rax,%rdi\n   26e59:\te8 93 ec ff ff       \tcallq  25af1 <qobject_check_type>\n   26e5e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   26e62:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n   26e67:\t75 56                \tjne    26ebf <qobject_input_type_bool+0xc5>\n   26e69:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n   26e6d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   26e71:\t48 89 d6             \tmov    %rdx,%rsi\n   26e74:\t48 89 c7             \tmov    %rax,%rdi\n   26e77:\te8 4a ef ff ff       \tcallq  25dc6 <full_name>\n   26e7c:\t48 89 c2             \tmov    %rax,%rdx\n   26e7f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   26e83:\t48 83 ec 08          \tsub    $0x8,%rsp\n   26e87:\t48 8d 0d 34 b4 02 00 \tlea    0x2b434(%rip),%rcx        # 522c2 <__PRETTY_FUNCTION__.14627+0x322>\n   26e8e:\t51                   \tpush   %rcx\n   26e8f:\t49 89 d1             \tmov    %rdx,%r9\n   26e92:\t4c 8d 05 0f b3 02 00 \tlea    0x2b30f(%rip),%r8        # 521a8 <__PRETTY_FUNCTION__.14627+0x208>\n   26e99:\t48 8d 0d d0 b6 02 00 \tlea    0x2b6d0(%rip),%rcx        # 52570 <__func__.19032>\n   26ea0:\tba e1 01 00 00       \tmov    $0x1e1,%edx\n   26ea5:\t48 8d 35 ad b1 02 00 \tlea    0x2b1ad(%rip),%rsi        # 52059 <__PRETTY_FUNCTION__.14627+0xb9>\n   26eac:\t48 89 c7             \tmov    %rax,%rdi\n   26eaf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   26eb4:\te8 45 13 01 00       \tcallq  381fe <error_setg_internal>\n   26eb9:\t48 83 c4 10          \tadd    $0x10,%rsp\n   26ebd:\teb 15                \tjmp    26ed4 <qobject_input_type_bool+0xda>\n   26ebf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   26ec3:\t48 89 c7             \tmov    %rax,%rdi\n   26ec6:\te8 89 83 00 00       \tcallq  2f254 <qbool_get_bool>\n   26ecb:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n   26ecf:\t88 02                \tmov    %al,(%rdx)\n   26ed1:\teb 01                \tjmp    26ed4 <qobject_input_type_bool+0xda>\n   26ed3:\t90                   \tnop\n   26ed4:\tc9                   \tleaveq \n   26ed5:\tc3                   \tretq   ", "code_s": "unsigned int *__fastcall qobject_input_type_bool(__int64 a1, __int64 a2,\n                                                 _BYTE *a3, int a4) {\n  unsigned int *result;\n  unsigned int v5;\n  __int64 <span class=\"supfact\">v8</span>;\n  unsigned int *<span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v8</span> = to_qiv(a1);\n  result = (unsigned int *)qobject_input_get_object(<span class=\"supfact\">v8</span>, a2,\n                                                    Number, a4);\n  if (result) {\n    <span class=\"supfact\">v9</span> = qobject_check_type(result, Number);\n    if (<span class=\"supfact\">v9</span>) {\n      result = (unsigned int *)qbool_get_bool(<span class=\"supfact\">v9</span>);\n      *a3 = (_BYTE)result;\n    } else {\n      v5 = (unsigned int)full_name(<span class=\"supfact\">v8</span>, a2);\n      result = (unsigned int *)error_setg_internal(a4, (unsigned int)String,\n                                                   Number, (unsigned int)String,\n                                                   (unsigned int)String, v5);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl qobject_input_type_bool(Visitor_0 *v, const char *name, bool *obj,\n                                     Error_0 **errp) {\n  const char *v4;\n  QObjectInputVisitor_0 *<span class=\"supfact\">qiv</span>;\n  const QObject_0 *qobj;\n  QBool_0 *<span class=\"supfact\">qbool</span>;\n  <span class=\"supfact\">qiv</span> = to_qiv(v);\n  qobj = qobject_input_get_object(<span class=\"supfact\">qiv</span>, name, Number, errp);\n  if (qobj) {\n    <span class=\"supfact\">qbool</span> = (QBool_0 *)qobject_check_type(qobj, QTYPE_QBOOL);\n    if (<span class=\"supfact\">qbool</span>) {\n      *obj = qbool_get_bool(<span class=\"supfact\">qbool</span>);\n    } else {\n      v4 = full_name(<span class=\"supfact\">qiv</span>, name);\n      error_setg_internal(errp, String, Number, String, String, v4, String);\n    }\n  }\n}", "var": [{"name": "v9", "type": "const QObject_0 *", "ref_name": "qbool", "ref_type": "QBool_0 *"}, {"name": "v8", "type": "QObjectInputVisitor_0 *", "ref_name": "qiv", "ref_type": "QObjectInputVisitor_0 *"}], "body_in_train": false}, {"repo_owner": "jackwener", "repo_name": "ucore-os-learning", "path": "jackwener/ucore-os-learning/a295437736e1830ef557a9bf5555e23979cf6772ac5f645a51b7dfa9dad632a8", "path_in_repo": "jackwener/ucore-os-learning/ucore_os_lab/labcodes/lab8/obj/sign/tools/sign.o", "objdump": "0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec c0 02 00 00 \tsub    $0x2c0,%rsp\n   b:\t89 bd 4c fd ff ff    \tmov    %edi,-0x2b4(%rbp)\n  11:\t48 89 b5 40 fd ff ff \tmov    %rsi,-0x2c0(%rbp)\n  18:\t83 bd 4c fd ff ff 03 \tcmpl   $0x3,-0x2b4(%rbp)\n  1f:\t74 28                \tje     49 <main+0x49>\n  21:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 28 <main+0x28>\n  28:\t48 89 c1             \tmov    %rax,%rcx\n  2b:\tba 2a 00 00 00       \tmov    $0x2a,%edx\n  30:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  35:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  3a:\te8 00 00 00 00       \tcallq  3f <main+0x3f>\n  3f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  44:\te9 27 02 00 00       \tjmpq   270 <main+0x270>\n  49:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n  50:\t48 83 c0 08          \tadd    $0x8,%rax\n  54:\t48 8b 00             \tmov    (%rax),%rax\n  57:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n  5e:\t48 89 d6             \tmov    %rdx,%rsi\n  61:\t48 89 c7             \tmov    %rax,%rdi\n  64:\te8 00 00 00 00       \tcallq  69 <main+0x69>\n  69:\t85 c0                \ttest   %eax,%eax\n  6b:\t74 42                \tje     af <main+0xaf>\n  6d:\te8 00 00 00 00       \tcallq  72 <main+0x72>\n  72:\t8b 00                \tmov    (%rax),%eax\n  74:\t89 c7                \tmov    %eax,%edi\n  76:\te8 00 00 00 00       \tcallq  7b <main+0x7b>\n  7b:\t48 89 c1             \tmov    %rax,%rcx\n  7e:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n  85:\t48 83 c0 08          \tadd    $0x8,%rax\n  89:\t48 8b 10             \tmov    (%rax),%rdx\n  8c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 93 <main+0x93>\n  93:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  98:\t48 89 c7             \tmov    %rax,%rdi\n  9b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  a0:\te8 00 00 00 00       \tcallq  a5 <main+0xa5>\n  a5:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  aa:\te9 c1 01 00 00       \tjmpq   270 <main+0x270>\n  af:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n  b3:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n  ba:\t48 83 c0 08          \tadd    $0x8,%rax\n  be:\t48 8b 00             \tmov    (%rax),%rax\n  c1:\t48 89 c6             \tmov    %rax,%rsi\n  c4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  c9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  ce:\te8 00 00 00 00       \tcallq  d3 <main+0xd3>\n  d3:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  d7:\t48 3d fe 01 00 00    \tcmp    $0x1fe,%rax\n  dd:\t7e 27                \tjle    106 <main+0x106>\n  df:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n  e3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ea <main+0xea>\n  ea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  ef:\t48 89 c7             \tmov    %rax,%rdi\n  f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  f7:\te8 00 00 00 00       \tcallq  fc <main+0xfc>\n  fc:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 101:\te9 6a 01 00 00       \tjmpq   270 <main+0x270>\n 106:\t48 8d 85 50 fd ff ff \tlea    -0x2b0(%rbp),%rax\n 10d:\tba 00 02 00 00       \tmov    $0x200,%edx\n 112:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 117:\t48 89 c7             \tmov    %rax,%rdi\n 11a:\te8 00 00 00 00       \tcallq  11f <main+0x11f>\n 11f:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n 126:\t48 83 c0 08          \tadd    $0x8,%rax\n 12a:\t48 8b 00             \tmov    (%rax),%rax\n 12d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 132:\t48 89 c7             \tmov    %rax,%rdi\n 135:\te8 00 00 00 00       \tcallq  13a <main+0x13a>\n 13a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 13e:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 142:\t48 89 c6             \tmov    %rax,%rsi\n 145:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 149:\t48 8d 85 50 fd ff ff \tlea    -0x2b0(%rbp),%rax\n 150:\t48 89 d1             \tmov    %rdx,%rcx\n 153:\t48 89 f2             \tmov    %rsi,%rdx\n 156:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 15b:\t48 89 c7             \tmov    %rax,%rdi\n 15e:\te8 00 00 00 00       \tcallq  163 <main+0x163>\n 163:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 166:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 169:\t48 63 d0             \tmovslq %eax,%rdx\n 16c:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 170:\t48 39 c2             \tcmp    %rax,%rdx\n 173:\t74 34                \tje     1a9 <main+0x1a9>\n 175:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n 17c:\t48 83 c0 08          \tadd    $0x8,%rax\n 180:\t48 8b 10             \tmov    (%rax),%rdx\n 183:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18a <main+0x18a>\n 18a:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n 18d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 192:\t48 89 c7             \tmov    %rax,%rdi\n 195:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 19a:\te8 00 00 00 00       \tcallq  19f <main+0x19f>\n 19f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 1a4:\te9 c7 00 00 00       \tjmpq   270 <main+0x270>\n 1a9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1ad:\t48 89 c7             \tmov    %rax,%rdi\n 1b0:\te8 00 00 00 00       \tcallq  1b5 <main+0x1b5>\n 1b5:\tc6 85 4e ff ff ff 55 \tmovb   $0x55,-0xb2(%rbp)\n 1bc:\tc6 85 4f ff ff ff aa \tmovb   $0xaa,-0xb1(%rbp)\n 1c3:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n 1ca:\t48 83 c0 10          \tadd    $0x10,%rax\n 1ce:\t48 8b 00             \tmov    (%rax),%rax\n 1d1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1d6:\t48 89 c7             \tmov    %rax,%rdi\n 1d9:\te8 00 00 00 00       \tcallq  1de <main+0x1de>\n 1de:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 1e2:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 1e6:\t48 8d 85 50 fd ff ff \tlea    -0x2b0(%rbp),%rax\n 1ed:\t48 89 d1             \tmov    %rdx,%rcx\n 1f0:\tba 00 02 00 00       \tmov    $0x200,%edx\n 1f5:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 1fa:\t48 89 c7             \tmov    %rax,%rdi\n 1fd:\te8 00 00 00 00       \tcallq  202 <main+0x202>\n 202:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 205:\t81 7d f4 00 02 00 00 \tcmpl   $0x200,-0xc(%rbp)\n 20c:\t74 31                \tje     23f <main+0x23f>\n 20e:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n 215:\t48 83 c0 10          \tadd    $0x10,%rax\n 219:\t48 8b 10             \tmov    (%rax),%rdx\n 21c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 223 <main+0x223>\n 223:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n 226:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 22b:\t48 89 c7             \tmov    %rax,%rdi\n 22e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 233:\te8 00 00 00 00       \tcallq  238 <main+0x238>\n 238:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 23d:\teb 31                \tjmp    270 <main+0x270>\n 23f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 243:\t48 89 c7             \tmov    %rax,%rdi\n 246:\te8 00 00 00 00       \tcallq  24b <main+0x24b>\n 24b:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n 252:\t48 83 c0 10          \tadd    $0x10,%rax\n 256:\t48 8b 00             \tmov    (%rax),%rax\n 259:\t48 89 c6             \tmov    %rax,%rsi\n 25c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 261:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 266:\te8 00 00 00 00       \tcallq  26b <main+0x26b>\n 26b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 270:\tc9                   \tleaveq \n 271:\tc3                   \tretq   \n", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  int *v4;\n  char *v5;\n  char <span class=\"supfact\">s</span>[Number];\n  struct stat64 <span class=\"supfact\">v7</span>;\n  FILE *<span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  FILE *<span class=\"supfact\">stream</span>;\n  if (argc == Number) {\n    if (stat64(argv[Number], &<span class=\"supfact\">v7</span>)) {\n      v4 = _errno_location();\n      v5 = strerror(*v4);\n      fprintf(stderr, String, argv[Number], v5);\n      result = Number;\n    } else {\n      printf(String, argv[Number], <span class=\"supfact\">v7</span>.st_size);\n      if (<span class=\"supfact\">v7</span>.st_size <= Number) {\n        memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n        <span class=\"supfact\">stream</span> = fopen64(argv[Number], String);\n        <span class=\"supfact\">v9</span> =\n            fread(<span class=\"supfact\">s</span>, Number, <span class=\"supfact\">v7</span>.st_size,\n                  <span class=\"supfact\">stream</span>);\n        if (<span class=\"supfact\">v9</span> == <span class=\"supfact\">v7</span>.st_size) {\n          fclose(<span class=\"supfact\">stream</span>);\n          <span class=\"supfact\">s</span>[Number] = Number;\n          <span class=\"supfact\">s</span>[Number] = Number;\n          <span class=\"supfact\">v8</span> = fopen64(argv[Number], String);\n          <span class=\"supfact\">v9</span> =\n              fwrite(<span class=\"supfact\">s</span>, Number, Number, <span class=\"supfact\">v8</span>);\n          if (<span class=\"supfact\">v9</span> == Number) {\n            fclose(<span class=\"supfact\">v8</span>);\n            printf(String, argv[Number]);\n            result = Number;\n          } else {\n            fprintf(stderr, String, argv[Number], <span class=\"supfact\">v9</span>);\n            result = Number;\n          }\n        } else {\n          fprintf(stderr, String, argv[Number], <span class=\"supfact\">v9</span>);\n          result = Number;\n        }\n      } else {\n        fprintf(stderr, String, <span class=\"supfact\">v7</span>.st_size);\n        result = Number;\n      }\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  int *v4;\n  char *v5;\n  char <span class=\"supfact\">buf</span>[Number];\n  stat <span class=\"supfact\">st</span>;\n  FILE *<span class=\"supfact\">ofp</span>;\n  int <span class=\"supfact\">size</span>;\n  FILE *<span class=\"supfact\">ifp</span>;\n  if (argc == Number) {\n    if (stat64(argv[Number], (struct stat64 *)&<span class=\"supfact\">st</span>)) {\n      v4 = _errno_location();\n      v5 = strerror(*v4);\n      fprintf(stderr, String, argv[Number], v5);\n      result = Number;\n    } else {\n      printf(String, argv[Number], <span class=\"supfact\">st</span>.st_size);\n      if (<span class=\"supfact\">st</span>.st_size <= Number) {\n        memset(<span class=\"supfact\">buf</span>, Number, sizeof(<span class=\"supfact\">buf</span>));\n        <span class=\"supfact\">ifp</span> = fopen64(argv[Number], String);\n        <span class=\"supfact\">size</span> =\n            fread(<span class=\"supfact\">buf</span>, Number, <span class=\"supfact\">st</span>.st_size,\n                  <span class=\"supfact\">ifp</span>);\n        if (<span class=\"supfact\">size</span> == <span class=\"supfact\">st</span>.st_size) {\n          fclose(<span class=\"supfact\">ifp</span>);\n          <span class=\"supfact\">buf</span>[Number] = Number;\n          <span class=\"supfact\">buf</span>[Number] = Number;\n          <span class=\"supfact\">ofp</span> = fopen64(argv[Number], String);\n          <span class=\"supfact\">size</span> =\n              fwrite(<span class=\"supfact\">buf</span>, Number, Number, <span class=\"supfact\">ofp</span>);\n          if (<span class=\"supfact\">size</span> == Number) {\n            fclose(<span class=\"supfact\">ofp</span>);\n            printf(String, argv[Number]);\n            result = Number;\n          } else {\n            fprintf(stderr, String, argv[Number],\n                    (unsigned int)<span class=\"supfact\">size</span>);\n            result = Number;\n          }\n        } else {\n          fprintf(stderr, String, argv[Number],\n                  (unsigned int)<span class=\"supfact\">size</span>);\n          result = Number;\n        }\n      } else {\n        fprintf(stderr, String, <span class=\"supfact\">st</span>.st_size);\n        result = Number;\n      }\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "stream", "type": "FILE *", "ref_name": "ifp", "ref_type": "FILE *"}, {"name": "v9", "type": "int", "ref_name": "size", "ref_type": "int"}, {"name": "v8", "type": "FILE *", "ref_name": "ofp", "ref_type": "FILE *"}, {"name": "v7", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}, {"name": "s", "type": "char[512]", "ref_name": "buf", "ref_type": "char[512]"}], "body_in_train": false}, {"repo_owner": "skylli", "repo_name": "Wilddog_Arduino_Yun", "path": "skylli/Wilddog_Arduino_Yun/41ea027b2720a54a9c6ab513223abc632dfd7dd70e4e8118fac0a4a557fa6e81", "path_in_repo": "skylli/Wilddog_Arduino_Yun/wilddogArduinoYun/src/wilddog_watch", "objdump": "0000000000401767 <transfer_send>:\n  401767:\t55                   \tpush   %rbp\n  401768:\t48 89 e5             \tmov    %rsp,%rbp\n  40176b:\t53                   \tpush   %rbx\n  40176c:\t48 83 ec 38          \tsub    $0x38,%rsp\n  401770:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  401774:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n  401777:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  40177e:\tc7 45 e8 10 00 00 00 \tmovl   $0x10,-0x18(%rbp)\n  401785:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  401789:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40178e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401793:\t48 89 c7             \tmov    %rax,%rdi\n  401796:\te8 75 f9 ff ff       \tcallq  401110 <memset@plt>\n  40179b:\t66 c7 45 d0 02 00    \tmovw   $0x2,-0x30(%rbp)\n  4017a1:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  4017a4:\t0f b7 c0             \tmovzwl %ax,%eax\n  4017a7:\t89 c7                \tmov    %eax,%edi\n  4017a9:\te8 02 f9 ff ff       \tcallq  4010b0 <htons@plt>\n  4017ae:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n  4017b2:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4017b6:\t48 83 c0 04          \tadd    $0x4,%rax\n  4017ba:\t48 89 c6             \tmov    %rax,%rsi\n  4017bd:\tbf ba 30 40 00       \tmov    $0x4030ba,%edi\n  4017c2:\te8 c9 f9 ff ff       \tcallq  401190 <inet_aton@plt>\n  4017c7:\t85 c0                \ttest   %eax,%eax\n  4017c9:\t75 25                \tjne    4017f0 <transfer_send+0x89>\n  4017cb:\t48 8b 05 8e 39 00 00 \tmov    0x398e(%rip),%rax        # 405160 <stderr@@GLIBC_2.2.5>\n  4017d2:\t48 89 c1             \tmov    %rax,%rcx\n  4017d5:\tba 13 00 00 00       \tmov    $0x13,%edx\n  4017da:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4017df:\tbf c4 30 40 00       \tmov    $0x4030c4,%edi\n  4017e4:\te8 67 fa ff ff       \tcallq  401250 <fwrite@plt>\n  4017e9:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4017ee:\teb 4f                \tjmp    40183f <transfer_send+0xd8>\n  4017f0:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  4017f3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4017f7:\t48 89 c7             \tmov    %rax,%rdi\n  4017fa:\te8 91 f8 ff ff       \tcallq  401090 <strlen@plt>\n  4017ff:\t48 89 c2             \tmov    %rax,%rdx\n  401802:\t8b 05 64 39 00 00    \tmov    0x3964(%rip),%eax        # 40516c <l_socket>\n  401808:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  40180c:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n  401810:\t41 89 d9             \tmov    %ebx,%r9d\n  401813:\t49 89 c8             \tmov    %rcx,%r8\n  401816:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  40181b:\t89 c7                \tmov    %eax,%edi\n  40181d:\te8 fe f8 ff ff       \tcallq  401120 <sendto@plt>\n  401822:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  401825:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n  401829:\t75 11                \tjne    40183c <transfer_send+0xd5>\n  40182b:\tbf d8 30 40 00       \tmov    $0x4030d8,%edi\n  401830:\te8 cb f9 ff ff       \tcallq  401200 <perror@plt>\n  401835:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40183a:\teb 03                \tjmp    40183f <transfer_send+0xd8>\n  40183c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40183f:\t48 83 c4 38          \tadd    $0x38,%rsp\n  401843:\t5b                   \tpop    %rbx\n  401844:\t5d                   \tpop    %rbp\n  401845:\tc3                   \tretq   ", "code_s": "__int64 __fastcall transfer_send(const char *a1, uint16_t a2) {\n  __int64 result;\n  socklen_t v3;\n  size_t v4;\n  struct sockaddr <span class=\"supfact\">s</span>;\n  socklen_t <span class=\"supfact\">addr_len</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = Number;\n  <span class=\"supfact\">addr_len</span> = Number;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.sa_family = Number;\n  *(_WORD *)<span class=\"supfact\">s</span>.sa_data = htons(a2);\n  if (inet_aton(String, (struct in_addr *)&<span class=\"supfact\">s</span>.sa_data[Number])) {\n    v3 = <span class=\"supfact\">addr_len</span>;\n    v4 = strlen(a1);\n    <span class=\"supfact\">v7</span> =\n        sendto(l_socket, a1, v4, Number, &<span class=\"supfact\">s</span>, v3);\n    if (<span class=\"supfact\">v7</span> == Number) {\n      perror(String);\n      result = Number;\n    } else {\n      result = <span class=\"supfact\">v7</span>;\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl transfer_send(const char *src, int daemon_port) {\n  int result;\n  int v3;\n  size_t v4;\n  sockaddr_in <span class=\"supfact\">si_other</span>;\n  int <span class=\"supfact\">slen</span>;\n  int <span class=\"supfact\">res</span>;\n  <span class=\"supfact\">res</span> = Number;\n  <span class=\"supfact\">slen</span> = Number;\n  memset(&<span class=\"supfact\">si_other</span>, Number, sizeof(<span class=\"supfact\">si_other</span>));\n  <span class=\"supfact\">si_other</span>.sin_family = Number;\n  <span class=\"supfact\">si_other</span>.sin_port = htons(daemon_port);\n  if (inet_aton(String, &<span class=\"supfact\">si_other</span>.sin_addr)) {\n    v3 = <span class=\"supfact\">slen</span>;\n    v4 = strlen(src);\n    <span class=\"supfact\">res</span> =\n        sendto(l_socket, src, v4, Number,\n               (const struct sockaddr *)&<span class=\"supfact\">si_other</span>, v3);\n    if (<span class=\"supfact\">res</span> == Number) {\n      perror(String);\n      result = Number;\n    } else {\n      result = <span class=\"supfact\">res</span>;\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v7", "type": "int", "ref_name": "res", "ref_type": "int"}, {"name": "addr_len", "type": "int", "ref_name": "slen", "ref_type": "int"}, {"name": "s", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "si_other", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "jameswg2012", "repo_name": "libamplayer-m3", "path": "jameswg2012/libamplayer-m3/7e92d123a1653ded7751b9ed7169799945f0af51fe63a5c28d9090693b6d9a01", "path_in_repo": "jameswg2012/libamplayer-m3/amffmpeg/libavcodec/mjpegdec.o", "objdump": "0000000000006f7d <ff_mjpeg_decode_end>:\n    6f7d:\t48 83 ec 28          \tsub    $0x28,%rsp\n    6f81:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    6f86:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    6f8b:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n    6f92:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n    6f97:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    6f9c:\t48 8b 80 f0 05 00 00 \tmov    0x5f0(%rax),%rax\n    6fa3:\t48 85 c0             \ttest   %rax,%rax\n    6fa6:\t74 39                \tje     6fe1 <ff_mjpeg_decode_end+0x64>\n    6fa8:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    6fad:\t48 8b 80 f0 05 00 00 \tmov    0x5f0(%rax),%rax\n    6fb4:\t48 8b 00             \tmov    (%rax),%rax\n    6fb7:\t48 85 c0             \ttest   %rax,%rax\n    6fba:\t74 25                \tje     6fe1 <ff_mjpeg_decode_end+0x64>\n    6fbc:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    6fc1:\t48 8b 88 40 01 00 00 \tmov    0x140(%rax),%rcx\n    6fc8:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    6fcd:\t48 8b 90 f0 05 00 00 \tmov    0x5f0(%rax),%rdx\n    6fd4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    6fd9:\t48 89 d6             \tmov    %rdx,%rsi\n    6fdc:\t48 89 c7             \tmov    %rax,%rdi\n    6fdf:\tff d1                \tcallq  *%rcx\n    6fe1:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    6fe6:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    6fea:\t48 89 c7             \tmov    %rax,%rdi\n    6fed:\te8 00 00 00 00       \tcallq  6ff2 <ff_mjpeg_decode_end+0x75>\n    6ff2:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    6ff7:\t48 8b 80 10 06 00 00 \tmov    0x610(%rax),%rax\n    6ffe:\t48 89 c7             \tmov    %rax,%rdi\n    7001:\te8 00 00 00 00       \tcallq  7006 <ff_mjpeg_decode_end+0x89>\n    7006:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    700b:\t48 05 d0 25 00 00    \tadd    $0x25d0,%rax\n    7011:\t48 89 c7             \tmov    %rax,%rdi\n    7014:\te8 00 00 00 00       \tcallq  7019 <ff_mjpeg_decode_end+0x9c>\n    7019:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    701e:\tc7 80 d8 25 00 00 00 \tmovl   $0x0,0x25d8(%rax)\n    7025:\t00 00 00 \n    7028:\tc7 44 24 1c 00 00 00 \tmovl   $0x0,0x1c(%rsp)\n    702f:\t00 \n    7030:\teb 63                \tjmp    7095 <ff_mjpeg_decode_end+0x118>\n    7032:\tc7 44 24 18 00 00 00 \tmovl   $0x0,0x18(%rsp)\n    7039:\t00 \n    703a:\teb 4d                \tjmp    7089 <ff_mjpeg_decode_end+0x10c>\n    703c:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    7040:\t48 98                \tcltq   \n    7042:\t48 89 c2             \tmov    %rax,%rdx\n    7045:\t48 01 d2             \tadd    %rdx,%rdx\n    7048:\t48 01 c2             \tadd    %rax,%rdx\n    704b:\t48 8d 04 d5 00 00 00 \tlea    0x0(,%rdx,8),%rax\n    7052:\t00 \n    7053:\t48 89 c2             \tmov    %rax,%rdx\n    7056:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    705a:\t48 63 c8             \tmovslq %eax,%rcx\n    705d:\t48 89 c8             \tmov    %rcx,%rax\n    7060:\t48 01 c0             \tadd    %rax,%rax\n    7063:\t48 01 c8             \tadd    %rcx,%rax\n    7066:\t48 c1 e0 05          \tshl    $0x5,%rax\n    706a:\t48 01 d0             \tadd    %rdx,%rax\n    706d:\t48 8d 90 30 02 00 00 \tlea    0x230(%rax),%rdx\n    7074:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    7079:\t48 01 d0             \tadd    %rdx,%rax\n    707c:\t48 89 c7             \tmov    %rax,%rdi\n    707f:\te8 00 00 00 00       \tcallq  7084 <ff_mjpeg_decode_end+0x107>\n    7084:\t83 44 24 18 01       \taddl   $0x1,0x18(%rsp)\n    7089:\t83 7c 24 18 03       \tcmpl   $0x3,0x18(%rsp)\n    708e:\t7e ac                \tjle    703c <ff_mjpeg_decode_end+0xbf>\n    7090:\t83 44 24 1c 01       \taddl   $0x1,0x1c(%rsp)\n    7095:\t83 7c 24 1c 02       \tcmpl   $0x2,0x1c(%rsp)\n    709a:\t7e 96                \tjle    7032 <ff_mjpeg_decode_end+0xb5>\n    709c:\tc7 44 24 1c 00 00 00 \tmovl   $0x0,0x1c(%rsp)\n    70a3:\t00 \n    70a4:\teb 4d                \tjmp    70f3 <ff_mjpeg_decode_end+0x176>\n    70a6:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    70aa:\t48 98                \tcltq   \n    70ac:\t48 05 d4 00 00 00    \tadd    $0xd4,%rax\n    70b2:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    70b9:\t00 \n    70ba:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    70bf:\t48 01 d0             \tadd    %rdx,%rax\n    70c2:\t48 89 c7             \tmov    %rax,%rdi\n    70c5:\te8 00 00 00 00       \tcallq  70ca <ff_mjpeg_decode_end+0x14d>\n    70ca:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    70ce:\t48 98                \tcltq   \n    70d0:\t48 05 d8 00 00 00    \tadd    $0xd8,%rax\n    70d6:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    70dd:\t00 \n    70de:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    70e3:\t48 01 d0             \tadd    %rdx,%rax\n    70e6:\t48 89 c7             \tmov    %rax,%rdi\n    70e9:\te8 00 00 00 00       \tcallq  70ee <ff_mjpeg_decode_end+0x171>\n    70ee:\t83 44 24 1c 01       \taddl   $0x1,0x1c(%rsp)\n    70f3:\t83 7c 24 1c 03       \tcmpl   $0x3,0x1c(%rsp)\n    70f8:\t7e ac                \tjle    70a6 <ff_mjpeg_decode_end+0x129>\n    70fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    70ff:\t48 83 c4 28          \tadd    $0x28,%rsp\n    7103:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall ff_mjpeg_decode_end(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">j</span>;\n  int i;\n  int k;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)(a1 + Number);\n  if (*(_QWORD *)(<span class=\"supfact\">v2</span> + Number) &&\n      **(_QWORD **)(<span class=\"supfact\">v2</span> + Number))\n    (*(void(__fastcall **)(__int64, _QWORD))(a1 + Number))(\n        a1, *(_QWORD *)(<span class=\"supfact\">v2</span> + Number));\n  av_free(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number));\n  av_free(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number));\n  av_freep(<span class=\"supfact\">v2</span> + Number);\n  *(_DWORD *)(<span class=\"supfact\">v2</span> + Number) = Number;\n  for (i = Number; i <= Number; ++i) {\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>)\n      free_vlc(Number L * <span class=\"supfact\">j</span> + Number L * i + Number +\n               <span class=\"supfact\">v2</span>);\n  }\n  for (k = Number; k <= Number; ++k) {\n    av_freep(Number * (k + Number L) + <span class=\"supfact\">v2</span>);\n    av_freep(Number * (k + Number L) + <span class=\"supfact\">v2</span>);\n  }\n  return Number L;\n}", "code_t": "int __cdecl ff_mjpeg_decode_end(AVCodecContext_0 *avctx) {\n  MJpegDecodeContext_0 *<span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">j</span>;\n  int i;\n  int ia;\n  <span class=\"supfact\">s</span> = (MJpegDecodeContext_0 *)avctx->priv_data;\n  if (<span class=\"supfact\">s</span>->picture_ptr &&\n      <span class=\"supfact\">s</span>->picture_ptr->data[Number])\n    avctx->release_buffer(avctx, <span class=\"supfact\">s</span>->picture_ptr);\n  av_free(<span class=\"supfact\">s</span>->buffer);\n  av_free(<span class=\"supfact\">s</span>->qscale_table);\n  av_freep(&<span class=\"supfact\">s</span>->ljpeg_buffer);\n  <span class=\"supfact\">s</span>->ljpeg_buffer_size = Number;\n  for (i = Number; i <= Number; ++i) {\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>)\n      free_vlc(&<span class=\"supfact\">s</span>->vlcs[i][<span class=\"supfact\">j</span>]);\n  }\n  for (ia = Number; ia <= Number; ++ia) {\n    av_freep(&<span class=\"supfact\">s</span>->blocks[ia]);\n    av_freep(&<span class=\"supfact\">s</span>->last_nnz[ia]);\n  }\n  return Number;\n}", "var": [{"name": "j", "type": "int", "ref_name": "j", "ref_type": "int"}, {"name": "v2", "type": "MJpegDecodeContext_0 *", "ref_name": "s", "ref_type": "MJpegDecodeContext_0 *"}], "body_in_train": false}, {"repo_owner": "rofl0r", "repo_name": "arnold", "path": "rofl0r/arnold/23d972a9e11b70c2a030be6fed24a31c4eadc4b2e4b22875541dc90362f3b6ca", "path_in_repo": "rofl0r/arnold/src/cpc/cpc.o", "objdump": "0000000000001528 <AllocateRamPages>:\n    1528:\t55                   \tpush   %rbp\n    1529:\t48 89 e5             \tmov    %rsp,%rbp\n    152c:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1530:\te8 d6 fc ff ff       \tcallq  120b <FreeExtraRam>\n    1535:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    153c:\t00 \n    153d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1544 <AllocateRamPages+0x1c>\n    1544:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1548:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    154f:\teb 1c                \tjmp    156d <AllocateRamPages+0x45>\n    1551:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1555:\t83 e0 01             \tand    $0x1,%eax\n    1558:\t48 85 c0             \ttest   %rax,%rax\n    155b:\t74 08                \tje     1565 <AllocateRamPages+0x3d>\n    155d:\t48 81 45 e8 00 40 00 \taddq   $0x4000,-0x18(%rbp)\n    1564:\t00 \n    1565:\t48 d1 6d f0          \tshrq   -0x10(%rbp)\n    1569:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    156d:\t83 7d fc 1f          \tcmpl   $0x1f,-0x4(%rbp)\n    1571:\t7e de                \tjle    1551 <AllocateRamPages+0x29>\n    1573:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1577:\t48 89 c7             \tmov    %rax,%rdi\n    157a:\te8 00 00 00 00       \tcallq  157f <AllocateRamPages+0x57>\n    157f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1586 <AllocateRamPages+0x5e>\n    1586:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 158d <AllocateRamPages+0x65>\n    158d:\t48 85 c0             \ttest   %rax,%rax\n    1590:\t74 64                \tje     15f6 <AllocateRamPages+0xce>\n    1592:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1599 <AllocateRamPages+0x71>\n    1599:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    159d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 15a4 <AllocateRamPages+0x7c>\n    15a4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    15a8:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    15af:\teb 3f                \tjmp    15f0 <AllocateRamPages+0xc8>\n    15b1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    15b5:\t83 e0 01             \tand    $0x1,%eax\n    15b8:\t48 85 c0             \ttest   %rax,%rax\n    15bb:\t74 12                \tje     15cf <AllocateRamPages+0xa7>\n    15bd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    15c1:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    15c5:\t48 81 45 e0 00 40 00 \taddq   $0x4000,-0x20(%rbp)\n    15cc:\t00 \n    15cd:\teb 08                \tjmp    15d7 <AllocateRamPages+0xaf>\n    15cf:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    15d6:\t00 \n    15d7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    15da:\t48 98                \tcltq   \n    15dc:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    15e0:\t48 89 14 c5 00 00 00 \tmov    %rdx,0x0(,%rax,8)\n    15e7:\t00 \n    15e8:\t48 d1 6d f0          \tshrq   -0x10(%rbp)\n    15ec:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    15f0:\t83 7d fc 1f          \tcmpl   $0x1f,-0x4(%rbp)\n    15f4:\t7e bb                \tjle    15b1 <AllocateRamPages+0x89>\n    15f6:\t90                   \tnop\n    15f7:\tc9                   \tleaveq \n    15f8:\tc3                   \tretq   ", "code_s": "__int64 AllocateRamPages() {\n  __int64 result;\n  __int64 <span class=\"supfact\">v1</span>;\n  char *<span class=\"supfact\">v2</span>;\n  size_t <span class=\"supfact\">size</span>;\n  unsigned __int64 v4;\n  unsigned __int64 v5;\n  int i;\n  int j;\n  FreeExtraRam();\n  <span class=\"supfact\">size</span> = Number L;\n  v4 = CPC_RamUsedMask;\n  for (i = Number; i <= Number; ++i) {\n    if ((v4 & Number) != Number)\n      <span class=\"supfact\">size</span> += Number;\n    v4 >>= Number;\n  }\n  Amstrad_ExtraRam = malloc(<span class=\"supfact\">size</span>);\n  result = (__int64)Amstrad_ExtraRam;\n  if (Amstrad_ExtraRam) {\n    <span class=\"supfact\">v2</span> = (char *)Amstrad_ExtraRam;\n    result = CPC_RamUsedMask;\n    v5 = CPC_RamUsedMask;\n    for (j = Number; j <= Number; ++j) {\n      if ((v5 & Number) != Number) {\n        <span class=\"supfact\">v1</span> = (__int64)<span class=\"supfact\">v2</span>;\n        <span class=\"supfact\">v2</span> += Number;\n      } else {\n        <span class=\"supfact\">v1</span> = Number L;\n      }\n      result = j;\n      Amstrad_MemoryPages[j] = <span class=\"supfact\">v1</span>;\n      v5 >>= Number;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl AllocateRamPages() {\n  unsigned __int8 *<span class=\"supfact\">pBlockAddr</span>;\n  unsigned __int8 *<span class=\"supfact\">pRamPtr</span>;\n  unsigned __int64 <span class=\"supfact\">RamRequired</span>;\n  unsigned __int64 RamMask;\n  unsigned __int64 RamMaska;\n  int i;\n  int ia;\n  FreeExtraRam();\n  <span class=\"supfact\">RamRequired</span> = Number L;\n  RamMask = CPC_RamUsedMask;\n  for (i = Number; i <= Number; ++i) {\n    if ((RamMask & Number) != Number)\n      <span class=\"supfact\">RamRequired</span> += Number;\n    RamMask >>= Number;\n  }\n  Amstrad_ExtraRam = (unsigned __int8 *)malloc(<span class=\"supfact\">RamRequired</span>);\n  if (Amstrad_ExtraRam) {\n    <span class=\"supfact\">pRamPtr</span> = Amstrad_ExtraRam;\n    RamMaska = CPC_RamUsedMask;\n    for (ia = Number; ia <= Number; ++ia) {\n      if ((RamMaska & Number) != Number) {\n        <span class=\"supfact\">pBlockAddr</span> = <span class=\"supfact\">pRamPtr</span>;\n        <span class=\"supfact\">pRamPtr</span> += Number;\n      } else {\n        <span class=\"supfact\">pBlockAddr</span> = Number L;\n      }\n      Amstrad_MemoryPages[ia] = <span class=\"supfact\">pBlockAddr</span>;\n      RamMaska >>= Number;\n    }\n  }\n}", "var": [{"name": "size", "type": "size_t", "ref_name": "RamRequired", "ref_type": "unsigned __int64"}, {"name": "v2", "type": "char *", "ref_name": "pRamPtr", "ref_type": "unsigned __int8 *"}, {"name": "v1", "type": "char *", "ref_name": "pBlockAddr", "ref_type": "unsigned __int8 *"}], "body_in_train": false}, {"repo_owner": "Soldie", "repo_name": "zimg-image-alto-desempenho", "path": "Soldie/zimg-image-alto-desempenho/91c4e62778ce790e9e5b26861e61487c20a3c711d1ec07a04dec6cb027a7f7e3", "path_in_repo": "Soldie/zimg-image-alto-desempenho//deps/libwebp/src/enc/libwebpencode_la-quant_enc.o", "objdump": "0000000000001e4b <ReconstructIntra4>:\n    1e4b:\t55                   \tpush   %rbp\n    1e4c:\t48 89 e5             \tmov    %rsp,%rbp\n    1e4f:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n    1e53:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    1e57:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n    1e5b:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n    1e5f:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n    1e63:\t44 89 45 8c          \tmov    %r8d,-0x74(%rbp)\n    1e67:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1e6b:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    1e6f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1e73:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1e77:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n    1e7b:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n    1e7e:\t48 98                \tcltq   \n    1e80:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    1e87:\t48 98                \tcltq   \n    1e89:\t48 01 d0             \tadd    %rdx,%rax\n    1e8c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1e90:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1e94:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1e98:\t0f b6 00             \tmovzbl (%rax),%eax\n    1e9b:\tc0 e8 05             \tshr    $0x5,%al\n    1e9e:\t83 e0 03             \tand    $0x3,%eax\n    1ea1:\t0f b6 c0             \tmovzbl %al,%eax\n    1ea4:\t48 98                \tcltq   \n    1ea6:\t48 69 c0 e8 02 00 00 \timul   $0x2e8,%rax,%rax\n    1ead:\t48 8d 90 60 02 00 00 \tlea    0x260(%rax),%rdx\n    1eb4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1eb8:\t48 01 d0             \tadd    %rdx,%rax\n    1ebb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1ebf:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    1ec6:\t4c 8b 05 00 00 00 00 \tmov    0x0(%rip),%r8        # 1ecd <ReconstructIntra4+0x82>\n    1ecd:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    1ed1:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    1ed5:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1ed9:\t48 89 ce             \tmov    %rcx,%rsi\n    1edc:\t48 89 c7             \tmov    %rax,%rdi\n    1edf:\t41 ff d0             \tcallq  *%r8\n    1ee2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1ee6:\t8b 80 48 01 00 00    \tmov    0x148(%rax),%eax\n    1eec:\t85 c0                \ttest   %eax,%eax\n    1eee:\t0f 84 85 00 00 00    \tje     1f79 <ReconstructIntra4+0x12e>\n    1ef4:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1ef8:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n    1efe:\t83 e0 03             \tand    $0x3,%eax\n    1f01:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    1f04:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1f08:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n    1f0e:\tc1 f8 02             \tsar    $0x2,%eax\n    1f11:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    1f14:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1f18:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    1f1b:\t48 63 d2             \tmovslq %edx,%rdx\n    1f1e:\t48 83 c2 20          \tadd    $0x20,%rdx\n    1f22:\t8b 54 90 04          \tmov    0x4(%rax,%rdx,4),%edx\n    1f26:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1f2a:\t8b 4d d8             \tmov    -0x28(%rbp),%ecx\n    1f2d:\t48 63 c9             \tmovslq %ecx,%rcx\n    1f30:\t48 83 c1 28          \tadd    $0x28,%rcx\n    1f34:\t8b 44 88 08          \tmov    0x8(%rax,%rcx,4),%eax\n    1f38:\t01 d0                \tadd    %edx,%eax\n    1f3a:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    1f3d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1f41:\t8b b8 d4 02 00 00    \tmov    0x2d4(%rax),%edi\n    1f47:\t4c 8b 45 e0          \tmov    -0x20(%rbp),%r8\n    1f4b:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n    1f4e:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n    1f52:\t48 8d 75 b0          \tlea    -0x50(%rbp),%rsi\n    1f56:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1f5a:\t48 83 ec 08          \tsub    $0x8,%rsp\n    1f5e:\t57                   \tpush   %rdi\n    1f5f:\t4d 89 c1             \tmov    %r8,%r9\n    1f62:\t41 b8 03 00 00 00    \tmov    $0x3,%r8d\n    1f68:\t48 89 c7             \tmov    %rax,%rdi\n    1f6b:\te8 b0 f1 ff ff       \tcallq  1120 <TrellisQuantizeBlock>\n    1f70:\t48 83 c4 10          \tadd    $0x10,%rsp\n    1f74:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1f77:\teb 1f                \tjmp    1f98 <ReconstructIntra4+0x14d>\n    1f79:\t4c 8b 05 00 00 00 00 \tmov    0x0(%rip),%r8        # 1f80 <ReconstructIntra4+0x135>\n    1f80:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    1f84:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n    1f88:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    1f8c:\t48 89 ce             \tmov    %rcx,%rsi\n    1f8f:\t48 89 c7             \tmov    %rax,%rdi\n    1f92:\t41 ff d0             \tcallq  *%r8\n    1f95:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1f98:\t4c 8b 05 00 00 00 00 \tmov    0x0(%rip),%r8        # 1f9f <ReconstructIntra4+0x154>\n    1f9f:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    1fa3:\t48 8d 75 b0          \tlea    -0x50(%rbp),%rsi\n    1fa7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1fab:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1fb0:\t48 89 c7             \tmov    %rax,%rdi\n    1fb3:\t41 ff d0             \tcallq  *%r8\n    1fb6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1fb9:\tc9                   \tleaveq \n    1fba:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ReconstructIntra4(__int64 a1, __int64 a2, __int64 a3,\n                                     __int64 a4, int a5) {\n  char <span class=\"supfact\">v7</span>[Number];\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  unsigned int <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v13</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v12</span> = *(_QWORD *)(a1 + Number) + VP8I4ModeOffsets[a5];\n  <span class=\"supfact\">v11</span> =\n      Number L * ((**(_BYTE **)(a1 + Number) >> Number) & Number) + Number +\n      <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v14</span> = Number;\n  VP8FTransform(a3, <span class=\"supfact\">v12</span>, <span class=\"supfact\">v7</span>);\n  if (*(_DWORD *)(a1 + Number)) {\n    <span class=\"supfact\">v10</span> = *(_DWORD *)(a1 + Number) & Number;\n    <span class=\"supfact\">v9</span> = *(int *)(a1 + Number) >> Number;\n    <span class=\"supfact\">v8</span> =\n        *(_DWORD *)(a1 + Number * (<span class=\"supfact\">v10</span> + Number L) + Number) +\n        *(_DWORD *)(a1 + Number * (<span class=\"supfact\">v9</span> + Number L) + Number);\n    <span class=\"supfact\">v14</span> = TrellisQuantizeBlock(\n        <span class=\"supfact\">v13</span>, (__int64)<span class=\"supfact\">v7</span>, a2,\n        <span class=\"supfact\">v8</span>, Number, <span class=\"supfact\">v11</span>,\n        *(_DWORD *)(<span class=\"supfact\">v11</span> + Number));\n  } else {\n    <span class=\"supfact\">v14</span> =\n        VP8EncQuantizeBlock(<span class=\"supfact\">v7</span>, a2, <span class=\"supfact\">v11</span>);\n  }\n  VP8ITransform(<span class=\"supfact\">v12</span>, <span class=\"supfact\">v7</span>, a4, Number L);\n  return <span class=\"supfact\">v14</span>;\n}", "code_t": "int __cdecl ReconstructIntra4(VP8EncIterator *const it, int16_t *levels,\n                              const uint8_t *const src, uint8_t *const yuv_out,\n                              int mode) {\n  int16_t <span class=\"supfact\">tmp</span>[Number];\n  int <span class=\"supfact\">ctx</span>;\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">x</span>;\n  const VP8SegmentInfo *<span class=\"supfact\">dqm</span>;\n  const uint8_t *<span class=\"supfact\">ref</span>;\n  const VP8Encoder_0 *<span class=\"supfact\">enc</span>;\n  int <span class=\"supfact\">nz</span>;\n  <span class=\"supfact\">enc</span> = it->enc_;\n  <span class=\"supfact\">ref</span> = &it->yuv_p_[VP8I4ModeOffsets[mode]];\n  <span class=\"supfact\">dqm</span> =\n      &<span class=\"supfact\">enc</span>->dqm_[(*(_BYTE *)it->mb_ >> Number) & Number];\n  <span class=\"supfact\">nz</span> = Number;\n  VP8FTransform(src, <span class=\"supfact\">ref</span>, <span class=\"supfact\">tmp</span>);\n  if (it->do_trellis_) {\n    <span class=\"supfact\">x</span> = it->i4_ & Number;\n    <span class=\"supfact\">y</span> = it->i4_ >> Number;\n    <span class=\"supfact\">ctx</span> =\n        it->top_nz_[<span class=\"supfact\">x</span>] + it->left_nz_[<span class=\"supfact\">y</span>];\n    <span class=\"supfact\">nz</span> = TrellisQuantizeBlock(\n        <span class=\"supfact\">enc</span>, <span class=\"supfact\">tmp</span>, levels, <span class=\"supfact\">ctx</span>,\n        Number, &<span class=\"supfact\">dqm</span>->y1_,\n        <span class=\"supfact\">dqm</span>->lambda_trellis_i4_);\n  } else {\n    <span class=\"supfact\">nz</span> =\n        VP8EncQuantizeBlock(<span class=\"supfact\">tmp</span>, levels, <span class=\"supfact\">dqm</span>);\n  }\n  VP8ITransform(<span class=\"supfact\">ref</span>, <span class=\"supfact\">tmp</span>, yuv_out, Number L);\n  return <span class=\"supfact\">nz</span>;\n}", "var": [{"name": "v14", "type": "int", "ref_name": "nz", "ref_type": "int"}, {"name": "v13", "type": "uint8_t *", "ref_name": "enc", "ref_type": "__unk__"}, {"name": "v12", "type": "uint8_t *", "ref_name": "ref", "ref_type": "const uint8_t *"}, {"name": "v11", "type": "uint8_t *", "ref_name": "dqm", "ref_type": "__unk__"}, {"name": "v10", "type": "int", "ref_name": "x", "ref_type": "int"}, {"name": "v9", "type": "int", "ref_name": "y", "ref_type": "int"}, {"name": "v8", "type": "int", "ref_name": "ctx", "ref_type": "int"}, {"name": "v7", "type": "unsigned __int8[32]", "ref_name": "tmp", "ref_type": "int16_t[16]"}], "body_in_train": false}, {"repo_owner": "darkspr1te", "repo_name": "s3c44b0x", "path": "darkspr1te/s3c44b0x/5dbf5b033adac2824e5fbb97ae23b86682e615be95b33737b2ffd1f6ca669d6f", "path_in_repo": "darkspr1te/s3c44b0x/uClinux-dist/uClibc/test/stdlib/teston_exit_glibc.o", "objdump": "0000000000000514 <main>:\n 514:\t55                   \tpush   %rbp\n 515:\t48 89 e5             \tmov    %rsp,%rbp\n 518:\t48 83 ec 10          \tsub    $0x10,%rsp\n 51c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 523:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n 52a:\tc7 45 f4 19 00 00 00 \tmovl   $0x19,-0xc(%rbp)\n 531:\teb 25                \tjmp    558 <main+0x44>\n 533:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n 537:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 53a:\t89 c6                \tmov    %eax,%esi\n 53c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 541:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 546:\te8 00 00 00 00       \tcallq  54b <main+0x37>\n 54b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 54e:\t83 c0 01             \tadd    $0x1,%eax\n 551:\t99                   \tcltd   \n 552:\tf7 7d f4             \tidivl  -0xc(%rbp)\n 555:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n 558:\t83 7d f8 13          \tcmpl   $0x13,-0x8(%rbp)\n 55c:\t7f 24                \tjg     582 <main+0x6e>\n 55e:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 561:\t48 98                \tcltq   \n 563:\t48 89 c2             \tmov    %rax,%rdx\n 566:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 569:\t48 98                \tcltq   \n 56b:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 572:\t00 \n 573:\t48 89 d6             \tmov    %rdx,%rsi\n 576:\t48 89 c7             \tmov    %rax,%rdi\n 579:\te8 00 00 00 00       \tcallq  57e <main+0x6a>\n 57e:\t85 c0                \ttest   %eax,%eax\n 580:\t79 b1                \tjns    533 <main+0x1f>\n 582:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 585:\t89 c6                \tmov    %eax,%esi\n 587:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 58c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 591:\te8 00 00 00 00       \tcallq  596 <main+0x82>\n 596:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 599:\t89 c7                \tmov    %eax,%edi\n 59b:\te8 00 00 00 00       \tcallq  5a0 <main+0x8c>\n", "code_s": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  int <span class=\"supfact\">status</span>;\n  int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Number;\n  for (<span class=\"supfact\">status</span> = Number;\n       <span class=\"supfact\">status</span> <= Number &&\n       on_exit((void (*)(int, void *)) * (&func_table + <span class=\"supfact\">v4</span>),\n               (void *)<span class=\"supfact\">status</span>) >= Number;\n       ++<span class=\"supfact\">status</span>) {\n    printf(String, (unsigned int)<span class=\"supfact\">v4</span>);\n    <span class=\"supfact\">v4</span> = (<span class=\"supfact\">v4</span> + Number) % Number;\n  }\n  printf(String, (unsigned int)<span class=\"supfact\">status</span>);\n  exit(<span class=\"supfact\">status</span>);\n}", "code_t": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  int <span class=\"supfact\">count</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">i</span> = Number;\n  for (<span class=\"supfact\">count</span> = Number;\n       <span class=\"supfact\">count</span> <= Number &&\n       on_exit(func_table[<span class=\"supfact\">i</span>], (void *)<span class=\"supfact\">count</span>) >=\n           Number;\n       ++<span class=\"supfact\">count</span>) {\n    printf(String, <span class=\"supfact\">i</span>);\n    <span class=\"supfact\">i</span> = (int)(<span class=\"supfact\">i</span> + Number) % Number;\n  }\n  printf(String, (unsigned int)<span class=\"supfact\">count</span>);\n  exit(<span class=\"supfact\">count</span>);\n}", "var": [{"name": "v4", "type": "int", "ref_name": "i", "ref_type": "unsigned int"}, {"name": "status", "type": "int", "ref_name": "count", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "pathscale", "repo_name": "nvopencc", "path": "pathscale/nvopencc/cb6162c950040c355c63ad1bfdd5b3766aa1ff4e03b042377b837511fa3a0bc7", "path_in_repo": "pathscale/nvopencc/src/targia3264_nvisa_rel/gccfe/gnu/cppmacro.o", "objdump": "000000000000121d <funlike_invocation_p>:\n    121d:\t55                   \tpush   %rbp\n    121e:\t48 89 e5             \tmov    %rsp,%rbp\n    1221:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1225:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1229:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    122d:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    1234:\t00 \n    1235:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1239:\t48 89 c7             \tmov    %rax,%rdi\n    123c:\te8 00 00 00 00       \tcallq  1241 <funlike_invocation_p+0x24>\n    1241:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1245:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1249:\t0f b6 40 06          \tmovzbl 0x6(%rax),%eax\n    124d:\t3c 43                \tcmp    $0x43,%al\n    124f:\t75 30                \tjne    1281 <funlike_invocation_p+0x64>\n    1251:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    1256:\t74 1f                \tje     1277 <funlike_invocation_p+0x5a>\n    1258:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    125c:\t0f b6 40 07          \tmovzbl 0x7(%rax),%eax\n    1260:\t0f b6 c0             \tmovzbl %al,%eax\n    1263:\t83 e0 01             \tand    $0x1,%eax\n    1266:\t85 c0                \ttest   %eax,%eax\n    1268:\t75 cb                \tjne    1235 <funlike_invocation_p+0x18>\n    126a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    126e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1272:\t48 85 c0             \ttest   %rax,%rax\n    1275:\t75 be                \tjne    1235 <funlike_invocation_p+0x18>\n    1277:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    127b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    127f:\teb b4                \tjmp    1235 <funlike_invocation_p+0x18>\n    1281:\t90                   \tnop\n    1282:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1286:\t0f b6 40 06          \tmovzbl 0x6(%rax),%eax\n    128a:\t3c 16                \tcmp    $0x16,%al\n    128c:\t75 1d                \tjne    12ab <funlike_invocation_p+0x8e>\n    128e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1292:\tc6 40 1a 02          \tmovb   $0x2,0x1a(%rax)\n    1296:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    129a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    129e:\t48 89 d6             \tmov    %rdx,%rsi\n    12a1:\t48 89 c7             \tmov    %rax,%rdi\n    12a4:\te8 83 fb ff ff       \tcallq  e2c <collect_args>\n    12a9:\teb 53                \tjmp    12fe <funlike_invocation_p+0xe1>\n    12ab:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    12af:\t0f b6 40 06          \tmovzbl 0x6(%rax),%eax\n    12b3:\t3c 18                \tcmp    $0x18,%al\n    12b5:\t75 10                \tjne    12c7 <funlike_invocation_p+0xaa>\n    12b7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12bb:\t48 05 58 01 00 00    \tadd    $0x158,%rax\n    12c1:\t48 39 45 f0          \tcmp    %rax,-0x10(%rbp)\n    12c5:\t75 32                \tjne    12f9 <funlike_invocation_p+0xdc>\n    12c7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12cb:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    12d0:\t48 89 c7             \tmov    %rax,%rdi\n    12d3:\te8 00 00 00 00       \tcallq  12d8 <funlike_invocation_p+0xbb>\n    12d8:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    12dd:\t74 1a                \tje     12f9 <funlike_invocation_p+0xdc>\n    12df:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    12e3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12e7:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    12ec:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    12f1:\t48 89 c7             \tmov    %rax,%rdi\n    12f4:\te8 5d 08 00 00       \tcallq  1b56 <push_token_context>\n    12f9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12fe:\tc9                   \tleaveq \n    12ff:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall funlike_invocation_p(__int64 a1, const char **a2) {\n  _QWORD *result;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Number L;\n  while (Number) {\n    <span class=\"supfact\">v3</span> = cpp_get_token(a1);\n    if (*(_BYTE *)(<span class=\"supfact\">v3</span> + Number) != Number)\n      break;\n    if (!<span class=\"supfact\">v4</span> ||\n        (*(_BYTE *)(<span class=\"supfact\">v4</span> + Number) & Number) == Number &&\n            !*(_QWORD *)(<span class=\"supfact\">v3</span> + Number))\n      <span class=\"supfact\">v4</span> = <span class=\"supfact\">v3</span>;\n  }\n  if (*(_BYTE *)(<span class=\"supfact\">v3</span> + Number) == Number) {\n    *(_BYTE *)(a1 + Number) = Number;\n    result = collect_args(a1, a2);\n  } else {\n    if (*(_BYTE *)(<span class=\"supfact\">v3</span> + Number) != Number ||\n        <span class=\"supfact\">v3</span> == a1 + Number) {\n      cpp_backup_tokens(a1, Number L);\n      if (<span class=\"supfact\">v4</span>)\n        push_token_context(a1, Number L, <span class=\"supfact\">v4</span>, Number L);\n    }\n    result = Number L;\n  }\n  return result;\n}", "code_t": "_cpp_buff_0 *__cdecl funlike_invocation_p(cpp_reader_0 *pfile,\n                                          cpp_hashnode_0 *node) {\n  _cpp_buff_0 *result;\n  const cpp_token_0 *<span class=\"supfact\">token</span>;\n  const cpp_token_0 *<span class=\"supfact\">padding</span>;\n  <span class=\"supfact\">padding</span> = Number L;\n  while (Number) {\n    <span class=\"supfact\">token</span> = cpp_get_token(pfile);\n    if (*((_BYTE *)<span class=\"supfact\">token</span> + Number) != Number)\n      break;\n    if (!<span class=\"supfact\">padding</span> ||\n        (<span class=\"supfact\">padding</span>->flags & Number) == Number &&\n            !<span class=\"supfact\">token</span>->val.node)\n      <span class=\"supfact\">padding</span> = <span class=\"supfact\">token</span>;\n  }\n  if (*((_BYTE *)<span class=\"supfact\">token</span> + Number) == Number) {\n    pfile->state.parsing_args = Number;\n    result = collect_args(pfile, node);\n  } else {\n    if (*((_BYTE *)<span class=\"supfact\">token</span> + Number) != Number ||\n        <span class=\"supfact\">token</span> == &pfile->eof) {\n      cpp_backup_tokens(pfile, Number);\n      if (<span class=\"supfact\">padding</span>)\n        push_token_context(pfile, Number L, <span class=\"supfact\">padding</span>, Number);\n    }\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "const cpp_token_0 *", "ref_name": "padding", "ref_type": "const cpp_token_0 *"}, {"name": "v3", "type": "const cpp_token_0 *", "ref_name": "token", "ref_type": "const cpp_token_0 *"}], "body_in_train": false}, {"repo_owner": "wipple", "repo_name": "GPAC-old", "path": "wipple/GPAC-old/eb320d930f3ea659be55b0daa08568470d4b45062017967128dabdd9aa03cc24", "path_in_repo": "wipple/GPAC-old/src/terminal/input_sensor.o", "objdump": "00000000000010e7 <gf_isdec_new>:\n    10e7:\t55                   \tpush   %rbp\n    10e8:\t48 89 e5             \tmov    %rsp,%rbp\n    10eb:\t48 83 ec 20          \tsub    $0x20,%rsp\n    10ef:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    10f3:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    10f6:\tbf 70 00 00 00       \tmov    $0x70,%edi\n    10fb:\te8 00 00 00 00       \tcallq  1100 <gf_isdec_new+0x19>\n    1100:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1104:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    1109:\t75 0a                \tjne    1115 <gf_isdec_new+0x2e>\n    110b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1110:\te9 ed 00 00 00       \tjmpq   1202 <gf_isdec_new+0x11b>\n    1115:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1119:\tba 70 00 00 00       \tmov    $0x70,%edx\n    111e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1123:\t48 89 c7             \tmov    %rax,%rdi\n    1126:\te8 00 00 00 00       \tcallq  112b <gf_isdec_new+0x44>\n    112b:\tbf 48 27 00 00       \tmov    $0x2748,%edi\n    1130:\te8 00 00 00 00       \tcallq  1135 <gf_isdec_new+0x4e>\n    1135:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1139:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    113d:\tba 48 27 00 00       \tmov    $0x2748,%edx\n    1142:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1147:\t48 89 c7             \tmov    %rax,%rdi\n    114a:\te8 00 00 00 00       \tcallq  114f <gf_isdec_new+0x68>\n    114f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1154:\te8 00 00 00 00       \tcallq  1159 <gf_isdec_new+0x72>\n    1159:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    115d:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n    1161:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1166:\te8 00 00 00 00       \tcallq  116b <gf_isdec_new+0x84>\n    116b:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    116f:\t48 89 42 18          \tmov    %rax,0x18(%rdx)\n    1173:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1177:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    117b:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n    117f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1183:\t48 8d 15 a1 f0 ff ff \tlea    -0xf5f(%rip),%rdx        # 22b <IS_AttachStream>\n    118a:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n    118e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1192:\t48 8d 15 97 f5 ff ff \tlea    -0xa69(%rip),%rdx        # 730 <IS_DetachStream>\n    1199:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n    119d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11a1:\t48 8d 15 b3 f5 ff ff \tlea    -0xa4d(%rip),%rdx        # 75b <IS_GetCapabilities>\n    11a8:\t48 89 50 30          \tmov    %rdx,0x30(%rax)\n    11ac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11b0:\t48 8d 15 c2 f5 ff ff \tlea    -0xa3e(%rip),%rdx        # 779 <IS_SetCapabilities>\n    11b7:\t48 89 50 38          \tmov    %rdx,0x38(%rax)\n    11bb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11bf:\t48 8d 15 c6 f5 ff ff \tlea    -0xa3a(%rip),%rdx        # 78c <IS_ProcessData>\n    11c6:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n    11ca:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11ce:\t48 c7 40 60 00 00 00 \tmovq   $0x0,0x60(%rax)\n    11d5:\t00 \n    11d6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11da:\tc7 00 33 44 53 47    \tmovl   $0x47534433,(%rax)\n    11e0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11e4:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 11eb <gf_isdec_new+0x104>\n    11eb:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    11ef:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11f3:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 11fa <gf_isdec_new+0x113>\n    11fa:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    11fe:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1202:\tc9                   \tleaveq \n    1203:\tc3                   \tretq   ", "code_s": "_QWORD *gf_isdec_new() {\n  _QWORD *v1;\n  _QWORD *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = malloc(Number);\n  if (!<span class=\"supfact\">s</span>)\n    return Number L;\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  v1 = malloc(Number);\n  memset(v1, Number, Number);\n  v1[Number] = gf_list_new();\n  v1[Number] = gf_list_new();\n  <span class=\"supfact\">s</span>[Number] = v1;\n  <span class=\"supfact\">s</span>[Number] = IS_AttachStream;\n  <span class=\"supfact\">s</span>[Number] = IS_DetachStream;\n  <span class=\"supfact\">s</span>[Number] = IS_GetCapabilities;\n  <span class=\"supfact\">s</span>[Number] = IS_SetCapabilities;\n  <span class=\"supfact\">s</span>[Number] = IS_ProcessData;\n  <span class=\"supfact\">s</span>[Number] = Number L;\n  *(_DWORD *)<span class=\"supfact\">s</span> = Number;\n  <span class=\"supfact\">s</span>[Number] = String;\n  <span class=\"supfact\">s</span>[Number] = String;\n  return <span class=\"supfact\">s</span>;\n}", "code_t": "GF_BaseDecoder *__cdecl gf_isdec_new(GF_ESD *esd, u32 PL) {\n  _QWORD *v3;\n  GF_SceneDecoder *<span class=\"supfact\">tmp</span>;\n  <span class=\"supfact\">tmp</span> = (GF_SceneDecoder *)malloc(Number);\n  if (!<span class=\"supfact\">tmp</span>)\n    return Number L;\n  memset(<span class=\"supfact\">tmp</span>, Number, sizeof(GF_SceneDecoder));\n  v3 = malloc(Number);\n  memset(v3, Number, Number);\n  v3[Number] = gf_list_new();\n  v3[Number] = gf_list_new();\n  <span class=\"supfact\">tmp</span>->privateStack = v3;\n  <span class=\"supfact\">tmp</span>->AttachStream =\n      (GF_Err(*)(_basedecoder *, GF_ESD *))IS_AttachStream;\n  <span class=\"supfact\">tmp</span>->DetachStream =\n      (GF_Err(*)(_basedecoder *, u16))IS_DetachStream;\n  <span class=\"supfact\">tmp</span>->GetCapabilities =\n      (GF_Err(*)(_basedecoder *, GF_CodecCapability *))IS_GetCapabilities;\n  <span class=\"supfact\">tmp</span>->SetCapabilities =\n      (GF_Err(*)(_basedecoder *, GF_CodecCapability))IS_SetCapabilities;\n  <span class=\"supfact\">tmp</span>->ProcessData = (GF_Err(*)(\n      _scenedecoder *, const char *, u32, u16, u32, u32))IS_ProcessData;\n  <span class=\"supfact\">tmp</span>->AttachScene = Number L;\n  <span class=\"supfact\">tmp</span>->InterfaceType = Number;\n  <span class=\"supfact\">tmp</span>->module_name = String;\n  <span class=\"supfact\">tmp</span>->author_name = String;\n  return (GF_BaseDecoder *)<span class=\"supfact\">tmp</span>;\n}", "var": [{"name": "s", "type": "__unk__", "ref_name": "tmp", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "stamourv", "repo_name": "picobit", "path": "stamourv/picobit/35dd3ecaf725029feb90acc7aaa5f2190edc40d6c1b30e6779ca0d1a56f1ad85", "path_in_repo": "stamourv/picobit/vm/picobit-vm", "objdump": "000000000040343a <gc>:\n  40343a:\t55                   \tpush   %rbp\n  40343b:\t48 89 e5             \tmov    %rsp,%rbp\n  40343e:\t48 83 ec 10          \tsub    $0x10,%rsp\n  403442:\t0f b7 05 7b 98 01 00 \tmovzwl 0x1987b(%rip),%eax        # 41ccc4 <arg1>\n  403449:\t0f b7 c0             \tmovzwl %ax,%eax\n  40344c:\t89 c7                \tmov    %eax,%edi\n  40344e:\te8 8b f9 ff ff       \tcallq  402dde <mark>\n  403453:\t0f b7 05 7c 98 01 00 \tmovzwl 0x1987c(%rip),%eax        # 41ccd6 <arg2>\n  40345a:\t0f b7 c0             \tmovzwl %ax,%eax\n  40345d:\t89 c7                \tmov    %eax,%edi\n  40345f:\te8 7a f9 ff ff       \tcallq  402dde <mark>\n  403464:\t0f b7 05 5b 98 01 00 \tmovzwl 0x1985b(%rip),%eax        # 41ccc6 <arg3>\n  40346b:\t0f b7 c0             \tmovzwl %ax,%eax\n  40346e:\t89 c7                \tmov    %eax,%edi\n  403470:\te8 69 f9 ff ff       \tcallq  402dde <mark>\n  403475:\t0f b7 05 58 98 01 00 \tmovzwl 0x19858(%rip),%eax        # 41ccd4 <arg4>\n  40347c:\t0f b7 c0             \tmovzwl %ax,%eax\n  40347f:\t89 c7                \tmov    %eax,%edi\n  403481:\te8 58 f9 ff ff       \tcallq  402dde <mark>\n  403486:\t0f b7 05 3b 98 01 00 \tmovzwl 0x1983b(%rip),%eax        # 41ccc8 <cont>\n  40348d:\t0f b7 c0             \tmovzwl %ax,%eax\n  403490:\t89 c7                \tmov    %eax,%edi\n  403492:\te8 47 f9 ff ff       \tcallq  402dde <mark>\n  403497:\t0f b7 05 32 98 01 00 \tmovzwl 0x19832(%rip),%eax        # 41ccd0 <env>\n  40349e:\t0f b7 c0             \tmovzwl %ax,%eax\n  4034a1:\t89 c7                \tmov    %eax,%edi\n  4034a3:\te8 36 f9 ff ff       \tcallq  402dde <mark>\n  4034a8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4034ad:\te8 6c 19 00 00       \tcallq  404e1e <bignum_gc_mark>\n  4034b2:\tc6 45 ff 00          \tmovb   $0x0,-0x1(%rbp)\n  4034b6:\teb 1f                \tjmp    4034d7 <gc+0x9d>\n  4034b8:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n  4034bc:\t89 c7                \tmov    %eax,%edi\n  4034be:\te8 1d f7 ff ff       \tcallq  402be0 <get_global>\n  4034c3:\t0f b7 c0             \tmovzwl %ax,%eax\n  4034c6:\t89 c7                \tmov    %eax,%edi\n  4034c8:\te8 11 f9 ff ff       \tcallq  402dde <mark>\n  4034cd:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n  4034d1:\t83 c0 01             \tadd    $0x1,%eax\n  4034d4:\t88 45 ff             \tmov    %al,-0x1(%rbp)\n  4034d7:\t0f b6 05 f4 97 01 00 \tmovzbl 0x197f4(%rip),%eax        # 41ccd2 <glovars>\n  4034de:\t38 45 ff             \tcmp    %al,-0x1(%rbp)\n  4034e1:\t72 d5                \tjb     4034b8 <gc+0x7e>\n  4034e3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4034e8:\te8 5a fd ff ff       \tcallq  403247 <sweep>\n  4034ed:\t90                   \tnop\n  4034ee:\tc9                   \tleaveq \n  4034ef:\tc3                   \tretq   ", "code_s": "__int64 gc() {\n  unsigned int v0;\n  unsigned __int8 <span class=\"supfact\">i</span>;\n  mark((unsigned __int16)arg1);\n  mark((unsigned __int16)arg2);\n  mark((unsigned __int16)arg3);\n  mark((unsigned __int16)arg4);\n  mark((unsigned __int16)cont);\n  mark((unsigned __int16)env);\n  bignum_gc_mark();\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < (unsigned __int8)glovars;\n       ++<span class=\"supfact\">i</span>) {\n    v0 = (unsigned __int16)get_global(<span class=\"supfact\">i</span>);\n    mark(v0);\n  }\n  return sweep();\n}", "code_t": "void __cdecl gc() {\n  obj v0;\n  uint8 <span class=\"supfact\">i</span>;\n  mark(arg1);\n  mark(arg2);\n  mark(arg3);\n  mark(arg4);\n  mark(cont);\n  mark(env);\n  bignum_gc_mark();\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < glovars;\n       ++<span class=\"supfact\">i</span>) {\n    v0 = get_global(<span class=\"supfact\">i</span>);\n    mark(v0);\n  }\n  sweep();\n}", "var": [{"name": "i", "type": "unsigned __int8", "ref_name": "i", "ref_type": "uint8"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/167d712463e0992729e10389549ca204bb5a890bb1dd0460101cee04a39115ca", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_f2.o", "objdump": "0000000000011c88 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring>:\n   11c88:\t55                   \tpush   %rbp\n   11c89:\t48 89 e5             \tmov    %rsp,%rbp\n   11c8c:\t53                   \tpush   %rbx\n   11c8d:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n   11c94:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n   11c98:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n   11c9c:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n   11ca3:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   11ca7:\t48 89 c7             \tmov    %rax,%rdi\n   11caa:\te8 00 00 00 00       \tcallq  11caf <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n   11caf:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11cb6:\t00 \n   11cb7:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   11cbe:\t00 \n   11cbf:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n   11cc6:\t00 \n   11cc7:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   11cce:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n   11cd5:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n   11cd9:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   11cdd:\t48 89 ce             \tmov    %rcx,%rsi\n   11ce0:\t48 89 c7             \tmov    %rax,%rdi\n   11ce3:\te8 d0 eb ff ff       \tcallq  108b8 <_ZL22construct_ioport_growlR8device_tR11tagged_listI17input_port_configER7astring>\n   11ce8:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n   11cec:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n   11cf0:\tba 00 00 00 00       \tmov    $0x0,%edx\n   11cf5:\t48 89 ce             \tmov    %rcx,%rsi\n   11cf8:\t48 89 c7             \tmov    %rax,%rdi\n   11cfb:\te8 00 00 00 00       \tcallq  11d00 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x78>\n   11d00:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   11d04:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   11d0b:\t00 \n   11d0c:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11d13:\t00 \n   11d14:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   11d1b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   11d1f:\t41 b8 0a 00 00 00    \tmov    $0xa,%r8d\n   11d25:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n   11d2a:\tba 30 00 00 00       \tmov    $0x30,%edx\n   11d2f:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   11d34:\t48 89 c7             \tmov    %rax,%rdi\n   11d37:\te8 00 00 00 00       \tcallq  11d3c <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0xb4>\n   11d3c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   11d40:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11d47:\t00 \n   11d48:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11d4c:\tba 12 00 00 00       \tmov    $0x12,%edx\n   11d51:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   11d56:\t48 89 c7             \tmov    %rax,%rdi\n   11d59:\te8 00 00 00 00       \tcallq  11d5e <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0xd6>\n   11d5e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11d62:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11d66:\t8b 00                \tmov    (%rax),%eax\n   11d68:\t83 e0 10             \tand    $0x10,%eax\n   11d6b:\t89 c1                \tmov    %eax,%ecx\n   11d6d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11d71:\tba 15 00 00 00       \tmov    $0x15,%edx\n   11d76:\t89 ce                \tmov    %ecx,%esi\n   11d78:\t48 89 c7             \tmov    %rax,%rdi\n   11d7b:\te8 00 00 00 00       \tcallq  11d80 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0xf8>\n   11d80:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11d84:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11d88:\t8b 00                \tmov    (%rax),%eax\n   11d8a:\t83 e0 30             \tand    $0x30,%eax\n   11d8d:\t89 c1                \tmov    %eax,%ecx\n   11d8f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11d93:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n   11d98:\t89 ce                \tmov    %ecx,%esi\n   11d9a:\t48 89 c7             \tmov    %rax,%rdi\n   11d9d:\te8 00 00 00 00       \tcallq  11da2 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x11a>\n   11da2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11da6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11daa:\t8b 00                \tmov    (%rax),%eax\n   11dac:\t83 e0 20             \tand    $0x20,%eax\n   11daf:\t89 c1                \tmov    %eax,%ecx\n   11db1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11db5:\tba 22 00 00 00       \tmov    $0x22,%edx\n   11dba:\t89 ce                \tmov    %ecx,%esi\n   11dbc:\t48 89 c7             \tmov    %rax,%rdi\n   11dbf:\te8 00 00 00 00       \tcallq  11dc4 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x13c>\n   11dc4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11dc8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   11dcc:\t41 b8 0b 00 00 00    \tmov    $0xb,%r8d\n   11dd2:\tb9 c0 00 00 00       \tmov    $0xc0,%ecx\n   11dd7:\tba c0 00 00 00       \tmov    $0xc0,%edx\n   11ddc:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   11de1:\t48 89 c7             \tmov    %rax,%rdi\n   11de4:\te8 00 00 00 00       \tcallq  11de9 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x161>\n   11de9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   11ded:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   11df4:\t00 \n   11df5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11df9:\tba 12 00 00 00       \tmov    $0x12,%edx\n   11dfe:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   11e03:\t48 89 c7             \tmov    %rax,%rdi\n   11e06:\te8 00 00 00 00       \tcallq  11e0b <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x183>\n   11e0b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11e0f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11e13:\t8b 00                \tmov    (%rax),%eax\n   11e15:\t83 e0 40             \tand    $0x40,%eax\n   11e18:\t89 c1                \tmov    %eax,%ecx\n   11e1a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11e1e:\tba 15 00 00 00       \tmov    $0x15,%edx\n   11e23:\t89 ce                \tmov    %ecx,%esi\n   11e25:\t48 89 c7             \tmov    %rax,%rdi\n   11e28:\te8 00 00 00 00       \tcallq  11e2d <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x1a5>\n   11e2d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11e31:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11e35:\t8b 00                \tmov    (%rax),%eax\n   11e37:\t25 c0 00 00 00       \tand    $0xc0,%eax\n   11e3c:\t89 c1                \tmov    %eax,%ecx\n   11e3e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11e42:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n   11e47:\t89 ce                \tmov    %ecx,%esi\n   11e49:\t48 89 c7             \tmov    %rax,%rdi\n   11e4c:\te8 00 00 00 00       \tcallq  11e51 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x1c9>\n   11e51:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11e55:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11e59:\t8b 00                \tmov    (%rax),%eax\n   11e5b:\t25 80 00 00 00       \tand    $0x80,%eax\n   11e60:\t89 c1                \tmov    %eax,%ecx\n   11e62:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   11e66:\tba 22 00 00 00       \tmov    $0x22,%edx\n   11e6b:\t89 ce                \tmov    %ecx,%esi\n   11e6d:\t48 89 c7             \tmov    %rax,%rdi\n   11e70:\te8 00 00 00 00       \tcallq  11e75 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x1ed>\n   11e75:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   11e79:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   11e7d:\t48 89 c7             \tmov    %rax,%rdi\n   11e80:\te8 00 00 00 00       \tcallq  11e85 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x1fd>\n   11e85:\teb 1a                \tjmp    11ea1 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n   11e87:\t48 89 c3             \tmov    %rax,%rbx\n   11e8a:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   11e8e:\t48 89 c7             \tmov    %rax,%rdi\n   11e91:\te8 00 00 00 00       \tcallq  11e96 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x20e>\n   11e96:\t48 89 d8             \tmov    %rbx,%rax\n   11e99:\t48 89 c7             \tmov    %rax,%rdi\n   11e9c:\te8 00 00 00 00       \tcallq  11ea1 <_ZL23construct_ioport_runarkR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n   11ea1:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n   11ea8:\t5b                   \tpop    %rbx\n   11ea9:\t5d                   \tpop    %rbp\n   11eaa:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_runark(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  _DWORD *<span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v6</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  construct_ioport_growl(a1, a2, a3);\n  <span class=\"supfact\">v6</span> = ioconfig_modify_port(a2, a1, String);\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">v7</span> = (_DWORD *)ioconfig_alloc_field(\n      <span class=\"supfact\">v6</span>, Number L, Number L, Number L, Number L);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v8</span> =\n      ioconfig_alloc_setting(<span class=\"supfact\">v7</span>, Number L, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v7</span> = (_DWORD *)ioconfig_alloc_field(\n      <span class=\"supfact\">v6</span>, Number L, Number L, Number L, Number L);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v8</span> =\n      ioconfig_alloc_setting(<span class=\"supfact\">v7</span>, Number L, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl construct_ioport_runark(device_t *owner, ioport_list *portlist,\n                                     astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value <span class=\"supfact\">maskbits</span>;\n  input_port_config *<span class=\"supfact\">curport</span>;\n  input_field_config *<span class=\"supfact\">curfield</span>;\n  input_setting_config *<span class=\"supfact\">cursetting</span>;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">curfield</span> = Number L;\n  <span class=\"supfact\">curport</span> = Number L;\n  <span class=\"supfact\">maskbits</span> = Number;\n  construct_ioport_growl(owner, portlist, errorbuf);\n  <span class=\"supfact\">curport</span> =\n      (input_port_config *)ioconfig_modify_port(portlist, owner, String);\n  <span class=\"supfact\">curfield</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">maskbits</span> = Number;\n  <span class=\"supfact\">curfield</span> = (input_field_config *)ioconfig_alloc_field(\n      <span class=\"supfact\">curport</span>, Number, Number, Number,\n      (const char *)&loc_8 + Number);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, Number, (const char *)&loc_10 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_14 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_1A + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_21 + Number);\n  <span class=\"supfact\">curfield</span> = (input_field_config *)ioconfig_alloc_field(\n      <span class=\"supfact\">curport</span>, Number, Number, Number,\n      (const char *)&loc_8 + Number);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, Number, (const char *)&loc_10 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_14 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_1A + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_21 + Number);\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v8", "type": "input_setting_config *", "ref_name": "cursetting", "ref_type": "input_setting_config *"}, {"name": "v7", "type": "input_field_config *", "ref_name": "curfield", "ref_type": "input_field_config *"}, {"name": "v6", "type": "input_port_config *", "ref_name": "curport", "ref_type": "input_port_config *"}, {"name": "v5", "type": "input_port_value", "ref_name": "maskbits", "ref_type": "input_port_value"}, {"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "vgmrips", "repo_name": "vgmplay", "path": "vgmrips/vgmplay/f6a47779b6f58b9cba03105c7b94c7d9d4c75dcf2aa895dde4ea38d0468150e7", "path_in_repo": "vgmrips/vgmplay/VGMPlay/obj/VGMPlay.o", "objdump": "00000000000026e7 <CalcSampleMSec>:\n    26e7:\t55                   \tpush   %rbp\n    26e8:\t48 89 e5             \tmov    %rsp,%rbp\n    26eb:\t48 83 ec 20          \tsub    $0x20,%rsp\n    26ef:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    26f3:\t89 f0                \tmov    %esi,%eax\n    26f5:\t88 45 e4             \tmov    %al,-0x1c(%rbp)\n    26f8:\t0f b6 45 e4          \tmovzbl -0x1c(%rbp),%eax\n    26fc:\t83 e0 02             \tand    $0x2,%eax\n    26ff:\t85 c0                \ttest   %eax,%eax\n    2701:\t75 19                \tjne    271c <CalcSampleMSec+0x35>\n    2703:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2709 <CalcSampleMSec+0x22>\n    2709:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    270c:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n    2713:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n    271a:\teb 1b                \tjmp    2737 <CalcSampleMSec+0x50>\n    271c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2722 <CalcSampleMSec+0x3b>\n    2722:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    2725:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 272b <CalcSampleMSec+0x44>\n    272b:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    272e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2734 <CalcSampleMSec+0x4d>\n    2734:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    2737:\t0f b6 45 e4          \tmovzbl -0x1c(%rbp),%eax\n    273b:\t83 e0 01             \tand    $0x1,%eax\n    273e:\t85 c0                \ttest   %eax,%eax\n    2740:\t74 07                \tje     2749 <CalcSampleMSec+0x62>\n    2742:\t83 f8 01             \tcmp    $0x1,%eax\n    2745:\t74 2a                \tje     2771 <CalcSampleMSec+0x8a>\n    2747:\teb 4f                \tjmp    2798 <CalcSampleMSec+0xb1>\n    2749:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    274c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    274f:\t48 0f af d0          \timul   %rax,%rdx\n    2753:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    2756:\t48 69 c8 e8 03 00 00 \timul   $0x3e8,%rax,%rcx\n    275d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2761:\t48 89 ce             \tmov    %rcx,%rsi\n    2764:\t48 89 c7             \tmov    %rax,%rdi\n    2767:\te8 4d ff ff ff       \tcallq  26b9 <MulDivRound>\n    276c:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    276f:\teb 27                \tjmp    2798 <CalcSampleMSec+0xb1>\n    2771:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    2774:\t48 69 d0 e8 03 00 00 \timul   $0x3e8,%rax,%rdx\n    277b:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n    277e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    2781:\t48 0f af c8          \timul   %rax,%rcx\n    2785:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2789:\t48 89 ce             \tmov    %rcx,%rsi\n    278c:\t48 89 c7             \tmov    %rax,%rdi\n    278f:\te8 25 ff ff ff       \tcallq  26b9 <MulDivRound>\n    2794:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    2797:\t90                   \tnop\n    2798:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    279b:\tc9                   \tleaveq \n    279c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall CalcSampleMSec(__int64 a1, char a2) {\n  unsigned int <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  unsigned int <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  if ((a2 & Number) != Number) {\n    <span class=\"supfact\">v6</span> = VGMSampleRate;\n    <span class=\"supfact\">v5</span> = VGMPbRateMul;\n    <span class=\"supfact\">v4</span> = VGMPbRateDiv;\n  } else {\n    <span class=\"supfact\">v6</span> = SampleRate;\n    <span class=\"supfact\">v5</span> = Number;\n    <span class=\"supfact\">v4</span> = Number;\n  }\n  if ((a2 & Number) == Number)\n    return (unsigned int)MulDivRound(a1, Number L * <span class=\"supfact\">v5</span>,\n                                     <span class=\"supfact\">v4</span> *\n                                         (unsigned __int64)<span class=\"supfact\">v6</span>);\n  if ((a2 & Number) == Number)\n    <span class=\"supfact\">v3</span> = MulDivRound(\n        a1, <span class=\"supfact\">v4</span> * (unsigned __int64)<span class=\"supfact\">v6</span>,\n        Number L * <span class=\"supfact\">v5</span>);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "UINT32 __cdecl CalcSampleMSec(UINT64 Value, UINT8 Mode) {\n  UINT32 <span class=\"supfact\">RetVal</span>;\n  UINT32 <span class=\"supfact\">PbDiv</span>;\n  UINT32 <span class=\"supfact\">PbMul</span>;\n  UINT32 <span class=\"supfact\">SmplRate</span>;\n  if ((Mode & Number) != Number) {\n    <span class=\"supfact\">SmplRate</span> = VGMSampleRate;\n    <span class=\"supfact\">PbMul</span> = VGMPbRateMul;\n    <span class=\"supfact\">PbDiv</span> = VGMPbRateDiv;\n  } else {\n    <span class=\"supfact\">SmplRate</span> = SampleRate;\n    <span class=\"supfact\">PbMul</span> = Number;\n    <span class=\"supfact\">PbDiv</span> = Number;\n  }\n  if ((Mode & Number) == Number)\n    return MulDivRound(Value, Number L * <span class=\"supfact\">PbMul</span>,\n                       <span class=\"supfact\">PbDiv</span> *\n                           (unsigned __int64)<span class=\"supfact\">SmplRate</span>);\n  if ((Mode & Number) == Number)\n    <span class=\"supfact\">RetVal</span> = MulDivRound(\n        Value,\n        <span class=\"supfact\">PbDiv</span> * (unsigned __int64)<span class=\"supfact\">SmplRate</span>,\n        Number L * <span class=\"supfact\">PbMul</span>);\n  return <span class=\"supfact\">RetVal</span>;\n}", "var": [{"name": "v6", "type": "int", "ref_name": "SmplRate", "ref_type": "UINT32"}, {"name": "v5", "type": "int", "ref_name": "PbMul", "ref_type": "UINT32"}, {"name": "v4", "type": "int", "ref_name": "PbDiv", "ref_type": "UINT32"}, {"name": "v3", "type": "int", "ref_name": "RetVal", "ref_type": "UINT32"}], "body_in_train": false}, {"repo_owner": "zturtleman", "repo_name": "mint-helix", "path": "zturtleman/mint-helix/eabf158a14e6685634137616cba4efb05e83a262eb6c6239aceed51bd79ac5cf", "path_in_repo": "zturtleman/mint-helix//build/release-linux-x86_64/basejk2/cgame/cg_main.o", "objdump": "00000000000048b1 <CG_VoIPString>:\n    48b1:\t55                   \tpush   %rbp\n    48b2:\t48 89 e5             \tmov    %rsp,%rbp\n    48b5:\t48 81 ec 20 01 00 00 \tsub    $0x120,%rsp\n    48bc:\t89 bd ec fe ff ff    \tmov    %edi,-0x114(%rbp)\n    48c2:\t83 bd ec fe ff ff 00 \tcmpl   $0x0,-0x114(%rbp)\n    48c9:\t78 2b                \tjs     48f6 <CG_VoIPString+0x45>\n    48cb:\te8 00 00 00 00       \tcallq  48d0 <CG_VoIPString+0x1f>\n    48d0:\t39 85 ec fe ff ff    \tcmp    %eax,-0x114(%rbp)\n    48d6:\t7f 1e                \tjg     48f6 <CG_VoIPString+0x45>\n    48d8:\t8b 85 ec fe ff ff    \tmov    -0x114(%rbp),%eax\n    48de:\t48 98                \tcltq   \n    48e0:\t48 69 c0 c8 17 00 00 \timul   $0x17c8,%rax,%rax\n    48e7:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 48ee <CG_VoIPString+0x3d>\n    48ee:\t8b 04 10             \tmov    (%rax,%rdx,1),%eax\n    48f1:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    48f4:\t75 0a                \tjne    4900 <CG_VoIPString+0x4f>\n    48f6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    48fb:\te9 4c 02 00 00       \tjmpq   4b4c <CG_VoIPString+0x29b>\n    4900:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    4907:\tba 00 01 00 00       \tmov    $0x100,%edx\n    490c:\t48 89 c6             \tmov    %rax,%rsi\n    490f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4914:\te8 00 00 00 00       \tcallq  4919 <CG_VoIPString+0x68>\n    4919:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    4920:\tba 04 00 00 00       \tmov    $0x4,%edx\n    4925:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 492c <CG_VoIPString+0x7b>\n    492c:\t48 89 c7             \tmov    %rax,%rdi\n    492f:\te8 00 00 00 00       \tcallq  4934 <CG_VoIPString+0x83>\n    4934:\t85 c0                \ttest   %eax,%eax\n    4936:\t0f 85 68 01 00 00    \tjne    4aa4 <CG_VoIPString+0x1f3>\n    493c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    4943:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    4946:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    4949:\te9 32 01 00 00       \tjmpq   4a80 <CG_VoIPString+0x1cf>\n    494e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    4951:\t48 63 d0             \tmovslq %eax,%rdx\n    4954:\t48 89 d0             \tmov    %rdx,%rax\n    4957:\t48 c1 e0 09          \tshl    $0x9,%rax\n    495b:\t48 29 d0             \tsub    %rdx,%rax\n    495e:\t48 c1 e0 02          \tshl    $0x2,%rax\n    4962:\t48 89 c2             \tmov    %rax,%rdx\n    4965:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 496c <CG_VoIPString+0xbb>\n    496c:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n    496f:\t85 c0                \ttest   %eax,%eax\n    4971:\t0f 84 01 01 00 00    \tje     4a78 <CG_VoIPString+0x1c7>\n    4977:\t8b 85 ec fe ff ff    \tmov    -0x114(%rbp),%eax\n    497d:\t48 98                \tcltq   \n    497f:\t48 69 c0 c8 17 00 00 \timul   $0x17c8,%rax,%rax\n    4986:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 498d <CG_VoIPString+0xdc>\n    498d:\t8b 04 10             \tmov    (%rax,%rdx,1),%eax\n    4990:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    4993:\t0f 84 df 00 00 00    \tje     4a78 <CG_VoIPString+0x1c7>\n    4999:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    499c:\t48 63 d0             \tmovslq %eax,%rdx\n    499f:\t48 89 d0             \tmov    %rdx,%rax\n    49a2:\t48 c1 e0 09          \tshl    $0x9,%rax\n    49a6:\t48 29 d0             \tsub    %rdx,%rax\n    49a9:\t48 c1 e0 02          \tshl    $0x2,%rax\n    49ad:\t48 89 c2             \tmov    %rax,%rdx\n    49b0:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 49b7 <CG_VoIPString+0x106>\n    49b7:\t8b 0c 02             \tmov    (%rdx,%rax,1),%ecx\n    49ba:\t8b 85 ec fe ff ff    \tmov    -0x114(%rbp),%eax\n    49c0:\t48 98                \tcltq   \n    49c2:\t48 69 c0 c8 17 00 00 \timul   $0x17c8,%rax,%rax\n    49c9:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 49d0 <CG_VoIPString+0x11f>\n    49d0:\t8b 04 10             \tmov    (%rax,%rdx,1),%eax\n    49d3:\t48 63 d0             \tmovslq %eax,%rdx\n    49d6:\t48 89 d0             \tmov    %rdx,%rax\n    49d9:\t48 c1 e0 09          \tshl    $0x9,%rax\n    49dd:\t48 29 d0             \tsub    %rdx,%rax\n    49e0:\t48 c1 e0 02          \tshl    $0x2,%rax\n    49e4:\t48 89 c2             \tmov    %rax,%rdx\n    49e7:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 49ee <CG_VoIPString+0x13d>\n    49ee:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n    49f1:\t39 c1                \tcmp    %eax,%ecx\n    49f3:\t0f 85 82 00 00 00    \tjne    4a7b <CG_VoIPString+0x1ca>\n    49f9:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n    49fd:\t7e 09                \tjle    4a08 <CG_VoIPString+0x157>\n    49ff:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 4a06 <CG_VoIPString+0x155>\n    4a06:\teb 07                \tjmp    4a0f <CG_VoIPString+0x15e>\n    4a08:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 4a0f <CG_VoIPString+0x15e>\n    4a0f:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    4a12:\tb9 00 01 00 00       \tmov    $0x100,%ecx\n    4a17:\t29 d1                \tsub    %edx,%ecx\n    4a19:\t89 ca                \tmov    %ecx,%edx\n    4a1b:\t89 d6                \tmov    %edx,%esi\n    4a1d:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    4a20:\t48 63 d2             \tmovslq %edx,%rdx\n    4a23:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 4a2a <CG_VoIPString+0x179>\n    4a2a:\t48 8d 3c 0a          \tlea    (%rdx,%rcx,1),%rdi\n    4a2e:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    4a31:\t41 89 d0             \tmov    %edx,%r8d\n    4a34:\t48 89 c1             \tmov    %rax,%rcx\n    4a37:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 4a3e <CG_VoIPString+0x18d>\n    4a3e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4a43:\te8 00 00 00 00       \tcallq  4a48 <CG_VoIPString+0x197>\n    4a48:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    4a4b:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    4a4e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4a51:\t01 d0                \tadd    %edx,%eax\n    4a53:\t83 c0 01             \tadd    $0x1,%eax\n    4a56:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n    4a5b:\t76 13                \tjbe    4a70 <CG_VoIPString+0x1bf>\n    4a5d:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4a64 <CG_VoIPString+0x1b3>\n    4a64:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4a69:\te8 00 00 00 00       \tcallq  4a6e <CG_VoIPString+0x1bd>\n    4a6e:\teb 1f                \tjmp    4a8f <CG_VoIPString+0x1de>\n    4a70:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4a73:\t01 45 f8             \tadd    %eax,-0x8(%rbp)\n    4a76:\teb 04                \tjmp    4a7c <CG_VoIPString+0x1cb>\n    4a78:\t90                   \tnop\n    4a79:\teb 01                \tjmp    4a7c <CG_VoIPString+0x1cb>\n    4a7b:\t90                   \tnop\n    4a7c:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    4a80:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4a86 <CG_VoIPString+0x1d5>\n    4a86:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    4a89:\t0f 8c bf fe ff ff    \tjl     494e <CG_VoIPString+0x9d>\n    4a8f:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    4a92:\t48 98                \tcltq   \n    4a94:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 4a9b <CG_VoIPString+0x1ea>\n    4a9b:\tc6 04 10 00          \tmovb   $0x0,(%rax,%rdx,1)\n    4a9f:\te9 a1 00 00 00       \tjmpq   4b45 <CG_VoIPString+0x294>\n    4aa4:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    4aab:\tba 09 00 00 00       \tmov    $0x9,%edx\n    4ab0:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4ab7 <CG_VoIPString+0x206>\n    4ab7:\t48 89 c7             \tmov    %rax,%rdi\n    4aba:\te8 00 00 00 00       \tcallq  4abf <CG_VoIPString+0x20e>\n    4abf:\t85 c0                \ttest   %eax,%eax\n    4ac1:\t75 2e                \tjne    4af1 <CG_VoIPString+0x240>\n    4ac3:\t8b 85 ec fe ff ff    \tmov    -0x114(%rbp),%eax\n    4ac9:\t89 c7                \tmov    %eax,%edi\n    4acb:\te8 00 00 00 00       \tcallq  4ad0 <CG_VoIPString+0x21f>\n    4ad0:\t89 c1                \tmov    %eax,%ecx\n    4ad2:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 4ad9 <CG_VoIPString+0x228>\n    4ad9:\tbe 00 01 00 00       \tmov    $0x100,%esi\n    4ade:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4ae5 <CG_VoIPString+0x234>\n    4ae5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4aea:\te8 00 00 00 00       \tcallq  4aef <CG_VoIPString+0x23e>\n    4aef:\teb 54                \tjmp    4b45 <CG_VoIPString+0x294>\n    4af1:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    4af8:\tba 08 00 00 00       \tmov    $0x8,%edx\n    4afd:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4b04 <CG_VoIPString+0x253>\n    4b04:\t48 89 c7             \tmov    %rax,%rdi\n    4b07:\te8 00 00 00 00       \tcallq  4b0c <CG_VoIPString+0x25b>\n    4b0c:\t85 c0                \ttest   %eax,%eax\n    4b0e:\t75 2e                \tjne    4b3e <CG_VoIPString+0x28d>\n    4b10:\t8b 85 ec fe ff ff    \tmov    -0x114(%rbp),%eax\n    4b16:\t89 c7                \tmov    %eax,%edi\n    4b18:\te8 00 00 00 00       \tcallq  4b1d <CG_VoIPString+0x26c>\n    4b1d:\t89 c1                \tmov    %eax,%ecx\n    4b1f:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 4b26 <CG_VoIPString+0x275>\n    4b26:\tbe 00 01 00 00       \tmov    $0x100,%esi\n    4b2b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4b32 <CG_VoIPString+0x281>\n    4b32:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4b37:\te8 00 00 00 00       \tcallq  4b3c <CG_VoIPString+0x28b>\n    4b3c:\teb 07                \tjmp    4b45 <CG_VoIPString+0x294>\n    4b3e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4b43:\teb 07                \tjmp    4b4c <CG_VoIPString+0x29b>\n    4b45:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 4b4c <CG_VoIPString+0x29b>\n    4b4c:\tc9                   \tleaveq \n    4b4d:\tc3                   \tretq   ", "code_s": "_BYTE *__fastcall CG_VoIPString(int a1) {\n  const char *v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  unsigned int v7;\n  unsigned int v8;\n  char <span class=\"supfact\">v9</span>[Number];\n  int <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">v11</span>;\n  unsigned int <span class=\"supfact\">v12</span>;\n  if (a1 < Number || a1 > (int)CG_MaxSplitView() ||\n      cg[Number * a1 + Number] == Number)\n    return Number L;\n  trap_Argv(Number L, <span class=\"supfact\">v9</span>, Number L);\n  if ((unsigned int)Q_stricmpn(<span class=\"supfact\">v9</span>, String, Number L)) {\n    if ((unsigned int)Q_stricmpn(<span class=\"supfact\">v9</span>, String, Number L)) {\n      if ((unsigned int)Q_stricmpn(<span class=\"supfact\">v9</span>, String, Number L))\n        return Number L;\n      v8 = CG_LastAttacker(a1);\n      Com_sprintf(voipString_9941, Number L, String, v8);\n    } else {\n      v7 = CG_CrosshairPlayer(a1);\n      Com_sprintf(voipString_9941, Number L, String, v7);\n    }\n  } else {\n    <span class=\"supfact\">v12</span> = Number;\n    <span class=\"supfact\">v11</span> = Number;\n    while ((signed int)<span class=\"supfact\">v12</span> < cgs[Number]) {\n      if (cgs[Number * <span class=\"supfact\">v12</span> + Number] &&\n          <span class=\"supfact\">v12</span> != cg[Number * a1 + Number] &&\n          cgs[Number * <span class=\"supfact\">v12</span> + Number] ==\n              cgs[Number * cg[Number * a1 + Number] + Number]) {\n        if ((int)<span class=\"supfact\">v11</span> <= Number)\n          v2 = (const char *)&unk_5ED4;\n        else\n          v2 = String;\n        v3 = Number - <span class=\"supfact\">v11</span>;\n        <span class=\"supfact\">v10</span> = Com_sprintf(&voipString_9941[<span class=\"supfact\">v11</span>],\n                                          v3, String, v2, <span class=\"supfact\">v12</span>);\n        if (<span class=\"supfact\">v11</span> + <span class=\"supfact\">v10</span> + Number > Number) {\n          CG_Printf(String, v3, <span class=\"supfact\">v11</span>, v4, v5, v6);\n          break;\n        }\n        <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n      }\n      ++<span class=\"supfact\">v12</span>;\n    }\n    voipString_9941[<span class=\"supfact\">v11</span>] = Number;\n  }\n  return voipString_9941;\n}", "code_t": "char *__cdecl CG_VoIPString(int localPlayerNum) {\n  const char *v2;\n  unsigned int v3;\n  unsigned int v4;\n  char <span class=\"supfact\">voipSendTarget</span>[Number];\n  int <span class=\"supfact\">nlen</span>;\n  int <span class=\"supfact\">slen</span>;\n  int <span class=\"supfact\">i</span>;\n  if (localPlayerNum < Number || localPlayerNum > CG_MaxSplitView() ||\n      cg[Number * localPlayerNum + Number] == Number)\n    return Number L;\n  trap_Argv(Number L, <span class=\"supfact\">voipSendTarget</span>, Number L);\n  if ((unsigned int)Q_stricmpn(<span class=\"supfact\">voipSendTarget</span>, String,\n                               Number L)) {\n    if ((unsigned int)Q_stricmpn(<span class=\"supfact\">voipSendTarget</span>, String,\n                                 Number L)) {\n      if ((unsigned int)Q_stricmpn(<span class=\"supfact\">voipSendTarget</span>, String,\n                                   Number L))\n        return Number L;\n      v4 = CG_LastAttacker(localPlayerNum);\n      Com_sprintf(voipString_9941, Number L, String, v4);\n    } else {\n      v3 = CG_CrosshairPlayer(localPlayerNum);\n      Com_sprintf(voipString_9941, Number L, String, v3);\n    }\n  } else {\n    <span class=\"supfact\">i</span> = Number;\n    <span class=\"supfact\">slen</span> = Number;\n    while (<span class=\"supfact\">i</span> < cgs[Number]) {\n      if (cgs[Number * <span class=\"supfact\">i</span> + Number] &&\n          <span class=\"supfact\">i</span> != cg[Number * localPlayerNum + Number] &&\n          cgs[Number * <span class=\"supfact\">i</span> + Number] ==\n              cgs[Number * cg[Number * localPlayerNum + Number] + Number]) {\n        if (<span class=\"supfact\">slen</span> <= Number)\n          v2 = (const char *)&unk_5ED4;\n        else\n          v2 = String;\n        <span class=\"supfact\">nlen</span> =\n            Com_sprintf(&voipString_9941[<span class=\"supfact\">slen</span>],\n                        (unsigned int)(Number - <span class=\"supfact\">slen</span>), String,\n                        v2, (unsigned int)<span class=\"supfact\">i</span>);\n        if ((unsigned int)(<span class=\"supfact\">slen</span> + <span class=\"supfact\">nlen</span> +\n                           Number) > Number) {\n          CG_Printf(String);\n          break;\n        }\n        <span class=\"supfact\">slen</span> += <span class=\"supfact\">nlen</span>;\n      }\n      ++<span class=\"supfact\">i</span>;\n    }\n    voipString_9941[<span class=\"supfact\">slen</span>] = Number;\n  }\n  return voipString_9941;\n}", "var": [{"name": "v12", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v11", "type": "int", "ref_name": "slen", "ref_type": "int"}, {"name": "v10", "type": "int", "ref_name": "nlen", "ref_type": "int"}, {"name": "v9", "type": "char[256]", "ref_name": "voipSendTarget", "ref_type": "char[256]"}], "body_in_train": false}, {"repo_owner": "jdkoftinoff", "repo_name": "mb-linux-msli", "path": "jdkoftinoff/mb-linux-msli/314fc9236a7d26d1092d949c3458aa4d79259bd17e6438ce19dacbc1baa44439", "path_in_repo": "jdkoftinoff/mb-linux-msli/uClinux-dist/user/tftp/tftp", "objdump": "000000000040339e <modecmd>:\n  40339e:\t55                   \tpush   %rbp\n  40339f:\t48 89 e5             \tmov    %rsp,%rbp\n  4033a2:\t53                   \tpush   %rbx\n  4033a3:\t48 83 ec 28          \tsub    $0x28,%rsp\n  4033a7:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n  4033aa:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  4033ae:\t83 7d dc 01          \tcmpl   $0x1,-0x24(%rbp)\n  4033b2:\t7f 19                \tjg     4033cd <modecmd+0x2f>\n  4033b4:\tbe a0 7a 40 00       \tmov    $0x407aa0,%esi\n  4033b9:\tbf d8 52 40 00       \tmov    $0x4052d8,%edi\n  4033be:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4033c3:\te8 f8 ec ff ff       \tcallq  4020c0 <printf@plt>\n  4033c8:\te9 da 00 00 00       \tjmpq   4034a7 <modecmd+0x109>\n  4033cd:\t83 7d dc 02          \tcmpl   $0x2,-0x24(%rbp)\n  4033d1:\t75 69                \tjne    40343c <modecmd+0x9e>\n  4033d3:\tbb a0 76 40 00       \tmov    $0x4076a0,%ebx\n  4033d8:\teb 21                \tjmp    4033fb <modecmd+0x5d>\n  4033da:\t48 8b 13             \tmov    (%rbx),%rdx\n  4033dd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4033e1:\t48 83 c0 08          \tadd    $0x8,%rax\n  4033e5:\t48 8b 00             \tmov    (%rax),%rax\n  4033e8:\t48 89 d6             \tmov    %rdx,%rsi\n  4033eb:\t48 89 c7             \tmov    %rax,%rdi\n  4033ee:\te8 8d ed ff ff       \tcallq  402180 <strcmp@plt>\n  4033f3:\t85 c0                \ttest   %eax,%eax\n  4033f5:\t74 0e                \tje     403405 <modecmd+0x67>\n  4033f7:\t48 83 c3 10          \tadd    $0x10,%rbx\n  4033fb:\t48 8b 03             \tmov    (%rbx),%rax\n  4033fe:\t48 85 c0             \ttest   %rax,%rax\n  403401:\t75 d7                \tjne    4033da <modecmd+0x3c>\n  403403:\teb 01                \tjmp    403406 <modecmd+0x68>\n  403405:\t90                   \tnop\n  403406:\t48 8b 03             \tmov    (%rbx),%rax\n  403409:\t48 85 c0             \ttest   %rax,%rax\n  40340c:\t74 11                \tje     40341f <modecmd+0x81>\n  40340e:\t48 8b 43 08          \tmov    0x8(%rbx),%rax\n  403412:\t48 89 c7             \tmov    %rax,%rdi\n  403415:\te8 cc 00 00 00       \tcallq  4034e6 <setmode>\n  40341a:\te9 88 00 00 00       \tjmpq   4034a7 <modecmd+0x109>\n  40341f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  403423:\t48 83 c0 08          \tadd    $0x8,%rax\n  403427:\t48 8b 00             \tmov    (%rax),%rax\n  40342a:\t48 89 c6             \tmov    %rax,%rsi\n  40342d:\tbf fa 52 40 00       \tmov    $0x4052fa,%edi\n  403432:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403437:\te8 84 ec ff ff       \tcallq  4020c0 <printf@plt>\n  40343c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  403440:\t48 8b 00             \tmov    (%rax),%rax\n  403443:\t48 89 c6             \tmov    %rax,%rsi\n  403446:\tbf 0c 53 40 00       \tmov    $0x40530c,%edi\n  40344b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403450:\te8 6b ec ff ff       \tcallq  4020c0 <printf@plt>\n  403455:\t48 c7 45 e8 18 53 40 \tmovq   $0x405318,-0x18(%rbp)\n  40345c:\t00 \n  40345d:\tbb a0 76 40 00       \tmov    $0x4076a0,%ebx\n  403462:\teb 30                \tjmp    403494 <modecmd+0xf6>\n  403464:\t48 8b 13             \tmov    (%rbx),%rdx\n  403467:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40346b:\t48 89 c6             \tmov    %rax,%rsi\n  40346e:\tbf 1a 53 40 00       \tmov    $0x40531a,%edi\n  403473:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403478:\te8 43 ec ff ff       \tcallq  4020c0 <printf@plt>\n  40347d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  403481:\t0f b6 00             \tmovzbl (%rax),%eax\n  403484:\t3c 20                \tcmp    $0x20,%al\n  403486:\t75 08                \tjne    403490 <modecmd+0xf2>\n  403488:\t48 c7 45 e8 1f 53 40 \tmovq   $0x40531f,-0x18(%rbp)\n  40348f:\t00 \n  403490:\t48 83 c3 10          \tadd    $0x10,%rbx\n  403494:\t48 8b 03             \tmov    (%rbx),%rax\n  403497:\t48 85 c0             \ttest   %rax,%rax\n  40349a:\t75 c8                \tjne    403464 <modecmd+0xc6>\n  40349c:\tbf 23 53 40 00       \tmov    $0x405323,%edi\n  4034a1:\te8 ca eb ff ff       \tcallq  402070 <puts@plt>\n  4034a6:\t90                   \tnop\n  4034a7:\t48 83 c4 28          \tadd    $0x28,%rsp\n  4034ab:\t5b                   \tpop    %rbx\n  4034ac:\t5d                   \tpop    %rbp\n  4034ad:\tc3                   \tretq   ", "code_s": "int __fastcall modecmd(int a1, const char **a2) {\n  char **i;\n  const char **j;\n  const char *<span class=\"supfact\">v5</span>;\n  if (a1 <= Number)\n    return printf(String, mode);\n  if (a1 == Number) {\n    for (i = modes; *i && strcmp(a2[Number], *i); i += Number)\n      ;\n    if (*i)\n      return setmode(i[Number]);\n    printf(String, a2[Number]);\n  }\n  printf(String, *a2);\n  <span class=\"supfact\">v5</span> = String;\n  for (j = (const char **)modes; *j; j += Number) {\n    printf(String, <span class=\"supfact\">v5</span>, *j);\n    if (*<span class=\"supfact\">v5</span> == Number)\n      <span class=\"supfact\">v5</span> = String;\n  }\n  return puts(String);\n}", "code_t": "void __cdecl modecmd(int argc, char **argv) {\n  modes *i;\n  modes *j;\n  const char *<span class=\"supfact\">sep</span>;\n  if (argc <= Number) {\n    printf(String, mode);\n    return;\n  }\n  if (argc == Number) {\n    for (i = modes_0; i->m_name && strcmp(argv[Number], i->m_name); ++i)\n      ;\n    if (i->m_name) {\n      setmode(i->m_mode);\n      return;\n    }\n    printf(String, argv[Number]);\n  }\n  printf(String, *argv);\n  <span class=\"supfact\">sep</span> = String;\n  for (j = modes_0; j->m_name; ++j) {\n    printf(String, <span class=\"supfact\">sep</span>, j->m_name);\n    if (*<span class=\"supfact\">sep</span> == Number)\n      <span class=\"supfact\">sep</span> = String;\n  }\n  puts(String);\n}", "var": [{"name": "v5", "type": "const char *", "ref_name": "sep", "ref_type": "const char *"}], "body_in_train": false}, {"repo_owner": "zhouqingyu", "repo_name": "GNP3C", "path": "zhouqingyu/GNP3C/ec0c83447abfdaf91193ff850b614a26148dcd69c59e7719f60b403f6d0702a2", "path_in_repo": "zhouqingyu/GNP3C/src/file-5.09/src/apprentice.o", "objdump": "000000000000084f <apprentice_list>:\n     84f:\t55                   \tpush   %rbp\n     850:\t48 89 e5             \tmov    %rsp,%rbp\n     853:\t41 54                \tpush   %r12\n     855:\t53                   \tpush   %rbx\n     856:\t48 83 ec 30          \tsub    $0x30,%rsp\n     85a:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     85e:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n     861:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n     868:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     86c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     870:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     874:\te9 63 01 00 00       \tjmpq   9dc <apprentice_list+0x18d>\n     879:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n     880:\te9 3b 01 00 00       \tjmpq   9c0 <apprentice_list+0x171>\n     885:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     889:\t48 8b 10             \tmov    (%rax),%rdx\n     88c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     88f:\t48 69 c0 e8 00 00 00 \timul   $0xe8,%rax,%rax\n     896:\t48 01 d0             \tadd    %rdx,%rax\n     899:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     89d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     8a1:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n     8a5:\t0f b6 c0             \tmovzbl %al,%eax\n     8a8:\t23 45 c4             \tand    -0x3c(%rbp),%eax\n     8ab:\t39 45 c4             \tcmp    %eax,-0x3c(%rbp)\n     8ae:\t74 45                \tje     8f5 <apprentice_list+0xa6>\n     8b0:\teb 04                \tjmp    8b6 <apprentice_list+0x67>\n     8b2:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n     8b6:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     8b9:\t8d 50 01             \tlea    0x1(%rax),%edx\n     8bc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     8c0:\t8b 40 08             \tmov    0x8(%rax),%eax\n     8c3:\t39 c2                \tcmp    %eax,%edx\n     8c5:\t0f 83 f0 00 00 00    \tjae    9bb <apprentice_list+0x16c>\n     8cb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     8cf:\t48 8b 10             \tmov    (%rax),%rdx\n     8d2:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     8d5:\t83 c0 01             \tadd    $0x1,%eax\n     8d8:\t89 c0                \tmov    %eax,%eax\n     8da:\t48 69 c0 e8 00 00 00 \timul   $0xe8,%rax,%rax\n     8e1:\t48 01 d0             \tadd    %rdx,%rax\n     8e4:\t0f b7 00             \tmovzwl (%rax),%eax\n     8e7:\t66 85 c0             \ttest   %ax,%ax\n     8ea:\t75 c6                \tjne    8b2 <apprentice_list+0x63>\n     8ec:\te9 ca 00 00 00       \tjmpq   9bb <apprentice_list+0x16c>\n     8f1:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n     8f5:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     8f8:\t8d 50 01             \tlea    0x1(%rax),%edx\n     8fb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     8ff:\t8b 40 08             \tmov    0x8(%rax),%eax\n     902:\t39 c2                \tcmp    %eax,%edx\n     904:\t73 5c                \tjae    962 <apprentice_list+0x113>\n     906:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     90a:\t48 8b 10             \tmov    (%rax),%rdx\n     90d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     910:\t83 c0 01             \tadd    $0x1,%eax\n     913:\t89 c0                \tmov    %eax,%eax\n     915:\t48 69 c0 e8 00 00 00 \timul   $0xe8,%rax,%rax\n     91c:\t48 01 d0             \tadd    %rdx,%rax\n     91f:\t0f b7 00             \tmovzwl (%rax),%eax\n     922:\t66 85 c0             \ttest   %ax,%ax\n     925:\t74 3b                \tje     962 <apprentice_list+0x113>\n     927:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     92b:\t48 8b 10             \tmov    (%rax),%rdx\n     92e:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     931:\t48 69 c0 e8 00 00 00 \timul   $0xe8,%rax,%rax\n     938:\t48 01 d0             \tadd    %rdx,%rax\n     93b:\t0f b6 40 60          \tmovzbl 0x60(%rax),%eax\n     93f:\t84 c0                \ttest   %al,%al\n     941:\t75 1f                \tjne    962 <apprentice_list+0x113>\n     943:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     947:\t48 8b 10             \tmov    (%rax),%rdx\n     94a:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     94d:\t48 69 c0 e8 00 00 00 \timul   $0xe8,%rax,%rax\n     954:\t48 01 d0             \tadd    %rdx,%rax\n     957:\t0f b6 80 a0 00 00 00 \tmovzbl 0xa0(%rax),%eax\n     95e:\t84 c0                \ttest   %al,%al\n     960:\t74 8f                \tje     8f1 <apprentice_list+0xa2>\n     962:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     966:\t48 8b 10             \tmov    (%rax),%rdx\n     969:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     96c:\t48 69 c0 e8 00 00 00 \timul   $0xe8,%rax,%rax\n     973:\t48 01 d0             \tadd    %rdx,%rax\n     976:\t4c 8d a0 a0 00 00 00 \tlea    0xa0(%rax),%r12\n     97d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     981:\t48 8b 10             \tmov    (%rax),%rdx\n     984:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     987:\t48 69 c0 e8 00 00 00 \timul   $0xe8,%rax,%rax\n     98e:\t48 01 d0             \tadd    %rdx,%rax\n     991:\t48 8d 58 60          \tlea    0x60(%rax),%rbx\n     995:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     999:\t48 89 c7             \tmov    %rax,%rdi\n     99c:\te8 ed fb ff ff       \tcallq  58e <apprentice_magic_strength>\n     9a1:\t4c 89 e1             \tmov    %r12,%rcx\n     9a4:\t48 89 da             \tmov    %rbx,%rdx\n     9a7:\t48 89 c6             \tmov    %rax,%rsi\n     9aa:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     9af:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9b4:\te8 00 00 00 00       \tcallq  9b9 <apprentice_list+0x16a>\n     9b9:\teb 01                \tjmp    9bc <apprentice_list+0x16d>\n     9bb:\t90                   \tnop\n     9bc:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n     9c0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     9c4:\t8b 40 08             \tmov    0x8(%rax),%eax\n     9c7:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n     9ca:\t0f 82 b5 fe ff ff    \tjb     885 <apprentice_list+0x36>\n     9d0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     9d4:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     9d8:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     9dc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     9e0:\t48 3b 45 c8          \tcmp    -0x38(%rbp),%rax\n     9e4:\t0f 85 8f fe ff ff    \tjne    879 <apprentice_list+0x2a>\n     9ea:\t90                   \tnop\n     9eb:\t90                   \tnop\n     9ec:\t48 83 c4 30          \tadd    $0x30,%rsp\n     9f0:\t5b                   \tpop    %rbx\n     9f1:\t41 5c                \tpop    %r12\n     9f3:\t5d                   \tpop    %rbp\n     9f4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall apprentice_list(__int64 a1, int a2) {\n  const char *v2;\n  const char *v3;\n  unsigned __int64 v4;\n  __int64 result;\n  unsigned __int8 *<span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">j</span>;\n  for (<span class=\"supfact\">i</span> = *(_QWORD *)(a1 + Number);;\n       <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number)) {\n    result = <span class=\"supfact\">i</span>;\n    if (<span class=\"supfact\">i</span> == a1)\n      break;\n    for (<span class=\"supfact\">j</span> = Number;\n         <span class=\"supfact\">j</span> < *(_DWORD *)(<span class=\"supfact\">i</span> + Number);\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">v6</span> = (unsigned __int8 *)(*(_QWORD *)<span class=\"supfact\">i</span> +\n                                               Number L * <span class=\"supfact\">j</span>);\n      if (a2 == (unsigned __int8)(a2 & <span class=\"supfact\">v6</span>[Number])) {\n        while (<span class=\"supfact\">j</span> + Number <\n                   *(_DWORD *)(<span class=\"supfact\">i</span> + Number) &&\n               *(_WORD *)(*(_QWORD *)<span class=\"supfact\">i</span> +\n                          Number L * (<span class=\"supfact\">j</span> + Number)) &&\n               !*(_BYTE *)(*(_QWORD *)<span class=\"supfact\">i</span> +\n                           Number L * <span class=\"supfact\">j</span> + Number) &&\n               !*(_BYTE *)(*(_QWORD *)<span class=\"supfact\">i</span> +\n                           Number L * <span class=\"supfact\">j</span> + Number))\n          ++<span class=\"supfact\">j</span>;\n        v2 = (const char *)(*(_QWORD *)<span class=\"supfact\">i</span> +\n                            Number L * <span class=\"supfact\">j</span> + Number);\n        v3 = (const char *)(*(_QWORD *)<span class=\"supfact\">i</span> +\n                            Number L * <span class=\"supfact\">j</span> + Number);\n        v4 = apprentice_magic_strength(<span class=\"supfact\">v6</span>);\n        printf(String, v4, v3, v2);\n      } else {\n        while (<span class=\"supfact\">j</span> + Number <\n                   *(_DWORD *)(<span class=\"supfact\">i</span> + Number) &&\n               *(_WORD *)(*(_QWORD *)<span class=\"supfact\">i</span> +\n                          Number L * (<span class=\"supfact\">j</span> + Number)))\n          ++<span class=\"supfact\">j</span>;\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl apprentice_list(mlist *mlist, int mode) {\n  const char *v2;\n  const char *v3;\n  size_t v4;\n  magic *<span class=\"supfact\">m</span>;\n  mlist *<span class=\"supfact\">ml</span>;\n  uint32_t <span class=\"supfact\">magindex</span>;\n  for (<span class=\"supfact\">ml</span> = mlist->next; <span class=\"supfact\">ml</span> != mlist;\n       <span class=\"supfact\">ml</span> = <span class=\"supfact\">ml</span>->next) {\n    for (<span class=\"supfact\">magindex</span> = Number;\n         <span class=\"supfact\">magindex</span> < <span class=\"supfact\">ml</span>->nmagic;\n         ++<span class=\"supfact\">magindex</span>) {\n      <span class=\"supfact\">m</span> = &<span class=\"supfact\">ml</span>->magic[<span class=\"supfact\">magindex</span>];\n      if (mode == (unsigned __int8)(mode & <span class=\"supfact\">m</span>->flag)) {\n        while (\n            <span class=\"supfact\">magindex</span> + Number < <span class=\"supfact\">ml</span>->nmagic &&\n            <span class=\"supfact\">ml</span>->magic[<span class=\"supfact\">magindex</span> + Number]\n                .cont_level &&\n            !<span class=\"supfact\">ml</span>->magic[<span class=\"supfact\">magindex</span>].desc[Number] &&\n            !<span class=\"supfact\">ml</span>->magic[<span class=\"supfact\">magindex</span>]\n                 .mimetype[Number])\n          ++<span class=\"supfact\">magindex</span>;\n        v2 = <span class=\"supfact\">ml</span>->magic[<span class=\"supfact\">magindex</span>].mimetype;\n        v3 = <span class=\"supfact\">ml</span>->magic[<span class=\"supfact\">magindex</span>].desc;\n        v4 = apprentice_magic_strength(<span class=\"supfact\">m</span>);\n        printf(String, v4, v3, v2);\n      } else {\n        while (<span class=\"supfact\">magindex</span> + Number < <span class=\"supfact\">ml</span>->nmagic &&\n               <span class=\"supfact\">ml</span>->magic[<span class=\"supfact\">magindex</span> + Number]\n                   .cont_level)\n          ++<span class=\"supfact\">magindex</span>;\n      }\n    }\n  }\n}", "var": [{"name": "j", "type": "unsigned int", "ref_name": "magindex", "ref_type": "uint32_t"}, {"name": "i", "type": "__unk__", "ref_name": "ml", "ref_type": "mlist *"}, {"name": "v6", "type": "__unk__", "ref_name": "m", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "lipeiran", "repo_name": "PR_FFmpeg", "path": "lipeiran/PR_FFmpeg/17bddfb118d83627b00129378762332a6677e39441430687d17fe8185d6e5d85", "path_in_repo": "lipeiran/PR_FFmpeg/ffmpeg/libavcodec/alsdec.o", "objdump": "00000000000046ce <multiply>:\n    46ce:\t48 83 ec 38          \tsub    $0x38,%rsp\n    46d2:\t48 89 3c 24          \tmov    %rdi,(%rsp)\n    46d6:\tc7 44 24 20 00 00 00 \tmovl   $0x0,0x20(%rsp)\n    46dd:\t00 \n    46de:\tc7 44 24 1c 30 00 00 \tmovl   $0x30,0x1c(%rsp)\n    46e5:\t00 \n    46e6:\t8b 54 24 40          \tmov    0x40(%rsp),%edx\n    46ea:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    46ee:\t31 d0                \txor    %edx,%eax\n    46f0:\t89 44 24 18          \tmov    %eax,0x18(%rsp)\n    46f4:\t48 8b 54 24 48       \tmov    0x48(%rsp),%rdx\n    46f9:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    46fe:\t48 0f af c2          \timul   %rdx,%rax\n    4702:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n    4707:\t48 b8 00 00 00 00 00 \tmovabs $0x800000000000,%rax\n    470e:\t80 00 00 \n    4711:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n    4716:\teb 0a                \tjmp    4722 <multiply+0x54>\n    4718:\t83 6c 24 1c 01       \tsubl   $0x1,0x1c(%rsp)\n    471d:\t48 d1 6c 24 28       \tshrq   0x28(%rsp)\n    4722:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    4727:\t48 23 44 24 28       \tand    0x28(%rsp),%rax\n    472c:\t48 85 c0             \ttest   %rax,%rax\n    472f:\t75 08                \tjne    4739 <multiply+0x6b>\n    4731:\t48 83 7c 24 28 00    \tcmpq   $0x0,0x28(%rsp)\n    4737:\t75 df                \tjne    4718 <multiply+0x4a>\n    4739:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    473d:\t83 e8 18             \tsub    $0x18,%eax\n    4740:\t89 44 24 14          \tmov    %eax,0x14(%rsp)\n    4744:\t83 7c 24 14 00       \tcmpl   $0x0,0x14(%rsp)\n    4749:\t7e 67                \tjle    47b2 <multiply+0xe4>\n    474b:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    4750:\t89 c2                \tmov    %eax,%edx\n    4752:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    4756:\t83 e8 01             \tsub    $0x1,%eax\n    4759:\t89 c1                \tmov    %eax,%ecx\n    475b:\td3 ea                \tshr    %cl,%edx\n    475d:\t89 d0                \tmov    %edx,%eax\n    475f:\t83 e0 03             \tand    $0x3,%eax\n    4762:\t88 44 24 13          \tmov    %al,0x13(%rsp)\n    4766:\t80 7c 24 13 03       \tcmpb   $0x3,0x13(%rsp)\n    476b:\t74 2f                \tje     479c <multiply+0xce>\n    476d:\t80 7c 24 13 01       \tcmpb   $0x1,0x13(%rsp)\n    4772:\t75 3e                \tjne    47b2 <multiply+0xe4>\n    4774:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    4779:\t89 c2                \tmov    %eax,%edx\n    477b:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    477f:\t83 e8 01             \tsub    $0x1,%eax\n    4782:\t48 c7 c6 ff ff ff ff \tmov    $0xffffffffffffffff,%rsi\n    4789:\t89 c1                \tmov    %eax,%ecx\n    478b:\t48 d3 e6             \tshl    %cl,%rsi\n    478e:\t48 89 f0             \tmov    %rsi,%rax\n    4791:\t48 f7 d0             \tnot    %rax\n    4794:\t48 21 d0             \tand    %rdx,%rax\n    4797:\t48 85 c0             \ttest   %rax,%rax\n    479a:\t74 16                \tje     47b2 <multiply+0xe4>\n    479c:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    47a0:\tba 01 00 00 00       \tmov    $0x1,%edx\n    47a5:\t89 c1                \tmov    %eax,%ecx\n    47a7:\t48 d3 e2             \tshl    %cl,%rdx\n    47aa:\t48 89 d0             \tmov    %rdx,%rax\n    47ad:\t48 01 44 24 30       \tadd    %rax,0x30(%rsp)\n    47b2:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    47b6:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n    47bb:\t89 c1                \tmov    %eax,%ecx\n    47bd:\t48 d3 ea             \tshr    %cl,%rdx\n    47c0:\t48 89 d0             \tmov    %rdx,%rax\n    47c3:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n    47c7:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n    47cb:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    47d0:\t48 85 c0             \ttest   %rax,%rax\n    47d3:\t74 09                \tje     47de <multiply+0x110>\n    47d5:\t83 44 24 1c 01       \taddl   $0x1,0x1c(%rsp)\n    47da:\td1 6c 24 24          \tshrl   0x24(%rsp)\n    47de:\t83 7c 24 18 00       \tcmpl   $0x0,0x18(%rsp)\n    47e3:\t75 08                \tjne    47ed <multiply+0x11f>\n    47e5:\tc7 44 24 20 00 00 00 \tmovl   $0x80000000,0x20(%rsp)\n    47ec:\t80 \n    47ed:\t8b 54 24 50          \tmov    0x50(%rsp),%edx\n    47f1:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n    47f5:\t01 c2                \tadd    %eax,%edx\n    47f7:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    47fb:\t01 d0                \tadd    %edx,%eax\n    47fd:\t83 e8 2f             \tsub    $0x2f,%eax\n    4800:\tc1 e0 17             \tshl    $0x17,%eax\n    4803:\t09 44 24 20          \tor     %eax,0x20(%rsp)\n    4807:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n    480b:\t09 44 24 20          \tor     %eax,0x20(%rsp)\n    480f:\t48 8b 04 24          \tmov    (%rsp),%rax\n    4813:\t8b 54 24 20          \tmov    0x20(%rsp),%edx\n    4817:\t89 d6                \tmov    %edx,%esi\n    4819:\t48 89 c7             \tmov    %rax,%rdi\n    481c:\te8 9e be ff ff       \tcallq  6bf <av_bits2sf_ieee754>\n    4821:\t48 8b 04 24          \tmov    (%rsp),%rax\n    4825:\t48 83 c4 38          \tadd    $0x38,%rsp\n    4829:\tc3                   \tretq   ", "code_s": "__int64 __fastcall multiply(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n                            __int64 a5, __int64 a6, int <span class=\"supfact\">a7</span>,\n                            __int64 <span class=\"supfact\">a8</span>, int <span class=\"supfact\">a9</span>,\n                            int <span class=\"supfact\">a10</span>,\n                            __int64 <span class=\"supfact\">a11</span>,\n                            int <span class=\"supfact\">a12</span>) {\n  char <span class=\"supfact\">v13</span>;\n  char <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>;\n  unsigned int <span class=\"supfact\">v16</span>;\n  unsigned int <span class=\"supfact\">v17</span>;\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  unsigned __int64 <span class=\"supfact\">v19</span>;\n  <span class=\"supfact\">v16</span> = Number;\n  <span class=\"supfact\">v15</span> = Number;\n  <span class=\"supfact\">v19</span> = <span class=\"supfact\">a8</span> * <span class=\"supfact\">a11</span>;\n  for (<span class=\"supfact\">i</span> = Number;\n       (<span class=\"supfact\">i</span> & <span class=\"supfact\">v19</span>) == Number && <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> >>= Number)\n    --<span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v14</span> = <span class=\"supfact\">v15</span> - Number;\n  if (<span class=\"supfact\">v15</span> - Number > Number) {\n    <span class=\"supfact\">v13</span> =\n        ((unsigned int)<span class=\"supfact\">v19</span> >> (<span class=\"supfact\">v15</span> - Number)) &\n        Number;\n    if (<span class=\"supfact\">v13</span> == Number ||\n        <span class=\"supfact\">v13</span> == Number &&\n            ((unsigned int)<span class=\"supfact\">v19</span> &\n             (unsigned __int64)~(\n                 Number << ((unsigned __int8)<span class=\"supfact\">v15</span> - Number))) !=\n                Number)\n      <span class=\"supfact\">v19</span> += Number L << <span class=\"supfact\">v14</span>;\n  }\n  <span class=\"supfact\">v17</span> = <span class=\"supfact\">v19</span> >> <span class=\"supfact\">v14</span>;\n  if (((<span class=\"supfact\">v19</span> >> <span class=\"supfact\">v14</span>) & Number) != Number) {\n    ++<span class=\"supfact\">v15</span>;\n    <span class=\"supfact\">v17</span> >>= Number;\n  }\n  if (<span class=\"supfact\">a7</span> == <span class=\"supfact\">a10</span>)\n    <span class=\"supfact\">v16</span> = Number;\n  av_bits2sf_ieee754(a1, <span class=\"supfact\">v17</span> |\n                             ((<span class=\"supfact\">a12</span> + <span class=\"supfact\">a9</span> +\n                               <span class=\"supfact\">v15</span> - Number)\n                              << Number) |\n                             <span class=\"supfact\">v16</span>);\n  return a1;\n}", "code_t": "SoftFloat_IEEE754_0 *__cdecl multiply(SoftFloat_IEEE754_0 *retstr,\n                                      SoftFloat_IEEE754_0 a,\n                                      SoftFloat_IEEE754_0 b) {\n  unsigned __int8 <span class=\"supfact\">last_2_bits</span>;\n  char <span class=\"supfact\">cutoff_bit_count</span>;\n  int <span class=\"supfact\">bit_count</span>;\n  uint32_t <span class=\"supfact\">return_val</span>;\n  unsigned int <span class=\"supfact\">mantissa</span>;\n  uint64_t <span class=\"supfact\">mask_64</span>;\n  uint64_t <span class=\"supfact\">mantissa_temp</span>;\n  <span class=\"supfact\">return_val</span> = Number;\n  <span class=\"supfact\">bit_count</span> = Number;\n  <span class=\"supfact\">mantissa_temp</span> = a.mant * b.mant;\n  for (<span class=\"supfact\">mask_64</span> = Number;\n       (<span class=\"supfact\">mask_64</span> & <span class=\"supfact\">mantissa_temp</span>) == Number &&\n       <span class=\"supfact\">mask_64</span>;\n       <span class=\"supfact\">mask_64</span> >>= Number)\n    --<span class=\"supfact\">bit_count</span>;\n  <span class=\"supfact\">cutoff_bit_count</span> = <span class=\"supfact\">bit_count</span> - Number;\n  if (<span class=\"supfact\">bit_count</span> - Number > Number) {\n    <span class=\"supfact\">last_2_bits</span> =\n        ((unsigned int)<span class=\"supfact\">mantissa_temp</span> >>\n         (<span class=\"supfact\">bit_count</span> - Number)) &\n        Number;\n    if (<span class=\"supfact\">last_2_bits</span> == Number ||\n        <span class=\"supfact\">last_2_bits</span> == Number &&\n            ((unsigned int)<span class=\"supfact\">mantissa_temp</span> &\n             (unsigned __int64)~(\n                 Number << ((unsigned __int8)<span class=\"supfact\">bit_count</span> -\n                            Number))) != Number) {\n      <span class=\"supfact\">mantissa_temp</span> += Number L\n                                       << <span class=\"supfact\">cutoff_bit_count</span>;\n    }\n  }\n  <span class=\"supfact\">mantissa</span> =\n      <span class=\"supfact\">mantissa_temp</span> >> <span class=\"supfact\">cutoff_bit_count</span>;\n  if (((<span class=\"supfact\">mantissa_temp</span> >> <span class=\"supfact\">cutoff_bit_count</span>) &\n       Number) != Number) {\n    ++<span class=\"supfact\">bit_count</span>;\n    <span class=\"supfact\">mantissa</span> >>= Number;\n  }\n  if (a.sign == b.sign)\n    <span class=\"supfact\">return_val</span> = Number;\n  av_bits2sf_ieee754(\n      retstr,\n      <span class=\"supfact\">mantissa</span> |\n          ((b.exp + a.exp + <span class=\"supfact\">bit_count</span> - Number) << Number) |\n          <span class=\"supfact\">return_val</span>);\n  return retstr;\n}", "var": [{"name": "v19", "type": "const uint8_t *", "ref_name": "mantissa_temp", "ref_type": "uint64_t"}, {"name": "i", "type": "const uint8_t *", "ref_name": "mask_64", "ref_type": "uint64_t"}, {"name": "v17", "type": "unsigned int", "ref_name": "mantissa", "ref_type": "unsigned int"}, {"name": "v16", "type": "unsigned int", "ref_name": "return_val", "ref_type": "uint32_t"}, {"name": "v15", "type": "unsigned int", "ref_name": "bit_count", "ref_type": "int"}, {"name": "v14", "type": "uint8_t", "ref_name": "cutoff_bit_count", "ref_type": "char"}, {"name": "v13", "type": "uint8_t", "ref_name": "last_2_bits", "ref_type": "unsigned __int8"}], "body_in_train": false}, {"repo_owner": "wowk", "repo_name": "minihttpd", "path": "wowk/minihttpd/a4ca4eedd4bdff746975e48dd3ce97fd8b5cc74474ac692c4c2b67413a899dc2", "path_in_repo": "wowk/minihttpd//htpasswd", "objdump": "", "code_s": "char *__fastcall sub_4012E2(const char *a1) {\n  size_t v1;\n  char *<span class=\"supfact\">dest</span>;\n  v1 = strlen(a1);\n  <span class=\"supfact\">dest</span> = (char *)malloc(v1 + Number);\n  strcpy(<span class=\"supfact\">dest</span>, a1);\n  return <span class=\"supfact\">dest</span>;\n}", "code_t": "char *__fastcall sub_4012E2(const char *a1) {\n  size_t v1;\n  char *<span class=\"supfact\">dest</span>;\n  v1 = strlen(a1);\n  <span class=\"supfact\">dest</span> = (char *)malloc(v1 + Number);\n  strcpy(<span class=\"supfact\">dest</span>, a1);\n  return <span class=\"supfact\">dest</span>;\n}", "var": [{"name": "dest", "type": "char *", "ref_name": "dest", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/e92bb3c4f8a5506f117429cea35d606fd9e3c562071edd24824ed74de6139bb9", "path_in_repo": "XanClic/qemu//s390x-softmmu/hw/s390x/s390-stattrib.o", "objdump": "000000000000076e <cmma_save>:\n 76e:\t55                   \tpush   %rbp\n 76f:\t48 89 e5             \tmov    %rsp,%rbp\n 772:\t48 83 ec 60          \tsub    $0x60,%rsp\n 776:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n 77a:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n 77e:\t89 55 ac             \tmov    %edx,-0x54(%rbp)\n 781:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 788:\t00 00 \n 78a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 78e:\t31 c0                \txor    %eax,%eax\n 790:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 794:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 79b <cmma_save+0x2d>\n 79b:\tb9 ca 00 00 00       \tmov    $0xca,%ecx\n 7a0:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 7a7 <cmma_save+0x39>\n 7a7:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 7ae <cmma_save+0x40>\n 7ae:\t48 89 c7             \tmov    %rax,%rdi\n 7b1:\te8 00 00 00 00       \tcallq  7b6 <cmma_save+0x48>\n 7b6:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 7ba:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 7be:\t48 89 c7             \tmov    %rax,%rdi\n 7c1:\te8 00 00 00 00       \tcallq  7c6 <cmma_save+0x58>\n 7c6:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 7cd <cmma_save+0x5f>\n 7cd:\tb9 cb 00 00 00       \tmov    $0xcb,%ecx\n 7d2:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 7d9 <cmma_save+0x6b>\n 7d9:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 7e0 <cmma_save+0x72>\n 7e0:\t48 89 c7             \tmov    %rax,%rdi\n 7e3:\te8 00 00 00 00       \tcallq  7e8 <cmma_save+0x7a>\n 7e8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 7ec:\tc7 45 c8 00 00 00 00 \tmovl   $0x0,-0x38(%rbp)\n 7f3:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n 7fa:\tc7 45 d0 00 00 08 00 \tmovl   $0x80000,-0x30(%rbp)\n 801:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 805:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n 809:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 80d:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n 810:\t48 89 c7             \tmov    %rax,%rdi\n 813:\te8 00 00 00 00       \tcallq  818 <cmma_save+0xaa>\n 818:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 81c:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 821:\t0f 85 eb 00 00 00    \tjne    912 <cmma_save+0x1a4>\n 827:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 82e <cmma_save+0xc0>\n 82e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 833:\te8 00 00 00 00       \tcallq  838 <cmma_save+0xca>\n 838:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n 83d:\te9 5a 01 00 00       \tjmpq   99c <cmma_save+0x22e>\n 842:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 846:\t4c 8b 80 b0 00 00 00 \tmov    0xb0(%rax),%r8\n 84d:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n 851:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n 854:\t48 8d 75 d8          \tlea    -0x28(%rbp),%rsi\n 858:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 85c:\t48 89 c7             \tmov    %rax,%rdi\n 85f:\t41 ff d0             \tcallq  *%r8\n 862:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n 865:\t83 7d c8 00          \tcmpl   $0x0,-0x38(%rbp)\n 869:\t79 14                \tjns    87f <cmma_save+0x111>\n 86b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 86f:\t48 89 c7             \tmov    %rax,%rdi\n 872:\te8 00 00 00 00       \tcallq  877 <cmma_save+0x109>\n 877:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 87a:\te9 1d 01 00 00       \tjmpq   99c <cmma_save+0x22e>\n 87f:\tc7 45 cc 01 00 00 00 \tmovl   $0x1,-0x34(%rbp)\n 886:\t83 7d c8 00          \tcmpl   $0x0,-0x38(%rbp)\n 88a:\t0f 84 a2 00 00 00    \tje     932 <cmma_save+0x1c4>\n 890:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 894:\t48 c1 e0 0c          \tshl    $0xc,%rax\n 898:\t48 83 c8 02          \tor     $0x2,%rax\n 89c:\t48 89 c2             \tmov    %rax,%rdx\n 89f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 8a3:\t48 89 d6             \tmov    %rdx,%rsi\n 8a6:\t48 89 c7             \tmov    %rax,%rdi\n 8a9:\te8 00 00 00 00       \tcallq  8ae <cmma_save+0x140>\n 8ae:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 8b1:\t48 63 d0             \tmovslq %eax,%rdx\n 8b4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 8b8:\t48 89 d6             \tmov    %rdx,%rsi\n 8bb:\t48 89 c7             \tmov    %rax,%rdi\n 8be:\te8 00 00 00 00       \tcallq  8c3 <cmma_save+0x155>\n 8c3:\tc7 45 c4 00 00 00 00 \tmovl   $0x0,-0x3c(%rbp)\n 8ca:\teb 25                \tjmp    8f1 <cmma_save+0x183>\n 8cc:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 8cf:\t48 63 d0             \tmovslq %eax,%rdx\n 8d2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 8d6:\t48 01 d0             \tadd    %rdx,%rax\n 8d9:\t0f b6 00             \tmovzbl (%rax),%eax\n 8dc:\t0f b6 d0             \tmovzbl %al,%edx\n 8df:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 8e3:\t89 d6                \tmov    %edx,%esi\n 8e5:\t48 89 c7             \tmov    %rax,%rdi\n 8e8:\te8 00 00 00 00       \tcallq  8ed <cmma_save+0x17f>\n 8ed:\t83 45 c4 01          \taddl   $0x1,-0x3c(%rbp)\n 8f1:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 8f4:\t3b 45 c8             \tcmp    -0x38(%rbp),%eax\n 8f7:\t7c d3                \tjl     8cc <cmma_save+0x15e>\n 8f9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 8fd:\t48 8b 90 e0 00 00 00 \tmov    0xe0(%rax),%rdx\n 904:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 908:\t48 89 c7             \tmov    %rax,%rdi\n 90b:\tff d2                \tcallq  *%rdx\n 90d:\t48 85 c0             \ttest   %rax,%rax\n 910:\t74 23                \tje     935 <cmma_save+0x1c7>\n 912:\t83 7d ac 00          \tcmpl   $0x0,-0x54(%rbp)\n 916:\t0f 85 26 ff ff ff    \tjne    842 <cmma_save+0xd4>\n 91c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 920:\t48 89 c7             \tmov    %rax,%rdi\n 923:\te8 00 00 00 00       \tcallq  928 <cmma_save+0x1ba>\n 928:\t85 c0                \ttest   %eax,%eax\n 92a:\t0f 84 12 ff ff ff    \tje     842 <cmma_save+0xd4>\n 930:\teb 04                \tjmp    936 <cmma_save+0x1c8>\n 932:\t90                   \tnop\n 933:\teb 01                \tjmp    936 <cmma_save+0x1c8>\n 935:\t90                   \tnop\n 936:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 939:\t48 63 d0             \tmovslq %eax,%rdx\n 93c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 940:\t48 01 c2             \tadd    %rax,%rdx\n 943:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 947:\t48 89 50 78          \tmov    %rdx,0x78(%rax)\n 94b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 94f:\t48 89 c7             \tmov    %rax,%rdi\n 952:\te8 00 00 00 00       \tcallq  957 <cmma_save+0x1e9>\n 957:\t83 7d ac 00          \tcmpl   $0x0,-0x54(%rbp)\n 95b:\t74 11                \tje     96e <cmma_save+0x200>\n 95d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 961:\tbe 08 00 00 00       \tmov    $0x8,%esi\n 966:\t48 89 c7             \tmov    %rax,%rdi\n 969:\te8 00 00 00 00       \tcallq  96e <cmma_save+0x200>\n 96e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 972:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 977:\t48 89 c7             \tmov    %rax,%rdi\n 97a:\te8 00 00 00 00       \tcallq  97f <cmma_save+0x211>\n 97f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 983:\t48 89 c7             \tmov    %rax,%rdi\n 986:\te8 00 00 00 00       \tcallq  98b <cmma_save+0x21d>\n 98b:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n 98e:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n 992:\t79 05                \tjns    999 <cmma_save+0x22b>\n 994:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 997:\teb 03                \tjmp    99c <cmma_save+0x22e>\n 999:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n 99c:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 9a0:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 9a7:\t00 00 \n 9a9:\t74 05                \tje     9b0 <cmma_save+0x242>\n 9ab:\te8 00 00 00 00       \tcallq  9b0 <cmma_save+0x242>\n 9b0:\tc9                   \tleaveq \n 9b1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cmma_save(__int64 a1, __int64 a2, int a3) {\n  __int64 v3;\n  __int64 result;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v14</span> = __readfsqword(Number);\n  <span class=\"supfact\">v11</span> =\n      object_dynamic_cast_assert(a2, String, String, Number L, String);\n  v3 = object_get_class(<span class=\"supfact\">v11</span>);\n  <span class=\"supfact\">v12</span> =\n      object_class_dynamic_cast_assert(v3, String, String, Number L, String);\n  <span class=\"supfact\">v7</span> = Number;\n  <span class=\"supfact\">v8</span> = Number;\n  <span class=\"supfact\">v10</span> = *(_QWORD *)(<span class=\"supfact\">v11</span> + Number);\n  <span class=\"supfact\">v13</span> = g_try_malloc(Number);\n  if (<span class=\"supfact\">v13</span>) {\n    do {\n      if (!a3 && (unsigned int)qemu_file_rate_limit(a1))\n        break;\n      <span class=\"supfact\">v7</span> =\n          (*(__int64(__fastcall **)(__int64, __int64 *, __int64, __int64))(\n              <span class=\"supfact\">v12</span> + Number))(<span class=\"supfact\">v11</span>,\n                                             &<span class=\"supfact\">v10</span>, Number,\n                                             <span class=\"supfact\">v13</span>);\n      if (<span class=\"supfact\">v7</span> < Number) {\n        g_free(<span class=\"supfact\">v13</span>);\n        return (unsigned int)<span class=\"supfact\">v7</span>;\n      }\n      <span class=\"supfact\">v8</span> = Number;\n      if (!<span class=\"supfact\">v7</span>)\n        break;\n      qemu_put_be64(a1, (<span class=\"supfact\">v10</span> << Number) | Number);\n      qemu_put_be64(a1, <span class=\"supfact\">v7</span>);\n      for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v7</span>;\n           qemu_put_byte(a1, *(unsigned __int8 *)(<span class=\"supfact\">i</span>++ +\n                                                  <span class=\"supfact\">v13</span>)))\n        ;\n    } while ((*(__int64(__fastcall **)(__int64))(<span class=\"supfact\">v12</span> + Number))(\n        <span class=\"supfact\">v11</span>));\n    *(_QWORD *)(<span class=\"supfact\">v11</span> + Number) =\n        <span class=\"supfact\">v10</span> + <span class=\"supfact\">v7</span>;\n    g_free(<span class=\"supfact\">v13</span>);\n    if (a3)\n      qemu_put_be64(a1, Number L);\n    qemu_put_be64(a1, Number L);\n    <span class=\"supfact\">v9</span> = qemu_file_get_error(a1);\n    if (<span class=\"supfact\">v9</span> >= Number)\n      result = <span class=\"supfact\">v8</span>;\n    else\n      result = (unsigned int)<span class=\"supfact\">v9</span>;\n  } else {\n    error_report(String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl cmma_save(QEMUFile_0 *f, void *opaque, int final) {\n  __int64 v3;\n  int result;\n  int <span class=\"supfact\">cx_0</span>;\n  int <span class=\"supfact\">reallen</span>;\n  int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">r</span>;\n  uint64_t <span class=\"supfact\">start_gfn</span>;\n  S390StAttribState_0 *<span class=\"supfact\">sas</span>;\n  S390StAttribClass_0 *<span class=\"supfact\">sac</span>;\n  uint8_t *<span class=\"supfact\">buf</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v14</span> = __readfsqword(Number);\n  <span class=\"supfact\">sas</span> = (S390StAttribState_0 *)object_dynamic_cast_assert(\n      opaque, String, String, Number L, String);\n  v3 = object_get_class(<span class=\"supfact\">sas</span>);\n  <span class=\"supfact\">sac</span> = (S390StAttribClass_0 *)object_class_dynamic_cast_assert(\n      v3, String, String, Number L, String);\n  <span class=\"supfact\">reallen</span> = Number;\n  <span class=\"supfact\">ret</span> = Number;\n  <span class=\"supfact\">start_gfn</span> = <span class=\"supfact\">sas</span>->migration_cur_gfn;\n  <span class=\"supfact\">buf</span> = (uint8_t *)g_try_malloc(Number);\n  if (<span class=\"supfact\">buf</span>) {\n    do {\n      if (!final && (unsigned int)qemu_file_rate_limit(f))\n        break;\n      <span class=\"supfact\">reallen</span> = <span class=\"supfact\">sac</span>->get_stattr(\n          <span class=\"supfact\">sas</span>, &<span class=\"supfact\">start_gfn</span>, Number,\n          <span class=\"supfact\">buf</span>);\n      if (<span class=\"supfact\">reallen</span> < Number) {\n        g_free(<span class=\"supfact\">buf</span>);\n        return <span class=\"supfact\">reallen</span>;\n      }\n      <span class=\"supfact\">ret</span> = Number;\n      if (!<span class=\"supfact\">reallen</span>)\n        break;\n      qemu_put_be64(f, (<span class=\"supfact\">start_gfn</span> << Number) | Number);\n      qemu_put_be64(f, <span class=\"supfact\">reallen</span>);\n      for (<span class=\"supfact\">cx_0</span> = Number;\n           <span class=\"supfact\">cx_0</span> < <span class=\"supfact\">reallen</span>;\n           qemu_put_byte(f, <span class=\"supfact\">buf</span>[<span class=\"supfact\">cx_0</span>++]))\n        ;\n    } while (<span class=\"supfact\">sac</span>->get_dirtycount(<span class=\"supfact\">sas</span>));\n    <span class=\"supfact\">sas</span>->migration_cur_gfn =\n        <span class=\"supfact\">start_gfn</span> + <span class=\"supfact\">reallen</span>;\n    g_free(<span class=\"supfact\">buf</span>);\n    if (final)\n      qemu_put_be64(f, Number L);\n    qemu_put_be64(f, Number L);\n    <span class=\"supfact\">r</span> = qemu_file_get_error(f);\n    if (<span class=\"supfact\">r</span> >= Number)\n      result = <span class=\"supfact\">ret</span>;\n    else\n      result = <span class=\"supfact\">r</span>;\n  } else {\n    error_report(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v14", "type": "unsigned __int64", "ref_name": "v14", "ref_type": "unsigned __int64"}, {"name": "v13", "type": "size_t", "ref_name": "buf", "ref_type": "uint8_t *"}, {"name": "v12", "type": "size_t", "ref_name": "sac", "ref_type": "__unk__"}, {"name": "v11", "type": "size_t", "ref_name": "sas", "ref_type": "__unk__"}, {"name": "v10", "type": "size_t", "ref_name": "start_gfn", "ref_type": "uint64_t"}, {"name": "v9", "type": "int", "ref_name": "r", "ref_type": "int"}, {"name": "v8", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "v7", "type": "int", "ref_name": "reallen", "ref_type": "int"}, {"name": "i", "type": "int", "ref_name": "cx_0", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "agreffard", "repo_name": "TrifocalTensor", "path": "agreffard/TrifocalTensor/c6254676db85c301511437487e5dc7b6a9af195189bb7090cfe9cfc4df156f93", "path_in_repo": "agreffard/TrifocalTensor//src/tensorOperations.o", "objdump": "0000000000000000 <_ZNK5Eigen16CwiseUnaryOpImplINS_8internal19scalar_quotient1_opIfEEKNS_5BlockIKNS4_INS4_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1ELb1EEELin1ELi1ELb0ELb1EEELin1ELi1ELb0ELb1EEENS_5DenseEE6packetILi0EEEDv4_fl>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 28          \tsub    $0x28,%rsp\n   9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  11:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  15:\t48 89 c7             \tmov    %rax,%rdi\n  18:\te8 00 00 00 00       \tcallq  1d <_ZNK5Eigen16CwiseUnaryOpImplINS_8internal19scalar_quotient1_opIfEEKNS_5BlockIKNS4_INS4_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1ELb1EEELin1ELi1ELb0ELb1EEELin1ELi1ELb0ELb1EEENS_5DenseEE6packetILi0EEEDv4_fl+0x1d>\n  1d:\t48 89 c7             \tmov    %rax,%rdi\n  20:\te8 00 00 00 00       \tcallq  25 <_ZNK5Eigen16CwiseUnaryOpImplINS_8internal19scalar_quotient1_opIfEEKNS_5BlockIKNS4_INS4_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1ELb1EEELin1ELi1ELb0ELb1EEELin1ELi1ELb0ELb1EEENS_5DenseEE6packetILi0EEEDv4_fl+0x25>\n  25:\t48 89 c3             \tmov    %rax,%rbx\n  28:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  2c:\t48 89 c7             \tmov    %rax,%rdi\n  2f:\te8 00 00 00 00       \tcallq  34 <_ZNK5Eigen16CwiseUnaryOpImplINS_8internal19scalar_quotient1_opIfEEKNS_5BlockIKNS4_INS4_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1ELb1EEELin1ELi1ELb0ELb1EEELin1ELi1ELb0ELb1EEENS_5DenseEE6packetILi0EEEDv4_fl+0x34>\n  34:\t48 89 c7             \tmov    %rax,%rdi\n  37:\te8 00 00 00 00       \tcallq  3c <_ZNK5Eigen16CwiseUnaryOpImplINS_8internal19scalar_quotient1_opIfEEKNS_5BlockIKNS4_INS4_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1ELb1EEELin1ELi1ELb0ELb1EEELin1ELi1ELb0ELb1EEENS_5DenseEE6packetILi0EEEDv4_fl+0x3c>\n  3c:\t48 89 c2             \tmov    %rax,%rdx\n  3f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  43:\t48 89 c6             \tmov    %rax,%rsi\n  46:\t48 89 d7             \tmov    %rdx,%rdi\n  49:\te8 00 00 00 00       \tcallq  4e <_ZNK5Eigen16CwiseUnaryOpImplINS_8internal19scalar_quotient1_opIfEEKNS_5BlockIKNS4_INS4_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1ELb1EEELin1ELi1ELb0ELb1EEELin1ELi1ELb0ELb1EEENS_5DenseEE6packetILi0EEEDv4_fl+0x4e>\n  4e:\t0f 29 45 e0          \tmovaps %xmm0,-0x20(%rbp)\n  52:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  56:\t48 89 c6             \tmov    %rax,%rsi\n  59:\t48 89 df             \tmov    %rbx,%rdi\n  5c:\te8 00 00 00 00       \tcallq  61 <_ZNK5Eigen16CwiseUnaryOpImplINS_8internal19scalar_quotient1_opIfEEKNS_5BlockIKNS4_INS4_INS_6MatrixIfLin1ELin1ELi0ELin1ELin1EEELin1ELi1ELb1ELb1EEELin1ELi1ELb0ELb1EEELin1ELi1ELb0ELb1EEENS_5DenseEE6packetILi0EEEDv4_fl+0x61>\n  61:\t48 83 c4 28          \tadd    $0x28,%rsp\n  65:\t5b                   \tpop    %rbx\n  66:\t5d                   \tpop    %rbp\n  67:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Eigen CwiseUnaryOpImpl<\n    Eigen internal scalar_quotient1_op<float>,\n    Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                     Number, Number, Number>,\n                                        Number, Number, true, true>,\n                            Number, Number, false, true> const,\n                Number, Number, false, true> const,\n    Eigen Dense>\npacket<Number>(__int64 a1, __int64 a2, __m128 a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 *v6;\n  __m128 <span class=\"supfact\">v8</span>[Number];\n  v3 = Eigen EigenBase<Eigen CwiseUnaryOp<\n      Eigen internal scalar_quotient1_op<float>,\n      Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                       Number, Number, Number>,\n                                          Number, Number, true, true>,\n                              Number, Number, false, true> const,\n                  Number, Number, false, true> const>>\n      derived(a1);\n  v4 = Eigen CwiseUnaryOp<\n      Eigen internal scalar_quotient1_op<float>,\n      Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                       Number, Number, Number>,\n                                          Number, Number, true, true>,\n                              Number, Number, false, true> const,\n                  Number, Number, false, true> const>\n      functor(v3);\n  v5 = Eigen EigenBase<Eigen CwiseUnaryOp<\n      Eigen internal scalar_quotient1_op<float>,\n      Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                       Number, Number, Number>,\n                                          Number, Number, true, true>,\n                              Number, Number, false, true> const,\n                  Number, Number, false, true> const>>\n      derived(a1);\n  v6 = (__int64 *)Eigen CwiseUnaryOp<\n      Eigen internal scalar_quotient1_op<float>,\n      Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                       Number, Number, Number>,\n                                          Number, Number, true, true>,\n                              Number, Number, false, true> const,\n                  Number, Number, false, true> const>\n      nestedExpression(v5);\n  Eigen MapBase<\n      Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                       Number, Number, Number>,\n                                          Number, Number, true, true>,\n                              Number, Number, false, true> const,\n                  Number, Number, false, true>,\n      Number>\n      packet<Number>(v6, a2);\n  <span class=\"supfact\">v8</span>[Number] = a3;\n  return Eigen internal scalar_quotient1_op<float> packetOp(v4,\n                                                            <span class=\"supfact\">v8</span>);\n}", "code_t": "__int64 __fastcall Eigen CwiseUnaryOpImpl<\n    Eigen internal scalar_quotient1_op<float>,\n    Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                     Number, Number, Number>,\n                                        Number, Number, true, true>,\n                            Number, Number, false, true> const,\n                Number, Number, false, true> const,\n    Eigen Dense>\npacket<Number>(__int64 a1, __int64 a2, __m128 a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 *v6;\n  __m128 <span class=\"supfact\">v8</span>[Number];\n  v3 = Eigen EigenBase<Eigen CwiseUnaryOp<\n      Eigen internal scalar_quotient1_op<float>,\n      Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                       Number, Number, Number>,\n                                          Number, Number, true, true>,\n                              Number, Number, false, true> const,\n                  Number, Number, false, true> const>>\n      derived(a1);\n  v4 = Eigen CwiseUnaryOp<\n      Eigen internal scalar_quotient1_op<float>,\n      Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                       Number, Number, Number>,\n                                          Number, Number, true, true>,\n                              Number, Number, false, true> const,\n                  Number, Number, false, true> const>\n      functor(v3);\n  v5 = Eigen EigenBase<Eigen CwiseUnaryOp<\n      Eigen internal scalar_quotient1_op<float>,\n      Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                       Number, Number, Number>,\n                                          Number, Number, true, true>,\n                              Number, Number, false, true> const,\n                  Number, Number, false, true> const>>\n      derived(a1);\n  v6 = (__int64 *)Eigen CwiseUnaryOp<\n      Eigen internal scalar_quotient1_op<float>,\n      Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                       Number, Number, Number>,\n                                          Number, Number, true, true>,\n                              Number, Number, false, true> const,\n                  Number, Number, false, true> const>\n      nestedExpression(v5);\n  Eigen MapBase<\n      Eigen Block<Eigen Block<Eigen Block<Eigen Matrix<float, Number, Number,\n                                                       Number, Number, Number>,\n                                          Number, Number, true, true>,\n                              Number, Number, false, true> const,\n                  Number, Number, false, true>,\n      Number>\n      packet<Number>(v6, a2);\n  <span class=\"supfact\">v8</span>[Number] = a3;\n  return Eigen internal scalar_quotient1_op<float> packetOp(v4,\n                                                            <span class=\"supfact\">v8</span>);\n}", "var": [{"name": "v8", "type": "__int64[4]", "ref_name": "v8", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "xuyinghui8888", "repo_name": "scip_ml", "path": "xuyinghui8888/scip_ml/707deaad695a7a82a9a787637c72eb053850cc5015a589c628896e16d54ae1e3", "path_in_repo": "xuyinghui8888/scip_ml/zimpl/obj/O.linux.x86_64.gnu.static.opt/inst.o", "objdump": "000000000000707b <i_elem_list_new>:\n    707b:\t55                   \tpush   %rbp\n    707c:\t48 89 e5             \tmov    %rsp,%rbp\n    707f:\t48 83 ec 20          \tsub    $0x20,%rsp\n    7083:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    7087:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    708b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    7090:\t48 89 c7             \tmov    %rax,%rdi\n    7093:\te8 00 00 00 00       \tcallq  7098 <i_elem_list_new+0x1d>\n    7098:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    709c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    70a0:\t48 89 c7             \tmov    %rax,%rdi\n    70a3:\te8 00 00 00 00       \tcallq  70a8 <i_elem_list_new+0x2d>\n    70a8:\t83 f8 03             \tcmp    $0x3,%eax\n    70ab:\t74 45                \tje     70f2 <i_elem_list_new+0x77>\n    70ad:\t83 f8 03             \tcmp    $0x3,%eax\n    70b0:\t77 5a                \tja     710c <i_elem_list_new+0x91>\n    70b2:\t83 f8 01             \tcmp    $0x1,%eax\n    70b5:\t74 07                \tje     70be <i_elem_list_new+0x43>\n    70b7:\t83 f8 02             \tcmp    $0x2,%eax\n    70ba:\t74 1c                \tje     70d8 <i_elem_list_new+0x5d>\n    70bc:\teb 4e                \tjmp    710c <i_elem_list_new+0x91>\n    70be:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    70c2:\t48 89 c7             \tmov    %rax,%rdi\n    70c5:\te8 00 00 00 00       \tcallq  70ca <i_elem_list_new+0x4f>\n    70ca:\t48 89 c7             \tmov    %rax,%rdi\n    70cd:\te8 00 00 00 00       \tcallq  70d2 <i_elem_list_new+0x57>\n    70d2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    70d6:\teb 39                \tjmp    7111 <i_elem_list_new+0x96>\n    70d8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    70dc:\t48 89 c7             \tmov    %rax,%rdi\n    70df:\te8 00 00 00 00       \tcallq  70e4 <i_elem_list_new+0x69>\n    70e4:\t48 89 c7             \tmov    %rax,%rdi\n    70e7:\te8 00 00 00 00       \tcallq  70ec <i_elem_list_new+0x71>\n    70ec:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    70f0:\teb 1f                \tjmp    7111 <i_elem_list_new+0x96>\n    70f2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    70f6:\t48 89 c7             \tmov    %rax,%rdi\n    70f9:\te8 00 00 00 00       \tcallq  70fe <i_elem_list_new+0x83>\n    70fe:\t48 89 c7             \tmov    %rax,%rdi\n    7101:\te8 00 00 00 00       \tcallq  7106 <i_elem_list_new+0x8b>\n    7106:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    710a:\teb 05                \tjmp    7111 <i_elem_list_new+0x96>\n    710c:\te8 00 00 00 00       \tcallq  7111 <i_elem_list_new+0x96>\n    7111:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    7115:\t48 89 c7             \tmov    %rax,%rdi\n    7118:\te8 00 00 00 00       \tcallq  711d <i_elem_list_new+0xa2>\n    711d:\t48 89 c2             \tmov    %rax,%rdx\n    7120:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7124:\t48 89 d6             \tmov    %rdx,%rsi\n    7127:\t48 89 c7             \tmov    %rax,%rdi\n    712a:\te8 00 00 00 00       \tcallq  712f <i_elem_list_new+0xb4>\n    712f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    7133:\t48 89 c7             \tmov    %rax,%rdi\n    7136:\te8 00 00 00 00       \tcallq  713b <i_elem_list_new+0xc0>\n    713b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    713f:\tc9                   \tleaveq \n    7140:\tc3                   \tretq   ", "code_s": "__int64 __fastcall i_elem_list_new(__int64 a1) {\n  unsigned int v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v7</span> = code_eval_child(a1, Number L);\n  v1 = code_get_type(<span class=\"supfact\">v7</span>);\n  if (v1 == Number) {\n    v5 = code_get_name(<span class=\"supfact\">v7</span>);\n    <span class=\"supfact\">v8</span> = elem_new_name(v5);\n    v3 = list_new_elem(<span class=\"supfact\">v8</span>);\n  } else {\n    if (v1 > Number)\n      goto LABEL_9;\n    if (v1 == Number) {\n      v2 = code_get_numb(<span class=\"supfact\">v7</span>);\n      <span class=\"supfact\">v8</span> = elem_new_numb(v2);\n      v3 = list_new_elem(<span class=\"supfact\">v8</span>);\n    } else {\n      if (v1 != Number)\n      LABEL_9:\n        abort();\n      v4 = code_get_strg(<span class=\"supfact\">v7</span>);\n      <span class=\"supfact\">v8</span> = elem_new_strg(v4);\n      v3 = list_new_elem(<span class=\"supfact\">v8</span>);\n    }\n  }\n  code_value_list(a1, v3);\n  elem_free(<span class=\"supfact\">v8</span>);\n  return a1;\n}", "code_t": "CodeNode *__cdecl i_elem_list_new(CodeNode *self) {\n  unsigned int v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  CodeNode *<span class=\"supfact\">child</span>;\n  Elem *<span class=\"supfact\">elem</span>;\n  <span class=\"supfact\">child</span> = (CodeNode *)code_eval_child(self, Number L);\n  v1 = code_get_type(<span class=\"supfact\">child</span>);\n  if (v1 == Number) {\n    v4 = code_get_name(<span class=\"supfact\">child</span>);\n    <span class=\"supfact\">elem</span> = (Elem *)elem_new_name(v4);\n  } else {\n    if (v1 > Number)\n      goto LABEL_9;\n    if (v1 == Number) {\n      v2 = code_get_numb(<span class=\"supfact\">child</span>);\n      <span class=\"supfact\">elem</span> = (Elem *)elem_new_numb(v2);\n    } else {\n      if (v1 != Number)\n      LABEL_9:\n        abort();\n      v3 = code_get_strg(<span class=\"supfact\">child</span>);\n      <span class=\"supfact\">elem</span> = (Elem *)elem_new_strg(v3);\n    }\n  }\n  v5 = list_new_elem(<span class=\"supfact\">elem</span>);\n  code_value_list(self, v5);\n  elem_free(<span class=\"supfact\">elem</span>);\n  return self;\n}", "var": [{"name": "v8", "type": "__unk__", "ref_name": "elem", "ref_type": "__unk__"}, {"name": "v7", "type": "__unk__", "ref_name": "child", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "bloodstalker", "repo_name": "luactest", "path": "bloodstalker/luactest/fe17f1ae11dcb6319b1aa7019ce6f1596c22ee8290a07c17b5d8d95f7fbfebdd", "path_in_repo": "bloodstalker/luactest//lua/src/lua", "objdump": "0000000000420a59 <luaL_ref>:\n  420a59:\t55                   \tpush   %rbp\n  420a5a:\t48 89 e5             \tmov    %rsp,%rbp\n  420a5d:\t48 83 ec 20          \tsub    $0x20,%rsp\n  420a61:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  420a65:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  420a68:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  420a6c:\tbe ff ff ff ff       \tmov    $0xffffffff,%esi\n  420a71:\t48 89 c7             \tmov    %rax,%rdi\n  420a74:\te8 cc 56 fe ff       \tcallq  406145 <lua_type>\n  420a79:\t85 c0                \ttest   %eax,%eax\n  420a7b:\t75 1b                \tjne    420a98 <luaL_ref+0x3f>\n  420a7d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  420a81:\tbe fe ff ff ff       \tmov    $0xfffffffe,%esi\n  420a86:\t48 89 c7             \tmov    %rax,%rdi\n  420a89:\te8 af 53 fe ff       \tcallq  405e3d <lua_settop>\n  420a8e:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  420a93:\te9 ba 00 00 00       \tjmpq   420b52 <luaL_ref+0xf9>\n  420a98:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  420a9b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  420a9f:\t89 d6                \tmov    %edx,%esi\n  420aa1:\t48 89 c7             \tmov    %rax,%rdi\n  420aa4:\te8 24 53 fe ff       \tcallq  405dcd <lua_absindex>\n  420aa9:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  420aac:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n  420aaf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  420ab3:\tba 00 00 00 00       \tmov    $0x0,%edx\n  420ab8:\t89 ce                \tmov    %ecx,%esi\n  420aba:\t48 89 c7             \tmov    %rax,%rdi\n  420abd:\te8 85 68 fe ff       \tcallq  407347 <lua_rawgeti>\n  420ac2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  420ac6:\tba 00 00 00 00       \tmov    $0x0,%edx\n  420acb:\tbe ff ff ff ff       \tmov    $0xffffffff,%esi\n  420ad0:\t48 89 c7             \tmov    %rax,%rdi\n  420ad3:\te8 ed 5a fe ff       \tcallq  4065c5 <lua_tointegerx>\n  420ad8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  420adb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  420adf:\tbe fe ff ff ff       \tmov    $0xfffffffe,%esi\n  420ae4:\t48 89 c7             \tmov    %rax,%rdi\n  420ae7:\te8 51 53 fe ff       \tcallq  405e3d <lua_settop>\n  420aec:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  420af0:\t74 2f                \tje     420b21 <luaL_ref+0xc8>\n  420af2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  420af5:\t48 63 d0             \tmovslq %eax,%rdx\n  420af8:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n  420afb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  420aff:\t89 ce                \tmov    %ecx,%esi\n  420b01:\t48 89 c7             \tmov    %rax,%rdi\n  420b04:\te8 3e 68 fe ff       \tcallq  407347 <lua_rawgeti>\n  420b09:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n  420b0c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  420b10:\tba 00 00 00 00       \tmov    $0x0,%edx\n  420b15:\t89 ce                \tmov    %ecx,%esi\n  420b17:\t48 89 c7             \tmov    %rax,%rdi\n  420b1a:\te8 3f 71 fe ff       \tcallq  407c5e <lua_rawseti>\n  420b1f:\teb 17                \tjmp    420b38 <luaL_ref+0xdf>\n  420b21:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  420b24:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  420b28:\t89 d6                \tmov    %edx,%esi\n  420b2a:\t48 89 c7             \tmov    %rax,%rdi\n  420b2d:\te8 57 5c fe ff       \tcallq  406789 <lua_rawlen>\n  420b32:\t83 c0 01             \tadd    $0x1,%eax\n  420b35:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  420b38:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  420b3b:\t48 63 d0             \tmovslq %eax,%rdx\n  420b3e:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n  420b41:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  420b45:\t89 ce                \tmov    %ecx,%esi\n  420b47:\t48 89 c7             \tmov    %rax,%rdi\n  420b4a:\te8 0f 71 fe ff       \tcallq  407c5e <lua_rawseti>\n  420b4f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  420b52:\tc9                   \tleaveq \n  420b53:\tc3                   \tretq   ", "code_s": "__int64 __fastcall luaL_ref(_QWORD *a1, int a2) {\n  __int64 result;\n  int <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  if ((unsigned int)lua_type(a1, Number)) {\n    <span class=\"supfact\">v3</span> = lua_absindex((__int64)a1, a2);\n    lua_rawgeti(a1, <span class=\"supfact\">v3</span>, Number L);\n    <span class=\"supfact\">v4</span> = lua_tointegerx(a1, Number, Number L);\n    lua_settop((__int64)a1, Number);\n    if (<span class=\"supfact\">v4</span>) {\n      lua_rawgeti(a1, <span class=\"supfact\">v3</span>, (int)<span class=\"supfact\">v4</span>);\n      lua_rawseti(a1, <span class=\"supfact\">v3</span>, Number L);\n    } else {\n      <span class=\"supfact\">v4</span> = lua_rawlen(a1, <span class=\"supfact\">v3</span>) + Number;\n    }\n    lua_rawseti(a1, <span class=\"supfact\">v3</span>, (int)<span class=\"supfact\">v4</span>);\n    result = <span class=\"supfact\">v4</span>;\n  } else {\n    lua_settop((__int64)a1, Number);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl luaL_ref(lua_State_0 *L, int t) {\n  int result;\n  int <span class=\"supfact\">ta</span>;\n  int <span class=\"supfact\">ref</span>;\n  if (lua_type(L, Number)) {\n    <span class=\"supfact\">ta</span> = lua_absindex(L, t);\n    lua_rawgeti(L, <span class=\"supfact\">ta</span>, Number L);\n    <span class=\"supfact\">ref</span> = lua_tointegerx(L, Number, Number L);\n    lua_settop(L, Number);\n    if (<span class=\"supfact\">ref</span>) {\n      lua_rawgeti(L, <span class=\"supfact\">ta</span>, <span class=\"supfact\">ref</span>);\n      lua_rawseti(L, <span class=\"supfact\">ta</span>, Number L);\n    } else {\n      <span class=\"supfact\">ref</span> = lua_rawlen(L, <span class=\"supfact\">ta</span>) + Number;\n    }\n    lua_rawseti(L, <span class=\"supfact\">ta</span>, <span class=\"supfact\">ref</span>);\n    result = <span class=\"supfact\">ref</span>;\n  } else {\n    lua_settop(L, Number);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "int", "ref_name": "ref", "ref_type": "int"}, {"name": "v3", "type": "int", "ref_name": "ta", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "AndersTrier", "repo_name": "QEMU-bitflip", "path": "AndersTrier/QEMU-bitflip/4c33aa4216d98d7a04558d374c72a10e2fd6f931782511016138175a7debc2a2", "path_in_repo": "AndersTrier/QEMU-bitflip//net/filter-mirror.o", "objdump": "00000000000004ae <filter_mirror_cleanup>:\n 4ae:\t55                   \tpush   %rbp\n 4af:\t48 89 e5             \tmov    %rsp,%rbp\n 4b2:\t48 83 ec 20          \tsub    $0x20,%rsp\n 4b6:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 4ba:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4be:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 4c5 <filter_mirror_cleanup+0x17>\n 4c5:\tb9 b2 00 00 00       \tmov    $0xb2,%ecx\n 4ca:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 4d1 <filter_mirror_cleanup+0x23>\n 4d1:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4d8 <filter_mirror_cleanup+0x2a>\n 4d8:\t48 89 c7             \tmov    %rax,%rdi\n 4db:\te8 00 00 00 00       \tcallq  4e0 <filter_mirror_cleanup+0x32>\n 4e0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 4e4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 4e8:\t48 05 90 00 00 00    \tadd    $0x90,%rax\n 4ee:\t48 89 c7             \tmov    %rax,%rdi\n 4f1:\te8 00 00 00 00       \tcallq  4f6 <filter_mirror_cleanup+0x48>\n 4f6:\t90                   \tnop\n 4f7:\tc9                   \tleaveq \n 4f8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall filter_mirror_cleanup(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> =\n      object_dynamic_cast_assert(a1, String, String, Number L, String);\n  return qemu_chr_fe_deinit(<span class=\"supfact\">v2</span> + Number);\n}", "code_t": "void __cdecl filter_mirror_cleanup(NetFilterState_0 *nf) {\n  MirrorState_0 *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (MirrorState_0 *)object_dynamic_cast_assert(\n      nf, String, String, Number L, String);\n  qemu_chr_fe_deinit(&<span class=\"supfact\">s</span>->chr_out);\n}", "var": [{"name": "v2", "type": "PCIESPState_0 *", "ref_name": "s", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/a2002ae660175968e0b86e8dc91bf56b26f8865ccb1769d705308d7677d5574f", "path_in_repo": "madeye/GRACE/qemu-0.12.5/ppcemb-softmmu/translate.o", "objdump": "0000000000001b78 <gen_helper_store_msr>:\n    1b78:\t55                   \tpush   %rbp\n    1b79:\t48 89 e5             \tmov    %rsp,%rbp\n    1b7c:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1b80:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n    1b83:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    1b8a:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    1b8d:\t48 98                \tcltq   \n    1b8f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1b93:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n    1b97:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1b9a:\t49 89 d1             \tmov    %rdx,%r9\n    1b9d:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    1ba3:\t48 c7 c1 ff ff ff ff \tmov    $0xffffffffffffffff,%rcx\n    1baa:\t89 c2                \tmov    %eax,%edx\n    1bac:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1bb1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1bb6:\te8 b5 ed ff ff       \tcallq  970 <tcg_gen_helperN>\n    1bbb:\t90                   \tnop\n    1bbc:\tc9                   \tleaveq \n    1bbd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gen_helper_store_msr(int a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  <span class=\"supfact\">v2</span> = a1;\n  return tcg_gen_helperN((__int64)&helper_store_msr, Number, Number, Number,\n                         Number, (__int64)&<span class=\"supfact\">v2</span>);\n}", "code_t": "void __cdecl gen_helper_store_msr(TCGv_i32 arg1) {\n  TCGArg <span class=\"supfact\">args</span>[Number];\n  int <span class=\"supfact\">sizemask</span>;\n  <span class=\"supfact\">sizemask</span> = Number;\n  <span class=\"supfact\">args</span>[Number] = arg1;\n  tcg_gen_helperN(&helper_store_msr, Number, Number, Number, Number,\n                  <span class=\"supfact\">args</span>);\n}", "var": [{"name": "v3", "type": "int", "ref_name": "sizemask", "ref_type": "int"}, {"name": "v2", "type": "TCGArg[1]", "ref_name": "args", "ref_type": "TCGArg[1]"}], "body_in_train": false}, {"repo_owner": "tgni", "repo_name": "alg", "path": "tgni/alg/5f7dc5019e034d818088f39580c99607dda9d44c3056b958f5e6c2a67d598108", "path_in_repo": "tgni/alg/kaoYan/sjtu/printPath.exe", "objdump": "0000000000402641 <_Z10insertNodeR4nodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_>:\n  402641:\t55                   \tpush   %rbp\n  402642:\t48 89 e5             \tmov    %rsp,%rbp\n  402645:\t53                   \tpush   %rbx\n  402646:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n  40264d:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n  402654:\t48 89 b5 70 ff ff ff \tmov    %rsi,-0x90(%rbp)\n  40265b:\t48 89 95 68 ff ff ff \tmov    %rdx,-0x98(%rbp)\n  402662:\t48 8b 95 70 ff ff ff \tmov    -0x90(%rbp),%rdx\n  402669:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40266d:\t48 89 d6             \tmov    %rdx,%rsi\n  402670:\t48 89 c7             \tmov    %rax,%rdi\n  402673:\te8 f8 f9 ff ff       \tcallq  402070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@plt>\n  402678:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  40267c:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  402683:\t48 89 d6             \tmov    %rdx,%rsi\n  402686:\t48 89 c7             \tmov    %rax,%rdi\n  402689:\te8 a9 fe ff ff       \tcallq  402537 <_Z8findNodeR4nodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>\n  40268e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  402692:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  402697:\t0f 95 c3             \tsetne  %bl\n  40269a:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40269e:\t48 89 c7             \tmov    %rax,%rdi\n  4026a1:\te8 2a fa ff ff       \tcallq  4020d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  4026a6:\t84 db                \ttest   %bl,%bl\n  4026a8:\t0f 84 b9 00 00 00    \tje     402767 <_Z10insertNodeR4nodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x126>\n  4026ae:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  4026b2:\t48 89 c7             \tmov    %rax,%rdi\n  4026b5:\te8 36 07 00 00       \tcallq  402df0 <_ZN4nodeC1Ev>\n  4026ba:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n  4026c1:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  4026c5:\t48 89 d6             \tmov    %rdx,%rsi\n  4026c8:\t48 89 c7             \tmov    %rax,%rdi\n  4026cb:\te8 70 f9 ff ff       \tcallq  402040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_@plt>\n  4026d0:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  4026d4:\t48 83 c0 20          \tadd    $0x20,%rax\n  4026d8:\t48 89 c7             \tmov    %rax,%rdi\n  4026db:\te8 0c 0a 00 00       \tcallq  4030ec <_ZNSt6vectorI4nodeSaIS0_EE5clearEv>\n  4026e0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4026e4:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n  4026e8:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  4026ec:\t48 89 c6             \tmov    %rax,%rsi\n  4026ef:\t48 89 d7             \tmov    %rdx,%rdi\n  4026f2:\te8 1b 0a 00 00       \tcallq  403112 <_ZNSt6vectorI4nodeSaIS0_EE9push_backERKS0_>\n  4026f7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4026fb:\t48 83 c0 20          \tadd    $0x20,%rax\n  4026ff:\t48 89 c7             \tmov    %rax,%rdi\n  402702:\te8 e3 07 00 00       \tcallq  402eea <_ZNSt6vectorI4nodeSaIS0_EE3endEv>\n  402707:\t48 89 c3             \tmov    %rax,%rbx\n  40270a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40270e:\t48 83 c0 20          \tadd    $0x20,%rax\n  402712:\t48 89 c7             \tmov    %rax,%rdi\n  402715:\te8 aa 07 00 00       \tcallq  402ec4 <_ZNSt6vectorI4nodeSaIS0_EE5beginEv>\n  40271a:\t48 89 de             \tmov    %rbx,%rsi\n  40271d:\t48 89 c7             \tmov    %rax,%rdi\n  402720:\te8 68 0a 00 00       \tcallq  40318d <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIP4nodeSt6vectorIS2_SaIS2_EEEEEvT_S8_>\n  402725:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  402729:\t48 89 c7             \tmov    %rax,%rdi\n  40272c:\te8 eb 06 00 00       \tcallq  402e1c <_ZN4nodeD1Ev>\n  402731:\teb 34                \tjmp    402767 <_Z10insertNodeR4nodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_+0x126>\n  402733:\t48 89 c3             \tmov    %rax,%rbx\n  402736:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40273a:\t48 89 c7             \tmov    %rax,%rdi\n  40273d:\te8 8e f9 ff ff       \tcallq  4020d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  402742:\t48 89 d8             \tmov    %rbx,%rax\n  402745:\t48 89 c7             \tmov    %rax,%rdi\n  402748:\te8 a3 fa ff ff       \tcallq  4021f0 <_Unwind_Resume@plt>\n  40274d:\t48 89 c3             \tmov    %rax,%rbx\n  402750:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  402754:\t48 89 c7             \tmov    %rax,%rdi\n  402757:\te8 c0 06 00 00       \tcallq  402e1c <_ZN4nodeD1Ev>\n  40275c:\t48 89 d8             \tmov    %rbx,%rax\n  40275f:\t48 89 c7             \tmov    %rax,%rdi\n  402762:\te8 89 fa ff ff       \tcallq  4021f0 <_Unwind_Resume@plt>\n  402767:\t90                   \tnop\n  402768:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n  40276f:\t5b                   \tpop    %rbx\n  402770:\t5d                   \tpop    %rbp\n  402771:\tc3                   \tretq   ", "code_s": "void __fastcall insertNode(__int64 a1, __int64 a2, __int64 a3) {\n  bool v3;\n  __int64 v4;\n  __int64 v5;\n  char <span class=\"supfact\">v7</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>;\n  char <span class=\"supfact\">v9</span>[Number];\n  __int64 <span class=\"supfact\">v10</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  <span class=\"supfact\">v10</span> = findNode(a1, (__int64)<span class=\"supfact\">v9</span>);\n  v3 = <span class=\"supfact\">v10</span> != Number;\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  if (v3) {\n    node node((node *)<span class=\"supfact\">v7</span>);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator=();\n    std vector<node> clear(&<span class=\"supfact\">v8</span>, a3);\n    std vector<node> push_back(<span class=\"supfact\">v10</span> + Number,\n                               <span class=\"supfact\">v7</span>);\n    v4 = std vector<node> end(<span class=\"supfact\">v10</span> + Number);\n    v5 = std vector<node> begin(<span class=\"supfact\">v10</span> + Number,\n                                <span class=\"supfact\">v7</span>);\n    std sort<__gnu_cxx __normal_iterator<node *, std vector<node>>>(v5, v4);\n    node ~node((node *)<span class=\"supfact\">v7</span>);\n  }\n}", "code_t": "void __fastcall insertNode(__int64 a1, __int64 a2, __int64 a3) {\n  bool v3;\n  __int64 v4;\n  __int64 v5;\n  char <span class=\"supfact\">v7</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>;\n  char <span class=\"supfact\">v9</span>[Number];\n  __int64 <span class=\"supfact\">v10</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  <span class=\"supfact\">v10</span> = findNode(a1, (__int64)<span class=\"supfact\">v9</span>);\n  v3 = <span class=\"supfact\">v10</span> != Number;\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  if (v3) {\n    node node((node *)<span class=\"supfact\">v7</span>);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator=();\n    std vector<node> clear(&<span class=\"supfact\">v8</span>, a3);\n    std vector<node> push_back(<span class=\"supfact\">v10</span> + Number,\n                               <span class=\"supfact\">v7</span>);\n    v4 = std vector<node> end(<span class=\"supfact\">v10</span> + Number);\n    v5 = std vector<node> begin(<span class=\"supfact\">v10</span> + Number,\n                                <span class=\"supfact\">v7</span>);\n    std sort<__gnu_cxx __normal_iterator<node *, std vector<node>>>(v5, v4);\n    node ~node((node *)<span class=\"supfact\">v7</span>);\n  }\n}", "var": [{"name": "v10", "type": "__int64", "ref_name": "v10", "ref_type": "__int64"}, {"name": "v9", "type": "char[47]", "ref_name": "v9", "ref_type": "char[40]"}, {"name": "v8", "type": "__int64", "ref_name": "v8", "ref_type": "__int64"}, {"name": "v7", "type": "char[32]", "ref_name": "v7", "ref_type": "char[32]"}], "body_in_train": false}, {"repo_owner": "agreffard", "repo_name": "TrifocalTensor", "path": "agreffard/TrifocalTensor/c6254676db85c301511437487e5dc7b6a9af195189bb7090cfe9cfc4df156f93", "path_in_repo": "agreffard/TrifocalTensor//src/tensorOperations.o", "objdump": "0000000000000000 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEEE4_setINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEES2_EEEERS2_RKNS_9DenseBaseIT_EE>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  14:\t48 89 c7             \tmov    %rax,%rdi\n  17:\te8 00 00 00 00       \tcallq  1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEEE4_setINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEES2_EEEERS2_RKNS_9DenseBaseIT_EE+0x1c>\n  1c:\t48 89 c1             \tmov    %rax,%rcx\n  1f:\t48 8d 55 ff          \tlea    -0x1(%rbp),%rdx\n  23:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  27:\t48 89 ce             \tmov    %rcx,%rsi\n  2a:\t48 89 c7             \tmov    %rax,%rdi\n  2d:\te8 00 00 00 00       \tcallq  32 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEEE4_setINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEES2_EEEERS2_RKNS_9DenseBaseIT_EE+0x32>\n  32:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  36:\t48 89 c7             \tmov    %rax,%rdi\n  39:\te8 00 00 00 00       \tcallq  3e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEEE4_setINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEES2_EEEERS2_RKNS_9DenseBaseIT_EE+0x3e>\n  3e:\tc9                   \tleaveq \n  3f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Eigen\n    PlainObjectBase<Eigen Matrix<float, Number, Number, Number, Number, Number>>\n    _set<Eigen CwiseNullaryOp<\n        Eigen internal scalar_constant_op<float>,\n        Eigen Matrix<float, Number, Number, Number, Number, Number>>>(\n        __int64 a1, __int64 a2) {\n  __int64 v2;\n  char <span class=\"supfact\">v4</span>;\n  v2 = Eigen EigenBase<Eigen CwiseNullaryOp<\n      Eigen internal scalar_constant_op<float>,\n      Eigen Matrix<float, Number, Number, Number, Number, Number>>>\n      derived(a2);\n  Eigen PlainObjectBase<\n      Eigen Matrix<float, Number, Number, Number, Number, Number>>\n      _set_selector<Eigen CwiseNullaryOp<\n          Eigen internal scalar_constant_op<float>,\n          Eigen Matrix<float, Number, Number, Number, Number, Number>>>(\n          a1, v2, &<span class=\"supfact\">v4</span>);\n  return Eigen\n      EigenBase<Eigen Matrix<float, Number, Number, Number, Number, Number>>\n          derived(a1);\n}", "code_t": "__int64 __fastcall Eigen\n    PlainObjectBase<Eigen Matrix<float, Number, Number, Number, Number, Number>>\n    _set<Eigen CwiseNullaryOp<\n        Eigen internal scalar_constant_op<float>,\n        Eigen Matrix<float, Number, Number, Number, Number, Number>>>(\n        __int64 a1, __int64 a2) {\n  __int64 v2;\n  char <span class=\"supfact\">v4</span>;\n  v2 = Eigen EigenBase<Eigen CwiseNullaryOp<\n      Eigen internal scalar_constant_op<float>,\n      Eigen Matrix<float, Number, Number, Number, Number, Number>>>\n      derived(a2);\n  Eigen PlainObjectBase<\n      Eigen Matrix<float, Number, Number, Number, Number, Number>>\n      _set_selector<Eigen CwiseNullaryOp<\n          Eigen internal scalar_constant_op<float>,\n          Eigen Matrix<float, Number, Number, Number, Number, Number>>>(\n          a1, v2, &<span class=\"supfact\">v4</span>);\n  return Eigen\n      EigenBase<Eigen Matrix<float, Number, Number, Number, Number, Number>>\n          derived(a1);\n}", "var": [{"name": "v4", "type": "__unk__", "ref_name": "v4", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "munjeni", "repo_name": "android_real_web_server", "path": "munjeni/android_real_web_server/ce2c1ef24409cd2099fb352a757ae1a411c2aca35df2f69a48ef76ceae01dcfb", "path_in_repo": "munjeni/android_real_web_server/openssl/engines/e_ubsec.o", "objdump": "0000000000000a51 <ubsec_mod_exp>:\n     a51:\t41 57                \tpush   %r15\n     a53:\t41 56                \tpush   %r14\n     a55:\t41 55                \tpush   %r13\n     a57:\t41 54                \tpush   %r12\n     a59:\t55                   \tpush   %rbp\n     a5a:\t53                   \tpush   %rbx\n     a5b:\t48 83 ec 48          \tsub    $0x48,%rsp\n     a5f:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n     a64:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n     a69:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n     a6e:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n     a73:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n     a78:\tc7 44 24 38 00 00 00 \tmovl   $0x0,0x38(%rsp)\n     a7f:\t00 \n     a80:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a87 <ubsec_mod_exp+0x36>\n     a87:\t48 85 c0             \ttest   %rax,%rax\n     a8a:\t75 25                \tjne    ab1 <ubsec_mod_exp+0x60>\n     a8c:\tb9 34 02 00 00       \tmov    $0x234,%ecx\n     a91:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # a98 <ubsec_mod_exp+0x47>\n     a98:\tbe 69 00 00 00       \tmov    $0x69,%esi\n     a9d:\tbf 6a 00 00 00       \tmov    $0x6a,%edi\n     aa2:\te8 32 f6 ff ff       \tcallq  d9 <ERR_UBSEC_error>\n     aa7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     aac:\te9 36 02 00 00       \tjmpq   ce7 <ubsec_mod_exp+0x296>\n     ab1:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     ab6:\t48 89 c7             \tmov    %rax,%rdi\n     ab9:\te8 00 00 00 00       \tcallq  abe <ubsec_mod_exp+0x6d>\n     abe:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n     ac2:\t8b 54 24 38          \tmov    0x38(%rsp),%edx\n     ac6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # acc <ubsec_mod_exp+0x7b>\n     acc:\t39 c2                \tcmp    %eax,%edx\n     ace:\t7e 44                \tjle    b14 <ubsec_mod_exp+0xc3>\n     ad0:\tb9 3b 02 00 00       \tmov    $0x23b,%ecx\n     ad5:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # adc <ubsec_mod_exp+0x8b>\n     adc:\tbe 6b 00 00 00       \tmov    $0x6b,%esi\n     ae1:\tbf 6a 00 00 00       \tmov    $0x6a,%edi\n     ae6:\te8 ee f5 ff ff       \tcallq  d9 <ERR_UBSEC_error>\n     aeb:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n     af0:\t48 8b 4c 24 10       \tmov    0x10(%rsp),%rcx\n     af5:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n     afa:\t48 8b 74 24 20       \tmov    0x20(%rsp),%rsi\n     aff:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     b04:\t49 89 f8             \tmov    %rdi,%r8\n     b07:\t48 89 c7             \tmov    %rax,%rdi\n     b0a:\te8 00 00 00 00       \tcallq  b0f <ubsec_mod_exp+0xbe>\n     b0f:\te9 d3 01 00 00       \tjmpq   ce7 <ubsec_mod_exp+0x296>\n     b14:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     b19:\t8b 50 08             \tmov    0x8(%rax),%edx\n     b1c:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     b21:\t8b 40 0c             \tmov    0xc(%rax),%eax\n     b24:\t39 c2                \tcmp    %eax,%edx\n     b26:\t7f 0b                \tjg     b33 <ubsec_mod_exp+0xe2>\n     b28:\t48 83 7c 24 28 00    \tcmpq   $0x0,0x28(%rsp)\n     b2e:\t0f 94 c0             \tsete   %al\n     b31:\teb 1d                \tjmp    b50 <ubsec_mod_exp+0xff>\n     b33:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     b38:\t8b 50 08             \tmov    0x8(%rax),%edx\n     b3b:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     b40:\t89 d6                \tmov    %edx,%esi\n     b42:\t48 89 c7             \tmov    %rax,%rdi\n     b45:\te8 00 00 00 00       \tcallq  b4a <ubsec_mod_exp+0xf9>\n     b4a:\t48 85 c0             \ttest   %rax,%rax\n     b4d:\t0f 94 c0             \tsete   %al\n     b50:\t84 c0                \ttest   %al,%al\n     b52:\t74 25                \tje     b79 <ubsec_mod_exp+0x128>\n     b54:\tb9 41 02 00 00       \tmov    $0x241,%ecx\n     b59:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # b60 <ubsec_mod_exp+0x10f>\n     b60:\tbe 65 00 00 00       \tmov    $0x65,%esi\n     b65:\tbf 6a 00 00 00       \tmov    $0x6a,%edi\n     b6a:\te8 6a f5 ff ff       \tcallq  d9 <ERR_UBSEC_error>\n     b6f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b74:\te9 6e 01 00 00       \tjmpq   ce7 <ubsec_mod_exp+0x296>\n     b79:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b80 <ubsec_mod_exp+0x12f>\n     b80:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # b87 <ubsec_mod_exp+0x136>\n     b87:\tff d0                \tcallq  *%rax\n     b89:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n     b8d:\t83 7c 24 3c 00       \tcmpl   $0x0,0x3c(%rsp)\n     b92:\t7f 4c                \tjg     be0 <ubsec_mod_exp+0x18f>\n     b94:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n     b9b:\t00 \n     b9c:\tb9 47 02 00 00       \tmov    $0x247,%ecx\n     ba1:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # ba8 <ubsec_mod_exp+0x157>\n     ba8:\tbe 6c 00 00 00       \tmov    $0x6c,%esi\n     bad:\tbf 6a 00 00 00       \tmov    $0x6a,%edi\n     bb2:\te8 22 f5 ff ff       \tcallq  d9 <ERR_UBSEC_error>\n     bb7:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n     bbc:\t48 8b 4c 24 10       \tmov    0x10(%rsp),%rcx\n     bc1:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n     bc6:\t48 8b 74 24 20       \tmov    0x20(%rsp),%rsi\n     bcb:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     bd0:\t49 89 f8             \tmov    %rdi,%r8\n     bd3:\t48 89 c7             \tmov    %rax,%rdi\n     bd6:\te8 00 00 00 00       \tcallq  bdb <ubsec_mod_exp+0x18a>\n     bdb:\te9 07 01 00 00       \tjmpq   ce7 <ubsec_mod_exp+0x296>\n     be0:\t4c 8b 25 00 00 00 00 \tmov    0x0(%rip),%r12        # be7 <ubsec_mod_exp+0x196>\n     be7:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     bec:\t4c 8b 28             \tmov    (%rax),%r13\n     bef:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     bf4:\t48 89 c7             \tmov    %rax,%rdi\n     bf7:\te8 00 00 00 00       \tcallq  bfc <ubsec_mod_exp+0x1ab>\n     bfc:\t89 c5                \tmov    %eax,%ebp\n     bfe:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     c03:\t4c 8b 38             \tmov    (%rax),%r15\n     c06:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     c0b:\t48 89 c7             \tmov    %rax,%rdi\n     c0e:\te8 00 00 00 00       \tcallq  c13 <ubsec_mod_exp+0x1c2>\n     c13:\t41 89 c6             \tmov    %eax,%r14d\n     c16:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     c1b:\t48 8b 18             \tmov    (%rax),%rbx\n     c1e:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     c23:\t48 89 c7             \tmov    %rax,%rdi\n     c26:\te8 00 00 00 00       \tcallq  c2b <ubsec_mod_exp+0x1da>\n     c2b:\t89 c7                \tmov    %eax,%edi\n     c2d:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     c32:\t48 8b 30             \tmov    (%rax),%rsi\n     c35:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n     c39:\t48 83 ec 08          \tsub    $0x8,%rsp\n     c3d:\t48 8d 54 24 40       \tlea    0x40(%rsp),%rdx\n     c42:\t52                   \tpush   %rdx\n     c43:\t41 55                \tpush   %r13\n     c45:\t55                   \tpush   %rbp\n     c46:\t4d 89 f9             \tmov    %r15,%r9\n     c49:\t45 89 f0             \tmov    %r14d,%r8d\n     c4c:\t48 89 d9             \tmov    %rbx,%rcx\n     c4f:\t89 fa                \tmov    %edi,%edx\n     c51:\t89 c7                \tmov    %eax,%edi\n     c53:\t41 ff d4             \tcallq  *%r12\n     c56:\t48 83 c4 20          \tadd    $0x20,%rsp\n     c5a:\t85 c0                \ttest   %eax,%eax\n     c5c:\t74 50                \tje     cae <ubsec_mod_exp+0x25d>\n     c5e:\tb9 4f 02 00 00       \tmov    $0x24f,%ecx\n     c63:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # c6a <ubsec_mod_exp+0x219>\n     c6a:\tbe 6a 00 00 00       \tmov    $0x6a,%esi\n     c6f:\tbf 6a 00 00 00       \tmov    $0x6a,%edi\n     c74:\te8 60 f4 ff ff       \tcallq  d9 <ERR_UBSEC_error>\n     c79:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # c80 <ubsec_mod_exp+0x22f>\n     c80:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n     c84:\t89 c7                \tmov    %eax,%edi\n     c86:\tff d2                \tcallq  *%rdx\n     c88:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n     c8d:\t48 8b 4c 24 10       \tmov    0x10(%rsp),%rcx\n     c92:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n     c97:\t48 8b 74 24 20       \tmov    0x20(%rsp),%rsi\n     c9c:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     ca1:\t49 89 f8             \tmov    %rdi,%r8\n     ca4:\t48 89 c7             \tmov    %rax,%rdi\n     ca7:\te8 00 00 00 00       \tcallq  cac <ubsec_mod_exp+0x25b>\n     cac:\teb 39                \tjmp    ce7 <ubsec_mod_exp+0x296>\n     cae:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # cb5 <ubsec_mod_exp+0x264>\n     cb5:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n     cb9:\t89 c7                \tmov    %eax,%edi\n     cbb:\tff d2                \tcallq  *%rdx\n     cbd:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     cc2:\t48 89 c7             \tmov    %rax,%rdi\n     cc5:\te8 00 00 00 00       \tcallq  cca <ubsec_mod_exp+0x279>\n     cca:\t83 c0 1f             \tadd    $0x1f,%eax\n     ccd:\t8d 50 1f             \tlea    0x1f(%rax),%edx\n     cd0:\t85 c0                \ttest   %eax,%eax\n     cd2:\t0f 48 c2             \tcmovs  %edx,%eax\n     cd5:\tc1 f8 05             \tsar    $0x5,%eax\n     cd8:\t89 c2                \tmov    %eax,%edx\n     cda:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     cdf:\t89 50 08             \tmov    %edx,0x8(%rax)\n     ce2:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     ce7:\t48 83 c4 48          \tadd    $0x48,%rsp\n     ceb:\t5b                   \tpop    %rbx\n     cec:\t5d                   \tpop    %rbp\n     ced:\t41 5c                \tpop    %r12\n     cef:\t41 5d                \tpop    %r13\n     cf1:\t41 5e                \tpop    %r14\n     cf3:\t41 5f                \tpop    %r15\n     cf5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ubsec_mod_exp(__int64 *a1, _QWORD *a2, __int64 *a3,\n                                 __int64 *a4, __int64 a5) {\n  __int64 result;\n  bool v6;\n  unsigned int(__fastcall * v7)(_QWORD, _QWORD, _QWORD, __int64, _QWORD,\n                                __int64, __int64, __int64, int *);\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  unsigned int v11;\n  __int64 v12;\n  unsigned int v13;\n  int <span class=\"supfact\">v17</span>;\n  unsigned int <span class=\"supfact\">v18</span>;\n  <span class=\"supfact\">v17</span> = Number;\n  if (ubsec_dso) {\n    <span class=\"supfact\">v17</span> = BN_num_bits(a4);\n    if (<span class=\"supfact\">v17</span> <= max_key_len) {\n      if (*((_DWORD *)a4 + Number) > *((_DWORD *)a1 + Number))\n        v6 = bn_expand2(a1, *((unsigned int *)a4 + Number)) == Number;\n      else\n        v6 = a1 == Number L;\n      if (v6) {\n        ERR_UBSEC_error(Number, Number, (__int64)String, Number);\n        result = Number L;\n      } else {\n        <span class=\"supfact\">v18</span> = p_UBSEC_ubsec_open(String);\n        if ((int)<span class=\"supfact\">v18</span> > Number) {\n          v7 = (unsigned int(__fastcall *)(_QWORD, _QWORD, _QWORD, __int64,\n                                           _QWORD, __int64, __int64, __int64,\n                                           int *))p_UBSEC_rsa_mod_exp_ioctl;\n          v8 = *a1;\n          v9 = (unsigned int)BN_num_bits(a3);\n          v10 = *a3;\n          v11 = BN_num_bits(a4);\n          v12 = *a4;\n          v13 = BN_num_bits(a2);\n          if (v7(<span class=\"supfact\">v18</span>, *a2, v13, v12, v11, v10, v9, v8,\n                 &<span class=\"supfact\">v17</span>)) {\n            ERR_UBSEC_error(Number, Number, (__int64)String, Number);\n            p_UBSEC_ubsec_close(<span class=\"supfact\">v18</span>);\n            result = BN_mod_exp(a1, a2, a3, a4, a5);\n          } else {\n            p_UBSEC_ubsec_close(<span class=\"supfact\">v18</span>);\n            *((_DWORD *)a1 + Number) = (int)(BN_num_bits(a4) + Number) / Number;\n            result = Number L;\n          }\n        } else {\n          <span class=\"supfact\">v18</span> = Number;\n          ERR_UBSEC_error(Number, Number, (__int64)String, Number);\n          result = BN_mod_exp(a1, a2, a3, a4, a5);\n        }\n      }\n    } else {\n      ERR_UBSEC_error(Number, Number, (__int64)String, Number);\n      result = BN_mod_exp(a1, a2, a3, a4, a5);\n    }\n  } else {\n    ERR_UBSEC_error(Number, Number, (__int64)String, Number);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl ubsec_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,\n                          const BIGNUM *m, BN_CTX *ctx) {\n  int result;\n  bool v6;\n  t_UBSEC_rsa_mod_exp_ioctl *v7;\n  unsigned int *v8;\n  __int64 v9;\n  unsigned int *v10;\n  int v11;\n  unsigned int *v12;\n  int v13;\n  int <span class=\"supfact\">y_len</span>;\n  int <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">y_len</span> = Number;\n  if (ubsec_dso) {\n    <span class=\"supfact\">y_len</span> = BN_num_bits(m);\n    if (<span class=\"supfact\">y_len</span> <= max_key_len) {\n      if (m->top > r->dmax)\n        v6 = bn_expand2(r, (unsigned int)m->top) == Number;\n      else\n        v6 = r == Number L;\n      if (v6) {\n        ERR_UBSEC_error(Number, Number, String, Number);\n        result = Number;\n      } else {\n        <span class=\"supfact\">fd</span> = p_UBSEC_ubsec_open(String);\n        if (<span class=\"supfact\">fd</span> > Number) {\n          v7 = p_UBSEC_rsa_mod_exp_ioctl;\n          v8 = r->d;\n          v9 = (unsigned int)BN_num_bits(p);\n          v10 = p->d;\n          v11 = BN_num_bits(m);\n          v12 = m->d;\n          v13 = BN_num_bits(a);\n          if (v7(<span class=\"supfact\">fd</span>, (unsigned __int8 *)a->d, v13,\n                 (unsigned __int8 *)v12, v11, (unsigned __int8 *)v10, v9,\n                 (unsigned __int8 *)v8, &<span class=\"supfact\">y_len</span>)) {\n            ERR_UBSEC_error(Number, Number, String, Number);\n            p_UBSEC_ubsec_close(<span class=\"supfact\">fd</span>);\n            result = BN_mod_exp(r, a, p, m, ctx);\n          } else {\n            p_UBSEC_ubsec_close(<span class=\"supfact\">fd</span>);\n            r->top = (int)(BN_num_bits(m) + Number) / Number;\n            result = Number;\n          }\n        } else {\n          <span class=\"supfact\">fd</span> = Number;\n          ERR_UBSEC_error(Number, Number, String, Number);\n          result = BN_mod_exp(r, a, p, m, ctx);\n        }\n      }\n    } else {\n      ERR_UBSEC_error(Number, Number, String, Number);\n      result = BN_mod_exp(r, a, p, m, ctx);\n    }\n  } else {\n    ERR_UBSEC_error(Number, Number, String, Number);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v18", "type": "int", "ref_name": "fd", "ref_type": "int"}, {"name": "v17", "type": "int", "ref_name": "y_len", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "HostClub", "repo_name": "HostOS", "path": "HostClub/HostOS/f48c7620967c666a72508f12f9d1774e1555d45d68e49f056414e03b50f63b10", "path_in_repo": "HostClub/HostOS/lib/c_io.o", "objdump": "00000000000006e1 <cvtdec0>:\n     6e1:\t55                   \tpush   %rbp\n     6e2:\t48 89 e5             \tmov    %rsp,%rbp\n     6e5:\t48 83 ec 20          \tsub    $0x20,%rsp\n     6e9:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     6ed:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     6f0:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     6f3:\t48 63 d0             \tmovslq %eax,%rdx\n     6f6:\t48 69 d2 67 66 66 66 \timul   $0x66666667,%rdx,%rdx\n     6fd:\t48 c1 ea 20          \tshr    $0x20,%rdx\n     701:\tc1 fa 02             \tsar    $0x2,%edx\n     704:\tc1 f8 1f             \tsar    $0x1f,%eax\n     707:\t29 c2                \tsub    %eax,%edx\n     709:\t89 d0                \tmov    %edx,%eax\n     70b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     70e:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     712:\t79 0e                \tjns    722 <cvtdec0+0x41>\n     714:\tc7 45 fc cc cc cc 0c \tmovl   $0xccccccc,-0x4(%rbp)\n     71b:\tc7 45 e4 08 00 00 00 \tmovl   $0x8,-0x1c(%rbp)\n     722:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     726:\t74 15                \tje     73d <cvtdec0+0x5c>\n     728:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     72b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     72f:\t89 d6                \tmov    %edx,%esi\n     731:\t48 89 c7             \tmov    %rax,%rdi\n     734:\te8 00 00 00 00       \tcallq  739 <cvtdec0+0x58>\n     739:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     73d:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n     740:\t48 63 c1             \tmovslq %ecx,%rax\n     743:\t48 69 c0 67 66 66 66 \timul   $0x66666667,%rax,%rax\n     74a:\t48 c1 e8 20          \tshr    $0x20,%rax\n     74e:\t89 c2                \tmov    %eax,%edx\n     750:\tc1 fa 02             \tsar    $0x2,%edx\n     753:\t89 c8                \tmov    %ecx,%eax\n     755:\tc1 f8 1f             \tsar    $0x1f,%eax\n     758:\t29 c2                \tsub    %eax,%edx\n     75a:\t89 d0                \tmov    %edx,%eax\n     75c:\tc1 e0 02             \tshl    $0x2,%eax\n     75f:\t01 d0                \tadd    %edx,%eax\n     761:\t01 c0                \tadd    %eax,%eax\n     763:\t29 c1                \tsub    %eax,%ecx\n     765:\t89 ca                \tmov    %ecx,%edx\n     767:\t89 d0                \tmov    %edx,%eax\n     769:\t8d 48 30             \tlea    0x30(%rax),%ecx\n     76c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     770:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     774:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n     778:\t89 ca                \tmov    %ecx,%edx\n     77a:\t88 10                \tmov    %dl,(%rax)\n     77c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     780:\tc9                   \tleaveq \n     781:\tc3                   \tretq   ", "code_s": "_BYTE *__fastcall cvtdec0(_BYTE *a1, int a2) {\n  int <span class=\"supfact\">v3</span>;\n  _BYTE *<span class=\"supfact\">v4</span>;\n  unsigned int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v4</span> = a1;\n  <span class=\"supfact\">v3</span> = a2;\n  <span class=\"supfact\">v5</span> = a2 / Number;\n  if (a2 / Number < Number) {\n    <span class=\"supfact\">v5</span> = Number;\n    <span class=\"supfact\">v3</span> = Number;\n  }\n  if (<span class=\"supfact\">v5</span>)\n    <span class=\"supfact\">v4</span> = (_BYTE *)cvtdec0(a1, <span class=\"supfact\">v5</span>);\n  *<span class=\"supfact\">v4</span> = <span class=\"supfact\">v3</span> % Number + Number;\n  return <span class=\"supfact\">v4</span> + Number;\n}", "code_t": "char *__cdecl cvtdec0(char *buf, int value) {\n  int <span class=\"supfact\">valuea</span>;\n  char *<span class=\"supfact\">bufa</span>;\n  int <span class=\"supfact\">quotient</span>;\n  <span class=\"supfact\">bufa</span> = buf;\n  <span class=\"supfact\">valuea</span> = value;\n  <span class=\"supfact\">quotient</span> = value / Number;\n  if (value / Number < Number) {\n    <span class=\"supfact\">quotient</span> = Number;\n    <span class=\"supfact\">valuea</span> = Number;\n  }\n  if (<span class=\"supfact\">quotient</span>)\n    <span class=\"supfact\">bufa</span> = cvtdec0(buf, <span class=\"supfact\">quotient</span>);\n  *<span class=\"supfact\">bufa</span> = <span class=\"supfact\">valuea</span> % Number + Number;\n  return <span class=\"supfact\">bufa</span> + Number;\n}", "var": [{"name": "v5", "type": "int", "ref_name": "quotient", "ref_type": "int"}, {"name": "v4", "type": "char *", "ref_name": "bufa", "ref_type": "char *"}, {"name": "v3", "type": "int", "ref_name": "valuea", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "avble", "repo_name": "natClientEx", "path": "avble/natClientEx/2d901861f27445038e927e30bc0365cb7182f8b4ece78d962882b8505c748164", "path_in_repo": "avble/natClientEx/pjproject-2.5/pjsip/build/output/pjsip-x86_64-unknown-linux-gnu/sip_transaction.o", "objdump": "00000000000006de <pjsip_tsx_layer_init_module>:\n     6de:\t55                   \tpush   %rbp\n     6df:\t48 89 e5             \tmov    %rsp,%rbp\n     6e2:\t48 83 ec 20          \tsub    $0x20,%rsp\n     6e6:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     6ea:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6f1 <pjsip_tsx_layer_init_module+0x13>\n     6f1:\t48 85 c0             \ttest   %rax,%rax\n     6f4:\t74 2f                \tje     725 <pjsip_tsx_layer_init_module+0x47>\n     6f6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6fd <pjsip_tsx_layer_init_module+0x1f>\n     6fd:\t48 85 c0             \ttest   %rax,%rax\n     700:\t74 19                \tje     71b <pjsip_tsx_layer_init_module+0x3d>\n     702:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     707:\tba b5 01 00 00       \tmov    $0x1b5,%edx\n     70c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     711:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     716:\te8 00 00 00 00       \tcallq  71b <pjsip_tsx_layer_init_module+0x3d>\n     71b:\tb8 7d 11 01 00       \tmov    $0x1117d,%eax\n     720:\te9 74 02 00 00       \tjmpq   999 <pjsip_tsx_layer_init_module+0x2bb>\n     725:\te8 d6 f8 ff ff       \tcallq  0 <pjsip_cfg>\n     72a:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n     72d:\t89 c0                \tmov    %eax,%eax\n     72f:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n     736:\t48 c1 e8 20          \tshr    $0x20,%rax\n     73a:\tc1 e8 06             \tshr    $0x6,%eax\n     73d:\t89 c0                \tmov    %eax,%eax\n     73f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 746 <pjsip_tsx_layer_init_module+0x68>\n     746:\te8 b5 f8 ff ff       \tcallq  0 <pjsip_cfg>\n     74b:\t8b 50 2c             \tmov    0x2c(%rax),%edx\n     74e:\t89 d0                \tmov    %edx,%eax\n     750:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n     757:\t48 c1 e8 20          \tshr    $0x20,%rax\n     75b:\tc1 e8 06             \tshr    $0x6,%eax\n     75e:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n     764:\t29 c2                \tsub    %eax,%edx\n     766:\t89 d0                \tmov    %edx,%eax\n     768:\t89 c0                \tmov    %eax,%eax\n     76a:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 771 <pjsip_tsx_layer_init_module+0x93>\n     771:\te8 8a f8 ff ff       \tcallq  0 <pjsip_cfg>\n     776:\t8b 40 30             \tmov    0x30(%rax),%eax\n     779:\t89 c0                \tmov    %eax,%eax\n     77b:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n     782:\t48 c1 e8 20          \tshr    $0x20,%rax\n     786:\tc1 e8 06             \tshr    $0x6,%eax\n     789:\t89 c0                \tmov    %eax,%eax\n     78b:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 792 <pjsip_tsx_layer_init_module+0xb4>\n     792:\te8 69 f8 ff ff       \tcallq  0 <pjsip_cfg>\n     797:\t8b 50 30             \tmov    0x30(%rax),%edx\n     79a:\t89 d0                \tmov    %edx,%eax\n     79c:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n     7a3:\t48 c1 e8 20          \tshr    $0x20,%rax\n     7a7:\tc1 e8 06             \tshr    $0x6,%eax\n     7aa:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n     7b0:\t29 c2                \tsub    %eax,%edx\n     7b2:\t89 d0                \tmov    %edx,%eax\n     7b4:\t89 c0                \tmov    %eax,%eax\n     7b6:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 7bd <pjsip_tsx_layer_init_module+0xdf>\n     7bd:\te8 3e f8 ff ff       \tcallq  0 <pjsip_cfg>\n     7c2:\t8b 40 34             \tmov    0x34(%rax),%eax\n     7c5:\t89 c0                \tmov    %eax,%eax\n     7c7:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n     7ce:\t48 c1 e8 20          \tshr    $0x20,%rax\n     7d2:\tc1 e8 06             \tshr    $0x6,%eax\n     7d5:\t89 c0                \tmov    %eax,%eax\n     7d7:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 7de <pjsip_tsx_layer_init_module+0x100>\n     7de:\te8 1d f8 ff ff       \tcallq  0 <pjsip_cfg>\n     7e3:\t8b 50 34             \tmov    0x34(%rax),%edx\n     7e6:\t89 d0                \tmov    %edx,%eax\n     7e8:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n     7ef:\t48 c1 e8 20          \tshr    $0x20,%rax\n     7f3:\tc1 e8 06             \tshr    $0x6,%eax\n     7f6:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n     7fc:\t29 c2                \tsub    %eax,%edx\n     7fe:\t89 d0                \tmov    %edx,%eax\n     800:\t89 c0                \tmov    %eax,%eax\n     802:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 809 <pjsip_tsx_layer_init_module+0x12b>\n     809:\te8 f2 f7 ff ff       \tcallq  0 <pjsip_cfg>\n     80e:\t8b 40 38             \tmov    0x38(%rax),%eax\n     811:\t89 c0                \tmov    %eax,%eax\n     813:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n     81a:\t48 c1 e8 20          \tshr    $0x20,%rax\n     81e:\tc1 e8 06             \tshr    $0x6,%eax\n     821:\t89 c0                \tmov    %eax,%eax\n     823:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 82a <pjsip_tsx_layer_init_module+0x14c>\n     82a:\te8 d1 f7 ff ff       \tcallq  0 <pjsip_cfg>\n     82f:\t8b 50 38             \tmov    0x38(%rax),%edx\n     832:\t89 d0                \tmov    %edx,%eax\n     834:\t48 69 c0 d3 4d 62 10 \timul   $0x10624dd3,%rax,%rax\n     83b:\t48 c1 e8 20          \tshr    $0x20,%rax\n     83f:\tc1 e8 06             \tshr    $0x6,%eax\n     842:\t69 c0 e8 03 00 00    \timul   $0x3e8,%eax,%eax\n     848:\t29 c2                \tsub    %eax,%edx\n     84a:\t89 d0                \tmov    %edx,%eax\n     84c:\t89 c0                \tmov    %eax,%eax\n     84e:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 855 <pjsip_tsx_layer_init_module+0x177>\n     855:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 85c <pjsip_tsx_layer_init_module+0x17e>\n     85c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 863 <pjsip_tsx_layer_init_module+0x185>\n     863:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 86a <pjsip_tsx_layer_init_module+0x18c>\n     86a:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 871 <pjsip_tsx_layer_init_module+0x193>\n     871:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     875:\tb9 00 02 00 00       \tmov    $0x200,%ecx\n     87a:\tba 00 02 00 00       \tmov    $0x200,%edx\n     87f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     884:\t48 89 c7             \tmov    %rax,%rdi\n     887:\te8 00 00 00 00       \tcallq  88c <pjsip_tsx_layer_init_module+0x1ae>\n     88c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     890:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     895:\t75 0a                \tjne    8a1 <pjsip_tsx_layer_init_module+0x1c3>\n     897:\tb8 77 11 01 00       \tmov    $0x11177,%eax\n     89c:\te9 f8 00 00 00       \tjmpq   999 <pjsip_tsx_layer_init_module+0x2bb>\n     8a1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     8a5:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 8ac <pjsip_tsx_layer_init_module+0x1ce>\n     8ac:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8b0:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 8b7 <pjsip_tsx_layer_init_module+0x1d9>\n     8b7:\te8 44 f7 ff ff       \tcallq  0 <pjsip_cfg>\n     8bc:\t8b 50 28             \tmov    0x28(%rax),%edx\n     8bf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     8c3:\t89 d6                \tmov    %edx,%esi\n     8c5:\t48 89 c7             \tmov    %rax,%rdi\n     8c8:\te8 00 00 00 00       \tcallq  8cd <pjsip_tsx_layer_init_module+0x1ef>\n     8cd:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 8d4 <pjsip_tsx_layer_init_module+0x1f6>\n     8d4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8db <pjsip_tsx_layer_init_module+0x1fd>\n     8db:\t48 85 c0             \ttest   %rax,%rax\n     8de:\t75 1d                \tjne    8fd <pjsip_tsx_layer_init_module+0x21f>\n     8e0:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     8e4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8e8:\t48 89 d6             \tmov    %rdx,%rsi\n     8eb:\t48 89 c7             \tmov    %rax,%rdi\n     8ee:\te8 00 00 00 00       \tcallq  8f3 <pjsip_tsx_layer_init_module+0x215>\n     8f3:\tb8 77 11 01 00       \tmov    $0x11177,%eax\n     8f8:\te9 9c 00 00 00       \tjmpq   999 <pjsip_tsx_layer_init_module+0x2bb>\n     8fd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     901:\tba 00 00 00 00       \tmov    $0x0,%edx\n     906:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     90b:\t48 89 c7             \tmov    %rax,%rdi\n     90e:\te8 00 00 00 00       \tcallq  913 <pjsip_tsx_layer_init_module+0x235>\n     913:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     916:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     91a:\t74 18                \tje     934 <pjsip_tsx_layer_init_module+0x256>\n     91c:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     920:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     924:\t48 89 d6             \tmov    %rdx,%rsi\n     927:\t48 89 c7             \tmov    %rax,%rdi\n     92a:\te8 00 00 00 00       \tcallq  92f <pjsip_tsx_layer_init_module+0x251>\n     92f:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     932:\teb 65                \tjmp    999 <pjsip_tsx_layer_init_module+0x2bb>\n     934:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     938:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     93d:\t48 89 c7             \tmov    %rax,%rdi\n     940:\te8 00 00 00 00       \tcallq  945 <pjsip_tsx_layer_init_module+0x267>\n     945:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     948:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     94c:\t74 27                \tje     975 <pjsip_tsx_layer_init_module+0x297>\n     94e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 955 <pjsip_tsx_layer_init_module+0x277>\n     955:\t48 89 c7             \tmov    %rax,%rdi\n     958:\te8 00 00 00 00       \tcallq  95d <pjsip_tsx_layer_init_module+0x27f>\n     95d:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     961:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     965:\t48 89 d6             \tmov    %rdx,%rsi\n     968:\t48 89 c7             \tmov    %rax,%rdi\n     96b:\te8 00 00 00 00       \tcallq  970 <pjsip_tsx_layer_init_module+0x292>\n     970:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     973:\teb 24                \tjmp    999 <pjsip_tsx_layer_init_module+0x2bb>\n     975:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     979:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     97e:\t48 89 c7             \tmov    %rax,%rdi\n     981:\te8 00 00 00 00       \tcallq  986 <pjsip_tsx_layer_init_module+0x2a8>\n     986:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     989:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     98d:\t74 05                \tje     994 <pjsip_tsx_layer_init_module+0x2b6>\n     98f:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     992:\teb 05                \tjmp    999 <pjsip_tsx_layer_init_module+0x2bb>\n     994:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     999:\tc9                   \tleaveq \n     99a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pjsip_tsx_layer_init_module(__int64 a1) {\n  __int64 result;\n  unsigned int *v2;\n  unsigned int v3;\n  unsigned int v4;\n  unsigned int v5;\n  __int64 <span class=\"supfact\">v6</span>;\n  if (qword_57D8)\n    _assert_fail(String, String, Number, String);\n  t1_timer_val = *((_DWORD *)pjsip_cfg() + Number) / Number;\n  qword_5858 = *((_DWORD *)pjsip_cfg() + Number) % Number;\n  t2_timer_val = *((_DWORD *)pjsip_cfg() + Number) / Number;\n  qword_5868 = *((_DWORD *)pjsip_cfg() + Number) % Number;\n  t4_timer_val = *((_DWORD *)pjsip_cfg() + Number) / Number;\n  qword_5878 = *((_DWORD *)pjsip_cfg() + Number) % Number;\n  td_timer_val = *((_DWORD *)pjsip_cfg() + Number) / Number;\n  qword_5888 = *((_DWORD *)pjsip_cfg() + Number) % Number;\n  timeout_timer_val = td_timer_val;\n  qword_5898 = qword_5888;\n  <span class=\"supfact\">v6</span> = pjsip_endpt_create_pool(a1, String, Number L, Number L);\n  if (!<span class=\"supfact\">v6</span>)\n    return Number L;\n  qword_57D0 = <span class=\"supfact\">v6</span>;\n  qword_57D8 = a1;\n  v2 = (unsigned int *)pjsip_cfg();\n  qword_57E8 = pj_hash_create(<span class=\"supfact\">v6</span>, v2[Number]);\n  if (qword_57E8) {\n    v3 = pj_mutex_create_recursive(<span class=\"supfact\">v6</span>, String, &qword_57E0);\n    if (v3) {\n      pjsip_endpt_release_pool(a1, <span class=\"supfact\">v6</span>);\n      result = v3;\n    } else {\n      v4 = pjsip_endpt_register_module(a1, &mod_tsx_layer);\n      if (v4) {\n        pj_mutex_destroy(qword_57E0);\n        pjsip_endpt_release_pool(a1, <span class=\"supfact\">v6</span>);\n        result = v4;\n      } else {\n        v5 = pjsip_endpt_register_module(a1, &mod_stateful_util);\n        if (v5)\n          result = v5;\n        else\n          result = Number L;\n      }\n    }\n  } else {\n    pjsip_endpt_release_pool(a1, <span class=\"supfact\">v6</span>);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl pjsip_tsx_layer_init_module(pjsip_endpoint_0 *endpt) {\n  pj_status_t result;\n  unsigned int v2;\n  pj_status_t status;\n  pj_status_t statusa;\n  pj_status_t statusb;\n  pj_pool_t_0 *<span class=\"supfact\">pool</span>;\n  if (mod_tsx_layer_0.endpt)\n    _assert_fail(String, String, Number, String);\n  t1_timer_val.sec = pjsip_cfg()->tsx.t1 / Number;\n  t1_timer_val.msec = pjsip_cfg()->tsx.t1 % Number;\n  t2_timer_val.sec = pjsip_cfg()->tsx.t2 / Number;\n  t2_timer_val.msec = pjsip_cfg()->tsx.t2 % Number;\n  t4_timer_val.sec = pjsip_cfg()->tsx.t4 / Number;\n  t4_timer_val.msec = pjsip_cfg()->tsx.t4 % Number;\n  td_timer_val.sec = pjsip_cfg()->tsx.td / Number;\n  td_timer_val.msec = pjsip_cfg()->tsx.td % Number;\n  timeout_timer_val = td_timer_val;\n  <span class=\"supfact\">pool</span> =\n      (pj_pool_t_0 *)pjsip_endpt_create_pool(endpt, String, Number L, Number L);\n  if (!<span class=\"supfact\">pool</span>)\n    return Number;\n  mod_tsx_layer_0.<span class=\"supfact\">pool</span> = <span class=\"supfact\">pool</span>;\n  mod_tsx_layer_0.endpt = endpt;\n  v2 = pjsip_cfg()->tsx.max_count;\n  mod_tsx_layer_0.htable =\n      (pj_hash_table_t_0 *)pj_hash_create(<span class=\"supfact\">pool</span>, v2);\n  if (mod_tsx_layer_0.htable) {\n    status = pj_mutex_create_recursive(<span class=\"supfact\">pool</span>, String,\n                                       &mod_tsx_layer_0.mutex);\n    if (status) {\n      pjsip_endpt_release_pool(endpt, <span class=\"supfact\">pool</span>);\n      result = status;\n    } else {\n      statusa = pjsip_endpt_register_module(endpt, &mod_tsx_layer_0);\n      if (statusa) {\n        pj_mutex_destroy(mod_tsx_layer_0.mutex);\n        pjsip_endpt_release_pool(endpt, <span class=\"supfact\">pool</span>);\n        result = statusa;\n      } else {\n        statusb = pjsip_endpt_register_module(endpt, &mod_stateful_util);\n        if (statusb)\n          result = statusb;\n        else\n          result = Number;\n      }\n    }\n  } else {\n    pjsip_endpt_release_pool(endpt, <span class=\"supfact\">pool</span>);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "__unk__", "ref_name": "pool", "ref_type": "pj_pool_t_0 *"}], "body_in_train": false}, {"repo_owner": "HarryWei", "repo_name": "qemu", "path": "HarryWei/qemu/84e4040f34018b715de8cb951a9c57b8589140b8f75dd9801b8f0a750cd70f35", "path_in_repo": "HarryWei/qemu//hw/pci-host/bonito.o", "objdump": "000000000000060d <bonito_spciconf_writeb>:\n     60d:\t55                   \tpush   %rbp\n     60e:\t48 89 e5             \tmov    %rsp,%rbp\n     611:\t48 83 ec 40          \tsub    $0x40,%rsp\n     615:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     619:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     61d:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n     620:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     624:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     628:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     62c:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 633 <bonito_spciconf_writeb+0x26>\n     633:\tb9 c2 01 00 00       \tmov    $0x1c2,%ecx\n     638:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 63f <bonito_spciconf_writeb+0x32>\n     63f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 646 <bonito_spciconf_writeb+0x39>\n     646:\t48 89 c7             \tmov    %rax,%rdi\n     649:\te8 00 00 00 00       \tcallq  64e <bonito_spciconf_writeb+0x41>\n     64e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     652:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     656:\t48 8b 80 98 07 00 00 \tmov    0x798(%rax),%rax\n     65d:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 664 <bonito_spciconf_writeb+0x57>\n     664:\tb9 c3 01 00 00       \tmov    $0x1c3,%ecx\n     669:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 670 <bonito_spciconf_writeb+0x63>\n     670:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 677 <bonito_spciconf_writeb+0x6a>\n     677:\t48 89 c7             \tmov    %rax,%rdi\n     67a:\te8 00 00 00 00       \tcallq  67f <bonito_spciconf_writeb+0x72>\n     67f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     683:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     687:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     68b:\t48 89 d6             \tmov    %rdx,%rsi\n     68e:\t48 89 c7             \tmov    %rax,%rdi\n     691:\te8 4a fe ff ff       \tcallq  4e0 <bonito_sbridge_pciaddr>\n     696:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     699:\t83 7d e4 ff          \tcmpl   $0xffffffff,-0x1c(%rbp)\n     69d:\t74 7c                \tje     71b <bonito_spciconf_writeb+0x10e>\n     69f:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     6a2:\t0d 00 00 00 80       \tor     $0x80000000,%eax\n     6a7:\t89 c2                \tmov    %eax,%edx\n     6a9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     6ad:\t89 90 80 25 00 00    \tmov    %edx,0x2580(%rax)\n     6b3:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     6b6:\t0f b6 d0             \tmovzbl %al,%edx\n     6b9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     6bd:\t8b b0 80 25 00 00    \tmov    0x2580(%rax),%esi\n     6c3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     6c7:\t48 8b 80 88 25 00 00 \tmov    0x2588(%rax),%rax\n     6ce:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n     6d3:\t48 89 c7             \tmov    %rax,%rdi\n     6d6:\te8 00 00 00 00       \tcallq  6db <bonito_spciconf_writeb+0xce>\n     6db:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     6df:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n     6e6:\t48 83 c0 06          \tadd    $0x6,%rax\n     6ea:\t48 89 c7             \tmov    %rax,%rdi\n     6ed:\te8 63 fa ff ff       \tcallq  155 <pci_get_word>\n     6f2:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n     6f6:\t66 81 65 e2 ff cf    \tandw   $0xcfff,-0x1e(%rbp)\n     6fc:\t0f b7 45 e2          \tmovzwl -0x1e(%rbp),%eax\n     700:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     704:\t48 8b 92 90 00 00 00 \tmov    0x90(%rdx),%rdx\n     70b:\t48 83 c2 06          \tadd    $0x6,%rdx\n     70f:\t89 c6                \tmov    %eax,%esi\n     711:\t48 89 d7             \tmov    %rdx,%rdi\n     714:\te8 15 fa ff ff       \tcallq  12e <pci_set_word>\n     719:\teb 01                \tjmp    71c <bonito_spciconf_writeb+0x10f>\n     71b:\t90                   \tnop\n     71c:\tc9                   \tleaveq \n     71d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bonito_spciconf_writeb(__int64 a1, __int64 a2,\n                                          unsigned __int8 a3) {\n  __int64 result;\n  __int16 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v6</span> =\n      object_dynamic_cast_assert(a1, String, String, Number L, String);\n  <span class=\"supfact\">v7</span> = object_dynamic_cast_assert(\n      *(_QWORD *)(a1 + Number), String, String, Number L, String);\n  result = bonito_sbridge_pciaddr(a1, a2);\n  if ((_DWORD)result != Number) {\n    *(_DWORD *)(<span class=\"supfact\">v7</span> + Number) = result | Number;\n    pci_data_write(*(_QWORD *)(<span class=\"supfact\">v7</span> + Number),\n                   *(unsigned int *)(<span class=\"supfact\">v7</span> + Number), a3,\n                   Number L);\n    <span class=\"supfact\">v5</span> =\n        pci_get_word(\n            (unsigned __int16 *)(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number) +\n                                 Number L)) &\n        Number;\n    result = (__int64)pci_set_word(\n        (_WORD *)(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number) + Number L),\n        <span class=\"supfact\">v5</span>);\n  }\n  return result;\n}", "code_t": "void __cdecl bonito_spciconf_writeb(void *opaque, hwaddr addr, uint32_t val) {\n  unsigned __int8 vala;\n  uint16_t <span class=\"supfact\">status</span>;\n  uint32_t pciaddr;\n  PCIDevice_0 *<span class=\"supfact\">d</span>;\n  PCIHostState_0 *<span class=\"supfact\">phb</span>;\n  vala = val;\n  <span class=\"supfact\">d</span> = (PCIDevice_0 *)object_dynamic_cast_assert(\n      opaque, String, String, Number L, String);\n  <span class=\"supfact\">phb</span> = (PCIHostState_0 *)object_dynamic_cast_assert(\n      *((_QWORD *)opaque + Number), String, String, Number L, String);\n  pciaddr = bonito_sbridge_pciaddr(opaque, addr);\n  if (pciaddr != Number) {\n    <span class=\"supfact\">phb</span>->config_reg = pciaddr | Number;\n    pci_data_write(<span class=\"supfact\">phb</span>->bus, <span class=\"supfact\">phb</span>->config_reg,\n                   vala, Number L);\n    <span class=\"supfact\">status</span> =\n        pci_get_word((const uint8_t *)<span class=\"supfact\">d</span>->config + Number) &\n        Number;\n    pci_set_word(<span class=\"supfact\">d</span>->config + Number, <span class=\"supfact\">status</span>);\n  }\n}", "var": [{"name": "v7", "type": "PCIHostState_0 *", "ref_name": "phb", "ref_type": "PCIHostState_0 *"}, {"name": "v6", "type": "PCIDevice_0 *", "ref_name": "d", "ref_type": "PCIDevice_0 *"}, {"name": "v5", "type": "uint16_t", "ref_name": "status", "ref_type": "uint16_t"}], "body_in_train": false}, {"repo_owner": "HarryWei", "repo_name": "qemu", "path": "HarryWei/qemu/a0b11f504fc279c6a69da5ccbf52c6589e2a120f4abfd137f0d90dff5e96248d", "path_in_repo": "HarryWei/qemu//hw/display/cirrus_vga.o", "objdump": "0000000000015480 <cirrus_patternfill_src_notxor_dst_8>:\n   15480:\t55                   \tpush   %rbp\n   15481:\t48 89 e5             \tmov    %rsp,%rbp\n   15484:\t48 83 ec 58          \tsub    $0x58,%rsp\n   15488:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   1548c:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n   15490:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n   15494:\t89 4d b4             \tmov    %ecx,-0x4c(%rbp)\n   15497:\t44 89 45 b0          \tmov    %r8d,-0x50(%rbp)\n   1549b:\t44 89 4d ac          \tmov    %r9d,-0x54(%rbp)\n   1549f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   154a3:\t0f b6 80 e9 02 00 00 \tmovzbl 0x2e9(%rax),%eax\n   154aa:\t0f b6 c0             \tmovzbl %al,%eax\n   154ad:\t83 e0 07             \tand    $0x7,%eax\n   154b0:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   154b3:\tc7 45 e8 08 00 00 00 \tmovl   $0x8,-0x18(%rbp)\n   154ba:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   154be:\t8b 80 6c 0f 01 00    \tmov    0x10f6c(%rax),%eax\n   154c4:\t83 e0 07             \tand    $0x7,%eax\n   154c7:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n   154ca:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n   154d1:\te9 94 00 00 00       \tjmpq   1556a <cirrus_patternfill_src_notxor_dst_8+0xea>\n   154d6:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   154d9:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   154dc:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   154df:\t48 63 d0             \tmovslq %eax,%rdx\n   154e2:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   154e6:\t48 01 d0             \tadd    %rdx,%rax\n   154e9:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   154ed:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   154f0:\t0f af 45 e8          \timul   -0x18(%rbp),%eax\n   154f4:\t48 63 d0             \tmovslq %eax,%rdx\n   154f7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   154fb:\t48 01 d0             \tadd    %rdx,%rax\n   154fe:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   15502:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   15505:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n   15508:\teb 3f                \tjmp    15549 <cirrus_patternfill_src_notxor_dst_8+0xc9>\n   1550a:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n   1550d:\t48 63 d0             \tmovslq %eax,%rdx\n   15510:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   15514:\t48 01 d0             \tadd    %rdx,%rax\n   15517:\t0f b6 00             \tmovzbl (%rax),%eax\n   1551a:\t0f b6 c0             \tmovzbl %al,%eax\n   1551d:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n   15520:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n   15523:\t83 c0 01             \tadd    $0x1,%eax\n   15526:\t83 e0 07             \tand    $0x7,%eax\n   15529:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   1552c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   1552f:\t0f b6 d0             \tmovzbl %al,%edx\n   15532:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   15536:\t89 d6                \tmov    %edx,%esi\n   15538:\t48 89 c7             \tmov    %rax,%rdi\n   1553b:\te8 a9 f9 ff ff       \tcallq  14ee9 <rop_8_src_notxor_dst>\n   15540:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n   15545:\t83 45 d4 01          \taddl   $0x1,-0x2c(%rbp)\n   15549:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   1554c:\t3b 45 ac             \tcmp    -0x54(%rbp),%eax\n   1554f:\t7c b9                \tjl     1550a <cirrus_patternfill_src_notxor_dst_8+0x8a>\n   15551:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   15554:\t83 c0 01             \tadd    $0x1,%eax\n   15557:\t83 e0 07             \tand    $0x7,%eax\n   1555a:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n   1555d:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n   15560:\t48 98                \tcltq   \n   15562:\t48 01 45 c0          \tadd    %rax,-0x40(%rbp)\n   15566:\t83 45 d8 01          \taddl   $0x1,-0x28(%rbp)\n   1556a:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n   1556d:\t3b 45 10             \tcmp    0x10(%rbp),%eax\n   15570:\t0f 8c 60 ff ff ff    \tjl     154d6 <cirrus_patternfill_src_notxor_dst_8+0x56>\n   15576:\t90                   \tnop\n   15577:\t90                   \tnop\n   15578:\tc9                   \tleaveq \n   15579:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cirrus_patternfill_src_notxor_dst_8(__int64 a1, __int64 a2,\n                                                       __int64 a3, int a4,\n                                                       __int64 a5, int a6,\n                                                       int <span class=\"supfact\">a7</span>) {\n  __int64 result;\n  int <span class=\"supfact\">j</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">v16</span>;\n  char <span class=\"supfact\">v17</span>;\n  _BYTE *<span class=\"supfact\">v18</span>;\n  <span class=\"supfact\">v16</span> = *(_BYTE *)(a1 + Number) & Number;\n  <span class=\"supfact\">v14</span> = *(_DWORD *)(a1 + Number) & Number;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = <span class=\"supfact\">i</span>;\n    if ((int)<span class=\"supfact\">i</span> >= <span class=\"supfact\">a7</span>)\n      break;\n    <span class=\"supfact\">v15</span> = <span class=\"supfact\">v16</span>;\n    <span class=\"supfact\">v18</span> = (_BYTE *)(<span class=\"supfact\">v16</span> + a2);\n    for (<span class=\"supfact\">j</span> = <span class=\"supfact\">v16</span>; <span class=\"supfact\">j</span> < a6;\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">v17</span> =\n          *(_BYTE *)(<span class=\"supfact\">v15</span> + Number * <span class=\"supfact\">v14</span> + a3);\n      <span class=\"supfact\">v15</span> = ((_BYTE)<span class=\"supfact\">v15</span> + Number) & Number;\n      rop_8_src_notxor_dst(<span class=\"supfact\">v18</span>++, <span class=\"supfact\">v17</span>);\n    }\n    <span class=\"supfact\">v14</span> = ((_BYTE)<span class=\"supfact\">v14</span> + Number) & Number;\n    a2 += a4;\n  }\n  return result;\n}", "code_t": "void __cdecl cirrus_patternfill_src_notxor_dst_8(CirrusVGAState_0 *s,\n                                                 uint8_t *dst,\n                                                 const uint8_t *src,\n                                                 int dstpitch, int srcpitch,\n                                                 int bltwidth, int bltheight) {\n  int <span class=\"supfact\">x</span>;\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">pattern_y</span>;\n  int <span class=\"supfact\">pattern_x</span>;\n  int <span class=\"supfact\">skipleft</span>;\n  uint8_t <span class=\"supfact\">col</span>;\n  uint8_t *<span class=\"supfact\">d</span>;\n  <span class=\"supfact\">skipleft</span> = s->vga.gr[Number] & Number;\n  <span class=\"supfact\">pattern_y</span> = s->cirrus_blt_srcaddr & Number;\n  for (<span class=\"supfact\">y</span> = Number; <span class=\"supfact\">y</span> < bltheight;\n       ++<span class=\"supfact\">y</span>) {\n    <span class=\"supfact\">pattern_x</span> = <span class=\"supfact\">skipleft</span>;\n    <span class=\"supfact\">d</span> = &dst[<span class=\"supfact\">skipleft</span>];\n    for (<span class=\"supfact\">x</span> = <span class=\"supfact\">skipleft</span>;\n         <span class=\"supfact\">x</span> < bltwidth; ++<span class=\"supfact\">x</span>) {\n      <span class=\"supfact\">col</span> =\n          src[Number * <span class=\"supfact\">pattern_y</span> + <span class=\"supfact\">pattern_x</span>];\n      <span class=\"supfact\">pattern_x</span> =\n          ((_BYTE)<span class=\"supfact\">pattern_x</span> + Number) & Number;\n      rop_8_src_notxor_dst(<span class=\"supfact\">d</span>++, <span class=\"supfact\">col</span>);\n    }\n    <span class=\"supfact\">pattern_y</span> =\n        ((_BYTE)<span class=\"supfact\">pattern_y</span> + Number) & Number;\n    dst += dstpitch;\n  }\n}", "var": [{"name": "v18", "type": "uint8_t *", "ref_name": "d", "ref_type": "uint8_t *"}, {"name": "v17", "type": "uint8_t", "ref_name": "col", "ref_type": "uint8_t"}, {"name": "v16", "type": "int", "ref_name": "skipleft", "ref_type": "int"}, {"name": "v15", "type": "int", "ref_name": "pattern_x", "ref_type": "int"}, {"name": "v14", "type": "int", "ref_name": "pattern_y", "ref_type": "int"}, {"name": "i", "type": "int", "ref_name": "y", "ref_type": "int"}, {"name": "j", "type": "int", "ref_name": "x", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "jordansissel", "repo_name": "tmux", "path": "jordansissel/tmux/8c54c58ec5c6c45af38e829f1a79d944af77d1a77275700b93d321f9e256a16e", "path_in_repo": "jordansissel/tmux/tags/TMUX_1_0/tmux", "objdump": "0000000000423865 <screen_write_clearstartofline>:\n  423865:\t55                   \tpush   %rbp\n  423866:\t48 89 e5             \tmov    %rsp,%rbp\n  423869:\t48 83 ec 60          \tsub    $0x60,%rsp\n  42386d:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  423871:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  423875:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  423879:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  42387d:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  423881:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  423885:\t48 89 d6             \tmov    %rdx,%rsi\n  423888:\t48 89 c7             \tmov    %rax,%rdi\n  42388b:\te8 86 f6 ff ff       \tcallq  422f16 <screen_write_initctx>\n  423890:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  423894:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  423898:\t8b 40 04             \tmov    0x4(%rax),%eax\n  42389b:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  42389e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4238a2:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4238a5:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  4238a8:\t83 ea 01             \tsub    $0x1,%edx\n  4238ab:\t39 d0                \tcmp    %edx,%eax\n  4238ad:\t76 27                \tjbe    4238d6 <screen_write_clearstartofline+0x71>\n  4238af:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4238b3:\t8b 50 14             \tmov    0x14(%rax),%edx\n  4238b6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4238ba:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4238be:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n  4238c1:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n  4238c7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4238cc:\t48 89 c7             \tmov    %rax,%rdi\n  4238cf:\te8 d6 2c ff ff       \tcallq  4165aa <grid_view_clear>\n  4238d4:\teb 2c                \tjmp    423902 <screen_write_clearstartofline+0x9d>\n  4238d6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4238da:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4238dd:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  4238e0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4238e4:\t8b 50 14             \tmov    0x14(%rax),%edx\n  4238e7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4238eb:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4238ef:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n  4238f5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4238fa:\t48 89 c7             \tmov    %rax,%rdi\n  4238fd:\te8 a8 2c ff ff       \tcallq  4165aa <grid_view_clear>\n  423902:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  423906:\t48 89 c6             \tmov    %rax,%rsi\n  423909:\tbf 99 3b 43 00       \tmov    $0x433b99,%edi\n  42390e:\te8 dc fa 00 00       \tcallq  4333ef <tty_write>\n  423913:\t90                   \tnop\n  423914:\tc9                   \tleaveq \n  423915:\tc3                   \tretq   ", "code_s": "__int64 __fastcall screen_write_clearstartofline(_QWORD *a1) {\n  char <span class=\"supfact\">v2</span>[Number];\n  unsigned int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = a1[Number];\n  screen_write_initctx(a1, (__int64)<span class=\"supfact\">v2</span>);\n  <span class=\"supfact\">v3</span> =\n      *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v4</span> + Number) + Number L);\n  if (*(_DWORD *)(<span class=\"supfact\">v4</span> + Number) <= <span class=\"supfact\">v3</span> - Number)\n    grid_view_clear(*(_QWORD *)(<span class=\"supfact\">v4</span> + Number), Number,\n                    *(_DWORD *)(<span class=\"supfact\">v4</span> + Number),\n                    *(_DWORD *)(<span class=\"supfact\">v4</span> + Number) + Number, Number);\n  else\n    grid_view_clear(*(_QWORD *)(<span class=\"supfact\">v4</span> + Number), Number,\n                    *(_DWORD *)(<span class=\"supfact\">v4</span> + Number),\n                    <span class=\"supfact\">v3</span>, Number);\n  return tty_write(tty_cmd_clearstartofline, <span class=\"supfact\">v2</span>);\n}", "code_t": "void __cdecl screen_write_clearstartofline(screen_write_ctx *ctx) {\n  tty_ctx <span class=\"supfact\">ttyctx</span>;\n  u_int <span class=\"supfact\">sx</span>;\n  screen *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = ctx-><span class=\"supfact\">s</span>;\n  screen_write_initctx(ctx, &<span class=\"supfact\">ttyctx</span>);\n  <span class=\"supfact\">sx</span> = <span class=\"supfact\">s</span>->grid-><span class=\"supfact\">sx</span>;\n  if (<span class=\"supfact\">s</span>->cx <= <span class=\"supfact\">sx</span> - Number)\n    grid_view_clear(<span class=\"supfact\">s</span>->grid, Number, <span class=\"supfact\">s</span>->cy,\n                    <span class=\"supfact\">s</span>->cx + Number, Number);\n  else\n    grid_view_clear(<span class=\"supfact\">s</span>->grid, Number, <span class=\"supfact\">s</span>->cy,\n                    <span class=\"supfact\">sx</span>, Number);\n  tty_write((void (*)(tty *, const tty_ctx *))tty_cmd_clearstartofline,\n            &<span class=\"supfact\">ttyctx</span>);\n}", "var": [{"name": "v4", "type": "screen *", "ref_name": "s", "ref_type": "screen *"}, {"name": "v3", "type": "u_int", "ref_name": "sx", "ref_type": "u_int"}, {"name": "v2", "type": "struct tty_ctx { window_pane * wp; const grid_cell * cell; const grid_utf8 * utf8; u_int num; PADDING (4); void * ptr; u_int ocx; u_int ocy; u_int orupper; u_int orlower; }", "ref_name": "ttyctx", "ref_type": "struct tty_ctx { window_pane * wp; const grid_cell * cell; const grid_utf8 * utf8; u_int num; PADDING (4); void * ptr; u_int ocx; u_int ocy; u_int orupper; u_int orlower; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/1c63823da0e00a44d4de58dac08a08f99583cd862fbba6ec752f0074f38c3ca5", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/lib/RakNet/NatPunchthroughClient.o", "objdump": "00000000000002d2 <_ZNK6RakNet21NatPunchthroughClient22GetUPNPInternalAddressEv>:\n     2d2:\t55                   \tpush   %rbp\n     2d3:\t48 89 e5             \tmov    %rsp,%rbp\n     2d6:\t48 83 ec 60          \tsub    $0x60,%rsp\n     2da:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n     2de:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n     2e2:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     2e6:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     2ea:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n     2ee:\t48 8b 52 08          \tmov    0x8(%rdx),%rdx\n     2f2:\t48 8b 12             \tmov    (%rdx),%rdx\n     2f5:\t48 81 c2 80 01 00 00 \tadd    $0x180,%rdx\n     2fc:\t48 8b 0a             \tmov    (%rdx),%rcx\n     2ff:\tba 00 00 00 00       \tmov    $0x0,%edx\n     304:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 30b <_ZNK6RakNet21NatPunchthroughClient22GetUPNPInternalAddressEv+0x39>\n     30b:\t48 89 c7             \tmov    %rax,%rdi\n     30e:\tff d1                \tcallq  *%rcx\n     310:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     314:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n     318:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n     31c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     321:\t48 89 c7             \tmov    %rax,%rdi\n     324:\te8 00 00 00 00       \tcallq  329 <_ZNK6RakNet21NatPunchthroughClient22GetUPNPInternalAddressEv+0x57>\n     329:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n     32d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     331:\t48 89 d6             \tmov    %rdx,%rsi\n     334:\t48 89 c7             \tmov    %rax,%rdi\n     337:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     33c:\te8 00 00 00 00       \tcallq  341 <_ZNK6RakNet21NatPunchthroughClient22GetUPNPInternalAddressEv+0x6f>\n     341:\t90                   \tnop\n     342:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     346:\tc9                   \tleaveq \n     347:\tc3                   \tretq   ", "code_s": "RakNet NatPunchthroughClient *__fastcall RakNet NatPunchthroughClient\nGetUPNPInternalAddress(RakNet NatPunchthroughClient *this, __int64 a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = (*(__int64(__fastcall **)(_QWORD, _QWORD, _QWORD))(\n      **(_QWORD **)(a2 + Number) + Number L))(\n      *(_QWORD *)(a2 + Number), RakNet UNASSIGNED_SYSTEM_ADDRESS, Number L);\n  RakNet SystemAddress ToString((RakNet SystemAddress *)&<span class=\"supfact\">v4</span>,\n                                Number, <span class=\"supfact\">v3</span>);\n  RakNet RakString RakString(this, <span class=\"supfact\">v3</span>);\n  return this;\n}", "code_t": "RakNet RakString __cdecl RakNet NatPunchthroughClient\nGetUPNPInternalAddress(const RakNet NatPunchthroughClient *const this) {\n  __int64 v1;\n  char <span class=\"supfact\">dest</span>[Number];\n  RakNet SystemAddress <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = (RakNet SystemAddress)(\n      *(__int64(__fastcall **)(_QWORD, const RakNet SystemAddress, _QWORD))(\n          **(_QWORD **)(v1 + Number) + Number L))(\n      *(_QWORD *)(v1 + Number), RakNet UNASSIGNED_SYSTEM_ADDRESS, Number L);\n  RakNet SystemAddress ToString(&<span class=\"supfact\">v4</span>, Number,\n                                <span class=\"supfact\">dest</span>);\n  RakNet RakString RakString((RakNet RakString *)this, <span class=\"supfact\">dest</span>);\n  return (RakNet RakString)this;\n}", "var": [{"name": "v4", "type": "struct RakNet::SystemAddress { uint32_t binaryAddress; unsigned __int16 port; RakNet::SystemIndex systemIndex; }", "ref_name": "v4", "ref_type": "struct RakNet::SystemAddress { uint32_t binaryAddress; unsigned __int16 port; RakNet::SystemIndex systemIndex; }"}, {"name": "v3", "type": "char[64]", "ref_name": "dest", "ref_type": "char[64]"}], "body_in_train": false}, {"repo_owner": "pathscale", "repo_name": "nvopencc", "path": "pathscale/nvopencc/4df8736b891d6c23ec894776b0817acbe25c05550079d9efb89caa62245fedb6", "path_in_repo": "pathscale/nvopencc/src/targia3264_nvisa_rel/gccfe/gnu/cfgbuild.o", "objdump": "0000000000001130 <find_bb_boundaries>:\n    1130:\t55                   \tpush   %rbp\n    1131:\t48 89 e5             \tmov    %rsp,%rbp\n    1134:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1138:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    113c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1140:\t48 8b 00             \tmov    (%rax),%rax\n    1143:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1147:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    114b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    114f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1153:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    115a:\t00 \n    115b:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    1162:\t00 \n    1163:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1167:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    116b:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n    116f:\t0f 84 6e 01 00 00    \tje     12e3 <find_bb_boundaries+0x1b3>\n    1175:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1179:\t0f b7 00             \tmovzwl (%rax),%eax\n    117c:\t66 83 f8 2e          \tcmp    $0x2e,%ax\n    1180:\t75 0c                \tjne    118e <find_bb_boundaries+0x5e>\n    1182:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1186:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    118a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    118e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1192:\t0f b7 00             \tmovzwl (%rax),%eax\n    1195:\t0f b7 c0             \tmovzwl %ax,%eax\n    1198:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    119b:\t83 7d dc 2e          \tcmpl   $0x2e,-0x24(%rbp)\n    119f:\t0f 85 8b 00 00 00    \tjne    1230 <find_bb_boundaries+0x100>\n    11a5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11a9:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    11ad:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    11b1:\t48 89 d6             \tmov    %rdx,%rsi\n    11b4:\t48 89 c7             \tmov    %rax,%rdi\n    11b7:\te8 00 00 00 00       \tcallq  11bc <find_bb_boundaries+0x8c>\n    11bc:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    11c0:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    11c5:\t74 0c                \tje     11d3 <find_bb_boundaries+0xa3>\n    11c7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    11cb:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    11cf:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    11d3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    11d7:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    11db:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    11df:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    11e3:\t48 89 c7             \tmov    %rax,%rdi\n    11e6:\te8 00 00 00 00       \tcallq  11eb <find_bb_boundaries+0xbb>\n    11eb:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    11f2:\t00 \n    11f3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11f7:\t0f b6 40 03          \tmovzbl 0x3(%rax),%eax\n    11fb:\t83 e0 01             \tand    $0x1,%eax\n    11fe:\t0f b6 c0             \tmovzbl %al,%eax\n    1201:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n    1204:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1208:\t0f b6 40 03          \tmovzbl 0x3(%rax),%eax\n    120c:\td0 e8                \tshr    %al\n    120e:\t83 e0 01             \tand    $0x1,%eax\n    1211:\t0f b6 c0             \tmovzbl %al,%eax\n    1214:\t09 d0                \tor     %edx,%eax\n    1216:\t85 c0                \ttest   %eax,%eax\n    1218:\t74 16                \tje     1230 <find_bb_boundaries+0x100>\n    121a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    121e:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1223:\t48 89 c6             \tmov    %rax,%rsi\n    1226:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    122b:\te8 00 00 00 00       \tcallq  1230 <find_bb_boundaries+0x100>\n    1230:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1235:\t74 57                \tje     128e <find_bb_boundaries+0x15e>\n    1237:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    123b:\t48 89 c7             \tmov    %rax,%rdi\n    123e:\te8 bd ed ff ff       \tcallq  0 <inside_basic_block_p>\n    1243:\t84 c0                \ttest   %al,%al\n    1245:\t74 47                \tje     128e <find_bb_boundaries+0x15e>\n    1247:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    124b:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    124f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1253:\t48 89 d6             \tmov    %rdx,%rsi\n    1256:\t48 89 c7             \tmov    %rax,%rdi\n    1259:\te8 00 00 00 00       \tcallq  125e <find_bb_boundaries+0x12e>\n    125e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1262:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1266:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    126a:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    126e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1272:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1276:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    127a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    127e:\t48 89 c7             \tmov    %rax,%rdi\n    1281:\te8 00 00 00 00       \tcallq  1286 <find_bb_boundaries+0x156>\n    1286:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    128d:\t00 \n    128e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1292:\t48 89 c7             \tmov    %rax,%rdi\n    1295:\te8 00 00 00 00       \tcallq  129a <find_bb_boundaries+0x16a>\n    129a:\t84 c0                \ttest   %al,%al\n    129c:\t74 08                \tje     12a6 <find_bb_boundaries+0x176>\n    129e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    12a2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    12a6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    12aa:\t48 3b 45 e8          \tcmp    -0x18(%rbp),%rax\n    12ae:\t74 11                \tje     12c1 <find_bb_boundaries+0x191>\n    12b0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    12b4:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    12b8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    12bc:\te9 cd fe ff ff       \tjmpq   118e <find_bb_boundaries+0x5e>\n    12c1:\t90                   \tnop\n    12c2:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    12c7:\t74 0c                \tje     12d5 <find_bb_boundaries+0x1a5>\n    12c9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    12cd:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    12d1:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    12d5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    12d9:\t48 89 c7             \tmov    %rax,%rdi\n    12dc:\te8 00 00 00 00       \tcallq  12e1 <find_bb_boundaries+0x1b1>\n    12e1:\teb 01                \tjmp    12e4 <find_bb_boundaries+0x1b4>\n    12e3:\t90                   \tnop\n    12e4:\tc9                   \tleaveq \n    12e5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall find_bb_boundaries(__int64 *a1) {\n  __int64 result;\n  __int64 *<span class=\"supfact\">v2</span>;\n  __int64 v3;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v2</span> = a1;\n  <span class=\"supfact\">v7</span> = *a1;\n  <span class=\"supfact\">v5</span> = a1[Number];\n  <span class=\"supfact\">v6</span> = Number L;\n  result = <span class=\"supfact\">v5</span>;\n  if (*a1 != <span class=\"supfact\">v5</span>) {\n    if (*(_WORD *)<span class=\"supfact\">v7</span> == Number)\n      <span class=\"supfact\">v7</span> = *(_QWORD *)(<span class=\"supfact\">v7</span> + Number);\n    while (Number) {\n      if (*(_WORD *)<span class=\"supfact\">v7</span> == Number) {\n        v3 = split_block(<span class=\"supfact\">v2</span>,\n                         *(_QWORD *)(<span class=\"supfact\">v7</span> + Number));\n        if (<span class=\"supfact\">v6</span>)\n          <span class=\"supfact\">v2</span>[Number] = <span class=\"supfact\">v6</span>;\n        <span class=\"supfact\">v2</span> = *(__int64 **)(v3 + Number);\n        remove_edge(v3);\n        <span class=\"supfact\">v6</span> = Number L;\n        if ((Number * (*(_BYTE *)(<span class=\"supfact\">v7</span> + Number) & Number)) |\n            ((*(_BYTE *)(<span class=\"supfact\">v7</span> + Number) & Number) != Number))\n          make_edge(&entry_exit_blocks, <span class=\"supfact\">v2</span>, Number L);\n      }\n      if (<span class=\"supfact\">v6</span> &&\n          (unsigned __int8)inside_basic_block_p(<span class=\"supfact\">v7</span>)) {\n        v4 = split_block(<span class=\"supfact\">v2</span>,\n                         *(_QWORD *)(<span class=\"supfact\">v7</span> + Number));\n        <span class=\"supfact\">v2</span>[Number] = <span class=\"supfact\">v6</span>;\n        <span class=\"supfact\">v2</span> = *(__int64 **)(v4 + Number);\n        remove_edge(v4);\n        <span class=\"supfact\">v6</span> = Number L;\n      }\n      if ((unsigned __int8)control_flow_insn_p(<span class=\"supfact\">v7</span>))\n        <span class=\"supfact\">v6</span> = <span class=\"supfact\">v7</span>;\n      if (<span class=\"supfact\">v7</span> == <span class=\"supfact\">v5</span>)\n        break;\n      <span class=\"supfact\">v7</span> = *(_QWORD *)(<span class=\"supfact\">v7</span> + Number);\n    }\n    if (<span class=\"supfact\">v6</span>)\n      <span class=\"supfact\">v2</span>[Number] = <span class=\"supfact\">v6</span>;\n    result = purge_dead_edges(<span class=\"supfact\">v2</span>);\n  }\n  return result;\n}", "code_t": "void __cdecl find_bb_boundaries(basic_block bb) {\n  basic_block <span class=\"supfact\">bba</span>;\n  edge fallthru;\n  edge fallthrua;\n  rtx_def *<span class=\"supfact\">end</span>;\n  rtx <span class=\"supfact\">flow_transfer_insn</span>;\n  rtx <span class=\"supfact\">insn</span>;\n  <span class=\"supfact\">bba</span> = bb;\n  <span class=\"supfact\">insn</span> = bb->head;\n  <span class=\"supfact\">end</span> = bb-><span class=\"supfact\">end</span>;\n  <span class=\"supfact\">flow_transfer_insn</span> = Number L;\n  if (bb->head != <span class=\"supfact\">end</span>) {\n    if (*(_WORD *)<span class=\"supfact\">insn</span> == Number)\n      <span class=\"supfact\">insn</span> = <span class=\"supfact\">insn</span>[Number].fld[Number].rtx;\n    while (Number) {\n      if (*(_WORD *)<span class=\"supfact\">insn</span> == Number) {\n        fallthru = (edge)split_block(<span class=\"supfact\">bba</span>,\n                                     *(_QWORD *)&<span class=\"supfact\">insn</span>[Number]);\n        if (<span class=\"supfact\">flow_transfer_insn</span>)\n          <span class=\"supfact\">bba</span>-><span class=\"supfact\">end</span> =\n              <span class=\"supfact\">flow_transfer_insn</span>;\n        <span class=\"supfact\">bba</span> = fallthru->dest;\n        remove_edge(fallthru);\n        <span class=\"supfact\">flow_transfer_insn</span> = Number L;\n        if ((Number * (*((_BYTE *)<span class=\"supfact\">insn</span> + Number) & Number)) |\n            ((*((_BYTE *)<span class=\"supfact\">insn</span> + Number) & Number) != Number))\n          make_edge(entry_exit_blocks, <span class=\"supfact\">bba</span>, Number L);\n      }\n      if (<span class=\"supfact\">flow_transfer_insn</span> &&\n          inside_basic_block_p(<span class=\"supfact\">insn</span>)) {\n        fallthrua = (edge)split_block(<span class=\"supfact\">bba</span>,\n                                      *(_QWORD *)&<span class=\"supfact\">insn</span>[Number]);\n        <span class=\"supfact\">bba</span>-><span class=\"supfact\">end</span> =\n            <span class=\"supfact\">flow_transfer_insn</span>;\n        <span class=\"supfact\">bba</span> = fallthrua->dest;\n        remove_edge(fallthrua);\n        <span class=\"supfact\">flow_transfer_insn</span> = Number L;\n      }\n      if (control_flow_insn_p(<span class=\"supfact\">insn</span>))\n        <span class=\"supfact\">flow_transfer_insn</span> = <span class=\"supfact\">insn</span>;\n      if (<span class=\"supfact\">insn</span> == <span class=\"supfact\">end</span>)\n        break;\n      <span class=\"supfact\">insn</span> = <span class=\"supfact\">insn</span>[Number].fld[Number].rtx;\n    }\n    if (<span class=\"supfact\">flow_transfer_insn</span>)\n      <span class=\"supfact\">bba</span>-><span class=\"supfact\">end</span> =\n          <span class=\"supfact\">flow_transfer_insn</span>;\n    purge_dead_edges(<span class=\"supfact\">bba</span>);\n  }\n}", "var": [{"name": "v7", "type": "rtx", "ref_name": "insn", "ref_type": "rtx"}, {"name": "v6", "type": "rtx", "ref_name": "flow_transfer_insn", "ref_type": "rtx"}, {"name": "v5", "type": "rtx", "ref_name": "end", "ref_type": "rtx_def *"}, {"name": "v2", "type": "rtx", "ref_name": "bba", "ref_type": "basic_block"}], "body_in_train": false}, {"repo_owner": "balabit-deps", "repo_name": "balabit-os-7-slang2", "path": "balabit-deps/balabit-os-7-slang2/123d7e2224bd32f66ed358a995141e3e36aedb613d3b5f8ef624006f1dfabe22", "path_in_repo": "balabit-deps/balabit-os-7-slang2/src/curses/battle", "objdump": "0000000000401c11 <checkplace>:\n  401c11:\t55                   \tpush   %rbp\n  401c12:\t48 89 e5             \tmov    %rsp,%rbp\n  401c15:\t48 83 ec 20          \tsub    $0x20,%rsp\n  401c19:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  401c1d:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  401c20:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n  401c23:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  401c26:\t48 63 c2             \tmovslq %edx,%rax\n  401c29:\t48 69 c0 67 66 66 66 \timul   $0x66666667,%rax,%rax\n  401c30:\t48 c1 e8 20          \tshr    $0x20,%rax\n  401c34:\t89 c1                \tmov    %eax,%ecx\n  401c36:\tc1 f9 02             \tsar    $0x2,%ecx\n  401c39:\t89 d0                \tmov    %edx,%eax\n  401c3b:\tc1 f8 1f             \tsar    $0x1f,%eax\n  401c3e:\t29 c1                \tsub    %eax,%ecx\n  401c40:\t89 c8                \tmov    %ecx,%eax\n  401c42:\tc1 e0 02             \tshl    $0x2,%eax\n  401c45:\t01 c8                \tadd    %ecx,%eax\n  401c47:\t01 c0                \tadd    %eax,%eax\n  401c49:\t29 c2                \tsub    %eax,%edx\n  401c4b:\t89 d0                \tmov    %edx,%eax\n  401c4d:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  401c50:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  401c53:\t48 63 d0             \tmovslq %eax,%rdx\n  401c56:\t48 69 d2 67 66 66 66 \timul   $0x66666667,%rdx,%rdx\n  401c5d:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  401c61:\tc1 fa 02             \tsar    $0x2,%edx\n  401c64:\tc1 f8 1f             \tsar    $0x1f,%eax\n  401c67:\t29 c2                \tsub    %eax,%edx\n  401c69:\t89 d0                \tmov    %edx,%eax\n  401c6b:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  401c6e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401c72:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n  401c76:\t0f be d0             \tmovsbl %al,%edx\n  401c79:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  401c7c:\t01 d0                \tadd    %edx,%eax\n  401c7e:\t83 f8 0a             \tcmp    $0xa,%eax\n  401c81:\t7e 06                \tjle    401c89 <checkplace+0x78>\n  401c83:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n  401c87:\t74 1b                \tje     401ca4 <checkplace+0x93>\n  401c89:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401c8d:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n  401c91:\t0f be d0             \tmovsbl %al,%edx\n  401c94:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  401c97:\t01 d0                \tadd    %edx,%eax\n  401c99:\t83 f8 0a             \tcmp    $0xa,%eax\n  401c9c:\t7e 5e                \tjle    401cfc <checkplace+0xeb>\n  401c9e:\t83 7d e0 01          \tcmpl   $0x1,-0x20(%rbp)\n  401ca2:\t75 58                \tjne    401cfc <checkplace+0xeb>\n  401ca4:\t8b 05 1e 46 00 00    \tmov    0x461e(%rip),%eax        # 4062c8 <turn>\n  401caa:\t85 c0                \ttest   %eax,%eax\n  401cac:\t75 43                \tjne    401cf1 <checkplace+0xe0>\n  401cae:\tbf 03 00 00 00       \tmov    $0x3,%edi\n  401cb3:\te8 2f fd ff ff       \tcallq  4019e7 <rnd>\n  401cb8:\t83 f8 02             \tcmp    $0x2,%eax\n  401cbb:\t74 28                \tje     401ce5 <checkplace+0xd4>\n  401cbd:\t83 f8 02             \tcmp    $0x2,%eax\n  401cc0:\t7f 30                \tjg     401cf2 <checkplace+0xe1>\n  401cc2:\t85 c0                \ttest   %eax,%eax\n  401cc4:\t74 07                \tje     401ccd <checkplace+0xbc>\n  401cc6:\t83 f8 01             \tcmp    $0x1,%eax\n  401cc9:\t74 0e                \tje     401cd9 <checkplace+0xc8>\n  401ccb:\teb 25                \tjmp    401cf2 <checkplace+0xe1>\n  401ccd:\tbf a0 43 40 00       \tmov    $0x4043a0,%edi\n  401cd2:\te8 fd 00 00 00       \tcallq  401dd4 <error>\n  401cd7:\teb 19                \tjmp    401cf2 <checkplace+0xe1>\n  401cd9:\tbf cb 43 40 00       \tmov    $0x4043cb,%edi\n  401cde:\te8 f1 00 00 00       \tcallq  401dd4 <error>\n  401ce3:\teb 0d                \tjmp    401cf2 <checkplace+0xe1>\n  401ce5:\tbf e8 43 40 00       \tmov    $0x4043e8,%edi\n  401cea:\te8 e5 00 00 00       \tcallq  401dd4 <error>\n  401cef:\teb 01                \tjmp    401cf2 <checkplace+0xe1>\n  401cf1:\t90                   \tnop\n  401cf2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401cf7:\te9 d6 00 00 00       \tjmpq   401dd2 <checkplace+0x1c1>\n  401cfc:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  401d03:\te9 b1 00 00 00       \tjmpq   401db9 <checkplace+0x1a8>\n  401d08:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n  401d0c:\t74 07                \tje     401d15 <checkplace+0x104>\n  401d0e:\tb8 0a 00 00 00       \tmov    $0xa,%eax\n  401d13:\teb 05                \tjmp    401d1a <checkplace+0x109>\n  401d15:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401d1a:\t0f af 45 fc          \timul   -0x4(%rbp),%eax\n  401d1e:\t89 c2                \tmov    %eax,%edx\n  401d20:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  401d23:\t01 d0                \tadd    %edx,%eax\n  401d25:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  401d28:\t8b 05 9a 45 00 00    \tmov    0x459a(%rip),%eax        # 4062c8 <turn>\n  401d2e:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  401d31:\t48 63 ca             \tmovslq %edx,%rcx\n  401d34:\t48 63 d0             \tmovslq %eax,%rdx\n  401d37:\t48 89 d0             \tmov    %rdx,%rax\n  401d3a:\t48 c1 e0 02          \tshl    $0x2,%rax\n  401d3e:\t48 01 d0             \tadd    %rdx,%rax\n  401d41:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  401d48:\t00 \n  401d49:\t48 01 d0             \tadd    %rdx,%rax\n  401d4c:\t48 c1 e0 02          \tshl    $0x2,%rax\n  401d50:\t48 01 c8             \tadd    %rcx,%rax\n  401d53:\t48 05 00 64 40 00    \tadd    $0x406400,%rax\n  401d59:\t0f b6 00             \tmovzbl (%rax),%eax\n  401d5c:\t84 c0                \ttest   %al,%al\n  401d5e:\t74 55                \tje     401db5 <checkplace+0x1a4>\n  401d60:\t8b 05 62 45 00 00    \tmov    0x4562(%rip),%eax        # 4062c8 <turn>\n  401d66:\t85 c0                \ttest   %eax,%eax\n  401d68:\t75 43                \tjne    401dad <checkplace+0x19c>\n  401d6a:\tbf 03 00 00 00       \tmov    $0x3,%edi\n  401d6f:\te8 73 fc ff ff       \tcallq  4019e7 <rnd>\n  401d74:\t83 f8 02             \tcmp    $0x2,%eax\n  401d77:\t74 28                \tje     401da1 <checkplace+0x190>\n  401d79:\t83 f8 02             \tcmp    $0x2,%eax\n  401d7c:\t7f 30                \tjg     401dae <checkplace+0x19d>\n  401d7e:\t85 c0                \ttest   %eax,%eax\n  401d80:\t74 07                \tje     401d89 <checkplace+0x178>\n  401d82:\t83 f8 01             \tcmp    $0x1,%eax\n  401d85:\t74 0e                \tje     401d95 <checkplace+0x184>\n  401d87:\teb 25                \tjmp    401dae <checkplace+0x19d>\n  401d89:\tbf 14 44 40 00       \tmov    $0x404414,%edi\n  401d8e:\te8 41 00 00 00       \tcallq  401dd4 <error>\n  401d93:\teb 19                \tjmp    401dae <checkplace+0x19d>\n  401d95:\tbf 31 44 40 00       \tmov    $0x404431,%edi\n  401d9a:\te8 35 00 00 00       \tcallq  401dd4 <error>\n  401d9f:\teb 0d                \tjmp    401dae <checkplace+0x19d>\n  401da1:\tbf 50 44 40 00       \tmov    $0x404450,%edi\n  401da6:\te8 29 00 00 00       \tcallq  401dd4 <error>\n  401dab:\teb 01                \tjmp    401dae <checkplace+0x19d>\n  401dad:\t90                   \tnop\n  401dae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401db3:\teb 1d                \tjmp    401dd2 <checkplace+0x1c1>\n  401db5:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401db9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401dbd:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n  401dc1:\t0f be c0             \tmovsbl %al,%eax\n  401dc4:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  401dc7:\t0f 8c 3b ff ff ff    \tjl     401d08 <checkplace+0xf7>\n  401dcd:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401dd2:\tc9                   \tleaveq \n  401dd3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall checkplace(__int64 a1, int a2, int a3) {\n  int v3;\n  __int64 result;\n  int v5;\n  int v6;\n  int <span class=\"supfact\">i</span>;\n  if ((*(char *)(a1 + Number) + a2 % Number <= Number || a3) &&\n      (*(char *)(a1 + Number) + a2 / Number <= Number || a3 != Number)) {\n    for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n      if (<span class=\"supfact\">i</span> >= *(char *)(a1 + Number))\n        return Number L;\n      v5 = a3 ? Number : Number;\n      if (board[Number * turn + <span class=\"supfact\">i</span> * v5 + a2])\n        break;\n    }\n    if (!turn) {\n      v6 = rnd(Number);\n      if (v6 == Number) {\n        error(String);\n      } else if (v6 <= Number) {\n        if (v6) {\n          if (v6 == Number)\n            error(String);\n        } else {\n          error(String);\n        }\n      }\n    }\n    result = Number L;\n  } else {\n    if (!turn) {\n      v3 = rnd(Number);\n      if (v3 == Number) {\n        error(String);\n      } else if (v3 <= Number) {\n        if (v3) {\n          if (v3 == Number)\n            error(String);\n        } else {\n          error(String);\n        }\n      }\n    }\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl checkplace(_ships *ss_0, int c, int d) {\n  int v3;\n  int result;\n  int v5;\n  int v6;\n  int <span class=\"supfact\">l</span>;\n  if ((ss_0->length + c % Number <= Number || d) &&\n      (ss_0->length + c / Number <= Number || d != Number)) {\n    for (<span class=\"supfact\">l</span> = Number;; ++<span class=\"supfact\">l</span>) {\n      if (<span class=\"supfact\">l</span> >= ss_0->length)\n        return Number;\n      v5 = d ? Number : Number;\n      if (board[Number * turn + <span class=\"supfact\">l</span> * v5 + c])\n        break;\n    }\n    if (!turn) {\n      v6 = rnd(Number);\n      if (v6 == Number) {\n        error(String);\n      } else if (v6 <= Number) {\n        if (v6) {\n          if (v6 == Number)\n            error(String);\n        } else {\n          error(String);\n        }\n      }\n    }\n    result = Number;\n  } else {\n    if (!turn) {\n      v3 = rnd(Number);\n      if (v3 == Number) {\n        error(String);\n      } else if (v3 <= Number) {\n        if (v3) {\n          if (v3 == Number)\n            error(String);\n        } else {\n          error(String);\n        }\n      }\n    }\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "i", "type": "int", "ref_name": "l", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "jmartif", "repo_name": "qemu", "path": "jmartif/qemu/813949404622e0f9a7e8aca32dbc157fdbeba15400791387291b8d2e89b27d7b", "path_in_repo": "jmartif/qemu//block/dmg.o", "objdump": "0000000000000167 <read_uint32>:\n     167:\t55                   \tpush   %rbp\n     168:\t48 89 e5             \tmov    %rsp,%rbp\n     16b:\t48 83 ec 30          \tsub    $0x30,%rsp\n     16f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     173:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     177:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     17b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     182:\t00 00 \n     184:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     188:\t31 c0                \txor    %eax,%eax\n     18a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     18e:\t48 8b 80 68 0c 00 00 \tmov    0xc68(%rax),%rax\n     195:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n     199:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n     19d:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n     1a2:\t48 89 c7             \tmov    %rax,%rdi\n     1a5:\te8 00 00 00 00       \tcallq  1aa <read_uint32+0x43>\n     1aa:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     1ad:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     1b1:\t79 05                \tjns    1b8 <read_uint32+0x51>\n     1b3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     1b6:\teb 15                \tjmp    1cd <read_uint32+0x66>\n     1b8:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n     1bb:\t89 c7                \tmov    %eax,%edi\n     1bd:\te8 8e fe ff ff       \tcallq  50 <be32_to_cpu>\n     1c2:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     1c6:\t89 02                \tmov    %eax,(%rdx)\n     1c8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     1cd:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     1d1:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     1d8:\t00 00 \n     1da:\t74 05                \tje     1e1 <read_uint32+0x7a>\n     1dc:\te8 00 00 00 00       \tcallq  1e1 <read_uint32+0x7a>\n     1e1:\tc9                   \tleaveq \n     1e2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_uint32(__int64 a1, __int64 a2, _DWORD *a3) {\n  unsigned int <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  <span class=\"supfact\">v6</span> =\n      bdrv_pread(*(_QWORD *)(a1 + Number), a2, &<span class=\"supfact\">v5</span>, Number L);\n  if ((<span class=\"supfact\">v6</span> & Number) != Number)\n    return <span class=\"supfact\">v6</span>;\n  *a3 = be32_to_cpu(<span class=\"supfact\">v5</span>);\n  return Number L;\n}", "code_t": "int __cdecl read_uint32(BlockDriverState_0 *bs, int64_t offset,\n                        uint32_t *result) {\n  uint32_t <span class=\"supfact\">buffer</span>;\n  int <span class=\"supfact\">ret</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  <span class=\"supfact\">ret</span> =\n      bdrv_pread(bs->file, offset, &<span class=\"supfact\">buffer</span>, Number L);\n  if (<span class=\"supfact\">ret</span> < Number)\n    return <span class=\"supfact\">ret</span>;\n  *result = be32_to_cpu(<span class=\"supfact\">buffer</span>);\n  return Number;\n}", "var": [{"name": "v7", "type": "unsigned __int64", "ref_name": "v7", "ref_type": "unsigned __int64"}, {"name": "v6", "type": "uint32_t", "ref_name": "ret", "ref_type": "int"}, {"name": "v5", "type": "uint32_t", "ref_name": "buffer", "ref_type": "uint32_t"}], "body_in_train": false}, {"repo_owner": "PotatoesBasket", "repo_name": "Bullet-Hell", "path": "PotatoesBasket/Bullet-Hell/e37d0a975dbb5123486e3d80d6c02d4b01e44cadac366b739d663f001972ce1d", "path_in_repo": "PotatoesBasket/Bullet-Hell/dependencies/imgui/examples/opengl3_example/opengl3_example", "objdump": "0000000000421b96 <_ZN25ImGuiTextEditCallbackData11DeleteCharsEii>:\n  421b96:\t55                   \tpush   %rbp\n  421b97:\t48 89 e5             \tmov    %rsp,%rbp\n  421b9a:\t48 83 ec 30          \tsub    $0x30,%rsp\n  421b9e:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  421ba2:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  421ba5:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n  421ba8:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  421bab:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  421bae:\t01 c2                \tadd    %eax,%edx\n  421bb0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421bb4:\t8b 40 20             \tmov    0x20(%rax),%eax\n  421bb7:\t39 c2                \tcmp    %eax,%edx\n  421bb9:\t7e 19                \tjle    421bd4 <_ZN25ImGuiTextEditCallbackData11DeleteCharsEii+0x3e>\n  421bbb:\tb9 20 5b 45 00       \tmov    $0x455b20,%ecx\n  421bc0:\tba 33 1d 00 00       \tmov    $0x1d33,%edx\n  421bc5:\tbe 6e 44 45 00       \tmov    $0x45446e,%esi\n  421bca:\tbf 58 5b 45 00       \tmov    $0x455b58,%edi\n  421bcf:\te8 bc 05 fe ff       \tcallq  402190 <__assert_fail@plt>\n  421bd4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421bd8:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n  421bdc:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  421bdf:\t48 98                \tcltq   \n  421be1:\t48 01 d0             \tadd    %rdx,%rax\n  421be4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  421be8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421bec:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  421bf0:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  421bf3:\t48 63 ca             \tmovslq %edx,%rcx\n  421bf6:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n  421bf9:\t48 63 d2             \tmovslq %edx,%rdx\n  421bfc:\t48 01 ca             \tadd    %rcx,%rdx\n  421bff:\t48 01 d0             \tadd    %rdx,%rax\n  421c02:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  421c06:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  421c0a:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  421c0e:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n  421c12:\t0f b6 00             \tmovzbl (%rax),%eax\n  421c15:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n  421c18:\t80 7d ef 00          \tcmpb   $0x0,-0x11(%rbp)\n  421c1c:\t74 14                \tje     421c32 <_ZN25ImGuiTextEditCallbackData11DeleteCharsEii+0x9c>\n  421c1e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  421c22:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  421c26:\t48 89 55 f8          \tmov    %rdx,-0x8(%rbp)\n  421c2a:\t0f b6 55 ef          \tmovzbl -0x11(%rbp),%edx\n  421c2e:\t88 10                \tmov    %dl,(%rax)\n  421c30:\teb d4                \tjmp    421c06 <_ZN25ImGuiTextEditCallbackData11DeleteCharsEii+0x70>\n  421c32:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  421c36:\tc6 00 00             \tmovb   $0x0,(%rax)\n  421c39:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c3d:\t8b 50 2c             \tmov    0x2c(%rax),%edx\n  421c40:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  421c43:\t01 d0                \tadd    %edx,%eax\n  421c45:\t39 45 d4             \tcmp    %eax,-0x2c(%rbp)\n  421c48:\t7f 15                \tjg     421c5f <_ZN25ImGuiTextEditCallbackData11DeleteCharsEii+0xc9>\n  421c4a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c4e:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n  421c51:\t2b 45 d0             \tsub    -0x30(%rbp),%eax\n  421c54:\t89 c2                \tmov    %eax,%edx\n  421c56:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c5a:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n  421c5d:\teb 16                \tjmp    421c75 <_ZN25ImGuiTextEditCallbackData11DeleteCharsEii+0xdf>\n  421c5f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c63:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n  421c66:\t39 45 d4             \tcmp    %eax,-0x2c(%rbp)\n  421c69:\t7f 0a                \tjg     421c75 <_ZN25ImGuiTextEditCallbackData11DeleteCharsEii+0xdf>\n  421c6b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c6f:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  421c72:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n  421c75:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c79:\t8b 50 2c             \tmov    0x2c(%rax),%edx\n  421c7c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c80:\t89 50 34             \tmov    %edx,0x34(%rax)\n  421c83:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c87:\t8b 50 34             \tmov    0x34(%rax),%edx\n  421c8a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c8e:\t89 50 30             \tmov    %edx,0x30(%rax)\n  421c91:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c95:\tc6 40 28 01          \tmovb   $0x1,0x28(%rax)\n  421c99:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421c9d:\t8b 40 20             \tmov    0x20(%rax),%eax\n  421ca0:\t2b 45 d0             \tsub    -0x30(%rbp),%eax\n  421ca3:\t89 c2                \tmov    %eax,%edx\n  421ca5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421ca9:\t89 50 20             \tmov    %edx,0x20(%rax)\n  421cac:\t90                   \tnop\n  421cad:\tc9                   \tleaveq \n  421cae:\tc3                   \tretq   \n  421caf:\t90                   \tnop", "code_s": "ImGuiTextEditCallbackData *__fastcall ImGuiTextEditCallbackData\nDeleteChars(ImGuiTextEditCallbackData *this, int a2, int a3) {\n  char *v3;\n  _BYTE *v4;\n  ImGuiTextEditCallbackData *result;\n  char <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  _BYTE *<span class=\"supfact\">v8</span>;\n  if (a3 + a2 > *((_DWORD *)this + Number))\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v8</span> = (_BYTE *)(*((_QWORD *)this + Number) + a2);\n  <span class=\"supfact\">v7</span> = a2 + (__int64)a3 + *((_QWORD *)this + Number);\n  while (Number) {\n    v3 = (char *)<span class=\"supfact\">v7</span>++;\n    <span class=\"supfact\">v6</span> = *v3;\n    if (!*v3)\n      break;\n    v4 = <span class=\"supfact\">v8</span>++;\n    *v4 = <span class=\"supfact\">v6</span>;\n  }\n  *<span class=\"supfact\">v8</span> = Number;\n  if (a2 > *((_DWORD *)this + Number) + a3) {\n    if (a2 <= *((_DWORD *)this + Number))\n      *((_DWORD *)this + Number) = a2;\n  } else {\n    *((_DWORD *)this + Number) -= a3;\n  }\n  *((_DWORD *)this + Number) = *((_DWORD *)this + Number);\n  *((_DWORD *)this + Number) = *((_DWORD *)this + Number);\n  *((_BYTE *)this + Number) = Number;\n  result = this;\n  *((_DWORD *)this + Number) -= a3;\n  return result;\n}", "code_t": "ImGuiTextEditCallbackData *__fastcall ImGuiTextEditCallbackData\nDeleteChars(ImGuiTextEditCallbackData *this, int a2, int a3) {\n  char *v3;\n  _BYTE *v4;\n  ImGuiTextEditCallbackData *result;\n  char <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  _BYTE *<span class=\"supfact\">v8</span>;\n  if (a3 + a2 > *((_DWORD *)this + Number))\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v8</span> = (_BYTE *)(*((_QWORD *)this + Number) + a2);\n  <span class=\"supfact\">v7</span> = a2 + (__int64)a3 + *((_QWORD *)this + Number);\n  while (Number) {\n    v3 = (char *)<span class=\"supfact\">v7</span>++;\n    <span class=\"supfact\">v6</span> = *v3;\n    if (!*v3)\n      break;\n    v4 = <span class=\"supfact\">v8</span>++;\n    *v4 = <span class=\"supfact\">v6</span>;\n  }\n  *<span class=\"supfact\">v8</span> = Number;\n  if (a2 > *((_DWORD *)this + Number) + a3) {\n    if (a2 <= *((_DWORD *)this + Number))\n      *((_DWORD *)this + Number) = a2;\n  } else {\n    *((_DWORD *)this + Number) -= a3;\n  }\n  *((_DWORD *)this + Number) = *((_DWORD *)this + Number);\n  *((_DWORD *)this + Number) = *((_DWORD *)this + Number);\n  *((_BYTE *)this + Number) = Number;\n  result = this;\n  *((_DWORD *)this + Number) -= a3;\n  return result;\n}", "var": [{"name": "v8", "type": "__int64", "ref_name": "v8", "ref_type": "_BYTE *"}, {"name": "v7", "type": "__int64", "ref_name": "v7", "ref_type": "__int64"}, {"name": "v6", "type": "char", "ref_name": "v6", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "fstltna", "repo_name": "conquest_bbs_source", "path": "fstltna/conquest_bbs_source/0e1a8589edf2a3b02b706f5a0b7ff9887d0bb280915b5c3d6666a84589f6f074", "path_in_repo": "fstltna/conquest_bbs_source//nUserl.o", "objdump": "0000000000000000 <nUserlInit>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n   b:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n   e:\t89 55 e4             \tmov    %edx,-0x1c(%rbp)\n  11:\t89 4d e0             \tmov    %ecx,-0x20(%rbp)\n  14:\t44 89 45 dc          \tmov    %r8d,-0x24(%rbp)\n  18:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  1b:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 21 <nUserlInit+0x21>\n  21:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  24:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 2a <nUserlInit+0x2a>\n  2a:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  2d:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 33 <nUserlInit+0x33>\n  33:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  36:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 3c <nUserlInit+0x3c>\n  3c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  43:\teb 13                \tjmp    58 <nUserlInit+0x58>\n  45:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  48:\t48 98                \tcltq   \n  4a:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4d:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n  54:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  58:\t81 7d fc f3 01 00 00 \tcmpl   $0x1f3,-0x4(%rbp)\n  5f:\t7e e4                \tjle    45 <nUserlInit+0x45>\n  61:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 6b <nUserlInit+0x6b>\n  68:\t00 00 00 \n  6b:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  72:\teb 43                \tjmp    b7 <nUserlInit+0xb7>\n  74:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 7b <nUserlInit+0x7b>\n  7b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  7e:\t48 63 d0             \tmovslq %eax,%rdx\n  81:\t48 89 d0             \tmov    %rdx,%rax\n  84:\t48 c1 e0 04          \tshl    $0x4,%rax\n  88:\t48 01 d0             \tadd    %rdx,%rax\n  8b:\t48 c1 e0 04          \tshl    $0x4,%rax\n  8f:\t48 01 c8             \tadd    %rcx,%rax\n  92:\t8b 00                \tmov    (%rax),%eax\n  94:\t85 c0                \ttest   %eax,%eax\n  96:\t74 1b                \tje     b3 <nUserlInit+0xb3>\n  98:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 9e <nUserlInit+0x9e>\n  9e:\t8d 50 01             \tlea    0x1(%rax),%edx\n  a1:\t89 15 00 00 00 00    \tmov    %edx,0x0(%rip)        # a7 <nUserlInit+0xa7>\n  a7:\t48 98                \tcltq   \n  a9:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  ac:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n  b3:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  b7:\t81 7d f8 f3 01 00 00 \tcmpl   $0x1f3,-0x8(%rbp)\n  be:\t7e b4                \tjle    74 <nUserlInit+0x74>\n  c0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # c6 <nUserlInit+0xc6>\n  c6:\t89 c6                \tmov    %eax,%esi\n  c8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  cd:\te8 00 00 00 00       \tcallq  d2 <nUserlInit+0xd2>\n  d2:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # dc <nUserlInit+0xdc>\n  d9:\t00 00 00 \n  dc:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  e0:\t74 0a                \tje     ec <nUserlInit+0xec>\n  e2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  e7:\te8 00 00 00 00       \tcallq  ec <nUserlInit+0xec>\n  ec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  f1:\tc9                   \tleaveq \n  f2:\tc3                   \tretq   ", "code_s": "__int64(__fastcall **__fastcall nUserlInit(int a1, int a2, int a3, int a4,\n                                           int a5))() {\n  int v5;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  retnode = a1;\n  snum = a3;\n  godlike = a4;\n  extrast = a5;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    uvec[<span class=\"supfact\">i</span>] = <span class=\"supfact\">i</span>;\n  nu = Number;\n  for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n       ++<span class=\"supfact\">j</span>) {\n    if (*(_DWORD *)(Users + Number L * <span class=\"supfact\">j</span>)) {\n      v5 = nu++;\n      uvec[v5] = <span class=\"supfact\">j</span>;\n    }\n  }\n  clbSortUsers(uvec, (unsigned int)nu);\n  fuser = Number;\n  if (a2)\n    setNode(nUserlNode);\n  return nUserlNode;\n}", "code_t": "scrNode_t *__cdecl nUserlInit(int nodeid, int setnode, int sn, int gl,\n                              int extra) {\n  int v5;\n  int <span class=\"supfact\">unum</span>;\n  int <span class=\"supfact\">i</span>;\n  retnode = nodeid;\n  snum = sn;\n  godlike = gl;\n  extrast = extra;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    uvec[<span class=\"supfact\">i</span>] = <span class=\"supfact\">i</span>;\n  nu = Number;\n  for (<span class=\"supfact\">unum</span> = Number; <span class=\"supfact\">unum</span> <= Number;\n       ++<span class=\"supfact\">unum</span>) {\n    if (*(_DWORD *)(Users + Number L * <span class=\"supfact\">unum</span>)) {\n      v5 = nu++;\n      uvec[v5] = <span class=\"supfact\">unum</span>;\n    }\n  }\n  clbSortUsers(uvec, (unsigned int)nu);\n  fuser = Number;\n  if (setnode)\n    setNode(&nUserlNode);\n  return &nUserlNode;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "j", "type": "int", "ref_name": "unum", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "lagopus", "repo_name": "virtio-net-ipc-qemu-1.0", "path": "lagopus/virtio-net-ipc-qemu-1.0/50d9871941d0596638a6aa4b38ad2194d2d0b8fbcc9a2ac94c2c18df6a76ddb9", "path_in_repo": "lagopus/virtio-net-ipc-qemu-1.0//libhw64/m48t59.o", "objdump": "00000000000017f8 <m48t59_init_isa>:\n    17f8:\t55                   \tpush   %rbp\n    17f9:\t48 89 e5             \tmov    %rsp,%rbp\n    17fc:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1800:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    1803:\t89 f0                \tmov    %esi,%eax\n    1805:\t89 55 c4             \tmov    %edx,-0x3c(%rbp)\n    1808:\t66 89 45 c8          \tmov    %ax,-0x38(%rbp)\n    180c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1813:\t00 00 \n    1815:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1819:\t31 c0                \txor    %eax,%eax\n    181b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1822 <m48t59_init_isa+0x2a>\n    1822:\te8 00 00 00 00       \tcallq  1827 <m48t59_init_isa+0x2f>\n    1827:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    182b:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    182e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1832:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1839 <m48t59_init_isa+0x41>\n    1839:\t48 89 c7             \tmov    %rax,%rdi\n    183c:\te8 00 00 00 00       \tcallq  1841 <m48t59_init_isa+0x49>\n    1841:\t0f b7 55 c8          \tmovzwl -0x38(%rbp),%edx\n    1845:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1849:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1850 <m48t59_init_isa+0x58>\n    1850:\t48 89 c7             \tmov    %rax,%rdi\n    1853:\te8 00 00 00 00       \tcallq  1858 <m48t59_init_isa+0x60>\n    1858:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    185c:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    185f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1866 <m48t59_init_isa+0x6e>\n    1866:\t48 89 c7             \tmov    %rax,%rdi\n    1869:\te8 00 00 00 00       \tcallq  186e <m48t59_init_isa+0x76>\n    186e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1872:\t48 89 c7             \tmov    %rax,%rdi\n    1875:\te8 00 00 00 00       \tcallq  187a <m48t59_init_isa+0x82>\n    187a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    187e:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1882:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1886:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    188a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    188e:\t48 05 88 00 00 00    \tadd    $0x88,%rax\n    1894:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1898:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    189c:\t48 8d b8 00 01 00 00 \tlea    0x100(%rax),%rdi\n    18a3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18a7:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n    18ad:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 18b4 <m48t59_init_isa+0xbc>\n    18b4:\t48 89 c2             \tmov    %rax,%rdx\n    18b7:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 18be <m48t59_init_isa+0xc6>\n    18be:\te8 00 00 00 00       \tcallq  18c3 <m48t59_init_isa+0xcb>\n    18c3:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    18c7:\t74 20                \tje     18e9 <m48t59_init_isa+0xf1>\n    18c9:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    18cc:\t0f b7 d0             \tmovzwl %ax,%edx\n    18cf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    18d3:\t48 8d 88 00 01 00 00 \tlea    0x100(%rax),%rcx\n    18da:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    18de:\t48 89 ce             \tmov    %rcx,%rsi\n    18e1:\t48 89 c7             \tmov    %rax,%rdi\n    18e4:\te8 00 00 00 00       \tcallq  18e9 <m48t59_init_isa+0xf1>\n    18e9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18ed:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    18f1:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    18f8:\t00 00 \n    18fa:\t74 05                \tje     1901 <m48t59_init_isa+0x109>\n    18fc:\te8 00 00 00 00       \tcallq  1901 <m48t59_init_isa+0x109>\n    1901:\tc9                   \tleaveq \n    1902:\tc3                   \tretq   ", "code_s": "__int64 __fastcall m48t59_init_isa(unsigned int a1, unsigned __int16 a2,\n                                   unsigned int a3) {\n  __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = isa_create(String);\n  qdev_prop_set_uint32(<span class=\"supfact\">v5</span>, String, a3);\n  qdev_prop_set_uint32(<span class=\"supfact\">v5</span>, String, a2);\n  qdev_prop_set_uint32(<span class=\"supfact\">v5</span>, String, a1);\n  qdev_init_nofail(<span class=\"supfact\">v5</span>);\n  memory_region_init_io(<span class=\"supfact\">v5</span> + Number, &m48t59_io_ops,\n                        <span class=\"supfact\">v5</span> + Number, String, Number L);\n  if (a1)\n    isa_register_ioport(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v5</span> + Number,\n                        (unsigned __int16)a1);\n  return <span class=\"supfact\">v5</span> + Number;\n}", "code_t": "M48t59State_0 *__cdecl m48t59_init_isa(uint32_t io_base, uint16_t size,\n                                       int type) {\n  ISADevice_0 *<span class=\"supfact\">dev</span>;\n  <span class=\"supfact\">dev</span> = (ISADevice_0 *)isa_create(String);\n  qdev_prop_set_uint32(<span class=\"supfact\">dev</span>, String, (unsigned int)type);\n  qdev_prop_set_uint32(<span class=\"supfact\">dev</span>, String, size);\n  qdev_prop_set_uint32(<span class=\"supfact\">dev</span>, String, io_base);\n  qdev_init_nofail(<span class=\"supfact\">dev</span>);\n  memory_region_init_io(<span class=\"supfact\">dev</span>[Number].isairq, &m48t59_io_ops,\n                        &<span class=\"supfact\">dev</span>[Number], String, Number L);\n  if (io_base)\n    isa_register_ioport(<span class=\"supfact\">dev</span>, <span class=\"supfact\">dev</span>[Number].isairq,\n                        (unsigned __int16)io_base);\n  return (M48t59State_0 *)&<span class=\"supfact\">dev</span>[Number];\n}", "var": [{"name": "v5", "type": "M48t59State_0 *", "ref_name": "dev", "ref_type": "ISADevice_0 *"}], "body_in_train": false}, {"repo_owner": "dtsund", "repo_name": "crawl-light", "path": "dtsund/crawl-light/c5cdd7d6a4e3965502aa08c47914ca5a40b92769b24b3f623d0c27b4b3e0f3f9", "path_in_repo": "dtsund/crawl-light/crawl-ref/source/zotdef.o", "objdump": "0000000000000e10 <_ZL11_gnoll_wavei>:\n     e10:\t55                   \tpush   %rbp\n     e11:\t41 b8 0a 00 00 00    \tmov    $0xa,%r8d\n     e17:\t89 fd                \tmov    %edi,%ebp\n     e19:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # e20 <_ZL11_gnoll_wavei+0x10>\n     e20:\t31 f6                \txor    %esi,%esi\n     e22:\t48 83 ec 30          \tsub    $0x30,%rsp\n     e26:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e2d <_ZL11_gnoll_wavei+0x1d>\n     e2d:\t48 8b 90 00 24 00 00 \tmov    0x2400(%rax),%rdx\n     e34:\t48 8d b8 f8 23 00 00 \tlea    0x23f8(%rax),%rdi\n     e3b:\te8 00 00 00 00       \tcallq  e40 <_ZL11_gnoll_wavei+0x30>\n     e40:\t89 ea                \tmov    %ebp,%edx\n     e42:\t48 8d 7c 24 10       \tlea    0x10(%rsp),%rdi\n     e47:\t31 f6                \txor    %esi,%esi\n     e49:\t48 b8 b8 00 00 00 b8 \tmovabs $0xb8000000b8,%rax\n     e50:\t00 00 00 \n     e53:\tc7 44 24 0c ff ff ff \tmovl   $0xffffffff,0xc(%rsp)\n     e5a:\tff \n     e5b:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n     e60:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n     e65:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n     e6a:\t48 b8 f7 00 00 00 ff \tmovabs $0xffffffff000000f7,%rax\n     e71:\tff ff ff \n     e74:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n     e79:\t48 b8 c4 01 00 00 f7 \tmovabs $0xf7000001c4,%rax\n     e80:\t00 00 00 \n     e83:\t48 89 44 24 04       \tmov    %rax,0x4(%rsp)\n     e88:\te8 43 f6 ff ff       \tcallq  4d0 <_ZL22_zotdef_fill_from_listP12monster_typeii>\n     e8d:\t48 8d 7c 24 04       \tlea    0x4(%rsp),%rdi\n     e92:\t89 ee                \tmov    %ebp,%esi\n     e94:\te8 77 f7 ff ff       \tcallq  610 <_ZL19_zotdef_choose_bossP12monster_typei>\n     e99:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # ea0 <_ZL11_gnoll_wavei+0x90>\n     ea0:\te8 9b f8 ff ff       \tcallq  740 <_ZL18_zotdef_danger_msgPKc>\n     ea5:\t48 83 c4 30          \tadd    $0x30,%rsp\n     ea9:\t5d                   \tpop    %rbp\n     eaa:\tc3                   \tretq   \n     eab:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)", "code_s": "__int64 __fastcall _gnoll_wave(int a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  _M_replace(&you[Number], Number L, you[Number], String, Number L);\n  <span class=\"supfact\">v3</span> = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v2</span> = Number;\n  _zotdef_fill_from_list(<span class=\"supfact\">v4</span>, Number, a1);\n  _zotdef_choose_boss(&<span class=\"supfact\">v2</span>, a1);\n  return _zotdef_danger_msg(String);\n}", "code_t": "__int64 __fastcall _gnoll_wave(int a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  _M_replace(&you[Number], Number L, you[Number], String, Number L);\n  <span class=\"supfact\">v3</span> = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">v2</span> = Number;\n  _zotdef_fill_from_list(<span class=\"supfact\">v4</span>, Number, a1);\n  _zotdef_choose_boss(&<span class=\"supfact\">v2</span>, a1);\n  return _zotdef_danger_msg(String);\n}", "var": [{"name": "v4", "type": "__int64[5]", "ref_name": "v4", "ref_type": "__int64[5]"}, {"name": "v3", "type": "int", "ref_name": "v3", "ref_type": "int"}, {"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "Pablololo12", "repo_name": "AlgoritmiaBasica", "path": "Pablololo12/AlgoritmiaBasica/43abf4cf2ff745bfc0b44fe98eb5e9f3eb6731d2ed316158def68bedf65ee197", "path_in_repo": "Pablololo12/AlgoritmiaBasica/Huffman/huf", "objdump": "0000000000401244 <obtener_frecuencias>:\n  401244:\t55                   \tpush   %rbp\n  401245:\t48 89 e5             \tmov    %rsp,%rbp\n  401248:\t48 83 ec 40          \tsub    $0x40,%rsp\n  40124c:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  401250:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  401255:\tbf 01 01 00 00       \tmov    $0x101,%edi\n  40125a:\te8 31 fe ff ff       \tcallq  401090 <calloc@plt>\n  40125f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401263:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401268:\tbf 00 01 00 00       \tmov    $0x100,%edi\n  40126d:\te8 1e fe ff ff       \tcallq  401090 <calloc@plt>\n  401272:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  401276:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40127a:\tbe 1b 30 40 00       \tmov    $0x40301b,%esi\n  40127f:\t48 89 c7             \tmov    %rax,%rdi\n  401282:\te8 39 fe ff ff       \tcallq  4010c0 <fopen@plt>\n  401287:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40128b:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n  401292:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  401299:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40129d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4012a1:\t48 89 d1             \tmov    %rdx,%rcx\n  4012a4:\tba 00 01 00 00       \tmov    $0x100,%edx\n  4012a9:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4012ae:\t48 89 c7             \tmov    %rax,%rdi\n  4012b1:\te8 9a fd ff ff       \tcallq  401050 <fread@plt>\n  4012b6:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  4012b9:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4012bc:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  4012bf:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4012c6:\teb 4f                \tjmp    401317 <obtener_frecuencias+0xd3>\n  4012c8:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4012cb:\t48 63 d0             \tmovslq %eax,%rdx\n  4012ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4012d2:\t48 01 d0             \tadd    %rdx,%rax\n  4012d5:\t0f b6 00             \tmovzbl (%rax),%eax\n  4012d8:\t0f b6 c0             \tmovzbl %al,%eax\n  4012db:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  4012e2:\t00 \n  4012e3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4012e7:\t48 01 d0             \tadd    %rdx,%rax\n  4012ea:\t8b 10                \tmov    (%rax),%edx\n  4012ec:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4012ef:\t48 63 c8             \tmovslq %eax,%rcx\n  4012f2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4012f6:\t48 01 c8             \tadd    %rcx,%rax\n  4012f9:\t0f b6 00             \tmovzbl (%rax),%eax\n  4012fc:\t0f b6 c0             \tmovzbl %al,%eax\n  4012ff:\t48 8d 0c 85 00 00 00 \tlea    0x0(,%rax,4),%rcx\n  401306:\t00 \n  401307:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40130b:\t48 01 c8             \tadd    %rcx,%rax\n  40130e:\t83 c2 01             \tadd    $0x1,%edx\n  401311:\t89 10                \tmov    %edx,(%rax)\n  401313:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  401317:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40131a:\t3b 45 dc             \tcmp    -0x24(%rbp),%eax\n  40131d:\t7c a9                \tjl     4012c8 <obtener_frecuencias+0x84>\n  40131f:\t81 7d dc 00 01 00 00 \tcmpl   $0x100,-0x24(%rbp)\n  401326:\t0f 84 6d ff ff ff    \tje     401299 <obtener_frecuencias+0x55>\n  40132c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401330:\t48 8d 90 00 04 00 00 \tlea    0x400(%rax),%rdx\n  401337:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40133a:\t89 02                \tmov    %eax,(%rdx)\n  40133c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401340:\t48 89 c7             \tmov    %rax,%rdi\n  401343:\te8 e8 fc ff ff       \tcallq  401030 <free@plt>\n  401348:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40134c:\t48 89 c7             \tmov    %rax,%rdi\n  40134f:\te8 0c fd ff ff       \tcallq  401060 <fclose@plt>\n  401354:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401358:\tc9                   \tleaveq \n  401359:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall obtener_frecuencias(const char *a1) {\n  int <span class=\"supfact\">v2</span>;\n  FILE *<span class=\"supfact\">stream</span>;\n  unsigned __int8 *<span class=\"supfact\">ptr</span>;\n  _DWORD *<span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v5</span> = calloc(Number, Number);\n  <span class=\"supfact\">ptr</span> = (unsigned __int8 *)calloc(Number, Number);\n  <span class=\"supfact\">stream</span> = fopen(a1, String);\n  <span class=\"supfact\">v7</span> = Number;\n  do {\n    <span class=\"supfact\">v2</span> =\n        fread(<span class=\"supfact\">ptr</span>, Number, Number, <span class=\"supfact\">stream</span>);\n    <span class=\"supfact\">v7</span> += <span class=\"supfact\">v2</span>;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v2</span>;\n         ++<span class=\"supfact\">i</span>)\n      ++<span class=\"supfact\">v5</span>[<span class=\"supfact\">ptr</span>[<span class=\"supfact\">i</span>]];\n  } while (<span class=\"supfact\">v2</span> == Number);\n  <span class=\"supfact\">v5</span>[Number] = <span class=\"supfact\">v7</span>;\n  free(<span class=\"supfact\">ptr</span>);\n  fclose(<span class=\"supfact\">stream</span>);\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "unsigned int *__cdecl obtener_frecuencias(char *nombre_fichero) {\n  int <span class=\"supfact\">leido</span>;\n  FILE *<span class=\"supfact\">fichero</span>;\n  unsigned __int8 *<span class=\"supfact\">buffer</span>;\n  unsigned int *<span class=\"supfact\">tabla</span>;\n  int <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">total</span>;\n  <span class=\"supfact\">tabla</span> = (unsigned int *)calloc(Number, Number);\n  <span class=\"supfact\">buffer</span> = (unsigned __int8 *)calloc(Number, Number);\n  <span class=\"supfact\">fichero</span> = fopen(nombre_fichero, String);\n  <span class=\"supfact\">total</span> = Number;\n  do {\n    <span class=\"supfact\">leido</span> =\n        fread(<span class=\"supfact\">buffer</span>, Number, Number, <span class=\"supfact\">fichero</span>);\n    <span class=\"supfact\">total</span> += <span class=\"supfact\">leido</span>;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">leido</span>;\n         ++<span class=\"supfact\">i</span>)\n      ++<span class=\"supfact\">tabla</span>[<span class=\"supfact\">buffer</span>[<span class=\"supfact\">i</span>]];\n  } while (<span class=\"supfact\">leido</span> == Number);\n  <span class=\"supfact\">tabla</span>[Number] = <span class=\"supfact\">total</span>;\n  free(<span class=\"supfact\">buffer</span>);\n  fclose(<span class=\"supfact\">fichero</span>);\n  return <span class=\"supfact\">tabla</span>;\n}", "var": [{"name": "v7", "type": "int", "ref_name": "total", "ref_type": "unsigned int"}, {"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v5", "type": "__unk__", "ref_name": "tabla", "ref_type": "unsigned int *"}, {"name": "ptr", "type": "__unk__", "ref_name": "buffer", "ref_type": "unsigned __int8 *"}, {"name": "stream", "type": "FILE *", "ref_name": "fichero", "ref_type": "FILE *"}, {"name": "v2", "type": "int", "ref_name": "leido", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "rjarzmik", "repo_name": "flashrom2", "path": "rjarzmik/flashrom2/a0d86487d8bf5255b05eef652cdb69eb53192a5573bedab6a339c4689754ea2b", "path_in_repo": "rjarzmik/flashrom2//flashrom2", "objdump": "0000000000403b0d <print_available_programmers>:\n  403b0d:\t55                   \tpush   %rbp\n  403b0e:\t48 89 e5             \tmov    %rsp,%rbp\n  403b11:\t48 83 ec 20          \tsub    $0x20,%rsp\n  403b15:\t48 8b 05 f4 b7 00 00 \tmov    0xb7f4(%rip),%rax        # 40f310 <programmers>\n  403b1c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  403b20:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  403b24:\t48 83 e8 48          \tsub    $0x48,%rax\n  403b28:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  403b2c:\teb 46                \tjmp    403b74 <print_available_programmers+0x67>\n  403b2e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  403b32:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  403b36:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  403b3a:\t48 8b 00             \tmov    (%rax),%rax\n  403b3d:\t49 89 d0             \tmov    %rdx,%r8\n  403b40:\t48 89 c1             \tmov    %rax,%rcx\n  403b43:\tba 94 ac 40 00       \tmov    $0x40ac94,%edx\n  403b48:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  403b4d:\tbf a0 ac 40 00       \tmov    $0x40aca0,%edi\n  403b52:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403b57:\te8 de 54 00 00       \tcallq  40903a <print_leveled>\n  403b5c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  403b60:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n  403b64:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  403b68:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  403b6c:\t48 83 e8 48          \tsub    $0x48,%rax\n  403b70:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  403b74:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  403b78:\t48 83 c0 48          \tadd    $0x48,%rax\n  403b7c:\t48 3d 10 f3 40 00    \tcmp    $0x40f310,%rax\n  403b82:\t75 aa                \tjne    403b2e <print_available_programmers+0x21>\n  403b84:\t90                   \tnop\n  403b85:\t90                   \tnop\n  403b86:\tc9                   \tleaveq \n  403b87:\tc3                   \tretq   ", "code_s": "char *__fastcall print_available_programmers(__int64 a1, __int64 a2, __int64 a3,\n                                             __int64 a4, __int64 a5, int a6) {\n  char *result;\n  char *<span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = (char *)programmers - Number;;\n       <span class=\"supfact\">i</span> =\n           (char *)(*((_QWORD *)<span class=\"supfact\">i</span> + Number) - Number L)) {\n    result = <span class=\"supfact\">i</span> + Number;\n    if (<span class=\"supfact\">i</span> + Number == (char *)&programmers)\n      break;\n    print_leveled((unsigned int)&unk_40ACA0, Number, (unsigned int)String,\n                  *(_QWORD *)<span class=\"supfact\">i</span>,\n                  *((_QWORD *)<span class=\"supfact\">i</span> + Number), a6);\n  }\n  return result;\n}", "code_t": "void __cdecl print_available_programmers() {\n  programmer *<span class=\"supfact\">mst</span>;\n  for (<span class=\"supfact\">mst</span> = (programmer *)&programmers.next[Number].prev;\n       &<span class=\"supfact\">mst</span>->list != &programmers;\n       <span class=\"supfact\">mst</span> =\n           (programmer *)&<span class=\"supfact\">mst</span>->list.next[Number].prev) {\n    print_leveled(&byte_40ACA0, MSG_WARN, String, <span class=\"supfact\">mst</span>->name,\n                  <span class=\"supfact\">mst</span>->desc);\n  }\n}", "var": [{"name": "i", "type": "__int64", "ref_name": "mst", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "oswystan", "repo_name": "ldscript", "path": "oswystan/ldscript/fed0618a6d776b85bbe06affd847d662ec2b8b9b7b513898112ff944d2f10b3e", "path_in_repo": "oswystan/ldscript//a.out", "objdump": "000000000040063c <_local_exit_>:\n  40063c:\t55                   \tpush   %rbp\n  40063d:\t48 89 e5             \tmov    %rsp,%rbp\n  400640:\t48 83 ec 20          \tsub    $0x20,%rsp\n  400644:\t48 c7 45 f0 00 30 40 \tmovq   $0x403000,-0x10(%rbp)\n  40064b:\t00 \n  40064c:\tb8 30 30 40 00       \tmov    $0x403030,%eax\n  400651:\t48 2d 00 30 40 00    \tsub    $0x403000,%rax\n  400657:\t48 c1 e8 04          \tshr    $0x4,%rax\n  40065b:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  40065e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  400665:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  400668:\t83 e8 01             \tsub    $0x1,%eax\n  40066b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40066e:\teb 22                \tjmp    400692 <_local_exit_+0x56>\n  400670:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  400673:\t48 98                \tcltq   \n  400675:\t48 c1 e0 04          \tshl    $0x4,%rax\n  400679:\t48 89 c2             \tmov    %rax,%rdx\n  40067c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  400680:\t48 01 d0             \tadd    %rdx,%rax\n  400683:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  400687:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40068c:\tff d2                \tcallq  *%rdx\n  40068e:\t83 6d fc 01          \tsubl   $0x1,-0x4(%rbp)\n  400692:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  400696:\t79 d8                \tjns    400670 <_local_exit_+0x34>\n  400698:\tbf 6e 07 40 00       \tmov    $0x40076e,%edi\n  40069d:\te8 8e fd ff ff       \tcallq  400430 <puts@plt>\n  4006a2:\t90                   \tnop\n  4006a3:\tc9                   \tleaveq \n  4006a4:\tc3                   \tretq   ", "code_s": "int local_exit_() {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> =\n           ((unsigned __int64)(&_bss_start - (char *)&g_initcall_start) >>\n            Number) -\n           Number;\n       <span class=\"supfact\">i</span> >= Number; --<span class=\"supfact\">i</span>)\n    (*(&g_initcall_start + Number * <span class=\"supfact\">i</span> + Number))();\n  return puts(String);\n}", "code_t": "int __cdecl local_exit_() {\n  int <span class=\"supfact\">i</span>;\n  for (\n      <span class=\"supfact\">i</span> =\n          ((unsigned __int64)(&_bss_start -\n                              (char\n                                   *)&_init_call_1_fn_core_init_fn_core_exit) >>\n           Number) -\n          Number;\n      <span class=\"supfact\">i</span> >= Number; --<span class=\"supfact\">i</span>)\n    (*((void (**)(void)) & _init_call_1_fn_core_init_fn_core_exit.exit +\n                               Number * <span class=\"supfact\">i</span>))();\n  return puts(String);\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "Gangstere44", "repo_name": "ASCYLIB_Test", "path": "Gangstere44/ASCYLIB_Test/bcbc01e07a1dc50080311bf68a567304ad17ca7f71a3de80aba1c0fc8e0dab9d", "path_in_repo": "Gangstere44/ASCYLIB_Test//bin/lb-ht_java", "objdump": "0000000000402d03 <chm_rem_prefetch>:\n  402d03:\t55                   \tpush   %rbp\n  402d04:\t48 89 e5             \tmov    %rsp,%rbp\n  402d07:\t53                   \tpush   %rbx\n  402d08:\t48 83 ec 38          \tsub    $0x38,%rsp\n  402d0c:\t48 89 7d d0          \tmov    %rdi,-0x30(%rbp)\n  402d10:\t89 75 cc             \tmov    %esi,-0x34(%rbp)\n  402d13:\t48 89 55 c0          \tmov    %rdx,-0x40(%rbp)\n  402d17:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  402d1b:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n  402d1f:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n  402d22:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  402d26:\t89 d6                \tmov    %edx,%esi\n  402d28:\t48 89 c7             \tmov    %rax,%rdi\n  402d2b:\te8 c0 f5 ff ff       \tcallq  4022f0 <hash>\n  402d30:\t48 63 d0             \tmovslq %eax,%rdx\n  402d33:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  402d37:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  402d3b:\t48 21 d0             \tand    %rdx,%rax\n  402d3e:\t48 c1 e0 03          \tshl    $0x3,%rax\n  402d42:\t48 01 d8             \tadd    %rbx,%rax\n  402d45:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  402d49:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  402d4d:\t48 8b 00             \tmov    (%rax),%rax\n  402d50:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  402d54:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  402d5b:\t00 \n  402d5c:\teb 3d                \tjmp    402d9b <chm_rem_prefetch+0x98>\n  402d5e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402d62:\t48 8b 00             \tmov    (%rax),%rax\n  402d65:\t48 39 45 c0          \tcmp    %rax,-0x40(%rbp)\n  402d69:\t75 1c                \tjne    402d87 <chm_rem_prefetch+0x84>\n  402d6b:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  402d70:\t74 09                \tje     402d7b <chm_rem_prefetch+0x78>\n  402d72:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402d76:\t0f 0d 08             \tprefetchw (%rax)\n  402d79:\teb 28                \tjmp    402da3 <chm_rem_prefetch+0xa0>\n  402d7b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  402d7f:\t48 8b 00             \tmov    (%rax),%rax\n  402d82:\t0f 0d 08             \tprefetchw (%rax)\n  402d85:\teb 1c                \tjmp    402da3 <chm_rem_prefetch+0xa0>\n  402d87:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402d8b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  402d8f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402d93:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  402d97:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  402d9b:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  402da0:\t75 bc                \tjne    402d5e <chm_rem_prefetch+0x5b>\n  402da2:\t90                   \tnop\n  402da3:\t90                   \tnop\n  402da4:\t48 83 c4 38          \tadd    $0x38,%rsp\n  402da8:\t5b                   \tpop    %rbx\n  402da9:\t5d                   \tpop    %rbp\n  402daa:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall chm_rem_prefetch(__int64 a1, char a2, __int64 a3) {\n  __int64 v3;\n  _QWORD *result;\n  const void **<span class=\"supfact\">v6</span>;\n  _QWORD *<span class=\"supfact\">v7</span>;\n  _QWORD *<span class=\"supfact\">v8</span>;\n  v3 = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v6</span> =\n      (const void **)(v3 +\n                      Number * ((int)hash(a3, a2) & *(_QWORD *)(a1 + Number)));\n  result = *<span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v8</span> = *<span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v7</span> = Number L;\n  while (<span class=\"supfact\">v8</span>) {\n    if (a3 == *<span class=\"supfact\">v8</span>) {\n      if (<span class=\"supfact\">v7</span>) {\n        result = <span class=\"supfact\">v7</span>;\n        _m_prefetchw(<span class=\"supfact\">v7</span>);\n      } else {\n        result = *<span class=\"supfact\">v6</span>;\n        _m_prefetchw(*<span class=\"supfact\">v6</span>);\n      }\n      return result;\n    }\n    <span class=\"supfact\">v7</span> = <span class=\"supfact\">v8</span>;\n    result = (_QWORD *)<span class=\"supfact\">v8</span>[Number];\n    <span class=\"supfact\">v8</span> = result;\n  }\n  return result;\n}", "code_t": "void __cdecl chm_rem_prefetch(chm_seg_t *seg, int hash_seed, skey_t key) {\n  chm_node_t **v3;\n  const void **<span class=\"supfact\">bucket</span>;\n  chm_node_t *<span class=\"supfact\">pred</span>;\n  chm_node_t *<span class=\"supfact\">curr</span>;\n  v3 = seg->_anon_0._anon_0.table;\n  <span class=\"supfact\">bucket</span> =\n      (const void **)&v3[hash(key, hash_seed) & seg->_anon_0._anon_0.hash];\n  <span class=\"supfact\">curr</span> = (chm_node_t *)*<span class=\"supfact\">bucket</span>;\n  <span class=\"supfact\">pred</span> = Number L;\n  while (<span class=\"supfact\">curr</span>) {\n    if (key == <span class=\"supfact\">curr</span>->key) {\n      if (<span class=\"supfact\">pred</span>)\n        _m_prefetchw(<span class=\"supfact\">pred</span>);\n      else\n        _m_prefetchw(*<span class=\"supfact\">bucket</span>);\n      return;\n    }\n    <span class=\"supfact\">pred</span> = <span class=\"supfact\">curr</span>;\n    <span class=\"supfact\">curr</span> = (chm_node_t *)<span class=\"supfact\">curr</span>->next;\n  }\n}", "var": [{"name": "v8", "type": "__unk__", "ref_name": "curr", "ref_type": "chm_node_t *"}, {"name": "v7", "type": "__unk__", "ref_name": "pred", "ref_type": "chm_node_t *"}, {"name": "v6", "type": "__unk__", "ref_name": "bucket", "ref_type": "const void * *"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7c8b7a7781f1cadd00b86bd331a6acad366142cb3db9ab2fde20cee244c5ff14", "path_in_repo": "XanClic/qemu//qemu-ga", "objdump": "00000000000159c4 <qmp_guest_get_vcpus>:\n   159c4:\t55                   \tpush   %rbp\n   159c5:\t48 89 e5             \tmov    %rsp,%rbp\n   159c8:\t48 83 ec 60          \tsub    $0x60,%rsp\n   159cc:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n   159d0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n   159d7:\t00 00 \n   159d9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   159dd:\t31 c0                \txor    %eax,%eax\n   159df:\t48 c7 45 b8 00 00 00 \tmovq   $0x0,-0x48(%rbp)\n   159e6:\t00 \n   159e7:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n   159ee:\t00 \n   159ef:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n   159f6:\t00 \n   159f7:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n   159fb:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n   159ff:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n   15a03:\t48 89 c2             \tmov    %rax,%rdx\n   15a06:\t48 8d 35 73 aa 03 00 \tlea    0x3aa73(%rip),%rsi        # 50480 <__func__.16732+0xd70>\n   15a0d:\tbf 53 00 00 00       \tmov    $0x53,%edi\n   15a12:\te8 8e fb ff ff       \tcallq  155a5 <sysconf_exact>\n   15a17:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n   15a1b:\te9 b4 00 00 00       \tjmpq   15ad4 <qmp_guest_get_vcpus+0x110>\n   15a20:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   15a24:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n   15a28:\t48 89 55 c0          \tmov    %rdx,-0x40(%rbp)\n   15a2c:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   15a30:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   15a34:\t48 89 c6             \tmov    %rax,%rsi\n   15a37:\t48 8d 3d 5a aa 03 00 \tlea    0x3aa5a(%rip),%rdi        # 50498 <__func__.16732+0xd88>\n   15a3e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   15a43:\te8 b8 5b ff ff       \tcallq  b600 <g_strdup_printf@plt>\n   15a48:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   15a4c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   15a50:\tbe 10 00 00 00       \tmov    $0x10,%esi\n   15a55:\t48 89 c7             \tmov    %rax,%rdi\n   15a58:\te8 43 60 ff ff       \tcallq  baa0 <g_file_test@plt>\n   15a5d:\t85 c0                \ttest   %eax,%eax\n   15a5f:\t74 67                \tje     15ac8 <qmp_guest_get_vcpus+0x104>\n   15a61:\tbf 10 00 00 00       \tmov    $0x10,%edi\n   15a66:\te8 35 66 ff ff       \tcallq  c0a0 <g_malloc0@plt>\n   15a6b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   15a6f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   15a73:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n   15a77:\t48 89 10             \tmov    %rdx,(%rax)\n   15a7a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   15a7e:\tc6 40 09 01          \tmovb   $0x1,0x9(%rax)\n   15a82:\t48 8d 4d b8          \tlea    -0x48(%rbp),%rcx\n   15a86:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   15a8a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   15a8e:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   15a93:\t48 89 c7             \tmov    %rax,%rdi\n   15a96:\te8 c2 fb ff ff       \tcallq  1565d <transfer_vcpu>\n   15a9b:\tbf 10 00 00 00       \tmov    $0x10,%edi\n   15aa0:\te8 fb 65 ff ff       \tcallq  c0a0 <g_malloc0@plt>\n   15aa5:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   15aa9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   15aad:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   15ab1:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n   15ab5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   15ab9:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n   15abd:\t48 89 10             \tmov    %rdx,(%rax)\n   15ac0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   15ac4:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n   15ac8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   15acc:\t48 89 c7             \tmov    %rax,%rdi\n   15acf:\te8 2c 69 ff ff       \tcallq  c400 <g_key_file_get_boolean@plt+0x20>\n   15ad4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   15ad8:\t48 85 c0             \ttest   %rax,%rax\n   15adb:\t75 0e                \tjne    15aeb <qmp_guest_get_vcpus+0x127>\n   15add:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   15ae1:\t48 3b 45 d0          \tcmp    -0x30(%rbp),%rax\n   15ae5:\t0f 8c 35 ff ff ff    \tjl     15a20 <qmp_guest_get_vcpus+0x5c>\n   15aeb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   15aef:\t48 85 c0             \ttest   %rax,%rax\n   15af2:\t75 33                \tjne    15b27 <qmp_guest_get_vcpus+0x163>\n   15af4:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   15af8:\t48 85 c0             \ttest   %rax,%rax\n   15afb:\t75 24                \tjne    15b21 <qmp_guest_get_vcpus+0x15d>\n   15afd:\t4c 8d 05 b4 a9 03 00 \tlea    0x3a9b4(%rip),%r8        # 504b8 <__func__.16732+0xda8>\n   15b04:\t48 8d 0d 65 b0 03 00 \tlea    0x3b065(%rip),%rcx        # 50b70 <__func__.17429>\n   15b0b:\tba 6b 08 00 00       \tmov    $0x86b,%edx\n   15b10:\t48 8d 35 4c 9c 03 00 \tlea    0x39c4c(%rip),%rsi        # 4f763 <__func__.16732+0x53>\n   15b17:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   15b1c:\te8 4f 66 ff ff       \tcallq  c170 <g_assertion_message_expr@plt>\n   15b21:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   15b25:\teb 24                \tjmp    15b4b <qmp_guest_get_vcpus+0x187>\n   15b27:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   15b2b:\t48 89 c7             \tmov    %rax,%rdi\n   15b2e:\te8 6c 29 00 00       \tcallq  1849f <qapi_free_GuestLogicalProcessorList>\n   15b33:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n   15b37:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   15b3b:\t48 89 d6             \tmov    %rdx,%rsi\n   15b3e:\t48 89 c7             \tmov    %rax,%rdi\n   15b41:\te8 04 30 02 00       \tcallq  38b4a <error_propagate>\n   15b46:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   15b4b:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n   15b4f:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n   15b56:\t00 00 \n   15b58:\t74 05                \tje     15b5f <qmp_guest_get_vcpus+0x19b>\n   15b5a:\te8 11 5e ff ff       \tcallq  b970 <__stack_chk_fail@plt>\n   15b5f:\tc9                   \tleaveq \n   15b60:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qmp_guest_get_vcpus(__int64 a1) {\n  __int64 v1;\n  __int64 result;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 *<span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  const char *<span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 *<span class=\"supfact\">v11</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  <span class=\"supfact\">v4</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number L;\n  <span class=\"supfact\">v3</span> = Number L;\n  <span class=\"supfact\">v6</span> = &<span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v7</span> =\n      sysconf_exact(Number, (int)String, (int)&<span class=\"supfact\">v4</span>);\n  while (!<span class=\"supfact\">v4</span> && <span class=\"supfact\">v5</span> < <span class=\"supfact\">v7</span>) {\n    v1 = <span class=\"supfact\">v5</span>++;\n    <span class=\"supfact\">v8</span> = v1;\n    <span class=\"supfact\">v9</span> = (const char *)g_strdup_printf();\n    if ((unsigned int)g_file_test()) {\n      <span class=\"supfact\">v10</span> = g_malloc0();\n      *(_QWORD *)<span class=\"supfact\">v10</span> = <span class=\"supfact\">v8</span>;\n      *(_BYTE *)(<span class=\"supfact\">v10</span> + Number) = Number;\n      transfer_vcpu(<span class=\"supfact\">v10</span>, Number, <span class=\"supfact\">v9</span>,\n                    (int)&<span class=\"supfact\">v4</span>);\n      <span class=\"supfact\">v11</span> = (__int64 *)g_malloc0();\n      <span class=\"supfact\">v11</span>[Number] = <span class=\"supfact\">v10</span>;\n      *<span class=\"supfact\">v6</span> = (__int64)<span class=\"supfact\">v11</span>;\n      <span class=\"supfact\">v6</span> = <span class=\"supfact\">v11</span>;\n    }\n    g_free();\n  }\n  if (<span class=\"supfact\">v4</span>) {\n    qapi_free_GuestLogicalProcessorList(<span class=\"supfact\">v3</span>);\n    error_propagate(a1, <span class=\"supfact\">v4</span>);\n    result = Number L;\n  } else {\n    if (!<span class=\"supfact\">v3</span>)\n      g_assertion_message_expr();\n    result = <span class=\"supfact\">v3</span>;\n  }\n  return result;\n}", "code_t": "GuestLogicalProcessorList_0 *__cdecl qmp_guest_get_vcpus(Error_0 **errp) {\n  int64_t v1;\n  GuestLogicalProcessorList_0 *result;\n  GuestLogicalProcessorList_0 *<span class=\"supfact\">head</span>;\n  Error_0 *<span class=\"supfact\">local_err</span>;\n  int64_t <span class=\"supfact\">current</span>;\n  GuestLogicalProcessorList_0 **<span class=\"supfact\">link</span>;\n  __int64 <span class=\"supfact\">sc_max</span>;\n  int64_t <span class=\"supfact\">id</span>;\n  char *<span class=\"supfact\">path</span>;\n  GuestLogicalProcessor_0 *<span class=\"supfact\">vcpu</span>;\n  GuestLogicalProcessorList_0 *<span class=\"supfact\">entry</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  <span class=\"supfact\">local_err</span> = Number L;\n  <span class=\"supfact\">current</span> = Number L;\n  <span class=\"supfact\">head</span> = Number L;\n  <span class=\"supfact\">link</span> = &<span class=\"supfact\">head</span>;\n  <span class=\"supfact\">sc_max</span> =\n      sysconf_exact(Number, String, &<span class=\"supfact\">local_err</span>);\n  while (!<span class=\"supfact\">local_err</span> &&\n         <span class=\"supfact\">current</span> < <span class=\"supfact\">sc_max</span>) {\n    v1 = <span class=\"supfact\">current</span>++;\n    <span class=\"supfact\">id</span> = v1;\n    <span class=\"supfact\">path</span> = (char *)g_strdup_printf();\n    if ((unsigned int)g_file_test()) {\n      <span class=\"supfact\">vcpu</span> = (GuestLogicalProcessor_0 *)g_malloc0();\n      <span class=\"supfact\">vcpu</span>->logical_id = <span class=\"supfact\">id</span>;\n      <span class=\"supfact\">vcpu</span>->has_can_offline = Number;\n      transfer_vcpu(<span class=\"supfact\">vcpu</span>, Number, <span class=\"supfact\">path</span>,\n                    &<span class=\"supfact\">local_err</span>);\n      <span class=\"supfact\">entry</span> = (GuestLogicalProcessorList_0 *)g_malloc0();\n      <span class=\"supfact\">entry</span>->value = <span class=\"supfact\">vcpu</span>;\n      *<span class=\"supfact\">link</span> = <span class=\"supfact\">entry</span>;\n      <span class=\"supfact\">link</span> = &<span class=\"supfact\">entry</span>->next;\n    }\n    g_free();\n  }\n  if (<span class=\"supfact\">local_err</span>) {\n    qapi_free_GuestLogicalProcessorList(<span class=\"supfact\">head</span>);\n    error_propagate(errp, <span class=\"supfact\">local_err</span>);\n    result = Number L;\n  } else {\n    if (!<span class=\"supfact\">head</span>)\n      g_assertion_message_expr();\n    result = <span class=\"supfact\">head</span>;\n  }\n  return result;\n}", "var": [{"name": "v12", "type": "unsigned __int64", "ref_name": "v12", "ref_type": "unsigned __int64"}, {"name": "v11", "type": "GuestLogicalProcessorList_0 *", "ref_name": "entry", "ref_type": "GuestLogicalProcessorList_0 *"}, {"name": "v10", "type": "GuestLogicalProcessor_0 *", "ref_name": "vcpu", "ref_type": "GuestLogicalProcessor_0 *"}, {"name": "v9", "type": "__int64", "ref_name": "path", "ref_type": "char *"}, {"name": "v8", "type": "__int64", "ref_name": "id", "ref_type": "int64_t"}, {"name": "v7", "type": "GuestLogicalProcessorList_0 * *", "ref_name": "sc_max", "ref_type": "__int64"}, {"name": "v6", "type": "int64_t", "ref_name": "link", "ref_type": "GuestLogicalProcessorList_0 * *"}, {"name": "v5", "type": "Error_0 *", "ref_name": "current", "ref_type": "int64_t"}, {"name": "v4", "type": "GuestLogicalProcessorList_0 *", "ref_name": "local_err", "ref_type": "Error_0 *"}, {"name": "v3", "type": "Error_0 *", "ref_name": "head", "ref_type": "GuestLogicalProcessorList_0 *"}], "body_in_train": false}, {"repo_owner": "cledesm", "repo_name": "git", "path": "cledesm/git/e24ffa5ef89c658e14bb3a93500cad731477c79246aa3703aa20b44f199e51b9", "path_in_repo": "cledesm/git//match-trees.o", "objdump": "0000000000000a11 <shift_tree_by>:\n a11:\t55                   \tpush   %rbp\n a12:\t48 89 e5             \tmov    %rsp,%rbp\n a15:\t48 83 ec 70          \tsub    $0x70,%rsp\n a19:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n a1d:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n a21:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n a25:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n a29:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n a30:\t48 8d 4d bc          \tlea    -0x44(%rbp),%rcx\n a34:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n a38:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n a3c:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n a40:\t48 89 c7             \tmov    %rax,%rdi\n a43:\te8 00 00 00 00       \tcallq  a48 <shift_tree_by+0x37>\n a48:\t85 c0                \ttest   %eax,%eax\n a4a:\t75 13                \tjne    a5f <shift_tree_by+0x4e>\n a4c:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n a4f:\t25 00 f0 00 00       \tand    $0xf000,%eax\n a54:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n a59:\t75 04                \tjne    a5f <shift_tree_by+0x4e>\n a5b:\t83 4d fc 01          \torl    $0x1,-0x4(%rbp)\n a5f:\t48 8d 4d b8          \tlea    -0x48(%rbp),%rcx\n a63:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n a67:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n a6b:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n a6f:\t48 89 c7             \tmov    %rax,%rdi\n a72:\te8 00 00 00 00       \tcallq  a77 <shift_tree_by+0x66>\n a77:\t85 c0                \ttest   %eax,%eax\n a79:\t75 13                \tjne    a8e <shift_tree_by+0x7d>\n a7b:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n a7e:\t25 00 f0 00 00       \tand    $0xf000,%eax\n a83:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n a88:\t75 04                \tjne    a8e <shift_tree_by+0x7d>\n a8a:\t83 4d fc 02          \torl    $0x2,-0x4(%rbp)\n a8e:\t83 7d fc 03          \tcmpl   $0x3,-0x4(%rbp)\n a92:\t75 6d                \tjne    b01 <shift_tree_by+0xf0>\n a94:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n a98:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n a9c:\t48 89 d6             \tmov    %rdx,%rsi\n a9f:\t48 89 c7             \tmov    %rax,%rdi\n aa2:\te8 da f8 ff ff       \tcallq  381 <score_trees>\n aa7:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n aaa:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n ab1:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n ab5:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n ab9:\t48 89 d6             \tmov    %rdx,%rsi\n abc:\t48 89 c7             \tmov    %rax,%rdi\n abf:\te8 bd f8 ff ff       \tcallq  381 <score_trees>\n ac4:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n ac7:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n aca:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n acd:\t7e 0d                \tjle    adc <shift_tree_by+0xcb>\n acf:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n ad6:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n ad9:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n adc:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n ae0:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n ae4:\t48 89 d6             \tmov    %rdx,%rsi\n ae7:\t48 89 c7             \tmov    %rax,%rdi\n aea:\te8 92 f8 ff ff       \tcallq  381 <score_trees>\n aef:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n af2:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n af5:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n af8:\t7e 07                \tjle    b01 <shift_tree_by+0xf0>\n afa:\tc7 45 fc 02 00 00 00 \tmovl   $0x2,-0x4(%rbp)\n b01:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n b05:\t75 15                \tjne    b1c <shift_tree_by+0x10b>\n b07:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n b0b:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n b0f:\t48 89 d6             \tmov    %rdx,%rsi\n b12:\t48 89 c7             \tmov    %rax,%rdi\n b15:\te8 42 f5 ff ff       \tcallq  5c <hashcpy>\n b1a:\teb 33                \tjmp    b4f <shift_tree_by+0x13e>\n b1c:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n b20:\t75 1a                \tjne    b3c <shift_tree_by+0x12b>\n b22:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n b26:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n b2a:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n b2e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n b32:\t48 89 c7             \tmov    %rax,%rdi\n b35:\te8 44 fb ff ff       \tcallq  67e <splice_tree>\n b3a:\teb 13                \tjmp    b4f <shift_tree_by+0x13e>\n b3c:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n b40:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n b44:\t48 89 d6             \tmov    %rdx,%rsi\n b47:\t48 89 c7             \tmov    %rax,%rdi\n b4a:\te8 0d f5 ff ff       \tcallq  5c <hashcpy>\n b4f:\tc9                   \tleaveq \n b50:\tc3                   \tretq   \n", "code_s": "void *__fastcall shift_tree_by(__int64 a1, void *a2, void *a3, const char *a4) {\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  char <span class=\"supfact\">v9</span>[Number];\n  char <span class=\"supfact\">v10</span>[Number];\n  int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v13</span> = Number;\n  if (!(unsigned int)get_tree_entry(a1, a4, <span class=\"supfact\">v10</span>,\n                                    &<span class=\"supfact\">v8</span>) &&\n      (<span class=\"supfact\">v8</span> & Number) == Number)\n    <span class=\"supfact\">v13</span> |= Number;\n  if (!(unsigned int)get_tree_entry(a2, a4, <span class=\"supfact\">v9</span>,\n                                    &<span class=\"supfact\">v7</span>) &&\n      (<span class=\"supfact\">v7</span> & Number) == Number)\n    <span class=\"supfact\">v13</span> |= Number;\n  if (<span class=\"supfact\">v13</span> == Number) {\n    <span class=\"supfact\">v12</span> = score_trees(a1, (__int64)a2);\n    <span class=\"supfact\">v13</span> = Number;\n    <span class=\"supfact\">v11</span> =\n        score_trees((__int64)<span class=\"supfact\">v10</span>, (__int64)a2);\n    if (<span class=\"supfact\">v11</span> > <span class=\"supfact\">v12</span>) {\n      <span class=\"supfact\">v13</span> = Number;\n      <span class=\"supfact\">v12</span> = <span class=\"supfact\">v11</span>;\n    }\n    <span class=\"supfact\">v11</span> = score_trees((__int64)<span class=\"supfact\">v9</span>, a1);\n    if (<span class=\"supfact\">v11</span> > <span class=\"supfact\">v12</span>)\n      <span class=\"supfact\">v13</span> = Number;\n  }\n  if (!<span class=\"supfact\">v13</span>)\n    return hashcpy(a3, a2);\n  if (<span class=\"supfact\">v13</span> == Number)\n    return (void *)splice_tree(a1, a4, (char *)a2, (__int64)a3);\n  return hashcpy(a3, <span class=\"supfact\">v9</span>);\n}", "code_t": "void __cdecl shift_tree_by(const unsigned __int8 *hash1,\n                           const unsigned __int8 *hash2,\n                           unsigned __int8 *shifted, const char *shift_prefix) {\n  unsigned int <span class=\"supfact\">mode2</span>;\n  unsigned int <span class=\"supfact\">mode1</span>;\n  unsigned __int8 <span class=\"supfact\">sub2</span>[Number];\n  unsigned __int8 <span class=\"supfact\">sub1</span>[Number];\n  int <span class=\"supfact\">score</span>;\n  int <span class=\"supfact\">best_score</span>;\n  unsigned int <span class=\"supfact\">candidate</span>;\n  <span class=\"supfact\">candidate</span> = Number;\n  if (!(unsigned int)get_tree_entry(hash1, shift_prefix, <span class=\"supfact\">sub1</span>,\n                                    &<span class=\"supfact\">mode1</span>) &&\n      (<span class=\"supfact\">mode1</span> & Number) == Number)\n    <span class=\"supfact\">candidate</span> |= Number;\n  if (!(unsigned int)get_tree_entry(hash2, shift_prefix, <span class=\"supfact\">sub2</span>,\n                                    &<span class=\"supfact\">mode2</span>) &&\n      (<span class=\"supfact\">mode2</span> & Number) == Number)\n    <span class=\"supfact\">candidate</span> |= Number;\n  if (<span class=\"supfact\">candidate</span> == Number) {\n    <span class=\"supfact\">best_score</span> = score_trees(hash1, hash2);\n    <span class=\"supfact\">candidate</span> = Number;\n    <span class=\"supfact\">score</span> = score_trees(<span class=\"supfact\">sub1</span>, hash2);\n    if (<span class=\"supfact\">score</span> > <span class=\"supfact\">best_score</span>) {\n      <span class=\"supfact\">candidate</span> = Number;\n      <span class=\"supfact\">best_score</span> = <span class=\"supfact\">score</span>;\n    }\n    <span class=\"supfact\">score</span> = score_trees(<span class=\"supfact\">sub2</span>, hash1);\n    if (<span class=\"supfact\">score</span> > <span class=\"supfact\">best_score</span>)\n      <span class=\"supfact\">candidate</span> = Number;\n  }\n  if (<span class=\"supfact\">candidate</span>) {\n    if (<span class=\"supfact\">candidate</span> == Number)\n      splice_tree(hash1, shift_prefix, hash2, shifted);\n    else\n      hashcpy(shifted, <span class=\"supfact\">sub2</span>);\n  } else {\n    hashcpy(shifted, hash2);\n  }\n}", "var": [{"name": "v13", "type": "int", "ref_name": "candidate", "ref_type": "unsigned int"}, {"name": "v12", "type": "int", "ref_name": "best_score", "ref_type": "int"}, {"name": "v11", "type": "int", "ref_name": "score", "ref_type": "int"}, {"name": "v10", "type": "unsigned __int8[20]", "ref_name": "sub1", "ref_type": "unsigned __int8[20]"}, {"name": "v9", "type": "unsigned __int8[20]", "ref_name": "sub2", "ref_type": "unsigned __int8[20]"}, {"name": "v8", "type": "int", "ref_name": "mode1", "ref_type": "unsigned int"}, {"name": "v7", "type": "int", "ref_name": "mode2", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "l3pp4rd", "repo_name": "dmenu", "path": "l3pp4rd/dmenu/28f26baacd75dbd2ec1dca518d2b24f996f61b824b9675f3be331d23bd585b4f", "path_in_repo": "l3pp4rd/dmenu//stest", "objdump": "", "code_s": "int __fastcall sub_4014AD(char *a1, const char *a2) {\n  int result;\n  struct stat <span class=\"supfact\">v3</span>;\n  struct stat <span class=\"supfact\">stat_buf</span>;\n  result = sub_4017D0(a1, &<span class=\"supfact\">stat_buf</span>);\n  if (!result) {\n    if (byte_4040F0[Number] ||\n        (result = *(unsigned __int8 *)a2, (_BYTE)result != Number)) {\n      if (byte_4040F1 != Number ||\n          (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n           result == Number)) {\n        if (byte_4040F2 != Number ||\n            (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n             result == Number)) {\n          if (byte_4040F3 != Number ||\n              (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n               result == Number)) {\n            if (byte_4040F4 != Number ||\n                (result = access(a1, Number)) == Number) {\n              if (byte_4040F5 != Number ||\n                  (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n                   result == Number)) {\n                if (byte_4040F6 != Number ||\n                    (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n                     (<span class=\"supfact\">stat_buf</span>.st_mode & Number) != Number)) {\n                  if (byte_4040F7 != Number ||\n                      (result = sub_4017E0(a1, &<span class=\"supfact\">v3</span>)) ==\n                              Number &&\n                          (result = <span class=\"supfact\">v3</span>.st_mode & Number,\n                           result == Number)) {\n                    if (byte_4040FD != Number ||\n                        (result = <span class=\"supfact\">stat_buf</span>.st_mtim.tv_sec,\n                         <span class=\"supfact\">stat_buf</span>.st_mtim.tv_sec >\n                             <span class=\"supfact\">stat_buf</span>.st_mtim.tv_sec)) {\n                      if (byte_4040FE != Number ||\n                          (result = qword_404178,\n                           <span class=\"supfact\">stat_buf</span>.st_mtim.tv_sec <\n                               qword_404178)) {\n                        if (byte_4040FF != Number ||\n                            (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n                             result == Number)) {\n                          if (byte_404101 != Number ||\n                              (result = access(a1, Number)) == Number) {\n                            if (byte_404102 != Number ||\n                                (result = <span class=\"supfact\">stat_buf</span>.st_size,\n                                 <span class=\"supfact\">stat_buf</span>.st_size > Number)) {\n                              if (byte_404104 != Number ||\n                                  (result = <span class=\"supfact\">stat_buf</span>.st_mode &\n                                            Number,\n                                   (<span class=\"supfact\">stat_buf</span>.st_mode &\n                                    Number) != Number)) {\n                                if ((byte_404106 != Number ||\n                                     (result = access(a1, Number)) == Number) &&\n                                    (byte_404107 != Number ||\n                                     (result = access(a1, Number)) == Number)) {\n                                  if (byte_404100)\n                                    exit(Number);\n                                  byte_4040E0 = Number;\n                                  result = puts(a2);\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}", "code_t": "int __fastcall sub_4014AD(char *a1, const char *a2) {\n  int result;\n  struct stat <span class=\"supfact\">v3</span>;\n  struct stat <span class=\"supfact\">stat_buf</span>;\n  result = sub_4017D0(a1, &<span class=\"supfact\">stat_buf</span>);\n  if (!result) {\n    if (byte_4040F0[Number] ||\n        (result = *(unsigned __int8 *)a2, (_BYTE)result != Number)) {\n      if (byte_4040F1 != Number ||\n          (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n           result == Number)) {\n        if (byte_4040F2 != Number ||\n            (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n             result == Number)) {\n          if (byte_4040F3 != Number ||\n              (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n               result == Number)) {\n            if (byte_4040F4 != Number ||\n                (result = access(a1, Number)) == Number) {\n              if (byte_4040F5 != Number ||\n                  (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n                   result == Number)) {\n                if (byte_4040F6 != Number ||\n                    (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n                     (<span class=\"supfact\">stat_buf</span>.st_mode & Number) != Number)) {\n                  if (byte_4040F7 != Number ||\n                      (result = sub_4017E0(a1, &<span class=\"supfact\">v3</span>)) ==\n                              Number &&\n                          (result = <span class=\"supfact\">v3</span>.st_mode & Number,\n                           result == Number)) {\n                    if (byte_4040FD != Number ||\n                        (result = <span class=\"supfact\">stat_buf</span>.st_mtim.tv_sec,\n                         <span class=\"supfact\">stat_buf</span>.st_mtim.tv_sec >\n                             <span class=\"supfact\">stat_buf</span>.st_mtim.tv_sec)) {\n                      if (byte_4040FE != Number ||\n                          (result = qword_404178,\n                           <span class=\"supfact\">stat_buf</span>.st_mtim.tv_sec <\n                               qword_404178)) {\n                        if (byte_4040FF != Number ||\n                            (result = <span class=\"supfact\">stat_buf</span>.st_mode & Number,\n                             result == Number)) {\n                          if (byte_404101 != Number ||\n                              (result = access(a1, Number)) == Number) {\n                            if (byte_404102 != Number ||\n                                (result = <span class=\"supfact\">stat_buf</span>.st_size,\n                                 <span class=\"supfact\">stat_buf</span>.st_size > Number)) {\n                              if (byte_404104 != Number ||\n                                  (result = <span class=\"supfact\">stat_buf</span>.st_mode &\n                                            Number,\n                                   (<span class=\"supfact\">stat_buf</span>.st_mode &\n                                    Number) != Number)) {\n                                if ((byte_404106 != Number ||\n                                     (result = access(a1, Number)) == Number) &&\n                                    (byte_404107 != Number ||\n                                     (result = access(a1, Number)) == Number)) {\n                                  if (byte_404100)\n                                    exit(Number);\n                                  byte_4040E0 = Number;\n                                  result = puts(a2);\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}", "var": [{"name": "stat_buf", "type": "struct struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __unused; }", "ref_name": "stat_buf", "ref_type": "struct struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __unused; }"}, {"name": "v3", "type": "struct struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __unused; }", "ref_name": "v3", "ref_type": "struct struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __unused; }"}], "body_in_train": false}, {"repo_owner": "roger-zhao", "repo_name": "hostapd", "path": "roger-zhao/hostapd/5050a0d94d34dc8c9a769c94b075d9bc1075109b16fa911067eb27547f96c86f", "path_in_repo": "roger-zhao/hostapd/src/rsn_supp/pmksa_cache.o", "objdump": "00000000000001b8 <pmksa_cache_expire>:\n     1b8:\t55                   \tpush   %rbp\n     1b9:\t48 89 e5             \tmov    %rsp,%rbp\n     1bc:\t48 83 ec 30          \tsub    $0x30,%rsp\n     1c0:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     1c4:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     1c8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     1cc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     1d0:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     1d4:\t48 89 c7             \tmov    %rax,%rdi\n     1d7:\te8 00 00 00 00       \tcallq  1dc <pmksa_cache_expire+0x24>\n     1dc:\te9 98 00 00 00       \tjmpq   279 <pmksa_cache_expire+0xc1>\n     1e1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1e5:\t48 8b 00             \tmov    (%rax),%rax\n     1e8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     1ec:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     1f0:\t48 8b 10             \tmov    (%rax),%rdx\n     1f3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1f7:\t48 89 10             \tmov    %rdx,(%rax)\n     1fa:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     1fe:\t0f b6 40 51          \tmovzbl 0x51(%rax),%eax\n     202:\t0f b6 f0             \tmovzbl %al,%esi\n     205:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     209:\t0f b6 40 50          \tmovzbl 0x50(%rax),%eax\n     20d:\t0f b6 c8             \tmovzbl %al,%ecx\n     210:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     214:\t0f b6 40 4f          \tmovzbl 0x4f(%rax),%eax\n     218:\t44 0f b6 c0          \tmovzbl %al,%r8d\n     21c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     220:\t0f b6 40 4e          \tmovzbl 0x4e(%rax),%eax\n     224:\t0f b6 f8             \tmovzbl %al,%edi\n     227:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     22b:\t0f b6 40 4d          \tmovzbl 0x4d(%rax),%eax\n     22f:\t0f b6 d0             \tmovzbl %al,%edx\n     232:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     236:\t0f b6 40 4c          \tmovzbl 0x4c(%rax),%eax\n     23a:\t0f b6 c0             \tmovzbl %al,%eax\n     23d:\t56                   \tpush   %rsi\n     23e:\t51                   \tpush   %rcx\n     23f:\t45 89 c1             \tmov    %r8d,%r9d\n     242:\t41 89 f8             \tmov    %edi,%r8d\n     245:\t89 d1                \tmov    %edx,%ecx\n     247:\t89 c2                \tmov    %eax,%edx\n     249:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     24e:\tbf 02 00 00 00       \tmov    $0x2,%edi\n     253:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     258:\te8 00 00 00 00       \tcallq  25d <pmksa_cache_expire+0xa5>\n     25d:\t48 83 c4 10          \tadd    $0x10,%rsp\n     261:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n     265:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     269:\tba 02 00 00 00       \tmov    $0x2,%edx\n     26e:\t48 89 ce             \tmov    %rcx,%rsi\n     271:\t48 89 c7             \tmov    %rax,%rdi\n     274:\te8 c9 fe ff ff       \tcallq  142 <pmksa_cache_free_entry>\n     279:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     27d:\t48 8b 00             \tmov    (%rax),%rax\n     280:\t48 85 c0             \ttest   %rax,%rax\n     283:\t74 18                \tje     29d <pmksa_cache_expire+0xe5>\n     285:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     289:\t48 8b 00             \tmov    (%rax),%rax\n     28c:\t48 8b 50 40          \tmov    0x40(%rax),%rdx\n     290:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     294:\t48 39 c2             \tcmp    %rax,%rdx\n     297:\t0f 8e 44 ff ff ff    \tjle    1e1 <pmksa_cache_expire+0x29>\n     29d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2a1:\t48 89 c7             \tmov    %rax,%rdi\n     2a4:\te8 48 00 00 00       \tcallq  2f1 <pmksa_cache_set_expiration>\n     2a9:\t90                   \tnop\n     2aa:\tc9                   \tleaveq \n     2ab:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pmksa_cache_expire(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = a1;\n  os_get_reltime(&<span class=\"supfact\">v2</span>);\n  while (*(_QWORD *)<span class=\"supfact\">v4</span> &&\n         *(_QWORD *)(*(_QWORD *)<span class=\"supfact\">v4</span> + Number L) <=\n             <span class=\"supfact\">v2</span>) {\n    <span class=\"supfact\">v3</span> = *(_QWORD *)<span class=\"supfact\">v4</span>;\n    *(_QWORD *)<span class=\"supfact\">v4</span> = *(_QWORD *)<span class=\"supfact\">v3</span>;\n    wpa_printf(Number L, String,\n               *(unsigned __int8 *)(<span class=\"supfact\">v3</span> + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">v3</span> + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">v3</span> + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">v3</span> + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">v3</span> + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">v3</span> + Number));\n    pmksa_cache_free_entry(<span class=\"supfact\">v4</span>, <span class=\"supfact\">v3</span>, Number);\n  }\n  return pmksa_cache_set_expiration(<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl pmksa_cache_expire(void *eloop_ctx, void *timeout_ctx) {\n  os_reltime <span class=\"supfact\">now</span>;\n  rsn_pmksa_cache_entry *<span class=\"supfact\">entry</span>;\n  rsn_pmksa_cache *<span class=\"supfact\">pmksa</span>;\n  <span class=\"supfact\">pmksa</span> = (rsn_pmksa_cache *)eloop_ctx;\n  os_get_reltime(&<span class=\"supfact\">now</span>);\n  while (<span class=\"supfact\">pmksa</span>-><span class=\"supfact\">pmksa</span> &&\n         <span class=\"supfact\">pmksa</span>-><span class=\"supfact\">pmksa</span>->expiration <=\n             <span class=\"supfact\">now</span>.sec) {\n    <span class=\"supfact\">entry</span> = <span class=\"supfact\">pmksa</span>-><span class=\"supfact\">pmksa</span>;\n    <span class=\"supfact\">pmksa</span>-><span class=\"supfact\">pmksa</span> = <span class=\"supfact\">entry</span>->next;\n    wpa_printf(\n        Number L, String, <span class=\"supfact\">entry</span>->aa[Number],\n        <span class=\"supfact\">entry</span>->aa[Number], <span class=\"supfact\">entry</span>->aa[Number],\n        <span class=\"supfact\">entry</span>->aa[Number], <span class=\"supfact\">entry</span>->aa[Number],\n        <span class=\"supfact\">entry</span>->aa[Number]);\n    pmksa_cache_free_entry(<span class=\"supfact\">pmksa</span>, <span class=\"supfact\">entry</span>,\n                           PMKSA_EXPIRE);\n  }\n  pmksa_cache_set_expiration(<span class=\"supfact\">pmksa</span>);\n}", "var": [{"name": "v4", "type": "rsn_pmksa_cache *", "ref_name": "pmksa", "ref_type": "rsn_pmksa_cache *"}, {"name": "v3", "type": "rsn_pmksa_cache_entry *", "ref_name": "entry", "ref_type": "rsn_pmksa_cache_entry *"}, {"name": "v2", "type": "struct os_reltime { os_time_t sec; os_time_t usec; }", "ref_name": "now", "ref_type": "struct os_reltime { os_time_t sec; os_time_t usec; }"}], "body_in_train": false}, {"repo_owner": "gbarsever", "repo_name": "in-progress-perp", "path": "gbarsever/in-progress-perp/6c62861aea074c5ec04610dc93c4cb1bd0644ff7d97b60f8d7efe6dace66dd0d", "path_in_repo": "gbarsever/in-progress-perp/bhmmi-code/bhmmi-master/gsl-1.16/randist/chisq.o", "objdump": "0000000000000046 <gsl_ran_chisq_pdf>:\n  46:\t55                   \tpush   %rbp\n  47:\t48 89 e5             \tmov    %rsp,%rbp\n  4a:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4e:\tf2 0f 11 45 e8       \tmovsd  %xmm0,-0x18(%rbp)\n  53:\tf2 0f 11 4d e0       \tmovsd  %xmm1,-0x20(%rbp)\n  58:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  5c:\t66 0f 2f 45 e8       \tcomisd -0x18(%rbp),%xmm0\n  61:\t76 09                \tjbe    6c <gsl_ran_chisq_pdf+0x26>\n  63:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  67:\te9 e2 00 00 00       \tjmpq   14e <gsl_ran_chisq_pdf+0x108>\n  6c:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n  71:\t66 0f 2e 05 00 00 00 \tucomisd 0x0(%rip),%xmm0        # 79 <gsl_ran_chisq_pdf+0x33>\n  78:\t00 \n  79:\t7a 42                \tjp     bd <gsl_ran_chisq_pdf+0x77>\n  7b:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n  80:\t66 0f 2e 05 00 00 00 \tucomisd 0x0(%rip),%xmm0        # 88 <gsl_ran_chisq_pdf+0x42>\n  87:\t00 \n  88:\t75 33                \tjne    bd <gsl_ran_chisq_pdf+0x77>\n  8a:\tf2 0f 10 45 e8       \tmovsd  -0x18(%rbp),%xmm0\n  8f:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 97 <gsl_ran_chisq_pdf+0x51>\n  96:\t00 \n  97:\t66 0f 57 c1          \txorpd  %xmm1,%xmm0\n  9b:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # a3 <gsl_ran_chisq_pdf+0x5d>\n  a2:\t00 \n  a3:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n  a7:\te8 00 00 00 00       \tcallq  ac <gsl_ran_chisq_pdf+0x66>\n  ac:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # b4 <gsl_ran_chisq_pdf+0x6e>\n  b3:\t00 \n  b4:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n  b8:\te9 91 00 00 00       \tjmpq   14e <gsl_ran_chisq_pdf+0x108>\n  bd:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n  c2:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # ca <gsl_ran_chisq_pdf+0x84>\n  c9:\t00 \n  ca:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n  ce:\te8 00 00 00 00       \tcallq  d3 <gsl_ran_chisq_pdf+0x8d>\n  d3:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n  d8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  dc:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n  e1:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # e9 <gsl_ran_chisq_pdf+0xa3>\n  e8:\t00 \n  e9:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n  ed:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # f5 <gsl_ran_chisq_pdf+0xaf>\n  f4:\t00 \n  f5:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n  f9:\tf2 0f 11 45 d8       \tmovsd  %xmm0,-0x28(%rbp)\n  fe:\tf2 0f 10 45 e8       \tmovsd  -0x18(%rbp),%xmm0\n 103:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 10b <gsl_ran_chisq_pdf+0xc5>\n 10a:\t00 \n 10b:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n 10f:\te8 00 00 00 00       \tcallq  114 <gsl_ran_chisq_pdf+0xce>\n 114:\tf2 0f 59 45 d8       \tmulsd  -0x28(%rbp),%xmm0\n 119:\tf2 0f 10 4d e8       \tmovsd  -0x18(%rbp),%xmm1\n 11e:\tf2 0f 10 15 00 00 00 \tmovsd  0x0(%rip),%xmm2        # 126 <gsl_ran_chisq_pdf+0xe0>\n 125:\t00 \n 126:\tf2 0f 5e ca          \tdivsd  %xmm2,%xmm1\n 12a:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n 12e:\tf2 0f 5c 45 f8       \tsubsd  -0x8(%rbp),%xmm0\n 133:\te8 00 00 00 00       \tcallq  138 <gsl_ran_chisq_pdf+0xf2>\n 138:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 140 <gsl_ran_chisq_pdf+0xfa>\n 13f:\t00 \n 140:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n 144:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n 149:\tf2 0f 10 45 f0       \tmovsd  -0x10(%rbp),%xmm0\n 14e:\tc9                   \tleaveq \n 14f:\tc3                   \tretq   \n", "code_s": "double __fastcall gsl_ran_chisq_pdf(double a1, double a2) {\n  double v3;\n  double <span class=\"supfact\">v5</span>;\n  if (a1 < Number)\n    return Number;\n  if (a2 == Number)\n    return exp(-a1 / Number) / Number;\n  <span class=\"supfact\">v5</span> = gsl_sf_lngamma(a2 / Number);\n  v3 = log(a1 / Number);\n  return exp(v3 * (a2 / Number - Number) - a1 / Number - <span class=\"supfact\">v5</span>) /\n         Number;\n}", "code_t": "double __cdecl gsl_ran_chisq_pdf(const double x, const double nu) {\n  double v3;\n  double <span class=\"supfact\">lngamma</span>;\n  if (x < Number)\n    return Number;\n  if (nu == Number)\n    return exp(-x / Number) / Number;\n  <span class=\"supfact\">lngamma</span> = gsl_sf_lngamma(nu / Number);\n  v3 = log(x / Number);\n  return exp(v3 * (nu / Number - Number) - x / Number -\n             <span class=\"supfact\">lngamma</span>) /\n         Number;\n}", "var": [{"name": "v5", "type": "double", "ref_name": "lngamma", "ref_type": "double"}], "body_in_train": false}, {"repo_owner": "antmicro", "repo_name": "abc-lib", "path": "antmicro/abc-lib/3518266fda3e88804e120e2963449c4aaf6904972ec58ff5bc9e1e99ba06b236", "path_in_repo": "antmicro/abc-lib//src/bdd/llb/llb4Sweep.o", "objdump": "0000000000002057 <Llb4_Nonlin4SweepBadStates>:\n    2057:\t55                   \tpush   %rbp\n    2058:\t48 89 e5             \tmov    %rsp,%rbp\n    205b:\t48 83 ec 50          \tsub    $0x50,%rsp\n    205f:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    2063:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    2067:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n    206a:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n    206e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2072:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2077:\t48 89 ce             \tmov    %rcx,%rsi\n    207a:\t48 89 c7             \tmov    %rax,%rdi\n    207d:\te8 00 00 00 00       \tcallq  2082 <Llb4_Nonlin4SweepBadStates+0x2b>\n    2082:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2086:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    2089:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    208f:\tb9 00 00 04 00       \tmov    $0x40000,%ecx\n    2094:\tba 00 01 00 00       \tmov    $0x100,%edx\n    2099:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    209e:\t89 c7                \tmov    %eax,%edi\n    20a0:\te8 00 00 00 00       \tcallq  20a5 <Llb4_Nonlin4SweepBadStates+0x4e>\n    20a5:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    20a9:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    20ad:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n    20b1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    20b5:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    20ba:\t48 89 c7             \tmov    %rax,%rdi\n    20bd:\te8 00 00 00 00       \tcallq  20c2 <Llb4_Nonlin4SweepBadStates+0x6b>\n    20c2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    20c6:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    20ca:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n    20ce:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    20d2:\t48 89 ce             \tmov    %rcx,%rsi\n    20d5:\t48 89 c7             \tmov    %rax,%rdi\n    20d8:\te8 00 00 00 00       \tcallq  20dd <Llb4_Nonlin4SweepBadStates+0x86>\n    20dd:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    20e1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    20e5:\t48 89 c7             \tmov    %rax,%rdi\n    20e8:\te8 00 00 00 00       \tcallq  20ed <Llb4_Nonlin4SweepBadStates+0x96>\n    20ed:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    20f1:\tbe 06 00 00 00       \tmov    $0x6,%esi\n    20f6:\t48 89 c7             \tmov    %rax,%rdi\n    20f9:\te8 00 00 00 00       \tcallq  20fe <Llb4_Nonlin4SweepBadStates+0xa7>\n    20fe:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    2102:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    2106:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    210a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    210e:\t48 89 c7             \tmov    %rax,%rdi\n    2111:\te8 00 00 00 00       \tcallq  2116 <Llb4_Nonlin4SweepBadStates+0xbf>\n    2116:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    211a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    211e:\t48 89 c7             \tmov    %rax,%rdi\n    2121:\te8 00 00 00 00       \tcallq  2126 <Llb4_Nonlin4SweepBadStates+0xcf>\n    2126:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    212a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    212e:\t48 89 d6             \tmov    %rdx,%rsi\n    2131:\t48 89 c7             \tmov    %rax,%rdi\n    2134:\te8 00 00 00 00       \tcallq  2139 <Llb4_Nonlin4SweepBadStates+0xe2>\n    2139:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    213d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2141:\t48 89 d6             \tmov    %rdx,%rsi\n    2144:\t48 89 c7             \tmov    %rax,%rdi\n    2147:\te8 00 00 00 00       \tcallq  214c <Llb4_Nonlin4SweepBadStates+0xf5>\n    214c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2150:\t48 89 c7             \tmov    %rax,%rdi\n    2153:\te8 69 df ff ff       \tcallq  c1 <Vec_IntFree>\n    2158:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    215c:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2160:\t48 89 90 e0 02 00 00 \tmov    %rdx,0x2e0(%rax)\n    2167:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    216b:\tc9                   \tleaveq \n    216c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Llb4_Nonlin4SweepBadStates(__int64 a1, __int64 a2,\n                                              unsigned int a3) {\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  int *<span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int *<span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = Llb_Nonlin4SweepVars2Q(a1, a2, Number);\n  <span class=\"supfact\">v8</span> = Cudd_Init(a3, Number L, Number L, Number, Number L);\n  <span class=\"supfact\">v7</span> =\n      Llb_Nonlin4SweepPartitions(<span class=\"supfact\">v8</span>, a1, a2, Number);\n  <span class=\"supfact\">v6</span> = Llb4_Nonlin4SweepBadMonitor(a1, a2, <span class=\"supfact\">v8</span>);\n  Cudd_Ref(<span class=\"supfact\">v6</span>);\n  Cudd_AutodynEnable(<span class=\"supfact\">v8</span>, Number L);\n  <span class=\"supfact\">v5</span> = Llb_Nonlin4Image(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>,\n                                        <span class=\"supfact\">v6</span>, <span class=\"supfact\">v9</span>);\n  Cudd_Ref(<span class=\"supfact\">v5</span>);\n  Cudd_RecursiveDeref(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v6</span>);\n  Llb_Nonlin4SweepDeref(<span class=\"supfact\">v8</span>, (void **)<span class=\"supfact\">v7</span>);\n  Vec_IntFree((void **)<span class=\"supfact\">v9</span>);\n  *(_QWORD *)(<span class=\"supfact\">v8</span> + Number) = <span class=\"supfact\">v5</span>;\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "DdManager_0 *__cdecl Llb4_Nonlin4SweepBadStates(Aig_Man_t *pAig,\n                                                Vec_Int_t *vOrder, int nVars) {\n  DdNode_0 *<span class=\"supfact\">bImage</span>;\n  DdNode_0 *<span class=\"supfact\">bMonitor</span>;\n  Vec_Ptr_t *<span class=\"supfact\">vParts</span>;\n  DdManager_0 *<span class=\"supfact\">dd</span>;\n  Vec_Int_t *<span class=\"supfact\">vVars2Q</span>;\n  <span class=\"supfact\">vVars2Q</span> = Llb_Nonlin4SweepVars2Q(pAig, vOrder, Number);\n  <span class=\"supfact\">dd</span> = (DdManager_0 *)Cudd_Init((unsigned int)nVars, Number L,\n                                                Number L, Number, Number L);\n  <span class=\"supfact\">vParts</span> =\n      Llb_Nonlin4SweepPartitions(<span class=\"supfact\">dd</span>, pAig, vOrder, Number);\n  <span class=\"supfact\">bMonitor</span> =\n      Llb4_Nonlin4SweepBadMonitor(pAig, vOrder, <span class=\"supfact\">dd</span>);\n  Cudd_Ref(<span class=\"supfact\">bMonitor</span>);\n  Cudd_AutodynEnable(<span class=\"supfact\">dd</span>, Number L);\n  <span class=\"supfact\">bImage</span> = (DdNode_0 *)Llb_Nonlin4Image(\n      <span class=\"supfact\">dd</span>, <span class=\"supfact\">vParts</span>, <span class=\"supfact\">bMonitor</span>,\n      <span class=\"supfact\">vVars2Q</span>);\n  Cudd_Ref(<span class=\"supfact\">bImage</span>);\n  Cudd_RecursiveDeref(<span class=\"supfact\">dd</span>, <span class=\"supfact\">bMonitor</span>);\n  Llb_Nonlin4SweepDeref(<span class=\"supfact\">dd</span>, <span class=\"supfact\">vParts</span>);\n  Vec_IntFree(<span class=\"supfact\">vVars2Q</span>);\n  <span class=\"supfact\">dd</span>->bFunc = <span class=\"supfact\">bImage</span>;\n  return <span class=\"supfact\">dd</span>;\n}", "var": [{"name": "v9", "type": "DdManager_0 *", "ref_name": "vVars2Q", "ref_type": "Vec_Int_t *"}, {"name": "v8", "type": "DdNode_0 *", "ref_name": "dd", "ref_type": "DdManager_0 *"}, {"name": "v7", "type": "DdNode_0 *", "ref_name": "vParts", "ref_type": "Vec_Ptr_t *"}, {"name": "v6", "type": "DdNode_0 *", "ref_name": "bMonitor", "ref_type": "DdNode_0 *"}, {"name": "v5", "type": "DdNode_0 *", "ref_name": "bImage", "ref_type": "DdNode_0 *"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/7e0ccd139ec4e288be30e1f86458aeb266d18752a4ba571bc7b2ab7505fe4227", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/88games.o", "objdump": "0000000000000000 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 60          \tsub    $0x60,%rsp\n   b:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n   f:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  13:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  17:\t89 4d 94             \tmov    %ecx,-0x6c(%rbp)\n  1a:\t48 c7 45 e8 60 02 00 \tmovq   $0x260,-0x18(%rbp)\n  21:\t00 \n  22:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  29:\t00 \n  2a:\tc7 45 dc 57 02 00 00 \tmovl   $0x257,-0x24(%rbp)\n  31:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  34:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  38:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  3c:\t48 89 ce             \tmov    %rcx,%rsi\n  3f:\t48 89 c7             \tmov    %rax,%rdi\n  42:\te8 00 00 00 00       \tcallq  47 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0x47>\n  47:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4b:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  50:\t75 27                \tjne    79 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0x79>\n  52:\tbf 08 00 00 00       \tmov    $0x8,%edi\n  57:\te8 00 00 00 00       \tcallq  5c <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0x5c>\n  5c:\t48 89 c3             \tmov    %rax,%rbx\n  5f:\t48 89 df             \tmov    %rbx,%rdi\n  62:\te8 00 00 00 00       \tcallq  67 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0x67>\n  67:\tba 00 00 00 00       \tmov    $0x0,%edx\n  6c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  71:\t48 89 df             \tmov    %rbx,%rdi\n  74:\te8 00 00 00 00       \tcallq  79 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0x79>\n  79:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  7d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  81:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  86:\t48 89 c7             \tmov    %rax,%rdi\n  89:\te8 00 00 00 00       \tcallq  8e <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0x8e>\n  8e:\t48 8b 5d d0          \tmov    -0x30(%rbp),%rbx\n  92:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n  96:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  9a:\t48 89 d1             \tmov    %rdx,%rcx\n  9d:\tba 00 00 00 00       \tmov    $0x0,%edx\n  a2:\t48 89 c6             \tmov    %rax,%rsi\n  a5:\t48 89 df             \tmov    %rbx,%rdi\n  a8:\te8 00 00 00 00       \tcallq  ad <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0xad>\n  ad:\teb 16                \tjmp    c5 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0xc5>\n  af:\t48 83 fa ff          \tcmp    $0xffffffffffffffff,%rdx\n  b3:\t74 08                \tje     bd <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0xbd>\n  b5:\t48 89 c7             \tmov    %rax,%rdi\n  b8:\te8 00 00 00 00       \tcallq  bd <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0xbd>\n  bd:\t48 89 c7             \tmov    %rax,%rdi\n  c0:\te8 00 00 00 00       \tcallq  c5 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0xc5>\n  c5:\t48 89 de             \tmov    %rbx,%rsi\n  c8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  cd:\te8 00 00 00 00       \tcallq  d2 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0xd2>\n  d2:\teb 3f                \tjmp    113 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0x113>\n  d4:\t49 89 c4             \tmov    %rax,%r12\n  d7:\t48 89 5d c8          \tmov    %rbx,-0x38(%rbp)\n  db:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n  e2:\t00 \n  e3:\tc7 45 bc 57 02 00 00 \tmovl   $0x257,-0x44(%rbp)\n  ea:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  ef:\t74 16                \tje     107 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0x107>\n  f1:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n  f4:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  f8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  fc:\t48 89 ce             \tmov    %rcx,%rsi\n  ff:\t48 89 c7             \tmov    %rax,%rdi\n 102:\te8 00 00 00 00       \tcallq  107 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0x107>\n 107:\t90                   \tnop\n 108:\t4c 89 e0             \tmov    %r12,%rax\n 10b:\t48 89 c7             \tmov    %rax,%rdi\n 10e:\te8 00 00 00 00       \tcallq  113 <_Z21driver_device_creatorI14_88games_stateEP8device_tRK14machine_configPKcS2_j+0x113>\n 113:\t48 83 c4 60          \tadd    $0x60,%rsp\n 117:\t5b                   \tpop    %rbx\n 118:\t41 5c                \tpop    %r12\n 11a:\t5d                   \tpop    %rbp\n 11b:\tc3                   \tretq   ", "code_s": "device_t *__fastcall driver_device_creator<_88games_state>(\n    const machine_config *a1, const char *a2, device_t *a3) {\n  std bad_alloc *v3;\n  void *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (void *)malloc_file_line(Number, String, Number);\n  if (!<span class=\"supfact\">s</span>) {\n    v3 = (std bad_alloc *)_cxa_allocate_exception(Number);\n    std bad_alloc bad_alloc(v3); _cxa_throw ( v3 , ( struct type_info * ) & ` typeinfo for ' std bad_alloc , ( void ( __fastcall * ) ( void * ) ) & std bad_alloc ~ bad_alloc ) ; } memset ( <span class=\"supfact\">s</span> , Number , Number ) ; _88games_state _88games_state ( ( _88games_state * ) <span class=\"supfact\">s</span> , a1 , driver_device_creator < _88games_state > , a2 ) ; return ( device_t * ) resource_pool add_object < _88games_state > ( & global_resource_pool , <span class=\"supfact\">s</span> ) ; }", "code_t": "device_t *__cdecl driver_device_creator<_88games_state>(\n    const machine_config *mconfig, const char *tag, device_t *owner,\n    UINT32 clock) {\n  std bad_alloc *v4;\n  _88games_state *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> =\n      (_88games_state *)malloc_file_line(Number, String, Number);\n  if (!<span class=\"supfact\">s</span>) {\n    v4 = (std bad_alloc *)_cxa_allocate_exception(Number);\n    std bad_alloc bad_alloc(v4); _cxa_throw ( v4 , ( struct type_info * ) & ` typeinfo for ' std bad_alloc , ( void ( __fastcall * ) ( void * ) ) & std bad_alloc ~ bad_alloc ) ; } memset ( <span class=\"supfact\">s</span> , Number , sizeof ( _88games_state ) ) ; _88games_state _88games_state ( <span class=\"supfact\">s</span> , mconfig , ( device_type ) driver_device_creator < _88games_state > , tag ) ; return ( device_t * ) resource_pool add_object < _88games_state > ( & global_resource_pool , <span class=\"supfact\">s</span> ) ; }", "var": [{"name": "s", "type": "__unk__", "ref_name": "s", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "JoshVorick", "repo_name": "TowerDefense", "path": "JoshVorick/TowerDefense/24110f1479731bbf24af628f41a3e166772d393fb1ef07140650438f438a8d68", "path_in_repo": "JoshVorick/TowerDefense//TowerDefense", "objdump": "0000000000405682 <drawBullets>:\n  405682:\t55                   \tpush   %rbp\n  405683:\t48 89 e5             \tmov    %rsp,%rbp\n  405686:\t48 83 ec 40          \tsub    $0x40,%rsp\n  40568a:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  40568e:\tbf 56 6f 40 00       \tmov    $0x406f56,%edi\n  405693:\te8 58 bb ff ff       \tcallq  4011f0 <puts@plt>\n  405698:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40569c:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4056a0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4056a4:\te9 66 01 00 00       \tjmpq   40580f <drawBullets+0x18d>\n  4056a9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4056ad:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4056b1:\tf3 0f 10 48 18       \tmovss  0x18(%rax),%xmm1\n  4056b6:\tf3 0f 10 05 ba 18 00 \tmovss  0x18ba(%rip),%xmm0        # 406f78 <_IO_stdin_used+0xf78>\n  4056bd:\t00 \n  4056be:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n  4056c2:\tf3 0f 11 45 f4       \tmovss  %xmm0,-0xc(%rbp)\n  4056c7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4056cb:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4056cf:\tf3 0f 10 48 1c       \tmovss  0x1c(%rax),%xmm1\n  4056d4:\tf3 0f 10 05 9c 18 00 \tmovss  0x189c(%rip),%xmm0        # 406f78 <_IO_stdin_used+0xf78>\n  4056db:\t00 \n  4056dc:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n  4056e0:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n  4056e5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4056e9:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4056ec:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n  4056f0:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n  4056f3:\tf3 0f 5c 4d f4       \tsubss  -0xc(%rbp),%xmm1\n  4056f8:\tf3 0f 10 05 7c 18 00 \tmovss  0x187c(%rip),%xmm0        # 406f7c <_IO_stdin_used+0xf7c>\n  4056ff:\t00 \n  405700:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n  405704:\tf3 0f 10 0d 74 18 00 \tmovss  0x1874(%rip),%xmm1        # 406f80 <_IO_stdin_used+0xf80>\n  40570b:\t00 \n  40570c:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n  405710:\tf3 0f 11 45 e8       \tmovss  %xmm0,-0x18(%rbp)\n  405715:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405719:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  40571c:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n  405720:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n  405723:\tf3 0f 5c 4d f0       \tsubss  -0x10(%rbp),%xmm1\n  405728:\tf3 0f 10 05 4c 18 00 \tmovss  0x184c(%rip),%xmm0        # 406f7c <_IO_stdin_used+0xf7c>\n  40572f:\t00 \n  405730:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n  405734:\tf3 0f 10 0d 44 18 00 \tmovss  0x1844(%rip),%xmm1        # 406f80 <_IO_stdin_used+0xf80>\n  40573b:\t00 \n  40573c:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n  405740:\tf3 0f 11 45 e4       \tmovss  %xmm0,-0x1c(%rbp)\n  405745:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  40574c:\te9 a8 00 00 00       \tjmpq   4057f9 <drawBullets+0x177>\n  405751:\tf3 0f 10 45 f4       \tmovss  -0xc(%rbp),%xmm0\n  405756:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n  40575a:\t66 89 45 dc          \tmov    %ax,-0x24(%rbp)\n  40575e:\tf3 0f 10 45 f0       \tmovss  -0x10(%rbp),%xmm0\n  405763:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n  405767:\t66 89 45 de          \tmov    %ax,-0x22(%rbp)\n  40576b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40576f:\t8b 00                \tmov    (%rax),%eax\n  405771:\t66 89 45 e0          \tmov    %ax,-0x20(%rbp)\n  405775:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405779:\t8b 00                \tmov    (%rax),%eax\n  40577b:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n  40577f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405783:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  405787:\t0f b6 40 32          \tmovzbl 0x32(%rax),%eax\n  40578b:\t0f b6 c8             \tmovzbl %al,%ecx\n  40578e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405792:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  405796:\t0f b6 40 31          \tmovzbl 0x31(%rax),%eax\n  40579a:\t0f b6 d0             \tmovzbl %al,%edx\n  40579d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4057a1:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4057a5:\t0f b6 40 30          \tmovzbl 0x30(%rax),%eax\n  4057a9:\t0f b6 f0             \tmovzbl %al,%esi\n  4057ac:\t48 8b 05 75 39 00 00 \tmov    0x3975(%rip),%rax        # 409128 <screen>\n  4057b3:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4057b7:\t48 89 c7             \tmov    %rax,%rdi\n  4057ba:\te8 f1 b8 ff ff       \tcallq  4010b0 <SDL_MapRGB@plt>\n  4057bf:\t89 c2                \tmov    %eax,%edx\n  4057c1:\t48 8b 05 60 39 00 00 \tmov    0x3960(%rip),%rax        # 409128 <screen>\n  4057c8:\t48 8d 4d dc          \tlea    -0x24(%rbp),%rcx\n  4057cc:\t48 89 ce             \tmov    %rcx,%rsi\n  4057cf:\t48 89 c7             \tmov    %rax,%rdi\n  4057d2:\te8 69 b8 ff ff       \tcallq  401040 <SDL_FillRect@plt>\n  4057d7:\tf3 0f 10 45 f4       \tmovss  -0xc(%rbp),%xmm0\n  4057dc:\tf3 0f 58 45 e8       \taddss  -0x18(%rbp),%xmm0\n  4057e1:\tf3 0f 11 45 f4       \tmovss  %xmm0,-0xc(%rbp)\n  4057e6:\tf3 0f 10 45 f0       \tmovss  -0x10(%rbp),%xmm0\n  4057eb:\tf3 0f 58 45 e4       \taddss  -0x1c(%rbp),%xmm0\n  4057f0:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n  4057f5:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  4057f9:\t83 7d ec 19          \tcmpl   $0x19,-0x14(%rbp)\n  4057fd:\t0f 8e 4e ff ff ff    \tjle    405751 <drawBullets+0xcf>\n  405803:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405807:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  40580b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40580f:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  405814:\t0f 85 8f fe ff ff    \tjne    4056a9 <drawBullets+0x27>\n  40581a:\tbf 68 6f 40 00       \tmov    $0x406f68,%edi\n  40581f:\te8 cc b9 ff ff       \tcallq  4011f0 <puts@plt>\n  405824:\t90                   \tnop\n  405825:\tc9                   \tleaveq \n  405826:\tc3                   \tretq   \n  405827:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n  40582e:\t00 00 ", "code_s": "int __fastcall drawBullets(__int64 a1) {\n  float <span class=\"supfact\">v2</span>;\n  float <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">j</span>;\n  float <span class=\"supfact\">v5</span>;\n  float <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  puts(String);\n  for (<span class=\"supfact\">i</span> = *(_QWORD *)(a1 + Number); <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number)) {\n    <span class=\"supfact\">v6</span> =\n        *(float *)(*(_QWORD *)(<span class=\"supfact\">i</span> + Number) + Number L) + Number;\n    <span class=\"supfact\">v5</span> =\n        *(float *)(*(_QWORD *)(<span class=\"supfact\">i</span> + Number) + Number L) + Number;\n    <span class=\"supfact\">v3</span> =\n        (float)((float)((float)*(int *)(<span class=\"supfact\">i</span> + Number) -\n                        <span class=\"supfact\">v6</span>) +\n                Number) /\n        Number;\n    <span class=\"supfact\">v2</span> =\n        (float)((float)((float)*(int *)(<span class=\"supfact\">i</span> + Number) -\n                        <span class=\"supfact\">v5</span>) +\n                Number) /\n        Number;\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      SDL_MapRGB();\n      SDL_FillRect();\n      <span class=\"supfact\">v6</span> = <span class=\"supfact\">v6</span> + <span class=\"supfact\">v3</span>;\n      <span class=\"supfact\">v5</span> = <span class=\"supfact\">v5</span> + <span class=\"supfact\">v2</span>;\n    }\n  }\n  return puts(String);\n}", "code_t": "void __cdecl drawBullets(SubGame_0 *subGame) {\n  float <span class=\"supfact\">stepY</span>;\n  float <span class=\"supfact\">stepX</span>;\n  int <span class=\"supfact\">i</span>;\n  float <span class=\"supfact\">y</span>;\n  float <span class=\"supfact\">x</span>;\n  Bullet_0 *<span class=\"supfact\">curBullet</span>;\n  puts(String);\n  for (<span class=\"supfact\">curBullet</span> = subGame->bullets; <span class=\"supfact\">curBullet</span>;\n       <span class=\"supfact\">curBullet</span> = <span class=\"supfact\">curBullet</span>->nextBullet) {\n    <span class=\"supfact\">x</span> =\n        <span class=\"supfact\">curBullet</span>->origin-><span class=\"supfact\">x</span> + Number;\n    <span class=\"supfact\">y</span> =\n        <span class=\"supfact\">curBullet</span>->origin-><span class=\"supfact\">y</span> + Number;\n    <span class=\"supfact\">stepX</span> =\n        (float)((float)((float)<span class=\"supfact\">curBullet</span>->targetX -\n                        <span class=\"supfact\">x</span>) +\n                Number) /\n        Number;\n    <span class=\"supfact\">stepY</span> =\n        (float)((float)((float)<span class=\"supfact\">curBullet</span>->targetY -\n                        <span class=\"supfact\">y</span>) +\n                Number) /\n        Number;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>) {\n      SDL_MapRGB();\n      SDL_FillRect();\n      <span class=\"supfact\">x</span> = <span class=\"supfact\">x</span> + <span class=\"supfact\">stepX</span>;\n      <span class=\"supfact\">y</span> = <span class=\"supfact\">y</span> + <span class=\"supfact\">stepY</span>;\n    }\n  }\n  puts(String);\n}", "var": [{"name": "i", "type": "Uint8 *", "ref_name": "curBullet", "ref_type": "Bullet_0 *"}, {"name": "v6", "type": "float", "ref_name": "x", "ref_type": "float"}, {"name": "v5", "type": "float", "ref_name": "y", "ref_type": "float"}, {"name": "j", "type": "float", "ref_name": "i", "ref_type": "int"}, {"name": "v3", "type": "float", "ref_name": "stepX", "ref_type": "float"}, {"name": "v2", "type": "float", "ref_name": "stepY", "ref_type": "float"}], "body_in_train": false}, {"repo_owner": "samikshan", "repo_name": "spartakus", "path": "samikshan/spartakus/14c2b9bf3219a4ff955f47f4d175a981d86dd81d805a4358a65df3c8cdf71034", "path_in_repo": "samikshan/spartakus//symbol.o", "objdump": "000000000000008f <array_element_offset>:\n      8f:\t55                   \tpush   %rbp\n      90:\t48 89 e5             \tmov    %rsp,%rbp\n      93:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n      97:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n      9a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a0 <array_element_offset+0x11>\n      a0:\t48 63 c8             \tmovslq %eax,%rcx\n      a3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n      a7:\tba 00 00 00 00       \tmov    $0x0,%edx\n      ac:\t48 f7 f1             \tdiv    %rcx\n      af:\t48 89 d0             \tmov    %rdx,%rax\n      b2:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n      b5:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n      b9:\t74 0f                \tje     ca <array_element_offset+0x3b>\n      bb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # c1 <array_element_offset+0x32>\n      c1:\t2b 45 fc             \tsub    -0x4(%rbp),%eax\n      c4:\t48 98                \tcltq   \n      c6:\t48 01 45 e8          \tadd    %rax,-0x18(%rbp)\n      ca:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n      cd:\t48 98                \tcltq   \n      cf:\t48 0f af 45 e8       \timul   -0x18(%rbp),%rax\n      d4:\t5d                   \tpop    %rbp\n      d5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall array_element_offset(unsigned __int64 a1, int a2) {\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v3</span> = a1;\n  <span class=\"supfact\">v4</span> = a1 % bits_in_char;\n  if (<span class=\"supfact\">v4</span>)\n    <span class=\"supfact\">v3</span> = bits_in_char - <span class=\"supfact\">v4</span> + a1;\n  return <span class=\"supfact\">v3</span> * a2;\n}", "code_t": "unsigned __int64 __cdecl array_element_offset(unsigned __int64 base_bits,\n                                              int idx) {\n  unsigned __int64 <span class=\"supfact\">base_bitsa</span>;\n  int <span class=\"supfact\">fragment</span>;\n  <span class=\"supfact\">base_bitsa</span> = base_bits;\n  <span class=\"supfact\">fragment</span> = base_bits % bits_in_char;\n  if (<span class=\"supfact\">fragment</span>)\n    <span class=\"supfact\">base_bitsa</span> =\n        bits_in_char - <span class=\"supfact\">fragment</span> + base_bits;\n  return <span class=\"supfact\">base_bitsa</span> * idx;\n}", "var": [{"name": "v4", "type": "int", "ref_name": "fragment", "ref_type": "int"}, {"name": "v3", "type": "__int64", "ref_name": "base_bitsa", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "montegoulding", "repo_name": "mergMarkdown", "path": "montegoulding/mergMarkdown/9a6d7f6b89e03511a000aca313aec7c45e07bd71f0945060bc32a733163b6783", "path_in_repo": "montegoulding/mergMarkdown/mergMarkdown/sundown/sundown", "objdump": "0000000000401933 <free_link_refs>:\n  401933:\t55                   \tpush   %rbp\n  401934:\t48 89 e5             \tmov    %rsp,%rbp\n  401937:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40193b:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  40193f:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  401946:\t00 \n  401947:\teb 68                \tjmp    4019b1 <free_link_refs+0x7e>\n  401949:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40194d:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  401954:\t00 \n  401955:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401959:\t48 01 d0             \tadd    %rdx,%rax\n  40195c:\t48 8b 00             \tmov    (%rax),%rax\n  40195f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401963:\teb 40                \tjmp    4019a5 <free_link_refs+0x72>\n  401965:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401969:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  40196d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  401971:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401975:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  401979:\t48 89 c7             \tmov    %rax,%rdi\n  40197c:\te8 41 6c 00 00       \tcallq  4085c2 <bufrelease>\n  401981:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401985:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  401989:\t48 89 c7             \tmov    %rax,%rdi\n  40198c:\te8 31 6c 00 00       \tcallq  4085c2 <bufrelease>\n  401991:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401995:\t48 89 c7             \tmov    %rax,%rdi\n  401998:\te8 93 f6 ff ff       \tcallq  401030 <free@plt>\n  40199d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4019a1:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4019a5:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  4019aa:\t75 b9                \tjne    401965 <free_link_refs+0x32>\n  4019ac:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  4019b1:\t48 83 7d f8 07       \tcmpq   $0x7,-0x8(%rbp)\n  4019b6:\t76 91                \tjbe    401949 <free_link_refs+0x16>\n  4019b8:\t90                   \tnop\n  4019b9:\t90                   \tnop\n  4019ba:\tc9                   \tleaveq \n  4019bb:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall free_link_refs(__int64 a1) {\n  _QWORD *result;\n  _QWORD *<span class=\"supfact\">v2</span>;\n  _QWORD *<span class=\"supfact\">ptr</span>;\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    result = *(_QWORD **)(Number * <span class=\"supfact\">i</span> + a1);\n    for (<span class=\"supfact\">ptr</span> = result; <span class=\"supfact\">ptr</span>;\n         <span class=\"supfact\">ptr</span> = <span class=\"supfact\">v2</span>) {\n      <span class=\"supfact\">v2</span> = (_QWORD *)<span class=\"supfact\">ptr</span>[Number];\n      bufrelease(<span class=\"supfact\">ptr</span>[Number]);\n      bufrelease(<span class=\"supfact\">ptr</span>[Number]);\n      free(<span class=\"supfact\">ptr</span>);\n      result = <span class=\"supfact\">v2</span>;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl free_link_refs(link_ref **references) {\n  link_ref *<span class=\"supfact\">next</span>;\n  link_ref *<span class=\"supfact\">r</span>;\n  size_t <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">r</span> = references[<span class=\"supfact\">i</span>]; <span class=\"supfact\">r</span>;\n         <span class=\"supfact\">r</span> = <span class=\"supfact\">next</span>) {\n      <span class=\"supfact\">next</span> = <span class=\"supfact\">r</span>-><span class=\"supfact\">next</span>;\n      bufrelease(<span class=\"supfact\">r</span>->link);\n      bufrelease(<span class=\"supfact\">r</span>->title);\n      free(<span class=\"supfact\">r</span>);\n    }\n  }\n}", "var": [{"name": "i", "type": "size_t", "ref_name": "i", "ref_type": "size_t"}, {"name": "ptr", "type": "size_t *", "ref_name": "r", "ref_type": "__unk__"}, {"name": "v2", "type": "size_t", "ref_name": "next", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "mligor", "repo_name": "jucpp", "path": "mligor/jucpp/5869f61513beec07fe02719c8b5102d7ceba8929c4aa32c31c6f9689f11dbc7b", "path_in_repo": "mligor/jucpp//build/mongoose_lib.obj", "objdump": "0000000000012d2c <mg_mqtt_subscribe>:\n   12d2c:\t55                   \tpush   %rbp\n   12d2d:\t48 89 e5             \tmov    %rsp,%rbp\n   12d30:\t48 83 ec 40          \tsub    $0x40,%rsp\n   12d34:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   12d38:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n   12d3c:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n   12d40:\t89 c8                \tmov    %ecx,%eax\n   12d42:\t66 89 45 c4          \tmov    %ax,-0x3c(%rbp)\n   12d46:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12d4a:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n   12d4e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   12d52:\t0f b7 45 c4          \tmovzwl -0x3c(%rbp),%eax\n   12d56:\t89 c7                \tmov    %eax,%edi\n   12d58:\te8 00 00 00 00       \tcallq  12d5d <mg_mqtt_subscribe+0x31>\n   12d5d:\t66 89 45 ee          \tmov    %ax,-0x12(%rbp)\n   12d61:\t48 8d 4d ee          \tlea    -0x12(%rbp),%rcx\n   12d65:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12d69:\tba 02 00 00 00       \tmov    $0x2,%edx\n   12d6e:\t48 89 ce             \tmov    %rcx,%rsi\n   12d71:\t48 89 c7             \tmov    %rax,%rdi\n   12d74:\te8 00 00 00 00       \tcallq  12d79 <mg_mqtt_subscribe+0x4d>\n   12d79:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n   12d80:\t00 \n   12d81:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   12d85:\t48 3b 45 c8          \tcmp    -0x38(%rbp),%rax\n   12d89:\t0f 83 bc 00 00 00    \tjae    12e4b <mg_mqtt_subscribe+0x11f>\n   12d8f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   12d93:\t48 c1 e0 04          \tshl    $0x4,%rax\n   12d97:\t48 89 c2             \tmov    %rax,%rdx\n   12d9a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   12d9e:\t48 01 d0             \tadd    %rdx,%rax\n   12da1:\t48 8b 00             \tmov    (%rax),%rax\n   12da4:\t48 89 c7             \tmov    %rax,%rdi\n   12da7:\te8 00 00 00 00       \tcallq  12dac <mg_mqtt_subscribe+0x80>\n   12dac:\t0f b7 c0             \tmovzwl %ax,%eax\n   12daf:\t89 c7                \tmov    %eax,%edi\n   12db1:\te8 00 00 00 00       \tcallq  12db6 <mg_mqtt_subscribe+0x8a>\n   12db6:\t66 89 45 ec          \tmov    %ax,-0x14(%rbp)\n   12dba:\t48 8d 4d ec          \tlea    -0x14(%rbp),%rcx\n   12dbe:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12dc2:\tba 02 00 00 00       \tmov    $0x2,%edx\n   12dc7:\t48 89 ce             \tmov    %rcx,%rsi\n   12dca:\t48 89 c7             \tmov    %rax,%rdi\n   12dcd:\te8 00 00 00 00       \tcallq  12dd2 <mg_mqtt_subscribe+0xa6>\n   12dd2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   12dd6:\t48 c1 e0 04          \tshl    $0x4,%rax\n   12dda:\t48 89 c2             \tmov    %rax,%rdx\n   12ddd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   12de1:\t48 01 d0             \tadd    %rdx,%rax\n   12de4:\t48 8b 00             \tmov    (%rax),%rax\n   12de7:\t48 89 c7             \tmov    %rax,%rdi\n   12dea:\te8 00 00 00 00       \tcallq  12def <mg_mqtt_subscribe+0xc3>\n   12def:\t89 c6                \tmov    %eax,%esi\n   12df1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   12df5:\t48 c1 e0 04          \tshl    $0x4,%rax\n   12df9:\t48 89 c2             \tmov    %rax,%rdx\n   12dfc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   12e00:\t48 01 d0             \tadd    %rdx,%rax\n   12e03:\t48 8b 08             \tmov    (%rax),%rcx\n   12e06:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12e0a:\t89 f2                \tmov    %esi,%edx\n   12e0c:\t48 89 ce             \tmov    %rcx,%rsi\n   12e0f:\t48 89 c7             \tmov    %rax,%rdi\n   12e12:\te8 00 00 00 00       \tcallq  12e17 <mg_mqtt_subscribe+0xeb>\n   12e17:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   12e1b:\t48 c1 e0 04          \tshl    $0x4,%rax\n   12e1f:\t48 89 c2             \tmov    %rax,%rdx\n   12e22:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   12e26:\t48 01 d0             \tadd    %rdx,%rax\n   12e29:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n   12e2d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12e31:\tba 01 00 00 00       \tmov    $0x1,%edx\n   12e36:\t48 89 ce             \tmov    %rcx,%rsi\n   12e39:\t48 89 c7             \tmov    %rax,%rdi\n   12e3c:\te8 00 00 00 00       \tcallq  12e41 <mg_mqtt_subscribe+0x115>\n   12e41:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n   12e46:\te9 36 ff ff ff       \tjmpq   12d81 <mg_mqtt_subscribe+0x55>\n   12e4b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12e4f:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n   12e53:\t48 2b 45 f0          \tsub    -0x10(%rbp),%rax\n   12e57:\t48 89 c2             \tmov    %rax,%rdx\n   12e5a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   12e5e:\t48 89 d1             \tmov    %rdx,%rcx\n   12e61:\tba 02 00 00 00       \tmov    $0x2,%edx\n   12e66:\tbe 08 00 00 00       \tmov    $0x8,%esi\n   12e6b:\t48 89 c7             \tmov    %rax,%rdi\n   12e6e:\te8 e0 fc ff ff       \tcallq  12b53 <_ZL22mg_mqtt_prepend_headerP13mg_connectionhhm>\n   12e73:\t90                   \tnop\n   12e74:\tc9                   \tleaveq \n   12e75:\tc3                   \tretq   ", "code_s": "size_t __fastcall mg_mqtt_subscribe(_QWORD *a1, __int64 a2, unsigned __int64 a3,\n                                    uint16_t a4) {\n  uint16_t v4;\n  unsigned int v5;\n  uint16_t <span class=\"supfact\">v8</span>;\n  uint16_t <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v10</span> = a1[Number];\n  <span class=\"supfact\">v9</span> = htons(a4);\n  mg_send(a1, (__int64)&<span class=\"supfact\">v9</span>, Number);\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> < a3;\n       ++<span class=\"supfact\">i</span>) {\n    v4 = strlen(*(const char **)(Number * <span class=\"supfact\">i</span> + a2));\n    <span class=\"supfact\">v8</span> = htons(v4);\n    mg_send(a1, (__int64)&<span class=\"supfact\">v8</span>, Number);\n    v5 = strlen(*(const char **)(Number * <span class=\"supfact\">i</span> + a2));\n    mg_send(a1, *(_QWORD *)(Number * <span class=\"supfact\">i</span> + a2), v5);\n    mg_send(a1, Number * <span class=\"supfact\">i</span> + a2 + Number, Number);\n  }\n  return mg_mqtt_prepend_header((__int64)a1, Number, Number,\n                                a1[Number] - <span class=\"supfact\">v10</span>);\n}", "code_t": "void __cdecl mg_mqtt_subscribe(mg_connection *nc,\n                               const mg_mqtt_topic_expression *topics,\n                               size_t topics_len, uint16_t message_id) {\n  uint16_t v4;\n  int v5;\n  uint16_t <span class=\"supfact\">topic_len_n</span>;\n  uint16_t <span class=\"supfact\">message_id_n</span>;\n  size_t <span class=\"supfact\">old_len</span>;\n  size_t <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">old_len</span> = nc->send_mbuf.len;\n  <span class=\"supfact\">message_id_n</span> = htons(message_id);\n  mg_send(nc, &<span class=\"supfact\">message_id_n</span>, Number);\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> < topics_len;\n       ++<span class=\"supfact\">i</span>) {\n    v4 = strlen(topics[<span class=\"supfact\">i</span>].topic);\n    <span class=\"supfact\">topic_len_n</span> = htons(v4);\n    mg_send(nc, &<span class=\"supfact\">topic_len_n</span>, Number);\n    v5 = strlen(topics[<span class=\"supfact\">i</span>].topic);\n    mg_send(nc, topics[<span class=\"supfact\">i</span>].topic, v5);\n    mg_send(nc, &topics[<span class=\"supfact\">i</span>].qos, Number);\n  }\n  mg_mqtt_prepend_header(nc, Number, Number,\n                         nc->send_mbuf.len - <span class=\"supfact\">old_len</span>);\n}", "var": [{"name": "i", "type": "size_t", "ref_name": "i", "ref_type": "size_t"}, {"name": "v10", "type": "size_t", "ref_name": "old_len", "ref_type": "size_t"}, {"name": "v9", "type": "uint16_t", "ref_name": "message_id_n", "ref_type": "uint16_t"}, {"name": "v8", "type": "uint16_t", "ref_name": "topic_len_n", "ref_type": "uint16_t"}], "body_in_train": false}, {"repo_owner": "sdoddam1", "repo_name": "qemu-2.5.0", "path": "sdoddam1/qemu-2.5.0/02dc41c11a060fa43c7fea14f4cde82d8063885f541b6deedc98a9dec3af440e", "path_in_repo": "sdoddam1/qemu-2.5.0//qga/commands-posix.o", "objdump": "0000000000000f24 <qmp_guest_file_write>:\n     f24:\t55                   \tpush   %rbp\n     f25:\t48 89 e5             \tmov    %rsp,%rbp\n     f28:\t48 83 ec 70          \tsub    $0x70,%rsp\n     f2c:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     f30:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     f34:\t89 d0                \tmov    %edx,%eax\n     f36:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n     f3a:\t4c 89 45 98          \tmov    %r8,-0x68(%rbp)\n     f3e:\t88 45 ac             \tmov    %al,-0x54(%rbp)\n     f41:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     f48:\t00 00 \n     f4a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     f4e:\t31 c0                \txor    %eax,%eax\n     f50:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n     f57:\t00 \n     f58:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n     f5c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     f60:\t48 89 d6             \tmov    %rdx,%rsi\n     f63:\t48 89 c7             \tmov    %rax,%rdi\n     f66:\te8 0a f8 ff ff       \tcallq  775 <guest_file_handle_find>\n     f6b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     f6f:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n     f74:\t75 0a                \tjne    f80 <qmp_guest_file_write+0x5c>\n     f76:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f7b:\te9 e3 01 00 00       \tjmpq   1163 <qmp_guest_file_write+0x23f>\n     f80:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f84:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     f88:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     f8c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f90:\t8b 40 10             \tmov    0x10(%rax),%eax\n     f93:\t83 f8 01             \tcmp    $0x1,%eax\n     f96:\t75 69                \tjne    1001 <qmp_guest_file_write+0xdd>\n     f98:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f9c:\tba 01 00 00 00       \tmov    $0x1,%edx\n     fa1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     fa6:\t48 89 c7             \tmov    %rax,%rdi\n     fa9:\te8 00 00 00 00       \tcallq  fae <qmp_guest_file_write+0x8a>\n     fae:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n     fb1:\t83 7d c8 ff          \tcmpl   $0xffffffff,-0x38(%rbp)\n     fb5:\t75 3f                \tjne    ff6 <qmp_guest_file_write+0xd2>\n     fb7:\te8 00 00 00 00       \tcallq  fbc <qmp_guest_file_write+0x98>\n     fbc:\t8b 10                \tmov    (%rax),%edx\n     fbe:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     fc2:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # fc9 <qmp_guest_file_write+0xa5>\n     fc9:\t41 89 d0             \tmov    %edx,%r8d\n     fcc:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # fd3 <qmp_guest_file_write+0xaf>\n     fd3:\tba 0a 02 00 00       \tmov    $0x20a,%edx\n     fd8:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # fdf <qmp_guest_file_write+0xbb>\n     fdf:\t48 89 c7             \tmov    %rax,%rdi\n     fe2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     fe7:\te8 00 00 00 00       \tcallq  fec <qmp_guest_file_write+0xc8>\n     fec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ff1:\te9 6d 01 00 00       \tjmpq   1163 <qmp_guest_file_write+0x23f>\n     ff6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     ffa:\tc7 40 10 00 00 00 00 \tmovl   $0x0,0x10(%rax)\n    1001:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    1005:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1009:\t48 89 d6             \tmov    %rdx,%rsi\n    100c:\t48 89 c7             \tmov    %rax,%rdi\n    100f:\te8 00 00 00 00       \tcallq  1014 <qmp_guest_file_write+0xf0>\n    1014:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1018:\t0f b6 45 ac          \tmovzbl -0x54(%rbp),%eax\n    101c:\t83 f0 01             \txor    $0x1,%eax\n    101f:\t84 c0                \ttest   %al,%al\n    1021:\t74 0a                \tje     102d <qmp_guest_file_write+0x109>\n    1023:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1027:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n    102b:\teb 5c                \tjmp    1089 <qmp_guest_file_write+0x165>\n    102d:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n    1032:\t78 0d                \tjs     1041 <qmp_guest_file_write+0x11d>\n    1034:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n    1038:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    103c:\t48 39 c2             \tcmp    %rax,%rdx\n    103f:\t76 48                \tjbe    1089 <qmp_guest_file_write+0x165>\n    1041:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n    1045:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1049:\t49 89 d1             \tmov    %rdx,%r9\n    104c:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 1053 <qmp_guest_file_write+0x12f>\n    1053:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 105a <qmp_guest_file_write+0x136>\n    105a:\tba 15 02 00 00       \tmov    $0x215,%edx\n    105f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1066 <qmp_guest_file_write+0x142>\n    1066:\t48 89 c7             \tmov    %rax,%rdi\n    1069:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    106e:\te8 00 00 00 00       \tcallq  1073 <qmp_guest_file_write+0x14f>\n    1073:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1077:\t48 89 c7             \tmov    %rax,%rdi\n    107a:\te8 00 00 00 00       \tcallq  107f <qmp_guest_file_write+0x15b>\n    107f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1084:\te9 da 00 00 00       \tjmpq   1163 <qmp_guest_file_write+0x23f>\n    1089:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n    108d:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    1091:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1095:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    109a:\t48 89 c7             \tmov    %rax,%rdi\n    109d:\te8 00 00 00 00       \tcallq  10a2 <qmp_guest_file_write+0x17e>\n    10a2:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    10a5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    10a9:\t48 89 c7             \tmov    %rax,%rdi\n    10ac:\te8 00 00 00 00       \tcallq  10b1 <qmp_guest_file_write+0x18d>\n    10b1:\t85 c0                \ttest   %eax,%eax\n    10b3:\t74 4f                \tje     1104 <qmp_guest_file_write+0x1e0>\n    10b5:\te8 00 00 00 00       \tcallq  10ba <qmp_guest_file_write+0x196>\n    10ba:\t8b 10                \tmov    (%rax),%edx\n    10bc:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    10c0:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 10c7 <qmp_guest_file_write+0x1a3>\n    10c7:\t41 89 d0             \tmov    %edx,%r8d\n    10ca:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 10d1 <qmp_guest_file_write+0x1ad>\n    10d1:\tba 1d 02 00 00       \tmov    $0x21d,%edx\n    10d6:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10dd <qmp_guest_file_write+0x1b9>\n    10dd:\t48 89 c7             \tmov    %rax,%rdi\n    10e0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    10e5:\te8 00 00 00 00       \tcallq  10ea <qmp_guest_file_write+0x1c6>\n    10ea:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    10ee:\t48 89 c6             \tmov    %rax,%rsi\n    10f1:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 10f8 <qmp_guest_file_write+0x1d4>\n    10f8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    10fd:\te8 00 00 00 00       \tcallq  1102 <qmp_guest_file_write+0x1de>\n    1102:\teb 43                \tjmp    1147 <qmp_guest_file_write+0x223>\n    1104:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    1109:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    110e:\te8 00 00 00 00       \tcallq  1113 <qmp_guest_file_write+0x1ef>\n    1113:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1117:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    111a:\t48 63 d0             \tmovslq %eax,%rdx\n    111d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1121:\t48 89 10             \tmov    %rdx,(%rax)\n    1124:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1128:\t48 89 c7             \tmov    %rax,%rdi\n    112b:\te8 00 00 00 00       \tcallq  1130 <qmp_guest_file_write+0x20c>\n    1130:\t85 c0                \ttest   %eax,%eax\n    1132:\t0f 95 c2             \tsetne  %dl\n    1135:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1139:\t88 50 08             \tmov    %dl,0x8(%rax)\n    113c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1140:\tc7 40 10 02 00 00 00 \tmovl   $0x2,0x10(%rax)\n    1147:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    114b:\t48 89 c7             \tmov    %rax,%rdi\n    114e:\te8 00 00 00 00       \tcallq  1153 <qmp_guest_file_write+0x22f>\n    1153:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1157:\t48 89 c7             \tmov    %rax,%rdi\n    115a:\te8 00 00 00 00       \tcallq  115f <qmp_guest_file_write+0x23b>\n    115f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1163:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1167:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    116e:\t00 00 \n    1170:\t74 05                \tje     1177 <qmp_guest_file_write+0x253>\n    1172:\te8 00 00 00 00       \tcallq  1177 <qmp_guest_file_write+0x253>\n    1177:\tc9                   \tleaveq \n    1178:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qmp_guest_file_write(__int64 a1, __int64 a2, char a3,\n                                        signed __int64 a4, __int64 a5) {\n  int *v6;\n  int v7;\n  int *v8;\n  int v9;\n  int <span class=\"supfact\">v13</span>;\n  size_t <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  _QWORD *<span class=\"supfact\">v16</span>;\n  FILE *<span class=\"supfact\">stream</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  unsigned __int64 <span class=\"supfact\">v19</span>;\n  <span class=\"supfact\">v19</span> = __readfsqword(Number);\n  <span class=\"supfact\">v15</span> = Number L;\n  <span class=\"supfact\">v16</span> = guest_file_handle_find(a1, a5);\n  if (!<span class=\"supfact\">v16</span>)\n    return Number L;\n  <span class=\"supfact\">stream</span> = (FILE *)<span class=\"supfact\">v16</span>[Number];\n  if (*((_DWORD *)<span class=\"supfact\">v16</span> + Number) == Number) {\n    if (fseek(<span class=\"supfact\">stream</span>, Number L, Number) == Number) {\n      v6 = _errno_location();\n      error_setg_errno_internal(a5, String, Number L, String, (unsigned int)*v6,\n                                String);\n      return Number L;\n    }\n    *((_DWORD *)<span class=\"supfact\">v16</span> + Number) = Number;\n  }\n  <span class=\"supfact\">ptr</span> = (void *)g_base64_decode(a2, &<span class=\"supfact\">v14</span>);\n  if (a3 != Number) {\n    v7 = fwrite(<span class=\"supfact\">ptr</span>, Number, <span class=\"supfact\">v14</span>,\n                <span class=\"supfact\">stream</span>);\n  } else {\n    if (a4 < Number || a4 > <span class=\"supfact\">v14</span>) {\n      error_setg_internal(a5, String, Number L, String, String, a4);\n      g_free(<span class=\"supfact\">ptr</span>);\n      return Number L;\n    }\n    v7 = fwrite(<span class=\"supfact\">ptr</span>, Number, a4, <span class=\"supfact\">stream</span>);\n  }\n  <span class=\"supfact\">v13</span> = v7;\n  if (ferror(<span class=\"supfact\">stream</span>)) {\n    v8 = _errno_location();\n    error_setg_errno_internal(a5, String, Number L, String, (unsigned int)*v8,\n                              String);\n    slog(String, a1);\n  } else {\n    <span class=\"supfact\">v15</span> = g_malloc0_n(Number L, Number L);\n    *(_QWORD *)<span class=\"supfact\">v15</span> = <span class=\"supfact\">v13</span>;\n    v9 = feof(<span class=\"supfact\">stream</span>);\n    *(_BYTE *)(<span class=\"supfact\">v15</span> + Number) = v9 != Number;\n    *((_DWORD *)<span class=\"supfact\">v16</span> + Number) = Number;\n  }\n  g_free(<span class=\"supfact\">ptr</span>);\n  clearerr(<span class=\"supfact\">stream</span>);\n  return <span class=\"supfact\">v15</span>;\n}", "code_t": "GuestFileWrite_0 *__cdecl qmp_guest_file_write(int64_t handle,\n                                               const char *buf_b64,\n                                               bool has_count, int64_t count,\n                                               Error_0 **errp) {\n  int *v6;\n  int v7;\n  int *v8;\n  int v9;\n  int <span class=\"supfact\">write_count</span>;\n  gsize <span class=\"supfact\">buf_len</span>;\n  GuestFileWrite_0 *<span class=\"supfact\">write_data</span>;\n  GuestFileHandle_0 *<span class=\"supfact\">gfh</span>;\n  FILE *<span class=\"supfact\">fh</span>;\n  guchar *<span class=\"supfact\">buf</span>;\n  unsigned __int64 <span class=\"supfact\">v19</span>;\n  <span class=\"supfact\">v19</span> = __readfsqword(Number);\n  <span class=\"supfact\">write_data</span> = Number L;\n  <span class=\"supfact\">gfh</span> = guest_file_handle_find(handle, errp);\n  if (!<span class=\"supfact\">gfh</span>)\n    return Number L;\n  <span class=\"supfact\">fh</span> = <span class=\"supfact\">gfh</span>-><span class=\"supfact\">fh</span>;\n  if (<span class=\"supfact\">gfh</span>->state == RW_STATE_READING) {\n    if (fseek(<span class=\"supfact\">fh</span>, Number L, Number) == Number) {\n      v6 = _errno_location();\n      error_setg_errno_internal(errp, String, Number L, String,\n                                (unsigned int)*v6, String);\n      return Number L;\n    }\n    <span class=\"supfact\">gfh</span>->state = RW_STATE_NEW;\n  }\n  <span class=\"supfact\">buf</span> =\n      (guchar *)g_base64_decode(buf_b64, &<span class=\"supfact\">buf_len</span>);\n  if (!has_count) {\n    v7 = fwrite(<span class=\"supfact\">buf</span>, Number, <span class=\"supfact\">buf_len</span>,\n                <span class=\"supfact\">fh</span>);\n  } else {\n    if (count < Number || count > <span class=\"supfact\">buf_len</span>) {\n      error_setg_internal(errp, String, Number L, String, String, count);\n      g_free(<span class=\"supfact\">buf</span>);\n      return Number L;\n    }\n    v7 = fwrite(<span class=\"supfact\">buf</span>, Number, count, <span class=\"supfact\">fh</span>);\n  }\n  <span class=\"supfact\">write_count</span> = v7;\n  if (ferror(<span class=\"supfact\">fh</span>)) {\n    v8 = _errno_location();\n    error_setg_errno_internal(errp, String, Number L, String, (unsigned int)*v8,\n                              String);\n    slog(String, handle);\n  } else {\n    <span class=\"supfact\">write_data</span> =\n        (GuestFileWrite_0 *)g_malloc0_n(Number L, Number L);\n    <span class=\"supfact\">write_data</span>->count = <span class=\"supfact\">write_count</span>;\n    v9 = feof(<span class=\"supfact\">fh</span>);\n    <span class=\"supfact\">write_data</span>->eof = v9 != Number;\n    <span class=\"supfact\">gfh</span>->state = RW_STATE_WRITING;\n  }\n  g_free(<span class=\"supfact\">buf</span>);\n  clearerr(<span class=\"supfact\">fh</span>);\n  return <span class=\"supfact\">write_data</span>;\n}", "var": [{"name": "v19", "type": "unsigned __int64", "ref_name": "v19", "ref_type": "unsigned __int64"}, {"name": "ptr", "type": "guchar *", "ref_name": "buf", "ref_type": "guchar *"}, {"name": "stream", "type": "FILE *", "ref_name": "fh", "ref_type": "FILE *"}, {"name": "v16", "type": "GuestFileHandle_0 *", "ref_name": "gfh", "ref_type": "GuestFileHandle_0 *"}, {"name": "v15", "type": "GuestFileWrite_0 *", "ref_name": "write_data", "ref_type": "GuestFileWrite_0 *"}, {"name": "v14", "type": "gsize", "ref_name": "buf_len", "ref_type": "gsize"}, {"name": "v13", "type": "int", "ref_name": "write_count", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "HexHive", "repo_name": "SMoTherSpectre", "path": "HexHive/SMoTherSpectre/ec41c0c00557ffbce0cc3393db721b159142a5333202d49765531b016a1c4d36", "path_in_repo": "HexHive/SMoTherSpectre/openssl_attack/openssl/test/ct_test.o", "objdump": "00000000000004ed <compare_extension_printout>:\n     4ed:\t55                   \tpush   %rbp\n     4ee:\t48 89 e5             \tmov    %rsp,%rbp\n     4f1:\t48 83 ec 30          \tsub    $0x30,%rsp\n     4f5:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     4f9:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     4fd:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     504:\t00 \n     505:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     50c:\t00 \n     50d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     514:\te8 00 00 00 00       \tcallq  519 <compare_extension_printout+0x2c>\n     519:\t48 89 c7             \tmov    %rax,%rdi\n     51c:\te8 00 00 00 00       \tcallq  521 <compare_extension_printout+0x34>\n     521:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     525:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     529:\t48 89 c1             \tmov    %rax,%rcx\n     52c:\tba 00 00 00 00       \tmov    $0x0,%edx\n     531:\tbe b1 00 00 00       \tmov    $0xb1,%esi\n     536:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     53b:\te8 00 00 00 00       \tcallq  540 <compare_extension_printout+0x53>\n     540:\t85 c0                \ttest   %eax,%eax\n     542:\t0f 84 c9 00 00 00    \tje     611 <compare_extension_printout+0x124>\n     548:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n     54c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     550:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     555:\tba 00 00 00 00       \tmov    $0x0,%edx\n     55a:\t48 89 c7             \tmov    %rax,%rdi\n     55d:\te8 00 00 00 00       \tcallq  562 <compare_extension_printout+0x75>\n     562:\t85 c0                \ttest   %eax,%eax\n     564:\t0f 95 c0             \tsetne  %al\n     567:\t0f b6 c0             \tmovzbl %al,%eax\n     56a:\t89 c1                \tmov    %eax,%ecx\n     56c:\tba 00 00 00 00       \tmov    $0x0,%edx\n     571:\tbe b2 00 00 00       \tmov    $0xb2,%esi\n     576:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     57b:\te8 00 00 00 00       \tcallq  580 <compare_extension_printout+0x93>\n     580:\t85 c0                \ttest   %eax,%eax\n     582:\t0f 84 89 00 00 00    \tje     611 <compare_extension_printout+0x124>\n     588:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     58c:\tba 01 00 00 00       \tmov    $0x1,%edx\n     591:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     596:\t48 89 c7             \tmov    %rax,%rdi\n     599:\te8 00 00 00 00       \tcallq  59e <compare_extension_printout+0xb1>\n     59e:\t85 c0                \ttest   %eax,%eax\n     5a0:\t0f 95 c0             \tsetne  %al\n     5a3:\t0f b6 c0             \tmovzbl %al,%eax\n     5a6:\t89 c1                \tmov    %eax,%ecx\n     5a8:\tba 00 00 00 00       \tmov    $0x0,%edx\n     5ad:\tbe b7 00 00 00       \tmov    $0xb7,%esi\n     5b2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     5b7:\te8 00 00 00 00       \tcallq  5bc <compare_extension_printout+0xcf>\n     5bc:\t85 c0                \ttest   %eax,%eax\n     5be:\t74 54                \tje     614 <compare_extension_printout+0x127>\n     5c0:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n     5c4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     5c8:\t48 89 d1             \tmov    %rdx,%rcx\n     5cb:\tba 00 00 00 00       \tmov    $0x0,%edx\n     5d0:\tbe 03 00 00 00       \tmov    $0x3,%esi\n     5d5:\t48 89 c7             \tmov    %rax,%rdi\n     5d8:\te8 00 00 00 00       \tcallq  5dd <compare_extension_printout+0xf0>\n     5dd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5e1:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     5e5:\t49 89 d1             \tmov    %rdx,%r9\n     5e8:\t49 89 c0             \tmov    %rax,%r8\n     5eb:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     5f0:\tba 00 00 00 00       \tmov    $0x0,%edx\n     5f5:\tbe bb 00 00 00       \tmov    $0xbb,%esi\n     5fa:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     5ff:\te8 00 00 00 00       \tcallq  604 <compare_extension_printout+0x117>\n     604:\t85 c0                \ttest   %eax,%eax\n     606:\t74 0f                \tje     617 <compare_extension_printout+0x12a>\n     608:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n     60f:\teb 07                \tjmp    618 <compare_extension_printout+0x12b>\n     611:\t90                   \tnop\n     612:\teb 04                \tjmp    618 <compare_extension_printout+0x12b>\n     614:\t90                   \tnop\n     615:\teb 01                \tjmp    618 <compare_extension_printout+0x12b>\n     617:\t90                   \tnop\n     618:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     61c:\t48 89 c7             \tmov    %rax,%rdi\n     61f:\te8 00 00 00 00       \tcallq  624 <compare_extension_printout+0x137>\n     624:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     627:\tc9                   \tleaveq \n     628:\tc3                   \tretq   ", "code_s": "__int64 __fastcall compare_extension_printout(__int64 a1, __int64 a2) {\n  __int64 v2;\n  int v3;\n  int v4;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v6</span> = Number L;\n  <span class=\"supfact\">v8</span> = Number;\n  v2 = BIO_s_mem();\n  <span class=\"supfact\">v7</span> = BIO_new(v2);\n  if ((unsigned int)test_ptr(String, Number L, String, <span class=\"supfact\">v7</span>)) {\n    v3 = X509V3_EXT_print(<span class=\"supfact\">v7</span>, a1, Number L, Number L);\n    if ((unsigned int)test_true(String, Number L, String, v3 != Number)) {\n      v4 = BIO_write(<span class=\"supfact\">v7</span>, &unk_16DD, Number L);\n      if ((unsigned int)test_true(String, Number L, String, v4 != Number)) {\n        BIO_ctrl(<span class=\"supfact\">v7</span>, Number L, Number L, &<span class=\"supfact\">v6</span>);\n        if ((unsigned int)test_str_eq(String, Number L, String, String,\n                                      <span class=\"supfact\">v6</span>, a2))\n          <span class=\"supfact\">v8</span> = Number;\n      }\n    }\n  }\n  BIO_free(<span class=\"supfact\">v7</span>);\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "int __cdecl compare_extension_printout(X509_EXTENSION *extension,\n                                       const char *expected_output) {\n  __int64 v2;\n  int v3;\n  int v4;\n  char *<span class=\"supfact\">actual_output</span>;\n  BIO *<span class=\"supfact\">text_buffer</span>;\n  int <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">actual_output</span> = Number L;\n  <span class=\"supfact\">result</span> = Number;\n  v2 = BIO_s_mem();\n  <span class=\"supfact\">text_buffer</span> = (BIO *)BIO_new(v2);\n  if ((unsigned int)test_ptr(String, Number L, String,\n                             <span class=\"supfact\">text_buffer</span>)) {\n    v3 = X509V3_EXT_print(<span class=\"supfact\">text_buffer</span>, extension, Number L,\n                          Number L);\n    if ((unsigned int)test_true(String, Number L, String, v3 != Number)) {\n      v4 = BIO_write(<span class=\"supfact\">text_buffer</span>, &unk_16DD, Number L);\n      if ((unsigned int)test_true(String, Number L, String, v4 != Number)) {\n        BIO_ctrl(<span class=\"supfact\">text_buffer</span>, Number L, Number L,\n                 &<span class=\"supfact\">actual_output</span>);\n        if ((unsigned int)test_str_eq(String, Number L, String, String,\n                                      <span class=\"supfact\">actual_output</span>,\n                                      expected_output))\n          <span class=\"supfact\">result</span> = Number;\n      }\n    }\n  }\n  BIO_free(<span class=\"supfact\">text_buffer</span>);\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "v8", "type": "int", "ref_name": "result", "ref_type": "int"}, {"name": "v7", "type": "BIO *", "ref_name": "text_buffer", "ref_type": "BIO *"}, {"name": "v6", "type": "BIO *", "ref_name": "actual_output", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "mstoilov", "repo_name": "rpatk", "path": "mstoilov/rpatk/854f3e568a9afd98774cedd7c686e4f523f055fb0146229d91c795c01c512cf8", "path_in_repo": "mstoilov/rpatk/rvm/build/unix/x86_64/out/librvm.so.2.0", "objdump": "000000000000b2e2 <rvm_codemap_clear>:\n    b2e2:\t55                   \tpush   %rbp\n    b2e3:\t48 89 e5             \tmov    %rsp,%rbp\n    b2e6:\t48 83 ec 20          \tsub    $0x20,%rsp\n    b2ea:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    b2ee:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    b2f5:\t00 \n    b2f6:\teb 37                \tjmp    b32f <rvm_codemap_clear+0x4d>\n    b2f8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b2fc:\t48 8b 00             \tmov    (%rax),%rax\n    b2ff:\t48 8b 50 40          \tmov    0x40(%rax),%rdx\n    b303:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b307:\t48 8b 00             \tmov    (%rax),%rax\n    b30a:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n    b30e:\t48 0f af 45 f8       \timul   -0x8(%rbp),%rax\n    b313:\t48 01 d0             \tadd    %rdx,%rax\n    b316:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    b31a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    b31e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    b322:\t48 89 c7             \tmov    %rax,%rdi\n    b325:\te8 86 8e ff ff       \tcallq  41b0 <r_free@plt>\n    b32a:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    b32f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b333:\t48 8b 00             \tmov    (%rax),%rax\n    b336:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    b33a:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n    b33e:\t72 b8                \tjb     b2f8 <rvm_codemap_clear+0x16>\n    b340:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b344:\t48 8b 00             \tmov    (%rax),%rax\n    b347:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b34c:\t48 89 c7             \tmov    %rax,%rdi\n    b34f:\te8 ac 8e ff ff       \tcallq  4200 <r_array_setlength@plt>\n    b354:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b358:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    b35c:\t48 89 c7             \tmov    %rax,%rdi\n    b35f:\te8 fc 90 ff ff       \tcallq  4460 <r_hash_removeall@plt>\n    b364:\t90                   \tnop\n    b365:\tc9                   \tleaveq \n    b366:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rvm_codemap_clear(__int64 a1) {\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number L;\n       <span class=\"supfact\">i</span> < *(_QWORD *)(*(_QWORD *)a1 + Number L);\n       ++<span class=\"supfact\">i</span>)\n    r_free();\n  r_array_setlength();\n  return r_hash_removeall();\n}", "code_t": "void __cdecl rvm_codemap_clear(rvm_codemap_t *codemap) {\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> < codemap->labels->len;\n       ++<span class=\"supfact\">i</span>)\n    r_free();\n  r_array_setlength();\n  r_hash_removeall();\n}", "var": [{"name": "i", "type": "__int64", "ref_name": "i", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "Touchbridge", "repo_name": "Touchbridge", "path": "Touchbridge/Touchbridge/c66035547bd21314c9b89f4f8f9e6d5a1baa69638e1f1515dd6f1d2e735b4732", "path_in_repo": "Touchbridge/Touchbridge/host_src/tbg_client", "objdump": "00000000004041d9 <tbg_request>:\n  4041d9:\t55                   \tpush   %rbp\n  4041da:\t48 89 e5             \tmov    %rsp,%rbp\n  4041dd:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4041e1:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4041e5:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  4041e8:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n  4041eb:\t48 89 4d d8          \tmov    %rcx,-0x28(%rbp)\n  4041ef:\t44 89 45 d4          \tmov    %r8d,-0x2c(%rbp)\n  4041f3:\t4c 89 4d c8          \tmov    %r9,-0x38(%rbp)\n  4041f7:\tbe 0d 00 00 00       \tmov    $0xd,%esi\n  4041fc:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  404201:\te8 ca e0 ff ff       \tcallq  4022d0 <g_malloc0_n@plt>\n  404206:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40420a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40420e:\t8b 00                \tmov    (%rax),%eax\n  404210:\t25 ff ff ff bf       \tand    $0xbfffffff,%eax\n  404215:\t89 c2                \tmov    %eax,%edx\n  404217:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40421b:\t89 10                \tmov    %edx,(%rax)\n  40421d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404221:\t8b 00                \tmov    (%rax),%eax\n  404223:\t0d 00 00 00 20       \tor     $0x20000000,%eax\n  404228:\t89 c2                \tmov    %eax,%edx\n  40422a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40422e:\t89 10                \tmov    %edx,(%rax)\n  404230:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404234:\t8b 00                \tmov    (%rax),%eax\n  404236:\t25 ff 0f fc ff       \tand    $0xfffc0fff,%eax\n  40423b:\t89 c2                \tmov    %eax,%edx\n  40423d:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  404240:\tc1 e0 0c             \tshl    $0xc,%eax\n  404243:\t25 00 f0 03 00       \tand    $0x3f000,%eax\n  404248:\t09 c2                \tor     %eax,%edx\n  40424a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40424e:\t89 10                \tmov    %edx,(%rax)\n  404250:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404254:\t8b 00                \tmov    (%rax),%eax\n  404256:\t25 ff ff 03 ff       \tand    $0xff03ffff,%eax\n  40425b:\t89 c2                \tmov    %eax,%edx\n  40425d:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  404260:\tc1 e0 12             \tshl    $0x12,%eax\n  404263:\t25 00 00 fc 00       \tand    $0xfc0000,%eax\n  404268:\t09 c2                \tor     %eax,%edx\n  40426a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40426e:\t89 10                \tmov    %edx,(%rax)\n  404270:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404274:\t8b 00                \tmov    (%rax),%eax\n  404276:\t25 ff ff ff e7       \tand    $0xe7ffffff,%eax\n  40427b:\t0d 00 00 00 08       \tor     $0x8000000,%eax\n  404280:\t89 c2                \tmov    %eax,%edx\n  404282:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404286:\t89 10                \tmov    %edx,(%rax)\n  404288:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  40428b:\t89 c2                \tmov    %eax,%edx\n  40428d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404291:\t88 50 04             \tmov    %dl,0x4(%rax)\n  404294:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  404297:\t48 63 d0             \tmovslq %eax,%rdx\n  40429a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40429e:\t48 8d 48 05          \tlea    0x5(%rax),%rcx\n  4042a2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4042a6:\t48 89 c6             \tmov    %rax,%rsi\n  4042a9:\t48 89 cf             \tmov    %rcx,%rdi\n  4042ac:\te8 7f de ff ff       \tcallq  402130 <memcpy@plt>\n  4042b1:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  4042b5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4042b9:\t48 89 d6             \tmov    %rdx,%rsi\n  4042bc:\t48 89 c7             \tmov    %rax,%rdi\n  4042bf:\te8 34 fe ff ff       \tcallq  4040f8 <send_msg>\n  4042c4:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4042c7:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  4042cb:\t79 5f                \tjns    40432c <tbg_request+0x153>\n  4042cd:\t48 8b 05 ac 60 00 00 \tmov    0x60ac(%rip),%rax        # 40a380 <stderr@@GLIBC_2.2.5>\n  4042d4:\tb9 85 00 00 00       \tmov    $0x85,%ecx\n  4042d9:\tba d7 76 40 00       \tmov    $0x4076d7,%edx\n  4042de:\tbe e1 76 40 00       \tmov    $0x4076e1,%esi\n  4042e3:\t48 89 c7             \tmov    %rax,%rdi\n  4042e6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4042eb:\te8 80 df ff ff       \tcallq  402270 <fprintf@plt>\n  4042f0:\t48 8b 05 89 60 00 00 \tmov    0x6089(%rip),%rax        # 40a380 <stderr@@GLIBC_2.2.5>\n  4042f7:\t48 89 c1             \tmov    %rax,%rcx\n  4042fa:\tba 08 00 00 00       \tmov    $0x8,%edx\n  4042ff:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  404304:\tbf e9 76 40 00       \tmov    $0x4076e9,%edi\n  404309:\te8 32 e0 ff ff       \tcallq  402340 <fwrite@plt>\n  40430e:\t48 8b 05 6b 60 00 00 \tmov    0x606b(%rip),%rax        # 40a380 <stderr@@GLIBC_2.2.5>\n  404315:\t48 89 c6             \tmov    %rax,%rsi\n  404318:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  40431d:\te8 be de ff ff       \tcallq  4021e0 <fputc@plt>\n  404322:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  404327:\te8 94 de ff ff       \tcallq  4021c0 <exit@plt>\n  40432c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404330:\t48 89 c7             \tmov    %rax,%rdi\n  404333:\te8 68 de ff ff       \tcallq  4021a0 <g_free@plt>\n  404338:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  40433d:\t74 1b                \tje     40435a <tbg_request+0x181>\n  40433f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  404343:\t8b 48 08             \tmov    0x8(%rax),%ecx\n  404346:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  40434a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40434e:\t89 ce                \tmov    %ecx,%esi\n  404350:\t48 89 c7             \tmov    %rax,%rdi\n  404353:\te8 63 01 00 00       \tcallq  4044bb <tbg_wait_response>\n  404358:\teb 05                \tjmp    40435f <tbg_request+0x186>\n  40435a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40435f:\tc9                   \tleaveq \n  404360:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tbg_request(__int64 a1, int a2, int a3, const void *a4,\n                               int a5, __int64 a6) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = g_malloc0_n();\n  *(_DWORD *)<span class=\"supfact\">v11</span> &= Number;\n  *(_DWORD *)<span class=\"supfact\">v11</span> |= Number;\n  *(_DWORD *)<span class=\"supfact\">v11</span> =\n      (a3 << Number) & Number | *(_DWORD *)<span class=\"supfact\">v11</span> & Number;\n  *(_DWORD *)<span class=\"supfact\">v11</span> =\n      (a2 << Number) & Number | *(_DWORD *)<span class=\"supfact\">v11</span> & Number;\n  *(_DWORD *)<span class=\"supfact\">v11</span> =\n      *(_DWORD *)<span class=\"supfact\">v11</span> & Number | Number;\n  *(_BYTE *)(<span class=\"supfact\">v11</span> + Number) = a5;\n  memcpy((void *)(<span class=\"supfact\">v11</span> + Number), a4, a5);\n  if ((int)send_msg(a1, <span class=\"supfact\">v11</span>) < Number) {\n    fprintf(stderr, String, String, Number L);\n    fwrite(String, Number, Number, stderr);\n    fputc(Number, stderr);\n    exit(Number);\n  }\n  g_free();\n  if (a6)\n    result = tbg_wait_response(a1, *(unsigned int *)(a1 + Number), a6);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl tbg_request(tbg_socket_t *tsock, int node, int port, uint8_t *data,\n                        int len, tbg_msg_t *resp) {\n  int result;\n  tbg_msg_t *<span class=\"supfact\">req</span>;\n  <span class=\"supfact\">req</span> = (tbg_msg_t *)g_malloc0_n();\n  <span class=\"supfact\">req</span>->id &= Number;\n  <span class=\"supfact\">req</span>->id |= Number;\n  <span class=\"supfact\">req</span>->id =\n      (port << Number) & Number | <span class=\"supfact\">req</span>->id & Number;\n  <span class=\"supfact\">req</span>->id =\n      (node << Number) & Number | <span class=\"supfact\">req</span>->id & Number;\n  <span class=\"supfact\">req</span>->id = <span class=\"supfact\">req</span>->id & Number | Number;\n  <span class=\"supfact\">req</span>->len = len;\n  memcpy(&<span class=\"supfact\">req</span>->_anon_0, data, len);\n  if (send_msg(tsock, <span class=\"supfact\">req</span>) < Number) {\n    fprintf(stderr, String, String, Number L);\n    fwrite(String, Number, Number, stderr);\n    fputc(Number, stderr);\n    exit(Number);\n  }\n  g_free();\n  if (resp)\n    result = tbg_wait_response(tsock, tsock->timeout, resp);\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v11", "type": "TranslationBlock_0 *", "ref_name": "req", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "gibtang", "repo_name": "CCNSCoding", "path": "gibtang/CCNSCoding/e3c75b7a9396f8cdea0ee197fb16277cd0c9e11e0ad039aaadda39d4e0d57364", "path_in_repo": "gibtang/CCNSCoding/cocos2dx/proj.linux/obj/release/physics/chipmunk/CCPhysicsShapeInfo.o", "objdump": "00000000000003b0 <_ZN7cocos2d16PhysicsShapeInfo3addEP7cpShape>:\n 3b0:\t48 83 ec 28          \tsub    $0x28,%rsp\n 3b4:\t48 89 74 24 08       \tmov    %rsi,0x8(%rsp)\n 3b9:\t48 85 f6             \ttest   %rsi,%rsi\n 3bc:\t74 38                \tje     3f6 <_ZN7cocos2d16PhysicsShapeInfo3addEP7cpShape+0x46>\n 3be:\t48 89 f0             \tmov    %rsi,%rax\n 3c1:\t48 8b 77 08          \tmov    0x8(%rdi),%rsi\n 3c5:\t48 3b 77 10          \tcmp    0x10(%rdi),%rsi\n 3c9:\t74 35                \tje     400 <_ZN7cocos2d16PhysicsShapeInfo3addEP7cpShape+0x50>\n 3cb:\t48 89 06             \tmov    %rax,(%rsi)\n 3ce:\t48 83 c6 08          \tadd    $0x8,%rsi\n 3d2:\t48 89 77 08          \tmov    %rsi,0x8(%rdi)\n 3d6:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n 3db:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 3e0:\t48 8d 74 24 10       \tlea    0x10(%rsp),%rsi\n 3e5:\t48 8b 3d 00 00 00 00 \tmov    0x0(%rip),%rdi        # 3ec <_ZN7cocos2d16PhysicsShapeInfo3addEP7cpShape+0x3c>\n 3ec:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n 3f1:\te8 00 00 00 00       \tcallq  3f6 <_ZN7cocos2d16PhysicsShapeInfo3addEP7cpShape+0x46>\n 3f6:\t48 83 c4 28          \tadd    $0x28,%rsp\n 3fa:\tc3                   \tretq   \n 3fb:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n 400:\t48 8d 54 24 08       \tlea    0x8(%rsp),%rdx\n 405:\t48 89 3c 24          \tmov    %rdi,(%rsp)\n 409:\te8 00 00 00 00       \tcallq  40e <_ZN7cocos2d16PhysicsShapeInfo3addEP7cpShape+0x5e>\n 40e:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n 412:\teb c2                \tjmp    3d6 <_ZN7cocos2d16PhysicsShapeInfo3addEP7cpShape+0x26>", "code_s": "void __fastcall cocos2d PhysicsShapeInfo add(__int64 a1, __int64 a2) {\n  __int64 *v3;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  <span class=\"supfact\">v4</span> = a2;\n  if (a2) {\n    v3 = *(__int64 **)(a1 + Number);\n    if (v3 == *(__int64 **)(a1 + Number)) {\n      std vector<cpShape *> _M_realloc_insert<cpShape *const &>(\n          a1, v3, &<span class=\"supfact\">v4</span>);\n    } else {\n      *v3 = a2;\n      *(_QWORD *)(a1 + Number) = v3 + Number;\n    }\n    <span class=\"supfact\">v5</span>[Number] = a1;\n    <span class=\"supfact\">v5</span>[Number] = <span class=\"supfact\">v4</span>;\n    std _Rb_tree<\n        cpShape *, std pair<cpShape *const, cocos2d PhysicsShapeInfo *>,\n        std _Select1st<std pair<cpShape *const, cocos2d PhysicsShapeInfo *>>,\n        std less<cpShape *>,\n        std allocator<std pair<cpShape *const, cocos2d PhysicsShapeInfo *>>>\n    _M_emplace_unique<std pair<cpShape *, cocos2d PhysicsShapeInfo *>>(\n        cocos2d PhysicsShapeInfo map, <span class=\"supfact\">v5</span>);\n  }\n}", "code_t": "void __fastcall cocos2d PhysicsShapeInfo add(__int64 a1, __int64 a2) {\n  __int64 *v3;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  <span class=\"supfact\">v4</span> = a2;\n  if (a2) {\n    v3 = *(__int64 **)(a1 + Number);\n    if (v3 == *(__int64 **)(a1 + Number)) {\n      std vector<cpShape *> _M_realloc_insert<cpShape *const &>(\n          a1, v3, &<span class=\"supfact\">v4</span>);\n    } else {\n      *v3 = a2;\n      *(_QWORD *)(a1 + Number) = v3 + Number;\n    }\n    <span class=\"supfact\">v5</span>[Number] = a1;\n    <span class=\"supfact\">v5</span>[Number] = <span class=\"supfact\">v4</span>;\n    std _Rb_tree<\n        cpShape *, std pair<cpShape *const, cocos2d PhysicsShapeInfo *>,\n        std _Select1st<std pair<cpShape *const, cocos2d PhysicsShapeInfo *>>,\n        std less<cpShape *>,\n        std allocator<std pair<cpShape *const, cocos2d PhysicsShapeInfo *>>>\n    _M_emplace_unique<std pair<cpShape *, cocos2d PhysicsShapeInfo *>>(\n        cocos2d PhysicsShapeInfo map, <span class=\"supfact\">v5</span>);\n  }\n}", "var": [{"name": "v5", "type": "__int64[3]", "ref_name": "v5", "ref_type": "__int64[3]"}, {"name": "v4", "type": "__int64", "ref_name": "v4", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "jpaton", "repo_name": "xen-4.1-LJX1", "path": "jpaton/xen-4.1-LJX1/764d26c8df04aa6923d08433156a8dce3ae3b97119293c39fdd3dba82bff75d9", "path_in_repo": "jpaton/xen-4.1-LJX1/tools/libxl/xl_cmdimpl.o", "objdump": "000000000000c893 <sched_credit_domain_set>:\n    c893:\t48 83 ec 28          \tsub    $0x28,%rsp\n    c897:\t89 7c 24 0c          \tmov    %edi,0xc(%rsp)\n    c89b:\t48 89 34 24          \tmov    %rsi,(%rsp)\n    c89f:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    c8a3:\t48 8b 14 24          \tmov    (%rsp),%rdx\n    c8a7:\t89 c6                \tmov    %eax,%esi\n    c8a9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c8b0 <sched_credit_domain_set+0x1d>\n    c8b0:\t48 89 c7             \tmov    %rax,%rdi\n    c8b3:\te8 00 00 00 00       \tcallq  c8b8 <sched_credit_domain_set+0x25>\n    c8b8:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n    c8bc:\t83 7c 24 1c 00       \tcmpl   $0x0,0x1c(%rsp)\n    c8c1:\t74 23                \tje     c8e6 <sched_credit_domain_set+0x53>\n    c8c3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c8ca <sched_credit_domain_set+0x37>\n    c8ca:\t48 8b 00             \tmov    (%rax),%rax\n    c8cd:\t48 89 c1             \tmov    %rax,%rcx\n    c8d0:\tba 26 00 00 00       \tmov    $0x26,%edx\n    c8d5:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    c8da:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # c8e1 <sched_credit_domain_set+0x4e>\n    c8e1:\te8 00 00 00 00       \tcallq  c8e6 <sched_credit_domain_set+0x53>\n    c8e6:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    c8ea:\t48 83 c4 28          \tadd    $0x28,%rsp\n    c8ee:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sched_credit_domain_set(unsigned int a1, __int64 a2) {\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = libxl_sched_credit_domain_set(ctx, a1, a2);\n  if (<span class=\"supfact\">v3</span>)\n    fwrite(String, Number, Number, stderr);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "int __cdecl sched_credit_domain_set(int domid, libxl_sched_credit *scinfo) {\n  int <span class=\"supfact\">rc</span>;\n  <span class=\"supfact\">rc</span> =\n      libxl_sched_credit_domain_set(&ctx, (unsigned int)domid, scinfo);\n  if (<span class=\"supfact\">rc</span>)\n    fwrite(String, Number, Number, stderr);\n  return <span class=\"supfact\">rc</span>;\n}", "var": [{"name": "v3", "type": "int", "ref_name": "rc", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "mrstork", "repo_name": "router", "path": "mrstork/router/13b2305e3a044ae276282db79a64fddaf8d1d97f62c1177624d327ca27cd7967", "path_in_repo": "mrstork/router//sr", "objdump": "00000000004043ff <sr_print_if>:\n  4043ff:\t55                   \tpush   %rbp\n  404400:\t48 89 e5             \tmov    %rsp,%rbp\n  404403:\t48 83 ec 20          \tsub    $0x20,%rsp\n  404407:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40440b:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  404410:\t75 19                \tjne    40442b <sr_print_if+0x2c>\n  404412:\tb9 00 99 40 00       \tmov    $0x409900,%ecx\n  404417:\tba d1 00 00 00       \tmov    $0xd1,%edx\n  40441c:\tbe 00 98 40 00       \tmov    $0x409800,%esi\n  404421:\tbf 46 98 40 00       \tmov    $0x409846,%edi\n  404426:\te8 a5 dd ff ff       \tcallq  4021d0 <__assert_fail@plt>\n  40442b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40442f:\t48 85 c0             \ttest   %rax,%rax\n  404432:\t75 19                \tjne    40444d <sr_print_if+0x4e>\n  404434:\tb9 00 99 40 00       \tmov    $0x409900,%ecx\n  404439:\tba d2 00 00 00       \tmov    $0xd2,%edx\n  40443e:\tbe 00 98 40 00       \tmov    $0x409800,%esi\n  404443:\tbf 4c 98 40 00       \tmov    $0x40984c,%edi\n  404448:\te8 83 dd ff ff       \tcallq  4021d0 <__assert_fail@plt>\n  40444d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  404451:\t8b 40 28             \tmov    0x28(%rax),%eax\n  404454:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  404457:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40445b:\t48 89 c6             \tmov    %rax,%rsi\n  40445e:\tbf 58 98 40 00       \tmov    $0x409858,%edi\n  404463:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404468:\te8 13 dd ff ff       \tcallq  402180 <printf@plt>\n  40446d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  404474:\teb 26                \tjmp    40449c <sr_print_if+0x9d>\n  404476:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40447a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40447d:\t48 98                \tcltq   \n  40447f:\t0f b6 44 02 20       \tmovzbl 0x20(%rdx,%rax,1),%eax\n  404484:\t0f b6 c0             \tmovzbl %al,%eax\n  404487:\t89 c6                \tmov    %eax,%esi\n  404489:\tbf 62 98 40 00       \tmov    $0x409862,%edi\n  40448e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404493:\te8 e8 dc ff ff       \tcallq  402180 <printf@plt>\n  404498:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40449c:\t83 7d fc 04          \tcmpl   $0x4,-0x4(%rbp)\n  4044a0:\t7e d4                \tjle    404476 <sr_print_if+0x77>\n  4044a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4044a6:\t0f b6 40 25          \tmovzbl 0x25(%rax),%eax\n  4044aa:\t0f b6 c0             \tmovzbl %al,%eax\n  4044ad:\t89 c6                \tmov    %eax,%esi\n  4044af:\tbf 68 98 40 00       \tmov    $0x409868,%edi\n  4044b4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4044b9:\te8 c2 dc ff ff       \tcallq  402180 <printf@plt>\n  4044be:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  4044c3:\te8 98 db ff ff       \tcallq  402060 <putchar@plt>\n  4044c8:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4044cb:\t89 c7                \tmov    %eax,%edi\n  4044cd:\te8 1e dc ff ff       \tcallq  4020f0 <inet_ntoa@plt>\n  4044d2:\t48 89 c6             \tmov    %rax,%rsi\n  4044d5:\tbf 6d 98 40 00       \tmov    $0x40986d,%edi\n  4044da:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4044df:\te8 9c dc ff ff       \tcallq  402180 <printf@plt>\n  4044e4:\t90                   \tnop\n  4044e5:\tc9                   \tleaveq \n  4044e6:\tc3                   \tretq   ", "code_s": "int __fastcall sr_print_if(__int64 a1) {\n  char *v1;\n  struct in_addr <span class=\"supfact\">in</span>;\n  int <span class=\"supfact\">i</span>;\n  if (!a1)\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">in</span>.s_addr = *(_DWORD *)(a1 + Number);\n  printf(String, (const char *)a1);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    printf(String, *(unsigned __int8 *)(a1 + <span class=\"supfact\">i</span> + Number));\n  printf(String, *(unsigned __int8 *)(a1 + Number));\n  putchar(Number);\n  v1 = inet_ntoa(<span class=\"supfact\">in</span>);\n  return printf(String, v1);\n}", "code_t": "void __cdecl sr_print_if(sr_if *iface) {\n  char *v1;\n  uint32_t <span class=\"supfact\">ip_addr</span>;\n  int <span class=\"supfact\">ivyl</span>;\n  if (!iface)\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">ip_addr</span> = iface->ip;\n  printf(String, iface->name);\n  for (<span class=\"supfact\">ivyl</span> = Number; <span class=\"supfact\">ivyl</span> <= Number;\n       ++<span class=\"supfact\">ivyl</span>)\n    printf(String, iface->addr[<span class=\"supfact\">ivyl</span>]);\n  printf(String, iface->addr[Number]);\n  putchar(Number);\n  v1 = inet_ntoa((struct in_addr)<span class=\"supfact\">ip_addr</span>);\n  printf(String, v1);\n}", "var": [{"name": "i", "type": "int", "ref_name": "ivyl", "ref_type": "int"}, {"name": "in", "type": "struct in_addr { in_addr_t s_addr; }", "ref_name": "ip_addr", "ref_type": "uint32_t"}], "body_in_train": false}, {"repo_owner": "echouvet", "repo_name": "Fract-ol", "path": "echouvet/Fract-ol/54292a62f22df5e7b3578fca26b7feb43fa920898ec6e399ea75a318e281e6cb", "path_in_repo": "echouvet/Fract-ol/libft/ft_putstrtab_fd.o", "objdump": "0000000000000000 <ft_putstrtab_fd>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n   f:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  16:\teb 37                \tjmp    4f <ft_putstrtab_fd+0x4f>\n  18:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  1b:\t48 98                \tcltq   \n  1d:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  24:\t00 \n  25:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  29:\t48 01 d0             \tadd    %rdx,%rax\n  2c:\t48 8b 00             \tmov    (%rax),%rax\n  2f:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  32:\t89 d6                \tmov    %edx,%esi\n  34:\t48 89 c7             \tmov    %rax,%rdi\n  37:\te8 00 00 00 00       \tcallq  3c <ft_putstrtab_fd+0x3c>\n  3c:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  3f:\t89 c6                \tmov    %eax,%esi\n  41:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  46:\te8 00 00 00 00       \tcallq  4b <ft_putstrtab_fd+0x4b>\n  4b:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  52:\t48 98                \tcltq   \n  54:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  5b:\t00 \n  5c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  60:\t48 01 d0             \tadd    %rdx,%rax\n  63:\t48 8b 00             \tmov    (%rax),%rax\n  66:\t48 85 c0             \ttest   %rax,%rax\n  69:\t75 ad                \tjne    18 <ft_putstrtab_fd+0x18>\n  6b:\t90                   \tnop\n  6c:\t90                   \tnop\n  6d:\tc9                   \tleaveq \n  6e:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall ft_putstrtab_fd(__int64 a1, unsigned int a2) {\n  __int64 result;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + a1);\n    if (!result)\n      break;\n    ft_putstr_fd(*(_QWORD *)(Number L * <span class=\"supfact\">i</span> + a1), a2);\n    ft_putchar_fd(Number L, a2);\n  }\n  return result;\n}", "code_t": "void __cdecl ft_putstrtab_fd(const char **tab, int fd) {\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; tab[<span class=\"supfact\">i</span>];\n       ++<span class=\"supfact\">i</span>) {\n    ft_putstr_fd(tab[<span class=\"supfact\">i</span>], (unsigned int)fd);\n    ft_putchar_fd(Number L, (unsigned int)fd);\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/ae296856a4c9da3a5bbc9a4d76e7ff7e6e9530708320088998ac5a54ad6f7c50", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/libvorbis-1.3.3/lib/res0.o", "objdump": "0000000000001eb9 <res2_class>:\n    1eb9:\t55                   \tpush   %rbp\n    1eba:\t48 89 e5             \tmov    %rsp,%rbp\n    1ebd:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1ec1:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1ec5:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    1ec9:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    1ecd:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    1ed1:\t44 89 45 cc          \tmov    %r8d,-0x34(%rbp)\n    1ed5:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    1edc:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    1ee3:\teb 22                \tjmp    1f07 <res2_class+0x4e>\n    1ee5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1ee8:\t48 98                \tcltq   \n    1eea:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    1ef1:\t00 \n    1ef2:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1ef6:\t48 01 d0             \tadd    %rdx,%rax\n    1ef9:\t8b 00                \tmov    (%rax),%eax\n    1efb:\t85 c0                \ttest   %eax,%eax\n    1efd:\t74 04                \tje     1f03 <res2_class+0x4a>\n    1eff:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n    1f03:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    1f07:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1f0a:\t3b 45 cc             \tcmp    -0x34(%rbp),%eax\n    1f0d:\t7c d6                \tjl     1ee5 <res2_class+0x2c>\n    1f0f:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n    1f13:\t74 19                \tje     1f2e <res2_class+0x75>\n    1f15:\t8b 4d cc             \tmov    -0x34(%rbp),%ecx\n    1f18:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1f1c:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n    1f20:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1f24:\t48 89 c7             \tmov    %rax,%rdi\n    1f27:\te8 f8 f1 ff ff       \tcallq  1124 <_2class>\n    1f2c:\teb 05                \tjmp    1f33 <res2_class+0x7a>\n    1f2e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f33:\tc9                   \tleaveq \n    1f34:\tc3                   \tretq   ", "code_s": "void **__fastcall res2_class(__int64 a1, _QWORD *a2, _QWORD *a3, __int64 a4,\n                             int a5) {\n  void **result;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v6</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < a5;\n       ++<span class=\"supfact\">i</span>) {\n    if (*(_DWORD *)(Number L * <span class=\"supfact\">i</span> + a4))\n      ++<span class=\"supfact\">v6</span>;\n  }\n  if (<span class=\"supfact\">v6</span>)\n    result = Number class(a1, a2, a3, a5);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "__int64 **__cdecl res2_class(vorbis_block_0 *vb, vorbis_look_residue *vl,\n                             int **in, int *nonzero, int ch_0) {\n  __int64 **result;\n  int <span class=\"supfact\">used</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">used</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < ch_0;\n       ++<span class=\"supfact\">i</span>) {\n    if (nonzero[<span class=\"supfact\">i</span>])\n      ++<span class=\"supfact\">used</span>;\n  }\n  if (<span class=\"supfact\">used</span>)\n    result = Number class(vb, vl, in, ch_0);\n  else\n    result = Number L;\n  return result;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v6", "type": "int", "ref_name": "used", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "wuqiong", "repo_name": "rt-n56u", "path": "wuqiong/rt-n56u/6dee5fc115c7acf5c91f98242ad0539b81eb3838ac03ff2cd40d354f136f8a7b", "path_in_repo": "wuqiong/rt-n56u/trunk/user/strongswan/strongswan-5.6.0/src/libcharon/sa/ike_sa_manager.o", "objdump": "000000000000061f <unlock_all_segments>:\n     61f:\t55                   \tpush   %rbp\n     620:\t48 89 e5             \tmov    %rsp,%rbp\n     623:\t48 83 ec 20          \tsub    $0x20,%rsp\n     627:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     62b:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     632:\teb 3d                \tjmp    671 <unlock_all_segments+0x52>\n     634:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     638:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n     63f:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     642:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     646:\t48 01 d0             \tadd    %rdx,%rax\n     649:\t48 8b 00             \tmov    (%rax),%rax\n     64c:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     650:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     654:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n     65b:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n     65e:\t48 c1 e1 03          \tshl    $0x3,%rcx\n     662:\t48 01 c8             \tadd    %rcx,%rax\n     665:\t48 8b 00             \tmov    (%rax),%rax\n     668:\t48 89 c7             \tmov    %rax,%rdi\n     66b:\tff d2                \tcallq  *%rdx\n     66d:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     671:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     675:\t8b 80 a0 00 00 00    \tmov    0xa0(%rax),%eax\n     67b:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n     67e:\t72 b4                \tjb     634 <unlock_all_segments+0x15>\n     680:\t90                   \tnop\n     681:\t90                   \tnop\n     682:\tc9                   \tleaveq \n     683:\tc3                   \tretq   ", "code_s": "__int64 __fastcall unlock_all_segments(__int64 a1) {\n  __int64 result;\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = *(unsigned int *)(a1 + Number);\n    if (<span class=\"supfact\">i</span> >= (unsigned int)result)\n      break;\n    (*(void(__fastcall **)(_QWORD))(\n        *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + *(_QWORD *)(a1 + Number)) +\n        Number L))(\n        *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + *(_QWORD *)(a1 + Number)));\n  }\n  return result;\n}", "code_t": "void __cdecl unlock_all_segments(private_ike_sa_manager_t_0 *this) {\n  u_int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < this->segment_count;\n       ++<span class=\"supfact\">i</span>)\n    this->segments[<span class=\"supfact\">i</span>].mutex->unlock(\n        this->segments[<span class=\"supfact\">i</span>].mutex);\n}", "var": [{"name": "i", "type": "unsigned int", "ref_name": "i", "ref_type": "u_int"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/64bc886c5ea6e01228b6da2d232fc8e810371c20ee53a23c5e949cdbf0fcdc3e", "path_in_repo": "XanClic/qemu//s390x-softmmu/target/s390x/translate.o", "objdump": "0000000000020026 <op_vgfma>:\n   20026:\t55                   \tpush   %rbp\n   20027:\t48 89 e5             \tmov    %rsp,%rbp\n   2002a:\t41 56                \tpush   %r14\n   2002c:\t41 55                \tpush   %r13\n   2002e:\t41 54                \tpush   %r12\n   20030:\t53                   \tpush   %rbx\n   20031:\t48 83 ec 20          \tsub    $0x20,%rsp\n   20035:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   20039:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n   2003d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   20041:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n   20045:\tba 04 00 00 00       \tmov    $0x4,%edx\n   2004a:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   2004f:\t48 89 c7             \tmov    %rax,%rdi\n   20052:\te8 7a 07 ff ff       \tcallq  107d1 <get_field1>\n   20057:\t88 45 df             \tmov    %al,-0x21(%rbp)\n   2005a:\t80 7d df 03          \tcmpb   $0x3,-0x21(%rbp)\n   2005e:\t76 1b                \tjbe    2007b <op_vgfma+0x55>\n   20060:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   20064:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   20069:\t48 89 c7             \tmov    %rax,%rdi\n   2006c:\te8 d3 f5 fe ff       \tcallq  f644 <gen_program_exception>\n   20071:\tb8 02 00 00 00       \tmov    $0x2,%eax\n   20076:\te9 e2 00 00 00       \tjmpq   2015d <op_vgfma+0x137>\n   2007b:\t0f b6 45 df          \tmovzbl -0x21(%rbp),%eax\n   2007f:\t48 63 d0             \tmovslq %eax,%rdx\n   20082:\t48 89 d0             \tmov    %rdx,%rax\n   20085:\t48 01 c0             \tadd    %rax,%rax\n   20088:\t48 01 d0             \tadd    %rdx,%rax\n   2008b:\t48 c1 e0 04          \tshl    $0x4,%rax\n   2008f:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 20096 <op_vgfma+0x70>\n   20096:\t48 8d 1c 10          \tlea    (%rax,%rdx,1),%rbx\n   2009a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   2009e:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n   200a2:\tba 03 00 00 00       \tmov    $0x3,%edx\n   200a7:\tbe 19 00 00 00       \tmov    $0x19,%esi\n   200ac:\t48 89 c7             \tmov    %rax,%rdi\n   200af:\te8 1d 07 ff ff       \tcallq  107d1 <get_field1>\n   200b4:\t0f b6 c0             \tmovzbl %al,%eax\n   200b7:\t89 c7                \tmov    %eax,%edi\n   200b9:\te8 a6 ee fe ff       \tcallq  ef64 <vec_full_reg_offset>\n   200be:\t41 89 c6             \tmov    %eax,%r14d\n   200c1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   200c5:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n   200c9:\tba 02 00 00 00       \tmov    $0x2,%edx\n   200ce:\tbe 18 00 00 00       \tmov    $0x18,%esi\n   200d3:\t48 89 c7             \tmov    %rax,%rdi\n   200d6:\te8 f6 06 ff ff       \tcallq  107d1 <get_field1>\n   200db:\t0f b6 c0             \tmovzbl %al,%eax\n   200de:\t89 c7                \tmov    %eax,%edi\n   200e0:\te8 7f ee fe ff       \tcallq  ef64 <vec_full_reg_offset>\n   200e5:\t41 89 c5             \tmov    %eax,%r13d\n   200e8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   200ec:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n   200f0:\tba 06 00 00 00       \tmov    $0x6,%edx\n   200f5:\tbe 17 00 00 00       \tmov    $0x17,%esi\n   200fa:\t48 89 c7             \tmov    %rax,%rdi\n   200fd:\te8 cf 06 ff ff       \tcallq  107d1 <get_field1>\n   20102:\t0f b6 c0             \tmovzbl %al,%eax\n   20105:\t89 c7                \tmov    %eax,%edi\n   20107:\te8 58 ee fe ff       \tcallq  ef64 <vec_full_reg_offset>\n   2010c:\t41 89 c4             \tmov    %eax,%r12d\n   2010f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   20113:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n   20117:\tba 00 00 00 00       \tmov    $0x0,%edx\n   2011c:\tbe 16 00 00 00       \tmov    $0x16,%esi\n   20121:\t48 89 c7             \tmov    %rax,%rdi\n   20124:\te8 a8 06 ff ff       \tcallq  107d1 <get_field1>\n   20129:\t0f b6 c0             \tmovzbl %al,%eax\n   2012c:\t89 c7                \tmov    %eax,%edi\n   2012e:\te8 31 ee fe ff       \tcallq  ef64 <vec_full_reg_offset>\n   20133:\t48 83 ec 08          \tsub    $0x8,%rsp\n   20137:\t53                   \tpush   %rbx\n   20138:\t41 b9 10 00 00 00    \tmov    $0x10,%r9d\n   2013e:\t41 b8 10 00 00 00    \tmov    $0x10,%r8d\n   20144:\t44 89 f1             \tmov    %r14d,%ecx\n   20147:\t44 89 ea             \tmov    %r13d,%edx\n   2014a:\t44 89 e6             \tmov    %r12d,%esi\n   2014d:\t89 c7                \tmov    %eax,%edi\n   2014f:\te8 00 00 00 00       \tcallq  20154 <op_vgfma+0x12e>\n   20154:\t48 83 c4 10          \tadd    $0x10,%rsp\n   20158:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   2015d:\t48 8d 65 e0          \tlea    -0x20(%rbp),%rsp\n   20161:\t5b                   \tpop    %rbx\n   20162:\t41 5c                \tpop    %r12\n   20164:\t41 5d                \tpop    %r13\n   20166:\t41 5e                \tpop    %r14\n   20168:\t5d                   \tpop    %rbp\n   20169:\tc3                   \tretq   ", "code_s": "__int64 __fastcall op_vgfma(__int64 a1) {\n  __int64 result;\n  unsigned __int8 v2;\n  unsigned int v3;\n  unsigned __int8 v4;\n  unsigned int v5;\n  unsigned __int8 v6;\n  unsigned int v7;\n  unsigned __int8 v8;\n  unsigned int v9;\n  unsigned __int8 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = get_field1(*(_QWORD *)(a1 + Number), Number, Number);\n  if (<span class=\"supfact\">v10</span> <= Number) {\n    v2 = get_field1(*(_QWORD *)(a1 + Number), Number, Number);\n    v3 = vec_full_reg_offset(v2);\n    v4 = get_field1(*(_QWORD *)(a1 + Number), Number, Number);\n    v5 = vec_full_reg_offset(v4);\n    v6 = get_field1(*(_QWORD *)(a1 + Number), Number, Number);\n    v7 = vec_full_reg_offset(v6);\n    v8 = get_field1(*(_QWORD *)(a1 + Number), Number, Number);\n    v9 = vec_full_reg_offset(v8);\n    tcg_gen_gvec_4(v9, v7, v5, v3, Number L, Number L,\n                   (char *)&g_38331 + Number * <span class=\"supfact\">v10</span>);\n    result = Number L;\n  } else {\n    gen_program_exception(a1, Number);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "DisasJumpType_0 __cdecl op_vgfma(DisasContext_0 *s, DisasOps *o) {\n  DisasJumpType_0 result;\n  uint8_t v3;\n  unsigned int v4;\n  uint8_t v5;\n  unsigned int v6;\n  uint8_t v7;\n  unsigned int v8;\n  uint8_t v9;\n  unsigned int v10;\n  uint8_t <span class=\"supfact\">es_0</span>;\n  <span class=\"supfact\">es_0</span> = get_field1(s->fields, FLD_O_m5, FLD_C_i5);\n  if (<span class=\"supfact\">es_0</span> <= Number) {\n    v3 = get_field1(s->fields, FLD_O_v4, FLD_C_m4);\n    v4 = vec_full_reg_offset(v3);\n    v5 = get_field1(s->fields, FLD_O_v3, FLD_C_r3);\n    v6 = vec_full_reg_offset(v5);\n    v7 = get_field1(s->fields, FLD_O_v2, FLD_C_d4);\n    v8 = vec_full_reg_offset(v7);\n    v9 = get_field1(s->fields, FLD_O_v1, FLD_C_r1);\n    v10 = vec_full_reg_offset(v9);\n    tcg_gen_gvec_4(v10, v8, v6, v4, Number L, Number L,\n                   &g_38331[<span class=\"supfact\">es_0</span>]);\n    result = DISAS_NEXT;\n  } else {\n    gen_program_exception(s, Number);\n    result = DISAS_NORETURN;\n  }\n  return result;\n}", "var": [{"name": "v10", "type": "bool", "ref_name": "es_0", "ref_type": "uint8_t"}], "body_in_train": false}, {"repo_owner": "jonathlela", "repo_name": "vast", "path": "jonathlela/vast/bf86f53e9e615cbbecbb5a9face0a693e10b6723e5bfb51d2a5548eaa4197df8", "path_in_repo": "jonathlela/vast/trunk/VAST/VASTnet/net_emu.o", "objdump": "0000000000000000 <_ZSt32__make_move_if_noexcept_iteratorIPN4Vast12NetSocketMsgESt13move_iteratorIPS2_EET0_PT_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  10:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  14:\t48 89 d6             \tmov    %rdx,%rsi\n  17:\t48 89 c7             \tmov    %rax,%rdi\n  1a:\te8 00 00 00 00       \tcallq  1f <_ZSt32__make_move_if_noexcept_iteratorIPN4Vast12NetSocketMsgESt13move_iteratorIPS2_EET0_PT_+0x1f>\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\tc9                   \tleaveq \n  24:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __make_move_if_noexcept_iterator<\n    Vast NetSocketMsg *, std move_iterator<Vast NetSocketMsg **>>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  std move_iterator<Vast NetSocketMsg **> move_iterator(&<span class=\"supfact\">v2</span>,\n                                                        a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "__int64 __fastcall std __make_move_if_noexcept_iterator<\n    Vast NetSocketMsg *, std move_iterator<Vast NetSocketMsg **>>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  std move_iterator<Vast NetSocketMsg **> move_iterator(&<span class=\"supfact\">v2</span>,\n                                                        a1);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__int64", "ref_name": "v2", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "FireLeaf", "repo_name": "XGame", "path": "FireLeaf/XGame/4e8e6a4652634143ef1223c1f5956e629c03bd5c854771598d1a5eed02b03005", "path_in_repo": "FireLeaf/XGame/XGame/XSrc/3-Party/openssl/crypto/asn1/x_x509.o", "objdump": "0000000000000355 <d2i_X509_AUX>:\n 355:\t55                   \tpush   %rbp\n 356:\t48 89 e5             \tmov    %rsp,%rbp\n 359:\t48 83 ec 30          \tsub    $0x30,%rsp\n 35d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 361:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 365:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 369:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 36d:\t48 8b 00             \tmov    (%rax),%rax\n 370:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 374:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 378:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n 37c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 380:\t48 89 ce             \tmov    %rcx,%rsi\n 383:\t48 89 c7             \tmov    %rax,%rdi\n 386:\te8 00 00 00 00       \tcallq  38b <d2i_X509_AUX+0x36>\n 38b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 38f:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 394:\t75 07                \tjne    39d <d2i_X509_AUX+0x48>\n 396:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 39b:\teb 57                \tjmp    3f4 <d2i_X509_AUX+0x9f>\n 39d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 3a1:\t48 8b 00             \tmov    (%rax),%rax\n 3a4:\t48 2b 45 f8          \tsub    -0x8(%rbp),%rax\n 3a8:\t48 29 45 d8          \tsub    %rax,-0x28(%rbp)\n 3ac:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n 3b1:\t75 06                \tjne    3b9 <d2i_X509_AUX+0x64>\n 3b3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3b7:\teb 3b                \tjmp    3f4 <d2i_X509_AUX+0x9f>\n 3b9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3bd:\t48 8d 88 98 00 00 00 \tlea    0x98(%rax),%rcx\n 3c4:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 3c8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 3cc:\t48 89 c6             \tmov    %rax,%rsi\n 3cf:\t48 89 cf             \tmov    %rcx,%rdi\n 3d2:\te8 00 00 00 00       \tcallq  3d7 <d2i_X509_AUX+0x82>\n 3d7:\t48 85 c0             \ttest   %rax,%rax\n 3da:\t74 06                \tje     3e2 <d2i_X509_AUX+0x8d>\n 3dc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3e0:\teb 12                \tjmp    3f4 <d2i_X509_AUX+0x9f>\n 3e2:\t90                   \tnop\n 3e3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3e7:\t48 89 c7             \tmov    %rax,%rdi\n 3ea:\te8 00 00 00 00       \tcallq  3ef <d2i_X509_AUX+0x9a>\n 3ef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3f4:\tc9                   \tleaveq \n 3f5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall d2i_X509_AUX(__int64 a1, __int64 *a2, __int64 a3) {\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = *a2;\n  <span class=\"supfact\">v6</span> = d2i_X509(a1, (__int64)a2, a3);\n  if (!<span class=\"supfact\">v6</span>)\n    return Number L;\n  <span class=\"supfact\">v5</span> = a3 - (*a2 - <span class=\"supfact\">v7</span>);\n  if (!<span class=\"supfact\">v5</span>)\n    return <span class=\"supfact\">v6</span>;\n  if (d2i_X509_CERT_AUX(<span class=\"supfact\">v6</span> + Number, a2, <span class=\"supfact\">v5</span>))\n    return <span class=\"supfact\">v6</span>;\n  X509_free(<span class=\"supfact\">v6</span>);\n  return Number L;\n}", "code_t": "X509 *__cdecl d2i_X509_AUX(X509 **a, const unsigned __int8 **pp,\n                           __int64 length) {\n  __int64 <span class=\"supfact\">lengthb</span>;\n  X509 *<span class=\"supfact\">ret</span>;\n  const unsigned __int8 *<span class=\"supfact\">q</span>;\n  <span class=\"supfact\">q</span> = *pp;\n  <span class=\"supfact\">ret</span> = d2i_X509(a, pp, length);\n  if (!<span class=\"supfact\">ret</span>)\n    return Number L;\n  <span class=\"supfact\">lengthb</span> = length - (*pp - <span class=\"supfact\">q</span>);\n  if (!<span class=\"supfact\">lengthb</span>)\n    return <span class=\"supfact\">ret</span>;\n  if (d2i_X509_CERT_AUX(&<span class=\"supfact\">ret</span>->aux, pp, <span class=\"supfact\">lengthb</span>))\n    return <span class=\"supfact\">ret</span>;\n  X509_free(<span class=\"supfact\">ret</span>);\n  return Number L;\n}", "var": [{"name": "v7", "type": "const unsigned __int8 *", "ref_name": "q", "ref_type": "const unsigned __int8 *"}, {"name": "v6", "type": "X509 *", "ref_name": "ret", "ref_type": "X509 *"}, {"name": "v5", "type": "__int64", "ref_name": "lengthb", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "deepurple", "repo_name": "bbssrc", "path": "deepurple/bbssrc/34d5f42faf9bb4e8cf98d4b9d0b0a6166911a912b28e044d68b0781a15abe3ef", "path_in_repo": "deepurple/bbssrc/trunk/local_utl/annIndex", "objdump": "0000000000401202 <main>:\n  401202:\t55                   \tpush   %rbp\n  401203:\t48 89 e5             \tmov    %rsp,%rbp\n  401206:\t48 83 ec 10          \tsub    $0x10,%rsp\n  40120a:\tbf 08 20 40 00       \tmov    $0x402008,%edi\n  40120f:\te8 1c fe ff ff       \tcallq  401030 <chdir@plt>\n  401214:\tbe 12 20 40 00       \tmov    $0x402012,%esi\n  401219:\tbf 14 20 40 00       \tmov    $0x402014,%edi\n  40121e:\te8 3d fe ff ff       \tcallq  401060 <fopen@plt>\n  401223:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401227:\te9 86 00 00 00       \tjmpq   4012b2 <main+0xb0>\n  40122c:\tbe 2a 00 00 00       \tmov    $0x2a,%esi\n  401231:\tbf a0 41 40 00       \tmov    $0x4041a0,%edi\n  401236:\te8 75 fe ff ff       \tcallq  4010b0 <strchr@plt>\n  40123b:\t48 85 c0             \ttest   %rax,%rax\n  40123e:\t74 02                \tje     401242 <main+0x40>\n  401240:\teb 70                \tjmp    4012b2 <main+0xb0>\n  401242:\tb9 a0 42 40 00       \tmov    $0x4042a0,%ecx\n  401247:\tba 08 20 40 00       \tmov    $0x402008,%edx\n  40124c:\tbe 26 20 40 00       \tmov    $0x402026,%esi\n  401251:\tbf a0 41 40 00       \tmov    $0x4041a0,%edi\n  401256:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40125b:\te8 30 fe ff ff       \tcallq  401090 <sprintf@plt>\n  401260:\tbf a0 41 40 00       \tmov    $0x4041a0,%edi\n  401265:\te8 c6 fd ff ff       \tcallq  401030 <chdir@plt>\n  40126a:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  40126d:\t75 02                \tjne    401271 <main+0x6f>\n  40126f:\teb 41                \tjmp    4012b2 <main+0xb0>\n  401271:\tbe 36 20 40 00       \tmov    $0x402036,%esi\n  401276:\tbf 38 20 40 00       \tmov    $0x402038,%edi\n  40127b:\te8 e0 fd ff ff       \tcallq  401060 <fopen@plt>\n  401280:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401284:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  401289:\t74 27                \tje     4012b2 <main+0xb0>\n  40128b:\tc7 05 0f 2e 00 00 00 \tmovl   $0x0,0x2e0f(%rip)        # 4040a4 <Name_ok>\n  401292:\t00 00 00 \n  401295:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401299:\t48 89 c7             \tmov    %rax,%rdi\n  40129c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4012a1:\te8 47 00 00 00       \tcallq  4012ed <add_index>\n  4012a6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4012aa:\t48 89 c7             \tmov    %rax,%rdi\n  4012ad:\te8 1e fe ff ff       \tcallq  4010d0 <fclose@plt>\n  4012b2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4012b6:\tb9 a0 42 40 00       \tmov    $0x4042a0,%ecx\n  4012bb:\tba a0 41 40 00       \tmov    $0x4041a0,%edx\n  4012c0:\tbe 3e 20 40 00       \tmov    $0x40203e,%esi\n  4012c5:\t48 89 c7             \tmov    %rax,%rdi\n  4012c8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4012cd:\te8 6e fd ff ff       \tcallq  401040 <__isoc99_fscanf@plt>\n  4012d2:\t85 c0                \ttest   %eax,%eax\n  4012d4:\t0f 8f 52 ff ff ff    \tjg     40122c <main+0x2a>\n  4012da:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4012de:\t48 89 c7             \tmov    %rax,%rdi\n  4012e1:\te8 ea fd ff ff       \tcallq  4010d0 <fclose@plt>\n  4012e6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4012eb:\tc9                   \tleaveq \n  4012ec:\tc3                   \tretq   ", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  FILE *<span class=\"supfact\">stream</span>;\n  FILE *<span class=\"supfact\">v5</span>;\n  chdir(String);\n  <span class=\"supfact\">v5</span> = fopen(String, String);\n  while ((int)__isoc99_fscanf() > Number) {\n    if (!strchr(tmp, Number)) {\n      sprintf(tmp, String, String, buf);\n      if (chdir(tmp) != Number) {\n        <span class=\"supfact\">stream</span> = fopen(String, String);\n        if (<span class=\"supfact\">stream</span>) {\n          Name_ok = Number;\n          add_index(<span class=\"supfact\">stream</span>);\n          fclose(<span class=\"supfact\">stream</span>);\n        }\n      }\n    }\n  }\n  fclose(<span class=\"supfact\">v5</span>);\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  FILE *<span class=\"supfact\">fp2</span>;\n  FILE *<span class=\"supfact\">fp</span>;\n  chdir(String);\n  <span class=\"supfact\">fp</span> = fopen(String, String);\n  while ((int)__isoc99_fscanf() > Number) {\n    if (!strchr(tmp, Number)) {\n      sprintf(tmp, String, String, buf);\n      if (chdir(tmp) != Number) {\n        <span class=\"supfact\">fp2</span> = fopen(String, String);\n        if (<span class=\"supfact\">fp2</span>) {\n          Name_ok = Number;\n          add_index(<span class=\"supfact\">fp2</span>);\n          fclose(<span class=\"supfact\">fp2</span>);\n        }\n      }\n    }\n  }\n  fclose(<span class=\"supfact\">fp</span>);\n  return Number;\n}", "var": [{"name": "v5", "type": "FILE *", "ref_name": "fp", "ref_type": "FILE *"}, {"name": "stream", "type": "FILE *", "ref_name": "fp2", "ref_type": "FILE *"}], "body_in_train": false}, {"repo_owner": "dkrand", "repo_name": "qpage", "path": "dkrand/qpage/9a0fc5a93f5cc3abdbdffb06d5c5674bae307f4e4f2dd4f3de8277b44506570e", "path_in_repo": "dkrand/qpage//qpage", "objdump": "000000000040c71f <parse_time>:\n  40c71f:\t55                   \tpush   %rbp\n  40c720:\t48 89 e5             \tmov    %rsp,%rbp\n  40c723:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40c727:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  40c72b:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  40c732:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  40c739:\t00 \n  40c73a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40c73f:\te8 cc 6c ff ff       \tcallq  403410 <time@plt>\n  40c744:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  40c748:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40c74c:\t48 89 c7             \tmov    %rax,%rdi\n  40c74f:\te8 72 fa ff ff       \tcallq  40c1c6 <snpptime>\n  40c754:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c758:\t48 83 7d f8 ff       \tcmpq   $0xffffffffffffffff,-0x8(%rbp)\n  40c75d:\t74 09                \tje     40c768 <parse_time+0x49>\n  40c75f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40c763:\te9 8a 02 00 00       \tjmpq   40c9f2 <parse_time+0x2d3>\n  40c768:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40c76c:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c76f:\t3c 2b                \tcmp    $0x2b,%al\n  40c771:\t75 0f                \tjne    40c782 <parse_time+0x63>\n  40c773:\t48 83 45 b8 01       \taddq   $0x1,-0x48(%rbp)\n  40c778:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40c77c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c780:\teb 66                \tjmp    40c7e8 <parse_time+0xc9>\n  40c782:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  40c786:\t48 89 c7             \tmov    %rax,%rdi\n  40c789:\te8 02 69 ff ff       \tcallq  403090 <localtime@plt>\n  40c78e:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  40c792:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  40c797:\t75 0c                \tjne    40c7a5 <parse_time+0x86>\n  40c799:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n  40c7a0:\te9 4d 02 00 00       \tjmpq   40c9f2 <parse_time+0x2d3>\n  40c7a5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40c7a9:\tc7 40 08 00 00 00 00 \tmovl   $0x0,0x8(%rax)\n  40c7b0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40c7b4:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n  40c7bb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40c7bf:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  40c7c5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40c7c9:\t48 89 c7             \tmov    %rax,%rdi\n  40c7cc:\te8 ef 6c ff ff       \tcallq  4034c0 <mktime@plt>\n  40c7d1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c7d5:\t48 83 7d f8 ff       \tcmpq   $0xffffffffffffffff,-0x8(%rbp)\n  40c7da:\t75 0c                \tjne    40c7e8 <parse_time+0xc9>\n  40c7dc:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n  40c7e3:\te9 0a 02 00 00       \tjmpq   40c9f2 <parse_time+0x2d3>\n  40c7e8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40c7ec:\tbe 2b 00 00 00       \tmov    $0x2b,%esi\n  40c7f1:\t48 89 c7             \tmov    %rax,%rdi\n  40c7f4:\te8 67 6a ff ff       \tcallq  403260 <strchr@plt>\n  40c7f9:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40c7fd:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  40c802:\t74 4e                \tje     40c852 <parse_time+0x133>\n  40c804:\te8 87 6f ff ff       \tcallq  403790 <__ctype_b_loc@plt>\n  40c809:\t48 8b 10             \tmov    (%rax),%rdx\n  40c80c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40c810:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c813:\t48 0f be c0          \tmovsbq %al,%rax\n  40c817:\t48 01 c0             \tadd    %rax,%rax\n  40c81a:\t48 01 d0             \tadd    %rdx,%rax\n  40c81d:\t0f b7 00             \tmovzwl (%rax),%eax\n  40c820:\t0f b7 c0             \tmovzwl %ax,%eax\n  40c823:\t25 00 08 00 00       \tand    $0x800,%eax\n  40c828:\t85 c0                \ttest   %eax,%eax\n  40c82a:\t74 26                \tje     40c852 <parse_time+0x133>\n  40c82c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c830:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  40c834:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  40c838:\tc6 00 00             \tmovb   $0x0,(%rax)\n  40c83b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40c83f:\t48 89 c7             \tmov    %rax,%rdi\n  40c842:\te8 f9 6d ff ff       \tcallq  403640 <atoi@plt>\n  40c847:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  40c84a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c84e:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  40c852:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40c856:\t48 89 c7             \tmov    %rax,%rdi\n  40c859:\te8 92 69 ff ff       \tcallq  4031f0 <strlen@plt>\n  40c85e:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  40c861:\t83 7d e0 04          \tcmpl   $0x4,-0x20(%rbp)\n  40c865:\t7e 0c                \tjle    40c873 <parse_time+0x154>\n  40c867:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n  40c86e:\te9 7f 01 00 00       \tjmpq   40c9f2 <parse_time+0x2d3>\n  40c873:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  40c876:\t83 c0 01             \tadd    $0x1,%eax\n  40c879:\t48 98                \tcltq   \n  40c87b:\t48 89 c7             \tmov    %rax,%rdi\n  40c87e:\te8 cd 6b ff ff       \tcallq  403450 <malloc@plt>\n  40c883:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  40c887:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40c88b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40c88f:\teb 5f                \tjmp    40c8f0 <parse_time+0x1d1>\n  40c891:\te8 fa 6e ff ff       \tcallq  403790 <__ctype_b_loc@plt>\n  40c896:\t48 8b 10             \tmov    (%rax),%rdx\n  40c899:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40c89d:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c8a0:\t48 0f be c0          \tmovsbq %al,%rax\n  40c8a4:\t48 01 c0             \tadd    %rax,%rax\n  40c8a7:\t48 01 d0             \tadd    %rdx,%rax\n  40c8aa:\t0f b7 00             \tmovzwl (%rax),%eax\n  40c8ad:\t0f b7 c0             \tmovzwl %ax,%eax\n  40c8b0:\t25 00 08 00 00       \tand    $0x800,%eax\n  40c8b5:\t85 c0                \ttest   %eax,%eax\n  40c8b7:\t75 18                \tjne    40c8d1 <parse_time+0x1b2>\n  40c8b9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40c8bd:\t48 89 c7             \tmov    %rax,%rdi\n  40c8c0:\te8 7b 67 ff ff       \tcallq  403040 <free@plt>\n  40c8c5:\t48 c7 c0 ff ff ff ff \tmov    $0xffffffffffffffff,%rax\n  40c8cc:\te9 21 01 00 00       \tjmpq   40c9f2 <parse_time+0x2d3>\n  40c8d1:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  40c8d4:\t48 63 d0             \tmovslq %eax,%rdx\n  40c8d7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40c8db:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n  40c8df:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c8e3:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  40c8e7:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  40c8eb:\t0f b6 11             \tmovzbl (%rcx),%edx\n  40c8ee:\t88 10                \tmov    %dl,(%rax)\n  40c8f0:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  40c8f3:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  40c8f6:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n  40c8f9:\t85 c0                \ttest   %eax,%eax\n  40c8fb:\t75 94                \tjne    40c891 <parse_time+0x172>\n  40c8fd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c901:\tc6 00 00             \tmovb   $0x0,(%rax)\n  40c904:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40c908:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40c90c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c910:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c913:\t84 c0                \ttest   %al,%al\n  40c915:\t74 1e                \tje     40c935 <parse_time+0x216>\n  40c917:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c91b:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  40c91f:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  40c923:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c926:\t0f be c0             \tmovsbl %al,%eax\n  40c929:\t83 e8 30             \tsub    $0x30,%eax\n  40c92c:\t6b c0 3c             \timul   $0x3c,%eax,%eax\n  40c92f:\t48 98                \tcltq   \n  40c931:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n  40c935:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c939:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c93c:\t84 c0                \ttest   %al,%al\n  40c93e:\t74 21                \tje     40c961 <parse_time+0x242>\n  40c940:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c944:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  40c948:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  40c94c:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c94f:\t0f be c0             \tmovsbl %al,%eax\n  40c952:\t83 e8 30             \tsub    $0x30,%eax\n  40c955:\t69 c0 58 02 00 00    \timul   $0x258,%eax,%eax\n  40c95b:\t48 98                \tcltq   \n  40c95d:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n  40c961:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c965:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c968:\t84 c0                \ttest   %al,%al\n  40c96a:\t74 21                \tje     40c98d <parse_time+0x26e>\n  40c96c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c970:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  40c974:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  40c978:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c97b:\t0f be c0             \tmovsbl %al,%eax\n  40c97e:\t83 e8 30             \tsub    $0x30,%eax\n  40c981:\t69 c0 10 0e 00 00    \timul   $0xe10,%eax,%eax\n  40c987:\t48 98                \tcltq   \n  40c989:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n  40c98d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c991:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c994:\t84 c0                \ttest   %al,%al\n  40c996:\t74 21                \tje     40c9b9 <parse_time+0x29a>\n  40c998:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c99c:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  40c9a0:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  40c9a4:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c9a7:\t0f be c0             \tmovsbl %al,%eax\n  40c9aa:\t83 e8 30             \tsub    $0x30,%eax\n  40c9ad:\t69 c0 a0 8c 00 00    \timul   $0x8ca0,%eax,%eax\n  40c9b3:\t48 98                \tcltq   \n  40c9b5:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n  40c9b9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  40c9bd:\t48 89 c7             \tmov    %rax,%rdi\n  40c9c0:\te8 7b 66 ff ff       \tcallq  403040 <free@plt>\n  40c9c5:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40c9c8:\t69 c0 80 51 01 00    \timul   $0x15180,%eax,%eax\n  40c9ce:\t48 63 d0             \tmovslq %eax,%rdx\n  40c9d1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40c9d5:\t48 01 d0             \tadd    %rdx,%rax\n  40c9d8:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n  40c9dc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40c9e0:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  40c9e4:\t7d 08                \tjge    40c9ee <parse_time+0x2cf>\n  40c9e6:\t48 81 45 f8 80 51 01 \taddq   $0x15180,-0x8(%rbp)\n  40c9ed:\t00 \n  40c9ee:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40c9f2:\tc9                   \tleaveq \n  40c9f3:\tc3                   \tretq   ", "code_s": "time_t __fastcall parse_time(char *a1) {\n  char *v2;\n  char *v3;\n  char *v5;\n  char *v6;\n  char *v7;\n  char *v8;\n  char *<span class=\"supfact\">s</span>;\n  time_t <span class=\"supfact\">timer</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  struct tm *<span class=\"supfact\">tp</span>;\n  int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  char *<span class=\"supfact\">v15</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  time_t <span class=\"supfact\">v17</span>;\n  <span class=\"supfact\">s</span> = a1;\n  <span class=\"supfact\">v14</span> = Number;\n  <span class=\"supfact\">v16</span> = Number L;\n  <span class=\"supfact\">timer</span> = time(Number L);\n  <span class=\"supfact\">v17</span> = snpptime(a1);\n  if (<span class=\"supfact\">v17</span> != Number)\n    return <span class=\"supfact\">v17</span>;\n  if (*a1 == Number) {\n    <span class=\"supfact\">s</span> = a1 + Number;\n    <span class=\"supfact\">v17</span> = <span class=\"supfact\">timer</span>;\n  } else {\n    <span class=\"supfact\">tp</span> = localtime(&<span class=\"supfact\">timer</span>);\n    if (!<span class=\"supfact\">tp</span>)\n      return Number;\n    <span class=\"supfact\">tp</span>->tm_hour = Number;\n    <span class=\"supfact\">tp</span>->tm_min = Number;\n    <span class=\"supfact\">tp</span>->tm_sec = Number;\n    <span class=\"supfact\">v17</span> = mktime(<span class=\"supfact\">tp</span>);\n    if (<span class=\"supfact\">v17</span> == Number)\n      return Number;\n  }\n  <span class=\"supfact\">v15</span> = strchr(<span class=\"supfact\">s</span>, Number);\n  if (<span class=\"supfact\">v15</span> &&\n      ((*__ctype_b_loc())[*<span class=\"supfact\">s</span>] & Number) != Number) {\n    v2 = <span class=\"supfact\">v15</span>++;\n    *v2 = Number;\n    <span class=\"supfact\">v14</span> = atoi(<span class=\"supfact\">s</span>);\n    <span class=\"supfact\">s</span> = <span class=\"supfact\">v15</span>;\n  }\n  <span class=\"supfact\">v13</span> = strlen(<span class=\"supfact\">s</span>);\n  if (<span class=\"supfact\">v13</span> > Number)\n    return Number;\n  <span class=\"supfact\">ptr</span> = malloc(<span class=\"supfact\">v13</span> + Number);\n  <span class=\"supfact\">v15</span> = (char *)<span class=\"supfact\">ptr</span>;\n  while (<span class=\"supfact\">v13</span>--) {\n    if (((*__ctype_b_loc())[*<span class=\"supfact\">s</span>] & Number) == Number) {\n      free(<span class=\"supfact\">ptr</span>);\n      return Number;\n    }\n    v3 = <span class=\"supfact\">v15</span>++;\n    *v3 = <span class=\"supfact\">s</span>[<span class=\"supfact\">v13</span>];\n  }\n  *<span class=\"supfact\">v15</span> = Number;\n  <span class=\"supfact\">v15</span> = (char *)<span class=\"supfact\">ptr</span>;\n  if (*(_BYTE *)<span class=\"supfact\">ptr</span>) {\n    v5 = <span class=\"supfact\">v15</span>++;\n    <span class=\"supfact\">v16</span> += Number * (*v5 - Number);\n  }\n  if (*<span class=\"supfact\">v15</span>) {\n    v6 = <span class=\"supfact\">v15</span>++;\n    <span class=\"supfact\">v16</span> += Number * (*v6 - Number);\n  }\n  if (*<span class=\"supfact\">v15</span>) {\n    v7 = <span class=\"supfact\">v15</span>++;\n    <span class=\"supfact\">v16</span> += Number * (*v7 - Number);\n  }\n  if (*<span class=\"supfact\">v15</span>) {\n    v8 = <span class=\"supfact\">v15</span>++;\n    <span class=\"supfact\">v16</span> += Number * (*v8 - Number);\n  }\n  free(<span class=\"supfact\">ptr</span>);\n  <span class=\"supfact\">v17</span> += Number * <span class=\"supfact\">v14</span> + <span class=\"supfact\">v16</span>;\n  if (<span class=\"supfact\">v17</span> < <span class=\"supfact\">timer</span>)\n    <span class=\"supfact\">v17</span> += Number L;\n  return <span class=\"supfact\">v17</span>;\n}", "code_t": "time_t __cdecl parse_time(char *str) {\n  char *v2;\n  char *v3;\n  char *v5;\n  char *v6;\n  char *v7;\n  char *v8;\n  const char *<span class=\"supfact\">stra</span>;\n  time_t <span class=\"supfact\">now</span>;\n  char *<span class=\"supfact\">ptr</span>;\n  <span class=\"supfact\">tm</span> *<span class=\"supfact\">tm</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">days</span>;\n  char *<span class=\"supfact\">tmp</span>;\n  time_t <span class=\"supfact\">offset</span>;\n  time_t <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">stra</span> = str;\n  <span class=\"supfact\">days</span> = Number;\n  <span class=\"supfact\">offset</span> = Number L;\n  <span class=\"supfact\">now</span> = time(Number L);\n  <span class=\"supfact\">result</span> = snpptime(str);\n  if (<span class=\"supfact\">result</span> != Number)\n    return <span class=\"supfact\">result</span>;\n  if (*str == Number) {\n    <span class=\"supfact\">stra</span> = str + Number;\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">now</span>;\n  } else {\n    <span class=\"supfact\">tm</span> = localtime(&<span class=\"supfact\">now</span>);\n    if (!<span class=\"supfact\">tm</span>)\n      return Number;\n    <span class=\"supfact\">tm</span>->tm_hour = Number;\n    <span class=\"supfact\">tm</span>->tm_min = Number;\n    <span class=\"supfact\">tm</span>->tm_sec = Number;\n    <span class=\"supfact\">result</span> = mktime(<span class=\"supfact\">tm</span>);\n    if (<span class=\"supfact\">result</span> == Number)\n      return Number;\n  }\n  <span class=\"supfact\">tmp</span> = strchr(<span class=\"supfact\">stra</span>, Number);\n  if (<span class=\"supfact\">tmp</span> &&\n      ((*__ctype_b_loc())[*<span class=\"supfact\">stra</span>] & Number) != Number) {\n    v2 = <span class=\"supfact\">tmp</span>++;\n    *v2 = Number;\n    <span class=\"supfact\">days</span> = atoi(<span class=\"supfact\">stra</span>);\n    <span class=\"supfact\">stra</span> = <span class=\"supfact\">tmp</span>;\n  }\n  <span class=\"supfact\">i</span> = strlen(<span class=\"supfact\">stra</span>);\n  if (<span class=\"supfact\">i</span> > Number)\n    return Number;\n  <span class=\"supfact\">ptr</span> = (char *)malloc(<span class=\"supfact\">i</span> + Number);\n  <span class=\"supfact\">tmp</span> = <span class=\"supfact\">ptr</span>;\n  while (<span class=\"supfact\">i</span>--) {\n    if (((*__ctype_b_loc())[*<span class=\"supfact\">stra</span>] & Number) == Number) {\n      free(<span class=\"supfact\">ptr</span>);\n      return Number;\n    }\n    v3 = <span class=\"supfact\">tmp</span>++;\n    *v3 = <span class=\"supfact\">stra</span>[<span class=\"supfact\">i</span>];\n  }\n  *<span class=\"supfact\">tmp</span> = Number;\n  <span class=\"supfact\">tmp</span> = <span class=\"supfact\">ptr</span>;\n  if (*<span class=\"supfact\">ptr</span>) {\n    v5 = <span class=\"supfact\">tmp</span>++;\n    <span class=\"supfact\">offset</span> += Number * (*v5 - Number);\n  }\n  if (*<span class=\"supfact\">tmp</span>) {\n    v6 = <span class=\"supfact\">tmp</span>++;\n    <span class=\"supfact\">offset</span> += Number * (*v6 - Number);\n  }\n  if (*<span class=\"supfact\">tmp</span>) {\n    v7 = <span class=\"supfact\">tmp</span>++;\n    <span class=\"supfact\">offset</span> += Number * (*v7 - Number);\n  }\n  if (*<span class=\"supfact\">tmp</span>) {\n    v8 = <span class=\"supfact\">tmp</span>++;\n    <span class=\"supfact\">offset</span> += Number * (*v8 - Number);\n  }\n  free(<span class=\"supfact\">ptr</span>);\n  <span class=\"supfact\">result</span> +=\n      Number * <span class=\"supfact\">days</span> + <span class=\"supfact\">offset</span>;\n  if (<span class=\"supfact\">result</span> < <span class=\"supfact\">now</span>)\n    <span class=\"supfact\">result</span> += Number L;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "v17", "type": "char *", "ref_name": "result", "ref_type": "time_t"}, {"name": "v16", "type": "char *", "ref_name": "offset", "ref_type": "time_t"}, {"name": "v15", "type": "char *", "ref_name": "tmp", "ref_type": "char *"}, {"name": "v14", "type": "int", "ref_name": "days", "ref_type": "int"}, {"name": "v13", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "tp", "type": "tm *", "ref_name": "tm", "ref_type": "tm *"}, {"name": "ptr", "type": "char *", "ref_name": "ptr", "ref_type": "char *"}, {"name": "timer", "type": "time_t", "ref_name": "now", "ref_type": "time_t"}, {"name": "s", "type": "char *", "ref_name": "stra", "ref_type": "const char *"}], "body_in_train": false}, {"repo_owner": "osmanpub", "repo_name": "algorist", "path": "osmanpub/algorist/3639da378d49b30a5f20c0cda4590345c8a47f609752c2a189624deb6037bf08", "path_in_repo": "osmanpub/algorist/1.1/algorithms/back-track-funcs.o", "objdump": "00000000000004c9 <subset_process_solution>:\n     4c9:\t55                   \tpush   %rbp\n     4ca:\t48 89 e5             \tmov    %rsp,%rbp\n     4cd:\t48 83 ec 30          \tsub    $0x30,%rsp\n     4d1:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     4d5:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     4d8:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     4dc:\tbf 7b 00 00 00       \tmov    $0x7b,%edi\n     4e1:\te8 00 00 00 00       \tcallq  4e6 <subset_process_solution+0x1d>\n     4e6:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n     4ed:\teb 32                \tjmp    521 <subset_process_solution+0x58>\n     4ef:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4f3:\t48 8b 00             \tmov    (%rax),%rax\n     4f6:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     4f9:\t48 63 d2             \tmovslq %edx,%rdx\n     4fc:\t48 c1 e2 02          \tshl    $0x2,%rdx\n     500:\t48 01 d0             \tadd    %rdx,%rax\n     503:\t8b 00                \tmov    (%rax),%eax\n     505:\t85 c0                \ttest   %eax,%eax\n     507:\t74 14                \tje     51d <subset_process_solution+0x54>\n     509:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     50c:\t89 c6                \tmov    %eax,%esi\n     50e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     513:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     518:\te8 00 00 00 00       \tcallq  51d <subset_process_solution+0x54>\n     51d:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     521:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     524:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n     527:\t7e c6                \tjle    4ef <subset_process_solution+0x26>\n     529:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     52e:\te8 00 00 00 00       \tcallq  533 <subset_process_solution+0x6a>\n     533:\t90                   \tnop\n     534:\tc9                   \tleaveq \n     535:\tc3                   \tretq   ", "code_s": "int __fastcall subset_process_solution(_QWORD *a1, int a2) {\n  int <span class=\"supfact\">i</span>;\n  putchar(Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= a2;\n       ++<span class=\"supfact\">i</span>) {\n    if (*(_DWORD *)(Number L * <span class=\"supfact\">i</span> + *a1))\n      printf(String, (unsigned int)<span class=\"supfact\">i</span>);\n  }\n  return puts(String);\n}", "code_t": "void __cdecl subset_process_solution(back_track_t_0 *b, int k, void *input) {\n  int <span class=\"supfact\">i</span>;\n  putchar(Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= k;\n       ++<span class=\"supfact\">i</span>) {\n    if (b->solution[<span class=\"supfact\">i</span>])\n      printf(String, (unsigned int)<span class=\"supfact\">i</span>);\n  }\n  puts(String);\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "ausbin", "repo_name": "astro", "path": "ausbin/astro/5ee04477003d0a4339e43a3fd3f875b2c7076ed951ae5d35c5c9600ae725e841", "path_in_repo": "ausbin/astro/submods/unicorn/qemu/mips-softmmu/target-mips/msa_helper.o", "objdump": "0000000000002b09 <helper_msa_slli_df_mips>:\n    2b09:\t55                   \tpush   %rbp\n    2b0a:\t48 89 e5             \tmov    %rsp,%rbp\n    2b0d:\t48 83 ec 40          \tsub    $0x40,%rsp\n    2b11:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    2b15:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n    2b18:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n    2b1b:\t89 4d cc             \tmov    %ecx,-0x34(%rbp)\n    2b1e:\t44 89 45 c8          \tmov    %r8d,-0x38(%rbp)\n    2b22:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    2b25:\t48 83 c0 0e          \tadd    $0xe,%rax\n    2b29:\t48 c1 e0 04          \tshl    $0x4,%rax\n    2b2d:\t48 89 c2             \tmov    %rax,%rdx\n    2b30:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2b34:\t48 01 d0             \tadd    %rdx,%rax\n    2b37:\t48 83 c0 08          \tadd    $0x8,%rax\n    2b3b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2b3f:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    2b42:\t48 83 c0 0e          \tadd    $0xe,%rax\n    2b46:\t48 c1 e0 04          \tshl    $0x4,%rax\n    2b4a:\t48 89 c2             \tmov    %rax,%rdx\n    2b4d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2b51:\t48 01 d0             \tadd    %rdx,%rax\n    2b54:\t48 83 c0 08          \tadd    $0x8,%rax\n    2b58:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2b5c:\t83 7d d4 03          \tcmpl   $0x3,-0x2c(%rbp)\n    2b60:\t0f 84 f4 00 00 00    \tje     2c5a <helper_msa_slli_df_mips+0x151>\n    2b66:\t83 7d d4 03          \tcmpl   $0x3,-0x2c(%rbp)\n    2b6a:\t0f 87 25 01 00 00    \tja     2c95 <helper_msa_slli_df_mips+0x18c>\n    2b70:\t83 7d d4 02          \tcmpl   $0x2,-0x2c(%rbp)\n    2b74:\t0f 84 a2 00 00 00    \tje     2c1c <helper_msa_slli_df_mips+0x113>\n    2b7a:\t83 7d d4 02          \tcmpl   $0x2,-0x2c(%rbp)\n    2b7e:\t0f 87 11 01 00 00    \tja     2c95 <helper_msa_slli_df_mips+0x18c>\n    2b84:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    2b88:\t74 0b                \tje     2b95 <helper_msa_slli_df_mips+0x8c>\n    2b8a:\t83 7d d4 01          \tcmpl   $0x1,-0x2c(%rbp)\n    2b8e:\t74 48                \tje     2bd8 <helper_msa_slli_df_mips+0xcf>\n    2b90:\te9 00 01 00 00       \tjmpq   2c95 <helper_msa_slli_df_mips+0x18c>\n    2b95:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    2b9c:\teb 2f                \tjmp    2bcd <helper_msa_slli_df_mips+0xc4>\n    2b9e:\t8b 55 c8             \tmov    -0x38(%rbp),%edx\n    2ba1:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    2ba5:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    2ba8:\t0f b6 04 01          \tmovzbl (%rcx,%rax,1),%eax\n    2bac:\t48 0f be c8          \tmovsbq %al,%rcx\n    2bb0:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    2bb3:\t48 89 ce             \tmov    %rcx,%rsi\n    2bb6:\t89 c7                \tmov    %eax,%edi\n    2bb8:\te8 cc f7 ff ff       \tcallq  2389 <msa_sll_df>\n    2bbd:\t89 c1                \tmov    %eax,%ecx\n    2bbf:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    2bc3:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    2bc6:\t88 0c 02             \tmov    %cl,(%rdx,%rax,1)\n    2bc9:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    2bcd:\t83 7d ec 0f          \tcmpl   $0xf,-0x14(%rbp)\n    2bd1:\t76 cb                \tjbe    2b9e <helper_msa_slli_df_mips+0x95>\n    2bd3:\te9 dc 00 00 00       \tjmpq   2cb4 <helper_msa_slli_df_mips+0x1ab>\n    2bd8:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    2bdf:\teb 30                \tjmp    2c11 <helper_msa_slli_df_mips+0x108>\n    2be1:\t8b 55 c8             \tmov    -0x38(%rbp),%edx\n    2be4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2be8:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n    2beb:\t0f b7 04 48          \tmovzwl (%rax,%rcx,2),%eax\n    2bef:\t48 0f bf c8          \tmovswq %ax,%rcx\n    2bf3:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    2bf6:\t48 89 ce             \tmov    %rcx,%rsi\n    2bf9:\t89 c7                \tmov    %eax,%edi\n    2bfb:\te8 89 f7 ff ff       \tcallq  2389 <msa_sll_df>\n    2c00:\t89 c1                \tmov    %eax,%ecx\n    2c02:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2c06:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    2c09:\t66 89 0c 50          \tmov    %cx,(%rax,%rdx,2)\n    2c0d:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    2c11:\t83 7d ec 07          \tcmpl   $0x7,-0x14(%rbp)\n    2c15:\t76 ca                \tjbe    2be1 <helper_msa_slli_df_mips+0xd8>\n    2c17:\te9 98 00 00 00       \tjmpq   2cb4 <helper_msa_slli_df_mips+0x1ab>\n    2c1c:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    2c23:\teb 2d                \tjmp    2c52 <helper_msa_slli_df_mips+0x149>\n    2c25:\t8b 55 c8             \tmov    -0x38(%rbp),%edx\n    2c28:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2c2c:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n    2c2f:\t8b 04 88             \tmov    (%rax,%rcx,4),%eax\n    2c32:\t48 63 c8             \tmovslq %eax,%rcx\n    2c35:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    2c38:\t48 89 ce             \tmov    %rcx,%rsi\n    2c3b:\t89 c7                \tmov    %eax,%edi\n    2c3d:\te8 47 f7 ff ff       \tcallq  2389 <msa_sll_df>\n    2c42:\t89 c1                \tmov    %eax,%ecx\n    2c44:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2c48:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    2c4b:\t89 0c 90             \tmov    %ecx,(%rax,%rdx,4)\n    2c4e:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    2c52:\t83 7d ec 03          \tcmpl   $0x3,-0x14(%rbp)\n    2c56:\t76 cd                \tjbe    2c25 <helper_msa_slli_df_mips+0x11c>\n    2c58:\teb 5a                \tjmp    2cb4 <helper_msa_slli_df_mips+0x1ab>\n    2c5a:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    2c61:\teb 2a                \tjmp    2c8d <helper_msa_slli_df_mips+0x184>\n    2c63:\t8b 55 c8             \tmov    -0x38(%rbp),%edx\n    2c66:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2c6a:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n    2c6d:\t48 8b 0c c8          \tmov    (%rax,%rcx,8),%rcx\n    2c71:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    2c74:\t48 89 ce             \tmov    %rcx,%rsi\n    2c77:\t89 c7                \tmov    %eax,%edi\n    2c79:\te8 0b f7 ff ff       \tcallq  2389 <msa_sll_df>\n    2c7e:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    2c82:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n    2c85:\t48 89 04 ca          \tmov    %rax,(%rdx,%rcx,8)\n    2c89:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    2c8d:\t83 7d ec 01          \tcmpl   $0x1,-0x14(%rbp)\n    2c91:\t76 d0                \tjbe    2c63 <helper_msa_slli_df_mips+0x15a>\n    2c93:\teb 1f                \tjmp    2cb4 <helper_msa_slli_df_mips+0x1ab>\n    2c95:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 2c9c <helper_msa_slli_df_mips+0x193>\n    2c9c:\tba ad 01 00 00       \tmov    $0x1ad,%edx\n    2ca1:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2ca8 <helper_msa_slli_df_mips+0x19f>\n    2ca8:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2caf <helper_msa_slli_df_mips+0x1a6>\n    2caf:\te8 00 00 00 00       \tcallq  2cb4 <helper_msa_slli_df_mips+0x1ab>\n    2cb4:\tc9                   \tleaveq \n    2cb5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall helper_msa_slli_df_mips(__int64 a1, unsigned int a2,\n                                           unsigned int a3, unsigned int a4,\n                                           char a5) {\n  __int64 result;\n  char v6;\n  __int16 v7;\n  int v8;\n  unsigned int l;\n  unsigned int k;\n  unsigned int j;\n  unsigned int i;\n  __int64 <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v14</span> = Number * (a3 + Number L) + a1 + Number;\n  result = Number * (a4 + Number L) + a1 + Number;\n  <span class=\"supfact\">v15</span> = result;\n  if (a2 == Number) {\n    for (i = Number; i <= Number; ++i) {\n      result = msa_sll_df(Number,\n                          *(_QWORD *)(<span class=\"supfact\">v15</span> + Number L * i), a5);\n      *(_QWORD *)(<span class=\"supfact\">v14</span> + Number L * i) = result;\n    }\n  } else {\n    if (a2 > Number)\n      _assert_fail(String, String, Number, String);\n    if (a2 == Number) {\n      for (j = Number; j <= Number; ++j) {\n        v8 = msa_sll_df(Number, *(int *)(<span class=\"supfact\">v15</span> + Number L * j),\n                        a5);\n        result = <span class=\"supfact\">v14</span>;\n        *(_DWORD *)(<span class=\"supfact\">v14</span> + Number L * j) = v8;\n      }\n    } else if (a2) {\n      for (k = Number; k <= Number; ++k) {\n        v7 = msa_sll_df(Number,\n                        *(__int16 *)(<span class=\"supfact\">v15</span> + Number L * k), a5);\n        result = <span class=\"supfact\">v14</span>;\n        *(_WORD *)(<span class=\"supfact\">v14</span> + Number L * k) = v7;\n      }\n    } else {\n      for (l = Number; l <= Number; ++l) {\n        v6 = msa_sll_df(Number, *(char *)(<span class=\"supfact\">v15</span> + l), a5);\n        result = l;\n        *(_BYTE *)(<span class=\"supfact\">v14</span> + l) = v6;\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl helper_msa_slli_df_mips(CPUMIPSState_0 *env, uint32_t df_0,\n                                     uint32_t wd, uint32_t ws, uint32_t u5) {\n  uint32_t ia;\n  uint32_t i;\n  uint32_t ib;\n  uint32_t ic;\n  wr_t_0 *<span class=\"supfact\">pwd</span>;\n  wr_t_0 *<span class=\"supfact\">pws</span>;\n  <span class=\"supfact\">pwd</span> = (wr_t_0 *)&env->active_fpu.fpr[wd];\n  <span class=\"supfact\">pws</span> = (wr_t_0 *)&env->active_fpu.fpr[ws];\n  if (df_0 == Number) {\n    for (ic = Number; ic <= Number; ++ic)\n      <span class=\"supfact\">pwd</span>->d[ic] =\n          msa_sll_df(Number, <span class=\"supfact\">pws</span>->d[ic], u5);\n  } else {\n    if (df_0 > Number)\n      _assert_fail(String, String, Number, String);\n    if (df_0 == Number) {\n      for (ib = Number; ib <= Number; ++ib)\n        <span class=\"supfact\">pwd</span>->w[ib] =\n            msa_sll_df(Number, <span class=\"supfact\">pws</span>->w[ib], u5);\n    } else if (df_0) {\n      for (i = Number; i <= Number; ++i)\n        <span class=\"supfact\">pwd</span>->h[i] =\n            msa_sll_df(Number, <span class=\"supfact\">pws</span>->h[i], u5);\n    } else {\n      for (ia = Number; ia <= Number; ++ia)\n        <span class=\"supfact\">pwd</span>->b[ia] =\n            msa_sll_df(Number, <span class=\"supfact\">pws</span>->b[ia], u5);\n    }\n  }\n}", "var": [{"name": "v15", "type": "wr_t_0 *", "ref_name": "pws", "ref_type": "wr_t_0 *"}, {"name": "v14", "type": "wr_t_0 *", "ref_name": "pwd", "ref_type": "wr_t_0 *"}], "body_in_train": false}, {"repo_owner": "udf", "repo_name": "42-RT-v1", "path": "udf/42-RT-v1/6246c17c8fa82b2d4b549e27e9eea0e061b1176e77371f91ef28fe968350e9a4", "path_in_repo": "udf/42-RT-v1//SDL2-2.0.8/src/power/linux/SDL_syspower.o", "objdump": "0000000000000000 <open_power_file>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t53                   \tpush   %rbx\n       5:\t48 83 ec 38          \tsub    $0x38,%rsp\n       9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n       d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n      11:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n      15:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n      19:\t48 89 c7             \tmov    %rax,%rdi\n      1c:\te8 00 00 00 00       \tcallq  21 <open_power_file+0x21>\n      21:\t48 89 c3             \tmov    %rax,%rbx\n      24:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n      28:\t48 89 c7             \tmov    %rax,%rdi\n      2b:\te8 00 00 00 00       \tcallq  30 <open_power_file+0x30>\n      30:\t48 01 c3             \tadd    %rax,%rbx\n      33:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n      37:\t48 89 c7             \tmov    %rax,%rdi\n      3a:\te8 00 00 00 00       \tcallq  3f <open_power_file+0x3f>\n      3f:\t48 01 d8             \tadd    %rbx,%rax\n      42:\t48 83 c0 03          \tadd    $0x3,%rax\n      46:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n      4a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n      4e:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n      52:\tb8 10 00 00 00       \tmov    $0x10,%eax\n      57:\t48 83 e8 01          \tsub    $0x1,%rax\n      5b:\t48 01 d0             \tadd    %rdx,%rax\n      5e:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n      63:\tba 00 00 00 00       \tmov    $0x0,%edx\n      68:\t48 f7 f1             \tdiv    %rcx\n      6b:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n      6f:\t48 29 c4             \tsub    %rax,%rsp\n      72:\t48 89 e0             \tmov    %rsp,%rax\n      75:\t48 83 c0 0f          \tadd    $0xf,%rax\n      79:\t48 c1 e8 04          \tshr    $0x4,%rax\n      7d:\t48 c1 e0 04          \tshl    $0x4,%rax\n      81:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n      85:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n      8a:\t75 07                \tjne    93 <open_power_file+0x93>\n      8c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n      91:\teb 45                \tjmp    d8 <open_power_file+0xd8>\n      93:\t48 8b 7d c8          \tmov    -0x38(%rbp),%rdi\n      97:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n      9b:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n      9f:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n      a3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n      a7:\t49 89 f9             \tmov    %rdi,%r9\n      aa:\t49 89 c8             \tmov    %rcx,%r8\n      ad:\t48 89 d1             \tmov    %rdx,%rcx\n      b0:\tba 00 00 00 00       \tmov    $0x0,%edx\n      b5:\t48 89 c7             \tmov    %rax,%rdi\n      b8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      bd:\te8 00 00 00 00       \tcallq  c2 <open_power_file+0xc2>\n      c2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n      c6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n      cb:\t48 89 c7             \tmov    %rax,%rdi\n      ce:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      d3:\te8 00 00 00 00       \tcallq  d8 <open_power_file+0xd8>\n      d8:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n      dc:\tc9                   \tleaveq \n      dd:\tc3                   \tretq   ", "code_s": "int __fastcall open_power_file(char *a1, char *a2, char *a3) {\n  size_t v3;\n  size_t v4;\n  size_t v5;\n  void *v6;\n  char *<span class=\"supfact\">v8</span>;\n  char *<span class=\"supfact\">v9</span>;\n  char *<span class=\"supfact\">s</span>;\n  char *<span class=\"supfact\">file</span>;\n  size_t <span class=\"supfact\">maxlen</span>;\n  <span class=\"supfact\">s</span> = a1;\n  <span class=\"supfact\">v9</span> = a2;\n  <span class=\"supfact\">v8</span> = a3;\n  v3 = strlen(a1);\n  v4 = strlen(a2) + v3;\n  v5 = strlen(<span class=\"supfact\">v8</span>);\n  <span class=\"supfact\">maxlen</span> = v4 + v5 + Number;\n  v6 = alloca(Number * ((v4 + v5 + Number) / Number));\n  <span class=\"supfact\">file</span> =\n      (char *)(Number *\n               (((unsigned __int64)&<span class=\"supfact\">v8</span> + Number) >> Number));\n  if (!<span class=\"supfact\">file</span>)\n    return Number;\n  snprintf(<span class=\"supfact\">file</span>, <span class=\"supfact\">maxlen</span>, String,\n           <span class=\"supfact\">s</span>, <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>);\n  return open(<span class=\"supfact\">file</span>, Number);\n}", "code_t": "int __cdecl open_power_file(const char *base, const char *node,\n                            const char *key) {\n  size_t v3;\n  size_t v4;\n  size_t v5;\n  void *v6;\n  const char *<span class=\"supfact\">keya</span>;\n  const char *<span class=\"supfact\">nodea</span>;\n  const char *<span class=\"supfact\">basea</span>;\n  char *<span class=\"supfact\">path</span>;\n  size_t <span class=\"supfact\">pathlen</span>;\n  <span class=\"supfact\">basea</span> = base;\n  <span class=\"supfact\">nodea</span> = node;\n  <span class=\"supfact\">keya</span> = key;\n  v3 = strlen(base);\n  v4 = strlen(node) + v3;\n  v5 = strlen(<span class=\"supfact\">keya</span>);\n  <span class=\"supfact\">pathlen</span> = v4 + v5 + Number;\n  v6 = alloca(Number * ((v4 + v5 + Number) / Number));\n  <span class=\"supfact\">path</span> =\n      (char *)(Number *\n               (((unsigned __int64)&<span class=\"supfact\">keya</span> + Number) >> Number));\n  if (!<span class=\"supfact\">path</span>)\n    return Number;\n  snprintf(<span class=\"supfact\">path</span>, <span class=\"supfact\">pathlen</span>, String,\n           <span class=\"supfact\">basea</span>, <span class=\"supfact\">nodea</span>, <span class=\"supfact\">keya</span>);\n  return open(<span class=\"supfact\">path</span>, Number);\n}", "var": [{"name": "maxlen", "type": "size_t", "ref_name": "pathlen", "ref_type": "size_t"}, {"name": "file", "type": "char (*)[]", "ref_name": "path", "ref_type": "char *"}, {"name": "s", "type": "const char *", "ref_name": "basea", "ref_type": "const char *"}, {"name": "v9", "type": "size_t", "ref_name": "nodea", "ref_type": "const char *"}, {"name": "v8", "type": "size_t", "ref_name": "keya", "ref_type": "const char *"}], "body_in_train": false}, {"repo_owner": "stamourv", "repo_name": "picobit", "path": "stamourv/picobit/35dd3ecaf725029feb90acc7aaa5f2190edc40d6c1b30e6779ca0d1a56f1ad85", "path_in_repo": "stamourv/picobit/vm/picobit-vm", "objdump": "0000000000404fc9 <norm>:\n  404fc9:\t55                   \tpush   %rbp\n  404fca:\t48 89 e5             \tmov    %rsp,%rbp\n  404fcd:\t48 83 ec 20          \tsub    $0x20,%rsp\n  404fd1:\t89 fa                \tmov    %edi,%edx\n  404fd3:\t89 f0                \tmov    %esi,%eax\n  404fd5:\t66 89 55 ec          \tmov    %dx,-0x14(%rbp)\n  404fd9:\t66 89 45 e8          \tmov    %ax,-0x18(%rbp)\n  404fdd:\teb 76                \tjmp    405055 <norm+0x8c>\n  404fdf:\t0f b7 45 ec          \tmovzwl -0x14(%rbp),%eax\n  404fe3:\t89 c7                \tmov    %eax,%edi\n  404fe5:\te8 26 ff ff ff       \tcallq  404f10 <integer_lo>\n  404fea:\t66 89 45 fe          \tmov    %ax,-0x2(%rbp)\n  404fee:\t0f b7 45 ec          \tmovzwl -0x14(%rbp),%eax\n  404ff2:\t66 89 45 fc          \tmov    %ax,-0x4(%rbp)\n  404ff6:\t0f b7 45 fc          \tmovzwl -0x4(%rbp),%eax\n  404ffa:\t89 c7                \tmov    %eax,%edi\n  404ffc:\te8 ba fe ff ff       \tcallq  404ebb <integer_hi>\n  405001:\t66 89 45 ec          \tmov    %ax,-0x14(%rbp)\n  405005:\t66 83 7d e8 04       \tcmpw   $0x4,-0x18(%rbp)\n  40500a:\t75 15                \tjne    405021 <norm+0x58>\n  40500c:\t66 81 7d fe 00 01    \tcmpw   $0x100,-0x2(%rbp)\n  405012:\t77 28                \tja     40503c <norm+0x73>\n  405014:\t0f b7 45 fe          \tmovzwl -0x2(%rbp),%eax\n  405018:\t83 c0 04             \tadd    $0x4,%eax\n  40501b:\t66 89 45 e8          \tmov    %ax,-0x18(%rbp)\n  40501f:\teb 34                \tjmp    405055 <norm+0x8c>\n  405021:\t66 83 7d e8 03       \tcmpw   $0x3,-0x18(%rbp)\n  405026:\t75 14                \tjne    40503c <norm+0x73>\n  405028:\t66 83 7d fe ff       \tcmpw   $0xffff,-0x2(%rbp)\n  40502d:\t75 0d                \tjne    40503c <norm+0x73>\n  40502f:\t0f b7 45 fe          \tmovzwl -0x2(%rbp),%eax\n  405033:\t83 c0 04             \tadd    $0x4,%eax\n  405036:\t66 89 45 e8          \tmov    %ax,-0x18(%rbp)\n  40503a:\teb 19                \tjmp    405055 <norm+0x8c>\n  40503c:\t0f b7 55 e8          \tmovzwl -0x18(%rbp),%edx\n  405040:\t0f b7 45 fc          \tmovzwl -0x4(%rbp),%eax\n  405044:\t89 d6                \tmov    %edx,%esi\n  405046:\t89 c7                \tmov    %eax,%edi\n  405048:\te8 70 da ff ff       \tcallq  402abd <ram_set_car>\n  40504d:\t0f b7 45 fc          \tmovzwl -0x4(%rbp),%eax\n  405051:\t66 89 45 e8          \tmov    %ax,-0x18(%rbp)\n  405055:\t66 83 7d ec 00       \tcmpw   $0x0,-0x14(%rbp)\n  40505a:\t75 83                \tjne    404fdf <norm+0x16>\n  40505c:\t0f b7 45 e8          \tmovzwl -0x18(%rbp),%eax\n  405060:\tc9                   \tleaveq \n  405061:\tc3                   \tretq   ", "code_s": "__int64 __fastcall norm(unsigned __int16 a1, unsigned __int16 a2) {\n  unsigned __int16 <span class=\"supfact\">v5</span>;\n  unsigned __int16 <span class=\"supfact\">v6</span>;\n  while (a1) {\n    <span class=\"supfact\">v6</span> = integer_lo(a1);\n    <span class=\"supfact\">v5</span> = a1;\n    a1 = integer_hi(a1);\n    if (a2 == Number) {\n      if (<span class=\"supfact\">v6</span> > Number)\n        goto LABEL_8;\n      a2 = <span class=\"supfact\">v6</span> + Number;\n    } else if (a2 == Number && <span class=\"supfact\">v6</span> == Number) {\n      a2 = Number;\n    } else {\n    LABEL_8:\n      ram_set_car(<span class=\"supfact\">v5</span>, a2);\n      a2 = <span class=\"supfact\">v5</span>;\n    }\n  }\n  return a2;\n}", "code_t": "integer __cdecl norm(obj prefix, integer n) {\n  obj <span class=\"supfact\">temp</span>;\n  digit <span class=\"supfact\">d</span>;\n  while (prefix) {\n    <span class=\"supfact\">d</span> = integer_lo(prefix);\n    <span class=\"supfact\">temp</span> = prefix;\n    prefix = integer_hi(prefix);\n    if (n == Number) {\n      if (<span class=\"supfact\">d</span> > Number)\n        goto LABEL_8;\n      n = <span class=\"supfact\">d</span> + Number;\n    } else if (n == Number && <span class=\"supfact\">d</span> == Number) {\n      n = Number;\n    } else {\n    LABEL_8:\n      ram_set_car(<span class=\"supfact\">temp</span>, n);\n      n = <span class=\"supfact\">temp</span>;\n    }\n  }\n  return n;\n}", "var": [{"name": "v6", "type": "uint16_t", "ref_name": "d", "ref_type": "__unk__"}, {"name": "v5", "type": "uint16_t", "ref_name": "temp", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "gbarsever", "repo_name": "in-progress-perp", "path": "gbarsever/in-progress-perp/ce0b5b0cf498980e661ba97e563ff2dd35ec86bf453f8c488b57170f4ecc8a41", "path_in_repo": "gbarsever/in-progress-perp/bhmmi-code/bhmmi-master/gsl-1.16/matrix/minmax.o", "objdump": "0000000000001fc2 <gsl_matrix_uint_minmax>:\n    1fc2:\t55                   \tpush   %rbp\n    1fc3:\t48 89 e5             \tmov    %rsp,%rbp\n    1fc6:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    1fca:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    1fce:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n    1fd2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1fd6:\t48 8b 00             \tmov    (%rax),%rax\n    1fd9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1fdd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1fe1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1fe5:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1fe9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1fed:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1ff1:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    1ff5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1ff9:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1ffd:\t8b 00                \tmov    (%rax),%eax\n    1fff:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    2002:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2006:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    200a:\t8b 00                \tmov    (%rax),%eax\n    200c:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    200f:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    2016:\t00 \n    2017:\teb 61                \tjmp    207a <gsl_matrix_uint_minmax+0xb8>\n    2019:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    2020:\t00 \n    2021:\teb 48                \tjmp    206b <gsl_matrix_uint_minmax+0xa9>\n    2023:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2027:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    202b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    202f:\t48 0f af 45 d0       \timul   -0x30(%rbp),%rax\n    2034:\t48 89 c1             \tmov    %rax,%rcx\n    2037:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    203b:\t48 01 c8             \tadd    %rcx,%rax\n    203e:\t48 c1 e0 02          \tshl    $0x2,%rax\n    2042:\t48 01 d0             \tadd    %rdx,%rax\n    2045:\t8b 00                \tmov    (%rax),%eax\n    2047:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    204a:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    204d:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n    2050:\t73 06                \tjae    2058 <gsl_matrix_uint_minmax+0x96>\n    2052:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    2055:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    2058:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    205b:\t3b 45 fc             \tcmp    -0x4(%rbp),%eax\n    205e:\t76 06                \tjbe    2066 <gsl_matrix_uint_minmax+0xa4>\n    2060:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    2063:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    2066:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n    206b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    206f:\t48 3b 45 d8          \tcmp    -0x28(%rbp),%rax\n    2073:\t72 ae                \tjb     2023 <gsl_matrix_uint_minmax+0x61>\n    2075:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n    207a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    207e:\t48 3b 45 e0          \tcmp    -0x20(%rbp),%rax\n    2082:\t72 95                \tjb     2019 <gsl_matrix_uint_minmax+0x57>\n    2084:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    2088:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    208b:\t89 10                \tmov    %edx,(%rax)\n    208d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2091:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    2094:\t89 10                \tmov    %edx,(%rax)\n    2096:\t90                   \tnop\n    2097:\t5d                   \tpop    %rbp\n    2098:\tc3                   \tretq   ", "code_s": "unsigned int *__fastcall gsl_matrix_uint_minmax(__int64 a1, unsigned int *a2,\n                                                unsigned int *a3) {\n  unsigned int *result;\n  unsigned int <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned __int64 <span class=\"supfact\">j</span>;\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = **(_DWORD **)(a1 + Number);\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">v9</span>;\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> < *(_QWORD *)a1;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number L;\n         <span class=\"supfact\">j</span> < *(_QWORD *)(a1 + Number); ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">v5</span> = *(_QWORD *)(a1 + Number);\n      <span class=\"supfact\">v4</span> =\n          *(_DWORD *)(*(_QWORD *)(a1 + Number) +\n                      Number * (<span class=\"supfact\">v5</span> * <span class=\"supfact\">i</span> +\n                                <span class=\"supfact\">j</span>));\n      if (<span class=\"supfact\">v4</span> < <span class=\"supfact\">v8</span>)\n        <span class=\"supfact\">v8</span> =\n            *(_DWORD *)(*(_QWORD *)(a1 + Number) +\n                        Number * (<span class=\"supfact\">v5</span> * <span class=\"supfact\">i</span> +\n                                  <span class=\"supfact\">j</span>));\n      if (<span class=\"supfact\">v4</span> > <span class=\"supfact\">v9</span>)\n        <span class=\"supfact\">v9</span> =\n            *(_DWORD *)(*(_QWORD *)(a1 + Number) +\n                        Number * (<span class=\"supfact\">v5</span> * <span class=\"supfact\">i</span> +\n                                  <span class=\"supfact\">j</span>));\n    }\n  }\n  *a2 = <span class=\"supfact\">v8</span>;\n  result = a3;\n  *a3 = <span class=\"supfact\">v9</span>;\n  return result;\n}", "code_t": "void __cdecl gsl_matrix_uint_minmax(const gsl_matrix_uint *m,\n                                    unsigned int *min_out,\n                                    unsigned int *max_out) {\n  unsigned int <span class=\"supfact\">x</span>;\n  size_t <span class=\"supfact\">tda</span>;\n  size_t <span class=\"supfact\">j</span>;\n  size_t <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">min</span>;\n  unsigned int <span class=\"supfact\">max</span>;\n  <span class=\"supfact\">max</span> = *m->data;\n  <span class=\"supfact\">min</span> = <span class=\"supfact\">max</span>;\n  for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> < m->size1;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number L; <span class=\"supfact\">j</span> < m->size2;\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">tda</span> = m-><span class=\"supfact\">tda</span>;\n      <span class=\"supfact\">x</span> =\n          m->data[<span class=\"supfact\">tda</span> * <span class=\"supfact\">i</span> + <span class=\"supfact\">j</span>];\n      if (<span class=\"supfact\">x</span> < <span class=\"supfact\">min</span>)\n        <span class=\"supfact\">min</span> = m->data[<span class=\"supfact\">tda</span> * <span class=\"supfact\">i</span> +\n                                      <span class=\"supfact\">j</span>];\n      if (<span class=\"supfact\">x</span> > <span class=\"supfact\">max</span>)\n        <span class=\"supfact\">max</span> = m->data[<span class=\"supfact\">tda</span> * <span class=\"supfact\">i</span> +\n                                      <span class=\"supfact\">j</span>];\n    }\n  }\n  *min_out = <span class=\"supfact\">min</span>;\n  *max_out = <span class=\"supfact\">max</span>;\n}", "var": [{"name": "v9", "type": "unsigned int", "ref_name": "max", "ref_type": "unsigned int"}, {"name": "v8", "type": "unsigned int", "ref_name": "min", "ref_type": "unsigned int"}, {"name": "i", "type": "size_t", "ref_name": "i", "ref_type": "size_t"}, {"name": "j", "type": "size_t", "ref_name": "j", "ref_type": "size_t"}, {"name": "v5", "type": "size_t", "ref_name": "tda", "ref_type": "size_t"}, {"name": "v4", "type": "unsigned int", "ref_name": "x", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "timydaley", "repo_name": "preseq_dev", "path": "timydaley/preseq_dev/3c8769021f51ed4621c8244f700e9083085908d152c6a6cf550dd07689e6f375", "path_in_repo": "timydaley/preseq_dev/smithlab_cpp/GenomicRegion.o", "objdump": "0000000000000000 <_ZN13GenomicRegionaSERKS_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 58          \tsub    $0x58,%rsp\n   9:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n   d:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  11:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n  15:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  19:\t48 89 d6             \tmov    %rdx,%rsi\n  1c:\t48 89 c7             \tmov    %rax,%rdi\n  1f:\te8 00 00 00 00       \tcallq  24 <_ZN13GenomicRegionaSERKS_+0x24>\n  24:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  28:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  2c:\t48 89 d6             \tmov    %rdx,%rsi\n  2f:\t48 89 c7             \tmov    %rax,%rdi\n  32:\te8 00 00 00 00       \tcallq  37 <_ZN13GenomicRegionaSERKS_+0x37>\n  37:\t48 8b 5d a8          \tmov    -0x58(%rbp),%rbx\n  3b:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  3f:\t48 89 c7             \tmov    %rax,%rdi\n  42:\te8 00 00 00 00       \tcallq  47 <_ZN13GenomicRegionaSERKS_+0x47>\n  47:\t48 89 d8             \tmov    %rbx,%rax\n  4a:\t48 83 c4 58          \tadd    $0x58,%rsp\n  4e:\t5b                   \tpop    %rbx\n  4f:\t5d                   \tpop    %rbp\n  50:\tc3                   \tretq   ", "code_s": "GenomicRegion *__fastcall GenomicRegion operator=(GenomicRegion *a1,\n                                                  const GenomicRegion *a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  GenomicRegion GenomicRegion((GenomicRegion *)<span class=\"supfact\">v3</span>, a2);\n  GenomicRegion swap(a1, (GenomicRegion *)<span class=\"supfact\">v3</span>);\n  GenomicRegion ~GenomicRegion((GenomicRegion *)<span class=\"supfact\">v3</span>);\n  return a1;\n}", "code_t": "GenomicRegion *__fastcall GenomicRegion operator=(GenomicRegion *a1,\n                                                  const GenomicRegion *a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  GenomicRegion GenomicRegion((GenomicRegion *)<span class=\"supfact\">v3</span>, a2);\n  GenomicRegion swap(a1, (GenomicRegion *)<span class=\"supfact\">v3</span>);\n  GenomicRegion ~GenomicRegion((GenomicRegion *)<span class=\"supfact\">v3</span>);\n  return a1;\n}", "var": [{"name": "v3", "type": "char[80]", "ref_name": "v3", "ref_type": "char[80]"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7fc6defa16bc99f7600b943ce03c36e881a2bee185a0642a27c64ad0b2c25858", "path_in_repo": "XanClic/qemu//i386-softmmu/gdbstub.o", "objdump": "0000000000004030 <handle_get_reg>:\n    4030:\t55                   \tpush   %rbp\n    4031:\t48 89 e5             \tmov    %rsp,%rbp\n    4034:\t48 83 ec 20          \tsub    $0x20,%rsp\n    4038:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    403c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    4040:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4047 <handle_get_reg+0x17>\n    4047:\t83 f0 01             \txor    $0x1,%eax\n    404a:\t84 c0                \ttest   %al,%al\n    404c:\t74 1b                \tje     4069 <handle_get_reg+0x39>\n    404e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4052:\t48 8b 00             \tmov    (%rax),%rax\n    4055:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 405c <handle_get_reg+0x2c>\n    405c:\t48 89 c7             \tmov    %rax,%rdi\n    405f:\te8 ce db ff ff       \tcallq  1c32 <put_packet>\n    4064:\te9 af 00 00 00       \tjmpq   4118 <handle_get_reg+0xe8>\n    4069:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    406d:\t8b 40 10             \tmov    0x10(%rax),%eax\n    4070:\t85 c0                \ttest   %eax,%eax\n    4072:\t75 1b                \tjne    408f <handle_get_reg+0x5f>\n    4074:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4078:\t48 8b 00             \tmov    (%rax),%rax\n    407b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4082 <handle_get_reg+0x52>\n    4082:\t48 89 c7             \tmov    %rax,%rdi\n    4085:\te8 a8 db ff ff       \tcallq  1c32 <put_packet>\n    408a:\te9 89 00 00 00       \tjmpq   4118 <handle_get_reg+0xe8>\n    408f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4093:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4097:\t48 8b 00             \tmov    (%rax),%rax\n    409a:\t89 c2                \tmov    %eax,%edx\n    409c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    40a0:\t48 8d 48 14          \tlea    0x14(%rax),%rcx\n    40a4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    40a8:\t48 8b 00             \tmov    (%rax),%rax\n    40ab:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    40af:\t48 89 ce             \tmov    %rcx,%rsi\n    40b2:\t48 89 c7             \tmov    %rax,%rdi\n    40b5:\te8 94 e4 ff ff       \tcallq  254e <gdb_read_register>\n    40ba:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    40bd:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    40c1:\t75 18                \tjne    40db <handle_get_reg+0xab>\n    40c3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    40c7:\t48 8b 00             \tmov    (%rax),%rax\n    40ca:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 40d1 <handle_get_reg+0xa1>\n    40d1:\t48 89 c7             \tmov    %rax,%rdi\n    40d4:\te8 59 db ff ff       \tcallq  1c32 <put_packet>\n    40d9:\teb 3d                \tjmp    4118 <handle_get_reg+0xe8>\n    40db:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    40df:\t48 8d 70 14          \tlea    0x14(%rax),%rsi\n    40e3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    40e7:\t48 8d 88 14 10 00 00 \tlea    0x1014(%rax),%rcx\n    40ee:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    40f1:\t89 c2                \tmov    %eax,%edx\n    40f3:\t48 89 cf             \tmov    %rcx,%rdi\n    40f6:\te8 50 d7 ff ff       \tcallq  184b <memtohex>\n    40fb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    40ff:\t48 8d 90 14 10 00 00 \tlea    0x1014(%rax),%rdx\n    4106:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    410a:\t48 8b 00             \tmov    (%rax),%rax\n    410d:\t48 89 d6             \tmov    %rdx,%rsi\n    4110:\t48 89 c7             \tmov    %rax,%rdi\n    4113:\te8 1a db ff ff       \tcallq  1c32 <put_packet>\n    4118:\tc9                   \tleaveq \n    4119:\tc3                   \tretq   ", "code_s": "__int64 __fastcall handle_get_reg(__int64 a1) {\n  int <span class=\"supfact\">v2</span>;\n  if (gdb_has_xml != Number)\n    return put_packet(*(_QWORD *)a1, (char *)&unk_76B0);\n  if (!*(_DWORD *)(a1 + Number))\n    return put_packet(*(_QWORD *)a1, String);\n  <span class=\"supfact\">v2</span> =\n      gdb_read_register(*(_QWORD *)(*(_QWORD *)a1 + Number L), a1 + Number,\n                        **(_QWORD **)(a1 + Number));\n  if (!<span class=\"supfact\">v2</span>)\n    return put_packet(*(_QWORD *)a1, String);\n  memtohex((_BYTE *)(a1 + Number), a1 + Number, <span class=\"supfact\">v2</span>);\n  return put_packet(*(_QWORD *)a1, (char *)(a1 + Number));\n}", "code_t": "void __cdecl handle_get_reg(GdbCmdContext_0 *gdb_ctx, void *user_ctx) {\n  int <span class=\"supfact\">reg_size</span>;\n  if (!gdb_has_xml) {\n    put_packet(gdb_ctx->s, &buf);\n  } else if (gdb_ctx->num_params &&\n             (<span class=\"supfact\">reg_size</span> =\n                  gdb_read_register(gdb_ctx->s->g_cpu, gdb_ctx->mem_buf,\n                                    *(_QWORD *)gdb_ctx->params)) != Number) {\n    memtohex(gdb_ctx->str_buf, gdb_ctx->mem_buf, <span class=\"supfact\">reg_size</span>);\n    put_packet(gdb_ctx->s, gdb_ctx->str_buf);\n  } else {\n    put_packet(gdb_ctx->s, String);\n  }\n}", "var": [{"name": "v2", "type": "int", "ref_name": "reg_size", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "HarveyHunt", "repo_name": "linux", "path": "HarveyHunt/linux/7ad3397c928e3369b06392bddb7b8b5a6690656dd979cd91cd351b99ecb02012", "path_in_repo": "HarveyHunt/linux/tools/perf/util/auxtrace.o", "objdump": "0000000000000a7d <auxtrace_mmap__mmap>:\n     a7d:\t55                   \tpush   %rbp\n     a7e:\t48 89 e5             \tmov    %rsp,%rbp\n     a81:\t48 83 ec 40          \tsub    $0x40,%rsp\n     a85:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     a89:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     a8d:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     a91:\t89 4d c4             \tmov    %ecx,-0x3c(%rbp)\n     a94:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     a9b:\t00 00 \n     a9d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     aa1:\t31 c0                \txor    %eax,%eax\n     aa3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     aa7:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     aab:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     aaf:\t48 8b 00             \tmov    (%rax),%rax\n     ab2:\t48 85 c0             \ttest   %rax,%rax\n     ab5:\t0f 95 c0             \tsetne  %al\n     ab8:\t0f b6 c0             \tmovzbl %al,%eax\n     abb:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n     abe:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n     ac2:\t0f 95 c0             \tsetne  %al\n     ac5:\t0f b6 c0             \tmovzbl %al,%eax\n     ac8:\t48 85 c0             \ttest   %rax,%rax\n     acb:\t74 57                \tje     b24 <auxtrace_mmap__mmap+0xa7>\n     acd:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # ad3 <auxtrace_mmap__mmap+0x56>\n     ad3:\t85 c0                \ttest   %eax,%eax\n     ad5:\t0f 94 c0             \tsete   %al\n     ad8:\t0f b6 c0             \tmovzbl %al,%eax\n     adb:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     ade:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     ae2:\t0f 95 c0             \tsetne  %al\n     ae5:\t0f b6 c0             \tmovzbl %al,%eax\n     ae8:\t48 85 c0             \ttest   %rax,%rax\n     aeb:\t74 1e                \tje     b0b <auxtrace_mmap__mmap+0x8e>\n     aed:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # af4 <auxtrace_mmap__mmap+0x77>\n     af4:\t48 89 c1             \tmov    %rax,%rcx\n     af7:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n     afc:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     b01:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     b06:\te8 00 00 00 00       \tcallq  b0b <auxtrace_mmap__mmap+0x8e>\n     b0b:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     b0f:\t0f 95 c0             \tsetne  %al\n     b12:\t0f b6 c0             \tmovzbl %al,%eax\n     b15:\t48 85 c0             \ttest   %rax,%rax\n     b18:\t74 0a                \tje     b24 <auxtrace_mmap__mmap+0xa7>\n     b1a:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # b24 <auxtrace_mmap__mmap+0xa7>\n     b21:\t00 00 00 \n     b24:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n     b28:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b2c:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     b30:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n     b34:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b38:\t48 8b 10             \tmov    (%rax),%rdx\n     b3b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b3f:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     b43:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b47:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n     b4b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b4f:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n     b53:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b57:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n     b5e:\t00 \n     b5f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b63:\t8b 50 1c             \tmov    0x1c(%rax),%edx\n     b66:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b6a:\t89 50 28             \tmov    %edx,0x28(%rax)\n     b6d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b71:\t8b 50 20             \tmov    0x20(%rax),%edx\n     b74:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b78:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n     b7b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b7f:\t8b 50 24             \tmov    0x24(%rax),%edx\n     b82:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b86:\t89 50 30             \tmov    %edx,0x30(%rax)\n     b89:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b8d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     b91:\t48 85 c0             \ttest   %rax,%rax\n     b94:\t75 15                \tjne    bab <auxtrace_mmap__mmap+0x12e>\n     b96:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b9a:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     ba1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ba6:\te9 a2 00 00 00       \tjmpq   c4d <auxtrace_mmap__mmap+0x1d0>\n     bab:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     baf:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     bb3:\t48 89 c2             \tmov    %rax,%rdx\n     bb6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     bba:\t48 89 90 30 04 00 00 \tmov    %rdx,0x430(%rax)\n     bc1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     bc5:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n     bc9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     bcd:\t48 89 90 38 04 00 00 \tmov    %rdx,0x438(%rax)\n     bd4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     bd8:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n     bdc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     be0:\t8b 50 18             \tmov    0x18(%rax),%edx\n     be3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     be7:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     beb:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n     bee:\t49 89 f1             \tmov    %rsi,%r9\n     bf1:\t41 89 c8             \tmov    %ecx,%r8d\n     bf4:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n     bf9:\t48 89 c6             \tmov    %rax,%rsi\n     bfc:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c01:\te8 00 00 00 00       \tcallq  c06 <auxtrace_mmap__mmap+0x189>\n     c06:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     c0a:\t48 89 02             \tmov    %rax,(%rdx)\n     c0d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c11:\t48 8b 00             \tmov    (%rax),%rax\n     c14:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n     c18:\t75 2e                \tjne    c48 <auxtrace_mmap__mmap+0x1cb>\n     c1a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # c20 <auxtrace_mmap__mmap+0x1a3>\n     c20:\tba 00 00 00 00       \tmov    $0x0,%edx\n     c25:\t89 c6                \tmov    %eax,%esi\n     c27:\tbf 02 00 00 00       \tmov    $0x2,%edi\n     c2c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c31:\te8 00 00 00 00       \tcallq  c36 <auxtrace_mmap__mmap+0x1b9>\n     c36:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c3a:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     c41:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     c46:\teb 05                \tjmp    c4d <auxtrace_mmap__mmap+0x1d0>\n     c48:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c4d:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n     c51:\t64 48 33 3c 25 28 00 \txor    %fs:0x28,%rdi\n     c58:\t00 00 \n     c5a:\t74 05                \tje     c61 <auxtrace_mmap__mmap+0x1e4>\n     c5c:\te8 00 00 00 00       \tcallq  c61 <auxtrace_mmap__mmap+0x1e4>\n     c61:\tc9                   \tleaveq \n     c62:\tc3                   \tretq   ", "code_s": "__int64 __fastcall auxtrace_mmap__mmap(__int64 a1, __int64 a2, __int64 a3,\n                                       int a4) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v6</span>;\n  _BOOL4 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v6</span> = a3;\n  if (*(_QWORD *)a1) {\n    <span class=\"supfact\">v7</span> = _warned_12787 == Number;\n    if (!_warned_12787)\n      fwrite(String, Number, Number, stderr);\n    if (<span class=\"supfact\">v7</span>)\n      _warned_12787 = Number;\n  }\n  *(_QWORD *)(a1 + Number) = <span class=\"supfact\">v6</span>;\n  *(_QWORD *)(a1 + Number) = *(_QWORD *)a2;\n  *(_QWORD *)(a1 + Number) = *(_QWORD *)(a2 + Number);\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_DWORD *)(a1 + Number) = *(_DWORD *)(a2 + Number);\n  *(_DWORD *)(a1 + Number) = *(_DWORD *)(a2 + Number);\n  *(_DWORD *)(a1 + Number) = *(_DWORD *)(a2 + Number);\n  if (*(_QWORD *)(a2 + Number)) {\n    *(_QWORD *)(a3 + Number) = *(_QWORD *)(a2 + Number);\n    *(_QWORD *)(a3 + Number) = *(_QWORD *)(a2 + Number);\n    *(_QWORD *)a1 =\n        mmap64(Number L, *(_QWORD *)(a2 + Number), *(_DWORD *)(a2 + Number),\n               Number, a4, *(_QWORD *)(a2 + Number));\n    if (*(_QWORD *)a1 == Number) {\n      eprintf(Number L, verbose, String);\n      *(_QWORD *)a1 = Number L;\n      result = Number;\n    } else {\n      result = Number L;\n    }\n  } else {\n    *(_QWORD *)a1 = Number L;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl auxtrace_mmap__mmap(auxtrace_mmap *mm, auxtrace_mmap_params *mp,\n                                void *userpg, int fd) {\n  int result;\n  void *<span class=\"supfact\">userpga</span>;\n  int <span class=\"supfact\">__ret_warn_on</span>;\n  <span class=\"supfact\">userpga</span> = userpg;\n  if (mm->base) {\n    <span class=\"supfact\">__ret_warn_on</span> = _warned_12787 == Number;\n    if (!_warned_12787)\n      fwrite(String, Number, Number, stderr);\n    if (<span class=\"supfact\">__ret_warn_on</span>)\n      _warned_12787 = Number;\n  }\n  mm->userpg = <span class=\"supfact\">userpga</span>;\n  mm->mask = mp->mask;\n  mm->len = mp->len;\n  mm->prev = Number L;\n  mm->idx = mp->idx;\n  mm->tid = mp->tid;\n  mm->cpu = mp->cpu;\n  if (mp->len) {\n    *((_QWORD *)userpg + Number) = mp->offset;\n    *((_QWORD *)userpg + Number) = mp->len;\n    mm->base = mmap64(Number L, mp->len, mp->prot, Number, fd, mp->offset);\n    if (mm->base == (void *)Number) {\n      eprintf(Number L, verbose, String);\n      mm->base = Number L;\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else {\n    mm->base = Number L;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v7", "type": "int", "ref_name": "__ret_warn_on", "ref_type": "int"}, {"name": "v6", "type": "char *", "ref_name": "userpga", "ref_type": "void *"}], "body_in_train": false}, {"repo_owner": "jasonLaster", "repo_name": "team7", "path": "jasonLaster/team7/15c5f48d20326430ca82f626c7022155bf5c6b79147d4cf1ca8eaf1cc2b46867", "path_in_repo": "jasonLaster/team7/src/load.o", "objdump": "0000000000000000 <song_length>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n   b:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  12:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  16:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n  1b:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  1f:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n  24:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  28:\tf2 0f 11 45 e8       \tmovsd  %xmm0,-0x18(%rbp)\n  2d:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  34:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  3b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40:\t48 89 c7             \tmov    %rax,%rdi\n  43:\te8 00 00 00 00       \tcallq  48 <song_length+0x48>\n  48:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  4c:\te9 fa 01 00 00       \tjmpq   24b <song_length+0x24b>\n  51:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n  58:\t3c 20                \tcmp    $0x20,%al\n  5a:\t74 0f                \tje     6b <song_length+0x6b>\n  5c:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n  63:\t3c 0a                \tcmp    $0xa,%al\n  65:\t0f 85 82 00 00 00    \tjne    ed <song_length+0xed>\n  6b:\t83 7d e4 01          \tcmpl   $0x1,-0x1c(%rbp)\n  6f:\t75 7c                \tjne    ed <song_length+0xed>\n  71:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  75:\t66 0f 2e 45 f0       \tucomisd -0x10(%rbp),%xmm0\n  7a:\t7a 1a                \tjp     96 <song_length+0x96>\n  7c:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  80:\t66 0f 2e 45 f0       \tucomisd -0x10(%rbp),%xmm0\n  85:\t75 0f                \tjne    96 <song_length+0x96>\n  87:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 8f <song_length+0x8f>\n  8e:\t00 \n  8f:\tf2 0f 5e 45 e8       \tdivsd  -0x18(%rbp),%xmm0\n  94:\teb 0d                \tjmp    a3 <song_length+0xa3>\n  96:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 9e <song_length+0x9e>\n  9d:\t00 \n  9e:\tf2 0f 5e 45 f0       \tdivsd  -0x10(%rbp),%xmm0\n  a3:\tf2 0f 10 4d f8       \tmovsd  -0x8(%rbp),%xmm1\n  a8:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n  ac:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n  b1:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  b5:\t66 0f 2e 45 f0       \tucomisd -0x10(%rbp),%xmm0\n  ba:\t7a 12                \tjp     ce <song_length+0xce>\n  bc:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  c0:\t66 0f 2e 45 f0       \tucomisd -0x10(%rbp),%xmm0\n  c5:\t75 07                \tjne    ce <song_length+0xce>\n  c7:\tf2 0f 10 45 e8       \tmovsd  -0x18(%rbp),%xmm0\n  cc:\teb 05                \tjmp    d3 <song_length+0xd3>\n  ce:\tf2 0f 10 45 f0       \tmovsd  -0x10(%rbp),%xmm0\n  d3:\tf2 0f 11 45 e8       \tmovsd  %xmm0,-0x18(%rbp)\n  d8:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  dc:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n  e1:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  e8:\te9 5e 01 00 00       \tjmpq   24b <song_length+0x24b>\n  ed:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n  f4:\t3c 2e                \tcmp    $0x2e,%al\n  f6:\t75 1b                \tjne    113 <song_length+0x113>\n  f8:\tf2 0f 10 45 f0       \tmovsd  -0x10(%rbp),%xmm0\n  fd:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 105 <song_length+0x105>\n 104:\t00 \n 105:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n 109:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n 10e:\te9 38 01 00 00       \tjmpq   24b <song_length+0x24b>\n 113:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 11a:\t3c 5c                \tcmp    $0x5c,%al\n 11c:\t75 78                \tjne    196 <song_length+0x196>\n 11e:\t48 8d b5 65 ff ff ff \tlea    -0x9b(%rbp),%rsi\n 125:\t48 8d 8d 66 ff ff ff \tlea    -0x9a(%rbp),%rcx\n 12c:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n 133:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 137:\t49 89 f0             \tmov    %rsi,%r8\n 13a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 13f:\t48 89 c7             \tmov    %rax,%rdi\n 142:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 147:\te8 00 00 00 00       \tcallq  14c <song_length+0x14c>\n 14c:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 153:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 158:\t48 89 c7             \tmov    %rax,%rdi\n 15b:\te8 00 00 00 00       \tcallq  160 <song_length+0x160>\n 160:\t85 c0                \ttest   %eax,%eax\n 162:\t75 0f                \tjne    173 <song_length+0x173>\n 164:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 16b:\t3c 7b                \tcmp    $0x7b,%al\n 16d:\t0f 84 d8 00 00 00    \tje     24b <song_length+0x24b>\n 173:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 17a <song_length+0x17a>\n 17a:\t48 89 c1             \tmov    %rax,%rcx\n 17d:\tba 13 00 00 00       \tmov    $0x13,%edx\n 182:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 187:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 18c:\te8 00 00 00 00       \tcallq  191 <song_length+0x191>\n 191:\te9 b5 00 00 00       \tjmpq   24b <song_length+0x24b>\n 196:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n 19a:\t75 2a                \tjne    1c6 <song_length+0x1c6>\n 19c:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 1a3:\t3c 60                \tcmp    $0x60,%al\n 1a5:\t7e 0b                \tjle    1b2 <song_length+0x1b2>\n 1a7:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 1ae:\t3c 67                \tcmp    $0x67,%al\n 1b0:\t7e 0b                \tjle    1bd <song_length+0x1bd>\n 1b2:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 1b9:\t3c 72                \tcmp    $0x72,%al\n 1bb:\t75 09                \tjne    1c6 <song_length+0x1c6>\n 1bd:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n 1c1:\te9 85 00 00 00       \tjmpq   24b <song_length+0x24b>\n 1c6:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 1cd:\t3c 2f                \tcmp    $0x2f,%al\n 1cf:\t7e 39                \tjle    20a <song_length+0x20a>\n 1d1:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 1d8:\t3c 39                \tcmp    $0x39,%al\n 1da:\t7f 2e                \tjg     20a <song_length+0x20a>\n 1dc:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 1e0:\t66 0f 2e 45 f0       \tucomisd -0x10(%rbp),%xmm0\n 1e5:\t7a 23                \tjp     20a <song_length+0x20a>\n 1e7:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 1eb:\t66 0f 2e 45 f0       \tucomisd -0x10(%rbp),%xmm0\n 1f0:\t75 18                \tjne    20a <song_length+0x20a>\n 1f2:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 1f9:\t0f be c0             \tmovsbl %al,%eax\n 1fc:\t83 e8 30             \tsub    $0x30,%eax\n 1ff:\tf2 0f 2a c0          \tcvtsi2sd %eax,%xmm0\n 203:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n 208:\teb 41                \tjmp    24b <song_length+0x24b>\n 20a:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 211:\t3c 2f                \tcmp    $0x2f,%al\n 213:\t7e 36                \tjle    24b <song_length+0x24b>\n 215:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 21c:\t3c 39                \tcmp    $0x39,%al\n 21e:\t7f 2b                \tjg     24b <song_length+0x24b>\n 220:\tf2 0f 10 4d f0       \tmovsd  -0x10(%rbp),%xmm1\n 225:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 22d <song_length+0x22d>\n 22c:\t00 \n 22d:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n 231:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 238:\t0f be c0             \tmovsbl %al,%eax\n 23b:\t83 e8 30             \tsub    $0x30,%eax\n 23e:\tf2 0f 2a c0          \tcvtsi2sd %eax,%xmm0\n 242:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n 246:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n 24b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 24f:\t48 89 c7             \tmov    %rax,%rdi\n 252:\te8 00 00 00 00       \tcallq  257 <song_length+0x257>\n 257:\t88 85 65 ff ff ff    \tmov    %al,-0x9b(%rbp)\n 25d:\t0f b6 85 65 ff ff ff \tmovzbl -0x9b(%rbp),%eax\n 264:\t3c ff                \tcmp    $0xff,%al\n 266:\t0f 85 e5 fd ff ff    \tjne    51 <song_length+0x51>\n 26c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 270:\t48 89 c7             \tmov    %rax,%rdi\n 273:\te8 00 00 00 00       \tcallq  278 <song_length+0x278>\n 278:\tf2 0f 10 4d f8       \tmovsd  -0x8(%rbp),%xmm1\n 27d:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 285 <song_length+0x285>\n 284:\t00 \n 285:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n 289:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 291 <song_length+0x291>\n 290:\t00 \n 291:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n 295:\tf2 0f 2c c0          \tcvttsd2si %xmm0,%eax\n 299:\tc9                   \tleaveq \n 29a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall song_length(const char *a1) {\n  double v1;\n  double v2;\n  char <span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>;\n  char <span class=\"supfact\">s1</span>[Number];\n  FILE *<span class=\"supfact\">stream</span>;\n  int <span class=\"supfact\">v8</span>;\n  double <span class=\"supfact\">v9</span>;\n  double <span class=\"supfact\">v10</span>;\n  double <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = Number;\n  <span class=\"supfact\">v10</span> = Number;\n  <span class=\"supfact\">v9</span> = Number;\n  <span class=\"supfact\">v8</span> = Number;\n  <span class=\"supfact\">stream</span> = fopen(a1, String);\n  while (Number) {\n    <span class=\"supfact\">v4</span> = fgetc(<span class=\"supfact\">stream</span>);\n    if (<span class=\"supfact\">v4</span> == Number)\n      break;\n    if ((<span class=\"supfact\">v4</span> == Number || <span class=\"supfact\">v4</span> == Number) &&\n        <span class=\"supfact\">v8</span> == Number) {\n      if (<span class=\"supfact\">v10</span> == Number)\n        v1 = Number / <span class=\"supfact\">v9</span>;\n      else\n        v1 = Number / <span class=\"supfact\">v10</span>;\n      <span class=\"supfact\">v11</span> = v1 + <span class=\"supfact\">v11</span>;\n      if (<span class=\"supfact\">v10</span> == Number)\n        v2 = <span class=\"supfact\">v9</span>;\n      else\n        v2 = <span class=\"supfact\">v10</span>;\n      <span class=\"supfact\">v9</span> = v2;\n      <span class=\"supfact\">v10</span> = Number;\n      <span class=\"supfact\">v8</span> = Number;\n    } else if (<span class=\"supfact\">v4</span> == Number) {\n      <span class=\"supfact\">v10</span> = <span class=\"supfact\">v10</span> / Number;\n    } else if (<span class=\"supfact\">v4</span> == Number) {\n      _isoc99_fscanf(<span class=\"supfact\">stream</span>, String, <span class=\"supfact\">s1</span>,\n                     &<span class=\"supfact\">v5</span>, &<span class=\"supfact\">v4</span>);\n      if (strcmp(<span class=\"supfact\">s1</span>, String) || <span class=\"supfact\">v4</span> != Number)\n        fwrite(String, Number, Number, stderr);\n    } else if (<span class=\"supfact\">v8</span> ||\n               (<span class=\"supfact\">v4</span> <= Number || <span class=\"supfact\">v4</span> > Number) &&\n                   <span class=\"supfact\">v4</span> != Number) {\n      if (<span class=\"supfact\">v4</span> > Number && <span class=\"supfact\">v4</span> <= Number &&\n          <span class=\"supfact\">v10</span> == Number) {\n        <span class=\"supfact\">v10</span> = (double)(<span class=\"supfact\">v4</span> - Number);\n      } else if (<span class=\"supfact\">v4</span> > Number && <span class=\"supfact\">v4</span> <= Number) {\n        <span class=\"supfact\">v10</span> = (double)(<span class=\"supfact\">v4</span> - Number) +\n                              <span class=\"supfact\">v10</span> * Number;\n      }\n    } else {\n      ++<span class=\"supfact\">v8</span>;\n    }\n  }\n  fclose(<span class=\"supfact\">stream</span>);\n  return (unsigned int)(int)(Number * (<span class=\"supfact\">v11</span> * Number));\n}", "code_t": "int __cdecl song_length(char *const file) {\n  double v1;\n  double v2;\n  char <span class=\"supfact\">c</span>;\n  char <span class=\"supfact\">relative_note</span>[Number];\n  char <span class=\"supfact\">relative</span>[Number];\n  FILE *<span class=\"supfact\">song_file</span>;\n  int <span class=\"supfact\">shift</span>;\n  double <span class=\"supfact\">prev</span>;\n  double <span class=\"supfact\">number</span>;\n  double <span class=\"supfact\">tot_len</span>;\n  <span class=\"supfact\">tot_len</span> = Number;\n  <span class=\"supfact\">number</span> = Number;\n  <span class=\"supfact\">prev</span> = Number;\n  <span class=\"supfact\">shift</span> = Number;\n  <span class=\"supfact\">song_file</span> = fopen(file, String);\n  while (Number) {\n    <span class=\"supfact\">c</span> = fgetc(<span class=\"supfact\">song_file</span>);\n    if (<span class=\"supfact\">c</span> == Number)\n      break;\n    if ((<span class=\"supfact\">c</span> == Number || <span class=\"supfact\">c</span> == Number) &&\n        <span class=\"supfact\">shift</span> == Number) {\n      if (<span class=\"supfact\">number</span> == Number)\n        v1 = Number / <span class=\"supfact\">prev</span>;\n      else\n        v1 = Number / <span class=\"supfact\">number</span>;\n      <span class=\"supfact\">tot_len</span> = v1 + <span class=\"supfact\">tot_len</span>;\n      if (<span class=\"supfact\">number</span> == Number)\n        v2 = <span class=\"supfact\">prev</span>;\n      else\n        v2 = <span class=\"supfact\">number</span>;\n      <span class=\"supfact\">prev</span> = v2;\n      <span class=\"supfact\">number</span> = Number;\n      <span class=\"supfact\">shift</span> = Number;\n    } else if (<span class=\"supfact\">c</span> == Number) {\n      <span class=\"supfact\">number</span> = <span class=\"supfact\">number</span> / Number;\n    } else if (<span class=\"supfact\">c</span> == Number) {\n      _isoc99_fscanf(<span class=\"supfact\">song_file</span>, String,\n                     <span class=\"supfact\">relative</span>, <span class=\"supfact\">relative_note</span>,\n                     &<span class=\"supfact\">c</span>);\n      if (strcmp(<span class=\"supfact\">relative</span>, String) ||\n          <span class=\"supfact\">c</span> != Number)\n        fwrite(String, Number, Number, stderr);\n    } else if (<span class=\"supfact\">shift</span> ||\n               (<span class=\"supfact\">c</span> <= Number || <span class=\"supfact\">c</span> > Number) &&\n                   <span class=\"supfact\">c</span> != Number) {\n      if (<span class=\"supfact\">c</span> > Number && <span class=\"supfact\">c</span> <= Number &&\n          <span class=\"supfact\">number</span> == Number) {\n        <span class=\"supfact\">number</span> = (double)(<span class=\"supfact\">c</span> - Number);\n      } else if (<span class=\"supfact\">c</span> > Number && <span class=\"supfact\">c</span> <= Number) {\n        <span class=\"supfact\">number</span> = (double)(<span class=\"supfact\">c</span> - Number) +\n                                 <span class=\"supfact\">number</span> * Number;\n      }\n    } else {\n      ++<span class=\"supfact\">shift</span>;\n    }\n  }\n  fclose(<span class=\"supfact\">song_file</span>);\n  return (int)(Number * (<span class=\"supfact\">tot_len</span> * Number));\n}", "var": [{"name": "v11", "type": "double", "ref_name": "tot_len", "ref_type": "double"}, {"name": "v10", "type": "double", "ref_name": "number", "ref_type": "double"}, {"name": "v9", "type": "double", "ref_name": "prev", "ref_type": "double"}, {"name": "v8", "type": "int", "ref_name": "shift", "ref_type": "int"}, {"name": "stream", "type": "FILE *", "ref_name": "song_file", "ref_type": "FILE *"}, {"name": "s1", "type": "char[100]", "ref_name": "relative", "ref_type": "char[100]"}, {"name": "v5", "type": "char", "ref_name": "relative_note", "ref_type": "char[10]"}, {"name": "v4", "type": "char", "ref_name": "c", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/6c109ee8615b3c4636bc06088f0cd44c1335e2214274efae2b6306a1c03858f7", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/saturn/saturn.o", "objdump": "0000000000003027 <_ZL19saturn_load_nibblesP13_saturn_stateiiii>:\n    3027:\t55                   \tpush   %rbp\n    3028:\t48 89 e5             \tmov    %rsp,%rbp\n    302b:\t53                   \tpush   %rbx\n    302c:\t48 83 ec 38          \tsub    $0x38,%rsp\n    3030:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    3034:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n    3037:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n    303a:\t89 4d cc             \tmov    %ecx,-0x34(%rbp)\n    303d:\t44 89 45 c8          \tmov    %r8d,-0x38(%rbp)\n    3041:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    3045:\t78 06                \tjs     304d <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0x26>\n    3047:\t83 7d d4 08          \tcmpl   $0x8,-0x2c(%rbp)\n    304b:\t7e 42                \tjle    308f <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0x68>\n    304d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3051:\t8b 98 a0 00 00 00    \tmov    0xa0(%rax),%ebx\n    3057:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    305b:\t48 8b 80 e8 00 00 00 \tmov    0xe8(%rax),%rax\n    3062:\t48 89 c7             \tmov    %rax,%rdi\n    3065:\te8 00 00 00 00       \tcallq  306a <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0x43>\n    306a:\t41 89 d9             \tmov    %ebx,%r9d\n    306d:\t41 b8 e4 02 00 00    \tmov    $0x2e4,%r8d\n    3073:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    3078:\tba 00 00 00 00       \tmov    $0x0,%edx\n    307d:\t48 89 c6             \tmov    %rax,%rsi\n    3080:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3085:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    308a:\te8 00 00 00 00       \tcallq  308f <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0x68>\n    308f:\t83 7d c8 00          \tcmpl   $0x0,-0x38(%rbp)\n    3093:\t78 06                \tjs     309b <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0x74>\n    3095:\t83 7d c8 01          \tcmpl   $0x1,-0x38(%rbp)\n    3099:\t7e 42                \tjle    30dd <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0xb6>\n    309b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    309f:\t8b 98 a0 00 00 00    \tmov    0xa0(%rax),%ebx\n    30a5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    30a9:\t48 8b 80 e8 00 00 00 \tmov    0xe8(%rax),%rax\n    30b0:\t48 89 c7             \tmov    %rax,%rdi\n    30b3:\te8 00 00 00 00       \tcallq  30b8 <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0x91>\n    30b8:\t41 89 d9             \tmov    %ebx,%r9d\n    30bb:\t41 b8 e5 02 00 00    \tmov    $0x2e5,%r8d\n    30c1:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    30c6:\tba 00 00 00 00       \tmov    $0x0,%edx\n    30cb:\t48 89 c6             \tmov    %rax,%rsi\n    30ce:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    30d3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    30d8:\te8 00 00 00 00       \tcallq  30dd <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0xb6>\n    30dd:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n    30e1:\t78 13                \tjs     30f6 <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0xcf>\n    30e3:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    30e7:\t78 0d                \tjs     30f6 <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0xcf>\n    30e9:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n    30ec:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    30ef:\t01 d0                \tadd    %edx,%eax\n    30f1:\t83 f8 10             \tcmp    $0x10,%eax\n    30f4:\t7e 42                \tjle    3138 <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0x111>\n    30f6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    30fa:\t8b 98 a0 00 00 00    \tmov    0xa0(%rax),%ebx\n    3100:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3104:\t48 8b 80 e8 00 00 00 \tmov    0xe8(%rax),%rax\n    310b:\t48 89 c7             \tmov    %rax,%rdi\n    310e:\te8 00 00 00 00       \tcallq  3113 <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0xec>\n    3113:\t41 89 d9             \tmov    %ebx,%r9d\n    3116:\t41 b8 e6 02 00 00    \tmov    $0x2e6,%r8d\n    311c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    3121:\tba 00 00 00 00       \tmov    $0x0,%edx\n    3126:\t48 89 c6             \tmov    %rax,%rsi\n    3129:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    312e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3133:\te8 00 00 00 00       \tcallq  3138 <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0x111>\n    3138:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    313f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    3142:\t3b 45 cc             \tcmp    -0x34(%rbp),%eax\n    3145:\t7d 6b                \tjge    31b2 <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0x18b>\n    3147:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    314b:\t8b 55 c8             \tmov    -0x38(%rbp),%edx\n    314e:\t48 63 d2             \tmovslq %edx,%rdx\n    3151:\t48 83 c2 24          \tadd    $0x24,%rdx\n    3155:\t8b 54 90 08          \tmov    0x8(%rax,%rdx,4),%edx\n    3159:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    315c:\t01 c2                \tadd    %eax,%edx\n    315e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3162:\t89 d6                \tmov    %edx,%esi\n    3164:\t48 89 c7             \tmov    %rax,%rdi\n    3167:\te8 3f d2 ff ff       \tcallq  3ab <_ZL11READ_NIBBLEP13_saturn_statej>\n    316c:\t89 c1                \tmov    %eax,%ecx\n    316e:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n    3171:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    3174:\t01 d0                \tadd    %edx,%eax\n    3176:\t89 ce                \tmov    %ecx,%esi\n    3178:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    317c:\t48 98                \tcltq   \n    317e:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n    3181:\t48 63 c9             \tmovslq %ecx,%rcx\n    3184:\t48 c1 e1 04          \tshl    $0x4,%rcx\n    3188:\t48 01 ca             \tadd    %rcx,%rdx\n    318b:\t48 01 d0             \tadd    %rdx,%rax\n    318e:\t48 83 c0 08          \tadd    $0x8,%rax\n    3192:\t40 88 30             \tmov    %sil,(%rax)\n    3195:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3199:\t8b 80 00 01 00 00    \tmov    0x100(%rax),%eax\n    319f:\t8d 50 fe             \tlea    -0x2(%rax),%edx\n    31a2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    31a6:\t89 90 00 01 00 00    \tmov    %edx,0x100(%rax)\n    31ac:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    31b0:\teb 8d                \tjmp    313f <_ZL19saturn_load_nibblesP13_saturn_stateiiii+0x118>\n    31b2:\t90                   \tnop\n    31b3:\t48 83 c4 38          \tadd    $0x38,%rsp\n    31b7:\t5b                   \tpop    %rbx\n    31b8:\t5d                   \tpop    %rbp\n    31b9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall saturn_load_nibbles(__int64 a1, int a2, int a3, int a4,\n                                       int a5) {\n  unsigned int v5;\n  const char *v6;\n  unsigned int v7;\n  const char *v8;\n  unsigned int v9;\n  const char *v10;\n  __int64 result;\n  int <span class=\"supfact\">i</span>;\n  if (a2 < Number || a2 > Number) {\n    v5 = *(_DWORD *)(a1 + Number);\n    v6 = (const char *)device_t tag(*(device_t **)(a1 + Number));\n    logerror(String, v6, String, String, Number L, v5);\n  }\n  if (a5 < Number || a5 > Number) {\n    v7 = *(_DWORD *)(a1 + Number);\n    v8 = (const char *)device_t tag(*(device_t **)(a1 + Number));\n    logerror(String, v8, String, String, Number L, v7);\n  }\n  if (a3 < Number || a4 < Number || a3 + a4 > Number) {\n    v9 = *(_DWORD *)(a1 + Number);\n    v10 = (const char *)device_t tag(*(device_t **)(a1 + Number));\n    logerror(String, v10, String, String, Number L, v9);\n  }\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = (unsigned int)<span class=\"supfact\">i</span>;\n    if (<span class=\"supfact\">i</span> >= a4)\n      break;\n    *(_BYTE *)(Number L * a2 + a1 + a3 + <span class=\"supfact\">i</span> + Number) =\n        READ_NIBBLE(a1,\n                    <span class=\"supfact\">i</span> +\n                        *(_DWORD *)(a1 + Number * (a5 + Number L) + Number));\n    *(_DWORD *)(a1 + Number) -= Number;\n  }\n  return result;\n}", "code_t": "void __cdecl saturn_load_nibbles(saturn_state *cpustate, int reg, int begin,\n                                 int count, int adr) {\n  SaturnAdr v5;\n  const char *v6;\n  SaturnAdr v7;\n  const char *v8;\n  SaturnAdr v9;\n  const char *v10;\n  int <span class=\"supfact\">i</span>;\n  if (reg < Number || reg > Number) {\n    v5 = cpustate->pc;\n    v6 = device_t tag(cpustate->device);\n    logerror(String, v6, String, String, Number L, v5);\n  }\n  if (adr < Number || adr > Number) {\n    v7 = cpustate->pc;\n    v8 = device_t tag(cpustate->device);\n    logerror(String, v8, String, String, Number L, v7);\n  }\n  if (begin < Number || count < Number || begin + count > Number) {\n    v9 = cpustate->pc;\n    v10 = device_t tag(cpustate->device);\n    logerror(String, v10, String, String, Number L, v9);\n  }\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < count;\n       ++<span class=\"supfact\">i</span>) {\n    cpustate->reg[reg][begin + <span class=\"supfact\">i</span>] =\n        READ_NIBBLE(cpustate, <span class=\"supfact\">i</span> + cpustate->d[adr]);\n    cpustate->icount -= Number;\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "jcespinoza", "repo_name": "compilers_class", "path": "jcespinoza/compilers_class/728a799775116fd24c0eaf1459bd8aeb693c9ebd6ac80385bf7952ff49645241", "path_in_repo": "jcespinoza/compilers_class/adv_expr_printer/sample3", "objdump": "0000000000401fb1 <push_file>:\n  401fb1:\t55                   \tpush   %rbp\n  401fb2:\t48 89 e5             \tmov    %rsp,%rbp\n  401fb5:\t48 83 ec 20          \tsub    $0x20,%rsp\n  401fb9:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  401fbd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401fc1:\tbe 58 5b 40 00       \tmov    $0x405b58,%esi\n  401fc6:\t48 89 c7             \tmov    %rax,%rdi\n  401fc9:\te8 52 f1 ff ff       \tcallq  401120 <fopen@plt>\n  401fce:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401fd2:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  401fd7:\t75 27                \tjne    402000 <push_file+0x4f>\n  401fd9:\t48 8b 05 20 61 00 00 \tmov    0x6120(%rip),%rax        # 408100 <stderr@@GLIBC_2.2.5>\n  401fe0:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  401fe4:\tbe 5a 5b 40 00       \tmov    $0x405b5a,%esi\n  401fe9:\t48 89 c7             \tmov    %rax,%rdi\n  401fec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401ff1:\te8 ca f0 ff ff       \tcallq  4010c0 <fprintf@plt>\n  401ff6:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401ffb:\te9 c1 00 00 00       \tjmpq   4020c1 <push_file+0x110>\n  402000:\tbf 28 00 00 00       \tmov    $0x28,%edi\n  402005:\te8 f6 f0 ff ff       \tcallq  401100 <malloc@plt>\n  40200a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40200e:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  402013:\t75 28                \tjne    40203d <push_file+0x8c>\n  402015:\t48 8b 05 e4 60 00 00 \tmov    0x60e4(%rip),%rax        # 408100 <stderr@@GLIBC_2.2.5>\n  40201c:\t48 89 c1             \tmov    %rax,%rcx\n  40201f:\tba 0e 00 00 00       \tmov    $0xe,%edx\n  402024:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  402029:\tbf 6d 5b 40 00       \tmov    $0x405b6d,%edi\n  40202e:\te8 1d f1 ff ff       \tcallq  401150 <fwrite@plt>\n  402033:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  402038:\te9 84 00 00 00       \tjmpq   4020c1 <push_file+0x110>\n  40203d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402041:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  402045:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  402049:\t48 8b 15 90 61 00 00 \tmov    0x6190(%rip),%rdx        # 4081e0 <yyfilename>\n  402050:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402054:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  402058:\t8b 15 6a 60 00 00    \tmov    0x606a(%rip),%edx        # 4080c8 <yylineno>\n  40205e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402062:\t89 50 18             \tmov    %edx,0x18(%rax)\n  402065:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  402069:\tbe 00 40 00 00       \tmov    $0x4000,%esi\n  40206e:\t48 89 c7             \tmov    %rax,%rdi\n  402071:\te8 4d 1b 00 00       \tcallq  403bc3 <yy_create_buffer>\n  402076:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  40207a:\t48 89 42 20          \tmov    %rax,0x20(%rdx)\n  40207e:\t48 8b 15 a3 60 00 00 \tmov    0x60a3(%rip),%rdx        # 408128 <global_inc_stack>\n  402085:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402089:\t48 89 10             \tmov    %rdx,(%rax)\n  40208c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402090:\t48 89 05 91 60 00 00 \tmov    %rax,0x6091(%rip)        # 408128 <global_inc_stack>\n  402097:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40209b:\t48 89 05 3e 61 00 00 \tmov    %rax,0x613e(%rip)        # 4081e0 <yyfilename>\n  4020a2:\tc7 05 1c 60 00 00 01 \tmovl   $0x1,0x601c(%rip)        # 4080c8 <yylineno>\n  4020a9:\t00 00 00 \n  4020ac:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4020b0:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4020b4:\t48 89 c7             \tmov    %rax,%rdi\n  4020b7:\te8 89 19 00 00       \tcallq  403a45 <yy_switch_to_buffer>\n  4020bc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4020c1:\tc9                   \tleaveq \n  4020c2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall push_file(const char *a1) {\n  __int64 result;\n  _QWORD *<span class=\"supfact\">v2</span>;\n  FILE *<span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = fopen(a1, String);\n  if (<span class=\"supfact\">v3</span>) {\n    <span class=\"supfact\">v2</span> = malloc(Number);\n    if (<span class=\"supfact\">v2</span>) {\n      <span class=\"supfact\">v2</span>[Number] = <span class=\"supfact\">v3</span>;\n      <span class=\"supfact\">v2</span>[Number] = yyfilename;\n      *((_DWORD *)<span class=\"supfact\">v2</span> + Number) = yylineno;\n      <span class=\"supfact\">v2</span>[Number] = yy_create_buffer(<span class=\"supfact\">v3</span>, Number);\n      *<span class=\"supfact\">v2</span> = global_inc_stack;\n      global_inc_stack = <span class=\"supfact\">v2</span>;\n      yyfilename = (__int64)a1;\n      yylineno = Number;\n      yy_switch_to_buffer(<span class=\"supfact\">v2</span>[Number]);\n      result = Number L;\n    } else {\n      fwrite(String, Number, Number, stderr);\n      result = Number L;\n    }\n  } else {\n    fprintf(stderr, String, a1);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl push_file(char *filename) {\n  int result;\n  include_stack_t *<span class=\"supfact\">incStack</span>;\n  FILE *<span class=\"supfact\">file</span>;\n  <span class=\"supfact\">file</span> = fopen(filename, String);\n  if (<span class=\"supfact\">file</span>) {\n    <span class=\"supfact\">incStack</span> = (include_stack_t *)malloc(Number);\n    if (<span class=\"supfact\">incStack</span>) {\n      <span class=\"supfact\">incStack</span>-><span class=\"supfact\">file</span> = <span class=\"supfact\">file</span>;\n      <span class=\"supfact\">incStack</span>->filename = yyfilename;\n      <span class=\"supfact\">incStack</span>->lineNumber = yylineno;\n      <span class=\"supfact\">incStack</span>->bufferState =\n          yy_create_buffer(<span class=\"supfact\">file</span>, Number);\n      <span class=\"supfact\">incStack</span>->prevState = global_inc_stack;\n      global_inc_stack = <span class=\"supfact\">incStack</span>;\n      yyfilename = filename;\n      yylineno = Number;\n      yy_switch_to_buffer(<span class=\"supfact\">incStack</span>->bufferState);\n      result = Number;\n    } else {\n      fwrite(String, Number, Number, stderr);\n      result = Number;\n    }\n  } else {\n    fprintf(stderr, String, filename);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "FILE *", "ref_name": "file", "ref_type": "FILE *"}, {"name": "v2", "type": "FILE *", "ref_name": "incStack", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "ic-hep", "repo_name": "emi3", "path": "ic-hep/emi3/c42b51865d95e3df1e81ebcc1fc1c8fc94fd25cb651015fcd95d2f867b2025aa", "path_in_repo": "ic-hep/emi3/packages/gridsite-compat1.7/sources/src/grst_xacml_nossl.o", "objdump": "0000000000000801 <GRSTxacmlAclLoadforFile>:\n     801:\t55                   \tpush   %rbp\n     802:\t48 89 e5             \tmov    %rsp,%rbp\n     805:\t48 83 ec 20          \tsub    $0x20,%rsp\n     809:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     80d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     811:\t48 89 c7             \tmov    %rax,%rdi\n     814:\te8 00 00 00 00       \tcallq  819 <GRSTxacmlAclLoadforFile+0x18>\n     819:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     81d:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     822:\t74 22                \tje     846 <GRSTxacmlAclLoadforFile+0x45>\n     824:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     828:\t48 89 c7             \tmov    %rax,%rdi\n     82b:\te8 00 00 00 00       \tcallq  830 <GRSTxacmlAclLoadforFile+0x2f>\n     830:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     834:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     838:\t48 89 c7             \tmov    %rax,%rdi\n     83b:\te8 00 00 00 00       \tcallq  840 <GRSTxacmlAclLoadforFile+0x3f>\n     840:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     844:\teb 05                \tjmp    84b <GRSTxacmlAclLoadforFile+0x4a>\n     846:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     84b:\tc9                   \tleaveq \n     84c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall GRSTxacmlAclLoadforFile(const char *a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  char *<span class=\"supfact\">ptr</span>;\n  <span class=\"supfact\">ptr</span> = GRSTxacmlFileFindAclname(a1);\n  if (!<span class=\"supfact\">ptr</span>)\n    return Number L;\n  <span class=\"supfact\">v2</span> = GRSTxacmlAclLoadFile((__int64)<span class=\"supfact\">ptr</span>);\n  free(<span class=\"supfact\">ptr</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "GRSTgaclAcl *__cdecl GRSTxacmlAclLoadforFile(char *pathandfile) {\n  GRSTgaclAcl *<span class=\"supfact\">acl</span>;\n  char *<span class=\"supfact\">path</span>;\n  <span class=\"supfact\">path</span> = GRSTxacmlFileFindAclname(pathandfile);\n  if (!<span class=\"supfact\">path</span>)\n    return Number L;\n  <span class=\"supfact\">acl</span> = GRSTxacmlAclLoadFile(<span class=\"supfact\">path</span>);\n  free(<span class=\"supfact\">path</span>);\n  return <span class=\"supfact\">acl</span>;\n}", "var": [{"name": "ptr", "type": "char *", "ref_name": "path", "ref_type": "char *"}, {"name": "v2", "type": "gentity_t *", "ref_name": "acl", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "threeearcat", "repo_name": "repro-guest", "path": "threeearcat/repro-guest/aea8740642b09c40d0a4e6f62417e2d65ee554e88b3fcba3e265142c2d651e8a", "path_in_repo": "threeearcat/repro-guest/tools/testing/selftests/x86/test_vsyscall_64", "objdump": "0000000000401964 <test_time>:\n  401964:\t55                   \tpush   %rbp\n  401965:\t48 89 e5             \tmov    %rsp,%rbp\n  401968:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40196c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  401973:\tbf 90 33 40 00       \tmov    $0x403390,%edi\n  401978:\te8 c3 f6 ff ff       \tcallq  401040 <puts@plt>\n  40197d:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  401984:\t00 \n  401985:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  40198c:\t00 \n  40198d:\t48 c7 45 d0 ff ff ff \tmovq   $0xffffffffffffffff,-0x30(%rbp)\n  401994:\tff \n  401995:\t48 c7 45 c8 ff ff ff \tmovq   $0xffffffffffffffff,-0x38(%rbp)\n  40199c:\tff \n  40199d:\t48 c7 45 c0 ff ff ff \tmovq   $0xffffffffffffffff,-0x40(%rbp)\n  4019a4:\tff \n  4019a5:\t48 c7 45 b8 ff ff ff \tmovq   $0xffffffffffffffff,-0x48(%rbp)\n  4019ac:\tff \n  4019ad:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4019b1:\t48 89 c7             \tmov    %rax,%rdi\n  4019b4:\te8 2b fc ff ff       \tcallq  4015e4 <sys_time>\n  4019b9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4019bd:\t48 8b 05 4c 48 00 00 \tmov    0x484c(%rip),%rax        # 406210 <vdso_time>\n  4019c4:\t48 85 c0             \ttest   %rax,%rax\n  4019c7:\t74 14                \tje     4019dd <test_time+0x79>\n  4019c9:\t48 8b 15 40 48 00 00 \tmov    0x4840(%rip),%rdx        # 406210 <vdso_time>\n  4019d0:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4019d4:\t48 89 c7             \tmov    %rax,%rdi\n  4019d7:\tff d2                \tcallq  *%rdx\n  4019d9:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4019dd:\t0f b6 05 1d 47 00 00 \tmovzbl 0x471d(%rip),%eax        # 406101 <vsyscall_map_x>\n  4019e4:\t84 c0                \ttest   %al,%al\n  4019e6:\t74 14                \tje     4019fc <test_time+0x98>\n  4019e8:\t48 c7 c2 00 04 60 ff \tmov    $0xffffffffff600400,%rdx\n  4019ef:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  4019f3:\t48 89 c7             \tmov    %rax,%rdi\n  4019f6:\tff d2                \tcallq  *%rdx\n  4019f8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4019fc:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  401a00:\t48 89 c7             \tmov    %rax,%rdi\n  401a03:\te8 dc fb ff ff       \tcallq  4015e4 <sys_time>\n  401a08:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  401a0c:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  401a11:\t78 1b                \tjs     401a2e <test_time+0xca>\n  401a13:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  401a17:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n  401a1b:\t75 11                \tjne    401a2e <test_time+0xca>\n  401a1d:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  401a22:\t78 0a                \tjs     401a2e <test_time+0xca>\n  401a24:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  401a28:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n  401a2c:\t74 31                \tje     401a5f <test_time+0xfb>\n  401a2e:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n  401a32:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  401a36:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  401a3a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401a3e:\t49 89 f0             \tmov    %rsi,%r8\n  401a41:\t48 89 c6             \tmov    %rax,%rsi\n  401a44:\tbf a8 33 40 00       \tmov    $0x4033a8,%edi\n  401a49:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401a4e:\te8 2d f6 ff ff       \tcallq  401080 <printf@plt>\n  401a53:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401a57:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401a5a:\te9 00 01 00 00       \tjmpq   401b5f <test_time+0x1fb>\n  401a5f:\t48 8b 05 aa 47 00 00 \tmov    0x47aa(%rip),%rax        # 406210 <vdso_time>\n  401a66:\t48 85 c0             \ttest   %rax,%rax\n  401a69:\t74 73                \tje     401ade <test_time+0x17a>\n  401a6b:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  401a70:\t78 0a                \tjs     401a7c <test_time+0x118>\n  401a72:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  401a76:\t48 39 45 f0          \tcmp    %rax,-0x10(%rbp)\n  401a7a:\t74 20                \tje     401a9c <test_time+0x138>\n  401a7c:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  401a80:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401a84:\t48 89 c6             \tmov    %rax,%rsi\n  401a87:\tbf f0 33 40 00       \tmov    $0x4033f0,%edi\n  401a8c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401a91:\te8 ea f5 ff ff       \tcallq  401080 <printf@plt>\n  401a96:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401a9a:\teb 42                \tjmp    401ade <test_time+0x17a>\n  401a9c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401aa0:\t48 3b 45 e0          \tcmp    -0x20(%rbp),%rax\n  401aa4:\t7c 0a                \tjl     401ab0 <test_time+0x14c>\n  401aa6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401aaa:\t48 3b 45 d8          \tcmp    -0x28(%rbp),%rax\n  401aae:\t7e 24                \tjle    401ad4 <test_time+0x170>\n  401ab0:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  401ab4:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  401ab8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401abc:\t48 89 c6             \tmov    %rax,%rsi\n  401abf:\tbf 20 34 40 00       \tmov    $0x403420,%edi\n  401ac4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401ac9:\te8 b2 f5 ff ff       \tcallq  401080 <printf@plt>\n  401ace:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401ad2:\teb 0a                \tjmp    401ade <test_time+0x17a>\n  401ad4:\tbf 53 34 40 00       \tmov    $0x403453,%edi\n  401ad9:\te8 62 f5 ff ff       \tcallq  401040 <puts@plt>\n  401ade:\t0f b6 05 1c 46 00 00 \tmovzbl 0x461c(%rip),%eax        # 406101 <vsyscall_map_x>\n  401ae5:\t84 c0                \ttest   %al,%al\n  401ae7:\t74 73                \tje     401b5c <test_time+0x1f8>\n  401ae9:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  401aee:\t78 0a                \tjs     401afa <test_time+0x196>\n  401af0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  401af4:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n  401af8:\t74 20                \tje     401b1a <test_time+0x1b6>\n  401afa:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  401afe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401b02:\t48 89 c6             \tmov    %rax,%rsi\n  401b05:\tbf 70 34 40 00       \tmov    $0x403470,%edi\n  401b0a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401b0f:\te8 6c f5 ff ff       \tcallq  401080 <printf@plt>\n  401b14:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401b18:\teb 42                \tjmp    401b5c <test_time+0x1f8>\n  401b1a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401b1e:\t48 3b 45 e0          \tcmp    -0x20(%rbp),%rax\n  401b22:\t7c 0a                \tjl     401b2e <test_time+0x1ca>\n  401b24:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401b28:\t48 3b 45 d8          \tcmp    -0x28(%rbp),%rax\n  401b2c:\t7e 24                \tjle    401b52 <test_time+0x1ee>\n  401b2e:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  401b32:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  401b36:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401b3a:\t48 89 c6             \tmov    %rax,%rsi\n  401b3d:\tbf a0 34 40 00       \tmov    $0x4034a0,%edi\n  401b42:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401b47:\te8 34 f5 ff ff       \tcallq  401080 <printf@plt>\n  401b4c:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401b50:\teb 0a                \tjmp    401b5c <test_time+0x1f8>\n  401b52:\tbf d7 34 40 00       \tmov    $0x4034d7,%edi\n  401b57:\te8 e4 f4 ff ff       \tcallq  401040 <puts@plt>\n  401b5c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401b5f:\tc9                   \tleaveq \n  401b60:\tc3                   \tretq   ", "code_s": "__int64 test_time() {\n  __int64 result;\n  __int64 <span class=\"supfact\">v1</span>;\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = Number;\n  puts(String);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v4</span> = Number;\n  <span class=\"supfact\">v3</span> = Number;\n  <span class=\"supfact\">v2</span> = Number;\n  <span class=\"supfact\">v1</span> = Number;\n  <span class=\"supfact\">v6</span> = sys_time((__int64)&<span class=\"supfact\">v4</span>);\n  if (vdso_time)\n    <span class=\"supfact\">v8</span> = vdso_time(&<span class=\"supfact\">v2</span>);\n  if (vsyscall_map_x)\n    <span class=\"supfact\">v7</span> = MEMORY[Number](&<span class=\"supfact\">v1</span>);\n  <span class=\"supfact\">v5</span> = sys_time((__int64)&<span class=\"supfact\">v3</span>);\n  if (<span class=\"supfact\">v6</span> >= Number &&\n      <span class=\"supfact\">v6</span> == <span class=\"supfact\">v4</span> &&\n      <span class=\"supfact\">v5</span> >= Number &&\n      <span class=\"supfact\">v5</span> == <span class=\"supfact\">v3</span>) {\n    if (vdso_time) {\n      if (<span class=\"supfact\">v8</span> >= Number &&\n          <span class=\"supfact\">v8</span> == <span class=\"supfact\">v2</span>) {\n        if (<span class=\"supfact\">v8</span> >= <span class=\"supfact\">v6</span> &&\n            <span class=\"supfact\">v8</span> <= <span class=\"supfact\">v5</span>) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">v6</span>, <span class=\"supfact\">v8</span>,\n                 <span class=\"supfact\">v5</span>);\n          ++<span class=\"supfact\">v9</span>;\n        }\n      } else {\n        printf(String, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v2</span>);\n        ++<span class=\"supfact\">v9</span>;\n      }\n    }\n    if (vsyscall_map_x) {\n      if (<span class=\"supfact\">v7</span> >= Number &&\n          <span class=\"supfact\">v7</span> == <span class=\"supfact\">v1</span>) {\n        if (<span class=\"supfact\">v7</span> >= <span class=\"supfact\">v6</span> &&\n            <span class=\"supfact\">v7</span> <= <span class=\"supfact\">v5</span>) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">v6</span>, <span class=\"supfact\">v7</span>,\n                 <span class=\"supfact\">v5</span>);\n          ++<span class=\"supfact\">v9</span>;\n        }\n      } else {\n        printf(String, <span class=\"supfact\">v7</span>, <span class=\"supfact\">v1</span>);\n        ++<span class=\"supfact\">v9</span>;\n      }\n    }\n    result = <span class=\"supfact\">v9</span>;\n  } else {\n    printf(String, <span class=\"supfact\">v6</span>, <span class=\"supfact\">v4</span>, <span class=\"supfact\">v5</span>,\n           <span class=\"supfact\">v3</span>);\n    result = <span class=\"supfact\">v9</span> + Number;\n  }\n  return result;\n}", "code_t": "int __cdecl test_time() {\n  int result;\n  __int64 <span class=\"supfact\">t2_vsys</span>;\n  __int64 <span class=\"supfact\">t2_vdso</span>;\n  __int64 <span class=\"supfact\">t2_sys2</span>;\n  __int64 <span class=\"supfact\">t2_sys1</span>;\n  __int64 <span class=\"supfact\">t_sys2</span>;\n  __int64 <span class=\"supfact\">t_sys1</span>;\n  __int64 <span class=\"supfact\">t_vsys</span>;\n  __int64 <span class=\"supfact\">t_vdso</span>;\n  int <span class=\"supfact\">nerrs</span>;\n  <span class=\"supfact\">nerrs</span> = Number;\n  puts(String);\n  <span class=\"supfact\">t_vdso</span> = Number L;\n  <span class=\"supfact\">t_vsys</span> = Number L;\n  <span class=\"supfact\">t2_sys1</span> = Number;\n  <span class=\"supfact\">t2_sys2</span> = Number;\n  <span class=\"supfact\">t2_vdso</span> = Number;\n  <span class=\"supfact\">t2_vsys</span> = Number;\n  <span class=\"supfact\">t_sys1</span> = sys_time(&<span class=\"supfact\">t2_sys1</span>);\n  if (vdso_time)\n    <span class=\"supfact\">t_vdso</span> = vdso_time(&<span class=\"supfact\">t2_vdso</span>);\n  if (vsyscall_map_x)\n    <span class=\"supfact\">t_vsys</span> = MEMORY[Number](&<span class=\"supfact\">t2_vsys</span>);\n  <span class=\"supfact\">t_sys2</span> = sys_time(&<span class=\"supfact\">t2_sys2</span>);\n  if (<span class=\"supfact\">t_sys1</span> >= Number &&\n      <span class=\"supfact\">t_sys1</span> == <span class=\"supfact\">t2_sys1</span> &&\n      <span class=\"supfact\">t_sys2</span> >= Number &&\n      <span class=\"supfact\">t_sys2</span> == <span class=\"supfact\">t2_sys2</span>) {\n    if (vdso_time) {\n      if (<span class=\"supfact\">t_vdso</span> >= Number &&\n          <span class=\"supfact\">t_vdso</span> == <span class=\"supfact\">t2_vdso</span>) {\n        if (<span class=\"supfact\">t_vdso</span> >= <span class=\"supfact\">t_sys1</span> &&\n            <span class=\"supfact\">t_vdso</span> <= <span class=\"supfact\">t_sys2</span>) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">t_sys1</span>, <span class=\"supfact\">t_vdso</span>,\n                 <span class=\"supfact\">t_sys2</span>);\n          ++<span class=\"supfact\">nerrs</span>;\n        }\n      } else {\n        printf(String, <span class=\"supfact\">t_vdso</span>, <span class=\"supfact\">t2_vdso</span>);\n        ++<span class=\"supfact\">nerrs</span>;\n      }\n    }\n    if (vsyscall_map_x) {\n      if (<span class=\"supfact\">t_vsys</span> >= Number &&\n          <span class=\"supfact\">t_vsys</span> == <span class=\"supfact\">t2_vsys</span>) {\n        if (<span class=\"supfact\">t_vsys</span> >= <span class=\"supfact\">t_sys1</span> &&\n            <span class=\"supfact\">t_vsys</span> <= <span class=\"supfact\">t_sys2</span>) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">t_sys1</span>, <span class=\"supfact\">t_vsys</span>,\n                 <span class=\"supfact\">t_sys2</span>);\n          ++<span class=\"supfact\">nerrs</span>;\n        }\n      } else {\n        printf(String, <span class=\"supfact\">t_vsys</span>, <span class=\"supfact\">t2_vsys</span>);\n        ++<span class=\"supfact\">nerrs</span>;\n      }\n    }\n    result = <span class=\"supfact\">nerrs</span>;\n  } else {\n    printf(String, <span class=\"supfact\">t_sys1</span>, <span class=\"supfact\">t2_sys1</span>,\n           <span class=\"supfact\">t_sys2</span>, <span class=\"supfact\">t2_sys2</span>);\n    result = <span class=\"supfact\">nerrs</span> + Number;\n  }\n  return result;\n}", "var": [{"name": "v9", "type": "int", "ref_name": "nerrs", "ref_type": "int"}, {"name": "v8", "type": "__int64", "ref_name": "t_vdso", "ref_type": "__int64"}, {"name": "v7", "type": "__int64", "ref_name": "t_vsys", "ref_type": "__int64"}, {"name": "v6", "type": "__int64", "ref_name": "t_sys1", "ref_type": "__int64"}, {"name": "v5", "type": "__int64", "ref_name": "t_sys2", "ref_type": "__int64"}, {"name": "v4", "type": "__int64", "ref_name": "t2_sys1", "ref_type": "__int64"}, {"name": "v3", "type": "__int64", "ref_name": "t2_sys2", "ref_type": "__int64"}, {"name": "v2", "type": "__int64", "ref_name": "t2_vdso", "ref_type": "__int64"}, {"name": "v1", "type": "__int64", "ref_name": "t2_vsys", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "taviso", "repo_name": "iknowthis", "path": "taviso/iknowthis/4ac7babc8ab522a3365818c7c5da227c8672fb561cfb1ece9f710d9f3918711c", "path_in_repo": "taviso/iknowthis//syscalls/Linux/x86_64/get_robust_list.o", "objdump": "0000000000000159 <__fuzz__get_robust_list>:\n 159:\t55                   \tpush   %rbp\n 15a:\t48 89 e5             \tmov    %rsp,%rbp\n 15d:\t41 54                \tpush   %r12\n 15f:\t53                   \tpush   %rbx\n 160:\t48 83 ec 30          \tsub    $0x30,%rsp\n 164:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 168:\te8 00 00 00 00       \tcallq  16d <__fuzz__get_robust_list+0x14>\n 16d:\t48 63 d0             \tmovslq %eax,%rdx\n 170:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n 174:\t48 89 d6             \tmov    %rdx,%rsi\n 177:\t48 89 c7             \tmov    %rax,%rdi\n 17a:\te8 00 00 00 00       \tcallq  17f <__fuzz__get_robust_list+0x26>\n 17f:\t49 89 c4             \tmov    %rax,%r12\n 182:\te8 00 00 00 00       \tcallq  187 <__fuzz__get_robust_list+0x2e>\n 187:\t48 63 d0             \tmovslq %eax,%rdx\n 18a:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 18e:\t48 89 d6             \tmov    %rdx,%rsi\n 191:\t48 89 c7             \tmov    %rax,%rdi\n 194:\te8 00 00 00 00       \tcallq  199 <__fuzz__get_robust_list+0x40>\n 199:\t48 89 c3             \tmov    %rax,%rbx\n 19c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1a0:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 1a5:\tba 03 00 00 00       \tmov    $0x3,%edx\n 1aa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1af:\t48 89 c7             \tmov    %rax,%rdi\n 1b2:\te8 00 00 00 00       \tcallq  1b7 <__fuzz__get_robust_list+0x5e>\n 1b7:\t48 89 c2             \tmov    %rax,%rdx\n 1ba:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 1be:\t4d 89 e1             \tmov    %r12,%r9\n 1c1:\t49 89 d8             \tmov    %rbx,%r8\n 1c4:\t48 89 d1             \tmov    %rdx,%rcx\n 1c7:\tba 12 01 00 00       \tmov    $0x112,%edx\n 1cc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1d1:\t48 89 c7             \tmov    %rax,%rdi\n 1d4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1d9:\te8 00 00 00 00       \tcallq  1de <__fuzz__get_robust_list+0x85>\n 1de:\t48 98                \tcltq   \n 1e0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 1e4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 1e8:\t48 89 c7             \tmov    %rax,%rdi\n 1eb:\te8 00 00 00 00       \tcallq  1f0 <__fuzz__get_robust_list+0x97>\n 1f0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1f4:\t48 89 c7             \tmov    %rax,%rdi\n 1f7:\te8 00 00 00 00       \tcallq  1fc <__fuzz__get_robust_list+0xa3>\n 1fc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 200:\t48 83 c4 30          \tadd    $0x30,%rsp\n 204:\t5b                   \tpop    %rbx\n 205:\t41 5c                \tpop    %r12\n 207:\t5d                   \tpop    %rbp\n 208:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall _fuzz__get_robust_list(__int64 a1) {\n  int v1;\n  __int64 v2;\n  int v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  v1 = getpagesize();\n  v2 = typelib_get_buffer(&<span class=\"supfact\">v7</span>, v1);\n  v3 = getpagesize();\n  v4 = typelib_get_buffer(&<span class=\"supfact\">v8</span>, v3);\n  v5 = typelib_get_resource(a1, Number L, Number L, Number L);\n  <span class=\"supfact\">v9</span> =\n      (int)spawn_syscall_lwp(a1, Number L, Number L, v5, v4, v2);\n  typelib_clear_buffer(<span class=\"supfact\">v8</span>);\n  typelib_clear_buffer(<span class=\"supfact\">v7</span>);\n  return <span class=\"supfact\">v9</span>;\n}", "code_t": "glong __cdecl _fuzz__get_robust_list(gpointer this) {\n  int v1;\n  __int64 v2;\n  int v3;\n  __int64 v4;\n  __int64 v5;\n  gpointer <span class=\"supfact\">len</span>;\n  gpointer <span class=\"supfact\">head</span>;\n  glong <span class=\"supfact\">retcode</span>;\n  v1 = getpagesize();\n  v2 = typelib_get_buffer(&<span class=\"supfact\">len</span>, v1);\n  v3 = getpagesize();\n  v4 = typelib_get_buffer(&<span class=\"supfact\">head</span>, v3);\n  v5 = typelib_get_resource(this, Number L, Number L, Number L);\n  <span class=\"supfact\">retcode</span> =\n      (int)spawn_syscall_lwp(this, Number L, Number L, v5, v4, v2);\n  typelib_clear_buffer(<span class=\"supfact\">head</span>);\n  typelib_clear_buffer(<span class=\"supfact\">len</span>);\n  return <span class=\"supfact\">retcode</span>;\n}", "var": [{"name": "v9", "type": "glong", "ref_name": "retcode", "ref_type": "glong"}, {"name": "v8", "type": "gpointer", "ref_name": "head", "ref_type": "gpointer"}, {"name": "v7", "type": "gpointer", "ref_name": "len", "ref_type": "gpointer"}], "body_in_train": false}, {"repo_owner": "claymodel", "repo_name": "voip-foip", "path": "claymodel/voip-foip/adb4b1a90f2690c30d4a1365af93df8c2bccbb6b325703d7e40acbd5b4cb2fd4", "path_in_repo": "claymodel/voip-foip/kamailio-3.1.4/lib/presence/libser_presence.so.0.1", "objdump": "", "code_s": "__int64 shm_malloc_1() {\n  __int64 <span class=\"supfact\">v1</span>;\n  futex_get_3(mem_lock);\n  <span class=\"supfact\">v1</span> = qm_malloc();\n  futex_release_3(mem_lock);\n  return <span class=\"supfact\">v1</span>;\n}", "code_t": "void *__cdecl shm_malloc_1(unsigned int size, const char *file,\n                           const char *function, int line) {\n  void *<span class=\"supfact\">p</span>;\n  futex_get_3(mem_lock);\n  <span class=\"supfact\">p</span> = (void *)qm_malloc();\n  futex_release_3(mem_lock);\n  return <span class=\"supfact\">p</span>;\n}", "var": [{"name": "v1", "type": "void *", "ref_name": "p", "ref_type": "void *"}], "body_in_train": false}, {"repo_owner": "lolo32", "repo_name": "mupdf-mirror", "path": "lolo32/mupdf-mirror/0542c2d9046ac8dd641070dad3827c18a3386323896d39f480d9faada1eb4bf0", "path_in_repo": "lolo32/mupdf-mirror//build/debug/pdf/pdf-object.o", "objdump": "000000000000224a <pdf_new_dict>:\n    224a:\t55                   \tpush   %rbp\n    224b:\t48 89 e5             \tmov    %rsp,%rbp\n    224e:\t48 83 ec 40          \tsub    $0x40,%rsp\n    2252:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    2256:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n    2259:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    225d:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    2264:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2268:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    226c:\tbe 28 00 00 00       \tmov    $0x28,%esi\n    2271:\t48 89 c7             \tmov    %rax,%rdi\n    2274:\te8 00 00 00 00       \tcallq  2279 <pdf_new_dict+0x2f>\n    2279:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    227d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2281:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2285:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    2289:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    228d:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n    2293:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2297:\tc6 40 04 64          \tmovb   $0x64,0x4(%rax)\n    229b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    229f:\tc6 40 05 00          \tmovb   $0x0,0x5(%rax)\n    22a3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    22a7:\tc7 40 10 00 00 00 00 \tmovl   $0x0,0x10(%rax)\n    22ae:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    22b2:\tc7 40 18 00 00 00 00 \tmovl   $0x0,0x18(%rax)\n    22b9:\t83 7d d4 01          \tcmpl   $0x1,-0x2c(%rbp)\n    22bd:\t7e 05                \tjle    22c4 <pdf_new_dict+0x7a>\n    22bf:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    22c2:\teb 05                \tjmp    22c9 <pdf_new_dict+0x7f>\n    22c4:\tb8 0a 00 00 00       \tmov    $0xa,%eax\n    22c9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    22cd:\t89 42 1c             \tmov    %eax,0x1c(%rdx)\n    22d0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    22d4:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    22d8:\t48 89 c7             \tmov    %rax,%rdi\n    22db:\te8 00 00 00 00       \tcallq  22e0 <pdf_new_dict+0x96>\n    22e0:\t85 c0                \ttest   %eax,%eax\n    22e2:\t0f 84 c7 00 00 00    \tje     23af <pdf_new_dict+0x165>\n    22e8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    22ec:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n    22f0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    22f4:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    22f8:\t8b 00                \tmov    (%rax),%eax\n    22fa:\t48 63 d0             \tmovslq %eax,%rdx\n    22fd:\t48 89 d0             \tmov    %rdx,%rax\n    2300:\t48 01 c0             \tadd    %rax,%rax\n    2303:\t48 01 d0             \tadd    %rdx,%rax\n    2306:\t48 c1 e0 02          \tshl    $0x2,%rax\n    230a:\t48 01 d0             \tadd    %rdx,%rax\n    230d:\t48 c1 e0 04          \tshl    $0x4,%rax\n    2311:\t48 01 c8             \tadd    %rcx,%rax\n    2314:\t48 83 c0 10          \tadd    $0x10,%rax\n    2318:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    231c:\t48 8b 72 18          \tmov    0x18(%rdx),%rsi\n    2320:\t48 89 75 c8          \tmov    %rsi,-0x38(%rbp)\n    2324:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    2328:\t48 8b 52 18          \tmov    0x18(%rdx),%rdx\n    232c:\t8b 3a                \tmov    (%rdx),%edi\n    232e:\t89 7d d0             \tmov    %edi,-0x30(%rbp)\n    2331:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2336:\t48 89 c7             \tmov    %rax,%rdi\n    2339:\te8 00 00 00 00       \tcallq  233e <pdf_new_dict+0xf4>\n    233e:\t89 c1                \tmov    %eax,%ecx\n    2340:\t8b 7d d0             \tmov    -0x30(%rbp),%edi\n    2343:\t48 63 d7             \tmovslq %edi,%rdx\n    2346:\t48 89 d0             \tmov    %rdx,%rax\n    2349:\t48 01 c0             \tadd    %rax,%rax\n    234c:\t48 01 d0             \tadd    %rdx,%rax\n    234f:\t48 c1 e0 02          \tshl    $0x2,%rax\n    2353:\t48 01 d0             \tadd    %rdx,%rax\n    2356:\t48 c1 e0 04          \tshl    $0x4,%rax\n    235a:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n    235e:\t48 01 f0             \tadd    %rsi,%rax\n    2361:\t48 83 c0 08          \tadd    $0x8,%rax\n    2365:\t89 08                \tmov    %ecx,(%rax)\n    2367:\t48 63 d7             \tmovslq %edi,%rdx\n    236a:\t48 89 d0             \tmov    %rdx,%rax\n    236d:\t48 01 c0             \tadd    %rax,%rax\n    2370:\t48 01 d0             \tadd    %rdx,%rax\n    2373:\t48 c1 e0 02          \tshl    $0x2,%rax\n    2377:\t48 01 d0             \tadd    %rdx,%rax\n    237a:\t48 c1 e0 04          \tshl    $0x4,%rax\n    237e:\t48 01 f0             \tadd    %rsi,%rax\n    2381:\t48 83 c0 08          \tadd    $0x8,%rax\n    2385:\t8b 00                \tmov    (%rax),%eax\n    2387:\t85 c0                \ttest   %eax,%eax\n    2389:\t75 24                \tjne    23af <pdf_new_dict+0x165>\n    238b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    238f:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    2392:\t89 c1                \tmov    %eax,%ecx\n    2394:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2398:\tba 10 00 00 00       \tmov    $0x10,%edx\n    239d:\t89 ce                \tmov    %ecx,%esi\n    239f:\t48 89 c7             \tmov    %rax,%rdi\n    23a2:\te8 00 00 00 00       \tcallq  23a7 <pdf_new_dict+0x15d>\n    23a7:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    23ab:\t48 89 42 20          \tmov    %rax,0x20(%rdx)\n    23af:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    23b3:\t48 8b 70 18          \tmov    0x18(%rax),%rsi\n    23b7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    23bb:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    23bf:\t8b 10                \tmov    (%rax),%edx\n    23c1:\t8d 4a ff             \tlea    -0x1(%rdx),%ecx\n    23c4:\t89 08                \tmov    %ecx,(%rax)\n    23c6:\t48 63 d2             \tmovslq %edx,%rdx\n    23c9:\t48 89 d0             \tmov    %rdx,%rax\n    23cc:\t48 01 c0             \tadd    %rax,%rax\n    23cf:\t48 01 d0             \tadd    %rdx,%rax\n    23d2:\t48 c1 e0 02          \tshl    $0x2,%rax\n    23d6:\t48 01 d0             \tadd    %rdx,%rax\n    23d9:\t48 c1 e0 04          \tshl    $0x4,%rax\n    23dd:\t48 01 f0             \tadd    %rsi,%rax\n    23e0:\t48 83 c0 08          \tadd    $0x8,%rax\n    23e4:\t8b 00                \tmov    (%rax),%eax\n    23e6:\t83 f8 01             \tcmp    $0x1,%eax\n    23e9:\t7e 1f                \tjle    240a <pdf_new_dict+0x1c0>\n    23eb:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    23ef:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    23f3:\t48 89 d6             \tmov    %rdx,%rsi\n    23f6:\t48 89 c7             \tmov    %rax,%rdi\n    23f9:\te8 00 00 00 00       \tcallq  23fe <pdf_new_dict+0x1b4>\n    23fe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2402:\t48 89 c7             \tmov    %rax,%rdi\n    2405:\te8 00 00 00 00       \tcallq  240a <pdf_new_dict+0x1c0>\n    240a:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n    2411:\teb 3d                \tjmp    2450 <pdf_new_dict+0x206>\n    2413:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2417:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    241b:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    241e:\t48 63 d2             \tmovslq %edx,%rdx\n    2421:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    2425:\t48 01 d0             \tadd    %rdx,%rax\n    2428:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    242f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2433:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    2437:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    243a:\t48 63 d2             \tmovslq %edx,%rdx\n    243d:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    2441:\t48 01 d0             \tadd    %rdx,%rax\n    2444:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n    244b:\t00 \n    244c:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n    2450:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2454:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    2457:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n    245a:\t7c b7                \tjl     2413 <pdf_new_dict+0x1c9>\n    245c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2460:\tc9                   \tleaveq \n    2461:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pdf_new_dict(__int64 a1, int a2) {\n  int v2;\n  _DWORD *v3;\n  int v4;\n  int *<span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v8</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v10</span> = fz_malloc(<span class=\"supfact\">v8</span>, Number L);\n  *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) = a1;\n  *(_DWORD *)<span class=\"supfact\">v10</span> = Number;\n  *(_BYTE *)(<span class=\"supfact\">v10</span> + Number) = Number;\n  *(_BYTE *)(<span class=\"supfact\">v10</span> + Number) = Number;\n  *(_DWORD *)(<span class=\"supfact\">v10</span> + Number) = Number;\n  *(_DWORD *)(<span class=\"supfact\">v10</span> + Number) = Number;\n  if (a2 <= Number)\n    v2 = Number;\n  else\n    v2 = a2;\n  *(_DWORD *)(<span class=\"supfact\">v10</span> + Number) = v2;\n  if ((unsigned int)fz_push_try(*(_QWORD *)(<span class=\"supfact\">v8</span> + Number))) {\n    <span class=\"supfact\">v6</span> = *(int **)(<span class=\"supfact\">v8</span> + Number);\n    <span class=\"supfact\">v7</span> = *<span class=\"supfact\">v6</span>;\n    <span class=\"supfact\">v6</span>[Number * <span class=\"supfact\">v7</span> + Number] = _sigsetjmp(\n        (struct __jmp_buf_tag\n             *)&<span class=\"supfact\">v6</span>[Number * *<span class=\"supfact\">v6</span> + Number],\n        Number);\n    if (!<span class=\"supfact\">v6</span>[Number * <span class=\"supfact\">v7</span> + Number])\n      *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) = fz_malloc_array(\n          <span class=\"supfact\">v8</span>, *(unsigned int *)(<span class=\"supfact\">v10</span> + Number),\n          Number L);\n  }\n  v3 = *(_DWORD **)(<span class=\"supfact\">v8</span> + Number);\n  v4 = (*v3)--;\n  if ((int)v3[Number * v4 + Number] > Number) {\n    fz_free(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v10</span>);\n    fz_rethrow(<span class=\"supfact\">v8</span>);\n  }\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < *(_DWORD *)(<span class=\"supfact\">v10</span> + Number);\n       ++<span class=\"supfact\">i</span>) {\n    *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                *(_QWORD *)(<span class=\"supfact\">v10</span> + Number)) = Number L;\n    *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) + Number) = Number L;\n  }\n  return <span class=\"supfact\">v10</span>;\n}", "code_t": "pdf_obj *__cdecl pdf_new_dict(pdf_document *doc, int initialcap) {\n  int v2;\n  fz_error_context *v3;\n  int v4;\n  fz_error_context *<span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  fz_context *<span class=\"supfact\">ctx</span>;\n  int <span class=\"supfact\">i</span>;\n  pdf_obj *<span class=\"supfact\">obj</span>;\n  <span class=\"supfact\">ctx</span> = doc-><span class=\"supfact\">ctx</span>;\n  <span class=\"supfact\">obj</span> = (pdf_obj *)fz_malloc(<span class=\"supfact\">ctx</span>, Number L);\n  <span class=\"supfact\">obj</span>->doc = doc;\n  <span class=\"supfact\">obj</span>->refs = Number;\n  <span class=\"supfact\">obj</span>->kind = Number;\n  <span class=\"supfact\">obj</span>->flags = Number;\n  <span class=\"supfact\">obj</span>->parent_num = Number;\n  <span class=\"supfact\">obj</span>->u.b = Number;\n  if (initialcap <= Number)\n    v2 = Number;\n  else\n    v2 = initialcap;\n  <span class=\"supfact\">obj</span>->u.a.cap = v2;\n  if ((unsigned int)fz_push_try(<span class=\"supfact\">ctx</span>->error)) {\n    <span class=\"supfact\">v6</span> = <span class=\"supfact\">ctx</span>->error;\n    <span class=\"supfact\">v7</span> = <span class=\"supfact\">v6</span>->top;\n    <span class=\"supfact\">v6</span>->stack[<span class=\"supfact\">v7</span>].code = _sigsetjmp(\n        <span class=\"supfact\">v6</span>->stack[<span class=\"supfact\">v6</span>->top].buffer, Number);\n    if (!<span class=\"supfact\">v6</span>->stack[<span class=\"supfact\">v7</span>].code)\n      <span class=\"supfact\">obj</span>->u.a.items = (pdf_obj **)fz_malloc_array(\n          <span class=\"supfact\">ctx</span>, (unsigned int)<span class=\"supfact\">obj</span>->u.a.cap,\n          Number L);\n  }\n  v3 = <span class=\"supfact\">ctx</span>->error;\n  v4 = v3->top--;\n  if (v3->stack[v4].code > Number) {\n    fz_free(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">obj</span>);\n    fz_rethrow(<span class=\"supfact\">ctx</span>);\n  }\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">obj</span>->u.a.cap; ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">obj</span>->u.a.items[Number * <span class=\"supfact\">i</span>] = Number L;\n    <span class=\"supfact\">obj</span>->u.a.items[Number * <span class=\"supfact\">i</span> + Number] =\n        Number L;\n  }\n  return <span class=\"supfact\">obj</span>;\n}", "var": [{"name": "v10", "type": "pdf_obj *", "ref_name": "obj", "ref_type": "pdf_obj *"}, {"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v8", "type": "fz_error_context *", "ref_name": "ctx", "ref_type": "fz_context *"}, {"name": "v7", "type": "int", "ref_name": "v7", "ref_type": "int"}, {"name": "v6", "type": "fz_error_context *", "ref_name": "v6", "ref_type": "fz_error_context *"}], "body_in_train": false}, {"repo_owner": "pathscale", "repo_name": "nvopencc", "path": "pathscale/nvopencc/a0b245a5ac4274c809c37341d4cf1046e6339efcffcd40edf91f29728027bd58", "path_in_repo": "pathscale/nvopencc/src/targia3264_nvisa_rel/gccfe/gnu/sbitmap.o", "objdump": "000000000000151e <sbitmap_last_set_bit>:\n    151e:\t55                   \tpush   %rbp\n    151f:\t48 89 e5             \tmov    %rsp,%rbp\n    1522:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1526:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    152a:\t48 83 c0 10          \tadd    $0x10,%rax\n    152e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1532:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1536:\t8b 40 04             \tmov    0x4(%rax),%eax\n    1539:\t83 e8 01             \tsub    $0x1,%eax\n    153c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    153f:\teb 5f                \tjmp    15a0 <sbitmap_last_set_bit+0x82>\n    1541:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1544:\t48 98                \tcltq   \n    1546:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    154d:\t00 \n    154e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1552:\t48 01 d0             \tadd    %rdx,%rax\n    1555:\t48 8b 00             \tmov    (%rax),%rax\n    1558:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    155c:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    1561:\t74 39                \tje     159c <sbitmap_last_set_bit+0x7e>\n    1563:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1566:\t83 c0 01             \tadd    $0x1,%eax\n    1569:\tc1 e0 06             \tshl    $0x6,%eax\n    156c:\t83 e8 01             \tsub    $0x1,%eax\n    156f:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    1572:\t48 b8 00 00 00 00 00 \tmovabs $0x8000000000000000,%rax\n    1579:\t00 00 80 \n    157c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1580:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1584:\t48 23 45 f0          \tand    -0x10(%rbp),%rax\n    1588:\t48 85 c0             \ttest   %rax,%rax\n    158b:\t74 05                \tje     1592 <sbitmap_last_set_bit+0x74>\n    158d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    1590:\teb 19                \tjmp    15ab <sbitmap_last_set_bit+0x8d>\n    1592:\t48 d1 6d f0          \tshrq   -0x10(%rbp)\n    1596:\t83 6d f8 01          \tsubl   $0x1,-0x8(%rbp)\n    159a:\teb e4                \tjmp    1580 <sbitmap_last_set_bit+0x62>\n    159c:\t83 6d fc 01          \tsubl   $0x1,-0x4(%rbp)\n    15a0:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    15a4:\t79 9b                \tjns    1541 <sbitmap_last_set_bit+0x23>\n    15a6:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    15ab:\t5d                   \tpop    %rbp\n    15ac:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sbitmap_last_set_bit(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  unsigned __int64 <span class=\"supfact\">j</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = *(_DWORD *)(a1 + Number) - Number;;\n       --<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">i</span> < Number)\n      return Number;\n    <span class=\"supfact\">v2</span> =\n        *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + a1 + Number);\n    if (<span class=\"supfact\">v2</span>)\n      break;\n  }\n  <span class=\"supfact\">v4</span> = ((<span class=\"supfact\">i</span> + Number) << Number) - Number;\n  for (<span class=\"supfact\">j</span> = Number;\n       (<span class=\"supfact\">j</span> & <span class=\"supfact\">v2</span>) == Number;\n       <span class=\"supfact\">j</span> >>= Number)\n    --<span class=\"supfact\">v4</span>;\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "int __cdecl sbitmap_last_set_bit(sbitmap bmap) {\n  unsigned __int64 <span class=\"supfact\">word</span>;\n  unsigned __int64 <span class=\"supfact\">mask</span>;\n  int <span class=\"supfact\">index</span>;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = bmap->size - Number;; --<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">i</span> < Number)\n      return Number;\n    <span class=\"supfact\">word</span> = bmap->elms[<span class=\"supfact\">i</span>];\n    if (<span class=\"supfact\">word</span>)\n      break;\n  }\n  <span class=\"supfact\">index</span> = ((<span class=\"supfact\">i</span> + Number) << Number) - Number;\n  for (<span class=\"supfact\">mask</span> = Number;\n       (<span class=\"supfact\">mask</span> & <span class=\"supfact\">word</span>) == Number;\n       <span class=\"supfact\">mask</span> >>= Number)\n    --<span class=\"supfact\">index</span>;\n  return <span class=\"supfact\">index</span>;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v4", "type": "int", "ref_name": "index", "ref_type": "int"}, {"name": "j", "type": "unsigned __int64", "ref_name": "mask", "ref_type": "unsigned __int64"}, {"name": "v2", "type": "unsigned __int64", "ref_name": "word", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "SergentP", "repo_name": "AS-TP_nanvix", "path": "SergentP/AS-TP_nanvix/991878f4eababc7c1af8ff49409cb9f2e4668fefc50f4dba44209a502b95fd67", "path_in_repo": "SergentP/AS-TP_nanvix//src/kernel/sys/utime.o", "objdump": "0000000000000043 <sys_utime>:\n  43:\t55                   \tpush   %rbp\n  44:\t48 89 e5             \tmov    %rsp,%rbp\n  47:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  53:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a <sys_utime+0x17>\n  5a:\tc7 80 60 02 00 00 00 \tmovl   $0x0,0x260(%rax)\n  61:\t00 00 00 \n  64:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  69:\t74 1a                \tje     85 <sys_utime+0x42>\n  6b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  6f:\tba 92 00 00 00       \tmov    $0x92,%edx\n  74:\tbe 08 00 00 00       \tmov    $0x8,%esi\n  79:\t48 89 c7             \tmov    %rax,%rdi\n  7c:\te8 00 00 00 00       \tcallq  81 <sys_utime+0x3e>\n  81:\t85 c0                \ttest   %eax,%eax\n  83:\t74 5e                \tje     e3 <sys_utime+0xa0>\n  85:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  89:\t48 89 c7             \tmov    %rax,%rdi\n  8c:\te8 00 00 00 00       \tcallq  91 <sys_utime+0x4e>\n  91:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  95:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  9a:\t74 4a                \tje     e6 <sys_utime+0xa3>\n  9c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  a0:\t48 89 c7             \tmov    %rax,%rdi\n  a3:\te8 00 00 00 00       \tcallq  a8 <sys_utime+0x65>\n  a8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  ac:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  b1:\t74 21                \tje     d4 <sys_utime+0x91>\n  b3:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  b7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  bb:\t48 89 d6             \tmov    %rdx,%rsi\n  be:\t48 89 c7             \tmov    %rax,%rdi\n  c1:\te8 3a ff ff ff       \tcallq  0 <do_utime>\n  c6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  ca:\t48 89 c7             \tmov    %rax,%rdi\n  cd:\te8 00 00 00 00       \tcallq  d2 <sys_utime+0x8f>\n  d2:\teb 01                \tjmp    d5 <sys_utime+0x92>\n  d4:\t90                   \tnop\n  d5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  d9:\t48 89 c7             \tmov    %rax,%rdi\n  dc:\te8 00 00 00 00       \tcallq  e1 <sys_utime+0x9e>\n  e1:\teb 04                \tjmp    e7 <sys_utime+0xa4>\n  e3:\t90                   \tnop\n  e4:\teb 01                \tjmp    e7 <sys_utime+0xa4>\n  e6:\t90                   \tnop\n  e7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ee <sys_utime+0xab>\n  ee:\t8b 80 60 02 00 00    \tmov    0x260(%rax),%eax\n  f4:\tf7 d8                \tneg    %eax\n  f6:\tc9                   \tleaveq \n  f7:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall sys_utime(__int64 a1, _DWORD *a2) {\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  *(_DWORD *)(curr_proc + Number L) = Number;\n  if (!a2 || (unsigned int)chkmem(a2, Number L, Number L)) {\n    <span class=\"supfact\">v4</span> = getname(a1);\n    if (<span class=\"supfact\">v4</span>) {\n      <span class=\"supfact\">v3</span> = inode_name(<span class=\"supfact\">v4</span>);\n      if (<span class=\"supfact\">v3</span>) {\n        do_utime(<span class=\"supfact\">v3</span>, a2);\n        inode_put(<span class=\"supfact\">v3</span>);\n      }\n      putname(<span class=\"supfact\">v4</span>);\n    }\n  }\n  return (unsigned int)-*(_DWORD *)(curr_proc + Number L);\n}", "code_t": "int __cdecl sys_utime(const char *path, utimbuf *times) {\n  inode *<span class=\"supfact\">ip_0</span>;\n  char *<span class=\"supfact\">name</span>;\n  *(_DWORD *)(curr_proc + Number L) = Number;\n  if (!times || (unsigned int)chkmem(times, Number L, Number L)) {\n    <span class=\"supfact\">name</span> = (char *)getname(path);\n    if (<span class=\"supfact\">name</span>) {\n      <span class=\"supfact\">ip_0</span> = (inode *)inode_name(<span class=\"supfact\">name</span>);\n      if (<span class=\"supfact\">ip_0</span>) {\n        do_utime(<span class=\"supfact\">ip_0</span>, times);\n        inode_put(<span class=\"supfact\">ip_0</span>);\n      }\n      putname(<span class=\"supfact\">name</span>);\n    }\n  }\n  return -*(_DWORD *)(curr_proc + Number L);\n}", "var": [{"name": "v4", "type": "__unk__", "ref_name": "name", "ref_type": "char *"}, {"name": "v3", "type": "__unk__", "ref_name": "ip_0", "ref_type": "inode *"}], "body_in_train": false}, {"repo_owner": "sjw7453584", "repo_name": "Server", "path": "sjw7453584/Server/c68abb791be2cb61a19bdde212af617a60b0d3d154ed5e87d6f357052f44ece6", "path_in_repo": "sjw7453584/Server/thrid_party/libuv/src/unix/core.o", "objdump": "0000000000000825 <uv__socket>:\n     825:\t55                   \tpush   %rbp\n     826:\t48 89 e5             \tmov    %rsp,%rbp\n     829:\t48 83 ec 20          \tsub    $0x20,%rsp\n     82d:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n     830:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n     833:\t89 55 e4             \tmov    %edx,-0x1c(%rbp)\n     836:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     839:\t0d 00 08 08 00       \tor     $0x80800,%eax\n     83e:\t89 c1                \tmov    %eax,%ecx\n     840:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     843:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     846:\t89 ce                \tmov    %ecx,%esi\n     848:\t89 c7                \tmov    %eax,%edi\n     84a:\te8 00 00 00 00       \tcallq  84f <uv__socket+0x2a>\n     84f:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     852:\t83 7d f8 ff          \tcmpl   $0xffffffff,-0x8(%rbp)\n     856:\t74 05                \tje     85d <uv__socket+0x38>\n     858:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     85b:\teb 7f                \tjmp    8dc <uv__socket+0xb7>\n     85d:\te8 00 00 00 00       \tcallq  862 <uv__socket+0x3d>\n     862:\t8b 00                \tmov    (%rax),%eax\n     864:\t83 f8 16             \tcmp    $0x16,%eax\n     867:\t74 0b                \tje     874 <uv__socket+0x4f>\n     869:\te8 00 00 00 00       \tcallq  86e <uv__socket+0x49>\n     86e:\t8b 00                \tmov    (%rax),%eax\n     870:\tf7 d8                \tneg    %eax\n     872:\teb 68                \tjmp    8dc <uv__socket+0xb7>\n     874:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     877:\t8b 4d e8             \tmov    -0x18(%rbp),%ecx\n     87a:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     87d:\t89 ce                \tmov    %ecx,%esi\n     87f:\t89 c7                \tmov    %eax,%edi\n     881:\te8 00 00 00 00       \tcallq  886 <uv__socket+0x61>\n     886:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     889:\t83 7d f8 ff          \tcmpl   $0xffffffff,-0x8(%rbp)\n     88d:\t75 0b                \tjne    89a <uv__socket+0x75>\n     88f:\te8 00 00 00 00       \tcallq  894 <uv__socket+0x6f>\n     894:\t8b 00                \tmov    (%rax),%eax\n     896:\tf7 d8                \tneg    %eax\n     898:\teb 42                \tjmp    8dc <uv__socket+0xb7>\n     89a:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     89d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     8a2:\t89 c7                \tmov    %eax,%edi\n     8a4:\te8 00 00 00 00       \tcallq  8a9 <uv__socket+0x84>\n     8a9:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     8ac:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     8b0:\t75 12                \tjne    8c4 <uv__socket+0x9f>\n     8b2:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     8b5:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     8ba:\t89 c7                \tmov    %eax,%edi\n     8bc:\te8 00 00 00 00       \tcallq  8c1 <uv__socket+0x9c>\n     8c1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     8c4:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     8c8:\t74 0f                \tje     8d9 <uv__socket+0xb4>\n     8ca:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     8cd:\t89 c7                \tmov    %eax,%edi\n     8cf:\te8 00 00 00 00       \tcallq  8d4 <uv__socket+0xaf>\n     8d4:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     8d7:\teb 03                \tjmp    8dc <uv__socket+0xb7>\n     8d9:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     8dc:\tc9                   \tleaveq \n     8dd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall uv__socket(int a1, int a2, int a3) {\n  unsigned int v5;\n  unsigned int v6;\n  unsigned int <span class=\"supfact\">v7</span>;\n  v5 = socket(a1, a2 | Number, a3);\n  if (v5 != Number)\n    return v5;\n  if (*_errno_location() != Number)\n    return (unsigned int)-*_errno_location();\n  v6 = socket(a1, a2, a3);\n  if (v6 == Number)\n    return (unsigned int)-*_errno_location();\n  <span class=\"supfact\">v7</span> = uv__nonblock(v6, Number L);\n  if (!<span class=\"supfact\">v7</span>)\n    <span class=\"supfact\">v7</span> = uv__cloexec(v6, Number L);\n  if (!<span class=\"supfact\">v7</span>)\n    return v6;\n  uv__close(v6);\n  return <span class=\"supfact\">v7</span>;\n}", "code_t": "int __cdecl uv__socket(int domain, int type, int protocol) {\n  int sockfd;\n  int sockfda;\n  int <span class=\"supfact\">err</span>;\n  sockfd = socket(domain, type | Number, protocol);\n  if (sockfd != Number)\n    return sockfd;\n  if (*_errno_location() != Number)\n    return -*_errno_location();\n  sockfda = socket(domain, type, protocol);\n  if (sockfda == Number)\n    return -*_errno_location();\n  <span class=\"supfact\">err</span> = uv__nonblock(sockfda, Number);\n  if (!<span class=\"supfact\">err</span>)\n    <span class=\"supfact\">err</span> = uv__cloexec(sockfda, Number);\n  if (!<span class=\"supfact\">err</span>)\n    return sockfda;\n  uv__close(sockfda);\n  return <span class=\"supfact\">err</span>;\n}", "var": [{"name": "v7", "type": "int", "ref_name": "err", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "moseymosey", "repo_name": "netpbm", "path": "moseymosey/netpbm/95ac57affebac8df4da2ddd6b43b1ec8eeaa79654cf7a1e9cc9ff1cdab08af36", "path_in_repo": "moseymosey/netpbm/analyzer/pamslice", "objdump": "0000000000402935 <printSlice>:\n  402935:\t55                   \tpush   %rbp\n  402936:\t48 89 e5             \tmov    %rsp,%rbp\n  402939:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40293d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  402941:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  402945:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n  402948:\t89 4d d8             \tmov    %ecx,-0x28(%rbp)\n  40294b:\t44 89 45 d4          \tmov    %r8d,-0x2c(%rbp)\n  40294f:\t44 89 4d d0          \tmov    %r9d,-0x30(%rbp)\n  402953:\t83 7d 20 00          \tcmpl   $0x0,0x20(%rbp)\n  402957:\t0f 84 ea 00 00 00    \tje     402a47 <printSlice+0x112>\n  40295d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402961:\t48 89 c1             \tmov    %rax,%rcx\n  402964:\tba 17 00 00 00       \tmov    $0x17,%edx\n  402969:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40296e:\tbf a8 f0 40 00       \tmov    $0x40f0a8,%edi\n  402973:\te8 b8 f9 ff ff       \tcallq  402330 <fwrite@plt>\n  402978:\t8b 7d d8             \tmov    -0x28(%rbp),%edi\n  40297b:\t8b 75 d0             \tmov    -0x30(%rbp),%esi\n  40297e:\t8b 4d dc             \tmov    -0x24(%rbp),%ecx\n  402981:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  402984:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402988:\t41 89 f9             \tmov    %edi,%r9d\n  40298b:\t41 89 f0             \tmov    %esi,%r8d\n  40298e:\tbe c0 f0 40 00       \tmov    $0x40f0c0,%esi\n  402993:\t48 89 c7             \tmov    %rax,%rdi\n  402996:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40299b:\te8 20 f8 ff ff       \tcallq  4021c0 <fprintf@plt>\n  4029a0:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  4029a3:\t2b 45 d4             \tsub    -0x2c(%rbp),%eax\n  4029a6:\t83 f8 01             \tcmp    $0x1,%eax\n  4029a9:\t75 1d                \tjne    4029c8 <printSlice+0x93>\n  4029ab:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4029af:\t48 89 c1             \tmov    %rax,%rcx\n  4029b2:\tba 17 00 00 00       \tmov    $0x17,%edx\n  4029b7:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4029bc:\tbf e9 f0 40 00       \tmov    $0x40f0e9,%edi\n  4029c1:\te8 6a f9 ff ff       \tcallq  402330 <fwrite@plt>\n  4029c6:\teb 1b                \tjmp    4029e3 <printSlice+0xae>\n  4029c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4029cc:\t48 89 c1             \tmov    %rax,%rcx\n  4029cf:\tba 1a 00 00 00       \tmov    $0x1a,%edx\n  4029d4:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4029d9:\tbf 01 f1 40 00       \tmov    $0x40f101,%edi\n  4029de:\te8 4d f9 ff ff       \tcallq  402330 <fwrite@plt>\n  4029e3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4029e7:\t48 89 c1             \tmov    %rax,%rcx\n  4029ea:\tba 1d 00 00 00       \tmov    $0x1d,%edx\n  4029ef:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4029f4:\tbf 1c f1 40 00       \tmov    $0x40f11c,%edi\n  4029f9:\te8 32 f9 ff ff       \tcallq  402330 <fwrite@plt>\n  4029fe:\t8b 45 18             \tmov    0x18(%rbp),%eax\n  402a01:\t2b 45 10             \tsub    0x10(%rbp),%eax\n  402a04:\t83 f8 01             \tcmp    $0x1,%eax\n  402a07:\t75 20                \tjne    402a29 <printSlice+0xf4>\n  402a09:\t48 8b 05 d0 39 01 00 \tmov    0x139d0(%rip),%rax        # 4163e0 <__TMC_END__>\n  402a10:\t48 89 c1             \tmov    %rax,%rcx\n  402a13:\tba 0d 00 00 00       \tmov    $0xd,%edx\n  402a18:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  402a1d:\tbf 3a f1 40 00       \tmov    $0x40f13a,%edi\n  402a22:\te8 09 f9 ff ff       \tcallq  402330 <fwrite@plt>\n  402a27:\teb 1e                \tjmp    402a47 <printSlice+0x112>\n  402a29:\t48 8b 05 b0 39 01 00 \tmov    0x139b0(%rip),%rax        # 4163e0 <__TMC_END__>\n  402a30:\t48 89 c1             \tmov    %rax,%rcx\n  402a33:\tba 0f 00 00 00       \tmov    $0xf,%edx\n  402a38:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  402a3d:\tbf 48 f1 40 00       \tmov    $0x40f148,%edi\n  402a42:\te8 e9 f8 ff ff       \tcallq  402330 <fwrite@plt>\n  402a47:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  402a4e:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  402a51:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  402a54:\te9 aa 00 00 00       \tjmpq   402b03 <printSlice+0x1ce>\n  402a59:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  402a5c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  402a5f:\te9 8f 00 00 00       \tjmpq   402af3 <printSlice+0x1be>\n  402a64:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402a67:\t8d 50 01             \tlea    0x1(%rax),%edx\n  402a6a:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  402a6d:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  402a71:\t89 c2                \tmov    %eax,%edx\n  402a73:\tbe 58 f1 40 00       \tmov    $0x40f158,%esi\n  402a78:\t48 89 cf             \tmov    %rcx,%rdi\n  402a7b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402a80:\te8 3b f7 ff ff       \tcallq  4021c0 <fprintf@plt>\n  402a85:\t8b 45 10             \tmov    0x10(%rbp),%eax\n  402a88:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  402a8b:\teb 49                \tjmp    402ad6 <printSlice+0x1a1>\n  402a8d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  402a90:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  402a97:\t00 \n  402a98:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  402a9c:\t48 01 d0             \tadd    %rdx,%rax\n  402a9f:\t48 8b 00             \tmov    (%rax),%rax\n  402aa2:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  402aa5:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  402aa9:\t48 01 d0             \tadd    %rdx,%rax\n  402aac:\t48 8b 00             \tmov    (%rax),%rax\n  402aaf:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  402ab2:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  402ab6:\t48 01 d0             \tadd    %rdx,%rax\n  402ab9:\t48 8b 10             \tmov    (%rax),%rdx\n  402abc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402ac0:\tbe 5c f1 40 00       \tmov    $0x40f15c,%esi\n  402ac5:\t48 89 c7             \tmov    %rax,%rdi\n  402ac8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402acd:\te8 ee f6 ff ff       \tcallq  4021c0 <fprintf@plt>\n  402ad2:\t83 45 f0 01          \taddl   $0x1,-0x10(%rbp)\n  402ad6:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  402ad9:\t3b 45 18             \tcmp    0x18(%rbp),%eax\n  402adc:\t72 af                \tjb     402a8d <printSlice+0x158>\n  402ade:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402ae2:\t48 89 c6             \tmov    %rax,%rsi\n  402ae5:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  402aea:\te8 41 f6 ff ff       \tcallq  402130 <fputc@plt>\n  402aef:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  402af3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  402af6:\t3b 45 d0             \tcmp    -0x30(%rbp),%eax\n  402af9:\t0f 82 65 ff ff ff    \tjb     402a64 <printSlice+0x12f>\n  402aff:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  402b03:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  402b06:\t3b 45 d8             \tcmp    -0x28(%rbp),%eax\n  402b09:\t0f 82 4a ff ff ff    \tjb     402a59 <printSlice+0x124>\n  402b0f:\t90                   \tnop\n  402b10:\t90                   \tnop\n  402b11:\tc9                   \tleaveq \n  402b12:\tc3                   \tretq   ", "code_s": "__int64 __fastcall printSlice(FILE *a1, __int64 a2, unsigned int a3,\n                              unsigned int a4, unsigned int a5, unsigned int a6,\n                              int <span class=\"supfact\">a7</span>,\n                              unsigned int <span class=\"supfact\">a8</span>,\n                              int <span class=\"supfact\">a9</span>) {\n  unsigned int v9;\n  __int64 result;\n  unsigned int <span class=\"supfact\">k</span>;\n  unsigned int <span class=\"supfact\">j</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">v18</span>;\n  if (<span class=\"supfact\">a9</span>) {\n    fwrite(String, Number, Number, a1);\n    fprintf(a1, String, a5, a3, a6, a4);\n    if (a6 - a5 == Number)\n      fwrite(String, Number, Number, a1);\n    else\n      fwrite(String, Number, Number, a1);\n    fwrite(String, Number, Number, a1);\n    if (<span class=\"supfact\">a8</span> - <span class=\"supfact\">a7</span> == Number)\n      fwrite(String, Number, Number, _bss_start);\n    else\n      fwrite(String, Number, Number, _bss_start);\n  }\n  <span class=\"supfact\">v18</span> = Number;\n  for (<span class=\"supfact\">i</span> = a3;; ++<span class=\"supfact\">i</span>) {\n    result = <span class=\"supfact\">i</span>;\n    if (<span class=\"supfact\">i</span> >= a4)\n      break;\n    for (<span class=\"supfact\">j</span> = a5; <span class=\"supfact\">j</span> < a6; ++<span class=\"supfact\">j</span>) {\n      v9 = <span class=\"supfact\">v18</span>++;\n      fprintf(a1, String, v9);\n      for (<span class=\"supfact\">k</span> = <span class=\"supfact\">a7</span>;\n           <span class=\"supfact\">k</span> < <span class=\"supfact\">a8</span>; ++<span class=\"supfact\">k</span>)\n        fprintf(\n            a1, String,\n            *(_QWORD *)(Number L * <span class=\"supfact\">k</span> +\n                        *(_QWORD *)(Number L * <span class=\"supfact\">j</span> +\n                                    *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                                                a2))));\n      fputc(Number, a1);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl printSlice(FILE *const outfile, tuple **const tuples,\n                        const unsigned int rowstart, const unsigned int rowend,\n                        const unsigned int colstart, const unsigned int colend,\n                        const unsigned int planestart,\n                        const unsigned int planeend, const bool xmgr) {\n  unsigned int v9;\n  unsigned int <span class=\"supfact\">plane</span>;\n  unsigned int <span class=\"supfact\">col</span>;\n  unsigned int <span class=\"supfact\">row</span>;\n  unsigned int <span class=\"supfact\">count</span>;\n  if (xmgr) {\n    fwrite(String, Number, Number, outfile);\n    fprintf(outfile, String, colstart, rowstart, colend, rowend);\n    if (colend - colstart == Number)\n      fwrite(String, Number, Number, outfile);\n    else\n      fwrite(String, Number, Number, outfile);\n    fwrite(String, Number, Number, outfile);\n    if (planeend - planestart == Number)\n      fwrite(String, Number, Number, _bss_start);\n    else\n      fwrite(String, Number, Number, _bss_start);\n  }\n  <span class=\"supfact\">count</span> = Number;\n  for (<span class=\"supfact\">row</span> = rowstart; <span class=\"supfact\">row</span> < rowend;\n       ++<span class=\"supfact\">row</span>) {\n    for (<span class=\"supfact\">col</span> = colstart; <span class=\"supfact\">col</span> < colend;\n         ++<span class=\"supfact\">col</span>) {\n      v9 = <span class=\"supfact\">count</span>++;\n      fprintf(outfile, String, v9);\n      for (<span class=\"supfact\">plane</span> = planestart; <span class=\"supfact\">plane</span> < planeend;\n           ++<span class=\"supfact\">plane</span>)\n        fprintf(outfile, String,\n                tuples[<span class=\"supfact\">row</span>][<span class=\"supfact\">col</span>]\n                      [<span class=\"supfact\">plane</span>]);\n      fputc(Number, outfile);\n    }\n  }\n}", "var": [{"name": "v18", "type": "unsigned int", "ref_name": "count", "ref_type": "unsigned int"}, {"name": "i", "type": "unsigned int", "ref_name": "row", "ref_type": "unsigned int"}, {"name": "j", "type": "unsigned int", "ref_name": "col", "ref_type": "unsigned int"}, {"name": "k", "type": "unsigned int", "ref_name": "plane", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "uyjulian", "repo_name": "krkr2_extra_plugin", "path": "uyjulian/krkr2_extra_plugin/3f4b1fe43018849c223855561285556d62c6a713a5dcb5d9b6ee1cf44245bce5", "path_in_repo": "uyjulian/krkr2_extra_plugin/drawdeviceIrrlicht/irrlicht/source/Irrlicht/libpng/pngwutil.o", "objdump": "000000000000224c <png_check_keyword>:\n    224c:\t55                   \tpush   %rbp\n    224d:\t48 89 e5             \tmov    %rsp,%rbp\n    2250:\t48 83 ec 70          \tsub    $0x70,%rsp\n    2254:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    2258:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n    225c:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n    2260:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n    2267:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    226b:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    2272:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n    2277:\t74 17                \tje     2290 <png_check_keyword+0x44>\n    2279:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    227d:\t48 89 c7             \tmov    %rax,%rdi\n    2280:\te8 00 00 00 00       \tcallq  2285 <png_check_keyword+0x39>\n    2285:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2289:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    228e:\t75 1b                \tjne    22ab <png_check_keyword+0x5f>\n    2290:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2294:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2299:\t48 89 c7             \tmov    %rax,%rdi\n    229c:\te8 00 00 00 00       \tcallq  22a1 <png_check_keyword+0x55>\n    22a1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22a6:\te9 83 02 00 00       \tjmpq   252e <png_check_keyword+0x2e2>\n    22ab:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    22af:\t8d 50 02             \tlea    0x2(%rax),%edx\n    22b2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    22b6:\t89 d6                \tmov    %edx,%esi\n    22b8:\t48 89 c7             \tmov    %rax,%rdi\n    22bb:\te8 00 00 00 00       \tcallq  22c0 <png_check_keyword+0x74>\n    22c0:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n    22c4:\t48 89 02             \tmov    %rax,(%rdx)\n    22c7:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    22cb:\t48 8b 00             \tmov    (%rax),%rax\n    22ce:\t48 85 c0             \ttest   %rax,%rax\n    22d1:\t75 1b                \tjne    22ee <png_check_keyword+0xa2>\n    22d3:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    22d7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    22dc:\t48 89 c7             \tmov    %rax,%rdi\n    22df:\te8 00 00 00 00       \tcallq  22e4 <png_check_keyword+0x98>\n    22e4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22e9:\te9 40 02 00 00       \tjmpq   252e <png_check_keyword+0x2e2>\n    22ee:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    22f2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    22f6:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    22fa:\t48 8b 00             \tmov    (%rax),%rax\n    22fd:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2301:\teb 74                \tjmp    2377 <png_check_keyword+0x12b>\n    2303:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2307:\t0f b6 00             \tmovzbl (%rax),%eax\n    230a:\t3c 1f                \tcmp    $0x1f,%al\n    230c:\t7e 16                \tjle    2324 <png_check_keyword+0xd8>\n    230e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2312:\t0f b6 00             \tmovzbl (%rax),%eax\n    2315:\t3c 7f                \tcmp    $0x7f,%al\n    2317:\t75 47                \tjne    2360 <png_check_keyword+0x114>\n    2319:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    231d:\t0f b6 00             \tmovzbl (%rax),%eax\n    2320:\t3c a0                \tcmp    $0xa0,%al\n    2322:\t77 3c                \tja     2360 <png_check_keyword+0x114>\n    2324:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2328:\t0f b6 00             \tmovzbl (%rax),%eax\n    232b:\t0f be d0             \tmovsbl %al,%edx\n    232e:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2332:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2337:\t48 89 c7             \tmov    %rax,%rdi\n    233a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    233f:\te8 00 00 00 00       \tcallq  2344 <png_check_keyword+0xf8>\n    2344:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    2348:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    234c:\t48 89 d6             \tmov    %rdx,%rsi\n    234f:\t48 89 c7             \tmov    %rax,%rdi\n    2352:\te8 00 00 00 00       \tcallq  2357 <png_check_keyword+0x10b>\n    2357:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    235b:\tc6 00 20             \tmovb   $0x20,(%rax)\n    235e:\teb 0d                \tjmp    236d <png_check_keyword+0x121>\n    2360:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2364:\t0f b6 10             \tmovzbl (%rax),%edx\n    2367:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    236b:\t88 10                \tmov    %dl,(%rax)\n    236d:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n    2372:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n    2377:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    237b:\t0f b6 00             \tmovzbl (%rax),%eax\n    237e:\t84 c0                \ttest   %al,%al\n    2380:\t75 81                \tjne    2303 <png_check_keyword+0xb7>\n    2382:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2386:\tc6 00 00             \tmovb   $0x0,(%rax)\n    2389:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    238d:\t48 8b 00             \tmov    (%rax),%rax\n    2390:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2394:\t48 83 ea 01          \tsub    $0x1,%rdx\n    2398:\t48 01 d0             \tadd    %rdx,%rax\n    239b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    239f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    23a3:\t0f b6 00             \tmovzbl (%rax),%eax\n    23a6:\t3c 20                \tcmp    $0x20,%al\n    23a8:\t75 32                \tjne    23dc <png_check_keyword+0x190>\n    23aa:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    23ae:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    23b3:\t48 89 c7             \tmov    %rax,%rdi\n    23b6:\te8 00 00 00 00       \tcallq  23bb <png_check_keyword+0x16f>\n    23bb:\teb 14                \tjmp    23d1 <png_check_keyword+0x185>\n    23bd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    23c1:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n    23c5:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n    23c9:\tc6 00 00             \tmovb   $0x0,(%rax)\n    23cc:\t48 83 6d f8 01       \tsubq   $0x1,-0x8(%rbp)\n    23d1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    23d5:\t0f b6 00             \tmovzbl (%rax),%eax\n    23d8:\t3c 20                \tcmp    $0x20,%al\n    23da:\t74 e1                \tje     23bd <png_check_keyword+0x171>\n    23dc:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    23e0:\t48 8b 00             \tmov    (%rax),%rax\n    23e3:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    23e7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    23eb:\t0f b6 00             \tmovzbl (%rax),%eax\n    23ee:\t3c 20                \tcmp    $0x20,%al\n    23f0:\t75 28                \tjne    241a <png_check_keyword+0x1ce>\n    23f2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    23f6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    23fb:\t48 89 c7             \tmov    %rax,%rdi\n    23fe:\te8 00 00 00 00       \tcallq  2403 <png_check_keyword+0x1b7>\n    2403:\teb 0a                \tjmp    240f <png_check_keyword+0x1c3>\n    2405:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n    240a:\t48 83 6d f8 01       \tsubq   $0x1,-0x8(%rbp)\n    240f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2413:\t0f b6 00             \tmovzbl (%rax),%eax\n    2416:\t3c 20                \tcmp    $0x20,%al\n    2418:\t74 eb                \tje     2405 <png_check_keyword+0x1b9>\n    241a:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n    2421:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    2425:\t48 8b 00             \tmov    (%rax),%rax\n    2428:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    242c:\teb 69                \tjmp    2497 <png_check_keyword+0x24b>\n    242e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2432:\t0f b6 00             \tmovzbl (%rax),%eax\n    2435:\t3c 20                \tcmp    $0x20,%al\n    2437:\t75 24                \tjne    245d <png_check_keyword+0x211>\n    2439:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n    243d:\t75 1e                \tjne    245d <png_check_keyword+0x211>\n    243f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2443:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    2447:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n    244b:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    244f:\t0f b6 12             \tmovzbl (%rdx),%edx\n    2452:\t88 10                \tmov    %dl,(%rax)\n    2454:\tc7 45 e4 01 00 00 00 \tmovl   $0x1,-0x1c(%rbp)\n    245b:\teb 35                \tjmp    2492 <png_check_keyword+0x246>\n    245d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2461:\t0f b6 00             \tmovzbl (%rax),%eax\n    2464:\t3c 20                \tcmp    $0x20,%al\n    2466:\t75 0e                \tjne    2476 <png_check_keyword+0x22a>\n    2468:\t48 83 6d f8 01       \tsubq   $0x1,-0x8(%rbp)\n    246d:\tc7 45 e0 01 00 00 00 \tmovl   $0x1,-0x20(%rbp)\n    2474:\teb 1c                \tjmp    2492 <png_check_keyword+0x246>\n    2476:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    247a:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    247e:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n    2482:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    2486:\t0f b6 12             \tmovzbl (%rdx),%edx\n    2489:\t88 10                \tmov    %dl,(%rax)\n    248b:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n    2492:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n    2497:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    249b:\t0f b6 00             \tmovzbl (%rax),%eax\n    249e:\t84 c0                \ttest   %al,%al\n    24a0:\t75 8c                \tjne    242e <png_check_keyword+0x1e2>\n    24a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    24a6:\tc6 00 00             \tmovb   $0x0,(%rax)\n    24a9:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n    24ad:\t74 11                \tje     24c0 <png_check_keyword+0x274>\n    24af:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    24b3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    24b8:\t48 89 c7             \tmov    %rax,%rdi\n    24bb:\te8 00 00 00 00       \tcallq  24c0 <png_check_keyword+0x274>\n    24c0:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    24c5:\t75 32                \tjne    24f9 <png_check_keyword+0x2ad>\n    24c7:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    24cb:\t48 8b 10             \tmov    (%rax),%rdx\n    24ce:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    24d2:\t48 89 d6             \tmov    %rdx,%rsi\n    24d5:\t48 89 c7             \tmov    %rax,%rdi\n    24d8:\te8 00 00 00 00       \tcallq  24dd <png_check_keyword+0x291>\n    24dd:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    24e1:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    24e8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    24ec:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    24f1:\t48 89 c7             \tmov    %rax,%rdi\n    24f4:\te8 00 00 00 00       \tcallq  24f9 <png_check_keyword+0x2ad>\n    24f9:\t48 83 7d f8 4f       \tcmpq   $0x4f,-0x8(%rbp)\n    24fe:\t76 2a                \tjbe    252a <png_check_keyword+0x2de>\n    2500:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2504:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2509:\t48 89 c7             \tmov    %rax,%rdi\n    250c:\te8 00 00 00 00       \tcallq  2511 <png_check_keyword+0x2c5>\n    2511:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    2515:\t48 05 78 02 00 00    \tadd    $0x278,%rax\n    251b:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    2522:\t48 c7 45 f8 4f 00 00 \tmovq   $0x4f,-0x8(%rbp)\n    2529:\t00 \n    252a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    252e:\tc9                   \tleaveq \n    252f:\tc3                   \tretq   ", "code_s": "size_t __fastcall png_check_keyword(__int64 a1, const char *a2,\n                                    const char **a3) {\n  size_t result;\n  const char *v4;\n  char *v5;\n  char *v6;\n  char <span class=\"supfact\">v8</span>[Number];\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  char *<span class=\"supfact\">v11</span>;\n  const char *<span class=\"supfact\">v12</span>;\n  size_t <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v9</span> = Number;\n  *a3 = Number L;\n  if (a2 && (<span class=\"supfact\">v13</span> = strlen(a2)) != Number) {\n    *a3 = (const char *)png_malloc_warn(\n        a1, (unsigned int)(<span class=\"supfact\">v13</span> + Number));\n    if (*a3) {\n      <span class=\"supfact\">v12</span> = a2;\n      <span class=\"supfact\">v11</span> = (char *)*a3;\n      while (*<span class=\"supfact\">v12</span>) {\n        if (*<span class=\"supfact\">v12</span> <= Number ||\n            *<span class=\"supfact\">v12</span> == Number && *<span class=\"supfact\">v12</span> <= Number) {\n          sprintf(<span class=\"supfact\">v8</span>, String,\n                  (unsigned int)*<span class=\"supfact\">v12</span>);\n          png_warning(a1, <span class=\"supfact\">v8</span>);\n          *<span class=\"supfact\">v11</span> = Number;\n        } else {\n          *<span class=\"supfact\">v11</span> = *<span class=\"supfact\">v12</span>;\n        }\n        ++<span class=\"supfact\">v12</span>;\n        ++<span class=\"supfact\">v11</span>;\n      }\n      *<span class=\"supfact\">v11</span> = Number;\n      <span class=\"supfact\">v12</span> = &(*a3)[<span class=\"supfact\">v13</span> - Number];\n      if (*<span class=\"supfact\">v12</span> == Number) {\n        png_warning(a1, String);\n        while (*<span class=\"supfact\">v12</span> == Number) {\n          v4 = <span class=\"supfact\">v12</span>--;\n          *v4 = Number;\n          --<span class=\"supfact\">v13</span>;\n        }\n      }\n      <span class=\"supfact\">v12</span> = *a3;\n      if (*<span class=\"supfact\">v12</span> == Number) {\n        png_warning(a1, String);\n        while (*<span class=\"supfact\">v12</span> == Number) {\n          ++<span class=\"supfact\">v12</span>;\n          --<span class=\"supfact\">v13</span>;\n        }\n      }\n      <span class=\"supfact\">v10</span> = Number;\n      <span class=\"supfact\">v11</span> = (char *)*a3;\n      while (*<span class=\"supfact\">v12</span>) {\n        if (*<span class=\"supfact\">v12</span> != Number || <span class=\"supfact\">v10</span>) {\n          if (*<span class=\"supfact\">v12</span> == Number) {\n            --<span class=\"supfact\">v13</span>;\n            <span class=\"supfact\">v9</span> = Number;\n          } else {\n            v6 = <span class=\"supfact\">v11</span>++;\n            *v6 = *<span class=\"supfact\">v12</span>;\n            <span class=\"supfact\">v10</span> = Number;\n          }\n        } else {\n          v5 = <span class=\"supfact\">v11</span>++;\n          *v5 = *<span class=\"supfact\">v12</span>;\n          <span class=\"supfact\">v10</span> = Number;\n        }\n        ++<span class=\"supfact\">v12</span>;\n      }\n      *<span class=\"supfact\">v11</span> = Number;\n      if (<span class=\"supfact\">v9</span>)\n        png_warning(a1, String);\n      if (!<span class=\"supfact\">v13</span>) {\n        png_free(a1, *a3);\n        *a3 = Number L;\n        png_warning(a1, String);\n      }\n      if (<span class=\"supfact\">v13</span> > Number) {\n        png_warning(a1, String);\n        a3[Number] = Number L;\n        <span class=\"supfact\">v13</span> = Number L;\n      }\n      result = <span class=\"supfact\">v13</span>;\n    } else {\n      png_warning(a1, String);\n      result = Number L;\n    }\n  } else {\n    png_warning(a1, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "png_size_t __cdecl png_check_keyword(png_structp png_ptr, png_charp key,\n                                     png_charpp new_key) {\n  png_size_t result;\n  png_charp v4;\n  png_charp v5;\n  png_charp v6;\n  char <span class=\"supfact\">msg</span>[Number];\n  int <span class=\"supfact\">kwarn</span>;\n  int <span class=\"supfact\">kflag</span>;\n  png_charp <span class=\"supfact\">dp</span>;\n  png_charp <span class=\"supfact\">kp</span>;\n  png_size_t <span class=\"supfact\">key_len</span>;\n  <span class=\"supfact\">kwarn</span> = Number;\n  *new_key = Number L;\n  if (key && (<span class=\"supfact\">key_len</span> = strlen(key)) != Number) {\n    *new_key = (char *)png_malloc_warn(\n        png_ptr, (unsigned int)(<span class=\"supfact\">key_len</span> + Number));\n    if (*new_key) {\n      <span class=\"supfact\">kp</span> = key;\n      <span class=\"supfact\">dp</span> = *new_key;\n      while (*<span class=\"supfact\">kp</span>) {\n        if (*<span class=\"supfact\">kp</span> <= Number ||\n            *<span class=\"supfact\">kp</span> == Number &&\n                (unsigned __int8)*<span class=\"supfact\">kp</span> <= Number) {\n          sprintf(<span class=\"supfact\">msg</span>, String,\n                  (unsigned int)*<span class=\"supfact\">kp</span>);\n          png_warning(png_ptr, <span class=\"supfact\">msg</span>);\n          *<span class=\"supfact\">dp</span> = Number;\n        } else {\n          *<span class=\"supfact\">dp</span> = *<span class=\"supfact\">kp</span>;\n        }\n        ++<span class=\"supfact\">kp</span>;\n        ++<span class=\"supfact\">dp</span>;\n      }\n      *<span class=\"supfact\">dp</span> = Number;\n      <span class=\"supfact\">kp</span> = &(*new_key)[<span class=\"supfact\">key_len</span> - Number];\n      if (*<span class=\"supfact\">kp</span> == Number) {\n        png_warning(png_ptr, String);\n        while (*<span class=\"supfact\">kp</span> == Number) {\n          v4 = <span class=\"supfact\">kp</span>--;\n          *v4 = Number;\n          --<span class=\"supfact\">key_len</span>;\n        }\n      }\n      <span class=\"supfact\">kp</span> = *new_key;\n      if (*<span class=\"supfact\">kp</span> == Number) {\n        png_warning(png_ptr, String);\n        while (*<span class=\"supfact\">kp</span> == Number) {\n          ++<span class=\"supfact\">kp</span>;\n          --<span class=\"supfact\">key_len</span>;\n        }\n      }\n      <span class=\"supfact\">kflag</span> = Number;\n      <span class=\"supfact\">dp</span> = *new_key;\n      while (*<span class=\"supfact\">kp</span>) {\n        if (*<span class=\"supfact\">kp</span> != Number || <span class=\"supfact\">kflag</span>) {\n          if (*<span class=\"supfact\">kp</span> == Number) {\n            --<span class=\"supfact\">key_len</span>;\n            <span class=\"supfact\">kwarn</span> = Number;\n          } else {\n            v6 = <span class=\"supfact\">dp</span>++;\n            *v6 = *<span class=\"supfact\">kp</span>;\n            <span class=\"supfact\">kflag</span> = Number;\n          }\n        } else {\n          v5 = <span class=\"supfact\">dp</span>++;\n          *v5 = *<span class=\"supfact\">kp</span>;\n          <span class=\"supfact\">kflag</span> = Number;\n        }\n        ++<span class=\"supfact\">kp</span>;\n      }\n      *<span class=\"supfact\">dp</span> = Number;\n      if (<span class=\"supfact\">kwarn</span>)\n        png_warning(png_ptr, String);\n      if (!<span class=\"supfact\">key_len</span>) {\n        png_free(png_ptr, *new_key);\n        *new_key = Number L;\n        png_warning(png_ptr, String);\n      }\n      if (<span class=\"supfact\">key_len</span> > Number) {\n        png_warning(png_ptr, String);\n        new_key[Number] = Number L;\n        <span class=\"supfact\">key_len</span> = Number L;\n      }\n      result = <span class=\"supfact\">key_len</span>;\n    } else {\n      png_warning(png_ptr, String);\n      result = Number L;\n    }\n  } else {\n    png_warning(png_ptr, String);\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v13", "type": "png_charp", "ref_name": "key_len", "ref_type": "png_size_t"}, {"name": "v12", "type": "png_charp", "ref_name": "kp", "ref_type": "png_charp"}, {"name": "v11", "type": "png_charp", "ref_name": "dp", "ref_type": "png_charp"}, {"name": "v10", "type": "int", "ref_name": "kflag", "ref_type": "int"}, {"name": "v9", "type": "int", "ref_name": "kwarn", "ref_type": "int"}, {"name": "v8", "type": "char[46]", "ref_name": "msg", "ref_type": "char[40]"}], "body_in_train": false}, {"repo_owner": "MisterPeModder", "repo_name": "RT", "path": "MisterPeModder/RT/d32bd1be9b2c1f33cf39397e643796afc7190e571ef6974c7c46195e7fc42b74", "path_in_repo": "MisterPeModder/RT//libs/sdl2/src/audio/SDL_audio.o", "objdump": "0000000000002fce <SDL_AudioQuit_REAL>:\n    2fce:\t55                   \tpush   %rbp\n    2fcf:\t48 89 e5             \tmov    %rsp,%rbp\n    2fd2:\t48 83 ec 10          \tsub    $0x10,%rsp\n    2fd6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2fdd <SDL_AudioQuit_REAL+0xf>\n    2fdd:\t48 85 c0             \ttest   %rax,%rax\n    2fe0:\t0f 84 90 00 00 00    \tje     3076 <SDL_AudioQuit_REAL+0xa8>\n    2fe6:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    2fed:\teb 17                \tjmp    3006 <SDL_AudioQuit_REAL+0x38>\n    2fef:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    2ff2:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    2ff9:\t00 \n    2ffa:\t48 89 c7             \tmov    %rax,%rdi\n    2ffd:\te8 fa ef ff ff       \tcallq  1ffc <close_audio_device>\n    3002:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    3006:\t83 7d fc 0f          \tcmpl   $0xf,-0x4(%rbp)\n    300a:\t76 e3                \tjbe    2fef <SDL_AudioQuit_REAL+0x21>\n    300c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3011:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3016:\te8 66 d8 ff ff       \tcallq  881 <free_device_list>\n    301b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3020:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3025:\te8 57 d8 ff ff       \tcallq  881 <free_device_list>\n    302a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3031 <SDL_AudioQuit_REAL+0x63>\n    3031:\tff d0                \tcallq  *%rax\n    3033:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 303a <SDL_AudioQuit_REAL+0x6c>\n    303a:\t48 89 c7             \tmov    %rax,%rdi\n    303d:\te8 00 00 00 00       \tcallq  3042 <SDL_AudioQuit_REAL+0x74>\n    3042:\tba d8 00 00 00       \tmov    $0xd8,%edx\n    3047:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    304c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3051:\te8 00 00 00 00       \tcallq  3056 <SDL_AudioQuit_REAL+0x88>\n    3056:\tba 80 00 00 00       \tmov    $0x80,%edx\n    305b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3060:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3065:\te8 00 00 00 00       \tcallq  306a <SDL_AudioQuit_REAL+0x9c>\n    306a:\te8 d9 d1 ff ff       \tcallq  248 <UnloadLibSampleRate>\n    306f:\te8 00 00 00 00       \tcallq  3074 <SDL_AudioQuit_REAL+0xa6>\n    3074:\teb 01                \tjmp    3077 <SDL_AudioQuit_REAL+0xa9>\n    3076:\t90                   \tnop\n    3077:\tc9                   \tleaveq \n    3078:\tc3                   \tretq   ", "code_s": "__int64 SDL_AudioQuit_REAL() {\n  __int64 result;\n  unsigned int <span class=\"supfact\">i</span>;\n  result = current_audio;\n  if (current_audio) {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>)\n      close_audio_device(open_devices[<span class=\"supfact\">i</span>]);\n    free_device_list(&qword_3AC8, &dword_3AC0);\n    free_device_list(&qword_3AD0, &dword_3AC4);\n    qword_3A90();\n    SDL_DestroyMutex_REAL(qword_3AB0);\n    SDL_memset_REAL(&current_audio, Number L, Number L);\n    SDL_memset_REAL(open_devices, Number L, Number L);\n    UnloadLibSampleRate();\n    result = SDL_FreeResampleFilter();\n  }\n  return result;\n}", "code_t": "void __cdecl SDL_AudioQuit_REAL() {\n  SDL_AudioDeviceID <span class=\"supfact\">i</span>;\n  if (current_audio.name) {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>)\n      close_audio_device(open_devices[<span class=\"supfact\">i</span>]);\n    free_device_list(&current_audio.outputDevices,\n                     &current_audio.outputDeviceCount);\n    free_device_list(&current_audio.inputDevices,\n                     &current_audio.inputDeviceCount);\n    current_audio.impl.Deinitialize();\n    SDL_DestroyMutex_REAL(current_audio.detectionLock);\n    SDL_memset_REAL(&current_audio, Number L, Number L);\n    SDL_memset_REAL(open_devices, Number L, Number L);\n    UnloadLibSampleRate();\n    SDL_FreeResampleFilter();\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "SDL_AudioDeviceID"}], "body_in_train": false}, {"repo_owner": "csjpeter", "repo_name": "psqldroid", "path": "csjpeter/psqldroid/32bfc6f94e7ccda738766e8a9f2bf7217e3a4f065570220aa915b304ca9d8d34", "path_in_repo": "csjpeter/psqldroid//src/backend/storage/large_object/inv_api.o", "objdump": "000000000000010e <close_lo_relation>:\n     10e:\t55                   \tpush   %rbp\n     10f:\t48 89 e5             \tmov    %rsp,%rbp\n     112:\t48 81 ec f0 00 00 00 \tsub    $0xf0,%rsp\n     119:\t89 f8                \tmov    %edi,%eax\n     11b:\t88 85 1c ff ff ff    \tmov    %al,-0xe4(%rbp)\n     121:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 128 <close_lo_relation+0x1a>\n     128:\t48 85 c0             \ttest   %rax,%rax\n     12b:\t75 10                \tjne    13d <close_lo_relation+0x2f>\n     12d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 134 <close_lo_relation+0x26>\n     134:\t48 85 c0             \ttest   %rax,%rax\n     137:\t0f 84 01 01 00 00    \tje     23e <close_lo_relation+0x130>\n     13d:\t80 bd 1c ff ff ff 00 \tcmpb   $0x0,-0xe4(%rbp)\n     144:\t0f 84 de 00 00 00    \tje     228 <close_lo_relation+0x11a>\n     14a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 151 <close_lo_relation+0x43>\n     151:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     155:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 15c <close_lo_relation+0x4e>\n     15c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     160:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 167 <close_lo_relation+0x59>\n     167:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     16b:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n     172:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     177:\t48 89 c7             \tmov    %rax,%rdi\n     17a:\te8 00 00 00 00       \tcallq  17f <close_lo_relation+0x71>\n     17f:\t85 c0                \ttest   %eax,%eax\n     181:\t75 5e                \tjne    1e1 <close_lo_relation+0xd3>\n     183:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n     18a:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 191 <close_lo_relation+0x83>\n     191:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 198 <close_lo_relation+0x8a>\n     198:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 19f <close_lo_relation+0x91>\n     19f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a6 <close_lo_relation+0x98>\n     1a6:\t48 85 c0             \ttest   %rax,%rax\n     1a9:\t74 14                \tje     1bf <close_lo_relation+0xb1>\n     1ab:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1b2 <close_lo_relation+0xa4>\n     1b2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     1b7:\t48 89 c7             \tmov    %rax,%rdi\n     1ba:\te8 00 00 00 00       \tcallq  1bf <close_lo_relation+0xb1>\n     1bf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c6 <close_lo_relation+0xb8>\n     1c6:\t48 85 c0             \ttest   %rax,%rax\n     1c9:\t74 3c                \tje     207 <close_lo_relation+0xf9>\n     1cb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d2 <close_lo_relation+0xc4>\n     1d2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     1d7:\t48 89 c7             \tmov    %rax,%rdi\n     1da:\te8 00 00 00 00       \tcallq  1df <close_lo_relation+0xd1>\n     1df:\teb 26                \tjmp    207 <close_lo_relation+0xf9>\n     1e1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     1e5:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1ec <close_lo_relation+0xde>\n     1ec:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     1f0:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1f7 <close_lo_relation+0xe9>\n     1f7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1fb:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 202 <close_lo_relation+0xf4>\n     202:\te8 00 00 00 00       \tcallq  207 <close_lo_relation+0xf9>\n     207:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     20b:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 212 <close_lo_relation+0x104>\n     212:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     216:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 21d <close_lo_relation+0x10f>\n     21d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     221:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 228 <close_lo_relation+0x11a>\n     228:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 233 <close_lo_relation+0x125>\n     22f:\t00 00 00 00 \n     233:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 23e <close_lo_relation+0x130>\n     23a:\t00 00 00 00 \n     23e:\t90                   \tnop\n     23f:\tc9                   \tleaveq \n     240:\tc3                   \tretq   ", "code_s": "__int64 __fastcall close_lo_relation(char a1) {\n  __int64 result;\n  struct __jmp_buf_tag <span class=\"supfact\">env</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  result = lo_heap_r;\n  if (lo_heap_r || (result = lo_index_r) != Number) {\n    if (a1) {\n      <span class=\"supfact\">v5</span> = CurrentResourceOwner;\n      <span class=\"supfact\">v4</span> = PG_exception_stack;\n      <span class=\"supfact\">v3</span> = error_context_stack;\n      if (_sigsetjmp(&<span class=\"supfact\">env</span>, Number)) {\n        PG_exception_stack = <span class=\"supfact\">v4</span>;\n        error_context_stack = <span class=\"supfact\">v3</span>;\n        CurrentResourceOwner = <span class=\"supfact\">v5</span>;\n        pg_re_throw();\n      } else {\n        PG_exception_stack = &<span class=\"supfact\">env</span>;\n        CurrentResourceOwner = TopTransactionResourceOwner;\n        if (lo_index_r)\n          index_close(lo_index_r, Number L);\n        if (lo_heap_r)\n          relation_close(lo_heap_r, Number L);\n      }\n      PG_exception_stack = <span class=\"supfact\">v4</span>;\n      error_context_stack = <span class=\"supfact\">v3</span>;\n      result = <span class=\"supfact\">v5</span>;\n      CurrentResourceOwner = <span class=\"supfact\">v5</span>;\n    }\n    lo_heap_r = Number L;\n    lo_index_r = Number L;\n  }\n  return result;\n}", "code_t": "void __cdecl close_lo_relation(bool isCommit) {\n  sigjmp_buf <span class=\"supfact\">local_sigjmp_buf</span>;\n  ErrorContextCallback_0 *<span class=\"supfact\">save_context_stack</span>;\n  sigjmp_buf *<span class=\"supfact\">save_exception_stack</span>;\n  ResourceOwner <span class=\"supfact\">currentOwner</span>;\n  if (lo_heap_r || lo_index_r) {\n    if (isCommit) {\n      <span class=\"supfact\">currentOwner</span> = (ResourceOwner)CurrentResourceOwner;\n      <span class=\"supfact\">save_exception_stack</span> = (sigjmp_buf *)PG_exception_stack;\n      <span class=\"supfact\">save_context_stack</span> =\n          (ErrorContextCallback_0 *)error_context_stack;\n      if (_sigsetjmp(<span class=\"supfact\">local_sigjmp_buf</span>, Number)) {\n        PG_exception_stack = <span class=\"supfact\">save_exception_stack</span>;\n        error_context_stack = <span class=\"supfact\">save_context_stack</span>;\n        CurrentResourceOwner = <span class=\"supfact\">currentOwner</span>;\n        pg_re_throw();\n      } else {\n        PG_exception_stack = <span class=\"supfact\">local_sigjmp_buf</span>;\n        CurrentResourceOwner = TopTransactionResourceOwner;\n        if (lo_index_r)\n          index_close(lo_index_r, Number L);\n        if (lo_heap_r)\n          relation_close(lo_heap_r, Number L);\n      }\n      PG_exception_stack = <span class=\"supfact\">save_exception_stack</span>;\n      error_context_stack = <span class=\"supfact\">save_context_stack</span>;\n      CurrentResourceOwner = <span class=\"supfact\">currentOwner</span>;\n    }\n    lo_heap_r = Number L;\n    lo_index_r = Number L;\n  }\n}", "var": [{"name": "v5", "type": "sigjmp_buf *", "ref_name": "currentOwner", "ref_type": "ResourceOwner"}, {"name": "v4", "type": "ErrorContextCallback_0 *", "ref_name": "save_exception_stack", "ref_type": "sigjmp_buf *"}, {"name": "v3", "type": "MemoryContext", "ref_name": "save_context_stack", "ref_type": "ErrorContextCallback_0 *"}, {"name": "env", "type": "__jmp_buf_tag[1]", "ref_name": "local_sigjmp_buf", "ref_type": "__jmp_buf_tag[1]"}], "body_in_train": false}, {"repo_owner": "xobs", "repo_name": "libxtaf", "path": "xobs/libxtaf/d71e43357cb204bacfa11edf7fb2c3fbe78f27f2d54843fb55cc1ccca05057c0", "path_in_repo": "xobs/libxtaf//reader", "objdump": "0000000000401526 <main>:\n  401526:\t55                   \tpush   %rbp\n  401527:\t48 89 e5             \tmov    %rsp,%rbp\n  40152a:\t48 81 ec 40 01 00 00 \tsub    $0x140,%rsp\n  401531:\t89 bd cc fe ff ff    \tmov    %edi,-0x134(%rbp)\n  401537:\t48 89 b5 c0 fe ff ff \tmov    %rsi,-0x140(%rbp)\n  40153e:\t83 bd cc fe ff ff 02 \tcmpl   $0x2,-0x134(%rbp)\n  401545:\t74 26                \tje     40156d <main+0x47>\n  401547:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n  40154e:\t48 8b 00             \tmov    (%rax),%rax\n  401551:\t48 89 c6             \tmov    %rax,%rsi\n  401554:\tbf ac 30 40 00       \tmov    $0x4030ac,%edi\n  401559:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40155e:\te8 0d fb ff ff       \tcallq  401070 <printf@plt>\n  401563:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401568:\te9 57 01 00 00       \tjmpq   4016c4 <main+0x19e>\n  40156d:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n  401574:\t48 83 c0 08          \tadd    $0x8,%rax\n  401578:\t48 8b 00             \tmov    (%rax),%rax\n  40157b:\t48 89 c7             \tmov    %rax,%rdi\n  40157e:\te8 82 0e 00 00       \tcallq  402405 <disk_init>\n  401583:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401587:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  40158c:\t75 0a                \tjne    401598 <main+0x72>\n  40158e:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401593:\te9 2c 01 00 00       \tjmpq   4016c4 <main+0x19e>\n  401598:\tbf c4 30 40 00       \tmov    $0x4030c4,%edi\n  40159d:\te8 ae fa ff ff       \tcallq  401050 <puts@plt>\n  4015a2:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4015a9:\teb 32                \tjmp    4015dd <main+0xb7>\n  4015ab:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4015ae:\t0f b6 d0             \tmovzbl %al,%edx\n  4015b1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4015b5:\t89 d6                \tmov    %edx,%esi\n  4015b7:\t48 89 c7             \tmov    %rax,%rdi\n  4015ba:\te8 a2 fc ff ff       \tcallq  401261 <part_disk_name>\n  4015bf:\t48 89 c2             \tmov    %rax,%rdx\n  4015c2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4015c5:\t83 c0 01             \tadd    $0x1,%eax\n  4015c8:\t89 c6                \tmov    %eax,%esi\n  4015ca:\tbf d8 30 40 00       \tmov    $0x4030d8,%edi\n  4015cf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4015d4:\te8 97 fa ff ff       \tcallq  401070 <printf@plt>\n  4015d9:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4015dd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4015e1:\t48 89 c7             \tmov    %rax,%rdi\n  4015e4:\te8 69 fc ff ff       \tcallq  401252 <part_disk_count>\n  4015e9:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4015ec:\t39 d0                \tcmp    %edx,%eax\n  4015ee:\t77 bb                \tja     4015ab <main+0x85>\n  4015f0:\t48 8b 15 c9 3b 00 00 \tmov    0x3bc9(%rip),%rdx        # 4051c0 <__TMC_END__>\n  4015f7:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n  4015fe:\tbe ff 00 00 00       \tmov    $0xff,%esi\n  401603:\t48 89 c7             \tmov    %rax,%rdi\n  401606:\te8 a5 fa ff ff       \tcallq  4010b0 <fgets@plt>\n  40160b:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n  401612:\tba 00 00 00 00       \tmov    $0x0,%edx\n  401617:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40161c:\t48 89 c7             \tmov    %rax,%rdi\n  40161f:\te8 fc fa ff ff       \tcallq  401120 <strtoul@plt>\n  401624:\t83 e8 01             \tsub    $0x1,%eax\n  401627:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40162a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40162d:\t0f b6 d0             \tmovzbl %al,%edx\n  401630:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401634:\t89 d6                \tmov    %edx,%esi\n  401636:\t48 89 c7             \tmov    %rax,%rdi\n  401639:\te8 b0 fc ff ff       \tcallq  4012ee <part_init>\n  40163e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  401642:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  401647:\t75 11                \tjne    40165a <main+0x134>\n  401649:\tbf e4 30 40 00       \tmov    $0x4030e4,%edi\n  40164e:\te8 bd fa ff ff       \tcallq  401110 <perror@plt>\n  401653:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401658:\teb 6a                \tjmp    4016c4 <main+0x19e>\n  40165a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40165e:\t48 89 c7             \tmov    %rax,%rdi\n  401661:\te8 75 02 00 00       \tcallq  4018db <xtaf_init>\n  401666:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40166a:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  40166f:\t75 11                \tjne    401682 <main+0x15c>\n  401671:\tbf fd 30 40 00       \tmov    $0x4030fd,%edi\n  401676:\te8 95 fa ff ff       \tcallq  401110 <perror@plt>\n  40167b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401680:\teb 42                \tjmp    4016c4 <main+0x19e>\n  401682:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401686:\t48 89 c7             \tmov    %rax,%rdi\n  401689:\te8 7c 0b 00 00       \tcallq  40220a <xtaf_get_root>\n  40168e:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  401692:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401696:\t48 89 c7             \tmov    %rax,%rdi\n  401699:\te8 ca 0b 00 00       \tcallq  402268 <xtaf_print_dir>\n  40169e:\t90                   \tnop\n  40169f:\t48 8b 15 1a 3b 00 00 \tmov    0x3b1a(%rip),%rdx        # 4051c0 <__TMC_END__>\n  4016a6:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n  4016ad:\tbe ff 00 00 00       \tmov    $0xff,%esi\n  4016b2:\t48 89 c7             \tmov    %rax,%rdi\n  4016b5:\te8 f6 f9 ff ff       \tcallq  4010b0 <fgets@plt>\n  4016ba:\t48 85 c0             \ttest   %rax,%rax\n  4016bd:\t75 e0                \tjne    40169f <main+0x179>\n  4016bf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4016c4:\tc9                   \tleaveq \n  4016c5:\tc3                   \tretq   ", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  char *v4;\n  int v5;\n  char <span class=\"supfact\">s</span>[Number];\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  _QWORD *<span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  if (argc == Number) {\n    <span class=\"supfact\">v10</span> = disk_init(argv[Number], argv, envp);\n    if (<span class=\"supfact\">v10</span>) {\n      puts(String);\n      for (<span class=\"supfact\">i</span> = Number;\n           (unsigned int)part_disk_count(<span class=\"supfact\">v10</span>) >\n           <span class=\"supfact\">i</span>;\n           ++<span class=\"supfact\">i</span>) {\n        v4 = part_disk_name(<span class=\"supfact\">v10</span>, <span class=\"supfact\">i</span>);\n        printf(String, <span class=\"supfact\">i</span> + Number, v4);\n      }\n      fgets(<span class=\"supfact\">s</span>, Number, _bss_start);\n      v5 = strtoul(<span class=\"supfact\">s</span>, Number L, Number);\n      <span class=\"supfact\">i</span> = v5 - Number;\n      <span class=\"supfact\">v9</span> =\n          part_init(<span class=\"supfact\">v10</span>, (unsigned __int8)v5 - Number);\n      if (<span class=\"supfact\">v9</span>) {\n        <span class=\"supfact\">v8</span> = xtaf_init(<span class=\"supfact\">v9</span>);\n        if (<span class=\"supfact\">v8</span>) {\n          <span class=\"supfact\">v7</span> = xtaf_get_root(<span class=\"supfact\">v8</span>);\n          xtaf_print_dir(<span class=\"supfact\">v7</span>);\n          while (fgets(<span class=\"supfact\">s</span>, Number, _bss_start))\n            ;\n          result = Number;\n        } else {\n          perror(String);\n          result = Number;\n        }\n      } else {\n        perror(String);\n        result = Number;\n      }\n    } else {\n      result = Number;\n    }\n  } else {\n    printf(String, *argv);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  char *v4;\n  int v5;\n  char <span class=\"supfact\">input_str</span>[Number];\n  xtaf_dir *<span class=\"supfact\">dir</span>;\n  <span class=\"supfact\">xtaf</span> *<span class=\"supfact\">xtaf</span>;\n  <span class=\"supfact\">part</span> *<span class=\"supfact\">part</span>;\n  <span class=\"supfact\">disk</span> *<span class=\"supfact\">disk</span>;\n  int <span class=\"supfact\">part_num</span>;\n  if (argc == Number) {\n    <span class=\"supfact\">disk</span> = disk_init((char *)argv[Number]);\n    if (<span class=\"supfact\">disk</span>) {\n      puts(String);\n      for (<span class=\"supfact\">part_num</span> = Number;\n           part_disk_count(<span class=\"supfact\">disk</span>) > <span class=\"supfact\">part_num</span>;\n           ++<span class=\"supfact\">part_num</span>) {\n        v4 = part_disk_name(<span class=\"supfact\">disk</span>, <span class=\"supfact\">part_num</span>);\n        printf(String, (unsigned int)(<span class=\"supfact\">part_num</span> + Number), v4);\n      }\n      fgets(<span class=\"supfact\">input_str</span>, Number, _bss_start);\n      v5 = strtoul(<span class=\"supfact\">input_str</span>, Number L, Number);\n      <span class=\"supfact\">part_num</span> = v5 - Number;\n      <span class=\"supfact\">part</span> =\n          part_init(<span class=\"supfact\">disk</span>, (unsigned __int8)v5 - Number);\n      if (<span class=\"supfact\">part</span>) {\n        <span class=\"supfact\">xtaf</span> = xtaf_init(<span class=\"supfact\">part</span>);\n        if (<span class=\"supfact\">xtaf</span>) {\n          <span class=\"supfact\">dir</span> = xtaf_get_root(<span class=\"supfact\">xtaf</span>);\n          xtaf_print_dir(<span class=\"supfact\">dir</span>);\n          while (fgets(<span class=\"supfact\">input_str</span>, Number, _bss_start))\n            ;\n          result = Number;\n        } else {\n          perror(String);\n          result = Number;\n        }\n      } else {\n        perror(String);\n        result = Number;\n      }\n    } else {\n      result = Number;\n    }\n  } else {\n    printf(String, *argv);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "i", "type": "int", "ref_name": "part_num", "ref_type": "int"}, {"name": "v10", "type": "__unk__", "ref_name": "disk", "ref_type": "__unk__"}, {"name": "v9", "type": "__unk__", "ref_name": "part", "ref_type": "part *"}, {"name": "v8", "type": "__unk__", "ref_name": "xtaf", "ref_type": "__unk__"}, {"name": "v7", "type": "__unk__", "ref_name": "dir", "ref_type": "__unk__"}, {"name": "s", "type": "char[256]", "ref_name": "input_str", "ref_type": "char[256]"}], "body_in_train": false}, {"repo_owner": "mligor", "repo_name": "jucpp", "path": "mligor/jucpp/5869f61513beec07fe02719c8b5102d7ceba8929c4aa32c31c6f9689f11dbc7b", "path_in_repo": "mligor/jucpp//build/mongoose_lib.obj", "objdump": "000000000000dbe4 <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts>:\n    dbe4:\t55                   \tpush   %rbp\n    dbe5:\t48 89 e5             \tmov    %rsp,%rbp\n    dbe8:\t48 81 ec 30 02 00 00 \tsub    $0x230,%rsp\n    dbef:\t48 89 bd f8 fd ff ff \tmov    %rdi,-0x208(%rbp)\n    dbf6:\t48 89 b5 f0 fd ff ff \tmov    %rsi,-0x210(%rbp)\n    dbfd:\t48 89 95 e8 fd ff ff \tmov    %rdx,-0x218(%rbp)\n    dc04:\t48 89 8d e0 fd ff ff \tmov    %rcx,-0x220(%rbp)\n    dc0b:\t4c 89 85 d8 fd ff ff \tmov    %r8,-0x228(%rbp)\n    dc12:\t48 8b 85 e0 fd ff ff \tmov    -0x220(%rbp),%rax\n    dc19:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    dc1e:\t48 89 c7             \tmov    %rax,%rdi\n    dc21:\te8 00 00 00 00       \tcallq  dc26 <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x42>\n    dc26:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    dc2a:\t48 8b 85 e8 fd ff ff \tmov    -0x218(%rbp),%rax\n    dc31:\t8b 40 18             \tmov    0x18(%rax),%eax\n    dc34:\t25 00 f0 00 00       \tand    $0xf000,%eax\n    dc39:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n    dc3e:\t75 3f                \tjne    dc7f <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x9b>\n    dc40:\t48 8b 85 d8 fd ff ff \tmov    -0x228(%rbp),%rax\n    dc47:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    dc4b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    dc50:\t48 89 c7             \tmov    %rax,%rdi\n    dc53:\te8 00 00 00 00       \tcallq  dc58 <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x74>\n    dc58:\t85 c0                \ttest   %eax,%eax\n    dc5a:\t74 23                \tje     dc7f <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x9b>\n    dc5c:\t48 8b 85 f8 fd ff ff \tmov    -0x208(%rbp),%rax\n    dc63:\tba 00 00 00 00       \tmov    $0x0,%edx\n    dc68:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    dc6d:\t48 89 c7             \tmov    %rax,%rdi\n    dc70:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    dc75:\te8 00 00 00 00       \tcallq  dc7a <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x96>\n    dc7a:\te9 12 01 00 00       \tjmpq   dd91 <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x1ad>\n    dc7f:\t48 8b 85 f8 fd ff ff \tmov    -0x208(%rbp),%rax\n    dc86:\tba 9c 00 00 00       \tmov    $0x9c,%edx\n    dc8b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    dc90:\t48 89 c7             \tmov    %rax,%rdi\n    dc93:\te8 00 00 00 00       \tcallq  dc98 <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0xb4>\n    dc98:\t48 8b 85 e0 fd ff ff \tmov    -0x220(%rbp),%rax\n    dc9f:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n    dca3:\t48 8b 85 e0 fd ff ff \tmov    -0x220(%rbp),%rax\n    dcaa:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    dcae:\t89 c1                \tmov    %eax,%ecx\n    dcb0:\t48 8d 85 00 fe ff ff \tlea    -0x200(%rbp),%rax\n    dcb7:\t49 89 d0             \tmov    %rdx,%r8\n    dcba:\tba 00 00 00 00       \tmov    $0x0,%edx\n    dcbf:\tbe f4 01 00 00       \tmov    $0x1f4,%esi\n    dcc4:\t48 89 c7             \tmov    %rax,%rdi\n    dcc7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    dccc:\te8 00 00 00 00       \tcallq  dcd1 <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0xed>\n    dcd1:\t48 8b 95 e8 fd ff ff \tmov    -0x218(%rbp),%rdx\n    dcd8:\t48 8d 8d 00 fe ff ff \tlea    -0x200(%rbp),%rcx\n    dcdf:\t48 8b 85 f8 fd ff ff \tmov    -0x208(%rbp),%rax\n    dce6:\t48 89 ce             \tmov    %rcx,%rsi\n    dce9:\t48 89 c7             \tmov    %rax,%rdi\n    dcec:\te8 1f fe ff ff       \tcallq  db10 <_ZL14mg_print_propsP13mg_connectionPKcP4stat>\n    dcf1:\t48 8b 85 e8 fd ff ff \tmov    -0x218(%rbp),%rax\n    dcf8:\t8b 40 18             \tmov    0x18(%rax),%eax\n    dcfb:\t25 00 f0 00 00       \tand    $0xf000,%eax\n    dd00:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n    dd05:\t75 23                \tjne    dd2a <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x146>\n    dd07:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    dd0c:\t74 15                \tje     dd23 <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x13f>\n    dd0e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    dd12:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    dd17:\t48 89 c7             \tmov    %rax,%rdi\n    dd1a:\te8 00 00 00 00       \tcallq  dd1f <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x13b>\n    dd1f:\t85 c0                \ttest   %eax,%eax\n    dd21:\t74 07                \tje     dd2a <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x146>\n    dd23:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    dd28:\teb 05                \tjmp    dd2f <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x14b>\n    dd2a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    dd2f:\t84 c0                \ttest   %al,%al\n    dd31:\t74 22                \tje     dd55 <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x171>\n    dd33:\t48 8b 95 d8 fd ff ff \tmov    -0x228(%rbp),%rdx\n    dd3a:\t48 8b b5 f0 fd ff ff \tmov    -0x210(%rbp),%rsi\n    dd41:\t48 8b 85 f8 fd ff ff \tmov    -0x208(%rbp),%rax\n    dd48:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    dd4d:\t48 89 c7             \tmov    %rax,%rdi\n    dd50:\te8 f8 fa ff ff       \tcallq  d84d <_ZL17mg_scan_directoryP13mg_connectionPKcPK18mg_serve_http_optsPFvS0_S2_P4statE>\n    dd55:\t48 8b 85 f8 fd ff ff \tmov    -0x208(%rbp),%rax\n    dd5c:\tba 11 00 00 00       \tmov    $0x11,%edx\n    dd61:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    dd66:\t48 89 c7             \tmov    %rax,%rdi\n    dd69:\te8 00 00 00 00       \tcallq  dd6e <_ZL18mg_handle_propfindP13mg_connectionPKcP4statP12http_messageP18mg_serve_http_opts+0x18a>\n    dd6e:\t48 8b 85 f8 fd ff ff \tmov    -0x208(%rbp),%rax\n    dd75:\t48 8b 80 c0 00 00 00 \tmov    0xc0(%rax),%rax\n    dd7c:\t80 cc 04             \tor     $0x4,%ah\n    dd7f:\t48 89 c2             \tmov    %rax,%rdx\n    dd82:\t48 8b 85 f8 fd ff ff \tmov    -0x208(%rbp),%rax\n    dd89:\t48 89 90 c0 00 00 00 \tmov    %rdx,0xc0(%rax)\n    dd90:\t90                   \tnop\n    dd91:\t90                   \tnop\n    dd92:\tc9                   \tleaveq \n    dd93:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mg_handle_propfind(_QWORD *a1, const char *a2, __int64 a3,\n                                      __int64 a4, __int64 a5) {\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 result;\n  __int64 v10;\n  __int64 v11;\n  char <span class=\"supfact\">s</span>[Number];\n  __int64 <span class=\"supfact\">v16</span>;\n  <span class=\"supfact\">v16</span> = mg_get_http_header(a4, String);\n  if ((*(_DWORD *)(a3 + Number) & Number) == Number &&\n      strcmp(*(const char **)(a5 + Number), String))\n    return mg_printf((__int64)a1, (__int64)String, (__int64)String, v5, v6, v7);\n  mg_send(a1, (__int64)String String String String String, Number);\n  snprintf(<span class=\"supfact\">s</span>, Number, String, *(_QWORD *)(a4 + Number),\n           *(const char **)(a4 + Number));\n  mg_print_props((__int64)a1, <span class=\"supfact\">s</span>, a3);\n  if ((*(_DWORD *)(a3 + Number) & Number) == Number &&\n      (!<span class=\"supfact\">v16</span> ||\n       (unsigned int)mg_vcmp(<span class=\"supfact\">v16</span>, String)))\n    mg_scan_directory(\n        (__int64)a1, a2, a5,\n        (void(__fastcall *)(__int64, char *, char *))mg_print_props);\n  mg_send(a1, (__int64)String, Number);\n  v10 = a1[Number];\n  BYTE1(v10) |= Number;\n  v11 = v10;\n  result = (__int64)a1;\n  a1[Number] = v11;\n  return result;\n}", "code_t": "void __cdecl mg_handle_propfind(mg_connection *nc, const char *path,\n                                cs_stat_t *stp, http_message *hm,\n                                mg_serve_http_opts *opts) {\n  unsigned __int64 v6;\n  char <span class=\"supfact\">uri</span>[Number];\n  const mg_str *<span class=\"supfact\">depth</span>;\n  <span class=\"supfact\">depth</span> = mg_get_http_header(hm, String);\n  if ((stp->st_mode & Number) != Number ||\n      !strcmp(opts->enable_directory_listing, String)) {\n    mg_send(nc, String String String String String, Number);\n    snprintf(<span class=\"supfact\">uri</span>, Number, String, hm-><span class=\"supfact\">uri</span>.len,\n             hm-><span class=\"supfact\">uri</span>.p);\n    mg_print_props(nc, <span class=\"supfact\">uri</span>, stp);\n    if ((stp->st_mode & Number) == Number &&\n        (!<span class=\"supfact\">depth</span> || mg_vcmp(<span class=\"supfact\">depth</span>, String)))\n      mg_scan_directory(\n          nc, path, opts,\n          (void (*)(mg_connection *, const char *, cs_stat_t *))mg_print_props);\n    mg_send(nc, String, Number);\n    v6 = nc->flags;\n    BYTE1(v6) |= Number;\n    nc->flags = v6;\n  } else {\n    mg_printf(nc, String, String);\n  }\n}", "var": [{"name": "v16", "type": "const char *", "ref_name": "depth", "ref_type": "__unk__"}, {"name": "s", "type": "char[512]", "ref_name": "uri", "ref_type": "char[500]"}], "body_in_train": false}, {"repo_owner": "edwardbadboy", "repo_name": "sanlock-ubuntu", "path": "edwardbadboy/sanlock-ubuntu/ba6a963446e00e75e4576cc4067a815a450c7f59f2ee90e789fe0704bd744cef", "path_in_repo": "edwardbadboy/sanlock-ubuntu/wdmd/wdmd", "objdump": "00000000000035d5 <setup_watchdog>:\n    35d5:\t55                   \tpush   %rbp\n    35d6:\t48 89 e5             \tmov    %rsp,%rbp\n    35d9:\t53                   \tpush   %rbx\n    35da:\t48 83 ec 18          \tsub    $0x18,%rsp\n    35de:\tbe 01 00 08 00       \tmov    $0x80001,%esi\n    35e3:\t48 8d 3d d6 1c 00 00 \tlea    0x1cd6(%rip),%rdi        # 52c0 <_IO_stdin_used+0x2c0>\n    35ea:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    35ef:\te8 ac ec ff ff       \tcallq  22a0 <open@plt>\n    35f4:\t89 05 26 5b 00 00    \tmov    %eax,0x5b26(%rip)        # 9120 <dev_fd>\n    35fa:\t8b 05 20 5b 00 00    \tmov    0x5b20(%rip),%eax        # 9120 <dev_fd>\n    3600:\t85 c0                \ttest   %eax,%eax\n    3602:\t79 53                \tjns    3657 <setup_watchdog+0x82>\n    3604:\t8b 05 ea 4a 00 00    \tmov    0x4aea(%rip),%eax        # 80f4 <daemon_debug>\n    360a:\t85 c0                \ttest   %eax,%eax\n    360c:\t74 28                \tje     3636 <setup_watchdog+0x61>\n    360e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3613:\te8 c8 eb ff ff       \tcallq  21e0 <time@plt>\n    3618:\t48 89 c2             \tmov    %rax,%rdx\n    361b:\t48 8b 05 9e 4a 00 00 \tmov    0x4a9e(%rip),%rax        # 80c0 <stderr@@GLIBC_2.2.5>\n    3622:\t48 8d 35 a7 1c 00 00 \tlea    0x1ca7(%rip),%rsi        # 52d0 <_IO_stdin_used+0x2d0>\n    3629:\t48 89 c7             \tmov    %rax,%rdi\n    362c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3631:\te8 6a eb ff ff       \tcallq  21a0 <fprintf@plt>\n    3636:\t48 8d 35 c3 1c 00 00 \tlea    0x1cc3(%rip),%rsi        # 5300 <_IO_stdin_used+0x300>\n    363d:\tbf 03 00 00 00       \tmov    $0x3,%edi\n    3642:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3647:\te8 b4 eb ff ff       \tcallq  2200 <syslog@plt>\n    364c:\t8b 05 ce 5a 00 00    \tmov    0x5ace(%rip),%eax        # 9120 <dev_fd>\n    3652:\te9 d9 01 00 00       \tjmpq   3830 <setup_watchdog+0x25b>\n    3657:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n    365e:\t8b 05 bc 5a 00 00    \tmov    0x5abc(%rip),%eax        # 9120 <dev_fd>\n    3664:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    3668:\tbe 07 57 04 80       \tmov    $0x80045707,%esi\n    366d:\t89 c7                \tmov    %eax,%edi\n    366f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3674:\te8 e7 ea ff ff       \tcallq  2160 <ioctl@plt>\n    3679:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    367c:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    3680:\t79 57                \tjns    36d9 <setup_watchdog+0x104>\n    3682:\t8b 05 6c 4a 00 00    \tmov    0x4a6c(%rip),%eax        # 80f4 <daemon_debug>\n    3688:\t85 c0                \ttest   %eax,%eax\n    368a:\t74 28                \tje     36b4 <setup_watchdog+0xdf>\n    368c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3691:\te8 4a eb ff ff       \tcallq  21e0 <time@plt>\n    3696:\t48 89 c2             \tmov    %rax,%rdx\n    3699:\t48 8b 05 20 4a 00 00 \tmov    0x4a20(%rip),%rax        # 80c0 <stderr@@GLIBC_2.2.5>\n    36a0:\t48 8d 35 89 1c 00 00 \tlea    0x1c89(%rip),%rsi        # 5330 <_IO_stdin_used+0x330>\n    36a7:\t48 89 c7             \tmov    %rax,%rdi\n    36aa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    36af:\te8 ec ea ff ff       \tcallq  21a0 <fprintf@plt>\n    36b4:\t48 8d 35 a5 1c 00 00 \tlea    0x1ca5(%rip),%rsi        # 5360 <_IO_stdin_used+0x360>\n    36bb:\tbf 03 00 00 00       \tmov    $0x3,%edi\n    36c0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    36c5:\te8 36 eb ff ff       \tcallq  2200 <syslog@plt>\n    36ca:\te8 22 fe ff ff       \tcallq  34f1 <close_watchdog>\n    36cf:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    36d4:\te9 57 01 00 00       \tjmpq   3830 <setup_watchdog+0x25b>\n    36d9:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n    36dc:\t8b 05 32 49 00 00    \tmov    0x4932(%rip),%eax        # 8014 <fire_timeout>\n    36e2:\t39 c2                \tcmp    %eax,%edx\n    36e4:\t0f 84 e5 00 00 00    \tje     37cf <setup_watchdog+0x1fa>\n    36ea:\t8b 05 24 49 00 00    \tmov    0x4924(%rip),%eax        # 8014 <fire_timeout>\n    36f0:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    36f3:\t8b 05 27 5a 00 00    \tmov    0x5a27(%rip),%eax        # 9120 <dev_fd>\n    36f9:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    36fd:\tbe 06 57 04 c0       \tmov    $0xc0045706,%esi\n    3702:\t89 c7                \tmov    %eax,%edi\n    3704:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3709:\te8 52 ea ff ff       \tcallq  2160 <ioctl@plt>\n    370e:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    3711:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    3715:\t79 57                \tjns    376e <setup_watchdog+0x199>\n    3717:\t8b 05 d7 49 00 00    \tmov    0x49d7(%rip),%eax        # 80f4 <daemon_debug>\n    371d:\t85 c0                \ttest   %eax,%eax\n    371f:\t74 28                \tje     3749 <setup_watchdog+0x174>\n    3721:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    3726:\te8 b5 ea ff ff       \tcallq  21e0 <time@plt>\n    372b:\t48 89 c2             \tmov    %rax,%rdx\n    372e:\t48 8b 05 8b 49 00 00 \tmov    0x498b(%rip),%rax        # 80c0 <stderr@@GLIBC_2.2.5>\n    3735:\t48 8d 35 4c 1c 00 00 \tlea    0x1c4c(%rip),%rsi        # 5388 <_IO_stdin_used+0x388>\n    373c:\t48 89 c7             \tmov    %rax,%rdi\n    373f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3744:\te8 57 ea ff ff       \tcallq  21a0 <fprintf@plt>\n    3749:\t48 8d 35 68 1c 00 00 \tlea    0x1c68(%rip),%rsi        # 53b8 <_IO_stdin_used+0x3b8>\n    3750:\tbf 03 00 00 00       \tmov    $0x3,%edi\n    3755:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    375a:\te8 a1 ea ff ff       \tcallq  2200 <syslog@plt>\n    375f:\te8 8d fd ff ff       \tcallq  34f1 <close_watchdog>\n    3764:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    3769:\te9 c2 00 00 00       \tjmpq   3830 <setup_watchdog+0x25b>\n    376e:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n    3771:\t8b 05 9d 48 00 00    \tmov    0x489d(%rip),%eax        # 8014 <fire_timeout>\n    3777:\t39 c2                \tcmp    %eax,%edx\n    3779:\t74 57                \tje     37d2 <setup_watchdog+0x1fd>\n    377b:\t8b 05 73 49 00 00    \tmov    0x4973(%rip),%eax        # 80f4 <daemon_debug>\n    3781:\t85 c0                \ttest   %eax,%eax\n    3783:\t74 28                \tje     37ad <setup_watchdog+0x1d8>\n    3785:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    378a:\te8 51 ea ff ff       \tcallq  21e0 <time@plt>\n    378f:\t48 89 c2             \tmov    %rax,%rdx\n    3792:\t48 8b 05 27 49 00 00 \tmov    0x4927(%rip),%rax        # 80c0 <stderr@@GLIBC_2.2.5>\n    3799:\t48 8d 35 40 1c 00 00 \tlea    0x1c40(%rip),%rsi        # 53e0 <_IO_stdin_used+0x3e0>\n    37a0:\t48 89 c7             \tmov    %rax,%rdi\n    37a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    37a8:\te8 f3 e9 ff ff       \tcallq  21a0 <fprintf@plt>\n    37ad:\t48 8d 35 5c 1c 00 00 \tlea    0x1c5c(%rip),%rsi        # 5410 <_IO_stdin_used+0x410>\n    37b4:\tbf 03 00 00 00       \tmov    $0x3,%edi\n    37b9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    37be:\te8 3d ea ff ff       \tcallq  2200 <syslog@plt>\n    37c3:\te8 29 fd ff ff       \tcallq  34f1 <close_watchdog>\n    37c8:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    37cd:\teb 61                \tjmp    3830 <setup_watchdog+0x25b>\n    37cf:\t90                   \tnop\n    37d0:\teb 01                \tjmp    37d3 <setup_watchdog+0x1fe>\n    37d2:\t90                   \tnop\n    37d3:\t8b 05 1b 49 00 00    \tmov    0x491b(%rip),%eax        # 80f4 <daemon_debug>\n    37d9:\t85 c0                \ttest   %eax,%eax\n    37db:\t74 30                \tje     380d <setup_watchdog+0x238>\n    37dd:\t8b 1d 31 48 00 00    \tmov    0x4831(%rip),%ebx        # 8014 <fire_timeout>\n    37e3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    37e8:\te8 f3 e9 ff ff       \tcallq  21e0 <time@plt>\n    37ed:\t48 89 c2             \tmov    %rax,%rdx\n    37f0:\t48 8b 05 c9 48 00 00 \tmov    0x48c9(%rip),%rax        # 80c0 <stderr@@GLIBC_2.2.5>\n    37f7:\t89 d9                \tmov    %ebx,%ecx\n    37f9:\t48 8d 35 38 1c 00 00 \tlea    0x1c38(%rip),%rsi        # 5438 <_IO_stdin_used+0x438>\n    3800:\t48 89 c7             \tmov    %rax,%rdi\n    3803:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3808:\te8 93 e9 ff ff       \tcallq  21a0 <fprintf@plt>\n    380d:\t8b 05 01 48 00 00    \tmov    0x4801(%rip),%eax        # 8014 <fire_timeout>\n    3813:\t89 c2                \tmov    %eax,%edx\n    3815:\t48 8d 35 4c 1c 00 00 \tlea    0x1c4c(%rip),%rsi        # 5468 <_IO_stdin_used+0x468>\n    381c:\tbf 03 00 00 00       \tmov    $0x3,%edi\n    3821:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3826:\te8 d5 e9 ff ff       \tcallq  2200 <syslog@plt>\n    382b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3830:\t48 83 c4 18          \tadd    $0x18,%rsp\n    3834:\t5b                   \tpop    %rbx\n    3835:\t5d                   \tpop    %rbp\n    3836:\tc3                   \tretq   ", "code_s": "__int64 setup_watchdog() {\n  time_t v0;\n  __int64 result;\n  time_t v2;\n  time_t v3;\n  time_t v4;\n  unsigned int v5;\n  time_t v6;\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  dev_fd = open(String, Number);\n  if (dev_fd < Number) {\n    if (daemon_debug) {\n      v0 = time(Number L);\n      fprintf(stderr, String, v0);\n    }\n    syslog(Number, String);\n    return (unsigned int)dev_fd;\n  }\n  <span class=\"supfact\">v7</span> = Number;\n  <span class=\"supfact\">v8</span> = ioctl(dev_fd, Number, &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v8</span> < Number) {\n    if (daemon_debug) {\n      v2 = time(Number L);\n      fprintf(stderr, String, v2);\n    }\n    syslog(Number, String);\n    close_watchdog();\n    return Number;\n  }\n  if (<span class=\"supfact\">v7</span> == fire_timeout)\n    goto LABEL_18;\n  <span class=\"supfact\">v7</span> = fire_timeout;\n  <span class=\"supfact\">v8</span> = ioctl(dev_fd, Number, &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v8</span> < Number) {\n    if (daemon_debug) {\n      v3 = time(Number L);\n      fprintf(stderr, String, v3);\n    }\n    syslog(Number, String);\n    close_watchdog();\n    return Number;\n  }\n  if (<span class=\"supfact\">v7</span> == fire_timeout) {\n  LABEL_18:\n    if (daemon_debug) {\n      v5 = fire_timeout;\n      v6 = time(Number L);\n      fprintf(stderr, String, v6, v5);\n    }\n    syslog(Number, String, (unsigned int)fire_timeout);\n    result = Number L;\n  } else {\n    if (daemon_debug) {\n      v4 = time(Number L);\n      fprintf(stderr, String, v4);\n    }\n    syslog(Number, String);\n    close_watchdog();\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl setup_watchdog() {\n  time_t v0;\n  int result;\n  time_t v2;\n  time_t v3;\n  time_t v4;\n  unsigned int v5;\n  time_t v6;\n  int <span class=\"supfact\">timeout</span>;\n  int <span class=\"supfact\">rv</span>;\n  dev_fd = open(String, Number);\n  if (dev_fd < Number) {\n    if (daemon_debug) {\n      v0 = time(Number L);\n      fprintf(stderr, String, v0);\n    }\n    syslog(Number, String);\n    return dev_fd;\n  }\n  <span class=\"supfact\">timeout</span> = Number;\n  <span class=\"supfact\">rv</span> = ioctl(dev_fd, Number, &<span class=\"supfact\">timeout</span>);\n  if (<span class=\"supfact\">rv</span> < Number) {\n    if (daemon_debug) {\n      v2 = time(Number L);\n      fprintf(stderr, String, v2);\n    }\n    syslog(Number, String);\n    close_watchdog();\n    return Number;\n  }\n  if (<span class=\"supfact\">timeout</span> == fire_timeout)\n    goto out;\n  <span class=\"supfact\">timeout</span> = fire_timeout;\n  <span class=\"supfact\">rv</span> = ioctl(dev_fd, Number, &<span class=\"supfact\">timeout</span>);\n  if (<span class=\"supfact\">rv</span> < Number) {\n    if (daemon_debug) {\n      v3 = time(Number L);\n      fprintf(stderr, String, v3);\n    }\n    syslog(Number, String);\n    close_watchdog();\n    return Number;\n  }\n  if (<span class=\"supfact\">timeout</span> == fire_timeout) {\n  out:\n    if (daemon_debug) {\n      v5 = fire_timeout;\n      v6 = time(Number L);\n      fprintf(stderr, String, v6, v5);\n    }\n    syslog(Number, String, (unsigned int)fire_timeout);\n    result = Number;\n  } else {\n    if (daemon_debug) {\n      v4 = time(Number L);\n      fprintf(stderr, String, v4);\n    }\n    syslog(Number, String);\n    close_watchdog();\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v8", "type": "int", "ref_name": "rv", "ref_type": "int"}, {"name": "v7", "type": "int", "ref_name": "timeout", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "popo55668", "repo_name": "DAG-Aware-MIG-Rewriting", "path": "popo55668/DAG-Aware-MIG-Rewriting/25ee152f6f53e0a8e184a1e6bf6a9586993d4b14421202c47a91e44bf39fa10a", "path_in_repo": "popo55668/DAG-Aware-MIG-Rewriting//src/aig/saig/saigSimMv.o", "objdump": "0000000000001582 <Saig_ManCreateReducedAig>:\n    1582:\t55                   \tpush   %rbp\n    1583:\t48 89 e5             \tmov    %rsp,%rbp\n    1586:\t53                   \tpush   %rbx\n    1587:\t48 83 ec 38          \tsub    $0x38,%rsp\n    158b:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    158f:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    1593:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1597:\t48 89 c7             \tmov    %rax,%rdi\n    159a:\te8 05 fc ff ff       \tcallq  11a4 <Aig_ManRegNum>\n    159f:\t89 c7                \tmov    %eax,%edi\n    15a1:\te8 9f f2 ff ff       \tcallq  845 <Vec_PtrAlloc>\n    15a6:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    15aa:\t48 89 02             \tmov    %rax,(%rdx)\n    15ad:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    15b1:\t48 89 c7             \tmov    %rax,%rdi\n    15b4:\te8 cd fb ff ff       \tcallq  1186 <Aig_ManObjNumMax>\n    15b9:\t83 c0 01             \tadd    $0x1,%eax\n    15bc:\t48 98                \tcltq   \n    15be:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n    15c3:\t48 89 c7             \tmov    %rax,%rdi\n    15c6:\te8 00 00 00 00       \tcallq  15cb <Saig_ManCreateReducedAig+0x49>\n    15cb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    15cf:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    15d6:\te9 47 01 00 00       \tjmpq   1722 <Saig_ManCreateReducedAig+0x1a0>\n    15db:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    15de:\t48 63 d0             \tmovslq %eax,%rdx\n    15e1:\t48 89 d0             \tmov    %rdx,%rax\n    15e4:\t48 01 c0             \tadd    %rax,%rax\n    15e7:\t48 01 d0             \tadd    %rdx,%rax\n    15ea:\t48 c1 e0 02          \tshl    $0x2,%rax\n    15ee:\t48 89 c2             \tmov    %rax,%rdx\n    15f1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    15f5:\t48 01 d0             \tadd    %rdx,%rax\n    15f8:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    15fc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1600:\t0f b6 40 18          \tmovzbl 0x18(%rax),%eax\n    1604:\t83 e0 07             \tand    $0x7,%eax\n    1607:\t89 c2                \tmov    %eax,%edx\n    1609:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    160d:\t89 d1                \tmov    %edx,%ecx\n    160f:\t83 e1 07             \tand    $0x7,%ecx\n    1612:\t0f b6 50 08          \tmovzbl 0x8(%rax),%edx\n    1616:\t83 e2 f8             \tand    $0xfffffff8,%edx\n    1619:\t09 ca                \tor     %ecx,%edx\n    161b:\t88 50 08             \tmov    %dl,0x8(%rax)\n    161e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1622:\t48 89 c7             \tmov    %rax,%rdi\n    1625:\te8 a9 fb ff ff       \tcallq  11d3 <Aig_ObjIsCi>\n    162a:\t85 c0                \ttest   %eax,%eax\n    162c:\t75 06                \tjne    1634 <Saig_ManCreateReducedAig+0xb2>\n    162e:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    1632:\t75 60                \tjne    1694 <Saig_ManCreateReducedAig+0x112>\n    1634:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    1638:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    163c:\t48 89 d6             \tmov    %rdx,%rsi\n    163f:\t48 89 c7             \tmov    %rax,%rdi\n    1642:\te8 33 fd ff ff       \tcallq  137a <Saig_ObjIsLo>\n    1647:\t85 c0                \ttest   %eax,%eax\n    1649:\t0f 84 cb 00 00 00    \tje     171a <Saig_ManCreateReducedAig+0x198>\n    164f:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    1653:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1657:\t48 89 d6             \tmov    %rdx,%rsi\n    165a:\t48 89 c7             \tmov    %rax,%rdi\n    165d:\te8 6a fd ff ff       \tcallq  13cc <Saig_ObjLoToLi>\n    1662:\t8b 40 24             \tmov    0x24(%rax),%eax\n    1665:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n    1668:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    166c:\t89 10                \tmov    %edx,(%rax)\n    166e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1672:\tc7 40 04 ff ff ff ff \tmovl   $0xffffffff,0x4(%rax)\n    1679:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    167d:\t48 8b 00             \tmov    (%rax),%rax\n    1680:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1684:\t48 89 d6             \tmov    %rdx,%rsi\n    1687:\t48 89 c7             \tmov    %rax,%rdi\n    168a:\te8 26 f4 ff ff       \tcallq  ab5 <Vec_PtrPush>\n    168f:\te9 86 00 00 00       \tjmpq   171a <Saig_ManCreateReducedAig+0x198>\n    1694:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1698:\t48 89 c7             \tmov    %rax,%rdi\n    169b:\te8 de fb ff ff       \tcallq  127e <Aig_ObjFaninId0>\n    16a0:\t8d 1c 00             \tlea    (%rax,%rax,1),%ebx\n    16a3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    16a7:\t48 89 c7             \tmov    %rax,%rdi\n    16aa:\te8 39 fc ff ff       \tcallq  12e8 <Aig_ObjFaninC0>\n    16af:\t09 c3                \tor     %eax,%ebx\n    16b1:\t89 da                \tmov    %ebx,%edx\n    16b3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    16b7:\t89 10                \tmov    %edx,(%rax)\n    16b9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    16bd:\t48 89 c7             \tmov    %rax,%rdi\n    16c0:\te8 2b fb ff ff       \tcallq  11f0 <Aig_ObjIsCo>\n    16c5:\t85 c0                \ttest   %eax,%eax\n    16c7:\t75 54                \tjne    171d <Saig_ManCreateReducedAig+0x19b>\n    16c9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    16cd:\t48 89 c7             \tmov    %rax,%rdi\n    16d0:\te8 38 fb ff ff       \tcallq  120d <Aig_ObjIsNode>\n    16d5:\t85 c0                \ttest   %eax,%eax\n    16d7:\t75 19                \tjne    16f2 <Saig_ManCreateReducedAig+0x170>\n    16d9:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    16de:\tba 9a 00 00 00       \tmov    $0x9a,%edx\n    16e3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    16e8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    16ed:\te8 00 00 00 00       \tcallq  16f2 <Saig_ManCreateReducedAig+0x170>\n    16f2:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    16f6:\t48 89 c7             \tmov    %rax,%rdi\n    16f9:\te8 b5 fb ff ff       \tcallq  12b3 <Aig_ObjFaninId1>\n    16fe:\t8d 1c 00             \tlea    (%rax,%rax,1),%ebx\n    1701:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1705:\t48 89 c7             \tmov    %rax,%rdi\n    1708:\te8 f9 fb ff ff       \tcallq  1306 <Aig_ObjFaninC1>\n    170d:\t09 c3                \tor     %eax,%ebx\n    170f:\t89 da                \tmov    %ebx,%edx\n    1711:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1715:\t89 50 04             \tmov    %edx,0x4(%rax)\n    1718:\teb 04                \tjmp    171e <Saig_ManCreateReducedAig+0x19c>\n    171a:\t90                   \tnop\n    171b:\teb 01                \tjmp    171e <Saig_ManCreateReducedAig+0x19c>\n    171d:\t90                   \tnop\n    171e:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    1722:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1726:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    172a:\t48 89 c7             \tmov    %rax,%rdi\n    172d:\te8 51 f2 ff ff       \tcallq  983 <Vec_PtrSize>\n    1732:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n    1735:\t7d 25                \tjge    175c <Saig_ManCreateReducedAig+0x1da>\n    1737:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    173b:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    173f:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    1742:\t89 d6                \tmov    %edx,%esi\n    1744:\t48 89 c7             \tmov    %rax,%rdi\n    1747:\te8 48 f2 ff ff       \tcallq  994 <Vec_PtrEntry>\n    174c:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    1750:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n    1755:\t74 c7                \tje     171e <Saig_ManCreateReducedAig+0x19c>\n    1757:\te9 7f fe ff ff       \tjmpq   15db <Saig_ManCreateReducedAig+0x59>\n    175c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1760:\t48 89 c7             \tmov    %rax,%rdi\n    1763:\te8 1e fa ff ff       \tcallq  1186 <Aig_ManObjNumMax>\n    1768:\t48 63 d0             \tmovslq %eax,%rdx\n    176b:\t48 89 d0             \tmov    %rdx,%rax\n    176e:\t48 01 c0             \tadd    %rax,%rax\n    1771:\t48 01 d0             \tadd    %rdx,%rax\n    1774:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1778:\t48 89 c2             \tmov    %rax,%rdx\n    177b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    177f:\t48 01 d0             \tadd    %rdx,%rax\n    1782:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1786:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    178a:\t0f b6 50 08          \tmovzbl 0x8(%rax),%edx\n    178e:\t83 ca 07             \tor     $0x7,%edx\n    1791:\t88 50 08             \tmov    %dl,0x8(%rax)\n    1794:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1798:\t48 83 c4 38          \tadd    $0x38,%rsp\n    179c:\t5b                   \tpop    %rbx\n    179d:\t5d                   \tpop    %rbp\n    179e:\tc3                   \tretq   ", "code_s": "char *__fastcall Saig_ManCreateReducedAig(__int64 a1, __int64 *a2) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 v8;\n  char *v9;\n  char *<span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">i</span>;\n  v2 = Aig_ManRegNum(a1);\n  *a2 = (__int64)Vec_PtrAlloc(v2);\n  v3 = Aig_ManObjNumMax(a1);\n  <span class=\"supfact\">v10</span> = (char *)calloc(v3 + Number, Number);\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < (int)Vec_PtrSize(*(_QWORD *)(a1 + Number));\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v7</span> =\n        Vec_PtrEntry(*(_QWORD *)(a1 + Number), <span class=\"supfact\">i</span>);\n    if (<span class=\"supfact\">v7</span>) {\n      v8 = (__int64)&<span class=\"supfact\">v10</span>[Number * <span class=\"supfact\">i</span>];\n      *(_BYTE *)(v8 + Number) =\n          *(_BYTE *)(<span class=\"supfact\">v7</span> + Number) & Number |\n          *(_BYTE *)(v8 + Number) & Number;\n      if (!Aig_ObjIsCi(<span class=\"supfact\">v7</span>) && <span class=\"supfact\">i</span>) {\n        v4 = Number * Aig_ObjFaninId0(<span class=\"supfact\">v7</span>);\n        *(_DWORD *)v8 = Aig_ObjFaninC0(<span class=\"supfact\">v7</span>) | v4;\n        if (!Aig_ObjIsCo(<span class=\"supfact\">v7</span>)) {\n          if (!Aig_ObjIsNode(<span class=\"supfact\">v7</span>))\n            _assert_fail(String, String, Number, String);\n          v5 = Number * Aig_ObjFaninId1(<span class=\"supfact\">v7</span>);\n          *(_DWORD *)(v8 + Number) = Aig_ObjFaninC1(<span class=\"supfact\">v7</span>) | v5;\n        }\n      } else if (Saig_ObjIsLo(a1, (unsigned int *)<span class=\"supfact\">v7</span>)) {\n        *(_DWORD *)v8 =\n            Number *\n            *(_DWORD *)(Saig_ObjLoToLi(a1, (unsigned int *)<span class=\"supfact\">v7</span>) +\n                        Number);\n        *(_DWORD *)(v8 + Number) = Number;\n        Vec_PtrPush(*a2, v8);\n      }\n    }\n  }\n  v9 = &<span class=\"supfact\">v10</span>[Number * (int)Aig_ManObjNumMax(a1)];\n  v9[Number] |= Number;\n  return <span class=\"supfact\">v10</span>;\n}", "code_t": "Saig_MvObj_t *__cdecl Saig_ManCreateReducedAig(Aig_Man_t *p,\n                                               Vec_Ptr_t **pvFlops) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  Aig_Obj_t *<span class=\"supfact\">pObj</span>;\n  Saig_MvObj_t *pEntry;\n  Saig_MvObj_t *pEntrya;\n  Saig_MvObj_t *<span class=\"supfact\">pAig</span>;\n  int <span class=\"supfact\">i</span>;\n  v2 = Aig_ManRegNum(p);\n  *pvFlops = Vec_PtrAlloc(v2);\n  v3 = Aig_ManObjNumMax(p);\n  <span class=\"supfact\">pAig</span> = (Saig_MvObj_t *)calloc(v3 + Number, Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < Vec_PtrSize(p->vObjs);\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">pObj</span> =\n        (Aig_Obj_t *)Vec_PtrEntry(p->vObjs, <span class=\"supfact\">i</span>);\n    if (<span class=\"supfact\">pObj</span>) {\n      pEntry = &<span class=\"supfact\">pAig</span>[<span class=\"supfact\">i</span>];\n      *((_BYTE *)pEntry + Number) =\n          *((_BYTE *)<span class=\"supfact\">pObj</span> + Number) & Number |\n          *((_BYTE *)pEntry + Number) & Number;\n      if (!Aig_ObjIsCi(<span class=\"supfact\">pObj</span>) && <span class=\"supfact\">i</span>) {\n        v4 = Number * Aig_ObjFaninId0(<span class=\"supfact\">pObj</span>);\n        pEntry->iFan0 = Aig_ObjFaninC0(<span class=\"supfact\">pObj</span>) | v4;\n        if (!Aig_ObjIsCo(<span class=\"supfact\">pObj</span>)) {\n          if (!Aig_ObjIsNode(<span class=\"supfact\">pObj</span>))\n            _assert_fail(String, String, Number, String);\n          v5 = Number * Aig_ObjFaninId1(<span class=\"supfact\">pObj</span>);\n          pEntry->iFan1 = Aig_ObjFaninC1(<span class=\"supfact\">pObj</span>) | v5;\n        }\n      } else if (Saig_ObjIsLo(p, <span class=\"supfact\">pObj</span>)) {\n        pEntry->iFan0 = Number * Saig_ObjLoToLi(p, <span class=\"supfact\">pObj</span>)->Id;\n        pEntry->iFan1 = Number;\n        Vec_PtrPush(*pvFlops, pEntry);\n      }\n    }\n  }\n  pEntrya = &<span class=\"supfact\">pAig</span>[Aig_ManObjNumMax(p)];\n  *((_BYTE *)pEntrya + Number) |= Number;\n  return <span class=\"supfact\">pAig</span>;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v10", "type": "Aig_Obj_t *", "ref_name": "pAig", "ref_type": "__unk__"}, {"name": "v7", "type": "Aig_Obj_t *", "ref_name": "pObj", "ref_type": "Aig_Obj_t *"}], "body_in_train": false}, {"repo_owner": "xenko3d", "repo_name": "freeimage", "path": "xenko3d/freeimage/b03f9b497b518fd28ec08e80d88bdf5ef7025d2c4f1fed4bea06ce6e0170837c", "path_in_repo": "xenko3d/freeimage//Source/LibJXR/jxrgluelib/JXRGlue.o", "objdump": "0000000000000873 <PKCodecFactory_CreateDecoderFromFile>:\n     873:\t55                   \tpush   %rbp\n     874:\t48 89 e5             \tmov    %rsp,%rbp\n     877:\t48 83 ec 40          \tsub    $0x40,%rsp\n     87b:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     87f:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     883:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     88a:\t00 \n     88b:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     892:\t00 \n     893:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n     89a:\t00 \n     89b:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n     8a2:\t00 \n     8a3:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     8aa:\t00 \n     8ab:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     8af:\tbe 2e 00 00 00       \tmov    $0x2e,%esi\n     8b4:\t48 89 c7             \tmov    %rax,%rdi\n     8b7:\te8 00 00 00 00       \tcallq  8bc <PKCodecFactory_CreateDecoderFromFile+0x49>\n     8bc:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     8c0:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     8c5:\t75 09                \tjne    8d0 <PKCodecFactory_CreateDecoderFromFile+0x5d>\n     8c7:\t48 c7 c0 96 ff ff ff \tmov    $0xffffffffffffff96,%rax\n     8ce:\teb 05                \tjmp    8d5 <PKCodecFactory_CreateDecoderFromFile+0x62>\n     8d0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     8d5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     8d9:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     8de:\t0f 88 9f 00 00 00    \tjs     983 <PKCodecFactory_CreateDecoderFromFile+0x110>\n     8e4:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     8e8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     8ec:\t48 89 d6             \tmov    %rdx,%rsi\n     8ef:\t48 89 c7             \tmov    %rax,%rdi\n     8f2:\te8 00 00 00 00       \tcallq  8f7 <PKCodecFactory_CreateDecoderFromFile+0x84>\n     8f7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     8fb:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     900:\t0f 88 80 00 00 00    \tjs     986 <PKCodecFactory_CreateDecoderFromFile+0x113>\n     906:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n     90a:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n     90e:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 915 <PKCodecFactory_CreateDecoderFromFile+0xa2>\n     915:\t48 89 ce             \tmov    %rcx,%rsi\n     918:\t48 89 c7             \tmov    %rax,%rdi\n     91b:\te8 00 00 00 00       \tcallq  920 <PKCodecFactory_CreateDecoderFromFile+0xad>\n     920:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     924:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     929:\t78 5e                \tjs     989 <PKCodecFactory_CreateDecoderFromFile+0x116>\n     92b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     92f:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n     933:\t48 89 d6             \tmov    %rdx,%rsi\n     936:\t48 89 c7             \tmov    %rax,%rdi\n     939:\te8 00 00 00 00       \tcallq  93e <PKCodecFactory_CreateDecoderFromFile+0xcb>\n     93e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     942:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     947:\t78 43                \tjs     98c <PKCodecFactory_CreateDecoderFromFile+0x119>\n     949:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     94d:\t48 8b 00             \tmov    (%rax),%rax\n     950:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     954:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     958:\t48 8b 08             \tmov    (%rax),%rcx\n     95b:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     95f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     963:\t48 89 d6             \tmov    %rdx,%rsi\n     966:\t48 89 c7             \tmov    %rax,%rdi\n     969:\tff d1                \tcallq  *%rcx\n     96b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     96f:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     974:\t78 19                \tjs     98f <PKCodecFactory_CreateDecoderFromFile+0x11c>\n     976:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     97a:\tc7 40 60 01 00 00 00 \tmovl   $0x1,0x60(%rax)\n     981:\teb 0d                \tjmp    990 <PKCodecFactory_CreateDecoderFromFile+0x11d>\n     983:\t90                   \tnop\n     984:\teb 0a                \tjmp    990 <PKCodecFactory_CreateDecoderFromFile+0x11d>\n     986:\t90                   \tnop\n     987:\teb 07                \tjmp    990 <PKCodecFactory_CreateDecoderFromFile+0x11d>\n     989:\t90                   \tnop\n     98a:\teb 04                \tjmp    990 <PKCodecFactory_CreateDecoderFromFile+0x11d>\n     98c:\t90                   \tnop\n     98d:\teb 01                \tjmp    990 <PKCodecFactory_CreateDecoderFromFile+0x11d>\n     98f:\t90                   \tnop\n     990:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     994:\tc9                   \tleaveq \n     995:\tc3                   \tretq   ", "code_s": "__int64 __fastcall PKCodecFactory_CreateDecoderFromFile(const char *a1,\n                                                        __int64 *a2) {\n  __int64 v2;\n  __int64 <span class=\"supfact\">v4</span>;\n  _DWORD *<span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  char *<span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number L;\n  <span class=\"supfact\">v4</span> = Number L;\n  <span class=\"supfact\">v6</span> = Number L;\n  <span class=\"supfact\">v7</span> = strrchr(a1, Number);\n  if (<span class=\"supfact\">v7</span>)\n    v2 = Number L;\n  else\n    v2 = Number;\n  <span class=\"supfact\">v8</span> = v2;\n  if (v2 >= Number) {\n    <span class=\"supfact\">v8</span> =\n        GetImageDecodeIID(<span class=\"supfact\">v7</span>, &<span class=\"supfact\">v5</span>);\n    if (<span class=\"supfact\">v8</span> >= Number) {\n      <span class=\"supfact\">v8</span> = CreateWS_File(&<span class=\"supfact\">v4</span>, a1, String);\n      if (<span class=\"supfact\">v8</span> >= Number) {\n        <span class=\"supfact\">v8</span> =\n            PKCodecFactory_CreateCodec(<span class=\"supfact\">v5</span>, (__int64)a2);\n        if (<span class=\"supfact\">v8</span> >= Number) {\n          <span class=\"supfact\">v6</span> = *a2;\n          <span class=\"supfact\">v8</span> =\n              (*(__int64(__fastcall **)(__int64, __int64))<span class=\"supfact\">v6</span>)(\n                  <span class=\"supfact\">v6</span>, <span class=\"supfact\">v4</span>);\n          if (<span class=\"supfact\">v8</span> >= Number)\n            *(_DWORD *)(<span class=\"supfact\">v6</span> + Number) = Number;\n        }\n      }\n    }\n  }\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "ERR __cdecl PKCodecFactory_CreateDecoderFromFile(const char *szFilename,\n                                                 PKImageDecode **ppDecoder) {\n  ERR v2;\n  WMPStream *<span class=\"supfact\">pStream</span>;\n  const PKIID *<span class=\"supfact\">pIID</span>;\n  PKImageDecode *<span class=\"supfact\">pDecoder</span>;\n  char *<span class=\"supfact\">pExt</span>;\n  ERR <span class=\"supfact\">err</span>;\n  <span class=\"supfact\">err</span> = Number L;\n  <span class=\"supfact\">pIID</span> = Number L;\n  <span class=\"supfact\">pStream</span> = Number L;\n  <span class=\"supfact\">pDecoder</span> = Number L;\n  <span class=\"supfact\">pExt</span> = strrchr(szFilename, Number);\n  if (<span class=\"supfact\">pExt</span>)\n    v2 = Number L;\n  else\n    v2 = Number;\n  <span class=\"supfact\">err</span> = v2;\n  if (v2 >= Number) {\n    <span class=\"supfact\">err</span> =\n        GetImageDecodeIID(<span class=\"supfact\">pExt</span>, &<span class=\"supfact\">pIID</span>);\n    if (<span class=\"supfact\">err</span> >= Number) {\n      <span class=\"supfact\">err</span> =\n          CreateWS_File(&<span class=\"supfact\">pStream</span>, szFilename, String);\n      if (<span class=\"supfact\">err</span> >= Number) {\n        <span class=\"supfact\">err</span> = PKCodecFactory_CreateCodec(<span class=\"supfact\">pIID</span>,\n                                                         (void **)ppDecoder);\n        if (<span class=\"supfact\">err</span> >= Number) {\n          <span class=\"supfact\">pDecoder</span> = *ppDecoder;\n          <span class=\"supfact\">err</span> = <span class=\"supfact\">pDecoder</span>->Initialize(\n              <span class=\"supfact\">pDecoder</span>, <span class=\"supfact\">pStream</span>);\n          if (<span class=\"supfact\">err</span> >= Number)\n            <span class=\"supfact\">pDecoder</span>->fStreamOwner = Number;\n        }\n      }\n    }\n  }\n  return <span class=\"supfact\">err</span>;\n}", "var": [{"name": "v8", "type": "__unk__", "ref_name": "err", "ref_type": "ERR"}, {"name": "v7", "type": "__unk__", "ref_name": "pExt", "ref_type": "char *"}, {"name": "v6", "type": "__unk__", "ref_name": "pDecoder", "ref_type": "__unk__"}, {"name": "v5", "type": "__unk__", "ref_name": "pIID", "ref_type": "__unk__"}, {"name": "v4", "type": "__unk__", "ref_name": "pStream", "ref_type": "WMPStream *"}], "body_in_train": false}, {"repo_owner": "levex", "repo_name": "kernel-qemu-pci", "path": "levex/kernel-qemu-pci/b2ca8b0349c49fbf6e47723caaa7394422a7da9e38fdc8182e7d382e2a1d22aa", "path_in_repo": "levex/kernel-qemu-pci/qemu/hw/display/vga-pci.o", "objdump": "00000000000000f5 <pci_vga_ioport_write>:\n  f5:\t55                   \tpush   %rbp\n  f6:\t48 89 e5             \tmov    %rsp,%rbp\n  f9:\t48 83 ec 30          \tsub    $0x30,%rsp\n  fd:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 101:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 105:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 109:\t89 4d d4             \tmov    %ecx,-0x2c(%rbp)\n 10c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 110:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 114:\t83 7d d4 01          \tcmpl   $0x1,-0x2c(%rbp)\n 118:\t74 08                \tje     122 <pci_vga_ioport_write+0x2d>\n 11a:\t83 7d d4 02          \tcmpl   $0x2,-0x2c(%rbp)\n 11e:\t74 28                \tje     148 <pci_vga_ioport_write+0x53>\n 120:\teb 77                \tjmp    199 <pci_vga_ioport_write+0xa4>\n 122:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 126:\t89 c2                \tmov    %eax,%edx\n 128:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 12c:\t8d 88 c0 03 00 00    \tlea    0x3c0(%rax),%ecx\n 132:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 136:\t48 05 80 07 00 00    \tadd    $0x780,%rax\n 13c:\t89 ce                \tmov    %ecx,%esi\n 13e:\t48 89 c7             \tmov    %rax,%rdi\n 141:\te8 00 00 00 00       \tcallq  146 <pci_vga_ioport_write+0x51>\n 146:\teb 51                \tjmp    199 <pci_vga_ioport_write+0xa4>\n 148:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 14c:\t0f b6 c0             \tmovzbl %al,%eax\n 14f:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 153:\t8d b2 c0 03 00 00    \tlea    0x3c0(%rdx),%esi\n 159:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 15d:\t48 8d 8a 80 07 00 00 \tlea    0x780(%rdx),%rcx\n 164:\t89 c2                \tmov    %eax,%edx\n 166:\t48 89 cf             \tmov    %rcx,%rdi\n 169:\te8 00 00 00 00       \tcallq  16e <pci_vga_ioport_write+0x79>\n 16e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 172:\t48 c1 e8 08          \tshr    $0x8,%rax\n 176:\t0f b6 c0             \tmovzbl %al,%eax\n 179:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 17d:\t8d b2 c1 03 00 00    \tlea    0x3c1(%rdx),%esi\n 183:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 187:\t48 8d 8a 80 07 00 00 \tlea    0x780(%rdx),%rcx\n 18e:\t89 c2                \tmov    %eax,%edx\n 190:\t48 89 cf             \tmov    %rcx,%rdi\n 193:\te8 00 00 00 00       \tcallq  198 <pci_vga_ioport_write+0xa3>\n 198:\t90                   \tnop\n 199:\t90                   \tnop\n 19a:\tc9                   \tleaveq \n 19b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pci_vga_ioport_write(__int64 a1, int a2, unsigned int a3,\n                                        int a4) {\n  __int64 result;\n  unsigned __int8 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = BYTE1(a3);\n  result = a1;\n  if (a4 == Number)\n    return vga_ioport_write(a1 + Number, (unsigned int)(a2 + Number), a3);\n  if (a4 == Number) {\n    vga_ioport_write(a1 + Number, (unsigned int)(a2 + Number),\n                     (unsigned __int8)a3);\n    result = vga_ioport_write(a1 + Number, (unsigned int)(a2 + Number),\n                              <span class=\"supfact\">v5</span>);\n  }\n  return result;\n}", "code_t": "void __cdecl pci_vga_ioport_write(void *ptr, hwaddr addr, uint64_t val,\n                                  unsigned int size) {\n  unsigned __int8 <span class=\"supfact\">val_1</span>;\n  <span class=\"supfact\">val_1</span> = BYTE1(val);\n  if (size == Number) {\n    vga_ioport_write((char *)ptr + Number, (unsigned int)(addr + Number),\n                     (unsigned int)val);\n  } else if (size == Number) {\n    vga_ioport_write((char *)ptr + Number, (unsigned int)(addr + Number),\n                     (unsigned __int8)val);\n    vga_ioport_write((char *)ptr + Number, (unsigned int)(addr + Number),\n                     <span class=\"supfact\">val_1</span>);\n  }\n}", "var": [{"name": "v5", "type": "uint8_t", "ref_name": "val_1", "ref_type": "unsigned __int8"}], "body_in_train": false}, {"repo_owner": "macoscope", "repo_name": "ffmpeg", "path": "macoscope/ffmpeg/686388e5c187167b9fbdb043d66821fac5831b752108207ca10423b999e0d3d0", "path_in_repo": "macoscope/ffmpeg//libavfilter/f_sendcmd.o", "objdump": "0000000000000034 <make_command_flags_str>:\n      34:\t48 83 ec 28          \tsub    $0x28,%rsp\n      38:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n      3d:\t89 74 24 04          \tmov    %esi,0x4(%rsp)\n      41:\tc7 44 24 18 01 00 00 \tmovl   $0x1,0x18(%rsp)\n      48:\t00 \n      49:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n      4e:\tba 01 00 00 00       \tmov    $0x1,%edx\n      53:\tbe 00 00 00 00       \tmov    $0x0,%esi\n      58:\t48 89 c7             \tmov    %rax,%rdi\n      5b:\te8 00 00 00 00       \tcallq  60 <make_command_flags_str+0x2c>\n      60:\tc7 44 24 1c 00 00 00 \tmovl   $0x0,0x1c(%rsp)\n      67:\t00 \n      68:\teb 65                \tjmp    cf <make_command_flags_str+0x9b>\n      6a:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n      6e:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n      72:\t89 c1                \tmov    %eax,%ecx\n      74:\td3 fa                \tsar    %cl,%edx\n      76:\t89 d0                \tmov    %edx,%eax\n      78:\t83 e0 01             \tand    $0x1,%eax\n      7b:\t85 c0                \ttest   %eax,%eax\n      7d:\t74 4b                \tje     ca <make_command_flags_str+0x96>\n      7f:\t83 7c 24 18 00       \tcmpl   $0x0,0x18(%rsp)\n      84:\t75 17                \tjne    9d <make_command_flags_str+0x69>\n      86:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n      8b:\tba 01 00 00 00       \tmov    $0x1,%edx\n      90:\tbe 2b 00 00 00       \tmov    $0x2b,%esi\n      95:\t48 89 c7             \tmov    %rax,%rdi\n      98:\te8 00 00 00 00       \tcallq  9d <make_command_flags_str+0x69>\n      9d:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n      a1:\t48 98                \tcltq   \n      a3:\t48 8b 14 c5 00 00 00 \tmov    0x0(,%rax,8),%rdx\n      aa:\t00 \n      ab:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n      b0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n      b5:\t48 89 c7             \tmov    %rax,%rdi\n      b8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      bd:\te8 00 00 00 00       \tcallq  c2 <make_command_flags_str+0x8e>\n      c2:\tc7 44 24 18 00 00 00 \tmovl   $0x0,0x18(%rsp)\n      c9:\t00 \n      ca:\t83 44 24 1c 01       \taddl   $0x1,0x1c(%rsp)\n      cf:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n      d3:\t83 f8 01             \tcmp    $0x1,%eax\n      d6:\t76 92                \tjbe    6a <make_command_flags_str+0x36>\n      d8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n      dd:\t48 8b 00             \tmov    (%rax),%rax\n      e0:\t48 83 c4 28          \tadd    $0x28,%rsp\n      e4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall make_command_flags_str(__int64 a1, int a2) {\n  int <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  av_bprint_init(a1, Number L, Number L);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (((a2 >> <span class=\"supfact\">i</span>) & Number) != Number) {\n      if (!<span class=\"supfact\">v3</span>)\n        av_bprint_chars(a1, Number L, Number L);\n      av_bprintf(a1, &unk_1818, flag_strings_8782[<span class=\"supfact\">i</span>]);\n      <span class=\"supfact\">v3</span> = Number;\n    }\n  }\n  return *(_QWORD *)a1;\n}", "code_t": "char *__cdecl make_command_flags_str(AVBPrint_0 *pbuf, int flags) {\n  int <span class=\"supfact\">is_first</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">is_first</span> = Number;\n  av_bprint_init(pbuf, Number L, Number L);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (((flags >> <span class=\"supfact\">i</span>) & Number) != Number) {\n      if (!<span class=\"supfact\">is_first</span>)\n        av_bprint_chars(pbuf, Number L, Number L);\n      av_bprintf(pbuf, &unk_1818, flag_strings_8782[<span class=\"supfact\">i</span>]);\n      <span class=\"supfact\">is_first</span> = Number;\n    }\n  }\n  return pbuf->str;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "unsigned int"}, {"name": "v3", "type": "int", "ref_name": "is_first", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "ade-verd", "repo_name": "lem-in", "path": "ade-verd/lem-in/157c3735e56c364f29ac9aae833f6b55b783df39603864ecd74a3a0a6b610450", "path_in_repo": "ade-verd/lem-in/libftprintf/obj/e2_flags_manager_part1.o", "objdump": "00000000000003d8 <ft_manage_minus>:\n 3d8:\t55                   \tpush   %rbp\n 3d9:\t48 89 e5             \tmov    %rsp,%rbp\n 3dc:\t53                   \tpush   %rbx\n 3dd:\t48 83 ec 38          \tsub    $0x38,%rsp\n 3e1:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 3e5:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n 3e9:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n 3ed:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3f1:\t48 8b 00             \tmov    (%rax),%rax\n 3f4:\t8b 40 10             \tmov    0x10(%rax),%eax\n 3f7:\t85 c0                \ttest   %eax,%eax\n 3f9:\t0f 84 e3 00 00 00    \tje     4e2 <ft_manage_minus+0x10a>\n 3ff:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 403:\t48 8b 00             \tmov    (%rax),%rax\n 406:\t48 83 c0 08          \tadd    $0x8,%rax\n 40a:\tbe 2d 00 00 00       \tmov    $0x2d,%esi\n 40f:\t48 89 c7             \tmov    %rax,%rdi\n 412:\te8 00 00 00 00       \tcallq  417 <ft_manage_minus+0x3f>\n 417:\t48 85 c0             \ttest   %rax,%rax\n 41a:\t0f 84 c2 00 00 00    \tje     4e2 <ft_manage_minus+0x10a>\n 420:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 424:\t48 8b 00             \tmov    (%rax),%rax\n 427:\t8b 40 10             \tmov    0x10(%rax),%eax\n 42a:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n 42d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 431:\t48 8b 00             \tmov    (%rax),%rax\n 434:\t48 89 c7             \tmov    %rax,%rdi\n 437:\te8 00 00 00 00       \tcallq  43c <ft_manage_minus+0x64>\n 43c:\t89 c2                \tmov    %eax,%edx\n 43e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 442:\t48 8b 00             \tmov    (%rax),%rax\n 445:\t8b 40 28             \tmov    0x28(%rax),%eax\n 448:\t01 d0                \tadd    %edx,%eax\n 44a:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 44d:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n 454:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 458:\t48 8b 00             \tmov    (%rax),%rax\n 45b:\t0f b6 40 1f          \tmovzbl 0x1f(%rax),%eax\n 45f:\t3c 6e                \tcmp    $0x6e,%al\n 461:\t75 28                \tjne    48b <ft_manage_minus+0xb3>\n 463:\teb 11                \tjmp    476 <ft_manage_minus+0x9e>\n 465:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 469:\tbe 20 00 00 00       \tmov    $0x20,%esi\n 46e:\t48 89 c7             \tmov    %rax,%rdi\n 471:\te8 00 00 00 00       \tcallq  476 <ft_manage_minus+0x9e>\n 476:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 479:\t8d 50 01             \tlea    0x1(%rax),%edx\n 47c:\t89 55 ec             \tmov    %edx,-0x14(%rbp)\n 47f:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n 482:\t2b 55 e4             \tsub    -0x1c(%rbp),%edx\n 485:\t39 d0                \tcmp    %edx,%eax\n 487:\t7c dc                \tjl     465 <ft_manage_minus+0x8d>\n 489:\teb 5b                \tjmp    4e6 <ft_manage_minus+0x10e>\n 48b:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 48e:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n 491:\t7e 53                \tjle    4e6 <ft_manage_minus+0x10e>\n 493:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 496:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n 499:\t48 98                \tcltq   \n 49b:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 49f:\t48 8b 1a             \tmov    (%rdx),%rbx\n 4a2:\t48 89 c7             \tmov    %rax,%rdi\n 4a5:\te8 00 00 00 00       \tcallq  4aa <ft_manage_minus+0xd2>\n 4aa:\t48 89 43 18          \tmov    %rax,0x18(%rbx)\n 4ae:\t48 8b 43 18          \tmov    0x18(%rbx),%rax\n 4b2:\t48 85 c0             \ttest   %rax,%rax\n 4b5:\t74 2e                \tje     4e5 <ft_manage_minus+0x10d>\n 4b7:\teb 1c                \tjmp    4d5 <ft_manage_minus+0xfd>\n 4b9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 4bd:\t48 8b 00             \tmov    (%rax),%rax\n 4c0:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n 4c4:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 4c7:\t8d 50 01             \tlea    0x1(%rax),%edx\n 4ca:\t89 55 ec             \tmov    %edx,-0x14(%rbp)\n 4cd:\t48 98                \tcltq   \n 4cf:\t48 01 c8             \tadd    %rcx,%rax\n 4d2:\tc6 00 20             \tmovb   $0x20,(%rax)\n 4d5:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 4d8:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n 4db:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n 4de:\t7c d9                \tjl     4b9 <ft_manage_minus+0xe1>\n 4e0:\teb 04                \tjmp    4e6 <ft_manage_minus+0x10e>\n 4e2:\t90                   \tnop\n 4e3:\teb 01                \tjmp    4e6 <ft_manage_minus+0x10e>\n 4e5:\t90                   \tnop\n 4e6:\t48 83 c4 38          \tadd    $0x38,%rsp\n 4ea:\t5b                   \tpop    %rbx\n 4eb:\t5d                   \tpop    %rbp\n 4ec:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ft_manage_minus(__int64 a1, __int64 *a2, _QWORD *a3) {\n  __int64 result;\n  __int64 v4;\n  int v5;\n  int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  result = *(unsigned int *)(*(_QWORD *)a1 + Number L);\n  if ((_DWORD)result) {\n    result = ft_strchr(*(_QWORD *)a1 + Number L, Number L);\n    if (result) {\n      <span class=\"supfact\">v8</span> = *(_DWORD *)(*(_QWORD *)a1 + Number L);\n      <span class=\"supfact\">v7</span> = ft_strlen(*a3) + *(_DWORD *)(*a2 + Number);\n      <span class=\"supfact\">v9</span> = Number;\n      if (*(_BYTE *)(*(_QWORD *)a1 + Number L) == Number) {\n        while (Number) {\n          result = (unsigned int)<span class=\"supfact\">v9</span>++;\n          if ((int)result >= (int)(<span class=\"supfact\">v8</span> - <span class=\"supfact\">v7</span>))\n            break;\n          ft_putcbuffer(a2, Number L);\n        }\n      } else {\n        result = <span class=\"supfact\">v8</span>;\n        if ((int)<span class=\"supfact\">v8</span> > <span class=\"supfact\">v7</span>) {\n          v4 = *a2;\n          *(_QWORD *)(v4 + Number) =\n              ft_strnew((int)(<span class=\"supfact\">v8</span> - <span class=\"supfact\">v7</span>));\n          result = *(_QWORD *)(v4 + Number);\n          if (result) {\n            while (Number) {\n              result = <span class=\"supfact\">v8</span> - <span class=\"supfact\">v7</span>;\n              if (<span class=\"supfact\">v9</span> >= (int)result)\n                break;\n              v5 = <span class=\"supfact\">v9</span>++;\n              *(_BYTE *)(*(_QWORD *)(*a2 + Number) + v5) = Number;\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl ft_manage_minus(t_indic **ind, t_buff **buff, char **str) {\n  int v3;\n  t_buff *v4;\n  int v5;\n  int <span class=\"supfact\">n</span>;\n  int <span class=\"supfact\">w</span>;\n  int <span class=\"supfact\">i</span>;\n  if ((*ind)->width && ft_strchr((*ind)->flags, Number L)) {\n    <span class=\"supfact\">w</span> = (*ind)->width;\n    <span class=\"supfact\">n</span> = ft_strlen(*str) + (*buff)->printed;\n    <span class=\"supfact\">i</span> = Number;\n    if ((*ind)->type == Number) {\n      while (Number) {\n        v3 = <span class=\"supfact\">i</span>++;\n        if (v3 >= <span class=\"supfact\">w</span> - <span class=\"supfact\">n</span>)\n          break;\n        ft_putcbuffer(buff, Number L);\n      }\n    } else if (<span class=\"supfact\">w</span> > <span class=\"supfact\">n</span>) {\n      v4 = *buff;\n      v4->suffix = (char *)ft_strnew(<span class=\"supfact\">w</span> - <span class=\"supfact\">n</span>);\n      if (v4->suffix) {\n        while (<span class=\"supfact\">i</span> < <span class=\"supfact\">w</span> - <span class=\"supfact\">n</span>) {\n          v5 = <span class=\"supfact\">i</span>++;\n          (*buff)->suffix[v5] = Number;\n        }\n      }\n    }\n  }\n}", "var": [{"name": "v9", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v8", "type": "int", "ref_name": "w", "ref_type": "int"}, {"name": "v7", "type": "int", "ref_name": "n", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "rim99", "repo_name": "PostgreSQL-src", "path": "rim99/PostgreSQL-src/d5504bb47022156339aa5801d9c8db900f82b98e1494d1d4c784c64777b16442", "path_in_repo": "rim99/PostgreSQL-src//src/backend/access/transam/generic_xlog.o", "objdump": "0000000000000318 <GenericXLogStart>:\n 318:\t55                   \tpush   %rbp\n 319:\t48 89 e5             \tmov    %rsp,%rbp\n 31c:\t48 83 ec 20          \tsub    $0x20,%rsp\n 320:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 324:\tbf 88 00 01 00       \tmov    $0x10088,%edi\n 329:\te8 00 00 00 00       \tcallq  32e <GenericXLogStart+0x16>\n 32e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 332:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 336:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 33a:\t0f b6 40 6e          \tmovzbl 0x6e(%rax),%eax\n 33e:\t3c 70                \tcmp    $0x70,%al\n 340:\t0f 94 c0             \tsete   %al\n 343:\t89 c2                \tmov    %eax,%edx\n 345:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 349:\t88 90 80 00 01 00    \tmov    %dl,0x10080(%rax)\n 34f:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 356:\teb 5f                \tjmp    3b7 <GenericXLogStart+0x9f>\n 358:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 35c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 35f:\tc1 e0 0d             \tshl    $0xd,%eax\n 362:\t48 98                \tcltq   \n 364:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n 368:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n 36c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 36f:\t48 63 d0             \tmovslq %eax,%rdx\n 372:\t48 89 d0             \tmov    %rdx,%rax\n 375:\t48 c1 e0 08          \tshl    $0x8,%rax\n 379:\t48 01 d0             \tadd    %rdx,%rax\n 37c:\t48 c1 e0 05          \tshl    $0x5,%rax\n 380:\t48 01 f0             \tadd    %rsi,%rax\n 383:\t48 05 10 80 00 00    \tadd    $0x8010,%rax\n 389:\t48 89 08             \tmov    %rcx,(%rax)\n 38c:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n 390:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 393:\t48 63 d0             \tmovslq %eax,%rdx\n 396:\t48 89 d0             \tmov    %rdx,%rax\n 399:\t48 c1 e0 08          \tshl    $0x8,%rax\n 39d:\t48 01 d0             \tadd    %rdx,%rax\n 3a0:\t48 c1 e0 05          \tshl    $0x5,%rax\n 3a4:\t48 01 c8             \tadd    %rcx,%rax\n 3a7:\t48 05 00 80 00 00    \tadd    $0x8000,%rax\n 3ad:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n 3b3:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 3b7:\t83 7d fc 03          \tcmpl   $0x3,-0x4(%rbp)\n 3bb:\t7e 9b                \tjle    358 <GenericXLogStart+0x40>\n 3bd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3c1:\tc9                   \tleaveq \n 3c2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall GenericXLogStart(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v2</span> = palloc(Number L);\n  *(_BYTE *)(<span class=\"supfact\">v2</span> + Number) =\n      *(_BYTE *)(*(_QWORD *)(a1 + Number) + Number L) == Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    *(_QWORD *)(<span class=\"supfact\">v2</span> + Number L * <span class=\"supfact\">i</span> + Number) =\n        <span class=\"supfact\">v2</span> + (<span class=\"supfact\">i</span> << Number);\n    *(_DWORD *)(<span class=\"supfact\">v2</span> + Number L * <span class=\"supfact\">i</span> + Number) =\n        Number;\n  }\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "GenericXLogState_0 *__cdecl GenericXLogStart(Relation relation) {\n  GenericXLogState_0 *<span class=\"supfact\">state</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">state</span> = (GenericXLogState_0 *)palloc(Number L);\n  <span class=\"supfact\">state</span>->isLogged = relation->rd_rel->relpersistence == Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">state</span>->pages[<span class=\"supfact\">i</span>].image =\n        &<span class=\"supfact\">state</span>->images[Number * <span class=\"supfact\">i</span>];\n    <span class=\"supfact\">state</span>->pages[<span class=\"supfact\">i</span>].buffer = Number;\n  }\n  return <span class=\"supfact\">state</span>;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v2", "type": "char *", "ref_name": "state", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "Jacques80", "repo_name": "push_swap", "path": "Jacques80/push_swap/200646f78ddff7972ff0f1dc8a866a35cb2b6679346c646fa08bba7690c8f4ff", "path_in_repo": "Jacques80/push_swap/libft/pf_sources/ft_4b_precision.o", "objdump": "00000000000002b6 <ft_prec_on_integer>:\n 2b6:\t55                   \tpush   %rbp\n 2b7:\t48 89 e5             \tmov    %rsp,%rbp\n 2ba:\t53                   \tpush   %rbx\n 2bb:\t48 83 ec 38          \tsub    $0x38,%rsp\n 2bf:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 2c3:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n 2ca:\t00 \n 2cb:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n 2d2:\t00 \n 2d3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 2d7:\t48 8b 00             \tmov    (%rax),%rax\n 2da:\tc7 40 0c 00 00 00 00 \tmovl   $0x0,0xc(%rax)\n 2e1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 2e5:\t48 8b 10             \tmov    (%rax),%rdx\n 2e8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 2ec:\t48 89 d6             \tmov    %rdx,%rsi\n 2ef:\t48 89 c7             \tmov    %rax,%rdi\n 2f2:\te8 2c fe ff ff       \tcallq  123 <ft_prec_null_val_null>\n 2f7:\t85 c0                \ttest   %eax,%eax\n 2f9:\t74 0f                \tje     30a <ft_prec_on_integer+0x54>\n 2fb:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 300:\te8 00 00 00 00       \tcallq  305 <ft_prec_on_integer+0x4f>\n 305:\te9 8b 01 00 00       \tjmpq   495 <ft_prec_on_integer+0x1df>\n 30a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 30e:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n 312:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 316:\t48 89 d6             \tmov    %rdx,%rsi\n 319:\t48 89 c7             \tmov    %rax,%rdi\n 31c:\te8 00 00 00 00       \tcallq  321 <ft_prec_on_integer+0x6b>\n 321:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 325:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 329:\t48 8b 58 30          \tmov    0x30(%rax),%rbx\n 32d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 331:\t48 89 c7             \tmov    %rax,%rdi\n 334:\te8 00 00 00 00       \tcallq  339 <ft_prec_on_integer+0x83>\n 339:\t48 39 c3             \tcmp    %rax,%rbx\n 33c:\t0f 86 4b 01 00 00    \tjbe    48d <ft_prec_on_integer+0x1d7>\n 342:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 346:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n 34a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 34e:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n 352:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n 356:\t48 29 c1             \tsub    %rax,%rcx\n 359:\t48 89 c8             \tmov    %rcx,%rax\n 35c:\t48 01 d0             \tadd    %rdx,%rax\n 35f:\t48 89 c7             \tmov    %rax,%rdi\n 362:\te8 00 00 00 00       \tcallq  367 <ft_prec_on_integer+0xb1>\n 367:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 36b:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n 370:\t75 3f                \tjne    3b1 <ft_prec_on_integer+0xfb>\n 372:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 376:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n 37a:\te9 16 01 00 00       \tjmpq   495 <ft_prec_on_integer+0x1df>\n 37f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 383:\t48 8b 48 50          \tmov    0x50(%rax),%rcx\n 387:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 38b:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 38f:\t48 89 55 e0          \tmov    %rdx,-0x20(%rbp)\n 393:\t48 01 c1             \tadd    %rax,%rcx\n 396:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 39a:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 39e:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 3a2:\t48 89 c2             \tmov    %rax,%rdx\n 3a5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 3a9:\t48 01 c2             \tadd    %rax,%rdx\n 3ac:\t0f b6 01             \tmovzbl (%rcx),%eax\n 3af:\t88 02                \tmov    %al,(%rdx)\n 3b1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 3b5:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n 3b9:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 3bd:\t48 29 c2             \tsub    %rax,%rdx\n 3c0:\t48 89 d0             \tmov    %rdx,%rax\n 3c3:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n 3c7:\t7c b6                \tjl     37f <ft_prec_on_integer+0xc9>\n 3c9:\teb 19                \tjmp    3e4 <ft_prec_on_integer+0x12e>\n 3cb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3cf:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 3d3:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 3d7:\t48 89 c2             \tmov    %rax,%rdx\n 3da:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 3de:\t48 01 d0             \tadd    %rdx,%rax\n 3e1:\tc6 00 30             \tmovb   $0x30,(%rax)\n 3e4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 3e8:\t48 8b 58 30          \tmov    0x30(%rax),%rbx\n 3ec:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3f0:\t48 89 c7             \tmov    %rax,%rdi\n 3f3:\te8 00 00 00 00       \tcallq  3f8 <ft_prec_on_integer+0x142>\n 3f8:\t48 29 c3             \tsub    %rax,%rbx\n 3fb:\t48 89 d9             \tmov    %rbx,%rcx\n 3fe:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 402:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n 406:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 40a:\t48 29 c2             \tsub    %rax,%rdx\n 40d:\t48 89 d0             \tmov    %rdx,%rax\n 410:\t48 8d 14 01          \tlea    (%rcx,%rax,1),%rdx\n 414:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 418:\t48 39 c2             \tcmp    %rax,%rdx\n 41b:\t77 ae                \tja     3cb <ft_prec_on_integer+0x115>\n 41d:\teb 32                \tjmp    451 <ft_prec_on_integer+0x19b>\n 41f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 423:\t48 8b 48 50          \tmov    0x50(%rax),%rcx\n 427:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 42b:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 42f:\t48 89 55 e0          \tmov    %rdx,-0x20(%rbp)\n 433:\t48 01 c1             \tadd    %rax,%rcx\n 436:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 43a:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 43e:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 442:\t48 89 c2             \tmov    %rax,%rdx\n 445:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 449:\t48 01 c2             \tadd    %rax,%rdx\n 44c:\t0f b6 01             \tmovzbl (%rcx),%eax\n 44f:\t88 02                \tmov    %al,(%rdx)\n 451:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 455:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n 459:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 45d:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n 461:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n 465:\t48 29 c1             \tsub    %rax,%rcx\n 468:\t48 89 c8             \tmov    %rcx,%rax\n 46b:\t48 01 c2             \tadd    %rax,%rdx\n 46e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 472:\t48 39 c2             \tcmp    %rax,%rdx\n 475:\t77 a8                \tja     41f <ft_prec_on_integer+0x169>\n 477:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 47b:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n 47f:\t48 89 c7             \tmov    %rax,%rdi\n 482:\te8 00 00 00 00       \tcallq  487 <ft_prec_on_integer+0x1d1>\n 487:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 48b:\teb 08                \tjmp    495 <ft_prec_on_integer+0x1df>\n 48d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 491:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n 495:\t48 83 c4 38          \tadd    $0x38,%rsp\n 499:\t5b                   \tpop    %rbx\n 49a:\t5d                   \tpop    %rbp\n 49b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ft_prec_on_integer(__int64 a1) {\n  unsigned __int64 v2;\n  __int64 v3;\n  _BYTE *v4;\n  unsigned __int64 v5;\n  unsigned __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  _BYTE *v9;\n  unsigned __int64 v10;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v14</span> = Number L;\n  <span class=\"supfact\">v13</span> = Number L;\n  *(_DWORD *)(*(_QWORD *)a1 + Number L) = Number;\n  if ((unsigned int)ft_prec_null_val_null(a1, *(_QWORD *)a1))\n    return ft_strnew(Number L);\n  <span class=\"supfact\">v12</span> = ft_start_digit(*(_QWORD *)(a1 + Number), a1);\n  v2 = *(_QWORD *)(a1 + Number);\n  if (v2 <= ft_strlen(<span class=\"supfact\">v12</span>))\n    return *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v11</span> =\n      ft_strnew(*(_QWORD *)(a1 + Number) + <span class=\"supfact\">v12</span> -\n                *(_QWORD *)(a1 + Number));\n  if (!<span class=\"supfact\">v11</span>)\n    return *(_QWORD *)(a1 + Number);\n  while ((__int64)<span class=\"supfact\">v14</span> <\n         <span class=\"supfact\">v12</span> - *(_QWORD *)(a1 + Number)) {\n    v3 = <span class=\"supfact\">v13</span>++;\n    v4 = (_BYTE *)(v3 + *(_QWORD *)(a1 + Number));\n    v5 = <span class=\"supfact\">v14</span>++;\n    *(_BYTE *)(<span class=\"supfact\">v11</span> + v5) = *v4;\n  }\n  while (Number) {\n    v7 = *(_QWORD *)(a1 + Number);\n    if (v7 - ft_strlen(<span class=\"supfact\">v12</span>) + <span class=\"supfact\">v12</span> -\n            *(_QWORD *)(a1 + Number) <=\n        <span class=\"supfact\">v14</span>)\n      break;\n    v6 = <span class=\"supfact\">v14</span>++;\n    *(_BYTE *)(v6 + <span class=\"supfact\">v11</span>) = Number;\n  }\n  while (<span class=\"supfact\">v12</span> - *(_QWORD *)(a1 + Number) +\n             *(_QWORD *)(a1 + Number) >\n         <span class=\"supfact\">v14</span>) {\n    v8 = <span class=\"supfact\">v13</span>++;\n    v9 = (_BYTE *)(v8 + *(_QWORD *)(a1 + Number));\n    v10 = <span class=\"supfact\">v14</span>++;\n    *(_BYTE *)(<span class=\"supfact\">v11</span> + v10) = *v9;\n  }\n  free(*(void **)(a1 + Number));\n  return <span class=\"supfact\">v11</span>;\n}", "code_t": "char *__cdecl ft_prec_on_integer(t_chain *elem) {\n  size_t v2;\n  __int64 v3;\n  char *v4;\n  unsigned __int64 v5;\n  unsigned __int64 v6;\n  size_t v7;\n  __int64 v8;\n  char *v9;\n  unsigned __int64 v10;\n  char *<span class=\"supfact\">newa</span>;\n  char *<span class=\"supfact\">tmp</span>;\n  __int64 <span class=\"supfact\">y</span>;\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">i</span> = Number L;\n  <span class=\"supfact\">y</span> = Number L;\n  elem->flag->zero = Number;\n  if (ft_prec_null_val_null(elem, elem->flag))\n    return (char *)ft_strnew(Number L);\n  <span class=\"supfact\">tmp</span> = (char *)ft_start_digit(elem->show, elem);\n  v2 = elem->prec;\n  if (v2 <= ft_strlen(<span class=\"supfact\">tmp</span>))\n    return elem->show;\n  <span class=\"supfact\">newa</span> =\n      (char *)ft_strnew(elem->prec + <span class=\"supfact\">tmp</span> - elem->show);\n  if (!<span class=\"supfact\">newa</span>)\n    return elem->show;\n  while ((__int64)<span class=\"supfact\">i</span> < <span class=\"supfact\">tmp</span> - elem->show) {\n    v3 = <span class=\"supfact\">y</span>++;\n    v4 = &elem->show[v3];\n    v5 = <span class=\"supfact\">i</span>++;\n    <span class=\"supfact\">newa</span>[v5] = *v4;\n  }\n  while (Number) {\n    v7 = elem->prec;\n    if (v7 - ft_strlen(<span class=\"supfact\">tmp</span>) + <span class=\"supfact\">tmp</span> -\n            elem->show <=\n        <span class=\"supfact\">i</span>)\n      break;\n    v6 = <span class=\"supfact\">i</span>++;\n    <span class=\"supfact\">newa</span>[v6] = Number;\n  }\n  while (<span class=\"supfact\">tmp</span> - elem->show + elem->prec > <span class=\"supfact\">i</span>) {\n    v8 = <span class=\"supfact\">y</span>++;\n    v9 = &elem->show[v8];\n    v10 = <span class=\"supfact\">i</span>++;\n    <span class=\"supfact\">newa</span>[v10] = *v9;\n  }\n  free(elem->show);\n  return <span class=\"supfact\">newa</span>;\n}", "var": [{"name": "v14", "type": "size_t", "ref_name": "i", "ref_type": "unsigned __int64"}, {"name": "v13", "type": "char *", "ref_name": "y", "ref_type": "__int64"}, {"name": "v12", "type": "size_t", "ref_name": "tmp", "ref_type": "char *"}, {"name": "v11", "type": "size_t", "ref_name": "newa", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/fe9a2828919a86196de030888b21b4c6ef32cb5da36678d86b5154635ce252d8", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Benchmarks/Prolangs-C/agrep/Output/agrep.native", "objdump": "00000000004031a0 <check_file>:\n  4031a0:\t55                   \tpush   %rbp\n  4031a1:\t48 89 e5             \tmov    %rsp,%rbp\n  4031a4:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  4031ab:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n  4031b2:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  4031b9:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  4031c0:\t48 89 d6             \tmov    %rdx,%rsi\n  4031c3:\t48 89 c7             \tmov    %rax,%rdi\n  4031c6:\te8 45 9b 00 00       \tcallq  40cd10 <__stat>\n  4031cb:\t85 c0                \ttest   %eax,%eax\n  4031cd:\t74 1a                \tje     4031e9 <check_file+0x49>\n  4031cf:\te8 5c de ff ff       \tcallq  401030 <__errno_location@plt>\n  4031d4:\t8b 00                \tmov    (%rax),%eax\n  4031d6:\t83 f8 02             \tcmp    $0x2,%eax\n  4031d9:\t75 07                \tjne    4031e2 <check_file+0x42>\n  4031db:\tb8 fd ff ff ff       \tmov    $0xfffffffd,%eax\n  4031e0:\teb 0c                \tjmp    4031ee <check_file+0x4e>\n  4031e2:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4031e7:\teb 05                \tjmp    4031ee <check_file+0x4e>\n  4031e9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4031ee:\tc9                   \tleaveq \n  4031ef:\tc3                   \tretq   ", "code_s": "__int64 __fastcall check_file(char *a1) {\n  struct stat <span class=\"supfact\">v2</span>;\n  if (!(unsigned int)stat(a1, &<span class=\"supfact\">v2</span>))\n    return Number L;\n  if (*__errno_location() == Number)\n    return Number L;\n  return Number;\n}", "code_t": "int __cdecl check_file(char *fname) {\n  stat <span class=\"supfact\">buf</span>;\n  if (!(unsigned int)stat_0(fname, &<span class=\"supfact\">buf</span>))\n    return Number;\n  if (*__errno_location() == Number)\n    return Number;\n  return Number;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "buf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "martinez-zea", "repo_name": "localconflict", "path": "martinez-zea/localconflict/a0c10891e83c76b670ed8933cc92ad171830cf4a53e171688aec5c5581d8ed65", "path_in_repo": "martinez-zea/localconflict/q3osc/build/release-linux-x86_64/baseq3/cgame/cg_marks.o", "objdump": "0000000000006db8 <CG_ParticleSmoke>:\n    6db8:\t48 83 ec 28          \tsub    $0x28,%rsp\n    6dbc:\t89 7c 24 0c          \tmov    %edi,0xc(%rsp)\n    6dc0:\t48 89 34 24          \tmov    %rsi,(%rsp)\n    6dc4:\t83 7c 24 0c 00       \tcmpl   $0x0,0xc(%rsp)\n    6dc9:\t75 11                \tjne    6ddc <CG_ParticleSmoke+0x24>\n    6dcb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6dd2 <CG_ParticleSmoke+0x1a>\n    6dd2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6dd7:\te8 00 00 00 00       \tcallq  6ddc <CG_ParticleSmoke+0x24>\n    6ddc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6de3 <CG_ParticleSmoke+0x2b>\n    6de3:\t48 8b 00             \tmov    (%rax),%rax\n    6de6:\t48 85 c0             \ttest   %rax,%rax\n    6de9:\t0f 84 78 02 00 00    \tje     7067 <CG_ParticleSmoke+0x2af>\n    6def:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6df6 <CG_ParticleSmoke+0x3e>\n    6df6:\t48 8b 00             \tmov    (%rax),%rax\n    6df9:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n    6dfe:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6e03:\t48 8b 10             \tmov    (%rax),%rdx\n    6e06:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6e0d <CG_ParticleSmoke+0x55>\n    6e0d:\t48 89 10             \tmov    %rdx,(%rax)\n    6e10:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6e17 <CG_ParticleSmoke+0x5f>\n    6e17:\t48 8b 10             \tmov    (%rax),%rdx\n    6e1a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6e1f:\t48 89 10             \tmov    %rdx,(%rax)\n    6e22:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6e29 <CG_ParticleSmoke+0x71>\n    6e29:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n    6e2e:\t48 89 10             \tmov    %rdx,(%rax)\n    6e31:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6e38 <CG_ParticleSmoke+0x80>\n    6e38:\t8b 80 60 a4 01 00    \tmov    0x1a460(%rax),%eax\n    6e3e:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    6e42:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6e47:\tf3 0f 11 40 08       \tmovss  %xmm0,0x8(%rax)\n    6e4c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6e53 <CG_ParticleSmoke+0x9b>\n    6e53:\t8b 90 60 a4 01 00    \tmov    0x1a460(%rax),%edx\n    6e59:\t48 8b 04 24          \tmov    (%rsp),%rax\n    6e5d:\t8b 40 54             \tmov    0x54(%rax),%eax\n    6e60:\t01 d0                \tadd    %edx,%eax\n    6e62:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    6e66:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6e6b:\tf3 0f 11 40 0c       \tmovss  %xmm0,0xc(%rax)\n    6e70:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6e77 <CG_ParticleSmoke+0xbf>\n    6e77:\t8b 90 60 a4 01 00    \tmov    0x1a460(%rax),%edx\n    6e7d:\t48 8b 04 24          \tmov    (%rsp),%rax\n    6e81:\t8b 40 58             \tmov    0x58(%rax),%eax\n    6e84:\t01 d0                \tadd    %edx,%eax\n    6e86:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    6e8a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6e8f:\tf3 0f 11 40 64       \tmovss  %xmm0,0x64(%rax)\n    6e94:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6e99:\tc7 40 34 00 00 00 00 \tmovl   $0x0,0x34(%rax)\n    6ea0:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6ea5:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 6ead <CG_ParticleSmoke+0xf5>\n    6eac:\t00 \n    6ead:\tf3 0f 11 40 3c       \tmovss  %xmm0,0x3c(%rax)\n    6eb2:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6eb7:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    6ebb:\tf3 0f 11 40 40       \tmovss  %xmm0,0x40(%rax)\n    6ec0:\t48 8b 04 24          \tmov    (%rsp),%rax\n    6ec4:\tf3 0f 10 40 64       \tmovss  0x64(%rax),%xmm0\n    6ec9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6ece:\tf3 0f 11 40 5c       \tmovss  %xmm0,0x5c(%rax)\n    6ed3:\t48 8b 04 24          \tmov    (%rsp),%rax\n    6ed7:\tf3 0f 10 40 70       \tmovss  0x70(%rax),%xmm0\n    6edc:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6ee1:\tf3 0f 11 40 60       \tmovss  %xmm0,0x60(%rax)\n    6ee6:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6eeb:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n    6eef:\t89 50 48             \tmov    %edx,0x48(%rax)\n    6ef2:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6ef7:\tc7 40 68 00 00 00 00 \tmovl   $0x0,0x68(%rax)\n    6efe:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6f03:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 6f0b <CG_ParticleSmoke+0x153>\n    6f0a:\t00 \n    6f0b:\tf3 0f 11 40 4c       \tmovss  %xmm0,0x4c(%rax)\n    6f10:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6f15:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 6f1d <CG_ParticleSmoke+0x165>\n    6f1c:\t00 \n    6f1d:\tf3 0f 11 40 50       \tmovss  %xmm0,0x50(%rax)\n    6f22:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6f27:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 6f2f <CG_ParticleSmoke+0x177>\n    6f2e:\t00 \n    6f2f:\tf3 0f 11 40 54       \tmovss  %xmm0,0x54(%rax)\n    6f34:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6f39:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 6f41 <CG_ParticleSmoke+0x189>\n    6f40:\t00 \n    6f41:\tf3 0f 11 40 58       \tmovss  %xmm0,0x58(%rax)\n    6f46:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6f4b:\tc7 40 44 03 00 00 00 \tmovl   $0x3,0x44(%rax)\n    6f52:\t48 8b 04 24          \tmov    (%rsp),%rax\n    6f56:\tf3 0f 10 40 5c       \tmovss  0x5c(%rax),%xmm0\n    6f5b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6f60:\tf3 0f 11 40 10       \tmovss  %xmm0,0x10(%rax)\n    6f65:\t48 8b 04 24          \tmov    (%rsp),%rax\n    6f69:\tf3 0f 10 40 60       \tmovss  0x60(%rax),%xmm0\n    6f6e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6f73:\tf3 0f 11 40 14       \tmovss  %xmm0,0x14(%rax)\n    6f78:\t48 8b 04 24          \tmov    (%rsp),%rax\n    6f7c:\tf3 0f 10 40 64       \tmovss  0x64(%rax),%xmm0\n    6f81:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6f86:\tf3 0f 11 40 18       \tmovss  %xmm0,0x18(%rax)\n    6f8b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6f90:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    6f94:\tf3 0f 11 40 20       \tmovss  %xmm0,0x20(%rax)\n    6f99:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6f9e:\tf3 0f 10 40 20       \tmovss  0x20(%rax),%xmm0\n    6fa3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6fa8:\tf3 0f 11 40 1c       \tmovss  %xmm0,0x1c(%rax)\n    6fad:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6fb2:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    6fb6:\tf3 0f 11 40 30       \tmovss  %xmm0,0x30(%rax)\n    6fbb:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6fc0:\tf3 0f 10 40 30       \tmovss  0x30(%rax),%xmm0\n    6fc5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6fca:\tf3 0f 11 40 2c       \tmovss  %xmm0,0x2c(%rax)\n    6fcf:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6fd4:\tf3 0f 10 40 2c       \tmovss  0x2c(%rax),%xmm0\n    6fd9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6fde:\tf3 0f 11 40 28       \tmovss  %xmm0,0x28(%rax)\n    6fe3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    6fe8:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 6ff0 <CG_ParticleSmoke+0x238>\n    6fef:\t00 \n    6ff0:\tf3 0f 11 40 24       \tmovss  %xmm0,0x24(%rax)\n    6ff5:\t48 8b 04 24          \tmov    (%rsp),%rax\n    6ff9:\t8b 80 ac 00 00 00    \tmov    0xac(%rax),%eax\n    6fff:\t83 f8 01             \tcmp    $0x1,%eax\n    7002:\t75 1f                \tjne    7023 <CG_ParticleSmoke+0x26b>\n    7004:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    7009:\tf3 0f 10 40 24       \tmovss  0x24(%rax),%xmm0\n    700e:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # 7016 <CG_ParticleSmoke+0x25e>\n    7015:\t00 \n    7016:\t0f 57 c1             \txorps  %xmm1,%xmm0\n    7019:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    701e:\tf3 0f 11 40 24       \tmovss  %xmm0,0x24(%rax)\n    7023:\te8 00 00 00 00       \tcallq  7028 <CG_ParticleSmoke+0x270>\n    7028:\t25 ff 7f 00 00       \tand    $0x7fff,%eax\n    702d:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    7031:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # 7039 <CG_ParticleSmoke+0x281>\n    7038:\t00 \n    7039:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n    703d:\tf3 0f 5a c8          \tcvtss2sd %xmm0,%xmm1\n    7041:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 7049 <CG_ParticleSmoke+0x291>\n    7048:\t00 \n    7049:\tf2 0f 58 c8          \taddsd  %xmm0,%xmm1\n    704d:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 7055 <CG_ParticleSmoke+0x29d>\n    7054:\t00 \n    7055:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n    7059:\tf2 0f 2c d0          \tcvttsd2si %xmm0,%edx\n    705d:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    7062:\t89 50 78             \tmov    %edx,0x78(%rax)\n    7065:\teb 01                \tjmp    7068 <CG_ParticleSmoke+0x2b0>\n    7067:\t90                   \tnop\n    7068:\t48 83 c4 28          \tadd    $0x28,%rsp\n    706c:\tc3                   \tretq   \n    706d:\t90                   \tnop", "code_s": "float *__fastcall CG_ParticleSmoke(int a1, float *a2) {\n  float *result;\n  double v3;\n  float *<span class=\"supfact\">v4</span>;\n  if (!a1)\n    CG_Printf(String);\n  result = (float *)free_particles;\n  if (free_particles) {\n    <span class=\"supfact\">v4</span> = (float *)free_particles;\n    free_particles = (_QWORD *)*free_particles;\n    *(_QWORD *)<span class=\"supfact\">v4</span> = active_particles;\n    active_particles = <span class=\"supfact\">v4</span>;\n    <span class=\"supfact\">v4</span>[Number] = (float)SLODWORD(cg[Number]);\n    <span class=\"supfact\">v4</span>[Number] =\n        (float)(LODWORD(cg[Number]) + *((_DWORD *)a2 + Number));\n    <span class=\"supfact\">v4</span>[Number] =\n        (float)(LODWORD(cg[Number]) + *((_DWORD *)a2 + Number));\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    <span class=\"supfact\">v4</span>[Number] = a2[Number];\n    <span class=\"supfact\">v4</span>[Number] = a2[Number];\n    *((_DWORD *)<span class=\"supfact\">v4</span> + Number) = a1;\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    *((_DWORD *)<span class=\"supfact\">v4</span> + Number) = Number;\n    <span class=\"supfact\">v4</span>[Number] = a2[Number];\n    <span class=\"supfact\">v4</span>[Number] = a2[Number];\n    <span class=\"supfact\">v4</span>[Number] = a2[Number];\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">v4</span>[Number];\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">v4</span>[Number];\n    <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">v4</span>[Number];\n    <span class=\"supfact\">v4</span>[Number] = Number;\n    if (*((_DWORD *)a2 + Number) == Number)\n      <span class=\"supfact\">v4</span>[Number] = -<span class=\"supfact\">v4</span>[Number];\n    v3 = Number * ((float)((float)(rand() & Number) / Number) + Number);\n    result = <span class=\"supfact\">v4</span>;\n    *((_DWORD *)<span class=\"supfact\">v4</span> + Number) = (int)v3;\n  }\n  return result;\n}", "code_t": "void __cdecl CG_ParticleSmoke(qhandle_t pshader, centity_t *cent) {\n  cparticle_t *<span class=\"supfact\">p</span>;\n  if (!pshader)\n    CG_Printf(String);\n  if (free_particles) {\n    <span class=\"supfact\">p</span> = free_particles;\n    free_particles = free_particles->next;\n    <span class=\"supfact\">p</span>->next = active_particles;\n    active_particles = <span class=\"supfact\">p</span>;\n    <span class=\"supfact\">p</span>->time = (float)SLODWORD(cg[Number]);\n    <span class=\"supfact\">p</span>->endtime =\n        (float)(LODWORD(cg[Number]) + cent->currentState.time);\n    <span class=\"supfact\">p</span>->startfade =\n        (float)(LODWORD(cg[Number]) + cent->currentState.time2);\n    <span class=\"supfact\">p</span>->color = Number;\n    <span class=\"supfact\">p</span>->alpha = Number;\n    <span class=\"supfact\">p</span>->alphavel = Number;\n    <span class=\"supfact\">p</span>->start = cent->currentState.origin[Number];\n    <span class=\"supfact\">p</span>->end = cent->currentState.origin2[Number];\n    <span class=\"supfact\">p</span>->pshader = pshader;\n    <span class=\"supfact\">p</span>->rotate = qfalse;\n    <span class=\"supfact\">p</span>->height = Number;\n    <span class=\"supfact\">p</span>->width = Number;\n    <span class=\"supfact\">p</span>->endheight = Number;\n    <span class=\"supfact\">p</span>->endwidth = Number;\n    <span class=\"supfact\">p</span>->type = Number;\n    <span class=\"supfact\">p</span>->org[Number] = cent->currentState.origin[Number];\n    <span class=\"supfact\">p</span>->org[Number] = cent->currentState.origin[Number];\n    <span class=\"supfact\">p</span>->org[Number] = cent->currentState.origin[Number];\n    <span class=\"supfact\">p</span>->vel[Number] = Number;\n    <span class=\"supfact\">p</span>->vel[Number] = <span class=\"supfact\">p</span>->vel[Number];\n    <span class=\"supfact\">p</span>->accel[Number] = Number;\n    <span class=\"supfact\">p</span>->accel[Number] = <span class=\"supfact\">p</span>->accel[Number];\n    <span class=\"supfact\">p</span>->accel[Number] = <span class=\"supfact\">p</span>->accel[Number];\n    <span class=\"supfact\">p</span>->vel[Number] = Number;\n    if (cent->currentState.frame == Number)\n      <span class=\"supfact\">p</span>->vel[Number] = -<span class=\"supfact\">p</span>->vel[Number];\n    <span class=\"supfact\">p</span>->roll =\n        (int)(Number * ((float)((float)(rand() & Number) / Number) + Number));\n  }\n}", "var": [{"name": "v4", "type": "cparticle_t *", "ref_name": "p", "ref_type": "cparticle_t *"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7c8b7a7781f1cadd00b86bd331a6acad366142cb3db9ab2fde20cee244c5ff14", "path_in_repo": "XanClic/qemu//qemu-ga", "objdump": "0000000000048287 <visit_type_PciInfoList>:\n   48287:\t55                   \tpush   %rbp\n   48288:\t48 89 e5             \tmov    %rsp,%rbp\n   4828b:\t48 83 ec 40          \tsub    $0x40,%rsp\n   4828f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   48293:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n   48297:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n   4829b:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n   4829f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n   482a6:\t00 00 \n   482a8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   482ac:\t31 c0                \txor    %eax,%eax\n   482ae:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   482b5:\t00 \n   482b6:\t48 c7 45 f0 10 00 00 \tmovq   $0x10,-0x10(%rbp)\n   482bd:\t00 \n   482be:\t48 8d 7d e0          \tlea    -0x20(%rbp),%rdi\n   482c2:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n   482c6:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n   482ca:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n   482ce:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   482d2:\t49 89 f8             \tmov    %rdi,%r8\n   482d5:\t48 89 c7             \tmov    %rax,%rdi\n   482d8:\te8 7b c1 fd ff       \tcallq  24458 <visit_start_list>\n   482dd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   482e1:\t48 85 c0             \ttest   %rax,%rax\n   482e4:\t0f 85 c2 00 00 00    \tjne    483ac <visit_type_PciInfoList+0x125>\n   482ea:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   482ee:\t48 8b 00             \tmov    (%rax),%rax\n   482f1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   482f5:\teb 47                \tjmp    4833e <visit_type_PciInfoList+0xb7>\n   482f7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   482fb:\t48 8d 70 08          \tlea    0x8(%rax),%rsi\n   482ff:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n   48303:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   48307:\t48 89 d1             \tmov    %rdx,%rcx\n   4830a:\t48 89 f2             \tmov    %rsi,%rdx\n   4830d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   48312:\t48 89 c7             \tmov    %rax,%rdi\n   48315:\te8 53 fe ff ff       \tcallq  4816d <visit_type_PciInfo>\n   4831a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   4831e:\t48 85 c0             \ttest   %rax,%rax\n   48321:\t75 24                \tjne    48347 <visit_type_PciInfoList+0xc0>\n   48323:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n   48327:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n   4832b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   4832f:\t48 89 ce             \tmov    %rcx,%rsi\n   48332:\t48 89 c7             \tmov    %rax,%rdi\n   48335:\te8 31 c2 fd ff       \tcallq  2456b <visit_next_list>\n   4833a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   4833e:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n   48343:\t75 b2                \tjne    482f7 <visit_type_PciInfoList+0x70>\n   48345:\teb 01                \tjmp    48348 <visit_type_PciInfoList+0xc1>\n   48347:\t90                   \tnop\n   48348:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   4834c:\t48 85 c0             \ttest   %rax,%rax\n   4834f:\t75 13                \tjne    48364 <visit_type_PciInfoList+0xdd>\n   48351:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n   48355:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   48359:\t48 89 d6             \tmov    %rdx,%rsi\n   4835c:\t48 89 c7             \tmov    %rax,%rdi\n   4835f:\te8 7e c2 fd ff       \tcallq  245e2 <visit_check_list>\n   48364:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n   48368:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   4836c:\t48 89 d6             \tmov    %rdx,%rsi\n   4836f:\t48 89 c7             \tmov    %rax,%rdi\n   48372:\te8 af c2 fd ff       \tcallq  24626 <visit_end_list>\n   48377:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   4837b:\t48 85 c0             \ttest   %rax,%rax\n   4837e:\t74 2f                \tje     483af <visit_type_PciInfoList+0x128>\n   48380:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   48384:\t48 89 c7             \tmov    %rax,%rdi\n   48387:\te8 f1 c4 fd ff       \tcallq  2487d <visit_is_input>\n   4838c:\t84 c0                \ttest   %al,%al\n   4838e:\t74 1f                \tje     483af <visit_type_PciInfoList+0x128>\n   48390:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   48394:\t48 8b 00             \tmov    (%rax),%rax\n   48397:\t48 89 c7             \tmov    %rax,%rdi\n   4839a:\te8 8e c4 ff ff       \tcallq  4482d <qapi_free_PciInfoList>\n   4839f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   483a3:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n   483aa:\teb 04                \tjmp    483b0 <visit_type_PciInfoList+0x129>\n   483ac:\t90                   \tnop\n   483ad:\teb 01                \tjmp    483b0 <visit_type_PciInfoList+0x129>\n   483af:\t90                   \tnop\n   483b0:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   483b4:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   483b8:\t48 89 d6             \tmov    %rdx,%rsi\n   483bb:\t48 89 c7             \tmov    %rax,%rdi\n   483be:\te8 87 07 ff ff       \tcallq  38b4a <error_propagate>\n   483c3:\t90                   \tnop\n   483c4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   483c8:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n   483cf:\t00 00 \n   483d1:\t74 05                \tje     483d8 <visit_type_PciInfoList+0x151>\n   483d3:\te8 98 35 fc ff       \tcallq  b970 <__stack_chk_fail@plt>\n   483d8:\tc9                   \tleaveq \n   483d9:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall visit_type_PciInfoList(__int64 a1, __int64 a2,\n                                                   __int64 *a3, __int64 *a4) {\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v9</span> = Number L;\n  visit_start_list(a1, a2, a3, Number, (__int64)&<span class=\"supfact\">v7</span>);\n  if (!<span class=\"supfact\">v7</span>) {\n    for (<span class=\"supfact\">i</span> = *a3; <span class=\"supfact\">i</span>;\n         <span class=\"supfact\">i</span> =\n             visit_next_list(a1, <span class=\"supfact\">i</span>, <span class=\"supfact\">v9</span>)) {\n      visit_type_PciInfo(a1, Number L, (__int64 *)(<span class=\"supfact\">i</span> + Number),\n                         &<span class=\"supfact\">v7</span>);\n      if (<span class=\"supfact\">v7</span>)\n        break;\n    }\n    if (!<span class=\"supfact\">v7</span>)\n      visit_check_list(a1, (__int64)&<span class=\"supfact\">v7</span>);\n    visit_end_list(a1, (__int64)a3);\n    if (<span class=\"supfact\">v7</span> && visit_is_input(a1)) {\n      qapi_free_PciInfoList(*a3);\n      *a3 = Number L;\n    }\n  }\n  error_propagate(a4, <span class=\"supfact\">v7</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v10</span>;\n}", "code_t": "void __cdecl visit_type_PciInfoList(Visitor_0 *v, const char *name,\n                                    PciInfoList_0 **obj, Error_0 **errp) {\n  Error_0 *<span class=\"supfact\">err</span>;\n  PciInfoList_0 *<span class=\"supfact\">tail</span>;\n  size_t <span class=\"supfact\">size</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  <span class=\"supfact\">err</span> = Number L;\n  <span class=\"supfact\">size</span> = Number L;\n  visit_start_list(v, name, (GenericList_0 **)obj, Number,\n                   &<span class=\"supfact\">err</span>);\n  if (!<span class=\"supfact\">err</span>) {\n    for (<span class=\"supfact\">tail</span> = *obj; <span class=\"supfact\">tail</span>;\n         <span class=\"supfact\">tail</span> = (PciInfoList_0 *)visit_next_list(\n             v, (GenericList_0 *)<span class=\"supfact\">tail</span>, <span class=\"supfact\">size</span>)) {\n      visit_type_PciInfo(v, Number L, &<span class=\"supfact\">tail</span>->value,\n                         &<span class=\"supfact\">err</span>);\n      if (<span class=\"supfact\">err</span>)\n        break;\n    }\n    if (!<span class=\"supfact\">err</span>)\n      visit_check_list(v, &<span class=\"supfact\">err</span>);\n    visit_end_list(v, (void **)obj);\n    if (<span class=\"supfact\">err</span> && visit_is_input(v)) {\n      qapi_free_PciInfoList(*obj);\n      *obj = Number L;\n    }\n  }\n  error_propagate(errp, <span class=\"supfact\">err</span>);\n}", "var": [{"name": "v10", "type": "unsigned __int64", "ref_name": "v9", "ref_type": "unsigned __int64"}, {"name": "v9", "type": "size_t", "ref_name": "size", "ref_type": "size_t"}, {"name": "i", "type": "PciMemoryRegionList_0 *", "ref_name": "tail", "ref_type": "PciInfoList_0 *"}, {"name": "v7", "type": "Error_0 *", "ref_name": "err", "ref_type": "Error_0 *"}], "body_in_train": false}, {"repo_owner": "hthetiot", "repo_name": "node-snowball", "path": "hthetiot/node-snowball/ee51c04e08b746eee903d8aded9d5532b5177ba7e9e6fb2b7225d760c20715e8", "path_in_repo": "hthetiot/node-snowball/src/libstemmer/src_c/stem_ISO_8859_2_hungarian.o", "objdump": "000000000000069d <r_case_special>:\n     69d:\t55                   \tpush   %rbp\n     69e:\t48 89 e5             \tmov    %rsp,%rbp\n     6a1:\t48 83 ec 30          \tsub    $0x30,%rsp\n     6a5:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     6a9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6ad:\t8b 50 08             \tmov    0x8(%rax),%edx\n     6b0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6b4:\t89 50 18             \tmov    %edx,0x18(%rax)\n     6b7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6bb:\t8b 40 08             \tmov    0x8(%rax),%eax\n     6be:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     6c1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6c5:\t8b 40 10             \tmov    0x10(%rax),%eax\n     6c8:\t39 c2                \tcmp    %eax,%edx\n     6ca:\t7e 3c                \tjle    708 <r_case_special+0x6b>\n     6cc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6d0:\t48 8b 10             \tmov    (%rax),%rdx\n     6d3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6d7:\t8b 40 08             \tmov    0x8(%rax),%eax\n     6da:\t48 98                \tcltq   \n     6dc:\t48 83 e8 01          \tsub    $0x1,%rax\n     6e0:\t48 01 d0             \tadd    %rdx,%rax\n     6e3:\t0f b6 00             \tmovzbl (%rax),%eax\n     6e6:\t3c 6e                \tcmp    $0x6e,%al\n     6e8:\t74 28                \tje     712 <r_case_special+0x75>\n     6ea:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6ee:\t48 8b 10             \tmov    (%rax),%rdx\n     6f1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6f5:\t8b 40 08             \tmov    0x8(%rax),%eax\n     6f8:\t48 98                \tcltq   \n     6fa:\t48 83 e8 01          \tsub    $0x1,%rax\n     6fe:\t48 01 d0             \tadd    %rdx,%rax\n     701:\t0f b6 00             \tmovzbl (%rax),%eax\n     704:\t3c 74                \tcmp    $0x74,%al\n     706:\t74 0a                \tje     712 <r_case_special+0x75>\n     708:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     70d:\te9 01 01 00 00       \tjmpq   813 <r_case_special+0x176>\n     712:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     716:\tba 03 00 00 00       \tmov    $0x3,%edx\n     71b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     720:\t48 89 c7             \tmov    %rax,%rdi\n     723:\te8 00 00 00 00       \tcallq  728 <r_case_special+0x8b>\n     728:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     72b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     72f:\t75 0a                \tjne    73b <r_case_special+0x9e>\n     731:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     736:\te9 d8 00 00 00       \tjmpq   813 <r_case_special+0x176>\n     73b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     73f:\t8b 50 08             \tmov    0x8(%rax),%edx\n     742:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     746:\t89 50 14             \tmov    %edx,0x14(%rax)\n     749:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     74d:\t48 89 c7             \tmov    %rax,%rdi\n     750:\te8 92 fa ff ff       \tcallq  1e7 <r_R1>\n     755:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     758:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n     75c:\t7f 08                \tjg     766 <r_case_special+0xc9>\n     75e:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     761:\te9 ad 00 00 00       \tjmpq   813 <r_case_special+0x176>\n     766:\t83 7d fc 03          \tcmpl   $0x3,-0x4(%rbp)\n     76a:\t74 77                \tje     7e3 <r_case_special+0x146>\n     76c:\t83 7d fc 03          \tcmpl   $0x3,-0x4(%rbp)\n     770:\t0f 8f 98 00 00 00    \tjg     80e <r_case_special+0x171>\n     776:\t83 7d fc 02          \tcmpl   $0x2,-0x4(%rbp)\n     77a:\t74 43                \tje     7bf <r_case_special+0x122>\n     77c:\t83 7d fc 02          \tcmpl   $0x2,-0x4(%rbp)\n     780:\t0f 8f 88 00 00 00    \tjg     80e <r_case_special+0x171>\n     786:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n     78a:\t74 08                \tje     794 <r_case_special+0xf7>\n     78c:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n     790:\t74 09                \tje     79b <r_case_special+0xfe>\n     792:\teb 7a                \tjmp    80e <r_case_special+0x171>\n     794:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     799:\teb 78                \tjmp    813 <r_case_special+0x176>\n     79b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     79f:\tba 00 00 00 00       \tmov    $0x0,%edx\n     7a4:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     7a9:\t48 89 c7             \tmov    %rax,%rdi\n     7ac:\te8 00 00 00 00       \tcallq  7b1 <r_case_special+0x114>\n     7b1:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     7b4:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     7b8:\t79 4d                \tjns    807 <r_case_special+0x16a>\n     7ba:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     7bd:\teb 54                \tjmp    813 <r_case_special+0x176>\n     7bf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7c3:\tba 00 00 00 00       \tmov    $0x0,%edx\n     7c8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     7cd:\t48 89 c7             \tmov    %rax,%rdi\n     7d0:\te8 00 00 00 00       \tcallq  7d5 <r_case_special+0x138>\n     7d5:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n     7d8:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n     7dc:\t79 2c                \tjns    80a <r_case_special+0x16d>\n     7de:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n     7e1:\teb 30                \tjmp    813 <r_case_special+0x176>\n     7e3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7e7:\tba 00 00 00 00       \tmov    $0x0,%edx\n     7ec:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     7f1:\t48 89 c7             \tmov    %rax,%rdi\n     7f4:\te8 00 00 00 00       \tcallq  7f9 <r_case_special+0x15c>\n     7f9:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     7fc:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     800:\t79 0b                \tjns    80d <r_case_special+0x170>\n     802:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     805:\teb 0c                \tjmp    813 <r_case_special+0x176>\n     807:\t90                   \tnop\n     808:\teb 04                \tjmp    80e <r_case_special+0x171>\n     80a:\t90                   \tnop\n     80b:\teb 01                \tjmp    80e <r_case_special+0x171>\n     80d:\t90                   \tnop\n     80e:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     813:\tc9                   \tleaveq \n     814:\tc3                   \tretq   ", "code_s": "__int64 __fastcall r_case_special(__int64 a1) {\n  int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  _BOOL4 <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number);\n  if (*(_DWORD *)(a1 + Number) - Number <= *(_DWORD *)(a1 + Number) ||\n      *(_BYTE *)(*(_QWORD *)a1 + *(int *)(a1 + Number) - Number L) != Number &&\n          *(_BYTE *)(*(_QWORD *)a1 + *(int *)(a1 + Number) - Number L) !=\n              Number) {\n    return Number L;\n  }\n  <span class=\"supfact\">v6</span> = find_among_b(a1, &a_5, Number L);\n  if (!<span class=\"supfact\">v6</span>)\n    return Number L;\n  *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number);\n  <span class=\"supfact\">v5</span> = r_R1(a1);\n  if (<span class=\"supfact\">v5</span> <= Number)\n    return <span class=\"supfact\">v5</span>;\n  if (<span class=\"supfact\">v6</span> == Number) {\n    <span class=\"supfact\">v4</span> = slice_from_s(a1, Number L, &s_4);\n    if (<span class=\"supfact\">v4</span> < Number)\n      return (unsigned int)<span class=\"supfact\">v4</span>;\n  } else if (<span class=\"supfact\">v6</span> <= Number) {\n    if (<span class=\"supfact\">v6</span> == Number) {\n      <span class=\"supfact\">v3</span> = slice_from_s(a1, Number L, &s_3);\n      if (<span class=\"supfact\">v3</span> < Number)\n        return (unsigned int)<span class=\"supfact\">v3</span>;\n    } else if (<span class=\"supfact\">v6</span> == Number) {\n      <span class=\"supfact\">v2</span> = slice_from_s(a1, Number L, &s_2);\n      if (<span class=\"supfact\">v2</span> < Number)\n        return (unsigned int)<span class=\"supfact\">v2</span>;\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl r_case_special(SN_env *z) {\n  int <span class=\"supfact\">ret_0</span>;\n  int <span class=\"supfact\">ret_1</span>;\n  int <span class=\"supfact\">ret_2</span>;\n  int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">among_var</span>;\n  z->ket = z->c;\n  if (z->c - Number <= z->lb ||\n      z->p[z->c - Number] != Number && z->p[z->c - Number] != Number)\n    return Number;\n  <span class=\"supfact\">among_var</span> = find_among_b(z, a_5, Number L);\n  if (!<span class=\"supfact\">among_var</span>)\n    return Number;\n  z->bra = z->c;\n  <span class=\"supfact\">ret</span> = r_R1(z);\n  if (<span class=\"supfact\">ret</span> <= Number)\n    return <span class=\"supfact\">ret</span>;\n  if (<span class=\"supfact\">among_var</span> == Number) {\n    <span class=\"supfact\">ret_2</span> = slice_from_s(z, Number L, s_4);\n    if (<span class=\"supfact\">ret_2</span> < Number)\n      return <span class=\"supfact\">ret_2</span>;\n  } else if (<span class=\"supfact\">among_var</span> <= Number) {\n    if (<span class=\"supfact\">among_var</span> == Number) {\n      <span class=\"supfact\">ret_1</span> = slice_from_s(z, Number L, s_3);\n      if (<span class=\"supfact\">ret_1</span> < Number)\n        return <span class=\"supfact\">ret_1</span>;\n    } else if (<span class=\"supfact\">among_var</span> == Number) {\n      <span class=\"supfact\">ret_0</span> = slice_from_s(z, Number L, s_2);\n      if (<span class=\"supfact\">ret_0</span> < Number)\n        return <span class=\"supfact\">ret_0</span>;\n    }\n  }\n  return Number;\n}", "var": [{"name": "v6", "type": "int", "ref_name": "among_var", "ref_type": "int"}, {"name": "v5", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "v4", "type": "int", "ref_name": "ret_2", "ref_type": "int"}, {"name": "v3", "type": "int", "ref_name": "ret_1", "ref_type": "int"}, {"name": "v2", "type": "int", "ref_name": "ret_0", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "slapin", "repo_name": "q2-dev", "path": "slapin/q2-dev/a2745afd79a9febdf620b963a609a4607543ad16905603fc355b7c9f257c2f9a", "path_in_repo": "slapin/q2-dev/q2tools/qrad3", "objdump": "0000000000406f65 <PvsForOrigin>:\n  406f65:\t55                   \tpush   %rbp\n  406f66:\t48 89 e5             \tmov    %rsp,%rbp\n  406f69:\t48 83 ec 20          \tsub    $0x20,%rsp\n  406f6d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  406f71:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  406f75:\t8b 05 c5 34 c0 02    \tmov    0x2c034c5(%rip),%eax        # 300a440 <visdatasize>\n  406f7b:\t85 c0                \ttest   %eax,%eax\n  406f7d:\t75 2f                \tjne    406fae <PvsForOrigin+0x49>\n  406f7f:\t8b 05 3b b6 22 03    \tmov    0x322b63b(%rip),%eax        # 36325c0 <numleafs>\n  406f85:\t83 c0 07             \tadd    $0x7,%eax\n  406f88:\t8d 50 07             \tlea    0x7(%rax),%edx\n  406f8b:\t85 c0                \ttest   %eax,%eax\n  406f8d:\t0f 48 c2             \tcmovs  %edx,%eax\n  406f90:\tc1 f8 03             \tsar    $0x3,%eax\n  406f93:\t48 63 d0             \tmovslq %eax,%rdx\n  406f96:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  406f9a:\tbe ff 00 00 00       \tmov    $0xff,%esi\n  406f9f:\t48 89 c7             \tmov    %rax,%rdi\n  406fa2:\te8 69 a1 ff ff       \tcallq  401110 <memset@plt>\n  406fa7:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  406fac:\teb 5b                \tjmp    407009 <PvsForOrigin+0xa4>\n  406fae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406fb2:\t48 89 c7             \tmov    %rax,%rdi\n  406fb5:\te8 74 ff ff ff       \tcallq  406f2e <PointInLeaf>\n  406fba:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  406fbe:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406fc2:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n  406fc6:\t66 83 f8 ff          \tcmp    $0xffff,%ax\n  406fca:\t75 07                \tjne    406fd3 <PvsForOrigin+0x6e>\n  406fcc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406fd1:\teb 36                \tjmp    407009 <PvsForOrigin+0xa4>\n  406fd3:\t48 8b 05 06 f2 00 00 \tmov    0xf206(%rip),%rax        # 4161e0 <dvis>\n  406fda:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  406fde:\t0f b7 52 04          \tmovzwl 0x4(%rdx),%edx\n  406fe2:\t0f bf d2             \tmovswl %dx,%edx\n  406fe5:\t48 63 d2             \tmovslq %edx,%rdx\n  406fe8:\t8b 44 d0 04          \tmov    0x4(%rax,%rdx,8),%eax\n  406fec:\t48 98                \tcltq   \n  406fee:\t48 8d 90 c0 25 53 03 \tlea    0x35325c0(%rax),%rdx\n  406ff5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  406ff9:\t48 89 c6             \tmov    %rax,%rsi\n  406ffc:\t48 89 d7             \tmov    %rdx,%rdi\n  406fff:\te8 cd 21 00 00       \tcallq  4091d1 <DecompressVis>\n  407004:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  407009:\tc9                   \tleaveq \n  40700a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall PvsForOrigin(float *a1, void *a2) {\n  int v2;\n  __int64 result;\n  __int64 <span class=\"supfact\">v4</span>;\n  if (visdatasize) {\n    <span class=\"supfact\">v4</span> = PointInLeaf(a1);\n    if (*(_WORD *)(<span class=\"supfact\">v4</span> + Number) == Number) {\n      result = Number L;\n    } else {\n      DecompressVis((char *)&dvisdata +\n                        *((int *)dvis +\n                          Number * *(__int16 *)(<span class=\"supfact\">v4</span> + Number) +\n                          Number),\n                    a2);\n      result = Number L;\n    }\n  } else {\n    v2 = numleafs + Number;\n    if (numleafs + Number < Number)\n      v2 = numleafs + Number;\n    memset(a2, Number, v2 >> Number);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "qboolean __cdecl PvsForOrigin(vec_t *org, byte *pvs) {\n  int v2;\n  qboolean result;\n  dleaf_t *<span class=\"supfact\">leaf</span>;\n  if (visdatasize) {\n    <span class=\"supfact\">leaf</span> = PointInLeaf(org);\n    if (<span class=\"supfact\">leaf</span>->cluster == Number) {\n      result = false;\n    } else {\n      DecompressVis(\n          &dvisdata[dvis->bitofs[<span class=\"supfact\">leaf</span>->cluster][Number]], pvs);\n      result = true;\n    }\n  } else {\n    v2 = numleafs + Number;\n    if (numleafs + Number < Number)\n      v2 = numleafs + Number;\n    memset(pvs, Number, v2 >> Number);\n    result = true;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "__int64", "ref_name": "leaf", "ref_type": "dleaf_t *"}], "body_in_train": false}, {"repo_owner": "sekcheong", "repo_name": "tgrep2", "path": "sekcheong/tgrep2/c3c0148e6eda0ba194943c5c6d7d67ff9e34261f2c4b28a3de0963ab70b38733", "path_in_repo": "sekcheong/tgrep2//tgrep2", "objdump": "000000000040bad5 <stringEndsIn>:\n  40bad5:\t55                   \tpush   %rbp\n  40bad6:\t48 89 e5             \tmov    %rsp,%rbp\n  40bad9:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40badd:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40bae1:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40bae5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40bae9:\t48 89 c7             \tmov    %rax,%rdi\n  40baec:\te8 1f 66 ff ff       \tcallq  402110 <strlen@plt>\n  40baf1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40baf4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40baf8:\t48 89 c7             \tmov    %rax,%rdi\n  40bafb:\te8 10 66 ff ff       \tcallq  402110 <strlen@plt>\n  40bb00:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40bb03:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40bb06:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n  40bb09:\t7d 07                \tjge    40bb12 <stringEndsIn+0x3d>\n  40bb0b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40bb10:\teb 2c                \tjmp    40bb3e <stringEndsIn+0x69>\n  40bb12:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40bb15:\t48 63 d0             \tmovslq %eax,%rdx\n  40bb18:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40bb1b:\t48 98                \tcltq   \n  40bb1d:\t48 29 c2             \tsub    %rax,%rdx\n  40bb20:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40bb24:\t48 01 c2             \tadd    %rax,%rdx\n  40bb27:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40bb2b:\t48 89 c6             \tmov    %rax,%rsi\n  40bb2e:\t48 89 d7             \tmov    %rdx,%rdi\n  40bb31:\te8 ba 66 ff ff       \tcallq  4021f0 <strcmp@plt>\n  40bb36:\t85 c0                \ttest   %eax,%eax\n  40bb38:\t0f 94 c0             \tsete   %al\n  40bb3b:\t0f b6 c0             \tmovzbl %al,%eax\n  40bb3e:\tc9                   \tleaveq \n  40bb3f:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall stringEndsIn(const char *a1, const char *a2) {\n  _BOOL8 result;\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = strlen(a1);\n  <span class=\"supfact\">v3</span> = strlen(a2);\n  if (<span class=\"supfact\">v4</span> >= <span class=\"supfact\">v3</span>)\n    result = strcmp(&a1[<span class=\"supfact\">v4</span> - (__int64)<span class=\"supfact\">v3</span>],\n                    a2) == Number;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl stringEndsIn(char *s, char *t) {\n  int result;\n  int <span class=\"supfact\">lt</span>;\n  int <span class=\"supfact\">ls</span>;\n  <span class=\"supfact\">ls</span> = strlen(s);\n  <span class=\"supfact\">lt</span> = strlen(t);\n  if (<span class=\"supfact\">ls</span> >= <span class=\"supfact\">lt</span>)\n    result = strcmp(&s[<span class=\"supfact\">ls</span> - (__int64)<span class=\"supfact\">lt</span>], t) ==\n             Number;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "v4", "type": "int", "ref_name": "ls", "ref_type": "int"}, {"name": "v3", "type": "int", "ref_name": "lt", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "leon-anavi", "repo_name": "xmame-arm", "path": "leon-anavi/xmame-arm/cdc6b27d1ff4baee0897fee0b405b63e557b0bb60f0e9e4607485a7c805f4540", "path_in_repo": "leon-anavi/xmame-arm//xmame.obj/vidhrdw/8080bw.o", "objdump": "000000000000056e <polaris_videoram_w>:\n     56e:\t55                   \tpush   %rbp\n     56f:\t48 89 e5             \tmov    %rsp,%rbp\n     572:\t48 83 ec 40          \tsub    $0x40,%rsp\n     576:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n     579:\t89 f0                \tmov    %esi,%eax\n     57b:\t88 45 c8             \tmov    %al,-0x38(%rbp)\n     57e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 585 <polaris_videoram_w+0x17>\n     585:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     588:\t48 01 c2             \tadd    %rax,%rdx\n     58b:\t0f b6 45 c8          \tmovzbl -0x38(%rbp),%eax\n     58f:\t88 02                \tmov    %al,(%rdx)\n     591:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     594:\tc1 e8 05             \tshr    $0x5,%eax\n     597:\t88 45 f3             \tmov    %al,-0xd(%rbp)\n     59a:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     59d:\t83 e0 1f             \tand    $0x1f,%eax\n     5a0:\tc1 e0 03             \tshl    $0x3,%eax\n     5a3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     5a6:\tbf 91 00 00 00       \tmov    $0x91,%edi\n     5ab:\te8 00 00 00 00       \tcallq  5b0 <polaris_videoram_w+0x42>\n     5b0:\t0f b6 55 f3          \tmovzbl -0xd(%rbp),%edx\n     5b4:\tc0 ea 03             \tshr    $0x3,%dl\n     5b7:\t0f b6 d2             \tmovzbl %dl,%edx\n     5ba:\t89 d1                \tmov    %edx,%ecx\n     5bc:\tc1 e1 05             \tshl    $0x5,%ecx\n     5bf:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     5c2:\tc1 fa 03             \tsar    $0x3,%edx\n     5c5:\t09 ca                \tor     %ecx,%edx\n     5c7:\t48 63 d2             \tmovslq %edx,%rdx\n     5ca:\t48 01 d0             \tadd    %rdx,%rax\n     5cd:\t0f b6 00             \tmovzbl (%rax),%eax\n     5d0:\t0f b6 c0             \tmovzbl %al,%eax\n     5d3:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     5d6:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     5d9:\t83 e0 01             \tand    $0x1,%eax\n     5dc:\t85 c0                \ttest   %eax,%eax\n     5de:\t74 07                \tje     5e7 <polaris_videoram_w+0x79>\n     5e0:\tb8 06 00 00 00       \tmov    $0x6,%eax\n     5e5:\teb 05                \tjmp    5ec <polaris_videoram_w+0x7e>\n     5e7:\tb8 02 00 00 00       \tmov    $0x2,%eax\n     5ec:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n     5ef:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5f6 <polaris_videoram_w+0x88>\n     5f6:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     5f9:\t81 e2 1f 1f 00 00    \tand    $0x1f1f,%edx\n     5ff:\t48 01 d0             \tadd    %rdx,%rax\n     602:\t0f b6 00             \tmovzbl (%rax),%eax\n     605:\t0f b6 c0             \tmovzbl %al,%eax\n     608:\tf7 d0                \tnot    %eax\n     60a:\t83 e0 07             \tand    $0x7,%eax\n     60d:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     610:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 617 <polaris_videoram_w+0xa9>\n     617:\t0f b6 55 f3          \tmovzbl -0xd(%rbp),%edx\n     61b:\t29 c2                \tsub    %eax,%edx\n     61d:\t89 d0                \tmov    %edx,%eax\n     61f:\t88 45 e3             \tmov    %al,-0x1d(%rbp)\n     622:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     625:\t83 e0 08             \tand    $0x8,%eax\n     628:\t85 c0                \ttest   %eax,%eax\n     62a:\t75 06                \tjne    632 <polaris_videoram_w+0xc4>\n     62c:\t80 7d e3 40          \tcmpb   $0x40,-0x1d(%rbp)\n     630:\t76 20                \tjbe    652 <polaris_videoram_w+0xe4>\n     632:\t0f b6 55 c8          \tmovzbl -0x38(%rbp),%edx\n     636:\t0f b6 75 f3          \tmovzbl -0xd(%rbp),%esi\n     63a:\t8b 7d e8             \tmov    -0x18(%rbp),%edi\n     63d:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n     640:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     643:\t41 89 f8             \tmov    %edi,%r8d\n     646:\t89 c7                \tmov    %eax,%edi\n     648:\te8 5f fd ff ff       \tcallq  3ac <plot_byte>\n     64d:\te9 aa 00 00 00       \tjmpq   6fc <polaris_videoram_w+0x18e>\n     652:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n     659:\te9 93 00 00 00       \tjmpq   6f1 <polaris_videoram_w+0x183>\n     65e:\t0f b6 45 c8          \tmovzbl -0x38(%rbp),%eax\n     662:\t83 e0 01             \tand    $0x1,%eax\n     665:\t85 c0                \ttest   %eax,%eax\n     667:\t74 08                \tje     671 <polaris_videoram_w+0x103>\n     669:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     66c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     66f:\teb 62                \tjmp    6d3 <polaris_videoram_w+0x165>\n     671:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     674:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     677:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     67a:\tf7 d0                \tnot    %eax\n     67c:\t83 e0 03             \tand    $0x3,%eax\n     67f:\tba 01 00 00 00       \tmov    $0x1,%edx\n     684:\t89 c1                \tmov    %eax,%ecx\n     686:\td3 e2                \tshl    %cl,%edx\n     688:\t89 d0                \tmov    %edx,%eax\n     68a:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n     68d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     690:\tc1 f8 02             \tsar    $0x2,%eax\n     693:\t83 e0 03             \tand    $0x3,%eax\n     696:\t89 c2                \tmov    %eax,%edx\n     698:\t0f b6 45 e3          \tmovzbl -0x1d(%rbp),%eax\n     69c:\tf7 d0                \tnot    %eax\n     69e:\tc1 e0 02             \tshl    $0x2,%eax\n     6a1:\t0f b6 c0             \tmovzbl %al,%eax\n     6a4:\t09 d0                \tor     %edx,%eax\n     6a6:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n     6a9:\tbf 9a 00 00 00       \tmov    $0x9a,%edi\n     6ae:\te8 00 00 00 00       \tcallq  6b3 <polaris_videoram_w+0x145>\n     6b3:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n     6b6:\t48 01 d0             \tadd    %rdx,%rax\n     6b9:\t0f b6 00             \tmovzbl (%rax),%eax\n     6bc:\t0f b6 c0             \tmovzbl %al,%eax\n     6bf:\t23 45 dc             \tand    -0x24(%rbp),%eax\n     6c2:\t85 c0                \ttest   %eax,%eax\n     6c4:\t75 05                \tjne    6cb <polaris_videoram_w+0x15d>\n     6c6:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     6c9:\teb 05                \tjmp    6d0 <polaris_videoram_w+0x162>\n     6cb:\tb8 07 00 00 00       \tmov    $0x7,%eax\n     6d0:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     6d3:\t0f b6 4d f3          \tmovzbl -0xd(%rbp),%ecx\n     6d7:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n     6da:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     6dd:\t89 ce                \tmov    %ecx,%esi\n     6df:\t89 c7                \tmov    %eax,%edi\n     6e1:\te8 57 fc ff ff       \tcallq  33d <plot_pixel_8080>\n     6e6:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     6ea:\td0 6d c8             \tshrb   -0x38(%rbp)\n     6ed:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n     6f1:\t83 7d f8 07          \tcmpl   $0x7,-0x8(%rbp)\n     6f5:\t0f 8e 63 ff ff ff    \tjle    65e <polaris_videoram_w+0xf0>\n     6fb:\t90                   \tnop\n     6fc:\t90                   \tnop\n     6fd:\tc9                   \tleaveq \n     6fe:\tc3                   \tretq   ", "code_s": "void __fastcall polaris_videoram_w(unsigned int a1, unsigned __int8 a2) {\n  int v2;\n  int v3;\n  unsigned __int8 <span class=\"supfact\">v4</span>;\n  unsigned __int8 <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>;\n  unsigned __int8 <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v4</span> = a2;\n  *(_BYTE *)(a1 + videoram) = a2;\n  <span class=\"supfact\">v9</span> = a1 >> Number;\n  <span class=\"supfact\">v12</span> = Number * (a1 & Number);\n  <span class=\"supfact\">v8</span> = *(_BYTE *)(((Number * (<span class=\"supfact\">v9</span> >> Number)) |\n                                   (<span class=\"supfact\">v12</span> >> Number)) +\n                                  memory_region(Number L));\n  if ((<span class=\"supfact\">v8</span> & Number) != Number)\n    v2 = Number;\n  else\n    v2 = Number;\n  <span class=\"supfact\">v7</span> = v2;\n  <span class=\"supfact\">v6</span> = ~*(_BYTE *)((a1 & Number) + colorram) & Number;\n  <span class=\"supfact\">v5</span> = <span class=\"supfact\">v9</span> - cloud_pos;\n  if ((<span class=\"supfact\">v8</span> & Number) != Number || <span class=\"supfact\">v5</span> > Number) {\n    plot_byte(<span class=\"supfact\">v12</span>, <span class=\"supfact\">v9</span>, a2, <span class=\"supfact\">v6</span>,\n              v2);\n  } else {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>) {\n      if ((<span class=\"supfact\">v4</span> & Number) != Number) {\n        <span class=\"supfact\">v10</span> = <span class=\"supfact\">v6</span>;\n      } else {\n        if (((Number << (~(_BYTE)<span class=\"supfact\">v12</span> & Number)) &\n             *(unsigned __int8\n                   *)(((<span class=\"supfact\">v12</span> >> Number) & Number |\n                       (unsigned int)(unsigned __int8)(Number *\n                                                       ~<span class=\"supfact\">v5</span>)) +\n                      memory_region(Number L))) != Number)\n          v3 = Number;\n        else\n          v3 = <span class=\"supfact\">v7</span>;\n        <span class=\"supfact\">v10</span> = v3;\n      }\n      plot_pixel_8080(<span class=\"supfact\">v12</span>++, <span class=\"supfact\">v9</span>,\n                      <span class=\"supfact\">v10</span>);\n      <span class=\"supfact\">v4</span> >>= Number;\n    }\n  }\n}", "code_t": "void __cdecl polaris_videoram_w(offs_t offset, UINT8 data) {\n  int v2;\n  int v3;\n  UINT8 <span class=\"supfact\">dataa</span>;\n  UINT8 <span class=\"supfact\">cloud_y</span>;\n  int <span class=\"supfact\">fore_color</span>;\n  int <span class=\"supfact\">back_color</span>;\n  char <span class=\"supfact\">color_map</span>;\n  UINT8 <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">col</span>;\n  int <span class=\"supfact\">i</span>;\n  signed int <span class=\"supfact\">x</span>;\n  <span class=\"supfact\">dataa</span> = data;\n  *(_BYTE *)(offset + videoram) = data;\n  <span class=\"supfact\">y</span> = offset >> Number;\n  <span class=\"supfact\">x</span> = Number * (offset & Number);\n  <span class=\"supfact\">color_map</span> =\n      *(_BYTE *)(((Number * (<span class=\"supfact\">y</span> >> Number)) |\n                  (<span class=\"supfact\">x</span> >> Number)) +\n                 memory_region(Number L));\n  if ((<span class=\"supfact\">color_map</span> & Number) != Number)\n    v2 = Number;\n  else\n    v2 = Number;\n  <span class=\"supfact\">back_color</span> = v2;\n  <span class=\"supfact\">fore_color</span> =\n      ~*(_BYTE *)((offset & Number) + colorram) & Number;\n  <span class=\"supfact\">cloud_y</span> = <span class=\"supfact\">y</span> - cloud_pos;\n  if ((<span class=\"supfact\">color_map</span> & Number) != Number ||\n      <span class=\"supfact\">cloud_y</span> > Number) {\n    plot_byte(<span class=\"supfact\">x</span>, <span class=\"supfact\">y</span>, data,\n              <span class=\"supfact\">fore_color</span>, v2);\n  } else {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>) {\n      if ((<span class=\"supfact\">dataa</span> & Number) != Number) {\n        <span class=\"supfact\">col</span> = <span class=\"supfact\">fore_color</span>;\n      } else {\n        if (((Number << (~(_BYTE)<span class=\"supfact\">x</span> & Number)) &\n             *(unsigned __int8\n                   *)(((<span class=\"supfact\">x</span> >> Number) & Number |\n                       (unsigned int)(unsigned __int8)(Number *\n                                                       ~<span class=\"supfact\">cloud_y</span>)) +\n                      memory_region(Number L))) != Number)\n          v3 = Number;\n        else\n          v3 = <span class=\"supfact\">back_color</span>;\n        <span class=\"supfact\">col</span> = v3;\n      }\n      plot_pixel_8080(<span class=\"supfact\">x</span>++, <span class=\"supfact\">y</span>,\n                      <span class=\"supfact\">col</span>);\n      <span class=\"supfact\">dataa</span> >>= Number;\n    }\n  }\n}", "var": [{"name": "v12", "type": "int", "ref_name": "x", "ref_type": "signed int"}, {"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v10", "type": "int", "ref_name": "col", "ref_type": "int"}, {"name": "v9", "type": "char", "ref_name": "y", "ref_type": "UINT8"}, {"name": "v8", "type": "char", "ref_name": "color_map", "ref_type": "char"}, {"name": "v7", "type": "int", "ref_name": "back_color", "ref_type": "int"}, {"name": "v6", "type": "int", "ref_name": "fore_color", "ref_type": "int"}, {"name": "v5", "type": "char", "ref_name": "cloud_y", "ref_type": "UINT8"}, {"name": "v4", "type": "char", "ref_name": "dataa", "ref_type": "UINT8"}], "body_in_train": false}, {"repo_owner": "jkent", "repo_name": "tremulous-tremball", "path": "jkent/tremulous-tremball/09c4392fcc8e7e20941564fcf2b272c6379d7c10692448f0716b4034b2a07252", "path_in_repo": "jkent/tremulous-tremball//build/release-linux-x86_64/base/ui/ui_main.o", "objdump": "0000000000012586 <UI_GetIndexFromSelection>:\n   12586:\t89 7c 24 ec          \tmov    %edi,-0x14(%rsp)\n   1258a:\tc7 44 24 f8 00 00 00 \tmovl   $0x0,-0x8(%rsp)\n   12591:\t00 \n   12592:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n   12599:\t00 \n   1259a:\teb 44                \tjmp    125e0 <UI_GetIndexFromSelection+0x5a>\n   1259c:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 125a3 <UI_GetIndexFromSelection+0x1d>\n   125a3:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   125a7:\t48 63 d0             \tmovslq %eax,%rdx\n   125aa:\t48 89 d0             \tmov    %rdx,%rax\n   125ad:\t48 c1 e0 04          \tshl    $0x4,%rax\n   125b1:\t48 29 d0             \tsub    %rdx,%rax\n   125b4:\t48 c1 e0 03          \tshl    $0x3,%rax\n   125b8:\t48 01 c8             \tadd    %rcx,%rax\n   125bb:\t48 05 40 68 01 00    \tadd    $0x16840,%rax\n   125c1:\t8b 00                \tmov    (%rax),%eax\n   125c3:\t85 c0                \ttest   %eax,%eax\n   125c5:\t74 14                \tje     125db <UI_GetIndexFromSelection+0x55>\n   125c7:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   125cb:\t3b 44 24 ec          \tcmp    -0x14(%rsp),%eax\n   125cf:\t75 05                \tjne    125d6 <UI_GetIndexFromSelection+0x50>\n   125d1:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n   125d5:\tc3                   \tretq   \n   125d6:\t83 44 24 f8 01       \taddl   $0x1,-0x8(%rsp)\n   125db:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n   125e0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 125e7 <UI_GetIndexFromSelection+0x61>\n   125e7:\t8b 80 c8 67 01 00    \tmov    0x167c8(%rax),%eax\n   125ed:\t39 44 24 fc          \tcmp    %eax,-0x4(%rsp)\n   125f1:\t7c a9                \tjl     1259c <UI_GetIndexFromSelection+0x16>\n   125f3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   125f8:\tc3                   \tretq   \n   125f9:\t90                   \tnop", "code_s": "__int64 __fastcall UI_GetIndexFromSelection(int a1) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v2</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < *(int *)((char *)&dword_167C8 + (_QWORD)uiInfo);\n       ++<span class=\"supfact\">i</span>) {\n    if (LODWORD(uiInfo[Number * <span class=\"supfact\">i</span> + Number])) {\n      if (<span class=\"supfact\">i</span> == a1)\n        return <span class=\"supfact\">v2</span>;\n      ++<span class=\"supfact\">v2</span>;\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl UI_GetIndexFromSelection(int actual) {\n  int <span class=\"supfact\">c</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">c</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < SLODWORD(uiInfo[Number]);\n       ++<span class=\"supfact\">i</span>) {\n    if (LODWORD(uiInfo[Number * <span class=\"supfact\">i</span> + Number])) {\n      if (<span class=\"supfact\">i</span> == actual)\n        return <span class=\"supfact\">c</span>;\n      ++<span class=\"supfact\">c</span>;\n    }\n  }\n  return Number;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v2", "type": "int", "ref_name": "c", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "Skiars", "repo_name": "berry_mcu", "path": "Skiars/berry_mcu/4eeb521d582fd110c5f3e79ba3dc509ae422428651cf556bb459623f2b60b34f", "path_in_repo": "Skiars/berry_mcu/middleware/berry/tools/map_build/map_build", "objdump": "0000000000415a60 <_ZNSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEE15_M_insert_dummyEv>:\n  415a60:\t41 54                \tpush   %r12\n  415a62:\t55                   \tpush   %rbp\n  415a63:\t48 89 fd             \tmov    %rdi,%rbp\n  415a66:\t53                   \tpush   %rbx\n  415a67:\t48 83 ec 30          \tsub    $0x30,%rsp\n  415a6b:\t48 8b 7f 40          \tmov    0x40(%rdi),%rdi\n  415a6f:\tc7 04 24 0a 00 00 00 \tmovl   $0xa,(%rsp)\n  415a76:\t49 89 e4             \tmov    %rsp,%r12\n  415a79:\t48 c7 44 24 08 ff ff \tmovq   $0xffffffffffffffff,0x8(%rsp)\n  415a80:\tff ff \n  415a82:\t48 3b 7d 48          \tcmp    0x48(%rbp),%rdi\n  415a86:\t74 48                \tje     415ad0 <_ZNSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEE15_M_insert_dummyEv+0x70>\n  415a88:\t4c 89 e6             \tmov    %r12,%rsi\n  415a8b:\te8 90 bb ff ff       \tcallq  411620 <_ZNSt8__detail6_StateIcEC1EOS1_>\n  415a90:\t48 8b 45 40          \tmov    0x40(%rbp),%rax\n  415a94:\t48 8d 58 30          \tlea    0x30(%rax),%rbx\n  415a98:\t48 89 5d 40          \tmov    %rbx,0x40(%rbp)\n  415a9c:\t48 b8 ab aa aa aa aa \tmovabs $0xaaaaaaaaaaaaaaab,%rax\n  415aa3:\taa aa aa \n  415aa6:\t48 2b 5d 38          \tsub    0x38(%rbp),%rbx\n  415aaa:\t48 c1 fb 04          \tsar    $0x4,%rbx\n  415aae:\t48 0f af d8          \timul   %rax,%rbx\n  415ab2:\t48 81 fb a0 86 01 00 \tcmp    $0x186a0,%rbx\n  415ab9:\t77 32                \tja     415aed <_ZNSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEE15_M_insert_dummyEv+0x8d>\n  415abb:\t4c 89 e7             \tmov    %r12,%rdi\n  415abe:\te8 cd ba ff ff       \tcallq  411590 <_ZNSt8__detail6_StateIcED1Ev>\n  415ac3:\t48 83 c4 30          \tadd    $0x30,%rsp\n  415ac7:\t48 8d 43 ff          \tlea    -0x1(%rbx),%rax\n  415acb:\t5b                   \tpop    %rbx\n  415acc:\t5d                   \tpop    %rbp\n  415acd:\t41 5c                \tpop    %r12\n  415acf:\tc3                   \tretq   \n  415ad0:\t4c 8d 45 38          \tlea    0x38(%rbp),%r8\n  415ad4:\t48 89 fe             \tmov    %rdi,%rsi\n  415ad7:\t4c 89 e2             \tmov    %r12,%rdx\n  415ada:\t4c 89 c7             \tmov    %r8,%rdi\n  415add:\te8 3e fc ff ff       \tcallq  415720 <_ZNSt6vectorINSt8__detail6_StateIcEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>\n  415ae2:\t48 8b 5d 40          \tmov    0x40(%rbp),%rbx\n  415ae6:\teb b4                \tjmp    415a9c <_ZNSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEE15_M_insert_dummyEv+0x3c>\n  415ae8:\t48 89 c5             \tmov    %rax,%rbp\n  415aeb:\teb 0f                \tjmp    415afc <_ZNSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEE15_M_insert_dummyEv+0x9c>\n  415aed:\tbe 28 3b 42 00       \tmov    $0x423b28,%esi\n  415af2:\tbf 09 00 00 00       \tmov    $0x9,%edi\n  415af7:\te8 00 ed fe ff       \tcallq  4047fc <_ZSt19__throw_regex_errorNSt15regex_constants10error_typeEPKc>\n  415afc:\t4c 89 e7             \tmov    %r12,%rdi\n  415aff:\te8 8c ba ff ff       \tcallq  411590 <_ZNSt8__detail6_StateIcED1Ev>\n  415b04:\t48 89 ef             \tmov    %rbp,%rdi\n  415b07:\te8 04 ea fe ff       \tcallq  404510 <_Unwind_Resume@plt>\n  415b0c:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "unsigned __int64 __fastcall std __detail _NFA<std __cxx11 regex_traits<char>>\n_M_insert_dummy(_QWORD *a1) {\n  __m128i *v2;\n  __int64 v3;\n  unsigned __int64 v4;\n  __m128i <span class=\"supfact\">v6</span>[Number];\n  v2 = (__m128i *)a1[Number];\n  <span class=\"supfact\">v6</span>[Number].m128i_i32[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number].m128i_i64[Number] = Number;\n  if (v2 == (__m128i *)a1[Number]) {\n    std vector<std __detail _State<char>>\n        _M_realloc_insert<std __detail _State<char>>((__int64)(a1 + Number), v2,\n                                                     <span class=\"supfact\">v6</span>);\n    v3 = a1[Number];\n  } else {\n    std __detail _State<char> _State(v2, <span class=\"supfact\">v6</span>);\n    v3 = a1[Number] + Number L;\n    a1[Number] = v3;\n  }\n  v4 = Number * ((v3 - a1[Number]) >> Number);\n  if (v4 > Number)\n    std __throw_regex_error(Number, String String);\n  std __detail _State<char> ~_State((__int64)<span class=\"supfact\">v6</span>);\n  return v4 - Number;\n}", "code_t": "unsigned __int64 __fastcall std __detail _NFA<std __cxx11 regex_traits<char>>\n_M_insert_dummy(_QWORD *a1) {\n  __m128i *v2;\n  __int64 v3;\n  unsigned __int64 v4;\n  __m128i <span class=\"supfact\">v6</span>[Number];\n  v2 = (__m128i *)a1[Number];\n  <span class=\"supfact\">v6</span>[Number].m128i_i32[Number] = Number;\n  <span class=\"supfact\">v6</span>[Number].m128i_i64[Number] = Number;\n  if (v2 == (__m128i *)a1[Number]) {\n    std vector<std __detail _State<char>>\n        _M_realloc_insert<std __detail _State<char>>((__int64)(a1 + Number), v2,\n                                                     <span class=\"supfact\">v6</span>);\n    v3 = a1[Number];\n  } else {\n    std __detail _State<char> _State(v2, <span class=\"supfact\">v6</span>);\n    v3 = a1[Number] + Number L;\n    a1[Number] = v3;\n  }\n  v4 = Number * ((v3 - a1[Number]) >> Number);\n  if (v4 > Number)\n    std __throw_regex_error(Number, String String);\n  std __detail _State<char> ~_State((__int64)<span class=\"supfact\">v6</span>);\n  return v4 - Number;\n}", "var": [{"name": "v6", "type": "_QWORD[8]", "ref_name": "v6", "ref_type": "__m128i[4]"}], "body_in_train": false}, {"repo_owner": "bloodstalker", "repo_name": "blogstuff", "path": "bloodstalker/blogstuff/e5d1c8fad2951977dc94940e542db30173b87fe2732e6c1c20f8e810270889e7", "path_in_repo": "bloodstalker/blogstuff/src/cstruct2luatbale/lua/lua", "objdump": "000000000043173d <readdigits>:\n  43173d:\t55                   \tpush   %rbp\n  43173e:\t48 89 e5             \tmov    %rsp,%rbp\n  431741:\t48 83 ec 20          \tsub    $0x20,%rsp\n  431745:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  431749:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  43174c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  431753:\teb 04                \tjmp    431759 <readdigits+0x1c>\n  431755:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  431759:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  43175d:\t74 28                \tje     431787 <readdigits+0x4a>\n  43175f:\te8 1c 2e fd ff       \tcallq  404580 <__ctype_b_loc@plt>\n  431764:\t48 8b 10             \tmov    (%rax),%rdx\n  431767:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43176b:\t8b 40 08             \tmov    0x8(%rax),%eax\n  43176e:\t48 98                \tcltq   \n  431770:\t48 01 c0             \tadd    %rax,%rax\n  431773:\t48 01 d0             \tadd    %rdx,%rax\n  431776:\t0f b7 00             \tmovzwl (%rax),%eax\n  431779:\t0f b7 c0             \tmovzwl %ax,%eax\n  43177c:\t25 00 10 00 00       \tand    $0x1000,%eax\n  431781:\t85 c0                \ttest   %eax,%eax\n  431783:\t75 28                \tjne    4317ad <readdigits+0x70>\n  431785:\teb 36                \tjmp    4317bd <readdigits+0x80>\n  431787:\te8 f4 2d fd ff       \tcallq  404580 <__ctype_b_loc@plt>\n  43178c:\t48 8b 10             \tmov    (%rax),%rdx\n  43178f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  431793:\t8b 40 08             \tmov    0x8(%rax),%eax\n  431796:\t48 98                \tcltq   \n  431798:\t48 01 c0             \tadd    %rax,%rax\n  43179b:\t48 01 d0             \tadd    %rdx,%rax\n  43179e:\t0f b7 00             \tmovzwl (%rax),%eax\n  4317a1:\t0f b7 c0             \tmovzwl %ax,%eax\n  4317a4:\t25 00 08 00 00       \tand    $0x800,%eax\n  4317a9:\t85 c0                \ttest   %eax,%eax\n  4317ab:\t74 10                \tje     4317bd <readdigits+0x80>\n  4317ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4317b1:\t48 89 c7             \tmov    %rax,%rdi\n  4317b4:\te8 c7 fe ff ff       \tcallq  431680 <nextc>\n  4317b9:\t85 c0                \ttest   %eax,%eax\n  4317bb:\t75 98                \tjne    431755 <readdigits+0x18>\n  4317bd:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4317c0:\tc9                   \tleaveq \n  4317c1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall readdigits(__int64 a1, int a2) {\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    if (a2) {\n      if (((*__ctype_b_loc())[*(int *)(a1 + Number)] & Number) == Number)\n        return <span class=\"supfact\">i</span>;\n    } else if (((*__ctype_b_loc())[*(int *)(a1 + Number)] & Number) == Number) {\n      return <span class=\"supfact\">i</span>;\n    }\n    if (!(unsigned int)nextc(a1))\n      break;\n  }\n  return <span class=\"supfact\">i</span>;\n}", "code_t": "int __cdecl readdigits(RN *rn, int hex) {\n  int <span class=\"supfact\">count</span>;\n  for (<span class=\"supfact\">count</span> = Number;; ++<span class=\"supfact\">count</span>) {\n    if (hex) {\n      if (((*__ctype_b_loc())[rn->c] & Number) == Number)\n        return <span class=\"supfact\">count</span>;\n    } else if (((*__ctype_b_loc())[rn->c] & Number) == Number) {\n      return <span class=\"supfact\">count</span>;\n    }\n    if (!nextc(rn))\n      break;\n  }\n  return <span class=\"supfact\">count</span>;\n}", "var": [{"name": "i", "type": "int", "ref_name": "count", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "sookee", "repo_name": "oa-mod", "path": "sookee/oa-mod/69c0c4ec96f0aaf8cc7ede6ebe6046ae1341ab0af4c2814dfe7f227e89be1252", "path_in_repo": "sookee/oa-mod//ioq3/build/debug-linux-x86_64/ded/common.o", "objdump": "000000000000444f <Com_ReadFromPipe>:\n    444f:\t55                   \tpush   %rbp\n    4450:\t48 89 e5             \tmov    %rsp,%rbp\n    4453:\t48 83 ec 20          \tsub    $0x20,%rsp\n    4457:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 445d <Com_ReadFromPipe+0xe>\n    445d:\t85 c0                \ttest   %eax,%eax\n    445f:\t0f 84 71 01 00 00    \tje     45d6 <Com_ReadFromPipe+0x187>\n    4465:\te9 2c 01 00 00       \tjmpq   4596 <Com_ReadFromPipe+0x147>\n    446a:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    4471:\t00 \n    4472:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4478 <Com_ReadFromPipe+0x29>\n    4478:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    447b:\teb 52                \tjmp    44cf <Com_ReadFromPipe+0x80>\n    447d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4480:\t48 98                \tcltq   \n    4482:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n    4489:\t84 c0                \ttest   %al,%al\n    448b:\t75 0c                \tjne    4499 <Com_ReadFromPipe+0x4a>\n    448d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4490:\t48 98                \tcltq   \n    4492:\tc6 80 00 00 00 00 0a \tmovb   $0xa,0x0(%rax)\n    4499:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    449c:\t48 98                \tcltq   \n    449e:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n    44a5:\t3c 0a                \tcmp    $0xa,%al\n    44a7:\t74 10                \tje     44b9 <Com_ReadFromPipe+0x6a>\n    44a9:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    44ac:\t48 98                \tcltq   \n    44ae:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n    44b5:\t3c 0d                \tcmp    $0xd,%al\n    44b7:\t75 12                \tjne    44cb <Com_ReadFromPipe+0x7c>\n    44b9:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    44bc:\t83 c0 01             \tadd    $0x1,%eax\n    44bf:\t48 98                \tcltq   \n    44c1:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    44c7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    44cb:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n    44cf:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 44d5 <Com_ReadFromPipe+0x86>\n    44d5:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    44d8:\t01 d0                \tadd    %edx,%eax\n    44da:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n    44dd:\t7c 9e                \tjl     447d <Com_ReadFromPipe+0x2e>\n    44df:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 44e5 <Com_ReadFromPipe+0x96>\n    44e5:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    44e8:\t01 d0                \tadd    %edx,%eax\n    44ea:\t48 98                \tcltq   \n    44ec:\tc6 80 00 00 00 00 00 \tmovb   $0x0,0x0(%rax)\n    44f3:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 44f9 <Com_ReadFromPipe+0xaa>\n    44f9:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    44fc:\t01 d0                \tadd    %edx,%eax\n    44fe:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 4504 <Com_ReadFromPipe+0xb5>\n    4504:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    4509:\t74 65                \tje     4570 <Com_ReadFromPipe+0x121>\n    450b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    450f:\t0f b6 00             \tmovzbl (%rax),%eax\n    4512:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n    4515:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4519:\tc6 00 00             \tmovb   $0x0,(%rax)\n    451c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4521:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4526:\te8 00 00 00 00       \tcallq  452b <Com_ReadFromPipe+0xdc>\n    452b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    452f:\t0f b6 55 ef          \tmovzbl -0x11(%rbp),%edx\n    4533:\t88 10                \tmov    %dl,(%rax)\n    4535:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 453b <Com_ReadFromPipe+0xec>\n    453b:\t89 c2                \tmov    %eax,%edx\n    453d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4541:\t48 2d 00 00 00 00    \tsub    $0x0,%rax\n    4547:\t29 c2                \tsub    %eax,%edx\n    4549:\t89 d0                \tmov    %edx,%eax\n    454b:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 4551 <Com_ReadFromPipe+0x102>\n    4551:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4557 <Com_ReadFromPipe+0x108>\n    4557:\t83 c0 01             \tadd    $0x1,%eax\n    455a:\t48 63 d0             \tmovslq %eax,%rdx\n    455d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4561:\t48 89 c6             \tmov    %rax,%rsi\n    4564:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4569:\te8 00 00 00 00       \tcallq  456e <Com_ReadFromPipe+0x11f>\n    456e:\teb 26                \tjmp    4596 <Com_ReadFromPipe+0x147>\n    4570:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4576 <Com_ReadFromPipe+0x127>\n    4576:\t3d fe 03 00 00       \tcmp    $0x3fe,%eax\n    457b:\t76 19                \tjbe    4596 <Com_ReadFromPipe+0x147>\n    457d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4582:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4587:\te8 00 00 00 00       \tcallq  458c <Com_ReadFromPipe+0x13d>\n    458c:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 4596 <Com_ReadFromPipe+0x147>\n    4593:\t00 00 00 \n    4596:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 459c <Com_ReadFromPipe+0x14d>\n    459c:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 45a2 <Com_ReadFromPipe+0x153>\n    45a2:\tb9 ff 03 00 00       \tmov    $0x3ff,%ecx\n    45a7:\t29 d1                \tsub    %edx,%ecx\n    45a9:\t89 ca                \tmov    %ecx,%edx\n    45ab:\t89 d6                \tmov    %edx,%esi\n    45ad:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 45b3 <Com_ReadFromPipe+0x164>\n    45b3:\t48 63 d2             \tmovslq %edx,%rdx\n    45b6:\t48 8d 8a 00 00 00 00 \tlea    0x0(%rdx),%rcx\n    45bd:\t89 c2                \tmov    %eax,%edx\n    45bf:\t48 89 cf             \tmov    %rcx,%rdi\n    45c2:\te8 00 00 00 00       \tcallq  45c7 <Com_ReadFromPipe+0x178>\n    45c7:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    45ca:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n    45ce:\t0f 8f 96 fe ff ff    \tjg     446a <Com_ReadFromPipe+0x1b>\n    45d4:\teb 01                \tjmp    45d7 <Com_ReadFromPipe+0x188>\n    45d6:\t90                   \tnop\n    45d7:\tc9                   \tleaveq \n    45d8:\tc3                   \tretq   ", "code_s": "__int64 Com_ReadFromPipe() {\n  __int64 result;\n  char <span class=\"supfact\">v1</span>;\n  int <span class=\"supfact\">i</span>;\n  char *<span class=\"supfact\">src</span>;\n  result = (unsigned int)pipefile;\n  if (pipefile) {\n    while (Number) {\n      result = FS_Read(&buf_7395[accu_7396], (unsigned int)(Number - accu_7396),\n                       (unsigned int)pipefile);\n      if ((int)result <= Number)\n        break;\n      <span class=\"supfact\">src</span> = Number L;\n      for (<span class=\"supfact\">i</span> = accu_7396;\n           <span class=\"supfact\">i</span> < accu_7396 + (int)result; ++<span class=\"supfact\">i</span>) {\n        if (!buf_7395[<span class=\"supfact\">i</span>])\n          buf_7395[<span class=\"supfact\">i</span>] = Number;\n        if (buf_7395[<span class=\"supfact\">i</span>] == Number ||\n            buf_7395[<span class=\"supfact\">i</span>] == Number)\n          <span class=\"supfact\">src</span> = &buf_7395[<span class=\"supfact\">i</span> + Number];\n      }\n      buf_7395[accu_7396 + (int)result] = Number;\n      accu_7396 += result;\n      if (<span class=\"supfact\">src</span>) {\n        <span class=\"supfact\">v1</span> = *<span class=\"supfact\">src</span>;\n        *<span class=\"supfact\">src</span> = Number;\n        Cbuf_ExecuteText(Number L, buf_7395);\n        *<span class=\"supfact\">src</span> = <span class=\"supfact\">v1</span>;\n        accu_7396 -= <span class=\"supfact\">src</span> - buf_7395;\n        memmove(buf_7395, <span class=\"supfact\">src</span>, accu_7396 + Number);\n      } else if ((unsigned int)accu_7396 > Number) {\n        Cbuf_ExecuteText(Number L, buf_7395);\n        accu_7396 = Number;\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl Com_ReadFromPipe() {\n  char <span class=\"supfact\">tmp</span>;\n  int read;\n  int <span class=\"supfact\">i</span>;\n  char *<span class=\"supfact\">brk</span>;\n  if (pipefile) {\n    while (Number) {\n      read = FS_Read(&buf_7395[accu_7396], (unsigned int)(Number - accu_7396),\n                     (unsigned int)pipefile);\n      if (read <= Number)\n        break;\n      <span class=\"supfact\">brk</span> = Number L;\n      for (<span class=\"supfact\">i</span> = accu_7396; <span class=\"supfact\">i</span> < accu_7396 + read;\n           ++<span class=\"supfact\">i</span>) {\n        if (!buf_7395[<span class=\"supfact\">i</span>])\n          buf_7395[<span class=\"supfact\">i</span>] = Number;\n        if (buf_7395[<span class=\"supfact\">i</span>] == Number ||\n            buf_7395[<span class=\"supfact\">i</span>] == Number)\n          <span class=\"supfact\">brk</span> = &buf_7395[<span class=\"supfact\">i</span> + Number];\n      }\n      buf_7395[accu_7396 + read] = Number;\n      accu_7396 += read;\n      if (<span class=\"supfact\">brk</span>) {\n        <span class=\"supfact\">tmp</span> = *<span class=\"supfact\">brk</span>;\n        *<span class=\"supfact\">brk</span> = Number;\n        Cbuf_ExecuteText(Number L, buf_7395);\n        *<span class=\"supfact\">brk</span> = <span class=\"supfact\">tmp</span>;\n        accu_7396 -= <span class=\"supfact\">brk</span> - buf_7395;\n        memmove(buf_7395, <span class=\"supfact\">brk</span>, accu_7396 + Number);\n      } else if ((unsigned int)accu_7396 > Number) {\n        Cbuf_ExecuteText(Number L, buf_7395);\n        accu_7396 = Number;\n      }\n    }\n  }\n}", "var": [{"name": "src", "type": "char *", "ref_name": "brk", "ref_type": "char *"}, {"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v1", "type": "char", "ref_name": "tmp", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "mrliemitvn", "repo_name": "PDFFramework", "path": "mrliemitvn/PDFFramework/6cdd6d8b900a1f721395b7ab9d75d663a5e963e2f41dea3804dc473128a27ed5", "path_in_repo": "mrliemitvn/PDFFramework/mupdf/build/debug/fitz/draw-device.o", "objdump": "00000000000002e5 <fz_knockout_begin>:\n     2e5:\t55                   \tpush   %rbp\n     2e6:\t48 89 e5             \tmov    %rsp,%rbp\n     2e9:\t48 83 ec 60          \tsub    $0x60,%rsp\n     2ed:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n     2f1:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     2f5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     2f9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     2fd:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     301:\t48 8b 48 28          \tmov    0x28(%rax),%rcx\n     305:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     309:\t8b 40 14             \tmov    0x14(%rax),%eax\n     30c:\t48 63 d0             \tmovslq %eax,%rdx\n     30f:\t48 89 d0             \tmov    %rdx,%rax\n     312:\t48 01 c0             \tadd    %rax,%rax\n     315:\t48 01 d0             \tadd    %rdx,%rax\n     318:\t48 c1 e0 02          \tshl    $0x2,%rax\n     31c:\t48 01 d0             \tadd    %rdx,%rax\n     31f:\t48 c1 e0 03          \tshl    $0x3,%rax\n     323:\t48 01 c8             \tadd    %rcx,%rax\n     326:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     32a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     32e:\t8b 40 28             \tmov    0x28(%rax),%eax\n     331:\t83 e0 10             \tand    $0x10,%eax\n     334:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n     337:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     33b:\t8b 40 28             \tmov    0x28(%rax),%eax\n     33e:\t83 e0 20             \tand    $0x20,%eax\n     341:\t85 c0                \ttest   %eax,%eax\n     343:\t75 09                \tjne    34e <fz_knockout_begin+0x69>\n     345:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     349:\te9 cc 01 00 00       \tjmpq   51a <fz_knockout_begin+0x235>\n     34e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     352:\t48 89 c7             \tmov    %rax,%rdi\n     355:\te8 29 fe ff ff       \tcallq  183 <push_stack>\n     35a:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     35e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     362:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n     366:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     36a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     36e:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n     372:\t48 89 ce             \tmov    %rcx,%rsi\n     375:\t48 89 c7             \tmov    %rax,%rdi\n     378:\te8 00 00 00 00       \tcallq  37d <fz_knockout_begin+0x98>\n     37d:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     381:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     385:\t48 89 d6             \tmov    %rdx,%rsi\n     388:\t48 89 c7             \tmov    %rax,%rdi\n     38b:\te8 00 00 00 00       \tcallq  390 <fz_knockout_begin+0xab>\n     390:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     394:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     398:\t48 8b 48 30          \tmov    0x30(%rax),%rcx\n     39c:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     3a0:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     3a4:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n     3a8:\t48 89 ce             \tmov    %rcx,%rsi\n     3ab:\t48 89 c7             \tmov    %rax,%rdi\n     3ae:\te8 00 00 00 00       \tcallq  3b3 <fz_knockout_begin+0xce>\n     3b3:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     3b7:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n     3bb:\t74 18                \tje     3d5 <fz_knockout_begin+0xf0>\n     3bd:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     3c1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     3c5:\t48 89 d6             \tmov    %rdx,%rsi\n     3c8:\t48 89 c7             \tmov    %rax,%rdi\n     3cb:\te8 00 00 00 00       \tcallq  3d0 <fz_knockout_begin+0xeb>\n     3d0:\te9 97 00 00 00       \tjmpq   46c <fz_knockout_begin+0x187>\n     3d5:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     3d9:\t8b 40 14             \tmov    0x14(%rax),%eax\n     3dc:\t83 e8 01             \tsub    $0x1,%eax\n     3df:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     3e2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     3e6:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     3ea:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     3ee:\teb 3f                \tjmp    42f <fz_knockout_begin+0x14a>\n     3f0:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     3f4:\t48 8b 48 28          \tmov    0x28(%rax),%rcx\n     3f8:\t83 6d f4 01          \tsubl   $0x1,-0xc(%rbp)\n     3fc:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     3ff:\t48 63 d0             \tmovslq %eax,%rdx\n     402:\t48 89 d0             \tmov    %rdx,%rax\n     405:\t48 01 c0             \tadd    %rax,%rax\n     408:\t48 01 d0             \tadd    %rdx,%rax\n     40b:\t48 c1 e0 02          \tshl    $0x2,%rax\n     40f:\t48 01 d0             \tadd    %rdx,%rax\n     412:\t48 c1 e0 03          \tshl    $0x3,%rax\n     416:\t48 01 c8             \tadd    %rcx,%rax\n     419:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     41d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     421:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     425:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     429:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n     42d:\t75 08                \tjne    437 <fz_knockout_begin+0x152>\n     42f:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     433:\t7f bb                \tjg     3f0 <fz_knockout_begin+0x10b>\n     435:\teb 01                \tjmp    438 <fz_knockout_begin+0x153>\n     437:\t90                   \tnop\n     438:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     43d:\t74 1a                \tje     459 <fz_knockout_begin+0x174>\n     43f:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n     443:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     447:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n     44b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     44f:\t48 89 c7             \tmov    %rax,%rdi\n     452:\te8 00 00 00 00       \tcallq  457 <fz_knockout_begin+0x172>\n     457:\teb 13                \tjmp    46c <fz_knockout_begin+0x187>\n     459:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     45d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     461:\t48 89 d6             \tmov    %rdx,%rsi\n     464:\t48 89 c7             \tmov    %rax,%rdi\n     467:\te8 00 00 00 00       \tcallq  46c <fz_knockout_begin+0x187>\n     46c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     470:\t8b 40 28             \tmov    0x28(%rax),%eax\n     473:\t83 e0 0f             \tand    $0xf,%eax\n     476:\t85 c0                \ttest   %eax,%eax\n     478:\t75 14                \tjne    48e <fz_knockout_begin+0x1a9>\n     47a:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n     47e:\t74 0e                \tje     48e <fz_knockout_begin+0x1a9>\n     480:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     484:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     488:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     48c:\teb 34                \tjmp    4c2 <fz_knockout_begin+0x1dd>\n     48e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     492:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     496:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n     49a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     49f:\t48 89 c7             \tmov    %rax,%rdi\n     4a2:\te8 00 00 00 00       \tcallq  4a7 <fz_knockout_begin+0x1c2>\n     4a7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     4ab:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     4af:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     4b3:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     4b7:\t48 89 d6             \tmov    %rdx,%rsi\n     4ba:\t48 89 c7             \tmov    %rax,%rdi\n     4bd:\te8 00 00 00 00       \tcallq  4c2 <fz_knockout_begin+0x1dd>\n     4c2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4c6:\t48 8d 48 68          \tlea    0x68(%rax),%rcx\n     4ca:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     4ce:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     4d2:\t48 89 01             \tmov    %rax,(%rcx)\n     4d5:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n     4d9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4dd:\t48 8d 50 68          \tlea    0x68(%rax),%rdx\n     4e1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     4e5:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n     4e9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4ed:\t48 8d 50 68          \tlea    0x68(%rax),%rdx\n     4f1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     4f5:\t48 89 42 20          \tmov    %rax,0x20(%rdx)\n     4f9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4fd:\t48 83 c0 68          \tadd    $0x68,%rax\n     501:\t8b 50 28             \tmov    0x28(%rax),%edx\n     504:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     508:\t48 83 c0 68          \tadd    $0x68,%rax\n     50c:\t83 e2 f0             \tand    $0xfffffff0,%edx\n     50f:\t89 50 28             \tmov    %edx,0x28(%rax)\n     512:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     516:\t48 83 c0 68          \tadd    $0x68,%rax\n     51a:\tc9                   \tleaveq \n     51b:\tc3                   \tretq   ", "code_s": "char *__fastcall fz_knockout_begin(__int64 a1) {\n  __int64 v2;\n  char *v3;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  char *<span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v9</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v8</span> =\n      (char *)(*(_QWORD *)(a1 + Number) + Number L * *(int *)(a1 + Number));\n  <span class=\"supfact\">v7</span> = *((_DWORD *)<span class=\"supfact\">v8</span> + Number) & Number;\n  if ((*((_DWORD *)<span class=\"supfact\">v8</span> + Number) & Number) == Number)\n    return <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = push_stack(a1);\n  fz_pixmap_bbox(*(_QWORD *)(a1 + Number),\n                 *((_QWORD *)<span class=\"supfact\">v8</span> + Number), <span class=\"supfact\">v5</span>);\n  fz_intersect_irect(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v8</span>);\n  <span class=\"supfact\">v6</span> = fz_new_pixmap_with_bbox(\n      *(_QWORD *)(a1 + Number),\n      *(_QWORD *)(*((_QWORD *)<span class=\"supfact\">v8</span> + Number) + Number L),\n      <span class=\"supfact\">v5</span>);\n  if (<span class=\"supfact\">v7</span>)\n    goto LABEL_9;\n  <span class=\"supfact\">v11</span> = *(_DWORD *)(a1 + Number) - Number;\n  <span class=\"supfact\">v10</span> = *((_QWORD *)<span class=\"supfact\">v8</span> + Number);\n  do {\n    if (<span class=\"supfact\">v11</span> <= Number)\n      break;\n    v2 = *(_QWORD *)(a1 + Number);\n    <span class=\"supfact\">v10</span> =\n        *(_QWORD *)(v2 + Number L * --<span class=\"supfact\">v11</span> + Number);\n  } while (<span class=\"supfact\">v10</span> == *((_QWORD *)<span class=\"supfact\">v8</span> + Number));\n  if (!<span class=\"supfact\">v10</span>)\n  LABEL_9:\n    fz_clear_pixmap(<span class=\"supfact\">v9</span>, <span class=\"supfact\">v6</span>);\n  else\n    fz_copy_pixmap_rect(<span class=\"supfact\">v9</span>, <span class=\"supfact\">v6</span>,\n                        <span class=\"supfact\">v10</span>, <span class=\"supfact\">v5</span>);\n  if ((*((_DWORD *)<span class=\"supfact\">v8</span> + Number) & Number) != Number ||\n      !<span class=\"supfact\">v7</span>) {\n    <span class=\"supfact\">v12</span> = fz_new_pixmap_with_bbox(*(_QWORD *)(a1 + Number),\n                                                  Number L, <span class=\"supfact\">v5</span>);\n    fz_clear_pixmap(*(_QWORD *)(a1 + Number), <span class=\"supfact\">v12</span>);\n  } else {\n    <span class=\"supfact\">v12</span> = *((_QWORD *)<span class=\"supfact\">v8</span> + Number);\n  }\n  v3 = <span class=\"supfact\">v8</span> + Number;\n  v4 = <span class=\"supfact\">v5</span>[Number];\n  *((_QWORD *)<span class=\"supfact\">v8</span> + Number) = <span class=\"supfact\">v5</span>[Number];\n  *((_QWORD *)v3 + Number) = v4;\n  *((_QWORD *)<span class=\"supfact\">v8</span> + Number) = <span class=\"supfact\">v6</span>;\n  *((_QWORD *)<span class=\"supfact\">v8</span> + Number) = <span class=\"supfact\">v12</span>;\n  *((_DWORD *)<span class=\"supfact\">v8</span> + Number) &= Number;\n  return <span class=\"supfact\">v8</span> + Number;\n}", "code_t": "fz_draw_state *__cdecl fz_knockout_begin(fz_draw_device *dev) {\n  fz_draw_state *v2;\n  fz_draw_state *v3;\n  __int64 v4;\n  fz_irect <span class=\"supfact\">bbox</span>;\n  fz_pixmap *<span class=\"supfact\">dest</span>;\n  int <span class=\"supfact\">isolated</span>;\n  fz_draw_state *<span class=\"supfact\">state</span>;\n  fz_context *<span class=\"supfact\">ctx</span>;\n  fz_pixmap *<span class=\"supfact\">prev</span>;\n  int <span class=\"supfact\">i</span>;\n  fz_pixmap *<span class=\"supfact\">shape</span>;\n  <span class=\"supfact\">ctx</span> = dev-><span class=\"supfact\">ctx</span>;\n  <span class=\"supfact\">state</span> = &dev->stack[dev->top];\n  <span class=\"supfact\">isolated</span> = <span class=\"supfact\">state</span>->blendmode & Number;\n  if ((<span class=\"supfact\">state</span>->blendmode & Number) == Number)\n    return <span class=\"supfact\">state</span>;\n  <span class=\"supfact\">state</span> = push_stack(dev);\n  fz_pixmap_bbox(dev-><span class=\"supfact\">ctx</span>,\n                 <span class=\"supfact\">state</span>-><span class=\"supfact\">dest</span>,\n                 &<span class=\"supfact\">bbox</span>);\n  fz_intersect_irect(&<span class=\"supfact\">bbox</span>, <span class=\"supfact\">state</span>);\n  <span class=\"supfact\">dest</span> = (fz_pixmap *)fz_new_pixmap_with_bbox(\n      dev-><span class=\"supfact\">ctx</span>,\n      <span class=\"supfact\">state</span>-><span class=\"supfact\">dest</span>->colorspace,\n      &<span class=\"supfact\">bbox</span>);\n  if (<span class=\"supfact\">isolated</span>)\n    goto LABEL_9;\n  <span class=\"supfact\">i</span> = dev->top - Number;\n  <span class=\"supfact\">prev</span> = <span class=\"supfact\">state</span>-><span class=\"supfact\">dest</span>;\n  do {\n    if (<span class=\"supfact\">i</span> <= Number)\n      break;\n    v2 = dev->stack;\n    <span class=\"supfact\">prev</span> = v2[--<span class=\"supfact\">i</span>].<span class=\"supfact\">dest</span>;\n  } while (<span class=\"supfact\">prev</span> == <span class=\"supfact\">state</span>-><span class=\"supfact\">dest</span>);\n  if (!<span class=\"supfact\">prev</span>)\n  LABEL_9:\n    fz_clear_pixmap(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">dest</span>);\n  else\n    fz_copy_pixmap_rect(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">dest</span>,\n                        <span class=\"supfact\">prev</span>, &<span class=\"supfact\">bbox</span>);\n  if ((<span class=\"supfact\">state</span>->blendmode & Number) != Number ||\n      !<span class=\"supfact\">isolated</span>) {\n    <span class=\"supfact\">shape</span> = (fz_pixmap *)fz_new_pixmap_with_bbox(\n        dev-><span class=\"supfact\">ctx</span>, Number L, &<span class=\"supfact\">bbox</span>);\n    fz_clear_pixmap(dev-><span class=\"supfact\">ctx</span>, <span class=\"supfact\">shape</span>);\n  } else {\n    <span class=\"supfact\">shape</span> = <span class=\"supfact\">state</span>-><span class=\"supfact\">shape</span>;\n  }\n  v3 = <span class=\"supfact\">state</span> + Number;\n  v4 = *(_QWORD *)&<span class=\"supfact\">bbox</span>.x1;\n  *(_QWORD *)&<span class=\"supfact\">state</span>[Number].scissor.x0 =\n      *(_QWORD *)&<span class=\"supfact\">bbox</span>.x0;\n  *(_QWORD *)&v3->scissor.x1 = v4;\n  <span class=\"supfact\">state</span>[Number].<span class=\"supfact\">dest</span> = <span class=\"supfact\">dest</span>;\n  <span class=\"supfact\">state</span>[Number].<span class=\"supfact\">shape</span> = <span class=\"supfact\">shape</span>;\n  <span class=\"supfact\">state</span>[Number].blendmode &= Number;\n  return <span class=\"supfact\">state</span> + Number;\n}", "var": [{"name": "v12", "type": "fz_pixmap *", "ref_name": "shape", "ref_type": "fz_pixmap *"}, {"name": "v11", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v10", "type": "fz_error_context *", "ref_name": "prev", "ref_type": "fz_pixmap *"}, {"name": "v9", "type": "int", "ref_name": "ctx", "ref_type": "fz_context *"}, {"name": "v8", "type": "fz_pixmap *", "ref_name": "state", "ref_type": "fz_draw_state *"}, {"name": "v7", "type": "int", "ref_name": "isolated", "ref_type": "int"}, {"name": "v6", "type": "fz_error_context *", "ref_name": "dest", "ref_type": "fz_pixmap *"}, {"name": "v5", "type": "int", "ref_name": "bbox", "ref_type": "struct fz_irect { int x0; int y0; int x1; int y1; }"}], "body_in_train": false}, {"repo_owner": "ynakahara", "repo_name": "gar2", "path": "ynakahara/gar2/99a0ac25b6fe497940cf4074df1b081d6662bd356ad08c5b07ab3ac262968f86", "path_in_repo": "ynakahara/gar2//gfilecrt.o", "objdump": "000000000000023e <gfile_file_on_open>:\n 23e:\t55                   \tpush   %rbp\n 23f:\t48 89 e5             \tmov    %rsp,%rbp\n 242:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n 249:\t48 89 bd 28 ff ff ff \tmov    %rdi,-0xd8(%rbp)\n 250:\t48 89 b5 20 ff ff ff \tmov    %rsi,-0xe0(%rbp)\n 257:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 25e:\t00 \n 25f:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n 266:\t48 89 c7             \tmov    %rax,%rdi\n 269:\te8 00 00 00 00       \tcallq  26e <gfile_file_on_open+0x30>\n 26e:\t85 c0                \ttest   %eax,%eax\n 270:\t74 20                \tje     292 <gfile_file_on_open+0x54>\n 272:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 276:\t48 89 c7             \tmov    %rax,%rdi\n 279:\te8 82 ff ff ff       \tcallq  200 <gfile_file_on_close>\n 27e:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n 285:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 28a:\t48 89 c7             \tmov    %rax,%rdi\n 28d:\te8 00 00 00 00       \tcallq  292 <gfile_file_on_open+0x54>\n 292:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 299:\t48 89 c7             \tmov    %rax,%rdi\n 29c:\te8 00 00 00 00       \tcallq  2a1 <gfile_file_on_open+0x63>\n 2a1:\t48 8d 50 11          \tlea    0x11(%rax),%rdx\n 2a5:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n 2ac:\t48 89 c6             \tmov    %rax,%rsi\n 2af:\t48 89 d7             \tmov    %rdx,%rdi\n 2b2:\te8 00 00 00 00       \tcallq  2b7 <gfile_file_on_open+0x79>\n 2b7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 2bb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2bf:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n 2c6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2ca:\t48 c7 40 08 ff ff ff \tmovq   $0xffffffffffffffff,0x8(%rax)\n 2d1:\tff \n 2d2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2d6:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n 2da:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 2e1:\t48 89 c6             \tmov    %rax,%rsi\n 2e4:\t48 89 d7             \tmov    %rdx,%rdi\n 2e7:\te8 00 00 00 00       \tcallq  2ec <gfile_file_on_open+0xae>\n 2ec:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n 2f3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2f8:\t48 89 c7             \tmov    %rax,%rdi\n 2fb:\te8 00 00 00 00       \tcallq  300 <gfile_file_on_open+0xc2>\n 300:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 304:\t48 89 02             \tmov    %rax,(%rdx)\n 307:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 30b:\t48 8b 00             \tmov    (%rax),%rax\n 30e:\t48 85 c0             \ttest   %rax,%rax\n 311:\t75 19                \tjne    32c <gfile_file_on_open+0xee>\n 313:\t48 8b 95 28 ff ff ff \tmov    -0xd8(%rbp),%rdx\n 31a:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n 321:\t48 89 d6             \tmov    %rdx,%rsi\n 324:\t48 89 c7             \tmov    %rax,%rdi\n 327:\te8 6d fd ff ff       \tcallq  99 <_gar_perror>\n 32c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 330:\t48 8b 00             \tmov    (%rax),%rax\n 333:\tba 02 00 00 00       \tmov    $0x2,%edx\n 338:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 33d:\t48 89 c7             \tmov    %rax,%rdi\n 340:\te8 00 00 00 00       \tcallq  345 <gfile_file_on_open+0x107>\n 345:\t85 c0                \ttest   %eax,%eax\n 347:\t75 42                \tjne    38b <gfile_file_on_open+0x14d>\n 349:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 34d:\t48 8b 00             \tmov    (%rax),%rax\n 350:\t48 89 c7             \tmov    %rax,%rdi\n 353:\te8 00 00 00 00       \tcallq  358 <gfile_file_on_open+0x11a>\n 358:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 35c:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n 360:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 364:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 368:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n 36c:\t74 1d                \tje     38b <gfile_file_on_open+0x14d>\n 36e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 372:\t48 8b 00             \tmov    (%rax),%rax\n 375:\tba 00 00 00 00       \tmov    $0x0,%edx\n 37a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 37f:\t48 89 c7             \tmov    %rax,%rdi\n 382:\te8 00 00 00 00       \tcallq  387 <gfile_file_on_open+0x149>\n 387:\t85 c0                \ttest   %eax,%eax\n 389:\t74 19                \tje     3a4 <gfile_file_on_open+0x166>\n 38b:\t48 8b 95 28 ff ff ff \tmov    -0xd8(%rbp),%rdx\n 392:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n 399:\t48 89 d6             \tmov    %rdx,%rsi\n 39c:\t48 89 c7             \tmov    %rax,%rdi\n 39f:\te8 f5 fc ff ff       \tcallq  99 <_gar_perror>\n 3a4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3a8:\tc9                   \tleaveq \n 3a9:\tc3                   \tretq   ", "code_s": "FILE **__fastcall gfile_file_on_open(const char *a1, struct __jmp_buf_tag *a2) {\n  size_t v2;\n  FILE *v3;\n  FILE *v4;\n  jmp_buf <span class=\"supfact\">env</span>;\n  FILE **<span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = Number L;\n  if (setjmp(<span class=\"supfact\">env</span>)) {\n    gfile_file_on_close(<span class=\"supfact\">v7</span>);\n    longjmp(a2, Number);\n  }\n  v2 = strlen(a1);\n  <span class=\"supfact\">v7</span> = (FILE **)gar_malloc(v2 + Number, <span class=\"supfact\">env</span>);\n  *<span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v7</span>[Number] = (FILE *)Number;\n  strcpy((char *)<span class=\"supfact\">v7</span> + Number, a1);\n  v3 = fopen(a1, String);\n  *<span class=\"supfact\">v7</span> = v3;\n  if (!*<span class=\"supfact\">v7</span>)\n    gar_perror((__int64)<span class=\"supfact\">env</span>, (__int64)a1);\n  if (fseek(*<span class=\"supfact\">v7</span>, Number L, Number) ||\n      (v4 = (FILE *)ftell(*<span class=\"supfact\">v7</span>), <span class=\"supfact\">v7</span>[Number] = v4,\n       <span class=\"supfact\">v7</span>[Number] == (FILE *)Number) ||\n      fseek(*<span class=\"supfact\">v7</span>, Number L, Number))\n    gar_perror((__int64)<span class=\"supfact\">env</span>, (__int64)a1);\n  return <span class=\"supfact\">v7</span>;\n}", "code_t": "gfile_file_ud_t *__cdecl gfile_file_on_open(const char *fname,\n                                            __jmp_buf_tag *_env) {\n  size_t v2;\n  FILE *v3;\n  __int64 v4;\n  jmp_buf <span class=\"supfact\">env</span>;\n  gfile_file_ud_t *<span class=\"supfact\">fud</span>;\n  <span class=\"supfact\">fud</span> = Number L;\n  if (setjmp(<span class=\"supfact\">env</span>)) {\n    gfile_file_on_close(<span class=\"supfact\">fud</span>);\n    longjmp(_env, Number);\n  }\n  v2 = strlen(fname);\n  <span class=\"supfact\">fud</span> =\n      (gfile_file_ud_t *)gar_malloc(v2 + Number, <span class=\"supfact\">env</span>);\n  <span class=\"supfact\">fud</span>->fp = Number L;\n  <span class=\"supfact\">fud</span>->fsize = Number;\n  strcpy(<span class=\"supfact\">fud</span>->fname, fname);\n  v3 = fopen(fname, String);\n  <span class=\"supfact\">fud</span>->fp = v3;\n  if (!<span class=\"supfact\">fud</span>->fp)\n    gar_perror(<span class=\"supfact\">env</span>, fname);\n  if (fseek(<span class=\"supfact\">fud</span>->fp, Number L, Number) ||\n      (v4 = ftell(<span class=\"supfact\">fud</span>->fp), <span class=\"supfact\">fud</span>->fsize = v4,\n       <span class=\"supfact\">fud</span>->fsize == Number) ||\n      fseek(<span class=\"supfact\">fud</span>->fp, Number L, Number))\n    gar_perror(<span class=\"supfact\">env</span>, fname);\n  return <span class=\"supfact\">fud</span>;\n}", "var": [{"name": "v7", "type": "FILE *", "ref_name": "fud", "ref_type": "__unk__"}, {"name": "env", "type": "__jmp_buf_tag[1]", "ref_name": "env", "ref_type": "__jmp_buf_tag[1]"}], "body_in_train": false}, {"repo_owner": "cdown", "repo_name": "linux-mmots", "path": "cdown/linux-mmots/3f32bd245ff677e57ea0e77f348b24bf501ed60952a25805a9ea411a0b50ac20", "path_in_repo": "cdown/linux-mmots/tools/testing/selftests/clone3/clone3", "objdump": "00000000004018c7 <test_clone3_supported>:\n  4018c7:\t55                   \tpush   %rbp\n  4018c8:\t48 89 e5             \tmov    %rsp,%rbp\n  4018cb:\t48 83 ec 60          \tsub    $0x60,%rsp\n  4018cf:\t48 c7 45 a0 00 00 00 \tmovq   $0x0,-0x60(%rbp)\n  4018d6:\t00 \n  4018d7:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n  4018de:\t00 \n  4018df:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n  4018e6:\t00 \n  4018e7:\t48 c7 45 b8 00 00 00 \tmovq   $0x0,-0x48(%rbp)\n  4018ee:\t00 \n  4018ef:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n  4018f6:\t00 \n  4018f7:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n  4018fe:\t00 \n  4018ff:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  401906:\t00 \n  401907:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  40190e:\t00 \n  40190f:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  401916:\t00 \n  401917:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  40191e:\t00 \n  40191f:\t48 c7 45 c0 ff ff ff \tmovq   $0xffffffffffffffff,-0x40(%rbp)\n  401926:\tff \n  401927:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  40192b:\tbe 50 00 00 00       \tmov    $0x50,%esi\n  401930:\t48 89 c7             \tmov    %rax,%rdi\n  401933:\te8 45 ff ff ff       \tcallq  40187d <sys_clone3>\n  401938:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40193b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40193f:\t75 0a                \tjne    40194b <test_clone3_supported+0x84>\n  401941:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401946:\te8 b5 f7 ff ff       \tcallq  401100 <exit@plt>\n  40194b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40194f:\t7e 19                \tjle    40196a <test_clone3_supported+0xa3>\n  401951:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401956:\te8 c5 f7 ff ff       \tcallq  401120 <wait@plt>\n  40195b:\tbf d8 20 40 00       \tmov    $0x4020d8,%edi\n  401960:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401965:\te8 4f fd ff ff       \tcallq  4016b9 <ksft_exit_fail_msg>\n  40196a:\te8 d1 f6 ff ff       \tcallq  401040 <__errno_location@plt>\n  40196f:\t8b 00                \tmov    (%rax),%eax\n  401971:\t83 f8 26             \tcmp    $0x26,%eax\n  401974:\t75 0f                \tjne    401985 <test_clone3_supported+0xbe>\n  401976:\tbf 18 21 40 00       \tmov    $0x402118,%edi\n  40197b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401980:\te8 0b fe ff ff       \tcallq  401790 <ksft_exit_skip>\n  401985:\tbf 3b 21 40 00       \tmov    $0x40213b,%edi\n  40198a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40198f:\te8 87 f9 ff ff       \tcallq  40131b <ksft_print_msg>\n  401994:\t90                   \tnop\n  401995:\tc9                   \tleaveq \n  401996:\tc3                   \tretq   ", "code_s": "int test_clone3_supported() {\n  __int64 v0;\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  int <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v9</span>[Number] = Number L;\n  <span class=\"supfact\">v9</span>[Number] = Number L;\n  <span class=\"supfact\">v9</span>[Number] = Number L;\n  <span class=\"supfact\">v9</span>[Number] = Number L;\n  <span class=\"supfact\">v9</span>[Number] = Number L;\n  <span class=\"supfact\">v9</span>[Number] = Number L;\n  <span class=\"supfact\">v9</span>[Number] = Number L;\n  <span class=\"supfact\">v9</span>[Number] = Number L;\n  <span class=\"supfact\">v9</span>[Number] = Number L;\n  <span class=\"supfact\">v9</span>[Number] = Number;\n  <span class=\"supfact\">v10</span> = sys_clone3((__int64)<span class=\"supfact\">v9</span>, Number L);\n  if (!<span class=\"supfact\">v10</span>)\n    exit(Number);\n  if (<span class=\"supfact\">v10</span> > Number) {\n    wait(Number L);\n    ksft_exit_fail_msg(String, Number L, v0, v1, v2, v3);\n  }\n  if (*__errno_location() == Number)\n    ksft_exit_skip(String, Number L, v4, v5, v6, v7);\n  return ksft_print_msg(String, Number L, v4, v5, v6, v7);\n}", "code_t": "void __cdecl test_clone3_supported() {\n  clone_args <span class=\"supfact\">args</span>;\n  pid_t <span class=\"supfact\">pid</span>;\n  <span class=\"supfact\">args</span>.flags = Number L;\n  <span class=\"supfact\">args</span>.pidfd = Number L;\n  <span class=\"supfact\">args</span>.child_tid = Number L;\n  <span class=\"supfact\">args</span>.parent_tid = Number L;\n  <span class=\"supfact\">args</span>.stack = Number L;\n  <span class=\"supfact\">args</span>.stack_size = Number L;\n  <span class=\"supfact\">args</span>.tls = Number L;\n  <span class=\"supfact\">args</span>.set_tid = Number L;\n  <span class=\"supfact\">args</span>.set_tid_size = Number L;\n  <span class=\"supfact\">args</span>.exit_signal = Number;\n  <span class=\"supfact\">pid</span> = sys_clone3(&<span class=\"supfact\">args</span>, Number);\n  if (!<span class=\"supfact\">pid</span>)\n    exit(Number);\n  if (<span class=\"supfact\">pid</span> > Number) {\n    wait(Number L);\n    ksft_exit_fail_msg(String);\n  }\n  if (*__errno_location() == Number)\n    ksft_exit_skip(String);\n  ksft_print_msg(String);\n}", "var": [{"name": "v10", "type": "int", "ref_name": "pid", "ref_type": "pid_t"}, {"name": "v9", "type": "char[64]", "ref_name": "args", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/64bc886c5ea6e01228b6da2d232fc8e810371c20ee53a23c5e949cdbf0fcdc3e", "path_in_repo": "XanClic/qemu//s390x-softmmu/target/s390x/translate.o", "objdump": "00000000000044e9 <gen_helper_unpk>:\n    44e9:\t55                   \tpush   %rbp\n    44ea:\t48 89 e5             \tmov    %rsp,%rbp\n    44ed:\t48 83 ec 50          \tsub    $0x50,%rsp\n    44f1:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    44f5:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    44f9:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    44fd:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n    4501:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    4508:\t00 00 \n    450a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    450e:\t31 c0                \txor    %eax,%eax\n    4510:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4514:\t48 89 c7             \tmov    %rax,%rdi\n    4517:\te8 df bf ff ff       \tcallq  4fb <tcgv_ptr_temp>\n    451c:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    4520:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    4524:\t48 89 c7             \tmov    %rax,%rdi\n    4527:\te8 5e bf ff ff       \tcallq  48a <tcgv_i32_temp>\n    452c:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    4530:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4534:\t48 89 c7             \tmov    %rax,%rdi\n    4537:\te8 a5 bf ff ff       \tcallq  4e1 <tcgv_i64_temp>\n    453c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4540:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    4544:\t48 89 c7             \tmov    %rax,%rdi\n    4547:\te8 95 bf ff ff       \tcallq  4e1 <tcgv_i64_temp>\n    454c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    4550:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    4554:\t48 89 c1             \tmov    %rax,%rcx\n    4557:\tba 04 00 00 00       \tmov    $0x4,%edx\n    455c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4561:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4568 <gen_helper_unpk+0x7f>\n    4568:\t48 89 c7             \tmov    %rax,%rdi\n    456b:\te8 00 00 00 00       \tcallq  4570 <gen_helper_unpk+0x87>\n    4570:\t90                   \tnop\n    4571:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4575:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    457c:\t00 00 \n    457e:\t74 05                \tje     4585 <gen_helper_unpk+0x9c>\n    4580:\te8 00 00 00 00       \tcallq  4585 <gen_helper_unpk+0x9c>\n    4585:\tc9                   \tleaveq \n    4586:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall gen_helper_unpk(__int64 a1, __int64 a2, __int64 a3,\n                                            __int64 a4) {\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  <span class=\"supfact\">v7</span>[Number] = tcgv_ptr_temp(a1);\n  <span class=\"supfact\">v7</span>[Number] = tcgv_i32_temp(a2);\n  <span class=\"supfact\">v7</span>[Number] = tcgv_i64_temp(a3);\n  <span class=\"supfact\">v7</span>[Number] = tcgv_i64_temp(a4);\n  tcg_gen_callN(&helper_unpk, Number L, Number L, <span class=\"supfact\">v7</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v8</span>;\n}", "code_t": "void __cdecl gen_helper_unpk(TCGv_ptr arg1, TCGv_i32 arg2, TCGv_i64 arg3,\n                             TCGv_i64 arg4) {\n  TCGTemp_0 *<span class=\"supfact\">args</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  <span class=\"supfact\">args</span>[Number] = tcgv_ptr_temp(arg1);\n  <span class=\"supfact\">args</span>[Number] = tcgv_i32_temp(arg2);\n  <span class=\"supfact\">args</span>[Number] = tcgv_i64_temp(arg3);\n  <span class=\"supfact\">args</span>[Number] = tcgv_i64_temp(arg4);\n  tcg_gen_callN(&helper_unpk, Number L, Number L, <span class=\"supfact\">args</span>);\n}", "var": [{"name": "v8", "type": "unsigned __int64", "ref_name": "v7", "ref_type": "unsigned __int64"}, {"name": "v7", "type": "TCGTemp_0 *[4]", "ref_name": "args", "ref_type": "TCGTemp_0 *[4]"}], "body_in_train": false}, {"repo_owner": "rofl0r", "repo_name": "microwindows", "path": "rofl0r/microwindows/3f05555457b55e62636036b055b5284df65a26283432e7f8563b804b3503346d", "path_in_repo": "rofl0r/microwindows/src/obj/demos/nanox/ntetris.o", "objdump": "0000000000000f8f <block_reached_bottom>:\n     f8f:\t55                   \tpush   %rbp\n     f90:\t48 89 e5             \tmov    %rsp,%rbp\n     f93:\t48 83 ec 20          \tsub    $0x20,%rsp\n     f97:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     f9b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f9f:\t48 89 c7             \tmov    %rax,%rdi\n     fa2:\te8 00 00 00 00       \tcallq  fa7 <block_reached_bottom+0x18>\n     fa7:\t85 c0                \ttest   %eax,%eax\n     fa9:\t75 13                \tjne    fbe <block_reached_bottom+0x2f>\n     fab:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     faf:\tc7 80 90 0a 00 00 00 \tmovl   $0x0,0xa90(%rax)\n     fb6:\t00 00 00 \n     fb9:\te9 12 01 00 00       \tjmpq   10d0 <block_reached_bottom+0x141>\n     fbe:\tc7 45 f8 1b 00 00 00 \tmovl   $0x1b,-0x8(%rbp)\n     fc5:\te9 e4 00 00 00       \tjmpq   10ae <block_reached_bottom+0x11f>\n     fca:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n     fd1:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     fd8:\teb 34                \tjmp    100e <block_reached_bottom+0x7f>\n     fda:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n     fde:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     fe1:\t48 63 f0             \tmovslq %eax,%rsi\n     fe4:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     fe7:\t48 63 d0             \tmovslq %eax,%rdx\n     fea:\t48 89 d0             \tmov    %rdx,%rax\n     fed:\t48 01 c0             \tadd    %rax,%rax\n     ff0:\t48 01 d0             \tadd    %rdx,%rax\n     ff3:\t48 c1 e0 02          \tshl    $0x2,%rax\n     ff7:\t48 01 f0             \tadd    %rsi,%rax\n     ffa:\t8b 04 81             \tmov    (%rcx,%rax,4),%eax\n     ffd:\t85 c0                \ttest   %eax,%eax\n     fff:\t75 09                \tjne    100a <block_reached_bottom+0x7b>\n    1001:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n    1008:\teb 0a                \tjmp    1014 <block_reached_bottom+0x85>\n    100a:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    100e:\t83 7d fc 0b          \tcmpl   $0xb,-0x4(%rbp)\n    1012:\t7e c6                \tjle    fda <block_reached_bottom+0x4b>\n    1014:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    1018:\t0f 85 8b 00 00 00    \tjne    10a9 <block_reached_bottom+0x11a>\n    101e:\tbf 2c 01 00 00       \tmov    $0x12c,%edi\n    1023:\te8 00 00 00 00       \tcallq  1028 <block_reached_bottom+0x99>\n    1028:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    102b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    102f:\t89 d6                \tmov    %edx,%esi\n    1031:\t48 89 c7             \tmov    %rax,%rdi\n    1034:\te8 00 00 00 00       \tcallq  1039 <block_reached_bottom+0xaa>\n    1039:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    103d:\t8b 80 80 0a 00 00    \tmov    0xa80(%rax),%eax\n    1043:\t8d 50 64             \tlea    0x64(%rax),%edx\n    1046:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    104a:\t89 90 80 0a 00 00    \tmov    %edx,0xa80(%rax)\n    1050:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1054:\t8b 80 8c 0a 00 00    \tmov    0xa8c(%rax),%eax\n    105a:\t83 f8 0a             \tcmp    $0xa,%eax\n    105d:\t7f 38                \tjg     1097 <block_reached_bottom+0x108>\n    105f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1063:\t8b 80 8c 0a 00 00    \tmov    0xa8c(%rax),%eax\n    1069:\t83 c0 01             \tadd    $0x1,%eax\n    106c:\t69 d0 f4 01 00 00    \timul   $0x1f4,%eax,%edx\n    1072:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1076:\t8b 80 80 0a 00 00    \tmov    0xa80(%rax),%eax\n    107c:\t39 c2                \tcmp    %eax,%edx\n    107e:\t7f 17                \tjg     1097 <block_reached_bottom+0x108>\n    1080:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1084:\t8b 80 8c 0a 00 00    \tmov    0xa8c(%rax),%eax\n    108a:\t8d 50 01             \tlea    0x1(%rax),%edx\n    108d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1091:\t89 90 8c 0a 00 00    \tmov    %edx,0xa8c(%rax)\n    1097:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    109b:\t48 89 c7             \tmov    %rax,%rdi\n    109e:\te8 00 00 00 00       \tcallq  10a3 <block_reached_bottom+0x114>\n    10a3:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n    10a7:\teb 01                \tjmp    10aa <block_reached_bottom+0x11b>\n    10a9:\t90                   \tnop\n    10aa:\t83 6d f8 01          \tsubl   $0x1,-0x8(%rbp)\n    10ae:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n    10b2:\t0f 85 12 ff ff ff    \tjne    fca <block_reached_bottom+0x3b>\n    10b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    10bc:\t48 89 c7             \tmov    %rax,%rdi\n    10bf:\te8 00 00 00 00       \tcallq  10c4 <block_reached_bottom+0x135>\n    10c4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    10c8:\t48 89 c7             \tmov    %rax,%rdi\n    10cb:\te8 00 00 00 00       \tcallq  10d0 <block_reached_bottom+0x141>\n    10d0:\tc9                   \tleaveq \n    10d1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall block_reached_bottom(unsigned int *a1) {\n  __int64 result;\n  int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">j</span>;\n  if (block_is_all_in_well((__int64)a1)) {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span>; --<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">v2</span> = Number;\n      for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n           ++<span class=\"supfact\">j</span>) {\n        if (!a1[Number * <span class=\"supfact\">i</span> + <span class=\"supfact\">j</span>]) {\n          <span class=\"supfact\">v2</span> = Number;\n          break;\n        }\n      }\n      if (!<span class=\"supfact\">v2</span>) {\n        msleep(Number L);\n        delete_line((__int64)a1, <span class=\"supfact\">i</span>);\n        a1[Number] += Number;\n        if ((int)a1[Number] <= Number &&\n            (int)(Number * (a1[Number] + Number)) <= (int)a1[Number])\n          ++a1[Number];\n        draw_score(a1);\n        ++<span class=\"supfact\">i</span>;\n      }\n    }\n    choose_new_shape(a1);\n    result = draw_next_shape((__int64)a1);\n  } else {\n    result = (__int64)a1;\n    a1[Number] = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl block_reached_bottom(nstate *state) {\n  int <span class=\"supfact\">nr</span>;\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">x</span>;\n  if (block_is_all_in_well(state)) {\n    for (<span class=\"supfact\">y</span> = Number; <span class=\"supfact\">y</span>; --<span class=\"supfact\">y</span>) {\n      <span class=\"supfact\">nr</span> = Number;\n      for (<span class=\"supfact\">x</span> = Number; <span class=\"supfact\">x</span> <= Number;\n           ++<span class=\"supfact\">x</span>) {\n        if (!state->blocks[Number][<span class=\"supfact\">y</span>][<span class=\"supfact\">x</span>]) {\n          <span class=\"supfact\">nr</span> = Number;\n          break;\n        }\n      }\n      if (!<span class=\"supfact\">nr</span>) {\n        msleep(Number L);\n        delete_line(state, <span class=\"supfact\">y</span>);\n        state->score += Number;\n        if (state->level <= Number &&\n            Number * (state->level + Number) <= state->score)\n          ++state->level;\n        draw_score(state);\n        ++<span class=\"supfact\">y</span>;\n      }\n    }\n    choose_new_shape(state);\n    draw_next_shape(state);\n  } else {\n    state->state = Number;\n  }\n}", "var": [{"name": "j", "type": "int", "ref_name": "x", "ref_type": "int"}, {"name": "i", "type": "int", "ref_name": "y", "ref_type": "int"}, {"name": "v2", "type": "int", "ref_name": "nr", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "goksyli", "repo_name": "libDune", "path": "goksyli/libDune/440b7391f2e57d3d370a4d84fc1a3673b066f453ec8a4d4f8f0451e5d8780450", "path_in_repo": "goksyli/libDune/bench/bench_dune_ring", "objdump": "0000000000401406 <test_pgflt>:\n  401406:\t55                   \tpush   %rbp\n  401407:\t48 89 e5             \tmov    %rsp,%rbp\n  40140a:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40140e:\tbf a8 00 00 00       \tmov    $0xa8,%edi\n  401413:\te8 98 fd ff ff       \tcallq  4011b0 <malloc@plt>\n  401418:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40141c:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  401421:\t75 0a                \tjne    40142d <test_pgflt+0x27>\n  401423:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n  401428:\te9 bc 00 00 00       \tjmpq   4014e9 <test_pgflt+0xe3>\n  40142d:\tbf 08 70 40 00       \tmov    $0x407008,%edi\n  401432:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401437:\te8 84 fc ff ff       \tcallq  4010c0 <printf@plt>\n  40143c:\t48 8b 05 55 e5 00 00 \tmov    0xe555(%rip),%rax        # 40f998 <pgroot>\n  401443:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n  401448:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40144d:\t48 be 00 00 00 00 00 \tmovabs $0x400000000000,%rsi\n  401454:\t40 00 00 \n  401457:\t48 89 c7             \tmov    %rax,%rdi\n  40145a:\te8 5d 43 00 00       \tcallq  4057bc <dune_vm_map_pages>\n  40145f:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  401462:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  401466:\t74 0f                \tje     401477 <test_pgflt+0x71>\n  401468:\tbf 28 70 40 00       \tmov    $0x407028,%edi\n  40146d:\te8 fe fb ff ff       \tcallq  401070 <puts@plt>\n  401472:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  401475:\teb 72                \tjmp    4014e9 <test_pgflt+0xe3>\n  401477:\tbf 79 13 40 00       \tmov    $0x401379,%edi\n  40147c:\te8 29 52 00 00       \tcallq  4066aa <dune_register_pgflt_handler>\n  401481:\tbf c1 13 40 00       \tmov    $0x4013c1,%edi\n  401486:\te8 09 52 00 00       \tcallq  406694 <dune_register_syscall_handler>\n  40148b:\t48 89 e0             \tmov    %rsp,%rax\n  40148e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  401492:\tba d7 13 40 00       \tmov    $0x4013d7,%edx\n  401497:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40149b:\t48 89 90 80 00 00 00 \tmov    %rdx,0x80(%rax)\n  4014a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4014a6:\t48 8d 90 f0 d8 ff ff \tlea    -0x2710(%rax),%rdx\n  4014ad:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4014b1:\t48 89 90 98 00 00 00 \tmov    %rdx,0x98(%rax)\n  4014b8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4014bc:\t48 c7 80 90 00 00 00 \tmovq   $0x2,0x90(%rax)\n  4014c3:\t02 00 00 00 \n  4014c7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4014cb:\t48 89 c7             \tmov    %rax,%rdi\n  4014ce:\te8 15 17 00 00       \tcallq  402be8 <dune_jump_to_user>\n  4014d3:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4014d6:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  4014da:\t75 0a                \tjne    4014e6 <test_pgflt+0xe0>\n  4014dc:\tbf 47 70 40 00       \tmov    $0x407047,%edi\n  4014e1:\te8 8a fb ff ff       \tcallq  401070 <puts@plt>\n  4014e6:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  4014e9:\tc9                   \tleaveq \n  4014ea:\tc3                   \tretq   ", "code_s": "__int64 test_pgflt() {\n  __int64 result;\n  __int64 <span class=\"supfact\">v1</span>;\n  __int64 *<span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  _QWORD *<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = malloc(Number);\n  if (!<span class=\"supfact\">v4</span>)\n    return Number L;\n  printf(String);\n  <span class=\"supfact\">v3</span> = dune_vm_map_pages(pgroot, Number, Number L, Number L);\n  if (<span class=\"supfact\">v3</span>) {\n    puts(String);\n    result = <span class=\"supfact\">v3</span>;\n  } else {\n    dune_register_pgflt_handler(pgflt_handler);\n    dune_register_syscall_handler(syscall_handler1);\n    <span class=\"supfact\">v2</span> = &<span class=\"supfact\">v1</span>;\n    <span class=\"supfact\">v4</span>[Number] = userlevel_pgflt;\n    <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">v2</span> - Number;\n    <span class=\"supfact\">v4</span>[Number] = Number L;\n    <span class=\"supfact\">v3</span> = dune_jump_to_user(<span class=\"supfact\">v4</span>);\n    if (!<span class=\"supfact\">v3</span>)\n      puts(String);\n    result = <span class=\"supfact\">v3</span>;\n  }\n  return result;\n}", "code_t": "int __cdecl test_pgflt() {\n  int result;\n  __int64 <span class=\"supfact\">v1</span>;\n  unsigned __int64 <span class=\"supfact\">sp_0</span>;\n  int <span class=\"supfact\">ret</span>;\n  dune_tf *<span class=\"supfact\">tf_0</span>;\n  <span class=\"supfact\">tf_0</span> = (dune_tf *)malloc(Number);\n  if (!<span class=\"supfact\">tf_0</span>)\n    return Number;\n  printf(String);\n  <span class=\"supfact\">ret</span> =\n      dune_vm_map_pages(pgroot, (void *)Number, Number, Number);\n  if (<span class=\"supfact\">ret</span>) {\n    puts(String);\n    result = <span class=\"supfact\">ret</span>;\n  } else {\n    dune_register_pgflt_handler((dune_pgflt_cb)pgflt_handler);\n    dune_register_syscall_handler((dune_syscall_cb)syscall_handler1);\n    <span class=\"supfact\">sp_0</span> = (unsigned __int64)&<span class=\"supfact\">v1</span>;\n    <span class=\"supfact\">tf_0</span>->rip = (uint64_t)userlevel_pgflt;\n    <span class=\"supfact\">tf_0</span>->rsp = <span class=\"supfact\">sp_0</span> - Number;\n    <span class=\"supfact\">tf_0</span>->rflags = Number L;\n    <span class=\"supfact\">ret</span> = dune_jump_to_user(<span class=\"supfact\">tf_0</span>);\n    if (!<span class=\"supfact\">ret</span>)\n      puts(String);\n    result = <span class=\"supfact\">ret</span>;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "unsigned __int64", "ref_name": "tf_0", "ref_type": "__unk__"}, {"name": "v3", "type": "int", "ref_name": "ret", "ref_type": "int"}, {"name": "v2", "type": "unsigned __int64", "ref_name": "sp_0", "ref_type": "unsigned __int64"}, {"name": "v1", "type": "unsigned __int64", "ref_name": "v1", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "dumb0002", "repo_name": "viro-geni", "path": "dumb0002/viro-geni/4631ec07afd28c75b2145b96d0c07d6dad33cd51d7e45c56fd96d7e14ad6bfce", "path_in_repo": "dumb0002/viro-geni/geni-viro/sparse-0.5.0/compile-i386.o", "objdump": "0000000000003c67 <loopstk_push>:\n    3c67:\t55                   \tpush   %rbp\n    3c68:\t48 89 e5             \tmov    %rsp,%rbp\n    3c6b:\t48 83 ec 20          \tsub    $0x20,%rsp\n    3c6f:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n    3c72:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n    3c75:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3c7c <loopstk_push+0x15>\n    3c7c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3c80:\tbf 10 00 00 00       \tmov    $0x10,%edi\n    3c85:\te8 00 00 00 00       \tcallq  3c8a <loopstk_push+0x23>\n    3c8a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    3c8e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3c92:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    3c95:\t89 10                \tmov    %edx,(%rax)\n    3c97:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3c9b:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n    3c9e:\t89 50 04             \tmov    %edx,0x4(%rax)\n    3ca1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3ca5:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n    3ca9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3cad:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    3cb1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3cb5:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    3cb9:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n    3cbd:\t90                   \tnop\n    3cbe:\tc9                   \tleaveq \n    3cbf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall loopstk_push(int a1, int a2) {\n  __int64 result;\n  _DWORD *<span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = current_func;\n  <span class=\"supfact\">v3</span> = malloc(Number);\n  *<span class=\"supfact\">v3</span> = a1;\n  <span class=\"supfact\">v3</span>[Number] = a2;\n  *((_QWORD *)<span class=\"supfact\">v3</span> + Number) =\n      *(_QWORD *)(<span class=\"supfact\">v4</span> + Number);\n  result = <span class=\"supfact\">v4</span>;\n  *(_QWORD *)(<span class=\"supfact\">v4</span> + Number) = <span class=\"supfact\">v3</span>;\n  return result;\n}", "code_t": "void __cdecl loopstk_push(int cont_lbl, int loop_bottom_lbl) {\n  loop_stack *<span class=\"supfact\">ls</span>;\n  function *<span class=\"supfact\">f</span>;\n  <span class=\"supfact\">f</span> = current_func;\n  <span class=\"supfact\">ls</span> = (loop_stack *)malloc(Number);\n  <span class=\"supfact\">ls</span>->continue_lbl = cont_lbl;\n  <span class=\"supfact\">ls</span>->loop_bottom_lbl = loop_bottom_lbl;\n  <span class=\"supfact\">ls</span>->next = <span class=\"supfact\">f</span>->loop_stack;\n  <span class=\"supfact\">f</span>->loop_stack = <span class=\"supfact\">ls</span>;\n}", "var": [{"name": "v4", "type": "int *", "ref_name": "f", "ref_type": "function *"}, {"name": "v3", "type": "int *", "ref_name": "ls", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "wuqiong", "repo_name": "rt-n56u", "path": "wuqiong/rt-n56u/bbd657e2ea1154f96beb845460e215159d4a53dab6b39512186abbd4e7434334", "path_in_repo": "wuqiong/rt-n56u/trunk/user/openssh/openssh-7.x/key.o", "objdump": "0000000000000d00 <key_load_private>:\n d00:\t55                   \tpush   %rbp\n d01:\t48 89 e5             \tmov    %rsp,%rbp\n d04:\t48 83 ec 40          \tsub    $0x40,%rsp\n d08:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n d0c:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n d10:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n d14:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n d1b:\t00 00 \n d1d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n d21:\t31 c0                \txor    %eax,%eax\n d23:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n d2a:\t00 \n d2b:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n d2f:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n d33:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n d37:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n d3b:\t48 89 c7             \tmov    %rax,%rdi\n d3e:\te8 00 00 00 00       \tcallq  d43 <key_load_private+0x43>\n d43:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n d46:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n d4a:\t74 75                \tje     dc1 <key_load_private+0xc1>\n d4c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n d4f:\tba ea ff ff ff       \tmov    $0xffffffea,%edx\n d54:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d5b <key_load_private+0x5b>\n d5b:\t89 c7                \tmov    %eax,%edi\n d5d:\te8 e1 f4 ff ff       \tcallq  243 <fatal_on_fatal_errors>\n d62:\t83 7d ec e8          \tcmpl   $0xffffffe8,-0x14(%rbp)\n d66:\t74 06                \tje     d6e <key_load_private+0x6e>\n d68:\t83 7d ec d5          \tcmpl   $0xffffffd5,-0x14(%rbp)\n d6c:\t75 27                \tjne    d95 <key_load_private+0x95>\n d6e:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n d71:\t89 c7                \tmov    %eax,%edi\n d73:\te8 00 00 00 00       \tcallq  d78 <key_load_private+0x78>\n d78:\t48 89 c2             \tmov    %rax,%rdx\n d7b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d82 <key_load_private+0x82>\n d82:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # d89 <key_load_private+0x89>\n d89:\tb8 00 00 00 00       \tmov    $0x0,%eax\n d8e:\te8 00 00 00 00       \tcallq  d93 <key_load_private+0x93>\n d93:\teb 25                \tjmp    dba <key_load_private+0xba>\n d95:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n d98:\t89 c7                \tmov    %eax,%edi\n d9a:\te8 00 00 00 00       \tcallq  d9f <key_load_private+0x9f>\n d9f:\t48 89 c2             \tmov    %rax,%rdx\n da2:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # da9 <key_load_private+0xa9>\n da9:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # db0 <key_load_private+0xb0>\n db0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n db5:\te8 00 00 00 00       \tcallq  dba <key_load_private+0xba>\n dba:\tb8 00 00 00 00       \tmov    $0x0,%eax\n dbf:\teb 04                \tjmp    dc5 <key_load_private+0xc5>\n dc1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n dc5:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n dc9:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n dd0:\t00 00 \n dd2:\t74 05                \tje     dd9 <key_load_private+0xd9>\n dd4:\te8 00 00 00 00       \tcallq  dd9 <key_load_private+0xd9>\n dd9:\tc9                   \tleaveq \n dda:\tc3                   \tretq   ", "code_s": "__int64 __fastcall key_load_private(__int64 a1, __int64 a2, __int64 a3) {\n  const char *v3;\n  const char *v4;\n  _BYTE <span class=\"supfact\">v6</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  *(_QWORD *)&<span class=\"supfact\">v6</span>[Number] = Number L;\n  *(_QWORD *)<span class=\"supfact\">v6</span> = (unsigned int)sshkey_load_private(\n      a1, a2, &<span class=\"supfact\">v6</span>[Number], a3);\n  if (!*(_DWORD *)<span class=\"supfact\">v6</span>)\n    return *(_QWORD *)&<span class=\"supfact\">v6</span>[Number];\n  fatal_on_fatal_errors(*(unsigned int *)<span class=\"supfact\">v6</span>, String, Number);\n  if (*(_DWORD *)<span class=\"supfact\">v6</span> == Number ||\n      *(_DWORD *)<span class=\"supfact\">v6</span> == Number) {\n    v3 = (const char *)ssh_err(*(unsigned int *)<span class=\"supfact\">v6</span>);\n    debug(String, String, v3);\n  } else {\n    v4 = (const char *)ssh_err(*(unsigned int *)<span class=\"supfact\">v6</span>);\n    error((int)String, (int)String, v4);\n  }\n  return Number L;\n}", "code_t": "Key *__cdecl key_load_private(const char *path, const char *passphrase,\n                              char **commentp) {\n  const char *v3;\n  const char *v4;\n  _BYTE <span class=\"supfact\">r</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  *(_QWORD *)&<span class=\"supfact\">r</span>[Number] = Number L;\n  *(_QWORD *)<span class=\"supfact\">r</span> = (unsigned int)sshkey_load_private(\n      path, passphrase, &<span class=\"supfact\">r</span>[Number], commentp);\n  if (!*(_DWORD *)<span class=\"supfact\">r</span>)\n    return *(Key **)&<span class=\"supfact\">r</span>[Number];\n  fatal_on_fatal_errors(*(int *)<span class=\"supfact\">r</span>, String, Number);\n  if (*(_DWORD *)<span class=\"supfact\">r</span> == Number ||\n      *(_DWORD *)<span class=\"supfact\">r</span> == Number) {\n    v3 = (const char *)ssh_err(*(unsigned int *)<span class=\"supfact\">r</span>);\n    debug(String, String, v3);\n  } else {\n    v4 = (const char *)ssh_err(*(unsigned int *)<span class=\"supfact\">r</span>);\n    error((int)String, (int)String, v4);\n  }\n  return Number L;\n}", "var": [{"name": "v7", "type": "unsigned __int64", "ref_name": "v7", "ref_type": "unsigned __int64"}, {"name": "v6", "type": "_BYTE[12]", "ref_name": "r", "ref_type": "_BYTE[12]"}], "body_in_train": false}, {"repo_owner": "nicfol", "repo_name": "SteadyPace", "path": "nicfol/SteadyPace/c7e13b881ea920e19e472a86250409184b88fdcb30e85e49618dd2e04b73ae07", "path_in_repo": "nicfol/SteadyPace/PdCore/jni/libpd/pure-data/src/m_glob.o", "objdump": "0000000000000149 <max_default>:\n 149:\t55                   \tpush   %rbp\n 14a:\t48 89 e5             \tmov    %rsp,%rbp\n 14d:\t53                   \tpush   %rbx\n 14e:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n 155:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n 159:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n 15d:\t89 95 7c ff ff ff    \tmov    %edx,-0x84(%rbp)\n 163:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n 16a:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 16e:\t48 8b 18             \tmov    (%rax),%rbx\n 171:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 175:\t48 8b 00             \tmov    (%rax),%rax\n 178:\t48 89 c7             \tmov    %rax,%rdi\n 17b:\te8 00 00 00 00       \tcallq  180 <max_default+0x37>\n 180:\t48 89 da             \tmov    %rbx,%rdx\n 183:\t48 89 c6             \tmov    %rax,%rsi\n 186:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 18d <max_default+0x44>\n 18d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 192:\te8 00 00 00 00       \tcallq  197 <max_default+0x4e>\n 197:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n 19e:\teb 3b                \tjmp    1db <max_default+0x92>\n 1a0:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 1a3:\t48 98                \tcltq   \n 1a5:\t48 c1 e0 04          \tshl    $0x4,%rax\n 1a9:\t48 89 c2             \tmov    %rax,%rdx\n 1ac:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 1b3:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n 1b7:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 1bb:\tba 50 00 00 00       \tmov    $0x50,%edx\n 1c0:\t48 89 c6             \tmov    %rax,%rsi\n 1c3:\t48 89 cf             \tmov    %rcx,%rdi\n 1c6:\te8 00 00 00 00       \tcallq  1cb <max_default+0x82>\n 1cb:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 1cf:\t48 89 c7             \tmov    %rax,%rdi\n 1d2:\te8 00 00 00 00       \tcallq  1d7 <max_default+0x8e>\n 1d7:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n 1db:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 1de:\t3b 85 7c ff ff ff    \tcmp    -0x84(%rbp),%eax\n 1e4:\t7c ba                \tjl     1a0 <max_default+0x57>\n 1e6:\te8 00 00 00 00       \tcallq  1eb <max_default+0xa2>\n 1eb:\t90                   \tnop\n 1ec:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n 1f3:\t5b                   \tpop    %rbx\n 1f4:\t5d                   \tpop    %rbp\n 1f5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall max_default(_QWORD *a1, const char **a2, int a3,\n                               __int64 a4) {\n  const char *v4;\n  const char *v5;\n  char <span class=\"supfact\">v9</span>[Number];\n  int <span class=\"supfact\">i</span>;\n  v4 = *a2;\n  v5 = (const char *)class_getname(*a1);\n  startpost(String, v5, v4);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < a3;\n       ++<span class=\"supfact\">i</span>) {\n    atom_string(Number L * <span class=\"supfact\">i</span> + a4, <span class=\"supfact\">v9</span>,\n                Number L);\n    poststring(<span class=\"supfact\">v9</span>);\n  }\n  return endpost();\n}", "code_t": "void __cdecl max_default(t_pd *x, t_symbol *s, int argc, t_atom *argv) {\n  char *v4;\n  const char *v5;\n  char <span class=\"supfact\">str</span>[Number];\n  int <span class=\"supfact\">i</span>;\n  v4 = s->s_name;\n  v5 = (const char *)class_getname(*x);\n  startpost(String, v5, v4);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < argc;\n       ++<span class=\"supfact\">i</span>) {\n    atom_string(&argv[<span class=\"supfact\">i</span>], <span class=\"supfact\">str</span>, Number L);\n    poststring(<span class=\"supfact\">str</span>);\n  }\n  endpost();\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v9", "type": "char[64]", "ref_name": "str", "ref_type": "char[80]"}], "body_in_train": false}, {"repo_owner": "esturgeon", "repo_name": "RT", "path": "esturgeon/RT/782ba829c25ca453fc942e07739d3c849dc6938f1f090f985fecce5c6535515e", "path_in_repo": "esturgeon/RT//.obj/list_files.o", "objdump": "000000000000028c <open_scenes_dir>:\n 28c:\t55                   \tpush   %rbp\n 28d:\t48 89 e5             \tmov    %rsp,%rbp\n 290:\t48 83 ec 20          \tsub    $0x20,%rsp\n 294:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 298:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 29c:\tc7 80 e8 00 00 00 00 \tmovl   $0x0,0xe8(%rax)\n 2a3:\t00 00 00 \n 2a6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2ab:\te8 00 00 00 00       \tcallq  2b0 <open_scenes_dir+0x24>\n 2b0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 2b4:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 2b9:\t75 13                \tjne    2ce <open_scenes_dir+0x42>\n 2bb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2bf:\t48 89 c6             \tmov    %rax,%rsi\n 2c2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2c7:\te8 00 00 00 00       \tcallq  2cc <open_scenes_dir+0x40>\n 2cc:\teb 28                \tjmp    2f6 <open_scenes_dir+0x6a>\n 2ce:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 2d2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2d6:\t48 89 d6             \tmov    %rdx,%rsi\n 2d9:\t48 89 c7             \tmov    %rax,%rdi\n 2dc:\te8 00 00 00 00       \tcallq  2e1 <open_scenes_dir+0x55>\n 2e1:\t85 c0                \ttest   %eax,%eax\n 2e3:\t75 11                \tjne    2f6 <open_scenes_dir+0x6a>\n 2e5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2e9:\t48 89 c6             \tmov    %rax,%rsi\n 2ec:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2f1:\te8 00 00 00 00       \tcallq  2f6 <open_scenes_dir+0x6a>\n 2f6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2fa:\t48 89 c7             \tmov    %rax,%rdi\n 2fd:\te8 00 00 00 00       \tcallq  302 <open_scenes_dir+0x76>\n 302:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 307:\tc9                   \tleaveq \n 308:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall open_scenes_dir(__int64 a1) {\n  DIR *<span class=\"supfact\">dirp</span>;\n  *(_DWORD *)(a1 + Number) = Number;\n  <span class=\"supfact\">dirp</span> = opendir(String);\n  if (<span class=\"supfact\">dirp</span>) {\n    if (!(unsigned int)list_all_scene_files(a1, <span class=\"supfact\">dirp</span>))\n      ft_fail(String, a1);\n  } else {\n    ft_fail(String, a1);\n  }\n  closedir(<span class=\"supfact\">dirp</span>);\n  return Number L;\n}", "code_t": "int __cdecl open_scenes_dir(t_data *d) {\n  DIR *<span class=\"supfact\">di_0</span>;\n  d->dir_files = Number;\n  <span class=\"supfact\">di_0</span> = opendir(String);\n  if (<span class=\"supfact\">di_0</span>) {\n    if (!list_all_scene_files(d, <span class=\"supfact\">di_0</span>))\n      ft_fail(String, d);\n  } else {\n    ft_fail(String, d);\n  }\n  closedir(<span class=\"supfact\">di_0</span>);\n  return Number;\n}", "var": [{"name": "dirp", "type": "DIR *", "ref_name": "di_0", "ref_type": "DIR *"}], "body_in_train": false}, {"repo_owner": "davidnieder", "repo_name": "remote-sockets", "path": "davidnieder/remote-sockets/ddbdf4ef8d940cec9af22705bc1fe1e0409de9e12684061f72879c376f1a7e3b", "path_in_repo": "davidnieder/remote-sockets/raspberry/build/remote-sockets", "objdump": "0000000000407649 <parse_args>:\n  407649:\t55                   \tpush   %rbp\n  40764a:\t48 89 e5             \tmov    %rsp,%rbp\n  40764d:\t48 81 ec 70 01 00 00 \tsub    $0x170,%rsp\n  407654:\t89 bd ac fe ff ff    \tmov    %edi,-0x154(%rbp)\n  40765a:\t48 89 b5 a0 fe ff ff \tmov    %rsi,-0x160(%rbp)\n  407661:\t48 89 95 98 fe ff ff \tmov    %rdx,-0x168(%rbp)\n  407668:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n  40766f:\tbe 00 94 40 00       \tmov    $0x409400,%esi\n  407674:\tba 28 00 00 00       \tmov    $0x28,%edx\n  407679:\t48 89 c7             \tmov    %rax,%rdi\n  40767c:\t48 89 d1             \tmov    %rdx,%rcx\n  40767f:\tf3 48 a5             \trep movsq %ds:(%rsi),%es:(%rdi)\n  407682:\te9 e8 01 00 00       \tjmpq   40786f <parse_args+0x226>\n  407687:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40768a:\t83 e8 61             \tsub    $0x61,%eax\n  40768d:\t83 f8 14             \tcmp    $0x14,%eax\n  407690:\t0f 87 d9 01 00 00    \tja     40786f <parse_args+0x226>\n  407696:\t89 c0                \tmov    %eax,%eax\n  407698:\t48 8b 04 c5 40 95 40 \tmov    0x409540(,%rax,8),%rax\n  40769f:\t00 \n  4076a0:\tff e0                \tjmpq   *%rax\n  4076a2:\t48 8b 05 57 4b 00 00 \tmov    0x4b57(%rip),%rax        # 40c200 <optarg@@GLIBC_2.2.5>\n  4076a9:\t48 89 c7             \tmov    %rax,%rdi\n  4076ac:\te8 5f ac ff ff       \tcallq  402310 <atoi@plt>\n  4076b1:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4076b4:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  4076b8:\t7e 1a                \tjle    4076d4 <parse_args+0x8b>\n  4076ba:\t81 7d f8 fe ff 00 00 \tcmpl   $0xfffe,-0x8(%rbp)\n  4076c1:\t7f 11                \tjg     4076d4 <parse_args+0x8b>\n  4076c3:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4076ca:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  4076cd:\t89 10                \tmov    %edx,(%rax)\n  4076cf:\te9 9b 01 00 00       \tjmpq   40786f <parse_args+0x226>\n  4076d4:\t48 8b 05 45 4b 00 00 \tmov    0x4b45(%rip),%rax        # 40c220 <stderr@@GLIBC_2.2.5>\n  4076db:\t48 89 c1             \tmov    %rax,%rcx\n  4076de:\tba 15 00 00 00       \tmov    $0x15,%edx\n  4076e3:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4076e8:\tbf ca 93 40 00       \tmov    $0x4093ca,%edi\n  4076ed:\te8 5e ac ff ff       \tcallq  402350 <fwrite@plt>\n  4076f2:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4076f7:\te9 ae 01 00 00       \tjmpq   4078aa <parse_args+0x261>\n  4076fc:\t48 8b 05 fd 4a 00 00 \tmov    0x4afd(%rip),%rax        # 40c200 <optarg@@GLIBC_2.2.5>\n  407703:\t48 8b 95 98 fe ff ff \tmov    -0x168(%rbp),%rdx\n  40770a:\t48 8d 4a 04          \tlea    0x4(%rdx),%rcx\n  40770e:\tba ff 00 00 00       \tmov    $0xff,%edx\n  407713:\t48 89 c6             \tmov    %rax,%rsi\n  407716:\t48 89 cf             \tmov    %rcx,%rdi\n  407719:\te8 52 a9 ff ff       \tcallq  402070 <strncpy@plt>\n  40771e:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  407725:\tc6 80 03 01 00 00 00 \tmovb   $0x0,0x103(%rax)\n  40772c:\te9 3e 01 00 00       \tjmpq   40786f <parse_args+0x226>\n  407731:\t48 8b 05 c8 4a 00 00 \tmov    0x4ac8(%rip),%rax        # 40c200 <optarg@@GLIBC_2.2.5>\n  407738:\t48 8b 95 98 fe ff ff \tmov    -0x168(%rbp),%rdx\n  40773f:\t48 8d 8a 04 01 00 00 \tlea    0x104(%rdx),%rcx\n  407746:\tba ff 00 00 00       \tmov    $0xff,%edx\n  40774b:\t48 89 c6             \tmov    %rax,%rsi\n  40774e:\t48 89 cf             \tmov    %rcx,%rdi\n  407751:\te8 1a a9 ff ff       \tcallq  402070 <strncpy@plt>\n  407756:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  40775d:\tc6 80 03 02 00 00 00 \tmovb   $0x0,0x203(%rax)\n  407764:\te9 06 01 00 00       \tjmpq   40786f <parse_args+0x226>\n  407769:\t48 8b 05 90 4a 00 00 \tmov    0x4a90(%rip),%rax        # 40c200 <optarg@@GLIBC_2.2.5>\n  407770:\t48 8b 95 98 fe ff ff \tmov    -0x168(%rbp),%rdx\n  407777:\t48 8d 8a 04 03 00 00 \tlea    0x304(%rdx),%rcx\n  40777e:\tba ff 00 00 00       \tmov    $0xff,%edx\n  407783:\t48 89 c6             \tmov    %rax,%rsi\n  407786:\t48 89 cf             \tmov    %rcx,%rdi\n  407789:\te8 e2 a8 ff ff       \tcallq  402070 <strncpy@plt>\n  40778e:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  407795:\tc6 80 03 04 00 00 00 \tmovb   $0x0,0x403(%rax)\n  40779c:\te9 ce 00 00 00       \tjmpq   40786f <parse_args+0x226>\n  4077a1:\t48 8b 05 58 4a 00 00 \tmov    0x4a58(%rip),%rax        # 40c200 <optarg@@GLIBC_2.2.5>\n  4077a8:\t48 8b 95 98 fe ff ff \tmov    -0x168(%rbp),%rdx\n  4077af:\t48 8d 8a 04 04 00 00 \tlea    0x404(%rdx),%rcx\n  4077b6:\tba ff 00 00 00       \tmov    $0xff,%edx\n  4077bb:\t48 89 c6             \tmov    %rax,%rsi\n  4077be:\t48 89 cf             \tmov    %rcx,%rdi\n  4077c1:\te8 aa a8 ff ff       \tcallq  402070 <strncpy@plt>\n  4077c6:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4077cd:\tc6 80 03 05 00 00 00 \tmovb   $0x0,0x503(%rax)\n  4077d4:\te9 96 00 00 00       \tjmpq   40786f <parse_args+0x226>\n  4077d9:\t48 8b 05 20 4a 00 00 \tmov    0x4a20(%rip),%rax        # 40c200 <optarg@@GLIBC_2.2.5>\n  4077e0:\t48 8b 95 98 fe ff ff \tmov    -0x168(%rbp),%rdx\n  4077e7:\t48 8d 8a 04 05 00 00 \tlea    0x504(%rdx),%rcx\n  4077ee:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n  4077f3:\t48 89 c6             \tmov    %rax,%rsi\n  4077f6:\t48 89 cf             \tmov    %rcx,%rdi\n  4077f9:\te8 72 a8 ff ff       \tcallq  402070 <strncpy@plt>\n  4077fe:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  407805:\tc6 80 23 05 00 00 00 \tmovb   $0x0,0x523(%rax)\n  40780c:\teb 61                \tjmp    40786f <parse_args+0x226>\n  40780e:\t48 8b 05 eb 49 00 00 \tmov    0x49eb(%rip),%rax        # 40c200 <optarg@@GLIBC_2.2.5>\n  407815:\t48 8b 95 98 fe ff ff \tmov    -0x168(%rbp),%rdx\n  40781c:\t48 8d 8a 24 05 00 00 \tlea    0x524(%rdx),%rcx\n  407823:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n  407828:\t48 89 c6             \tmov    %rax,%rsi\n  40782b:\t48 89 cf             \tmov    %rcx,%rdi\n  40782e:\te8 3d a8 ff ff       \tcallq  402070 <strncpy@plt>\n  407833:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  40783a:\tc6 80 43 05 00 00 00 \tmovb   $0x0,0x543(%rax)\n  407841:\teb 2c                \tjmp    40786f <parse_args+0x226>\n  407843:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  40784a:\tc6 80 44 05 00 00 01 \tmovb   $0x1,0x544(%rax)\n  407851:\teb 1c                \tjmp    40786f <parse_args+0x226>\n  407853:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n  40785a:\t48 8b 00             \tmov    (%rax),%rax\n  40785d:\t48 89 c7             \tmov    %rax,%rdi\n  407860:\te8 c8 04 00 00       \tcallq  407d2d <print_help>\n  407865:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40786a:\te8 d1 aa ff ff       \tcallq  402340 <exit@plt>\n  40786f:\t48 8d 95 b0 fe ff ff \tlea    -0x150(%rbp),%rdx\n  407876:\t48 8b b5 a0 fe ff ff \tmov    -0x160(%rbp),%rsi\n  40787d:\t8b 85 ac fe ff ff    \tmov    -0x154(%rbp),%eax\n  407883:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  407889:\t48 89 d1             \tmov    %rdx,%rcx\n  40788c:\tba e0 93 40 00       \tmov    $0x4093e0,%edx\n  407891:\t89 c7                \tmov    %eax,%edi\n  407893:\te8 98 a8 ff ff       \tcallq  402130 <getopt_long@plt>\n  407898:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40789b:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n  40789f:\t0f 85 e2 fd ff ff    \tjne    407687 <parse_args+0x3e>\n  4078a5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4078aa:\tc9                   \tleaveq \n  4078ab:\tc3                   \tretq   ", "code_s": "__int64 __fastcall parse_args(int a1, char *const *a2, __int64 a3) {\n  struct option <span class=\"supfact\">longopts</span>[Number];\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  qmemcpy(<span class=\"supfact\">longopts</span>, &off_409400,\n          sizeof(<span class=\"supfact\">longopts</span>));\n  while (Number) {\n    <span class=\"supfact\">v7</span> =\n        getopt_long(a1, a2, String, <span class=\"supfact\">longopts</span>, Number L);\n    if (<span class=\"supfact\">v7</span> == Number)\n      return Number L;\n    switch (<span class=\"supfact\">v7</span>) {\n    case String:\n      strncpy((char *)(a3 + Number), optarg, Number);\n      *(_BYTE *)(a3 + Number) = Number;\n      continue;\n    case String:\n      strncpy((char *)(a3 + Number), optarg, Number);\n      *(_BYTE *)(a3 + Number) = Number;\n      continue;\n    case String:\n      *(_BYTE *)(a3 + Number) = Number;\n      continue;\n    case String:\n      strncpy((char *)(a3 + Number), optarg, Number);\n      *(_BYTE *)(a3 + Number) = Number;\n      continue;\n    case String:\n      strncpy((char *)(a3 + Number), optarg, Number);\n      *(_BYTE *)(a3 + Number) = Number;\n      continue;\n    case String:\n      print_help(*a2);\n      exit(Number);\n    case String:\n      <span class=\"supfact\">v6</span> = atoi(optarg);\n      if (<span class=\"supfact\">v6</span> <= Number || <span class=\"supfact\">v6</span> > Number) {\n        fwrite(String, Number, Number, stderr);\n        return Number L;\n      }\n      *(_DWORD *)a3 = <span class=\"supfact\">v6</span>;\n      break;\n    case String:\n      strncpy((char *)(a3 + Number), optarg, Number);\n      *(_BYTE *)(a3 + Number) = Number;\n      continue;\n    case String:\n      strncpy((char *)(a3 + Number), optarg, Number);\n      *(_BYTE *)(a3 + Number) = Number;\n      continue;\n    default:\n      continue;\n    }\n  }\n}", "code_t": "int __cdecl parse_args(int argc, char **argv, config_t *config) {\n  option <span class=\"supfact\">long_options</span>[Number];\n  int <span class=\"supfact\">port</span>;\n  int <span class=\"supfact\">opt</span>;\n  qmemcpy(<span class=\"supfact\">long_options</span>, &off_409400,\n          sizeof(<span class=\"supfact\">long_options</span>));\n  while (Number) {\n    <span class=\"supfact\">opt</span> =\n        getopt_long(argc, argv, String, <span class=\"supfact\">long_options</span>, Number L);\n    if (<span class=\"supfact\">opt</span> == Number)\n      return Number;\n    switch (<span class=\"supfact\">opt</span>) {\n    case String:\n      strncpy(config->address, optarg, Number);\n      config->address[Number] = Number;\n      continue;\n    case String:\n      strncpy(config->client_secret, optarg, Number);\n      config->client_secret[Number] = Number;\n      continue;\n    case String:\n      config->print_config = Number;\n      continue;\n    case String:\n      strncpy(config->pidfile, optarg, Number);\n      config->pidfile[Number] = Number;\n      continue;\n    case String:\n      strncpy(config->group_name, optarg, Number);\n      config->group_name[Number] = Number;\n      continue;\n    case String:\n      print_help(*argv);\n      exit(Number);\n    case String:\n      <span class=\"supfact\">port</span> = atoi(optarg);\n      if (<span class=\"supfact\">port</span> <= Number || <span class=\"supfact\">port</span> > Number) {\n        fwrite(String, Number, Number, stderr);\n        return Number;\n      }\n      config-><span class=\"supfact\">port</span> = <span class=\"supfact\">port</span>;\n      break;\n    case String:\n      strncpy(config->server_secret, optarg, Number);\n      config->server_secret[Number] = Number;\n      continue;\n    case String:\n      strncpy(config->user_name, optarg, Number);\n      config->user_name[Number] = Number;\n      continue;\n    default:\n      continue;\n    }\n  }\n}", "var": [{"name": "v7", "type": "int", "ref_name": "opt", "ref_type": "int"}, {"name": "v6", "type": "int", "ref_name": "port", "ref_type": "int"}, {"name": "longopts", "type": "__unk__", "ref_name": "long_options", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7c8b7a7781f1cadd00b86bd331a6acad366142cb3db9ab2fde20cee244c5ff14", "path_in_repo": "XanClic/qemu//qemu-ga", "objdump": "0000000000027b48 <qobject_output_push_obj>:\n   27b48:\t55                   \tpush   %rbp\n   27b49:\t48 89 e5             \tmov    %rsp,%rbp\n   27b4c:\t48 83 ec 30          \tsub    $0x30,%rsp\n   27b50:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   27b54:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n   27b58:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n   27b5c:\tbf 18 00 00 00       \tmov    $0x18,%edi\n   27b61:\te8 3a 45 fe ff       \tcallq  c0a0 <g_malloc0@plt>\n   27b66:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   27b6a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   27b6e:\t48 8b 80 b0 00 00 00 \tmov    0xb0(%rax),%rax\n   27b75:\t48 85 c0             \ttest   %rax,%rax\n   27b78:\t75 1f                \tjne    27b99 <qobject_output_push_obj+0x51>\n   27b7a:\t48 8d 0d bf ac 02 00 \tlea    0x2acbf(%rip),%rcx        # 52840 <__PRETTY_FUNCTION__.15008>\n   27b81:\tba 37 00 00 00       \tmov    $0x37,%edx\n   27b86:\t48 8d 35 c6 ab 02 00 \tlea    0x2abc6(%rip),%rsi        # 52753 <__PRETTY_FUNCTION__.19159+0xa3>\n   27b8d:\t48 8d 3d dd ab 02 00 \tlea    0x2abdd(%rip),%rdi        # 52771 <__PRETTY_FUNCTION__.19159+0xc1>\n   27b94:\te8 a7 39 fe ff       \tcallq  b540 <__assert_fail@plt>\n   27b99:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n   27b9e:\t75 1f                \tjne    27bbf <qobject_output_push_obj+0x77>\n   27ba0:\t48 8d 0d 99 ac 02 00 \tlea    0x2ac99(%rip),%rcx        # 52840 <__PRETTY_FUNCTION__.15008>\n   27ba7:\tba 38 00 00 00       \tmov    $0x38,%edx\n   27bac:\t48 8d 35 a0 ab 02 00 \tlea    0x2aba0(%rip),%rsi        # 52753 <__PRETTY_FUNCTION__.19159+0xa3>\n   27bb3:\t48 8d 3d c1 ab 02 00 \tlea    0x2abc1(%rip),%rdi        # 5277b <__PRETTY_FUNCTION__.19159+0xcb>\n   27bba:\te8 81 39 fe ff       \tcallq  b540 <__assert_fail@plt>\n   27bbf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   27bc3:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   27bc7:\t48 89 10             \tmov    %rdx,(%rax)\n   27bca:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   27bce:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n   27bd2:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n   27bd6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   27bda:\t48 8b 90 a8 00 00 00 \tmov    0xa8(%rax),%rdx\n   27be1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   27be5:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n   27be9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   27bed:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   27bf1:\t48 89 90 a8 00 00 00 \tmov    %rdx,0xa8(%rax)\n   27bf8:\t90                   \tnop\n   27bf9:\tc9                   \tleaveq \n   27bfa:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qobject_output_push_obj(__int64 a1, __int64 a2, __int64 a3) {\n  __int64 result;\n  _QWORD *<span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = (_QWORD *)g_malloc0();\n  if (!*(_QWORD *)(a1 + Number))\n    __assert_fail(String, String, Number, String);\n  if (!a2)\n    __assert_fail(String, String, Number, String);\n  *<span class=\"supfact\">v5</span> = a2;\n  <span class=\"supfact\">v5</span>[Number] = a3;\n  <span class=\"supfact\">v5</span>[Number] = *(_QWORD *)(a1 + Number);\n  result = a1;\n  *(_QWORD *)(a1 + Number) = <span class=\"supfact\">v5</span>;\n  return result;\n}", "code_t": "void __cdecl qobject_output_push_obj(QObjectOutputVisitor_0 *qov,\n                                     QObject_0 *value, void *qapi) {\n  QStackEntry_0 *<span class=\"supfact\">e</span>;\n  <span class=\"supfact\">e</span> = (QStackEntry_0 *)g_malloc0();\n  if (!qov->root)\n    __assert_fail(String, String, Number, String);\n  if (!value)\n    __assert_fail(String, String, Number, String);\n  <span class=\"supfact\">e</span>->value = value;\n  <span class=\"supfact\">e</span>->qapi = qapi;\n  <span class=\"supfact\">e</span>->node.sle_next = qov->stack.slh_first;\n  qov->stack.slh_first = <span class=\"supfact\">e</span>;\n}", "var": [{"name": "v5", "type": "QDict_0 *", "ref_name": "e", "ref_type": "QStackEntry_0 *"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/64bc886c5ea6e01228b6da2d232fc8e810371c20ee53a23c5e949cdbf0fcdc3e", "path_in_repo": "XanClic/qemu//s390x-softmmu/target/s390x/translate.o", "objdump": "000000000000b801 <gen_helper_gvec_vflr64>:\n    b801:\t55                   \tpush   %rbp\n    b802:\t48 89 e5             \tmov    %rsp,%rbp\n    b805:\t48 83 ec 50          \tsub    $0x50,%rsp\n    b809:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    b80d:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    b811:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    b815:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n    b819:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    b820:\t00 00 \n    b822:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    b826:\t31 c0                \txor    %eax,%eax\n    b828:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    b82c:\t48 89 c7             \tmov    %rax,%rdi\n    b82f:\te8 c7 4c ff ff       \tcallq  4fb <tcgv_ptr_temp>\n    b834:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    b838:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    b83c:\t48 89 c7             \tmov    %rax,%rdi\n    b83f:\te8 b7 4c ff ff       \tcallq  4fb <tcgv_ptr_temp>\n    b844:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    b848:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    b84c:\t48 89 c7             \tmov    %rax,%rdi\n    b84f:\te8 a7 4c ff ff       \tcallq  4fb <tcgv_ptr_temp>\n    b854:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    b858:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    b85c:\t48 89 c7             \tmov    %rax,%rdi\n    b85f:\te8 26 4c ff ff       \tcallq  48a <tcgv_i32_temp>\n    b864:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    b868:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    b86c:\t48 89 c1             \tmov    %rax,%rcx\n    b86f:\tba 04 00 00 00       \tmov    $0x4,%edx\n    b874:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b879:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b880 <gen_helper_gvec_vflr64+0x7f>\n    b880:\t48 89 c7             \tmov    %rax,%rdi\n    b883:\te8 00 00 00 00       \tcallq  b888 <gen_helper_gvec_vflr64+0x87>\n    b888:\t90                   \tnop\n    b889:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    b88d:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    b894:\t00 00 \n    b896:\t74 05                \tje     b89d <gen_helper_gvec_vflr64+0x9c>\n    b898:\te8 00 00 00 00       \tcallq  b89d <gen_helper_gvec_vflr64+0x9c>\n    b89d:\tc9                   \tleaveq \n    b89e:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall gen_helper_gvec_vflr64(__int64 a1, __int64 a2,\n                                                   __int64 a3, __int64 a4) {\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  <span class=\"supfact\">v7</span>[Number] = tcgv_ptr_temp(a1);\n  <span class=\"supfact\">v7</span>[Number] = tcgv_ptr_temp(a2);\n  <span class=\"supfact\">v7</span>[Number] = tcgv_ptr_temp(a3);\n  <span class=\"supfact\">v7</span>[Number] = tcgv_i32_temp(a4);\n  tcg_gen_callN(&helper_gvec_vflr64, Number L, Number L, <span class=\"supfact\">v7</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v8</span>;\n}", "code_t": "void __cdecl gen_helper_gvec_vflr64(TCGv_ptr arg1, TCGv_ptr arg2, TCGv_ptr arg3,\n                                    TCGv_i32 arg4) {\n  TCGTemp_0 *<span class=\"supfact\">args</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  <span class=\"supfact\">args</span>[Number] = tcgv_ptr_temp(arg1);\n  <span class=\"supfact\">args</span>[Number] = tcgv_ptr_temp(arg2);\n  <span class=\"supfact\">args</span>[Number] = tcgv_ptr_temp(arg3);\n  <span class=\"supfact\">args</span>[Number] = tcgv_i32_temp(arg4);\n  tcg_gen_callN(&helper_gvec_vflr64, Number L, Number L, <span class=\"supfact\">args</span>);\n}", "var": [{"name": "v8", "type": "unsigned __int64", "ref_name": "v7", "ref_type": "unsigned __int64"}, {"name": "v7", "type": "TCGTemp_0 *[4]", "ref_name": "args", "ref_type": "TCGTemp_0 *[4]"}], "body_in_train": false}, {"repo_owner": "HarryWei", "repo_name": "qemu", "path": "HarryWei/qemu/a0b11f504fc279c6a69da5ccbf52c6589e2a120f4abfd137f0d90dff5e96248d", "path_in_repo": "HarryWei/qemu//hw/display/cirrus_vga.o", "objdump": "0000000000017aaf <cirrus_colorexpand_pattern_src_or_notdst_8>:\n   17aaf:\t55                   \tpush   %rbp\n   17ab0:\t48 89 e5             \tmov    %rsp,%rbp\n   17ab3:\t48 83 ec 70          \tsub    $0x70,%rsp\n   17ab7:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n   17abb:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n   17abf:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n   17ac3:\t89 4d a4             \tmov    %ecx,-0x5c(%rbp)\n   17ac6:\t44 89 45 a0          \tmov    %r8d,-0x60(%rbp)\n   17aca:\t44 89 4d 9c          \tmov    %r9d,-0x64(%rbp)\n   17ace:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n   17ad5:\t00 00 \n   17ad7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   17adb:\t31 c0                \txor    %eax,%eax\n   17add:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   17ae1:\t0f b6 80 e9 02 00 00 \tmovzbl 0x2e9(%rax),%eax\n   17ae8:\t0f b6 c0             \tmovzbl %al,%eax\n   17aeb:\t83 e0 07             \tand    $0x7,%eax\n   17aee:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n   17af1:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n   17af4:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n   17af7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   17afb:\t8b 80 64 0f 01 00    \tmov    0x10f64(%rax),%eax\n   17b01:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n   17b04:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   17b08:\t8b 80 60 0f 01 00    \tmov    0x10f60(%rax),%eax\n   17b0e:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n   17b11:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   17b15:\t8b 80 6c 0f 01 00    \tmov    0x10f6c(%rax),%eax\n   17b1b:\t83 e0 07             \tand    $0x7,%eax\n   17b1e:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n   17b21:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n   17b28:\te9 9c 00 00 00       \tjmpq   17bc9 <cirrus_colorexpand_pattern_src_or_notdst_8+0x11a>\n   17b2d:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   17b30:\t48 63 d0             \tmovslq %eax,%rdx\n   17b33:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   17b37:\t48 01 d0             \tadd    %rdx,%rax\n   17b3a:\t0f b6 00             \tmovzbl (%rax),%eax\n   17b3d:\t0f b6 c0             \tmovzbl %al,%eax\n   17b40:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   17b43:\tb8 07 00 00 00       \tmov    $0x7,%eax\n   17b48:\t2b 45 d8             \tsub    -0x28(%rbp),%eax\n   17b4b:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n   17b4e:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   17b51:\t48 63 d0             \tmovslq %eax,%rdx\n   17b54:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   17b58:\t48 01 d0             \tadd    %rdx,%rax\n   17b5b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17b5f:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   17b62:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n   17b65:\teb 41                \tjmp    17ba8 <cirrus_colorexpand_pattern_src_or_notdst_8+0xf9>\n   17b67:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   17b6a:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n   17b6d:\t89 c1                \tmov    %eax,%ecx\n   17b6f:\td3 ea                \tshr    %cl,%edx\n   17b71:\t89 d0                \tmov    %edx,%eax\n   17b73:\t83 e0 01             \tand    $0x1,%eax\n   17b76:\t89 c0                \tmov    %eax,%eax\n   17b78:\t8b 44 85 f0          \tmov    -0x10(%rbp,%rax,4),%eax\n   17b7c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   17b7f:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   17b82:\t0f b6 d0             \tmovzbl %al,%edx\n   17b85:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   17b89:\t89 d6                \tmov    %edx,%esi\n   17b8b:\t48 89 c7             \tmov    %rax,%rdi\n   17b8e:\te8 bf f4 ff ff       \tcallq  17052 <rop_8_src_or_notdst>\n   17b93:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n   17b98:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   17b9b:\t83 e8 01             \tsub    $0x1,%eax\n   17b9e:\t83 e0 07             \tand    $0x7,%eax\n   17ba1:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n   17ba4:\t83 45 c8 01          \taddl   $0x1,-0x38(%rbp)\n   17ba8:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   17bab:\t3b 45 9c             \tcmp    -0x64(%rbp),%eax\n   17bae:\t7c b7                \tjl     17b67 <cirrus_colorexpand_pattern_src_or_notdst_8+0xb8>\n   17bb0:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   17bb3:\t83 c0 01             \tadd    $0x1,%eax\n   17bb6:\t83 e0 07             \tand    $0x7,%eax\n   17bb9:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n   17bbc:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n   17bbf:\t48 98                \tcltq   \n   17bc1:\t48 01 45 b0          \tadd    %rax,-0x50(%rbp)\n   17bc5:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   17bc9:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   17bcc:\t3b 45 10             \tcmp    0x10(%rbp),%eax\n   17bcf:\t0f 8c 58 ff ff ff    \tjl     17b2d <cirrus_colorexpand_pattern_src_or_notdst_8+0x7e>\n   17bd5:\t90                   \tnop\n   17bd6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   17bda:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n   17be1:\t00 00 \n   17be3:\t74 05                \tje     17bea <cirrus_colorexpand_pattern_src_or_notdst_8+0x13b>\n   17be5:\te8 00 00 00 00       \tcallq  17bea <cirrus_colorexpand_pattern_src_or_notdst_8+0x13b>\n   17bea:\tc9                   \tleaveq \n   17beb:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall cirrus_colorexpand_pattern_src_or_notdst_8(\n    __int64 a1, __int64 a2, __int64 a3, int a4, __int64 a5, int a6,\n    int <span class=\"supfact\">a7</span>) {\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  char <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>;\n  unsigned __int8 <span class=\"supfact\">v16</span>;\n  unsigned int <span class=\"supfact\">v17</span>;\n  _BYTE *<span class=\"supfact\">v18</span>;\n  int <span class=\"supfact\">v19</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v20</span>;\n  <span class=\"supfact\">v20</span> = __readfsqword(Number);\n  <span class=\"supfact\">v16</span> = *(_BYTE *)(a1 + Number) & Number;\n  <span class=\"supfact\">v19</span>[Number] = *(_DWORD *)(a1 + Number);\n  <span class=\"supfact\">v19</span>[Number] = *(_DWORD *)(a1 + Number);\n  <span class=\"supfact\">v15</span> = *(_DWORD *)(a1 + Number) & Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">a7</span>;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v17</span> = *(unsigned __int8 *)(<span class=\"supfact\">v15</span> + a3);\n    <span class=\"supfact\">v14</span> = Number - <span class=\"supfact\">v16</span>;\n    <span class=\"supfact\">v18</span> = (_BYTE *)(<span class=\"supfact\">v16</span> + a2);\n    for (<span class=\"supfact\">j</span> = <span class=\"supfact\">v16</span>; <span class=\"supfact\">j</span> < a6;\n         ++<span class=\"supfact\">j</span>) {\n      rop_8_src_or_notdst(\n          <span class=\"supfact\">v18</span>++,\n          <span class=\"supfact\">v19</span>[(<span class=\"supfact\">v17</span> >> <span class=\"supfact\">v14</span>) &\n                              Number]);\n      <span class=\"supfact\">v14</span> = (<span class=\"supfact\">v14</span> - Number) & Number;\n    }\n    <span class=\"supfact\">v15</span> = ((_BYTE)<span class=\"supfact\">v15</span> + Number) & Number;\n    a2 += a4;\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v20</span>;\n}", "code_t": "void __cdecl cirrus_colorexpand_pattern_src_or_notdst_8(\n    CirrusVGAState_0 *s, uint8_t *dst, const uint8_t *src, int dstpitch,\n    int srcpitch, int bltwidth, int bltheight) {\n  int <span class=\"supfact\">x</span>;\n  int <span class=\"supfact\">y</span>;\n  char <span class=\"supfact\">bitpos</span>;\n  int <span class=\"supfact\">pattern_y</span>;\n  unsigned __int8 <span class=\"supfact\">srcskipleft</span>;\n  unsigned int <span class=\"supfact\">bits</span>;\n  uint8_t *<span class=\"supfact\">d</span>;\n  uint32_t <span class=\"supfact\">colors</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v19</span>;\n  <span class=\"supfact\">v19</span> = __readfsqword(Number);\n  <span class=\"supfact\">srcskipleft</span> = s->vga.gr[Number] & Number;\n  <span class=\"supfact\">colors</span>[Number] = s->cirrus_blt_bgcol;\n  <span class=\"supfact\">colors</span>[Number] = s->cirrus_blt_fgcol;\n  <span class=\"supfact\">pattern_y</span> = s->cirrus_blt_srcaddr & Number;\n  for (<span class=\"supfact\">y</span> = Number; <span class=\"supfact\">y</span> < bltheight;\n       ++<span class=\"supfact\">y</span>) {\n    <span class=\"supfact\">bits</span> = src[<span class=\"supfact\">pattern_y</span>];\n    <span class=\"supfact\">bitpos</span> = Number - <span class=\"supfact\">srcskipleft</span>;\n    <span class=\"supfact\">d</span> = &dst[<span class=\"supfact\">srcskipleft</span>];\n    for (<span class=\"supfact\">x</span> = <span class=\"supfact\">srcskipleft</span>;\n         <span class=\"supfact\">x</span> < bltwidth; ++<span class=\"supfact\">x</span>) {\n      rop_8_src_or_notdst(<span class=\"supfact\">d</span>++,\n                          <span class=\"supfact\">colors</span>[(<span class=\"supfact\">bits</span> >>\n                                                  <span class=\"supfact\">bitpos</span>) &\n                                                 Number]);\n      <span class=\"supfact\">bitpos</span> = (<span class=\"supfact\">bitpos</span> - Number) & Number;\n    }\n    <span class=\"supfact\">pattern_y</span> =\n        ((_BYTE)<span class=\"supfact\">pattern_y</span> + Number) & Number;\n    dst += dstpitch;\n  }\n}", "var": [{"name": "v20", "type": "unsigned __int64", "ref_name": "v19", "ref_type": "unsigned __int64"}, {"name": "v19", "type": "uint32_t[2]", "ref_name": "colors", "ref_type": "uint32_t[2]"}, {"name": "v18", "type": "uint8_t *", "ref_name": "d", "ref_type": "uint8_t *"}, {"name": "v17", "type": "unsigned int", "ref_name": "bits", "ref_type": "unsigned int"}, {"name": "v16", "type": "unsigned __int8", "ref_name": "srcskipleft", "ref_type": "unsigned __int8"}, {"name": "v15", "type": "int", "ref_name": "pattern_y", "ref_type": "int"}, {"name": "v14", "type": "char", "ref_name": "bitpos", "ref_type": "char"}, {"name": "i", "type": "int", "ref_name": "y", "ref_type": "int"}, {"name": "j", "type": "int", "ref_name": "x", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "leon-anavi", "repo_name": "xmame-arm", "path": "leon-anavi/xmame-arm/98fac25711762511a164ae8f53a7e3c2411650f1546fb577ca3cde964af74fec", "path_in_repo": "leon-anavi/xmame-arm//xmame.obj/sound/discrete.o", "objdump": "0000000000005348 <dst_ramp_step>:\n    5348:\t55                   \tpush   %rbp\n    5349:\t48 89 e5             \tmov    %rsp,%rbp\n    534c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    5350:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5354:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    535b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    535f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5363:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    5367:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n    536b:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    536f:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n    5373:\t7a 0e                \tjp     5383 <dst_ramp_step+0x3b>\n    5375:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    5379:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n    537d:\t0f 84 86 01 00 00    \tje     5509 <dst_ramp_step+0x1c1>\n    5383:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5387:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    538a:\t85 c0                \ttest   %eax,%eax\n    538c:\t75 20                \tjne    53ae <dst_ramp_step+0x66>\n    538e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5392:\tc7 40 0c 01 00 00 00 \tmovl   $0x1,0xc(%rax)\n    5399:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    539d:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    53a1:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n    53a5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    53a9:\tf2 0f 11 40 08       \tmovsd  %xmm0,0x8(%rax)\n    53ae:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    53b2:\t8b 40 08             \tmov    0x8(%rax),%eax\n    53b5:\t85 c0                \ttest   %eax,%eax\n    53b7:\t74 29                \tje     53e2 <dst_ramp_step+0x9a>\n    53b9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    53bd:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    53c1:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n    53c5:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    53c9:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n    53cd:\t0f 9a c0             \tsetp   %al\n    53d0:\tba 01 00 00 00       \tmov    $0x1,%edx\n    53d5:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    53d9:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n    53dd:\t0f 45 c2             \tcmovne %edx,%eax\n    53e0:\teb 27                \tjmp    5409 <dst_ramp_step+0xc1>\n    53e2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    53e6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    53ea:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n    53ee:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    53f2:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n    53f6:\t0f 9b c0             \tsetnp  %al\n    53f9:\tba 00 00 00 00       \tmov    $0x0,%edx\n    53fe:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n    5402:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n    5406:\t0f 45 c2             \tcmovne %edx,%eax\n    5409:\t84 c0                \ttest   %al,%al\n    540b:\t74 20                \tje     542d <dst_ramp_step+0xe5>\n    540d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5411:\tf2 0f 10 48 08       \tmovsd  0x8(%rax),%xmm1\n    5416:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    541a:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n    541e:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n    5422:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5426:\tf2 0f 11 40 08       \tmovsd  %xmm0,0x8(%rax)\n    542b:\teb 1e                \tjmp    544b <dst_ramp_step+0x103>\n    542d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5431:\tf2 0f 10 40 08       \tmovsd  0x8(%rax),%xmm0\n    5436:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    543a:\tf2 0f 10 08          \tmovsd  (%rax),%xmm1\n    543e:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n    5442:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5446:\tf2 0f 11 40 08       \tmovsd  %xmm0,0x8(%rax)\n    544b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    544f:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5452:\t85 c0                \ttest   %eax,%eax\n    5454:\t74 1e                \tje     5474 <dst_ramp_step+0x12c>\n    5456:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    545a:\tf2 0f 10 48 08       \tmovsd  0x8(%rax),%xmm1\n    545f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5463:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    5467:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n    546b:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    546f:\t0f 97 c0             \tseta   %al\n    5472:\teb 1c                \tjmp    5490 <dst_ramp_step+0x148>\n    5474:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5478:\tf2 0f 10 40 08       \tmovsd  0x8(%rax),%xmm0\n    547d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5481:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    5485:\tf2 0f 10 08          \tmovsd  (%rax),%xmm1\n    5489:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    548d:\t0f 97 c0             \tseta   %al\n    5490:\t84 c0                \ttest   %al,%al\n    5492:\t74 15                \tje     54a9 <dst_ramp_step+0x161>\n    5494:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5498:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    549c:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n    54a0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    54a4:\tf2 0f 11 40 08       \tmovsd  %xmm0,0x8(%rax)\n    54a9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    54ad:\t8b 40 08             \tmov    0x8(%rax),%eax\n    54b0:\t85 c0                \ttest   %eax,%eax\n    54b2:\t74 1e                \tje     54d2 <dst_ramp_step+0x18a>\n    54b4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    54b8:\tf2 0f 10 40 08       \tmovsd  0x8(%rax),%xmm0\n    54bd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    54c1:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    54c5:\tf2 0f 10 08          \tmovsd  (%rax),%xmm1\n    54c9:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    54cd:\t0f 97 c0             \tseta   %al\n    54d0:\teb 1c                \tjmp    54ee <dst_ramp_step+0x1a6>\n    54d2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    54d6:\tf2 0f 10 48 08       \tmovsd  0x8(%rax),%xmm1\n    54db:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    54df:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    54e3:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n    54e7:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    54eb:\t0f 97 c0             \tseta   %al\n    54ee:\t84 c0                \ttest   %al,%al\n    54f0:\t74 37                \tje     5529 <dst_ramp_step+0x1e1>\n    54f2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    54f6:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    54fa:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n    54fe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5502:\tf2 0f 11 40 08       \tmovsd  %xmm0,0x8(%rax)\n    5507:\teb 20                \tjmp    5529 <dst_ramp_step+0x1e1>\n    5509:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    550d:\tc7 40 0c 00 00 00 00 \tmovl   $0x0,0xc(%rax)\n    5514:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5518:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    551c:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n    5520:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5524:\tf2 0f 11 40 08       \tmovsd  %xmm0,0x8(%rax)\n    5529:\t90                   \tnop\n    552a:\t5d                   \tpop    %rbp\n    552b:\tc3                   \tretq   ", "code_s": "bool __fastcall dst_ramp_step(__int64 a1) {\n  bool v1;\n  double v2;\n  double v3;\n  double v4;\n  double v5;\n  double v6;\n  bool result;\n  __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = *(_QWORD *)(a1 + Number);\n  if (**(double **)(a1 + Number) == Number) {\n    *(_DWORD *)(<span class=\"supfact\">v8</span> + Number) = Number;\n    result = a1;\n    *(_QWORD *)(a1 + Number) = **(_QWORD **)(a1 + Number);\n  } else {\n    if (!*(_DWORD *)(<span class=\"supfact\">v8</span> + Number)) {\n      *(_DWORD *)(<span class=\"supfact\">v8</span> + Number) = Number;\n      *(_QWORD *)(a1 + Number) = **(_QWORD **)(a1 + Number);\n    }\n    if (*(_DWORD *)(<span class=\"supfact\">v8</span> + Number))\n      v1 = **(double **)(a1 + Number) != Number;\n    else\n      v1 = **(double **)(a1 + Number) == Number;\n    if (v1)\n      v2 = *(double *)<span class=\"supfact\">v8</span> + *(double *)(a1 + Number);\n    else\n      v2 = *(double *)(a1 + Number) - *(double *)<span class=\"supfact\">v8</span>;\n    *(double *)(a1 + Number) = v2;\n    if (*(_DWORD *)(<span class=\"supfact\">v8</span> + Number)) {\n      v3 = *(double *)(a1 + Number);\n      v4 = **(double **)(a1 + Number);\n    } else {\n      v4 = *(double *)(a1 + Number);\n      v3 = **(double **)(a1 + Number);\n    }\n    if (v4 > v3)\n      *(_QWORD *)(a1 + Number) = **(_QWORD **)(a1 + Number);\n    if (*(_DWORD *)(<span class=\"supfact\">v8</span> + Number)) {\n      v5 = *(double *)(a1 + Number);\n      v6 = **(double **)(a1 + Number);\n    } else {\n      v6 = *(double *)(a1 + Number);\n      v5 = **(double **)(a1 + Number);\n    }\n    result = v5 > v6;\n    if (v5 > v6) {\n      result = a1;\n      *(_QWORD *)(a1 + Number) = **(_QWORD **)(a1 + Number);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl dst_ramp_step(node_description *node) {\n  bool v1;\n  double v2;\n  double v3;\n  double v4;\n  double v5;\n  double v6;\n  dss_ramp_context *<span class=\"supfact\">context</span>;\n  <span class=\"supfact\">context</span> = (dss_ramp_context *)node-><span class=\"supfact\">context</span>;\n  if (*node->input[Number] == Number) {\n    <span class=\"supfact\">context</span>->last_en = Number;\n    node->output = *node->input[Number];\n  } else {\n    if (!<span class=\"supfact\">context</span>->last_en) {\n      <span class=\"supfact\">context</span>->last_en = Number;\n      node->output = *node->input[Number];\n    }\n    if (<span class=\"supfact\">context</span>->dir)\n      v1 = *node->input[Number] != Number;\n    else\n      v1 = *node->input[Number] == Number;\n    if (v1)\n      v2 = <span class=\"supfact\">context</span>->step + node->output;\n    else\n      v2 = node->output - <span class=\"supfact\">context</span>->step;\n    node->output = v2;\n    if (<span class=\"supfact\">context</span>->dir) {\n      v3 = node->output;\n      v4 = *node->input[Number];\n    } else {\n      v4 = node->output;\n      v3 = *node->input[Number];\n    }\n    if (v4 > v3)\n      node->output = *node->input[Number];\n    if (<span class=\"supfact\">context</span>->dir) {\n      v5 = node->output;\n      v6 = *node->input[Number];\n    } else {\n      v6 = node->output;\n      v5 = *node->input[Number];\n    }\n    if (v5 > v6)\n      node->output = *node->input[Number];\n  }\n}", "var": [{"name": "v8", "type": "double", "ref_name": "context", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "leon-anavi", "repo_name": "xmame-arm", "path": "leon-anavi/xmame-arm/8cb034d180404708f3ca1568359e5405045a4269e2bae325a4e354a94d1b1d99", "path_in_repo": "leon-anavi/xmame-arm//xmame.obj/vidhrdw/genesis.o", "objdump": "000000000000086e <update_system18_vdp>:\n     86e:\t55                   \tpush   %rbp\n     86f:\t48 89 e5             \tmov    %rsp,%rbp\n     872:\t48 83 ec 20          \tsub    $0x20,%rsp\n     876:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     87a:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     87e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     882:\t8b 40 08             \tmov    0x8(%rax),%eax\n     885:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     888:\teb 2e                \tjmp    8b8 <update_system18_vdp+0x4a>\n     88a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     88e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     892:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     895:\t48 63 d2             \tmovslq %edx,%rdx\n     898:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     89c:\t48 01 d0             \tadd    %rdx,%rax\n     89f:\t48 8b 00             \tmov    (%rax),%rax\n     8a2:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n     8a5:\tba ff ff 00 00       \tmov    $0xffff,%edx\n     8aa:\t89 ce                \tmov    %ecx,%esi\n     8ac:\t48 89 c7             \tmov    %rax,%rdi\n     8af:\te8 c0 0c 00 00       \tcallq  1574 <drawline>\n     8b4:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     8b8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     8bc:\t8b 40 0c             \tmov    0xc(%rax),%eax\n     8bf:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n     8c2:\t7e c6                \tjle    88a <update_system18_vdp+0x1c>\n     8c4:\t90                   \tnop\n     8c5:\t90                   \tnop\n     8c6:\tc9                   \tleaveq \n     8c7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall update_system18_vdp(__int64 a1, __int64 a2) {\n  __int64 result;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = *(_DWORD *)(a2 + Number);; ++<span class=\"supfact\">i</span>) {\n    result = *(unsigned int *)(a2 + Number);\n    if (<span class=\"supfact\">i</span> > (int)result)\n      break;\n    drawline(\n        *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + *(_QWORD *)(a1 + Number)),\n        (unsigned int)<span class=\"supfact\">i</span>, Number);\n  }\n  return result;\n}", "code_t": "void __cdecl update_system18_vdp(mame_bitmap *bitmap,\n                                 const rectangle *cliprect) {\n  int <span class=\"supfact\">y</span>;\n  for (<span class=\"supfact\">y</span> = cliprect->min_y;\n       <span class=\"supfact\">y</span> <= cliprect->max_y; ++<span class=\"supfact\">y</span>)\n    drawline((UINT16 *)bitmap->line[<span class=\"supfact\">y</span>], <span class=\"supfact\">y</span>,\n             Number);\n}", "var": [{"name": "i", "type": "int", "ref_name": "y", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "loskutov", "repo_name": "OS-homeworks", "path": "loskutov/OS-homeworks/a7a26dec5ac01e3997b32d3c149915808c0c807cd00cfe74d70f1b9d128b21ca", "path_in_repo": "loskutov/OS-homeworks/lib/libbufio.so", "objdump": "000000000000153a <buf_write>:\n    153a:\t55                   \tpush   %rbp\n    153b:\t48 89 e5             \tmov    %rsp,%rbp\n    153e:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1542:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n    1545:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    1549:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    154d:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    1551:\t48 8d 3d a8 0a 00 00 \tlea    0xaa8(%rip),%rdi        # 2000 <_fini+0x968>\n    1558:\te8 f3 fa ff ff       \tcallq  1050 <puts@plt>\n    155d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1561:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    1564:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    156b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    156f:\t48 8b 10             \tmov    (%rax),%rdx\n    1572:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1576:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    157a:\t48 29 c2             \tsub    %rax,%rdx\n    157d:\t48 89 d0             \tmov    %rdx,%rax\n    1580:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n    1584:\t0f 86 b3 00 00 00    \tjbe    163d <buf_write+0x103>\n    158a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    158e:\t48 8b 10             \tmov    (%rax),%rdx\n    1591:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1595:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1599:\t48 29 c2             \tsub    %rax,%rdx\n    159c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    159f:\t48 63 c8             \tmovslq %eax,%rcx\n    15a2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    15a6:\t48 01 c1             \tadd    %rax,%rcx\n    15a9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    15ad:\t48 8b 70 10          \tmov    0x10(%rax),%rsi\n    15b1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    15b5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    15b9:\t48 01 f0             \tadd    %rsi,%rax\n    15bc:\t48 89 ce             \tmov    %rcx,%rsi\n    15bf:\t48 89 c7             \tmov    %rax,%rdi\n    15c2:\te8 c9 fa ff ff       \tcallq  1090 <memcpy@plt>\n    15c7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    15cb:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    15cf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    15d3:\t48 8b 00             \tmov    (%rax),%rax\n    15d6:\t48 29 c2             \tsub    %rax,%rdx\n    15d9:\t48 89 d0             \tmov    %rdx,%rax\n    15dc:\t48 01 45 d0          \tadd    %rax,-0x30(%rbp)\n    15e0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    15e4:\t48 8b 00             \tmov    (%rax),%rax\n    15e7:\t89 c2                \tmov    %eax,%edx\n    15e9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    15ed:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    15f1:\t29 c2                \tsub    %eax,%edx\n    15f3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    15f6:\t01 d0                \tadd    %edx,%eax\n    15f8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    15fb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    15ff:\t48 8b 10             \tmov    (%rax),%rdx\n    1602:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1606:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    160a:\t48 8d 3d fb 09 00 00 \tlea    0x9fb(%rip),%rdi        # 200c <_fini+0x974>\n    1611:\te8 3a fa ff ff       \tcallq  1050 <puts@plt>\n    1616:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    161a:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    161d:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1622:\t48 89 ce             \tmov    %rcx,%rsi\n    1625:\t89 c7                \tmov    %eax,%edi\n    1627:\te8 44 fa ff ff       \tcallq  1070 <buf_flush@plt>\n    162c:\t48 8d 3d e5 09 00 00 \tlea    0x9e5(%rip),%rdi        # 2018 <_fini+0x980>\n    1633:\te8 18 fa ff ff       \tcallq  1050 <puts@plt>\n    1638:\te9 2e ff ff ff       \tjmpq   156b <buf_write+0x31>\n    163d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1640:\t48 63 d0             \tmovslq %eax,%rdx\n    1643:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1647:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n    164b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    164f:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1653:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1657:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    165b:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n    165f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1663:\t48 89 c2             \tmov    %rax,%rdx\n    1666:\t48 89 cf             \tmov    %rcx,%rdi\n    1669:\te8 22 fa ff ff       \tcallq  1090 <memcpy@plt>\n    166e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1672:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    1676:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    167a:\t48 01 c2             \tadd    %rax,%rdx\n    167d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1681:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    1685:\t48 8d 3d 92 09 00 00 \tlea    0x992(%rip),%rdi        # 201e <_fini+0x986>\n    168c:\te8 bf f9 ff ff       \tcallq  1050 <puts@plt>\n    1691:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    1694:\t48 98                \tcltq   \n    1696:\tc9                   \tleaveq \n    1697:\tc3                   \tretq   ", "code_s": "__int64 __fastcall buf_write(unsigned int a1, _QWORD *a2, __int64 a3,\n                             size_t a4) {\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  puts(String);\n  <span class=\"supfact\">v7</span> = a4;\n  <span class=\"supfact\">v8</span> = Number;\n  while (a4 > *a2 - a2[Number]) {\n    memcpy((void *)(a2[Number] + a2[Number]),\n           (const void *)(a3 + <span class=\"supfact\">v8</span>), *a2 - a2[Number]);\n    a4 += a2[Number] - *a2;\n    <span class=\"supfact\">v8</span> += *a2 - a2[Number];\n    a2[Number] = *a2;\n    puts(String);\n    buf_flush(a1, a2, Number L);\n    puts(String);\n  }\n  memcpy((void *)(a2[Number] + a2[Number]),\n         (const void *)(<span class=\"supfact\">v8</span> + a3), a4);\n  a2[Number] += a4;\n  puts(String);\n  return <span class=\"supfact\">v7</span>;\n}", "code_t": "ssize_t __cdecl buf_write(int fd, buf_t *buf, char *src, size_t len) {\n  int <span class=\"supfact\">old_len</span>;\n  int <span class=\"supfact\">written</span>;\n  puts(String);\n  <span class=\"supfact\">old_len</span> = len;\n  <span class=\"supfact\">written</span> = Number;\n  while (len > buf->capacity - buf->size) {\n    memcpy(&buf->data[buf->size], &src[<span class=\"supfact\">written</span>],\n           buf->capacity - buf->size);\n    len += buf->size - buf->capacity;\n    <span class=\"supfact\">written</span> += buf->capacity - buf->size;\n    buf->size = buf->capacity;\n    puts(String);\n    buf_flush(fd, buf, Number);\n    puts(String);\n  }\n  memcpy(&buf->data[buf->size], &src[<span class=\"supfact\">written</span>], len);\n  buf->size += len;\n  puts(String);\n  return <span class=\"supfact\">old_len</span>;\n}", "var": [{"name": "v8", "type": "int", "ref_name": "written", "ref_type": "int"}, {"name": "v7", "type": "int", "ref_name": "old_len", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "hanxi", "repo_name": "HXGame", "path": "hanxi/HXGame/1b00fb7ee1b27133f1c82fdecb2cb98c8fb1032bea83e46672c679deb543d0c2", "path_in_repo": "hanxi/HXGame/libs/cocos2dx/proj.linux/obj/release/cocoa/CCDataVisitor.o", "objdump": "0000000000000010 <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev>:\n      10:\t41 55                \tpush   %r13\n      12:\t41 54                \tpush   %r12\n      14:\t49 89 fc             \tmov    %rdi,%r12\n      17:\t48 83 c7 10          \tadd    $0x10,%rdi\n      1b:\t55                   \tpush   %rbp\n      1c:\t48 83 ec 10          \tsub    $0x10,%rsp\n      20:\t49 89 3c 24          \tmov    %rdi,(%r12)\n      24:\t48 8b 6e 30          \tmov    0x30(%rsi),%rbp\n      28:\t4c 8b 6e 38          \tmov    0x38(%rsi),%r13\n      2c:\t48 89 e8             \tmov    %rbp,%rax\n      2f:\t4c 01 e8             \tadd    %r13,%rax\n      32:\t74 05                \tje     39 <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0x29>\n      34:\t48 85 ed             \ttest   %rbp,%rbp\n      37:\t74 7d                \tje     b6 <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0xa6>\n      39:\t4c 89 6c 24 08       \tmov    %r13,0x8(%rsp)\n      3e:\t49 83 fd 0f          \tcmp    $0xf,%r13\n      42:\t77 3c                \tja     80 <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0x70>\n      44:\t49 83 fd 01          \tcmp    $0x1,%r13\n      48:\t75 26                \tjne    70 <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0x60>\n      4a:\t0f b6 45 00          \tmovzbl 0x0(%rbp),%eax\n      4e:\t41 88 44 24 10       \tmov    %al,0x10(%r12)\n      53:\t4d 89 6c 24 08       \tmov    %r13,0x8(%r12)\n      58:\t4c 89 e0             \tmov    %r12,%rax\n      5b:\t42 c6 04 2f 00       \tmovb   $0x0,(%rdi,%r13,1)\n      60:\t48 83 c4 10          \tadd    $0x10,%rsp\n      64:\t5d                   \tpop    %rbp\n      65:\t41 5c                \tpop    %r12\n      67:\t41 5d                \tpop    %r13\n      69:\tc3                   \tretq   \n      6a:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n      70:\t4d 85 ed             \ttest   %r13,%r13\n      73:\t74 de                \tje     53 <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0x43>\n      75:\teb 29                \tjmp    a0 <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0x90>\n      77:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n      7e:\t00 00 \n      80:\t4c 89 e7             \tmov    %r12,%rdi\n      83:\t48 8d 74 24 08       \tlea    0x8(%rsp),%rsi\n      88:\t31 d2                \txor    %edx,%edx\n      8a:\te8 00 00 00 00       \tcallq  8f <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0x7f>\n      8f:\t49 89 04 24          \tmov    %rax,(%r12)\n      93:\t48 89 c7             \tmov    %rax,%rdi\n      96:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n      9b:\t49 89 44 24 10       \tmov    %rax,0x10(%r12)\n      a0:\t4c 89 ea             \tmov    %r13,%rdx\n      a3:\t48 89 ee             \tmov    %rbp,%rsi\n      a6:\te8 00 00 00 00       \tcallq  ab <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0x9b>\n      ab:\t4c 8b 6c 24 08       \tmov    0x8(%rsp),%r13\n      b0:\t49 8b 3c 24          \tmov    (%r12),%rdi\n      b4:\teb 9d                \tjmp    53 <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0x43>\n      b6:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # bd <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0xad>\n      bd:\te8 00 00 00 00       \tcallq  c2 <_ZN7cocos2d13PrettyPrinter9getResultB5cxx11Ev+0xb2>\n      c2:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n      c9:\t00 00 00 00 \n      cd:\t0f 1f 00             \tnopl   (%rax)", "code_s": "__int64 *__fastcall cocos2d PrettyPrinter getResult[abi:cxx11](__int64 *a1,\n                                                               __int64 a2) {\n  void *v3;\n  _BYTE *v4;\n  size_t v5;\n  __int64 *result;\n  __int64 v7;\n  size_t <span class=\"supfact\">v8</span>[Number];\n  v3 = a1 + Number;\n  *a1 = (__int64)v3;\n  v4 = *(_BYTE **)(a2 + Number);\n  v5 = *(_QWORD *)(a2 + Number);\n  if (&v4[v5] && !v4)\n    std __throw_logic_error(String);\n  <span class=\"supfact\">v8</span>[Number] = *(_QWORD *)(a2 + Number);\n  if (v5 > Number) {\n    v7 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        _M_create(a1, <span class=\"supfact\">v8</span>, Number L);\n    *a1 = v7;\n    v3 = (void *)v7;\n    a1[Number] = <span class=\"supfact\">v8</span>[Number];\n    goto LABEL_10;\n  }\n  if (v5 != Number) {\n    if (!v5)\n      goto LABEL_6;\n  LABEL_10:\n    memcpy(v3, v4, v5);\n    v5 = <span class=\"supfact\">v8</span>[Number];\n    v3 = (void *)*a1;\n    goto LABEL_6;\n  }\n  *((_BYTE *)a1 + Number) = *v4;\nLABEL_6:\n  a1[Number] = v5;\n  result = a1;\n  *((_BYTE *)v3 + v5) = Number;\n  return result;\n}", "code_t": "__int64 *__fastcall cocos2d PrettyPrinter getResult[abi:cxx11](__int64 *a1,\n                                                               __int64 a2) {\n  void *v3;\n  _BYTE *v4;\n  size_t v5;\n  __int64 *result;\n  __int64 v7;\n  size_t <span class=\"supfact\">v8</span>[Number];\n  v3 = a1 + Number;\n  *a1 = (__int64)v3;\n  v4 = *(_BYTE **)(a2 + Number);\n  v5 = *(_QWORD *)(a2 + Number);\n  if (&v4[v5] && !v4)\n    std __throw_logic_error(String);\n  <span class=\"supfact\">v8</span>[Number] = *(_QWORD *)(a2 + Number);\n  if (v5 > Number) {\n    v7 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        _M_create(a1, <span class=\"supfact\">v8</span>, Number L);\n    *a1 = v7;\n    v3 = (void *)v7;\n    a1[Number] = <span class=\"supfact\">v8</span>[Number];\n    goto LABEL_10;\n  }\n  if (v5 != Number) {\n    if (!v5)\n      goto LABEL_6;\n  LABEL_10:\n    memcpy(v3, v4, v5);\n    v5 = <span class=\"supfact\">v8</span>[Number];\n    v3 = (void *)*a1;\n    goto LABEL_6;\n  }\n  *((_BYTE *)a1 + Number) = *v4;\nLABEL_6:\n  a1[Number] = v5;\n  result = a1;\n  *((_BYTE *)v3 + v5) = Number;\n  return result;\n}", "var": [{"name": "v8", "type": "size_t[4]", "ref_name": "v8", "ref_type": "size_t[4]"}], "body_in_train": false}, {"repo_owner": "Jeongseob", "repo_name": "xen-coboost-sched", "path": "Jeongseob/xen-coboost-sched/bbe464fda0bf64c61cc7e6c1ffbb30a1ab44accad93a36134801103a31131baf", "path_in_repo": "Jeongseob/xen-coboost-sched/tools/qemu-xen/audio/wavaudio.o", "objdump": "000000000000027d <wav_run_out>:\n 27d:\t55                   \tpush   %rbp\n 27e:\t48 89 e5             \tmov    %rsp,%rbp\n 281:\t48 83 ec 70          \tsub    $0x70,%rsp\n 285:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n 289:\t89 75 94             \tmov    %esi,-0x6c(%rbp)\n 28c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 293:\t00 00 \n 295:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 299:\t31 c0                \txor    %eax,%eax\n 29b:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 29f:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 2a3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2aa <wav_run_out+0x2d>\n 2aa:\t48 89 c7             \tmov    %rax,%rdi\n 2ad:\te8 00 00 00 00       \tcallq  2b2 <wav_run_out+0x35>\n 2b2:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 2b6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 2ba:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n 2c1:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 2c5:\t48 29 c2             \tsub    %rax,%rdx\n 2c8:\t48 89 d0             \tmov    %rdx,%rax\n 2cb:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 2cf:\te8 da fd ff ff       \tcallq  ae <get_ticks_per_sec>\n 2d4:\t89 c2                \tmov    %eax,%edx\n 2d6:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 2da:\t8b 40 24             \tmov    0x24(%rax),%eax\n 2dd:\t89 c1                \tmov    %eax,%ecx\n 2df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 2e3:\t89 ce                \tmov    %ecx,%esi\n 2e5:\t48 89 c7             \tmov    %rax,%rdi\n 2e8:\te8 13 fd ff ff       \tcallq  0 <muldiv64>\n 2ed:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 2f1:\tb8 00 00 00 80       \tmov    $0x80000000,%eax\n 2f6:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n 2fa:\t7c 17                \tjl     313 <wav_run_out+0x96>\n 2fc:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 300:\t8b 40 20             \tmov    0x20(%rax),%eax\n 303:\tba ff ff ff 7f       \tmov    $0x7fffffff,%edx\n 308:\t89 c1                \tmov    %eax,%ecx\n 30a:\td3 fa                \tsar    %cl,%edx\n 30c:\t89 d0                \tmov    %edx,%eax\n 30e:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n 311:\teb 16                \tjmp    329 <wav_run_out+0xac>\n 313:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 317:\t8b 40 20             \tmov    0x20(%rax),%eax\n 31a:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 31e:\t89 c1                \tmov    %eax,%ecx\n 320:\t48 d3 fa             \tsar    %cl,%rdx\n 323:\t48 89 d0             \tmov    %rdx,%rax\n 326:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n 329:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 32d:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 331:\t48 89 90 88 00 00 00 \tmov    %rdx,0x88(%rax)\n 338:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n 33b:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n 33e:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n 341:\t89 45 b0             \tmov    %eax,-0x50(%rbp)\n 344:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n 347:\t39 45 ac             \tcmp    %eax,-0x54(%rbp)\n 34a:\t0f 4e 45 ac          \tcmovle -0x54(%rbp),%eax\n 34e:\t89 45 b4             \tmov    %eax,-0x4c(%rbp)\n 351:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n 354:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n 357:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 35b:\t8b 40 38             \tmov    0x38(%rax),%eax\n 35e:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n 361:\te9 24 01 00 00       \tjmpq   48a <wav_run_out+0x20d>\n 366:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 36a:\t8b 40 50             \tmov    0x50(%rax),%eax\n 36d:\t2b 45 a4             \tsub    -0x5c(%rbp),%eax\n 370:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n 373:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n 376:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n 379:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n 37c:\t89 45 c0             \tmov    %eax,-0x40(%rbp)\n 37f:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n 382:\t39 45 bc             \tcmp    %eax,-0x44(%rbp)\n 385:\t0f 4e 45 bc          \tcmovle -0x44(%rbp),%eax\n 389:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n 38c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 390:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n 394:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n 397:\t48 63 d2             \tmovslq %edx,%rdx\n 39a:\t48 c1 e2 04          \tshl    $0x4,%rdx\n 39e:\t48 01 d0             \tadd    %rdx,%rax\n 3a1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 3a5:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 3a9:\t8b 40 20             \tmov    0x20(%rax),%eax\n 3ac:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n 3af:\t89 c1                \tmov    %eax,%ecx\n 3b1:\td3 e2                \tshl    %cl,%edx\n 3b3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 3b7:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n 3be:\t89 d6                \tmov    %edx,%esi\n 3c0:\t48 89 c7             \tmov    %rax,%rdi\n 3c3:\te8 18 fd ff ff       \tcallq  e0 <advance>\n 3c8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 3cc:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 3d0:\t4c 8b 40 30          \tmov    0x30(%rax),%r8\n 3d4:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n 3d7:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n 3db:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 3df:\t48 89 ce             \tmov    %rcx,%rsi\n 3e2:\t48 89 c7             \tmov    %rax,%rdi\n 3e5:\t41 ff d0             \tcallq  *%r8\n 3e8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 3ec:\t48 8b 90 80 00 00 00 \tmov    0x80(%rax),%rdx\n 3f3:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 3f7:\t8b 40 20             \tmov    0x20(%rax),%eax\n 3fa:\t8b 75 c4             \tmov    -0x3c(%rbp),%esi\n 3fd:\t89 c1                \tmov    %eax,%ecx\n 3ff:\td3 e6                \tshl    %cl,%esi\n 401:\t89 f0                \tmov    %esi,%eax\n 403:\t48 63 f0             \tmovslq %eax,%rsi\n 406:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 40a:\t48 89 d1             \tmov    %rdx,%rcx\n 40d:\tba 01 00 00 00       \tmov    $0x1,%edx\n 412:\t48 89 c7             \tmov    %rax,%rdi\n 415:\te8 00 00 00 00       \tcallq  41a <wav_run_out+0x19d>\n 41a:\t48 83 f8 01          \tcmp    $0x1,%rax\n 41e:\t74 34                \tje     454 <wav_run_out+0x1d7>\n 420:\te8 00 00 00 00       \tcallq  425 <wav_run_out+0x1a8>\n 425:\t8b 00                \tmov    (%rax),%eax\n 427:\t89 c7                \tmov    %eax,%edi\n 429:\te8 00 00 00 00       \tcallq  42e <wav_run_out+0x1b1>\n 42e:\t48 89 c2             \tmov    %rax,%rdx\n 431:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 435:\t8b 40 20             \tmov    0x20(%rax),%eax\n 438:\t8b 75 c4             \tmov    -0x3c(%rbp),%esi\n 43b:\t89 c1                \tmov    %eax,%ecx\n 43d:\td3 e6                \tshl    %cl,%esi\n 43f:\t89 f0                \tmov    %esi,%eax\n 441:\t89 c6                \tmov    %eax,%esi\n 443:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 44a <wav_run_out+0x1cd>\n 44a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 44f:\te8 d5 fc ff ff       \tcallq  129 <dolog>\n 454:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n 457:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 45a:\t01 c2                \tadd    %eax,%edx\n 45c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 460:\t8b 48 50             \tmov    0x50(%rax),%ecx\n 463:\t89 d0                \tmov    %edx,%eax\n 465:\t99                   \tcltd   \n 466:\tf7 f9                \tidiv   %ecx\n 468:\t89 55 a4             \tmov    %edx,-0x5c(%rbp)\n 46b:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 46e:\t29 45 a8             \tsub    %eax,-0x58(%rbp)\n 471:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 475:\t8b 90 98 00 00 00    \tmov    0x98(%rax),%edx\n 47b:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 47e:\t01 c2                \tadd    %eax,%edx\n 480:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 484:\t89 90 98 00 00 00    \tmov    %edx,0x98(%rax)\n 48a:\t83 7d a8 00          \tcmpl   $0x0,-0x58(%rbp)\n 48e:\t0f 85 d2 fe ff ff    \tjne    366 <wav_run_out+0xe9>\n 494:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 498:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n 49b:\t89 50 38             \tmov    %edx,0x38(%rax)\n 49e:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n 4a1:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n 4a5:\t64 48 33 3c 25 28 00 \txor    %fs:0x28,%rdi\n 4ac:\t00 00 \n 4ae:\t74 05                \tje     4b5 <wav_run_out+0x238>\n 4b0:\te8 00 00 00 00       \tcallq  4b5 <wav_run_out+0x238>\n 4b5:\tc9                   \tleaveq \n 4b6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall wav_run_out(__int64 a1, int a2) {\n  unsigned int v2;\n  int v3;\n  int v4;\n  int *v5;\n  char *v6;\n  __int64 v7;\n  __int64 v8;\n  int <span class=\"supfact\">v10</span>;\n  int v11;\n  int v12;\n  unsigned int <span class=\"supfact\">v13</span>;\n  unsigned int <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  __int64 <span class=\"supfact\">v17</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  <span class=\"supfact\">v15</span> = qemu_get_clock_ns(vm_clock);\n  <span class=\"supfact\">v16</span> = <span class=\"supfact\">v15</span> - *(_QWORD *)(a1 + Number);\n  v2 = get_ticks_per_sec();\n  <span class=\"supfact\">v17</span> =\n      muldiv64(<span class=\"supfact\">v16</span>, *(_DWORD *)(a1 + Number), v2);\n  if (<span class=\"supfact\">v17</span> < Number)\n    v11 = <span class=\"supfact\">v17</span> >> *(_DWORD *)(a1 + Number);\n  else\n    v11 = Number >> *(_DWORD *)(a1 + Number);\n  *(_QWORD *)(a1 + Number) = <span class=\"supfact\">v15</span>;\n  v3 = v11;\n  if (a2 <= v11)\n    v3 = a2;\n  <span class=\"supfact\">v13</span> = v3;\n  v12 = v3;\n  <span class=\"supfact\">v10</span> = *(_DWORD *)(a1 + Number);\n  while (v12) {\n    v4 = *(_DWORD *)(a1 + Number) - <span class=\"supfact\">v10</span>;\n    if (v12 <= v4)\n      v4 = v12;\n    <span class=\"supfact\">v14</span> = v4;\n    <span class=\"supfact\">v18</span> =\n        Number L * <span class=\"supfact\">v10</span> + *(_QWORD *)(a1 + Number);\n    <span class=\"supfact\">ptr</span> =\n        (void *)advance(*(_QWORD *)(a1 + Number),\n                        <span class=\"supfact\">v10</span> << *(_DWORD *)(a1 + Number));\n    (*(void(__fastcall **)(void *, __int64, _QWORD))(a1 + Number))(\n        <span class=\"supfact\">ptr</span>, <span class=\"supfact\">v18</span>, <span class=\"supfact\">v14</span>);\n    if (fwrite(<span class=\"supfact\">ptr</span>,\n               (int)(<span class=\"supfact\">v14</span> << *(_DWORD *)(a1 + Number)), Number,\n               *(FILE **)(a1 + Number)) != Number) {\n      v5 = _errno_location();\n      v6 = strerror(*v5);\n      dolog((__int64)String, <span class=\"supfact\">v14</span> << *(_DWORD *)(a1 + Number),\n            (__int64)v6, *(unsigned int *)(a1 + Number), v7, v8);\n    }\n    <span class=\"supfact\">v10</span> = (int)(<span class=\"supfact\">v14</span> + <span class=\"supfact\">v10</span>) %\n                          *(_DWORD *)(a1 + Number);\n    v12 -= <span class=\"supfact\">v14</span>;\n    *(_DWORD *)(a1 + Number) += <span class=\"supfact\">v14</span>;\n  }\n  *(_DWORD *)(a1 + Number) = <span class=\"supfact\">v10</span>;\n  return <span class=\"supfact\">v13</span>;\n}", "code_t": "int __cdecl wav_run_out(HWVoiceOut_0 *hw, int live) {\n  uint32_t v2;\n  int v3;\n  int v4;\n  int *v5;\n  char *v6;\n  int <span class=\"supfact\">rpos</span>;\n  int samples;\n  int samplesa;\n  int <span class=\"supfact\">decr</span>;\n  int <span class=\"supfact\">convert_samples</span>;\n  int64_t <span class=\"supfact\">now</span>;\n  int64_t <span class=\"supfact\">ticks</span>;\n  int64_t <span class=\"supfact\">bytes</span>;\n  st_sample *<span class=\"supfact\">src</span>;\n  uint8_t *<span class=\"supfact\">dst</span>;\n  <span class=\"supfact\">now</span> = qemu_get_clock_ns(vm_clock);\n  <span class=\"supfact\">ticks</span> =\n      <span class=\"supfact\">now</span> - *(_QWORD *)&hw[Number].pending_disable;\n  v2 = get_ticks_per_sec();\n  <span class=\"supfact\">bytes</span> =\n      muldiv64(<span class=\"supfact\">ticks</span>, hw->info.bytes_per_second, v2);\n  if (<span class=\"supfact\">bytes</span> < Number)\n    samples = <span class=\"supfact\">bytes</span> >> hw->info.shift;\n  else\n    samples = Number >> hw->info.shift;\n  *(_QWORD *)&hw[Number].pending_disable = <span class=\"supfact\">now</span>;\n  v3 = samples;\n  if (live <= samples)\n    v3 = live;\n  <span class=\"supfact\">decr</span> = v3;\n  samplesa = v3;\n  <span class=\"supfact\">rpos</span> = hw-><span class=\"supfact\">rpos</span>;\n  while (samplesa) {\n    v4 = hw->samples - <span class=\"supfact\">rpos</span>;\n    if (samplesa <= v4)\n      v4 = samplesa;\n    <span class=\"supfact\">convert_samples</span> = v4;\n    <span class=\"supfact\">src</span> = &hw->mix_buf[<span class=\"supfact\">rpos</span>];\n    <span class=\"supfact\">dst</span> =\n        (uint8_t *)advance(*(void **)&hw[Number].info.sign,\n                           <span class=\"supfact\">rpos</span> << hw->info.shift);\n    hw->clip(<span class=\"supfact\">dst</span>, <span class=\"supfact\">src</span>,\n             <span class=\"supfact\">convert_samples</span>);\n    if (fwrite(<span class=\"supfact\">dst</span>,\n               <span class=\"supfact\">convert_samples</span> << hw->info.shift, Number,\n               *(FILE **)&hw[Number].enabled) != Number) {\n      v5 = _errno_location();\n      v6 = strerror(*v5);\n      dolog(String,\n            (unsigned int)(<span class=\"supfact\">convert_samples</span> << hw->info.shift),\n            v6);\n    }\n    <span class=\"supfact\">rpos</span> =\n        (<span class=\"supfact\">convert_samples</span> + <span class=\"supfact\">rpos</span>) % hw->samples;\n    samplesa -= <span class=\"supfact\">convert_samples</span>;\n    hw[Number].info.nchannels += <span class=\"supfact\">convert_samples</span>;\n  }\n  hw-><span class=\"supfact\">rpos</span> = <span class=\"supfact\">rpos</span>;\n  return <span class=\"supfact\">decr</span>;\n}", "var": [{"name": "ptr", "type": "uint64_t *", "ref_name": "dst", "ref_type": "uint8_t *"}, {"name": "v18", "type": "int64_t", "ref_name": "src", "ref_type": "st_sample *"}, {"name": "v17", "type": "int64_t", "ref_name": "bytes", "ref_type": "int64_t"}, {"name": "v16", "type": "int64_t", "ref_name": "ticks", "ref_type": "int64_t"}, {"name": "v15", "type": "int64_t", "ref_name": "now", "ref_type": "int64_t"}, {"name": "v14", "type": "int", "ref_name": "convert_samples", "ref_type": "int"}, {"name": "v13", "type": "int", "ref_name": "decr", "ref_type": "int"}, {"name": "v10", "type": "int", "ref_name": "rpos", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "shishujuan", "repo_name": "dsalg", "path": "shishujuan/dsalg/637c5791677f06fcc07eb2ba150723a5aebb6d732bd968f006a78221fab3083e", "path_in_repo": "shishujuan/dsalg/code/ds/list/aslist/main.o", "objdump": "0000000000000708 <testListIntersect>:\n     708:\t55                   \tpush   %rbp\n     709:\t48 89 e5             \tmov    %rsp,%rbp\n     70c:\t48 83 ec 50          \tsub    $0x50,%rsp\n     710:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     715:\te8 00 00 00 00       \tcallq  71a <testListIntersect+0x12>\n     71a:\tc7 45 cc 01 00 00 00 \tmovl   $0x1,-0x34(%rbp)\n     721:\tc7 45 d0 03 00 00 00 \tmovl   $0x3,-0x30(%rbp)\n     728:\tc7 45 d4 05 00 00 00 \tmovl   $0x5,-0x2c(%rbp)\n     72f:\tc7 45 b0 02 00 00 00 \tmovl   $0x2,-0x50(%rbp)\n     736:\tc7 45 b4 04 00 00 00 \tmovl   $0x4,-0x4c(%rbp)\n     73d:\tc7 45 b8 06 00 00 00 \tmovl   $0x6,-0x48(%rbp)\n     744:\tc7 45 bc 07 00 00 00 \tmovl   $0x7,-0x44(%rbp)\n     74b:\t48 8d 45 cc          \tlea    -0x34(%rbp),%rax\n     74f:\tbe 03 00 00 00       \tmov    $0x3,%esi\n     754:\t48 89 c7             \tmov    %rax,%rdi\n     757:\te8 00 00 00 00       \tcallq  75c <testListIntersect+0x54>\n     75c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     760:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     764:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     769:\t48 89 c7             \tmov    %rax,%rdi\n     76c:\te8 00 00 00 00       \tcallq  771 <testListIntersect+0x69>\n     771:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     775:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     779:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     77d:\t48 89 d6             \tmov    %rdx,%rsi\n     780:\t48 89 c7             \tmov    %rax,%rdi\n     783:\te8 00 00 00 00       \tcallq  788 <testListIntersect+0x80>\n     788:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     78c:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     791:\t74 19                \tje     7ac <testListIntersect+0xa4>\n     793:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     798:\tba 1c 01 00 00       \tmov    $0x11c,%edx\n     79d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     7a2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     7a7:\te8 00 00 00 00       \tcallq  7ac <testListIntersect+0xa4>\n     7ac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7b0:\t48 89 c7             \tmov    %rax,%rdi\n     7b3:\te8 00 00 00 00       \tcallq  7b8 <testListIntersect+0xb0>\n     7b8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7bc:\t48 89 c7             \tmov    %rax,%rdi\n     7bf:\te8 00 00 00 00       \tcallq  7c4 <testListIntersect+0xbc>\n     7c4:\tbf 08 00 00 00       \tmov    $0x8,%edi\n     7c9:\te8 00 00 00 00       \tcallq  7ce <testListIntersect+0xc6>\n     7ce:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     7d2:\tbf 09 00 00 00       \tmov    $0x9,%edi\n     7d7:\te8 00 00 00 00       \tcallq  7dc <testListIntersect+0xd4>\n     7dc:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     7e0:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     7e4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7e8:\t48 89 d6             \tmov    %rdx,%rsi\n     7eb:\t48 89 c7             \tmov    %rax,%rdi\n     7ee:\te8 00 00 00 00       \tcallq  7f3 <testListIntersect+0xeb>\n     7f3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     7f7:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     7fb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     7ff:\t48 89 d6             \tmov    %rdx,%rsi\n     802:\t48 89 c7             \tmov    %rax,%rdi\n     805:\te8 00 00 00 00       \tcallq  80a <testListIntersect+0x102>\n     80a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     80e:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     812:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     816:\t48 89 d6             \tmov    %rdx,%rsi\n     819:\t48 89 c7             \tmov    %rax,%rdi\n     81c:\te8 00 00 00 00       \tcallq  821 <testListIntersect+0x119>\n     821:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     825:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     829:\t48 89 c7             \tmov    %rax,%rdi\n     82c:\te8 00 00 00 00       \tcallq  831 <testListIntersect+0x129>\n     831:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     835:\t48 89 c7             \tmov    %rax,%rdi\n     838:\te8 00 00 00 00       \tcallq  83d <testListIntersect+0x135>\n     83d:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     841:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     845:\t48 89 d6             \tmov    %rdx,%rsi\n     848:\t48 89 c7             \tmov    %rax,%rdi\n     84b:\te8 00 00 00 00       \tcallq  850 <testListIntersect+0x148>\n     850:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     854:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     858:\t48 3b 45 e0          \tcmp    -0x20(%rbp),%rax\n     85c:\t74 19                \tje     877 <testListIntersect+0x16f>\n     85e:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     863:\tba 2b 01 00 00       \tmov    $0x12b,%edx\n     868:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     86d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     872:\te8 00 00 00 00       \tcallq  877 <testListIntersect+0x16f>\n     877:\t90                   \tnop\n     878:\tc9                   \tleaveq \n     879:\tc3                   \tretq   ", "code_s": "_QWORD *testListIntersect() {\n  _QWORD *result;\n  int <span class=\"supfact\">v1</span>[Number];\n  int <span class=\"supfact\">v2</span>[Number];\n  __int64 <span class=\"supfact\">v3</span>;\n  _QWORD *<span class=\"supfact\">v4</span>;\n  _QWORD *<span class=\"supfact\">v5</span>;\n  _QWORD *<span class=\"supfact\">v6</span>;\n  _QWORD *<span class=\"supfact\">v7</span>;\n  puts(String);\n  <span class=\"supfact\">v2</span>[Number] = Number;\n  <span class=\"supfact\">v2</span>[Number] = Number;\n  <span class=\"supfact\">v2</span>[Number] = Number;\n  <span class=\"supfact\">v1</span>[Number] = Number;\n  <span class=\"supfact\">v1</span>[Number] = Number;\n  <span class=\"supfact\">v1</span>[Number] = Number;\n  <span class=\"supfact\">v1</span>[Number] = Number;\n  <span class=\"supfact\">v7</span> = (_QWORD *)listCreate(<span class=\"supfact\">v2</span>, Number L);\n  <span class=\"supfact\">v6</span> = (_QWORD *)listCreate(<span class=\"supfact\">v1</span>, Number L);\n  <span class=\"supfact\">v5</span> = listIntersect(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v6</span>);\n  if (<span class=\"supfact\">v5</span>)\n    _assert_fail(String, String, Number, String);\n  listTraverse(<span class=\"supfact\">v7</span>);\n  listTraverse(<span class=\"supfact\">v6</span>);\n  <span class=\"supfact\">v4</span> = (_QWORD *)listNewNode(Number L);\n  <span class=\"supfact\">v3</span> = listNewNode(Number L);\n  <span class=\"supfact\">v7</span> =\n      (_QWORD *)listAddNodeTailWithNode(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">v7</span> =\n      (_QWORD *)listAddNodeTailWithNode(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v3</span>);\n  <span class=\"supfact\">v6</span> =\n      (_QWORD *)listAddNodeTailWithNode(<span class=\"supfact\">v6</span>, <span class=\"supfact\">v4</span>);\n  listTraverse(<span class=\"supfact\">v7</span>);\n  listTraverse(<span class=\"supfact\">v6</span>);\n  result = listIntersect(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v6</span>);\n  <span class=\"supfact\">v5</span> = result;\n  if (result != <span class=\"supfact\">v4</span>)\n    _assert_fail(String, String, Number, String);\n  return result;\n}", "code_t": "void __cdecl testListIntersect() {\n  int <span class=\"supfact\">a2</span>[Number];\n  int <span class=\"supfact\">a1</span>[Number];\n  ListNode_0 *<span class=\"supfact\">sameNode2</span>;\n  ListNode_0 *<span class=\"supfact\">sameNode1</span>;\n  ListNode_0 *<span class=\"supfact\">sameNode</span>;\n  ListNode_0 *<span class=\"supfact\">list2</span>;\n  ListNode_0 *<span class=\"supfact\">list1</span>;\n  puts(String);\n  <span class=\"supfact\">a1</span>[Number] = Number;\n  <span class=\"supfact\">a1</span>[Number] = Number;\n  <span class=\"supfact\">a1</span>[Number] = Number;\n  <span class=\"supfact\">a2</span>[Number] = Number;\n  <span class=\"supfact\">a2</span>[Number] = Number;\n  <span class=\"supfact\">a2</span>[Number] = Number;\n  <span class=\"supfact\">a2</span>[Number] = Number;\n  <span class=\"supfact\">list1</span> =\n      (ListNode_0 *)listCreate(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">list2</span> =\n      (ListNode_0 *)listCreate(<span class=\"supfact\">a2</span>, Number L);\n  <span class=\"supfact\">sameNode</span> =\n      listIntersect(<span class=\"supfact\">list1</span>, <span class=\"supfact\">list2</span>);\n  if (<span class=\"supfact\">sameNode</span>)\n    _assert_fail(String, String, Number, String);\n  listTraverse(<span class=\"supfact\">list1</span>);\n  listTraverse(<span class=\"supfact\">list2</span>);\n  <span class=\"supfact\">sameNode1</span> = (ListNode_0 *)listNewNode(Number L);\n  <span class=\"supfact\">sameNode2</span> = (ListNode_0 *)listNewNode(Number L);\n  <span class=\"supfact\">list1</span> = (ListNode_0 *)listAddNodeTailWithNode(\n      <span class=\"supfact\">list1</span>, <span class=\"supfact\">sameNode1</span>);\n  <span class=\"supfact\">list1</span> = (ListNode_0 *)listAddNodeTailWithNode(\n      <span class=\"supfact\">list1</span>, <span class=\"supfact\">sameNode2</span>);\n  <span class=\"supfact\">list2</span> = (ListNode_0 *)listAddNodeTailWithNode(\n      <span class=\"supfact\">list2</span>, <span class=\"supfact\">sameNode1</span>);\n  listTraverse(<span class=\"supfact\">list1</span>);\n  listTraverse(<span class=\"supfact\">list2</span>);\n  <span class=\"supfact\">sameNode</span> =\n      listIntersect(<span class=\"supfact\">list1</span>, <span class=\"supfact\">list2</span>);\n  if (<span class=\"supfact\">sameNode</span> != <span class=\"supfact\">sameNode1</span>)\n    _assert_fail(String, String, Number, String);\n}", "var": [{"name": "v7", "type": "list *", "ref_name": "list1", "ref_type": "ListNode_0 *"}, {"name": "v6", "type": "list *", "ref_name": "list2", "ref_type": "ListNode_0 *"}, {"name": "v5", "type": "list *", "ref_name": "sameNode", "ref_type": "ListNode_0 *"}, {"name": "v4", "type": "list *", "ref_name": "sameNode1", "ref_type": "ListNode_0 *"}, {"name": "v3", "type": "list *", "ref_name": "sameNode2", "ref_type": "ListNode_0 *"}, {"name": "v2", "type": "struct ObjectAddress_0 { Oid classId; Oid objectId; int32 objectSubId; }", "ref_name": "a1", "ref_type": "int[3]"}, {"name": "v1", "type": "int[7]", "ref_name": "a2", "ref_type": "int[4]"}], "body_in_train": false}, {"repo_owner": "jollyjinx", "repo_name": "idl4k", "path": "jollyjinx/idl4k/3a4a65710678dcd389f692c4a83a72aac2afe96481eac8958a94ee1758950abd", "path_in_repo": "jollyjinx/idl4k/boost_1_53_0/libs/lambda/test/bind_tests_simple.exe", "objdump": "000000000041327c <_ZNK5boost6lambda19lambda_functor_baseINS0_6actionILi2ENS0_15function_actionILi2ENS0_6detail11unspecifiedEEEEENS_6tuples5tupleIKPFiiEKNS0_14lambda_functorINS0_11placeholderILi1EEEEENS8_9null_typeESI_SI_SI_SI_SI_SI_SI_EEE4callIiiKSI_SM_SM_EET_RT0_RT1_RT2_RT3_>:\n  41327c:\t55                   \tpush   %rbp\n  41327d:\t48 89 e5             \tmov    %rsp,%rbp\n  413280:\t53                   \tpush   %rbx\n  413281:\t48 83 ec 48          \tsub    $0x48,%rsp\n  413285:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  413289:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  41328d:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  413291:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  413295:\t4c 89 45 b8          \tmov    %r8,-0x48(%rbp)\n  413299:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41329d:\t48 89 c7             \tmov    %rax,%rdi\n  4132a0:\te8 54 98 00 00       \tcallq  41caf9 <_ZN5boost6tuples3getILi1EKPFiiENS0_4consIKNS_6lambda14lambda_functorINS6_11placeholderILi1EEEEENS0_9null_typeEEEEENS0_13access_traitsINS0_7elementIXT_ENS5_IT0_T1_EEE4typeEE10const_typeERKSI_>\n  4132a5:\t48 89 c7             \tmov    %rax,%rdi\n  4132a8:\t48 8b 75 b8          \tmov    -0x48(%rbp),%rsi\n  4132ac:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  4132b0:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4132b4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4132b8:\t49 89 f0             \tmov    %rsi,%r8\n  4132bb:\t48 89 c6             \tmov    %rax,%rsi\n  4132be:\te8 ed 70 00 00       \tcallq  41a3b0 <_ZN5boost6lambda6detail8r_selectIRiE2goINS0_11placeholderILi1EEEiKNS_6tuples9null_typeESA_SA_EES3_RKNS0_14lambda_functorIT_EERT0_RT1_RT2_RT3_>\n  4132c3:\t48 89 c7             \tmov    %rax,%rdi\n  4132c6:\te8 22 71 00 00       \tcallq  41a3ed <_ZN5boost6lambda6detail14constify_rvalsIRiE2goIiEERT_S7_>\n  4132cb:\t48 89 c3             \tmov    %rax,%rbx\n  4132ce:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4132d2:\t48 89 c7             \tmov    %rax,%rdi\n  4132d5:\te8 c8 97 00 00       \tcallq  41caa2 <_ZN5boost6tuples3getILi0EKPFiiENS0_4consIKNS_6lambda14lambda_functorINS6_11placeholderILi1EEEEENS0_9null_typeEEEEENS0_13access_traitsINS0_7elementIXT_ENS5_IT0_T1_EEE4typeEE10const_typeERKSI_>\n  4132da:\t48 89 c7             \tmov    %rax,%rdi\n  4132dd:\t48 8b 75 b8          \tmov    -0x48(%rbp),%rsi\n  4132e1:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  4132e5:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4132e9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4132ed:\t49 89 f0             \tmov    %rsi,%r8\n  4132f0:\t48 89 c6             \tmov    %rax,%rsi\n  4132f3:\te8 c4 97 00 00       \tcallq  41cabc <_ZN5boost6lambda6detail8r_selectIPFiiEE2goIKS4_iKNS_6tuples9null_typeESA_SA_EES4_RT_RT0_RT1_RT2_RT3_>\n  4132f8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4132fc:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  413300:\t48 89 c7             \tmov    %rax,%rdi\n  413303:\te8 a9 88 00 00       \tcallq  41bbb1 <_ZN5boost6lambda6detail14constify_rvalsIPFiiEE2goIS4_EERKT_S9_>\n  413308:\t48 89 de             \tmov    %rbx,%rsi\n  41330b:\t48 89 c7             \tmov    %rax,%rdi\n  41330e:\te8 00 98 00 00       \tcallq  41cb13 <_ZN5boost6lambda15function_actionILi2ENS0_6detail11unspecifiedEE5applyIiKPFiiEiEET_RT0_RT1_>\n  413313:\t48 83 c4 48          \tadd    $0x48,%rsp\n  413317:\t5b                   \tpop    %rbx\n  413318:\t5d                   \tpop    %rbp\n  413319:\tc3                   \tretq   ", "code_s": "__int64 __fastcall boost lambda lambda_functor_base<\n    boost lambda action<Number, boost lambda function_action<\n                                    Number, boost lambda detail unspecified>>,\n    boost tuples tuple<\n        int (*const)(int),\n        boost lambda lambda_functor<boost lambda placeholder<Number>> const,\n        boost tuples null_type, boost tuples null_type, boost tuples null_type,\n        boost tuples null_type, boost tuples null_type, boost tuples null_type,\n        boost tuples null_type, boost tuples null_type>>\ncall<int, int, boost tuples null_type const, boost tuples null_type const,\n     boost tuples null_type const>(__int64 a1, __int64 a2, __int64 a3,\n                                   __int64 a4, __int64 a5) {\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 <span class=\"supfact\">v14</span>[Number];\n  v5 = boost tuples get<\n      Number, int (*const)(int),\n      boost tuples cons<\n          boost lambda lambda_functor<boost lambda placeholder<Number>> const,\n          boost tuples null_type>>(a1);\n  v6 = boost lambda detail r_select<int &>\n      go<boost lambda placeholder<Number>, int, boost tuples null_type const,\n         boost tuples null_type const, boost tuples null_type const>(v5, a2, a3,\n                                                                     a4, a5);\n  v7 = boost lambda detail constify_rvals<int &> go<int>(v6);\n  v8 = boost tuples get<\n      Number, int (*const)(int),\n      boost tuples cons<\n          boost lambda lambda_functor<boost lambda placeholder<Number>> const,\n          boost tuples null_type>>(a1);\n  <span class=\"supfact\">v14</span>[Number] = boost lambda detail r_select<int (*)(int)>\n      go<int (*const)(int), int, boost tuples null_type const,\n         boost tuples null_type const, boost tuples null_type const>(v8, a2, a3,\n                                                                     a4, a5);\n  v9 = boost lambda detail constify_rvals<int (*)(int)> go<int (*)(int)>(\n      <span class=\"supfact\">v14</span>);\n  return boost lambda function_action<Number, boost lambda detail unspecified>\n      apply<int, int (*const)(int), int>(v9, v7);\n}", "code_t": "__int64 __fastcall boost lambda lambda_functor_base<\n    boost lambda action<Number, boost lambda function_action<\n                                    Number, boost lambda detail unspecified>>,\n    boost tuples tuple<\n        int (*const)(int),\n        boost lambda lambda_functor<boost lambda placeholder<Number>> const,\n        boost tuples null_type, boost tuples null_type, boost tuples null_type,\n        boost tuples null_type, boost tuples null_type, boost tuples null_type,\n        boost tuples null_type, boost tuples null_type>>\ncall<int, int, boost tuples null_type const, boost tuples null_type const,\n     boost tuples null_type const>(__int64 a1, __int64 a2, __int64 a3,\n                                   __int64 a4, __int64 a5) {\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 <span class=\"supfact\">v14</span>[Number];\n  v5 = boost tuples get<\n      Number, int (*const)(int),\n      boost tuples cons<\n          boost lambda lambda_functor<boost lambda placeholder<Number>> const,\n          boost tuples null_type>>(a1);\n  v6 = boost lambda detail r_select<int &>\n      go<boost lambda placeholder<Number>, int, boost tuples null_type const,\n         boost tuples null_type const, boost tuples null_type const>(v5, a2, a3,\n                                                                     a4, a5);\n  v7 = boost lambda detail constify_rvals<int &> go<int>(v6);\n  v8 = boost tuples get<\n      Number, int (*const)(int),\n      boost tuples cons<\n          boost lambda lambda_functor<boost lambda placeholder<Number>> const,\n          boost tuples null_type>>(a1);\n  <span class=\"supfact\">v14</span>[Number] = boost lambda detail r_select<int (*)(int)>\n      go<int (*const)(int), int, boost tuples null_type const,\n         boost tuples null_type const, boost tuples null_type const>(v8, a2, a3,\n                                                                     a4, a5);\n  v9 = boost lambda detail constify_rvals<int (*)(int)> go<int (*)(int)>(\n      <span class=\"supfact\">v14</span>);\n  return boost lambda function_action<Number, boost lambda detail unspecified>\n      apply<int, int (*const)(int), int>(v9, v7);\n}", "var": [{"name": "v14", "type": "__int64[3]", "ref_name": "v14", "ref_type": "__int64[3]"}], "body_in_train": false}, {"repo_owner": "sharklinux", "repo_name": "shark", "path": "sharklinux/shark/0fdabade37ce65df7eb5a88d88298fd60a840319cf1b55fac41cae21a59ee195", "path_in_repo": "sharklinux/shark//core/luv/luv.o", "objdump": "00000000000016dd <luv_new_timer>:\n    16dd:\t55                   \tpush   %rbp\n    16de:\t48 89 e5             \tmov    %rsp,%rbp\n    16e1:\t48 83 ec 20          \tsub    $0x20,%rsp\n    16e5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    16e9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    16ed:\tbe 98 00 00 00       \tmov    $0x98,%esi\n    16f2:\t48 89 c7             \tmov    %rax,%rdi\n    16f5:\te8 00 00 00 00       \tcallq  16fa <luv_new_timer+0x1d>\n    16fa:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    16fe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1702:\t48 89 c7             \tmov    %rax,%rdi\n    1705:\te8 00 00 00 00       \tcallq  170a <luv_new_timer+0x2d>\n    170a:\t48 89 c2             \tmov    %rax,%rdx\n    170d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1711:\t48 89 c6             \tmov    %rax,%rsi\n    1714:\t48 89 d7             \tmov    %rdx,%rdi\n    1717:\te8 00 00 00 00       \tcallq  171c <luv_new_timer+0x3f>\n    171c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    171f:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    1723:\t79 24                \tjns    1749 <luv_new_timer+0x6c>\n    1725:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1729:\tbe fe ff ff ff       \tmov    $0xfffffffe,%esi\n    172e:\t48 89 c7             \tmov    %rax,%rdi\n    1731:\te8 00 00 00 00       \tcallq  1736 <luv_new_timer+0x59>\n    1736:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    1739:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    173d:\t89 d6                \tmov    %edx,%esi\n    173f:\t48 89 c7             \tmov    %rax,%rdi\n    1742:\te8 a5 ea ff ff       \tcallq  1ec <luv_error>\n    1747:\teb 18                \tjmp    1761 <luv_new_timer+0x84>\n    1749:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    174d:\t48 89 c7             \tmov    %rax,%rdi\n    1750:\te8 8c eb ff ff       \tcallq  2e1 <luv_setup_handle>\n    1755:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    1759:\t48 89 02             \tmov    %rax,(%rdx)\n    175c:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1761:\tc9                   \tleaveq \n    1762:\tc3                   \tretq   ", "code_s": "__int64 __fastcall luv_new_timer(__int64 a1) {\n  __int64 v1;\n  __int64 result;\n  signed int <span class=\"supfact\">v3</span>;\n  _QWORD *<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = (_QWORD *)lua_newuserdata(a1, Number L);\n  v1 = luv_loop(a1);\n  <span class=\"supfact\">v3</span> = uv_timer_init(v1, <span class=\"supfact\">v4</span>);\n  if (<span class=\"supfact\">v3</span> >= Number) {\n    *<span class=\"supfact\">v4</span> = luv_setup_handle(a1);\n    result = Number L;\n  } else {\n    lua_settop(a1, Number L);\n    result = luv_error(a1, <span class=\"supfact\">v3</span>);\n  }\n  return result;\n}", "code_t": "int __cdecl luv_new_timer(lua_State_0 *L) {\n  uv_loop_t *v1;\n  int result;\n  int <span class=\"supfact\">ret</span>;\n  uv_timer_t *<span class=\"supfact\">handle</span>;\n  <span class=\"supfact\">handle</span> = (uv_timer_t *)lua_newuserdata(L, Number L);\n  v1 = luv_loop(L);\n  <span class=\"supfact\">ret</span> = uv_timer_init(v1, <span class=\"supfact\">handle</span>);\n  if (<span class=\"supfact\">ret</span> >= Number) {\n    <span class=\"supfact\">handle</span>->data = luv_setup_handle(L);\n    result = Number;\n  } else {\n    lua_settop(L, Number L);\n    result = luv_error(L, <span class=\"supfact\">ret</span>);\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "int16_t *", "ref_name": "handle", "ref_type": "uv_timer_t *"}, {"name": "v3", "type": "int", "ref_name": "ret", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "jonaswagner", "repo_name": "sctp4nat", "path": "jonaswagner/sctp4nat/8aa9abf89f8e4909563a677ac9e2df09c199c20cca30aa223c39149ae18fda4e", "path_in_repo": "jonaswagner/sctp4nat/src/main/native/modified_sctp4natlibs/sctp/usrsctp/usrsctplib/netinet/sctp_output.o", "objdump": "000000000001a5c4 <sctp_add_an_in_stream>:\n   1a5c4:\t55                   \tpush   %rbp\n   1a5c5:\t48 89 e5             \tmov    %rsp,%rbp\n   1a5c8:\t48 83 ec 30          \tsub    $0x30,%rsp\n   1a5cc:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   1a5d0:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n   1a5d3:\t89 d0                \tmov    %edx,%eax\n   1a5d5:\t66 89 45 d0          \tmov    %ax,-0x30(%rbp)\n   1a5d9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1a5dd:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n   1a5e1:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   1a5e5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   1a5e9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   1a5ed:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n   1a5f1:\t0f b7 c0             \tmovzwl %ax,%eax\n   1a5f4:\t89 c7                \tmov    %eax,%edi\n   1a5f6:\te8 00 00 00 00       \tcallq  1a5fb <sctp_add_an_in_stream+0x37>\n   1a5fb:\t83 c0 03             \tadd    $0x3,%eax\n   1a5fe:\t83 e0 fc             \tand    $0xfffffffc,%eax\n   1a601:\t66 89 45 f6          \tmov    %ax,-0xa(%rbp)\n   1a605:\t0f b7 45 f6          \tmovzwl -0xa(%rbp),%eax\n   1a609:\t66 89 45 f4          \tmov    %ax,-0xc(%rbp)\n   1a60d:\t0f b7 55 f6          \tmovzwl -0xa(%rbp),%edx\n   1a611:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   1a615:\t48 01 d0             \tadd    %rdx,%rax\n   1a618:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   1a61c:\t66 c7 45 f6 0c 00    \tmovw   $0xc,-0xa(%rbp)\n   1a622:\tbf 12 00 00 00       \tmov    $0x12,%edi\n   1a627:\te8 00 00 00 00       \tcallq  1a62c <sctp_add_an_in_stream+0x68>\n   1a62c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1a630:\t66 89 02             \tmov    %ax,(%rdx)\n   1a633:\t0f b7 45 f6          \tmovzwl -0xa(%rbp),%eax\n   1a637:\t89 c7                \tmov    %eax,%edi\n   1a639:\te8 00 00 00 00       \tcallq  1a63e <sctp_add_an_in_stream+0x7a>\n   1a63e:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1a642:\t66 89 42 02          \tmov    %ax,0x2(%rdx)\n   1a646:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   1a649:\t89 c7                \tmov    %eax,%edi\n   1a64b:\te8 00 00 00 00       \tcallq  1a650 <sctp_add_an_in_stream+0x8c>\n   1a650:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1a654:\t89 42 04             \tmov    %eax,0x4(%rdx)\n   1a657:\t0f b7 45 d0          \tmovzwl -0x30(%rbp),%eax\n   1a65b:\t89 c7                \tmov    %eax,%edi\n   1a65d:\te8 00 00 00 00       \tcallq  1a662 <sctp_add_an_in_stream+0x9e>\n   1a662:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1a666:\t66 89 42 08          \tmov    %ax,0x8(%rdx)\n   1a66a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1a66e:\t66 c7 40 0a 00 00    \tmovw   $0x0,0xa(%rax)\n   1a674:\t0f b7 55 f6          \tmovzwl -0xa(%rbp),%edx\n   1a678:\t0f b7 45 f4          \tmovzwl -0xc(%rbp),%eax\n   1a67c:\t01 d0                \tadd    %edx,%eax\n   1a67e:\t0f b7 c0             \tmovzwl %ax,%eax\n   1a681:\t89 c7                \tmov    %eax,%edi\n   1a683:\te8 00 00 00 00       \tcallq  1a688 <sctp_add_an_in_stream+0xc4>\n   1a688:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1a68c:\t66 89 42 02          \tmov    %ax,0x2(%rdx)\n   1a690:\t0f b7 55 f6          \tmovzwl -0xa(%rbp),%edx\n   1a694:\t0f b7 45 f4          \tmovzwl -0xc(%rbp),%eax\n   1a698:\t01 c2                \tadd    %eax,%edx\n   1a69a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1a69e:\t66 89 90 88 00 00 00 \tmov    %dx,0x88(%rax)\n   1a6a5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1a6a9:\t0f b7 80 88 00 00 00 \tmovzwl 0x88(%rax),%eax\n   1a6b0:\t83 c0 03             \tadd    $0x3,%eax\n   1a6b3:\t83 e0 fc             \tand    $0xfffffffc,%eax\n   1a6b6:\t89 c2                \tmov    %eax,%edx\n   1a6b8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1a6bc:\t66 89 90 8a 00 00 00 \tmov    %dx,0x8a(%rax)\n   1a6c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1a6c7:\tc6 80 93 00 00 00 00 \tmovb   $0x0,0x93(%rax)\n   1a6ce:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1a6d2:\t0f b7 80 88 00 00 00 \tmovzwl 0x88(%rax),%eax\n   1a6d9:\t0f b7 c0             \tmovzwl %ax,%eax\n   1a6dc:\t8d 50 03             \tlea    0x3(%rax),%edx\n   1a6df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   1a6e3:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n   1a6e7:\t83 e2 fc             \tand    $0xfffffffc,%edx\n   1a6ea:\t89 50 18             \tmov    %edx,0x18(%rax)\n   1a6ed:\t90                   \tnop\n   1a6ee:\tc9                   \tleaveq \n   1a6ef:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sctp_add_an_in_stream(__int64 a1, uint32_t a2, uint16_t a3) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned __int16 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n  <span class=\"supfact\">v6</span> =\n      (ntohs(*(_WORD *)(<span class=\"supfact\">v7</span> + Number)) + Number) & Number;\n  <span class=\"supfact\">v5</span> = <span class=\"supfact\">v6</span> + <span class=\"supfact\">v7</span>;\n  *(_WORD *)<span class=\"supfact\">v5</span> = htons(Number);\n  *(_WORD *)(<span class=\"supfact\">v5</span> + Number) = htons(Number);\n  *(_DWORD *)(<span class=\"supfact\">v5</span> + Number) = htonl(a2);\n  *(_WORD *)(<span class=\"supfact\">v5</span> + Number) = htons(a3);\n  *(_WORD *)(<span class=\"supfact\">v5</span> + Number) = Number;\n  *(_WORD *)(<span class=\"supfact\">v7</span> + Number) = htons(<span class=\"supfact\">v6</span> + Number);\n  *(_WORD *)(a1 + Number) = <span class=\"supfact\">v6</span> + Number;\n  *(_WORD *)(a1 + Number) = (*(_WORD *)(a1 + Number) + Number) & Number;\n  *(_BYTE *)(a1 + Number) = Number;\n  result = *(_QWORD *)(a1 + Number);\n  *(_DWORD *)(result + Number) =\n      (*(unsigned __int16 *)(a1 + Number) + Number) & Number;\n  return result;\n}", "code_t": "void __cdecl sctp_add_an_in_stream(sctp_tmit_chunk *chk, uint32_t seq,\n                                   uint16_t adding) {\n  sctp_stream_reset_add_strm *<span class=\"supfact\">addstr</span>;\n  uint16_t <span class=\"supfact\">old_len</span>;\n  sctp_chunkhdr *<span class=\"supfact\">ch_0</span>;\n  <span class=\"supfact\">ch_0</span> = (sctp_chunkhdr *)chk->data->m_hdr.mh_data;\n  <span class=\"supfact\">old_len</span> =\n      (ntohs(<span class=\"supfact\">ch_0</span>->chunk_length) + Number) & Number;\n  <span class=\"supfact\">addstr</span> =\n      (sctp_stream_reset_add_strm *)(&<span class=\"supfact\">ch_0</span>->chunk_type +\n                                     <span class=\"supfact\">old_len</span>);\n  <span class=\"supfact\">addstr</span>->ph.param_type = htons(Number);\n  <span class=\"supfact\">addstr</span>->ph.param_length = htons(Number);\n  <span class=\"supfact\">addstr</span>->request_seq = htonl(seq);\n  <span class=\"supfact\">addstr</span>->number_of_streams = htons(adding);\n  <span class=\"supfact\">addstr</span>->reserved = Number;\n  <span class=\"supfact\">ch_0</span>->chunk_length = htons(<span class=\"supfact\">old_len</span> + Number);\n  chk->send_size = <span class=\"supfact\">old_len</span> + Number;\n  chk->book_size = (chk->send_size + Number) & Number;\n  chk->book_size_scale = Number;\n  chk->data->m_hdr.mh_len = (chk->send_size + Number) & Number;\n}", "var": [{"name": "v7", "type": "ip_header *", "ref_name": "ch_0", "ref_type": "__unk__"}, {"name": "v6", "type": "uint16_t", "ref_name": "old_len", "ref_type": "uint16_t"}, {"name": "v5", "type": "uint8_t *", "ref_name": "addstr", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "SkyrayLabs", "repo_name": "Skyray", "path": "SkyrayLabs/Skyray/048a808ae92ab3dfb70f4425e107a3e20357f0d06064349f6037ede86e2bb940", "path_in_repo": "SkyrayLabs/Skyray/deps/http-parser/test_fast", "objdump": "0000000000408623 <test_simple>:\n  408623:\t55                   \tpush   %rbp\n  408624:\t48 89 e5             \tmov    %rsp,%rbp\n  408627:\t53                   \tpush   %rbx\n  408628:\t48 83 ec 28          \tsub    $0x28,%rsp\n  40862c:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  408630:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  408633:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  408638:\te8 b5 e8 ff ff       \tcallq  406ef2 <parser_init>\n  40863d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408641:\t48 89 c7             \tmov    %rax,%rdi\n  408644:\te8 17 8a ff ff       \tcallq  401060 <strlen@plt>\n  408649:\t48 89 c2             \tmov    %rax,%rdx\n  40864c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408650:\t48 89 d6             \tmov    %rdx,%rsi\n  408653:\t48 89 c7             \tmov    %rax,%rdi\n  408656:\te8 53 e9 ff ff       \tcallq  406fae <parse>\n  40865b:\t48 8b 05 be cf 3e 00 \tmov    0x3ecfbe(%rip),%rax        # 7f5620 <parser>\n  408662:\t0f b6 40 17          \tmovzbl 0x17(%rax),%eax\n  408666:\t83 e0 7f             \tand    $0x7f,%eax\n  408669:\t0f b6 c0             \tmovzbl %al,%eax\n  40866c:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  40866f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  408674:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  408679:\te8 30 e9 ff ff       \tcallq  406fae <parse>\n  40867e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  408683:\te8 e0 e8 ff ff       \tcallq  406f68 <parser_free>\n  408688:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  40868b:\t3b 45 ec             \tcmp    -0x14(%rbp),%eax\n  40868e:\t74 42                \tje     4086d2 <test_simple+0xaf>\n  408690:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  408693:\t89 c7                \tmov    %eax,%edi\n  408695:\te8 8b d1 ff ff       \tcallq  405825 <http_errno_name>\n  40869a:\t48 89 c3             \tmov    %rax,%rbx\n  40869d:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  4086a0:\t89 c7                \tmov    %eax,%edi\n  4086a2:\te8 7e d1 ff ff       \tcallq  405825 <http_errno_name>\n  4086a7:\t48 89 c2             \tmov    %rax,%rdx\n  4086aa:\t48 8b 05 4f cf 3e 00 \tmov    0x3ecf4f(%rip),%rax        # 7f5600 <stderr@@GLIBC_2.2.5>\n  4086b1:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  4086b5:\t49 89 c8             \tmov    %rcx,%r8\n  4086b8:\t48 89 d9             \tmov    %rbx,%rcx\n  4086bb:\tbe c8 16 7f 00       \tmov    $0x7f16c8,%esi\n  4086c0:\t48 89 c7             \tmov    %rax,%rdi\n  4086c3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4086c8:\te8 13 8a ff ff       \tcallq  4010e0 <fprintf@plt>\n  4086cd:\te8 6e 89 ff ff       \tcallq  401040 <abort@plt>\n  4086d2:\t90                   \tnop\n  4086d3:\t48 83 c4 28          \tadd    $0x28,%rsp\n  4086d7:\t5b                   \tpop    %rbx\n  4086d8:\t5d                   \tpop    %rbp\n  4086d9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall test_simple(char *a1, unsigned int a2) {\n  __int64 v2;\n  __int64 result;\n  char *v4;\n  char *v5;\n  int <span class=\"supfact\">v6</span>;\n  parser_init(Number);\n  v2 = strlen(a1);\n  parse(a1, v2);\n  <span class=\"supfact\">v6</span> = *((_BYTE *)parser + Number) & Number;\n  parse(Number L, Number L);\n  parser_free();\n  result = a2;\n  if (a2 != <span class=\"supfact\">v6</span>) {\n    v4 = http_errno_name(<span class=\"supfact\">v6</span>);\n    v5 = http_errno_name(a2);\n    fprintf(stderr, String, v5, v4, a1);\n    abort();\n  }\n  return result;\n}", "code_t": "void __cdecl test_simple(const char *buf, http_errno err_expected) {\n  size_t v2;\n  const char *v3;\n  const char *v4;\n  int <span class=\"supfact\">err</span>;\n  parser_init(HTTP_REQUEST);\n  v2 = strlen(buf);\n  parse(buf, v2);\n  <span class=\"supfact\">err</span> = *((_BYTE *)parser + Number) & Number;\n  parse(Number L, Number L);\n  parser_free();\n  if (err_expected != <span class=\"supfact\">err</span>) {\n    v3 = http_errno_name((http_errno)<span class=\"supfact\">err</span>);\n    v4 = http_errno_name(err_expected);\n    fprintf(stderr, String, v4, v3, buf);\n    abort();\n  }\n}", "var": [{"name": "v6", "type": "int", "ref_name": "err", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "fjarlq", "repo_name": "robots3", "path": "fjarlq/robots3/df73721cf037aa689b5da21245ed976c7d25656ed07e81b3c512a15e405858d9", "path_in_repo": "fjarlq/robots3//robots3", "objdump": "0000000000402fd4 <erase_dots>:\n  402fd4:\t55                   \tpush   %rbp\n  402fd5:\t48 89 e5             \tmov    %rsp,%rbp\n  402fd8:\t48 83 ec 10          \tsub    $0x10,%rsp\n  402fdc:\t8b 15 d2 73 00 00    \tmov    0x73d2(%rip),%edx        # 40a3b4 <my_x>\n  402fe2:\t8b 05 04 53 00 00    \tmov    0x5304(%rip),%eax        # 4082ec <dots>\n  402fe8:\t29 c2                \tsub    %eax,%edx\n  402fea:\t89 d0                \tmov    %edx,%eax\n  402fec:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  402fef:\teb 6f                \tjmp    403060 <erase_dots+0x8c>\n  402ff1:\t8b 15 35 73 00 00    \tmov    0x7335(%rip),%edx        # 40a32c <my_y>\n  402ff7:\t8b 05 ef 52 00 00    \tmov    0x52ef(%rip),%eax        # 4082ec <dots>\n  402ffd:\t29 c2                \tsub    %eax,%edx\n  402fff:\t89 d0                \tmov    %edx,%eax\n  403001:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  403004:\teb 43                \tjmp    403049 <erase_dots+0x75>\n  403006:\t48 8b 05 83 52 00 00 \tmov    0x5283(%rip),%rax        # 408290 <stdscr@@NCURSES6_TINFO_5.0.19991023>\n  40300d:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  403010:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n  403013:\t89 ce                \tmov    %ecx,%esi\n  403015:\t48 89 c7             \tmov    %rax,%rdi\n  403018:\te8 93 f2 ff ff       \tcallq  4022b0 <wmove@plt>\n  40301d:\t48 8b 05 6c 52 00 00 \tmov    0x526c(%rip),%rax        # 408290 <stdscr@@NCURSES6_TINFO_5.0.19991023>\n  403024:\t48 89 c7             \tmov    %rax,%rdi\n  403027:\te8 34 f2 ff ff       \tcallq  402260 <winch@plt>\n  40302c:\t83 f8 2e             \tcmp    $0x2e,%eax\n  40302f:\t75 14                \tjne    403045 <erase_dots+0x71>\n  403031:\t48 8b 05 58 52 00 00 \tmov    0x5258(%rip),%rax        # 408290 <stdscr@@NCURSES6_TINFO_5.0.19991023>\n  403038:\tbe 20 00 00 00       \tmov    $0x20,%esi\n  40303d:\t48 89 c7             \tmov    %rax,%rdi\n  403040:\te8 9b f2 ff ff       \tcallq  4022e0 <waddch@plt>\n  403045:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  403049:\t8b 15 dd 72 00 00    \tmov    0x72dd(%rip),%edx        # 40a32c <my_y>\n  40304f:\t8b 05 97 52 00 00    \tmov    0x5297(%rip),%eax        # 4082ec <dots>\n  403055:\t01 d0                \tadd    %edx,%eax\n  403057:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n  40305a:\t7e aa                \tjle    403006 <erase_dots+0x32>\n  40305c:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  403060:\t8b 15 4e 73 00 00    \tmov    0x734e(%rip),%edx        # 40a3b4 <my_x>\n  403066:\t8b 05 80 52 00 00    \tmov    0x5280(%rip),%eax        # 4082ec <dots>\n  40306c:\t01 d0                \tadd    %edx,%eax\n  40306e:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  403071:\t0f 8e 7a ff ff ff    \tjle    402ff1 <erase_dots+0x1d>\n  403077:\t90                   \tnop\n  403078:\t90                   \tnop\n  403079:\tc9                   \tleaveq \n  40307a:\tc3                   \tretq   ", "code_s": "__int64 erase_dots() {\n  __int64 result;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = my_x - dots;; ++<span class=\"supfact\">i</span>) {\n    result = (unsigned int)(my_x + dots);\n    if (<span class=\"supfact\">i</span> > (int)result)\n      break;\n    for (<span class=\"supfact\">j</span> = my_y - dots; <span class=\"supfact\">j</span> <= my_y + dots;\n         ++<span class=\"supfact\">j</span>) {\n      wmove(stdscr__NCURSES6_TINFO_5_0_19991023, <span class=\"supfact\">j</span>,\n            <span class=\"supfact\">i</span>);\n      if ((unsigned int)winch(stdscr__NCURSES6_TINFO_5_0_19991023) == Number)\n        waddch(stdscr__NCURSES6_TINFO_5_0_19991023, Number);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl erase_dots() {\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">x</span>;\n  for (<span class=\"supfact\">x</span> = my_x - dots; <span class=\"supfact\">x</span> <= my_x + dots;\n       ++<span class=\"supfact\">x</span>) {\n    for (<span class=\"supfact\">y</span> = my_y - dots; <span class=\"supfact\">y</span> <= my_y + dots;\n         ++<span class=\"supfact\">y</span>) {\n      wmove(stdscr__NCURSES6_TINFO_5_0_19991023, <span class=\"supfact\">y</span>,\n            <span class=\"supfact\">x</span>);\n      if (winch(stdscr__NCURSES6_TINFO_5_0_19991023) == Number)\n        waddch(stdscr__NCURSES6_TINFO_5_0_19991023, Number);\n    }\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "x", "ref_type": "int"}, {"name": "j", "type": "int", "ref_name": "y", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "AndersTrier", "repo_name": "QEMU-bitflip", "path": "AndersTrier/QEMU-bitflip/4c33aa4216d98d7a04558d374c72a10e2fd6f931782511016138175a7debc2a2", "path_in_repo": "AndersTrier/QEMU-bitflip//net/filter-mirror.o", "objdump": "0000000000000554 <filter_mirror_setup>:\n 554:\t55                   \tpush   %rbp\n 555:\t48 89 e5             \tmov    %rsp,%rbp\n 558:\t48 83 ec 20          \tsub    $0x20,%rsp\n 55c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 560:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 564:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 568:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 56f <filter_mirror_setup+0x1b>\n 56f:\tb9 c1 00 00 00       \tmov    $0xc1,%ecx\n 574:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 57b <filter_mirror_setup+0x27>\n 57b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 582 <filter_mirror_setup+0x2e>\n 582:\t48 89 c7             \tmov    %rax,%rdi\n 585:\te8 00 00 00 00       \tcallq  58a <filter_mirror_setup+0x36>\n 58a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 58e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 592:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n 596:\t48 85 c0             \ttest   %rax,%rax\n 599:\t75 2d                \tjne    5c8 <filter_mirror_setup+0x74>\n 59b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 59f:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 5a6 <filter_mirror_setup+0x52>\n 5a6:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 5ad <filter_mirror_setup+0x59>\n 5ad:\tba c5 00 00 00       \tmov    $0xc5,%edx\n 5b2:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5b9 <filter_mirror_setup+0x65>\n 5b9:\t48 89 c7             \tmov    %rax,%rdi\n 5bc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 5c1:\te8 00 00 00 00       \tcallq  5c6 <filter_mirror_setup+0x72>\n 5c6:\teb 7d                \tjmp    645 <filter_mirror_setup+0xf1>\n 5c8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 5cc:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n 5d0:\t48 89 c7             \tmov    %rax,%rdi\n 5d3:\te8 00 00 00 00       \tcallq  5d8 <filter_mirror_setup+0x84>\n 5d8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 5dc:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 5e1:\t75 44                \tjne    627 <filter_mirror_setup+0xd3>\n 5e3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 5e7:\t48 8b 50 58          \tmov    0x58(%rax),%rdx\n 5eb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 5ef:\t48 83 ec 08          \tsub    $0x8,%rsp\n 5f3:\t52                   \tpush   %rdx\n 5f4:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 5fb <filter_mirror_setup+0xa7>\n 5fb:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n 601:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 608 <filter_mirror_setup+0xb4>\n 608:\tba cc 00 00 00       \tmov    $0xcc,%edx\n 60d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 614 <filter_mirror_setup+0xc0>\n 614:\t48 89 c7             \tmov    %rax,%rdi\n 617:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 61c:\te8 00 00 00 00       \tcallq  621 <filter_mirror_setup+0xcd>\n 621:\t48 83 c4 10          \tadd    $0x10,%rsp\n 625:\teb 1e                \tjmp    645 <filter_mirror_setup+0xf1>\n 627:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 62b:\t48 8d 88 90 00 00 00 \tlea    0x90(%rax),%rcx\n 632:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 636:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 63a:\t48 89 c6             \tmov    %rax,%rsi\n 63d:\t48 89 cf             \tmov    %rcx,%rdi\n 640:\te8 00 00 00 00       \tcallq  645 <filter_mirror_setup+0xf1>\n 645:\tc9                   \tleaveq \n 646:\tc3                   \tretq   ", "code_s": "__int64 __fastcall filter_mirror_setup(__int64 a1, __int64 a2) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v3</span> =\n      object_dynamic_cast_assert(a1, String, String, Number L, String);\n  if (!*(_QWORD *)(<span class=\"supfact\">v3</span> + Number))\n    return error_setg_internal(a2, String, Number L, String, String);\n  <span class=\"supfact\">v4</span> = qemu_chr_find(*(_QWORD *)(<span class=\"supfact\">v3</span> + Number));\n  if (<span class=\"supfact\">v4</span>)\n    result =\n        qemu_chr_fe_init(<span class=\"supfact\">v3</span> + Number, <span class=\"supfact\">v4</span>, a2);\n  else\n    result = error_set_internal(a2, String, Number L, String, Number L, String,\n                                *(const char **)(<span class=\"supfact\">v3</span> + Number));\n  return result;\n}", "code_t": "void __cdecl filter_mirror_setup(NetFilterState_0 *nf, Error_0 **errp) {\n  MirrorState_0 *<span class=\"supfact\">s</span>;\n  CharDriverState_0 *<span class=\"supfact\">chr</span>;\n  <span class=\"supfact\">s</span> = (MirrorState_0 *)object_dynamic_cast_assert(\n      nf, String, String, Number L, String);\n  if (<span class=\"supfact\">s</span>->outdev) {\n    <span class=\"supfact\">chr</span> =\n        (CharDriverState_0 *)qemu_chr_find(<span class=\"supfact\">s</span>->outdev);\n    if (<span class=\"supfact\">chr</span>)\n      qemu_chr_fe_init(&<span class=\"supfact\">s</span>->chr_out, <span class=\"supfact\">chr</span>, errp);\n    else\n      error_set_internal(errp, String, Number L, String, Number L, String,\n                         <span class=\"supfact\">s</span>->outdev);\n  } else {\n    error_setg_internal(errp, String, Number L, String, String);\n  }\n}", "var": [{"name": "v4", "type": "CharDriverState_0 *", "ref_name": "chr", "ref_type": "CharDriverState_0 *"}, {"name": "v3", "type": "QemuOpts_0 *", "ref_name": "s", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "Poco-Ye", "repo_name": "rk-7.1_android-wifi", "path": "Poco-Ye/rk-7.1_android-wifi/cf54507939a14782bccf5d159254a893fe08c8440a2c396f50cf737c7f46956a", "path_in_repo": "Poco-Ye/rk-7.1_android-wifi/wpa/external/wpa_supplicant_8/wpa_supplicant/src/rsn_supp/tdls.o", "objdump": "0000000000005f55 <wpa_tdls_remove>:\n    5f55:\t55                   \tpush   %rbp\n    5f56:\t48 89 e5             \tmov    %rsp,%rbp\n    5f59:\t48 83 ec 20          \tsub    $0x20,%rsp\n    5f5d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    5f61:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    5f65:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5f69:\t8b 80 d8 02 00 00    \tmov    0x2d8(%rax),%eax\n    5f6f:\t85 c0                \ttest   %eax,%eax\n    5f71:\t0f 85 95 00 00 00    \tjne    600c <wpa_tdls_remove+0xb7>\n    5f77:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5f7b:\t8b 80 dc 02 00 00    \tmov    0x2dc(%rax),%eax\n    5f81:\t85 c0                \ttest   %eax,%eax\n    5f83:\t0f 84 83 00 00 00    \tje     600c <wpa_tdls_remove+0xb7>\n    5f89:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5f8d:\t48 8b 80 c8 02 00 00 \tmov    0x2c8(%rax),%rax\n    5f94:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    5f98:\teb 2b                \tjmp    5fc5 <wpa_tdls_remove+0x70>\n    5f9a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5f9e:\t48 8d 48 10          \tlea    0x10(%rax),%rcx\n    5fa2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    5fa6:\tba 06 00 00 00       \tmov    $0x6,%edx\n    5fab:\t48 89 c6             \tmov    %rax,%rsi\n    5fae:\t48 89 cf             \tmov    %rcx,%rdi\n    5fb1:\te8 00 00 00 00       \tcallq  5fb6 <wpa_tdls_remove+0x61>\n    5fb6:\t85 c0                \ttest   %eax,%eax\n    5fb8:\t74 14                \tje     5fce <wpa_tdls_remove+0x79>\n    5fba:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5fbe:\t48 8b 00             \tmov    (%rax),%rax\n    5fc1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    5fc5:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    5fca:\t75 ce                \tjne    5f9a <wpa_tdls_remove+0x45>\n    5fcc:\teb 01                \tjmp    5fcf <wpa_tdls_remove+0x7a>\n    5fce:\t90                   \tnop\n    5fcf:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    5fd4:\t74 39                \tje     600f <wpa_tdls_remove+0xba>\n    5fd6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5fda:\t8b 80 38 01 00 00    \tmov    0x138(%rax),%eax\n    5fe0:\t85 c0                \ttest   %eax,%eax\n    5fe2:\t74 2b                \tje     600f <wpa_tdls_remove+0xba>\n    5fe4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5fe8:\t8b 80 e0 02 00 00    \tmov    0x2e0(%rax),%eax\n    5fee:\t85 c0                \ttest   %eax,%eax\n    5ff0:\t74 1e                \tje     6010 <wpa_tdls_remove+0xbb>\n    5ff2:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    5ff6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5ffa:\tba 1a 00 00 00       \tmov    $0x1a,%edx\n    5fff:\t48 89 ce             \tmov    %rcx,%rsi\n    6002:\t48 89 c7             \tmov    %rax,%rdi\n    6005:\te8 5d aa ff ff       \tcallq  a67 <wpa_tdls_do_teardown>\n    600a:\teb 04                \tjmp    6010 <wpa_tdls_remove+0xbb>\n    600c:\t90                   \tnop\n    600d:\teb 01                \tjmp    6010 <wpa_tdls_remove+0xbb>\n    600f:\t90                   \tnop\n    6010:\tc9                   \tleaveq \n    6011:\tc3                   \tretq   ", "code_s": "int __fastcall wpa_tdls_remove(__int64 a1, const void *a2) {\n  __int64 v2;\n  __int64 <span class=\"supfact\">i</span>;\n  LODWORD(v2) = *(_DWORD *)(a1 + Number);\n  if (!(_DWORD)v2) {\n    LODWORD(v2) = *(_DWORD *)(a1 + Number);\n    if ((_DWORD)v2) {\n      v2 = *(_QWORD *)(a1 + Number);\n      for (<span class=\"supfact\">i</span> = v2; <span class=\"supfact\">i</span>;\n           <span class=\"supfact\">i</span> = *(_QWORD *)<span class=\"supfact\">i</span>) {\n        LODWORD(v2) =\n            memcmp((const void *)(<span class=\"supfact\">i</span> + Number), a2, Number);\n        if (!(_DWORD)v2)\n          break;\n        v2 = *(_QWORD *)<span class=\"supfact\">i</span>;\n      }\n      if (<span class=\"supfact\">i</span>) {\n        LODWORD(v2) = *(_DWORD *)(<span class=\"supfact\">i</span> + Number);\n        if ((_DWORD)v2) {\n          LODWORD(v2) = *(_DWORD *)(a1 + Number);\n          if ((_DWORD)v2)\n            LODWORD(v2) = wpa_tdls_do_teardown(a1, <span class=\"supfact\">i</span>, Number);\n        }\n      }\n    }\n  }\n  return v2;\n}", "code_t": "void __cdecl wpa_tdls_remove(wpa_sm *sm, const u8 *addr) {\n  wpa_tdls_peer *<span class=\"supfact\">peer</span>;\n  if (!sm->tdls_disabled && sm->tdls_supported) {\n    for (<span class=\"supfact\">peer</span> = sm->tdls;\n         <span class=\"supfact\">peer</span> &&\n         memcmp(<span class=\"supfact\">peer</span>->addr, addr, Number);\n         <span class=\"supfact\">peer</span> = <span class=\"supfact\">peer</span>->next)\n      ;\n    if (<span class=\"supfact\">peer</span> && <span class=\"supfact\">peer</span>->tpk_success) {\n      if (sm->tdls_external_setup)\n        wpa_tdls_do_teardown(sm, <span class=\"supfact\">peer</span>, Number);\n    }\n  }\n}", "var": [{"name": "i", "type": "wpa_tdls_peer *", "ref_name": "peer", "ref_type": "wpa_tdls_peer *"}], "body_in_train": false}, {"repo_owner": "antmicro", "repo_name": "riscv-qemu-archived", "path": "antmicro/riscv-qemu-archived/0288640a952fc77ab510c052f3bf6673211c7a2010c379d5d7195c9f04570bda", "path_in_repo": "antmicro/riscv-qemu-archived//hw/usb/hcd-ehci.o", "objdump": "0000000000005879 <usb_ehci_post_load>:\n    5879:\t55                   \tpush   %rbp\n    587a:\t48 89 e5             \tmov    %rsp,%rbp\n    587d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    5881:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n    5884:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5888:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    588c:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    5893:\teb 7c                \tjmp    5911 <usb_ehci_post_load+0x98>\n    5895:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    5899:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    589c:\t48 63 d2             \tmovslq %edx,%rdx\n    589f:\t48 81 c2 da 00 00 00 \tadd    $0xda,%rdx\n    58a6:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n    58aa:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    58ae:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    58b3:\t74 57                \tje     590c <usb_ehci_post_load+0x93>\n    58b5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    58b9:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    58bc:\t48 63 d2             \tmovslq %edx,%rdx\n    58bf:\t48 81 c2 3c 01 00 00 \tadd    $0x13c,%rdx\n    58c6:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    58c9:\t25 00 20 00 00       \tand    $0x2000,%eax\n    58ce:\t85 c0                \ttest   %eax,%eax\n    58d0:\t74 2d                \tje     58ff <usb_ehci_post_load+0x86>\n    58d2:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    58d6:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    58d9:\t48 63 d0             \tmovslq %eax,%rdx\n    58dc:\t48 89 d0             \tmov    %rdx,%rax\n    58df:\t48 c1 e0 03          \tshl    $0x3,%rax\n    58e3:\t48 01 d0             \tadd    %rdx,%rax\n    58e6:\t48 c1 e0 03          \tshl    $0x3,%rax\n    58ea:\t48 01 c8             \tadd    %rcx,%rax\n    58ed:\t48 05 20 05 00 00    \tadd    $0x520,%rax\n    58f3:\t48 8b 10             \tmov    (%rax),%rdx\n    58f6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    58fa:\t48 89 10             \tmov    %rdx,(%rax)\n    58fd:\teb 0e                \tjmp    590d <usb_ehci_post_load+0x94>\n    58ff:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5903:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    590a:\teb 01                \tjmp    590d <usb_ehci_post_load+0x94>\n    590c:\t90                   \tnop\n    590d:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    5911:\t83 7d ec 05          \tcmpl   $0x5,-0x14(%rbp)\n    5915:\t0f 8e 7a ff ff ff    \tjle    5895 <usb_ehci_post_load+0x1c>\n    591b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5920:\t5d                   \tpop    %rbp\n    5921:\tc3                   \tretq   ", "code_s": "__int64 __fastcall usb_ehci_post_load(__int64 a1) {\n  int <span class=\"supfact\">i</span>;\n  _QWORD *<span class=\"supfact\">v3</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v3</span> =\n        *(_QWORD **)(a1 + Number * (<span class=\"supfact\">i</span> + Number L));\n    if (<span class=\"supfact\">v3</span>) {\n      if ((*(_DWORD *)(a1 + Number * (<span class=\"supfact\">i</span> + Number L)) &\n           Number) != Number)\n        *<span class=\"supfact\">v3</span> =\n            *(_QWORD *)(a1 + Number L * <span class=\"supfact\">i</span> + Number);\n      else\n        *<span class=\"supfact\">v3</span> = Number L;\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl usb_ehci_post_load(void *opaque, int version_id) {\n  int <span class=\"supfact\">i</span>;\n  USBPort_0 *<span class=\"supfact\">companion</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">companion</span> =\n        (USBPort_0 *)*((_QWORD *)opaque + <span class=\"supfact\">i</span> + Number);\n    if (<span class=\"supfact\">companion</span>) {\n      if ((*((_DWORD *)opaque + <span class=\"supfact\">i</span> + Number) & Number) != Number)\n        <span class=\"supfact\">companion</span>->dev = (USBDevice_0 *)*(\n            (_QWORD *)opaque + Number * <span class=\"supfact\">i</span> + Number);\n      else\n        <span class=\"supfact\">companion</span>->dev = Number L;\n    }\n  }\n  return Number;\n}", "var": [{"name": "v3", "type": "USBPort_0 *", "ref_name": "companion", "ref_type": "USBPort_0 *"}, {"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "0000000000001d99 <_nocheck__trace_megasas_scsi_write_start>:\n    1d99:\t55                   \tpush   %rbp\n    1d9a:\t48 89 e5             \tmov    %rsp,%rbp\n    1d9d:\t41 54                \tpush   %r12\n    1d9f:\t53                   \tpush   %rbx\n    1da0:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1da4:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    1da7:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    1daa:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1db1:\t00 00 \n    1db3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1db7:\t31 c0                \txor    %eax,%eax\n    1db9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1dbf <_nocheck__trace_megasas_scsi_write_start+0x26>\n    1dbf:\t85 c0                \ttest   %eax,%eax\n    1dc1:\t0f 95 c0             \tsetne  %al\n    1dc4:\t0f b6 c0             \tmovzbl %al,%eax\n    1dc7:\t48 85 c0             \ttest   %rax,%rax\n    1dca:\t74 63                \tje     1e2f <_nocheck__trace_megasas_scsi_write_start+0x96>\n    1dcc:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 1dd3 <_nocheck__trace_megasas_scsi_write_start+0x3a>\n    1dd3:\t66 85 c0             \ttest   %ax,%ax\n    1dd6:\t74 57                \tje     1e2f <_nocheck__trace_megasas_scsi_write_start+0x96>\n    1dd8:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    1ddd:\te8 4b ea ff ff       \tcallq  82d <qemu_loglevel_mask>\n    1de2:\t84 c0                \ttest   %al,%al\n    1de4:\t74 49                \tje     1e2f <_nocheck__trace_megasas_scsi_write_start+0x96>\n    1de6:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1dea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1def:\t48 89 c7             \tmov    %rax,%rdi\n    1df2:\te8 00 00 00 00       \tcallq  1df7 <_nocheck__trace_megasas_scsi_write_start+0x5e>\n    1df7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1dfb:\t49 89 c4             \tmov    %rax,%r12\n    1dfe:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1e02:\t48 89 c3             \tmov    %rax,%rbx\n    1e05:\te8 00 00 00 00       \tcallq  1e0a <_nocheck__trace_megasas_scsi_write_start+0x71>\n    1e0a:\t8b 4d c8             \tmov    -0x38(%rbp),%ecx\n    1e0d:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    1e10:\t41 89 c9             \tmov    %ecx,%r9d\n    1e13:\t41 89 d0             \tmov    %edx,%r8d\n    1e16:\t4c 89 e1             \tmov    %r12,%rcx\n    1e19:\t48 89 da             \tmov    %rbx,%rdx\n    1e1c:\t89 c6                \tmov    %eax,%esi\n    1e1e:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1e25 <_nocheck__trace_megasas_scsi_write_start+0x8c>\n    1e25:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e2a:\te8 00 00 00 00       \tcallq  1e2f <_nocheck__trace_megasas_scsi_write_start+0x96>\n    1e2f:\t90                   \tnop\n    1e30:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1e34:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1e3b:\t00 00 \n    1e3d:\t74 05                \tje     1e44 <_nocheck__trace_megasas_scsi_write_start+0xab>\n    1e3f:\te8 00 00 00 00       \tcallq  1e44 <_nocheck__trace_megasas_scsi_write_start+0xab>\n    1e44:\t48 83 c4 30          \tadd    $0x30,%rsp\n    1e48:\t5b                   \tpop    %rbx\n    1e49:\t41 5c                \tpop    %r12\n    1e4b:\t5d                   \tpop    %rbp\n    1e4c:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_scsi_write_start(\n    unsigned int a1, unsigned int a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_SCSI_WRITE_START_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v2 = <span class=\"supfact\">tv</span>.tv_usec;\n    v3 = <span class=\"supfact\">tv</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, a1, a2);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v7</span>;\n}", "code_t": "void __cdecl nocheck__trace_megasas_scsi_write_start(int cmd, int len) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_SCSI_WRITE_START_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v2 = <span class=\"supfact\">_now</span>.tv_usec;\n    v3 = <span class=\"supfact\">_now</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, (unsigned int)cmd, (unsigned int)len);\n  }\n}", "var": [{"name": "v7", "type": "unsigned __int64", "ref_name": "v6", "ref_type": "unsigned __int64"}, {"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "bloodstalker", "repo_name": "blogstuff", "path": "bloodstalker/blogstuff/e5d1c8fad2951977dc94940e542db30173b87fe2732e6c1c20f8e810270889e7", "path_in_repo": "bloodstalker/blogstuff/src/cstruct2luatbale/lua/lua", "objdump": "000000000040ba40 <luaD_shrinkstack>:\n  40ba40:\t55                   \tpush   %rbp\n  40ba41:\t48 89 e5             \tmov    %rsp,%rbp\n  40ba44:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40ba48:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40ba4c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ba50:\t48 89 c7             \tmov    %rax,%rdi\n  40ba53:\te8 7e ff ff ff       \tcallq  40b9d6 <stackinuse>\n  40ba58:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40ba5b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40ba5e:\t8d 50 07             \tlea    0x7(%rax),%edx\n  40ba61:\t85 c0                \ttest   %eax,%eax\n  40ba63:\t0f 48 c2             \tcmovs  %edx,%eax\n  40ba66:\tc1 f8 03             \tsar    $0x3,%eax\n  40ba69:\t89 c2                \tmov    %eax,%edx\n  40ba6b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40ba6e:\t01 d0                \tadd    %edx,%eax\n  40ba70:\t83 c0 0a             \tadd    $0xa,%eax\n  40ba73:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40ba76:\t81 7d fc 40 42 0f 00 \tcmpl   $0xf4240,-0x4(%rbp)\n  40ba7d:\t7e 07                \tjle    40ba86 <luaD_shrinkstack+0x46>\n  40ba7f:\tc7 45 fc 40 42 0f 00 \tmovl   $0xf4240,-0x4(%rbp)\n  40ba86:\t81 7d f8 3b 42 0f 00 \tcmpl   $0xf423b,-0x8(%rbp)\n  40ba8d:\t7f 25                \tjg     40bab4 <luaD_shrinkstack+0x74>\n  40ba8f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ba93:\t8b 80 b0 00 00 00    \tmov    0xb0(%rax),%eax\n  40ba99:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  40ba9c:\t7d 16                \tjge    40bab4 <luaD_shrinkstack+0x74>\n  40ba9e:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n  40baa1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40baa5:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40baaa:\t89 ce                \tmov    %ecx,%esi\n  40baac:\t48 89 c7             \tmov    %rax,%rdi\n  40baaf:\te8 28 fd ff ff       \tcallq  40b7dc <luaD_reallocstack>\n  40bab4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40bab8:\t48 89 c7             \tmov    %rax,%rdi\n  40babb:\te8 1a c4 00 00       \tcallq  417eda <luaE_shrinkCI>\n  40bac0:\t90                   \tnop\n  40bac1:\tc9                   \tleaveq \n  40bac2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall luaD_shrinkstack(__int64 a1) {\n  int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v2</span> = stackinuse((_QWORD *)a1);\n  <span class=\"supfact\">v3</span> =\n      <span class=\"supfact\">v2</span> / Number + <span class=\"supfact\">v2</span> + Number;\n  if (<span class=\"supfact\">v3</span> > Number)\n    <span class=\"supfact\">v3</span> = Number;\n  if (<span class=\"supfact\">v2</span> <= Number &&\n      <span class=\"supfact\">v3</span> < *(_DWORD *)(a1 + Number))\n    luaD_reallocstack(a1, <span class=\"supfact\">v3</span>, Number);\n  return luaE_shrinkCI(a1);\n}", "code_t": "void __cdecl luaD_shrinkstack(lua_State_0 *L) {\n  int <span class=\"supfact\">inuse</span>;\n  int <span class=\"supfact\">goodsize</span>;\n  <span class=\"supfact\">inuse</span> = stackinuse(L);\n  <span class=\"supfact\">goodsize</span> =\n      <span class=\"supfact\">inuse</span> / Number + <span class=\"supfact\">inuse</span> + Number;\n  if (<span class=\"supfact\">goodsize</span> > Number)\n    <span class=\"supfact\">goodsize</span> = Number;\n  if (<span class=\"supfact\">inuse</span> <= Number &&\n      <span class=\"supfact\">goodsize</span> < L->stacksize)\n    luaD_reallocstack(L, <span class=\"supfact\">goodsize</span>, Number);\n  luaE_shrinkCI(L);\n}", "var": [{"name": "v3", "type": "int", "ref_name": "goodsize", "ref_type": "int"}, {"name": "v2", "type": "int", "ref_name": "inuse", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "3Pills", "repo_name": "OpenGL-Project", "path": "3Pills/OpenGL-Project/12440ccbde6819bea87c91b1510ccd413b8d87894aadda713e1ae5d59eea430b", "path_in_repo": "3Pills/OpenGL-Project/deps/atb/src/TwBar.o", "objdump": "00000000000218d8 <_ZNK6CTwBar11RotoGetStepEv>:\n   218d8:\t55                   \tpush   %rbp\n   218d9:\t48 89 e5             \tmov    %rsp,%rbp\n   218dc:\t48 83 ec 20          \tsub    $0x20,%rsp\n   218e0:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   218e4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   218e8:\t48 8b 80 18 03 00 00 \tmov    0x318(%rax),%rax\n   218ef:\t48 85 c0             \ttest   %rax,%rax\n   218f2:\t75 1f                \tjne    21913 <_ZNK6CTwBar11RotoGetStepEv+0x3b>\n   218f4:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 218fb <_ZNK6CTwBar11RotoGetStepEv+0x23>\n   218fb:\tba ca 1b 00 00       \tmov    $0x1bca,%edx\n   21900:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 21907 <_ZNK6CTwBar11RotoGetStepEv+0x2f>\n   21907:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2190e <_ZNK6CTwBar11RotoGetStepEv+0x36>\n   2190e:\te8 00 00 00 00       \tcallq  21913 <_ZNK6CTwBar11RotoGetStepEv+0x3b>\n   21913:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 2191b <_ZNK6CTwBar11RotoGetStepEv+0x43>\n   2191a:\t00 \n   2191b:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n   21920:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   21924:\t48 8b 80 18 03 00 00 \tmov    0x318(%rax),%rax\n   2192b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   2192f:\t48 8b 92 18 03 00 00 \tmov    0x318(%rdx),%rdx\n   21936:\t48 8b 12             \tmov    (%rdx),%rdx\n   21939:\t48 83 c2 68          \tadd    $0x68,%rdx\n   2193d:\t4c 8b 02             \tmov    (%rdx),%r8\n   21940:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n   21944:\t48 89 d1             \tmov    %rdx,%rcx\n   21947:\tba 00 00 00 00       \tmov    $0x0,%edx\n   2194c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   21951:\t48 89 c7             \tmov    %rax,%rdi\n   21954:\t41 ff d0             \tcallq  *%r8\n   21957:\tf2 0f 10 45 f8       \tmovsd  -0x8(%rbp),%xmm0\n   2195c:\tc9                   \tleaveq \n   2195d:\tc3                   \tretq   ", "code_s": "double __fastcall CTwBar RotoGetStep(CTwBar *this) {\n  __int64 <span class=\"supfact\">v2</span>;\n  if (!*((_QWORD *)this + Number))\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v2</span> = Number;\n  (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD, __int64 *))(\n      **((_QWORD **)this + Number) + Number L))(\n      *((_QWORD *)this + Number), Number L, Number L, &<span class=\"supfact\">v2</span>);\n  return *(double *)&<span class=\"supfact\">v2</span>;\n}", "code_t": "double __cdecl CTwBar RotoGetStep(const CTwBar *const this) {\n  double <span class=\"supfact\">step</span>;\n  if (!this->m_Roto.m_Var)\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">step</span> = Number;\n  (*((void(__fastcall **)(CTwVarAtom *, _QWORD, _QWORD,\n                          double *))this->m_Roto.m_Var->_vptr_CTwVar +\n     Number))(this->m_Roto.m_Var, Number L, Number L, &<span class=\"supfact\">step</span>);\n  return <span class=\"supfact\">step</span>;\n}", "var": [{"name": "v2", "type": "__unk__", "ref_name": "step", "ref_type": "double"}], "body_in_train": false}, {"repo_owner": "XiaokuanOSU", "repo_name": "sgx", "path": "XiaokuanOSU/sgx/333ef868e09f502006dcd7d4bd8ea917f5731545687e969b8882ce6acfef7eb0", "path_in_repo": "XiaokuanOSU/sgx/qemu/hw/pci-host/piix.o", "objdump": "0000000000000ead <piix3_set_irq_level>:\n     ead:\t55                   \tpush   %rbp\n     eae:\t48 89 e5             \tmov    %rsp,%rbp\n     eb1:\t48 83 ec 20          \tsub    $0x20,%rsp\n     eb5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     eb9:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     ebc:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n     ebf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ec3:\t48 8b 50 78          \tmov    0x78(%rax),%rdx\n     ec7:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     eca:\t83 c0 60             \tadd    $0x60,%eax\n     ecd:\t48 98                \tcltq   \n     ecf:\t48 01 d0             \tadd    %rdx,%rax\n     ed2:\t0f b6 00             \tmovzbl (%rax),%eax\n     ed5:\t0f b6 c0             \tmovzbl %al,%eax\n     ed8:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     edb:\t83 7d f4 0f          \tcmpl   $0xf,-0xc(%rbp)\n     edf:\t7f 7d                \tjg     f5e <piix3_set_irq_level+0xb1>\n     ee1:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     ee4:\t48 98                \tcltq   \n     ee6:\t8d 14 85 00 00 00 00 \tlea    0x0(,%rax,4),%edx\n     eed:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     ef0:\t01 d0                \tadd    %edx,%eax\n     ef2:\tba 01 00 00 00       \tmov    $0x1,%edx\n     ef7:\t89 c1                \tmov    %eax,%ecx\n     ef9:\t48 d3 e2             \tshl    %cl,%rdx\n     efc:\t48 89 d0             \tmov    %rdx,%rax\n     eff:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     f03:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f07:\t48 8b 80 48 08 00 00 \tmov    0x848(%rax),%rax\n     f0e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     f12:\t48 f7 d2             \tnot    %rdx\n     f15:\t48 21 c2             \tand    %rax,%rdx\n     f18:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f1c:\t48 89 90 48 08 00 00 \tmov    %rdx,0x848(%rax)\n     f23:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f27:\t48 8b 90 48 08 00 00 \tmov    0x848(%rax),%rdx\n     f2e:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n     f32:\t0f 95 c0             \tsetne  %al\n     f35:\t0f b6 c0             \tmovzbl %al,%eax\n     f38:\t48 0f af 45 f8       \timul   -0x8(%rbp),%rax\n     f3d:\t48 09 c2             \tor     %rax,%rdx\n     f40:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f44:\t48 89 90 48 08 00 00 \tmov    %rdx,0x848(%rax)\n     f4b:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n     f4e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f52:\t89 d6                \tmov    %edx,%esi\n     f54:\t48 89 c7             \tmov    %rax,%rdi\n     f57:\te8 ed fe ff ff       \tcallq  e49 <piix3_set_irq_pic>\n     f5c:\teb 01                \tjmp    f5f <piix3_set_irq_level+0xb2>\n     f5e:\t90                   \tnop\n     f5f:\tc9                   \tleaveq \n     f60:\tc3                   \tretq   ", "code_s": "__int64 __fastcall piix3_set_irq_level(__int64 a1, int a2, int a3) {\n  __int64 v3;\n  __int64 result;\n  unsigned int <span class=\"supfact\">v6</span>;\n  v3 = *(_QWORD *)(a1 + Number);\n  result = *(unsigned __int8 *)(v3 + a2 + Number);\n  <span class=\"supfact\">v6</span> = *(unsigned __int8 *)(v3 + a2 + Number);\n  if (<span class=\"supfact\">v6</span> <= Number) {\n    *(_QWORD *)(a1 + Number) &=\n        ~(Number L << (Number * (unsigned __int8)<span class=\"supfact\">v6</span> + a2));\n    *(_QWORD *)(a1 + Number) |=\n        (Number L << (Number * (unsigned __int8)<span class=\"supfact\">v6</span> + a2)) *\n        (a3 != Number);\n    result = piix3_set_irq_pic(a1, <span class=\"supfact\">v6</span>);\n  }\n  return result;\n}", "code_t": "void __cdecl piix3_set_irq_level(PIIX3State_0 *piix3, int pirq, int level) {\n  unsigned int <span class=\"supfact\">pic_irq</span>;\n  <span class=\"supfact\">pic_irq</span> = piix3->dev.config[pirq + Number];\n  if (<span class=\"supfact\">pic_irq</span> <= Number) {\n    piix3->pic_levels &= ~(\n        Number L << (Number * (unsigned __int8)<span class=\"supfact\">pic_irq</span> + pirq));\n    piix3->pic_levels |=\n        (Number L << (Number * (unsigned __int8)<span class=\"supfact\">pic_irq</span> +\n                      pirq)) *\n        (level != Number);\n    piix3_set_irq_pic(piix3, <span class=\"supfact\">pic_irq</span>);\n  }\n}", "var": [{"name": "v6", "type": "uint32_t", "ref_name": "pic_irq", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "DarkLord1731", "repo_name": "linux-stable", "path": "DarkLord1731/linux-stable/ae002a7797e45c975313a2da66b635d4700cd79c945b91f3d3612c488a2e7706", "path_in_repo": "DarkLord1731/linux-stable/tools/testing/selftests/bpf/test_progs", "objdump": "00000000004200aa <test_tcp_estats>:\n  4200aa:\t55                   \tpush   %rbp\n  4200ab:\t48 89 e5             \tmov    %rsp,%rbp\n  4200ae:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4200b2:\t48 c7 45 f8 e0 79 42 \tmovq   $0x4279e0,-0x8(%rbp)\n  4200b9:\t00 \n  4200ba:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  4200c1:\t48 8d 4d e8          \tlea    -0x18(%rbp),%rcx\n  4200c5:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  4200c9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4200cd:\tbe 05 00 00 00       \tmov    $0x5,%esi\n  4200d2:\t48 89 c7             \tmov    %rax,%rdi\n  4200d5:\te8 a5 ae fe ff       \tcallq  40af7f <bpf_prog_load>\n  4200da:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  4200dd:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  4200e1:\t0f 95 c0             \tsetne  %al\n  4200e4:\t0f b6 c0             \tmovzbl %al,%eax\n  4200e7:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4200ea:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  4200ee:\t74 45                \tje     420135 <test_tcp_estats+0x8b>\n  4200f0:\t8b 05 82 25 4a 00    \tmov    0x4a2582(%rip),%eax        # 8c2678 <error_cnt>\n  4200f6:\t83 c0 01             \tadd    $0x1,%eax\n  4200f9:\t89 05 79 25 4a 00    \tmov    %eax,0x4a2579(%rip)        # 8c2678 <error_cnt>\n  4200ff:\tba f4 79 42 00       \tmov    $0x4279f4,%edx\n  420104:\tbe 30 7a 42 00       \tmov    $0x427a30,%esi\n  420109:\tbf f5 79 42 00       \tmov    $0x4279f5,%edi\n  42010e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  420113:\te8 08 21 fe ff       \tcallq  402220 <printf@plt>\n  420118:\te8 73 1f fe ff       \tcallq  402090 <__errno_location@plt>\n  42011d:\t8b 10                \tmov    (%rax),%edx\n  42011f:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  420122:\t89 c6                \tmov    %eax,%esi\n  420124:\tbf 01 7a 42 00       \tmov    $0x427a01,%edi\n  420129:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42012e:\te8 ed 20 fe ff       \tcallq  402220 <printf@plt>\n  420133:\teb 2d                \tjmp    420162 <test_tcp_estats+0xb8>\n  420135:\t8b 05 45 25 4a 00    \tmov    0x4a2545(%rip),%eax        # 8c2680 <pass_cnt>\n  42013b:\t83 c0 01             \tadd    $0x1,%eax\n  42013e:\t89 05 3c 25 4a 00    \tmov    %eax,0x4a253c(%rip)        # 8c2680 <pass_cnt>\n  420144:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  420147:\t89 c1                \tmov    %eax,%ecx\n  420149:\tba f4 79 42 00       \tmov    $0x4279f4,%edx\n  42014e:\tbe 30 7a 42 00       \tmov    $0x427a30,%esi\n  420153:\tbf 12 7a 42 00       \tmov    $0x427a12,%edi\n  420158:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42015d:\te8 be 20 fe ff       \tcallq  402220 <printf@plt>\n  420162:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  420166:\t74 11                \tje     420179 <test_tcp_estats+0xcf>\n  420168:\t8b 05 0a 25 4a 00    \tmov    0x4a250a(%rip),%eax        # 8c2678 <error_cnt>\n  42016e:\t83 c0 01             \tadd    $0x1,%eax\n  420171:\t89 05 01 25 4a 00    \tmov    %eax,0x4a2501(%rip)        # 8c2678 <error_cnt>\n  420177:\teb 0c                \tjmp    420185 <test_tcp_estats+0xdb>\n  420179:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  42017d:\t48 89 c7             \tmov    %rax,%rdi\n  420180:\te8 d6 98 fe ff       \tcallq  409a5b <bpf_object__close>\n  420185:\tc9                   \tleaveq \n  420186:\tc3                   \tretq   ", "code_s": "void test_tcp_estats() {\n  int *v0;\n  __int64 v1;\n  __int64 <span class=\"supfact\">v2</span>;\n  char <span class=\"supfact\">v3</span>[Number];\n  _BOOL4 <span class=\"supfact\">v4</span>;\n  unsigned int <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  const char *<span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = String;\n  <span class=\"supfact\">v6</span> = Number;\n  <span class=\"supfact\">v5</span> =\n      bpf_prog_load((__int64)String, Number, (__int64)&<span class=\"supfact\">v2</span>,\n                    (__int64)<span class=\"supfact\">v3</span>);\n  <span class=\"supfact\">v4</span> = <span class=\"supfact\">v5</span> != Number;\n  if (<span class=\"supfact\">v5</span>) {\n    ++error_cnt;\n    printf(String, String, (const char *)&unk_4279F4);\n    v0 = __errno_location();\n    v1 = <span class=\"supfact\">v5</span>;\n    printf(String, <span class=\"supfact\">v5</span>, (unsigned int)*v0);\n  } else {\n    ++pass_cnt;\n    v1 = (__int64)String;\n    printf(String, String, (const char *)&unk_4279F4, <span class=\"supfact\">v6</span>);\n  }\n  if (<span class=\"supfact\">v5</span>)\n    ++error_cnt;\n  else\n    bpf_object__close(<span class=\"supfact\">v2</span>, v1);\n}", "code_t": "void __cdecl test_tcp_estats() {\n  int *v0;\n  bpf_object *<span class=\"supfact\">obj</span>;\n  int <span class=\"supfact\">prog_fd</span>;\n  int <span class=\"supfact\">__ret</span>;\n  int <span class=\"supfact\">err</span>;\n  __u32 <span class=\"supfact\">duration</span>;\n  const char *<span class=\"supfact\">file</span>;\n  <span class=\"supfact\">file</span> = String;\n  <span class=\"supfact\">duration</span> = Number;\n  <span class=\"supfact\">err</span> =\n      bpf_prog_load(String, BPF_PROG_TYPE_TRACEPOINT, &<span class=\"supfact\">obj</span>,\n                    &<span class=\"supfact\">prog_fd</span>);\n  <span class=\"supfact\">__ret</span> = <span class=\"supfact\">err</span> != Number;\n  if (<span class=\"supfact\">err</span>) {\n    ++error_cnt;\n    printf(String, String, (const char *)&unk_4279F4);\n    v0 = __errno_location();\n    printf(String, (unsigned int)<span class=\"supfact\">err</span>, (unsigned int)*v0);\n  } else {\n    ++pass_cnt;\n    printf(String, String, (const char *)&unk_4279F4, <span class=\"supfact\">duration</span>);\n  }\n  if (<span class=\"supfact\">err</span>)\n    ++error_cnt;\n  else\n    bpf_object__close(<span class=\"supfact\">obj</span>);\n}", "var": [{"name": "v7", "type": "const char *", "ref_name": "file", "ref_type": "const char *"}, {"name": "v6", "type": "int", "ref_name": "duration", "ref_type": "__u32"}, {"name": "v5", "type": "int", "ref_name": "err", "ref_type": "int"}, {"name": "v4", "type": "int", "ref_name": "__ret", "ref_type": "int"}, {"name": "v3", "type": "char[4]", "ref_name": "prog_fd", "ref_type": "int"}, {"name": "v2", "type": "const char *", "ref_name": "obj", "ref_type": "bpf_object *"}], "body_in_train": false}, {"repo_owner": "wjfsanhe", "repo_name": "newPlayer", "path": "wjfsanhe/newPlayer/eb6d0bc4752d62593240f70ad752b978982051aafedffe72414fa0271a91e02d", "path_in_repo": "wjfsanhe/newPlayer/amffmpeg/src/libavcodec/h264.o", "objdump": "0000000000015525 <prefetch_motion>:\n   15525:\t48 83 ec 48          \tsub    $0x48,%rsp\n   15529:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n   1552e:\t89 74 24 04          \tmov    %esi,0x4(%rsp)\n   15532:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   15537:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n   1553c:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n   15541:\t0f b6 c0             \tmovzbl %al,%eax\n   15544:\t48 8b 74 24 08       \tmov    0x8(%rsp),%rsi\n   15549:\t48 63 c8             \tmovslq %eax,%rcx\n   1554c:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n   15550:\t48 63 d0             \tmovslq %eax,%rdx\n   15553:\t48 89 d0             \tmov    %rdx,%rax\n   15556:\t48 c1 e0 02          \tshl    $0x2,%rax\n   1555a:\t48 01 d0             \tadd    %rdx,%rax\n   1555d:\t48 c1 e0 03          \tshl    $0x3,%rax\n   15561:\t48 01 f0             \tadd    %rsi,%rax\n   15564:\t48 01 c8             \tadd    %rcx,%rax\n   15567:\t48 05 b0 45 00 00    \tadd    $0x45b0,%rax\n   1556d:\t0f b6 00             \tmovzbl (%rax),%eax\n   15570:\t0f be c0             \tmovsbl %al,%eax\n   15573:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n   15577:\t83 7c 24 34 00       \tcmpl   $0x0,0x34(%rsp)\n   1557c:\t0f 88 b8 01 00 00    \tjs     1573a <prefetch_motion+0x215>\n   15582:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n   15587:\t0f b6 c0             \tmovzbl %al,%eax\n   1558a:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n   1558f:\t48 63 f0             \tmovslq %eax,%rsi\n   15592:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n   15596:\t48 63 d0             \tmovslq %eax,%rdx\n   15599:\t48 89 d0             \tmov    %rdx,%rax\n   1559c:\t48 c1 e0 02          \tshl    $0x2,%rax\n   155a0:\t48 01 d0             \tadd    %rdx,%rax\n   155a3:\t48 c1 e0 03          \tshl    $0x3,%rax\n   155a7:\t48 01 f0             \tadd    %rsi,%rax\n   155aa:\t48 05 1c 11 00 00    \tadd    $0x111c,%rax\n   155b0:\t0f b7 04 81          \tmovzwl (%rcx,%rax,4),%eax\n   155b4:\t66 c1 f8 02          \tsar    $0x2,%ax\n   155b8:\t0f bf d0             \tmovswl %ax,%edx\n   155bb:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n   155c0:\t8b 80 40 36 00 00    \tmov    0x3640(%rax),%eax\n   155c6:\tc1 e0 04             \tshl    $0x4,%eax\n   155c9:\t01 d0                \tadd    %edx,%eax\n   155cb:\t83 c0 08             \tadd    $0x8,%eax\n   155ce:\t89 44 24 30          \tmov    %eax,0x30(%rsp)\n   155d2:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n   155d7:\t0f b6 c0             \tmovzbl %al,%eax\n   155da:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n   155df:\t48 63 f0             \tmovslq %eax,%rsi\n   155e2:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n   155e6:\t48 63 d0             \tmovslq %eax,%rdx\n   155e9:\t48 89 d0             \tmov    %rdx,%rax\n   155ec:\t48 c1 e0 02          \tshl    $0x2,%rax\n   155f0:\t48 01 d0             \tadd    %rdx,%rax\n   155f3:\t48 c1 e0 03          \tshl    $0x3,%rax\n   155f7:\t48 01 f0             \tadd    %rsi,%rax\n   155fa:\t0f b7 84 81 72 44 00 \tmovzwl 0x4472(%rcx,%rax,4),%eax\n   15601:\t00 \n   15602:\t66 c1 f8 02          \tsar    $0x2,%ax\n   15606:\t0f bf d0             \tmovswl %ax,%edx\n   15609:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n   1560e:\t8b 80 44 36 00 00    \tmov    0x3644(%rax),%eax\n   15614:\tc1 e0 04             \tshl    $0x4,%eax\n   15617:\t01 d0                \tadd    %edx,%eax\n   15619:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n   1561d:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n   15621:\t48 98                \tcltq   \n   15623:\t48 69 d0 b8 02 00 00 \timul   $0x2b8,%rax,%rdx\n   1562a:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n   1562e:\t48 98                \tcltq   \n   15630:\t48 69 c0 80 82 00 00 \timul   $0x8280,%rax,%rax\n   15637:\t48 01 d0             \tadd    %rdx,%rax\n   1563a:\t48 8d 90 e0 ee 01 00 \tlea    0x1eee0(%rax),%rdx\n   15641:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   15646:\t48 01 d0             \tadd    %rdx,%rax\n   15649:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n   1564e:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n   15653:\t8b 80 40 36 00 00    \tmov    0x3640(%rax),%eax\n   15659:\t83 e0 03             \tand    $0x3,%eax\n   1565c:\t8d 14 85 00 00 00 00 \tlea    0x0(,%rax,4),%edx\n   15663:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   15667:\t01 c2                \tadd    %eax,%edx\n   15669:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   1566e:\t8b 80 e8 46 00 00    \tmov    0x46e8(%rax),%eax\n   15674:\t0f af d0             \timul   %eax,%edx\n   15677:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n   1567b:\t01 d0                \tadd    %edx,%eax\n   1567d:\t83 c0 40             \tadd    $0x40,%eax\n   15680:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n   15684:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n   15689:\t48 8b 88 d8 26 00 00 \tmov    0x26d8(%rax),%rcx\n   15690:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n   15695:\t8b 80 d0 00 00 00    \tmov    0xd0(%rax),%eax\n   1569b:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n   156a0:\t48 8b 32             \tmov    (%rdx),%rsi\n   156a3:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n   156a7:\t48 63 d2             \tmovslq %edx,%rdx\n   156aa:\t48 8d 3c 16          \tlea    (%rsi,%rdx,1),%rdi\n   156ae:\tba 04 00 00 00       \tmov    $0x4,%edx\n   156b3:\t89 c6                \tmov    %eax,%esi\n   156b5:\tff d1                \tcallq  *%rcx\n   156b7:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n   156bb:\td1 f8                \tsar    %eax\n   156bd:\t89 c2                \tmov    %eax,%edx\n   156bf:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   156c3:\td1 f8                \tsar    %eax\n   156c5:\t89 c1                \tmov    %eax,%ecx\n   156c7:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n   156cc:\t8b 80 40 36 00 00    \tmov    0x3640(%rax),%eax\n   156d2:\t83 e0 07             \tand    $0x7,%eax\n   156d5:\t01 c1                \tadd    %eax,%ecx\n   156d7:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n   156dc:\t8b 80 d4 00 00 00    \tmov    0xd4(%rax),%eax\n   156e2:\t0f af c1             \timul   %ecx,%eax\n   156e5:\t01 d0                \tadd    %edx,%eax\n   156e7:\t83 c0 40             \tadd    $0x40,%eax\n   156ea:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n   156ee:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n   156f3:\t48 8b 80 d8 26 00 00 \tmov    0x26d8(%rax),%rax\n   156fa:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n   156ff:\t48 83 c2 10          \tadd    $0x10,%rdx\n   15703:\t48 8b 0a             \tmov    (%rdx),%rcx\n   15706:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n   1570b:\t48 83 c2 08          \tadd    $0x8,%rdx\n   1570f:\t48 8b 12             \tmov    (%rdx),%rdx\n   15712:\t48 29 d1             \tsub    %rdx,%rcx\n   15715:\t48 89 ca             \tmov    %rcx,%rdx\n   15718:\t89 d6                \tmov    %edx,%esi\n   1571a:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n   1571f:\t48 83 c2 08          \tadd    $0x8,%rdx\n   15723:\t48 8b 0a             \tmov    (%rdx),%rcx\n   15726:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n   1572a:\t48 63 d2             \tmovslq %edx,%rdx\n   1572d:\t48 01 d1             \tadd    %rdx,%rcx\n   15730:\tba 02 00 00 00       \tmov    $0x2,%edx\n   15735:\t48 89 cf             \tmov    %rcx,%rdi\n   15738:\tff d0                \tcallq  *%rax\n   1573a:\t90                   \tnop\n   1573b:\t48 83 c4 48          \tadd    $0x48,%rsp\n   1573f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall prefetch_motion(__int64 a1, int a2) {\n  __int64 result;\n  _QWORD *<span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  result = (unsigned int)*(char *)(a1 + Number L * a2 + Number);\n  if (*(char *)(a1 + Number L * a2 + Number) >= Number) {\n    <span class=\"supfact\">v5</span> =\n        (*(__int16 *)(a1 + Number * (Number L * a2 + Number)) >> Number) +\n        Number * *(_DWORD *)(a1 + Number) + Number;\n    <span class=\"supfact\">v4</span> =\n        (*(__int16 *)(a1 + Number * (Number L * a2 + Number) + Number) >>\n         Number) +\n        Number * *(_DWORD *)(a1 + Number);\n    <span class=\"supfact\">v3</span> =\n        (_QWORD *)(Number L * *(char *)(a1 + Number L * a2 + Number) +\n                   Number L * a2 + Number + a1);\n    (*(void(__fastcall **)(_QWORD, _QWORD, __int64))(a1 + Number))(\n        *<span class=\"supfact\">v3</span> +\n            *(_DWORD *)(a1 + Number) *\n                (<span class=\"supfact\">v4</span> +\n                 Number * (*(_DWORD *)(a1 + Number) & Number)) +\n            <span class=\"supfact\">v5</span> + Number,\n        *(unsigned int *)(a1 + Number), Number L);\n    result = (*(__int64(__fastcall **)(_QWORD, _QWORD, __int64))(a1 + Number))(\n        (<span class=\"supfact\">v5</span> >> Number) +\n            ((*(_DWORD *)(a1 + Number) & Number) +\n             (<span class=\"supfact\">v4</span> >> Number)) *\n                *(_DWORD *)(a1 + Number) +\n            Number + <span class=\"supfact\">v3</span>[Number],\n        (unsigned int)<span class=\"supfact\">v3</span>[Number] -\n            (unsigned int)<span class=\"supfact\">v3</span>[Number],\n        Number L);\n  }\n  return result;\n}", "code_t": "void __cdecl prefetch_motion(H264Context_0 *h, int list) {\n  Picture_0 *<span class=\"supfact\">src</span>;\n  int <span class=\"supfact\">my</span>;\n  int <span class=\"supfact\">mx</span>;\n  if (h->ref_cache[list][Number] >= Number) {\n    <span class=\"supfact\">mx</span> = (h->mv_cache[list][Number][Number] >> Number) +\n                         Number * h->s.mb_x + Number;\n    <span class=\"supfact\">my</span> =\n        (h->mv_cache[list][Number][Number] >> Number) + Number * h->s.mb_y;\n    <span class=\"supfact\">src</span> = &h->ref_list[list][h->ref_cache[list][Number]];\n    h->s.dsp.prefetch(\n        &<span class=\"supfact\">src</span>\n             ->data[Number][h->mb_linesize * (<span class=\"supfact\">my</span> +\n                                              Number * (h->s.mb_x & Number)) +\n                            Number + <span class=\"supfact\">mx</span>],\n        h->s.linesize, Number);\n    h->s.dsp.prefetch(\n        &<span class=\"supfact\">src</span>\n             ->data[Number]\n                   [(<span class=\"supfact\">mx</span> >> Number) + Number +\n                    ((h->s.mb_x & Number) + (<span class=\"supfact\">my</span> >> Number)) *\n                        h->s.uvlinesize],\n        (unsigned int)<span class=\"supfact\">src</span>->data[Number] -\n            (unsigned int)<span class=\"supfact\">src</span>->data[Number],\n        Number);\n  }\n}", "var": [{"name": "v5", "type": "int", "ref_name": "mx", "ref_type": "int"}, {"name": "v4", "type": "int", "ref_name": "my", "ref_type": "int"}, {"name": "v3", "type": "__unk__", "ref_name": "src", "ref_type": "Picture_0 *"}], "body_in_train": false}, {"repo_owner": "danielfengyu", "repo_name": "MyPlayer", "path": "danielfengyu/MyPlayer/590929d1f67cd7bf363209185b8966b7fe931c30f06cd309969dfdfd41be6899", "path_in_repo": "danielfengyu/MyPlayer/jni/ffmpeg/libavcodec/eatgq.o", "objdump": "0000000000000871 <tgq_dconly>:\n     871:\t48 83 ec 38          \tsub    $0x38,%rsp\n     875:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n     87a:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n     87f:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n     883:\t89 4c 24 08          \tmov    %ecx,0x8(%rsp)\n     887:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     88c:\t8b 80 f0 17 00 00    \tmov    0x17f0(%rax),%eax\n     892:\t0f af 44 24 08       \timul   0x8(%rsp),%eax\n     897:\t05 08 08 00 00       \tadd    $0x808,%eax\n     89c:\tc1 f8 04             \tsar    $0x4,%eax\n     89f:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n     8a3:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n     8a7:\tb0 00                \tmov    $0x0,%al\n     8a9:\t85 c0                \ttest   %eax,%eax\n     8ab:\t74 0b                \tje     8b8 <tgq_dconly+0x47>\n     8ad:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n     8b1:\tf7 d8                \tneg    %eax\n     8b3:\tc1 f8 1f             \tsar    $0x1f,%eax\n     8b6:\teb 04                \tjmp    8bc <tgq_dconly+0x4b>\n     8b8:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n     8bc:\t0f b6 c0             \tmovzbl %al,%eax\n     8bf:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n     8c3:\tc7 44 24 2c 00 00 00 \tmovl   $0x0,0x2c(%rsp)\n     8ca:\t00 \n     8cb:\teb 2d                \tjmp    8fa <tgq_dconly+0x89>\n     8cd:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n     8d1:\t0f af 44 24 0c       \timul   0xc(%rsp),%eax\n     8d6:\t48 63 d0             \tmovslq %eax,%rdx\n     8d9:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     8de:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n     8e2:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n     8e6:\tba 08 00 00 00       \tmov    $0x8,%edx\n     8eb:\t89 c6                \tmov    %eax,%esi\n     8ed:\t48 89 cf             \tmov    %rcx,%rdi\n     8f0:\te8 00 00 00 00       \tcallq  8f5 <tgq_dconly+0x84>\n     8f5:\t83 44 24 2c 01       \taddl   $0x1,0x2c(%rsp)\n     8fa:\t83 7c 24 2c 07       \tcmpl   $0x7,0x2c(%rsp)\n     8ff:\t7e cc                \tjle    8cd <tgq_dconly+0x5c>\n     901:\t90                   \tnop\n     902:\t90                   \tnop\n     903:\t48 83 c4 38          \tadd    $0x38,%rsp\n     907:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall tgq_dconly(__int64 a1, __int64 a2, int a3, int a4) {\n  int v4;\n  unsigned __int64 result;\n  int <span class=\"supfact\">c</span>;\n  int <span class=\"supfact\">i</span>;\n  v4 = (a4 * *(_DWORD *)(a1 + Number) + Number) >> Number;\n  LOBYTE(v4) = Number;\n  if (v4)\n    LODWORD(result) =\n        -((a4 * *(_DWORD *)(a1 + Number) + Number) >> Number) >> Number;\n  else\n    LODWORD(result) = (a4 * *(_DWORD *)(a1 + Number) + Number) >> Number;\n  result = (unsigned __int8)result;\n  <span class=\"supfact\">c</span> = (unsigned __int8)result;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    result = (unsigned __int64)memset((void *)(a3 * <span class=\"supfact\">i</span> + a2),\n                                      <span class=\"supfact\">c</span>, Number);\n  return result;\n}", "code_t": "void __cdecl tgq_dconly(TgqContext_0 *s, unsigned __int8 *dst, int dst_stride,\n                        int dc) {\n  int v4;\n  int v5;\n  int <span class=\"supfact\">level</span>;\n  int <span class=\"supfact\">j</span>;\n  v4 = (dc * s->qtable[Number] + Number) >> Number;\n  LOBYTE(v4) = Number;\n  if (v4)\n    v5 = -((dc * s->qtable[Number] + Number) >> Number) >> Number;\n  else\n    v5 = (dc * s->qtable[Number] + Number) >> Number;\n  <span class=\"supfact\">level</span> = (unsigned __int8)v5;\n  for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n       ++<span class=\"supfact\">j</span>)\n    memset(&dst[dst_stride * <span class=\"supfact\">j</span>], <span class=\"supfact\">level</span>, Number);\n}", "var": [{"name": "i", "type": "int", "ref_name": "j", "ref_type": "int"}, {"name": "c", "type": "int", "ref_name": "level", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "jordansissel", "repo_name": "tmux", "path": "jordansissel/tmux/8c54c58ec5c6c45af38e829f1a79d944af77d1a77275700b93d321f9e256a16e", "path_in_repo": "jordansissel/tmux/tags/TMUX_1_0/tmux", "objdump": "0000000000434fe9 <utf8_build>:\n  434fe9:\t55                   \tpush   %rbp\n  434fea:\t48 89 e5             \tmov    %rsp,%rbp\n  434fed:\t48 83 ec 20          \tsub    $0x20,%rsp\n  434ff1:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  434ff8:\te9 d3 00 00 00       \tjmpq   4350d0 <utf8_build+0xe7>\n  434ffd:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  435000:\t48 c1 e0 05          \tshl    $0x5,%rax\n  435004:\t48 05 60 5f 45 00    \tadd    $0x455f60,%rax\n  43500a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  43500e:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n  435015:\teb 44                \tjmp    43505b <utf8_build+0x72>\n  435017:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  43501a:\t3b 45 f0             \tcmp    -0x10(%rbp),%eax\n  43501d:\t74 38                \tje     435057 <utf8_build+0x6e>\n  43501f:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  435022:\t48 c1 e0 05          \tshl    $0x5,%rax\n  435026:\t48 8d 90 60 5f 45 00 \tlea    0x455f60(%rax),%rdx\n  43502d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  435031:\t48 89 d6             \tmov    %rdx,%rsi\n  435034:\t48 89 c7             \tmov    %rax,%rdi\n  435037:\te8 f3 fe ff ff       \tcallq  434f2f <utf8_overlap>\n  43503c:\t85 c0                \ttest   %eax,%eax\n  43503e:\t74 17                \tje     435057 <utf8_build+0x6e>\n  435040:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  435043:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  435046:\t89 c6                \tmov    %eax,%esi\n  435048:\tbf e6 8f 44 00       \tmov    $0x448fe6,%edi\n  43504d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435052:\te8 be 9a fe ff       \tcallq  41eb15 <log_fatalx>\n  435057:\t83 45 f0 01          \taddl   $0x1,-0x10(%rbp)\n  43505b:\t81 7d f0 9c 00 00 00 \tcmpl   $0x9c,-0x10(%rbp)\n  435062:\t76 b3                \tjbe    435017 <utf8_build+0x2e>\n  435064:\t48 c7 45 f8 80 c1 45 \tmovq   $0x45c180,-0x8(%rbp)\n  43506b:\t00 \n  43506c:\teb 47                \tjmp    4350b5 <utf8_build+0xcc>\n  43506e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  435072:\t48 8b 00             \tmov    (%rax),%rax\n  435075:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  435079:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43507d:\t8b 50 04             \tmov    0x4(%rax),%edx\n  435080:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  435084:\t8b 00                \tmov    (%rax),%eax\n  435086:\t39 c2                \tcmp    %eax,%edx\n  435088:\t73 0e                \tjae    435098 <utf8_build+0xaf>\n  43508a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  43508e:\t48 83 c0 10          \tadd    $0x10,%rax\n  435092:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  435096:\teb 1d                \tjmp    4350b5 <utf8_build+0xcc>\n  435098:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43509c:\t8b 10                \tmov    (%rax),%edx\n  43509e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4350a2:\t8b 40 04             \tmov    0x4(%rax),%eax\n  4350a5:\t39 c2                \tcmp    %eax,%edx\n  4350a7:\t76 0c                \tjbe    4350b5 <utf8_build+0xcc>\n  4350a9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4350ad:\t48 83 c0 18          \tadd    $0x18,%rax\n  4350b1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4350b5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4350b9:\t48 8b 00             \tmov    (%rax),%rax\n  4350bc:\t48 85 c0             \ttest   %rax,%rax\n  4350bf:\t75 ad                \tjne    43506e <utf8_build+0x85>\n  4350c1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4350c5:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4350c9:\t48 89 10             \tmov    %rdx,(%rax)\n  4350cc:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  4350d0:\t81 7d f4 9c 00 00 00 \tcmpl   $0x9c,-0xc(%rbp)\n  4350d7:\t0f 86 20 ff ff ff    \tjbe    434ffd <utf8_build+0x14>\n  4350dd:\t90                   \tnop\n  4350de:\t90                   \tnop\n  4350df:\tc9                   \tleaveq \n  4350e0:\tc3                   \tretq   ", "code_s": "void utf8_build() {\n  __int64 v0;\n  __int64 v1;\n  __int64 v2;\n  _DWORD *<span class=\"supfact\">v3</span>;\n  _DWORD *<span class=\"supfact\">v4</span>;\n  unsigned int <span class=\"supfact\">j</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  __int64 *<span class=\"supfact\">v7</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v4</span> = (_DWORD *)(Number L * <span class=\"supfact\">i</span> + Number);\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      if (<span class=\"supfact\">i</span> != <span class=\"supfact\">j</span> &&\n          utf8_overlap(<span class=\"supfact\">v4</span>,\n                       &utf8_width_table[Number * <span class=\"supfact\">j</span>]))\n        log_fatalx(String, <span class=\"supfact\">i</span>, <span class=\"supfact\">j</span>, v0, v1, v2);\n    }\n    <span class=\"supfact\">v7</span> = &utf8_width_root;\n    while (*<span class=\"supfact\">v7</span>) {\n      <span class=\"supfact\">v3</span> = (_DWORD *)*<span class=\"supfact\">v7</span>;\n      if (utf8_width_table[Number * <span class=\"supfact\">i</span> + Number] >=\n          *(_DWORD *)*<span class=\"supfact\">v7</span>) {\n        if (utf8_width_table[Number * <span class=\"supfact\">i</span>] >\n            <span class=\"supfact\">v3</span>[Number])\n          <span class=\"supfact\">v7</span> = (__int64 *)(<span class=\"supfact\">v3</span> + Number);\n      } else {\n        <span class=\"supfact\">v7</span> = (__int64 *)(<span class=\"supfact\">v3</span> + Number);\n      }\n    }\n    *<span class=\"supfact\">v7</span> = (__int64)<span class=\"supfact\">v4</span>;\n  }\n}", "code_t": "void __cdecl utf8_build() {\n  utf8_width_entry *<span class=\"supfact\">node</span>;\n  utf8_width_entry *<span class=\"supfact\">item</span>;\n  u_int <span class=\"supfact\">j</span>;\n  u_int <span class=\"supfact\">i</span>;\n  utf8_width_entry **<span class=\"supfact\">ptr</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">item</span> =\n        (utf8_width_entry *)(Number L * <span class=\"supfact\">i</span> + Number);\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      if (<span class=\"supfact\">i</span> != <span class=\"supfact\">j</span> &&\n          utf8_overlap(<span class=\"supfact\">item</span>,\n                       &utf8_width_table[<span class=\"supfact\">j</span>]))\n        log_fatalx(String, <span class=\"supfact\">i</span>, <span class=\"supfact\">j</span>);\n    }\n    <span class=\"supfact\">ptr</span> = &utf8_width_root;\n    while (*<span class=\"supfact\">ptr</span>) {\n      <span class=\"supfact\">node</span> = *<span class=\"supfact\">ptr</span>;\n      if (utf8_width_table[<span class=\"supfact\">i</span>].last >=\n          (*<span class=\"supfact\">ptr</span>)->first) {\n        if (utf8_width_table[<span class=\"supfact\">i</span>].first >\n            <span class=\"supfact\">node</span>->last)\n          <span class=\"supfact\">ptr</span> = &<span class=\"supfact\">node</span>->right;\n      } else {\n        <span class=\"supfact\">ptr</span> = &<span class=\"supfact\">node</span>->left;\n      }\n    }\n    *<span class=\"supfact\">ptr</span> = <span class=\"supfact\">item</span>;\n  }\n}", "var": [{"name": "v7", "type": "size_t", "ref_name": "ptr", "ref_type": "__unk__"}, {"name": "i", "type": "int", "ref_name": "i", "ref_type": "u_int"}, {"name": "j", "type": "int", "ref_name": "j", "ref_type": "u_int"}, {"name": "v4", "type": "size_t", "ref_name": "item", "ref_type": "utf8_width_entry *"}, {"name": "v3", "type": "size_t", "ref_name": "node", "ref_type": "utf8_width_entry *"}], "body_in_train": false}, {"repo_owner": "martinwguy", "repo_name": "xvi", "path": "martinwguy/xvi/7da102ecf3b71d191b55f6c922530ae3678fd6781624ad70a15301a4c1413069", "path_in_repo": "martinwguy/xvi//src/mouse.o", "objdump": "00000000000003c5 <mousemove>:\n 3c5:\t55                   \tpush   %rbp\n 3c6:\t48 89 e5             \tmov    %rsp,%rbp\n 3c9:\t48 83 ec 20          \tsub    $0x20,%rsp\n 3cd:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n 3d0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3d6 <mousemove+0x11>\n 3d6:\t85 c0                \ttest   %eax,%eax\n 3d8:\t75 6d                \tjne    447 <mousemove+0x82>\n 3da:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 3dd:\t89 c7                \tmov    %eax,%edi\n 3df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3e4:\te8 5f fd ff ff       \tcallq  148 <findwin>\n 3e9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 3ed:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 3f2:\t74 56                \tje     44a <mousemove+0x85>\n 3f4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3fb <mousemove+0x36>\n 3fb:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n 3ff:\t74 49                \tje     44a <mousemove+0x85>\n 401:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 406:\te8 00 00 00 00       \tcallq  40b <mousemove+0x46>\n 40b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 40f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 416 <mousemove+0x51>\n 416:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 41d <mousemove+0x58>\n 41d:\t48 85 c0             \ttest   %rax,%rax\n 420:\t74 0d                \tje     42f <mousemove+0x6a>\n 422:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 429 <mousemove+0x64>\n 429:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 42d:\teb 05                \tjmp    434 <mousemove+0x6f>\n 42f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 434:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 43b <mousemove+0x76>\n 43b:\te8 00 00 00 00       \tcallq  440 <mousemove+0x7b>\n 440:\te8 00 00 00 00       \tcallq  445 <mousemove+0x80>\n 445:\teb 04                \tjmp    44b <mousemove+0x86>\n 447:\t90                   \tnop\n 448:\teb 01                \tjmp    44b <mousemove+0x86>\n 44a:\t90                   \tnop\n 44b:\tc9                   \tleaveq \n 44c:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall mousemove(unsigned int a1) {\n  __int64 result;\n  __int64 v2;\n  __int64 <span class=\"supfact\">v3</span>;\n  result = State;\n  if (!State) {\n    result = findwin(a1);\n    <span class=\"supfact\">v3</span> = result;\n    if (result) {\n      result = curwin;\n      if (<span class=\"supfact\">v3</span> != curwin) {\n        show_file_info(Number L);\n        curwin = <span class=\"supfact\">v3</span>;\n        if (<span class=\"supfact\">v3</span>)\n          v2 = *(_QWORD *)(curwin + Number L);\n        else\n          v2 = Number L;\n        curbuf = v2;\n        cursupdate(Number L);\n        result = wind_goto(Number L);\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl mousemove(int ypos) {\n  Xviwin *<span class=\"supfact\">wp</span>;\n  if (!State) {\n    <span class=\"supfact\">wp</span> = findwin(ypos);\n    if (<span class=\"supfact\">wp</span>) {\n      if (<span class=\"supfact\">wp</span> != (Xviwin *)curwin) {\n        show_file_info(Number L);\n        curwin = <span class=\"supfact\">wp</span>;\n        curbuf = <span class=\"supfact\">wp</span>->w_buffer;\n        cursupdate(Number L);\n        wind_goto(Number L);\n      }\n    }\n  }\n}", "var": [{"name": "v3", "type": "WINDOW_0 *", "ref_name": "wp", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "avshabanov", "repo_name": "silc", "path": "avshabanov/silc/774fb63635e0ebee919ea7493bea42d1e96e069ea646a852e348436c7a649785", "path_in_repo": "avshabanov/silc/test/target/obj/test_inl.o", "objdump": "0000000000000799 <test_do_normal_op>:\n 799:\t55                   \tpush   %rbp\n 79a:\t48 89 e5             \tmov    %rsp,%rbp\n 79d:\t48 83 ec 10          \tsub    $0x10,%rsp\n 7a1:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 7a8:\t00 \n 7a9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7b0 <test_do_normal_op+0x17>\n 7b0:\t48 89 c1             \tmov    %rax,%rcx\n 7b3:\tba 20 00 00 00       \tmov    $0x20,%edx\n 7b8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 7bd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 7c2:\te8 00 00 00 00       \tcallq  7c7 <test_do_normal_op+0x2e>\n 7c7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7ce <test_do_normal_op+0x35>\n 7ce:\t48 89 c7             \tmov    %rax,%rdi\n 7d1:\te8 00 00 00 00       \tcallq  7d6 <test_do_normal_op+0x3d>\n 7d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 7db:\te8 7d ff ff ff       \tcallq  75d <do_normal_op>\n 7e0:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 7e3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 7e6:\t89 c7                \tmov    %eax,%edi\n 7e8:\te8 51 f8 ff ff       \tcallq  3e <silc_try_get_err_code>\n 7ed:\t85 c0                \ttest   %eax,%eax\n 7ef:\t78 19                \tjs     80a <test_do_normal_op+0x71>\n 7f1:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 7f6:\tba 77 00 00 00       \tmov    $0x77,%edx\n 7fb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 800:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 805:\te8 00 00 00 00       \tcallq  80a <test_do_normal_op+0x71>\n 80a:\t83 7d f4 14          \tcmpl   $0x14,-0xc(%rbp)\n 80e:\t74 19                \tje     829 <test_do_normal_op+0x90>\n 810:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 815:\tba 78 00 00 00       \tmov    $0x78,%edx\n 81a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 81f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 824:\te8 00 00 00 00       \tcallq  829 <test_do_normal_op+0x90>\n 829:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 830 <test_do_normal_op+0x97>\n 830:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 834:\t48 89 d6             \tmov    %rdx,%rsi\n 837:\t48 89 c7             \tmov    %rax,%rdi\n 83a:\te8 00 00 00 00       \tcallq  83f <test_do_normal_op+0xa6>\n 83f:\t90                   \tnop\n 840:\tc9                   \tleaveq \n 841:\tc3                   \tretq   ", "code_s": "int test_do_normal_op() {\n  unsigned int <span class=\"supfact\">v1</span>;\n  fwrite(String, Number, Number, stdout);\n  fflush(stdout);\n  <span class=\"supfact\">v1</span> = do_normal_op();\n  if ((int)silc_try_get_err_code(<span class=\"supfact\">v1</span>) >= Number)\n    _assert_fail(String, String, Number, String);\n  if (<span class=\"supfact\">v1</span> != Number)\n    _assert_fail(String, String, Number, String);\n  return fputs(String, stdout);\n}", "code_t": "void __cdecl test_do_normal_op() {\n  silc_obj <span class=\"supfact\">o</span>;\n  fwrite(String, Number, Number, stdout);\n  fflush(stdout);\n  <span class=\"supfact\">o</span> = do_normal_op();\n  if (silc_try_get_err_code(<span class=\"supfact\">o</span>) >= Number)\n    _assert_fail(String, String, Number, String);\n  if (<span class=\"supfact\">o</span> != Number)\n    _assert_fail(String, String, Number, String);\n  fputs(String, stdout);\n}", "var": [{"name": "v1", "type": "int", "ref_name": "o", "ref_type": "silc_obj"}], "body_in_train": false}, {"repo_owner": "stsp", "repo_name": "dosemu2", "path": "stsp/dosemu2/07ce92bc8c69f87ec0973a35671af31cc24782496006db06dd937ef35fed06d0", "path_in_repo": "stsp/dosemu2//src/base/mouse/mousedrv.o", "objdump": "00000000000008df <mousedrv_accepts>:\n 8df:\t55                   \tpush   %rbp\n 8e0:\t48 89 e5             \tmov    %rsp,%rbp\n 8e3:\t48 83 ec 20          \tsub    $0x20,%rsp\n 8e7:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 8eb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8f2 <mousedrv_accepts+0x13>\n 8f2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 8f6:\teb 65                \tjmp    95d <mousedrv_accepts+0x7e>\n 8f8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 8fc:\t8b 40 18             \tmov    0x18(%rax),%eax\n 8ff:\t85 c0                \ttest   %eax,%eax\n 901:\t74 4a                \tje     94d <mousedrv_accepts+0x6e>\n 903:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 907:\t48 8b 00             \tmov    (%rax),%rax\n 90a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 90e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 912:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n 916:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 91a:\t48 89 d6             \tmov    %rdx,%rsi\n 91d:\t48 89 c7             \tmov    %rax,%rdi\n 920:\te8 00 00 00 00       \tcallq  925 <mousedrv_accepts+0x46>\n 925:\t85 c0                \ttest   %eax,%eax\n 927:\t75 27                \tjne    950 <mousedrv_accepts+0x71>\n 929:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 92d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 931:\t48 85 c0             \ttest   %rax,%rax\n 934:\t74 1b                \tje     951 <mousedrv_accepts+0x72>\n 936:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 93a:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 93e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 942:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 946:\t48 89 c7             \tmov    %rax,%rdi\n 949:\tff d2                \tcallq  *%rdx\n 94b:\teb 1c                \tjmp    969 <mousedrv_accepts+0x8a>\n 94d:\t90                   \tnop\n 94e:\teb 01                \tjmp    951 <mousedrv_accepts+0x72>\n 950:\t90                   \tnop\n 951:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 955:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 959:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 95d:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 962:\t75 94                \tjne    8f8 <mousedrv_accepts+0x19>\n 964:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 969:\tc9                   \tleaveq \n 96a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mousedrv_accepts(const char *a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = mdrv; <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number)) {\n    if (*(_DWORD *)(<span class=\"supfact\">i</span> + Number)) {\n      <span class=\"supfact\">v2</span> = *(_QWORD *)<span class=\"supfact\">i</span>;\n      if (!strcmp(*(const char **)(*(_QWORD *)<span class=\"supfact\">i</span> + Number L),\n                  a1)) {\n        if (*(_QWORD *)(<span class=\"supfact\">v2</span> + Number))\n          return (\n              *(__int64(__fastcall **)(_QWORD))(<span class=\"supfact\">v2</span> + Number))(\n              *(_QWORD *)(<span class=\"supfact\">i</span> + Number));\n      }\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl mousedrv_accepts(const char *id) {\n  mouse_drv *<span class=\"supfact\">d</span>;\n  mouse_drv_wrp *<span class=\"supfact\">m</span>;\n  for (<span class=\"supfact\">m</span> = mdrv; <span class=\"supfact\">m</span>;\n       <span class=\"supfact\">m</span> = <span class=\"supfact\">m</span>->next) {\n    if (<span class=\"supfact\">m</span>->initialized) {\n      <span class=\"supfact\">d</span> = <span class=\"supfact\">m</span>->drv;\n      if (!strcmp(<span class=\"supfact\">m</span>->drv->name, id)) {\n        if (<span class=\"supfact\">d</span>->accepts)\n          return <span class=\"supfact\">d</span>->accepts(<span class=\"supfact\">m</span>->udata);\n      }\n    }\n  }\n  return Number;\n}", "var": [{"name": "i", "type": "aas_lreachability_t *", "ref_name": "m", "ref_type": "__unk__"}, {"name": "v2", "type": "WINDOW_0 *", "ref_name": "d", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "yuroc5390", "repo_name": "fuzz_target", "path": "yuroc5390/fuzz_target/043bf8362f647bed374b0c43f0e63a1ff706d16d75a3cea3c0c6424db7b19e89", "path_in_repo": "yuroc5390/fuzz_target/qemu_mode/qemu-2.10.0/hw/mem/pc-dimm.o", "objdump": "0000000000001460 <pc_dimm_get_size>:\n    1460:\t55                   \tpush   %rbp\n    1461:\t48 89 e5             \tmov    %rsp,%rbp\n    1464:\t48 83 ec 60          \tsub    $0x60,%rsp\n    1468:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    146c:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    1470:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    1474:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n    1478:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n    147c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1483:\t00 00 \n    1485:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1489:\t31 c0                \txor    %eax,%eax\n    148b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    148f:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 1496 <pc_dimm_get_size+0x36>\n    1496:\tb9 6b 01 00 00       \tmov    $0x16b,%ecx\n    149b:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 14a2 <pc_dimm_get_size+0x42>\n    14a2:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 14a9 <pc_dimm_get_size+0x49>\n    14a9:\t48 89 c7             \tmov    %rax,%rdi\n    14ac:\te8 00 00 00 00       \tcallq  14b1 <pc_dimm_get_size+0x51>\n    14b1:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    14b5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    14b9:\t48 89 c7             \tmov    %rax,%rdi\n    14bc:\te8 00 00 00 00       \tcallq  14c1 <pc_dimm_get_size+0x61>\n    14c1:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 14c8 <pc_dimm_get_size+0x68>\n    14c8:\tb9 6c 01 00 00       \tmov    $0x16c,%ecx\n    14cd:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 14d4 <pc_dimm_get_size+0x74>\n    14d4:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 14db <pc_dimm_get_size+0x7b>\n    14db:\t48 89 c7             \tmov    %rax,%rdi\n    14de:\te8 00 00 00 00       \tcallq  14e3 <pc_dimm_get_size+0x83>\n    14e3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    14e7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    14eb:\t48 8b 88 c8 00 00 00 \tmov    0xc8(%rax),%rcx\n    14f2:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    14f6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    14fa:\t48 89 d6             \tmov    %rdx,%rsi\n    14fd:\t48 89 c7             \tmov    %rax,%rdi\n    1500:\tff d1                \tcallq  *%rcx\n    1502:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1506:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    150b:\t74 2a                \tje     1537 <pc_dimm_get_size+0xd7>\n    150d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1511:\t48 89 c7             \tmov    %rax,%rdi\n    1514:\te8 00 00 00 00       \tcallq  1519 <pc_dimm_get_size+0xb9>\n    1519:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    151d:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n    1521:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n    1525:\t48 8b 75 b8          \tmov    -0x48(%rbp),%rsi\n    1529:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    152d:\t48 89 c7             \tmov    %rax,%rdi\n    1530:\te8 00 00 00 00       \tcallq  1535 <pc_dimm_get_size+0xd5>\n    1535:\teb 01                \tjmp    1538 <pc_dimm_get_size+0xd8>\n    1537:\t90                   \tnop\n    1538:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    153c:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1543:\t00 00 \n    1545:\t74 05                \tje     154c <pc_dimm_get_size+0xec>\n    1547:\te8 00 00 00 00       \tcallq  154c <pc_dimm_get_size+0xec>\n    154c:\tc9                   \tleaveq \n    154d:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall pc_dimm_get_size(__int64 a1, __int64 a2, __int64 a3,\n                                             __int64 a4, __int64 a5) {\n  __int64 v5;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  unsigned __int64 <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v13</span> = __readfsqword(Number);\n  <span class=\"supfact\">v10</span> =\n      object_dynamic_cast_assert(a1, String, String, Number L, String);\n  v5 = object_get_class(a1);\n  <span class=\"supfact\">v11</span> =\n      object_class_dynamic_cast_assert(v5, String, String, Number L, String);\n  <span class=\"supfact\">v12</span> = (*(__int64(__fastcall **)(__int64, __int64))(\n      <span class=\"supfact\">v11</span> + Number))(<span class=\"supfact\">v10</span>, a5);\n  if (<span class=\"supfact\">v12</span>) {\n    <span class=\"supfact\">v9</span> = memory_region_size(<span class=\"supfact\">v12</span>);\n    visit_type_uint64(a2, a3, &<span class=\"supfact\">v9</span>, a5);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v13</span>;\n}", "code_t": "void __cdecl pc_dimm_get_size(Object_0 *obj, Visitor_0 *v, const char *name,\n                              void *opaque, Error_0 **errp) {\n  __int64 v5;\n  uint64_t <span class=\"supfact\">value</span>;\n  PCDIMMDevice_0 *<span class=\"supfact\">dimm</span>;\n  PCDIMMDeviceClass_0 *<span class=\"supfact\">ddc</span>;\n  MemoryRegion_0 *<span class=\"supfact\">mr</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  <span class=\"supfact\">dimm</span> = (PCDIMMDevice_0 *)object_dynamic_cast_assert(\n      obj, String, String, Number L, String);\n  v5 = object_get_class(obj);\n  <span class=\"supfact\">ddc</span> = (PCDIMMDeviceClass_0 *)object_class_dynamic_cast_assert(\n      v5, String, String, Number L, String);\n  <span class=\"supfact\">mr</span> =\n      <span class=\"supfact\">ddc</span>->get_memory_region(<span class=\"supfact\">dimm</span>, errp);\n  if (<span class=\"supfact\">mr</span>) {\n    <span class=\"supfact\">value</span> = memory_region_size(<span class=\"supfact\">mr</span>);\n    visit_type_uint64(v, name, &<span class=\"supfact\">value</span>, errp);\n  }\n}", "var": [{"name": "v13", "type": "unsigned __int64", "ref_name": "v12", "ref_type": "unsigned __int64"}, {"name": "v12", "type": "MemoryRegion_0 *", "ref_name": "mr", "ref_type": "MemoryRegion_0 *"}, {"name": "v11", "type": "PCDIMMDevice_0 *", "ref_name": "ddc", "ref_type": "PCDIMMDeviceClass_0 *"}, {"name": "v10", "type": "DeviceClass_0 *", "ref_name": "dimm", "ref_type": "PCDIMMDevice_0 *"}, {"name": "v9", "type": "ImageCheck_0 *", "ref_name": "value", "ref_type": "uint64_t"}], "body_in_train": false}, {"repo_owner": "xurubin", "repo_name": "wl530g-mini", "path": "xurubin/wl530g-mini/3d513f0d682ae665a58ac45d64bbee0ea5a644f5dee2aa3b2f591aaedba9abc6", "path_in_repo": "xurubin/wl530g-mini/Src/uClinux-dist/user/dhcp-isc/common/parse.o", "objdump": "00000000000005c3 <parse_lease_time>:\n     5c3:\t55                   \tpush   %rbp\n     5c4:\t48 89 e5             \tmov    %rsp,%rbp\n     5c7:\t48 83 ec 20          \tsub    $0x20,%rsp\n     5cb:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     5cf:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     5d3:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     5d7:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n     5db:\t48 89 d6             \tmov    %rdx,%rsi\n     5de:\t48 89 c7             \tmov    %rax,%rdi\n     5e1:\te8 00 00 00 00       \tcallq  5e6 <parse_lease_time+0x23>\n     5e6:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     5e9:\t81 7d fc 07 01 00 00 \tcmpl   $0x107,-0x4(%rbp)\n     5f0:\t74 1d                \tje     60f <parse_lease_time+0x4c>\n     5f2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     5f7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5fc:\te8 00 00 00 00       \tcallq  601 <parse_lease_time+0x3e>\n     601:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     605:\t48 89 c7             \tmov    %rax,%rdi\n     608:\te8 00 00 00 00       \tcallq  60d <parse_lease_time+0x4a>\n     60d:\teb 3d                \tjmp    64c <parse_lease_time+0x89>\n     60f:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n     613:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     617:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n     61c:\tba 0a 00 00 00       \tmov    $0xa,%edx\n     621:\t48 89 c7             \tmov    %rax,%rdi\n     624:\te8 00 00 00 00       \tcallq  629 <parse_lease_time+0x66>\n     629:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     62d:\t48 8b 00             \tmov    (%rax),%rax\n     630:\t89 c7                \tmov    %eax,%edi\n     632:\te8 00 00 00 00       \tcallq  637 <parse_lease_time+0x74>\n     637:\t89 c2                \tmov    %eax,%edx\n     639:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     63d:\t48 89 10             \tmov    %rdx,(%rax)\n     640:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     644:\t48 89 c7             \tmov    %rax,%rdi\n     647:\te8 00 00 00 00       \tcallq  64c <parse_lease_time+0x89>\n     64c:\tc9                   \tleaveq \n     64d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall parse_lease_time(__int64 a1, _QWORD *a2) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = next_token(&<span class=\"supfact\">v3</span>, a1);\n  if (<span class=\"supfact\">v4</span> == Number) {\n    convert_num(a2, <span class=\"supfact\">v3</span>, Number L, Number L);\n    *a2 = ntohl(*a2);\n    result = parse_semi(a1);\n  } else {\n    parse_warn(String);\n    result = skip_to_semi(a1);\n  }\n  return result;\n}", "code_t": "void __cdecl parse_lease_time(FILE *cfile, time_t *timep) {\n  char *<span class=\"supfact\">val</span>;\n  int <span class=\"supfact\">token</span>;\n  <span class=\"supfact\">token</span> = next_token(&<span class=\"supfact\">val</span>, cfile);\n  if (<span class=\"supfact\">token</span> == Number) {\n    convert_num((unsigned __int8 *)timep, <span class=\"supfact\">val</span>, Number, Number);\n    *timep = ntohl(*timep);\n    parse_semi(cfile);\n  } else {\n    parse_warn(String);\n    skip_to_semi(cfile);\n  }\n}", "var": [{"name": "v4", "type": "int", "ref_name": "token", "ref_type": "int"}, {"name": "v3", "type": "__int64", "ref_name": "val", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "pathscale", "repo_name": "nvopencc", "path": "pathscale/nvopencc/4df8736b891d6c23ec894776b0817acbe25c05550079d9efb89caa62245fedb6", "path_in_repo": "pathscale/nvopencc/src/targia3264_nvisa_rel/gccfe/gnu/cfgbuild.o", "objdump": "0000000000001130 <find_bb_boundaries>:\n    1130:\t55                   \tpush   %rbp\n    1131:\t48 89 e5             \tmov    %rsp,%rbp\n    1134:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1138:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    113c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1140:\t48 8b 00             \tmov    (%rax),%rax\n    1143:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1147:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    114b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    114f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1153:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    115a:\t00 \n    115b:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    1162:\t00 \n    1163:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1167:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    116b:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n    116f:\t0f 84 6e 01 00 00    \tje     12e3 <find_bb_boundaries+0x1b3>\n    1175:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1179:\t0f b7 00             \tmovzwl (%rax),%eax\n    117c:\t66 83 f8 2e          \tcmp    $0x2e,%ax\n    1180:\t75 0c                \tjne    118e <find_bb_boundaries+0x5e>\n    1182:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1186:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    118a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    118e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1192:\t0f b7 00             \tmovzwl (%rax),%eax\n    1195:\t0f b7 c0             \tmovzwl %ax,%eax\n    1198:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    119b:\t83 7d dc 2e          \tcmpl   $0x2e,-0x24(%rbp)\n    119f:\t0f 85 8b 00 00 00    \tjne    1230 <find_bb_boundaries+0x100>\n    11a5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11a9:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    11ad:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    11b1:\t48 89 d6             \tmov    %rdx,%rsi\n    11b4:\t48 89 c7             \tmov    %rax,%rdi\n    11b7:\te8 00 00 00 00       \tcallq  11bc <find_bb_boundaries+0x8c>\n    11bc:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    11c0:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    11c5:\t74 0c                \tje     11d3 <find_bb_boundaries+0xa3>\n    11c7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    11cb:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    11cf:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    11d3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    11d7:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    11db:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    11df:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    11e3:\t48 89 c7             \tmov    %rax,%rdi\n    11e6:\te8 00 00 00 00       \tcallq  11eb <find_bb_boundaries+0xbb>\n    11eb:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    11f2:\t00 \n    11f3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    11f7:\t0f b6 40 03          \tmovzbl 0x3(%rax),%eax\n    11fb:\t83 e0 01             \tand    $0x1,%eax\n    11fe:\t0f b6 c0             \tmovzbl %al,%eax\n    1201:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n    1204:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1208:\t0f b6 40 03          \tmovzbl 0x3(%rax),%eax\n    120c:\td0 e8                \tshr    %al\n    120e:\t83 e0 01             \tand    $0x1,%eax\n    1211:\t0f b6 c0             \tmovzbl %al,%eax\n    1214:\t09 d0                \tor     %edx,%eax\n    1216:\t85 c0                \ttest   %eax,%eax\n    1218:\t74 16                \tje     1230 <find_bb_boundaries+0x100>\n    121a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    121e:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1223:\t48 89 c6             \tmov    %rax,%rsi\n    1226:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    122b:\te8 00 00 00 00       \tcallq  1230 <find_bb_boundaries+0x100>\n    1230:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1235:\t74 57                \tje     128e <find_bb_boundaries+0x15e>\n    1237:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    123b:\t48 89 c7             \tmov    %rax,%rdi\n    123e:\te8 bd ed ff ff       \tcallq  0 <inside_basic_block_p>\n    1243:\t84 c0                \ttest   %al,%al\n    1245:\t74 47                \tje     128e <find_bb_boundaries+0x15e>\n    1247:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    124b:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    124f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1253:\t48 89 d6             \tmov    %rdx,%rsi\n    1256:\t48 89 c7             \tmov    %rax,%rdi\n    1259:\te8 00 00 00 00       \tcallq  125e <find_bb_boundaries+0x12e>\n    125e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1262:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1266:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    126a:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    126e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1272:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1276:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    127a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    127e:\t48 89 c7             \tmov    %rax,%rdi\n    1281:\te8 00 00 00 00       \tcallq  1286 <find_bb_boundaries+0x156>\n    1286:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    128d:\t00 \n    128e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1292:\t48 89 c7             \tmov    %rax,%rdi\n    1295:\te8 00 00 00 00       \tcallq  129a <find_bb_boundaries+0x16a>\n    129a:\t84 c0                \ttest   %al,%al\n    129c:\t74 08                \tje     12a6 <find_bb_boundaries+0x176>\n    129e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    12a2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    12a6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    12aa:\t48 3b 45 e8          \tcmp    -0x18(%rbp),%rax\n    12ae:\t74 11                \tje     12c1 <find_bb_boundaries+0x191>\n    12b0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    12b4:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    12b8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    12bc:\te9 cd fe ff ff       \tjmpq   118e <find_bb_boundaries+0x5e>\n    12c1:\t90                   \tnop\n    12c2:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    12c7:\t74 0c                \tje     12d5 <find_bb_boundaries+0x1a5>\n    12c9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    12cd:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    12d1:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    12d5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    12d9:\t48 89 c7             \tmov    %rax,%rdi\n    12dc:\te8 00 00 00 00       \tcallq  12e1 <find_bb_boundaries+0x1b1>\n    12e1:\teb 01                \tjmp    12e4 <find_bb_boundaries+0x1b4>\n    12e3:\t90                   \tnop\n    12e4:\tc9                   \tleaveq \n    12e5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall find_bb_boundaries(__int64 *a1) {\n  __int64 result;\n  __int64 *<span class=\"supfact\">v2</span>;\n  __int64 v3;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v2</span> = a1;\n  <span class=\"supfact\">v7</span> = *a1;\n  <span class=\"supfact\">v5</span> = a1[Number];\n  <span class=\"supfact\">v6</span> = Number L;\n  result = <span class=\"supfact\">v5</span>;\n  if (*a1 != <span class=\"supfact\">v5</span>) {\n    if (*(_WORD *)<span class=\"supfact\">v7</span> == Number)\n      <span class=\"supfact\">v7</span> = *(_QWORD *)(<span class=\"supfact\">v7</span> + Number);\n    while (Number) {\n      if (*(_WORD *)<span class=\"supfact\">v7</span> == Number) {\n        v3 = split_block(<span class=\"supfact\">v2</span>,\n                         *(_QWORD *)(<span class=\"supfact\">v7</span> + Number));\n        if (<span class=\"supfact\">v6</span>)\n          <span class=\"supfact\">v2</span>[Number] = <span class=\"supfact\">v6</span>;\n        <span class=\"supfact\">v2</span> = *(__int64 **)(v3 + Number);\n        remove_edge(v3);\n        <span class=\"supfact\">v6</span> = Number L;\n        if ((Number * (*(_BYTE *)(<span class=\"supfact\">v7</span> + Number) & Number)) |\n            ((*(_BYTE *)(<span class=\"supfact\">v7</span> + Number) & Number) != Number))\n          make_edge(&entry_exit_blocks, <span class=\"supfact\">v2</span>, Number L);\n      }\n      if (<span class=\"supfact\">v6</span> &&\n          (unsigned __int8)inside_basic_block_p(<span class=\"supfact\">v7</span>)) {\n        v4 = split_block(<span class=\"supfact\">v2</span>,\n                         *(_QWORD *)(<span class=\"supfact\">v7</span> + Number));\n        <span class=\"supfact\">v2</span>[Number] = <span class=\"supfact\">v6</span>;\n        <span class=\"supfact\">v2</span> = *(__int64 **)(v4 + Number);\n        remove_edge(v4);\n        <span class=\"supfact\">v6</span> = Number L;\n      }\n      if ((unsigned __int8)control_flow_insn_p(<span class=\"supfact\">v7</span>))\n        <span class=\"supfact\">v6</span> = <span class=\"supfact\">v7</span>;\n      if (<span class=\"supfact\">v7</span> == <span class=\"supfact\">v5</span>)\n        break;\n      <span class=\"supfact\">v7</span> = *(_QWORD *)(<span class=\"supfact\">v7</span> + Number);\n    }\n    if (<span class=\"supfact\">v6</span>)\n      <span class=\"supfact\">v2</span>[Number] = <span class=\"supfact\">v6</span>;\n    result = purge_dead_edges(<span class=\"supfact\">v2</span>);\n  }\n  return result;\n}", "code_t": "void __cdecl find_bb_boundaries(basic_block bb) {\n  basic_block <span class=\"supfact\">bba</span>;\n  edge fallthru;\n  edge fallthrua;\n  rtx_def *<span class=\"supfact\">end</span>;\n  rtx <span class=\"supfact\">flow_transfer_insn</span>;\n  rtx <span class=\"supfact\">insn</span>;\n  <span class=\"supfact\">bba</span> = bb;\n  <span class=\"supfact\">insn</span> = bb->head;\n  <span class=\"supfact\">end</span> = bb-><span class=\"supfact\">end</span>;\n  <span class=\"supfact\">flow_transfer_insn</span> = Number L;\n  if (bb->head != <span class=\"supfact\">end</span>) {\n    if (*(_WORD *)<span class=\"supfact\">insn</span> == Number)\n      <span class=\"supfact\">insn</span> = <span class=\"supfact\">insn</span>[Number].fld[Number].rtx;\n    while (Number) {\n      if (*(_WORD *)<span class=\"supfact\">insn</span> == Number) {\n        fallthru = (edge)split_block(<span class=\"supfact\">bba</span>,\n                                     *(_QWORD *)&<span class=\"supfact\">insn</span>[Number]);\n        if (<span class=\"supfact\">flow_transfer_insn</span>)\n          <span class=\"supfact\">bba</span>-><span class=\"supfact\">end</span> =\n              <span class=\"supfact\">flow_transfer_insn</span>;\n        <span class=\"supfact\">bba</span> = fallthru->dest;\n        remove_edge(fallthru);\n        <span class=\"supfact\">flow_transfer_insn</span> = Number L;\n        if ((Number * (*((_BYTE *)<span class=\"supfact\">insn</span> + Number) & Number)) |\n            ((*((_BYTE *)<span class=\"supfact\">insn</span> + Number) & Number) != Number))\n          make_edge(entry_exit_blocks, <span class=\"supfact\">bba</span>, Number L);\n      }\n      if (<span class=\"supfact\">flow_transfer_insn</span> &&\n          inside_basic_block_p(<span class=\"supfact\">insn</span>)) {\n        fallthrua = (edge)split_block(<span class=\"supfact\">bba</span>,\n                                      *(_QWORD *)&<span class=\"supfact\">insn</span>[Number]);\n        <span class=\"supfact\">bba</span>-><span class=\"supfact\">end</span> =\n            <span class=\"supfact\">flow_transfer_insn</span>;\n        <span class=\"supfact\">bba</span> = fallthrua->dest;\n        remove_edge(fallthrua);\n        <span class=\"supfact\">flow_transfer_insn</span> = Number L;\n      }\n      if (control_flow_insn_p(<span class=\"supfact\">insn</span>))\n        <span class=\"supfact\">flow_transfer_insn</span> = <span class=\"supfact\">insn</span>;\n      if (<span class=\"supfact\">insn</span> == <span class=\"supfact\">end</span>)\n        break;\n      <span class=\"supfact\">insn</span> = <span class=\"supfact\">insn</span>[Number].fld[Number].rtx;\n    }\n    if (<span class=\"supfact\">flow_transfer_insn</span>)\n      <span class=\"supfact\">bba</span>-><span class=\"supfact\">end</span> =\n          <span class=\"supfact\">flow_transfer_insn</span>;\n    purge_dead_edges(<span class=\"supfact\">bba</span>);\n  }\n}", "var": [{"name": "v7", "type": "rtx", "ref_name": "insn", "ref_type": "rtx"}, {"name": "v6", "type": "rtx", "ref_name": "flow_transfer_insn", "ref_type": "rtx"}, {"name": "v5", "type": "rtx", "ref_name": "end", "ref_type": "rtx_def *"}, {"name": "v2", "type": "rtx", "ref_name": "bba", "ref_type": "basic_block"}], "body_in_train": false}, {"repo_owner": "bboozzoo", "repo_name": "ioquake3", "path": "bboozzoo/ioquake3/dd4f9958b9546037a92376f394d10b505fb234ea979735b0da66a60f352973fb", "path_in_repo": "bboozzoo/ioquake3//build/release-linux-x86_64/baseq3/game/g_svcmds.o", "objdump": "00000000000007d6 <Svcmd_EntityList_f>:\n 7d6:\t48 83 ec 18          \tsub    $0x18,%rsp\n 7da:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7e1 <Svcmd_EntityList_f+0xb>\n 7e1:\t48 8d 80 b0 03 00 00 \tlea    0x3b0(%rax),%rax\n 7e8:\t48 89 04 24          \tmov    %rax,(%rsp)\n 7ec:\tc7 44 24 0c 01 00 00 \tmovl   $0x1,0xc(%rsp)\n 7f3:\t00 \n 7f4:\te9 bc 01 00 00       \tjmpq   9b5 <Svcmd_EntityList_f+0x1df>\n 7f9:\t48 8b 04 24          \tmov    (%rsp),%rax\n 7fd:\t8b 80 10 02 00 00    \tmov    0x210(%rax),%eax\n 803:\t85 c0                \ttest   %eax,%eax\n 805:\t0f 84 9c 01 00 00    \tje     9a7 <Svcmd_EntityList_f+0x1d1>\n 80b:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n 80f:\t89 c6                \tmov    %eax,%esi\n 811:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 818 <Svcmd_EntityList_f+0x42>\n 818:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 81d:\te8 00 00 00 00       \tcallq  822 <Svcmd_EntityList_f+0x4c>\n 822:\t48 8b 04 24          \tmov    (%rsp),%rax\n 826:\t8b 40 04             \tmov    0x4(%rax),%eax\n 829:\t83 f8 0b             \tcmp    $0xb,%eax\n 82c:\t0f 87 18 01 00 00    \tja     94a <Svcmd_EntityList_f+0x174>\n 832:\t89 c0                \tmov    %eax,%eax\n 834:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 83b:\t00 \n 83c:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 843 <Svcmd_EntityList_f+0x6d>\n 843:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n 846:\t48 98                \tcltq   \n 848:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 84f <Svcmd_EntityList_f+0x79>\n 84f:\t48 01 d0             \tadd    %rdx,%rax\n 852:\tff e0                \tjmpq   *%rax\n 854:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 85b <Svcmd_EntityList_f+0x85>\n 85b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 860:\te8 00 00 00 00       \tcallq  865 <Svcmd_EntityList_f+0x8f>\n 865:\te9 fb 00 00 00       \tjmpq   965 <Svcmd_EntityList_f+0x18f>\n 86a:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 871 <Svcmd_EntityList_f+0x9b>\n 871:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 876:\te8 00 00 00 00       \tcallq  87b <Svcmd_EntityList_f+0xa5>\n 87b:\te9 e5 00 00 00       \tjmpq   965 <Svcmd_EntityList_f+0x18f>\n 880:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 887 <Svcmd_EntityList_f+0xb1>\n 887:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 88c:\te8 00 00 00 00       \tcallq  891 <Svcmd_EntityList_f+0xbb>\n 891:\te9 cf 00 00 00       \tjmpq   965 <Svcmd_EntityList_f+0x18f>\n 896:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 89d <Svcmd_EntityList_f+0xc7>\n 89d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 8a2:\te8 00 00 00 00       \tcallq  8a7 <Svcmd_EntityList_f+0xd1>\n 8a7:\te9 b9 00 00 00       \tjmpq   965 <Svcmd_EntityList_f+0x18f>\n 8ac:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 8b3 <Svcmd_EntityList_f+0xdd>\n 8b3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 8b8:\te8 00 00 00 00       \tcallq  8bd <Svcmd_EntityList_f+0xe7>\n 8bd:\te9 a3 00 00 00       \tjmpq   965 <Svcmd_EntityList_f+0x18f>\n 8c2:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 8c9 <Svcmd_EntityList_f+0xf3>\n 8c9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 8ce:\te8 00 00 00 00       \tcallq  8d3 <Svcmd_EntityList_f+0xfd>\n 8d3:\te9 8d 00 00 00       \tjmpq   965 <Svcmd_EntityList_f+0x18f>\n 8d8:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 8df <Svcmd_EntityList_f+0x109>\n 8df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 8e4:\te8 00 00 00 00       \tcallq  8e9 <Svcmd_EntityList_f+0x113>\n 8e9:\teb 7a                \tjmp    965 <Svcmd_EntityList_f+0x18f>\n 8eb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 8f2 <Svcmd_EntityList_f+0x11c>\n 8f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 8f7:\te8 00 00 00 00       \tcallq  8fc <Svcmd_EntityList_f+0x126>\n 8fc:\teb 67                \tjmp    965 <Svcmd_EntityList_f+0x18f>\n 8fe:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 905 <Svcmd_EntityList_f+0x12f>\n 905:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 90a:\te8 00 00 00 00       \tcallq  90f <Svcmd_EntityList_f+0x139>\n 90f:\teb 54                \tjmp    965 <Svcmd_EntityList_f+0x18f>\n 911:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 918 <Svcmd_EntityList_f+0x142>\n 918:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 91d:\te8 00 00 00 00       \tcallq  922 <Svcmd_EntityList_f+0x14c>\n 922:\teb 41                \tjmp    965 <Svcmd_EntityList_f+0x18f>\n 924:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 92b <Svcmd_EntityList_f+0x155>\n 92b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 930:\te8 00 00 00 00       \tcallq  935 <Svcmd_EntityList_f+0x15f>\n 935:\teb 2e                \tjmp    965 <Svcmd_EntityList_f+0x18f>\n 937:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 93e <Svcmd_EntityList_f+0x168>\n 93e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 943:\te8 00 00 00 00       \tcallq  948 <Svcmd_EntityList_f+0x172>\n 948:\teb 1b                \tjmp    965 <Svcmd_EntityList_f+0x18f>\n 94a:\t48 8b 04 24          \tmov    (%rsp),%rax\n 94e:\t8b 40 04             \tmov    0x4(%rax),%eax\n 951:\t89 c6                \tmov    %eax,%esi\n 953:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 95a <Svcmd_EntityList_f+0x184>\n 95a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 95f:\te8 00 00 00 00       \tcallq  964 <Svcmd_EntityList_f+0x18e>\n 964:\t90                   \tnop\n 965:\t48 8b 04 24          \tmov    (%rsp),%rax\n 969:\t48 8b 80 18 02 00 00 \tmov    0x218(%rax),%rax\n 970:\t48 85 c0             \ttest   %rax,%rax\n 973:\t74 1f                \tje     994 <Svcmd_EntityList_f+0x1be>\n 975:\t48 8b 04 24          \tmov    (%rsp),%rax\n 979:\t48 8b 80 18 02 00 00 \tmov    0x218(%rax),%rax\n 980:\t48 89 c6             \tmov    %rax,%rsi\n 983:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 98a <Svcmd_EntityList_f+0x1b4>\n 98a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 98f:\te8 00 00 00 00       \tcallq  994 <Svcmd_EntityList_f+0x1be>\n 994:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 99b <Svcmd_EntityList_f+0x1c5>\n 99b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 9a0:\te8 00 00 00 00       \tcallq  9a5 <Svcmd_EntityList_f+0x1cf>\n 9a5:\teb 01                \tjmp    9a8 <Svcmd_EntityList_f+0x1d2>\n 9a7:\t90                   \tnop\n 9a8:\t83 44 24 0c 01       \taddl   $0x1,0xc(%rsp)\n 9ad:\t48 81 04 24 b0 03 00 \taddq   $0x3b0,(%rsp)\n 9b4:\t00 \n 9b5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9bc <Svcmd_EntityList_f+0x1e6>\n 9bc:\t8b 40 14             \tmov    0x14(%rax),%eax\n 9bf:\t39 44 24 0c          \tcmp    %eax,0xc(%rsp)\n 9c3:\t0f 8c 30 fe ff ff    \tjl     7f9 <Svcmd_EntityList_f+0x23>\n 9c9:\t90                   \tnop\n 9ca:\t90                   \tnop\n 9cb:\t48 83 c4 18          \tadd    $0x18,%rsp\n 9cf:\tc3                   \tretq   ", "code_s": "__int64 Svcmd_EntityList_f() {\n  __int64 result;\n  char *<span class=\"supfact\">v1</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v1</span> = (char *)&g_entities + Number;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = level[Number];\n    if (<span class=\"supfact\">i</span> >= (int)result)\n      break;\n    if (*((_DWORD *)<span class=\"supfact\">v1</span> + Number)) {\n      G_Printf(String, (unsigned int)<span class=\"supfact\">i</span>);\n      switch (*((_DWORD *)<span class=\"supfact\">v1</span> + Number)) {\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      default:\n        G_Printf(String, *((unsigned int *)<span class=\"supfact\">v1</span> + Number));\n        break;\n      }\n      if (*((_QWORD *)<span class=\"supfact\">v1</span> + Number))\n        G_Printf(String, *((const char **)<span class=\"supfact\">v1</span> + Number));\n      G_Printf(String);\n    }\n    <span class=\"supfact\">v1</span> += Number;\n  }\n  return result;\n}", "code_t": "void __cdecl Svcmd_EntityList_f() {\n  gentity_t *<span class=\"supfact\">check</span>;\n  int <span class=\"supfact\">e</span>;\n  <span class=\"supfact\">check</span> = (gentity_t *)((char *)&g_entities + Number);\n  for (<span class=\"supfact\">e</span> = Number; <span class=\"supfact\">e</span> < level[Number];\n       ++<span class=\"supfact\">e</span>) {\n    if (<span class=\"supfact\">check</span>->inuse) {\n      G_Printf(String, (unsigned int)<span class=\"supfact\">e</span>);\n      switch (<span class=\"supfact\">check</span>->s.eType) {\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      case Number:\n        G_Printf(String);\n        break;\n      default:\n        G_Printf(String, (unsigned int)<span class=\"supfact\">check</span>->s.eType);\n        break;\n      }\n      if (<span class=\"supfact\">check</span>->classname)\n        G_Printf(String, <span class=\"supfact\">check</span>->classname);\n      G_Printf(String);\n    }\n    ++<span class=\"supfact\">check</span>;\n  }\n}", "var": [{"name": "i", "type": "int", "ref_name": "e", "ref_type": "int"}, {"name": "v1", "type": "gentity_t *", "ref_name": "check", "ref_type": "gentity_t *"}], "body_in_train": false}, {"repo_owner": "vaishalok", "repo_name": "VideoTest", "path": "vaishalok/VideoTest/8d2abe087268dd14d59db2eeec08d6e8ead93714c1b6232d01ad2ac4bd3f4f2b", "path_in_repo": "vaishalok/VideoTest/jni/ffmpeg-0.8/libavformat/xa.o", "objdump": "00000000000000c0 <xa_read_header>:\n  c0:\t48 83 ec 38          \tsub    $0x38,%rsp\n  c4:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n  c9:\t48 89 34 24          \tmov    %rsi,(%rsp)\n  cd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  d2:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  d6:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n  db:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  e0:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  e4:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n  e9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  ee:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  f3:\t48 89 c7             \tmov    %rax,%rdi\n  f6:\te8 00 00 00 00       \tcallq  fb <xa_read_header+0x3b>\n  fb:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n 100:\t48 83 7c 24 18 00    \tcmpq   $0x0,0x18(%rsp)\n 106:\t75 0a                \tjne    112 <xa_read_header+0x52>\n 108:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n 10d:\te9 1c 01 00 00       \tjmpq   22e <xa_read_header+0x16e>\n 112:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 117:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 11b:\tc7 80 00 01 00 00 01 \tmovl   $0x1,0x100(%rax)\n 122:\t00 00 00 \n 125:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 12a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 12e:\tc7 80 04 01 00 00 1a \tmovl   $0x1101a,0x104(%rax)\n 135:\t10 01 00 \n 138:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 13d:\tbe 04 00 00 00       \tmov    $0x4,%esi\n 142:\t48 89 c7             \tmov    %rax,%rdi\n 145:\te8 00 00 00 00       \tcallq  14a <xa_read_header+0x8a>\n 14a:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 14f:\t48 89 c7             \tmov    %rax,%rdi\n 152:\te8 00 00 00 00       \tcallq  157 <xa_read_header+0x97>\n 157:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n 15c:\t89 02                \tmov    %eax,(%rdx)\n 15e:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 163:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 168:\t48 89 c7             \tmov    %rax,%rdi\n 16b:\te8 00 00 00 00       \tcallq  170 <xa_read_header+0xb0>\n 170:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 175:\t48 89 c7             \tmov    %rax,%rdi\n 178:\te8 00 00 00 00       \tcallq  17d <xa_read_header+0xbd>\n 17d:\t89 c2                \tmov    %eax,%edx\n 17f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 184:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 188:\t89 50 54             \tmov    %edx,0x54(%rax)\n 18b:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 190:\t48 89 c7             \tmov    %rax,%rdi\n 193:\te8 00 00 00 00       \tcallq  198 <xa_read_header+0xd8>\n 198:\t89 c2                \tmov    %eax,%edx\n 19a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 19f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 1a3:\t89 50 50             \tmov    %edx,0x50(%rax)\n 1a6:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 1ab:\t48 89 c7             \tmov    %rax,%rdi\n 1ae:\te8 00 00 00 00       \tcallq  1b3 <xa_read_header+0xf3>\n 1b3:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n 1ba:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 1bf:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 1c3:\t89 50 08             \tmov    %edx,0x8(%rax)\n 1c6:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 1cb:\t48 89 c7             \tmov    %rax,%rdi\n 1ce:\te8 00 00 00 00       \tcallq  1d3 <xa_read_header+0x113>\n 1d3:\t89 c2                \tmov    %eax,%edx\n 1d5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 1da:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 1de:\t89 90 3c 01 00 00    \tmov    %edx,0x13c(%rax)\n 1e4:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 1e9:\t48 89 c7             \tmov    %rax,%rdi\n 1ec:\te8 00 00 00 00       \tcallq  1f1 <xa_read_header+0x131>\n 1f1:\t89 c2                \tmov    %eax,%edx\n 1f3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 1f8:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 1fc:\t89 90 d0 01 00 00    \tmov    %edx,0x1d0(%rax)\n 202:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 207:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 20b:\t8b 40 50             \tmov    0x50(%rax),%eax\n 20e:\t89 c2                \tmov    %eax,%edx\n 210:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 215:\t89 d1                \tmov    %edx,%ecx\n 217:\tba 01 00 00 00       \tmov    $0x1,%edx\n 21c:\tbe 40 00 00 00       \tmov    $0x40,%esi\n 221:\t48 89 c7             \tmov    %rax,%rdi\n 224:\te8 00 00 00 00       \tcallq  229 <xa_read_header+0x169>\n 229:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 22e:\t48 83 c4 38          \tadd    $0x38,%rsp\n 232:\tc3                   \tretq   ", "code_s": "__int64 __fastcall xa_read_header(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  _DWORD *<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = *(_DWORD **)(a1 + Number);\n  <span class=\"supfact\">v3</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v2</span> = av_new_stream(a1, Number L);\n  if (!<span class=\"supfact\">v2</span>)\n    return Number L;\n  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number) + Number L) = Number;\n  avio_skip(<span class=\"supfact\">v3</span>, Number L);\n  *<span class=\"supfact\">v4</span> = avio_rl32(<span class=\"supfact\">v3</span>);\n  avio_skip(<span class=\"supfact\">v3</span>, Number L);\n  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number) + Number L) =\n      avio_rl16(<span class=\"supfact\">v3</span>);\n  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number) + Number L) =\n      avio_rl32(<span class=\"supfact\">v3</span>);\n  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number) + Number L) =\n      Number * avio_rl32(<span class=\"supfact\">v3</span>);\n  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number) + Number L) =\n      avio_rl16(<span class=\"supfact\">v3</span>);\n  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number) + Number L) =\n      avio_rl16(<span class=\"supfact\">v3</span>);\n  av_set_pts_info(\n      <span class=\"supfact\">v2</span>, Number L, Number L,\n      *(unsigned int *)(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number) + Number L));\n  return Number L;\n}", "code_t": "int __cdecl xa_read_header(AVFormatContext_0 *s, AVFormatParameters_0 *ap) {\n  AVStream_0 *<span class=\"supfact\">st</span>;\n  AVIOContext *<span class=\"supfact\">pb</span>;\n  MaxisXADemuxContext_0 *<span class=\"supfact\">xa</span>;\n  <span class=\"supfact\">xa</span> = (MaxisXADemuxContext_0 *)s->priv_data;\n  <span class=\"supfact\">pb</span> = s-><span class=\"supfact\">pb</span>;\n  <span class=\"supfact\">st</span> = (AVStream_0 *)av_new_stream(s, Number L);\n  if (!<span class=\"supfact\">st</span>)\n    return Number;\n  <span class=\"supfact\">st</span>->codec->codec_type = AVMEDIA_TYPE_AUDIO;\n  <span class=\"supfact\">st</span>->codec->codec_id = CODEC_ID_ADPCM_EA_MAXIS_XA;\n  avio_skip(<span class=\"supfact\">pb</span>, Number L);\n  <span class=\"supfact\">xa</span>->out_size = avio_rl32(<span class=\"supfact\">pb</span>);\n  avio_skip(<span class=\"supfact\">pb</span>, Number L);\n  <span class=\"supfact\">st</span>->codec->channels = avio_rl16(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">st</span>->codec->sample_rate = avio_rl32(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">st</span>->codec->bit_rate = Number * avio_rl32(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">st</span>->codec->block_align = avio_rl16(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">st</span>->codec->bits_per_coded_sample =\n      avio_rl16(<span class=\"supfact\">pb</span>);\n  av_set_pts_info(<span class=\"supfact\">st</span>, Number L, Number L,\n                  (unsigned int)<span class=\"supfact\">st</span>->codec->sample_rate);\n  return Number;\n}", "var": [{"name": "v4", "type": "MaxisXADemuxContext_0 *", "ref_name": "xa", "ref_type": "MaxisXADemuxContext_0 *"}, {"name": "v3", "type": "AVIOContext_0 *", "ref_name": "pb", "ref_type": "AVIOContext *"}, {"name": "v2", "type": "AVStream_0 *", "ref_name": "st", "ref_type": "AVStream_0 *"}], "body_in_train": false}, {"repo_owner": "CPFL", "repo_name": "xen", "path": "CPFL/xen/aeb5415445a638b479e067e84f2d709ee32aaac82f59a1e7e4a7796f9f608831", "path_in_repo": "CPFL/xen/xen/arch/x86/mm/shadow/common.o", "objdump": "000000000000154a <prev_pinned_shadow>:\n    154a:\t55                   \tpush   %rbp\n    154b:\t48 89 e5             \tmov    %rsp,%rbp\n    154e:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1552:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1556:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    155a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    155e:\t48 05 20 0a 00 00    \tadd    $0xa20,%rax\n    1564:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1568:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    156c:\t48 89 c7             \tmov    %rax,%rdi\n    156f:\te8 2e f0 ff ff       \tcallq  5a2 <page_list_empty>\n    1574:\t85 c0                \ttest   %eax,%eax\n    1576:\t75 12                \tjne    158a <prev_pinned_shadow+0x40>\n    1578:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    157c:\t48 89 c7             \tmov    %rax,%rdi\n    157f:\te8 3c f0 ff ff       \tcallq  5c0 <page_list_first>\n    1584:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    1588:\t75 0a                \tjne    1594 <prev_pinned_shadow+0x4a>\n    158a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    158f:\te9 3f 01 00 00       \tjmpq   16d3 <prev_pinned_shadow+0x189>\n    1594:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    1599:\t75 12                \tjne    15ad <prev_pinned_shadow+0x63>\n    159b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    159f:\t48 89 c7             \tmov    %rax,%rdi\n    15a2:\te8 2e f0 ff ff       \tcallq  5d5 <page_list_last>\n    15a7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    15ab:\teb 17                \tjmp    15c4 <prev_pinned_shadow+0x7a>\n    15ad:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    15b1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    15b5:\t48 89 d6             \tmov    %rdx,%rsi\n    15b8:\t48 89 c7             \tmov    %rax,%rdi\n    15bb:\te8 6e f0 ff ff       \tcallq  62e <page_list_prev>\n    15c0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    15c4:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    15c9:\t0f 84 d6 00 00 00    \tje     16a5 <prev_pinned_shadow+0x15b>\n    15cf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    15d3:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n    15d7:\t83 e0 1f             \tand    $0x1f,%eax\n    15da:\t3c 03                \tcmp    $0x3,%al\n    15dc:\t0f 85 c3 00 00 00    \tjne    16a5 <prev_pinned_shadow+0x15b>\n    15e2:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    15e6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    15ea:\t48 89 d6             \tmov    %rdx,%rsi\n    15ed:\t48 89 c7             \tmov    %rax,%rdi\n    15f0:\te8 39 f0 ff ff       \tcallq  62e <page_list_prev>\n    15f5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    15f9:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    15fe:\t0f 94 c0             \tsete   %al\n    1601:\t0f b6 c0             \tmovzbl %al,%eax\n    1604:\t48 85 c0             \ttest   %rax,%rax\n    1607:\t75 18                \tjne    1621 <prev_pinned_shadow+0xd7>\n    1609:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    160d:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n    1611:\t83 e0 1f             \tand    $0x1f,%eax\n    1614:\t3c 03                \tcmp    $0x3,%al\n    1616:\t0f 95 c0             \tsetne  %al\n    1619:\t0f b6 c0             \tmovzbl %al,%eax\n    161c:\t48 85 c0             \ttest   %rax,%rax\n    161f:\t74 02                \tje     1623 <prev_pinned_shadow+0xd9>\n    1621:\t0f 0b                \tud2    \n    1623:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1627:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    162b:\t48 89 d6             \tmov    %rdx,%rsi\n    162e:\t48 89 c7             \tmov    %rax,%rdi\n    1631:\te8 f8 ef ff ff       \tcallq  62e <page_list_prev>\n    1636:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    163a:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    163f:\t0f 94 c0             \tsete   %al\n    1642:\t0f b6 c0             \tmovzbl %al,%eax\n    1645:\t48 85 c0             \ttest   %rax,%rax\n    1648:\t75 18                \tjne    1662 <prev_pinned_shadow+0x118>\n    164a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    164e:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n    1652:\t83 e0 1f             \tand    $0x1f,%eax\n    1655:\t3c 03                \tcmp    $0x3,%al\n    1657:\t0f 95 c0             \tsetne  %al\n    165a:\t0f b6 c0             \tmovzbl %al,%eax\n    165d:\t48 85 c0             \ttest   %rax,%rax\n    1660:\t74 02                \tje     1664 <prev_pinned_shadow+0x11a>\n    1662:\t0f 0b                \tud2    \n    1664:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1668:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    166c:\t48 89 d6             \tmov    %rdx,%rsi\n    166f:\t48 89 c7             \tmov    %rax,%rdi\n    1672:\te8 b7 ef ff ff       \tcallq  62e <page_list_prev>\n    1677:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    167b:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    1680:\t0f 94 c0             \tsete   %al\n    1683:\t0f b6 c0             \tmovzbl %al,%eax\n    1686:\t48 85 c0             \ttest   %rax,%rax\n    1689:\t75 18                \tjne    16a3 <prev_pinned_shadow+0x159>\n    168b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    168f:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n    1693:\t83 e0 1f             \tand    $0x1f,%eax\n    1696:\t3c 03                \tcmp    $0x3,%al\n    1698:\t0f 95 c0             \tsetne  %al\n    169b:\t0f b6 c0             \tmovzbl %al,%eax\n    169e:\t48 85 c0             \ttest   %rax,%rax\n    16a1:\t74 02                \tje     16a5 <prev_pinned_shadow+0x15b>\n    16a3:\t0f 0b                \tud2    \n    16a5:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    16aa:\t0f 95 c0             \tsetne  %al\n    16ad:\t0f b6 c0             \tmovzbl %al,%eax\n    16b0:\t48 85 c0             \ttest   %rax,%rax\n    16b3:\t74 1a                \tje     16cf <prev_pinned_shadow+0x185>\n    16b5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    16b9:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n    16bd:\t83 e0 40             \tand    $0x40,%eax\n    16c0:\t84 c0                \ttest   %al,%al\n    16c2:\t0f 94 c0             \tsete   %al\n    16c5:\t0f b6 c0             \tmovzbl %al,%eax\n    16c8:\t48 85 c0             \ttest   %rax,%rax\n    16cb:\t74 02                \tje     16cf <prev_pinned_shadow+0x185>\n    16cd:\t0f 0b                \tud2    \n    16cf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    16d3:\tc9                   \tleaveq \n    16d4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall prev_pinned_shadow(__int64 a1, __int64 a2) {\n  _QWORD *<span class=\"supfact\">v3</span>;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  <span class=\"supfact\">v3</span> = (_QWORD *)(a2 + Number);\n  if (page_list_empty((_QWORD *)(a2 + Number)) ||\n      a1 == page_list_first((__int64)<span class=\"supfact\">v3</span>))\n    return Number L;\n  if (a1)\n    v4 = page_list_prev(a1, <span class=\"supfact\">v3</span>);\n  else\n    v4 = page_list_last((__int64)<span class=\"supfact\">v3</span>);\n  if (v4 && (*(_BYTE *)(v4 + Number) & Number) == Number) {\n    v5 = page_list_prev(v4, <span class=\"supfact\">v3</span>);\n    if (!v5 || (*(_BYTE *)(v5 + Number) & Number) != Number)\n      BUG();\n    v6 = page_list_prev(v5, <span class=\"supfact\">v3</span>);\n    if (!v6 || (*(_BYTE *)(v6 + Number) & Number) != Number)\n      BUG();\n    v4 = page_list_prev(v6, <span class=\"supfact\">v3</span>);\n    if (!v4 || (*(_BYTE *)(v4 + Number) & Number) != Number)\n      BUG();\n  }\n  if (v4) {\n    if ((*(_BYTE *)(v4 + Number) & Number) == Number)\n      BUG();\n  }\n  return v4;\n}", "code_t": "page_info *__cdecl prev_pinned_shadow(const page_info *page, const domain *d) {\n  page_list_head *<span class=\"supfact\">pin_list</span>;\n  page_info *p;\n  page_info *pa;\n  page_info *pb;\n  <span class=\"supfact\">pin_list</span> = &d->arch.paging.shadow.pinned_shadows;\n  if (page_list_empty(&d->arch.paging.shadow.pinned_shadows) ||\n      page == page_list_first(<span class=\"supfact\">pin_list</span>))\n    return Number L;\n  if (page)\n    p = page_list_prev(page, <span class=\"supfact\">pin_list</span>);\n  else\n    p = page_list_last(<span class=\"supfact\">pin_list</span>);\n  if (p && (p->u.free.need_tlbflush & Number) == Number) {\n    pa = page_list_prev(p, <span class=\"supfact\">pin_list</span>);\n    if (!pa || (pa->u.free.need_tlbflush & Number) != Number)\n      BUG();\n    pb = page_list_prev(pa, <span class=\"supfact\">pin_list</span>);\n    if (!pb || (pb->u.free.need_tlbflush & Number) != Number)\n      BUG();\n    p = page_list_prev(pb, <span class=\"supfact\">pin_list</span>);\n    if (!p || (p->u.free.need_tlbflush & Number) != Number)\n      BUG();\n  }\n  if (p) {\n    if ((p->u.free.need_tlbflush & Number) == Number)\n      BUG();\n  }\n  return p;\n}", "var": [{"name": "v3", "type": "page_info *", "ref_name": "pin_list", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/1dd11b101682284153534b1391faa5b2a1aaf4e7663bb3ede73e7c42ea9fb148", "path_in_repo": "sslab-gatech/janus/core/create_corpus.o", "objdump": "0000000000000000 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKP10FileObjectEENS0_16_Iter_equals_valIT_EERS6_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  10:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  14:\t48 89 d6             \tmov    %rdx,%rsi\n  17:\t48 89 c7             \tmov    %rax,%rdi\n  1a:\te8 00 00 00 00       \tcallq  1f <_ZN9__gnu_cxx5__ops17__iter_equals_valIKP10FileObjectEENS0_16_Iter_equals_valIT_EERS6_+0x1f>\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\tc9                   \tleaveq \n  24:\tc3                   \tretq   ", "code_s": "__int64 __fastcall __gnu_cxx __ops\n__iter_equals_val<FileObject *const>(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __gnu_cxx __ops _Iter_equals_val<FileObject *const> _Iter_equals_val(\n      &<span class=\"supfact\">v2</span>, a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "__gnu_cxx __ops _Iter_equals_val<FileObject *const> __cdecl __gnu_cxx __ops\n__iter_equals_val<FileObject *const>(FileObject *const *__val) {\n  __gnu_cxx __ops _Iter_equals_val<FileObject *const> <span class=\"supfact\">v2</span>;\n  __gnu_cxx __ops _Iter_equals_val<FileObject *const> _Iter_equals_val(\n      &<span class=\"supfact\">v2</span>, __val);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__unk__", "ref_name": "v2", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "vedicveko", "repo_name": "Aarait", "path": "vedicveko/Aarait/9b9ba0a929d49284bd82468ea8cec0b40ace817a6b6ff83d52796ef378cdf6cd", "path_in_repo": "vedicveko/Aarait/src/objsave.o", "objdump": "0000000000002e3f <Crash_rent_deadline>:\n    2e3f:\t55                   \tpush   %rbp\n    2e40:\t48 89 e5             \tmov    %rsp,%rbp\n    2e43:\t48 83 ec 30          \tsub    $0x30,%rsp\n    2e47:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    2e4b:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    2e4f:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    2e53:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    2e58:\t74 7f                \tje     2ed9 <Crash_rent_deadline+0x9a>\n    2e5a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2e5e:\t48 89 c7             \tmov    %rax,%rdi\n    2e61:\te8 00 00 00 00       \tcallq  2e66 <Crash_rent_deadline+0x27>\n    2e66:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    2e6a:\t8b 92 b0 00 00 00    \tmov    0xb0(%rdx),%edx\n    2e70:\t01 d0                \tadd    %edx,%eax\n    2e72:\t48 98                \tcltq   \n    2e74:\t48 99                \tcqto   \n    2e76:\t48 f7 7d d8          \tidivq  -0x28(%rbp)\n    2e7a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2e7e:\t48 83 7d f8 01       \tcmpq   $0x1,-0x8(%rbp)\n    2e83:\t7e 07                \tjle    2e8c <Crash_rent_deadline+0x4d>\n    2e85:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2e8a:\teb 05                \tjmp    2e91 <Crash_rent_deadline+0x52>\n    2e8c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2e91:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2e95:\t48 89 d1             \tmov    %rdx,%rcx\n    2e98:\t48 89 c2             \tmov    %rax,%rdx\n    2e9b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2ea0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2ea5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2eaa:\te8 00 00 00 00       \tcallq  2eaf <Crash_rent_deadline+0x70>\n    2eaf:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    2eb3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2eb7:\t41 b9 02 00 00 00    \tmov    $0x2,%r9d\n    2ebd:\t49 89 d0             \tmov    %rdx,%r8\n    2ec0:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    2ec5:\t48 89 c2             \tmov    %rax,%rdx\n    2ec8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2ecd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2ed2:\te8 00 00 00 00       \tcallq  2ed7 <Crash_rent_deadline+0x98>\n    2ed7:\teb 01                \tjmp    2eda <Crash_rent_deadline+0x9b>\n    2ed9:\t90                   \tnop\n    2eda:\tc9                   \tleaveq \n    2edb:\tc3                   \tretq   ", "code_s": "void __fastcall Crash_rent_deadline(__int64 a1, __int64 a2, __int64 a3) {\n  const char *v3;\n  __int64 <span class=\"supfact\">v4</span>;\n  if (a3) {\n    <span class=\"supfact\">v4</span> =\n        (int)(*(_DWORD *)(a1 + Number) + convert_all_to_copper(a1)) / a3;\n    if (<span class=\"supfact\">v4</span> <= Number)\n      v3 = (const char *)&unk_52DC;\n    else\n      v3 = String;\n    sprintf(&buf, String, <span class=\"supfact\">v4</span>, v3);\n    act(&buf, Number L, a2, Number L, a1, Number L);\n  }\n}", "code_t": "void __cdecl Crash_rent_deadline(char_data *ch_0, char_data *recep,\n                                 __int64 cost) {\n  const char *v3;\n  __int64 <span class=\"supfact\">rent_deadline</span>;\n  if (cost) {\n    <span class=\"supfact\">rent_deadline</span> =\n        (int)(ch_0->points.bank_gold + convert_all_to_copper(ch_0)) / cost;\n    if (<span class=\"supfact\">rent_deadline</span> <= Number)\n      v3 = (const char *)&unk_52DC;\n    else\n      v3 = String;\n    sprintf(&buf, String, <span class=\"supfact\">rent_deadline</span>, v3);\n    act(&buf, Number L, recep, Number L, ch_0, Number L);\n  }\n}", "var": [{"name": "v4", "type": "__int64", "ref_name": "rent_deadline", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "Jinpeng-He", "repo_name": "BearPi_LiteOS", "path": "Jinpeng-He/BearPi_LiteOS/c75e60a8dfc04ef3fffb0766f12ec8efb14845f9d858dc9f751c8fe49554a0eb", "path_in_repo": "Jinpeng-He/BearPi_LiteOS/components/connectivity/mqtt/build/output/libpaho-embed-mqtt3c.so.1.0", "objdump": "00000000000025db <readMQTTLenString>:\n    25db:\t55                   \tpush   %rbp\n    25dc:\t48 89 e5             \tmov    %rsp,%rbp\n    25df:\t48 83 ec 28          \tsub    $0x28,%rsp\n    25e3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    25e7:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    25eb:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    25ef:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    25f6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    25fa:\t48 8b 00             \tmov    (%rax),%rax\n    25fd:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2601:\t48 29 c2             \tsub    %rax,%rdx\n    2604:\t48 89 d0             \tmov    %rdx,%rax\n    2607:\t48 83 f8 01          \tcmp    $0x1,%rax\n    260b:\t7e 5c                \tjle    2669 <readMQTTLenString+0x8e>\n    260d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2611:\t48 89 c7             \tmov    %rax,%rdi\n    2614:\te8 95 fd ff ff       \tcallq  23ae <readInt>\n    2619:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    261d:\t89 42 08             \tmov    %eax,0x8(%rdx)\n    2620:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2624:\t48 8b 10             \tmov    (%rax),%rdx\n    2627:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    262b:\t8b 40 08             \tmov    0x8(%rax),%eax\n    262e:\t48 98                \tcltq   \n    2630:\t48 01 d0             \tadd    %rdx,%rax\n    2633:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n    2637:\t72 30                \tjb     2669 <readMQTTLenString+0x8e>\n    2639:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    263d:\t48 8b 10             \tmov    (%rax),%rdx\n    2640:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2644:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    2648:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    264c:\t48 8b 10             \tmov    (%rax),%rdx\n    264f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2653:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2656:\t48 98                \tcltq   \n    2658:\t48 01 c2             \tadd    %rax,%rdx\n    265b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    265f:\t48 89 10             \tmov    %rdx,(%rax)\n    2662:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n    2669:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    266d:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    2674:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    2677:\tc9                   \tleaveq \n    2678:\tc3                   \tretq   ", "code_s": "__int64 __fastcall readMQTTLenString(__int64 a1, unsigned __int8 **a2,\n                                     unsigned __int64 a3) {\n  unsigned int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = Number;\n  if ((__int64)(a3 - (_QWORD)*a2) > Number) {\n    *(_DWORD *)(a1 + Number) = readInt(a2);\n    if (a3 >= (unsigned __int64)&(*a2)[*(int *)(a1 + Number)]) {\n      *(_QWORD *)(a1 + Number) = *a2;\n      *a2 += *(int *)(a1 + Number);\n      <span class=\"supfact\">v5</span> = Number;\n    }\n  }\n  *(_QWORD *)a1 = Number L;\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "int __cdecl readMQTTLenString(MQTTString *mqttstring, unsigned __int8 **pptr,\n                              unsigned __int8 *enddata) {\n  int <span class=\"supfact\">rc</span>;\n  <span class=\"supfact\">rc</span> = Number;\n  if (enddata - *pptr > Number) {\n    mqttstring->lenstring.len = readInt(pptr);\n    if (enddata >= &(*pptr)[mqttstring->lenstring.len]) {\n      mqttstring->lenstring.data = (char *)*pptr;\n      *pptr += mqttstring->lenstring.len;\n      <span class=\"supfact\">rc</span> = Number;\n    }\n  }\n  mqttstring->cstring = Number L;\n  return <span class=\"supfact\">rc</span>;\n}", "var": [{"name": "v5", "type": "int", "ref_name": "rc", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "csfoo", "repo_name": "wWigIO", "path": "csfoo/wWigIO/8c3b19592630254cf3561f8e2f55b46ee7cb1ed6fba9cd77ddbafb839111d4f0", "path_in_repo": "csfoo/wWigIO/external/KentLib/lib/zlibFace.o", "objdump": "0000000000000200 <zSelfTest>:\n 200:\t55                   \tpush   %rbp\n 201:\t48 89 e5             \tmov    %rsp,%rbp\n 204:\t41 57                \tpush   %r15\n 206:\t41 56                \tpush   %r14\n 208:\t41 54                \tpush   %r12\n 20a:\t53                   \tpush   %rbx\n 20b:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n 212:\t89 7d 8c             \tmov    %edi,-0x74(%rbp)\n 215:\t48 89 e0             \tmov    %rsp,%rax\n 218:\t49 89 c4             \tmov    %rax,%r12\n 21b:\t8b 55 8c             \tmov    -0x74(%rbp),%edx\n 21e:\t48 63 c2             \tmovslq %edx,%rax\n 221:\t48 83 e8 01          \tsub    $0x1,%rax\n 225:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 229:\t48 63 c2             \tmovslq %edx,%rax\n 22c:\t49 89 c0             \tmov    %rax,%r8\n 22f:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 235:\t48 63 c2             \tmovslq %edx,%rax\n 238:\t48 89 c1             \tmov    %rax,%rcx\n 23b:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n 240:\t48 63 c2             \tmovslq %edx,%rax\n 243:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 24a:\t00 \n 24b:\tb8 10 00 00 00       \tmov    $0x10,%eax\n 250:\t48 83 e8 01          \tsub    $0x1,%rax\n 254:\t48 01 d0             \tadd    %rdx,%rax\n 257:\tbb 10 00 00 00       \tmov    $0x10,%ebx\n 25c:\tba 00 00 00 00       \tmov    $0x0,%edx\n 261:\t48 f7 f3             \tdiv    %rbx\n 264:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n 268:\t48 29 c4             \tsub    %rax,%rsp\n 26b:\t48 89 e0             \tmov    %rsp,%rax\n 26e:\t48 83 c0 03          \tadd    $0x3,%rax\n 272:\t48 c1 e8 02          \tshr    $0x2,%rax\n 276:\t48 c1 e0 02          \tshl    $0x2,%rax\n 27a:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 27e:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n 281:\t48 98                \tcltq   \n 283:\tc1 e0 02             \tshl    $0x2,%eax\n 286:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n 289:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n 290:\teb 14                \tjmp    2a6 <zSelfTest+0xa6>\n 292:\t8b 4d cc             \tmov    -0x34(%rbp),%ecx\n 295:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 299:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n 29c:\t48 63 d2             \tmovslq %edx,%rdx\n 29f:\t89 0c 90             \tmov    %ecx,(%rax,%rdx,4)\n 2a2:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n 2a6:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n 2a9:\t3b 45 8c             \tcmp    -0x74(%rbp),%eax\n 2ac:\t7c e4                \tjl     292 <zSelfTest+0x92>\n 2ae:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 2b1:\t48 98                \tcltq   \n 2b3:\t48 89 c7             \tmov    %rax,%rdi\n 2b6:\te8 00 00 00 00       \tcallq  2bb <zSelfTest+0xbb>\n 2bb:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n 2be:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 2c1:\t48 89 e2             \tmov    %rsp,%rdx\n 2c4:\t48 89 d3             \tmov    %rdx,%rbx\n 2c7:\t48 63 d0             \tmovslq %eax,%rdx\n 2ca:\t48 83 ea 01          \tsub    $0x1,%rdx\n 2ce:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n 2d2:\t48 63 d0             \tmovslq %eax,%rdx\n 2d5:\t48 89 95 70 ff ff ff \tmov    %rdx,-0x90(%rbp)\n 2dc:\t48 c7 85 78 ff ff ff \tmovq   $0x0,-0x88(%rbp)\n 2e3:\t00 00 00 00 \n 2e7:\t48 63 d0             \tmovslq %eax,%rdx\n 2ea:\t48 89 95 60 ff ff ff \tmov    %rdx,-0xa0(%rbp)\n 2f1:\t48 c7 85 68 ff ff ff \tmovq   $0x0,-0x98(%rbp)\n 2f8:\t00 00 00 00 \n 2fc:\t48 98                \tcltq   \n 2fe:\tba 10 00 00 00       \tmov    $0x10,%edx\n 303:\t48 83 ea 01          \tsub    $0x1,%rdx\n 307:\t48 01 d0             \tadd    %rdx,%rax\n 30a:\tbf 10 00 00 00       \tmov    $0x10,%edi\n 30f:\tba 00 00 00 00       \tmov    $0x0,%edx\n 314:\t48 f7 f7             \tdiv    %rdi\n 317:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n 31b:\t48 29 c4             \tsub    %rax,%rsp\n 31e:\t48 89 e0             \tmov    %rsp,%rax\n 321:\t48 83 c0 00          \tadd    $0x0,%rax\n 325:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n 329:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 32c:\t48 63 c8             \tmovslq %eax,%rcx\n 32f:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n 333:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 336:\t48 63 f0             \tmovslq %eax,%rsi\n 339:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 33d:\t48 89 c7             \tmov    %rax,%rdi\n 340:\te8 00 00 00 00       \tcallq  345 <zSelfTest+0x145>\n 345:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n 348:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 34b:\t48 63 d0             \tmovslq %eax,%rdx\n 34e:\t48 83 ea 01          \tsub    $0x1,%rdx\n 352:\t48 89 55 a0          \tmov    %rdx,-0x60(%rbp)\n 356:\t48 63 d0             \tmovslq %eax,%rdx\n 359:\t48 89 95 50 ff ff ff \tmov    %rdx,-0xb0(%rbp)\n 360:\t48 c7 85 58 ff ff ff \tmovq   $0x0,-0xa8(%rbp)\n 367:\t00 00 00 00 \n 36b:\t48 63 d0             \tmovslq %eax,%rdx\n 36e:\t49 89 d6             \tmov    %rdx,%r14\n 371:\t41 bf 00 00 00 00    \tmov    $0x0,%r15d\n 377:\t48 98                \tcltq   \n 379:\tba 10 00 00 00       \tmov    $0x10,%edx\n 37e:\t48 83 ea 01          \tsub    $0x1,%rdx\n 382:\t48 01 d0             \tadd    %rdx,%rax\n 385:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 38a:\tba 00 00 00 00       \tmov    $0x0,%edx\n 38f:\t48 f7 f6             \tdiv    %rsi\n 392:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n 396:\t48 29 c4             \tsub    %rax,%rsp\n 399:\t48 89 e0             \tmov    %rsp,%rax\n 39c:\t48 83 c0 00          \tadd    $0x0,%rax\n 3a0:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n 3a4:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 3a7:\t48 63 c8             \tmovslq %eax,%rcx\n 3aa:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n 3ae:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n 3b1:\t48 63 f0             \tmovslq %eax,%rsi\n 3b4:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 3b8:\t48 89 c7             \tmov    %rax,%rdi\n 3bb:\te8 00 00 00 00       \tcallq  3c0 <zSelfTest+0x1c0>\n 3c0:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 3c3:\t48 63 d0             \tmovslq %eax,%rdx\n 3c6:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n 3ca:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 3ce:\t48 89 ce             \tmov    %rcx,%rsi\n 3d1:\t48 89 c7             \tmov    %rax,%rdi\n 3d4:\te8 00 00 00 00       \tcallq  3d9 <zSelfTest+0x1d9>\n 3d9:\t85 c0                \ttest   %eax,%eax\n 3db:\t74 18                \tje     3f5 <zSelfTest+0x1f5>\n 3dd:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n 3e0:\t89 c6                \tmov    %eax,%esi\n 3e2:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 3e9 <zSelfTest+0x1e9>\n 3e9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3ee:\te8 00 00 00 00       \tcallq  3f3 <zSelfTest+0x1f3>\n 3f3:\teb 29                \tjmp    41e <zSelfTest+0x21e>\n 3f5:\tf2 0f 2a 45 ac       \tcvtsi2sdl -0x54(%rbp),%xmm0\n 3fa:\tf2 0f 2a 4d c8       \tcvtsi2sdl -0x38(%rbp),%xmm1\n 3ff:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n 403:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n 406:\t89 c2                \tmov    %eax,%edx\n 408:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 40f <zSelfTest+0x20f>\n 40f:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 414:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 419:\te8 00 00 00 00       \tcallq  41e <zSelfTest+0x21e>\n 41e:\t48 89 dc             \tmov    %rbx,%rsp\n 421:\t4c 89 e4             \tmov    %r12,%rsp\n 424:\t90                   \tnop\n 425:\t48 8d 65 e0          \tlea    -0x20(%rbp),%rsp\n 429:\t5b                   \tpop    %rbx\n 42a:\t41 5c                \tpop    %r12\n 42c:\t41 5e                \tpop    %r14\n 42e:\t41 5f                \tpop    %r15\n 430:\t5d                   \tpop    %rbp\n 431:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall zSelfTest(int a1) {\n  void *v1;\n  void *v2;\n  void *v3;\n  __int64 result;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  unsigned int <span class=\"supfact\">v6</span>;\n  void *<span class=\"supfact\">s1</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  __int64 *<span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  void *<span class=\"supfact\">s2</span>;\n  <span class=\"supfact\">v6</span> = a1;\n  <span class=\"supfact\">v15</span> = a1 - Number L;\n  v1 = alloca(Number * ((Number L * a1 + Number) / Number));\n  <span class=\"supfact\">s2</span> =\n      (void *)(Number *\n               (((unsigned __int64)<span class=\"supfact\">v5</span> + Number) >> Number));\n  <span class=\"supfact\">v13</span> = Number * a1;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < (int)<span class=\"supfact\">v6</span>;\n       ++<span class=\"supfact\">i</span>)\n    *((_DWORD *)<span class=\"supfact\">s2</span> + <span class=\"supfact\">i</span>) = <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v12</span> = zCompBufSize(<span class=\"supfact\">v13</span>);\n  <span class=\"supfact\">v11</span> = <span class=\"supfact\">v12</span> - Number L;\n  <span class=\"supfact\">v5</span>[Number] = <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v5</span>[Number] = Number L;\n  <span class=\"supfact\">v5</span>[Number] = <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v5</span>[Number] = Number L;\n  v2 = alloca(Number * ((<span class=\"supfact\">v12</span> + Number L) / Number));\n  <span class=\"supfact\">v10</span> = <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v9</span> =\n      zCompress((__int64)<span class=\"supfact\">s2</span>, <span class=\"supfact\">v13</span>,\n                (__int64)<span class=\"supfact\">v5</span>, <span class=\"supfact\">v12</span>);\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">v13</span> - Number L;\n  <span class=\"supfact\">v5</span>[Number] = <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v5</span>[Number] = Number L;\n  v3 = alloca(Number * ((<span class=\"supfact\">v13</span> + Number L) / Number));\n  <span class=\"supfact\">s1</span> = <span class=\"supfact\">v5</span>;\n  zUncompress((__int64)<span class=\"supfact\">v10</span>, <span class=\"supfact\">v9</span>,\n              (__int64)<span class=\"supfact\">v5</span>, <span class=\"supfact\">v13</span>);\n  if (!memcmp(<span class=\"supfact\">s1</span>, <span class=\"supfact\">s2</span>, <span class=\"supfact\">v13</span>))\n    result = verbose(Number L, String, <span class=\"supfact\">v6</span>,\n                     (double)<span class=\"supfact\">v9</span> / (double)<span class=\"supfact\">v13</span>);\n  else\n    result = errAbort(String, <span class=\"supfact\">v6</span>);\n  return result;\n}", "code_t": "void __cdecl zSelfTest(int count) {\n  void *v1;\n  void *v2;\n  void *v3;\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">counta</span>;\n  char(*<span class=\"supfact\">p_uncBuf</span>)[];\n  __int64 <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">compSize</span>;\n  char(*<span class=\"supfact\">p_compBuf</span>)[];\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">compBufSize</span>;\n  int <span class=\"supfact\">uncSize</span>;\n  int <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  unsigned int(*<span class=\"supfact\">p_testData</span>)[];\n  <span class=\"supfact\">counta</span> = count;\n  <span class=\"supfact\">v14</span> = count - Number L;\n  v1 = alloca(Number * ((Number L * count + Number) / Number));\n  <span class=\"supfact\">p_testData</span> = (unsigned int(*)[])(\n      Number * (((unsigned __int64)<span class=\"supfact\">v4</span> + Number) >> Number));\n  <span class=\"supfact\">uncSize</span> = Number * count;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">counta</span>;\n       ++<span class=\"supfact\">i</span>)\n    *((_DWORD *)<span class=\"supfact\">p_testData</span> + <span class=\"supfact\">i</span>) =\n        <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">compBufSize</span> = zCompBufSize(<span class=\"supfact\">uncSize</span>);\n  <span class=\"supfact\">v10</span> = <span class=\"supfact\">compBufSize</span> - Number L;\n  <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">compBufSize</span>;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">compBufSize</span>;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  v2 = alloca(Number * ((<span class=\"supfact\">compBufSize</span> + Number L) / Number));\n  <span class=\"supfact\">p_compBuf</span> = (char(*)[])<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">compSize</span> =\n      zCompress(<span class=\"supfact\">p_testData</span>, <span class=\"supfact\">uncSize</span>,\n                <span class=\"supfact\">v4</span>, <span class=\"supfact\">compBufSize</span>);\n  <span class=\"supfact\">v7</span> = <span class=\"supfact\">uncSize</span> - Number L;\n  <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">uncSize</span>;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  v3 = alloca(Number * ((<span class=\"supfact\">uncSize</span> + Number L) / Number));\n  <span class=\"supfact\">p_uncBuf</span> = (char(*)[])<span class=\"supfact\">v4</span>;\n  zUncompress(<span class=\"supfact\">p_compBuf</span>, <span class=\"supfact\">compSize</span>,\n              <span class=\"supfact\">v4</span>, <span class=\"supfact\">uncSize</span>);\n  if (!memcmp(<span class=\"supfact\">p_uncBuf</span>, <span class=\"supfact\">p_testData</span>,\n              <span class=\"supfact\">uncSize</span>))\n    verbose(Number L, String, (unsigned int)<span class=\"supfact\">counta</span>,\n            (double)<span class=\"supfact\">compSize</span> / (double)<span class=\"supfact\">uncSize</span>);\n  else\n    errAbort(String, (unsigned int)<span class=\"supfact\">counta</span>);\n}", "var": [{"name": "s2", "type": "const uint8_t *", "ref_name": "p_testData", "ref_type": "unsigned int (*)[]"}, {"name": "v15", "type": "const uint8_t *", "ref_name": "v14", "ref_type": "__int64"}, {"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v13", "type": "int", "ref_name": "uncSize", "ref_type": "int"}, {"name": "v12", "type": "int", "ref_name": "compBufSize", "ref_type": "int"}, {"name": "v11", "type": "__int64", "ref_name": "v10", "ref_type": "__int64"}, {"name": "v10", "type": "unsigned __int8 (*)[]", "ref_name": "p_compBuf", "ref_type": "char (*)[]"}, {"name": "v9", "type": "int", "ref_name": "compSize", "ref_type": "int"}, {"name": "v8", "type": "__int64", "ref_name": "v7", "ref_type": "__int64"}, {"name": "s1", "type": "unsigned __int8 (*)[]", "ref_name": "p_uncBuf", "ref_type": "char (*)[]"}, {"name": "v6", "type": "int", "ref_name": "counta", "ref_type": "int"}, {"name": "v5", "type": "__int64[6]", "ref_name": "v4", "ref_type": "__int64[7]"}], "body_in_train": false}, {"repo_owner": "ray2501", "repo_name": "tclqrencode", "path": "ray2501/tclqrencode/546bbe15208f555a4ca60bd2e0e19ec399eee628eac1e8be5d44645a99bc314b", "path_in_repo": "ray2501/tclqrencode//libtclqrencode1.0.so", "objdump": "00000000000099b1 <Mask_mask>:\n    99b1:\t48 83 ec 48          \tsub    $0x48,%rsp\n    99b5:\t89 7c 24 0c          \tmov    %edi,0xc(%rsp)\n    99b9:\t48 89 34 24          \tmov    %rsi,(%rsp)\n    99bd:\t89 54 24 08          \tmov    %edx,0x8(%rsp)\n    99c1:\tc7 44 24 38 ff ff ff \tmovl   $0x7fffffff,0x38(%rsp)\n    99c8:\t7f \n    99c9:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    99cd:\t0f af c0             \timul   %eax,%eax\n    99d0:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n    99d4:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    99d8:\t48 98                \tcltq   \n    99da:\t48 89 c7             \tmov    %rax,%rdi\n    99dd:\te8 be aa ff ff       \tcallq  44a0 <malloc@plt>\n    99e2:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n    99e7:\t48 83 7c 24 28 00    \tcmpq   $0x0,0x28(%rsp)\n    99ed:\t75 0a                \tjne    99f9 <Mask_mask+0x48>\n    99ef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    99f4:\te9 4c 01 00 00       \tjmpq   9b45 <Mask_mask+0x194>\n    99f9:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    99fd:\t48 98                \tcltq   \n    99ff:\t48 89 c7             \tmov    %rax,%rdi\n    9a02:\te8 99 aa ff ff       \tcallq  44a0 <malloc@plt>\n    9a07:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n    9a0c:\t48 83 7c 24 20 00    \tcmpq   $0x0,0x20(%rsp)\n    9a12:\t75 17                \tjne    9a2b <Mask_mask+0x7a>\n    9a14:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    9a19:\t48 89 c7             \tmov    %rax,%rdi\n    9a1c:\te8 4f a6 ff ff       \tcallq  4070 <free@plt>\n    9a21:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9a26:\te9 1a 01 00 00       \tjmpq   9b45 <Mask_mask+0x194>\n    9a2b:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n    9a32:\t00 \n    9a33:\te9 f0 00 00 00       \tjmpq   9b28 <Mask_mask+0x177>\n    9a38:\tc7 44 24 1c 00 00 00 \tmovl   $0x0,0x1c(%rsp)\n    9a3f:\t00 \n    9a40:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n    9a44:\t48 98                \tcltq   \n    9a46:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    9a4d:\t00 \n    9a4e:\t48 8d 05 cb c9 00 00 \tlea    0xc9cb(%rip),%rax        # 16420 <maskMakers>\n    9a55:\t4c 8b 04 02          \tmov    (%rdx,%rax,1),%r8\n    9a59:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    9a5e:\t48 8b 0c 24          \tmov    (%rsp),%rcx\n    9a62:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    9a66:\t48 89 ce             \tmov    %rcx,%rsi\n    9a69:\t89 c7                \tmov    %eax,%edi\n    9a6b:\t41 ff d0             \tcallq  *%r8\n    9a6e:\t89 44 24 18          \tmov    %eax,0x18(%rsp)\n    9a72:\t8b 4c 24 08          \tmov    0x8(%rsp),%ecx\n    9a76:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    9a7a:\t48 8b 74 24 28       \tmov    0x28(%rsp),%rsi\n    9a7f:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    9a83:\t89 c7                \tmov    %eax,%edi\n    9a85:\te8 86 a6 ff ff       \tcallq  4110 <Mask_writeFormatInformation@plt>\n    9a8a:\t01 44 24 18          \tadd    %eax,0x18(%rsp)\n    9a8e:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n    9a92:\t69 d0 c8 00 00 00    \timul   $0xc8,%eax,%edx\n    9a98:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    9a9c:\t01 d0                \tadd    %edx,%eax\n    9a9e:\t99                   \tcltd   \n    9a9f:\tf7 7c 24 34          \tidivl  0x34(%rsp)\n    9aa3:\t89 c2                \tmov    %eax,%edx\n    9aa5:\tc1 ea 1f             \tshr    $0x1f,%edx\n    9aa8:\t01 d0                \tadd    %edx,%eax\n    9aaa:\td1 f8                \tsar    %eax\n    9aac:\t89 44 24 14          \tmov    %eax,0x14(%rsp)\n    9ab0:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    9ab4:\t83 e8 32             \tsub    $0x32,%eax\n    9ab7:\t99                   \tcltd   \n    9ab8:\t31 d0                \txor    %edx,%eax\n    9aba:\t29 d0                \tsub    %edx,%eax\n    9abc:\t48 63 d0             \tmovslq %eax,%rdx\n    9abf:\t48 69 d2 67 66 66 66 \timul   $0x66666667,%rdx,%rdx\n    9ac6:\t48 c1 ea 20          \tshr    $0x20,%rdx\n    9aca:\td1 fa                \tsar    %edx\n    9acc:\tc1 f8 1f             \tsar    $0x1f,%eax\n    9acf:\t29 c2                \tsub    %eax,%edx\n    9ad1:\t89 d0                \tmov    %edx,%eax\n    9ad3:\tc1 e0 02             \tshl    $0x2,%eax\n    9ad6:\t01 d0                \tadd    %edx,%eax\n    9ad8:\t01 c0                \tadd    %eax,%eax\n    9ada:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n    9ade:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    9ae3:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    9ae7:\t48 89 d6             \tmov    %rdx,%rsi\n    9aea:\t89 c7                \tmov    %eax,%edi\n    9aec:\te8 0f a9 ff ff       \tcallq  4400 <Mask_evaluateSymbol@plt>\n    9af1:\t01 44 24 1c          \tadd    %eax,0x1c(%rsp)\n    9af5:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    9af9:\t3b 44 24 38          \tcmp    0x38(%rsp),%eax\n    9afd:\t7d 24                \tjge    9b23 <Mask_mask+0x172>\n    9aff:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    9b03:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n    9b07:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    9b0b:\t48 63 d0             \tmovslq %eax,%rdx\n    9b0e:\t48 8b 4c 24 28       \tmov    0x28(%rsp),%rcx\n    9b13:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    9b18:\t48 89 ce             \tmov    %rcx,%rsi\n    9b1b:\t48 89 c7             \tmov    %rax,%rdi\n    9b1e:\te8 ed a8 ff ff       \tcallq  4410 <memcpy@plt>\n    9b23:\t83 44 24 3c 01       \taddl   $0x1,0x3c(%rsp)\n    9b28:\t83 7c 24 3c 07       \tcmpl   $0x7,0x3c(%rsp)\n    9b2d:\t0f 8e 05 ff ff ff    \tjle    9a38 <Mask_mask+0x87>\n    9b33:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    9b38:\t48 89 c7             \tmov    %rax,%rdi\n    9b3b:\te8 30 a5 ff ff       \tcallq  4070 <free@plt>\n    9b40:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    9b45:\t48 83 c4 48          \tadd    $0x48,%rsp\n    9b49:\tc3                   \tretq   ", "code_s": "void *__fastcall Mask_mask(unsigned int a1, _BYTE *a2, unsigned int a3) {\n  void *result;\n  __int64 v4;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  void *<span class=\"supfact\">dest</span>;\n  _BYTE *<span class=\"supfact\">ptr</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v11</span> = Number;\n  <span class=\"supfact\">v10</span> = a1 * a1;\n  <span class=\"supfact\">ptr</span> = malloc((int)(a1 * a1));\n  if (!<span class=\"supfact\">ptr</span>)\n    return Number L;\n  <span class=\"supfact\">dest</span> = malloc(<span class=\"supfact\">v10</span>);\n  if (<span class=\"supfact\">dest</span>) {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">v6</span> = ((__int64(__fastcall *)(\n          int, _BYTE *, _BYTE *))maskMakers[<span class=\"supfact\">i</span>])(\n          a1, a2, <span class=\"supfact\">ptr</span>);\n      v4 = (int)(Number * (Mask_writeFormatInformation(\n                               a1, <span class=\"supfact\">ptr</span>,\n                               (unsigned int)<span class=\"supfact\">i</span>, a3) +\n                           <span class=\"supfact\">v6</span>) +\n                 <span class=\"supfact\">v10</span>) /\n               <span class=\"supfact\">v10</span> / Number -\n           Number;\n      <span class=\"supfact\">v7</span> =\n          Mask_evaluateSymbol(a1, <span class=\"supfact\">ptr</span>) +\n          Number * ((int)((HIDWORD(v4) ^ v4) - HIDWORD(v4)) / Number);\n      if (<span class=\"supfact\">v7</span> < <span class=\"supfact\">v11</span>) {\n        <span class=\"supfact\">v11</span> = <span class=\"supfact\">v7</span>;\n        memcpy(<span class=\"supfact\">dest</span>, <span class=\"supfact\">ptr</span>, <span class=\"supfact\">v10</span>);\n      }\n    }\n    free(<span class=\"supfact\">ptr</span>);\n    result = <span class=\"supfact\">dest</span>;\n  } else {\n    free(<span class=\"supfact\">ptr</span>);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "unsigned __int8 *__cdecl Mask_mask(int width, unsigned __int8 *frame,\n                                   QRecLevel level) {\n  unsigned __int8 *result;\n  __int64 v4;\n  int <span class=\"supfact\">blacks</span>;\n  int <span class=\"supfact\">demerit</span>;\n  unsigned __int8 *<span class=\"supfact\">bestMask</span>;\n  unsigned __int8 *<span class=\"supfact\">mask</span>;\n  int <span class=\"supfact\">w2</span>;\n  int <span class=\"supfact\">minDemerit</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">minDemerit</span> = Number;\n  <span class=\"supfact\">w2</span> = width * width;\n  <span class=\"supfact\">mask</span> = (unsigned __int8 *)malloc(width * width);\n  if (!<span class=\"supfact\">mask</span>)\n    return Number L;\n  <span class=\"supfact\">bestMask</span> = (unsigned __int8 *)malloc(<span class=\"supfact\">w2</span>);\n  if (<span class=\"supfact\">bestMask</span>) {\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         ++<span class=\"supfact\">i</span>) {\n      <span class=\"supfact\">blacks</span> =\n          ((int(__cdecl *)(int, const unsigned __int8 *,\n                           unsigned __int8 *))maskMakers[<span class=\"supfact\">i</span>])(\n              width, frame, <span class=\"supfact\">mask</span>);\n      v4 = (Number * (Mask_writeFormatInformation(width, <span class=\"supfact\">mask</span>,\n                                                  <span class=\"supfact\">i</span>, level) +\n                      <span class=\"supfact\">blacks</span>) +\n            <span class=\"supfact\">w2</span>) /\n               <span class=\"supfact\">w2</span> / Number -\n           Number;\n      <span class=\"supfact\">demerit</span> =\n          Mask_evaluateSymbol(width, <span class=\"supfact\">mask</span>) +\n          Number * ((int)((HIDWORD(v4) ^ v4) - HIDWORD(v4)) / Number);\n      if (<span class=\"supfact\">demerit</span> < <span class=\"supfact\">minDemerit</span>) {\n        <span class=\"supfact\">minDemerit</span> = <span class=\"supfact\">demerit</span>;\n        memcpy(<span class=\"supfact\">bestMask</span>, <span class=\"supfact\">mask</span>,\n               <span class=\"supfact\">w2</span>);\n      }\n    }\n    free(<span class=\"supfact\">mask</span>);\n    result = <span class=\"supfact\">bestMask</span>;\n  } else {\n    free(<span class=\"supfact\">mask</span>);\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v11", "type": "int", "ref_name": "minDemerit", "ref_type": "int"}, {"name": "v10", "type": "int", "ref_name": "w2", "ref_type": "int"}, {"name": "ptr", "type": "uint8_t *", "ref_name": "mask", "ref_type": "unsigned __int8 *"}, {"name": "dest", "type": "uint8_t *", "ref_name": "bestMask", "ref_type": "unsigned __int8 *"}, {"name": "v7", "type": "int", "ref_name": "demerit", "ref_type": "int"}, {"name": "v6", "type": "int", "ref_name": "blacks", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "danielfengyu", "repo_name": "MyPlayer", "path": "danielfengyu/MyPlayer/64ece2f0e64cb5bd19c5dc30b5cdff1ca9e7b01f6cde4ef6faaebf5e761d122f", "path_in_repo": "danielfengyu/MyPlayer/jni/ffmpeg/libavcodec/timecode.o", "objdump": "00000000000002ef <ff_init_smtpe_timecode>:\n 2ef:\t48 83 ec 38          \tsub    $0x38,%rsp\n 2f3:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n 2f8:\t48 89 34 24          \tmov    %rsi,(%rsp)\n 2fc:\t48 8b 04 24          \tmov    (%rsp),%rax\n 300:\t48 8b 00             \tmov    (%rax),%rax\n 303:\t4c 8d 44 24 17       \tlea    0x17(%rsp),%r8\n 308:\t48 8d 7c 24 1c       \tlea    0x1c(%rsp),%rdi\n 30d:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n 312:\t48 8d 54 24 24       \tlea    0x24(%rsp),%rdx\n 317:\t48 83 ec 08          \tsub    $0x8,%rsp\n 31b:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n 320:\t56                   \tpush   %rsi\n 321:\t4d 89 c1             \tmov    %r8,%r9\n 324:\t49 89 f8             \tmov    %rdi,%r8\n 327:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 32c:\t48 89 c7             \tmov    %rax,%rdi\n 32f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 334:\te8 00 00 00 00       \tcallq  339 <ff_init_smtpe_timecode+0x4a>\n 339:\t48 83 c4 10          \tadd    $0x10,%rsp\n 33d:\t83 f8 05             \tcmp    $0x5,%eax\n 340:\t74 26                \tje     368 <ff_init_smtpe_timecode+0x79>\n 342:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 347:\tba 00 00 00 00       \tmov    $0x0,%edx\n 34c:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 351:\t48 89 c7             \tmov    %rax,%rdi\n 354:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 359:\te8 00 00 00 00       \tcallq  35e <ff_init_smtpe_timecode+0x6f>\n 35e:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 363:\te9 f8 00 00 00       \tjmpq   460 <ff_init_smtpe_timecode+0x171>\n 368:\t48 8b 04 24          \tmov    (%rsp),%rax\n 36c:\t8b 50 10             \tmov    0x10(%rax),%edx\n 36f:\t48 8b 04 24          \tmov    (%rsp),%rax\n 373:\t8b 40 14             \tmov    0x14(%rax),%eax\n 376:\t89 c1                \tmov    %eax,%ecx\n 378:\tc1 e9 1f             \tshr    $0x1f,%ecx\n 37b:\t01 c8                \tadd    %ecx,%eax\n 37d:\td1 f8                \tsar    %eax\n 37f:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n 382:\t48 8b 04 24          \tmov    (%rsp),%rax\n 386:\t8b 70 14             \tmov    0x14(%rax),%esi\n 389:\t89 c8                \tmov    %ecx,%eax\n 38b:\t99                   \tcltd   \n 38c:\tf7 fe                \tidiv   %esi\n 38e:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n 392:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n 396:\t69 d0 10 0e 00 00    \timul   $0xe10,%eax,%edx\n 39c:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n 3a0:\t6b c0 3c             \timul   $0x3c,%eax,%eax\n 3a3:\t01 c2                \tadd    %eax,%edx\n 3a5:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n 3a9:\t01 d0                \tadd    %edx,%eax\n 3ab:\t0f af 44 24 2c       \timul   0x2c(%rsp),%eax\n 3b0:\t89 c2                \tmov    %eax,%edx\n 3b2:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n 3b6:\t01 c2                \tadd    %eax,%edx\n 3b8:\t48 8b 04 24          \tmov    (%rsp),%rax\n 3bc:\t89 50 08             \tmov    %edx,0x8(%rax)\n 3bf:\t0f b6 44 24 17       \tmovzbl 0x17(%rsp),%eax\n 3c4:\t3c 3a                \tcmp    $0x3a,%al\n 3c6:\t0f 95 c0             \tsetne  %al\n 3c9:\t0f b6 d0             \tmovzbl %al,%edx\n 3cc:\t48 8b 04 24          \tmov    (%rsp),%rax\n 3d0:\t89 50 0c             \tmov    %edx,0xc(%rax)\n 3d3:\t48 8b 04 24          \tmov    (%rsp),%rax\n 3d7:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 3da:\t85 c0                \ttest   %eax,%eax\n 3dc:\t74 7d                \tje     45b <ff_init_smtpe_timecode+0x16c>\n 3de:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n 3e2:\t6b d0 3c             \timul   $0x3c,%eax,%edx\n 3e5:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n 3e9:\t01 d0                \tadd    %edx,%eax\n 3eb:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n 3ef:\t48 8b 04 24          \tmov    (%rsp),%rax\n 3f3:\t8b 40 14             \tmov    0x14(%rax),%eax\n 3f6:\t3d e9 03 00 00       \tcmp    $0x3e9,%eax\n 3fb:\t75 07                \tjne    404 <ff_init_smtpe_timecode+0x115>\n 3fd:\t83 7c 24 2c 1e       \tcmpl   $0x1e,0x2c(%rsp)\n 402:\t74 23                \tje     427 <ff_init_smtpe_timecode+0x138>\n 404:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 409:\tba 00 00 00 00       \tmov    $0x0,%edx\n 40e:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 413:\t48 89 c7             \tmov    %rax,%rdi\n 416:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 41b:\te8 00 00 00 00       \tcallq  420 <ff_init_smtpe_timecode+0x131>\n 420:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n 425:\teb 39                \tjmp    460 <ff_init_smtpe_timecode+0x171>\n 427:\t48 8b 04 24          \tmov    (%rsp),%rax\n 42b:\t8b 50 08             \tmov    0x8(%rax),%edx\n 42e:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n 432:\t48 63 c8             \tmovslq %eax,%rcx\n 435:\t48 69 c9 67 66 66 66 \timul   $0x66666667,%rcx,%rcx\n 43c:\t48 c1 e9 20          \tshr    $0x20,%rcx\n 440:\tc1 f9 02             \tsar    $0x2,%ecx\n 443:\tc1 f8 1f             \tsar    $0x1f,%eax\n 446:\t29 c8                \tsub    %ecx,%eax\n 448:\t89 c1                \tmov    %eax,%ecx\n 44a:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n 44e:\t01 c8                \tadd    %ecx,%eax\n 450:\t01 c0                \tadd    %eax,%eax\n 452:\t29 c2                \tsub    %eax,%edx\n 454:\t48 8b 04 24          \tmov    (%rsp),%rax\n 458:\t89 50 08             \tmov    %edx,0x8(%rax)\n 45b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 460:\t48 83 c4 38          \tadd    $0x38,%rsp\n 464:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall ff_init_smtpe_timecode(__int64 a1, __int64 a2) {\n  char <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  if (sscanf(*(const char **)a2, String, &<span class=\"supfact\">v7</span>,\n             &<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v5</span>, &<span class=\"supfact\">v3</span>,\n             &<span class=\"supfact\">v4</span>) != Number) {\n    av_log(a1, Number L, String);\n    return Number;\n  }\n  <span class=\"supfact\">v9</span> =\n      (*(_DWORD *)(a2 + Number) + *(_DWORD *)(a2 + Number) / Number) /\n      *(_DWORD *)(a2 + Number);\n  *(_DWORD *)(a2 + Number) =\n      <span class=\"supfact\">v4</span> +\n      <span class=\"supfact\">v9</span> * (Number * <span class=\"supfact\">v6</span> +\n                            Number * <span class=\"supfact\">v7</span> + <span class=\"supfact\">v5</span>);\n  *(_DWORD *)(a2 + Number) = <span class=\"supfact\">v3</span> != Number;\n  if (*(_DWORD *)(a2 + Number)) {\n    <span class=\"supfact\">v8</span> = Number * <span class=\"supfact\">v7</span> + <span class=\"supfact\">v6</span>;\n    if (*(_DWORD *)(a2 + Number) != Number || <span class=\"supfact\">v9</span> != Number) {\n      av_log(a1, Number L, String);\n      return Number L;\n    }\n    *(_DWORD *)(a2 + Number) -=\n        Number * (<span class=\"supfact\">v8</span> / Number + <span class=\"supfact\">v8</span>);\n  }\n  return Number L;\n}", "code_t": "int __cdecl ff_init_smtpe_timecode(void *avcl, ff_timecode *tc) {\n  char <span class=\"supfact\">c</span>;\n  int <span class=\"supfact\">ff</span>;\n  int <span class=\"supfact\">ss_0</span>;\n  int <span class=\"supfact\">mm</span>;\n  int <span class=\"supfact\">hh</span>;\n  int <span class=\"supfact\">tmins</span>;\n  int <span class=\"supfact\">fps</span>;\n  if (sscanf(tc->str, String, &<span class=\"supfact\">hh</span>, &<span class=\"supfact\">mm</span>,\n             &<span class=\"supfact\">ss_0</span>, &<span class=\"supfact\">c</span>,\n             &<span class=\"supfact\">ff</span>) != Number) {\n    av_log(avcl, Number L, String);\n    return Number;\n  }\n  <span class=\"supfact\">fps</span> = (tc->rate.num + tc->rate.den / Number) / tc->rate.den;\n  tc->start =\n      <span class=\"supfact\">ff</span> + <span class=\"supfact\">fps</span> * (Number * <span class=\"supfact\">mm</span> +\n                                                  Number * <span class=\"supfact\">hh</span> +\n                                                  <span class=\"supfact\">ss_0</span>);\n  tc->drop = <span class=\"supfact\">c</span> != Number;\n  if (tc->drop) {\n    <span class=\"supfact\">tmins</span> = Number * <span class=\"supfact\">hh</span> + <span class=\"supfact\">mm</span>;\n    if (tc->rate.den != Number || <span class=\"supfact\">fps</span> != Number) {\n      av_log(avcl, Number L, String);\n      return Number;\n    }\n    tc->start -=\n        Number * (<span class=\"supfact\">tmins</span> / Number + <span class=\"supfact\">tmins</span>);\n  }\n  return Number;\n}", "var": [{"name": "v9", "type": "int", "ref_name": "fps", "ref_type": "int"}, {"name": "v8", "type": "int", "ref_name": "tmins", "ref_type": "int"}, {"name": "v7", "type": "int", "ref_name": "hh", "ref_type": "int"}, {"name": "v6", "type": "int", "ref_name": "mm", "ref_type": "int"}, {"name": "v5", "type": "int", "ref_name": "ss_0", "ref_type": "int"}, {"name": "v4", "type": "int", "ref_name": "ff", "ref_type": "int"}, {"name": "v3", "type": "char", "ref_name": "c", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "ryanfb", "repo_name": "ancientgreekocr-ocr-evaluation-tools", "path": "ryanfb/ancientgreekocr-ocr-evaluation-tools/6a4094a813f762f248f71ed2063c1d214f415d1e60dc64e07b33f60b843250bb", "path_in_repo": "ryanfb/ancientgreekocr-ocr-evaluation-tools//asc2uni/asc2uni", "objdump": "0000000000401de0 <write_unicode>:\n  401de0:\t55                   \tpush   %rbp\n  401de1:\t48 89 e5             \tmov    %rsp,%rbp\n  401de4:\t48 83 ec 30          \tsub    $0x30,%rsp\n  401de8:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  401dec:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  401df0:\t66 c7 45 ee ff fe    \tmovw   $0xfeff,-0x12(%rbp)\n  401df6:\t66 c7 45 ec 5e 00    \tmovw   $0x5e,-0x14(%rbp)\n  401dfc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  401e00:\tbe f5 30 40 00       \tmov    $0x4030f5,%esi\n  401e05:\t48 89 c7             \tmov    %rax,%rdi\n  401e08:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401e0d:\te8 8a 01 00 00       \tcallq  401f9c <open_file>\n  401e12:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401e16:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  401e1a:\t48 8d 45 ee          \tlea    -0x12(%rbp),%rax\n  401e1e:\t48 89 d1             \tmov    %rdx,%rcx\n  401e21:\tba 01 00 00 00       \tmov    $0x1,%edx\n  401e26:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  401e2b:\t48 89 c7             \tmov    %rax,%rdi\n  401e2e:\te8 dd f2 ff ff       \tcallq  401110 <fwrite@plt>\n  401e33:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401e37:\t48 8b 00             \tmov    (%rax),%rax\n  401e3a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401e3e:\teb 53                \tjmp    401e93 <write_unicode+0xb3>\n  401e40:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401e44:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n  401e48:\t84 c0                \ttest   %al,%al\n  401e4a:\t74 1d                \tje     401e69 <write_unicode+0x89>\n  401e4c:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  401e50:\t48 8d 45 ec          \tlea    -0x14(%rbp),%rax\n  401e54:\t48 89 d1             \tmov    %rdx,%rcx\n  401e57:\tba 01 00 00 00       \tmov    $0x1,%edx\n  401e5c:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  401e61:\t48 89 c7             \tmov    %rax,%rdi\n  401e64:\te8 a7 f2 ff ff       \tcallq  401110 <fwrite@plt>\n  401e69:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401e6d:\t48 8d 78 12          \tlea    0x12(%rax),%rdi\n  401e71:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401e75:\t48 89 c1             \tmov    %rax,%rcx\n  401e78:\tba 01 00 00 00       \tmov    $0x1,%edx\n  401e7d:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  401e82:\te8 89 f2 ff ff       \tcallq  401110 <fwrite@plt>\n  401e87:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401e8b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  401e8f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401e93:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  401e98:\t75 a6                \tjne    401e40 <write_unicode+0x60>\n  401e9a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401e9e:\t48 89 c7             \tmov    %rax,%rdi\n  401ea1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401ea6:\te8 93 01 00 00       \tcallq  40203e <close_file>\n  401eab:\t90                   \tnop\n  401eac:\tc9                   \tleaveq \n  401ead:\tc3                   \tretq   ", "code_s": "__int64 __fastcall write_unicode(__int64 *a1, __int64 a2) {\n  __int16 <span class=\"supfact\">v3</span>;\n  __int16 <span class=\"supfact\">ptr</span>;\n  FILE *<span class=\"supfact\">s</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">ptr</span> = Number;\n  <span class=\"supfact\">v3</span> = Number;\n  <span class=\"supfact\">s</span> = (FILE *)open_file(a2, String);\n  fwrite(&<span class=\"supfact\">ptr</span>, Number, Number, <span class=\"supfact\">s</span>);\n  for (<span class=\"supfact\">i</span> = *a1; <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number)) {\n    if (*(_BYTE *)(<span class=\"supfact\">i</span> + Number))\n      fwrite(&<span class=\"supfact\">v3</span>, Number, Number, <span class=\"supfact\">s</span>);\n    fwrite((const void *)(<span class=\"supfact\">i</span> + Number), Number, Number,\n           <span class=\"supfact\">s</span>);\n  }\n  return close_file(<span class=\"supfact\">s</span>);\n}", "code_t": "void __cdecl write_unicode(Text *text, char *filename) {\n  unsigned __int16 <span class=\"supfact\">suspect_marker</span>;\n  unsigned __int16 <span class=\"supfact\">byte_order</span>;\n  FILE *<span class=\"supfact\">f</span>;\n  Char_0 *<span class=\"supfact\">c</span>;\n  <span class=\"supfact\">byte_order</span> = Number;\n  <span class=\"supfact\">suspect_marker</span> = Number;\n  <span class=\"supfact\">f</span> = open_file(filename, String);\n  fwrite(&<span class=\"supfact\">byte_order</span>, Number, Number, <span class=\"supfact\">f</span>);\n  for (<span class=\"supfact\">c</span> = text->first; <span class=\"supfact\">c</span>;\n       <span class=\"supfact\">c</span> = <span class=\"supfact\">c</span>->next) {\n    if (<span class=\"supfact\">c</span>->suspect)\n      fwrite(&<span class=\"supfact\">suspect_marker</span>, Number, Number,\n             <span class=\"supfact\">f</span>);\n    fwrite(&<span class=\"supfact\">c</span>->value, Number, Number, <span class=\"supfact\">f</span>);\n  }\n  close_file(<span class=\"supfact\">f</span>);\n}", "var": [{"name": "i", "type": "__unk__", "ref_name": "c", "ref_type": "Char_0 *"}, {"name": "s", "type": "FILE *", "ref_name": "f", "ref_type": "FILE *"}, {"name": "ptr", "type": "char[2]", "ref_name": "byte_order", "ref_type": "unsigned __int16"}, {"name": "v3", "type": "__int16", "ref_name": "suspect_marker", "ref_type": "unsigned __int16"}], "body_in_train": false}, {"repo_owner": "uyjulian", "repo_name": "krkr2_extra_plugin", "path": "uyjulian/krkr2_extra_plugin/9f7d7103f5de5ffe76d5fe25db1ba6782703ad02d730ff0a4467f6e48376aeac", "path_in_repo": "uyjulian/krkr2_extra_plugin/drawdeviceIrrlicht/irrlicht/source/Irrlicht/CXMeshFileLoader.o", "objdump": "0000000000000000 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   c:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n   f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  13:\t48 8b 00             \tmov    (%rax),%rax\n  16:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  1a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  1e:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n  22:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  25:\t48 89 c6             \tmov    %rax,%rsi\n  28:\t48 89 d7             \tmov    %rdx,%rdi\n  2b:\te8 00 00 00 00       \tcallq  30 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0x30>\n  30:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  34:\t48 89 02             \tmov    %rax,(%rdx)\n  37:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  3b:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  3e:\t89 50 08             \tmov    %edx,0x8(%rax)\n  41:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  45:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  48:\t39 45 d4             \tcmp    %eax,-0x2c(%rbp)\n  4b:\t76 09                \tjbe    56 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0x56>\n  4d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  51:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  54:\teb 03                \tjmp    59 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0x59>\n  56:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  59:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  5c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  63:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  66:\t3b 45 ec             \tcmp    -0x14(%rbp),%eax\n  69:\t7d 41                \tjge    ac <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0xac>\n  6b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  6f:\t48 83 c0 18          \tadd    $0x18,%rax\n  73:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  76:\t48 63 d2             \tmovslq %edx,%rdx\n  79:\t48 89 d1             \tmov    %rdx,%rcx\n  7c:\t48 c1 e1 04          \tshl    $0x4,%rcx\n  80:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  84:\t48 01 ca             \tadd    %rcx,%rdx\n  87:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  8b:\t48 8b 09             \tmov    (%rcx),%rcx\n  8e:\t8b 75 fc             \tmov    -0x4(%rbp),%esi\n  91:\t48 63 f6             \tmovslq %esi,%rsi\n  94:\t48 c1 e6 04          \tshl    $0x4,%rsi\n  98:\t48 01 f1             \tadd    %rsi,%rcx\n  9b:\t48 89 ce             \tmov    %rcx,%rsi\n  9e:\t48 89 c7             \tmov    %rax,%rdi\n  a1:\te8 00 00 00 00       \tcallq  a6 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0xa6>\n  a6:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  aa:\teb b7                \tjmp    63 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0x63>\n  ac:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  b3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  b7:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  ba:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n  bd:\t73 2a                \tjae    e9 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0xe9>\n  bf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  c3:\t48 83 c0 18          \tadd    $0x18,%rax\n  c7:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  ca:\t48 89 d1             \tmov    %rdx,%rcx\n  cd:\t48 c1 e1 04          \tshl    $0x4,%rcx\n  d1:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  d5:\t48 01 ca             \tadd    %rcx,%rdx\n  d8:\t48 89 d6             \tmov    %rdx,%rsi\n  db:\t48 89 c7             \tmov    %rax,%rdi\n  de:\te8 00 00 00 00       \tcallq  e3 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0xe3>\n  e3:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  e7:\teb ca                \tjmp    b3 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0xb3>\n  e9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  ed:\t8b 50 08             \tmov    0x8(%rax),%edx\n  f0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  f4:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  f7:\t39 c2                \tcmp    %eax,%edx\n  f9:\t73 0e                \tjae    109 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0x109>\n  fb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  ff:\t8b 50 08             \tmov    0x8(%rax),%edx\n 102:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 106:\t89 50 0c             \tmov    %edx,0xc(%rax)\n 109:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 10d:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n 111:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 115:\t48 89 c6             \tmov    %rax,%rsi\n 118:\t48 89 d7             \tmov    %rdx,%rdi\n 11b:\te8 00 00 00 00       \tcallq  120 <_ZN3irr4core5arrayINS_5scene12ISkinnedMesh12SPositionKeyENS0_12irrAllocatorIS4_EEE10reallocateEj+0x120>\n 120:\t90                   \tnop\n 121:\tc9                   \tleaveq \n 122:\tc3                   \tretq   ", "code_s": "__int64 __fastcall irr\n    core array<irr scene ISkinnedMesh SPositionKey,\n               irr core irrAllocator<irr scene ISkinnedMesh SPositionKey>>\n    reallocate(__int64 *a1, unsigned int a2) {\n  unsigned int v2;\n  int <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v5</span> = *a1;\n  *a1 = irr core irrAllocator<irr scene ISkinnedMesh SPositionKey> allocate(\n      a1 + Number, a2);\n  *((_DWORD *)a1 + Number) = a2;\n  if (a2 <= *((_DWORD *)a1 + Number))\n    v2 = a2;\n  else\n    v2 = *((_DWORD *)a1 + Number);\n  <span class=\"supfact\">v4</span> = v2;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v4</span>;\n       ++<span class=\"supfact\">i</span>)\n    irr core irrAllocator<irr scene ISkinnedMesh SPositionKey> construct(\n        a1 + Number, Number L * <span class=\"supfact\">i</span> + *a1,\n        Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">v5</span>);\n  for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < *((_DWORD *)a1 + Number);\n       ++<span class=\"supfact\">j</span>)\n    irr core irrAllocator<irr scene ISkinnedMesh SPositionKey> destruct(\n        a1 + Number, Number L * <span class=\"supfact\">j</span> + <span class=\"supfact\">v5</span>);\n  if (*((_DWORD *)a1 + Number) < *((_DWORD *)a1 + Number))\n    *((_DWORD *)a1 + Number) = *((_DWORD *)a1 + Number);\n  return irr core irrAllocator<irr scene ISkinnedMesh SPositionKey> deallocate(\n      a1 + Number, <span class=\"supfact\">v5</span>);\n}", "code_t": "void __cdecl irr\n    core array<irr scene ISkinnedMesh SPositionKey,\n               irr core irrAllocator<irr scene ISkinnedMesh SPositionKey>>\n    reallocate(\n        irr core\n            array<irr scene ISkinnedMesh SPositionKey,\n                  irr core irrAllocator<irr scene ISkinnedMesh SPositionKey>>\n                *const this,\n        irr u32 new_size) {\n  irr u32 v2;\n  irr s32 <span class=\"supfact\">end</span>;\n  irr scene ISkinnedMesh SPositionKey *<span class=\"supfact\">old_data</span>;\n  irr u32 <span class=\"supfact\">j</span>;\n  irr s32 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">old_data</span> = this->data;\n  this->data =\n      irr core irrAllocator<irr scene ISkinnedMesh SPositionKey> allocate(\n          &this->allocator, new_size);\n  this->allocated = new_size;\n  if (new_size <= this->used)\n    v2 = new_size;\n  else\n    v2 = this->used;\n  <span class=\"supfact\">end</span> = v2;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">end</span>;\n       ++<span class=\"supfact\">i</span>)\n    irr core irrAllocator<irr scene ISkinnedMesh SPositionKey> construct(\n        &this->allocator, &this->data[<span class=\"supfact\">i</span>],\n        &<span class=\"supfact\">old_data</span>[<span class=\"supfact\">i</span>]);\n  for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < this->used;\n       ++<span class=\"supfact\">j</span>)\n    irr core irrAllocator<irr scene ISkinnedMesh SPositionKey> destruct(\n        &this->allocator, &<span class=\"supfact\">old_data</span>[<span class=\"supfact\">j</span>]);\n  if (this->allocated < this->used)\n    this->used = this->allocated;\n  irr core irrAllocator<irr scene ISkinnedMesh SPositionKey> deallocate(\n      &this->allocator, <span class=\"supfact\">old_data</span>);\n}", "var": [{"name": "i", "type": "irr::u32", "ref_name": "i", "ref_type": "irr::s32"}, {"name": "j", "type": "irr::u32", "ref_name": "j", "ref_type": "irr::u32"}, {"name": "v5", "type": "__unk__", "ref_name": "old_data", "ref_type": "__unk__"}, {"name": "v4", "type": "irr::s32", "ref_name": "end", "ref_type": "irr::s32"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/86b49e8e6d3fa036834069a79416d65fceac1af0a2ac04044020692971306916", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/video/rastan.o", "objdump": "00000000000000f6 <_Z20screen_update_rastanP13screen_deviceP8bitmap_tPK10_rectangle>:\n  f6:\t55                   \tpush   %rbp\n  f7:\t48 89 e5             \tmov    %rsp,%rbp\n  fa:\t48 83 ec 30          \tsub    $0x30,%rsp\n  fe:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 102:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 106:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 10a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 10e:\t48 89 c7             \tmov    %rax,%rdi\n 111:\te8 00 00 00 00       \tcallq  116 <_Z20screen_update_rastanP13screen_deviceP8bitmap_tPK10_rectangle+0x20>\n 116:\t48 89 c7             \tmov    %rax,%rdi\n 119:\te8 00 00 00 00       \tcallq  11e <_Z20screen_update_rastanP13screen_deviceP8bitmap_tPK10_rectangle+0x28>\n 11e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 122:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 126:\t48 8b 80 18 02 00 00 \tmov    0x218(%rax),%rax\n 12d:\t48 89 c7             \tmov    %rax,%rdi\n 130:\te8 00 00 00 00       \tcallq  135 <_Z20screen_update_rastanP13screen_deviceP8bitmap_tPK10_rectangle+0x3f>\n 135:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n 13c:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n 143:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 147:\t48 89 c7             \tmov    %rax,%rdi\n 14a:\te8 00 00 00 00       \tcallq  14f <_Z20screen_update_rastanP13screen_deviceP8bitmap_tPK10_rectangle+0x59>\n 14f:\t48 8b 80 88 04 00 00 \tmov    0x488(%rax),%rax\n 156:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n 15a:\tba 00 00 00 00       \tmov    $0x0,%edx\n 15f:\t48 89 ce             \tmov    %rcx,%rsi\n 162:\t48 89 c7             \tmov    %rax,%rdi\n 165:\te8 00 00 00 00       \tcallq  16a <_Z20screen_update_rastanP13screen_deviceP8bitmap_tPK10_rectangle+0x74>\n 16a:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n 16d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 171:\t48 8b 80 18 02 00 00 \tmov    0x218(%rax),%rax\n 178:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 17c:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 180:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n 186:\t41 b8 80 00 00 00    \tmov    $0x80,%r8d\n 18c:\t48 89 c7             \tmov    %rax,%rdi\n 18f:\te8 00 00 00 00       \tcallq  194 <_Z20screen_update_rastanP13screen_deviceP8bitmap_tPK10_rectangle+0x9e>\n 194:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n 197:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 19b:\t48 8b 80 18 02 00 00 \tmov    0x218(%rax),%rax\n 1a2:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 1a6:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 1aa:\t41 b9 02 00 00 00    \tmov    $0x2,%r9d\n 1b0:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 1b6:\t48 89 c7             \tmov    %rax,%rdi\n 1b9:\te8 00 00 00 00       \tcallq  1be <_Z20screen_update_rastanP13screen_deviceP8bitmap_tPK10_rectangle+0xc8>\n 1be:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1c2:\t48 8b 80 10 02 00 00 \tmov    0x210(%rax),%rax\n 1c9:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 1cd:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 1d1:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 1d6:\t48 89 c7             \tmov    %rax,%rdi\n 1d9:\te8 00 00 00 00       \tcallq  1de <_Z20screen_update_rastanP13screen_deviceP8bitmap_tPK10_rectangle+0xe8>\n 1de:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1e3:\tc9                   \tleaveq \n 1e4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall screen_update_rastan(device_t *a1, __int64 a2, __int64 a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v7</span>;\n  v3 = device_t machine(a1);\n  <span class=\"supfact\">v7</span> = running_machine driver_data<rastan_state>(v3);\n  pc080sn_tilemap_update(*(device_t **)(<span class=\"supfact\">v7</span> + Number));\n  v4 = device_t machine(a1);\n  bitmap_fill(*(_QWORD *)(v4 + Number), a3, Number L);\n  pc080sn_tilemap_draw(*(_QWORD *)(<span class=\"supfact\">v7</span> + Number), a2, a3,\n                       Number L, Number L, Number L);\n  pc080sn_tilemap_draw(*(_QWORD *)(<span class=\"supfact\">v7</span> + Number), a2, a3,\n                       Number L, Number L, Number L);\n  pc090oj_draw_sprites(*(_QWORD *)(<span class=\"supfact\">v7</span> + Number), a2, a3,\n                       Number L);\n  return Number L;\n}", "code_t": "UINT32 __cdecl screen_update_rastan(screen_device *screen, bitmap_t *bitmap,\n                                    const rectangle *cliprect) {\n  running_machine *v3;\n  running_machine *v4;\n  rastan_state *<span class=\"supfact\">state</span>;\n  v3 = device_t machine(screen);\n  <span class=\"supfact\">state</span> = running_machine driver_data<rastan_state>(v3);\n  pc080sn_tilemap_update(<span class=\"supfact\">state</span>->m_pc080sn);\n  v4 = device_t machine(screen);\n  bitmap_fill(v4->priority_bitmap, cliprect, Number);\n  pc080sn_tilemap_draw(<span class=\"supfact\">state</span>->m_pc080sn, bitmap, cliprect,\n                       Number, Number, Number);\n  pc080sn_tilemap_draw(<span class=\"supfact\">state</span>->m_pc080sn, bitmap, cliprect,\n                       Number, Number, Number);\n  pc090oj_draw_sprites(<span class=\"supfact\">state</span>->m_pc090oj, bitmap, cliprect,\n                       Number);\n  return Number;\n}", "var": [{"name": "v7", "type": "__unk__", "ref_name": "state", "ref_type": "__unk__"}], "body_in_train": false}, {"repo_owner": "zencodex", "repo_name": "csip", "path": "zencodex/csip/33a0f45162a9d5fb82d71f1c619cf5d9316ed923dc8e3d094a8333f430530cef", "path_in_repo": "zencodex/csip/CSipSimple/jni/pjsip/sources/pjsip/build/output/pjsip-ua-x86_64-unknown-linux-gnu/sip_timer.o", "objdump": "0000000000001339 <pjsip_sess_expires_hdr_create>:\n    1339:\t55                   \tpush   %rbp\n    133a:\t48 89 e5             \tmov    %rsp,%rbp\n    133d:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1341:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1345:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1349:\tbe 88 00 00 00       \tmov    $0x88,%esi\n    134e:\t48 89 c7             \tmov    %rax,%rdi\n    1351:\te8 74 ed ff ff       \tcallq  ca <pj_pool_zalloc>\n    1356:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    135a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1360 <pjsip_sess_expires_hdr_create+0x27>\n    1360:\t85 c0                \ttest   %eax,%eax\n    1362:\t75 19                \tjne    137d <pjsip_sess_expires_hdr_create+0x44>\n    1364:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1369:\tba 87 02 00 00       \tmov    $0x287,%edx\n    136e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1373:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1378:\te8 00 00 00 00       \tcallq  137d <pjsip_sess_expires_hdr_create+0x44>\n    137d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1381:\tc7 40 10 2c 00 00 00 \tmovl   $0x2c,0x10(%rax)\n    1388:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    138c:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n    1393:\t00 \n    1394:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1398:\t48 c7 40 20 0f 00 00 \tmovq   $0xf,0x20(%rax)\n    139f:\t00 \n    13a0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    13a4:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n    13ab:\t00 \n    13ac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    13b0:\t48 c7 40 30 01 00 00 \tmovq   $0x1,0x30(%rax)\n    13b7:\t00 \n    13b8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    13bc:\t48 c7 40 38 00 00 00 \tmovq   $0x0,0x38(%rax)\n    13c3:\t00 \n    13c4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    13c8:\t48 89 c7             \tmov    %rax,%rdi\n    13cb:\te8 30 ec ff ff       \tcallq  0 <pj_list_init>\n    13d0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    13d4:\t48 83 c0 58          \tadd    $0x58,%rax\n    13d8:\t48 89 c7             \tmov    %rax,%rdi\n    13db:\te8 20 ec ff ff       \tcallq  0 <pj_list_init>\n    13e0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    13e4:\tc9                   \tleaveq \n    13e5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pjsip_sess_expires_hdr_create(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = pj_pool_zalloc(a1, Number L);\n  if (!is_initialized)\n    _assert_fail(String, String, Number, String);\n  *(_DWORD *)(<span class=\"supfact\">v2</span> + Number) = Number;\n  *(_QWORD *)(<span class=\"supfact\">v2</span> + Number) = String;\n  *(_QWORD *)(<span class=\"supfact\">v2</span> + Number) = Number L;\n  *(_QWORD *)(<span class=\"supfact\">v2</span> + Number) = &unk_24C0;\n  *(_QWORD *)(<span class=\"supfact\">v2</span> + Number) = Number L;\n  *(_QWORD *)(<span class=\"supfact\">v2</span> + Number) = &se_hdr_vptr;\n  pj_list_init((_QWORD *)<span class=\"supfact\">v2</span>);\n  pj_list_init((_QWORD *)(<span class=\"supfact\">v2</span> + Number));\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "pjsip_sess_expires_hdr_0 *__cdecl pjsip_sess_expires_hdr_create(\n    pj_pool_t_0 *pool) {\n  pjsip_sess_expires_hdr_0 *<span class=\"supfact\">hdr</span>;\n  <span class=\"supfact\">hdr</span> =\n      (pjsip_sess_expires_hdr_0 *)pj_pool_zalloc(pool, Number);\n  if (!is_initialized)\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">hdr</span>->type = PJSIP_H_OTHER;\n  <span class=\"supfact\">hdr</span>->name.ptr = String;\n  <span class=\"supfact\">hdr</span>->name.slen = Number L;\n  <span class=\"supfact\">hdr</span>->sname.ptr = (char *)&unk_24C0;\n  <span class=\"supfact\">hdr</span>->sname.slen = Number L;\n  <span class=\"supfact\">hdr</span>->vptr = &se_hdr_vptr;\n  pj_list_init(<span class=\"supfact\">hdr</span>);\n  pj_list_init(&<span class=\"supfact\">hdr</span>->other_param);\n  return <span class=\"supfact\">hdr</span>;\n}", "var": [{"name": "v2", "type": "pj_pool_t_0 *", "ref_name": "hdr", "ref_type": "pjsip_sess_expires_hdr_0 *"}], "body_in_train": false}, {"repo_owner": "jonahharris", "repo_name": "pthread-barrier", "path": "jonahharris/pthread-barrier/aca24768044d5b395bbfe93d337715d835d8554a113004ebf2d73bdfd8e10396", "path_in_repo": "jonahharris/pthread-barrier/demo/demo", "objdump": "00000000004011c2 <threadFn>:\n  4011c2:\t55                   \tpush   %rbp\n  4011c3:\t48 89 e5             \tmov    %rsp,%rbp\n  4011c6:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4011ca:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4011ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4011d2:\t8b 00                \tmov    (%rax),%eax\n  4011d4:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4011d7:\te8 f4 fe ff ff       \tcallq  4010d0 <rand@plt>\n  4011dc:\t89 c1                \tmov    %eax,%ecx\n  4011de:\t48 63 c1             \tmovslq %ecx,%rax\n  4011e1:\t48 69 c0 67 66 66 66 \timul   $0x66666667,%rax,%rax\n  4011e8:\t48 c1 e8 20          \tshr    $0x20,%rax\n  4011ec:\t89 c2                \tmov    %eax,%edx\n  4011ee:\td1 fa                \tsar    %edx\n  4011f0:\t89 c8                \tmov    %ecx,%eax\n  4011f2:\tc1 f8 1f             \tsar    $0x1f,%eax\n  4011f5:\t29 c2                \tsub    %eax,%edx\n  4011f7:\t89 d0                \tmov    %edx,%eax\n  4011f9:\tc1 e0 02             \tshl    $0x2,%eax\n  4011fc:\t01 d0                \tadd    %edx,%eax\n  4011fe:\t29 c1                \tsub    %eax,%ecx\n  401200:\t89 ca                \tmov    %ecx,%edx\n  401202:\t8d 42 01             \tlea    0x1(%rdx),%eax\n  401205:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  401208:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  40120b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40120e:\t89 c6                \tmov    %eax,%esi\n  401210:\tbf 08 20 40 00       \tmov    $0x402008,%edi\n  401215:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40121a:\te8 31 fe ff ff       \tcallq  401050 <printf@plt>\n  40121f:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  401222:\t89 c7                \tmov    %eax,%edi\n  401224:\te8 87 fe ff ff       \tcallq  4010b0 <sleep@plt>\n  401229:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40122c:\t89 c6                \tmov    %eax,%esi\n  40122e:\tbf 29 20 40 00       \tmov    $0x402029,%edi\n  401233:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401238:\te8 13 fe ff ff       \tcallq  401050 <printf@plt>\n  40123d:\tbf a0 40 40 00       \tmov    $0x4040a0,%edi\n  401242:\te8 79 fe ff ff       \tcallq  4010c0 <pthread_barrier_wait@plt>\n  401247:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40124a:\t89 c6                \tmov    %eax,%esi\n  40124c:\tbf 42 20 40 00       \tmov    $0x402042,%edi\n  401251:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401256:\te8 f5 fd ff ff       \tcallq  401050 <printf@plt>\n  40125b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401260:\tc9                   \tleaveq \n  401261:\tc3                   \tretq   ", "code_s": "void *__fastcall threadFn(void *a1) {\n  unsigned int <span class=\"supfact\">seconds</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_DWORD *)a1;\n  <span class=\"supfact\">seconds</span> = rand() % Number + Number;\n  printf(String, <span class=\"supfact\">v3</span>, <span class=\"supfact\">seconds</span>);\n  sleep(<span class=\"supfact\">seconds</span>);\n  printf(String, <span class=\"supfact\">v3</span>);\n  pthread_barrier_wait(&mybarrier);\n  printf(String, <span class=\"supfact\">v3</span>);\n  return Number L;\n}", "code_t": "void *__cdecl threadFn(void *id_ptr) {\n  unsigned int <span class=\"supfact\">wait_sec</span>;\n  unsigned int <span class=\"supfact\">thread_id</span>;\n  <span class=\"supfact\">thread_id</span> = *(_DWORD *)id_ptr;\n  <span class=\"supfact\">wait_sec</span> = rand() % Number + Number;\n  printf(String, <span class=\"supfact\">thread_id</span>, <span class=\"supfact\">wait_sec</span>);\n  sleep(<span class=\"supfact\">wait_sec</span>);\n  printf(String, <span class=\"supfact\">thread_id</span>);\n  pthread_barrier_wait(&mybarrier);\n  printf(String, <span class=\"supfact\">thread_id</span>);\n  return Number L;\n}", "var": [{"name": "v3", "type": "unsigned int", "ref_name": "thread_id", "ref_type": "unsigned int"}, {"name": "seconds", "type": "unsigned int", "ref_name": "wait_sec", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "ray2501", "repo_name": "tclqrencode", "path": "ray2501/tclqrencode/546bbe15208f555a4ca60bd2e0e19ec399eee628eac1e8be5d44645a99bc314b", "path_in_repo": "ray2501/tclqrencode//libtclqrencode1.0.so", "objdump": "0000000000007666 <SETKANJI>:\n    7666:\t48 83 ec 38          \tsub    $0x38,%rsp\n    766a:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    766f:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    7674:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n    7678:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n    767c:\t83 7c 24 0c 02       \tcmpl   $0x2,0xc(%rsp)\n    7681:\t74 33                \tje     76b6 <SETKANJI+0x50>\n    7683:\t48 8d 05 46 f4 00 00 \tlea    0xf446(%rip),%rax        # 16ad0 <tclStubsPtr>\n    768a:\t48 8b 00             \tmov    (%rax),%rax\n    768d:\t4c 8b 80 50 08 00 00 \tmov    0x850(%rax),%r8\n    7694:\t48 8b 14 24          \tmov    (%rsp),%rdx\n    7698:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    769d:\t48 8d 0d 8e a0 00 00 \tlea    0xa08e(%rip),%rcx        # 11732 <_fini+0xa42>\n    76a4:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    76a9:\t48 89 c7             \tmov    %rax,%rdi\n    76ac:\t41 ff d0             \tcallq  *%r8\n    76af:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    76b4:\teb 5d                \tjmp    7713 <SETKANJI+0xad>\n    76b6:\t48 8d 05 13 f4 00 00 \tlea    0xf413(%rip),%rax        # 16ad0 <tclStubsPtr>\n    76bd:\t48 8b 00             \tmov    (%rax),%rax\n    76c0:\t4c 8b 80 40 01 00 00 \tmov    0x140(%rax),%r8\n    76c7:\t48 8b 04 24          \tmov    (%rsp),%rax\n    76cb:\t48 83 c0 08          \tadd    $0x8,%rax\n    76cf:\t48 8b 08             \tmov    (%rax),%rcx\n    76d2:\t48 8d 54 24 2c       \tlea    0x2c(%rsp),%rdx\n    76d7:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    76dc:\t48 89 ce             \tmov    %rcx,%rsi\n    76df:\t48 89 c7             \tmov    %rax,%rdi\n    76e2:\t41 ff d0             \tcallq  *%r8\n    76e5:\t85 c0                \ttest   %eax,%eax\n    76e7:\t74 07                \tje     76f0 <SETKANJI+0x8a>\n    76e9:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    76ee:\teb 23                \tjmp    7713 <SETKANJI+0xad>\n    76f0:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n    76f4:\t85 c0                \ttest   %eax,%eax\n    76f6:\t7e 0c                \tjle    7704 <SETKANJI+0x9e>\n    76f8:\tc7 05 f6 ec 00 00 03 \tmovl   $0x3,0xecf6(%rip)        # 163f8 <hint>\n    76ff:\t00 00 00 \n    7702:\teb 0a                \tjmp    770e <SETKANJI+0xa8>\n    7704:\tc7 05 ea ec 00 00 02 \tmovl   $0x2,0xecea(%rip)        # 163f8 <hint>\n    770b:\t00 00 00 \n    770e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7713:\t48 83 c4 38          \tadd    $0x38,%rsp\n    7717:\tc3                   \tretq   ", "code_s": "__int64 __fastcall SETKANJI(__int64 a1, __int64 a2, int a3, __int64 a4) {\n  __int64 result;\n  int <span class=\"supfact\">v5</span>[Number];\n  if (a3 == Number) {\n    if ((*(unsigned int(__fastcall **)(__int64, _QWORD, int *))(\n            tclStubsPtr + Number))(a2, *(_QWORD *)(a4 + Number),\n                                   <span class=\"supfact\">v5</span>)) {\n      result = Number L;\n    } else {\n      if (<span class=\"supfact\">v5</span>[Number] <= Number)\n        hint = Number;\n      else\n        hint = Number;\n      result = Number L;\n    }\n  } else {\n    (*(void(__fastcall **)(__int64, __int64, __int64, const char *))(\n        tclStubsPtr + Number))(a2, Number L, a4, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl SETKANJI(ClientData clientData, Tcl_Interp_0 *interp, int objc,\n                     Tcl_Obj_0 *const *obj) {\n  int result;\n  int <span class=\"supfact\">m_hint</span>[Number];\n  if (objc == Number) {\n    if ((*(unsigned int(__fastcall **)(Tcl_Interp_0 *, _QWORD, int *))(\n            tclStubsPtr + Number))(interp, *((_QWORD *)obj + Number),\n                                   <span class=\"supfact\">m_hint</span>)) {\n      result = Number;\n    } else {\n      if (<span class=\"supfact\">m_hint</span>[Number] <= Number)\n        hint = QR_MODE_8;\n      else\n        hint = QR_MODE_KANJI;\n      result = Number;\n    }\n  } else {\n    (*(void(__fastcall **)(Tcl_Interp_0 *, __int64, Tcl_Obj_0 *const *,\n                           const char *))(tclStubsPtr + Number))(\n        interp, Number L, obj, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "int[3]", "ref_name": "m_hint", "ref_type": "int[3]"}], "body_in_train": false}, {"repo_owner": "bloodstalker", "repo_name": "blogstuff", "path": "bloodstalker/blogstuff/e5d1c8fad2951977dc94940e542db30173b87fe2732e6c1c20f8e810270889e7", "path_in_repo": "bloodstalker/blogstuff/src/cstruct2luatbale/lua/lua", "objdump": "0000000000404a80 <createargtable>:\n  404a80:\t55                   \tpush   %rbp\n  404a81:\t48 89 e5             \tmov    %rsp,%rbp\n  404a84:\t48 83 ec 30          \tsub    $0x30,%rsp\n  404a88:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  404a8c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  404a90:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n  404a93:\t89 4d d8             \tmov    %ecx,-0x28(%rbp)\n  404a96:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  404a99:\t3b 45 dc             \tcmp    -0x24(%rbp),%eax\n  404a9c:\t75 07                \tjne    404aa5 <createargtable+0x25>\n  404a9e:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n  404aa5:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  404aa8:\t8d 50 01             \tlea    0x1(%rax),%edx\n  404aab:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  404aae:\t29 d0                \tsub    %edx,%eax\n  404ab0:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  404ab3:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  404ab6:\t8d 50 01             \tlea    0x1(%rax),%edx\n  404ab9:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n  404abc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  404ac0:\t89 ce                \tmov    %ecx,%esi\n  404ac2:\t48 89 c7             \tmov    %rax,%rdi\n  404ac5:\te8 d0 2b 00 00       \tcallq  40769a <lua_createtable>\n  404aca:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  404ad1:\teb 44                \tjmp    404b17 <createargtable+0x97>\n  404ad3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404ad6:\t48 98                \tcltq   \n  404ad8:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  404adf:\t00 \n  404ae0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  404ae4:\t48 01 d0             \tadd    %rdx,%rax\n  404ae7:\t48 8b 10             \tmov    (%rax),%rdx\n  404aea:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  404aee:\t48 89 d6             \tmov    %rdx,%rsi\n  404af1:\t48 89 c7             \tmov    %rax,%rdi\n  404af4:\te8 8b 21 00 00       \tcallq  406c84 <lua_pushstring>\n  404af9:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404afc:\t2b 45 d8             \tsub    -0x28(%rbp),%eax\n  404aff:\t48 63 d0             \tmovslq %eax,%rdx\n  404b02:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  404b06:\tbe fe ff ff ff       \tmov    $0xfffffffe,%esi\n  404b0b:\t48 89 c7             \tmov    %rax,%rdi\n  404b0e:\te8 2c 34 00 00       \tcallq  407f3f <lua_rawseti>\n  404b13:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  404b17:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404b1a:\t3b 45 dc             \tcmp    -0x24(%rbp),%eax\n  404b1d:\t7c b4                \tjl     404ad3 <createargtable+0x53>\n  404b1f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  404b23:\tbe 26 c2 43 00       \tmov    $0x43c226,%esi\n  404b28:\t48 89 c7             \tmov    %rax,%rdi\n  404b2b:\te8 77 2f 00 00       \tcallq  407aa7 <lua_setglobal>\n  404b30:\t90                   \tnop\n  404b31:\tc9                   \tleaveq \n  404b32:\tc3                   \tretq   ", "code_s": "__int64 __fastcall createargtable(__int64 a1, __int64 a2, int a3, int a4) {\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v5</span> = a4;\n  if (a4 == a3)\n    <span class=\"supfact\">v5</span> = Number;\n  lua_createtable(a1, (unsigned int)(a3 - (<span class=\"supfact\">v5</span> + Number)),\n                  (unsigned int)(<span class=\"supfact\">v5</span> + Number));\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < a3;\n       ++<span class=\"supfact\">i</span>) {\n    lua_pushstring(a1, *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + a2));\n    lua_rawseti(a1, Number L, <span class=\"supfact\">i</span> - <span class=\"supfact\">v5</span>);\n  }\n  return lua_setglobal(a1, String);\n}", "code_t": "void __cdecl createargtable(lua_State_0 *L, char **argv, int argc, int script) {\n  int <span class=\"supfact\">scripta</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">scripta</span> = script;\n  if (script == argc)\n    <span class=\"supfact\">scripta</span> = Number;\n  lua_createtable(L, argc - (<span class=\"supfact\">scripta</span> + Number),\n                  <span class=\"supfact\">scripta</span> + Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < argc;\n       ++<span class=\"supfact\">i</span>) {\n    lua_pushstring(L, argv[<span class=\"supfact\">i</span>]);\n    lua_rawseti(L, Number, <span class=\"supfact\">i</span> - <span class=\"supfact\">scripta</span>);\n  }\n  lua_setglobal(L, String);\n}", "var": [{"name": "i", "type": "int", "ref_name": "i", "ref_type": "int"}, {"name": "v5", "type": "int", "ref_name": "scripta", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "sasshka", "repo_name": "libav", "path": "sasshka/libav/5690107643e34844f9e03ed9cb36ea9f5a5b64c51cd3b929c677417f91fdefa6", "path_in_repo": "sasshka/libav//libavfilter/vf_hwdownload.o", "objdump": "0000000000000000 <hwdownload_query_formats>:\n   0:\t48 83 ec 38          \tsub    $0x38,%rsp\n   4:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n   9:\t48 c7 44 24 18 00 00 \tmovq   $0x0,0x18(%rsp)\n  10:\t00 00 \n  12:\t48 c7 44 24 10 00 00 \tmovq   $0x0,0x10(%rsp)\n  19:\t00 00 \n  1b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  20:\te8 00 00 00 00       \tcallq  25 <hwdownload_query_formats+0x25>\n  25:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n  2a:\te9 90 00 00 00       \tjmpq   bf <hwdownload_query_formats+0xbf>\n  2f:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  34:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  38:\t83 e0 08             \tand    $0x8,%eax\n  3b:\t48 85 c0             \ttest   %rax,%rax\n  3e:\t74 24                \tje     64 <hwdownload_query_formats+0x64>\n  40:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  45:\t48 89 c7             \tmov    %rax,%rdi\n  48:\te8 00 00 00 00       \tcallq  4d <hwdownload_query_formats+0x4d>\n  4d:\t89 c2                \tmov    %eax,%edx\n  4f:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n  54:\t89 d6                \tmov    %edx,%esi\n  56:\t48 89 c7             \tmov    %rax,%rdi\n  59:\te8 00 00 00 00       \tcallq  5e <hwdownload_query_formats+0x5e>\n  5e:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n  62:\teb 22                \tjmp    86 <hwdownload_query_formats+0x86>\n  64:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  69:\t48 89 c7             \tmov    %rax,%rdi\n  6c:\te8 00 00 00 00       \tcallq  71 <hwdownload_query_formats+0x71>\n  71:\t89 c2                \tmov    %eax,%edx\n  73:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  78:\t89 d6                \tmov    %edx,%esi\n  7a:\t48 89 c7             \tmov    %rax,%rdi\n  7d:\te8 00 00 00 00       \tcallq  82 <hwdownload_query_formats+0x82>\n  82:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n  86:\t83 7c 24 24 00       \tcmpl   $0x0,0x24(%rsp)\n  8b:\t74 20                \tje     ad <hwdownload_query_formats+0xad>\n  8d:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n  92:\t48 89 c7             \tmov    %rax,%rdi\n  95:\te8 00 00 00 00       \tcallq  9a <hwdownload_query_formats+0x9a>\n  9a:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  9f:\t48 89 c7             \tmov    %rax,%rdi\n  a2:\te8 00 00 00 00       \tcallq  a7 <hwdownload_query_formats+0xa7>\n  a7:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n  ab:\teb 63                \tjmp    110 <hwdownload_query_formats+0x110>\n  ad:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  b2:\t48 89 c7             \tmov    %rax,%rdi\n  b5:\te8 00 00 00 00       \tcallq  ba <hwdownload_query_formats+0xba>\n  ba:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n  bf:\t48 83 7c 24 28 00    \tcmpq   $0x0,0x28(%rsp)\n  c5:\t0f 85 64 ff ff ff    \tjne    2f <hwdownload_query_formats+0x2f>\n  cb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  d0:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  d4:\t48 8b 00             \tmov    (%rax),%rax\n  d7:\t48 8d 50 58          \tlea    0x58(%rax),%rdx\n  db:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  e0:\t48 89 d6             \tmov    %rdx,%rsi\n  e3:\t48 89 c7             \tmov    %rax,%rdi\n  e6:\te8 00 00 00 00       \tcallq  eb <hwdownload_query_formats+0xeb>\n  eb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  f0:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  f4:\t48 8b 00             \tmov    (%rax),%rax\n  f7:\t48 8d 50 50          \tlea    0x50(%rax),%rdx\n  fb:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 100:\t48 89 d6             \tmov    %rdx,%rsi\n 103:\t48 89 c7             \tmov    %rax,%rdi\n 106:\te8 00 00 00 00       \tcallq  10b <hwdownload_query_formats+0x10b>\n 10b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 110:\t48 83 c4 38          \tadd    $0x38,%rsp\n 114:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hwdownload_query_formats(__int64 a1) {\n  unsigned int v1;\n  unsigned int v2;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v5</span> = Number L;\n  <span class=\"supfact\">v4</span> = Number L;\n  for (<span class=\"supfact\">i</span> = av_pix_fmt_desc_next(Number L); <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = av_pix_fmt_desc_next(<span class=\"supfact\">i</span>)) {\n    if ((*(_QWORD *)(<span class=\"supfact\">i</span> + Number) & Number L) != Number) {\n      v1 = av_pix_fmt_desc_get_id(<span class=\"supfact\">i</span>);\n      <span class=\"supfact\">v6</span> = ff_add_format(&<span class=\"supfact\">v5</span>, v1);\n    } else {\n      v2 = av_pix_fmt_desc_get_id(<span class=\"supfact\">i</span>);\n      <span class=\"supfact\">v6</span> = ff_add_format(&<span class=\"supfact\">v4</span>, v2);\n    }\n    if (<span class=\"supfact\">v6</span>) {\n      ff_formats_unref(&<span class=\"supfact\">v5</span>);\n      ff_formats_unref(&<span class=\"supfact\">v4</span>);\n      return <span class=\"supfact\">v6</span>;\n    }\n  }\n  ff_formats_ref(<span class=\"supfact\">v5</span>, **(_QWORD **)(a1 + Number) + Number L);\n  ff_formats_ref(<span class=\"supfact\">v4</span>, **(_QWORD **)(a1 + Number) + Number L);\n  return Number L;\n}", "code_t": "int __cdecl hwdownload_query_formats(AVFilterContext_0 *avctx) {\n  unsigned int v1;\n  unsigned int v2;\n  AVFilterFormats_0 *<span class=\"supfact\">outfmts</span>;\n  AVFilterFormats_0 *<span class=\"supfact\">infmts</span>;\n  int <span class=\"supfact\">err</span>;\n  const AVPixFmtDescriptor_0 *<span class=\"supfact\">desc</span>;\n  <span class=\"supfact\">infmts</span> = Number L;\n  <span class=\"supfact\">outfmts</span> = Number L;\n  for (<span class=\"supfact\">desc</span> =\n           (const AVPixFmtDescriptor_0 *)av_pix_fmt_desc_next(Number L);\n       <span class=\"supfact\">desc</span>;\n       <span class=\"supfact\">desc</span> =\n           (const AVPixFmtDescriptor_0 *)av_pix_fmt_desc_next(\n               <span class=\"supfact\">desc</span>)) {\n    if ((<span class=\"supfact\">desc</span>->flags & Number) != Number) {\n      v1 = av_pix_fmt_desc_get_id(<span class=\"supfact\">desc</span>);\n      <span class=\"supfact\">err</span> = ff_add_format(&<span class=\"supfact\">infmts</span>, v1);\n    } else {\n      v2 = av_pix_fmt_desc_get_id(<span class=\"supfact\">desc</span>);\n      <span class=\"supfact\">err</span> = ff_add_format(&<span class=\"supfact\">outfmts</span>, v2);\n    }\n    if (<span class=\"supfact\">err</span>) {\n      ff_formats_unref(&<span class=\"supfact\">infmts</span>);\n      ff_formats_unref(&<span class=\"supfact\">outfmts</span>);\n      return <span class=\"supfact\">err</span>;\n    }\n  }\n  ff_formats_ref(<span class=\"supfact\">infmts</span>, &(*avctx->inputs)->out_formats);\n  ff_formats_ref(<span class=\"supfact\">outfmts</span>, &(*avctx->outputs)->in_formats);\n  return Number;\n}", "var": [{"name": "i", "type": "const AVPixFmtDescriptor_0 *", "ref_name": "desc", "ref_type": "const AVPixFmtDescriptor_0 *"}, {"name": "v6", "type": "int", "ref_name": "err", "ref_type": "int"}, {"name": "v5", "type": "AVFilterFormats_0 *", "ref_name": "infmts", "ref_type": "AVFilterFormats_0 *"}, {"name": "v4", "type": "AVFilterFormats_0 *", "ref_name": "outfmts", "ref_type": "AVFilterFormats_0 *"}], "body_in_train": false}, {"repo_owner": "raphielscape", "repo_name": "linux-scape-workstation", "path": "raphielscape/linux-scape-workstation/0fe2c30b16eb0c193d6da6bf6561be9bca3363eae2dfbe2d712d2adc94eaf546", "path_in_repo": "raphielscape/linux-scape-workstation/tools/perf/lib/evsel.o", "objdump": "0000000000000501 <perf_evsel__read_size>:\n 501:\t55                   \tpush   %rbp\n 502:\t48 89 e5             \tmov    %rsp,%rbp\n 505:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 509:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 50d:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 511:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 515:\tc7 45 fc 08 00 00 00 \tmovl   $0x8,-0x4(%rbp)\n 51c:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n 523:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n 52a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 52e:\t83 e0 01             \tand    $0x1,%eax\n 531:\t48 85 c0             \ttest   %rax,%rax\n 534:\t74 09                \tje     53f <perf_evsel__read_size+0x3e>\n 536:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 539:\t83 c0 08             \tadd    $0x8,%eax\n 53c:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 53f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 543:\t83 e0 02             \tand    $0x2,%eax\n 546:\t48 85 c0             \ttest   %rax,%rax\n 549:\t74 09                \tje     554 <perf_evsel__read_size+0x53>\n 54b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 54e:\t83 c0 08             \tadd    $0x8,%eax\n 551:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 554:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 558:\t83 e0 04             \tand    $0x4,%eax\n 55b:\t48 85 c0             \ttest   %rax,%rax\n 55e:\t74 09                \tje     569 <perf_evsel__read_size+0x68>\n 560:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 563:\t83 c0 08             \tadd    $0x8,%eax\n 566:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 569:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 56d:\t83 e0 08             \tand    $0x8,%eax\n 570:\t48 85 c0             \ttest   %rax,%rax\n 573:\t74 16                \tje     58b <perf_evsel__read_size+0x8a>\n 575:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 579:\t8b 80 b4 00 00 00    \tmov    0xb4(%rax),%eax\n 57f:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 582:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 585:\t83 c0 08             \tadd    $0x8,%eax\n 588:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 58b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 58e:\t0f af 45 f4          \timul   -0xc(%rbp),%eax\n 592:\t01 45 f8             \tadd    %eax,-0x8(%rbp)\n 595:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 598:\t5d                   \tpop    %rbp\n 599:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_evsel__read_size(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">v4</span> = Number;\n  <span class=\"supfact\">v3</span> = Number;\n  if ((<span class=\"supfact\">v2</span> & Number) != Number)\n    <span class=\"supfact\">v4</span> = Number;\n  if ((<span class=\"supfact\">v2</span> & Number) != Number)\n    <span class=\"supfact\">v4</span> += Number;\n  if ((<span class=\"supfact\">v2</span> & Number) != Number)\n    <span class=\"supfact\">v5</span> = Number;\n  if ((<span class=\"supfact\">v2</span> & Number) != Number) {\n    <span class=\"supfact\">v3</span> = *(_DWORD *)(a1 + Number);\n    <span class=\"supfact\">v4</span> += Number;\n  }\n  return (unsigned int)(<span class=\"supfact\">v3</span> * <span class=\"supfact\">v5</span> +\n                        <span class=\"supfact\">v4</span>);\n}", "code_t": "int __cdecl perf_evsel__read_size(perf_evsel *evsel) {\n  __u64 <span class=\"supfact\">read_format</span>;\n  int <span class=\"supfact\">nr</span>;\n  int <span class=\"supfact\">size</span>;\n  int <span class=\"supfact\">entry</span>;\n  <span class=\"supfact\">read_format</span> = evsel->attr.<span class=\"supfact\">read_format</span>;\n  <span class=\"supfact\">entry</span> = Number;\n  <span class=\"supfact\">size</span> = Number;\n  <span class=\"supfact\">nr</span> = Number;\n  if ((<span class=\"supfact\">read_format</span> & Number) != Number)\n    <span class=\"supfact\">size</span> = Number;\n  if ((<span class=\"supfact\">read_format</span> & Number) != Number)\n    <span class=\"supfact\">size</span> += Number;\n  if ((<span class=\"supfact\">read_format</span> & Number) != Number)\n    <span class=\"supfact\">entry</span> = Number;\n  if ((<span class=\"supfact\">read_format</span> & Number) != Number) {\n    <span class=\"supfact\">nr</span> = evsel->nr_members;\n    <span class=\"supfact\">size</span> += Number;\n  }\n  return <span class=\"supfact\">nr</span> * <span class=\"supfact\">entry</span> + <span class=\"supfact\">size</span>;\n}", "var": [{"name": "v5", "type": "int", "ref_name": "entry", "ref_type": "int"}, {"name": "v4", "type": "int", "ref_name": "size", "ref_type": "int"}, {"name": "v3", "type": "int", "ref_name": "nr", "ref_type": "int"}, {"name": "v2", "type": "u64", "ref_name": "read_format", "ref_type": "__u64"}], "body_in_train": false}, {"repo_owner": "akoskovacs", "repo_name": "AkLisp", "path": "akoskovacs/AkLisp/33b4cecbc37ba22d3a32e518fd37ef15ff9924eeff4e478a1e259a3a27d1bf2d", "path_in_repo": "akoskovacs/AkLisp/src/list.o", "objdump": "0000000000000d97 <ATOM_TREE_RB_INSERT>:\n     d97:\t55                   \tpush   %rbp\n     d98:\t48 89 e5             \tmov    %rsp,%rbp\n     d9b:\t48 83 ec 30          \tsub    $0x30,%rsp\n     d9f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     da3:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     da7:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     dae:\t00 \n     daf:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n     db6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     dba:\t48 8b 00             \tmov    (%rax),%rax\n     dbd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     dc1:\teb 4e                \tjmp    e11 <ATOM_TREE_RB_INSERT+0x7a>\n     dc3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     dc7:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     dcb:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     dcf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     dd3:\t48 89 d6             \tmov    %rdx,%rsi\n     dd6:\t48 89 c7             \tmov    %rax,%rdi\n     dd9:\te8 22 f2 ff ff       \tcallq  0 <cmp_atom>\n     dde:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     de1:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     de5:\t79 0d                \tjns    df4 <ATOM_TREE_RB_INSERT+0x5d>\n     de7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     deb:\t48 8b 00             \tmov    (%rax),%rax\n     dee:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     df2:\teb 1d                \tjmp    e11 <ATOM_TREE_RB_INSERT+0x7a>\n     df4:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     df8:\t7e 0e                \tjle    e08 <ATOM_TREE_RB_INSERT+0x71>\n     dfa:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     dfe:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     e02:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     e06:\teb 09                \tjmp    e11 <ATOM_TREE_RB_INSERT+0x7a>\n     e08:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e0c:\te9 84 00 00 00       \tjmpq   e95 <ATOM_TREE_RB_INSERT+0xfe>\n     e11:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     e16:\t75 ab                \tjne    dc3 <ATOM_TREE_RB_INSERT+0x2c>\n     e18:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e1c:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     e20:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     e24:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e28:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n     e2f:\t00 \n     e30:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e34:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     e38:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e3c:\t48 89 10             \tmov    %rdx,(%rax)\n     e3f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e43:\tc7 40 18 01 00 00 00 \tmovl   $0x1,0x18(%rax)\n     e4a:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     e4f:\t74 21                \tje     e72 <ATOM_TREE_RB_INSERT+0xdb>\n     e51:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     e55:\t79 0d                \tjns    e64 <ATOM_TREE_RB_INSERT+0xcd>\n     e57:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     e5b:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     e5f:\t48 89 10             \tmov    %rdx,(%rax)\n     e62:\teb 19                \tjmp    e7d <ATOM_TREE_RB_INSERT+0xe6>\n     e64:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     e68:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     e6c:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n     e70:\teb 0b                \tjmp    e7d <ATOM_TREE_RB_INSERT+0xe6>\n     e72:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     e76:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     e7a:\t48 89 10             \tmov    %rdx,(%rax)\n     e7d:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     e81:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     e85:\t48 89 d6             \tmov    %rdx,%rsi\n     e88:\t48 89 c7             \tmov    %rax,%rdi\n     e8b:\te8 9d f1 ff ff       \tcallq  2d <ATOM_TREE_RB_INSERT_COLOR>\n     e90:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e95:\tc9                   \tleaveq \n     e96:\tc3                   \tretq   ", "code_s": "__int64 **__fastcall ATOM_TREE_RB_INSERT(__int64 ***a1, __int64 a2) {\n  int <span class=\"supfact\">v3</span>;\n  _QWORD *<span class=\"supfact\">v4</span>;\n  __int64 **<span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v4</span> = Number L;\n  <span class=\"supfact\">v3</span> = Number;\n  <span class=\"supfact\">v5</span> = *a1;\n  while (<span class=\"supfact\">v5</span>) {\n    <span class=\"supfact\">v4</span> = <span class=\"supfact\">v5</span>;\n    <span class=\"supfact\">v3</span> = cmp_atom(a2, (__int64)<span class=\"supfact\">v5</span>);\n    if (<span class=\"supfact\">v3</span> >= Number) {\n      if (<span class=\"supfact\">v3</span> <= Number)\n        return <span class=\"supfact\">v5</span>;\n      <span class=\"supfact\">v5</span> = (__int64 **)<span class=\"supfact\">v5</span>[Number];\n    } else {\n      <span class=\"supfact\">v5</span> = (__int64 **)*<span class=\"supfact\">v5</span>;\n    }\n  }\n  *(_QWORD *)(a2 + Number) = <span class=\"supfact\">v4</span>;\n  *(_QWORD *)(a2 + Number) = Number L;\n  *(_QWORD *)a2 = *(_QWORD *)(a2 + Number);\n  *(_DWORD *)(a2 + Number) = Number;\n  if (<span class=\"supfact\">v4</span>) {\n    if (<span class=\"supfact\">v3</span> >= Number)\n      <span class=\"supfact\">v4</span>[Number] = a2;\n    else\n      *<span class=\"supfact\">v4</span> = a2;\n  } else {\n    *a1 = (__int64 **)a2;\n  }\n  ATOM_TREE_RB_INSERT_COLOR(a1, (__int64 *)a2);\n  return Number L;\n}", "code_t": "akl_atom *__cdecl ATOM_TREE_RB_INSERT(ATOM_TREE *head, akl_atom *elm) {\n  int <span class=\"supfact\">comp</span>;\n  akl_atom *<span class=\"supfact\">parent</span>;\n  akl_atom *<span class=\"supfact\">tmp</span>;\n  <span class=\"supfact\">parent</span> = Number L;\n  <span class=\"supfact\">comp</span> = Number;\n  <span class=\"supfact\">tmp</span> = head->rbh_root;\n  while (<span class=\"supfact\">tmp</span>) {\n    <span class=\"supfact\">parent</span> = <span class=\"supfact\">tmp</span>;\n    <span class=\"supfact\">comp</span> = cmp_atom(elm, <span class=\"supfact\">tmp</span>);\n    if (<span class=\"supfact\">comp</span> >= Number) {\n      if (<span class=\"supfact\">comp</span> <= Number)\n        return <span class=\"supfact\">tmp</span>;\n      <span class=\"supfact\">tmp</span> = <span class=\"supfact\">tmp</span>->at_entry.rbe_right;\n    } else {\n      <span class=\"supfact\">tmp</span> = <span class=\"supfact\">tmp</span>->at_entry.rbe_left;\n    }\n  }\n  elm->at_entry.rbe_parent = <span class=\"supfact\">parent</span>;\n  elm->at_entry.rbe_right = Number L;\n  elm->at_entry.rbe_left = elm->at_entry.rbe_right;\n  elm->at_entry.rbe_color = Number;\n  if (<span class=\"supfact\">parent</span>) {\n    if (<span class=\"supfact\">comp</span> >= Number)\n      <span class=\"supfact\">parent</span>->at_entry.rbe_right = elm;\n    else\n      <span class=\"supfact\">parent</span>->at_entry.rbe_left = elm;\n  } else {\n    head->rbh_root = elm;\n  }\n  ATOM_TREE_RB_INSERT_COLOR(head, elm);\n  return Number L;\n}", "var": [{"name": "v5", "type": "FT_Byte * *", "ref_name": "tmp", "ref_type": "akl_atom *"}, {"name": "v4", "type": "FT_PtrDist", "ref_name": "parent", "ref_type": "akl_atom *"}, {"name": "v3", "type": "FT_Error", "ref_name": "comp", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "skylli", "repo_name": "Wilddog_Arduino_Yun", "path": "skylli/Wilddog_Arduino_Yun/41ea027b2720a54a9c6ab513223abc632dfd7dd70e4e8118fac0a4a557fa6e81", "path_in_repo": "skylli/Wilddog_Arduino_Yun/wilddogArduinoYun/src/wilddog_watch", "objdump": "0000000000401767 <transfer_send>:\n  401767:\t55                   \tpush   %rbp\n  401768:\t48 89 e5             \tmov    %rsp,%rbp\n  40176b:\t53                   \tpush   %rbx\n  40176c:\t48 83 ec 38          \tsub    $0x38,%rsp\n  401770:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  401774:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n  401777:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  40177e:\tc7 45 e8 10 00 00 00 \tmovl   $0x10,-0x18(%rbp)\n  401785:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  401789:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40178e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401793:\t48 89 c7             \tmov    %rax,%rdi\n  401796:\te8 75 f9 ff ff       \tcallq  401110 <memset@plt>\n  40179b:\t66 c7 45 d0 02 00    \tmovw   $0x2,-0x30(%rbp)\n  4017a1:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  4017a4:\t0f b7 c0             \tmovzwl %ax,%eax\n  4017a7:\t89 c7                \tmov    %eax,%edi\n  4017a9:\te8 02 f9 ff ff       \tcallq  4010b0 <htons@plt>\n  4017ae:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n  4017b2:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4017b6:\t48 83 c0 04          \tadd    $0x4,%rax\n  4017ba:\t48 89 c6             \tmov    %rax,%rsi\n  4017bd:\tbf ba 30 40 00       \tmov    $0x4030ba,%edi\n  4017c2:\te8 c9 f9 ff ff       \tcallq  401190 <inet_aton@plt>\n  4017c7:\t85 c0                \ttest   %eax,%eax\n  4017c9:\t75 25                \tjne    4017f0 <transfer_send+0x89>\n  4017cb:\t48 8b 05 8e 39 00 00 \tmov    0x398e(%rip),%rax        # 405160 <stderr@@GLIBC_2.2.5>\n  4017d2:\t48 89 c1             \tmov    %rax,%rcx\n  4017d5:\tba 13 00 00 00       \tmov    $0x13,%edx\n  4017da:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4017df:\tbf c4 30 40 00       \tmov    $0x4030c4,%edi\n  4017e4:\te8 67 fa ff ff       \tcallq  401250 <fwrite@plt>\n  4017e9:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4017ee:\teb 4f                \tjmp    40183f <transfer_send+0xd8>\n  4017f0:\t8b 5d e8             \tmov    -0x18(%rbp),%ebx\n  4017f3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4017f7:\t48 89 c7             \tmov    %rax,%rdi\n  4017fa:\te8 91 f8 ff ff       \tcallq  401090 <strlen@plt>\n  4017ff:\t48 89 c2             \tmov    %rax,%rdx\n  401802:\t8b 05 64 39 00 00    \tmov    0x3964(%rip),%eax        # 40516c <l_socket>\n  401808:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  40180c:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n  401810:\t41 89 d9             \tmov    %ebx,%r9d\n  401813:\t49 89 c8             \tmov    %rcx,%r8\n  401816:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  40181b:\t89 c7                \tmov    %eax,%edi\n  40181d:\te8 fe f8 ff ff       \tcallq  401120 <sendto@plt>\n  401822:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  401825:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n  401829:\t75 11                \tjne    40183c <transfer_send+0xd5>\n  40182b:\tbf d8 30 40 00       \tmov    $0x4030d8,%edi\n  401830:\te8 cb f9 ff ff       \tcallq  401200 <perror@plt>\n  401835:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40183a:\teb 03                \tjmp    40183f <transfer_send+0xd8>\n  40183c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40183f:\t48 83 c4 38          \tadd    $0x38,%rsp\n  401843:\t5b                   \tpop    %rbx\n  401844:\t5d                   \tpop    %rbp\n  401845:\tc3                   \tretq   ", "code_s": "__int64 __fastcall transfer_send(const char *a1, uint16_t a2) {\n  __int64 result;\n  socklen_t v3;\n  size_t v4;\n  struct sockaddr <span class=\"supfact\">s</span>;\n  socklen_t <span class=\"supfact\">addr_len</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = Number;\n  <span class=\"supfact\">addr_len</span> = Number;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.sa_family = Number;\n  *(_WORD *)<span class=\"supfact\">s</span>.sa_data = htons(a2);\n  if (inet_aton(String, (struct in_addr *)&<span class=\"supfact\">s</span>.sa_data[Number])) {\n    v3 = <span class=\"supfact\">addr_len</span>;\n    v4 = strlen(a1);\n    <span class=\"supfact\">v7</span> =\n        sendto(l_socket, a1, v4, Number, &<span class=\"supfact\">s</span>, v3);\n    if (<span class=\"supfact\">v7</span> == Number) {\n      perror(String);\n      result = Number;\n    } else {\n      result = <span class=\"supfact\">v7</span>;\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl transfer_send(const char *src, int daemon_port) {\n  int result;\n  int v3;\n  size_t v4;\n  sockaddr_in <span class=\"supfact\">si_other</span>;\n  int <span class=\"supfact\">slen</span>;\n  int <span class=\"supfact\">res</span>;\n  <span class=\"supfact\">res</span> = Number;\n  <span class=\"supfact\">slen</span> = Number;\n  memset(&<span class=\"supfact\">si_other</span>, Number, sizeof(<span class=\"supfact\">si_other</span>));\n  <span class=\"supfact\">si_other</span>.sin_family = Number;\n  <span class=\"supfact\">si_other</span>.sin_port = htons(daemon_port);\n  if (inet_aton(String, &<span class=\"supfact\">si_other</span>.sin_addr)) {\n    v3 = <span class=\"supfact\">slen</span>;\n    v4 = strlen(src);\n    <span class=\"supfact\">res</span> =\n        sendto(l_socket, src, v4, Number,\n               (const struct sockaddr *)&<span class=\"supfact\">si_other</span>, v3);\n    if (<span class=\"supfact\">res</span> == Number) {\n      perror(String);\n      result = Number;\n    } else {\n      result = <span class=\"supfact\">res</span>;\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v7", "type": "int", "ref_name": "res", "ref_type": "int"}, {"name": "addr_len", "type": "int", "ref_name": "slen", "ref_type": "int"}, {"name": "s", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "si_other", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "johankj", "repo_name": "ShillBSD", "path": "johankj/ShillBSD/c20e2363f2d6cb974cb163c0611e038d0bff096fe72cc6b7129e21d4af3e31ca", "path_in_repo": "johankj/ShillBSD/usr.bin/csup/mux.o", "objdump": "0000000000001e0a <buf_count>:\n    1e0a:\t55                   \tpush   %rbp\n    1e0b:\t48 89 e5             \tmov    %rsp,%rbp\n    1e0e:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1e12:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1e16:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1e1a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1e1e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1e22:\t48 39 c2             \tcmp    %rax,%rdx\n    1e25:\t72 1c                \tjb     1e43 <buf_count+0x39>\n    1e27:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1e2b:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1e2f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1e33:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1e37:\t48 29 c2             \tsub    %rax,%rdx\n    1e3a:\t48 89 d0             \tmov    %rdx,%rax\n    1e3d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1e41:\teb 29                \tjmp    1e6c <buf_count+0x62>\n    1e43:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1e47:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    1e4b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1e4f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1e53:\t48 01 c2             \tadd    %rax,%rdx\n    1e56:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1e5a:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1e5e:\t48 29 c2             \tsub    %rax,%rdx\n    1e61:\t48 89 d0             \tmov    %rdx,%rax\n    1e64:\t48 83 c0 01          \tadd    $0x1,%rax\n    1e68:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1e6c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1e70:\t5d                   \tpop    %rbp\n    1e71:\tc3                   \tretq   ", "code_s": "__int64 __fastcall buf_count(_QWORD *a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  if (a1[Number] < a1[Number])\n    <span class=\"supfact\">v2</span> = a1[Number] + a1[Number] - a1[Number] + Number L;\n  else\n    <span class=\"supfact\">v2</span> = a1[Number] - a1[Number];\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "size_t __cdecl buf_count(buf *buf) {\n  size_t <span class=\"supfact\">count</span>;\n  if (buf->in < buf->out)\n    <span class=\"supfact\">count</span> = buf->in + buf->size - buf->out + Number;\n  else\n    <span class=\"supfact\">count</span> = buf->in - buf->out;\n  return <span class=\"supfact\">count</span>;\n}", "var": [{"name": "v2", "type": "uint8_t *", "ref_name": "count", "ref_type": "size_t"}], "body_in_train": false}, {"repo_owner": "cameronbracken", "repo_name": "swfDevice", "path": "cameronbracken/swfDevice/334d294b719baf3b4616c341b90d946f5750617222adb376c0ecfcf0fcfbaca2", "path_in_repo": "cameronbracken/swfDevice/src/ming-lite/actioncompiler/lex.swf5.o", "objdump": "0000000000002de2 <yy_push_state>:\n    2de2:\t55                   \tpush   %rbp\n    2de3:\t48 89 e5             \tmov    %rsp,%rbp\n    2de6:\t48 83 ec 20          \tsub    $0x20,%rsp\n    2dea:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n    2ded:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 2df3 <yy_push_state+0x11>\n    2df3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2df9 <yy_push_state+0x17>\n    2df9:\t39 c2                \tcmp    %eax,%edx\n    2dfb:\t7c 73                \tjl     2e70 <yy_push_state+0x8e>\n    2dfd:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2e03 <yy_push_state+0x21>\n    2e03:\t83 c0 19             \tadd    $0x19,%eax\n    2e06:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 2e0c <yy_push_state+0x2a>\n    2e0c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2e12 <yy_push_state+0x30>\n    2e12:\t48 98                \tcltq   \n    2e14:\t48 c1 e0 02          \tshl    $0x2,%rax\n    2e18:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2e1c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2e23 <yy_push_state+0x41>\n    2e23:\t48 85 c0             \ttest   %rax,%rax\n    2e26:\t75 15                \tjne    2e3d <yy_push_state+0x5b>\n    2e28:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2e2c:\t48 89 c7             \tmov    %rax,%rdi\n    2e2f:\te8 00 00 00 00       \tcallq  2e34 <yy_push_state+0x52>\n    2e34:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2e3b <yy_push_state+0x59>\n    2e3b:\teb 1d                \tjmp    2e5a <yy_push_state+0x78>\n    2e3d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2e44 <yy_push_state+0x62>\n    2e44:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2e48:\t48 89 d6             \tmov    %rdx,%rsi\n    2e4b:\t48 89 c7             \tmov    %rax,%rdi\n    2e4e:\te8 00 00 00 00       \tcallq  2e53 <yy_push_state+0x71>\n    2e53:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2e5a <yy_push_state+0x78>\n    2e5a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2e61 <yy_push_state+0x7f>\n    2e61:\t48 85 c0             \ttest   %rax,%rax\n    2e64:\t75 0a                \tjne    2e70 <yy_push_state+0x8e>\n    2e66:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2e6b:\te8 b5 00 00 00       \tcallq  2f25 <yy_fatal_error>\n    2e70:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2e76 <yy_push_state+0x94>\n    2e76:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    2e79:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 2e80 <yy_push_state+0x9e>\n    2e80:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2e86 <yy_push_state+0xa4>\n    2e86:\t8d 48 01             \tlea    0x1(%rax),%ecx\n    2e89:\t89 0d 00 00 00 00    \tmov    %ecx,0x0(%rip)        # 2e8f <yy_push_state+0xad>\n    2e8f:\t48 98                \tcltq   \n    2e91:\t48 c1 e0 02          \tshl    $0x2,%rax\n    2e95:\t48 01 f0             \tadd    %rsi,%rax\n    2e98:\t89 d1                \tmov    %edx,%ecx\n    2e9a:\tc1 e9 1f             \tshr    $0x1f,%ecx\n    2e9d:\t01 ca                \tadd    %ecx,%edx\n    2e9f:\td1 fa                \tsar    %edx\n    2ea1:\t89 10                \tmov    %edx,(%rax)\n    2ea3:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    2ea6:\t01 c0                \tadd    %eax,%eax\n    2ea8:\t83 c0 01             \tadd    $0x1,%eax\n    2eab:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 2eb1 <yy_push_state+0xcf>\n    2eb1:\t90                   \tnop\n    2eb2:\tc9                   \tleaveq \n    2eb3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall yy_push_state(int a1) {\n  int v1;\n  __int64 result;\n  __int64 <span class=\"supfact\">v3</span>;\n  if (yy_start_stack_ptr >= yy_start_stack_depth) {\n    yy_start_stack_depth += Number;\n    <span class=\"supfact\">v3</span> = Number L * yy_start_stack_depth;\n    if (yy_start_stack)\n      yy_start_stack = swf5realloc(yy_start_stack, <span class=\"supfact\">v3</span>);\n    else\n      yy_start_stack = swf5alloc(<span class=\"supfact\">v3</span>);\n    if (!yy_start_stack)\n      yy_fatal_error(String);\n  }\n  v1 = yy_start_stack_ptr++;\n  *(_DWORD *)(yy_start_stack + Number L * v1) = (yy_start - Number) / Number;\n  result = (unsigned int)(Number * a1 + Number);\n  yy_start = Number * a1 + Number;\n  return result;\n}", "code_t": "void __cdecl yy_push_state(int new_state) {\n  int v1;\n  __int64 <span class=\"supfact\">new_size</span>;\n  if (yy_start_stack_ptr >= yy_start_stack_depth) {\n    yy_start_stack_depth += Number;\n    <span class=\"supfact\">new_size</span> = Number L * yy_start_stack_depth;\n    if (yy_start_stack)\n      yy_start_stack = swf5realloc(yy_start_stack, <span class=\"supfact\">new_size</span>);\n    else\n      yy_start_stack = swf5alloc(<span class=\"supfact\">new_size</span>);\n    if (!yy_start_stack)\n      yy_fatal_error(String);\n  }\n  v1 = yy_start_stack_ptr++;\n  *((_DWORD *)yy_start_stack + v1) = (yy_start - Number) / Number;\n  yy_start = Number * new_state + Number;\n}", "var": [{"name": "v3", "type": "char *", "ref_name": "new_size", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "xuyinghui8888", "repo_name": "scip_ml", "path": "xuyinghui8888/scip_ml/707deaad695a7a82a9a787637c72eb053850cc5015a589c628896e16d54ae1e3", "path_in_repo": "xuyinghui8888/scip_ml/zimpl/obj/O.linux.x86_64.gnu.static.opt/inst.o", "objdump": "0000000000007cbe <objective>:\n    7cbe:\t55                   \tpush   %rbp\n    7cbf:\t48 89 e5             \tmov    %rsp,%rbp\n    7cc2:\t53                   \tpush   %rbx\n    7cc3:\t48 83 ec 28          \tsub    $0x28,%rsp\n    7cc7:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    7ccb:\t89 f0                \tmov    %esi,%eax\n    7ccd:\t88 45 d4             \tmov    %al,-0x2c(%rbp)\n    7cd0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    7cd4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    7cd9:\t48 89 c7             \tmov    %rax,%rdi\n    7cdc:\te8 00 00 00 00       \tcallq  7ce1 <objective+0x23>\n    7ce1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    7ce5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7ce9:\t48 89 c7             \tmov    %rax,%rdi\n    7cec:\te8 00 00 00 00       \tcallq  7cf1 <objective+0x33>\n    7cf1:\t83 f0 01             \txor    $0x1,%eax\n    7cf4:\t84 c0                \ttest   %al,%al\n    7cf6:\t74 33                \tje     7d2b <objective+0x6d>\n    7cf8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7cff <objective+0x41>\n    7cff:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    7d03:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    7d08:\t48 89 c7             \tmov    %rax,%rdi\n    7d0b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7d10:\te8 00 00 00 00       \tcallq  7d15 <objective+0x57>\n    7d15:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    7d19:\t48 89 c7             \tmov    %rax,%rdi\n    7d1c:\te8 00 00 00 00       \tcallq  7d21 <objective+0x63>\n    7d21:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    7d26:\te8 00 00 00 00       \tcallq  7d2b <objective+0x6d>\n    7d2b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    7d2f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    7d34:\t48 89 c7             \tmov    %rax,%rdi\n    7d37:\te8 00 00 00 00       \tcallq  7d3c <objective+0x7e>\n    7d3c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    7d40:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    7d44:\t48 89 c7             \tmov    %rax,%rdi\n    7d47:\te8 00 00 00 00       \tcallq  7d4c <objective+0x8e>\n    7d4c:\t83 f0 01             \txor    $0x1,%eax\n    7d4f:\t84 c0                \ttest   %al,%al\n    7d51:\t74 34                \tje     7d87 <objective+0xc9>\n    7d53:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7d5a <objective+0x9c>\n    7d5a:\t48 89 c1             \tmov    %rax,%rcx\n    7d5d:\tba 37 00 00 00       \tmov    $0x37,%edx\n    7d62:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    7d67:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    7d6c:\te8 00 00 00 00       \tcallq  7d71 <objective+0xb3>\n    7d71:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    7d75:\t48 89 c7             \tmov    %rax,%rdi\n    7d78:\te8 00 00 00 00       \tcallq  7d7d <objective+0xbf>\n    7d7d:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    7d82:\te8 00 00 00 00       \tcallq  7d87 <objective+0xc9>\n    7d87:\t0f b6 5d d4          \tmovzbl -0x2c(%rbp),%ebx\n    7d8b:\te8 00 00 00 00       \tcallq  7d90 <objective+0xd2>\n    7d90:\t48 89 c1             \tmov    %rax,%rcx\n    7d93:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7d97:\t89 da                \tmov    %ebx,%edx\n    7d99:\t48 89 c6             \tmov    %rax,%rsi\n    7d9c:\t48 89 cf             \tmov    %rcx,%rdi\n    7d9f:\te8 00 00 00 00       \tcallq  7da4 <objective+0xe6>\n    7da4:\t84 c0                \ttest   %al,%al\n    7da6:\t74 29                \tje     7dd1 <objective+0x113>\n    7da8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7daf <objective+0xf1>\n    7daf:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    7db3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    7db8:\t48 89 c7             \tmov    %rax,%rdi\n    7dbb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7dc0:\te8 00 00 00 00       \tcallq  7dc5 <objective+0x107>\n    7dc5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    7dc9:\t48 89 c7             \tmov    %rax,%rdi\n    7dcc:\te8 00 00 00 00       \tcallq  7dd1 <objective+0x113>\n    7dd1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    7dd5:\t48 89 c7             \tmov    %rax,%rdi\n    7dd8:\te8 00 00 00 00       \tcallq  7ddd <objective+0x11f>\n    7ddd:\te8 00 00 00 00       \tcallq  7de2 <objective+0x124>\n    7de2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    7de6:\t48 89 c7             \tmov    %rax,%rdi\n    7de9:\te8 00 00 00 00       \tcallq  7dee <objective+0x130>\n    7dee:\t90                   \tnop\n    7def:\t48 83 c4 28          \tadd    $0x28,%rsp\n    7df3:\t5b                   \tpop    %rbx\n    7df4:\t5d                   \tpop    %rbp\n    7df5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall objective(__int64 a1, unsigned __int8 a2) {\n  __int64 v2;\n  __int64 <span class=\"supfact\">v4</span>;\n  const char *<span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = (const char *)code_eval_child_name(a1, Number L);\n  if ((unsigned __int8)conname_set(<span class=\"supfact\">v5</span>) != Number) {\n    fprintf(stderr, String, <span class=\"supfact\">v5</span>);\n    code_errmsg(a1);\n    zpl_exit(Number L);\n  }\n  <span class=\"supfact\">v4</span> = code_eval_child_term(a1, Number L);\n  if ((unsigned __int8)term_is_linear(<span class=\"supfact\">v4</span>) != Number) {\n    fwrite(String, Number, Number, stderr);\n    code_errmsg(a1);\n    zpl_exit(Number L);\n  }\n  v2 = prog_get_lp();\n  if ((unsigned __int8)xlp_setobj(v2, <span class=\"supfact\">v5</span>, a2)) {\n    fprintf(stderr, String, <span class=\"supfact\">v5</span>);\n    code_errmsg(a1);\n  }\n  term_to_objective(<span class=\"supfact\">v4</span>);\n  conname_free();\n  return code_value_void(a1);\n}", "code_t": "void __cdecl objective(CodeNode *self, bool minimize) {\n  __int64 v2;\n  const Term *<span class=\"supfact\">term</span>;\n  const char *<span class=\"supfact\">name</span>;\n  <span class=\"supfact\">name</span> = (const char *)code_eval_child_name(self, Number L);\n  if ((unsigned __int8)conname_set(<span class=\"supfact\">name</span>) != Number) {\n    fprintf(stderr, String, <span class=\"supfact\">name</span>);\n    code_errmsg(self);\n    zpl_exit(Number L);\n  }\n  <span class=\"supfact\">term</span> = (const Term *)code_eval_child_term(self, Number L);\n  if ((unsigned __int8)term_is_linear(<span class=\"supfact\">term</span>) != Number) {\n    fwrite(String, Number, Number, stderr);\n    code_errmsg(self);\n    zpl_exit(Number L);\n  }\n  v2 = prog_get_lp();\n  if ((unsigned __int8)xlp_setobj(v2, <span class=\"supfact\">name</span>, minimize)) {\n    fprintf(stderr, String, <span class=\"supfact\">name</span>);\n    code_errmsg(self);\n  }\n  term_to_objective(<span class=\"supfact\">term</span>);\n  conname_free();\n  code_value_void(self);\n}", "var": [{"name": "v5", "type": "OBJ_DATA *", "ref_name": "name", "ref_type": "const char *"}, {"name": "v4", "type": "OBJ_DATA *", "ref_name": "term", "ref_type": "__unk__"}], "body_in_train": false}]