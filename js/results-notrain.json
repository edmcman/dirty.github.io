[{"repo_owner": "hakansel05", "repo_name": "PandaLin", "path": "hakansel05/PandaLin/08aefaaa1779a253949ba5823799adcbbfa6e51711030baf1a1ef8a2e0a62105", "path_in_repo": "hakansel05/PandaLin//output/build/kmod-9/testsuite/rootfs-pristine/test-modprobe/softdep-loop/lib/modules/4.4.4/kernel/net/bluetooth/bluetooth.ko", "objdump": "00000000000033f0 <hci_register_notifier>:\n    33f0:\t55                   \tpush   %rbp\n    33f1:\t48 89 fe             \tmov    %rdi,%rsi\n    33f4:\t48 c7 c7 00 00 00 00 \tmov    $0x0,%rdi\n    33fb:\t48 89 e5             \tmov    %rsp,%rbp\n    33fe:\te8 00 00 00 00       \tcallq  3403 <hci_register_notifier+0x13>\n    3403:\t5d                   \tpop    %rbp\n    3404:\tc3                   \tretq   \n    3405:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n    340c:\t00 00 00 00 ", "code_s": "__int64 __fastcall hci_register_notifier(__int64 a1) {\n  return atomic_notifier_chain_register(&hci_notifier, a1);\n}", "code_t": "__int64 __fastcall hci_register_notifier(__int64 <span class=\"supfact\">a1</span>) {\n  return atomic_notifier_chain_register(&hci_notifier, <span class=\"supfact\">a1</span>);\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "func", "ref_name": "a1", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "popo55668", "repo_name": "DAG-Aware-MIG-Rewriting", "path": "popo55668/DAG-Aware-MIG-Rewriting/96be252a71bbf5721997beb13f0df489bb971360782c2e72ef9d356ddd1d6254", "path_in_repo": "popo55668/DAG-Aware-MIG-Rewriting//src/base/wlc/wlcBlast.o", "objdump": "00000000000032a6 <Wlc_BlastReduction>:\n    32a6:\t55                   \tpush   %rbp\n    32a7:\t48 89 e5             \tmov    %rsp,%rbp\n    32aa:\t48 83 ec 40          \tsub    $0x40,%rsp\n    32ae:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    32b2:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    32b6:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n    32b9:\t89 4d c8             \tmov    %ecx,-0x38(%rbp)\n    32bc:\t83 7d c8 21          \tcmpl   $0x21,-0x38(%rbp)\n    32c0:\t75 4e                \tjne    3310 <Wlc_BlastReduction+0x6a>\n    32c2:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n    32c9:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    32d0:\teb 2e                \tjmp    3300 <Wlc_BlastReduction+0x5a>\n    32d2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    32d5:\t48 98                \tcltq   \n    32d7:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    32de:\t00 \n    32df:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    32e3:\t48 01 d0             \tadd    %rdx,%rax\n    32e6:\t8b 10                \tmov    (%rax),%edx\n    32e8:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n    32eb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    32ef:\t89 ce                \tmov    %ecx,%esi\n    32f1:\t48 89 c7             \tmov    %rax,%rdi\n    32f4:\te8 00 00 00 00       \tcallq  32f9 <Wlc_BlastReduction+0x53>\n    32f9:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    32fc:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    3300:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    3303:\t3b 45 cc             \tcmp    -0x34(%rbp),%eax\n    3306:\t7c ca                \tjl     32d2 <Wlc_BlastReduction+0x2c>\n    3308:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    330b:\te9 bb 00 00 00       \tjmpq   33cb <Wlc_BlastReduction+0x125>\n    3310:\t83 7d c8 22          \tcmpl   $0x22,-0x38(%rbp)\n    3314:\t75 4b                \tjne    3361 <Wlc_BlastReduction+0xbb>\n    3316:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n    331d:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n    3324:\teb 2e                \tjmp    3354 <Wlc_BlastReduction+0xae>\n    3326:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    3329:\t48 98                \tcltq   \n    332b:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    3332:\t00 \n    3333:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3337:\t48 01 d0             \tadd    %rdx,%rax\n    333a:\t8b 10                \tmov    (%rax),%edx\n    333c:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n    333f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3343:\t89 ce                \tmov    %ecx,%esi\n    3345:\t48 89 c7             \tmov    %rax,%rdi\n    3348:\te8 00 00 00 00       \tcallq  334d <Wlc_BlastReduction+0xa7>\n    334d:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    3350:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n    3354:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    3357:\t3b 45 cc             \tcmp    -0x34(%rbp),%eax\n    335a:\t7c ca                \tjl     3326 <Wlc_BlastReduction+0x80>\n    335c:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    335f:\teb 6a                \tjmp    33cb <Wlc_BlastReduction+0x125>\n    3361:\t83 7d c8 23          \tcmpl   $0x23,-0x38(%rbp)\n    3365:\t75 4b                \tjne    33b2 <Wlc_BlastReduction+0x10c>\n    3367:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n    336e:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    3375:\teb 2e                \tjmp    33a5 <Wlc_BlastReduction+0xff>\n    3377:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    337a:\t48 98                \tcltq   \n    337c:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    3383:\t00 \n    3384:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3388:\t48 01 d0             \tadd    %rdx,%rax\n    338b:\t8b 10                \tmov    (%rax),%edx\n    338d:\t8b 4d e8             \tmov    -0x18(%rbp),%ecx\n    3390:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3394:\t89 ce                \tmov    %ecx,%esi\n    3396:\t48 89 c7             \tmov    %rax,%rdi\n    3399:\te8 00 00 00 00       \tcallq  339e <Wlc_BlastReduction+0xf8>\n    339e:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    33a1:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    33a5:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    33a8:\t3b 45 cc             \tcmp    -0x34(%rbp),%eax\n    33ab:\t7c ca                \tjl     3377 <Wlc_BlastReduction+0xd1>\n    33ad:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    33b0:\teb 19                \tjmp    33cb <Wlc_BlastReduction+0x125>\n    33b2:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    33b7:\tba c2 00 00 00       \tmov    $0xc2,%edx\n    33bc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    33c1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    33c6:\te8 00 00 00 00       \tcallq  33cb <Wlc_BlastReduction+0x125>\n    33cb:\tc9                   \tleaveq \n    33cc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Wlc_BlastReduction(__int64 a1, __int64 a2, int a3, int a4) {\n  __int64 result;\n  unsigned int v6;\n  int k;\n  unsigned int v8;\n  int j;\n  unsigned int v10;\n  int i;\n  switch (a4) {\n  case String:\n    v10 = Number;\n    for (i = Number; i < a3; ++i)\n      v10 = Gia_ManHashAnd(a1, v10, *(unsigned int *)(Number L * i + a2));\n    result = v10;\n    break;\n  case String:\n    v8 = Number;\n    for (j = Number; j < a3; ++j)\n      v8 = Gia_ManHashOr(a1, v8, *(unsigned int *)(Number L * j + a2));\n    result = v8;\n    break;\n  case String:\n    v6 = Number;\n    for (k = Number; k < a3; ++k)\n      v6 = Gia_ManHashXor(a1, v6, *(unsigned int *)(Number L * k + a2));\n    result = v6;\n    break;\n  default:\n    _assert_fail(String, String, Number, String);\n  }\n  return result;\n}", "code_t": "int __cdecl Wlc_BlastReduction(Gia_Man_t *<span class=\"supfact\">pNew</span>,\n                               int *<span class=\"supfact\">pFans</span>,\n                               int <span class=\"supfact\">nFans</span>,\n                               int <span class=\"supfact\">Type</span>) {\n  int <span class=\"supfact\">result</span>;\n  unsigned int <span class=\"supfact\">iLit_1</span>;\n  int <span class=\"supfact\">k_1</span>;\n  unsigned int <span class=\"supfact\">iLit_0</span>;\n  int <span class=\"supfact\">k_0</span>;\n  unsigned int <span class=\"supfact\">iLit</span>;\n  int <span class=\"supfact\">k</span>;\n  switch (<span class=\"supfact\">Type</span>) {\n  case String:\n    <span class=\"supfact\">iLit</span> = Number;\n    for (<span class=\"supfact\">k</span> = Number; <span class=\"supfact\">k</span> < <span class=\"supfact\">nFans</span>;\n         ++<span class=\"supfact\">k</span>)\n      <span class=\"supfact\">iLit</span> = Gia_ManHashAnd(\n          <span class=\"supfact\">pNew</span>, <span class=\"supfact\">iLit</span>,\n          (unsigned int)<span class=\"supfact\">pFans</span>[<span class=\"supfact\">k</span>]);\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">iLit</span>;\n    break;\n  case String:\n    <span class=\"supfact\">iLit_0</span> = Number;\n    for (<span class=\"supfact\">k_0</span> = Number;\n         <span class=\"supfact\">k_0</span> < <span class=\"supfact\">nFans</span>; ++<span class=\"supfact\">k_0</span>)\n      <span class=\"supfact\">iLit_0</span> = Gia_ManHashOr(\n          <span class=\"supfact\">pNew</span>, <span class=\"supfact\">iLit_0</span>,\n          (unsigned int)<span class=\"supfact\">pFans</span>[<span class=\"supfact\">k_0</span>]);\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">iLit_0</span>;\n    break;\n  case String:\n    <span class=\"supfact\">iLit_1</span> = Number;\n    for (<span class=\"supfact\">k_1</span> = Number;\n         <span class=\"supfact\">k_1</span> < <span class=\"supfact\">nFans</span>; ++<span class=\"supfact\">k_1</span>)\n      <span class=\"supfact\">iLit_1</span> = Gia_ManHashXor(\n          <span class=\"supfact\">pNew</span>, <span class=\"supfact\">iLit_1</span>,\n          (unsigned int)<span class=\"supfact\">pFans</span>[<span class=\"supfact\">k_1</span>]);\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">iLit_1</span>;\n    break;\n  default:\n    _assert_fail(String, String, Number, String);\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "Gia_Man_t *", "pred_name": "pAig", "ref_name": "pNew", "ref_type": "Gia_Man_t *"}, {"name": "a2", "type": "unsigned int *", "pred_name": "pSim", "ref_name": "pFans", "ref_type": "int *"}, {"name": "a3", "type": "int", "pred_name": "nWords", "ref_name": "nFans", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "fCompl", "ref_name": "Type", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "result", "ref_type": "int"}, {"name": "v6", "type": "unsigned int", "pred_name": "uHash", "ref_name": "iLit_1", "ref_type": "unsigned int"}, {"name": "k", "type": "int", "pred_name": "k", "ref_name": "k_1", "ref_type": "int"}, {"name": "v8", "type": "unsigned int", "pred_name": "uHash", "ref_name": "iLit_0", "ref_type": "unsigned int"}, {"name": "j", "type": "int", "pred_name": "c", "ref_name": "k_0", "ref_type": "int"}, {"name": "v10", "type": "unsigned int", "pred_name": "Count", "ref_name": "iLit", "ref_type": "unsigned int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "k", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "huchenmin", "repo_name": "cocos2d_project", "path": "huchenmin/cocos2d_project/6878fdbeaed0362df23711a63c10cfe0e6abe5c5407f8ad0e6632f2e58878751", "path_in_repo": "huchenmin/cocos2d_project/cocos2d-x-2.1.4/cocos2dx/proj.linux/obj/release/particle_nodes/CCParticleSystem.o", "objdump": "0000000000000290 <_ZN7cocos2d16CCParticleSystem10getLifeVarEv>:\n     290:\tf3 0f 10 87 cc 01 00 \tmovss  0x1cc(%rdi),%xmm0\n     297:\t00 \n     298:\tc3                   \tretq   \n     299:\t90                   \tnop\n     29a:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)", "code_s": "float __fastcall cocos2d CCParticleSystem\ngetLifeVar(cocos2d CCParticleSystem *this) {\n  return *((float *)this + Number);\n}", "code_t": "float __fastcall cocos2d CCParticleSystem\ngetLifeVar(cocos2d CCParticleSystem *<span class=\"supfact\">this</span>) {\n  return *((float *)<span class=\"supfact\">this</span> + Number);\n}", "var": [{"name": "this", "type": "cocos2d::CCParticleSystem *", "pred_name": "this", "ref_name": "this", "ref_type": "cocos2d::CCParticleSystem *"}], "body_in_train": false}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "00000000000090fb <glUniform1fARB>:\n    90fb:\t55                   \tpush   %rbp\n    90fc:\t48 89 e5             \tmov    %rsp,%rbp\n    90ff:\t48 83 ec 10          \tsub    $0x10,%rsp\n    9103:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    9106:\tf3 0f 11 45 f8       \tmovss  %xmm0,-0x8(%rbp)\n    910b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9112 <glUniform1fARB+0x17>\n    9112:\t48 8b 88 18 11 00 00 \tmov    0x1118(%rax),%rcx\n    9119:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    911c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    911f:\t66 0f 6e c2          \tmovd   %edx,%xmm0\n    9123:\t89 c7                \tmov    %eax,%edi\n    9125:\tff d1                \tcallq  *%rcx\n    9127:\t90                   \tnop\n    9128:\tc9                   \tleaveq \n    9129:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glUniform1fARB(unsigned int a1, float a2) {\n  return (*(__int64(__fastcall **)(_QWORD, double))(glapi_Dispatch + Number L))(\n      a1, *(double *)_mm_cvtsi32_si128(LODWORD(a2)).m128i_i64);\n}", "code_t": "void __cdecl glUniform1fARB(GLint <span class=\"supfact\">location</span>,\n                            GLfloat <span class=\"supfact\">v0</span>) {\n  (*(void(__fastcall **)(_QWORD, double))(glapi_Dispatch + Number L))(\n      (unsigned int)<span class=\"supfact\">location</span>,\n      *(double *)_mm_cvtsi32_si128(LODWORD(<span class=\"supfact\">v0</span>)).m128i_i64);\n}", "var": [{"name": "a1", "type": "GLenum", "pred_name": "type", "ref_name": "location", "ref_type": "GLint"}, {"name": "a2", "type": "GLfloat", "pred_name": "scale", "ref_name": "v0", "ref_type": "GLfloat"}], "body_in_train": false}, {"repo_owner": "xurubin", "repo_name": "wl530g-mini", "path": "xurubin/wl530g-mini/f99861544a10b2ed63145010e05a4835aea5fefcf677ec67e002f35bffa8c44b", "path_in_repo": "xurubin/wl530g-mini/Src/uClinux-dist/user/busybox/libbb/read_package_field.o", "objdump": "0000000000000000 <read_package_field>:\n   0:\t48 83 ec 58          \tsub    $0x58,%rsp\n   4:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n   9:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n   e:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n  13:\tc7 44 24 4c 00 00 00 \tmovl   $0x0,0x4c(%rsp)\n  1a:\t00 \n  1b:\tc7 44 24 48 00 00 00 \tmovl   $0x0,0x48(%rsp)\n  22:\t00 \n  23:\tc7 44 24 44 00 00 00 \tmovl   $0x0,0x44(%rsp)\n  2a:\t00 \n  2b:\tc7 44 24 38 00 00 00 \tmovl   $0x0,0x38(%rsp)\n  32:\t00 \n  33:\tc7 44 24 40 00 00 00 \tmovl   $0x0,0x40(%rsp)\n  3a:\t00 \n  3b:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n  42:\t00 \n  43:\t48 83 7c 24 18 00    \tcmpq   $0x0,0x18(%rsp)\n  49:\t75 22                \tjne    6d <read_package_field+0x6d>\n  4b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n  50:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  57:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  5c:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  63:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  68:\te9 ac 01 00 00       \tjmpq   219 <read_package_field+0x219>\n  6d:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n  71:\t83 c0 01             \tadd    $0x1,%eax\n  74:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n  78:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n  7c:\t48 63 d0             \tmovslq %eax,%rdx\n  7f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  84:\t48 01 d0             \tadd    %rdx,%rax\n  87:\t0f b6 00             \tmovzbl (%rax),%eax\n  8a:\t0f be c0             \tmovsbl %al,%eax\n  8d:\t83 f8 3a             \tcmp    $0x3a,%eax\n  90:\t74 32                \tje     c4 <read_package_field+0xc4>\n  92:\t83 f8 3a             \tcmp    $0x3a,%eax\n  95:\t0f 8f 86 00 00 00    \tjg     121 <read_package_field+0x121>\n  9b:\t83 f8 20             \tcmp    $0x20,%eax\n  9e:\t74 5d                \tje     fd <read_package_field+0xfd>\n  a0:\t83 f8 20             \tcmp    $0x20,%eax\n  a3:\t7f 7c                \tjg     121 <read_package_field+0x121>\n  a5:\t83 f8 0a             \tcmp    $0xa,%eax\n  a8:\t74 33                \tje     dd <read_package_field+0xdd>\n  aa:\t83 f8 0a             \tcmp    $0xa,%eax\n  ad:\t7f 72                \tjg     121 <read_package_field+0x121>\n  af:\t85 c0                \ttest   %eax,%eax\n  b1:\t74 07                \tje     ba <read_package_field+0xba>\n  b3:\t83 f8 09             \tcmp    $0x9,%eax\n  b6:\t74 45                \tje     fd <read_package_field+0xfd>\n  b8:\teb 67                \tjmp    121 <read_package_field+0x121>\n  ba:\tc7 44 24 3c 01 00 00 \tmovl   $0x1,0x3c(%rsp)\n  c1:\t00 \n  c2:\teb 5d                \tjmp    121 <read_package_field+0x121>\n  c4:\t83 7c 24 48 00       \tcmpl   $0x0,0x48(%rsp)\n  c9:\t75 52                \tjne    11d <read_package_field+0x11d>\n  cb:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n  cf:\t89 44 24 48          \tmov    %eax,0x48(%rsp)\n  d3:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n  d7:\t89 44 24 44          \tmov    %eax,0x44(%rsp)\n  db:\teb 40                \tjmp    11d <read_package_field+0x11d>\n  dd:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n  e1:\t48 63 d0             \tmovslq %eax,%rdx\n  e4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  e9:\t48 01 d0             \tadd    %rdx,%rax\n  ec:\t0f b6 00             \tmovzbl (%rax),%eax\n  ef:\t3c 20                \tcmp    $0x20,%al\n  f1:\t74 0a                \tje     fd <read_package_field+0xfd>\n  f3:\tc7 44 24 3c 01 00 00 \tmovl   $0x1,0x3c(%rsp)\n  fa:\t00 \n  fb:\teb 24                \tjmp    121 <read_package_field+0x121>\n  fd:\t8b 44 24 4c          \tmov    0x4c(%rsp),%eax\n 101:\t3b 44 24 40          \tcmp    0x40(%rsp),%eax\n 105:\t75 05                \tjne    10c <read_package_field+0x10c>\n 107:\t83 44 24 4c 01       \taddl   $0x1,0x4c(%rsp)\n 10c:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n 110:\t3b 44 24 40          \tcmp    0x40(%rsp),%eax\n 114:\t75 0a                \tjne    120 <read_package_field+0x120>\n 116:\t83 44 24 44 01       \taddl   $0x1,0x44(%rsp)\n 11b:\teb 03                \tjmp    120 <read_package_field+0x120>\n 11d:\t90                   \tnop\n 11e:\teb 01                \tjmp    121 <read_package_field+0x121>\n 120:\t90                   \tnop\n 121:\t83 7c 24 3c 01       \tcmpl   $0x1,0x3c(%rsp)\n 126:\t75 6b                \tjne    193 <read_package_field+0x193>\n 128:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n 12c:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n 130:\t8b 44 24 48          \tmov    0x48(%rsp),%eax\n 134:\t2b 44 24 4c          \tsub    0x4c(%rsp),%eax\n 138:\t89 44 24 30          \tmov    %eax,0x30(%rsp)\n 13c:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n 140:\t2b 44 24 44          \tsub    0x44(%rsp),%eax\n 144:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n 148:\t83 7c 24 30 00       \tcmpl   $0x0,0x30(%rsp)\n 14d:\t74 4e                \tje     19d <read_package_field+0x19d>\n 14f:\t83 7c 24 30 00       \tcmpl   $0x0,0x30(%rsp)\n 154:\t7e 07                \tjle    15d <read_package_field+0x15d>\n 156:\t83 7c 24 2c 00       \tcmpl   $0x0,0x2c(%rsp)\n 15b:\t7f 43                \tjg     1a0 <read_package_field+0x1a0>\n 15d:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n 164:\t00 \n 165:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n 169:\t83 c0 01             \tadd    $0x1,%eax\n 16c:\t89 44 24 4c          \tmov    %eax,0x4c(%rsp)\n 170:\tc7 44 24 48 00 00 00 \tmovl   $0x0,0x48(%rsp)\n 177:\t00 \n 178:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n 17c:\t83 c0 01             \tadd    $0x1,%eax\n 17f:\t89 44 24 44          \tmov    %eax,0x44(%rsp)\n 183:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n 187:\t83 c0 01             \tadd    $0x1,%eax\n 18a:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n 18e:\t83 44 24 40 01       \taddl   $0x1,0x40(%rsp)\n 193:\t83 44 24 40 01       \taddl   $0x1,0x40(%rsp)\n 198:\te9 d0 fe ff ff       \tjmpq   6d <read_package_field+0x6d>\n 19d:\t90                   \tnop\n 19e:\teb 01                \tjmp    1a1 <read_package_field+0x1a1>\n 1a0:\t90                   \tnop\n 1a1:\t83 7c 24 30 00       \tcmpl   $0x0,0x30(%rsp)\n 1a6:\t75 0e                \tjne    1b6 <read_package_field+0x1b6>\n 1a8:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 1ad:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n 1b4:\teb 25                \tjmp    1db <read_package_field+0x1db>\n 1b6:\t8b 44 24 4c          \tmov    0x4c(%rsp),%eax\n 1ba:\t48 63 d0             \tmovslq %eax,%rdx\n 1bd:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 1c2:\t48 01 c2             \tadd    %rax,%rdx\n 1c5:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n 1c9:\t89 c6                \tmov    %eax,%esi\n 1cb:\t48 89 d7             \tmov    %rdx,%rdi\n 1ce:\te8 00 00 00 00       \tcallq  1d3 <read_package_field+0x1d3>\n 1d3:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n 1d8:\t48 89 02             \tmov    %rax,(%rdx)\n 1db:\t83 7c 24 2c 00       \tcmpl   $0x0,0x2c(%rsp)\n 1e0:\t7e 27                \tjle    209 <read_package_field+0x209>\n 1e2:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n 1e6:\t48 63 d0             \tmovslq %eax,%rdx\n 1e9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 1ee:\t48 01 c2             \tadd    %rax,%rdx\n 1f1:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n 1f5:\t89 c6                \tmov    %eax,%esi\n 1f7:\t48 89 d7             \tmov    %rdx,%rdi\n 1fa:\te8 00 00 00 00       \tcallq  1ff <read_package_field+0x1ff>\n 1ff:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n 204:\t48 89 02             \tmov    %rax,(%rdx)\n 207:\teb 0c                \tjmp    215 <read_package_field+0x215>\n 209:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 20e:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n 215:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n 219:\t48 83 c4 58          \tadd    $0x58,%rsp\n 21d:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall read_package_field(__int64 a1, _QWORD *a2, _QWORD *a3) {\n  int v4;\n  int v6;\n  int v7;\n  unsigned int v8;\n  int v9;\n  int v10;\n  int v11;\n  int v12;\n  int v13;\n  v13 = Number;\n  v12 = Number;\n  v11 = Number;\n  v10 = Number;\n  v9 = Number;\n  if (!a1) {\n    *a2 = Number L;\n    *a3 = Number L;\n    return Number;\n  }\n  while (Number) {\n    v8 = v10 + Number;\n    v4 = *(char *)(v10 + a1);\n    if (v4 == Number) {\n      if (!v12) {\n        v12 = v10;\n        v11 = v10 + Number;\n      }\n    } else {\n      if (v4 > Number)\n        goto LABEL_21;\n      if (v4 == Number)\n        goto LABEL_17;\n      if (v4 > Number)\n        goto LABEL_21;\n      if (v4 == Number) {\n        if (*(_BYTE *)((int)v8 + a1) != Number) {\n          v9 = Number;\n          goto LABEL_21;\n        }\n      LABEL_17:\n        if (v13 == v10)\n          ++v13;\n        if (v11 == v10)\n          ++v11;\n        goto LABEL_21;\n      }\n      if (v4 > Number)\n        goto LABEL_21;\n      if (!*(_BYTE *)(v10 + a1)) {\n        v9 = Number;\n        goto LABEL_21;\n      }\n      if (v4 == Number)\n        goto LABEL_17;\n    }\n  LABEL_21:\n    if (v9 != Number)\n      goto LABEL_26;\n    v7 = v12 - v13;\n    v6 = v10 - v11;\n    if (v12 == v13 || v7 > Number && v6 > Number)\n      break;\n    v9 = Number;\n    v13 = v10 + Number;\n    v12 = Number;\n    v11 = ++v10;\n  LABEL_26:\n    ++v10;\n  }\n  if (v7)\n    *a2 = xstrndup(a1 + v13, (unsigned int)v7);\n  else\n    *a2 = Number L;\n  if (v6 <= Number)\n    *a3 = Number L;\n  else\n    *a3 = xstrndup(a1 + v11, (unsigned int)v6);\n  return v8;\n}", "code_t": "int __cdecl read_package_field(const char *<span class=\"supfact\">package_buffer</span>,\n                               char **<span class=\"supfact\">field_name</span>,\n                               char **<span class=\"supfact\">field_value</span>) {\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">value_length</span>;\n  int <span class=\"supfact\">name_length</span>;\n  int <span class=\"supfact\">exit_flag</span>;\n  int <span class=\"supfact\">offset</span>;\n  int <span class=\"supfact\">offset_value_start</span>;\n  int <span class=\"supfact\">offset_name_end</span>;\n  int <span class=\"supfact\">offset_name_start</span>;\n  <span class=\"supfact\">offset_name_start</span> = Number;\n  <span class=\"supfact\">offset_name_end</span> = Number;\n  <span class=\"supfact\">offset_value_start</span> = Number;\n  <span class=\"supfact\">offset</span> = Number;\n  <span class=\"supfact\">exit_flag</span> = Number;\n  if (!<span class=\"supfact\">package_buffer</span>) {\n    *<span class=\"supfact\">field_name</span> = Number L;\n    *<span class=\"supfact\">field_value</span> = Number L;\n    return Number;\n  }\n  while (Number) {\n    <span class=\"supfact\">v4</span> = <span class=\"supfact\">package_buffer</span>[<span class=\"supfact\">offset</span>];\n    if (<span class=\"supfact\">v4</span> == Number) {\n      if (!<span class=\"supfact\">offset_name_end</span>) {\n        <span class=\"supfact\">offset_name_end</span> = <span class=\"supfact\">offset</span>;\n        <span class=\"supfact\">offset_value_start</span> = <span class=\"supfact\">offset</span> + Number;\n      }\n    } else {\n      if (<span class=\"supfact\">v4</span> > Number)\n        goto LABEL_21;\n      if (<span class=\"supfact\">v4</span> == Number)\n        goto LABEL_17;\n      if (<span class=\"supfact\">v4</span> > Number)\n        goto LABEL_21;\n      if (<span class=\"supfact\">v4</span> == Number) {\n        if (<span class=\"supfact\">package_buffer</span>[<span class=\"supfact\">offset</span> + Number] !=\n            Number) {\n          <span class=\"supfact\">exit_flag</span> = Number;\n          goto LABEL_21;\n        }\n      LABEL_17:\n        if (<span class=\"supfact\">offset_name_start</span> == <span class=\"supfact\">offset</span>)\n          ++<span class=\"supfact\">offset_name_start</span>;\n        if (<span class=\"supfact\">offset_value_start</span> == <span class=\"supfact\">offset</span>)\n          ++<span class=\"supfact\">offset_value_start</span>;\n        goto LABEL_21;\n      }\n      if (<span class=\"supfact\">v4</span> > Number)\n        goto LABEL_21;\n      if (!<span class=\"supfact\">package_buffer</span>[<span class=\"supfact\">offset</span>]) {\n        <span class=\"supfact\">exit_flag</span> = Number;\n        goto LABEL_21;\n      }\n      if (<span class=\"supfact\">v4</span> == Number)\n        goto LABEL_17;\n    }\n  LABEL_21:\n    if (<span class=\"supfact\">exit_flag</span> != Number)\n      goto LABEL_26;\n    <span class=\"supfact\">name_length</span> =\n        <span class=\"supfact\">offset_name_end</span> - <span class=\"supfact\">offset_name_start</span>;\n    <span class=\"supfact\">value_length</span> =\n        <span class=\"supfact\">offset</span> - <span class=\"supfact\">offset_value_start</span>;\n    if (<span class=\"supfact\">offset_name_end</span> == <span class=\"supfact\">offset_name_start</span> ||\n        <span class=\"supfact\">name_length</span> > Number &&\n            <span class=\"supfact\">value_length</span> > Number)\n      break;\n    <span class=\"supfact\">exit_flag</span> = Number;\n    <span class=\"supfact\">offset_name_start</span> = <span class=\"supfact\">offset</span> + Number;\n    <span class=\"supfact\">offset_name_end</span> = Number;\n    <span class=\"supfact\">offset_value_start</span> = ++<span class=\"supfact\">offset</span>;\n  LABEL_26:\n    ++<span class=\"supfact\">offset</span>;\n  }\n  if (<span class=\"supfact\">name_length</span>)\n    *<span class=\"supfact\">field_name</span> = (char *)xstrndup(\n        &<span class=\"supfact\">package_buffer</span>[<span class=\"supfact\">offset_name_start</span>],\n        (unsigned int)<span class=\"supfact\">name_length</span>);\n  else\n    *<span class=\"supfact\">field_name</span> = Number L;\n  if (<span class=\"supfact\">value_length</span> <= Number)\n    *<span class=\"supfact\">field_value</span> = Number L;\n  else\n    *<span class=\"supfact\">field_value</span> = (char *)xstrndup(\n        &<span class=\"supfact\">package_buffer</span>[<span class=\"supfact\">offset_value_start</span>],\n        (unsigned int)<span class=\"supfact\">value_length</span>);\n  return <span class=\"supfact\">offset</span> + Number;\n}", "var": [{"name": "a1", "type": "char * *", "pred_name": "strp", "ref_name": "package_buffer", "ref_type": "const char *"}, {"name": "a2", "type": "const char *", "pred_name": "fmt", "ref_name": "field_name", "ref_type": "char * *"}, {"name": "a3", "type": "__va_list_tag *", "pred_name": "ap", "ref_name": "field_value", "ref_type": "char * *"}, {"name": "v4", "type": "int", "pred_name": "v4", "ref_name": "v4", "ref_type": "int"}, {"name": "v6", "type": "int", "pred_name": "ch_0", "ref_name": "value_length", "ref_type": "int"}, {"name": "v7", "type": "int", "pred_name": "__unk__", "ref_name": "name_length", "ref_type": "int"}, {"name": "v8", "type": "int", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v9", "type": "int", "pred_name": "__unk__", "ref_name": "exit_flag", "ref_type": "int"}, {"name": "v10", "type": "int", "pred_name": "__unk__", "ref_name": "offset", "ref_type": "int"}, {"name": "v11", "type": "int", "pred_name": "__unk__", "ref_name": "offset_value_start", "ref_type": "int"}, {"name": "v12", "type": "int", "pred_name": "__unk__", "ref_name": "offset_name_end", "ref_type": "int"}, {"name": "v13", "type": "int", "pred_name": "__unk__", "ref_name": "offset_name_start", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "euiko", "repo_name": "platchamer", "path": "euiko/platchamer/647c8fbb6ad7c850c819206436274bef4abb7e3d33f911118a705ab13a4b014a", "path_in_repo": "euiko/platchamer/3rdparty/bgfx/3rdparty/glsl-optimizer/src/glsl/ir_clone.o", "objdump": "", "code_s": "void __fastcall ir_typedecl_statement ~ir_typedecl_statement(\n    ir_typedecl_statement *this) {\n  ;\n}", "code_t": "void __fastcall ir_typedecl_statement ~ir_typedecl_statement(\n    ir_typedecl_statement *<span class=\"supfact\">this</span>) {\n  ;\n}", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "ir_typedecl_statement *"}], "body_in_train": false}, {"repo_owner": "themathpath", "repo_name": "lasvm", "path": "themathpath/lasvm/080e3565875ec6926977cb57d15b8f0ce76c02975f1b1f288e72f96b8553347c", "path_in_repo": "themathpath/lasvm//la_svm", "objdump": "0000000000406bd0 <_Z30lasvm_vectorproblem_lin_kerneliiPv>:\n  406bd0:\t41 54                \tpush   %r12\n  406bd2:\t49 89 d4             \tmov    %rdx,%r12\n  406bd5:\t55                   \tpush   %rbp\n  406bd6:\t48 63 ee             \tmovslq %esi,%rbp\n  406bd9:\t53                   \tpush   %rbx\n  406bda:\t48 63 df             \tmovslq %edi,%rbx\n  406bdd:\t85 db                \ttest   %ebx,%ebx\n  406bdf:\t78 37                \tjs     406c18 <_Z30lasvm_vectorproblem_lin_kerneliiPv+0x48>\n  406be1:\t39 1a                \tcmp    %ebx,(%rdx)\n  406be3:\t7e 33                \tjle    406c18 <_Z30lasvm_vectorproblem_lin_kerneliiPv+0x48>\n  406be5:\t85 ed                \ttest   %ebp,%ebp\n  406be7:\t78 06                \tjs     406bef <_Z30lasvm_vectorproblem_lin_kerneliiPv+0x1f>\n  406be9:\t41 39 2c 24          \tcmp    %ebp,(%r12)\n  406bed:\t7f 0f                \tjg     406bfe <_Z30lasvm_vectorproblem_lin_kerneliiPv+0x2e>\n  406bef:\tbe 33 00 00 00       \tmov    $0x33,%esi\n  406bf4:\tbf 9e bb 40 00       \tmov    $0x40bb9e,%edi\n  406bf9:\te8 b2 ff ff ff       \tcallq  406bb0 <_Z16lasvm_assertfailPKci>\n  406bfe:\t49 8b 44 24 08       \tmov    0x8(%r12),%rax\n  406c03:\t48 8b 34 e8          \tmov    (%rax,%rbp,8),%rsi\n  406c07:\t48 8b 3c d8          \tmov    (%rax,%rbx,8),%rdi\n  406c0b:\t5b                   \tpop    %rbx\n  406c0c:\t5d                   \tpop    %rbp\n  406c0d:\t41 5c                \tpop    %r12\n  406c0f:\te9 2c f5 ff ff       \tjmpq   406140 <_Z24lasvm_vector_dot_productP14lasvm_vector_sS0_>\n  406c14:\t0f 1f 40 00          \tnopl   0x0(%rax)\n  406c18:\tbe 32 00 00 00       \tmov    $0x32,%esi\n  406c1d:\tbf 9e bb 40 00       \tmov    $0x40bb9e,%edi\n  406c22:\te8 89 ff ff ff       \tcallq  406bb0 <_Z16lasvm_assertfailPKci>\n  406c27:\teb bc                \tjmp    406be5 <_Z30lasvm_vectorproblem_lin_kerneliiPv+0x15>\n  406c29:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)", "code_s": "double __fastcall lasvm_vectorproblem_lin_kernel(\n    int a1, int a2, void *a3, __int64 a4, __int64 a5, __int64 a6, __m128 a7,\n    __m128 a8, __m128 a9, __m128 a10, __m128 a11, __m128 a12, __m128 a13,\n    __m128 a14) {\n  if (a1 < Number || *(_DWORD *)a3 <= a1)\n    lasvm_assertfail(String, Number, a7, a8, a9, a10, a11, a12, a13, a14,\n                     (__int64)a3, a4, a5, a6);\n  if (a2 < Number || *(_DWORD *)a3 <= a2)\n    lasvm_assertfail(String, Number, a7, a8, a9, a10, a11, a12, a13, a14,\n                     (__int64)a3, a4, a5, a6);\n  return lasvm_vector_dot_product(\n      *(int **)(*((_QWORD *)a3 + Number) + Number L * a1),\n      *(int **)(*((_QWORD *)a3 + Number) + Number L * a2));\n}", "code_t": "double __fastcall lasvm_vectorproblem_lin_kernel(\n    int <span class=\"supfact\">a1</span>, int <span class=\"supfact\">a2</span>, void *<span class=\"supfact\">a3</span>,\n    __int64 <span class=\"supfact\">a4</span>, __int64 <span class=\"supfact\">a5</span>,\n    __int64 <span class=\"supfact\">a6</span>, __m128 <span class=\"supfact\">a7</span>,\n    __m128 <span class=\"supfact\">a8</span>, __m128 <span class=\"supfact\">a9</span>,\n    __m128 <span class=\"supfact\">a10</span>, __m128 <span class=\"supfact\">a11</span>,\n    __m128 <span class=\"supfact\">a12</span>, __m128 <span class=\"supfact\">a13</span>,\n    __m128 <span class=\"supfact\">a14</span>) {\n  if (<span class=\"supfact\">a1</span> < Number ||\n      *(_DWORD *)<span class=\"supfact\">a3</span> <= <span class=\"supfact\">a1</span>)\n    lasvm_assertfail(String, Number, <span class=\"supfact\">a7</span>, <span class=\"supfact\">a8</span>,\n                     <span class=\"supfact\">a9</span>, <span class=\"supfact\">a10</span>,\n                     <span class=\"supfact\">a11</span>, <span class=\"supfact\">a12</span>,\n                     <span class=\"supfact\">a13</span>, <span class=\"supfact\">a14</span>,\n                     (__int64)<span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>,\n                     <span class=\"supfact\">a5</span>, <span class=\"supfact\">a6</span>);\n  if (<span class=\"supfact\">a2</span> < Number ||\n      *(_DWORD *)<span class=\"supfact\">a3</span> <= <span class=\"supfact\">a2</span>)\n    lasvm_assertfail(String, Number, <span class=\"supfact\">a7</span>, <span class=\"supfact\">a8</span>,\n                     <span class=\"supfact\">a9</span>, <span class=\"supfact\">a10</span>,\n                     <span class=\"supfact\">a11</span>, <span class=\"supfact\">a12</span>,\n                     <span class=\"supfact\">a13</span>, <span class=\"supfact\">a14</span>,\n                     (__int64)<span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>,\n                     <span class=\"supfact\">a5</span>, <span class=\"supfact\">a6</span>);\n  return lasvm_vector_dot_product(\n      *(int **)(*((_QWORD *)<span class=\"supfact\">a3</span> + Number) +\n                Number L * <span class=\"supfact\">a1</span>),\n      *(int **)(*((_QWORD *)<span class=\"supfact\">a3</span> + Number) +\n                Number L * <span class=\"supfact\">a2</span>));\n}", "var": [{"name": "a1", "type": "int", "pred_name": "index", "ref_name": "a1", "ref_type": "int"}, {"name": "a2", "type": "int", "pred_name": "count", "ref_name": "a2", "ref_type": "int"}, {"name": "a3", "type": "double *", "pred_name": "a", "ref_name": "a3", "ref_type": "void *"}, {"name": "a4", "type": "double *", "pred_name": "b", "ref_name": "a4", "ref_type": "__int64"}, {"name": "a5", "type": "double *", "pred_name": "c", "ref_name": "a5", "ref_type": "__int64"}, {"name": "a6", "type": "double *", "pred_name": "d", "ref_name": "a6", "ref_type": "__int64"}, {"name": "a7", "type": "void", "pred_name": "v6", "ref_name": "a7", "ref_type": "void"}, {"name": "a8", "type": "void", "pred_name": "v7", "ref_name": "a8", "ref_type": "void"}, {"name": "a9", "type": "void", "pred_name": "v8", "ref_name": "a9", "ref_type": "void"}, {"name": "a10", "type": "void", "pred_name": "v9", "ref_name": "a10", "ref_type": "void"}, {"name": "a11", "type": "void", "pred_name": "v10", "ref_name": "a11", "ref_type": "void"}, {"name": "a12", "type": "void", "pred_name": "v11", "ref_name": "a12", "ref_type": "void"}, {"name": "a13", "type": "void", "pred_name": "v12", "ref_name": "a13", "ref_type": "void"}, {"name": "a14", "type": "void", "pred_name": "v13", "ref_name": "a14", "ref_type": "void"}], "body_in_train": false}, {"repo_owner": "nmacs", "repo_name": "print3d", "path": "nmacs/print3d/142ee0ab03aaea08c1cce3b49aba610648f7bc1ddb53dfc348f2f9408898fa3c", "path_in_repo": "nmacs/print3d//toolchain/openocd-0.7.0/jimtcl/jimsh", "objdump": "000000000040f690 <DupDictSubstInternalRep>:\n  40f690:\t55                   \tpush   %rbp\n  40f691:\t48 89 e5             \tmov    %rsp,%rbp\n  40f694:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  40f698:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  40f69c:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  40f6a0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40f6a4:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n  40f6a8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40f6ac:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n  40f6b0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40f6b4:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n  40f6b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40f6bc:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n  40f6c0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40f6c4:\t48 c7 40 08 20 ea 43 \tmovq   $0x43ea20,0x8(%rax)\n  40f6cb:\t00 \n  40f6cc:\t90                   \tnop\n  40f6cd:\t5d                   \tpop    %rbp\n  40f6ce:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall DupDictSubstInternalRep(__int64 a1, __int64 a2, _QWORD *a3) {\n  _QWORD *result;\n  a3[Number] = *(_QWORD *)(a2 + Number);\n  a3[Number] = *(_QWORD *)(a2 + Number);\n  result = a3;\n  a3[Number] = &dictSubstObjType;\n  return result;\n}", "code_t": "void __cdecl DupDictSubstInternalRep(Jim_Interp_0 *<span class=\"supfact\">interp</span>,\n                                     Jim_Obj_0 *<span class=\"supfact\">srcPtr</span>,\n                                     Jim_Obj_0 *<span class=\"supfact\">dupPtr</span>) {\n  *(_OWORD *)&<span class=\"supfact\">dupPtr</span>->internalRep.wideValue =\n      *(_OWORD *)&<span class=\"supfact\">srcPtr</span>->internalRep.wideValue;\n  <span class=\"supfact\">dupPtr</span>->typePtr = &dictSubstObjType;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "this", "ref_name": "interp", "ref_type": "Jim_Interp_0 *"}, {"name": "a2", "type": "__unk__", "pred_name": "__unk__", "ref_name": "srcPtr", "ref_type": "Jim_Obj_0 *"}, {"name": "a3", "type": "__unk__", "pred_name": "__unk__", "ref_name": "dupPtr", "ref_type": "Jim_Obj_0 *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "bpintea", "repo_name": "elasticsearch-sql-odbc", "path": "bpintea/elasticsearch-sql-odbc/87177b47b31df0d277c608f1921f2be61b69a4a8e3f9fcb3648eed1c4be239ef", "path_in_repo": "bpintea/elasticsearch-sql-odbc/libs/tinycbor/tools/cborpretty.o", "objdump": "00000000000000e6 <cbor_value_get_simple_type>:\n      e6:\t55                   \tpush   %rbp\n      e7:\t48 89 e5             \tmov    %rsp,%rbp\n      ea:\t48 83 ec 10          \tsub    $0x10,%rsp\n      ee:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n      f2:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n      f6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      fa:\t48 89 c7             \tmov    %rax,%rdi\n      fd:\te8 cd ff ff ff       \tcallq  cf <cbor_value_is_simple_type>\n     102:\t84 c0                \ttest   %al,%al\n     104:\t75 19                \tjne    11f <cbor_value_get_simple_type+0x39>\n     106:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     10b:\tba 56 01 00 00       \tmov    $0x156,%edx\n     110:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     115:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     11a:\te8 00 00 00 00       \tcallq  11f <cbor_value_get_simple_type+0x39>\n     11f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     123:\t0f b7 40 14          \tmovzwl 0x14(%rax),%eax\n     127:\t89 c2                \tmov    %eax,%edx\n     129:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     12d:\t88 10                \tmov    %dl,(%rax)\n     12f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     134:\tc9                   \tleaveq \n     135:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cbor_value_get_simple_type(__int64 a1, _BYTE *a2) {\n  if (!cbor_value_is_simple_type(a1))\n    _assert_fail(String, String, Number, String);\n  *a2 = *(_WORD *)(a1 + Number);\n  return Number L;\n}", "code_t": "CborError_0 __cdecl cbor_value_get_simple_type(\n    const CborValue_0 *<span class=\"supfact\">value</span>, uint8_t *<span class=\"supfact\">result</span>) {\n  if (!cbor_value_is_simple_type(<span class=\"supfact\">value</span>))\n    _assert_fail(String, String, Number, String);\n  *<span class=\"supfact\">result</span> = <span class=\"supfact\">value</span>->extra;\n  return Number;\n}", "var": [{"name": "a1", "type": "const CborValue_0 *", "pred_name": "value", "ref_name": "value", "ref_type": "const CborValue_0 *"}, {"name": "a2", "type": "size_t *", "pred_name": "len", "ref_name": "result", "ref_type": "uint8_t *"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2af4e000b03dbd36bf5f5b1e94bd385a31b5c6a785c70e9770f2544cd62ecd92", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/m68000/m68kops.o", "objdump": "000000000000115c <_ZL13OPER_AY_IX_32P15_m68ki_cpu_core>:\n    115c:\t55                   \tpush   %rbp\n    115d:\t48 89 e5             \tmov    %rsp,%rbp\n    1160:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1164:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1168:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    116c:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n    1170:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1174:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n    117a:\t89 c0                \tmov    %eax,%eax\n    117c:\t83 e0 07             \tand    $0x7,%eax\n    117f:\t48 83 c0 08          \tadd    $0x8,%rax\n    1183:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1187:\t48 01 d0             \tadd    %rdx,%rax\n    118a:\t8b 10                \tmov    (%rax),%edx\n    118c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1190:\t89 d6                \tmov    %edx,%esi\n    1192:\t48 89 c7             \tmov    %rax,%rdi\n    1195:\te8 c1 f7 ff ff       \tcallq  95b <_ZL15m68ki_get_ea_ixP15_m68ki_cpu_corej>\n    119a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    119d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11a1:\t8b 80 1c 01 00 00    \tmov    0x11c(%rax),%eax\n    11a7:\t83 c8 01             \tor     $0x1,%eax\n    11aa:\t89 c2                \tmov    %eax,%edx\n    11ac:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n    11af:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11b3:\t89 ce                \tmov    %ecx,%esi\n    11b5:\t48 89 c7             \tmov    %rax,%rdi\n    11b8:\te8 0e f5 ff ff       \tcallq  6cb <_ZL16m68ki_read_32_fcP15_m68ki_cpu_corejj>\n    11bd:\tc9                   \tleaveq \n    11be:\tc3                   \tretq   ", "code_s": "__int64 __fastcall OPER_AY_IX_32(_DWORD *a1) {\n  unsigned int v2;\n  v2 = m68ki_get_ea_ix(a1, a1[(a1[Number] & Number) + Number]);\n  return m68ki_read_32_fc((__int64)a1, v2, a1[Number] | Number);\n}", "code_t": "UINT32 __cdecl OPER_AY_IX_32(m68ki_cpu_core *<span class=\"supfact\">m68k</span>) {\n  UINT32 v1;\n  v1 = m68ki_get_ea_ix(\n      <span class=\"supfact\">m68k</span>,\n      <span class=\"supfact\">m68k</span>->dar[(<span class=\"supfact\">m68k</span>->ir & Number) + Number]);\n  return m68ki_read_32_fc(<span class=\"supfact\">m68k</span>, v1,\n                          <span class=\"supfact\">m68k</span>->s_flag | Number);\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "opaque", "ref_name": "m68k", "ref_type": "m68ki_cpu_core *"}, {"name": "v2", "type": "unsigned int", "pred_name": "ea", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "sbisbee", "repo_name": "openssl-lucidbackport", "path": "sbisbee/openssl-lucidbackport/e9ace304fef38892e60d496898ddc333dc55e164634c96424528a3ce93d762b2", "path_in_repo": "sbisbee/openssl-lucidbackport/openssl-1.0.0e/crypto/asn1/a_utf8.o", "objdump": "0000000000000000 <UTF8_getc>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   8:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n   b:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n   f:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n  13:\t7f 0a                \tjg     1f <UTF8_getc+0x1f>\n  15:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  1a:\te9 cd 05 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n  1f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  23:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  27:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  2b:\t0f b6 00             \tmovzbl (%rax),%eax\n  2e:\t84 c0                \ttest   %al,%al\n  30:\t78 25                \tjs     57 <UTF8_getc+0x57>\n  32:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  36:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  3a:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  3e:\t0f b6 00             \tmovzbl (%rax),%eax\n  41:\t0f b6 c0             \tmovzbl %al,%eax\n  44:\t83 e0 7f             \tand    $0x7f,%eax\n  47:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4b:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n  52:\te9 87 05 00 00       \tjmpq   5de <UTF8_getc+0x5de>\n  57:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  5b:\t0f b6 00             \tmovzbl (%rax),%eax\n  5e:\t0f b6 c0             \tmovzbl %al,%eax\n  61:\t25 e0 00 00 00       \tand    $0xe0,%eax\n  66:\t3d c0 00 00 00       \tcmp    $0xc0,%eax\n  6b:\t0f 85 8c 00 00 00    \tjne    fd <UTF8_getc+0xfd>\n  71:\t83 7d d4 01          \tcmpl   $0x1,-0x2c(%rbp)\n  75:\t7f 0a                \tjg     81 <UTF8_getc+0x81>\n  77:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  7c:\te9 6b 05 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n  81:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  85:\t48 83 c0 01          \tadd    $0x1,%rax\n  89:\t0f b6 00             \tmovzbl (%rax),%eax\n  8c:\t0f b6 c0             \tmovzbl %al,%eax\n  8f:\t25 c0 00 00 00       \tand    $0xc0,%eax\n  94:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n  99:\t74 0a                \tje     a5 <UTF8_getc+0xa5>\n  9b:\tb8 fd ff ff ff       \tmov    $0xfffffffd,%eax\n  a0:\te9 47 05 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n  a5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  a9:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  ad:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  b1:\t0f b6 00             \tmovzbl (%rax),%eax\n  b4:\t0f b6 c0             \tmovzbl %al,%eax\n  b7:\tc1 e0 06             \tshl    $0x6,%eax\n  ba:\t48 98                \tcltq   \n  bc:\t25 c0 07 00 00       \tand    $0x7c0,%eax\n  c1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  c5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  c9:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  cd:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  d1:\t0f b6 00             \tmovzbl (%rax),%eax\n  d4:\t0f b6 c0             \tmovzbl %al,%eax\n  d7:\t83 e0 3f             \tand    $0x3f,%eax\n  da:\t48 98                \tcltq   \n  dc:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n  e0:\t48 83 7d f8 7f       \tcmpq   $0x7f,-0x8(%rbp)\n  e5:\t77 0a                \tja     f1 <UTF8_getc+0xf1>\n  e7:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n  ec:\te9 fb 04 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n  f1:\tc7 45 f4 02 00 00 00 \tmovl   $0x2,-0xc(%rbp)\n  f8:\te9 e1 04 00 00       \tjmpq   5de <UTF8_getc+0x5de>\n  fd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 101:\t0f b6 00             \tmovzbl (%rax),%eax\n 104:\t0f b6 c0             \tmovzbl %al,%eax\n 107:\t25 f0 00 00 00       \tand    $0xf0,%eax\n 10c:\t3d e0 00 00 00       \tcmp    $0xe0,%eax\n 111:\t0f 85 c9 00 00 00    \tjne    1e0 <UTF8_getc+0x1e0>\n 117:\t83 7d d4 02          \tcmpl   $0x2,-0x2c(%rbp)\n 11b:\t7f 0a                \tjg     127 <UTF8_getc+0x127>\n 11d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 122:\te9 c5 04 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 127:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 12b:\t48 83 c0 01          \tadd    $0x1,%rax\n 12f:\t0f b6 00             \tmovzbl (%rax),%eax\n 132:\t0f b6 c0             \tmovzbl %al,%eax\n 135:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 13a:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 13f:\t75 1a                \tjne    15b <UTF8_getc+0x15b>\n 141:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 145:\t48 83 c0 02          \tadd    $0x2,%rax\n 149:\t0f b6 00             \tmovzbl (%rax),%eax\n 14c:\t0f b6 c0             \tmovzbl %al,%eax\n 14f:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 154:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 159:\t74 0a                \tje     165 <UTF8_getc+0x165>\n 15b:\tb8 fd ff ff ff       \tmov    $0xfffffffd,%eax\n 160:\te9 87 04 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 165:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 169:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 16d:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 171:\t0f b6 00             \tmovzbl (%rax),%eax\n 174:\t0f b6 c0             \tmovzbl %al,%eax\n 177:\tc1 e0 0c             \tshl    $0xc,%eax\n 17a:\t48 98                \tcltq   \n 17c:\t25 00 f0 00 00       \tand    $0xf000,%eax\n 181:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 185:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 189:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 18d:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 191:\t0f b6 00             \tmovzbl (%rax),%eax\n 194:\t0f b6 c0             \tmovzbl %al,%eax\n 197:\tc1 e0 06             \tshl    $0x6,%eax\n 19a:\t25 c0 0f 00 00       \tand    $0xfc0,%eax\n 19f:\t48 98                \tcltq   \n 1a1:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 1a5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1a9:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 1ad:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 1b1:\t0f b6 00             \tmovzbl (%rax),%eax\n 1b4:\t0f b6 c0             \tmovzbl %al,%eax\n 1b7:\t83 e0 3f             \tand    $0x3f,%eax\n 1ba:\t48 98                \tcltq   \n 1bc:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 1c0:\t48 81 7d f8 ff 07 00 \tcmpq   $0x7ff,-0x8(%rbp)\n 1c7:\t00 \n 1c8:\t77 0a                \tja     1d4 <UTF8_getc+0x1d4>\n 1ca:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n 1cf:\te9 18 04 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 1d4:\tc7 45 f4 03 00 00 00 \tmovl   $0x3,-0xc(%rbp)\n 1db:\te9 fe 03 00 00       \tjmpq   5de <UTF8_getc+0x5de>\n 1e0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1e4:\t0f b6 00             \tmovzbl (%rax),%eax\n 1e7:\t0f b6 c0             \tmovzbl %al,%eax\n 1ea:\t25 f8 00 00 00       \tand    $0xf8,%eax\n 1ef:\t3d f0 00 00 00       \tcmp    $0xf0,%eax\n 1f4:\t0f 85 02 01 00 00    \tjne    2fc <UTF8_getc+0x2fc>\n 1fa:\t83 7d d4 03          \tcmpl   $0x3,-0x2c(%rbp)\n 1fe:\t7f 0a                \tjg     20a <UTF8_getc+0x20a>\n 200:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 205:\te9 e2 03 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 20a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 20e:\t48 83 c0 01          \tadd    $0x1,%rax\n 212:\t0f b6 00             \tmovzbl (%rax),%eax\n 215:\t0f b6 c0             \tmovzbl %al,%eax\n 218:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 21d:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 222:\t75 34                \tjne    258 <UTF8_getc+0x258>\n 224:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 228:\t48 83 c0 02          \tadd    $0x2,%rax\n 22c:\t0f b6 00             \tmovzbl (%rax),%eax\n 22f:\t0f b6 c0             \tmovzbl %al,%eax\n 232:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 237:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 23c:\t75 1a                \tjne    258 <UTF8_getc+0x258>\n 23e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 242:\t48 83 c0 03          \tadd    $0x3,%rax\n 246:\t0f b6 00             \tmovzbl (%rax),%eax\n 249:\t0f b6 c0             \tmovzbl %al,%eax\n 24c:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 251:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 256:\t74 0a                \tje     262 <UTF8_getc+0x262>\n 258:\tb8 fd ff ff ff       \tmov    $0xfffffffd,%eax\n 25d:\te9 8a 03 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 262:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 266:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 26a:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 26e:\t0f b6 00             \tmovzbl (%rax),%eax\n 271:\t0f b6 c0             \tmovzbl %al,%eax\n 274:\t48 c1 e0 12          \tshl    $0x12,%rax\n 278:\t25 00 00 1c 00       \tand    $0x1c0000,%eax\n 27d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 281:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 285:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 289:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 28d:\t0f b6 00             \tmovzbl (%rax),%eax\n 290:\t0f b6 c0             \tmovzbl %al,%eax\n 293:\tc1 e0 0c             \tshl    $0xc,%eax\n 296:\t25 00 f0 03 00       \tand    $0x3f000,%eax\n 29b:\t48 98                \tcltq   \n 29d:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 2a1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2a5:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 2a9:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 2ad:\t0f b6 00             \tmovzbl (%rax),%eax\n 2b0:\t0f b6 c0             \tmovzbl %al,%eax\n 2b3:\tc1 e0 06             \tshl    $0x6,%eax\n 2b6:\t25 c0 0f 00 00       \tand    $0xfc0,%eax\n 2bb:\t48 98                \tcltq   \n 2bd:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 2c1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2c5:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 2c9:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 2cd:\t0f b6 00             \tmovzbl (%rax),%eax\n 2d0:\t0f b6 c0             \tmovzbl %al,%eax\n 2d3:\t83 e0 3f             \tand    $0x3f,%eax\n 2d6:\t48 98                \tcltq   \n 2d8:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 2dc:\t48 81 7d f8 ff ff 00 \tcmpq   $0xffff,-0x8(%rbp)\n 2e3:\t00 \n 2e4:\t77 0a                \tja     2f0 <UTF8_getc+0x2f0>\n 2e6:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n 2eb:\te9 fc 02 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 2f0:\tc7 45 f4 04 00 00 00 \tmovl   $0x4,-0xc(%rbp)\n 2f7:\te9 e2 02 00 00       \tjmpq   5de <UTF8_getc+0x5de>\n 2fc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 300:\t0f b6 00             \tmovzbl (%rax),%eax\n 303:\t0f b6 c0             \tmovzbl %al,%eax\n 306:\t25 fc 00 00 00       \tand    $0xfc,%eax\n 30b:\t3d f8 00 00 00       \tcmp    $0xf8,%eax\n 310:\t0f 85 3a 01 00 00    \tjne    450 <UTF8_getc+0x450>\n 316:\t83 7d d4 04          \tcmpl   $0x4,-0x2c(%rbp)\n 31a:\t7f 0a                \tjg     326 <UTF8_getc+0x326>\n 31c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 321:\te9 c6 02 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 326:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 32a:\t48 83 c0 01          \tadd    $0x1,%rax\n 32e:\t0f b6 00             \tmovzbl (%rax),%eax\n 331:\t0f b6 c0             \tmovzbl %al,%eax\n 334:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 339:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 33e:\t75 4e                \tjne    38e <UTF8_getc+0x38e>\n 340:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 344:\t48 83 c0 02          \tadd    $0x2,%rax\n 348:\t0f b6 00             \tmovzbl (%rax),%eax\n 34b:\t0f b6 c0             \tmovzbl %al,%eax\n 34e:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 353:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 358:\t75 34                \tjne    38e <UTF8_getc+0x38e>\n 35a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 35e:\t48 83 c0 03          \tadd    $0x3,%rax\n 362:\t0f b6 00             \tmovzbl (%rax),%eax\n 365:\t0f b6 c0             \tmovzbl %al,%eax\n 368:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 36d:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 372:\t75 1a                \tjne    38e <UTF8_getc+0x38e>\n 374:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 378:\t48 83 c0 04          \tadd    $0x4,%rax\n 37c:\t0f b6 00             \tmovzbl (%rax),%eax\n 37f:\t0f b6 c0             \tmovzbl %al,%eax\n 382:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 387:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 38c:\t74 0a                \tje     398 <UTF8_getc+0x398>\n 38e:\tb8 fd ff ff ff       \tmov    $0xfffffffd,%eax\n 393:\te9 54 02 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 398:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 39c:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 3a0:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 3a4:\t0f b6 00             \tmovzbl (%rax),%eax\n 3a7:\t0f b6 c0             \tmovzbl %al,%eax\n 3aa:\t48 c1 e0 18          \tshl    $0x18,%rax\n 3ae:\t25 00 00 00 03       \tand    $0x3000000,%eax\n 3b3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 3b7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3bb:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 3bf:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 3c3:\t0f b6 00             \tmovzbl (%rax),%eax\n 3c6:\t0f b6 c0             \tmovzbl %al,%eax\n 3c9:\t48 c1 e0 12          \tshl    $0x12,%rax\n 3cd:\t25 00 00 fc 00       \tand    $0xfc0000,%eax\n 3d2:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 3d6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3da:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 3de:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 3e2:\t0f b6 00             \tmovzbl (%rax),%eax\n 3e5:\t0f b6 c0             \tmovzbl %al,%eax\n 3e8:\t48 c1 e0 0c          \tshl    $0xc,%rax\n 3ec:\t25 00 f0 03 00       \tand    $0x3f000,%eax\n 3f1:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 3f5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3f9:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 3fd:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 401:\t0f b6 00             \tmovzbl (%rax),%eax\n 404:\t0f b6 c0             \tmovzbl %al,%eax\n 407:\tc1 e0 06             \tshl    $0x6,%eax\n 40a:\t25 c0 0f 00 00       \tand    $0xfc0,%eax\n 40f:\t48 98                \tcltq   \n 411:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 415:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 419:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 41d:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 421:\t0f b6 00             \tmovzbl (%rax),%eax\n 424:\t0f b6 c0             \tmovzbl %al,%eax\n 427:\t83 e0 3f             \tand    $0x3f,%eax\n 42a:\t48 98                \tcltq   \n 42c:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 430:\t48 81 7d f8 ff ff 1f \tcmpq   $0x1fffff,-0x8(%rbp)\n 437:\t00 \n 438:\t77 0a                \tja     444 <UTF8_getc+0x444>\n 43a:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n 43f:\te9 a8 01 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 444:\tc7 45 f4 05 00 00 00 \tmovl   $0x5,-0xc(%rbp)\n 44b:\te9 8e 01 00 00       \tjmpq   5de <UTF8_getc+0x5de>\n 450:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 454:\t0f b6 00             \tmovzbl (%rax),%eax\n 457:\t0f b6 c0             \tmovzbl %al,%eax\n 45a:\t25 fe 00 00 00       \tand    $0xfe,%eax\n 45f:\t3d fc 00 00 00       \tcmp    $0xfc,%eax\n 464:\t0f 85 6d 01 00 00    \tjne    5d7 <UTF8_getc+0x5d7>\n 46a:\t83 7d d4 05          \tcmpl   $0x5,-0x2c(%rbp)\n 46e:\t7f 0a                \tjg     47a <UTF8_getc+0x47a>\n 470:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 475:\te9 72 01 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 47a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 47e:\t48 83 c0 01          \tadd    $0x1,%rax\n 482:\t0f b6 00             \tmovzbl (%rax),%eax\n 485:\t0f b6 c0             \tmovzbl %al,%eax\n 488:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 48d:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 492:\t75 68                \tjne    4fc <UTF8_getc+0x4fc>\n 494:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 498:\t48 83 c0 02          \tadd    $0x2,%rax\n 49c:\t0f b6 00             \tmovzbl (%rax),%eax\n 49f:\t0f b6 c0             \tmovzbl %al,%eax\n 4a2:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 4a7:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 4ac:\t75 4e                \tjne    4fc <UTF8_getc+0x4fc>\n 4ae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4b2:\t48 83 c0 03          \tadd    $0x3,%rax\n 4b6:\t0f b6 00             \tmovzbl (%rax),%eax\n 4b9:\t0f b6 c0             \tmovzbl %al,%eax\n 4bc:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 4c1:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 4c6:\t75 34                \tjne    4fc <UTF8_getc+0x4fc>\n 4c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4cc:\t48 83 c0 04          \tadd    $0x4,%rax\n 4d0:\t0f b6 00             \tmovzbl (%rax),%eax\n 4d3:\t0f b6 c0             \tmovzbl %al,%eax\n 4d6:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 4db:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 4e0:\t75 1a                \tjne    4fc <UTF8_getc+0x4fc>\n 4e2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 4e6:\t48 83 c0 05          \tadd    $0x5,%rax\n 4ea:\t0f b6 00             \tmovzbl (%rax),%eax\n 4ed:\t0f b6 c0             \tmovzbl %al,%eax\n 4f0:\t25 c0 00 00 00       \tand    $0xc0,%eax\n 4f5:\t3d 80 00 00 00       \tcmp    $0x80,%eax\n 4fa:\t74 0a                \tje     506 <UTF8_getc+0x506>\n 4fc:\tb8 fd ff ff ff       \tmov    $0xfffffffd,%eax\n 501:\te9 e6 00 00 00       \tjmpq   5ec <UTF8_getc+0x5ec>\n 506:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 50a:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 50e:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 512:\t0f b6 00             \tmovzbl (%rax),%eax\n 515:\t0f b6 c0             \tmovzbl %al,%eax\n 518:\t48 c1 e0 1e          \tshl    $0x1e,%rax\n 51c:\t25 00 00 00 40       \tand    $0x40000000,%eax\n 521:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 525:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 529:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 52d:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 531:\t0f b6 00             \tmovzbl (%rax),%eax\n 534:\t0f b6 c0             \tmovzbl %al,%eax\n 537:\t48 c1 e0 18          \tshl    $0x18,%rax\n 53b:\t25 00 00 00 3f       \tand    $0x3f000000,%eax\n 540:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 544:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 548:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 54c:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 550:\t0f b6 00             \tmovzbl (%rax),%eax\n 553:\t0f b6 c0             \tmovzbl %al,%eax\n 556:\t48 c1 e0 12          \tshl    $0x12,%rax\n 55a:\t25 00 00 fc 00       \tand    $0xfc0000,%eax\n 55f:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 563:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 567:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 56b:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 56f:\t0f b6 00             \tmovzbl (%rax),%eax\n 572:\t0f b6 c0             \tmovzbl %al,%eax\n 575:\t48 c1 e0 0c          \tshl    $0xc,%rax\n 579:\t25 00 f0 03 00       \tand    $0x3f000,%eax\n 57e:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 582:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 586:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 58a:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 58e:\t0f b6 00             \tmovzbl (%rax),%eax\n 591:\t0f b6 c0             \tmovzbl %al,%eax\n 594:\tc1 e0 06             \tshl    $0x6,%eax\n 597:\t25 c0 0f 00 00       \tand    $0xfc0,%eax\n 59c:\t48 98                \tcltq   \n 59e:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 5a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 5a6:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 5aa:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 5ae:\t0f b6 00             \tmovzbl (%rax),%eax\n 5b1:\t0f b6 c0             \tmovzbl %al,%eax\n 5b4:\t83 e0 3f             \tand    $0x3f,%eax\n 5b7:\t48 98                \tcltq   \n 5b9:\t48 09 45 f8          \tor     %rax,-0x8(%rbp)\n 5bd:\t48 81 7d f8 ff ff ff \tcmpq   $0x3ffffff,-0x8(%rbp)\n 5c4:\t03 \n 5c5:\t77 07                \tja     5ce <UTF8_getc+0x5ce>\n 5c7:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n 5cc:\teb 1e                \tjmp    5ec <UTF8_getc+0x5ec>\n 5ce:\tc7 45 f4 06 00 00 00 \tmovl   $0x6,-0xc(%rbp)\n 5d5:\teb 07                \tjmp    5de <UTF8_getc+0x5de>\n 5d7:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n 5dc:\teb 0e                \tjmp    5ec <UTF8_getc+0x5ec>\n 5de:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 5e2:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 5e6:\t48 89 10             \tmov    %rdx,(%rax)\n 5e9:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 5ec:\t5d                   \tpop    %rbp\n 5ed:\tc3                   \tretq   ", "code_s": "__int64 __fastcall UTF8_getc(char *a1, int a2, unsigned __int64 *a3) {\n  unsigned int v4;\n  unsigned __int64 v5;\n  if (a2 <= Number)\n    return Number L;\n  if (*a1 < Number) {\n    if ((*a1 & Number) == Number) {\n      if (a2 <= Number)\n        return Number;\n      if ((a1[Number] & Number) != Number)\n        return Number L;\n      v5 = a1[Number] & Number |\n           (unsigned __int64)(((unsigned __int8)*a1 << Number) & Number);\n      if (v5 <= Number)\n        return Number L;\n      v4 = Number;\n    } else if ((*a1 & Number) == Number) {\n      if (a2 <= Number)\n        return Number;\n      if ((a1[Number] & Number) != Number || (a1[Number] & Number) != Number)\n        return Number L;\n      v5 = a1[Number] & Number |\n           ((unsigned __int8)a1[Number] << Number) & Number |\n           (unsigned __int64)(unsigned __int16)((unsigned __int8)*a1 << Number);\n      if (v5 <= Number)\n        return Number L;\n      v4 = Number;\n    } else if ((*a1 & Number) == Number) {\n      if (a2 <= Number)\n        return Number;\n      if ((a1[Number] & Number) != Number || (a1[Number] & Number) != Number ||\n          (a1[Number] & Number) != Number)\n        return Number L;\n      v5 = a1[Number] & Number |\n           ((unsigned __int8)a1[Number] << Number) & Number |\n           ((unsigned __int8)a1[Number] << Number) & Number |\n           (unsigned __int64)(((unsigned __int8)*a1 << Number) & Number);\n      if (v5 <= Number)\n        return Number L;\n      v4 = Number;\n    } else if ((*a1 & Number) == Number) {\n      if (a2 <= Number)\n        return Number;\n      if ((a1[Number] & Number) != Number || (a1[Number] & Number) != Number ||\n          (a1[Number] & Number) != Number || (a1[Number] & Number) != Number)\n        return Number L;\n      v5 = a1[Number] & Number |\n           ((unsigned __int8)a1[Number] << Number) & Number |\n           ((unsigned __int8)a1[Number] << Number) & Number |\n           ((unsigned __int8)a1[Number] << Number) & Number |\n           (unsigned __int64)(((unsigned __int8)*a1 << Number) & Number);\n      if (v5 <= Number)\n        return Number L;\n      v4 = Number;\n    } else {\n      if ((*a1 & Number) != Number)\n        return Number L;\n      if (a2 <= Number)\n        return Number;\n      if ((a1[Number] & Number) != Number || (a1[Number] & Number) != Number ||\n          (a1[Number] & Number) != Number || (a1[Number] & Number) != Number ||\n          (a1[Number] & Number) != Number) {\n        return Number L;\n      }\n      v5 = a1[Number] & Number |\n           ((unsigned __int8)a1[Number] << Number) & Number |\n           ((unsigned __int8)a1[Number] << Number) & Number |\n           ((unsigned __int8)a1[Number] << Number) & Number |\n           ((unsigned __int8)a1[Number] << Number) & Number |\n           (unsigned __int64)(((unsigned __int8)*a1 << Number) & Number);\n      if (v5 <= Number)\n        return Number L;\n      v4 = Number;\n    }\n  } else {\n    v5 = *a1 & Number;\n    v4 = Number;\n  }\n  *a3 = v5;\n  return v4;\n}", "code_t": "int __cdecl UTF8_getc(const unsigned __int8 *<span class=\"supfact\">str</span>,\n                      int <span class=\"supfact\">len</span>,\n                      unsigned __int64 *<span class=\"supfact\">val</span>) {\n  int <span class=\"supfact\">ret</span>;\n  unsigned __int64 <span class=\"supfact\">value</span>;\n  if (<span class=\"supfact\">len</span> <= Number)\n    return Number;\n  if (*(char *)<span class=\"supfact\">str</span> < Number) {\n    if ((*<span class=\"supfact\">str</span> & Number) == Number) {\n      if (<span class=\"supfact\">len</span> <= Number)\n        return Number;\n      if ((<span class=\"supfact\">str</span>[Number] & Number) != Number)\n        return Number;\n      <span class=\"supfact\">value</span> =\n          <span class=\"supfact\">str</span>[Number] & Number |\n          (unsigned __int64)((*<span class=\"supfact\">str</span> << Number) & Number);\n      if (<span class=\"supfact\">value</span> <= Number)\n        return Number;\n      <span class=\"supfact\">ret</span> = Number;\n    } else if ((*<span class=\"supfact\">str</span> & Number) == Number) {\n      if (<span class=\"supfact\">len</span> <= Number)\n        return Number;\n      if ((<span class=\"supfact\">str</span>[Number] & Number) != Number ||\n          (<span class=\"supfact\">str</span>[Number] & Number) != Number)\n        return Number;\n      <span class=\"supfact\">value</span> =\n          <span class=\"supfact\">str</span>[Number] & Number |\n          (<span class=\"supfact\">str</span>[Number] << Number) & Number |\n          (unsigned __int64)(unsigned __int16)(*<span class=\"supfact\">str</span> << Number);\n      if (<span class=\"supfact\">value</span> <= Number)\n        return Number;\n      <span class=\"supfact\">ret</span> = Number;\n    } else if ((*<span class=\"supfact\">str</span> & Number) == Number) {\n      if (<span class=\"supfact\">len</span> <= Number)\n        return Number;\n      if ((<span class=\"supfact\">str</span>[Number] & Number) != Number ||\n          (<span class=\"supfact\">str</span>[Number] & Number) != Number ||\n          (<span class=\"supfact\">str</span>[Number] & Number) != Number)\n        return Number;\n      <span class=\"supfact\">value</span> =\n          <span class=\"supfact\">str</span>[Number] & Number |\n          (<span class=\"supfact\">str</span>[Number] << Number) & Number |\n          (<span class=\"supfact\">str</span>[Number] << Number) & Number |\n          (unsigned __int64)((*<span class=\"supfact\">str</span> << Number) & Number);\n      if (<span class=\"supfact\">value</span> <= Number)\n        return Number;\n      <span class=\"supfact\">ret</span> = Number;\n    } else if ((*<span class=\"supfact\">str</span> & Number) == Number) {\n      if (<span class=\"supfact\">len</span> <= Number)\n        return Number;\n      if ((<span class=\"supfact\">str</span>[Number] & Number) != Number ||\n          (<span class=\"supfact\">str</span>[Number] & Number) != Number ||\n          (<span class=\"supfact\">str</span>[Number] & Number) != Number ||\n          (<span class=\"supfact\">str</span>[Number] & Number) != Number)\n        return Number;\n      <span class=\"supfact\">value</span> =\n          <span class=\"supfact\">str</span>[Number] & Number |\n          (<span class=\"supfact\">str</span>[Number] << Number) & Number |\n          (<span class=\"supfact\">str</span>[Number] << Number) & Number |\n          (<span class=\"supfact\">str</span>[Number] << Number) & Number |\n          (unsigned __int64)((*<span class=\"supfact\">str</span> << Number) & Number);\n      if (<span class=\"supfact\">value</span> <= Number)\n        return Number;\n      <span class=\"supfact\">ret</span> = Number;\n    } else {\n      if ((*<span class=\"supfact\">str</span> & Number) != Number)\n        return Number;\n      if (<span class=\"supfact\">len</span> <= Number)\n        return Number;\n      if ((<span class=\"supfact\">str</span>[Number] & Number) != Number ||\n          (<span class=\"supfact\">str</span>[Number] & Number) != Number ||\n          (<span class=\"supfact\">str</span>[Number] & Number) != Number ||\n          (<span class=\"supfact\">str</span>[Number] & Number) != Number ||\n          (<span class=\"supfact\">str</span>[Number] & Number) != Number) {\n        return Number;\n      }\n      <span class=\"supfact\">value</span> =\n          <span class=\"supfact\">str</span>[Number] & Number |\n          (<span class=\"supfact\">str</span>[Number] << Number) & Number |\n          (<span class=\"supfact\">str</span>[Number] << Number) & Number |\n          (<span class=\"supfact\">str</span>[Number] << Number) & Number |\n          (<span class=\"supfact\">str</span>[Number] << Number) & Number |\n          (unsigned __int64)((*<span class=\"supfact\">str</span> << Number) & Number);\n      if (<span class=\"supfact\">value</span> <= Number)\n        return Number;\n      <span class=\"supfact\">ret</span> = Number;\n    }\n  } else {\n    <span class=\"supfact\">value</span> = *<span class=\"supfact\">str</span> & Number;\n    <span class=\"supfact\">ret</span> = Number;\n  }\n  *<span class=\"supfact\">val</span> = <span class=\"supfact\">value</span>;\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "const unsigned __int8 *", "pred_name": "p", "ref_name": "str", "ref_type": "const unsigned __int8 *"}, {"name": "a2", "type": "int", "pred_name": "len", "ref_name": "len", "ref_type": "int"}, {"name": "a3", "type": "int *", "pred_name": "inform", "ref_name": "val", "ref_type": "unsigned __int64 *"}, {"name": "v4", "type": "int", "pred_name": "v4", "ref_name": "ret", "ref_type": "int"}, {"name": "v5", "type": "int", "pred_name": "lena", "ref_name": "value", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "xant", "repo_name": "heyoka-unix", "path": "xant/heyoka-unix/e7cde5aef85ff9ddc596c1e8d18bc693535440feb774ac3f6c26d6caf45d7d27", "path_in_repo": "xant/heyoka-unix/src/codec.o", "objdump": "000000000000092a <codec_base32_decode>:\n 92a:\t55                   \tpush   %rbp\n 92b:\t48 89 e5             \tmov    %rsp,%rbp\n 92e:\t53                   \tpush   %rbx\n 92f:\t48 83 ec 38          \tsub    $0x38,%rsp\n 933:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 937:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n 93b:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n 942:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n 949:\tc6 45 e3 00          \tmovb   $0x0,-0x1d(%rbp)\n 94d:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n 954:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n 95b:\te9 28 01 00 00       \tjmpq   a88 <codec_base32_decode+0x15e>\n 960:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n 967:\teb 46                \tjmp    9af <codec_base32_decode+0x85>\n 969:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n 96c:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 96f:\t01 d0                \tadd    %edx,%eax\n 971:\t89 c2                \tmov    %eax,%edx\n 973:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 977:\t48 01 d0             \tadd    %rdx,%rax\n 97a:\t0f b6 00             \tmovzbl (%rax),%eax\n 97d:\t88 45 e3             \tmov    %al,-0x1d(%rbp)\n 980:\t0f b6 55 e3          \tmovzbl -0x1d(%rbp),%edx\n 984:\tb8 37 00 00 00       \tmov    $0x37,%eax\n 989:\t0f be c0             \tmovsbl %al,%eax\n 98c:\t39 c2                \tcmp    %eax,%edx\n 98e:\t74 0f                \tje     99f <codec_base32_decode+0x75>\n 990:\t0f b6 45 e3          \tmovzbl -0x1d(%rbp),%eax\n 994:\t48 98                \tcltq   \n 996:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n 99d:\teb 05                \tjmp    9a4 <codec_base32_decode+0x7a>\n 99f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 9a4:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n 9a7:\t88 44 15 d6          \tmov    %al,-0x2a(%rbp,%rdx,1)\n 9ab:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n 9af:\t83 7d e8 07          \tcmpl   $0x7,-0x18(%rbp)\n 9b3:\t76 b4                \tjbe    969 <codec_base32_decode+0x3f>\n 9b5:\t0f b6 45 d6          \tmovzbl -0x2a(%rbp),%eax\n 9b9:\t0f be c0             \tmovsbl %al,%eax\n 9bc:\tc1 e0 03             \tshl    $0x3,%eax\n 9bf:\t89 c2                \tmov    %eax,%edx\n 9c1:\t0f b6 45 d7          \tmovzbl -0x29(%rbp),%eax\n 9c5:\tc0 f8 02             \tsar    $0x2,%al\n 9c8:\t83 e0 07             \tand    $0x7,%eax\n 9cb:\t09 d0                \tor     %edx,%eax\n 9cd:\t88 45 de             \tmov    %al,-0x22(%rbp)\n 9d0:\t0f b6 45 d7          \tmovzbl -0x29(%rbp),%eax\n 9d4:\t0f be c0             \tmovsbl %al,%eax\n 9d7:\tc1 e0 06             \tshl    $0x6,%eax\n 9da:\t89 c2                \tmov    %eax,%edx\n 9dc:\t0f b6 45 d8          \tmovzbl -0x28(%rbp),%eax\n 9e0:\t0f be c0             \tmovsbl %al,%eax\n 9e3:\t01 c0                \tadd    %eax,%eax\n 9e5:\t83 e0 3e             \tand    $0x3e,%eax\n 9e8:\t09 c2                \tor     %eax,%edx\n 9ea:\t0f b6 45 d9          \tmovzbl -0x27(%rbp),%eax\n 9ee:\tc0 f8 04             \tsar    $0x4,%al\n 9f1:\t83 e0 01             \tand    $0x1,%eax\n 9f4:\t09 d0                \tor     %edx,%eax\n 9f6:\t88 45 df             \tmov    %al,-0x21(%rbp)\n 9f9:\t0f b6 45 d9          \tmovzbl -0x27(%rbp),%eax\n 9fd:\t0f be c0             \tmovsbl %al,%eax\n a00:\tc1 e0 04             \tshl    $0x4,%eax\n a03:\t89 c2                \tmov    %eax,%edx\n a05:\t0f b6 45 da          \tmovzbl -0x26(%rbp),%eax\n a09:\td0 f8                \tsar    %al\n a0b:\t83 e0 0f             \tand    $0xf,%eax\n a0e:\t09 d0                \tor     %edx,%eax\n a10:\t88 45 e0             \tmov    %al,-0x20(%rbp)\n a13:\t0f b6 45 da          \tmovzbl -0x26(%rbp),%eax\n a17:\t0f be c0             \tmovsbl %al,%eax\n a1a:\tc1 e0 07             \tshl    $0x7,%eax\n a1d:\t89 c2                \tmov    %eax,%edx\n a1f:\t0f b6 45 db          \tmovzbl -0x25(%rbp),%eax\n a23:\t0f be c0             \tmovsbl %al,%eax\n a26:\tc1 e0 02             \tshl    $0x2,%eax\n a29:\t83 e0 7c             \tand    $0x7c,%eax\n a2c:\t09 c2                \tor     %eax,%edx\n a2e:\t0f b6 45 dc          \tmovzbl -0x24(%rbp),%eax\n a32:\tc0 f8 03             \tsar    $0x3,%al\n a35:\t83 e0 03             \tand    $0x3,%eax\n a38:\t09 d0                \tor     %edx,%eax\n a3a:\t88 45 e1             \tmov    %al,-0x1f(%rbp)\n a3d:\t0f b6 45 dc          \tmovzbl -0x24(%rbp),%eax\n a41:\t0f be c0             \tmovsbl %al,%eax\n a44:\tc1 e0 05             \tshl    $0x5,%eax\n a47:\t89 c2                \tmov    %eax,%edx\n a49:\t0f b6 45 dd          \tmovzbl -0x23(%rbp),%eax\n a4d:\t83 e0 1f             \tand    $0x1f,%eax\n a50:\t09 d0                \tor     %edx,%eax\n a52:\t88 45 e2             \tmov    %al,-0x1e(%rbp)\n a55:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n a5c:\teb 20                \tjmp    a7e <codec_base32_decode+0x154>\n a5e:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n a61:\t0f b6 4c 05 de       \tmovzbl -0x22(%rbp,%rax,1),%ecx\n a66:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n a6a:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n a6e:\t48 89 55 c0          \tmov    %rdx,-0x40(%rbp)\n a72:\t89 ca                \tmov    %ecx,%edx\n a74:\t88 10                \tmov    %dl,(%rax)\n a76:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n a7a:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n a7e:\t83 7d e8 04          \tcmpl   $0x4,-0x18(%rbp)\n a82:\t76 da                \tjbe    a5e <codec_base32_decode+0x134>\n a84:\t83 45 ec 08          \taddl   $0x8,-0x14(%rbp)\n a88:\t8b 5d ec             \tmov    -0x14(%rbp),%ebx\n a8b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n a8f:\t48 89 c7             \tmov    %rax,%rdi\n a92:\te8 00 00 00 00       \tcallq  a97 <codec_base32_decode+0x16d>\n a97:\t48 39 c3             \tcmp    %rax,%rbx\n a9a:\t0f 82 c0 fe ff ff    \tjb     960 <codec_base32_decode+0x36>\n aa0:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n aa3:\t48 83 c4 38          \tadd    $0x38,%rsp\n aa7:\t5b                   \tpop    %rbx\n aa8:\t5d                   \tpop    %rbp\n aa9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall codec_base32_decode(const char *a1, _BYTE *a2) {\n  char v2;\n  _BYTE *v3;\n  size_t v4;\n  char v7;\n  char v8;\n  char v9;\n  char v10;\n  char v11;\n  char v12;\n  char v13;\n  char v14;\n  char v15[Number];\n  unsigned __int8 v16;\n  unsigned int v17;\n  unsigned int j;\n  unsigned int i;\n  j = Number;\n  v16 = Number;\n  v17 = Number;\n  for (i = Number;; i += Number) {\n    v4 = i;\n    if (v4 >= strlen(a1))\n      break;\n    for (j = Number; j <= Number; ++j) {\n      v16 = a1[i + j];\n      if (v16 == Number)\n        v2 = Number;\n      else\n        v2 = base32_dmap[v16];\n      *(&v7 + j) = v2;\n    }\n    v15[Number] = (Number * v7) | (v8 >> Number) & Number;\n    v15[Number] =\n        (Number * v9) & Number | (v8 << Number) | (v10 >> Number) & Number;\n    v15[Number] = (Number * v10) | (v11 >> Number) & Number;\n    v15[Number] =\n        (Number * v12) & Number | (v11 << Number) | (v13 >> Number) & Number;\n    v15[Number] = (Number * v13) | v14 & Number;\n    for (j = Number; j <= Number; ++j) {\n      v3 = a2++;\n      *v3 = v15[j];\n      ++v17;\n    }\n  }\n  return v17;\n}", "code_t": "unsigned int __cdecl codec_base32_decode(\n    unsigned __int8 *<span class=\"supfact\">input</span>,\n    unsigned __int8 *<span class=\"supfact\">output</span>) {\n  char v2;\n  unsigned __int8 *v3;\n  size_t <span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">ebytes</span>[Number];\n  char <span class=\"supfact\">dbytes</span>[Number];\n  unsigned __int8 <span class=\"supfact\">c</span>;\n  unsigned int <span class=\"supfact\">len</span>;\n  unsigned int <span class=\"supfact\">j</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">j</span> = Number;\n  <span class=\"supfact\">c</span> = Number;\n  <span class=\"supfact\">len</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number;; <span class=\"supfact\">i</span> += Number) {\n    <span class=\"supfact\">v4</span> = <span class=\"supfact\">i</span>;\n    if (<span class=\"supfact\">v4</span> >= strlen((const char *)<span class=\"supfact\">input</span>))\n      break;\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">c</span> =\n          <span class=\"supfact\">input</span>[<span class=\"supfact\">i</span> + <span class=\"supfact\">j</span>];\n      if (<span class=\"supfact\">c</span> == Number)\n        v2 = Number;\n      else\n        v2 = base32_dmap[<span class=\"supfact\">c</span>];\n      <span class=\"supfact\">ebytes</span>[<span class=\"supfact\">j</span>] = v2;\n    }\n    <span class=\"supfact\">dbytes</span>[Number] =\n        (Number * <span class=\"supfact\">ebytes</span>[Number]) |\n        (<span class=\"supfact\">ebytes</span>[Number] >> Number) & Number;\n    <span class=\"supfact\">dbytes</span>[Number] =\n        (Number * <span class=\"supfact\">ebytes</span>[Number]) & Number |\n        (<span class=\"supfact\">ebytes</span>[Number] << Number) |\n        (<span class=\"supfact\">ebytes</span>[Number] >> Number) & Number;\n    <span class=\"supfact\">dbytes</span>[Number] =\n        (Number * <span class=\"supfact\">ebytes</span>[Number]) |\n        (<span class=\"supfact\">ebytes</span>[Number] >> Number) & Number;\n    <span class=\"supfact\">dbytes</span>[Number] =\n        (Number * <span class=\"supfact\">ebytes</span>[Number]) & Number |\n        (<span class=\"supfact\">ebytes</span>[Number] << Number) |\n        (<span class=\"supfact\">ebytes</span>[Number] >> Number) & Number;\n    <span class=\"supfact\">dbytes</span>[Number] = (Number * <span class=\"supfact\">ebytes</span>[Number]) |\n                                     <span class=\"supfact\">ebytes</span>[Number] & Number;\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      v3 = <span class=\"supfact\">output</span>++;\n      *v3 = <span class=\"supfact\">dbytes</span>[<span class=\"supfact\">j</span>];\n      ++<span class=\"supfact\">len</span>;\n    }\n  }\n  return <span class=\"supfact\">len</span>;\n}", "var": [{"name": "a1", "type": "const char *", "pred_name": "source", "ref_name": "input", "ref_type": "unsigned __int8 *"}, {"name": "a2", "type": "char *", "pred_name": "dest", "ref_name": "output", "ref_type": "unsigned __int8 *"}, {"name": "v4", "type": "size_t", "pred_name": "v4", "ref_name": "v4", "ref_type": "size_t"}, {"name": "v7", "type": "unsigned __int8", "pred_name": "__unk__", "ref_name": "ebytes", "ref_type": "char[8]"}, {"name": "v8", "type": "unsigned __int8", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v9", "type": "unsigned __int8", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v10", "type": "unsigned __int8", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v11", "type": "unsigned __int8", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v12", "type": "unsigned __int8", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v13", "type": "unsigned __int8", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v14", "type": "unsigned __int8", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v15", "type": "_BYTE[5]", "pred_name": "__unk__", "ref_name": "dbytes", "ref_type": "char[5]"}, {"name": "v16", "type": "unsigned __int8", "pred_name": "__unk__", "ref_name": "c", "ref_type": "unsigned __int8"}, {"name": "v17", "type": "int", "pred_name": "__unk__", "ref_name": "len", "ref_type": "unsigned int"}, {"name": "j", "type": "int", "pred_name": "i_0", "ref_name": "j", "ref_type": "unsigned int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "tgroh007", "repo_name": "koying-SPMC", "path": "tgroh007/koying-SPMC/928eaacab8279cc5efaa0d6a0737a9f32a1527f6fa981d782f62053667d5388e", "path_in_repo": "tgroh007/koying-SPMC/lib/ffmpeg/libavformat/mxfdec.o", "objdump": "00000000000009de <mxf_read_partition_pack>:\n     9de:\t48 83 ec 78          \tsub    $0x78,%rsp\n     9e2:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n     9e7:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n     9ec:\t89 54 24 1c          \tmov    %edx,0x1c(%rsp)\n     9f0:\t89 4c 24 18          \tmov    %ecx,0x18(%rsp)\n     9f4:\t4c 89 44 24 10       \tmov    %r8,0x10(%rsp)\n     9f9:\t4c 89 4c 24 08       \tmov    %r9,0x8(%rsp)\n     9fe:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     a03:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n     a08:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     a0d:\t8b 40 08             \tmov    0x8(%rax),%eax\n     a10:\t83 c0 01             \tadd    $0x1,%eax\n     a13:\t3d 2d ba e8 02       \tcmp    $0x2e8ba2d,%eax\n     a18:\t76 0a                \tjbe    a24 <mxf_read_partition_pack+0x46>\n     a1a:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     a1f:\te9 58 07 00 00       \tjmpq   117c <mxf_read_partition_pack+0x79e>\n     a24:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     a29:\t8b 40 08             \tmov    0x8(%rax),%eax\n     a2c:\t83 c0 01             \tadd    $0x1,%eax\n     a2f:\t89 c2                \tmov    %eax,%edx\n     a31:\t48 89 d0             \tmov    %rdx,%rax\n     a34:\t48 c1 e0 02          \tshl    $0x2,%rax\n     a38:\t48 01 d0             \tadd    %rdx,%rax\n     a3b:\t48 01 c0             \tadd    %rax,%rax\n     a3e:\t48 01 d0             \tadd    %rdx,%rax\n     a41:\t48 c1 e0 03          \tshl    $0x3,%rax\n     a45:\t48 89 c2             \tmov    %rax,%rdx\n     a48:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     a4d:\t48 8b 00             \tmov    (%rax),%rax\n     a50:\t48 89 d6             \tmov    %rdx,%rsi\n     a53:\t48 89 c7             \tmov    %rax,%rdi\n     a56:\te8 00 00 00 00       \tcallq  a5b <mxf_read_partition_pack+0x7d>\n     a5b:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n     a60:\t48 83 7c 24 58 00    \tcmpq   $0x0,0x58(%rsp)\n     a66:\t75 0a                \tjne    a72 <mxf_read_partition_pack+0x94>\n     a68:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     a6d:\te9 0a 07 00 00       \tjmpq   117c <mxf_read_partition_pack+0x79e>\n     a72:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     a77:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n     a7c:\t48 89 10             \tmov    %rdx,(%rax)\n     a7f:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     a84:\t8b 80 88 00 00 00    \tmov    0x88(%rax),%eax\n     a8a:\t85 c0                \ttest   %eax,%eax\n     a8c:\t0f 84 e8 00 00 00    \tje     b7a <mxf_read_partition_pack+0x19c>\n     a92:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     a97:\t8b 50 08             \tmov    0x8(%rax),%edx\n     a9a:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     a9f:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n     aa5:\t29 c2                \tsub    %eax,%edx\n     aa7:\t89 d0                \tmov    %edx,%eax\n     aa9:\t89 c2                \tmov    %eax,%edx\n     aab:\t48 89 d0             \tmov    %rdx,%rax\n     aae:\t48 c1 e0 02          \tshl    $0x2,%rax\n     ab2:\t48 01 d0             \tadd    %rdx,%rax\n     ab5:\t48 01 c0             \tadd    %rax,%rax\n     ab8:\t48 01 d0             \tadd    %rdx,%rax\n     abb:\t48 c1 e0 03          \tshl    $0x3,%rax\n     abf:\t48 89 c7             \tmov    %rax,%rdi\n     ac2:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     ac7:\t48 8b 08             \tmov    (%rax),%rcx\n     aca:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     acf:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n     ad5:\t48 63 d0             \tmovslq %eax,%rdx\n     ad8:\t48 89 d0             \tmov    %rdx,%rax\n     adb:\t48 c1 e0 02          \tshl    $0x2,%rax\n     adf:\t48 01 d0             \tadd    %rdx,%rax\n     ae2:\t48 01 c0             \tadd    %rax,%rax\n     ae5:\t48 01 d0             \tadd    %rdx,%rax\n     ae8:\t48 c1 e0 03          \tshl    $0x3,%rax\n     aec:\t48 01 c1             \tadd    %rax,%rcx\n     aef:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     af4:\t48 8b 30             \tmov    (%rax),%rsi\n     af7:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     afc:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n     b02:\t48 98                \tcltq   \n     b04:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     b08:\t48 89 d0             \tmov    %rdx,%rax\n     b0b:\t48 c1 e0 02          \tshl    $0x2,%rax\n     b0f:\t48 01 d0             \tadd    %rdx,%rax\n     b12:\t48 01 c0             \tadd    %rax,%rax\n     b15:\t48 01 d0             \tadd    %rdx,%rax\n     b18:\t48 c1 e0 03          \tshl    $0x3,%rax\n     b1c:\t48 01 f0             \tadd    %rsi,%rax\n     b1f:\t48 89 fa             \tmov    %rdi,%rdx\n     b22:\t48 89 ce             \tmov    %rcx,%rsi\n     b25:\t48 89 c7             \tmov    %rax,%rdi\n     b28:\te8 00 00 00 00       \tcallq  b2d <mxf_read_partition_pack+0x14f>\n     b2d:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     b32:\t48 8b 08             \tmov    (%rax),%rcx\n     b35:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     b3a:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n     b40:\t48 63 d0             \tmovslq %eax,%rdx\n     b43:\t48 89 d0             \tmov    %rdx,%rax\n     b46:\t48 c1 e0 02          \tshl    $0x2,%rax\n     b4a:\t48 01 d0             \tadd    %rdx,%rax\n     b4d:\t48 01 c0             \tadd    %rax,%rax\n     b50:\t48 01 d0             \tadd    %rdx,%rax\n     b53:\t48 c1 e0 03          \tshl    $0x3,%rax\n     b57:\t48 8d 14 01          \tlea    (%rcx,%rax,1),%rdx\n     b5b:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     b60:\t48 89 90 80 00 00 00 \tmov    %rdx,0x80(%rax)\n     b67:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     b6c:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n     b73:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n     b78:\teb 60                \tjmp    bda <mxf_read_partition_pack+0x1fc>\n     b7a:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     b7f:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n     b85:\t8d 50 01             \tlea    0x1(%rax),%edx\n     b88:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     b8d:\t89 90 98 00 00 00    \tmov    %edx,0x98(%rax)\n     b93:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     b98:\t48 8b 08             \tmov    (%rax),%rcx\n     b9b:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     ba0:\t8b 40 08             \tmov    0x8(%rax),%eax\n     ba3:\t89 c2                \tmov    %eax,%edx\n     ba5:\t48 89 d0             \tmov    %rdx,%rax\n     ba8:\t48 c1 e0 02          \tshl    $0x2,%rax\n     bac:\t48 01 d0             \tadd    %rdx,%rax\n     baf:\t48 01 c0             \tadd    %rax,%rax\n     bb2:\t48 01 d0             \tadd    %rdx,%rax\n     bb5:\t48 c1 e0 03          \tshl    $0x3,%rax\n     bb9:\t48 8d 14 01          \tlea    (%rcx,%rax,1),%rdx\n     bbd:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     bc2:\t48 89 90 80 00 00 00 \tmov    %rdx,0x80(%rax)\n     bc9:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     bce:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n     bd5:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n     bda:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     bdf:\tba 58 00 00 00       \tmov    $0x58,%edx\n     be4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     be9:\t48 89 c7             \tmov    %rax,%rdi\n     bec:\te8 00 00 00 00       \tcallq  bf1 <mxf_read_partition_pack+0x213>\n     bf1:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     bf6:\t8b 40 08             \tmov    0x8(%rax),%eax\n     bf9:\t8d 50 01             \tlea    0x1(%rax),%edx\n     bfc:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     c01:\t89 50 08             \tmov    %edx,0x8(%rax)\n     c04:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     c09:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n     c0e:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     c13:\tba 01 00 00 00       \tmov    $0x1,%edx\n     c18:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c1d:\t48 89 c7             \tmov    %rax,%rdi\n     c20:\te8 00 00 00 00       \tcallq  c25 <mxf_read_partition_pack+0x247>\n     c25:\t89 c2                \tmov    %eax,%edx\n     c27:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     c2c:\t29 c2                \tsub    %eax,%edx\n     c2e:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n     c32:\t01 d0                \tadd    %edx,%eax\n     c34:\t89 c2                \tmov    %eax,%edx\n     c36:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     c3b:\t89 50 50             \tmov    %edx,0x50(%rax)\n     c3e:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     c43:\t48 83 c0 0d          \tadd    $0xd,%rax\n     c47:\t0f b6 00             \tmovzbl (%rax),%eax\n     c4a:\t0f b6 c0             \tmovzbl %al,%eax\n     c4d:\t83 f8 04             \tcmp    $0x4,%eax\n     c50:\t74 2d                \tje     c7f <mxf_read_partition_pack+0x2a1>\n     c52:\t83 f8 04             \tcmp    $0x4,%eax\n     c55:\t7f 36                \tjg     c8d <mxf_read_partition_pack+0x2af>\n     c57:\t83 f8 02             \tcmp    $0x2,%eax\n     c5a:\t74 07                \tje     c63 <mxf_read_partition_pack+0x285>\n     c5c:\t83 f8 03             \tcmp    $0x3,%eax\n     c5f:\t74 10                \tje     c71 <mxf_read_partition_pack+0x293>\n     c61:\teb 2a                \tjmp    c8d <mxf_read_partition_pack+0x2af>\n     c63:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     c68:\tc7 40 08 00 00 00 00 \tmovl   $0x0,0x8(%rax)\n     c6f:\teb 57                \tjmp    cc8 <mxf_read_partition_pack+0x2ea>\n     c71:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     c76:\tc7 40 08 01 00 00 00 \tmovl   $0x1,0x8(%rax)\n     c7d:\teb 49                \tjmp    cc8 <mxf_read_partition_pack+0x2ea>\n     c7f:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     c84:\tc7 40 08 02 00 00 00 \tmovl   $0x2,0x8(%rax)\n     c8b:\teb 3b                \tjmp    cc8 <mxf_read_partition_pack+0x2ea>\n     c8d:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     c92:\t48 83 c0 0d          \tadd    $0xd,%rax\n     c96:\t0f b6 00             \tmovzbl (%rax),%eax\n     c99:\t0f b6 d0             \tmovzbl %al,%edx\n     c9c:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     ca1:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     ca5:\t89 d1                \tmov    %edx,%ecx\n     ca7:\tba 00 00 00 00       \tmov    $0x0,%edx\n     cac:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     cb1:\t48 89 c7             \tmov    %rax,%rdi\n     cb4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     cb9:\te8 00 00 00 00       \tcallq  cbe <mxf_read_partition_pack+0x2e0>\n     cbe:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n     cc3:\te9 b4 04 00 00       \tjmpq   117c <mxf_read_partition_pack+0x79e>\n     cc8:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     ccd:\t8b 40 08             \tmov    0x8(%rax),%eax\n     cd0:\t83 f8 02             \tcmp    $0x2,%eax\n     cd3:\t74 16                \tje     ceb <mxf_read_partition_pack+0x30d>\n     cd5:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     cda:\t48 83 c0 0e          \tadd    $0xe,%rax\n     cde:\t0f b6 00             \tmovzbl (%rax),%eax\n     ce1:\t0f b6 c0             \tmovzbl %al,%eax\n     ce4:\t83 e0 01             \tand    $0x1,%eax\n     ce7:\t85 c0                \ttest   %eax,%eax\n     ce9:\t75 07                \tjne    cf2 <mxf_read_partition_pack+0x314>\n     ceb:\tba 01 00 00 00       \tmov    $0x1,%edx\n     cf0:\teb 05                \tjmp    cf7 <mxf_read_partition_pack+0x319>\n     cf2:\tba 00 00 00 00       \tmov    $0x0,%edx\n     cf7:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     cfc:\t89 10                \tmov    %edx,(%rax)\n     cfe:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     d03:\t48 83 c0 0e          \tadd    $0xe,%rax\n     d07:\t0f b6 00             \tmovzbl (%rax),%eax\n     d0a:\t3c 02                \tcmp    $0x2,%al\n     d0c:\t0f 97 c0             \tseta   %al\n     d0f:\t0f b6 d0             \tmovzbl %al,%edx\n     d12:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     d17:\t89 50 04             \tmov    %edx,0x4(%rax)\n     d1a:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     d1f:\tbe 04 00 00 00       \tmov    $0x4,%esi\n     d24:\t48 89 c7             \tmov    %rax,%rdi\n     d27:\te8 00 00 00 00       \tcallq  d2c <mxf_read_partition_pack+0x34e>\n     d2c:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     d31:\t48 89 c7             \tmov    %rax,%rdi\n     d34:\te8 00 00 00 00       \tcallq  d39 <mxf_read_partition_pack+0x35b>\n     d39:\t89 c2                \tmov    %eax,%edx\n     d3b:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     d40:\t89 50 38             \tmov    %edx,0x38(%rax)\n     d43:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     d48:\t48 89 c7             \tmov    %rax,%rdi\n     d4b:\te8 00 00 00 00       \tcallq  d50 <mxf_read_partition_pack+0x372>\n     d50:\t48 89 c2             \tmov    %rax,%rdx\n     d53:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     d58:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n     d5c:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     d61:\t48 89 c7             \tmov    %rax,%rdi\n     d64:\te8 00 00 00 00       \tcallq  d69 <mxf_read_partition_pack+0x38b>\n     d69:\t48 8b 54 24 68       \tmov    0x68(%rsp),%rdx\n     d6e:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n     d72:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     d77:\t48 89 c7             \tmov    %rax,%rdi\n     d7a:\te8 00 00 00 00       \tcallq  d7f <mxf_read_partition_pack+0x3a1>\n     d7f:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n     d84:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     d89:\t48 89 c7             \tmov    %rax,%rdi\n     d8c:\te8 00 00 00 00       \tcallq  d91 <mxf_read_partition_pack+0x3b3>\n     d91:\t48 89 c2             \tmov    %rax,%rdx\n     d94:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     d99:\t48 89 50 40          \tmov    %rdx,0x40(%rax)\n     d9d:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     da2:\t48 89 c7             \tmov    %rax,%rdi\n     da5:\te8 00 00 00 00       \tcallq  daa <mxf_read_partition_pack+0x3cc>\n     daa:\t48 89 c2             \tmov    %rax,%rdx\n     dad:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     db2:\t48 89 50 48          \tmov    %rdx,0x48(%rax)\n     db6:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     dbb:\t48 89 c7             \tmov    %rax,%rdi\n     dbe:\te8 00 00 00 00       \tcallq  dc3 <mxf_read_partition_pack+0x3e5>\n     dc3:\t89 c2                \tmov    %eax,%edx\n     dc5:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     dca:\t89 50 18             \tmov    %edx,0x18(%rax)\n     dcd:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     dd2:\tbe 08 00 00 00       \tmov    $0x8,%esi\n     dd7:\t48 89 c7             \tmov    %rax,%rdi\n     dda:\te8 00 00 00 00       \tcallq  ddf <mxf_read_partition_pack+0x401>\n     ddf:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     de4:\t48 89 c7             \tmov    %rax,%rdi\n     de7:\te8 00 00 00 00       \tcallq  dec <mxf_read_partition_pack+0x40e>\n     dec:\t89 c2                \tmov    %eax,%edx\n     dee:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     df3:\t89 50 1c             \tmov    %edx,0x1c(%rax)\n     df6:\t48 8d 4c 24 30       \tlea    0x30(%rsp),%rcx\n     dfb:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     e00:\tba 10 00 00 00       \tmov    $0x10,%edx\n     e05:\t48 89 ce             \tmov    %rcx,%rsi\n     e08:\t48 89 c7             \tmov    %rax,%rdi\n     e0b:\te8 00 00 00 00       \tcallq  e10 <mxf_read_partition_pack+0x432>\n     e10:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n     e15:\t48 89 c7             \tmov    %rax,%rdi\n     e18:\te8 00 00 00 00       \tcallq  e1d <mxf_read_partition_pack+0x43f>\n     e1d:\t89 44 24 4c          \tmov    %eax,0x4c(%rsp)\n     e21:\t48 83 7c 24 50 00    \tcmpq   $0x0,0x50(%rsp)\n     e27:\t74 62                \tje     e8b <mxf_read_partition_pack+0x4ad>\n     e29:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     e2e:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     e32:\t48 85 c0             \ttest   %rax,%rax\n     e35:\t74 46                \tje     e7d <mxf_read_partition_pack+0x49f>\n     e37:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     e3c:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     e40:\t48 39 44 24 50       \tcmp    %rax,0x50(%rsp)\n     e45:\t74 36                \tje     e7d <mxf_read_partition_pack+0x49f>\n     e47:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     e4c:\t48 8b 50 50          \tmov    0x50(%rax),%rdx\n     e50:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     e55:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     e59:\t48 8b 4c 24 50       \tmov    0x50(%rsp),%rcx\n     e5e:\t49 89 c8             \tmov    %rcx,%r8\n     e61:\t48 89 d1             \tmov    %rdx,%rcx\n     e64:\tba 00 00 00 00       \tmov    $0x0,%edx\n     e69:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     e6e:\t48 89 c7             \tmov    %rax,%rdi\n     e71:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e76:\te8 00 00 00 00       \tcallq  e7b <mxf_read_partition_pack+0x49d>\n     e7b:\teb 0e                \tjmp    e8b <mxf_read_partition_pack+0x4ad>\n     e7d:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     e82:\t48 8b 54 24 50       \tmov    0x50(%rsp),%rdx\n     e87:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n     e8b:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     e90:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     e94:\t48 85 c0             \ttest   %rax,%rax\n     e97:\t74 4b                \tje     ee4 <mxf_read_partition_pack+0x506>\n     e99:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     e9e:\t8b 40 7c             \tmov    0x7c(%rax),%eax\n     ea1:\t48 63 d0             \tmovslq %eax,%rdx\n     ea4:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n     ea9:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     ead:\t48 01 c2             \tadd    %rax,%rdx\n     eb0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     eb5:\t48 39 c2             \tcmp    %rax,%rdx\n     eb8:\t72 2a                \tjb     ee4 <mxf_read_partition_pack+0x506>\n     eba:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     ebf:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     ec3:\tba 00 00 00 00       \tmov    $0x0,%edx\n     ec8:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     ecd:\t48 89 c7             \tmov    %rax,%rdi\n     ed0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ed5:\te8 00 00 00 00       \tcallq  eda <mxf_read_partition_pack+0x4fc>\n     eda:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n     edf:\te9 98 02 00 00       \tjmpq   117c <mxf_read_partition_pack+0x79e>\n     ee4:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n     ee9:\t3c 01                \tcmp    $0x1,%al\n     eeb:\t75 1a                \tjne    f07 <mxf_read_partition_pack+0x529>\n     eed:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n     ef2:\t3c 01                \tcmp    $0x1,%al\n     ef4:\t75 11                \tjne    f07 <mxf_read_partition_pack+0x529>\n     ef6:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     efb:\tc7 40 0c 01 00 00 00 \tmovl   $0x1,0xc(%rax)\n     f02:\te9 da 01 00 00       \tjmpq   10e1 <mxf_read_partition_pack+0x703>\n     f07:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n     f0c:\t3c 01                \tcmp    $0x1,%al\n     f0e:\t75 1a                \tjne    f2a <mxf_read_partition_pack+0x54c>\n     f10:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n     f15:\t3c 02                \tcmp    $0x2,%al\n     f17:\t75 11                \tjne    f2a <mxf_read_partition_pack+0x54c>\n     f19:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     f1e:\tc7 40 0c 02 00 00 00 \tmovl   $0x2,0xc(%rax)\n     f25:\te9 b7 01 00 00       \tjmpq   10e1 <mxf_read_partition_pack+0x703>\n     f2a:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n     f2f:\t3c 01                \tcmp    $0x1,%al\n     f31:\t75 1a                \tjne    f4d <mxf_read_partition_pack+0x56f>\n     f33:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n     f38:\t3c 03                \tcmp    $0x3,%al\n     f3a:\t75 11                \tjne    f4d <mxf_read_partition_pack+0x56f>\n     f3c:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     f41:\tc7 40 0c 03 00 00 00 \tmovl   $0x3,0xc(%rax)\n     f48:\te9 94 01 00 00       \tjmpq   10e1 <mxf_read_partition_pack+0x703>\n     f4d:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n     f52:\t3c 02                \tcmp    $0x2,%al\n     f54:\t75 1a                \tjne    f70 <mxf_read_partition_pack+0x592>\n     f56:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n     f5b:\t3c 01                \tcmp    $0x1,%al\n     f5d:\t75 11                \tjne    f70 <mxf_read_partition_pack+0x592>\n     f5f:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     f64:\tc7 40 0c 04 00 00 00 \tmovl   $0x4,0xc(%rax)\n     f6b:\te9 71 01 00 00       \tjmpq   10e1 <mxf_read_partition_pack+0x703>\n     f70:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n     f75:\t3c 02                \tcmp    $0x2,%al\n     f77:\t75 1a                \tjne    f93 <mxf_read_partition_pack+0x5b5>\n     f79:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n     f7e:\t3c 02                \tcmp    $0x2,%al\n     f80:\t75 11                \tjne    f93 <mxf_read_partition_pack+0x5b5>\n     f82:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     f87:\tc7 40 0c 05 00 00 00 \tmovl   $0x5,0xc(%rax)\n     f8e:\te9 4e 01 00 00       \tjmpq   10e1 <mxf_read_partition_pack+0x703>\n     f93:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n     f98:\t3c 02                \tcmp    $0x2,%al\n     f9a:\t75 1a                \tjne    fb6 <mxf_read_partition_pack+0x5d8>\n     f9c:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n     fa1:\t3c 03                \tcmp    $0x3,%al\n     fa3:\t75 11                \tjne    fb6 <mxf_read_partition_pack+0x5d8>\n     fa5:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     faa:\tc7 40 0c 06 00 00 00 \tmovl   $0x6,0xc(%rax)\n     fb1:\te9 2b 01 00 00       \tjmpq   10e1 <mxf_read_partition_pack+0x703>\n     fb6:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n     fbb:\t3c 03                \tcmp    $0x3,%al\n     fbd:\t75 1a                \tjne    fd9 <mxf_read_partition_pack+0x5fb>\n     fbf:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n     fc4:\t3c 01                \tcmp    $0x1,%al\n     fc6:\t75 11                \tjne    fd9 <mxf_read_partition_pack+0x5fb>\n     fc8:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     fcd:\tc7 40 0c 07 00 00 00 \tmovl   $0x7,0xc(%rax)\n     fd4:\te9 08 01 00 00       \tjmpq   10e1 <mxf_read_partition_pack+0x703>\n     fd9:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n     fde:\t3c 03                \tcmp    $0x3,%al\n     fe0:\t75 1a                \tjne    ffc <mxf_read_partition_pack+0x61e>\n     fe2:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n     fe7:\t3c 02                \tcmp    $0x2,%al\n     fe9:\t75 11                \tjne    ffc <mxf_read_partition_pack+0x61e>\n     feb:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n     ff0:\tc7 40 0c 08 00 00 00 \tmovl   $0x8,0xc(%rax)\n     ff7:\te9 e5 00 00 00       \tjmpq   10e1 <mxf_read_partition_pack+0x703>\n     ffc:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n    1001:\t3c 03                \tcmp    $0x3,%al\n    1003:\t75 1a                \tjne    101f <mxf_read_partition_pack+0x641>\n    1005:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n    100a:\t3c 03                \tcmp    $0x3,%al\n    100c:\t75 11                \tjne    101f <mxf_read_partition_pack+0x641>\n    100e:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1013:\tc7 40 0c 09 00 00 00 \tmovl   $0x9,0xc(%rax)\n    101a:\te9 c2 00 00 00       \tjmpq   10e1 <mxf_read_partition_pack+0x703>\n    101f:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n    1024:\t3c 40                \tcmp    $0x40,%al\n    1026:\t75 1a                \tjne    1042 <mxf_read_partition_pack+0x664>\n    1028:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n    102d:\t3c 01                \tcmp    $0x1,%al\n    102f:\t75 11                \tjne    1042 <mxf_read_partition_pack+0x664>\n    1031:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1036:\tc7 40 0c 0b 00 00 00 \tmovl   $0xb,0xc(%rax)\n    103d:\te9 9f 00 00 00       \tjmpq   10e1 <mxf_read_partition_pack+0x703>\n    1042:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n    1047:\t3c 10                \tcmp    $0x10,%al\n    1049:\t75 55                \tjne    10a0 <mxf_read_partition_pack+0x6c2>\n    104b:\t83 7c 24 4c 01       \tcmpl   $0x1,0x4c(%rsp)\n    1050:\t74 40                \tje     1092 <mxf_read_partition_pack+0x6b4>\n    1052:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1057:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    105a:\t85 c0                \ttest   %eax,%eax\n    105c:\t75 26                \tjne    1084 <mxf_read_partition_pack+0x6a6>\n    105e:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1063:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1067:\t8b 54 24 4c          \tmov    0x4c(%rsp),%edx\n    106b:\t89 d1                \tmov    %edx,%ecx\n    106d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1072:\tbe 18 00 00 00       \tmov    $0x18,%esi\n    1077:\t48 89 c7             \tmov    %rax,%rdi\n    107a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    107f:\te8 00 00 00 00       \tcallq  1084 <mxf_read_partition_pack+0x6a6>\n    1084:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1089:\tc7 40 0c 01 00 00 00 \tmovl   $0x1,0xc(%rax)\n    1090:\teb 4f                \tjmp    10e1 <mxf_read_partition_pack+0x703>\n    1092:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1097:\tc7 40 0c 0a 00 00 00 \tmovl   $0xa,0xc(%rax)\n    109e:\teb 41                \tjmp    10e1 <mxf_read_partition_pack+0x703>\n    10a0:\t0f b6 44 24 3d       \tmovzbl 0x3d(%rsp),%eax\n    10a5:\t0f b6 c8             \tmovzbl %al,%ecx\n    10a8:\t0f b6 44 24 3c       \tmovzbl 0x3c(%rsp),%eax\n    10ad:\t0f b6 d0             \tmovzbl %al,%edx\n    10b0:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    10b5:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    10b9:\t41 89 c8             \tmov    %ecx,%r8d\n    10bc:\t89 d1                \tmov    %edx,%ecx\n    10be:\tba 00 00 00 00       \tmov    $0x0,%edx\n    10c3:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    10c8:\t48 89 c7             \tmov    %rax,%rdi\n    10cb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    10d0:\te8 00 00 00 00       \tcallq  10d5 <mxf_read_partition_pack+0x6f7>\n    10d5:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    10da:\tc7 40 0c 01 00 00 00 \tmovl   $0x1,0xc(%rax)\n    10e1:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    10e6:\t8b 40 38             \tmov    0x38(%rax),%eax\n    10e9:\t85 c0                \ttest   %eax,%eax\n    10eb:\t7e 0f                \tjle    10fc <mxf_read_partition_pack+0x71e>\n    10ed:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    10f2:\t8b 40 38             \tmov    0x38(%rax),%eax\n    10f5:\t3d 00 00 10 00       \tcmp    $0x100000,%eax\n    10fa:\t7e 7b                \tjle    1177 <mxf_read_partition_pack+0x799>\n    10fc:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1101:\t8b 50 38             \tmov    0x38(%rax),%edx\n    1104:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    1109:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    110d:\t89 d1                \tmov    %edx,%ecx\n    110f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1114:\tbe 18 00 00 00       \tmov    $0x18,%esi\n    1119:\t48 89 c7             \tmov    %rax,%rdi\n    111c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1121:\te8 00 00 00 00       \tcallq  1126 <mxf_read_partition_pack+0x748>\n    1126:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    112b:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    112e:\t83 f8 0b             \tcmp    $0xb,%eax\n    1131:\t75 0e                \tjne    1141 <mxf_read_partition_pack+0x763>\n    1133:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1138:\tc7 40 38 00 02 00 00 \tmovl   $0x200,0x38(%rax)\n    113f:\teb 0c                \tjmp    114d <mxf_read_partition_pack+0x76f>\n    1141:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1146:\tc7 40 38 01 00 00 00 \tmovl   $0x1,0x38(%rax)\n    114d:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    1152:\t8b 50 38             \tmov    0x38(%rax),%edx\n    1155:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    115a:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    115e:\t89 d1                \tmov    %edx,%ecx\n    1160:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1165:\tbe 18 00 00 00       \tmov    $0x18,%esi\n    116a:\t48 89 c7             \tmov    %rax,%rdi\n    116d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1172:\te8 00 00 00 00       \tcallq  1177 <mxf_read_partition_pack+0x799>\n    1177:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    117c:\t48 83 c4 78          \tadd    $0x78,%rsp\n    1180:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mxf_read_partition_pack(__int64 a1, __int64 a2, __int64 a3,\n                                           int a4, __int64 a5,\n                                           unsigned __int64 a6) {\n  __int64 result;\n  int v7;\n  _BOOL4 v8;\n  char v12[Number];\n  unsigned __int8 v13;\n  unsigned __int8 v14;\n  __int64 v15;\n  unsigned int v16;\n  __int64 v17;\n  __int64 v18;\n  __int64 v19;\n  void *s;\n  v19 = a1;\n  if ((unsigned int)(*(_DWORD *)(a1 + Number) + Number) > Number)\n    return Number L;\n  v18 =\n      av_realloc(*(_QWORD *)v19,\n                 Number L * (unsigned int)(*(_DWORD *)(v19 + Number) + Number));\n  if (!v18)\n    return Number L;\n  *(_QWORD *)v19 = v18;\n  if (*(_DWORD *)(v19 + Number)) {\n    memmove(\n        (void *)(*(_QWORD *)v19 + Number * (*(int *)(v19 + Number) + Number L)),\n        (const void *)(Number L * *(int *)(v19 + Number) + *(_QWORD *)v19),\n        Number L * (unsigned int)(*(_DWORD *)(v19 + Number) -\n                                  *(_DWORD *)(v19 + Number)));\n    *(_QWORD *)(v19 + Number) =\n        *(_QWORD *)v19 + Number L * *(int *)(v19 + Number);\n  } else {\n    ++*(_DWORD *)(v19 + Number);\n    *(_QWORD *)(v19 + Number) =\n        *(_QWORD *)v19 + Number L * *(unsigned int *)(v19 + Number);\n  }\n  s = *(void **)(v19 + Number);\n  memset(s, Number, Number);\n  ++*(_DWORD *)(v19 + Number);\n  v15 = a2;\n  *((_DWORD *)s + Number) = avio_seek(a2, Number L, Number L) - a6 + a4;\n  v7 = *(unsigned __int8 *)(a5 + Number);\n  if (v7 == Number) {\n    *((_DWORD *)s + Number) = Number;\n  } else {\n    if (*(unsigned __int8 *)(a5 + Number) > Number) {\n    LABEL_16:\n      av_log(*(_QWORD *)(v19 + Number), Number L, String,\n             *(unsigned __int8 *)(a5 + Number));\n      return Number L;\n    }\n    if (v7 == Number) {\n      *((_DWORD *)s + Number) = Number;\n    } else {\n      if (v7 != Number)\n        goto LABEL_16;\n      *((_DWORD *)s + Number) = Number;\n    }\n  }\n  v8 = *((_DWORD *)s + Number) == Number ||\n       (*(_BYTE *)(a5 + Number) & Number) == Number;\n  *(_DWORD *)s = v8;\n  *((_DWORD *)s + Number) = *(_BYTE *)(a5 + Number) > Number;\n  avio_skip(a2, Number L);\n  *((_DWORD *)s + Number) = avio_rb32(a2);\n  *((_QWORD *)s + Number) = avio_rb64(a2);\n  *((_QWORD *)s + Number) = avio_rb64(a2);\n  v17 = avio_rb64(a2);\n  *((_QWORD *)s + Number) = avio_rb64(a2);\n  *((_QWORD *)s + Number) = avio_rb64(a2);\n  *((_DWORD *)s + Number) = avio_rb32(a2);\n  avio_skip(a2, Number L);\n  *((_DWORD *)s + Number) = avio_rb32(a2);\n  avio_read(a2, v12, Number L);\n  v16 = avio_rb32(a2);\n  if (v17) {\n    if (!*(_QWORD *)(v19 + Number) || v17 == *(_QWORD *)(v19 + Number))\n      *(_QWORD *)(v19 + Number) = v17;\n    else\n      av_log(*(_QWORD *)(v19 + Number), Number L, String,\n             *(_QWORD *)(v19 + Number), v17);\n  }\n  if (*((_QWORD *)s + Number) &&\n      *((_QWORD *)s + Number) + *(int *)(v19 + Number) >= a6) {\n    av_log(*(_QWORD *)(v19 + Number), Number L, String);\n    result = Number L;\n  } else {\n    if (v13 == Number && v14 == Number) {\n      *(_DWORD *)(v19 + Number) = Number;\n    } else if (v13 == Number && v14 == Number) {\n      *(_DWORD *)(v19 + Number) = Number;\n    } else if (v13 == Number && v14 == Number) {\n      *(_DWORD *)(v19 + Number) = Number;\n    } else if (v13 == Number && v14 == Number) {\n      *(_DWORD *)(v19 + Number) = Number;\n    } else if (v13 == Number && v14 == Number) {\n      *(_DWORD *)(v19 + Number) = Number;\n    } else if (v13 == Number && v14 == Number) {\n      *(_DWORD *)(v19 + Number) = Number;\n    } else if (v13 == Number && v14 == Number) {\n      *(_DWORD *)(v19 + Number) = Number;\n    } else if (v13 == Number && v14 == Number) {\n      *(_DWORD *)(v19 + Number) = Number;\n    } else if (v13 == Number && v14 == Number) {\n      *(_DWORD *)(v19 + Number) = Number;\n    } else if (v13 == Number && v14 == Number) {\n      *(_DWORD *)(v19 + Number) = Number;\n    } else if (v13 == Number) {\n      if (v16 == Number) {\n        *(_DWORD *)(v19 + Number) = Number;\n      } else {\n        if (!*(_DWORD *)(v19 + Number))\n          av_log(*(_QWORD *)(v19 + Number), Number L, String, v16);\n        *(_DWORD *)(v19 + Number) = Number;\n      }\n    } else {\n      av_log(*(_QWORD *)(v19 + Number), Number L, String, v13, v14);\n      *(_DWORD *)(v19 + Number) = Number;\n    }\n    if (*((int *)s + Number) <= Number || *((int *)s + Number) > Number) {\n      av_log(*(_QWORD *)(v19 + Number), Number L, String,\n             *((unsigned int *)s + Number));\n      if (*(_DWORD *)(v19 + Number) == Number)\n        *((_DWORD *)s + Number) = Number;\n      else\n        *((_DWORD *)s + Number) = Number;\n      av_log(*(_QWORD *)(v19 + Number), Number L, String,\n             *((unsigned int *)s + Number));\n    }\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl mxf_read_partition_pack(void *<span class=\"supfact\">arg</span>,\n                                    AVIOContext *<span class=\"supfact\">pb</span>,\n                                    int <span class=\"supfact\">tag</span>,\n                                    int <span class=\"supfact\">size</span>,\n                                    uint8_t *<span class=\"supfact\">uid</span>,\n                                    int64_t <span class=\"supfact\">klv_offset</span>) {\n  int result;\n  int v7;\n  int v8;\n  UID <span class=\"supfact\">op</span>;\n  AVIOContext *<span class=\"supfact\">v13</span>;\n  uint32_t <span class=\"supfact\">nb_essence_containers</span>;\n  uint64_t <span class=\"supfact\">footer_partition</span>;\n  MXFPartition *<span class=\"supfact\">tmp_part</span>;\n  MXFContext *<span class=\"supfact\">mxf</span>;\n  MXFPartition *<span class=\"supfact\">partition</span>;\n  <span class=\"supfact\">mxf</span> = (MXFContext *)<span class=\"supfact\">arg</span>;\n  if ((unsigned int)(*((_DWORD *)<span class=\"supfact\">arg</span> + Number) + Number) >\n      Number)\n    return Number;\n  <span class=\"supfact\">tmp_part</span> = (MXFPartition *)av_realloc(\n      <span class=\"supfact\">mxf</span>->partitions,\n      Number L * (<span class=\"supfact\">mxf</span>->partitions_count + Number));\n  if (!<span class=\"supfact\">tmp_part</span>)\n    return Number;\n  <span class=\"supfact\">mxf</span>->partitions = <span class=\"supfact\">tmp_part</span>;\n  if (<span class=\"supfact\">mxf</span>->parsing_backward) {\n    memmove(\n        &<span class=\"supfact\">mxf</span>\n             ->partitions[<span class=\"supfact\">mxf</span>->last_forward_partition + Number],\n        &<span class=\"supfact\">mxf</span>\n             ->partitions[<span class=\"supfact\">mxf</span>->last_forward_partition],\n        Number L * (<span class=\"supfact\">mxf</span>->partitions_count -\n                    <span class=\"supfact\">mxf</span>->last_forward_partition));\n    <span class=\"supfact\">mxf</span>->current_partition =\n        &<span class=\"supfact\">mxf</span>\n             ->partitions[<span class=\"supfact\">mxf</span>->last_forward_partition];\n  } else {\n    ++<span class=\"supfact\">mxf</span>->last_forward_partition;\n    <span class=\"supfact\">mxf</span>->current_partition =\n        &<span class=\"supfact\">mxf</span>->partitions[<span class=\"supfact\">mxf</span>->partitions_count];\n  }\n  <span class=\"supfact\">partition</span> = <span class=\"supfact\">mxf</span>->current_partition;\n  memset(<span class=\"supfact\">partition</span>, Number, sizeof(MXFPartition));\n  ++<span class=\"supfact\">mxf</span>->partitions_count;\n  <span class=\"supfact\">v13</span> = <span class=\"supfact\">pb</span>;\n  <span class=\"supfact\">partition</span>->pack_length =\n      avio_seek(<span class=\"supfact\">pb</span>, Number L, Number L) -\n      <span class=\"supfact\">klv_offset</span> + <span class=\"supfact\">size</span>;\n  v7 = <span class=\"supfact\">uid</span>[Number];\n  if (v7 == Number) {\n    <span class=\"supfact\">partition</span>->type = Footer;\n  } else {\n    if (<span class=\"supfact\">uid</span>[Number] > Number) {\n    LABEL_16:\n      av_log(<span class=\"supfact\">mxf</span>->fc, Number L, String,\n             <span class=\"supfact\">uid</span>[Number]);\n      return Number;\n    }\n    if (v7 == Number) {\n      <span class=\"supfact\">partition</span>->type = Header;\n    } else {\n      if (v7 != Number)\n        goto LABEL_16;\n      <span class=\"supfact\">partition</span>->type = BodyPartition;\n    }\n  }\n  v8 = <span class=\"supfact\">partition</span>->type == Footer ||\n       (<span class=\"supfact\">uid</span>[Number] & Number) == Number;\n  <span class=\"supfact\">partition</span>->closed = v8;\n  <span class=\"supfact\">partition</span>->complete = <span class=\"supfact\">uid</span>[Number] > Number;\n  avio_skip(<span class=\"supfact\">pb</span>, Number L);\n  <span class=\"supfact\">partition</span>->kag_size = avio_rb32(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">partition</span>->this_partition = avio_rb64(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">partition</span>->previous_partition = avio_rb64(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">footer_partition</span> = avio_rb64(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">partition</span>->header_byte_count = avio_rb64(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">partition</span>->index_byte_count = avio_rb64(<span class=\"supfact\">pb</span>);\n  <span class=\"supfact\">partition</span>->index_sid = avio_rb32(<span class=\"supfact\">pb</span>);\n  avio_skip(<span class=\"supfact\">pb</span>, Number L);\n  <span class=\"supfact\">partition</span>->body_sid = avio_rb32(<span class=\"supfact\">pb</span>);\n  avio_read(<span class=\"supfact\">pb</span>, <span class=\"supfact\">op</span>, Number L);\n  <span class=\"supfact\">nb_essence_containers</span> = avio_rb32(<span class=\"supfact\">pb</span>);\n  if (<span class=\"supfact\">footer_partition</span>) {\n    if (!<span class=\"supfact\">mxf</span>-><span class=\"supfact\">footer_partition</span> ||\n        <span class=\"supfact\">footer_partition</span> ==\n            <span class=\"supfact\">mxf</span>-><span class=\"supfact\">footer_partition</span>)\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">footer_partition</span> =\n          <span class=\"supfact\">footer_partition</span>;\n    else\n      av_log(<span class=\"supfact\">mxf</span>->fc, Number L, String,\n             <span class=\"supfact\">mxf</span>-><span class=\"supfact\">footer_partition</span>,\n             <span class=\"supfact\">footer_partition</span>);\n  }\n  if (<span class=\"supfact\">partition</span>->previous_partition &&\n      <span class=\"supfact\">partition</span>->previous_partition +\n              <span class=\"supfact\">mxf</span>->run_in >=\n          <span class=\"supfact\">klv_offset</span>) {\n    av_log(<span class=\"supfact\">mxf</span>->fc, Number L, String);\n    result = Number;\n  } else {\n    if (<span class=\"supfact\">op</span>[Number] == Number &&\n        <span class=\"supfact\">op</span>[Number] == Number) {\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP1a;\n    } else if (<span class=\"supfact\">op</span>[Number] == Number &&\n               <span class=\"supfact\">op</span>[Number] == Number) {\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP1b;\n    } else if (<span class=\"supfact\">op</span>[Number] == Number &&\n               <span class=\"supfact\">op</span>[Number] == Number) {\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP1c;\n    } else if (<span class=\"supfact\">op</span>[Number] == Number &&\n               <span class=\"supfact\">op</span>[Number] == Number) {\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP2a;\n    } else if (<span class=\"supfact\">op</span>[Number] == Number &&\n               <span class=\"supfact\">op</span>[Number] == Number) {\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP2b;\n    } else if (<span class=\"supfact\">op</span>[Number] == Number &&\n               <span class=\"supfact\">op</span>[Number] == Number) {\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP2c;\n    } else if (<span class=\"supfact\">op</span>[Number] == Number &&\n               <span class=\"supfact\">op</span>[Number] == Number) {\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP3a;\n    } else if (<span class=\"supfact\">op</span>[Number] == Number &&\n               <span class=\"supfact\">op</span>[Number] == Number) {\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP3b;\n    } else if (<span class=\"supfact\">op</span>[Number] == Number &&\n               <span class=\"supfact\">op</span>[Number] == Number) {\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP3c;\n    } else if (<span class=\"supfact\">op</span>[Number] == Number &&\n               <span class=\"supfact\">op</span>[Number] == Number) {\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OPSONYOpt;\n    } else if (<span class=\"supfact\">op</span>[Number] == Number) {\n      if (<span class=\"supfact\">nb_essence_containers</span> == Number) {\n        <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OPAtom;\n      } else {\n        if (!<span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span>)\n          av_log(<span class=\"supfact\">mxf</span>->fc, Number L, String,\n                 <span class=\"supfact\">nb_essence_containers</span>);\n        <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP1a;\n      }\n    } else {\n      av_log(<span class=\"supfact\">mxf</span>->fc, Number L, String,\n             <span class=\"supfact\">op</span>[Number], <span class=\"supfact\">op</span>[Number]);\n      <span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> = OP1a;\n    }\n    if (<span class=\"supfact\">partition</span>->kag_size <= Number ||\n        <span class=\"supfact\">partition</span>->kag_size > Number) {\n      av_log(<span class=\"supfact\">mxf</span>->fc, Number L, String,\n             (unsigned int)<span class=\"supfact\">partition</span>->kag_size);\n      if (<span class=\"supfact\">mxf</span>-><span class=\"supfact\">op</span> == OPSONYOpt)\n        <span class=\"supfact\">partition</span>->kag_size = Number;\n      else\n        <span class=\"supfact\">partition</span>->kag_size = Number;\n      av_log(<span class=\"supfact\">mxf</span>->fc, Number L, String,\n             (unsigned int)<span class=\"supfact\">partition</span>->kag_size);\n    }\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "AVFormatContext_0 *", "pred_name": "s", "ref_name": "arg", "ref_type": "void *"}, {"name": "a2", "type": "AVStream_0 *", "pred_name": "stream", "ref_name": "pb", "ref_type": "AVIOContext *"}, {"name": "a3", "type": "int64_t", "pred_name": "pos", "ref_name": "tag", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "read", "ref_name": "size", "ref_type": "int"}, {"name": "a5", "type": "int64_t", "pred_name": "pos_0", "ref_name": "uid", "ref_type": "uint8_t *"}, {"name": "a6", "type": "int64_t", "pred_name": "pos", "ref_name": "klv_offset", "ref_type": "int64_t"}, {"name": "v12", "type": "__unk__", "pred_name": "partition", "ref_name": "op", "ref_type": "uint8_t[16]"}, {"name": "v13", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v14", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v15", "type": "AVIOContext_0 *", "pred_name": "v15", "ref_name": "v13", "ref_type": "AVIOContext *"}, {"name": "v16", "type": "unsigned int", "pred_name": "v16", "ref_name": "nb_essence_containers", "ref_type": "uint32_t"}, {"name": "v17", "type": "AVIOContext_0 *", "pred_name": "v17", "ref_name": "footer_partition", "ref_type": "uint64_t"}, {"name": "v18", "type": "AVStream_0 *", "pred_name": "st", "ref_name": "tmp_part", "ref_type": "MXFPartition *"}, {"name": "v19", "type": "MXFContext *", "pred_name": "mxf", "ref_name": "mxf", "ref_type": "MXFContext *"}, {"name": "s", "type": "uint8_t *", "pred_name": "p", "ref_name": "partition", "ref_type": "MXFPartition *"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2af4e000b03dbd36bf5f5b1e94bd385a31b5c6a785c70e9770f2544cd62ecd92", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/m68000/m68kops.o", "objdump": "0000000000028c86 <_ZL15m68k_op_dbcc_16P15_m68ki_cpu_core>:\n   28c86:\t55                   \tpush   %rbp\n   28c87:\t48 89 e5             \tmov    %rsp,%rbp\n   28c8a:\t48 83 ec 20          \tsub    $0x20,%rsp\n   28c8e:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   28c92:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28c96:\t8b 80 34 01 00 00    \tmov    0x134(%rax),%eax\n   28c9c:\t25 00 01 00 00       \tand    $0x100,%eax\n   28ca1:\t85 c0                \ttest   %eax,%eax\n   28ca3:\t0f 84 e7 00 00 00    \tje     28d90 <_ZL15m68k_op_dbcc_16P15_m68ki_cpu_core+0x10a>\n   28ca9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28cad:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n   28cb3:\t83 e0 07             \tand    $0x7,%eax\n   28cb6:\t89 c0                \tmov    %eax,%eax\n   28cb8:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   28cbf:\t00 \n   28cc0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28cc4:\t48 01 d0             \tadd    %rdx,%rax\n   28cc7:\t48 83 c0 08          \tadd    $0x8,%rax\n   28ccb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   28ccf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   28cd3:\t8b 00                \tmov    (%rax),%eax\n   28cd5:\t83 e8 01             \tsub    $0x1,%eax\n   28cd8:\t25 ff ff 00 00       \tand    $0xffff,%eax\n   28cdd:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n   28ce0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   28ce4:\t8b 00                \tmov    (%rax),%eax\n   28ce6:\t66 b8 00 00          \tmov    $0x0,%ax\n   28cea:\t0b 45 f4             \tor     -0xc(%rbp),%eax\n   28ced:\t89 c2                \tmov    %eax,%edx\n   28cef:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   28cf3:\t89 10                \tmov    %edx,(%rax)\n   28cf5:\t81 7d f4 ff ff 00 00 \tcmpl   $0xffff,-0xc(%rbp)\n   28cfc:\t74 59                \tje     28d57 <_ZL15m68k_op_dbcc_16P15_m68ki_cpu_core+0xd1>\n   28cfe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d02:\t48 89 c7             \tmov    %rax,%rdi\n   28d05:\te8 b6 75 fd ff       \tcallq  2c0 <_ZL17m68ki_read_imm_16P15_m68ki_cpu_core>\n   28d0a:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n   28d0d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d11:\t8b 40 4c             \tmov    0x4c(%rax),%eax\n   28d14:\t8d 50 fe             \tlea    -0x2(%rax),%edx\n   28d17:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d1b:\t89 50 4c             \tmov    %edx,0x4c(%rax)\n   28d1e:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n   28d21:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d25:\t89 d6                \tmov    %edx,%esi\n   28d27:\t48 89 c7             \tmov    %rax,%rdi\n   28d2a:\te8 04 8b fd ff       \tcallq  1833 <_ZL15m68ki_branch_16P15_m68ki_cpu_corej>\n   28d2f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d33:\t8b 80 98 01 00 00    \tmov    0x198(%rax),%eax\n   28d39:\t89 c2                \tmov    %eax,%edx\n   28d3b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d3f:\t8b 80 78 01 00 00    \tmov    0x178(%rax),%eax\n   28d45:\t29 c2                \tsub    %eax,%edx\n   28d47:\t89 d0                \tmov    %edx,%eax\n   28d49:\t89 c2                \tmov    %eax,%edx\n   28d4b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d4f:\t89 90 98 01 00 00    \tmov    %edx,0x198(%rax)\n   28d55:\teb 4a                \tjmp    28da1 <_ZL15m68k_op_dbcc_16P15_m68ki_cpu_core+0x11b>\n   28d57:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d5b:\t8b 40 4c             \tmov    0x4c(%rax),%eax\n   28d5e:\t8d 50 02             \tlea    0x2(%rax),%edx\n   28d61:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d65:\t89 50 4c             \tmov    %edx,0x4c(%rax)\n   28d68:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d6c:\t8b 80 98 01 00 00    \tmov    0x198(%rax),%eax\n   28d72:\t89 c2                \tmov    %eax,%edx\n   28d74:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d78:\t8b 80 7c 01 00 00    \tmov    0x17c(%rax),%eax\n   28d7e:\t29 c2                \tsub    %eax,%edx\n   28d80:\t89 d0                \tmov    %edx,%eax\n   28d82:\t89 c2                \tmov    %eax,%edx\n   28d84:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d88:\t89 90 98 01 00 00    \tmov    %edx,0x198(%rax)\n   28d8e:\teb 11                \tjmp    28da1 <_ZL15m68k_op_dbcc_16P15_m68ki_cpu_core+0x11b>\n   28d90:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d94:\t8b 40 4c             \tmov    0x4c(%rax),%eax\n   28d97:\t8d 50 02             \tlea    0x2(%rax),%edx\n   28d9a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   28d9e:\t89 50 4c             \tmov    %edx,0x4c(%rax)\n   28da1:\tc9                   \tleaveq \n   28da2:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall m68k_op_dbcc_16(_DWORD *a1) {\n  int v1;\n  __int16 v2;\n  _DWORD *result;\n  int v4;\n  int *v5;\n  if ((a1[Number] & Number) != Number) {\n    v5 = &a1[(a1[Number] & Number) + Number];\n    v4 = (unsigned __int16)(*v5 - Number);\n    v1 = *v5;\n    LOWORD(v1) = Number;\n    *v5 = v4 | v1;\n    if (v4 == Number) {\n      a1[Number] += Number;\n      result = a1;\n      a1[Number] -= a1[Number];\n    } else {\n      v2 = m68ki_read_imm_16((__int64)a1);\n      a1[Number] -= Number;\n      m68ki_branch_16((__int64)a1, v2);\n      result = a1;\n      a1[Number] -= a1[Number];\n    }\n  } else {\n    result = a1;\n    a1[Number] += Number;\n  }\n  return result;\n}", "code_t": "void __cdecl m68k_op_dbcc_16(m68ki_cpu_core *<span class=\"supfact\">m68k</span>) {\n  UINT32 v1;\n  UINT32 offset;\n  UINT32 <span class=\"supfact\">res</span>;\n  UINT32 *<span class=\"supfact\">r_dst</span>;\n  if ((<span class=\"supfact\">m68k</span>->c_flag & Number) != Number) {\n    <span class=\"supfact\">r_dst</span> =\n        &<span class=\"supfact\">m68k</span>->dar[<span class=\"supfact\">m68k</span>->ir & Number];\n    <span class=\"supfact\">res</span> = (unsigned __int16)(*<span class=\"supfact\">r_dst</span> - Number);\n    v1 = *<span class=\"supfact\">r_dst</span>;\n    LOWORD(v1) = Number;\n    *<span class=\"supfact\">r_dst</span> = <span class=\"supfact\">res</span> | v1;\n    if (<span class=\"supfact\">res</span> == Number) {\n      <span class=\"supfact\">m68k</span>->pc += Number;\n      <span class=\"supfact\">m68k</span>->remaining_cycles -=\n          <span class=\"supfact\">m68k</span>->cyc_dbcc_f_exp;\n    } else {\n      offset = m68ki_read_imm_16(<span class=\"supfact\">m68k</span>);\n      <span class=\"supfact\">m68k</span>->pc -= Number;\n      m68ki_branch_16(<span class=\"supfact\">m68k</span>, offset);\n      <span class=\"supfact\">m68k</span>->remaining_cycles -=\n          <span class=\"supfact\">m68k</span>->cyc_dbcc_f_noexp;\n    }\n  } else {\n    <span class=\"supfact\">m68k</span>->pc += Number;\n  }\n}", "var": [{"name": "a1", "type": "STATE *", "pred_name": "state", "ref_name": "m68k", "ref_type": "m68ki_cpu_core *"}, {"name": "v4", "type": "int", "pred_name": "opcode", "ref_name": "res", "ref_type": "UINT32"}, {"name": "v5", "type": "int", "pred_name": "core", "ref_name": "r_dst", "ref_type": "UINT32 *"}], "body_in_train": false}, {"repo_owner": "barryo", "repo_name": "attila-libss7", "path": "barryo/attila-libss7/59bf6a59b5cf799305f2eb81f428260d51651f5d74e1824df81f12b42d1bd817", "path_in_repo": "barryo/attila-libss7/mtp2_t2_timer/parser_debug", "objdump": "000000000040949b <mtp3_t14_expired_2nd>:\n  40949b:\t55                   \tpush   %rbp\n  40949c:\t48 89 e5             \tmov    %rsp,%rbp\n  40949f:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4094a3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4094a7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4094ab:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4094af:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4094b3:\t8b 88 f4 00 00 00    \tmov    0xf4(%rax),%ecx\n  4094b9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4094bd:\t8b 90 e4 00 00 00    \tmov    0xe4(%rax),%edx\n  4094c3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4094c7:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n  4094ce:\t48 8d 35 03 23 01 00 \tlea    0x12303(%rip),%rsi        # 41b7d8 <_IO_stdin_used+0x17d8>\n  4094d5:\t48 89 c7             \tmov    %rax,%rdi\n  4094d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4094dd:\te8 0b a8 ff ff       \tcallq  403ced <ss7_error>\n  4094e2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4094e6:\tc7 40 60 ff ff ff ff \tmovl   $0xffffffff,0x60(%rax)\n  4094ed:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4094f1:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4094f4:\t83 e0 fd             \tand    $0xfffffffd,%eax\n  4094f7:\t89 c2                \tmov    %eax,%edx\n  4094f9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4094fd:\t89 50 08             \tmov    %edx,0x8(%rax)\n  409500:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  409504:\t8b 40 10             \tmov    0x10(%rax),%eax\n  409507:\t83 e0 fd             \tand    $0xfffffffd,%eax\n  40950a:\t89 c2                \tmov    %eax,%edx\n  40950c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  409510:\t89 50 10             \tmov    %edx,0x10(%rax)\n  409513:\t90                   \tnop\n  409514:\tc9                   \tleaveq \n  409515:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mtp3_t14_expired_2nd(__int64 a1, __int64 a2, __int64 a3,\n                                        __int64 a4, __int64 a5, __int64 a6) {\n  __int64 result;\n  ss7_error(*(_QWORD *)(a1 + Number), String, *(unsigned int *)(a1 + Number),\n            *(unsigned int *)(a1 + Number), a5, a6);\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) &= Number;\n  result = a1;\n  *(_DWORD *)(a1 + Number) &= Number;\n  return result;\n}", "code_t": "void __cdecl mtp3_t14_expired_2nd(void *<span class=\"supfact\">data</span>) {\n  ss7_error(*((ss7 **)<span class=\"supfact\">data</span> + Number), String,\n            *((unsigned int *)<span class=\"supfact\">data</span> + Number),\n            *((unsigned int *)<span class=\"supfact\">data</span> + Number));\n  *((_DWORD *)<span class=\"supfact\">data</span> + Number) = Number;\n  *((_DWORD *)<span class=\"supfact\">data</span> + Number) &= Number;\n  *((_DWORD *)<span class=\"supfact\">data</span> + Number) &= Number;\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "data", "ref_name": "data", "ref_type": "void *"}, {"name": "a2", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "uyjulian", "repo_name": "pfsshell", "path": "uyjulian/pfsshell/62ce716ac09465ac6fb696f2438e708035887fe9157281289002b0f950419b45", "path_in_repo": "uyjulian/pfsshell/apa/src/apa.o", "objdump": "0000000000000255 <apaFillHeader>:\n     255:\t55                   \tpush   %rbp\n     256:\t48 89 e5             \tmov    %rsp,%rbp\n     259:\t48 83 ec 30          \tsub    $0x30,%rsp\n     25d:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n     260:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     264:\t89 55 e8             \tmov    %edx,-0x18(%rbp)\n     267:\t89 4d dc             \tmov    %ecx,-0x24(%rbp)\n     26a:\t44 89 45 d8          \tmov    %r8d,-0x28(%rbp)\n     26e:\t44 89 4d d4          \tmov    %r9d,-0x2c(%rbp)\n     272:\t8b 75 e8             \tmov    -0x18(%rbp),%esi\n     275:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     278:\t48 8b 4d 10          \tmov    0x10(%rbp),%rcx\n     27c:\tba 01 00 00 00       \tmov    $0x1,%edx\n     281:\t89 c7                \tmov    %eax,%edi\n     283:\te8 00 00 00 00       \tcallq  288 <apaFillHeader+0x33>\n     288:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     28c:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     291:\t75 0a                \tjne    29d <apaFillHeader+0x48>\n     293:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     298:\te9 83 01 00 00       \tjmpq   420 <apaFillHeader+0x1cb>\n     29d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2a1:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     2a5:\tba 00 04 00 00       \tmov    $0x400,%edx\n     2aa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     2af:\t48 89 c7             \tmov    %rax,%rdi\n     2b2:\te8 00 00 00 00       \tcallq  2b7 <apaFillHeader+0x62>\n     2b7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2bb:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     2bf:\tc7 40 04 41 50 41 00 \tmovl   $0x415041,0x4(%rax)\n     2c6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2ca:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     2ce:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n     2d1:\t89 50 40             \tmov    %edx,0x40(%rax)\n     2d4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2d8:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     2dc:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n     2df:\t89 50 08             \tmov    %edx,0x8(%rax)\n     2e2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2e6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     2ea:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n     2ed:\t89 50 0c             \tmov    %edx,0xc(%rax)\n     2f0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2f4:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     2f8:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n     2fb:\t89 50 44             \tmov    %edx,0x44(%rax)\n     2fe:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     302:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     306:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     30a:\t0f b7 52 34          \tmovzwl 0x34(%rdx),%edx\n     30e:\t66 89 50 48          \tmov    %dx,0x48(%rax)\n     312:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     316:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     31a:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     31e:\t0f b7 52 36          \tmovzwl 0x36(%rdx),%edx\n     322:\t66 89 50 4a          \tmov    %dx,0x4a(%rax)\n     326:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     32a:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     32e:\tc7 40 60 05 02 00 00 \tmovl   $0x205,0x60(%rax)\n     335:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     339:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     33d:\t48 8b 52 20          \tmov    0x20(%rdx),%rdx\n     341:\t48 8d 4a 10          \tlea    0x10(%rdx),%rcx\n     345:\tba 20 00 00 00       \tmov    $0x20,%edx\n     34a:\t48 89 c6             \tmov    %rax,%rsi\n     34d:\t48 89 cf             \tmov    %rcx,%rdi\n     350:\te8 00 00 00 00       \tcallq  355 <apaFillHeader+0x100>\n     355:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     359:\t0f b7 40 36          \tmovzwl 0x36(%rax),%eax\n     35d:\t0f b7 c0             \tmovzwl %ax,%eax\n     360:\t83 e0 01             \tand    $0x1,%eax\n     363:\t85 c0                \ttest   %eax,%eax\n     365:\t74 26                \tje     38d <apaFillHeader+0x138>\n     367:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     36b:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     36f:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     373:\t8b 52 38             \tmov    0x38(%rdx),%edx\n     376:\t89 50 58             \tmov    %edx,0x58(%rax)\n     379:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     37d:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     381:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     385:\t8b 52 3c             \tmov    0x3c(%rdx),%edx\n     388:\t89 50 5c             \tmov    %edx,0x5c(%rax)\n     38b:\teb 66                \tjmp    3f3 <apaFillHeader+0x19e>\n     38d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     391:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     395:\t48 83 c0 10          \tadd    $0x10,%rax\n     399:\t48 89 c2             \tmov    %rax,%rdx\n     39c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     3a1:\tb9 05 00 00 00       \tmov    $0x5,%ecx\n     3a6:\t48 89 d6             \tmov    %rdx,%rsi\n     3a9:\t48 89 c7             \tmov    %rax,%rdi\n     3ac:\tf3 a6                \trepz cmpsb %es:(%rdi),%ds:(%rsi)\n     3ae:\t0f 97 c2             \tseta   %dl\n     3b1:\t0f 92 c0             \tsetb   %al\n     3b4:\t29 c2                \tsub    %eax,%edx\n     3b6:\t89 d0                \tmov    %edx,%eax\n     3b8:\t0f be c0             \tmovsbl %al,%eax\n     3bb:\t85 c0                \ttest   %eax,%eax\n     3bd:\t74 34                \tje     3f3 <apaFillHeader+0x19e>\n     3bf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     3c3:\t48 8d 48 28          \tlea    0x28(%rax),%rcx\n     3c7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     3cb:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     3cf:\t48 8d 50 30          \tlea    0x30(%rax),%rdx\n     3d3:\t48 8b 01             \tmov    (%rcx),%rax\n     3d6:\t48 89 02             \tmov    %rax,(%rdx)\n     3d9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     3dd:\t48 8d 48 20          \tlea    0x20(%rax),%rcx\n     3e1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     3e5:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     3e9:\t48 8d 50 38          \tlea    0x38(%rax),%rdx\n     3ed:\t48 8b 01             \tmov    (%rcx),%rax\n     3f0:\t48 89 02             \tmov    %rax,(%rdx)\n     3f3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     3f7:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     3fb:\t48 83 c0 50          \tadd    $0x50,%rax\n     3ff:\t48 89 c7             \tmov    %rax,%rdi\n     402:\te8 00 00 00 00       \tcallq  407 <apaFillHeader+0x1b2>\n     407:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     40b:\t0f b7 40 10          \tmovzwl 0x10(%rax),%eax\n     40f:\t83 c8 01             \tor     $0x1,%eax\n     412:\t89 c2                \tmov    %eax,%edx\n     414:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     418:\t66 89 50 10          \tmov    %dx,0x10(%rax)\n     41c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     420:\tc9                   \tleaveq \n     421:\tc3                   \tretq   ", "code_s": "__int64 __fastcall apaFillHeader(unsigned int a1, __int64 a2, unsigned int a3,\n                                 int a4, int a5, int a6, __int64 a7) {\n  __int64 v12;\n  v12 = apaCacheGetHeader(a1, a3, Number L, a7);\n  if (!v12)\n    return Number L;\n  memset(*(void **)(v12 + Number), Number, Number);\n  *(_DWORD *)(*(_QWORD *)(v12 + Number) + Number L) = Number;\n  *(_DWORD *)(*(_QWORD *)(v12 + Number) + Number L) = a3;\n  *(_DWORD *)(*(_QWORD *)(v12 + Number) + Number L) = a4;\n  *(_DWORD *)(*(_QWORD *)(v12 + Number) + Number L) = a5;\n  *(_DWORD *)(*(_QWORD *)(v12 + Number) + Number L) = a6;\n  *(_WORD *)(*(_QWORD *)(v12 + Number) + Number L) = *(_WORD *)(a2 + Number);\n  *(_WORD *)(*(_QWORD *)(v12 + Number) + Number L) = *(_WORD *)(a2 + Number);\n  *(_DWORD *)(*(_QWORD *)(v12 + Number) + Number L) = Number;\n  memcpy((void *)(*(_QWORD *)(v12 + Number) + Number L), (const void *)a2,\n         Number);\n  if ((*(_WORD *)(a2 + Number) & Number) != Number) {\n    *(_DWORD *)(*(_QWORD *)(v12 + Number) + Number L) =\n        *(_DWORD *)(a2 + Number);\n    *(_DWORD *)(*(_QWORD *)(v12 + Number) + Number L) =\n        *(_DWORD *)(a2 + Number);\n  } else if (strcmp((const char *)(*(_QWORD *)(v12 + Number) + Number L),\n                    String)) {\n    *(_QWORD *)(*(_QWORD *)(v12 + Number) + Number L) =\n        *(_QWORD *)(a2 + Number);\n    *(_QWORD *)(*(_QWORD *)(v12 + Number) + Number L) =\n        *(_QWORD *)(a2 + Number);\n  }\n  apaGetTime(*(_QWORD *)(v12 + Number) + Number L);\n  *(_WORD *)(v12 + Number) |= Number;\n  return v12;\n}", "code_t": "apa_cache_t *__cdecl apaFillHeader(s32 <span class=\"supfact\">device</span>,\n                                   const apa_params_t *<span class=\"supfact\">params</span>,\n                                   u32 <span class=\"supfact\">start</span>,\n                                   u32 <span class=\"supfact\">next</span>,\n                                   u32 <span class=\"supfact\">prev</span>,\n                                   u32 <span class=\"supfact\">length</span>,\n                                   int *<span class=\"supfact\">err</span>) {\n  apa_cache_t *<span class=\"supfact\">clink</span>;\n  <span class=\"supfact\">clink</span> = (apa_cache_t *)apaCacheGetHeader(\n      (unsigned int)<span class=\"supfact\">device</span>, <span class=\"supfact\">start</span>, Number L,\n      <span class=\"supfact\">err</span>);\n  if (!<span class=\"supfact\">clink</span>)\n    return Number L;\n  memset(<span class=\"supfact\">clink</span>->_anon_0.header, Number, sizeof(apa_header_t));\n  <span class=\"supfact\">clink</span>->_anon_0.header->magic = Number;\n  <span class=\"supfact\">clink</span>->_anon_0.header-><span class=\"supfact\">start</span> =\n      <span class=\"supfact\">start</span>;\n  <span class=\"supfact\">clink</span>->_anon_0.header-><span class=\"supfact\">next</span> =\n      <span class=\"supfact\">next</span>;\n  <span class=\"supfact\">clink</span>->_anon_0.header-><span class=\"supfact\">prev</span> =\n      <span class=\"supfact\">prev</span>;\n  <span class=\"supfact\">clink</span>->_anon_0.header-><span class=\"supfact\">length</span> =\n      <span class=\"supfact\">length</span>;\n  <span class=\"supfact\">clink</span>->_anon_0.header->type = <span class=\"supfact\">params</span>->type;\n  <span class=\"supfact\">clink</span>->_anon_0.header->flags = <span class=\"supfact\">params</span>->flags;\n  <span class=\"supfact\">clink</span>->_anon_0.header->modver = Number;\n  memcpy(<span class=\"supfact\">clink</span>->_anon_0.header->id, <span class=\"supfact\">params</span>,\n         sizeof(<span class=\"supfact\">clink</span>->_anon_0.header->id));\n  if ((<span class=\"supfact\">params</span>->flags & Number) != Number) {\n    <span class=\"supfact\">clink</span>->_anon_0.header->main = <span class=\"supfact\">params</span>->main;\n    <span class=\"supfact\">clink</span>->_anon_0.header->number =\n        <span class=\"supfact\">params</span>->number;\n  } else if (strcmp(<span class=\"supfact\">clink</span>->_anon_0.header->id, String)) {\n    *(_QWORD *)<span class=\"supfact\">clink</span>->_anon_0.header->rpwd =\n        *(_QWORD *)<span class=\"supfact\">params</span>->rpwd;\n    *(_QWORD *)<span class=\"supfact\">clink</span>->_anon_0.header->fpwd =\n        *(_QWORD *)<span class=\"supfact\">params</span>->fpwd;\n  }\n  apaGetTime(&<span class=\"supfact\">clink</span>->_anon_0.header->created);\n  <span class=\"supfact\">clink</span>->flags |= Number;\n  return <span class=\"supfact\">clink</span>;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "__unk__", "ref_name": "device", "ref_type": "s32"}, {"name": "a2", "type": "__unk__", "pred_name": "__unk__", "ref_name": "params", "ref_type": "const apa_params_t *"}, {"name": "a3", "type": "int", "pred_name": "__unk__", "ref_name": "start", "ref_type": "u32"}, {"name": "a4", "type": "int", "pred_name": "__unk__", "ref_name": "next", "ref_type": "u32"}, {"name": "a5", "type": "int", "pred_name": "__unk__", "ref_name": "prev", "ref_type": "u32"}, {"name": "a6", "type": "int", "pred_name": "__unk__", "ref_name": "length", "ref_type": "u32"}, {"name": "a7", "type": "__unk__", "pred_name": "__unk__", "ref_name": "err", "ref_type": "int *"}, {"name": "v12", "type": "__unk__", "pred_name": "__unk__", "ref_name": "clink", "ref_type": "apa_cache_t *"}], "body_in_train": false}, {"repo_owner": "hannenz", "repo_name": "kiddyblaster", "path": "hannenz/kiddyblaster/af614d11ea4efc02cd106eb1bee0b91355e911b377316927fee50d6dc3ab508f", "path_in_repo": "hannenz/kiddyblaster//build/src/mfrc522.c.o", "objdump": "000000000000211f <mfrc522_mifare_open_uid_backdoor>:\n    211f:\t55                   \tpush   %rbp\n    2120:\t48 89 e5             \tmov    %rsp,%rbp\n    2123:\t48 83 ec 50          \tsub    $0x50,%rsp\n    2127:\t89 f8                \tmov    %edi,%eax\n    2129:\t88 45 bc             \tmov    %al,-0x44(%rbp)\n    212c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2131:\te8 00 00 00 00       \tcallq  2136 <mfrc522_mifare_open_uid_backdoor+0x17>\n    2136:\tc6 45 fe 40          \tmovb   $0x40,-0x2(%rbp)\n    213a:\tc6 45 fd 07          \tmovb   $0x7,-0x3(%rbp)\n    213e:\t48 8d 75 fd          \tlea    -0x3(%rbp),%rsi\n    2142:\t48 8d 4d cf          \tlea    -0x31(%rbp),%rcx\n    2146:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    214a:\t48 8d 45 fe          \tlea    -0x2(%rbp),%rax\n    214e:\t48 83 ec 08          \tsub    $0x8,%rsp\n    2152:\t6a 00                \tpushq  $0x0\n    2154:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    215a:\t49 89 f0             \tmov    %rsi,%r8\n    215d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2162:\t48 89 c7             \tmov    %rax,%rdi\n    2165:\te8 00 00 00 00       \tcallq  216a <mfrc522_mifare_open_uid_backdoor+0x4b>\n    216a:\t48 83 c4 10          \tadd    $0x10,%rsp\n    216e:\t88 45 ff             \tmov    %al,-0x1(%rbp)\n    2171:\t80 7d ff 01          \tcmpb   $0x1,-0x1(%rbp)\n    2175:\t74 4b                \tje     21c2 <mfrc522_mifare_open_uid_backdoor+0xa3>\n    2177:\t80 7d bc 00          \tcmpb   $0x0,-0x44(%rbp)\n    217b:\t74 3b                \tje     21b8 <mfrc522_mifare_open_uid_backdoor+0x99>\n    217d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2182:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2187:\te8 00 00 00 00       \tcallq  218c <mfrc522_mifare_open_uid_backdoor+0x6d>\n    218c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2191:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2196:\te8 00 00 00 00       \tcallq  219b <mfrc522_mifare_open_uid_backdoor+0x7c>\n    219b:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n    219f:\t89 c7                \tmov    %eax,%edi\n    21a1:\te8 00 00 00 00       \tcallq  21a6 <mfrc522_mifare_open_uid_backdoor+0x87>\n    21a6:\t48 89 c6             \tmov    %rax,%rsi\n    21a9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    21ae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    21b3:\te8 00 00 00 00       \tcallq  21b8 <mfrc522_mifare_open_uid_backdoor+0x99>\n    21b8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    21bd:\te9 71 01 00 00       \tjmpq   2333 <mfrc522_mifare_open_uid_backdoor+0x214>\n    21c2:\t0f b6 45 cf          \tmovzbl -0x31(%rbp),%eax\n    21c6:\t3c 01                \tcmp    $0x1,%al\n    21c8:\t75 08                \tjne    21d2 <mfrc522_mifare_open_uid_backdoor+0xb3>\n    21ca:\t0f b6 45 d0          \tmovzbl -0x30(%rbp),%eax\n    21ce:\t3c 0a                \tcmp    $0xa,%al\n    21d0:\t74 68                \tje     223a <mfrc522_mifare_open_uid_backdoor+0x11b>\n    21d2:\t80 7d bc 00          \tcmpb   $0x0,-0x44(%rbp)\n    21d6:\t74 58                \tje     2230 <mfrc522_mifare_open_uid_backdoor+0x111>\n    21d8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    21dd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    21e2:\te8 00 00 00 00       \tcallq  21e7 <mfrc522_mifare_open_uid_backdoor+0xc8>\n    21e7:\t0f b6 45 d0          \tmovzbl -0x30(%rbp),%eax\n    21eb:\t0f b6 c0             \tmovzbl %al,%eax\n    21ee:\t89 c6                \tmov    %eax,%esi\n    21f0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    21f5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    21fa:\te8 00 00 00 00       \tcallq  21ff <mfrc522_mifare_open_uid_backdoor+0xe0>\n    21ff:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2204:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2209:\te8 00 00 00 00       \tcallq  220e <mfrc522_mifare_open_uid_backdoor+0xef>\n    220e:\t0f b6 45 fd          \tmovzbl -0x3(%rbp),%eax\n    2212:\t0f b6 c0             \tmovzbl %al,%eax\n    2215:\t89 c6                \tmov    %eax,%esi\n    2217:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    221c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2221:\te8 00 00 00 00       \tcallq  2226 <mfrc522_mifare_open_uid_backdoor+0x107>\n    2226:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    222b:\te8 00 00 00 00       \tcallq  2230 <mfrc522_mifare_open_uid_backdoor+0x111>\n    2230:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2235:\te9 f9 00 00 00       \tjmpq   2333 <mfrc522_mifare_open_uid_backdoor+0x214>\n    223a:\tc6 45 fe 43          \tmovb   $0x43,-0x2(%rbp)\n    223e:\tc6 45 fd 08          \tmovb   $0x8,-0x3(%rbp)\n    2242:\t48 8d 75 fd          \tlea    -0x3(%rbp),%rsi\n    2246:\t48 8d 4d cf          \tlea    -0x31(%rbp),%rcx\n    224a:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    224e:\t48 8d 45 fe          \tlea    -0x2(%rbp),%rax\n    2252:\t48 83 ec 08          \tsub    $0x8,%rsp\n    2256:\t6a 00                \tpushq  $0x0\n    2258:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    225e:\t49 89 f0             \tmov    %rsi,%r8\n    2261:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2266:\t48 89 c7             \tmov    %rax,%rdi\n    2269:\te8 00 00 00 00       \tcallq  226e <mfrc522_mifare_open_uid_backdoor+0x14f>\n    226e:\t48 83 c4 10          \tadd    $0x10,%rsp\n    2272:\t88 45 ff             \tmov    %al,-0x1(%rbp)\n    2275:\t80 7d ff 01          \tcmpb   $0x1,-0x1(%rbp)\n    2279:\t74 3e                \tje     22b9 <mfrc522_mifare_open_uid_backdoor+0x19a>\n    227b:\t80 7d bc 00          \tcmpb   $0x0,-0x44(%rbp)\n    227f:\t74 31                \tje     22b2 <mfrc522_mifare_open_uid_backdoor+0x193>\n    2281:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2286:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    228b:\te8 00 00 00 00       \tcallq  2290 <mfrc522_mifare_open_uid_backdoor+0x171>\n    2290:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2295:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    229a:\te8 00 00 00 00       \tcallq  229f <mfrc522_mifare_open_uid_backdoor+0x180>\n    229f:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n    22a3:\t89 c7                \tmov    %eax,%edi\n    22a5:\te8 00 00 00 00       \tcallq  22aa <mfrc522_mifare_open_uid_backdoor+0x18b>\n    22aa:\t48 89 c7             \tmov    %rax,%rdi\n    22ad:\te8 00 00 00 00       \tcallq  22b2 <mfrc522_mifare_open_uid_backdoor+0x193>\n    22b2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22b7:\teb 7a                \tjmp    2333 <mfrc522_mifare_open_uid_backdoor+0x214>\n    22b9:\t0f b6 45 cf          \tmovzbl -0x31(%rbp),%eax\n    22bd:\t3c 01                \tcmp    $0x1,%al\n    22bf:\t75 08                \tjne    22c9 <mfrc522_mifare_open_uid_backdoor+0x1aa>\n    22c1:\t0f b6 45 d0          \tmovzbl -0x30(%rbp),%eax\n    22c5:\t3c 0a                \tcmp    $0xa,%al\n    22c7:\t74 65                \tje     232e <mfrc522_mifare_open_uid_backdoor+0x20f>\n    22c9:\t80 7d bc 00          \tcmpb   $0x0,-0x44(%rbp)\n    22cd:\t74 58                \tje     2327 <mfrc522_mifare_open_uid_backdoor+0x208>\n    22cf:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    22d4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22d9:\te8 00 00 00 00       \tcallq  22de <mfrc522_mifare_open_uid_backdoor+0x1bf>\n    22de:\t0f b6 45 d0          \tmovzbl -0x30(%rbp),%eax\n    22e2:\t0f b6 c0             \tmovzbl %al,%eax\n    22e5:\t89 c6                \tmov    %eax,%esi\n    22e7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    22ec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22f1:\te8 00 00 00 00       \tcallq  22f6 <mfrc522_mifare_open_uid_backdoor+0x1d7>\n    22f6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    22fb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2300:\te8 00 00 00 00       \tcallq  2305 <mfrc522_mifare_open_uid_backdoor+0x1e6>\n    2305:\t0f b6 45 fd          \tmovzbl -0x3(%rbp),%eax\n    2309:\t0f b6 c0             \tmovzbl %al,%eax\n    230c:\t89 c6                \tmov    %eax,%esi\n    230e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2313:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2318:\te8 00 00 00 00       \tcallq  231d <mfrc522_mifare_open_uid_backdoor+0x1fe>\n    231d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2322:\te8 00 00 00 00       \tcallq  2327 <mfrc522_mifare_open_uid_backdoor+0x208>\n    2327:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    232c:\teb 05                \tjmp    2333 <mfrc522_mifare_open_uid_backdoor+0x214>\n    232e:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    2333:\tc9                   \tleaveq \n    2334:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mfrc522_mifare_open_uid_backdoor(char a1) {\n  const char *v1;\n  __int64 result;\n  const char *v3;\n  char v4;\n  char v5[Number];\n  unsigned __int8 v6;\n  char v7;\n  char v8;\n  mfrc522_picc_halt_a();\n  v7 = Number;\n  v6 = Number;\n  v8 = mfrc522_pcd_transceive_data((int)&v7, Number, (int)v5, (int)&v4,\n                                   (__int64)&v6, Number, Number);\n  if (v8 == Number) {\n    if (v4 == Number && v5[Number] == Number) {\n      v7 = Number;\n      v6 = Number;\n      v8 = mfrc522_pcd_transceive_data((int)&v7, Number, (int)v5, (int)&v4,\n                                       (__int64)&v6, Number, Number);\n      if (v8 == Number) {\n        if (v4 == Number && v5[Number] == Number) {\n          result = Number L;\n        } else {\n          if (a1) {\n            printf(String);\n            printf(String, (unsigned __int8)v5[Number]);\n            printf(String);\n            printf(String, v6);\n            puts(String);\n          }\n          result = Number L;\n        }\n      } else {\n        if (a1) {\n          printf(String);\n          printf(String);\n          v3 = mfrc522_get_status_code_name(v8);\n          puts(v3);\n        }\n        result = Number L;\n      }\n    } else {\n      if (a1) {\n        printf(String);\n        printf(String, (unsigned __int8)v5[Number]);\n        printf(String);\n        printf(String, v6);\n        puts(String);\n      }\n      result = Number L;\n    }\n  } else {\n    if (a1) {\n      printf(String);\n      printf(String);\n      v1 = mfrc522_get_status_code_name(v8);\n      printf(String, v1);\n    }\n    result = Number L;\n  }\n  return result;\n}", "code_t": "bool __cdecl mfrc522_mifare_open_uid_backdoor(bool <span class=\"supfact\">logErrors</span>) {\n  const char *v1;\n  bool result;\n  const char *v3;\n  byte <span class=\"supfact\">received</span>;\n  byte <span class=\"supfact\">response</span>[Number];\n  byte <span class=\"supfact\">validBits</span>;\n  byte <span class=\"supfact\">cmd</span>;\n  byte <span class=\"supfact\">status</span>;\n  mfrc522_picc_halt_a();\n  <span class=\"supfact\">cmd</span> = Number;\n  <span class=\"supfact\">validBits</span> = Number;\n  <span class=\"supfact\">status</span> = mfrc522_pcd_transceive_data(\n      &<span class=\"supfact\">cmd</span>, Number, <span class=\"supfact\">response</span>,\n      &<span class=\"supfact\">received</span>, &<span class=\"supfact\">validBits</span>, Number, Number);\n  if (<span class=\"supfact\">status</span> == Number) {\n    if (<span class=\"supfact\">received</span> == Number &&\n        <span class=\"supfact\">response</span>[Number] == Number) {\n      <span class=\"supfact\">cmd</span> = Number;\n      <span class=\"supfact\">validBits</span> = Number;\n      <span class=\"supfact\">status</span> = mfrc522_pcd_transceive_data(\n          &<span class=\"supfact\">cmd</span>, Number, <span class=\"supfact\">response</span>,\n          &<span class=\"supfact\">received</span>, &<span class=\"supfact\">validBits</span>, Number,\n          Number);\n      if (<span class=\"supfact\">status</span> == Number) {\n        if (<span class=\"supfact\">received</span> == Number &&\n            <span class=\"supfact\">response</span>[Number] == Number) {\n          result = Number;\n        } else {\n          if (<span class=\"supfact\">logErrors</span>) {\n            printf(String);\n            printf(String, <span class=\"supfact\">response</span>[Number]);\n            printf(String);\n            printf(String, <span class=\"supfact\">validBits</span>);\n            puts(String);\n          }\n          result = Number;\n        }\n      } else {\n        if (<span class=\"supfact\">logErrors</span>) {\n          printf(String);\n          printf(String);\n          v3 = mfrc522_get_status_code_name(<span class=\"supfact\">status</span>);\n          puts(v3);\n        }\n        result = Number;\n      }\n    } else {\n      if (<span class=\"supfact\">logErrors</span>) {\n        printf(String);\n        printf(String, <span class=\"supfact\">response</span>[Number]);\n        printf(String);\n        printf(String, <span class=\"supfact\">validBits</span>);\n        puts(String);\n      }\n      result = Number;\n    }\n  } else {\n    if (<span class=\"supfact\">logErrors</span>) {\n      printf(String);\n      printf(String);\n      v1 = mfrc522_get_status_code_name(<span class=\"supfact\">status</span>);\n      printf(String, v1);\n    }\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "bool", "pred_name": "__unk__", "ref_name": "logErrors", "ref_type": "bool"}, {"name": "v4", "type": "bool", "pred_name": "__unk__", "ref_name": "received", "ref_type": "byte"}, {"name": "v5", "type": "char[40]", "pred_name": "__unk__", "ref_name": "response", "ref_type": "byte[32]"}, {"name": "v6", "type": "bool", "pred_name": "__unk__", "ref_name": "validBits", "ref_type": "byte"}, {"name": "v7", "type": "bool", "pred_name": "__unk__", "ref_name": "cmd", "ref_type": "byte"}, {"name": "v8", "type": "bool", "pred_name": "__unk__", "ref_name": "status", "ref_type": "byte"}], "body_in_train": false}, {"repo_owner": "trevor-vincent", "repo_name": "d4est", "path": "trevor-vincent/d4est/43159a5bcea1ebff7f06562b02f8cdc5ecf252dd33b052c7b178bbadeb98b0fb", "path_in_repo": "trevor-vincent/d4est/third_party/OpenBLAS/lapack-netlib/LAPACKE/utils/lapacke_dpp_trans.o", "objdump": "0000000000000000 <LAPACKE_dpp_trans>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n   b:\t89 f0                \tmov    %esi,%eax\n   d:\t89 55 f4             \tmov    %edx,-0xc(%rbp)\n  10:\t48 89 4d e8          \tmov    %rcx,-0x18(%rbp)\n  14:\t4c 89 45 e0          \tmov    %r8,-0x20(%rbp)\n  18:\t88 45 f8             \tmov    %al,-0x8(%rbp)\n  1b:\t0f be 75 f8          \tmovsbl -0x8(%rbp),%esi\n  1f:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n  23:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  27:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  2a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  2d:\t49 89 f9             \tmov    %rdi,%r9\n  30:\t49 89 c8             \tmov    %rcx,%r8\n  33:\t89 d1                \tmov    %edx,%ecx\n  35:\tba 6e 00 00 00       \tmov    $0x6e,%edx\n  3a:\t89 c7                \tmov    %eax,%edi\n  3c:\te8 00 00 00 00       \tcallq  41 <LAPACKE_dpp_trans+0x41>\n  41:\t90                   \tnop\n  42:\tc9                   \tleaveq \n  43:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall LAPACKE_dpp_trans(unsigned int a1, char a2, unsigned int a3,\n                                     __int64 a4, __int64 a5) {\n  return LAPACKE_dtp_trans(a1, (unsigned int)a2, Number L, a3, a4, a5, a5, a4);\n}", "code_t": "void __cdecl LAPACKE_dpp_trans(int <span class=\"supfact\">matrix_layout</span>,\n                               char <span class=\"supfact\">uplo</span>, int <span class=\"supfact\">n</span>,\n                               const double *<span class=\"supfact\">in</span>,\n                               double *<span class=\"supfact\">out</span>) {\n  LAPACKE_dtp_trans((unsigned int)<span class=\"supfact\">matrix_layout</span>,\n                    (unsigned int)<span class=\"supfact\">uplo</span>, Number L,\n                    (unsigned int)<span class=\"supfact\">n</span>, <span class=\"supfact\">in</span>,\n                    <span class=\"supfact\">out</span>, <span class=\"supfact\">out</span>,\n                    <span class=\"supfact\">in</span>);\n}", "var": [{"name": "a1", "type": "int", "pred_name": "matrix_layout", "ref_name": "matrix_layout", "ref_type": "int"}, {"name": "a2", "type": "char", "pred_name": "uplo", "ref_name": "uplo", "ref_type": "char"}, {"name": "a3", "type": "int", "pred_name": "n", "ref_name": "n", "ref_type": "int"}, {"name": "a4", "type": "const double *", "pred_name": "ap", "ref_name": "in", "ref_type": "const double *"}, {"name": "a5", "type": "const int *", "pred_name": "ipiv", "ref_name": "out", "ref_type": "double *"}], "body_in_train": false}, {"repo_owner": "cust1105", "repo_name": "ffmpeg-4.0.2", "path": "cust1105/ffmpeg-4.0.2/761e0299dd7c7b707ac73a78c9e8a2db9128b79ecdbe6bc87d9659e425091a95", "path_in_repo": "cust1105/ffmpeg-4.0.2/FFmpeg-4.0.2/FFmpeg-n4.0.2/libavcodec/hevcdsp.o", "objdump": "000000000002c3ea <put_hevc_epel_bi_w_v_12>:\n   2c3ea:\t48 89 7c 24 b8       \tmov    %rdi,-0x48(%rsp)\n   2c3ef:\t48 89 74 24 b0       \tmov    %rsi,-0x50(%rsp)\n   2c3f4:\t48 89 54 24 a8       \tmov    %rdx,-0x58(%rsp)\n   2c3f9:\t48 89 4c 24 a0       \tmov    %rcx,-0x60(%rsp)\n   2c3fe:\t4c 89 44 24 98       \tmov    %r8,-0x68(%rsp)\n   2c403:\t44 89 4c 24 94       \tmov    %r9d,-0x6c(%rsp)\n   2c408:\t48 8b 44 24 a8       \tmov    -0x58(%rsp),%rax\n   2c40d:\t48 89 44 24 f0       \tmov    %rax,-0x10(%rsp)\n   2c412:\t48 8b 44 24 a0       \tmov    -0x60(%rsp),%rax\n   2c417:\t48 d1 e8             \tshr    %rax\n   2c41a:\t48 89 44 24 e0       \tmov    %rax,-0x20(%rsp)\n   2c41f:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n   2c424:\t48 83 e8 01          \tsub    $0x1,%rax\n   2c428:\t48 c1 e0 02          \tshl    $0x2,%rax\n   2c42c:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n   2c432:\t48 89 44 24 d8       \tmov    %rax,-0x28(%rsp)\n   2c437:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n   2c43c:\t48 89 44 24 e8       \tmov    %rax,-0x18(%rsp)\n   2c441:\t48 8b 44 24 b0       \tmov    -0x50(%rsp),%rax\n   2c446:\t48 d1 e8             \tshr    %rax\n   2c449:\t48 89 44 24 d0       \tmov    %rax,-0x30(%rsp)\n   2c44e:\tc7 44 24 cc 03 00 00 \tmovl   $0x3,-0x34(%rsp)\n   2c455:\t00 \n   2c456:\t8b 54 24 08          \tmov    0x8(%rsp),%edx\n   2c45a:\t8b 44 24 cc          \tmov    -0x34(%rsp),%eax\n   2c45e:\t01 d0                \tadd    %edx,%eax\n   2c460:\t83 e8 01             \tsub    $0x1,%eax\n   2c463:\t89 44 24 c8          \tmov    %eax,-0x38(%rsp)\n   2c467:\tc1 64 24 20 04       \tshll   $0x4,0x20(%rsp)\n   2c46c:\tc1 64 24 28 04       \tshll   $0x4,0x28(%rsp)\n   2c471:\tc7 44 24 f8 00 00 00 \tmovl   $0x0,-0x8(%rsp)\n   2c478:\t00 \n   2c479:\te9 b4 01 00 00       \tjmpq   2c632 <put_hevc_epel_bi_w_v_12+0x248>\n   2c47e:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n   2c485:\t00 \n   2c486:\te9 74 01 00 00       \tjmpq   2c5ff <put_hevc_epel_bi_w_v_12+0x215>\n   2c48b:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n   2c490:\t0f b6 00             \tmovzbl (%rax),%eax\n   2c493:\t0f be d0             \tmovsbl %al,%edx\n   2c496:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2c49a:\t48 98                \tcltq   \n   2c49c:\t48 2b 44 24 e0       \tsub    -0x20(%rsp),%rax\n   2c4a1:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   2c4a5:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   2c4aa:\t48 01 c8             \tadd    %rcx,%rax\n   2c4ad:\t0f b7 00             \tmovzwl (%rax),%eax\n   2c4b0:\t0f b7 c0             \tmovzwl %ax,%eax\n   2c4b3:\t0f af d0             \timul   %eax,%edx\n   2c4b6:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n   2c4bb:\t48 83 c0 01          \tadd    $0x1,%rax\n   2c4bf:\t0f b6 00             \tmovzbl (%rax),%eax\n   2c4c2:\t0f be c8             \tmovsbl %al,%ecx\n   2c4c5:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2c4c9:\t48 98                \tcltq   \n   2c4cb:\t48 8d 34 00          \tlea    (%rax,%rax,1),%rsi\n   2c4cf:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   2c4d4:\t48 01 f0             \tadd    %rsi,%rax\n   2c4d7:\t0f b7 00             \tmovzwl (%rax),%eax\n   2c4da:\t0f b7 c0             \tmovzwl %ax,%eax\n   2c4dd:\t0f af c1             \timul   %ecx,%eax\n   2c4e0:\t8d 34 02             \tlea    (%rdx,%rax,1),%esi\n   2c4e3:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n   2c4e8:\t48 83 c0 02          \tadd    $0x2,%rax\n   2c4ec:\t0f b6 00             \tmovzbl (%rax),%eax\n   2c4ef:\t0f be d0             \tmovsbl %al,%edx\n   2c4f2:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2c4f6:\t48 63 c8             \tmovslq %eax,%rcx\n   2c4f9:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n   2c4fe:\t48 01 c8             \tadd    %rcx,%rax\n   2c501:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   2c505:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   2c50a:\t48 01 c8             \tadd    %rcx,%rax\n   2c50d:\t0f b7 00             \tmovzwl (%rax),%eax\n   2c510:\t0f b7 c0             \tmovzwl %ax,%eax\n   2c513:\t0f af c2             \timul   %edx,%eax\n   2c516:\t01 c6                \tadd    %eax,%esi\n   2c518:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n   2c51d:\t48 83 c0 03          \tadd    $0x3,%rax\n   2c521:\t0f b6 00             \tmovzbl (%rax),%eax\n   2c524:\t0f be d0             \tmovsbl %al,%edx\n   2c527:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2c52b:\t48 98                \tcltq   \n   2c52d:\t48 8b 4c 24 e0       \tmov    -0x20(%rsp),%rcx\n   2c532:\t48 01 c9             \tadd    %rcx,%rcx\n   2c535:\t48 01 c8             \tadd    %rcx,%rax\n   2c538:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   2c53c:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n   2c541:\t48 01 c8             \tadd    %rcx,%rax\n   2c544:\t0f b7 00             \tmovzwl (%rax),%eax\n   2c547:\t0f b7 c0             \tmovzwl %ax,%eax\n   2c54a:\t0f af c2             \timul   %edx,%eax\n   2c54d:\t01 f0                \tadd    %esi,%eax\n   2c54f:\tc1 f8 04             \tsar    $0x4,%eax\n   2c552:\t0f af 44 24 18       \timul   0x18(%rsp),%eax\n   2c557:\t89 c2                \tmov    %eax,%edx\n   2c559:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2c55d:\t48 98                \tcltq   \n   2c55f:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   2c563:\t48 8b 44 24 98       \tmov    -0x68(%rsp),%rax\n   2c568:\t48 01 c8             \tadd    %rcx,%rax\n   2c56b:\t0f b7 00             \tmovzwl (%rax),%eax\n   2c56e:\t98                   \tcwtl   \n   2c56f:\t0f af 44 24 10       \timul   0x10(%rsp),%eax\n   2c574:\t8d 34 02             \tlea    (%rdx,%rax,1),%esi\n   2c577:\t8b 54 24 20          \tmov    0x20(%rsp),%edx\n   2c57b:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n   2c57f:\t01 d0                \tadd    %edx,%eax\n   2c581:\t8d 50 01             \tlea    0x1(%rax),%edx\n   2c584:\t8b 44 24 c8          \tmov    -0x38(%rsp),%eax\n   2c588:\t89 c1                \tmov    %eax,%ecx\n   2c58a:\td3 e2                \tshl    %cl,%edx\n   2c58c:\t89 d0                \tmov    %edx,%eax\n   2c58e:\t8d 14 06             \tlea    (%rsi,%rax,1),%edx\n   2c591:\t8b 44 24 c8          \tmov    -0x38(%rsp),%eax\n   2c595:\t83 c0 01             \tadd    $0x1,%eax\n   2c598:\t89 c1                \tmov    %eax,%ecx\n   2c59a:\td3 fa                \tsar    %cl,%edx\n   2c59c:\t89 d0                \tmov    %edx,%eax\n   2c59e:\t89 44 24 c4          \tmov    %eax,-0x3c(%rsp)\n   2c5a2:\tc7 44 24 c0 0c 00 00 \tmovl   $0xc,-0x40(%rsp)\n   2c5a9:\t00 \n   2c5aa:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n   2c5ae:\tba 01 00 00 00       \tmov    $0x1,%edx\n   2c5b3:\t89 c1                \tmov    %eax,%ecx\n   2c5b5:\td3 e2                \tshl    %cl,%edx\n   2c5b7:\t89 d0                \tmov    %edx,%eax\n   2c5b9:\tf7 d8                \tneg    %eax\n   2c5bb:\t23 44 24 c4          \tand    -0x3c(%rsp),%eax\n   2c5bf:\t85 c0                \ttest   %eax,%eax\n   2c5c1:\t74 1d                \tje     2c5e0 <put_hevc_epel_bi_w_v_12+0x1f6>\n   2c5c3:\t8b 44 24 c4          \tmov    -0x3c(%rsp),%eax\n   2c5c7:\tf7 d0                \tnot    %eax\n   2c5c9:\t99                   \tcltd   \n   2c5ca:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n   2c5ce:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   2c5d3:\t89 c1                \tmov    %eax,%ecx\n   2c5d5:\td3 e6                \tshl    %cl,%esi\n   2c5d7:\t89 f0                \tmov    %esi,%eax\n   2c5d9:\t83 e8 01             \tsub    $0x1,%eax\n   2c5dc:\t21 d0                \tand    %edx,%eax\n   2c5de:\teb 04                \tjmp    2c5e4 <put_hevc_epel_bi_w_v_12+0x1fa>\n   2c5e0:\t8b 44 24 c4          \tmov    -0x3c(%rsp),%eax\n   2c5e4:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n   2c5e8:\t48 63 d2             \tmovslq %edx,%rdx\n   2c5eb:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n   2c5ef:\t48 8b 54 24 e8       \tmov    -0x18(%rsp),%rdx\n   2c5f4:\t48 01 ca             \tadd    %rcx,%rdx\n   2c5f7:\t66 89 02             \tmov    %ax,(%rdx)\n   2c5fa:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n   2c5ff:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n   2c603:\t3b 44 24 40          \tcmp    0x40(%rsp),%eax\n   2c607:\t0f 8c 7e fe ff ff    \tjl     2c48b <put_hevc_epel_bi_w_v_12+0xa1>\n   2c60d:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n   2c612:\t48 01 c0             \tadd    %rax,%rax\n   2c615:\t48 01 44 24 f0       \tadd    %rax,-0x10(%rsp)\n   2c61a:\t48 8b 44 24 d0       \tmov    -0x30(%rsp),%rax\n   2c61f:\t48 01 c0             \tadd    %rax,%rax\n   2c622:\t48 01 44 24 e8       \tadd    %rax,-0x18(%rsp)\n   2c627:\t48 83 6c 24 98 80    \tsubq   $0xffffffffffffff80,-0x68(%rsp)\n   2c62d:\t83 44 24 f8 01       \taddl   $0x1,-0x8(%rsp)\n   2c632:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n   2c636:\t3b 44 24 94          \tcmp    -0x6c(%rsp),%eax\n   2c63a:\t0f 8c 3e fe ff ff    \tjl     2c47e <put_hevc_epel_bi_w_v_12+0x94>\n   2c640:\t90                   \tnop\n   2c641:\t90                   \tnop\n   2c642:\tc3                   \tretq   ", "code_s": "__int64 __fastcall put_hevc_epel_bi_w_v_12(__int64 a1, unsigned __int64 a2,\n                                           __int64 a3, unsigned __int64 a4,\n                                           __int64 a5, int a6, char a7, int a8,\n                                           int a9, int a10, int a11, int a12,\n                                           __int64 a13, int a14) {\n  int v14;\n  __int64 result;\n  int v17;\n  char *v18;\n  unsigned __int64 v19;\n  unsigned int i;\n  int j;\n  int v24;\n  int v25;\n  v19 = a4 >> Number;\n  v24 = Number * a10;\n  v25 = Number * a11;\n  for (i = Number;; ++i) {\n    result = i;\n    if ((int)i >= a6)\n      break;\n    for (j = Number; j < a14; ++j) {\n      v18 = (char *)&ff_hevc_epel_filters + Number * a13 - Number;\n      v17 =\n          (a9 *\n               ((v18[Number] * *(unsigned __int16 *)(Number * (j + v19) + a3) +\n                 *(unsigned __int16 *)(Number * (j - v19) + a3) * *v18 +\n                 v18[Number] * *(unsigned __int16 *)(Number L * j + a3) +\n                 v18[Number] *\n                     *(unsigned __int16 *)(Number * (Number * v19 + j) + a3)) >>\n                Number) +\n           a8 * *(__int16 *)(Number L * j + a5) +\n           ((v24 + v25 + Number) << (a7 + Number))) >>\n          (a7 + Number);\n      if ((v17 & Number) != Number)\n        v14 = (~v17 >> Number) & Number;\n      else\n        v14 = (a9 * ((v18[Number] *\n                          *(unsigned __int16 *)(Number * (j + v19) + a3) +\n                      *(unsigned __int16 *)(Number * (j - v19) + a3) * *v18 +\n                      v18[Number] * *(unsigned __int16 *)(Number L * j + a3) +\n                      v18[Number] *\n                          *(unsigned __int16 *)(Number * (Number * v19 + j) +\n                                                a3)) >>\n                     Number) +\n               a8 * *(__int16 *)(Number L * j + a5) +\n               ((v24 + v25 + Number) << (a7 + Number))) >>\n              (a7 + Number);\n      *(_WORD *)(Number L * j + a1) = v14;\n    }\n    a3 += Number * v19;\n    a1 += Number * (a2 >> Number);\n    a5 += Number L;\n  }\n  return result;\n}", "code_t": "void __cdecl put_hevc_epel_bi_w_v_12(\n    uint8_t *<span class=\"supfact\">_dst</span>, ptrdiff_t <span class=\"supfact\">_dststride</span>,\n    uint8_t *<span class=\"supfact\">_src</span>, ptrdiff_t <span class=\"supfact\">_srcstride</span>,\n    int16_t *<span class=\"supfact\">src2</span>, int <span class=\"supfact\">height</span>,\n    int <span class=\"supfact\">denom</span>, int <span class=\"supfact\">wx0</span>, int <span class=\"supfact\">wx1</span>,\n    int <span class=\"supfact\">ox0</span>, int <span class=\"supfact\">ox1</span>,\n    intptr_t <span class=\"supfact\">mx</span>, intptr_t <span class=\"supfact\">my</span>,\n    int <span class=\"supfact\">width</span>) {\n  int v14;\n  int <span class=\"supfact\">v16</span>;\n  const int8_t *<span class=\"supfact\">filter</span>;\n  unsigned __int64 <span class=\"supfact\">srcstride</span>;\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">x</span>;\n  int ox0a;\n  int ox1a;\n  <span class=\"supfact\">srcstride</span> =\n      (unsigned __int64)<span class=\"supfact\">_srcstride</span> >> Number;\n  ox0a = Number * <span class=\"supfact\">ox0</span>;\n  ox1a = Number * <span class=\"supfact\">ox1</span>;\n  for (<span class=\"supfact\">y</span> = Number; <span class=\"supfact\">y</span> < <span class=\"supfact\">height</span>;\n       ++<span class=\"supfact\">y</span>) {\n    for (<span class=\"supfact\">x</span> = Number; <span class=\"supfact\">x</span> < <span class=\"supfact\">width</span>;\n         ++<span class=\"supfact\">x</span>) {\n      <span class=\"supfact\">filter</span> =\n          &ff_hevc_epel_filters[Number * <span class=\"supfact\">my</span> - Number];\n      <span class=\"supfact\">v16</span> =\n          (<span class=\"supfact\">wx1</span> *\n               ((<span class=\"supfact\">filter</span>[Number] *\n                     *(unsigned __int16 *)&<span class=\"supfact\">_src</span>\n                         [Number * <span class=\"supfact\">x</span> +\n                          Number * <span class=\"supfact\">srcstride</span>] +\n                 *(unsigned __int16 *)&<span class=\"supfact\">_src</span>\n                         [Number *\n                          (<span class=\"supfact\">x</span> - <span class=\"supfact\">srcstride</span>)] *\n                     *<span class=\"supfact\">filter</span> +\n                 <span class=\"supfact\">filter</span>[Number] *\n                     *(unsigned __int16\n                           *)&<span class=\"supfact\">_src</span>[Number * <span class=\"supfact\">x</span>] +\n                 <span class=\"supfact\">filter</span>[Number] *\n                     *(unsigned __int16 *)&<span class=\"supfact\">_src</span>\n                         [Number * <span class=\"supfact\">srcstride</span> +\n                          Number * <span class=\"supfact\">x</span>]) >>\n                Number) +\n           <span class=\"supfact\">wx0</span> * <span class=\"supfact\">src2</span>[<span class=\"supfact\">x</span>] +\n           ((ox0a + ox1a + Number) << (<span class=\"supfact\">denom</span> + Number))) >>\n          (<span class=\"supfact\">denom</span> + Number);\n      if ((<span class=\"supfact\">v16</span> & Number) != Number)\n        v14 = (~<span class=\"supfact\">v16</span> >> Number) & Number;\n      else\n        v14 = (<span class=\"supfact\">wx1</span> *\n                   ((<span class=\"supfact\">filter</span>[Number] *\n                         *(unsigned __int16 *)&<span class=\"supfact\">_src</span>\n                             [Number * <span class=\"supfact\">x</span> +\n                              Number * <span class=\"supfact\">srcstride</span>] +\n                     *(unsigned __int16 *)&<span class=\"supfact\">_src</span>\n                             [Number *\n                              (<span class=\"supfact\">x</span> - <span class=\"supfact\">srcstride</span>)] *\n                         *<span class=\"supfact\">filter</span> +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         *(unsigned __int16 *)&<span class=\"supfact\">_src</span>\n                             [Number * <span class=\"supfact\">x</span>] +\n                     <span class=\"supfact\">filter</span>[Number] *\n                         *(unsigned __int16 *)&<span class=\"supfact\">_src</span>\n                             [Number * <span class=\"supfact\">srcstride</span> +\n                              Number * <span class=\"supfact\">x</span>]) >>\n                    Number) +\n               <span class=\"supfact\">wx0</span> * <span class=\"supfact\">src2</span>[<span class=\"supfact\">x</span>] +\n               ((ox0a + ox1a + Number) << (<span class=\"supfact\">denom</span> + Number))) >>\n              (<span class=\"supfact\">denom</span> + Number);\n      *(_WORD *)&<span class=\"supfact\">_dst</span>[Number * <span class=\"supfact\">x</span>] = v14;\n    }\n    <span class=\"supfact\">_src</span> += Number * <span class=\"supfact\">srcstride</span>;\n    <span class=\"supfact\">_dst</span> +=\n        Number * ((unsigned __int64)<span class=\"supfact\">_dststride</span> >> Number);\n    <span class=\"supfact\">src2</span> += Number;\n  }\n}", "var": [{"name": "a1", "type": "uint8_t *", "pred_name": "_dst", "ref_name": "_dst", "ref_type": "uint8_t *"}, {"name": "a2", "type": "ptrdiff_t", "pred_name": "_dststride", "ref_name": "_dststride", "ref_type": "ptrdiff_t"}, {"name": "a3", "type": "uint8_t *", "pred_name": "_src", "ref_name": "_src", "ref_type": "uint8_t *"}, {"name": "a4", "type": "ptrdiff_t", "pred_name": "_srcstride", "ref_name": "_srcstride", "ref_type": "ptrdiff_t"}, {"name": "a5", "type": "int16_t *", "pred_name": "src2", "ref_name": "src2", "ref_type": "int16_t *"}, {"name": "a6", "type": "int", "pred_name": "height", "ref_name": "height", "ref_type": "int"}, {"name": "a7", "type": "int", "pred_name": "denom", "ref_name": "denom", "ref_type": "int"}, {"name": "a8", "type": "int", "pred_name": "_wx0", "ref_name": "wx0", "ref_type": "int"}, {"name": "a9", "type": "int", "pred_name": "_wx1", "ref_name": "wx1", "ref_type": "int"}, {"name": "a10", "type": "int", "pred_name": "_ox0", "ref_name": "ox0", "ref_type": "int"}, {"name": "a11", "type": "int", "pred_name": "_ox1", "ref_name": "ox1", "ref_type": "int"}, {"name": "a12", "type": "intptr_t", "pred_name": "mx", "ref_name": "mx", "ref_type": "intptr_t"}, {"name": "a13", "type": "intptr_t", "pred_name": "my", "ref_name": "my", "ref_type": "intptr_t"}, {"name": "a14", "type": "int", "pred_name": "width", "ref_name": "width", "ref_type": "int"}, {"name": "v17", "type": "int", "pred_name": "v16", "ref_name": "v16", "ref_type": "int"}, {"name": "v18", "type": "const int8_t *", "pred_name": "filter", "ref_name": "filter", "ref_type": "const int8_t *"}, {"name": "v19", "type": "unsigned __int64", "pred_name": "srcstride", "ref_name": "srcstride", "ref_type": "unsigned __int64"}, {"name": "i", "type": "int", "pred_name": "y", "ref_name": "y", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "x", "ref_name": "x", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "Infinitive-OS", "repo_name": "platform_external_elfutils", "path": "Infinitive-OS/platform_external_elfutils/0a9131cac8e8cb93582fa77d77d56417c24677e7bce7c825c09ceab03b74f39e", "path_in_repo": "Infinitive-OS/platform_external_elfutils/src/src/size", "objdump": "0000000000401fda <show_sysv>:\n  401fda:\t55                   \tpush   %rbp\n  401fdb:\t48 89 e5             \tmov    %rsp,%rbp\n  401fde:\t41 55                \tpush   %r13\n  401fe0:\t41 54                \tpush   %r12\n  401fe2:\t53                   \tpush   %rbx\n  401fe3:\t48 81 ec f8 00 00 00 \tsub    $0xf8,%rsp\n  401fea:\t48 89 bd 08 ff ff ff \tmov    %rdi,-0xf8(%rbp)\n  401ff1:\t48 89 b5 00 ff ff ff \tmov    %rsi,-0x100(%rbp)\n  401ff8:\t48 89 95 f8 fe ff ff \tmov    %rdx,-0x108(%rbp)\n  401fff:\t48 89 8d f0 fe ff ff \tmov    %rcx,-0x110(%rbp)\n  402006:\tc7 45 dc 0a 00 00 00 \tmovl   $0xa,-0x24(%rbp)\n  40200d:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  402014:\t48 89 c7             \tmov    %rax,%rdi\n  402017:\te8 a4 f0 ff ff       \tcallq  4010c0 <gelf_getclass@plt>\n  40201c:\t83 e8 01             \tsub    $0x1,%eax\n  40201f:\t8b 15 af 31 00 00    \tmov    0x31af(%rip),%edx        # 4051d4 <radix>\n  402025:\t89 d1                \tmov    %edx,%ecx\n  402027:\t48 63 d0             \tmovslq %eax,%rdx\n  40202a:\t48 89 d0             \tmov    %rdx,%rax\n  40202d:\t48 01 c0             \tadd    %rax,%rax\n  402030:\t48 01 d0             \tadd    %rdx,%rax\n  402033:\t48 01 c8             \tadd    %rcx,%rax\n  402036:\t8b 04 85 e0 34 40 00 \tmov    0x4034e0(,%rax,4),%eax\n  40203d:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n  402040:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n  402047:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40204e:\t48 89 d6             \tmov    %rdx,%rsi\n  402051:\t48 89 c7             \tmov    %rax,%rdi\n  402054:\te8 e7 f1 ff ff       \tcallq  401240 <elf_getshdrstrndx@plt>\n  402059:\tc1 e8 1f             \tshr    $0x1f,%eax\n  40205c:\t0f b6 c0             \tmovzbl %al,%eax\n  40205f:\t48 85 c0             \ttest   %rax,%rax\n  402062:\t74 47                \tje     4020ab <show_sysv+0xd1>\n  402064:\tbf e8 38 40 00       \tmov    $0x4038e8,%edi\n  402069:\te8 32 f0 ff ff       \tcallq  4010a0 <gettext@plt>\n  40206e:\tc7 85 74 ff ff ff 01 \tmovl   $0x1,-0x8c(%rbp)\n  402075:\t00 00 00 \n  402078:\tc7 85 70 ff ff ff 00 \tmovl   $0x0,-0x90(%rbp)\n  40207f:\t00 00 00 \n  402082:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n  402089:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n  402090:\t8b 8d 70 ff ff ff    \tmov    -0x90(%rbp),%ecx\n  402096:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n  40209c:\t89 ce                \tmov    %ecx,%esi\n  40209e:\t89 c7                \tmov    %eax,%edi\n  4020a0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4020a5:\te8 36 f1 ff ff       \tcallq  4011e0 <error@plt>\n  4020aa:\t90                   \tnop\n  4020ab:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  4020b2:\t00 \n  4020b3:\te9 fd 00 00 00       \tjmpq   4021b5 <show_sysv+0x1db>\n  4020b8:\t48 8d 95 10 ff ff ff \tlea    -0xf0(%rbp),%rdx\n  4020bf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4020c3:\t48 89 d6             \tmov    %rdx,%rsi\n  4020c6:\t48 89 c7             \tmov    %rax,%rdi\n  4020c9:\te8 62 ef ff ff       \tcallq  401030 <gelf_getshdr@plt>\n  4020ce:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n  4020d2:\t48 83 7d 80 00       \tcmpq   $0x0,-0x80(%rbp)\n  4020d7:\t75 6f                \tjne    402148 <show_sysv+0x16e>\n  4020d9:\tbf ff ff ff ff       \tmov    $0xffffffff,%edi\n  4020de:\te8 8d f0 ff ff       \tcallq  401170 <elf_errmsg@plt>\n  4020e3:\t48 89 c3             \tmov    %rax,%rbx\n  4020e6:\tbf 30 38 40 00       \tmov    $0x403830,%edi\n  4020eb:\te8 b0 ef ff ff       \tcallq  4010a0 <gettext@plt>\n  4020f0:\tc7 85 64 ff ff ff 01 \tmovl   $0x1,-0x9c(%rbp)\n  4020f7:\t00 00 00 \n  4020fa:\tc7 85 60 ff ff ff 00 \tmovl   $0x0,-0xa0(%rbp)\n  402101:\t00 00 00 \n  402104:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n  40210b:\t48 8b 8d f0 fe ff ff \tmov    -0x110(%rbp),%rcx\n  402112:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  402119:\t8b b5 60 ff ff ff    \tmov    -0xa0(%rbp),%esi\n  40211f:\t8b 85 64 ff ff ff    \tmov    -0x9c(%rbp),%eax\n  402125:\t53                   \tpush   %rbx\n  402126:\t68 52 38 40 00       \tpushq  $0x403852\n  40212b:\t41 b9 20 35 40 00    \tmov    $0x403520,%r9d\n  402131:\t41 b8 ab 01 00 00    \tmov    $0x1ab,%r8d\n  402137:\t89 c7                \tmov    %eax,%edi\n  402139:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40213e:\te8 9d f0 ff ff       \tcallq  4011e0 <error@plt>\n  402143:\t48 83 c4 10          \tadd    $0x10,%rsp\n  402147:\t90                   \tnop\n  402148:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  40214c:\t8b 00                \tmov    (%rax),%eax\n  40214e:\t89 c2                \tmov    %eax,%edx\n  402150:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n  402157:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40215e:\t48 89 ce             \tmov    %rcx,%rsi\n  402161:\t48 89 c7             \tmov    %rax,%rdi\n  402164:\te8 67 ef ff ff       \tcallq  4010d0 <elf_strptr@plt>\n  402169:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n  402170:\t48 83 bd 78 ff ff ff \tcmpq   $0x0,-0x88(%rbp)\n  402177:\t00 \n  402178:\t74 3b                \tje     4021b5 <show_sysv+0x1db>\n  40217a:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  40217e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  402182:\t83 e0 02             \tand    $0x2,%eax\n  402185:\t48 85 c0             \ttest   %rax,%rax\n  402188:\t74 2b                \tje     4021b5 <show_sysv+0x1db>\n  40218a:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  402191:\t48 89 c7             \tmov    %rax,%rdi\n  402194:\te8 e7 ee ff ff       \tcallq  401080 <strlen@plt>\n  402199:\t39 45 dc             \tcmp    %eax,-0x24(%rbp)\n  40219c:\t7f 11                \tjg     4021af <show_sysv+0x1d5>\n  40219e:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  4021a5:\t48 89 c7             \tmov    %rax,%rdi\n  4021a8:\te8 d3 ee ff ff       \tcallq  401080 <strlen@plt>\n  4021ad:\teb 03                \tjmp    4021b2 <show_sysv+0x1d8>\n  4021af:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4021b2:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  4021b5:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  4021b9:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  4021c0:\t48 89 d6             \tmov    %rdx,%rsi\n  4021c3:\t48 89 c7             \tmov    %rax,%rdi\n  4021c6:\te8 25 f0 ff ff       \tcallq  4011f0 <elf_nextscn@plt>\n  4021cb:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4021cf:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  4021d4:\t0f 85 de fe ff ff    \tjne    4020b8 <show_sysv+0xde>\n  4021da:\t48 8b 15 bf 2f 00 00 \tmov    0x2fbf(%rip),%rdx        # 4051a0 <stdout@@GLIBC_2.2.5>\n  4021e1:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  4021e8:\t48 89 d6             \tmov    %rdx,%rsi\n  4021eb:\t48 89 c7             \tmov    %rax,%rdi\n  4021ee:\te8 1d ef ff ff       \tcallq  401110 <fputs_unlocked@plt>\n  4021f3:\t48 83 bd 00 ff ff ff \tcmpq   $0x0,-0x100(%rbp)\n  4021fa:\t00 \n  4021fb:\t74 24                \tje     402221 <show_sysv+0x247>\n  4021fd:\tbf 15 39 40 00       \tmov    $0x403915,%edi\n  402202:\te8 99 ee ff ff       \tcallq  4010a0 <gettext@plt>\n  402207:\t48 89 c2             \tmov    %rax,%rdx\n  40220a:\t48 8b 85 00 ff ff ff \tmov    -0x100(%rbp),%rax\n  402211:\t48 89 c6             \tmov    %rax,%rsi\n  402214:\t48 89 d7             \tmov    %rdx,%rdi\n  402217:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40221c:\te8 8f ee ff ff       \tcallq  4010b0 <printf@plt>\n  402221:\tbf 1e 39 40 00       \tmov    $0x40391e,%edi\n  402226:\te8 75 ee ff ff       \tcallq  4010a0 <gettext@plt>\n  40222b:\tbe 7c 00 00 00       \tmov    $0x7c,%esi\n  402230:\t48 89 c7             \tmov    %rax,%rdi\n  402233:\te8 a8 ee ff ff       \tcallq  4010e0 <strrchr@plt>\n  402238:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  40223c:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n  402241:\t74 0a                \tje     40224d <show_sysv+0x273>\n  402243:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  402247:\t4c 8d 60 01          \tlea    0x1(%rax),%r12\n  40224b:\teb 06                \tjmp    402253 <show_sysv+0x279>\n  40224d:\t41 bc 1e 39 40 00    \tmov    $0x40391e,%r12d\n  402253:\tbf 28 39 40 00       \tmov    $0x403928,%edi\n  402258:\te8 43 ee ff ff       \tcallq  4010a0 <gettext@plt>\n  40225d:\tbe 7c 00 00 00       \tmov    $0x7c,%esi\n  402262:\t48 89 c7             \tmov    %rax,%rdi\n  402265:\te8 76 ee ff ff       \tcallq  4010e0 <strrchr@plt>\n  40226a:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  40226e:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n  402273:\t74 0a                \tje     40227f <show_sysv+0x2a5>\n  402275:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  402279:\t4c 8d 68 01          \tlea    0x1(%rax),%r13\n  40227d:\teb 06                \tjmp    402285 <show_sysv+0x2ab>\n  40227f:\t41 bd 28 39 40 00    \tmov    $0x403928,%r13d\n  402285:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  402288:\t8d 58 fe             \tlea    -0x2(%rax),%ebx\n  40228b:\tbf 32 39 40 00       \tmov    $0x403932,%edi\n  402290:\te8 0b ee ff ff       \tcallq  4010a0 <gettext@plt>\n  402295:\tbe 7c 00 00 00       \tmov    $0x7c,%esi\n  40229a:\t48 89 c7             \tmov    %rax,%rdi\n  40229d:\te8 3e ee ff ff       \tcallq  4010e0 <strrchr@plt>\n  4022a2:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n  4022a6:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n  4022ab:\t74 0a                \tje     4022b7 <show_sysv+0x2dd>\n  4022ad:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4022b1:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  4022b5:\teb 05                \tjmp    4022bc <show_sysv+0x2e2>\n  4022b7:\tba 32 39 40 00       \tmov    $0x403932,%edx\n  4022bc:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n  4022bf:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4022c2:\t48 83 ec 08          \tsub    $0x8,%rsp\n  4022c6:\t41 54                \tpush   %r12\n  4022c8:\t41 89 c9             \tmov    %ecx,%r9d\n  4022cb:\t4d 89 e8             \tmov    %r13,%r8\n  4022ce:\t89 d9                \tmov    %ebx,%ecx\n  4022d0:\t89 c6                \tmov    %eax,%esi\n  4022d2:\tbf 3f 39 40 00       \tmov    $0x40393f,%edi\n  4022d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4022dc:\te8 cf ed ff ff       \tcallq  4010b0 <printf@plt>\n  4022e1:\t48 83 c4 10          \tadd    $0x10,%rsp\n  4022e5:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n  4022ec:\t00 \n  4022ed:\te9 c1 00 00 00       \tjmpq   4023b3 <show_sysv+0x3d9>\n  4022f2:\t48 8d 95 10 ff ff ff \tlea    -0xf0(%rbp),%rdx\n  4022f9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4022fd:\t48 89 d6             \tmov    %rdx,%rsi\n  402300:\t48 89 c7             \tmov    %rax,%rdi\n  402303:\te8 28 ed ff ff       \tcallq  401030 <gelf_getshdr@plt>\n  402308:\t48 89 45 88          \tmov    %rax,-0x78(%rbp)\n  40230c:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  402310:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  402314:\t83 e0 02             \tand    $0x2,%eax\n  402317:\t48 85 c0             \ttest   %rax,%rax\n  40231a:\t0f 84 93 00 00 00    \tje     4023b3 <show_sysv+0x3d9>\n  402320:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  402324:\t4c 8b 60 10          \tmov    0x10(%rax),%r12\n  402328:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  40232c:\t4c 8b 68 20          \tmov    0x20(%rax),%r13\n  402330:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  402333:\t8d 58 fe             \tlea    -0x2(%rax),%ebx\n  402336:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  40233a:\t8b 00                \tmov    (%rax),%eax\n  40233c:\t89 c2                \tmov    %eax,%edx\n  40233e:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n  402345:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40234c:\t48 89 ce             \tmov    %rcx,%rsi\n  40234f:\t48 89 c7             \tmov    %rax,%rdi\n  402352:\te8 79 ed ff ff       \tcallq  4010d0 <elf_strptr@plt>\n  402357:\t48 89 c2             \tmov    %rax,%rdx\n  40235a:\t8b 05 74 2e 00 00    \tmov    0x2e74(%rip),%eax        # 4051d4 <radix>\n  402360:\t83 f8 01             \tcmp    $0x1,%eax\n  402363:\t74 18                \tje     40237d <show_sysv+0x3a3>\n  402365:\t8b 05 69 2e 00 00    \tmov    0x2e69(%rip),%eax        # 4051d4 <radix>\n  40236b:\t85 c0                \ttest   %eax,%eax\n  40236d:\t75 07                \tjne    402376 <show_sysv+0x39c>\n  40236f:\tb8 4f 39 40 00       \tmov    $0x40394f,%eax\n  402374:\teb 0c                \tjmp    402382 <show_sysv+0x3a8>\n  402376:\tb8 5f 39 40 00       \tmov    $0x40395f,%eax\n  40237b:\teb 05                \tjmp    402382 <show_sysv+0x3a8>\n  40237d:\tb8 6f 39 40 00       \tmov    $0x40396f,%eax\n  402382:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n  402385:\t8b 75 dc             \tmov    -0x24(%rbp),%esi\n  402388:\t48 83 ec 08          \tsub    $0x8,%rsp\n  40238c:\t41 54                \tpush   %r12\n  40238e:\t41 89 c9             \tmov    %ecx,%r9d\n  402391:\t4d 89 e8             \tmov    %r13,%r8\n  402394:\t89 d9                \tmov    %ebx,%ecx\n  402396:\t48 89 c7             \tmov    %rax,%rdi\n  402399:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40239e:\te8 0d ed ff ff       \tcallq  4010b0 <printf@plt>\n  4023a3:\t48 83 c4 10          \tadd    $0x10,%rsp\n  4023a7:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4023ab:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4023af:\t48 01 45 c8          \tadd    %rax,-0x38(%rbp)\n  4023b3:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  4023b7:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  4023be:\t48 89 d6             \tmov    %rdx,%rsi\n  4023c1:\t48 89 c7             \tmov    %rax,%rdi\n  4023c4:\te8 27 ee ff ff       \tcallq  4011f0 <elf_nextscn@plt>\n  4023c9:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4023cd:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  4023d2:\t0f 85 1a ff ff ff    \tjne    4022f2 <show_sysv+0x318>\n  4023d8:\t8b 05 f6 2d 00 00    \tmov    0x2df6(%rip),%eax        # 4051d4 <radix>\n  4023de:\t83 f8 01             \tcmp    $0x1,%eax\n  4023e1:\t75 59                \tjne    40243c <show_sysv+0x462>\n  4023e3:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  4023e6:\t8d 58 fe             \tlea    -0x2(%rax),%ebx\n  4023e9:\tbf 7f 39 40 00       \tmov    $0x40397f,%edi\n  4023ee:\te8 ad ec ff ff       \tcallq  4010a0 <gettext@plt>\n  4023f3:\tbe 7c 00 00 00       \tmov    $0x7c,%esi\n  4023f8:\t48 89 c7             \tmov    %rax,%rdi\n  4023fb:\te8 e0 ec ff ff       \tcallq  4010e0 <strrchr@plt>\n  402400:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n  402404:\t48 83 7d 90 00       \tcmpq   $0x0,-0x70(%rbp)\n  402409:\t74 0a                \tje     402415 <show_sysv+0x43b>\n  40240b:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  40240f:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  402413:\teb 05                \tjmp    40241a <show_sysv+0x440>\n  402415:\tba 7f 39 40 00       \tmov    $0x40397f,%edx\n  40241a:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  40241e:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  402421:\t49 89 c8             \tmov    %rcx,%r8\n  402424:\t89 d9                \tmov    %ebx,%ecx\n  402426:\t89 c6                \tmov    %eax,%esi\n  402428:\tbf 8a 39 40 00       \tmov    $0x40398a,%edi\n  40242d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402432:\te8 79 ec ff ff       \tcallq  4010b0 <printf@plt>\n  402437:\te9 b4 00 00 00       \tjmpq   4024f0 <show_sysv+0x516>\n  40243c:\t8b 05 92 2d 00 00    \tmov    0x2d92(%rip),%eax        # 4051d4 <radix>\n  402442:\t85 c0                \ttest   %eax,%eax\n  402444:\t75 56                \tjne    40249c <show_sysv+0x4c2>\n  402446:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  402449:\t8d 58 fe             \tlea    -0x2(%rax),%ebx\n  40244c:\tbf 7f 39 40 00       \tmov    $0x40397f,%edi\n  402451:\te8 4a ec ff ff       \tcallq  4010a0 <gettext@plt>\n  402456:\tbe 7c 00 00 00       \tmov    $0x7c,%esi\n  40245b:\t48 89 c7             \tmov    %rax,%rdi\n  40245e:\te8 7d ec ff ff       \tcallq  4010e0 <strrchr@plt>\n  402463:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n  402467:\t48 83 7d 98 00       \tcmpq   $0x0,-0x68(%rbp)\n  40246c:\t74 0a                \tje     402478 <show_sysv+0x49e>\n  40246e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  402472:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  402476:\teb 05                \tjmp    40247d <show_sysv+0x4a3>\n  402478:\tba 7f 39 40 00       \tmov    $0x40397f,%edx\n  40247d:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  402481:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  402484:\t49 89 c8             \tmov    %rcx,%r8\n  402487:\t89 d9                \tmov    %ebx,%ecx\n  402489:\t89 c6                \tmov    %eax,%esi\n  40248b:\tbf 97 39 40 00       \tmov    $0x403997,%edi\n  402490:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402495:\te8 16 ec ff ff       \tcallq  4010b0 <printf@plt>\n  40249a:\teb 54                \tjmp    4024f0 <show_sysv+0x516>\n  40249c:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  40249f:\t8d 58 fe             \tlea    -0x2(%rax),%ebx\n  4024a2:\tbf 7f 39 40 00       \tmov    $0x40397f,%edi\n  4024a7:\te8 f4 eb ff ff       \tcallq  4010a0 <gettext@plt>\n  4024ac:\tbe 7c 00 00 00       \tmov    $0x7c,%esi\n  4024b1:\t48 89 c7             \tmov    %rax,%rdi\n  4024b4:\te8 27 ec ff ff       \tcallq  4010e0 <strrchr@plt>\n  4024b9:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n  4024bd:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n  4024c2:\t74 0a                \tje     4024ce <show_sysv+0x4f4>\n  4024c4:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  4024c8:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  4024cc:\teb 05                \tjmp    4024d3 <show_sysv+0x4f9>\n  4024ce:\tba 7f 39 40 00       \tmov    $0x40397f,%edx\n  4024d3:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  4024d7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4024da:\t49 89 c8             \tmov    %rcx,%r8\n  4024dd:\t89 d9                \tmov    %ebx,%ecx\n  4024df:\t89 c6                \tmov    %eax,%esi\n  4024e1:\tbf a4 39 40 00       \tmov    $0x4039a4,%edi\n  4024e6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4024eb:\te8 c0 eb ff ff       \tcallq  4010b0 <printf@plt>\n  4024f0:\t90                   \tnop\n  4024f1:\t48 8d 65 e8          \tlea    -0x18(%rbp),%rsp\n  4024f5:\t5b                   \tpop    %rbx\n  4024f6:\t41 5c                \tpop    %r12\n  4024f8:\t41 5d                \tpop    %r13\n  4024fa:\t5d                   \tpop    %rbp\n  4024fb:\tc3                   \tretq   ", "code_s": "int __fastcall show_sysv(__int64 a1, __int64 a2, const char *a3, __int64 a4) {\n  __int64 v4;\n  unsigned int v5;\n  char *v6;\n  char *v7;\n  const char *v8;\n  char *v9;\n  const char *v10;\n  char *v11;\n  const char *v12;\n  __int64 v13;\n  __int64 v14;\n  unsigned int v15;\n  __int64 v16;\n  char *v17;\n  const char *v18;\n  int result;\n  char *v20;\n  const char *v21;\n  char *v22;\n  const char *v23;\n  const char *v26;\n  const char *format;\n  char *s;\n  __int64 v29;\n  _QWORD *v30;\n  char *v31;\n  char *v32;\n  char *v33;\n  char *v34;\n  char *v35;\n  char *v36;\n  unsigned int v37;\n  __int64 v38;\n  unsigned int v39;\n  v39 = Number;\n  v37 = length_map[Number * (int)(gelf_getclass() - Number) + radix];\n  if ((int)elf_getshdrstrndx() < Number) {\n    format = gettext(String);\n    error(Number, Number, format);\n  }\n  while (elf_nextscn()) {\n    v29 = gelf_getshdr();\n    if (!v29) {\n      v4 = elf_errmsg();\n      v26 = gettext(String);\n      error(Number, Number, v26, a4, Number L, String, String, v4);\n    }\n    s = (char *)elf_strptr();\n    if (s && (*(_QWORD *)(v29 + Number) & Number L) != Number) {\n      if ((int)v39 > (int)strlen(s))\n        v5 = v39;\n      else\n        v5 = strlen(s);\n      v39 = v5;\n    }\n  }\n  fputs_unlocked(a3, stdout);\n  if (a2) {\n    v6 = gettext(String);\n    printf(v6, a2);\n  }\n  v7 = gettext(String);\n  v36 = strrchr(v7, Number);\n  if (v36)\n    v8 = v36 + Number;\n  else\n    v8 = String;\n  v9 = gettext(String);\n  v35 = strrchr(v9, Number);\n  if (v35)\n    v10 = v35 + Number;\n  else\n    v10 = String;\n  v11 = gettext(String);\n  v34 = strrchr(v11, Number);\n  if (v34)\n    v12 = v34 + Number;\n  else\n    v12 = String;\n  printf(String, v39, v12, v37 - Number, v10, v37, v8);\n  v38 = Number L;\n  while (elf_nextscn()) {\n    v30 = (_QWORD *)gelf_getshdr();\n    if ((v30[Number] & Number L) != Number) {\n      v13 = v30[Number];\n      v14 = v30[Number];\n      v15 = v37 - Number;\n      v16 = elf_strptr();\n      if (radix == Number) {\n        printf(String, v39, v16, v15, v14, v37, v13);\n      } else if (radix) {\n        printf(String, v39, v16, v15, v14, v37, v13);\n      } else {\n        printf(String, v39, v16, v15, v14, v37, v13);\n      }\n      v38 += v30[Number];\n    }\n  }\n  if (radix == Number) {\n    v17 = gettext(String);\n    v31 = strrchr(v17, Number);\n    if (v31)\n      v18 = v31 + Number;\n    else\n      v18 = String;\n    result = printf(String, v39, v18, v37 - Number, v38);\n  } else if (radix) {\n    v22 = gettext(String);\n    v33 = strrchr(v22, Number);\n    if (v33)\n      v23 = v33 + Number;\n    else\n      v23 = String;\n    result = printf(String, v39, v23, v37 - Number, v38);\n  } else {\n    v20 = gettext(String);\n    v32 = strrchr(v20, Number);\n    if (v32)\n      v21 = v32 + Number;\n    else\n      v21 = String;\n    result = printf(String, v39, v21, v37 - Number, v38);\n  }\n  return result;\n}", "code_t": "void __cdecl show_sysv(Elf_0 *<span class=\"supfact\">elf</span>,\n                       const char *<span class=\"supfact\">prefix</span>,\n                       const char *<span class=\"supfact\">fname</span>,\n                       const char *<span class=\"supfact\">fullname</span>) {\n  __int64 v4;\n  unsigned int v5;\n  char *v6;\n  char *v7;\n  const char *v8;\n  char *v9;\n  const char *v10;\n  char *v11;\n  const char *v12;\n  Elf64_Addr v13;\n  Elf64_Xword v14;\n  unsigned int v15;\n  __int64 v16;\n  char *v17;\n  const char *v18;\n  char *v19;\n  const char *v20;\n  char *v21;\n  const char *v22;\n  const char *<span class=\"supfact\">v25</span>;\n  const char *<span class=\"supfact\">format</span>;\n  const char *<span class=\"supfact\">name</span>;\n  GElf_Shdr *<span class=\"supfact\">shdr</span>;\n  GElf_Shdr *<span class=\"supfact\">shdr_0</span>;\n  char *<span class=\"supfact\">__res_2</span>;\n  char *<span class=\"supfact\">__res_3</span>;\n  char *<span class=\"supfact\">__res_4</span>;\n  char *<span class=\"supfact\">__res_1</span>;\n  char *<span class=\"supfact\">__res_0</span>;\n  char *<span class=\"supfact\">__res</span>;\n  unsigned int <span class=\"supfact\">digits</span>;\n  GElf_Off <span class=\"supfact\">total</span>;\n  unsigned int <span class=\"supfact\">maxlen</span>;\n  <span class=\"supfact\">maxlen</span> = Number;\n  <span class=\"supfact\">digits</span> = length_map[(int)(gelf_getclass() - Number)][radix];\n  if ((int)elf_getshdrstrndx() < Number) {\n    <span class=\"supfact\">format</span> = gettext(String);\n    error(Number, Number, <span class=\"supfact\">format</span>);\n  }\n  while (elf_nextscn()) {\n    <span class=\"supfact\">shdr</span> = (GElf_Shdr *)gelf_getshdr();\n    if (!<span class=\"supfact\">shdr</span>) {\n      v4 = elf_errmsg();\n      <span class=\"supfact\">v25</span> = gettext(String);\n      error(Number, Number, <span class=\"supfact\">v25</span>, <span class=\"supfact\">fullname</span>,\n            Number L, String, String, v4);\n    }\n    <span class=\"supfact\">name</span> = (const char *)elf_strptr();\n    if (<span class=\"supfact\">name</span> &&\n        (<span class=\"supfact\">shdr</span>->sh_flags & Number) != Number) {\n      if ((int)<span class=\"supfact\">maxlen</span> > (int)strlen(<span class=\"supfact\">name</span>))\n        v5 = <span class=\"supfact\">maxlen</span>;\n      else\n        v5 = strlen(<span class=\"supfact\">name</span>);\n      <span class=\"supfact\">maxlen</span> = v5;\n    }\n  }\n  fputs_unlocked(<span class=\"supfact\">fname</span>, stdout);\n  if (<span class=\"supfact\">prefix</span>) {\n    v6 = gettext(String);\n    printf(v6, <span class=\"supfact\">prefix</span>);\n  }\n  v7 = gettext(String);\n  <span class=\"supfact\">__res</span> = strrchr(v7, Number);\n  if (<span class=\"supfact\">__res</span>)\n    v8 = <span class=\"supfact\">__res</span> + Number;\n  else\n    v8 = String;\n  v9 = gettext(String);\n  <span class=\"supfact\">__res_0</span> = strrchr(v9, Number);\n  if (<span class=\"supfact\">__res_0</span>)\n    v10 = <span class=\"supfact\">__res_0</span> + Number;\n  else\n    v10 = String;\n  v11 = gettext(String);\n  <span class=\"supfact\">__res_1</span> = strrchr(v11, Number);\n  if (<span class=\"supfact\">__res_1</span>)\n    v12 = <span class=\"supfact\">__res_1</span> + Number;\n  else\n    v12 = String;\n  printf(String, <span class=\"supfact\">maxlen</span>, v12, <span class=\"supfact\">digits</span> - Number,\n         v10, <span class=\"supfact\">digits</span>, v8);\n  <span class=\"supfact\">total</span> = Number L;\n  while (elf_nextscn()) {\n    <span class=\"supfact\">shdr_0</span> = (GElf_Shdr *)gelf_getshdr();\n    if ((<span class=\"supfact\">shdr_0</span>->sh_flags & Number) != Number) {\n      v13 = <span class=\"supfact\">shdr_0</span>->sh_addr;\n      v14 = <span class=\"supfact\">shdr_0</span>->sh_size;\n      v15 = <span class=\"supfact\">digits</span> - Number;\n      v16 = elf_strptr();\n      if (radix == radix_hex) {\n        printf(String, <span class=\"supfact\">maxlen</span>, v16, v15, v14,\n               <span class=\"supfact\">digits</span>, v13);\n      } else if (radix) {\n        printf(String, <span class=\"supfact\">maxlen</span>, v16, v15, v14,\n               <span class=\"supfact\">digits</span>, v13);\n      } else {\n        printf(String, <span class=\"supfact\">maxlen</span>, v16, v15, v14,\n               <span class=\"supfact\">digits</span>, v13);\n      }\n      <span class=\"supfact\">total</span> += <span class=\"supfact\">shdr_0</span>->sh_size;\n    }\n  }\n  if (radix == radix_hex) {\n    v17 = gettext(String);\n    <span class=\"supfact\">__res_2</span> = strrchr(v17, Number);\n    if (<span class=\"supfact\">__res_2</span>)\n      v18 = <span class=\"supfact\">__res_2</span> + Number;\n    else\n      v18 = String;\n    printf(String, <span class=\"supfact\">maxlen</span>, v18, <span class=\"supfact\">digits</span> - Number,\n           <span class=\"supfact\">total</span>);\n  } else if (radix) {\n    v21 = gettext(String);\n    <span class=\"supfact\">__res_4</span> = strrchr(v21, Number);\n    if (<span class=\"supfact\">__res_4</span>)\n      v22 = <span class=\"supfact\">__res_4</span> + Number;\n    else\n      v22 = String;\n    printf(String, <span class=\"supfact\">maxlen</span>, v22, <span class=\"supfact\">digits</span> - Number,\n           <span class=\"supfact\">total</span>);\n  } else {\n    v19 = gettext(String);\n    <span class=\"supfact\">__res_3</span> = strrchr(v19, Number);\n    if (<span class=\"supfact\">__res_3</span>)\n      v20 = <span class=\"supfact\">__res_3</span> + Number;\n    else\n      v20 = String;\n    printf(String, <span class=\"supfact\">maxlen</span>, v20, <span class=\"supfact\">digits</span> - Number,\n           <span class=\"supfact\">total</span>);\n  }\n}", "var": [{"name": "a1", "type": "Elf_0 *", "pred_name": "elf", "ref_name": "elf", "ref_type": "Elf_0 *"}, {"name": "a2", "type": "GElf_Ehdr *", "pred_name": "ep", "ref_name": "prefix", "ref_type": "const char *"}, {"name": "a3", "type": "GElf_Shdr *", "pred_name": "shp", "ref_name": "fname", "ref_type": "const char *"}, {"name": "a4", "type": "const char *", "pred_name": "fn", "ref_name": "fullname", "ref_type": "const char *"}, {"name": "v26", "type": "void", "pred_name": "__u", "ref_name": "v25", "ref_type": "const char *"}, {"name": "format", "type": "const char *", "pred_name": "format", "ref_name": "format", "ref_type": "const char *"}, {"name": "s", "type": "const char *", "pred_name": "s", "ref_name": "name", "ref_type": "const char *"}, {"name": "v29", "type": "Elf_Scn_0 *", "pred_name": "sec", "ref_name": "shdr", "ref_type": "GElf_Shdr *"}, {"name": "v30", "type": "__u64", "pred_name": "v30", "ref_name": "shdr_0", "ref_type": "GElf_Shdr *"}, {"name": "v31", "type": "__u64", "pred_name": "v31", "ref_name": "__res_2", "ref_type": "char *"}, {"name": "v32", "type": "__u64", "pred_name": "v32", "ref_name": "__res_3", "ref_type": "char *"}, {"name": "v33", "type": "__u64", "pred_name": "v33", "ref_name": "__res_4", "ref_type": "char *"}, {"name": "v34", "type": "char *", "pred_name": "v34", "ref_name": "__res_1", "ref_type": "char *"}, {"name": "v35", "type": "char *", "pred_name": "v35", "ref_name": "__res_0", "ref_type": "char *"}, {"name": "v36", "type": "char *", "pred_name": "v36", "ref_name": "__res", "ref_type": "char *"}, {"name": "v37", "type": "int", "pred_name": "v37", "ref_name": "digits", "ref_type": "unsigned int"}, {"name": "v38", "type": "char *", "pred_name": "v38", "ref_name": "total", "ref_type": "GElf_Off"}, {"name": "v39", "type": "int", "pred_name": "v39", "ref_name": "maxlen", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/388a6e90394297bba7b249d014188ee3555b3d6ad217168ad0ce63969b5b1abc", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Net/obj/Linux/x86_64/release_shared/RemoteSyslogChannel.o", "objdump": "00000000000000f0 <_ZN4Poco3Net19RemoteSyslogChannel5closeEv>:\n      f0:\t80 bf 98 00 00 00 00 \tcmpb   $0x0,0x98(%rdi)\n      f7:\t74 1f                \tje     118 <_ZN4Poco3Net19RemoteSyslogChannel5closeEv+0x28>\n      f9:\t53                   \tpush   %rbx\n      fa:\t48 89 fb             \tmov    %rdi,%rbx\n      fd:\t48 8b bf 88 00 00 00 \tmov    0x88(%rdi),%rdi\n     104:\t48 8b 07             \tmov    (%rdi),%rax\n     107:\tff 50 48             \tcallq  *0x48(%rax)\n     10a:\tc6 83 98 00 00 00 00 \tmovb   $0x0,0x98(%rbx)\n     111:\t5b                   \tpop    %rbx\n     112:\tc3                   \tretq   \n     113:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n     118:\tc3                   \tretq   \n     119:\t90                   \tnop\n     11a:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)", "code_s": "__int64 __fastcall Poco Net RemoteSyslogChannel\nclose(Poco Net RemoteSyslogChannel *this) {\n  __int64 result;\n  if (*((_BYTE *)this + Number)) {\n    result = (*(__int64(__fastcall **)(_QWORD))(\n        **((_QWORD **)this + Number) + Number L))(*((_QWORD *)this + Number));\n    *((_BYTE *)this + Number) = Number;\n  }\n  return result;\n}", "code_t": "__int64 __fastcall Poco Net RemoteSyslogChannel\nclose(Poco Net RemoteSyslogChannel *<span class=\"supfact\">this</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  if (*((_BYTE *)<span class=\"supfact\">this</span> + Number)) {\n    <span class=\"supfact\">result</span> = (*(__int64(__fastcall **)(_QWORD))(\n        **((_QWORD **)<span class=\"supfact\">this</span> + Number) + Number L))(\n        *((_QWORD *)<span class=\"supfact\">this</span> + Number));\n    *((_BYTE *)<span class=\"supfact\">this</span> + Number) = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "Poco::Net::RemoteSyslogChannel *"}, {"name": "result", "type": "__int64", "pred_name": "v1", "ref_name": "result", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "xenko3d", "repo_name": "freeimage", "path": "xenko3d/freeimage/65fece8fb4f43a776196874a36f0a52fe3d43979cc4b197e3e228812b9b81144", "path_in_repo": "xenko3d/freeimage//Source/LibTIFF4/tif_getimage.o", "objdump": "0000000000002de4 <put1bitcmaptile>:\n    2de4:\t55                   \tpush   %rbp\n    2de5:\t48 89 e5             \tmov    %rsp,%rbp\n    2de8:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    2dec:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    2df0:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n    2df3:\t89 4d c8             \tmov    %ecx,-0x38(%rbp)\n    2df6:\t44 89 45 c4          \tmov    %r8d,-0x3c(%rbp)\n    2dfa:\t44 89 4d c0          \tmov    %r9d,-0x40(%rbp)\n    2dfe:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2e02:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n    2e06:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2e0a:\t8b 45 10             \tmov    0x10(%rbp),%eax\n    2e0d:\t8d 50 07             \tlea    0x7(%rax),%edx\n    2e10:\t85 c0                \ttest   %eax,%eax\n    2e12:\t0f 48 c2             \tcmovs  %edx,%eax\n    2e15:\tc1 f8 03             \tsar    $0x3,%eax\n    2e18:\t89 45 10             \tmov    %eax,0x10(%rbp)\n    2e1b:\te9 5a 02 00 00       \tjmpq   307a <put1bitcmaptile+0x296>\n    2e20:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    2e23:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    2e26:\te9 0c 01 00 00       \tjmpq   2f37 <put1bitcmaptile+0x153>\n    2e2b:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n    2e2f:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    2e33:\t48 89 55 20          \tmov    %rdx,0x20(%rbp)\n    2e37:\t0f b6 00             \tmovzbl (%rax),%eax\n    2e3a:\t0f b6 c0             \tmovzbl %al,%eax\n    2e3d:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    2e44:\t00 \n    2e45:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2e49:\t48 01 d0             \tadd    %rdx,%rax\n    2e4c:\t48 8b 00             \tmov    (%rax),%rax\n    2e4f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2e53:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2e57:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2e5b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2e5f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2e63:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2e67:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2e6b:\t8b 12                \tmov    (%rdx),%edx\n    2e6d:\t89 10                \tmov    %edx,(%rax)\n    2e6f:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2e73:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2e77:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2e7b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2e7f:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2e83:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2e87:\t8b 12                \tmov    (%rdx),%edx\n    2e89:\t89 10                \tmov    %edx,(%rax)\n    2e8b:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2e8f:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2e93:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2e97:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2e9b:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2e9f:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2ea3:\t8b 12                \tmov    (%rdx),%edx\n    2ea5:\t89 10                \tmov    %edx,(%rax)\n    2ea7:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2eab:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2eaf:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2eb3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2eb7:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2ebb:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2ebf:\t8b 12                \tmov    (%rdx),%edx\n    2ec1:\t89 10                \tmov    %edx,(%rax)\n    2ec3:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2ec7:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2ecb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2ecf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2ed3:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2ed7:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2edb:\t8b 12                \tmov    (%rdx),%edx\n    2edd:\t89 10                \tmov    %edx,(%rax)\n    2edf:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2ee3:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2ee7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2eeb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2eef:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2ef3:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2ef7:\t8b 12                \tmov    (%rdx),%edx\n    2ef9:\t89 10                \tmov    %edx,(%rax)\n    2efb:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2eff:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2f03:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2f07:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2f0b:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2f0f:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2f13:\t8b 12                \tmov    (%rdx),%edx\n    2f15:\t89 10                \tmov    %edx,(%rax)\n    2f17:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2f1b:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2f1f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2f23:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2f27:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2f2b:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2f2f:\t8b 12                \tmov    (%rdx),%edx\n    2f31:\t89 10                \tmov    %edx,(%rax)\n    2f33:\t83 6d f4 08          \tsubl   $0x8,-0xc(%rbp)\n    2f37:\t83 7d f4 07          \tcmpl   $0x7,-0xc(%rbp)\n    2f3b:\t0f 87 ea fe ff ff    \tja     2e2b <put1bitcmaptile+0x47>\n    2f41:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    2f45:\t0f 84 19 01 00 00    \tje     3064 <put1bitcmaptile+0x280>\n    2f4b:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n    2f4f:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    2f53:\t48 89 55 20          \tmov    %rdx,0x20(%rbp)\n    2f57:\t0f b6 00             \tmovzbl (%rax),%eax\n    2f5a:\t0f b6 c0             \tmovzbl %al,%eax\n    2f5d:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    2f64:\t00 \n    2f65:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2f69:\t48 01 d0             \tadd    %rdx,%rax\n    2f6c:\t48 8b 00             \tmov    (%rax),%rax\n    2f6f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2f73:\t83 7d f4 07          \tcmpl   $0x7,-0xc(%rbp)\n    2f77:\t0f 87 e7 00 00 00    \tja     3064 <put1bitcmaptile+0x280>\n    2f7d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    2f80:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    2f87:\t00 \n    2f88:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 2f8f <put1bitcmaptile+0x1ab>\n    2f8f:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n    2f92:\t48 98                \tcltq   \n    2f94:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 2f9b <put1bitcmaptile+0x1b7>\n    2f9b:\t48 01 d0             \tadd    %rdx,%rax\n    2f9e:\tff e0                \tjmpq   *%rax\n    2fa0:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2fa4:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2fa8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2fac:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2fb0:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2fb4:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2fb8:\t8b 12                \tmov    (%rdx),%edx\n    2fba:\t89 10                \tmov    %edx,(%rax)\n    2fbc:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2fc0:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2fc4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2fc8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2fcc:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2fd0:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2fd4:\t8b 12                \tmov    (%rdx),%edx\n    2fd6:\t89 10                \tmov    %edx,(%rax)\n    2fd8:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2fdc:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2fe0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2fe4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2fe8:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    2fec:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    2ff0:\t8b 12                \tmov    (%rdx),%edx\n    2ff2:\t89 10                \tmov    %edx,(%rax)\n    2ff4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2ff8:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    2ffc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3000:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3004:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    3008:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    300c:\t8b 12                \tmov    (%rdx),%edx\n    300e:\t89 10                \tmov    %edx,(%rax)\n    3010:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    3014:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    3018:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    301c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3020:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    3024:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    3028:\t8b 12                \tmov    (%rdx),%edx\n    302a:\t89 10                \tmov    %edx,(%rax)\n    302c:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    3030:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    3034:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3038:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    303c:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    3040:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    3044:\t8b 12                \tmov    (%rdx),%edx\n    3046:\t89 10                \tmov    %edx,(%rax)\n    3048:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    304c:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    3050:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3054:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3058:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    305c:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    3060:\t8b 12                \tmov    (%rdx),%edx\n    3062:\t89 10                \tmov    %edx,(%rax)\n    3064:\t8b 45 18             \tmov    0x18(%rbp),%eax\n    3067:\t48 98                \tcltq   \n    3069:\t48 c1 e0 02          \tshl    $0x2,%rax\n    306d:\t48 01 45 d0          \tadd    %rax,-0x30(%rbp)\n    3071:\t8b 45 10             \tmov    0x10(%rbp),%eax\n    3074:\t48 98                \tcltq   \n    3076:\t48 01 45 20          \tadd    %rax,0x20(%rbp)\n    307a:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    307d:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    3080:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n    3083:\t85 c0                \ttest   %eax,%eax\n    3085:\t0f 85 95 fd ff ff    \tjne    2e20 <put1bitcmaptile+0x3c>\n    308b:\t90                   \tnop\n    308c:\t90                   \tnop\n    308d:\t5d                   \tpop    %rbp\n    308e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall put1bitcmaptile(__int64 a1, _DWORD *a2, __int64 a3,\n                                   __int64 a4, unsigned int a5, unsigned int a6,\n                                   int a7, int a8, unsigned __int8 *a9) {\n  unsigned __int8 *v9;\n  _DWORD *v10;\n  _DWORD *v11;\n  unsigned __int8 *v12;\n  _DWORD *v13;\n  _DWORD *v14;\n  _DWORD *v15;\n  _DWORD *v16;\n  _DWORD *v17;\n  _DWORD *v18;\n  _DWORD *v19;\n  _DWORD *v20;\n  _DWORD *v21;\n  _DWORD *v22;\n  _DWORD *v23;\n  _DWORD *v24;\n  _DWORD *v25;\n  __int64 result;\n  __int64 v29;\n  _DWORD *v31;\n  int i;\n  v29 = *(_QWORD *)(a1 + Number);\n  for (i = a7 / Number;; a9 += i) {\n    result = a6--;\n    if (!(_DWORD)result)\n      break;\n    while (a5 > Number) {\n      v9 = a9++;\n      v10 = *(_DWORD **)(Number L * *v9 + v29);\n      *a2 = *v10++;\n      a2[Number] = *v10++;\n      a2[Number] = *v10++;\n      a2[Number] = *v10++;\n      a2[Number] = *v10++;\n      a2[Number] = *v10++;\n      a2[Number] = *v10;\n      v11 = a2 + Number;\n      a2 += Number;\n      *v11 = v10[Number];\n      a5 -= Number;\n    }\n    if (a5) {\n      v12 = a9++;\n      v31 = *(_DWORD **)(Number L * *v12 + v29);\n      switch (a5) {\n      case Number:\n        goto LABEL_13;\n      case Number:\n        goto LABEL_12;\n      case Number:\n        goto LABEL_11;\n      case Number:\n        goto LABEL_10;\n      case Number:\n        goto LABEL_9;\n      case Number:\n        goto LABEL_8;\n      case Number:\n        v13 = *(_DWORD **)(Number L * *v12 + v29);\n        ++v31;\n        v14 = a2++;\n        *v14 = *v13;\n      LABEL_8:\n        v15 = v31++;\n        v16 = a2++;\n        *v16 = *v15;\n      LABEL_9:\n        v17 = v31++;\n        v18 = a2++;\n        *v18 = *v17;\n      LABEL_10:\n        v19 = v31++;\n        v20 = a2++;\n        *v20 = *v19;\n      LABEL_11:\n        v21 = v31++;\n        v22 = a2++;\n        *v22 = *v21;\n      LABEL_12:\n        v23 = v31++;\n        v24 = a2++;\n        *v24 = *v23;\n      LABEL_13:\n        v25 = a2++;\n        *v25 = *v31;\n        break;\n      default:\n        break;\n      }\n    }\n    a2 += a8;\n  }\n  return result;\n}", "code_t": "void __cdecl put1bitcmaptile(TIFFRGBAImage *<span class=\"supfact\">img</span>,\n                             uint32 *<span class=\"supfact\">cp</span>,\n                             uint32 <span class=\"supfact\">x</span>, uint32 <span class=\"supfact\">y</span>,\n                             uint32 <span class=\"supfact\">w</span>, uint32 <span class=\"supfact\">h</span>,\n                             int32 <span class=\"supfact\">fromskew</span>,\n                             int32 <span class=\"supfact\">toskew</span>,\n                             unsigned __int8 *<span class=\"supfact\">pp</span>) {\n  unsigned __int8 *v9;\n  uint32 *v10;\n  uint32 *v11;\n  unsigned __int8 *v12;\n  uint32 *v13;\n  uint32 *v14;\n  uint32 *v15;\n  uint32 *v16;\n  uint32 *v17;\n  uint32 *v18;\n  uint32 *v19;\n  uint32 *v20;\n  uint32 *v21;\n  uint32 *v22;\n  uint32 *v23;\n  uint32 *v24;\n  uint32 *v25;\n  uint32 **<span class=\"supfact\">PALmap</span>;\n  uint32 *<span class=\"supfact\">bw</span>;\n  int fromskewa;\n  <span class=\"supfact\">PALmap</span> = <span class=\"supfact\">img</span>-><span class=\"supfact\">PALmap</span>;\n  for (fromskewa = <span class=\"supfact\">fromskew</span> / Number; <span class=\"supfact\">h</span>--;\n       <span class=\"supfact\">pp</span> += fromskewa) {\n    while (<span class=\"supfact\">w</span> > Number) {\n      v9 = <span class=\"supfact\">pp</span>++;\n      v10 = <span class=\"supfact\">PALmap</span>[*v9];\n      *<span class=\"supfact\">cp</span> = *v10++;\n      <span class=\"supfact\">cp</span>[Number] = *v10++;\n      <span class=\"supfact\">cp</span>[Number] = *v10++;\n      <span class=\"supfact\">cp</span>[Number] = *v10++;\n      <span class=\"supfact\">cp</span>[Number] = *v10++;\n      <span class=\"supfact\">cp</span>[Number] = *v10++;\n      <span class=\"supfact\">cp</span>[Number] = *v10;\n      v11 = <span class=\"supfact\">cp</span> + Number;\n      <span class=\"supfact\">cp</span> += Number;\n      *v11 = v10[Number];\n      <span class=\"supfact\">w</span> -= Number;\n    }\n    if (<span class=\"supfact\">w</span>) {\n      v12 = <span class=\"supfact\">pp</span>++;\n      <span class=\"supfact\">bw</span> = <span class=\"supfact\">PALmap</span>[*v12];\n      switch (<span class=\"supfact\">w</span>) {\n      case Number:\n        goto LABEL_13;\n      case Number:\n        goto LABEL_12;\n      case Number:\n        goto LABEL_11;\n      case Number:\n        goto LABEL_10;\n      case Number:\n        goto LABEL_9;\n      case Number:\n        goto LABEL_8;\n      case Number:\n        v13 = <span class=\"supfact\">PALmap</span>[*v12];\n        ++<span class=\"supfact\">bw</span>;\n        v14 = <span class=\"supfact\">cp</span>++;\n        *v14 = *v13;\n      LABEL_8:\n        v15 = <span class=\"supfact\">bw</span>++;\n        v16 = <span class=\"supfact\">cp</span>++;\n        *v16 = *v15;\n      LABEL_9:\n        v17 = <span class=\"supfact\">bw</span>++;\n        v18 = <span class=\"supfact\">cp</span>++;\n        *v18 = *v17;\n      LABEL_10:\n        v19 = <span class=\"supfact\">bw</span>++;\n        v20 = <span class=\"supfact\">cp</span>++;\n        *v20 = *v19;\n      LABEL_11:\n        v21 = <span class=\"supfact\">bw</span>++;\n        v22 = <span class=\"supfact\">cp</span>++;\n        *v22 = *v21;\n      LABEL_12:\n        v23 = <span class=\"supfact\">bw</span>++;\n        v24 = <span class=\"supfact\">cp</span>++;\n        *v24 = *v23;\n      LABEL_13:\n        v25 = <span class=\"supfact\">cp</span>++;\n        *v25 = *<span class=\"supfact\">bw</span>;\n        break;\n      default:\n        break;\n      }\n    }\n    <span class=\"supfact\">cp</span> += <span class=\"supfact\">toskew</span>;\n  }\n}", "var": [{"name": "a1", "type": "SDL_Surface_0 *", "pred_name": "dst", "ref_name": "img", "ref_type": "TIFFRGBAImage *"}, {"name": "a2", "type": "const SDL_PixelFormat_0 *", "pred_name": "chunk", "ref_name": "cp", "ref_type": "uint32 *"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "x", "ref_type": "uint32"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "y", "ref_type": "uint32"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "w", "ref_type": "uint32"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "h", "ref_type": "uint32"}, {"name": "a7", "type": "disappear", "pred_name": "", "ref_name": "fromskew", "ref_type": "int32"}, {"name": "a8", "type": "disappear", "pred_name": "", "ref_name": "toskew", "ref_type": "int32"}, {"name": "a9", "type": "disappear", "pred_name": "", "ref_name": "pp", "ref_type": "unsigned __int8 *"}, {"name": "v29", "type": "FT_Byte *", "pred_name": "p", "ref_name": "PALmap", "ref_type": "uint32 * *"}, {"name": "v31", "type": "FT_Byte *", "pred_name": "q", "ref_name": "bw", "ref_type": "uint32 *"}], "body_in_train": false}, {"repo_owner": "unicorn-engine", "repo_name": "unicorn", "path": "unicorn-engine/unicorn/97b29841f11db587eab7f3a91528a3e1c5d57dd4ea5006a41219ba60474ece17", "path_in_repo": "unicorn-engine/unicorn/qemu/mips64el-softmmu/tcg/optimize.o", "objdump": "0000000000000543 <op_to_movi_mips64el>:\n     543:\t55                   \tpush   %rbp\n     544:\t48 89 e5             \tmov    %rsp,%rbp\n     547:\t48 83 ec 10          \tsub    $0x10,%rsp\n     54b:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     54f:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n     552:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n     555:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     559:\t89 d6                \tmov    %edx,%esi\n     55b:\t48 89 c7             \tmov    %rax,%rdi\n     55e:\te8 14 ff ff ff       \tcallq  477 <op_bits_mips64el>\n     563:\t83 f8 20             \tcmp    $0x20,%eax\n     566:\t74 07                \tje     56f <op_to_movi_mips64el+0x2c>\n     568:\t83 f8 40             \tcmp    $0x40,%eax\n     56b:\t74 09                \tje     576 <op_to_movi_mips64el+0x33>\n     56d:\teb 0e                \tjmp    57d <op_to_movi_mips64el+0x3a>\n     56f:\tb8 0b 00 00 00       \tmov    $0xb,%eax\n     574:\teb 53                \tjmp    5c9 <op_to_movi_mips64el+0x86>\n     576:\tb8 3f 00 00 00       \tmov    $0x3f,%eax\n     57b:\teb 4c                \tjmp    5c9 <op_to_movi_mips64el+0x86>\n     57d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 584 <op_to_movi_mips64el+0x41>\n     584:\t48 89 c1             \tmov    %rax,%rcx\n     587:\tba 39 00 00 00       \tmov    $0x39,%edx\n     58c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     591:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 598 <op_to_movi_mips64el+0x55>\n     598:\te8 00 00 00 00       \tcallq  59d <op_to_movi_mips64el+0x5a>\n     59d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a4 <op_to_movi_mips64el+0x61>\n     5a4:\tb9 62 00 00 00       \tmov    $0x62,%ecx\n     5a9:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 5b0 <op_to_movi_mips64el+0x6d>\n     5b0:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5b7 <op_to_movi_mips64el+0x74>\n     5b7:\t48 89 c7             \tmov    %rax,%rdi\n     5ba:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5bf:\te8 00 00 00 00       \tcallq  5c4 <op_to_movi_mips64el+0x81>\n     5c4:\te8 00 00 00 00       \tcallq  5c9 <op_to_movi_mips64el+0x86>\n     5c9:\tc9                   \tleaveq \n     5ca:\tc3                   \tretq   ", "code_s": "__int64 __fastcall op_to_movi_mips64el(__int64 a1, unsigned int a2) {\n  int v2;\n  v2 = op_bits_mips64el(a1, a2);\n  if (v2 == Number)\n    return Number L;\n  if (v2 != Number) {\n    fwrite(String, Number, Number, stderr);\n    fprintf(stderr, String, String, Number L);\n    abort();\n  }\n  return Number L;\n}", "code_t": "TCGOpcode_0 __cdecl op_to_movi_mips64el(TCGContext_0 *<span class=\"supfact\">s</span>,\n                                        TCGOpcode_0 <span class=\"supfact\">op</span>) {\n  int <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = op_bits_mips64el(<span class=\"supfact\">s</span>, <span class=\"supfact\">op</span>);\n  if (<span class=\"supfact\">v2</span> == Number)\n    return Number;\n  if (<span class=\"supfact\">v2</span> != Number) {\n    fwrite(String, Number, Number, stderr);\n    fprintf(stderr, String, String, Number L);\n    abort();\n  }\n  return Number;\n}", "var": [{"name": "a1", "type": "TCGContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "TCGContext_0 *"}, {"name": "a2", "type": "TCGOpcode_0", "pred_name": "op", "ref_name": "op", "ref_type": "TCGOpcode_0"}, {"name": "v2", "type": "int", "pred_name": "v2", "ref_name": "v2", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "centic9", "repo_name": "git-ppa", "path": "centic9/git-ppa/f3c52faf5a76208c04d0e14985850aa90574bc3e0dd8a65292f344aca22da9af", "path_in_repo": "centic9/git-ppa//builtin/show-branch.o", "objdump": "0000000000000dae <count_slash>:\n     dae:\t55                   \tpush   %rbp\n     daf:\t48 89 e5             \tmov    %rsp,%rbp\n     db2:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     db6:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     dbd:\teb 17                \tjmp    dd6 <count_slash+0x28>\n     dbf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     dc3:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     dc7:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n     dcb:\t0f b6 00             \tmovzbl (%rax),%eax\n     dce:\t3c 2f                \tcmp    $0x2f,%al\n     dd0:\t75 04                \tjne    dd6 <count_slash+0x28>\n     dd2:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     dd6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     dda:\t0f b6 00             \tmovzbl (%rax),%eax\n     ddd:\t84 c0                \ttest   %al,%al\n     ddf:\t75 de                \tjne    dbf <count_slash+0x11>\n     de1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     de4:\t5d                   \tpop    %rbp\n     de5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall count_slash(_BYTE *a1) {\n  _BYTE *v1;\n  unsigned int v4;\n  v4 = Number;\n  while (*a1) {\n    v1 = a1++;\n    if (*v1 == Number)\n      ++v4;\n  }\n  return v4;\n}", "code_t": "int __cdecl count_slash(const char *<span class=\"supfact\">s</span>) {\n  const char *<span class=\"supfact\">v1</span>;\n  int <span class=\"supfact\">cnt</span>;\n  <span class=\"supfact\">cnt</span> = Number;\n  while (*<span class=\"supfact\">s</span>) {\n    <span class=\"supfact\">v1</span> = <span class=\"supfact\">s</span>++;\n    if (*<span class=\"supfact\">v1</span> == Number)\n      ++<span class=\"supfact\">cnt</span>;\n  }\n  return <span class=\"supfact\">cnt</span>;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "str", "ref_name": "s", "ref_type": "const char *"}, {"name": "v1", "type": "char *", "pred_name": "v1", "ref_name": "v1", "ref_type": "const char *"}, {"name": "v4", "type": "int", "pred_name": "i", "ref_name": "cnt", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "darkspr1te", "repo_name": "uClinux-dist", "path": "darkspr1te/uClinux-dist/4f48b8dd337bdb9b572e329da46d270bff93562c94ef84e91a64c1ffdc36dabc", "path_in_repo": "darkspr1te/uClinux-dist/user/mysql/innobase/dict/dict0dict.o", "objdump": "00000000000004ff <mach_dulint_get_compressed_size>:\n     4ff:\t55                   \tpush   %rbp\n     500:\t48 89 e5             \tmov    %rsp,%rbp\n     503:\t48 83 ec 10          \tsub    $0x10,%rsp\n     507:\t48 89 f8             \tmov    %rdi,%rax\n     50a:\t48 89 f1             \tmov    %rsi,%rcx\n     50d:\t48 89 ca             \tmov    %rcx,%rdx\n     510:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     514:\t48 89 55 f8          \tmov    %rdx,-0x8(%rbp)\n     518:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     51c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     520:\t48 89 d7             \tmov    %rdx,%rdi\n     523:\t48 89 c6             \tmov    %rax,%rsi\n     526:\te8 fb fa ff ff       \tcallq  26 <ut_dulint_get_high>\n     52b:\t48 89 c7             \tmov    %rax,%rdi\n     52e:\te8 6b fe ff ff       \tcallq  39e <mach_get_compressed_size>\n     533:\t48 83 c0 04          \tadd    $0x4,%rax\n     537:\tc9                   \tleaveq \n     538:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mach_dulint_get_compressed_size(__int64 a1) {\n  __int64 v1;\n  v1 = ut_dulint_get_high(a1);\n  return mach_get_compressed_size(v1) + Number;\n}", "code_t": "ulint __cdecl mach_dulint_get_compressed_size(dulint <span class=\"supfact\">n</span>) {\n  ulint <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = ut_dulint_get_high(<span class=\"supfact\">n</span>);\n  return mach_get_compressed_size(<span class=\"supfact\">v1</span>) + Number;\n}", "var": [{"name": "a1", "type": "struct dulint { ulint high; ulint low; }", "pred_name": "n", "ref_name": "n", "ref_type": "struct dulint { ulint high; ulint low; }"}, {"name": "v1", "type": "ulint", "pred_name": "v1", "ref_name": "v1", "ref_type": "ulint"}], "body_in_train": false}, {"repo_owner": "themathpath", "repo_name": "lasvm", "path": "themathpath/lasvm/080e3565875ec6926977cb57d15b8f0ce76c02975f1b1f288e72f96b8553347c", "path_in_repo": "themathpath/lasvm//la_svm", "objdump": "0000000000406a50 <_Z10lasvm_infoPKcz>:\n  406a50:\t48 81 ec d8 00 00 00 \tsub    $0xd8,%rsp\n  406a57:\t49 89 fa             \tmov    %rdi,%r10\n  406a5a:\t48 89 74 24 28       \tmov    %rsi,0x28(%rsp)\n  406a5f:\t48 89 54 24 30       \tmov    %rdx,0x30(%rsp)\n  406a64:\t48 89 4c 24 38       \tmov    %rcx,0x38(%rsp)\n  406a69:\t4c 89 44 24 40       \tmov    %r8,0x40(%rsp)\n  406a6e:\t4c 89 4c 24 48       \tmov    %r9,0x48(%rsp)\n  406a73:\t84 c0                \ttest   %al,%al\n  406a75:\t74 37                \tje     406aae <_Z10lasvm_infoPKcz+0x5e>\n  406a77:\t0f 29 44 24 50       \tmovaps %xmm0,0x50(%rsp)\n  406a7c:\t0f 29 4c 24 60       \tmovaps %xmm1,0x60(%rsp)\n  406a81:\t0f 29 54 24 70       \tmovaps %xmm2,0x70(%rsp)\n  406a86:\t0f 29 9c 24 80 00 00 \tmovaps %xmm3,0x80(%rsp)\n  406a8d:\t00 \n  406a8e:\t0f 29 a4 24 90 00 00 \tmovaps %xmm4,0x90(%rsp)\n  406a95:\t00 \n  406a96:\t0f 29 ac 24 a0 00 00 \tmovaps %xmm5,0xa0(%rsp)\n  406a9d:\t00 \n  406a9e:\t0f 29 b4 24 b0 00 00 \tmovaps %xmm6,0xb0(%rsp)\n  406aa5:\t00 \n  406aa6:\t0f 29 bc 24 c0 00 00 \tmovaps %xmm7,0xc0(%rsp)\n  406aad:\t00 \n  406aae:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n  406ab3:\tba c0 68 40 00       \tmov    $0x4068c0,%edx\n  406ab8:\t48 8b 05 11 93 00 00 \tmov    0x9311(%rip),%rax        # 40fdd0 <lasvm_message_proc>\n  406abf:\t48 8d 8c 24 e0 00 00 \tlea    0xe0(%rsp),%rcx\n  406ac6:\t00 \n  406ac7:\t48 89 74 24 18       \tmov    %rsi,0x18(%rsp)\n  406acc:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  406ad1:\t4c 89 d6             \tmov    %r10,%rsi\n  406ad4:\t48 85 c0             \ttest   %rax,%rax\n  406ad7:\tc7 44 24 08 08 00 00 \tmovl   $0x8,0x8(%rsp)\n  406ade:\t00 \n  406adf:\t48 0f 44 c2          \tcmove  %rdx,%rax\n  406ae3:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n  406ae8:\t48 8d 54 24 08       \tlea    0x8(%rsp),%rdx\n  406aed:\tc7 44 24 0c 30 00 00 \tmovl   $0x30,0xc(%rsp)\n  406af4:\t00 \n  406af5:\tff d0                \tcallq  *%rax\n  406af7:\t48 81 c4 d8 00 00 00 \tadd    $0xd8,%rsp\n  406afe:\tc3                   \tretq   \n  406aff:\t90                   \tnop", "code_s": "__int64 lasvm_info(const char *a1, ...) {\n  int(__fastcall * v1)(int, const char *, void *);\n  gcc_va_list va;\n  char v4;\n  v1 = (int(__fastcall *)(int, const char *, void *))lasvm_message_proc;\n  va[Number].reg_save_area = &v4;\n  va[Number].gp_offset = Number;\n  if (!lasvm_message_proc)\n    v1 = defaultproc;\n  va_start(va, a1);\n  return ((__int64(__fastcall *)(__int64, const char *, __va_list_tag *))v1)(\n      Number L, a1, va);\n}", "code_t": "__int64 lasvm_info(const char *<span class=\"supfact\">a1</span>, ...) {\n  int(__fastcall * <span class=\"supfact\">v1</span>)(int, const char *, void *);\n  gcc_va_list <span class=\"supfact\">va</span>;\n  char <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v1</span> =\n      (int(__fastcall *)(int, const char *, void *))lasvm_message_proc;\n  <span class=\"supfact\">va</span>[Number].reg_save_area = &<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">va</span>[Number].gp_offset = Number;\n  if (!lasvm_message_proc)\n    <span class=\"supfact\">v1</span> = defaultproc;\n  va_start(<span class=\"supfact\">va</span>, <span class=\"supfact\">a1</span>);\n  return ((__int64(__fastcall *)(__int64, const char *,\n                                 __va_list_tag *))<span class=\"supfact\">v1</span>)(\n      Number L, <span class=\"supfact\">a1</span>, <span class=\"supfact\">va</span>);\n}", "var": [{"name": "a1", "type": "const char *", "pred_name": "file", "ref_name": "a1", "ref_type": "const char *"}, {"name": "v1", "type": "__unk__", "pred_name": "v1", "ref_name": "v1", "ref_type": "int (__fastcall *)(int a1, const char *a2, void *a3)"}, {"name": "va", "type": "__va_list_tag[1]", "pred_name": "ap", "ref_name": "va", "ref_type": "__va_list_tag[1]"}, {"name": "v4", "type": "__unk__", "pred_name": "__unk__", "ref_name": "v4", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "ubinix-warun", "repo_name": "sketchbook-promela", "path": "ubinix-warun/sketchbook-promela/a1c645ce325cf0b59b50843a90e6b607e780b09a70a2b9b0ff15edca0d2a8ded", "path_in_repo": "ubinix-warun/sketchbook-promela/cheatsheet/Spin644/Src6.4.4/spin", "objdump": "00000000004436d6 <check_special>:\n  4436d6:\t55                   \tpush   %rbp\n  4436d7:\t48 89 e5             \tmov    %rsp,%rbp\n  4436da:\t48 83 ec 50          \tsub    $0x50,%rsp\n  4436de:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  4436e2:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n  4436e9:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  4436f0:\teb 1d                \tjmp    44370f <check_special+0x39>\n  4436f2:\t48 8b 05 67 86 0c 00 \tmov    0xc8667(%rip),%rax        # 50bd60 <Nacc>\n  4436f9:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4436fc:\t48 63 d2             \tmovslq %edx,%rdx\n  4436ff:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  443703:\t48 01 d0             \tadd    %rdx,%rax\n  443706:\t8b 00                \tmov    (%rax),%eax\n  443708:\t01 45 e0             \tadd    %eax,-0x20(%rbp)\n  44370b:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  44370f:\t8b 05 7f 56 0a 00    \tmov    0xa567f(%rip),%eax        # 4e8d94 <nclaims>\n  443715:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  443718:\t7c d8                \tjl     4436f2 <check_special+0x1c>\n  44371a:\tc7 05 58 86 0c 00 00 \tmovl   $0x0,0xc8658(%rip)        # 50bd7c <is_accept>\n  443721:\t00 00 00 \n  443724:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  44372b:\te9 20 03 00 00       \tjmpq   443a50 <check_special+0x37a>\n  443730:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  443737:\t48 8b 05 1a d6 0b 00 \tmov    0xbd61a(%rip),%rax        # 500d58 <rdy>\n  44373e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  443742:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  443749:\te9 a1 02 00 00       \tjmpq   4439ef <check_special+0x319>\n  44374e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  443752:\t8b 40 20             \tmov    0x20(%rax),%eax\n  443755:\t83 f8 01             \tcmp    $0x1,%eax\n  443758:\t0f 85 7d 02 00 00    \tjne    4439db <check_special+0x305>\n  44375e:\t8b 05 6c ca 0c 00    \tmov    0xcca6c(%rip),%eax        # 5101d0 <Strict>\n  443764:\t85 c0                \ttest   %eax,%eax\n  443766:\t75 5f                \tjne    4437c7 <check_special+0xf1>\n  443768:\t83 7d e8 01          \tcmpl   $0x1,-0x18(%rbp)\n  44376c:\t75 59                \tjne    4437c7 <check_special+0xf1>\n  44376e:\t48 8b 05 eb 85 0c 00 \tmov    0xc85eb(%rip),%rax        # 50bd60 <Nacc>\n  443775:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  443778:\t48 63 d2             \tmovslq %edx,%rdx\n  44377b:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  44377f:\t48 01 d0             \tadd    %rdx,%rax\n  443782:\t8b 00                \tmov    (%rax),%eax\n  443784:\t85 c0                \ttest   %eax,%eax\n  443786:\t75 3f                \tjne    4437c7 <check_special+0xf1>\n  443788:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n  44378c:\t7e 39                \tjle    4437c7 <check_special+0xf1>\n  44378e:\t8b 05 80 ca 0c 00    \tmov    0xcca80(%rip),%eax        # 510214 <verbose>\n  443794:\t83 e0 20             \tand    $0x20,%eax\n  443797:\t85 c0                \ttest   %eax,%eax\n  443799:\t0f 84 d8 00 00 00    \tje     443877 <check_special+0x1a1>\n  44379f:\t8b 05 d3 85 0c 00    \tmov    0xc85d3(%rip),%eax        # 50bd78 <unfolding>\n  4437a5:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  4437a8:\t0f 85 c9 00 00 00    \tjne    443877 <check_special+0x1a1>\n  4437ae:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4437b1:\t89 c6                \tmov    %eax,%esi\n  4437b3:\tbf b0 bd 4b 00       \tmov    $0x4bbdb0,%edi\n  4437b8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4437bd:\te8 4e e9 fb ff       \tcallq  402110 <printf@plt>\n  4437c2:\te9 b0 00 00 00       \tjmpq   443877 <check_special+0x1a1>\n  4437c7:\t48 8b 05 2a d5 0b 00 \tmov    0xbd52a(%rip),%rax        # 500cf8 <labtab>\n  4437ce:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4437d2:\te9 f7 01 00 00       \tjmpq   4439ce <check_special+0x2f8>\n  4437d7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4437db:\t48 8b 00             \tmov    (%rax),%rax\n  4437de:\t48 8b 10             \tmov    (%rax),%rdx\n  4437e1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4437e5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4437e9:\t48 8b 00             \tmov    (%rax),%rax\n  4437ec:\t48 89 d6             \tmov    %rdx,%rsi\n  4437ef:\t48 89 c7             \tmov    %rax,%rdi\n  4437f2:\te8 89 e9 fb ff       \tcallq  402180 <strcmp@plt>\n  4437f7:\t85 c0                \ttest   %eax,%eax\n  4437f9:\t0f 85 c3 01 00 00    \tjne    4439c2 <check_special+0x2ec>\n  4437ff:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  443803:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  443807:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  44380a:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  44380d:\t48 98                \tcltq   \n  44380f:\t48 8d 0c 85 00 00 00 \tlea    0x0(,%rax,4),%rcx\n  443816:\t00 \n  443817:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  44381b:\t48 01 c8             \tadd    %rcx,%rax\n  44381e:\t8b 00                \tmov    (%rax),%eax\n  443820:\t39 c2                \tcmp    %eax,%edx\n  443822:\t0f 85 9a 01 00 00    \tjne    4439c2 <check_special+0x2ec>\n  443828:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  44382b:\t48 98                \tcltq   \n  44382d:\t48 c1 e0 04          \tshl    $0x4,%rax\n  443831:\t48 05 08 8d 4e 00    \tadd    $0x4e8d08,%rax\n  443837:\t8b 00                \tmov    (%rax),%eax\n  443839:\t48 63 d0             \tmovslq %eax,%rdx\n  44383c:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  44383f:\t48 98                \tcltq   \n  443841:\t48 c1 e0 04          \tshl    $0x4,%rax\n  443845:\t48 05 00 8d 4e 00    \tadd    $0x4e8d00,%rax\n  44384b:\t48 8b 08             \tmov    (%rax),%rcx\n  44384e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  443852:\t48 8b 00             \tmov    (%rax),%rax\n  443855:\t48 8b 00             \tmov    (%rax),%rax\n  443858:\t48 89 ce             \tmov    %rcx,%rsi\n  44385b:\t48 89 c7             \tmov    %rax,%rdi\n  44385e:\te8 1d e8 fb ff       \tcallq  402080 <strncmp@plt>\n  443863:\t85 c0                \ttest   %eax,%eax\n  443865:\t0f 85 57 01 00 00    \tjne    4439c2 <check_special+0x2ec>\n  44386b:\t83 7d e8 01          \tcmpl   $0x1,-0x18(%rbp)\n  44386f:\t0f 85 47 01 00 00    \tjne    4439bc <check_special+0x2e6>\n  443875:\teb 01                \tjmp    443878 <check_special+0x1a2>\n  443877:\t90                   \tnop\n  443878:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  44387c:\t48 8b 00             \tmov    (%rax),%rax\n  44387f:\t48 8b 00             \tmov    (%rax),%rax\n  443882:\tbe 3a 00 00 00       \tmov    $0x3a,%esi\n  443887:\t48 89 c7             \tmov    %rax,%rdi\n  44388a:\te8 71 e8 fb ff       \tcallq  402100 <strchr@plt>\n  44388f:\t48 85 c0             \ttest   %rax,%rax\n  443892:\t74 1b                \tje     4438af <check_special+0x1d9>\n  443894:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  443897:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  44389b:\tbe cf bd 4b 00       \tmov    $0x4bbdcf,%esi\n  4438a0:\t48 89 c7             \tmov    %rax,%rdi\n  4438a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4438a8:\te8 13 ea fb ff       \tcallq  4022c0 <sprintf@plt>\n  4438ad:\teb 4a                \tjmp    4438f9 <check_special+0x223>\n  4438af:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4438b3:\t48 8b 00             \tmov    (%rax),%rax\n  4438b6:\t48 8b 00             \tmov    (%rax),%rax\n  4438b9:\t48 89 c7             \tmov    %rax,%rdi\n  4438bc:\te8 1f e8 fb ff       \tcallq  4020e0 <strlen@plt>\n  4438c1:\t48 83 f8 1f          \tcmp    $0x1f,%rax\n  4438c5:\t76 19                \tjbe    4438e0 <check_special+0x20a>\n  4438c7:\tb9 00 c0 4b 00       \tmov    $0x4bc000,%ecx\n  4438cc:\tba 98 01 00 00       \tmov    $0x198,%edx\n  4438d1:\tbe fb bc 4b 00       \tmov    $0x4bbcfb,%esi\n  4438d6:\tbf d8 bd 4b 00       \tmov    $0x4bbdd8,%edi\n  4438db:\te8 50 e8 fb ff       \tcallq  402130 <__assert_fail@plt>\n  4438e0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4438e4:\t48 8b 00             \tmov    (%rax),%rax\n  4438e7:\t48 8b 10             \tmov    (%rax),%rdx\n  4438ea:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4438ee:\t48 89 d6             \tmov    %rdx,%rsi\n  4438f1:\t48 89 c7             \tmov    %rax,%rdi\n  4438f4:\te8 a7 e7 fb ff       \tcallq  4020a0 <strcpy@plt>\n  4438f9:\t8b 05 79 84 0c 00    \tmov    0xc8479(%rip),%eax        # 50bd78 <unfolding>\n  4438ff:\t85 c0                \ttest   %eax,%eax\n  443901:\t75 4e                \tjne    443951 <check_special+0x27b>\n  443903:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  443907:\t75 48                \tjne    443951 <check_special+0x27b>\n  443909:\t8b 05 71 84 0c 00    \tmov    0xc8471(%rip),%eax        # 50bd80 <not_printing>\n  44390f:\t85 c0                \ttest   %eax,%eax\n  443911:\t0f 85 89 00 00 00    \tjne    4439a0 <check_special+0x2ca>\n  443917:\t8b 05 7b 84 0c 00    \tmov    0xc847b(%rip),%eax        # 50bd98 <slcnt>\n  44391d:\t8d 50 01             \tlea    0x1(%rax),%edx\n  443920:\t89 15 72 84 0c 00    \tmov    %edx,0xc8472(%rip)        # 50bd98 <slcnt>\n  443926:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  443929:\t48 63 d2             \tmovslq %edx,%rdx\n  44392c:\t48 c1 e2 04          \tshl    $0x4,%rdx\n  443930:\t48 81 c2 00 8d 4e 00 \tadd    $0x4e8d00,%rdx\n  443937:\t48 8b 32             \tmov    (%rdx),%rsi\n  44393a:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  44393e:\t89 c1                \tmov    %eax,%ecx\n  443940:\tbf f9 bd 4b 00       \tmov    $0x4bbdf9,%edi\n  443945:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  44394a:\te8 c1 e7 fb ff       \tcallq  402110 <printf@plt>\n  44394f:\teb 4f                \tjmp    4439a0 <check_special+0x2ca>\n  443951:\t8b 05 bd c8 0c 00    \tmov    0xcc8bd(%rip),%eax        # 510214 <verbose>\n  443957:\t83 e0 20             \tand    $0x20,%eax\n  44395a:\t85 c0                \ttest   %eax,%eax\n  44395c:\t74 42                \tje     4439a0 <check_special+0x2ca>\n  44395e:\t8b 05 1c 84 0c 00    \tmov    0xc841c(%rip),%eax        # 50bd80 <not_printing>\n  443964:\t85 c0                \ttest   %eax,%eax\n  443966:\t75 38                \tjne    4439a0 <check_special+0x2ca>\n  443968:\t8b 05 2a 84 0c 00    \tmov    0xc842a(%rip),%eax        # 50bd98 <slcnt>\n  44396e:\t8d 50 01             \tlea    0x1(%rax),%edx\n  443971:\t89 15 21 84 0c 00    \tmov    %edx,0xc8421(%rip)        # 50bd98 <slcnt>\n  443977:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  44397a:\t48 63 d2             \tmovslq %edx,%rdx\n  44397d:\t48 c1 e2 04          \tshl    $0x4,%rdx\n  443981:\t48 81 c2 00 8d 4e 00 \tadd    $0x4e8d00,%rdx\n  443988:\t48 8b 12             \tmov    (%rdx),%rdx\n  44398b:\t48 8d 75 c0          \tlea    -0x40(%rbp),%rsi\n  44398f:\t89 c1                \tmov    %eax,%ecx\n  443991:\tbf 04 be 4b 00       \tmov    $0x4bbe04,%edi\n  443996:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  44399b:\te8 70 e7 fb ff       \tcallq  402110 <printf@plt>\n  4439a0:\t8b 05 d2 83 0c 00    \tmov    0xc83d2(%rip),%eax        # 50bd78 <unfolding>\n  4439a6:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  4439a9:\t75 33                \tjne    4439de <check_special+0x308>\n  4439ab:\t8b 05 cb 83 0c 00    \tmov    0xc83cb(%rip),%eax        # 50bd7c <is_accept>\n  4439b1:\t83 c0 01             \tadd    $0x1,%eax\n  4439b4:\t89 05 c2 83 0c 00    \tmov    %eax,0xc83c2(%rip)        # 50bd7c <is_accept>\n  4439ba:\teb 22                \tjmp    4439de <check_special+0x308>\n  4439bc:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n  4439c0:\teb 1c                \tjmp    4439de <check_special+0x308>\n  4439c2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4439c6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4439ca:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4439ce:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  4439d3:\t0f 85 fe fd ff ff    \tjne    4437d7 <check_special+0x101>\n  4439d9:\teb 04                \tjmp    4439df <check_special+0x309>\n  4439db:\t90                   \tnop\n  4439dc:\teb 01                \tjmp    4439df <check_special+0x309>\n  4439de:\t90                   \tnop\n  4439df:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4439e3:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  4439e7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4439eb:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  4439ef:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4439f4:\t0f 85 54 fd ff ff    \tjne    44374e <check_special+0x78>\n  4439fa:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  4439fe:\t75 4c                \tjne    443a4c <check_special+0x376>\n  443a00:\t8b 05 8e 53 0a 00    \tmov    0xa538e(%rip),%eax        # 4e8d94 <nclaims>\n  443a06:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n  443a09:\t75 41                \tjne    443a4c <check_special+0x376>\n  443a0b:\t8b 05 6f 83 0c 00    \tmov    0xc836f(%rip),%eax        # 50bd80 <not_printing>\n  443a11:\t85 c0                \ttest   %eax,%eax\n  443a13:\t75 37                \tjne    443a4c <check_special+0x376>\n  443a15:\t8b 05 7d 83 0c 00    \tmov    0xc837d(%rip),%eax        # 50bd98 <slcnt>\n  443a1b:\t8d 50 01             \tlea    0x1(%rax),%edx\n  443a1e:\t89 15 74 83 0c 00    \tmov    %edx,0xc8374(%rip)        # 50bd98 <slcnt>\n  443a24:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  443a27:\t48 63 d2             \tmovslq %edx,%rdx\n  443a2a:\t48 c1 e2 04          \tshl    $0x4,%rdx\n  443a2e:\t48 81 c2 00 8d 4e 00 \tadd    $0x4e8d00,%rdx\n  443a35:\t48 8b 0a             \tmov    (%rdx),%rcx\n  443a38:\t89 c2                \tmov    %eax,%edx\n  443a3a:\t48 89 ce             \tmov    %rcx,%rsi\n  443a3d:\tbf 0e be 4b 00       \tmov    $0x4bbe0e,%edi\n  443a42:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  443a47:\te8 c4 e6 fb ff       \tcallq  402110 <printf@plt>\n  443a4c:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  443a50:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  443a53:\t48 98                \tcltq   \n  443a55:\t48 c1 e0 04          \tshl    $0x4,%rax\n  443a59:\t48 05 08 8d 4e 00    \tadd    $0x4e8d08,%rax\n  443a5f:\t8b 00                \tmov    (%rax),%eax\n  443a61:\t85 c0                \ttest   %eax,%eax\n  443a63:\t0f 85 c7 fc ff ff    \tjne    443730 <check_special+0x5a>\n  443a69:\t90                   \tnop\n  443a6a:\t90                   \tnop\n  443a6b:\tc9                   \tleaveq \n  443a6c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall check_special(__int64 a1) {\n  unsigned int v1;\n  unsigned int v2;\n  unsigned int v3;\n  __int64 result;\n  char s[Number];\n  int v6;\n  int v7;\n  int j;\n  unsigned int i;\n  __int64 k;\n  __int64 v11;\n  v6 = Number;\n  for (i = Number; (int)i < nclaims; ++i)\n    v6 += *(_DWORD *)(Number L * (int)i + Nacc);\n  is_accept = Number;\n  for (j = Number;; ++j) {\n    result = dword_4E8D08[Number * j];\n    if (!(_DWORD)result)\n      break;\n    v7 = Number;\n    v11 = rdy;\n    i = Number;\n    while (v11) {\n      if (*(_DWORD *)(v11 + Number) == Number) {\n        if (Strict || j != Number || *(_DWORD *)(Number L * (int)i + Nacc) ||\n            v6 <= Number) {\n          for (k = labtab; k; k = *(_QWORD *)(k + Number)) {\n            if (!strcmp(**(const char ***)(k + Number),\n                        **(const char ***)v11) &&\n                *(_DWORD *)(*(_QWORD *)(k + Number) + Number L) ==\n                    *(_DWORD *)(Number L * (int)i + a1) &&\n                !strncmp(**(const char ***)k, (&off_4E8D00)[Number * j],\n                         (int)dword_4E8D08[Number * j])) {\n              if (j == Number)\n                goto LABEL_19;\n              ++v7;\n              break;\n            }\n          }\n        } else {\n          if ((verbose & Number) != Number && i == unfolding)\n            printf(String, i);\n        LABEL_19:\n          if (strchr(**(const char ***)v11, Number)) {\n            sprintf(s, String, i);\n          } else {\n            if (strlen(**(const char ***)v11) > Number)\n              __assert_fail(String, String, Number, String);\n            strcpy(s, **(const char ***)v11);\n          }\n          if (unfolding || i) {\n            if ((verbose & Number) != Number && !not_printing) {\n              v2 = slcnt++;\n              printf(String, s, (&off_4E8D00)[Number * j], v2);\n            }\n          } else if (!not_printing) {\n            v1 = slcnt++;\n            printf(String, (&off_4E8D00)[Number * j], s, v1);\n          }\n          if (i == unfolding)\n            ++is_accept;\n        }\n      }\n      v11 = *(_QWORD *)(v11 + Number);\n      ++i;\n    }\n    if (!j && v7 == nclaims && !not_printing) {\n      v3 = slcnt++;\n      printf(String, (&off_4E8D00)[Number * j], v3);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl check_special(int *<span class=\"supfact\">nrs</span>) {\n  unsigned int v1;\n  unsigned int v2;\n  unsigned int v3;\n  char <span class=\"supfact\">buf</span>[Number];\n  int <span class=\"supfact\">any_accepts</span>;\n  int <span class=\"supfact\">nmatches</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  Label_0 *<span class=\"supfact\">l</span>;\n  ProcList_0 *<span class=\"supfact\">p</span>;\n  <span class=\"supfact\">any_accepts</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < nclaims;\n       ++<span class=\"supfact\">i</span>)\n    <span class=\"supfact\">any_accepts</span> += Nacc[<span class=\"supfact\">i</span>];\n  is_accept = Number;\n  for (<span class=\"supfact\">j</span> = Number; dword_4E8D08[Number * <span class=\"supfact\">j</span>];\n       ++<span class=\"supfact\">j</span>) {\n    <span class=\"supfact\">nmatches</span> = Number;\n    <span class=\"supfact\">p</span> = rdy;\n    <span class=\"supfact\">i</span> = Number;\n    while (<span class=\"supfact\">p</span>) {\n      if (<span class=\"supfact\">p</span>->b == N_CLAIM) {\n        if (Strict || <span class=\"supfact\">j</span> != Number || Nacc[<span class=\"supfact\">i</span>] ||\n            <span class=\"supfact\">any_accepts</span> <= Number) {\n          for (<span class=\"supfact\">l</span> = labtab; <span class=\"supfact\">l</span>;\n               <span class=\"supfact\">l</span> = <span class=\"supfact\">l</span>->nxt) {\n            if (!strcmp(<span class=\"supfact\">l</span>->c->name,\n                        <span class=\"supfact\">p</span>->n->name) &&\n                <span class=\"supfact\">l</span>->e->seqno ==\n                    <span class=\"supfact\">nrs</span>[<span class=\"supfact\">i</span>] &&\n                !strncmp(<span class=\"supfact\">l</span>->s->name,\n                         off_4E8D00[<span class=\"supfact\">j</span>].s,\n                         dword_4E8D08[Number * <span class=\"supfact\">j</span>])) {\n              if (<span class=\"supfact\">j</span> == Number)\n                goto is_accepting;\n              ++<span class=\"supfact\">nmatches</span>;\n              break;\n            }\n          }\n        } else {\n          if ((verbose & Number) != Number && <span class=\"supfact\">i</span> == unfolding)\n            printf(String, (unsigned int)<span class=\"supfact\">i</span>);\n        is_accepting:\n          if (strchr(<span class=\"supfact\">p</span>->n->name, Number)) {\n            sprintf(<span class=\"supfact\">buf</span>, String,\n                    (unsigned int)<span class=\"supfact\">i</span>);\n          } else {\n            if (strlen(<span class=\"supfact\">p</span>->n->name) > Number)\n              __assert_fail(String, String, Number, String);\n            strcpy(<span class=\"supfact\">buf</span>, <span class=\"supfact\">p</span>->n->name);\n          }\n          if (unfolding || <span class=\"supfact\">i</span>) {\n            if ((verbose & Number) != Number && !not_printing) {\n              v2 = slcnt++;\n              printf(String, <span class=\"supfact\">buf</span>,\n                     off_4E8D00[<span class=\"supfact\">j</span>].s, v2);\n            }\n          } else if (!not_printing) {\n            v1 = slcnt++;\n            printf(String, off_4E8D00[<span class=\"supfact\">j</span>].s, <span class=\"supfact\">buf</span>,\n                   v1);\n          }\n          if (<span class=\"supfact\">i</span> == unfolding)\n            ++is_accept;\n        }\n      }\n      <span class=\"supfact\">p</span> = <span class=\"supfact\">p</span>->nxt;\n      ++<span class=\"supfact\">i</span>;\n    }\n    if (!<span class=\"supfact\">j</span> && <span class=\"supfact\">nmatches</span> == nclaims &&\n        !not_printing) {\n      v3 = slcnt++;\n      printf(String, off_4E8D00[<span class=\"supfact\">j</span>].s, v3);\n    }\n  }\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "str", "ref_name": "nrs", "ref_type": "int *"}, {"name": "s", "type": "char[32]", "pred_name": "buf", "ref_name": "buf", "ref_type": "char[32]"}, {"name": "v6", "type": "int", "pred_name": "col", "ref_name": "any_accepts", "ref_type": "int"}, {"name": "v7", "type": "int", "pred_name": "row", "ref_name": "nmatches", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "j", "ref_name": "j", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "k", "type": "__unk__", "pred_name": "s", "ref_name": "l", "ref_type": "Label_0 *"}, {"name": "v11", "type": "char *", "pred_name": "cp", "ref_name": "p", "ref_type": "ProcList_0 *"}], "body_in_train": false}, {"repo_owner": "themathpath", "repo_name": "lasvm", "path": "themathpath/lasvm/080e3565875ec6926977cb57d15b8f0ce76c02975f1b1f288e72f96b8553347c", "path_in_repo": "themathpath/lasvm//la_svm", "objdump": "0000000000406a50 <_Z10lasvm_infoPKcz>:\n  406a50:\t48 81 ec d8 00 00 00 \tsub    $0xd8,%rsp\n  406a57:\t49 89 fa             \tmov    %rdi,%r10\n  406a5a:\t48 89 74 24 28       \tmov    %rsi,0x28(%rsp)\n  406a5f:\t48 89 54 24 30       \tmov    %rdx,0x30(%rsp)\n  406a64:\t48 89 4c 24 38       \tmov    %rcx,0x38(%rsp)\n  406a69:\t4c 89 44 24 40       \tmov    %r8,0x40(%rsp)\n  406a6e:\t4c 89 4c 24 48       \tmov    %r9,0x48(%rsp)\n  406a73:\t84 c0                \ttest   %al,%al\n  406a75:\t74 37                \tje     406aae <_Z10lasvm_infoPKcz+0x5e>\n  406a77:\t0f 29 44 24 50       \tmovaps %xmm0,0x50(%rsp)\n  406a7c:\t0f 29 4c 24 60       \tmovaps %xmm1,0x60(%rsp)\n  406a81:\t0f 29 54 24 70       \tmovaps %xmm2,0x70(%rsp)\n  406a86:\t0f 29 9c 24 80 00 00 \tmovaps %xmm3,0x80(%rsp)\n  406a8d:\t00 \n  406a8e:\t0f 29 a4 24 90 00 00 \tmovaps %xmm4,0x90(%rsp)\n  406a95:\t00 \n  406a96:\t0f 29 ac 24 a0 00 00 \tmovaps %xmm5,0xa0(%rsp)\n  406a9d:\t00 \n  406a9e:\t0f 29 b4 24 b0 00 00 \tmovaps %xmm6,0xb0(%rsp)\n  406aa5:\t00 \n  406aa6:\t0f 29 bc 24 c0 00 00 \tmovaps %xmm7,0xc0(%rsp)\n  406aad:\t00 \n  406aae:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n  406ab3:\tba c0 68 40 00       \tmov    $0x4068c0,%edx\n  406ab8:\t48 8b 05 11 93 00 00 \tmov    0x9311(%rip),%rax        # 40fdd0 <lasvm_message_proc>\n  406abf:\t48 8d 8c 24 e0 00 00 \tlea    0xe0(%rsp),%rcx\n  406ac6:\t00 \n  406ac7:\t48 89 74 24 18       \tmov    %rsi,0x18(%rsp)\n  406acc:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  406ad1:\t4c 89 d6             \tmov    %r10,%rsi\n  406ad4:\t48 85 c0             \ttest   %rax,%rax\n  406ad7:\tc7 44 24 08 08 00 00 \tmovl   $0x8,0x8(%rsp)\n  406ade:\t00 \n  406adf:\t48 0f 44 c2          \tcmove  %rdx,%rax\n  406ae3:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n  406ae8:\t48 8d 54 24 08       \tlea    0x8(%rsp),%rdx\n  406aed:\tc7 44 24 0c 30 00 00 \tmovl   $0x30,0xc(%rsp)\n  406af4:\t00 \n  406af5:\tff d0                \tcallq  *%rax\n  406af7:\t48 81 c4 d8 00 00 00 \tadd    $0xd8,%rsp\n  406afe:\tc3                   \tretq   \n  406aff:\t90                   \tnop", "code_s": "__int64 lasvm_info(const char *a1, ...) {\n  int(__fastcall * v1)(int, const char *, void *);\n  gcc_va_list va;\n  char v4;\n  v1 = (int(__fastcall *)(int, const char *, void *))lasvm_message_proc;\n  va[Number].reg_save_area = &v4;\n  va[Number].gp_offset = Number;\n  if (!lasvm_message_proc)\n    v1 = defaultproc;\n  va_start(va, a1);\n  return ((__int64(__fastcall *)(__int64, const char *, __va_list_tag *))v1)(\n      Number L, a1, va);\n}", "code_t": "__int64 lasvm_info(const char *<span class=\"supfact\">a1</span>, ...) {\n  int(__fastcall * <span class=\"supfact\">v1</span>)(int, const char *, void *);\n  gcc_va_list <span class=\"supfact\">va</span>;\n  char <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v1</span> =\n      (int(__fastcall *)(int, const char *, void *))lasvm_message_proc;\n  <span class=\"supfact\">va</span>[Number].reg_save_area = &<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">va</span>[Number].gp_offset = Number;\n  if (!lasvm_message_proc)\n    <span class=\"supfact\">v1</span> = defaultproc;\n  va_start(<span class=\"supfact\">va</span>, <span class=\"supfact\">a1</span>);\n  return ((__int64(__fastcall *)(__int64, const char *,\n                                 __va_list_tag *))<span class=\"supfact\">v1</span>)(\n      Number L, <span class=\"supfact\">a1</span>, <span class=\"supfact\">va</span>);\n}", "var": [{"name": "a1", "type": "const char *", "pred_name": "file", "ref_name": "a1", "ref_type": "const char *"}, {"name": "v1", "type": "__unk__", "pred_name": "v1", "ref_name": "v1", "ref_type": "int (__fastcall *)(int a1, const char *a2, void *a3)"}, {"name": "va", "type": "__va_list_tag[1]", "pred_name": "ap", "ref_name": "va", "ref_type": "__va_list_tag[1]"}, {"name": "v4", "type": "__unk__", "pred_name": "__unk__", "ref_name": "v4", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "aschils", "repo_name": "packetdrill_mptcp", "path": "aschils/packetdrill_mptcp/f12586e93c870ce6d623d457774db79bece9afbd194c2c1db368116c352992a8", "path_in_repo": "aschils/packetdrill_mptcp/gtests/net/packetdrill/packet_to_string_test", "objdump": "", "code_s": "__int64 __fastcall packet_end_2(__int64 a1) {\n  return *(unsigned int *)(a1 + Number) + packet_start_4(a1);\n}", "code_t": "u8 *__cdecl packet_end_2(<span class=\"supfact\">packet</span> *<span class=\"supfact\">packet</span>) {\n  return &packet_start_4(\n      <span class=\"supfact\">packet</span>)[<span class=\"supfact\">packet</span>->ip_bytes];\n}", "var": [{"name": "a1", "type": "mbuf *", "pred_name": "m", "ref_name": "packet", "ref_type": "packet *"}], "body_in_train": false}, {"repo_owner": "aschils", "repo_name": "packetdrill_mptcp", "path": "aschils/packetdrill_mptcp/f12586e93c870ce6d623d457774db79bece9afbd194c2c1db368116c352992a8", "path_in_repo": "aschils/packetdrill_mptcp/gtests/net/packetdrill/packet_to_string_test", "objdump": "", "code_s": "__int64 __fastcall packet_end_2(__int64 a1) {\n  return *(unsigned int *)(a1 + Number) + packet_start_4(a1);\n}", "code_t": "u8 *__cdecl packet_end_2(<span class=\"supfact\">packet</span> *<span class=\"supfact\">packet</span>) {\n  return &packet_start_4(\n      <span class=\"supfact\">packet</span>)[<span class=\"supfact\">packet</span>->ip_bytes];\n}", "var": [{"name": "a1", "type": "mbuf *", "pred_name": "m", "ref_name": "packet", "ref_type": "packet *"}], "body_in_train": false}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "000000000000f77a <glColorMaski>:\n    f77a:\t55                   \tpush   %rbp\n    f77b:\t48 89 e5             \tmov    %rsp,%rbp\n    f77e:\t48 83 ec 20          \tsub    $0x20,%rsp\n    f782:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    f785:\t89 c8                \tmov    %ecx,%eax\n    f787:\t44 89 c7             \tmov    %r8d,%edi\n    f78a:\t89 f1                \tmov    %esi,%ecx\n    f78c:\t88 4d f8             \tmov    %cl,-0x8(%rbp)\n    f78f:\t88 55 f4             \tmov    %dl,-0xc(%rbp)\n    f792:\t88 45 f0             \tmov    %al,-0x10(%rbp)\n    f795:\t89 f8                \tmov    %edi,%eax\n    f797:\t88 45 ec             \tmov    %al,-0x14(%rbp)\n    f79a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f7a1 <glColorMaski+0x27>\n    f7a1:\t4c 8b 88 d8 1b 00 00 \tmov    0x1bd8(%rax),%r9\n    f7a8:\t0f b6 7d ec          \tmovzbl -0x14(%rbp),%edi\n    f7ac:\t0f b6 4d f0          \tmovzbl -0x10(%rbp),%ecx\n    f7b0:\t0f b6 55 f4          \tmovzbl -0xc(%rbp),%edx\n    f7b4:\t0f b6 75 f8          \tmovzbl -0x8(%rbp),%esi\n    f7b8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    f7bb:\t41 89 f8             \tmov    %edi,%r8d\n    f7be:\t89 c7                \tmov    %eax,%edi\n    f7c0:\t41 ff d1             \tcallq  *%r9\n    f7c3:\t90                   \tnop\n    f7c4:\tc9                   \tleaveq \n    f7c5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glColorMaski(unsigned int a1, unsigned __int8 a2,\n                                unsigned __int8 a3, unsigned __int8 a4,\n                                unsigned __int8 a5) {\n  return (*(__int64(__fastcall **)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(\n      glapi_Dispatch + Number L))(a1, a2, a3, a4, a5);\n}", "code_t": "void __cdecl glColorMaski(GLuint <span class=\"supfact\">buf</span>,\n                          GLboolean <span class=\"supfact\">r</span>,\n                          GLboolean <span class=\"supfact\">g</span>,\n                          GLboolean <span class=\"supfact\">b</span>,\n                          GLboolean <span class=\"supfact\">a</span>) {\n  (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(\n      glapi_Dispatch + Number L))(<span class=\"supfact\">buf</span>, <span class=\"supfact\">r</span>,\n                                  <span class=\"supfact\">g</span>, <span class=\"supfact\">b</span>,\n                                  <span class=\"supfact\">a</span>);\n}", "var": [{"name": "a1", "type": "GLuint", "pred_name": "index", "ref_name": "buf", "ref_type": "GLuint"}, {"name": "a2", "type": "GLuint", "pred_name": "red", "ref_name": "r", "ref_type": "GLboolean"}, {"name": "a3", "type": "GLuint", "pred_name": "green", "ref_name": "g", "ref_type": "GLboolean"}, {"name": "a4", "type": "GLuint", "pred_name": "blue", "ref_name": "b", "ref_type": "GLboolean"}, {"name": "a5", "type": "GLuint", "pred_name": "alpha", "ref_name": "a", "ref_type": "GLboolean"}], "body_in_train": false}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/31feca0b01f7963552d84f00505fe4a77a17dbe5b130536a7d7912b04adf2717", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Applications/d/Output/make_dparser.native", "objdump": "000000000041cf54 <trans_scanner_block_hash_fn>:\n  41cf54:\t55                   \tpush   %rbp\n  41cf55:\t48 89 e5             \tmov    %rsp,%rbp\n  41cf58:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  41cf5c:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  41cf60:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  41cf67:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41cf6b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  41cf6f:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  41cf72:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41cf76:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  41cf7a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  41cf7e:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  41cf85:\teb 52                \tjmp    41cfd9 <trans_scanner_block_hash_fn+0x85>\n  41cf87:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  41cf8a:\t89 d0                \tmov    %edx,%eax\n  41cf8c:\t01 c0                \tadd    %eax,%eax\n  41cf8e:\t01 d0                \tadd    %edx,%eax\n  41cf90:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41cf93:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41cf96:\t48 98                \tcltq   \n  41cf98:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  41cf9f:\t00 \n  41cfa0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41cfa4:\t48 01 d0             \tadd    %rdx,%rax\n  41cfa7:\t48 8b 00             \tmov    (%rax),%rax\n  41cfaa:\t48 85 c0             \ttest   %rax,%rax\n  41cfad:\t74 1e                \tje     41cfcd <trans_scanner_block_hash_fn+0x79>\n  41cfaf:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41cfb2:\t48 98                \tcltq   \n  41cfb4:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  41cfbb:\t00 \n  41cfbc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41cfc0:\t48 01 d0             \tadd    %rdx,%rax\n  41cfc3:\t48 8b 00             \tmov    (%rax),%rax\n  41cfc6:\t8b 00                \tmov    (%rax),%eax\n  41cfc8:\t83 c0 01             \tadd    $0x1,%eax\n  41cfcb:\teb 05                \tjmp    41cfd2 <trans_scanner_block_hash_fn+0x7e>\n  41cfcd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41cfd2:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n  41cfd5:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  41cfd9:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41cfdc:\t3b 45 f4             \tcmp    -0xc(%rbp),%eax\n  41cfdf:\t7c a6                \tjl     41cf87 <trans_scanner_block_hash_fn+0x33>\n  41cfe1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41cfe4:\t5d                   \tpop    %rbp\n  41cfe5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall trans_scanner_block_hash_fn(__int64 a1, __int64 a2) {\n  int v2;\n  __int64 v4;\n  int i;\n  unsigned int v6;\n  int v7;\n  v6 = Number;\n  v4 = *(_QWORD *)(a1 + Number);\n  for (i = Number; i < (int)*(_QWORD *)(a2 + Number); ++i) {\n    v7 = Number * v6;\n    if (*(_QWORD *)(Number L * i + v4))\n      v2 = **(_DWORD **)(Number L * i + v4) + Number;\n    else\n      v2 = Number;\n    v6 = v2 + v7;\n  }\n  return v6;\n}", "code_t": "uint32 __cdecl trans_scanner_block_hash_fn(ScannerBlock_0 *<span class=\"supfact\">b</span>,\n                                           hash_fns_t_0 *<span class=\"supfact\">fns</span>) {\n  int <span class=\"supfact\">v2</span>;\n  ScanStateTransition_0 **<span class=\"supfact\">sb</span>;\n  int <span class=\"supfact\">i</span>;\n  uint32 hash;\n  uint32 hasha;\n  hash = Number;\n  <span class=\"supfact\">sb</span> = <span class=\"supfact\">b</span>->transitions;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < (int)<span class=\"supfact\">fns</span>->data[Number];\n       ++<span class=\"supfact\">i</span>) {\n    hasha = Number * hash;\n    if (<span class=\"supfact\">sb</span>[<span class=\"supfact\">i</span>])\n      <span class=\"supfact\">v2</span> =\n          <span class=\"supfact\">sb</span>[<span class=\"supfact\">i</span>]->index + Number;\n    else\n      <span class=\"supfact\">v2</span> = Number;\n    hash = <span class=\"supfact\">v2</span> + hasha;\n  }\n  return hash;\n}", "var": [{"name": "a1", "type": "lnhash_data_t", "pred_name": "__unk__", "ref_name": "b", "ref_type": "ScannerBlock_0 *"}, {"name": "a2", "type": "__unk__", "pred_name": "__unk__", "ref_name": "fns", "ref_type": "hash_fns_t_0 *"}, {"name": "v2", "type": "int", "pred_name": "v2", "ref_name": "v2", "ref_type": "int"}, {"name": "v4", "type": "__unk__", "pred_name": "__unk__", "ref_name": "sb", "ref_type": "ScanStateTransition_0 * *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "revast", "repo_name": "dvj", "path": "revast/dvj/431f38567c3e2663d7b7a3da7181bca4d75fcf28d39cf7decf20928d4ac70371", "path_in_repo": "revast/dvj/dep/src/ffmpeg/libavcodec/vorbis_dec.o", "objdump": "000000000000c682 <vorbis_decode_frame>:\n    c682:\t48 81 ec 58 08 00 00 \tsub    $0x858,%rsp\n    c689:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    c68e:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    c693:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    c698:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n    c69c:\t48 8b 04 24          \tmov    (%rsp),%rax\n    c6a0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    c6a4:\t48 89 84 24 40 08 00 \tmov    %rax,0x840(%rsp)\n    c6ab:\t00 \n    c6ac:\t48 8b 04 24          \tmov    (%rsp),%rax\n    c6b0:\t8b 40 18             \tmov    0x18(%rax),%eax\n    c6b3:\t89 84 24 3c 08 00 00 \tmov    %eax,0x83c(%rsp)\n    c6ba:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    c6bf:\t48 8b 80 a0 00 00 00 \tmov    0xa0(%rax),%rax\n    c6c6:\t48 89 84 24 30 08 00 \tmov    %rax,0x830(%rsp)\n    c6cd:\t00 \n    c6ce:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c6d5:\t00 \n    c6d6:\t48 83 c0 08          \tadd    $0x8,%rax\n    c6da:\t48 89 84 24 28 08 00 \tmov    %rax,0x828(%rsp)\n    c6e1:\t00 \n    c6e2:\t83 bc 24 3c 08 00 00 \tcmpl   $0x0,0x83c(%rsp)\n    c6e9:\t00 \n    c6ea:\t75 0a                \tjne    c6f6 <vorbis_decode_frame+0x74>\n    c6ec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    c6f1:\te9 0e 02 00 00       \tjmpq   c904 <vorbis_decode_frame+0x282>\n    c6f6:\t8b 84 24 3c 08 00 00 \tmov    0x83c(%rsp),%eax\n    c6fd:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n    c704:\t48 8b 8c 24 40 08 00 \tmov    0x840(%rsp),%rcx\n    c70b:\t00 \n    c70c:\t48 8b 84 24 28 08 00 \tmov    0x828(%rsp),%rax\n    c713:\t00 \n    c714:\t48 89 ce             \tmov    %rcx,%rsi\n    c717:\t48 89 c7             \tmov    %rax,%rdi\n    c71a:\te8 9f 3a ff ff       \tcallq  1be <init_get_bits>\n    c71f:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c726:\t00 \n    c727:\t48 89 c7             \tmov    %rax,%rdi\n    c72a:\te8 9a f2 ff ff       \tcallq  b9c9 <vorbis_parse_audio_packet>\n    c72f:\t48 98                \tcltq   \n    c731:\t48 89 84 24 20 08 00 \tmov    %rax,0x820(%rsp)\n    c738:\t00 \n    c739:\t48 83 bc 24 20 08 00 \tcmpq   $0x0,0x820(%rsp)\n    c740:\t00 00 \n    c742:\t7f 17                \tjg     c75b <vorbis_decode_frame+0xd9>\n    c744:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    c749:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    c74f:\t8b 84 24 3c 08 00 00 \tmov    0x83c(%rsp),%eax\n    c756:\te9 a9 01 00 00       \tjmpq   c904 <vorbis_decode_frame+0x282>\n    c75b:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c762:\t00 \n    c763:\t0f b6 80 d0 20 00 00 \tmovzbl 0x20d0(%rax),%eax\n    c76a:\t84 c0                \ttest   %al,%al\n    c76c:\t75 26                \tjne    c794 <vorbis_decode_frame+0x112>\n    c76e:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c775:\t00 \n    c776:\tc6 80 d0 20 00 00 01 \tmovb   $0x1,0x20d0(%rax)\n    c77d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    c782:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    c788:\t8b 84 24 3c 08 00 00 \tmov    0x83c(%rsp),%eax\n    c78f:\te9 70 01 00 00       \tjmpq   c904 <vorbis_decode_frame+0x282>\n    c794:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c79b:\t00 \n    c79c:\t0f b6 80 e0 20 00 00 \tmovzbl 0x20e0(%rax),%eax\n    c7a3:\t3c 08                \tcmp    $0x8,%al\n    c7a5:\t76 6b                \tjbe    c812 <vorbis_decode_frame+0x190>\n    c7a7:\tc7 84 24 4c 08 00 00 \tmovl   $0x0,0x84c(%rsp)\n    c7ae:\t00 00 00 00 \n    c7b2:\teb 3e                \tjmp    c7f2 <vorbis_decode_frame+0x170>\n    c7b4:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c7bb:\t00 \n    c7bc:\t48 8b 90 88 21 00 00 \tmov    0x2188(%rax),%rdx\n    c7c3:\t8b 84 24 4c 08 00 00 \tmov    0x84c(%rsp),%eax\n    c7ca:\t48 98                \tcltq   \n    c7cc:\t48 0f af 84 24 20 08 \timul   0x820(%rsp),%rax\n    c7d3:\t00 00 \n    c7d5:\t48 c1 e0 02          \tshl    $0x2,%rax\n    c7d9:\t48 01 c2             \tadd    %rax,%rdx\n    c7dc:\t8b 84 24 4c 08 00 00 \tmov    0x84c(%rsp),%eax\n    c7e3:\t48 98                \tcltq   \n    c7e5:\t48 89 54 c4 20       \tmov    %rdx,0x20(%rsp,%rax,8)\n    c7ea:\t83 84 24 4c 08 00 00 \taddl   $0x1,0x84c(%rsp)\n    c7f1:\t01 \n    c7f2:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c7f9:\t00 \n    c7fa:\t0f b6 80 e0 20 00 00 \tmovzbl 0x20e0(%rax),%eax\n    c801:\t0f b6 c0             \tmovzbl %al,%eax\n    c804:\t39 84 24 4c 08 00 00 \tcmp    %eax,0x84c(%rsp)\n    c80b:\t7c a7                \tjl     c7b4 <vorbis_decode_frame+0x132>\n    c80d:\te9 8a 00 00 00       \tjmpq   c89c <vorbis_decode_frame+0x21a>\n    c812:\tc7 84 24 4c 08 00 00 \tmovl   $0x0,0x84c(%rsp)\n    c819:\t00 00 00 00 \n    c81d:\teb 62                \tjmp    c881 <vorbis_decode_frame+0x1ff>\n    c81f:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c826:\t00 \n    c827:\t48 8b 88 88 21 00 00 \tmov    0x2188(%rax),%rcx\n    c82e:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c835:\t00 \n    c836:\t0f b6 80 e0 20 00 00 \tmovzbl 0x20e0(%rax),%eax\n    c83d:\t0f b6 c0             \tmovzbl %al,%eax\n    c840:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    c843:\t8b 84 24 4c 08 00 00 \tmov    0x84c(%rsp),%eax\n    c84a:\t48 98                \tcltq   \n    c84c:\t48 63 d2             \tmovslq %edx,%rdx\n    c84f:\t0f b6 84 d0 00 00 00 \tmovzbl 0x0(%rax,%rdx,8),%eax\n    c856:\t00 \n    c857:\t0f b6 c0             \tmovzbl %al,%eax\n    c85a:\t48 0f af 84 24 20 08 \timul   0x820(%rsp),%rax\n    c861:\t00 00 \n    c863:\t48 c1 e0 02          \tshl    $0x2,%rax\n    c867:\t48 8d 14 01          \tlea    (%rcx,%rax,1),%rdx\n    c86b:\t8b 84 24 4c 08 00 00 \tmov    0x84c(%rsp),%eax\n    c872:\t48 98                \tcltq   \n    c874:\t48 89 54 c4 20       \tmov    %rdx,0x20(%rsp,%rax,8)\n    c879:\t83 84 24 4c 08 00 00 \taddl   $0x1,0x84c(%rsp)\n    c880:\t01 \n    c881:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c888:\t00 \n    c889:\t0f b6 80 e0 20 00 00 \tmovzbl 0x20e0(%rax),%eax\n    c890:\t0f b6 c0             \tmovzbl %al,%eax\n    c893:\t39 84 24 4c 08 00 00 \tcmp    %eax,0x84c(%rsp)\n    c89a:\t7c 83                \tjl     c81f <vorbis_decode_frame+0x19d>\n    c89c:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c8a3:\t00 \n    c8a4:\t4c 8b 80 10 15 00 00 \tmov    0x1510(%rax),%r8\n    c8ab:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c8b2:\t00 \n    c8b3:\t0f b6 80 e0 20 00 00 \tmovzbl 0x20e0(%rax),%eax\n    c8ba:\t0f b6 c8             \tmovzbl %al,%ecx\n    c8bd:\t48 8b 94 24 20 08 00 \tmov    0x820(%rsp),%rdx\n    c8c4:\t00 \n    c8c5:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n    c8ca:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    c8cf:\t48 89 c7             \tmov    %rax,%rdi\n    c8d2:\t41 ff d0             \tcallq  *%r8\n    c8d5:\t48 8b 84 24 30 08 00 \tmov    0x830(%rsp),%rax\n    c8dc:\t00 \n    c8dd:\t0f b6 80 e0 20 00 00 \tmovzbl 0x20e0(%rax),%eax\n    c8e4:\t0f b6 c0             \tmovzbl %al,%eax\n    c8e7:\t48 8b 94 24 20 08 00 \tmov    0x820(%rsp),%rdx\n    c8ee:\t00 \n    c8ef:\t0f af c2             \timul   %edx,%eax\n    c8f2:\t01 c0                \tadd    %eax,%eax\n    c8f4:\t89 c2                \tmov    %eax,%edx\n    c8f6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    c8fb:\t89 10                \tmov    %edx,(%rax)\n    c8fd:\t8b 84 24 3c 08 00 00 \tmov    0x83c(%rsp),%eax\n    c904:\t48 81 c4 58 08 00 00 \tadd    $0x858,%rsp\n    c90b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vorbis_decode_frame(__int64 a1, __int64 a2, _DWORD *a3,\n                                       __int64 a4) {\n  __int64 result;\n  int v5;\n  __int64 v7[Number];\n  __int64 v8;\n  _QWORD *v9;\n  _QWORD *v10;\n  unsigned int v11;\n  __int64 v12;\n  int i;\n  v12 = *(_QWORD *)(a4 + Number);\n  v11 = *(_DWORD *)(a4 + Number);\n  v10 = *(_QWORD **)(a1 + Number);\n  v9 = v10 + Number;\n  if (!v11)\n    return Number L;\n  init_get_bits((__int64)v9, v12, Number * v11);\n  v5 = vorbis_parse_audio_packet(v10);\n  v8 = v5;\n  if (v5 > Number) {\n    if (*((_BYTE *)v10 + Number)) {\n      if (*((_BYTE *)v10 + Number) <= Number) {\n        for (i = Number; i < *((unsigned __int8 *)v10 + Number); ++i)\n          v7[i] =\n              v10[Number] +\n              Number * v8 *\n                  *((unsigned __int8 *)&ff_vorbis_channel_layout_offsets +\n                    Number * *((unsigned __int8 *)v10 + Number) + i - Number);\n      } else {\n        for (i = Number; i < *((unsigned __int8 *)v10 + Number); ++i)\n          v7[i] = Number * v8 * i + v10[Number];\n      }\n      ((void(__fastcall *)(__int64, __int64 *, __int64, _QWORD))v10[Number])(\n          a2, v7, v8, *((unsigned __int8 *)v10 + Number));\n      *a3 = Number * v8 * *((unsigned __int8 *)v10 + Number);\n      result = v11;\n    } else {\n      *((_BYTE *)v10 + Number) = Number;\n      *a3 = Number;\n      result = v11;\n    }\n  } else {\n    *a3 = Number;\n    result = v11;\n  }\n  return result;\n}", "code_t": "int __cdecl vorbis_decode_frame(AVCodecContext_0 *<span class=\"supfact\">avccontext</span>,\n                                void *<span class=\"supfact\">data</span>,\n                                int *<span class=\"supfact\">data_size</span>,\n                                AVPacket_0 *<span class=\"supfact\">avpkt</span>) {\n  int result;\n  int v5;\n  const float *<span class=\"supfact\">channel_ptrs</span>[Number];\n  int_fast16_t <span class=\"supfact\">len</span>;\n  GetBitContext_0 *<span class=\"supfact\">gb</span>;\n  vorbis_context *<span class=\"supfact\">vc</span>;\n  int <span class=\"supfact\">buf_size</span>;\n  const uint8_t *<span class=\"supfact\">buf</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">buf</span> = <span class=\"supfact\">avpkt</span>-><span class=\"supfact\">data</span>;\n  <span class=\"supfact\">buf_size</span> = <span class=\"supfact\">avpkt</span>->size;\n  <span class=\"supfact\">vc</span> = (vorbis_context *)<span class=\"supfact\">avccontext</span>->priv_data;\n  <span class=\"supfact\">gb</span> = &<span class=\"supfact\">vc</span>-><span class=\"supfact\">gb</span>;\n  if (!<span class=\"supfact\">buf_size</span>)\n    return Number;\n  init_get_bits(<span class=\"supfact\">gb</span>, <span class=\"supfact\">buf</span>,\n                Number * <span class=\"supfact\">buf_size</span>);\n  v5 = vorbis_parse_audio_packet(<span class=\"supfact\">vc</span>);\n  <span class=\"supfact\">len</span> = v5;\n  if (v5 > Number) {\n    if (<span class=\"supfact\">vc</span>->first_frame) {\n      if (<span class=\"supfact\">vc</span>->audio_channels <= Number) {\n        for (<span class=\"supfact\">i</span> = Number;\n             <span class=\"supfact\">i</span> < <span class=\"supfact\">vc</span>->audio_channels;\n             ++<span class=\"supfact\">i</span>)\n          <span class=\"supfact\">channel_ptrs</span>[<span class=\"supfact\">i</span>] =\n              &<span class=\"supfact\">vc</span>->channel_floors\n                   [<span class=\"supfact\">len</span> *\n                    *((unsigned __int8 *)&ff_vorbis_channel_layout_offsets +\n                      Number * <span class=\"supfact\">vc</span>->audio_channels +\n                      <span class=\"supfact\">i</span> - Number)];\n      } else {\n        for (<span class=\"supfact\">i</span> = Number;\n             <span class=\"supfact\">i</span> < <span class=\"supfact\">vc</span>->audio_channels;\n             ++<span class=\"supfact\">i</span>)\n          <span class=\"supfact\">channel_ptrs</span>[<span class=\"supfact\">i</span>] =\n              &<span class=\"supfact\">vc</span>\n                   ->channel_floors[<span class=\"supfact\">len</span> * <span class=\"supfact\">i</span>];\n      }\n      <span class=\"supfact\">vc</span>->dsp.float_to_int16_interleave(\n          (int16_t *)<span class=\"supfact\">data</span>, <span class=\"supfact\">channel_ptrs</span>,\n          <span class=\"supfact\">len</span>, <span class=\"supfact\">vc</span>->audio_channels);\n      *<span class=\"supfact\">data_size</span> =\n          Number * <span class=\"supfact\">len</span> * <span class=\"supfact\">vc</span>->audio_channels;\n      result = <span class=\"supfact\">buf_size</span>;\n    } else {\n      <span class=\"supfact\">vc</span>->first_frame = Number;\n      *<span class=\"supfact\">data_size</span> = Number;\n      result = <span class=\"supfact\">buf_size</span>;\n    }\n  } else {\n    *<span class=\"supfact\">data_size</span> = Number;\n    result = <span class=\"supfact\">buf_size</span>;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "AVCodecContext_0 *", "pred_name": "avctx", "ref_name": "avccontext", "ref_type": "AVCodecContext_0 *"}, {"name": "a2", "type": "void *", "pred_name": "data", "ref_name": "data", "ref_type": "void *"}, {"name": "a3", "type": "int *", "pred_name": "data_size", "ref_name": "data_size", "ref_type": "int *"}, {"name": "a4", "type": "AVPacket_0 *", "pred_name": "avpkt", "ref_name": "avpkt", "ref_type": "AVPacket_0 *"}, {"name": "v7", "type": "float *[255]", "pred_name": "channel_ptrs", "ref_name": "channel_ptrs", "ref_type": "const float *[255]"}, {"name": "v8", "type": "ssize_t", "pred_name": "len", "ref_name": "len", "ref_type": "int_fast16_t"}, {"name": "v9", "type": "GetBitContext_0 *", "pred_name": "gb", "ref_name": "gb", "ref_type": "GetBitContext_0 *"}, {"name": "v10", "type": "vorbis_context *", "pred_name": "vc", "ref_name": "vc", "ref_type": "vorbis_context *"}, {"name": "v11", "type": "int", "pred_name": "buf_size", "ref_name": "buf_size", "ref_type": "int"}, {"name": "v12", "type": "const uint8_t *", "pred_name": "buf", "ref_name": "buf", "ref_type": "const uint8_t *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "sethsong90", "repo_name": "vendor_qcom", "path": "sethsong90/vendor_qcom/a4d7c94aaaec6b263c95272e942ad4ab7151b69c37c1ba2961d2f35221f58a9c", "path_in_repo": "sethsong90/vendor_qcom/llvm-rs/lib/CodeGen/SelectionDAG/Release+Asserts/LegalizeIntegerTypes.o", "objdump": "0000000000010720 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_>:\n   10720:\t41 57                \tpush   %r15\n   10722:\t41 56                \tpush   %r14\n   10724:\t49 89 d6             \tmov    %rdx,%r14\n   10727:\t41 55                \tpush   %r13\n   10729:\t41 54                \tpush   %r12\n   1072b:\t55                   \tpush   %rbp\n   1072c:\t53                   \tpush   %rbx\n   1072d:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n   10734:\t0f b7 56 38          \tmovzwl 0x38(%rsi),%edx\n   10738:\t48 8b 46 20          \tmov    0x20(%rsi),%rax\n   1073c:\t66 85 d2             \ttest   %dx,%dx\n   1073f:\t0f 84 fb 02 00 00    \tje     10a40 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x320>\n   10745:\tf3 0f 6f 00          \tmovdqu (%rax),%xmm0\n   10749:\t48 8b 18             \tmov    (%rax),%rbx\n   1074c:\t44 8b 50 08          \tmov    0x8(%rax),%r10d\n   10750:\t0f 29 44 24 10       \tmovaps %xmm0,0x10(%rsp)\n   10755:\t66 83 fa 01          \tcmp    $0x1,%dx\n   10759:\t0f 86 e1 02 00 00    \tjbe    10a40 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x320>\n   1075f:\t44 8b 5e 3c          \tmov    0x3c(%rsi),%r11d\n   10763:\t44 8b 6e 40          \tmov    0x40(%rsi),%r13d\n   10767:\t48 89 f5             \tmov    %rsi,%rbp\n   1076a:\t49 89 fc             \tmov    %rdi,%r12\n   1076d:\t0f b7 73 3a          \tmovzwl 0x3a(%rbx),%esi\n   10771:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n   10775:\t49 89 cf             \tmov    %rcx,%r15\n   10778:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n   1077c:\t48 8b 7f 08          \tmov    0x8(%rdi),%rdi\n   10780:\t48 8b 4b 28          \tmov    0x28(%rbx),%rcx\n   10784:\t44 39 d6             \tcmp    %r10d,%esi\n   10787:\t0f 86 ae 02 00 00    \tjbe    10a3b <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x31b>\n   1078d:\t44 89 d6             \tmov    %r10d,%esi\n   10790:\t45 89 d9             \tmov    %r11d,%r9d\n   10793:\t44 89 54 24 38       \tmov    %r10d,0x38(%rsp)\n   10798:\t48 c1 e6 04          \tshl    $0x4,%rsi\n   1079c:\t4c 89 0c 24          \tmov    %r9,(%rsp)\n   107a0:\t48 89 74 24 40       \tmov    %rsi,0x40(%rsp)\n   107a5:\t48 01 f1             \tadd    %rsi,%rcx\n   107a8:\t31 f6                \txor    %esi,%esi\n   107aa:\t66 83 7d 18 40       \tcmpw   $0x40,0x18(%rbp)\n   107af:\t40 0f 95 c6          \tsetne  %sil\n   107b3:\t4c 8b 41 08          \tmov    0x8(%rcx),%r8\n   107b7:\t49 c1 e5 20          \tshl    $0x20,%r13\n   107bb:\t8b 09                \tmov    (%rcx),%ecx\n   107bd:\t52                   \tpush   %rdx\n   107be:\t4d 09 eb             \tor     %r13,%r11\n   107c1:\t83 c6 2f             \tadd    $0x2f,%esi\n   107c4:\t50                   \tpush   %rax\n   107c5:\t4c 89 da             \tmov    %r11,%rdx\n   107c8:\tff 74 24 28          \tpushq  0x28(%rsp)\n   107cc:\tff 74 24 28          \tpushq  0x28(%rsp)\n   107d0:\te8 00 00 00 00       \tcallq  107d5 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0xb5>\n   107d5:\t48 83 c4 20          \tadd    $0x20,%rsp\n   107d9:\t4d 89 f8             \tmov    %r15,%r8\n   107dc:\t4c 89 f1             \tmov    %r14,%rcx\n   107df:\t48 89 c6             \tmov    %rax,%rsi\n   107e2:\t4c 89 e7             \tmov    %r12,%rdi\n   107e5:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n   107ea:\t48 89 54 24 28       \tmov    %rdx,0x28(%rsp)\n   107ef:\te8 00 00 00 00       \tcallq  107f4 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0xd4>\n   107f4:\t45 31 c0             \txor    %r8d,%r8d\n   107f7:\t66 83 7d 18 40       \tcmpw   $0x40,0x18(%rbp)\n   107fc:\t4d 8b 74 24 08       \tmov    0x8(%r12),%r14\n   10801:\t41 0f 94 c0          \tsete   %r8b\n   10805:\t66 83 7d 3a 01       \tcmpw   $0x1,0x3a(%rbp)\n   1080a:\t48 8b 45 28          \tmov    0x28(%rbp),%rax\n   1080e:\t47 8d 44 00 0a       \tlea    0xa(%r8,%r8,1),%r8d\n   10813:\t0f 86 22 02 00 00    \tjbe    10a3b <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x31b>\n   10819:\t8b 48 10             \tmov    0x10(%rax),%ecx\n   1081c:\t48 8b 74 24 30       \tmov    0x30(%rsp),%rsi\n   10821:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n   10825:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n   1082a:\t89 4c 24 50          \tmov    %ecx,0x50(%rsp)\n   1082e:\t4c 0b 2c 24          \tor     (%rsp),%r13\n   10832:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n   10837:\t0f b7 46 3a          \tmovzwl 0x3a(%rsi),%eax\n   1083b:\t48 89 34 24          \tmov    %rsi,(%rsp)\n   1083f:\t48 8b 4e 28          \tmov    0x28(%rsi),%rcx\n   10843:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n   10848:\t39 d0                \tcmp    %edx,%eax\n   1084a:\t0f 86 eb 01 00 00    \tjbe    10a3b <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x31b>\n   10850:\t41 89 d7             \tmov    %edx,%r15d\n   10853:\t44 8b 54 24 38       \tmov    0x38(%rsp),%r10d\n   10858:\t49 c1 e7 04          \tshl    $0x4,%r15\n   1085c:\t4c 01 f9             \tadd    %r15,%rcx\n   1085f:\t8b 01                \tmov    (%rcx),%eax\n   10861:\t48 8b 49 08          \tmov    0x8(%rcx),%rcx\n   10865:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n   1086a:\t89 44 24 60          \tmov    %eax,0x60(%rsp)\n   1086e:\t48 89 4c 24 68       \tmov    %rcx,0x68(%rsp)\n   10873:\t0f 8f 0f 01 00 00    \tjg     10988 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x268>\n   10879:\t83 e8 0d             \tsub    $0xd,%eax\n   1087c:\t83 f8 15             \tcmp    $0x15,%eax\n   1087f:\t0f 96 c1             \tsetbe  %cl\n   10882:\t0f b7 43 3a          \tmovzwl 0x3a(%rbx),%eax\n   10886:\t48 8b 7b 28          \tmov    0x28(%rbx),%rdi\n   1088a:\t41 39 c2             \tcmp    %eax,%r10d\n   1088d:\t0f 83 a8 01 00 00    \tjae    10a3b <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x31b>\n   10893:\t48 03 7c 24 40       \tadd    0x40(%rsp),%rdi\n   10898:\t8b 07                \tmov    (%rdi),%eax\n   1089a:\t48 8b 7f 08          \tmov    0x8(%rdi),%rdi\n   1089e:\t89 44 24 70          \tmov    %eax,0x70(%rsp)\n   108a2:\t48 89 7c 24 78       \tmov    %rdi,0x78(%rsp)\n   108a7:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n   108ac:\t0f 8f 16 01 00 00    \tjg     109c8 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x2a8>\n   108b2:\t83 e8 0d             \tsub    $0xd,%eax\n   108b5:\t83 f8 15             \tcmp    $0x15,%eax\n   108b8:\t0f 96 c0             \tsetbe  %al\n   108bb:\t38 c8                \tcmp    %cl,%al\n   108bd:\t0f 85 82 01 00 00    \tjne    10a45 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x325>\n   108c3:\t0f b7 4e 3a          \tmovzwl 0x3a(%rsi),%ecx\n   108c7:\t48 8b 46 28          \tmov    0x28(%rsi),%rax\n   108cb:\t39 d1                \tcmp    %edx,%ecx\n   108cd:\t0f 86 68 01 00 00    \tjbe    10a3b <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x31b>\n   108d3:\t49 01 c7             \tadd    %rax,%r15\n   108d6:\t41 8b 07             \tmov    (%r15),%eax\n   108d9:\t49 8b 57 08          \tmov    0x8(%r15),%rdx\n   108dd:\t89 44 24 70          \tmov    %eax,0x70(%rsp)\n   108e1:\t48 89 54 24 78       \tmov    %rdx,0x78(%rsp)\n   108e6:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n   108eb:\t0f 8f 2f 01 00 00    \tjg     10a20 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x300>\n   108f1:\t83 e8 0d             \tsub    $0xd,%eax\n   108f4:\t83 f8 15             \tcmp    $0x15,%eax\n   108f7:\t0f 96 c3             \tsetbe  %bl\n   108fa:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n   108fe:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n   10903:\t0f 8f f7 00 00 00    \tjg     10a00 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x2e0>\n   10909:\t83 e8 0d             \tsub    $0xd,%eax\n   1090c:\t83 f8 15             \tcmp    $0x15,%eax\n   1090f:\t0f 96 c0             \tsetbe  %al\n   10912:\t38 d8                \tcmp    %bl,%al\n   10914:\t0f 85 4a 01 00 00    \tjne    10a64 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x344>\n   1091a:\t44 89 c6             \tmov    %r8d,%esi\n   1091d:\t4c 89 f7             \tmov    %r14,%rdi\n   10920:\te8 00 00 00 00       \tcallq  10925 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x205>\n   10925:\t4c 89 f7             \tmov    %r14,%rdi\n   10928:\tbe 68 00 00 00       \tmov    $0x68,%esi\n   1092d:\t52                   \tpush   %rdx\n   1092e:\t4c 89 ea             \tmov    %r13,%rdx\n   10931:\t50                   \tpush   %rax\n   10932:\tff 74 24 28          \tpushq  0x28(%rsp)\n   10936:\tff 74 24 28          \tpushq  0x28(%rsp)\n   1093a:\tff 74 24 28          \tpushq  0x28(%rsp)\n   1093e:\tff 74 24 28          \tpushq  0x28(%rsp)\n   10942:\t8b 8c 24 80 00 00 00 \tmov    0x80(%rsp),%ecx\n   10949:\t4c 8b 84 24 88 00 00 \tmov    0x88(%rsp),%r8\n   10950:\t00 \n   10951:\te8 00 00 00 00       \tcallq  10956 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x236>\n   10956:\t48 83 c4 30          \tadd    $0x30,%rsp\n   1095a:\t48 89 ee             \tmov    %rbp,%rsi\n   1095d:\t4c 89 e7             \tmov    %r12,%rdi\n   10960:\t49 89 d0             \tmov    %rdx,%r8\n   10963:\t48 89 c1             \tmov    %rax,%rcx\n   10966:\tba 01 00 00 00       \tmov    $0x1,%edx\n   1096b:\te8 00 00 00 00       \tcallq  10970 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x250>\n   10970:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n   10977:\t5b                   \tpop    %rbx\n   10978:\t5d                   \tpop    %rbp\n   10979:\t41 5c                \tpop    %r12\n   1097b:\t41 5d                \tpop    %r13\n   1097d:\t41 5e                \tpop    %r14\n   1097f:\t41 5f                \tpop    %r15\n   10981:\tc3                   \tretq   \n   10982:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n   10988:\t48 8d 7c 24 60       \tlea    0x60(%rsp),%rdi\n   1098d:\t48 89 54 24 48       \tmov    %rdx,0x48(%rsp)\n   10992:\t48 89 74 24 38       \tmov    %rsi,0x38(%rsp)\n   10997:\t44 89 54 24 30       \tmov    %r10d,0x30(%rsp)\n   1099c:\t44 89 44 24 28       \tmov    %r8d,0x28(%rsp)\n   109a1:\te8 00 00 00 00       \tcallq  109a6 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x286>\n   109a6:\t48 8b 54 24 48       \tmov    0x48(%rsp),%rdx\n   109ab:\t48 8b 74 24 38       \tmov    0x38(%rsp),%rsi\n   109b0:\t44 8b 54 24 30       \tmov    0x30(%rsp),%r10d\n   109b5:\t44 8b 44 24 28       \tmov    0x28(%rsp),%r8d\n   109ba:\t89 c1                \tmov    %eax,%ecx\n   109bc:\te9 c1 fe ff ff       \tjmpq   10882 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x162>\n   109c1:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n   109c8:\t48 8d 7c 24 70       \tlea    0x70(%rsp),%rdi\n   109cd:\t48 89 54 24 40       \tmov    %rdx,0x40(%rsp)\n   109d2:\t48 89 74 24 38       \tmov    %rsi,0x38(%rsp)\n   109d7:\t88 4c 24 30          \tmov    %cl,0x30(%rsp)\n   109db:\t44 89 44 24 28       \tmov    %r8d,0x28(%rsp)\n   109e0:\te8 00 00 00 00       \tcallq  109e5 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x2c5>\n   109e5:\t48 8b 54 24 40       \tmov    0x40(%rsp),%rdx\n   109ea:\t48 8b 74 24 38       \tmov    0x38(%rsp),%rsi\n   109ef:\t0f b6 4c 24 30       \tmovzbl 0x30(%rsp),%ecx\n   109f4:\t44 8b 44 24 28       \tmov    0x28(%rsp),%r8d\n   109f9:\te9 bd fe ff ff       \tjmpq   108bb <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x19b>\n   109fe:\t66 90                \txchg   %ax,%ax\n   10a00:\t48 8d 7c 24 50       \tlea    0x50(%rsp),%rdi\n   10a05:\t44 89 44 24 28       \tmov    %r8d,0x28(%rsp)\n   10a0a:\te8 00 00 00 00       \tcallq  10a0f <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x2ef>\n   10a0f:\t44 8b 44 24 28       \tmov    0x28(%rsp),%r8d\n   10a14:\te9 f9 fe ff ff       \tjmpq   10912 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x1f2>\n   10a19:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n   10a20:\t48 8d 7c 24 70       \tlea    0x70(%rsp),%rdi\n   10a25:\t44 89 44 24 28       \tmov    %r8d,0x28(%rsp)\n   10a2a:\te8 00 00 00 00       \tcallq  10a2f <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x30f>\n   10a2f:\t44 8b 44 24 28       \tmov    0x28(%rsp),%r8d\n   10a34:\t89 c3                \tmov    %eax,%ebx\n   10a36:\te9 bf fe ff ff       \tjmpq   108fa <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x1da>\n   10a3b:\te8 f0 f5 fe ff       \tcallq  30 <_ZNK4llvm6SDNode12getValueTypeEj.isra.0.part.0>\n   10a40:\te8 bb f5 fe ff       \tcallq  0 <_ZNK4llvm6SDNode10getOperandEj.isra.0.part.0>\n   10a45:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 10a4c <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x32c>\n   10a4c:\tba 3a 02 00 00       \tmov    $0x23a,%edx\n   10a51:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10a58 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x338>\n   10a58:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 10a5f <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x33f>\n   10a5f:\te8 00 00 00 00       \tcallq  10a64 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x344>\n   10a64:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 10a6b <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x34b>\n   10a6b:\tba 3c 02 00 00       \tmov    $0x23c,%edx\n   10a70:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 10a77 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x357>\n   10a77:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 10a7e <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x35e>\n   10a7e:\te8 00 00 00 00       \tcallq  10a83 <_ZN4llvm16DAGTypeLegalizer21ExpandIntRes_UADDSUBOEPNS_6SDNodeERNS_7SDValueES4_+0x363>\n   10a83:\t90                   \tnop\n   10a84:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n   10a8b:\t00 00 00 00 \n   10a8f:\t90                   \tnop", "code_s": "__int64 __fastcall llvm DAGTypeLegalizer ExpandIntRes_UADDSUBO(__int64 a1,\n                                                               __int64 a2,\n                                                               __int64 a3,\n                                                               __int64 a4) {\n  unsigned __int16 v5;\n  __int64 *v6;\n  __int64 v7;\n  unsigned int v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v13;\n  __int64 v14;\n  int *v16;\n  __int64 v17;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  __int64 v21;\n  unsigned int v22;\n  unsigned int v23;\n  __int64 v24;\n  __int64 v25;\n  unsigned int v26;\n  __int64 v27;\n  __int64 v28;\n  int v29;\n  int *v30;\n  int v31;\n  char v32;\n  __int64 v33;\n  int v34;\n  __int64 v35;\n  char v36;\n  char v37;\n  __int64 v38;\n  __int64 v39;\n  unsigned int v41;\n  char v42;\n  __int64 v43;\n  __int64 v44;\n  unsigned int v45;\n  unsigned int v46;\n  unsigned int v47;\n  unsigned int v48;\n  char v49;\n  unsigned int v50;\n  __int64 v51;\n  __int64 v52;\n  __int64 v53;\n  unsigned int v54;\n  __int64 v55;\n  int v56;\n  __int64 v57;\n  int v58;\n  __int64 v59;\n  v5 = *(_WORD *)(a2 + Number);\n  v6 = *(__int64 **)(a2 + Number);\n  if (!v5 || (v7 = *v6, v8 = *((_DWORD *)v6 + Number), v5 <= Number))\n    llvm SDNode getOperand(a1, a2);\n  v9 = *(unsigned int *)(a2 + Number);\n  v10 = *(unsigned int *)(a2 + Number);\n  v13 = *(unsigned __int16 *)(v7 + Number);\n  v14 = v6[Number];\n  v16 = *(int **)(a1 + Number);\n  v17 = *(_QWORD *)(v7 + Number);\n  if ((unsigned int)v13 <= v8)\n    goto LABEL_23;\n  v50 = *((_DWORD *)v6 + Number);\n  v43 = (unsigned int)v9;\n  v51 = Number L * v8;\n  v18 = v10 << Number;\n  v13 = llvm SelectionDAG getNode(\n      v16, (unsigned int)(*(_WORD *)(a2 + Number) != Number) + Number, v18 | v9,\n      *(unsigned int *)(v51 + v17), *(_QWORD *)(v51 + v17 + Number));\n  v16 = (int *)a1;\n  v44 = v19;\n  llvm DAGTypeLegalizer SplitInteger(a1, v13, v19, a3, a4);\n  v20 = *(_QWORD *)(a1 + Number);\n  v21 = *(_QWORD *)(a2 + Number);\n  v22 = Number * (*(_WORD *)(a2 + Number) == Number) + Number;\n  if (*(_WORD *)(a2 + Number) <= Number)\n    goto LABEL_23;\n  v23 = *(_DWORD *)(v21 + Number);\n  v24 = *(_QWORD *)(v21 + Number);\n  v14 = v44;\n  v54 = v23;\n  v25 = v43 | v18;\n  v55 = v24;\n  v17 = *(_QWORD *)(v13 + Number);\n  if (*(unsigned __int16 *)(v13 + Number) <= (unsigned int)v44)\n    goto LABEL_23;\n  v26 = v50;\n  v27 = Number L * (unsigned int)v44;\n  v28 = v27 + v17;\n  v29 = *(_DWORD *)v28;\n  v17 = *(_QWORD *)(v28 + Number);\n  v56 = v29;\n  v57 = v17;\n  if (v29 > Number) {\n    v53 = v44;\n    v45 = v22;\n    v41 = llvm EVT isExtendedVector((llvm EVT *)&v56);\n    v14 = v53;\n    v26 = v50;\n    v22 = v45;\n    v17 = v41;\n  } else {\n    LOBYTE(v17) = (unsigned int)(v29 - Number) <= Number;\n  }\n  v16 = *(int **)(v7 + Number);\n  if (v26 >= *(unsigned __int16 *)(v7 + Number))\n    goto LABEL_23;\n  v30 = &v16[(unsigned __int64)v51 / Number];\n  v31 = *v30;\n  v16 = (int *)*((_QWORD *)v30 + Number);\n  v58 = v31;\n  v59 = (__int64)v16;\n  if (v31 > Number) {\n    v16 = &v58;\n    v52 = v14;\n    v49 = v17;\n    v46 = v22;\n    v32 = llvm EVT isExtendedVector((llvm EVT *)&v58);\n    v14 = v52;\n    LOBYTE(v17) = v49;\n    v22 = v46;\n  } else {\n    v32 = (unsigned int)(v31 - Number) <= Number;\n  }\n  if (v32 != (_BYTE)v17)\n    _assert_fail(String, String, Number, String);\n  v17 = *(unsigned __int16 *)(v13 + Number);\n  if ((unsigned int)v17 <= (unsigned int)v14)\n  LABEL_23:\n    llvm SDNode getValueType(v16, v13, v14, v17);\n  v33 = *(_QWORD *)(v13 + Number) + v27;\n  v34 = *(_DWORD *)v33;\n  v35 = *(_QWORD *)(v33 + Number);\n  v58 = v34;\n  v59 = v35;\n  if (v34 > Number) {\n    v48 = v22;\n    v42 = llvm EVT isExtendedVector((llvm EVT *)&v58);\n    v22 = v48;\n    v36 = v42;\n  } else {\n    v36 = (unsigned int)(v34 - Number) <= Number;\n  }\n  if ((int)v54 > Number) {\n    v47 = v22;\n    v37 = llvm EVT isExtendedVector((llvm EVT *)&v54);\n    v22 = v47;\n  } else {\n    v37 = v54 - Number <= Number;\n  }\n  if (v37 != v36)\n    _assert_fail(String, String, Number, String);\n  llvm SelectionDAG getCondCode(v20, v22);\n  v38 = llvm SelectionDAG getNode(v20, Number L, v25, v54, v55);\n  return llvm DAGTypeLegalizer ReplaceValueWith(a1, a2, Number L, v38, v39);\n}", "code_t": "__int64 __fastcall llvm DAGTypeLegalizer\nExpandIntRes_UADDSUBO(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n                      __int64 <span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>) {\n  unsigned __int16 v5;\n  __int64 *v6;\n  __int64 v7;\n  unsigned int v8;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 v10;\n  __int64 v13;\n  __int64 v14;\n  int *v16;\n  __int64 v17;\n  __int64 v18;\n  __int64 v19;\n  __int64 <span class=\"supfact\">v20</span>;\n  __int64 v21;\n  unsigned int <span class=\"supfact\">v22</span>;\n  unsigned int v23;\n  __int64 v24;\n  __int64 v25;\n  unsigned int v26;\n  __int64 v27;\n  __int64 v28;\n  int v29;\n  int *v30;\n  int v31;\n  char v32;\n  __int64 v33;\n  int v34;\n  __int64 v35;\n  char v36;\n  char v37;\n  __int64 v38;\n  __int64 v39;\n  unsigned int v41;\n  char v42;\n  __int64 <span class=\"supfact\">v43</span>;\n  __int64 v44;\n  unsigned int v45;\n  unsigned int v46;\n  unsigned int v47;\n  unsigned int v48;\n  char <span class=\"supfact\">v49</span>;\n  unsigned int <span class=\"supfact\">v50</span>;\n  __int64 v51;\n  __int64 v52;\n  __int64 <span class=\"supfact\">v53</span>;\n  unsigned int <span class=\"supfact\">v54</span>;\n  __int64 <span class=\"supfact\">v55</span>;\n  int <span class=\"supfact\">v56</span>;\n  __int64 <span class=\"supfact\">v57</span>;\n  int <span class=\"supfact\">v58</span>;\n  __int64 <span class=\"supfact\">v59</span>;\n  v5 = *(_WORD *)(<span class=\"supfact\">a2</span> + Number);\n  v6 = *(__int64 **)(<span class=\"supfact\">a2</span> + Number);\n  if (!v5 || (v7 = *v6, v8 = *((_DWORD *)v6 + Number), v5 <= Number))\n    llvm SDNode getOperand(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n  <span class=\"supfact\">v9</span> = *(unsigned int *)(<span class=\"supfact\">a2</span> + Number);\n  v10 = *(unsigned int *)(<span class=\"supfact\">a2</span> + Number);\n  v13 = *(unsigned __int16 *)(v7 + Number);\n  v14 = v6[Number];\n  v16 = *(int **)(<span class=\"supfact\">a1</span> + Number);\n  v17 = *(_QWORD *)(v7 + Number);\n  if ((unsigned int)v13 <= v8)\n    goto LABEL_23;\n  <span class=\"supfact\">v50</span> = *((_DWORD *)v6 + Number);\n  <span class=\"supfact\">v43</span> = (unsigned int)<span class=\"supfact\">v9</span>;\n  v51 = Number L * v8;\n  v18 = v10 << Number;\n  v13 = llvm SelectionDAG getNode(\n      v16,\n      (unsigned int)(*(_WORD *)(<span class=\"supfact\">a2</span> + Number) != Number) +\n          Number,\n      v18 | <span class=\"supfact\">v9</span>, *(unsigned int *)(v51 + v17),\n      *(_QWORD *)(v51 + v17 + Number));\n  v16 = (int *)<span class=\"supfact\">a1</span>;\n  v44 = v19;\n  llvm DAGTypeLegalizer SplitInteger(<span class=\"supfact\">a1</span>, v13, v19,\n                                     <span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>);\n  <span class=\"supfact\">v20</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  v21 = *(_QWORD *)(<span class=\"supfact\">a2</span> + Number);\n  <span class=\"supfact\">v22</span> =\n      Number * (*(_WORD *)(<span class=\"supfact\">a2</span> + Number) == Number) + Number;\n  if (*(_WORD *)(<span class=\"supfact\">a2</span> + Number) <= Number)\n    goto LABEL_23;\n  v23 = *(_DWORD *)(v21 + Number);\n  v24 = *(_QWORD *)(v21 + Number);\n  v14 = v44;\n  <span class=\"supfact\">v54</span> = v23;\n  v25 = <span class=\"supfact\">v43</span> | v18;\n  <span class=\"supfact\">v55</span> = v24;\n  v17 = *(_QWORD *)(v13 + Number);\n  if (*(unsigned __int16 *)(v13 + Number) <= (unsigned int)v44)\n    goto LABEL_23;\n  v26 = <span class=\"supfact\">v50</span>;\n  v27 = Number L * (unsigned int)v44;\n  v28 = v27 + v17;\n  v29 = *(_DWORD *)v28;\n  v17 = *(_QWORD *)(v28 + Number);\n  <span class=\"supfact\">v56</span> = v29;\n  <span class=\"supfact\">v57</span> = v17;\n  if (v29 > Number) {\n    <span class=\"supfact\">v53</span> = v44;\n    v45 = <span class=\"supfact\">v22</span>;\n    v41 = llvm EVT isExtendedVector((llvm EVT *)&<span class=\"supfact\">v56</span>);\n    v14 = <span class=\"supfact\">v53</span>;\n    v26 = <span class=\"supfact\">v50</span>;\n    <span class=\"supfact\">v22</span> = v45;\n    v17 = v41;\n  } else {\n    LOBYTE(v17) = (unsigned int)(v29 - Number) <= Number;\n  }\n  v16 = *(int **)(v7 + Number);\n  if (v26 >= *(unsigned __int16 *)(v7 + Number))\n    goto LABEL_23;\n  v30 = &v16[(unsigned __int64)v51 / Number];\n  v31 = *v30;\n  v16 = (int *)*((_QWORD *)v30 + Number);\n  <span class=\"supfact\">v58</span> = v31;\n  <span class=\"supfact\">v59</span> = (__int64)v16;\n  if (v31 > Number) {\n    v16 = &<span class=\"supfact\">v58</span>;\n    v52 = v14;\n    <span class=\"supfact\">v49</span> = v17;\n    v46 = <span class=\"supfact\">v22</span>;\n    v32 = llvm EVT isExtendedVector((llvm EVT *)&<span class=\"supfact\">v58</span>);\n    v14 = v52;\n    LOBYTE(v17) = <span class=\"supfact\">v49</span>;\n    <span class=\"supfact\">v22</span> = v46;\n  } else {\n    v32 = (unsigned int)(v31 - Number) <= Number;\n  }\n  if (v32 != (_BYTE)v17)\n    _assert_fail(String, String, Number, String);\n  v17 = *(unsigned __int16 *)(v13 + Number);\n  if ((unsigned int)v17 <= (unsigned int)v14)\n  LABEL_23:\n    llvm SDNode getValueType(v16, v13, v14, v17);\n  v33 = *(_QWORD *)(v13 + Number) + v27;\n  v34 = *(_DWORD *)v33;\n  v35 = *(_QWORD *)(v33 + Number);\n  <span class=\"supfact\">v58</span> = v34;\n  <span class=\"supfact\">v59</span> = v35;\n  if (v34 > Number) {\n    v48 = <span class=\"supfact\">v22</span>;\n    v42 = llvm EVT isExtendedVector((llvm EVT *)&<span class=\"supfact\">v58</span>);\n    <span class=\"supfact\">v22</span> = v48;\n    v36 = v42;\n  } else {\n    v36 = (unsigned int)(v34 - Number) <= Number;\n  }\n  if ((int)<span class=\"supfact\">v54</span> > Number) {\n    v47 = <span class=\"supfact\">v22</span>;\n    v37 = llvm EVT isExtendedVector((llvm EVT *)&<span class=\"supfact\">v54</span>);\n    <span class=\"supfact\">v22</span> = v47;\n  } else {\n    v37 = <span class=\"supfact\">v54</span> - Number <= Number;\n  }\n  if (v37 != v36)\n    _assert_fail(String, String, Number, String);\n  llvm SelectionDAG getCondCode(<span class=\"supfact\">v20</span>, <span class=\"supfact\">v22</span>);\n  v38 = llvm SelectionDAG getNode(<span class=\"supfact\">v20</span>, Number L, v25,\n                                  <span class=\"supfact\">v54</span>, <span class=\"supfact\">v55</span>);\n  return llvm DAGTypeLegalizer ReplaceValueWith(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, Number L, v38, v39);\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "__int64"}, {"name": "a4", "type": "__int64", "pred_name": "a4", "ref_name": "a4", "ref_type": "__int64"}, {"name": "v9", "type": "__int64", "pred_name": "v9", "ref_name": "v9", "ref_type": "__int64"}, {"name": "v20", "type": "__int64", "pred_name": "v20", "ref_name": "v20", "ref_type": "__int64"}, {"name": "v22", "type": "unsigned int", "pred_name": "v22", "ref_name": "v22", "ref_type": "unsigned int"}, {"name": "v43", "type": "__int64", "pred_name": "v43", "ref_name": "v43", "ref_type": "__int64"}, {"name": "v49", "type": "char", "pred_name": "v49", "ref_name": "v49", "ref_type": "char"}, {"name": "v50", "type": "unsigned int", "pred_name": "v50", "ref_name": "v50", "ref_type": "unsigned int"}, {"name": "v53", "type": "__int64", "pred_name": "v53", "ref_name": "v53", "ref_type": "__int64"}, {"name": "v54", "type": "int", "pred_name": "v54", "ref_name": "v54", "ref_type": "unsigned int"}, {"name": "v55", "type": "__int64", "pred_name": "v55", "ref_name": "v55", "ref_type": "__int64"}, {"name": "v56", "type": "unsigned int", "pred_name": "v56", "ref_name": "v56", "ref_type": "int"}, {"name": "v57", "type": "__int64", "pred_name": "v57", "ref_name": "v57", "ref_type": "__int64"}, {"name": "v58", "type": "unsigned int", "pred_name": "v58", "ref_name": "v58", "ref_type": "int"}, {"name": "v59", "type": "__int64", "pred_name": "v59", "ref_name": "v59", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "000000000000fa6a <glGetTexParameterIuivEXT>:\n    fa6a:\t55                   \tpush   %rbp\n    fa6b:\t48 89 e5             \tmov    %rsp,%rbp\n    fa6e:\t48 83 ec 10          \tsub    $0x10,%rsp\n    fa72:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    fa75:\t89 75 f8             \tmov    %esi,-0x8(%rbp)\n    fa78:\t48 89 55 f0          \tmov    %rdx,-0x10(%rbp)\n    fa7c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # fa83 <glGetTexParameterIuivEXT+0x19>\n    fa83:\t4c 8b 80 20 1c 00 00 \tmov    0x1c20(%rax),%r8\n    fa8a:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    fa8e:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n    fa91:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    fa94:\t89 ce                \tmov    %ecx,%esi\n    fa96:\t89 c7                \tmov    %eax,%edi\n    fa98:\t41 ff d0             \tcallq  *%r8\n    fa9b:\t90                   \tnop\n    fa9c:\tc9                   \tleaveq \n    fa9d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glGetTexParameterIuivEXT(unsigned int a1, unsigned int a2,\n                                            __int64 a3) {\n  return (*(__int64(__fastcall **)(_QWORD, _QWORD, __int64))(\n      glapi_Dispatch + Number L))(a1, a2, a3);\n}", "code_t": "void __cdecl glGetTexParameterIuivEXT(GLenum <span class=\"supfact\">target</span>,\n                                      GLenum <span class=\"supfact\">pname</span>,\n                                      GLuint *<span class=\"supfact\">params</span>) {\n  (*(void(__fastcall **)(_QWORD, _QWORD, GLuint *))(glapi_Dispatch + Number L))(\n      <span class=\"supfact\">target</span>, <span class=\"supfact\">pname</span>, <span class=\"supfact\">params</span>);\n}", "var": [{"name": "a1", "type": "GLenum", "pred_name": "target", "ref_name": "target", "ref_type": "GLenum"}, {"name": "a2", "type": "GLenum", "pred_name": "pname", "ref_name": "pname", "ref_type": "GLenum"}, {"name": "a3", "type": "GLint *", "pred_name": "params", "ref_name": "params", "ref_type": "GLuint *"}], "body_in_train": false}, {"repo_owner": "leon-anavi", "repo_name": "xmame-arm", "path": "leon-anavi/xmame-arm/bad60a32b293dab5592647658c78568221567e7e97ec231cf097df14abdf8227", "path_in_repo": "leon-anavi/xmame-arm//xmame.obj/cpu/m37710/m37710o2.o", "objdump": "000000000000887f <m37710i_199_M1X0>:\n    887f:\t55                   \tpush   %rbp\n    8880:\t48 89 e5             \tmov    %rsp,%rbp\n    8883:\t53                   \tpush   %rbx\n    8884:\t48 83 ec 08          \tsub    $0x8,%rsp\n    8888:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 888e <m37710i_199_M1X0+0xf>\n    888e:\t83 e8 05             \tsub    $0x5,%eax\n    8891:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 8897 <m37710i_199_M1X0+0x18>\n    8897:\t8b 1d 00 00 00 00    \tmov    0x0(%rip),%ebx        # 889d <m37710i_199_M1X0+0x1e>\n    889d:\te8 70 7f ff ff       \tcallq  812 <EA_AY>\n    88a2:\t89 de                \tmov    %ebx,%esi\n    88a4:\t89 c7                \tmov    %eax,%edi\n    88a6:\te8 40 78 ff ff       \tcallq  eb <m37710i_write_8_normal>\n    88ab:\t90                   \tnop\n    88ac:\t48 83 c4 08          \tadd    $0x8,%rsp\n    88b0:\t5b                   \tpop    %rbx\n    88b1:\t5d                   \tpop    %rbp\n    88b2:\tc3                   \tretq   ", "code_s": "__int64 m37710i_199_M1X0() {\n  unsigned int v0;\n  int v1;\n  m37710_ICount -= Number;\n  v0 = m37710i_cpu[Number];\n  v1 = EA_AY();\n  return m37710i_write_8_normal(v1, v0);\n}", "code_t": "void __cdecl m37710i_199_M1X0() {\n  unsigned int <span class=\"supfact\">v0</span>;\n  unsigned int <span class=\"supfact\">v1</span>;\n  m37710_ICount -= Number;\n  <span class=\"supfact\">v0</span> = m37710i_cpu[Number];\n  <span class=\"supfact\">v1</span> = EA_AY();\n  m37710i_write_8_normal(<span class=\"supfact\">v1</span>, <span class=\"supfact\">v0</span>);\n}", "var": [{"name": "v0", "type": "unsigned int", "pred_name": "v0", "ref_name": "v0", "ref_type": "unsigned int"}, {"name": "v1", "type": "unsigned int", "pred_name": "v1", "ref_name": "v1", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "nmacs", "repo_name": "print3d", "path": "nmacs/print3d/142ee0ab03aaea08c1cce3b49aba610648f7bc1ddb53dfc348f2f9408898fa3c", "path_in_repo": "nmacs/print3d//toolchain/openocd-0.7.0/jimtcl/jimsh", "objdump": "0000000000411c82 <Jim_GetLong>:\n  411c82:\t55                   \tpush   %rbp\n  411c83:\t48 89 e5             \tmov    %rsp,%rbp\n  411c86:\t48 83 ec 30          \tsub    $0x30,%rsp\n  411c8a:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  411c8e:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  411c92:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  411c96:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  411c9a:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  411c9e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  411ca2:\t48 89 ce             \tmov    %rcx,%rsi\n  411ca5:\t48 89 c7             \tmov    %rax,%rdi\n  411ca8:\te8 19 ff ff ff       \tcallq  411bc6 <Jim_GetWide>\n  411cad:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  411cb0:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  411cb4:\t75 12                \tjne    411cc8 <Jim_GetLong+0x46>\n  411cb6:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  411cba:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  411cbe:\t48 89 10             \tmov    %rdx,(%rax)\n  411cc1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  411cc6:\teb 05                \tjmp    411ccd <Jim_GetLong+0x4b>\n  411cc8:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  411ccd:\tc9                   \tleaveq \n  411cce:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Jim_GetLong(__int64 *a1, __int64 a2, _QWORD *a3) {\n  __int64 v5;\n  if ((unsigned int)Jim_GetWide(a1, a2, &v5))\n    return Number L;\n  *a3 = v5;\n  return Number L;\n}", "code_t": "int __cdecl Jim_GetLong(Jim_Interp_0 *<span class=\"supfact\">interp</span>,\n                        Jim_Obj_0 *<span class=\"supfact\">objPtr</span>,\n                        __int64 *<span class=\"supfact\">longPtr</span>) {\n  __int64 <span class=\"supfact\">wideValue</span>;\n  if (Jim_GetWide(<span class=\"supfact\">interp</span>, <span class=\"supfact\">objPtr</span>,\n                  &<span class=\"supfact\">wideValue</span>))\n    return Number;\n  *<span class=\"supfact\">longPtr</span> = <span class=\"supfact\">wideValue</span>;\n  return Number;\n}", "var": [{"name": "a1", "type": "u8 *", "pred_name": "srcPtr", "ref_name": "interp", "ref_type": "Jim_Interp_0 *"}, {"name": "a2", "type": "u8 *", "pred_name": "dstPtr", "ref_name": "objPtr", "ref_type": "Jim_Obj_0 *"}, {"name": "a3", "type": "u8 *", "pred_name": "srcPtr", "ref_name": "longPtr", "ref_type": "__int64 *"}, {"name": "v5", "type": "u8 *", "pred_name": "dstPtr", "ref_name": "wideValue", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/7f064ef94bd77c38f6b41c96011322b3169dd4d9ba367a0ad3bc23a58a87a747", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Foundation/obj/Linux/x86_64/release_shared/pcre_fullinfo.o", "objdump": "00000000000000b9 <pcre_fullinfo>:\n  b9:\t55                   \tpush   %rbp\n  ba:\t48 89 e5             \tmov    %rsp,%rbp\n  bd:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n  c4:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n  c8:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n  cc:\t89 95 7c ff ff ff    \tmov    %edx,-0x84(%rbp)\n  d2:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n  d9:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  dd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  e1:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  e8:\t00 \n  e9:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  ee:\t74 0a                \tje     fa <pcre_fullinfo+0x41>\n  f0:\t48 83 bd 70 ff ff ff \tcmpq   $0x0,-0x90(%rbp)\n  f7:\t00 \n  f8:\t75 0a                \tjne    104 <pcre_fullinfo+0x4b>\n  fa:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n  ff:\te9 b3 02 00 00       \tjmpq   3b7 <pcre_fullinfo+0x2fe>\n 104:\t48 83 7d 80 00       \tcmpq   $0x0,-0x80(%rbp)\n 109:\t74 1b                \tje     126 <pcre_fullinfo+0x6d>\n 10b:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 10f:\t48 8b 00             \tmov    (%rax),%rax\n 112:\t83 e0 01             \tand    $0x1,%eax\n 115:\t48 85 c0             \ttest   %rax,%rax\n 118:\t74 0c                \tje     126 <pcre_fullinfo+0x6d>\n 11a:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 11e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 122:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 126:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 12a:\t8b 00                \tmov    (%rax),%eax\n 12c:\t3d 45 52 43 50       \tcmp    $0x50435245,%eax\n 131:\t74 3c                \tje     16f <pcre_fullinfo+0xb6>\n 133:\t48 8d 4d 90          \tlea    -0x70(%rbp),%rcx\n 137:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 13b:\t48 8d 75 c0          \tlea    -0x40(%rbp),%rsi\n 13f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 143:\t48 89 c7             \tmov    %rax,%rdi\n 146:\te8 00 00 00 00       \tcallq  14b <pcre_fullinfo+0x92>\n 14b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 14f:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 154:\t75 0a                \tjne    160 <pcre_fullinfo+0xa7>\n 156:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n 15b:\te9 57 02 00 00       \tjmpq   3b7 <pcre_fullinfo+0x2fe>\n 160:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 165:\t74 08                \tje     16f <pcre_fullinfo+0xb6>\n 167:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 16b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 16f:\t83 bd 7c ff ff ff 0e \tcmpl   $0xe,-0x84(%rbp)\n 176:\t0f 87 2f 02 00 00    \tja     3ab <pcre_fullinfo+0x2f2>\n 17c:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n 182:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 189:\t00 \n 18a:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 191 <pcre_fullinfo+0xd8>\n 191:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n 194:\t48 98                \tcltq   \n 196:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 19d <pcre_fullinfo+0xe4>\n 19d:\t48 01 d0             \tadd    %rdx,%rax\n 1a0:\tff e0                \tjmpq   *%rax\n 1a2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1a6:\t8b 40 08             \tmov    0x8(%rax),%eax\n 1a9:\t89 c0                \tmov    %eax,%eax\n 1ab:\t25 7f 7a fc 03       \tand    $0x3fc7a7f,%eax\n 1b0:\t48 89 c2             \tmov    %rax,%rdx\n 1b3:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 1ba:\t48 89 10             \tmov    %rdx,(%rax)\n 1bd:\te9 f0 01 00 00       \tjmpq   3b2 <pcre_fullinfo+0x2f9>\n 1c2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1c6:\t8b 40 04             \tmov    0x4(%rax),%eax\n 1c9:\t89 c2                \tmov    %eax,%edx\n 1cb:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 1d2:\t48 89 10             \tmov    %rdx,(%rax)\n 1d5:\te9 d8 01 00 00       \tjmpq   3b2 <pcre_fullinfo+0x2f9>\n 1da:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 1df:\t74 0a                \tje     1eb <pcre_fullinfo+0x132>\n 1e1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 1e5:\t8b 00                \tmov    (%rax),%eax\n 1e7:\t89 c2                \tmov    %eax,%edx\n 1e9:\teb 05                \tjmp    1f0 <pcre_fullinfo+0x137>\n 1eb:\tba 00 00 00 00       \tmov    $0x0,%edx\n 1f0:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 1f7:\t48 89 10             \tmov    %rdx,(%rax)\n 1fa:\te9 b3 01 00 00       \tjmpq   3b2 <pcre_fullinfo+0x2f9>\n 1ff:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 203:\t0f b7 40 10          \tmovzwl 0x10(%rax),%eax\n 207:\t0f b7 d0             \tmovzwl %ax,%edx\n 20a:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 211:\t89 10                \tmov    %edx,(%rax)\n 213:\te9 9a 01 00 00       \tjmpq   3b2 <pcre_fullinfo+0x2f9>\n 218:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 21c:\t0f b7 40 12          \tmovzwl 0x12(%rax),%eax\n 220:\t0f b7 d0             \tmovzwl %ax,%edx\n 223:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 22a:\t89 10                \tmov    %edx,(%rax)\n 22c:\te9 81 01 00 00       \tjmpq   3b2 <pcre_fullinfo+0x2f9>\n 231:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 235:\t0f b7 40 0c          \tmovzwl 0xc(%rax),%eax\n 239:\t0f b7 c0             \tmovzwl %ax,%eax\n 23c:\t83 e0 02             \tand    $0x2,%eax\n 23f:\t85 c0                \ttest   %eax,%eax\n 241:\t74 0d                \tje     250 <pcre_fullinfo+0x197>\n 243:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 247:\t0f b7 40 14          \tmovzwl 0x14(%rax),%eax\n 24b:\t0f b7 c0             \tmovzwl %ax,%eax\n 24e:\teb 1e                \tjmp    26e <pcre_fullinfo+0x1b5>\n 250:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 254:\t0f b7 40 0c          \tmovzwl 0xc(%rax),%eax\n 258:\t0f b7 c0             \tmovzwl %ax,%eax\n 25b:\t83 e0 08             \tand    $0x8,%eax\n 25e:\t85 c0                \ttest   %eax,%eax\n 260:\t74 07                \tje     269 <pcre_fullinfo+0x1b0>\n 262:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 267:\teb 05                \tjmp    26e <pcre_fullinfo+0x1b5>\n 269:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n 26e:\t48 8b 95 70 ff ff ff \tmov    -0x90(%rbp),%rdx\n 275:\t89 02                \tmov    %eax,(%rdx)\n 277:\te9 36 01 00 00       \tjmpq   3b2 <pcre_fullinfo+0x2f9>\n 27c:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 281:\t74 1c                \tje     29f <pcre_fullinfo+0x1e6>\n 283:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 287:\t8b 40 04             \tmov    0x4(%rax),%eax\n 28a:\t83 e0 01             \tand    $0x1,%eax\n 28d:\t85 c0                \ttest   %eax,%eax\n 28f:\t74 0e                \tje     29f <pcre_fullinfo+0x1e6>\n 291:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 295:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 299:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n 29d:\teb 05                \tjmp    2a4 <pcre_fullinfo+0x1eb>\n 29f:\tba 00 00 00 00       \tmov    $0x0,%edx\n 2a4:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 2ab:\t48 89 10             \tmov    %rdx,(%rax)\n 2ae:\te9 ff 00 00 00       \tjmpq   3b2 <pcre_fullinfo+0x2f9>\n 2b3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2b7:\t0f b7 40 0c          \tmovzwl 0xc(%rax),%eax\n 2bb:\t0f b7 c0             \tmovzwl %ax,%eax\n 2be:\t83 e0 04             \tand    $0x4,%eax\n 2c1:\t85 c0                \ttest   %eax,%eax\n 2c3:\t74 0d                \tje     2d2 <pcre_fullinfo+0x219>\n 2c5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2c9:\t0f b7 40 16          \tmovzwl 0x16(%rax),%eax\n 2cd:\t0f b7 c0             \tmovzwl %ax,%eax\n 2d0:\teb 05                \tjmp    2d7 <pcre_fullinfo+0x21e>\n 2d2:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 2d7:\t48 8b 95 70 ff ff ff \tmov    -0x90(%rbp),%rdx\n 2de:\t89 02                \tmov    %eax,(%rdx)\n 2e0:\te9 cd 00 00 00       \tjmpq   3b2 <pcre_fullinfo+0x2f9>\n 2e5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2e9:\t0f b7 40 1a          \tmovzwl 0x1a(%rax),%eax\n 2ed:\t0f b7 d0             \tmovzwl %ax,%edx\n 2f0:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 2f7:\t89 10                \tmov    %edx,(%rax)\n 2f9:\te9 b4 00 00 00       \tjmpq   3b2 <pcre_fullinfo+0x2f9>\n 2fe:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 302:\t0f b7 40 1c          \tmovzwl 0x1c(%rax),%eax\n 306:\t0f b7 d0             \tmovzwl %ax,%edx\n 309:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 310:\t89 10                \tmov    %edx,(%rax)\n 312:\te9 9b 00 00 00       \tjmpq   3b2 <pcre_fullinfo+0x2f9>\n 317:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 31b:\t0f b7 40 18          \tmovzwl 0x18(%rax),%eax\n 31f:\t0f b7 d0             \tmovzwl %ax,%edx\n 322:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 326:\t48 01 c2             \tadd    %rax,%rdx\n 329:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 330:\t48 89 10             \tmov    %rdx,(%rax)\n 333:\teb 7d                \tjmp    3b2 <pcre_fullinfo+0x2f9>\n 335:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 33c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 343 <pcre_fullinfo+0x28a>\n 343:\t48 89 10             \tmov    %rdx,(%rax)\n 346:\teb 6a                \tjmp    3b2 <pcre_fullinfo+0x2f9>\n 348:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 34c:\t0f b7 40 0c          \tmovzwl 0xc(%rax),%eax\n 350:\t0f b7 c0             \tmovzwl %ax,%eax\n 353:\t83 e0 01             \tand    $0x1,%eax\n 356:\t85 c0                \ttest   %eax,%eax\n 358:\t0f 94 c0             \tsete   %al\n 35b:\t0f b6 d0             \tmovzbl %al,%edx\n 35e:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 365:\t89 10                \tmov    %edx,(%rax)\n 367:\teb 49                \tjmp    3b2 <pcre_fullinfo+0x2f9>\n 369:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 36d:\t0f b7 40 0c          \tmovzwl 0xc(%rax),%eax\n 371:\t0f b7 c0             \tmovzwl %ax,%eax\n 374:\t83 e0 10             \tand    $0x10,%eax\n 377:\t85 c0                \ttest   %eax,%eax\n 379:\t0f 95 c0             \tsetne  %al\n 37c:\t0f b6 d0             \tmovzbl %al,%edx\n 37f:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 386:\t89 10                \tmov    %edx,(%rax)\n 388:\teb 28                \tjmp    3b2 <pcre_fullinfo+0x2f9>\n 38a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 38e:\t0f b7 40 0c          \tmovzwl 0xc(%rax),%eax\n 392:\t0f b7 c0             \tmovzwl %ax,%eax\n 395:\t83 e0 20             \tand    $0x20,%eax\n 398:\t85 c0                \ttest   %eax,%eax\n 39a:\t0f 95 c0             \tsetne  %al\n 39d:\t0f b6 d0             \tmovzbl %al,%edx\n 3a0:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n 3a7:\t89 10                \tmov    %edx,(%rax)\n 3a9:\teb 07                \tjmp    3b2 <pcre_fullinfo+0x2f9>\n 3ab:\tb8 fd ff ff ff       \tmov    $0xfffffffd,%eax\n 3b0:\teb 05                \tjmp    3b7 <pcre_fullinfo+0x2fe>\n 3b2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3b7:\tc9                   \tleaveq \n 3b8:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall pcre_fullinfo(__int64 a1, _QWORD *a2, int a3, __int64 *a4) {\n  __int64 result;\n  __int64 v5;\n  int v6;\n  __int64 v7;\n  int v8;\n  char v11[Number];\n  char v12[Number];\n  char *v13;\n  __int64 v14;\n  v14 = a1;\n  v13 = Number L;\n  if (!a1 || !a4)\n    return Number L;\n  if (a2 && (*a2 & Number L) != Number)\n    v13 = (char *)a2[Number];\n  if (*(_DWORD *)v14 != Number) {\n    v14 = pcre_try_flipped(v14, v12, v13, v11);\n    if (!v14)\n      return Number L;\n    if (v13)\n      v13 = v11;\n  }\n  switch (a3) {\n  case Number:\n    *a4 = *(_DWORD *)(v14 + Number) & Number;\n    goto LABEL_44;\n  case Number:\n    *a4 = *(unsigned int *)(v14 + Number);\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)a4 = *(unsigned __int16 *)(v14 + Number);\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)a4 = *(unsigned __int16 *)(v14 + Number);\n    goto LABEL_44;\n  case Number:\n    if ((*(_WORD *)(v14 + Number) & Number) != Number) {\n      v6 = *(unsigned __int16 *)(v14 + Number);\n    } else if ((*(_WORD *)(v14 + Number) & Number) != Number) {\n      v6 = Number;\n    } else {\n      v6 = Number;\n    }\n    *(_DWORD *)a4 = v6;\n    goto LABEL_44;\n  case Number:\n    if (v13 && (*((_DWORD *)v13 + Number) & Number) != Number)\n      v7 = a2[Number] + Number L;\n    else\n      v7 = Number L;\n    *a4 = v7;\n    goto LABEL_44;\n  case Number:\n    if ((*(_WORD *)(v14 + Number) & Number) != Number)\n      v8 = *(unsigned __int16 *)(v14 + Number);\n    else\n      v8 = Number;\n    *(_DWORD *)a4 = v8;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)a4 = *(unsigned __int16 *)(v14 + Number);\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)a4 = *(unsigned __int16 *)(v14 + Number);\n    goto LABEL_44;\n  case Number:\n    *a4 = v14 + *(unsigned __int16 *)(v14 + Number);\n    goto LABEL_44;\n  case Number:\n    if (v13)\n      v5 = *(unsigned int *)v13;\n    else\n      v5 = Number L;\n    *a4 = v5;\n    goto LABEL_44;\n  case Number:\n    *a4 = (__int64)&pcre_default_tables;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)a4 = (*(_WORD *)(v14 + Number) & Number) == Number;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)a4 = (*(_WORD *)(v14 + Number) & Number) != Number;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)a4 = (*(_WORD *)(v14 + Number) & Number) != Number;\n  LABEL_44:\n    result = Number L;\n    break;\n  default:\n    result = Number L;\n    break;\n  }\n  return result;\n}", "code_t": "int __cdecl pcre_fullinfo(const pcre *<span class=\"supfact\">argument_re</span>,\n                          const pcre_extra_0 *<span class=\"supfact\">extra_data</span>,\n                          int <span class=\"supfact\">what</span>,\n                          void *<span class=\"supfact\">where</span>) {\n  int result;\n  __int64 v5;\n  int v6;\n  char *v7;\n  int v8;\n  pcre_study_data_0 <span class=\"supfact\">internal_study</span>;\n  real_pcre_0 <span class=\"supfact\">internal_re</span>;\n  const pcre_study_data_0 *<span class=\"supfact\">study</span>;\n  const real_pcre_0 *<span class=\"supfact\">re</span>;\n  <span class=\"supfact\">re</span> = <span class=\"supfact\">argument_re</span>;\n  <span class=\"supfact\">study</span> = Number L;\n  if (!<span class=\"supfact\">argument_re</span> || !<span class=\"supfact\">where</span>)\n    return Number;\n  if (<span class=\"supfact\">extra_data</span> &&\n      (<span class=\"supfact\">extra_data</span>->flags & Number) != Number)\n    <span class=\"supfact\">study</span> =\n        (const pcre_study_data_0 *)<span class=\"supfact\">extra_data</span>->study_data;\n  if (<span class=\"supfact\">re</span>->magic_number != Number) {\n    <span class=\"supfact\">re</span> = (const real_pcre_0 *)pcre_try_flipped(\n        <span class=\"supfact\">re</span>, &<span class=\"supfact\">internal_re</span>, <span class=\"supfact\">study</span>,\n        &<span class=\"supfact\">internal_study</span>);\n    if (!<span class=\"supfact\">re</span>)\n      return Number;\n    if (<span class=\"supfact\">study</span>)\n      <span class=\"supfact\">study</span> = &<span class=\"supfact\">internal_study</span>;\n  }\n  switch (<span class=\"supfact\">what</span>) {\n  case Number:\n    *(_QWORD *)<span class=\"supfact\">where</span> = <span class=\"supfact\">re</span>->options & Number;\n    goto LABEL_44;\n  case Number:\n    *(_QWORD *)<span class=\"supfact\">where</span> = <span class=\"supfact\">re</span>->size;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)<span class=\"supfact\">where</span> = <span class=\"supfact\">re</span>->top_bracket;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)<span class=\"supfact\">where</span> = <span class=\"supfact\">re</span>->top_backref;\n    goto LABEL_44;\n  case Number:\n    if ((<span class=\"supfact\">re</span>->flags & Number) != Number) {\n      v6 = <span class=\"supfact\">re</span>->first_byte;\n    } else if ((<span class=\"supfact\">re</span>->flags & Number) != Number) {\n      v6 = Number;\n    } else {\n      v6 = Number;\n    }\n    *(_DWORD *)<span class=\"supfact\">where</span> = v6;\n    goto LABEL_44;\n  case Number:\n    if (<span class=\"supfact\">study</span> &&\n        (<span class=\"supfact\">study</span>->options & Number) != Number)\n      v7 = (char *)<span class=\"supfact\">extra_data</span>->study_data + Number;\n    else\n      v7 = Number L;\n    *(_QWORD *)<span class=\"supfact\">where</span> = v7;\n    goto LABEL_44;\n  case Number:\n    if ((<span class=\"supfact\">re</span>->flags & Number) != Number)\n      v8 = <span class=\"supfact\">re</span>->req_byte;\n    else\n      v8 = Number;\n    *(_DWORD *)<span class=\"supfact\">where</span> = v8;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)<span class=\"supfact\">where</span> = <span class=\"supfact\">re</span>->name_entry_size;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)<span class=\"supfact\">where</span> = <span class=\"supfact\">re</span>->name_count;\n    goto LABEL_44;\n  case Number:\n    *(_QWORD *)<span class=\"supfact\">where</span> =\n        (char *)<span class=\"supfact\">re</span> + <span class=\"supfact\">re</span>->name_table_offset;\n    goto LABEL_44;\n  case Number:\n    if (<span class=\"supfact\">study</span>)\n      v5 = <span class=\"supfact\">study</span>->size;\n    else\n      v5 = Number L;\n    *(_QWORD *)<span class=\"supfact\">where</span> = v5;\n    goto LABEL_44;\n  case Number:\n    *(_QWORD *)<span class=\"supfact\">where</span> = &pcre_default_tables;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)<span class=\"supfact\">where</span> =\n        (<span class=\"supfact\">re</span>->flags & Number) == Number;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)<span class=\"supfact\">where</span> =\n        (<span class=\"supfact\">re</span>->flags & Number) != Number;\n    goto LABEL_44;\n  case Number:\n    *(_DWORD *)<span class=\"supfact\">where</span> =\n        (<span class=\"supfact\">re</span>->flags & Number) != Number;\n  LABEL_44:\n    result = Number;\n    break;\n  default:\n    result = Number;\n    break;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "pcre *", "pred_name": "re", "ref_name": "argument_re", "ref_type": "const pcre *"}, {"name": "a2", "type": "pcre_extra_0 *", "pred_name": "extra", "ref_name": "extra_data", "ref_type": "const pcre_extra_0 *"}, {"name": "a3", "type": "int", "pred_name": "option", "ref_name": "what", "ref_type": "int"}, {"name": "a4", "type": "void *", "pred_name": "ptr", "ref_name": "where", "ref_type": "void *"}, {"name": "v11", "type": "char[48]", "pred_name": "__unk__", "ref_name": "internal_study", "ref_type": "struct pcre_study_data_0 { pcre_uint32 size; pcre_uint32 options; uschar[32] start_bits; }"}, {"name": "v12", "type": "char[48]", "pred_name": "__unk__", "ref_name": "internal_re", "ref_type": "struct real_pcre_0 { pcre_uint32 magic_number; pcre_uint32 size; pcre_uint32 options; pcre_uint16 flags; pcre_uint16 dummy1; pcre_uint16 top_bracket; pcre_uint16 top_backref; pcre_uint16 first_byte; pcre_uint16 req_byte; pcre_uint16 name_table_offset; pcre_uint16 name_entry_size; pcre_uint16 name_count; pcre_uint16 ref_count; const unsigned __int8 * tables; const unsigned __int8 * nullpad; }"}, {"name": "v13", "type": "__unk__", "pred_name": "__unk__", "ref_name": "study", "ref_type": "const pcre_study_data_0 *"}, {"name": "v14", "type": "__unk__", "pred_name": "__unk__", "ref_name": "re", "ref_type": "const real_pcre_0 *"}], "body_in_train": false}, {"repo_owner": "sleyzerzon", "repo_name": "soar", "path": "sleyzerzon/soar/dffa33413ec140e0105452e45f4dd567b028731c8001a382529c24cc0f077124", "path_in_repo": "sleyzerzon/soar/Domains/RoomsWorld/april/src/common/getopt.o", "objdump": "00000000000000e0 <getopt_parse>:\n  e0:\t55                   \tpush   %rbp\n  e1:\t48 89 e5             \tmov    %rsp,%rbp\n  e4:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  eb:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n  f2:\t89 b5 74 ff ff ff    \tmov    %esi,-0x8c(%rbp)\n  f8:\t48 89 95 68 ff ff ff \tmov    %rdx,-0x98(%rbp)\n  ff:\t89 8d 70 ff ff ff    \tmov    %ecx,-0x90(%rbp)\n 105:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n 10c:\te8 00 00 00 00       \tcallq  111 <getopt_parse+0x31>\n 111:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 115:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n 11c:\te9 fc 00 00 00       \tjmpq   21d <getopt_parse+0x13d>\n 121:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 124:\t48 98                \tcltq   \n 126:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 12d:\t00 \n 12e:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n 135:\t48 01 d0             \tadd    %rdx,%rax\n 138:\t48 8b 00             \tmov    (%rax),%rax\n 13b:\t48 89 c7             \tmov    %rax,%rdi\n 13e:\te8 00 00 00 00       \tcallq  143 <getopt_parse+0x63>\n 143:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n 147:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 14b:\tbe 3d 00 00 00       \tmov    $0x3d,%esi\n 150:\t48 89 c7             \tmov    %rax,%rdi\n 153:\te8 00 00 00 00       \tcallq  158 <getopt_parse+0x78>\n 158:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n 15c:\t48 83 7d 98 00       \tcmpq   $0x0,-0x68(%rbp)\n 161:\t75 23                \tjne    186 <getopt_parse+0xa6>\n 163:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 167:\t48 89 c7             \tmov    %rax,%rdi\n 16a:\te8 00 00 00 00       \tcallq  16f <getopt_parse+0x8f>\n 16f:\t48 89 c2             \tmov    %rax,%rdx\n 172:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 176:\t48 89 d6             \tmov    %rdx,%rsi\n 179:\t48 89 c7             \tmov    %rax,%rdi\n 17c:\te8 00 00 00 00       \tcallq  181 <getopt_parse+0xa1>\n 181:\te9 93 00 00 00       \tjmpq   219 <getopt_parse+0x139>\n 186:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 18a:\t48 83 c0 01          \tadd    $0x1,%rax\n 18e:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n 192:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 196:\tc6 00 00             \tmovb   $0x0,(%rax)\n 199:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n 19d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1a1:\t48 89 d6             \tmov    %rdx,%rsi\n 1a4:\t48 89 c7             \tmov    %rax,%rdi\n 1a7:\te8 00 00 00 00       \tcallq  1ac <getopt_parse+0xcc>\n 1ac:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1b0:\t0f b6 00             \tmovzbl (%rax),%eax\n 1b3:\t3c 22                \tcmp    $0x22,%al\n 1b5:\t75 4f                \tjne    206 <getopt_parse+0x126>\n 1b7:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1bb:\t48 89 c7             \tmov    %rax,%rdi\n 1be:\te8 00 00 00 00       \tcallq  1c3 <getopt_parse+0xe3>\n 1c3:\t83 e8 01             \tsub    $0x1,%eax\n 1c6:\t89 45 8c             \tmov    %eax,-0x74(%rbp)\n 1c9:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n 1cc:\t48 63 d0             \tmovslq %eax,%rdx\n 1cf:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1d3:\t48 01 d0             \tadd    %rdx,%rax\n 1d6:\t0f b6 00             \tmovzbl (%rax),%eax\n 1d9:\t3c 22                \tcmp    $0x22,%al\n 1db:\t75 10                \tjne    1ed <getopt_parse+0x10d>\n 1dd:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n 1e0:\t48 63 d0             \tmovslq %eax,%rdx\n 1e3:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1e7:\t48 01 d0             \tadd    %rdx,%rax\n 1ea:\tc6 00 00             \tmovb   $0x0,(%rax)\n 1ed:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1f1:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 1f5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1f9:\t48 89 d6             \tmov    %rdx,%rsi\n 1fc:\t48 89 c7             \tmov    %rax,%rdi\n 1ff:\te8 00 00 00 00       \tcallq  204 <getopt_parse+0x124>\n 204:\teb 13                \tjmp    219 <getopt_parse+0x139>\n 206:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n 20a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 20e:\t48 89 d6             \tmov    %rdx,%rsi\n 211:\t48 89 c7             \tmov    %rax,%rdi\n 214:\te8 00 00 00 00       \tcallq  219 <getopt_parse+0x139>\n 219:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n 21d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 220:\t3b 85 74 ff ff ff    \tcmp    -0x8c(%rbp),%eax\n 226:\t0f 8c f5 fe ff ff    \tjl     121 <getopt_parse+0x41>\n 22c:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n 233:\te9 17 04 00 00       \tjmpq   64f <getopt_parse+0x56f>\n 238:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 23c:\t48 8b 00             \tmov    (%rax),%rax\n 23f:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 242:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 246:\t48 01 d0             \tadd    %rdx,%rax\n 249:\t48 8b 00             \tmov    (%rax),%rax\n 24c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 250:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 254:\tba 02 00 00 00       \tmov    $0x2,%edx\n 259:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 260 <getopt_parse+0x180>\n 260:\t48 89 c7             \tmov    %rax,%rdi\n 263:\te8 00 00 00 00       \tcallq  268 <getopt_parse+0x188>\n 268:\t85 c0                \ttest   %eax,%eax\n 26a:\t0f 85 97 01 00 00    \tjne    407 <getopt_parse+0x327>\n 270:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 274:\t48 83 c0 02          \tadd    $0x2,%rax\n 278:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 27c:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 283:\t48 8b 00             \tmov    (%rax),%rax\n 286:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 28a:\t48 89 d6             \tmov    %rdx,%rsi\n 28d:\t48 89 c7             \tmov    %rax,%rdi\n 290:\te8 00 00 00 00       \tcallq  295 <getopt_parse+0x1b5>\n 295:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 299:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n 29e:\t75 31                \tjne    2d1 <getopt_parse+0x1f1>\n 2a0:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 2a7:\t83 bd 70 ff ff ff 00 \tcmpl   $0x0,-0x90(%rbp)\n 2ae:\t74 18                \tje     2c8 <getopt_parse+0x1e8>\n 2b0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 2b4:\t48 89 c6             \tmov    %rax,%rsi\n 2b7:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2be <getopt_parse+0x1de>\n 2be:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2c3:\te8 00 00 00 00       \tcallq  2c8 <getopt_parse+0x1e8>\n 2c8:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n 2cc:\te9 7e 03 00 00       \tjmpq   64f <getopt_parse+0x56f>\n 2d1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 2d5:\t8b 40 20             \tmov    0x20(%rax),%eax\n 2d8:\t83 f8 01             \tcmp    $0x1,%eax\n 2db:\t0f 85 a4 00 00 00    \tjne    385 <getopt_parse+0x2a5>\n 2e1:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 2e4:\t8d 50 01             \tlea    0x1(%rax),%edx\n 2e7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2eb:\t8b 40 08             \tmov    0x8(%rax),%eax\n 2ee:\t39 c2                \tcmp    %eax,%edx\n 2f0:\t73 7b                \tjae    36d <getopt_parse+0x28d>\n 2f2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2f6:\t48 8b 00             \tmov    (%rax),%rax\n 2f9:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 2fc:\t83 c2 01             \tadd    $0x1,%edx\n 2ff:\t89 d2                \tmov    %edx,%edx\n 301:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 305:\t48 01 d0             \tadd    %rdx,%rax\n 308:\t48 8b 00             \tmov    (%rax),%rax\n 30b:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n 30f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 313:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 31a <getopt_parse+0x23a>\n 31a:\t48 89 c7             \tmov    %rax,%rdi\n 31d:\te8 00 00 00 00       \tcallq  322 <getopt_parse+0x242>\n 322:\t85 c0                \ttest   %eax,%eax\n 324:\t75 18                \tjne    33e <getopt_parse+0x25e>\n 326:\t83 45 f4 02          \taddl   $0x2,-0xc(%rbp)\n 32a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 32e:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 335 <getopt_parse+0x255>\n 335:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 339:\te9 11 03 00 00       \tjmpq   64f <getopt_parse+0x56f>\n 33e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 342:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 349 <getopt_parse+0x269>\n 349:\t48 89 c7             \tmov    %rax,%rdi\n 34c:\te8 00 00 00 00       \tcallq  351 <getopt_parse+0x271>\n 351:\t85 c0                \ttest   %eax,%eax\n 353:\t75 18                \tjne    36d <getopt_parse+0x28d>\n 355:\t83 45 f4 02          \taddl   $0x2,-0xc(%rbp)\n 359:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 35d:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 364 <getopt_parse+0x284>\n 364:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 368:\te9 e2 02 00 00       \tjmpq   64f <getopt_parse+0x56f>\n 36d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 371:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 378 <getopt_parse+0x298>\n 378:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 37c:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n 380:\te9 ca 02 00 00       \tjmpq   64f <getopt_parse+0x56f>\n 385:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 389:\t8b 40 20             \tmov    0x20(%rax),%eax\n 38c:\t83 f8 02             \tcmp    $0x2,%eax\n 38f:\t75 76                \tjne    407 <getopt_parse+0x327>\n 391:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 394:\t8d 50 01             \tlea    0x1(%rax),%edx\n 397:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 39b:\t8b 40 08             \tmov    0x8(%rax),%eax\n 39e:\t39 c2                \tcmp    %eax,%edx\n 3a0:\t73 3d                \tjae    3df <getopt_parse+0x2ff>\n 3a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3a6:\t48 8b 00             \tmov    (%rax),%rax\n 3a9:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 3ac:\t83 c2 01             \tadd    $0x1,%edx\n 3af:\t89 d2                \tmov    %edx,%edx\n 3b1:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 3b5:\t48 01 d0             \tadd    %rdx,%rax\n 3b8:\t48 8b 00             \tmov    (%rax),%rax\n 3bb:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 3bf:\t83 45 f4 02          \taddl   $0x2,-0xc(%rbp)\n 3c3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 3c7:\t48 89 c7             \tmov    %rax,%rdi\n 3ca:\te8 00 00 00 00       \tcallq  3cf <getopt_parse+0x2ef>\n 3cf:\t48 89 c2             \tmov    %rax,%rdx\n 3d2:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 3d6:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 3da:\te9 70 02 00 00       \tjmpq   64f <getopt_parse+0x56f>\n 3df:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 3e6:\t83 bd 70 ff ff ff 00 \tcmpl   $0x0,-0x90(%rbp)\n 3ed:\t74 18                \tje     407 <getopt_parse+0x327>\n 3ef:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3f3:\t48 89 c6             \tmov    %rax,%rsi\n 3f6:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 3fd <getopt_parse+0x31d>\n 3fd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 402:\te8 00 00 00 00       \tcallq  407 <getopt_parse+0x327>\n 407:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 40b:\t0f b6 10             \tmovzbl (%rax),%edx\n 40e:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 415 <getopt_parse+0x335>\n 415:\t0f b6 d2             \tmovzbl %dl,%edx\n 418:\t0f b6 c0             \tmovzbl %al,%eax\n 41b:\t29 c2                \tsub    %eax,%edx\n 41d:\t89 d0                \tmov    %edx,%eax\n 41f:\t85 c0                \ttest   %eax,%eax\n 421:\t0f 85 0a 02 00 00    \tjne    631 <getopt_parse+0x551>\n 427:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 42b:\tba 02 00 00 00       \tmov    $0x2,%edx\n 430:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 437 <getopt_parse+0x357>\n 437:\t48 89 c7             \tmov    %rax,%rdi\n 43a:\te8 00 00 00 00       \tcallq  43f <getopt_parse+0x35f>\n 43f:\t85 c0                \ttest   %eax,%eax\n 441:\t0f 84 ea 01 00 00    \tje     631 <getopt_parse+0x551>\n 447:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 44b:\t48 89 c7             \tmov    %rax,%rdi\n 44e:\te8 00 00 00 00       \tcallq  453 <getopt_parse+0x373>\n 453:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n 456:\tc7 45 f0 01 00 00 00 \tmovl   $0x1,-0x10(%rbp)\n 45d:\te9 bd 01 00 00       \tjmpq   61f <getopt_parse+0x53f>\n 462:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 465:\t48 63 d0             \tmovslq %eax,%rdx\n 468:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 46c:\t48 01 d0             \tadd    %rdx,%rax\n 46f:\t0f b6 00             \tmovzbl (%rax),%eax\n 472:\t88 45 8a             \tmov    %al,-0x76(%rbp)\n 475:\tc6 45 8b 00          \tmovb   $0x0,-0x75(%rbp)\n 479:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 480:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 484:\t48 8d 55 8a          \tlea    -0x76(%rbp),%rdx\n 488:\t48 89 d6             \tmov    %rdx,%rsi\n 48b:\t48 89 c7             \tmov    %rax,%rdi\n 48e:\te8 00 00 00 00       \tcallq  493 <getopt_parse+0x3b3>\n 493:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n 497:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n 49c:\t0f 85 95 00 00 00    \tjne    537 <getopt_parse+0x457>\n 4a2:\t83 7d f0 01          \tcmpl   $0x1,-0x10(%rbp)\n 4a6:\t75 50                \tjne    4f8 <getopt_parse+0x418>\n 4a8:\te8 00 00 00 00       \tcallq  4ad <getopt_parse+0x3cd>\n 4ad:\t48 8b 00             \tmov    (%rax),%rax\n 4b0:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 4b3:\t48 63 ca             \tmovslq %edx,%rcx\n 4b6:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 4ba:\t48 01 ca             \tadd    %rcx,%rdx\n 4bd:\t0f b6 12             \tmovzbl (%rdx),%edx\n 4c0:\t48 0f be d2          \tmovsbq %dl,%rdx\n 4c4:\t48 01 d2             \tadd    %rdx,%rdx\n 4c7:\t48 01 d0             \tadd    %rdx,%rax\n 4ca:\t0f b7 00             \tmovzwl (%rax),%eax\n 4cd:\t0f b7 c0             \tmovzwl %ax,%eax\n 4d0:\t25 00 08 00 00       \tand    $0x800,%eax\n 4d5:\t85 c0                \ttest   %eax,%eax\n 4d7:\t74 1f                \tje     4f8 <getopt_parse+0x418>\n 4d9:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 4e0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 4e4:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 4e8:\t48 89 d6             \tmov    %rdx,%rsi\n 4eb:\t48 89 c7             \tmov    %rax,%rdi\n 4ee:\te8 00 00 00 00       \tcallq  4f3 <getopt_parse+0x413>\n 4f3:\te9 33 01 00 00       \tjmpq   62b <getopt_parse+0x54b>\n 4f8:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 4ff:\t83 bd 70 ff ff ff 00 \tcmpl   $0x0,-0x90(%rbp)\n 506:\t74 26                \tje     52e <getopt_parse+0x44e>\n 508:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 50b:\t48 63 d0             \tmovslq %eax,%rdx\n 50e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 512:\t48 01 d0             \tadd    %rdx,%rax\n 515:\t0f b6 00             \tmovzbl (%rax),%eax\n 518:\t0f be c0             \tmovsbl %al,%eax\n 51b:\t89 c6                \tmov    %eax,%esi\n 51d:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 524 <getopt_parse+0x444>\n 524:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 529:\te8 00 00 00 00       \tcallq  52e <getopt_parse+0x44e>\n 52e:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n 532:\te9 e4 00 00 00       \tjmpq   61b <getopt_parse+0x53b>\n 537:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 53b:\t8b 40 20             \tmov    0x20(%rax),%eax\n 53e:\t83 f8 01             \tcmp    $0x1,%eax\n 541:\t75 14                \tjne    557 <getopt_parse+0x477>\n 543:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 547:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 54e <getopt_parse+0x46e>\n 54e:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 552:\te9 c4 00 00 00       \tjmpq   61b <getopt_parse+0x53b>\n 557:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 55b:\t8b 40 20             \tmov    0x20(%rax),%eax\n 55e:\t83 f8 02             \tcmp    $0x2,%eax\n 561:\t0f 85 b4 00 00 00    \tjne    61b <getopt_parse+0x53b>\n 567:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 56a:\t8d 50 01             \tlea    0x1(%rax),%edx\n 56d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 571:\t8b 40 08             \tmov    0x8(%rax),%eax\n 574:\t39 c2                \tcmp    %eax,%edx\n 576:\t73 6d                \tjae    5e5 <getopt_parse+0x505>\n 578:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 57c:\t48 8b 00             \tmov    (%rax),%rax\n 57f:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 582:\t83 c2 01             \tadd    $0x1,%edx\n 585:\t89 d2                \tmov    %edx,%edx\n 587:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 58b:\t48 01 d0             \tadd    %rdx,%rax\n 58e:\t48 8b 00             \tmov    (%rax),%rax\n 591:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n 595:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 599:\t0f b6 00             \tmovzbl (%rax),%eax\n 59c:\t3c 2d                \tcmp    $0x2d,%al\n 59e:\t75 28                \tjne    5c8 <getopt_parse+0x4e8>\n 5a0:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 5a7:\t83 bd 70 ff ff ff 00 \tcmpl   $0x0,-0x90(%rbp)\n 5ae:\t74 18                \tje     5c8 <getopt_parse+0x4e8>\n 5b0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 5b4:\t48 89 c6             \tmov    %rax,%rsi\n 5b7:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5be <getopt_parse+0x4de>\n 5be:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 5c3:\te8 00 00 00 00       \tcallq  5c8 <getopt_parse+0x4e8>\n 5c8:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n 5cc:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 5d0:\t48 89 c7             \tmov    %rax,%rdi\n 5d3:\te8 00 00 00 00       \tcallq  5d8 <getopt_parse+0x4f8>\n 5d8:\t48 89 c2             \tmov    %rax,%rdx\n 5db:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 5df:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 5e3:\teb 36                \tjmp    61b <getopt_parse+0x53b>\n 5e5:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 5ec:\t83 bd 70 ff ff ff 00 \tcmpl   $0x0,-0x90(%rbp)\n 5f3:\t74 26                \tje     61b <getopt_parse+0x53b>\n 5f5:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 5f8:\t48 63 d0             \tmovslq %eax,%rdx\n 5fb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 5ff:\t48 01 d0             \tadd    %rdx,%rax\n 602:\t0f b6 00             \tmovzbl (%rax),%eax\n 605:\t0f be c0             \tmovsbl %al,%eax\n 608:\t89 c6                \tmov    %eax,%esi\n 60a:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 611 <getopt_parse+0x531>\n 611:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 616:\te8 00 00 00 00       \tcallq  61b <getopt_parse+0x53b>\n 61b:\t83 45 f0 01          \taddl   $0x1,-0x10(%rbp)\n 61f:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 622:\t3b 45 bc             \tcmp    -0x44(%rbp),%eax\n 625:\t0f 8c 37 fe ff ff    \tjl     462 <getopt_parse+0x382>\n 62b:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n 62f:\teb 1e                \tjmp    64f <getopt_parse+0x56f>\n 631:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 638:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 63c:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 640:\t48 89 d6             \tmov    %rdx,%rsi\n 643:\t48 89 c7             \tmov    %rax,%rdi\n 646:\te8 00 00 00 00       \tcallq  64b <getopt_parse+0x56b>\n 64b:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n 64f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 653:\t8b 40 08             \tmov    0x8(%rax),%eax\n 656:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n 659:\t0f 82 d9 fb ff ff    \tjb     238 <getopt_parse+0x158>\n 65f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 662:\tc9                   \tleaveq \n 663:\tc3                   \tretq   ", "code_s": "__int64 __fastcall getopt_parse(_QWORD *a1, int a2, __int64 a3, int a4) {\n  char *v4;\n  char *v5;\n  char *v6;\n  char v10[Number];\n  int v11;\n  char *v12;\n  char *v13;\n  char *s;\n  char *v15;\n  __int64 v16;\n  int v17;\n  char *v18;\n  char *v19;\n  __int64 v20;\n  const char *v21;\n  char *s1;\n  __int64 v23;\n  int j;\n  unsigned int v25;\n  int i;\n  unsigned int v27;\n  v27 = Number;\n  v23 = g_ptr_array_new();\n  for (i = Number; i < a2; ++i) {\n    s = strdup(*(const char **)(Number L * i + a3));\n    v13 = strchr(s, Number);\n    if (v13) {\n      v12 = v13 + Number;\n      *v13 = Number;\n      g_ptr_array_add(v23, s);\n      if (*v12 == Number) {\n        v11 = strlen(v12) - Number;\n        if (v12[v11] == Number)\n          v12[v11] = Number;\n        g_ptr_array_add(v23, v12 + Number);\n      } else {\n        g_ptr_array_add(v23, v12);\n      }\n    } else {\n      v4 = strdup(s);\n      g_ptr_array_add(v23, v4);\n    }\n  }\n  v25 = Number;\n  while (v25 < *(_DWORD *)(v23 + Number)) {\n    s1 = *(char **)(Number L * v25 + *(_QWORD *)v23);\n    if (strncmp(s1, String, Number))\n      goto LABEL_29;\n    v21 = s1 + Number;\n    v20 = g_hash_table_lookup(*a1, s1 + Number);\n    if (v20) {\n      if (*(_DWORD *)(v20 + Number) == Number) {\n        if (v25 + Number >= *(_DWORD *)(v23 + Number))\n          goto LABEL_23;\n        v18 = *(char **)(Number L * (v25 + Number) + *(_QWORD *)v23);\n        if (!strcmp(v18, String)) {\n          v25 += Number;\n          *(_QWORD *)(v20 + Number) = String;\n        } else if (!strcmp(v18, String)) {\n          v25 += Number;\n          *(_QWORD *)(v20 + Number) = String;\n        } else {\n        LABEL_23:\n          *(_QWORD *)(v20 + Number) = String;\n          ++v25;\n        }\n      } else if (*(_DWORD *)(v20 + Number) == Number) {\n        if (v25 + Number >= *(_DWORD *)(v23 + Number)) {\n          v27 = Number;\n          if (a4)\n            printf(String, v21);\n          goto LABEL_29;\n        }\n        v19 = *(char **)(Number L * (v25 + Number) + *(_QWORD *)v23);\n        v25 += Number;\n        v5 = strdup(v19);\n        *(_QWORD *)(v20 + Number) = v5;\n      } else {\n      LABEL_29:\n        if (*s1 != Number || !strncmp(s1, String, Number)) {\n          g_ptr_array_add(a1[Number], s1);\n          ++v25;\n        } else {\n          v17 = strlen(s1);\n          for (j = Number; j < v17; ++j) {\n            v10[Number] = s1[j];\n            v10[Number] = Number;\n            v16 = g_hash_table_lookup(a1[Number], v10);\n            if (v16) {\n              if (*(_DWORD *)(v16 + Number) == Number) {\n                *(_QWORD *)(v16 + Number) = String;\n              } else if (*(_DWORD *)(v16 + Number) == Number) {\n                if (v25 + Number >= *(_DWORD *)(v23 + Number)) {\n                  v27 = Number;\n                  if (a4)\n                    printf(String, (unsigned int)s1[j]);\n                } else {\n                  v15 = *(char **)(Number L * (v25 + Number) + *(_QWORD *)v23);\n                  if (*v15 == Number) {\n                    v27 = Number;\n                    if (a4)\n                      printf(String, s1);\n                  }\n                  ++v25;\n                  v6 = strdup(v15);\n                  *(_QWORD *)(v16 + Number) = v6;\n                }\n              }\n            } else {\n              if (j == Number &&\n                  ((*_ctype_b_loc())[s1[Number]] & Number) != Number) {\n                g_ptr_array_add(a1[Number], s1);\n                break;\n              }\n              v27 = Number;\n              if (a4)\n                printf(String, (unsigned int)s1[j]);\n              ++v25;\n            }\n          }\n          ++v25;\n        }\n      }\n    } else {\n      v27 = Number;\n      if (a4)\n        printf(String, v21);\n      ++v25;\n    }\n  }\n  return v27;\n}", "code_t": "int __cdecl getopt_parse(getopt_t *<span class=\"supfact\">gopt</span>,\n                         int <span class=\"supfact\">argc</span>, char **<span class=\"supfact\">argv</span>,\n                         int <span class=\"supfact\">showErrors</span>) {\n  char *v4;\n  char *v5;\n  char *v6;\n  char <span class=\"supfact\">sopt</span>[Number];\n  int <span class=\"supfact\">last</span>;\n  char *<span class=\"supfact\">val</span>;\n  char *<span class=\"supfact\">eq</span>;\n  char *<span class=\"supfact\">arg</span>;\n  char *<span class=\"supfact\">val_2</span>;\n  getopt_option_t *<span class=\"supfact\">goo_0</span>;\n  int <span class=\"supfact\">len</span>;\n  char *<span class=\"supfact\">val_0</span>;\n  char *<span class=\"supfact\">val_1</span>;\n  getopt_option_t *<span class=\"supfact\">goo</span>;\n  char *<span class=\"supfact\">optname</span>;\n  char *<span class=\"supfact\">tok</span>;\n  GPtrArray *<span class=\"supfact\">toks</span>;\n  int <span class=\"supfact\">pos</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">i_0</span>;\n  int <span class=\"supfact\">okay</span>;\n  <span class=\"supfact\">okay</span> = Number;\n  <span class=\"supfact\">toks</span> = (GPtrArray *)g_ptr_array_new();\n  for (<span class=\"supfact\">i_0</span> = Number; <span class=\"supfact\">i_0</span> < <span class=\"supfact\">argc</span>;\n       ++<span class=\"supfact\">i_0</span>) {\n    <span class=\"supfact\">arg</span> = strdup(<span class=\"supfact\">argv</span>[<span class=\"supfact\">i_0</span>]);\n    <span class=\"supfact\">eq</span> = strchr(<span class=\"supfact\">arg</span>, Number);\n    if (<span class=\"supfact\">eq</span>) {\n      <span class=\"supfact\">val</span> = <span class=\"supfact\">eq</span> + Number;\n      *<span class=\"supfact\">eq</span> = Number;\n      g_ptr_array_add(<span class=\"supfact\">toks</span>, <span class=\"supfact\">arg</span>);\n      if (*<span class=\"supfact\">val</span> == Number) {\n        <span class=\"supfact\">last</span> = strlen(<span class=\"supfact\">val</span>) - Number;\n        if (<span class=\"supfact\">val</span>[<span class=\"supfact\">last</span>] == Number)\n          <span class=\"supfact\">val</span>[<span class=\"supfact\">last</span>] = Number;\n        g_ptr_array_add(<span class=\"supfact\">toks</span>, <span class=\"supfact\">val</span> + Number);\n      } else {\n        g_ptr_array_add(<span class=\"supfact\">toks</span>, <span class=\"supfact\">val</span>);\n      }\n    } else {\n      v4 = strdup(<span class=\"supfact\">arg</span>);\n      g_ptr_array_add(<span class=\"supfact\">toks</span>, v4);\n    }\n  }\n  <span class=\"supfact\">i</span> = Number;\n  while (<span class=\"supfact\">i</span> < <span class=\"supfact\">toks</span>-><span class=\"supfact\">len</span>) {\n    <span class=\"supfact\">tok</span> =\n        (char *)<span class=\"supfact\">toks</span>->pdata[<span class=\"supfact\">i</span>];\n    if (strncmp(<span class=\"supfact\">tok</span>, String, Number))\n      goto LABEL_29;\n    <span class=\"supfact\">optname</span> = <span class=\"supfact\">tok</span> + Number;\n    <span class=\"supfact\">goo</span> = (getopt_option_t *)g_hash_table_lookup(\n        <span class=\"supfact\">gopt</span>->lopts, <span class=\"supfact\">tok</span> + Number);\n    if (<span class=\"supfact\">goo</span>) {\n      if (<span class=\"supfact\">goo</span>->type == Number) {\n        if (<span class=\"supfact\">i</span> + Number >=\n            <span class=\"supfact\">toks</span>-><span class=\"supfact\">len</span>)\n          goto LABEL_23;\n        <span class=\"supfact\">val_0</span> =\n            (char *)<span class=\"supfact\">toks</span>->pdata[<span class=\"supfact\">i</span> + Number];\n        if (!strcmp(<span class=\"supfact\">val_0</span>, String)) {\n          <span class=\"supfact\">i</span> += Number;\n          <span class=\"supfact\">goo</span>->svalue = String;\n        } else if (!strcmp(<span class=\"supfact\">val_0</span>, String)) {\n          <span class=\"supfact\">i</span> += Number;\n          <span class=\"supfact\">goo</span>->svalue = String;\n        } else {\n        LABEL_23:\n          <span class=\"supfact\">goo</span>->svalue = String;\n          ++<span class=\"supfact\">i</span>;\n        }\n      } else if (<span class=\"supfact\">goo</span>->type == Number) {\n        if (<span class=\"supfact\">i</span> + Number >=\n            <span class=\"supfact\">toks</span>-><span class=\"supfact\">len</span>) {\n          <span class=\"supfact\">okay</span> = Number;\n          if (<span class=\"supfact\">showErrors</span>)\n            printf(String, <span class=\"supfact\">optname</span>);\n          goto LABEL_29;\n        }\n        <span class=\"supfact\">val_1</span> =\n            (char *)<span class=\"supfact\">toks</span>->pdata[<span class=\"supfact\">i</span> + Number];\n        <span class=\"supfact\">i</span> += Number;\n        v5 = strdup(<span class=\"supfact\">val_1</span>);\n        <span class=\"supfact\">goo</span>->svalue = v5;\n      } else {\n      LABEL_29:\n        if (*<span class=\"supfact\">tok</span> != Number ||\n            !strncmp(<span class=\"supfact\">tok</span>, String, Number)) {\n          g_ptr_array_add(<span class=\"supfact\">gopt</span>->extraargs, <span class=\"supfact\">tok</span>);\n          ++<span class=\"supfact\">i</span>;\n        } else {\n          <span class=\"supfact\">len</span> = strlen(<span class=\"supfact\">tok</span>);\n          for (<span class=\"supfact\">pos</span> = Number;\n               <span class=\"supfact\">pos</span> < <span class=\"supfact\">len</span>;\n               ++<span class=\"supfact\">pos</span>) {\n            <span class=\"supfact\">sopt</span>[Number] =\n                <span class=\"supfact\">tok</span>[<span class=\"supfact\">pos</span>];\n            <span class=\"supfact\">sopt</span>[Number] = Number;\n            <span class=\"supfact\">goo_0</span> = (getopt_option_t *)g_hash_table_lookup(\n                <span class=\"supfact\">gopt</span>->sopts, <span class=\"supfact\">sopt</span>);\n            if (<span class=\"supfact\">goo_0</span>) {\n              if (<span class=\"supfact\">goo_0</span>->type == Number) {\n                <span class=\"supfact\">goo_0</span>->svalue = String;\n              } else if (<span class=\"supfact\">goo_0</span>->type == Number) {\n                if (<span class=\"supfact\">i</span> + Number >=\n                    <span class=\"supfact\">toks</span>-><span class=\"supfact\">len</span>) {\n                  <span class=\"supfact\">okay</span> = Number;\n                  if (<span class=\"supfact\">showErrors</span>)\n                    printf(\n                        String,\n                        (unsigned int)<span class=\"supfact\">tok</span>[<span class=\"supfact\">pos</span>]);\n                } else {\n                  <span class=\"supfact\">val_2</span> =\n                      (char *)<span class=\"supfact\">toks</span>\n                          ->pdata[<span class=\"supfact\">i</span> + Number];\n                  if (*<span class=\"supfact\">val_2</span> == Number) {\n                    <span class=\"supfact\">okay</span> = Number;\n                    if (<span class=\"supfact\">showErrors</span>)\n                      printf(String, <span class=\"supfact\">tok</span>);\n                  }\n                  ++<span class=\"supfact\">i</span>;\n                  v6 = strdup(<span class=\"supfact\">val_2</span>);\n                  <span class=\"supfact\">goo_0</span>->svalue = v6;\n                }\n              }\n            } else {\n              if (<span class=\"supfact\">pos</span> == Number &&\n                  ((*_ctype_b_loc())[<span class=\"supfact\">tok</span>[Number]] & Number) !=\n                      Number) {\n                g_ptr_array_add(<span class=\"supfact\">gopt</span>->extraargs,\n                                <span class=\"supfact\">tok</span>);\n                break;\n              }\n              <span class=\"supfact\">okay</span> = Number;\n              if (<span class=\"supfact\">showErrors</span>)\n                printf(String,\n                       (unsigned int)<span class=\"supfact\">tok</span>[<span class=\"supfact\">pos</span>]);\n              ++<span class=\"supfact\">i</span>;\n            }\n          }\n          ++<span class=\"supfact\">i</span>;\n        }\n      }\n    } else {\n      <span class=\"supfact\">okay</span> = Number;\n      if (<span class=\"supfact\">showErrors</span>)\n        printf(String, <span class=\"supfact\">optname</span>);\n      ++<span class=\"supfact\">i</span>;\n    }\n  }\n  return <span class=\"supfact\">okay</span>;\n}", "var": [{"name": "a1", "type": "_garray *", "pred_name": "x", "ref_name": "gopt", "ref_type": "getopt_t *"}, {"name": "a2", "type": "int", "pred_name": "argc", "ref_name": "argc", "ref_type": "int"}, {"name": "a3", "type": "char * *", "pred_name": "argv", "ref_name": "argv", "ref_type": "char * *"}, {"name": "a4", "type": "int", "pred_name": "style", "ref_name": "showErrors", "ref_type": "int"}, {"name": "v10", "type": "char[2]", "pred_name": "glyph", "ref_name": "sopt", "ref_type": "char[2]"}, {"name": "v11", "type": "int", "pred_name": "i", "ref_name": "last", "ref_type": "int"}, {"name": "v12", "type": "char *", "pred_name": "q", "ref_name": "val", "ref_type": "char *"}, {"name": "v13", "type": "char *", "pred_name": "p", "ref_name": "eq", "ref_type": "char *"}, {"name": "s", "type": "const char *", "pred_name": "text", "ref_name": "arg", "ref_type": "char *"}, {"name": "v15", "type": "char *", "pred_name": "c", "ref_name": "val_2", "ref_type": "char *"}, {"name": "v16", "type": "char *", "pred_name": "b", "ref_name": "goo_0", "ref_type": "getopt_option_t *"}, {"name": "v17", "type": "int", "pred_name": "l", "ref_name": "len", "ref_type": "int"}, {"name": "v18", "type": "char *", "pred_name": "g", "ref_name": "val_0", "ref_type": "char *"}, {"name": "v19", "type": "char *", "pred_name": "r", "ref_name": "val_1", "ref_type": "char *"}, {"name": "v20", "type": "char *", "pred_name": "c", "ref_name": "goo", "ref_type": "getopt_option_t *"}, {"name": "v21", "type": "char *", "pred_name": "q", "ref_name": "optname", "ref_type": "char *"}, {"name": "s1", "type": "char *", "pred_name": "t", "ref_name": "tok", "ref_type": "char *"}, {"name": "v23", "type": "char *", "pred_name": "s", "ref_name": "toks", "ref_type": "GPtrArray *"}, {"name": "j", "type": "int", "pred_name": "j", "ref_name": "pos", "ref_type": "int"}, {"name": "v25", "type": "int", "pred_name": "index", "ref_name": "i", "ref_type": "unsigned int"}, {"name": "i", "type": "int", "pred_name": "i_0", "ref_name": "i_0", "ref_type": "int"}, {"name": "v27", "type": "int", "pred_name": "i", "ref_name": "okay", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/c40a1826b64f737d8771ec16864d0c0c42e37831fcf2eade0af2a581657d9317", "path_in_repo": "XanClic/qemu//hw/display/macfb.o", "objdump": "0000000000000292 <macfb_draw_line4>:\n     292:\t55                   \tpush   %rbp\n     293:\t48 89 e5             \tmov    %rsp,%rbp\n     296:\t48 83 ec 28          \tsub    $0x28,%rsp\n     29a:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     29e:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     2a2:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n     2a5:\t89 4d d8             \tmov    %ecx,-0x28(%rbp)\n     2a8:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n     2af:\te9 b9 00 00 00       \tjmpq   36d <macfb_draw_line4+0xdb>\n     2b4:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     2b7:\t83 e0 01             \tand    $0x1,%eax\n     2ba:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     2bd:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n     2c0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     2c4:\t89 d6                \tmov    %edx,%esi\n     2c6:\t48 89 c7             \tmov    %rax,%rdi\n     2c9:\te8 f9 fd ff ff       \tcallq  c7 <macfb_read_byte>\n     2ce:\t0f b6 d0             \tmovzbl %al,%edx\n     2d1:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     2d6:\t2b 45 f8             \tsub    -0x8(%rbp),%eax\n     2d9:\tc1 e0 02             \tshl    $0x2,%eax\n     2dc:\t89 c1                \tmov    %eax,%ecx\n     2de:\td3 fa                \tsar    %cl,%edx\n     2e0:\t89 d0                \tmov    %edx,%eax\n     2e2:\t83 e0 0f             \tand    $0xf,%eax\n     2e5:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     2e8:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     2eb:\t89 d0                \tmov    %edx,%eax\n     2ed:\t01 c0                \tadd    %eax,%eax\n     2ef:\t01 d0                \tadd    %edx,%eax\n     2f1:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     2f5:\t48 98                \tcltq   \n     2f7:\t0f b6 84 02 f8 01 00 \tmovzbl 0x1f8(%rdx,%rax,1),%eax\n     2fe:\t00 \n     2ff:\t88 45 f1             \tmov    %al,-0xf(%rbp)\n     302:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     305:\t89 d0                \tmov    %edx,%eax\n     307:\t01 c0                \tadd    %eax,%eax\n     309:\t01 d0                \tadd    %edx,%eax\n     30b:\t83 c0 01             \tadd    $0x1,%eax\n     30e:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     312:\t48 98                \tcltq   \n     314:\t0f b6 84 02 f8 01 00 \tmovzbl 0x1f8(%rdx,%rax,1),%eax\n     31b:\t00 \n     31c:\t88 45 f2             \tmov    %al,-0xe(%rbp)\n     31f:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     322:\t89 d0                \tmov    %edx,%eax\n     324:\t01 c0                \tadd    %eax,%eax\n     326:\t01 d0                \tadd    %edx,%eax\n     328:\t83 c0 02             \tadd    $0x2,%eax\n     32b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     32f:\t48 98                \tcltq   \n     331:\t0f b6 84 02 f8 01 00 \tmovzbl 0x1f8(%rdx,%rax,1),%eax\n     338:\t00 \n     339:\t88 45 f3             \tmov    %al,-0xd(%rbp)\n     33c:\t83 7d f8 01          \tcmpl   $0x1,-0x8(%rbp)\n     340:\t0f 94 c0             \tsete   %al\n     343:\t0f b6 c0             \tmovzbl %al,%eax\n     346:\t01 45 dc             \tadd    %eax,-0x24(%rbp)\n     349:\t0f b6 55 f3          \tmovzbl -0xd(%rbp),%edx\n     34d:\t0f b6 4d f2          \tmovzbl -0xe(%rbp),%ecx\n     351:\t0f b6 45 f1          \tmovzbl -0xf(%rbp),%eax\n     355:\t89 ce                \tmov    %ecx,%esi\n     357:\t89 c7                \tmov    %eax,%edi\n     359:\te8 47 fd ff ff       \tcallq  a5 <rgb_to_pixel32>\n     35e:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     362:\t89 02                \tmov    %eax,(%rdx)\n     364:\t48 83 45 e0 04       \taddq   $0x4,-0x20(%rbp)\n     369:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n     36d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     370:\t3b 45 d8             \tcmp    -0x28(%rbp),%eax\n     373:\t0f 8c 3b ff ff ff    \tjl     2b4 <macfb_draw_line4+0x22>\n     379:\t90                   \tnop\n     37a:\t90                   \tnop\n     37b:\tc9                   \tleaveq \n     37c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall macfb_draw_line4(__int64 a1, _DWORD *a2, unsigned int a3,\n                                    int a4) {\n  __int64 result;\n  unsigned int i;\n  int v9;\n  int v10;\n  for (i = Number;; ++i) {\n    result = i;\n    if ((int)i >= a4)\n      break;\n    v9 = i & Number;\n    v10 = ((int)(unsigned __int8)macfb_read_byte(a1, a3) >>\n           (Number * (Number - v9))) &\n          Number;\n    a3 += v9 == Number;\n    *a2++ = rgb_to_pixel32(\n        *(unsigned __int8 *)(a1 + Number * v10 + Number),\n        *(unsigned __int8 *)(a1 + Number * v10 + Number + Number),\n        *(unsigned __int8 *)(a1 + Number * v10 + Number + Number));\n  }\n  return result;\n}", "code_t": "void __cdecl macfb_draw_line4(MacfbState_0 *<span class=\"supfact\">s</span>,\n                              uint8_t *<span class=\"supfact\">d</span>,\n                              uint32_t <span class=\"supfact\">addr</span>,\n                              int <span class=\"supfact\">width</span>) {\n  int <span class=\"supfact\">x</span>;\n  int <span class=\"supfact\">bit</span>;\n  int <span class=\"supfact\">idx</span>;\n  for (<span class=\"supfact\">x</span> = Number; <span class=\"supfact\">x</span> < <span class=\"supfact\">width</span>;\n       ++<span class=\"supfact\">x</span>) {\n    <span class=\"supfact\">bit</span> = <span class=\"supfact\">x</span> & Number;\n    <span class=\"supfact\">idx</span> =\n        ((int)macfb_read_byte(<span class=\"supfact\">s</span>, <span class=\"supfact\">addr</span>) >>\n         (Number * (Number - <span class=\"supfact\">bit</span>))) &\n        Number;\n    <span class=\"supfact\">addr</span> += <span class=\"supfact\">bit</span> == Number;\n    *(_DWORD *)<span class=\"supfact\">d</span> = rgb_to_pixel32(\n        <span class=\"supfact\">s</span>->color_palette[Number * <span class=\"supfact\">idx</span>],\n        <span class=\"supfact\">s</span>->color_palette[Number * <span class=\"supfact\">idx</span> + Number],\n        <span class=\"supfact\">s</span>\n            ->color_palette[Number * <span class=\"supfact\">idx</span> + Number]);\n    <span class=\"supfact\">d</span> += Number;\n  }\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "opaque", "ref_name": "s", "ref_type": "MacfbState_0 *"}, {"name": "a2", "type": "uint8_t *", "pred_name": "dest", "ref_name": "d", "ref_type": "uint8_t *"}, {"name": "a3", "type": "int", "pred_name": "width", "ref_name": "addr", "ref_type": "uint32_t"}, {"name": "a4", "type": "int", "pred_name": "deststep", "ref_name": "width", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "i", "type": "unsigned int", "pred_name": "b", "ref_name": "x", "ref_type": "int"}, {"name": "v9", "type": "unsigned int", "pred_name": "g", "ref_name": "bit", "ref_type": "int"}, {"name": "v10", "type": "unsigned int", "pred_name": "r", "ref_name": "idx", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "sethsong90", "repo_name": "vendor_qcom", "path": "sethsong90/vendor_qcom/a4d7c94aaaec6b263c95272e942ad4ab7151b69c37c1ba2961d2f35221f58a9c", "path_in_repo": "sethsong90/vendor_qcom/llvm-rs/lib/CodeGen/SelectionDAG/Release+Asserts/LegalizeIntegerTypes.o", "objdump": "00000000000150d0 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE>:\n   150d0:\t41 57                \tpush   %r15\n   150d2:\t41 56                \tpush   %r14\n   150d4:\t41 55                \tpush   %r13\n   150d6:\t41 54                \tpush   %r12\n   150d8:\t55                   \tpush   %rbp\n   150d9:\t53                   \tpush   %rbx\n   150da:\t48 83 ec 38          \tsub    $0x38,%rsp\n   150de:\t66 83 7e 3a 00       \tcmpw   $0x0,0x3a(%rsi)\n   150e3:\t48 8b 46 28          \tmov    0x28(%rsi),%rax\n   150e7:\t0f 84 0a 02 00 00    \tje     152f7 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x227>\n   150ed:\t48 8b 57 08          \tmov    0x8(%rdi),%rdx\n   150f1:\t8b 08                \tmov    (%rax),%ecx\n   150f3:\t48 89 f3             \tmov    %rsi,%rbx\n   150f6:\t4c 8d 6c 24 10       \tlea    0x10(%rsp),%r13\n   150fb:\t48 8b 37             \tmov    (%rdi),%rsi\n   150fe:\t4c 8b 40 08          \tmov    0x8(%rax),%r8\n   15102:\t49 89 fc             \tmov    %rdi,%r12\n   15105:\t4c 89 ef             \tmov    %r13,%rdi\n   15108:\t48 8b 52 20          \tmov    0x20(%rdx),%rdx\n   1510c:\te8 00 00 00 00       \tcallq  15111 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x41>\n   15111:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n   15115:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n   1511a:\t89 44 24 10          \tmov    %eax,0x10(%rsp)\n   1511e:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n   15123:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n   15128:\t7f 2e                \tjg     15158 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x88>\n   1512a:\t8d 50 f3             \tlea    -0xd(%rax),%edx\n   1512d:\t83 fa 15             \tcmp    $0x15,%edx\n   15130:\t0f 87 c6 01 00 00    \tja     152fc <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x22c>\n   15136:\t83 e8 0d             \tsub    $0xd,%eax\n   15139:\t83 f8 15             \tcmp    $0x15,%eax\n   1513c:\t0f 87 00 00 00 00    \tja     15142 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x72>\n   15142:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 15149 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x79>\n   15149:\t48 63 04 82          \tmovslq (%rdx,%rax,4),%rax\n   1514d:\t48 01 d0             \tadd    %rdx,%rax\n   15150:\tff e0                \tjmpq   *%rax\n   15152:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n   15158:\t4c 89 ef             \tmov    %r13,%rdi\n   1515b:\te8 00 00 00 00       \tcallq  15160 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x90>\n   15160:\t84 c0                \ttest   %al,%al\n   15162:\t0f 84 94 01 00 00    \tje     152fc <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x22c>\n   15168:\t8b 44 24 10          \tmov    0x10(%rsp),%eax\n   1516c:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n   15171:\t0f 8e 50 01 00 00    \tjle    152c7 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x1f7>\n   15177:\t4c 89 ef             \tmov    %r13,%rdi\n   1517a:\te8 00 00 00 00       \tcallq  1517f <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0xaf>\n   1517f:\t84 c0                \ttest   %al,%al\n   15181:\t0f 84 4c 01 00 00    \tje     152d3 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x203>\n   15187:\t8b 44 24 10          \tmov    0x10(%rsp),%eax\n   1518b:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n   15190:\t7e a4                \tjle    15136 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x66>\n   15192:\t4c 89 ef             \tmov    %r13,%rdi\n   15195:\te8 00 00 00 00       \tcallq  1519a <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0xca>\n   1519a:\t89 c1                \tmov    %eax,%ecx\n   1519c:\t49 89 d5             \tmov    %rdx,%r13\n   1519f:\t48 89 cd             \tmov    %rcx,%rbp\n   151a2:\t48 b8 00 00 00 00 ff \tmovabs $0xffffffff00000000,%rax\n   151a9:\tff ff ff \n   151ac:\t48 21 c5             \tand    %rax,%rbp\n   151af:\t48 8b 43 20          \tmov    0x20(%rbx),%rax\n   151b3:\t48 09 e9             \tor     %rbp,%rcx\n   151b6:\t66 83 7b 38 00       \tcmpw   $0x0,0x38(%rbx)\n   151bb:\t48 8b 6b 3c          \tmov    0x3c(%rbx),%rbp\n   151bf:\t0f 84 2d 01 00 00    \tje     152f2 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x222>\n   151c5:\t48 8b 30             \tmov    (%rax),%rsi\n   151c8:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n   151cc:\t4c 89 e7             \tmov    %r12,%rdi\n   151cf:\t48 89 4c 24 08       \tmov    %rcx,0x8(%rsp)\n   151d4:\te8 00 00 00 00       \tcallq  151d9 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x109>\n   151d9:\t66 83 7b 38 01       \tcmpw   $0x1,0x38(%rbx)\n   151de:\t49 8b 7c 24 08       \tmov    0x8(%r12),%rdi\n   151e3:\t49 89 c6             \tmov    %rax,%r14\n   151e6:\t49 89 d7             \tmov    %rdx,%r15\n   151e9:\t48 8b 43 20          \tmov    0x20(%rbx),%rax\n   151ed:\t0f 86 ff 00 00 00    \tjbe    152f2 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x222>\n   151f3:\tff 70 30             \tpushq  0x30(%rax)\n   151f6:\t4d 89 e8             \tmov    %r13,%r8\n   151f9:\tbe 6e 00 00 00       \tmov    $0x6e,%esi\n   151fe:\t48 89 ea             \tmov    %rbp,%rdx\n   15201:\tff 70 28             \tpushq  0x28(%rax)\n   15204:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n   15209:\te8 00 00 00 00       \tcallq  1520e <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x13e>\n   1520e:\t66 83 7b 38 02       \tcmpw   $0x2,0x38(%rbx)\n   15213:\t5e                   \tpop    %rsi\n   15214:\t49 8b 7c 24 08       \tmov    0x8(%r12),%rdi\n   15219:\t48 8b 4b 20          \tmov    0x20(%rbx),%rcx\n   1521d:\t41 58                \tpop    %r8\n   1521f:\t0f 86 cd 00 00 00    \tjbe    152f2 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x222>\n   15225:\tff 71 58             \tpushq  0x58(%rcx)\n   15228:\tbe 4e 00 00 00       \tmov    $0x4e,%esi\n   1522d:\tff 71 50             \tpushq  0x50(%rcx)\n   15230:\t52                   \tpush   %rdx\n   15231:\t48 89 ea             \tmov    %rbp,%rdx\n   15234:\t50                   \tpush   %rax\n   15235:\t41 57                \tpush   %r15\n   15237:\t41 56                \tpush   %r14\n   15239:\t8b 4c 24 40          \tmov    0x40(%rsp),%ecx\n   1523d:\t4c 8b 44 24 48       \tmov    0x48(%rsp),%r8\n   15242:\te8 00 00 00 00       \tcallq  15247 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x177>\n   15247:\t48 83 c4 68          \tadd    $0x68,%rsp\n   1524b:\t5b                   \tpop    %rbx\n   1524c:\t5d                   \tpop    %rbp\n   1524d:\t41 5c                \tpop    %r12\n   1524f:\t41 5d                \tpop    %r13\n   15251:\t41 5e                \tpop    %r14\n   15253:\t41 5f                \tpop    %r15\n   15255:\tc3                   \tretq   \n   15256:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n   1525d:\t00 00 00 \n   15260:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n   15265:\t45 31 ed             \txor    %r13d,%r13d\n   15268:\te9 35 ff ff ff       \tjmpq   151a2 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0xd2>\n   1526d:\t0f 1f 00             \tnopl   (%rax)\n   15270:\tb9 05 00 00 00       \tmov    $0x5,%ecx\n   15275:\teb ee                \tjmp    15265 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x195>\n   15277:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n   1527e:\t00 00 \n   15280:\tb9 03 00 00 00       \tmov    $0x3,%ecx\n   15285:\teb de                \tjmp    15265 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x195>\n   15287:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n   1528e:\t00 00 \n   15290:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n   15295:\teb ce                \tjmp    15265 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x195>\n   15297:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n   1529e:\t00 00 \n   152a0:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   152a5:\teb be                \tjmp    15265 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x195>\n   152a7:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n   152ae:\t00 00 \n   152b0:\tb9 09 00 00 00       \tmov    $0x9,%ecx\n   152b5:\teb ae                \tjmp    15265 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x195>\n   152b7:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n   152be:\t00 00 \n   152c0:\tb9 07 00 00 00       \tmov    $0x7,%ecx\n   152c5:\teb 9e                \tjmp    15265 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x195>\n   152c7:\t8d 50 f3             \tlea    -0xd(%rax),%edx\n   152ca:\t83 fa 15             \tcmp    $0x15,%edx\n   152cd:\t0f 86 63 fe ff ff    \tjbe    15136 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x66>\n   152d3:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 152da <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x20a>\n   152da:\tba 45 02 00 00       \tmov    $0x245,%edx\n   152df:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 152e6 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x216>\n   152e6:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 152ed <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x21d>\n   152ed:\te8 00 00 00 00       \tcallq  152f2 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x222>\n   152f2:\te8 09 ad fe ff       \tcallq  0 <_ZNK4llvm6SDNode10getOperandEj.isra.0.part.0>\n   152f7:\te8 34 ad fe ff       \tcallq  30 <_ZNK4llvm6SDNode12getValueTypeEj.isra.0.part.0>\n   152fc:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 15303 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x233>\n   15303:\tba a1 0b 00 00       \tmov    $0xba1,%edx\n   15308:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1530f <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x23f>\n   1530f:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 15316 <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x246>\n   15316:\te8 00 00 00 00       \tcallq  1531b <_ZN4llvm16DAGTypeLegalizer31PromoteIntRes_INSERT_VECTOR_ELTEPNS_6SDNodeE+0x24b>\n   1531b:\t90                   \tnop\n   1531c:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "__int64 __fastcall llvm DAGTypeLegalizer PromoteIntRes_INSERT_VECTOR_ELT(\n    llvm DAGTypeLegalizer *this, llvm SDNode *a2, __int64 a3, __int64 a4) {\n  __int64 v4;\n  unsigned int *v5;\n  __int64 v6;\n  __int64 v8;\n  int *v10;\n  int v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  _QWORD *v15;\n  unsigned __int64 v16;\n  __int64 v17;\n  __int64 v19;\n  unsigned __int64 v20;\n  int v21;\n  __int64 v22;\n  __int64 v23;\n  v5 = (unsigned int *)*((_QWORD *)a2 + Number);\n  if (!*((_WORD *)a2 + Number))\n    llvm SDNode getValueType(this, a2, a3, a4);\n  v6 = *((_QWORD *)this + Number);\n  v8 = *(_QWORD *)this;\n  v10 = &v21;\n  llvm TargetLowering getTypeConversion(&v21, v8, *(_QWORD *)(v6 + Number), *v5,\n                                        *((_QWORD *)v5 + Number));\n  v11 = v22;\n  v21 = v22;\n  v22 = v23;\n  if (v21 <= Number) {\n    if ((unsigned int)(v11 - Number) <= Number)\n      goto LABEL_4;\n  LABEL_26:\n    _assert_fail(String, String, Number, String);\n  }\n  v10 = &v21;\n  if (!(unsigned __int8)llvm EVT isExtendedVector((llvm EVT *)&v21))\n    goto LABEL_26;\n  v11 = v21;\n  if (v21 <= Number) {\n    if ((unsigned int)(v21 - Number) <= Number)\n      goto LABEL_4;\n  LABEL_23:\n    _assert_fail(String, String, Number, String);\n  }\n  v10 = &v21;\n  if (!(unsigned __int8)llvm EVT isExtendedVector((llvm EVT *)&v21))\n    goto LABEL_23;\n  v11 = v21;\n  if (v21 > Number) {\n    v10 = &v21;\n    v12 = (unsigned int)llvm EVT getExtendedVectorElementType((llvm EVT *)&v21);\n    v14 = v13;\n    v4 = v12;\n    goto LABEL_10;\n  }\nLABEL_4:\n  switch (v11) {\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  default:\n    JUMPOUT(Number);\n  }\n  v14 = Number L;\nLABEL_10:\n  v15 = (_QWORD *)*((_QWORD *)a2 + Number);\n  v16 = v4 & Number | v12;\n  v17 = *(_QWORD *)((char *)a2 + Number);\n  if (!*((_WORD *)a2 + Number))\n    goto LABEL_24;\n  v8 = *v15;\n  v20 = v16;\n  llvm DAGTypeLegalizer GetPromotedInteger(this, *v15);\n  v10 = (int *)*((_QWORD *)this + Number);\n  if (*((_WORD *)a2 + Number) <= Number ||\n      (v19 = *(_QWORD *)(*((_QWORD *)a2 + Number) + Number L),\n       llvm SelectionDAG getNode(v10, Number L, v17, v20, v14), v8 = v19,\n       v10 = (int *)*((_QWORD *)this + Number),\n       *((_WORD *)a2 + Number) <= Number)) {\n  LABEL_24:\n    llvm SDNode getOperand(v10, v8);\n  }\n  return llvm SelectionDAG getNode(v10, Number L, v17, (unsigned int)v21, v22);\n}", "code_t": "__int64 __fastcall llvm DAGTypeLegalizer PromoteIntRes_INSERT_VECTOR_ELT(\n    llvm DAGTypeLegalizer *<span class=\"supfact\">this</span>,\n    llvm SDNode *<span class=\"supfact\">a2</span>, __int64 <span class=\"supfact\">a3</span>,\n    __int64 <span class=\"supfact\">a4</span>) {\n  __int64 v4;\n  unsigned int *v5;\n  __int64 v6;\n  __int64 v8;\n  int *v10;\n  int v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 <span class=\"supfact\">v14</span>;\n  _QWORD *v15;\n  unsigned __int64 v16;\n  __int64 v17;\n  __int64 <span class=\"supfact\">v19</span>;\n  unsigned __int64 <span class=\"supfact\">v20</span>;\n  int <span class=\"supfact\">v21</span>;\n  __int64 <span class=\"supfact\">v22</span>;\n  __int64 <span class=\"supfact\">v23</span>;\n  v5 = (unsigned int *)*((_QWORD *)<span class=\"supfact\">a2</span> + Number);\n  if (!*((_WORD *)<span class=\"supfact\">a2</span> + Number))\n    llvm SDNode getValueType(<span class=\"supfact\">this</span>, <span class=\"supfact\">a2</span>,\n                             <span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>);\n  v6 = *((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  v8 = *(_QWORD *)<span class=\"supfact\">this</span>;\n  v10 = &<span class=\"supfact\">v21</span>;\n  llvm TargetLowering getTypeConversion(&<span class=\"supfact\">v21</span>, v8,\n                                        *(_QWORD *)(v6 + Number), *v5,\n                                        *((_QWORD *)v5 + Number));\n  v11 = <span class=\"supfact\">v22</span>;\n  <span class=\"supfact\">v21</span> = <span class=\"supfact\">v22</span>;\n  <span class=\"supfact\">v22</span> = <span class=\"supfact\">v23</span>;\n  if (<span class=\"supfact\">v21</span> <= Number) {\n    if ((unsigned int)(v11 - Number) <= Number)\n      goto LABEL_4;\n  LABEL_26:\n    _assert_fail(String, String, Number, String);\n  }\n  v10 = &<span class=\"supfact\">v21</span>;\n  if (!(unsigned __int8)llvm EVT isExtendedVector(\n          (llvm EVT *)&<span class=\"supfact\">v21</span>))\n    goto LABEL_26;\n  v11 = <span class=\"supfact\">v21</span>;\n  if (<span class=\"supfact\">v21</span> <= Number) {\n    if ((unsigned int)(<span class=\"supfact\">v21</span> - Number) <= Number)\n      goto LABEL_4;\n  LABEL_23:\n    _assert_fail(String, String, Number, String);\n  }\n  v10 = &<span class=\"supfact\">v21</span>;\n  if (!(unsigned __int8)llvm EVT isExtendedVector(\n          (llvm EVT *)&<span class=\"supfact\">v21</span>))\n    goto LABEL_23;\n  v11 = <span class=\"supfact\">v21</span>;\n  if (<span class=\"supfact\">v21</span> > Number) {\n    v10 = &<span class=\"supfact\">v21</span>;\n    v12 = (unsigned int)llvm EVT getExtendedVectorElementType(\n        (llvm EVT *)&<span class=\"supfact\">v21</span>);\n    <span class=\"supfact\">v14</span> = v13;\n    v4 = v12;\n    goto LABEL_10;\n  }\nLABEL_4:\n  switch (v11) {\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  case Number:\n  case Number:\n    v12 = Number L;\n    break;\n  default:\n    JUMPOUT(Number);\n  }\n  <span class=\"supfact\">v14</span> = Number L;\nLABEL_10:\n  v15 = (_QWORD *)*((_QWORD *)<span class=\"supfact\">a2</span> + Number);\n  v16 = v4 & Number | v12;\n  v17 = *(_QWORD *)((char *)<span class=\"supfact\">a2</span> + Number);\n  if (!*((_WORD *)<span class=\"supfact\">a2</span> + Number))\n    goto LABEL_24;\n  v8 = *v15;\n  <span class=\"supfact\">v20</span> = v16;\n  llvm DAGTypeLegalizer GetPromotedInteger(<span class=\"supfact\">this</span>, *v15);\n  v10 = (int *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  if (*((_WORD *)<span class=\"supfact\">a2</span> + Number) <= Number ||\n      (<span class=\"supfact\">v19</span> =\n           *(_QWORD *)(*((_QWORD *)<span class=\"supfact\">a2</span> + Number) + Number L),\n       llvm SelectionDAG getNode(v10, Number L, v17, <span class=\"supfact\">v20</span>,\n                                 <span class=\"supfact\">v14</span>),\n       v8 = <span class=\"supfact\">v19</span>,\n       v10 = (int *)*((_QWORD *)<span class=\"supfact\">this</span> + Number),\n       *((_WORD *)<span class=\"supfact\">a2</span> + Number) <= Number)) {\n  LABEL_24:\n    llvm SDNode getOperand(v10, v8);\n  }\n  return llvm SelectionDAG getNode(v10, Number L, v17,\n                                   (unsigned int)<span class=\"supfact\">v21</span>,\n                                   <span class=\"supfact\">v22</span>);\n}", "var": [{"name": "this", "type": "llvm::EVT *", "pred_name": "this", "ref_name": "this", "ref_type": "llvm::DAGTypeLegalizer *"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "llvm::SDNode *"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "__int64"}, {"name": "a4", "type": "__int64", "pred_name": "a4", "ref_name": "a4", "ref_type": "__int64"}, {"name": "v14", "type": "__int64", "pred_name": "v14", "ref_name": "v14", "ref_type": "__int64"}, {"name": "v19", "type": "__int64", "pred_name": "v19", "ref_name": "v19", "ref_type": "__int64"}, {"name": "v20", "type": "__int64", "pred_name": "v20", "ref_name": "v20", "ref_type": "unsigned __int64"}, {"name": "v21", "type": "unsigned int", "pred_name": "v21", "ref_name": "v21", "ref_type": "int"}, {"name": "v22", "type": "__int64", "pred_name": "v22", "ref_name": "v22", "ref_type": "__int64"}, {"name": "v23", "type": "__int64", "pred_name": "v23", "ref_name": "v23", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "rockchip-toybrick", "repo_name": "external-wpa_supplicant_8", "path": "rockchip-toybrick/external-wpa_supplicant_8/6c2672fab34303e61c1d7e93a0407c1791fe28b43ea8f5250feccdda94afd81e", "path_in_repo": "rockchip-toybrick/external-wpa_supplicant_8/hostapd/hostapd", "objdump": "0000000000450092 <hostapd_ctrl_iface_dup_param>:\n  450092:\t55                   \tpush   %rbp\n  450093:\t48 89 e5             \tmov    %rsp,%rbp\n  450096:\t48 83 ec 30          \tsub    $0x30,%rsp\n  45009a:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  45009e:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  4500a2:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  4500a6:\tbf 00 01 00 00       \tmov    $0x100,%edi\n  4500ab:\te8 35 89 fe ff       \tcallq  4389e5 <os_zalloc>\n  4500b0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4500b4:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4500b9:\t75 20                \tjne    4500db <hostapd_ctrl_iface_dup_param+0x49>\n  4500bb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4500bf:\t48 89 c2             \tmov    %rax,%rdx\n  4500c2:\tbe b0 d6 46 00       \tmov    $0x46d6b0,%esi\n  4500c7:\tbf 05 00 00 00       \tmov    $0x5,%edi\n  4500cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4500d1:\te8 8c 65 fe ff       \tcallq  436662 <wpa_printf>\n  4500d6:\te9 83 02 00 00       \tjmpq   45035e <hostapd_ctrl_iface_dup_param+0x2cc>\n  4500db:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4500df:\tbe dc d6 46 00       \tmov    $0x46d6dc,%esi\n  4500e4:\t48 89 c7             \tmov    %rax,%rdi\n  4500e7:\te8 e4 46 fb ff       \tcallq  4047d0 <strcmp@plt>\n  4500ec:\t85 c0                \ttest   %eax,%eax\n  4500ee:\t75 30                \tjne    450120 <hostapd_ctrl_iface_dup_param+0x8e>\n  4500f0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4500f4:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4500f8:\t8b 90 54 02 00 00    \tmov    0x254(%rax),%edx\n  4500fe:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  450102:\t89 d1                \tmov    %edx,%ecx\n  450104:\tba 05 d0 46 00       \tmov    $0x46d005,%edx\n  450109:\tbe 00 01 00 00       \tmov    $0x100,%esi\n  45010e:\t48 89 c7             \tmov    %rax,%rdi\n  450111:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  450116:\te8 f5 3f fb ff       \tcallq  404110 <snprintf@plt>\n  45011b:\te9 ef 01 00 00       \tjmpq   45030f <hostapd_ctrl_iface_dup_param+0x27d>\n  450120:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  450124:\tbe e0 d6 46 00       \tmov    $0x46d6e0,%esi\n  450129:\t48 89 c7             \tmov    %rax,%rdi\n  45012c:\te8 9f 46 fb ff       \tcallq  4047d0 <strcmp@plt>\n  450131:\t85 c0                \ttest   %eax,%eax\n  450133:\t75 49                \tjne    45017e <hostapd_ctrl_iface_dup_param+0xec>\n  450135:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  450139:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  45013d:\t8b 80 58 02 00 00    \tmov    0x258(%rax),%eax\n  450143:\t85 c0                \ttest   %eax,%eax\n  450145:\t74 37                \tje     45017e <hostapd_ctrl_iface_dup_param+0xec>\n  450147:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  45014b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  45014f:\tba 00 01 00 00       \tmov    $0x100,%edx\n  450154:\t48 89 ce             \tmov    %rcx,%rsi\n  450157:\t48 89 c7             \tmov    %rax,%rdi\n  45015a:\te8 c1 ce ff ff       \tcallq  44d020 <hostapd_ctrl_iface_get_key_mgmt>\n  45015f:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  450162:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  450165:\t89 c6                \tmov    %eax,%esi\n  450167:\tbf 00 01 00 00       \tmov    $0x100,%edi\n  45016c:\te8 46 cb ff ff       \tcallq  44ccb7 <os_snprintf_error>\n  450171:\t85 c0                \ttest   %eax,%eax\n  450173:\t0f 84 96 01 00 00    \tje     45030f <hostapd_ctrl_iface_dup_param+0x27d>\n  450179:\te9 c5 01 00 00       \tjmpq   450343 <hostapd_ctrl_iface_dup_param+0x2b1>\n  45017e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  450182:\tbe ed d6 46 00       \tmov    $0x46d6ed,%esi\n  450187:\t48 89 c7             \tmov    %rax,%rdi\n  45018a:\te8 41 46 fb ff       \tcallq  4047d0 <strcmp@plt>\n  45018f:\t85 c0                \ttest   %eax,%eax\n  450191:\t75 4e                \tjne    4501e1 <hostapd_ctrl_iface_dup_param+0x14f>\n  450193:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  450197:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  45019b:\t8b 80 60 02 00 00    \tmov    0x260(%rax),%eax\n  4501a1:\t85 c0                \ttest   %eax,%eax\n  4501a3:\t74 3c                \tje     4501e1 <hostapd_ctrl_iface_dup_param+0x14f>\n  4501a5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4501a9:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4501ad:\t8b 90 60 02 00 00    \tmov    0x260(%rax),%edx\n  4501b3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4501b7:\t48 8d b0 00 01 00 00 \tlea    0x100(%rax),%rsi\n  4501be:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4501c2:\tb9 f7 cd 46 00       \tmov    $0x46cdf7,%ecx\n  4501c7:\t48 89 c7             \tmov    %rax,%rdi\n  4501ca:\te8 58 d6 fe ff       \tcallq  43d827 <wpa_write_ciphers>\n  4501cf:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4501d2:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  4501d6:\t0f 89 33 01 00 00    \tjns    45030f <hostapd_ctrl_iface_dup_param+0x27d>\n  4501dc:\te9 62 01 00 00       \tjmpq   450343 <hostapd_ctrl_iface_dup_param+0x2b1>\n  4501e1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4501e5:\tbe fa d6 46 00       \tmov    $0x46d6fa,%esi\n  4501ea:\t48 89 c7             \tmov    %rax,%rdi\n  4501ed:\te8 de 45 fb ff       \tcallq  4047d0 <strcmp@plt>\n  4501f2:\t85 c0                \ttest   %eax,%eax\n  4501f4:\t75 4e                \tjne    450244 <hostapd_ctrl_iface_dup_param+0x1b2>\n  4501f6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4501fa:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4501fe:\t8b 80 80 02 00 00    \tmov    0x280(%rax),%eax\n  450204:\t85 c0                \ttest   %eax,%eax\n  450206:\t74 3c                \tje     450244 <hostapd_ctrl_iface_dup_param+0x1b2>\n  450208:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  45020c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  450210:\t8b 90 80 02 00 00    \tmov    0x280(%rax),%edx\n  450216:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  45021a:\t48 8d b0 00 01 00 00 \tlea    0x100(%rax),%rsi\n  450221:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  450225:\tb9 f7 cd 46 00       \tmov    $0x46cdf7,%ecx\n  45022a:\t48 89 c7             \tmov    %rax,%rdi\n  45022d:\te8 f5 d5 fe ff       \tcallq  43d827 <wpa_write_ciphers>\n  450232:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  450235:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  450239:\t0f 89 d0 00 00 00    \tjns    45030f <hostapd_ctrl_iface_dup_param+0x27d>\n  45023f:\te9 ff 00 00 00       \tjmpq   450343 <hostapd_ctrl_iface_dup_param+0x2b1>\n  450244:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  450248:\tbe 07 d7 46 00       \tmov    $0x46d707,%esi\n  45024d:\t48 89 c7             \tmov    %rax,%rdi\n  450250:\te8 7b 45 fb ff       \tcallq  4047d0 <strcmp@plt>\n  450255:\t85 c0                \ttest   %eax,%eax\n  450257:\t75 43                \tjne    45029c <hostapd_ctrl_iface_dup_param+0x20a>\n  450259:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  45025d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  450261:\t48 8b 80 50 01 00 00 \tmov    0x150(%rax),%rax\n  450268:\t48 85 c0             \ttest   %rax,%rax\n  45026b:\t74 2f                \tje     45029c <hostapd_ctrl_iface_dup_param+0x20a>\n  45026d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  450271:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  450275:\t48 8b 90 50 01 00 00 \tmov    0x150(%rax),%rdx\n  45027c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  450280:\t48 89 d1             \tmov    %rdx,%rcx\n  450283:\tba 6b ce 46 00       \tmov    $0x46ce6b,%edx\n  450288:\tbe 00 01 00 00       \tmov    $0x100,%esi\n  45028d:\t48 89 c7             \tmov    %rax,%rdi\n  450290:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  450295:\te8 76 3e fb ff       \tcallq  404110 <snprintf@plt>\n  45029a:\teb 73                \tjmp    45030f <hostapd_ctrl_iface_dup_param+0x27d>\n  45029c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4502a0:\tbe 16 d7 46 00       \tmov    $0x46d716,%esi\n  4502a5:\t48 89 c7             \tmov    %rax,%rdi\n  4502a8:\te8 23 45 fb ff       \tcallq  4047d0 <strcmp@plt>\n  4502ad:\t85 c0                \ttest   %eax,%eax\n  4502af:\t75 41                \tjne    4502f2 <hostapd_ctrl_iface_dup_param+0x260>\n  4502b1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4502b5:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4502b9:\t0f b6 80 30 01 00 00 \tmovzbl 0x130(%rax),%eax\n  4502c0:\t83 e0 08             \tand    $0x8,%eax\n  4502c3:\t84 c0                \ttest   %al,%al\n  4502c5:\t74 2b                \tje     4502f2 <hostapd_ctrl_iface_dup_param+0x260>\n  4502c7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4502cb:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4502cf:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n  4502d6:\t48 8d 50 0c          \tlea    0xc(%rax),%rdx\n  4502da:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4502de:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n  4502e3:\tbe 00 01 00 00       \tmov    $0x100,%esi\n  4502e8:\t48 89 c7             \tmov    %rax,%rdi\n  4502eb:\te8 cf 4b fe ff       \tcallq  434ebf <wpa_snprintf_hex>\n  4502f0:\teb 1d                \tjmp    45030f <hostapd_ctrl_iface_dup_param+0x27d>\n  4502f2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4502f6:\t48 89 c2             \tmov    %rax,%rdx\n  4502f9:\tbe 1e d7 46 00       \tmov    $0x46d71e,%esi\n  4502fe:\tbf 04 00 00 00       \tmov    $0x4,%edi\n  450303:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  450308:\te8 55 63 fe ff       \tcallq  436662 <wpa_printf>\n  45030d:\teb 4f                \tjmp    45035e <hostapd_ctrl_iface_dup_param+0x2cc>\n  45030f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  450313:\t48 8b 70 10          \tmov    0x10(%rax),%rsi\n  450317:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  45031b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  45031f:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  450323:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  450327:\t48 89 c7             \tmov    %rax,%rdi\n  45032a:\te8 de bb fb ff       \tcallq  40bf0d <hostapd_set_iface>\n  45032f:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  450332:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  450336:\t48 89 c7             \tmov    %rax,%rdi\n  450339:\te8 12 41 fb ff       \tcallq  404450 <free@plt>\n  45033e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  450341:\teb 2c                \tjmp    45036f <hostapd_ctrl_iface_dup_param+0x2dd>\n  450343:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  450347:\t48 89 c2             \tmov    %rax,%rdx\n  45034a:\tbe 3b d7 46 00       \tmov    $0x46d73b,%esi\n  45034f:\tbf 05 00 00 00       \tmov    $0x5,%edi\n  450354:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  450359:\te8 04 63 fe ff       \tcallq  436662 <wpa_printf>\n  45035e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  450362:\t48 89 c7             \tmov    %rax,%rdi\n  450365:\te8 e6 40 fb ff       \tcallq  404450 <free@plt>\n  45036a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  45036f:\tc9                   \tleaveq \n  450370:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hostapd_ctrl_iface_dup_param(__int64 a1, __int64 a2,\n                                                const char *a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  int v14;\n  unsigned int v15;\n  char *s;\n  s = (char *)os_zalloc(Number);\n  if (s) {\n    if (!strcmp(a3, String)) {\n      snprintf(s, Number, String,\n               *(unsigned int *)(*(_QWORD *)(a1 + Number) + Number L));\n      goto LABEL_24;\n    }\n    if (!strcmp(a3, String) &&\n        *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L)) {\n      v14 = hostapd_ctrl_iface_get_key_mgmt(a1, s, Number);\n      if (!os_snprintf_error_7(Number, v14))\n        goto LABEL_24;\n    } else if (!strcmp(a3, String) &&\n               *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L)) {\n      if ((int)wpa_write_ciphers(\n              s, (__int64)(s + Number),\n              *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L),\n              String) >= Number)\n        goto LABEL_24;\n    } else {\n      if (strcmp(a3, String) ||\n          !*(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L)) {\n        if (!strcmp(a3, String) &&\n            *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L)) {\n          snprintf(s, Number, String,\n                   *(const char **)(*(_QWORD *)(a1 + Number) + Number L));\n        } else {\n          if (strcmp(a3, String) ||\n              (*(_BYTE *)(*(_QWORD *)(a1 + Number) + Number L) & Number) ==\n                  Number) {\n            wpa_printf(Number, String, (__int64)a3, v9, v10, v11);\n            goto LABEL_26;\n          }\n          wpa_snprintf_hex(s, Number L,\n                           *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L) +\n                               Number L,\n                           Number);\n        }\n      LABEL_24:\n        v15 = hostapd_set_iface(*(_QWORD **)(a2 + Number),\n                                *(_QWORD *)(a2 + Number), (__int64)a3,\n                                (__int64)s);\n        free(s);\n        return v15;\n      }\n      if ((int)wpa_write_ciphers(\n              s, (__int64)(s + Number),\n              *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L),\n              String) >= Number)\n        goto LABEL_24;\n    }\n    wpa_printf(Number, String, (__int64)a3, v6, v7, v8);\n    goto LABEL_26;\n  }\n  wpa_printf(Number, String, (__int64)a3, v3, v4, v5);\nLABEL_26:\n  free(s);\n  return Number;\n}", "code_t": "int __cdecl hostapd_ctrl_iface_dup_param(hostapd_data *<span class=\"supfact\">src_hapd</span>,\n                                         hostapd_data *<span class=\"supfact\">dst_hapd</span>,\n                                         const char *<span class=\"supfact\">param</span>) {\n  int res;\n  int resa;\n  char *<span class=\"supfact\">value</span>;\n  <span class=\"supfact\">value</span> = (char *)os_zalloc(Number);\n  if (<span class=\"supfact\">value</span>) {\n    if (!strcmp(<span class=\"supfact\">param</span>, String)) {\n      snprintf(<span class=\"supfact\">value</span>, Number, String,\n               (unsigned int)<span class=\"supfact\">src_hapd</span>->conf->wpa);\n      goto LABEL_24;\n    }\n    if (!strcmp(<span class=\"supfact\">param</span>, String) &&\n        <span class=\"supfact\">src_hapd</span>->conf->wpa_key_mgmt) {\n      res = hostapd_ctrl_iface_get_key_mgmt(<span class=\"supfact\">src_hapd</span>,\n                                            <span class=\"supfact\">value</span>, Number);\n      if (!os_snprintf_error_7(Number, res))\n        goto LABEL_24;\n    } else if (!strcmp(<span class=\"supfact\">param</span>, String) &&\n               <span class=\"supfact\">src_hapd</span>->conf->wpa_pairwise) {\n      if (wpa_write_ciphers(\n              <span class=\"supfact\">value</span>, <span class=\"supfact\">value</span> + Number,\n              <span class=\"supfact\">src_hapd</span>->conf->wpa_pairwise, String) >= Number)\n        goto LABEL_24;\n    } else {\n      if (strcmp(<span class=\"supfact\">param</span>, String) ||\n          !<span class=\"supfact\">src_hapd</span>->conf->rsn_pairwise) {\n        if (!strcmp(<span class=\"supfact\">param</span>, String) &&\n            <span class=\"supfact\">src_hapd</span>->conf->ssid.wpa_passphrase) {\n          snprintf(<span class=\"supfact\">value</span>, Number, String,\n                   <span class=\"supfact\">src_hapd</span>->conf->ssid.wpa_passphrase);\n        } else {\n          if (strcmp(<span class=\"supfact\">param</span>, String) ||\n              (*((_BYTE *)&<span class=\"supfact\">src_hapd</span>->conf->ssid + Number) &\n               Number) == Number) {\n            wpa_printf(Number, String, <span class=\"supfact\">param</span>);\n            goto error_return;\n          }\n          wpa_snprintf_hex(<span class=\"supfact\">value</span>, Number,\n                           <span class=\"supfact\">src_hapd</span>->conf->ssid.wpa_psk->psk,\n                           Number);\n        }\n      LABEL_24:\n        resa = hostapd_set_iface(<span class=\"supfact\">dst_hapd</span>->iconf,\n                                 <span class=\"supfact\">dst_hapd</span>->conf,\n                                 <span class=\"supfact\">param</span>, <span class=\"supfact\">value</span>);\n        free(<span class=\"supfact\">value</span>);\n        return resa;\n      }\n      if (wpa_write_ciphers(\n              <span class=\"supfact\">value</span>, <span class=\"supfact\">value</span> + Number,\n              <span class=\"supfact\">src_hapd</span>->conf->rsn_pairwise, String) >= Number)\n        goto LABEL_24;\n    }\n    wpa_printf(Number, String, <span class=\"supfact\">param</span>);\n    goto error_return;\n  }\n  wpa_printf(Number, String, <span class=\"supfact\">param</span>);\nerror_return:\n  free(<span class=\"supfact\">value</span>);\n  return Number;\n}", "var": [{"name": "a1", "type": "hostapd_data *", "pred_name": "hapd", "ref_name": "src_hapd", "ref_type": "hostapd_data *"}, {"name": "a2", "type": "sockaddr_un *", "pred_name": "from", "ref_name": "dst_hapd", "ref_type": "hostapd_data *"}, {"name": "a3", "type": "char *", "pred_name": "fromlen", "ref_name": "param", "ref_type": "const char *"}, {"name": "s", "type": "char *", "pred_name": "buf", "ref_name": "value", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "shujunqiao", "repo_name": "FEX", "path": "shujunqiao/FEX/ec61745f5ae8f0dcd1380ce5de3ac3b1482a4d6fc1b93ce22c7584ef8f0ccdde", "path_in_repo": "shujunqiao/FEX/libs/cocos2dx/proj.linux/obj/release/actions/CCActionCatmullRom.o", "objdump": "0000000000000420 <_ZN7cocos2d12CCPointArray5countEv>:\n     420:\t48 8b 57 18          \tmov    0x18(%rdi),%rdx\n     424:\t48 8b 42 08          \tmov    0x8(%rdx),%rax\n     428:\t48 2b 02             \tsub    (%rdx),%rax\n     42b:\t48 c1 f8 03          \tsar    $0x3,%rax\n     42f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cocos2d CCPointArray count(cocos2d CCPointArray *this) {\n  return (__int64)(*(_QWORD *)(*((_QWORD *)this + Number) + Number L) -\n                   **((_QWORD **)this + Number)) >>\n         Number;\n}", "code_t": "__int64 __fastcall cocos2d CCPointArray\ncount(cocos2d CCPointArray *<span class=\"supfact\">this</span>) {\n  return (__int64)(*(_QWORD *)(*((_QWORD *)<span class=\"supfact\">this</span> + Number) +\n                               Number L) -\n                   **((_QWORD **)<span class=\"supfact\">this</span> + Number)) >>\n         Number;\n}", "var": [{"name": "this", "type": "cocos2d::CCPoint *", "pred_name": "this", "ref_name": "this", "ref_type": "cocos2d::CCPointArray *"}], "body_in_train": false}, {"repo_owner": "Aaron0927", "repo_name": "xen-4.2.1", "path": "Aaron0927/xen-4.2.1/78c0af8108f6d8ee5f412a05090b2432bd63de1b0a4f244958a8ae52a51e3e69", "path_in_repo": "Aaron0927/xen-4.2.1/tools/qemu-xen/block.o", "objdump": "000000000000341d <bdrv_truncate>:\n    341d:\t55                   \tpush   %rbp\n    341e:\t48 89 e5             \tmov    %rsp,%rbp\n    3421:\t48 83 ec 30          \tsub    $0x30,%rsp\n    3425:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    3429:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    342d:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    3434:\t00 00 \n    3436:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    343a:\t31 c0                \txor    %eax,%eax\n    343c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3440:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    3444:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    3448:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    344d:\t75 0a                \tjne    3459 <bdrv_truncate+0x3c>\n    344f:\tb8 85 ff ff ff       \tmov    $0xffffff85,%eax\n    3454:\te9 90 00 00 00       \tjmpq   34e9 <bdrv_truncate+0xcc>\n    3459:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    345d:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    3464:\t48 85 c0             \ttest   %rax,%rax\n    3467:\t75 07                \tjne    3470 <bdrv_truncate+0x53>\n    3469:\tb8 a1 ff ff ff       \tmov    $0xffffffa1,%eax\n    346e:\teb 79                \tjmp    34e9 <bdrv_truncate+0xcc>\n    3470:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3474:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3477:\t85 c0                \ttest   %eax,%eax\n    3479:\t74 07                \tje     3482 <bdrv_truncate+0x65>\n    347b:\tb8 f3 ff ff ff       \tmov    $0xfffffff3,%eax\n    3480:\teb 67                \tjmp    34e9 <bdrv_truncate+0xcc>\n    3482:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3486:\t48 89 c7             \tmov    %rax,%rdi\n    3489:\te8 00 00 00 00       \tcallq  348e <bdrv_truncate+0x71>\n    348e:\t85 c0                \ttest   %eax,%eax\n    3490:\t74 07                \tje     3499 <bdrv_truncate+0x7c>\n    3492:\tb8 f0 ff ff ff       \tmov    $0xfffffff0,%eax\n    3497:\teb 50                \tjmp    34e9 <bdrv_truncate+0xcc>\n    3499:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    349d:\t48 8b 88 d0 00 00 00 \tmov    0xd0(%rax),%rcx\n    34a4:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    34a8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    34ac:\t48 89 d6             \tmov    %rdx,%rsi\n    34af:\t48 89 c7             \tmov    %rax,%rdi\n    34b2:\tff d1                \tcallq  *%rcx\n    34b4:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    34b7:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    34bb:\t75 29                \tjne    34e6 <bdrv_truncate+0xc9>\n    34bd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    34c1:\t48 c1 f8 09          \tsar    $0x9,%rax\n    34c5:\t48 89 c2             \tmov    %rax,%rdx\n    34c8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    34cc:\t48 89 d6             \tmov    %rdx,%rsi\n    34cf:\t48 89 c7             \tmov    %rax,%rdi\n    34d2:\te8 7d da ff ff       \tcallq  f54 <refresh_total_sectors>\n    34d7:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    34da:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    34de:\t48 89 c7             \tmov    %rax,%rdi\n    34e1:\te8 64 eb ff ff       \tcallq  204a <bdrv_dev_resize_cb>\n    34e6:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    34e9:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    34ed:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    34f4:\t00 00 \n    34f6:\t74 05                \tje     34fd <bdrv_truncate+0xe0>\n    34f8:\te8 00 00 00 00       \tcallq  34fd <bdrv_truncate+0xe0>\n    34fd:\tc9                   \tleaveq \n    34fe:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bdrv_truncate(__int64 a1, __int64 a2) {\n  unsigned int v3;\n  __int64 v4;\n  v4 = *(_QWORD *)(a1 + Number);\n  if (!v4)\n    return Number L;\n  if (!*(_QWORD *)(v4 + Number))\n    return Number L;\n  if (*(_DWORD *)(a1 + Number))\n    return Number L;\n  if ((unsigned int)bdrv_in_use(a1))\n    return Number L;\n  v3 = (*(__int64(__fastcall **)(__int64, __int64))(v4 + Number))(a1, a2);\n  if (!v3) {\n    v3 = refresh_total_sectors(a1, a2 >> Number);\n    bdrv_dev_resize_cb(a1);\n  }\n  return v3;\n}", "code_t": "int __cdecl bdrv_truncate(BlockDriverState_0 *<span class=\"supfact\">bs</span>,\n                          int64_t <span class=\"supfact\">offset</span>) {\n  int <span class=\"supfact\">ret</span>;\n  BlockDriver_0 *<span class=\"supfact\">drv</span>;\n  <span class=\"supfact\">drv</span> = <span class=\"supfact\">bs</span>-><span class=\"supfact\">drv</span>;\n  if (!<span class=\"supfact\">drv</span>)\n    return Number;\n  if (!<span class=\"supfact\">drv</span>->bdrv_truncate)\n    return Number;\n  if (<span class=\"supfact\">bs</span>->read_only)\n    return Number;\n  if (bdrv_in_use(<span class=\"supfact\">bs</span>))\n    return Number;\n  <span class=\"supfact\">ret</span> = <span class=\"supfact\">drv</span>->bdrv_truncate(\n      <span class=\"supfact\">bs</span>, <span class=\"supfact\">offset</span>);\n  if (!<span class=\"supfact\">ret</span>) {\n    <span class=\"supfact\">ret</span> = refresh_total_sectors(\n        <span class=\"supfact\">bs</span>, <span class=\"supfact\">offset</span> >> Number);\n    bdrv_dev_resize_cb(<span class=\"supfact\">bs</span>);\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "BlockDriverState_0 *", "pred_name": "bs", "ref_name": "bs", "ref_type": "BlockDriverState_0 *"}, {"name": "a2", "type": "int64_t", "pred_name": "offset", "ref_name": "offset", "ref_type": "int64_t"}, {"name": "v3", "type": "int", "pred_name": "ret", "ref_name": "ret", "ref_type": "int"}, {"name": "v4", "type": "BlockDriver_0 *", "pred_name": "drv", "ref_name": "drv", "ref_type": "BlockDriver_0 *"}], "body_in_train": false}, {"repo_owner": "smarabbit", "repo_name": "jscapel", "path": "smarabbit/jscapel/bdc5ec43b2cb281af4bf9ebf9a015acd15259f9e1c507427d74f454581937e3a", "path_in_repo": "smarabbit/jscapel/decaf/roms/ipxe/src/util/zbin", "objdump": "00000000004026b8 <bbPutByte>:\n  4026b8:\t55                   \tpush   %rbp\n  4026b9:\t48 89 e5             \tmov    %rsp,%rbp\n  4026bc:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  4026c0:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n  4026c3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4026c7:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n  4026cb:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n  4026cf:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  4026d3:\t48 89 4a 60          \tmov    %rcx,0x60(%rdx)\n  4026d7:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  4026da:\t88 10                \tmov    %dl,(%rax)\n  4026dc:\t90                   \tnop\n  4026dd:\t5d                   \tpop    %rbp\n  4026de:\tc3                   \tretq   ", "code_s": "_BYTE *__fastcall bbPutByte(__int64 a1, char a2) {\n  _BYTE *result;\n  result = *(_BYTE **)(a1 + Number);\n  *(_QWORD *)(a1 + Number) = result + Number;\n  *result = a2;\n  return result;\n}", "code_t": "void __cdecl bbPutByte(ucl_compress *<span class=\"supfact\">c</span>,\n                       unsigned int <span class=\"supfact\">b</span>) {\n  unsigned __int8 *<span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = <span class=\"supfact\">c</span>->bb_op;\n  <span class=\"supfact\">c</span>->bb_op = <span class=\"supfact\">v2</span> + Number;\n  *<span class=\"supfact\">v2</span> = <span class=\"supfact\">b</span>;\n}", "var": [{"name": "a1", "type": "BACNET_ADDRESS *", "pred_name": "src", "ref_name": "c", "ref_type": "ucl_compress *"}, {"name": "a2", "type": "uint8_t", "pred_name": "byte", "ref_name": "b", "ref_type": "unsigned int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "v2", "ref_type": "unsigned __int8 *"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2af4e000b03dbd36bf5f5b1e94bd385a31b5c6a785c70e9770f2544cd62ecd92", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/m68000/m68kops.o", "objdump": "000000000000ee88 <_ZL18m68k_op_andi_32_alP15_m68ki_cpu_core>:\n    ee88:\t55                   \tpush   %rbp\n    ee89:\t48 89 e5             \tmov    %rsp,%rbp\n    ee8c:\t48 83 ec 20          \tsub    $0x20,%rsp\n    ee90:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    ee94:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    ee98:\t48 89 c7             \tmov    %rax,%rdi\n    ee9b:\te8 98 15 ff ff       \tcallq  438 <_ZL17m68ki_read_imm_32P15_m68ki_cpu_core>\n    eea0:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    eea3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    eea7:\t48 89 c7             \tmov    %rax,%rdi\n    eeaa:\te8 89 15 ff ff       \tcallq  438 <_ZL17m68ki_read_imm_32P15_m68ki_cpu_core>\n    eeaf:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    eeb2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    eeb6:\t8b 80 1c 01 00 00    \tmov    0x11c(%rax),%eax\n    eebc:\t83 c8 01             \tor     $0x1,%eax\n    eebf:\t89 c2                \tmov    %eax,%edx\n    eec1:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n    eec4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    eec8:\t89 ce                \tmov    %ecx,%esi\n    eeca:\t48 89 c7             \tmov    %rax,%rdi\n    eecd:\te8 f9 17 ff ff       \tcallq  6cb <_ZL16m68ki_read_32_fcP15_m68ki_cpu_corejj>\n    eed2:\t23 45 fc             \tand    -0x4(%rbp),%eax\n    eed5:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    eed8:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    eedb:\tc1 e8 18             \tshr    $0x18,%eax\n    eede:\t89 c2                \tmov    %eax,%edx\n    eee0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    eee4:\t89 90 28 01 00 00    \tmov    %edx,0x128(%rax)\n    eeea:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    eeee:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    eef1:\t89 90 2c 01 00 00    \tmov    %edx,0x12c(%rax)\n    eef7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    eefb:\tc7 80 34 01 00 00 00 \tmovl   $0x0,0x134(%rax)\n    ef02:\t00 00 00 \n    ef05:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    ef09:\tc7 80 30 01 00 00 00 \tmovl   $0x0,0x130(%rax)\n    ef10:\t00 00 00 \n    ef13:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    ef17:\t8b 80 1c 01 00 00    \tmov    0x11c(%rax),%eax\n    ef1d:\t83 c8 01             \tor     $0x1,%eax\n    ef20:\t89 c7                \tmov    %eax,%edi\n    ef22:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    ef25:\t8b 75 f8             \tmov    -0x8(%rbp),%esi\n    ef28:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    ef2c:\t89 d1                \tmov    %edx,%ecx\n    ef2e:\t89 fa                \tmov    %edi,%edx\n    ef30:\t48 89 c7             \tmov    %rax,%rdi\n    ef33:\te8 2e 19 ff ff       \tcallq  866 <_ZL17m68ki_write_32_fcP15_m68ki_cpu_corejjj>\n    ef38:\t90                   \tnop\n    ef39:\tc9                   \tleaveq \n    ef3a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall m68k_op_andi_32_al(_DWORD *a1) {\n  unsigned int v1;\n  unsigned int v4;\n  int v5;\n  v5 = m68ki_read_imm_32((__int64)a1);\n  v4 = m68ki_read_imm_32((__int64)a1);\n  v1 = m68ki_read_32_fc((__int64)a1, v4, a1[Number] | Number);\n  a1[Number] = (v5 & v1) >> Number;\n  a1[Number] = v5 & v1;\n  a1[Number] = Number;\n  a1[Number] = Number;\n  return m68ki_write_32_fc((__int64)a1, v4, a1[Number] | Number, v5 & v1);\n}", "code_t": "void __cdecl m68k_op_andi_32_al(m68ki_cpu_core *<span class=\"supfact\">m68k</span>) {\n  UINT32 res;\n  UINT32 <span class=\"supfact\">ea</span>;\n  UINT32 <span class=\"supfact\">src</span>;\n  <span class=\"supfact\">src</span> = m68ki_read_imm_32(<span class=\"supfact\">m68k</span>);\n  <span class=\"supfact\">ea</span> = m68ki_read_imm_32(<span class=\"supfact\">m68k</span>);\n  res = <span class=\"supfact\">src</span> &\n        m68ki_read_32_fc(<span class=\"supfact\">m68k</span>, <span class=\"supfact\">ea</span>,\n                         <span class=\"supfact\">m68k</span>->s_flag | Number);\n  <span class=\"supfact\">m68k</span>->n_flag = HIBYTE(res);\n  <span class=\"supfact\">m68k</span>->not_z_flag = res;\n  <span class=\"supfact\">m68k</span>->c_flag = Number;\n  <span class=\"supfact\">m68k</span>->v_flag = Number;\n  m68ki_write_32_fc(<span class=\"supfact\">m68k</span>, <span class=\"supfact\">ea</span>,\n                    <span class=\"supfact\">m68k</span>->s_flag | Number, res);\n}", "var": [{"name": "a1", "type": "CPUState_0 *", "pred_name": "cpu", "ref_name": "m68k", "ref_type": "m68ki_cpu_core *"}, {"name": "v1", "type": "int", "pred_name": "v1", "ref_name": "", "ref_type": "disappear"}, {"name": "v4", "type": "unsigned int", "pred_name": "data", "ref_name": "ea", "ref_type": "UINT32"}, {"name": "v5", "type": "unsigned int", "pred_name": "address", "ref_name": "src", "ref_type": "UINT32"}], "body_in_train": false}, {"repo_owner": "google-code-export", "repo_name": "jmupdf", "path": "google-code-export/jmupdf/1e4bf55e98b6525b9992332578de5d07dad63e538bcfba0fc4929283fc5ea98b", "path_in_repo": "google-code-export/jmupdf/mupdf/build/debug/pdf_interpret.o", "objdump": "0000000000006732 <pdf_run_G>:\n    6732:\t55                   \tpush   %rbp\n    6733:\t48 89 e5             \tmov    %rsp,%rbp\n    6736:\t48 83 ec 10          \tsub    $0x10,%rsp\n    673a:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    673e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6742:\t48 8b 00             \tmov    (%rax),%rax\n    6745:\t8b 50 04             \tmov    0x4(%rax),%edx\n    6748:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    674c:\t48 8b 00             \tmov    (%rax),%rax\n    674f:\t83 e2 ef             \tand    $0xffffffef,%edx\n    6752:\t89 50 04             \tmov    %edx,0x4(%rax)\n    6755:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 675c <pdf_run_G+0x2a>\n    675c:\t48 8b 10             \tmov    (%rax),%rdx\n    675f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6763:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    6768:\t48 89 c7             \tmov    %rax,%rdi\n    676b:\te8 3b d3 ff ff       \tcallq  3aab <pdf_set_colorspace>\n    6770:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    6774:\t48 8d 90 24 02 00 00 \tlea    0x224(%rax),%rdx\n    677b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    677f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    6784:\t48 89 c7             \tmov    %rax,%rdi\n    6787:\te8 16 d4 ff ff       \tcallq  3ba2 <pdf_set_color>\n    678c:\t90                   \tnop\n    678d:\tc9                   \tleaveq \n    678e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pdf_run_G(__int64 a1) {\n  *(_DWORD *)(*(_QWORD *)a1 + Number L) &= Number;\n  pdf_set_colorspace((_QWORD *)a1, Number, fz_device_gray);\n  return pdf_set_color((_QWORD *)a1, Number, (float *)(a1 + Number));\n}", "code_t": "void __cdecl pdf_run_G(pdf_csi *<span class=\"supfact\">csi</span>) {\n  <span class=\"supfact\">csi</span>->dev->flags &= Number;\n  pdf_set_colorspace(<span class=\"supfact\">csi</span>, Number, fz_device_gray);\n  pdf_set_color(<span class=\"supfact\">csi</span>, Number, <span class=\"supfact\">csi</span>->stack);\n}", "var": [{"name": "a1", "type": "fz_device *", "pred_name": "dev", "ref_name": "csi", "ref_type": "pdf_csi *"}], "body_in_train": false}, {"repo_owner": "xurubin", "repo_name": "wl530g-mini", "path": "xurubin/wl530g-mini/4c79531ffba16d7cd05978a97bd4eacf1716c6917233b4e37e46b0f10291e592", "path_in_repo": "xurubin/wl530g-mini/Src/uClinux-dist/user/perl/av.o", "objdump": "0000000000002f9d <Perl_avhv_iternext>:\n    2f9d:\t55                   \tpush   %rbp\n    2f9e:\t48 89 e5             \tmov    %rsp,%rbp\n    2fa1:\t48 83 ec 20          \tsub    $0x20,%rsp\n    2fa5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    2fa9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2fad:\t48 89 c7             \tmov    %rax,%rdi\n    2fb0:\te8 00 00 00 00       \tcallq  2fb5 <Perl_avhv_iternext+0x18>\n    2fb5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    2fb9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2fbd:\t48 89 c7             \tmov    %rax,%rdi\n    2fc0:\te8 00 00 00 00       \tcallq  2fc5 <Perl_avhv_iternext+0x28>\n    2fc5:\tc9                   \tleaveq \n    2fc6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Perl_avhv_iternext(_QWORD *a1) {\n  __int64 v2;\n  v2 = Perl_avhv_keys(a1);\n  return Perl_hv_iternext(v2);\n}", "code_t": "HE *__cdecl Perl_avhv_iternext(AV *<span class=\"supfact\">av</span>) {\n  HV *<span class=\"supfact\">keys</span>;\n  <span class=\"supfact\">keys</span> = Perl_avhv_keys(<span class=\"supfact\">av</span>);\n  return (HE *)Perl_hv_iternext(<span class=\"supfact\">keys</span>);\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "iter", "ref_name": "av", "ref_type": "AV *"}, {"name": "v2", "type": "void *", "pred_name": "ret", "ref_name": "keys", "ref_type": "HV *"}], "body_in_train": false}, {"repo_owner": "dyladan", "repo_name": "dwm", "path": "dyladan/dwm/a396688e04253fe0c27221b96bf2ebff479cfd36fb5fad735290b598ace44795", "path_in_repo": "dyladan/dwm//dwm", "objdump": "", "code_s": "__int64 __fastcall sub_407E23(__int64 a1) {\n  __int64 result;\n  __int64 i;\n  __int64 j;\n  unsigned int v4;\n  v4 = Number;\n  for (i = *(_QWORD *)(a1 + Number); i; i = *(_QWORD *)(i + Number)) {\n    if ((*(_DWORD *)(i + Number) &\n         *(_DWORD *)(*(_QWORD *)(i + Number) +\n                     Number * (*(unsigned int *)(*(_QWORD *)(i + Number) +\n                                                 Number L) +\n                               Number L) +\n                     Number)) != Number)\n      ++v4;\n  }\n  if (v4)\n    snprintf((char *)a1, Number, String, v4);\n  result = sub_40849E(*(_QWORD *)(a1 + Number));\n  for (j = result; j; j = result) {\n    sub_4087F4(j, *(unsigned int *)(a1 + Number),\n               *(unsigned int *)(a1 + Number),\n               (unsigned int)(*(_DWORD *)(a1 + Number) -\n                              Number * *(_DWORD *)(j + Number)),\n               (unsigned int)(*(_DWORD *)(a1 + Number) -\n                              Number * *(_DWORD *)(j + Number)),\n               Number L);\n    result = sub_40849E(*(_QWORD *)(j + Number));\n  }\n  return result;\n}", "code_t": "__int64 __fastcall sub_407E23(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 i;\n  __int64 j;\n  unsigned int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Number;\n  for (i = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number); i;\n       i = *(_QWORD *)(i + Number)) {\n    if ((*(_DWORD *)(i + Number) &\n         *(_DWORD *)(*(_QWORD *)(i + Number) +\n                     Number * (*(unsigned int *)(*(_QWORD *)(i + Number) +\n                                                 Number L) +\n                               Number L) +\n                     Number)) != Number)\n      ++<span class=\"supfact\">v4</span>;\n  }\n  if (<span class=\"supfact\">v4</span>)\n    snprintf((char *)<span class=\"supfact\">a1</span>, Number, String, <span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">result</span> = sub_40849E(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n  for (j = <span class=\"supfact\">result</span>; j; j = <span class=\"supfact\">result</span>) {\n    sub_4087F4(j, *(unsigned int *)(<span class=\"supfact\">a1</span> + Number),\n               *(unsigned int *)(<span class=\"supfact\">a1</span> + Number),\n               (unsigned int)(*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) -\n                              Number * *(_DWORD *)(j + Number)),\n               (unsigned int)(*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) -\n                              Number * *(_DWORD *)(j + Number)),\n               Number L);\n    <span class=\"supfact\">result</span> = sub_40849E(*(_QWORD *)(j + Number));\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "result", "type": "__int64", "pred_name": "result", "ref_name": "result", "ref_type": "__int64"}, {"name": "v4", "type": "unsigned int", "pred_name": "v4", "ref_name": "v4", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "zamzey39", "repo_name": "masscan", "path": "zamzey39/masscan/9e7979fe56d302377115709fa7e0ae42ef76996572b4839aaa611f426397f562", "path_in_repo": "zamzey39/masscan//tmp/proto-tcp.o", "objdump": "000000000000038e <tcpcon_timeouts>:\n     38e:\t55                   \tpush   %rbp\n     38f:\t48 89 e5             \tmov    %rsp,%rbp\n     392:\t48 83 ec 20          \tsub    $0x20,%rsp\n     396:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     39a:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     39d:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n     3a0:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     3a3:\t48 c1 e0 0e          \tshl    $0xe,%rax\n     3a7:\t48 89 c2             \tmov    %rax,%rdx\n     3aa:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n     3ad:\tc1 e8 0e             \tshr    $0xe,%eax\n     3b0:\t89 c0                \tmov    %eax,%eax\n     3b2:\t48 01 d0             \tadd    %rdx,%rax\n     3b5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     3b9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     3bd:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     3c1:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     3c5:\t48 89 d6             \tmov    %rdx,%rsi\n     3c8:\t48 89 c7             \tmov    %rax,%rdi\n     3cb:\te8 00 00 00 00       \tcallq  3d0 <tcpcon_timeouts+0x42>\n     3d0:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     3d4:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     3d9:\t0f 84 94 00 00 00    \tje     473 <tcpcon_timeouts+0xe5>\n     3df:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n     3e2:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n     3e6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     3ea:\t6a 00                \tpushq  $0x0\n     3ec:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n     3ef:\t52                   \tpush   %rdx\n     3f0:\t41 89 c9             \tmov    %ecx,%r9d\n     3f3:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     3f9:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     3fe:\tba 00 00 00 00       \tmov    $0x0,%edx\n     403:\t48 89 c7             \tmov    %rax,%rdi\n     406:\te8 00 00 00 00       \tcallq  40b <tcpcon_timeouts+0x7d>\n     40b:\t48 83 c4 10          \tadd    $0x10,%rsp\n     40f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     413:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     417:\t48 85 c0             \ttest   %rax,%rax\n     41a:\t75 9d                \tjne    3b9 <tcpcon_timeouts+0x2b>\n     41c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     420:\t8b 40 04             \tmov    0x4(%rax),%eax\n     423:\t85 c0                \ttest   %eax,%eax\n     425:\t74 92                \tje     3b9 <tcpcon_timeouts+0x2b>\n     427:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     42b:\t0f b7 40 0a          \tmovzwl 0xa(%rax),%eax\n     42f:\t66 85 c0             \ttest   %ax,%ax\n     432:\t74 85                \tje     3b9 <tcpcon_timeouts+0x2b>\n     434:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     437:\t83 c0 02             \tadd    $0x2,%eax\n     43a:\t89 c0                \tmov    %eax,%eax\n     43c:\t48 c1 e0 0e          \tshl    $0xe,%rax\n     440:\t48 89 c2             \tmov    %rax,%rdx\n     443:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n     446:\tc1 e8 0e             \tshr    $0xe,%eax\n     449:\t89 c0                \tmov    %eax,%eax\n     44b:\t48 01 c2             \tadd    %rax,%rdx\n     44e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     452:\t48 8d 70 28          \tlea    0x28(%rax),%rsi\n     456:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     45a:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     45e:\t48 89 d1             \tmov    %rdx,%rcx\n     461:\tba 28 00 00 00       \tmov    $0x28,%edx\n     466:\t48 89 c7             \tmov    %rax,%rdi\n     469:\te8 00 00 00 00       \tcallq  46e <tcpcon_timeouts+0xe0>\n     46e:\te9 46 ff ff ff       \tjmpq   3b9 <tcpcon_timeouts+0x2b>\n     473:\t90                   \tnop\n     474:\t90                   \tnop\n     475:\tc9                   \tleaveq \n     476:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tcpcon_timeouts(__int64 a1, unsigned int a2,\n                                   unsigned int a3) {\n  __int64 result;\n  __int64 v5;\n  unsigned __int64 v6;\n  v6 = ((unsigned __int64)a2 << Number) + (a3 >> Number);\n  while (Number) {\n    result = timeouts_remove(*(_QWORD *)(a1 + Number), v6);\n    v5 = result;\n    if (!result)\n      break;\n    tcpcon_handle(a1, result, Number, Number, Number, a2, a3, Number);\n    if (!*(_QWORD *)(v5 + Number) && *(_DWORD *)(v5 + Number)) {\n      if (*(_WORD *)(v5 + Number))\n        timeouts_add(*(_QWORD *)(a1 + Number), v5 + Number, Number L,\n                     (a3 >> Number) +\n                         ((unsigned __int64)(a2 + Number) << Number));\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl tcpcon_timeouts(TCP_ConnectionTable *<span class=\"supfact\">tcpcon</span>,\n                             unsigned int <span class=\"supfact\">secs</span>,\n                             unsigned int <span class=\"supfact\">usecs</span>) {\n  TCP_Control_Block *<span class=\"supfact\">tcb</span>;\n  uint64_t <span class=\"supfact\">timestamp</span>;\n  <span class=\"supfact\">timestamp</span> =\n      ((unsigned __int64)<span class=\"supfact\">secs</span> << Number) +\n      (<span class=\"supfact\">usecs</span> >> Number);\n  while (Number) {\n    <span class=\"supfact\">tcb</span> = (TCP_Control_Block *)timeouts_remove(\n        <span class=\"supfact\">tcpcon</span>->timeouts, <span class=\"supfact\">timestamp</span>);\n    if (!<span class=\"supfact\">tcb</span>)\n      break;\n    tcpcon_handle(<span class=\"supfact\">tcpcon</span>, <span class=\"supfact\">tcb</span>, Number, Number L,\n                  Number L, <span class=\"supfact\">secs</span>, <span class=\"supfact\">usecs</span>,\n                  Number);\n    if (!<span class=\"supfact\">tcb</span>->timeout[Number].prev &&\n        <span class=\"supfact\">tcb</span>->ip_them) {\n      if (<span class=\"supfact\">tcb</span>->port_them)\n        timeouts_add(\n            <span class=\"supfact\">tcpcon</span>->timeouts, <span class=\"supfact\">tcb</span>->timeout,\n            Number L,\n            (<span class=\"supfact\">usecs</span> >> Number) +\n                ((unsigned __int64)(<span class=\"supfact\">secs</span> + Number) << Number));\n    }\n  }\n}", "var": [{"name": "a1", "type": "TCP_ConnectionTable *", "pred_name": "tcpcon", "ref_name": "tcpcon", "ref_type": "TCP_ConnectionTable *"}, {"name": "a2", "type": "TCP_Control_Block *", "pred_name": "tcb", "ref_name": "secs", "ref_type": "unsigned int"}, {"name": "a3", "type": "unsigned int", "pred_name": "__unk__", "ref_name": "usecs", "ref_type": "unsigned int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v5", "type": "TCP_Control_Block *", "pred_name": "tcb", "ref_name": "tcb", "ref_type": "TCP_Control_Block *"}, {"name": "v6", "type": "mbuf *", "pred_name": "m", "ref_name": "timestamp", "ref_type": "uint64_t"}], "body_in_train": false}, {"repo_owner": "nmacs", "repo_name": "print3d", "path": "nmacs/print3d/142ee0ab03aaea08c1cce3b49aba610648f7bc1ddb53dfc348f2f9408898fa3c", "path_in_repo": "nmacs/print3d//toolchain/openocd-0.7.0/jimtcl/jimsh", "objdump": "000000000040bfbf <JimFindTrimLeft>:\n  40bfbf:\t55                   \tpush   %rbp\n  40bfc0:\t48 89 e5             \tmov    %rsp,%rbp\n  40bfc3:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40bfc7:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40bfcb:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  40bfce:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  40bfd2:\t89 4d e0             \tmov    %ecx,-0x20(%rbp)\n  40bfd5:\teb 3c                \tjmp    40c013 <JimFindTrimLeft+0x54>\n  40bfd7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40bfdb:\t0f b6 00             \tmovzbl (%rax),%eax\n  40bfde:\t0f b6 c0             \tmovzbl %al,%eax\n  40bfe1:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40bfe4:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  40bfeb:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  40bfee:\t8b 4d e0             \tmov    -0x20(%rbp),%ecx\n  40bff1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40bff5:\t89 ce                \tmov    %ecx,%esi\n  40bff7:\t48 89 c7             \tmov    %rax,%rdi\n  40bffa:\te8 95 ff ff ff       \tcallq  40bf94 <utf8_memchr>\n  40bfff:\t48 85 c0             \ttest   %rax,%rax\n  40c002:\t74 17                \tje     40c01b <JimFindTrimLeft+0x5c>\n  40c004:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40c007:\t48 98                \tcltq   \n  40c009:\t48 01 45 e8          \tadd    %rax,-0x18(%rbp)\n  40c00d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40c010:\t29 45 e4             \tsub    %eax,-0x1c(%rbp)\n  40c013:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  40c017:\t75 be                \tjne    40bfd7 <JimFindTrimLeft+0x18>\n  40c019:\teb 01                \tjmp    40c01c <JimFindTrimLeft+0x5d>\n  40c01b:\t90                   \tnop\n  40c01c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c020:\tc9                   \tleaveq \n  40c021:\tc3                   \tretq   ", "code_s": "unsigned __int8 *__fastcall JimFindTrimLeft(unsigned __int8 *a1, int a2,\n                                            const void *a3, int a4) {\n  while (a2 && utf8_memchr(a3, a4, *a1)) {\n    ++a1;\n    --a2;\n  }\n  return a1;\n}", "code_t": "const char *__cdecl JimFindTrimLeft(const char *<span class=\"supfact\">str</span>,\n                                    int <span class=\"supfact\">len</span>,\n                                    const char *<span class=\"supfact\">trimchars</span>,\n                                    int <span class=\"supfact\">trimlen</span>) {\n  while (<span class=\"supfact\">len</span> &&\n         utf8_memchr(<span class=\"supfact\">trimchars</span>, <span class=\"supfact\">trimlen</span>,\n                     *(unsigned __int8 *)<span class=\"supfact\">str</span>)) {\n    ++<span class=\"supfact\">str</span>;\n    --<span class=\"supfact\">len</span>;\n  }\n  return <span class=\"supfact\">str</span>;\n}", "var": [{"name": "a1", "type": "const void *", "pred_name": "s", "ref_name": "str", "ref_type": "const char *"}, {"name": "a2", "type": "int", "pred_name": "len", "ref_name": "len", "ref_type": "int"}, {"name": "a3", "type": "const uint8_t *", "pred_name": "a3", "ref_name": "trimchars", "ref_type": "const char *"}, {"name": "a4", "type": "int", "pred_name": "a4", "ref_name": "trimlen", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "davidek", "repo_name": "peerstreamer-GRAPES", "path": "davidek/peerstreamer-GRAPES/dd4a6fc5fa22fc8efc692347bd3ee0bf72dabf118e4f6ff4340bea5203a0ec9d", "path_in_repo": "davidek/peerstreamer-GRAPES/src/Cache/topocache.o", "objdump": "0000000000001f17 <swap_entries>:\n    1f17:\t55                   \tpush   %rbp\n    1f18:\t48 89 e5             \tmov    %rsp,%rbp\n    1f1b:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1f1f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1f23:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n    1f26:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n    1f29:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    1f2c:\t3b 45 d0             \tcmp    -0x30(%rbp),%eax\n    1f2f:\t75 0a                \tjne    1f3b <swap_entries+0x24>\n    1f31:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1f36:\te9 6c 01 00 00       \tjmpq   20a7 <swap_entries+0x190>\n    1f3b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1f3f:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1f42:\t85 c0                \ttest   %eax,%eax\n    1f44:\t0f 84 db 00 00 00    \tje     2025 <swap_entries+0x10e>\n    1f4a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1f4e:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1f51:\t48 98                \tcltq   \n    1f53:\t48 89 c7             \tmov    %rax,%rdi\n    1f56:\te8 00 00 00 00       \tcallq  1f5b <swap_entries+0x44>\n    1f5b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1f5f:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    1f64:\t75 0a                \tjne    1f70 <swap_entries+0x59>\n    1f66:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1f6b:\te9 37 01 00 00       \tjmpq   20a7 <swap_entries+0x190>\n    1f70:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1f74:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1f77:\t48 63 d0             \tmovslq %eax,%rdx\n    1f7a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1f7e:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n    1f82:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1f86:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1f89:\t0f af 45 d4          \timul   -0x2c(%rbp),%eax\n    1f8d:\t48 98                \tcltq   \n    1f8f:\t48 01 c1             \tadd    %rax,%rcx\n    1f92:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1f96:\t48 89 ce             \tmov    %rcx,%rsi\n    1f99:\t48 89 c7             \tmov    %rax,%rdi\n    1f9c:\te8 00 00 00 00       \tcallq  1fa1 <swap_entries+0x8a>\n    1fa1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1fa5:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1fa8:\t48 98                \tcltq   \n    1faa:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1fae:\t48 8b 4a 18          \tmov    0x18(%rdx),%rcx\n    1fb2:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1fb6:\t8b 52 10             \tmov    0x10(%rdx),%edx\n    1fb9:\t0f af 55 d0          \timul   -0x30(%rbp),%edx\n    1fbd:\t48 63 d2             \tmovslq %edx,%rdx\n    1fc0:\t48 8d 34 11          \tlea    (%rcx,%rdx,1),%rsi\n    1fc4:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1fc8:\t48 8b 4a 18          \tmov    0x18(%rdx),%rcx\n    1fcc:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1fd0:\t8b 52 10             \tmov    0x10(%rdx),%edx\n    1fd3:\t0f af 55 d4          \timul   -0x2c(%rbp),%edx\n    1fd7:\t48 63 d2             \tmovslq %edx,%rdx\n    1fda:\t48 01 d1             \tadd    %rdx,%rcx\n    1fdd:\t48 89 c2             \tmov    %rax,%rdx\n    1fe0:\t48 89 cf             \tmov    %rcx,%rdi\n    1fe3:\te8 00 00 00 00       \tcallq  1fe8 <swap_entries+0xd1>\n    1fe8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1fec:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1fef:\t48 63 d0             \tmovslq %eax,%rdx\n    1ff2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1ff6:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n    1ffa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1ffe:\t8b 40 10             \tmov    0x10(%rax),%eax\n    2001:\t0f af 45 d0          \timul   -0x30(%rbp),%eax\n    2005:\t48 98                \tcltq   \n    2007:\t48 01 c1             \tadd    %rax,%rcx\n    200a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    200e:\t48 89 c6             \tmov    %rax,%rsi\n    2011:\t48 89 cf             \tmov    %rcx,%rdi\n    2014:\te8 00 00 00 00       \tcallq  2019 <swap_entries+0x102>\n    2019:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    201d:\t48 89 c7             \tmov    %rax,%rdi\n    2020:\te8 00 00 00 00       \tcallq  2025 <swap_entries+0x10e>\n    2025:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2029:\t48 8b 00             \tmov    (%rax),%rax\n    202c:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n    202f:\t48 63 d2             \tmovslq %edx,%rdx\n    2032:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    2036:\t48 01 d0             \tadd    %rdx,%rax\n    2039:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    203d:\t48 8b 00             \tmov    (%rax),%rax\n    2040:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    2044:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n    2048:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    204c:\t48 8b 00             \tmov    (%rax),%rax\n    204f:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n    2052:\t48 63 d2             \tmovslq %edx,%rdx\n    2055:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    2059:\t48 01 c2             \tadd    %rax,%rdx\n    205c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2060:\t48 8b 00             \tmov    (%rax),%rax\n    2063:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n    2066:\t48 63 c9             \tmovslq %ecx,%rcx\n    2069:\t48 c1 e1 04          \tshl    $0x4,%rcx\n    206d:\t48 01 c1             \tadd    %rax,%rcx\n    2070:\t48 8b 02             \tmov    (%rdx),%rax\n    2073:\t48 8b 52 08          \tmov    0x8(%rdx),%rdx\n    2077:\t48 89 01             \tmov    %rax,(%rcx)\n    207a:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n    207e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2082:\t48 8b 00             \tmov    (%rax),%rax\n    2085:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n    2088:\t48 63 d2             \tmovslq %edx,%rdx\n    208b:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    208f:\t48 8d 0c 10          \tlea    (%rax,%rdx,1),%rcx\n    2093:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2097:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    209b:\t48 89 01             \tmov    %rax,(%rcx)\n    209e:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n    20a2:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    20a7:\tc9                   \tleaveq \n    20a8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall swap_entries(__int64 a1, int a2, int a3) {\n  _QWORD *v4;\n  __int64 *v5;\n  _QWORD *v6;\n  __int64 v7;\n  __int64 v8;\n  _QWORD *v9;\n  __int64 v11;\n  __int64 v12;\n  void *dest;\n  if (a2 == a3)\n    return Number L;\n  if (*(_DWORD *)(a1 + Number)) {\n    dest = malloc(*(int *)(a1 + Number));\n    if (!dest)\n      return Number;\n    memcpy(dest,\n           (const void *)(a2 * *(_DWORD *)(a1 + Number) +\n                          *(_QWORD *)(a1 + Number)),\n           *(int *)(a1 + Number));\n    memcpy((void *)(a2 * *(_DWORD *)(a1 + Number) + *(_QWORD *)(a1 + Number)),\n           (const void *)(*(_QWORD *)(a1 + Number) +\n                          a3 * *(_DWORD *)(a1 + Number)),\n           *(int *)(a1 + Number));\n    memcpy((void *)(a3 * *(_DWORD *)(a1 + Number) + *(_QWORD *)(a1 + Number)),\n           dest, *(int *)(a1 + Number));\n    free(dest);\n  }\n  v4 = (_QWORD *)(Number L * a2 + *(_QWORD *)a1);\n  v11 = *v4;\n  v12 = v4[Number];\n  v5 = (__int64 *)(*(_QWORD *)a1 + Number L * a3);\n  v6 = v4;\n  v7 = *v5;\n  v8 = v5[Number];\n  *v6 = v7;\n  v6[Number] = v8;\n  v9 = (_QWORD *)(*(_QWORD *)a1 + Number L * a3);\n  *v9 = v11;\n  v9[Number] = v12;\n  return Number L;\n}", "code_t": "int __cdecl swap_entries(const peer_cache *<span class=\"supfact\">c</span>,\n                         int <span class=\"supfact\">i</span>, int <span class=\"supfact\">j</span>) {\n  cache_entry *v4;\n  cache_entry *v5;\n  cache_entry *v6;\n  nodeID *v7;\n  __int64 v8;\n  cache_entry *v9;\n  nodeID *<span class=\"supfact\">t</span>;\n  __int64 <span class=\"supfact\">t_8</span>;\n  uint8_t *<span class=\"supfact\">metadata</span>;\n  if (<span class=\"supfact\">i</span> == <span class=\"supfact\">j</span>)\n    return Number;\n  if (<span class=\"supfact\">c</span>->metadata_size) {\n    <span class=\"supfact\">metadata</span> =\n        (uint8_t *)malloc(<span class=\"supfact\">c</span>->metadata_size);\n    if (!<span class=\"supfact\">metadata</span>)\n      return Number;\n    memcpy(<span class=\"supfact\">metadata</span>,\n           &<span class=\"supfact\">c</span>\n                -><span class=\"supfact\">metadata</span>[<span class=\"supfact\">i</span> *\n                                           <span class=\"supfact\">c</span>->metadata_size],\n           <span class=\"supfact\">c</span>->metadata_size);\n    memcpy(&<span class=\"supfact\">c</span>\n                -><span class=\"supfact\">metadata</span>[<span class=\"supfact\">i</span> *\n                                           <span class=\"supfact\">c</span>->metadata_size],\n           &<span class=\"supfact\">c</span>\n                -><span class=\"supfact\">metadata</span>[<span class=\"supfact\">j</span> *\n                                           <span class=\"supfact\">c</span>->metadata_size],\n           <span class=\"supfact\">c</span>->metadata_size);\n    memcpy(&<span class=\"supfact\">c</span>\n                -><span class=\"supfact\">metadata</span>[<span class=\"supfact\">j</span> *\n                                           <span class=\"supfact\">c</span>->metadata_size],\n           <span class=\"supfact\">metadata</span>, <span class=\"supfact\">c</span>->metadata_size);\n    free(<span class=\"supfact\">metadata</span>);\n  }\n  v4 = &<span class=\"supfact\">c</span>->entries[<span class=\"supfact\">i</span>];\n  <span class=\"supfact\">t</span> = v4->id;\n  <span class=\"supfact\">t_8</span> = *(_QWORD *)&v4->timestamp;\n  v5 = &<span class=\"supfact\">c</span>->entries[<span class=\"supfact\">j</span>];\n  v6 = v4;\n  v7 = v5->id;\n  v8 = *(_QWORD *)&v5->timestamp;\n  v6->id = v7;\n  *(_QWORD *)&v6->timestamp = v8;\n  v9 = &<span class=\"supfact\">c</span>->entries[<span class=\"supfact\">j</span>];\n  v9->id = <span class=\"supfact\">t</span>;\n  *(_QWORD *)&v9->timestamp = <span class=\"supfact\">t_8</span>;\n  return Number;\n}", "var": [{"name": "a1", "type": "private_ike_sa_t_0 *", "pred_name": "this", "ref_name": "c", "ref_type": "const peer_cache *"}, {"name": "a2", "type": "u_int32_t", "pred_name": "index", "ref_name": "i", "ref_type": "int"}, {"name": "a3", "type": "u_int32_t", "pred_name": "count", "ref_name": "j", "ref_type": "int"}, {"name": "v11", "type": "child_sa_t_0 *", "pred_name": "child_sa", "ref_name": "t", "ref_type": "nodeID *"}, {"name": "v12", "type": "iterator_t_0 *", "pred_name": "iterator", "ref_name": "t_8", "ref_type": "__int64"}, {"name": "dest", "type": "char *", "pred_name": "tmp", "ref_name": "metadata", "ref_type": "uint8_t *"}], "body_in_train": false}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/31feca0b01f7963552d84f00505fe4a77a17dbe5b130536a7d7912b04adf2717", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Applications/d/Output/make_dparser.native", "objdump": "000000000040da67 <action_diff>:\n  40da67:\t55                   \tpush   %rbp\n  40da68:\t48 89 e5             \tmov    %rsp,%rbp\n  40da6b:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40da6f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40da73:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40da77:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  40da7b:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40da82:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  40da89:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40da8d:\t8b 10                \tmov    (%rax),%edx\n  40da8f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40da92:\t39 c2                \tcmp    %eax,%edx\n  40da94:\t0f 86 60 03 00 00    \tjbe    40ddfa <action_diff+0x393>\n  40da9a:\t90                   \tnop\n  40da9b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40da9f:\t8b 10                \tmov    (%rax),%edx\n  40daa1:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40daa4:\t39 c2                \tcmp    %eax,%edx\n  40daa6:\t0f 87 64 01 00 00    \tja     40dc10 <action_diff+0x1a9>\n  40daac:\te9 49 01 00 00       \tjmpq   40dbfa <action_diff+0x193>\n  40dab1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dab5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40dab9:\t48 85 c0             \ttest   %rax,%rax\n  40dabc:\t75 57                \tjne    40db15 <action_diff+0xae>\n  40dabe:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40dac2:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  40dac6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40dac9:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40dacc:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40dacf:\t48 98                \tcltq   \n  40dad1:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40dad5:\t48 8d 34 01          \tlea    (%rcx,%rax,1),%rsi\n  40dad9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dadd:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n  40dae1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dae5:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  40dae9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40daed:\t48 8b 78 08          \tmov    0x8(%rax),%rdi\n  40daf1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40daf5:\t8b 00                \tmov    (%rax),%eax\n  40daf7:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  40dafa:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40dafe:\t89 0a                \tmov    %ecx,(%rdx)\n  40db00:\t89 c0                \tmov    %eax,%eax\n  40db02:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40db06:\t48 8d 14 07          \tlea    (%rdi,%rax,1),%rdx\n  40db0a:\t48 8b 06             \tmov    (%rsi),%rax\n  40db0d:\t48 89 02             \tmov    %rax,(%rdx)\n  40db10:\te9 e5 00 00 00       \tjmpq   40dbfa <action_diff+0x193>\n  40db15:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40db19:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40db1d:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40db21:\t48 83 c2 10          \tadd    $0x10,%rdx\n  40db25:\t48 39 d0             \tcmp    %rdx,%rax\n  40db28:\t75 53                \tjne    40db7d <action_diff+0x116>\n  40db2a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40db2e:\t8b 00                \tmov    (%rax),%eax\n  40db30:\t83 f8 02             \tcmp    $0x2,%eax\n  40db33:\t0f 87 95 00 00 00    \tja     40dbce <action_diff+0x167>\n  40db39:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40db3d:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  40db41:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40db44:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40db47:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40db4a:\t48 98                \tcltq   \n  40db4c:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40db50:\t48 8d 34 01          \tlea    (%rcx,%rax,1),%rsi\n  40db54:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40db58:\t48 8b 78 08          \tmov    0x8(%rax),%rdi\n  40db5c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40db60:\t8b 00                \tmov    (%rax),%eax\n  40db62:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  40db65:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40db69:\t89 0a                \tmov    %ecx,(%rdx)\n  40db6b:\t89 c0                \tmov    %eax,%eax\n  40db6d:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40db71:\t48 8d 14 07          \tlea    (%rdi,%rax,1),%rdx\n  40db75:\t48 8b 06             \tmov    (%rsi),%rax\n  40db78:\t48 89 02             \tmov    %rax,(%rdx)\n  40db7b:\teb 7d                \tjmp    40dbfa <action_diff+0x193>\n  40db7d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40db81:\t8b 00                \tmov    (%rax),%eax\n  40db83:\t83 e0 07             \tand    $0x7,%eax\n  40db86:\t85 c0                \ttest   %eax,%eax\n  40db88:\t74 44                \tje     40dbce <action_diff+0x167>\n  40db8a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40db8e:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  40db92:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40db95:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40db98:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40db9b:\t48 98                \tcltq   \n  40db9d:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40dba1:\t48 8d 34 01          \tlea    (%rcx,%rax,1),%rsi\n  40dba5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dba9:\t48 8b 78 08          \tmov    0x8(%rax),%rdi\n  40dbad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dbb1:\t8b 00                \tmov    (%rax),%eax\n  40dbb3:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  40dbb6:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40dbba:\t89 0a                \tmov    %ecx,(%rdx)\n  40dbbc:\t89 c0                \tmov    %eax,%eax\n  40dbbe:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40dbc2:\t48 8d 14 07          \tlea    (%rdi,%rax,1),%rdx\n  40dbc6:\t48 8b 06             \tmov    (%rsi),%rax\n  40dbc9:\t48 89 02             \tmov    %rax,(%rdx)\n  40dbcc:\teb 2c                \tjmp    40dbfa <action_diff+0x193>\n  40dbce:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40dbd2:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  40dbd6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40dbd9:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40dbdc:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40dbdf:\t48 98                \tcltq   \n  40dbe1:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40dbe5:\t48 01 c8             \tadd    %rcx,%rax\n  40dbe8:\t48 8b 10             \tmov    (%rax),%rdx\n  40dbeb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dbef:\t48 89 d6             \tmov    %rdx,%rsi\n  40dbf2:\t48 89 c7             \tmov    %rax,%rdi\n  40dbf5:\te8 89 e2 00 00       \tcallq  41be83 <vec_add_internal>\n  40dbfa:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40dbfe:\t8b 10                \tmov    (%rax),%edx\n  40dc00:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40dc03:\t39 c2                \tcmp    %eax,%edx\n  40dc05:\t0f 87 a6 fe ff ff    \tja     40dab1 <action_diff+0x4a>\n  40dc0b:\te9 ee 01 00 00       \tjmpq   40ddfe <action_diff+0x397>\n  40dc10:\t90                   \tnop\n  40dc11:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40dc15:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40dc19:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40dc1c:\t48 63 d2             \tmovslq %edx,%rdx\n  40dc1f:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  40dc23:\t48 01 d0             \tadd    %rdx,%rax\n  40dc26:\t48 8b 00             \tmov    (%rax),%rax\n  40dc29:\t8b 50 20             \tmov    0x20(%rax),%edx\n  40dc2c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40dc30:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40dc34:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n  40dc37:\t48 63 c9             \tmovslq %ecx,%rcx\n  40dc3a:\t48 c1 e1 03          \tshl    $0x3,%rcx\n  40dc3e:\t48 01 c8             \tadd    %rcx,%rax\n  40dc41:\t48 8b 00             \tmov    (%rax),%rax\n  40dc44:\t8b 40 20             \tmov    0x20(%rax),%eax\n  40dc47:\t39 c2                \tcmp    %eax,%edx\n  40dc49:\t75 0d                \tjne    40dc58 <action_diff+0x1f1>\n  40dc4b:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40dc4f:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  40dc53:\te9 31 fe ff ff       \tjmpq   40da89 <action_diff+0x22>\n  40dc58:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40dc5c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40dc60:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40dc63:\t48 63 d2             \tmovslq %edx,%rdx\n  40dc66:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  40dc6a:\t48 01 d0             \tadd    %rdx,%rax\n  40dc6d:\t48 8b 00             \tmov    (%rax),%rax\n  40dc70:\t8b 50 20             \tmov    0x20(%rax),%edx\n  40dc73:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40dc77:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40dc7b:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n  40dc7e:\t48 63 c9             \tmovslq %ecx,%rcx\n  40dc81:\t48 c1 e1 03          \tshl    $0x3,%rcx\n  40dc85:\t48 01 c8             \tadd    %rcx,%rax\n  40dc88:\t48 8b 00             \tmov    (%rax),%rax\n  40dc8b:\t8b 40 20             \tmov    0x20(%rax),%eax\n  40dc8e:\t39 c2                \tcmp    %eax,%edx\n  40dc90:\t0f 83 5b 01 00 00    \tjae    40ddf1 <action_diff+0x38a>\n  40dc96:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dc9a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40dc9e:\t48 85 c0             \ttest   %rax,%rax\n  40dca1:\t75 57                \tjne    40dcfa <action_diff+0x293>\n  40dca3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40dca7:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  40dcab:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40dcae:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40dcb1:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40dcb4:\t48 98                \tcltq   \n  40dcb6:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40dcba:\t48 8d 34 01          \tlea    (%rcx,%rax,1),%rsi\n  40dcbe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dcc2:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n  40dcc6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dcca:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  40dcce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dcd2:\t48 8b 78 08          \tmov    0x8(%rax),%rdi\n  40dcd6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dcda:\t8b 00                \tmov    (%rax),%eax\n  40dcdc:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  40dcdf:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40dce3:\t89 0a                \tmov    %ecx,(%rdx)\n  40dce5:\t89 c0                \tmov    %eax,%eax\n  40dce7:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40dceb:\t48 8d 14 07          \tlea    (%rdi,%rax,1),%rdx\n  40dcef:\t48 8b 06             \tmov    (%rsi),%rax\n  40dcf2:\t48 89 02             \tmov    %rax,(%rdx)\n  40dcf5:\te9 e5 00 00 00       \tjmpq   40dddf <action_diff+0x378>\n  40dcfa:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dcfe:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40dd02:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40dd06:\t48 83 c2 10          \tadd    $0x10,%rdx\n  40dd0a:\t48 39 d0             \tcmp    %rdx,%rax\n  40dd0d:\t75 53                \tjne    40dd62 <action_diff+0x2fb>\n  40dd0f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dd13:\t8b 00                \tmov    (%rax),%eax\n  40dd15:\t83 f8 02             \tcmp    $0x2,%eax\n  40dd18:\t0f 87 95 00 00 00    \tja     40ddb3 <action_diff+0x34c>\n  40dd1e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40dd22:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  40dd26:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40dd29:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40dd2c:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40dd2f:\t48 98                \tcltq   \n  40dd31:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40dd35:\t48 8d 34 01          \tlea    (%rcx,%rax,1),%rsi\n  40dd39:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dd3d:\t48 8b 78 08          \tmov    0x8(%rax),%rdi\n  40dd41:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dd45:\t8b 00                \tmov    (%rax),%eax\n  40dd47:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  40dd4a:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40dd4e:\t89 0a                \tmov    %ecx,(%rdx)\n  40dd50:\t89 c0                \tmov    %eax,%eax\n  40dd52:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40dd56:\t48 8d 14 07          \tlea    (%rdi,%rax,1),%rdx\n  40dd5a:\t48 8b 06             \tmov    (%rsi),%rax\n  40dd5d:\t48 89 02             \tmov    %rax,(%rdx)\n  40dd60:\teb 7d                \tjmp    40dddf <action_diff+0x378>\n  40dd62:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dd66:\t8b 00                \tmov    (%rax),%eax\n  40dd68:\t83 e0 07             \tand    $0x7,%eax\n  40dd6b:\t85 c0                \ttest   %eax,%eax\n  40dd6d:\t74 44                \tje     40ddb3 <action_diff+0x34c>\n  40dd6f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40dd73:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  40dd77:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40dd7a:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40dd7d:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40dd80:\t48 98                \tcltq   \n  40dd82:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40dd86:\t48 8d 34 01          \tlea    (%rcx,%rax,1),%rsi\n  40dd8a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dd8e:\t48 8b 78 08          \tmov    0x8(%rax),%rdi\n  40dd92:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40dd96:\t8b 00                \tmov    (%rax),%eax\n  40dd98:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  40dd9b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40dd9f:\t89 0a                \tmov    %ecx,(%rdx)\n  40dda1:\t89 c0                \tmov    %eax,%eax\n  40dda3:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40dda7:\t48 8d 14 07          \tlea    (%rdi,%rax,1),%rdx\n  40ddab:\t48 8b 06             \tmov    (%rsi),%rax\n  40ddae:\t48 89 02             \tmov    %rax,(%rdx)\n  40ddb1:\teb 2c                \tjmp    40dddf <action_diff+0x378>\n  40ddb3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40ddb7:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  40ddbb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40ddbe:\t8d 50 01             \tlea    0x1(%rax),%edx\n  40ddc1:\t89 55 fc             \tmov    %edx,-0x4(%rbp)\n  40ddc4:\t48 98                \tcltq   \n  40ddc6:\t48 c1 e0 03          \tshl    $0x3,%rax\n  40ddca:\t48 01 c8             \tadd    %rcx,%rax\n  40ddcd:\t48 8b 10             \tmov    (%rax),%rdx\n  40ddd0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ddd4:\t48 89 d6             \tmov    %rdx,%rsi\n  40ddd7:\t48 89 c7             \tmov    %rax,%rdi\n  40ddda:\te8 a4 e0 00 00       \tcallq  41be83 <vec_add_internal>\n  40dddf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40dde3:\t8b 10                \tmov    (%rax),%edx\n  40dde5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40dde8:\t39 c2                \tcmp    %eax,%edx\n  40ddea:\t76 11                \tjbe    40ddfd <action_diff+0x396>\n  40ddec:\te9 20 fe ff ff       \tjmpq   40dc11 <action_diff+0x1aa>\n  40ddf1:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  40ddf5:\te9 a1 fc ff ff       \tjmpq   40da9b <action_diff+0x34>\n  40ddfa:\t90                   \tnop\n  40ddfb:\teb 01                \tjmp    40ddfe <action_diff+0x397>\n  40ddfd:\t90                   \tnop\n  40ddfe:\t90                   \tnop\n  40ddff:\tc9                   \tleaveq \n  40de00:\tc3                   \tretq   ", "code_s": "__int64 __fastcall action_diff(__int64 a1, __int64 a2, __int64 a3) {\n  __int64 result;\n  int v4;\n  _QWORD *v5;\n  __int64 v6;\n  unsigned int v7;\n  int v8;\n  _QWORD *v9;\n  __int64 v10;\n  unsigned int v11;\n  int v12;\n  int v13;\n  _QWORD *v14;\n  __int64 v15;\n  unsigned int v16;\n  int v17;\n  _QWORD *v18;\n  __int64 v19;\n  unsigned int v20;\n  int v21;\n  unsigned int v25;\n  unsigned int v26;\n  v26 = Number;\n  v25 = Number;\nLABEL_2:\n  result = v26;\n  if (*(_DWORD *)a2 > v26) {\n  LABEL_3:\n    if (*(_DWORD *)a3 <= v25) {\n      while (Number) {\n        while (Number) {\n          result = v26;\n          if (*(_DWORD *)a2 <= v26)\n            return result;\n          if (*(_QWORD *)(a1 + Number))\n            break;\n          v4 = v26++;\n          v5 = (_QWORD *)(*(_QWORD *)(a2 + Number) + Number L * v4);\n          *(_QWORD *)(a1 + Number) = a1 + Number;\n          v6 = *(_QWORD *)(a1 + Number);\n          v7 = (*(_DWORD *)a1)++;\n          *(_QWORD *)(v6 + Number L * v7) = *v5;\n        }\n        if (*(_QWORD *)(a1 + Number) == a1 + Number) {\n          if (*(_DWORD *)a1 <= Number)\n            goto LABEL_9;\n        LABEL_11:\n          v12 = v26++;\n          vec_add_internal(\n              a1, *(_QWORD *)(*(_QWORD *)(a2 + Number) + Number L * v12));\n        } else {\n          if ((*(_DWORD *)a1 & Number) == Number)\n            goto LABEL_11;\n        LABEL_9:\n          v8 = v26++;\n          v9 = (_QWORD *)(*(_QWORD *)(a2 + Number) + Number L * v8);\n          v10 = *(_QWORD *)(a1 + Number);\n          v11 = (*(_DWORD *)a1)++;\n          *(_QWORD *)(v10 + Number L * v11) = *v9;\n        }\n      }\n    }\n    do {\n      if (*(_DWORD *)(*(_QWORD *)(Number L * (int)v26 +\n                                  *(_QWORD *)(a2 + Number)) +\n                      Number L) ==\n          *(_DWORD *)(*(_QWORD *)(Number L * (int)v25 +\n                                  *(_QWORD *)(a3 + Number)) +\n                      Number L)) {\n        ++v26;\n        ++v25;\n        goto LABEL_2;\n      }\n      if (*(_DWORD *)(*(_QWORD *)(Number L * (int)v26 +\n                                  *(_QWORD *)(a2 + Number)) +\n                      Number L) >=\n          *(_DWORD *)(*(_QWORD *)(Number L * (int)v25 +\n                                  *(_QWORD *)(a3 + Number)) +\n                      Number L)) {\n        ++v25;\n        goto LABEL_3;\n      }\n      if (*(_QWORD *)(a1 + Number)) {\n        if (*(_QWORD *)(a1 + Number) == a1 + Number) {\n          if (*(_DWORD *)a1 > Number)\n            goto LABEL_23;\n        } else if ((*(_DWORD *)a1 & Number) == Number) {\n        LABEL_23:\n          v21 = v26++;\n          vec_add_internal(\n              a1, *(_QWORD *)(*(_QWORD *)(a2 + Number) + Number L * v21));\n          goto LABEL_24;\n        }\n        v17 = v26++;\n        v18 = (_QWORD *)(*(_QWORD *)(a2 + Number) + Number L * v17);\n        v19 = *(_QWORD *)(a1 + Number);\n        v20 = (*(_DWORD *)a1)++;\n        *(_QWORD *)(v19 + Number L * v20) = *v18;\n      } else {\n        v13 = v26++;\n        v14 = (_QWORD *)(*(_QWORD *)(a2 + Number) + Number L * v13);\n        *(_QWORD *)(a1 + Number) = a1 + Number;\n        v15 = *(_QWORD *)(a1 + Number);\n        v16 = (*(_DWORD *)a1)++;\n        *(_QWORD *)(v15 + Number L * v16) = *v14;\n      }\n    LABEL_24:\n      result = v26;\n    } while (*(_DWORD *)a2 > v26);\n  }\n  return result;\n}", "code_t": "void __cdecl action_diff(VecAction *<span class=\"supfact\">a</span>,\n                         VecAction *<span class=\"supfact\">b</span>,\n                         VecAction *<span class=\"supfact\">c</span>) {\n  unsigned int v3;\n  Action_0 **v4;\n  Action_0 **v5;\n  uint v6;\n  unsigned int v7;\n  Action_0 **v8;\n  Action_0 **v9;\n  uint v10;\n  unsigned int v11;\n  unsigned int v12;\n  Action_0 **v13;\n  Action_0 **v14;\n  uint v15;\n  unsigned int v16;\n  Action_0 **v17;\n  Action_0 **v18;\n  uint v19;\n  unsigned int v20;\n  unsigned int <span class=\"supfact\">cc</span>;\n  unsigned int <span class=\"supfact\">bb</span>;\n  <span class=\"supfact\">bb</span> = Number;\n  <span class=\"supfact\">cc</span> = Number;\nLABEL_2:\n  if (<span class=\"supfact\">b</span>->n > <span class=\"supfact\">bb</span>) {\n  Lagainc:\n    if (<span class=\"supfact\">c</span>->n <= <span class=\"supfact\">cc</span>) {\n      while (Number) {\n        while (Number) {\n          if (<span class=\"supfact\">b</span>->n <= <span class=\"supfact\">bb</span>)\n            return;\n          if (<span class=\"supfact\">a</span>->v)\n            break;\n          v3 = <span class=\"supfact\">bb</span>++;\n          v4 = &<span class=\"supfact\">b</span>->v[v3];\n          <span class=\"supfact\">a</span>->v = <span class=\"supfact\">a</span>->e;\n          v5 = <span class=\"supfact\">a</span>->v;\n          v6 = <span class=\"supfact\">a</span>->n++;\n          v5[v6] = *v4;\n        }\n        if (<span class=\"supfact\">a</span>->v == <span class=\"supfact\">a</span>->e) {\n          if (<span class=\"supfact\">a</span>->n <= Number)\n            goto LABEL_9;\n        LABEL_11:\n          v11 = <span class=\"supfact\">bb</span>++;\n          vec_add_internal(<span class=\"supfact\">a</span>, <span class=\"supfact\">b</span>->v[v11]);\n        } else {\n          if ((<span class=\"supfact\">a</span>->n & Number) == Number)\n            goto LABEL_11;\n        LABEL_9:\n          v7 = <span class=\"supfact\">bb</span>++;\n          v8 = &<span class=\"supfact\">b</span>->v[v7];\n          v9 = <span class=\"supfact\">a</span>->v;\n          v10 = <span class=\"supfact\">a</span>->n++;\n          v9[v10] = *v8;\n        }\n      }\n    }\n    do {\n      if (<span class=\"supfact\">b</span>->v[<span class=\"supfact\">bb</span>]->index ==\n          <span class=\"supfact\">c</span>->v[<span class=\"supfact\">cc</span>]->index) {\n        ++<span class=\"supfact\">bb</span>;\n        ++<span class=\"supfact\">cc</span>;\n        goto LABEL_2;\n      }\n      if (<span class=\"supfact\">b</span>->v[<span class=\"supfact\">bb</span>]->index >=\n          <span class=\"supfact\">c</span>->v[<span class=\"supfact\">cc</span>]->index) {\n        ++<span class=\"supfact\">cc</span>;\n        goto Lagainc;\n      }\n      if (<span class=\"supfact\">a</span>->v) {\n        if (<span class=\"supfact\">a</span>->v == <span class=\"supfact\">a</span>->e) {\n          if (<span class=\"supfact\">a</span>->n > Number)\n            goto LABEL_23;\n        } else if ((<span class=\"supfact\">a</span>->n & Number) == Number) {\n        LABEL_23:\n          v20 = <span class=\"supfact\">bb</span>++;\n          vec_add_internal(<span class=\"supfact\">a</span>, <span class=\"supfact\">b</span>->v[v20]);\n          continue;\n        }\n        v16 = <span class=\"supfact\">bb</span>++;\n        v17 = &<span class=\"supfact\">b</span>->v[v16];\n        v18 = <span class=\"supfact\">a</span>->v;\n        v19 = <span class=\"supfact\">a</span>->n++;\n        v18[v19] = *v17;\n      } else {\n        v12 = <span class=\"supfact\">bb</span>++;\n        v13 = &<span class=\"supfact\">b</span>->v[v12];\n        <span class=\"supfact\">a</span>->v = <span class=\"supfact\">a</span>->e;\n        v14 = <span class=\"supfact\">a</span>->v;\n        v15 = <span class=\"supfact\">a</span>->n++;\n        v14[v15] = *v13;\n      }\n    } while (<span class=\"supfact\">b</span>->n > <span class=\"supfact\">bb</span>);\n  }\n}", "var": [{"name": "a1", "type": "STATE *", "pred_name": "state", "ref_name": "a", "ref_type": "VecAction *"}, {"name": "a2", "type": "disappear", "pred_name": "", "ref_name": "b", "ref_type": "VecAction *"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "c", "ref_type": "VecAction *"}, {"name": "v25", "type": "unsigned int", "pred_name": "min", "ref_name": "cc", "ref_type": "unsigned int"}, {"name": "v26", "type": "unsigned int", "pred_name": "i", "ref_name": "bb", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "Sciumo", "repo_name": "arb", "path": "Sciumo/arb/ce5d4f90609adf1c789f6637918c77220827be927c76dd72cc07d89539c3a140", "path_in_repo": "Sciumo/arb/GDE/AxML/axml", "objdump": "00000000004053bb <getntrees>:\n  4053bb:\t55                   \tpush   %rbp\n  4053bc:\t48 89 e5             \tmov    %rsp,%rbp\n  4053bf:\t48 83 ec 10          \tsub    $0x10,%rsp\n  4053c3:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  4053c7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4053cb:\t48 8d 50 24          \tlea    0x24(%rax),%rdx\n  4053cf:\t48 8b 05 5a 0d 01 00 \tmov    0x10d5a(%rip),%rax        # 416130 <stdin@@GLIBC_2.2.5>\n  4053d6:\tbe 59 12 41 00       \tmov    $0x411259,%esi\n  4053db:\t48 89 c7             \tmov    %rax,%rdi\n  4053de:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4053e3:\te8 68 bc ff ff       \tcallq  401050 <__isoc99_fscanf@plt>\n  4053e8:\t83 f8 01             \tcmp    $0x1,%eax\n  4053eb:\t75 0f                \tjne    4053fc <getntrees+0x41>\n  4053ed:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  4053f2:\te8 68 d7 ff ff       \tcallq  402b5f <findch>\n  4053f7:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4053fa:\t75 11                \tjne    40540d <getntrees+0x52>\n  4053fc:\tbf 80 24 41 00       \tmov    $0x412480,%edi\n  405401:\te8 5a bc ff ff       \tcallq  401060 <puts@plt>\n  405406:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40540b:\teb 1e                \tjmp    40542b <getntrees+0x70>\n  40540d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405411:\t8b 40 20             \tmov    0x20(%rax),%eax\n  405414:\t85 c0                \ttest   %eax,%eax\n  405416:\t75 0e                \tjne    405426 <getntrees+0x6b>\n  405418:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40541c:\t8b 50 24             \tmov    0x24(%rax),%edx\n  40541f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405423:\t89 50 20             \tmov    %edx,0x20(%rax)\n  405426:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40542b:\tc9                   \tleaveq \n  40542c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall getntrees(__int64 a1) {\n  __int64 result;\n  if ((unsigned int)__isoc99_fscanf() == Number &&\n      (unsigned int)findch(Number) != Number) {\n    if (!*(_DWORD *)(a1 + Number))\n      *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number);\n    result = Number L;\n  } else {\n    puts(String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "boolean __cdecl getntrees(analdef *<span class=\"supfact\">adef</span>) {\n  boolean <span class=\"supfact\">result</span>;\n  if ((unsigned int)__isoc99_fscanf() == Number && findch(Number) != Number) {\n    if (!<span class=\"supfact\">adef</span>->nkeep)\n      <span class=\"supfact\">adef</span>->nkeep = <span class=\"supfact\">adef</span>->numutrees;\n    <span class=\"supfact\">result</span> = Number;\n  } else {\n    puts(String);\n    <span class=\"supfact\">result</span> = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "vector *", "pred_name": "v", "ref_name": "adef", "ref_type": "analdef *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "boolean"}], "body_in_train": false}, {"repo_owner": "rofl0r", "repo_name": "agsutils", "path": "rofl0r/agsutils/f31a77ae49e423a419e736ca78645b46750de045054c0d2c81e3cdfdfc19d08f", "path_in_repo": "rofl0r/agsutils//agssemble", "objdump": "000000000040683f <read_new_new_enc_format_clib>:\n  40683f:\t55                   \tpush   %rbp\n  406840:\t48 89 e5             \tmov    %rsp,%rbp\n  406843:\t48 83 ec 20          \tsub    $0x20,%rsp\n  406847:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40684b:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40684f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  406853:\t48 89 c7             \tmov    %rax,%rdi\n  406856:\te8 ca f4 ff ff       \tcallq  405d25 <ByteArray_readInt>\n  40685b:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40685e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  406861:\t05 0e 7f 8e 00       \tadd    $0x8e7f0e,%eax\n  406866:\t89 c7                \tmov    %eax,%edi\n  406868:\te8 7d fc ff ff       \tcallq  4064ea <init_pseudo_rand_gen>\n  40686d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  406871:\t48 89 c7             \tmov    %rax,%rdi\n  406874:\te8 ac ff ff ff       \tcallq  406825 <getw_enc>\n  406879:\t48 63 d0             \tmovslq %eax,%rdx\n  40687c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406880:\t48 89 90 e8 04 00 00 \tmov    %rdx,0x4e8(%rax)\n  406887:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  40688e:\t00 \n  40688f:\teb 3d                \tjmp    4068ce <read_new_new_enc_format_clib+0x8f>\n  406891:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  406895:\t48 89 d0             \tmov    %rdx,%rax\n  406898:\t48 c1 e0 02          \tshl    $0x2,%rax\n  40689c:\t48 01 d0             \tadd    %rdx,%rax\n  40689f:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  4068a6:\t00 \n  4068a7:\t48 01 d0             \tadd    %rdx,%rax\n  4068aa:\t48 01 c0             \tadd    %rax,%rax\n  4068ad:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4068b1:\t48 8d 0c 10          \tlea    (%rax,%rdx,1),%rcx\n  4068b5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4068b9:\tba 32 00 00 00       \tmov    $0x32,%edx\n  4068be:\t48 89 c6             \tmov    %rax,%rsi\n  4068c1:\t48 89 cf             \tmov    %rcx,%rdi\n  4068c4:\te8 dd fe ff ff       \tcallq  4067a6 <fgetstring_enc>\n  4068c9:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  4068ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4068d2:\t48 8b 80 e8 04 00 00 \tmov    0x4e8(%rax),%rax\n  4068d9:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  4068dd:\t72 b2                \tjb     406891 <read_new_new_enc_format_clib+0x52>\n  4068df:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4068e3:\t48 89 c7             \tmov    %rax,%rdi\n  4068e6:\te8 3a ff ff ff       \tcallq  406825 <getw_enc>\n  4068eb:\t48 63 d0             \tmovslq %eax,%rdx\n  4068ee:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4068f2:\t48 89 90 c0 a6 10 00 \tmov    %rdx,0x10a6c0(%rax)\n  4068f9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4068fd:\t48 8b 80 c0 a6 10 00 \tmov    0x10a6c0(%rax),%rax\n  406904:\t48 3d 10 27 00 00    \tcmp    $0x2710,%rax\n  40690a:\t76 0a                \tjbe    406916 <read_new_new_enc_format_clib+0xd7>\n  40690c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  406911:\te9 f0 00 00 00       \tjmpq   406a06 <read_new_new_enc_format_clib+0x1c7>\n  406916:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  40691d:\t00 \n  40691e:\teb 45                \tjmp    406965 <read_new_new_enc_format_clib+0x126>\n  406920:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  406924:\t48 89 d0             \tmov    %rdx,%rax\n  406927:\t48 c1 e0 02          \tshl    $0x2,%rax\n  40692b:\t48 01 d0             \tadd    %rdx,%rax\n  40692e:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  406935:\t00 \n  406936:\t48 01 d0             \tadd    %rdx,%rax\n  406939:\t48 c1 e0 02          \tshl    $0x2,%rax\n  40693d:\t48 8d 90 f0 04 00 00 \tlea    0x4f0(%rax),%rdx\n  406944:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406948:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n  40694c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  406950:\tba 64 00 00 00       \tmov    $0x64,%edx\n  406955:\t48 89 c6             \tmov    %rax,%rsi\n  406958:\t48 89 cf             \tmov    %rcx,%rdi\n  40695b:\te8 46 fe ff ff       \tcallq  4067a6 <fgetstring_enc>\n  406960:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  406965:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406969:\t48 8b 80 c0 a6 10 00 \tmov    0x10a6c0(%rax),%rax\n  406970:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  406974:\t72 aa                \tjb     406920 <read_new_new_enc_format_clib+0xe1>\n  406976:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40697a:\t48 8b 90 c0 a6 10 00 \tmov    0x10a6c0(%rax),%rdx\n  406981:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406985:\t48 8d 88 30 47 0f 00 \tlea    0xf4730(%rax),%rcx\n  40698c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  406990:\t48 89 ce             \tmov    %rcx,%rsi\n  406993:\t48 89 c7             \tmov    %rax,%rdi\n  406996:\te8 60 fd ff ff       \tcallq  4066fb <fread_data_intarray_enc>\n  40699b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40699f:\t48 8b 90 c0 a6 10 00 \tmov    0x10a6c0(%rax),%rdx\n  4069a6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4069aa:\t48 8d 88 70 e3 0f 00 \tlea    0xfe370(%rax),%rcx\n  4069b1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4069b5:\t48 89 ce             \tmov    %rcx,%rsi\n  4069b8:\t48 89 c7             \tmov    %rax,%rdi\n  4069bb:\te8 3b fd ff ff       \tcallq  4066fb <fread_data_intarray_enc>\n  4069c0:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  4069c7:\t00 \n  4069c8:\teb 26                \tjmp    4069f0 <read_new_new_enc_format_clib+0x1b1>\n  4069ca:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4069ce:\t48 89 c7             \tmov    %rax,%rdi\n  4069d1:\te8 91 fc ff ff       \tcallq  406667 <fread_data_enc_byte>\n  4069d6:\t89 c1                \tmov    %eax,%ecx\n  4069d8:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4069dc:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4069e0:\t48 01 d0             \tadd    %rdx,%rax\n  4069e3:\t48 05 b0 7f 10 00    \tadd    $0x107fb0,%rax\n  4069e9:\t88 08                \tmov    %cl,(%rax)\n  4069eb:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n  4069f0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4069f4:\t48 8b 80 c0 a6 10 00 \tmov    0x10a6c0(%rax),%rax\n  4069fb:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  4069ff:\t72 c9                \tjb     4069ca <read_new_new_enc_format_clib+0x18b>\n  406a01:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406a06:\tc9                   \tleaveq \n  406a07:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_new_new_enc_format_clib(__int64 a1, __int64 a2) {\n  int v3;\n  unsigned __int64 i;\n  unsigned __int64 j;\n  unsigned __int64 k;\n  v3 = ByteArray_readInt(a2);\n  init_pseudo_rand_gen(v3 + Number);\n  *(_QWORD *)(a1 + Number) = (int)getw_enc(a2);\n  for (i = Number L; i < *(_QWORD *)(a1 + Number); ++i)\n    fgetstring_enc(Number * i + a1, a2, Number);\n  *(_QWORD *)(a1 + Number) = (int)getw_enc(a2);\n  if (*(_QWORD *)(a1 + Number) > Number)\n    return Number;\n  for (j = Number L; j < *(_QWORD *)(a1 + Number); ++j)\n    fgetstring_enc(Number * j + Number + a1, a2, Number);\n  fread_data_intarray_enc(a2, a1 + Number, *(_QWORD *)(a1 + Number));\n  fread_data_intarray_enc(a2, a1 + Number, *(_QWORD *)(a1 + Number));\n  for (k = Number L; k < *(_QWORD *)(a1 + Number); ++k)\n    *(_BYTE *)(a1 + k + Number) = fread_data_enc_byte(a2);\n  return Number L;\n}", "code_t": "int __cdecl read_new_new_enc_format_clib(MultiFileLibNew *<span class=\"supfact\">mfl</span>,\n                                         ByteArray *<span class=\"supfact\">wout</span>) {\n  int <span class=\"supfact\">randSeed</span>;\n  size_t aa;\n  size_t aaa;\n  size_t aab;\n  <span class=\"supfact\">randSeed</span> = ByteArray_readInt(<span class=\"supfact\">wout</span>);\n  init_pseudo_rand_gen(<span class=\"supfact\">randSeed</span> + Number);\n  <span class=\"supfact\">mfl</span>->num_data_files = getw_enc(<span class=\"supfact\">wout</span>);\n  for (aa = Number L; aa < <span class=\"supfact\">mfl</span>->num_data_files; ++aa)\n    fgetstring_enc(<span class=\"supfact\">mfl</span>->data_filenames[aa],\n                   <span class=\"supfact\">wout</span>, Number);\n  <span class=\"supfact\">mfl</span>->num_files = getw_enc(<span class=\"supfact\">wout</span>);\n  if (<span class=\"supfact\">mfl</span>->num_files > Number)\n    return Number;\n  for (aaa = Number L; aaa < <span class=\"supfact\">mfl</span>->num_files; ++aaa)\n    fgetstring_enc(<span class=\"supfact\">mfl</span>->filenames[aaa], <span class=\"supfact\">wout</span>,\n                   Number);\n  fread_data_intarray_enc(<span class=\"supfact\">wout</span>, <span class=\"supfact\">mfl</span>->offset,\n                          <span class=\"supfact\">mfl</span>->num_files);\n  fread_data_intarray_enc(<span class=\"supfact\">wout</span>, <span class=\"supfact\">mfl</span>->length,\n                          <span class=\"supfact\">mfl</span>->num_files);\n  for (aab = Number L; aab < <span class=\"supfact\">mfl</span>->num_files; ++aab)\n    <span class=\"supfact\">mfl</span>->file_datafile[aab] =\n        fread_data_enc_byte(<span class=\"supfact\">wout</span>);\n  return Number;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "entries", "ref_name": "mfl", "ref_type": "MultiFileLibNew *"}, {"name": "a2", "type": "__unk__", "pred_name": "array", "ref_name": "wout", "ref_type": "ByteArray *"}, {"name": "v3", "type": "unsigned int", "pred_name": "pos", "ref_name": "randSeed", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "yoshii", "repo_name": "qemu", "path": "yoshii/qemu/6aabd19c671ccc3be26feed9900465dea431ffcf535bc65ec813d90a6398d396", "path_in_repo": "yoshii/qemu//alpha-linux-user/signal.o", "objdump": "0000000000000d15 <free_sigqueue>:\n     d15:\t55                   \tpush   %rbp\n     d16:\t48 89 e5             \tmov    %rsp,%rbp\n     d19:\t48 83 ec 20          \tsub    $0x20,%rsp\n     d1d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     d21:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     d25:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     d2c:\t00 00 \n     d2e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d32:\t31 c0                \txor    %eax,%eax\n     d34:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d38:\t48 8b 80 a8 87 00 00 \tmov    0x87a8(%rax),%rax\n     d3f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     d43:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d47:\t48 8b 90 28 68 02 00 \tmov    0x26828(%rax),%rdx\n     d4e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     d52:\t48 89 10             \tmov    %rdx,(%rax)\n     d55:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d59:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     d5d:\t48 89 90 28 68 02 00 \tmov    %rdx,0x26828(%rax)\n     d64:\t90                   \tnop\n     d65:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     d69:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     d70:\t00 00 \n     d72:\t74 05                \tje     d79 <free_sigqueue+0x64>\n     d74:\te8 00 00 00 00       \tcallq  d79 <free_sigqueue+0x64>\n     d79:\tc9                   \tleaveq \n     d7a:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall free_sigqueue(__int64 a1, _QWORD *a2) {\n  __int64 v3;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  v3 = *(_QWORD *)(a1 + Number);\n  *a2 = *(_QWORD *)(v3 + Number);\n  *(_QWORD *)(v3 + Number) = a2;\n  return __readfsqword(Number) ^ v4;\n}", "code_t": "void __cdecl free_sigqueue(CPUAlphaState *<span class=\"supfact\">env</span>,\n                           sigqueue *<span class=\"supfact\">q</span>) {\n  TaskState_0 *<span class=\"supfact\">ts</span>;\n  <span class=\"supfact\">ts</span> = (TaskState_0 *)<span class=\"supfact\">env</span>->opaque;\n  <span class=\"supfact\">q</span>->next = <span class=\"supfact\">ts</span>->first_free;\n  <span class=\"supfact\">ts</span>->first_free = <span class=\"supfact\">q</span>;\n}", "var": [{"name": "a1", "type": "CPUSH4State *", "pred_name": "env", "ref_name": "env", "ref_type": "CPUAlphaState *"}, {"name": "a2", "type": "sigqueue *", "pred_name": "q", "ref_name": "q", "ref_type": "sigqueue *"}, {"name": "v3", "type": "TaskState_0 *", "pred_name": "ts", "ref_name": "ts", "ref_type": "TaskState_0 *"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "jpzm", "repo_name": "wii88", "path": "jpzm/wii88/f8662e7e398024e0909d906ee8e2abb9448093fd26b113d43a519716319f0a0f", "path_in_repo": "jpzm/wii88//obj/quasi88.o", "objdump": "0000000000002435 <quasi88_drag_and_drop>:\n    2435:\t55                   \tpush   %rbp\n    2436:\t48 89 e5             \tmov    %rsp,%rbp\n    2439:\t48 83 ec 10          \tsub    $0x10,%rsp\n    243d:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    2441:\te8 00 00 00 00       \tcallq  2446 <quasi88_drag_and_drop+0x11>\n    2446:\t85 c0                \ttest   %eax,%eax\n    2448:\t75 09                \tjne    2453 <quasi88_drag_and_drop+0x1e>\n    244a:\te8 00 00 00 00       \tcallq  244f <quasi88_drag_and_drop+0x1a>\n    244f:\t85 c0                \ttest   %eax,%eax\n    2451:\t74 5e                \tje     24b1 <quasi88_drag_and_drop+0x7c>\n    2453:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2457:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    245c:\t48 89 c7             \tmov    %rax,%rdi\n    245f:\te8 00 00 00 00       \tcallq  2464 <quasi88_drag_and_drop+0x2f>\n    2464:\t85 c0                \ttest   %eax,%eax\n    2466:\t74 2e                \tje     2496 <quasi88_drag_and_drop+0x61>\n    2468:\tba 00 00 00 00       \tmov    $0x0,%edx\n    246d:\tbe a5 00 00 00       \tmov    $0xa5,%esi\n    2472:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    2477:\te8 00 00 00 00       \tcallq  247c <quasi88_drag_and_drop+0x47>\n    247c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2481:\te8 00 00 00 00       \tcallq  2486 <quasi88_drag_and_drop+0x51>\n    2486:\te8 00 00 00 00       \tcallq  248b <quasi88_drag_and_drop+0x56>\n    248b:\t85 c0                \ttest   %eax,%eax\n    248d:\t74 1b                \tje     24aa <quasi88_drag_and_drop+0x75>\n    248f:\te8 00 00 00 00       \tcallq  2494 <quasi88_drag_and_drop+0x5f>\n    2494:\teb 14                \tjmp    24aa <quasi88_drag_and_drop+0x75>\n    2496:\tba 00 00 00 00       \tmov    $0x0,%edx\n    249b:\tbe 26 02 00 00       \tmov    $0x226,%esi\n    24a0:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    24a5:\te8 00 00 00 00       \tcallq  24aa <quasi88_drag_and_drop+0x75>\n    24aa:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    24af:\teb 05                \tjmp    24b6 <quasi88_drag_and_drop+0x81>\n    24b1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24b6:\tc9                   \tleaveq \n    24b7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall quasi88_drag_and_drop(__int64 a1) {\n  if (!quasi88_is_exec() && !quasi88_is_pause())\n    return Number L;\n  if ((unsigned int)quasi88_disk_insert_all(a1, Number L)) {\n    status_message(Number L, Number L, String);\n    quasi88_reset(Number L);\n    if (quasi88_is_pause())\n      quasi88_exec();\n  } else {\n    status_message(Number L, Number L, String);\n  }\n  return Number L;\n}", "code_t": "int __cdecl quasi88_drag_and_drop(const char *<span class=\"supfact\">filename</span>) {\n  if (!quasi88_is_exec() && !quasi88_is_pause())\n    return Number;\n  if (quasi88_disk_insert_all(<span class=\"supfact\">filename</span>, Number)) {\n    status_message(Number L, Number L, String);\n    quasi88_reset(Number L);\n    if (quasi88_is_pause())\n      quasi88_exec();\n  } else {\n    status_message(Number L, Number L, String);\n  }\n  return Number;\n}", "var": [{"name": "a1", "type": "lua_State_0 *", "pred_name": "L", "ref_name": "filename", "ref_type": "const char *"}], "body_in_train": false}, {"repo_owner": "gabrielleLQX", "repo_name": "SAM3_codeqemu", "path": "gabrielleLQX/SAM3_codeqemu/e00037c9aa8190e1d1bf92edca1bd43b0eef8816a517a7c1eb133792cb123d54", "path_in_repo": "gabrielleLQX/SAM3_codeqemu//hw/ssi/xilinx_spips.o", "objdump": "00000000000003f6 <xilinx_spips_update_ixr>:\n     3f6:\t55                   \tpush   %rbp\n     3f7:\t48 89 e5             \tmov    %rsp,%rbp\n     3fa:\t53                   \tpush   %rbx\n     3fb:\t48 83 ec 28          \tsub    $0x28,%rsp\n     3ff:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     403:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     40a:\t00 00 \n     40c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     410:\t31 c0                \txor    %eax,%eax\n     412:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     416:\t8b 80 ac 25 00 00    \tmov    0x25ac(%rax),%eax\n     41c:\t85 c0                \ttest   %eax,%eax\n     41e:\t0f 88 28 01 00 00    \tjs     54c <xilinx_spips_update_ixr+0x156>\n     424:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     428:\t8b 80 10 25 00 00    \tmov    0x2510(%rax),%eax\n     42e:\t83 e0 43             \tand    $0x43,%eax\n     431:\t89 c2                \tmov    %eax,%edx\n     433:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     437:\t89 90 10 25 00 00    \tmov    %edx,0x2510(%rax)\n     43d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     441:\t48 05 d8 24 00 00    \tadd    $0x24d8,%rax\n     447:\t48 89 c7             \tmov    %rax,%rdi\n     44a:\te8 00 00 00 00       \tcallq  44f <xilinx_spips_update_ixr+0x59>\n     44f:\t84 c0                \ttest   %al,%al\n     451:\t74 07                \tje     45a <xilinx_spips_update_ixr+0x64>\n     453:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n     458:\teb 05                \tjmp    45f <xilinx_spips_update_ixr+0x69>\n     45a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     45f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     463:\t8b 90 e8 24 00 00    \tmov    0x24e8(%rax),%edx\n     469:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     46d:\t8b 80 38 25 00 00    \tmov    0x2538(%rax),%eax\n     473:\t39 c2                \tcmp    %eax,%edx\n     475:\t72 07                \tjb     47e <xilinx_spips_update_ixr+0x88>\n     477:\tb8 10 00 00 00       \tmov    $0x10,%eax\n     47c:\teb 05                \tjmp    483 <xilinx_spips_update_ixr+0x8d>\n     47e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     483:\t89 cb                \tmov    %ecx,%ebx\n     485:\t09 c3                \tor     %eax,%ebx\n     487:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     48b:\t48 05 f0 24 00 00    \tadd    $0x24f0,%rax\n     491:\t48 89 c7             \tmov    %rax,%rdi\n     494:\te8 00 00 00 00       \tcallq  499 <xilinx_spips_update_ixr+0xa3>\n     499:\t84 c0                \ttest   %al,%al\n     49b:\t74 07                \tje     4a4 <xilinx_spips_update_ixr+0xae>\n     49d:\tb8 08 00 00 00       \tmov    $0x8,%eax\n     4a2:\teb 05                \tjmp    4a9 <xilinx_spips_update_ixr+0xb3>\n     4a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     4a9:\t09 d8                \tor     %ebx,%eax\n     4ab:\t89 c1                \tmov    %eax,%ecx\n     4ad:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4b1:\t8b 90 00 25 00 00    \tmov    0x2500(%rax),%edx\n     4b7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4bb:\t8b 80 34 25 00 00    \tmov    0x2534(%rax),%eax\n     4c1:\t39 c2                \tcmp    %eax,%edx\n     4c3:\t73 07                \tjae    4cc <xilinx_spips_update_ixr+0xd6>\n     4c5:\tb8 04 00 00 00       \tmov    $0x4,%eax\n     4ca:\teb 05                \tjmp    4d1 <xilinx_spips_update_ixr+0xdb>\n     4cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     4d1:\t09 c8                \tor     %ecx,%eax\n     4d3:\t89 c2                \tmov    %eax,%edx\n     4d5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4d9:\t8b 80 10 25 00 00    \tmov    0x2510(%rax),%eax\n     4df:\t09 c2                \tor     %eax,%edx\n     4e1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4e5:\t89 90 10 25 00 00    \tmov    %edx,0x2510(%rax)\n     4eb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4ef:\t8b 90 1c 25 00 00    \tmov    0x251c(%rax),%edx\n     4f5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4f9:\t8b 80 10 25 00 00    \tmov    0x2510(%rax),%eax\n     4ff:\t21 d0                \tand    %edx,%eax\n     501:\t83 e0 7f             \tand    $0x7f,%eax\n     504:\t85 c0                \ttest   %eax,%eax\n     506:\t0f 95 c0             \tsetne  %al\n     509:\t0f b6 c0             \tmovzbl %al,%eax\n     50c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     50f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     513:\t8b 80 c0 24 00 00    \tmov    0x24c0(%rax),%eax\n     519:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n     51c:\t74 2f                \tje     54d <xilinx_spips_update_ixr+0x157>\n     51e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     522:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     525:\t89 90 c0 24 00 00    \tmov    %edx,0x24c0(%rax)\n     52b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     52f:\t8b 90 c0 24 00 00    \tmov    0x24c0(%rax),%edx\n     535:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     539:\t48 8b 80 b8 24 00 00 \tmov    0x24b8(%rax),%rax\n     540:\t89 d6                \tmov    %edx,%esi\n     542:\t48 89 c7             \tmov    %rax,%rdi\n     545:\te8 00 00 00 00       \tcallq  54a <xilinx_spips_update_ixr+0x154>\n     54a:\teb 01                \tjmp    54d <xilinx_spips_update_ixr+0x157>\n     54c:\t90                   \tnop\n     54d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     551:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     558:\t00 00 \n     55a:\t74 05                \tje     561 <xilinx_spips_update_ixr+0x16b>\n     55c:\te8 00 00 00 00       \tcallq  561 <xilinx_spips_update_ixr+0x16b>\n     561:\t48 83 c4 28          \tadd    $0x28,%rsp\n     565:\t5b                   \tpop    %rbx\n     566:\t5d                   \tpop    %rbp\n     567:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall xilinx_spips_update_ixr(__int64 a1) {\n  int v1;\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  int v8;\n  unsigned __int64 v9;\n  v9 = __readfsqword(Number);\n  if (*(int *)(a1 + Number) >= Number) {\n    *(_DWORD *)(a1 + Number) &= Number;\n    if ((unsigned __int8)fifo8_is_full(a1 + Number))\n      v1 = Number;\n    else\n      v1 = Number;\n    if (*(_DWORD *)(a1 + Number) < *(_DWORD *)(a1 + Number))\n      v2 = Number;\n    else\n      v2 = Number;\n    v3 = v2 | v1;\n    if ((unsigned __int8)fifo8_is_full(a1 + Number))\n      v4 = Number;\n    else\n      v4 = Number;\n    v5 = v3 | v4;\n    if (*(_DWORD *)(a1 + Number) >= *(_DWORD *)(a1 + Number))\n      v6 = Number;\n    else\n      v6 = Number;\n    *(_DWORD *)(a1 + Number) |= v5 | v6;\n    v8 = ((unsigned __int8)*(_DWORD *)(a1 + Number) &\n          (unsigned __int8)*(_DWORD *)(a1 + Number) & Number) != Number;\n    if (v8 != *(_DWORD *)(a1 + Number)) {\n      *(_DWORD *)(a1 + Number) = v8;\n      qemu_set_irq(*(_QWORD *)(a1 + Number), *(unsigned int *)(a1 + Number));\n    }\n  }\n  return __readfsqword(Number) ^ v9;\n}", "code_t": "void __cdecl xilinx_spips_update_ixr(XilinxSPIPS *<span class=\"supfact\">s</span>) {\n  int v1;\n  int v2;\n  int <span class=\"supfact\">v3</span>;\n  int v4;\n  int v5;\n  int v6;\n  int <span class=\"supfact\">new_irqline</span>;\n  if ((<span class=\"supfact\">s</span>->regs[Number] & Number) == Number) {\n    <span class=\"supfact\">s</span>->regs[Number] &= Number;\n    if ((unsigned __int8)fifo8_is_full(&<span class=\"supfact\">s</span>->rx_fifo))\n      v1 = Number;\n    else\n      v1 = Number;\n    if (<span class=\"supfact\">s</span>->rx_fifo.num < <span class=\"supfact\">s</span>->regs[Number])\n      v2 = Number;\n    else\n      v2 = Number;\n    <span class=\"supfact\">v3</span> = v2 | v1;\n    if ((unsigned __int8)fifo8_is_full(&<span class=\"supfact\">s</span>->tx_fifo))\n      v4 = Number;\n    else\n      v4 = Number;\n    v5 = <span class=\"supfact\">v3</span> | v4;\n    if (<span class=\"supfact\">s</span>->tx_fifo.num >= <span class=\"supfact\">s</span>->regs[Number])\n      v6 = Number;\n    else\n      v6 = Number;\n    <span class=\"supfact\">s</span>->regs[Number] |= v5 | v6;\n    <span class=\"supfact\">new_irqline</span> =\n        ((unsigned __int8)<span class=\"supfact\">s</span>->regs[Number] &\n         (unsigned __int8)<span class=\"supfact\">s</span>->regs[Number] & Number) != Number;\n    if (<span class=\"supfact\">new_irqline</span> != <span class=\"supfact\">s</span>->irqline) {\n      <span class=\"supfact\">s</span>->irqline = <span class=\"supfact\">new_irqline</span>;\n      qemu_set_irq(<span class=\"supfact\">s</span>->irq,\n                   (unsigned int)<span class=\"supfact\">s</span>->irqline);\n    }\n  }\n}", "var": [{"name": "a1", "type": "XilinxSPIPS *", "pred_name": "s", "ref_name": "s", "ref_type": "XilinxSPIPS *"}, {"name": "v3", "type": "int", "pred_name": "v3", "ref_name": "v3", "ref_type": "int"}, {"name": "v8", "type": "int", "pred_name": "new_irqline", "ref_name": "new_irqline", "ref_type": "int"}, {"name": "v9", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "wwAlarm", "repo_name": "Android", "path": "wwAlarm/Android/c0f0f75c9ad8baeed7d862318370bcdd8770d4a1db97a978eb36414b59e17a4a", "path_in_repo": "wwAlarm/Android/AVCodec/jni_ffmpeg/libavcodec/vc1dec.o", "objdump": "00000000000179d3 <vc1_decode_p_block>:\n   179d3:\t53                   \tpush   %rbx\n   179d4:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n   179db:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n   179e0:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n   179e5:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n   179e9:\t89 4c 24 08          \tmov    %ecx,0x8(%rsp)\n   179ed:\t44 89 44 24 04       \tmov    %r8d,0x4(%rsp)\n   179f2:\t44 89 0c 24          \tmov    %r9d,(%rsp)\n   179f6:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   179fb:\t48 89 84 24 c0 00 00 \tmov    %rax,0xc0(%rsp)\n   17a02:\t00 \n   17a03:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n   17a0a:\t00 \n   17a0b:\t48 05 58 30 00 00    \tadd    $0x3058,%rax\n   17a11:\t48 89 84 24 b8 00 00 \tmov    %rax,0xb8(%rsp)\n   17a18:\t00 \n   17a19:\tc7 84 24 d4 00 00 00 \tmovl   $0x0,0xd4(%rsp)\n   17a20:\t00 00 00 00 \n   17a24:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n   17a28:\t83 e0 07             \tand    $0x7,%eax\n   17a2b:\t89 84 24 cc 00 00 00 \tmov    %eax,0xcc(%rsp)\n   17a32:\tc7 84 24 c8 00 00 00 \tmovl   $0x0,0xc8(%rsp)\n   17a39:\t00 00 00 00 \n   17a3d:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n   17a44:\t00 \n   17a45:\t48 8b 90 68 18 00 00 \tmov    0x1868(%rax),%rdx\n   17a4c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   17a51:\t48 89 c7             \tmov    %rax,%rdi\n   17a54:\tff d2                \tcallq  *%rdx\n   17a56:\t83 7c 24 04 ff       \tcmpl   $0xffffffff,0x4(%rsp)\n   17a5b:\t0f 85 18 04 00 00    \tjne    17e79 <vc1_decode_p_block+0x4a6>\n   17a61:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   17a66:\t8b 98 00 3a 00 00    \tmov    0x3a00(%rax),%ebx\n   17a6c:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   17a71:\t8b 80 00 3a 00 00    \tmov    0x3a00(%rax),%eax\n   17a77:\t48 63 d0             \tmovslq %eax,%rdx\n   17a7a:\t48 89 d0             \tmov    %rdx,%rax\n   17a7d:\t48 01 c0             \tadd    %rax,%rax\n   17a80:\t48 01 d0             \tadd    %rdx,%rax\n   17a83:\t48 c1 e0 03          \tshl    $0x3,%rax\n   17a87:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n   17a8d:\t48 8b 00             \tmov    (%rax),%rax\n   17a90:\t48 8b 94 24 b8 00 00 \tmov    0xb8(%rsp),%rdx\n   17a97:\t00 \n   17a98:\t48 89 94 24 a8 00 00 \tmov    %rdx,0xa8(%rsp)\n   17a9f:\t00 \n   17aa0:\t48 89 84 24 a0 00 00 \tmov    %rax,0xa0(%rsp)\n   17aa7:\t00 \n   17aa8:\tc7 84 24 9c 00 00 00 \tmovl   $0x5,0x9c(%rsp)\n   17aaf:\t05 00 00 00 \n   17ab3:\tc7 84 24 98 00 00 00 \tmovl   $0x1,0x98(%rsp)\n   17aba:\t01 00 00 00 \n   17abe:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n   17ac5:\t00 \n   17ac6:\t8b 40 10             \tmov    0x10(%rax),%eax\n   17ac9:\t89 84 24 94 00 00 00 \tmov    %eax,0x94(%rsp)\n   17ad0:\tc7 84 24 90 00 00 00 \tmovl   $0x0,0x90(%rsp)\n   17ad7:\t00 00 00 00 \n   17adb:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n   17ae2:\t00 \n   17ae3:\t8b 40 18             \tmov    0x18(%rax),%eax\n   17ae6:\t89 84 24 8c 00 00 00 \tmov    %eax,0x8c(%rsp)\n   17aed:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n   17af4:\t00 \n   17af5:\t48 8b 00             \tmov    (%rax),%rax\n   17af8:\t8b 94 24 94 00 00 00 \tmov    0x94(%rsp),%edx\n   17aff:\tc1 ea 03             \tshr    $0x3,%edx\n   17b02:\t89 d2                \tmov    %edx,%edx\n   17b04:\t48 01 d0             \tadd    %rdx,%rax\n   17b07:\t8b 00                \tmov    (%rax),%eax\n   17b09:\t89 84 24 88 00 00 00 \tmov    %eax,0x88(%rsp)\n   17b10:\t8b 84 24 88 00 00 00 \tmov    0x88(%rsp),%eax\n   17b17:\tc1 e0 08             \tshl    $0x8,%eax\n   17b1a:\t0f b7 d0             \tmovzwl %ax,%edx\n   17b1d:\t8b 84 24 88 00 00 00 \tmov    0x88(%rsp),%eax\n   17b24:\tc1 e8 08             \tshr    $0x8,%eax\n   17b27:\t0f b6 c0             \tmovzbl %al,%eax\n   17b2a:\t09 d0                \tor     %edx,%eax\n   17b2c:\tc1 e0 10             \tshl    $0x10,%eax\n   17b2f:\t89 c1                \tmov    %eax,%ecx\n   17b31:\t8b 84 24 88 00 00 00 \tmov    0x88(%rsp),%eax\n   17b38:\tc1 e8 10             \tshr    $0x10,%eax\n   17b3b:\tc1 e0 08             \tshl    $0x8,%eax\n   17b3e:\t0f b7 c0             \tmovzwl %ax,%eax\n   17b41:\t8b 94 24 88 00 00 00 \tmov    0x88(%rsp),%edx\n   17b48:\tc1 ea 18             \tshr    $0x18,%edx\n   17b4b:\t09 d0                \tor     %edx,%eax\n   17b4d:\t09 c1                \tor     %eax,%ecx\n   17b4f:\t89 ca                \tmov    %ecx,%edx\n   17b51:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n   17b58:\t83 e0 07             \tand    $0x7,%eax\n   17b5b:\t89 c1                \tmov    %eax,%ecx\n   17b5d:\td3 e2                \tshl    %cl,%edx\n   17b5f:\t89 d0                \tmov    %edx,%eax\n   17b61:\t89 84 24 90 00 00 00 \tmov    %eax,0x90(%rsp)\n   17b68:\t8b 84 24 9c 00 00 00 \tmov    0x9c(%rsp),%eax\n   17b6f:\t0f be d0             \tmovsbl %al,%edx\n   17b72:\t8b 84 24 90 00 00 00 \tmov    0x90(%rsp),%eax\n   17b79:\t89 d6                \tmov    %edx,%esi\n   17b7b:\t89 c7                \tmov    %eax,%edi\n   17b7d:\te8 c1 84 fe ff       \tcallq  43 <NEG_USR32>\n   17b82:\t89 84 24 84 00 00 00 \tmov    %eax,0x84(%rsp)\n   17b89:\t8b 84 24 84 00 00 00 \tmov    0x84(%rsp),%eax\n   17b90:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   17b97:\t00 \n   17b98:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n   17b9f:\t00 \n   17ba0:\t48 01 d0             \tadd    %rdx,%rax\n   17ba3:\t0f b7 00             \tmovzwl (%rax),%eax\n   17ba6:\t98                   \tcwtl   \n   17ba7:\t89 84 24 80 00 00 00 \tmov    %eax,0x80(%rsp)\n   17bae:\t8b 84 24 84 00 00 00 \tmov    0x84(%rsp),%eax\n   17bb5:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   17bbc:\t00 \n   17bbd:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n   17bc4:\t00 \n   17bc5:\t48 01 d0             \tadd    %rdx,%rax\n   17bc8:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n   17bcc:\t98                   \tcwtl   \n   17bcd:\t89 44 24 7c          \tmov    %eax,0x7c(%rsp)\n   17bd1:\t83 bc 24 98 00 00 00 \tcmpl   $0x1,0x98(%rsp)\n   17bd8:\t01 \n   17bd9:\t0f 8e 37 02 00 00    \tjle    17e16 <vc1_decode_p_block+0x443>\n   17bdf:\t83 7c 24 7c 00       \tcmpl   $0x0,0x7c(%rsp)\n   17be4:\t0f 89 2c 02 00 00    \tjns    17e16 <vc1_decode_p_block+0x443>\n   17bea:\t8b 94 24 9c 00 00 00 \tmov    0x9c(%rsp),%edx\n   17bf1:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n   17bf8:\t01 d0                \tadd    %edx,%eax\n   17bfa:\t39 84 24 8c 00 00 00 \tcmp    %eax,0x8c(%rsp)\n   17c01:\t0f 46 84 24 8c 00 00 \tcmovbe 0x8c(%rsp),%eax\n   17c08:\t00 \n   17c09:\t89 84 24 94 00 00 00 \tmov    %eax,0x94(%rsp)\n   17c10:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n   17c17:\t00 \n   17c18:\t48 8b 00             \tmov    (%rax),%rax\n   17c1b:\t8b 94 24 94 00 00 00 \tmov    0x94(%rsp),%edx\n   17c22:\tc1 ea 03             \tshr    $0x3,%edx\n   17c25:\t89 d2                \tmov    %edx,%edx\n   17c27:\t48 01 d0             \tadd    %rdx,%rax\n   17c2a:\t8b 00                \tmov    (%rax),%eax\n   17c2c:\t89 44 24 78          \tmov    %eax,0x78(%rsp)\n   17c30:\t8b 44 24 78          \tmov    0x78(%rsp),%eax\n   17c34:\tc1 e0 08             \tshl    $0x8,%eax\n   17c37:\t0f b7 d0             \tmovzwl %ax,%edx\n   17c3a:\t8b 44 24 78          \tmov    0x78(%rsp),%eax\n   17c3e:\tc1 e8 08             \tshr    $0x8,%eax\n   17c41:\t0f b6 c0             \tmovzbl %al,%eax\n   17c44:\t09 d0                \tor     %edx,%eax\n   17c46:\tc1 e0 10             \tshl    $0x10,%eax\n   17c49:\t89 c1                \tmov    %eax,%ecx\n   17c4b:\t8b 44 24 78          \tmov    0x78(%rsp),%eax\n   17c4f:\tc1 e8 10             \tshr    $0x10,%eax\n   17c52:\tc1 e0 08             \tshl    $0x8,%eax\n   17c55:\t0f b7 c0             \tmovzwl %ax,%eax\n   17c58:\t8b 54 24 78          \tmov    0x78(%rsp),%edx\n   17c5c:\tc1 ea 18             \tshr    $0x18,%edx\n   17c5f:\t09 d0                \tor     %edx,%eax\n   17c61:\t09 c1                \tor     %eax,%ecx\n   17c63:\t89 ca                \tmov    %ecx,%edx\n   17c65:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n   17c6c:\t83 e0 07             \tand    $0x7,%eax\n   17c6f:\t89 c1                \tmov    %eax,%ecx\n   17c71:\td3 e2                \tshl    %cl,%edx\n   17c73:\t89 d0                \tmov    %edx,%eax\n   17c75:\t89 84 24 90 00 00 00 \tmov    %eax,0x90(%rsp)\n   17c7c:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n   17c80:\tf7 d8                \tneg    %eax\n   17c82:\t89 44 24 74          \tmov    %eax,0x74(%rsp)\n   17c86:\t8b 44 24 74          \tmov    0x74(%rsp),%eax\n   17c8a:\t0f be d0             \tmovsbl %al,%edx\n   17c8d:\t8b 84 24 90 00 00 00 \tmov    0x90(%rsp),%eax\n   17c94:\t89 d6                \tmov    %edx,%esi\n   17c96:\t89 c7                \tmov    %eax,%edi\n   17c98:\te8 a6 83 fe ff       \tcallq  43 <NEG_USR32>\n   17c9d:\t8b 94 24 80 00 00 00 \tmov    0x80(%rsp),%edx\n   17ca4:\t01 d0                \tadd    %edx,%eax\n   17ca6:\t89 84 24 84 00 00 00 \tmov    %eax,0x84(%rsp)\n   17cad:\t8b 84 24 84 00 00 00 \tmov    0x84(%rsp),%eax\n   17cb4:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   17cbb:\t00 \n   17cbc:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n   17cc3:\t00 \n   17cc4:\t48 01 d0             \tadd    %rdx,%rax\n   17cc7:\t0f b7 00             \tmovzwl (%rax),%eax\n   17cca:\t98                   \tcwtl   \n   17ccb:\t89 84 24 80 00 00 00 \tmov    %eax,0x80(%rsp)\n   17cd2:\t8b 84 24 84 00 00 00 \tmov    0x84(%rsp),%eax\n   17cd9:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   17ce0:\t00 \n   17ce1:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n   17ce8:\t00 \n   17ce9:\t48 01 d0             \tadd    %rdx,%rax\n   17cec:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n   17cf0:\t98                   \tcwtl   \n   17cf1:\t89 44 24 7c          \tmov    %eax,0x7c(%rsp)\n   17cf5:\t83 bc 24 98 00 00 00 \tcmpl   $0x2,0x98(%rsp)\n   17cfc:\t02 \n   17cfd:\t0f 8e 13 01 00 00    \tjle    17e16 <vc1_decode_p_block+0x443>\n   17d03:\t83 7c 24 7c 00       \tcmpl   $0x0,0x7c(%rsp)\n   17d08:\t0f 89 08 01 00 00    \tjns    17e16 <vc1_decode_p_block+0x443>\n   17d0e:\t8b 54 24 74          \tmov    0x74(%rsp),%edx\n   17d12:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n   17d19:\t01 d0                \tadd    %edx,%eax\n   17d1b:\t39 84 24 8c 00 00 00 \tcmp    %eax,0x8c(%rsp)\n   17d22:\t0f 46 84 24 8c 00 00 \tcmovbe 0x8c(%rsp),%eax\n   17d29:\t00 \n   17d2a:\t89 84 24 94 00 00 00 \tmov    %eax,0x94(%rsp)\n   17d31:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n   17d38:\t00 \n   17d39:\t48 8b 00             \tmov    (%rax),%rax\n   17d3c:\t8b 94 24 94 00 00 00 \tmov    0x94(%rsp),%edx\n   17d43:\tc1 ea 03             \tshr    $0x3,%edx\n   17d46:\t89 d2                \tmov    %edx,%edx\n   17d48:\t48 01 d0             \tadd    %rdx,%rax\n   17d4b:\t8b 00                \tmov    (%rax),%eax\n   17d4d:\t89 44 24 70          \tmov    %eax,0x70(%rsp)\n   17d51:\t8b 44 24 70          \tmov    0x70(%rsp),%eax\n   17d55:\tc1 e0 08             \tshl    $0x8,%eax\n   17d58:\t0f b7 d0             \tmovzwl %ax,%edx\n   17d5b:\t8b 44 24 70          \tmov    0x70(%rsp),%eax\n   17d5f:\tc1 e8 08             \tshr    $0x8,%eax\n   17d62:\t0f b6 c0             \tmovzbl %al,%eax\n   17d65:\t09 d0                \tor     %edx,%eax\n   17d67:\tc1 e0 10             \tshl    $0x10,%eax\n   17d6a:\t89 c1                \tmov    %eax,%ecx\n   17d6c:\t8b 44 24 70          \tmov    0x70(%rsp),%eax\n   17d70:\tc1 e8 10             \tshr    $0x10,%eax\n   17d73:\tc1 e0 08             \tshl    $0x8,%eax\n   17d76:\t0f b7 c0             \tmovzwl %ax,%eax\n   17d79:\t8b 54 24 70          \tmov    0x70(%rsp),%edx\n   17d7d:\tc1 ea 18             \tshr    $0x18,%edx\n   17d80:\t09 d0                \tor     %edx,%eax\n   17d82:\t09 c1                \tor     %eax,%ecx\n   17d84:\t89 ca                \tmov    %ecx,%edx\n   17d86:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n   17d8d:\t83 e0 07             \tand    $0x7,%eax\n   17d90:\t89 c1                \tmov    %eax,%ecx\n   17d92:\td3 e2                \tshl    %cl,%edx\n   17d94:\t89 d0                \tmov    %edx,%eax\n   17d96:\t89 84 24 90 00 00 00 \tmov    %eax,0x90(%rsp)\n   17d9d:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n   17da1:\tf7 d8                \tneg    %eax\n   17da3:\t89 44 24 74          \tmov    %eax,0x74(%rsp)\n   17da7:\t8b 44 24 74          \tmov    0x74(%rsp),%eax\n   17dab:\t0f be d0             \tmovsbl %al,%edx\n   17dae:\t8b 84 24 90 00 00 00 \tmov    0x90(%rsp),%eax\n   17db5:\t89 d6                \tmov    %edx,%esi\n   17db7:\t89 c7                \tmov    %eax,%edi\n   17db9:\te8 85 82 fe ff       \tcallq  43 <NEG_USR32>\n   17dbe:\t8b 94 24 80 00 00 00 \tmov    0x80(%rsp),%edx\n   17dc5:\t01 d0                \tadd    %edx,%eax\n   17dc7:\t89 84 24 84 00 00 00 \tmov    %eax,0x84(%rsp)\n   17dce:\t8b 84 24 84 00 00 00 \tmov    0x84(%rsp),%eax\n   17dd5:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   17ddc:\t00 \n   17ddd:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n   17de4:\t00 \n   17de5:\t48 01 d0             \tadd    %rdx,%rax\n   17de8:\t0f b7 00             \tmovzwl (%rax),%eax\n   17deb:\t98                   \tcwtl   \n   17dec:\t89 84 24 80 00 00 00 \tmov    %eax,0x80(%rsp)\n   17df3:\t8b 84 24 84 00 00 00 \tmov    0x84(%rsp),%eax\n   17dfa:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   17e01:\t00 \n   17e02:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n   17e09:\t00 \n   17e0a:\t48 01 d0             \tadd    %rdx,%rax\n   17e0d:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n   17e11:\t98                   \tcwtl   \n   17e12:\t89 44 24 7c          \tmov    %eax,0x7c(%rsp)\n   17e16:\t8b 44 24 7c          \tmov    0x7c(%rsp),%eax\n   17e1a:\t89 c1                \tmov    %eax,%ecx\n   17e1c:\td3 a4 24 90 00 00 00 \tshll   %cl,0x90(%rsp)\n   17e23:\t8b 54 24 7c          \tmov    0x7c(%rsp),%edx\n   17e27:\t8b 84 24 94 00 00 00 \tmov    0x94(%rsp),%eax\n   17e2e:\t01 d0                \tadd    %edx,%eax\n   17e30:\t39 84 24 8c 00 00 00 \tcmp    %eax,0x8c(%rsp)\n   17e37:\t0f 46 84 24 8c 00 00 \tcmovbe 0x8c(%rsp),%eax\n   17e3e:\t00 \n   17e3f:\t89 84 24 94 00 00 00 \tmov    %eax,0x94(%rsp)\n   17e46:\t8b 94 24 94 00 00 00 \tmov    0x94(%rsp),%edx\n   17e4d:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n   17e54:\t00 \n   17e55:\t89 50 10             \tmov    %edx,0x10(%rax)\n   17e58:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n   17e5f:\t48 98                \tcltq   \n   17e61:\t48 63 d3             \tmovslq %ebx,%rdx\n   17e64:\t48 c1 e2 03          \tshl    $0x3,%rdx\n   17e68:\t48 01 d0             \tadd    %rdx,%rax\n   17e6b:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   17e72:\t89 84 24 cc 00 00 00 \tmov    %eax,0xcc(%rsp)\n   17e79:\t83 bc 24 cc 00 00 00 \tcmpl   $0x7,0xcc(%rsp)\n   17e80:\t07 \n   17e81:\t0f 85 30 03 00 00    \tjne    181b7 <vc1_decode_p_block+0x7e4>\n   17e87:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   17e8c:\t8b 80 00 3a 00 00    \tmov    0x3a00(%rax),%eax\n   17e92:\t48 63 d0             \tmovslq %eax,%rdx\n   17e95:\t48 89 d0             \tmov    %rdx,%rax\n   17e98:\t48 01 c0             \tadd    %rax,%rax\n   17e9b:\t48 01 d0             \tadd    %rdx,%rax\n   17e9e:\t48 c1 e0 03          \tshl    $0x3,%rax\n   17ea2:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n   17ea8:\t48 8b 00             \tmov    (%rax),%rax\n   17eab:\t48 8b 94 24 b8 00 00 \tmov    0xb8(%rsp),%rdx\n   17eb2:\t00 \n   17eb3:\t48 89 54 24 68       \tmov    %rdx,0x68(%rsp)\n   17eb8:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n   17ebd:\tc7 44 24 5c 06 00 00 \tmovl   $0x6,0x5c(%rsp)\n   17ec4:\t00 \n   17ec5:\tc7 44 24 58 01 00 00 \tmovl   $0x1,0x58(%rsp)\n   17ecc:\t00 \n   17ecd:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n   17ed2:\t8b 40 10             \tmov    0x10(%rax),%eax\n   17ed5:\t89 44 24 54          \tmov    %eax,0x54(%rsp)\n   17ed9:\tc7 44 24 50 00 00 00 \tmovl   $0x0,0x50(%rsp)\n   17ee0:\t00 \n   17ee1:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n   17ee6:\t8b 40 18             \tmov    0x18(%rax),%eax\n   17ee9:\t89 44 24 4c          \tmov    %eax,0x4c(%rsp)\n   17eed:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n   17ef2:\t48 8b 00             \tmov    (%rax),%rax\n   17ef5:\t8b 54 24 54          \tmov    0x54(%rsp),%edx\n   17ef9:\tc1 ea 03             \tshr    $0x3,%edx\n   17efc:\t89 d2                \tmov    %edx,%edx\n   17efe:\t48 01 d0             \tadd    %rdx,%rax\n   17f01:\t8b 00                \tmov    (%rax),%eax\n   17f03:\t89 44 24 48          \tmov    %eax,0x48(%rsp)\n   17f07:\t8b 44 24 48          \tmov    0x48(%rsp),%eax\n   17f0b:\tc1 e0 08             \tshl    $0x8,%eax\n   17f0e:\t0f b7 d0             \tmovzwl %ax,%edx\n   17f11:\t8b 44 24 48          \tmov    0x48(%rsp),%eax\n   17f15:\tc1 e8 08             \tshr    $0x8,%eax\n   17f18:\t0f b6 c0             \tmovzbl %al,%eax\n   17f1b:\t09 d0                \tor     %edx,%eax\n   17f1d:\tc1 e0 10             \tshl    $0x10,%eax\n   17f20:\t89 c1                \tmov    %eax,%ecx\n   17f22:\t8b 44 24 48          \tmov    0x48(%rsp),%eax\n   17f26:\tc1 e8 10             \tshr    $0x10,%eax\n   17f29:\tc1 e0 08             \tshl    $0x8,%eax\n   17f2c:\t0f b7 c0             \tmovzwl %ax,%eax\n   17f2f:\t8b 54 24 48          \tmov    0x48(%rsp),%edx\n   17f33:\tc1 ea 18             \tshr    $0x18,%edx\n   17f36:\t09 d0                \tor     %edx,%eax\n   17f38:\t09 c1                \tor     %eax,%ecx\n   17f3a:\t89 ca                \tmov    %ecx,%edx\n   17f3c:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n   17f40:\t83 e0 07             \tand    $0x7,%eax\n   17f43:\t89 c1                \tmov    %eax,%ecx\n   17f45:\td3 e2                \tshl    %cl,%edx\n   17f47:\t89 d0                \tmov    %edx,%eax\n   17f49:\t89 44 24 50          \tmov    %eax,0x50(%rsp)\n   17f4d:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n   17f51:\t0f be d0             \tmovsbl %al,%edx\n   17f54:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n   17f58:\t89 d6                \tmov    %edx,%esi\n   17f5a:\t89 c7                \tmov    %eax,%edi\n   17f5c:\te8 e2 80 fe ff       \tcallq  43 <NEG_USR32>\n   17f61:\t89 44 24 44          \tmov    %eax,0x44(%rsp)\n   17f65:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n   17f69:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   17f70:\t00 \n   17f71:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n   17f76:\t48 01 d0             \tadd    %rdx,%rax\n   17f79:\t0f b7 00             \tmovzwl (%rax),%eax\n   17f7c:\t98                   \tcwtl   \n   17f7d:\t89 44 24 40          \tmov    %eax,0x40(%rsp)\n   17f81:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n   17f85:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   17f8c:\t00 \n   17f8d:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n   17f92:\t48 01 d0             \tadd    %rdx,%rax\n   17f95:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n   17f99:\t98                   \tcwtl   \n   17f9a:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n   17f9e:\t83 7c 24 58 01       \tcmpl   $0x1,0x58(%rsp)\n   17fa3:\t0f 8e d1 01 00 00    \tjle    1817a <vc1_decode_p_block+0x7a7>\n   17fa9:\t83 7c 24 3c 00       \tcmpl   $0x0,0x3c(%rsp)\n   17fae:\t0f 89 c6 01 00 00    \tjns    1817a <vc1_decode_p_block+0x7a7>\n   17fb4:\t8b 54 24 5c          \tmov    0x5c(%rsp),%edx\n   17fb8:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n   17fbc:\t01 d0                \tadd    %edx,%eax\n   17fbe:\t39 44 24 4c          \tcmp    %eax,0x4c(%rsp)\n   17fc2:\t0f 46 44 24 4c       \tcmovbe 0x4c(%rsp),%eax\n   17fc7:\t89 44 24 54          \tmov    %eax,0x54(%rsp)\n   17fcb:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n   17fd0:\t48 8b 00             \tmov    (%rax),%rax\n   17fd3:\t8b 54 24 54          \tmov    0x54(%rsp),%edx\n   17fd7:\tc1 ea 03             \tshr    $0x3,%edx\n   17fda:\t89 d2                \tmov    %edx,%edx\n   17fdc:\t48 01 d0             \tadd    %rdx,%rax\n   17fdf:\t8b 00                \tmov    (%rax),%eax\n   17fe1:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n   17fe5:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n   17fe9:\tc1 e0 08             \tshl    $0x8,%eax\n   17fec:\t0f b7 d0             \tmovzwl %ax,%edx\n   17fef:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n   17ff3:\tc1 e8 08             \tshr    $0x8,%eax\n   17ff6:\t0f b6 c0             \tmovzbl %al,%eax\n   17ff9:\t09 d0                \tor     %edx,%eax\n   17ffb:\tc1 e0 10             \tshl    $0x10,%eax\n   17ffe:\t89 c1                \tmov    %eax,%ecx\n   18000:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n   18004:\tc1 e8 10             \tshr    $0x10,%eax\n   18007:\tc1 e0 08             \tshl    $0x8,%eax\n   1800a:\t0f b7 c0             \tmovzwl %ax,%eax\n   1800d:\t8b 54 24 38          \tmov    0x38(%rsp),%edx\n   18011:\tc1 ea 18             \tshr    $0x18,%edx\n   18014:\t09 d0                \tor     %edx,%eax\n   18016:\t09 c1                \tor     %eax,%ecx\n   18018:\t89 ca                \tmov    %ecx,%edx\n   1801a:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n   1801e:\t83 e0 07             \tand    $0x7,%eax\n   18021:\t89 c1                \tmov    %eax,%ecx\n   18023:\td3 e2                \tshl    %cl,%edx\n   18025:\t89 d0                \tmov    %edx,%eax\n   18027:\t89 44 24 50          \tmov    %eax,0x50(%rsp)\n   1802b:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n   1802f:\tf7 d8                \tneg    %eax\n   18031:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n   18035:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n   18039:\t0f be d0             \tmovsbl %al,%edx\n   1803c:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n   18040:\t89 d6                \tmov    %edx,%esi\n   18042:\t89 c7                \tmov    %eax,%edi\n   18044:\te8 fa 7f fe ff       \tcallq  43 <NEG_USR32>\n   18049:\t8b 54 24 40          \tmov    0x40(%rsp),%edx\n   1804d:\t01 d0                \tadd    %edx,%eax\n   1804f:\t89 44 24 44          \tmov    %eax,0x44(%rsp)\n   18053:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n   18057:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   1805e:\t00 \n   1805f:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n   18064:\t48 01 d0             \tadd    %rdx,%rax\n   18067:\t0f b7 00             \tmovzwl (%rax),%eax\n   1806a:\t98                   \tcwtl   \n   1806b:\t89 44 24 40          \tmov    %eax,0x40(%rsp)\n   1806f:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n   18073:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   1807a:\t00 \n   1807b:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n   18080:\t48 01 d0             \tadd    %rdx,%rax\n   18083:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n   18087:\t98                   \tcwtl   \n   18088:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n   1808c:\t83 7c 24 58 02       \tcmpl   $0x2,0x58(%rsp)\n   18091:\t0f 8e e3 00 00 00    \tjle    1817a <vc1_decode_p_block+0x7a7>\n   18097:\t83 7c 24 3c 00       \tcmpl   $0x0,0x3c(%rsp)\n   1809c:\t0f 89 d8 00 00 00    \tjns    1817a <vc1_decode_p_block+0x7a7>\n   180a2:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n   180a6:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n   180aa:\t01 d0                \tadd    %edx,%eax\n   180ac:\t39 44 24 4c          \tcmp    %eax,0x4c(%rsp)\n   180b0:\t0f 46 44 24 4c       \tcmovbe 0x4c(%rsp),%eax\n   180b5:\t89 44 24 54          \tmov    %eax,0x54(%rsp)\n   180b9:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n   180be:\t48 8b 00             \tmov    (%rax),%rax\n   180c1:\t8b 54 24 54          \tmov    0x54(%rsp),%edx\n   180c5:\tc1 ea 03             \tshr    $0x3,%edx\n   180c8:\t89 d2                \tmov    %edx,%edx\n   180ca:\t48 01 d0             \tadd    %rdx,%rax\n   180cd:\t8b 00                \tmov    (%rax),%eax\n   180cf:\t89 44 24 30          \tmov    %eax,0x30(%rsp)\n   180d3:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n   180d7:\tc1 e0 08             \tshl    $0x8,%eax\n   180da:\t0f b7 d0             \tmovzwl %ax,%edx\n   180dd:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n   180e1:\tc1 e8 08             \tshr    $0x8,%eax\n   180e4:\t0f b6 c0             \tmovzbl %al,%eax\n   180e7:\t09 d0                \tor     %edx,%eax\n   180e9:\tc1 e0 10             \tshl    $0x10,%eax\n   180ec:\t89 c1                \tmov    %eax,%ecx\n   180ee:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n   180f2:\tc1 e8 10             \tshr    $0x10,%eax\n   180f5:\tc1 e0 08             \tshl    $0x8,%eax\n   180f8:\t0f b7 c0             \tmovzwl %ax,%eax\n   180fb:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n   180ff:\tc1 ea 18             \tshr    $0x18,%edx\n   18102:\t09 d0                \tor     %edx,%eax\n   18104:\t09 c1                \tor     %eax,%ecx\n   18106:\t89 ca                \tmov    %ecx,%edx\n   18108:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n   1810c:\t83 e0 07             \tand    $0x7,%eax\n   1810f:\t89 c1                \tmov    %eax,%ecx\n   18111:\td3 e2                \tshl    %cl,%edx\n   18113:\t89 d0                \tmov    %edx,%eax\n   18115:\t89 44 24 50          \tmov    %eax,0x50(%rsp)\n   18119:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n   1811d:\tf7 d8                \tneg    %eax\n   1811f:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n   18123:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n   18127:\t0f be d0             \tmovsbl %al,%edx\n   1812a:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n   1812e:\t89 d6                \tmov    %edx,%esi\n   18130:\t89 c7                \tmov    %eax,%edi\n   18132:\te8 0c 7f fe ff       \tcallq  43 <NEG_USR32>\n   18137:\t8b 54 24 40          \tmov    0x40(%rsp),%edx\n   1813b:\t01 d0                \tadd    %edx,%eax\n   1813d:\t89 44 24 44          \tmov    %eax,0x44(%rsp)\n   18141:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n   18145:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   1814c:\t00 \n   1814d:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n   18152:\t48 01 d0             \tadd    %rdx,%rax\n   18155:\t0f b7 00             \tmovzwl (%rax),%eax\n   18158:\t98                   \tcwtl   \n   18159:\t89 44 24 40          \tmov    %eax,0x40(%rsp)\n   1815d:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n   18161:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n   18168:\t00 \n   18169:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n   1816e:\t48 01 d0             \tadd    %rdx,%rax\n   18171:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n   18175:\t98                   \tcwtl   \n   18176:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n   1817a:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n   1817e:\t89 c1                \tmov    %eax,%ecx\n   18180:\td3 64 24 50          \tshll   %cl,0x50(%rsp)\n   18184:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n   18188:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n   1818c:\t01 d0                \tadd    %edx,%eax\n   1818e:\t39 44 24 4c          \tcmp    %eax,0x4c(%rsp)\n   18192:\t0f 46 44 24 4c       \tcmovbe 0x4c(%rsp),%eax\n   18197:\t89 44 24 54          \tmov    %eax,0x54(%rsp)\n   1819b:\t8b 54 24 54          \tmov    0x54(%rsp),%edx\n   1819f:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n   181a4:\t89 50 10             \tmov    %edx,0x10(%rax)\n   181a7:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n   181ab:\t83 c0 01             \tadd    $0x1,%eax\n   181ae:\tf7 d0                \tnot    %eax\n   181b0:\t89 84 24 d4 00 00 00 \tmov    %eax,0xd4(%rsp)\n   181b7:\t83 bc 24 cc 00 00 00 \tcmpl   $0x0,0xcc(%rsp)\n   181be:\t00 \n   181bf:\t0f 84 b2 00 00 00    \tje     18277 <vc1_decode_p_block+0x8a4>\n   181c5:\t83 bc 24 cc 00 00 00 \tcmpl   $0x7,0xcc(%rsp)\n   181cc:\t07 \n   181cd:\t0f 84 a4 00 00 00    \tje     18277 <vc1_decode_p_block+0x8a4>\n   181d3:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   181d8:\t0f b6 80 98 39 00 00 \tmovzbl 0x3998(%rax),%eax\n   181df:\t84 c0                \ttest   %al,%al\n   181e1:\t75 2d                \tjne    18210 <vc1_decode_p_block+0x83d>\n   181e3:\t83 7c 24 04 ff       \tcmpl   $0xffffffff,0x4(%rsp)\n   181e8:\t74 11                \tje     181fb <vc1_decode_p_block+0x828>\n   181ea:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n   181ee:\t83 e0 08             \tand    $0x8,%eax\n   181f1:\t85 c0                \ttest   %eax,%eax\n   181f3:\t74 06                \tje     181fb <vc1_decode_p_block+0x828>\n   181f5:\t83 3c 24 00          \tcmpl   $0x0,(%rsp)\n   181f9:\t74 15                \tje     18210 <vc1_decode_p_block+0x83d>\n   181fb:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18200:\t8b 80 f0 37 00 00    \tmov    0x37f0(%rax),%eax\n   18206:\t85 c0                \ttest   %eax,%eax\n   18208:\t75 6d                \tjne    18277 <vc1_decode_p_block+0x8a4>\n   1820a:\t83 3c 24 00          \tcmpl   $0x0,(%rsp)\n   1820e:\t75 67                \tjne    18277 <vc1_decode_p_block+0x8a4>\n   18210:\t48 8b 84 24 b8 00 00 \tmov    0xb8(%rsp),%rax\n   18217:\t00 \n   18218:\t48 89 c7             \tmov    %rax,%rdi\n   1821b:\te8 6a 81 fe ff       \tcallq  38a <decode012>\n   18220:\t89 84 24 d4 00 00 00 \tmov    %eax,0xd4(%rsp)\n   18227:\t83 bc 24 d4 00 00 00 \tcmpl   $0x0,0xd4(%rsp)\n   1822e:\t00 \n   1822f:\t74 08                \tje     18239 <vc1_decode_p_block+0x866>\n   18231:\t83 b4 24 d4 00 00 00 \txorl   $0x3,0xd4(%rsp)\n   18238:\t03 \n   18239:\t83 bc 24 cc 00 00 00 \tcmpl   $0x2,0xcc(%rsp)\n   18240:\t02 \n   18241:\t74 0a                \tje     1824d <vc1_decode_p_block+0x87a>\n   18243:\t83 bc 24 cc 00 00 00 \tcmpl   $0x1,0xcc(%rsp)\n   1824a:\t01 \n   1824b:\t75 0b                \tjne    18258 <vc1_decode_p_block+0x885>\n   1824d:\tc7 84 24 cc 00 00 00 \tmovl   $0x3,0xcc(%rsp)\n   18254:\t03 00 00 00 \n   18258:\t83 bc 24 cc 00 00 00 \tcmpl   $0x4,0xcc(%rsp)\n   1825f:\t04 \n   18260:\t74 0a                \tje     1826c <vc1_decode_p_block+0x899>\n   18262:\t83 bc 24 cc 00 00 00 \tcmpl   $0x5,0xcc(%rsp)\n   18269:\t05 \n   1826a:\t75 0b                \tjne    18277 <vc1_decode_p_block+0x8a4>\n   1826c:\tc7 84 24 cc 00 00 00 \tmovl   $0x6,0xcc(%rsp)\n   18273:\t06 00 00 00 \n   18277:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n   1827b:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n   1827e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18283:\t0f b6 80 68 38 00 00 \tmovzbl 0x3868(%rax),%eax\n   1828a:\t0f b6 c0             \tmovzbl %al,%eax\n   1828d:\t39 44 24 08          \tcmp    %eax,0x8(%rsp)\n   18291:\t75 11                \tjne    182a4 <vc1_decode_p_block+0x8d1>\n   18293:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18298:\t0f b6 80 ec 39 00 00 \tmovzbl 0x39ec(%rax),%eax\n   1829f:\t0f b6 c0             \tmovzbl %al,%eax\n   182a2:\teb 05                \tjmp    182a9 <vc1_decode_p_block+0x8d6>\n   182a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   182a9:\t01 d0                \tadd    %edx,%eax\n   182ab:\t89 84 24 b4 00 00 00 \tmov    %eax,0xb4(%rsp)\n   182b2:\t83 bc 24 cc 00 00 00 \tcmpl   $0x2,0xcc(%rsp)\n   182b9:\t02 \n   182ba:\t74 0a                \tje     182c6 <vc1_decode_p_block+0x8f3>\n   182bc:\t83 bc 24 cc 00 00 00 \tcmpl   $0x1,0xcc(%rsp)\n   182c3:\t01 \n   182c4:\t75 28                \tjne    182ee <vc1_decode_p_block+0x91b>\n   182c6:\t83 bc 24 cc 00 00 00 \tcmpl   $0x2,0xcc(%rsp)\n   182cd:\t02 \n   182ce:\t75 07                \tjne    182d7 <vc1_decode_p_block+0x904>\n   182d0:\tb8 01 00 00 00       \tmov    $0x1,%eax\n   182d5:\teb 05                \tjmp    182dc <vc1_decode_p_block+0x909>\n   182d7:\tb8 02 00 00 00       \tmov    $0x2,%eax\n   182dc:\t89 84 24 d4 00 00 00 \tmov    %eax,0xd4(%rsp)\n   182e3:\tc7 84 24 cc 00 00 00 \tmovl   $0x3,0xcc(%rsp)\n   182ea:\t03 00 00 00 \n   182ee:\t83 bc 24 cc 00 00 00 \tcmpl   $0x4,0xcc(%rsp)\n   182f5:\t04 \n   182f6:\t74 0a                \tje     18302 <vc1_decode_p_block+0x92f>\n   182f8:\t83 bc 24 cc 00 00 00 \tcmpl   $0x5,0xcc(%rsp)\n   182ff:\t05 \n   18300:\t75 28                \tjne    1832a <vc1_decode_p_block+0x957>\n   18302:\t83 bc 24 cc 00 00 00 \tcmpl   $0x5,0xcc(%rsp)\n   18309:\t05 \n   1830a:\t75 07                \tjne    18313 <vc1_decode_p_block+0x940>\n   1830c:\tb8 01 00 00 00       \tmov    $0x1,%eax\n   18311:\teb 05                \tjmp    18318 <vc1_decode_p_block+0x945>\n   18313:\tb8 02 00 00 00       \tmov    $0x2,%eax\n   18318:\t89 84 24 d4 00 00 00 \tmov    %eax,0xd4(%rsp)\n   1831f:\tc7 84 24 cc 00 00 00 \tmovl   $0x6,0xcc(%rsp)\n   18326:\t06 00 00 00 \n   1832a:\t83 bc 24 cc 00 00 00 \tcmpl   $0x7,0xcc(%rsp)\n   18331:\t07 \n   18332:\t0f 84 3b 02 00 00    \tje     18573 <vc1_decode_p_block+0xba0>\n   18338:\t83 bc 24 cc 00 00 00 \tcmpl   $0x7,0xcc(%rsp)\n   1833f:\t07 \n   18340:\t0f 8f ae 0a 00 00    \tjg     18df4 <vc1_decode_p_block+0x1421>\n   18346:\t83 bc 24 cc 00 00 00 \tcmpl   $0x6,0xcc(%rsp)\n   1834d:\t06 \n   1834e:\t0f 84 f4 07 00 00    \tje     18b48 <vc1_decode_p_block+0x1175>\n   18354:\t83 bc 24 cc 00 00 00 \tcmpl   $0x6,0xcc(%rsp)\n   1835b:\t06 \n   1835c:\t0f 8f 92 0a 00 00    \tjg     18df4 <vc1_decode_p_block+0x1421>\n   18362:\t83 bc 24 cc 00 00 00 \tcmpl   $0x0,0xcc(%rsp)\n   18369:\t00 \n   1836a:\t74 13                \tje     1837f <vc1_decode_p_block+0x9ac>\n   1836c:\t83 bc 24 cc 00 00 00 \tcmpl   $0x3,0xcc(%rsp)\n   18373:\t03 \n   18374:\t0f 84 f4 04 00 00    \tje     1886e <vc1_decode_p_block+0xe9b>\n   1837a:\te9 75 0a 00 00       \tjmpq   18df4 <vc1_decode_p_block+0x1421>\n   1837f:\tc7 84 24 c8 00 00 00 \tmovl   $0xf,0xc8(%rsp)\n   18386:\t0f 00 00 00 \n   1838a:\tc7 84 24 dc 00 00 00 \tmovl   $0x0,0xdc(%rsp)\n   18391:\t00 00 00 00 \n   18395:\tc7 44 24 2c 00 00 00 \tmovl   $0x0,0x2c(%rsp)\n   1839c:\t00 \n   1839d:\te9 3e 01 00 00       \tjmpq   184e0 <vc1_decode_p_block+0xb0d>\n   183a2:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   183a7:\t8b b8 b4 39 00 00    \tmov    0x39b4(%rax),%edi\n   183ad:\t48 8d 4c 24 24       \tlea    0x24(%rsp),%rcx\n   183b2:\t48 8d 54 24 28       \tlea    0x28(%rsp),%rdx\n   183b7:\t48 8d 74 24 2c       \tlea    0x2c(%rsp),%rsi\n   183bc:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   183c1:\t41 89 f8             \tmov    %edi,%r8d\n   183c4:\t48 89 c7             \tmov    %rax,%rdi\n   183c7:\te8 d1 a3 ff ff       \tcallq  1279d <vc1_decode_ac_coeff>\n   183cc:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n   183d0:\t01 84 24 dc 00 00 00 \tadd    %eax,0xdc(%rsp)\n   183d7:\t83 bc 24 dc 00 00 00 \tcmpl   $0x3f,0xdc(%rsp)\n   183de:\t3f \n   183df:\t0f 8f 09 01 00 00    \tjg     184ee <vc1_decode_p_block+0xb1b>\n   183e5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   183ea:\t8b 80 3c 3c 00 00    \tmov    0x3c3c(%rax),%eax\n   183f0:\t85 c0                \ttest   %eax,%eax\n   183f2:\t75 2c                \tjne    18420 <vc1_decode_p_block+0xa4d>\n   183f4:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n   183fb:\t8d 50 01             \tlea    0x1(%rax),%edx\n   183fe:\t89 94 24 dc 00 00 00 \tmov    %edx,0xdc(%rsp)\n   18405:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n   1840a:\t48 98                \tcltq   \n   1840c:\t0f b6 84 02 6a 38 00 \tmovzbl 0x386a(%rdx,%rax,1),%eax\n   18413:\t00 \n   18414:\t0f b6 c0             \tmovzbl %al,%eax\n   18417:\t89 84 24 d0 00 00 00 \tmov    %eax,0xd0(%rsp)\n   1841e:\teb 2a                \tjmp    1844a <vc1_decode_p_block+0xa77>\n   18420:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n   18427:\t8d 50 01             \tlea    0x1(%rax),%edx\n   1842a:\t89 94 24 dc 00 00 00 \tmov    %edx,0xdc(%rsp)\n   18431:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n   18436:\t48 98                \tcltq   \n   18438:\t0f b6 84 02 dc 3e 00 \tmovzbl 0x3edc(%rdx,%rax,1),%eax\n   1843f:\t00 \n   18440:\t0f b6 c0             \tmovzbl %al,%eax\n   18443:\t89 84 24 d0 00 00 00 \tmov    %eax,0xd0(%rsp)\n   1844a:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n   1844e:\t89 c2                \tmov    %eax,%edx\n   18450:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n   18457:\t0f af d0             \timul   %eax,%edx\n   1845a:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   18461:\t48 98                \tcltq   \n   18463:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   18467:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   1846c:\t48 01 c8             \tadd    %rcx,%rax\n   1846f:\t66 89 10             \tmov    %dx,(%rax)\n   18472:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18477:\t0f b6 80 f5 39 00 00 \tmovzbl 0x39f5(%rax),%eax\n   1847e:\t84 c0                \ttest   %al,%al\n   18480:\t75 5e                \tjne    184e0 <vc1_decode_p_block+0xb0d>\n   18482:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   18489:\t48 98                \tcltq   \n   1848b:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   1848f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18494:\t48 01 d0             \tadd    %rdx,%rax\n   18497:\t0f b7 00             \tmovzwl (%rax),%eax\n   1849a:\t89 c1                \tmov    %eax,%ecx\n   1849c:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   184a3:\t48 98                \tcltq   \n   184a5:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   184a9:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   184ae:\t48 01 d0             \tadd    %rdx,%rax\n   184b1:\t0f b7 00             \tmovzwl (%rax),%eax\n   184b4:\t66 85 c0             \ttest   %ax,%ax\n   184b7:\t79 08                \tjns    184c1 <vc1_decode_p_block+0xaee>\n   184b9:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n   184bd:\tf7 d8                \tneg    %eax\n   184bf:\teb 04                \tjmp    184c5 <vc1_decode_p_block+0xaf2>\n   184c1:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n   184c5:\t8d 14 08             \tlea    (%rax,%rcx,1),%edx\n   184c8:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   184cf:\t48 98                \tcltq   \n   184d1:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   184d5:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   184da:\t48 01 c8             \tadd    %rcx,%rax\n   184dd:\t66 89 10             \tmov    %dx,(%rax)\n   184e0:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   184e4:\t85 c0                \ttest   %eax,%eax\n   184e6:\t0f 84 b6 fe ff ff    \tje     183a2 <vc1_decode_p_block+0x9cf>\n   184ec:\teb 01                \tjmp    184ef <vc1_decode_p_block+0xb1c>\n   184ee:\t90                   \tnop\n   184ef:\t83 bc 24 00 01 00 00 \tcmpl   $0x0,0x100(%rsp)\n   184f6:\t00 \n   184f7:\t0f 85 f6 08 00 00    \tjne    18df3 <vc1_decode_p_block+0x1420>\n   184fd:\t83 bc 24 dc 00 00 00 \tcmpl   $0x1,0xdc(%rsp)\n   18504:\t01 \n   18505:\t75 29                \tjne    18530 <vc1_decode_p_block+0xb5d>\n   18507:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   1850c:\t48 8b 88 08 36 00 00 \tmov    0x3608(%rax),%rcx\n   18513:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n   18518:\t8b 84 24 f8 00 00 00 \tmov    0xf8(%rsp),%eax\n   1851f:\t89 c6                \tmov    %eax,%esi\n   18521:\t48 8b bc 24 f0 00 00 \tmov    0xf0(%rsp),%rdi\n   18528:\t00 \n   18529:\tff d1                \tcallq  *%rcx\n   1852b:\te9 c3 08 00 00       \tjmpq   18df3 <vc1_decode_p_block+0x1420>\n   18530:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18535:\t48 8b 90 e8 35 00 00 \tmov    0x35e8(%rax),%rdx\n   1853c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18541:\t48 89 c7             \tmov    %rax,%rdi\n   18544:\tff d2                \tcallq  *%rdx\n   18546:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n   1854d:\t00 \n   1854e:\t48 8b 88 40 18 00 00 \tmov    0x1840(%rax),%rcx\n   18555:\t8b 94 24 f8 00 00 00 \tmov    0xf8(%rsp),%edx\n   1855c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18561:\t48 8b b4 24 f0 00 00 \tmov    0xf0(%rsp),%rsi\n   18568:\t00 \n   18569:\t48 89 c7             \tmov    %rax,%rdi\n   1856c:\tff d1                \tcallq  *%rcx\n   1856e:\te9 80 08 00 00       \tjmpq   18df3 <vc1_decode_p_block+0x1420>\n   18573:\t8b 84 24 d4 00 00 00 \tmov    0xd4(%rsp),%eax\n   1857a:\tf7 d0                \tnot    %eax\n   1857c:\t83 e0 0f             \tand    $0xf,%eax\n   1857f:\t89 84 24 c8 00 00 00 \tmov    %eax,0xc8(%rsp)\n   18586:\tc7 84 24 d8 00 00 00 \tmovl   $0x0,0xd8(%rsp)\n   1858d:\t00 00 00 00 \n   18591:\te9 c5 02 00 00       \tjmpq   1885b <vc1_decode_p_block+0xe88>\n   18596:\tb8 03 00 00 00       \tmov    $0x3,%eax\n   1859b:\t2b 84 24 d8 00 00 00 \tsub    0xd8(%rsp),%eax\n   185a2:\tba 01 00 00 00       \tmov    $0x1,%edx\n   185a7:\t89 c1                \tmov    %eax,%ecx\n   185a9:\td3 e2                \tshl    %cl,%edx\n   185ab:\t89 d0                \tmov    %edx,%eax\n   185ad:\t23 84 24 d4 00 00 00 \tand    0xd4(%rsp),%eax\n   185b4:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n   185b8:\tc7 84 24 dc 00 00 00 \tmovl   $0x0,0xdc(%rsp)\n   185bf:\t00 00 00 00 \n   185c3:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   185ca:\t83 e0 01             \tand    $0x1,%eax\n   185cd:\t89 c2                \tmov    %eax,%edx\n   185cf:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   185d6:\t83 e0 02             \tand    $0x2,%eax\n   185d9:\tc1 e0 02             \tshl    $0x2,%eax\n   185dc:\t01 d0                \tadd    %edx,%eax\n   185de:\tc1 e0 02             \tshl    $0x2,%eax\n   185e1:\t89 84 24 b0 00 00 00 \tmov    %eax,0xb0(%rsp)\n   185e8:\te9 57 01 00 00       \tjmpq   18744 <vc1_decode_p_block+0xd71>\n   185ed:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   185f2:\t8b b8 b4 39 00 00    \tmov    0x39b4(%rax),%edi\n   185f8:\t48 8d 4c 24 24       \tlea    0x24(%rsp),%rcx\n   185fd:\t48 8d 54 24 28       \tlea    0x28(%rsp),%rdx\n   18602:\t48 8d 74 24 2c       \tlea    0x2c(%rsp),%rsi\n   18607:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   1860c:\t41 89 f8             \tmov    %edi,%r8d\n   1860f:\t48 89 c7             \tmov    %rax,%rdi\n   18612:\te8 86 a1 ff ff       \tcallq  1279d <vc1_decode_ac_coeff>\n   18617:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n   1861b:\t01 84 24 dc 00 00 00 \tadd    %eax,0xdc(%rsp)\n   18622:\t83 bc 24 dc 00 00 00 \tcmpl   $0xf,0xdc(%rsp)\n   18629:\t0f \n   1862a:\t0f 8f 22 01 00 00    \tjg     18752 <vc1_decode_p_block+0xd7f>\n   18630:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18635:\t8b 80 3c 3c 00 00    \tmov    0x3c3c(%rax),%eax\n   1863b:\t85 c0                \ttest   %eax,%eax\n   1863d:\t75 26                \tjne    18665 <vc1_decode_p_block+0xc92>\n   1863f:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n   18646:\t8d 50 01             \tlea    0x1(%rax),%edx\n   18649:\t89 94 24 dc 00 00 00 \tmov    %edx,0xdc(%rsp)\n   18650:\t48 98                \tcltq   \n   18652:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   18659:\t0f b6 c0             \tmovzbl %al,%eax\n   1865c:\t89 84 24 d0 00 00 00 \tmov    %eax,0xd0(%rsp)\n   18663:\teb 24                \tjmp    18689 <vc1_decode_p_block+0xcb6>\n   18665:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n   1866c:\t8d 50 01             \tlea    0x1(%rax),%edx\n   1866f:\t89 94 24 dc 00 00 00 \tmov    %edx,0xdc(%rsp)\n   18676:\t48 98                \tcltq   \n   18678:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   1867f:\t0f b6 c0             \tmovzbl %al,%eax\n   18682:\t89 84 24 d0 00 00 00 \tmov    %eax,0xd0(%rsp)\n   18689:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n   1868d:\t89 c2                \tmov    %eax,%edx\n   1868f:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n   18696:\t0f af d0             \timul   %eax,%edx\n   18699:\t8b 8c 24 d0 00 00 00 \tmov    0xd0(%rsp),%ecx\n   186a0:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   186a7:\t01 c8                \tadd    %ecx,%eax\n   186a9:\t48 98                \tcltq   \n   186ab:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   186af:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   186b4:\t48 01 c8             \tadd    %rcx,%rax\n   186b7:\t66 89 10             \tmov    %dx,(%rax)\n   186ba:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   186bf:\t0f b6 80 f5 39 00 00 \tmovzbl 0x39f5(%rax),%eax\n   186c6:\t84 c0                \ttest   %al,%al\n   186c8:\t75 7a                \tjne    18744 <vc1_decode_p_block+0xd71>\n   186ca:\t8b 94 24 d0 00 00 00 \tmov    0xd0(%rsp),%edx\n   186d1:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   186d8:\t01 d0                \tadd    %edx,%eax\n   186da:\t48 98                \tcltq   \n   186dc:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   186e0:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   186e5:\t48 01 d0             \tadd    %rdx,%rax\n   186e8:\t0f b7 00             \tmovzwl (%rax),%eax\n   186eb:\t89 c1                \tmov    %eax,%ecx\n   186ed:\t8b 94 24 d0 00 00 00 \tmov    0xd0(%rsp),%edx\n   186f4:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   186fb:\t01 d0                \tadd    %edx,%eax\n   186fd:\t48 98                \tcltq   \n   186ff:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   18703:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18708:\t48 01 d0             \tadd    %rdx,%rax\n   1870b:\t0f b7 00             \tmovzwl (%rax),%eax\n   1870e:\t66 85 c0             \ttest   %ax,%ax\n   18711:\t79 08                \tjns    1871b <vc1_decode_p_block+0xd48>\n   18713:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n   18717:\tf7 d8                \tneg    %eax\n   18719:\teb 04                \tjmp    1871f <vc1_decode_p_block+0xd4c>\n   1871b:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n   1871f:\t01 c1                \tadd    %eax,%ecx\n   18721:\t8b 94 24 d0 00 00 00 \tmov    0xd0(%rsp),%edx\n   18728:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   1872f:\t01 d0                \tadd    %edx,%eax\n   18731:\t48 98                \tcltq   \n   18733:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   18737:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   1873c:\t48 01 d0             \tadd    %rdx,%rax\n   1873f:\t89 ca                \tmov    %ecx,%edx\n   18741:\t66 89 10             \tmov    %dx,(%rax)\n   18744:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   18748:\t85 c0                \ttest   %eax,%eax\n   1874a:\t0f 84 9d fe ff ff    \tje     185ed <vc1_decode_p_block+0xc1a>\n   18750:\teb 01                \tjmp    18753 <vc1_decode_p_block+0xd80>\n   18752:\t90                   \tnop\n   18753:\tb8 03 00 00 00       \tmov    $0x3,%eax\n   18758:\t2b 84 24 d8 00 00 00 \tsub    0xd8(%rsp),%eax\n   1875f:\t8b 94 24 d4 00 00 00 \tmov    0xd4(%rsp),%edx\n   18766:\t89 c1                \tmov    %eax,%ecx\n   18768:\td3 fa                \tsar    %cl,%edx\n   1876a:\t89 d0                \tmov    %edx,%eax\n   1876c:\t83 e0 01             \tand    $0x1,%eax\n   1876f:\t85 c0                \ttest   %eax,%eax\n   18771:\t0f 85 dc 00 00 00    \tjne    18853 <vc1_decode_p_block+0xe80>\n   18777:\t83 bc 24 00 01 00 00 \tcmpl   $0x0,0x100(%rsp)\n   1877e:\t00 \n   1877f:\t0f 85 ce 00 00 00    \tjne    18853 <vc1_decode_p_block+0xe80>\n   18785:\t83 bc 24 dc 00 00 00 \tcmpl   $0x1,0xdc(%rsp)\n   1878c:\t01 \n   1878d:\t75 63                \tjne    187f2 <vc1_decode_p_block+0xe1f>\n   1878f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18794:\t48 8b 88 20 36 00 00 \tmov    0x3620(%rax),%rcx\n   1879b:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   187a2:\t48 98                \tcltq   \n   187a4:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   187a8:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   187ad:\t48 01 c2             \tadd    %rax,%rdx\n   187b0:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   187b7:\t83 e0 01             \tand    $0x1,%eax\n   187ba:\tc1 e0 02             \tshl    $0x2,%eax\n   187bd:\t48 63 f0             \tmovslq %eax,%rsi\n   187c0:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   187c7:\t83 e0 02             \tand    $0x2,%eax\n   187ca:\t0f af 84 24 f8 00 00 \timul   0xf8(%rsp),%eax\n   187d1:\t00 \n   187d2:\t01 c0                \tadd    %eax,%eax\n   187d4:\t48 98                \tcltq   \n   187d6:\t48 01 c6             \tadd    %rax,%rsi\n   187d9:\t48 8b 84 24 f0 00 00 \tmov    0xf0(%rsp),%rax\n   187e0:\t00 \n   187e1:\t48 8d 3c 06          \tlea    (%rsi,%rax,1),%rdi\n   187e5:\t8b 84 24 f8 00 00 00 \tmov    0xf8(%rsp),%eax\n   187ec:\t89 c6                \tmov    %eax,%esi\n   187ee:\tff d1                \tcallq  *%rcx\n   187f0:\teb 61                \tjmp    18853 <vc1_decode_p_block+0xe80>\n   187f2:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   187f7:\t48 8b 88 00 36 00 00 \tmov    0x3600(%rax),%rcx\n   187fe:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   18805:\t48 98                \tcltq   \n   18807:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   1880b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18810:\t48 01 c2             \tadd    %rax,%rdx\n   18813:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   1881a:\t83 e0 01             \tand    $0x1,%eax\n   1881d:\tc1 e0 02             \tshl    $0x2,%eax\n   18820:\t48 63 f0             \tmovslq %eax,%rsi\n   18823:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   1882a:\t83 e0 02             \tand    $0x2,%eax\n   1882d:\t0f af 84 24 f8 00 00 \timul   0xf8(%rsp),%eax\n   18834:\t00 \n   18835:\t01 c0                \tadd    %eax,%eax\n   18837:\t48 98                \tcltq   \n   18839:\t48 01 c6             \tadd    %rax,%rsi\n   1883c:\t48 8b 84 24 f0 00 00 \tmov    0xf0(%rsp),%rax\n   18843:\t00 \n   18844:\t48 8d 3c 06          \tlea    (%rsi,%rax,1),%rdi\n   18848:\t8b 84 24 f8 00 00 00 \tmov    0xf8(%rsp),%eax\n   1884f:\t89 c6                \tmov    %eax,%esi\n   18851:\tff d1                \tcallq  *%rcx\n   18853:\t83 84 24 d8 00 00 00 \taddl   $0x1,0xd8(%rsp)\n   1885a:\t01 \n   1885b:\t83 bc 24 d8 00 00 00 \tcmpl   $0x3,0xd8(%rsp)\n   18862:\t03 \n   18863:\t0f 8e 2d fd ff ff    \tjle    18596 <vc1_decode_p_block+0xbc3>\n   18869:\te9 86 05 00 00       \tjmpq   18df4 <vc1_decode_p_block+0x1421>\n   1886e:\t8b 84 24 d4 00 00 00 \tmov    0xd4(%rsp),%eax\n   18875:\t83 e0 02             \tand    $0x2,%eax\n   18878:\t89 c2                \tmov    %eax,%edx\n   1887a:\t89 d0                \tmov    %edx,%eax\n   1887c:\t01 c0                \tadd    %eax,%eax\n   1887e:\t01 d0                \tadd    %edx,%eax\n   18880:\t01 c0                \tadd    %eax,%eax\n   18882:\t89 c1                \tmov    %eax,%ecx\n   18884:\t8b 84 24 d4 00 00 00 \tmov    0xd4(%rsp),%eax\n   1888b:\t83 e0 01             \tand    $0x1,%eax\n   1888e:\t89 c2                \tmov    %eax,%edx\n   18890:\t89 d0                \tmov    %edx,%eax\n   18892:\t01 c0                \tadd    %eax,%eax\n   18894:\t01 d0                \tadd    %edx,%eax\n   18896:\t01 c8                \tadd    %ecx,%eax\n   18898:\tf7 d0                \tnot    %eax\n   1889a:\t83 e0 0f             \tand    $0xf,%eax\n   1889d:\t89 84 24 c8 00 00 00 \tmov    %eax,0xc8(%rsp)\n   188a4:\tc7 84 24 d8 00 00 00 \tmovl   $0x0,0xd8(%rsp)\n   188ab:\t00 00 00 00 \n   188af:\te9 81 02 00 00       \tjmpq   18b35 <vc1_decode_p_block+0x1162>\n   188b4:\tb8 01 00 00 00       \tmov    $0x1,%eax\n   188b9:\t2b 84 24 d8 00 00 00 \tsub    0xd8(%rsp),%eax\n   188c0:\tba 01 00 00 00       \tmov    $0x1,%edx\n   188c5:\t89 c1                \tmov    %eax,%ecx\n   188c7:\td3 e2                \tshl    %cl,%edx\n   188c9:\t89 d0                \tmov    %edx,%eax\n   188cb:\t23 84 24 d4 00 00 00 \tand    0xd4(%rsp),%eax\n   188d2:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n   188d6:\tc7 84 24 dc 00 00 00 \tmovl   $0x0,0xdc(%rsp)\n   188dd:\t00 00 00 00 \n   188e1:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   188e8:\tc1 e0 05             \tshl    $0x5,%eax\n   188eb:\t89 84 24 b0 00 00 00 \tmov    %eax,0xb0(%rsp)\n   188f2:\te9 4f 01 00 00       \tjmpq   18a46 <vc1_decode_p_block+0x1073>\n   188f7:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   188fc:\t8b b8 b4 39 00 00    \tmov    0x39b4(%rax),%edi\n   18902:\t48 8d 4c 24 24       \tlea    0x24(%rsp),%rcx\n   18907:\t48 8d 54 24 28       \tlea    0x28(%rsp),%rdx\n   1890c:\t48 8d 74 24 2c       \tlea    0x2c(%rsp),%rsi\n   18911:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18916:\t41 89 f8             \tmov    %edi,%r8d\n   18919:\t48 89 c7             \tmov    %rax,%rdi\n   1891c:\te8 7c 9e ff ff       \tcallq  1279d <vc1_decode_ac_coeff>\n   18921:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n   18925:\t01 84 24 dc 00 00 00 \tadd    %eax,0xdc(%rsp)\n   1892c:\t83 bc 24 dc 00 00 00 \tcmpl   $0x1f,0xdc(%rsp)\n   18933:\t1f \n   18934:\t0f 8f 1a 01 00 00    \tjg     18a54 <vc1_decode_p_block+0x1081>\n   1893a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   1893f:\t8b 80 3c 3c 00 00    \tmov    0x3c3c(%rax),%eax\n   18945:\t85 c0                \ttest   %eax,%eax\n   18947:\t75 3a                \tjne    18983 <vc1_decode_p_block+0xfb0>\n   18949:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   1894e:\t48 8b 88 78 39 00 00 \tmov    0x3978(%rax),%rcx\n   18955:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n   1895c:\t8d 50 01             \tlea    0x1(%rax),%edx\n   1895f:\t89 94 24 dc 00 00 00 \tmov    %edx,0xdc(%rsp)\n   18966:\t48 98                \tcltq   \n   18968:\t48 01 c8             \tadd    %rcx,%rax\n   1896b:\t0f b6 00             \tmovzbl (%rax),%eax\n   1896e:\t0f b6 d0             \tmovzbl %al,%edx\n   18971:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   18978:\t01 d0                \tadd    %edx,%eax\n   1897a:\t89 84 24 d0 00 00 00 \tmov    %eax,0xd0(%rsp)\n   18981:\teb 2d                \tjmp    189b0 <vc1_decode_p_block+0xfdd>\n   18983:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n   1898a:\t8d 50 01             \tlea    0x1(%rax),%edx\n   1898d:\t89 94 24 dc 00 00 00 \tmov    %edx,0xdc(%rsp)\n   18994:\t48 98                \tcltq   \n   18996:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   1899d:\t0f b6 d0             \tmovzbl %al,%edx\n   189a0:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   189a7:\t01 d0                \tadd    %edx,%eax\n   189a9:\t89 84 24 d0 00 00 00 \tmov    %eax,0xd0(%rsp)\n   189b0:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n   189b4:\t89 c2                \tmov    %eax,%edx\n   189b6:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n   189bd:\t0f af d0             \timul   %eax,%edx\n   189c0:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   189c7:\t48 98                \tcltq   \n   189c9:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   189cd:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   189d2:\t48 01 c8             \tadd    %rcx,%rax\n   189d5:\t66 89 10             \tmov    %dx,(%rax)\n   189d8:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   189dd:\t0f b6 80 f5 39 00 00 \tmovzbl 0x39f5(%rax),%eax\n   189e4:\t84 c0                \ttest   %al,%al\n   189e6:\t75 5e                \tjne    18a46 <vc1_decode_p_block+0x1073>\n   189e8:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   189ef:\t48 98                \tcltq   \n   189f1:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   189f5:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   189fa:\t48 01 d0             \tadd    %rdx,%rax\n   189fd:\t0f b7 00             \tmovzwl (%rax),%eax\n   18a00:\t89 c1                \tmov    %eax,%ecx\n   18a02:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   18a09:\t48 98                \tcltq   \n   18a0b:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   18a0f:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18a14:\t48 01 d0             \tadd    %rdx,%rax\n   18a17:\t0f b7 00             \tmovzwl (%rax),%eax\n   18a1a:\t66 85 c0             \ttest   %ax,%ax\n   18a1d:\t79 08                \tjns    18a27 <vc1_decode_p_block+0x1054>\n   18a1f:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n   18a23:\tf7 d8                \tneg    %eax\n   18a25:\teb 04                \tjmp    18a2b <vc1_decode_p_block+0x1058>\n   18a27:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n   18a2b:\t8d 14 08             \tlea    (%rax,%rcx,1),%edx\n   18a2e:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   18a35:\t48 98                \tcltq   \n   18a37:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   18a3b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18a40:\t48 01 c8             \tadd    %rcx,%rax\n   18a43:\t66 89 10             \tmov    %dx,(%rax)\n   18a46:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   18a4a:\t85 c0                \ttest   %eax,%eax\n   18a4c:\t0f 84 a5 fe ff ff    \tje     188f7 <vc1_decode_p_block+0xf24>\n   18a52:\teb 01                \tjmp    18a55 <vc1_decode_p_block+0x1082>\n   18a54:\t90                   \tnop\n   18a55:\tb8 01 00 00 00       \tmov    $0x1,%eax\n   18a5a:\t2b 84 24 d8 00 00 00 \tsub    0xd8(%rsp),%eax\n   18a61:\t8b 94 24 d4 00 00 00 \tmov    0xd4(%rsp),%edx\n   18a68:\t89 c1                \tmov    %eax,%ecx\n   18a6a:\td3 fa                \tsar    %cl,%edx\n   18a6c:\t89 d0                \tmov    %edx,%eax\n   18a6e:\t83 e0 01             \tand    $0x1,%eax\n   18a71:\t85 c0                \ttest   %eax,%eax\n   18a73:\t0f 85 b4 00 00 00    \tjne    18b2d <vc1_decode_p_block+0x115a>\n   18a79:\t83 bc 24 00 01 00 00 \tcmpl   $0x0,0x100(%rsp)\n   18a80:\t00 \n   18a81:\t0f 85 a6 00 00 00    \tjne    18b2d <vc1_decode_p_block+0x115a>\n   18a87:\t83 bc 24 dc 00 00 00 \tcmpl   $0x1,0xdc(%rsp)\n   18a8e:\t01 \n   18a8f:\t75 4f                \tjne    18ae0 <vc1_decode_p_block+0x110d>\n   18a91:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18a96:\t48 8b 88 10 36 00 00 \tmov    0x3610(%rax),%rcx\n   18a9d:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   18aa4:\t48 98                \tcltq   \n   18aa6:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   18aaa:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18aaf:\t48 01 c2             \tadd    %rax,%rdx\n   18ab2:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   18ab9:\t0f af 84 24 f8 00 00 \timul   0xf8(%rsp),%eax\n   18ac0:\t00 \n   18ac1:\tc1 e0 02             \tshl    $0x2,%eax\n   18ac4:\t48 63 f0             \tmovslq %eax,%rsi\n   18ac7:\t48 8b 84 24 f0 00 00 \tmov    0xf0(%rsp),%rax\n   18ace:\t00 \n   18acf:\t48 8d 3c 06          \tlea    (%rsi,%rax,1),%rdi\n   18ad3:\t8b 84 24 f8 00 00 00 \tmov    0xf8(%rsp),%eax\n   18ada:\t89 c6                \tmov    %eax,%esi\n   18adc:\tff d1                \tcallq  *%rcx\n   18ade:\teb 4d                \tjmp    18b2d <vc1_decode_p_block+0x115a>\n   18ae0:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18ae5:\t48 8b 88 f0 35 00 00 \tmov    0x35f0(%rax),%rcx\n   18aec:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   18af3:\t48 98                \tcltq   \n   18af5:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   18af9:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18afe:\t48 01 c2             \tadd    %rax,%rdx\n   18b01:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   18b08:\t0f af 84 24 f8 00 00 \timul   0xf8(%rsp),%eax\n   18b0f:\t00 \n   18b10:\tc1 e0 02             \tshl    $0x2,%eax\n   18b13:\t48 63 f0             \tmovslq %eax,%rsi\n   18b16:\t48 8b 84 24 f0 00 00 \tmov    0xf0(%rsp),%rax\n   18b1d:\t00 \n   18b1e:\t48 8d 3c 06          \tlea    (%rsi,%rax,1),%rdi\n   18b22:\t8b 84 24 f8 00 00 00 \tmov    0xf8(%rsp),%eax\n   18b29:\t89 c6                \tmov    %eax,%esi\n   18b2b:\tff d1                \tcallq  *%rcx\n   18b2d:\t83 84 24 d8 00 00 00 \taddl   $0x1,0xd8(%rsp)\n   18b34:\t01 \n   18b35:\t83 bc 24 d8 00 00 00 \tcmpl   $0x1,0xd8(%rsp)\n   18b3c:\t01 \n   18b3d:\t0f 8e 71 fd ff ff    \tjle    188b4 <vc1_decode_p_block+0xee1>\n   18b43:\te9 ac 02 00 00       \tjmpq   18df4 <vc1_decode_p_block+0x1421>\n   18b48:\t8b 94 24 d4 00 00 00 \tmov    0xd4(%rsp),%edx\n   18b4f:\t89 d0                \tmov    %edx,%eax\n   18b51:\tc1 e0 02             \tshl    $0x2,%eax\n   18b54:\t01 d0                \tadd    %edx,%eax\n   18b56:\tf7 d0                \tnot    %eax\n   18b58:\t83 e0 0f             \tand    $0xf,%eax\n   18b5b:\t89 84 24 c8 00 00 00 \tmov    %eax,0xc8(%rsp)\n   18b62:\tc7 84 24 d8 00 00 00 \tmovl   $0x0,0xd8(%rsp)\n   18b69:\t00 00 00 00 \n   18b6d:\te9 71 02 00 00       \tjmpq   18de3 <vc1_decode_p_block+0x1410>\n   18b72:\tb8 01 00 00 00       \tmov    $0x1,%eax\n   18b77:\t2b 84 24 d8 00 00 00 \tsub    0xd8(%rsp),%eax\n   18b7e:\tba 01 00 00 00       \tmov    $0x1,%edx\n   18b83:\t89 c1                \tmov    %eax,%ecx\n   18b85:\td3 e2                \tshl    %cl,%edx\n   18b87:\t89 d0                \tmov    %edx,%eax\n   18b89:\t23 84 24 d4 00 00 00 \tand    0xd4(%rsp),%eax\n   18b90:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n   18b94:\tc7 84 24 dc 00 00 00 \tmovl   $0x0,0xdc(%rsp)\n   18b9b:\t00 00 00 00 \n   18b9f:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   18ba6:\tc1 e0 02             \tshl    $0x2,%eax\n   18ba9:\t89 84 24 b0 00 00 00 \tmov    %eax,0xb0(%rsp)\n   18bb0:\te9 4f 01 00 00       \tjmpq   18d04 <vc1_decode_p_block+0x1331>\n   18bb5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18bba:\t8b b8 b4 39 00 00    \tmov    0x39b4(%rax),%edi\n   18bc0:\t48 8d 4c 24 24       \tlea    0x24(%rsp),%rcx\n   18bc5:\t48 8d 54 24 28       \tlea    0x28(%rsp),%rdx\n   18bca:\t48 8d 74 24 2c       \tlea    0x2c(%rsp),%rsi\n   18bcf:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18bd4:\t41 89 f8             \tmov    %edi,%r8d\n   18bd7:\t48 89 c7             \tmov    %rax,%rdi\n   18bda:\te8 be 9b ff ff       \tcallq  1279d <vc1_decode_ac_coeff>\n   18bdf:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n   18be3:\t01 84 24 dc 00 00 00 \tadd    %eax,0xdc(%rsp)\n   18bea:\t83 bc 24 dc 00 00 00 \tcmpl   $0x1f,0xdc(%rsp)\n   18bf1:\t1f \n   18bf2:\t0f 8f 1a 01 00 00    \tjg     18d12 <vc1_decode_p_block+0x133f>\n   18bf8:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18bfd:\t8b 80 3c 3c 00 00    \tmov    0x3c3c(%rax),%eax\n   18c03:\t85 c0                \ttest   %eax,%eax\n   18c05:\t75 3a                \tjne    18c41 <vc1_decode_p_block+0x126e>\n   18c07:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18c0c:\t48 8b 88 80 39 00 00 \tmov    0x3980(%rax),%rcx\n   18c13:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n   18c1a:\t8d 50 01             \tlea    0x1(%rax),%edx\n   18c1d:\t89 94 24 dc 00 00 00 \tmov    %edx,0xdc(%rsp)\n   18c24:\t48 98                \tcltq   \n   18c26:\t48 01 c8             \tadd    %rcx,%rax\n   18c29:\t0f b6 00             \tmovzbl (%rax),%eax\n   18c2c:\t0f b6 d0             \tmovzbl %al,%edx\n   18c2f:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   18c36:\t01 d0                \tadd    %edx,%eax\n   18c38:\t89 84 24 d0 00 00 00 \tmov    %eax,0xd0(%rsp)\n   18c3f:\teb 2d                \tjmp    18c6e <vc1_decode_p_block+0x129b>\n   18c41:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n   18c48:\t8d 50 01             \tlea    0x1(%rax),%edx\n   18c4b:\t89 94 24 dc 00 00 00 \tmov    %edx,0xdc(%rsp)\n   18c52:\t48 98                \tcltq   \n   18c54:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   18c5b:\t0f b6 d0             \tmovzbl %al,%edx\n   18c5e:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   18c65:\t01 d0                \tadd    %edx,%eax\n   18c67:\t89 84 24 d0 00 00 00 \tmov    %eax,0xd0(%rsp)\n   18c6e:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n   18c72:\t89 c2                \tmov    %eax,%edx\n   18c74:\t8b 84 24 b4 00 00 00 \tmov    0xb4(%rsp),%eax\n   18c7b:\t0f af d0             \timul   %eax,%edx\n   18c7e:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   18c85:\t48 98                \tcltq   \n   18c87:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   18c8b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18c90:\t48 01 c8             \tadd    %rcx,%rax\n   18c93:\t66 89 10             \tmov    %dx,(%rax)\n   18c96:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18c9b:\t0f b6 80 f5 39 00 00 \tmovzbl 0x39f5(%rax),%eax\n   18ca2:\t84 c0                \ttest   %al,%al\n   18ca4:\t75 5e                \tjne    18d04 <vc1_decode_p_block+0x1331>\n   18ca6:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   18cad:\t48 98                \tcltq   \n   18caf:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   18cb3:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18cb8:\t48 01 d0             \tadd    %rdx,%rax\n   18cbb:\t0f b7 00             \tmovzwl (%rax),%eax\n   18cbe:\t89 c1                \tmov    %eax,%ecx\n   18cc0:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   18cc7:\t48 98                \tcltq   \n   18cc9:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   18ccd:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18cd2:\t48 01 d0             \tadd    %rdx,%rax\n   18cd5:\t0f b7 00             \tmovzwl (%rax),%eax\n   18cd8:\t66 85 c0             \ttest   %ax,%ax\n   18cdb:\t79 08                \tjns    18ce5 <vc1_decode_p_block+0x1312>\n   18cdd:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n   18ce1:\tf7 d8                \tneg    %eax\n   18ce3:\teb 04                \tjmp    18ce9 <vc1_decode_p_block+0x1316>\n   18ce5:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n   18ce9:\t8d 14 08             \tlea    (%rax,%rcx,1),%edx\n   18cec:\t8b 84 24 d0 00 00 00 \tmov    0xd0(%rsp),%eax\n   18cf3:\t48 98                \tcltq   \n   18cf5:\t48 8d 0c 00          \tlea    (%rax,%rax,1),%rcx\n   18cf9:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18cfe:\t48 01 c8             \tadd    %rcx,%rax\n   18d01:\t66 89 10             \tmov    %dx,(%rax)\n   18d04:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n   18d08:\t85 c0                \ttest   %eax,%eax\n   18d0a:\t0f 84 a5 fe ff ff    \tje     18bb5 <vc1_decode_p_block+0x11e2>\n   18d10:\teb 01                \tjmp    18d13 <vc1_decode_p_block+0x1340>\n   18d12:\t90                   \tnop\n   18d13:\tb8 01 00 00 00       \tmov    $0x1,%eax\n   18d18:\t2b 84 24 d8 00 00 00 \tsub    0xd8(%rsp),%eax\n   18d1f:\t8b 94 24 d4 00 00 00 \tmov    0xd4(%rsp),%edx\n   18d26:\t89 c1                \tmov    %eax,%ecx\n   18d28:\td3 fa                \tsar    %cl,%edx\n   18d2a:\t89 d0                \tmov    %edx,%eax\n   18d2c:\t83 e0 01             \tand    $0x1,%eax\n   18d2f:\t85 c0                \ttest   %eax,%eax\n   18d31:\t0f 85 a4 00 00 00    \tjne    18ddb <vc1_decode_p_block+0x1408>\n   18d37:\t83 bc 24 00 01 00 00 \tcmpl   $0x0,0x100(%rsp)\n   18d3e:\t00 \n   18d3f:\t0f 85 96 00 00 00    \tjne    18ddb <vc1_decode_p_block+0x1408>\n   18d45:\t83 bc 24 dc 00 00 00 \tcmpl   $0x1,0xdc(%rsp)\n   18d4c:\t01 \n   18d4d:\t75 47                \tjne    18d96 <vc1_decode_p_block+0x13c3>\n   18d4f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18d54:\t48 8b 88 18 36 00 00 \tmov    0x3618(%rax),%rcx\n   18d5b:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   18d62:\t48 98                \tcltq   \n   18d64:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   18d68:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18d6d:\t48 01 c2             \tadd    %rax,%rdx\n   18d70:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   18d77:\tc1 e0 02             \tshl    $0x2,%eax\n   18d7a:\t48 63 f0             \tmovslq %eax,%rsi\n   18d7d:\t48 8b 84 24 f0 00 00 \tmov    0xf0(%rsp),%rax\n   18d84:\t00 \n   18d85:\t48 8d 3c 06          \tlea    (%rsi,%rax,1),%rdi\n   18d89:\t8b 84 24 f8 00 00 00 \tmov    0xf8(%rsp),%eax\n   18d90:\t89 c6                \tmov    %eax,%esi\n   18d92:\tff d1                \tcallq  *%rcx\n   18d94:\teb 45                \tjmp    18ddb <vc1_decode_p_block+0x1408>\n   18d96:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n   18d9b:\t48 8b 88 f8 35 00 00 \tmov    0x35f8(%rax),%rcx\n   18da2:\t8b 84 24 b0 00 00 00 \tmov    0xb0(%rsp),%eax\n   18da9:\t48 98                \tcltq   \n   18dab:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n   18daf:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   18db4:\t48 01 c2             \tadd    %rax,%rdx\n   18db7:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n   18dbe:\tc1 e0 02             \tshl    $0x2,%eax\n   18dc1:\t48 63 f0             \tmovslq %eax,%rsi\n   18dc4:\t48 8b 84 24 f0 00 00 \tmov    0xf0(%rsp),%rax\n   18dcb:\t00 \n   18dcc:\t48 8d 3c 06          \tlea    (%rsi,%rax,1),%rdi\n   18dd0:\t8b 84 24 f8 00 00 00 \tmov    0xf8(%rsp),%eax\n   18dd7:\t89 c6                \tmov    %eax,%esi\n   18dd9:\tff d1                \tcallq  *%rcx\n   18ddb:\t83 84 24 d8 00 00 00 \taddl   $0x1,0xd8(%rsp)\n   18de2:\t01 \n   18de3:\t83 bc 24 d8 00 00 00 \tcmpl   $0x1,0xd8(%rsp)\n   18dea:\t01 \n   18deb:\t0f 8e 81 fd ff ff    \tjle    18b72 <vc1_decode_p_block+0x119f>\n   18df1:\teb 01                \tjmp    18df4 <vc1_decode_p_block+0x1421>\n   18df3:\t90                   \tnop\n   18df4:\t48 83 bc 24 08 01 00 \tcmpq   $0x0,0x108(%rsp)\n   18dfb:\t00 00 \n   18dfd:\t74 2a                \tje     18e29 <vc1_decode_p_block+0x1456>\n   18dff:\t48 8b 84 24 08 01 00 \tmov    0x108(%rsp),%rax\n   18e06:\t00 \n   18e07:\t8b 00                \tmov    (%rax),%eax\n   18e09:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n   18e0d:\tc1 e2 02             \tshl    $0x2,%edx\n   18e10:\t8b b4 24 cc 00 00 00 \tmov    0xcc(%rsp),%esi\n   18e17:\t89 d1                \tmov    %edx,%ecx\n   18e19:\td3 e6                \tshl    %cl,%esi\n   18e1b:\t89 f2                \tmov    %esi,%edx\n   18e1d:\t09 c2                \tor     %eax,%edx\n   18e1f:\t48 8b 84 24 08 01 00 \tmov    0x108(%rsp),%rax\n   18e26:\t00 \n   18e27:\t89 10                \tmov    %edx,(%rax)\n   18e29:\t8b 84 24 c8 00 00 00 \tmov    0xc8(%rsp),%eax\n   18e30:\t48 81 c4 e0 00 00 00 \tadd    $0xe0,%rsp\n   18e37:\t5b                   \tpop    %rbx\n   18e38:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vc1_decode_p_block(__int64 a1, __int64 a2, char a3, int a4,\n                                      int a5, int a6, __int64 a7,\n                                      unsigned int a8, int a9, _DWORD *a10) {\n  int v10;\n  __int64 v11;\n  unsigned int v12;\n  __int64 v13;\n  unsigned int v14;\n  int v15;\n  int v16;\n  int v17;\n  int v18;\n  int v19;\n  int v20;\n  int v21;\n  int v22;\n  int v23;\n  __int64 v24;\n  int v25;\n  int v26;\n  int v27;\n  int v28;\n  __int64 v29;\n  int v30;\n  int v31;\n  int v32;\n  int v33;\n  int v39;\n  int v40;\n  int v41;\n  int v42;\n  int v43;\n  unsigned int v44;\n  unsigned int v45;\n  unsigned int v46;\n  unsigned int v47;\n  unsigned int v48;\n  int v49;\n  int v50;\n  __int64 v51;\n  __int64 v52;\n  int v53;\n  int v54;\n  unsigned int v55;\n  unsigned int v56;\n  unsigned int v57;\n  unsigned int v58;\n  unsigned int v59;\n  int v60;\n  int v61;\n  __int64 v62;\n  __int64 v63;\n  int v64;\n  int v65;\n  __int64 v66;\n  __int64 v67;\n  unsigned int v68;\n  int v69;\n  int v70;\n  int v71;\n  int i;\n  int v73;\n  v67 = a1;\n  v66 = a1 + Number;\n  v71 = Number;\n  v69 = a5 & Number;\n  v68 = Number;\n  (*(void(__fastcall **)(__int64))(a1 + Number))(a2);\n  if (a5 == Number) {\n    v10 = *(_DWORD *)(a1 + Number);\n    v11 = ff_vc1_ttblk_vlc[Number * v10 + Number];\n    v63 = v66;\n    v62 = v11;\n    v61 = Number;\n    v60 = Number;\n    v59 = *(_DWORD *)(v66 + Number);\n    v58 = Number;\n    v57 = *(_DWORD *)(v66 + Number);\n    v56 = *(_DWORD *)((v59 >> Number) + *(_QWORD *)v66);\n    v58 = (HIBYTE(v56) | (unsigned __int16)(HIWORD(v56) << Number) |\n           (((unsigned __int16)((_WORD)v56 << Number) | BYTE1(v56)) << Number))\n          << (v59 & Number);\n    v55 = NEG_USR32(v58, Number);\n    v54 = *(__int16 *)(Number L * v55 + v62);\n    v53 = *(__int16 *)(Number L * v55 + v62 + Number);\n    v58 <<= v53;\n    v12 = v53 + v59;\n    if (v57 <= v53 + v59)\n      v12 = v57;\n    v59 = v12;\n    *(_DWORD *)(v63 + Number) = v12;\n    v69 = ff_vc1_ttblk_to_tt[Number * v10 + v54];\n  }\n  if (v69 == Number) {\n    v13 = ff_vc1_subblkpat_vlc[Number * *(int *)(a1 + Number) + Number];\n    v52 = v66;\n    v51 = v13;\n    v50 = Number;\n    v49 = Number;\n    v48 = *(_DWORD *)(v66 + Number);\n    v47 = Number;\n    v46 = *(_DWORD *)(v66 + Number);\n    v45 = *(_DWORD *)((v48 >> Number) + *(_QWORD *)v66);\n    v47 = (HIBYTE(v45) | (unsigned __int16)(HIWORD(v45) << Number) |\n           (((unsigned __int16)((_WORD)v45 << Number) | BYTE1(v45)) << Number))\n          << (v48 & Number);\n    v44 = NEG_USR32(v47, Number);\n    v43 = *(__int16 *)(Number L * v44 + v51);\n    v42 = *(__int16 *)(Number L * v44 + v51 + Number);\n    v47 <<= v42;\n    v14 = v42 + v48;\n    if (v46 <= v42 + v48)\n      v14 = v46;\n    v48 = v14;\n    *(_DWORD *)(v52 + Number) = v14;\n    v71 = ~(v43 + Number);\n  }\n  if (v69 && v69 != Number &&\n      (*(_BYTE *)(a1 + Number) ||\n       a5 != Number && (a5 & Number) != Number && !a6 ||\n       !*(_DWORD *)(a1 + Number) && !a6)) {\n    v71 = decode012(v66);\n    if (v71)\n      v71 ^= Number;\n    if (v69 == Number || v69 == Number)\n      v69 = Number;\n    if (v69 == Number || v69 == Number)\n      v69 = Number;\n  }\n  if (a4 == *(unsigned __int8 *)(a1 + Number))\n    v15 = *(unsigned __int8 *)(a1 + Number);\n  else\n    v15 = Number;\n  v65 = Number * a4 + v15;\n  if (v69 == Number || v69 == Number) {\n    if (v69 == Number)\n      v16 = Number;\n    else\n      v16 = Number;\n    v71 = v16;\n    v69 = Number;\n  }\n  if (v69 == Number || v69 == Number) {\n    if (v69 == Number)\n      v17 = Number;\n    else\n      v17 = Number;\n    v71 = v17;\n    v69 = Number;\n  }\n  if (v69 == Number) {\n    v68 = ~(_BYTE)v71 & Number;\n    for (i = Number; i <= Number; ++i) {\n      v41 = v71 & (Number << (Number - i));\n      v73 = Number;\n      v64 = Number * ((i & Number) + Number * (i & Number));\n      while (!v41) {\n        vc1_decode_ac_coeff(a1, &v41, &v40, &v39, *(_DWORD *)(a1 + Number));\n        v73 += v40;\n        if (v73 > Number)\n          break;\n        v21 = v73;\n        if (*(_DWORD *)(a1 + Number)) {\n          ++v73;\n          v22 = *((unsigned __int8 *)&ff_vc1_adv_interlaced_4x4_zz + v21);\n        } else {\n          ++v73;\n          v22 = *((unsigned __int8 *)&ff_vc1_simple_progressive_4x4_zz + v21);\n        }\n        v70 = v22;\n        *(_WORD *)(Number L * (v22 + v64) + a2) = v65 * v39;\n        if (!*(_BYTE *)(a1 + Number)) {\n          if (*(__int16 *)(Number L * (v70 + v64) + a2) >= Number)\n            LOWORD(v23) = a4;\n          else\n            v23 = -a4;\n          *(_WORD *)(Number L * (v70 + v64) + a2) += v23;\n        }\n      }\n      if (((v71 >> (Number - i)) & Number) == Number && !a9) {\n        if (v73 == Number)\n          (*(void(__fastcall **)(__int64, _QWORD, __int64))(a1 + Number))(\n              (int)(Number * a8 * (i & Number)) +\n                  (__int64)(Number * (i & Number)) + a7,\n              a8, a2 + Number L * v64);\n        else\n          (*(void(__fastcall **)(__int64, _QWORD, __int64))(a1 + Number))(\n              (int)(Number * a8 * (i & Number)) +\n                  (__int64)(Number * (i & Number)) + a7,\n              a8, a2 + Number L * v64);\n      }\n    }\n  } else if (v69 <= Number) {\n    if (v69 == Number) {\n      v68 = ~(Number * (_BYTE)v71) & Number;\n      for (i = Number; i <= Number; ++i) {\n        v41 = v71 & (Number << (Number - i));\n        v73 = Number;\n        v64 = Number * i;\n        while (!v41) {\n          vc1_decode_ac_coeff(a1, &v41, &v40, &v39, *(_DWORD *)(a1 + Number));\n          v73 += v40;\n          if (v73 > Number)\n            break;\n          if (*(_DWORD *)(a1 + Number)) {\n            v32 = v73++;\n            v31 = *((unsigned __int8 *)&ff_vc1_adv_interlaced_4x8_zz + v32);\n          } else {\n            v29 = *(_QWORD *)(a1 + Number);\n            v30 = v73++;\n            v31 = *(unsigned __int8 *)(v29 + v30);\n          }\n          v70 = v31 + v64;\n          *(_WORD *)(Number L * v70 + a2) = v65 * v39;\n          if (!*(_BYTE *)(a1 + Number)) {\n            if (*(__int16 *)(Number L * v70 + a2) >= Number)\n              LOWORD(v33) = a4;\n            else\n              v33 = -a4;\n            *(_WORD *)(Number L * v70 + a2) += v33;\n          }\n        }\n        if (((v71 >> (Number - i)) & Number) == Number && !a9) {\n          if (v73 == Number)\n            (*(void(__fastcall **)(__int64, _QWORD, __int64))(a1 + Number))(\n                Number * i + a7, a8, a2 + Number L * v64);\n          else\n            (*(void(__fastcall **)(__int64, _QWORD, __int64))(a1 + Number))(\n                Number * i + a7, a8, a2 + Number L * v64);\n        }\n      }\n    } else if (v69) {\n      if (v69 == Number) {\n        v68 = ~(Number * (v71 & Number) + Number * (v71 & Number)) & Number;\n        for (i = Number; i <= Number; ++i) {\n          v41 = v71 & (Number << (Number - i));\n          v73 = Number;\n          v64 = Number * i;\n          while (!v41) {\n            vc1_decode_ac_coeff(a1, &v41, &v40, &v39, *(_DWORD *)(a1 + Number));\n            v73 += v40;\n            if (v73 > Number)\n              break;\n            if (*(_DWORD *)(a1 + Number)) {\n              v27 = v73++;\n              v26 = *((unsigned __int8 *)&ff_vc1_adv_interlaced_8x4_zz + v27);\n            } else {\n              v24 = *(_QWORD *)(a1 + Number);\n              v25 = v73++;\n              v26 = *(unsigned __int8 *)(v24 + v25);\n            }\n            v70 = v26 + v64;\n            *(_WORD *)(Number L * v70 + a2) = v65 * v39;\n            if (!*(_BYTE *)(a1 + Number)) {\n              if (*(__int16 *)(Number L * v70 + a2) >= Number)\n                LOWORD(v28) = a4;\n              else\n                v28 = -a4;\n              *(_WORD *)(Number L * v70 + a2) += v28;\n            }\n          }\n          if (((v71 >> (Number - i)) & Number) == Number && !a9) {\n            if (v73 == Number)\n              (*(void(__fastcall **)(__int64, _QWORD, __int64))(a1 + Number))(\n                  (int)(Number * a8 * i) + a7, a8, a2 + Number L * v64);\n            else\n              (*(void(__fastcall **)(__int64, _QWORD, __int64))(a1 + Number))(\n                  (int)(Number * a8 * i) + a7, a8, a2 + Number L * v64);\n          }\n        }\n      }\n    } else {\n      v68 = Number;\n      v73 = Number;\n      v41 = Number;\n      while (!v41) {\n        vc1_decode_ac_coeff(a1, &v41, &v40, &v39, *(_DWORD *)(a1 + Number));\n        v73 += v40;\n        if (v73 > Number)\n          break;\n        v18 = v73;\n        if (*(_DWORD *)(a1 + Number)) {\n          ++v73;\n          v19 = *(unsigned __int8 *)(a1 + v18 + Number);\n        } else {\n          ++v73;\n          v19 = *(unsigned __int8 *)(a1 + v18 + Number);\n        }\n        v70 = v19;\n        *(_WORD *)(Number L * v19 + a2) = v65 * v39;\n        if (!*(_BYTE *)(a1 + Number)) {\n          if (*(__int16 *)(Number L * v70 + a2) >= Number)\n            LOWORD(v20) = a4;\n          else\n            v20 = -a4;\n          *(_WORD *)(Number L * v70 + a2) += v20;\n        }\n      }\n      if (!a9) {\n        if (v73 == Number) {\n          (*(void(__fastcall **)(__int64, _QWORD, __int64))(a1 + Number))(\n              a7, a8, a2);\n        } else {\n          (*(void(__fastcall **)(__int64))(a1 + Number))(a2);\n          (*(void(__fastcall **)(__int64, __int64, _QWORD))(v67 + Number))(\n              a2, a7, a8);\n        }\n      }\n    }\n  }\n  if (a10)\n    *a10 |= v69 << (Number * a3);\n  return v68;\n}", "code_t": "int __cdecl vc1_decode_p_block(\n    VC1Context_0 *<span class=\"supfact\">v</span>, int16_t *<span class=\"supfact\">block</span>,\n    int <span class=\"supfact\">n</span>, int <span class=\"supfact\">mquant</span>, int <span class=\"supfact\">ttmb</span>,\n    int <span class=\"supfact\">first_block</span>, uint8_t *<span class=\"supfact\">dst</span>,\n    int <span class=\"supfact\">linesize</span>, int <span class=\"supfact\">skip_block</span>,\n    int *<span class=\"supfact\">ttmb_out</span>) {\n  int <span class=\"supfact\">v10</span>;\n  __int64 v11;\n  unsigned int v12;\n  __int64 v13;\n  unsigned int v14;\n  int v15;\n  int v16;\n  int v17;\n  int v18;\n  int v19;\n  int v20;\n  int v21;\n  int v22;\n  int v23;\n  const uint8_t *v24;\n  int v25;\n  int v26;\n  int v27;\n  int v28;\n  const uint8_t *v29;\n  int v30;\n  int v31;\n  int v32;\n  int v33;\n  char na;\n  int <span class=\"supfact\">value</span>;\n  int <span class=\"supfact\">skip</span>;\n  int <span class=\"supfact\">last</span>;\n  int <span class=\"supfact\">v42</span>;\n  int <span class=\"supfact\">v43</span>;\n  uint32_t <span class=\"supfact\">v44</span>;\n  unsigned int <span class=\"supfact\">v45</span>;\n  unsigned int <span class=\"supfact\">v46</span>;\n  uint32_t <span class=\"supfact\">v47</span>;\n  unsigned int <span class=\"supfact\">v48</span>;\n  int <span class=\"supfact\">v49</span>;\n  int <span class=\"supfact\">v50</span>;\n  __int64 <span class=\"supfact\">v51</span>;\n  GetBitContext_0 *<span class=\"supfact\">v52</span>;\n  int <span class=\"supfact\">v53</span>;\n  int <span class=\"supfact\">v54</span>;\n  uint32_t <span class=\"supfact\">v55</span>;\n  unsigned int <span class=\"supfact\">v56</span>;\n  unsigned int <span class=\"supfact\">v57</span>;\n  uint32_t <span class=\"supfact\">a</span>;\n  unsigned int <span class=\"supfact\">v59</span>;\n  int <span class=\"supfact\">v60</span>;\n  int <span class=\"supfact\">v61</span>;\n  __int64 <span class=\"supfact\">v62</span>;\n  GetBitContext_0 *<span class=\"supfact\">v63</span>;\n  int <span class=\"supfact\">off</span>;\n  int <span class=\"supfact\">scale</span>;\n  GetBitContext_0 *<span class=\"supfact\">gb</span>;\n  MpegEncContext_0 *<span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">pat</span>;\n  int <span class=\"supfact\">ttblk</span>;\n  int <span class=\"supfact\">idx</span>;\n  int <span class=\"supfact\">subblkpat</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  na = <span class=\"supfact\">n</span>;\n  <span class=\"supfact\">s</span> = &<span class=\"supfact\">v</span>-><span class=\"supfact\">s</span>;\n  <span class=\"supfact\">gb</span> = &<span class=\"supfact\">v</span>-><span class=\"supfact\">s</span>.<span class=\"supfact\">gb</span>;\n  <span class=\"supfact\">subblkpat</span> = Number;\n  <span class=\"supfact\">ttblk</span> = <span class=\"supfact\">ttmb</span> & Number;\n  <span class=\"supfact\">pat</span> = Number;\n  <span class=\"supfact\">v</span>-><span class=\"supfact\">s</span>.dsp.clear_block(<span class=\"supfact\">block</span>);\n  if (<span class=\"supfact\">ttmb</span> == Number) {\n    <span class=\"supfact\">v10</span> = <span class=\"supfact\">v</span>->tt_index;\n    v11 = ff_vc1_ttblk_vlc[Number * <span class=\"supfact\">v10</span> + Number];\n    <span class=\"supfact\">v63</span> = <span class=\"supfact\">gb</span>;\n    <span class=\"supfact\">v62</span> = v11;\n    <span class=\"supfact\">v61</span> = Number;\n    <span class=\"supfact\">v60</span> = Number;\n    <span class=\"supfact\">v59</span> = <span class=\"supfact\">gb</span>->index;\n    <span class=\"supfact\">a</span> = Number;\n    <span class=\"supfact\">v57</span> = <span class=\"supfact\">gb</span>->size_in_bits_plus8;\n    <span class=\"supfact\">v56</span> =\n        *(_DWORD *)&<span class=\"supfact\">gb</span>->buffer[<span class=\"supfact\">v59</span> >> Number];\n    <span class=\"supfact\">a</span> =\n        (HIBYTE(<span class=\"supfact\">v56</span>) |\n         (unsigned __int16)(HIWORD(<span class=\"supfact\">v56</span>) << Number) |\n         (((unsigned __int16)((_WORD)<span class=\"supfact\">v56</span> << Number) |\n           BYTE1(<span class=\"supfact\">v56</span>))\n          << Number))\n        << (<span class=\"supfact\">v59</span> & Number);\n    <span class=\"supfact\">v55</span> = NEG_USR32(<span class=\"supfact\">a</span>, Number);\n    <span class=\"supfact\">v54</span> =\n        *(__int16 *)(Number L * <span class=\"supfact\">v55</span> + <span class=\"supfact\">v62</span>);\n    <span class=\"supfact\">v53</span> = *(__int16 *)(Number L * <span class=\"supfact\">v55</span> +\n                                       <span class=\"supfact\">v62</span> + Number);\n    <span class=\"supfact\">a</span> <<= <span class=\"supfact\">v53</span>;\n    v12 = <span class=\"supfact\">v53</span> + <span class=\"supfact\">v59</span>;\n    if (<span class=\"supfact\">v57</span> <= <span class=\"supfact\">v53</span> + <span class=\"supfact\">v59</span>)\n      v12 = <span class=\"supfact\">v57</span>;\n    <span class=\"supfact\">v59</span> = v12;\n    <span class=\"supfact\">v63</span>->index = v12;\n    <span class=\"supfact\">ttblk</span> =\n        ff_vc1_ttblk_to_tt[Number * <span class=\"supfact\">v10</span> + <span class=\"supfact\">v54</span>];\n  }\n  if (<span class=\"supfact\">ttblk</span> == Number) {\n    v13 = ff_vc1_subblkpat_vlc[Number * <span class=\"supfact\">v</span>->tt_index + Number];\n    <span class=\"supfact\">v52</span> = <span class=\"supfact\">gb</span>;\n    <span class=\"supfact\">v51</span> = v13;\n    <span class=\"supfact\">v50</span> = Number;\n    <span class=\"supfact\">v49</span> = Number;\n    <span class=\"supfact\">v48</span> = <span class=\"supfact\">gb</span>->index;\n    <span class=\"supfact\">v47</span> = Number;\n    <span class=\"supfact\">v46</span> = <span class=\"supfact\">gb</span>->size_in_bits_plus8;\n    <span class=\"supfact\">v45</span> =\n        *(_DWORD *)&<span class=\"supfact\">gb</span>->buffer[<span class=\"supfact\">v48</span> >> Number];\n    <span class=\"supfact\">v47</span> =\n        (HIBYTE(<span class=\"supfact\">v45</span>) |\n         (unsigned __int16)(HIWORD(<span class=\"supfact\">v45</span>) << Number) |\n         (((unsigned __int16)((_WORD)<span class=\"supfact\">v45</span> << Number) |\n           BYTE1(<span class=\"supfact\">v45</span>))\n          << Number))\n        << (<span class=\"supfact\">v48</span> & Number);\n    <span class=\"supfact\">v44</span> = NEG_USR32(<span class=\"supfact\">v47</span>, Number);\n    <span class=\"supfact\">v43</span> =\n        *(__int16 *)(Number L * <span class=\"supfact\">v44</span> + <span class=\"supfact\">v51</span>);\n    <span class=\"supfact\">v42</span> = *(__int16 *)(Number L * <span class=\"supfact\">v44</span> +\n                                       <span class=\"supfact\">v51</span> + Number);\n    <span class=\"supfact\">v47</span> <<= <span class=\"supfact\">v42</span>;\n    v14 = <span class=\"supfact\">v42</span> + <span class=\"supfact\">v48</span>;\n    if (<span class=\"supfact\">v46</span> <= <span class=\"supfact\">v42</span> + <span class=\"supfact\">v48</span>)\n      v14 = <span class=\"supfact\">v46</span>;\n    <span class=\"supfact\">v48</span> = v14;\n    <span class=\"supfact\">v52</span>->index = v14;\n    <span class=\"supfact\">subblkpat</span> = ~(<span class=\"supfact\">v43</span> + Number);\n  }\n  if (<span class=\"supfact\">ttblk</span> && <span class=\"supfact\">ttblk</span> != Number &&\n      (<span class=\"supfact\">v</span>->ttmbf ||\n       <span class=\"supfact\">ttmb</span> != Number &&\n           (<span class=\"supfact\">ttmb</span> & Number) != Number &&\n           !<span class=\"supfact\">first_block</span> ||\n       !<span class=\"supfact\">v</span>->res_rtm_flag && !<span class=\"supfact\">first_block</span>)) {\n    <span class=\"supfact\">subblkpat</span> = decode012(<span class=\"supfact\">gb</span>);\n    if (<span class=\"supfact\">subblkpat</span>)\n      <span class=\"supfact\">subblkpat</span> ^= Number;\n    if (<span class=\"supfact\">ttblk</span> == Number || <span class=\"supfact\">ttblk</span> == Number)\n      <span class=\"supfact\">ttblk</span> = Number;\n    if (<span class=\"supfact\">ttblk</span> == Number || <span class=\"supfact\">ttblk</span> == Number)\n      <span class=\"supfact\">ttblk</span> = Number;\n  }\n  if (<span class=\"supfact\">mquant</span> == <span class=\"supfact\">v</span>->pq)\n    v15 = <span class=\"supfact\">v</span>->halfpq;\n  else\n    v15 = Number;\n  <span class=\"supfact\">scale</span> = Number * <span class=\"supfact\">mquant</span> + v15;\n  if (<span class=\"supfact\">ttblk</span> == Number || <span class=\"supfact\">ttblk</span> == Number) {\n    if (<span class=\"supfact\">ttblk</span> == Number)\n      v16 = Number;\n    else\n      v16 = Number;\n    <span class=\"supfact\">subblkpat</span> = v16;\n    <span class=\"supfact\">ttblk</span> = Number;\n  }\n  if (<span class=\"supfact\">ttblk</span> == Number || <span class=\"supfact\">ttblk</span> == Number) {\n    if (<span class=\"supfact\">ttblk</span> == Number)\n      v17 = Number;\n    else\n      v17 = Number;\n    <span class=\"supfact\">subblkpat</span> = v17;\n    <span class=\"supfact\">ttblk</span> = Number;\n  }\n  if (<span class=\"supfact\">ttblk</span> == Number) {\n    <span class=\"supfact\">pat</span> = ~(_BYTE)<span class=\"supfact\">subblkpat</span> & Number;\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">last</span> =\n          <span class=\"supfact\">subblkpat</span> & (Number << (Number - <span class=\"supfact\">j</span>));\n      <span class=\"supfact\">i</span> = Number;\n      <span class=\"supfact\">off</span> = Number * ((<span class=\"supfact\">j</span> & Number) +\n                                      Number * (<span class=\"supfact\">j</span> & Number));\n      while (!<span class=\"supfact\">last</span>) {\n        vc1_decode_ac_coeff(<span class=\"supfact\">v</span>, &<span class=\"supfact\">last</span>,\n                            &<span class=\"supfact\">skip</span>, &<span class=\"supfact\">value</span>,\n                            <span class=\"supfact\">v</span>->codingset2);\n        <span class=\"supfact\">i</span> += <span class=\"supfact\">skip</span>;\n        if (<span class=\"supfact\">i</span> > Number)\n          break;\n        v21 = <span class=\"supfact\">i</span>;\n        if (<span class=\"supfact\">v</span>->fcm) {\n          ++<span class=\"supfact\">i</span>;\n          v22 = *((unsigned __int8 *)&ff_vc1_adv_interlaced_4x4_zz + v21);\n        } else {\n          ++<span class=\"supfact\">i</span>;\n          v22 = *((unsigned __int8 *)&ff_vc1_simple_progressive_4x4_zz + v21);\n        }\n        <span class=\"supfact\">idx</span> = v22;\n        <span class=\"supfact\">block</span>[v22 + <span class=\"supfact\">off</span>] =\n            <span class=\"supfact\">scale</span> * <span class=\"supfact\">value</span>;\n        if (!<span class=\"supfact\">v</span>->pquantizer) {\n          if (<span class=\"supfact\">block</span>[<span class=\"supfact\">idx</span> +\n                                    <span class=\"supfact\">off</span>] >= Number)\n            LOWORD(v23) = <span class=\"supfact\">mquant</span>;\n          else\n            v23 = -<span class=\"supfact\">mquant</span>;\n          <span class=\"supfact\">block</span>[<span class=\"supfact\">idx</span> + <span class=\"supfact\">off</span>] +=\n              v23;\n        }\n      }\n      if (((<span class=\"supfact\">subblkpat</span> >> (Number - <span class=\"supfact\">j</span>)) &\n           Number) == Number &&\n          !<span class=\"supfact\">skip_block</span>) {\n        if (<span class=\"supfact\">i</span> == Number)\n          <span class=\"supfact\">v</span>->vc1dsp.vc1_inv_trans_4x4_dc(\n              &<span class=\"supfact\">dst</span>[Number * <span class=\"supfact\">linesize</span> *\n                                       (<span class=\"supfact\">j</span> & Number) +\n                                   (__int64)(Number *\n                                             (<span class=\"supfact\">j</span> & Number))],\n              <span class=\"supfact\">linesize</span>,\n              &<span class=\"supfact\">block</span>[<span class=\"supfact\">off</span>]);\n        else\n          <span class=\"supfact\">v</span>->vc1dsp.vc1_inv_trans_4x4(\n              &<span class=\"supfact\">dst</span>[Number * <span class=\"supfact\">linesize</span> *\n                                       (<span class=\"supfact\">j</span> & Number) +\n                                   (__int64)(Number *\n                                             (<span class=\"supfact\">j</span> & Number))],\n              <span class=\"supfact\">linesize</span>,\n              &<span class=\"supfact\">block</span>[<span class=\"supfact\">off</span>]);\n      }\n    }\n  } else if (<span class=\"supfact\">ttblk</span> <= Number) {\n    if (<span class=\"supfact\">ttblk</span> == Number) {\n      <span class=\"supfact\">pat</span> =\n          ~(Number * (_BYTE)<span class=\"supfact\">subblkpat</span>) & Number;\n      for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n           ++<span class=\"supfact\">j</span>) {\n        <span class=\"supfact\">last</span> = <span class=\"supfact\">subblkpat</span> &\n                               (Number << (Number - <span class=\"supfact\">j</span>));\n        <span class=\"supfact\">i</span> = Number;\n        <span class=\"supfact\">off</span> = Number * <span class=\"supfact\">j</span>;\n        while (!<span class=\"supfact\">last</span>) {\n          vc1_decode_ac_coeff(<span class=\"supfact\">v</span>, &<span class=\"supfact\">last</span>,\n                              &<span class=\"supfact\">skip</span>, &<span class=\"supfact\">value</span>,\n                              <span class=\"supfact\">v</span>->codingset2);\n          <span class=\"supfact\">i</span> += <span class=\"supfact\">skip</span>;\n          if (<span class=\"supfact\">i</span> > Number)\n            break;\n          if (<span class=\"supfact\">v</span>->fcm) {\n            v32 = <span class=\"supfact\">i</span>++;\n            v31 = *((unsigned __int8 *)&ff_vc1_adv_interlaced_4x8_zz + v32);\n          } else {\n            v29 = <span class=\"supfact\">v</span>->zz_4x8;\n            v30 = <span class=\"supfact\">i</span>++;\n            v31 = v29[v30];\n          }\n          <span class=\"supfact\">idx</span> = v31 + <span class=\"supfact\">off</span>;\n          <span class=\"supfact\">block</span>[<span class=\"supfact\">idx</span>] =\n              <span class=\"supfact\">scale</span> * <span class=\"supfact\">value</span>;\n          if (!<span class=\"supfact\">v</span>->pquantizer) {\n            if (<span class=\"supfact\">block</span>[<span class=\"supfact\">idx</span>] >= Number)\n              LOWORD(v33) = <span class=\"supfact\">mquant</span>;\n            else\n              v33 = -<span class=\"supfact\">mquant</span>;\n            <span class=\"supfact\">block</span>[<span class=\"supfact\">idx</span>] += v33;\n          }\n        }\n        if (((<span class=\"supfact\">subblkpat</span> >> (Number - <span class=\"supfact\">j</span>)) &\n             Number) == Number &&\n            !<span class=\"supfact\">skip_block</span>) {\n          if (<span class=\"supfact\">i</span> == Number)\n            <span class=\"supfact\">v</span>->vc1dsp.vc1_inv_trans_4x8_dc(\n                &<span class=\"supfact\">dst</span>[Number * <span class=\"supfact\">j</span>],\n                <span class=\"supfact\">linesize</span>,\n                &<span class=\"supfact\">block</span>[<span class=\"supfact\">off</span>]);\n          else\n            <span class=\"supfact\">v</span>->vc1dsp.vc1_inv_trans_4x8(\n                &<span class=\"supfact\">dst</span>[Number * <span class=\"supfact\">j</span>],\n                <span class=\"supfact\">linesize</span>,\n                &<span class=\"supfact\">block</span>[<span class=\"supfact\">off</span>]);\n        }\n      }\n    } else if (<span class=\"supfact\">ttblk</span>) {\n      if (<span class=\"supfact\">ttblk</span> == Number) {\n        <span class=\"supfact\">pat</span> = ~(Number * (<span class=\"supfact\">subblkpat</span> & Number) +\n                                Number * (<span class=\"supfact\">subblkpat</span> & Number)) &\n                              Number;\n        for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n             ++<span class=\"supfact\">j</span>) {\n          <span class=\"supfact\">last</span> = <span class=\"supfact\">subblkpat</span> &\n                                 (Number << (Number - <span class=\"supfact\">j</span>));\n          <span class=\"supfact\">i</span> = Number;\n          <span class=\"supfact\">off</span> = Number * <span class=\"supfact\">j</span>;\n          while (!<span class=\"supfact\">last</span>) {\n            vc1_decode_ac_coeff(<span class=\"supfact\">v</span>, &<span class=\"supfact\">last</span>,\n                                &<span class=\"supfact\">skip</span>, &<span class=\"supfact\">value</span>,\n                                <span class=\"supfact\">v</span>->codingset2);\n            <span class=\"supfact\">i</span> += <span class=\"supfact\">skip</span>;\n            if (<span class=\"supfact\">i</span> > Number)\n              break;\n            if (<span class=\"supfact\">v</span>->fcm) {\n              v27 = <span class=\"supfact\">i</span>++;\n              v26 = *((unsigned __int8 *)&ff_vc1_adv_interlaced_8x4_zz + v27);\n            } else {\n              v24 = <span class=\"supfact\">v</span>->zz_8x4;\n              v25 = <span class=\"supfact\">i</span>++;\n              v26 = v24[v25];\n            }\n            <span class=\"supfact\">idx</span> = v26 + <span class=\"supfact\">off</span>;\n            <span class=\"supfact\">block</span>[<span class=\"supfact\">idx</span>] =\n                <span class=\"supfact\">scale</span> * <span class=\"supfact\">value</span>;\n            if (!<span class=\"supfact\">v</span>->pquantizer) {\n              if (<span class=\"supfact\">block</span>[<span class=\"supfact\">idx</span>] >= Number)\n                LOWORD(v28) = <span class=\"supfact\">mquant</span>;\n              else\n                v28 = -<span class=\"supfact\">mquant</span>;\n              <span class=\"supfact\">block</span>[<span class=\"supfact\">idx</span>] += v28;\n            }\n          }\n          if (((<span class=\"supfact\">subblkpat</span> >> (Number - <span class=\"supfact\">j</span>)) &\n               Number) == Number &&\n              !<span class=\"supfact\">skip_block</span>) {\n            if (<span class=\"supfact\">i</span> == Number)\n              <span class=\"supfact\">v</span>->vc1dsp.vc1_inv_trans_8x4_dc(\n                  &<span class=\"supfact\">dst</span>[Number * <span class=\"supfact\">linesize</span> *\n                                       <span class=\"supfact\">j</span>],\n                  <span class=\"supfact\">linesize</span>,\n                  &<span class=\"supfact\">block</span>[<span class=\"supfact\">off</span>]);\n            else\n              <span class=\"supfact\">v</span>->vc1dsp.vc1_inv_trans_8x4(\n                  &<span class=\"supfact\">dst</span>[Number * <span class=\"supfact\">linesize</span> *\n                                       <span class=\"supfact\">j</span>],\n                  <span class=\"supfact\">linesize</span>,\n                  &<span class=\"supfact\">block</span>[<span class=\"supfact\">off</span>]);\n          }\n        }\n      }\n    } else {\n      <span class=\"supfact\">pat</span> = Number;\n      <span class=\"supfact\">i</span> = Number;\n      <span class=\"supfact\">last</span> = Number;\n      while (!<span class=\"supfact\">last</span>) {\n        vc1_decode_ac_coeff(<span class=\"supfact\">v</span>, &<span class=\"supfact\">last</span>,\n                            &<span class=\"supfact\">skip</span>, &<span class=\"supfact\">value</span>,\n                            <span class=\"supfact\">v</span>->codingset2);\n        <span class=\"supfact\">i</span> += <span class=\"supfact\">skip</span>;\n        if (<span class=\"supfact\">i</span> > Number)\n          break;\n        v18 = <span class=\"supfact\">i</span>;\n        if (<span class=\"supfact\">v</span>->fcm) {\n          ++<span class=\"supfact\">i</span>;\n          v19 = <span class=\"supfact\">v</span>->zzi_8x8[v18];\n        } else {\n          ++<span class=\"supfact\">i</span>;\n          v19 = <span class=\"supfact\">v</span>->zz_8x8[Number][v18];\n        }\n        <span class=\"supfact\">idx</span> = v19;\n        <span class=\"supfact\">block</span>[v19] =\n            <span class=\"supfact\">scale</span> * <span class=\"supfact\">value</span>;\n        if (!<span class=\"supfact\">v</span>->pquantizer) {\n          if (<span class=\"supfact\">block</span>[<span class=\"supfact\">idx</span>] >= Number)\n            LOWORD(v20) = <span class=\"supfact\">mquant</span>;\n          else\n            v20 = -<span class=\"supfact\">mquant</span>;\n          <span class=\"supfact\">block</span>[<span class=\"supfact\">idx</span>] += v20;\n        }\n      }\n      if (!<span class=\"supfact\">skip_block</span>) {\n        if (<span class=\"supfact\">i</span> == Number) {\n          <span class=\"supfact\">v</span>->vc1dsp.vc1_inv_trans_8x8_dc(\n              <span class=\"supfact\">dst</span>, <span class=\"supfact\">linesize</span>,\n              <span class=\"supfact\">block</span>);\n        } else {\n          <span class=\"supfact\">v</span>->vc1dsp.vc1_inv_trans_8x8(<span class=\"supfact\">block</span>);\n          <span class=\"supfact\">s</span>->dsp.add_pixels_clamped(<span class=\"supfact\">block</span>,\n                                                    <span class=\"supfact\">dst</span>,\n                                                    <span class=\"supfact\">linesize</span>);\n        }\n      }\n    }\n  }\n  if (<span class=\"supfact\">ttmb_out</span>)\n    *<span class=\"supfact\">ttmb_out</span> |= <span class=\"supfact\">ttblk</span> << (Number * na);\n  return <span class=\"supfact\">pat</span>;\n}", "var": [{"name": "a1", "type": "VC1Context_0 *", "pred_name": "v", "ref_name": "v", "ref_type": "VC1Context_0 *"}, {"name": "a2", "type": "DCTELEM *", "pred_name": "block", "ref_name": "block", "ref_type": "int16_t *"}, {"name": "a3", "type": "int", "pred_name": "n", "ref_name": "n", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "mquant", "ref_name": "mquant", "ref_type": "int"}, {"name": "a5", "type": "int", "pred_name": "ttmb", "ref_name": "ttmb", "ref_type": "int"}, {"name": "a6", "type": "int", "pred_name": "first_block", "ref_name": "first_block", "ref_type": "int"}, {"name": "a7", "type": "uint8_t *", "pred_name": "dst", "ref_name": "dst", "ref_type": "uint8_t *"}, {"name": "a8", "type": "int", "pred_name": "linesize", "ref_name": "linesize", "ref_type": "int"}, {"name": "a9", "type": "int", "pred_name": "skip_block", "ref_name": "skip_block", "ref_type": "int"}, {"name": "a10", "type": "int *", "pred_name": "ttmb_out", "ref_name": "ttmb_out", "ref_type": "int *"}, {"name": "v10", "type": "int", "pred_name": "v10", "ref_name": "v10", "ref_type": "int"}, {"name": "v39", "type": "int", "pred_name": "value", "ref_name": "value", "ref_type": "int"}, {"name": "v40", "type": "int", "pred_name": "skip", "ref_name": "skip", "ref_type": "int"}, {"name": "v41", "type": "int", "pred_name": "last", "ref_name": "last", "ref_type": "int"}, {"name": "v42", "type": "int", "pred_name": "v42", "ref_name": "v42", "ref_type": "int"}, {"name": "v43", "type": "uint32_t", "pred_name": "v43", "ref_name": "v43", "ref_type": "int"}, {"name": "v44", "type": "uint32_t", "pred_name": "v44", "ref_name": "v44", "ref_type": "uint32_t"}, {"name": "v45", "type": "unsigned int", "pred_name": "v45", "ref_name": "v45", "ref_type": "unsigned int"}, {"name": "v46", "type": "int", "pred_name": "v46", "ref_name": "v46", "ref_type": "unsigned int"}, {"name": "v47", "type": "uint32_t", "pred_name": "v47", "ref_name": "v47", "ref_type": "uint32_t"}, {"name": "v48", "type": "uint32_t", "pred_name": "a", "ref_name": "v48", "ref_type": "unsigned int"}, {"name": "v49", "type": "int", "pred_name": "v49", "ref_name": "v49", "ref_type": "int"}, {"name": "v50", "type": "int", "pred_name": "v50", "ref_name": "v50", "ref_type": "int"}, {"name": "v51", "type": "__int64", "pred_name": "v51", "ref_name": "v51", "ref_type": "__int64"}, {"name": "v52", "type": "GetBitContext_0 *", "pred_name": "v52", "ref_name": "v52", "ref_type": "GetBitContext_0 *"}, {"name": "v53", "type": "int", "pred_name": "v53", "ref_name": "v53", "ref_type": "int"}, {"name": "v54", "type": "int", "pred_name": "v54", "ref_name": "v54", "ref_type": "int"}, {"name": "v55", "type": "uint32_t", "pred_name": "v55", "ref_name": "v55", "ref_type": "uint32_t"}, {"name": "v56", "type": "uint32_t", "pred_name": "a", "ref_name": "v56", "ref_type": "unsigned int"}, {"name": "v57", "type": "unsigned int", "pred_name": "v57", "ref_name": "v57", "ref_type": "unsigned int"}, {"name": "v58", "type": "unsigned int", "pred_name": "v58", "ref_name": "a", "ref_type": "uint32_t"}, {"name": "v59", "type": "int", "pred_name": "v59", "ref_name": "v59", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/31feca0b01f7963552d84f00505fe4a77a17dbe5b130536a7d7912b04adf2717", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Applications/d/Output/make_dparser.native", "objdump": "00000000004083f0 <propogate_declarations>:\n  4083f0:\t55                   \tpush   %rbp\n  4083f1:\t48 89 e5             \tmov    %rsp,%rbp\n  4083f4:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4083f8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  4083fc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  408400:\t8b 80 08 01 00 00    \tmov    0x108(%rax),%eax\n  408406:\t85 c0                \ttest   %eax,%eax\n  408408:\t74 2f                \tje     408439 <propogate_declarations+0x49>\n  40840a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40840e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  408412:\t48 8b 00             \tmov    (%rax),%rax\n  408415:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40841a:\t48 89 c7             \tmov    %rax,%rdi\n  40841d:\te8 01 a2 ff ff       \tcallq  402623 <new_elem_nterm>\n  408422:\t48 89 c1             \tmov    %rax,%rcx\n  408425:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  408429:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40842e:\t48 89 ce             \tmov    %rcx,%rsi\n  408431:\t48 89 c7             \tmov    %rax,%rdi\n  408434:\te8 ed ad ff ff       \tcallq  403226 <new_declaration>\n  408439:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40843d:\t8b 80 0c 01 00 00    \tmov    0x10c(%rax),%eax\n  408443:\t85 c0                \ttest   %eax,%eax\n  408445:\t74 2f                \tje     408476 <propogate_declarations+0x86>\n  408447:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40844b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40844f:\t48 8b 00             \tmov    (%rax),%rax\n  408452:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  408457:\t48 89 c7             \tmov    %rax,%rdi\n  40845a:\te8 c4 a1 ff ff       \tcallq  402623 <new_elem_nterm>\n  40845f:\t48 89 c1             \tmov    %rax,%rcx\n  408462:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  408466:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40846b:\t48 89 ce             \tmov    %rcx,%rsi\n  40846e:\t48 89 c7             \tmov    %rax,%rdi\n  408471:\te8 b0 ad ff ff       \tcallq  403226 <new_declaration>\n  408476:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40847d:\te9 8c 00 00 00       \tjmpq   40850e <propogate_declarations+0x11e>\n  408482:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  408486:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n  40848d:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  408490:\t48 63 d2             \tmovslq %edx,%rdx\n  408493:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  408497:\t48 01 d0             \tadd    %rdx,%rax\n  40849a:\t48 8b 00             \tmov    (%rax),%rax\n  40849d:\t48 8b 00             \tmov    (%rax),%rax\n  4084a0:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  4084a4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4084a8:\t8b 00                \tmov    (%rax),%eax\n  4084aa:\t83 f8 02             \tcmp    $0x2,%eax\n  4084ad:\t75 5b                \tjne    40850a <propogate_declarations+0x11a>\n  4084af:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4084b3:\t8b 40 18             \tmov    0x18(%rax),%eax\n  4084b6:\t89 c2                \tmov    %eax,%edx\n  4084b8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4084bc:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n  4084c0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4084c4:\t48 89 ce             \tmov    %rcx,%rsi\n  4084c7:\t48 89 c7             \tmov    %rax,%rdi\n  4084ca:\te8 29 d2 ff ff       \tcallq  4056f8 <lookup_production>\n  4084cf:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4084d3:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  4084d8:\t75 1a                \tjne    4084f4 <propogate_declarations+0x104>\n  4084da:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4084de:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4084e2:\t48 89 c6             \tmov    %rax,%rsi\n  4084e5:\tbf 0c 2e 42 00       \tmov    $0x422e0c,%edi\n  4084ea:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4084ef:\te8 b7 38 01 00       \tcallq  41bdab <d_fail>\n  4084f4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4084f8:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  4084fe:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408502:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  408506:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  40850a:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40850e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  408512:\t8b 90 a0 00 00 00    \tmov    0xa0(%rax),%edx\n  408518:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40851b:\t39 c2                \tcmp    %eax,%edx\n  40851d:\t0f 87 5f ff ff ff    \tja     408482 <propogate_declarations+0x92>\n  408523:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40852a:\teb 7f                \tjmp    4085ab <propogate_declarations+0x1bb>\n  40852c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  408530:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n  408537:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40853a:\t48 63 d2             \tmovslq %edx,%rdx\n  40853d:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  408541:\t48 01 d0             \tadd    %rdx,%rax\n  408544:\t48 8b 00             \tmov    (%rax),%rax\n  408547:\t48 89 c7             \tmov    %rax,%rdi\n  40854a:\te8 0e fd ff ff       \tcallq  40825d <scanner_declaration>\n  40854f:\t85 c0                \ttest   %eax,%eax\n  408551:\t74 54                \tje     4085a7 <propogate_declarations+0x1b7>\n  408553:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  408557:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n  40855e:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  408561:\t48 63 d2             \tmovslq %edx,%rdx\n  408564:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  408568:\t48 01 d0             \tadd    %rdx,%rax\n  40856b:\t48 8b 00             \tmov    (%rax),%rax\n  40856e:\t48 8b 00             \tmov    (%rax),%rax\n  408571:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  408575:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  408579:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40857d:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n  408584:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  408587:\t48 63 d2             \tmovslq %edx,%rdx\n  40858a:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  40858e:\t48 01 d0             \tadd    %rdx,%rax\n  408591:\t48 8b 10             \tmov    (%rax),%rdx\n  408594:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  408598:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40859c:\t48 89 ce             \tmov    %rcx,%rsi\n  40859f:\t48 89 c7             \tmov    %rax,%rdi\n  4085a2:\te8 d8 fc ff ff       \tcallq  40827f <set_declaration_group>\n  4085a7:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4085ab:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4085af:\t8b 90 a0 00 00 00    \tmov    0xa0(%rax),%edx\n  4085b5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4085b8:\t39 c2                \tcmp    %eax,%edx\n  4085ba:\t0f 87 6c ff ff ff    \tja     40852c <propogate_declarations+0x13c>\n  4085c0:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4085c7:\te9 84 01 00 00       \tjmpq   408750 <propogate_declarations+0x360>\n  4085cc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4085d0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4085d4:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4085d7:\t48 63 d2             \tmovslq %edx,%rdx\n  4085da:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  4085de:\t48 01 d0             \tadd    %rdx,%rax\n  4085e1:\t48 8b 00             \tmov    (%rax),%rax\n  4085e4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4085e8:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4085ef:\te9 46 01 00 00       \tjmpq   40873a <propogate_declarations+0x34a>\n  4085f4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4085f8:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4085fc:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  4085ff:\t48 63 d2             \tmovslq %edx,%rdx\n  408602:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  408606:\t48 01 d0             \tadd    %rdx,%rax\n  408609:\t48 8b 00             \tmov    (%rax),%rax\n  40860c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  408610:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  408617:\te9 08 01 00 00       \tjmpq   408724 <propogate_declarations+0x334>\n  40861c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  408620:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  408624:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  408627:\t48 63 d2             \tmovslq %edx,%rdx\n  40862a:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  40862e:\t48 01 d0             \tadd    %rdx,%rax\n  408631:\t48 8b 00             \tmov    (%rax),%rax\n  408634:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  408638:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40863c:\t8b 00                \tmov    (%rax),%eax\n  40863e:\t83 f8 01             \tcmp    $0x1,%eax\n  408641:\t0f 85 d9 00 00 00    \tjne    408720 <propogate_declarations+0x330>\n  408647:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40864b:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n  40864f:\t48 85 c0             \ttest   %rax,%rax\n  408652:\t75 24                \tjne    408678 <propogate_declarations+0x288>\n  408654:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  408658:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  40865c:\t48 85 c0             \ttest   %rax,%rax\n  40865f:\t75 17                \tjne    408678 <propogate_declarations+0x288>\n  408661:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408665:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  408669:\t0f b6 50 24          \tmovzbl 0x24(%rax),%edx\n  40866d:\t83 e2 f8             \tand    $0xfffffff8,%edx\n  408670:\t88 50 24             \tmov    %dl,0x24(%rax)\n  408673:\te9 a8 00 00 00       \tjmpq   408720 <propogate_declarations+0x330>\n  408678:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40867c:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n  408680:\t48 85 c0             \ttest   %rax,%rax\n  408683:\t74 24                \tje     4086a9 <propogate_declarations+0x2b9>\n  408685:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  408689:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  40868d:\t48 85 c0             \ttest   %rax,%rax\n  408690:\t75 17                \tjne    4086a9 <propogate_declarations+0x2b9>\n  408692:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408696:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  40869a:\t0f b6 50 24          \tmovzbl 0x24(%rax),%edx\n  40869e:\t83 e2 f8             \tand    $0xfffffff8,%edx\n  4086a1:\t83 ca 01             \tor     $0x1,%edx\n  4086a4:\t88 50 24             \tmov    %dl,0x24(%rax)\n  4086a7:\teb 77                \tjmp    408720 <propogate_declarations+0x330>\n  4086a9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4086ad:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n  4086b1:\t48 85 c0             \ttest   %rax,%rax\n  4086b4:\t75 21                \tjne    4086d7 <propogate_declarations+0x2e7>\n  4086b6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4086ba:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  4086be:\t48 85 c0             \ttest   %rax,%rax\n  4086c1:\t74 14                \tje     4086d7 <propogate_declarations+0x2e7>\n  4086c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4086c7:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4086cb:\t0f b6 50 24          \tmovzbl 0x24(%rax),%edx\n  4086cf:\t83 e2 f8             \tand    $0xfffffff8,%edx\n  4086d2:\t88 50 24             \tmov    %dl,0x24(%rax)\n  4086d5:\teb 49                \tjmp    408720 <propogate_declarations+0x330>\n  4086d7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4086db:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n  4086e2:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  4086e5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4086e9:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n  4086f0:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  4086f3:\t39 c2                \tcmp    %eax,%edx\n  4086f5:\t76 17                \tjbe    40870e <propogate_declarations+0x31e>\n  4086f7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4086fb:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4086ff:\t0f b6 50 24          \tmovzbl 0x24(%rax),%edx\n  408703:\t83 e2 f8             \tand    $0xfffffff8,%edx\n  408706:\t83 ca 01             \tor     $0x1,%edx\n  408709:\t88 50 24             \tmov    %dl,0x24(%rax)\n  40870c:\teb 12                \tjmp    408720 <propogate_declarations+0x330>\n  40870e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408712:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  408716:\t0f b6 50 24          \tmovzbl 0x24(%rax),%edx\n  40871a:\t83 e2 f8             \tand    $0xfffffff8,%edx\n  40871d:\t88 50 24             \tmov    %dl,0x24(%rax)\n  408720:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  408724:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  408728:\t8b 50 20             \tmov    0x20(%rax),%edx\n  40872b:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40872e:\t39 c2                \tcmp    %eax,%edx\n  408730:\t0f 87 e6 fe ff ff    \tja     40861c <propogate_declarations+0x22c>\n  408736:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  40873a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40873e:\t8b 50 10             \tmov    0x10(%rax),%edx\n  408741:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  408744:\t39 c2                \tcmp    %eax,%edx\n  408746:\t0f 87 a8 fe ff ff    \tja     4085f4 <propogate_declarations+0x204>\n  40874c:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  408750:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  408754:\t8b 50 08             \tmov    0x8(%rax),%edx\n  408757:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40875a:\t39 c2                \tcmp    %eax,%edx\n  40875c:\t0f 87 6a fe ff ff    \tja     4085cc <propogate_declarations+0x1dc>\n  408762:\t90                   \tnop\n  408763:\t90                   \tnop\n  408764:\tc9                   \tleaveq \n  408765:\tc3                   \tretq   ", "code_s": "__int64 __fastcall propogate_declarations(__int64 a1) {\n  _QWORD *v1;\n  _QWORD *v2;\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  __int64 result;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  unsigned int m;\n  unsigned int l;\n  unsigned int i;\n  unsigned int j;\n  unsigned int k;\n  if (*(_DWORD *)(a1 + Number)) {\n    v1 = new_elem_nterm(**(_QWORD **)(a1 + Number), Number L);\n    new_declaration(a1, (__int64)v1, Number);\n  }\n  if (*(_DWORD *)(a1 + Number)) {\n    v2 = new_elem_nterm(**(_QWORD **)(a1 + Number), Number L);\n    new_declaration(a1, (__int64)v2, Number);\n  }\n  for (i = Number; *(_DWORD *)(a1 + Number) > i; ++i) {\n    v10 = **(_QWORD **)(Number L * (int)i + *(_QWORD *)(a1 + Number));\n    if (*(_DWORD *)v10 == Number) {\n      v13 = lookup_production(a1, *(const char **)(v10 + Number),\n                              *(_DWORD *)(v10 + Number));\n      if (!v13)\n        d_fail((unsigned int)String, *(_QWORD *)(v10 + Number), v3, v4, v5, v6);\n      *(_DWORD *)v10 = Number;\n      *(_QWORD *)(v10 + Number) = v13;\n    }\n  }\n  for (j = Number; *(_DWORD *)(a1 + Number) > j; ++j) {\n    if (scanner_declaration(\n            *(_QWORD *)(Number L * (int)j + *(_QWORD *)(a1 + Number))))\n      set_declaration_group(\n          *(_QWORD *)(**(_QWORD **)(Number L * (int)j +\n                                    *(_QWORD *)(a1 + Number)) +\n                      Number L),\n          *(_QWORD *)(**(_QWORD **)(Number L * (int)j +\n                                    *(_QWORD *)(a1 + Number)) +\n                      Number L),\n          *(_QWORD *)(Number L * (int)j + *(_QWORD *)(a1 + Number)),\n          *(_QWORD *)(**(_QWORD **)(Number L * (int)j +\n                                    *(_QWORD *)(a1 + Number)) +\n                      Number L),\n          v7, v8);\n  }\n  for (k = Number;; ++k) {\n    result = k;\n    if (*(_DWORD *)(a1 + Number) <= k)\n      break;\n    v14 = *(_QWORD *)(Number L * (int)k + *(_QWORD *)(a1 + Number));\n    for (l = Number; *(_DWORD *)(v14 + Number) > l; ++l) {\n      v12 = *(_QWORD *)(Number L * (int)l + *(_QWORD *)(v14 + Number));\n      for (m = Number; *(_DWORD *)(v12 + Number) > m; ++m) {\n        v11 = *(_QWORD *)(Number L * (int)m + *(_QWORD *)(v12 + Number));\n        if (*(_DWORD *)v11 == Number) {\n          if (*(_QWORD *)(v14 + Number) || *(_QWORD *)(v14 + Number)) {\n            if (!*(_QWORD *)(v14 + Number) || *(_QWORD *)(v14 + Number)) {\n              if (*(_QWORD *)(v14 + Number) || !*(_QWORD *)(v14 + Number)) {\n                if (*(_DWORD *)(*(_QWORD *)(v14 + Number) + Number L) <=\n                    *(_DWORD *)(*(_QWORD *)(v14 + Number) + Number L))\n                  *(_BYTE *)(*(_QWORD *)(v11 + Number) + Number L) &= Number;\n                else\n                  *(_BYTE *)(*(_QWORD *)(v11 + Number) + Number L) =\n                      *(_BYTE *)(*(_QWORD *)(v11 + Number) + Number L) &\n                          Number |\n                      Number;\n              } else {\n                *(_BYTE *)(*(_QWORD *)(v11 + Number) + Number L) &= Number;\n              }\n            } else {\n              *(_BYTE *)(*(_QWORD *)(v11 + Number) + Number L) =\n                  *(_BYTE *)(*(_QWORD *)(v11 + Number) + Number L) & Number |\n                  Number;\n            }\n          } else {\n            *(_BYTE *)(*(_QWORD *)(v11 + Number) + Number L) &= Number;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl propogate_declarations(Grammar_0 *<span class=\"supfact\">g</span>) {\n  Elem_0 *v1;\n  Elem_0 *v2;\n  Elem *e;\n  Elem_0 *ea;\n  Rule_0 *<span class=\"supfact\">r</span>;\n  Production_0 *p;\n  Production_0 *pa;\n  int <span class=\"supfact\">k</span>;\n  int <span class=\"supfact\">j</span>;\n  unsigned int i;\n  unsigned int ia;\n  unsigned int ib;\n  if (<span class=\"supfact\">g</span>->tokenizer) {\n    v1 = new_elem_nterm(*<span class=\"supfact\">g</span>->productions.v, Number L);\n    new_declaration(<span class=\"supfact\">g</span>, v1, Number);\n  }\n  if (<span class=\"supfact\">g</span>->longest_match) {\n    v2 = new_elem_nterm(*<span class=\"supfact\">g</span>->productions.v, Number L);\n    new_declaration(<span class=\"supfact\">g</span>, v2, Number);\n  }\n  for (i = Number; <span class=\"supfact\">g</span>->declarations.n > i; ++i) {\n    e = <span class=\"supfact\">g</span>->declarations.v[i]->elem;\n    if (e->kind == ELEM_UNRESOLVED) {\n      p = lookup_production(<span class=\"supfact\">g</span>, e->e.unresolved.string,\n                            e->e.unresolved.len);\n      if (!p)\n        d_fail(String, e->e.unresolved.string);\n      e->kind = ELEM_NTERM;\n      e->e.nterm = p;\n    }\n  }\n  for (ia = Number; <span class=\"supfact\">g</span>->declarations.n > ia; ++ia) {\n    if (scanner_declaration(<span class=\"supfact\">g</span>->declarations.v[ia]))\n      set_declaration_group(\n          <span class=\"supfact\">g</span>->declarations.v[ia]->elem->e.nterm,\n          <span class=\"supfact\">g</span>->declarations.v[ia]->elem->e.nterm,\n          <span class=\"supfact\">g</span>->declarations.v[ia]);\n  }\n  for (ib = Number; <span class=\"supfact\">g</span>->productions.n > ib; ++ib) {\n    pa = <span class=\"supfact\">g</span>->productions.v[ib];\n    for (<span class=\"supfact\">j</span> = Number; pa->rules.n > <span class=\"supfact\">j</span>;\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">r</span> = pa->rules.v[<span class=\"supfact\">j</span>];\n      for (<span class=\"supfact\">k</span> = Number;\n           <span class=\"supfact\">r</span>->elems.n > <span class=\"supfact\">k</span>;\n           ++<span class=\"supfact\">k</span>) {\n        ea = <span class=\"supfact\">r</span>->elems.v[<span class=\"supfact\">k</span>];\n        if (ea->kind == ELEM_TERM) {\n          if (pa->declaration_group[Number] || pa->declaration_group[Number]) {\n            if (!pa->declaration_group[Number] ||\n                pa->declaration_group[Number]) {\n              if (pa->declaration_group[Number] ||\n                  !pa->declaration_group[Number]) {\n                if (pa->last_declaration[Number]->index <=\n                    pa->last_declaration[Number]->index)\n                  BYTE4(ea->e.nterm->rules.e[Number]) &= Number;\n                else\n                  BYTE4(ea->e.nterm->rules.e[Number]) =\n                      BYTE4(ea->e.nterm->rules.e[Number]) & Number | Number;\n              } else {\n                BYTE4(ea->e.nterm->rules.e[Number]) &= Number;\n              }\n            } else {\n              BYTE4(ea->e.nterm->rules.e[Number]) =\n                  BYTE4(ea->e.nterm->rules.e[Number]) & Number | Number;\n            }\n          } else {\n            BYTE4(ea->e.nterm->rules.e[Number]) &= Number;\n          }\n        }\n      }\n    }\n  }\n}", "var": [{"name": "a1", "type": "disappear", "pred_name": "", "ref_name": "g", "ref_type": "Grammar_0 *"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v12", "type": "disappear", "pred_name": "", "ref_name": "r", "ref_type": "Rule_0 *"}, {"name": "m", "type": "int", "pred_name": "j", "ref_name": "k", "ref_type": "int"}, {"name": "l", "type": "int", "pred_name": "i", "ref_name": "j", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/86fa5aa0fbd3eddabbaf3f280b5c87028c14c996328b040303fbd04dfcae7f6c", "path_in_repo": "XanClic/qemu//hw/block/nvme.o", "objdump": "000000000000491d <_nocheck__trace_nvme_ub_db_wr_misaligned>:\n    491d:\t55                   \tpush   %rbp\n    491e:\t48 89 e5             \tmov    %rsp,%rbp\n    4921:\t41 54                \tpush   %r12\n    4923:\t53                   \tpush   %rbx\n    4924:\t48 83 ec 30          \tsub    $0x30,%rsp\n    4928:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    492c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    4933:\t00 00 \n    4935:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    4939:\t31 c0                \txor    %eax,%eax\n    493b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4941 <_nocheck__trace_nvme_ub_db_wr_misaligned+0x24>\n    4941:\t85 c0                \ttest   %eax,%eax\n    4943:\t0f 95 c0             \tsetne  %al\n    4946:\t0f b6 c0             \tmovzbl %al,%eax\n    4949:\t48 85 c0             \ttest   %rax,%rax\n    494c:\t74 5e                \tje     49ac <_nocheck__trace_nvme_ub_db_wr_misaligned+0x8f>\n    494e:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 4955 <_nocheck__trace_nvme_ub_db_wr_misaligned+0x38>\n    4955:\t66 85 c0             \ttest   %ax,%ax\n    4958:\t74 52                \tje     49ac <_nocheck__trace_nvme_ub_db_wr_misaligned+0x8f>\n    495a:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    495f:\te8 62 bf ff ff       \tcallq  8c6 <qemu_loglevel_mask>\n    4964:\t84 c0                \ttest   %al,%al\n    4966:\t74 44                \tje     49ac <_nocheck__trace_nvme_ub_db_wr_misaligned+0x8f>\n    4968:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    496c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4971:\t48 89 c7             \tmov    %rax,%rdi\n    4974:\te8 00 00 00 00       \tcallq  4979 <_nocheck__trace_nvme_ub_db_wr_misaligned+0x5c>\n    4979:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    497d:\t49 89 c4             \tmov    %rax,%r12\n    4980:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    4984:\t48 89 c3             \tmov    %rax,%rbx\n    4987:\te8 00 00 00 00       \tcallq  498c <_nocheck__trace_nvme_ub_db_wr_misaligned+0x6f>\n    498c:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    4990:\t49 89 d0             \tmov    %rdx,%r8\n    4993:\t4c 89 e1             \tmov    %r12,%rcx\n    4996:\t48 89 da             \tmov    %rbx,%rdx\n    4999:\t89 c6                \tmov    %eax,%esi\n    499b:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 49a2 <_nocheck__trace_nvme_ub_db_wr_misaligned+0x85>\n    49a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    49a7:\te8 00 00 00 00       \tcallq  49ac <_nocheck__trace_nvme_ub_db_wr_misaligned+0x8f>\n    49ac:\t90                   \tnop\n    49ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    49b1:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    49b8:\t00 00 \n    49ba:\t74 05                \tje     49c1 <_nocheck__trace_nvme_ub_db_wr_misaligned+0xa4>\n    49bc:\te8 00 00 00 00       \tcallq  49c1 <_nocheck__trace_nvme_ub_db_wr_misaligned+0xa4>\n    49c1:\t48 83 c4 30          \tadd    $0x30,%rsp\n    49c5:\t5b                   \tpop    %rbx\n    49c6:\t41 5c                \tpop    %r12\n    49c8:\t5d                   \tpop    %rbp\n    49c9:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_nvme_ub_db_wr_misaligned(\n    __int64 a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval tv;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_NVME_UB_DB_WR_MISALIGNED_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&tv, Number L);\n    v1 = tv.tv_usec;\n    v2 = tv.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl nocheck__trace_nvme_ub_db_wr_misaligned(\n    uint64_t <span class=\"supfact\">offset</span>) {\n  __suseconds_t <span class=\"supfact\">v1</span>;\n  __time_t <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_NVME_UB_DB_WR_MISALIGNED_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    <span class=\"supfact\">v1</span> = <span class=\"supfact\">_now</span>.tv_usec;\n    <span class=\"supfact\">v2</span> = <span class=\"supfact\">_now</span>.tv_sec;\n    <span class=\"supfact\">v3</span> = qemu_get_thread_id();\n    qemu_log(String, <span class=\"supfact\">v3</span>, <span class=\"supfact\">v2</span>, <span class=\"supfact\">v1</span>,\n             <span class=\"supfact\">offset</span>);\n  }\n}", "var": [{"name": "a1", "type": "uint64_t", "pred_name": "offset", "ref_name": "offset", "ref_type": "uint64_t"}, {"name": "v1", "type": "__suseconds_t", "pred_name": "v1", "ref_name": "v1", "ref_type": "__suseconds_t"}, {"name": "v2", "type": "__time_t", "pred_name": "v2", "ref_name": "v2", "ref_type": "__time_t"}, {"name": "v3", "type": "unsigned int", "pred_name": "v3", "ref_name": "v3", "ref_type": "unsigned int"}, {"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "_now", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v6", "type": "unsigned __int64", "pred_name": "v5", "ref_name": "v5", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "arthurphilippe", "repo_name": "minilibc", "path": "arthurphilippe/minilibc/e7f147632915caa4cf1b986ac69a0f64759816493fdd8ef2e872631d4ae421f1", "path_in_repo": "arthurphilippe/minilibc//src/strspn.o", "objdump": "0000000000000000 <strspn>:\n   0:\t48 31 c0             \txor    %rax,%rax\n   3:\t4d 31 d2             \txor    %r10,%r10\n   6:\teb 1c                \tjmp    24 <strspn.LCOND>", "code_s": "__int64 __fastcall strspn(__int64 a1, __int64 a2) {\n  __int64 result;\n  __int64 v3;\n  char v4;\n  result = Number L;\n  v3 = Number L;\n  while (Number) {\n    v4 = *(_BYTE *)(a1 + result);\n    if (!v4)\n      break;\n    if (v4 == *(_BYTE *)(a2 + v3)) {\n      ++result;\n      v3 = Number L;\n    } else {\n      ++v3;\n      if (!*(_BYTE *)(a2 + v3))\n        return result;\n    }\n  }\n  return result;\n}", "code_t": "__int64 __fastcall strspn(__int64 <span class=\"supfact\">a1</span>,\n                          __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  char <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">result</span> = Number L;\n  <span class=\"supfact\">v3</span> = Number L;\n  while (Number) {\n    <span class=\"supfact\">v4</span> =\n        *(_BYTE *)(<span class=\"supfact\">a1</span> + <span class=\"supfact\">result</span>);\n    if (!<span class=\"supfact\">v4</span>)\n      break;\n    if (<span class=\"supfact\">v4</span> ==\n        *(_BYTE *)(<span class=\"supfact\">a2</span> + <span class=\"supfact\">v3</span>)) {\n      ++<span class=\"supfact\">result</span>;\n      <span class=\"supfact\">v3</span> = Number L;\n    } else {\n      ++<span class=\"supfact\">v3</span>;\n      if (!*(_BYTE *)(<span class=\"supfact\">a2</span> + <span class=\"supfact\">v3</span>))\n        return <span class=\"supfact\">result</span>;\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "const char *", "pred_name": "s1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "const char *", "pred_name": "s2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "__int64"}, {"name": "v3", "type": "size_t", "pred_name": "j", "ref_name": "v3", "ref_type": "__int64"}, {"name": "v4", "type": "size_t", "pred_name": "i", "ref_name": "v4", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "shenxueyuan", "repo_name": "ffmpeg", "path": "shenxueyuan/ffmpeg/0bec53e5807e1a662488d212af5287eab9be8be1b2d38e987c1cd2de4eead079", "path_in_repo": "shenxueyuan/ffmpeg//libavfilter/vsrc_mandelbrot.o", "objdump": "00000000000001b2 <query_formats>:\n     1b2:\t48 83 ec 28          \tsub    $0x28,%rsp\n     1b6:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     1bb:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     1c0:\te8 00 00 00 00       \tcallq  1c5 <query_formats+0x13>\n     1c5:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n     1ca:\t48 83 7c 24 18 00    \tcmpq   $0x0,0x18(%rsp)\n     1d0:\t75 07                \tjne    1d9 <query_formats+0x27>\n     1d2:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     1d7:\teb 15                \tjmp    1ee <query_formats+0x3c>\n     1d9:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n     1de:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     1e3:\t48 89 d6             \tmov    %rdx,%rsi\n     1e6:\t48 89 c7             \tmov    %rax,%rdi\n     1e9:\te8 00 00 00 00       \tcallq  1ee <query_formats+0x3c>\n     1ee:\t48 83 c4 28          \tadd    $0x28,%rsp\n     1f2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall query_formats(__int64 a1) {\n  __int64 result;\n  __int64 v2;\n  v2 = ff_make_format_list(&pix_fmts_10862);\n  if (v2)\n    result = ff_set_common_formats(a1, v2);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl query_formats(AVFilterContext_0 *<span class=\"supfact\">ctx</span>) {\n  int <span class=\"supfact\">result</span>;\n  AVFilterFormats_0 *<span class=\"supfact\">fmts_list</span>;\n  <span class=\"supfact\">fmts_list</span> =\n      (AVFilterFormats_0 *)ff_make_format_list(pix_fmts_10862);\n  if (<span class=\"supfact\">fmts_list</span>)\n    <span class=\"supfact\">result</span> =\n        ff_set_common_formats(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">fmts_list</span>);\n  else\n    <span class=\"supfact\">result</span> = Number;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "AVFilterContext_0 *", "pred_name": "ctx", "ref_name": "ctx", "ref_type": "AVFilterContext_0 *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "v2", "type": "AVFilterFormats_0 *", "pred_name": "fmts_list", "ref_name": "fmts_list", "ref_type": "AVFilterFormats_0 *"}], "body_in_train": false}, {"repo_owner": "grivon", "repo_name": "yabusame-qemu-dpt", "path": "grivon/yabusame-qemu-dpt/1ef9e9770519bfc399ef021c87f603368648d14266e79d7a80ab603d77be9610", "path_in_repo": "grivon/yabusame-qemu-dpt//ui/vnc.o", "objdump": "0000000000008e7e <vnc_display_add_client>:\n    8e7e:\t55                   \tpush   %rbp\n    8e7f:\t48 89 e5             \tmov    %rsp,%rbp\n    8e82:\t48 83 ec 20          \tsub    $0x20,%rsp\n    8e86:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    8e8a:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    8e8d:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n    8e90:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    8e97:\t00 00 \n    8e99:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    8e9d:\t31 c0                \txor    %eax,%eax\n    8e9f:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    8ea4:\t74 0a                \tje     8eb0 <vnc_display_add_client+0x32>\n    8ea6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    8eaa:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    8eae:\teb 07                \tjmp    8eb7 <vnc_display_add_client+0x39>\n    8eb0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8eb7 <vnc_display_add_client+0x39>\n    8eb7:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    8ebb:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n    8ebe:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n    8ec1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    8ec5:\t89 ce                \tmov    %ecx,%esi\n    8ec7:\t48 89 c7             \tmov    %rax,%rdi\n    8eca:\te8 15 ee ff ff       \tcallq  7ce4 <vnc_connect>\n    8ecf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    8ed3:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    8eda:\t00 00 \n    8edc:\t74 05                \tje     8ee3 <vnc_display_add_client+0x65>\n    8ede:\te8 00 00 00 00       \tcallq  8ee3 <vnc_display_add_client+0x65>\n    8ee3:\tc9                   \tleaveq \n    8ee4:\tc3                   \tretq   \n", "code_s": "unsigned __int64 __fastcall vnc_display_add_client(__int64 a1, unsigned int a2,\n                                                   int a3) {\n  __int64 v3;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (a1)\n    v3 = *(_QWORD *)(a1 + Number);\n  else\n    v3 = vnc_display;\n  vnc_connect(v3, a2, a3);\n  return __readfsqword(Number) ^ v5;\n}", "code_t": "void __cdecl vnc_display_add_client(DisplayState_0 *<span class=\"supfact\">ds_0</span>,\n                                    int <span class=\"supfact\">csock</span>,\n                                    int <span class=\"supfact\">skipauth</span>) {\n  VncDisplay_0 *<span class=\"supfact\">v3</span>;\n  if (<span class=\"supfact\">ds_0</span>)\n    <span class=\"supfact\">v3</span> = (VncDisplay_0 *)<span class=\"supfact\">ds_0</span>->opaque;\n  else\n    <span class=\"supfact\">v3</span> = vnc_display;\n  vnc_connect(<span class=\"supfact\">v3</span>, <span class=\"supfact\">csock</span>,\n              <span class=\"supfact\">skipauth</span>);\n}", "var": [{"name": "a1", "type": "VncDisplay_0 *", "pred_name": "vd", "ref_name": "ds_0", "ref_type": "DisplayState_0 *"}, {"name": "a2", "type": "int", "pred_name": "width", "ref_name": "csock", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "height", "ref_name": "skipauth", "ref_type": "int"}, {"name": "v3", "type": "VncDisplay_0 *", "pred_name": "v3", "ref_name": "v3", "ref_type": "VncDisplay_0 *"}, {"name": "v5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "leon-anavi", "repo_name": "xmame-arm", "path": "leon-anavi/xmame-arm/b06024db7ed1738589fcf4f214f081a029b1b15a4f450d350ae715fbdf68bb2e", "path_in_repo": "leon-anavi/xmame-arm//xmame.obj/drivers/galaxian.o", "objdump": "0000000000000305 <construct_map_galaxian_writemem>:\n     305:\t55                   \tpush   %rbp\n     306:\t48 89 e5             \tmov    %rsp,%rbp\n     309:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     30d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     311:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n     317:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     31b:\tc7 40 04 05 00 00 00 \tmovl   $0x5,0x4(%rax)\n     322:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     327:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     32b:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     331:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     335:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n     33c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     340:\tc7 40 08 ff 3f 00 00 \tmovl   $0x3fff,0x8(%rax)\n     347:\t48 c7 45 f8 45 00 00 \tmovq   $0x45,-0x8(%rbp)\n     34e:\t00 \n     34f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     353:\t48 c7 40 28 45 00 00 \tmovq   $0x45,0x28(%rax)\n     35a:\t00 \n     35b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     35f:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     366:\t00 \n     367:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     36c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     370:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     376:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     37a:\tc7 40 04 00 40 00 00 \tmovl   $0x4000,0x4(%rax)\n     381:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     385:\tc7 40 08 ff 47 00 00 \tmovl   $0x47ff,0x8(%rax)\n     38c:\t48 c7 45 f8 44 00 00 \tmovq   $0x44,-0x8(%rbp)\n     393:\t00 \n     394:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     398:\t48 c7 40 28 44 00 00 \tmovq   $0x44,0x28(%rax)\n     39f:\t00 \n     3a0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     3a4:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     3ab:\t00 \n     3ac:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     3b1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     3b5:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     3bb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     3bf:\tc7 40 04 00 50 00 00 \tmovl   $0x5000,0x4(%rax)\n     3c6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     3ca:\tc7 40 08 ff 53 00 00 \tmovl   $0x53ff,0x8(%rax)\n     3d1:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     3d8:\t00 \n     3d9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     3dd:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     3e4:\t00 \n     3e5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     3e9:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     3f0:\t00 \n     3f1:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     3f8:\t00 \n     3f9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     3fd:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n     404:\t00 \n     405:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     40a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     40e:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     414:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     418:\tc7 40 04 00 58 00 00 \tmovl   $0x5800,0x4(%rax)\n     41f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     423:\tc7 40 08 3f 58 00 00 \tmovl   $0x583f,0x8(%rax)\n     42a:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     431:\t00 \n     432:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     436:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     43d:\t00 \n     43e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     442:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     449:\t00 \n     44a:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     451:\t00 \n     452:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     456:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n     45d:\t00 \n     45e:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     463:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     467:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     46d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     471:\tc7 40 04 40 58 00 00 \tmovl   $0x5840,0x4(%rax)\n     478:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     47c:\tc7 40 08 5f 58 00 00 \tmovl   $0x585f,0x8(%rax)\n     483:\t48 c7 45 f8 44 00 00 \tmovq   $0x44,-0x8(%rbp)\n     48a:\t00 \n     48b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     48f:\t48 c7 40 28 44 00 00 \tmovq   $0x44,0x28(%rax)\n     496:\t00 \n     497:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     49b:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     4a2:\t00 \n     4a3:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     4aa:\t00 \n     4ab:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4af:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n     4b6:\t00 \n     4b7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4bb:\t48 c7 40 50 00 00 00 \tmovq   $0x0,0x50(%rax)\n     4c2:\t00 \n     4c3:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     4c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4cc:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     4d2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4d6:\tc7 40 04 60 58 00 00 \tmovl   $0x5860,0x4(%rax)\n     4dd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4e1:\tc7 40 08 7f 58 00 00 \tmovl   $0x587f,0x8(%rax)\n     4e8:\t48 c7 45 f8 44 00 00 \tmovq   $0x44,-0x8(%rbp)\n     4ef:\t00 \n     4f0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4f4:\t48 c7 40 28 44 00 00 \tmovq   $0x44,0x28(%rax)\n     4fb:\t00 \n     4fc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     500:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     507:\t00 \n     508:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     50f:\t00 \n     510:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     514:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n     51b:\t00 \n     51c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     520:\t48 c7 40 50 00 00 00 \tmovq   $0x0,0x50(%rax)\n     527:\t00 \n     528:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     52d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     531:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     537:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     53b:\tc7 40 04 80 58 00 00 \tmovl   $0x5880,0x4(%rax)\n     542:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     546:\tc7 40 08 ff 58 00 00 \tmovl   $0x58ff,0x8(%rax)\n     54d:\t48 c7 45 f8 44 00 00 \tmovq   $0x44,-0x8(%rbp)\n     554:\t00 \n     555:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     559:\t48 c7 40 28 44 00 00 \tmovq   $0x44,0x28(%rax)\n     560:\t00 \n     561:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     565:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     56c:\t00 \n     56d:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     572:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     576:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     57c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     580:\tc7 40 04 00 60 00 00 \tmovl   $0x6000,0x4(%rax)\n     587:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     58b:\tc7 40 08 01 60 00 00 \tmovl   $0x6001,0x8(%rax)\n     592:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     599:\t00 \n     59a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     59e:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     5a5:\t00 \n     5a6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5aa:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     5b1:\t00 \n     5b2:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     5b7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5bb:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     5c1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5c5:\tc7 40 04 02 60 00 00 \tmovl   $0x6002,0x4(%rax)\n     5cc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5d0:\tc7 40 08 02 60 00 00 \tmovl   $0x6002,0x8(%rax)\n     5d7:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     5de:\t00 \n     5df:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5e3:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     5ea:\t00 \n     5eb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5ef:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     5f6:\t00 \n     5f7:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     5fc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     600:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     606:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     60a:\tc7 40 04 03 60 00 00 \tmovl   $0x6003,0x4(%rax)\n     611:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     615:\tc7 40 08 03 60 00 00 \tmovl   $0x6003,0x8(%rax)\n     61c:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     623:\t00 \n     624:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     628:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     62f:\t00 \n     630:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     634:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     63b:\t00 \n     63c:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     641:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     645:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     64b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     64f:\tc7 40 04 04 60 00 00 \tmovl   $0x6004,0x4(%rax)\n     656:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     65a:\tc7 40 08 07 60 00 00 \tmovl   $0x6007,0x8(%rax)\n     661:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     668:\t00 \n     669:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     66d:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     674:\t00 \n     675:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     679:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     680:\t00 \n     681:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     686:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     68a:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     690:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     694:\tc7 40 04 00 68 00 00 \tmovl   $0x6800,0x4(%rax)\n     69b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     69f:\tc7 40 08 02 68 00 00 \tmovl   $0x6802,0x8(%rax)\n     6a6:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     6ad:\t00 \n     6ae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     6b2:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     6b9:\t00 \n     6ba:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     6be:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     6c5:\t00 \n     6c6:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     6cb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     6cf:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     6d5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     6d9:\tc7 40 04 03 68 00 00 \tmovl   $0x6803,0x4(%rax)\n     6e0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     6e4:\tc7 40 08 03 68 00 00 \tmovl   $0x6803,0x8(%rax)\n     6eb:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     6f2:\t00 \n     6f3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     6f7:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     6fe:\t00 \n     6ff:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     703:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     70a:\t00 \n     70b:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     710:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     714:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     71a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     71e:\tc7 40 04 05 68 00 00 \tmovl   $0x6805,0x4(%rax)\n     725:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     729:\tc7 40 08 05 68 00 00 \tmovl   $0x6805,0x8(%rax)\n     730:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     737:\t00 \n     738:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     73c:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     743:\t00 \n     744:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     748:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     74f:\t00 \n     750:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     755:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     759:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     75f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     763:\tc7 40 04 06 68 00 00 \tmovl   $0x6806,0x4(%rax)\n     76a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     76e:\tc7 40 08 07 68 00 00 \tmovl   $0x6807,0x8(%rax)\n     775:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     77c:\t00 \n     77d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     781:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     788:\t00 \n     789:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     78d:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     794:\t00 \n     795:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     79a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     79e:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     7a4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7a8:\tc7 40 04 01 70 00 00 \tmovl   $0x7001,0x4(%rax)\n     7af:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7b3:\tc7 40 08 01 70 00 00 \tmovl   $0x7001,0x8(%rax)\n     7ba:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     7c1:\t00 \n     7c2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7c6:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     7cd:\t00 \n     7ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7d2:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     7d9:\t00 \n     7da:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     7df:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7e3:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     7e9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7ed:\tc7 40 04 04 70 00 00 \tmovl   $0x7004,0x4(%rax)\n     7f4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7f8:\tc7 40 08 04 70 00 00 \tmovl   $0x7004,0x8(%rax)\n     7ff:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     806:\t00 \n     807:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     80b:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     812:\t00 \n     813:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     817:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     81e:\t00 \n     81f:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     824:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     828:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     82e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     832:\tc7 40 04 06 70 00 00 \tmovl   $0x7006,0x4(%rax)\n     839:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     83d:\tc7 40 08 06 70 00 00 \tmovl   $0x7006,0x8(%rax)\n     844:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     84b:\t00 \n     84c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     850:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     857:\t00 \n     858:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     85c:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     863:\t00 \n     864:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     869:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     86d:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     873:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     877:\tc7 40 04 07 70 00 00 \tmovl   $0x7007,0x4(%rax)\n     87e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     882:\tc7 40 08 07 70 00 00 \tmovl   $0x7007,0x8(%rax)\n     889:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     890:\t00 \n     891:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     895:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     89c:\t00 \n     89d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8a1:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     8a8:\t00 \n     8a9:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     8ae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8b2:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     8b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8bc:\tc7 40 04 00 78 00 00 \tmovl   $0x7800,0x4(%rax)\n     8c3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8c7:\tc7 40 08 00 78 00 00 \tmovl   $0x7800,0x8(%rax)\n     8ce:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     8d5:\t00 \n     8d6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8da:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n     8e1:\t00 \n     8e2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8e6:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n     8ed:\t00 \n     8ee:\t48 83 45 e8 60       \taddq   $0x60,-0x18(%rbp)\n     8f3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8f7:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n     8fd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     901:\t5d                   \tpop    %rbp\n     902:\tc3                   \tretq   ", "code_s": "__int64 __fastcall construct_map_galaxian_writemem(__int64 a1) {\n  *(_DWORD *)a1 = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_videoram_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_QWORD *)(a1 + Number) = &galaxian_videoram;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_attributesram_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_QWORD *)(a1 + Number) = &galaxian_attributesram;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_QWORD *)(a1 + Number) = &galaxian_spriteram;\n  *(_QWORD *)(a1 + Number) = &galaxian_spriteram_size;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_QWORD *)(a1 + Number) = &galaxian_bulletsram;\n  *(_QWORD *)(a1 + Number) = &galaxian_bulletsram_size;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_leds_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_coin_lockout_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_coin_counter_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_lfo_freq_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_background_enable_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_noise_enable_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_shoot_enable_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_vol_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_nmi_enable_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_stars_enable_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_flip_screen_x_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_flip_screen_y_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_pitch_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  return a1 + Number;\n}", "code_t": "address_map *__cdecl construct_map_galaxian_writemem(\n    address_map *<span class=\"supfact\">map</span>) {\n  <span class=\"supfact\">map</span>->flags = Number;\n  <span class=\"supfact\">map</span>->start = Number;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_videoram_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].base = (void **)&galaxian_videoram;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_attributesram_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].base = (void **)&galaxian_attributesram;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].base = (void **)&galaxian_spriteram;\n  <span class=\"supfact\">map</span>[Number].size = (size_t *)&galaxian_spriteram_size;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].base = (void **)&galaxian_bulletsram;\n  <span class=\"supfact\">map</span>[Number].size = (size_t *)&galaxian_bulletsram_size;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_leds_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_coin_lockout_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_coin_counter_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_lfo_freq_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler =\n      (genf *)&galaxian_background_enable_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_noise_enable_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_shoot_enable_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_vol_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_nmi_enable_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_stars_enable_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_flip_screen_x_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_flip_screen_y_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_pitch_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  return <span class=\"supfact\">map</span> + Number;\n}", "var": [{"name": "a1", "type": "address_map *", "pred_name": "map", "ref_name": "map", "ref_type": "address_map *"}], "body_in_train": false}, {"repo_owner": "pantherb", "repo_name": "setBfree", "path": "pantherb/setBfree/ee893a8e6c54ab249dbd1ce4eb60d65e82a448301e74158d9cd8ba0aca98a450", "path_in_repo": "pantherb/setBfree//src/pgmParser.o", "objdump": "0000000000000536 <parseAssignmentList>:\n 536:\t48 81 ec 48 03 00 00 \tsub    $0x348,%rsp\n 53d:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n 542:\t89 74 24 04          \tmov    %esi,0x4(%rsp)\n 546:\te9 92 01 00 00       \tjmpq   6dd <parseAssignmentList+0x1a7>\n 54b:\t48 8d 94 24 30 02 00 \tlea    0x230(%rsp),%rdx\n 552:\t00 \n 553:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 558:\t48 89 d6             \tmov    %rdx,%rsi\n 55b:\t48 89 c7             \tmov    %rax,%rdi\n 55e:\te8 58 fe ff ff       \tcallq  3bb <parseIdentifier>\n 563:\t89 84 24 3c 03 00 00 \tmov    %eax,0x33c(%rsp)\n 56a:\t83 bc 24 3c 03 00 00 \tcmpl   $0x2,0x33c(%rsp)\n 571:\t02 \n 572:\t75 22                \tjne    596 <parseAssignmentList+0x60>\n 574:\t8b 8c 24 3c 03 00 00 \tmov    0x33c(%rsp),%ecx\n 57b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 580:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 587 <parseAssignmentList+0x51>\n 587:\t89 ce                \tmov    %ecx,%esi\n 589:\t48 89 c7             \tmov    %rax,%rdi\n 58c:\te8 fd fe ff ff       \tcallq  48e <stateMessage>\n 591:\te9 73 01 00 00       \tjmpq   709 <parseAssignmentList+0x1d3>\n 596:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 59b:\tbe 3d 00 00 00       \tmov    $0x3d,%esi\n 5a0:\t48 89 c7             \tmov    %rax,%rdi\n 5a3:\te8 7e fe ff ff       \tcallq  426 <parseToken>\n 5a8:\t89 84 24 3c 03 00 00 \tmov    %eax,0x33c(%rsp)\n 5af:\t83 bc 24 3c 03 00 00 \tcmpl   $0x2,0x33c(%rsp)\n 5b6:\t02 \n 5b7:\t75 49                \tjne    602 <parseAssignmentList+0xcc>\n 5b9:\t48 8d 94 24 30 02 00 \tlea    0x230(%rsp),%rdx\n 5c0:\t00 \n 5c1:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n 5c6:\t48 89 d1             \tmov    %rdx,%rcx\n 5c9:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 5d0 <parseAssignmentList+0x9a>\n 5d0:\tbe 18 01 00 00       \tmov    $0x118,%esi\n 5d5:\t48 89 c7             \tmov    %rax,%rdi\n 5d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 5dd:\te8 00 00 00 00       \tcallq  5e2 <parseAssignmentList+0xac>\n 5e2:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n 5e7:\t8b 8c 24 3c 03 00 00 \tmov    0x33c(%rsp),%ecx\n 5ee:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 5f3:\t89 ce                \tmov    %ecx,%esi\n 5f5:\t48 89 c7             \tmov    %rax,%rdi\n 5f8:\te8 91 fe ff ff       \tcallq  48e <stateMessage>\n 5fd:\te9 07 01 00 00       \tjmpq   709 <parseAssignmentList+0x1d3>\n 602:\t48 8d 94 24 30 01 00 \tlea    0x130(%rsp),%rdx\n 609:\t00 \n 60a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 60f:\t48 89 d6             \tmov    %rdx,%rsi\n 612:\t48 89 c7             \tmov    %rax,%rdi\n 615:\te8 4e fe ff ff       \tcallq  468 <parseExpression>\n 61a:\t89 84 24 3c 03 00 00 \tmov    %eax,0x33c(%rsp)\n 621:\t83 bc 24 3c 03 00 00 \tcmpl   $0x2,0x33c(%rsp)\n 628:\t02 \n 629:\t75 49                \tjne    674 <parseAssignmentList+0x13e>\n 62b:\t48 8d 94 24 30 02 00 \tlea    0x230(%rsp),%rdx\n 632:\t00 \n 633:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n 638:\t48 89 d1             \tmov    %rdx,%rcx\n 63b:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 642 <parseAssignmentList+0x10c>\n 642:\tbe 18 01 00 00       \tmov    $0x118,%esi\n 647:\t48 89 c7             \tmov    %rax,%rdi\n 64a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 64f:\te8 00 00 00 00       \tcallq  654 <parseAssignmentList+0x11e>\n 654:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n 659:\t8b 8c 24 3c 03 00 00 \tmov    0x33c(%rsp),%ecx\n 660:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 665:\t89 ce                \tmov    %ecx,%esi\n 667:\t48 89 c7             \tmov    %rax,%rdi\n 66a:\te8 1f fe ff ff       \tcallq  48e <stateMessage>\n 66f:\te9 95 00 00 00       \tjmpq   709 <parseAssignmentList+0x1d3>\n 674:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 679:\t8b 50 18             \tmov    0x18(%rax),%edx\n 67c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 681:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n 685:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 68a:\t48 8b 00             \tmov    (%rax),%rax\n 68d:\t4c 8d 84 24 30 01 00 \tlea    0x130(%rsp),%r8\n 694:\t00 \n 695:\t48 8d bc 24 30 02 00 \tlea    0x230(%rsp),%rdi\n 69c:\t00 \n 69d:\t8b 4c 24 04          \tmov    0x4(%rsp),%ecx\n 6a1:\t4d 89 c1             \tmov    %r8,%r9\n 6a4:\t49 89 f8             \tmov    %rdi,%r8\n 6a7:\t48 89 c7             \tmov    %rax,%rdi\n 6aa:\te8 00 00 00 00       \tcallq  6af <parseAssignmentList+0x179>\n 6af:\t85 c0                \ttest   %eax,%eax\n 6b1:\t74 07                \tje     6ba <parseAssignmentList+0x184>\n 6b3:\tb8 02 00 00 00       \tmov    $0x2,%eax\n 6b8:\teb 4f                \tjmp    709 <parseAssignmentList+0x1d3>\n 6ba:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 6bf:\tbe 2c 00 00 00       \tmov    $0x2c,%esi\n 6c4:\t48 89 c7             \tmov    %rax,%rdi\n 6c7:\te8 69 fc ff ff       \tcallq  335 <nextTokenMatches>\n 6cc:\t85 c0                \ttest   %eax,%eax\n 6ce:\t74 0d                \tje     6dd <parseAssignmentList+0x1a7>\n 6d0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 6d5:\t48 89 c7             \tmov    %rax,%rdi\n 6d8:\te8 12 fc ff ff       \tcallq  2ef <getNextToken>\n 6dd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 6e2:\tbe 7d 00 00 00       \tmov    $0x7d,%esi\n 6e7:\t48 89 c7             \tmov    %rax,%rdi\n 6ea:\te8 46 fc ff ff       \tcallq  335 <nextTokenMatches>\n 6ef:\t85 c0                \ttest   %eax,%eax\n 6f1:\t0f 84 54 fe ff ff    \tje     54b <parseAssignmentList+0x15>\n 6f7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 6fc:\t48 89 c7             \tmov    %rax,%rdi\n 6ff:\te8 eb fb ff ff       \tcallq  2ef <getNextToken>\n 704:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 709:\t48 81 c4 48 03 00 00 \tadd    $0x348,%rsp\n 710:\tc3                   \tretq   ", "code_s": "__int64 __fastcall parseAssignmentList(__int64 a1, unsigned int a2) {\n  _BOOL4 i;\n  char s[Number];\n  char v5[Number];\n  char v6[Number];\n  unsigned int v7;\n  for (i = nextTokenMatches(a1, Number); !i; i = nextTokenMatches(a1, Number)) {\n    v7 = parseIdentifier(a1, v6);\n    if (v7 == Number)\n      return stateMessage(a1, Number, String);\n    v7 = parseToken(a1, Number);\n    if (v7 == Number) {\n      snprintf(s, Number, String, v6);\n      return stateMessage(a1, v7, s);\n    }\n    v7 = parseExpression(a1, v5);\n    if (v7 == Number) {\n      snprintf(s, Number, String, v6);\n      return stateMessage(a1, v7, s);\n    }\n    if ((unsigned int)bindToProgram(*(_QWORD *)a1, *(_QWORD *)(a1 + Number),\n                                    *(unsigned int *)(a1 + Number), a2, v6, v5))\n      return Number L;\n    if (nextTokenMatches(a1, Number))\n      getNextToken(a1);\n  }\n  getNextToken(a1);\n  return Number L;\n}", "code_t": "ParseReturnCode __cdecl parseAssignmentList(ParserState *<span class=\"supfact\">ps</span>,\n                                            const int <span class=\"supfact\">pgmNr</span>) {\n  char <span class=\"supfact\">msg</span>[Number];\n  char <span class=\"supfact\">value</span>[Number];\n  char <span class=\"supfact\">symbol</span>[Number];\n  ParseReturnCode <span class=\"supfact\">R</span>;\n  while (!nextTokenMatches(<span class=\"supfact\">ps</span>, Number)) {\n    <span class=\"supfact\">R</span> =\n        parseIdentifier(<span class=\"supfact\">ps</span>, <span class=\"supfact\">symbol</span>);\n    if (<span class=\"supfact\">R</span> == Number)\n      return stateMessage(<span class=\"supfact\">ps</span>, Number, String);\n    <span class=\"supfact\">R</span> = parseToken(<span class=\"supfact\">ps</span>, Number);\n    if (<span class=\"supfact\">R</span> == Number) {\n      snprintf(<span class=\"supfact\">msg</span>, Number, String, <span class=\"supfact\">symbol</span>);\n      return stateMessage(<span class=\"supfact\">ps</span>, <span class=\"supfact\">R</span>,\n                          <span class=\"supfact\">msg</span>);\n    }\n    <span class=\"supfact\">R</span> =\n        parseExpression(<span class=\"supfact\">ps</span>, <span class=\"supfact\">value</span>);\n    if (<span class=\"supfact\">R</span> == Number) {\n      snprintf(<span class=\"supfact\">msg</span>, Number, String, <span class=\"supfact\">symbol</span>);\n      return stateMessage(<span class=\"supfact\">ps</span>, <span class=\"supfact\">R</span>,\n                          <span class=\"supfact\">msg</span>);\n    }\n    if ((unsigned int)bindToProgram(\n            <span class=\"supfact\">ps</span>->p, <span class=\"supfact\">ps</span>->fileName,\n            (unsigned int)<span class=\"supfact\">ps</span>->lineNumber,\n            (unsigned int)<span class=\"supfact\">pgmNr</span>, <span class=\"supfact\">symbol</span>,\n            <span class=\"supfact\">value</span>))\n      return Number;\n    if (nextTokenMatches(<span class=\"supfact\">ps</span>, Number))\n      getNextToken(<span class=\"supfact\">ps</span>);\n  }\n  getNextToken(<span class=\"supfact\">ps</span>);\n  return Number;\n}", "var": [{"name": "a1", "type": "STATE *", "pred_name": "state", "ref_name": "ps", "ref_type": "ParserState *"}, {"name": "a2", "type": "int", "pred_name": "token", "ref_name": "pgmNr", "ref_type": "const int"}, {"name": "i", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "s", "type": "char[257]", "pred_name": "buffer", "ref_name": "msg", "ref_type": "char[280]"}, {"name": "v5", "type": "disappear", "pred_name": "", "ref_name": "value", "ref_type": "char[256]"}, {"name": "v6", "type": "disappear", "pred_name": "", "ref_name": "symbol", "ref_type": "char[256]"}, {"name": "v7", "type": "int", "pred_name": "__unk__", "ref_name": "R", "ref_type": "ParseReturnCode"}], "body_in_train": false}, {"repo_owner": "sasshka", "repo_name": "libav", "path": "sasshka/libav/8716b6a951e120d72dc1302b0b7ab1edc42c025a0eaf6f72465fb9d7395cc0e7", "path_in_repo": "sasshka/libav//libavcodec/motionpixels.o", "objdump": "0000000000000c6f <mp_read_changes_map>:\n     c6f:\t48 83 ec 50          \tsub    $0x50,%rsp\n     c73:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n     c78:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n     c7d:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n     c81:\t89 4c 24 08          \tmov    %ecx,0x8(%rsp)\n     c85:\t44 89 44 24 04       \tmov    %r8d,0x4(%rsp)\n     c8a:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n     c91:\t00 \n     c92:\te9 ab 01 00 00       \tjmpq   e42 <mp_read_changes_map+0x1d3>\n     c97:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     c9c:\t8b 40 28             \tmov    0x28(%rax),%eax\n     c9f:\t89 c2                \tmov    %eax,%edx\n     ca1:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     ca6:\t89 d6                \tmov    %edx,%esi\n     ca8:\t48 89 c7             \tmov    %rax,%rdi\n     cab:\te8 b5 f6 ff ff       \tcallq  365 <bitstream_read>\n     cb0:\t89 44 24 44          \tmov    %eax,0x44(%rsp)\n     cb4:\t8b 54 24 08          \tmov    0x8(%rsp),%edx\n     cb8:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     cbd:\t89 d6                \tmov    %edx,%esi\n     cbf:\t48 89 c7             \tmov    %rax,%rdi\n     cc2:\te8 9e f6 ff ff       \tcallq  365 <bitstream_read>\n     cc7:\t83 c0 01             \tadd    $0x1,%eax\n     cca:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n     cce:\t8b 54 24 08          \tmov    0x8(%rsp),%edx\n     cd2:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     cd7:\t89 d6                \tmov    %edx,%esi\n     cd9:\t48 89 c7             \tmov    %rax,%rdi\n     cdc:\te8 84 f6 ff ff       \tcallq  365 <bitstream_read>\n     ce1:\t83 c0 01             \tadd    $0x1,%eax\n     ce4:\t89 44 24 40          \tmov    %eax,0x40(%rsp)\n     ce8:\t83 7c 24 04 00       \tcmpl   $0x0,0x4(%rsp)\n     ced:\t74 16                \tje     d05 <mp_read_changes_map+0x96>\n     cef:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     cf4:\tbe 0f 00 00 00       \tmov    $0xf,%esi\n     cf9:\t48 89 c7             \tmov    %rax,%rdi\n     cfc:\te8 64 f6 ff ff       \tcallq  365 <bitstream_read>\n     d01:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n     d05:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     d0a:\t48 8b 00             \tmov    (%rax),%rax\n     d0d:\t8b 48 6c             \tmov    0x6c(%rax),%ecx\n     d10:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n     d14:\t99                   \tcltd   \n     d15:\tf7 f9                \tidiv   %ecx\n     d17:\t89 54 24 30          \tmov    %edx,0x30(%rsp)\n     d1b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     d20:\t48 8b 00             \tmov    (%rax),%rax\n     d23:\t8b 70 6c             \tmov    0x6c(%rax),%esi\n     d26:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n     d2a:\t99                   \tcltd   \n     d2b:\tf7 fe                \tidiv   %esi\n     d2d:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n     d31:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     d36:\t48 8b 00             \tmov    (%rax),%rax\n     d39:\t8b 40 70             \tmov    0x70(%rax),%eax\n     d3c:\t39 44 24 2c          \tcmp    %eax,0x2c(%rsp)\n     d40:\t7c 05                \tjl     d47 <mp_read_changes_map+0xd8>\n     d42:\te9 fb 00 00 00       \tjmpq   e42 <mp_read_changes_map+0x1d3>\n     d47:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     d4c:\t48 8b 00             \tmov    (%rax),%rax\n     d4f:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n     d52:\t2b 44 24 30          \tsub    0x30(%rsp),%eax\n     d56:\t39 44 24 34          \tcmp    %eax,0x34(%rsp)\n     d5a:\t0f 4e 44 24 34       \tcmovle 0x34(%rsp),%eax\n     d5f:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n     d63:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     d68:\t48 8b 00             \tmov    (%rax),%rax\n     d6b:\t8b 40 70             \tmov    0x70(%rax),%eax\n     d6e:\t2b 44 24 2c          \tsub    0x2c(%rsp),%eax\n     d72:\t39 44 24 40          \tcmp    %eax,0x40(%rsp)\n     d76:\t0f 4e 44 24 40       \tcmovle 0x40(%rsp),%eax\n     d7b:\t89 44 24 40          \tmov    %eax,0x40(%rsp)\n     d7f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     d84:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     d88:\t48 8b 10             \tmov    (%rax),%rdx\n     d8b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     d90:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     d94:\t8b 40 40             \tmov    0x40(%rax),%eax\n     d97:\t0f af 44 24 2c       \timul   0x2c(%rsp),%eax\n     d9c:\t8b 4c 24 30          \tmov    0x30(%rsp),%ecx\n     da0:\t01 c9                \tadd    %ecx,%ecx\n     da2:\t01 c8                \tadd    %ecx,%eax\n     da4:\t48 98                \tcltq   \n     da6:\t48 01 d0             \tadd    %rdx,%rax\n     da9:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n     dae:\teb 7f                \tjmp    e2f <mp_read_changes_map+0x1c0>\n     db0:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     db5:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n     db9:\t8b 44 24 44          \tmov    0x44(%rsp),%eax\n     dbd:\t48 98                \tcltq   \n     dbf:\t48 01 d0             \tadd    %rdx,%rax\n     dc2:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n     dc6:\t88 10                \tmov    %dl,(%rax)\n     dc8:\t83 7c 24 04 00       \tcmpl   $0x0,0x4(%rsp)\n     dcd:\t74 32                \tje     e01 <mp_read_changes_map+0x192>\n     dcf:\tc7 44 24 38 00 00 00 \tmovl   $0x0,0x38(%rsp)\n     dd6:\t00 \n     dd7:\teb 1e                \tjmp    df7 <mp_read_changes_map+0x188>\n     dd9:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n     ddd:\t48 98                \tcltq   \n     ddf:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n     de3:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     de8:\t48 01 d0             \tadd    %rdx,%rax\n     deb:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n     def:\t66 89 10             \tmov    %dx,(%rax)\n     df2:\t83 44 24 38 01       \taddl   $0x1,0x38(%rsp)\n     df7:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n     dfb:\t3b 44 24 34          \tcmp    0x34(%rsp),%eax\n     dff:\t7c d8                \tjl     dd9 <mp_read_changes_map+0x16a>\n     e01:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     e06:\t48 8b 00             \tmov    (%rax),%rax\n     e09:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n     e0c:\t01 44 24 44          \tadd    %eax,0x44(%rsp)\n     e10:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     e15:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     e19:\t8b 40 40             \tmov    0x40(%rax),%eax\n     e1c:\t89 c2                \tmov    %eax,%edx\n     e1e:\tc1 ea 1f             \tshr    $0x1f,%edx\n     e21:\t01 d0                \tadd    %edx,%eax\n     e23:\td1 f8                \tsar    %eax\n     e25:\t48 98                \tcltq   \n     e27:\t48 01 c0             \tadd    %rax,%rax\n     e2a:\t48 01 44 24 48       \tadd    %rax,0x48(%rsp)\n     e2f:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n     e33:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     e36:\t89 54 24 40          \tmov    %edx,0x40(%rsp)\n     e3a:\t85 c0                \ttest   %eax,%eax\n     e3c:\t0f 85 6e ff ff ff    \tjne    db0 <mp_read_changes_map+0x141>\n     e42:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n     e46:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     e49:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n     e4d:\t85 c0                \ttest   %eax,%eax\n     e4f:\t0f 85 42 fe ff ff    \tjne    c97 <mp_read_changes_map+0x28>\n     e55:\t90                   \tnop\n     e56:\t90                   \tnop\n     e57:\t48 83 c4 50          \tadd    $0x50,%rsp\n     e5b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mp_read_changes_map(__int64 a1, unsigned __int64 a2,\n                                       unsigned int a3, unsigned int a4,\n                                       int a5) {\n  int v5;\n  int v6;\n  __int64 result;\n  int v12;\n  int v13;\n  int v14;\n  int v15;\n  int j;\n  __int16 v17;\n  int v18;\n  int v19;\n  int v20;\n  __int64 i;\n  v17 = Number;\n  while (Number) {\n    result = a3--;\n    if (!(_DWORD)result)\n      break;\n    v20 = bitstream_read(a2, *(_DWORD *)(a1 + Number));\n    v14 = bitstream_read(a2, a4) + Number;\n    v18 = bitstream_read(a2, a4) + Number;\n    if (a5)\n      v17 = bitstream_read(a2, Number);\n    v13 = v20 % *(_DWORD *)(*(_QWORD *)a1 + Number L);\n    v12 = v20 / *(_DWORD *)(*(_QWORD *)a1 + Number L);\n    if (v12 < *(_DWORD *)(*(_QWORD *)a1 + Number L)) {\n      v5 = *(_DWORD *)(*(_QWORD *)a1 + Number L) - v13;\n      if (v14 <= v5)\n        v5 = v14;\n      v15 = v5;\n      v6 = *(_DWORD *)(*(_QWORD *)a1 + Number L) - v12;\n      if (v18 <= v6)\n        v6 = v18;\n      v19 = v6;\n      for (i = **(_QWORD **)(a1 + Number) + Number * v13 +\n               v12 * *(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L);\n           v19--;\n           i += Number L *\n                (*(_DWORD *)(*(_QWORD *)(a1 + Number) + Number L) / Number)) {\n        *(_BYTE *)(*(_QWORD *)(a1 + Number) + v20) = v15;\n        if (a5) {\n          for (j = Number; j < v15; ++j)\n            *(_WORD *)(Number L * j + i) = v17;\n        }\n        v20 += *(_DWORD *)(*(_QWORD *)a1 + Number L);\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl mp_read_changes_map(MotionPixelsContext_0 *<span class=\"supfact\">mp</span>,\n                                 BitstreamContext_0 *<span class=\"supfact\">bc</span>,\n                                 int <span class=\"supfact\">count</span>,\n                                 int <span class=\"supfact\">bits_len</span>,\n                                 int <span class=\"supfact\">read_color</span>) {\n  int v5;\n  int v6;\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">x</span>;\n  int w;\n  int wa;\n  int <span class=\"supfact\">i</span>;\n  uint16_t <span class=\"supfact\">color</span>;\n  int h;\n  int ha;\n  int <span class=\"supfact\">offset</span>;\n  uint16_t *<span class=\"supfact\">pixels</span>;\n  <span class=\"supfact\">color</span> = Number;\n  while (<span class=\"supfact\">count</span>--) {\n    <span class=\"supfact\">offset</span> =\n        bitstream_read(<span class=\"supfact\">bc</span>, <span class=\"supfact\">mp</span>->offset_bits_len);\n    w = bitstream_read(<span class=\"supfact\">bc</span>, <span class=\"supfact\">bits_len</span>) + Number;\n    h = bitstream_read(<span class=\"supfact\">bc</span>, <span class=\"supfact\">bits_len</span>) + Number;\n    if (<span class=\"supfact\">read_color</span>)\n      <span class=\"supfact\">color</span> = bitstream_read(<span class=\"supfact\">bc</span>, Number);\n    <span class=\"supfact\">x</span> =\n        <span class=\"supfact\">offset</span> % <span class=\"supfact\">mp</span>->avctx->width;\n    <span class=\"supfact\">y</span> =\n        <span class=\"supfact\">offset</span> / <span class=\"supfact\">mp</span>->avctx->width;\n    if (<span class=\"supfact\">y</span> < <span class=\"supfact\">mp</span>->avctx->height) {\n      v5 = <span class=\"supfact\">mp</span>->avctx->width - <span class=\"supfact\">x</span>;\n      if (w <= v5)\n        v5 = w;\n      wa = v5;\n      v6 = <span class=\"supfact\">mp</span>->avctx->height - <span class=\"supfact\">y</span>;\n      if (h <= v6)\n        v6 = h;\n      ha = v6;\n      for (<span class=\"supfact\">pixels</span> =\n               (uint16_t *)&<span class=\"supfact\">mp</span>->frame\n                   ->data[Number][Number * <span class=\"supfact\">x</span> +\n                                  <span class=\"supfact\">y</span> * <span class=\"supfact\">mp</span>->frame\n                                                          ->linesize[Number]];\n           ha--; <span class=\"supfact\">pixels</span> +=\n                 <span class=\"supfact\">mp</span>->frame->linesize[Number] / Number) {\n        <span class=\"supfact\">mp</span>->changes_map[<span class=\"supfact\">offset</span>] = wa;\n        if (<span class=\"supfact\">read_color</span>) {\n          for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < wa;\n               ++<span class=\"supfact\">i</span>)\n            <span class=\"supfact\">pixels</span>[<span class=\"supfact\">i</span>] = <span class=\"supfact\">color</span>;\n        }\n        <span class=\"supfact\">offset</span> += <span class=\"supfact\">mp</span>->avctx->width;\n      }\n    }\n  }\n}", "var": [{"name": "a1", "type": "mp_int *", "pred_name": "a", "ref_name": "mp", "ref_type": "MotionPixelsContext_0 *"}, {"name": "a2", "type": "mp_int *", "pred_name": "b", "ref_name": "bc", "ref_type": "BitstreamContext_0 *"}, {"name": "a3", "type": "int", "pred_name": "n", "ref_name": "count", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "min", "ref_name": "bits_len", "ref_type": "int"}, {"name": "a5", "type": "int", "pred_name": "max", "ref_name": "read_color", "ref_type": "int"}, {"name": "v12", "type": "int", "pred_name": "maxa", "ref_name": "y", "ref_type": "int"}, {"name": "v13", "type": "int", "pred_name": "mina", "ref_name": "x", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "v17", "type": "__int16", "pred_name": "back", "ref_name": "color", "ref_type": "uint16_t"}, {"name": "v20", "type": "int", "pred_name": "cnt", "ref_name": "offset", "ref_type": "int"}, {"name": "i", "type": "__unk__", "pred_name": "d", "ref_name": "pixels", "ref_type": "uint16_t *"}], "body_in_train": false}, {"repo_owner": "Klamath233", "repo_name": "DumbProtocol", "path": "Klamath233/DumbProtocol/b1ae5a1621d86d07a8a1b50fe5e112bf1bb3fab53fd2c6f2c792557b99db7da6", "path_in_repo": "Klamath233/DumbProtocol/src/libevent/event_tagging.o", "objdump": "0000000000000610 <evtag_marshal_timeval>:\n 610:\t55                   \tpush   %rbp\n 611:\t48 89 e5             \tmov    %rsp,%rbp\n 614:\t48 83 ec 30          \tsub    $0x30,%rsp\n 618:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 61c:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n 61f:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 623:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 627:\t48 8b 00             \tmov    (%rax),%rax\n 62a:\t89 c2                \tmov    %eax,%edx\n 62c:\t48 8d 45 f2          \tlea    -0xe(%rbp),%rax\n 630:\t89 d6                \tmov    %edx,%esi\n 632:\t48 89 c7             \tmov    %rax,%rdi\n 635:\te8 cd f9 ff ff       \tcallq  7 <encode_int_internal>\n 63a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 63d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 641:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 645:\t89 c1                \tmov    %eax,%ecx\n 647:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 64a:\t48 98                \tcltq   \n 64c:\t48 8d 55 f2          \tlea    -0xe(%rbp),%rdx\n 650:\t48 01 d0             \tadd    %rdx,%rax\n 653:\t89 ce                \tmov    %ecx,%esi\n 655:\t48 89 c7             \tmov    %rax,%rdi\n 658:\te8 aa f9 ff ff       \tcallq  7 <encode_int_internal>\n 65d:\t01 45 fc             \tadd    %eax,-0x4(%rbp)\n 660:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n 663:\t48 8d 55 f2          \tlea    -0xe(%rbp),%rdx\n 667:\t8b 75 e4             \tmov    -0x1c(%rbp),%esi\n 66a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 66e:\t48 89 c7             \tmov    %rax,%rdi\n 671:\te8 00 00 00 00       \tcallq  676 <evtag_marshal_timeval+0x66>\n 676:\t90                   \tnop\n 677:\tc9                   \tleaveq \n 678:\tc3                   \tretq   ", "code_s": "__int64 __fastcall evtag_marshal_timeval(__int64 a1, unsigned int a2,\n                                         _QWORD *a3) {\n  int v3;\n  _BYTE v6[Number];\n  int v7;\n  v7 = encode_int_internal(v6, *a3);\n  v3 = encode_int_internal(&v6[v7], a3[Number]);\n  return evtag_marshal(a1, a2, (__int64)v6, v3 + v7);\n}", "code_t": "void __cdecl evtag_marshal_timeval(evbuffer *<span class=\"supfact\">evbuf</span>,\n                                   uint32_t <span class=\"supfact\">tag</span>,\n                                   timeval *<span class=\"supfact\">tv</span>) {\n  int <span class=\"supfact\">v3</span>;\n  uint8_t <span class=\"supfact\">data</span>[Number];\n  int <span class=\"supfact\">len</span>;\n  <span class=\"supfact\">len</span> =\n      encode_int_internal(<span class=\"supfact\">data</span>, <span class=\"supfact\">tv</span>->tv_sec);\n  <span class=\"supfact\">v3</span> = encode_int_internal(\n      &<span class=\"supfact\">data</span>[<span class=\"supfact\">len</span>], <span class=\"supfact\">tv</span>->tv_usec);\n  evtag_marshal(<span class=\"supfact\">evbuf</span>, <span class=\"supfact\">tag</span>,\n                <span class=\"supfact\">data</span>, <span class=\"supfact\">v3</span> + <span class=\"supfact\">len</span>);\n}", "var": [{"name": "a1", "type": "evbuffer *", "pred_name": "evbuf", "ref_name": "evbuf", "ref_type": "evbuffer *"}, {"name": "a2", "type": "uint32_t", "pred_name": "tag", "ref_name": "tag", "ref_type": "uint32_t"}, {"name": "a3", "type": "uint32_t *", "pred_name": "data", "ref_name": "tv", "ref_type": "timeval *"}, {"name": "v3", "type": "int", "pred_name": "v3", "ref_name": "v3", "ref_type": "int"}, {"name": "v6", "type": "evbuffer *", "pred_name": "s", "ref_name": "data", "ref_type": "uint8_t[10]"}, {"name": "v7", "type": "int", "pred_name": "res", "ref_name": "len", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "tyz1030", "repo_name": "SLAMBot", "path": "tyz1030/SLAMBot/567b5e0e285b40eb00bee06dcf4db9fca4f61e314262e8e93a4dc7786f5e4623", "path_in_repo": "tyz1030/SLAMBot/src/imagesource/image_source_pgusb.o", "objdump": "0000000000000732 <get_ready_frame>:\n     732:\t55                   \tpush   %rbp\n     733:\t48 89 e5             \tmov    %rsp,%rbp\n     736:\t48 83 ec 20          \tsub    $0x20,%rsp\n     73a:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     73e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     742:\t48 83 c0 78          \tadd    $0x78,%rax\n     746:\t48 89 c7             \tmov    %rax,%rdi\n     749:\te8 00 00 00 00       \tcallq  74e <get_ready_frame+0x1c>\n     74e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     755:\te9 a4 00 00 00       \tjmpq   7fe <get_ready_frame+0xcc>\n     75a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     75e:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n     762:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     765:\t48 63 d2             \tmovslq %edx,%rdx\n     768:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     76c:\t48 01 d0             \tadd    %rdx,%rax\n     76f:\t8b 00                \tmov    (%rax),%eax\n     771:\t83 f8 01             \tcmp    $0x1,%eax\n     774:\t0f 85 80 00 00 00    \tjne    7fa <get_ready_frame+0xc8>\n     77a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     77e:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n     782:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     785:\t48 63 d2             \tmovslq %edx,%rdx\n     788:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     78c:\t48 01 d0             \tadd    %rdx,%rax\n     78f:\tc7 00 fe ff ff ff    \tmovl   $0xfffffffe,(%rax)\n     795:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n     79c:\teb 3b                \tjmp    7d9 <get_ready_frame+0xa7>\n     79e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7a2:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n     7a6:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n     7a9:\t48 63 d2             \tmovslq %edx,%rdx\n     7ac:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     7b0:\t48 01 d0             \tadd    %rdx,%rax\n     7b3:\t8b 00                \tmov    (%rax),%eax\n     7b5:\t85 c0                \ttest   %eax,%eax\n     7b7:\t7e 1c                \tjle    7d5 <get_ready_frame+0xa3>\n     7b9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7bd:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n     7c1:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n     7c4:\t48 63 d2             \tmovslq %edx,%rdx\n     7c7:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     7cb:\t48 01 d0             \tadd    %rdx,%rax\n     7ce:\t8b 10                \tmov    (%rax),%edx\n     7d0:\t83 ea 01             \tsub    $0x1,%edx\n     7d3:\t89 10                \tmov    %edx,(%rax)\n     7d5:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n     7d9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7dd:\t8b 40 58             \tmov    0x58(%rax),%eax\n     7e0:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n     7e3:\t7c b9                \tjl     79e <get_ready_frame+0x6c>\n     7e5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7e9:\t48 83 c0 78          \tadd    $0x78,%rax\n     7ed:\t48 89 c7             \tmov    %rax,%rdi\n     7f0:\te8 00 00 00 00       \tcallq  7f5 <get_ready_frame+0xc3>\n     7f5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     7f8:\teb 36                \tjmp    830 <get_ready_frame+0xfe>\n     7fa:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     7fe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     802:\t8b 40 58             \tmov    0x58(%rax),%eax\n     805:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n     808:\t0f 8c 4c ff ff ff    \tjl     75a <get_ready_frame+0x28>\n     80e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     812:\t48 8d 50 78          \tlea    0x78(%rax),%rdx\n     816:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     81a:\t48 05 a0 00 00 00    \tadd    $0xa0,%rax\n     820:\t48 89 d6             \tmov    %rdx,%rsi\n     823:\t48 89 c7             \tmov    %rax,%rdi\n     826:\te8 00 00 00 00       \tcallq  82b <get_ready_frame+0xf9>\n     82b:\te9 1e ff ff ff       \tjmpq   74e <get_ready_frame+0x1c>\n     830:\tc9                   \tleaveq \n     831:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_ready_frame(__int64 a1) {\n  _DWORD *v1;\n  int j;\n  unsigned int i;\n  pthread_mutex_lock((pthread_mutex_t *)(a1 + Number));\nLABEL_2:\n  for (i = Number;; ++i) {\n    if ((signed int)i >= *(_DWORD *)(a1 + Number)) {\n      pthread_cond_wait((pthread_cond_t *)(a1 + Number),\n                        (pthread_mutex_t *)(a1 + Number));\n      goto LABEL_2;\n    }\n    if (*(_DWORD *)(Number L * (int)i + *(_QWORD *)(a1 + Number)) == Number)\n      break;\n  }\n  *(_DWORD *)(Number L * (int)i + *(_QWORD *)(a1 + Number)) = Number;\n  for (j = Number; j < *(_DWORD *)(a1 + Number); ++j) {\n    if (*(int *)(Number L * j + *(_QWORD *)(a1 + Number)) > Number) {\n      v1 = (_DWORD *)(Number L * j + *(_QWORD *)(a1 + Number));\n      --*v1;\n    }\n  }\n  pthread_mutex_unlock((pthread_mutex_t *)(a1 + Number));\n  return i;\n}", "code_t": "int __cdecl get_ready_frame(impl_pgusb_t *<span class=\"supfact\">impl</span>) {\n  image_info *<span class=\"supfact\">v1</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  pthread_mutex_lock(&<span class=\"supfact\">impl</span>->queue_mutex);\nLABEL_2:\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">i</span> >= <span class=\"supfact\">impl</span>->nimages) {\n      pthread_cond_wait(&<span class=\"supfact\">impl</span>->queue_cond,\n                        &<span class=\"supfact\">impl</span>->queue_mutex);\n      goto LABEL_2;\n    }\n    if (<span class=\"supfact\">impl</span>->images[<span class=\"supfact\">i</span>].status == Number)\n      break;\n  }\n  <span class=\"supfact\">impl</span>->images[<span class=\"supfact\">i</span>].status = Number;\n  for (<span class=\"supfact\">j</span> = Number;\n       <span class=\"supfact\">j</span> < <span class=\"supfact\">impl</span>->nimages; ++<span class=\"supfact\">j</span>) {\n    if (<span class=\"supfact\">impl</span>->images[<span class=\"supfact\">j</span>].status > Number) {\n      <span class=\"supfact\">v1</span> = &<span class=\"supfact\">impl</span>->images[<span class=\"supfact\">j</span>];\n      --<span class=\"supfact\">v1</span>->status;\n    }\n  }\n  pthread_mutex_unlock(&<span class=\"supfact\">impl</span>->queue_mutex);\n  return <span class=\"supfact\">i</span>;\n}", "var": [{"name": "a1", "type": "PerThreadContext_0 *", "pred_name": "p", "ref_name": "impl", "ref_type": "impl_pgusb_t *"}, {"name": "v1", "type": "AVFrame_0 *", "pred_name": "v1", "ref_name": "v1", "ref_type": "image_info *"}, {"name": "j", "type": "int", "pred_name": "i_0", "ref_name": "j", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "leon-anavi", "repo_name": "xmame-arm", "path": "leon-anavi/xmame-arm/b06024db7ed1738589fcf4f214f081a029b1b15a4f450d350ae715fbdf68bb2e", "path_in_repo": "leon-anavi/xmame-arm//xmame.obj/drivers/galaxian.o", "objdump": "0000000000009149 <construct_map_hunchbkg>:\n    9149:\t55                   \tpush   %rbp\n    914a:\t48 89 e5             \tmov    %rsp,%rbp\n    914d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    9151:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9155:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n    915b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    915f:\tc7 40 04 05 00 00 00 \tmovl   $0x5,0x4(%rax)\n    9166:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    916b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    916f:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    9175:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9179:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n    9180:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9184:\tc7 40 08 ff 0f 00 00 \tmovl   $0xfff,0x8(%rax)\n    918b:\t48 c7 45 f8 45 00 00 \tmovq   $0x45,-0x8(%rbp)\n    9192:\t00 \n    9193:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9197:\t48 c7 40 18 45 00 00 \tmovq   $0x45,0x18(%rax)\n    919e:\t00 \n    919f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    91a3:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    91aa:\t00 \n    91ab:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    91b0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    91b4:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    91ba:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    91be:\tc7 40 04 80 14 00 00 \tmovl   $0x1480,0x4(%rax)\n    91c5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    91c9:\tc7 40 08 bf 14 00 00 \tmovl   $0x14bf,0x8(%rax)\n    91d0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    91d4:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    91db:\t48 c7 45 f8 44 00 00 \tmovq   $0x44,-0x8(%rbp)\n    91e2:\t00 \n    91e3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    91e7:\t48 c7 40 18 44 00 00 \tmovq   $0x44,0x18(%rax)\n    91ee:\t00 \n    91ef:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    91f3:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    91fa:\t00 \n    91fb:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    9202:\t00 \n    9203:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9207:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n    920e:\t00 \n    920f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9213:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    921a:\t00 \n    921b:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    9222:\t00 \n    9223:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9227:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n    922e:\t00 \n    922f:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9234:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9238:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    923e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9242:\tc7 40 04 c0 14 00 00 \tmovl   $0x14c0,0x4(%rax)\n    9249:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    924d:\tc7 40 08 ff 14 00 00 \tmovl   $0x14ff,0x8(%rax)\n    9254:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9258:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    925f:\t48 c7 45 f0 44 00 00 \tmovq   $0x44,-0x10(%rbp)\n    9266:\t00 \n    9267:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    926b:\t48 c7 40 28 44 00 00 \tmovq   $0x44,0x28(%rax)\n    9272:\t00 \n    9273:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9277:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    927e:\t00 \n    927f:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    9286:\t00 \n    9287:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    928b:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n    9292:\t00 \n    9293:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9297:\t48 c7 40 50 00 00 00 \tmovq   $0x0,0x50(%rax)\n    929e:\t00 \n    929f:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    92a4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    92a8:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    92ae:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    92b2:\tc7 40 04 00 15 00 00 \tmovl   $0x1500,0x4(%rax)\n    92b9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    92bd:\tc7 40 08 00 15 00 00 \tmovl   $0x1500,0x8(%rax)\n    92c4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    92c8:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    92cf:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    92d6:\t00 \n    92d7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    92db:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n    92e2:\t00 \n    92e3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    92e7:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    92ee:\t00 \n    92ef:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    92f4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    92f8:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    92fe:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9302:\tc7 40 04 03 15 00 00 \tmovl   $0x1503,0x4(%rax)\n    9309:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    930d:\tc7 40 08 03 15 00 00 \tmovl   $0x1503,0x8(%rax)\n    9314:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9318:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    931f:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    9326:\t00 \n    9327:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    932b:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n    9332:\t00 \n    9333:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9337:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    933e:\t00 \n    933f:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9344:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9348:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    934e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9352:\tc7 40 04 80 15 00 00 \tmovl   $0x1580,0x4(%rax)\n    9359:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    935d:\tc7 40 08 80 15 00 00 \tmovl   $0x1580,0x8(%rax)\n    9364:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9368:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    936f:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    9376:\t00 \n    9377:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    937b:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n    9382:\t00 \n    9383:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9387:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    938e:\t00 \n    938f:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9394:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9398:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    939e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    93a2:\tc7 40 04 80 15 00 00 \tmovl   $0x1580,0x4(%rax)\n    93a9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    93ad:\tc7 40 08 82 15 00 00 \tmovl   $0x1582,0x8(%rax)\n    93b4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    93b8:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    93bf:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    93c6:\t00 \n    93c7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    93cb:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n    93d2:\t00 \n    93d3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    93d7:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    93de:\t00 \n    93df:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    93e4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    93e8:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    93ee:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    93f2:\tc7 40 04 83 15 00 00 \tmovl   $0x1583,0x4(%rax)\n    93f9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    93fd:\tc7 40 08 83 15 00 00 \tmovl   $0x1583,0x8(%rax)\n    9404:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9408:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    940f:\t48 c7 45 f0 46 00 00 \tmovq   $0x46,-0x10(%rbp)\n    9416:\t00 \n    9417:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    941b:\t48 c7 40 28 46 00 00 \tmovq   $0x46,0x28(%rax)\n    9422:\t00 \n    9423:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9427:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    942e:\t00 \n    942f:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9434:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9438:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    943e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9442:\tc7 40 04 84 15 00 00 \tmovl   $0x1584,0x4(%rax)\n    9449:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    944d:\tc7 40 08 87 15 00 00 \tmovl   $0x1587,0x8(%rax)\n    9454:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9458:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    945f:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    9466:\t00 \n    9467:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    946b:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n    9472:\t00 \n    9473:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9477:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    947e:\t00 \n    947f:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9484:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9488:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    948e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9492:\tc7 40 04 00 16 00 00 \tmovl   $0x1600,0x4(%rax)\n    9499:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    949d:\tc7 40 08 00 16 00 00 \tmovl   $0x1600,0x8(%rax)\n    94a4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    94a8:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    94af:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    94b6:\t00 \n    94b7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    94bb:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n    94c2:\t00 \n    94c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    94c7:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    94ce:\t00 \n    94cf:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    94d4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    94d8:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    94de:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    94e2:\tc7 40 04 00 16 00 00 \tmovl   $0x1600,0x4(%rax)\n    94e9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    94ed:\tc7 40 08 01 16 00 00 \tmovl   $0x1601,0x8(%rax)\n    94f4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    94f8:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    94ff:\t48 c7 45 f0 46 00 00 \tmovq   $0x46,-0x10(%rbp)\n    9506:\t00 \n    9507:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    950b:\t48 c7 40 28 46 00 00 \tmovq   $0x46,0x28(%rax)\n    9512:\t00 \n    9513:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9517:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    951e:\t00 \n    951f:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9524:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9528:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    952e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9532:\tc7 40 04 04 16 00 00 \tmovl   $0x1604,0x4(%rax)\n    9539:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    953d:\tc7 40 08 04 16 00 00 \tmovl   $0x1604,0x8(%rax)\n    9544:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9548:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    954f:\t48 c7 45 f0 46 00 00 \tmovq   $0x46,-0x10(%rbp)\n    9556:\t00 \n    9557:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    955b:\t48 c7 40 28 46 00 00 \tmovq   $0x46,0x28(%rax)\n    9562:\t00 \n    9563:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9567:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    956e:\t00 \n    956f:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9574:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9578:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    957e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9582:\tc7 40 04 06 16 00 00 \tmovl   $0x1606,0x4(%rax)\n    9589:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    958d:\tc7 40 08 06 16 00 00 \tmovl   $0x1606,0x8(%rax)\n    9594:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9598:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    959f:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    95a6:\t00 \n    95a7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    95ab:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n    95b2:\t00 \n    95b3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    95b7:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    95be:\t00 \n    95bf:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    95c4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    95c8:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    95ce:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    95d2:\tc7 40 04 07 16 00 00 \tmovl   $0x1607,0x4(%rax)\n    95d9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    95dd:\tc7 40 08 07 16 00 00 \tmovl   $0x1607,0x8(%rax)\n    95e4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    95e8:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    95ef:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    95f6:\t00 \n    95f7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    95fb:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n    9602:\t00 \n    9603:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9607:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    960e:\t00 \n    960f:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9614:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9618:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    961e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9622:\tc7 40 04 80 16 00 00 \tmovl   $0x1680,0x4(%rax)\n    9629:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    962d:\tc7 40 08 80 16 00 00 \tmovl   $0x1680,0x8(%rax)\n    9634:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9638:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    963f:\t48 c7 45 f8 46 00 00 \tmovq   $0x46,-0x8(%rbp)\n    9646:\t00 \n    9647:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    964b:\t48 c7 40 18 46 00 00 \tmovq   $0x46,0x18(%rax)\n    9652:\t00 \n    9653:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9657:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    965e:\t00 \n    965f:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    9666:\t00 \n    9667:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    966b:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n    9672:\t00 \n    9673:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9677:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    967e:\t00 \n    967f:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9684:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9688:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    968e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9692:\tc7 40 04 00 18 00 00 \tmovl   $0x1800,0x4(%rax)\n    9699:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    969d:\tc7 40 08 ff 1b 00 00 \tmovl   $0x1bff,0x8(%rax)\n    96a4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    96a8:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    96af:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    96b6:\t00 \n    96b7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    96bb:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n    96c2:\t00 \n    96c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    96c7:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    96ce:\t00 \n    96cf:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    96d6:\t00 \n    96d7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    96db:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n    96e2:\t00 \n    96e3:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    96e8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    96ec:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    96f2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    96f6:\tc7 40 04 00 1c 00 00 \tmovl   $0x1c00,0x4(%rax)\n    96fd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9701:\tc7 40 08 ff 1f 00 00 \tmovl   $0x1fff,0x8(%rax)\n    9708:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    970c:\tc7 40 0c 00 60 00 00 \tmovl   $0x6000,0xc(%rax)\n    9713:\t48 c7 45 f8 44 00 00 \tmovq   $0x44,-0x8(%rbp)\n    971a:\t00 \n    971b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    971f:\t48 c7 40 18 44 00 00 \tmovq   $0x44,0x18(%rax)\n    9726:\t00 \n    9727:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    972b:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    9732:\t00 \n    9733:\t48 c7 45 f0 44 00 00 \tmovq   $0x44,-0x10(%rbp)\n    973a:\t00 \n    973b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    973f:\t48 c7 40 28 44 00 00 \tmovq   $0x44,0x28(%rax)\n    9746:\t00 \n    9747:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    974b:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    9752:\t00 \n    9753:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9758:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    975c:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    9762:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9766:\tc7 40 04 00 20 00 00 \tmovl   $0x2000,0x4(%rax)\n    976d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9771:\tc7 40 08 ff 2f 00 00 \tmovl   $0x2fff,0x8(%rax)\n    9778:\t48 c7 45 f8 45 00 00 \tmovq   $0x45,-0x8(%rbp)\n    977f:\t00 \n    9780:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9784:\t48 c7 40 18 45 00 00 \tmovq   $0x45,0x18(%rax)\n    978b:\t00 \n    978c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9790:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    9797:\t00 \n    9798:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    979d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    97a1:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    97a7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    97ab:\tc7 40 04 00 40 00 00 \tmovl   $0x4000,0x4(%rax)\n    97b2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    97b6:\tc7 40 08 ff 4f 00 00 \tmovl   $0x4fff,0x8(%rax)\n    97bd:\t48 c7 45 f8 45 00 00 \tmovq   $0x45,-0x8(%rbp)\n    97c4:\t00 \n    97c5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    97c9:\t48 c7 40 18 45 00 00 \tmovq   $0x45,0x18(%rax)\n    97d0:\t00 \n    97d1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    97d5:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    97dc:\t00 \n    97dd:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    97e2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    97e6:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n    97ec:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    97f0:\tc7 40 04 00 60 00 00 \tmovl   $0x6000,0x4(%rax)\n    97f7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    97fb:\tc7 40 08 ff 6f 00 00 \tmovl   $0x6fff,0x8(%rax)\n    9802:\t48 c7 45 f8 45 00 00 \tmovq   $0x45,-0x8(%rbp)\n    9809:\t00 \n    980a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    980e:\t48 c7 40 18 45 00 00 \tmovq   $0x45,0x18(%rax)\n    9815:\t00 \n    9816:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    981a:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    9821:\t00 \n    9822:\t48 83 45 d8 60       \taddq   $0x60,-0x28(%rbp)\n    9827:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    982b:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n    9831:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9835:\t5d                   \tpop    %rbp\n    9836:\tc3                   \tretq   ", "code_s": "__int64 __fastcall construct_map_hunchbkg(__int64 a1) {\n  *(_DWORD *)a1 = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_QWORD *)(a1 + Number) = &galaxian_attributesram_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_QWORD *)(a1 + Number) = &galaxian_attributesram;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_QWORD *)(a1 + Number) = &galaxian_spriteram;\n  *(_QWORD *)(a1 + Number) = &galaxian_spriteram_size;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &input_port_0_r;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_coin_counter_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &input_port_1_r;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_background_enable_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_lfo_freq_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &input_port_2_r;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_flip_screen_x_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_flip_screen_y_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_QWORD *)(a1 + Number) = &galaxian_pitch_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = &galaxian_videoram_w;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_QWORD *)(a1 + Number) = &galaxian_videoram;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_DWORD *)(a1 + Number) = Number;\n  *(_QWORD *)(a1 + Number) = Number L;\n  *(_QWORD *)(a1 + Number) = String;\n  *(_DWORD *)(a1 + Number) = Number;\n  return a1 + Number;\n}", "code_t": "address_map *__cdecl construct_map_hunchbkg(address_map *<span class=\"supfact\">map</span>) {\n  <span class=\"supfact\">map</span>->flags = Number;\n  <span class=\"supfact\">map</span>->start = Number;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].read.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].read_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].read.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].read_name = String;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_attributesram_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].base = (void **)&galaxian_attributesram;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].base = (void **)&galaxian_spriteram;\n  <span class=\"supfact\">map</span>[Number].size = (size_t *)&galaxian_spriteram_size;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].read.handler = (genf *)&input_port_0_r;\n  <span class=\"supfact\">map</span>[Number].read_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_coin_counter_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].read.handler = (genf *)&input_port_1_r;\n  <span class=\"supfact\">map</span>[Number].read_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler =\n      (genf *)&galaxian_background_enable_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_lfo_freq_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].read.handler = (genf *)&input_port_2_r;\n  <span class=\"supfact\">map</span>[Number].read_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_flip_screen_x_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_flip_screen_y_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].read.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].read_name = String;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_pitch_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)&galaxian_videoram_w;\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].base = (void **)&galaxian_videoram;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].mirror = Number;\n  <span class=\"supfact\">map</span>[Number].read.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].read_name = String;\n  <span class=\"supfact\">map</span>[Number].write.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].write_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].read.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].read_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].read.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].read_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  <span class=\"supfact\">map</span>[Number].start = Number;\n  <span class=\"supfact\">map</span>[Number].end = Number;\n  <span class=\"supfact\">map</span>[Number].read.handler = (genf *)(&loc_42 + Number);\n  <span class=\"supfact\">map</span>[Number].read_name = String;\n  <span class=\"supfact\">map</span>[Number].flags = Number;\n  return <span class=\"supfact\">map</span> + Number;\n}", "var": [{"name": "a1", "type": "address_map *", "pred_name": "map", "ref_name": "map", "ref_type": "address_map *"}], "body_in_train": false}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "000000000000549f <glMultiTexCoord1dv>:\n    549f:\t55                   \tpush   %rbp\n    54a0:\t48 89 e5             \tmov    %rsp,%rbp\n    54a3:\t48 83 ec 10          \tsub    $0x10,%rsp\n    54a7:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    54aa:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    54ae:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 54b5 <glMultiTexCoord1dv+0x16>\n    54b5:\t48 8b 88 c8 0b 00 00 \tmov    0xbc8(%rax),%rcx\n    54bc:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    54c0:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    54c3:\t48 89 d6             \tmov    %rdx,%rsi\n    54c6:\t89 c7                \tmov    %eax,%edi\n    54c8:\tff d1                \tcallq  *%rcx\n    54ca:\t90                   \tnop\n    54cb:\tc9                   \tleaveq \n    54cc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glMultiTexCoord1dv(unsigned int a1, __int64 a2) {\n  return (*(__int64(__fastcall **)(_QWORD, __int64))(glapi_Dispatch +\n                                                     Number L))(a1, a2);\n}", "code_t": "void __cdecl glMultiTexCoord1dv(GLenum <span class=\"supfact\">target</span>,\n                                const GLdouble *<span class=\"supfact\">v</span>) {\n  (*(void(__fastcall **)(_QWORD, const GLdouble *))(glapi_Dispatch + Number L))(\n      <span class=\"supfact\">target</span>, <span class=\"supfact\">v</span>);\n}", "var": [{"name": "a1", "type": "int", "pred_name": "index", "ref_name": "target", "ref_type": "GLenum"}, {"name": "a2", "type": "__unk__", "pred_name": "v", "ref_name": "v", "ref_type": "const GLdouble *"}], "body_in_train": false}, {"repo_owner": "luotao717", "repo_name": "dytpro", "path": "luotao717/dytpro/43fbd89274b3f69669889887a5cb72945f6a742921ff3f7ca9650ed791103ca4", "path_in_repo": "luotao717/dytpro/ra5350/lktos_sdk/source/user/samba-3.0.2/source/param/loadparm.po", "objdump": "0000000000003271 <lp_shortpreservecase>:\n    3271:\t55                   \tpush   %rbp\n    3272:\t48 89 e5             \tmov    %rsp,%rbp\n    3275:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    3278:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    327c:\t78 47                \tjs     32c5 <lp_shortpreservecase+0x54>\n    327e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3284 <lp_shortpreservecase+0x13>\n    3284:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    3287:\t7d 3c                \tjge    32c5 <lp_shortpreservecase+0x54>\n    3289:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3290 <lp_shortpreservecase+0x1f>\n    3290:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    3293:\t48 63 d2             \tmovslq %edx,%rdx\n    3296:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    329a:\t48 01 d0             \tadd    %rdx,%rax\n    329d:\t48 8b 00             \tmov    (%rax),%rax\n    32a0:\t8b 00                \tmov    (%rax),%eax\n    32a2:\t85 c0                \ttest   %eax,%eax\n    32a4:\t74 1f                \tje     32c5 <lp_shortpreservecase+0x54>\n    32a6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 32ad <lp_shortpreservecase+0x3c>\n    32ad:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    32b0:\t48 63 d2             \tmovslq %edx,%rdx\n    32b3:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    32b7:\t48 01 d0             \tadd    %rdx,%rax\n    32ba:\t48 8b 00             \tmov    (%rax),%rax\n    32bd:\t8b 80 a0 01 00 00    \tmov    0x1a0(%rax),%eax\n    32c3:\teb 06                \tjmp    32cb <lp_shortpreservecase+0x5a>\n    32c5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 32cb <lp_shortpreservecase+0x5a>\n    32cb:\t5d                   \tpop    %rbp\n    32cc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall lp_shortpreservecase(int a1) {\n  __int64 result;\n  if (a1 >= Number && a1 < iNumServices &&\n      **(_DWORD **)(Number L * a1 + ServicePtrs))\n    result =\n        *(unsigned int *)(*(_QWORD *)(Number L * a1 + ServicePtrs) + Number L);\n  else\n    result = (unsigned int)dword_B0E0;\n  return result;\n}", "code_t": "BOOL __cdecl lp_shortpreservecase(int <span class=\"supfact\">i</span>) {\n  BOOL <span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">i</span> >= Number && <span class=\"supfact\">i</span> < iNumServices &&\n      ServicePtrs[<span class=\"supfact\">i</span>]->valid)\n    <span class=\"supfact\">result</span> = ServicePtrs[<span class=\"supfact\">i</span>]->bShortCasePreserve;\n  else\n    <span class=\"supfact\">result</span> = sDefault.bShortCasePreserve;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "index", "ref_name": "i", "ref_type": "int"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "BOOL"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/6107655ff211fe4c6c41f4b518aa339243c6d62af9c9285ec89157a94edacfbe", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/debug/dvstate.o", "objdump": "0000000000000000 <_ZNK22device_state_interface11state_firstEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  10:\t48 83 c0 18          \tadd    $0x18,%rax\n  14:\t48 89 c7             \tmov    %rax,%rdi\n  17:\te8 00 00 00 00       \tcallq  1c <_ZNK22device_state_interface11state_firstEv+0x1c>\n  1c:\tc9                   \tleaveq \n  1d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall device_state_interface\nstate_first(device_state_interface *this) {\n  return simple_list<device_state_entry> first((char *)this + Number);\n}", "code_t": "const device_state_entry *__cdecl device_state_interface\nstate_first(const device_state_interface *const <span class=\"supfact\">this</span>) {\n  return simple_list<device_state_entry> first(\n      (const device_state_interface *const)((char *)<span class=\"supfact\">this</span> +\n                                            Number));\n}", "var": [{"name": "this", "type": "device_state_interface *", "pred_name": "this", "ref_name": "this", "ref_type": "const device_state_interface *"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/6418f72a17e2f260864970c96f1dd065e970a784b40e46473f244a068b6aea9b", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Foundation/samples/Activity/obj/Linux/x86_64/release_shared/Activity.o", "objdump": "0000000000000000 <_ZN4Poco8ActivityI15ActivityExampleE3runEv>:\n   0:\t41 54                \tpush   %r12\n   2:\t55                   \tpush   %rbp\n   3:\t53                   \tpush   %rbx\n   4:\t48 89 fb             \tmov    %rdi,%rbx\n   7:\t48 83 ec 20          \tsub    $0x20,%rsp\n   b:\t48 8b 43 20          \tmov    0x20(%rbx),%rax\n   f:\t48 8b 7f 28          \tmov    0x28(%rdi),%rdi\n  13:\t48 03 7b 18          \tadd    0x18(%rbx),%rdi\n  17:\ta8 01                \ttest   $0x1,%al\n  19:\t74 08                \tje     23 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x23>\n  1b:\t48 8b 17             \tmov    (%rdi),%rdx\n  1e:\t48 8b 44 02 ff       \tmov    -0x1(%rdx,%rax,1),%rax\n  23:\tff d0                \tcallq  *%rax\n  25:\tc6 43 31 00          \tmovb   $0x0,0x31(%rbx)\n  29:\t48 8d 6b 40          \tlea    0x40(%rbx),%rbp\n  2d:\t48 89 ef             \tmov    %rbp,%rdi\n  30:\te8 00 00 00 00       \tcallq  35 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x35>\n  35:\t85 c0                \ttest   %eax,%eax\n  37:\t0f 85 a9 00 00 00    \tjne    e6 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xe6>\n  3d:\tc6 43 39 01          \tmovb   $0x1,0x39(%rbx)\n  41:\t48 8d 7b 68          \tlea    0x68(%rbx),%rdi\n  45:\te8 00 00 00 00       \tcallq  4a <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x4a>\n  4a:\t48 89 ef             \tmov    %rbp,%rdi\n  4d:\t85 c0                \ttest   %eax,%eax\n  4f:\t75 0e                \tjne    5f <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x5f>\n  51:\te8 00 00 00 00       \tcallq  56 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x56>\n  56:\t48 83 c4 20          \tadd    $0x20,%rsp\n  5a:\t5b                   \tpop    %rbx\n  5b:\t5d                   \tpop    %rbp\n  5c:\t41 5c                \tpop    %r12\n  5e:\tc3                   \tretq   \n  5f:\te8 00 00 00 00       \tcallq  64 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x64>\n  64:\t48 89 e5             \tmov    %rsp,%rbp\n  67:\tbf 38 00 00 00       \tmov    $0x38,%edi\n  6c:\te8 00 00 00 00       \tcallq  71 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x71>\n  71:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 78 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x78>\n  78:\t48 89 ef             \tmov    %rbp,%rdi\n  7b:\t49 89 c4             \tmov    %rax,%r12\n  7e:\te8 00 00 00 00       \tcallq  83 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x83>\n  83:\t31 d2                \txor    %edx,%edx\n  85:\t48 89 ee             \tmov    %rbp,%rsi\n  88:\t4c 89 e7             \tmov    %r12,%rdi\n  8b:\te8 00 00 00 00       \tcallq  90 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x90>\n  90:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n  94:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  99:\t48 39 c7             \tcmp    %rax,%rdi\n  9c:\t74 05                \tje     a3 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xa3>\n  9e:\te8 00 00 00 00       \tcallq  a3 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xa3>\n  a3:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # aa <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xaa>\n  aa:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # b1 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xb1>\n  b1:\t4c 89 e7             \tmov    %r12,%rdi\n  b4:\te8 00 00 00 00       \tcallq  b9 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xb9>\n  b9:\t48 89 c5             \tmov    %rax,%rbp\n  bc:\teb 05                \tjmp    c3 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xc3>\n  be:\t48 89 c5             \tmov    %rax,%rbp\n  c1:\teb 13                \tjmp    d6 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xd6>\n  c3:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n  c7:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  cc:\t48 39 c7             \tcmp    %rax,%rdi\n  cf:\t74 05                \tje     d6 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xd6>\n  d1:\te8 00 00 00 00       \tcallq  d6 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xd6>\n  d6:\t4c 89 e7             \tmov    %r12,%rdi\n  d9:\te8 00 00 00 00       \tcallq  de <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xde>\n  de:\t48 89 ef             \tmov    %rbp,%rdi\n  e1:\te8 00 00 00 00       \tcallq  e6 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xe6>\n  e6:\tbf 38 00 00 00       \tmov    $0x38,%edi\n  eb:\t48 89 e5             \tmov    %rsp,%rbp\n  ee:\te8 00 00 00 00       \tcallq  f3 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xf3>\n  f3:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # fa <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xfa>\n  fa:\t48 89 ef             \tmov    %rbp,%rdi\n  fd:\t49 89 c4             \tmov    %rax,%r12\n 100:\te8 00 00 00 00       \tcallq  105 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x105>\n 105:\t31 d2                \txor    %edx,%edx\n 107:\t48 89 ee             \tmov    %rbp,%rsi\n 10a:\t4c 89 e7             \tmov    %r12,%rdi\n 10d:\te8 00 00 00 00       \tcallq  112 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x112>\n 112:\te9 79 ff ff ff       \tjmpq   90 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x90>\n 117:\t48 89 c7             \tmov    %rax,%rdi\n 11a:\teb 04                \tjmp    120 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x120>\n 11c:\teb 9b                \tjmp    b9 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xb9>\n 11e:\teb 9e                \tjmp    be <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0xbe>\n 120:\te8 00 00 00 00       \tcallq  125 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x125>\n 125:\tc6 43 31 00          \tmovb   $0x0,0x31(%rbx)\n 129:\t48 8d 7b 38          \tlea    0x38(%rbx),%rdi\n 12d:\te8 00 00 00 00       \tcallq  132 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x132>\n 132:\te8 00 00 00 00       \tcallq  137 <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x137>\n 137:\t48 89 c5             \tmov    %rax,%rbp\n 13a:\te8 00 00 00 00       \tcallq  13f <_ZN4Poco8ActivityI15ActivityExampleE3runEv+0x13f>\n 13f:\t48 89 ef             \tmov    %rbp,%rdi\n 142:\te8 00 00 00 00       \tcallq  147 <_GLOBAL__sub_I_Activity.cpp+0x57>", "code_s": "int __fastcall Poco Activity<ActivityExample> run(__int64 a1) {\n  void(__fastcall * v2)(_QWORD);\n  _QWORD *v3;\n  pthread_mutex_t *v4;\n  void *v6;\n  void *v7[Number];\n  char v8;\n  v2 = *(void(__fastcall **)(_QWORD))(a1 + Number);\n  v3 = (_QWORD *)(*(_QWORD *)(a1 + Number) + *(_QWORD *)(a1 + Number));\n  if (((unsigned __int8)v2 & Number) != Number)\n    v2 = *(void(__fastcall **)(_QWORD))((char *)v2 + *v3 - Number);\n  v2(v3);\n  *(_BYTE *)(a1 + Number) = Number;\n  if (pthread_mutex_lock((pthread_mutex_t *)(a1 + Number))) {\n    v6 = _cxa_allocate_exception(Number);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string((__int64 *)v7, String);\n    Poco SystemException SystemException(v6, v7, Number L);\n  LABEL_7:\n    if (v7[Number] != &v8)\n      operator delete(v7[Number]); _cxa_throw ( v6 , ( struct type_info * ) & ` typeinfo for ' Poco SystemException , ( void ( __fastcall * ) ( void * ) ) & Poco SystemException ~ SystemException ) ; } * ( _BYTE * ) ( a1 + Number ) = Number ; v4 = ( pthread_mutex_t * ) ( a1 + Number ) ; if ( pthread_cond_broadcast ( ( pthread_cond_t * ) ( a1 + Number ) ) ) { pthread_mutex_unlock ( v4 ) ; v6 = _cxa_allocate_exception ( Number ) ; std __cxx11 basic_string < char , std char_traits < char > , std allocator < char >> basic_string ( ( __int64 * ) v7 , String ) ; Poco SystemException SystemException ( v6 , v7 , Number L ) ; goto LABEL_7 ; } return pthread_mutex_unlock ( v4 ) ; }", "code_t": "int __fastcall Poco Activity<ActivityExample> run(__int64 <span class=\"supfact\">a1</span>) {\n  void(__fastcall * <span class=\"supfact\">v2</span>)(_QWORD);\n  _QWORD *v3;\n  pthread_mutex_t *v4;\n  void *<span class=\"supfact\">v6</span>;\n  void *<span class=\"supfact\">v7</span>[Number];\n  char <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v2</span> =\n      *(void(__fastcall **)(_QWORD))(<span class=\"supfact\">a1</span> + Number);\n  v3 = (_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n  if (((unsigned __int8)<span class=\"supfact\">v2</span> & Number) != Number)\n    <span class=\"supfact\">v2</span> = *(void(__fastcall **)(_QWORD))(\n        (char *)<span class=\"supfact\">v2</span> + *v3 - Number);\n  <span class=\"supfact\">v2</span>(v3);\n  *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  if (pthread_mutex_lock((pthread_mutex_t *)(<span class=\"supfact\">a1</span> + Number))) {\n    <span class=\"supfact\">v6</span> = _cxa_allocate_exception(Number);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string((__int64 *)<span class=\"supfact\">v7</span>, String);\n    Poco SystemException SystemException(<span class=\"supfact\">v6</span>, <span class=\"supfact\">v7</span>,\n                                         Number L);\n  LABEL_7:\n    if (<span class=\"supfact\">v7</span>[Number] != &<span class=\"supfact\">v8</span>)\n      operator delete(<span class=\"supfact\">v7</span>[Number]); _cxa_throw ( <span class=\"supfact\">v6</span> , ( struct type_info * ) & ` typeinfo for ' Poco SystemException , ( void ( __fastcall * ) ( void * ) ) & Poco SystemException ~ SystemException ) ; } * ( _BYTE * ) ( <span class=\"supfact\">a1</span> + Number ) = Number ; v4 = ( pthread_mutex_t * ) ( <span class=\"supfact\">a1</span> + Number ) ; if ( pthread_cond_broadcast ( ( pthread_cond_t * ) ( <span class=\"supfact\">a1</span> + Number ) ) ) { pthread_mutex_unlock ( v4 ) ; <span class=\"supfact\">v6</span> = _cxa_allocate_exception ( Number ) ; std __cxx11 basic_string < char , std char_traits < char > , std allocator < char >> basic_string ( ( __int64 * ) <span class=\"supfact\">v7</span> , String ) ; Poco SystemException SystemException ( <span class=\"supfact\">v6</span> , <span class=\"supfact\">v7</span> , Number L ) ; goto LABEL_7 ; } return pthread_mutex_unlock ( v4 ) ; }", "var": [{"name": "a1", "type": "pthread_mutex_t * *", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "v2", "type": "__int64", "pred_name": "v2", "ref_name": "v2", "ref_type": "void (__fastcall *)(_QWORD)"}, {"name": "v6", "type": "void *", "pred_name": "v6", "ref_name": "v6", "ref_type": "void *"}, {"name": "v7", "type": "void *[2]", "pred_name": "v7", "ref_name": "v7", "ref_type": "void *[2]"}, {"name": "v8", "type": "char", "pred_name": "v8", "ref_name": "v8", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "iortcw", "repo_name": "iortcw", "path": "iortcw/iortcw/347577735f814679099c68169513a8e2e910bdddd6fbdb34cc0c29b3515a5c79", "path_in_repo": "iortcw/iortcw/MP/build/release-linux-x86_64/main/cgame/bg_animation.o", "objdump": "0000000000001841 <BG_ParseConditions>:\n    1841:\t55                   \tpush   %rbp\n    1842:\t48 89 e5             \tmov    %rsp,%rbp\n    1845:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1849:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    184d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    1851:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    1858:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n    185f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1863:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1868:\t48 89 c7             \tmov    %rax,%rdi\n    186b:\te8 00 00 00 00       \tcallq  1870 <BG_ParseConditions+0x2f>\n    1870:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1874:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1878:\t0f b6 00             \tmovzbl (%rax),%eax\n    187b:\t84 c0                \ttest   %al,%al\n    187d:\t0f 84 d8 01 00 00    \tje     1a5b <BG_ParseConditions+0x21a>\n    1883:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1887:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 188e <BG_ParseConditions+0x4d>\n    188e:\t48 89 c7             \tmov    %rax,%rdi\n    1891:\te8 00 00 00 00       \tcallq  1896 <BG_ParseConditions+0x55>\n    1896:\t85 c0                \ttest   %eax,%eax\n    1898:\t75 0a                \tjne    18a4 <BG_ParseConditions+0x63>\n    189a:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    189f:\te9 d8 01 00 00       \tjmpq   1a7c <BG_ParseConditions+0x23b>\n    18a4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    18a8:\tba 00 00 00 00       \tmov    $0x0,%edx\n    18ad:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 18b4 <BG_ParseConditions+0x73>\n    18b4:\t48 89 c7             \tmov    %rax,%rdi\n    18b7:\te8 00 00 00 00       \tcallq  18bc <BG_ParseConditions+0x7b>\n    18bc:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    18bf:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    18c2:\t48 98                \tcltq   \n    18c4:\t48 c1 e0 04          \tshl    $0x4,%rax\n    18c8:\t48 89 c2             \tmov    %rax,%rdx\n    18cb:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 18d2 <BG_ParseConditions+0x91>\n    18d2:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n    18d5:\t85 c0                \ttest   %eax,%eax\n    18d7:\t74 0a                \tje     18e3 <BG_ParseConditions+0xa2>\n    18d9:\t83 f8 01             \tcmp    $0x1,%eax\n    18dc:\t74 34                \tje     1912 <BG_ParseConditions+0xd1>\n    18de:\te9 f2 00 00 00       \tjmpq   19d5 <BG_ParseConditions+0x194>\n    18e3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    18e6:\t48 98                \tcltq   \n    18e8:\t48 c1 e0 04          \tshl    $0x4,%rax\n    18ec:\t48 89 c2             \tmov    %rax,%rdx\n    18ef:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 18f6 <BG_ParseConditions+0xb5>\n    18f6:\t48 8b 34 02          \tmov    (%rdx,%rax,1),%rsi\n    18fa:\t48 8d 4d ec          \tlea    -0x14(%rbp),%rcx\n    18fe:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    1901:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1905:\t48 89 c7             \tmov    %rax,%rdi\n    1908:\te8 00 00 00 00       \tcallq  190d <BG_ParseConditions+0xcc>\n    190d:\te9 c3 00 00 00       \tjmpq   19d5 <BG_ParseConditions+0x194>\n    1912:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    1915:\t48 98                \tcltq   \n    1917:\t48 c1 e0 04          \tshl    $0x4,%rax\n    191b:\t48 89 c2             \tmov    %rax,%rdx\n    191e:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 1925 <BG_ParseConditions+0xe4>\n    1925:\t48 8b 04 02          \tmov    (%rdx,%rax,1),%rax\n    1929:\t48 85 c0             \ttest   %rax,%rax\n    192c:\t0f 84 9b 00 00 00    \tje     19cd <BG_ParseConditions+0x18c>\n    1932:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1936:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    193b:\t48 89 c7             \tmov    %rax,%rdi\n    193e:\te8 00 00 00 00       \tcallq  1943 <BG_ParseConditions+0x102>\n    1943:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1947:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    194b:\t0f b6 00             \tmovzbl (%rax),%eax\n    194e:\t84 c0                \ttest   %al,%al\n    1950:\t75 13                \tjne    1965 <BG_ParseConditions+0x124>\n    1952:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1959 <BG_ParseConditions+0x118>\n    1959:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    195e:\te8 00 00 00 00       \tcallq  1963 <BG_ParseConditions+0x122>\n    1963:\teb 70                \tjmp    19d5 <BG_ParseConditions+0x194>\n    1965:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1969:\t48 89 c7             \tmov    %rax,%rdi\n    196c:\te8 00 00 00 00       \tcallq  1971 <BG_ParseConditions+0x130>\n    1971:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n    1975:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1979:\t48 01 d0             \tadd    %rdx,%rax\n    197c:\t0f b6 00             \tmovzbl (%rax),%eax\n    197f:\t3c 2c                \tcmp    $0x2c,%al\n    1981:\t75 1a                \tjne    199d <BG_ParseConditions+0x15c>\n    1983:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1987:\t48 89 c7             \tmov    %rax,%rdi\n    198a:\te8 00 00 00 00       \tcallq  198f <BG_ParseConditions+0x14e>\n    198f:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n    1993:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1997:\t48 01 d0             \tadd    %rdx,%rax\n    199a:\tc6 00 00             \tmovb   $0x0,(%rax)\n    199d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    19a0:\t48 98                \tcltq   \n    19a2:\t48 c1 e0 04          \tshl    $0x4,%rax\n    19a6:\t48 89 c2             \tmov    %rax,%rdx\n    19a9:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 19b0 <BG_ParseConditions+0x16f>\n    19b0:\t48 8b 0c 02          \tmov    (%rdx,%rax,1),%rcx\n    19b4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    19b8:\tba 00 00 00 00       \tmov    $0x0,%edx\n    19bd:\t48 89 ce             \tmov    %rcx,%rsi\n    19c0:\t48 89 c7             \tmov    %rax,%rdi\n    19c3:\te8 00 00 00 00       \tcallq  19c8 <BG_ParseConditions+0x187>\n    19c8:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    19cb:\teb 07                \tjmp    19d4 <BG_ParseConditions+0x193>\n    19cd:\tc7 45 ec 01 00 00 00 \tmovl   $0x1,-0x14(%rbp)\n    19d4:\t90                   \tnop\n    19d5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    19d9:\t8b 00                \tmov    (%rax),%eax\n    19db:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n    19df:\t48 63 d0             \tmovslq %eax,%rdx\n    19e2:\t48 89 d0             \tmov    %rdx,%rax\n    19e5:\t48 01 c0             \tadd    %rax,%rax\n    19e8:\t48 01 d0             \tadd    %rdx,%rax\n    19eb:\t48 c1 e0 02          \tshl    $0x2,%rax\n    19ef:\t48 01 c8             \tadd    %rcx,%rax\n    19f2:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n    19f6:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    19f9:\t89 02                \tmov    %eax,(%rdx)\n    19fb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    19ff:\t8b 00                \tmov    (%rax),%eax\n    1a01:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n    1a04:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n    1a08:\t48 63 d0             \tmovslq %eax,%rdx\n    1a0b:\t48 89 d0             \tmov    %rdx,%rax\n    1a0e:\t48 01 c0             \tadd    %rax,%rax\n    1a11:\t48 01 d0             \tadd    %rdx,%rax\n    1a14:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1a18:\t48 01 f0             \tadd    %rsi,%rax\n    1a1b:\t48 83 c0 08          \tadd    $0x8,%rax\n    1a1f:\t89 08                \tmov    %ecx,(%rax)\n    1a21:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a25:\t8b 00                \tmov    (%rax),%eax\n    1a27:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n    1a2a:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n    1a2e:\t48 63 d0             \tmovslq %eax,%rdx\n    1a31:\t48 89 d0             \tmov    %rdx,%rax\n    1a34:\t48 01 c0             \tadd    %rax,%rax\n    1a37:\t48 01 d0             \tadd    %rdx,%rax\n    1a3a:\t48 c1 e0 02          \tshl    $0x2,%rax\n    1a3e:\t48 01 f0             \tadd    %rsi,%rax\n    1a41:\t48 83 c0 0c          \tadd    $0xc,%rax\n    1a45:\t89 08                \tmov    %ecx,(%rax)\n    1a47:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a4b:\t8b 00                \tmov    (%rax),%eax\n    1a4d:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1a50:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a54:\t89 10                \tmov    %edx,(%rax)\n    1a56:\te9 04 fe ff ff       \tjmpq   185f <BG_ParseConditions+0x1e>\n    1a5b:\t90                   \tnop\n    1a5c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a60:\t8b 00                \tmov    (%rax),%eax\n    1a62:\t85 c0                \ttest   %eax,%eax\n    1a64:\t75 11                \tjne    1a77 <BG_ParseConditions+0x236>\n    1a66:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1a6d <BG_ParseConditions+0x22c>\n    1a6d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1a72:\te8 00 00 00 00       \tcallq  1a77 <BG_ParseConditions+0x236>\n    1a77:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1a7c:\tc9                   \tleaveq \n    1a7d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall BG_ParseConditions(__int64 a1, int *a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  int v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  size_t v12;\n  size_t v13;\n  int v14;\n  int i;\n  int v16;\n  char *s;\n  v14 = Number;\n  for (i = Number;; a2[Number * (*a2)++ + Number] = i) {\n    s = (char *)COM_ParseExt(a1, Number L);\n    if (!*s)\n      break;\n    if (!(unsigned int)Q_stricmp(s, String))\n      return Number L;\n    v16 = BG_IndexForString((__int64)s, (__int64 *)&animConditionsStr, Number);\n    v7 = *((_DWORD *)&animConditionsTable + Number * v16);\n    if (v7) {\n      if (v7 == Number) {\n        if (*(&off_9588 + Number * v16)) {\n          s = (char *)COM_ParseExt(a1, Number L);\n          if (*s) {\n            v12 = strlen(s);\n            if (s[v12 - Number] == Number) {\n              v13 = strlen(s);\n              s[v13 - Number] = Number;\n            }\n            v14 = BG_IndexForString(\n                (__int64)s, (__int64 *)*(&off_9588 + Number * v16), Number);\n          } else {\n            BG_AnimParseError(String, Number L, v8, v9, v10, v11);\n          }\n        } else {\n          v14 = Number;\n        }\n      }\n    } else {\n      BG_ParseConditionBits(a1, (__int64 *)*(&off_9588 + Number * v16), v16,\n                            &v14);\n    }\n    a2[Number * *a2 + Number] = v16;\n    a2[Number * *a2 + Number] = v14;\n  }\n  if (!*a2)\n    BG_AnimParseError(String, Number L, v2, v3, v4, v5);\n  return Number L;\n}", "code_t": "qboolean __cdecl BG_ParseConditions(\n    char **<span class=\"supfact\">text_pp</span>,\n    animScriptItem_t *<span class=\"supfact\">scriptItem</span>) {\n  animScriptConditionTypes_t v3;\n  size_t v4;\n  size_t v5;\n  int <span class=\"supfact\">conditionValue</span>[Number];\n  int <span class=\"supfact\">conditionIndex</span>;\n  char *<span class=\"supfact\">token</span>;\n  <span class=\"supfact\">conditionValue</span>[Number] = Number;\n  for (<span class=\"supfact\">conditionValue</span>[Number] = Number;;\n       <span class=\"supfact\">scriptItem</span>\n           ->conditions[<span class=\"supfact\">scriptItem</span>->numConditions++]\n           .value[Number] = <span class=\"supfact\">conditionValue</span>[Number]) {\n    <span class=\"supfact\">token</span> =\n        (char *)COM_ParseExt(<span class=\"supfact\">text_pp</span>, Number L);\n    if (!*<span class=\"supfact\">token</span>)\n      break;\n    if (!(unsigned int)Q_stricmp(<span class=\"supfact\">token</span>, String))\n      return Number;\n    <span class=\"supfact\">conditionIndex</span> =\n        BG_IndexForString(<span class=\"supfact\">token</span>, animConditionsStr, qfalse);\n    v3 = animConditionsTable[<span class=\"supfact\">conditionIndex</span>].type;\n    if (v3) {\n      if (v3 == ANIM_CONDTYPE_VALUE) {\n        if (animConditionsTable[<span class=\"supfact\">conditionIndex</span>].values) {\n          <span class=\"supfact\">token</span> =\n              (char *)COM_ParseExt(<span class=\"supfact\">text_pp</span>, Number L);\n          if (*<span class=\"supfact\">token</span>) {\n            v4 = strlen(<span class=\"supfact\">token</span>);\n            if (<span class=\"supfact\">token</span>[v4 - Number] == Number) {\n              v5 = strlen(<span class=\"supfact\">token</span>);\n              <span class=\"supfact\">token</span>[v5 - Number] = Number;\n            }\n            <span class=\"supfact\">conditionValue</span>[Number] = BG_IndexForString(\n                <span class=\"supfact\">token</span>,\n                animConditionsTable[<span class=\"supfact\">conditionIndex</span>].values,\n                qfalse);\n          } else {\n            BG_AnimParseError(String);\n          }\n        } else {\n          <span class=\"supfact\">conditionValue</span>[Number] = Number;\n        }\n      }\n    } else {\n      BG_ParseConditionBits(\n          <span class=\"supfact\">text_pp</span>,\n          animConditionsTable[<span class=\"supfact\">conditionIndex</span>].values,\n          <span class=\"supfact\">conditionIndex</span>, <span class=\"supfact\">conditionValue</span>);\n    }\n    <span class=\"supfact\">scriptItem</span>\n        ->conditions[<span class=\"supfact\">scriptItem</span>->numConditions]\n        .index = <span class=\"supfact\">conditionIndex</span>;\n    <span class=\"supfact\">scriptItem</span>\n        ->conditions[<span class=\"supfact\">scriptItem</span>->numConditions]\n        .value[Number] = <span class=\"supfact\">conditionValue</span>[Number];\n  }\n  if (!<span class=\"supfact\">scriptItem</span>->numConditions)\n    BG_AnimParseError(String);\n  return Number;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "__unk__", "ref_name": "text_pp", "ref_type": "char * *"}, {"name": "a2", "type": "__unk__", "pred_name": "__unk__", "ref_name": "scriptItem", "ref_type": "animScriptItem_t *"}, {"name": "v14", "type": "int", "pred_name": "__unk__", "ref_name": "conditionValue", "ref_type": "int[2]"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "", "ref_type": "disappear"}, {"name": "v16", "type": "char *", "pred_name": "__unk__", "ref_name": "conditionIndex", "ref_type": "int"}, {"name": "s", "type": "char *", "pred_name": "token", "ref_name": "token", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "plume-design", "repo_name": "plume-pml", "path": "plume-design/plume-pml/b106dca06a6bf90b1c381e9366d418633884aa0d6324c853d2f6d4ad9d82a11d", "path_in_repo": "plume-design/plume-pml//work/native-debian10-x86_64/rootfs/usr/plume/tools/ovsh", "objdump": "000000000040adcc <ovsh_parse_columns>:\n  40adcc:\t55                   \tpush   %rbp\n  40adcd:\t48 89 e5             \tmov    %rsp,%rbp\n  40add0:\t48 81 ec 50 04 00 00 \tsub    $0x450,%rsp\n  40add7:\t48 89 bd c8 fb ff ff \tmov    %rdi,-0x438(%rbp)\n  40adde:\t89 b5 c4 fb ff ff    \tmov    %esi,-0x43c(%rbp)\n  40ade4:\t48 89 95 b8 fb ff ff \tmov    %rdx,-0x448(%rbp)\n  40adeb:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  40adf2:\t00 \n  40adf3:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40adfa:\te9 4b 03 00 00       \tjmpq   40b14a <ovsh_parse_columns+0x37e>\n  40adff:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40ae02:\t48 98                \tcltq   \n  40ae04:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40ae0b:\t00 \n  40ae0c:\t48 8b 85 b8 fb ff ff \tmov    -0x448(%rbp),%rax\n  40ae13:\t48 01 d0             \tadd    %rdx,%rax\n  40ae16:\t48 8b 00             \tmov    (%rax),%rax\n  40ae19:\t48 89 c7             \tmov    %rax,%rdi\n  40ae1c:\te8 9f c3 ff ff       \tcallq  4071c0 <strlen@plt>\n  40ae21:\t48 83 c0 01          \tadd    $0x1,%rax\n  40ae25:\t48 3d 00 04 00 00    \tcmp    $0x400,%rax\n  40ae2b:\t76 70                \tjbe    40ae9d <ovsh_parse_columns+0xd1>\n  40ae2d:\t0f b6 05 94 72 01 00 \tmovzbl 0x17294(%rip),%eax        # 4220c8 <ovsh_opt_verbose>\n  40ae34:\t84 c0                \ttest   %al,%al\n  40ae36:\t74 5b                \tje     40ae93 <ovsh_parse_columns+0xc7>\n  40ae38:\t48 8b 05 a1 51 01 00 \tmov    0x151a1(%rip),%rax        # 41ffe0 <stderr@GLIBC_2.2.5>\n  40ae3f:\t48 8b 00             \tmov    (%rax),%rax\n  40ae42:\t48 89 c1             \tmov    %rax,%rcx\n  40ae45:\tba 08 00 00 00       \tmov    $0x8,%edx\n  40ae4a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40ae4f:\t48 8d 3d dc d2 00 00 \tlea    0xd2dc(%rip),%rdi        # 418132 <_IO_stdin_used+0x132>\n  40ae56:\te8 c5 c9 ff ff       \tcallq  407820 <fwrite@plt>\n  40ae5b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40ae5e:\t48 98                \tcltq   \n  40ae60:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40ae67:\t00 \n  40ae68:\t48 8b 85 b8 fb ff ff \tmov    -0x448(%rbp),%rax\n  40ae6f:\t48 01 d0             \tadd    %rdx,%rax\n  40ae72:\t48 8b 10             \tmov    (%rax),%rdx\n  40ae75:\t48 8b 05 64 51 01 00 \tmov    0x15164(%rip),%rax        # 41ffe0 <stderr@GLIBC_2.2.5>\n  40ae7c:\t48 8b 00             \tmov    (%rax),%rax\n  40ae7f:\t48 8d 35 53 e5 00 00 \tlea    0xe553(%rip),%rsi        # 4193d9 <_IO_stdin_used+0x13d9>\n  40ae86:\t48 89 c7             \tmov    %rax,%rdi\n  40ae89:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40ae8e:\te8 9d c7 ff ff       \tcallq  407630 <fprintf@plt>\n  40ae93:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40ae98:\te9 dc 02 00 00       \tjmpq   40b179 <ovsh_parse_columns+0x3ad>\n  40ae9d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40aea0:\t48 98                \tcltq   \n  40aea2:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40aea9:\t00 \n  40aeaa:\t48 8b 85 b8 fb ff ff \tmov    -0x448(%rbp),%rax\n  40aeb1:\t48 01 d0             \tadd    %rdx,%rax\n  40aeb4:\t48 8b 10             \tmov    (%rax),%rdx\n  40aeb7:\t48 8d 85 d0 fb ff ff \tlea    -0x430(%rbp),%rax\n  40aebe:\t48 89 d6             \tmov    %rdx,%rsi\n  40aec1:\t48 89 c7             \tmov    %rax,%rdi\n  40aec4:\te8 17 c5 ff ff       \tcallq  4073e0 <strcpy@plt>\n  40aec9:\t48 8d 75 d8          \tlea    -0x28(%rbp),%rsi\n  40aecd:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  40aed1:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n  40aed5:\t48 8d 85 d0 fb ff ff \tlea    -0x430(%rbp),%rax\n  40aedc:\t49 89 f0             \tmov    %rsi,%r8\n  40aedf:\t48 8d 35 fa 57 01 00 \tlea    0x157fa(%rip),%rsi        # 4206e0 <delim.14759>\n  40aee6:\t48 89 c7             \tmov    %rax,%rdi\n  40aee9:\te8 d0 ed ff ff       \tcallq  409cbe <str_parse_expr>\n  40aeee:\t83 f0 01             \txor    $0x1,%eax\n  40aef1:\t84 c0                \ttest   %al,%al\n  40aef3:\t74 2b                \tje     40af20 <ovsh_parse_columns+0x154>\n  40aef5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40aef8:\t48 98                \tcltq   \n  40aefa:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  40af01:\t00 \n  40af02:\t48 8b 85 b8 fb ff ff \tmov    -0x448(%rbp),%rax\n  40af09:\t48 01 d0             \tadd    %rdx,%rax\n  40af0c:\t48 8b 00             \tmov    (%rax),%rax\n  40af0f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40af13:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  40af1a:\t00 \n  40af1b:\te9 45 01 00 00       \tjmpq   40b065 <ovsh_parse_columns+0x299>\n  40af20:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40af24:\t48 8d 35 9c e1 00 00 \tlea    0xe19c(%rip),%rsi        # 4190c7 <_IO_stdin_used+0x10c7>\n  40af2b:\t48 89 c7             \tmov    %rax,%rdi\n  40af2e:\te8 9d c6 ff ff       \tcallq  4075d0 <strcmp@plt>\n  40af33:\t85 c0                \ttest   %eax,%eax\n  40af35:\t75 15                \tjne    40af4c <ovsh_parse_columns+0x180>\n  40af37:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40af3b:\t48 89 c7             \tmov    %rax,%rdi\n  40af3e:\te8 20 ee ff ff       \tcallq  409d63 <json_value>\n  40af43:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40af47:\te9 19 01 00 00       \tjmpq   40b065 <ovsh_parse_columns+0x299>\n  40af4c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40af50:\t48 8d 35 96 e4 00 00 \tlea    0xe496(%rip),%rsi        # 4193ed <_IO_stdin_used+0x13ed>\n  40af57:\t48 89 c7             \tmov    %rax,%rdi\n  40af5a:\te8 71 c6 ff ff       \tcallq  4075d0 <strcmp@plt>\n  40af5f:\t85 c0                \ttest   %eax,%eax\n  40af61:\t75 7f                \tjne    40afe2 <ovsh_parse_columns+0x216>\n  40af63:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40af67:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40af6c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40af71:\t48 89 c7             \tmov    %rax,%rdi\n  40af74:\te8 97 c1 ff ff       \tcallq  407110 <json_loads@plt>\n  40af79:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40af7d:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  40af82:\t0f 85 dd 00 00 00    \tjne    40b065 <ovsh_parse_columns+0x299>\n  40af88:\t0f b6 05 39 71 01 00 \tmovzbl 0x17139(%rip),%eax        # 4220c8 <ovsh_opt_verbose>\n  40af8f:\t84 c0                \ttest   %al,%al\n  40af91:\t74 45                \tje     40afd8 <ovsh_parse_columns+0x20c>\n  40af93:\t48 8b 05 46 50 01 00 \tmov    0x15046(%rip),%rax        # 41ffe0 <stderr@GLIBC_2.2.5>\n  40af9a:\t48 8b 00             \tmov    (%rax),%rax\n  40af9d:\t48 89 c1             \tmov    %rax,%rcx\n  40afa0:\tba 08 00 00 00       \tmov    $0x8,%edx\n  40afa5:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40afaa:\t48 8d 3d 81 d1 00 00 \tlea    0xd181(%rip),%rdi        # 418132 <_IO_stdin_used+0x132>\n  40afb1:\te8 6a c8 ff ff       \tcallq  407820 <fwrite@plt>\n  40afb6:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  40afba:\t48 8b 05 1f 50 01 00 \tmov    0x1501f(%rip),%rax        # 41ffe0 <stderr@GLIBC_2.2.5>\n  40afc1:\t48 8b 00             \tmov    (%rax),%rax\n  40afc4:\t48 8d 35 25 e4 00 00 \tlea    0xe425(%rip),%rsi        # 4193f0 <_IO_stdin_used+0x13f0>\n  40afcb:\t48 89 c7             \tmov    %rax,%rdi\n  40afce:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40afd3:\te8 58 c6 ff ff       \tcallq  407630 <fprintf@plt>\n  40afd8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40afdd:\te9 97 01 00 00       \tjmpq   40b179 <ovsh_parse_columns+0x3ad>\n  40afe2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40afe6:\t48 8d 35 2a e4 00 00 \tlea    0xe42a(%rip),%rsi        # 419417 <_IO_stdin_used+0x1417>\n  40afed:\t48 89 c7             \tmov    %rax,%rdi\n  40aff0:\te8 db c5 ff ff       \tcallq  4075d0 <strcmp@plt>\n  40aff5:\t85 c0                \ttest   %eax,%eax\n  40aff7:\t75 12                \tjne    40b00b <ovsh_parse_columns+0x23f>\n  40aff9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40affd:\t48 89 c7             \tmov    %rax,%rdi\n  40b000:\te8 5b c0 ff ff       \tcallq  407060 <json_string@plt>\n  40b005:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40b009:\teb 5a                \tjmp    40b065 <ovsh_parse_columns+0x299>\n  40b00b:\t0f b6 05 b6 70 01 00 \tmovzbl 0x170b6(%rip),%eax        # 4220c8 <ovsh_opt_verbose>\n  40b012:\t84 c0                \ttest   %al,%al\n  40b014:\t74 45                \tje     40b05b <ovsh_parse_columns+0x28f>\n  40b016:\t48 8b 05 c3 4f 01 00 \tmov    0x14fc3(%rip),%rax        # 41ffe0 <stderr@GLIBC_2.2.5>\n  40b01d:\t48 8b 00             \tmov    (%rax),%rax\n  40b020:\t48 89 c1             \tmov    %rax,%rcx\n  40b023:\tba 08 00 00 00       \tmov    $0x8,%edx\n  40b028:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40b02d:\t48 8d 3d fe d0 00 00 \tlea    0xd0fe(%rip),%rdi        # 418132 <_IO_stdin_used+0x132>\n  40b034:\te8 e7 c7 ff ff       \tcallq  407820 <fwrite@plt>\n  40b039:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40b03d:\t48 8b 05 9c 4f 01 00 \tmov    0x14f9c(%rip),%rax        # 41ffe0 <stderr@GLIBC_2.2.5>\n  40b044:\t48 8b 00             \tmov    (%rax),%rax\n  40b047:\t48 8d 35 d2 e3 00 00 \tlea    0xe3d2(%rip),%rsi        # 419420 <_IO_stdin_used+0x1420>\n  40b04e:\t48 89 c7             \tmov    %rax,%rdi\n  40b051:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b056:\te8 d5 c5 ff ff       \tcallq  407630 <fprintf@plt>\n  40b05b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b060:\te9 14 01 00 00       \tjmpq   40b179 <ovsh_parse_columns+0x3ad>\n  40b065:\t48 83 bd c8 fb ff ff \tcmpq   $0x0,-0x438(%rbp)\n  40b06c:\t00 \n  40b06d:\t74 3c                \tje     40b0ab <ovsh_parse_columns+0x2df>\n  40b06f:\t48 8b 85 c8 fb ff ff \tmov    -0x438(%rbp),%rax\n  40b076:\t8b 00                \tmov    (%rax),%eax\n  40b078:\t83 f8 01             \tcmp    $0x1,%eax\n  40b07b:\t75 2e                \tjne    40b0ab <ovsh_parse_columns+0x2df>\n  40b07d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40b081:\t48 89 c7             \tmov    %rax,%rdi\n  40b084:\te8 d7 bf ff ff       \tcallq  407060 <json_string@plt>\n  40b089:\t48 89 c2             \tmov    %rax,%rdx\n  40b08c:\t48 8b 85 c8 fb ff ff \tmov    -0x438(%rbp),%rax\n  40b093:\t48 89 d6             \tmov    %rdx,%rsi\n  40b096:\t48 89 c7             \tmov    %rax,%rdi\n  40b099:\te8 c2 c7 ff ff       \tcallq  407860 <json_array_append_new@plt>\n  40b09e:\t85 c0                \ttest   %eax,%eax\n  40b0a0:\t0f 84 98 00 00 00    \tje     40b13e <ovsh_parse_columns+0x372>\n  40b0a6:\te9 b6 00 00 00       \tjmpq   40b161 <ovsh_parse_columns+0x395>\n  40b0ab:\t48 83 bd c8 fb ff ff \tcmpq   $0x0,-0x438(%rbp)\n  40b0b2:\t00 \n  40b0b3:\t74 36                \tje     40b0eb <ovsh_parse_columns+0x31f>\n  40b0b5:\t48 8b 85 c8 fb ff ff \tmov    -0x438(%rbp),%rax\n  40b0bc:\t8b 00                \tmov    (%rax),%eax\n  40b0be:\t85 c0                \ttest   %eax,%eax\n  40b0c0:\t75 29                \tjne    40b0eb <ovsh_parse_columns+0x31f>\n  40b0c2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40b0c6:\t48 85 c0             \ttest   %rax,%rax\n  40b0c9:\t74 20                \tje     40b0eb <ovsh_parse_columns+0x31f>\n  40b0cb:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  40b0cf:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  40b0d3:\t48 8b 85 c8 fb ff ff \tmov    -0x438(%rbp),%rax\n  40b0da:\t48 89 ce             \tmov    %rcx,%rsi\n  40b0dd:\t48 89 c7             \tmov    %rax,%rdi\n  40b0e0:\te8 3b c4 ff ff       \tcallq  407520 <json_object_set_new@plt>\n  40b0e5:\t85 c0                \ttest   %eax,%eax\n  40b0e7:\t74 55                \tje     40b13e <ovsh_parse_columns+0x372>\n  40b0e9:\teb 76                \tjmp    40b161 <ovsh_parse_columns+0x395>\n  40b0eb:\t0f b6 05 d6 6f 01 00 \tmovzbl 0x16fd6(%rip),%eax        # 4220c8 <ovsh_opt_verbose>\n  40b0f2:\t84 c0                \ttest   %al,%al\n  40b0f4:\t74 6a                \tje     40b160 <ovsh_parse_columns+0x394>\n  40b0f6:\t48 8b 05 e3 4e 01 00 \tmov    0x14ee3(%rip),%rax        # 41ffe0 <stderr@GLIBC_2.2.5>\n  40b0fd:\t48 8b 00             \tmov    (%rax),%rax\n  40b100:\t48 89 c1             \tmov    %rax,%rcx\n  40b103:\tba 08 00 00 00       \tmov    $0x8,%edx\n  40b108:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40b10d:\t48 8d 3d 1e d0 00 00 \tlea    0xd01e(%rip),%rdi        # 418132 <_IO_stdin_used+0x132>\n  40b114:\te8 07 c7 ff ff       \tcallq  407820 <fwrite@plt>\n  40b119:\t48 8b 05 c0 4e 01 00 \tmov    0x14ec0(%rip),%rax        # 41ffe0 <stderr@GLIBC_2.2.5>\n  40b120:\t48 8b 00             \tmov    (%rax),%rax\n  40b123:\t48 89 c1             \tmov    %rax,%rcx\n  40b126:\tba 24 00 00 00       \tmov    $0x24,%edx\n  40b12b:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40b130:\t48 8d 3d 11 e3 00 00 \tlea    0xe311(%rip),%rdi        # 419448 <_IO_stdin_used+0x1448>\n  40b137:\te8 e4 c6 ff ff       \tcallq  407820 <fwrite@plt>\n  40b13c:\teb 22                \tjmp    40b160 <ovsh_parse_columns+0x394>\n  40b13e:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  40b145:\t00 \n  40b146:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40b14a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40b14d:\t3b 85 c4 fb ff ff    \tcmp    -0x43c(%rbp),%eax\n  40b153:\t0f 8c a6 fc ff ff    \tjl     40adff <ovsh_parse_columns+0x33>\n  40b159:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b15e:\teb 19                \tjmp    40b179 <ovsh_parse_columns+0x3ad>\n  40b160:\t90                   \tnop\n  40b161:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  40b166:\t74 0c                \tje     40b174 <ovsh_parse_columns+0x3a8>\n  40b168:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40b16c:\t48 89 c7             \tmov    %rax,%rdi\n  40b16f:\te8 0e c8 ff ff       \tcallq  407982 <json_decref>\n  40b174:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b179:\tc9                   \tleaveq \n  40b17a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ovsh_parse_columns(_DWORD *a1, int a2, __int64 a3) {\n  char dest[Number];\n  const char *v6;\n  char *s1;\n  const char *v8;\n  __int64 v9;\n  int i;\n  v9 = Number L;\n  for (i = Number;; ++i) {\n    if (i >= a2)\n      return Number L;\n    if (strlen(*(const char **)(Number L * i + a3)) + Number > Number) {\n      if (ovsh_opt_verbose) {\n        fwrite(String, Number, Number, stderr);\n        fprintf(stderr, String, *(const char **)(Number L * i + a3));\n      }\n      return Number L;\n    }\n    strcpy(dest, *(const char **)(Number L * i + a3));\n    if ((unsigned __int8)str_parse_expr(dest, (const char **)delim_14759, &v8,\n                                        (const char **)&s1, &v6) != Number) {\n      v8 = *(const char **)(Number L * i + a3);\n      v6 = Number L;\n      goto LABEL_20;\n    }\n    if (!strcmp(s1, String)) {\n      v9 = json_value(v6);\n      goto LABEL_20;\n    }\n    if (strcmp(s1, String))\n      break;\n    v9 = json_loads();\n    if (!v9) {\n      if (ovsh_opt_verbose) {\n        fwrite(String, Number, Number, stderr);\n        fprintf(stderr, String, v6);\n      }\n      return Number L;\n    }\n  LABEL_20:\n    if (a1 && *a1 == Number) {\n      json_string();\n      if ((unsigned int)json_array_append_new())\n        goto LABEL_34;\n    } else {\n      if (!a1 || *a1 || !v6) {\n        if (ovsh_opt_verbose) {\n          fwrite(String, Number, Number, stderr);\n          fwrite(String, Number, Number, stderr);\n        }\n      LABEL_34:\n        if (v9)\n          json_decref(v9);\n        return Number L;\n      }\n      if ((unsigned int)json_object_set_new())\n        goto LABEL_34;\n    }\n    v9 = Number L;\n  }\n  if (!strcmp(s1, String)) {\n    v9 = json_string();\n    goto LABEL_20;\n  }\n  if (ovsh_opt_verbose) {\n    fwrite(String, Number, Number, stderr);\n    fprintf(stderr, String, s1);\n  }\n  return Number L;\n}", "code_t": "__int64 __fastcall ovsh_parse_columns(_DWORD *<span class=\"supfact\">a1</span>,\n                                      int <span class=\"supfact\">a2</span>,\n                                      __int64 <span class=\"supfact\">a3</span>) {\n  char <span class=\"supfact\">dest</span>[Number];\n  const char *<span class=\"supfact\">v6</span>;\n  char *<span class=\"supfact\">s1</span>;\n  const char *<span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v9</span> = Number L;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">i</span> >= <span class=\"supfact\">a2</span>)\n      return Number L;\n    if (strlen(*(const char **)(Number L * <span class=\"supfact\">i</span> +\n                                <span class=\"supfact\">a3</span>)) +\n            Number >\n        Number) {\n      if (ovsh_opt_verbose) {\n        fwrite(String, Number, Number, stderr);\n        fprintf(stderr, String,\n                *(const char **)(Number L * <span class=\"supfact\">i</span> +\n                                 <span class=\"supfact\">a3</span>));\n      }\n      return Number L;\n    }\n    strcpy(<span class=\"supfact\">dest</span>,\n           *(const char **)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">a3</span>));\n    if ((unsigned __int8)str_parse_expr(\n            <span class=\"supfact\">dest</span>, (const char **)delim_14759,\n            &<span class=\"supfact\">v8</span>, (const char **)&<span class=\"supfact\">s1</span>,\n            &<span class=\"supfact\">v6</span>) != Number) {\n      <span class=\"supfact\">v8</span> =\n          *(const char **)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">a3</span>);\n      <span class=\"supfact\">v6</span> = Number L;\n      goto LABEL_20;\n    }\n    if (!strcmp(<span class=\"supfact\">s1</span>, String)) {\n      <span class=\"supfact\">v9</span> = json_value(<span class=\"supfact\">v6</span>);\n      goto LABEL_20;\n    }\n    if (strcmp(<span class=\"supfact\">s1</span>, String))\n      break;\n    <span class=\"supfact\">v9</span> = json_loads();\n    if (!<span class=\"supfact\">v9</span>) {\n      if (ovsh_opt_verbose) {\n        fwrite(String, Number, Number, stderr);\n        fprintf(stderr, String, <span class=\"supfact\">v6</span>);\n      }\n      return Number L;\n    }\n  LABEL_20:\n    if (<span class=\"supfact\">a1</span> && *<span class=\"supfact\">a1</span> == Number) {\n      json_string();\n      if ((unsigned int)json_array_append_new())\n        goto LABEL_34;\n    } else {\n      if (!<span class=\"supfact\">a1</span> || *<span class=\"supfact\">a1</span> || !<span class=\"supfact\">v6</span>) {\n        if (ovsh_opt_verbose) {\n          fwrite(String, Number, Number, stderr);\n          fwrite(String, Number, Number, stderr);\n        }\n      LABEL_34:\n        if (<span class=\"supfact\">v9</span>)\n          json_decref(<span class=\"supfact\">v9</span>);\n        return Number L;\n      }\n      if ((unsigned int)json_object_set_new())\n        goto LABEL_34;\n    }\n    <span class=\"supfact\">v9</span> = Number L;\n  }\n  if (!strcmp(<span class=\"supfact\">s1</span>, String)) {\n    <span class=\"supfact\">v9</span> = json_string();\n    goto LABEL_20;\n  }\n  if (ovsh_opt_verbose) {\n    fwrite(String, Number, Number, stderr);\n    fprintf(stderr, String, <span class=\"supfact\">s1</span>);\n  }\n  return Number L;\n}", "var": [{"name": "a1", "type": "json_t_0 *", "pred_name": "__unk__", "ref_name": "a1", "ref_type": "_DWORD *"}, {"name": "a2", "type": "int", "pred_name": "argc", "ref_name": "a2", "ref_type": "int"}, {"name": "a3", "type": "char * *", "pred_name": "argv", "ref_name": "a3", "ref_type": "__int64"}, {"name": "dest", "type": "__unk__", "pred_name": "__unk__", "ref_name": "dest", "ref_type": "char[1032]"}, {"name": "v6", "type": "json_t_0 *", "pred_name": "__unk__", "ref_name": "v6", "ref_type": "const char *"}, {"name": "s1", "type": "const char *", "pred_name": "__unk__", "ref_name": "s1", "ref_type": "char *"}, {"name": "v8", "type": "json_t_0 *", "pred_name": "__unk__", "ref_name": "v8", "ref_type": "const char *"}, {"name": "v9", "type": "json_t_0 *", "pred_name": "__unk__", "ref_name": "v9", "ref_type": "__int64"}, {"name": "i", "type": "int", "pred_name": "index", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "eldron", "repo_name": "tls_middlebox", "path": "eldron/tls_middlebox/725590372be65b1f62a40c25ace8e6444b9fe7147397b8f7706c754bc6e2c237", "path_in_repo": "eldron/tls_middlebox/nspr/Debug/pr/tests/suspend.o", "objdump": "0000000000000039 <Level_1_Thread>:\n  39:\t55                   \tpush   %rbp\n  3a:\t48 89 e5             \tmov    %rsp,%rbp\n  3d:\t53                   \tpush   %rbx\n  3e:\t48 83 ec 28          \tsub    $0x28,%rsp\n  42:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  46:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  50:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  53:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  56:\t48 83 ec 08          \tsub    $0x8,%rsp\n  5a:\t6a 00                \tpushq  $0x0\n  5c:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  62:\t41 89 c0             \tmov    %eax,%r8d\n  65:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n  6a:\tba 00 00 00 00       \tmov    $0x0,%edx\n  6f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 76 <Level_1_Thread+0x3d>\n  76:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  7b:\te8 00 00 00 00       \tcallq  80 <Level_1_Thread+0x47>\n  80:\t48 83 c4 10          \tadd    $0x10,%rsp\n  84:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  88:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  8d:\t75 0e                \tjne    9d <Level_1_Thread+0x64>\n  8f:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 96 <Level_1_Thread+0x5d>\n  96:\te8 00 00 00 00       \tcallq  9b <Level_1_Thread+0x62>\n  9b:\teb 45                \tjmp    e2 <Level_1_Thread+0xa9>\n  9d:\t83 7d e8 01          \tcmpl   $0x1,-0x18(%rbp)\n  a1:\t75 09                \tjne    ac <Level_1_Thread+0x73>\n  a3:\t48 8d 1d 00 00 00 00 \tlea    0x0(%rip),%rbx        # aa <Level_1_Thread+0x71>\n  aa:\teb 07                \tjmp    b3 <Level_1_Thread+0x7a>\n  ac:\t48 8d 1d 00 00 00 00 \tlea    0x0(%rip),%rbx        # b3 <Level_1_Thread+0x7a>\n  b3:\te8 00 00 00 00       \tcallq  b8 <Level_1_Thread+0x7f>\n  b8:\t48 89 c6             \tmov    %rax,%rsi\n  bb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  bf:\t48 89 c1             \tmov    %rax,%rcx\n  c2:\t48 89 da             \tmov    %rbx,%rdx\n  c5:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # cc <Level_1_Thread+0x93>\n  cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  d1:\te8 00 00 00 00       \tcallq  d6 <Level_1_Thread+0x9d>\n  d6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  da:\t48 89 c7             \tmov    %rax,%rdi\n  dd:\te8 00 00 00 00       \tcallq  e2 <Level_1_Thread+0xa9>\n  e2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e9 <Level_1_Thread+0xb0>\n  e9:\t48 89 c7             \tmov    %rax,%rdi\n  ec:\te8 00 00 00 00       \tcallq  f1 <Level_1_Thread+0xb8>\n  f1:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # f7 <Level_1_Thread+0xbe>\n  f7:\t83 e8 01             \tsub    $0x1,%eax\n  fa:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 100 <Level_1_Thread+0xc7>\n 100:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 107 <Level_1_Thread+0xce>\n 107:\t48 89 c7             \tmov    %rax,%rdi\n 10a:\te8 00 00 00 00       \tcallq  10f <Level_1_Thread+0xd6>\n 10f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 116 <Level_1_Thread+0xdd>\n 116:\t48 89 c7             \tmov    %rax,%rdi\n 119:\te8 00 00 00 00       \tcallq  11e <Level_1_Thread+0xe5>\n 11e:\te8 00 00 00 00       \tcallq  123 <Level_1_Thread+0xea>\n 123:\t48 89 c6             \tmov    %rax,%rsi\n 126:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 12d <Level_1_Thread+0xf4>\n 12d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 132:\te8 00 00 00 00       \tcallq  137 <Level_1_Thread+0xfe>\n 137:\t90                   \tnop\n 138:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n 13c:\tc9                   \tleaveq \n 13d:\tc3                   \tretq   ", "code_s": "int __fastcall Level_1_Thread(unsigned int a1) {\n  const char *v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v5;\n  v5 = PR_CreateThreadGCAble(Number L, Level_2_Thread, Number L, Number L, a1,\n                             Number L, Number L);\n  if (v5) {\n    if (a1 == Number)\n      v1 = String;\n    else\n      v1 = String;\n    v2 = PR_GetCurrentThread();\n    printf(String, v2, v1, v5);\n    PR_JoinThread(v5);\n  } else {\n    puts(String);\n  }\n  PR_EnterMonitor(mon);\n  --alive;\n  PR_Notify(mon);\n  PR_ExitMonitor(mon);\n  v3 = PR_GetCurrentThread();\n  return printf(String, v3);\n}", "code_t": "void __cdecl Level_1_Thread(void *<span class=\"supfact\">arg</span>) {\n  const char *<span class=\"supfact\">v1</span>;\n  __int64 v2;\n  __int64 v3;\n  PRThread_0 *<span class=\"supfact\">thr</span>;\n  <span class=\"supfact\">thr</span> = (PRThread_0 *)PR_CreateThreadGCAble(\n      Number L, Level_2_Thread, Number L, Number L,\n      (unsigned int)<span class=\"supfact\">arg</span>, Number L, Number L);\n  if (<span class=\"supfact\">thr</span>) {\n    if ((_DWORD)<span class=\"supfact\">arg</span> == Number)\n      <span class=\"supfact\">v1</span> = String;\n    else\n      <span class=\"supfact\">v1</span> = String;\n    v2 = PR_GetCurrentThread();\n    printf(String, v2, <span class=\"supfact\">v1</span>, <span class=\"supfact\">thr</span>);\n    PR_JoinThread(<span class=\"supfact\">thr</span>);\n  } else {\n    puts(String);\n  }\n  PR_EnterMonitor(mon);\n  --alive;\n  PR_Notify(mon);\n  PR_ExitMonitor(mon);\n  v3 = PR_GetCurrentThread();\n  printf(String, v3);\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "scope", "ref_name": "arg", "ref_type": "void *"}, {"name": "v1", "type": "const char *", "pred_name": "v1", "ref_name": "v1", "ref_type": "const char *"}, {"name": "v5", "type": "__unk__", "pred_name": "__unk__", "ref_name": "thr", "ref_type": "PRThread_0 *"}], "body_in_train": false}, {"repo_owner": "wjfsanhe", "repo_name": "newPlayer", "path": "wjfsanhe/newPlayer/06654fc84e9b00207145eb9935534904ed5d6cb117689ead6c5f664990a4e18c", "path_in_repo": "wjfsanhe/newPlayer/amffmpeg/src/libavcodec/vp5.o", "objdump": "000000000000183e <vp5_default_models_init>:\n    183e:\t53                   \tpush   %rbx\n    183f:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1843:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    1848:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    184d:\t48 8b 80 88 2e 00 00 \tmov    0x2e88(%rax),%rax\n    1854:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n    1859:\tc7 44 24 1c 00 00 00 \tmovl   $0x0,0x1c(%rsp)\n    1860:\t00 \n    1861:\teb 54                \tjmp    18b7 <vp5_default_models_init+0x79>\n    1863:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    1868:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    186c:\t48 98                \tcltq   \n    186e:\tc6 84 02 80 00 00 00 \tmovb   $0x80,0x80(%rdx,%rax,1)\n    1875:\t80 \n    1876:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    187b:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    187f:\t48 98                \tcltq   \n    1881:\tc6 84 02 82 00 00 00 \tmovb   $0x80,0x82(%rdx,%rax,1)\n    1888:\t80 \n    1889:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    188e:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n    1892:\t48 63 d2             \tmovslq %edx,%rdx\n    1895:\t48 83 c2 40          \tadd    $0x40,%rdx\n    1899:\tc6 44 50 04 55       \tmovb   $0x55,0x4(%rax,%rdx,2)\n    189e:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    18a3:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n    18a7:\t48 63 d2             \tmovslq %edx,%rdx\n    18aa:\tc6 84 50 85 00 00 00 \tmovb   $0x80,0x85(%rax,%rdx,2)\n    18b1:\t80 \n    18b2:\t83 44 24 1c 01       \taddl   $0x1,0x1c(%rsp)\n    18b7:\t83 7c 24 1c 01       \tcmpl   $0x1,0x1c(%rsp)\n    18bc:\t7e a5                \tjle    1863 <vp5_default_models_init+0x25>\n    18be:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    18c3:\t48 05 14 07 00 00    \tadd    $0x714,%rax\n    18c9:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 18d0 <vp5_default_models_init+0x92>\n    18d0:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 18d7 <vp5_default_models_init+0x99>\n    18d7:\t48 89 08             \tmov    %rcx,(%rax)\n    18da:\t48 89 58 08          \tmov    %rbx,0x8(%rax)\n    18de:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 18e5 <vp5_default_models_init+0xa7>\n    18e5:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 18ec <vp5_default_models_init+0xae>\n    18ec:\t48 89 48 10          \tmov    %rcx,0x10(%rax)\n    18f0:\t48 89 58 18          \tmov    %rbx,0x18(%rax)\n    18f4:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 18fb <vp5_default_models_init+0xbd>\n    18fb:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 1902 <vp5_default_models_init+0xc4>\n    1902:\t48 89 48 20          \tmov    %rcx,0x20(%rax)\n    1906:\t48 89 58 28          \tmov    %rbx,0x28(%rax)\n    190a:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1911 <vp5_default_models_init+0xd3>\n    1911:\t48 89 50 30          \tmov    %rdx,0x30(%rax)\n    1915:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 191b <vp5_default_models_init+0xdd>\n    191b:\t89 50 38             \tmov    %edx,0x38(%rax)\n    191e:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1923:\t48 05 88 00 00 00    \tadd    $0x88,%rax\n    1929:\tba 0e 00 00 00       \tmov    $0xe,%edx\n    192e:\tbe 80 00 00 00       \tmov    $0x80,%esi\n    1933:\t48 89 c7             \tmov    %rax,%rdi\n    1936:\te8 00 00 00 00       \tcallq  193b <vp5_default_models_init+0xfd>\n    193b:\t90                   \tnop\n    193c:\t48 83 c4 20          \tadd    $0x20,%rsp\n    1940:\t5b                   \tpop    %rbx\n    1941:\tc3                   \tretq   ", "code_s": "void *__fastcall vp5_default_models_init(__int64 a1) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v5;\n  int i;\n  v5 = *(_QWORD *)(a1 + Number);\n  for (i = Number; i <= Number; ++i) {\n    *(_BYTE *)(v5 + i + Number) = Number;\n    *(_BYTE *)(v5 + i + Number) = Number;\n    *(_BYTE *)(v5 + Number * (i + Number L) + Number) = Number;\n    *(_BYTE *)(v5 + Number L * i + Number) = Number;\n  }\n  v1 = *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_QWORD *)(v5 + Number) = vp56_def_mb_types_stats;\n  *(_QWORD *)(v5 + Number) = v1;\n  v2 = *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_QWORD *)(v5 + Number) = *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_QWORD *)(v5 + Number) = v2;\n  v3 = *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_QWORD *)(v5 + Number) = *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_QWORD *)(v5 + Number) = v3;\n  *(_QWORD *)(v5 + Number) = *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_DWORD *)(v5 + Number) = *((_DWORD *)&vp56_def_mb_types_stats + Number);\n  return memset((void *)(v5 + Number), Number, Number);\n}", "code_t": "void __cdecl vp5_default_models_init(VP56Context *<span class=\"supfact\">s</span>) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  VP56Model *<span class=\"supfact\">model</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">model</span> = <span class=\"supfact\">s</span>->modelp;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">model</span>->vector_sig[<span class=\"supfact\">i</span>] = Number;\n    <span class=\"supfact\">model</span>->vector_dct[<span class=\"supfact\">i</span>] = Number;\n    <span class=\"supfact\">model</span>->vector_pdi[<span class=\"supfact\">i</span>][Number] = Number;\n    <span class=\"supfact\">model</span>->vector_pdi[<span class=\"supfact\">i</span>][Number] = Number;\n  }\n  v1 = *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_QWORD *)&<span class=\"supfact\">model</span>->mb_types_stats[Number][Number][Number] =\n      vp56_def_mb_types_stats;\n  *(_QWORD *)&<span class=\"supfact\">model</span>->mb_types_stats[Number][Number][Number] =\n      v1;\n  v2 = *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_QWORD *)&<span class=\"supfact\">model</span>->mb_types_stats[Number][Number][Number] =\n      *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_QWORD *)&<span class=\"supfact\">model</span>->mb_types_stats[Number][Number][Number] =\n      v2;\n  v3 = *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_QWORD *)&<span class=\"supfact\">model</span>->mb_types_stats[Number][Number][Number] =\n      *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_QWORD *)&<span class=\"supfact\">model</span>->mb_types_stats[Number][Number][Number] =\n      v3;\n  *(_QWORD *)&<span class=\"supfact\">model</span>->mb_types_stats[Number][Number][Number] =\n      *((_QWORD *)&vp56_def_mb_types_stats + Number);\n  *(_DWORD *)&<span class=\"supfact\">model</span>->mb_types_stats[Number][Number][Number] =\n      *((_DWORD *)&vp56_def_mb_types_stats + Number);\n  memset(<span class=\"supfact\">model</span>->vector_pdv, Number,\n         sizeof(<span class=\"supfact\">model</span>->vector_pdv));\n}", "var": [{"name": "a1", "type": "VP56Context *", "pred_name": "s", "ref_name": "s", "ref_type": "VP56Context *"}, {"name": "v5", "type": "VP56Model_0 *", "pred_name": "model", "ref_name": "model", "ref_type": "VP56Model *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "afni", "repo_name": "afni", "path": "afni/afni/12f9e4a9d90aa4f3633a7351f4acfc4d9829f9345666ef901b82ad04dd05acd1", "path_in_repo": "afni/afni/src/gifti/gifti_tool", "objdump": "000000000041e7bd <partial_buf_size>:\n  41e7bd:\t55                   \tpush   %rbp\n  41e7be:\t48 89 e5             \tmov    %rsp,%rbp\n  41e7c1:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  41e7c5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41e7c9:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41e7cc:\t81 7d fc 00 08 00 00 \tcmpl   $0x800,-0x4(%rbp)\n  41e7d3:\t7f 07                \tjg     41e7dc <partial_buf_size+0x1f>\n  41e7d5:\tb8 00 08 00 00       \tmov    $0x800,%eax\n  41e7da:\teb 43                \tjmp    41e81f <partial_buf_size+0x62>\n  41e7dc:\t81 7d fc 00 00 01 00 \tcmpl   $0x10000,-0x4(%rbp)\n  41e7e3:\t7f 05                \tjg     41e7ea <partial_buf_size+0x2d>\n  41e7e5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41e7e8:\teb 35                \tjmp    41e81f <partial_buf_size+0x62>\n  41e7ea:\t81 7d fc 00 00 a0 00 \tcmpl   $0xa00000,-0x4(%rbp)\n  41e7f1:\t7f 27                \tjg     41e81a <partial_buf_size+0x5d>\n  41e7f3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41e7f6:\t48 63 d0             \tmovslq %eax,%rdx\n  41e7f9:\t48 69 d2 67 66 66 66 \timul   $0x66666667,%rdx,%rdx\n  41e800:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  41e804:\tc1 fa 02             \tsar    $0x2,%edx\n  41e807:\tc1 f8 1f             \tsar    $0x1f,%eax\n  41e80a:\t29 c2                \tsub    %eax,%edx\n  41e80c:\t89 d0                \tmov    %edx,%eax\n  41e80e:\t05 ff 0f 00 00       \tadd    $0xfff,%eax\n  41e813:\t25 00 f0 ff ff       \tand    $0xfffff000,%eax\n  41e818:\teb 05                \tjmp    41e81f <partial_buf_size+0x62>\n  41e81a:\tb8 00 00 10 00       \tmov    $0x100000,%eax\n  41e81f:\t5d                   \tpop    %rbp\n  41e820:\tc3                   \tretq   ", "code_s": "__int64 __fastcall partial_buf_size(int a1) {\n  if (a1 <= Number)\n    return Number L;\n  if (a1 <= Number)\n    return (unsigned int)a1;\n  if (a1 > Number)\n    return Number;\n  return (a1 / Number + Number) & Number;\n}", "code_t": "int __cdecl partial_buf_size(__int64 <span class=\"supfact\">nbytes</span>) {\n  if ((int)<span class=\"supfact\">nbytes</span> <= Number)\n    return Number;\n  if ((int)<span class=\"supfact\">nbytes</span> <= Number)\n    return <span class=\"supfact\">nbytes</span>;\n  if ((int)<span class=\"supfact\">nbytes</span> > Number)\n    return Number;\n  return ((int)<span class=\"supfact\">nbytes</span> / Number + Number) & Number;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "nb", "ref_name": "nbytes", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "luotao717", "repo_name": "dytpro", "path": "luotao717/dytpro/43fbd89274b3f69669889887a5cb72945f6a742921ff3f7ca9650ed791103ca4", "path_in_repo": "luotao717/dytpro/ra5350/lktos_sdk/source/user/samba-3.0.2/source/param/loadparm.po", "objdump": "0000000000002d8b <lp_volume>:\n    2d8b:\t55                   \tpush   %rbp\n    2d8c:\t48 89 e5             \tmov    %rsp,%rbp\n    2d8f:\t48 83 ec 10          \tsub    $0x10,%rsp\n    2d93:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    2d96:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    2d9a:\t78 6b                \tjs     2e07 <lp_volume+0x7c>\n    2d9c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2da2 <lp_volume+0x17>\n    2da2:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    2da5:\t7d 60                \tjge    2e07 <lp_volume+0x7c>\n    2da7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2dae <lp_volume+0x23>\n    2dae:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    2db1:\t48 63 d2             \tmovslq %edx,%rdx\n    2db4:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    2db8:\t48 01 d0             \tadd    %rdx,%rax\n    2dbb:\t48 8b 00             \tmov    (%rax),%rax\n    2dbe:\t8b 00                \tmov    (%rax),%eax\n    2dc0:\t85 c0                \ttest   %eax,%eax\n    2dc2:\t74 43                \tje     2e07 <lp_volume+0x7c>\n    2dc4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2dcb <lp_volume+0x40>\n    2dcb:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    2dce:\t48 63 d2             \tmovslq %edx,%rdx\n    2dd1:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    2dd5:\t48 01 d0             \tadd    %rdx,%rax\n    2dd8:\t48 8b 00             \tmov    (%rax),%rax\n    2ddb:\t48 8b 80 28 01 00 00 \tmov    0x128(%rax),%rax\n    2de2:\t48 85 c0             \ttest   %rax,%rax\n    2de5:\t74 20                \tje     2e07 <lp_volume+0x7c>\n    2de7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2dee <lp_volume+0x63>\n    2dee:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    2df1:\t48 63 d2             \tmovslq %edx,%rdx\n    2df4:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    2df8:\t48 01 d0             \tadd    %rdx,%rax\n    2dfb:\t48 8b 00             \tmov    (%rax),%rax\n    2dfe:\t48 8b 80 28 01 00 00 \tmov    0x128(%rax),%rax\n    2e05:\teb 07                \tjmp    2e0e <lp_volume+0x83>\n    2e07:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2e0e <lp_volume+0x83>\n    2e0e:\t48 89 c7             \tmov    %rax,%rdi\n    2e11:\te8 f4 dd ff ff       \tcallq  c0a <lp_string>\n    2e16:\tc9                   \tleaveq \n    2e17:\tc3                   \tretq   ", "code_s": "__int64 __fastcall lp_volume(int a1) {\n  __int64 v1;\n  if (a1 >= Number && a1 < iNumServices &&\n      **(_DWORD **)(Number L * a1 + ServicePtrs) &&\n      *(_QWORD *)(*(_QWORD *)(Number L * a1 + ServicePtrs) + Number L)) {\n    v1 = *(_QWORD *)(*(_QWORD *)(Number L * a1 + ServicePtrs) + Number L);\n  } else {\n    v1 = qword_B068;\n  }\n  return lp_string(v1);\n}", "code_t": "char *__cdecl lp_volume(int <span class=\"supfact\">i</span>) {\n  char *<span class=\"supfact\">v1</span>;\n  if (<span class=\"supfact\">i</span> >= Number && <span class=\"supfact\">i</span> < iNumServices &&\n      ServicePtrs[<span class=\"supfact\">i</span>]->valid &&\n      ServicePtrs[<span class=\"supfact\">i</span>]->volume)\n    <span class=\"supfact\">v1</span> = ServicePtrs[<span class=\"supfact\">i</span>]->volume;\n  else\n    <span class=\"supfact\">v1</span> = sDefault.volume;\n  return lp_string(<span class=\"supfact\">v1</span>);\n}", "var": [{"name": "a1", "type": "int", "pred_name": "__unk__", "ref_name": "i", "ref_type": "int"}, {"name": "v1", "type": "__unk__", "pred_name": "v1", "ref_name": "v1", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "mrkj", "repo_name": "abc", "path": "mrkj/abc/bb77297abefe2c09469a1547c706c524a8155641efa3fb55414e1ae05aa5dcae", "path_in_repo": "mrkj/abc//src/aig/saig/saigSwitch.o", "objdump": "00000000000006f5 <_ZN3xxx18Aig_CManRestoreNumEPNS_11Aig_CMan_t_E>:\n 6f5:\t48 8b 47 18          \tmov    0x18(%rdi),%rax\n 6f9:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 6fd:\t48 89 57 18          \tmov    %rdx,0x18(%rdi)\n 701:\t0f b6 10             \tmovzbl (%rax),%edx\n 704:\t84 d2                \ttest   %dl,%dl\n 706:\t79 47                \tjns    74f <_ZN3xxx18Aig_CManRestoreNumEPNS_11Aig_CMan_t_E+0x5a>\n 708:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 70d:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 713:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 719:\t83 e2 7f             \tand    $0x7f,%edx\n 71c:\td3 e2                \tshl    %cl,%edx\n 71e:\t41 09 d1             \tor     %edx,%r9d\n 721:\t41 83 c0 01          \tadd    $0x1,%r8d\n 725:\t48 8b 77 18          \tmov    0x18(%rdi),%rsi\n 729:\t48 8d 46 01          \tlea    0x1(%rsi),%rax\n 72d:\t48 89 47 18          \tmov    %rax,0x18(%rdi)\n 731:\t0f b6 16             \tmovzbl (%rsi),%edx\n 734:\t83 c1 07             \tadd    $0x7,%ecx\n 737:\t84 d2                \ttest   %dl,%dl\n 739:\t78 de                \tjs     719 <_ZN3xxx18Aig_CManRestoreNumEPNS_11Aig_CMan_t_E+0x24>\n 73b:\t0f b6 c2             \tmovzbl %dl,%eax\n 73e:\t42 8d 0c c5 00 00 00 \tlea    0x0(,%r8,8),%ecx\n 745:\t00 \n 746:\t44 29 c1             \tsub    %r8d,%ecx\n 749:\td3 e0                \tshl    %cl,%eax\n 74b:\t44 09 c8             \tor     %r9d,%eax\n 74e:\tc3                   \tretq   \n 74f:\t0f b6 c2             \tmovzbl %dl,%eax\n 752:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 758:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 75e:\teb de                \tjmp    73e <_ZN3xxx18Aig_CManRestoreNumEPNS_11Aig_CMan_t_E+0x49>", "code_s": "__int64 __fastcall xxx Aig_CManRestoreNum(__int64 a1) {\n  unsigned __int8 *v1;\n  unsigned __int8 v2;\n  int v3;\n  int v4;\n  char v5;\n  unsigned __int8 *v6;\n  int v7;\n  v1 = *(unsigned __int8 **)(a1 + Number);\n  *(_QWORD *)(a1 + Number) = v1 + Number;\n  v2 = *v1;\n  if ((*v1 & Number) == Number) {\n    v7 = v2;\n    v4 = Number;\n    v5 = Number;\n  } else {\n    v3 = Number;\n    v4 = Number;\n    v5 = Number;\n    do {\n      v4 |= (v2 & Number) << v3;\n      ++v5;\n      v6 = *(unsigned __int8 **)(a1 + Number);\n      *(_QWORD *)(a1 + Number) = v6 + Number;\n      v2 = *v6;\n      v3 += Number;\n    } while ((*v6 & Number) != Number);\n    v7 = v2;\n  }\n  return v4 | (unsigned int)(v7 << (Number * v5));\n}", "code_t": "int __fastcall xxx Aig_CManRestoreNum(xxx Aig_CMan_t *<span class=\"supfact\">p</span>) {\n  unsigned __int8 *v1;\n  unsigned __int8 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>;\n  unsigned __int8 *<span class=\"supfact\">v6</span>;\n  int v7;\n  v1 = <span class=\"supfact\">p</span>->pCur;\n  <span class=\"supfact\">p</span>->pCur = v1 + Number;\n  <span class=\"supfact\">v2</span> = *v1;\n  if ((*v1 & Number) == Number) {\n    v7 = <span class=\"supfact\">v2</span>;\n    <span class=\"supfact\">v4</span> = Number;\n    <span class=\"supfact\">v5</span> = Number;\n  } else {\n    <span class=\"supfact\">v3</span> = Number;\n    <span class=\"supfact\">v4</span> = Number;\n    <span class=\"supfact\">v5</span> = Number;\n    do {\n      <span class=\"supfact\">v4</span> |= (<span class=\"supfact\">v2</span> & Number) << <span class=\"supfact\">v3</span>;\n      ++<span class=\"supfact\">v5</span>;\n      <span class=\"supfact\">v6</span> = <span class=\"supfact\">p</span>->pCur;\n      <span class=\"supfact\">p</span>->pCur = <span class=\"supfact\">v6</span> + Number;\n      <span class=\"supfact\">v2</span> = *<span class=\"supfact\">v6</span>;\n      <span class=\"supfact\">v3</span> += Number;\n    } while ((*<span class=\"supfact\">v6</span> & Number) != Number);\n    v7 = <span class=\"supfact\">v2</span>;\n  }\n  return <span class=\"supfact\">v4</span> | (v7 << (Number * <span class=\"supfact\">v5</span>));\n}", "var": [{"name": "a1", "type": "Aig_Man_t *", "pred_name": "p", "ref_name": "p", "ref_type": "xxx::Aig_CMan_t *"}, {"name": "v2", "type": "char", "pred_name": "v2", "ref_name": "v2", "ref_type": "unsigned __int8"}, {"name": "v3", "type": "int", "pred_name": "v3", "ref_name": "v3", "ref_type": "int"}, {"name": "v4", "type": "int", "pred_name": "v4", "ref_name": "v4", "ref_type": "int"}, {"name": "v5", "type": "unsigned __int8", "pred_name": "v5", "ref_name": "v5", "ref_type": "char"}, {"name": "v6", "type": "__int64", "pred_name": "v6", "ref_name": "v6", "ref_type": "unsigned __int8 *"}], "body_in_train": false}, {"repo_owner": "tbeu", "repo_name": "ExternData", "path": "tbeu/ExternData/248c00a7e348341d8e8bf32ae7791dad216e2ed9df5a8a22a38106cbc8b99a62", "path_in_repo": "tbeu/ExternData/ExternData/Resources/C-Sources/parson/parson.o", "objdump": "0000000000000e91 <json_object_dotremove_internal>:\n     e91:\t55                   \tpush   %rbp\n     e92:\t48 89 e5             \tmov    %rsp,%rbp\n     e95:\t48 83 ec 40          \tsub    $0x40,%rsp\n     e99:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     e9d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     ea1:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n     ea4:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     eab:\t00 \n     eac:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     eb3:\t00 \n     eb4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     eb8:\tbe 2e 00 00 00       \tmov    $0x2e,%esi\n     ebd:\t48 89 c7             \tmov    %rax,%rdi\n     ec0:\te8 00 00 00 00       \tcallq  ec5 <json_object_dotremove_internal+0x34>\n     ec5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     ec9:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     ece:\t75 18                \tjne    ee8 <json_object_dotremove_internal+0x57>\n     ed0:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     ed3:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     ed7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     edb:\t48 89 ce             \tmov    %rcx,%rsi\n     ede:\t48 89 c7             \tmov    %rax,%rdi\n     ee1:\te8 2a fe ff ff       \tcallq  d10 <json_object_remove_internal>\n     ee6:\teb 64                \tjmp    f4c <json_object_dotremove_internal+0xbb>\n     ee8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     eec:\t48 2b 45 d0          \tsub    -0x30(%rbp),%rax\n     ef0:\t48 89 c2             \tmov    %rax,%rdx\n     ef3:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     ef7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     efb:\t48 89 ce             \tmov    %rcx,%rsi\n     efe:\t48 89 c7             \tmov    %rax,%rdi\n     f01:\te8 58 fd ff ff       \tcallq  c5e <json_object_getn_value>\n     f06:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     f0a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     f0e:\t48 89 c7             \tmov    %rax,%rdi\n     f11:\te8 00 00 00 00       \tcallq  f16 <json_object_dotremove_internal+0x85>\n     f16:\t83 f8 04             \tcmp    $0x4,%eax\n     f19:\t74 07                \tje     f22 <json_object_dotremove_internal+0x91>\n     f1b:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     f20:\teb 2a                \tjmp    f4c <json_object_dotremove_internal+0xbb>\n     f22:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     f26:\t48 89 c7             \tmov    %rax,%rdi\n     f29:\te8 00 00 00 00       \tcallq  f2e <json_object_dotremove_internal+0x9d>\n     f2e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     f32:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f36:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n     f3a:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     f3d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     f41:\t48 89 ce             \tmov    %rcx,%rsi\n     f44:\t48 89 c7             \tmov    %rax,%rdi\n     f47:\te8 45 ff ff ff       \tcallq  e91 <json_object_dotremove_internal>\n     f4c:\tc9                   \tleaveq \n     f4d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall json_object_dotremove_internal(_QWORD *a1, const char *a2,\n                                                  unsigned int a3) {\n  char *v5;\n  __int64 v6;\n  __int64 v7;\n  v5 = strchr(a2, Number);\n  if (!v5)\n    return json_object_remove_internal(a1, a2, a3);\n  v7 = json_object_getn_value((__int64)a1, a2, v5 - a2);\n  if ((unsigned int)json_value_get_type(v7) != Number)\n    return Number;\n  v6 = json_value_get_object(v7);\n  return json_object_dotremove_internal(v6, v5 + Number, a3);\n}", "code_t": "JSON_Status __cdecl json_object_dotremove_internal(\n    JSON_Object *<span class=\"supfact\">object</span>, const char *<span class=\"supfact\">name</span>,\n    int <span class=\"supfact\">free_value</span>) {\n  char *<span class=\"supfact\">dot_pos</span>;\n  JSON_Object *<span class=\"supfact\">temp_object</span>;\n  const JSON_Value *<span class=\"supfact\">temp_value</span>;\n  <span class=\"supfact\">dot_pos</span> = strchr(<span class=\"supfact\">name</span>, Number);\n  if (!<span class=\"supfact\">dot_pos</span>)\n    return json_object_remove_internal(<span class=\"supfact\">object</span>,\n                                       <span class=\"supfact\">name</span>,\n                                       <span class=\"supfact\">free_value</span>);\n  <span class=\"supfact\">temp_value</span> =\n      json_object_getn_value(<span class=\"supfact\">object</span>, <span class=\"supfact\">name</span>,\n                             <span class=\"supfact\">dot_pos</span> - <span class=\"supfact\">name</span>);\n  if (json_value_get_type(<span class=\"supfact\">temp_value</span>) != Number)\n    return Number;\n  <span class=\"supfact\">temp_object</span> =\n      json_value_get_object(<span class=\"supfact\">temp_value</span>);\n  return json_object_dotremove_internal(<span class=\"supfact\">temp_object</span>,\n                                        <span class=\"supfact\">dot_pos</span> + Number,\n                                        <span class=\"supfact\">free_value</span>);\n}", "var": [{"name": "a1", "type": "const JSON_Object *", "pred_name": "object", "ref_name": "object", "ref_type": "JSON_Object *"}, {"name": "a2", "type": "const char *", "pred_name": "name", "ref_name": "name", "ref_type": "const char *"}, {"name": "a3", "type": "int", "pred_name": "type", "ref_name": "free_value", "ref_type": "int"}, {"name": "v5", "type": "json_t_0 *", "pred_name": "__unk__", "ref_name": "dot_pos", "ref_type": "char *"}, {"name": "v6", "type": "json_t_0 *", "pred_name": "__unk__", "ref_name": "temp_object", "ref_type": "JSON_Object *"}, {"name": "v7", "type": "json_t_0 *", "pred_name": "__unk__", "ref_name": "temp_value", "ref_type": "const JSON_Value *"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2af4e000b03dbd36bf5f5b1e94bd385a31b5c6a785c70e9770f2544cd62ecd92", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/m68000/m68kops.o", "objdump": "000000000003dc71 <_ZL20m68k_op_move_32_di_aP15_m68ki_cpu_core>:\n   3dc71:\t55                   \tpush   %rbp\n   3dc72:\t48 89 e5             \tmov    %rsp,%rbp\n   3dc75:\t53                   \tpush   %rbx\n   3dc76:\t48 83 ec 28          \tsub    $0x28,%rsp\n   3dc7a:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   3dc7e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dc82:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n   3dc86:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dc8a:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n   3dc90:\t89 c0                \tmov    %eax,%eax\n   3dc92:\t83 e0 07             \tand    $0x7,%eax\n   3dc95:\t48 83 c0 08          \tadd    $0x8,%rax\n   3dc99:\t48 c1 e0 02          \tshl    $0x2,%rax\n   3dc9d:\t48 01 d0             \tadd    %rdx,%rax\n   3dca0:\t8b 00                \tmov    (%rax),%eax\n   3dca2:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n   3dca5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dca9:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n   3dcad:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dcb1:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n   3dcb7:\tc1 e8 09             \tshr    $0x9,%eax\n   3dcba:\t89 c0                \tmov    %eax,%eax\n   3dcbc:\t83 e0 07             \tand    $0x7,%eax\n   3dcbf:\t48 83 c0 08          \tadd    $0x8,%rax\n   3dcc3:\t48 c1 e0 02          \tshl    $0x2,%rax\n   3dcc7:\t48 01 d0             \tadd    %rdx,%rax\n   3dcca:\t8b 18                \tmov    (%rax),%ebx\n   3dccc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dcd0:\t48 89 c7             \tmov    %rax,%rdi\n   3dcd3:\te8 e8 25 fc ff       \tcallq  2c0 <_ZL17m68ki_read_imm_16P15_m68ki_cpu_core>\n   3dcd8:\t98                   \tcwtl   \n   3dcd9:\t01 d8                \tadd    %ebx,%eax\n   3dcdb:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   3dcde:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dce2:\t8b 80 1c 01 00 00    \tmov    0x11c(%rax),%eax\n   3dce8:\t83 c8 01             \tor     $0x1,%eax\n   3dceb:\t89 c7                \tmov    %eax,%edi\n   3dced:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n   3dcf0:\t8b 75 e8             \tmov    -0x18(%rbp),%esi\n   3dcf3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dcf7:\t89 d1                \tmov    %edx,%ecx\n   3dcf9:\t89 fa                \tmov    %edi,%edx\n   3dcfb:\t48 89 c7             \tmov    %rax,%rdi\n   3dcfe:\te8 63 2b fc ff       \tcallq  866 <_ZL17m68ki_write_32_fcP15_m68ki_cpu_corejjj>\n   3dd03:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   3dd06:\tc1 e8 18             \tshr    $0x18,%eax\n   3dd09:\t89 c2                \tmov    %eax,%edx\n   3dd0b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dd0f:\t89 90 28 01 00 00    \tmov    %edx,0x128(%rax)\n   3dd15:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dd19:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n   3dd1c:\t89 90 2c 01 00 00    \tmov    %edx,0x12c(%rax)\n   3dd22:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dd26:\tc7 80 30 01 00 00 00 \tmovl   $0x0,0x130(%rax)\n   3dd2d:\t00 00 00 \n   3dd30:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   3dd34:\tc7 80 34 01 00 00 00 \tmovl   $0x0,0x134(%rax)\n   3dd3b:\t00 00 00 \n   3dd3e:\t90                   \tnop\n   3dd3f:\t48 83 c4 28          \tadd    $0x28,%rsp\n   3dd43:\t5b                   \tpop    %rbx\n   3dd44:\t5d                   \tpop    %rbp\n   3dd45:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall m68k_op_move_32_di_a(_DWORD *a1) {\n  int v1;\n  _DWORD *result;\n  unsigned int v3;\n  unsigned int v4;\n  v4 = a1[(a1[Number] & Number) + Number];\n  v1 = a1[((a1[Number] >> Number) & Number) + Number];\n  v3 = v1 + (__int16)m68ki_read_imm_16((__int64)a1);\n  m68ki_write_32_fc((__int64)a1, v3, a1[Number] | Number, v4);\n  a1[Number] = HIBYTE(v4);\n  a1[Number] = v4;\n  a1[Number] = Number;\n  result = a1;\n  a1[Number] = Number;\n  return result;\n}", "code_t": "void __cdecl m68k_op_move_32_di_a(m68ki_cpu_core *<span class=\"supfact\">m68k</span>) {\n  UINT32 <span class=\"supfact\">v1</span>;\n  UINT32 v2;\n  UINT32 <span class=\"supfact\">res</span>;\n  <span class=\"supfact\">res</span> =\n      <span class=\"supfact\">m68k</span>->dar[(<span class=\"supfact\">m68k</span>->ir & Number) + Number];\n  <span class=\"supfact\">v1</span> =\n      <span class=\"supfact\">m68k</span>\n          ->dar[((<span class=\"supfact\">m68k</span>->ir >> Number) & Number) + Number];\n  v2 = <span class=\"supfact\">v1</span> + (__int16)m68ki_read_imm_16(<span class=\"supfact\">m68k</span>);\n  m68ki_write_32_fc(<span class=\"supfact\">m68k</span>, v2,\n                    <span class=\"supfact\">m68k</span>->s_flag | Number, <span class=\"supfact\">res</span>);\n  <span class=\"supfact\">m68k</span>->n_flag = HIBYTE(<span class=\"supfact\">res</span>);\n  <span class=\"supfact\">m68k</span>->not_z_flag = <span class=\"supfact\">res</span>;\n  <span class=\"supfact\">m68k</span>->v_flag = Number;\n  <span class=\"supfact\">m68k</span>->c_flag = Number;\n}", "var": [{"name": "a1", "type": "edict_t *", "pred_name": "self", "ref_name": "m68k", "ref_type": "m68ki_cpu_core *"}, {"name": "v1", "type": "unsigned int", "pred_name": "v1", "ref_name": "v1", "ref_type": "UINT32"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v3", "type": "unsigned int", "pred_name": "v2", "ref_name": "", "ref_type": "disappear"}, {"name": "v4", "type": "unsigned int", "pred_name": "ea", "ref_name": "res", "ref_type": "UINT32"}], "body_in_train": false}, {"repo_owner": "makinacorpus", "repo_name": "libecw", "path": "makinacorpus/libecw/8498a785df648ecb6796d9c9e1f954351195c2857f4dfd52ea26c43e306cb824", "path_in_repo": "makinacorpus/libecw/Source/C/NCSEcw/lcms/src/liblcms_la-cmsio1.o", "objdump": "0000000000005a6c <SaveOneChromaticity>:\n    5a6c:\t55                   \tpush   %rbp\n    5a6d:\t48 89 e5             \tmov    %rsp,%rbp\n    5a70:\t48 83 ec 30          \tsub    $0x30,%rsp\n    5a74:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    5a78:\tf2 0f 11 45 e0       \tmovsd  %xmm0,-0x20(%rbp)\n    5a7d:\tf2 0f 11 4d d8       \tmovsd  %xmm1,-0x28(%rbp)\n    5a82:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    5a86:\tf2 0f 10 4d e0       \tmovsd  -0x20(%rbp),%xmm1\n    5a8b:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 5a93 <SaveOneChromaticity+0x27>\n    5a92:\t00 \n    5a93:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n    5a97:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 5a9f <SaveOneChromaticity+0x33>\n    5a9e:\t00 \n    5a9f:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n    5aa3:\tf2 0f 2c c0          \tcvttsd2si %xmm0,%eax\n    5aa7:\t89 c7                \tmov    %eax,%edi\n    5aa9:\te8 25 a6 ff ff       \tcallq  d3 <TransportValue32>\n    5aae:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    5ab1:\tf2 0f 10 4d d8       \tmovsd  -0x28(%rbp),%xmm1\n    5ab6:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 5abe <SaveOneChromaticity+0x52>\n    5abd:\t00 \n    5abe:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n    5ac2:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 5aca <SaveOneChromaticity+0x5e>\n    5ac9:\t00 \n    5aca:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n    5ace:\tf2 0f 2c c0          \tcvttsd2si %xmm0,%eax\n    5ad2:\t89 c7                \tmov    %eax,%edi\n    5ad4:\te8 fa a5 ff ff       \tcallq  d3 <TransportValue32>\n    5ad9:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    5adc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5ae0:\t48 8b 88 20 0d 00 00 \tmov    0xd20(%rax),%rcx\n    5ae7:\t48 8d 55 fc          \tlea    -0x4(%rbp),%rdx\n    5aeb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5aef:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    5af4:\t48 89 c7             \tmov    %rax,%rdi\n    5af7:\tff d1                \tcallq  *%rcx\n    5af9:\t85 c0                \ttest   %eax,%eax\n    5afb:\t75 07                \tjne    5b04 <SaveOneChromaticity+0x98>\n    5afd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5b02:\teb 2d                \tjmp    5b31 <SaveOneChromaticity+0xc5>\n    5b04:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5b08:\t48 8b 88 20 0d 00 00 \tmov    0xd20(%rax),%rcx\n    5b0f:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n    5b13:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5b17:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    5b1c:\t48 89 c7             \tmov    %rax,%rdi\n    5b1f:\tff d1                \tcallq  *%rcx\n    5b21:\t85 c0                \ttest   %eax,%eax\n    5b23:\t75 07                \tjne    5b2c <SaveOneChromaticity+0xc0>\n    5b25:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5b2a:\teb 05                \tjmp    5b31 <SaveOneChromaticity+0xc5>\n    5b2c:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    5b31:\tc9                   \tleaveq \n    5b32:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall SaveOneChromaticity(__int64 a1, __int64 a2, double a3,\n                                      double a4) {\n  _BOOL8 result;\n  int v5;\n  int v6;\n  v6 = TransportValue32((int)(a3 * Number + Number));\n  v5 = TransportValue32((int)(a4 * Number + Number));\n  if ((*(unsigned int(__fastcall **)(__int64, __int64, int *))(a2 + Number))(\n          a1, Number L, &v6))\n    result = (*(unsigned int(__fastcall **)(__int64, __int64, int *))(\n                 a2 + Number))(a1, Number L, &v5) != Number;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "BOOL __cdecl SaveOneChromaticity(FILE *<span class=\"supfact\">OutStream</span>,\n                                 double <span class=\"supfact\">x</span>,\n                                 double <span class=\"supfact\">y</span>,\n                                 LPLCMSICCPROFILE <span class=\"supfact\">Icc</span>) {\n  BOOL <span class=\"supfact\">result</span>;\n  Fixed32 <span class=\"supfact\">yf</span>;\n  Fixed32 <span class=\"supfact\">xf</span>;\n  <span class=\"supfact\">xf</span> =\n      TransportValue32((int)(<span class=\"supfact\">x</span> * Number + Number));\n  <span class=\"supfact\">yf</span> =\n      TransportValue32((int)(<span class=\"supfact\">y</span> * Number + Number));\n  if (<span class=\"supfact\">Icc</span>->Write(<span class=\"supfact\">OutStream</span>, Number L,\n                                 &<span class=\"supfact\">xf</span>))\n    <span class=\"supfact\">result</span> =\n        ((__int64(__fastcall *)(FILE *, __int64,\n                                Fixed32 *))<span class=\"supfact\">Icc</span>->Write)(\n            <span class=\"supfact\">OutStream</span>, Number L, &<span class=\"supfact\">yf</span>) != Number;\n  else\n    <span class=\"supfact\">result</span> = Number;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "ClientData", "pred_name": "clientData", "ref_name": "OutStream", "ref_type": "FILE *"}, {"name": "a2", "type": "Tcl_Interp_0 *", "pred_name": "interp", "ref_name": "Icc", "ref_type": "LPLCMSICCPROFILE"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "x", "ref_type": "double"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "y", "ref_type": "double"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "BOOL"}, {"name": "v5", "type": "int", "pred_name": "__unk__", "ref_name": "yf", "ref_type": "Fixed32"}, {"name": "v6", "type": "int", "pred_name": "__unk__", "ref_name": "xf", "ref_type": "Fixed32"}], "body_in_train": false}, {"repo_owner": "plume-design", "repo_name": "opensync", "path": "plume-design/opensync/08f33a0ec46a8bad3d880504be1cd38675ebe105adca2213f7eee928a7fdeda6", "path_in_repo": "plume-design/opensync//work/native-debian10-x86_64/obj/src.lib.schema/src/lib/schema/src/schema.o", "objdump": "000000000001b38d <schema_Bridge_to_json>:\n   1b38d:\t55                   \tpush   %rbp\n   1b38e:\t48 89 e5             \tmov    %rsp,%rbp\n   1b391:\t48 83 ec 20          \tsub    $0x20,%rsp\n   1b395:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   1b399:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n   1b39d:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n   1b3a4:\t00 \n   1b3a5:\te8 00 00 00 00       \tcallq  1b3aa <schema_Bridge_to_json+0x1d>\n   1b3aa:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   1b3ae:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n   1b3b3:\t75 36                \tjne    1b3eb <schema_Bridge_to_json+0x5e>\n   1b3b5:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n   1b3ba:\t74 29                \tje     1b3e5 <schema_Bridge_to_json+0x58>\n   1b3bc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   1b3c0:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b3c7 <schema_Bridge_to_json+0x3a>\n   1b3c7:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 1b3ce <schema_Bridge_to_json+0x41>\n   1b3ce:\tbe 80 00 00 00       \tmov    $0x80,%esi\n   1b3d3:\t48 89 c7             \tmov    %rax,%rdi\n   1b3d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   1b3db:\te8 00 00 00 00       \tcallq  1b3e0 <schema_Bridge_to_json+0x53>\n   1b3e0:\te9 27 09 00 00       \tjmpq   1bd0c <schema_Bridge_to_json+0x97f>\n   1b3e5:\t90                   \tnop\n   1b3e6:\te9 21 09 00 00       \tjmpq   1bd0c <schema_Bridge_to_json+0x97f>\n   1b3eb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b3ef:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b3f3:\t84 c0                \ttest   %al,%al\n   1b3f5:\t74 25                \tje     1b41c <schema_Bridge_to_json+0x8f>\n   1b3f7:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1b3fd <schema_Bridge_to_json+0x70>\n   1b3fd:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b404 <schema_Bridge_to_json+0x77>\n   1b404:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 1b40b <schema_Bridge_to_json+0x7e>\n   1b40b:\t89 c6                \tmov    %eax,%esi\n   1b40d:\tbf 09 00 00 00       \tmov    $0x9,%edi\n   1b412:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   1b417:\te8 00 00 00 00       \tcallq  1b41c <schema_Bridge_to_json+0x8f>\n   1b41c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b420:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b424:\t83 f0 01             \txor    $0x1,%eax\n   1b427:\t84 c0                \ttest   %al,%al\n   1b429:\t75 0c                \tjne    1b437 <schema_Bridge_to_json+0xaa>\n   1b42b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b42f:\t0f b6 40 2a          \tmovzbl 0x2a(%rax),%eax\n   1b433:\t84 c0                \ttest   %al,%al\n   1b435:\t74 37                \tje     1b46e <schema_Bridge_to_json+0xe1>\n   1b437:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b43b:\t0f b6 40 2c          \tmovzbl 0x2c(%rax),%eax\n   1b43f:\t0f b6 c0             \tmovzbl %al,%eax\n   1b442:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b446:\t48 8d 7a 05          \tlea    0x5(%rdx),%rdi\n   1b44a:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b44e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b452:\t49 89 c8             \tmov    %rcx,%r8\n   1b455:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b45c <schema_Bridge_to_json+0xcf>\n   1b45c:\t89 c6                \tmov    %eax,%esi\n   1b45e:\te8 00 00 00 00       \tcallq  1b463 <schema_Bridge_to_json+0xd6>\n   1b463:\t83 f0 01             \txor    $0x1,%eax\n   1b466:\t84 c0                \ttest   %al,%al\n   1b468:\t0f 85 58 08 00 00    \tjne    1bcc6 <schema_Bridge_to_json+0x939>\n   1b46e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b472:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b476:\t83 f0 01             \txor    $0x1,%eax\n   1b479:\t84 c0                \ttest   %al,%al\n   1b47b:\t75 0c                \tjne    1b489 <schema_Bridge_to_json+0xfc>\n   1b47d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b481:\t0f b6 40 52          \tmovzbl 0x52(%rax),%eax\n   1b485:\t84 c0                \ttest   %al,%al\n   1b487:\t74 37                \tje     1b4c0 <schema_Bridge_to_json+0x133>\n   1b489:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b48d:\t0f b6 40 54          \tmovzbl 0x54(%rax),%eax\n   1b491:\t0f b6 c0             \tmovzbl %al,%eax\n   1b494:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b498:\t48 8d 7a 2d          \tlea    0x2d(%rdx),%rdi\n   1b49c:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b4a0:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b4a4:\t49 89 c8             \tmov    %rcx,%r8\n   1b4a7:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b4ae <schema_Bridge_to_json+0x121>\n   1b4ae:\t89 c6                \tmov    %eax,%esi\n   1b4b0:\te8 00 00 00 00       \tcallq  1b4b5 <schema_Bridge_to_json+0x128>\n   1b4b5:\t83 f0 01             \txor    $0x1,%eax\n   1b4b8:\t84 c0                \ttest   %al,%al\n   1b4ba:\t0f 85 09 08 00 00    \tjne    1bcc9 <schema_Bridge_to_json+0x93c>\n   1b4c0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b4c4:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b4c8:\t83 f0 01             \txor    $0x1,%eax\n   1b4cb:\t84 c0                \ttest   %al,%al\n   1b4cd:\t75 0f                \tjne    1b4de <schema_Bridge_to_json+0x151>\n   1b4cf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b4d3:\t0f b6 80 d6 00 00 00 \tmovzbl 0xd6(%rax),%eax\n   1b4da:\t84 c0                \ttest   %al,%al\n   1b4dc:\t74 32                \tje     1b510 <schema_Bridge_to_json+0x183>\n   1b4de:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b4e2:\t48 8d 78 55          \tlea    0x55(%rax),%rdi\n   1b4e6:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   1b4ea:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   1b4ee:\t49 89 d0             \tmov    %rdx,%r8\n   1b4f1:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b4f8 <schema_Bridge_to_json+0x16b>\n   1b4f8:\t48 89 c2             \tmov    %rax,%rdx\n   1b4fb:\tbe 81 00 00 00       \tmov    $0x81,%esi\n   1b500:\te8 00 00 00 00       \tcallq  1b505 <schema_Bridge_to_json+0x178>\n   1b505:\t83 f0 01             \txor    $0x1,%eax\n   1b508:\t84 c0                \ttest   %al,%al\n   1b50a:\t0f 85 bc 07 00 00    \tjne    1bccc <schema_Bridge_to_json+0x93f>\n   1b510:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b514:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b518:\t83 f0 01             \txor    $0x1,%eax\n   1b51b:\t84 c0                \ttest   %al,%al\n   1b51d:\t75 0f                \tjne    1b52e <schema_Bridge_to_json+0x1a1>\n   1b51f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b523:\t0f b6 80 5a 01 00 00 \tmovzbl 0x15a(%rax),%eax\n   1b52a:\t84 c0                \ttest   %al,%al\n   1b52c:\t74 35                \tje     1b563 <schema_Bridge_to_json+0x1d6>\n   1b52e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b532:\t48 8d b8 d9 00 00 00 \tlea    0xd9(%rax),%rdi\n   1b539:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   1b53d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   1b541:\t49 89 d0             \tmov    %rdx,%r8\n   1b544:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b54b <schema_Bridge_to_json+0x1be>\n   1b54b:\t48 89 c2             \tmov    %rax,%rdx\n   1b54e:\tbe 81 00 00 00       \tmov    $0x81,%esi\n   1b553:\te8 00 00 00 00       \tcallq  1b558 <schema_Bridge_to_json+0x1cb>\n   1b558:\t83 f0 01             \txor    $0x1,%eax\n   1b55b:\t84 c0                \ttest   %al,%al\n   1b55d:\t0f 85 6c 07 00 00    \tjne    1bccf <schema_Bridge_to_json+0x942>\n   1b563:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b567:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b56b:\t83 f0 01             \txor    $0x1,%eax\n   1b56e:\t84 c0                \ttest   %al,%al\n   1b570:\t75 0f                \tjne    1b581 <schema_Bridge_to_json+0x1f4>\n   1b572:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b576:\t0f b6 80 de 01 00 00 \tmovzbl 0x1de(%rax),%eax\n   1b57d:\t84 c0                \ttest   %al,%al\n   1b57f:\t74 35                \tje     1b5b6 <schema_Bridge_to_json+0x229>\n   1b581:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b585:\t48 8d b8 5d 01 00 00 \tlea    0x15d(%rax),%rdi\n   1b58c:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   1b590:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   1b594:\t49 89 d0             \tmov    %rdx,%r8\n   1b597:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b59e <schema_Bridge_to_json+0x211>\n   1b59e:\t48 89 c2             \tmov    %rax,%rdx\n   1b5a1:\tbe 81 00 00 00       \tmov    $0x81,%esi\n   1b5a6:\te8 00 00 00 00       \tcallq  1b5ab <schema_Bridge_to_json+0x21e>\n   1b5ab:\t83 f0 01             \txor    $0x1,%eax\n   1b5ae:\t84 c0                \ttest   %al,%al\n   1b5b0:\t0f 85 1c 07 00 00    \tjne    1bcd2 <schema_Bridge_to_json+0x945>\n   1b5b6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b5ba:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b5be:\t83 f0 01             \txor    $0x1,%eax\n   1b5c1:\t84 c0                \ttest   %al,%al\n   1b5c3:\t75 0f                \tjne    1b5d4 <schema_Bridge_to_json+0x247>\n   1b5c5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b5c9:\t0f b6 80 62 02 00 00 \tmovzbl 0x262(%rax),%eax\n   1b5d0:\t84 c0                \ttest   %al,%al\n   1b5d2:\t74 45                \tje     1b619 <schema_Bridge_to_json+0x28c>\n   1b5d4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b5d8:\t0f b6 80 64 02 00 00 \tmovzbl 0x264(%rax),%eax\n   1b5df:\t0f b6 c0             \tmovzbl %al,%eax\n   1b5e2:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b5e6:\t48 8d ba e1 01 00 00 \tlea    0x1e1(%rdx),%rdi\n   1b5ed:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b5f1:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b5f5:\t49 89 c9             \tmov    %rcx,%r9\n   1b5f8:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 1b5ff <schema_Bridge_to_json+0x272>\n   1b5ff:\t48 89 d1             \tmov    %rdx,%rcx\n   1b602:\t89 c2                \tmov    %eax,%edx\n   1b604:\tbe 81 00 00 00       \tmov    $0x81,%esi\n   1b609:\te8 00 00 00 00       \tcallq  1b60e <schema_Bridge_to_json+0x281>\n   1b60e:\t83 f0 01             \txor    $0x1,%eax\n   1b611:\t84 c0                \ttest   %al,%al\n   1b613:\t0f 85 bc 06 00 00    \tjne    1bcd5 <schema_Bridge_to_json+0x948>\n   1b619:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b61d:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b621:\t83 f0 01             \txor    $0x1,%eax\n   1b624:\t84 c0                \ttest   %al,%al\n   1b626:\t75 0f                \tjne    1b637 <schema_Bridge_to_json+0x2aa>\n   1b628:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b62c:\t0f b6 80 66 02 00 00 \tmovzbl 0x266(%rax),%eax\n   1b633:\t84 c0                \ttest   %al,%al\n   1b635:\t74 32                \tje     1b669 <schema_Bridge_to_json+0x2dc>\n   1b637:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b63b:\t0f b6 80 65 02 00 00 \tmovzbl 0x265(%rax),%eax\n   1b642:\t0f b6 c0             \tmovzbl %al,%eax\n   1b645:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   1b649:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n   1b64d:\t48 89 d1             \tmov    %rdx,%rcx\n   1b650:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 1b657 <schema_Bridge_to_json+0x2ca>\n   1b657:\t89 c7                \tmov    %eax,%edi\n   1b659:\te8 00 00 00 00       \tcallq  1b65e <schema_Bridge_to_json+0x2d1>\n   1b65e:\t83 f0 01             \txor    $0x1,%eax\n   1b661:\t84 c0                \ttest   %al,%al\n   1b663:\t0f 85 6f 06 00 00    \tjne    1bcd8 <schema_Bridge_to_json+0x94b>\n   1b669:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b66d:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b671:\t83 f0 01             \txor    $0x1,%eax\n   1b674:\t84 c0                \ttest   %al,%al\n   1b676:\t75 0f                \tjne    1b687 <schema_Bridge_to_json+0x2fa>\n   1b678:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b67c:\t0f b6 80 6a 02 00 00 \tmovzbl 0x26a(%rax),%eax\n   1b683:\t84 c0                \ttest   %al,%al\n   1b685:\t74 32                \tje     1b6b9 <schema_Bridge_to_json+0x32c>\n   1b687:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b68b:\t0f b6 80 69 02 00 00 \tmovzbl 0x269(%rax),%eax\n   1b692:\t0f b6 c0             \tmovzbl %al,%eax\n   1b695:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   1b699:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n   1b69d:\t48 89 d1             \tmov    %rdx,%rcx\n   1b6a0:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 1b6a7 <schema_Bridge_to_json+0x31a>\n   1b6a7:\t89 c7                \tmov    %eax,%edi\n   1b6a9:\te8 00 00 00 00       \tcallq  1b6ae <schema_Bridge_to_json+0x321>\n   1b6ae:\t83 f0 01             \txor    $0x1,%eax\n   1b6b1:\t84 c0                \ttest   %al,%al\n   1b6b3:\t0f 85 22 06 00 00    \tjne    1bcdb <schema_Bridge_to_json+0x94e>\n   1b6b9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b6bd:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b6c1:\t83 f0 01             \txor    $0x1,%eax\n   1b6c4:\t84 c0                \ttest   %al,%al\n   1b6c6:\t75 0f                \tjne    1b6d7 <schema_Bridge_to_json+0x34a>\n   1b6c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b6cc:\t0f b6 80 6e 02 00 00 \tmovzbl 0x26e(%rax),%eax\n   1b6d3:\t84 c0                \ttest   %al,%al\n   1b6d5:\t74 32                \tje     1b709 <schema_Bridge_to_json+0x37c>\n   1b6d7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b6db:\t0f b6 80 6d 02 00 00 \tmovzbl 0x26d(%rax),%eax\n   1b6e2:\t0f b6 c0             \tmovzbl %al,%eax\n   1b6e5:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   1b6e9:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n   1b6ed:\t48 89 d1             \tmov    %rdx,%rcx\n   1b6f0:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 1b6f7 <schema_Bridge_to_json+0x36a>\n   1b6f7:\t89 c7                \tmov    %eax,%edi\n   1b6f9:\te8 00 00 00 00       \tcallq  1b6fe <schema_Bridge_to_json+0x371>\n   1b6fe:\t83 f0 01             \txor    $0x1,%eax\n   1b701:\t84 c0                \ttest   %al,%al\n   1b703:\t0f 85 d5 05 00 00    \tjne    1bcde <schema_Bridge_to_json+0x951>\n   1b709:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b70d:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b711:\t83 f0 01             \txor    $0x1,%eax\n   1b714:\t84 c0                \ttest   %al,%al\n   1b716:\t75 0f                \tjne    1b727 <schema_Bridge_to_json+0x39a>\n   1b718:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b71c:\t0f b6 80 b8 0b 00 00 \tmovzbl 0xbb8(%rax),%eax\n   1b723:\t84 c0                \ttest   %al,%al\n   1b725:\t74 39                \tje     1b760 <schema_Bridge_to_json+0x3d3>\n   1b727:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b72b:\t8b 80 b4 0b 00 00    \tmov    0xbb4(%rax),%eax\n   1b731:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b735:\t48 8d ba 71 02 00 00 \tlea    0x271(%rdx),%rdi\n   1b73c:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b740:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b744:\t49 89 c8             \tmov    %rcx,%r8\n   1b747:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b74e <schema_Bridge_to_json+0x3c1>\n   1b74e:\t89 c6                \tmov    %eax,%esi\n   1b750:\te8 00 00 00 00       \tcallq  1b755 <schema_Bridge_to_json+0x3c8>\n   1b755:\t83 f0 01             \txor    $0x1,%eax\n   1b758:\t84 c0                \ttest   %al,%al\n   1b75a:\t0f 85 81 05 00 00    \tjne    1bce1 <schema_Bridge_to_json+0x954>\n   1b760:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b764:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b768:\t83 f0 01             \txor    $0x1,%eax\n   1b76b:\t84 c0                \ttest   %al,%al\n   1b76d:\t75 0f                \tjne    1b77e <schema_Bridge_to_json+0x3f1>\n   1b76f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b773:\t0f b6 80 00 15 00 00 \tmovzbl 0x1500(%rax),%eax\n   1b77a:\t84 c0                \ttest   %al,%al\n   1b77c:\t74 39                \tje     1b7b7 <schema_Bridge_to_json+0x42a>\n   1b77e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b782:\t8b 80 fc 14 00 00    \tmov    0x14fc(%rax),%eax\n   1b788:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b78c:\t48 8d ba ba 0b 00 00 \tlea    0xbba(%rdx),%rdi\n   1b793:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b797:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b79b:\t49 89 c8             \tmov    %rcx,%r8\n   1b79e:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b7a5 <schema_Bridge_to_json+0x418>\n   1b7a5:\t89 c6                \tmov    %eax,%esi\n   1b7a7:\te8 00 00 00 00       \tcallq  1b7ac <schema_Bridge_to_json+0x41f>\n   1b7ac:\t83 f0 01             \txor    $0x1,%eax\n   1b7af:\t84 c0                \ttest   %al,%al\n   1b7b1:\t0f 85 2d 05 00 00    \tjne    1bce4 <schema_Bridge_to_json+0x957>\n   1b7b7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b7bb:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b7bf:\t83 f0 01             \txor    $0x1,%eax\n   1b7c2:\t84 c0                \ttest   %al,%al\n   1b7c4:\t75 0f                \tjne    1b7d5 <schema_Bridge_to_json+0x448>\n   1b7c6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b7ca:\t0f b6 80 27 15 00 00 \tmovzbl 0x1527(%rax),%eax\n   1b7d1:\t84 c0                \ttest   %al,%al\n   1b7d3:\t74 3d                \tje     1b812 <schema_Bridge_to_json+0x485>\n   1b7d5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b7d9:\t0f b6 80 29 15 00 00 \tmovzbl 0x1529(%rax),%eax\n   1b7e0:\t0f b6 c0             \tmovzbl %al,%eax\n   1b7e3:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b7e7:\t48 8d ba 02 15 00 00 \tlea    0x1502(%rdx),%rdi\n   1b7ee:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b7f2:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b7f6:\t49 89 c8             \tmov    %rcx,%r8\n   1b7f9:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b800 <schema_Bridge_to_json+0x473>\n   1b800:\t89 c6                \tmov    %eax,%esi\n   1b802:\te8 00 00 00 00       \tcallq  1b807 <schema_Bridge_to_json+0x47a>\n   1b807:\t83 f0 01             \txor    $0x1,%eax\n   1b80a:\t84 c0                \ttest   %al,%al\n   1b80c:\t0f 85 d5 04 00 00    \tjne    1bce7 <schema_Bridge_to_json+0x95a>\n   1b812:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b816:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b81a:\t83 f0 01             \txor    $0x1,%eax\n   1b81d:\t84 c0                \ttest   %al,%al\n   1b81f:\t75 0f                \tjne    1b830 <schema_Bridge_to_json+0x4a3>\n   1b821:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b825:\t0f b6 80 4f 15 00 00 \tmovzbl 0x154f(%rax),%eax\n   1b82c:\t84 c0                \ttest   %al,%al\n   1b82e:\t74 3d                \tje     1b86d <schema_Bridge_to_json+0x4e0>\n   1b830:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b834:\t0f b6 80 51 15 00 00 \tmovzbl 0x1551(%rax),%eax\n   1b83b:\t0f b6 c0             \tmovzbl %al,%eax\n   1b83e:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b842:\t48 8d ba 2a 15 00 00 \tlea    0x152a(%rdx),%rdi\n   1b849:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b84d:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b851:\t49 89 c8             \tmov    %rcx,%r8\n   1b854:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b85b <schema_Bridge_to_json+0x4ce>\n   1b85b:\t89 c6                \tmov    %eax,%esi\n   1b85d:\te8 00 00 00 00       \tcallq  1b862 <schema_Bridge_to_json+0x4d5>\n   1b862:\t83 f0 01             \txor    $0x1,%eax\n   1b865:\t84 c0                \ttest   %al,%al\n   1b867:\t0f 85 7d 04 00 00    \tjne    1bcea <schema_Bridge_to_json+0x95d>\n   1b86d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b871:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b875:\t83 f0 01             \txor    $0x1,%eax\n   1b878:\t84 c0                \ttest   %al,%al\n   1b87a:\t75 0f                \tjne    1b88b <schema_Bridge_to_json+0x4fe>\n   1b87c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b880:\t0f b6 80 77 15 00 00 \tmovzbl 0x1577(%rax),%eax\n   1b887:\t84 c0                \ttest   %al,%al\n   1b889:\t74 3d                \tje     1b8c8 <schema_Bridge_to_json+0x53b>\n   1b88b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b88f:\t0f b6 80 79 15 00 00 \tmovzbl 0x1579(%rax),%eax\n   1b896:\t0f b6 c0             \tmovzbl %al,%eax\n   1b899:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b89d:\t48 8d ba 52 15 00 00 \tlea    0x1552(%rdx),%rdi\n   1b8a4:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b8a8:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b8ac:\t49 89 c8             \tmov    %rcx,%r8\n   1b8af:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b8b6 <schema_Bridge_to_json+0x529>\n   1b8b6:\t89 c6                \tmov    %eax,%esi\n   1b8b8:\te8 00 00 00 00       \tcallq  1b8bd <schema_Bridge_to_json+0x530>\n   1b8bd:\t83 f0 01             \txor    $0x1,%eax\n   1b8c0:\t84 c0                \ttest   %al,%al\n   1b8c2:\t0f 85 25 04 00 00    \tjne    1bced <schema_Bridge_to_json+0x960>\n   1b8c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b8cc:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b8d0:\t83 f0 01             \txor    $0x1,%eax\n   1b8d3:\t84 c0                \ttest   %al,%al\n   1b8d5:\t75 0f                \tjne    1b8e6 <schema_Bridge_to_json+0x559>\n   1b8d7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b8db:\t0f b6 80 c0 1e 00 00 \tmovzbl 0x1ec0(%rax),%eax\n   1b8e2:\t84 c0                \ttest   %al,%al\n   1b8e4:\t74 39                \tje     1b91f <schema_Bridge_to_json+0x592>\n   1b8e6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b8ea:\t8b 80 bc 1e 00 00    \tmov    0x1ebc(%rax),%eax\n   1b8f0:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b8f4:\t48 8d ba 7a 15 00 00 \tlea    0x157a(%rdx),%rdi\n   1b8fb:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b8ff:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b903:\t49 89 c8             \tmov    %rcx,%r8\n   1b906:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1b90d <schema_Bridge_to_json+0x580>\n   1b90d:\t89 c6                \tmov    %eax,%esi\n   1b90f:\te8 00 00 00 00       \tcallq  1b914 <schema_Bridge_to_json+0x587>\n   1b914:\t83 f0 01             \txor    $0x1,%eax\n   1b917:\t84 c0                \ttest   %al,%al\n   1b919:\t0f 85 d1 03 00 00    \tjne    1bcf0 <schema_Bridge_to_json+0x963>\n   1b91f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b923:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b927:\t83 f0 01             \txor    $0x1,%eax\n   1b92a:\t84 c0                \ttest   %al,%al\n   1b92c:\t75 0f                \tjne    1b93d <schema_Bridge_to_json+0x5b0>\n   1b92e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b932:\t0f b6 80 08 2f 00 00 \tmovzbl 0x2f08(%rax),%eax\n   1b939:\t84 c0                \ttest   %al,%al\n   1b93b:\t74 41                \tje     1b97e <schema_Bridge_to_json+0x5f1>\n   1b93d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b941:\t8b 80 04 2f 00 00    \tmov    0x2f04(%rax),%eax\n   1b947:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b94b:\t48 8d ba c2 1e 00 00 \tlea    0x1ec2(%rdx),%rdi\n   1b952:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b956:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b95a:\t49 89 c9             \tmov    %rcx,%r9\n   1b95d:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 1b964 <schema_Bridge_to_json+0x5d7>\n   1b964:\t48 89 d1             \tmov    %rdx,%rcx\n   1b967:\t89 c2                \tmov    %eax,%edx\n   1b969:\tbe 40 00 00 00       \tmov    $0x40,%esi\n   1b96e:\te8 00 00 00 00       \tcallq  1b973 <schema_Bridge_to_json+0x5e6>\n   1b973:\t83 f0 01             \txor    $0x1,%eax\n   1b976:\t84 c0                \ttest   %al,%al\n   1b978:\t0f 85 75 03 00 00    \tjne    1bcf3 <schema_Bridge_to_json+0x966>\n   1b97e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b982:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b986:\t83 f0 01             \txor    $0x1,%eax\n   1b989:\t84 c0                \ttest   %al,%al\n   1b98b:\t75 0f                \tjne    1b99c <schema_Bridge_to_json+0x60f>\n   1b98d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b991:\t0f b6 80 8b 2f 00 00 \tmovzbl 0x2f8b(%rax),%eax\n   1b998:\t84 c0                \ttest   %al,%al\n   1b99a:\t74 45                \tje     1b9e1 <schema_Bridge_to_json+0x654>\n   1b99c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b9a0:\t0f b6 80 8d 2f 00 00 \tmovzbl 0x2f8d(%rax),%eax\n   1b9a7:\t0f b6 c0             \tmovzbl %al,%eax\n   1b9aa:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1b9ae:\t48 8d ba 0a 2f 00 00 \tlea    0x2f0a(%rdx),%rdi\n   1b9b5:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1b9b9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1b9bd:\t49 89 c9             \tmov    %rcx,%r9\n   1b9c0:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 1b9c7 <schema_Bridge_to_json+0x63a>\n   1b9c7:\t48 89 d1             \tmov    %rdx,%rcx\n   1b9ca:\t89 c2                \tmov    %eax,%edx\n   1b9cc:\tbe 81 00 00 00       \tmov    $0x81,%esi\n   1b9d1:\te8 00 00 00 00       \tcallq  1b9d6 <schema_Bridge_to_json+0x649>\n   1b9d6:\t83 f0 01             \txor    $0x1,%eax\n   1b9d9:\t84 c0                \ttest   %al,%al\n   1b9db:\t0f 85 15 03 00 00    \tjne    1bcf6 <schema_Bridge_to_json+0x969>\n   1b9e1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b9e5:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1b9e9:\t83 f0 01             \txor    $0x1,%eax\n   1b9ec:\t84 c0                \ttest   %al,%al\n   1b9ee:\t75 0f                \tjne    1b9ff <schema_Bridge_to_json+0x672>\n   1b9f0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1b9f4:\t0f b6 80 14 50 00 00 \tmovzbl 0x5014(%rax),%eax\n   1b9fb:\t84 c0                \ttest   %al,%al\n   1b9fd:\t74 55                \tje     1ba54 <schema_Bridge_to_json+0x6c7>\n   1b9ff:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1ba03:\t8b b0 10 50 00 00    \tmov    0x5010(%rax),%esi\n   1ba09:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1ba0d:\t48 8d 90 8e 2f 00 00 \tlea    0x2f8e(%rax),%rdx\n   1ba14:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1ba18:\t48 05 ce 3f 00 00    \tadd    $0x3fce,%rax\n   1ba1e:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n   1ba22:\tff 75 e0             \tpushq  -0x20(%rbp)\n   1ba25:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1ba2c <schema_Bridge_to_json+0x69f>\n   1ba2c:\t51                   \tpush   %rcx\n   1ba2d:\t49 89 f9             \tmov    %rdi,%r9\n   1ba30:\t41 89 f0             \tmov    %esi,%r8d\n   1ba33:\tb9 40 00 00 00       \tmov    $0x40,%ecx\n   1ba38:\tbe 40 00 00 00       \tmov    $0x40,%esi\n   1ba3d:\t48 89 c7             \tmov    %rax,%rdi\n   1ba40:\te8 00 00 00 00       \tcallq  1ba45 <schema_Bridge_to_json+0x6b8>\n   1ba45:\t48 83 c4 10          \tadd    $0x10,%rsp\n   1ba49:\t83 f0 01             \txor    $0x1,%eax\n   1ba4c:\t84 c0                \ttest   %al,%al\n   1ba4e:\t0f 85 a5 02 00 00    \tjne    1bcf9 <schema_Bridge_to_json+0x96c>\n   1ba54:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1ba58:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1ba5c:\t83 f0 01             \txor    $0x1,%eax\n   1ba5f:\t84 c0                \ttest   %al,%al\n   1ba61:\t75 0f                \tjne    1ba72 <schema_Bridge_to_json+0x6e5>\n   1ba63:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1ba67:\t0f b6 80 9c 70 00 00 \tmovzbl 0x709c(%rax),%eax\n   1ba6e:\t84 c0                \ttest   %al,%al\n   1ba70:\t74 55                \tje     1bac7 <schema_Bridge_to_json+0x73a>\n   1ba72:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1ba76:\t8b b0 98 70 00 00    \tmov    0x7098(%rax),%esi\n   1ba7c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1ba80:\t48 8d 90 16 50 00 00 \tlea    0x5016(%rax),%rdx\n   1ba87:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1ba8b:\t48 05 56 60 00 00    \tadd    $0x6056,%rax\n   1ba91:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n   1ba95:\tff 75 e0             \tpushq  -0x20(%rbp)\n   1ba98:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1ba9f <schema_Bridge_to_json+0x712>\n   1ba9f:\t51                   \tpush   %rcx\n   1baa0:\t49 89 f9             \tmov    %rdi,%r9\n   1baa3:\t41 89 f0             \tmov    %esi,%r8d\n   1baa6:\tb9 40 00 00 00       \tmov    $0x40,%ecx\n   1baab:\tbe 40 00 00 00       \tmov    $0x40,%esi\n   1bab0:\t48 89 c7             \tmov    %rax,%rdi\n   1bab3:\te8 00 00 00 00       \tcallq  1bab8 <schema_Bridge_to_json+0x72b>\n   1bab8:\t48 83 c4 10          \tadd    $0x10,%rsp\n   1babc:\t83 f0 01             \txor    $0x1,%eax\n   1babf:\t84 c0                \ttest   %al,%al\n   1bac1:\t0f 85 35 02 00 00    \tjne    1bcfc <schema_Bridge_to_json+0x96f>\n   1bac7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bacb:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1bacf:\t83 f0 01             \txor    $0x1,%eax\n   1bad2:\t84 c0                \ttest   %al,%al\n   1bad4:\t75 0f                \tjne    1bae5 <schema_Bridge_to_json+0x758>\n   1bad6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bada:\t0f b6 80 24 91 00 00 \tmovzbl 0x9124(%rax),%eax\n   1bae1:\t84 c0                \ttest   %al,%al\n   1bae3:\t74 55                \tje     1bb3a <schema_Bridge_to_json+0x7ad>\n   1bae5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bae9:\t8b b0 20 91 00 00    \tmov    0x9120(%rax),%esi\n   1baef:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1baf3:\t48 8d 90 9e 70 00 00 \tlea    0x709e(%rax),%rdx\n   1bafa:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bafe:\t48 05 de 80 00 00    \tadd    $0x80de,%rax\n   1bb04:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n   1bb08:\tff 75 e0             \tpushq  -0x20(%rbp)\n   1bb0b:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1bb12 <schema_Bridge_to_json+0x785>\n   1bb12:\t51                   \tpush   %rcx\n   1bb13:\t49 89 f9             \tmov    %rdi,%r9\n   1bb16:\t41 89 f0             \tmov    %esi,%r8d\n   1bb19:\tb9 40 00 00 00       \tmov    $0x40,%ecx\n   1bb1e:\tbe 40 00 00 00       \tmov    $0x40,%esi\n   1bb23:\t48 89 c7             \tmov    %rax,%rdi\n   1bb26:\te8 00 00 00 00       \tcallq  1bb2b <schema_Bridge_to_json+0x79e>\n   1bb2b:\t48 83 c4 10          \tadd    $0x10,%rsp\n   1bb2f:\t83 f0 01             \txor    $0x1,%eax\n   1bb32:\t84 c0                \ttest   %al,%al\n   1bb34:\t0f 85 c5 01 00 00    \tjne    1bcff <schema_Bridge_to_json+0x972>\n   1bb3a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bb3e:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1bb42:\t83 f0 01             \txor    $0x1,%eax\n   1bb45:\t84 c0                \ttest   %al,%al\n   1bb47:\t75 0f                \tjne    1bb58 <schema_Bridge_to_json+0x7cb>\n   1bb49:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bb4d:\t0f b6 80 ac b1 00 00 \tmovzbl 0xb1ac(%rax),%eax\n   1bb54:\t84 c0                \ttest   %al,%al\n   1bb56:\t74 55                \tje     1bbad <schema_Bridge_to_json+0x820>\n   1bb58:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bb5c:\t8b b0 a8 b1 00 00    \tmov    0xb1a8(%rax),%esi\n   1bb62:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bb66:\t48 8d 90 26 91 00 00 \tlea    0x9126(%rax),%rdx\n   1bb6d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bb71:\t48 05 66 a1 00 00    \tadd    $0xa166,%rax\n   1bb77:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n   1bb7b:\tff 75 e0             \tpushq  -0x20(%rbp)\n   1bb7e:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1bb85 <schema_Bridge_to_json+0x7f8>\n   1bb85:\t51                   \tpush   %rcx\n   1bb86:\t49 89 f9             \tmov    %rdi,%r9\n   1bb89:\t41 89 f0             \tmov    %esi,%r8d\n   1bb8c:\tb9 40 00 00 00       \tmov    $0x40,%ecx\n   1bb91:\tbe 40 00 00 00       \tmov    $0x40,%esi\n   1bb96:\t48 89 c7             \tmov    %rax,%rdi\n   1bb99:\te8 00 00 00 00       \tcallq  1bb9e <schema_Bridge_to_json+0x811>\n   1bb9e:\t48 83 c4 10          \tadd    $0x10,%rsp\n   1bba2:\t83 f0 01             \txor    $0x1,%eax\n   1bba5:\t84 c0                \ttest   %al,%al\n   1bba7:\t0f 85 55 01 00 00    \tjne    1bd02 <schema_Bridge_to_json+0x975>\n   1bbad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bbb1:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1bbb5:\t83 f0 01             \txor    $0x1,%eax\n   1bbb8:\t84 c0                \ttest   %al,%al\n   1bbba:\t75 0f                \tjne    1bbcb <schema_Bridge_to_json+0x83e>\n   1bbbc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bbc0:\t0f b6 80 b4 f1 00 00 \tmovzbl 0xf1b4(%rax),%eax\n   1bbc7:\t84 c0                \ttest   %al,%al\n   1bbc9:\t74 39                \tje     1bc04 <schema_Bridge_to_json+0x877>\n   1bbcb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bbcf:\t8b 80 b0 f1 00 00    \tmov    0xf1b0(%rax),%eax\n   1bbd5:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1bbd9:\t48 8d ba b0 b1 00 00 \tlea    0xb1b0(%rdx),%rdi\n   1bbe0:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1bbe4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1bbe8:\t49 89 c8             \tmov    %rcx,%r8\n   1bbeb:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1bbf2 <schema_Bridge_to_json+0x865>\n   1bbf2:\t89 c6                \tmov    %eax,%esi\n   1bbf4:\te8 00 00 00 00       \tcallq  1bbf9 <schema_Bridge_to_json+0x86c>\n   1bbf9:\t83 f0 01             \txor    $0x1,%eax\n   1bbfc:\t84 c0                \ttest   %al,%al\n   1bbfe:\t0f 85 01 01 00 00    \tjne    1bd05 <schema_Bridge_to_json+0x978>\n   1bc04:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bc08:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1bc0c:\t83 f0 01             \txor    $0x1,%eax\n   1bc0f:\t84 c0                \ttest   %al,%al\n   1bc11:\t75 0f                \tjne    1bc22 <schema_Bridge_to_json+0x895>\n   1bc13:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bc17:\t0f b6 80 fc fb 00 00 \tmovzbl 0xfbfc(%rax),%eax\n   1bc1e:\t84 c0                \ttest   %al,%al\n   1bc20:\t74 47                \tje     1bc69 <schema_Bridge_to_json+0x8dc>\n   1bc22:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bc26:\t8b 80 f8 fb 00 00    \tmov    0xfbf8(%rax),%eax\n   1bc2c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1bc30:\t48 8d b2 b6 f1 00 00 \tlea    0xf1b6(%rdx),%rsi\n   1bc37:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1bc3b:\t48 8d ba f8 fa 00 00 \tlea    0xfaf8(%rdx),%rdi\n   1bc42:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1bc46:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1bc4a:\t49 89 c9             \tmov    %rcx,%r9\n   1bc4d:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 1bc54 <schema_Bridge_to_json+0x8c7>\n   1bc54:\t48 89 d1             \tmov    %rdx,%rcx\n   1bc57:\t89 c2                \tmov    %eax,%edx\n   1bc59:\te8 00 00 00 00       \tcallq  1bc5e <schema_Bridge_to_json+0x8d1>\n   1bc5e:\t83 f0 01             \txor    $0x1,%eax\n   1bc61:\t84 c0                \ttest   %al,%al\n   1bc63:\t0f 85 9f 00 00 00    \tjne    1bd08 <schema_Bridge_to_json+0x97b>\n   1bc69:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bc6d:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n   1bc71:\t83 f0 01             \txor    $0x1,%eax\n   1bc74:\t84 c0                \ttest   %al,%al\n   1bc76:\t75 0f                \tjne    1bc87 <schema_Bridge_to_json+0x8fa>\n   1bc78:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bc7c:\t0f b6 80 23 fc 00 00 \tmovzbl 0xfc23(%rax),%eax\n   1bc83:\t84 c0                \ttest   %al,%al\n   1bc85:\t74 39                \tje     1bcc0 <schema_Bridge_to_json+0x933>\n   1bc87:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1bc8b:\t0f b6 80 25 fc 00 00 \tmovzbl 0xfc25(%rax),%eax\n   1bc92:\t0f b6 c0             \tmovzbl %al,%eax\n   1bc95:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1bc99:\t48 8d ba fe fb 00 00 \tlea    0xfbfe(%rdx),%rdi\n   1bca0:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   1bca4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   1bca8:\t49 89 c8             \tmov    %rcx,%r8\n   1bcab:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1bcb2 <schema_Bridge_to_json+0x925>\n   1bcb2:\t89 c6                \tmov    %eax,%esi\n   1bcb4:\te8 00 00 00 00       \tcallq  1bcb9 <schema_Bridge_to_json+0x92c>\n   1bcb9:\t83 f0 01             \txor    $0x1,%eax\n   1bcbc:\t84 c0                \ttest   %al,%al\n   1bcbe:\t75 4b                \tjne    1bd0b <schema_Bridge_to_json+0x97e>\n   1bcc0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   1bcc4:\teb 5e                \tjmp    1bd24 <schema_Bridge_to_json+0x997>\n   1bcc6:\t90                   \tnop\n   1bcc7:\teb 43                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcc9:\t90                   \tnop\n   1bcca:\teb 40                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bccc:\t90                   \tnop\n   1bccd:\teb 3d                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bccf:\t90                   \tnop\n   1bcd0:\teb 3a                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcd2:\t90                   \tnop\n   1bcd3:\teb 37                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcd5:\t90                   \tnop\n   1bcd6:\teb 34                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcd8:\t90                   \tnop\n   1bcd9:\teb 31                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcdb:\t90                   \tnop\n   1bcdc:\teb 2e                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcde:\t90                   \tnop\n   1bcdf:\teb 2b                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bce1:\t90                   \tnop\n   1bce2:\teb 28                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bce4:\t90                   \tnop\n   1bce5:\teb 25                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bce7:\t90                   \tnop\n   1bce8:\teb 22                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcea:\t90                   \tnop\n   1bceb:\teb 1f                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bced:\t90                   \tnop\n   1bcee:\teb 1c                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcf0:\t90                   \tnop\n   1bcf1:\teb 19                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcf3:\t90                   \tnop\n   1bcf4:\teb 16                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcf6:\t90                   \tnop\n   1bcf7:\teb 13                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcf9:\t90                   \tnop\n   1bcfa:\teb 10                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcfc:\t90                   \tnop\n   1bcfd:\teb 0d                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bcff:\t90                   \tnop\n   1bd00:\teb 0a                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bd02:\t90                   \tnop\n   1bd03:\teb 07                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bd05:\t90                   \tnop\n   1bd06:\teb 04                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bd08:\t90                   \tnop\n   1bd09:\teb 01                \tjmp    1bd0c <schema_Bridge_to_json+0x97f>\n   1bd0b:\t90                   \tnop\n   1bd0c:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n   1bd11:\t74 0c                \tje     1bd1f <schema_Bridge_to_json+0x992>\n   1bd13:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   1bd17:\t48 89 c7             \tmov    %rax,%rdi\n   1bd1a:\te8 e1 42 fe ff       \tcallq  0 <json_decref>\n   1bd1f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   1bd24:\tc9                   \tleaveq \n   1bd25:\tc3                   \tretq   ", "code_s": "__int64 __fastcall schema_Bridge_to_json(__int64 a1, char *a2) {\n  __int64 v3;\n  v3 = json_object();\n  if (v3) {\n    if (*(_BYTE *)(a1 + Number))\n      mlog(Number L, (unsigned int)MODULE_ID, String, String);\n    if ((*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             a1 + Number, *(unsigned __int8 *)(a1 + Number), v3, String, a2) ==\n             Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             a1 + Number, *(unsigned __int8 *)(a1 + Number), v3, String, a2) ==\n             Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_string_to_json(a1 + Number, Number L, v3,\n                                                 String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_string_to_json(a1 + Number, Number L, v3,\n                                                 String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_string_to_json(a1 + Number, Number L, v3,\n                                                 String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_string_q_to_json(\n             a1 + Number, Number L, *(unsigned __int8 *)(a1 + Number), v3,\n             String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_bool_to_json(\n             *(unsigned __int8 *)(a1 + Number), v3, String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_bool_to_json(\n             *(unsigned __int8 *)(a1 + Number), v3, String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_bool_to_json(\n             *(unsigned __int8 *)(a1 + Number), v3, String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_set_uuid_to_json(\n             a1 + Number, *(unsigned int *)(a1 + Number), v3, String, a2) ==\n             Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_set_uuid_to_json(\n             a1 + Number, *(unsigned int *)(a1 + Number), v3, String, a2) ==\n             Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             a1 + Number, *(unsigned __int8 *)(a1 + Number), v3, String, a2) ==\n             Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             a1 + Number, *(unsigned __int8 *)(a1 + Number), v3, String, a2) ==\n             Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             a1 + Number, *(unsigned __int8 *)(a1 + Number), v3, String, a2) ==\n             Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_set_uuid_to_json(\n             a1 + Number, *(unsigned int *)(a1 + Number), v3, String, a2) ==\n             Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_set_string_to_json(\n             a1 + Number, Number L, *(unsigned int *)(a1 + Number), v3, String,\n             a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_string_q_to_json(\n             a1 + Number, Number L, *(unsigned __int8 *)(a1 + Number), v3,\n             String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_smap_string_to_json(\n             a1 + Number, Number L, a1 + Number, Number L,\n             *(unsigned int *)(a1 + Number), v3, String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_smap_string_to_json(\n             a1 + Number, Number L, a1 + Number, Number L,\n             *(unsigned int *)(a1 + Number), v3, String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_smap_string_to_json(\n             a1 + Number, Number L, a1 + Number, Number L,\n             *(unsigned int *)(a1 + Number), v3, String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_smap_string_to_json(\n             a1 + Number, Number L, a1 + Number, Number L,\n             *(unsigned int *)(a1 + Number), v3, String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_set_int_to_json(\n             a1 + Number, *(unsigned int *)(a1 + Number), v3, String, a2) ==\n             Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_dmap_uuid_to_json(\n             a1 + Number, a1 + Number, *(unsigned int *)(a1 + Number), v3,\n             String, a2) == Number) &&\n        (*(_BYTE *)(a1 + Number) == Number && !*(_BYTE *)(a1 + Number) ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             a1 + Number, *(unsigned __int8 *)(a1 + Number), v3, String, a2) ==\n             Number)) {\n      return v3;\n    }\n  } else if (a2) {\n    snprintf(a2, Number, String, String);\n  }\n  if (v3)\n    json_decref(v3);\n  return Number L;\n}", "code_t": "json_t_0 *__cdecl schema_Bridge_to_json(schema_Bridge *<span class=\"supfact\">in</span>,\n                                        char *<span class=\"supfact\">err</span>) {\n  json_t_0 *<span class=\"supfact\">js</span>;\n  <span class=\"supfact\">js</span> = (json_t_0 *)json_object();\n  if (<span class=\"supfact\">js</span>) {\n    if (<span class=\"supfact\">in</span>->_partial_update)\n      mlog(Number L, (unsigned int)MODULE_ID, String, String);\n    if ((<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->_uuid_present ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             &<span class=\"supfact\">in</span>->_uuid, <span class=\"supfact\">in</span>->_uuid_exists,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->_version_present ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             &<span class=\"supfact\">in</span>->_version, <span class=\"supfact\">in</span>->_version_exists,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->name_present ||\n         (unsigned __int8)pjs_ovs_string_to_json(\n             <span class=\"supfact\">in</span>->name, Number L, <span class=\"supfact\">js</span>, String,\n             <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->datapath_type_present ||\n         (unsigned __int8)pjs_ovs_string_to_json(\n             <span class=\"supfact\">in</span>->datapath_type, Number L, <span class=\"supfact\">js</span>,\n             String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->datapath_version_present ||\n         (unsigned __int8)pjs_ovs_string_to_json(\n             <span class=\"supfact\">in</span>->datapath_version, Number L, <span class=\"supfact\">js</span>,\n             String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->datapath_id_present ||\n         (unsigned __int8)pjs_ovs_string_q_to_json(\n             <span class=\"supfact\">in</span>->datapath_id, Number L,\n             <span class=\"supfact\">in</span>->datapath_id_exists, <span class=\"supfact\">js</span>, String,\n             <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->stp_enable_present ||\n         (unsigned __int8)pjs_ovs_bool_to_json(\n             <span class=\"supfact\">in</span>->stp_enable, <span class=\"supfact\">js</span>, String,\n             <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->rstp_enable_present ||\n         (unsigned __int8)pjs_ovs_bool_to_json(\n             <span class=\"supfact\">in</span>->rstp_enable, <span class=\"supfact\">js</span>, String,\n             <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->mcast_snooping_enable_present ||\n         (unsigned __int8)pjs_ovs_bool_to_json(\n             <span class=\"supfact\">in</span>->mcast_snooping_enable, <span class=\"supfact\">js</span>,\n             String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->ports_present ||\n         (unsigned __int8)pjs_ovs_set_uuid_to_json(\n             <span class=\"supfact\">in</span>->ports,\n             (unsigned int)<span class=\"supfact\">in</span>->ports_len, <span class=\"supfact\">js</span>,\n             String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->mirrors_present ||\n         (unsigned __int8)pjs_ovs_set_uuid_to_json(\n             <span class=\"supfact\">in</span>->mirrors,\n             (unsigned int)<span class=\"supfact\">in</span>->mirrors_len, <span class=\"supfact\">js</span>,\n             String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->netflow_present ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             &<span class=\"supfact\">in</span>->netflow, <span class=\"supfact\">in</span>->netflow_exists,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->sflow_present ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             &<span class=\"supfact\">in</span>->sflow, <span class=\"supfact\">in</span>->sflow_exists,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->ipfix_present ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             &<span class=\"supfact\">in</span>->ipfix, <span class=\"supfact\">in</span>->ipfix_exists,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->controller_present ||\n         (unsigned __int8)pjs_ovs_set_uuid_to_json(\n             <span class=\"supfact\">in</span>->controller,\n             (unsigned int)<span class=\"supfact\">in</span>->controller_len,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->protocols_present ||\n         (unsigned __int8)pjs_ovs_set_string_to_json(\n             <span class=\"supfact\">in</span>->protocols, Number L,\n             (unsigned int)<span class=\"supfact\">in</span>->protocols_len,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->fail_mode_present ||\n         (unsigned __int8)pjs_ovs_string_q_to_json(\n             <span class=\"supfact\">in</span>->fail_mode, Number L,\n             <span class=\"supfact\">in</span>->fail_mode_exists, <span class=\"supfact\">js</span>, String,\n             <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->status_present ||\n         (unsigned __int8)pjs_ovs_smap_string_to_json(\n             <span class=\"supfact\">in</span>->status_keys, Number L,\n             <span class=\"supfact\">in</span>->status, Number L,\n             (unsigned int)<span class=\"supfact\">in</span>->status_len, <span class=\"supfact\">js</span>,\n             String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->rstp_status_present ||\n         (unsigned __int8)pjs_ovs_smap_string_to_json(\n             <span class=\"supfact\">in</span>->rstp_status_keys, Number L,\n             <span class=\"supfact\">in</span>->rstp_status, Number L,\n             (unsigned int)<span class=\"supfact\">in</span>->rstp_status_len,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->other_config_present ||\n         (unsigned __int8)pjs_ovs_smap_string_to_json(\n             <span class=\"supfact\">in</span>->other_config_keys, Number L,\n             <span class=\"supfact\">in</span>->other_config, Number L,\n             (unsigned int)<span class=\"supfact\">in</span>->other_config_len,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->external_ids_present ||\n         (unsigned __int8)pjs_ovs_smap_string_to_json(\n             <span class=\"supfact\">in</span>->external_ids_keys, Number L,\n             <span class=\"supfact\">in</span>->external_ids, Number L,\n             (unsigned int)<span class=\"supfact\">in</span>->external_ids_len,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->flood_vlans_present ||\n         (unsigned __int8)pjs_ovs_set_int_to_json(\n             <span class=\"supfact\">in</span>->flood_vlans,\n             (unsigned int)<span class=\"supfact\">in</span>->flood_vlans_len,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->flow_tables_present ||\n         (unsigned __int8)pjs_ovs_dmap_uuid_to_json(\n             <span class=\"supfact\">in</span>->flow_tables_keys,\n             <span class=\"supfact\">in</span>->flow_tables,\n             (unsigned int)<span class=\"supfact\">in</span>->flow_tables_len,\n             <span class=\"supfact\">js</span>, String, <span class=\"supfact\">err</span>) == Number) &&\n        (<span class=\"supfact\">in</span>->_partial_update &&\n             !<span class=\"supfact\">in</span>->auto_attach_present ||\n         (unsigned __int8)pjs_ovs_uuid_q_to_json(\n             &<span class=\"supfact\">in</span>->auto_attach,\n             <span class=\"supfact\">in</span>->auto_attach_exists, <span class=\"supfact\">js</span>, String,\n             <span class=\"supfact\">err</span>) == Number)) {\n      return <span class=\"supfact\">js</span>;\n    }\n  } else if (<span class=\"supfact\">err</span>) {\n    snprintf(<span class=\"supfact\">err</span>, Number, String, String);\n  }\n  if (<span class=\"supfact\">js</span>)\n    json_decref(<span class=\"supfact\">js</span>);\n  return Number L;\n}", "var": [{"name": "a1", "type": "schema_Bridge *", "pred_name": "in", "ref_name": "in", "ref_type": "schema_Bridge *"}, {"name": "a2", "type": "char *", "pred_name": "err", "ref_name": "err", "ref_type": "char *"}, {"name": "v3", "type": "json_t_0 *", "pred_name": "js", "ref_name": "js", "ref_type": "json_t_0 *"}], "body_in_train": false}, {"repo_owner": "isDerek", "repo_name": "BTC-Device", "path": "isDerek/BTC-Device/9eb5bdb0143a63b31132ea31d83410eefa0b801b31f29f5ffc43fd093e6ca1ae", "path_in_repo": "isDerek/BTC-Device/BTC_APP/middleware/multicore/erpc/Debug/Linux/erpcsniffer/obj/erpcgen/src/types/Type.o", "objdump": "", "code_s": "_QWORD *__fastcall std _Vector_base<erpcgen Annotation *>\n    _Vector_impl_data _Vector_impl_data(_QWORD *a1) {\n  _QWORD *result;\n  *a1 = Number L;\n  a1[Number] = Number L;\n  result = a1;\n  a1[Number] = Number L;\n  return result;\n}", "code_t": "void __cdecl std _Vector_base<erpcgen Annotation *> _Vector_impl_data\n_Vector_impl_data(std _Vector_base<erpcgen Annotation *> _Vector_impl_data\n                      *const <span class=\"supfact\">this</span>) {\n  <span class=\"supfact\">this</span>->_M_start = Number L;\n  <span class=\"supfact\">this</span>->_M_finish = Number L;\n  <span class=\"supfact\">this</span>->_M_end_of_storage = Number L;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "std::_Vector_base<erpcgen::Annotation*>::_Vector_impl_data *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "dpwright", "repo_name": "new-computer-setup", "path": "dpwright/new-computer-setup/58bfc502109cb701f2885a7a77fbad1542fce963ac82eca03360061e1cfb5572", "path_in_repo": "dpwright/new-computer-setup//openssl/crypto/bio/bio_cb.o", "objdump": "0000000000000000 <BIO_debug_callback>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec 60 01 00 00 \tsub    $0x160,%rsp\n   b:\t48 89 bd c8 fe ff ff \tmov    %rdi,-0x138(%rbp)\n  12:\t89 b5 c4 fe ff ff    \tmov    %esi,-0x13c(%rbp)\n  18:\t48 89 95 b8 fe ff ff \tmov    %rdx,-0x148(%rbp)\n  1f:\t89 8d c0 fe ff ff    \tmov    %ecx,-0x140(%rbp)\n  25:\t4c 89 85 b0 fe ff ff \tmov    %r8,-0x150(%rbp)\n  2c:\t4c 89 8d a8 fe ff ff \tmov    %r9,-0x158(%rbp)\n  33:\t48 c7 45 f8 01 00 00 \tmovq   $0x1,-0x8(%rbp)\n  3a:\t00 \n  3b:\t8b 85 c4 fe ff ff    \tmov    -0x13c(%rbp),%eax\n  41:\t25 80 00 00 00       \tand    $0x80,%eax\n  46:\t85 c0                \ttest   %eax,%eax\n  48:\t74 0b                \tje     55 <BIO_debug_callback+0x55>\n  4a:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n  51:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  55:\t48 8b 95 c8 fe ff ff \tmov    -0x138(%rbp),%rdx\n  5c:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n  63:\t48 89 d1             \tmov    %rdx,%rcx\n  66:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 6d <BIO_debug_callback+0x6d>\n  6d:\tbe 00 01 00 00       \tmov    $0x100,%esi\n  72:\t48 89 c7             \tmov    %rax,%rdi\n  75:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  7a:\te8 00 00 00 00       \tcallq  7f <BIO_debug_callback+0x7f>\n  7f:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  82:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  86:\t79 07                \tjns    8f <BIO_debug_callback+0x8f>\n  88:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  8f:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  92:\t48 98                \tcltq   \n  94:\t48 8d 95 d0 fe ff ff \tlea    -0x130(%rbp),%rdx\n  9b:\t48 01 d0             \tadd    %rdx,%rax\n  9e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  a2:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  a5:\t48 98                \tcltq   \n  a7:\tba 00 01 00 00       \tmov    $0x100,%edx\n  ac:\t48 29 c2             \tsub    %rax,%rdx\n  af:\t48 89 d0             \tmov    %rdx,%rax\n  b2:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  b6:\t83 bd c4 fe ff ff 06 \tcmpl   $0x6,-0x13c(%rbp)\n  bd:\t7f 77                \tjg     136 <BIO_debug_callback+0x136>\n  bf:\t83 bd c4 fe ff ff 00 \tcmpl   $0x0,-0x13c(%rbp)\n  c6:\t7f 3b                \tjg     103 <BIO_debug_callback+0x103>\n  c8:\te9 b4 03 00 00       \tjmpq   481 <BIO_debug_callback+0x481>\n  cd:\t8b 85 c4 fe ff ff    \tmov    -0x13c(%rbp),%eax\n  d3:\t2d 82 00 00 00       \tsub    $0x82,%eax\n  d8:\t83 f8 04             \tcmp    $0x4,%eax\n  db:\t0f 87 a0 03 00 00    \tja     481 <BIO_debug_callback+0x481>\n  e1:\t89 c0                \tmov    %eax,%eax\n  e3:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  ea:\t00 \n  eb:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # f2 <BIO_debug_callback+0xf2>\n  f2:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n  f5:\t48 98                \tcltq   \n  f7:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # fe <BIO_debug_callback+0xfe>\n  fe:\t48 01 d0             \tadd    %rdx,%rax\n 101:\tff e0                \tjmpq   *%rax\n 103:\t83 bd c4 fe ff ff 06 \tcmpl   $0x6,-0x13c(%rbp)\n 10a:\t0f 87 71 03 00 00    \tja     481 <BIO_debug_callback+0x481>\n 110:\t8b 85 c4 fe ff ff    \tmov    -0x13c(%rbp),%eax\n 116:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 11d:\t00 \n 11e:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 125 <BIO_debug_callback+0x125>\n 125:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n 128:\t48 98                \tcltq   \n 12a:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 131 <BIO_debug_callback+0x131>\n 131:\t48 01 d0             \tadd    %rdx,%rax\n 134:\tff e0                \tjmpq   *%rax\n 136:\t81 bd c4 fe ff ff 86 \tcmpl   $0x86,-0x13c(%rbp)\n 13d:\t00 00 00 \n 140:\t0f 8f 3b 03 00 00    \tjg     481 <BIO_debug_callback+0x481>\n 146:\t81 bd c4 fe ff ff 82 \tcmpl   $0x82,-0x13c(%rbp)\n 14d:\t00 00 00 \n 150:\t0f 8d 77 ff ff ff    \tjge    cd <BIO_debug_callback+0xcd>\n 156:\te9 26 03 00 00       \tjmpq   481 <BIO_debug_callback+0x481>\n 15b:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 162:\t48 8b 00             \tmov    (%rax),%rax\n 165:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 169:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 16d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 171:\t48 89 d1             \tmov    %rdx,%rcx\n 174:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 17b <BIO_debug_callback+0x17b>\n 17b:\t48 89 c7             \tmov    %rax,%rdi\n 17e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 183:\te8 00 00 00 00       \tcallq  188 <BIO_debug_callback+0x188>\n 188:\te9 19 03 00 00       \tjmpq   4a6 <BIO_debug_callback+0x4a6>\n 18d:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 194:\t48 8b 00             \tmov    (%rax),%rax\n 197:\t8b 00                \tmov    (%rax),%eax\n 199:\t25 00 01 00 00       \tand    $0x100,%eax\n 19e:\t85 c0                \ttest   %eax,%eax\n 1a0:\t74 5d                \tje     1ff <BIO_debug_callback+0x1ff>\n 1a2:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 1a9:\t8b 48 28             \tmov    0x28(%rax),%ecx\n 1ac:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 1b3:\t48 8b 00             \tmov    (%rax),%rax\n 1b6:\t4c 8b 40 08          \tmov    0x8(%rax),%r8\n 1ba:\t8b 85 c0 fe ff ff    \tmov    -0x140(%rbp),%eax\n 1c0:\t48 63 f8             \tmovslq %eax,%rdi\n 1c3:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 1ca:\t8b 50 28             \tmov    0x28(%rax),%edx\n 1cd:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 1d1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1d5:\t48 83 ec 08          \tsub    $0x8,%rsp\n 1d9:\t51                   \tpush   %rcx\n 1da:\t4d 89 c1             \tmov    %r8,%r9\n 1dd:\t49 89 f8             \tmov    %rdi,%r8\n 1e0:\t89 d1                \tmov    %edx,%ecx\n 1e2:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 1e9 <BIO_debug_callback+0x1e9>\n 1e9:\t48 89 c7             \tmov    %rax,%rdi\n 1ec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1f1:\te8 00 00 00 00       \tcallq  1f6 <BIO_debug_callback+0x1f6>\n 1f6:\t48 83 c4 10          \tadd    $0x10,%rsp\n 1fa:\te9 a7 02 00 00       \tjmpq   4a6 <BIO_debug_callback+0x4a6>\n 1ff:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 206:\t48 8b 00             \tmov    (%rax),%rax\n 209:\t48 8b 78 08          \tmov    0x8(%rax),%rdi\n 20d:\t8b 85 c0 fe ff ff    \tmov    -0x140(%rbp),%eax\n 213:\t48 63 c8             \tmovslq %eax,%rcx\n 216:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 21d:\t8b 50 28             \tmov    0x28(%rax),%edx\n 220:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 224:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 228:\t49 89 f9             \tmov    %rdi,%r9\n 22b:\t49 89 c8             \tmov    %rcx,%r8\n 22e:\t89 d1                \tmov    %edx,%ecx\n 230:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 237 <BIO_debug_callback+0x237>\n 237:\t48 89 c7             \tmov    %rax,%rdi\n 23a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 23f:\te8 00 00 00 00       \tcallq  244 <BIO_debug_callback+0x244>\n 244:\te9 5d 02 00 00       \tjmpq   4a6 <BIO_debug_callback+0x4a6>\n 249:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 250:\t48 8b 00             \tmov    (%rax),%rax\n 253:\t8b 00                \tmov    (%rax),%eax\n 255:\t25 00 01 00 00       \tand    $0x100,%eax\n 25a:\t85 c0                \ttest   %eax,%eax\n 25c:\t74 5d                \tje     2bb <BIO_debug_callback+0x2bb>\n 25e:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 265:\t8b 48 28             \tmov    0x28(%rax),%ecx\n 268:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 26f:\t48 8b 00             \tmov    (%rax),%rax\n 272:\t4c 8b 40 08          \tmov    0x8(%rax),%r8\n 276:\t8b 85 c0 fe ff ff    \tmov    -0x140(%rbp),%eax\n 27c:\t48 63 f8             \tmovslq %eax,%rdi\n 27f:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 286:\t8b 50 28             \tmov    0x28(%rax),%edx\n 289:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 28d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 291:\t48 83 ec 08          \tsub    $0x8,%rsp\n 295:\t51                   \tpush   %rcx\n 296:\t4d 89 c1             \tmov    %r8,%r9\n 299:\t49 89 f8             \tmov    %rdi,%r8\n 29c:\t89 d1                \tmov    %edx,%ecx\n 29e:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 2a5 <BIO_debug_callback+0x2a5>\n 2a5:\t48 89 c7             \tmov    %rax,%rdi\n 2a8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2ad:\te8 00 00 00 00       \tcallq  2b2 <BIO_debug_callback+0x2b2>\n 2b2:\t48 83 c4 10          \tadd    $0x10,%rsp\n 2b6:\te9 eb 01 00 00       \tjmpq   4a6 <BIO_debug_callback+0x4a6>\n 2bb:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 2c2:\t48 8b 00             \tmov    (%rax),%rax\n 2c5:\t48 8b 78 08          \tmov    0x8(%rax),%rdi\n 2c9:\t8b 85 c0 fe ff ff    \tmov    -0x140(%rbp),%eax\n 2cf:\t48 63 c8             \tmovslq %eax,%rcx\n 2d2:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 2d9:\t8b 50 28             \tmov    0x28(%rax),%edx\n 2dc:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 2e0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2e4:\t49 89 f9             \tmov    %rdi,%r9\n 2e7:\t49 89 c8             \tmov    %rcx,%r8\n 2ea:\t89 d1                \tmov    %edx,%ecx\n 2ec:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 2f3 <BIO_debug_callback+0x2f3>\n 2f3:\t48 89 c7             \tmov    %rax,%rdi\n 2f6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2fb:\te8 00 00 00 00       \tcallq  300 <BIO_debug_callback+0x300>\n 300:\te9 a1 01 00 00       \tjmpq   4a6 <BIO_debug_callback+0x4a6>\n 305:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 30c:\t48 8b 00             \tmov    (%rax),%rax\n 30f:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 313:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 317:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 31b:\t48 89 d1             \tmov    %rdx,%rcx\n 31e:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 325 <BIO_debug_callback+0x325>\n 325:\t48 89 c7             \tmov    %rax,%rdi\n 328:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 32d:\te8 00 00 00 00       \tcallq  332 <BIO_debug_callback+0x332>\n 332:\te9 6f 01 00 00       \tjmpq   4a6 <BIO_debug_callback+0x4a6>\n 337:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 33e:\t48 8b 00             \tmov    (%rax),%rax\n 341:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n 345:\t8b 85 c0 fe ff ff    \tmov    -0x140(%rbp),%eax\n 34b:\t48 63 d0             \tmovslq %eax,%rdx\n 34e:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 352:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 356:\t49 89 c8             \tmov    %rcx,%r8\n 359:\t48 89 d1             \tmov    %rdx,%rcx\n 35c:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 363 <BIO_debug_callback+0x363>\n 363:\t48 89 c7             \tmov    %rax,%rdi\n 366:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 36b:\te8 00 00 00 00       \tcallq  370 <BIO_debug_callback+0x370>\n 370:\te9 31 01 00 00       \tjmpq   4a6 <BIO_debug_callback+0x4a6>\n 375:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 37c:\t48 8b 00             \tmov    (%rax),%rax\n 37f:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n 383:\t8b 85 c0 fe ff ff    \tmov    -0x140(%rbp),%eax\n 389:\t48 63 d0             \tmovslq %eax,%rdx\n 38c:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 390:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 394:\t49 89 c8             \tmov    %rcx,%r8\n 397:\t48 89 d1             \tmov    %rdx,%rcx\n 39a:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 3a1 <BIO_debug_callback+0x3a1>\n 3a1:\t48 89 c7             \tmov    %rax,%rdi\n 3a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3a9:\te8 00 00 00 00       \tcallq  3ae <BIO_debug_callback+0x3ae>\n 3ae:\te9 f3 00 00 00       \tjmpq   4a6 <BIO_debug_callback+0x4a6>\n 3b3:\t48 8b 95 a8 fe ff ff \tmov    -0x158(%rbp),%rdx\n 3ba:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 3be:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3c2:\t48 89 d1             \tmov    %rdx,%rcx\n 3c5:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 3cc <BIO_debug_callback+0x3cc>\n 3cc:\t48 89 c7             \tmov    %rax,%rdi\n 3cf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3d4:\te8 00 00 00 00       \tcallq  3d9 <BIO_debug_callback+0x3d9>\n 3d9:\te9 c8 00 00 00       \tjmpq   4a6 <BIO_debug_callback+0x4a6>\n 3de:\t48 8b 95 a8 fe ff ff \tmov    -0x158(%rbp),%rdx\n 3e5:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 3e9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3ed:\t48 89 d1             \tmov    %rdx,%rcx\n 3f0:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 3f7 <BIO_debug_callback+0x3f7>\n 3f7:\t48 89 c7             \tmov    %rax,%rdi\n 3fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3ff:\te8 00 00 00 00       \tcallq  404 <BIO_debug_callback+0x404>\n 404:\te9 9d 00 00 00       \tjmpq   4a6 <BIO_debug_callback+0x4a6>\n 409:\t48 8b 95 a8 fe ff ff \tmov    -0x158(%rbp),%rdx\n 410:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 414:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 418:\t48 89 d1             \tmov    %rdx,%rcx\n 41b:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 422 <BIO_debug_callback+0x422>\n 422:\t48 89 c7             \tmov    %rax,%rdi\n 425:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 42a:\te8 00 00 00 00       \tcallq  42f <BIO_debug_callback+0x42f>\n 42f:\teb 75                \tjmp    4a6 <BIO_debug_callback+0x4a6>\n 431:\t48 8b 95 a8 fe ff ff \tmov    -0x158(%rbp),%rdx\n 438:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 43c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 440:\t48 89 d1             \tmov    %rdx,%rcx\n 443:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 44a <BIO_debug_callback+0x44a>\n 44a:\t48 89 c7             \tmov    %rax,%rdi\n 44d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 452:\te8 00 00 00 00       \tcallq  457 <BIO_debug_callback+0x457>\n 457:\teb 4d                \tjmp    4a6 <BIO_debug_callback+0x4a6>\n 459:\t48 8b 95 a8 fe ff ff \tmov    -0x158(%rbp),%rdx\n 460:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 464:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 468:\t48 89 d1             \tmov    %rdx,%rcx\n 46b:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 472 <BIO_debug_callback+0x472>\n 472:\t48 89 c7             \tmov    %rax,%rdi\n 475:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 47a:\te8 00 00 00 00       \tcallq  47f <BIO_debug_callback+0x47f>\n 47f:\teb 25                \tjmp    4a6 <BIO_debug_callback+0x4a6>\n 481:\t8b 95 c4 fe ff ff    \tmov    -0x13c(%rbp),%edx\n 487:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n 48b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 48f:\t89 d1                \tmov    %edx,%ecx\n 491:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 498 <BIO_debug_callback+0x498>\n 498:\t48 89 c7             \tmov    %rax,%rdi\n 49b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4a0:\te8 00 00 00 00       \tcallq  4a5 <BIO_debug_callback+0x4a5>\n 4a5:\t90                   \tnop\n 4a6:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n 4ad:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 4b1:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 4b5:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n 4ba:\t74 29                \tje     4e5 <BIO_debug_callback+0x4e5>\n 4bc:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n 4c3:\t48 89 c7             \tmov    %rax,%rdi\n 4c6:\te8 00 00 00 00       \tcallq  4cb <BIO_debug_callback+0x4cb>\n 4cb:\t89 c2                \tmov    %eax,%edx\n 4cd:\t48 8d 8d d0 fe ff ff \tlea    -0x130(%rbp),%rcx\n 4d4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 4d8:\t48 89 ce             \tmov    %rcx,%rsi\n 4db:\t48 89 c7             \tmov    %rax,%rdi\n 4de:\te8 00 00 00 00       \tcallq  4e3 <BIO_debug_callback+0x4e3>\n 4e3:\teb 1c                \tjmp    501 <BIO_debug_callback+0x501>\n 4e5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4ec <BIO_debug_callback+0x4ec>\n 4ec:\t48 8b 10             \tmov    (%rax),%rdx\n 4ef:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n 4f6:\t48 89 d6             \tmov    %rdx,%rsi\n 4f9:\t48 89 c7             \tmov    %rax,%rdi\n 4fc:\te8 00 00 00 00       \tcallq  501 <BIO_debug_callback+0x501>\n 501:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 505:\tc9                   \tleaveq \n 506:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall BIO_debug_callback(__int64 a1, int a2, __int64 a3, int a4,\n                                      __int64 a5, __int64 a6) {\n  unsigned int v6;\n  char s[Number];\n  __int64 v11;\n  __int64 v12;\n  char *v13;\n  int v14;\n  __int64 v15;\n  v15 = Number L;\n  if ((a2 & Number) != Number)\n    v15 = a6;\n  v14 = BIO_snprintf(s, Number L, String, (const void *)a1);\n  if (v14 < Number)\n    v14 = Number;\n  v13 = &s[v14];\n  v12 = Number L - v14;\n  if (a2 > Number) {\n    if (a2 > Number || a2 < Number)\n      goto LABEL_28;\n    switch (a2) {\n    case Number:\n      BIO_snprintf(v13, v12, String, a6);\n      break;\n    case Number:\n      BIO_snprintf(v13, v12, String, a6);\n      break;\n    case Number:\n      BIO_snprintf(v13, v12, String, a6);\n      break;\n    case Number:\n      BIO_snprintf(v13, v12, String, a6);\n      break;\n    case Number:\n      BIO_snprintf(v13, v12, String, a6);\n      break;\n    default:\n      goto LABEL_28;\n    }\n  } else {\n    if (a2 <= Number) {\n    LABEL_28:\n      BIO_snprintf(v13, v12, String, (unsigned int)a2);\n      goto LABEL_29;\n    }\n    switch (a2) {\n    case Number:\n      BIO_snprintf(v13, v12, String,\n                   *(const char **)(*(_QWORD *)a1 + Number L));\n      break;\n    case Number:\n      if ((**(_DWORD **)a1 & Number) != Number)\n        BIO_snprintf(v13, v12, String, *(unsigned int *)(a1 + Number), a4,\n                     *(const char **)(*(_QWORD *)a1 + Number L),\n                     *(unsigned int *)(a1 + Number));\n      else\n        BIO_snprintf(v13, v12,\n                     String - % s \\ n String * (unsigned int *)(a1 + Number),\n                     a4, *(const char **)(*(_QWORD *)a1 + Number L));\n      break;\n    case Number:\n      if ((**(_DWORD **)a1 & Number) != Number)\n        BIO_snprintf(v13, v12, String, *(unsigned int *)(a1 + Number), a4,\n                     *(const char **)(*(_QWORD *)a1 + Number L),\n                     *(unsigned int *)(a1 + Number));\n      else\n        BIO_snprintf(v13, v12,\n                     String - % s \\ n String * (unsigned int *)(a1 + Number),\n                     a4, *(const char **)(*(_QWORD *)a1 + Number L));\n      break;\n    case Number:\n      BIO_snprintf(v13, v12, String,\n                   *(const char **)(*(_QWORD *)a1 + Number L));\n      break;\n    case Number:\n      BIO_snprintf(v13, v12, String, a4,\n                   *(const char **)(*(_QWORD *)a1 + Number L));\n      break;\n    case Number:\n      BIO_snprintf(v13, v12, String, a4,\n                   *(const char **)(*(_QWORD *)a1 + Number L));\n      break;\n    default:\n      goto LABEL_28;\n    }\n  }\nLABEL_29:\n  v11 = *(_QWORD *)(a1 + Number);\n  if (v11) {\n    v6 = strlen(s);\n    BIO_write(v11, s, v6);\n  } else {\n    fputs(s, stderr);\n  }\n  return v15;\n}", "code_t": "__int64 __cdecl BIO_debug_callback(BIO *<span class=\"supfact\">bio</span>,\n                                   int <span class=\"supfact\">cmd</span>,\n                                   const char *<span class=\"supfact\">argp</span>,\n                                   int <span class=\"supfact\">argi</span>,\n                                   __int64 <span class=\"supfact\">argl</span>,\n                                   __int64 <span class=\"supfact\">ret</span>) {\n  unsigned int <span class=\"supfact\">v6</span>;\n  char <span class=\"supfact\">buf</span>[Number];\n  BIO *<span class=\"supfact\">b</span>;\n  size_t <span class=\"supfact\">p_maxlen</span>;\n  char *<span class=\"supfact\">p</span>;\n  int <span class=\"supfact\">len</span>;\n  __int64 <span class=\"supfact\">r</span>;\n  <span class=\"supfact\">r</span> = Number L;\n  if ((<span class=\"supfact\">cmd</span> & Number) != Number)\n    <span class=\"supfact\">r</span> = <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">len</span> =\n      BIO_snprintf(<span class=\"supfact\">buf</span>, Number L, String, <span class=\"supfact\">bio</span>);\n  if (<span class=\"supfact\">len</span> < Number)\n    <span class=\"supfact\">len</span> = Number;\n  <span class=\"supfact\">p</span> = &<span class=\"supfact\">buf</span>[<span class=\"supfact\">len</span>];\n  <span class=\"supfact\">p_maxlen</span> = Number L - <span class=\"supfact\">len</span>;\n  if (<span class=\"supfact\">cmd</span> > Number) {\n    if (<span class=\"supfact\">cmd</span> > Number || <span class=\"supfact\">cmd</span> < Number)\n      goto LABEL_28;\n    switch (<span class=\"supfact\">cmd</span>) {\n    case Number:\n      BIO_snprintf(<span class=\"supfact\">p</span>, <span class=\"supfact\">p_maxlen</span>, String,\n                   <span class=\"supfact\">ret</span>);\n      break;\n    case Number:\n      BIO_snprintf(<span class=\"supfact\">p</span>, <span class=\"supfact\">p_maxlen</span>, String,\n                   <span class=\"supfact\">ret</span>);\n      break;\n    case Number:\n      BIO_snprintf(<span class=\"supfact\">p</span>, <span class=\"supfact\">p_maxlen</span>, String,\n                   <span class=\"supfact\">ret</span>);\n      break;\n    case Number:\n      BIO_snprintf(<span class=\"supfact\">p</span>, <span class=\"supfact\">p_maxlen</span>, String,\n                   <span class=\"supfact\">ret</span>);\n      break;\n    case Number:\n      BIO_snprintf(<span class=\"supfact\">p</span>, <span class=\"supfact\">p_maxlen</span>, String,\n                   <span class=\"supfact\">ret</span>);\n      break;\n    default:\n      goto LABEL_28;\n    }\n  } else {\n    if (<span class=\"supfact\">cmd</span> <= Number) {\n    LABEL_28:\n      BIO_snprintf(<span class=\"supfact\">p</span>, <span class=\"supfact\">p_maxlen</span>, String,\n                   (unsigned int)<span class=\"supfact\">cmd</span>);\n      goto LABEL_29;\n    }\n    switch (<span class=\"supfact\">cmd</span>) {\n    case Number:\n      BIO_snprintf(<span class=\"supfact\">p</span>, <span class=\"supfact\">p_maxlen</span>, String,\n                   <span class=\"supfact\">bio</span>->method->name);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">bio</span>->method->type & Number) != Number)\n        BIO_snprintf(<span class=\"supfact\">p</span>, <span class=\"supfact\">p_maxlen</span>, String,\n                     (unsigned int)<span class=\"supfact\">bio</span>->num,\n                     <span class=\"supfact\">argi</span>, <span class=\"supfact\">bio</span>->method->name,\n                     (unsigned int)<span class=\"supfact\">bio</span>->num);\n      else BIO_snprintf ( <span class=\"supfact\">p</span> , <span class=\"supfact\">p_maxlen</span> , String - % s \\ n String ; break ; case Number : if ( ( <span class=\"supfact\">bio</span> -> method -> type & Number ) != Number ) BIO_snprintf ( <span class=\"supfact\">p</span> , <span class=\"supfact\">p_maxlen</span> , String , ( unsigned int ) <span class=\"supfact\">bio</span> -> num , <span class=\"supfact\">argi</span> , <span class=\"supfact\">bio</span> -> method -> name , ( unsigned int ) <span class=\"supfact\">bio</span> -> num ) ; else BIO_snprintf ( <span class=\"supfact\">p</span> , <span class=\"supfact\">p_maxlen</span> , String - % s \\ n String ; break ; case Number : BIO_snprintf ( <span class=\"supfact\">p</span> , <span class=\"supfact\">p_maxlen</span> , String , <span class=\"supfact\">bio</span> -> method -> name ) ; break ; case Number : BIO_snprintf ( <span class=\"supfact\">p</span> , <span class=\"supfact\">p_maxlen</span> , String , <span class=\"supfact\">argi</span> , <span class=\"supfact\">bio</span> -> method -> name ) ; break ; case Number : BIO_snprintf ( <span class=\"supfact\">p</span> , <span class=\"supfact\">p_maxlen</span> , String , <span class=\"supfact\">argi</span> , <span class=\"supfact\">bio</span> -> method -> name ) ; break ; default : goto LABEL_28 ;\n    }\n  }\nLABEL_29:\n  <span class=\"supfact\">b</span> = (BIO *)<span class=\"supfact\">bio</span>->cb_arg;\n  if (<span class=\"supfact\">b</span>) {\n    <span class=\"supfact\">v6</span> = strlen(<span class=\"supfact\">buf</span>);\n    BIO_write(<span class=\"supfact\">b</span>, <span class=\"supfact\">buf</span>, <span class=\"supfact\">v6</span>);\n  } else {\n    fputs(<span class=\"supfact\">buf</span>, stderr);\n  }\n  return <span class=\"supfact\">r</span>;\n}", "var": [{"name": "a1", "type": "BIO *", "pred_name": "bio", "ref_name": "bio", "ref_type": "BIO *"}, {"name": "a2", "type": "int", "pred_name": "cmd", "ref_name": "cmd", "ref_type": "int"}, {"name": "a3", "type": "const char *", "pred_name": "argp", "ref_name": "argp", "ref_type": "const char *"}, {"name": "a4", "type": "int", "pred_name": "argi", "ref_name": "argi", "ref_type": "int"}, {"name": "a5", "type": "__int64", "pred_name": "argl", "ref_name": "argl", "ref_type": "__int64"}, {"name": "a6", "type": "__int64", "pred_name": "ret", "ref_name": "ret", "ref_type": "__int64"}, {"name": "v6", "type": "unsigned int", "pred_name": "v6", "ref_name": "v6", "ref_type": "unsigned int"}, {"name": "s", "type": "char[256]", "pred_name": "buf", "ref_name": "buf", "ref_type": "char[256]"}, {"name": "v11", "type": "size_t", "pred_name": "l", "ref_name": "b", "ref_type": "BIO *"}, {"name": "v12", "type": "size_t", "pred_name": "n", "ref_name": "p_maxlen", "ref_type": "size_t"}, {"name": "v13", "type": "const char *", "pred_name": "s", "ref_name": "p", "ref_type": "char *"}, {"name": "v14", "type": "int", "pred_name": "r", "ref_name": "len", "ref_type": "int"}, {"name": "v15", "type": "size_t", "pred_name": "l", "ref_name": "r", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "zachariah25", "repo_name": "c-list", "path": "zachariah25/c-list/04db486666dc16514546eddcc75d77920b5ca5eccaf1bf7002f7c54785adbc50", "path_in_repo": "zachariah25/c-list/string-example/List.o", "objdump": "000000000000182c <shrink>:\n    182c:\t55                   \tpush   %rbp\n    182d:\t48 89 e5             \tmov    %rsp,%rbp\n    1830:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1834:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1838:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    183c:\t8b 00                \tmov    (%rax),%eax\n    183e:\t85 c0                \ttest   %eax,%eax\n    1840:\t7e 28                \tjle    186a <shrink+0x3e>\n    1842:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1846:\t8b 00                \tmov    (%rax),%eax\n    1848:\t48 98                \tcltq   \n    184a:\t48 c1 e0 04          \tshl    $0x4,%rax\n    184e:\t48 89 c2             \tmov    %rax,%rdx\n    1851:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1855:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1859:\t48 89 d6             \tmov    %rdx,%rsi\n    185c:\t48 89 c7             \tmov    %rax,%rdi\n    185f:\te8 00 00 00 00       \tcallq  1864 <shrink+0x38>\n    1864:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1868:\teb 19                \tjmp    1883 <shrink+0x57>\n    186a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    186e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1872:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    1877:\t48 89 c7             \tmov    %rax,%rdi\n    187a:\te8 00 00 00 00       \tcallq  187f <shrink+0x53>\n    187f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1883:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    1888:\t74 35                \tje     18bf <shrink+0x93>\n    188a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    188e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    1892:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    1896:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    189a:\t8b 00                \tmov    (%rax),%eax\n    189c:\t85 c0                \ttest   %eax,%eax\n    189e:\t7e 12                \tjle    18b2 <shrink+0x86>\n    18a0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18a4:\t8b 00                \tmov    (%rax),%eax\n    18a6:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n    18a9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18ad:\t89 50 04             \tmov    %edx,0x4(%rax)\n    18b0:\teb 41                \tjmp    18f3 <shrink+0xc7>\n    18b2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18b6:\tc7 40 04 02 00 00 00 \tmovl   $0x2,0x4(%rax)\n    18bd:\teb 34                \tjmp    18f3 <shrink+0xc7>\n    18bf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18c6 <shrink+0x9a>\n    18c6:\t48 89 c1             \tmov    %rax,%rcx\n    18c9:\tba 2e 00 00 00       \tmov    $0x2e,%edx\n    18ce:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    18d3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    18d8:\te8 00 00 00 00       \tcallq  18dd <shrink+0xb1>\n    18dd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18e1:\t48 89 c7             \tmov    %rax,%rdi\n    18e4:\te8 00 00 00 00       \tcallq  18e9 <shrink+0xbd>\n    18e9:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    18ee:\te8 00 00 00 00       \tcallq  18f3 <shrink+0xc7>\n    18f3:\tc9                   \tleaveq \n    18f4:\tc3                   \tretq   ", "code_s": "int *__fastcall shrink(int *a1) {\n  int *result;\n  void *v2;\n  if (*a1 <= Number)\n    v2 = realloc(*((void **)a1 + Number), Number);\n  else\n    v2 = realloc(*((void **)a1 + Number), Number L * *a1);\n  if (!v2) {\n    fwrite(String, Number, Number, stderr);\n    cleanupList(a1);\n    exit(Number);\n  }\n  *((_QWORD *)a1 + Number) = v2;\n  result = a1;\n  if (*a1 <= Number)\n    a1[Number] = Number;\n  else\n    a1[Number] = Number * *a1;\n  return result;\n}", "code_t": "void __cdecl shrink(List *<span class=\"supfact\">list</span>) {\n  type *<span class=\"supfact\">newData</span>;\n  if (<span class=\"supfact\">list</span>->size <= Number)\n    <span class=\"supfact\">newData</span> =\n        (type *)realloc(<span class=\"supfact\">list</span>->data, Number);\n  else\n    <span class=\"supfact\">newData</span> = (type *)realloc(\n        <span class=\"supfact\">list</span>->data, Number L * <span class=\"supfact\">list</span>->size);\n  if (!<span class=\"supfact\">newData</span>) {\n    fwrite(String, Number, Number, stderr);\n    cleanupList(<span class=\"supfact\">list</span>);\n    exit(Number);\n  }\n  <span class=\"supfact\">list</span>->data = <span class=\"supfact\">newData</span>;\n  if (<span class=\"supfact\">list</span>->size <= Number)\n    <span class=\"supfact\">list</span>->capacity = Number;\n  else\n    <span class=\"supfact\">list</span>->capacity = Number * <span class=\"supfact\">list</span>->size;\n}", "var": [{"name": "a1", "type": "linkList *", "pred_name": "ll", "ref_name": "list", "ref_type": "List *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v2", "type": "node *", "pred_name": "newNode", "ref_name": "newData", "ref_type": "type *"}], "body_in_train": false}, {"repo_owner": "blacklion", "repo_name": "GEOM-Events", "path": "blacklion/GEOM-Events/b3c5d7a8efd18a317d99e550cf4ea23e1600f68888c990e3c1edc95fb48a3288", "path_in_repo": "blacklion/GEOM-Events/gnu/usr.bin/gdb/libgdb/cli-script.so", "objdump": "0000000000000487 <execute_cmd_pre_hook>:\n     487:\t55                   \tpush   %rbp\n     488:\t48 89 e5             \tmov    %rsp,%rbp\n     48b:\t48 83 ec 20          \tsub    $0x20,%rsp\n     48f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     493:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     497:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     49b:\t48 85 c0             \ttest   %rax,%rax\n     49e:\t74 4e                \tje     4ee <execute_cmd_pre_hook+0x67>\n     4a0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4a4:\t8b 40 60             \tmov    0x60(%rax),%eax\n     4a7:\t85 c0                \ttest   %eax,%eax\n     4a9:\t75 43                \tjne    4ee <execute_cmd_pre_hook+0x67>\n     4ab:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4af:\t48 89 c6             \tmov    %rax,%rsi\n     4b2:\t48 8d 3d b0 ff ff ff \tlea    -0x50(%rip),%rdi        # 469 <clear_hook_in_cleanup>\n     4b9:\te8 00 00 00 00       \tcallq  4be <execute_cmd_pre_hook+0x37>\n     4be:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     4c2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4c6:\tc7 40 60 01 00 00 00 \tmovl   $0x1,0x60(%rax)\n     4cd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     4d1:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     4d5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     4da:\t48 89 c7             \tmov    %rax,%rdi\n     4dd:\te8 00 00 00 00       \tcallq  4e2 <execute_cmd_pre_hook+0x5b>\n     4e2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     4e6:\t48 89 c7             \tmov    %rax,%rdi\n     4e9:\te8 00 00 00 00       \tcallq  4ee <execute_cmd_pre_hook+0x67>\n     4ee:\t90                   \tnop\n     4ef:\tc9                   \tleaveq \n     4f0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall execute_cmd_pre_hook(__int64 a1) {\n  __int64 result;\n  __int64 v2;\n  result = *(_QWORD *)(a1 + Number);\n  if (result) {\n    result = *(unsigned int *)(a1 + Number);\n    if (!(_DWORD)result) {\n      v2 = make_cleanup(clear_hook_in_cleanup, a1);\n      *(_DWORD *)(a1 + Number) = Number;\n      execute_user_command(*(_QWORD *)(a1 + Number), Number L);\n      result = do_cleanups(v2);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl execute_cmd_pre_hook(cmd_list_element *<span class=\"supfact\">c</span>) {\n  cleanup *<span class=\"supfact\">cleanups</span>;\n  if (<span class=\"supfact\">c</span>->hook_pre) {\n    if (!<span class=\"supfact\">c</span>->hook_in) {\n      <span class=\"supfact\">cleanups</span> =\n          (cleanup *)make_cleanup(clear_hook_in_cleanup, <span class=\"supfact\">c</span>);\n      <span class=\"supfact\">c</span>->hook_in = Number;\n      execute_user_command(<span class=\"supfact\">c</span>->hook_pre, Number L);\n      do_cleanups(<span class=\"supfact\">cleanups</span>);\n    }\n  }\n}", "var": [{"name": "a1", "type": "cleanup *", "pred_name": "old_chain", "ref_name": "c", "ref_type": "cmd_list_element *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v2", "type": "__unk__", "pred_name": "__unk__", "ref_name": "cleanups", "ref_type": "cleanup *"}], "body_in_train": false}, {"repo_owner": "ilyaevseev", "repo_name": "edimax-br6528n-gpl", "path": "ilyaevseev/edimax-br6528n-gpl/4a2e8e7ebb9e1be68612e1eccc1530fa4116edf16c46aab2fef8acc91acd5612", "path_in_repo": "ilyaevseev/edimax-br6528n-gpl/RTL8196C/AP/ppp-2.4.4/pppdump/pppdump", "objdump": "0000000000408ea5 <ct_tally>:\n  408ea5:\t55                   \tpush   %rbp\n  408ea6:\t48 89 e5             \tmov    %rsp,%rbp\n  408ea9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  408ead:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  408eb0:\t89 55 d0             \tmov    %edx,-0x30(%rbp)\n  408eb3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408eb7:\t48 8b 90 f8 16 00 00 \tmov    0x16f8(%rax),%rdx\n  408ebe:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408ec2:\t8b 80 f4 16 00 00    \tmov    0x16f4(%rax),%eax\n  408ec8:\t89 c0                \tmov    %eax,%eax\n  408eca:\t48 01 c0             \tadd    %rax,%rax\n  408ecd:\t48 01 d0             \tadd    %rdx,%rax\n  408ed0:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  408ed3:\t66 89 10             \tmov    %dx,(%rax)\n  408ed6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408eda:\t48 8b b0 e8 16 00 00 \tmov    0x16e8(%rax),%rsi\n  408ee1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408ee5:\t8b 80 f4 16 00 00    \tmov    0x16f4(%rax),%eax\n  408eeb:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  408eee:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  408ef2:\t89 8a f4 16 00 00    \tmov    %ecx,0x16f4(%rdx)\n  408ef8:\t89 c0                \tmov    %eax,%eax\n  408efa:\t48 01 f0             \tadd    %rsi,%rax\n  408efd:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n  408f00:\t88 10                \tmov    %dl,(%rax)\n  408f02:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n  408f06:\t75 2e                \tjne    408f36 <ct_tally+0x91>\n  408f08:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408f0c:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n  408f0f:\t48 63 d2             \tmovslq %edx,%rdx\n  408f12:\t48 83 c2 2c          \tadd    $0x2c,%rdx\n  408f16:\t0f b7 44 90 0c       \tmovzwl 0xc(%rax,%rdx,4),%eax\n  408f1b:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  408f1e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408f22:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n  408f25:\t48 63 d2             \tmovslq %edx,%rdx\n  408f28:\t48 83 c2 2c          \tadd    $0x2c,%rdx\n  408f2c:\t66 89 4c 90 0c       \tmov    %cx,0xc(%rax,%rdx,4)\n  408f31:\te9 a7 00 00 00       \tjmpq   408fdd <ct_tally+0x138>\n  408f36:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408f3a:\t8b 80 18 17 00 00    \tmov    0x1718(%rax),%eax\n  408f40:\t8d 50 01             \tlea    0x1(%rax),%edx\n  408f43:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408f47:\t89 90 18 17 00 00    \tmov    %edx,0x1718(%rax)\n  408f4d:\t83 6d d4 01          \tsubl   $0x1,-0x2c(%rbp)\n  408f51:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  408f54:\t48 98                \tcltq   \n  408f56:\t0f b6 80 60 40 41 00 \tmovzbl 0x414060(%rax),%eax\n  408f5d:\t0f b6 c0             \tmovzbl %al,%eax\n  408f60:\t05 01 01 00 00       \tadd    $0x101,%eax\n  408f65:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  408f69:\t48 63 c8             \tmovslq %eax,%rcx\n  408f6c:\t48 83 c1 2c          \tadd    $0x2c,%rcx\n  408f70:\t0f b7 54 8a 0c       \tmovzwl 0xc(%rdx,%rcx,4),%edx\n  408f75:\t8d 4a 01             \tlea    0x1(%rdx),%ecx\n  408f78:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  408f7c:\t48 98                \tcltq   \n  408f7e:\t48 83 c0 2c          \tadd    $0x2c,%rax\n  408f82:\t66 89 4c 82 0c       \tmov    %cx,0xc(%rdx,%rax,4)\n  408f87:\t81 7d d4 ff 00 00 00 \tcmpl   $0xff,-0x2c(%rbp)\n  408f8e:\t7f 11                \tjg     408fa1 <ct_tally+0xfc>\n  408f90:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  408f93:\t48 98                \tcltq   \n  408f95:\t0f b6 80 60 3e 41 00 \tmovzbl 0x413e60(%rax),%eax\n  408f9c:\t0f b6 c0             \tmovzbl %al,%eax\n  408f9f:\teb 17                \tjmp    408fb8 <ct_tally+0x113>\n  408fa1:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  408fa4:\tc1 f8 07             \tsar    $0x7,%eax\n  408fa7:\t05 00 01 00 00       \tadd    $0x100,%eax\n  408fac:\t48 98                \tcltq   \n  408fae:\t0f b6 80 60 3e 41 00 \tmovzbl 0x413e60(%rax),%eax\n  408fb5:\t0f b6 c0             \tmovzbl %al,%eax\n  408fb8:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  408fbc:\t48 63 c8             \tmovslq %eax,%rcx\n  408fbf:\t48 81 c1 6c 02 00 00 \tadd    $0x26c,%rcx\n  408fc6:\t0f b7 14 8a          \tmovzwl (%rdx,%rcx,4),%edx\n  408fca:\t8d 4a 01             \tlea    0x1(%rdx),%ecx\n  408fcd:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  408fd1:\t48 98                \tcltq   \n  408fd3:\t48 05 6c 02 00 00    \tadd    $0x26c,%rax\n  408fd9:\t66 89 0c 82          \tmov    %cx,(%rdx,%rax,4)\n  408fdd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408fe1:\t8b 80 ac 00 00 00    \tmov    0xac(%rax),%eax\n  408fe7:\t83 f8 02             \tcmp    $0x2,%eax\n  408fea:\t0f 8e c4 00 00 00    \tjle    4090b4 <ct_tally+0x20f>\n  408ff0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  408ff4:\t8b 80 f4 16 00 00    \tmov    0x16f4(%rax),%eax\n  408ffa:\t25 ff 0f 00 00       \tand    $0xfff,%eax\n  408fff:\t85 c0                \ttest   %eax,%eax\n  409001:\t0f 85 ad 00 00 00    \tjne    4090b4 <ct_tally+0x20f>\n  409007:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40900b:\t8b 80 f4 16 00 00    \tmov    0x16f4(%rax),%eax\n  409011:\t89 c0                \tmov    %eax,%eax\n  409013:\t48 c1 e0 03          \tshl    $0x3,%rax\n  409017:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40901b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40901f:\t8b 80 94 00 00 00    \tmov    0x94(%rax),%eax\n  409025:\t89 c2                \tmov    %eax,%edx\n  409027:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40902b:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n  409032:\t48 29 c2             \tsub    %rax,%rdx\n  409035:\t48 89 d0             \tmov    %rdx,%rax\n  409038:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40903c:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  409043:\teb 36                \tjmp    40907b <ct_tally+0x1d6>\n  409045:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  409049:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  40904c:\t48 63 d2             \tmovslq %edx,%rdx\n  40904f:\t48 81 c2 6c 02 00 00 \tadd    $0x26c,%rdx\n  409056:\t0f b7 04 90          \tmovzwl (%rax,%rdx,4),%eax\n  40905a:\t0f b7 d0             \tmovzwl %ax,%edx\n  40905d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  409060:\t48 98                \tcltq   \n  409062:\t8b 04 85 a0 34 41 00 \tmov    0x4134a0(,%rax,4),%eax\n  409069:\t48 98                \tcltq   \n  40906b:\t48 83 c0 05          \tadd    $0x5,%rax\n  40906f:\t48 0f af c2          \timul   %rdx,%rax\n  409073:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n  409077:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  40907b:\t83 7d f4 1d          \tcmpl   $0x1d,-0xc(%rbp)\n  40907f:\t7e c4                \tjle    409045 <ct_tally+0x1a0>\n  409081:\t48 c1 6d f8 03       \tshrq   $0x3,-0x8(%rbp)\n  409086:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40908a:\t8b 90 18 17 00 00    \tmov    0x1718(%rax),%edx\n  409090:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  409094:\t8b 80 f4 16 00 00    \tmov    0x16f4(%rax),%eax\n  40909a:\td1 e8                \tshr    %eax\n  40909c:\t39 c2                \tcmp    %eax,%edx\n  40909e:\t73 14                \tjae    4090b4 <ct_tally+0x20f>\n  4090a0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4090a4:\t48 d1 e8             \tshr    %rax\n  4090a7:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  4090ab:\t73 07                \tjae    4090b4 <ct_tally+0x20f>\n  4090ad:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4090b2:\teb 1f                \tjmp    4090d3 <ct_tally+0x22e>\n  4090b4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4090b8:\t8b 90 f4 16 00 00    \tmov    0x16f4(%rax),%edx\n  4090be:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4090c2:\t8b 80 f0 16 00 00    \tmov    0x16f0(%rax),%eax\n  4090c8:\t83 e8 01             \tsub    $0x1,%eax\n  4090cb:\t39 c2                \tcmp    %eax,%edx\n  4090cd:\t0f 94 c0             \tsete   %al\n  4090d0:\t0f b6 c0             \tmovzbl %al,%eax\n  4090d3:\t5d                   \tpop    %rbp\n  4090d4:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall ct_tally(__int64 a1, int a2, int a3) {\n  __int64 v3;\n  unsigned int v4;\n  int v5;\n  int v6;\n  _BOOL8 result;\n  int v9;\n  int i;\n  unsigned __int64 v11;\n  unsigned __int64 v12;\n  *(_WORD *)(*(_QWORD *)(a1 + Number) +\n             Number L * *(unsigned int *)(a1 + Number)) = a2;\n  v3 = *(_QWORD *)(a1 + Number);\n  v4 = *(_DWORD *)(a1 + Number);\n  *(_DWORD *)(a1 + Number) = v4 + Number;\n  *(_BYTE *)(v3 + v4) = a3;\n  if (a2) {\n    ++*(_DWORD *)(a1 + Number);\n    v9 = a2 - Number;\n    v5 = (unsigned __int8)length_code[a3] + Number;\n    ++*(_WORD *)(a1 + Number * (v5 + Number L) + Number);\n    if (v9 > Number)\n      v6 = (unsigned __int8)dist_code[(v9 >> Number) + Number];\n    else\n      v6 = (unsigned __int8)dist_code[v9];\n    ++*(_WORD *)(a1 + Number * (v6 + Number L));\n  } else {\n    ++*(_WORD *)(a1 + Number * (a3 + Number L) + Number);\n  }\n  if (*(int *)(a1 + Number) <= Number)\n    goto LABEL_15;\n  if ((*(_DWORD *)(a1 + Number) & Number) != Number)\n    goto LABEL_15;\n  v11 = Number L * *(unsigned int *)(a1 + Number);\n  for (i = Number; i <= Number; ++i)\n    v11 += *(unsigned __int16 *)(a1 + Number * (i + Number L)) *\n           (extra_dbits[i] + Number L);\n  v12 = v11 >> Number;\n  if (*(_DWORD *)(a1 + Number) >= *(_DWORD *)(a1 + Number) >> Number ||\n      v12 >= ((unsigned __int64)*(unsigned int *)(a1 + Number) -\n              *(_QWORD *)(a1 + Number)) >>\n          Number) {\n  LABEL_15:\n    result = *(_DWORD *)(a1 + Number) == *(_DWORD *)(a1 + Number) - Number;\n  } else {\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl ct_tally(deflate_state_1 *<span class=\"supfact\">s</span>,\n                     int <span class=\"supfact\">dist</span>, int <span class=\"supfact\">lc</span>) {\n  uchf *v3;\n  uInt v4;\n  int v5;\n  int v6;\n  int result;\n  int <span class=\"supfact\">distb</span>;\n  int <span class=\"supfact\">dcode</span>;\n  ulg out_length;\n  unsigned __int64 out_lengtha;\n  <span class=\"supfact\">s</span>->d_buf[<span class=\"supfact\">s</span>->last_lit] = <span class=\"supfact\">dist</span>;\n  v3 = <span class=\"supfact\">s</span>->l_buf;\n  v4 = <span class=\"supfact\">s</span>->last_lit;\n  <span class=\"supfact\">s</span>->last_lit = v4 + Number;\n  v3[v4] = <span class=\"supfact\">lc</span>;\n  if (<span class=\"supfact\">dist</span>) {\n    ++<span class=\"supfact\">s</span>->matches;\n    <span class=\"supfact\">distb</span> = <span class=\"supfact\">dist</span> - Number;\n    v5 = length_code[<span class=\"supfact\">lc</span>] + Number;\n    ++<span class=\"supfact\">s</span>->dyn_ltree[v5].fc.freq;\n    if (<span class=\"supfact\">distb</span> > Number)\n      v6 = dist_code[(<span class=\"supfact\">distb</span> >> Number) + Number];\n    else\n      v6 = dist_code[<span class=\"supfact\">distb</span>];\n    ++<span class=\"supfact\">s</span>->dyn_dtree[v6].fc.freq;\n  } else {\n    ++<span class=\"supfact\">s</span>->dyn_ltree[<span class=\"supfact\">lc</span>].fc.freq;\n  }\n  if (<span class=\"supfact\">s</span>->level <= Number)\n    goto LABEL_15;\n  if ((<span class=\"supfact\">s</span>->last_lit & Number) != Number)\n    goto LABEL_15;\n  out_length = Number L * <span class=\"supfact\">s</span>->last_lit;\n  for (<span class=\"supfact\">dcode</span> = Number; <span class=\"supfact\">dcode</span> <= Number;\n       ++<span class=\"supfact\">dcode</span>)\n    out_length += <span class=\"supfact\">s</span>->dyn_dtree[<span class=\"supfact\">dcode</span>].fc.freq *\n                  (extra_dbits[<span class=\"supfact\">dcode</span>] + Number L);\n  out_lengtha = out_length >> Number;\n  if (<span class=\"supfact\">s</span>->matches >= <span class=\"supfact\">s</span>->last_lit >> Number ||\n      out_lengtha >= ((unsigned __int64)<span class=\"supfact\">s</span>->strstart -\n                      <span class=\"supfact\">s</span>->block_start) >>\n          Number)\n  LABEL_15:\n    result =\n        <span class=\"supfact\">s</span>->last_lit == <span class=\"supfact\">s</span>->lit_bufsize - Number;\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "a1", "type": "deflate_state *", "pred_name": "s", "ref_name": "s", "ref_type": "deflate_state_1 *"}, {"name": "a2", "type": "unsigned int", "pred_name": "dist", "ref_name": "dist", "ref_type": "int"}, {"name": "a3", "type": "unsigned int", "pred_name": "lc", "ref_name": "lc", "ref_type": "int"}, {"name": "v9", "type": "unsigned int", "pred_name": "distb", "ref_name": "distb", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "dcode", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "luknw", "repo_name": "os", "path": "luknw/os/47fee36e901e6a93f22ec387f90c4f4bca6e462af8baa0e4e5be9948804b7d51", "path_in_repo": "luknw/os/barberqueue/mothership_SYSV", "objdump": "0000000000402bda <safe_sigaction>:\n  402bda:\t55                   \tpush   %rbp\n  402bdb:\t48 89 e5             \tmov    %rsp,%rbp\n  402bde:\t48 83 ec 20          \tsub    $0x20,%rsp\n  402be2:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n  402be5:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  402be9:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  402bed:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  402bf1:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  402bf5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402bf8:\t48 89 ce             \tmov    %rcx,%rsi\n  402bfb:\t89 c7                \tmov    %eax,%edi\n  402bfd:\te8 8e f4 ff ff       \tcallq  402090 <sigaction@plt>\n  402c02:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  402c05:\t75 14                \tjne    402c1b <safe_sigaction+0x41>\n  402c07:\tbf c5 42 40 00       \tmov    $0x4042c5,%edi\n  402c0c:\te8 8f f6 ff ff       \tcallq  4022a0 <perror@plt>\n  402c11:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402c16:\te8 15 f7 ff ff       \tcallq  402330 <exit@plt>\n  402c1b:\t90                   \tnop\n  402c1c:\tc9                   \tleaveq \n  402c1d:\tc3                   \tretq   ", "code_s": "int __fastcall safe_sigaction(int a1, const struct sigaction *a2,\n                              struct sigaction *a3) {\n  int result;\n  result = sigaction(a1, a2, a3);\n  if (result == Number) {\n    perror(String);\n    exit(Number);\n  }\n  return result;\n}", "code_t": "void __cdecl safe_sigaction(int <span class=\"supfact\">signalNumber</span>,\n                            const sigaction *<span class=\"supfact\">action</span>,\n                            sigaction *<span class=\"supfact\">oldAction</span>) {\n  if (sigaction(<span class=\"supfact\">signalNumber</span>, <span class=\"supfact\">action</span>,\n                <span class=\"supfact\">oldAction</span>) == Number) {\n    perror(String);\n    exit(Number);\n  }\n}", "var": [{"name": "a1", "type": "int", "pred_name": "sig", "ref_name": "signalNumber", "ref_type": "int"}, {"name": "a2", "type": "siginfo_t *", "pred_name": "siginfo", "ref_name": "action", "ref_type": "const sigaction *"}, {"name": "a3", "type": "void *", "pred_name": "p", "ref_name": "oldAction", "ref_type": "sigaction *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "tcdog001", "repo_name": "lsdk_ar9531", "path": "tcdog001/lsdk_ar9531/47adfd508fd84b7a2750cc2ec8a1b887d30befe38be007e9225719110155dc04", "path_in_repo": "tcdog001/lsdk_ar9531/apps/athr-hostap/wlantest/wlantest.o", "objdump": "000000000000044e <add_secret>:\n 44e:\t55                   \tpush   %rbp\n 44f:\t48 89 e5             \tmov    %rsp,%rbp\n 452:\t48 83 ec 20          \tsub    $0x20,%rsp\n 456:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 45a:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 45e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 462:\t48 89 c7             \tmov    %rax,%rdi\n 465:\te8 00 00 00 00       \tcallq  46a <add_secret+0x1c>\n 46a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 46e:\t48 83 7d f8 7f       \tcmpq   $0x7f,-0x8(%rbp)\n 473:\t77 49                \tja     4be <add_secret+0x70>\n 475:\tbf 90 00 00 00       \tmov    $0x90,%edi\n 47a:\te8 00 00 00 00       \tcallq  47f <add_secret+0x31>\n 47f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 483:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 488:\t74 37                \tje     4c1 <add_secret+0x73>\n 48a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 48e:\t48 8d 48 10          \tlea    0x10(%rax),%rcx\n 492:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 496:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 49a:\t48 89 c6             \tmov    %rax,%rsi\n 49d:\t48 89 cf             \tmov    %rcx,%rdi\n 4a0:\te8 00 00 00 00       \tcallq  4a5 <add_secret+0x57>\n 4a5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 4a9:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 4ad:\t48 83 c2 58          \tadd    $0x58,%rdx\n 4b1:\t48 89 c6             \tmov    %rax,%rsi\n 4b4:\t48 89 d7             \tmov    %rdx,%rdi\n 4b7:\te8 66 fb ff ff       \tcallq  22 <dl_list_add>\n 4bc:\teb 04                \tjmp    4c2 <add_secret+0x74>\n 4be:\t90                   \tnop\n 4bf:\teb 01                \tjmp    4c2 <add_secret+0x74>\n 4c1:\t90                   \tnop\n 4c2:\tc9                   \tleaveq \n 4c3:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall add_secret(__int64 a1, const char *a2) {\n  unsigned __int64 result;\n  _QWORD *v3;\n  size_t n;\n  result = strlen(a2);\n  n = result;\n  if (result <= Number) {\n    result = os_zalloc(Number L);\n    v3 = (_QWORD *)result;\n    if (result) {\n      memcpy((void *)(result + Number), a2, n);\n      result = dl_list_add(a1 + Number, v3);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl add_secret(wlantest *<span class=\"supfact\">wt</span>,\n                        const char *<span class=\"supfact\">secret</span>) {\n  wlantest_radius_secret *<span class=\"supfact\">s</span>;\n  size_t <span class=\"supfact\">len</span>;\n  <span class=\"supfact\">len</span> = strlen(<span class=\"supfact\">secret</span>);\n  if (<span class=\"supfact\">len</span> <= Number) {\n    <span class=\"supfact\">s</span> = (wlantest_radius_secret *)os_zalloc(Number L);\n    if (<span class=\"supfact\">s</span>) {\n      memcpy(<span class=\"supfact\">s</span>-><span class=\"supfact\">secret</span>, <span class=\"supfact\">secret</span>,\n             <span class=\"supfact\">len</span>);\n      dl_list_add(&<span class=\"supfact\">wt</span>-><span class=\"supfact\">secret</span>,\n                  &<span class=\"supfact\">s</span>->list);\n    }\n  }\n}", "var": [{"name": "a1", "type": "dl_list *", "pred_name": "list", "ref_name": "wt", "ref_type": "wlantest *"}, {"name": "a2", "type": "const char *", "pred_name": "str", "ref_name": "secret", "ref_type": "const char *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v3", "type": "size_t", "pred_name": "len", "ref_name": "s", "ref_type": "wlantest_radius_secret *"}, {"name": "n", "type": "size_t", "pred_name": "__unk__", "ref_name": "len", "ref_type": "size_t"}], "body_in_train": false}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "0000000000000fc1 <glRasterPos4sv>:\n     fc1:\t55                   \tpush   %rbp\n     fc2:\t48 89 e5             \tmov    %rsp,%rbp\n     fc5:\t48 83 ec 10          \tsub    $0x10,%rsp\n     fc9:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     fcd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # fd4 <glRasterPos4sv+0x13>\n     fd4:\t48 8b 90 a8 02 00 00 \tmov    0x2a8(%rax),%rdx\n     fdb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     fdf:\t48 89 c7             \tmov    %rax,%rdi\n     fe2:\tff d2                \tcallq  *%rdx\n     fe4:\t90                   \tnop\n     fe5:\tc9                   \tleaveq \n     fe6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glRasterPos4sv(__int64 a1) {\n  return (*(__int64(__fastcall **)(__int64))(glapi_Dispatch + Number L))(a1);\n}", "code_t": "void __cdecl glRasterPos4sv(const GLshort *<span class=\"supfact\">v</span>) {\n  (*(void(__fastcall **)(const GLshort *))(glapi_Dispatch + Number L))(\n      <span class=\"supfact\">v</span>);\n}", "var": [{"name": "a1", "type": "const GLshort *", "pred_name": "v", "ref_name": "v", "ref_type": "const GLshort *"}], "body_in_train": false}, {"repo_owner": "kedric", "repo_name": "42", "path": "kedric/42/cb195a2c5e0611ff412f45178e37ab2ee20361c9d55286a773c83e947c3683db", "path_in_repo": "kedric/42/p4/src/ia.o", "objdump": "0000000000000000 <ft_vs>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n   7:\t83 7d fc 02          \tcmpl   $0x2,-0x4(%rbp)\n   b:\t75 07                \tjne    14 <ft_vs+0x14>\n   d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  12:\teb 05                \tjmp    19 <ft_vs+0x19>\n  14:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  19:\t5d                   \tpop    %rbp\n  1a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ft_vs(int a1) {\n  __int64 result;\n  if (a1 == Number)\n    result = Number L;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "int __cdecl ft_vs(int <span class=\"supfact\">player</span>) {\n  int <span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">player</span> == Number)\n    <span class=\"supfact\">result</span> = Number;\n  else\n    <span class=\"supfact\">result</span> = Number;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "n", "ref_name": "player", "ref_type": "int"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "wnoguchi", "repo_name": "hikari_denwa_asterisk", "path": "wnoguchi/hikari_denwa_asterisk/e5b51506640b2fce39e37898266ef905d6c109c7d05fe3087a3660b5e04ac46a", "path_in_repo": "wnoguchi/hikari_denwa_asterisk/asterisk-11.0.1/res/pjproject/third_party/build/srtp/output/libsrtp-x86_64-unknown-linux-gnu/crypto/math/datatypes.o", "objdump": "00000000000000ec <is_hex_string>:\n  ec:\t55                   \tpush   %rbp\n  ed:\t48 89 e5             \tmov    %rsp,%rbp\n  f0:\t48 83 ec 10          \tsub    $0x10,%rsp\n  f4:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  f8:\teb 25                \tjmp    11f <is_hex_string+0x33>\n  fa:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  fe:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n 102:\t48 89 55 f8          \tmov    %rdx,-0x8(%rbp)\n 106:\t0f b6 00             \tmovzbl (%rax),%eax\n 109:\t0f b6 c0             \tmovzbl %al,%eax\n 10c:\t89 c7                \tmov    %eax,%edi\n 10e:\te8 00 00 00 00       \tcallq  113 <is_hex_string+0x27>\n 113:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 116:\t75 07                \tjne    11f <is_hex_string+0x33>\n 118:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 11d:\teb 10                \tjmp    12f <is_hex_string+0x43>\n 11f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 123:\t0f b6 00             \tmovzbl (%rax),%eax\n 126:\t84 c0                \ttest   %al,%al\n 128:\t75 d0                \tjne    fa <is_hex_string+0xe>\n 12a:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 12f:\tc9                   \tleaveq \n 130:\tc3                   \tretq   ", "code_s": "__int64 __fastcall is_hex_string(unsigned __int8 *a1) {\n  unsigned __int8 *v1;\n  while (*a1) {\n    v1 = a1++;\n    if ((unsigned int)hex_char_to_nibble(*v1) == Number)\n      return Number L;\n  }\n  return Number L;\n}", "code_t": "int __cdecl is_hex_string(char *<span class=\"supfact\">s</span>) {\n  char *<span class=\"supfact\">v1</span>;\n  while (*<span class=\"supfact\">s</span>) {\n    <span class=\"supfact\">v1</span> = <span class=\"supfact\">s</span>++;\n    if ((unsigned int)hex_char_to_nibble(\n            (unsigned __int8)*<span class=\"supfact\">v1</span>) == Number)\n      return Number;\n  }\n  return Number;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "hex", "ref_name": "s", "ref_type": "char *"}, {"name": "v1", "type": "char *", "pred_name": "v1", "ref_name": "v1", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "vvidic", "repo_name": "ocfs2-tools", "path": "vvidic/ocfs2-tools/2c75441a8d81b84cf157128fbb413f4a7ab9358b4a76ddc0f53de286caf7e774", "path_in_repo": "vvidic/ocfs2-tools/fsck.ocfs2/pass1b.o", "objdump": "00000000000018a7 <pass1c_warn>:\n    18a7:\t55                   \tpush   %rbp\n    18a8:\t48 89 e5             \tmov    %rsp,%rbp\n    18ab:\t48 83 ec 10          \tsub    $0x10,%rsp\n    18af:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    18b3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 18b9 <pass1c_warn+0x12>\n    18b9:\t85 c0                \ttest   %eax,%eax\n    18bb:\t75 2c                \tjne    18e9 <pass1c_warn+0x42>\n    18bd:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 18c7 <pass1c_warn+0x20>\n    18c4:\t00 00 00 \n    18c7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18ce <pass1c_warn+0x27>\n    18ce:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    18d2:\tba 00 00 00 00       \tmov    $0x0,%edx\n    18d7:\t48 89 ce             \tmov    %rcx,%rsi\n    18da:\t48 89 c7             \tmov    %rax,%rdi\n    18dd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    18e2:\te8 00 00 00 00       \tcallq  18e7 <pass1c_warn+0x40>\n    18e7:\teb 01                \tjmp    18ea <pass1c_warn+0x43>\n    18e9:\t90                   \tnop\n    18ea:\tc9                   \tleaveq \n    18eb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pass1c_warn(__int64 a1) {\n  __int64 result;\n  result = (unsigned int)warned_6688;\n  if (!warned_6688) {\n    warned_6688 = Number;\n    result = com_err(whoami, a1, String String);\n  }\n  return result;\n}", "code_t": "void __cdecl pass1c_warn(errcode_t <span class=\"supfact\">ret</span>) {\n  if (!warned_6688) {\n    warned_6688 = Number;\n    com_err(whoami, <span class=\"supfact\">ret</span>, String);\n  }\n}", "var": [{"name": "a1", "type": "disappear", "pred_name": "", "ref_name": "ret", "ref_type": "errcode_t"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "hackedd", "repo_name": "JavaDisasm", "path": "hackedd/JavaDisasm/9acab7c746693bfe6f8c49a596f2b46d183e7f999297d80536572194ba3b8a03", "path_in_repo": "hackedd/JavaDisasm//utf8.o", "objdump": "0000000000000893 <hex_digit>:\n     893:\t55                   \tpush   %rbp\n     894:\t48 89 e5             \tmov    %rsp,%rbp\n     897:\t89 f8                \tmov    %edi,%eax\n     899:\t88 45 fc             \tmov    %al,-0x4(%rbp)\n     89c:\t80 7d fc 2f          \tcmpb   $0x2f,-0x4(%rbp)\n     8a0:\t7e 06                \tjle    8a8 <hex_digit+0x15>\n     8a2:\t80 7d fc 39          \tcmpb   $0x39,-0x4(%rbp)\n     8a6:\t7e 18                \tjle    8c0 <hex_digit+0x2d>\n     8a8:\t80 7d fc 40          \tcmpb   $0x40,-0x4(%rbp)\n     8ac:\t7e 06                \tjle    8b4 <hex_digit+0x21>\n     8ae:\t80 7d fc 46          \tcmpb   $0x46,-0x4(%rbp)\n     8b2:\t7e 0c                \tjle    8c0 <hex_digit+0x2d>\n     8b4:\t80 7d fc 60          \tcmpb   $0x60,-0x4(%rbp)\n     8b8:\t7e 0d                \tjle    8c7 <hex_digit+0x34>\n     8ba:\t80 7d fc 66          \tcmpb   $0x66,-0x4(%rbp)\n     8be:\t7f 07                \tjg     8c7 <hex_digit+0x34>\n     8c0:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     8c5:\teb 05                \tjmp    8cc <hex_digit+0x39>\n     8c7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     8cc:\t5d                   \tpop    %rbp\n     8cd:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall hex_digit(char a1) {\n  return a1 > Number && a1 <= Number || a1 > Number && a1 <= Number ||\n         a1 > Number && a1 <= Number;\n}", "code_t": "int __cdecl hex_digit(char <span class=\"supfact\">c</span>) {\n  return <span class=\"supfact\">c</span> > Number && <span class=\"supfact\">c</span> <= Number ||\n         <span class=\"supfact\">c</span> > Number && <span class=\"supfact\">c</span> <= Number ||\n         <span class=\"supfact\">c</span> > Number && <span class=\"supfact\">c</span> <= Number;\n}", "var": [{"name": "a1", "type": "char", "pred_name": "c", "ref_name": "c", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "rockchip-toybrick", "repo_name": "external-wpa_supplicant_8", "path": "rockchip-toybrick/external-wpa_supplicant_8/6c2672fab34303e61c1d7e93a0407c1791fe28b43ea8f5250feccdda94afd81e", "path_in_repo": "rockchip-toybrick/external-wpa_supplicant_8/hostapd/hostapd", "objdump": "000000000040f06f <hostapd_channel_list_updated>:\n  40f06f:\t55                   \tpush   %rbp\n  40f070:\t48 89 e5             \tmov    %rsp,%rbp\n  40f073:\t48 83 ec 10          \tsub    $0x10,%rsp\n  40f077:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  40f07b:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n  40f07e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40f082:\t0f b6 40 48          \tmovzbl 0x48(%rax),%eax\n  40f086:\t83 e0 01             \tand    $0x1,%eax\n  40f089:\t84 c0                \ttest   %al,%al\n  40f08b:\t74 3e                \tje     40f0cb <hostapd_channel_list_updated+0x5c>\n  40f08d:\t83 7d f4 01          \tcmpl   $0x1,-0xc(%rbp)\n  40f091:\t75 38                \tjne    40f0cb <hostapd_channel_list_updated+0x5c>\n  40f093:\tbe d8 ea 45 00       \tmov    $0x45ead8,%esi\n  40f098:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40f09d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40f0a2:\te8 bb 75 02 00       \tcallq  436662 <wpa_printf>\n  40f0a7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40f0ab:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40f0b0:\t48 89 c6             \tmov    %rax,%rsi\n  40f0b3:\tbf 10 f0 40 00       \tmov    $0x40f010,%edi\n  40f0b8:\te8 fe 46 02 00       \tcallq  4337bb <eloop_cancel_timeout>\n  40f0bd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40f0c1:\t48 89 c7             \tmov    %rax,%rdi\n  40f0c4:\te8 6c 02 00 00       \tcallq  40f335 <setup_interface2>\n  40f0c9:\teb 01                \tjmp    40f0cc <hostapd_channel_list_updated+0x5d>\n  40f0cb:\t90                   \tnop\n  40f0cc:\tc9                   \tleaveq \n  40f0cd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hostapd_channel_list_updated(__int64 a1, int a2, int a3,\n                                                int a4, int a5, int a6) {\n  __int64 result;\n  result = *(_BYTE *)(a1 + Number) & Number;\n  if ((_BYTE)result) {\n    if (a2 == Number) {\n      wpa_printf(Number, (unsigned int)String, a3, a4, a5, a6);\n      eloop_cancel_timeout(channel_list_update_timeout, a1, Number L);\n      result = setup_interface2(a1);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl hostapd_channel_list_updated(hostapd_iface *<span class=\"supfact\">iface</span>,\n                                          int <span class=\"supfact\">initiator</span>) {\n  if ((*((_BYTE *)<span class=\"supfact\">iface</span> + Number) & Number) != Number &&\n      <span class=\"supfact\">initiator</span> == Number) {\n    wpa_printf(Number, String);\n    eloop_cancel_timeout((eloop_timeout_handler)channel_list_update_timeout,\n                         <span class=\"supfact\">iface</span>, Number L);\n    setup_interface2(<span class=\"supfact\">iface</span>);\n  }\n}", "var": [{"name": "a1", "type": "hostapd_iface *", "pred_name": "iface", "ref_name": "iface", "ref_type": "hostapd_iface *"}, {"name": "a2", "type": "int", "pred_name": "initiator", "ref_name": "initiator", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "a4", "type": "int", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "a5", "type": "int", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "int", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "seagods", "repo_name": "SphereTree", "path": "seagods/SphereTree/447d469d6a47fe3e5f77e62a6fa797eba512948023c46d4c07bd371c818d957e", "path_in_repo": "seagods/SphereTree/OctaSphere2/Sphere", "objdump": "", "code_s": "void __fastcall D2Dvec D2Dvec(D2Dvec *this, const D2Dvec *a2) {\n  _QWORD *v2;\n  if (!*(_QWORD *)this)\n    *(_QWORD *)this = operator new[](Number);\n  v2 = (_QWORD *)D2Dvec GetV(a2);\n  **(_QWORD **)this = *v2;\n  *(_QWORD *)(*(_QWORD *)this + Number L) = v2[Number];\n}", "code_t": "void __cdecl D2Dvec D2Dvec(D2Dvec *const <span class=\"supfact\">this</span>,\n                           const D2Dvec *<span class=\"supfact\">rhs</span>) {\n  double *<span class=\"supfact\">rhsV</span>;\n  if (!<span class=\"supfact\">this</span>->V)\n    <span class=\"supfact\">this</span>->V = (double *)operator new[](Number);\n  <span class=\"supfact\">rhsV</span> = D2Dvec GetV(<span class=\"supfact\">rhs</span>);\n  *<span class=\"supfact\">this</span>->V = *<span class=\"supfact\">rhsV</span>;\n  <span class=\"supfact\">this</span>->V[Number] = <span class=\"supfact\">rhsV</span>[Number];\n}", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "D2Dvec *"}, {"name": "a2", "type": "__unk__", "pred_name": "a2", "ref_name": "rhs", "ref_type": "const D2Dvec *"}, {"name": "v2", "type": "_QWORD *", "pred_name": "v2", "ref_name": "rhsV", "ref_type": "double *"}], "body_in_train": false}, {"repo_owner": "rofl0r", "repo_name": "ellcc", "path": "rofl0r/ellcc/a79ec1fa3c89464517180b5dff5724343632b4c2e9740fce1fddf7598a75e47d", "path_in_repo": "rofl0r/ellcc/llvm/lib/CodeGen/Release+Asserts/TargetInstrInfo.o", "objdump": "0000000000001120 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j>:\n    1120:\t48 85 f6             \ttest   %rsi,%rsi\n    1123:\t0f 84 c7 00 00 00    \tje     11f0 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd0>\n    1129:\t4c 8b 56 20          \tmov    0x20(%rsi),%r10\n    112d:\t4d 85 d2             \ttest   %r10,%r10\n    1130:\t0f 84 ba 00 00 00    \tje     11f0 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd0>\n    1136:\t0f bf 42 18          \tmovswl 0x18(%rdx),%eax\n    113a:\t66 85 c0             \ttest   %ax,%ax\n    113d:\t0f 89 ad 00 00 00    \tjns    11f0 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd0>\n    1143:\t4c 8b 5f 08          \tmov    0x8(%rdi),%r11\n    1147:\t8b 7f 20             \tmov    0x20(%rdi),%edi\n    114a:\tf7 d0                \tnot    %eax\n    114c:\t39 c7                \tcmp    %eax,%edi\n    114e:\t0f 86 a2 00 00 00    \tjbe    11f6 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd6>\n    1154:\t48 98                \tcltq   \n    1156:\t48 c1 e0 06          \tshl    $0x6,%rax\n    115a:\t41 0f b7 54 03 06    \tmovzwl 0x6(%r11,%rax,1),%edx\n    1160:\t41 0f bf 40 18       \tmovswl 0x18(%r8),%eax\n    1165:\t66 85 c0             \ttest   %ax,%ax\n    1168:\t78 1e                \tjs     1188 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0x68>\n    116a:\t48 8d 04 92          \tlea    (%rdx,%rdx,4),%rax\n    116e:\t49 8d 04 82          \tlea    (%r10,%rax,4),%rax\n    1172:\t03 48 0c             \tadd    0xc(%rax),%ecx\n    1175:\t39 48 10             \tcmp    %ecx,0x10(%rax)\n    1178:\t76 76                \tjbe    11f0 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd0>\n    117a:\t48 8b 46 10          \tmov    0x10(%rsi),%rax\n    117e:\t8b 04 88             \tmov    (%rax,%rcx,4),%eax\n    1181:\tc3                   \tretq   \n    1182:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n    1188:\tf7 d0                \tnot    %eax\n    118a:\t39 c7                \tcmp    %eax,%edi\n    118c:\t76 68                \tjbe    11f6 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd6>\n    118e:\t48 98                \tcltq   \n    1190:\t48 8d 14 92          \tlea    (%rdx,%rdx,4),%rdx\n    1194:\t48 c1 e0 06          \tshl    $0x6,%rax\n    1198:\t49 8d 14 92          \tlea    (%r10,%rdx,4),%rdx\n    119c:\t41 0f b7 44 03 06    \tmovzwl 0x6(%r11,%rax,1),%eax\n    11a2:\t03 4a 0c             \tadd    0xc(%rdx),%ecx\n    11a5:\t39 4a 10             \tcmp    %ecx,0x10(%rdx)\n    11a8:\t76 46                \tjbe    11f0 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd0>\n    11aa:\t48 8b 7e 10          \tmov    0x10(%rsi),%rdi\n    11ae:\t8b 14 8f             \tmov    (%rdi,%rcx,4),%edx\n    11b1:\t83 fa ff             \tcmp    $0xffffffff,%edx\n    11b4:\t74 3a                \tje     11f0 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd0>\n    11b6:\t48 8d 04 80          \tlea    (%rax,%rax,4),%rax\n    11ba:\t49 8d 04 82          \tlea    (%r10,%rax,4),%rax\n    11be:\t44 03 48 0c          \tadd    0xc(%rax),%r9d\n    11c2:\t44 39 48 10          \tcmp    %r9d,0x10(%rax)\n    11c6:\t76 28                \tjbe    11f0 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd0>\n    11c8:\t42 8b 04 8f          \tmov    (%rdi,%r9,4),%eax\n    11cc:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    11cf:\t74 24                \tje     11f5 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd5>\n    11d1:\t29 c2                \tsub    %eax,%edx\n    11d3:\t8d 42 01             \tlea    0x1(%rdx),%eax\n    11d6:\t85 c0                \ttest   %eax,%eax\n    11d8:\t7e 1b                \tjle    11f5 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd5>\n    11da:\t48 8b 76 18          \tmov    0x18(%rsi),%rsi\n    11de:\t8b 0c 8e             \tmov    (%rsi,%rcx,4),%ecx\n    11e1:\t85 c9                \ttest   %ecx,%ecx\n    11e3:\t74 10                \tje     11f5 <_ZNK4llvm15TargetInstrInfo17getOperandLatencyEPKNS_18InstrItineraryDataEPNS_6SDNodeEjS5_j+0xd5>\n    11e5:\t42 3b 0c 8e          \tcmp    (%rsi,%r9,4),%ecx\n    11e9:\t0f 44 c2             \tcmove  %edx,%eax\n    11ec:\tc3                   \tretq   \n    11ed:\t0f 1f 00             \tnopl   (%rax)\n    11f0:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    11f5:\tc3                   \tretq   \n    11f6:\t50                   \tpush   %rax\n    11f7:\te8 54 f2 ff ff       \tcallq  450 <_ZNK4llvm11MCInstrInfo3getEj.isra.0.part.0>\n    11fc:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "__int64 __fastcall llvm TargetInstrInfo getOperandLatency(__int64 a1,\n                                                          _QWORD *a2,\n                                                          __int64 a3, int a4,\n                                                          __int64 a5, int a6) {\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  int v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 result;\n  int v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  int v18;\n  __int64 v19;\n  __int64 v20;\n  unsigned int v21;\n  __int64 v22;\n  int v23;\n  if (!a2)\n    return Number;\n  v6 = a2[Number];\n  if (!v6 || *(__int16 *)(a3 + Number) >= Number)\n    return Number;\n  v7 = *(_QWORD *)(a1 + Number);\n  v8 = *(unsigned int *)(a1 + Number);\n  v9 = ~*(__int16 *)(a3 + Number);\n  if ((unsigned int)v8 <= v9)\n    goto LABEL_20;\n  a3 = *(unsigned __int16 *)(v7 + ((__int64)v9 << Number) + Number);\n  if (*(__int16 *)(a5 + Number) >= Number) {\n    v10 = v6 + Number * a3;\n    v11 = (unsigned int)(*(_DWORD *)(v10 + Number) + a4);\n    if (*(_DWORD *)(v10 + Number) > (unsigned int)v11)\n      return *(unsigned int *)(a2[Number] + Number * v11);\n    return Number;\n  }\n  v13 = ~*(__int16 *)(a5 + Number);\n  if ((unsigned int)v8 <= v13)\n  LABEL_20:\n    llvm MCInstrInfo get(v8, a2, a3);\n  v14 = v6 + Number * a3;\n  v15 = *(unsigned __int16 *)(v7 + ((__int64)v13 << Number) + Number);\n  v16 = (unsigned int)(*(_DWORD *)(v14 + Number) + a4);\n  if (*(_DWORD *)(v14 + Number) <= (unsigned int)v16)\n    return Number;\n  v17 = a2[Number];\n  v18 = *(_DWORD *)(v17 + Number * v16);\n  if (v18 == Number)\n    return Number;\n  v19 = v6 + Number * v15;\n  v20 = (unsigned int)(*(_DWORD *)(v19 + Number) + a6);\n  if (*(_DWORD *)(v19 + Number) <= (unsigned int)v20)\n    return Number;\n  result = *(unsigned int *)(v17 + Number * v20);\n  if ((_DWORD)result != Number) {\n    v21 = v18 - result;\n    result = v21 + Number;\n    if ((int)result > Number) {\n      v22 = a2[Number];\n      v23 = *(_DWORD *)(v22 + Number * v16);\n      if (v23) {\n        if (v23 == *(_DWORD *)(v22 + Number * v20))\n          result = v21;\n      }\n    }\n  }\n  return result;\n}", "code_t": "__int64 __fastcall llvm TargetInstrInfo\ngetOperandLatency(__int64 <span class=\"supfact\">a1</span>, _QWORD *<span class=\"supfact\">a2</span>,\n                  __int64 <span class=\"supfact\">a3</span>, int <span class=\"supfact\">a4</span>,\n                  __int64 <span class=\"supfact\">a5</span>, int <span class=\"supfact\">a6</span>) {\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 v8;\n  int v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 result;\n  int v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  int v18;\n  __int64 v19;\n  __int64 v20;\n  unsigned int v21;\n  __int64 v22;\n  int v23;\n  if (!<span class=\"supfact\">a2</span>)\n    return Number;\n  <span class=\"supfact\">v6</span> = <span class=\"supfact\">a2</span>[Number];\n  if (!<span class=\"supfact\">v6</span> ||\n      *(__int16 *)(<span class=\"supfact\">a3</span> + Number) >= Number)\n    return Number;\n  <span class=\"supfact\">v7</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  v8 = *(unsigned int *)(<span class=\"supfact\">a1</span> + Number);\n  v9 = ~*(__int16 *)(<span class=\"supfact\">a3</span> + Number);\n  if ((unsigned int)v8 <= v9)\n    goto LABEL_20;\n  <span class=\"supfact\">a3</span> = *(unsigned __int16 *)(<span class=\"supfact\">v7</span> +\n                                             ((__int64)v9 << Number) + Number);\n  if (*(__int16 *)(<span class=\"supfact\">a5</span> + Number) >= Number) {\n    v10 = <span class=\"supfact\">v6</span> + Number * <span class=\"supfact\">a3</span>;\n    v11 = (unsigned int)(*(_DWORD *)(v10 + Number) + <span class=\"supfact\">a4</span>);\n    if (*(_DWORD *)(v10 + Number) > (unsigned int)v11)\n      return *(unsigned int *)(<span class=\"supfact\">a2</span>[Number] + Number * v11);\n    return Number;\n  }\n  v13 = ~*(__int16 *)(<span class=\"supfact\">a5</span> + Number);\n  if ((unsigned int)v8 <= v13)\n  LABEL_20:\n    llvm MCInstrInfo get(v8, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>);\n  v14 = <span class=\"supfact\">v6</span> + Number * <span class=\"supfact\">a3</span>;\n  v15 = *(unsigned __int16 *)(<span class=\"supfact\">v7</span> + ((__int64)v13 << Number) +\n                              Number);\n  v16 = (unsigned int)(*(_DWORD *)(v14 + Number) + <span class=\"supfact\">a4</span>);\n  if (*(_DWORD *)(v14 + Number) <= (unsigned int)v16)\n    return Number;\n  v17 = <span class=\"supfact\">a2</span>[Number];\n  v18 = *(_DWORD *)(v17 + Number * v16);\n  if (v18 == Number)\n    return Number;\n  v19 = <span class=\"supfact\">v6</span> + Number * v15;\n  v20 = (unsigned int)(*(_DWORD *)(v19 + Number) + <span class=\"supfact\">a6</span>);\n  if (*(_DWORD *)(v19 + Number) <= (unsigned int)v20)\n    return Number;\n  result = *(unsigned int *)(v17 + Number * v20);\n  if ((_DWORD)result != Number) {\n    v21 = v18 - result;\n    result = v21 + Number;\n    if ((int)result > Number) {\n      v22 = <span class=\"supfact\">a2</span>[Number];\n      v23 = *(_DWORD *)(v22 + Number * v16);\n      if (v23) {\n        if (v23 == *(_DWORD *)(v22 + Number * v20))\n          result = v21;\n      }\n    }\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "_QWORD *"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "__int64"}, {"name": "a4", "type": "unsigned int", "pred_name": "a4", "ref_name": "a4", "ref_type": "int"}, {"name": "a5", "type": "__int64", "pred_name": "a5", "ref_name": "a5", "ref_type": "__int64"}, {"name": "a6", "type": "int", "pred_name": "a6", "ref_name": "a6", "ref_type": "int"}, {"name": "v6", "type": "__int64", "pred_name": "v6", "ref_name": "v6", "ref_type": "__int64"}, {"name": "v7", "type": "__int64", "pred_name": "v7", "ref_name": "v7", "ref_type": "__int64"}], "body_in_train": false}]