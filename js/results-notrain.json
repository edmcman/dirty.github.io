[{"repo_owner": "Alhadis", "repo_name": "Research-Unix-v9", "path": "Alhadis/Research-Unix-v9/85e6a3d09ccb46f811b85cc3d3e73e7bb41ac640fac1d8a6aff3c465412335b8", "path_in_repo": "Alhadis/Research-Unix-v9/v9/X11/src/X.V11R1/lib/oldXtk/ScrollMgr.o", "objdump": "000000000000075c <XtScrollMgrCreate>:\n     75c:\t55                   \tpush   %rbp\n     75d:\t48 89 e5             \tmov    %rsp,%rbp\n     760:\t53                   \tpush   %rbx\n     761:\t48 83 ec 78          \tsub    $0x78,%rsp\n     765:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n     769:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n     76d:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n     771:\t89 4d 84             \tmov    %ecx,-0x7c(%rbp)\n     774:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 77a <XtScrollMgrCreate+0x1e>\n     77a:\t85 c0                \ttest   %eax,%eax\n     77c:\t75 0a                \tjne    788 <XtScrollMgrCreate+0x2c>\n     77e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     783:\te8 78 f8 ff ff       \tcallq  0 <ScrollBarMgrInitialize>\n     788:\tbf f0 00 00 00       \tmov    $0xf0,%edi\n     78d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     792:\te8 00 00 00 00       \tcallq  797 <XtScrollMgrCreate+0x3b>\n     797:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     79b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7a2 <XtScrollMgrCreate+0x46>\n     7a2:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 7a9 <XtScrollMgrCreate+0x4d>\n     7a9:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 7b0 <XtScrollMgrCreate+0x54>\n     7b0:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 7b7 <XtScrollMgrCreate+0x5b>\n     7b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7be <XtScrollMgrCreate+0x62>\n     7be:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 7c5 <XtScrollMgrCreate+0x69>\n     7c5:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 7cc <XtScrollMgrCreate+0x70>\n     7cc:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 7d3 <XtScrollMgrCreate+0x77>\n     7d3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7da <XtScrollMgrCreate+0x7e>\n     7da:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 7e1 <XtScrollMgrCreate+0x85>\n     7e1:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 7e8 <XtScrollMgrCreate+0x8c>\n     7e8:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 7ef <XtScrollMgrCreate+0x93>\n     7ef:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7f6 <XtScrollMgrCreate+0x9a>\n     7f6:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 7fd <XtScrollMgrCreate+0xa1>\n     7fd:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 804 <XtScrollMgrCreate+0xa8>\n     804:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 80b <XtScrollMgrCreate+0xaf>\n     80b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 812 <XtScrollMgrCreate+0xb6>\n     812:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 819 <XtScrollMgrCreate+0xbd>\n     819:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 820 <XtScrollMgrCreate+0xc4>\n     820:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 827 <XtScrollMgrCreate+0xcb>\n     827:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 82e <XtScrollMgrCreate+0xd2>\n     82e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 835 <XtScrollMgrCreate+0xd9>\n     835:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 83c <XtScrollMgrCreate+0xe0>\n     83c:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 843 <XtScrollMgrCreate+0xe7>\n     843:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 84a <XtScrollMgrCreate+0xee>\n     84a:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 851 <XtScrollMgrCreate+0xf5>\n     851:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 858 <XtScrollMgrCreate+0xfc>\n     858:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 85f <XtScrollMgrCreate+0x103>\n     85f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 866 <XtScrollMgrCreate+0x10a>\n     866:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 86d <XtScrollMgrCreate+0x111>\n     86d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 874 <XtScrollMgrCreate+0x118>\n     874:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 87b <XtScrollMgrCreate+0x11f>\n     87b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 882 <XtScrollMgrCreate+0x126>\n     882:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 889 <XtScrollMgrCreate+0x12d>\n     889:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 890 <XtScrollMgrCreate+0x134>\n     890:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 897 <XtScrollMgrCreate+0x13b>\n     897:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 89e <XtScrollMgrCreate+0x142>\n     89e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 8a5 <XtScrollMgrCreate+0x149>\n     8a5:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 8ac <XtScrollMgrCreate+0x150>\n     8ac:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 8b3 <XtScrollMgrCreate+0x157>\n     8b3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8ba <XtScrollMgrCreate+0x15e>\n     8ba:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 8c1 <XtScrollMgrCreate+0x165>\n     8c1:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 8c8 <XtScrollMgrCreate+0x16c>\n     8c8:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 8cf <XtScrollMgrCreate+0x173>\n     8cf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8d6 <XtScrollMgrCreate+0x17a>\n     8d6:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 8dd <XtScrollMgrCreate+0x181>\n     8dd:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 8e4 <XtScrollMgrCreate+0x188>\n     8e4:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 8eb <XtScrollMgrCreate+0x18f>\n     8eb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8f2 <XtScrollMgrCreate+0x196>\n     8f2:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 8f9 <XtScrollMgrCreate+0x19d>\n     8f9:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 900 <XtScrollMgrCreate+0x1a4>\n     900:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 907 <XtScrollMgrCreate+0x1ab>\n     907:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 90e <XtScrollMgrCreate+0x1b2>\n     90e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 915 <XtScrollMgrCreate+0x1b9>\n     915:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 91c <XtScrollMgrCreate+0x1c0>\n     91c:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 923 <XtScrollMgrCreate+0x1c7>\n     923:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 92a <XtScrollMgrCreate+0x1ce>\n     92a:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 931 <XtScrollMgrCreate+0x1d5>\n     931:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 938 <XtScrollMgrCreate+0x1dc>\n     938:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 93f <XtScrollMgrCreate+0x1e3>\n     93f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     943:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 94a <XtScrollMgrCreate+0x1ee>\n     94a:\t48 8b 7d 90          \tmov    -0x70(%rbp),%rdi\n     94e:\t8b 75 84             \tmov    -0x7c(%rbp),%esi\n     951:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n     955:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     959:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n     95d:\t51                   \tpush   %rcx\n     95e:\t48 8d 4d d8          \tlea    -0x28(%rbp),%rcx\n     962:\t51                   \tpush   %rcx\n     963:\t68 00 00 00 00       \tpushq  $0x0\n     968:\t68 00 00 00 00       \tpushq  $0x0\n     96d:\t49 89 f9             \tmov    %rdi,%r9\n     970:\t41 89 f0             \tmov    %esi,%r8d\n     973:\t48 89 d1             \tmov    %rdx,%rcx\n     976:\tba 09 00 00 00       \tmov    $0x9,%edx\n     97b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     980:\t48 89 c7             \tmov    %rax,%rdi\n     983:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     988:\te8 00 00 00 00       \tcallq  98d <XtScrollMgrCreate+0x231>\n     98d:\t48 83 c4 20          \tadd    $0x20,%rsp\n     991:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     995:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 99c <XtScrollMgrCreate+0x240>\n     99c:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 9a3 <XtScrollMgrCreate+0x247>\n     9a3:\t48 89 08             \tmov    %rcx,(%rax)\n     9a6:\t48 89 58 08          \tmov    %rbx,0x8(%rax)\n     9aa:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 9b1 <XtScrollMgrCreate+0x255>\n     9b1:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 9b8 <XtScrollMgrCreate+0x25c>\n     9b8:\t48 89 48 10          \tmov    %rcx,0x10(%rax)\n     9bc:\t48 89 58 18          \tmov    %rbx,0x18(%rax)\n     9c0:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 9c7 <XtScrollMgrCreate+0x26b>\n     9c7:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 9ce <XtScrollMgrCreate+0x272>\n     9ce:\t48 89 48 20          \tmov    %rcx,0x20(%rax)\n     9d2:\t48 89 58 28          \tmov    %rbx,0x28(%rax)\n     9d6:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 9dd <XtScrollMgrCreate+0x281>\n     9dd:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 9e4 <XtScrollMgrCreate+0x288>\n     9e4:\t48 89 48 30          \tmov    %rcx,0x30(%rax)\n     9e8:\t48 89 58 38          \tmov    %rbx,0x38(%rax)\n     9ec:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 9f3 <XtScrollMgrCreate+0x297>\n     9f3:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 9fa <XtScrollMgrCreate+0x29e>\n     9fa:\t48 89 48 40          \tmov    %rcx,0x40(%rax)\n     9fe:\t48 89 58 48          \tmov    %rbx,0x48(%rax)\n     a02:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # a09 <XtScrollMgrCreate+0x2ad>\n     a09:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # a10 <XtScrollMgrCreate+0x2b4>\n     a10:\t48 89 48 50          \tmov    %rcx,0x50(%rax)\n     a14:\t48 89 58 58          \tmov    %rbx,0x58(%rax)\n     a18:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # a1f <XtScrollMgrCreate+0x2c3>\n     a1f:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # a26 <XtScrollMgrCreate+0x2ca>\n     a26:\t48 89 48 60          \tmov    %rcx,0x60(%rax)\n     a2a:\t48 89 58 68          \tmov    %rbx,0x68(%rax)\n     a2e:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # a35 <XtScrollMgrCreate+0x2d9>\n     a35:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # a3c <XtScrollMgrCreate+0x2e0>\n     a3c:\t48 89 48 70          \tmov    %rcx,0x70(%rax)\n     a40:\t48 89 58 78          \tmov    %rbx,0x78(%rax)\n     a44:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # a4b <XtScrollMgrCreate+0x2ef>\n     a4b:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # a52 <XtScrollMgrCreate+0x2f6>\n     a52:\t48 89 88 80 00 00 00 \tmov    %rcx,0x80(%rax)\n     a59:\t48 89 98 88 00 00 00 \tmov    %rbx,0x88(%rax)\n     a60:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # a67 <XtScrollMgrCreate+0x30b>\n     a67:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # a6e <XtScrollMgrCreate+0x312>\n     a6e:\t48 89 88 90 00 00 00 \tmov    %rcx,0x90(%rax)\n     a75:\t48 89 98 98 00 00 00 \tmov    %rbx,0x98(%rax)\n     a7c:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # a83 <XtScrollMgrCreate+0x327>\n     a83:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # a8a <XtScrollMgrCreate+0x32e>\n     a8a:\t48 89 88 a0 00 00 00 \tmov    %rcx,0xa0(%rax)\n     a91:\t48 89 98 a8 00 00 00 \tmov    %rbx,0xa8(%rax)\n     a98:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # a9f <XtScrollMgrCreate+0x343>\n     a9f:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # aa6 <XtScrollMgrCreate+0x34a>\n     aa6:\t48 89 88 b0 00 00 00 \tmov    %rcx,0xb0(%rax)\n     aad:\t48 89 98 b8 00 00 00 \tmov    %rbx,0xb8(%rax)\n     ab4:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # abb <XtScrollMgrCreate+0x35f>\n     abb:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # ac2 <XtScrollMgrCreate+0x366>\n     ac2:\t48 89 88 c0 00 00 00 \tmov    %rcx,0xc0(%rax)\n     ac9:\t48 89 98 c8 00 00 00 \tmov    %rbx,0xc8(%rax)\n     ad0:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # ad7 <XtScrollMgrCreate+0x37b>\n     ad7:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # ade <XtScrollMgrCreate+0x382>\n     ade:\t48 89 88 d0 00 00 00 \tmov    %rcx,0xd0(%rax)\n     ae5:\t48 89 98 d8 00 00 00 \tmov    %rbx,0xd8(%rax)\n     aec:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # af3 <XtScrollMgrCreate+0x397>\n     af3:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # afa <XtScrollMgrCreate+0x39e>\n     afa:\t48 89 88 e0 00 00 00 \tmov    %rcx,0xe0(%rax)\n     b01:\t48 89 98 e8 00 00 00 \tmov    %rbx,0xe8(%rax)\n     b08:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b0c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     b10:\t48 85 c0             \ttest   %rax,%rax\n     b13:\t0f 84 8f 00 00 00    \tje     ba8 <XtScrollMgrCreate+0x44c>\n     b19:\tc7 45 e4 1f 00 00 00 \tmovl   $0x1f,-0x1c(%rbp)\n     b20:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b24:\t8b 40 18             \tmov    0x18(%rax),%eax\n     b27:\t89 45 a0             \tmov    %eax,-0x60(%rbp)\n     b2a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b2e:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n     b31:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n     b34:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b38:\t8b 40 20             \tmov    0x20(%rax),%eax\n     b3b:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n     b3e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b42:\t8b 40 24             \tmov    0x24(%rax),%eax\n     b45:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n     b48:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b4c:\t8b 40 40             \tmov    0x40(%rax),%eax\n     b4f:\t89 45 b0             \tmov    %eax,-0x50(%rbp)\n     b52:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b56:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n     b5a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b5e:\t48 8b 00             \tmov    (%rax),%rax\n     b61:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n     b65:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     b68:\t48 89 c7             \tmov    %rax,%rdi\n     b6b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b70:\te8 00 00 00 00       \tcallq  b75 <XtScrollMgrCreate+0x419>\n     b75:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b79:\t8b 78 1c             \tmov    0x1c(%rax),%edi\n     b7c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b80:\t8b 48 18             \tmov    0x18(%rax),%ecx\n     b83:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b87:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n     b8b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b8f:\t48 8b 00             \tmov    (%rax),%rax\n     b92:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n     b96:\t41 89 f8             \tmov    %edi,%r8d\n     b99:\t48 89 c7             \tmov    %rax,%rdi\n     b9c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ba1:\te8 00 00 00 00       \tcallq  ba6 <XtScrollMgrCreate+0x44a>\n     ba6:\teb 5b                \tjmp    c03 <XtScrollMgrCreate+0x4a7>\n     ba8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bac:\t4c 8b 40 38          \tmov    0x38(%rax),%r8\n     bb0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bb4:\t8b 78 40             \tmov    0x40(%rax),%edi\n     bb7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bbb:\t44 8b 48 24          \tmov    0x24(%rax),%r9d\n     bbf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bc3:\t44 8b 50 20          \tmov    0x20(%rax),%r10d\n     bc7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bcb:\t8b 48 1c             \tmov    0x1c(%rax),%ecx\n     bce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bd2:\t8b 50 18             \tmov    0x18(%rax),%edx\n     bd5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bd9:\t48 8b 00             \tmov    (%rax),%rax\n     bdc:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n     be0:\t6a 01                \tpushq  $0x1\n     be2:\t6a 00                \tpushq  $0x0\n     be4:\t41 50                \tpush   %r8\n     be6:\t57                   \tpush   %rdi\n     be7:\t45 89 d0             \tmov    %r10d,%r8d\n     bea:\t48 89 c7             \tmov    %rax,%rdi\n     bed:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     bf2:\te8 00 00 00 00       \tcallq  bf7 <XtScrollMgrCreate+0x49b>\n     bf7:\t48 83 c4 20          \tadd    $0x20,%rsp\n     bfb:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     bff:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n     c03:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n     c07:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     c0b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c0f:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n     c13:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c17:\t48 8b 00             \tmov    (%rax),%rax\n     c1a:\t48 89 c7             \tmov    %rax,%rdi\n     c1d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c22:\te8 00 00 00 00       \tcallq  c27 <XtScrollMgrCreate+0x4cb>\n     c27:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c2b:\t48 89 c7             \tmov    %rax,%rdi\n     c2e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c33:\te8 00 00 00 00       \tcallq  c38 <XtScrollMgrCreate+0x4dc>\n     c38:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     c3c:\t48 89 c7             \tmov    %rax,%rdi\n     c3f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c44:\te8 00 00 00 00       \tcallq  c49 <XtScrollMgrCreate+0x4ed>\n     c49:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c4d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     c51:\t48 85 c0             \ttest   %rax,%rax\n     c54:\t75 4e                \tjne    ca4 <XtScrollMgrCreate+0x548>\n     c56:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c5a:\t8b 48 24             \tmov    0x24(%rax),%ecx\n     c5d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c61:\t8b 50 20             \tmov    0x20(%rax),%edx\n     c64:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c68:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n     c6c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c70:\t48 8b 00             \tmov    (%rax),%rax\n     c73:\t6a 01                \tpushq  $0x1\n     c75:\t6a 01                \tpushq  $0x1\n     c77:\t6a 00                \tpushq  $0x0\n     c79:\t6a 00                \tpushq  $0x0\n     c7b:\t41 89 c9             \tmov    %ecx,%r9d\n     c7e:\t41 89 d0             \tmov    %edx,%r8d\n     c81:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     c86:\tba 00 00 00 00       \tmov    $0x0,%edx\n     c8b:\t48 89 c7             \tmov    %rax,%rdi\n     c8e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c93:\te8 00 00 00 00       \tcallq  c98 <XtScrollMgrCreate+0x53c>\n     c98:\t48 83 c4 20          \tadd    $0x20,%rsp\n     c9c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     ca0:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n     ca4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ca8:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n     cac:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     cb0:\t48 8b 00             \tmov    (%rax),%rax\n     cb3:\t48 89 d6             \tmov    %rdx,%rsi\n     cb6:\t48 89 c7             \tmov    %rax,%rdi\n     cb9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     cbe:\te8 00 00 00 00       \tcallq  cc3 <XtScrollMgrCreate+0x567>\n     cc3:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # cc9 <XtScrollMgrCreate+0x56d>\n     cc9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ccd:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n     cd1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     cd5:\t48 8b 00             \tmov    (%rax),%rax\n     cd8:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n     cdc:\t48 89 c7             \tmov    %rax,%rdi\n     cdf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ce4:\te8 00 00 00 00       \tcallq  ce9 <XtScrollMgrCreate+0x58d>\n     ce9:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # cef <XtScrollMgrCreate+0x593>\n     cef:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     cf3:\t48 8b 70 10          \tmov    0x10(%rax),%rsi\n     cf7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     cfb:\t48 8b 00             \tmov    (%rax),%rax\n     cfe:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n     d02:\t48 89 c7             \tmov    %rax,%rdi\n     d05:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d0a:\te8 00 00 00 00       \tcallq  d0f <XtScrollMgrCreate+0x5b3>\n     d0f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d13:\tc7 40 48 00 00 00 00 \tmovl   $0x0,0x48(%rax)\n     d1a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d1e:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n     d22:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d26:\t48 8b 00             \tmov    (%rax),%rax\n     d29:\tba 00 00 00 00       \tmov    $0x0,%edx\n     d2e:\t48 89 ce             \tmov    %rcx,%rsi\n     d31:\t48 89 c7             \tmov    %rax,%rdi\n     d34:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d39:\te8 00 00 00 00       \tcallq  d3e <XtScrollMgrCreate+0x5e2>\n     d3e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d42:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n     d46:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d4a:\t48 8b 00             \tmov    (%rax),%rax\n     d4d:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     d53:\tb9 00 00 02 00       \tmov    $0x20000,%ecx\n     d58:\tba 00 00 00 00       \tmov    $0x0,%edx\n     d5d:\t48 89 c7             \tmov    %rax,%rdi\n     d60:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d65:\te8 00 00 00 00       \tcallq  d6a <XtScrollMgrCreate+0x60e>\n     d6a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d6e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     d72:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n     d76:\tc9                   \tleaveq \n     d77:\tc3                   \tretq   ", "code_s": "__int64 __fastcall XtScrollMgrCreate(__int64 <span class=\"supfact\">a1</span>,\n                                     Window <span class=\"supfact\">a2</span>,\n                                     __int64 <span class=\"supfact\">a3</span>,\n                                     unsigned int <span class=\"supfact\">a4</span>) {\n  char *v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  __int64 v21;\n  XWindowChanges <span class=\"supfact\">v25</span>;\n  __int64 <span class=\"supfact\">v26</span>;\n  __int64 <span class=\"supfact\">v27</span>;\n  unsigned int <span class=\"supfact\">v28</span>;\n  char *<span class=\"supfact\">v29</span>;\n  if (!initialized)\n    ScrollBarMgrInitialize();\n  <span class=\"supfact\">v29</span> = (char *)XtMalloc(Number L);\n  qword_16E8 = qword_13C8;\n  qword_16F0 = qword_13D0;\n  qword_16F8 = qword_13D8;\n  qword_1700 = qword_13E0;\n  qword_1708 = qword_13E8;\n  qword_1710 = qword_13F0;\n  qword_1718 = qword_13F8;\n  qword_1720 = qword_1400;\n  qword_1728 = qword_1408;\n  qword_1730 = qword_1410;\n  qword_1738 = qword_1418;\n  qword_1740 = qword_1420;\n  qword_1748 = qword_1428;\n  qword_1750 = qword_1430;\n  qword_1758 = qword_1438;\n  qword_1760 = qword_1440;\n  qword_1768 = qword_1448;\n  qword_1770 = qword_1450;\n  qword_1778 = qword_1458;\n  qword_1780 = qword_1460;\n  qword_1788 = qword_1468;\n  qword_1790 = qword_1470;\n  qword_1798 = qword_1478;\n  qword_17A0 = qword_1480;\n  qword_17A8 = qword_1488;\n  qword_17B0 = qword_1490;\n  qword_17B8 = qword_1498;\n  qword_17C0 = qword_14A0;\n  qword_17C8 = qword_14A8;\n  globaldata = <span class=\"supfact\">a1</span>;\n  XtGetResources(<span class=\"supfact\">a1</span>, resources, Number L, <span class=\"supfact\">a3</span>,\n                 <span class=\"supfact\">a4</span>, <span class=\"supfact\">a2</span>, String, String,\n                 &<span class=\"supfact\">v27</span>, &<span class=\"supfact\">v26</span>);\n  v4 = <span class=\"supfact\">v29</span>;\n  v5 = qword_16E8;\n  *(_QWORD *)<span class=\"supfact\">v29</span> = globaldata;\n  *((_QWORD *)v4 + Number) = v5;\n  v6 = qword_16F8;\n  *((_QWORD *)v4 + Number) = qword_16F0;\n  *((_QWORD *)v4 + Number) = v6;\n  v7 = qword_1708;\n  *((_QWORD *)v4 + Number) = qword_1700;\n  *((_QWORD *)v4 + Number) = v7;\n  v8 = qword_1718;\n  *((_QWORD *)v4 + Number) = qword_1710;\n  *((_QWORD *)v4 + Number) = v8;\n  v9 = qword_1728;\n  *((_QWORD *)v4 + Number) = qword_1720;\n  *((_QWORD *)v4 + Number) = v9;\n  v10 = qword_1738;\n  *((_QWORD *)v4 + Number) = qword_1730;\n  *((_QWORD *)v4 + Number) = v10;\n  v11 = qword_1748;\n  *((_QWORD *)v4 + Number) = qword_1740;\n  *((_QWORD *)v4 + Number) = v11;\n  v12 = qword_1758;\n  *((_QWORD *)v4 + Number) = qword_1750;\n  *((_QWORD *)v4 + Number) = v12;\n  v13 = qword_1768;\n  *((_QWORD *)v4 + Number) = qword_1760;\n  *((_QWORD *)v4 + Number) = v13;\n  v14 = qword_1778;\n  *((_QWORD *)v4 + Number) = qword_1770;\n  *((_QWORD *)v4 + Number) = v14;\n  v15 = qword_1788;\n  *((_QWORD *)v4 + Number) = qword_1780;\n  *((_QWORD *)v4 + Number) = v15;\n  v16 = qword_1798;\n  *((_QWORD *)v4 + Number) = qword_1790;\n  *((_QWORD *)v4 + Number) = v16;\n  v17 = qword_17A8;\n  *((_QWORD *)v4 + Number) = qword_17A0;\n  *((_QWORD *)v4 + Number) = v17;\n  v18 = qword_17B8;\n  *((_QWORD *)v4 + Number) = qword_17B0;\n  *((_QWORD *)v4 + Number) = v18;\n  v19 = qword_17C8;\n  *((_QWORD *)v4 + Number) = qword_17C0;\n  *((_QWORD *)v4 + Number) = v19;\n  if (*((_QWORD *)<span class=\"supfact\">v29</span> + Number)) {\n    <span class=\"supfact\">v28</span> = Number;\n    <span class=\"supfact\">v25</span>.x = *((_DWORD *)<span class=\"supfact\">v29</span> + Number);\n    <span class=\"supfact\">v25</span>.y = *((_DWORD *)<span class=\"supfact\">v29</span> + Number);\n    <span class=\"supfact\">v25</span>.width = *((_DWORD *)<span class=\"supfact\">v29</span> + Number);\n    <span class=\"supfact\">v25</span>.height = *((_DWORD *)<span class=\"supfact\">v29</span> + Number);\n    <span class=\"supfact\">v25</span>.border_width =\n        *((_DWORD *)<span class=\"supfact\">v29</span> + Number);\n    XConfigureWindow(*(Display **)<span class=\"supfact\">v29</span>,\n                     *((_QWORD *)<span class=\"supfact\">v29</span> + Number), Number,\n                     &<span class=\"supfact\">v25</span>);\n    XReparentWindow(*(Display **)<span class=\"supfact\">v29</span>,\n                    *((_QWORD *)<span class=\"supfact\">v29</span> + Number),\n                    <span class=\"supfact\">a2</span>,\n                    *((_DWORD *)<span class=\"supfact\">v29</span> + Number),\n                    *((_DWORD *)<span class=\"supfact\">v29</span> + Number));\n  } else {\n    v20 = XtCreateWindow(*(_QWORD *)<span class=\"supfact\">v29</span>, <span class=\"supfact\">a2</span>,\n                         *((unsigned int *)<span class=\"supfact\">v29</span> + Number),\n                         *((unsigned int *)<span class=\"supfact\">v29</span> + Number),\n                         *((unsigned int *)<span class=\"supfact\">v29</span> + Number),\n                         *((unsigned int *)<span class=\"supfact\">v29</span> + Number),\n                         *((unsigned int *)<span class=\"supfact\">v29</span> + Number),\n                         *((_QWORD *)<span class=\"supfact\">v29</span> + Number), Number L,\n                         Number L);\n    *((_QWORD *)<span class=\"supfact\">v29</span> + Number) = v20;\n  }\n  XtSetNameAndClass(*(_QWORD *)<span class=\"supfact\">v29</span>,\n                    *((_QWORD *)<span class=\"supfact\">v29</span> + Number),\n                    <span class=\"supfact\">v27</span>, <span class=\"supfact\">v26</span>);\n  XrmFreeQuarkList(<span class=\"supfact\">v27</span>);\n  XrmFreeQuarkList(<span class=\"supfact\">v26</span>);\n  if (!*((_QWORD *)<span class=\"supfact\">v29</span> + Number)) {\n    v21 = XtCreateWindow(*(_QWORD *)<span class=\"supfact\">v29</span>,\n                         *((_QWORD *)<span class=\"supfact\">v29</span> + Number), Number L,\n                         Number L,\n                         *((unsigned int *)<span class=\"supfact\">v29</span> + Number),\n                         *((unsigned int *)<span class=\"supfact\">v29</span> + Number),\n                         Number L, Number L, Number L, Number L);\n    *((_QWORD *)<span class=\"supfact\">v29</span> + Number) = v21;\n  }\n  XMapWindow(*(Display **)<span class=\"supfact\">v29</span>,\n             *((_QWORD *)<span class=\"supfact\">v29</span> + Number));\n  XSaveContext(*(Display **)<span class=\"supfact\">v29</span>,\n               *((_QWORD *)<span class=\"supfact\">v29</span> + Number), scrollBarMgrContext,\n               <span class=\"supfact\">v29</span>);\n  XSaveContext(*(Display **)<span class=\"supfact\">v29</span>,\n               *((_QWORD *)<span class=\"supfact\">v29</span> + Number), scrollBarMgrContext,\n               <span class=\"supfact\">v29</span>);\n  *((_DWORD *)<span class=\"supfact\">v29</span> + Number) = Number;\n  XtSetGeometryHandler(*(_QWORD *)<span class=\"supfact\">v29</span>,\n                       *((_QWORD *)<span class=\"supfact\">v29</span> + Number),\n                       ScrollBarGeometryRequest);\n  XtSetEventHandler(*(_QWORD *)<span class=\"supfact\">v29</span>,\n                    *((_QWORD *)<span class=\"supfact\">v29</span> + Number), HandleEvents,\n                    Number, Number L);\n  return *((_QWORD *)<span class=\"supfact\">v29</span> + Number);\n}", "code_t": "Window __cdecl XtScrollMgrCreate(Display *<span class=\"supfact\">dpy</span>,\n                                 Window <span class=\"supfact\">parent</span>,\n                                 ArgList <span class=\"supfact\">args</span>,\n                                 int <span class=\"supfact\">argCount</span>) {\n  WidgetData v4;\n  Window v5;\n  __int64 v6;\n  __int64 v7;\n  Pixel v8;\n  __int64 v9;\n  Window v10;\n  __int64 v11;\n  Display *v12;\n  __int64 v13;\n  __int64 v14;\n  Window v15;\n  __int64 v16;\n  Display *v17;\n  __int64 v18;\n  __int64 v19;\n  Window v20;\n  Window v21;\n  XWindowChanges <span class=\"supfact\">wc</span>;\n  XrmClassList <span class=\"supfact\">classes</span>;\n  XrmNameList <span class=\"supfact\">names</span>;\n  unsigned int <span class=\"supfact\">valuemask</span>;\n  WidgetData <span class=\"supfact\">data</span>;\n  if (!initialized)\n    ScrollBarMgrInitialize();\n  <span class=\"supfact\">data</span> = (WidgetData)XtMalloc(Number L);\n  globaldata.outer = globalinit.outer;\n  globaldata.frame = globalinit.frame;\n  *(_QWORD *)&globaldata.x = *(_QWORD *)&globalinit.x;\n  *(_QWORD *)&globaldata.pwidth = *(_QWORD *)&globalinit.pwidth;\n  *(_QWORD *)&globaldata.cwidth = *(_QWORD *)&globalinit.cwidth;\n  *(_QWORD *)&globaldata.cx = *(_QWORD *)&globalinit.cx;\n  globaldata.border = globalinit.border;\n  *(_QWORD *)&globaldata.borderWidth = *(_QWORD *)&globalinit.borderWidth;\n  *(_QWORD *)&globaldata.numbars = *(_QWORD *)&globalinit.numbars;\n  globaldata.bar[Number] = globalinit.bar[Number];\n  globaldata.bar[Number] = globalinit.bar[Number];\n  globaldata.bar[Number] = globalinit.bar[Number];\n  globaldata.bar[Number] = globalinit.bar[Number];\n  globaldata.<span class=\"supfact\">dpy</span> = <span class=\"supfact\">dpy</span>;\n  XtGetResources(<span class=\"supfact\">dpy</span>, resources, Number L, <span class=\"supfact\">args</span>,\n                 (unsigned int)<span class=\"supfact\">argCount</span>, <span class=\"supfact\">parent</span>,\n                 String, String, &<span class=\"supfact\">names</span>,\n                 &<span class=\"supfact\">classes</span>);\n  v4 = <span class=\"supfact\">data</span>;\n  v5 = globaldata.outer;\n  <span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span> = globaldata.<span class=\"supfact\">dpy</span>;\n  v4->outer = v5;\n  v6 = *(_QWORD *)&globaldata.x;\n  v4->frame = globaldata.frame;\n  *(_QWORD *)&v4->x = v6;\n  v7 = *(_QWORD *)&globaldata.cwidth;\n  *(_QWORD *)&v4->pwidth = *(_QWORD *)&globaldata.pwidth;\n  *(_QWORD *)&v4->cwidth = v7;\n  v8 = globaldata.border;\n  *(_QWORD *)&v4->cx = *(_QWORD *)&globaldata.cx;\n  v4->border = v8;\n  v9 = *(_QWORD *)&globaldata.numbars;\n  *(_QWORD *)&v4->borderWidth = *(_QWORD *)&globaldata.borderWidth;\n  *(_QWORD *)&v4->numbars = v9;\n  v10 = globaldata.bar[Number].sbar;\n  v4->bar[Number].<span class=\"supfact\">dpy</span> =\n      globaldata.bar[Number].<span class=\"supfact\">dpy</span>;\n  v4->bar[Number].sbar = v10;\n  v11 = *(_QWORD *)&globaldata.bar[Number].x;\n  *(_QWORD *)&v4->bar[Number].orientation =\n      *(_QWORD *)&globaldata.bar[Number].orientation;\n  *(_QWORD *)&v4->bar[Number].x = v11;\n  v12 = globaldata.bar[Number].<span class=\"supfact\">dpy</span>;\n  *(_QWORD *)&v4->bar[Number].width = *(_QWORD *)&globaldata.bar[Number].width;\n  v4->bar[Number].<span class=\"supfact\">dpy</span> = v12;\n  v13 = *(_QWORD *)&globaldata.bar[Number].orientation;\n  v4->bar[Number].sbar = globaldata.bar[Number].sbar;\n  *(_QWORD *)&v4->bar[Number].orientation = v13;\n  v14 = *(_QWORD *)&globaldata.bar[Number].width;\n  *(_QWORD *)&v4->bar[Number].x = *(_QWORD *)&globaldata.bar[Number].x;\n  *(_QWORD *)&v4->bar[Number].width = v14;\n  v15 = globaldata.bar[Number].sbar;\n  v4->bar[Number].<span class=\"supfact\">dpy</span> =\n      globaldata.bar[Number].<span class=\"supfact\">dpy</span>;\n  v4->bar[Number].sbar = v15;\n  v16 = *(_QWORD *)&globaldata.bar[Number].x;\n  *(_QWORD *)&v4->bar[Number].orientation =\n      *(_QWORD *)&globaldata.bar[Number].orientation;\n  *(_QWORD *)&v4->bar[Number].x = v16;\n  v17 = globaldata.bar[Number].<span class=\"supfact\">dpy</span>;\n  *(_QWORD *)&v4->bar[Number].width = *(_QWORD *)&globaldata.bar[Number].width;\n  v4->bar[Number].<span class=\"supfact\">dpy</span> = v17;\n  v18 = *(_QWORD *)&globaldata.bar[Number].orientation;\n  v4->bar[Number].sbar = globaldata.bar[Number].sbar;\n  *(_QWORD *)&v4->bar[Number].orientation = v18;\n  v19 = *(_QWORD *)&globaldata.bar[Number].width;\n  *(_QWORD *)&v4->bar[Number].x = *(_QWORD *)&globaldata.bar[Number].x;\n  *(_QWORD *)&v4->bar[Number].width = v19;\n  if (<span class=\"supfact\">data</span>->outer) {\n    <span class=\"supfact\">valuemask</span> = Number;\n    <span class=\"supfact\">wc</span>.x = <span class=\"supfact\">data</span>->x;\n    <span class=\"supfact\">wc</span>.y = <span class=\"supfact\">data</span>->y;\n    <span class=\"supfact\">wc</span>.width = <span class=\"supfact\">data</span>->pwidth;\n    <span class=\"supfact\">wc</span>.height = <span class=\"supfact\">data</span>->pheight;\n    <span class=\"supfact\">wc</span>.border_width = <span class=\"supfact\">data</span>->borderWidth;\n    XConfigureWindow(<span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span>,\n                     <span class=\"supfact\">data</span>->outer, Number, &<span class=\"supfact\">wc</span>);\n    XReparentWindow(<span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span>,\n                    <span class=\"supfact\">data</span>->outer, <span class=\"supfact\">parent</span>,\n                    <span class=\"supfact\">data</span>->x, <span class=\"supfact\">data</span>->y);\n  } else {\n    v20 = XtCreateWindow(\n        <span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span>, <span class=\"supfact\">parent</span>,\n        (unsigned int)<span class=\"supfact\">data</span>->x,\n        (unsigned int)<span class=\"supfact\">data</span>->y, <span class=\"supfact\">data</span>->pwidth,\n        <span class=\"supfact\">data</span>->pheight, <span class=\"supfact\">data</span>->borderWidth,\n        <span class=\"supfact\">data</span>->border, Number L, Number L);\n    <span class=\"supfact\">data</span>->outer = v20;\n  }\n  XtSetNameAndClass(<span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span>,\n                    <span class=\"supfact\">data</span>->outer, <span class=\"supfact\">names</span>,\n                    <span class=\"supfact\">classes</span>);\n  XrmFreeQuarkList(<span class=\"supfact\">names</span>);\n  XrmFreeQuarkList(<span class=\"supfact\">classes</span>);\n  if (!<span class=\"supfact\">data</span>->frame) {\n    v21 = XtCreateWindow(\n        <span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span>, <span class=\"supfact\">data</span>->outer,\n        Number L, Number L, <span class=\"supfact\">data</span>->pwidth,\n        <span class=\"supfact\">data</span>->pheight, Number L, Number L, Number L, Number L);\n    <span class=\"supfact\">data</span>->frame = v21;\n  }\n  XMapWindow(<span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span>,\n             <span class=\"supfact\">data</span>->frame);\n  XSaveContext(<span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span>,\n               <span class=\"supfact\">data</span>->outer, scrollBarMgrContext,\n               (const char *)<span class=\"supfact\">data</span>);\n  XSaveContext(<span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span>,\n               <span class=\"supfact\">data</span>->frame, scrollBarMgrContext,\n               (const char *)<span class=\"supfact\">data</span>);\n  <span class=\"supfact\">data</span>->numbars = Number;\n  XtSetGeometryHandler(<span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span>,\n                       <span class=\"supfact\">data</span>->frame, ScrollBarGeometryRequest);\n  XtSetEventHandler(<span class=\"supfact\">data</span>-><span class=\"supfact\">dpy</span>,\n                    <span class=\"supfact\">data</span>->outer, HandleEvents, Number,\n                    Number L);\n  return <span class=\"supfact\">data</span>->outer;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "__unk__", "ref_name": "dpy", "ref_type": "Display *"}, {"name": "a2", "type": "char *", "pred_name": "__unk__", "ref_name": "parent", "ref_type": "Window"}, {"name": "a3", "type": "char *", "pred_name": "__unk__", "ref_name": "args", "ref_type": "ArgList"}, {"name": "a4", "type": "int", "pred_name": "__unk__", "ref_name": "argCount", "ref_type": "int"}, {"name": "v25", "type": "__unk__", "pred_name": "__unk__", "ref_name": "wc", "ref_type": "struct XWindowChanges { int x; int y; int width; int height; int border_width; PADDING (4); Window sibling; int stack_mode; PADDING (4); }"}, {"name": "v26", "type": "disappear", "pred_name": "", "ref_name": "classes", "ref_type": "XrmClassList"}, {"name": "v27", "type": "disappear", "pred_name": "", "ref_name": "names", "ref_type": "XrmNameList"}, {"name": "v28", "type": "disappear", "pred_name": "", "ref_name": "valuemask", "ref_type": "unsigned int"}, {"name": "v29", "type": "disappear", "pred_name": "", "ref_name": "data", "ref_type": "WidgetData"}], "body_in_train": false}, {"repo_owner": "huchenmin", "repo_name": "cocos2d_project", "path": "huchenmin/cocos2d_project/6878fdbeaed0362df23711a63c10cfe0e6abe5c5407f8ad0e6632f2e58878751", "path_in_repo": "huchenmin/cocos2d_project/cocos2d-x-2.1.4/cocos2dx/proj.linux/obj/release/particle_nodes/CCParticleSystem.o", "objdump": "0000000000000530 <_ZN7cocos2d16CCParticleSystem14setEmitterModeEi>:\n     530:\t89 b7 5c 02 00 00    \tmov    %esi,0x25c(%rdi)\n     536:\tc3                   \tretq   \n     537:\t90                   \tnop\n     538:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n     53f:\t00 ", "code_s": "void __fastcall cocos2d CCParticleSystem setEmitterMode(\n    cocos2d CCParticleSystem *<span class=\"supfact\">this</span>, int <span class=\"supfact\">a2</span>) {\n  *((_DWORD *)<span class=\"supfact\">this</span> + Number) = <span class=\"supfact\">a2</span>;\n}", "code_t": "void __fastcall cocos2d CCParticleSystem setEmitterMode(\n    cocos2d CCParticleSystem *<span class=\"supfact\">this</span>, int <span class=\"supfact\">a2</span>) {\n  *((_DWORD *)<span class=\"supfact\">this</span> + Number) = <span class=\"supfact\">a2</span>;\n}", "var": [{"name": "this", "type": "cocos2d::CCParticleSystem *", "pred_name": "this", "ref_name": "this", "ref_type": "cocos2d::CCParticleSystem *"}, {"name": "a2", "type": "int", "pred_name": "a2", "ref_name": "a2", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "isDerek", "repo_name": "BTC-Device", "path": "isDerek/BTC-Device/9eb5bdb0143a63b31132ea31d83410eefa0b801b31f29f5ffc43fd093e6ca1ae", "path_in_repo": "isDerek/BTC-Device/BTC_APP/middleware/multicore/erpc/Debug/Linux/erpcsniffer/obj/erpcgen/src/types/Type.o", "objdump": "0000000000000000 <_ZNK7erpcgen10Annotation7getLangEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   c:\t8b 40 38             \tmov    0x38(%rax),%eax\n   f:\t5d                   \tpop    %rbp\n  10:\tc3                   \tretq   ", "code_s": "__int64 __fastcall erpcgen Annotation\ngetLang(erpcgen Annotation *<span class=\"supfact\">this</span>) {\n  return *((unsigned int *)<span class=\"supfact\">this</span> + Number);\n}", "code_t": "erpcgen Annotation program_lang_t __cdecl erpcgen Annotation\ngetLang(const erpcgen Annotation *const <span class=\"supfact\">this</span>) {\n  return <span class=\"supfact\">this</span>->m_lang;\n}", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "const erpcgen::Annotation *"}], "body_in_train": false}, {"repo_owner": "raziebe", "repo_name": "hyplet-virt", "path": "raziebe/hyplet-virt/038c58581d3526cc23a91c34736645277c87297eee99395ac81232bf6f501939", "path_in_repo": "raziebe/hyplet-virt/tools/testing/selftests/x86/mpx-mini-test_64", "objdump": "00000000004018ad <__si_bounds_upper>:\n  4018ad:\t55                   \tpush   %rbp\n  4018ae:\t48 89 e5             \tmov    %rsp,%rbp\n  4018b1:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  4018b5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4018b9:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  4018bd:\t5d                   \tpop    %rbp\n  4018be:\tc3                   \tretq   ", "code_s": "__int64 __fastcall _si_bounds_upper(__int64 <span class=\"supfact\">a1</span>) {\n  return *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n}", "code_t": "void *__cdecl _si_bounds_upper(siginfo_t *<span class=\"supfact\">si_0</span>) {\n  return <span class=\"supfact\">si_0</span>->_sifields._sigfault._bounds._addr_bnd._upper;\n}", "var": [{"name": "a1", "type": "siginfo_t *", "pred_name": "si_0", "ref_name": "si_0", "ref_type": "siginfo_t *"}], "body_in_train": true}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/b91df0dd35cf5646c5a75dc0470b01a9002de38c1a4bbbd76c40360aac3725bd", "path_in_repo": "AlexanderVangelov/pjsip//pjlib/bin/pjlib-test-x86_64-unknown-linux-gnu", "objdump": "", "code_s": "__int64 __fastcall on_ioqueue_read_0(__int64 <span class=\"supfact\">a1</span>,\n                                     __int64 <span class=\"supfact\">a2</span>,\n                                     __int64 <span class=\"supfact\">a3</span>) {\n  callback_read_key_0 = <span class=\"supfact\">a1</span>;\n  callback_read_op_0 = <span class=\"supfact\">a2</span>;\n  callback_read_size_0 = <span class=\"supfact\">a3</span>;\n  return (unsigned int)++callback_call_count;\n}", "code_t": "void __cdecl on_ioqueue_read_0(pj_ioqueue_key_t_0 *<span class=\"supfact\">key</span>,\n                               pj_ioqueue_op_key_t_0 *<span class=\"supfact\">op_key</span>,\n                               pj_ssize_t <span class=\"supfact\">bytes_read</span>) {\n  callback_read_key_0 = <span class=\"supfact\">key</span>;\n  callback_read_op_0 = <span class=\"supfact\">op_key</span>;\n  callback_read_size_0 = <span class=\"supfact\">bytes_read</span>;\n  ++callback_call_count;\n}", "var": [{"name": "a1", "type": "pj_ioqueue_key_t_0 *", "pred_name": "key", "ref_name": "key", "ref_type": "pj_ioqueue_key_t_0 *"}, {"name": "a2", "type": "pj_ioqueue_op_key_t_0 *", "pred_name": "op_key", "ref_name": "op_key", "ref_type": "pj_ioqueue_op_key_t_0 *"}, {"name": "a3", "type": "pj_ssize_t", "pred_name": "bytes_read", "ref_name": "bytes_read", "ref_type": "pj_ssize_t"}], "body_in_train": true}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/9d9b3cb984271790df9fd014f222508bdb151ed2c5c171fdadfc4d05e72f7a86", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Source/CMakeFiles/CMakeLib.dir/cmComputeLinkDepends.cxx.o", "objdump": "0000000000000000 <_ZNKSt6vectorIN20cmComputeLinkDepends9DependSetESaIS1_EE3endEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  18:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  1c:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  20:\t48 89 d6             \tmov    %rdx,%rsi\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZNKSt6vectorIN20cmComputeLinkDepends9DependSetESaIS1_EE3endEv+0x2b>\n  2b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  2f:\tc9                   \tleaveq \n  30:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<cmComputeLinkDepends DependSet>\nend(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  __gnu_cxx __normal_iterator<cmComputeLinkDepends DependSet const *,\n                              std vector<cmComputeLinkDepends DependSet>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>, &<span class=\"supfact\">v3</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "__int64 __fastcall std vector<cmComputeLinkDepends DependSet>\nend(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  __gnu_cxx __normal_iterator<cmComputeLinkDepends DependSet const *,\n                              std vector<cmComputeLinkDepends DependSet>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>, &<span class=\"supfact\">v3</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "v2", "type": "__int64", "pred_name": "v2", "ref_name": "v2", "ref_type": "__int64"}, {"name": "v3", "type": "__int64", "pred_name": "v3", "ref_name": "v3", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "andrey-str", "repo_name": "freeimage", "path": "andrey-str/freeimage/db41b53ed33bff83a996731d7fcdfea9e1b77a0c4202e61a535082157acc7a3d", "path_in_repo": "andrey-str/freeimage/FreeImage/Source/LibTIFF4/tif_getimage.o", "objdump": "0000000000003725 <put4bitbwtile>:\n    3725:\t55                   \tpush   %rbp\n    3726:\t48 89 e5             \tmov    %rsp,%rbp\n    3729:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    372d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    3731:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n    3734:\t89 4d c8             \tmov    %ecx,-0x38(%rbp)\n    3737:\t44 89 45 c4          \tmov    %r8d,-0x3c(%rbp)\n    373b:\t44 89 4d c0          \tmov    %r9d,-0x40(%rbp)\n    373f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3743:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n    3747:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    374b:\t8b 45 10             \tmov    0x10(%rbp),%eax\n    374e:\t89 c2                \tmov    %eax,%edx\n    3750:\tc1 ea 1f             \tshr    $0x1f,%edx\n    3753:\t01 d0                \tadd    %edx,%eax\n    3755:\td1 f8                \tsar    %eax\n    3757:\t89 45 10             \tmov    %eax,0x10(%rbp)\n    375a:\te9 d2 00 00 00       \tjmpq   3831 <put4bitbwtile+0x10c>\n    375f:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    3762:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    3765:\teb 64                \tjmp    37cb <put4bitbwtile+0xa6>\n    3767:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n    376b:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    376f:\t48 89 55 20          \tmov    %rdx,0x20(%rbp)\n    3773:\t0f b6 00             \tmovzbl (%rax),%eax\n    3776:\t0f b6 c0             \tmovzbl %al,%eax\n    3779:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    3780:\t00 \n    3781:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3785:\t48 01 d0             \tadd    %rdx,%rax\n    3788:\t48 8b 00             \tmov    (%rax),%rax\n    378b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    378f:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    3793:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    3797:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    379b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    379f:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    37a3:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    37a7:\t8b 12                \tmov    (%rdx),%edx\n    37a9:\t89 10                \tmov    %edx,(%rax)\n    37ab:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    37af:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    37b3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    37b7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    37bb:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    37bf:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    37c3:\t8b 12                \tmov    (%rdx),%edx\n    37c5:\t89 10                \tmov    %edx,(%rax)\n    37c7:\t83 6d fc 02          \tsubl   $0x2,-0x4(%rbp)\n    37cb:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n    37cf:\t77 96                \tja     3767 <put4bitbwtile+0x42>\n    37d1:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    37d5:\t74 44                \tje     381b <put4bitbwtile+0xf6>\n    37d7:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n    37db:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    37df:\t48 89 55 20          \tmov    %rdx,0x20(%rbp)\n    37e3:\t0f b6 00             \tmovzbl (%rax),%eax\n    37e6:\t0f b6 c0             \tmovzbl %al,%eax\n    37e9:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    37f0:\t00 \n    37f1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    37f5:\t48 01 d0             \tadd    %rdx,%rax\n    37f8:\t48 8b 00             \tmov    (%rax),%rax\n    37fb:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    37ff:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    3803:\t48 8d 42 04          \tlea    0x4(%rdx),%rax\n    3807:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    380b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    380f:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    3813:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    3817:\t8b 12                \tmov    (%rdx),%edx\n    3819:\t89 10                \tmov    %edx,(%rax)\n    381b:\t8b 45 18             \tmov    0x18(%rbp),%eax\n    381e:\t48 98                \tcltq   \n    3820:\t48 c1 e0 02          \tshl    $0x2,%rax\n    3824:\t48 01 45 d0          \tadd    %rax,-0x30(%rbp)\n    3828:\t8b 45 10             \tmov    0x10(%rbp),%eax\n    382b:\t48 98                \tcltq   \n    382d:\t48 01 45 20          \tadd    %rax,0x20(%rbp)\n    3831:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    3834:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    3837:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n    383a:\t85 c0                \ttest   %eax,%eax\n    383c:\t0f 85 1d ff ff ff    \tjne    375f <put4bitbwtile+0x3a>\n    3842:\t90                   \tnop\n    3843:\t90                   \tnop\n    3844:\t5d                   \tpop    %rbp\n    3845:\tc3                   \tretq   ", "code_s": "__int64 __fastcall put4bitbwtile(__int64 <span class=\"supfact\">a1</span>,\n                                 _DWORD *<span class=\"supfact\">a2</span>,\n                                 __int64 <span class=\"supfact\">a3</span>,\n                                 __int64 <span class=\"supfact\">a4</span>,\n                                 unsigned int <span class=\"supfact\">a5</span>,\n                                 unsigned int <span class=\"supfact\">a6</span>,\n                                 int <span class=\"supfact\">a7</span>, int <span class=\"supfact\">a8</span>,\n                                 unsigned __int8 *<span class=\"supfact\">a9</span>) {\n  unsigned __int8 *v9;\n  _DWORD *v10;\n  _DWORD *v11;\n  unsigned __int8 *v12;\n  _DWORD *v13;\n  _DWORD *v14;\n  __int64 result;\n  __int64 <span class=\"supfact\">v18</span>;\n  int i;\n  <span class=\"supfact\">v18</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  for (i = <span class=\"supfact\">a7</span> / Number;; <span class=\"supfact\">a9</span> += i) {\n    result = <span class=\"supfact\">a6</span>--;\n    if (!(_DWORD)result)\n      break;\n    while (<span class=\"supfact\">a5</span> > Number) {\n      v9 = <span class=\"supfact\">a9</span>++;\n      v10 = *(_DWORD **)(Number L * *v9 + <span class=\"supfact\">v18</span>);\n      *<span class=\"supfact\">a2</span> = *v10;\n      v11 = <span class=\"supfact\">a2</span> + Number;\n      <span class=\"supfact\">a2</span> += Number;\n      *v11 = v10[Number];\n      <span class=\"supfact\">a5</span> -= Number;\n    }\n    if (<span class=\"supfact\">a5</span>) {\n      v12 = <span class=\"supfact\">a9</span>++;\n      v13 = *(_DWORD **)(Number L * *v12 + <span class=\"supfact\">v18</span>);\n      v14 = <span class=\"supfact\">a2</span>++;\n      *v14 = *v13;\n    }\n    <span class=\"supfact\">a2</span> += <span class=\"supfact\">a8</span>;\n  }\n  return result;\n}", "code_t": "void __cdecl put4bitbwtile(TIFFRGBAImage *<span class=\"supfact\">img</span>,\n                           uint32 *<span class=\"supfact\">cp</span>, uint32 <span class=\"supfact\">x</span>,\n                           uint32 <span class=\"supfact\">y</span>, uint32 <span class=\"supfact\">w</span>,\n                           uint32 <span class=\"supfact\">h</span>,\n                           int32 <span class=\"supfact\">fromskew</span>,\n                           int32 <span class=\"supfact\">toskew</span>,\n                           unsigned __int8 *<span class=\"supfact\">pp</span>) {\n  unsigned __int8 *v9;\n  uint32 *v10;\n  uint32 *v11;\n  unsigned __int8 *v12;\n  uint32 *v13;\n  uint32 *v14;\n  uint32 **<span class=\"supfact\">BWmap</span>;\n  int fromskewa;\n  <span class=\"supfact\">BWmap</span> = <span class=\"supfact\">img</span>-><span class=\"supfact\">BWmap</span>;\n  for (fromskewa = <span class=\"supfact\">fromskew</span> / Number; <span class=\"supfact\">h</span>--;\n       <span class=\"supfact\">pp</span> += fromskewa) {\n    while (<span class=\"supfact\">w</span> > Number) {\n      v9 = <span class=\"supfact\">pp</span>++;\n      v10 = <span class=\"supfact\">BWmap</span>[*v9];\n      *<span class=\"supfact\">cp</span> = *v10;\n      v11 = <span class=\"supfact\">cp</span> + Number;\n      <span class=\"supfact\">cp</span> += Number;\n      *v11 = v10[Number];\n      <span class=\"supfact\">w</span> -= Number;\n    }\n    if (<span class=\"supfact\">w</span>) {\n      v12 = <span class=\"supfact\">pp</span>++;\n      v13 = <span class=\"supfact\">BWmap</span>[*v12];\n      v14 = <span class=\"supfact\">cp</span>++;\n      *v14 = *v13;\n    }\n    <span class=\"supfact\">cp</span> += <span class=\"supfact\">toskew</span>;\n  }\n}", "var": [{"name": "a1", "type": "uint32_t *", "pred_name": "dst", "ref_name": "img", "ref_type": "TIFFRGBAImage *"}, {"name": "a2", "type": "const uint8_t *", "pred_name": "src1", "ref_name": "cp", "ref_type": "uint32 *"}, {"name": "a3", "type": "const uint8_t *", "pred_name": "src2", "ref_name": "x", "ref_type": "uint32"}, {"name": "a4", "type": "const uint8_t *", "pred_name": "src3", "ref_name": "y", "ref_type": "uint32"}, {"name": "a5", "type": "unsigned int", "pred_name": "len", "ref_name": "w", "ref_type": "uint32"}, {"name": "a6", "type": "unsigned int", "pred_name": "width", "ref_name": "h", "ref_type": "uint32"}, {"name": "a7", "type": "unsigned int", "pred_name": "height", "ref_name": "fromskew", "ref_type": "int32"}, {"name": "a8", "type": "unsigned int", "pred_name": "count", "ref_name": "toskew", "ref_type": "int32"}, {"name": "a9", "type": "const uint8_t *", "pred_name": "bits", "ref_name": "pp", "ref_type": "unsigned __int8 *"}, {"name": "v18", "type": "uint32_t *", "pred_name": "d", "ref_name": "BWmap", "ref_type": "uint32 * *"}], "body_in_train": false}, {"repo_owner": "yuroc5390", "repo_name": "fuzz_target", "path": "yuroc5390/fuzz_target/56d97fe92d257b0a3c45af867b765f1f241f52c3ed4d7dc95223e0357c5a4c9f", "path_in_repo": "yuroc5390/fuzz_target/qemu_mode/qemu-2.10.0/net/colo-compare.o", "objdump": "0000000000001ba2 <find_and_check_chardev>:\n    1ba2:\t55                   \tpush   %rbp\n    1ba3:\t48 89 e5             \tmov    %rsp,%rbp\n    1ba6:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1baa:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    1bae:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    1bb2:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n    1bb6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1bba:\t48 89 c7             \tmov    %rax,%rdi\n    1bbd:\te8 00 00 00 00       \tcallq  1bc2 <find_and_check_chardev+0x20>\n    1bc2:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    1bc6:\t48 89 02             \tmov    %rax,(%rdx)\n    1bc9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1bcd:\t48 8b 00             \tmov    (%rax),%rax\n    1bd0:\t48 85 c0             \ttest   %rax,%rax\n    1bd3:\t75 39                \tjne    1c0e <find_and_check_chardev+0x6c>\n    1bd5:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1bd9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1bdd:\t49 89 d1             \tmov    %rdx,%r9\n    1be0:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 1be7 <find_and_check_chardev+0x45>\n    1be7:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1bee <find_and_check_chardev+0x4c>\n    1bee:\tba e4 02 00 00       \tmov    $0x2e4,%edx\n    1bf3:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1bfa <find_and_check_chardev+0x58>\n    1bfa:\t48 89 c7             \tmov    %rax,%rdi\n    1bfd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c02:\te8 00 00 00 00       \tcallq  1c07 <find_and_check_chardev+0x65>\n    1c07:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1c0c:\teb 59                \tjmp    1c67 <find_and_check_chardev+0xc5>\n    1c0e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1c12:\t48 8b 00             \tmov    (%rax),%rax\n    1c15:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c1a:\t48 89 c7             \tmov    %rax,%rdi\n    1c1d:\te8 00 00 00 00       \tcallq  1c22 <find_and_check_chardev+0x80>\n    1c22:\t83 f0 01             \txor    $0x1,%eax\n    1c25:\t84 c0                \ttest   %al,%al\n    1c27:\t74 39                \tje     1c62 <find_and_check_chardev+0xc0>\n    1c29:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1c2d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1c31:\t49 89 d1             \tmov    %rdx,%r9\n    1c34:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 1c3b <find_and_check_chardev+0x99>\n    1c3b:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1c42 <find_and_check_chardev+0xa0>\n    1c42:\tba ea 02 00 00       \tmov    $0x2ea,%edx\n    1c47:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1c4e <find_and_check_chardev+0xac>\n    1c4e:\t48 89 c7             \tmov    %rax,%rdi\n    1c51:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c56:\te8 00 00 00 00       \tcallq  1c5b <find_and_check_chardev+0xb9>\n    1c5b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1c60:\teb 05                \tjmp    1c67 <find_and_check_chardev+0xc5>\n    1c62:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c67:\tc9                   \tleaveq \n    1c68:\tc3                   \tretq   ", "code_s": "__int64 __fastcall find_and_check_chardev(_QWORD *<span class=\"supfact\">a1</span>,\n                                          const char *<span class=\"supfact\">a2</span>,\n                                          __int64 <span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  *<span class=\"supfact\">a1</span> = qemu_chr_find(<span class=\"supfact\">a2</span>);\n  if (*<span class=\"supfact\">a1</span>) {\n    if ((unsigned __int8)qemu_chr_has_feature(*<span class=\"supfact\">a1</span>, Number L) !=\n        Number) {\n      error_setg_internal(<span class=\"supfact\">a3</span>, String, Number L, String, String,\n                          <span class=\"supfact\">a2</span>);\n      <span class=\"supfact\">result</span> = Number L;\n    } else {\n      <span class=\"supfact\">result</span> = Number L;\n    }\n  } else {\n    error_setg_internal(<span class=\"supfact\">a3</span>, String, Number L, String, String,\n                        <span class=\"supfact\">a2</span>);\n    <span class=\"supfact\">result</span> = Number L;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl find_and_check_chardev(Chardev_0 **<span class=\"supfact\">chr</span>,\n                                   char *<span class=\"supfact\">chr_name</span>,\n                                   Error_0 **<span class=\"supfact\">errp</span>) {\n  int <span class=\"supfact\">result</span>;\n  *<span class=\"supfact\">chr</span> = (Chardev_0 *)qemu_chr_find(<span class=\"supfact\">chr_name</span>);\n  if (*<span class=\"supfact\">chr</span>) {\n    if ((unsigned __int8)qemu_chr_has_feature(*<span class=\"supfact\">chr</span>, Number L) !=\n        Number) {\n      error_setg_internal(<span class=\"supfact\">errp</span>, String, Number L, String,\n                          String, <span class=\"supfact\">chr_name</span>);\n      <span class=\"supfact\">result</span> = Number;\n    } else {\n      <span class=\"supfact\">result</span> = Number;\n    }\n  } else {\n    error_setg_internal(<span class=\"supfact\">errp</span>, String, Number L, String, String,\n                        <span class=\"supfact\">chr_name</span>);\n    <span class=\"supfact\">result</span> = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "CharDriverState_0 *", "pred_name": "chr", "ref_name": "chr", "ref_type": "Chardev_0 * *"}, {"name": "a2", "type": "const uint8_t *", "pred_name": "buf", "ref_name": "chr_name", "ref_type": "char *"}, {"name": "a3", "type": "Error_0 * *", "pred_name": "errp", "ref_name": "errp", "ref_type": "Error_0 * *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "unicorn-engine", "repo_name": "unicorn", "path": "unicorn-engine/unicorn/904aaa36a58696c7ee8715da741b120c73351093c18ae2a2d2d25057ba8d2a10", "path_in_repo": "unicorn-engine/unicorn/qemu/mips64el-softmmu/memory.o", "objdump": "0000000000000f66 <flatview_destroy_mips64el>:\n     f66:\t55                   \tpush   %rbp\n     f67:\t48 89 e5             \tmov    %rsp,%rbp\n     f6a:\t48 83 ec 20          \tsub    $0x20,%rsp\n     f6e:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     f72:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     f79:\teb 2e                \tjmp    fa9 <flatview_destroy_mips64el+0x43>\n     f7b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f7f:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n     f83:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     f86:\t48 63 d0             \tmovslq %eax,%rdx\n     f89:\t48 89 d0             \tmov    %rdx,%rax\n     f8c:\t48 c1 e0 03          \tshl    $0x3,%rax\n     f90:\t48 29 d0             \tsub    %rdx,%rax\n     f93:\t48 c1 e0 03          \tshl    $0x3,%rax\n     f97:\t48 01 c8             \tadd    %rcx,%rax\n     f9a:\t48 8b 00             \tmov    (%rax),%rax\n     f9d:\t48 89 c7             \tmov    %rax,%rdi\n     fa0:\te8 00 00 00 00       \tcallq  fa5 <flatview_destroy_mips64el+0x3f>\n     fa5:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     fa9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     fad:\t8b 50 10             \tmov    0x10(%rax),%edx\n     fb0:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     fb3:\t39 c2                \tcmp    %eax,%edx\n     fb5:\t77 c4                \tja     f7b <flatview_destroy_mips64el+0x15>\n     fb7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     fbb:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     fbf:\t48 89 c7             \tmov    %rax,%rdi\n     fc2:\te8 00 00 00 00       \tcallq  fc7 <flatview_destroy_mips64el+0x61>\n     fc7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     fcb:\t48 89 c7             \tmov    %rax,%rdi\n     fce:\te8 00 00 00 00       \tcallq  fd3 <flatview_destroy_mips64el+0x6d>\n     fd3:\t90                   \tnop\n     fd4:\tc9                   \tleaveq \n     fd5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall flatview_destroy_mips64el(__int64 <span class=\"supfact\">a1</span>) {\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;\n       *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) > <span class=\"supfact\">i</span>;\n       ++<span class=\"supfact\">i</span>)\n    memory_region_unref_mips64el(\n        *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                    Number L * (int)<span class=\"supfact\">i</span>));\n  g_free(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n  return g_free(<span class=\"supfact\">a1</span>);\n}", "code_t": "void __cdecl flatview_destroy_mips64el(FlatView_0 *<span class=\"supfact\">view</span>) {\n  unsigned int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">view</span>->nr > <span class=\"supfact\">i</span>;\n       ++<span class=\"supfact\">i</span>)\n    memory_region_unref_mips64el(\n        <span class=\"supfact\">view</span>->ranges[<span class=\"supfact\">i</span>].mr);\n  g_free(<span class=\"supfact\">view</span>->ranges);\n  g_free(<span class=\"supfact\">view</span>);\n}", "var": [{"name": "a1", "type": "FlatView_0 *", "pred_name": "view", "ref_name": "view", "ref_type": "FlatView_0 *"}, {"name": "i", "type": "unsigned int", "pred_name": "i", "ref_name": "i", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "ttsiodras", "repo_name": "asn1scc", "path": "ttsiodras/asn1scc/58ff2644d5da67eea12a3e7ec300824bb1b499501b5dfa46911bb5b4ae647ec2", "path_in_repo": "ttsiodras/asn1scc/mantis/0000411/before/b_c_out/acn.o", "objdump": "0000000000002547 <Acn_Dec_Int_BCD_ConstSize>:\n    2547:\t55                   \tpush   %rbp\n    2548:\t48 89 e5             \tmov    %rsp,%rbp\n    254b:\t48 83 ec 20          \tsub    $0x20,%rsp\n    254f:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    2553:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    2557:\t89 55 ec             \tmov    %edx,-0x14(%rbp)\n    255a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2561 <Acn_Dec_Int_BCD_ConstSize+0x1a>\n    2561:\t48 83 c0 01          \tadd    $0x1,%rax\n    2565:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 256c <Acn_Dec_Int_BCD_ConstSize+0x25>\n    256c:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    256f:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n    2573:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2577:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    257c:\t48 89 c7             \tmov    %rax,%rdi\n    257f:\te8 00 00 00 00       \tcallq  2584 <Acn_Dec_Int_BCD_ConstSize+0x3d>\n    2584:\t89 c2                \tmov    %eax,%edx\n    2586:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 258d <Acn_Dec_Int_BCD_ConstSize+0x46>\n    258d:\t48 83 c0 01          \tadd    $0x1,%rax\n    2591:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2598 <Acn_Dec_Int_BCD_ConstSize+0x51>\n    2598:\t89 d0                \tmov    %edx,%eax\n    259a:\tc9                   \tleaveq \n    259b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Acn_Dec_Int_BCD_ConstSize(__int64 <span class=\"supfact\">a1</span>,\n                                             _QWORD *<span class=\"supfact\">a2</span>,\n                                             int <span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  ++_gcov0_Acn_Dec_Int_BCD_ConstSize;\n  LODWORD(<span class=\"supfact\">result</span>) = Acn_Dec_Int_BCD_OR_ASCII_ConstSize(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>, Number);\n  ++qword_5638;\n  return (unsigned int)<span class=\"supfact\">result</span>;\n}", "code_t": "flag __cdecl Acn_Dec_Int_BCD_ConstSize(\n    BitStream *<span class=\"supfact\">pBitStrm</span>, asn1SccSint *<span class=\"supfact\">pIntVal</span>,\n    int <span class=\"supfact\">encodedSizeInNibbles</span>) {\n  flag <span class=\"supfact\">result</span>;\n  ++_gcov0_Acn_Dec_Int_BCD_ConstSize;\n  <span class=\"supfact\">result</span> = Acn_Dec_Int_BCD_OR_ASCII_ConstSize(\n      <span class=\"supfact\">pBitStrm</span>, <span class=\"supfact\">pIntVal</span>,\n      <span class=\"supfact\">encodedSizeInNibbles</span>, Number);\n  ++qword_5638;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "self_p", "ref_name": "pBitStrm", "ref_type": "BitStream *"}, {"name": "a2", "type": "__unk__", "pred_name": "__unk__", "ref_name": "pIntVal", "ref_type": "asn1SccSint *"}, {"name": "a3", "type": "int", "pred_name": "flags", "ref_name": "encodedSizeInNibbles", "ref_type": "int"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "flag"}], "body_in_train": false}, {"repo_owner": "mrayy", "repo_name": "ChampionRun", "path": "mrayy/ChampionRun/0a9c47e8b201ac60965703b9a99ab314553f8f24e98fe99a2d6774e94af78a44", "path_in_repo": "mrayy/ChampionRun/cocos2dx/proj.linux/obj/release/menu_nodes/CCMenuItem.o", "objdump": "0000000000001cb0 <_ZN7cocos2d14MenuItemSprite20initWithNormalSpriteEPNS_4NodeES2_S2_RKSt8functionIFvPNS_6ObjectEEE>:\n    1cb0:\t41 56                \tpush   %r14\n    1cb2:\t49 89 f6             \tmov    %rsi,%r14\n    1cb5:\t4c 89 c6             \tmov    %r8,%rsi\n    1cb8:\t41 55                \tpush   %r13\n    1cba:\t49 89 d5             \tmov    %rdx,%r13\n    1cbd:\t41 54                \tpush   %r12\n    1cbf:\t49 89 cc             \tmov    %rcx,%r12\n    1cc2:\t55                   \tpush   %rbp\n    1cc3:\t48 89 fd             \tmov    %rdi,%rbp\n    1cc6:\t48 83 ec 08          \tsub    $0x8,%rsp\n    1cca:\te8 00 00 00 00       \tcallq  1ccf <_ZN7cocos2d14MenuItemSprite20initWithNormalSpriteEPNS_4NodeES2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x1f>\n    1ccf:\t4c 89 f6             \tmov    %r14,%rsi\n    1cd2:\t48 89 ef             \tmov    %rbp,%rdi\n    1cd5:\te8 00 00 00 00       \tcallq  1cda <_ZN7cocos2d14MenuItemSprite20initWithNormalSpriteEPNS_4NodeES2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x2a>\n    1cda:\t4c 89 ee             \tmov    %r13,%rsi\n    1cdd:\t48 89 ef             \tmov    %rbp,%rdi\n    1ce0:\te8 00 00 00 00       \tcallq  1ce5 <_ZN7cocos2d14MenuItemSprite20initWithNormalSpriteEPNS_4NodeES2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x35>\n    1ce5:\t48 89 ef             \tmov    %rbp,%rdi\n    1ce8:\t4c 89 e6             \tmov    %r12,%rsi\n    1ceb:\te8 00 00 00 00       \tcallq  1cf0 <_ZN7cocos2d14MenuItemSprite20initWithNormalSpriteEPNS_4NodeES2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x40>\n    1cf0:\t48 8b bd b8 01 00 00 \tmov    0x1b8(%rbp),%rdi\n    1cf7:\t48 85 ff             \ttest   %rdi,%rdi\n    1cfa:\t74 1d                \tje     1d19 <_ZN7cocos2d14MenuItemSprite20initWithNormalSpriteEPNS_4NodeES2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x69>\n    1cfc:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n    1d00:\t4c 8b a0 00 01 00 00 \tmov    0x100(%rax),%r12\n    1d07:\t48 8b 07             \tmov    (%rdi),%rax\n    1d0a:\tff 90 08 01 00 00    \tcallq  *0x108(%rax)\n    1d10:\t48 89 ef             \tmov    %rbp,%rdi\n    1d13:\t48 89 c6             \tmov    %rax,%rsi\n    1d16:\t41 ff d4             \tcallq  *%r12\n    1d19:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n    1d1d:\t48 89 ef             \tmov    %rbp,%rdi\n    1d20:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1d25:\tff 90 a0 03 00 00    \tcallq  *0x3a0(%rax)\n    1d2b:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n    1d2f:\t48 89 ef             \tmov    %rbp,%rdi\n    1d32:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1d37:\tff 90 70 03 00 00    \tcallq  *0x370(%rax)\n    1d3d:\t48 83 c4 08          \tadd    $0x8,%rsp\n    1d41:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1d46:\t5d                   \tpop    %rbp\n    1d47:\t41 5c                \tpop    %r12\n    1d49:\t41 5d                \tpop    %r13\n    1d4b:\t41 5e                \tpop    %r14\n    1d4d:\tc3                   \tretq   \n    1d4e:\t66 90                \txchg   %ax,%ax", "code_s": "__int64 __fastcall cocos2d MenuItemSprite initWithNormalSprite(\n    cocos2d MenuItemSprite *<span class=\"supfact\">this</span>,\n    cocos2d Node *<span class=\"supfact\">a2</span>, cocos2d Node *<span class=\"supfact\">a3</span>,\n    cocos2d Node *<span class=\"supfact\">a4</span>, __int64 <span class=\"supfact\">a5</span>) {\n  __int64 v8;\n  void(__fastcall * <span class=\"supfact\">v9</span>)(cocos2d MenuItemSprite *, __int64);\n  __int64 <span class=\"supfact\">v10</span>;\n  cocos2d MenuItem initWithCallback((const __m128i *)<span class=\"supfact\">this</span>,\n                                    <span class=\"supfact\">a5</span>);\n  cocos2d MenuItemSprite setNormalImage(<span class=\"supfact\">this</span>,\n                                        <span class=\"supfact\">a2</span>);\n  cocos2d MenuItemSprite setSelectedImage(<span class=\"supfact\">this</span>,\n                                          <span class=\"supfact\">a3</span>);\n  cocos2d MenuItemSprite setDisabledImage(<span class=\"supfact\">this</span>,\n                                          <span class=\"supfact\">a4</span>);\n  v8 = *((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  if (v8) {\n    <span class=\"supfact\">v9</span> =\n        *(void(__fastcall **)(cocos2d MenuItemSprite *, __int64))(\n            *(_QWORD *)<span class=\"supfact\">this</span> + Number L);\n    <span class=\"supfact\">v10</span> =\n        (*(__int64(__fastcall **)(__int64))(*(_QWORD *)v8 + Number L))(v8);\n    <span class=\"supfact\">v9</span>(<span class=\"supfact\">this</span>, <span class=\"supfact\">v10</span>);\n  }\n  (*(void(__fastcall **)(cocos2d MenuItemSprite *, __int64))(\n      *(_QWORD *)<span class=\"supfact\">this</span> + Number L))(<span class=\"supfact\">this</span>,\n                                                   Number L);\n  (*(void(__fastcall **)(cocos2d MenuItemSprite *, __int64))(\n      *(_QWORD *)<span class=\"supfact\">this</span> + Number L))(<span class=\"supfact\">this</span>,\n                                                   Number L);\n  return Number L;\n}", "code_t": "__int64 __fastcall cocos2d MenuItemSprite initWithNormalSprite(\n    cocos2d MenuItemSprite *<span class=\"supfact\">this</span>,\n    cocos2d Node *<span class=\"supfact\">a2</span>, cocos2d Node *<span class=\"supfact\">a3</span>,\n    cocos2d Node *<span class=\"supfact\">a4</span>, __int64 <span class=\"supfact\">a5</span>) {\n  __int64 v8;\n  void(__fastcall * <span class=\"supfact\">v9</span>)(cocos2d MenuItemSprite *, __int64);\n  __int64 <span class=\"supfact\">v10</span>;\n  cocos2d MenuItem initWithCallback((const __m128i *)<span class=\"supfact\">this</span>,\n                                    <span class=\"supfact\">a5</span>);\n  cocos2d MenuItemSprite setNormalImage(<span class=\"supfact\">this</span>,\n                                        <span class=\"supfact\">a2</span>);\n  cocos2d MenuItemSprite setSelectedImage(<span class=\"supfact\">this</span>,\n                                          <span class=\"supfact\">a3</span>);\n  cocos2d MenuItemSprite setDisabledImage(<span class=\"supfact\">this</span>,\n                                          <span class=\"supfact\">a4</span>);\n  v8 = *((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  if (v8) {\n    <span class=\"supfact\">v9</span> =\n        *(void(__fastcall **)(cocos2d MenuItemSprite *, __int64))(\n            *(_QWORD *)<span class=\"supfact\">this</span> + Number L);\n    <span class=\"supfact\">v10</span> =\n        (*(__int64(__fastcall **)(__int64))(*(_QWORD *)v8 + Number L))(v8);\n    <span class=\"supfact\">v9</span>(<span class=\"supfact\">this</span>, <span class=\"supfact\">v10</span>);\n  }\n  (*(void(__fastcall **)(cocos2d MenuItemSprite *, __int64))(\n      *(_QWORD *)<span class=\"supfact\">this</span> + Number L))(<span class=\"supfact\">this</span>,\n                                                   Number L);\n  (*(void(__fastcall **)(cocos2d MenuItemSprite *, __int64))(\n      *(_QWORD *)<span class=\"supfact\">this</span> + Number L))(<span class=\"supfact\">this</span>,\n                                                   Number L);\n  return Number L;\n}", "var": [{"name": "this", "type": "menuDef_t *", "pred_name": "this", "ref_name": "this", "ref_type": "cocos2d::MenuItemSprite *"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "cocos2d::Node *"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "cocos2d::Node *"}, {"name": "a4", "type": "__int64", "pred_name": "a4", "ref_name": "a4", "ref_type": "cocos2d::Node *"}, {"name": "a5", "type": "__int64", "pred_name": "a5", "ref_name": "a5", "ref_type": "__int64"}, {"name": "v9", "type": "__int64", "pred_name": "v9", "ref_name": "v9", "ref_type": "void (__fastcall *)(cocos2d::MenuItemSprite *, __int64)"}, {"name": "v10", "type": "__int64", "pred_name": "v10", "ref_name": "v10", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "HexHive", "repo_name": "SMoTherSpectre", "path": "HexHive/SMoTherSpectre/2c209f77171b5fe08321610276cbd22bd36735ee22e6d011c5f5d5bc03066459", "path_in_repo": "HexHive/SMoTherSpectre/openssl_attack/openssl/test/sslapitest.o", "objdump": "0000000000002df6 <new_session_cb>:\n    2df6:\t55                   \tpush   %rbp\n    2df7:\t48 89 e5             \tmov    %rsp,%rbp\n    2dfa:\t48 83 ec 10          \tsub    $0x10,%rsp\n    2dfe:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    2e02:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    2e06:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2e0c <new_session_cb+0x16>\n    2e0c:\t83 c0 01             \tadd    $0x1,%eax\n    2e0f:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 2e15 <new_session_cb+0x1f>\n    2e15:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2e19:\t48 89 c7             \tmov    %rax,%rdi\n    2e1c:\te8 00 00 00 00       \tcallq  2e21 <new_session_cb+0x2b>\n    2e21:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    2e26:\tc9                   \tleaveq \n    2e27:\tc3                   \tretq   ", "code_s": "__int64 __fastcall new_session_cb(__int64 <span class=\"supfact\">a1</span>,\n                                  __int64 <span class=\"supfact\">a2</span>) {\n  ++new_called;\n  SSL_SESSION_free(<span class=\"supfact\">a2</span>);\n  return Number L;\n}", "code_t": "int __cdecl new_session_cb(SSL *<span class=\"supfact\">ssl</span>,\n                           SSL_SESSION *<span class=\"supfact\">sess</span>) {\n  ++new_called;\n  SSL_SESSION_free(<span class=\"supfact\">sess</span>);\n  return Number;\n}", "var": [{"name": "a1", "type": "SSL_SESSION *", "pred_name": "s", "ref_name": "ssl", "ref_type": "SSL *"}, {"name": "a2", "type": "void *", "pred_name": "ctx", "ref_name": "sess", "ref_type": "SSL_SESSION *"}], "body_in_train": false}, {"repo_owner": "Panopto", "repo_name": "panopto-ffmpeg", "path": "Panopto/panopto-ffmpeg/d1bbb79f72ca6a6b111d8e0e01ec4b1f801112fe78c15a4aeabb445dbd5f3a63", "path_in_repo": "Panopto/panopto-ffmpeg//libavcodec/hevcdsp.o", "objdump": "000000000000036e <add_residual8x8_8>:\n     36e:\t48 89 7c 24 b8       \tmov    %rdi,-0x48(%rsp)\n     373:\t48 89 74 24 b0       \tmov    %rsi,-0x50(%rsp)\n     378:\t48 89 54 24 a8       \tmov    %rdx,-0x58(%rsp)\n     37d:\t48 8b 44 24 b8       \tmov    -0x48(%rsp),%rax\n     382:\t48 89 44 24 f8       \tmov    %rax,-0x8(%rsp)\n     387:\t48 8b 44 24 b0       \tmov    -0x50(%rsp),%rax\n     38c:\t48 89 44 24 f0       \tmov    %rax,-0x10(%rsp)\n     391:\t48 8b 44 24 a8       \tmov    -0x58(%rsp),%rax\n     396:\t48 89 44 24 e8       \tmov    %rax,-0x18(%rsp)\n     39b:\tc7 44 24 e4 08 00 00 \tmovl   $0x8,-0x1c(%rsp)\n     3a2:\t00 \n     3a3:\t48 8b 44 24 f8       \tmov    -0x8(%rsp),%rax\n     3a8:\t48 89 44 24 d8       \tmov    %rax,-0x28(%rsp)\n     3ad:\tc7 44 24 d4 00 00 00 \tmovl   $0x0,-0x2c(%rsp)\n     3b4:\t00 \n     3b5:\teb 7c                \tjmp    433 <add_residual8x8_8+0xc5>\n     3b7:\tc7 44 24 d0 00 00 00 \tmovl   $0x0,-0x30(%rsp)\n     3be:\t00 \n     3bf:\teb 59                \tjmp    41a <add_residual8x8_8+0xac>\n     3c1:\t8b 44 24 d0          \tmov    -0x30(%rsp),%eax\n     3c5:\t48 63 d0             \tmovslq %eax,%rdx\n     3c8:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     3cd:\t48 01 d0             \tadd    %rdx,%rax\n     3d0:\t0f b6 00             \tmovzbl (%rax),%eax\n     3d3:\t0f b6 d0             \tmovzbl %al,%edx\n     3d6:\t48 8b 44 24 f0       \tmov    -0x10(%rsp),%rax\n     3db:\t0f b7 00             \tmovzwl (%rax),%eax\n     3de:\t98                   \tcwtl   \n     3df:\t01 c2                \tadd    %eax,%edx\n     3e1:\t8b 44 24 d0          \tmov    -0x30(%rsp),%eax\n     3e5:\t48 63 c8             \tmovslq %eax,%rcx\n     3e8:\t48 8b 44 24 d8       \tmov    -0x28(%rsp),%rax\n     3ed:\t48 01 c8             \tadd    %rcx,%rax\n     3f0:\t89 54 24 cc          \tmov    %edx,-0x34(%rsp)\n     3f4:\t8b 54 24 cc          \tmov    -0x34(%rsp),%edx\n     3f8:\tb2 00                \tmov    $0x0,%dl\n     3fa:\t85 d2                \ttest   %edx,%edx\n     3fc:\t74 0b                \tje     409 <add_residual8x8_8+0x9b>\n     3fe:\t8b 54 24 cc          \tmov    -0x34(%rsp),%edx\n     402:\tf7 da                \tneg    %edx\n     404:\tc1 fa 1f             \tsar    $0x1f,%edx\n     407:\teb 04                \tjmp    40d <add_residual8x8_8+0x9f>\n     409:\t8b 54 24 cc          \tmov    -0x34(%rsp),%edx\n     40d:\t88 10                \tmov    %dl,(%rax)\n     40f:\t48 83 44 24 f0 02    \taddq   $0x2,-0x10(%rsp)\n     415:\t83 44 24 d0 01       \taddl   $0x1,-0x30(%rsp)\n     41a:\t8b 44 24 e4          \tmov    -0x1c(%rsp),%eax\n     41e:\t3b 44 24 d0          \tcmp    -0x30(%rsp),%eax\n     422:\t7f 9d                \tjg     3c1 <add_residual8x8_8+0x53>\n     424:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     429:\t48 01 44 24 d8       \tadd    %rax,-0x28(%rsp)\n     42e:\t83 44 24 d4 01       \taddl   $0x1,-0x2c(%rsp)\n     433:\t8b 44 24 e4          \tmov    -0x1c(%rsp),%eax\n     437:\t3b 44 24 d4          \tcmp    -0x2c(%rsp),%eax\n     43b:\t0f 8f 76 ff ff ff    \tjg     3b7 <add_residual8x8_8+0x49>\n     441:\t90                   \tnop\n     442:\t90                   \tnop\n     443:\tc3                   \tretq   ", "code_s": "__int64 __fastcall add_residual8x8_8(__int64 <span class=\"supfact\">a1</span>,\n                                     __int16 *<span class=\"supfact\">a2</span>,\n                                     __int64 <span class=\"supfact\">a3</span>) {\n  int v3;\n  int v4;\n  __int64 <span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">result</span> = Number L;\n    if (<span class=\"supfact\">i</span> >= Number)\n      break;\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < Number;\n         ++<span class=\"supfact\">j</span>) {\n      v3 = *<span class=\"supfact\">a2</span> +\n           *(unsigned __int8 *)(<span class=\"supfact\">j</span> + <span class=\"supfact\">a1</span>);\n      LOBYTE(v3) = Number;\n      if (v3)\n        v4 = -(*<span class=\"supfact\">a2</span> +\n               *(unsigned __int8 *)(<span class=\"supfact\">j</span> + <span class=\"supfact\">a1</span>)) >>\n             Number;\n      else\n        LOWORD(v4) =\n            *<span class=\"supfact\">a2</span> +\n            *(unsigned __int8 *)(<span class=\"supfact\">j</span> + <span class=\"supfact\">a1</span>);\n      *(_BYTE *)(<span class=\"supfact\">j</span> + <span class=\"supfact\">a1</span>) = v4;\n      ++<span class=\"supfact\">a2</span>;\n    }\n    <span class=\"supfact\">a1</span> += <span class=\"supfact\">a3</span>;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl add_residual8x8_8(uint8_t *<span class=\"supfact\">_dst</span>,\n                               int16_t *<span class=\"supfact\">res</span>,\n                               ptrdiff_t <span class=\"supfact\">stride</span>) {\n  int v3;\n  int v4;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < Number;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < Number;\n         ++<span class=\"supfact\">j</span>) {\n      v3 = *<span class=\"supfact\">res</span> + <span class=\"supfact\">_dst</span>[<span class=\"supfact\">j</span>];\n      LOBYTE(v3) = Number;\n      if (v3)\n        v4 =\n            -(*<span class=\"supfact\">res</span> + <span class=\"supfact\">_dst</span>[<span class=\"supfact\">j</span>]) >>\n            Number;\n      else\n        LOWORD(v4) =\n            *<span class=\"supfact\">res</span> + <span class=\"supfact\">_dst</span>[<span class=\"supfact\">j</span>];\n      <span class=\"supfact\">_dst</span>[<span class=\"supfact\">j</span>] = v4;\n      ++<span class=\"supfact\">res</span>;\n    }\n    <span class=\"supfact\">_dst</span> += <span class=\"supfact\">stride</span>;\n  }\n}", "var": [{"name": "a1", "type": "uint8_t *", "pred_name": "_dst", "ref_name": "_dst", "ref_type": "uint8_t *"}, {"name": "a2", "type": "uint8_t *", "pred_name": "_src", "ref_name": "res", "ref_type": "int16_t *"}, {"name": "a3", "type": "ptrdiff_t", "pred_name": "stride", "ref_name": "stride", "ref_type": "ptrdiff_t"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "j", "type": "int", "pred_name": "j", "ref_name": "j", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "slapin", "repo_name": "q2-dev", "path": "slapin/q2-dev/2739416d1f2ab1b0bbb9cad94ee3480ce8ffce3b70415e91ce1e9a15e3014d72", "path_in_repo": "slapin/q2-dev/quake2/debugx86_64/ctf/g_weapon.o", "objdump": "000000000000124d <blaster_touch>:\n    124d:\t55                   \tpush   %rbp\n    124e:\t48 89 e5             \tmov    %rsp,%rbp\n    1251:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1255:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1259:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    125d:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    1261:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n    1265:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1269:\t48 8b 80 10 01 00 00 \tmov    0x110(%rax),%rax\n    1270:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n    1274:\t0f 84 8c 01 00 00    \tje     1406 <blaster_touch+0x1b9>\n    127a:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n    127f:\t74 1f                \tje     12a0 <blaster_touch+0x53>\n    1281:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1285:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1288:\t83 e0 04             \tand    $0x4,%eax\n    128b:\t85 c0                \ttest   %eax,%eax\n    128d:\t74 11                \tje     12a0 <blaster_touch+0x53>\n    128f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1293:\t48 89 c7             \tmov    %rax,%rdi\n    1296:\te8 00 00 00 00       \tcallq  129b <blaster_touch+0x4e>\n    129b:\te9 67 01 00 00       \tjmpq   1407 <blaster_touch+0x1ba>\n    12a0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12a4:\t48 8b 80 10 01 00 00 \tmov    0x110(%rax),%rax\n    12ab:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n    12af:\t48 85 c0             \ttest   %rax,%rax\n    12b2:\t74 23                \tje     12d7 <blaster_touch+0x8a>\n    12b4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12b8:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    12bc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12c0:\t48 8b 80 10 01 00 00 \tmov    0x110(%rax),%rax\n    12c7:\tba 02 00 00 00       \tmov    $0x2,%edx\n    12cc:\t48 89 ce             \tmov    %rcx,%rsi\n    12cf:\t48 89 c7             \tmov    %rax,%rdi\n    12d2:\te8 00 00 00 00       \tcallq  12d7 <blaster_touch+0x8a>\n    12d7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    12db:\t8b 80 7c 02 00 00    \tmov    0x27c(%rax),%eax\n    12e1:\t85 c0                \ttest   %eax,%eax\n    12e3:\t74 74                \tje     1359 <blaster_touch+0x10c>\n    12e5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12e9:\t8b 80 40 01 00 00    \tmov    0x140(%rax),%eax\n    12ef:\t83 e0 01             \tand    $0x1,%eax\n    12f2:\t85 c0                \ttest   %eax,%eax\n    12f4:\t74 09                \tje     12ff <blaster_touch+0xb2>\n    12f6:\tc7 45 fc 0a 00 00 00 \tmovl   $0xa,-0x4(%rbp)\n    12fd:\teb 07                \tjmp    1306 <blaster_touch+0xb9>\n    12ff:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n    1306:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    130a:\t8b b8 80 02 00 00    \tmov    0x280(%rax),%edi\n    1310:\t4c 8b 4d d8          \tmov    -0x28(%rbp),%r9\n    1314:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1318:\t4c 8d 50 04          \tlea    0x4(%rax),%r10\n    131c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1320:\t48 8d 88 c0 01 00 00 \tlea    0x1c0(%rax),%rcx\n    1327:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    132b:\t48 8b 90 10 01 00 00 \tmov    0x110(%rax),%rdx\n    1332:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    1336:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    133a:\t44 8b 45 fc          \tmov    -0x4(%rbp),%r8d\n    133e:\t41 50                \tpush   %r8\n    1340:\t6a 04                \tpushq  $0x4\n    1342:\t6a 01                \tpushq  $0x1\n    1344:\t57                   \tpush   %rdi\n    1345:\t4d 89 d0             \tmov    %r10,%r8\n    1348:\t48 89 c7             \tmov    %rax,%rdi\n    134b:\te8 00 00 00 00       \tcallq  1350 <blaster_touch+0x103>\n    1350:\t48 83 c4 20          \tadd    $0x20,%rsp\n    1354:\te9 9f 00 00 00       \tjmpq   13f8 <blaster_touch+0x1ab>\n    1359:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1360 <blaster_touch+0x113>\n    1360:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    1367:\tbf 03 00 00 00       \tmov    $0x3,%edi\n    136c:\tff d0                \tcallq  *%rax\n    136e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1375 <blaster_touch+0x128>\n    1375:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n    137c:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    1381:\tff d0                \tcallq  *%rax\n    1383:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 138a <blaster_touch+0x13d>\n    138a:\t48 8b 80 f0 00 00 00 \tmov    0xf0(%rax),%rax\n    1391:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1395:\t48 83 c2 04          \tadd    $0x4,%rdx\n    1399:\t48 89 d7             \tmov    %rdx,%rdi\n    139c:\tff d0                \tcallq  *%rax\n    139e:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    13a3:\t75 1c                \tjne    13c1 <blaster_touch+0x174>\n    13a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 13ac <blaster_touch+0x15f>\n    13ac:\t48 8b 90 f8 00 00 00 \tmov    0xf8(%rax),%rdx\n    13b3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 13ba <blaster_touch+0x16d>\n    13ba:\t48 89 c7             \tmov    %rax,%rdi\n    13bd:\tff d2                \tcallq  *%rdx\n    13bf:\teb 17                \tjmp    13d8 <blaster_touch+0x18b>\n    13c1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 13c8 <blaster_touch+0x17b>\n    13c8:\t48 8b 90 f8 00 00 00 \tmov    0xf8(%rax),%rdx\n    13cf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    13d3:\t48 89 c7             \tmov    %rax,%rdi\n    13d6:\tff d2                \tcallq  *%rdx\n    13d8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 13df <blaster_touch+0x192>\n    13df:\t48 8b 80 b0 00 00 00 \tmov    0xb0(%rax),%rax\n    13e6:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    13ea:\t48 83 c2 04          \tadd    $0x4,%rdx\n    13ee:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    13f3:\t48 89 d7             \tmov    %rdx,%rdi\n    13f6:\tff d0                \tcallq  *%rax\n    13f8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    13fc:\t48 89 c7             \tmov    %rax,%rdi\n    13ff:\te8 00 00 00 00       \tcallq  1404 <blaster_touch+0x1b7>\n    1404:\teb 01                \tjmp    1407 <blaster_touch+0x1ba>\n    1406:\t90                   \tnop\n    1407:\tc9                   \tleaveq \n    1408:\tc3                   \tretq   ", "code_s": "__int64 __fastcall blaster_touch(__int64 <span class=\"supfact\">a1</span>,\n                                 __int64 <span class=\"supfact\">a2</span>,\n                                 __int64 <span class=\"supfact\">a3</span>,\n                                 __int64 <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">result</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  if (<span class=\"supfact\">a2</span> != <span class=\"supfact\">result</span>) {\n    if (!<span class=\"supfact\">a4</span> ||\n        (*(_DWORD *)(<span class=\"supfact\">a4</span> + Number) & Number) == Number) {\n      if (*(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L))\n        PlayerNoise(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                    <span class=\"supfact\">a1</span> + Number, Number L);\n      if (*(_DWORD *)(<span class=\"supfact\">a2</span> + Number)) {\n        if ((*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & Number) != Number)\n          <span class=\"supfact\">v6</span> = Number;\n        else\n          <span class=\"supfact\">v6</span> = Number;\n        T_Damage(<span class=\"supfact\">a2</span>, <span class=\"supfact\">a1</span>,\n                 *(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                 <span class=\"supfact\">a1</span> + Number, <span class=\"supfact\">a1</span> + Number,\n                 <span class=\"supfact\">a3</span>,\n                 *(unsigned int *)(<span class=\"supfact\">a1</span> + Number), Number L,\n                 Number L, <span class=\"supfact\">v6</span>);\n      } else {\n        ((void(__fastcall *)(__int64))gi[Number])(Number L);\n        ((void(__fastcall *)(__int64))gi[Number])(Number L);\n        ((void(__fastcall *)(__int64))gi[Number])(<span class=\"supfact\">a1</span> + Number);\n        if (<span class=\"supfact\">a3</span>)\n          ((void(__fastcall *)(__int64))gi[Number])(<span class=\"supfact\">a3</span>);\n        else\n          ((void(__fastcall *)(void *))gi[Number])(&vec3_origin);\n        ((void(__fastcall *)(__int64, __int64))gi[Number])(\n            <span class=\"supfact\">a1</span> + Number, Number L);\n      }\n    }\n    <span class=\"supfact\">result</span> = G_FreeEdict(<span class=\"supfact\">a1</span>);\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl blaster_touch(edict_t *<span class=\"supfact\">self</span>,\n                           edict_t *<span class=\"supfact\">other</span>,\n                           cplane_t *<span class=\"supfact\">plane</span>,\n                           csurface_t *<span class=\"supfact\">surf</span>) {\n  unsigned int <span class=\"supfact\">mod</span>;\n  if (<span class=\"supfact\">other</span> != <span class=\"supfact\">self</span>->owner) {\n    if (!<span class=\"supfact\">surf</span> ||\n        (<span class=\"supfact\">surf</span>->flags & Number) == Number) {\n      if (<span class=\"supfact\">self</span>->owner->client)\n        PlayerNoise(<span class=\"supfact\">self</span>->owner, <span class=\"supfact\">self</span>->s.origin,\n                    Number L);\n      if (<span class=\"supfact\">other</span>->takedamage) {\n        if ((<span class=\"supfact\">self</span>->spawnflags & Number) != Number)\n          <span class=\"supfact\">mod</span> = Number;\n        else\n          <span class=\"supfact\">mod</span> = Number;\n        T_Damage(<span class=\"supfact\">other</span>, <span class=\"supfact\">self</span>,\n                 <span class=\"supfact\">self</span>->owner, <span class=\"supfact\">self</span>->velocity,\n                 <span class=\"supfact\">self</span>->s.origin, <span class=\"supfact\">plane</span>,\n                 (unsigned int)<span class=\"supfact\">self</span>->dmg, Number L, Number L,\n                 <span class=\"supfact\">mod</span>);\n      } else {\n        ((void(__fastcall *)(__int64))gi[Number])(Number L);\n        ((void(__fastcall *)(__int64))gi[Number])(Number L);\n        ((void(__fastcall *)(vec_t *))gi[Number])(\n            <span class=\"supfact\">self</span>->s.origin);\n        if (<span class=\"supfact\">plane</span>)\n          ((void(__fastcall *)(cplane_t *))gi[Number])(<span class=\"supfact\">plane</span>);\n        else\n          ((void(__fastcall *)(void *))gi[Number])(&vec3_origin);\n        ((void(__fastcall *)(vec_t *, __int64))gi[Number])(\n            <span class=\"supfact\">self</span>->s.origin, Number L);\n      }\n    }\n    G_FreeEdict(<span class=\"supfact\">self</span>);\n  }\n}", "var": [{"name": "a1", "type": "edict_t *", "pred_name": "self", "ref_name": "self", "ref_type": "edict_t *"}, {"name": "a2", "type": "edict_t *", "pred_name": "other", "ref_name": "other", "ref_type": "edict_t *"}, {"name": "a3", "type": "cplane_t *", "pred_name": "plane", "ref_name": "plane", "ref_type": "cplane_t *"}, {"name": "a4", "type": "csurface_t *", "pred_name": "surf", "ref_name": "surf", "ref_type": "csurface_t *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "int", "pred_name": "damage", "ref_name": "mod", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "converse2006", "repo_name": "ArduinoUno-QEMU", "path": "converse2006/ArduinoUno-QEMU/26377f0681ef29dba6113296dad42bf6042b65faa3db64a4f1ba296308d450ca", "path_in_repo": "converse2006/ArduinoUno-QEMU//mips64-softmmu/cirrus_vga.o", "objdump": "0000000000013d3e <cirrus_colorexpand_pattern_src_or_dst_32>:\n   13d3e:\t55                   \tpush   %rbp\n   13d3f:\t48 89 e5             \tmov    %rsp,%rbp\n   13d42:\t48 83 ec 70          \tsub    $0x70,%rsp\n   13d46:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n   13d4a:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n   13d4e:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n   13d52:\t89 4d a4             \tmov    %ecx,-0x5c(%rbp)\n   13d55:\t44 89 45 a0          \tmov    %r8d,-0x60(%rbp)\n   13d59:\t44 89 4d 9c          \tmov    %r9d,-0x64(%rbp)\n   13d5d:\t8b 45 10             \tmov    0x10(%rbp),%eax\n   13d60:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n   13d63:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n   13d6a:\t00 00 \n   13d6c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   13d70:\t31 c0                \txor    %eax,%eax\n   13d72:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   13d76:\t0f b6 80 65 01 00 00 \tmovzbl 0x165(%rax),%eax\n   13d7d:\t0f b6 c0             \tmovzbl %al,%eax\n   13d80:\t83 e0 07             \tand    $0x7,%eax\n   13d83:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n   13d86:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n   13d89:\tc1 e0 02             \tshl    $0x2,%eax\n   13d8c:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n   13d8f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   13d93:\t8b 80 e8 06 01 00    \tmov    0x106e8(%rax),%eax\n   13d99:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n   13d9c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   13da0:\t8b 80 e4 06 01 00    \tmov    0x106e4(%rax),%eax\n   13da6:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n   13da9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   13dad:\t8b 80 f0 06 01 00    \tmov    0x106f0(%rax),%eax\n   13db3:\t83 e0 07             \tand    $0x7,%eax\n   13db6:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n   13db9:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n   13dc0:\te9 99 00 00 00       \tjmpq   13e5e <cirrus_colorexpand_pattern_src_or_dst_32+0x120>\n   13dc5:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   13dc8:\t48 63 d0             \tmovslq %eax,%rdx\n   13dcb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13dcf:\t48 01 d0             \tadd    %rdx,%rax\n   13dd2:\t0f b6 00             \tmovzbl (%rax),%eax\n   13dd5:\t0f b6 c0             \tmovzbl %al,%eax\n   13dd8:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   13ddb:\tb8 07 00 00 00       \tmov    $0x7,%eax\n   13de0:\t2b 45 d8             \tsub    -0x28(%rbp),%eax\n   13de3:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n   13de6:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   13de9:\t48 63 d0             \tmovslq %eax,%rdx\n   13dec:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   13df0:\t48 01 d0             \tadd    %rdx,%rax\n   13df3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   13df7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   13dfa:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n   13dfd:\teb 3e                \tjmp    13e3d <cirrus_colorexpand_pattern_src_or_dst_32+0xff>\n   13dff:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   13e02:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n   13e05:\t89 c1                \tmov    %eax,%ecx\n   13e07:\td3 ea                \tshr    %cl,%edx\n   13e09:\t89 d0                \tmov    %edx,%eax\n   13e0b:\t83 e0 01             \tand    $0x1,%eax\n   13e0e:\t89 c0                \tmov    %eax,%eax\n   13e10:\t8b 44 85 f0          \tmov    -0x10(%rbp,%rax,4),%eax\n   13e14:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   13e17:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   13e1b:\t8b 00                \tmov    (%rax),%eax\n   13e1d:\t0b 45 e4             \tor     -0x1c(%rbp),%eax\n   13e20:\t89 c2                \tmov    %eax,%edx\n   13e22:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   13e26:\t89 10                \tmov    %edx,(%rax)\n   13e28:\t48 83 45 e8 04       \taddq   $0x4,-0x18(%rbp)\n   13e2d:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n   13e30:\t83 e8 01             \tsub    $0x1,%eax\n   13e33:\t83 e0 07             \tand    $0x7,%eax\n   13e36:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n   13e39:\t83 45 c8 04          \taddl   $0x4,-0x38(%rbp)\n   13e3d:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   13e40:\t3b 45 9c             \tcmp    -0x64(%rbp),%eax\n   13e43:\t7c ba                \tjl     13dff <cirrus_colorexpand_pattern_src_or_dst_32+0xc1>\n   13e45:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n   13e48:\t83 c0 01             \tadd    $0x1,%eax\n   13e4b:\t83 e0 07             \tand    $0x7,%eax\n   13e4e:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n   13e51:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n   13e54:\t48 98                \tcltq   \n   13e56:\t48 01 45 b0          \tadd    %rax,-0x50(%rbp)\n   13e5a:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   13e5e:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   13e61:\t3b 45 98             \tcmp    -0x68(%rbp),%eax\n   13e64:\t0f 8c 5b ff ff ff    \tjl     13dc5 <cirrus_colorexpand_pattern_src_or_dst_32+0x87>\n   13e6a:\t90                   \tnop\n   13e6b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   13e6f:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n   13e76:\t00 00 \n   13e78:\t74 05                \tje     13e7f <cirrus_colorexpand_pattern_src_or_dst_32+0x141>\n   13e7a:\te8 00 00 00 00       \tcallq  13e7f <cirrus_colorexpand_pattern_src_or_dst_32+0x141>\n   13e7f:\tc9                   \tleaveq \n   13e80:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall cirrus_colorexpand_pattern_src_or_dst_32(\n    __int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n    __int64 <span class=\"supfact\">a3</span>, int <span class=\"supfact\">a4</span>,\n    __int64 <span class=\"supfact\">a5</span>, int <span class=\"supfact\">a6</span>,\n    int <span class=\"supfact\">a7</span>) {\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  char <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  unsigned int <span class=\"supfact\">v14</span>;\n  _DWORD *<span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">v16</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v17</span>;\n  <span class=\"supfact\">v17</span> = __readfsqword(Number);\n  <span class=\"supfact\">v13</span> = *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) & Number;\n  <span class=\"supfact\">v16</span>[Number] = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v16</span>[Number] = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v12</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">a7</span>;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v14</span> =\n        *(unsigned __int8 *)(<span class=\"supfact\">v12</span> + <span class=\"supfact\">a3</span>);\n    <span class=\"supfact\">v11</span> = Number - <span class=\"supfact\">v13</span>;\n    <span class=\"supfact\">v15</span> =\n        (_DWORD *)(Number * <span class=\"supfact\">v13</span> + <span class=\"supfact\">a2</span>);\n    for (<span class=\"supfact\">j</span> = Number * <span class=\"supfact\">v13</span>;\n         <span class=\"supfact\">j</span> < <span class=\"supfact\">a6</span>; <span class=\"supfact\">j</span> += Number) {\n      *<span class=\"supfact\">v15</span>++ |=\n          <span class=\"supfact\">v16</span>[(<span class=\"supfact\">v14</span> >> <span class=\"supfact\">v11</span>) &\n                              Number];\n      <span class=\"supfact\">v11</span> = (<span class=\"supfact\">v11</span> - Number) & Number;\n    }\n    <span class=\"supfact\">v12</span> = ((_BYTE)<span class=\"supfact\">v12</span> + Number) & Number;\n    <span class=\"supfact\">a2</span> += <span class=\"supfact\">a4</span>;\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v17</span>;\n}", "code_t": "void __cdecl cirrus_colorexpand_pattern_src_or_dst_32(\n    CirrusVGAState_0 *<span class=\"supfact\">s</span>, uint8_t *<span class=\"supfact\">dst</span>,\n    const uint8_t *<span class=\"supfact\">src</span>, int <span class=\"supfact\">dstpitch</span>,\n    int <span class=\"supfact\">srcpitch</span>, int <span class=\"supfact\">bltwidth</span>,\n    int <span class=\"supfact\">bltheight</span>) {\n  int <span class=\"supfact\">x</span>;\n  int <span class=\"supfact\">y</span>;\n  char <span class=\"supfact\">bitpos</span>;\n  int <span class=\"supfact\">pattern_y</span>;\n  int <span class=\"supfact\">srcskipleft</span>;\n  unsigned int <span class=\"supfact\">bits</span>;\n  uint8_t *<span class=\"supfact\">d</span>;\n  uint32_t <span class=\"supfact\">colors</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v16</span>;\n  <span class=\"supfact\">v16</span> = __readfsqword(Number);\n  <span class=\"supfact\">srcskipleft</span> = <span class=\"supfact\">s</span>->vga.gr[Number] & Number;\n  <span class=\"supfact\">colors</span>[Number] = <span class=\"supfact\">s</span>->cirrus_blt_bgcol;\n  <span class=\"supfact\">colors</span>[Number] = <span class=\"supfact\">s</span>->cirrus_blt_fgcol;\n  <span class=\"supfact\">pattern_y</span> = <span class=\"supfact\">s</span>->cirrus_blt_srcaddr & Number;\n  for (<span class=\"supfact\">y</span> = Number;\n       <span class=\"supfact\">y</span> < <span class=\"supfact\">bltheight</span>; ++<span class=\"supfact\">y</span>) {\n    <span class=\"supfact\">bits</span> = <span class=\"supfact\">src</span>[<span class=\"supfact\">pattern_y</span>];\n    <span class=\"supfact\">bitpos</span> = Number - <span class=\"supfact\">srcskipleft</span>;\n    <span class=\"supfact\">d</span> =\n        &<span class=\"supfact\">dst</span>[Number * <span class=\"supfact\">srcskipleft</span>];\n    for (<span class=\"supfact\">x</span> = Number * <span class=\"supfact\">srcskipleft</span>;\n         <span class=\"supfact\">x</span> < <span class=\"supfact\">bltwidth</span>;\n         <span class=\"supfact\">x</span> += Number) {\n      *(_DWORD *)<span class=\"supfact\">d</span> |= <span class=\"supfact\">colors</span>\n          [(<span class=\"supfact\">bits</span> >> <span class=\"supfact\">bitpos</span>) & Number];\n      <span class=\"supfact\">d</span> += Number;\n      <span class=\"supfact\">bitpos</span> = (<span class=\"supfact\">bitpos</span> - Number) & Number;\n    }\n    <span class=\"supfact\">pattern_y</span> =\n        ((_BYTE)<span class=\"supfact\">pattern_y</span> + Number) & Number;\n    <span class=\"supfact\">dst</span> += <span class=\"supfact\">dstpitch</span>;\n  }\n}", "var": [{"name": "a1", "type": "CirrusVGAState_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "CirrusVGAState_0 *"}, {"name": "a2", "type": "uint8_t *", "pred_name": "dst", "ref_name": "dst", "ref_type": "uint8_t *"}, {"name": "a3", "type": "const uint8_t *", "pred_name": "src", "ref_name": "src", "ref_type": "const uint8_t *"}, {"name": "a4", "type": "int", "pred_name": "dstpitch", "ref_name": "dstpitch", "ref_type": "int"}, {"name": "a5", "type": "int", "pred_name": "srcpitch", "ref_name": "srcpitch", "ref_type": "int"}, {"name": "a6", "type": "int", "pred_name": "bltwidth", "ref_name": "bltwidth", "ref_type": "int"}, {"name": "a7", "type": "int", "pred_name": "bltheight", "ref_name": "bltheight", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "x", "ref_name": "x", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "y", "ref_name": "y", "ref_type": "int"}, {"name": "v11", "type": "char", "pred_name": "bitpos", "ref_name": "bitpos", "ref_type": "char"}, {"name": "v12", "type": "int", "pred_name": "pattern_y", "ref_name": "pattern_y", "ref_type": "int"}, {"name": "v13", "type": "int", "pred_name": "srcskipleft", "ref_name": "srcskipleft", "ref_type": "int"}, {"name": "v14", "type": "unsigned int", "pred_name": "bits", "ref_name": "bits", "ref_type": "unsigned int"}, {"name": "v15", "type": "uint8_t *", "pred_name": "d", "ref_name": "d", "ref_type": "uint8_t *"}, {"name": "v16", "type": "uint32_t[2]", "pred_name": "colors", "ref_name": "colors", "ref_type": "uint32_t[2]"}, {"name": "v17", "type": "unsigned __int64", "pred_name": "v16", "ref_name": "v16", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "darkspr1te", "repo_name": "uClinux-dist", "path": "darkspr1te/uClinux-dist/0f795d565641963f726a0f393d7d375eef0d55fb6d21f8c1c285ff7b3bd42412", "path_in_repo": "darkspr1te/uClinux-dist/user/mysql/innobase/sync/sync0sync.o", "objdump": "00000000000008ef <mutex_free>:\n     8ef:\t55                   \tpush   %rbp\n     8f0:\t48 89 e5             \tmov    %rsp,%rbp\n     8f3:\t48 83 ec 30          \tsub    $0x30,%rsp\n     8f7:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     8fb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     8ff:\t48 89 c7             \tmov    %rax,%rdi\n     902:\te8 b0 f8 ff ff       \tcallq  1b7 <mutex_get_lock_word>\n     907:\t48 85 c0             \ttest   %rax,%rax\n     90a:\t0f 94 c0             \tsete   %al\n     90d:\t0f b6 d0             \tmovzbl %al,%edx\n     910:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 917 <mutex_free+0x28>\n     917:\t48 01 d0             \tadd    %rdx,%rax\n     91a:\t48 85 c0             \ttest   %rax,%rax\n     91d:\t0f 85 c8 00 00 00    \tjne    9eb <mutex_free+0xfc>\n     923:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 92a <mutex_free+0x3b>\n     92a:\t48 89 c7             \tmov    %rax,%rdi\n     92d:\te8 00 00 00 00       \tcallq  932 <mutex_free+0x43>\n     932:\te8 00 00 00 00       \tcallq  937 <mutex_free+0x48>\n     937:\t48 89 c7             \tmov    %rax,%rdi\n     93a:\te8 00 00 00 00       \tcallq  93f <mutex_free+0x50>\n     93f:\t48 89 c2             \tmov    %rax,%rdx\n     942:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 949 <mutex_free+0x5a>\n     949:\t41 b8 09 01 00 00    \tmov    $0x109,%r8d\n     94f:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     954:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     959:\t48 89 c7             \tmov    %rax,%rdi\n     95c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     961:\te8 00 00 00 00       \tcallq  966 <mutex_free+0x77>\n     966:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 96d <mutex_free+0x7e>\n     96d:\t48 89 c1             \tmov    %rax,%rcx\n     970:\tba 3a 00 00 00       \tmov    $0x3a,%edx\n     975:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     97a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     97f:\te8 00 00 00 00       \tcallq  984 <mutex_free+0x95>\n     984:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 98b <mutex_free+0x9c>\n     98b:\t48 89 c1             \tmov    %rax,%rcx\n     98e:\tba 32 00 00 00       \tmov    $0x32,%edx\n     993:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     998:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     99d:\te8 00 00 00 00       \tcallq  9a2 <mutex_free+0xb3>\n     9a2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9a9 <mutex_free+0xba>\n     9a9:\t48 89 c1             \tmov    %rax,%rcx\n     9ac:\tba 3c 00 00 00       \tmov    $0x3c,%edx\n     9b1:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     9b6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     9bb:\te8 00 00 00 00       \tcallq  9c0 <mutex_free+0xd1>\n     9c0:\t48 c7 05 00 00 00 00 \tmovq   $0x1,0x0(%rip)        # 9cb <mutex_free+0xdc>\n     9c7:\t01 00 00 00 \n     9cb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9d2 <mutex_free+0xe3>\n     9d2:\t48 8b 00             \tmov    (%rax),%rax\n     9d5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     9d9:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     9de:\t74 0b                \tje     9eb <mutex_free+0xfc>\n     9e0:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 9eb <mutex_free+0xfc>\n     9e7:\t00 00 00 00 \n     9eb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9f2 <mutex_free+0x103>\n     9f2:\t48 85 c0             \ttest   %rax,%rax\n     9f5:\t74 3e                \tje     a35 <mutex_free+0x146>\n     9f7:\te8 00 00 00 00       \tcallq  9fc <mutex_free+0x10d>\n     9fc:\t48 89 c7             \tmov    %rax,%rdi\n     9ff:\te8 00 00 00 00       \tcallq  a04 <mutex_free+0x115>\n     a04:\t48 89 c2             \tmov    %rax,%rdx\n     a07:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a0e <mutex_free+0x11f>\n     a0e:\t41 b8 09 01 00 00    \tmov    $0x109,%r8d\n     a14:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     a19:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a1e:\t48 89 c7             \tmov    %rax,%rdi\n     a21:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a26:\te8 00 00 00 00       \tcallq  a2b <mutex_free+0x13c>\n     a2b:\tbf 00 ca 9a 3b       \tmov    $0x3b9aca00,%edi\n     a30:\te8 00 00 00 00       \tcallq  a35 <mutex_free+0x146>\n     a35:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a39:\t48 89 c7             \tmov    %rax,%rdi\n     a3c:\te8 8f f7 ff ff       \tcallq  1d0 <mutex_get_waiters>\n     a41:\t48 85 c0             \ttest   %rax,%rax\n     a44:\t0f 94 c0             \tsete   %al\n     a47:\t0f b6 d0             \tmovzbl %al,%edx\n     a4a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a51 <mutex_free+0x162>\n     a51:\t48 01 d0             \tadd    %rdx,%rax\n     a54:\t48 85 c0             \ttest   %rax,%rax\n     a57:\t0f 85 c8 00 00 00    \tjne    b25 <mutex_free+0x236>\n     a5d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a64 <mutex_free+0x175>\n     a64:\t48 89 c7             \tmov    %rax,%rdi\n     a67:\te8 00 00 00 00       \tcallq  a6c <mutex_free+0x17d>\n     a6c:\te8 00 00 00 00       \tcallq  a71 <mutex_free+0x182>\n     a71:\t48 89 c7             \tmov    %rax,%rdi\n     a74:\te8 00 00 00 00       \tcallq  a79 <mutex_free+0x18a>\n     a79:\t48 89 c2             \tmov    %rax,%rdx\n     a7c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a83 <mutex_free+0x194>\n     a83:\t41 b8 0a 01 00 00    \tmov    $0x10a,%r8d\n     a89:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     a8e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a93:\t48 89 c7             \tmov    %rax,%rdi\n     a96:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a9b:\te8 00 00 00 00       \tcallq  aa0 <mutex_free+0x1b1>\n     aa0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # aa7 <mutex_free+0x1b8>\n     aa7:\t48 89 c1             \tmov    %rax,%rcx\n     aaa:\tba 38 00 00 00       \tmov    $0x38,%edx\n     aaf:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     ab4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     ab9:\te8 00 00 00 00       \tcallq  abe <mutex_free+0x1cf>\n     abe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ac5 <mutex_free+0x1d6>\n     ac5:\t48 89 c1             \tmov    %rax,%rcx\n     ac8:\tba 32 00 00 00       \tmov    $0x32,%edx\n     acd:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     ad2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     ad7:\te8 00 00 00 00       \tcallq  adc <mutex_free+0x1ed>\n     adc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ae3 <mutex_free+0x1f4>\n     ae3:\t48 89 c1             \tmov    %rax,%rcx\n     ae6:\tba 3c 00 00 00       \tmov    $0x3c,%edx\n     aeb:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     af0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     af5:\te8 00 00 00 00       \tcallq  afa <mutex_free+0x20b>\n     afa:\t48 c7 05 00 00 00 00 \tmovq   $0x1,0x0(%rip)        # b05 <mutex_free+0x216>\n     b01:\t01 00 00 00 \n     b05:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b0c <mutex_free+0x21d>\n     b0c:\t48 8b 00             \tmov    (%rax),%rax\n     b0f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     b13:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     b18:\t74 0b                \tje     b25 <mutex_free+0x236>\n     b1a:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # b25 <mutex_free+0x236>\n     b21:\t00 00 00 00 \n     b25:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b2c <mutex_free+0x23d>\n     b2c:\t48 85 c0             \ttest   %rax,%rax\n     b2f:\t74 3e                \tje     b6f <mutex_free+0x280>\n     b31:\te8 00 00 00 00       \tcallq  b36 <mutex_free+0x247>\n     b36:\t48 89 c7             \tmov    %rax,%rdi\n     b39:\te8 00 00 00 00       \tcallq  b3e <mutex_free+0x24f>\n     b3e:\t48 89 c2             \tmov    %rax,%rdx\n     b41:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b48 <mutex_free+0x259>\n     b48:\t41 b8 0a 01 00 00    \tmov    $0x10a,%r8d\n     b4e:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     b53:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b58:\t48 89 c7             \tmov    %rax,%rdi\n     b5b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b60:\te8 00 00 00 00       \tcallq  b65 <mutex_free+0x276>\n     b65:\tbf 00 ca 9a 3b       \tmov    $0x3b9aca00,%edi\n     b6a:\te8 00 00 00 00       \tcallq  b6f <mutex_free+0x280>\n     b6f:\t48 81 7d d8 00 00 00 \tcmpq   $0x0,-0x28(%rbp)\n     b76:\t00 \n     b77:\t0f 84 d7 01 00 00    \tje     d54 <mutex_free+0x465>\n     b7d:\t48 81 7d d8 00 00 00 \tcmpq   $0x0,-0x28(%rbp)\n     b84:\t00 \n     b85:\t0f 84 c9 01 00 00    \tje     d54 <mutex_free+0x465>\n     b8b:\tba 0e 01 00 00       \tmov    $0x10e,%edx\n     b90:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b95:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     b9a:\te8 86 f6 ff ff       \tcallq  225 <mutex_enter_func>\n     b9f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ba6 <mutex_free+0x2b7>\n     ba6:\t48 85 c0             \ttest   %rax,%rax\n     ba9:\t0f 95 c0             \tsetne  %al\n     bac:\t0f b6 d0             \tmovzbl %al,%edx\n     baf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # bb6 <mutex_free+0x2c7>\n     bb6:\t48 01 d0             \tadd    %rdx,%rax\n     bb9:\t48 85 c0             \ttest   %rax,%rax\n     bbc:\t0f 85 c8 00 00 00    \tjne    c8a <mutex_free+0x39b>\n     bc2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # bc9 <mutex_free+0x2da>\n     bc9:\t48 89 c7             \tmov    %rax,%rdi\n     bcc:\te8 00 00 00 00       \tcallq  bd1 <mutex_free+0x2e2>\n     bd1:\te8 00 00 00 00       \tcallq  bd6 <mutex_free+0x2e7>\n     bd6:\t48 89 c7             \tmov    %rax,%rdi\n     bd9:\te8 00 00 00 00       \tcallq  bde <mutex_free+0x2ef>\n     bde:\t48 89 c2             \tmov    %rax,%rdx\n     be1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # be8 <mutex_free+0x2f9>\n     be8:\t41 b8 10 01 00 00    \tmov    $0x110,%r8d\n     bee:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     bf3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     bf8:\t48 89 c7             \tmov    %rax,%rdi\n     bfb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c00:\te8 00 00 00 00       \tcallq  c05 <mutex_free+0x316>\n     c05:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c0c <mutex_free+0x31d>\n     c0c:\t48 89 c1             \tmov    %rax,%rcx\n     c0f:\tba 31 00 00 00       \tmov    $0x31,%edx\n     c14:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     c19:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c1e:\te8 00 00 00 00       \tcallq  c23 <mutex_free+0x334>\n     c23:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c2a <mutex_free+0x33b>\n     c2a:\t48 89 c1             \tmov    %rax,%rcx\n     c2d:\tba 32 00 00 00       \tmov    $0x32,%edx\n     c32:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     c37:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c3c:\te8 00 00 00 00       \tcallq  c41 <mutex_free+0x352>\n     c41:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c48 <mutex_free+0x359>\n     c48:\t48 89 c1             \tmov    %rax,%rcx\n     c4b:\tba 3c 00 00 00       \tmov    $0x3c,%edx\n     c50:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     c55:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c5a:\te8 00 00 00 00       \tcallq  c5f <mutex_free+0x370>\n     c5f:\t48 c7 05 00 00 00 00 \tmovq   $0x1,0x0(%rip)        # c6a <mutex_free+0x37b>\n     c66:\t01 00 00 00 \n     c6a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c71 <mutex_free+0x382>\n     c71:\t48 8b 00             \tmov    (%rax),%rax\n     c74:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     c78:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     c7d:\t74 0b                \tje     c8a <mutex_free+0x39b>\n     c7f:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # c8a <mutex_free+0x39b>\n     c86:\t00 00 00 00 \n     c8a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c91 <mutex_free+0x3a2>\n     c91:\t48 85 c0             \ttest   %rax,%rax\n     c94:\t74 3e                \tje     cd4 <mutex_free+0x3e5>\n     c96:\te8 00 00 00 00       \tcallq  c9b <mutex_free+0x3ac>\n     c9b:\t48 89 c7             \tmov    %rax,%rdi\n     c9e:\te8 00 00 00 00       \tcallq  ca3 <mutex_free+0x3b4>\n     ca3:\t48 89 c2             \tmov    %rax,%rdx\n     ca6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cad <mutex_free+0x3be>\n     cad:\t41 b8 10 01 00 00    \tmov    $0x110,%r8d\n     cb3:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     cb8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     cbd:\t48 89 c7             \tmov    %rax,%rdi\n     cc0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     cc5:\te8 00 00 00 00       \tcallq  cca <mutex_free+0x3db>\n     cca:\tbf 00 ca 9a 3b       \tmov    $0x3b9aca00,%edi\n     ccf:\te8 00 00 00 00       \tcallq  cd4 <mutex_free+0x3e5>\n     cd4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cdb <mutex_free+0x3ec>\n     cdb:\t48 83 e8 01          \tsub    $0x1,%rax\n     cdf:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # ce6 <mutex_free+0x3f7>\n     ce6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     cea:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n     cee:\t48 85 c0             \ttest   %rax,%rax\n     cf1:\t74 16                \tje     d09 <mutex_free+0x41a>\n     cf3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     cf7:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n     cfb:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     cff:\t48 8b 52 38          \tmov    0x38(%rdx),%rdx\n     d03:\t48 89 50 38          \tmov    %rdx,0x38(%rax)\n     d07:\teb 0f                \tjmp    d18 <mutex_free+0x429>\n     d09:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d0d:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     d11:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # d18 <mutex_free+0x429>\n     d18:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d1c:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     d20:\t48 85 c0             \ttest   %rax,%rax\n     d23:\t74 16                \tje     d3b <mutex_free+0x44c>\n     d25:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d29:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     d2d:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     d31:\t48 8b 52 40          \tmov    0x40(%rdx),%rdx\n     d35:\t48 89 50 40          \tmov    %rdx,0x40(%rax)\n     d39:\teb 0f                \tjmp    d4a <mutex_free+0x45b>\n     d3b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d3f:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n     d43:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # d4a <mutex_free+0x45b>\n     d4a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     d4f:\te8 99 f4 ff ff       \tcallq  1ed <mutex_exit>\n     d54:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d58:\t48 83 c0 08          \tadd    $0x8,%rax\n     d5c:\t48 89 c7             \tmov    %rax,%rdi\n     d5f:\te8 00 00 00 00       \tcallq  d64 <mutex_free+0x475>\n     d64:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d68:\t48 c7 40 78 00 00 00 \tmovq   $0x0,0x78(%rax)\n     d6f:\t00 \n     d70:\t90                   \tnop\n     d71:\tc9                   \tleaveq \n     d72:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mutex_free(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 result;\n  if (!((mutex_get_lock_word(<span class=\"supfact\">a1</span>) == Number) + ut_dbg_zero)) {\n    ut_print_timestamp(stderr);\n    v1 = os_thread_get_curr_id();\n    v2 = os_thread_pf(v1);\n    fprintf(stderr, String, v2, String, Number L);\n    fwrite(String, Number, Number, stderr);\n    fwrite(String, Number, Number, stderr);\n    fwrite(String, Number, Number, stderr);\n    ut_dbg_stop_threads = Number L;\n    if (*ut_dbg_null_ptr)\n      ut_dbg_null_ptr = Number L;\n  }\n  if (ut_dbg_stop_threads) {\n    v3 = os_thread_get_curr_id();\n    v4 = os_thread_pf(v3);\n    fprintf(stderr, String, v4, String, Number L);\n    os_thread_sleep(Number L);\n  }\n  if (!((mutex_get_waiters(<span class=\"supfact\">a1</span>) == Number) + ut_dbg_zero)) {\n    ut_print_timestamp(stderr);\n    v5 = os_thread_get_curr_id();\n    v6 = os_thread_pf(v5);\n    fprintf(stderr, String, v6, String, Number L);\n    fwrite(String, Number, Number, stderr);\n    fwrite(String, Number, Number, stderr);\n    fwrite(String, Number, Number, stderr);\n    ut_dbg_stop_threads = Number L;\n    if (*ut_dbg_null_ptr)\n      ut_dbg_null_ptr = Number L;\n  }\n  if (ut_dbg_stop_threads) {\n    v7 = os_thread_get_curr_id();\n    v8 = os_thread_pf(v7);\n    fprintf(stderr, String, v8, String, Number L);\n    os_thread_sleep(Number L);\n  }\n  if ((char *)<span class=\"supfact\">a1</span> != mutex_list_mutex &&\n      (char *)<span class=\"supfact\">a1</span> != sync_thread_mutex) {\n    mutex_enter_func((__int64)mutex_list_mutex, (__int64)String, Number L);\n    if (!((mutex_list[Number] != Number) + ut_dbg_zero)) {\n      ut_print_timestamp(stderr);\n      v9 = os_thread_get_curr_id();\n      v10 = os_thread_pf(v9);\n      fprintf(stderr, String, v10, String, Number L);\n      fwrite(String, Number, Number, stderr);\n      fwrite(String, Number, Number, stderr);\n      fwrite(String, Number, Number, stderr);\n      ut_dbg_stop_threads = Number L;\n      if (*ut_dbg_null_ptr)\n        ut_dbg_null_ptr = Number L;\n    }\n    if (ut_dbg_stop_threads) {\n      v11 = os_thread_get_curr_id();\n      v12 = os_thread_pf(v11);\n      fprintf(stderr, String, v12, String, Number L);\n      os_thread_sleep(Number L);\n    }\n    --mutex_list[Number];\n    if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n      *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n    else\n      mutex_list[Number] = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n    if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n      *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n    else\n      mutex_list[Number] = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n    mutex_exit(mutex_list_mutex);\n  }\n  os_fast_mutex_free(<span class=\"supfact\">a1</span> + Number);\n  result = <span class=\"supfact\">a1</span>;\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = Number L;\n  return result;\n}", "code_t": "void __cdecl mutex_free(ib_mutex_t *<span class=\"supfact\">mutex</span>) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  if (!((mutex_get_lock_word(<span class=\"supfact\">mutex</span>) == Number) + ut_dbg_zero)) {\n    ut_print_timestamp(stderr);\n    v1 = os_thread_get_curr_id();\n    v2 = os_thread_pf(v1);\n    fprintf(stderr, String, v2, String, Number L);\n    fwrite(String, Number, Number, stderr);\n    fwrite(String, Number, Number, stderr);\n    fwrite(String, Number, Number, stderr);\n    ut_dbg_stop_threads = Number L;\n    if (*ut_dbg_null_ptr)\n      ut_dbg_null_ptr = Number L;\n  }\n  if (ut_dbg_stop_threads) {\n    v3 = os_thread_get_curr_id();\n    v4 = os_thread_pf(v3);\n    fprintf(stderr, String, v4, String, Number L);\n    os_thread_sleep(Number L);\n  }\n  if (!((mutex_get_waiters(<span class=\"supfact\">mutex</span>) == Number) + ut_dbg_zero)) {\n    ut_print_timestamp(stderr);\n    v5 = os_thread_get_curr_id();\n    v6 = os_thread_pf(v5);\n    fprintf(stderr, String, v6, String, Number L);\n    fwrite(String, Number, Number, stderr);\n    fwrite(String, Number, Number, stderr);\n    fwrite(String, Number, Number, stderr);\n    ut_dbg_stop_threads = Number L;\n    if (*ut_dbg_null_ptr)\n      ut_dbg_null_ptr = Number L;\n  }\n  if (ut_dbg_stop_threads) {\n    v7 = os_thread_get_curr_id();\n    v8 = os_thread_pf(v7);\n    fprintf(stderr, String, v8, String, Number L);\n    os_thread_sleep(Number L);\n  }\n  if (<span class=\"supfact\">mutex</span> != &mutex_list_mutex &&\n      <span class=\"supfact\">mutex</span> != &sync_thread_mutex) {\n    mutex_enter_func(&mutex_list_mutex, String, Number);\n    if (!((mutex_list.count != Number) + ut_dbg_zero)) {\n      ut_print_timestamp(stderr);\n      v9 = os_thread_get_curr_id();\n      v10 = os_thread_pf(v9);\n      fprintf(stderr, String, v10, String, Number L);\n      fwrite(String, Number, Number, stderr);\n      fwrite(String, Number, Number, stderr);\n      fwrite(String, Number, Number, stderr);\n      ut_dbg_stop_threads = Number L;\n      if (*ut_dbg_null_ptr)\n        ut_dbg_null_ptr = Number L;\n    }\n    if (ut_dbg_stop_threads) {\n      v11 = os_thread_get_curr_id();\n      v12 = os_thread_pf(v11);\n      fprintf(stderr, String, v12, String, Number L);\n      os_thread_sleep(Number L);\n    }\n    --mutex_list.count;\n    if (<span class=\"supfact\">mutex</span>->list.next)\n      <span class=\"supfact\">mutex</span>->list.next->list.prev =\n          <span class=\"supfact\">mutex</span>->list.prev;\n    else\n      mutex_list.end = <span class=\"supfact\">mutex</span>->list.prev;\n    if (<span class=\"supfact\">mutex</span>->list.prev)\n      <span class=\"supfact\">mutex</span>->list.prev->list.next =\n          <span class=\"supfact\">mutex</span>->list.next;\n    else\n      mutex_list.start = <span class=\"supfact\">mutex</span>->list.next;\n    mutex_exit(&mutex_list_mutex);\n  }\n  os_fast_mutex_free(&<span class=\"supfact\">mutex</span>->os_fast_mutex);\n  <span class=\"supfact\">mutex</span>->magic_n = Number L;\n}", "var": [{"name": "a1", "type": "ib_mutex_t *", "pred_name": "mutex", "ref_name": "mutex", "ref_type": "ib_mutex_t *"}], "body_in_train": true}, {"repo_owner": "wespelee", "repo_name": "ffmpeg", "path": "wespelee/ffmpeg/12f0bf8fe62d76416082d59edee92e99b7ba09a37ed2e04720cd00cb90e5e7fa", "path_in_repo": "wespelee/ffmpeg//libavcodec/bgmc.o", "objdump": "000000000000015a <get_bits1>:\n 15a:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n 15f:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 164:\t8b 40 10             \tmov    0x10(%rax),%eax\n 167:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n 16b:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 170:\t48 8b 00             \tmov    (%rax),%rax\n 173:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n 177:\tc1 ea 03             \tshr    $0x3,%edx\n 17a:\t89 d2                \tmov    %edx,%edx\n 17c:\t48 01 d0             \tadd    %rdx,%rax\n 17f:\t0f b6 00             \tmovzbl (%rax),%eax\n 182:\t88 44 24 fb          \tmov    %al,-0x5(%rsp)\n 186:\t0f b6 54 24 fb       \tmovzbl -0x5(%rsp),%edx\n 18b:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n 18f:\t83 e0 07             \tand    $0x7,%eax\n 192:\t89 c1                \tmov    %eax,%ecx\n 194:\td3 e2                \tshl    %cl,%edx\n 196:\t89 d0                \tmov    %edx,%eax\n 198:\t88 44 24 fb          \tmov    %al,-0x5(%rsp)\n 19c:\tc0 6c 24 fb 07       \tshrb   $0x7,-0x5(%rsp)\n 1a1:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 1a6:\t8b 50 10             \tmov    0x10(%rax),%edx\n 1a9:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 1ae:\t8b 40 18             \tmov    0x18(%rax),%eax\n 1b1:\t39 c2                \tcmp    %eax,%edx\n 1b3:\t7d 05                \tjge    1ba <get_bits1+0x60>\n 1b5:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n 1ba:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n 1be:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 1c3:\t89 50 10             \tmov    %edx,0x10(%rax)\n 1c6:\t0f b6 44 24 fb       \tmovzbl -0x5(%rsp),%eax\n 1cb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_bits1(__int64 <span class=\"supfact\">a1</span>) {\n  unsigned __int8 <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v2</span> =\n      (unsigned __int8)(*(unsigned __int8 *)((<span class=\"supfact\">v3</span> >> Number) +\n                                             *(_QWORD *)<span class=\"supfact\">a1</span>)\n                        << (<span class=\"supfact\">v3</span> & Number)) >>\n      Number;\n  if ((signed int)<span class=\"supfact\">v3</span> < *(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n    ++<span class=\"supfact\">v3</span>;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v3</span>;\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "unsigned int __cdecl get_bits1(GetBitContext_0 *<span class=\"supfact\">s</span>) {\n  uint8_t <span class=\"supfact\">result</span>;\n  unsigned int <span class=\"supfact\">index</span>;\n  <span class=\"supfact\">index</span> = <span class=\"supfact\">s</span>-><span class=\"supfact\">index</span>;\n  <span class=\"supfact\">result</span> =\n      (unsigned __int8)(<span class=\"supfact\">s</span>\n                            ->buffer[<span class=\"supfact\">index</span> >> Number]\n                        << (<span class=\"supfact\">index</span> & Number)) >>\n      Number;\n  if ((signed int)<span class=\"supfact\">index</span> < <span class=\"supfact\">s</span>->size_in_bits_plus8)\n    ++<span class=\"supfact\">index</span>;\n  <span class=\"supfact\">s</span>-><span class=\"supfact\">index</span> = <span class=\"supfact\">index</span>;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "GetBitContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "GetBitContext_0 *"}, {"name": "v2", "type": "uint8_t", "pred_name": "result", "ref_name": "result", "ref_type": "uint8_t"}, {"name": "v3", "type": "unsigned int", "pred_name": "index", "ref_name": "index", "ref_type": "unsigned int"}], "body_in_train": true}, {"repo_owner": "mrayy", "repo_name": "ChampionRun", "path": "mrayy/ChampionRun/286bc8ce0ed35b360c520991509f3b838a221eafdfc8a956d0dff612fccebc58", "path_in_repo": "mrayy/ChampionRun/cocos2dx/proj.linux/obj/release/layers_scenes_transitions_nodes/CCLayer.o", "objdump": "0000000000000000 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7cocos2d5LayerEFvRKSt6vectorIPNS2_5TouchESaIS6_EEPNS2_5EventEEPS3_St12_PlaceholderILi1EESG_ILi2EEEEE10_M_managerERSt9_Any_dataRKSM_St18_Manager_operation>:\n   0:\t55                   \tpush   %rbp\n   1:\t53                   \tpush   %rbx\n   2:\t48 89 fb             \tmov    %rdi,%rbx\n   5:\t48 83 ec 08          \tsub    $0x8,%rsp\n   9:\t83 fa 02             \tcmp    $0x2,%edx\n   c:\t74 3a                \tje     48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7cocos2d5LayerEFvRKSt6vectorIPNS2_5TouchESaIS6_EEPNS2_5EventEEPS3_St12_PlaceholderILi1EESG_ILi2EEEEE10_M_managerERSt9_Any_dataRKSM_St18_Manager_operation+0x48>\n   e:\t77 18                \tja     28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7cocos2d5LayerEFvRKSt6vectorIPNS2_5TouchESaIS6_EEPNS2_5EventEEPS3_St12_PlaceholderILi1EESG_ILi2EEEEE10_M_managerERSt9_Any_dataRKSM_St18_Manager_operation+0x28>\n  10:\t85 d2                \ttest   %edx,%edx\n  12:\t74 64                \tje     78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7cocos2d5LayerEFvRKSt6vectorIPNS2_5TouchESaIS6_EEPNS2_5EventEEPS3_St12_PlaceholderILi1EESG_ILi2EEEEE10_M_managerERSt9_Any_dataRKSM_St18_Manager_operation+0x78>\n  14:\t48 8b 06             \tmov    (%rsi),%rax\n  17:\t48 89 07             \tmov    %rax,(%rdi)\n  1a:\t48 83 c4 08          \tadd    $0x8,%rsp\n  1e:\t31 c0                \txor    %eax,%eax\n  20:\t5b                   \tpop    %rbx\n  21:\t5d                   \tpop    %rbp\n  22:\tc3                   \tretq   \n  23:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n  28:\t83 fa 03             \tcmp    $0x3,%edx\n  2b:\t75 ed                \tjne    1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7cocos2d5LayerEFvRKSt6vectorIPNS2_5TouchESaIS6_EEPNS2_5EventEEPS3_St12_PlaceholderILi1EESG_ILi2EEEEE10_M_managerERSt9_Any_dataRKSM_St18_Manager_operation+0x1a>\n  2d:\t48 8b 3f             \tmov    (%rdi),%rdi\n  30:\t48 85 ff             \ttest   %rdi,%rdi\n  33:\t74 e5                \tje     1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7cocos2d5LayerEFvRKSt6vectorIPNS2_5TouchESaIS6_EEPNS2_5EventEEPS3_St12_PlaceholderILi1EESG_ILi2EEEEE10_M_managerERSt9_Any_dataRKSM_St18_Manager_operation+0x1a>\n  35:\te8 00 00 00 00       \tcallq  3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7cocos2d5LayerEFvRKSt6vectorIPNS2_5TouchESaIS6_EEPNS2_5EventEEPS3_St12_PlaceholderILi1EESG_ILi2EEEEE10_M_managerERSt9_Any_dataRKSM_St18_Manager_operation+0x3a>\n  3a:\t48 83 c4 08          \tadd    $0x8,%rsp\n  3e:\t31 c0                \txor    %eax,%eax\n  40:\t5b                   \tpop    %rbx\n  41:\t5d                   \tpop    %rbp\n  42:\tc3                   \tretq   \n  43:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n  48:\t48 8b 2e             \tmov    (%rsi),%rbp\n  4b:\tbf 18 00 00 00       \tmov    $0x18,%edi\n  50:\te8 00 00 00 00       \tcallq  55 <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7cocos2d5LayerEFvRKSt6vectorIPNS2_5TouchESaIS6_EEPNS2_5EventEEPS3_St12_PlaceholderILi1EESG_ILi2EEEEE10_M_managerERSt9_Any_dataRKSM_St18_Manager_operation+0x55>\n  55:\tf3 0f 6f 45 00       \tmovdqu 0x0(%rbp),%xmm0\n  5a:\t0f 11 00             \tmovups %xmm0,(%rax)\n  5d:\t48 8b 55 10          \tmov    0x10(%rbp),%rdx\n  61:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  65:\t48 89 03             \tmov    %rax,(%rbx)\n  68:\t48 83 c4 08          \tadd    $0x8,%rsp\n  6c:\t31 c0                \txor    %eax,%eax\n  6e:\t5b                   \tpop    %rbx\n  6f:\t5d                   \tpop    %rbp\n  70:\tc3                   \tretq   \n  71:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n  78:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7f <_ZNSt14_Function_base13_Base_managerISt5_BindIFMN7cocos2d5LayerEFvRKSt6vectorIPNS2_5TouchESaIS6_EEPNS2_5EventEEPS3_St12_PlaceholderILi1EESG_ILi2EEEEE10_M_managerERSt9_Any_dataRKSM_St18_Manager_operation+0x7f>\n  7f:\t48 89 07             \tmov    %rax,(%rdi)\n  82:\t48 83 c4 08          \tadd    $0x8,%rsp\n  86:\t31 c0                \txor    %eax,%eax\n  88:\t5b                   \tpop    %rbx\n  89:\t5d                   \tpop    %rbp\n  8a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std _Function_base _Base_manager<std _Bind<void(\n    cocos2d Layer *)(std vector<cocos2d Touch *> const &, cocos2d Event *)()(\n    cocos2d Layer *, std _Placeholder<Number>, std _Placeholder<Number>)>>\n_M_manager(void **<span class=\"supfact\">a1</span>, const __m128i **<span class=\"supfact\">a2</span>,\n           unsigned int <span class=\"supfact\">a3</span>) {\n  __int64 result;\n  void *v4;\n  const __m128i *<span class=\"supfact\">v5</span>;\n  __m128i *v6;\n  if (<span class=\"supfact\">a3</span> == Number) {\n    <span class=\"supfact\">v5</span> = *<span class=\"supfact\">a2</span>;\n    v6 = (__m128i *)operator new(Number);\n    *v6 = _mm_loadu_si128(<span class=\"supfact\">v5</span>);\n    v6[Number].m128i_i64[Number] = <span class=\"supfact\">v5</span>[Number].m128i_i64[Number];\n    *<span class=\"supfact\">a1</span> = v6;\n    result = Number L;\n  } else if (<span class=\"supfact\">a3</span> > Number) {\n    if (<span class=\"supfact\">a3</span> != Number)\n      return Number L;\n    v4 = *<span class=\"supfact\">a1</span>;\n    if (!v4)\n      return Number L;\n    operator delete(v4);\n    result = Number L;\n  } else {\n    if (<span class=\"supfact\">a3</span>) {\n      *<span class=\"supfact\">a1</span> = (void *)*<span class=\"supfact\">a2</span>;\n      return Number L;\n    } * <span class=\"supfact\">a1</span> = & ` typeinfo for ' std _Bind < void ( cocos2d Layer * ) ( std vector < cocos2d Touch * > const & , cocos2d Event * ) ( ) ( cocos2d Layer * , std _Placeholder < Number > , std _Placeholder < Number > ) > ; result = Number L ; } return result ; }", "code_t": "__int64 __fastcall std _Function_base _Base_manager<std _Bind<void(\n    cocos2d Layer *)(std vector<cocos2d Touch *> const &, cocos2d Event *)()(\n    cocos2d Layer *, std _Placeholder<Number>, std _Placeholder<Number>)>>\n_M_manager(void **<span class=\"supfact\">a1</span>, const __m128i **<span class=\"supfact\">a2</span>,\n           unsigned int <span class=\"supfact\">a3</span>) {\n  __int64 result;\n  void *v4;\n  const __m128i *<span class=\"supfact\">v5</span>;\n  __m128i *v6;\n  if (<span class=\"supfact\">a3</span> == Number) {\n    <span class=\"supfact\">v5</span> = *<span class=\"supfact\">a2</span>;\n    v6 = (__m128i *)operator new(Number);\n    *v6 = _mm_loadu_si128(<span class=\"supfact\">v5</span>);\n    v6[Number].m128i_i64[Number] = <span class=\"supfact\">v5</span>[Number].m128i_i64[Number];\n    *<span class=\"supfact\">a1</span> = v6;\n    result = Number L;\n  } else if (<span class=\"supfact\">a3</span> > Number) {\n    if (<span class=\"supfact\">a3</span> != Number)\n      return Number L;\n    v4 = *<span class=\"supfact\">a1</span>;\n    if (!v4)\n      return Number L;\n    operator delete(v4);\n    result = Number L;\n  } else {\n    if (<span class=\"supfact\">a3</span>) {\n      *<span class=\"supfact\">a1</span> = (void *)*<span class=\"supfact\">a2</span>;\n      return Number L;\n    } * <span class=\"supfact\">a1</span> = & ` typeinfo for ' std _Bind < void ( cocos2d Layer * ) ( std vector < cocos2d Touch * > const & , cocos2d Event * ) ( ) ( cocos2d Layer * , std _Placeholder < Number > , std _Placeholder < Number > ) > ; result = Number L ; } return result ; }", "var": [{"name": "a1", "type": "void * *", "pred_name": "a1", "ref_name": "a1", "ref_type": "void * *"}, {"name": "a2", "type": "const __m128i *", "pred_name": "a2", "ref_name": "a2", "ref_type": "const __m128i * *"}, {"name": "a3", "type": "unsigned int", "pred_name": "a3", "ref_name": "a3", "ref_type": "unsigned int"}, {"name": "v5", "type": "const __m128i *", "pred_name": "v5", "ref_name": "v5", "ref_type": "const __m128i *"}], "body_in_train": false}, {"repo_owner": "whistlinwilly", "repo_name": "graphics-project2", "path": "whistlinwilly/graphics-project2/e5b77334a9186e6f25ab057991b7930a49bb119faf5167236fbb049aa41c2052", "path_in_repo": "whistlinwilly/graphics-project2/p2out/bin/debug/scene/mesh.o", "objdump": "0000000000000000 <_ZNKSt6vectorIN4_46212MeshTriangleESaIS1_EE3endEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  10:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  18:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  1c:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  20:\t48 89 d6             \tmov    %rdx,%rsi\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZNKSt6vectorIN4_46212MeshTriangleESaIS1_EE3endEv+0x2b>\n  2b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  2f:\tc9                   \tleaveq \n  30:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<_462 MeshTriangle>\nend(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  __gnu_cxx __normal_iterator<_462 MeshTriangle const *,\n                              std vector<_462 MeshTriangle>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>, &<span class=\"supfact\">v3</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std vector<_462 MeshTriangle> const_iterator __cdecl std\n    vector<_462 MeshTriangle>\n    end(const std vector<_462 MeshTriangle> *const <span class=\"supfact\">this</span>) {\n  __gnu_cxx __normal_iterator<const _462 MeshTriangle *,\n                              std vector<_462 MeshTriangle>>\n      <span class=\"supfact\">v2</span>;\n  _462 MeshTriangle *<span class=\"supfact\">__i</span>;\n  <span class=\"supfact\">__i</span> = <span class=\"supfact\">this</span>->_M_impl._M_finish;\n  __gnu_cxx __normal_iterator<_462 MeshTriangle const *,\n                              std vector<_462 MeshTriangle>>\n      __normal_iterator(&<span class=\"supfact\">v2</span>,\n                        (const _462 MeshTriangle *const *)&<span class=\"supfact\">__i</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "const std::vector<_462::MeshTriangle> *"}, {"name": "v2", "type": "__unk__", "pred_name": "v2", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<const _462::MeshTriangle*,std::vector<_462::MeshTriangle> > { const _462::MeshTriangle * _M_current; }"}, {"name": "v3", "type": "__unk__", "pred_name": "__i", "ref_name": "__i", "ref_type": "_462::MeshTriangle *"}], "body_in_train": false}, {"repo_owner": "Grimler91", "repo_name": "wpa_supplicant_8", "path": "Grimler91/wpa_supplicant_8/14b8f5ee927594695a2e6fcf6c8fd3c0513c7c5de05625be3e8171cc5e3c67df", "path_in_repo": "Grimler91/wpa_supplicant_8/src/ap/beacon.o", "objdump": "0000000000003438 <ieee802_11_set_beacons>:\n    3438:\t55                   \tpush   %rbp\n    3439:\t48 89 e5             \tmov    %rsp,%rbp\n    343c:\t48 83 ec 20          \tsub    $0x20,%rsp\n    3440:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    3444:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n    344b:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    3452:\t00 \n    3453:\teb 4f                \tjmp    34a4 <ieee802_11_set_beacons+0x6c>\n    3455:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3459:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    345d:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    3461:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    3465:\t48 01 d0             \tadd    %rdx,%rax\n    3468:\t48 8b 00             \tmov    (%rax),%rax\n    346b:\t0f b6 40 1c          \tmovzbl 0x1c(%rax),%eax\n    346f:\t83 e0 01             \tand    $0x1,%eax\n    3472:\t84 c0                \ttest   %al,%al\n    3474:\t74 29                \tje     349f <ieee802_11_set_beacons+0x67>\n    3476:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    347a:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    347e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    3482:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    3486:\t48 01 d0             \tadd    %rdx,%rax\n    3489:\t48 8b 00             \tmov    (%rax),%rax\n    348c:\t48 89 c7             \tmov    %rax,%rdi\n    348f:\te8 00 00 00 00       \tcallq  3494 <ieee802_11_set_beacons+0x5c>\n    3494:\t85 c0                \ttest   %eax,%eax\n    3496:\t79 07                \tjns    349f <ieee802_11_set_beacons+0x67>\n    3498:\tc7 45 f4 ff ff ff ff \tmovl   $0xffffffff,-0xc(%rbp)\n    349f:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    34a4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    34a8:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    34ac:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n    34b0:\t72 a3                \tjb     3455 <ieee802_11_set_beacons+0x1d>\n    34b2:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    34b5:\tc9                   \tleaveq \n    34b6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ieee802_11_set_beacons(__int64 <span class=\"supfact\">a1</span>) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v2</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number L;\n       <span class=\"supfact\">i</span> < *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n       ++<span class=\"supfact\">i</span>) {\n    if ((*(_BYTE *)(*(_QWORD *)(Number * <span class=\"supfact\">i</span> +\n                                *(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) +\n                    Number L) &\n         Number) != Number &&\n        (int)ieee802_11_set_beacon(\n            *(_QWORD *)(Number * <span class=\"supfact\">i</span> +\n                        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))) < Number) {\n      <span class=\"supfact\">v2</span> = Number;\n    }\n  }\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "int __cdecl ieee802_11_set_beacons(hostapd_iface *<span class=\"supfact\">iface</span>) {\n  int <span class=\"supfact\">ret</span>;\n  size_t <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">ret</span> = Number;\n  for (<span class=\"supfact\">i</span> = Number L;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">iface</span>->num_bss;\n       ++<span class=\"supfact\">i</span>) {\n    if ((*((_BYTE *)<span class=\"supfact\">iface</span>->bss[<span class=\"supfact\">i</span>] + Number) &\n         Number) != Number &&\n        ieee802_11_set_beacon(<span class=\"supfact\">iface</span>->bss[<span class=\"supfact\">i</span>]) <\n            Number)\n      <span class=\"supfact\">ret</span> = Number;\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "hostapd_iface *", "pred_name": "iface", "ref_name": "iface", "ref_type": "hostapd_iface *"}, {"name": "v2", "type": "int", "pred_name": "ret", "ref_name": "ret", "ref_type": "int"}, {"name": "i", "type": "size_t", "pred_name": "i", "ref_name": "i", "ref_type": "size_t"}], "body_in_train": true}, {"repo_owner": "LibXenonProject", "repo_name": "xmplayer", "path": "LibXenonProject/xmplayer/dfe0e398fd3b2f0c7dfae4b0dc6d0b96fa9e22e2a0fe411d9cd169dbcb40629b", "path_in_repo": "LibXenonProject/xmplayer/mplayer/ffmpeg/libavcodec/tiertexseqv.o", "objdump": "0000000000000b7f <seqvideo_decode_frame>:\n b7f:\t48 83 ec 48          \tsub    $0x48,%rsp\n b83:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n b88:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n b8d:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n b92:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n b96:\t48 8b 04 24          \tmov    (%rsp),%rax\n b9a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n b9e:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n ba3:\t48 8b 04 24          \tmov    (%rsp),%rax\n ba7:\t8b 40 18             \tmov    0x18(%rax),%eax\n baa:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n bae:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n bb3:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n bb7:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n bbc:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n bc1:\tc7 80 f4 00 00 00 03 \tmovl   $0x3,0xf4(%rax)\n bc8:\t00 00 00 \n bcb:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n bd0:\tc7 80 9c 01 00 00 0d \tmovl   $0xd,0x19c(%rax)\n bd7:\t00 00 00 \n bda:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n bdf:\t48 8b 90 28 02 00 00 \tmov    0x228(%rax),%rdx\n be6:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n beb:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n bef:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n bf4:\t48 89 ce             \tmov    %rcx,%rsi\n bf7:\t48 89 c7             \tmov    %rax,%rdi\n bfa:\tff d2                \tcallq  *%rdx\n bfc:\t85 c0                \ttest   %eax,%eax\n bfe:\t74 26                \tje     c26 <seqvideo_decode_frame+0xa7>\n c00:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n c05:\t48 8b 00             \tmov    (%rax),%rax\n c08:\tba 00 00 00 00       \tmov    $0x0,%edx\n c0d:\tbe 10 00 00 00       \tmov    $0x10,%esi\n c12:\t48 89 c7             \tmov    %rax,%rdi\n c15:\tb8 00 00 00 00       \tmov    $0x0,%eax\n c1a:\te8 00 00 00 00       \tcallq  c1f <seqvideo_decode_frame+0xa0>\n c1f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n c24:\teb 52                \tjmp    c78 <seqvideo_decode_frame+0xf9>\n c26:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n c2a:\t48 8b 4c 24 38       \tmov    0x38(%rsp),%rcx\n c2f:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n c34:\t48 89 ce             \tmov    %rcx,%rsi\n c37:\t48 89 c7             \tmov    %rax,%rdi\n c3a:\te8 0d fc ff ff       \tcallq  84c <seqvideo_decode>\n c3f:\t85 c0                \ttest   %eax,%eax\n c41:\t74 07                \tje     c4a <seqvideo_decode_frame+0xcb>\n c43:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n c48:\teb 2e                \tjmp    c78 <seqvideo_decode_frame+0xf9>\n c4a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n c4f:\tc7 00 d8 01 00 00    \tmovl   $0x1d8,(%rax)\n c55:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n c5a:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n c5f:\t48 89 d7             \tmov    %rdx,%rdi\n c62:\t48 83 c0 08          \tadd    $0x8,%rax\n c66:\tba 3b 00 00 00       \tmov    $0x3b,%edx\n c6b:\t48 89 c6             \tmov    %rax,%rsi\n c6e:\t48 89 d1             \tmov    %rdx,%rcx\n c71:\tf3 48 a5             \trep movsq %ds:(%rsi),%es:(%rdi)\n c74:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n c78:\t48 83 c4 48          \tadd    $0x48,%rsp\n c7c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall seqvideo_decode_frame(__int64 <span class=\"supfact\">a1</span>,\n                                         void *<span class=\"supfact\">a2</span>,\n                                         _DWORD *<span class=\"supfact\">a3</span>,\n                                         __int64 <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  unsigned __int8 *<span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = *(unsigned __int8 **)(<span class=\"supfact\">a4</span> + Number);\n  <span class=\"supfact\">v7</span> = *(_DWORD *)(<span class=\"supfact\">a4</span> + Number);\n  <span class=\"supfact\">v6</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  *(_DWORD *)(<span class=\"supfact\">v6</span> + Number) = Number;\n  *(_DWORD *)(<span class=\"supfact\">v6</span> + Number) = Number;\n  if ((*(unsigned int(__fastcall **)(__int64, __int64))(\n          <span class=\"supfact\">a1</span> + Number))(<span class=\"supfact\">a1</span>,\n                                        <span class=\"supfact\">v6</span> + Number)) {\n    av_log(*(_QWORD *)<span class=\"supfact\">v6</span>, Number L, String);\n    <span class=\"supfact\">result</span> = Number;\n  } else if ((unsigned int)seqvideo_decode(\n                 <span class=\"supfact\">v6</span>, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>)) {\n    <span class=\"supfact\">result</span> = Number L;\n  } else {\n    *<span class=\"supfact\">a3</span> = Number;\n    qmemcpy(<span class=\"supfact\">a2</span>, (const void *)(<span class=\"supfact\">v6</span> + Number),\n            Number);\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">v7</span>;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl seqvideo_decode_frame(AVCodecContext_0 *<span class=\"supfact\">avctx</span>,\n                                  void *<span class=\"supfact\">data</span>,\n                                  int *<span class=\"supfact\">data_size</span>,\n                                  AVPacket_0 *<span class=\"supfact\">avpkt</span>) {\n  int <span class=\"supfact\">result</span>;\n  SeqVideoContext_0 *<span class=\"supfact\">seq</span>;\n  int <span class=\"supfact\">buf_size</span>;\n  uint8_t *<span class=\"supfact\">buf</span>;\n  <span class=\"supfact\">buf</span> = <span class=\"supfact\">avpkt</span>-><span class=\"supfact\">data</span>;\n  <span class=\"supfact\">buf_size</span> = <span class=\"supfact\">avpkt</span>->size;\n  <span class=\"supfact\">seq</span> = (SeqVideoContext_0 *)<span class=\"supfact\">avctx</span>->priv_data;\n  <span class=\"supfact\">seq</span>->frame.reference = Number;\n  <span class=\"supfact\">seq</span>->frame.buffer_hints = Number;\n  if (<span class=\"supfact\">avctx</span>->reget_buffer(<span class=\"supfact\">avctx</span>,\n                                          &<span class=\"supfact\">seq</span>->frame)) {\n    av_log(<span class=\"supfact\">seq</span>-><span class=\"supfact\">avctx</span>, Number L, String);\n    <span class=\"supfact\">result</span> = Number;\n  } else if (seqvideo_decode(<span class=\"supfact\">seq</span>, <span class=\"supfact\">buf</span>,\n                             <span class=\"supfact\">buf_size</span>)) {\n    <span class=\"supfact\">result</span> = Number;\n  } else {\n    *<span class=\"supfact\">data_size</span> = Number;\n    qmemcpy(<span class=\"supfact\">data</span>, &<span class=\"supfact\">seq</span>->frame, Number);\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">buf_size</span>;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "AVCodecContext_0 *", "pred_name": "avctx", "ref_name": "avctx", "ref_type": "AVCodecContext_0 *"}, {"name": "a2", "type": "void *", "pred_name": "data", "ref_name": "data", "ref_type": "void *"}, {"name": "a3", "type": "int *", "pred_name": "data_size", "ref_name": "data_size", "ref_type": "int *"}, {"name": "a4", "type": "AVPacket_0 *", "pred_name": "avpkt", "ref_name": "avpkt", "ref_type": "AVPacket_0 *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "v6", "type": "SeqVideoContext_0 *", "pred_name": "seq", "ref_name": "seq", "ref_type": "SeqVideoContext_0 *"}, {"name": "v7", "type": "int", "pred_name": "buf_size", "ref_name": "buf_size", "ref_type": "int"}, {"name": "v8", "type": "uint8_t *", "pred_name": "buf", "ref_name": "buf", "ref_type": "uint8_t *"}], "body_in_train": false}, {"repo_owner": "SANL-2015", "repo_name": "SANL-2015", "path": "SANL-2015/SANL-2015/c47e87ca6d9886afe40d226cddd8c8d1c3fc36855cee1ef0095f4e484275a577", "path_in_repo": "SANL-2015/SANL-2015/SAND2015/memcached-liblock/libmemcached-1.0.2/libmemcached/libmemcachedinternal_libmemcachedinternal_la-options.o", "objdump": "0000000000000050 <_Z31memcached_parse_filename_lengthP12memcached_st>:\n  50:\t48 8b bf 90 02 00 00 \tmov    0x290(%rdi),%rdi\n  57:\te9 00 00 00 00       \tjmpq   5c <_Z31memcached_parse_filename_lengthP12memcached_st+0xc>\n  5c:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "__int64 __fastcall memcached_parse_filename_length(__int64 <span class=\"supfact\">a1</span>) {\n  return memcached_array_size(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n}", "code_t": "size_t __fastcall memcached_parse_filename_length(\n    memcached_st_0 *<span class=\"supfact\">memc</span>) {\n  return memcached_array_size(<span class=\"supfact\">memc</span>->configure.filename);\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "self", "ref_name": "memc", "ref_type": "memcached_st_0 *"}], "body_in_train": true}, {"repo_owner": "nmacs", "repo_name": "print3d", "path": "nmacs/print3d/142ee0ab03aaea08c1cce3b49aba610648f7bc1ddb53dfc348f2f9408898fa3c", "path_in_repo": "nmacs/print3d//toolchain/openocd-0.7.0/jimtcl/jimsh", "objdump": "000000000040ea72 <Jim_SetGlobalVariableStr>:\n  40ea72:\t55                   \tpush   %rbp\n  40ea73:\t48 89 e5             \tmov    %rsp,%rbp\n  40ea76:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40ea7a:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40ea7e:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40ea82:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  40ea86:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ea8a:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  40ea8e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40ea92:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ea96:\t48 8b 50 60          \tmov    0x60(%rax),%rdx\n  40ea9a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40ea9e:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n  40eaa2:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  40eaa6:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  40eaaa:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40eaae:\t48 89 ce             \tmov    %rcx,%rsi\n  40eab1:\t48 89 c7             \tmov    %rax,%rdi\n  40eab4:\te8 2a ff ff ff       \tcallq  40e9e3 <Jim_SetVariableStr>\n  40eab9:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40eabc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40eac0:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  40eac4:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n  40eac8:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40eacb:\tc9                   \tleaveq \n  40eacc:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Jim_SetGlobalVariableStr(__int64 <span class=\"supfact\">a1</span>,\n                                            const char *<span class=\"supfact\">a2</span>,\n                                            __int64 <span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  LODWORD(<span class=\"supfact\">result</span>) = Jim_SetVariableStr(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>);\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v4</span>;\n  return (unsigned int)<span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl Jim_SetGlobalVariableStr(Jim_Interp_0 *<span class=\"supfact\">interp</span>,\n                                     const char *<span class=\"supfact\">name</span>,\n                                     Jim_Obj_0 *<span class=\"supfact\">objPtr</span>) {\n  int <span class=\"supfact\">result</span>;\n  Jim_CallFrame_0 *<span class=\"supfact\">savedFramePtr</span>;\n  <span class=\"supfact\">savedFramePtr</span> = <span class=\"supfact\">interp</span>->framePtr;\n  <span class=\"supfact\">interp</span>->framePtr = <span class=\"supfact\">interp</span>->topFramePtr;\n  <span class=\"supfact\">result</span> = Jim_SetVariableStr(\n      <span class=\"supfact\">interp</span>, <span class=\"supfact\">name</span>, <span class=\"supfact\">objPtr</span>);\n  <span class=\"supfact\">interp</span>->framePtr = <span class=\"supfact\">savedFramePtr</span>;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "char[128]", "pred_name": "__unk__", "ref_name": "interp", "ref_type": "Jim_Interp_0 *"}, {"name": "a2", "type": "const char *", "pred_name": "__unk__", "ref_name": "name", "ref_type": "const char *"}, {"name": "a3", "type": "const char *", "pred_name": "__unk__", "ref_name": "objPtr", "ref_type": "Jim_Obj_0 *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "result", "ref_type": "int"}, {"name": "v4", "type": "const char *", "pred_name": "__unk__", "ref_name": "savedFramePtr", "ref_type": "Jim_CallFrame_0 *"}], "body_in_train": false}, {"repo_owner": "ubinix-warun", "repo_name": "sketchbook-promela", "path": "ubinix-warun/sketchbook-promela/a1c645ce325cf0b59b50843a90e6b607e780b09a70a2b9b0ff15edca0d2a8ded", "path_in_repo": "ubinix-warun/sketchbook-promela/cheatsheet/Spin644/Src6.4.4/spin", "objdump": "0000000000432e39 <putremote>:\n  432e39:\t55                   \tpush   %rbp\n  432e3a:\t48 89 e5             \tmov    %rsp,%rbp\n  432e3d:\t48 83 ec 30          \tsub    $0x30,%rsp\n  432e41:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  432e45:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  432e49:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n  432e4c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  432e53:\t0f b7 05 0c e1 0c 00 \tmovzwl 0xce10c(%rip),%eax        # 500f66 <terse>\n  432e5a:\t66 85 c0             \ttest   %ax,%ax\n  432e5d:\t0f 84 c5 00 00 00    \tje     432f28 <putremote+0xef>\n  432e63:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  432e67:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  432e6b:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  432e6f:\t48 8b 00             \tmov    (%rax),%rax\n  432e72:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  432e76:\t48 89 d6             \tmov    %rdx,%rsi\n  432e79:\t48 89 c7             \tmov    %rax,%rdi\n  432e7c:\te8 bf f2 fc ff       \tcallq  402140 <fputs@plt>\n  432e81:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  432e85:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  432e89:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  432e8d:\t48 85 c0             \ttest   %rax,%rax\n  432e90:\t74 40                \tje     432ed2 <putremote+0x99>\n  432e92:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  432e96:\t48 89 c6             \tmov    %rax,%rsi\n  432e99:\tbf 5b 00 00 00       \tmov    $0x5b,%edi\n  432e9e:\te8 bd f2 fc ff       \tcallq  402160 <fputc@plt>\n  432ea3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  432ea7:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  432eab:\t48 8b 48 38          \tmov    0x38(%rax),%rcx\n  432eaf:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  432eb2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  432eb6:\t48 89 ce             \tmov    %rcx,%rsi\n  432eb9:\t48 89 c7             \tmov    %rax,%rdi\n  432ebc:\te8 34 b4 ff ff       \tcallq  42e2f5 <putstmnt>\n  432ec1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  432ec5:\t48 89 c6             \tmov    %rax,%rsi\n  432ec8:\tbf 5d 00 00 00       \tmov    $0x5d,%edi\n  432ecd:\te8 8e f2 fc ff       \tcallq  402160 <fputc@plt>\n  432ed2:\t8b 05 c0 5e 0b 00    \tmov    0xb5ec0(%rip),%eax        # 4e8d98 <ltl_mode>\n  432ed8:\t85 c0                \ttest   %eax,%eax\n  432eda:\t74 26                \tje     432f02 <putremote+0xc9>\n  432edc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  432ee0:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  432ee4:\t48 8b 10             \tmov    (%rax),%rdx\n  432ee7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  432eeb:\tbe f5 6c 4b 00       \tmov    $0x4b6cf5,%esi\n  432ef0:\t48 89 c7             \tmov    %rax,%rdi\n  432ef3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  432ef8:\te8 c3 f2 fc ff       \tcallq  4021c0 <fprintf@plt>\n  432efd:\te9 12 01 00 00       \tjmpq   433014 <putremote+0x1db>\n  432f02:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  432f06:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  432f0a:\t48 8b 10             \tmov    (%rax),%rdx\n  432f0d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  432f11:\tbe f9 6c 4b 00       \tmov    $0x4b6cf9,%esi\n  432f16:\t48 89 c7             \tmov    %rax,%rdi\n  432f19:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  432f1e:\te8 9d f2 fc ff       \tcallq  4021c0 <fprintf@plt>\n  432f23:\te9 ec 00 00 00       \tjmpq   433014 <putremote+0x1db>\n  432f28:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  432f2c:\t48 89 c7             \tmov    %rax,%rdi\n  432f2f:\te8 84 8b 00 00       \tcallq  43bab8 <Sym_typ>\n  432f34:\t83 f8 0f             \tcmp    $0xf,%eax\n  432f37:\t7f 22                \tjg     432f5b <putremote+0x122>\n  432f39:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  432f40:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  432f44:\t48 89 c1             \tmov    %rax,%rcx\n  432f47:\tba 06 00 00 00       \tmov    $0x6,%edx\n  432f4c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  432f51:\tbf 33 60 4b 00       \tmov    $0x4b6033,%edi\n  432f56:\te8 85 f3 fc ff       \tcallq  4022e0 <fwrite@plt>\n  432f5b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  432f5f:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  432f63:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  432f67:\t48 8b 00             \tmov    (%rax),%rax\n  432f6a:\t48 89 c7             \tmov    %rax,%rdi\n  432f6d:\te8 76 31 ff ff       \tcallq  4260e8 <fproc>\n  432f72:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  432f75:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  432f78:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  432f7c:\tbe fd 6c 4b 00       \tmov    $0x4b6cfd,%esi\n  432f81:\t48 89 c7             \tmov    %rax,%rdi\n  432f84:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  432f89:\te8 32 f2 fc ff       \tcallq  4021c0 <fprintf@plt>\n  432f8e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  432f92:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  432f96:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  432f9a:\t48 85 c0             \ttest   %rax,%rax\n  432f9d:\t74 3b                \tje     432fda <putremote+0x1a1>\n  432f9f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  432fa3:\t48 89 c1             \tmov    %rax,%rcx\n  432fa6:\tba 05 00 00 00       \tmov    $0x5,%edx\n  432fab:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  432fb0:\tbf 0b 6d 4b 00       \tmov    $0x4b6d0b,%edi\n  432fb5:\te8 26 f3 fc ff       \tcallq  4022e0 <fwrite@plt>\n  432fba:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  432fbe:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  432fc2:\t48 8b 48 38          \tmov    0x38(%rax),%rcx\n  432fc6:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  432fc9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  432fcd:\t48 89 ce             \tmov    %rcx,%rsi\n  432fd0:\t48 89 c7             \tmov    %rax,%rdi\n  432fd3:\te8 1d b3 ff ff       \tcallq  42e2f5 <putstmnt>\n  432fd8:\teb 19                \tjmp    432ff3 <putremote+0x1ba>\n  432fda:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  432fdd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  432fe1:\tbe 11 6d 4b 00       \tmov    $0x4b6d11,%esi\n  432fe6:\t48 89 c7             \tmov    %rax,%rdi\n  432fe9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  432fee:\te8 cd f1 fc ff       \tcallq  4021c0 <fprintf@plt>\n  432ff3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  432ff7:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  432ffb:\t48 8b 10             \tmov    (%rax),%rdx\n  432ffe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  433002:\tbe 1b 6d 4b 00       \tmov    $0x4b6d1b,%esi\n  433007:\t48 89 c7             \tmov    %rax,%rdi\n  43300a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  43300f:\te8 ac f1 fc ff       \tcallq  4021c0 <fprintf@plt>\n  433014:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  433018:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  43301c:\t48 85 c0             \ttest   %rax,%rax\n  43301f:\t74 3c                \tje     43305d <putremote+0x224>\n  433021:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  433025:\t48 89 c6             \tmov    %rax,%rsi\n  433028:\tbf 5b 00 00 00       \tmov    $0x5b,%edi\n  43302d:\te8 2e f1 fc ff       \tcallq  402160 <fputc@plt>\n  433032:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  433036:\t48 8b 48 40          \tmov    0x40(%rax),%rcx\n  43303a:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  43303d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  433041:\t48 89 ce             \tmov    %rcx,%rsi\n  433044:\t48 89 c7             \tmov    %rax,%rdi\n  433047:\te8 a9 b2 ff ff       \tcallq  42e2f5 <putstmnt>\n  43304c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  433050:\t48 89 c6             \tmov    %rax,%rsi\n  433053:\tbf 5d 00 00 00       \tmov    $0x5d,%edi\n  433058:\te8 03 f1 fc ff       \tcallq  402160 <fputc@plt>\n  43305d:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  433061:\t74 11                \tje     433074 <putremote+0x23b>\n  433063:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  433067:\t48 89 c6             \tmov    %rax,%rsi\n  43306a:\tbf 29 00 00 00       \tmov    $0x29,%edi\n  43306f:\te8 ec f0 fc ff       \tcallq  402160 <fputc@plt>\n  433074:\t90                   \tnop\n  433075:\tc9                   \tleaveq \n  433076:\tc3                   \tretq   ", "code_s": "int __fastcall putremote(FILE *<span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n                         unsigned int <span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = Number;\n  if (terse) {\n    fputs(\n        **(const char ***)(*(_QWORD *)(<span class=\"supfact\">a2</span> + Number) + Number L),\n        <span class=\"supfact\">a1</span>);\n    if (*(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a2</span> + Number) + Number L)) {\n      fputc(Number, <span class=\"supfact\">a1</span>);\n      putstmnt(<span class=\"supfact\">a1</span>,\n               *(unsigned __int16 **)(*(_QWORD *)(<span class=\"supfact\">a2</span> + Number) +\n                                      Number L),\n               <span class=\"supfact\">a3</span>);\n      fputc(Number, <span class=\"supfact\">a1</span>);\n    }\n    if (ltl_mode)\n      fprintf(<span class=\"supfact\">a1</span>, String,\n              **(const char ***)(<span class=\"supfact\">a2</span> + Number));\n    else\n      fprintf(<span class=\"supfact\">a1</span>, String,\n              **(const char ***)(<span class=\"supfact\">a2</span> + Number));\n  } else {\n    if ((int)Sym_typ(<span class=\"supfact\">a2</span>) <= Number) {\n      <span class=\"supfact\">v7</span> = Number;\n      fwrite(String, Number, Number, <span class=\"supfact\">a1</span>);\n    }\n    <span class=\"supfact\">v6</span> = fproc(**(\n        const char ***)(*(_QWORD *)(<span class=\"supfact\">a2</span> + Number) + Number L));\n    fprintf(<span class=\"supfact\">a1</span>, String, <span class=\"supfact\">v6</span>);\n    if (*(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a2</span> + Number) + Number L)) {\n      fwrite(String, Number, Number, <span class=\"supfact\">a1</span>);\n      putstmnt(<span class=\"supfact\">a1</span>,\n               *(unsigned __int16 **)(*(_QWORD *)(<span class=\"supfact\">a2</span> + Number) +\n                                      Number L),\n               <span class=\"supfact\">a3</span>);\n    } else {\n      fprintf(<span class=\"supfact\">a1</span>, String, <span class=\"supfact\">v6</span>);\n    }\n    fprintf(<span class=\"supfact\">a1</span>, String,\n            **(const char ***)(<span class=\"supfact\">a2</span> + Number));\n  }\n  <span class=\"supfact\">v3</span> = *(_QWORD *)(<span class=\"supfact\">a2</span> + Number);\n  if (<span class=\"supfact\">v3</span>) {\n    fputc(Number, <span class=\"supfact\">a1</span>);\n    putstmnt(<span class=\"supfact\">a1</span>,\n             *(unsigned __int16 **)(<span class=\"supfact\">a2</span> + Number),\n             <span class=\"supfact\">a3</span>);\n    LODWORD(<span class=\"supfact\">v3</span>) = fputc(Number, <span class=\"supfact\">a1</span>);\n  }\n  if (<span class=\"supfact\">v7</span>)\n    LODWORD(<span class=\"supfact\">v3</span>) = fputc(Number, <span class=\"supfact\">a1</span>);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "void __cdecl putremote(FILE *<span class=\"supfact\">fd</span>, Lextok_0 *<span class=\"supfact\">n</span>,\n                       int <span class=\"supfact\">m</span>) {\n  unsigned int <span class=\"supfact\">pt</span>;\n  int <span class=\"supfact\">promoted</span>;\n  <span class=\"supfact\">promoted</span> = Number;\n  if (terse) {\n    fputs(<span class=\"supfact\">n</span>->lft->sym->name, <span class=\"supfact\">fd</span>);\n    if (<span class=\"supfact\">n</span>->lft->lft) {\n      fputc(Number, <span class=\"supfact\">fd</span>);\n      putstmnt(<span class=\"supfact\">fd</span>, <span class=\"supfact\">n</span>->lft->lft,\n               <span class=\"supfact\">m</span>);\n      fputc(Number, <span class=\"supfact\">fd</span>);\n    }\n    if (ltl_mode)\n      fprintf(<span class=\"supfact\">fd</span>, String, <span class=\"supfact\">n</span>->sym->name);\n    else\n      fprintf(<span class=\"supfact\">fd</span>, String, <span class=\"supfact\">n</span>->sym->name);\n  } else {\n    if (Sym_typ(<span class=\"supfact\">n</span>) <= Number) {\n      <span class=\"supfact\">promoted</span> = Number;\n      fwrite(String, Number, Number, <span class=\"supfact\">fd</span>);\n    }\n    <span class=\"supfact\">pt</span> = fproc(<span class=\"supfact\">n</span>->lft->sym->name);\n    fprintf(<span class=\"supfact\">fd</span>, String, <span class=\"supfact\">pt</span>);\n    if (<span class=\"supfact\">n</span>->lft->lft) {\n      fwrite(String, Number, Number, <span class=\"supfact\">fd</span>);\n      putstmnt(<span class=\"supfact\">fd</span>, <span class=\"supfact\">n</span>->lft->lft,\n               <span class=\"supfact\">m</span>);\n    } else {\n      fprintf(<span class=\"supfact\">fd</span>, String, <span class=\"supfact\">pt</span>);\n    }\n    fprintf(<span class=\"supfact\">fd</span>, String, <span class=\"supfact\">n</span>->sym->name);\n  }\n  if (<span class=\"supfact\">n</span>->rgt) {\n    fputc(Number, <span class=\"supfact\">fd</span>);\n    putstmnt(<span class=\"supfact\">fd</span>, <span class=\"supfact\">n</span>->rgt, <span class=\"supfact\">m</span>);\n    fputc(Number, <span class=\"supfact\">fd</span>);\n  }\n  if (<span class=\"supfact\">promoted</span>)\n    fputc(Number, <span class=\"supfact\">fd</span>);\n}", "var": [{"name": "a1", "type": "FILE *", "pred_name": "stream", "ref_name": "fd", "ref_type": "FILE *"}, {"name": "a2", "type": "__unk__", "pred_name": "self", "ref_name": "n", "ref_type": "Lextok_0 *"}, {"name": "a3", "type": "int", "pred_name": "__unk__", "ref_name": "m", "ref_type": "int"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "unsigned int", "pred_name": "__unk__", "ref_name": "pt", "ref_type": "unsigned int"}, {"name": "v7", "type": "unsigned int", "pred_name": "__unk__", "ref_name": "promoted", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "allinurl", "repo_name": "dwm", "path": "allinurl/dwm/3839b87a1610eefa38917bf8b7c7486cd1534140cb424a37d2ea27bfcf7ada15", "path_in_repo": "allinurl/dwm//dwm.o", "objdump": "0000000000001d3c <destroynotify>:\n    1d3c:\t55                   \tpush   %rbp\n    1d3d:\t48 89 e5             \tmov    %rsp,%rbp\n    1d40:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1d44:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1d48:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1d4c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1d50:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1d54:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    1d58:\t48 89 c7             \tmov    %rax,%rdi\n    1d5b:\te8 4b 59 00 00       \tcallq  76ab <wintoclient>\n    1d60:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1d64:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1d69:\t74 11                \tje     1d7c <destroynotify+0x40>\n    1d6b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1d6f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1d74:\t48 89 c7             \tmov    %rax,%rdi\n    1d77:\te8 fc 46 00 00       \tcallq  6478 <unmanage>\n    1d7c:\t90                   \tnop\n    1d7d:\tc9                   \tleaveq \n    1d7e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall destroynotify(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> =\n      wintoclient(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n  if (<span class=\"supfact\">result</span>)\n    <span class=\"supfact\">result</span> = unmanage(<span class=\"supfact\">result</span>, Number L);\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl destroynotify(XEvent *<span class=\"supfact\">e</span>) {\n  Client_0 *c;\n  c = wintoclient(<span class=\"supfact\">e</span>->xkey.root);\n  if (c)\n    unmanage(c, Number);\n}", "var": [{"name": "a1", "type": "XEvent *", "pred_name": "e", "ref_name": "e", "ref_type": "XEvent *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "converse2006", "repo_name": "ArduinoUno-QEMU", "path": "converse2006/ArduinoUno-QEMU/f476553e0a10553a1e51f431d16735076bbd80026acc85fb9b02ea15403fa8e8", "path_in_repo": "converse2006/ArduinoUno-QEMU//mips64el-softmmu/vt82c686.o", "objdump": "00000000000007f7 <get_pmsts>:\n     7f7:\t55                   \tpush   %rbp\n     7f8:\t48 89 e5             \tmov    %rsp,%rbp\n     7fb:\t53                   \tpush   %rbx\n     7fc:\t48 83 ec 38          \tsub    $0x38,%rsp\n     800:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     804:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     80b:\t00 00 \n     80d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     811:\t31 c0                \txor    %eax,%eax\n     813:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     817:\t0f b7 80 60 02 00 00 \tmovzwl 0x260(%rax),%eax\n     81e:\t0f b7 c0             \tmovzwl %ax,%eax\n     821:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n     824:\te8 bf fb ff ff       \tcallq  3e8 <get_ticks_per_sec>\n     829:\t89 c3                \tmov    %eax,%ebx\n     82b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 832 <get_pmsts+0x3b>\n     832:\t48 89 c7             \tmov    %rax,%rdi\n     835:\te8 00 00 00 00       \tcallq  83a <get_pmsts+0x43>\n     83a:\t89 da                \tmov    %ebx,%edx\n     83c:\tbe 99 9e 36 00       \tmov    $0x369e99,%esi\n     841:\t48 89 c7             \tmov    %rax,%rdi\n     844:\te8 00 00 00 00       \tcallq  849 <get_pmsts+0x52>\n     849:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     84d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     851:\t48 8b 80 88 02 00 00 \tmov    0x288(%rax),%rax\n     858:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n     85c:\t7c 1b                \tjl     879 <get_pmsts+0x82>\n     85e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     862:\t0f b7 80 60 02 00 00 \tmovzwl 0x260(%rax),%eax\n     869:\t83 c8 01             \tor     $0x1,%eax\n     86c:\t89 c2                \tmov    %eax,%edx\n     86e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     872:\t66 89 90 60 02 00 00 \tmov    %dx,0x260(%rax)\n     879:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     87c:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n     880:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     887:\t00 00 \n     889:\t74 05                \tje     890 <get_pmsts+0x99>\n     88b:\te8 00 00 00 00       \tcallq  890 <get_pmsts+0x99>\n     890:\t48 83 c4 38          \tadd    $0x38,%rsp\n     894:\t5b                   \tpop    %rbx\n     895:\t5d                   \tpop    %rbp\n     896:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_pmsts(__int64 <span class=\"supfact\">a1</span>) {\n  unsigned int <span class=\"supfact\">v1</span>;\n  __int64 <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = *(unsigned __int16 *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v1</span> = get_ticks_per_sec();\n  <span class=\"supfact\">v2</span> = qemu_get_clock(vm_clock);\n  if (muldiv64(<span class=\"supfact\">v2</span>, Number L, <span class=\"supfact\">v1</span>) >=\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_WORD *)(<span class=\"supfact\">a1</span> + Number) |= Number;\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "int __cdecl get_pmsts(VT686PMState_0 *<span class=\"supfact\">s</span>) {\n  unsigned int <span class=\"supfact\">v1</span>;\n  __int64 <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">pmsts</span>;\n  <span class=\"supfact\">pmsts</span> = <span class=\"supfact\">s</span>-><span class=\"supfact\">pmsts</span>;\n  <span class=\"supfact\">v1</span> = get_ticks_per_sec();\n  <span class=\"supfact\">v2</span> = qemu_get_clock(vm_clock);\n  if (muldiv64(<span class=\"supfact\">v2</span>, Number L, <span class=\"supfact\">v1</span>) >=\n      <span class=\"supfact\">s</span>->tmr_overflow_time)\n    <span class=\"supfact\">s</span>-><span class=\"supfact\">pmsts</span> |= Number;\n  return <span class=\"supfact\">pmsts</span>;\n}", "var": [{"name": "a1", "type": "PIIX4PMState_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "VT686PMState_0 *"}, {"name": "v1", "type": "unsigned int", "pred_name": "v1", "ref_name": "v1", "ref_type": "unsigned int"}, {"name": "v2", "type": "__int64", "pred_name": "v2", "ref_name": "v2", "ref_type": "__int64"}, {"name": "v4", "type": "uint32_t", "pred_name": "expire_time", "ref_name": "pmsts", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/337779a50c1eacc5ea486f61ea1f2977aa50c37b1dc867036e3dc5e0eaf03bfa", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Foundation/testsuite/obj/Linux/x86_64/debug_shared/HashSetTest.o", "objdump": "0000000000000000 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n   c:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n  10:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n  14:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n  1b:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  1f:\t48 89 c7             \tmov    %rax,%rdi\n  22:\te8 00 00 00 00       \tcallq  27 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x27>\n  27:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n  2b:\t48 8d 55 a8          \tlea    -0x58(%rbp),%rdx\n  2f:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  33:\t48 89 d6             \tmov    %rdx,%rsi\n  36:\t48 89 c7             \tmov    %rax,%rdi\n  39:\te8 00 00 00 00       \tcallq  3e <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x3e>\n  3e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  42:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  46:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  4a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  52:\t48 39 c2             \tcmp    %rax,%rdx\n  55:\t0f 84 f9 00 00 00    \tje     154 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x154>\n  5b:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  5f:\t48 89 c7             \tmov    %rax,%rdi\n  62:\te8 00 00 00 00       \tcallq  67 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x67>\n  67:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  6b:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  6f:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  73:\t48 89 d6             \tmov    %rdx,%rsi\n  76:\t48 89 c7             \tmov    %rax,%rdi\n  79:\te8 00 00 00 00       \tcallq  7e <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x7e>\n  7e:\t84 c0                \ttest   %al,%al\n  80:\t74 37                \tje     b9 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0xb9>\n  82:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  86:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  8a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  8e:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n  95:\t48 89 ce             \tmov    %rcx,%rsi\n  98:\t48 89 c7             \tmov    %rax,%rdi\n  9b:\te8 00 00 00 00       \tcallq  a0 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0xa0>\n  a0:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  a4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  a8:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n  ac:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  b0:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  b4:\te9 f9 00 00 00       \tjmpq   1b2 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x1b2>\n  b9:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  bd:\t48 89 c7             \tmov    %rax,%rdi\n  c0:\te8 00 00 00 00       \tcallq  c5 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0xc5>\n  c5:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  c9:\t48 8d 55 b8          \tlea    -0x48(%rbp),%rdx\n  cd:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  d1:\t48 89 d6             \tmov    %rdx,%rsi\n  d4:\t48 89 c7             \tmov    %rax,%rdi\n  d7:\te8 00 00 00 00       \tcallq  dc <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0xdc>\n  dc:\t48 89 c3             \tmov    %rax,%rbx\n  df:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  e3:\t48 89 c7             \tmov    %rax,%rdi\n  e6:\te8 00 00 00 00       \tcallq  eb <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0xeb>\n  eb:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  ef:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  f3:\t48 89 de             \tmov    %rbx,%rsi\n  f6:\t48 89 c7             \tmov    %rax,%rdi\n  f9:\te8 00 00 00 00       \tcallq  fe <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0xfe>\n  fe:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n 102:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n 109:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n 10d:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 111:\t48 89 ce             \tmov    %rcx,%rsi\n 114:\t48 89 c7             \tmov    %rax,%rdi\n 117:\te8 00 00 00 00       \tcallq  11c <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x11c>\n 11c:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 120:\t48 89 c7             \tmov    %rax,%rdi\n 123:\te8 00 00 00 00       \tcallq  128 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x128>\n 128:\t48 89 c7             \tmov    %rax,%rdi\n 12b:\te8 00 00 00 00       \tcallq  130 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x130>\n 130:\t48 89 c2             \tmov    %rax,%rdx\n 133:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n 137:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 13b:\t48 89 ce             \tmov    %rcx,%rsi\n 13e:\t48 89 c7             \tmov    %rax,%rdi\n 141:\te8 00 00 00 00       \tcallq  146 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x146>\n 146:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 14a:\t48 89 c7             \tmov    %rax,%rdi\n 14d:\te8 00 00 00 00       \tcallq  152 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x152>\n 152:\teb 5e                \tjmp    1b2 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x1b2>\n 154:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 158:\t48 89 c7             \tmov    %rax,%rdi\n 15b:\te8 00 00 00 00       \tcallq  160 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x160>\n 160:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 164:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n 168:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 16c:\t48 89 d6             \tmov    %rdx,%rsi\n 16f:\t48 89 c7             \tmov    %rax,%rdi\n 172:\te8 00 00 00 00       \tcallq  177 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x177>\n 177:\t48 89 c3             \tmov    %rax,%rbx\n 17a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 17e:\t48 89 c7             \tmov    %rax,%rdi\n 181:\te8 00 00 00 00       \tcallq  186 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x186>\n 186:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 18a:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 18e:\t48 89 de             \tmov    %rbx,%rsi\n 191:\t48 89 c7             \tmov    %rax,%rdi\n 194:\te8 00 00 00 00       \tcallq  199 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x199>\n 199:\t48 89 c1             \tmov    %rax,%rcx\n 19c:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n 1a3:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1a7:\t48 89 ce             \tmov    %rcx,%rsi\n 1aa:\t48 89 c7             \tmov    %rax,%rdi\n 1ad:\te8 00 00 00 00       \tcallq  1b2 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x1b2>\n 1b2:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1b6:\t48 8b 00             \tmov    (%rax),%rax\n 1b9:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 1bd:\t48 c1 e2 02          \tshl    $0x2,%rdx\n 1c1:\t48 01 d0             \tadd    %rdx,%rax\n 1c4:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 1c8:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 1cc:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n 1d0:\t48 89 d6             \tmov    %rdx,%rsi\n 1d3:\t48 89 c7             \tmov    %rax,%rdi\n 1d6:\te8 00 00 00 00       \tcallq  1db <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x1db>\n 1db:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1df:\teb 1a                \tjmp    1fb <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x1fb>\n 1e1:\t48 89 c3             \tmov    %rax,%rbx\n 1e4:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 1e8:\t48 89 c7             \tmov    %rax,%rdi\n 1eb:\te8 00 00 00 00       \tcallq  1f0 <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x1f0>\n 1f0:\t48 89 d8             \tmov    %rbx,%rax\n 1f3:\t48 89 c7             \tmov    %rax,%rdi\n 1f6:\te8 00 00 00 00       \tcallq  1fb <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPKiS1_EERS4_+0x1fb>\n 1fb:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n 202:\t5b                   \tpop    %rbx\n 203:\t5d                   \tpop    %rbp\n 204:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<int> insert(_QWORD *<span class=\"supfact\">a1</span>,\n                                          __int64 <span class=\"supfact\">a2</span>,\n                                          __int64 <span class=\"supfact\">a3</span>) {\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 <span class=\"supfact\">v10</span>;\n  _QWORD *<span class=\"supfact\">v11</span>;\n  char <span class=\"supfact\">v12</span>[Number];\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  __int64 <span class=\"supfact\">v17</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  __int64 <span class=\"supfact\">v19</span>;\n  __int64 <span class=\"supfact\">v20</span>;\n  __int64 <span class=\"supfact\">v21</span>;\n  __int64 <span class=\"supfact\">v22</span>;\n  <span class=\"supfact\">v11</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v10</span> = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v14</span> = std vector<int> begin((__int64)<span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v22</span> = __gnu_cxx operator-\n      <int const *, int *, std vector<int>>(&<span class=\"supfact\">v10</span>,\n                                            &<span class=\"supfact\">v14</span>);\n  if (<span class=\"supfact\">v11</span>[Number] == <span class=\"supfact\">v11</span>[Number]) {\n    <span class=\"supfact\">v18</span> = std vector<int> cbegin(<span class=\"supfact\">v11</span>);\n    v6 = __gnu_cxx operator-<int const *, std vector<int>>(\n        &<span class=\"supfact\">v10</span>, &<span class=\"supfact\">v18</span>);\n    <span class=\"supfact\">v19</span> = std vector<int> begin((__int64)<span class=\"supfact\">v11</span>);\n    v7 = __gnu_cxx __normal_iterator<int *, std vector<int>> operator+(\n        &<span class=\"supfact\">v19</span>, v6);\n    std vector<int> _M_realloc_insert<int const &>(<span class=\"supfact\">v11</span>, v7,\n                                                   <span class=\"supfact\">a3</span>);\n  } else {\n    <span class=\"supfact\">v15</span> = std vector<int> end((__int64)<span class=\"supfact\">v11</span>);\n    if ((unsigned __int8)__gnu_cxx operator==\n        <int const *, int *, std vector<int>>(&<span class=\"supfact\">v10</span>,\n                                              &<span class=\"supfact\">v15</span>)) {\n      std allocator_traits<std allocator<int>> construct<int, int const &>(\n          <span class=\"supfact\">v11</span>, <span class=\"supfact\">v11</span>[Number], <span class=\"supfact\">a3</span>);\n      <span class=\"supfact\">v11</span>[Number] += Number L;\n    } else {\n      <span class=\"supfact\">v16</span> = std vector<int> cbegin(<span class=\"supfact\">v11</span>);\n      v3 = __gnu_cxx operator-<int const *, std vector<int>>(\n          &<span class=\"supfact\">v10</span>, &<span class=\"supfact\">v16</span>);\n      <span class=\"supfact\">v17</span> = std vector<int> begin((__int64)<span class=\"supfact\">v11</span>);\n      <span class=\"supfact\">v13</span> =\n          __gnu_cxx __normal_iterator<int *, std vector<int>> operator+(\n              &<span class=\"supfact\">v17</span>, v3);\n      std vector<int> _Temporary_value _Temporary_value<int const &>(\n          <span class=\"supfact\">v12</span>, <span class=\"supfact\">v11</span>, <span class=\"supfact\">a3</span>);\n      v4 = std vector<int> _Temporary_value _M_val(<span class=\"supfact\">v12</span>);\n      v5 = std move<int &>(v4);\n      std vector<int> _M_insert_aux<int>(<span class=\"supfact\">v11</span>,\n                                         <span class=\"supfact\">v13</span>, v5);\n      std vector<int> _Temporary_value ~_Temporary_value(<span class=\"supfact\">v12</span>);\n    }\n  }\n  <span class=\"supfact\">v21</span> = Number * <span class=\"supfact\">v22</span> + *<span class=\"supfact\">v11</span>;\n  __gnu_cxx __normal_iterator<int *, std vector<int>> __normal_iterator(\n      &<span class=\"supfact\">v20</span>, &<span class=\"supfact\">v21</span>);\n  return <span class=\"supfact\">v20</span>;\n}", "code_t": "std vector<int> iterator __cdecl std vector<int>\ninsert(std vector<int> *const <span class=\"supfact\">this</span>,\n       std vector<int> const_iterator <span class=\"supfact\">__position</span>,\n       const std vector<int> value_type *<span class=\"supfact\">__x</span>) {\n  __gnu_cxx __normal_iterator<int *, std vector<int>> difference_type v3;\n  int *v4;\n  int *v5;\n  __gnu_cxx __normal_iterator<int *, std vector<int>> difference_type v6;\n  __gnu_cxx __normal_iterator<int *, std vector<int>> v7;\n  std vector<int> const_iterator <span class=\"supfact\">__positiona</span>;\n  std vector<int> *<span class=\"supfact\">thisa</span>;\n  std vector<int> _Temporary_value <span class=\"supfact\">__x_copy</span>;\n  __gnu_cxx __normal_iterator<int *, std vector<int>> <span class=\"supfact\">__pos</span>;\n  __gnu_cxx __normal_iterator<int *, std vector<int>> <span class=\"supfact\">__rhs</span>;\n  __gnu_cxx __normal_iterator<int *, std vector<int>> <span class=\"supfact\">v15</span>;\n  __gnu_cxx __normal_iterator<int const *, std vector<int>> <span class=\"supfact\">v16</span>;\n  __gnu_cxx __normal_iterator<int *, std vector<int>> <span class=\"supfact\">v17</span>;\n  __gnu_cxx __normal_iterator<int const *, std vector<int>> <span class=\"supfact\">v18</span>;\n  __gnu_cxx __normal_iterator<int *, std vector<int>> <span class=\"supfact\">v19</span>;\n  __gnu_cxx __normal_iterator<int *, std vector<int>> <span class=\"supfact\">v20</span>;\n  int *<span class=\"supfact\">__i</span>;\n  std vector<int> size_type <span class=\"supfact\">__n</span>;\n  <span class=\"supfact\">thisa</span> = <span class=\"supfact\">this</span>;\n  <span class=\"supfact\">__positiona</span>._M_current =\n      <span class=\"supfact\">__position</span>._M_current;\n  <span class=\"supfact\">__rhs</span>._M_current =\n      std vector<int> begin(<span class=\"supfact\">this</span>)._M_current;\n  <span class=\"supfact\">__n</span> = __gnu_cxx operator-\n      <int const *, int *, std vector<int>>(&<span class=\"supfact\">__positiona</span>,\n                                            &<span class=\"supfact\">__rhs</span>);\n  if (<span class=\"supfact\">thisa</span>->_M_impl._M_finish ==\n      <span class=\"supfact\">thisa</span>->_M_impl._M_end_of_storage) {\n    <span class=\"supfact\">v18</span>._M_current =\n        std vector<int> cbegin(<span class=\"supfact\">thisa</span>)._M_current;\n    v6 = __gnu_cxx operator-<int const *, std vector<int>>(\n        &<span class=\"supfact\">__positiona</span>, &<span class=\"supfact\">v18</span>);\n    <span class=\"supfact\">v19</span>._M_current =\n        std vector<int> begin(<span class=\"supfact\">thisa</span>)._M_current;\n    v7._M_current = __gnu_cxx __normal_iterator<int *, std vector<int>>\n                    operator+(&<span class=\"supfact\">v19</span>, v6)._M_current;\n    std vector<int> _M_realloc_insert<int const &>(\n        <span class=\"supfact\">thisa</span>, v7, <span class=\"supfact\">__x</span>, v7._M_current);\n  } else {\n    <span class=\"supfact\">v15</span>._M_current =\n        std vector<int> end(<span class=\"supfact\">thisa</span>)._M_current;\n    if (__gnu_cxx operator==<int const *, int *, std vector<int>>(\n            &<span class=\"supfact\">__positiona</span>, &<span class=\"supfact\">v15</span>)) {\n      std allocator_traits<std allocator<int>> construct<int, int const &>(\n          (std allocator_traits<std allocator<int>> allocator_type *)\n              <span class=\"supfact\">thisa</span>,\n          <span class=\"supfact\">thisa</span>->_M_impl._M_finish, <span class=\"supfact\">__x</span>,\n          <span class=\"supfact\">thisa</span>->_M_impl._M_finish);\n      ++<span class=\"supfact\">thisa</span>->_M_impl._M_finish;\n    } else {\n      <span class=\"supfact\">v16</span>._M_current =\n          std vector<int> cbegin(<span class=\"supfact\">thisa</span>)._M_current;\n      v3 = __gnu_cxx operator-<int const *, std vector<int>>(\n          &<span class=\"supfact\">__positiona</span>, &<span class=\"supfact\">v16</span>);\n      <span class=\"supfact\">v17</span>._M_current =\n          std vector<int> begin(<span class=\"supfact\">thisa</span>)._M_current;\n      <span class=\"supfact\">__pos</span>._M_current =\n          __gnu_cxx __normal_iterator<int *, std vector<int>>\n          operator+(&<span class=\"supfact\">v17</span>, v3)._M_current;\n      std vector<int> _Temporary_value _Temporary_value<int const &>(\n          &<span class=\"supfact\">__x_copy</span>, <span class=\"supfact\">thisa</span>, <span class=\"supfact\">__x</span>,\n          (const int *)<span class=\"supfact\">thisa</span>);\n      v4 = std vector<int> _Temporary_value _M_val(&<span class=\"supfact\">__x_copy</span>);\n      v5 = std move<int &>(v4);\n      std vector<int> _M_insert_aux<int>(<span class=\"supfact\">thisa</span>,\n                                         <span class=\"supfact\">__pos</span>, v5);\n      std vector<int> _Temporary_value ~_Temporary_value(\n          &<span class=\"supfact\">__x_copy</span>);\n    }\n  }\n  <span class=\"supfact\">__i</span> =\n      &<span class=\"supfact\">thisa</span>->_M_impl._M_start[<span class=\"supfact\">__n</span>];\n  __gnu_cxx __normal_iterator<int *, std vector<int>> __normal_iterator(\n      &<span class=\"supfact\">v20</span>, &<span class=\"supfact\">__i</span>);\n  return <span class=\"supfact\">v20</span>;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "this", "ref_type": "std::vector<int> *"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "__position", "ref_type": "struct std::vector<int>::const_iterator { const int * _M_current; }"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "__x", "ref_type": "const std::vector<int>::value_type *"}, {"name": "v10", "type": "__int64", "pred_name": "v10", "ref_name": "__positiona", "ref_type": "struct std::vector<int>::const_iterator { const int * _M_current; }"}, {"name": "v11", "type": "__int64", "pred_name": "v11", "ref_name": "thisa", "ref_type": "std::vector<int> *"}, {"name": "v12", "type": "char[16]", "pred_name": "v12", "ref_name": "__x_copy", "ref_type": "struct std::vector<int>::_Temporary_value { std::vector<int> * _M_this; std::aligned_storage<4,4>::type __buf; PADDING (4); }"}, {"name": "v13", "type": "__int64", "pred_name": "v13", "ref_name": "__pos", "ref_type": "struct __gnu_cxx::__normal_iterator<int*,std::vector<int> > { int * _M_current; }"}, {"name": "v14", "type": "__int64", "pred_name": "v14", "ref_name": "__rhs", "ref_type": "struct __gnu_cxx::__normal_iterator<int*,std::vector<int> > { int * _M_current; }"}, {"name": "v15", "type": "__int64", "pred_name": "v15", "ref_name": "v15", "ref_type": "struct __gnu_cxx::__normal_iterator<int*,std::vector<int> > { int * _M_current; }"}, {"name": "v16", "type": "__int64", "pred_name": "v16", "ref_name": "v16", "ref_type": "struct __gnu_cxx::__normal_iterator<int const*,std::vector<int> > { const int * _M_current; }"}, {"name": "v17", "type": "__int64", "pred_name": "v17", "ref_name": "v17", "ref_type": "struct __gnu_cxx::__normal_iterator<int*,std::vector<int> > { int * _M_current; }"}, {"name": "v18", "type": "__int64", "pred_name": "v18", "ref_name": "v18", "ref_type": "struct __gnu_cxx::__normal_iterator<int const*,std::vector<int> > { const int * _M_current; }"}, {"name": "v19", "type": "__int64", "pred_name": "v19", "ref_name": "v19", "ref_type": "struct __gnu_cxx::__normal_iterator<int*,std::vector<int> > { int * _M_current; }"}, {"name": "v20", "type": "__int64", "pred_name": "v20", "ref_name": "v20", "ref_type": "struct __gnu_cxx::__normal_iterator<int*,std::vector<int> > { int * _M_current; }"}, {"name": "v21", "type": "__int64", "pred_name": "v21", "ref_name": "__i", "ref_type": "int *"}, {"name": "v22", "type": "__int64", "pred_name": "v22", "ref_name": "__n", "ref_type": "std::vector<int>::size_type"}], "body_in_train": false}, {"repo_owner": "jgross1", "repo_name": "xen", "path": "jgross1/xen/600e0c22ba598034fc4ffa4c8a37cd3ff34a53f80c1c88ab397177cccced9dd3", "path_in_repo": "jgross1/xen//xen/common/rcupdate.o", "objdump": "0000000000000021 <clear_bit>:\n  21:\t55                   \tpush   %rbp\n  22:\t48 89 e5             \tmov    %rsp,%rbp\n  25:\t48 83 ec 10          \tsub    $0x10,%rsp\n  29:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n  2c:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  30:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  34:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  37:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  3b:\tf0 0f b3 10          \tlock btr %edx,(%rax)\n  3f:\t90                   \tnop\n  40:\tc9                   \tleaveq \n  41:\tc3                   \tretq   ", "code_s": "volatile signed __int32 *__fastcall clear_bit(\n    unsigned int <span class=\"supfact\">a1</span>,\n    volatile signed __int32 *<span class=\"supfact\">a2</span>) {\n  volatile signed __int32 *<span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = <span class=\"supfact\">a2</span>;\n  _interlockedbittestandreset(<span class=\"supfact\">a2</span>, <span class=\"supfact\">a1</span>);\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl clear_bit(int <span class=\"supfact\">nr</span>,\n                       volatile void *<span class=\"supfact\">addr</span>) {\n  _interlockedbittestandreset((volatile signed __int32 *)<span class=\"supfact\">addr</span>,\n                              <span class=\"supfact\">nr</span>);\n}", "var": [{"name": "a1", "type": "int", "pred_name": "nr", "ref_name": "nr", "ref_type": "int"}, {"name": "a2", "type": "volatile void *", "pred_name": "addr", "ref_name": "addr", "ref_type": "volatile void *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "nehresmann", "repo_name": "catalysis", "path": "nehresmann/catalysis/1d0ba16769cedb05a600c21c31febbe4ec4488a9903039ff740ad86955cef494", "path_in_repo": "nehresmann/catalysis/lib/box2d/old/Contrib/glui/glui_radio.o", "objdump": "0000000000000040 <_ZN15GLUI_RadioGroup8set_nameEPKc>:\n  40:\t41 54                \tpush   %r12\n  42:\t49 89 f4             \tmov    %rsi,%r12\n  45:\t53                   \tpush   %rbx\n  46:\t48 89 fb             \tmov    %rdi,%rbx\n  49:\t48 89 f7             \tmov    %rsi,%rdi\n  4c:\t48 83 ec 08          \tsub    $0x8,%rsp\n  50:\te8 00 00 00 00       \tcallq  55 <_ZN15GLUI_RadioGroup8set_nameEPKc+0x15>\n  55:\t48 8b 93 f8 01 00 00 \tmov    0x1f8(%rbx),%rdx\n  5c:\t48 8d bb f0 01 00 00 \tlea    0x1f0(%rbx),%rdi\n  63:\t31 f6                \txor    %esi,%esi\n  65:\t49 89 c0             \tmov    %rax,%r8\n  68:\t4c 89 e1             \tmov    %r12,%rcx\n  6b:\te8 00 00 00 00       \tcallq  70 <_ZN15GLUI_RadioGroup8set_nameEPKc+0x30>\n  70:\t48 8b bb d8 01 00 00 \tmov    0x1d8(%rbx),%rdi\n  77:\t48 85 ff             \ttest   %rdi,%rdi\n  7a:\t74 14                \tje     90 <_ZN15GLUI_RadioGroup8set_nameEPKc+0x50>\n  7c:\t48 83 c4 08          \tadd    $0x8,%rsp\n  80:\t5b                   \tpop    %rbx\n  81:\t41 5c                \tpop    %r12\n  83:\te9 00 00 00 00       \tjmpq   88 <_ZN15GLUI_RadioGroup8set_nameEPKc+0x48>\n  88:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n  8f:\t00 \n  90:\t48 83 c4 08          \tadd    $0x8,%rsp\n  94:\t5b                   \tpop    %rbx\n  95:\t41 5c                \tpop    %r12\n  97:\tc3                   \tretq   \n  98:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n  9f:\t00 ", "code_s": "__int64 __fastcall GLUI_RadioGroup\nset_name(GLUI_RadioGroup *<span class=\"supfact\">this</span>,\n         const char *<span class=\"supfact\">a2</span>) {\n  size_t v2;\n  __int64 result;\n  GLUI_Main *v4;\n  v2 = strlen(<span class=\"supfact\">a2</span>);\n  result =\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      _M_replace((char *)<span class=\"supfact\">this</span> + Number, Number L,\n                 *((_QWORD *)<span class=\"supfact\">this</span> + Number), <span class=\"supfact\">a2</span>,\n                 v2);\n  v4 = (GLUI_Main *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  if (v4)\n    result = GLUI_Main refresh(v4);\n  return result;\n}", "code_t": "void __fastcall GLUI_RadioGroup\nset_name(GLUI_RadioGroup *const <span class=\"supfact\">this</span>,\n         const char *<span class=\"supfact\">text</span>) {\n  size_t v2;\n  GLUI_Main *v3;\n  v2 = strlen(<span class=\"supfact\">text</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  _M_replace(&<span class=\"supfact\">this</span>->baseclass_0[Number], Number L,\n             *(_QWORD *)&<span class=\"supfact\">this</span>->baseclass_0[Number],\n             <span class=\"supfact\">text</span>, v2);\n  v3 = *(GLUI_Main **)&<span class=\"supfact\">this</span>->baseclass_0[Number];\n  if (v3)\n    GLUI_Main refresh(v3);\n}", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "GLUI_RadioGroup *"}, {"name": "a2", "type": "const char *", "pred_name": "name", "ref_name": "text", "ref_type": "const char *"}], "body_in_train": false}, {"repo_owner": "allanroscoche", "repo_name": "BigVelvet", "path": "allanroscoche/BigVelvet/f8af64a10bc66207aef824ee0bb08c8e3eb16bd8d77e075f91403372b01cdb23", "path_in_repo": "allanroscoche/BigVelvet/contrib/MetaVelvet-v0.3.1/obj/passageMarker.o", "objdump": "000000000000099d <copyPassageMarker>:\n     99d:\t55                   \tpush   %rbp\n     99e:\t48 89 e5             \tmov    %rsp,%rbp\n     9a1:\t48 83 ec 30          \tsub    $0x30,%rsp\n     9a5:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     9a9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     9ad:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     9b1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     9b5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9ba:\te8 00 00 00 00       \tcallq  9bf <copyPassageMarker+0x22>\n     9bf:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     9c3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9c8:\te8 00 00 00 00       \tcallq  9cd <copyPassageMarker+0x30>\n     9cd:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     9d1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     9d5:\t8b 50 38             \tmov    0x38(%rax),%edx\n     9d8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     9dc:\t89 50 38             \tmov    %edx,0x38(%rax)\n     9df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     9e3:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n     9e7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     9eb:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n     9ef:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     9f3:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n     9fa:\t00 \n     9fb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     9ff:\t48 c7 40 10 00 00 00 \tmovq   $0x0,0x10(%rax)\n     a06:\t00 \n     a07:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     a0b:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     a12:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a16:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n     a1a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     a1e:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n     a22:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a26:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n     a2a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     a2e:\t48 89 50 30          \tmov    %rdx,0x30(%rax)\n     a32:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     a36:\tc6 40 3c 00          \tmovb   $0x0,0x3c(%rax)\n     a3a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a3e:\t8b 50 38             \tmov    0x38(%rax),%edx\n     a41:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a45:\t89 50 38             \tmov    %edx,0x38(%rax)\n     a48:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a4c:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n     a50:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a54:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n     a58:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a5c:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n     a63:\t00 \n     a64:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a68:\t48 c7 40 10 00 00 00 \tmovq   $0x0,0x10(%rax)\n     a6f:\t00 \n     a70:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a74:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     a7b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a7f:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n     a83:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a87:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n     a8b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a8f:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n     a93:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a97:\t48 89 50 30          \tmov    %rdx,0x30(%rax)\n     a9b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a9f:\tc6 40 3c 00          \tmovb   $0x0,0x3c(%rax)\n     aa3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     aa7:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     aab:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n     aaf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ab3:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     ab7:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n     abb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     abf:\tc9                   \tleaveq \n     ac0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall copyPassageMarker(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v1</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v3</span> = allocatePassageMarker();\n  <span class=\"supfact\">v1</span> = allocatePassageMarker();\n  *(_DWORD *)(<span class=\"supfact\">v3</span> + Number) =\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) =\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) = Number L;\n  *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) = Number L;\n  *(_QWORD *)<span class=\"supfact\">v3</span> = Number L;\n  *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) =\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) =\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  *(_BYTE *)(<span class=\"supfact\">v3</span> + Number) = Number;\n  *(_DWORD *)(<span class=\"supfact\">v1</span> + Number) =\n      *(_DWORD *)(<span class=\"supfact\">v4</span> + Number);\n  *(_QWORD *)(<span class=\"supfact\">v1</span> + Number) =\n      *(_QWORD *)(<span class=\"supfact\">v4</span> + Number);\n  *(_QWORD *)(<span class=\"supfact\">v1</span> + Number) = Number L;\n  *(_QWORD *)(<span class=\"supfact\">v1</span> + Number) = Number L;\n  *(_QWORD *)<span class=\"supfact\">v1</span> = Number L;\n  *(_QWORD *)(<span class=\"supfact\">v1</span> + Number) =\n      *(_QWORD *)(<span class=\"supfact\">v4</span> + Number);\n  *(_QWORD *)(<span class=\"supfact\">v1</span> + Number) =\n      *(_QWORD *)(<span class=\"supfact\">v4</span> + Number);\n  *(_BYTE *)(<span class=\"supfact\">v1</span> + Number) = Number;\n  *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) = <span class=\"supfact\">v1</span>;\n  *(_QWORD *)(<span class=\"supfact\">v1</span> + Number) = <span class=\"supfact\">v3</span>;\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "PassageMarker *__cdecl copyPassageMarker(\n    PassageMarker *<span class=\"supfact\">marker</span>) {\n  PassageMarker *<span class=\"supfact\">v1</span>;\n  PassageMarker *<span class=\"supfact\">copy</span>;\n  PassageMarker *<span class=\"supfact\">twin</span>;\n  <span class=\"supfact\">twin</span> = <span class=\"supfact\">marker</span>->twinMarker;\n  <span class=\"supfact\">copy</span> = allocatePassageMarker();\n  <span class=\"supfact\">v1</span> = allocatePassageMarker();\n  <span class=\"supfact\">copy</span>->sequenceID = <span class=\"supfact\">marker</span>->sequenceID;\n  <span class=\"supfact\">copy</span>->start = <span class=\"supfact\">marker</span>->start;\n  <span class=\"supfact\">copy</span>->nextInNode = Number L;\n  <span class=\"supfact\">copy</span>->previousInNode = Number L;\n  <span class=\"supfact\">copy</span>->node = Number L;\n  <span class=\"supfact\">copy</span>->nextInSequence = <span class=\"supfact\">marker</span>->nextInSequence;\n  <span class=\"supfact\">copy</span>->finishOffset = <span class=\"supfact\">marker</span>->finishOffset;\n  <span class=\"supfact\">copy</span>->status = Number;\n  <span class=\"supfact\">v1</span>->sequenceID = <span class=\"supfact\">twin</span>->sequenceID;\n  <span class=\"supfact\">v1</span>->start = <span class=\"supfact\">twin</span>->start;\n  <span class=\"supfact\">v1</span>->nextInNode = Number L;\n  <span class=\"supfact\">v1</span>->previousInNode = Number L;\n  <span class=\"supfact\">v1</span>->node = Number L;\n  <span class=\"supfact\">v1</span>->nextInSequence = <span class=\"supfact\">twin</span>->nextInSequence;\n  <span class=\"supfact\">v1</span>->finishOffset = <span class=\"supfact\">twin</span>->finishOffset;\n  <span class=\"supfact\">v1</span>->status = Number;\n  <span class=\"supfact\">copy</span>->twinMarker = <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span>->twinMarker = <span class=\"supfact\">copy</span>;\n  return <span class=\"supfact\">copy</span>;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "marker", "ref_type": "PassageMarker *"}, {"name": "v1", "type": "__int64", "pred_name": "v1", "ref_name": "v1", "ref_type": "PassageMarker *"}, {"name": "v3", "type": "__int64", "pred_name": "v3", "ref_name": "copy", "ref_type": "PassageMarker *"}, {"name": "v4", "type": "__int64", "pred_name": "v4", "ref_name": "twin", "ref_type": "PassageMarker *"}], "body_in_train": false}, {"repo_owner": "buaales", "repo_name": "barrelfish-les", "path": "buaales/barrelfish-les/3f4d0e1a9d68c596b49b7ec82e0b75674c9b15b7e73d2e229326b2d4c3b13013", "path_in_repo": "buaales/barrelfish-les/lib/openssl-1.0.0d/demos/tunala/ip.o", "objdump": "000000000000039d <ip_create_listener>:\n 39d:\t55                   \tpush   %rbp\n 39e:\t48 89 e5             \tmov    %rsp,%rbp\n 3a1:\t48 83 ec 20          \tsub    $0x20,%rsp\n 3a5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 3a9:\t48 8d 55 f6          \tlea    -0xa(%rbp),%rdx\n 3ad:\t48 8d 75 f8          \tlea    -0x8(%rbp),%rsi\n 3b1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3b5:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n 3ba:\t48 89 c7             \tmov    %rax,%rdi\n 3bd:\te8 00 00 00 00       \tcallq  3c2 <ip_create_listener+0x25>\n 3c2:\t85 c0                \ttest   %eax,%eax\n 3c4:\t75 07                \tjne    3cd <ip_create_listener+0x30>\n 3c6:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 3cb:\teb 15                \tjmp    3e2 <ip_create_listener+0x45>\n 3cd:\t0f b7 45 f6          \tmovzwl -0xa(%rbp),%eax\n 3d1:\t0f b7 d0             \tmovzwl %ax,%edx\n 3d4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3d8:\t89 d6                \tmov    %edx,%esi\n 3da:\t48 89 c7             \tmov    %rax,%rdi\n 3dd:\te8 00 00 00 00       \tcallq  3e2 <ip_create_listener+0x45>\n 3e2:\tc9                   \tleaveq \n 3e3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ip_create_listener(const char *<span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  uint16_t <span class=\"supfact\">v2</span>;\n  char *<span class=\"supfact\">v3</span>;\n  if ((unsigned int)ip_parse_address(<span class=\"supfact\">a1</span>, &<span class=\"supfact\">v3</span>,\n                                     &<span class=\"supfact\">v2</span>, Number))\n    <span class=\"supfact\">result</span> =\n        ip_create_listener_split(<span class=\"supfact\">v3</span>, <span class=\"supfact\">v2</span>);\n  else\n    <span class=\"supfact\">result</span> = Number;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl ip_create_listener(const char *<span class=\"supfact\">address</span>) {\n  int <span class=\"supfact\">result</span>;\n  unsigned __int16 <span class=\"supfact\">port</span>;\n  const char *<span class=\"supfact\">ip_0</span>;\n  if (ip_parse_address(<span class=\"supfact\">address</span>, &<span class=\"supfact\">ip_0</span>,\n                       &<span class=\"supfact\">port</span>, Number))\n    <span class=\"supfact\">result</span> =\n        ip_create_listener_split(<span class=\"supfact\">ip_0</span>, <span class=\"supfact\">port</span>);\n  else\n    <span class=\"supfact\">result</span> = Number;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "const char *", "pred_name": "address", "ref_name": "address", "ref_type": "const char *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "v2", "type": "unsigned __int16", "pred_name": "port", "ref_name": "port", "ref_type": "unsigned __int16"}, {"name": "v3", "type": "const char *", "pred_name": "ip_0", "ref_name": "ip_0", "ref_type": "const char *"}], "body_in_train": true}, {"repo_owner": "josephholsten", "repo_name": "pbis", "path": "josephholsten/pbis/4908e15a7b16a2e812769749e24bc4098ed27a7f21764855a5190085f828d019", "path_in_repo": "josephholsten/pbis/openssl/engines/e_aep.o", "objdump": "000000000000148a <ConvertAEPBigNum>:\n    148a:\t55                   \tpush   %rbp\n    148b:\t48 89 e5             \tmov    %rsp,%rbp\n    148e:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1492:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1496:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    149a:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    149e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    14a2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    14a6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    14aa:\t48 c1 e0 03          \tshl    $0x3,%rax\n    14ae:\t3d e0 ff ff 7f       \tcmp    $0x7fffffe0,%eax\n    14b3:\t7f 5b                \tjg     1510 <ConvertAEPBigNum+0x86>\n    14b5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    14b9:\t48 c1 e0 03          \tshl    $0x3,%rax\n    14bd:\t83 c0 1f             \tadd    $0x1f,%eax\n    14c0:\t8d 50 1f             \tlea    0x1f(%rax),%edx\n    14c3:\t85 c0                \ttest   %eax,%eax\n    14c5:\t0f 48 c2             \tcmovs  %edx,%eax\n    14c8:\tc1 f8 05             \tsar    $0x5,%eax\n    14cb:\t89 c2                \tmov    %eax,%edx\n    14cd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    14d1:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    14d4:\t39 c2                \tcmp    %eax,%edx\n    14d6:\t7e 2e                \tjle    1506 <ConvertAEPBigNum+0x7c>\n    14d8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    14dc:\t48 c1 e0 03          \tshl    $0x3,%rax\n    14e0:\t83 c0 1f             \tadd    $0x1f,%eax\n    14e3:\t8d 50 1f             \tlea    0x1f(%rax),%edx\n    14e6:\t85 c0                \ttest   %eax,%eax\n    14e8:\t0f 48 c2             \tcmovs  %edx,%eax\n    14eb:\tc1 f8 05             \tsar    $0x5,%eax\n    14ee:\t89 c2                \tmov    %eax,%edx\n    14f0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    14f4:\t89 d6                \tmov    %edx,%esi\n    14f6:\t48 89 c7             \tmov    %rax,%rdi\n    14f9:\te8 00 00 00 00       \tcallq  14fe <ConvertAEPBigNum+0x74>\n    14fe:\t48 85 c0             \ttest   %rax,%rax\n    1501:\t0f 94 c0             \tsete   %al\n    1504:\teb 0f                \tjmp    1515 <ConvertAEPBigNum+0x8b>\n    1506:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    150b:\t0f 94 c0             \tsete   %al\n    150e:\teb 05                \tjmp    1515 <ConvertAEPBigNum+0x8b>\n    1510:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1515:\t84 c0                \ttest   %al,%al\n    1517:\t74 0a                \tje     1523 <ConvertAEPBigNum+0x99>\n    1519:\tb8 02 00 00 10       \tmov    $0x10000002,%eax\n    151e:\te9 97 00 00 00       \tjmpq   15ba <ConvertAEPBigNum+0x130>\n    1523:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1527:\t48 c1 e8 02          \tshr    $0x2,%rax\n    152b:\t89 c2                \tmov    %eax,%edx\n    152d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1531:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1534:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    153b:\teb 6c                \tjmp    15a9 <ConvertAEPBigNum+0x11f>\n    153d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1541:\t48 83 c0 03          \tadd    $0x3,%rax\n    1545:\t0f b6 00             \tmovzbl (%rax),%eax\n    1548:\t0f b6 c0             \tmovzbl %al,%eax\n    154b:\tc1 e0 08             \tshl    $0x8,%eax\n    154e:\t89 c2                \tmov    %eax,%edx\n    1550:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1554:\t48 83 c0 02          \tadd    $0x2,%rax\n    1558:\t0f b6 00             \tmovzbl (%rax),%eax\n    155b:\t0f b6 c0             \tmovzbl %al,%eax\n    155e:\t09 d0                \tor     %edx,%eax\n    1560:\tc1 e0 10             \tshl    $0x10,%eax\n    1563:\t89 c6                \tmov    %eax,%esi\n    1565:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1569:\t48 83 c0 01          \tadd    $0x1,%rax\n    156d:\t0f b6 00             \tmovzbl (%rax),%eax\n    1570:\t0f b6 c0             \tmovzbl %al,%eax\n    1573:\tc1 e0 08             \tshl    $0x8,%eax\n    1576:\t89 c2                \tmov    %eax,%edx\n    1578:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    157c:\t0f b6 00             \tmovzbl (%rax),%eax\n    157f:\t0f b6 c0             \tmovzbl %al,%eax\n    1582:\t89 d1                \tmov    %edx,%ecx\n    1584:\t09 c1                \tor     %eax,%ecx\n    1586:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    158a:\t48 8b 00             \tmov    (%rax),%rax\n    158d:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    1590:\t48 63 d2             \tmovslq %edx,%rdx\n    1593:\t48 c1 e2 02          \tshl    $0x2,%rdx\n    1597:\t48 01 d0             \tadd    %rdx,%rax\n    159a:\t09 ce                \tor     %ecx,%esi\n    159c:\t89 f2                \tmov    %esi,%edx\n    159e:\t89 10                \tmov    %edx,(%rax)\n    15a0:\t48 83 45 d8 04       \taddq   $0x4,-0x28(%rbp)\n    15a5:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    15a9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    15ad:\t8b 40 08             \tmov    0x8(%rax),%eax\n    15b0:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    15b3:\t7c 88                \tjl     153d <ConvertAEPBigNum+0xb3>\n    15b5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    15ba:\tc9                   \tleaveq \n    15bb:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall ConvertAEPBigNum(__int64 <span class=\"supfact\">a1</span>,\n                                    unsigned __int64 <span class=\"supfact\">a2</span>,\n                                    _DWORD *<span class=\"supfact\">a3</span>) {\n  int v3;\n  int v4;\n  bool v5;\n  int <span class=\"supfact\">i</span>;\n  if (Number * (int)<span class=\"supfact\">a2</span> > Number) {\n    v5 = Number;\n  } else {\n    v3 = Number * <span class=\"supfact\">a2</span> + Number;\n    if (v3 < Number)\n      v3 = Number * <span class=\"supfact\">a2</span> + Number;\n    if (v3 >> Number <= *(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n      v5 = <span class=\"supfact\">a1</span> == Number;\n    } else {\n      v4 = Number * <span class=\"supfact\">a2</span> + Number;\n      if (v4 < Number)\n        v4 = Number * <span class=\"supfact\">a2</span> + Number;\n      v5 = bn_expand2(<span class=\"supfact\">a1</span>, (unsigned int)(v4 >> Number)) ==\n           Number;\n    }\n  }\n  if (v5)\n    return Number L;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">a2</span> >> Number;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n       ++<span class=\"supfact\">i</span>)\n    *(_DWORD *)(Number L * <span class=\"supfact\">i</span> + *(_QWORD *)<span class=\"supfact\">a1</span>) =\n        *<span class=\"supfact\">a3</span>++;\n  return Number L;\n}", "code_t": "AEP_RV __cdecl ConvertAEPBigNum(void *<span class=\"supfact\">ArbBigNum</span>,\n                                AEP_U32 <span class=\"supfact\">BigNumSize</span>,\n                                unsigned __int8 *<span class=\"supfact\">AEP_BigNum</span>) {\n  int v3;\n  int v4;\n  bool v5;\n  int <span class=\"supfact\">i</span>;\n  if (Number * (int)<span class=\"supfact\">BigNumSize</span> > Number) {\n    v5 = Number;\n  } else {\n    v3 = Number * <span class=\"supfact\">BigNumSize</span> + Number;\n    if (v3 < Number)\n      v3 = Number * <span class=\"supfact\">BigNumSize</span> + Number;\n    if (v3 >> Number <= *((_DWORD *)<span class=\"supfact\">ArbBigNum</span> + Number)) {\n      v5 = <span class=\"supfact\">ArbBigNum</span> == Number L;\n    } else {\n      v4 = Number * <span class=\"supfact\">BigNumSize</span> + Number;\n      if (v4 < Number)\n        v4 = Number * <span class=\"supfact\">BigNumSize</span> + Number;\n      v5 = bn_expand2(<span class=\"supfact\">ArbBigNum</span>,\n                      (unsigned int)(v4 >> Number)) == Number;\n    }\n  }\n  if (v5)\n    return Number L;\n  *((_DWORD *)<span class=\"supfact\">ArbBigNum</span> + Number) =\n      <span class=\"supfact\">BigNumSize</span> >> Number;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < *((_DWORD *)<span class=\"supfact\">ArbBigNum</span> + Number);\n       ++<span class=\"supfact\">i</span>) {\n    *(_DWORD *)(Number L * <span class=\"supfact\">i</span> +\n                *(_QWORD *)<span class=\"supfact\">ArbBigNum</span>) =\n        *(_DWORD *)<span class=\"supfact\">AEP_BigNum</span>;\n    <span class=\"supfact\">AEP_BigNum</span> += Number;\n  }\n  return Number L;\n}", "var": [{"name": "a1", "type": "BIGNUM *", "pred_name": "r", "ref_name": "ArbBigNum", "ref_type": "void *"}, {"name": "a2", "type": "const BIGNUM *", "pred_name": "a", "ref_name": "BigNumSize", "ref_type": "AEP_U32"}, {"name": "a3", "type": "const BIGNUM *", "pred_name": "b", "ref_name": "AEP_BigNum", "ref_type": "unsigned __int8 *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "Khadgar1006", "repo_name": "FORLINX-Linux3.14-I.MX6UL", "path": "Khadgar1006/FORLINX-Linux3.14-I.MX6UL/cb80a4543097f86266ec8b4250fb7934ee0e1be03e7a0656e30eb7ddba7342dc", "path_in_repo": "Khadgar1006/FORLINX-Linux3.14-I.MX6UL/linux-3.14.38/tools/perf/builtin-top.o", "objdump": "0000000000002992 <__cmd_top>:\n    2992:\t55                   \tpush   %rbp\n    2993:\t48 89 e5             \tmov    %rsp,%rbp\n    2996:\t48 83 ec 40          \tsub    $0x40,%rsp\n    299a:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    299e:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    29a5:\t00 00 \n    29a7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    29ab:\t31 c0                \txor    %eax,%eax\n    29ad:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    29b1:\t48 83 e8 80          \tsub    $0xffffffffffffff80,%rax\n    29b5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    29b9:\tba 00 00 00 00       \tmov    $0x0,%edx\n    29be:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    29c3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    29c8:\te8 00 00 00 00       \tcallq  29cd <__cmd_top+0x3b>\n    29cd:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    29d1:\t48 89 82 40 01 00 00 \tmov    %rax,0x140(%rdx)\n    29d8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    29dc:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n    29e3:\t48 85 c0             \ttest   %rax,%rax\n    29e6:\t75 0a                \tjne    29f2 <__cmd_top+0x60>\n    29e8:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    29ed:\te9 76 02 00 00       \tjmpq   2c68 <__cmd_top+0x2d6>\n    29f2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    29f6:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n    29fd:\t48 05 c0 00 00 00    \tadd    $0xc0,%rax\n    2a03:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2a08:\t48 89 c7             \tmov    %rax,%rdi\n    2a0b:\te8 00 00 00 00       \tcallq  2a10 <__cmd_top+0x7e>\n    2a10:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2a17 <__cmd_top+0x85>\n    2a17:\t48 85 c0             \ttest   %rax,%rax\n    2a1a:\t75 24                \tjne    2a40 <__cmd_top+0xae>\n    2a1c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2a20:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n    2a27:\t48 83 c0 40          \tadd    $0x40,%rax\n    2a2b:\t48 89 c7             \tmov    %rax,%rdi\n    2a2e:\te8 00 00 00 00       \tcallq  2a33 <__cmd_top+0xa1>\n    2a33:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    2a36:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    2a3a:\t0f 85 fc 01 00 00    \tjne    2c3c <__cmd_top+0x2aa>\n    2a40:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2a44:\t48 89 c7             \tmov    %rax,%rdi\n    2a47:\te8 b7 fe ff ff       \tcallq  2903 <perf_top__setup_sample_type>\n    2a4c:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    2a4f:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    2a53:\t0f 85 e6 01 00 00    \tjne    2c3f <__cmd_top+0x2ad>\n    2a59:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2a5d:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2a61:\t48 8b 90 58 08 00 00 \tmov    0x858(%rax),%rdx\n    2a68:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2a6c:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n    2a70:\t48 8b 89 40 01 00 00 \tmov    0x140(%rcx),%rcx\n    2a77:\t48 8d b9 c0 00 00 00 \tlea    0xc0(%rcx),%rdi\n    2a7e:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    2a83:\t48 89 c6             \tmov    %rax,%rsi\n    2a86:\te8 7b d7 ff ff       \tcallq  206 <machine__synthesize_threads>\n    2a8b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2a8f:\t48 89 c7             \tmov    %rax,%rdi\n    2a92:\te8 65 fc ff ff       \tcallq  26fc <perf_top__start_counters>\n    2a97:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    2a9a:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    2a9e:\t0f 85 9e 01 00 00    \tjne    2c42 <__cmd_top+0x2b0>\n    2aa4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2aa8:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n    2aaf:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    2ab3:\t48 8b 52 78          \tmov    0x78(%rdx),%rdx\n    2ab7:\t48 89 90 88 01 00 00 \tmov    %rdx,0x188(%rax)\n    2abe:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2ac2:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n    2ac9:\t48 89 c7             \tmov    %rax,%rdi\n    2acc:\te8 00 00 00 00       \tcallq  2ad1 <__cmd_top+0x13f>\n    2ad1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2ad5:\t48 89 c7             \tmov    %rax,%rdi\n    2ad8:\te8 e2 d5 ff ff       \tcallq  bf <target__none>\n    2add:\t83 f0 01             \txor    $0x1,%eax\n    2ae0:\t84 c0                \ttest   %al,%al\n    2ae2:\t74 10                \tje     2af4 <__cmd_top+0x162>\n    2ae4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2ae8:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2aec:\t48 89 c7             \tmov    %rax,%rdi\n    2aef:\te8 00 00 00 00       \tcallq  2af4 <__cmd_top+0x162>\n    2af4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2af8:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2afc:\t8b 80 18 08 00 00    \tmov    0x818(%rax),%eax\n    2b02:\t48 63 c8             \tmovslq %eax,%rcx\n    2b05:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2b09:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2b0d:\t48 8b 80 50 08 00 00 \tmov    0x850(%rax),%rax\n    2b14:\tba 64 00 00 00       \tmov    $0x64,%edx\n    2b19:\t48 89 ce             \tmov    %rcx,%rsi\n    2b1c:\t48 89 c7             \tmov    %rax,%rdi\n    2b1f:\te8 00 00 00 00       \tcallq  2b24 <__cmd_top+0x192>\n    2b24:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2b28:\t48 89 c7             \tmov    %rax,%rdi\n    2b2b:\te8 69 fb ff ff       \tcallq  2699 <perf_top__mmap_read>\n    2b30:\tc7 45 dc ff ff ff ff \tmovl   $0xffffffff,-0x24(%rbp)\n    2b37:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2b3d <__cmd_top+0x1ab>\n    2b3d:\t85 c0                \ttest   %eax,%eax\n    2b3f:\t7e 07                \tjle    2b48 <__cmd_top+0x1b6>\n    2b41:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2b46:\teb 05                \tjmp    2b4d <__cmd_top+0x1bb>\n    2b48:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2b4d:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    2b51:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    2b55:\t48 89 d1             \tmov    %rdx,%rcx\n    2b58:\t48 89 f2             \tmov    %rsi,%rdx\n    2b5b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2b60:\t48 89 c7             \tmov    %rax,%rdi\n    2b63:\te8 00 00 00 00       \tcallq  2b68 <__cmd_top+0x1d6>\n    2b68:\t85 c0                \ttest   %eax,%eax\n    2b6a:\t74 14                \tje     2b80 <__cmd_top+0x1ee>\n    2b6c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2b71:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2b76:\te8 00 00 00 00       \tcallq  2b7b <__cmd_top+0x1e9>\n    2b7b:\te9 c3 00 00 00       \tjmpq   2c43 <__cmd_top+0x2b1>\n    2b80:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2b84:\t8b 80 50 01 00 00    \tmov    0x150(%rax),%eax\n    2b8a:\t85 c0                \ttest   %eax,%eax\n    2b8c:\t0f 84 97 00 00 00    \tje     2c29 <__cmd_top+0x297>\n    2b92:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2b96:\t8b 80 50 01 00 00    \tmov    0x150(%rax),%eax\n    2b9c:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    2b9f:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    2ba3:\t48 89 c2             \tmov    %rax,%rdx\n    2ba6:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2bab:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2bb0:\te8 00 00 00 00       \tcallq  2bb5 <__cmd_top+0x223>\n    2bb5:\t85 c0                \ttest   %eax,%eax\n    2bb7:\t74 70                \tje     2c29 <__cmd_top+0x297>\n    2bb9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2bbe:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2bc3:\te8 00 00 00 00       \tcallq  2bc8 <__cmd_top+0x236>\n    2bc8:\teb 79                \tjmp    2c43 <__cmd_top+0x2b1>\n    2bca:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2bce:\t48 8b 80 e8 00 00 00 \tmov    0xe8(%rax),%rax\n    2bd5:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2bd9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2bdd:\t48 89 c7             \tmov    %rax,%rdi\n    2be0:\te8 b4 fa ff ff       \tcallq  2699 <perf_top__mmap_read>\n    2be5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2be9:\t48 8b 80 e8 00 00 00 \tmov    0xe8(%rax),%rax\n    2bf0:\t48 39 45 f0          \tcmp    %rax,-0x10(%rbp)\n    2bf4:\t75 33                \tjne    2c29 <__cmd_top+0x297>\n    2bf6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2bfa:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2bfe:\t8b 80 18 08 00 00    \tmov    0x818(%rax),%eax\n    2c04:\t48 63 c8             \tmovslq %eax,%rcx\n    2c07:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2c0b:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2c0f:\t48 8b 80 50 08 00 00 \tmov    0x850(%rax),%rax\n    2c16:\tba 64 00 00 00       \tmov    $0x64,%edx\n    2c1b:\t48 89 ce             \tmov    %rcx,%rsi\n    2c1e:\t48 89 c7             \tmov    %rax,%rdi\n    2c21:\te8 00 00 00 00       \tcallq  2c26 <__cmd_top+0x294>\n    2c26:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    2c29:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2c2f <__cmd_top+0x29d>\n    2c2f:\t85 c0                \ttest   %eax,%eax\n    2c31:\t74 97                \tje     2bca <__cmd_top+0x238>\n    2c33:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    2c3a:\teb 07                \tjmp    2c43 <__cmd_top+0x2b1>\n    2c3c:\t90                   \tnop\n    2c3d:\teb 04                \tjmp    2c43 <__cmd_top+0x2b1>\n    2c3f:\t90                   \tnop\n    2c40:\teb 01                \tjmp    2c43 <__cmd_top+0x2b1>\n    2c42:\t90                   \tnop\n    2c43:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2c47:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n    2c4e:\t48 89 c7             \tmov    %rax,%rdi\n    2c51:\te8 00 00 00 00       \tcallq  2c56 <__cmd_top+0x2c4>\n    2c56:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2c5a:\t48 c7 80 40 01 00 00 \tmovq   $0x0,0x140(%rax)\n    2c61:\t00 00 00 00 \n    2c65:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    2c68:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    2c6c:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    2c73:\t00 00 \n    2c75:\t74 05                \tje     2c7c <__cmd_top+0x2ea>\n    2c77:\te8 00 00 00 00       \tcallq  2c7c <__cmd_top+0x2ea>\n    2c7c:\tc9                   \tleaveq \n    2c7d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall _cmd_top(__int64 <span class=\"supfact\">a1</span>) {\n  void *(*<span class=\"supfact\">v2</span>)(void *);\n  struct sched_param <span class=\"supfact\">param</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  pthread_t <span class=\"supfact\">newthread</span>;\n  _QWORD *<span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  <span class=\"supfact\">v6</span> = (_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n      perf_session__new(Number L, Number L, Number L);\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    return Number L;\n  machines__set_symbol_filter(\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L, symbol_filter);\n  if (objdump_path ||\n      (<span class=\"supfact\">v4</span> = perf_session_env__lookup_objdump(\n           *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L)) == Number) {\n    <span class=\"supfact\">v4</span> = perf_top__setup_sample_type(<span class=\"supfact\">a1</span>);\n    if (!<span class=\"supfact\">v4</span>) {\n      machine__synthesize_threads(\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L,\n          (__int64)<span class=\"supfact\">v6</span>,\n          *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L),\n          Number);\n      <span class=\"supfact\">v4</span> = perf_top__start_counters(<span class=\"supfact\">a1</span>);\n      if (!<span class=\"supfact\">v4</span>) {\n        *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n            *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n        perf_session__set_id_hdr_size(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n        if (!target__none(<span class=\"supfact\">v6</span>))\n          perf_evlist__enable(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n        poll(*(struct pollfd **)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                                 Number L),\n             *(int *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L),\n             Number);\n        perf_top__mmap_read(<span class=\"supfact\">a1</span>);\n        <span class=\"supfact\">v4</span> = Number;\n        if (use_browser <= Number)\n          <span class=\"supfact\">v2</span> = (void *(*)(void *))display_thread;\n        else\n          <span class=\"supfact\">v2</span> = display_thread_tui;\n        if (pthread_create(&<span class=\"supfact\">newthread</span>, Number L,\n                           <span class=\"supfact\">v2</span>, (void *)<span class=\"supfact\">a1</span>)) {\n          ui__error(String);\n        } else if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n                   (<span class=\"supfact\">param</span>.__sched_priority =\n                        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number),\n                    sched_setscheduler(Number, Number,\n                                       &<span class=\"supfact\">param</span>))) {\n          ui__error(String);\n        } else {\n          while (!done) {\n            <span class=\"supfact\">v7</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n            perf_top__mmap_read(<span class=\"supfact\">a1</span>);\n            if (<span class=\"supfact\">v7</span> == *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n              <span class=\"supfact\">v4</span> = poll(\n                  *(struct pollfd **)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                                      Number L),\n                  *(int *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L),\n                  Number);\n          }\n          <span class=\"supfact\">v4</span> = Number;\n        }\n      }\n    }\n  }\n  perf_session__delete(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = Number L;\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "int __cdecl _cmd_top(perf_top *<span class=\"supfact\">top</span>) {\n  void *(*<span class=\"supfact\">v2</span>)(void *);\n  sched_param <span class=\"supfact\">param</span>;\n  int <span class=\"supfact\">ret</span>;\n  pthread_t <span class=\"supfact\">thread</span>;\n  record_opts *<span class=\"supfact\">opts</span>;\n  u64 <span class=\"supfact\">hits</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  <span class=\"supfact\">opts</span> = &<span class=\"supfact\">top</span>->record_opts;\n  <span class=\"supfact\">top</span>->session =\n      (perf_session *)perf_session__new(Number L, Number L, Number L);\n  if (!<span class=\"supfact\">top</span>->session)\n    return Number;\n  machines__set_symbol_filter(&<span class=\"supfact\">top</span>->session->machines,\n                              symbol_filter);\n  if (objdump_path ||\n      (<span class=\"supfact\">ret</span> = perf_session_env__lookup_objdump(\n           &<span class=\"supfact\">top</span>->session->header.env)) == Number) {\n    <span class=\"supfact\">ret</span> = perf_top__setup_sample_type(<span class=\"supfact\">top</span>);\n    if (!<span class=\"supfact\">ret</span>) {\n      machine__synthesize_threads(&<span class=\"supfact\">top</span>->session->machines.host,\n                                  &<span class=\"supfact\">opts</span>->target,\n                                  <span class=\"supfact\">top</span>->evlist->threads, Number);\n      <span class=\"supfact\">ret</span> = perf_top__start_counters(<span class=\"supfact\">top</span>);\n      if (!<span class=\"supfact\">ret</span>) {\n        <span class=\"supfact\">top</span>->session->evlist = <span class=\"supfact\">top</span>->evlist;\n        perf_session__set_id_hdr_size(<span class=\"supfact\">top</span>->session);\n        if (!target__none(&<span class=\"supfact\">opts</span>->target))\n          perf_evlist__enable(<span class=\"supfact\">top</span>->evlist);\n        poll(<span class=\"supfact\">top</span>->evlist->pollfd,\n             <span class=\"supfact\">top</span>->evlist->nr_fds, Number);\n        perf_top__mmap_read(<span class=\"supfact\">top</span>);\n        <span class=\"supfact\">ret</span> = Number;\n        if (use_browser <= Number)\n          <span class=\"supfact\">v2</span> = (void *(*)(void *))display_thread;\n        else\n          <span class=\"supfact\">v2</span> = (void *(*)(void *))display_thread_tui;\n        if (pthread_create(&<span class=\"supfact\">thread</span>, Number L,\n                           <span class=\"supfact\">v2</span>, <span class=\"supfact\">top</span>)) {\n          ui__error(String);\n        } else if (<span class=\"supfact\">top</span>->realtime_prio &&\n                   (<span class=\"supfact\">param</span>.sched_priority =\n                        <span class=\"supfact\">top</span>->realtime_prio,\n                    sched_setscheduler(Number, Number,\n                                       &<span class=\"supfact\">param</span>))) {\n          ui__error(String);\n        } else {\n          while (!done) {\n            <span class=\"supfact\">hits</span> = <span class=\"supfact\">top</span>->samples;\n            perf_top__mmap_read(<span class=\"supfact\">top</span>);\n            if (<span class=\"supfact\">hits</span> == <span class=\"supfact\">top</span>->samples)\n              <span class=\"supfact\">ret</span> =\n                  poll(<span class=\"supfact\">top</span>->evlist->pollfd,\n                       <span class=\"supfact\">top</span>->evlist->nr_fds, Number);\n          }\n          <span class=\"supfact\">ret</span> = Number;\n        }\n      }\n    }\n  }\n  perf_session__delete(<span class=\"supfact\">top</span>->session);\n  <span class=\"supfact\">top</span>->session = Number L;\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "perf_top *", "pred_name": "top", "ref_name": "top", "ref_type": "perf_top *"}, {"name": "v2", "type": "void *(*)(void *)", "pred_name": "v2", "ref_name": "v2", "ref_type": "void *(*)(void *)"}, {"name": "param", "type": "struct sched_param { int sched_priority; }", "pred_name": "param", "ref_name": "param", "ref_type": "struct sched_param { int sched_priority; }"}, {"name": "v4", "type": "int", "pred_name": "ret", "ref_name": "ret", "ref_type": "int"}, {"name": "newthread", "type": "pthread_t", "pred_name": "thread", "ref_name": "thread", "ref_type": "pthread_t"}, {"name": "v6", "type": "perf_record_opts *", "pred_name": "opts", "ref_name": "opts", "ref_type": "record_opts *"}, {"name": "v7", "type": "u64", "pred_name": "hits", "ref_name": "hits", "ref_type": "u64"}, {"name": "v8", "type": "unsigned __int64", "pred_name": "v8", "ref_name": "v8", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "toshikomura", "repo_name": "tb-alg3-balanceamento-rtc10", "path": "toshikomura/tb-alg3-balanceamento-rtc10/604c801b4880b1f05787ac6735a733b2ceba8549e124e546fe119f82883e1e62", "path_in_repo": "toshikomura/tb-alg3-balanceamento-rtc10//aplic1", "objdump": "0000000000402620 <__libc_csu_init>:\n  402620:\t41 57                \tpush   %r15\n  402622:\t49 89 d7             \tmov    %rdx,%r15\n  402625:\t41 56                \tpush   %r14\n  402627:\t49 89 f6             \tmov    %rsi,%r14\n  40262a:\t41 55                \tpush   %r13\n  40262c:\t41 89 fd             \tmov    %edi,%r13d\n  40262f:\t41 54                \tpush   %r12\n  402631:\t4c 8d 25 b8 27 00 00 \tlea    0x27b8(%rip),%r12        # 404df0 <__frame_dummy_init_array_entry>\n  402638:\t55                   \tpush   %rbp\n  402639:\t48 8d 2d b8 27 00 00 \tlea    0x27b8(%rip),%rbp        # 404df8 <__do_global_dtors_aux_fini_array_entry>\n  402640:\t53                   \tpush   %rbx\n  402641:\t4c 29 e5             \tsub    %r12,%rbp\n  402644:\t48 83 ec 08          \tsub    $0x8,%rsp\n  402648:\te8 b3 e9 ff ff       \tcallq  401000 <_init>\n  40264d:\t48 c1 fd 03          \tsar    $0x3,%rbp\n  402651:\t74 1b                \tje     40266e <__libc_csu_init+0x4e>\n  402653:\t31 db                \txor    %ebx,%ebx\n  402655:\t0f 1f 00             \tnopl   (%rax)\n  402658:\t4c 89 fa             \tmov    %r15,%rdx\n  40265b:\t4c 89 f6             \tmov    %r14,%rsi\n  40265e:\t44 89 ef             \tmov    %r13d,%edi\n  402661:\t41 ff 14 dc          \tcallq  *(%r12,%rbx,8)\n  402665:\t48 83 c3 01          \tadd    $0x1,%rbx\n  402669:\t48 39 dd             \tcmp    %rbx,%rbp\n  40266c:\t75 ea                \tjne    402658 <__libc_csu_init+0x38>\n  40266e:\t48 83 c4 08          \tadd    $0x8,%rsp\n  402672:\t5b                   \tpop    %rbx\n  402673:\t5d                   \tpop    %rbp\n  402674:\t41 5c                \tpop    %r12\n  402676:\t41 5d                \tpop    %r13\n  402678:\t41 5e                \tpop    %r14\n  40267a:\t41 5f                \tpop    %r15\n  40267c:\tc3                   \tretq   \n  40267d:\t0f 1f 00             \tnopl   (%rax)", "code_s": "void __fastcall _libc_csu_init(unsigned int <span class=\"supfact\">a1</span>,\n                               __int64 <span class=\"supfact\">a2</span>,\n                               __int64 <span class=\"supfact\">a3</span>) {\n  signed __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  init_proc();\n  <span class=\"supfact\">v4</span> =\n      &_do_global_dtors_aux_fini_array_entry - &_frame_dummy_init_array_entry;\n  if (<span class=\"supfact\">v4</span>) {\n    for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> != <span class=\"supfact\">v4</span>;\n         ++<span class=\"supfact\">i</span>)\n      ((void(__fastcall *)(_QWORD, __int64, __int64)) *\n       (&_frame_dummy_init_array_entry + <span class=\"supfact\">i</span>))(\n          <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>);\n  }\n}", "code_t": "void __fastcall _libc_csu_init(unsigned int <span class=\"supfact\">a1</span>,\n                               __int64 <span class=\"supfact\">a2</span>,\n                               __int64 <span class=\"supfact\">a3</span>) {\n  signed __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  init_proc();\n  <span class=\"supfact\">v4</span> =\n      &_do_global_dtors_aux_fini_array_entry - &_frame_dummy_init_array_entry;\n  if (<span class=\"supfact\">v4</span>) {\n    for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span> != <span class=\"supfact\">v4</span>;\n         ++<span class=\"supfact\">i</span>)\n      ((void(__fastcall *)(_QWORD, __int64, __int64)) *\n       (&_frame_dummy_init_array_entry + <span class=\"supfact\">i</span>))(\n          <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>);\n  }\n}", "var": [{"name": "a1", "type": "unsigned int", "pred_name": "a1", "ref_name": "a1", "ref_type": "unsigned int"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "__int64"}, {"name": "v4", "type": "signed __int64", "pred_name": "v4", "ref_name": "v4", "ref_type": "signed __int64"}, {"name": "i", "type": "__int64", "pred_name": "i", "ref_name": "i", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "gooorillax", "repo_name": "hlapack", "path": "gooorillax/hlapack/2401605637ae2baf97753a9b04093ad5564b5ea8b96020fe25bdbf47d78eee7a", "path_in_repo": "gooorillax/hlapack/protobuf/jni/src/.libs/wire_format.o", "objdump": "00000000000000c4 <_ZN6google8protobuf8internal10WireFormat27ParseAndMergeMessageSetItemEPNS0_2io16CodedInputStreamEPNS0_7MessageE.cold>:\n  c4:\t48 83 7c 24 70 00    \tcmpq   $0x0,0x70(%rsp)\n  ca:\t74 08                \tje     d4 <_ZN6google8protobuf8internal10WireFormat27ParseAndMergeMessageSetItemEPNS0_2io16CodedInputStreamEPNS0_7MessageE.cold+0x10>\n  cc:\t4c 89 ff             \tmov    %r15,%rdi\n  cf:\te8 00 00 00 00       \tcallq  d4 <_ZN6google8protobuf8internal10WireFormat27ParseAndMergeMessageSetItemEPNS0_2io16CodedInputStreamEPNS0_7MessageE.cold+0x10>\n  d4:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n  d9:\te8 00 00 00 00       \tcallq  de <_ZN6google8protobuf8internal10WireFormat27ParseAndMergeMessageSetItemEPNS0_2io16CodedInputStreamEPNS0_7MessageE.cold+0x1a>\n  de:\t48 8b 7c 24 30       \tmov    0x30(%rsp),%rdi\n  e3:\t48 3b 7c 24 10       \tcmp    0x10(%rsp),%rdi\n  e8:\t74 05                \tje     ef <_ZN6google8protobuf8internal10WireFormat27ParseAndMergeMessageSetItemEPNS0_2io16CodedInputStreamEPNS0_7MessageE.cold+0x2b>\n  ea:\te8 00 00 00 00       \tcallq  ef <_ZN6google8protobuf8internal10WireFormat27ParseAndMergeMessageSetItemEPNS0_2io16CodedInputStreamEPNS0_7MessageE.cold+0x2b>\n  ef:\t48 89 ef             \tmov    %rbp,%rdi\n  f2:\te8 00 00 00 00       \tcallq  f7 <_ZN6google8protobuf8internal10WireFormat27ParseAndMergeMessageSetItemEPNS0_2io16CodedInputStreamEPNS0_7MessageE.cold+0x33>\n  f7:\t48 8b 7c 24 70       \tmov    0x70(%rsp),%rdi\n  fc:\t48 3b 7c 24 18       \tcmp    0x18(%rsp),%rdi\n 101:\t74 db                \tje     de <_ZN6google8protobuf8internal10WireFormat27ParseAndMergeMessageSetItemEPNS0_2io16CodedInputStreamEPNS0_7MessageE.cold+0x1a>\n 103:\te8 00 00 00 00       \tcallq  108 <_ZN6google8protobuf8internal10WireFormat27ParseAndMergeMessageSetItemEPNS0_2io16CodedInputStreamEPNS0_7MessageE.cold+0x44>\n 108:\teb d4                \tjmp    de <_ZN6google8protobuf8internal10WireFormat27ParseAndMergeMessageSetItemEPNS0_2io16CodedInputStreamEPNS0_7MessageE.cold+0x1a>\n", "code_s": "void __fastcall __noreturn google protobuf internal WireFormat\nParseAndMergeMessageSetItem(\n    __int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n    __int64 <span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>,\n    __int64 <span class=\"supfact\">a5</span>, __int64 <span class=\"supfact\">a6</span>,\n    google protobuf io ArrayInputStream *<span class=\"supfact\">a7</span>,\n    void *<span class=\"supfact\">a8</span>, __int64 <span class=\"supfact\">a9</span>,\n    __int64 <span class=\"supfact\">a10</span>, __int64 <span class=\"supfact\">a11</span>,\n    void *<span class=\"supfact\">a12</span>, __int64 <span class=\"supfact\">a13</span>,\n    __int64 <span class=\"supfact\">a14</span>, __int64 <span class=\"supfact\">a15</span>,\n    __int64 <span class=\"supfact\">a16</span>, __int64 <span class=\"supfact\">a17</span>,\n    __int64 <span class=\"supfact\">a18</span>, __int64 <span class=\"supfact\">a19</span>,\n    __int64 <span class=\"supfact\">a20</span>) {\n  struct _Unwind_Exception *<span class=\"supfact\">v20</span>;\n  google protobuf io CodedInputStream *<span class=\"supfact\">v21</span>;\n  if (<span class=\"supfact\">a20</span>)\n    google protobuf io CodedInputStream BackUpInputToCurrentPosition(\n        <span class=\"supfact\">v21</span>);\n  google protobuf io ArrayInputStream ~ArrayInputStream(<span class=\"supfact\">a7</span>);\n  if (<span class=\"supfact\">a12</span> != <span class=\"supfact\">a8</span>)\n    operator delete(<span class=\"supfact\">a12</span>);\n  Unwind_Resume(<span class=\"supfact\">v20</span>);\n}", "code_t": "void __fastcall __noreturn google protobuf internal WireFormat\nParseAndMergeMessageSetItem(\n    __int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n    __int64 <span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>,\n    __int64 <span class=\"supfact\">a5</span>, __int64 <span class=\"supfact\">a6</span>,\n    google protobuf io ArrayInputStream *<span class=\"supfact\">a7</span>,\n    void *<span class=\"supfact\">a8</span>, __int64 <span class=\"supfact\">a9</span>,\n    __int64 <span class=\"supfact\">a10</span>, __int64 <span class=\"supfact\">a11</span>,\n    void *<span class=\"supfact\">a12</span>, __int64 <span class=\"supfact\">a13</span>,\n    __int64 <span class=\"supfact\">a14</span>, __int64 <span class=\"supfact\">a15</span>,\n    __int64 <span class=\"supfact\">a16</span>, __int64 <span class=\"supfact\">a17</span>,\n    __int64 <span class=\"supfact\">a18</span>, __int64 <span class=\"supfact\">a19</span>,\n    __int64 <span class=\"supfact\">a20</span>) {\n  struct _Unwind_Exception *<span class=\"supfact\">v20</span>;\n  google protobuf io CodedInputStream *<span class=\"supfact\">v21</span>;\n  if (<span class=\"supfact\">a20</span>)\n    google protobuf io CodedInputStream BackUpInputToCurrentPosition(\n        <span class=\"supfact\">v21</span>);\n  google protobuf io ArrayInputStream ~ArrayInputStream(<span class=\"supfact\">a7</span>);\n  if (<span class=\"supfact\">a12</span> != <span class=\"supfact\">a8</span>)\n    operator delete(<span class=\"supfact\">a12</span>);\n  Unwind_Resume(<span class=\"supfact\">v20</span>);\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "__int64"}, {"name": "a4", "type": "__int64", "pred_name": "a4", "ref_name": "a4", "ref_type": "__int64"}, {"name": "a5", "type": "__int64", "pred_name": "a5", "ref_name": "a5", "ref_type": "__int64"}, {"name": "a6", "type": "__int64", "pred_name": "a6", "ref_name": "a6", "ref_type": "__int64"}, {"name": "a7", "type": "__int64", "pred_name": "a7", "ref_name": "a7", "ref_type": "google::protobuf::io::ArrayInputStream *"}, {"name": "a8", "type": "__int64", "pred_name": "a8", "ref_name": "a8", "ref_type": "void *"}, {"name": "a9", "type": "__int64", "pred_name": "a9", "ref_name": "a9", "ref_type": "__int64"}, {"name": "a10", "type": "__int64", "pred_name": "a10", "ref_name": "a10", "ref_type": "__int64"}, {"name": "a11", "type": "__int64", "pred_name": "a11", "ref_name": "a11", "ref_type": "__int64"}, {"name": "a12", "type": "void *", "pred_name": "a12", "ref_name": "a12", "ref_type": "void *"}, {"name": "a13", "type": "__int64", "pred_name": "a13", "ref_name": "a13", "ref_type": "__int64"}, {"name": "a14", "type": "__int64", "pred_name": "a14", "ref_name": "a14", "ref_type": "__int64"}, {"name": "a15", "type": "__int64", "pred_name": "a15", "ref_name": "a15", "ref_type": "__int64"}, {"name": "a16", "type": "__int64", "pred_name": "a16", "ref_name": "a16", "ref_type": "__int64"}, {"name": "a17", "type": "__int64", "pred_name": "a17", "ref_name": "a17", "ref_type": "__int64"}, {"name": "a18", "type": "__int64", "pred_name": "a18", "ref_name": "a18", "ref_type": "__int64"}, {"name": "a19", "type": "__int64", "pred_name": "a19", "ref_name": "a19", "ref_type": "__int64"}, {"name": "a20", "type": "__int64", "pred_name": "a20", "ref_name": "a20", "ref_type": "__int64"}, {"name": "v20", "type": "struct _Unwind_Exception *", "pred_name": "v20", "ref_name": "v20", "ref_type": "struct _Unwind_Exception *"}, {"name": "v21", "type": "__unk__", "pred_name": "v21", "ref_name": "v21", "ref_type": "google::protobuf::io::CodedInputStream *"}], "body_in_train": false}, {"repo_owner": "jcruz", "repo_name": "g3_kernel", "path": "jcruz/g3_kernel/d66e1d5bef46036e66a94133d4650c3625f5629a74a4dac45d730a41f4231c7d", "path_in_repo": "jcruz/g3_kernel/tools/perf/util/callchain.o", "objdump": "00000000000003dc <callchain_cumul_hits>:\n     3dc:\t55                   \tpush   %rbp\n     3dd:\t48 89 e5             \tmov    %rsp,%rbp\n     3e0:\t48 83 ec 20          \tsub    $0x20,%rsp\n     3e4:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     3e8:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     3ef:\t00 00 \n     3f1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     3f5:\t31 c0                \txor    %eax,%eax\n     3f7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     3fb:\t48 8b 50 60          \tmov    0x60(%rax),%rdx\n     3ff:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     403:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     407:\t48 01 d0             \tadd    %rdx,%rax\n     40a:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     40e:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     415:\t00 00 \n     417:\t74 05                \tje     41e <callchain_cumul_hits+0x42>\n     419:\te8 00 00 00 00       \tcallq  41e <callchain_cumul_hits+0x42>\n     41e:\tc9                   \tleaveq \n     41f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall callchain_cumul_hits(__int64 <span class=\"supfact\">a1</span>) {\n  return *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n         *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n}", "code_t": "u64 __cdecl callchain_cumul_hits(callchain_node *<span class=\"supfact\">node</span>) {\n  return <span class=\"supfact\">node</span>->hit + <span class=\"supfact\">node</span>->children_hit;\n}", "var": [{"name": "a1", "type": "callchain_node *", "pred_name": "node", "ref_name": "node", "ref_type": "callchain_node *"}], "body_in_train": true}, {"repo_owner": "danielgelbart", "repo_name": "bets", "path": "danielgelbart/bets/9d73c99775dae96ed97c04a8d4ddc09c6983ddc4cbe7e7f987ec6bfe580123ac", "path_in_repo": "danielgelbart/bets/cpp/Apophenia-pkg/apop_hist.o", "objdump": "00000000000017c9 <apop_test_kolmogorov>:\n    17c9:\t55                   \tpush   %rbp\n    17ca:\t48 89 e5             \tmov    %rsp,%rbp\n    17cd:\t48 81 ec 30 03 00 00 \tsub    $0x330,%rsp\n    17d4:\t48 89 bd d8 fc ff ff \tmov    %rdi,-0x328(%rbp)\n    17db:\t48 89 b5 d0 fc ff ff \tmov    %rsi,-0x330(%rbp)\n    17e2:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    17e9:\t48 8b 90 a8 00 00 00 \tmov    0xa8(%rax),%rdx\n    17f0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 17f7 <apop_test_kolmogorov+0x2e>\n    17f7:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n    17fe:\t48 39 c2             \tcmp    %rax,%rdx\n    1801:\t0f 84 1a 01 00 00    \tje     1921 <apop_test_kolmogorov+0x158>\n    1807:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 180d <apop_test_kolmogorov+0x44>\n    180d:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    1810:\t0f 84 83 00 00 00    \tje     1899 <apop_test_kolmogorov+0xd0>\n    1816:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 181c <apop_test_kolmogorov+0x53>\n    181c:\t85 c0                \ttest   %eax,%eax\n    181e:\t78 79                \tjs     1899 <apop_test_kolmogorov+0xd0>\n    1820:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1827 <apop_test_kolmogorov+0x5e>\n    1827:\t48 85 c0             \ttest   %rax,%rax\n    182a:\t75 0e                \tjne    183a <apop_test_kolmogorov+0x71>\n    182c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1833 <apop_test_kolmogorov+0x6a>\n    1833:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 183a <apop_test_kolmogorov+0x71>\n    183a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1841 <apop_test_kolmogorov+0x78>\n    1841:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1846:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    184b:\t48 89 c7             \tmov    %rax,%rdi\n    184e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1853:\te8 00 00 00 00       \tcallq  1858 <apop_test_kolmogorov+0x8f>\n    1858:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 185f <apop_test_kolmogorov+0x96>\n    185f:\t48 89 c1             \tmov    %rax,%rcx\n    1862:\tba 46 00 00 00       \tmov    $0x46,%edx\n    1867:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    186c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1871:\te8 00 00 00 00       \tcallq  1876 <apop_test_kolmogorov+0xad>\n    1876:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 187d <apop_test_kolmogorov+0xb4>\n    187d:\t48 89 c6             \tmov    %rax,%rsi\n    1880:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n    1885:\te8 00 00 00 00       \tcallq  188a <apop_test_kolmogorov+0xc1>\n    188a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1891 <apop_test_kolmogorov+0xc8>\n    1891:\t48 89 c7             \tmov    %rax,%rdi\n    1894:\te8 00 00 00 00       \tcallq  1899 <apop_test_kolmogorov+0xd0>\n    1899:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 189f <apop_test_kolmogorov+0xd6>\n    189f:\t85 c0                \ttest   %eax,%eax\n    18a1:\t78 0b                \tjs     18ae <apop_test_kolmogorov+0xe5>\n    18a3:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 18aa <apop_test_kolmogorov+0xe1>\n    18aa:\t3c 76                \tcmp    $0x76,%al\n    18ac:\t74 0b                \tje     18b9 <apop_test_kolmogorov+0xf0>\n    18ae:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 18b5 <apop_test_kolmogorov+0xec>\n    18b5:\t3c 77                \tcmp    $0x77,%al\n    18b7:\t75 0a                \tjne    18c3 <apop_test_kolmogorov+0xfa>\n    18b9:\tbf 05 00 00 00       \tmov    $0x5,%edi\n    18be:\te8 00 00 00 00       \tcallq  18c3 <apop_test_kolmogorov+0xfa>\n    18c3:\t48 c7 85 00 fe ff ff \tmovq   $0x0,-0x200(%rbp)\n    18ca:\t00 00 00 00 \n    18ce:\t48 c7 85 08 fe ff ff \tmovq   $0x0,-0x1f8(%rbp)\n    18d5:\t00 00 00 00 \n    18d9:\t48 c7 85 10 fe ff ff \tmovq   $0x0,-0x1f0(%rbp)\n    18e0:\t00 00 00 00 \n    18e4:\t48 83 ec 08          \tsub    $0x8,%rsp\n    18e8:\tff b5 10 fe ff ff    \tpushq  -0x1f0(%rbp)\n    18ee:\tff b5 08 fe ff ff    \tpushq  -0x1f8(%rbp)\n    18f4:\tff b5 00 fe ff ff    \tpushq  -0x200(%rbp)\n    18fa:\te8 00 00 00 00       \tcallq  18ff <apop_test_kolmogorov+0x136>\n    18ff:\t48 83 c4 20          \tadd    $0x20,%rsp\n    1903:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n    190a:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    1911:\tc6 40 40 45          \tmovb   $0x45,0x40(%rax)\n    1915:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    191c:\te9 6c 13 00 00       \tjmpq   2c8d <apop_test_kolmogorov+0x14c4>\n    1921:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1928:\t48 8b 90 a8 00 00 00 \tmov    0xa8(%rax),%rdx\n    192f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1936 <apop_test_kolmogorov+0x16d>\n    1936:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n    193d:\t48 39 c2             \tcmp    %rax,%rdx\n    1940:\t0f 94 c0             \tsete   %al\n    1943:\t88 45 d7             \tmov    %al,-0x29(%rbp)\n    1946:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    194d:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1951:\t48 85 c0             \ttest   %rax,%rax\n    1954:\t74 1a                \tje     1970 <apop_test_kolmogorov+0x1a7>\n    1956:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    195d:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1961:\t48 8b 00             \tmov    (%rax),%rax\n    1964:\t48 85 c0             \ttest   %rax,%rax\n    1967:\t74 07                \tje     1970 <apop_test_kolmogorov+0x1a7>\n    1969:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    196e:\teb 05                \tjmp    1975 <apop_test_kolmogorov+0x1ac>\n    1970:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1975:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    1978:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    197f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1983:\t48 85 c0             \ttest   %rax,%rax\n    1986:\t74 26                \tje     19ae <apop_test_kolmogorov+0x1e5>\n    1988:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    198f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1993:\t48 8b 00             \tmov    (%rax),%rax\n    1996:\t48 85 c0             \ttest   %rax,%rax\n    1999:\t74 13                \tje     19ae <apop_test_kolmogorov+0x1e5>\n    199b:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    19a2:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    19a6:\t48 8b 00             \tmov    (%rax),%rax\n    19a9:\t48 8b 00             \tmov    (%rax),%rax\n    19ac:\teb 05                \tjmp    19b3 <apop_test_kolmogorov+0x1ea>\n    19ae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    19b3:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    19b6:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    19bd:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    19c1:\t48 85 c0             \ttest   %rax,%rax\n    19c4:\t74 28                \tje     19ee <apop_test_kolmogorov+0x225>\n    19c6:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    19cd:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    19d1:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    19d5:\t48 85 c0             \ttest   %rax,%rax\n    19d8:\t74 14                \tje     19ee <apop_test_kolmogorov+0x225>\n    19da:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    19e1:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    19e5:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    19e9:\t48 8b 00             \tmov    (%rax),%rax\n    19ec:\teb 05                \tjmp    19f3 <apop_test_kolmogorov+0x22a>\n    19ee:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    19f3:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n    19f6:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    19fd:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1a01:\t48 85 c0             \ttest   %rax,%rax\n    1a04:\t74 28                \tje     1a2e <apop_test_kolmogorov+0x265>\n    1a06:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1a0d:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1a11:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a15:\t48 85 c0             \ttest   %rax,%rax\n    1a18:\t74 14                \tje     1a2e <apop_test_kolmogorov+0x265>\n    1a1a:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1a21:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1a25:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a29:\t48 8b 00             \tmov    (%rax),%rax\n    1a2c:\teb 05                \tjmp    1a33 <apop_test_kolmogorov+0x26a>\n    1a2e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1a33:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n    1a36:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1a3d:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1a41:\t48 85 c0             \ttest   %rax,%rax\n    1a44:\t74 29                \tje     1a6f <apop_test_kolmogorov+0x2a6>\n    1a46:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1a4d:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1a51:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a55:\t48 85 c0             \ttest   %rax,%rax\n    1a58:\t74 15                \tje     1a6f <apop_test_kolmogorov+0x2a6>\n    1a5a:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1a61:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1a65:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a69:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a6d:\teb 05                \tjmp    1a74 <apop_test_kolmogorov+0x2ab>\n    1a6f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1a74:\t89 45 c0             \tmov    %eax,-0x40(%rbp)\n    1a77:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    1a7a:\t0f af 45 c0          \timul   -0x40(%rbp),%eax\n    1a7e:\t89 c2                \tmov    %eax,%edx\n    1a80:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    1a83:\t01 d0                \tadd    %edx,%eax\n    1a85:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n    1a88:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1a8f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1a93:\t48 85 c0             \ttest   %rax,%rax\n    1a96:\t74 11                \tje     1aa9 <apop_test_kolmogorov+0x2e0>\n    1a98:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1a9f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1aa3:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1aa7:\teb 05                \tjmp    1aae <apop_test_kolmogorov+0x2e5>\n    1aa9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1aae:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    1ab1:\t48 63 d2             \tmovslq %edx,%rdx\n    1ab4:\t48 39 d0             \tcmp    %rdx,%rax\n    1ab7:\t48 0f 43 d0          \tcmovae %rax,%rdx\n    1abb:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    1abe:\t48 98                \tcltq   \n    1ac0:\t48 39 c2             \tcmp    %rax,%rdx\n    1ac3:\t48 0f 43 c2          \tcmovae %rdx,%rax\n    1ac7:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n    1aca:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n    1ace:\t75 10                \tjne    1ae0 <apop_test_kolmogorov+0x317>\n    1ad0:\t83 7d c8 00          \tcmpl   $0x0,-0x38(%rbp)\n    1ad4:\t75 0a                \tjne    1ae0 <apop_test_kolmogorov+0x317>\n    1ad6:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n    1ada:\t75 04                \tjne    1ae0 <apop_test_kolmogorov+0x317>\n    1adc:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n    1ae0:\t90                   \tnop\n    1ae1:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n    1ae4:\t89 45 b4             \tmov    %eax,-0x4c(%rbp)\n    1ae7:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1aee:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1af2:\t48 85 c0             \ttest   %rax,%rax\n    1af5:\t74 1a                \tje     1b11 <apop_test_kolmogorov+0x348>\n    1af7:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1afe:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1b02:\t48 8b 00             \tmov    (%rax),%rax\n    1b05:\t48 85 c0             \ttest   %rax,%rax\n    1b08:\t74 07                \tje     1b11 <apop_test_kolmogorov+0x348>\n    1b0a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1b0f:\teb 05                \tjmp    1b16 <apop_test_kolmogorov+0x34d>\n    1b11:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b16:\t89 45 b0             \tmov    %eax,-0x50(%rbp)\n    1b19:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1b20:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1b24:\t48 85 c0             \ttest   %rax,%rax\n    1b27:\t74 26                \tje     1b4f <apop_test_kolmogorov+0x386>\n    1b29:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1b30:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1b34:\t48 8b 00             \tmov    (%rax),%rax\n    1b37:\t48 85 c0             \ttest   %rax,%rax\n    1b3a:\t74 13                \tje     1b4f <apop_test_kolmogorov+0x386>\n    1b3c:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1b43:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1b47:\t48 8b 00             \tmov    (%rax),%rax\n    1b4a:\t48 8b 00             \tmov    (%rax),%rax\n    1b4d:\teb 05                \tjmp    1b54 <apop_test_kolmogorov+0x38b>\n    1b4f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b54:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    1b57:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1b5e:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1b62:\t48 85 c0             \ttest   %rax,%rax\n    1b65:\t74 28                \tje     1b8f <apop_test_kolmogorov+0x3c6>\n    1b67:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1b6e:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1b72:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1b76:\t48 85 c0             \ttest   %rax,%rax\n    1b79:\t74 14                \tje     1b8f <apop_test_kolmogorov+0x3c6>\n    1b7b:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1b82:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1b86:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1b8a:\t48 8b 00             \tmov    (%rax),%rax\n    1b8d:\teb 05                \tjmp    1b94 <apop_test_kolmogorov+0x3cb>\n    1b8f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b94:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n    1b97:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1b9e:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1ba2:\t48 85 c0             \ttest   %rax,%rax\n    1ba5:\t74 28                \tje     1bcf <apop_test_kolmogorov+0x406>\n    1ba7:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1bae:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1bb2:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1bb6:\t48 85 c0             \ttest   %rax,%rax\n    1bb9:\t74 14                \tje     1bcf <apop_test_kolmogorov+0x406>\n    1bbb:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1bc2:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1bc6:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1bca:\t48 8b 00             \tmov    (%rax),%rax\n    1bcd:\teb 05                \tjmp    1bd4 <apop_test_kolmogorov+0x40b>\n    1bcf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1bd4:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n    1bd7:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1bde:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1be2:\t48 85 c0             \ttest   %rax,%rax\n    1be5:\t74 29                \tje     1c10 <apop_test_kolmogorov+0x447>\n    1be7:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1bee:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1bf2:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1bf6:\t48 85 c0             \ttest   %rax,%rax\n    1bf9:\t74 15                \tje     1c10 <apop_test_kolmogorov+0x447>\n    1bfb:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1c02:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1c06:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1c0a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1c0e:\teb 05                \tjmp    1c15 <apop_test_kolmogorov+0x44c>\n    1c10:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c15:\t89 45 a0             \tmov    %eax,-0x60(%rbp)\n    1c18:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n    1c1b:\t0f af 45 a0          \timul   -0x60(%rbp),%eax\n    1c1f:\t89 c2                \tmov    %eax,%edx\n    1c21:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n    1c24:\t01 d0                \tadd    %edx,%eax\n    1c26:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    1c29:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1c30:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1c34:\t48 85 c0             \ttest   %rax,%rax\n    1c37:\t74 11                \tje     1c4a <apop_test_kolmogorov+0x481>\n    1c39:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    1c40:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1c44:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1c48:\teb 05                \tjmp    1c4f <apop_test_kolmogorov+0x486>\n    1c4a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c4f:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n    1c52:\t48 63 d2             \tmovslq %edx,%rdx\n    1c55:\t48 39 d0             \tcmp    %rdx,%rax\n    1c58:\t48 0f 43 d0          \tcmovae %rax,%rdx\n    1c5c:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n    1c5f:\t48 98                \tcltq   \n    1c61:\t48 39 c2             \tcmp    %rax,%rdx\n    1c64:\t48 0f 43 c2          \tcmovae %rdx,%rax\n    1c68:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n    1c6b:\t83 7d 9c 00          \tcmpl   $0x0,-0x64(%rbp)\n    1c6f:\t75 10                \tjne    1c81 <apop_test_kolmogorov+0x4b8>\n    1c71:\t83 7d a8 00          \tcmpl   $0x0,-0x58(%rbp)\n    1c75:\t75 0a                \tjne    1c81 <apop_test_kolmogorov+0x4b8>\n    1c77:\t83 7d b0 00          \tcmpl   $0x0,-0x50(%rbp)\n    1c7b:\t75 04                \tjne    1c81 <apop_test_kolmogorov+0x4b8>\n    1c7d:\t83 7d 98 00          \tcmpl   $0x0,-0x68(%rbp)\n    1c81:\t90                   \tnop\n    1c82:\t8b 45 98             \tmov    -0x68(%rbp),%eax\n    1c85:\t89 45 94             \tmov    %eax,-0x6c(%rbp)\n    1c88:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 1c90 <apop_test_kolmogorov+0x4c7>\n    1c8f:\t00 \n    1c90:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n    1c95:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    1c99:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n    1c9e:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1ca5:\t00 \n    1ca6:\te9 f5 06 00 00       \tjmpq   23a0 <apop_test_kolmogorov+0xbd7>\n    1cab:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1cb2:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1cb6:\t48 8b 00             \tmov    (%rax),%rax\n    1cb9:\t48 85 c0             \ttest   %rax,%rax\n    1cbc:\t0f 84 85 00 00 00    \tje     1d47 <apop_test_kolmogorov+0x57e>\n    1cc2:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1cc9:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1ccd:\t48 8b 00             \tmov    (%rax),%rax\n    1cd0:\t48 8b 00             \tmov    (%rax),%rax\n    1cd3:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    1cd7:\t73 6e                \tjae    1d47 <apop_test_kolmogorov+0x57e>\n    1cd9:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1ce0:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1ce4:\t48 8b 30             \tmov    (%rax),%rsi\n    1ce7:\t48 8d 85 40 fe ff ff \tlea    -0x1c0(%rbp),%rax\n    1cee:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1cf2:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    1cf7:\t48 89 c7             \tmov    %rax,%rdi\n    1cfa:\te8 00 00 00 00       \tcallq  1cff <apop_test_kolmogorov+0x536>\n    1cff:\t48 8b 85 40 fe ff ff \tmov    -0x1c0(%rbp),%rax\n    1d06:\t48 8b 95 48 fe ff ff \tmov    -0x1b8(%rbp),%rdx\n    1d0d:\t48 89 85 e0 fc ff ff \tmov    %rax,-0x320(%rbp)\n    1d14:\t48 89 95 e8 fc ff ff \tmov    %rdx,-0x318(%rbp)\n    1d1b:\t48 8b 85 50 fe ff ff \tmov    -0x1b0(%rbp),%rax\n    1d22:\t48 8b 95 58 fe ff ff \tmov    -0x1a8(%rbp),%rdx\n    1d29:\t48 89 85 f0 fc ff ff \tmov    %rax,-0x310(%rbp)\n    1d30:\t48 89 95 f8 fc ff ff \tmov    %rdx,-0x308(%rbp)\n    1d37:\t48 8b 85 60 fe ff ff \tmov    -0x1a0(%rbp),%rax\n    1d3e:\t48 89 85 00 fd ff ff \tmov    %rax,-0x300(%rbp)\n    1d45:\teb 37                \tjmp    1d7e <apop_test_kolmogorov+0x5b5>\n    1d47:\t48 c7 85 e0 fc ff ff \tmovq   $0x0,-0x320(%rbp)\n    1d4e:\t00 00 00 00 \n    1d52:\t48 c7 85 e8 fc ff ff \tmovq   $0x0,-0x318(%rbp)\n    1d59:\t00 00 00 00 \n    1d5d:\t48 c7 85 f0 fc ff ff \tmovq   $0x0,-0x310(%rbp)\n    1d64:\t00 00 00 00 \n    1d68:\t48 c7 85 f8 fc ff ff \tmovq   $0x0,-0x308(%rbp)\n    1d6f:\t00 00 00 00 \n    1d73:\t48 c7 85 00 fd ff ff \tmovq   $0x0,-0x300(%rbp)\n    1d7a:\t00 00 00 00 \n    1d7e:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1d85:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1d89:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1d8d:\t48 85 c0             \ttest   %rax,%rax\n    1d90:\t0f 84 87 00 00 00    \tje     1e1d <apop_test_kolmogorov+0x654>\n    1d96:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1d9d:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1da1:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    1da5:\t48 8b 00             \tmov    (%rax),%rax\n    1da8:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    1dac:\t73 6f                \tjae    1e1d <apop_test_kolmogorov+0x654>\n    1dae:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1db5:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1db9:\t48 8b 70 30          \tmov    0x30(%rax),%rsi\n    1dbd:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n    1dc4:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1dc8:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    1dcd:\t48 89 c7             \tmov    %rax,%rdi\n    1dd0:\te8 00 00 00 00       \tcallq  1dd5 <apop_test_kolmogorov+0x60c>\n    1dd5:\t48 8b 85 70 fe ff ff \tmov    -0x190(%rbp),%rax\n    1ddc:\t48 8b 95 78 fe ff ff \tmov    -0x188(%rbp),%rdx\n    1de3:\t48 89 85 10 fd ff ff \tmov    %rax,-0x2f0(%rbp)\n    1dea:\t48 89 95 18 fd ff ff \tmov    %rdx,-0x2e8(%rbp)\n    1df1:\t48 8b 85 80 fe ff ff \tmov    -0x180(%rbp),%rax\n    1df8:\t48 8b 95 88 fe ff ff \tmov    -0x178(%rbp),%rdx\n    1dff:\t48 89 85 20 fd ff ff \tmov    %rax,-0x2e0(%rbp)\n    1e06:\t48 89 95 28 fd ff ff \tmov    %rdx,-0x2d8(%rbp)\n    1e0d:\t48 8b 85 90 fe ff ff \tmov    -0x170(%rbp),%rax\n    1e14:\t48 89 85 30 fd ff ff \tmov    %rax,-0x2d0(%rbp)\n    1e1b:\teb 37                \tjmp    1e54 <apop_test_kolmogorov+0x68b>\n    1e1d:\t48 c7 85 10 fd ff ff \tmovq   $0x0,-0x2f0(%rbp)\n    1e24:\t00 00 00 00 \n    1e28:\t48 c7 85 18 fd ff ff \tmovq   $0x0,-0x2e8(%rbp)\n    1e2f:\t00 00 00 00 \n    1e33:\t48 c7 85 20 fd ff ff \tmovq   $0x0,-0x2e0(%rbp)\n    1e3a:\t00 00 00 00 \n    1e3e:\t48 c7 85 28 fd ff ff \tmovq   $0x0,-0x2d8(%rbp)\n    1e45:\t00 00 00 00 \n    1e49:\t48 c7 85 30 fd ff ff \tmovq   $0x0,-0x2d0(%rbp)\n    1e50:\t00 00 00 00 \n    1e54:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1e5b:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1e5f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1e63:\t48 85 c0             \ttest   %rax,%rax\n    1e66:\t0f 84 b5 00 00 00    \tje     1f21 <apop_test_kolmogorov+0x758>\n    1e6c:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1e73:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1e77:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1e7b:\t48 8b 00             \tmov    (%rax),%rax\n    1e7e:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    1e82:\t0f 83 99 00 00 00    \tjae    1f21 <apop_test_kolmogorov+0x758>\n    1e88:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1e8f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1e93:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1e97:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n    1e9b:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1ea2:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1ea6:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n    1eaa:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n    1eb1:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1eb5:\t49 89 c9             \tmov    %rcx,%r9\n    1eb8:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    1ebe:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1ec3:\t48 89 c7             \tmov    %rax,%rdi\n    1ec6:\te8 00 00 00 00       \tcallq  1ecb <apop_test_kolmogorov+0x702>\n    1ecb:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n    1ed2:\t48 8b 95 a8 fe ff ff \tmov    -0x158(%rbp),%rdx\n    1ed9:\t48 89 85 40 fd ff ff \tmov    %rax,-0x2c0(%rbp)\n    1ee0:\t48 89 95 48 fd ff ff \tmov    %rdx,-0x2b8(%rbp)\n    1ee7:\t48 8b 85 b0 fe ff ff \tmov    -0x150(%rbp),%rax\n    1eee:\t48 8b 95 b8 fe ff ff \tmov    -0x148(%rbp),%rdx\n    1ef5:\t48 89 85 50 fd ff ff \tmov    %rax,-0x2b0(%rbp)\n    1efc:\t48 89 95 58 fd ff ff \tmov    %rdx,-0x2a8(%rbp)\n    1f03:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    1f0a:\t48 8b 95 c8 fe ff ff \tmov    -0x138(%rbp),%rdx\n    1f11:\t48 89 85 60 fd ff ff \tmov    %rax,-0x2a0(%rbp)\n    1f18:\t48 89 95 68 fd ff ff \tmov    %rdx,-0x298(%rbp)\n    1f1f:\teb 42                \tjmp    1f63 <apop_test_kolmogorov+0x79a>\n    1f21:\t48 c7 85 40 fd ff ff \tmovq   $0x0,-0x2c0(%rbp)\n    1f28:\t00 00 00 00 \n    1f2c:\t48 c7 85 48 fd ff ff \tmovq   $0x0,-0x2b8(%rbp)\n    1f33:\t00 00 00 00 \n    1f37:\t48 c7 85 50 fd ff ff \tmovq   $0x0,-0x2b0(%rbp)\n    1f3e:\t00 00 00 00 \n    1f42:\t48 c7 85 58 fd ff ff \tmovq   $0x0,-0x2a8(%rbp)\n    1f49:\t00 00 00 00 \n    1f4d:\t48 c7 85 60 fd ff ff \tmovq   $0x0,-0x2a0(%rbp)\n    1f54:\t00 00 00 00 \n    1f58:\t48 c7 85 68 fd ff ff \tmovq   $0x0,-0x298(%rbp)\n    1f5f:\t00 00 00 00 \n    1f63:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1f6a:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1f6e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1f72:\t48 85 c0             \ttest   %rax,%rax\n    1f75:\t75 52                \tjne    1fc9 <apop_test_kolmogorov+0x800>\n    1f77:\t48 c7 85 70 fd ff ff \tmovq   $0x0,-0x290(%rbp)\n    1f7e:\t00 00 00 00 \n    1f82:\t48 c7 85 78 fd ff ff \tmovq   $0x0,-0x288(%rbp)\n    1f89:\t00 00 00 00 \n    1f8d:\t48 c7 85 80 fd ff ff \tmovq   $0x0,-0x280(%rbp)\n    1f94:\t00 00 00 00 \n    1f98:\t48 c7 85 88 fd ff ff \tmovq   $0x0,-0x278(%rbp)\n    1f9f:\t00 00 00 00 \n    1fa3:\t48 c7 85 90 fd ff ff \tmovq   $0x0,-0x270(%rbp)\n    1faa:\t00 00 00 00 \n    1fae:\t48 c7 85 98 fd ff ff \tmovq   $0x0,-0x268(%rbp)\n    1fb5:\t00 00 00 00 \n    1fb9:\t48 c7 85 a0 fd ff ff \tmovq   $0x0,-0x260(%rbp)\n    1fc0:\t00 00 00 00 \n    1fc4:\te9 96 01 00 00       \tjmpq   215f <apop_test_kolmogorov+0x996>\n    1fc9:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1fd0:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1fd4:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1fd8:\t48 8b 00             \tmov    (%rax),%rax\n    1fdb:\t48 89 85 70 fd ff ff \tmov    %rax,-0x290(%rbp)\n    1fe2:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    1fe9:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1fed:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1ff1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1ff5:\t48 89 85 78 fd ff ff \tmov    %rax,-0x288(%rbp)\n    1ffc:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    2003:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2007:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    200b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    200f:\t48 89 85 80 fd ff ff \tmov    %rax,-0x280(%rbp)\n    2016:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    201d:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2021:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2025:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    2029:\t48 85 c0             \ttest   %rax,%rax\n    202c:\t74 3a                \tje     2068 <apop_test_kolmogorov+0x89f>\n    202e:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    2035:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2039:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    203d:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    2040:\t48 98                \tcltq   \n    2042:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    2046:\t73 20                \tjae    2068 <apop_test_kolmogorov+0x89f>\n    2048:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    204f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2053:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2057:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    205b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    205f:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    2063:\t48 01 d0             \tadd    %rdx,%rax\n    2066:\teb 05                \tjmp    206d <apop_test_kolmogorov+0x8a4>\n    2068:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    206d:\t48 89 85 88 fd ff ff \tmov    %rax,-0x278(%rbp)\n    2074:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    207b:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    207f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2083:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    2087:\t48 89 85 90 fd ff ff \tmov    %rax,-0x270(%rbp)\n    208e:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    2095:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2099:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    209d:\t8b 40 28             \tmov    0x28(%rax),%eax\n    20a0:\t89 85 98 fd ff ff    \tmov    %eax,-0x268(%rbp)\n    20a6:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    20ad:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    20b1:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    20b5:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    20b9:\t48 85 c0             \ttest   %rax,%rax\n    20bc:\t74 7e                \tje     213c <apop_test_kolmogorov+0x973>\n    20be:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    20c5:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    20c9:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    20cd:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    20d0:\t48 98                \tcltq   \n    20d2:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    20d6:\t74 1e                \tje     20f6 <apop_test_kolmogorov+0x92d>\n    20d8:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    20df:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    20e3:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    20e7:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    20ea:\t48 98                \tcltq   \n    20ec:\t48 2b 45 e8          \tsub    -0x18(%rbp),%rax\n    20f0:\t48 83 f8 01          \tcmp    $0x1,%rax\n    20f4:\t77 3f                \tja     2135 <apop_test_kolmogorov+0x96c>\n    20f6:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    20fd:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2101:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2105:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    2108:\t48 98                \tcltq   \n    210a:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    210e:\t74 1e                \tje     212e <apop_test_kolmogorov+0x965>\n    2110:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    2117:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    211b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    211f:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    2122:\t89 c2                \tmov    %eax,%edx\n    2124:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2128:\t29 c2                \tsub    %eax,%edx\n    212a:\t89 d0                \tmov    %edx,%eax\n    212c:\teb 13                \tjmp    2141 <apop_test_kolmogorov+0x978>\n    212e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2133:\teb 0c                \tjmp    2141 <apop_test_kolmogorov+0x978>\n    2135:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    213a:\teb 05                \tjmp    2141 <apop_test_kolmogorov+0x978>\n    213c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2141:\t89 85 9c fd ff ff    \tmov    %eax,-0x264(%rbp)\n    2147:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    214e:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2152:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2156:\t8b 40 30             \tmov    0x30(%rax),%eax\n    2159:\t89 85 a0 fd ff ff    \tmov    %eax,-0x260(%rbp)\n    215f:\t48 c7 85 b0 fd ff ff \tmovq   $0x0,-0x250(%rbp)\n    2166:\t00 00 00 00 \n    216a:\t48 c7 85 b8 fd ff ff \tmovq   $0x0,-0x248(%rbp)\n    2171:\t00 00 00 00 \n    2175:\t48 c7 85 c0 fd ff ff \tmovq   $0x0,-0x240(%rbp)\n    217c:\t00 00 00 00 \n    2180:\t48 c7 85 c8 fd ff ff \tmovq   $0x0,-0x238(%rbp)\n    2187:\t00 00 00 00 \n    218b:\t48 c7 85 d0 fd ff ff \tmovq   $0x0,-0x230(%rbp)\n    2192:\t00 00 00 00 \n    2196:\t48 c7 85 d8 fd ff ff \tmovq   $0x0,-0x228(%rbp)\n    219d:\t00 00 00 00 \n    21a1:\t48 c7 85 e0 fd ff ff \tmovq   $0x0,-0x220(%rbp)\n    21a8:\t00 00 00 00 \n    21ac:\t48 c7 85 e8 fd ff ff \tmovq   $0x0,-0x218(%rbp)\n    21b3:\t00 00 00 00 \n    21b7:\t48 c7 85 f0 fd ff ff \tmovq   $0x0,-0x210(%rbp)\n    21be:\t00 00 00 00 \n    21c2:\t48 8b 85 e0 fc ff ff \tmov    -0x320(%rbp),%rax\n    21c9:\t48 85 c0             \ttest   %rax,%rax\n    21cc:\t74 09                \tje     21d7 <apop_test_kolmogorov+0xa0e>\n    21ce:\t48 8d 85 e0 fc ff ff \tlea    -0x320(%rbp),%rax\n    21d5:\teb 05                \tjmp    21dc <apop_test_kolmogorov+0xa13>\n    21d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    21dc:\t48 89 85 b0 fd ff ff \tmov    %rax,-0x250(%rbp)\n    21e3:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n    21ea:\t48 85 c0             \ttest   %rax,%rax\n    21ed:\t74 09                \tje     21f8 <apop_test_kolmogorov+0xa2f>\n    21ef:\t48 8d 85 40 fd ff ff \tlea    -0x2c0(%rbp),%rax\n    21f6:\teb 05                \tjmp    21fd <apop_test_kolmogorov+0xa34>\n    21f8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    21fd:\t48 89 85 b8 fd ff ff \tmov    %rax,-0x248(%rbp)\n    2204:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    220b:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    220f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2213:\t48 85 c0             \ttest   %rax,%rax\n    2216:\t74 09                \tje     2221 <apop_test_kolmogorov+0xa58>\n    2218:\t48 8d 85 70 fd ff ff \tlea    -0x290(%rbp),%rax\n    221f:\teb 05                \tjmp    2226 <apop_test_kolmogorov+0xa5d>\n    2221:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2226:\t48 89 85 c0 fd ff ff \tmov    %rax,-0x240(%rbp)\n    222d:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    2234:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2238:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    223c:\t48 85 c0             \ttest   %rax,%rax\n    223f:\t74 1c                \tje     225d <apop_test_kolmogorov+0xa94>\n    2241:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    2248:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    224c:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    2250:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    2254:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    2258:\t48 01 d0             \tadd    %rdx,%rax\n    225b:\teb 05                \tjmp    2262 <apop_test_kolmogorov+0xa99>\n    225d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2262:\t48 89 85 c8 fd ff ff \tmov    %rax,-0x238(%rbp)\n    2269:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    2270:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2274:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    2278:\t48 85 c0             \ttest   %rax,%rax\n    227b:\t0f 95 c0             \tsetne  %al\n    227e:\t0f b6 c0             \tmovzbl %al,%eax\n    2281:\t48 89 85 d0 fd ff ff \tmov    %rax,-0x230(%rbp)\n    2288:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    228f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2293:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    2297:\t48 89 85 d8 fd ff ff \tmov    %rax,-0x228(%rbp)\n    229e:\t48 8b 85 10 fd ff ff \tmov    -0x2f0(%rbp),%rax\n    22a5:\t48 85 c0             \ttest   %rax,%rax\n    22a8:\t74 09                \tje     22b3 <apop_test_kolmogorov+0xaea>\n    22aa:\t48 8d 85 10 fd ff ff \tlea    -0x2f0(%rbp),%rax\n    22b1:\teb 05                \tjmp    22b8 <apop_test_kolmogorov+0xaef>\n    22b3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22b8:\t48 89 85 e0 fd ff ff \tmov    %rax,-0x220(%rbp)\n    22bf:\t48 8d 85 b0 fd ff ff \tlea    -0x250(%rbp),%rax\n    22c6:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n    22cd:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    22d4:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    22d8:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    22dc:\t48 85 c0             \ttest   %rax,%rax\n    22df:\t74 20                \tje     2301 <apop_test_kolmogorov+0xb38>\n    22e1:\t48 8b 85 d8 fc ff ff \tmov    -0x328(%rbp),%rax\n    22e8:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    22ec:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    22f0:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    22f4:\t48 89 d6             \tmov    %rdx,%rsi\n    22f7:\t48 89 c7             \tmov    %rax,%rdi\n    22fa:\te8 00 00 00 00       \tcallq  22ff <apop_test_kolmogorov+0xb36>\n    22ff:\teb 11                \tjmp    2312 <apop_test_kolmogorov+0xb49>\n    2301:\tf2 0f 2a 4d b4       \tcvtsi2sdl -0x4c(%rbp),%xmm1\n    2306:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 230e <apop_test_kolmogorov+0xb45>\n    230d:\t00 \n    230e:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    2312:\tf2 0f 10 4d f0       \tmovsd  -0x10(%rbp),%xmm1\n    2317:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n    231b:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n    2320:\t48 8b 95 d0 fc ff ff \tmov    -0x330(%rbp),%rdx\n    2327:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n    232e:\t48 89 d6             \tmov    %rdx,%rsi\n    2331:\t48 89 c7             \tmov    %rax,%rdi\n    2334:\te8 00 00 00 00       \tcallq  2339 <apop_test_kolmogorov+0xb70>\n    2339:\tf2 0f 10 4d f0       \tmovsd  -0x10(%rbp),%xmm1\n    233e:\tf2 0f 5c c8          \tsubsd  %xmm0,%xmm1\n    2342:\t66 0f 28 c1          \tmovapd %xmm1,%xmm0\n    2346:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 234e <apop_test_kolmogorov+0xb85>\n    234d:\t00 \n    234e:\t66 0f 54 c8          \tandpd  %xmm0,%xmm1\n    2352:\tf2 0f 10 45 f8       \tmovsd  -0x8(%rbp),%xmm0\n    2357:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    235b:\t76 07                \tjbe    2364 <apop_test_kolmogorov+0xb9b>\n    235d:\tf2 0f 10 45 f8       \tmovsd  -0x8(%rbp),%xmm0\n    2362:\teb 32                \tjmp    2396 <apop_test_kolmogorov+0xbcd>\n    2364:\t48 8b 95 d0 fc ff ff \tmov    -0x330(%rbp),%rdx\n    236b:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n    2372:\t48 89 d6             \tmov    %rdx,%rsi\n    2375:\t48 89 c7             \tmov    %rax,%rdi\n    2378:\te8 00 00 00 00       \tcallq  237d <apop_test_kolmogorov+0xbb4>\n    237d:\tf2 0f 10 4d f0       \tmovsd  -0x10(%rbp),%xmm1\n    2382:\tf2 0f 5c c8          \tsubsd  %xmm0,%xmm1\n    2386:\t66 0f 28 c1          \tmovapd %xmm1,%xmm0\n    238a:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 2392 <apop_test_kolmogorov+0xbc9>\n    2391:\t00 \n    2392:\t66 0f 54 c1          \tandpd  %xmm1,%xmm0\n    2396:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n    239b:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n    23a0:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n    23a3:\t48 98                \tcltq   \n    23a5:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    23a9:\t0f 82 fc f8 ff ff    \tjb     1cab <apop_test_kolmogorov+0x4e2>\n    23af:\t80 7d d7 00          \tcmpb   $0x0,-0x29(%rbp)\n    23b3:\t0f 84 11 07 00 00    \tje     2aca <apop_test_kolmogorov+0x1301>\n    23b9:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    23bd:\tf2 0f 11 45 e0       \tmovsd  %xmm0,-0x20(%rbp)\n    23c2:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    23c9:\t00 \n    23ca:\te9 ec 06 00 00       \tjmpq   2abb <apop_test_kolmogorov+0x12f2>\n    23cf:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    23d6:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    23da:\t48 8b 00             \tmov    (%rax),%rax\n    23dd:\t48 85 c0             \ttest   %rax,%rax\n    23e0:\t0f 84 85 00 00 00    \tje     246b <apop_test_kolmogorov+0xca2>\n    23e6:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    23ed:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    23f1:\t48 8b 00             \tmov    (%rax),%rax\n    23f4:\t48 8b 00             \tmov    (%rax),%rax\n    23f7:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n    23fb:\t73 6e                \tjae    246b <apop_test_kolmogorov+0xca2>\n    23fd:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2404:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2408:\t48 8b 30             \tmov    (%rax),%rsi\n    240b:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n    2412:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2416:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    241b:\t48 89 c7             \tmov    %rax,%rdi\n    241e:\te8 00 00 00 00       \tcallq  2423 <apop_test_kolmogorov+0xc5a>\n    2423:\t48 8b 85 d0 fe ff ff \tmov    -0x130(%rbp),%rax\n    242a:\t48 8b 95 d8 fe ff ff \tmov    -0x128(%rbp),%rdx\n    2431:\t48 89 85 e0 fc ff ff \tmov    %rax,-0x320(%rbp)\n    2438:\t48 89 95 e8 fc ff ff \tmov    %rdx,-0x318(%rbp)\n    243f:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    2446:\t48 8b 95 e8 fe ff ff \tmov    -0x118(%rbp),%rdx\n    244d:\t48 89 85 f0 fc ff ff \tmov    %rax,-0x310(%rbp)\n    2454:\t48 89 95 f8 fc ff ff \tmov    %rdx,-0x308(%rbp)\n    245b:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n    2462:\t48 89 85 00 fd ff ff \tmov    %rax,-0x300(%rbp)\n    2469:\teb 37                \tjmp    24a2 <apop_test_kolmogorov+0xcd9>\n    246b:\t48 c7 85 e0 fc ff ff \tmovq   $0x0,-0x320(%rbp)\n    2472:\t00 00 00 00 \n    2476:\t48 c7 85 e8 fc ff ff \tmovq   $0x0,-0x318(%rbp)\n    247d:\t00 00 00 00 \n    2481:\t48 c7 85 f0 fc ff ff \tmovq   $0x0,-0x310(%rbp)\n    2488:\t00 00 00 00 \n    248c:\t48 c7 85 f8 fc ff ff \tmovq   $0x0,-0x308(%rbp)\n    2493:\t00 00 00 00 \n    2497:\t48 c7 85 00 fd ff ff \tmovq   $0x0,-0x300(%rbp)\n    249e:\t00 00 00 00 \n    24a2:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    24a9:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    24ad:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    24b1:\t48 85 c0             \ttest   %rax,%rax\n    24b4:\t0f 84 87 00 00 00    \tje     2541 <apop_test_kolmogorov+0xd78>\n    24ba:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    24c1:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    24c5:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    24c9:\t48 8b 00             \tmov    (%rax),%rax\n    24cc:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n    24d0:\t73 6f                \tjae    2541 <apop_test_kolmogorov+0xd78>\n    24d2:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    24d9:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    24dd:\t48 8b 70 30          \tmov    0x30(%rax),%rsi\n    24e1:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n    24e8:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    24ec:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    24f1:\t48 89 c7             \tmov    %rax,%rdi\n    24f4:\te8 00 00 00 00       \tcallq  24f9 <apop_test_kolmogorov+0xd30>\n    24f9:\t48 8b 85 00 ff ff ff \tmov    -0x100(%rbp),%rax\n    2500:\t48 8b 95 08 ff ff ff \tmov    -0xf8(%rbp),%rdx\n    2507:\t48 89 85 10 fd ff ff \tmov    %rax,-0x2f0(%rbp)\n    250e:\t48 89 95 18 fd ff ff \tmov    %rdx,-0x2e8(%rbp)\n    2515:\t48 8b 85 10 ff ff ff \tmov    -0xf0(%rbp),%rax\n    251c:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n    2523:\t48 89 85 20 fd ff ff \tmov    %rax,-0x2e0(%rbp)\n    252a:\t48 89 95 28 fd ff ff \tmov    %rdx,-0x2d8(%rbp)\n    2531:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n    2538:\t48 89 85 30 fd ff ff \tmov    %rax,-0x2d0(%rbp)\n    253f:\teb 37                \tjmp    2578 <apop_test_kolmogorov+0xdaf>\n    2541:\t48 c7 85 10 fd ff ff \tmovq   $0x0,-0x2f0(%rbp)\n    2548:\t00 00 00 00 \n    254c:\t48 c7 85 18 fd ff ff \tmovq   $0x0,-0x2e8(%rbp)\n    2553:\t00 00 00 00 \n    2557:\t48 c7 85 20 fd ff ff \tmovq   $0x0,-0x2e0(%rbp)\n    255e:\t00 00 00 00 \n    2562:\t48 c7 85 28 fd ff ff \tmovq   $0x0,-0x2d8(%rbp)\n    2569:\t00 00 00 00 \n    256d:\t48 c7 85 30 fd ff ff \tmovq   $0x0,-0x2d0(%rbp)\n    2574:\t00 00 00 00 \n    2578:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    257f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2583:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    2587:\t48 85 c0             \ttest   %rax,%rax\n    258a:\t0f 84 b5 00 00 00    \tje     2645 <apop_test_kolmogorov+0xe7c>\n    2590:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2597:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    259b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    259f:\t48 8b 00             \tmov    (%rax),%rax\n    25a2:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n    25a6:\t0f 83 99 00 00 00    \tjae    2645 <apop_test_kolmogorov+0xe7c>\n    25ac:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    25b3:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    25b7:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    25bb:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n    25bf:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    25c6:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    25ca:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n    25ce:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n    25d5:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    25d9:\t49 89 c9             \tmov    %rcx,%r9\n    25dc:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    25e2:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    25e7:\t48 89 c7             \tmov    %rax,%rdi\n    25ea:\te8 00 00 00 00       \tcallq  25ef <apop_test_kolmogorov+0xe26>\n    25ef:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n    25f6:\t48 8b 95 38 ff ff ff \tmov    -0xc8(%rbp),%rdx\n    25fd:\t48 89 85 40 fd ff ff \tmov    %rax,-0x2c0(%rbp)\n    2604:\t48 89 95 48 fd ff ff \tmov    %rdx,-0x2b8(%rbp)\n    260b:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    2612:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n    2619:\t48 89 85 50 fd ff ff \tmov    %rax,-0x2b0(%rbp)\n    2620:\t48 89 95 58 fd ff ff \tmov    %rdx,-0x2a8(%rbp)\n    2627:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    262e:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n    2635:\t48 89 85 60 fd ff ff \tmov    %rax,-0x2a0(%rbp)\n    263c:\t48 89 95 68 fd ff ff \tmov    %rdx,-0x298(%rbp)\n    2643:\teb 42                \tjmp    2687 <apop_test_kolmogorov+0xebe>\n    2645:\t48 c7 85 40 fd ff ff \tmovq   $0x0,-0x2c0(%rbp)\n    264c:\t00 00 00 00 \n    2650:\t48 c7 85 48 fd ff ff \tmovq   $0x0,-0x2b8(%rbp)\n    2657:\t00 00 00 00 \n    265b:\t48 c7 85 50 fd ff ff \tmovq   $0x0,-0x2b0(%rbp)\n    2662:\t00 00 00 00 \n    2666:\t48 c7 85 58 fd ff ff \tmovq   $0x0,-0x2a8(%rbp)\n    266d:\t00 00 00 00 \n    2671:\t48 c7 85 60 fd ff ff \tmovq   $0x0,-0x2a0(%rbp)\n    2678:\t00 00 00 00 \n    267c:\t48 c7 85 68 fd ff ff \tmovq   $0x0,-0x298(%rbp)\n    2683:\t00 00 00 00 \n    2687:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    268e:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2692:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2696:\t48 85 c0             \ttest   %rax,%rax\n    2699:\t75 52                \tjne    26ed <apop_test_kolmogorov+0xf24>\n    269b:\t48 c7 85 70 fd ff ff \tmovq   $0x0,-0x290(%rbp)\n    26a2:\t00 00 00 00 \n    26a6:\t48 c7 85 78 fd ff ff \tmovq   $0x0,-0x288(%rbp)\n    26ad:\t00 00 00 00 \n    26b1:\t48 c7 85 80 fd ff ff \tmovq   $0x0,-0x280(%rbp)\n    26b8:\t00 00 00 00 \n    26bc:\t48 c7 85 88 fd ff ff \tmovq   $0x0,-0x278(%rbp)\n    26c3:\t00 00 00 00 \n    26c7:\t48 c7 85 90 fd ff ff \tmovq   $0x0,-0x270(%rbp)\n    26ce:\t00 00 00 00 \n    26d2:\t48 c7 85 98 fd ff ff \tmovq   $0x0,-0x268(%rbp)\n    26d9:\t00 00 00 00 \n    26dd:\t48 c7 85 a0 fd ff ff \tmovq   $0x0,-0x260(%rbp)\n    26e4:\t00 00 00 00 \n    26e8:\te9 96 01 00 00       \tjmpq   2883 <apop_test_kolmogorov+0x10ba>\n    26ed:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    26f4:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    26f8:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    26fc:\t48 8b 00             \tmov    (%rax),%rax\n    26ff:\t48 89 85 70 fd ff ff \tmov    %rax,-0x290(%rbp)\n    2706:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    270d:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2711:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2715:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    2719:\t48 89 85 78 fd ff ff \tmov    %rax,-0x288(%rbp)\n    2720:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2727:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    272b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    272f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2733:\t48 89 85 80 fd ff ff \tmov    %rax,-0x280(%rbp)\n    273a:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2741:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2745:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2749:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    274d:\t48 85 c0             \ttest   %rax,%rax\n    2750:\t74 3a                \tje     278c <apop_test_kolmogorov+0xfc3>\n    2752:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2759:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    275d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2761:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    2764:\t48 98                \tcltq   \n    2766:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n    276a:\t73 20                \tjae    278c <apop_test_kolmogorov+0xfc3>\n    276c:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2773:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2777:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    277b:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    277f:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2783:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    2787:\t48 01 d0             \tadd    %rdx,%rax\n    278a:\teb 05                \tjmp    2791 <apop_test_kolmogorov+0xfc8>\n    278c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2791:\t48 89 85 88 fd ff ff \tmov    %rax,-0x278(%rbp)\n    2798:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    279f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    27a3:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    27a7:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    27ab:\t48 89 85 90 fd ff ff \tmov    %rax,-0x270(%rbp)\n    27b2:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    27b9:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    27bd:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    27c1:\t8b 40 28             \tmov    0x28(%rax),%eax\n    27c4:\t89 85 98 fd ff ff    \tmov    %eax,-0x268(%rbp)\n    27ca:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    27d1:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    27d5:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    27d9:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    27dd:\t48 85 c0             \ttest   %rax,%rax\n    27e0:\t74 7e                \tje     2860 <apop_test_kolmogorov+0x1097>\n    27e2:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    27e9:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    27ed:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    27f1:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    27f4:\t48 98                \tcltq   \n    27f6:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n    27fa:\t74 1e                \tje     281a <apop_test_kolmogorov+0x1051>\n    27fc:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2803:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2807:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    280b:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    280e:\t48 98                \tcltq   \n    2810:\t48 2b 45 d8          \tsub    -0x28(%rbp),%rax\n    2814:\t48 83 f8 01          \tcmp    $0x1,%rax\n    2818:\t77 3f                \tja     2859 <apop_test_kolmogorov+0x1090>\n    281a:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2821:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2825:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2829:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    282c:\t48 98                \tcltq   \n    282e:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n    2832:\t74 1e                \tje     2852 <apop_test_kolmogorov+0x1089>\n    2834:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    283b:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    283f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2843:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n    2846:\t89 c2                \tmov    %eax,%edx\n    2848:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    284c:\t29 c2                \tsub    %eax,%edx\n    284e:\t89 d0                \tmov    %edx,%eax\n    2850:\teb 13                \tjmp    2865 <apop_test_kolmogorov+0x109c>\n    2852:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2857:\teb 0c                \tjmp    2865 <apop_test_kolmogorov+0x109c>\n    2859:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    285e:\teb 05                \tjmp    2865 <apop_test_kolmogorov+0x109c>\n    2860:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2865:\t89 85 9c fd ff ff    \tmov    %eax,-0x264(%rbp)\n    286b:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2872:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2876:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    287a:\t8b 40 30             \tmov    0x30(%rax),%eax\n    287d:\t89 85 a0 fd ff ff    \tmov    %eax,-0x260(%rbp)\n    2883:\t48 c7 85 b0 fd ff ff \tmovq   $0x0,-0x250(%rbp)\n    288a:\t00 00 00 00 \n    288e:\t48 c7 85 b8 fd ff ff \tmovq   $0x0,-0x248(%rbp)\n    2895:\t00 00 00 00 \n    2899:\t48 c7 85 c0 fd ff ff \tmovq   $0x0,-0x240(%rbp)\n    28a0:\t00 00 00 00 \n    28a4:\t48 c7 85 c8 fd ff ff \tmovq   $0x0,-0x238(%rbp)\n    28ab:\t00 00 00 00 \n    28af:\t48 c7 85 d0 fd ff ff \tmovq   $0x0,-0x230(%rbp)\n    28b6:\t00 00 00 00 \n    28ba:\t48 c7 85 d8 fd ff ff \tmovq   $0x0,-0x228(%rbp)\n    28c1:\t00 00 00 00 \n    28c5:\t48 c7 85 e0 fd ff ff \tmovq   $0x0,-0x220(%rbp)\n    28cc:\t00 00 00 00 \n    28d0:\t48 c7 85 e8 fd ff ff \tmovq   $0x0,-0x218(%rbp)\n    28d7:\t00 00 00 00 \n    28db:\t48 c7 85 f0 fd ff ff \tmovq   $0x0,-0x210(%rbp)\n    28e2:\t00 00 00 00 \n    28e6:\t48 8b 85 e0 fc ff ff \tmov    -0x320(%rbp),%rax\n    28ed:\t48 85 c0             \ttest   %rax,%rax\n    28f0:\t74 09                \tje     28fb <apop_test_kolmogorov+0x1132>\n    28f2:\t48 8d 85 e0 fc ff ff \tlea    -0x320(%rbp),%rax\n    28f9:\teb 05                \tjmp    2900 <apop_test_kolmogorov+0x1137>\n    28fb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2900:\t48 89 85 b0 fd ff ff \tmov    %rax,-0x250(%rbp)\n    2907:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n    290e:\t48 85 c0             \ttest   %rax,%rax\n    2911:\t74 09                \tje     291c <apop_test_kolmogorov+0x1153>\n    2913:\t48 8d 85 40 fd ff ff \tlea    -0x2c0(%rbp),%rax\n    291a:\teb 05                \tjmp    2921 <apop_test_kolmogorov+0x1158>\n    291c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2921:\t48 89 85 b8 fd ff ff \tmov    %rax,-0x248(%rbp)\n    2928:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    292f:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2933:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2937:\t48 85 c0             \ttest   %rax,%rax\n    293a:\t74 09                \tje     2945 <apop_test_kolmogorov+0x117c>\n    293c:\t48 8d 85 70 fd ff ff \tlea    -0x290(%rbp),%rax\n    2943:\teb 05                \tjmp    294a <apop_test_kolmogorov+0x1181>\n    2945:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    294a:\t48 89 85 c0 fd ff ff \tmov    %rax,-0x240(%rbp)\n    2951:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2958:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    295c:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    2960:\t48 85 c0             \ttest   %rax,%rax\n    2963:\t74 1c                \tje     2981 <apop_test_kolmogorov+0x11b8>\n    2965:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    296c:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2970:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    2974:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2978:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    297c:\t48 01 d0             \tadd    %rdx,%rax\n    297f:\teb 05                \tjmp    2986 <apop_test_kolmogorov+0x11bd>\n    2981:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2986:\t48 89 85 c8 fd ff ff \tmov    %rax,-0x238(%rbp)\n    298d:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2994:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2998:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    299c:\t48 85 c0             \ttest   %rax,%rax\n    299f:\t0f 95 c0             \tsetne  %al\n    29a2:\t0f b6 c0             \tmovzbl %al,%eax\n    29a5:\t48 89 85 d0 fd ff ff \tmov    %rax,-0x230(%rbp)\n    29ac:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    29b3:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    29b7:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    29bb:\t48 89 85 d8 fd ff ff \tmov    %rax,-0x228(%rbp)\n    29c2:\t48 8b 85 10 fd ff ff \tmov    -0x2f0(%rbp),%rax\n    29c9:\t48 85 c0             \ttest   %rax,%rax\n    29cc:\t74 09                \tje     29d7 <apop_test_kolmogorov+0x120e>\n    29ce:\t48 8d 85 10 fd ff ff \tlea    -0x2f0(%rbp),%rax\n    29d5:\teb 05                \tjmp    29dc <apop_test_kolmogorov+0x1213>\n    29d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    29dc:\t48 89 85 e0 fd ff ff \tmov    %rax,-0x220(%rbp)\n    29e3:\t48 8d 85 b0 fd ff ff \tlea    -0x250(%rbp),%rax\n    29ea:\t48 89 45 88          \tmov    %rax,-0x78(%rbp)\n    29ee:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    29f5:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    29f9:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    29fd:\t48 85 c0             \ttest   %rax,%rax\n    2a00:\t74 20                \tje     2a22 <apop_test_kolmogorov+0x1259>\n    2a02:\t48 8b 85 d0 fc ff ff \tmov    -0x330(%rbp),%rax\n    2a09:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    2a0d:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    2a11:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2a15:\t48 89 d6             \tmov    %rdx,%rsi\n    2a18:\t48 89 c7             \tmov    %rax,%rdi\n    2a1b:\te8 00 00 00 00       \tcallq  2a20 <apop_test_kolmogorov+0x1257>\n    2a20:\teb 11                \tjmp    2a33 <apop_test_kolmogorov+0x126a>\n    2a22:\tf2 0f 2a 4d 94       \tcvtsi2sdl -0x6c(%rbp),%xmm1\n    2a27:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 2a2f <apop_test_kolmogorov+0x1266>\n    2a2e:\t00 \n    2a2f:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    2a33:\tf2 0f 10 4d e0       \tmovsd  -0x20(%rbp),%xmm1\n    2a38:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n    2a3c:\tf2 0f 11 45 e0       \tmovsd  %xmm0,-0x20(%rbp)\n    2a41:\t48 8b 95 d0 fc ff ff \tmov    -0x330(%rbp),%rdx\n    2a48:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    2a4c:\t48 89 d6             \tmov    %rdx,%rsi\n    2a4f:\t48 89 c7             \tmov    %rax,%rdi\n    2a52:\te8 00 00 00 00       \tcallq  2a57 <apop_test_kolmogorov+0x128e>\n    2a57:\tf2 0f 10 4d e0       \tmovsd  -0x20(%rbp),%xmm1\n    2a5c:\tf2 0f 5c c8          \tsubsd  %xmm0,%xmm1\n    2a60:\t66 0f 28 c1          \tmovapd %xmm1,%xmm0\n    2a64:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 2a6c <apop_test_kolmogorov+0x12a3>\n    2a6b:\t00 \n    2a6c:\t66 0f 54 c8          \tandpd  %xmm0,%xmm1\n    2a70:\tf2 0f 10 45 f8       \tmovsd  -0x8(%rbp),%xmm0\n    2a75:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    2a79:\t76 07                \tjbe    2a82 <apop_test_kolmogorov+0x12b9>\n    2a7b:\tf2 0f 10 45 f8       \tmovsd  -0x8(%rbp),%xmm0\n    2a80:\teb 2f                \tjmp    2ab1 <apop_test_kolmogorov+0x12e8>\n    2a82:\t48 8b 95 d0 fc ff ff \tmov    -0x330(%rbp),%rdx\n    2a89:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    2a8d:\t48 89 d6             \tmov    %rdx,%rsi\n    2a90:\t48 89 c7             \tmov    %rax,%rdi\n    2a93:\te8 00 00 00 00       \tcallq  2a98 <apop_test_kolmogorov+0x12cf>\n    2a98:\tf2 0f 10 4d e0       \tmovsd  -0x20(%rbp),%xmm1\n    2a9d:\tf2 0f 5c c8          \tsubsd  %xmm0,%xmm1\n    2aa1:\t66 0f 28 c1          \tmovapd %xmm1,%xmm0\n    2aa5:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 2aad <apop_test_kolmogorov+0x12e4>\n    2aac:\t00 \n    2aad:\t66 0f 54 c1          \tandpd  %xmm1,%xmm0\n    2ab1:\tf2 0f 11 45 f8       \tmovsd  %xmm0,-0x8(%rbp)\n    2ab6:\t48 83 45 d8 01       \taddq   $0x1,-0x28(%rbp)\n    2abb:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n    2abe:\t48 98                \tcltq   \n    2ac0:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n    2ac4:\t0f 82 05 f9 ff ff    \tjb     23cf <apop_test_kolmogorov+0xc06>\n    2aca:\t48 c7 85 20 fe ff ff \tmovq   $0x0,-0x1e0(%rbp)\n    2ad1:\t00 00 00 00 \n    2ad5:\t48 c7 85 28 fe ff ff \tmovq   $0x0,-0x1d8(%rbp)\n    2adc:\t00 00 00 00 \n    2ae0:\t48 c7 85 30 fe ff ff \tmovq   $0x0,-0x1d0(%rbp)\n    2ae7:\t00 00 00 00 \n    2aeb:\t48 83 ec 08          \tsub    $0x8,%rsp\n    2aef:\tff b5 30 fe ff ff    \tpushq  -0x1d0(%rbp)\n    2af5:\tff b5 28 fe ff ff    \tpushq  -0x1d8(%rbp)\n    2afb:\tff b5 20 fe ff ff    \tpushq  -0x1e0(%rbp)\n    2b01:\te8 00 00 00 00       \tcallq  2b06 <apop_test_kolmogorov+0x133d>\n    2b06:\t48 83 c4 20          \tadd    $0x20,%rsp\n    2b0a:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n    2b0e:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    2b12:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2b16:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2b1b:\t48 89 c7             \tmov    %rax,%rdi\n    2b1e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2b23:\te8 00 00 00 00       \tcallq  2b28 <apop_test_kolmogorov+0x135f>\n    2b28:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    2b2b:\t0f 85 bc 00 00 00    \tjne    2bed <apop_test_kolmogorov+0x1424>\n    2b31:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2b37 <apop_test_kolmogorov+0x136e>\n    2b37:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    2b3a:\t0f 84 83 00 00 00    \tje     2bc3 <apop_test_kolmogorov+0x13fa>\n    2b40:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2b46 <apop_test_kolmogorov+0x137d>\n    2b46:\t85 c0                \ttest   %eax,%eax\n    2b48:\t78 79                \tjs     2bc3 <apop_test_kolmogorov+0x13fa>\n    2b4a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b51 <apop_test_kolmogorov+0x1388>\n    2b51:\t48 85 c0             \ttest   %rax,%rax\n    2b54:\t75 0e                \tjne    2b64 <apop_test_kolmogorov+0x139b>\n    2b56:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b5d <apop_test_kolmogorov+0x1394>\n    2b5d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 2b64 <apop_test_kolmogorov+0x139b>\n    2b64:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b6b <apop_test_kolmogorov+0x13a2>\n    2b6b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2b70:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2b75:\t48 89 c7             \tmov    %rax,%rdi\n    2b78:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2b7d:\te8 00 00 00 00       \tcallq  2b82 <apop_test_kolmogorov+0x13b9>\n    2b82:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b89 <apop_test_kolmogorov+0x13c0>\n    2b89:\t48 89 c1             \tmov    %rax,%rcx\n    2b8c:\tba 1b 00 00 00       \tmov    $0x1b,%edx\n    2b91:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2b96:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2b9b:\te8 00 00 00 00       \tcallq  2ba0 <apop_test_kolmogorov+0x13d7>\n    2ba0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2ba7 <apop_test_kolmogorov+0x13de>\n    2ba7:\t48 89 c6             \tmov    %rax,%rsi\n    2baa:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n    2baf:\te8 00 00 00 00       \tcallq  2bb4 <apop_test_kolmogorov+0x13eb>\n    2bb4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2bbb <apop_test_kolmogorov+0x13f2>\n    2bbb:\t48 89 c7             \tmov    %rax,%rdi\n    2bbe:\te8 00 00 00 00       \tcallq  2bc3 <apop_test_kolmogorov+0x13fa>\n    2bc3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2bc9 <apop_test_kolmogorov+0x1400>\n    2bc9:\t85 c0                \ttest   %eax,%eax\n    2bcb:\t78 0b                \tjs     2bd8 <apop_test_kolmogorov+0x140f>\n    2bcd:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 2bd4 <apop_test_kolmogorov+0x140b>\n    2bd4:\t3c 76                \tcmp    $0x76,%al\n    2bd6:\t74 0b                \tje     2be3 <apop_test_kolmogorov+0x141a>\n    2bd8:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 2bdf <apop_test_kolmogorov+0x1416>\n    2bdf:\t3c 77                \tcmp    $0x77,%al\n    2be1:\t75 0a                \tjne    2bed <apop_test_kolmogorov+0x1424>\n    2be3:\tbf 05 00 00 00       \tmov    $0x5,%edi\n    2be8:\te8 00 00 00 00       \tcallq  2bed <apop_test_kolmogorov+0x1424>\n    2bed:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2bf1:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    2bf5:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n    2bfa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2bff:\t48 89 c7             \tmov    %rax,%rdi\n    2c02:\te8 00 00 00 00       \tcallq  2c07 <apop_test_kolmogorov+0x143e>\n    2c07:\t80 7d d7 00          \tcmpb   $0x0,-0x29(%rbp)\n    2c0b:\t74 1f                \tje     2c2c <apop_test_kolmogorov+0x1463>\n    2c0d:\t8b 4d 94             \tmov    -0x6c(%rbp),%ecx\n    2c10:\t8b 55 b4             \tmov    -0x4c(%rbp),%edx\n    2c13:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    2c17:\t89 ce                \tmov    %ecx,%esi\n    2c19:\t89 d7                \tmov    %edx,%edi\n    2c1b:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n    2c20:\te8 cd e8 ff ff       \tcallq  14f2 <psmirnov2x>\n    2c25:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n    2c2a:\teb 18                \tjmp    2c44 <apop_test_kolmogorov+0x147b>\n    2c2c:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2c30:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n    2c33:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n    2c38:\t89 c7                \tmov    %eax,%edi\n    2c3a:\te8 bf e4 ff ff       \tcallq  10fe <kolmogorov_2x>\n    2c3f:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n    2c44:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n    2c4b:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 2c53 <apop_test_kolmogorov+0x148a>\n    2c52:\t00 \n    2c53:\tf2 0f 5c 85 78 ff ff \tsubsd  -0x88(%rbp),%xmm0\n    2c5a:\tff \n    2c5b:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    2c5f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2c64:\t48 89 c7             \tmov    %rax,%rdi\n    2c67:\te8 00 00 00 00       \tcallq  2c6c <apop_test_kolmogorov+0x14a3>\n    2c6c:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    2c73:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    2c77:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n    2c7c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2c81:\t48 89 c7             \tmov    %rax,%rdi\n    2c84:\te8 00 00 00 00       \tcallq  2c89 <apop_test_kolmogorov+0x14c0>\n    2c89:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    2c8d:\tc9                   \tleaveq \n    2c8e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall apop_test_kolmogorov(FILE *<span class=\"supfact\">a1</span>,\n                                        FILE *<span class=\"supfact\">a2</span>) {\n  void *v2;\n  __int64 result;\n  int v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  unsigned __int64 v9;\n  unsigned __int64 v10;\n  int v11;\n  int v12;\n  __int64 v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  unsigned __int64 v17;\n  unsigned __int64 v18;\n  int v19;\n  __int64 v20;\n  int v21;\n  __int64 *v22;\n  __int64 *v23;\n  __int64 *v24;\n  __int64 v25;\n  __int64 *v26;\n  double v27;\n  double v28;\n  double v29;\n  double v30;\n  __int64 v31;\n  int v32;\n  __int64 *v33;\n  __int64 *v34;\n  __int64 *v35;\n  __int64 v36;\n  __int64 *v37;\n  double v38;\n  double v39;\n  double v40;\n  double v41;\n  double v42;\n  FILE *<span class=\"supfact\">v43</span>;\n  FILE *<span class=\"supfact\">v44</span>;\n  __int64 <span class=\"supfact\">v45</span>;\n  __int64 <span class=\"supfact\">v46</span>;\n  __int64 <span class=\"supfact\">v47</span>;\n  __int64 <span class=\"supfact\">v48</span>;\n  __int64 <span class=\"supfact\">v49</span>;\n  __int64 <span class=\"supfact\">v50</span>;\n  __int64 <span class=\"supfact\">v51</span>;\n  __int64 <span class=\"supfact\">v52</span>;\n  __int64 <span class=\"supfact\">v53</span>;\n  __int64 <span class=\"supfact\">v54</span>;\n  __int64 <span class=\"supfact\">v55</span>;\n  __int64 <span class=\"supfact\">v56</span>;\n  __int64 <span class=\"supfact\">v57</span>;\n  __int64 <span class=\"supfact\">v58</span>;\n  __int64 <span class=\"supfact\">v59</span>;\n  __int64 <span class=\"supfact\">v60</span>;\n  __int64 <span class=\"supfact\">v61</span>;\n  __int64 <span class=\"supfact\">v62</span>;\n  __int64 <span class=\"supfact\">v63</span>;\n  __int64 <span class=\"supfact\">v64</span>;\n  __int64 <span class=\"supfact\">v65</span>;\n  __int64 <span class=\"supfact\">v66</span>;\n  __int64 <span class=\"supfact\">v67</span>;\n  __int64 *<span class=\"supfact\">v68</span>;\n  __int64 *<span class=\"supfact\">v69</span>;\n  __int64 *<span class=\"supfact\">v70</span>;\n  __int64 <span class=\"supfact\">v71</span>;\n  _BOOL8 <span class=\"supfact\">v72</span>;\n  __int64 v73;\n  __int64 *v74;\n  __int64 v75;\n  __int64 v76;\n  __int64 v77;\n  __int64 v78;\n  __int64 v79;\n  __int64 v80;\n  __int64 v81;\n  __int64 v82;\n  __int64 v83[Number];\n  __int64 v84[Number];\n  __int64 v85[Number];\n  __int64 v86[Number];\n  __int64 v87[Number];\n  __int64 v88[Number];\n  __int64 v89;\n  __int64 *v90;\n  double v91;\n  __int64 v92;\n  __int64 *v93;\n  int v94;\n  int v95;\n  int v96;\n  int v97;\n  int v98;\n  int v99;\n  int v100;\n  int v101;\n  int v102;\n  int v103;\n  int v104;\n  int v105;\n  int v106;\n  int v107;\n  int v108;\n  int v109;\n  bool v110;\n  unsigned __int64 j;\n  double v112;\n  unsigned __int64 i;\n  double v114;\n  double v115;\n  <span class=\"supfact\">v44</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v43</span> = <span class=\"supfact\">a2</span>;\n  v2 = <span class=\"supfact\">a1</span>->__pad3;\n  if (v2 == *(void **)(apop_pmf + Number L)) {\n    v110 = <span class=\"supfact\">a2</span>->__pad3 == *(void **)(apop_pmf + Number L);\n    if (<span class=\"supfact\">a1</span>->_old_offset &&\n        *(_QWORD *)<span class=\"supfact\">a1</span>->_old_offset)\n      v4 = Number;\n    else\n      v4 = Number;\n    v109 = v4;\n    if (<span class=\"supfact\">a1</span>->_old_offset &&\n        *(_QWORD *)<span class=\"supfact\">a1</span>->_old_offset)\n      v5 = **(_QWORD **)<span class=\"supfact\">a1</span>->_old_offset;\n    else\n      LODWORD(v5) = Number;\n    v108 = v5;\n    if (<span class=\"supfact\">a1</span>->_old_offset &&\n        *(_QWORD *)(<span class=\"supfact\">a1</span>->_old_offset + Number))\n      v6 = **(_QWORD **)(<span class=\"supfact\">a1</span>->_old_offset + Number);\n    else\n      LODWORD(v6) = Number;\n    v107 = v6;\n    if (<span class=\"supfact\">a1</span>->_old_offset &&\n        *(_QWORD *)(<span class=\"supfact\">a1</span>->_old_offset + Number))\n      v7 = **(_QWORD **)(<span class=\"supfact\">a1</span>->_old_offset + Number);\n    else\n      LODWORD(v7) = Number;\n    v106 = v7;\n    if (<span class=\"supfact\">a1</span>->_old_offset &&\n        *(_QWORD *)(<span class=\"supfact\">a1</span>->_old_offset + Number))\n      v8 = *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span>->_old_offset + Number) +\n                       Number L);\n    else\n      LODWORD(v8) = Number;\n    v105 = v8;\n    v104 = v8 * v106 + v108;\n    if (<span class=\"supfact\">a1</span>->_old_offset)\n      v9 = *(_QWORD *)(<span class=\"supfact\">a1</span>->_old_offset + Number);\n    else\n      v9 = Number L;\n    v10 = v106;\n    if (v9 >= v106)\n      v10 = v9;\n    v11 = v108;\n    if (v10 >= v108)\n      v11 = v10;\n    v103 = v11;\n    v102 = v11;\n    if (<span class=\"supfact\">a2</span>->_old_offset &&\n        *(_QWORD *)<span class=\"supfact\">a2</span>->_old_offset)\n      v12 = Number;\n    else\n      v12 = Number;\n    v101 = v12;\n    if (<span class=\"supfact\">a2</span>->_old_offset &&\n        *(_QWORD *)<span class=\"supfact\">a2</span>->_old_offset)\n      v13 = **(_QWORD **)<span class=\"supfact\">a2</span>->_old_offset;\n    else\n      LODWORD(v13) = Number;\n    v100 = v13;\n    if (<span class=\"supfact\">a2</span>->_old_offset &&\n        *(_QWORD *)(<span class=\"supfact\">a2</span>->_old_offset + Number))\n      v14 = **(_QWORD **)(<span class=\"supfact\">a2</span>->_old_offset + Number);\n    else\n      LODWORD(v14) = Number;\n    v99 = v14;\n    if (<span class=\"supfact\">a2</span>->_old_offset &&\n        *(_QWORD *)(<span class=\"supfact\">a2</span>->_old_offset + Number))\n      v15 = **(_QWORD **)(<span class=\"supfact\">a2</span>->_old_offset + Number);\n    else\n      LODWORD(v15) = Number;\n    v98 = v15;\n    if (<span class=\"supfact\">a2</span>->_old_offset &&\n        *(_QWORD *)(<span class=\"supfact\">a2</span>->_old_offset + Number))\n      v16 = *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a2</span>->_old_offset + Number) +\n                        Number L);\n    else\n      LODWORD(v16) = Number;\n    v97 = v16;\n    v96 = v16 * v98 + v100;\n    if (<span class=\"supfact\">a2</span>->_old_offset)\n      v17 = *(_QWORD *)(<span class=\"supfact\">a2</span>->_old_offset + Number);\n    else\n      v17 = Number L;\n    v18 = v98;\n    if (v17 >= v98)\n      v18 = v17;\n    v19 = v100;\n    if (v18 >= v100)\n      v19 = v18;\n    v95 = v19;\n    v94 = v19;\n    v115 = -INFINITY;\n    v114 = Number;\n    for (i = Number L; i < v102; ++i) {\n      if (*(_QWORD *)<span class=\"supfact\">v44</span>->_old_offset &&\n          i < **(_QWORD **)<span class=\"supfact\">v44</span>->_old_offset) {\n        gsl_vector_subvector(v83, *(_QWORD *)<span class=\"supfact\">v44</span>->_old_offset,\n                             i, Number L);\n        <span class=\"supfact\">v45</span> = v83[Number];\n        <span class=\"supfact\">v46</span> = v83[Number];\n        <span class=\"supfact\">v47</span> = v83[Number];\n        <span class=\"supfact\">v48</span> = v83[Number];\n        <span class=\"supfact\">v49</span> = v83[Number];\n      } else {\n        <span class=\"supfact\">v45</span> = Number L;\n        <span class=\"supfact\">v46</span> = Number L;\n        <span class=\"supfact\">v47</span> = Number L;\n        <span class=\"supfact\">v48</span> = Number L;\n        <span class=\"supfact\">v49</span> = Number L;\n      }\n      if (*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) &&\n          i < **(_QWORD **)(<span class=\"supfact\">v44</span>->_old_offset + Number)) {\n        gsl_vector_subvector(\n            v84, *(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number), i,\n            Number L);\n        <span class=\"supfact\">v50</span> = v84[Number];\n        <span class=\"supfact\">v51</span> = v84[Number];\n        <span class=\"supfact\">v52</span> = v84[Number];\n        <span class=\"supfact\">v53</span> = v84[Number];\n        <span class=\"supfact\">v54</span> = v84[Number];\n      } else {\n        <span class=\"supfact\">v50</span> = Number L;\n        <span class=\"supfact\">v51</span> = Number L;\n        <span class=\"supfact\">v52</span> = Number L;\n        <span class=\"supfact\">v53</span> = Number L;\n        <span class=\"supfact\">v54</span> = Number L;\n      }\n      if (*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) &&\n          i < **(_QWORD **)(<span class=\"supfact\">v44</span>->_old_offset + Number)) {\n        gsl_matrix_submatrix(\n            v85, *(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number), i,\n            Number L, Number L,\n            *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) +\n                        Number L));\n        <span class=\"supfact\">v55</span> = v85[Number];\n        <span class=\"supfact\">v56</span> = v85[Number];\n        <span class=\"supfact\">v57</span> = v85[Number];\n        <span class=\"supfact\">v58</span> = v85[Number];\n        <span class=\"supfact\">v59</span> = v85[Number];\n        <span class=\"supfact\">v60</span> = v85[Number];\n      } else {\n        <span class=\"supfact\">v55</span> = Number L;\n        <span class=\"supfact\">v56</span> = Number L;\n        <span class=\"supfact\">v57</span> = Number L;\n        <span class=\"supfact\">v58</span> = Number L;\n        <span class=\"supfact\">v59</span> = Number L;\n        <span class=\"supfact\">v60</span> = Number L;\n      }\n      if (*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number)) {\n        <span class=\"supfact\">v61</span> =\n            **(_QWORD **)(<span class=\"supfact\">v44</span>->_old_offset + Number);\n        <span class=\"supfact\">v62</span> =\n            *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) +\n                        Number L);\n        <span class=\"supfact\">v63</span> =\n            *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) +\n                        Number L);\n        if (*(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) +\n                        Number L) &&\n            i < *(int *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset +\n                                     Number) +\n                         Number L)) {\n          v20 = Number * i +\n                *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset +\n                                        Number) +\n                            Number L);\n        } else {\n          v20 = Number L;\n        }\n        <span class=\"supfact\">v64</span> = v20;\n        <span class=\"supfact\">v65</span> =\n            *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) +\n                        Number L);\n        LODWORD(<span class=\"supfact\">v66</span>) =\n            *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) +\n                        Number L);\n        if (*(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) +\n                        Number L)) {\n          if (i == *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset +\n                                           Number) +\n                               Number L) ||\n              *(int *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) +\n                       Number L) -\n                      i <=\n                  Number) {\n            if (i == *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset +\n                                             Number) +\n                                 Number L))\n              v21 = Number;\n            else\n              v21 = *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset +\n                                            Number) +\n                                Number L) -\n                    i;\n          } else {\n            v21 = Number;\n          }\n        } else {\n          v21 = Number;\n        }\n        HIDWORD(<span class=\"supfact\">v66</span>) = v21;\n        LODWORD(<span class=\"supfact\">v67</span>) =\n            *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) +\n                        Number L);\n      } else {\n        <span class=\"supfact\">v61</span> = Number L;\n        <span class=\"supfact\">v62</span> = Number L;\n        <span class=\"supfact\">v63</span> = Number L;\n        <span class=\"supfact\">v64</span> = Number L;\n        <span class=\"supfact\">v65</span> = Number L;\n        <span class=\"supfact\">v66</span> = Number L;\n        <span class=\"supfact\">v67</span> = Number L;\n      }\n      <span class=\"supfact\">v68</span> = Number L;\n      <span class=\"supfact\">v69</span> = Number L;\n      <span class=\"supfact\">v70</span> = Number L;\n      <span class=\"supfact\">v71</span> = Number L;\n      <span class=\"supfact\">v72</span> = Number L;\n      v73 = Number L;\n      v74 = Number L;\n      v75 = Number L;\n      v76 = Number L;\n      if (<span class=\"supfact\">v45</span>)\n        v22 = &<span class=\"supfact\">v45</span>;\n      else\n        v22 = Number L;\n      <span class=\"supfact\">v68</span> = v22;\n      if (<span class=\"supfact\">v55</span>)\n        v23 = &<span class=\"supfact\">v55</span>;\n      else\n        v23 = Number L;\n      <span class=\"supfact\">v69</span> = v23;\n      if (*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number))\n        v24 = &<span class=\"supfact\">v61</span>;\n      else\n        v24 = Number L;\n      <span class=\"supfact\">v70</span> = v24;\n      if (*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number))\n        v25 =\n            Number * i + *(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number);\n      else\n        v25 = Number L;\n      <span class=\"supfact\">v71</span> = v25;\n      <span class=\"supfact\">v72</span> =\n          *(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number) != Number L;\n      v73 = *(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number);\n      if (<span class=\"supfact\">v50</span>)\n        v26 = &<span class=\"supfact\">v50</span>;\n      else\n        v26 = Number L;\n      v74 = v26;\n      v90 = (__int64 *)&<span class=\"supfact\">v68</span>;\n      if (*(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number))\n        v27 = gsl_vector_get(\n            *(_QWORD *)(<span class=\"supfact\">v44</span>->_old_offset + Number), i);\n      else\n        v27 = Number / (double)v102;\n      v114 = v27 + v114;\n      <span class=\"supfact\">a2</span> = <span class=\"supfact\">v43</span>;\n      <span class=\"supfact\">a1</span> = (FILE *)v90;\n      v28 = apop_cdf(v90, <span class=\"supfact\">v43</span>);\n      if (v115 <= fabs(v114 - v28)) {\n        <span class=\"supfact\">a2</span> = <span class=\"supfact\">v43</span>;\n        <span class=\"supfact\">a1</span> = (FILE *)v90;\n        v30 = apop_cdf(v90, <span class=\"supfact\">v43</span>);\n        v29 = fabs(v114 - v30);\n      } else {\n        v29 = v115;\n      }\n      v115 = v29;\n    }\n    if (v110) {\n      v112 = Number;\n      for (j = Number L; j < v94; ++j) {\n        if (*(_QWORD *)<span class=\"supfact\">v43</span>->_old_offset &&\n            j < **(_QWORD **)<span class=\"supfact\">v43</span>->_old_offset) {\n          gsl_vector_subvector(v86, *(_QWORD *)<span class=\"supfact\">v43</span>->_old_offset,\n                               j, Number L);\n          <span class=\"supfact\">v45</span> = v86[Number];\n          <span class=\"supfact\">v46</span> = v86[Number];\n          <span class=\"supfact\">v47</span> = v86[Number];\n          <span class=\"supfact\">v48</span> = v86[Number];\n          <span class=\"supfact\">v49</span> = v86[Number];\n        } else {\n          <span class=\"supfact\">v45</span> = Number L;\n          <span class=\"supfact\">v46</span> = Number L;\n          <span class=\"supfact\">v47</span> = Number L;\n          <span class=\"supfact\">v48</span> = Number L;\n          <span class=\"supfact\">v49</span> = Number L;\n        }\n        if (*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number) &&\n            j < **(_QWORD **)(<span class=\"supfact\">v43</span>->_old_offset + Number)) {\n          gsl_vector_subvector(\n              v87, *(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number), j,\n              Number L);\n          <span class=\"supfact\">v50</span> = v87[Number];\n          <span class=\"supfact\">v51</span> = v87[Number];\n          <span class=\"supfact\">v52</span> = v87[Number];\n          <span class=\"supfact\">v53</span> = v87[Number];\n          <span class=\"supfact\">v54</span> = v87[Number];\n        } else {\n          <span class=\"supfact\">v50</span> = Number L;\n          <span class=\"supfact\">v51</span> = Number L;\n          <span class=\"supfact\">v52</span> = Number L;\n          <span class=\"supfact\">v53</span> = Number L;\n          <span class=\"supfact\">v54</span> = Number L;\n        }\n        if (*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number) &&\n            j < **(_QWORD **)(<span class=\"supfact\">v43</span>->_old_offset + Number)) {\n          gsl_matrix_submatrix(\n              v88, *(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number), j,\n              Number L, Number L,\n              *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset +\n                                      Number) +\n                          Number L));\n          <span class=\"supfact\">v55</span> = v88[Number];\n          <span class=\"supfact\">v56</span> = v88[Number];\n          <span class=\"supfact\">v57</span> = v88[Number];\n          <span class=\"supfact\">v58</span> = v88[Number];\n          <span class=\"supfact\">v59</span> = v88[Number];\n          <span class=\"supfact\">v60</span> = v88[Number];\n        } else {\n          <span class=\"supfact\">v55</span> = Number L;\n          <span class=\"supfact\">v56</span> = Number L;\n          <span class=\"supfact\">v57</span> = Number L;\n          <span class=\"supfact\">v58</span> = Number L;\n          <span class=\"supfact\">v59</span> = Number L;\n          <span class=\"supfact\">v60</span> = Number L;\n        }\n        if (*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number)) {\n          <span class=\"supfact\">v61</span> =\n              **(_QWORD **)(<span class=\"supfact\">v43</span>->_old_offset + Number);\n          <span class=\"supfact\">v62</span> = *(\n              _QWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number) +\n                        Number L);\n          <span class=\"supfact\">v63</span> = *(\n              _QWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number) +\n                        Number L);\n          if (*(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset +\n                                      Number) +\n                          Number L) &&\n              j < *(int *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset +\n                                       Number) +\n                           Number L)) {\n            v31 = Number * j +\n                  *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset +\n                                          Number) +\n                              Number L);\n          } else {\n            v31 = Number L;\n          }\n          <span class=\"supfact\">v64</span> = v31;\n          <span class=\"supfact\">v65</span> = *(\n              _QWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number) +\n                        Number L);\n          LODWORD(<span class=\"supfact\">v66</span>) = *(\n              _DWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number) +\n                        Number L);\n          if (*(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset +\n                                      Number) +\n                          Number L)) {\n            if (j == *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset +\n                                             Number) +\n                                 Number L) ||\n                *(int *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset +\n                                     Number) +\n                         Number L) -\n                        j <=\n                    Number) {\n              if (j ==\n                  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset +\n                                          Number) +\n                              Number L))\n                v32 = Number;\n              else\n                v32 = *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset +\n                                              Number) +\n                                  Number L) -\n                      j;\n            } else {\n              v32 = Number;\n            }\n          } else {\n            v32 = Number;\n          }\n          HIDWORD(<span class=\"supfact\">v66</span>) = v32;\n          LODWORD(<span class=\"supfact\">v67</span>) = *(\n              _DWORD *)(*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number) +\n                        Number L);\n        } else {\n          <span class=\"supfact\">v61</span> = Number L;\n          <span class=\"supfact\">v62</span> = Number L;\n          <span class=\"supfact\">v63</span> = Number L;\n          <span class=\"supfact\">v64</span> = Number L;\n          <span class=\"supfact\">v65</span> = Number L;\n          <span class=\"supfact\">v66</span> = Number L;\n          <span class=\"supfact\">v67</span> = Number L;\n        }\n        <span class=\"supfact\">v68</span> = Number L;\n        <span class=\"supfact\">v69</span> = Number L;\n        <span class=\"supfact\">v70</span> = Number L;\n        <span class=\"supfact\">v71</span> = Number L;\n        <span class=\"supfact\">v72</span> = Number L;\n        v73 = Number L;\n        v74 = Number L;\n        v75 = Number L;\n        v76 = Number L;\n        if (<span class=\"supfact\">v45</span>)\n          v33 = &<span class=\"supfact\">v45</span>;\n        else\n          v33 = Number L;\n        <span class=\"supfact\">v68</span> = v33;\n        if (<span class=\"supfact\">v55</span>)\n          v34 = &<span class=\"supfact\">v55</span>;\n        else\n          v34 = Number L;\n        <span class=\"supfact\">v69</span> = v34;\n        if (*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number))\n          v35 = &<span class=\"supfact\">v61</span>;\n        else\n          v35 = Number L;\n        <span class=\"supfact\">v70</span> = v35;\n        if (*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number))\n          v36 = Number * j +\n                *(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number);\n        else\n          v36 = Number L;\n        <span class=\"supfact\">v71</span> = v36;\n        <span class=\"supfact\">v72</span> =\n            *(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number) != Number L;\n        v73 = *(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number);\n        if (<span class=\"supfact\">v50</span>)\n          v37 = &<span class=\"supfact\">v50</span>;\n        else\n          v37 = Number L;\n        v74 = v37;\n        v93 = (__int64 *)&<span class=\"supfact\">v68</span>;\n        if (*(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number))\n          v38 = gsl_vector_get(\n              *(_QWORD *)(<span class=\"supfact\">v43</span>->_old_offset + Number), j);\n        else\n          v38 = Number / (double)v94;\n        v112 = v38 + v112;\n        <span class=\"supfact\">a2</span> = <span class=\"supfact\">v43</span>;\n        <span class=\"supfact\">a1</span> = (FILE *)v93;\n        v39 = apop_cdf(v93, <span class=\"supfact\">v43</span>);\n        if (v115 <= fabs(v112 - v39)) {\n          <span class=\"supfact\">a2</span> = <span class=\"supfact\">v43</span>;\n          <span class=\"supfact\">a1</span> = (FILE *)v93;\n          v41 = apop_cdf(v93, <span class=\"supfact\">v43</span>);\n          v40 = fabs(v112 - v41);\n        } else {\n          v40 = v115;\n        }\n        v115 = v40;\n      }\n    }\n    v80 = Number L;\n    v81 = Number L;\n    v82 = Number L;\n    v92 = variadic_apop_data_alloc(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, v18);\n    if (asprintf(*(char ***)(v92 + Number), String) == Number) {\n      if (apop_opts != Number && apop_opts >= Number) {\n        if (!*((_QWORD *)&apop_opts + Number))\n          *((_QWORD *)&apop_opts + Number) = stderr;\n        fprintf(*((FILE **)&apop_opts + Number), String, String);\n        fwrite(String, Number, Number, *((FILE **)&apop_opts + Number));\n        fputc(Number, *((FILE **)&apop_opts + Number));\n        fflush(*((FILE **)&apop_opts + Number));\n      }\n      if (apop_opts >= Number && *((_BYTE *)&apop_opts + Number) == Number ||\n          *((_BYTE *)&apop_opts + Number) == Number)\n        raise(Number);\n    }\n    apop_data_add_named_elmt(v92, String, v115);\n    if (v110)\n      v42 = psmirnov2x(v102, v94, v115);\n    else\n      v42 = kolmogorov_2x(v102, v115);\n    v91 = v42;\n    apop_data_add_named_elmt(v92, String, Number - v42);\n    apop_data_add_named_elmt(v92, String, v91);\n    result = v92;\n  } else {\n    if (apop_opts != Number && apop_opts >= Number) {\n      if (!*((_QWORD *)&apop_opts + Number))\n        *((_QWORD *)&apop_opts + Number) = stderr;\n      fprintf(*((FILE **)&apop_opts + Number), String, String);\n      fwrite(String, Number, Number, *((FILE **)&apop_opts + Number));\n      <span class=\"supfact\">a2</span> = (FILE *)*((_QWORD *)&apop_opts + Number);\n      fputc(Number, <span class=\"supfact\">a2</span>);\n      <span class=\"supfact\">a1</span> = (FILE *)*((_QWORD *)&apop_opts + Number);\n      fflush(<span class=\"supfact\">a1</span>);\n    }\n    if (apop_opts >= Number && *((_BYTE *)&apop_opts + Number) == Number ||\n        *((_BYTE *)&apop_opts + Number) == Number) {\n      <span class=\"supfact\">a1</span> = (FILE *)(&loc_4 + Number);\n      raise(Number);\n    }\n    v77 = Number L;\n    v78 = Number L;\n    v79 = Number L;\n    v89 = variadic_apop_data_alloc(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, v2);\n    *(_BYTE *)(v89 + Number) = Number;\n    result = v89;\n  }\n  return result;\n}", "code_t": "apop_data_0 *__cdecl apop_test_kolmogorov(apop_model_0 *<span class=\"supfact\">m1</span>,\n                                          apop_model_0 *<span class=\"supfact\">m2</span>) {\n  long double (*v2)(apop_data_0 *, apop_model_0 *);\n  apop_data_0 *result;\n  int v4;\n  size_t v5;\n  size_t v6;\n  size_t v7;\n  size_t v8;\n  unsigned __int64 v9;\n  unsigned __int64 v10;\n  int v11;\n  int v12;\n  size_t v13;\n  size_t v14;\n  size_t v15;\n  size_t v16;\n  unsigned __int64 v17;\n  unsigned __int64 v18;\n  int v19;\n  char **v20;\n  int v21;\n  gsl_vector *v22;\n  gsl_matrix *v23;\n  apop_name *v24;\n  char ***v25;\n  gsl_vector *v26;\n  double v27;\n  double v28;\n  double v29;\n  double v30;\n  char **v31;\n  int v32;\n  gsl_vector *v33;\n  gsl_matrix *v34;\n  apop_name *v35;\n  char ***v36;\n  gsl_vector *v37;\n  double v38;\n  double v39;\n  double v40;\n  double v41;\n  double v42;\n  apop_model_0 *<span class=\"supfact\">m2a</span>;\n  apop_model_0 *<span class=\"supfact\">m1a</span>;\n  gsl_vector <span class=\"supfact\">apop_dd_arow_v</span>;\n  gsl_vector <span class=\"supfact\">apop_dd_arow_w</span>;\n  gsl_matrix <span class=\"supfact\">apop_dd_arow_m</span>;\n  apop_name <span class=\"supfact\">apop_dd_arow_n</span>;\n  apop_data_0 <span class=\"supfact\">apop_dd_arow</span>;\n  __int64 <span class=\"supfact\">v50</span>;\n  __int64 <span class=\"supfact\">v51</span>;\n  __int64 <span class=\"supfact\">v52</span>;\n  __int64 <span class=\"supfact\">v53</span>;\n  __int64 <span class=\"supfact\">v54</span>;\n  __int64 <span class=\"supfact\">v55</span>;\n  gsl_vector <span class=\"supfact\">v56</span>;\n  gsl_vector <span class=\"supfact\">v57</span>;\n  gsl_matrix <span class=\"supfact\">v58</span>;\n  gsl_vector <span class=\"supfact\">v59</span>;\n  gsl_vector <span class=\"supfact\">v60</span>;\n  gsl_matrix <span class=\"supfact\">v61</span>;\n  apop_data_0 *<span class=\"supfact\">out_0</span>;\n  apop_data_0 *<span class=\"supfact\">arow</span>;\n  double <span class=\"supfact\">ps</span>;\n  apop_data_0 *<span class=\"supfact\">out</span>;\n  apop_data_0 *<span class=\"supfact\">arow_0</span>;\n  int <span class=\"supfact\">maxsize2</span>;\n  int <span class=\"supfact\">maxsize_0</span>;\n  int <span class=\"supfact\">tsize_0</span>;\n  int <span class=\"supfact\">msize2_0</span>;\n  int <span class=\"supfact\">msize1_0</span>;\n  int <span class=\"supfact\">wsize_0</span>;\n  int <span class=\"supfact\">vsize_0</span>;\n  int <span class=\"supfact\">firstcol_0</span>;\n  int <span class=\"supfact\">maxsize1</span>;\n  int <span class=\"supfact\">maxsize</span>;\n  int <span class=\"supfact\">tsize</span>;\n  int <span class=\"supfact\">msize2</span>;\n  int <span class=\"supfact\">msize1</span>;\n  int <span class=\"supfact\">wsize</span>;\n  int <span class=\"supfact\">vsize</span>;\n  int <span class=\"supfact\">firstcol</span>;\n  bool <span class=\"supfact\">m2_is_pmf</span>;\n  size_t <span class=\"supfact\">i_0</span>;\n  double <span class=\"supfact\">sum_0</span>;\n  size_t <span class=\"supfact\">i</span>;\n  double <span class=\"supfact\">sum</span>;\n  double <span class=\"supfact\">largest_diff</span>;\n  <span class=\"supfact\">m1a</span> = <span class=\"supfact\">m1</span>;\n  <span class=\"supfact\">m2a</span> = <span class=\"supfact\">m2</span>;\n  v2 = <span class=\"supfact\">m1</span>->cdf;\n  if (v2 ==\n      *(long double (**)(apop_data_0 *, apop_model_0 *))(apop_pmf + Number L)) {\n    <span class=\"supfact\">m2_is_pmf</span> =\n        <span class=\"supfact\">m2</span>->cdf ==\n        *(long double (**)(apop_data_0 *, apop_model_0 *))(apop_pmf + Number L);\n    if (<span class=\"supfact\">m1</span>->data && <span class=\"supfact\">m1</span>->data->vector)\n      v4 = Number;\n    else\n      v4 = Number;\n    <span class=\"supfact\">firstcol</span> = v4;\n    if (<span class=\"supfact\">m1</span>->data && <span class=\"supfact\">m1</span>->data->vector)\n      v5 = <span class=\"supfact\">m1</span>->data->vector->size;\n    else\n      LODWORD(v5) = Number;\n    <span class=\"supfact\">vsize</span> = v5;\n    if (<span class=\"supfact\">m1</span>->data && <span class=\"supfact\">m1</span>->data->weights)\n      v6 = <span class=\"supfact\">m1</span>->data->weights->size;\n    else\n      LODWORD(v6) = Number;\n    <span class=\"supfact\">wsize</span> = v6;\n    if (<span class=\"supfact\">m1</span>->data && <span class=\"supfact\">m1</span>->data->matrix)\n      v7 = <span class=\"supfact\">m1</span>->data->matrix->size1;\n    else\n      LODWORD(v7) = Number;\n    <span class=\"supfact\">msize1</span> = v7;\n    if (<span class=\"supfact\">m1</span>->data && <span class=\"supfact\">m1</span>->data->matrix)\n      v8 = <span class=\"supfact\">m1</span>->data->matrix->size2;\n    else\n      LODWORD(v8) = Number;\n    <span class=\"supfact\">msize2</span> = v8;\n    <span class=\"supfact\">tsize</span> = v8 * <span class=\"supfact\">msize1</span> + <span class=\"supfact\">vsize</span>;\n    if (<span class=\"supfact\">m1</span>->data)\n      v9 = <span class=\"supfact\">m1</span>->data->textsize[Number];\n    else\n      v9 = Number L;\n    v10 = <span class=\"supfact\">msize1</span>;\n    if (v9 >= <span class=\"supfact\">msize1</span>)\n      v10 = v9;\n    v11 = <span class=\"supfact\">vsize</span>;\n    if (v10 >= <span class=\"supfact\">vsize</span>)\n      v11 = v10;\n    <span class=\"supfact\">maxsize</span> = v11;\n    <span class=\"supfact\">maxsize1</span> = v11;\n    if (<span class=\"supfact\">m2</span>->data && <span class=\"supfact\">m2</span>->data->vector)\n      v12 = Number;\n    else\n      v12 = Number;\n    <span class=\"supfact\">firstcol_0</span> = v12;\n    if (<span class=\"supfact\">m2</span>->data && <span class=\"supfact\">m2</span>->data->vector)\n      v13 = <span class=\"supfact\">m2</span>->data->vector->size;\n    else\n      LODWORD(v13) = Number;\n    <span class=\"supfact\">vsize_0</span> = v13;\n    if (<span class=\"supfact\">m2</span>->data && <span class=\"supfact\">m2</span>->data->weights)\n      v14 = <span class=\"supfact\">m2</span>->data->weights->size;\n    else\n      LODWORD(v14) = Number;\n    <span class=\"supfact\">wsize_0</span> = v14;\n    if (<span class=\"supfact\">m2</span>->data && <span class=\"supfact\">m2</span>->data->matrix)\n      v15 = <span class=\"supfact\">m2</span>->data->matrix->size1;\n    else\n      LODWORD(v15) = Number;\n    <span class=\"supfact\">msize1_0</span> = v15;\n    if (<span class=\"supfact\">m2</span>->data && <span class=\"supfact\">m2</span>->data->matrix)\n      v16 = <span class=\"supfact\">m2</span>->data->matrix->size2;\n    else\n      LODWORD(v16) = Number;\n    <span class=\"supfact\">msize2_0</span> = v16;\n    <span class=\"supfact\">tsize_0</span> =\n        v16 * <span class=\"supfact\">msize1_0</span> + <span class=\"supfact\">vsize_0</span>;\n    if (<span class=\"supfact\">m2</span>->data)\n      v17 = <span class=\"supfact\">m2</span>->data->textsize[Number];\n    else\n      v17 = Number L;\n    v18 = <span class=\"supfact\">msize1_0</span>;\n    if (v17 >= <span class=\"supfact\">msize1_0</span>)\n      v18 = v17;\n    v19 = <span class=\"supfact\">vsize_0</span>;\n    if (v18 >= <span class=\"supfact\">vsize_0</span>)\n      v19 = v18;\n    <span class=\"supfact\">maxsize_0</span> = v19;\n    <span class=\"supfact\">maxsize2</span> = v19;\n    <span class=\"supfact\">largest_diff</span> = -INFINITY;\n    <span class=\"supfact\">sum</span> = Number;\n    for (<span class=\"supfact\">i</span> = Number L;\n         <span class=\"supfact\">i</span> < <span class=\"supfact\">maxsize1</span>; ++<span class=\"supfact\">i</span>) {\n      if (<span class=\"supfact\">m1a</span>->data->vector &&\n          <span class=\"supfact\">i</span> < <span class=\"supfact\">m1a</span>->data->vector->size) {\n        gsl_vector_subvector(&<span class=\"supfact\">v56</span>,\n                             <span class=\"supfact\">m1a</span>->data->vector,\n                             <span class=\"supfact\">i</span>, Number L);\n        <span class=\"supfact\">apop_dd_arow_v</span> = <span class=\"supfact\">v56</span>;\n      } else {\n        <span class=\"supfact\">apop_dd_arow_v</span>.size = Number L;\n        <span class=\"supfact\">apop_dd_arow_v</span>.stride = Number L;\n        <span class=\"supfact\">apop_dd_arow_v</span>.data = Number L;\n        <span class=\"supfact\">apop_dd_arow_v</span>.block = Number L;\n        *(_QWORD *)&<span class=\"supfact\">apop_dd_arow_v</span>.owner = Number L;\n      }\n      if (<span class=\"supfact\">m1a</span>->data->weights &&\n          <span class=\"supfact\">i</span> < <span class=\"supfact\">m1a</span>->data->weights->size) {\n        gsl_vector_subvector(&<span class=\"supfact\">v57</span>,\n                             <span class=\"supfact\">m1a</span>->data->weights,\n                             <span class=\"supfact\">i</span>, Number L);\n        <span class=\"supfact\">apop_dd_arow_w</span> = <span class=\"supfact\">v57</span>;\n      } else {\n        <span class=\"supfact\">apop_dd_arow_w</span>.size = Number L;\n        <span class=\"supfact\">apop_dd_arow_w</span>.stride = Number L;\n        <span class=\"supfact\">apop_dd_arow_w</span>.data = Number L;\n        <span class=\"supfact\">apop_dd_arow_w</span>.block = Number L;\n        *(_QWORD *)&<span class=\"supfact\">apop_dd_arow_w</span>.owner = Number L;\n      }\n      if (<span class=\"supfact\">m1a</span>->data->matrix &&\n          <span class=\"supfact\">i</span> < <span class=\"supfact\">m1a</span>->data->matrix->size1) {\n        gsl_matrix_submatrix(&<span class=\"supfact\">v58</span>,\n                             <span class=\"supfact\">m1a</span>->data->matrix,\n                             <span class=\"supfact\">i</span>, Number L, Number L,\n                             <span class=\"supfact\">m1a</span>->data->matrix->size2);\n        <span class=\"supfact\">apop_dd_arow_m</span> = <span class=\"supfact\">v58</span>;\n      } else {\n        <span class=\"supfact\">apop_dd_arow_m</span>.size1 = Number L;\n        <span class=\"supfact\">apop_dd_arow_m</span>.size2 = Number L;\n        <span class=\"supfact\">apop_dd_arow_m</span>.tda = Number L;\n        <span class=\"supfact\">apop_dd_arow_m</span>.data = Number L;\n        <span class=\"supfact\">apop_dd_arow_m</span>.block = Number L;\n        *(_QWORD *)&<span class=\"supfact\">apop_dd_arow_m</span>.owner = Number L;\n      }\n      if (<span class=\"supfact\">m1a</span>->data->names) {\n        <span class=\"supfact\">apop_dd_arow_n</span>.title =\n            <span class=\"supfact\">m1a</span>->data->names->title;\n        <span class=\"supfact\">apop_dd_arow_n</span>.vector =\n            <span class=\"supfact\">m1a</span>->data->names->vector;\n        <span class=\"supfact\">apop_dd_arow_n</span>.col =\n            <span class=\"supfact\">m1a</span>->data->names->col;\n        if (<span class=\"supfact\">m1a</span>->data->names->row &&\n            <span class=\"supfact\">i</span> < <span class=\"supfact\">m1a</span>->data->names->rowct)\n          v20 = &<span class=\"supfact\">m1a</span>->data->names->row[<span class=\"supfact\">i</span>];\n        else\n          v20 = Number L;\n        <span class=\"supfact\">apop_dd_arow_n</span>.row = v20;\n        <span class=\"supfact\">apop_dd_arow_n</span>.text =\n            <span class=\"supfact\">m1a</span>->data->names->text;\n        <span class=\"supfact\">apop_dd_arow_n</span>.colct =\n            <span class=\"supfact\">m1a</span>->data->names->colct;\n        if (<span class=\"supfact\">m1a</span>->data->names->row) {\n          if (<span class=\"supfact\">i</span> == <span class=\"supfact\">m1a</span>->data->names->rowct ||\n              <span class=\"supfact\">m1a</span>->data->names->rowct - <span class=\"supfact\">i</span> <=\n                  Number) {\n            if (<span class=\"supfact\">i</span> == <span class=\"supfact\">m1a</span>->data->names->rowct)\n              v21 = Number;\n            else\n              v21 = <span class=\"supfact\">m1a</span>->data->names->rowct - <span class=\"supfact\">i</span>;\n          } else {\n            v21 = Number;\n          }\n        } else {\n          v21 = Number;\n        }\n        <span class=\"supfact\">apop_dd_arow_n</span>.rowct = v21;\n        <span class=\"supfact\">apop_dd_arow_n</span>.textct =\n            <span class=\"supfact\">m1a</span>->data->names->textct;\n      } else {\n        <span class=\"supfact\">apop_dd_arow_n</span>.title = Number L;\n        <span class=\"supfact\">apop_dd_arow_n</span>.vector = Number L;\n        <span class=\"supfact\">apop_dd_arow_n</span>.col = Number L;\n        <span class=\"supfact\">apop_dd_arow_n</span>.row = Number L;\n        <span class=\"supfact\">apop_dd_arow_n</span>.text = Number L;\n        *(_QWORD *)&<span class=\"supfact\">apop_dd_arow_n</span>.colct = Number L;\n        *(_QWORD *)&<span class=\"supfact\">apop_dd_arow_n</span>.textct = Number L;\n      }\n      <span class=\"supfact\">apop_dd_arow</span>.vector = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.matrix = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.names = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.text = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.textsize[Number] = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.textsize[Number] = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.weights = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.more = Number L;\n      *(_QWORD *)&<span class=\"supfact\">apop_dd_arow</span>.error = Number L;\n      if (<span class=\"supfact\">apop_dd_arow_v</span>.size)\n        v22 = &<span class=\"supfact\">apop_dd_arow_v</span>;\n      else\n        v22 = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.vector = v22;\n      if (<span class=\"supfact\">apop_dd_arow_m</span>.size1)\n        v23 = &<span class=\"supfact\">apop_dd_arow_m</span>;\n      else\n        v23 = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.matrix = v23;\n      if (<span class=\"supfact\">m1a</span>->data->names)\n        v24 = &<span class=\"supfact\">apop_dd_arow_n</span>;\n      else\n        v24 = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.names = v24;\n      if (<span class=\"supfact\">m1a</span>->data->text)\n        v25 = &<span class=\"supfact\">m1a</span>->data->text[<span class=\"supfact\">i</span>];\n      else\n        v25 = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.text = v25;\n      <span class=\"supfact\">apop_dd_arow</span>.textsize[Number] =\n          <span class=\"supfact\">m1a</span>->data->textsize[Number] != Number;\n      <span class=\"supfact\">apop_dd_arow</span>.textsize[Number] =\n          <span class=\"supfact\">m1a</span>->data->textsize[Number];\n      if (<span class=\"supfact\">apop_dd_arow_w</span>.size)\n        v26 = &<span class=\"supfact\">apop_dd_arow_w</span>;\n      else\n        v26 = Number L;\n      <span class=\"supfact\">apop_dd_arow</span>.weights = v26;\n      <span class=\"supfact\">arow</span> = &<span class=\"supfact\">apop_dd_arow</span>;\n      if (<span class=\"supfact\">m1a</span>->data->weights)\n        v27 = gsl_vector_get(<span class=\"supfact\">m1a</span>->data->weights,\n                             <span class=\"supfact\">i</span>);\n      else\n        v27 = Number / (double)<span class=\"supfact\">maxsize1</span>;\n      <span class=\"supfact\">sum</span> = v27 + <span class=\"supfact\">sum</span>;\n      <span class=\"supfact\">m2</span> = <span class=\"supfact\">m2a</span>;\n      <span class=\"supfact\">m1</span> = (apop_model_0 *)<span class=\"supfact\">arow</span>;\n      v28 = apop_cdf(<span class=\"supfact\">arow</span>, <span class=\"supfact\">m2a</span>);\n      if (<span class=\"supfact\">largest_diff</span> <= fabs(<span class=\"supfact\">sum</span> - v28)) {\n        <span class=\"supfact\">m2</span> = <span class=\"supfact\">m2a</span>;\n        <span class=\"supfact\">m1</span> = (apop_model_0 *)<span class=\"supfact\">arow</span>;\n        v30 = apop_cdf(<span class=\"supfact\">arow</span>, <span class=\"supfact\">m2a</span>);\n        v29 = fabs(<span class=\"supfact\">sum</span> - v30);\n      } else {\n        v29 = <span class=\"supfact\">largest_diff</span>;\n      }\n      <span class=\"supfact\">largest_diff</span> = v29;\n    }\n    if (<span class=\"supfact\">m2_is_pmf</span>) {\n      <span class=\"supfact\">sum_0</span> = Number;\n      for (<span class=\"supfact\">i_0</span> = Number L;\n           <span class=\"supfact\">i_0</span> < <span class=\"supfact\">maxsize2</span>;\n           ++<span class=\"supfact\">i_0</span>) {\n        if (<span class=\"supfact\">m2a</span>->data->vector &&\n            <span class=\"supfact\">i_0</span> < <span class=\"supfact\">m2a</span>->data->vector->size) {\n          gsl_vector_subvector(&<span class=\"supfact\">v59</span>,\n                               <span class=\"supfact\">m2a</span>->data->vector,\n                               <span class=\"supfact\">i_0</span>, Number L);\n          <span class=\"supfact\">apop_dd_arow_v</span> = <span class=\"supfact\">v59</span>;\n        } else {\n          <span class=\"supfact\">apop_dd_arow_v</span>.size = Number L;\n          <span class=\"supfact\">apop_dd_arow_v</span>.stride = Number L;\n          <span class=\"supfact\">apop_dd_arow_v</span>.data = Number L;\n          <span class=\"supfact\">apop_dd_arow_v</span>.block = Number L;\n          *(_QWORD *)&<span class=\"supfact\">apop_dd_arow_v</span>.owner = Number L;\n        }\n        if (<span class=\"supfact\">m2a</span>->data->weights &&\n            <span class=\"supfact\">i_0</span> < <span class=\"supfact\">m2a</span>->data->weights->size) {\n          gsl_vector_subvector(&<span class=\"supfact\">v60</span>,\n                               <span class=\"supfact\">m2a</span>->data->weights,\n                               <span class=\"supfact\">i_0</span>, Number L);\n          <span class=\"supfact\">apop_dd_arow_w</span> = <span class=\"supfact\">v60</span>;\n        } else {\n          <span class=\"supfact\">apop_dd_arow_w</span>.size = Number L;\n          <span class=\"supfact\">apop_dd_arow_w</span>.stride = Number L;\n          <span class=\"supfact\">apop_dd_arow_w</span>.data = Number L;\n          <span class=\"supfact\">apop_dd_arow_w</span>.block = Number L;\n          *(_QWORD *)&<span class=\"supfact\">apop_dd_arow_w</span>.owner = Number L;\n        }\n        if (<span class=\"supfact\">m2a</span>->data->matrix &&\n            <span class=\"supfact\">i_0</span> < <span class=\"supfact\">m2a</span>->data->matrix->size1) {\n          gsl_matrix_submatrix(&<span class=\"supfact\">v61</span>,\n                               <span class=\"supfact\">m2a</span>->data->matrix,\n                               <span class=\"supfact\">i_0</span>, Number L, Number L,\n                               <span class=\"supfact\">m2a</span>->data->matrix->size2);\n          <span class=\"supfact\">apop_dd_arow_m</span> = <span class=\"supfact\">v61</span>;\n        } else {\n          <span class=\"supfact\">apop_dd_arow_m</span>.size1 = Number L;\n          <span class=\"supfact\">apop_dd_arow_m</span>.size2 = Number L;\n          <span class=\"supfact\">apop_dd_arow_m</span>.tda = Number L;\n          <span class=\"supfact\">apop_dd_arow_m</span>.data = Number L;\n          <span class=\"supfact\">apop_dd_arow_m</span>.block = Number L;\n          *(_QWORD *)&<span class=\"supfact\">apop_dd_arow_m</span>.owner = Number L;\n        }\n        if (<span class=\"supfact\">m2a</span>->data->names) {\n          <span class=\"supfact\">apop_dd_arow_n</span>.title =\n              <span class=\"supfact\">m2a</span>->data->names->title;\n          <span class=\"supfact\">apop_dd_arow_n</span>.vector =\n              <span class=\"supfact\">m2a</span>->data->names->vector;\n          <span class=\"supfact\">apop_dd_arow_n</span>.col =\n              <span class=\"supfact\">m2a</span>->data->names->col;\n          if (<span class=\"supfact\">m2a</span>->data->names->row &&\n              <span class=\"supfact\">i_0</span> < <span class=\"supfact\">m2a</span>->data->names->rowct)\n            v31 = &<span class=\"supfact\">m2a</span>->data->names->row[<span class=\"supfact\">i_0</span>];\n          else\n            v31 = Number L;\n          <span class=\"supfact\">apop_dd_arow_n</span>.row = v31;\n          <span class=\"supfact\">apop_dd_arow_n</span>.text =\n              <span class=\"supfact\">m2a</span>->data->names->text;\n          <span class=\"supfact\">apop_dd_arow_n</span>.colct =\n              <span class=\"supfact\">m2a</span>->data->names->colct;\n          if (<span class=\"supfact\">m2a</span>->data->names->row) {\n            if (<span class=\"supfact\">i_0</span> ==\n                    <span class=\"supfact\">m2a</span>->data->names->rowct ||\n                <span class=\"supfact\">m2a</span>->data->names->rowct - <span class=\"supfact\">i_0</span> <=\n                    Number) {\n              if (<span class=\"supfact\">i_0</span> ==\n                  <span class=\"supfact\">m2a</span>->data->names->rowct)\n                v32 = Number;\n              else\n                v32 = <span class=\"supfact\">m2a</span>->data->names->rowct -\n                      <span class=\"supfact\">i_0</span>;\n            } else {\n              v32 = Number;\n            }\n          } else {\n            v32 = Number;\n          }\n          <span class=\"supfact\">apop_dd_arow_n</span>.rowct = v32;\n          <span class=\"supfact\">apop_dd_arow_n</span>.textct =\n              <span class=\"supfact\">m2a</span>->data->names->textct;\n        } else {\n          <span class=\"supfact\">apop_dd_arow_n</span>.title = Number L;\n          <span class=\"supfact\">apop_dd_arow_n</span>.vector = Number L;\n          <span class=\"supfact\">apop_dd_arow_n</span>.col = Number L;\n          <span class=\"supfact\">apop_dd_arow_n</span>.row = Number L;\n          <span class=\"supfact\">apop_dd_arow_n</span>.text = Number L;\n          *(_QWORD *)&<span class=\"supfact\">apop_dd_arow_n</span>.colct = Number L;\n          *(_QWORD *)&<span class=\"supfact\">apop_dd_arow_n</span>.textct = Number L;\n        }\n        <span class=\"supfact\">apop_dd_arow</span>.vector = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.matrix = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.names = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.text = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.textsize[Number] = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.textsize[Number] = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.weights = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.more = Number L;\n        *(_QWORD *)&<span class=\"supfact\">apop_dd_arow</span>.error = Number L;\n        if (<span class=\"supfact\">apop_dd_arow_v</span>.size)\n          v33 = &<span class=\"supfact\">apop_dd_arow_v</span>;\n        else\n          v33 = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.vector = v33;\n        if (<span class=\"supfact\">apop_dd_arow_m</span>.size1)\n          v34 = &<span class=\"supfact\">apop_dd_arow_m</span>;\n        else\n          v34 = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.matrix = v34;\n        if (<span class=\"supfact\">m2a</span>->data->names)\n          v35 = &<span class=\"supfact\">apop_dd_arow_n</span>;\n        else\n          v35 = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.names = v35;\n        if (<span class=\"supfact\">m2a</span>->data->text)\n          v36 = &<span class=\"supfact\">m2a</span>->data->text[<span class=\"supfact\">i_0</span>];\n        else\n          v36 = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.text = v36;\n        <span class=\"supfact\">apop_dd_arow</span>.textsize[Number] =\n            <span class=\"supfact\">m2a</span>->data->textsize[Number] != Number;\n        <span class=\"supfact\">apop_dd_arow</span>.textsize[Number] =\n            <span class=\"supfact\">m2a</span>->data->textsize[Number];\n        if (<span class=\"supfact\">apop_dd_arow_w</span>.size)\n          v37 = &<span class=\"supfact\">apop_dd_arow_w</span>;\n        else\n          v37 = Number L;\n        <span class=\"supfact\">apop_dd_arow</span>.weights = v37;\n        <span class=\"supfact\">arow_0</span> = &<span class=\"supfact\">apop_dd_arow</span>;\n        if (<span class=\"supfact\">m2a</span>->data->weights)\n          v38 = gsl_vector_get(<span class=\"supfact\">m2a</span>->data->weights,\n                               <span class=\"supfact\">i_0</span>);\n        else\n          v38 = Number / (double)<span class=\"supfact\">maxsize2</span>;\n        <span class=\"supfact\">sum_0</span> = v38 + <span class=\"supfact\">sum_0</span>;\n        <span class=\"supfact\">m2</span> = <span class=\"supfact\">m2a</span>;\n        <span class=\"supfact\">m1</span> = (apop_model_0 *)<span class=\"supfact\">arow_0</span>;\n        v39 = apop_cdf(<span class=\"supfact\">arow_0</span>, <span class=\"supfact\">m2a</span>);\n        if (<span class=\"supfact\">largest_diff</span> <= fabs(<span class=\"supfact\">sum_0</span> - v39)) {\n          <span class=\"supfact\">m2</span> = <span class=\"supfact\">m2a</span>;\n          <span class=\"supfact\">m1</span> = (apop_model_0 *)<span class=\"supfact\">arow_0</span>;\n          v41 = apop_cdf(<span class=\"supfact\">arow_0</span>, <span class=\"supfact\">m2a</span>);\n          v40 = fabs(<span class=\"supfact\">sum_0</span> - v41);\n        } else {\n          v40 = <span class=\"supfact\">largest_diff</span>;\n        }\n        <span class=\"supfact\">largest_diff</span> = v40;\n      }\n    }\n    <span class=\"supfact\">v53</span> = Number L;\n    <span class=\"supfact\">v54</span> = Number L;\n    <span class=\"supfact\">v55</span> = Number L;\n    <span class=\"supfact\">out</span> = (apop_data_0 *)variadic_apop_data_alloc(\n        <span class=\"supfact\">m1</span>, <span class=\"supfact\">m2</span>, v18);\n    if (asprintf(&<span class=\"supfact\">out</span>->names->title, String) == Number) {\n      if (apop_opts != Number && apop_opts >= Number) {\n        if (!*((_QWORD *)&apop_opts + Number))\n          *((_QWORD *)&apop_opts + Number) = stderr;\n        fprintf(*((FILE **)&apop_opts + Number), String, String);\n        fwrite(String, Number, Number, *((FILE **)&apop_opts + Number));\n        fputc(Number, *((FILE **)&apop_opts + Number));\n        fflush(*((FILE **)&apop_opts + Number));\n      }\n      if (apop_opts >= Number && *((_BYTE *)&apop_opts + Number) == Number ||\n          *((_BYTE *)&apop_opts + Number) == Number)\n        raise(Number);\n    }\n    apop_data_add_named_elmt(<span class=\"supfact\">out</span>, String,\n                             <span class=\"supfact\">largest_diff</span>);\n    if (<span class=\"supfact\">m2_is_pmf</span>)\n      v42 = psmirnov2x(<span class=\"supfact\">largest_diff</span>, <span class=\"supfact\">maxsize1</span>,\n                       <span class=\"supfact\">maxsize2</span>);\n    else\n      v42 =\n          kolmogorov_2x(<span class=\"supfact\">maxsize1</span>, <span class=\"supfact\">largest_diff</span>);\n    <span class=\"supfact\">ps</span> = v42;\n    apop_data_add_named_elmt(<span class=\"supfact\">out</span>, String, Number - v42);\n    apop_data_add_named_elmt(<span class=\"supfact\">out</span>, String, <span class=\"supfact\">ps</span>);\n    result = <span class=\"supfact\">out</span>;\n  } else {\n    if (apop_opts != Number && apop_opts >= Number) {\n      if (!*((_QWORD *)&apop_opts + Number))\n        *((_QWORD *)&apop_opts + Number) = stderr;\n      fprintf(*((FILE **)&apop_opts + Number), String, String);\n      fwrite(String, Number, Number, *((FILE **)&apop_opts + Number));\n      <span class=\"supfact\">m2</span> = (apop_model_0 *)*((_QWORD *)&apop_opts + Number);\n      fputc(Number, (FILE *)<span class=\"supfact\">m2</span>);\n      <span class=\"supfact\">m1</span> = (apop_model_0 *)*((_QWORD *)&apop_opts + Number);\n      fflush((FILE *)<span class=\"supfact\">m1</span>);\n    }\n    if (apop_opts >= Number && *((_BYTE *)&apop_opts + Number) == Number ||\n        *((_BYTE *)&apop_opts + Number) == Number) {\n      <span class=\"supfact\">m1</span> = (apop_model_0 *)(&loc_4 + Number);\n      raise(Number);\n    }\n    <span class=\"supfact\">v50</span> = Number L;\n    <span class=\"supfact\">v51</span> = Number L;\n    <span class=\"supfact\">v52</span> = Number L;\n    <span class=\"supfact\">out_0</span> = (apop_data_0 *)variadic_apop_data_alloc(\n        <span class=\"supfact\">m1</span>, <span class=\"supfact\">m2</span>, v2);\n    <span class=\"supfact\">out_0</span>->error = Number;\n    result = <span class=\"supfact\">out_0</span>;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "apop_data_0 *", "pred_name": "d", "ref_name": "m1", "ref_type": "apop_model_0 *"}, {"name": "a2", "type": "apop_model_0 *", "pred_name": "m", "ref_name": "m2", "ref_type": "apop_model_0 *"}, {"name": "v43", "type": "double", "pred_name": "v43", "ref_name": "m2a", "ref_type": "apop_model_0 *"}, {"name": "v44", "type": "double", "pred_name": "v44", "ref_name": "m1a", "ref_type": "apop_model_0 *"}, {"name": "v45", "type": "double", "pred_name": "v45", "ref_name": "apop_dd_arow_v", "ref_type": "struct gsl_vector { size_t size; size_t stride; double * data; gsl_block * block; int owner; PADDING (4); }"}, {"name": "v46", "type": "double", "pred_name": "v46", "ref_name": "", "ref_type": "disappear"}, {"name": "v47", "type": "double", "pred_name": "v47", "ref_name": "", "ref_type": "disappear"}, {"name": "v48", "type": "double", "pred_name": "v48", "ref_name": "", "ref_type": "disappear"}, {"name": "v49", "type": "double", "pred_name": "v49", "ref_name": "", "ref_type": "disappear"}, {"name": "v50", "type": "double", "pred_name": "v50", "ref_name": "apop_dd_arow_w", "ref_type": "struct gsl_vector { size_t size; size_t stride; double * data; gsl_block * block; int owner; PADDING (4); }"}, {"name": "v51", "type": "double", "pred_name": "v51", "ref_name": "", "ref_type": "disappear"}, {"name": "v52", "type": "double", "pred_name": "v52", "ref_name": "", "ref_type": "disappear"}, {"name": "v53", "type": "double", "pred_name": "v53", "ref_name": "", "ref_type": "disappear"}, {"name": "v54", "type": "double", "pred_name": "v54", "ref_name": "", "ref_type": "disappear"}, {"name": "v55", "type": "double", "pred_name": "v55", "ref_name": "apop_dd_arow_m", "ref_type": "struct gsl_matrix { size_t size1; size_t size2; size_t tda; double * data; gsl_block * block; int owner; PADDING (4); }"}, {"name": "v56", "type": "double", "pred_name": "v56", "ref_name": "", "ref_type": "disappear"}, {"name": "v57", "type": "double", "pred_name": "v57", "ref_name": "", "ref_type": "disappear"}, {"name": "v58", "type": "double", "pred_name": "v58", "ref_name": "", "ref_type": "disappear"}, {"name": "v59", "type": "double", "pred_name": "v59", "ref_name": "", "ref_type": "disappear"}, {"name": "v60", "type": "double", "pred_name": "v60", "ref_name": "", "ref_type": "disappear"}, {"name": "v61", "type": "double", "pred_name": "v61", "ref_name": "apop_dd_arow_n", "ref_type": "struct apop_name { char * title; char * vector; char ** col; char ** row; char ** text; int colct; int rowct; int textct; PADDING (4); }"}, {"name": "v62", "type": "double", "pred_name": "v62", "ref_name": "", "ref_type": "disappear"}, {"name": "v63", "type": "double", "pred_name": "v63", "ref_name": "", "ref_type": "disappear"}, {"name": "v64", "type": "double", "pred_name": "v64", "ref_name": "", "ref_type": "disappear"}, {"name": "v65", "type": "double", "pred_name": "v65", "ref_name": "", "ref_type": "disappear"}, {"name": "v66", "type": "double", "pred_name": "v66", "ref_name": "", "ref_type": "disappear"}, {"name": "v67", "type": "double", "pred_name": "v67", "ref_name": "", "ref_type": "disappear"}, {"name": "v68", "type": "double", "pred_name": "v68", "ref_name": "apop_dd_arow", "ref_type": "struct apop_data_0 { gsl_vector * vector; gsl_matrix * matrix; apop_name * names; char *** text; size_t[2] textsize; gsl_vector * weights; apop_data * more; char error; PADDING (7); }"}, {"name": "v69", "type": "double", "pred_name": "v69", "ref_name": "", "ref_type": "disappear"}, {"name": "v70", "type": "double", "pred_name": "v70", "ref_name": "", "ref_type": "disappear"}, {"name": "v71", "type": "double", "pred_name": "v71", "ref_name": "", "ref_type": "disappear"}, {"name": "v72", "type": "double", "pred_name": "v72", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "MoKee", "repo_name": "android_kernel_huawei_kirin970", "path": "MoKee/android_kernel_huawei_kirin970/16458cf6a99f956385ac7ae9f3838970f780ca2fe148497927806b1e0ca52764", "path_in_repo": "MoKee/android_kernel_huawei_kirin970/tools/perf/util/sort.o", "objdump": "0000000000006502 <setup_sort_list>:\n    6502:\t55                   \tpush   %rbp\n    6503:\t48 89 e5             \tmov    %rsp,%rbp\n    6506:\t48 83 ec 50          \tsub    $0x50,%rsp\n    650a:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    650e:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    6512:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    6516:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    651d:\t00 00 \n    651f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    6523:\t31 c0                \txor    %eax,%eax\n    6525:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    652c:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n    6533:\tc7 45 e4 01 00 00 00 \tmovl   $0x1,-0x1c(%rbp)\n    653a:\tc6 45 db 00          \tmovb   $0x0,-0x25(%rbp)\n    653e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    6542:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    6546:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    654a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    654f:\t48 89 c7             \tmov    %rax,%rdi\n    6552:\te8 00 00 00 00       \tcallq  6557 <setup_sort_list+0x55>\n    6557:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    655b:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    6560:\t74 4a                \tje     65ac <setup_sort_list+0xaa>\n    6562:\t80 7d db 00          \tcmpb   $0x0,-0x25(%rbp)\n    6566:\t74 08                \tje     6570 <setup_sort_list+0x6e>\n    6568:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n    656b:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    656e:\teb 09                \tjmp    6579 <setup_sort_list+0x77>\n    6570:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n    6573:\t83 c0 01             \tadd    $0x1,%eax\n    6576:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    6579:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    657d:\t0f b6 00             \tmovzbl (%rax),%eax\n    6580:\t3c 7b                \tcmp    $0x7b,%al\n    6582:\t75 06                \tjne    658a <setup_sort_list+0x88>\n    6584:\tc6 45 db 01          \tmovb   $0x1,-0x25(%rbp)\n    6588:\teb 0f                \tjmp    6599 <setup_sort_list+0x97>\n    658a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    658e:\t0f b6 00             \tmovzbl (%rax),%eax\n    6591:\t3c 7d                \tcmp    $0x7d,%al\n    6593:\t75 04                \tjne    6599 <setup_sort_list+0x97>\n    6595:\tc6 45 db 00          \tmovb   $0x0,-0x25(%rbp)\n    6599:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    659d:\tc6 00 00             \tmovb   $0x0,(%rax)\n    65a0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    65a4:\t48 83 c0 01          \tadd    $0x1,%rax\n    65a8:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    65ac:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    65b0:\t0f b6 00             \tmovzbl (%rax),%eax\n    65b3:\t84 c0                \ttest   %al,%al\n    65b5:\t0f 84 95 00 00 00    \tje     6650 <setup_sort_list+0x14e>\n    65bb:\t8b 4d e0             \tmov    -0x20(%rbp),%ecx\n    65be:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    65c2:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    65c6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    65ca:\t48 89 c7             \tmov    %rax,%rdi\n    65cd:\te8 00 00 00 00       \tcallq  65d2 <setup_sort_list+0xd0>\n    65d2:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    65d5:\t83 7d dc ea          \tcmpl   $0xffffffea,-0x24(%rbp)\n    65d9:\t75 57                \tjne    6632 <setup_sort_list+0x130>\n    65db:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 65e1 <setup_sort_list+0xdf>\n    65e1:\t85 c0                \ttest   %eax,%eax\n    65e3:\t75 35                \tjne    661a <setup_sort_list+0x118>\n    65e5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    65e9:\t48 89 c7             \tmov    %rax,%rdi\n    65ec:\te8 00 00 00 00       \tcallq  65f1 <setup_sort_list+0xef>\n    65f1:\t48 89 c2             \tmov    %rax,%rdx\n    65f4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    65f8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    65fd:\t48 89 c7             \tmov    %rax,%rdi\n    6600:\te8 00 00 00 00       \tcallq  6605 <setup_sort_list+0x103>\n    6605:\t85 c0                \ttest   %eax,%eax\n    6607:\t75 11                \tjne    661a <setup_sort_list+0x118>\n    6609:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    660e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6613:\te8 00 00 00 00       \tcallq  6618 <setup_sort_list+0x116>\n    6618:\teb 47                \tjmp    6661 <setup_sort_list+0x15f>\n    661a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    661e:\t48 89 c6             \tmov    %rax,%rsi\n    6621:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    6626:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    662b:\te8 00 00 00 00       \tcallq  6630 <setup_sort_list+0x12e>\n    6630:\teb 2f                \tjmp    6661 <setup_sort_list+0x15f>\n    6632:\t83 7d dc fd          \tcmpl   $0xfffffffd,-0x24(%rbp)\n    6636:\t75 18                \tjne    6650 <setup_sort_list+0x14e>\n    6638:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    663c:\t48 89 c6             \tmov    %rax,%rsi\n    663f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    6644:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6649:\te8 00 00 00 00       \tcallq  664e <setup_sort_list+0x14c>\n    664e:\teb 11                \tjmp    6661 <setup_sort_list+0x15f>\n    6650:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    6653:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    6656:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    665b:\t0f 85 dd fe ff ff    \tjne    653e <setup_sort_list+0x3c>\n    6661:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    6664:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    6668:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    666f:\t00 00 \n    6671:\t74 05                \tje     6678 <setup_sort_list+0x176>\n    6673:\te8 00 00 00 00       \tcallq  6678 <setup_sort_list+0x176>\n    6678:\tc9                   \tleaveq \n    6679:\tc3                   \tretq   ", "code_s": "__int64 __fastcall setup_sort_list(_DWORD *<span class=\"supfact\">a1</span>,\n                                   const char *<span class=\"supfact\">a2</span>,\n                                   __int64 *<span class=\"supfact\">a3</span>) {\n  const char *v3;\n  size_t <span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  char *<span class=\"supfact\">s1</span>;\n  char *<span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v9</span> = Number;\n  <span class=\"supfact\">v10</span> = Number;\n  <span class=\"supfact\">v11</span> = Number;\n  <span class=\"supfact\">v8</span> = Number;\n  while (Number) {\n    <span class=\"supfact\">s1</span> = (char *)<span class=\"supfact\">a2</span>;\n    <span class=\"supfact\">v13</span> = strpbrk(<span class=\"supfact\">a2</span>, String);\n    if (<span class=\"supfact\">v13</span>) {\n      if (<span class=\"supfact\">v8</span>)\n        <span class=\"supfact\">v11</span> = <span class=\"supfact\">v10</span>;\n      else\n        <span class=\"supfact\">v11</span> = <span class=\"supfact\">v10</span> + Number;\n      if (*<span class=\"supfact\">v13</span> == Number) {\n        <span class=\"supfact\">v8</span> = Number;\n      } else if (*<span class=\"supfact\">v13</span> == Number) {\n        <span class=\"supfact\">v8</span> = Number;\n      }\n      *<span class=\"supfact\">v13</span> = Number;\n      <span class=\"supfact\">a2</span> = <span class=\"supfact\">v13</span> + Number;\n    }\n    if (!*<span class=\"supfact\">s1</span>)\n      goto LABEL_19;\n    <span class=\"supfact\">v9</span> =\n        sort_dimension__add(<span class=\"supfact\">a1</span>, <span class=\"supfact\">s1</span>,\n                            <span class=\"supfact\">a3</span>, <span class=\"supfact\">v10</span>);\n    if (<span class=\"supfact\">v9</span> == Number)\n      break;\n    if (<span class=\"supfact\">v9</span> == Number) {\n      error((int)String, (int)<span class=\"supfact\">s1</span>, v3);\n      return <span class=\"supfact\">v9</span>;\n    }\n  LABEL_19:\n    <span class=\"supfact\">v10</span> = <span class=\"supfact\">v11</span>;\n    if (!<span class=\"supfact\">v13</span>)\n      return <span class=\"supfact\">v9</span>;\n  }\n  if (cacheline_size ||\n      (<span class=\"supfact\">v4</span> = strlen(<span class=\"supfact\">s1</span>),\n       strncasecmp(<span class=\"supfact\">s1</span>, String, <span class=\"supfact\">v4</span>)))\n    error((int)String, (int)<span class=\"supfact\">s1</span>, v3);\n  else\n    error((int)String, (int)String, v3);\n  return <span class=\"supfact\">v9</span>;\n}", "code_t": "int __cdecl setup_sort_list(perf_hpp_list *<span class=\"supfact\">list</span>,\n                            char *<span class=\"supfact\">str</span>,\n                            perf_evlist *<span class=\"supfact\">evlist</span>) {\n  const char *v3;\n  size_t v4;\n  bool <span class=\"supfact\">in_group</span>;\n  int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">level</span>;\n  int <span class=\"supfact\">next_level</span>;\n  char *<span class=\"supfact\">tok</span>;\n  char *<span class=\"supfact\">tmp</span>;\n  <span class=\"supfact\">ret</span> = Number;\n  <span class=\"supfact\">level</span> = Number;\n  <span class=\"supfact\">next_level</span> = Number;\n  <span class=\"supfact\">in_group</span> = Number;\n  while (Number) {\n    <span class=\"supfact\">tok</span> = <span class=\"supfact\">str</span>;\n    <span class=\"supfact\">tmp</span> = strpbrk(<span class=\"supfact\">str</span>, String);\n    if (<span class=\"supfact\">tmp</span>) {\n      if (<span class=\"supfact\">in_group</span>)\n        <span class=\"supfact\">next_level</span> = <span class=\"supfact\">level</span>;\n      else\n        <span class=\"supfact\">next_level</span> = <span class=\"supfact\">level</span> + Number;\n      if (*<span class=\"supfact\">tmp</span> == Number) {\n        <span class=\"supfact\">in_group</span> = Number;\n      } else if (*<span class=\"supfact\">tmp</span> == Number) {\n        <span class=\"supfact\">in_group</span> = Number;\n      }\n      *<span class=\"supfact\">tmp</span> = Number;\n      <span class=\"supfact\">str</span> = <span class=\"supfact\">tmp</span> + Number;\n    }\n    if (!*<span class=\"supfact\">tok</span>)\n      goto LABEL_19;\n    <span class=\"supfact\">ret</span> =\n        sort_dimension__add(<span class=\"supfact\">list</span>, <span class=\"supfact\">tok</span>,\n                            <span class=\"supfact\">evlist</span>, <span class=\"supfact\">level</span>);\n    if (<span class=\"supfact\">ret</span> == Number)\n      break;\n    if (<span class=\"supfact\">ret</span> == Number) {\n      error((int)String, (int)<span class=\"supfact\">tok</span>, v3);\n      return <span class=\"supfact\">ret</span>;\n    }\n  LABEL_19:\n    <span class=\"supfact\">level</span> = <span class=\"supfact\">next_level</span>;\n    if (!<span class=\"supfact\">tmp</span>)\n      return <span class=\"supfact\">ret</span>;\n  }\n  if (cacheline_size || (v4 = strlen(<span class=\"supfact\">tok</span>),\n                         strncasecmp(<span class=\"supfact\">tok</span>, String, v4)))\n    error((int)String, (int)<span class=\"supfact\">tok</span>, v3);\n  else\n    error((int)String, (int)String, v3);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "perf_hpp_list *", "pred_name": "list", "ref_name": "list", "ref_type": "perf_hpp_list *"}, {"name": "a2", "type": "char *", "pred_name": "str", "ref_name": "str", "ref_type": "char *"}, {"name": "a3", "type": "perf_evlist *", "pred_name": "evlist", "ref_name": "evlist", "ref_type": "perf_evlist *"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v8", "type": "bool", "pred_name": "__unk__", "ref_name": "in_group", "ref_type": "bool"}, {"name": "v9", "type": "int", "pred_name": "ret", "ref_name": "ret", "ref_type": "int"}, {"name": "v10", "type": "int", "pred_name": "__unk__", "ref_name": "level", "ref_type": "int"}, {"name": "v11", "type": "int", "pred_name": "__unk__", "ref_name": "next_level", "ref_type": "int"}, {"name": "s1", "type": "char *", "pred_name": "tok", "ref_name": "tok", "ref_type": "char *"}, {"name": "v13", "type": "char *", "pred_name": "tmp", "ref_name": "tmp", "ref_type": "char *"}], "body_in_train": true}, {"repo_owner": "GuneetAtwal", "repo_name": "g900f", "path": "GuneetAtwal/g900f/dbda33edcf2d298e76960cde7cdb1bc363008378d17b9821a59992f7e0b7c5e1", "path_in_repo": "GuneetAtwal/g900f/tools/perf/util/strbuf.o", "objdump": "000000000000016b <prefixcmp>:\n 16b:\t55                   \tpush   %rbp\n 16c:\t48 89 e5             \tmov    %rsp,%rbp\n 16f:\t48 83 ec 20          \tsub    $0x20,%rsp\n 173:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 177:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 17b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 182:\t00 00 \n 184:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 188:\t31 c0                \txor    %eax,%eax\n 18a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 18e:\t0f b6 00             \tmovzbl (%rax),%eax\n 191:\t84 c0                \ttest   %al,%al\n 193:\t75 07                \tjne    19c <prefixcmp+0x31>\n 195:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 19a:\teb 38                \tjmp    1d4 <prefixcmp+0x69>\n 19c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1a0:\t0f b6 10             \tmovzbl (%rax),%edx\n 1a3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 1a7:\t0f b6 00             \tmovzbl (%rax),%eax\n 1aa:\t38 c2                \tcmp    %al,%dl\n 1ac:\t74 1a                \tje     1c8 <prefixcmp+0x5d>\n 1ae:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 1b2:\t0f b6 00             \tmovzbl (%rax),%eax\n 1b5:\t0f b6 d0             \tmovzbl %al,%edx\n 1b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1bc:\t0f b6 00             \tmovzbl (%rax),%eax\n 1bf:\t0f b6 c0             \tmovzbl %al,%eax\n 1c2:\t29 c2                \tsub    %eax,%edx\n 1c4:\t89 d0                \tmov    %edx,%eax\n 1c6:\teb 0c                \tjmp    1d4 <prefixcmp+0x69>\n 1c8:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n 1cd:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n 1d2:\teb b6                \tjmp    18a <prefixcmp+0x1f>\n 1d4:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 1d8:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 1df:\t00 00 \n 1e1:\t74 05                \tje     1e8 <prefixcmp+0x7d>\n 1e3:\te8 00 00 00 00       \tcallq  1e8 <prefixcmp+0x7d>\n 1e8:\tc9                   \tleaveq \n 1e9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall prefixcmp(_BYTE *<span class=\"supfact\">a1</span>,\n                             _BYTE *<span class=\"supfact\">a2</span>) {\n  while (Number) {\n    if (!*<span class=\"supfact\">a2</span>)\n      return Number L;\n    if (*<span class=\"supfact\">a1</span> != *<span class=\"supfact\">a2</span>)\n      break;\n    ++<span class=\"supfact\">a1</span>;\n    ++<span class=\"supfact\">a2</span>;\n  }\n  return (unsigned __int8)*<span class=\"supfact\">a2</span> -\n         (unsigned int)(unsigned __int8)*<span class=\"supfact\">a1</span>;\n}", "code_t": "int __cdecl prefixcmp(const char *<span class=\"supfact\">str</span>,\n                      const char *<span class=\"supfact\">prefix</span>) {\n  while (Number) {\n    if (!*<span class=\"supfact\">prefix</span>)\n      return Number;\n    if (*<span class=\"supfact\">str</span> != *<span class=\"supfact\">prefix</span>)\n      break;\n    ++<span class=\"supfact\">str</span>;\n    ++<span class=\"supfact\">prefix</span>;\n  }\n  return *(unsigned __int8 *)<span class=\"supfact\">prefix</span> -\n         *(unsigned __int8 *)<span class=\"supfact\">str</span>;\n}", "var": [{"name": "a1", "type": "const char *", "pred_name": "str", "ref_name": "str", "ref_type": "const char *"}, {"name": "a2", "type": "const char *", "pred_name": "prefix", "ref_name": "prefix", "ref_type": "const char *"}], "body_in_train": true}, {"repo_owner": "wtfbbqhax", "repo_name": "thz", "path": "wtfbbqhax/thz/d2d35140037438b21d55845cb3db66bd0b0e58d09aa65915bde64b07487386c2", "path_in_repo": "wtfbbqhax/thz//build/release-linux-x86_64/client/jmemmgr.o", "objdump": "00000000000015e8 <free_pool>:\n    15e8:\t48 83 ec 58          \tsub    $0x58,%rsp\n    15ec:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    15f1:\t89 74 24 04          \tmov    %esi,0x4(%rsp)\n    15f5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    15fa:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    15fe:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n    1603:\t83 7c 24 04 00       \tcmpl   $0x0,0x4(%rsp)\n    1608:\t78 07                \tjs     1611 <free_pool+0x29>\n    160a:\t83 7c 24 04 01       \tcmpl   $0x1,0x4(%rsp)\n    160f:\t7e 33                \tjle    1644 <free_pool+0x5c>\n    1611:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1616:\t48 8b 00             \tmov    (%rax),%rax\n    1619:\tc7 40 28 0b 00 00 00 \tmovl   $0xb,0x28(%rax)\n    1620:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1625:\t48 8b 00             \tmov    (%rax),%rax\n    1628:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n    162c:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n    162f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1634:\t48 8b 00             \tmov    (%rax),%rax\n    1637:\t48 8b 10             \tmov    (%rax),%rdx\n    163a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    163f:\t48 89 c7             \tmov    %rax,%rdi\n    1642:\tff d2                \tcallq  *%rdx\n    1644:\t83 7c 24 04 01       \tcmpl   $0x1,0x4(%rsp)\n    1649:\t0f 85 dc 00 00 00    \tjne    172b <free_pool+0x143>\n    164f:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1654:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    165b:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    1660:\teb 43                \tjmp    16a5 <free_pool+0xbd>\n    1662:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1667:\t0f b6 40 26          \tmovzbl 0x26(%rax),%eax\n    166b:\t84 c0                \ttest   %al,%al\n    166d:\t74 28                \tje     1697 <free_pool+0xaf>\n    166f:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1674:\tc6 40 26 00          \tmovb   $0x0,0x26(%rax)\n    1678:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    167d:\t48 8b 50 40          \tmov    0x40(%rax),%rdx\n    1681:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1686:\t48 8d 48 30          \tlea    0x30(%rax),%rcx\n    168a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    168f:\t48 89 ce             \tmov    %rcx,%rsi\n    1692:\t48 89 c7             \tmov    %rax,%rdi\n    1695:\tff d2                \tcallq  *%rdx\n    1697:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    169c:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    16a0:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    16a5:\t48 83 7c 24 38 00    \tcmpq   $0x0,0x38(%rsp)\n    16ab:\t75 b5                \tjne    1662 <free_pool+0x7a>\n    16ad:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    16b2:\t48 c7 80 80 00 00 00 \tmovq   $0x0,0x80(%rax)\n    16b9:\t00 00 00 00 \n    16bd:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    16c2:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    16c9:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n    16ce:\teb 43                \tjmp    1713 <free_pool+0x12b>\n    16d0:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    16d5:\t0f b6 40 26          \tmovzbl 0x26(%rax),%eax\n    16d9:\t84 c0                \ttest   %al,%al\n    16db:\t74 28                \tje     1705 <free_pool+0x11d>\n    16dd:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    16e2:\tc6 40 26 00          \tmovb   $0x0,0x26(%rax)\n    16e6:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    16eb:\t48 8b 50 40          \tmov    0x40(%rax),%rdx\n    16ef:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    16f4:\t48 8d 48 30          \tlea    0x30(%rax),%rcx\n    16f8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    16fd:\t48 89 ce             \tmov    %rcx,%rsi\n    1700:\t48 89 c7             \tmov    %rax,%rdi\n    1703:\tff d2                \tcallq  *%rdx\n    1705:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    170a:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    170e:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n    1713:\t48 83 7c 24 30 00    \tcmpq   $0x0,0x30(%rsp)\n    1719:\t75 b5                \tjne    16d0 <free_pool+0xe8>\n    171b:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1720:\t48 c7 80 88 00 00 00 \tmovq   $0x0,0x88(%rax)\n    1727:\t00 00 00 00 \n    172b:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1730:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n    1734:\t48 63 d2             \tmovslq %edx,%rdx\n    1737:\t48 83 c2 0e          \tadd    $0xe,%rdx\n    173b:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n    173f:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n    1744:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1749:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n    174d:\t48 63 d2             \tmovslq %edx,%rdx\n    1750:\t48 83 c2 0e          \tadd    $0xe,%rdx\n    1754:\t48 c7 04 d0 00 00 00 \tmovq   $0x0,(%rax,%rdx,8)\n    175b:\t00 \n    175c:\teb 6f                \tjmp    17cd <free_pool+0x1e5>\n    175e:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    1763:\t48 8b 00             \tmov    (%rax),%rax\n    1766:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n    176b:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    1770:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    1774:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    1779:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    177d:\t48 01 d0             \tadd    %rdx,%rax\n    1780:\t48 83 c0 18          \tadd    $0x18,%rax\n    1784:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n    1789:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n    178e:\t48 8b 4c 24 40       \tmov    0x40(%rsp),%rcx\n    1793:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1798:\t48 89 ce             \tmov    %rcx,%rsi\n    179b:\t48 89 c7             \tmov    %rax,%rdi\n    179e:\te8 00 00 00 00       \tcallq  17a3 <free_pool+0x1bb>\n    17a3:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    17a8:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n    17af:\t48 2b 44 24 18       \tsub    0x18(%rsp),%rax\n    17b4:\t48 89 c2             \tmov    %rax,%rdx\n    17b7:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    17bc:\t48 89 90 90 00 00 00 \tmov    %rdx,0x90(%rax)\n    17c3:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    17c8:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n    17cd:\t48 83 7c 24 40 00    \tcmpq   $0x0,0x40(%rsp)\n    17d3:\t75 89                \tjne    175e <free_pool+0x176>\n    17d5:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    17da:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n    17de:\t48 63 d2             \tmovslq %edx,%rdx\n    17e1:\t48 83 c2 0c          \tadd    $0xc,%rdx\n    17e5:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n    17e9:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n    17ee:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    17f3:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n    17f7:\t48 63 d2             \tmovslq %edx,%rdx\n    17fa:\t48 83 c2 0c          \tadd    $0xc,%rdx\n    17fe:\t48 c7 04 d0 00 00 00 \tmovq   $0x0,(%rax,%rdx,8)\n    1805:\t00 \n    1806:\teb 6f                \tjmp    1877 <free_pool+0x28f>\n    1808:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n    180d:\t48 8b 00             \tmov    (%rax),%rax\n    1810:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n    1815:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n    181a:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    181e:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n    1823:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1827:\t48 01 d0             \tadd    %rdx,%rax\n    182a:\t48 83 c0 18          \tadd    $0x18,%rax\n    182e:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n    1833:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n    1838:\t48 8b 4c 24 48       \tmov    0x48(%rsp),%rcx\n    183d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1842:\t48 89 ce             \tmov    %rcx,%rsi\n    1845:\t48 89 c7             \tmov    %rax,%rdi\n    1848:\te8 00 00 00 00       \tcallq  184d <free_pool+0x265>\n    184d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1852:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n    1859:\t48 2b 44 24 18       \tsub    0x18(%rsp),%rax\n    185e:\t48 89 c2             \tmov    %rax,%rdx\n    1861:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    1866:\t48 89 90 90 00 00 00 \tmov    %rdx,0x90(%rax)\n    186d:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    1872:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n    1877:\t48 83 7c 24 48 00    \tcmpq   $0x0,0x48(%rsp)\n    187d:\t75 89                \tjne    1808 <free_pool+0x220>\n    187f:\t90                   \tnop\n    1880:\t90                   \tnop\n    1881:\t48 83 c4 58          \tadd    $0x58,%rsp\n    1885:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall free_pool(_QWORD *<span class=\"supfact\">a1</span>,\n                             int <span class=\"supfact\">a2</span>) {\n  _QWORD *<span class=\"supfact\">result</span>;\n  _QWORD *<span class=\"supfact\">v3</span>;\n  __int64 v4;\n  __int64 v5;\n  _QWORD *<span class=\"supfact\">v6</span>;\n  _QWORD *<span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">j</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  _QWORD *<span class=\"supfact\">v10</span>;\n  _QWORD *<span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v7</span> = (_QWORD *)<span class=\"supfact\">a1</span>[Number];\n  if (<span class=\"supfact\">a2</span> < Number || <span class=\"supfact\">a2</span> > Number) {\n    *(_DWORD *)(*<span class=\"supfact\">a1</span> + Number L) = Number;\n    *(_DWORD *)(*<span class=\"supfact\">a1</span> + Number L) = <span class=\"supfact\">a2</span>;\n    (*(void(__fastcall **)(_QWORD *)) * <span class=\"supfact\">a1</span>)(<span class=\"supfact\">a1</span>);\n  }\n  if (<span class=\"supfact\">a2</span> == Number) {\n    for (<span class=\"supfact\">i</span> = <span class=\"supfact\">v7</span>[Number]; <span class=\"supfact\">i</span>;\n         <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number)) {\n      if (*(_BYTE *)(<span class=\"supfact\">i</span> + Number)) {\n        *(_BYTE *)(<span class=\"supfact\">i</span> + Number) = Number;\n        (*(void(__fastcall **)(_QWORD *, __int64))(<span class=\"supfact\">i</span> + Number))(\n            <span class=\"supfact\">a1</span>, <span class=\"supfact\">i</span> + Number);\n      }\n    }\n    <span class=\"supfact\">v7</span>[Number] = Number L;\n    for (<span class=\"supfact\">j</span> = <span class=\"supfact\">v7</span>[Number]; <span class=\"supfact\">j</span>;\n         <span class=\"supfact\">j</span> = *(_QWORD *)(<span class=\"supfact\">j</span> + Number)) {\n      if (*(_BYTE *)(<span class=\"supfact\">j</span> + Number)) {\n        *(_BYTE *)(<span class=\"supfact\">j</span> + Number) = Number;\n        (*(void(__fastcall **)(_QWORD *, __int64))(<span class=\"supfact\">j</span> + Number))(\n            <span class=\"supfact\">a1</span>, <span class=\"supfact\">j</span> + Number);\n      }\n    }\n    <span class=\"supfact\">v7</span>[Number] = Number L;\n  }\n  <span class=\"supfact\">v10</span> =\n      (_QWORD *)<span class=\"supfact\">v7</span>[<span class=\"supfact\">a2</span> + Number];\n  <span class=\"supfact\">v7</span>[<span class=\"supfact\">a2</span> + Number] = Number L;\n  while (<span class=\"supfact\">v10</span>) {\n    <span class=\"supfact\">v3</span> = (_QWORD *)*<span class=\"supfact\">v10</span>;\n    v4 = <span class=\"supfact\">v10</span>[Number] + <span class=\"supfact\">v10</span>[Number] + Number L;\n    jpeg_free_large(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v10</span>, v4);\n    <span class=\"supfact\">v7</span>[Number] -= v4;\n    <span class=\"supfact\">v10</span> = <span class=\"supfact\">v3</span>;\n  }\n  <span class=\"supfact\">v11</span> =\n      (_QWORD *)<span class=\"supfact\">v7</span>[<span class=\"supfact\">a2</span> + Number];\n  <span class=\"supfact\">result</span> = <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span>[<span class=\"supfact\">a2</span> + Number] = Number L;\n  while (<span class=\"supfact\">v11</span>) {\n    <span class=\"supfact\">v6</span> = (_QWORD *)*<span class=\"supfact\">v11</span>;\n    v5 = <span class=\"supfact\">v11</span>[Number] + <span class=\"supfact\">v11</span>[Number] + Number L;\n    jpeg_free_small(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v11</span>, v5);\n    <span class=\"supfact\">v7</span>[Number] -= v5;\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">v6</span>;\n    <span class=\"supfact\">v11</span> = <span class=\"supfact\">v6</span>;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl free_pool(j_common_ptr <span class=\"supfact\">cinfo</span>,\n                       int <span class=\"supfact\">pool_id</span>) {\n  large_pool_ptr <span class=\"supfact\">next_lhdr_ptr</span>;\n  size_t space_freed;\n  size_t space_freeda;\n  small_pool_ptr <span class=\"supfact\">next_shdr_ptr</span>;\n  my_mem_ptr <span class=\"supfact\">mem</span>;\n  jvirt_barray_ptr <span class=\"supfact\">bptr</span>;\n  jvirt_sarray_ptr <span class=\"supfact\">sptr</span>;\n  large_pool_ptr <span class=\"supfact\">lhdr_ptr</span>;\n  small_pool_ptr <span class=\"supfact\">shdr_ptr</span>;\n  <span class=\"supfact\">mem</span> = (my_mem_ptr)<span class=\"supfact\">cinfo</span>-><span class=\"supfact\">mem</span>;\n  if (<span class=\"supfact\">pool_id</span> < Number || <span class=\"supfact\">pool_id</span> > Number) {\n    <span class=\"supfact\">cinfo</span>->err->msg_code = Number;\n    <span class=\"supfact\">cinfo</span>->err->msg_parm.i[Number] = <span class=\"supfact\">pool_id</span>;\n    <span class=\"supfact\">cinfo</span>->err->error_exit(<span class=\"supfact\">cinfo</span>);\n  }\n  if (<span class=\"supfact\">pool_id</span> == Number) {\n    for (<span class=\"supfact\">sptr</span> = <span class=\"supfact\">mem</span>->virt_sarray_list;\n         <span class=\"supfact\">sptr</span>;\n         <span class=\"supfact\">sptr</span> = <span class=\"supfact\">sptr</span>->next) {\n      if (<span class=\"supfact\">sptr</span>->b_s_open) {\n        <span class=\"supfact\">sptr</span>->b_s_open = Number;\n        <span class=\"supfact\">sptr</span>->b_s_info.close_backing_store(\n            <span class=\"supfact\">cinfo</span>, &<span class=\"supfact\">sptr</span>->b_s_info);\n      }\n    }\n    <span class=\"supfact\">mem</span>->virt_sarray_list = Number L;\n    for (<span class=\"supfact\">bptr</span> = <span class=\"supfact\">mem</span>->virt_barray_list;\n         <span class=\"supfact\">bptr</span>;\n         <span class=\"supfact\">bptr</span> = <span class=\"supfact\">bptr</span>->next) {\n      if (<span class=\"supfact\">bptr</span>->b_s_open) {\n        <span class=\"supfact\">bptr</span>->b_s_open = Number;\n        <span class=\"supfact\">bptr</span>->b_s_info.close_backing_store(\n            <span class=\"supfact\">cinfo</span>, &<span class=\"supfact\">bptr</span>->b_s_info);\n      }\n    }\n    <span class=\"supfact\">mem</span>->virt_barray_list = Number L;\n  }\n  <span class=\"supfact\">lhdr_ptr</span> =\n      <span class=\"supfact\">mem</span>->large_list[<span class=\"supfact\">pool_id</span>];\n  <span class=\"supfact\">mem</span>->large_list[<span class=\"supfact\">pool_id</span>] = Number L;\n  while (<span class=\"supfact\">lhdr_ptr</span>) {\n    <span class=\"supfact\">next_lhdr_ptr</span> =\n        (large_pool_ptr)<span class=\"supfact\">lhdr_ptr</span>->hdr.next;\n    space_freed = <span class=\"supfact\">lhdr_ptr</span>->hdr.bytes_used +\n                  <span class=\"supfact\">lhdr_ptr</span>->hdr.bytes_left + Number;\n    jpeg_free_large(<span class=\"supfact\">cinfo</span>, <span class=\"supfact\">lhdr_ptr</span>,\n                    space_freed);\n    <span class=\"supfact\">mem</span>->total_space_allocated -= space_freed;\n    <span class=\"supfact\">lhdr_ptr</span> = <span class=\"supfact\">next_lhdr_ptr</span>;\n  }\n  <span class=\"supfact\">shdr_ptr</span> =\n      <span class=\"supfact\">mem</span>->small_list[<span class=\"supfact\">pool_id</span>];\n  <span class=\"supfact\">mem</span>->small_list[<span class=\"supfact\">pool_id</span>] = Number L;\n  while (<span class=\"supfact\">shdr_ptr</span>) {\n    <span class=\"supfact\">next_shdr_ptr</span> = <span class=\"supfact\">shdr_ptr</span>->hdr.next;\n    space_freeda = <span class=\"supfact\">shdr_ptr</span>->hdr.bytes_used +\n                   <span class=\"supfact\">shdr_ptr</span>->hdr.bytes_left + Number;\n    jpeg_free_small(<span class=\"supfact\">cinfo</span>, <span class=\"supfact\">shdr_ptr</span>,\n                    space_freeda);\n    <span class=\"supfact\">mem</span>->total_space_allocated -= space_freeda;\n    <span class=\"supfact\">shdr_ptr</span> = <span class=\"supfact\">next_shdr_ptr</span>;\n  }\n}", "var": [{"name": "a1", "type": "j_common_ptr", "pred_name": "cinfo", "ref_name": "cinfo", "ref_type": "j_common_ptr"}, {"name": "a2", "type": "int", "pred_name": "pool_id", "ref_name": "pool_id", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v3", "type": "large_pool_ptr", "pred_name": "next_lhdr_ptr", "ref_name": "next_lhdr_ptr", "ref_type": "large_pool_ptr"}, {"name": "v6", "type": "small_pool_ptr", "pred_name": "next_shdr_ptr", "ref_name": "next_shdr_ptr", "ref_type": "small_pool_ptr"}, {"name": "v7", "type": "my_mem_ptr", "pred_name": "mem", "ref_name": "mem", "ref_type": "my_mem_ptr"}, {"name": "j", "type": "jvirt_barray_ptr", "pred_name": "bptr", "ref_name": "bptr", "ref_type": "jvirt_barray_ptr"}, {"name": "i", "type": "jvirt_sarray_ptr", "pred_name": "sptr", "ref_name": "sptr", "ref_type": "jvirt_sarray_ptr"}, {"name": "v10", "type": "large_pool_ptr", "pred_name": "lhdr_ptr", "ref_name": "lhdr_ptr", "ref_type": "large_pool_ptr"}, {"name": "v11", "type": "small_pool_ptr", "pred_name": "shdr_ptr", "ref_name": "shdr_ptr", "ref_type": "small_pool_ptr"}], "body_in_train": true}, {"repo_owner": "guoyuquan", "repo_name": "Graduate", "path": "guoyuquan/Graduate/daefb954c98792ba48842579e1dd306051c27dcbe10647405d224bae80fe3946", "path_in_repo": "guoyuquan/Graduate/Programming/C/Programming_in_Unix/apue.3e/exercises/goodexit", "objdump": "0000000000401100 <_start>:\n  401100:\t31 ed                \txor    %ebp,%ebp\n  401102:\t49 89 d1             \tmov    %rdx,%r9\n  401105:\t5e                   \tpop    %rsi\n  401106:\t48 89 e2             \tmov    %rsp,%rdx\n  401109:\t48 83 e4 f0          \tand    $0xfffffffffffffff0,%rsp\n  40110d:\t50                   \tpush   %rax\n  40110e:\t54                   \tpush   %rsp\n  40110f:\t49 c7 c0 c0 19 40 00 \tmov    $0x4019c0,%r8\n  401116:\t48 c7 c1 60 19 40 00 \tmov    $0x401960,%rcx\n  40111d:\t48 c7 c7 f2 12 40 00 \tmov    $0x4012f2,%rdi\n  401124:\tff 15 c6 2e 00 00    \tcallq  *0x2ec6(%rip)        # 403ff0 <__libc_start_main@GLIBC_2.2.5>\n  40112a:\tf4                   \thlt    \n  40112b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)", "code_s": "void __fastcall __noreturn start(__int64 <span class=\"supfact\">a1</span>,\n                                 __int64 <span class=\"supfact\">a2</span>,\n                                 void (*<span class=\"supfact\">a3</span>)(void)) {\n  __int64 <span class=\"supfact\">v3</span>;\n  int v4;\n  __int64 <span class=\"supfact\">v5</span>;\n  char *<span class=\"supfact\">retaddr</span>;\n  v4 = <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = <span class=\"supfact\">v3</span>;\n  _libc_start_main((int(__fastcall *)(int, char **, char **))main, v4,\n                   &<span class=\"supfact\">retaddr</span>, _libc_csu_init, _libc_csu_fini,\n                   <span class=\"supfact\">a3</span>, &<span class=\"supfact\">v5</span>);\n  __halt();\n}", "code_t": "void __fastcall __noreturn start(__int64 <span class=\"supfact\">a1</span>,\n                                 __int64 <span class=\"supfact\">a2</span>,\n                                 void (*<span class=\"supfact\">a3</span>)(void)) {\n  __int64 <span class=\"supfact\">v3</span>;\n  int v4;\n  __int64 <span class=\"supfact\">v5</span>;\n  char *<span class=\"supfact\">retaddr</span>;\n  v4 = <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = <span class=\"supfact\">v3</span>;\n  _libc_start_main((int(__fastcall *)(int, char **, char **))main, v4,\n                   &<span class=\"supfact\">retaddr</span>, _libc_csu_init, _libc_csu_fini,\n                   <span class=\"supfact\">a3</span>, &<span class=\"supfact\">v5</span>);\n  __halt();\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "a3", "type": "void (*)(void)", "pred_name": "a3", "ref_name": "a3", "ref_type": "void (*)(void)"}, {"name": "v3", "type": "__int64", "pred_name": "v3", "ref_name": "v3", "ref_type": "__int64"}, {"name": "v5", "type": "__int64", "pred_name": "v5", "ref_name": "v5", "ref_type": "__int64"}, {"name": "retaddr", "type": "char *", "pred_name": "retaddr", "ref_name": "retaddr", "ref_type": "char *"}], "body_in_train": true}, {"repo_owner": "2ebd05a8", "repo_name": "math_fun_lib", "path": "2ebd05a8/math_fun_lib/2ab18d590f70a9c937ce92660b8679b5580999e52d61bd200e1c2745303c6df6", "path_in_repo": "2ebd05a8/math_fun_lib/source/main.o", "objdump": "0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\tba 00 00 00 00       \tmov    $0x0,%edx\n   9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  13:\te8 00 00 00 00       \tcallq  18 <main+0x18>\n  18:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  1d:\t5d                   \tpop    %rbp\n  1e:\tc3                   \tretq   \n", "code_s": "int __cdecl main(int <span class=\"supfact\">argc</span>, const char **<span class=\"supfact\">argv</span>,\n                 const char **<span class=\"supfact\">envp</span>) {\n  ft_convert_base(&unk_26, &unk_23, &unk_21);\n  return Number;\n}", "code_t": "int __cdecl main(int <span class=\"supfact\">argc</span>, const char **<span class=\"supfact\">argv</span>,\n                 const char **<span class=\"supfact\">envp</span>) {\n  ft_convert_base(&unk_26, &unk_23, &unk_21);\n  return Number;\n}", "var": [{"name": "argc", "type": "int", "pred_name": "argc", "ref_name": "argc", "ref_type": "int"}, {"name": "argv", "type": "const char * *", "pred_name": "argv", "ref_name": "argv", "ref_type": "const char * *"}, {"name": "envp", "type": "const char * *", "pred_name": "envp", "ref_name": "envp", "ref_type": "const char * *"}], "body_in_train": false}, {"repo_owner": "wuqiong", "repo_name": "rt-n56u", "path": "wuqiong/rt-n56u/d1ae13ca6fc0d3123c8fb61edef821651db3deae3ae2d831897b9da7e6d65434", "path_in_repo": "wuqiong/rt-n56u/trunk/user/shared/shutils.o", "objdump": "0000000000000550 <change_passwd_unix>:\n     550:\t55                   \tpush   %rbp\n     551:\t48 89 e5             \tmov    %rsp,%rbp\n     554:\t48 83 ec 60          \tsub    $0x60,%rsp\n     558:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n     55c:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n     560:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 567 <change_passwd_unix+0x17>\n     567:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     56b:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n     570:\t74 0b                \tje     57d <change_passwd_unix+0x2d>\n     572:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     576:\t0f b6 00             \tmovzbl (%rax),%eax\n     579:\t84 c0                \ttest   %al,%al\n     57b:\t75 0b                \tjne    588 <change_passwd_unix+0x38>\n     57d:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 584 <change_passwd_unix+0x34>\n     584:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n     588:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n     58d:\t75 0b                \tjne    59a <change_passwd_unix+0x4a>\n     58f:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 596 <change_passwd_unix+0x46>\n     596:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n     59a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     59e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5a5 <change_passwd_unix+0x55>\n     5a5:\t48 89 c7             \tmov    %rax,%rdi\n     5a8:\te8 00 00 00 00       \tcallq  5ad <change_passwd_unix+0x5d>\n     5ad:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     5b1:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     5b6:\t74 2c                \tje     5e4 <change_passwd_unix+0x94>\n     5b8:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n     5bc:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n     5c0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     5c4:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5cb <change_passwd_unix+0x7b>\n     5cb:\t48 89 c7             \tmov    %rax,%rdi\n     5ce:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5d3:\te8 00 00 00 00       \tcallq  5d8 <change_passwd_unix+0x88>\n     5d8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     5dc:\t48 89 c7             \tmov    %rax,%rdi\n     5df:\te8 00 00 00 00       \tcallq  5e4 <change_passwd_unix+0x94>\n     5e4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     5e8:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     5ec:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5f3 <change_passwd_unix+0xa3>\n     5f3:\t48 89 c7             \tmov    %rax,%rdi\n     5f6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5fb:\te8 00 00 00 00       \tcallq  600 <change_passwd_unix+0xb0>\n     600:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     604:\t48 89 c7             \tmov    %rax,%rdi\n     607:\te8 00 00 00 00       \tcallq  60c <change_passwd_unix+0xbc>\n     60c:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     610:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     614:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 61b <change_passwd_unix+0xcb>\n     61b:\t48 89 c7             \tmov    %rax,%rdi\n     61e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     623:\te8 00 00 00 00       \tcallq  628 <change_passwd_unix+0xd8>\n     628:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     62c:\t48 89 c7             \tmov    %rax,%rdi\n     62f:\te8 00 00 00 00       \tcallq  634 <change_passwd_unix+0xe4>\n     634:\tbe a0 01 00 00       \tmov    $0x1a0,%esi\n     639:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 640 <change_passwd_unix+0xf0>\n     640:\te8 00 00 00 00       \tcallq  645 <change_passwd_unix+0xf5>\n     645:\t90                   \tnop\n     646:\tc9                   \tleaveq \n     647:\tc3                   \tretq   ", "code_s": "int __fastcall change_passwd_unix(const char *<span class=\"supfact\">a1</span>,\n                                  const char *<span class=\"supfact\">a2</span>) {\n  const char *<span class=\"supfact\">v3</span>;\n  const char *<span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">s</span>[Number];\n  FILE *<span class=\"supfact\">stream</span>;\n  char *<span class=\"supfact\">filename</span>;\n  <span class=\"supfact\">v4</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v3</span> = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">filename</span> = String;\n  if (!<span class=\"supfact\">a1</span> || !*<span class=\"supfact\">a1</span>)\n    <span class=\"supfact\">v4</span> = String;\n  if (!<span class=\"supfact\">a2</span>)\n    <span class=\"supfact\">v3</span> = String;\n  <span class=\"supfact\">stream</span> = fopen(<span class=\"supfact\">filename</span>, String);\n  if (<span class=\"supfact\">stream</span>) {\n    fprintf(<span class=\"supfact\">stream</span>, String, <span class=\"supfact\">v4</span>,\n            <span class=\"supfact\">v3</span>);\n    fclose(<span class=\"supfact\">stream</span>);\n  }\n  sprintf(<span class=\"supfact\">s</span>, String, <span class=\"supfact\">filename</span>);\n  system(<span class=\"supfact\">s</span>);\n  sprintf(<span class=\"supfact\">s</span>, String, <span class=\"supfact\">filename</span>);\n  system(<span class=\"supfact\">s</span>);\n  return chmod(String, Number);\n}", "code_t": "void __cdecl change_passwd_unix(char *<span class=\"supfact\">user</span>,\n                                char *<span class=\"supfact\">pass</span>) {\n  const char *<span class=\"supfact\">passa</span>;\n  const char *<span class=\"supfact\">usera</span>;\n  char <span class=\"supfact\">cmdbuf</span>[Number];\n  FILE *<span class=\"supfact\">fp</span>;\n  char *<span class=\"supfact\">tmpfile</span>;\n  <span class=\"supfact\">usera</span> = <span class=\"supfact\">user</span>;\n  <span class=\"supfact\">passa</span> = <span class=\"supfact\">pass</span>;\n  <span class=\"supfact\">tmpfile</span> = String;\n  if (!<span class=\"supfact\">user</span> || !*<span class=\"supfact\">user</span>)\n    <span class=\"supfact\">usera</span> = String;\n  if (!<span class=\"supfact\">pass</span>)\n    <span class=\"supfact\">passa</span> = String;\n  <span class=\"supfact\">fp</span> = fopen(<span class=\"supfact\">tmpfile</span>, String);\n  if (<span class=\"supfact\">fp</span>) {\n    fprintf(<span class=\"supfact\">fp</span>, String, <span class=\"supfact\">usera</span>,\n            <span class=\"supfact\">passa</span>);\n    fclose(<span class=\"supfact\">fp</span>);\n  }\n  sprintf(<span class=\"supfact\">cmdbuf</span>, String, <span class=\"supfact\">tmpfile</span>);\n  system(<span class=\"supfact\">cmdbuf</span>);\n  sprintf(<span class=\"supfact\">cmdbuf</span>, String, <span class=\"supfact\">tmpfile</span>);\n  system(<span class=\"supfact\">cmdbuf</span>);\n  chmod(String, Number);\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "__unk__", "ref_name": "user", "ref_type": "char *"}, {"name": "a2", "type": "char *", "pred_name": "__unk__", "ref_name": "pass", "ref_type": "char *"}, {"name": "v3", "type": "char *", "pred_name": "__unk__", "ref_name": "passa", "ref_type": "const char *"}, {"name": "v4", "type": "char *", "pred_name": "__unk__", "ref_name": "usera", "ref_type": "const char *"}, {"name": "s", "type": "char[64]", "pred_name": "__unk__", "ref_name": "cmdbuf", "ref_type": "char[64]"}, {"name": "stream", "type": "FILE *", "pred_name": "fp", "ref_name": "fp", "ref_type": "FILE *"}, {"name": "filename", "type": "char *", "pred_name": "__unk__", "ref_name": "tmpfile", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "madeye", "repo_name": "GRACE", "path": "madeye/GRACE/2b52396df41d81f75bd350cd77435124f7d98a04847dfd174df1386e073a433f", "path_in_repo": "madeye/GRACE/qemu-0.12.5/sh4-linux-user/thunk.o", "objdump": "000000000000048f <thunk_convert>:\n 48f:\t55                   \tpush   %rbp\n 490:\t48 89 e5             \tmov    %rsp,%rbp\n 493:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n 49a:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n 49e:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n 4a2:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n 4a9:\t89 8d 74 ff ff ff    \tmov    %ecx,-0x8c(%rbp)\n 4af:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 4b6:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n 4ba:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n 4c1:\t8b 00                \tmov    (%rax),%eax\n 4c3:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n 4c6:\t83 7d d4 0b          \tcmpl   $0xb,-0x2c(%rbp)\n 4ca:\t0f 87 bd 02 00 00    \tja     78d <thunk_convert+0x2fe>\n 4d0:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 4d3:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 4da:\t00 \n 4db:\tff e0                \tjmpq   *%rax\n 4dd:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 4e1:\t0f b6 10             \tmovzbl (%rax),%edx\n 4e4:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 4e8:\t88 10                \tmov    %dl,(%rax)\n 4ea:\te9 bb 02 00 00       \tjmpq   7aa <thunk_convert+0x31b>\n 4ef:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 4f3:\t0f b7 00             \tmovzwl (%rax),%eax\n 4f6:\t0f b7 c0             \tmovzwl %ax,%eax\n 4f9:\t89 c7                \tmov    %eax,%edi\n 4fb:\te8 00 fb ff ff       \tcallq  0 <tswap16>\n 500:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n 504:\t66 89 02             \tmov    %ax,(%rdx)\n 507:\te9 9e 02 00 00       \tjmpq   7aa <thunk_convert+0x31b>\n 50c:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 510:\t8b 00                \tmov    (%rax),%eax\n 512:\t89 c7                \tmov    %eax,%edi\n 514:\te8 f7 fa ff ff       \tcallq  10 <tswap32>\n 519:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n 51d:\t89 02                \tmov    %eax,(%rdx)\n 51f:\te9 86 02 00 00       \tjmpq   7aa <thunk_convert+0x31b>\n 524:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 528:\t48 8b 00             \tmov    (%rax),%rax\n 52b:\t48 89 c7             \tmov    %rax,%rdi\n 52e:\te8 e9 fa ff ff       \tcallq  1c <tswap64>\n 533:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n 537:\t48 89 02             \tmov    %rax,(%rdx)\n 53a:\te9 6b 02 00 00       \tjmpq   7aa <thunk_convert+0x31b>\n 53f:\t83 bd 74 ff ff ff 00 \tcmpl   $0x0,-0x8c(%rbp)\n 546:\t74 3d                \tje     585 <thunk_convert+0xf6>\n 548:\t83 7d d4 04          \tcmpl   $0x4,-0x2c(%rbp)\n 54c:\t75 1c                \tjne    56a <thunk_convert+0xdb>\n 54e:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 552:\t8b 00                \tmov    (%rax),%eax\n 554:\t89 c7                \tmov    %eax,%edi\n 556:\te8 b5 fa ff ff       \tcallq  10 <tswap32>\n 55b:\t48 63 d0             \tmovslq %eax,%rdx\n 55e:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 562:\t48 89 10             \tmov    %rdx,(%rax)\n 565:\te9 40 02 00 00       \tjmpq   7aa <thunk_convert+0x31b>\n 56a:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 56e:\t8b 00                \tmov    (%rax),%eax\n 570:\t89 c7                \tmov    %eax,%edi\n 572:\te8 99 fa ff ff       \tcallq  10 <tswap32>\n 577:\t89 c2                \tmov    %eax,%edx\n 579:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 57d:\t48 89 10             \tmov    %rdx,(%rax)\n 580:\te9 25 02 00 00       \tjmpq   7aa <thunk_convert+0x31b>\n 585:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 589:\t48 8b 00             \tmov    (%rax),%rax\n 58c:\t89 c7                \tmov    %eax,%edi\n 58e:\te8 7d fa ff ff       \tcallq  10 <tswap32>\n 593:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n 597:\t89 02                \tmov    %eax,(%rdx)\n 599:\te9 0c 02 00 00       \tjmpq   7aa <thunk_convert+0x31b>\n 59e:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 5a5:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n 5a9:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n 5b0:\t8b 00                \tmov    (%rax),%eax\n 5b2:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n 5b5:\t8b 95 74 ff ff ff    \tmov    -0x8c(%rbp),%edx\n 5bb:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 5c2:\t89 d6                \tmov    %edx,%esi\n 5c4:\t48 89 c7             \tmov    %rax,%rdi\n 5c7:\te8 5e fa ff ff       \tcallq  2a <thunk_type_size>\n 5cc:\t89 45 a0             \tmov    %eax,-0x60(%rbp)\n 5cf:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 5d4:\t2b 85 74 ff ff ff    \tsub    -0x8c(%rbp),%eax\n 5da:\t89 c2                \tmov    %eax,%edx\n 5dc:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 5e3:\t89 d6                \tmov    %edx,%esi\n 5e5:\t48 89 c7             \tmov    %rax,%rdi\n 5e8:\te8 3d fa ff ff       \tcallq  2a <thunk_type_size>\n 5ed:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n 5f0:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 5f4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 5f8:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 5fc:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 600:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 607:\teb 33                \tjmp    63c <thunk_convert+0x1ad>\n 609:\t8b 8d 74 ff ff ff    \tmov    -0x8c(%rbp),%ecx\n 60f:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n 616:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n 61a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 61e:\t48 89 c7             \tmov    %rax,%rdi\n 621:\te8 00 00 00 00       \tcallq  626 <thunk_convert+0x197>\n 626:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n 629:\t48 98                \tcltq   \n 62b:\t48 01 45 e8          \tadd    %rax,-0x18(%rbp)\n 62f:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n 632:\t48 98                \tcltq   \n 634:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n 638:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 63c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 63f:\t3b 45 a4             \tcmp    -0x5c(%rbp),%eax\n 642:\t7c c5                \tjl     609 <thunk_convert+0x17a>\n 644:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 64b:\t48 89 c7             \tmov    %rax,%rdi\n 64e:\te8 57 fb ff ff       \tcallq  1aa <thunk_type_next>\n 653:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n 65a:\te9 4b 01 00 00       \tjmpq   7aa <thunk_convert+0x31b>\n 65f:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 666:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n 66a:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n 671:\t8b 00                \tmov    (%rax),%eax\n 673:\t89 c2                \tmov    %eax,%edx\n 675:\t48 89 d0             \tmov    %rdx,%rax\n 678:\t48 c1 e0 03          \tshl    $0x3,%rax\n 67c:\t48 01 d0             \tadd    %rdx,%rax\n 67f:\t48 c1 e0 03          \tshl    $0x3,%rax\n 683:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 689:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 68d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 691:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n 695:\t48 85 c0             \ttest   %rax,%rax\n 698:\t74 2a                \tje     6c4 <thunk_convert+0x235>\n 69a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 69e:\t8b 95 74 ff ff ff    \tmov    -0x8c(%rbp),%edx\n 6a4:\t48 63 d2             \tmovslq %edx,%rdx\n 6a7:\t48 83 c2 04          \tadd    $0x4,%rdx\n 6ab:\t48 8b 0c d0          \tmov    (%rax,%rdx,8),%rcx\n 6af:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n 6b3:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 6b7:\t48 89 d6             \tmov    %rdx,%rsi\n 6ba:\t48 89 c7             \tmov    %rax,%rdi\n 6bd:\tff d1                \tcallq  *%rcx\n 6bf:\te9 e6 00 00 00       \tjmpq   7aa <thunk_convert+0x31b>\n 6c4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 6c8:\t48 8b 00             \tmov    (%rax),%rax\n 6cb:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 6cf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 6d3:\t8b 95 74 ff ff ff    \tmov    -0x8c(%rbp),%edx\n 6d9:\t48 63 d2             \tmovslq %edx,%rdx\n 6dc:\t48 83 c2 02          \tadd    $0x2,%rdx\n 6e0:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n 6e4:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n 6e8:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 6ed:\t2b 85 74 ff ff ff    \tsub    -0x8c(%rbp),%eax\n 6f3:\t89 c2                \tmov    %eax,%edx\n 6f5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 6f9:\t48 63 d2             \tmovslq %edx,%rdx\n 6fc:\t48 83 c2 02          \tadd    $0x2,%rdx\n 700:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n 704:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n 708:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 70c:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n 710:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 714:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n 718:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n 71f:\teb 5e                \tjmp    77f <thunk_convert+0x2f0>\n 721:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n 724:\t48 98                \tcltq   \n 726:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 72d:\t00 \n 72e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 732:\t48 01 d0             \tadd    %rdx,%rax\n 735:\t8b 00                \tmov    (%rax),%eax\n 737:\t48 63 d0             \tmovslq %eax,%rdx\n 73a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 73e:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n 742:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n 745:\t48 98                \tcltq   \n 747:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 74e:\t00 \n 74f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 753:\t48 01 d0             \tadd    %rdx,%rax\n 756:\t8b 00                \tmov    (%rax),%eax\n 758:\t48 63 d0             \tmovslq %eax,%rdx\n 75b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 75f:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n 763:\t8b 95 74 ff ff ff    \tmov    -0x8c(%rbp),%edx\n 769:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 76d:\t89 d1                \tmov    %edx,%ecx\n 76f:\t48 89 c2             \tmov    %rax,%rdx\n 772:\te8 00 00 00 00       \tcallq  777 <thunk_convert+0x2e8>\n 777:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 77b:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n 77f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 783:\t8b 40 08             \tmov    0x8(%rax),%eax\n 786:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n 789:\t7c 96                \tjl     721 <thunk_convert+0x292>\n 78b:\teb 1d                \tjmp    7aa <thunk_convert+0x31b>\n 78d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 794 <thunk_convert+0x305>\n 794:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n 797:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 79c:\t48 89 c7             \tmov    %rax,%rdi\n 79f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 7a4:\te8 00 00 00 00       \tcallq  7a9 <thunk_convert+0x31a>\n 7a9:\t90                   \tnop\n 7aa:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 7b1:\tc9                   \tleaveq \n 7b2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall thunk_convert(_BYTE *<span class=\"supfact\">a1</span>,\n                                 unsigned __int16 *<span class=\"supfact\">a2</span>,\n                                 _DWORD *<span class=\"supfact\">a3</span>,\n                                 unsigned int <span class=\"supfact\">a4</span>) {\n  __int64 v4;\n  __int64 v7;\n  int *v8;\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  char *<span class=\"supfact\">v14</span>;\n  unsigned int <span class=\"supfact\">v15</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">j</span>;\n  _BYTE *<span class=\"supfact\">v18</span>;\n  unsigned __int16 *<span class=\"supfact\">v19</span>;\n  int <span class=\"supfact\">i</span>;\n  v7 = (__int64)(<span class=\"supfact\">a3</span> + Number);\n  <span class=\"supfact\">v15</span> = *<span class=\"supfact\">a3</span>;\n  switch (*<span class=\"supfact\">a3</span>) {\n  case Number:\n    *<span class=\"supfact\">a1</span> = *(_BYTE *)<span class=\"supfact\">a2</span>;\n    break;\n  case Number:\n    *(_WORD *)<span class=\"supfact\">a1</span> = tswap16(*<span class=\"supfact\">a2</span>);\n    break;\n  case Number:\n    *(_DWORD *)<span class=\"supfact\">a1</span> = tswap32(*(_DWORD *)<span class=\"supfact\">a2</span>);\n    break;\n  case Number:\n  case Number:\n  case Number:\n    if (<span class=\"supfact\">a4</span>) {\n      if (<span class=\"supfact\">v15</span> == Number)\n        v4 = (int)tswap32(*(_DWORD *)<span class=\"supfact\">a2</span>);\n      else\n        v4 = (unsigned int)tswap32(*(_DWORD *)<span class=\"supfact\">a2</span>);\n      *(_QWORD *)<span class=\"supfact\">a1</span> = v4;\n    } else {\n      *(_DWORD *)<span class=\"supfact\">a1</span> = tswap32(*(_QWORD *)<span class=\"supfact\">a2</span>);\n    }\n    break;\n  case Number:\n  case Number:\n    *(_QWORD *)<span class=\"supfact\">a1</span> = tswap64(*(_QWORD *)<span class=\"supfact\">a2</span>);\n    break;\n  case Number:\n    v8 = <span class=\"supfact\">a3</span> + Number;\n    <span class=\"supfact\">v11</span> = <span class=\"supfact\">a3</span>[Number];\n    <span class=\"supfact\">v10</span> =\n        thunk_type_size(<span class=\"supfact\">a3</span> + Number, <span class=\"supfact\">a4</span>);\n    <span class=\"supfact\">v9</span> = thunk_type_size(v8, Number - <span class=\"supfact\">a4</span>);\n    <span class=\"supfact\">v18</span> = <span class=\"supfact\">a1</span>;\n    <span class=\"supfact\">v19</span> = <span class=\"supfact\">a2</span>;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v11</span>;\n         ++<span class=\"supfact\">i</span>) {\n      thunk_convert(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v19</span>, v8,\n                    <span class=\"supfact\">a4</span>);\n      <span class=\"supfact\">v18</span> += <span class=\"supfact\">v10</span>;\n      <span class=\"supfact\">v19</span> = (unsigned __int16 *)((char *)<span class=\"supfact\">v19</span> +\n                                                 <span class=\"supfact\">v9</span>);\n    }\n    v7 = thunk_type_next(v8);\n    break;\n  case Number:\n    v7 = (__int64)(<span class=\"supfact\">a3</span> + Number);\n    <span class=\"supfact\">v14</span> = &struct_entries[Number * <span class=\"supfact\">a3</span>[Number]];\n    if (*((_QWORD *)<span class=\"supfact\">v14</span> + Number)) {\n      (*(void(__fastcall **)(_BYTE *, unsigned __int16 *)) &\n       <span class=\"supfact\">v14</span>[Number * <span class=\"supfact\">a4</span> + Number])(\n          <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n    } else {\n      <span class=\"supfact\">v16</span> = *(_QWORD *)<span class=\"supfact\">v14</span>;\n      <span class=\"supfact\">v13</span> =\n          *(_QWORD *)&<span class=\"supfact\">v14</span>[Number * <span class=\"supfact\">a4</span> + Number];\n      <span class=\"supfact\">v12</span> = *(\n          _QWORD *)&<span class=\"supfact\">v14</span>[Number * (Number - <span class=\"supfact\">a4</span>) +\n                                        Number];\n      for (<span class=\"supfact\">j</span> = Number;\n           <span class=\"supfact\">j</span> < *((_DWORD *)<span class=\"supfact\">v14</span> + Number);\n           ++<span class=\"supfact\">j</span>)\n        <span class=\"supfact\">v16</span> = thunk_convert(\n            &<span class=\"supfact\">a1</span>[*(int *)(Number L * <span class=\"supfact\">j</span> +\n                                         <span class=\"supfact\">v13</span>)],\n            (char *)<span class=\"supfact\">a2</span> +\n                *(int *)(Number L * <span class=\"supfact\">j</span> + <span class=\"supfact\">v12</span>),\n            <span class=\"supfact\">v16</span>, <span class=\"supfact\">a4</span>);\n    }\n    break;\n  default:\n    fprintf(stderr, String, <span class=\"supfact\">v15</span>);\n    break;\n  }\n  return v7;\n}", "code_t": "const argtype_0 *__cdecl thunk_convert(\n    void *<span class=\"supfact\">dst</span>, const void *<span class=\"supfact\">src</span>,\n    const argtype_0 *<span class=\"supfact\">type_ptr</span>, int <span class=\"supfact\">to_host</span>) {\n  __int64 v4;\n  const argtype_0 *type_ptra;\n  const argtype_0 *type_ptrb;\n  int <span class=\"supfact\">src_size</span>;\n  int <span class=\"supfact\">dst_size</span>;\n  int <span class=\"supfact\">array_length</span>;\n  const int *<span class=\"supfact\">src_offsets</span>;\n  const int *<span class=\"supfact\">dst_offsets</span>;\n  const StructEntry *<span class=\"supfact\">se</span>;\n  unsigned int <span class=\"supfact\">type</span>;\n  const argtype_0 *<span class=\"supfact\">field_types</span>;\n  int <span class=\"supfact\">i_0</span>;\n  uint8_t *<span class=\"supfact\">d</span>;\n  const uint8_t *<span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">i</span>;\n  type_ptra = <span class=\"supfact\">type_ptr</span> + Number;\n  <span class=\"supfact\">type</span> = *<span class=\"supfact\">type_ptr</span>;\n  switch (*<span class=\"supfact\">type_ptr</span>) {\n  case TYPE_CHAR:\n    *(_BYTE *)<span class=\"supfact\">dst</span> = *(_BYTE *)<span class=\"supfact\">src</span>;\n    break;\n  case TYPE_SHORT:\n    *(_WORD *)<span class=\"supfact\">dst</span> = tswap16(*(_WORD *)<span class=\"supfact\">src</span>);\n    break;\n  case TYPE_INT:\n    *(_DWORD *)<span class=\"supfact\">dst</span> = tswap32(*(_DWORD *)<span class=\"supfact\">src</span>);\n    break;\n  case TYPE_LONG:\n  case TYPE_ULONG:\n  case TYPE_PTRVOID:\n    if (<span class=\"supfact\">to_host</span>) {\n      if (<span class=\"supfact\">type</span> == Number)\n        v4 = (int)tswap32(*(_DWORD *)<span class=\"supfact\">src</span>);\n      else\n        v4 = tswap32(*(_DWORD *)<span class=\"supfact\">src</span>);\n      *(_QWORD *)<span class=\"supfact\">dst</span> = v4;\n    } else {\n      *(_DWORD *)<span class=\"supfact\">dst</span> = tswap32(*(_QWORD *)<span class=\"supfact\">src</span>);\n    }\n    break;\n  case TYPE_LONGLONG:\n  case TYPE_ULONGLONG:\n    *(_QWORD *)<span class=\"supfact\">dst</span> = tswap64(*(_QWORD *)<span class=\"supfact\">src</span>);\n    break;\n  case TYPE_ARRAY:\n    type_ptrb = <span class=\"supfact\">type_ptr</span> + Number;\n    <span class=\"supfact\">array_length</span> =\n        *((_DWORD *)<span class=\"supfact\">type_ptr</span> + Number);\n    <span class=\"supfact\">dst_size</span> = thunk_type_size(\n        <span class=\"supfact\">type_ptr</span> + Number, <span class=\"supfact\">to_host</span>);\n    <span class=\"supfact\">src_size</span> =\n        thunk_type_size(type_ptrb, Number - <span class=\"supfact\">to_host</span>);\n    <span class=\"supfact\">d</span> = (uint8_t *)<span class=\"supfact\">dst</span>;\n    <span class=\"supfact\">s</span> = (const uint8_t *)<span class=\"supfact\">src</span>;\n    for (<span class=\"supfact\">i</span> = Number;\n         <span class=\"supfact\">i</span> < <span class=\"supfact\">array_length</span>;\n         ++<span class=\"supfact\">i</span>) {\n      thunk_convert(<span class=\"supfact\">d</span>, <span class=\"supfact\">s</span>, type_ptrb,\n                    <span class=\"supfact\">to_host</span>);\n      <span class=\"supfact\">d</span> += <span class=\"supfact\">dst_size</span>;\n      <span class=\"supfact\">s</span> += <span class=\"supfact\">src_size</span>;\n    }\n    type_ptra = thunk_type_next(type_ptrb);\n    break;\n  case TYPE_STRUCT:\n    type_ptra = <span class=\"supfact\">type_ptr</span> + Number;\n    <span class=\"supfact\">se</span> = (const StructEntry *)&struct_entries\n        [Number * *((unsigned int *)<span class=\"supfact\">type_ptr</span> + Number)];\n    if (<span class=\"supfact\">se</span>->convert[Number]) {\n      <span class=\"supfact\">se</span>->convert[<span class=\"supfact\">to_host</span>](<span class=\"supfact\">dst</span>,\n                                                           <span class=\"supfact\">src</span>);\n    } else {\n      <span class=\"supfact\">field_types</span> =\n          <span class=\"supfact\">se</span>-><span class=\"supfact\">field_types</span>;\n      <span class=\"supfact\">dst_offsets</span> =\n          <span class=\"supfact\">se</span>->field_offsets[<span class=\"supfact\">to_host</span>];\n      <span class=\"supfact\">src_offsets</span> =\n          <span class=\"supfact\">se</span>->field_offsets[Number - <span class=\"supfact\">to_host</span>];\n      for (<span class=\"supfact\">i_0</span> = Number;\n           <span class=\"supfact\">i_0</span> < <span class=\"supfact\">se</span>->nb_fields;\n           ++<span class=\"supfact\">i_0</span>)\n        <span class=\"supfact\">field_types</span> =\n            thunk_convert((char *)<span class=\"supfact\">dst</span> +\n                              <span class=\"supfact\">dst_offsets</span>[<span class=\"supfact\">i_0</span>],\n                          (char *)<span class=\"supfact\">src</span> +\n                              <span class=\"supfact\">src_offsets</span>[<span class=\"supfact\">i_0</span>],\n                          <span class=\"supfact\">field_types</span>, <span class=\"supfact\">to_host</span>);\n    }\n    break;\n  default:\n    fprintf(stderr, String, <span class=\"supfact\">type</span>);\n    break;\n  }\n  return type_ptra;\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "dst", "ref_name": "dst", "ref_type": "void *"}, {"name": "a2", "type": "const void *", "pred_name": "src", "ref_name": "src", "ref_type": "const void *"}, {"name": "a3", "type": "const argtype_0 *", "pred_name": "type_ptr", "ref_name": "type_ptr", "ref_type": "const argtype_0 *"}, {"name": "a4", "type": "int", "pred_name": "to_host", "ref_name": "to_host", "ref_type": "int"}, {"name": "v9", "type": "int", "pred_name": "src_size", "ref_name": "src_size", "ref_type": "int"}, {"name": "v10", "type": "int", "pred_name": "dst_size", "ref_name": "dst_size", "ref_type": "int"}, {"name": "v11", "type": "int", "pred_name": "array_length", "ref_name": "array_length", "ref_type": "int"}, {"name": "v12", "type": "const int *", "pred_name": "src_offsets", "ref_name": "src_offsets", "ref_type": "const int *"}, {"name": "v13", "type": "const int *", "pred_name": "dst_offsets", "ref_name": "dst_offsets", "ref_type": "const int *"}, {"name": "v14", "type": "const StructEntry *", "pred_name": "se", "ref_name": "se", "ref_type": "const StructEntry *"}, {"name": "v15", "type": "unsigned int", "pred_name": "flags", "ref_name": "type", "ref_type": "unsigned int"}, {"name": "v16", "type": "const argtype_0 *", "pred_name": "field_types", "ref_name": "field_types", "ref_type": "const argtype_0 *"}, {"name": "j", "type": "int", "pred_name": "i_0", "ref_name": "i_0", "ref_type": "int"}, {"name": "v18", "type": "uint8_t *", "pred_name": "d", "ref_name": "d", "ref_type": "uint8_t *"}, {"name": "v19", "type": "const uint8_t *", "pred_name": "s", "ref_name": "s", "ref_type": "const uint8_t *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "anthony-kolesov", "repo_name": "arc_ltp", "path": "anthony-kolesov/arc_ltp/2d0a411b4fb42a331e39b8d1459bff8973451e76889d20e6159e6ddf7a644212", "path_in_repo": "anthony-kolesov/arc_ltp/testcases/open_posix_testsuite/conformance/interfaces/pthread_attr_getstack/1-1.run-test", "objdump": "0000000000401180 <__do_global_dtors_aux>:\n  401180:\t80 3d f1 2e 00 00 00 \tcmpb   $0x0,0x2ef1(%rip)        # 404078 <__TMC_END__>\n  401187:\t75 17                \tjne    4011a0 <__do_global_dtors_aux+0x20>\n  401189:\t55                   \tpush   %rbp\n  40118a:\t48 89 e5             \tmov    %rsp,%rbp\n  40118d:\te8 7e ff ff ff       \tcallq  401110 <deregister_tm_clones>\n  401192:\tc6 05 df 2e 00 00 01 \tmovb   $0x1,0x2edf(%rip)        # 404078 <__TMC_END__>\n  401199:\t5d                   \tpop    %rbp\n  40119a:\tc3                   \tretq   \n  40119b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n  4011a0:\tc3                   \tretq   \n  4011a1:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n  4011a8:\t00 00 00 00 \n  4011ac:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "char *_do_global_dtors_aux() {\n  char *<span class=\"supfact\">result</span>;\n  if (!_bss_start) {\n    <span class=\"supfact\">result</span> = deregister_tm_clones();\n    _bss_start = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "char *_do_global_dtors_aux() {\n  char *<span class=\"supfact\">result</span>;\n  if (!_bss_start) {\n    <span class=\"supfact\">result</span> = deregister_tm_clones();\n    _bss_start = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "result", "type": "char *", "pred_name": "result", "ref_name": "result", "ref_type": "char *"}], "body_in_train": true}, {"repo_owner": "xorgy", "repo_name": "graphicsmagick", "path": "xorgy/graphicsmagick/47393fe6465ed89af39307e89df5eca47f26a2a127fda5f01818d178760cf17a", "path_in_repo": "xorgy/graphicsmagick/bzlib/bzip2", "objdump": "", "code_s": "void *malloc(size_t <span class=\"supfact\">size</span>) {\n  return malloc(<span class=\"supfact\">size</span>);\n}", "code_t": "void *malloc(size_t <span class=\"supfact\">size</span>) {\n  return malloc(<span class=\"supfact\">size</span>);\n}", "var": [{"name": "size", "type": "size_t", "pred_name": "size", "ref_name": "size", "ref_type": "size_t"}], "body_in_train": true}, {"repo_owner": "krzyyysiek", "repo_name": "TIN", "path": "krzyyysiek/TIN/76626fdd1a3131cd07de29701c747135af6818eaa1f8fea9a1dda7f1af10ad66", "path_in_repo": "krzyyysiek/TIN/unp/nonblock/tcpcli04", "objdump": "", "code_s": "ssize_t sendmsg(int <span class=\"supfact\">fd</span>,\n                const struct msghdr *<span class=\"supfact\">message</span>,\n                int <span class=\"supfact\">flags</span>) {\n  return sendmsg(<span class=\"supfact\">fd</span>, <span class=\"supfact\">message</span>,\n                 <span class=\"supfact\">flags</span>);\n}", "code_t": "ssize_t sendmsg(int <span class=\"supfact\">fd</span>,\n                const struct msghdr *<span class=\"supfact\">message</span>,\n                int <span class=\"supfact\">flags</span>) {\n  return sendmsg(<span class=\"supfact\">fd</span>, <span class=\"supfact\">message</span>,\n                 <span class=\"supfact\">flags</span>);\n}", "var": [{"name": "fd", "type": "int", "pred_name": "fd", "ref_name": "fd", "ref_type": "int"}, {"name": "message", "type": "const struct msghdr *", "pred_name": "message", "ref_name": "message", "ref_type": "const struct msghdr *"}, {"name": "flags", "type": "int", "pred_name": "flags", "ref_name": "flags", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "maxpmaxp", "repo_name": "ssvpn-macos", "path": "maxpmaxp/ssvpn-macos/865706db79d54953b41fe250ae82d1bfe7153065df5b76fad3e9db8fcc1546cc", "path_in_repo": "maxpmaxp/ssvpn-macos/tunnelblick/third_party/openssl-1.0.1c/crypto/objects/obj_xref.o", "objdump": "0000000000000000 <sig_cmp>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   8:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n   c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  10:\t8b 10                \tmov    (%rax),%edx\n  12:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  16:\t8b 00                \tmov    (%rax),%eax\n  18:\t29 c2                \tsub    %eax,%edx\n  1a:\t89 d0                \tmov    %edx,%eax\n  1c:\t5d                   \tpop    %rbp\n  1d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sig_cmp(_DWORD *<span class=\"supfact\">a1</span>,\n                           _DWORD *<span class=\"supfact\">a2</span>) {\n  return (unsigned int)(*<span class=\"supfact\">a1</span> - *<span class=\"supfact\">a2</span>);\n}", "code_t": "int __cdecl sig_cmp(const nid_triple *<span class=\"supfact\">a</span>,\n                    const nid_triple *<span class=\"supfact\">b</span>) {\n  return <span class=\"supfact\">a</span>->sign_id - <span class=\"supfact\">b</span>->sign_id;\n}", "var": [{"name": "a1", "type": "const nid_triple *", "pred_name": "a", "ref_name": "a", "ref_type": "const nid_triple *"}, {"name": "a2", "type": "const nid_triple *", "pred_name": "b", "ref_name": "b", "ref_type": "const nid_triple *"}], "body_in_train": true}, {"repo_owner": "kanikasaini", "repo_name": "kernel_system_call", "path": "kanikasaini/kernel_system_call/94b84053de75886c1dd70a3326a1f62bdbecf24eb8df61fd10b6f3de1644db6d", "path_in_repo": "kanikasaini/kernel_system_call/OSassgn1/tools/perf/util/session.o", "objdump": "00000000000011ec <perf_tool__fill_defaults>:\n    11ec:\t55                   \tpush   %rbp\n    11ed:\t48 89 e5             \tmov    %rsp,%rbp\n    11f0:\t48 83 ec 20          \tsub    $0x20,%rsp\n    11f4:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    11f8:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    11ff:\t00 00 \n    1201:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1205:\t31 c0                \txor    %eax,%eax\n    1207:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    120b:\t48 8b 00             \tmov    (%rax),%rax\n    120e:\t48 85 c0             \ttest   %rax,%rax\n    1211:\t75 0b                \tjne    121e <perf_tool__fill_defaults+0x32>\n    1213:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1217:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    121e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1222:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1226:\t48 85 c0             \ttest   %rax,%rax\n    1229:\t75 0c                \tjne    1237 <perf_tool__fill_defaults+0x4b>\n    122b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    122f:\t48 c7 40 10 00 00 00 \tmovq   $0x0,0x10(%rax)\n    1236:\t00 \n    1237:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    123b:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    123f:\t48 85 c0             \ttest   %rax,%rax\n    1242:\t75 0c                \tjne    1250 <perf_tool__fill_defaults+0x64>\n    1244:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1248:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n    124f:\t00 \n    1250:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1254:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1258:\t48 85 c0             \ttest   %rax,%rax\n    125b:\t75 0c                \tjne    1269 <perf_tool__fill_defaults+0x7d>\n    125d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1261:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n    1268:\t00 \n    1269:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    126d:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    1271:\t48 85 c0             \ttest   %rax,%rax\n    1274:\t75 0c                \tjne    1282 <perf_tool__fill_defaults+0x96>\n    1276:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    127a:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n    1281:\t00 \n    1282:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1286:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    128a:\t48 85 c0             \ttest   %rax,%rax\n    128d:\t75 0c                \tjne    129b <perf_tool__fill_defaults+0xaf>\n    128f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1293:\t48 c7 40 30 00 00 00 \tmovq   $0x0,0x30(%rax)\n    129a:\t00 \n    129b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    129f:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    12a3:\t48 85 c0             \ttest   %rax,%rax\n    12a6:\t75 0c                \tjne    12b4 <perf_tool__fill_defaults+0xc8>\n    12a8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12ac:\t48 c7 40 38 00 00 00 \tmovq   $0x0,0x38(%rax)\n    12b3:\t00 \n    12b4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12b8:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    12bc:\t48 85 c0             \ttest   %rax,%rax\n    12bf:\t75 0c                \tjne    12cd <perf_tool__fill_defaults+0xe1>\n    12c1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12c5:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n    12cc:\t00 \n    12cd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12d1:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    12d5:\t48 85 c0             \ttest   %rax,%rax\n    12d8:\t75 0c                \tjne    12e6 <perf_tool__fill_defaults+0xfa>\n    12da:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12de:\t48 c7 40 40 00 00 00 \tmovq   $0x0,0x40(%rax)\n    12e5:\t00 \n    12e6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12ea:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    12ee:\t48 85 c0             \ttest   %rax,%rax\n    12f1:\t75 0c                \tjne    12ff <perf_tool__fill_defaults+0x113>\n    12f3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    12f7:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n    12fe:\t00 \n    12ff:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1303:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n    1307:\t48 85 c0             \ttest   %rax,%rax\n    130a:\t75 0c                \tjne    1318 <perf_tool__fill_defaults+0x12c>\n    130c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1310:\t48 c7 40 50 00 00 00 \tmovq   $0x0,0x50(%rax)\n    1317:\t00 \n    1318:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    131c:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n    1320:\t48 85 c0             \ttest   %rax,%rax\n    1323:\t75 0c                \tjne    1331 <perf_tool__fill_defaults+0x145>\n    1325:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1329:\t48 c7 40 58 00 00 00 \tmovq   $0x0,0x58(%rax)\n    1330:\t00 \n    1331:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1335:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n    1339:\t48 85 c0             \ttest   %rax,%rax\n    133c:\t75 0c                \tjne    134a <perf_tool__fill_defaults+0x15e>\n    133e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1342:\t48 c7 40 68 00 00 00 \tmovq   $0x0,0x68(%rax)\n    1349:\t00 \n    134a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    134e:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n    1352:\t48 85 c0             \ttest   %rax,%rax\n    1355:\t75 26                \tjne    137d <perf_tool__fill_defaults+0x191>\n    1357:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    135b:\t0f b6 40 70          \tmovzbl 0x70(%rax),%eax\n    135f:\t84 c0                \ttest   %al,%al\n    1361:\t74 0e                \tje     1371 <perf_tool__fill_defaults+0x185>\n    1363:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1367:\t48 c7 40 60 00 00 00 \tmovq   $0x0,0x60(%rax)\n    136e:\t00 \n    136f:\teb 0c                \tjmp    137d <perf_tool__fill_defaults+0x191>\n    1371:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1375:\t48 c7 40 60 00 00 00 \tmovq   $0x0,0x60(%rax)\n    137c:\t00 \n    137d:\t90                   \tnop\n    137e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1382:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1389:\t00 00 \n    138b:\t74 05                \tje     1392 <perf_tool__fill_defaults+0x1a6>\n    138d:\te8 00 00 00 00       \tcallq  1392 <perf_tool__fill_defaults+0x1a6>\n    1392:\tc9                   \tleaveq \n    1393:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall perf_tool__fill_defaults(\n    __int64 <span class=\"supfact\">a1</span>) {\n  unsigned __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = __readfsqword(Number);\n  if (!*(_QWORD *)<span class=\"supfact\">a1</span>)\n    *(_QWORD *)<span class=\"supfact\">a1</span> = process_event_sample_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_event_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_event_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_event_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_event_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_event_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = &perf_event__process_lost;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_event_sample_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_event_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_event_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_event_synth_attr_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n        process_event_synth_tracing_data_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_finished_round_stub;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    if (*(_BYTE *)(<span class=\"supfact\">a1</span> + Number))\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_finished_round;\n    else\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = process_finished_round_stub;\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v2</span>;\n}", "code_t": "void __cdecl perf_tool__fill_defaults(perf_tool *<span class=\"supfact\">tool</span>) {\n  if (!<span class=\"supfact\">tool</span>->sample)\n    <span class=\"supfact\">tool</span>->sample = (event_sample)process_event_sample_stub;\n  if (!<span class=\"supfact\">tool</span>->mmap)\n    <span class=\"supfact\">tool</span>->mmap = (event_op)process_event_stub;\n  if (!<span class=\"supfact\">tool</span>->mmap2)\n    <span class=\"supfact\">tool</span>->mmap2 = (event_op)process_event_stub;\n  if (!<span class=\"supfact\">tool</span>->comm)\n    <span class=\"supfact\">tool</span>->comm = (event_op)process_event_stub;\n  if (!<span class=\"supfact\">tool</span>->fork)\n    <span class=\"supfact\">tool</span>->fork = (event_op)process_event_stub;\n  if (!<span class=\"supfact\">tool</span>->exit)\n    <span class=\"supfact\">tool</span>->exit = (event_op)process_event_stub;\n  if (!<span class=\"supfact\">tool</span>->lost)\n    <span class=\"supfact\">tool</span>->lost = (event_op)&perf_event__process_lost;\n  if (!<span class=\"supfact\">tool</span>->read)\n    <span class=\"supfact\">tool</span>->read = (event_sample)process_event_sample_stub;\n  if (!<span class=\"supfact\">tool</span>->throttle)\n    <span class=\"supfact\">tool</span>->throttle = (event_op)process_event_stub;\n  if (!<span class=\"supfact\">tool</span>->unthrottle)\n    <span class=\"supfact\">tool</span>->unthrottle = (event_op)process_event_stub;\n  if (!<span class=\"supfact\">tool</span>->attr)\n    <span class=\"supfact\">tool</span>->attr = (event_attr_op)process_event_synth_attr_stub;\n  if (!<span class=\"supfact\">tool</span>->tracing_data)\n    <span class=\"supfact\">tool</span>->tracing_data =\n        (event_op2)process_event_synth_tracing_data_stub;\n  if (!<span class=\"supfact\">tool</span>->build_id)\n    <span class=\"supfact\">tool</span>->build_id = (event_op2)process_finished_round_stub;\n  if (!<span class=\"supfact\">tool</span>->finished_round) {\n    if (<span class=\"supfact\">tool</span>->ordered_samples)\n      <span class=\"supfact\">tool</span>->finished_round = (event_op2)process_finished_round;\n    else\n      <span class=\"supfact\">tool</span>->finished_round =\n          (event_op2)process_finished_round_stub;\n  }\n}", "var": [{"name": "a1", "type": "perf_tool *", "pred_name": "tool", "ref_name": "tool", "ref_type": "perf_tool *"}, {"name": "v2", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "xobs", "repo_name": "ax2xx-code", "path": "xobs/ax2xx-code/36d0a1a10a8015b5cdaf6ca1f4c922cc8c7d44a3eb569617d8ba1b4335228b39", "path_in_repo": "xobs/ax2xx-code//ax211", "objdump": "000000000040619b <do_interestingness>:\n  40619b:\t55                   \tpush   %rbp\n  40619c:\t48 89 e5             \tmov    %rsp,%rbp\n  40619f:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4061a3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4061a7:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  4061ab:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  4061af:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  4061b4:\t74 30                \tje     4061e6 <do_interestingness+0x4b>\n  4061b6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4061ba:\t8b 10                \tmov    (%rax),%edx\n  4061bc:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  4061c1:\t74 08                \tje     4061cb <do_interestingness+0x30>\n  4061c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4061c7:\t8b 00                \tmov    (%rax),%eax\n  4061c9:\teb 05                \tjmp    4061d0 <do_interestingness+0x35>\n  4061cb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4061d0:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  4061d4:\t89 c6                \tmov    %eax,%esi\n  4061d6:\t48 89 cf             \tmov    %rcx,%rdi\n  4061d9:\te8 6f fc ff ff       \tcallq  405e4d <interesting_one_cycle>\n  4061de:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4061e1:\te9 dd 00 00 00       \tjmpq   4062c3 <do_interestingness+0x128>\n  4061e6:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  4061eb:\t74 23                \tje     406210 <do_interestingness+0x75>\n  4061ed:\te8 ee c0 ff ff       \tcallq  4022e0 <rand@plt>\n  4061f2:\t89 c2                \tmov    %eax,%edx\n  4061f4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4061f8:\t8b 08                \tmov    (%rax),%ecx\n  4061fa:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4061fe:\t89 ce                \tmov    %ecx,%esi\n  406200:\t48 89 c7             \tmov    %rax,%rdi\n  406203:\te8 45 fc ff ff       \tcallq  405e4d <interesting_one_cycle>\n  406208:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40620b:\te9 b3 00 00 00       \tjmpq   4062c3 <do_interestingness+0x128>\n  406210:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  406217:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40621e:\te9 96 00 00 00       \tjmpq   4062b9 <do_interestingness+0x11e>\n  406223:\te8 b8 c0 ff ff       \tcallq  4022e0 <rand@plt>\n  406228:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40622b:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  40622e:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n  406231:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406235:\t89 ce                \tmov    %ecx,%esi\n  406237:\t48 89 c7             \tmov    %rax,%rdi\n  40623a:\te8 0e fc ff ff       \tcallq  405e4d <interesting_one_cycle>\n  40623f:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  406242:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  406246:\t7e 5c                \tjle    4062a4 <do_interestingness+0x109>\n  406248:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40624b:\t89 c6                \tmov    %eax,%esi\n  40624d:\tbf 88 b5 40 00       \tmov    $0x40b588,%edi\n  406252:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406257:\te8 b4 be ff ff       \tcallq  402110 <printf@plt>\n  40625c:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  40625f:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n  406262:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406266:\t89 ce                \tmov    %ecx,%esi\n  406268:\t48 89 c7             \tmov    %rax,%rdi\n  40626b:\te8 dd fb ff ff       \tcallq  405e4d <interesting_one_cycle>\n  406270:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  406273:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  406277:\t7e 2b                \tjle    4062a4 <do_interestingness+0x109>\n  406279:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40627c:\t89 c6                \tmov    %eax,%esi\n  40627e:\tbf c0 b5 40 00       \tmov    $0x40b5c0,%edi\n  406283:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406288:\te8 83 be ff ff       \tcallq  402110 <printf@plt>\n  40628d:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  406290:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n  406293:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406297:\t89 ce                \tmov    %ecx,%esi\n  406299:\t48 89 c7             \tmov    %rax,%rdi\n  40629c:\te8 ac fb ff ff       \tcallq  405e4d <interesting_one_cycle>\n  4062a1:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4062a4:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  4062a8:\t79 0b                \tjns    4062b5 <do_interestingness+0x11a>\n  4062aa:\t83 6d fc 01          \tsubl   $0x1,-0x4(%rbp)\n  4062ae:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4062b5:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  4062b9:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  4062bd:\t0f 84 60 ff ff ff    \tje     406223 <do_interestingness+0x88>\n  4062c3:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4062c6:\tc9                   \tleaveq \n  4062c7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_interestingness(int *<span class=\"supfact\">a1</span>,\n                                      unsigned int *<span class=\"supfact\">a2</span>,\n                                      unsigned int *<span class=\"supfact\">a3</span>) {\n  unsigned int v3;\n  int v4;\n  unsigned int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  if (<span class=\"supfact\">a2</span>) {\n    if (<span class=\"supfact\">a3</span>)\n      v3 = *<span class=\"supfact\">a3</span>;\n    else\n      v3 = Number;\n    <span class=\"supfact\">v8</span> =\n        interesting_one_cycle(<span class=\"supfact\">a1</span>, v3, *<span class=\"supfact\">a2</span>);\n  } else if (<span class=\"supfact\">a3</span>) {\n    v4 = rand();\n    <span class=\"supfact\">v8</span> =\n        interesting_one_cycle(<span class=\"supfact\">a1</span>, *<span class=\"supfact\">a3</span>, v4);\n  } else {\n    <span class=\"supfact\">v8</span> = Number;\n    <span class=\"supfact\">v9</span> = Number;\n    while (!<span class=\"supfact\">v8</span>) {\n      <span class=\"supfact\">v7</span> = rand();\n      <span class=\"supfact\">v8</span> = interesting_one_cycle(\n          <span class=\"supfact\">a1</span>, <span class=\"supfact\">v9</span>, <span class=\"supfact\">v7</span>);\n      if (<span class=\"supfact\">v8</span> > Number) {\n        printf(String, <span class=\"supfact\">v7</span>);\n        <span class=\"supfact\">v8</span> = interesting_one_cycle(\n            <span class=\"supfact\">a1</span>, <span class=\"supfact\">v9</span>, <span class=\"supfact\">v7</span>);\n        if (<span class=\"supfact\">v8</span> > Number) {\n          printf(String, <span class=\"supfact\">v7</span>);\n          <span class=\"supfact\">v8</span> = interesting_one_cycle(\n              <span class=\"supfact\">a1</span>, <span class=\"supfact\">v9</span>, <span class=\"supfact\">v7</span>);\n        }\n      }\n      if (<span class=\"supfact\">v8</span> < Number) {\n        --<span class=\"supfact\">v9</span>;\n        <span class=\"supfact\">v8</span> = Number;\n      }\n      ++<span class=\"supfact\">v9</span>;\n    }\n  }\n  return (unsigned int)<span class=\"supfact\">v8</span>;\n}", "code_t": "int __cdecl do_interestingness(sd_state *<span class=\"supfact\">state</span>,\n                               int *<span class=\"supfact\">seed</span>,\n                               int *<span class=\"supfact\">loop</span>) {\n  int v3;\n  int v4;\n  unsigned int <span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">val</span>;\n  int <span class=\"supfact\">run</span>;\n  if (<span class=\"supfact\">seed</span>) {\n    if (<span class=\"supfact\">loop</span>)\n      v3 = *<span class=\"supfact\">loop</span>;\n    else\n      v3 = Number;\n    <span class=\"supfact\">val</span> =\n        interesting_one_cycle(<span class=\"supfact\">state</span>, v3, *<span class=\"supfact\">seed</span>);\n  } else if (<span class=\"supfact\">loop</span>) {\n    v4 = rand();\n    <span class=\"supfact\">val</span> =\n        interesting_one_cycle(<span class=\"supfact\">state</span>, *<span class=\"supfact\">loop</span>, v4);\n  } else {\n    <span class=\"supfact\">val</span> = Number;\n    <span class=\"supfact\">run</span> = Number;\n    while (!<span class=\"supfact\">val</span>) {\n      <span class=\"supfact\">s</span> = rand();\n      <span class=\"supfact\">val</span> = interesting_one_cycle(\n          <span class=\"supfact\">state</span>, <span class=\"supfact\">run</span>, <span class=\"supfact\">s</span>);\n      if (<span class=\"supfact\">val</span> > Number) {\n        printf(String, <span class=\"supfact\">s</span>);\n        <span class=\"supfact\">val</span> = interesting_one_cycle(\n            <span class=\"supfact\">state</span>, <span class=\"supfact\">run</span>, <span class=\"supfact\">s</span>);\n        if (<span class=\"supfact\">val</span> > Number) {\n          printf(String, <span class=\"supfact\">s</span>);\n          <span class=\"supfact\">val</span> = interesting_one_cycle(\n              <span class=\"supfact\">state</span>, <span class=\"supfact\">run</span>, <span class=\"supfact\">s</span>);\n        }\n      }\n      if (<span class=\"supfact\">val</span> < Number) {\n        --<span class=\"supfact\">run</span>;\n        <span class=\"supfact\">val</span> = Number;\n      }\n      ++<span class=\"supfact\">run</span>;\n    }\n  }\n  return <span class=\"supfact\">val</span>;\n}", "var": [{"name": "a1", "type": "int *", "pred_name": "array", "ref_name": "state", "ref_type": "sd_state *"}, {"name": "a2", "type": "int *", "pred_name": "min", "ref_name": "seed", "ref_type": "int *"}, {"name": "a3", "type": "int *", "pred_name": "max", "ref_name": "loop", "ref_type": "int *"}, {"name": "v7", "type": "int", "pred_name": "i", "ref_name": "s", "ref_type": "unsigned int"}, {"name": "v8", "type": "int", "pred_name": "__unk__", "ref_name": "val", "ref_type": "int"}, {"name": "v9", "type": "int", "pred_name": "__unk__", "ref_name": "run", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "adlererik", "repo_name": "qemu-2.8-dfsg", "path": "adlererik/qemu-2.8-dfsg/b4beb331428c329166457b2636b0823ad6bc5eb28cdead0c9df77e0d035eb71f", "path_in_repo": "adlererik/qemu-2.8-dfsg//hw/acpi/pcihp.o", "objdump": "0000000000000805 <pci_read>:\n 805:\t55                   \tpush   %rbp\n 806:\t48 89 e5             \tmov    %rsp,%rbp\n 809:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 80d:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 811:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n 814:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 818:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 81c:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n 823:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 827:\t8b 80 00 0c 00 00    \tmov    0xc00(%rax),%eax\n 82d:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 830:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 834:\t78 09                \tjs     83f <pci_read+0x3a>\n 836:\t81 7d f4 ff 00 00 00 \tcmpl   $0xff,-0xc(%rbp)\n 83d:\t7e 0a                \tjle    849 <pci_read+0x44>\n 83f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 844:\te9 e0 00 00 00       \tjmpq   929 <pci_read+0x124>\n 849:\t48 83 7d e0 10       \tcmpq   $0x10,-0x20(%rbp)\n 84e:\t0f 87 ce 00 00 00    \tja     922 <pci_read+0x11d>\n 854:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 858:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 85f:\t00 \n 860:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 867 <pci_read+0x62>\n 867:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n 86a:\t48 98                \tcltq   \n 86c:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 873 <pci_read+0x6e>\n 873:\t48 01 d0             \tadd    %rdx,%rax\n 876:\tff e0                \tjmpq   *%rax\n 878:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 87c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 87f:\t48 63 d0             \tmovslq %eax,%rdx\n 882:\t48 89 d0             \tmov    %rdx,%rax\n 885:\t48 01 c0             \tadd    %rax,%rax\n 888:\t48 01 d0             \tadd    %rdx,%rax\n 88b:\t48 c1 e0 02          \tshl    $0x2,%rax\n 88f:\t48 01 c8             \tadd    %rcx,%rax\n 892:\t8b 00                \tmov    (%rax),%eax\n 894:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 897:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 89b:\t0f b6 80 10 0d 00 00 \tmovzbl 0xd10(%rax),%eax\n 8a2:\t83 f0 01             \txor    $0x1,%eax\n 8a5:\t84 c0                \ttest   %al,%al\n 8a7:\t74 7c                \tje     925 <pci_read+0x120>\n 8a9:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 8ad:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 8b0:\t48 63 d0             \tmovslq %eax,%rdx\n 8b3:\t48 89 d0             \tmov    %rdx,%rax\n 8b6:\t48 01 c0             \tadd    %rax,%rax\n 8b9:\t48 01 d0             \tadd    %rdx,%rax\n 8bc:\t48 c1 e0 02          \tshl    $0x2,%rax\n 8c0:\t48 01 c8             \tadd    %rcx,%rax\n 8c3:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n 8c9:\teb 5a                \tjmp    925 <pci_read+0x120>\n 8cb:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 8cf:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 8d2:\t48 63 d0             \tmovslq %eax,%rdx\n 8d5:\t48 89 d0             \tmov    %rdx,%rax\n 8d8:\t48 01 c0             \tadd    %rax,%rax\n 8db:\t48 01 d0             \tadd    %rdx,%rax\n 8de:\t48 c1 e0 02          \tshl    $0x2,%rax\n 8e2:\t48 01 c8             \tadd    %rcx,%rax\n 8e5:\t48 83 c0 04          \tadd    $0x4,%rax\n 8e9:\t8b 00                \tmov    (%rax),%eax\n 8eb:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 8ee:\teb 36                \tjmp    926 <pci_read+0x121>\n 8f0:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 8f4:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 8f7:\t48 63 d0             \tmovslq %eax,%rdx\n 8fa:\t48 89 d0             \tmov    %rdx,%rax\n 8fd:\t48 01 c0             \tadd    %rax,%rax\n 900:\t48 01 d0             \tadd    %rdx,%rax\n 903:\t48 c1 e0 02          \tshl    $0x2,%rax\n 907:\t48 01 c8             \tadd    %rcx,%rax\n 90a:\t48 83 c0 08          \tadd    $0x8,%rax\n 90e:\t8b 00                \tmov    (%rax),%eax\n 910:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 913:\teb 11                \tjmp    926 <pci_read+0x121>\n 915:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 919:\t8b 80 00 0c 00 00    \tmov    0xc00(%rax),%eax\n 91f:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 922:\t90                   \tnop\n 923:\teb 01                \tjmp    926 <pci_read+0x121>\n 925:\t90                   \tnop\n 926:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 929:\t5d                   \tpop    %rbp\n 92a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pci_read(__int64 <span class=\"supfact\">a1</span>,\n                            __int64 <span class=\"supfact\">a2</span>) {\n  unsigned int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  <span class=\"supfact\">v4</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  if (<span class=\"supfact\">v4</span> < Number || <span class=\"supfact\">v4</span> > Number)\n    return Number L;\n  switch (<span class=\"supfact\">a2</span>) {\n  case Number L:\n    <span class=\"supfact\">v3</span> =\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number L * <span class=\"supfact\">v4</span>);\n    if (*(_BYTE *)(<span class=\"supfact\">a1</span> + Number) != Number)\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number L * <span class=\"supfact\">v4</span>) = Number;\n    break;\n  case Number L:\n    <span class=\"supfact\">v3</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> +\n                                     Number L * <span class=\"supfact\">v4</span> + Number);\n    break;\n  case Number L:\n    <span class=\"supfact\">v3</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> +\n                                     Number L * <span class=\"supfact\">v4</span> + Number);\n    break;\n  case Number L:\n    <span class=\"supfact\">v3</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n    break;\n  default:\n    return <span class=\"supfact\">v3</span>;\n  }\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "uint64_t __cdecl pci_read(void *<span class=\"supfact\">opaque</span>,\n                          hwaddr <span class=\"supfact\">addr</span>, unsigned int size) {\n  uint32_t <span class=\"supfact\">val</span>;\n  int <span class=\"supfact\">bsel</span>;\n  <span class=\"supfact\">val</span> = Number;\n  <span class=\"supfact\">bsel</span> = *((_DWORD *)<span class=\"supfact\">opaque</span> + Number);\n  if (<span class=\"supfact\">bsel</span> < Number || <span class=\"supfact\">bsel</span> > Number)\n    return Number L;\n  switch (<span class=\"supfact\">addr</span>) {\n  case Number:\n    <span class=\"supfact\">val</span> =\n        *((_DWORD *)<span class=\"supfact\">opaque</span> + Number * <span class=\"supfact\">bsel</span>);\n    if (*((_BYTE *)<span class=\"supfact\">opaque</span> + Number) != Number)\n      *((_DWORD *)<span class=\"supfact\">opaque</span> + Number * <span class=\"supfact\">bsel</span>) =\n          Number;\n    break;\n  case Number:\n    <span class=\"supfact\">val</span> = *((_DWORD *)<span class=\"supfact\">opaque</span> +\n                            Number * <span class=\"supfact\">bsel</span> + Number);\n    break;\n  case Number:\n    <span class=\"supfact\">val</span> = *((_DWORD *)<span class=\"supfact\">opaque</span> +\n                            Number * <span class=\"supfact\">bsel</span> + Number);\n    break;\n  case Number:\n    <span class=\"supfact\">val</span> = *((_DWORD *)<span class=\"supfact\">opaque</span> + Number);\n    break;\n  default:\n    return <span class=\"supfact\">val</span>;\n  }\n  return <span class=\"supfact\">val</span>;\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "opaque", "ref_name": "opaque", "ref_type": "void *"}, {"name": "a2", "type": "hwaddr", "pred_name": "addr", "ref_name": "addr", "ref_type": "hwaddr"}, {"name": "v3", "type": "uint32_t", "pred_name": "val", "ref_name": "val", "ref_type": "uint32_t"}, {"name": "v4", "type": "int", "pred_name": "n", "ref_name": "bsel", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "mthuurne", "repo_name": "qemu-dingoo", "path": "mthuurne/qemu-dingoo/fdb96e752742289b090055b75fd9a712eff41aa0d94b4ef1a2c4afc46b402b30", "path_in_repo": "mthuurne/qemu-dingoo//sparc32plus-linux-user/syscall.o", "objdump": "00000000000048fe <do_sendrecvmsg>:\n    48fe:\t55                   \tpush   %rbp\n    48ff:\t48 89 e5             \tmov    %rsp,%rbp\n    4902:\t53                   \tpush   %rbx\n    4903:\t48 83 ec 78          \tsub    $0x78,%rsp\n    4907:\t89 7d 8c             \tmov    %edi,-0x74(%rbp)\n    490a:\t89 75 88             \tmov    %esi,-0x78(%rbp)\n    490d:\t89 55 84             \tmov    %edx,-0x7c(%rbp)\n    4910:\t89 4d 80             \tmov    %ecx,-0x80(%rbp)\n    4913:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    491a:\t00 00 \n    491c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    4920:\t31 c0                \txor    %eax,%eax\n    4922:\t83 7d 80 00          \tcmpl   $0x0,-0x80(%rbp)\n    4926:\t0f 95 c0             \tsetne  %al\n    4929:\t0f b6 d0             \tmovzbl %al,%edx\n    492c:\t83 7d 80 00          \tcmpl   $0x0,-0x80(%rbp)\n    4930:\t0f 94 c0             \tsete   %al\n    4933:\t0f b6 c0             \tmovzbl %al,%eax\n    4936:\t8b 75 88             \tmov    -0x78(%rbp),%esi\n    4939:\t89 d1                \tmov    %edx,%ecx\n    493b:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    4940:\t89 c7                \tmov    %eax,%edi\n    4942:\te8 23 bc ff ff       \tcallq  56a <lock_user>\n    4947:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n    494b:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n    4950:\t75 0a                \tjne    495c <do_sendrecvmsg+0x5e>\n    4952:\tb8 f2 ff ff ff       \tmov    $0xfffffff2,%eax\n    4957:\te9 a1 02 00 00       \tjmpq   4bfd <do_sendrecvmsg+0x2ff>\n    495c:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    4960:\t8b 00                \tmov    (%rax),%eax\n    4962:\t85 c0                \ttest   %eax,%eax\n    4964:\t0f 84 a6 00 00 00    \tje     4a10 <do_sendrecvmsg+0x112>\n    496a:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    496e:\t8b 40 04             \tmov    0x4(%rax),%eax\n    4971:\t89 c7                \tmov    %eax,%edi\n    4973:\te8 9e b8 ff ff       \tcallq  216 <tswap32>\n    4978:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n    497b:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n    497e:\t89 c0                \tmov    %eax,%eax\n    4980:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n    4984:\tb8 10 00 00 00       \tmov    $0x10,%eax\n    4989:\t48 83 e8 01          \tsub    $0x1,%rax\n    498d:\t48 01 d0             \tadd    %rdx,%rax\n    4990:\tbb 10 00 00 00       \tmov    $0x10,%ebx\n    4995:\tba 00 00 00 00       \tmov    $0x0,%edx\n    499a:\t48 f7 f3             \tdiv    %rbx\n    499d:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n    49a1:\t48 29 c4             \tsub    %rax,%rsp\n    49a4:\t48 89 e0             \tmov    %rsp,%rax\n    49a7:\t48 83 c0 0f          \tadd    $0xf,%rax\n    49ab:\t48 c1 e8 04          \tshr    $0x4,%rax\n    49af:\t48 c1 e0 04          \tshl    $0x4,%rax\n    49b3:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    49b7:\t8b 5d b8             \tmov    -0x48(%rbp),%ebx\n    49ba:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    49be:\t8b 00                \tmov    (%rax),%eax\n    49c0:\t48 98                \tcltq   \n    49c2:\t48 89 c7             \tmov    %rax,%rdi\n    49c5:\te8 86 b8 ff ff       \tcallq  250 <tswap64>\n    49ca:\t89 c1                \tmov    %eax,%ecx\n    49cc:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    49d0:\t89 da                \tmov    %ebx,%edx\n    49d2:\t89 ce                \tmov    %ecx,%esi\n    49d4:\t48 89 c7             \tmov    %rax,%rdi\n    49d7:\te8 d2 e0 ff ff       \tcallq  2aae <target_to_host_sockaddr>\n    49dc:\t89 45 90             \tmov    %eax,-0x70(%rbp)\n    49df:\t83 7d 90 00          \tcmpl   $0x0,-0x70(%rbp)\n    49e3:\t74 3a                \tje     4a1f <do_sendrecvmsg+0x121>\n    49e5:\t83 7d 80 00          \tcmpl   $0x0,-0x80(%rbp)\n    49e9:\t75 07                \tjne    49f2 <do_sendrecvmsg+0xf4>\n    49eb:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    49f0:\teb 05                \tjmp    49f7 <do_sendrecvmsg+0xf9>\n    49f2:\tba 00 00 00 00       \tmov    $0x0,%edx\n    49f7:\t8b 4d 88             \tmov    -0x78(%rbp),%ecx\n    49fa:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    49fe:\t89 ce                \tmov    %ecx,%esi\n    4a00:\t48 89 c7             \tmov    %rax,%rdi\n    4a03:\te8 c9 bb ff ff       \tcallq  5d1 <unlock_user>\n    4a08:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n    4a0b:\te9 ed 01 00 00       \tjmpq   4bfd <do_sendrecvmsg+0x2ff>\n    4a10:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n    4a17:\t00 \n    4a18:\tc7 45 b8 00 00 00 00 \tmovl   $0x0,-0x48(%rbp)\n    4a1f:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    4a23:\t8b 40 14             \tmov    0x14(%rax),%eax\n    4a26:\t48 98                \tcltq   \n    4a28:\t48 89 c7             \tmov    %rax,%rdi\n    4a2b:\te8 20 b8 ff ff       \tcallq  250 <tswap64>\n    4a30:\t48 01 c0             \tadd    %rax,%rax\n    4a33:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    4a37:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4a3b:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n    4a3f:\tb8 10 00 00 00       \tmov    $0x10,%eax\n    4a44:\t48 83 e8 01          \tsub    $0x1,%rax\n    4a48:\t48 01 d0             \tadd    %rdx,%rax\n    4a4b:\tbb 10 00 00 00       \tmov    $0x10,%ebx\n    4a50:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4a55:\t48 f7 f3             \tdiv    %rbx\n    4a58:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n    4a5c:\t48 29 c4             \tsub    %rax,%rsp\n    4a5f:\t48 89 e0             \tmov    %rsp,%rax\n    4a62:\t48 83 c0 0f          \tadd    $0xf,%rax\n    4a66:\t48 c1 e8 04          \tshr    $0x4,%rax\n    4a6a:\t48 c1 e0 04          \tshl    $0x4,%rax\n    4a6e:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    4a72:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    4a76:\t8b 40 18             \tmov    0x18(%rax),%eax\n    4a79:\t89 c7                \tmov    %eax,%edi\n    4a7b:\te8 96 b7 ff ff       \tcallq  216 <tswap32>\n    4a80:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    4a83:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    4a87:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    4a8a:\t48 98                \tcltq   \n    4a8c:\t48 89 c7             \tmov    %rax,%rdi\n    4a8f:\te8 bc b7 ff ff       \tcallq  250 <tswap64>\n    4a94:\t89 45 94             \tmov    %eax,-0x6c(%rbp)\n    4a97:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n    4a9a:\t48 98                \tcltq   \n    4a9c:\t48 c1 e0 04          \tshl    $0x4,%rax\n    4aa0:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n    4aa4:\tb8 10 00 00 00       \tmov    $0x10,%eax\n    4aa9:\t48 83 e8 01          \tsub    $0x1,%rax\n    4aad:\t48 01 d0             \tadd    %rdx,%rax\n    4ab0:\tbb 10 00 00 00       \tmov    $0x10,%ebx\n    4ab5:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4aba:\t48 f7 f3             \tdiv    %rbx\n    4abd:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n    4ac1:\t48 29 c4             \tsub    %rax,%rsp\n    4ac4:\t48 89 e0             \tmov    %rsp,%rax\n    4ac7:\t48 83 c0 0f          \tadd    $0xf,%rax\n    4acb:\t48 c1 e8 04          \tshr    $0x4,%rax\n    4acf:\t48 c1 e0 04          \tshl    $0x4,%rax\n    4ad3:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    4ad7:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    4adb:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4ade:\t48 98                \tcltq   \n    4ae0:\t48 89 c7             \tmov    %rax,%rdi\n    4ae3:\te8 68 b7 ff ff       \tcallq  250 <tswap64>\n    4ae8:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n    4aeb:\t83 7d 80 00          \tcmpl   $0x0,-0x80(%rbp)\n    4aef:\t0f 94 c0             \tsete   %al\n    4af2:\t0f b6 c0             \tmovzbl %al,%eax\n    4af5:\t8b 7d 80             \tmov    -0x80(%rbp),%edi\n    4af8:\t8b 4d 94             \tmov    -0x6c(%rbp),%ecx\n    4afb:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n    4afe:\t48 8b 75 a8          \tmov    -0x58(%rbp),%rsi\n    4b02:\t41 89 f8             \tmov    %edi,%r8d\n    4b05:\t89 c7                \tmov    %eax,%edi\n    4b07:\te8 7c f9 ff ff       \tcallq  4488 <lock_iovec>\n    4b0c:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n    4b0f:\t48 98                \tcltq   \n    4b11:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    4b15:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    4b19:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    4b1d:\t83 7d 80 00          \tcmpl   $0x0,-0x80(%rbp)\n    4b21:\t74 3c                \tje     4b5f <do_sendrecvmsg+0x261>\n    4b23:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n    4b27:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    4b2b:\t48 89 d6             \tmov    %rdx,%rsi\n    4b2e:\t48 89 c7             \tmov    %rax,%rdi\n    4b31:\te8 30 e1 ff ff       \tcallq  2c66 <target_to_host_cmsg>\n    4b36:\t89 45 90             \tmov    %eax,-0x70(%rbp)\n    4b39:\t83 7d 90 00          \tcmpl   $0x0,-0x70(%rbp)\n    4b3d:\t75 7c                \tjne    4bbb <do_sendrecvmsg+0x2bd>\n    4b3f:\t8b 55 84             \tmov    -0x7c(%rbp),%edx\n    4b42:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n    4b46:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n    4b49:\t48 89 ce             \tmov    %rcx,%rsi\n    4b4c:\t89 c7                \tmov    %eax,%edi\n    4b4e:\te8 00 00 00 00       \tcallq  4b53 <do_sendrecvmsg+0x255>\n    4b53:\t89 c7                \tmov    %eax,%edi\n    4b55:\te8 2a c6 ff ff       \tcallq  1184 <get_errno>\n    4b5a:\t89 45 90             \tmov    %eax,-0x70(%rbp)\n    4b5d:\teb 5c                \tjmp    4bbb <do_sendrecvmsg+0x2bd>\n    4b5f:\t8b 55 84             \tmov    -0x7c(%rbp),%edx\n    4b62:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n    4b66:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n    4b69:\t48 89 ce             \tmov    %rcx,%rsi\n    4b6c:\t89 c7                \tmov    %eax,%edi\n    4b6e:\te8 00 00 00 00       \tcallq  4b73 <do_sendrecvmsg+0x275>\n    4b73:\t89 c7                \tmov    %eax,%edi\n    4b75:\te8 0a c6 ff ff       \tcallq  1184 <get_errno>\n    4b7a:\t89 45 90             \tmov    %eax,-0x70(%rbp)\n    4b7d:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n    4b80:\t89 c7                \tmov    %eax,%edi\n    4b82:\te8 48 c6 ff ff       \tcallq  11cf <is_error>\n    4b87:\t85 c0                \ttest   %eax,%eax\n    4b89:\t75 30                \tjne    4bbb <do_sendrecvmsg+0x2bd>\n    4b8b:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n    4b8e:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    4b91:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    4b95:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    4b99:\t48 89 d6             \tmov    %rdx,%rsi\n    4b9c:\t48 89 c7             \tmov    %rax,%rdi\n    4b9f:\te8 62 e3 ff ff       \tcallq  2f06 <host_to_target_cmsg>\n    4ba4:\t89 45 90             \tmov    %eax,-0x70(%rbp)\n    4ba7:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n    4baa:\t89 c7                \tmov    %eax,%edi\n    4bac:\te8 1e c6 ff ff       \tcallq  11cf <is_error>\n    4bb1:\t85 c0                \ttest   %eax,%eax\n    4bb3:\t75 06                \tjne    4bbb <do_sendrecvmsg+0x2bd>\n    4bb5:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n    4bb8:\t89 45 90             \tmov    %eax,-0x70(%rbp)\n    4bbb:\t83 7d 80 00          \tcmpl   $0x0,-0x80(%rbp)\n    4bbf:\t0f 94 c0             \tsete   %al\n    4bc2:\t0f b6 c8             \tmovzbl %al,%ecx\n    4bc5:\t8b 55 94             \tmov    -0x6c(%rbp),%edx\n    4bc8:\t8b 75 98             \tmov    -0x68(%rbp),%esi\n    4bcb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    4bcf:\t48 89 c7             \tmov    %rax,%rdi\n    4bd2:\te8 3c fa ff ff       \tcallq  4613 <unlock_iovec>\n    4bd7:\t83 7d 80 00          \tcmpl   $0x0,-0x80(%rbp)\n    4bdb:\t75 07                \tjne    4be4 <do_sendrecvmsg+0x2e6>\n    4bdd:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    4be2:\teb 05                \tjmp    4be9 <do_sendrecvmsg+0x2eb>\n    4be4:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4be9:\t8b 4d 88             \tmov    -0x78(%rbp),%ecx\n    4bec:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    4bf0:\t89 ce                \tmov    %ecx,%esi\n    4bf2:\t48 89 c7             \tmov    %rax,%rdi\n    4bf5:\te8 d7 b9 ff ff       \tcallq  5d1 <unlock_user>\n    4bfa:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n    4bfd:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    4c01:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n    4c08:\t00 00 \n    4c0a:\t74 05                \tje     4c11 <do_sendrecvmsg+0x313>\n    4c0c:\te8 00 00 00 00       \tcallq  4c11 <do_sendrecvmsg+0x313>\n    4c11:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n    4c15:\tc9                   \tleaveq \n    4c16:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_sendrecvmsg(int <span class=\"supfact\">a1</span>,\n                                  unsigned int <span class=\"supfact\">a2</span>,\n                                  int <span class=\"supfact\">a3</span>,\n                                  int <span class=\"supfact\">a4</span>) {\n  void *v5;\n  unsigned int <span class=\"supfact\">v6</span>;\n  unsigned int v7;\n  __int64 v8;\n  void *v9;\n  void *v10;\n  unsigned int v11;\n  unsigned int v12;\n  int <span class=\"supfact\">fd</span>;\n  unsigned int <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">v17</span>;\n  unsigned int <span class=\"supfact\">v18</span>;\n  unsigned int <span class=\"supfact\">v19</span>;\n  int *<span class=\"supfact\">v20</span>;\n  iovec *<span class=\"supfact\">v21</span>;\n  struct msghdr <span class=\"supfact\">message</span>;\n  unsigned __int64 <span class=\"supfact\">v23</span>;\n  <span class=\"supfact\">fd</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v23</span> = __readfsqword(Number);\n  <span class=\"supfact\">v20</span> = (int *)lock_user(<span class=\"supfact\">a4</span> == Number,\n                                         <span class=\"supfact\">a2</span>, Number);\n  if (!<span class=\"supfact\">v20</span>)\n    return Number L;\n  if (!*<span class=\"supfact\">v20</span>) {\n    <span class=\"supfact\">message</span>.msg_name = Number L;\n    <span class=\"supfact\">message</span>.msg_namelen = Number;\n    goto LABEL_9;\n  }\n  <span class=\"supfact\">message</span>.msg_namelen = tswap32(<span class=\"supfact\">v20</span>[Number]);\n  v5 =\n      alloca(Number *\n             (((unsigned __int64)<span class=\"supfact\">message</span>.msg_namelen + Number) /\n              Number));\n  <span class=\"supfact\">message</span>.msg_name =\n      (void *)(Number *\n               (((unsigned __int64)&<span class=\"supfact\">fd</span> + Number) >> Number));\n  <span class=\"supfact\">v6</span> = <span class=\"supfact\">message</span>.msg_namelen;\n  v7 = tswap64(*<span class=\"supfact\">v20</span>);\n  <span class=\"supfact\">v16</span> = target_to_host_sockaddr(\n      (__int16 *)<span class=\"supfact\">message</span>.msg_name, v7, <span class=\"supfact\">v6</span>);\n  if (!<span class=\"supfact\">v16</span>) {\n  LABEL_9:\n    <span class=\"supfact\">message</span>.msg_controllen =\n        Number * tswap64(<span class=\"supfact\">v20</span>[Number]);\n    v9 = alloca(Number *\n                ((<span class=\"supfact\">message</span>.msg_controllen + Number) / Number));\n    <span class=\"supfact\">message</span>.msg_control =\n        (void *)(Number *\n                 (((unsigned __int64)&<span class=\"supfact\">fd</span> + Number) >> Number));\n    <span class=\"supfact\">message</span>.msg_flags = tswap32(<span class=\"supfact\">v20</span>[Number]);\n    <span class=\"supfact\">v17</span> = tswap64(<span class=\"supfact\">v20</span>[Number]);\n    v10 = alloca(Number * ((Number L * <span class=\"supfact\">v17</span> + Number) / Number));\n    <span class=\"supfact\">v21</span> =\n        (iovec *)(Number *\n                  (((unsigned __int64)&<span class=\"supfact\">fd</span> + Number) >> Number));\n    <span class=\"supfact\">v18</span> = tswap64(<span class=\"supfact\">v20</span>[Number]);\n    lock_iovec(<span class=\"supfact\">a4</span> == Number, (__int64)<span class=\"supfact\">v21</span>,\n               <span class=\"supfact\">v18</span>, <span class=\"supfact\">v17</span>);\n    <span class=\"supfact\">message</span>.msg_iovlen = <span class=\"supfact\">v17</span>;\n    <span class=\"supfact\">message</span>.msg_iov = <span class=\"supfact\">v21</span>;\n    if (<span class=\"supfact\">a4</span>) {\n      <span class=\"supfact\">v16</span> = target_to_host_cmsg(&<span class=\"supfact\">message</span>,\n                                                (__int64)<span class=\"supfact\">v20</span>);\n      if (!<span class=\"supfact\">v16</span>) {\n        v11 = sendmsg(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">message</span>,\n                      <span class=\"supfact\">a3</span>);\n        <span class=\"supfact\">v16</span> = get_errno(v11);\n      }\n    } else {\n      v12 = recvmsg(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">message</span>,\n                    <span class=\"supfact\">a3</span>);\n      <span class=\"supfact\">v16</span> = get_errno(v12);\n      if (!is_error(<span class=\"supfact\">v16</span>)) {\n        <span class=\"supfact\">v19</span> = <span class=\"supfact\">v16</span>;\n        <span class=\"supfact\">v16</span> = host_to_target_cmsg((__int64)<span class=\"supfact\">v20</span>,\n                                                  &<span class=\"supfact\">message</span>);\n        if (!is_error(<span class=\"supfact\">v16</span>))\n          <span class=\"supfact\">v16</span> = <span class=\"supfact\">v19</span>;\n      }\n    }\n    unlock_iovec((__int64)<span class=\"supfact\">v21</span>, <span class=\"supfact\">v18</span>,\n                 <span class=\"supfact\">v17</span>, <span class=\"supfact\">a4</span> == Number);\n    if (<span class=\"supfact\">a4</span>)\n      v8 = Number L;\n    else\n      v8 = Number L;\n    goto LABEL_18;\n  }\n  if (<span class=\"supfact\">a4</span>)\n    v8 = Number L;\n  else\n    v8 = Number L;\nLABEL_18:\n  unlock_user(<span class=\"supfact\">v20</span>, <span class=\"supfact\">a2</span>, v8);\n  return <span class=\"supfact\">v16</span>;\n}", "code_t": "abi_long __cdecl do_sendrecvmsg(int <span class=\"supfact\">fd</span>,\n                                abi_ulong <span class=\"supfact\">target_msg</span>,\n                                int <span class=\"supfact\">flags</span>,\n                                int <span class=\"supfact\">send</span>) {\n  void *v5;\n  socklen_t <span class=\"supfact\">v6</span>;\n  abi_ulong v7;\n  __int64 v8;\n  void *v9;\n  void *v10;\n  abi_long v11;\n  abi_long v12;\n  int <span class=\"supfact\">fda</span>;\n  abi_long <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">count</span>;\n  abi_ulong <span class=\"supfact\">target_vec</span>;\n  abi_long <span class=\"supfact\">len</span>;\n  target_msghdr *<span class=\"supfact\">msgp</span>;\n  iovec *<span class=\"supfact\">vec</span>;\n  msghdr <span class=\"supfact\">msg</span>;\n  unsigned __int64 <span class=\"supfact\">v23</span>;\n  <span class=\"supfact\">fda</span> = <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">v23</span> = __readfsqword(Number);\n  <span class=\"supfact\">msgp</span> = (target_msghdr *)lock_user(\n      <span class=\"supfact\">send</span> == Number, <span class=\"supfact\">target_msg</span>, Number L,\n      <span class=\"supfact\">send</span> != Number);\n  if (!<span class=\"supfact\">msgp</span>)\n    return Number;\n  if (!<span class=\"supfact\">msgp</span>->msg_name) {\n    <span class=\"supfact\">msg</span>.msg_name = Number L;\n    <span class=\"supfact\">msg</span>.msg_namelen = Number;\n    goto LABEL_9;\n  }\n  <span class=\"supfact\">msg</span>.msg_namelen = tswap32(<span class=\"supfact\">msgp</span>->msg_namelen);\n  v5 = alloca(\n      Number *\n      (((unsigned __int64)<span class=\"supfact\">msg</span>.msg_namelen + Number) / Number));\n  <span class=\"supfact\">msg</span>.msg_name =\n      (void *)(Number *\n               (((unsigned __int64)&<span class=\"supfact\">fda</span> + Number) >> Number));\n  <span class=\"supfact\">v6</span> = <span class=\"supfact\">msg</span>.msg_namelen;\n  v7 = tswap64(<span class=\"supfact\">msgp</span>->msg_name);\n  <span class=\"supfact\">ret</span> = target_to_host_sockaddr(\n      (sockaddr *)<span class=\"supfact\">msg</span>.msg_name, v7, <span class=\"supfact\">v6</span>);\n  if (!<span class=\"supfact\">ret</span>) {\n  LABEL_9:\n    <span class=\"supfact\">msg</span>.msg_controllen =\n        Number * tswap64(<span class=\"supfact\">msgp</span>->msg_controllen);\n    v9 = alloca(Number *\n                ((<span class=\"supfact\">msg</span>.msg_controllen + Number) / Number));\n    <span class=\"supfact\">msg</span>.msg_control =\n        (void *)(Number *\n                 (((unsigned __int64)&<span class=\"supfact\">fda</span> + Number) >> Number));\n    <span class=\"supfact\">msg</span>.msg_flags = tswap32(<span class=\"supfact\">msgp</span>->msg_flags);\n    <span class=\"supfact\">count</span> = tswap64(<span class=\"supfact\">msgp</span>->msg_iovlen);\n    v10 =\n        alloca(Number * ((Number L * <span class=\"supfact\">count</span> + Number) / Number));\n    <span class=\"supfact\">vec</span> =\n        (iovec *)(Number * (((unsigned __int64)&<span class=\"supfact\">fda</span> + Number) >>\n                            Number));\n    <span class=\"supfact\">target_vec</span> = tswap64(<span class=\"supfact\">msgp</span>->msg_iov);\n    lock_iovec(<span class=\"supfact\">send</span> == Number, <span class=\"supfact\">vec</span>,\n               <span class=\"supfact\">target_vec</span>, <span class=\"supfact\">count</span>,\n               <span class=\"supfact\">send</span>);\n    <span class=\"supfact\">msg</span>.msg_iovlen = <span class=\"supfact\">count</span>;\n    <span class=\"supfact\">msg</span>.msg_iov = <span class=\"supfact\">vec</span>;\n    if (<span class=\"supfact\">send</span>) {\n      <span class=\"supfact\">ret</span> =\n          target_to_host_cmsg(&<span class=\"supfact\">msg</span>, <span class=\"supfact\">msgp</span>);\n      if (!<span class=\"supfact\">ret</span>) {\n        v11 = sendmsg(<span class=\"supfact\">fda</span>, &<span class=\"supfact\">msg</span>,\n                      <span class=\"supfact\">flags</span>);\n        <span class=\"supfact\">ret</span> = get_errno(v11);\n      }\n    } else {\n      v12 = recvmsg(<span class=\"supfact\">fda</span>, &<span class=\"supfact\">msg</span>,\n                    <span class=\"supfact\">flags</span>);\n      <span class=\"supfact\">ret</span> = get_errno(v12);\n      if (!is_error(<span class=\"supfact\">ret</span>)) {\n        <span class=\"supfact\">len</span> = <span class=\"supfact\">ret</span>;\n        <span class=\"supfact\">ret</span> =\n            host_to_target_cmsg(<span class=\"supfact\">msgp</span>, &<span class=\"supfact\">msg</span>);\n        if (!is_error(<span class=\"supfact\">ret</span>))\n          <span class=\"supfact\">ret</span> = <span class=\"supfact\">len</span>;\n      }\n    }\n    unlock_iovec(<span class=\"supfact\">vec</span>, <span class=\"supfact\">target_vec</span>,\n                 <span class=\"supfact\">count</span>, <span class=\"supfact\">send</span> == Number);\n    if (<span class=\"supfact\">send</span>)\n      v8 = Number L;\n    else\n      v8 = Number L;\n    goto LABEL_18;\n  }\n  if (<span class=\"supfact\">send</span>)\n    v8 = Number L;\n  else\n    v8 = Number L;\nLABEL_18:\n  unlock_user(<span class=\"supfact\">msgp</span>, <span class=\"supfact\">target_msg</span>, v8);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "fd", "ref_name": "fd", "ref_type": "int"}, {"name": "a2", "type": "abi_ulong", "pred_name": "target_msg", "ref_name": "target_msg", "ref_type": "abi_ulong"}, {"name": "a3", "type": "int", "pred_name": "flags", "ref_name": "flags", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "send", "ref_name": "send", "ref_type": "int"}, {"name": "v6", "type": "socklen_t", "pred_name": "v6", "ref_name": "v6", "ref_type": "socklen_t"}, {"name": "fd", "type": "int", "pred_name": "fda", "ref_name": "fda", "ref_type": "int"}, {"name": "v16", "type": "abi_long", "pred_name": "ret", "ref_name": "ret", "ref_type": "abi_long"}, {"name": "v17", "type": "int", "pred_name": "count", "ref_name": "count", "ref_type": "int"}, {"name": "v18", "type": "abi_ulong", "pred_name": "target_vec", "ref_name": "target_vec", "ref_type": "abi_ulong"}, {"name": "v19", "type": "abi_long", "pred_name": "len", "ref_name": "len", "ref_type": "abi_long"}, {"name": "v20", "type": "target_msghdr *", "pred_name": "msgp", "ref_name": "msgp", "ref_type": "target_msghdr *"}, {"name": "v21", "type": "iovec *", "pred_name": "vec", "ref_name": "vec", "ref_type": "iovec *"}, {"name": "message", "type": "struct msghdr { void * msg_name; socklen_t msg_namelen; PADDING (4); iovec * msg_iov; size_t msg_iovlen; void * msg_control; size_t msg_controllen; int msg_flags; PADDING (4); }", "pred_name": "msg", "ref_name": "msg", "ref_type": "struct msghdr { void * msg_name; socklen_t msg_namelen; PADDING (4); iovec * msg_iov; size_t msg_iovlen; void * msg_control; size_t msg_controllen; int msg_flags; PADDING (4); }"}, {"name": "v23", "type": "unsigned __int64", "pred_name": "v23", "ref_name": "v23", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "csjpeter", "repo_name": "psqldroid", "path": "csjpeter/psqldroid/94c7084f66ef578b98993829ffd1ba68cfa8a73106849332b149f95918961413", "path_in_repo": "csjpeter/psqldroid//src/backend/nodes/copyfuncs.o", "objdump": "0000000000003daf <_copyColumnRef>:\n    3daf:\t55                   \tpush   %rbp\n    3db0:\t48 89 e5             \tmov    %rsp,%rbp\n    3db3:\t48 83 ec 20          \tsub    $0x20,%rsp\n    3db7:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    3dbb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3dc2 <_copyColumnRef+0x13>\n    3dc2:\tbe 18 00 00 00       \tmov    $0x18,%esi\n    3dc7:\t48 89 c7             \tmov    %rax,%rdi\n    3dca:\te8 00 00 00 00       \tcallq  3dcf <_copyColumnRef+0x20>\n    3dcf:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3dd3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3dd7:\tc7 00 85 03 00 00    \tmovl   $0x385,(%rax)\n    3ddd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3de1:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    3de5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3de9:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3ded:\t48 89 c7             \tmov    %rax,%rdi\n    3df0:\te8 00 00 00 00       \tcallq  3df5 <_copyColumnRef+0x46>\n    3df5:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    3df9:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n    3dfd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3e01:\t8b 50 10             \tmov    0x10(%rax),%edx\n    3e04:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3e08:\t89 50 10             \tmov    %edx,0x10(%rax)\n    3e0b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3e0f:\tc9                   \tleaveq \n    3e10:\tc3                   \tretq   ", "code_s": "__int64 __fastcall copyColumnRef(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> =\n      MemoryContextAllocZeroAligned(CurrentMemoryContext, Number L);\n  *(_DWORD *)<span class=\"supfact\">v2</span> = Number;\n  *(_QWORD *)(<span class=\"supfact\">v2</span> + Number) =\n      copyObject(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n  *(_DWORD *)(<span class=\"supfact\">v2</span> + Number) =\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "ColumnRef_0 *__cdecl copyColumnRef(ColumnRef_0 *<span class=\"supfact\">from</span>) {\n  ColumnRef_0 *<span class=\"supfact\">_result</span>;\n  <span class=\"supfact\">_result</span> = (ColumnRef_0 *)MemoryContextAllocZeroAligned(\n      CurrentMemoryContext, Number L);\n  <span class=\"supfact\">_result</span>->type = T_ColumnRef;\n  <span class=\"supfact\">_result</span>->fields =\n      (List_0 *)copyObject(<span class=\"supfact\">from</span>->fields);\n  <span class=\"supfact\">_result</span>->location = <span class=\"supfact\">from</span>->location;\n  return <span class=\"supfact\">_result</span>;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "from", "ref_name": "from", "ref_type": "ColumnRef_0 *"}, {"name": "v2", "type": "__unk__", "pred_name": "newnode", "ref_name": "_result", "ref_type": "ColumnRef_0 *"}], "body_in_train": false}, {"repo_owner": "ColinGilbert", "repo_name": "netmap-ipfw", "path": "ColinGilbert/netmap-ipfw/b48a65bb4ff06efbc9a3ff0bbf153a1f745d0e1b8f108d70d8338b87e507dd7a", "path_in_repo": "ColinGilbert/netmap-ipfw/ipfw/ipfw", "objdump": "", "code_s": "int access(const char *<span class=\"supfact\">name</span>, int <span class=\"supfact\">type</span>) {\n  return access(<span class=\"supfact\">name</span>, <span class=\"supfact\">type</span>);\n}", "code_t": "int access(const char *<span class=\"supfact\">name</span>, int <span class=\"supfact\">type</span>) {\n  return access(<span class=\"supfact\">name</span>, <span class=\"supfact\">type</span>);\n}", "var": [{"name": "name", "type": "const char *", "pred_name": "name", "ref_name": "name", "ref_type": "const char *"}, {"name": "type", "type": "int", "pred_name": "type", "ref_name": "type", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "axelnxp", "repo_name": "linux-imx", "path": "axelnxp/linux-imx/a4f37264fa2fae81c9185a9726406d25758626997680f74056524ec9d3218d98", "path_in_repo": "axelnxp/linux-imx/tools/power/cpupower/cpupower", "objdump": "0000000000404f59 <snb_start>:\n  404f59:\t55                   \tpush   %rbp\n  404f5a:\t48 89 e5             \tmov    %rsp,%rbp\n  404f5d:\t48 83 ec 10          \tsub    $0x10,%rsp\n  404f61:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  404f68:\teb 51                \tjmp    404fbb <snb_start+0x62>\n  404f6a:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  404f71:\teb 39                \tjmp    404fac <snb_start+0x53>\n  404f73:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  404f76:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404f79:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n  404f7d:\t48 89 ce             \tmov    %rcx,%rsi\n  404f80:\t89 c7                \tmov    %eax,%edi\n  404f82:\te8 1e fd ff ff       \tcallq  404ca5 <snb_get_count>\n  404f87:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404f8a:\t48 98                \tcltq   \n  404f8c:\t48 8b 04 c5 80 20 41 \tmov    0x412080(,%rax,8),%rax\n  404f93:\t00 \n  404f94:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  404f97:\t48 63 d2             \tmovslq %edx,%rdx\n  404f9a:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  404f9e:\t48 01 c2             \tadd    %rax,%rdx\n  404fa1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  404fa5:\t48 89 02             \tmov    %rax,(%rdx)\n  404fa8:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  404fac:\t8b 05 a6 d6 00 00    \tmov    0xd6a6(%rip),%eax        # 412658 <cpu_count>\n  404fb2:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n  404fb5:\t7c bc                \tjl     404f73 <snb_start+0x1a>\n  404fb7:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  404fbb:\t83 7d fc 02          \tcmpl   $0x2,-0x4(%rbp)\n  404fbf:\t7e a9                \tjle    404f6a <snb_start+0x11>\n  404fc1:\tba 00 00 00 00       \tmov    $0x0,%edx\n  404fc6:\tbe 70 20 41 00       \tmov    $0x412070,%esi\n  404fcb:\tbf ff ff 00 00       \tmov    $0xffff,%edi\n  404fd0:\te8 d0 fc ff ff       \tcallq  404ca5 <snb_get_count>\n  404fd5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404fda:\tc9                   \tleaveq \n  404fdb:\tc3                   \tretq   ", "code_s": "__int64 snb_start() {\n  __int64 <span class=\"supfact\">v1</span>;\n  signed int <span class=\"supfact\">j</span>;\n  signed int <span class=\"supfact\">i</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < cpu_count;\n         ++<span class=\"supfact\">j</span>) {\n      snb_get_count(<span class=\"supfact\">i</span>, &<span class=\"supfact\">v1</span>, <span class=\"supfact\">j</span>);\n      *((_QWORD *)*(&previous_count_0 + <span class=\"supfact\">i</span>) +\n        <span class=\"supfact\">j</span>) = <span class=\"supfact\">v1</span>;\n    }\n  }\n  snb_get_count(Number, &tsc_at_measure_start_0, Number);\n  return Number L;\n}", "code_t": "int __cdecl snb_start() {\n  unsigned __int64 <span class=\"supfact\">val</span>;\n  int <span class=\"supfact\">cpu</span>;\n  int <span class=\"supfact\">num</span>;\n  for (<span class=\"supfact\">num</span> = Number; <span class=\"supfact\">num</span> <= Number;\n       ++<span class=\"supfact\">num</span>) {\n    for (<span class=\"supfact\">cpu</span> = Number; <span class=\"supfact\">cpu</span> < cpu_count;\n         ++<span class=\"supfact\">cpu</span>) {\n      snb_get_count((intel_snb_id)<span class=\"supfact\">num</span>, &<span class=\"supfact\">val</span>,\n                    <span class=\"supfact\">cpu</span>);\n      previous_count_0[<span class=\"supfact\">num</span>][<span class=\"supfact\">cpu</span>] =\n          <span class=\"supfact\">val</span>;\n    }\n  }\n  snb_get_count(TSC_0, &tsc_at_measure_start_0, Number);\n  return Number;\n}", "var": [{"name": "v1", "type": "unsigned __int64", "pred_name": "val", "ref_name": "val", "ref_type": "unsigned __int64"}, {"name": "j", "type": "int", "pred_name": "cpu", "ref_name": "cpu", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "num", "ref_name": "num", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "sdvf", "repo_name": "itba-proto-2009", "path": "sdvf/itba-proto-2009/5f5d884230caf5aa54dc6db4b52a387b8cccacda9243c76f5cdfd593f837b164", "path_in_repo": "sdvf/itba-proto-2009/code/MSServer/src/msserverManageFile.o", "objdump": "00000000000002ef <existeLaPeli>:\n 2ef:\t55                   \tpush   %rbp\n 2f0:\t48 89 e5             \tmov    %rsp,%rbp\n 2f3:\t48 83 ec 20          \tsub    $0x20,%rsp\n 2f7:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 2fb:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 302:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 306:\t48 89 c7             \tmov    %rax,%rdi\n 309:\te8 00 00 00 00       \tcallq  30e <existeLaPeli+0x1f>\n 30e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 312:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 319:\teb 40                \tjmp    35b <existeLaPeli+0x6c>\n 31b:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 322 <existeLaPeli+0x33>\n 322:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 325:\t48 63 d0             \tmovslq %eax,%rdx\n 328:\t48 89 d0             \tmov    %rdx,%rax\n 32b:\t48 c1 e0 04          \tshl    $0x4,%rax\n 32f:\t48 29 d0             \tsub    %rdx,%rax\n 332:\t48 c1 e0 02          \tshl    $0x2,%rax\n 336:\t48 01 c8             \tadd    %rcx,%rax\n 339:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n 33d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 341:\t48 89 d6             \tmov    %rdx,%rsi\n 344:\t48 89 c7             \tmov    %rax,%rdi\n 347:\te8 00 00 00 00       \tcallq  34c <existeLaPeli+0x5d>\n 34c:\t85 c0                \ttest   %eax,%eax\n 34e:\t75 07                \tjne    357 <existeLaPeli+0x68>\n 350:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 355:\teb 14                \tjmp    36b <existeLaPeli+0x7c>\n 357:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 35b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 361 <existeLaPeli+0x72>\n 361:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 364:\t7c b5                \tjl     31b <existeLaPeli+0x2c>\n 366:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 36b:\tc9                   \tleaveq \n 36c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall existeLaPeli(__int64 <span class=\"supfact\">a1</span>) {\n  char *<span class=\"supfact\">s1</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">s1</span> = (char *)toLower(<span class=\"supfact\">a1</span>);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < clienteDatos[Number];\n       ++<span class=\"supfact\">i</span>) {\n    if (!strcmp(<span class=\"supfact\">s1</span>,\n                (const char *)(*(_QWORD *)&clienteDatos[Number] +\n                               Number L * <span class=\"supfact\">i</span> + Number)))\n      return Number L;\n  }\n  return Number L;\n}", "code_t": "int __cdecl existeLaPeli(char *<span class=\"supfact\">movieName</span>) {\n  char *<span class=\"supfact\">nameFilm</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">nameFilm</span> = (char *)toLower(<span class=\"supfact\">movieName</span>);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < clienteDatos.cantMovie;\n       ++<span class=\"supfact\">i</span>) {\n    if (!strcmp(<span class=\"supfact\">nameFilm</span>,\n                clienteDatos.peliculas[<span class=\"supfact\">i</span>]\n                    .<span class=\"supfact\">movieName</span>))\n      return Number;\n  }\n  return Number;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "name", "ref_name": "movieName", "ref_type": "char *"}, {"name": "s1", "type": "char *", "pred_name": "namea", "ref_name": "nameFilm", "ref_type": "char *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "anszom", "repo_name": "vtty", "path": "anszom/vtty/f40b52a1cfe1e14a2264d48e844db20bf47b9ac5b5ea2f8348ba5fdbf1c9aed5", "path_in_repo": "anszom/vtty/test/pty_test", "objdump": "000000000040265c <t10_slave_write_block>:\n  40265c:\t55                   \tpush   %rbp\n  40265d:\t48 89 e5             \tmov    %rsp,%rbp\n  402660:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  402667:\t89 bd 6c ff ff ff    \tmov    %edi,-0x94(%rbp)\n  40266d:\t8b 85 6c ff ff ff    \tmov    -0x94(%rbp),%eax\n  402673:\t48 8b 14 c5 20 61 40 \tmov    0x406120(,%rax,8),%rdx\n  40267a:\t00 \n  40267b:\t8b 85 6c ff ff ff    \tmov    -0x94(%rbp),%eax\n  402681:\t48 8b 04 c5 00 61 40 \tmov    0x406100(,%rax,8),%rax\n  402688:\t00 \n  402689:\t48 89 c6             \tmov    %rax,%rsi\n  40268c:\tbf f8 44 40 00       \tmov    $0x4044f8,%edi\n  402691:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402696:\te8 17 ec ff ff       \tcallq  4012b2 <t_begin>\n  40269b:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  40269f:\t48 8d 45 dc          \tlea    -0x24(%rbp),%rax\n  4026a3:\t48 89 d6             \tmov    %rdx,%rsi\n  4026a6:\t48 89 c7             \tmov    %rax,%rdi\n  4026a9:\te8 0d f1 ff ff       \tcallq  4017bb <open_pair>\n  4026ae:\t83 bd 6c ff ff ff 02 \tcmpl   $0x2,-0x94(%rbp)\n  4026b5:\t0f 84 6a 01 00 00    \tje     402825 <t10_slave_write_block+0x1c9>\n  4026bb:\t83 bd 6c ff ff ff 02 \tcmpl   $0x2,-0x94(%rbp)\n  4026c2:\t0f 87 18 02 00 00    \tja     4028e0 <t10_slave_write_block+0x284>\n  4026c8:\t83 bd 6c ff ff ff 00 \tcmpl   $0x0,-0x94(%rbp)\n  4026cf:\t74 12                \tje     4026e3 <t10_slave_write_block+0x87>\n  4026d1:\t83 bd 6c ff ff ff 01 \tcmpl   $0x1,-0x94(%rbp)\n  4026d8:\t0f 84 8a 00 00 00    \tje     402768 <t10_slave_write_block+0x10c>\n  4026de:\te9 fd 01 00 00       \tjmpq   4028e0 <t10_slave_write_block+0x284>\n  4026e3:\tbf 64 00 00 00       \tmov    $0x64,%edi\n  4026e8:\te8 22 f5 ff ff       \tcallq  401c0f <set_timeout>\n  4026ed:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  4026f0:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n  4026f7:\tba 64 00 00 00       \tmov    $0x64,%edx\n  4026fc:\t48 89 ce             \tmov    %rcx,%rsi\n  4026ff:\t89 c7                \tmov    %eax,%edi\n  402701:\te8 8a e9 ff ff       \tcallq  401090 <write@plt>\n  402706:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  402709:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  40270d:\t79 0c                \tjns    40271b <t10_slave_write_block+0xbf>\n  40270f:\te8 2c e9 ff ff       \tcallq  401040 <__errno_location@plt>\n  402714:\t8b 00                \tmov    (%rax),%eax\n  402716:\t83 f8 04             \tcmp    $0x4,%eax\n  402719:\t74 41                \tje     40275c <t10_slave_write_block+0x100>\n  40271b:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40271e:\t83 f8 63             \tcmp    $0x63,%eax\n  402721:\t76 3f                \tjbe    402762 <t10_slave_write_block+0x106>\n  402723:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  402726:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  402729:\t83 7d e8 64          \tcmpl   $0x64,-0x18(%rbp)\n  40272d:\t0f 94 c0             \tsete   %al\n  402730:\t0f b6 c0             \tmovzbl %al,%eax\n  402733:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  402736:\t41 b9 64 00 00 00    \tmov    $0x64,%r9d\n  40273c:\t41 89 d0             \tmov    %edx,%r8d\n  40273f:\tb9 a5 01 00 00       \tmov    $0x1a5,%ecx\n  402744:\tba 52 40 40 00       \tmov    $0x404052,%edx\n  402749:\tbe 23 45 40 00       \tmov    $0x404523,%esi\n  40274e:\t89 c7                \tmov    %eax,%edi\n  402750:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402755:\te8 22 ec ff ff       \tcallq  40137c <t_check>\n  40275a:\teb 87                \tjmp    4026e3 <t10_slave_write_block+0x87>\n  40275c:\t90                   \tnop\n  40275d:\te9 7e 01 00 00       \tjmpq   4028e0 <t10_slave_write_block+0x284>\n  402762:\t90                   \tnop\n  402763:\te9 78 01 00 00       \tjmpq   4028e0 <t10_slave_write_block+0x284>\n  402768:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  40276b:\tba 00 08 00 00       \tmov    $0x800,%edx\n  402770:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  402775:\t89 c7                \tmov    %eax,%edi\n  402777:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40277c:\te8 ff e8 ff ff       \tcallq  401080 <fcntl@plt>\n  402781:\tbf 64 00 00 00       \tmov    $0x64,%edi\n  402786:\te8 84 f4 ff ff       \tcallq  401c0f <set_timeout>\n  40278b:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  40278e:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n  402795:\tba 64 00 00 00       \tmov    $0x64,%edx\n  40279a:\t48 89 ce             \tmov    %rcx,%rsi\n  40279d:\t89 c7                \tmov    %eax,%edi\n  40279f:\te8 ec e8 ff ff       \tcallq  401090 <write@plt>\n  4027a4:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4027a7:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4027ab:\t7e 24                \tjle    4027d1 <t10_slave_write_block+0x175>\n  4027ad:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4027b0:\t83 f8 63             \tcmp    $0x63,%eax\n  4027b3:\t77 1c                \tja     4027d1 <t10_slave_write_block+0x175>\n  4027b5:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  4027b8:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n  4027bf:\tba 64 00 00 00       \tmov    $0x64,%edx\n  4027c4:\t48 89 ce             \tmov    %rcx,%rsi\n  4027c7:\t89 c7                \tmov    %eax,%edi\n  4027c9:\te8 c2 e8 ff ff       \tcallq  401090 <write@plt>\n  4027ce:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4027d1:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4027d5:\t79 0c                \tjns    4027e3 <t10_slave_write_block+0x187>\n  4027d7:\te8 64 e8 ff ff       \tcallq  401040 <__errno_location@plt>\n  4027dc:\t8b 00                \tmov    (%rax),%eax\n  4027de:\t83 f8 0b             \tcmp    $0xb,%eax\n  4027e1:\t74 3c                \tje     40281f <t10_slave_write_block+0x1c3>\n  4027e3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4027e6:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  4027e9:\t83 7d f0 64          \tcmpl   $0x64,-0x10(%rbp)\n  4027ed:\t0f 94 c0             \tsete   %al\n  4027f0:\t0f b6 c0             \tmovzbl %al,%eax\n  4027f3:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  4027f6:\t41 b9 64 00 00 00    \tmov    $0x64,%r9d\n  4027fc:\t41 89 d0             \tmov    %edx,%r8d\n  4027ff:\tb9 b7 01 00 00       \tmov    $0x1b7,%ecx\n  402804:\tba 52 40 40 00       \tmov    $0x404052,%edx\n  402809:\tbe 23 45 40 00       \tmov    $0x404523,%esi\n  40280e:\t89 c7                \tmov    %eax,%edi\n  402810:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402815:\te8 62 eb ff ff       \tcallq  40137c <t_check>\n  40281a:\te9 62 ff ff ff       \tjmpq   402781 <t10_slave_write_block+0x125>\n  40281f:\t90                   \tnop\n  402820:\te9 bb 00 00 00       \tjmpq   4028e0 <t10_slave_write_block+0x284>\n  402825:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  402828:\tbe 64 00 00 00       \tmov    $0x64,%esi\n  40282d:\t89 c7                \tmov    %eax,%edi\n  40282f:\te8 56 f5 ff ff       \tcallq  401d8a <select_write>\n  402834:\t85 c0                \ttest   %eax,%eax\n  402836:\t0f 84 a2 00 00 00    \tje     4028de <t10_slave_write_block+0x282>\n  40283c:\tbf 64 00 00 00       \tmov    $0x64,%edi\n  402841:\te8 c9 f3 ff ff       \tcallq  401c0f <set_timeout>\n  402846:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  402849:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n  402850:\tba 64 00 00 00       \tmov    $0x64,%edx\n  402855:\t48 89 ce             \tmov    %rcx,%rsi\n  402858:\t89 c7                \tmov    %eax,%edi\n  40285a:\te8 31 e8 ff ff       \tcallq  401090 <write@plt>\n  40285f:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  402862:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  402866:\t0f 9f c0             \tsetg   %al\n  402869:\t0f b6 c0             \tmovzbl %al,%eax\n  40286c:\tb9 c4 01 00 00       \tmov    $0x1c4,%ecx\n  402871:\tba 52 40 40 00       \tmov    $0x404052,%edx\n  402876:\tbe 36 45 40 00       \tmov    $0x404536,%esi\n  40287b:\t89 c7                \tmov    %eax,%edi\n  40287d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402882:\te8 f5 ea ff ff       \tcallq  40137c <t_check>\n  402887:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40288c:\te8 7e f3 ff ff       \tcallq  401c0f <set_timeout>\n  402891:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  402894:\t83 f8 63             \tcmp    $0x63,%eax\n  402897:\t77 8c                \tja     402825 <t10_slave_write_block+0x1c9>\n  402899:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  40289c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4028a1:\t89 c7                \tmov    %eax,%edi\n  4028a3:\te8 e2 f4 ff ff       \tcallq  401d8a <select_write>\n  4028a8:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  4028ab:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  4028af:\t0f 94 c0             \tsete   %al\n  4028b2:\t0f b6 c0             \tmovzbl %al,%eax\n  4028b5:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  4028b8:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  4028be:\t41 89 d0             \tmov    %edx,%r8d\n  4028c1:\tb9 c9 01 00 00       \tmov    $0x1c9,%ecx\n  4028c6:\tba 52 40 40 00       \tmov    $0x404052,%edx\n  4028cb:\tbe 48 45 40 00       \tmov    $0x404548,%esi\n  4028d0:\t89 c7                \tmov    %eax,%edi\n  4028d2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4028d7:\te8 a0 ea ff ff       \tcallq  40137c <t_check>\n  4028dc:\teb 01                \tjmp    4028df <t10_slave_write_block+0x283>\n  4028de:\t90                   \tnop\n  4028df:\t90                   \tnop\n  4028e0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4028e5:\te8 5f eb ff ff       \tcallq  401449 <t_ok>\n  4028ea:\t83 bd 6c ff ff ff 01 \tcmpl   $0x1,-0x94(%rbp)\n  4028f1:\t0f 84 23 01 00 00    \tje     402a1a <t10_slave_write_block+0x3be>\n  4028f7:\t8b 85 6c ff ff ff    \tmov    -0x94(%rbp),%eax\n  4028fd:\t48 8b 04 c5 00 61 40 \tmov    0x406100(,%rax,8),%rax\n  402904:\t00 \n  402905:\t48 89 c6             \tmov    %rax,%rsi\n  402908:\tbf 70 45 40 00       \tmov    $0x404570,%edi\n  40290d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402912:\te8 9b e9 ff ff       \tcallq  4012b2 <t_begin>\n  402917:\te8 94 e8 ff ff       \tcallq  4011b0 <fork@plt>\n  40291c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  40291f:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  402923:\t75 3d                \tjne    402962 <t10_slave_write_block+0x306>\n  402925:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40292a:\te8 a1 e7 ff ff       \tcallq  4010d0 <alarm@plt>\n  40292f:\tbf a0 86 01 00       \tmov    $0x186a0,%edi\n  402934:\te8 87 e8 ff ff       \tcallq  4011c0 <usleep@plt>\n  402939:\t90                   \tnop\n  40293a:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  40293d:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n  402944:\tba 64 00 00 00       \tmov    $0x64,%edx\n  402949:\t48 89 ce             \tmov    %rcx,%rsi\n  40294c:\t89 c7                \tmov    %eax,%edi\n  40294e:\te8 9d e7 ff ff       \tcallq  4010f0 <read@plt>\n  402953:\t48 85 c0             \ttest   %rax,%rax\n  402956:\t7f e2                \tjg     40293a <t10_slave_write_block+0x2de>\n  402958:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40295d:\te8 ee e6 ff ff       \tcallq  401050 <_exit@plt>\n  402962:\t83 bd 6c ff ff ff 00 \tcmpl   $0x0,-0x94(%rbp)\n  402969:\t75 49                \tjne    4029b4 <t10_slave_write_block+0x358>\n  40296b:\tbf fa 00 00 00       \tmov    $0xfa,%edi\n  402970:\te8 9a f2 ff ff       \tcallq  401c0f <set_timeout>\n  402975:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  402978:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n  40297f:\tba 64 00 00 00       \tmov    $0x64,%edx\n  402984:\t48 89 ce             \tmov    %rcx,%rsi\n  402987:\t89 c7                \tmov    %eax,%edi\n  402989:\te8 02 e7 ff ff       \tcallq  401090 <write@plt>\n  40298e:\t48 85 c0             \ttest   %rax,%rax\n  402991:\t0f 9f c0             \tsetg   %al\n  402994:\t0f b6 c0             \tmovzbl %al,%eax\n  402997:\tb9 ec 01 00 00       \tmov    $0x1ec,%ecx\n  40299c:\tba 52 40 40 00       \tmov    $0x404052,%edx\n  4029a1:\tbe a8 45 40 00       \tmov    $0x4045a8,%esi\n  4029a6:\t89 c7                \tmov    %eax,%edi\n  4029a8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4029ad:\te8 ca e9 ff ff       \tcallq  40137c <t_check>\n  4029b2:\teb 43                \tjmp    4029f7 <t10_slave_write_block+0x39b>\n  4029b4:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  4029b7:\tbe fa 00 00 00       \tmov    $0xfa,%esi\n  4029bc:\t89 c7                \tmov    %eax,%edi\n  4029be:\te8 c7 f3 ff ff       \tcallq  401d8a <select_write>\n  4029c3:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  4029c6:\t83 7d e0 01          \tcmpl   $0x1,-0x20(%rbp)\n  4029ca:\t0f 94 c0             \tsete   %al\n  4029cd:\t0f b6 c0             \tmovzbl %al,%eax\n  4029d0:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n  4029d3:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n  4029d9:\t41 89 d0             \tmov    %edx,%r8d\n  4029dc:\tb9 ee 01 00 00       \tmov    $0x1ee,%ecx\n  4029e1:\tba 52 40 40 00       \tmov    $0x404052,%edx\n  4029e6:\tbe d0 45 40 00       \tmov    $0x4045d0,%esi\n  4029eb:\t89 c7                \tmov    %eax,%edi\n  4029ed:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4029f2:\te8 85 e9 ff ff       \tcallq  40137c <t_check>\n  4029f7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4029fc:\te8 48 ea ff ff       \tcallq  401449 <t_ok>\n  402a01:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  402a04:\tbe 09 00 00 00       \tmov    $0x9,%esi\n  402a09:\t89 c7                \tmov    %eax,%edi\n  402a0b:\te8 10 e7 ff ff       \tcallq  401120 <kill@plt>\n  402a10:\tbf a0 86 01 00       \tmov    $0x186a0,%edi\n  402a15:\te8 a6 e7 ff ff       \tcallq  4011c0 <usleep@plt>\n  402a1a:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  402a1d:\t89 c7                \tmov    %eax,%edi\n  402a1f:\te8 bc e6 ff ff       \tcallq  4010e0 <close@plt>\n  402a24:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  402a27:\t89 c7                \tmov    %eax,%edi\n  402a29:\te8 b2 e6 ff ff       \tcallq  4010e0 <close@plt>\n  402a2e:\t90                   \tnop\n  402a2f:\tc9                   \tleaveq \n  402a30:\tc3                   \tretq   ", "code_s": "int __fastcall t10_slave_write_block(unsigned int <span class=\"supfact\">a1</span>,\n                                     __int64 <span class=\"supfact\">a2</span>,\n                                     __int64 <span class=\"supfact\">a3</span>,\n                                     __int64 <span class=\"supfact\">a4</span>,\n                                     __int64 <span class=\"supfact\">a5</span>,\n                                     __int64 <span class=\"supfact\">a6</span>) {\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  ssize_t <span class=\"supfact\">v12</span>;\n  __int64 v13;\n  __int64 v14;\n  char <span class=\"supfact\">buf</span>[Number];\n  int <span class=\"supfact\">fd</span>;\n  int <span class=\"supfact\">v18</span>;\n  unsigned int <span class=\"supfact\">v19</span>;\n  __pid_t <span class=\"supfact\">pid</span>;\n  unsigned int <span class=\"supfact\">v21</span>;\n  unsigned int <span class=\"supfact\">v22</span>;\n  unsigned int <span class=\"supfact\">v23</span>;\n  unsigned int <span class=\"supfact\">v24</span>;\n  unsigned int <span class=\"supfact\">v25</span>;\n  unsigned int <span class=\"supfact\">v26</span>;\n  t_begin(String, (__int64)blocking_mode[<span class=\"supfact\">a1</span>],\n          (__int64)(&blocking_behaviour)[<span class=\"supfact\">a1</span>],\n          <span class=\"supfact\">a4</span>, <span class=\"supfact\">a5</span>, <span class=\"supfact\">a6</span>);\n  open_pair(&<span class=\"supfact\">v18</span>, (__int64)&<span class=\"supfact\">fd</span>);\n  if (<span class=\"supfact\">a1</span> == Number) {\n    while (select_write(<span class=\"supfact\">fd</span>, Number)) {\n      set_timeout(Number);\n      <span class=\"supfact\">v25</span> =\n          write(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, Number);\n      t_check((int)<span class=\"supfact\">v25</span> > Number, String, (__int64)String,\n              Number L, v6, v7);\n      set_timeout(Number);\n      if (<span class=\"supfact\">v25</span> <= Number) {\n        <span class=\"supfact\">v24</span> = select_write(<span class=\"supfact\">fd</span>, Number);\n        t_check(<span class=\"supfact\">v24</span> == Number, String, (__int64)String,\n                Number L, <span class=\"supfact\">v24</span>, Number L);\n        break;\n      }\n    }\n  } else if (<span class=\"supfact\">a1</span> <= Number) {\n    if (<span class=\"supfact\">a1</span>) {\n      fcntl(<span class=\"supfact\">fd</span>, Number, Number L);\n      while (Number) {\n        set_timeout(Number);\n        <span class=\"supfact\">v26</span> =\n            write(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, Number);\n        if ((int)<span class=\"supfact\">v26</span> > Number && <span class=\"supfact\">v26</span> <= Number)\n          <span class=\"supfact\">v26</span> =\n              write(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, Number);\n        if ((<span class=\"supfact\">v26</span> & Number) != Number &&\n            *__errno_location() == Number)\n          break;\n        <span class=\"supfact\">v23</span> = <span class=\"supfact\">v26</span>;\n        t_check(<span class=\"supfact\">v26</span> == Number, String, (__int64)String,\n                Number L, <span class=\"supfact\">v26</span>, Number L);\n      }\n    } else {\n      while (Number) {\n        set_timeout(Number);\n        <span class=\"supfact\">v22</span> =\n            write(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, Number);\n        if ((<span class=\"supfact\">v22</span> & Number) != Number &&\n            *__errno_location() == Number)\n          break;\n        if (<span class=\"supfact\">v22</span> <= Number)\n          break;\n        <span class=\"supfact\">v21</span> = <span class=\"supfact\">v22</span>;\n        t_check(<span class=\"supfact\">v22</span> == Number, String, (__int64)String,\n                Number L, <span class=\"supfact\">v22</span>, Number L);\n      }\n    }\n  }\n  t_ok();\n  if (<span class=\"supfact\">a1</span> != Number) {\n    t_begin(String, (__int64)blocking_mode[<span class=\"supfact\">a1</span>], v8, v9, v10,\n            v11);\n    <span class=\"supfact\">pid</span> = fork();\n    if (!<span class=\"supfact\">pid</span>) {\n      alarm(Number);\n      usleep(Number);\n      while (read(<span class=\"supfact\">v18</span>, <span class=\"supfact\">buf</span>, Number) > Number)\n        ;\n      _exit(Number);\n    }\n    if (<span class=\"supfact\">a1</span>) {\n      <span class=\"supfact\">v19</span> = select_write(<span class=\"supfact\">fd</span>, Number);\n      t_check(<span class=\"supfact\">v19</span> == Number, String, (__int64)String, Number L,\n              <span class=\"supfact\">v19</span>, Number L);\n    } else {\n      set_timeout(Number);\n      <span class=\"supfact\">v12</span> =\n          write(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, Number);\n      t_check(<span class=\"supfact\">v12</span> > Number, String, (__int64)String, Number L,\n              v13, v14);\n    }\n    t_ok();\n    kill(<span class=\"supfact\">pid</span>, Number);\n    usleep(Number);\n  }\n  close(<span class=\"supfact\">v18</span>);\n  return close(<span class=\"supfact\">fd</span>);\n}", "code_t": "void __cdecl t10_slave_write_block(syncmode_t <span class=\"supfact\">sync</span>) {\n  ssize_t <span class=\"supfact\">v1</span>;\n  char <span class=\"supfact\">buf</span>[Number];\n  int <span class=\"supfact\">tty</span>;\n  int <span class=\"supfact\">mx</span>;\n  int <span class=\"supfact\">__rv_2</span>;\n  int <span class=\"supfact\">pid</span>;\n  int <span class=\"supfact\">__rv</span>;\n  int <span class=\"supfact\">rv</span>;\n  int <span class=\"supfact\">__rv_0</span>;\n  int <span class=\"supfact\">__rv_1</span>;\n  int <span class=\"supfact\">rv_1</span>;\n  int <span class=\"supfact\">rv_0</span>;\n  t_begin(String, blocking_mode[<span class=\"supfact\">sync</span>],\n          blocking_behaviour[<span class=\"supfact\">sync</span>]);\n  open_pair(&<span class=\"supfact\">mx</span>, &<span class=\"supfact\">tty</span>);\n  if (<span class=\"supfact\">sync</span> == S_POLLED) {\n    while (select_write(<span class=\"supfact\">tty</span>, Number)) {\n      set_timeout(Number);\n      <span class=\"supfact\">rv_1</span> =\n          write(<span class=\"supfact\">tty</span>, <span class=\"supfact\">buf</span>, Number);\n      t_check(<span class=\"supfact\">rv_1</span> > Number, String, String, Number L);\n      set_timeout(Number);\n      if ((unsigned int)<span class=\"supfact\">rv_1</span> <= Number) {\n        <span class=\"supfact\">__rv_1</span> = select_write(<span class=\"supfact\">tty</span>, Number);\n        t_check(<span class=\"supfact\">__rv_1</span> == Number, String, String, Number L,\n                (unsigned int)<span class=\"supfact\">__rv_1</span>, Number L);\n        break;\n      }\n    }\n  } else if ((unsigned int)<span class=\"supfact\">sync</span> <= S_POLLED) {\n    if (<span class=\"supfact\">sync</span>) {\n      fcntl(<span class=\"supfact\">tty</span>, Number, Number L);\n      while (Number) {\n        set_timeout(Number);\n        <span class=\"supfact\">rv_0</span> =\n            write(<span class=\"supfact\">tty</span>, <span class=\"supfact\">buf</span>, Number);\n        if (<span class=\"supfact\">rv_0</span> > Number &&\n            (unsigned int)<span class=\"supfact\">rv_0</span> <= Number)\n          <span class=\"supfact\">rv_0</span> =\n              write(<span class=\"supfact\">tty</span>, <span class=\"supfact\">buf</span>, Number);\n        if (<span class=\"supfact\">rv_0</span> < Number && *__errno_location() == Number)\n          break;\n        <span class=\"supfact\">__rv_0</span> = <span class=\"supfact\">rv_0</span>;\n        t_check(<span class=\"supfact\">rv_0</span> == Number, String, String, Number L,\n                (unsigned int)<span class=\"supfact\">rv_0</span>, Number L);\n      }\n    } else {\n      while (Number) {\n        set_timeout(Number);\n        <span class=\"supfact\">rv</span> =\n            write(<span class=\"supfact\">tty</span>, <span class=\"supfact\">buf</span>, Number);\n        if (<span class=\"supfact\">rv</span> < Number && *__errno_location() == Number)\n          break;\n        if ((unsigned int)<span class=\"supfact\">rv</span> <= Number)\n          break;\n        <span class=\"supfact\">__rv</span> = <span class=\"supfact\">rv</span>;\n        t_check(<span class=\"supfact\">rv</span> == Number, String, String, Number L,\n                (unsigned int)<span class=\"supfact\">rv</span>, Number L);\n      }\n    }\n  }\n  t_ok();\n  if (<span class=\"supfact\">sync</span> != S_NONBLOCKING) {\n    t_begin(String, blocking_mode[<span class=\"supfact\">sync</span>]);\n    <span class=\"supfact\">pid</span> = fork();\n    if (!<span class=\"supfact\">pid</span>) {\n      alarm(Number);\n      usleep(Number);\n      while (read(<span class=\"supfact\">mx</span>, <span class=\"supfact\">buf</span>, Number) > Number)\n        ;\n      _exit(Number);\n    }\n    if (<span class=\"supfact\">sync</span>) {\n      <span class=\"supfact\">__rv_2</span> = select_write(<span class=\"supfact\">tty</span>, Number);\n      t_check(<span class=\"supfact\">__rv_2</span> == Number, String, String, Number L,\n              (unsigned int)<span class=\"supfact\">__rv_2</span>, Number L);\n    } else {\n      set_timeout(Number);\n      <span class=\"supfact\">v1</span> =\n          write(<span class=\"supfact\">tty</span>, <span class=\"supfact\">buf</span>, Number);\n      t_check(<span class=\"supfact\">v1</span> > Number, String, String, Number L);\n    }\n    t_ok();\n    kill(<span class=\"supfact\">pid</span>, Number);\n    usleep(Number);\n  }\n  close(<span class=\"supfact\">mx</span>);\n  close(<span class=\"supfact\">tty</span>);\n}", "var": [{"name": "a1", "type": "syncmode_t", "pred_name": "sync", "ref_name": "sync", "ref_type": "syncmode_t"}, {"name": "a2", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v12", "type": "ssize_t", "pred_name": "v1", "ref_name": "v1", "ref_type": "ssize_t"}, {"name": "buf", "type": "char[100]", "pred_name": "buf", "ref_name": "buf", "ref_type": "char[100]"}, {"name": "fd", "type": "int", "pred_name": "tty", "ref_name": "tty", "ref_type": "int"}, {"name": "v18", "type": "int", "pred_name": "mx", "ref_name": "mx", "ref_type": "int"}, {"name": "v19", "type": "int", "pred_name": "__rv_0", "ref_name": "__rv_2", "ref_type": "int"}, {"name": "pid", "type": "pid_t", "pred_name": "pid", "ref_name": "pid", "ref_type": "int"}, {"name": "v21", "type": "int", "pred_name": "__unk__", "ref_name": "__rv", "ref_type": "int"}, {"name": "v22", "type": "int", "pred_name": "__unk__", "ref_name": "rv", "ref_type": "int"}, {"name": "v23", "type": "int", "pred_name": "__unk__", "ref_name": "__rv_0", "ref_type": "int"}, {"name": "v24", "type": "int", "pred_name": "__unk__", "ref_name": "__rv_1", "ref_type": "int"}, {"name": "v25", "type": "int", "pred_name": "__unk__", "ref_name": "rv_1", "ref_type": "int"}, {"name": "v26", "type": "int", "pred_name": "__unk__", "ref_name": "rv_0", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "CPFL", "repo_name": "gxen", "path": "CPFL/gxen/c35b9846bdf3bbe7eb6ad5adfa09ee3654099b36f1db890750fd388704352071", "path_in_repo": "CPFL/gxen/tools/qemu-xen-traditional/qemu-nbd", "objdump": "0000000000407062 <qcow_write>:\n  407062:\t55                   \tpush   %rbp\n  407063:\t48 89 e5             \tmov    %rsp,%rbp\n  407066:\t48 83 ec 40          \tsub    $0x40,%rsp\n  40706a:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  40706e:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  407072:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  407076:\t89 4d c4             \tmov    %ecx,-0x3c(%rbp)\n  407079:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40707d:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  407081:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  407085:\te9 59 01 00 00       \tjmpq   4071e3 <qcow_write+0x181>\n  40708a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40708e:\t8b 40 10             \tmov    0x10(%rax),%eax\n  407091:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  407094:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  407098:\t21 d0                \tand    %edx,%eax\n  40709a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  40709d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4070a1:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4070a4:\t2b 45 ec             \tsub    -0x14(%rbp),%eax\n  4070a7:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4070aa:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4070ad:\t3b 45 c4             \tcmp    -0x3c(%rbp),%eax\n  4070b0:\t7e 06                \tjle    4070b8 <qcow_write+0x56>\n  4070b2:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n  4070b5:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4070b8:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4070bb:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4070be:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n  4070c1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4070c5:\t48 c1 e0 09          \tshl    $0x9,%rax\n  4070c9:\t48 89 c6             \tmov    %rax,%rsi\n  4070cc:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4070cf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4070d3:\t41 89 c9             \tmov    %ecx,%r9d\n  4070d6:\t41 89 d0             \tmov    %edx,%r8d\n  4070d9:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  4070de:\tba 01 00 00 00       \tmov    $0x1,%edx\n  4070e3:\t48 89 c7             \tmov    %rax,%rdi\n  4070e6:\te8 25 f6 ff ff       \tcallq  406710 <get_cluster_offset>\n  4070eb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4070ef:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  4070f4:\t75 0a                \tjne    407100 <qcow_write+0x9e>\n  4070f6:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4070fb:\te9 01 01 00 00       \tjmpq   407201 <qcow_write+0x19f>\n  407100:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  407104:\t8b 80 18 01 00 00    \tmov    0x118(%rax),%eax\n  40710a:\t85 c0                \ttest   %eax,%eax\n  40710c:\t74 77                \tje     407185 <qcow_write+0x123>\n  40710e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  407112:\t48 8d b8 20 01 00 00 \tlea    0x120(%rax),%rdi\n  407119:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40711d:\t48 8b 90 08 01 00 00 \tmov    0x108(%rax),%rdx\n  407124:\t44 8b 45 f8          \tmov    -0x8(%rbp),%r8d\n  407128:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  40712c:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n  407130:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  407134:\t48 83 ec 08          \tsub    $0x8,%rsp\n  407138:\t57                   \tpush   %rdi\n  407139:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n  40713f:\t48 89 c7             \tmov    %rax,%rdi\n  407142:\te8 3d f5 ff ff       \tcallq  406684 <encrypt_sectors>\n  407147:\t48 83 c4 10          \tadd    $0x10,%rsp\n  40714b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40714e:\tc1 e0 09             \tshl    $0x9,%eax\n  407151:\t89 c1                \tmov    %eax,%ecx\n  407153:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  407157:\t48 8b 90 08 01 00 00 \tmov    0x108(%rax),%rdx\n  40715e:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  407161:\tc1 e0 09             \tshl    $0x9,%eax\n  407164:\t48 63 f0             \tmovslq %eax,%rsi\n  407167:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40716b:\t48 01 f0             \tadd    %rsi,%rax\n  40716e:\t48 89 c6             \tmov    %rax,%rsi\n  407171:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  407175:\t48 8b 00             \tmov    (%rax),%rax\n  407178:\t48 89 c7             \tmov    %rax,%rdi\n  40717b:\te8 60 6c 01 00       \tcallq  41dde0 <bdrv_pwrite>\n  407180:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  407183:\teb 31                \tjmp    4071b6 <qcow_write+0x154>\n  407185:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  407188:\tc1 e0 09             \tshl    $0x9,%eax\n  40718b:\t89 c1                \tmov    %eax,%ecx\n  40718d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  407190:\tc1 e0 09             \tshl    $0x9,%eax\n  407193:\t48 63 d0             \tmovslq %eax,%rdx\n  407196:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40719a:\t48 01 d0             \tadd    %rdx,%rax\n  40719d:\t48 89 c6             \tmov    %rax,%rsi\n  4071a0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4071a4:\t48 8b 00             \tmov    (%rax),%rax\n  4071a7:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4071ab:\t48 89 c7             \tmov    %rax,%rdi\n  4071ae:\te8 2d 6c 01 00       \tcallq  41dde0 <bdrv_pwrite>\n  4071b3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4071b6:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4071b9:\tc1 e0 09             \tshl    $0x9,%eax\n  4071bc:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  4071bf:\t74 07                \tje     4071c8 <qcow_write+0x166>\n  4071c1:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4071c6:\teb 39                \tjmp    407201 <qcow_write+0x19f>\n  4071c8:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4071cb:\t29 45 c4             \tsub    %eax,-0x3c(%rbp)\n  4071ce:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4071d1:\t48 98                \tcltq   \n  4071d3:\t48 01 45 d0          \tadd    %rax,-0x30(%rbp)\n  4071d7:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4071da:\tc1 e0 09             \tshl    $0x9,%eax\n  4071dd:\t48 98                \tcltq   \n  4071df:\t48 01 45 c8          \tadd    %rax,-0x38(%rbp)\n  4071e3:\t83 7d c4 00          \tcmpl   $0x0,-0x3c(%rbp)\n  4071e7:\t0f 8f 9d fe ff ff    \tjg     40708a <qcow_write+0x28>\n  4071ed:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4071f1:\t48 c7 80 10 01 00 00 \tmovq   $0xffffffffffffffff,0x110(%rax)\n  4071f8:\tff ff ff ff \n  4071fc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  407201:\tc9                   \tleaveq \n  407202:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qcow_write(__int64 <span class=\"supfact\">a1</span>,\n                              __int64 <span class=\"supfact\">a2</span>,\n                              __int64 <span class=\"supfact\">a3</span>,\n                              int <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  _QWORD *<span class=\"supfact\">v10</span>;\n  signed int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v10</span> = *(_QWORD **)(<span class=\"supfact\">a1</span> + Number);\n  while (<span class=\"supfact\">a4</span> > Number) {\n    <span class=\"supfact\">v9</span> = (*((_DWORD *)<span class=\"supfact\">v10</span> + Number) - Number) &\n                         <span class=\"supfact\">a2</span>;\n    <span class=\"supfact\">v11</span> =\n        *((_DWORD *)<span class=\"supfact\">v10</span> + Number) - <span class=\"supfact\">v9</span>;\n    if (<span class=\"supfact\">v11</span> > <span class=\"supfact\">a4</span>)\n      <span class=\"supfact\">v11</span> = <span class=\"supfact\">a4</span>;\n    <span class=\"supfact\">v8</span> = get_cluster_offset(\n        <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span> << Number, Number, Number,\n        <span class=\"supfact\">v9</span>, <span class=\"supfact\">v9</span> + <span class=\"supfact\">v11</span>);\n    if (!<span class=\"supfact\">v8</span>)\n      return Number;\n    if (*((_DWORD *)<span class=\"supfact\">v10</span> + Number)) {\n      encrypt_sectors((__int64)<span class=\"supfact\">v10</span>, <span class=\"supfact\">a2</span>,\n                      <span class=\"supfact\">v10</span>[Number], <span class=\"supfact\">a3</span>,\n                      <span class=\"supfact\">v11</span>, Number,\n                      (__int64)(<span class=\"supfact\">v10</span> + Number));\n      <span class=\"supfact\">v12</span> =\n          bdrv_pwrite(*<span class=\"supfact\">v10</span>,\n                      (<span class=\"supfact\">v9</span> << Number) + <span class=\"supfact\">v8</span>,\n                      <span class=\"supfact\">v10</span>[Number],\n                      (unsigned int)(<span class=\"supfact\">v11</span> << Number));\n    } else {\n      <span class=\"supfact\">v12</span> = bdrv_pwrite(\n          *<span class=\"supfact\">v10</span>,\n          (<span class=\"supfact\">v9</span> << Number) + <span class=\"supfact\">v8</span>,\n          <span class=\"supfact\">a3</span>, (unsigned int)(<span class=\"supfact\">v11</span> << Number));\n    }\n    if (<span class=\"supfact\">v12</span> != <span class=\"supfact\">v11</span> << Number)\n      return Number;\n    <span class=\"supfact\">a4</span> -= <span class=\"supfact\">v11</span>;\n    <span class=\"supfact\">a2</span> += <span class=\"supfact\">v11</span>;\n    <span class=\"supfact\">a3</span> += <span class=\"supfact\">v11</span> << Number;\n  }\n  <span class=\"supfact\">v10</span>[Number] = Number;\n  return Number L;\n}", "code_t": "int __cdecl qcow_write(BlockDriverState_0 *<span class=\"supfact\">bs</span>,\n                       int64_t <span class=\"supfact\">sector_num</span>,\n                       const uint8_t *<span class=\"supfact\">buf</span>,\n                       int <span class=\"supfact\">nb_sectors</span>) {\n  uint64_t <span class=\"supfact\">cluster_offset</span>;\n  int <span class=\"supfact\">index_in_cluster</span>;\n  BDRVQcowState_0 *<span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">n</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">s</span> = (BDRVQcowState_0 *)<span class=\"supfact\">bs</span>->opaque;\n  while (<span class=\"supfact\">nb_sectors</span> > Number) {\n    <span class=\"supfact\">index_in_cluster</span> =\n        (<span class=\"supfact\">s</span>->cluster_sectors - Number) &\n        <span class=\"supfact\">sector_num</span>;\n    <span class=\"supfact\">n</span> =\n        <span class=\"supfact\">s</span>->cluster_sectors - <span class=\"supfact\">index_in_cluster</span>;\n    if (<span class=\"supfact\">n</span> > <span class=\"supfact\">nb_sectors</span>)\n      <span class=\"supfact\">n</span> = <span class=\"supfact\">nb_sectors</span>;\n    <span class=\"supfact\">cluster_offset</span> = get_cluster_offset(\n        <span class=\"supfact\">bs</span>, <span class=\"supfact\">sector_num</span> << Number, Number,\n        Number, <span class=\"supfact\">index_in_cluster</span>,\n        <span class=\"supfact\">index_in_cluster</span> + <span class=\"supfact\">n</span>);\n    if (!<span class=\"supfact\">cluster_offset</span>)\n      return Number;\n    if (<span class=\"supfact\">s</span>->crypt_method) {\n      encrypt_sectors(<span class=\"supfact\">s</span>, <span class=\"supfact\">sector_num</span>,\n                      <span class=\"supfact\">s</span>->cluster_data, <span class=\"supfact\">buf</span>,\n                      <span class=\"supfact\">n</span>, Number,\n                      &<span class=\"supfact\">s</span>->aes_encrypt_key);\n      <span class=\"supfact\">ret</span> = bdrv_pwrite(\n          <span class=\"supfact\">s</span>->hd,\n          (<span class=\"supfact\">index_in_cluster</span> << Number) +\n              <span class=\"supfact\">cluster_offset</span>,\n          <span class=\"supfact\">s</span>->cluster_data, <span class=\"supfact\">n</span> << Number);\n    } else {\n      <span class=\"supfact\">ret</span> =\n          bdrv_pwrite(<span class=\"supfact\">s</span>->hd,\n                      (<span class=\"supfact\">index_in_cluster</span> << Number) +\n                          <span class=\"supfact\">cluster_offset</span>,\n                      <span class=\"supfact\">buf</span>, <span class=\"supfact\">n</span> << Number);\n    }\n    if (<span class=\"supfact\">ret</span> != <span class=\"supfact\">n</span> << Number)\n      return Number;\n    <span class=\"supfact\">nb_sectors</span> -= <span class=\"supfact\">n</span>;\n    <span class=\"supfact\">sector_num</span> += <span class=\"supfact\">n</span>;\n    <span class=\"supfact\">buf</span> += Number * <span class=\"supfact\">n</span>;\n  }\n  <span class=\"supfact\">s</span>->cluster_cache_offset = Number;\n  return Number;\n}", "var": [{"name": "a1", "type": "BlockDriverState_0 *", "pred_name": "bs", "ref_name": "bs", "ref_type": "BlockDriverState_0 *"}, {"name": "a2", "type": "int64_t", "pred_name": "sector_num", "ref_name": "sector_num", "ref_type": "int64_t"}, {"name": "a3", "type": "const uint8_t *", "pred_name": "buf", "ref_name": "buf", "ref_type": "const uint8_t *"}, {"name": "a4", "type": "int", "pred_name": "nb_sectors", "ref_name": "nb_sectors", "ref_type": "int"}, {"name": "v8", "type": "int64_t", "pred_name": "cluster_offset", "ref_name": "cluster_offset", "ref_type": "uint64_t"}, {"name": "v9", "type": "int", "pred_name": "index_in_cluster", "ref_name": "index_in_cluster", "ref_type": "int"}, {"name": "v10", "type": "BDRVQcowState_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "BDRVQcowState_0 *"}, {"name": "v11", "type": "int", "pred_name": "n", "ref_name": "n", "ref_type": "int"}, {"name": "v12", "type": "int", "pred_name": "index_in_cluster", "ref_name": "ret", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "dksslq", "repo_name": "debian-opiwin", "path": "dksslq/debian-opiwin/50c393538a25b1b767d691a7933d2d7b2b40eed1686603a2e36f23b475e91fe0", "path_in_repo": "dksslq/debian-opiwin/linux/drivers/net/wireless/rtl8188eu/hostapd-0.8/hostapd/hostapd_cli", "objdump": "00000000004032a2 <hostapd_cli_recv_pending>:\n  4032a2:\t55                   \tpush   %rbp\n  4032a3:\t48 89 e5             \tmov    %rsp,%rbp\n  4032a6:\t48 81 ec 20 01 00 00 \tsub    $0x120,%rsp\n  4032ad:\t48 89 bd e8 fe ff ff \tmov    %rdi,-0x118(%rbp)\n  4032b4:\t89 b5 e4 fe ff ff    \tmov    %esi,-0x11c(%rbp)\n  4032ba:\t89 95 e0 fe ff ff    \tmov    %edx,-0x120(%rbp)\n  4032c0:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  4032c7:\t48 8b 05 c2 60 00 00 \tmov    0x60c2(%rip),%rax        # 409390 <ctrl_conn>\n  4032ce:\t48 85 c0             \ttest   %rax,%rax\n  4032d1:\t0f 84 b1 00 00 00    \tje     403388 <hostapd_cli_recv_pending+0xe6>\n  4032d7:\te9 93 00 00 00       \tjmpq   40336f <hostapd_cli_recv_pending+0xcd>\n  4032dc:\t48 c7 45 f0 ff 00 00 \tmovq   $0xff,-0x10(%rbp)\n  4032e3:\t00 \n  4032e4:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  4032e8:\t48 8d 8d f0 fe ff ff \tlea    -0x110(%rbp),%rcx\n  4032ef:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n  4032f6:\t48 89 ce             \tmov    %rcx,%rsi\n  4032f9:\t48 89 c7             \tmov    %rax,%rdi\n  4032fc:\te8 c1 0e 00 00       \tcallq  4041c2 <wpa_ctrl_recv>\n  403301:\t85 c0                \ttest   %eax,%eax\n  403303:\t75 5e                \tjne    403363 <hostapd_cli_recv_pending+0xc1>\n  403305:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  403309:\tc6 84 05 f0 fe ff ff \tmovb   $0x0,-0x110(%rbp,%rax,1)\n  403310:\t00 \n  403311:\t83 bd e0 fe ff ff 00 \tcmpl   $0x0,-0x120(%rbp)\n  403318:\t74 18                \tje     403332 <hostapd_cli_recv_pending+0x90>\n  40331a:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  40331e:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  403325:\t48 89 d6             \tmov    %rdx,%rsi\n  403328:\t48 89 c7             \tmov    %rax,%rdi\n  40332b:\te8 6f f5 ff ff       \tcallq  40289f <hostapd_cli_action_process>\n  403330:\teb 3d                \tjmp    40336f <hostapd_cli_recv_pending+0xcd>\n  403332:\t83 bd e4 fe ff ff 00 \tcmpl   $0x0,-0x11c(%rbp)\n  403339:\t74 10                \tje     40334b <hostapd_cli_recv_pending+0xa9>\n  40333b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40333f:\t74 0a                \tje     40334b <hostapd_cli_recv_pending+0xa9>\n  403341:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  403346:\te8 05 ed ff ff       \tcallq  402050 <putchar@plt>\n  40334b:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  403352:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  403359:\t48 89 c7             \tmov    %rax,%rdi\n  40335c:\te8 3f ed ff ff       \tcallq  4020a0 <puts@plt>\n  403361:\teb 0c                \tjmp    40336f <hostapd_cli_recv_pending+0xcd>\n  403363:\tbf 78 63 40 00       \tmov    $0x406378,%edi\n  403368:\te8 33 ed ff ff       \tcallq  4020a0 <puts@plt>\n  40336d:\teb 1a                \tjmp    403389 <hostapd_cli_recv_pending+0xe7>\n  40336f:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n  403376:\t48 89 c7             \tmov    %rax,%rdi\n  403379:\te8 97 0e 00 00       \tcallq  404215 <wpa_ctrl_pending>\n  40337e:\t85 c0                \ttest   %eax,%eax\n  403380:\t0f 85 56 ff ff ff    \tjne    4032dc <hostapd_cli_recv_pending+0x3a>\n  403386:\teb 01                \tjmp    403389 <hostapd_cli_recv_pending+0xe7>\n  403388:\t90                   \tnop\n  403389:\tc9                   \tleaveq \n  40338a:\tc3                   \tretq   ", "code_s": "int __fastcall hostapd_cli_recv_pending(__int64 <span class=\"supfact\">a1</span>,\n                                        int <span class=\"supfact\">a2</span>,\n                                        int <span class=\"supfact\">a3</span>) {\n  int <span class=\"supfact\">result</span>;\n  char <span class=\"supfact\">s</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = Number;\n  <span class=\"supfact\">result</span> = ctrl_conn;\n  if (ctrl_conn) {\n    while (Number) {\n      <span class=\"supfact\">result</span> = wpa_ctrl_pending(<span class=\"supfact\">a1</span>);\n      if (!<span class=\"supfact\">result</span>)\n        break;\n      <span class=\"supfact\">v6</span> = Number L;\n      if ((unsigned int)wpa_ctrl_recv(<span class=\"supfact\">a1</span>, <span class=\"supfact\">s</span>,\n                                      &<span class=\"supfact\">v6</span>))\n        return puts(String);\n      <span class=\"supfact\">s</span>[<span class=\"supfact\">v6</span>] = Number;\n      if (<span class=\"supfact\">a3</span>) {\n        hostapd_cli_action_process(<span class=\"supfact\">s</span>);\n      } else {\n        if (<span class=\"supfact\">a2</span>) {\n          if (<span class=\"supfact\">v7</span>)\n            putchar(Number);\n        }\n        <span class=\"supfact\">v7</span> = Number;\n        puts(<span class=\"supfact\">s</span>);\n      }\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl hostapd_cli_recv_pending(wpa_ctrl *<span class=\"supfact\">ctrl</span>,\n                                      int <span class=\"supfact\">in_read</span>,\n                                      int <span class=\"supfact\">action_monitor</span>) {\n  char <span class=\"supfact\">buf</span>[Number];\n  size_t <span class=\"supfact\">len</span>;\n  int <span class=\"supfact\">first</span>;\n  <span class=\"supfact\">first</span> = Number;\n  if (ctrl_conn) {\n    while (wpa_ctrl_pending(<span class=\"supfact\">ctrl</span>)) {\n      <span class=\"supfact\">len</span> = Number L;\n      if (wpa_ctrl_recv(<span class=\"supfact\">ctrl</span>, <span class=\"supfact\">buf</span>,\n                        &<span class=\"supfact\">len</span>)) {\n        puts(String);\n        return;\n      }\n      <span class=\"supfact\">buf</span>[<span class=\"supfact\">len</span>] = Number;\n      if (<span class=\"supfact\">action_monitor</span>) {\n        hostapd_cli_action_process(<span class=\"supfact\">buf</span>, <span class=\"supfact\">len</span>);\n      } else {\n        if (<span class=\"supfact\">in_read</span>) {\n          if (<span class=\"supfact\">first</span>)\n            putchar(Number);\n        }\n        <span class=\"supfact\">first</span> = Number;\n        puts(<span class=\"supfact\">buf</span>);\n      }\n    }\n  }\n}", "var": [{"name": "a1", "type": "wpa_ctrl *", "pred_name": "ctrl", "ref_name": "ctrl", "ref_type": "wpa_ctrl *"}, {"name": "a2", "type": "int", "pred_name": "in_read", "ref_name": "in_read", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "action_monitor", "ref_name": "action_monitor", "ref_type": "int"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "s", "type": "char[256]", "pred_name": "buf", "ref_name": "buf", "ref_type": "char[256]"}, {"name": "v6", "type": "size_t", "pred_name": "len", "ref_name": "len", "ref_type": "size_t"}, {"name": "v7", "type": "int", "pred_name": "first", "ref_name": "first", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "Khadgar1006", "repo_name": "FORLINX-Linux3.14-I.MX6UL", "path": "Khadgar1006/FORLINX-Linux3.14-I.MX6UL/cb80a4543097f86266ec8b4250fb7934ee0e1be03e7a0656e30eb7ddba7342dc", "path_in_repo": "Khadgar1006/FORLINX-Linux3.14-I.MX6UL/linux-3.14.38/tools/perf/builtin-top.o", "objdump": "00000000000013d5 <perf_top__handle_keypress>:\n    13d5:\t55                   \tpush   %rbp\n    13d6:\t48 89 e5             \tmov    %rsp,%rbp\n    13d9:\t48 81 ec 30 01 00 00 \tsub    $0x130,%rsp\n    13e0:\t48 89 bd d8 fe ff ff \tmov    %rdi,-0x128(%rbp)\n    13e7:\t89 b5 d4 fe ff ff    \tmov    %esi,-0x12c(%rbp)\n    13ed:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    13f4:\t00 00 \n    13f6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    13fa:\t31 c0                \txor    %eax,%eax\n    13fc:\tc6 85 ef fe ff ff 01 \tmovb   $0x1,-0x111(%rbp)\n    1403:\t8b 95 d4 fe ff ff    \tmov    -0x12c(%rbp),%edx\n    1409:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1410:\t89 d6                \tmov    %edx,%esi\n    1412:\t48 89 c7             \tmov    %rax,%rdi\n    1415:\te8 4a ff ff ff       \tcallq  1364 <perf_top__key_mapped>\n    141a:\t85 c0                \ttest   %eax,%eax\n    141c:\t0f 85 6a 01 00 00    \tjne    158c <perf_top__handle_keypress+0x1b7>\n    1422:\t48 c7 85 18 ff ff ff \tmovq   $0x0,-0xe8(%rbp)\n    1429:\t00 00 00 00 \n    142d:\t66 c7 85 1c ff ff ff \tmovw   $0x1,-0xe4(%rbp)\n    1434:\t01 00 \n    1436:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    143d:\t48 89 c7             \tmov    %rax,%rdi\n    1440:\te8 d2 fc ff ff       \tcallq  1117 <perf_top__print_mapped_keys>\n    1445:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 144c <perf_top__handle_keypress+0x77>\n    144c:\t48 89 c1             \tmov    %rax,%rcx\n    144f:\tba 2f 00 00 00       \tmov    $0x2f,%edx\n    1454:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1459:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    145e:\te8 00 00 00 00       \tcallq  1463 <perf_top__handle_keypress+0x8e>\n    1463:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 146a <perf_top__handle_keypress+0x95>\n    146a:\t48 89 c7             \tmov    %rax,%rdi\n    146d:\te8 00 00 00 00       \tcallq  1472 <perf_top__handle_keypress+0x9d>\n    1472:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    1479:\t48 89 c6             \tmov    %rax,%rsi\n    147c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1481:\te8 00 00 00 00       \tcallq  1486 <perf_top__handle_keypress+0xb1>\n    1486:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    148d:\t48 8b 95 68 ff ff ff \tmov    -0x98(%rbp),%rdx\n    1494:\t48 89 85 20 ff ff ff \tmov    %rax,-0xe0(%rbp)\n    149b:\t48 89 95 28 ff ff ff \tmov    %rdx,-0xd8(%rbp)\n    14a2:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n    14a9:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    14b0:\t48 89 85 30 ff ff ff \tmov    %rax,-0xd0(%rbp)\n    14b7:\t48 89 95 38 ff ff ff \tmov    %rdx,-0xc8(%rbp)\n    14be:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    14c2:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    14c6:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n    14cd:\t48 89 95 48 ff ff ff \tmov    %rdx,-0xb8(%rbp)\n    14d4:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    14d8:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n    14df:\t8b 45 98             \tmov    -0x68(%rbp),%eax\n    14e2:\t89 85 58 ff ff ff    \tmov    %eax,-0xa8(%rbp)\n    14e8:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n    14ee:\t83 e0 f5             \tand    $0xfffffff5,%eax\n    14f1:\t89 85 2c ff ff ff    \tmov    %eax,-0xd4(%rbp)\n    14f7:\tc6 85 37 ff ff ff 00 \tmovb   $0x0,-0xc9(%rbp)\n    14fe:\tc6 85 36 ff ff ff 00 \tmovb   $0x0,-0xca(%rbp)\n    1505:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    150c:\t48 89 c2             \tmov    %rax,%rdx\n    150f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1514:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1519:\te8 00 00 00 00       \tcallq  151e <perf_top__handle_keypress+0x149>\n    151e:\t48 8d 85 18 ff ff ff \tlea    -0xe8(%rbp),%rax\n    1525:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    152a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    152f:\t48 89 c7             \tmov    %rax,%rdi\n    1532:\te8 00 00 00 00       \tcallq  1537 <perf_top__handle_keypress+0x162>\n    1537:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 153e <perf_top__handle_keypress+0x169>\n    153e:\t48 89 c7             \tmov    %rax,%rdi\n    1541:\te8 00 00 00 00       \tcallq  1546 <perf_top__handle_keypress+0x171>\n    1546:\t89 85 d4 fe ff ff    \tmov    %eax,-0x12c(%rbp)\n    154c:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    1553:\t48 89 c2             \tmov    %rax,%rdx\n    1556:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    155b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1560:\te8 00 00 00 00       \tcallq  1565 <perf_top__handle_keypress+0x190>\n    1565:\t8b 95 d4 fe ff ff    \tmov    -0x12c(%rbp),%edx\n    156b:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1572:\t89 d6                \tmov    %edx,%esi\n    1574:\t48 89 c7             \tmov    %rax,%rdi\n    1577:\te8 e8 fd ff ff       \tcallq  1364 <perf_top__key_mapped>\n    157c:\t85 c0                \ttest   %eax,%eax\n    157e:\t75 0c                \tjne    158c <perf_top__handle_keypress+0x1b7>\n    1580:\t0f b6 85 ef fe ff ff \tmovzbl -0x111(%rbp),%eax\n    1587:\te9 e5 04 00 00       \tjmpq   1a71 <perf_top__handle_keypress+0x69c>\n    158c:\t8b 85 d4 fe ff ff    \tmov    -0x12c(%rbp),%eax\n    1592:\t83 e8 45             \tsub    $0x45,%eax\n    1595:\t83 f8 35             \tcmp    $0x35,%eax\n    1598:\t0f 87 c5 04 00 00    \tja     1a63 <perf_top__handle_keypress+0x68e>\n    159e:\t89 c0                \tmov    %eax,%eax\n    15a0:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    15a7:\t00 \n    15a8:\tff e0                \tjmpq   *%rax\n    15aa:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    15b1:\t48 05 20 01 00 00    \tadd    $0x120,%rax\n    15b7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    15bc:\t48 89 c7             \tmov    %rax,%rdi\n    15bf:\te8 0e f8 ff ff       \tcallq  dd2 <prompt_integer>\n    15c4:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    15cb:\t8b 80 20 01 00 00    \tmov    0x120(%rax),%eax\n    15d1:\t85 c0                \ttest   %eax,%eax\n    15d3:\t0f 8f 8d 04 00 00    \tjg     1a66 <perf_top__handle_keypress+0x691>\n    15d9:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    15e0:\tc7 80 20 01 00 00 01 \tmovl   $0x1,0x120(%rax)\n    15e7:\t00 00 00 \n    15ea:\te9 77 04 00 00       \tjmpq   1a66 <perf_top__handle_keypress+0x691>\n    15ef:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    15f6:\t48 05 18 01 00 00    \tadd    $0x118,%rax\n    15fc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1601:\t48 89 c7             \tmov    %rax,%rdi\n    1604:\te8 c9 f7 ff ff       \tcallq  dd2 <prompt_integer>\n    1609:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1610:\t8b 80 18 01 00 00    \tmov    0x118(%rax),%eax\n    1616:\t85 c0                \ttest   %eax,%eax\n    1618:\t75 60                \tjne    167a <perf_top__handle_keypress+0x2a5>\n    161a:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n    1621:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1626:\tb9 13 00 00 00       \tmov    $0x13,%ecx\n    162b:\t48 89 d7             \tmov    %rdx,%rdi\n    162e:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    1631:\t48 c7 85 60 ff ff ff \tmovq   $0x0,-0xa0(%rbp)\n    1638:\t00 00 00 00 \n    163c:\tc7 45 e8 04 00 00 00 \tmovl   $0x4,-0x18(%rbp)\n    1643:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    164a:\t48 89 c2             \tmov    %rax,%rdx\n    164d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1652:\tbf 1c 00 00 00       \tmov    $0x1c,%edi\n    1657:\te8 f2 ec ff ff       \tcallq  34e <perf_top__sig_winch>\n    165c:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    1663:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1668:\t48 89 c6             \tmov    %rax,%rsi\n    166b:\tbf 1c 00 00 00       \tmov    $0x1c,%edi\n    1670:\te8 00 00 00 00       \tcallq  1675 <perf_top__handle_keypress+0x2a0>\n    1675:\te9 f0 03 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    167a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    167f:\tbf 1c 00 00 00       \tmov    $0x1c,%edi\n    1684:\te8 00 00 00 00       \tcallq  1689 <perf_top__handle_keypress+0x2b4>\n    1689:\te9 dc 03 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    168e:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1695:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1699:\t8b 80 10 08 00 00    \tmov    0x810(%rax),%eax\n    169f:\t83 f8 01             \tcmp    $0x1,%eax\n    16a2:\t0f 8e 14 02 00 00    \tjle    18bc <perf_top__handle_keypress+0x4e7>\n    16a8:\tc7 85 18 ff ff ff 00 \tmovl   $0x0,-0xe8(%rbp)\n    16af:\t00 00 00 \n    16b2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 16b9 <perf_top__handle_keypress+0x2e4>\n    16b9:\t48 89 c1             \tmov    %rax,%rcx\n    16bc:\tba 12 00 00 00       \tmov    $0x12,%edx\n    16c1:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    16c6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    16cb:\te8 00 00 00 00       \tcallq  16d0 <perf_top__handle_keypress+0x2fb>\n    16d0:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    16d7:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    16db:\t48 8b 00             \tmov    (%rax),%rax\n    16de:\t48 89 85 f8 fe ff ff \tmov    %rax,-0x108(%rbp)\n    16e5:\t48 8b 95 f8 fe ff ff \tmov    -0x108(%rbp),%rdx\n    16ec:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    16f3:\t48 89 90 38 01 00 00 \tmov    %rdx,0x138(%rax)\n    16fa:\teb 73                \tjmp    176f <perf_top__handle_keypress+0x39a>\n    16fc:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1703:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n    170a:\t48 89 c7             \tmov    %rax,%rdi\n    170d:\te8 00 00 00 00       \tcallq  1712 <perf_top__handle_keypress+0x33d>\n    1712:\t48 89 c1             \tmov    %rax,%rcx\n    1715:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    171c:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n    1723:\t8b 90 a0 00 00 00    \tmov    0xa0(%rax),%edx\n    1729:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1730 <perf_top__handle_keypress+0x35b>\n    1730:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1735:\t48 89 c7             \tmov    %rax,%rdi\n    1738:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    173d:\te8 00 00 00 00       \tcallq  1742 <perf_top__handle_keypress+0x36d>\n    1742:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1749:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n    1750:\t48 8b 00             \tmov    (%rax),%rax\n    1753:\t48 89 85 10 ff ff ff \tmov    %rax,-0xf0(%rbp)\n    175a:\t48 8b 95 10 ff ff ff \tmov    -0xf0(%rbp),%rdx\n    1761:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1768:\t48 89 90 38 01 00 00 \tmov    %rdx,0x138(%rax)\n    176f:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1776:\t48 8b 90 38 01 00 00 \tmov    0x138(%rax),%rdx\n    177d:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1784:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    1788:\t48 39 c2             \tcmp    %rax,%rdx\n    178b:\t0f 85 6b ff ff ff    \tjne    16fc <perf_top__handle_keypress+0x327>\n    1791:\t48 8d 85 18 ff ff ff \tlea    -0xe8(%rbp),%rax\n    1798:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    179d:\t48 89 c7             \tmov    %rax,%rdi\n    17a0:\te8 2d f6 ff ff       \tcallq  dd2 <prompt_integer>\n    17a5:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    17ac:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    17b0:\t8b 90 10 08 00 00    \tmov    0x810(%rax),%edx\n    17b6:\t8b 85 18 ff ff ff    \tmov    -0xe8(%rbp),%eax\n    17bc:\t39 c2                \tcmp    %eax,%edx\n    17be:\t7f 62                \tjg     1822 <perf_top__handle_keypress+0x44d>\n    17c0:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    17c7:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    17cb:\t48 89 c7             \tmov    %rax,%rdi\n    17ce:\te8 f3 e9 ff ff       \tcallq  1c6 <perf_evlist__first>\n    17d3:\t48 8b 95 d8 fe ff ff \tmov    -0x128(%rbp),%rdx\n    17da:\t48 89 82 38 01 00 00 \tmov    %rax,0x138(%rdx)\n    17e1:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    17e8:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n    17ef:\t48 89 c7             \tmov    %rax,%rdi\n    17f2:\te8 00 00 00 00       \tcallq  17f7 <perf_top__handle_keypress+0x422>\n    17f7:\t48 89 c2             \tmov    %rax,%rdx\n    17fa:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1801 <perf_top__handle_keypress+0x42c>\n    1801:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1806:\t48 89 c7             \tmov    %rax,%rdi\n    1809:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    180e:\te8 00 00 00 00       \tcallq  1813 <perf_top__handle_keypress+0x43e>\n    1813:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    1818:\te8 00 00 00 00       \tcallq  181d <perf_top__handle_keypress+0x448>\n    181d:\te9 48 02 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    1822:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1829:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    182d:\t48 8b 00             \tmov    (%rax),%rax\n    1830:\t48 89 85 00 ff ff ff \tmov    %rax,-0x100(%rbp)\n    1837:\t48 8b 95 00 ff ff ff \tmov    -0x100(%rbp),%rdx\n    183e:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1845:\t48 89 90 38 01 00 00 \tmov    %rdx,0x138(%rax)\n    184c:\teb 4b                \tjmp    1899 <perf_top__handle_keypress+0x4c4>\n    184e:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1855:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n    185c:\t8b 90 a0 00 00 00    \tmov    0xa0(%rax),%edx\n    1862:\t8b 85 18 ff ff ff    \tmov    -0xe8(%rbp),%eax\n    1868:\t39 c2                \tcmp    %eax,%edx\n    186a:\t74 76                \tje     18e2 <perf_top__handle_keypress+0x50d>\n    186c:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1873:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n    187a:\t48 8b 00             \tmov    (%rax),%rax\n    187d:\t48 89 85 08 ff ff ff \tmov    %rax,-0xf8(%rbp)\n    1884:\t48 8b 95 08 ff ff ff \tmov    -0xf8(%rbp),%rdx\n    188b:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1892:\t48 89 90 38 01 00 00 \tmov    %rdx,0x138(%rax)\n    1899:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    18a0:\t48 8b 90 38 01 00 00 \tmov    0x138(%rax),%rdx\n    18a7:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    18ae:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    18b2:\t48 39 c2             \tcmp    %rax,%rdx\n    18b5:\t75 97                \tjne    184e <perf_top__handle_keypress+0x479>\n    18b7:\te9 ae 01 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    18bc:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    18c3:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n    18c7:\t48 89 c7             \tmov    %rax,%rdi\n    18ca:\te8 f7 e8 ff ff       \tcallq  1c6 <perf_evlist__first>\n    18cf:\t48 8b 95 d8 fe ff ff \tmov    -0x128(%rbp),%rdx\n    18d6:\t48 89 82 38 01 00 00 \tmov    %rax,0x138(%rdx)\n    18dd:\te9 88 01 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    18e2:\t90                   \tnop\n    18e3:\te9 82 01 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    18e8:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    18ef:\t48 05 1c 01 00 00    \tadd    $0x11c,%rax\n    18f5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    18fa:\t48 89 c7             \tmov    %rax,%rdi\n    18fd:\te8 d0 f4 ff ff       \tcallq  dd2 <prompt_integer>\n    1902:\te9 63 01 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    1907:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    190e:\t48 05 54 01 00 00    \tadd    $0x154,%rax\n    1914:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1919:\t48 89 c7             \tmov    %rax,%rdi\n    191c:\te8 ca f5 ff ff       \tcallq  eeb <prompt_percent>\n    1921:\te9 44 01 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    1926:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    192d:\t0f b6 80 28 01 00 00 \tmovzbl 0x128(%rax),%eax\n    1934:\t0f b6 c0             \tmovzbl %al,%eax\n    1937:\t85 c0                \ttest   %eax,%eax\n    1939:\t0f 95 c0             \tsetne  %al\n    193c:\t83 f0 01             \txor    $0x1,%eax\n    193f:\t0f b6 c0             \tmovzbl %al,%eax\n    1942:\t83 e0 01             \tand    $0x1,%eax\n    1945:\t48 8b 95 d8 fe ff ff \tmov    -0x128(%rbp),%rdx\n    194c:\t88 82 28 01 00 00    \tmov    %al,0x128(%rdx)\n    1952:\te9 13 01 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    1957:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    195c:\te8 00 00 00 00       \tcallq  1961 <perf_top__handle_keypress+0x58c>\n    1961:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1968:\t0f b6 80 2f 01 00 00 \tmovzbl 0x12f(%rax),%eax\n    196f:\t84 c0                \ttest   %al,%al\n    1971:\t74 20                \tje     1993 <perf_top__handle_keypress+0x5be>\n    1973:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 197a <perf_top__handle_keypress+0x5a5>\n    197a:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1981:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n    1988:\t48 89 d6             \tmov    %rdx,%rsi\n    198b:\t48 89 c7             \tmov    %rax,%rdi\n    198e:\te8 00 00 00 00       \tcallq  1993 <perf_top__handle_keypress+0x5be>\n    1993:\tc6 85 ef fe ff ff 00 \tmovb   $0x0,-0x111(%rbp)\n    199a:\te9 cb 00 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    199f:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    19a6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    19ab:\t48 89 c7             \tmov    %rax,%rdi\n    19ae:\te8 a0 f5 ff ff       \tcallq  f53 <perf_top__prompt_symbol>\n    19b3:\te9 b2 00 00 00       \tjmpq   1a6a <perf_top__handle_keypress+0x695>\n    19b8:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    19bf:\t48 8b 80 30 01 00 00 \tmov    0x130(%rax),%rax\n    19c6:\t48 85 c0             \ttest   %rax,%rax\n    19c9:\t0f 84 9a 00 00 00    \tje     1a69 <perf_top__handle_keypress+0x694>\n    19cf:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    19d6:\t48 8b 80 30 01 00 00 \tmov    0x130(%rax),%rax\n    19dd:\t48 89 85 f0 fe ff ff \tmov    %rax,-0x110(%rbp)\n    19e4:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    19eb:\t48 c7 80 30 01 00 00 \tmovq   $0x0,0x130(%rax)\n    19f2:\t00 00 00 00 \n    19f6:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n    19fd:\t48 89 c7             \tmov    %rax,%rdi\n    1a00:\te8 3a eb ff ff       \tcallq  53f <__zero_source_counters>\n    1a05:\teb 63                \tjmp    1a6a <perf_top__handle_keypress+0x695>\n    1a07:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1a0e:\t0f b6 80 29 01 00 00 \tmovzbl 0x129(%rax),%eax\n    1a15:\t0f b6 c0             \tmovzbl %al,%eax\n    1a18:\t85 c0                \ttest   %eax,%eax\n    1a1a:\t0f 95 c0             \tsetne  %al\n    1a1d:\t83 f0 01             \txor    $0x1,%eax\n    1a20:\t0f b6 c0             \tmovzbl %al,%eax\n    1a23:\t83 e0 01             \tand    $0x1,%eax\n    1a26:\t48 8b 95 d8 fe ff ff \tmov    -0x128(%rbp),%rdx\n    1a2d:\t88 82 29 01 00 00    \tmov    %al,0x129(%rdx)\n    1a33:\teb 35                \tjmp    1a6a <perf_top__handle_keypress+0x695>\n    1a35:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    1a3c:\t0f b6 80 2a 01 00 00 \tmovzbl 0x12a(%rax),%eax\n    1a43:\t0f b6 c0             \tmovzbl %al,%eax\n    1a46:\t85 c0                \ttest   %eax,%eax\n    1a48:\t0f 95 c0             \tsetne  %al\n    1a4b:\t83 f0 01             \txor    $0x1,%eax\n    1a4e:\t0f b6 c0             \tmovzbl %al,%eax\n    1a51:\t83 e0 01             \tand    $0x1,%eax\n    1a54:\t48 8b 95 d8 fe ff ff \tmov    -0x128(%rbp),%rdx\n    1a5b:\t88 82 2a 01 00 00    \tmov    %al,0x12a(%rdx)\n    1a61:\teb 07                \tjmp    1a6a <perf_top__handle_keypress+0x695>\n    1a63:\t90                   \tnop\n    1a64:\teb 04                \tjmp    1a6a <perf_top__handle_keypress+0x695>\n    1a66:\t90                   \tnop\n    1a67:\teb 01                \tjmp    1a6a <perf_top__handle_keypress+0x695>\n    1a69:\t90                   \tnop\n    1a6a:\t0f b6 85 ef fe ff ff \tmovzbl -0x111(%rbp),%eax\n    1a71:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1a75:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    1a7c:\t00 00 \n    1a7e:\t74 05                \tje     1a85 <perf_top__handle_keypress+0x6b0>\n    1a80:\te8 00 00 00 00       \tcallq  1a85 <perf_top__handle_keypress+0x6b0>\n    1a85:\tc9                   \tleaveq \n    1a86:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_top__handle_keypress(__int64 <span class=\"supfact\">a1</span>,\n                                             int <span class=\"supfact\">a2</span>) {\n  const char *v3;\n  const char *v4;\n  int <span class=\"supfact\">v5</span>;\n  unsigned __int8 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  struct pollfd <span class=\"supfact\">fds</span>;\n  struct termios <span class=\"supfact\">v9</span>;\n  struct sigaction <span class=\"supfact\">termios_p</span>;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v5</span> = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v11</span> = __readfsqword(Number);\n  <span class=\"supfact\">v6</span> = Number;\n  if (!perf_top__key_mapped(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>)) {\n    <span class=\"supfact\">fds</span> = (struct pollfd)Number;\n    perf_top__print_mapped_keys(<span class=\"supfact\">a1</span>);\n    fwrite(String, Number, Number, stdout);\n    fflush(stdout);\n    tcgetattr(Number, (struct termios *)&<span class=\"supfact\">termios_p</span>);\n    *(_QWORD *)&<span class=\"supfact\">v9</span>.c_iflag =\n        <span class=\"supfact\">termios_p</span>.sa_handler;\n    *(_QWORD *)&<span class=\"supfact\">v9</span>.c_cflag =\n        <span class=\"supfact\">termios_p</span>.sa_mask.__val[Number] & Number;\n    *(_QWORD *)&<span class=\"supfact\">v9</span>.c_line =\n        <span class=\"supfact\">termios_p</span>.sa_mask.__val[Number];\n    *(_QWORD *)&<span class=\"supfact\">v9</span>.c_cc[Number] =\n        <span class=\"supfact\">termios_p</span>.sa_mask.__val[Number];\n    *(_QWORD *)&<span class=\"supfact\">v9</span>.c_cc[Number] =\n        <span class=\"supfact\">termios_p</span>.sa_mask.__val[Number];\n    *(_QWORD *)&<span class=\"supfact\">v9</span>.c_cc[Number] =\n        <span class=\"supfact\">termios_p</span>.sa_mask.__val[Number];\n    *(_QWORD *)&<span class=\"supfact\">v9</span>.c_cc[Number] =\n        <span class=\"supfact\">termios_p</span>.sa_mask.__val[Number];\n    <span class=\"supfact\">v9</span>.c_ospeed =\n        <span class=\"supfact\">termios_p</span>.sa_mask.__val[Number];\n    <span class=\"supfact\">v9</span>.c_cc[Number] = Number;\n    <span class=\"supfact\">v9</span>.c_cc[Number] = Number;\n    tcsetattr(Number, Number, &<span class=\"supfact\">v9</span>);\n    poll(&<span class=\"supfact\">fds</span>, Number, Number);\n    <span class=\"supfact\">v5</span> = getc(stdin);\n    tcsetattr(Number, Number,\n              (const struct termios *)&<span class=\"supfact\">termios_p</span>);\n    if (!perf_top__key_mapped(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v5</span>))\n      return Number L;\n  }\n  switch (<span class=\"supfact\">v5</span>) {\n  case String:\n    if (*(int *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) <=\n        Number) {\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n          perf_evlist__first(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n    } else {\n      <span class=\"supfact\">fds</span>.fd = Number;\n      fwrite(String, Number, Number, stderr);\n      for (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n               **(_QWORD **)(<span class=\"supfact\">a1</span> + Number);\n           *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) !=\n           *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n           *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n               **(_QWORD **)(<span class=\"supfact\">a1</span> + Number)) {\n        v3 = (const char *)perf_evsel__name(\n            *(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n        fprintf(stderr, String,\n                *(unsigned int *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                                  Number L),\n                v3);\n      }\n      prompt_integer(&<span class=\"supfact\">fds</span>, String);\n      if (*(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) >\n          <span class=\"supfact\">fds</span>.fd) {\n        for (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n                 **(_QWORD **)(<span class=\"supfact\">a1</span> + Number);\n             *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) !=\n                 *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n             *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) !=\n                 <span class=\"supfact\">fds</span>.fd;\n             *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n                 **(_QWORD **)(<span class=\"supfact\">a1</span> + Number)) {\n          ;\n        }\n      } else {\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n            perf_evlist__first(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n        v4 = (const char *)perf_evsel__name(\n            *(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n        fprintf(stderr, String, v4);\n        sleep(Number);\n      }\n    }\n    break;\n  case String:\n    prompt_percent((_DWORD *)(<span class=\"supfact\">a1</span> + Number), String);\n    break;\n  case String:\n    *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) =\n        *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) == Number;\n    break;\n  case String:\n  case String:\n    puts(String);\n    if (*(_BYTE *)(<span class=\"supfact\">a1</span> + Number))\n      perf_session__fprintf_dsos(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                                 stderr);\n    <span class=\"supfact\">v6</span> = Number;\n    break;\n  case String:\n    if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n      <span class=\"supfact\">v7</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = Number L;\n      _zero_source_counters(<span class=\"supfact\">v7</span>);\n    }\n    break;\n  case String:\n    *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) =\n        *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) == Number;\n    break;\n  case String:\n    prompt_integer((_DWORD *)(<span class=\"supfact\">a1</span> + Number), String);\n    if (*(int *)(<span class=\"supfact\">a1</span> + Number) <= Number)\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n    break;\n  case String:\n    prompt_integer((_DWORD *)(<span class=\"supfact\">a1</span> + Number), String);\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n      signal(Number, Number L);\n    } else {\n      memset(&<span class=\"supfact\">termios_p</span>, Number,\n             sizeof(<span class=\"supfact\">termios_p</span>));\n      <span class=\"supfact\">termios_p</span>.sa_handler =\n          (__sighandler_t)perf_top__sig_winch;\n      <span class=\"supfact\">termios_p</span>.sa_flags = Number;\n      perf_top__sig_winch(Number L, Number L, <span class=\"supfact\">a1</span>);\n      sigaction(Number, &<span class=\"supfact\">termios_p</span>, Number L);\n    }\n    break;\n  case String:\n    prompt_integer((_DWORD *)(<span class=\"supfact\">a1</span> + Number), String);\n    break;\n  case String:\n    perf_top__prompt_symbol(<span class=\"supfact\">a1</span>, String);\n    break;\n  case String:\n    *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) =\n        *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) == Number;\n    break;\n  default:\n    return <span class=\"supfact\">v6</span>;\n  }\n  return <span class=\"supfact\">v6</span>;\n}", "code_t": "bool __cdecl perf_top__handle_keypress(perf_top *<span class=\"supfact\">top</span>,\n                                       int <span class=\"supfact\">c</span>) {\n  const char *v3;\n  const char *v4;\n  int <span class=\"supfact\">ca</span>;\n  char <span class=\"supfact\">ret</span>;\n  hist_entry *<span class=\"supfact\">syme</span>;\n  __int64 <span class=\"supfact\">counter</span>;\n  termios <span class=\"supfact\">tc</span>;\n  sigaction <span class=\"supfact\">act</span>;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">ca</span> = <span class=\"supfact\">c</span>;\n  <span class=\"supfact\">v11</span> = __readfsqword(Number);\n  <span class=\"supfact\">ret</span> = Number;\n  if (!perf_top__key_mapped(<span class=\"supfact\">top</span>, <span class=\"supfact\">c</span>)) {\n    <span class=\"supfact\">counter</span> = Number;\n    perf_top__print_mapped_keys(<span class=\"supfact\">top</span>);\n    fwrite(String, Number, Number, stdout);\n    fflush(stdout);\n    tcgetattr(Number, (struct termios *)&<span class=\"supfact\">act</span>);\n    *(_QWORD *)&<span class=\"supfact\">tc</span>.c_iflag = <span class=\"supfact\">act</span>.sa_handler;\n    *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cflag =\n        <span class=\"supfact\">act</span>.sa_mask.__val[Number] & Number;\n    *(_QWORD *)&<span class=\"supfact\">tc</span>.c_line =\n        <span class=\"supfact\">act</span>.sa_mask.__val[Number];\n    *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n        <span class=\"supfact\">act</span>.sa_mask.__val[Number];\n    *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n        <span class=\"supfact\">act</span>.sa_mask.__val[Number];\n    *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n        <span class=\"supfact\">act</span>.sa_mask.__val[Number];\n    *(_QWORD *)&<span class=\"supfact\">tc</span>.c_cc[Number] =\n        <span class=\"supfact\">act</span>.sa_mask.__val[Number];\n    <span class=\"supfact\">tc</span>.c_ospeed = <span class=\"supfact\">act</span>.sa_mask.__val[Number];\n    <span class=\"supfact\">tc</span>.c_cc[Number] = Number;\n    <span class=\"supfact\">tc</span>.c_cc[Number] = Number;\n    tcsetattr(Number, Number, &<span class=\"supfact\">tc</span>);\n    poll((struct pollfd *)&<span class=\"supfact\">counter</span>, Number, Number);\n    <span class=\"supfact\">ca</span> = getc(stdin);\n    tcsetattr(Number, Number, (const struct termios *)&<span class=\"supfact\">act</span>);\n    if (!perf_top__key_mapped(<span class=\"supfact\">top</span>, <span class=\"supfact\">ca</span>))\n      return Number;\n  }\n  switch (<span class=\"supfact\">ca</span>) {\n  case String:\n    if (<span class=\"supfact\">top</span>->evlist->nr_entries <= Number) {\n      <span class=\"supfact\">top</span>->sym_evsel =\n          perf_evlist__first(<span class=\"supfact\">top</span>->evlist);\n    } else {\n      LODWORD(<span class=\"supfact\">counter</span>) = Number;\n      fwrite(String, Number, Number, stderr);\n      for (<span class=\"supfact\">top</span>->sym_evsel =\n               (perf_evsel *)<span class=\"supfact\">top</span>->evlist->entries.next;\n           <span class=\"supfact\">top</span>->sym_evsel !=\n           (perf_evsel *)<span class=\"supfact\">top</span>->evlist;\n           <span class=\"supfact\">top</span>->sym_evsel =\n               (perf_evsel *)<span class=\"supfact\">top</span>->sym_evsel->node.next) {\n        v3 = (const char *)perf_evsel__name(<span class=\"supfact\">top</span>->sym_evsel);\n        fprintf(stderr, String,\n                (unsigned int)<span class=\"supfact\">top</span>->sym_evsel->idx, v3);\n      }\n      prompt_integer((int *)&<span class=\"supfact\">counter</span>, String);\n      if (<span class=\"supfact\">top</span>->evlist->nr_entries >\n          (int)<span class=\"supfact\">counter</span>) {\n        for (<span class=\"supfact\">top</span>->sym_evsel =\n                 (perf_evsel *)<span class=\"supfact\">top</span>->evlist->entries.next;\n             <span class=\"supfact\">top</span>->sym_evsel !=\n                 (perf_evsel *)<span class=\"supfact\">top</span>->evlist &&\n             <span class=\"supfact\">top</span>->sym_evsel->idx !=\n                 (_DWORD)<span class=\"supfact\">counter</span>;\n             <span class=\"supfact\">top</span>->sym_evsel =\n                 (perf_evsel *)<span class=\"supfact\">top</span>->sym_evsel->node.next) {\n          ;\n        }\n      } else {\n        <span class=\"supfact\">top</span>->sym_evsel =\n            perf_evlist__first(<span class=\"supfact\">top</span>->evlist);\n        v4 = (const char *)perf_evsel__name(<span class=\"supfact\">top</span>->sym_evsel);\n        fprintf(stderr, String, v4);\n        sleep(Number);\n      }\n    }\n    break;\n  case String:\n    prompt_percent(&<span class=\"supfact\">top</span>->sym_pcnt_filter, String);\n    break;\n  case String:\n    <span class=\"supfact\">top</span>->hide_kernel_symbols =\n        !<span class=\"supfact\">top</span>->hide_kernel_symbols;\n    break;\n  case String:\n  case String:\n    puts(String);\n    if (<span class=\"supfact\">top</span>->dump_symtab)\n      perf_session__fprintf_dsos(<span class=\"supfact\">top</span>->session, stderr);\n    <span class=\"supfact\">ret</span> = Number;\n    break;\n  case String:\n    if (<span class=\"supfact\">top</span>->sym_filter_entry) {\n      <span class=\"supfact\">syme</span> = <span class=\"supfact\">top</span>->sym_filter_entry;\n      <span class=\"supfact\">top</span>->sym_filter_entry = Number L;\n      _zero_source_counters(<span class=\"supfact\">syme</span>);\n    }\n    break;\n  case String:\n    <span class=\"supfact\">top</span>->hide_user_symbols =\n        !<span class=\"supfact\">top</span>->hide_user_symbols;\n    break;\n  case String:\n    prompt_integer(&<span class=\"supfact\">top</span>->delay_secs, String);\n    if (<span class=\"supfact\">top</span>->delay_secs <= Number)\n      <span class=\"supfact\">top</span>->delay_secs = Number;\n    break;\n  case String:\n    prompt_integer(&<span class=\"supfact\">top</span>->print_entries, String);\n    if (<span class=\"supfact\">top</span>->print_entries) {\n      signal(Number, Number L);\n    } else {\n      memset(&<span class=\"supfact\">act</span>, Number, sizeof(<span class=\"supfact\">act</span>));\n      <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)perf_top__sig_winch;\n      <span class=\"supfact\">act</span>.sa_flags = Number;\n      perf_top__sig_winch(Number, Number L, <span class=\"supfact\">top</span>);\n      sigaction_0(Number, &<span class=\"supfact\">act</span>, Number L);\n    }\n    break;\n  case String:\n    prompt_integer(&<span class=\"supfact\">top</span>->count_filter, String);\n    break;\n  case String:\n    perf_top__prompt_symbol(<span class=\"supfact\">top</span>, String);\n    break;\n  case String:\n    <span class=\"supfact\">top</span>->zero = !<span class=\"supfact\">top</span>->zero;\n    break;\n  default:\n    return <span class=\"supfact\">ret</span>;\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "perf_top *", "pred_name": "top", "ref_name": "top", "ref_type": "perf_top *"}, {"name": "a2", "type": "int", "pred_name": "c", "ref_name": "c", "ref_type": "int"}, {"name": "v5", "type": "int", "pred_name": "ca", "ref_name": "ca", "ref_type": "int"}, {"name": "v6", "type": "char", "pred_name": "ret", "ref_name": "ret", "ref_type": "char"}, {"name": "v7", "type": "hist_entry *", "pred_name": "syme", "ref_name": "syme", "ref_type": "hist_entry *"}, {"name": "fds", "type": "__int64", "pred_name": "counter", "ref_name": "counter", "ref_type": "__int64"}, {"name": "v9", "type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }", "pred_name": "tc", "ref_name": "tc", "ref_type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }"}, {"name": "termios_p", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "pred_name": "act", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}, {"name": "v11", "type": "unsigned __int64", "pred_name": "v11", "ref_name": "v11", "ref_type": "unsigned __int64"}], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d873d6c30c4b18034f8cae90506b9507863de3634313781e8aa550592db55563", "path_in_repo": "XanClic/qemu//m68k-softmmu/dump/dump.o", "objdump": "00000000000000db <cpu_to_le16>:\n      db:\t55                   \tpush   %rbp\n      dc:\t48 89 e5             \tmov    %rsp,%rbp\n      df:\t89 f8                \tmov    %edi,%eax\n      e1:\t66 89 45 fc          \tmov    %ax,-0x4(%rbp)\n      e5:\t0f b7 45 fc          \tmovzwl -0x4(%rbp),%eax\n      e9:\t5d                   \tpop    %rbp\n      ea:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cpu_to_le16(unsigned __int16 <span class=\"supfact\">a1</span>) {\n  return <span class=\"supfact\">a1</span>;\n}", "code_t": "uint16_t __cdecl cpu_to_le16(uint16_t <span class=\"supfact\">v</span>) {\n  return <span class=\"supfact\">v</span>;\n}", "var": [{"name": "a1", "type": "uint16_t", "pred_name": "v", "ref_name": "v", "ref_type": "uint16_t"}], "body_in_train": true}, {"repo_owner": "pathscale", "repo_name": "nvopencc", "path": "pathscale/nvopencc/b568d72b7632794c72db24e491e1d9d0ddbc2dd55173eb1474b521e116f53573", "path_in_repo": "pathscale/nvopencc/src/targia3264_nvisa_rel/gccfe/gnu/reload1.o", "objdump": "00000000000139ff <gen_reload>:\n   139ff:\t55                   \tpush   %rbp\n   13a00:\t48 89 e5             \tmov    %rsp,%rbp\n   13a03:\t41 54                \tpush   %r12\n   13a05:\t53                   \tpush   %rbx\n   13a06:\t48 83 ec 60          \tsub    $0x60,%rsp\n   13a0a:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n   13a0e:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n   13a12:\t89 55 9c             \tmov    %edx,-0x64(%rbp)\n   13a15:\t89 4d 98             \tmov    %ecx,-0x68(%rbp)\n   13a18:\te8 00 00 00 00       \tcallq  13a1d <gen_reload+0x1e>\n   13a1d:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   13a21:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13a25:\t0f b7 00             \tmovzwl (%rax),%eax\n   13a28:\t66 83 f8 49          \tcmp    $0x49,%ax\n   13a2c:\t75 6e                \tjne    13a9c <gen_reload+0x9d>\n   13a2e:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13a32:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   13a36:\t0f b6 c0             \tmovzbl %al,%eax\n   13a39:\t48 98                \tcltq   \n   13a3b:\t0f b6 90 00 00 00 00 \tmovzbl 0x0(%rax),%edx\n   13a42:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13a46:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   13a4a:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   13a4e:\t0f b6 c0             \tmovzbl %al,%eax\n   13a51:\t48 98                \tcltq   \n   13a53:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   13a5a:\t38 c2                \tcmp    %al,%dl\n   13a5c:\t76 3e                \tjbe    13a9c <gen_reload+0x9d>\n   13a5e:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13a62:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   13a66:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   13a6a:\t0f b6 c0             \tmovzbl %al,%eax\n   13a6d:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n   13a71:\t48 89 d6             \tmov    %rdx,%rsi\n   13a74:\t89 c7                \tmov    %eax,%edi\n   13a76:\te8 00 00 00 00       \tcallq  13a7b <gen_reload+0x7c>\n   13a7b:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n   13a7f:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n   13a84:\t74 16                \tje     13a9c <gen_reload+0x9d>\n   13a86:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13a8a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   13a8e:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n   13a92:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   13a96:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n   13a9a:\teb 79                \tjmp    13b15 <gen_reload+0x116>\n   13a9c:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13aa0:\t0f b7 00             \tmovzwl (%rax),%eax\n   13aa3:\t66 83 f8 49          \tcmp    $0x49,%ax\n   13aa7:\t75 6c                \tjne    13b15 <gen_reload+0x116>\n   13aa9:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13aad:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   13ab1:\t0f b6 c0             \tmovzbl %al,%eax\n   13ab4:\t48 98                \tcltq   \n   13ab6:\t0f b6 90 00 00 00 00 \tmovzbl 0x0(%rax),%edx\n   13abd:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13ac1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   13ac5:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   13ac9:\t0f b6 c0             \tmovzbl %al,%eax\n   13acc:\t48 98                \tcltq   \n   13ace:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   13ad5:\t38 c2                \tcmp    %al,%dl\n   13ad7:\t76 3c                \tjbe    13b15 <gen_reload+0x116>\n   13ad9:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13add:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   13ae1:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   13ae5:\t0f b6 c0             \tmovzbl %al,%eax\n   13ae8:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n   13aec:\t48 89 d6             \tmov    %rdx,%rsi\n   13aef:\t89 c7                \tmov    %eax,%edi\n   13af1:\te8 00 00 00 00       \tcallq  13af6 <gen_reload+0xf7>\n   13af6:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n   13afa:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n   13aff:\t74 14                \tje     13b15 <gen_reload+0x116>\n   13b01:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13b05:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   13b09:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n   13b0d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n   13b11:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n   13b15:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13b19:\t0f b7 00             \tmovzwl (%rax),%eax\n   13b1c:\t66 83 f8 55          \tcmp    $0x55,%ax\n   13b20:\t0f 85 c0 04 00 00    \tjne    13fe6 <gen_reload+0x5e7>\n   13b26:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13b2a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   13b2e:\t0f b7 00             \tmovzwl (%rax),%eax\n   13b31:\t66 83 f8 47          \tcmp    $0x47,%ax\n   13b35:\t74 26                \tje     13b5d <gen_reload+0x15e>\n   13b37:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13b3b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   13b3f:\t0f b7 00             \tmovzwl (%rax),%eax\n   13b42:\t66 83 f8 49          \tcmp    $0x49,%ax\n   13b46:\t74 15                \tje     13b5d <gen_reload+0x15e>\n   13b48:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13b4c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   13b50:\t0f b7 00             \tmovzwl (%rax),%eax\n   13b53:\t66 83 f8 4c          \tcmp    $0x4c,%ax\n   13b57:\t0f 85 89 04 00 00    \tjne    13fe6 <gen_reload+0x5e7>\n   13b5d:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13b61:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13b65:\t0f b7 00             \tmovzwl (%rax),%eax\n   13b68:\t66 83 f8 47          \tcmp    $0x47,%ax\n   13b6c:\t0f 84 b6 00 00 00    \tje     13c28 <gen_reload+0x229>\n   13b72:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13b76:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13b7a:\t0f b7 00             \tmovzwl (%rax),%eax\n   13b7d:\t66 83 f8 49          \tcmp    $0x49,%ax\n   13b81:\t0f 84 a1 00 00 00    \tje     13c28 <gen_reload+0x229>\n   13b87:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13b8b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13b8f:\t0f b7 00             \tmovzwl (%rax),%eax\n   13b92:\t66 83 f8 4d          \tcmp    $0x4d,%ax\n   13b96:\t0f 84 8c 00 00 00    \tje     13c28 <gen_reload+0x229>\n   13b9c:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13ba0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13ba4:\t0f b7 00             \tmovzwl (%rax),%eax\n   13ba7:\t66 83 f8 4e          \tcmp    $0x4e,%ax\n   13bab:\t74 7b                \tje     13c28 <gen_reload+0x229>\n   13bad:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13bb1:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13bb5:\t0f b7 00             \tmovzwl (%rax),%eax\n   13bb8:\t66 83 f8 40          \tcmp    $0x40,%ax\n   13bbc:\t74 6a                \tje     13c28 <gen_reload+0x229>\n   13bbe:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13bc2:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13bc6:\t0f b7 00             \tmovzwl (%rax),%eax\n   13bc9:\t66 83 f8 41          \tcmp    $0x41,%ax\n   13bcd:\t74 59                \tje     13c28 <gen_reload+0x229>\n   13bcf:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13bd3:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13bd7:\t0f b7 00             \tmovzwl (%rax),%eax\n   13bda:\t66 83 f8 44          \tcmp    $0x44,%ax\n   13bde:\t74 48                \tje     13c28 <gen_reload+0x229>\n   13be0:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13be4:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13be8:\t0f b7 00             \tmovzwl (%rax),%eax\n   13beb:\t66 3d 90 00          \tcmp    $0x90,%ax\n   13bef:\t74 37                \tje     13c28 <gen_reload+0x229>\n   13bf1:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13bf5:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13bf9:\t0f b7 00             \tmovzwl (%rax),%eax\n   13bfc:\t66 83 f8 42          \tcmp    $0x42,%ax\n   13c00:\t74 26                \tje     13c28 <gen_reload+0x229>\n   13c02:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13c06:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13c0a:\t0f b7 00             \tmovzwl (%rax),%eax\n   13c0d:\t66 3d 96 00          \tcmp    $0x96,%ax\n   13c11:\t74 15                \tje     13c28 <gen_reload+0x229>\n   13c13:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13c17:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13c1b:\t0f b7 00             \tmovzwl (%rax),%eax\n   13c1e:\t66 83 f8 4c          \tcmp    $0x4c,%ax\n   13c22:\t0f 85 be 03 00 00    \tjne    13fe6 <gen_reload+0x5e7>\n   13c28:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13c2c:\t48 83 c0 08          \tadd    $0x8,%rax\n   13c30:\t48 89 c7             \tmov    %rax,%rdi\n   13c33:\te8 00 00 00 00       \tcallq  13c38 <gen_reload+0x239>\n   13c38:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   13c3c:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13c40:\t48 83 c0 10          \tadd    $0x10,%rax\n   13c44:\t48 89 c7             \tmov    %rax,%rdi\n   13c47:\te8 00 00 00 00       \tcallq  13c4c <gen_reload+0x24d>\n   13c4c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   13c50:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13c54:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13c58:\t0f b7 00             \tmovzwl (%rax),%eax\n   13c5b:\t66 83 f8 47          \tcmp    $0x47,%ax\n   13c5f:\t75 2e                \tjne    13c8f <gen_reload+0x290>\n   13c61:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13c65:\t8b 50 08             \tmov    0x8(%rax),%edx\n   13c68:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13c6c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13c70:\t8b 40 08             \tmov    0x8(%rax),%eax\n   13c73:\t39 c2                \tcmp    %eax,%edx\n   13c75:\t75 18                \tjne    13c8f <gen_reload+0x290>\n   13c77:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   13c7b:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n   13c7f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13c83:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   13c87:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   13c8b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   13c8f:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13c93:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n   13c97:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n   13c9b:\t75 0e                \tjne    13cab <gen_reload+0x2ac>\n   13c9d:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13ca1:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   13ca5:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n   13ca9:\t74 23                \tje     13cce <gen_reload+0x2cf>\n   13cab:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13caf:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   13cb3:\t0f b6 c0             \tmovzbl %al,%eax\n   13cb6:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   13cba:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   13cbe:\t89 c6                \tmov    %eax,%esi\n   13cc0:\tbf 55 00 00 00       \tmov    $0x55,%edi\n   13cc5:\te8 00 00 00 00       \tcallq  13cca <gen_reload+0x2cb>\n   13cca:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n   13cce:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n   13cd2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13cd6:\t48 89 d1             \tmov    %rdx,%rcx\n   13cd9:\t48 89 c2             \tmov    %rax,%rdx\n   13cdc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   13ce1:\tbf 39 00 00 00       \tmov    $0x39,%edi\n   13ce6:\te8 00 00 00 00       \tcallq  13ceb <gen_reload+0x2ec>\n   13ceb:\t48 89 c7             \tmov    %rax,%rdi\n   13cee:\te8 00 00 00 00       \tcallq  13cf3 <gen_reload+0x2f4>\n   13cf3:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n   13cf7:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13cfb:\t8b 40 38             \tmov    0x38(%rax),%eax\n   13cfe:\t85 c0                \ttest   %eax,%eax\n   13d00:\t78 09                \tjs     13d0b <gen_reload+0x30c>\n   13d02:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13d06:\t8b 40 38             \tmov    0x38(%rax),%eax\n   13d09:\teb 0c                \tjmp    13d17 <gen_reload+0x318>\n   13d0b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13d0f:\t48 89 c7             \tmov    %rax,%rdi\n   13d12:\te8 00 00 00 00       \tcallq  13d17 <gen_reload+0x318>\n   13d17:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n   13d1a:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n   13d1e:\t78 23                \tjs     13d43 <gen_reload+0x344>\n   13d20:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13d24:\t48 89 c7             \tmov    %rax,%rdi\n   13d27:\te8 00 00 00 00       \tcallq  13d2c <gen_reload+0x32d>\n   13d2c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n   13d31:\te8 00 00 00 00       \tcallq  13d36 <gen_reload+0x337>\n   13d36:\t85 c0                \ttest   %eax,%eax\n   13d38:\t74 09                \tje     13d43 <gen_reload+0x344>\n   13d3a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13d3e:\te9 8a 04 00 00       \tjmpq   141cd <gen_reload+0x7ce>\n   13d43:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   13d47:\t48 89 c7             \tmov    %rax,%rdi\n   13d4a:\te8 00 00 00 00       \tcallq  13d4f <gen_reload+0x350>\n   13d4f:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 13d56 <gen_reload+0x357>\n   13d56:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13d5a:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   13d5e:\t0f b6 c0             \tmovzbl %al,%eax\n   13d61:\t48 98                \tcltq   \n   13d63:\t48 c1 e0 04          \tshl    $0x4,%rax\n   13d67:\t48 01 d0             \tadd    %rdx,%rax\n   13d6a:\t48 83 c0 08          \tadd    $0x8,%rax\n   13d6e:\t8b 00                \tmov    (%rax),%eax\n   13d70:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n   13d73:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13d77:\t0f b7 00             \tmovzwl (%rax),%eax\n   13d7a:\t66 83 f8 4d          \tcmp    $0x4d,%ax\n   13d7e:\t0f 84 12 01 00 00    \tje     13e96 <gen_reload+0x497>\n   13d84:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13d88:\t0f b7 00             \tmovzwl (%rax),%eax\n   13d8b:\t66 83 f8 4e          \tcmp    $0x4e,%ax\n   13d8f:\t0f 84 01 01 00 00    \tje     13e96 <gen_reload+0x497>\n   13d95:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13d99:\t0f b7 00             \tmovzwl (%rax),%eax\n   13d9c:\t66 83 f8 40          \tcmp    $0x40,%ax\n   13da0:\t0f 84 f0 00 00 00    \tje     13e96 <gen_reload+0x497>\n   13da6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13daa:\t0f b7 00             \tmovzwl (%rax),%eax\n   13dad:\t66 83 f8 41          \tcmp    $0x41,%ax\n   13db1:\t0f 84 df 00 00 00    \tje     13e96 <gen_reload+0x497>\n   13db7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13dbb:\t0f b7 00             \tmovzwl (%rax),%eax\n   13dbe:\t66 83 f8 44          \tcmp    $0x44,%ax\n   13dc2:\t0f 84 ce 00 00 00    \tje     13e96 <gen_reload+0x497>\n   13dc8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13dcc:\t0f b7 00             \tmovzwl (%rax),%eax\n   13dcf:\t66 3d 90 00          \tcmp    $0x90,%ax\n   13dd3:\t0f 84 bd 00 00 00    \tje     13e96 <gen_reload+0x497>\n   13dd9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13ddd:\t0f b7 00             \tmovzwl (%rax),%eax\n   13de0:\t66 83 f8 42          \tcmp    $0x42,%ax\n   13de4:\t0f 84 ac 00 00 00    \tje     13e96 <gen_reload+0x497>\n   13dea:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13dee:\t0f b7 00             \tmovzwl (%rax),%eax\n   13df1:\t66 3d 96 00          \tcmp    $0x96,%ax\n   13df5:\t0f 84 9b 00 00 00    \tje     13e96 <gen_reload+0x497>\n   13dfb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13dff:\t0f b7 00             \tmovzwl (%rax),%eax\n   13e02:\t66 83 f8 4c          \tcmp    $0x4c,%ax\n   13e06:\t0f 84 8a 00 00 00    \tje     13e96 <gen_reload+0x497>\n   13e0c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13e10:\t0f b7 00             \tmovzwl (%rax),%eax\n   13e13:\t66 83 f8 49          \tcmp    $0x49,%ax\n   13e17:\t74 7d                \tje     13e96 <gen_reload+0x497>\n   13e19:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13e1d:\t0f b7 00             \tmovzwl (%rax),%eax\n   13e20:\t66 83 f8 47          \tcmp    $0x47,%ax\n   13e24:\t75 0c                \tjne    13e32 <gen_reload+0x433>\n   13e26:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13e2a:\t8b 40 08             \tmov    0x8(%rax),%eax\n   13e2d:\t83 f8 34             \tcmp    $0x34,%eax\n   13e30:\t77 64                \tja     13e96 <gen_reload+0x497>\n   13e32:\t81 7d bc 12 06 00 00 \tcmpl   $0x612,-0x44(%rbp)\n   13e39:\t74 73                \tje     13eae <gen_reload+0x4af>\n   13e3b:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n   13e3e:\t48 63 d0             \tmovslq %eax,%rdx\n   13e41:\t48 89 d0             \tmov    %rdx,%rax\n   13e44:\t48 c1 e0 02          \tshl    $0x2,%rax\n   13e48:\t48 01 d0             \tadd    %rdx,%rax\n   13e4b:\t48 c1 e0 03          \tshl    $0x3,%rax\n   13e4f:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n   13e55:\t48 8b 00             \tmov    (%rax),%rax\n   13e58:\t48 83 c0 30          \tadd    $0x30,%rax\n   13e5c:\t48 8b 08             \tmov    (%rax),%rcx\n   13e5f:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n   13e62:\t48 63 d0             \tmovslq %eax,%rdx\n   13e65:\t48 89 d0             \tmov    %rdx,%rax\n   13e68:\t48 c1 e0 02          \tshl    $0x2,%rax\n   13e6c:\t48 01 d0             \tadd    %rdx,%rax\n   13e6f:\t48 c1 e0 03          \tshl    $0x3,%rax\n   13e73:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n   13e79:\t48 8b 00             \tmov    (%rax),%rax\n   13e7c:\t48 83 c0 30          \tadd    $0x30,%rax\n   13e80:\t0f b7 40 10          \tmovzwl 0x10(%rax),%eax\n   13e84:\t0f b7 d0             \tmovzwl %ax,%edx\n   13e87:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13e8b:\t89 d6                \tmov    %edx,%esi\n   13e8d:\t48 89 c7             \tmov    %rax,%rdi\n   13e90:\tff d1                \tcallq  *%rcx\n   13e92:\t85 c0                \ttest   %eax,%eax\n   13e94:\t75 18                \tjne    13eae <gen_reload+0x4af>\n   13e96:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   13e9a:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n   13e9e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   13ea2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   13ea6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n   13eaa:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   13eae:\t8b 4d 98             \tmov    -0x68(%rbp),%ecx\n   13eb1:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n   13eb4:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n   13eb8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13ebc:\t48 89 c7             \tmov    %rax,%rdi\n   13ebf:\te8 00 00 00 00       \tcallq  13ec4 <gen_reload+0x4c5>\n   13ec4:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   13ec8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   13ecc:\t48 89 d6             \tmov    %rdx,%rsi\n   13ecf:\t48 89 c7             \tmov    %rax,%rdi\n   13ed2:\te8 00 00 00 00       \tcallq  13ed7 <gen_reload+0x4d8>\n   13ed7:\t85 c0                \ttest   %eax,%eax\n   13ed9:\t74 08                \tje     13ee3 <gen_reload+0x4e4>\n   13edb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13edf:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   13ee3:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   13ee7:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13eeb:\t48 89 d6             \tmov    %rdx,%rsi\n   13eee:\t48 89 c7             \tmov    %rax,%rdi\n   13ef1:\te8 00 00 00 00       \tcallq  13ef6 <gen_reload+0x4f7>\n   13ef6:\t48 89 c7             \tmov    %rax,%rdi\n   13ef9:\te8 00 00 00 00       \tcallq  13efe <gen_reload+0x4ff>\n   13efe:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n   13f02:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13f06:\t8b 40 38             \tmov    0x38(%rax),%eax\n   13f09:\t85 c0                \ttest   %eax,%eax\n   13f0b:\t78 09                \tjs     13f16 <gen_reload+0x517>\n   13f0d:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13f11:\t8b 40 38             \tmov    0x38(%rax),%eax\n   13f14:\teb 0c                \tjmp    13f22 <gen_reload+0x523>\n   13f16:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13f1a:\t48 89 c7             \tmov    %rax,%rdi\n   13f1d:\te8 00 00 00 00       \tcallq  13f22 <gen_reload+0x523>\n   13f22:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n   13f25:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n   13f29:\t78 4c                \tjs     13f77 <gen_reload+0x578>\n   13f2b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13f2f:\t48 89 c7             \tmov    %rax,%rdi\n   13f32:\te8 00 00 00 00       \tcallq  13f37 <gen_reload+0x538>\n   13f37:\tbf 01 00 00 00       \tmov    $0x1,%edi\n   13f3c:\te8 00 00 00 00       \tcallq  13f41 <gen_reload+0x542>\n   13f41:\t85 c0                \ttest   %eax,%eax\n   13f43:\t74 32                \tje     13f77 <gen_reload+0x578>\n   13f45:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13f49:\t48 8b 50 48          \tmov    0x48(%rax),%rdx\n   13f4d:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13f51:\t48 89 d1             \tmov    %rdx,%rcx\n   13f54:\t48 89 c2             \tmov    %rax,%rdx\n   13f57:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   13f5c:\tbf 03 00 00 00       \tmov    $0x3,%edi\n   13f61:\te8 00 00 00 00       \tcallq  13f66 <gen_reload+0x567>\n   13f66:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n   13f6a:\t48 89 42 48          \tmov    %rax,0x48(%rdx)\n   13f6e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13f72:\te9 56 02 00 00       \tjmpq   141cd <gen_reload+0x7ce>\n   13f77:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   13f7b:\t48 89 c7             \tmov    %rax,%rdi\n   13f7e:\te8 00 00 00 00       \tcallq  13f83 <gen_reload+0x584>\n   13f83:\t8b 4d 98             \tmov    -0x68(%rbp),%ecx\n   13f86:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n   13f89:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n   13f8d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13f91:\t48 89 c7             \tmov    %rax,%rdi\n   13f94:\te8 00 00 00 00       \tcallq  13f99 <gen_reload+0x59a>\n   13f99:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   13f9d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   13fa1:\t48 89 d6             \tmov    %rdx,%rsi\n   13fa4:\t48 89 c7             \tmov    %rax,%rdi\n   13fa7:\te8 00 00 00 00       \tcallq  13fac <gen_reload+0x5ad>\n   13fac:\t48 89 c7             \tmov    %rax,%rdi\n   13faf:\te8 00 00 00 00       \tcallq  13fb4 <gen_reload+0x5b5>\n   13fb4:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n   13fb8:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n   13fbc:\t48 8b 50 48          \tmov    0x48(%rax),%rdx\n   13fc0:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13fc4:\t48 89 d1             \tmov    %rdx,%rcx\n   13fc7:\t48 89 c2             \tmov    %rax,%rdx\n   13fca:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   13fcf:\tbf 03 00 00 00       \tmov    $0x3,%edi\n   13fd4:\te8 00 00 00 00       \tcallq  13fd9 <gen_reload+0x5da>\n   13fd9:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n   13fdd:\t48 89 42 48          \tmov    %rax,0x48(%rdx)\n   13fe1:\te9 d0 01 00 00       \tjmpq   141b6 <gen_reload+0x7b7>\n   13fe6:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13fea:\t0f b7 00             \tmovzwl (%rax),%eax\n   13fed:\t66 83 f8 47          \tcmp    $0x47,%ax\n   13ff1:\t74 11                \tje     14004 <gen_reload+0x605>\n   13ff3:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   13ff7:\t0f b7 00             \tmovzwl (%rax),%eax\n   13ffa:\t66 83 f8 49          \tcmp    $0x49,%ax\n   13ffe:\t0f 85 4c 01 00 00    \tjne    14150 <gen_reload+0x751>\n   14004:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   14008:\t48 89 c7             \tmov    %rax,%rdi\n   1400b:\te8 00 00 00 00       \tcallq  14010 <gen_reload+0x611>\n   14010:\t83 f8 34             \tcmp    $0x34,%eax\n   14013:\t0f 87 37 01 00 00    \tja     14150 <gen_reload+0x751>\n   14019:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   1401d:\t0f b7 00             \tmovzwl (%rax),%eax\n   14020:\t66 83 f8 47          \tcmp    $0x47,%ax\n   14024:\t74 11                \tje     14037 <gen_reload+0x638>\n   14026:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   1402a:\t0f b7 00             \tmovzwl (%rax),%eax\n   1402d:\t66 83 f8 49          \tcmp    $0x49,%ax\n   14031:\t0f 85 19 01 00 00    \tjne    14150 <gen_reload+0x751>\n   14037:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   1403b:\t48 89 c7             \tmov    %rax,%rdi\n   1403e:\te8 00 00 00 00       \tcallq  14043 <gen_reload+0x644>\n   14043:\t83 f8 34             \tcmp    $0x34,%eax\n   14046:\t0f 87 04 01 00 00    \tja     14150 <gen_reload+0x751>\n   1404c:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   14050:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   14054:\t44 0f b6 e0          \tmovzbl %al,%r12d\n   14058:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   1405c:\t48 89 c7             \tmov    %rax,%rdi\n   1405f:\te8 00 00 00 00       \tcallq  14064 <gen_reload+0x665>\n   14064:\t89 c0                \tmov    %eax,%eax\n   14066:\t8b 1c 85 00 00 00 00 \tmov    0x0(,%rax,4),%ebx\n   1406d:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   14071:\t48 89 c7             \tmov    %rax,%rdi\n   14074:\te8 00 00 00 00       \tcallq  14079 <gen_reload+0x67a>\n   14079:\t89 c0                \tmov    %eax,%eax\n   1407b:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n   14082:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n   14087:\t44 89 e2             \tmov    %r12d,%edx\n   1408a:\t89 de                \tmov    %ebx,%esi\n   1408c:\t89 c7                \tmov    %eax,%edi\n   1408e:\te8 00 00 00 00       \tcallq  14093 <gen_reload+0x694>\n   14093:\t85 c0                \ttest   %eax,%eax\n   14095:\t0f 84 b5 00 00 00    \tje     14150 <gen_reload+0x751>\n   1409b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   1409f:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   140a3:\t0f b6 f0             \tmovzbl %al,%esi\n   140a6:\t8b 4d 98             \tmov    -0x68(%rbp),%ecx\n   140a9:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n   140ac:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   140b0:\t48 89 c7             \tmov    %rax,%rdi\n   140b3:\te8 00 00 00 00       \tcallq  140b8 <gen_reload+0x6b9>\n   140b8:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n   140bc:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   140c0:\t0f b6 50 02          \tmovzbl 0x2(%rax),%edx\n   140c4:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   140c8:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   140cc:\t38 c2                \tcmp    %al,%dl\n   140ce:\t74 1f                \tje     140ef <gen_reload+0x6f0>\n   140d0:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   140d4:\t8b 50 08             \tmov    0x8(%rax),%edx\n   140d7:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   140db:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   140df:\t0f b6 c0             \tmovzbl %al,%eax\n   140e2:\t89 d6                \tmov    %edx,%esi\n   140e4:\t89 c7                \tmov    %eax,%edi\n   140e6:\te8 00 00 00 00       \tcallq  140eb <gen_reload+0x6ec>\n   140eb:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n   140ef:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   140f3:\t0f b6 50 02          \tmovzbl 0x2(%rax),%edx\n   140f7:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   140fb:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   140ff:\t38 c2                \tcmp    %al,%dl\n   14101:\t74 1f                \tje     14122 <gen_reload+0x723>\n   14103:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   14107:\t8b 50 08             \tmov    0x8(%rax),%edx\n   1410a:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   1410e:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n   14112:\t0f b6 c0             \tmovzbl %al,%eax\n   14115:\t89 d6                \tmov    %edx,%esi\n   14117:\t89 c7                \tmov    %eax,%edi\n   14119:\te8 00 00 00 00       \tcallq  1411e <gen_reload+0x71f>\n   1411e:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n   14122:\t8b 4d 98             \tmov    -0x68(%rbp),%ecx\n   14125:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n   14128:\t48 8b 75 a0          \tmov    -0x60(%rbp),%rsi\n   1412c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   14130:\t48 89 c7             \tmov    %rax,%rdi\n   14133:\te8 00 00 00 00       \tcallq  14138 <gen_reload+0x739>\n   14138:\t8b 4d 98             \tmov    -0x68(%rbp),%ecx\n   1413b:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n   1413e:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n   14142:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   14146:\t48 89 c7             \tmov    %rax,%rdi\n   14149:\te8 00 00 00 00       \tcallq  1414e <gen_reload+0x74f>\n   1414e:\teb 66                \tjmp    141b6 <gen_reload+0x7b7>\n   14150:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   14154:\t0f b7 00             \tmovzwl (%rax),%eax\n   14157:\t0f b7 c0             \tmovzwl %ax,%eax\n   1415a:\t48 98                \tcltq   \n   1415c:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n   14163:\t3c 6f                \tcmp    $0x6f,%al\n   14165:\t74 0d                \tje     14174 <gen_reload+0x775>\n   14167:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   1416b:\t0f b7 00             \tmovzwl (%rax),%eax\n   1416e:\t66 83 f8 49          \tcmp    $0x49,%ax\n   14172:\t75 1d                \tjne    14191 <gen_reload+0x792>\n   14174:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n   14178:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   1417c:\t48 89 d6             \tmov    %rdx,%rsi\n   1417f:\t48 89 c7             \tmov    %rax,%rdi\n   14182:\te8 00 00 00 00       \tcallq  14187 <gen_reload+0x788>\n   14187:\t48 89 c7             \tmov    %rax,%rdi\n   1418a:\te8 00 00 00 00       \tcallq  1418f <gen_reload+0x790>\n   1418f:\teb 25                \tjmp    141b6 <gen_reload+0x7b7>\n   14191:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n   14195:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   14199:\t48 89 d1             \tmov    %rdx,%rcx\n   1419c:\t48 89 c2             \tmov    %rax,%rdx\n   1419f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   141a4:\tbf 39 00 00 00       \tmov    $0x39,%edi\n   141a9:\te8 00 00 00 00       \tcallq  141ae <gen_reload+0x7af>\n   141ae:\t48 89 c7             \tmov    %rax,%rdi\n   141b1:\te8 00 00 00 00       \tcallq  141b6 <gen_reload+0x7b7>\n   141b6:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n   141bb:\t74 0a                \tje     141c7 <gen_reload+0x7c8>\n   141bd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   141c1:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n   141c5:\teb 05                \tjmp    141cc <gen_reload+0x7cd>\n   141c7:\te8 00 00 00 00       \tcallq  141cc <gen_reload+0x7cd>\n   141cc:\t90                   \tnop\n   141cd:\t48 83 c4 60          \tadd    $0x60,%rsp\n   141d1:\t5b                   \tpop    %rbx\n   141d2:\t41 5c                \tpop    %r12\n   141d4:\t5d                   \tpop    %rbp\n   141d5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gen_reload(__int64 <span class=\"supfact\">a1</span>,\n                              unsigned __int16 *<span class=\"supfact\">a2</span>,\n                              unsigned int <span class=\"supfact\">a3</span>,\n                              unsigned int <span class=\"supfact\">a4</span>) {\n  __int64 v4;\n  int v5;\n  __int64 result;\n  __int64 v7;\n  int v8;\n  __int64 v9;\n  unsigned int <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">v11</span>;\n  unsigned int v12;\n  __int64 v13;\n  __int64 v14;\n  unsigned __int16 *<span class=\"supfact\">v17</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  __int64 <span class=\"supfact\">v19</span>;\n  int <span class=\"supfact\">v20</span>;\n  __int64 v21;\n  __int64 v22;\n  __int64 v23;\n  __int64 v24;\n  __int64 v25;\n  __int64 v26;\n  __int64 v27;\n  __int64 <span class=\"supfact\">v28</span>;\n  __int64 <span class=\"supfact\">v29</span>;\n  __int64 <span class=\"supfact\">v30</span>;\n  <span class=\"supfact\">v18</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v17</span> = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v28</span> = get_last_insn();\n  if (*<span class=\"supfact\">a2</span> == Number &&\n      *((_BYTE *)&mode_size +\n        *((unsigned __int8 *)<span class=\"supfact\">a2</span> + Number)) >\n          *((_BYTE *)&mode_size +\n            *(unsigned __int8 *)(*((_QWORD *)<span class=\"supfact\">a2</span> + Number) +\n                                 Number L)) &&\n      (v26 = gen_lowpart_common(\n           *(unsigned __int8 *)(*((_QWORD *)<span class=\"supfact\">a2</span> + Number) +\n                                Number L),\n           <span class=\"supfact\">a1</span>)) != Number) {\n    <span class=\"supfact\">v17</span> =\n        (unsigned __int16 *)*((_QWORD *)<span class=\"supfact\">a2</span> + Number);\n    <span class=\"supfact\">v18</span> = v26;\n  } else if (*(_WORD *)<span class=\"supfact\">a1</span> == Number &&\n             *((_BYTE *)&mode_size +\n               *(unsigned __int8 *)(<span class=\"supfact\">a1</span> + Number)) >\n                 *((_BYTE *)&mode_size +\n                   *(unsigned __int8 *)(*(_QWORD *)(<span class=\"supfact\">a1</span> +\n                                                    Number) +\n                                        Number L))) {\n    v27 = gen_lowpart_common(\n        *(unsigned __int8 *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                             Number L),\n        <span class=\"supfact\">a2</span>);\n    if (v27) {\n      <span class=\"supfact\">v18</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n      <span class=\"supfact\">v17</span> = (unsigned __int16 *)v27;\n    }\n  }\n  if (*<span class=\"supfact\">v17</span> == Number &&\n      (**((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number) &&\n      (**((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number ||\n       **((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number)) {\n    <span class=\"supfact\">v30</span> = find_replacement(<span class=\"supfact\">v17</span> + Number);\n    <span class=\"supfact\">v29</span> = find_replacement(<span class=\"supfact\">v17</span> + Number);\n    if (**((_WORD **)<span class=\"supfact\">v17</span> + Number) == Number &&\n        *(_DWORD *)(<span class=\"supfact\">v18</span> + Number) ==\n            *(_DWORD *)(*((_QWORD *)<span class=\"supfact\">v17</span> + Number) + Number L)) {\n      v24 = <span class=\"supfact\">v30</span>;\n      <span class=\"supfact\">v30</span> = <span class=\"supfact\">v29</span>;\n      <span class=\"supfact\">v29</span> = v24;\n    }\n    if (<span class=\"supfact\">v30</span> != *((_QWORD *)<span class=\"supfact\">v17</span> + Number) ||\n        <span class=\"supfact\">v29</span> != *((_QWORD *)<span class=\"supfact\">v17</span> + Number))\n      <span class=\"supfact\">v17</span> = (unsigned __int16 *)gen_rtx_fmt_ee(\n          Number L, *((unsigned __int8 *)<span class=\"supfact\">v17</span> + Number),\n          <span class=\"supfact\">v30</span>, <span class=\"supfact\">v29</span>);\n    v4 = gen_rtx_fmt_ee(Number L, Number L, <span class=\"supfact\">v18</span>,\n                        <span class=\"supfact\">v17</span>);\n    v21 = emit_insn(v4);\n    if (*(int *)(v21 + Number) < Number)\n      v5 = recog_memoized_1(v21);\n    else\n      v5 = *(_DWORD *)(v21 + Number);\n    if (v5 >= Number) {\n      extract_insn(v21);\n      if ((unsigned int)constrain_operands(Number L))\n        return v21;\n    }\n    delete_insns_since(<span class=\"supfact\">v28</span>);\n    <span class=\"supfact\">v20</span> =\n        *(_DWORD *)(optab_table +\n                    Number L *\n                        *(unsigned __int8 *)(<span class=\"supfact\">v18</span> + Number) +\n                    Number);\n    if (*(_WORD *)<span class=\"supfact\">v29</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">v29</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">v29</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">v29</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">v29</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">v29</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">v29</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">v29</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">v29</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">v29</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">v29</span> == Number &&\n            *(_DWORD *)(<span class=\"supfact\">v29</span> + Number) > Number ||\n        <span class=\"supfact\">v20</span> != Number &&\n            !(*(unsigned int(__fastcall **)(__int64, _QWORD))(\n                insn_data[Number * <span class=\"supfact\">v20</span> + Number] + Number L))(\n                <span class=\"supfact\">v29</span>,\n                *(unsigned __int16\n                      *)(insn_data[Number * <span class=\"supfact\">v20</span> + Number] +\n                         Number L))) {\n      v25 = <span class=\"supfact\">v30</span>;\n      <span class=\"supfact\">v30</span> = <span class=\"supfact\">v29</span>;\n      <span class=\"supfact\">v29</span> = v25;\n    }\n    gen_reload(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v30</span>, <span class=\"supfact\">a3</span>,\n               <span class=\"supfact\">a4</span>);\n    if ((unsigned int)rtx_equal_p(<span class=\"supfact\">v30</span>, <span class=\"supfact\">v29</span>))\n      <span class=\"supfact\">v29</span> = <span class=\"supfact\">v18</span>;\n    v7 = gen_add2_insn(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v29</span>);\n    v22 = emit_insn(v7);\n    if (*(int *)(v22 + Number) < Number)\n      v8 = recog_memoized_1(v22);\n    else\n      v8 = *(_DWORD *)(v22 + Number);\n    if (v8 >= Number) {\n      extract_insn(v22);\n      if ((unsigned int)constrain_operands(Number L)) {\n        *(_QWORD *)(v22 + Number) = gen_rtx_fmt_ee(\n            Number L, Number L, <span class=\"supfact\">v17</span>, *(_QWORD *)(v22 + Number));\n        return v22;\n      }\n    }\n    delete_insns_since(<span class=\"supfact\">v28</span>);\n    gen_reload(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v29</span>, <span class=\"supfact\">a3</span>,\n               <span class=\"supfact\">a4</span>);\n    v9 = gen_add2_insn(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v30</span>);\n    v23 = emit_insn(v9);\n    *(_QWORD *)(v23 + Number) = gen_rtx_fmt_ee(\n        Number L, Number L, <span class=\"supfact\">v17</span>, *(_QWORD *)(v23 + Number));\n  } else if ((*<span class=\"supfact\">v17</span> == Number ||\n              *<span class=\"supfact\">v17</span> == Number) &&\n             (unsigned int)reg_or_subregno(<span class=\"supfact\">v17</span>) <= Number &&\n             (*(_WORD *)<span class=\"supfact\">v18</span> == Number ||\n              *(_WORD *)<span class=\"supfact\">v18</span> == Number) &&\n             (unsigned int)reg_or_subregno(<span class=\"supfact\">v18</span>) <= Number &&\n             (<span class=\"supfact\">v10</span> =\n                  *(unsigned __int8 *)(<span class=\"supfact\">v18</span> + Number),\n              <span class=\"supfact\">v11</span> =\n                  *((_DWORD *)&regclass_map +\n                    (unsigned int)reg_or_subregno(<span class=\"supfact\">v18</span>)),\n              v12 = reg_or_subregno(<span class=\"supfact\">v17</span>),\n              (unsigned int)ix86_secondary_memory_needed(\n                  *((unsigned int *)&regclass_map + v12), <span class=\"supfact\">v11</span>,\n                  <span class=\"supfact\">v10</span>, Number L))) {\n    <span class=\"supfact\">v19</span> = get_secondary_mem(\n        <span class=\"supfact\">v17</span>, *(unsigned __int8 *)(<span class=\"supfact\">v18</span> + Number),\n        <span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>);\n    if (*(_BYTE *)(<span class=\"supfact\">v19</span> + Number) !=\n        *(_BYTE *)(<span class=\"supfact\">v18</span> + Number))\n      <span class=\"supfact\">v18</span> =\n          gen_rtx_REG(*(unsigned __int8 *)(<span class=\"supfact\">v19</span> + Number),\n                      *(unsigned int *)(<span class=\"supfact\">v18</span> + Number));\n    if (*(_BYTE *)(<span class=\"supfact\">v19</span> + Number) !=\n        *((_BYTE *)<span class=\"supfact\">v17</span> + Number))\n      <span class=\"supfact\">v17</span> = (unsigned __int16 *)gen_rtx_REG(\n          *(unsigned __int8 *)(<span class=\"supfact\">v19</span> + Number),\n          *((unsigned int *)<span class=\"supfact\">v17</span> + Number));\n    gen_reload(<span class=\"supfact\">v19</span>, <span class=\"supfact\">v17</span>, <span class=\"supfact\">a3</span>,\n               <span class=\"supfact\">a4</span>);\n    gen_reload(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v19</span>, <span class=\"supfact\">a3</span>,\n               <span class=\"supfact\">a4</span>);\n  } else if (*((_BYTE *)&rtx_class + *<span class=\"supfact\">v17</span>) == Number ||\n             *<span class=\"supfact\">v17</span> == Number) {\n    v13 = gen_move_insn(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v17</span>);\n    emit_insn(v13);\n  } else {\n    v14 = gen_rtx_fmt_ee(Number L, Number L, <span class=\"supfact\">v18</span>,\n                         <span class=\"supfact\">v17</span>);\n    emit_insn(v14);\n  }\n  if (<span class=\"supfact\">v28</span>)\n    result = *(_QWORD *)(<span class=\"supfact\">v28</span> + Number);\n  else\n    result = get_insns();\n  return result;\n}", "code_t": "rtx __cdecl gen_reload(rtx <span class=\"supfact\">out</span>, rtx <span class=\"supfact\">in</span>,\n                       int <span class=\"supfact\">opnum</span>,\n                       reload_type <span class=\"supfact\">type</span>) {\n  __int64 v4;\n  int v5;\n  rtx result;\n  __int64 v7;\n  int v8;\n  __int64 v9;\n  unsigned int <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">v11</span>;\n  unsigned int v12;\n  __int64 v13;\n  __int64 v14;\n  rtx <span class=\"supfact\">ina</span>;\n  rtx <span class=\"supfact\">outa</span>;\n  rtx <span class=\"supfact\">loc</span>;\n  int <span class=\"supfact\">code</span>;\n  rtx insn;\n  rtx insna;\n  rtx insnb;\n  rtx tem_0;\n  rtx tem_0a;\n  rtx tem;\n  rtx tema;\n  rtx <span class=\"supfact\">last</span>;\n  rtx <span class=\"supfact\">op1</span>;\n  rtx_def *<span class=\"supfact\">op0</span>;\n  <span class=\"supfact\">outa</span> = <span class=\"supfact\">out</span>;\n  <span class=\"supfact\">ina</span> = <span class=\"supfact\">in</span>;\n  <span class=\"supfact\">last</span> = (rtx)get_last_insn();\n  if (*(_WORD *)<span class=\"supfact\">in</span> == Number &&\n      *((_BYTE *)&mode_size +\n        *((unsigned __int8 *)<span class=\"supfact\">in</span> + Number)) >\n          *((_BYTE *)&mode_size +\n            *(unsigned __int8 *)(<span class=\"supfact\">in</span>->fld[Number].rtwint +\n                                 Number)) &&\n      (tem = (rtx)gen_lowpart_common(\n           *(unsigned __int8 *)(<span class=\"supfact\">in</span>->fld[Number].rtwint +\n                                Number),\n           <span class=\"supfact\">out</span>)) != Number L) {\n    <span class=\"supfact\">ina</span> = <span class=\"supfact\">in</span>->fld[Number].rtx;\n    <span class=\"supfact\">outa</span> = tem;\n  } else if (*(_WORD *)<span class=\"supfact\">out</span> == Number &&\n             *((_BYTE *)&mode_size +\n               *((unsigned __int8 *)<span class=\"supfact\">out</span> + Number)) >\n                 *((_BYTE *)&mode_size +\n                   *(unsigned __int8 *)(<span class=\"supfact\">out</span>->fld[Number]\n                                            .rtwint +\n                                        Number))) {\n    tema = (rtx)gen_lowpart_common(\n        *(unsigned __int8 *)(<span class=\"supfact\">out</span>->fld[Number].rtwint + Number),\n        <span class=\"supfact\">in</span>);\n    if (tema) {\n      <span class=\"supfact\">outa</span> = <span class=\"supfact\">out</span>->fld[Number].rtx;\n      <span class=\"supfact\">ina</span> = tema;\n    }\n  }\n  if (*(_WORD *)<span class=\"supfact\">ina</span> == Number &&\n      (*(_WORD *)<span class=\"supfact\">ina</span>->fld[Number].rtwint == Number ||\n       *(_WORD *)<span class=\"supfact\">ina</span>->fld[Number].rtwint == Number ||\n       *(_WORD *)<span class=\"supfact\">ina</span>->fld[Number].rtwint == Number) &&\n      (**(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number ||\n       **(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number ||\n       **(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number ||\n       **(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number ||\n       **(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number ||\n       **(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number ||\n       **(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number ||\n       **(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number ||\n       **(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number ||\n       **(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number ||\n       **(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number)) {\n    <span class=\"supfact\">op0</span> = (rtx_def *)find_replacement(<span class=\"supfact\">ina</span>->fld);\n    <span class=\"supfact\">op1</span> = (rtx)find_replacement(&<span class=\"supfact\">ina</span>[Number]);\n    if (**(_WORD **)&<span class=\"supfact\">ina</span>[Number] == Number &&\n        <span class=\"supfact\">outa</span>->fld[Number].rtint ==\n            *(_DWORD *)(*(_QWORD *)&<span class=\"supfact\">ina</span>[Number] + Number L)) {\n      tem_0 = <span class=\"supfact\">op0</span>;\n      <span class=\"supfact\">op0</span> = <span class=\"supfact\">op1</span>;\n      <span class=\"supfact\">op1</span> = tem_0;\n    }\n    if (<span class=\"supfact\">op0</span> != <span class=\"supfact\">ina</span>->fld[Number].rtx ||\n        <span class=\"supfact\">op1</span> != (rtx)<span class=\"supfact\">ina</span>[Number])\n      <span class=\"supfact\">ina</span> = (rtx)gen_rtx_fmt_ee(\n          Number L, *((unsigned __int8 *)<span class=\"supfact\">ina</span> + Number),\n          <span class=\"supfact\">op0</span>, <span class=\"supfact\">op1</span>);\n    v4 = gen_rtx_fmt_ee(Number L, Number L, <span class=\"supfact\">outa</span>,\n                        <span class=\"supfact\">ina</span>);\n    insn = (rtx)emit_insn(v4);\n    if (insn[Number].fld[Number].rtint < Number)\n      v5 = recog_memoized_1(insn);\n    else\n      v5 = insn[Number].fld[Number].rtint;\n    if (v5 >= Number) {\n      extract_insn(insn);\n      if ((unsigned int)constrain_operands(Number L))\n        return insn;\n    }\n    delete_insns_since(<span class=\"supfact\">last</span>);\n    <span class=\"supfact\">code</span> =\n        optab_table[*((unsigned __int8 *)<span class=\"supfact\">outa</span> + Number)]\n            .fld[Number]\n            .rtint;\n    if (*(_WORD *)<span class=\"supfact\">op1</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">op1</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">op1</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">op1</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">op1</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">op1</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">op1</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">op1</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">op1</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">op1</span> == Number ||\n        *(_WORD *)<span class=\"supfact\">op1</span> == Number &&\n            <span class=\"supfact\">op1</span>->fld[Number].rtint > Number ||\n        <span class=\"supfact\">code</span> != Number &&\n            !(*(unsigned int(__fastcall **)(rtx, _QWORD))(\n                insn_data_0[Number * <span class=\"supfact\">code</span> + Number] +\n                Number L))(\n                <span class=\"supfact\">op1</span>,\n                *(unsigned __int16\n                      *)(insn_data_0[Number * <span class=\"supfact\">code</span> + Number] +\n                         Number L))) {\n      tem_0a = <span class=\"supfact\">op0</span>;\n      <span class=\"supfact\">op0</span> = <span class=\"supfact\">op1</span>;\n      <span class=\"supfact\">op1</span> = tem_0a;\n    }\n    gen_reload(<span class=\"supfact\">outa</span>, <span class=\"supfact\">op0</span>, <span class=\"supfact\">opnum</span>,\n               <span class=\"supfact\">type</span>);\n    if ((unsigned int)rtx_equal_p(<span class=\"supfact\">op0</span>, <span class=\"supfact\">op1</span>))\n      <span class=\"supfact\">op1</span> = <span class=\"supfact\">outa</span>;\n    v7 = gen_add2_insn(<span class=\"supfact\">outa</span>, <span class=\"supfact\">op1</span>);\n    insna = (rtx)emit_insn(v7);\n    if (insna[Number].fld[Number].rtint < Number)\n      v8 = recog_memoized_1(insna);\n    else\n      v8 = insna[Number].fld[Number].rtint;\n    if (v8 >= Number) {\n      extract_insn(insna);\n      if ((unsigned int)constrain_operands(Number L)) {\n        insna[Number].fld[Number].rtwint = ((__int64(__fastcall *)(\n            _QWORD, _QWORD, _QWORD, _QWORD))gen_rtx_fmt_ee)(\n            Number L, Number L, <span class=\"supfact\">ina</span>,\n            (rtunion)insna[Number].fld[Number].rtwint);\n        return insna;\n      }\n    }\n    delete_insns_since(<span class=\"supfact\">last</span>);\n    gen_reload(<span class=\"supfact\">outa</span>, <span class=\"supfact\">op1</span>, <span class=\"supfact\">opnum</span>,\n               <span class=\"supfact\">type</span>);\n    v9 = gen_add2_insn(<span class=\"supfact\">outa</span>, <span class=\"supfact\">op0</span>);\n    insnb = (rtx)emit_insn(v9);\n    insnb[Number].fld[Number].rtwint =\n        ((__int64(__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD))gen_rtx_fmt_ee)(\n            Number L, Number L, <span class=\"supfact\">ina</span>,\n            (rtunion)insnb[Number].fld[Number].rtwint);\n  } else if ((*(_WORD *)<span class=\"supfact\">ina</span> == Number ||\n              *(_WORD *)<span class=\"supfact\">ina</span> == Number) &&\n             (unsigned int)reg_or_subregno(<span class=\"supfact\">ina</span>) <= Number &&\n             (*(_WORD *)<span class=\"supfact\">outa</span> == Number ||\n              *(_WORD *)<span class=\"supfact\">outa</span> == Number) &&\n             (unsigned int)reg_or_subregno(<span class=\"supfact\">outa</span>) <= Number &&\n             (<span class=\"supfact\">v10</span> =\n                  *((unsigned __int8 *)<span class=\"supfact\">outa</span> + Number),\n              <span class=\"supfact\">v11</span> =\n                  *((_DWORD *)&regclass_map +\n                    (unsigned int)reg_or_subregno(<span class=\"supfact\">outa</span>)),\n              v12 = reg_or_subregno(<span class=\"supfact\">ina</span>),\n              (unsigned int)ix86_secondary_memory_needed(\n                  *((unsigned int *)&regclass_map + v12), <span class=\"supfact\">v11</span>,\n                  <span class=\"supfact\">v10</span>, Number L))) {\n    <span class=\"supfact\">loc</span> = (rtx)get_secondary_mem(\n        <span class=\"supfact\">ina</span>,\n        *((unsigned __int8 *)<span class=\"supfact\">outa</span> + Number),\n        (unsigned int)<span class=\"supfact\">opnum</span>,\n        (unsigned int)<span class=\"supfact\">type</span>);\n    if (*((_BYTE *)<span class=\"supfact\">loc</span> + Number) !=\n        *((_BYTE *)<span class=\"supfact\">outa</span> + Number))\n      <span class=\"supfact\">outa</span> =\n          (rtx)gen_rtx_REG(*((unsigned __int8 *)<span class=\"supfact\">loc</span> + Number),\n                           <span class=\"supfact\">outa</span>->fld[Number].rtuint);\n    if (*((_BYTE *)<span class=\"supfact\">loc</span> + Number) !=\n        *((_BYTE *)<span class=\"supfact\">ina</span> + Number))\n      <span class=\"supfact\">ina</span> =\n          (rtx)gen_rtx_REG(*((unsigned __int8 *)<span class=\"supfact\">loc</span> + Number),\n                           <span class=\"supfact\">ina</span>->fld[Number].rtuint);\n    gen_reload(<span class=\"supfact\">loc</span>, <span class=\"supfact\">ina</span>, <span class=\"supfact\">opnum</span>,\n               <span class=\"supfact\">type</span>);\n    gen_reload(<span class=\"supfact\">outa</span>, <span class=\"supfact\">loc</span>, <span class=\"supfact\">opnum</span>,\n               <span class=\"supfact\">type</span>);\n  } else if (*((_BYTE *)&rtx_class + *(_WORD *)<span class=\"supfact\">ina</span>) == Number ||\n             *(_WORD *)<span class=\"supfact\">ina</span> == Number) {\n    v13 = gen_move_insn(<span class=\"supfact\">outa</span>, <span class=\"supfact\">ina</span>);\n    emit_insn(v13);\n  } else {\n    v14 = gen_rtx_fmt_ee(Number L, Number L, <span class=\"supfact\">outa</span>,\n                         <span class=\"supfact\">ina</span>);\n    emit_insn(v14);\n  }\n  if (<span class=\"supfact\">last</span>)\n    result = <span class=\"supfact\">last</span>[Number].fld[Number].rtx;\n  else\n    result = (rtx)get_insns();\n  return result;\n}", "var": [{"name": "a1", "type": "rtx", "pred_name": "x", "ref_name": "out", "ref_type": "rtx"}, {"name": "a2", "type": "rtx", "pred_name": "y", "ref_name": "in", "ref_type": "rtx"}, {"name": "a3", "type": "int", "pred_name": "opnum", "ref_name": "opnum", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "offset", "ref_name": "type", "ref_type": "reload_type"}, {"name": "v10", "type": "int", "pred_name": "v10", "ref_name": "v10", "ref_type": "unsigned int"}, {"name": "v11", "type": "int", "pred_name": "v11", "ref_name": "v11", "ref_type": "unsigned int"}, {"name": "v17", "type": "rtx", "pred_name": "xa", "ref_name": "ina", "ref_type": "rtx"}, {"name": "v18", "type": "rtx", "pred_name": "ya", "ref_name": "outa", "ref_type": "rtx"}, {"name": "v19", "type": "rtx", "pred_name": "xa", "ref_name": "loc", "ref_type": "rtx"}, {"name": "v20", "type": "int", "pred_name": "__unk__", "ref_name": "code", "ref_type": "int"}, {"name": "v28", "type": "rtx", "pred_name": "tem", "ref_name": "last", "ref_type": "rtx"}, {"name": "v29", "type": "rtx", "pred_name": "tem_0", "ref_name": "op1", "ref_type": "rtx"}, {"name": "v30", "type": "rtx", "pred_name": "tem", "ref_name": "op0", "ref_type": "rtx_def *"}], "body_in_train": false}, {"repo_owner": "FillipeAs", "repo_name": "Linuuux", "path": "FillipeAs/Linuuux/d870ddb0ae564a6aa95e619ac8b6db768eeb33fa4467c6f15df0bbb4d9842eb5", "path_in_repo": "FillipeAs/Linuuux/tools/perf/ui/libperf-in.o", "objdump": "00000000000189db <popup_menu__run>:\n   189db:\t55                   \tpush   %rbp\n   189dc:\t48 89 e5             \tmov    %rsp,%rbp\n   189df:\t48 83 ec 20          \tsub    $0x20,%rsp\n   189e3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   189e7:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n   189ee:\t00 00 \n   189f0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   189f4:\t31 c0                \txor    %eax,%eax\n   189f6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   189fa:\tba 00 00 00 00       \tmov    $0x0,%edx\n   189ff:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   18a04:\t48 89 c7             \tmov    %rax,%rdi\n   18a07:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   18a0c:\te8 00 00 00 00       \tcallq  18a11 <popup_menu__run+0x36>\n   18a11:\t85 c0                \ttest   %eax,%eax\n   18a13:\t79 07                \tjns    18a1c <popup_menu__run+0x41>\n   18a15:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   18a1a:\teb 7f                \tjmp    18a9b <popup_menu__run+0xc0>\n   18a1c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   18a20:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   18a25:\t48 89 c7             \tmov    %rax,%rdi\n   18a28:\te8 00 00 00 00       \tcallq  18a2d <popup_menu__run+0x52>\n   18a2d:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n   18a30:\t81 7d f4 04 01 00 00 \tcmpl   $0x104,-0xc(%rbp)\n   18a37:\t74 3f                \tje     18a78 <popup_menu__run+0x9d>\n   18a39:\t81 7d f4 04 01 00 00 \tcmpl   $0x104,-0xc(%rbp)\n   18a40:\t7f da                \tjg     18a1c <popup_menu__run+0x41>\n   18a42:\t81 7d f4 03 01 00 00 \tcmpl   $0x103,-0xc(%rbp)\n   18a49:\t74 39                \tje     18a84 <popup_menu__run+0xa9>\n   18a4b:\t81 7d f4 03 01 00 00 \tcmpl   $0x103,-0xc(%rbp)\n   18a52:\t7f c8                \tjg     18a1c <popup_menu__run+0x41>\n   18a54:\t83 7d f4 71          \tcmpl   $0x71,-0xc(%rbp)\n   18a58:\t74 2a                \tje     18a84 <popup_menu__run+0xa9>\n   18a5a:\t83 7d f4 71          \tcmpl   $0x71,-0xc(%rbp)\n   18a5e:\t7f bc                \tjg     18a1c <popup_menu__run+0x41>\n   18a60:\t83 7d f4 1b          \tcmpl   $0x1b,-0xc(%rbp)\n   18a64:\t74 1e                \tje     18a84 <popup_menu__run+0xa9>\n   18a66:\t83 7d f4 1b          \tcmpl   $0x1b,-0xc(%rbp)\n   18a6a:\t7f b0                \tjg     18a1c <popup_menu__run+0x41>\n   18a6c:\t83 7d f4 03          \tcmpl   $0x3,-0xc(%rbp)\n   18a70:\t74 12                \tje     18a84 <popup_menu__run+0xa9>\n   18a72:\t83 7d f4 0d          \tcmpl   $0xd,-0xc(%rbp)\n   18a76:\t75 a4                \tjne    18a1c <popup_menu__run+0x41>\n   18a78:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   18a7c:\t48 8b 00             \tmov    (%rax),%rax\n   18a7f:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n   18a82:\teb 07                \tjmp    18a8b <popup_menu__run+0xb0>\n   18a84:\tc7 45 f4 ff ff ff ff \tmovl   $0xffffffff,-0xc(%rbp)\n   18a8b:\t90                   \tnop\n   18a8c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   18a90:\t48 89 c7             \tmov    %rax,%rdi\n   18a93:\te8 00 00 00 00       \tcallq  18a98 <popup_menu__run+0xbd>\n   18a98:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n   18a9b:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n   18a9f:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n   18aa6:\t00 00 \n   18aa8:\t74 05                \tje     18aaf <popup_menu__run+0xd4>\n   18aaa:\te8 00 00 00 00       \tcallq  18aaf <popup_menu__run+0xd4>\n   18aaf:\tc9                   \tleaveq \n   18ab0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall popup_menu__run(_QWORD *<span class=\"supfact\">a1</span>,\n                                   __int64 <span class=\"supfact\">a2</span>,\n                                   __int64 <span class=\"supfact\">a3</span>,\n                                   __int64 <span class=\"supfact\">a4</span>,\n                                   __int64 <span class=\"supfact\">a5</span>,\n                                   __int64 <span class=\"supfact\">a6</span>) {\n  int v7;\n  unsigned int v8;\n  if ((int)ui_browser__show((__int64)<span class=\"supfact\">a1</span>, (__int64)String,\n                            String, <span class=\"supfact\">a4</span>, <span class=\"supfact\">a5</span>,\n                            <span class=\"supfact\">a6</span>) < Number)\n    return Number;\n  while (Number) {\n    do {\n      v7 = ui_browser__run((__int64)<span class=\"supfact\">a1</span>, Number);\n      if (v7 == Number) {\n      LABEL_12:\n        v8 = *<span class=\"supfact\">a1</span>;\n        goto LABEL_14;\n      }\n    } while (v7 > Number);\n    if (v7 == Number || v7 == Number)\n      break;\n    if (v7 <= Number) {\n      if (v7 == Number)\n        break;\n      if (v7 <= Number) {\n        if (v7 == Number)\n          break;\n        if (v7 == Number)\n          goto LABEL_12;\n      }\n    }\n  }\n  v8 = Number;\nLABEL_14:\n  ui_browser__hide((__int64)<span class=\"supfact\">a1</span>);\n  return v8;\n}", "code_t": "int __cdecl popup_menu__run(ui_browser *<span class=\"supfact\">menu</span>) {\n  int key;\n  int keya;\n  if (ui_browser__show(<span class=\"supfact\">menu</span>, String, String) < Number)\n    return Number;\n  while (Number) {\n    do {\n      key = ui_browser__run(<span class=\"supfact\">menu</span>, Number);\n      if (key == Number) {\n      LABEL_12:\n        keya = <span class=\"supfact\">menu</span>->index;\n        goto LABEL_14;\n      }\n    } while (key > Number);\n    if (key == Number || key == Number)\n      break;\n    if (key <= Number) {\n      if (key == Number)\n        break;\n      if (key <= Number) {\n        if (key == Number)\n          break;\n        if (key == Number)\n          goto LABEL_12;\n      }\n    }\n  }\n  keya = Number;\nLABEL_14:\n  ui_browser__hide(<span class=\"supfact\">menu</span>);\n  return keya;\n}", "var": [{"name": "a1", "type": "ui_browser *", "pred_name": "menu", "ref_name": "menu", "ref_type": "ui_browser *"}, {"name": "a2", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "pret", "repo_name": "agbcc", "path": "pret/agbcc/204888f163b15783c78de16fb0665f79cb7b20a028efdc5249dcea8ed5e8b32d", "path_in_repo": "pret/agbcc/gcc/genconfig", "objdump": "", "code_s": "size_t fwrite(const void *<span class=\"supfact\">ptr</span>, size_t <span class=\"supfact\">size</span>,\n              size_t <span class=\"supfact\">n</span>, FILE *<span class=\"supfact\">s</span>) {\n  return fwrite(<span class=\"supfact\">ptr</span>, <span class=\"supfact\">size</span>, <span class=\"supfact\">n</span>,\n                <span class=\"supfact\">s</span>);\n}", "code_t": "size_t fwrite(const void *<span class=\"supfact\">ptr</span>, size_t <span class=\"supfact\">size</span>,\n              size_t <span class=\"supfact\">n</span>, FILE *<span class=\"supfact\">s</span>) {\n  return fwrite(<span class=\"supfact\">ptr</span>, <span class=\"supfact\">size</span>, <span class=\"supfact\">n</span>,\n                <span class=\"supfact\">s</span>);\n}", "var": [{"name": "ptr", "type": "const void *", "pred_name": "ptr", "ref_name": "ptr", "ref_type": "const void *"}, {"name": "size", "type": "size_t", "pred_name": "size", "ref_name": "size", "ref_type": "size_t"}, {"name": "n", "type": "size_t", "pred_name": "n", "ref_name": "n", "ref_type": "size_t"}, {"name": "s", "type": "FILE *", "pred_name": "s", "ref_name": "s", "ref_type": "FILE *"}], "body_in_train": true}, {"repo_owner": "slapin", "repo_name": "q2-dev", "path": "slapin/q2-dev/d9dbd837bbef49b1985df60d30ce2e7f3ca46c67bab5d747c61db0661dee9abd", "path_in_repo": "slapin/q2-dev/quake2/debugx86_64/ref_soft/r_draw.o", "objdump": "00000000000002af <Draw_GetPicSize>:\n 2af:\t55                   \tpush   %rbp\n 2b0:\t48 89 e5             \tmov    %rsp,%rbp\n 2b3:\t48 83 ec 30          \tsub    $0x30,%rsp\n 2b7:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 2bb:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 2bf:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 2c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 2c7:\t48 89 c7             \tmov    %rax,%rdi\n 2ca:\te8 00 00 00 00       \tcallq  2cf <Draw_GetPicSize+0x20>\n 2cf:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 2d3:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 2d8:\t75 18                \tjne    2f2 <Draw_GetPicSize+0x43>\n 2da:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 2de:\tc7 00 ff ff ff ff    \tmovl   $0xffffffff,(%rax)\n 2e4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 2e8:\t8b 10                \tmov    (%rax),%edx\n 2ea:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2ee:\t89 10                \tmov    %edx,(%rax)\n 2f0:\teb 1a                \tjmp    30c <Draw_GetPicSize+0x5d>\n 2f2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 2f6:\t8b 50 44             \tmov    0x44(%rax),%edx\n 2f9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2fd:\t89 10                \tmov    %edx,(%rax)\n 2ff:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 303:\t8b 50 48             \tmov    0x48(%rax),%edx\n 306:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 30a:\t89 10                \tmov    %edx,(%rax)\n 30c:\tc9                   \tleaveq \n 30d:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall Draw_GetPicSize(_DWORD *<span class=\"supfact\">a1</span>,\n                                   _DWORD *<span class=\"supfact\">a2</span>,\n                                   const char *<span class=\"supfact\">a3</span>) {\n  _DWORD *<span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Draw_FindPic(<span class=\"supfact\">a3</span>);\n  if (<span class=\"supfact\">v4</span>) {\n    *<span class=\"supfact\">a1</span> = *(_DWORD *)(<span class=\"supfact\">v4</span> + Number);\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">a2</span>;\n    *<span class=\"supfact\">a2</span> = *(_DWORD *)(<span class=\"supfact\">v4</span> + Number);\n  } else {\n    *<span class=\"supfact\">a2</span> = Number;\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>;\n    *<span class=\"supfact\">a1</span> = *<span class=\"supfact\">a2</span>;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl Draw_GetPicSize(int *<span class=\"supfact\">w</span>, int *<span class=\"supfact\">h</span>,\n                             char *<span class=\"supfact\">pic</span>) {\n  image_t *<span class=\"supfact\">gl</span>;\n  <span class=\"supfact\">gl</span> = Draw_FindPic(<span class=\"supfact\">pic</span>);\n  if (<span class=\"supfact\">gl</span>) {\n    *<span class=\"supfact\">w</span> = <span class=\"supfact\">gl</span>->width;\n    *<span class=\"supfact\">h</span> = <span class=\"supfact\">gl</span>->height;\n  } else {\n    *<span class=\"supfact\">h</span> = Number;\n    *<span class=\"supfact\">w</span> = *<span class=\"supfact\">h</span>;\n  }\n}", "var": [{"name": "a1", "type": "int *", "pred_name": "w", "ref_name": "w", "ref_type": "int *"}, {"name": "a2", "type": "int *", "pred_name": "h", "ref_name": "h", "ref_type": "int *"}, {"name": "a3", "type": "char *", "pred_name": "pic", "ref_name": "pic", "ref_type": "char *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v4", "type": "image_t *", "pred_name": "gl", "ref_name": "gl", "ref_type": "image_t *"}], "body_in_train": false}, {"repo_owner": "ktf", "repo_name": "bgfx-mono", "path": "ktf/bgfx-mono/e0f9646f49e071f331b4ddaa783c680422def19d89562c12e17b45004fab6085", "path_in_repo": "ktf/bgfx-mono/bgfx/3rdparty/scintilla/win32/LexLout.o", "objdump": "0000000000000080 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor>:\n  80:\t41 57                \tpush   %r15\n  82:\t8d 04 3e             \tlea    (%rsi,%rdi,1),%eax\n  85:\t89 fe                \tmov    %edi,%esi\n  87:\t41 56                \tpush   %r14\n  89:\t41 55                \tpush   %r13\n  8b:\t41 89 fd             \tmov    %edi,%r13d\n  8e:\t41 54                \tpush   %r12\n  90:\t55                   \tpush   %rbp\n  91:\t53                   \tpush   %rbx\n  92:\t4c 89 c3             \tmov    %r8,%rbx\n  95:\t48 83 ec 38          \tsub    $0x38,%rsp\n  99:\t49 8b 38             \tmov    (%r8),%rdi\n  9c:\t89 44 24 08          \tmov    %eax,0x8(%rsp)\n  a0:\te8 c9 ff ff ff       \tcallq  6e <_ZNK11LexAccessor7GetLineEi.isra.0>\n  a5:\t48 8b 3b             \tmov    (%rbx),%rdi\n  a8:\t89 c6                \tmov    %eax,%esi\n  aa:\t41 89 c6             \tmov    %eax,%r14d\n  ad:\te8 c8 ff ff ff       \tcallq  7a <_ZNK11LexAccessor7LevelAtEi.isra.0>\n  b2:\t44 89 ee             \tmov    %r13d,%esi\n  b5:\t48 89 df             \tmov    %rbx,%rdi\n  b8:\t25 ff 0f 00 00       \tand    $0xfff,%eax\n  bd:\t89 c5                \tmov    %eax,%ebp\n  bf:\te8 00 00 00 00       \tcallq  c4 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x44>\n  c4:\tba 01 00 00 00       \tmov    $0x1,%edx\n  c9:\t48 89 df             \tmov    %rbx,%rdi\n  cc:\t41 89 ef             \tmov    %ebp,%r15d\n  cf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  d4:\t41 89 c4             \tmov    %eax,%r12d\n  d7:\te8 00 00 00 00       \tcallq  dc <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x5c>\n  dc:\t48 8b 3b             \tmov    (%rbx),%rdi\n  df:\t44 89 ee             \tmov    %r13d,%esi\n  e2:\t85 c0                \ttest   %eax,%eax\n  e4:\t48 8b 07             \tmov    (%rdi),%rax\n  e7:\t0f 95 44 24 0f       \tsetne  0xf(%rsp)\n  ec:\tff 50 20             \tcallq  *0x20(%rax)\n  ef:\t66 c7 44 24 2e 00 00 \tmovw   $0x0,0x2e(%rsp)\n  f6:\t48 c7 44 24 26 00 00 \tmovq   $0x0,0x26(%rsp)\n  fd:\t00 00 \n  ff:\t0f be c8             \tmovsbl %al,%ecx\n 102:\tc7 04 24 00 00 00 00 \tmovl   $0x0,(%rsp)\n 109:\t89 4c 24 14          \tmov    %ecx,0x14(%rsp)\n 10d:\t44 3b 6c 24 08       \tcmp    0x8(%rsp),%r13d\n 112:\t0f 83 6c 01 00 00    \tjae    284 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x204>\n 118:\t41 8d 45 01          \tlea    0x1(%r13),%eax\n 11c:\tba 20 00 00 00       \tmov    $0x20,%edx\n 121:\t48 89 df             \tmov    %rbx,%rdi\n 124:\t89 c6                \tmov    %eax,%esi\n 126:\t89 44 24 04          \tmov    %eax,0x4(%rsp)\n 12a:\te8 00 00 00 00       \tcallq  12f <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0xaf>\n 12f:\t48 8b 3b             \tmov    (%rbx),%rdi\n 132:\t41 8d 75 01          \tlea    0x1(%r13),%esi\n 136:\t88 44 24 0e          \tmov    %al,0xe(%rsp)\n 13a:\t48 8b 07             \tmov    (%rdi),%rax\n 13d:\tff 50 20             \tcallq  *0x20(%rax)\n 140:\t41 80 fc 0d          \tcmp    $0xd,%r12b\n 144:\t8b 4c 24 14          \tmov    0x14(%rsp),%ecx\n 148:\t0f be c0             \tmovsbl %al,%eax\n 14b:\t89 44 24 10          \tmov    %eax,0x10(%rsp)\n 14f:\t0f 94 c0             \tsete   %al\n 152:\t80 7c 24 0e 0a       \tcmpb   $0xa,0xe(%rsp)\n 157:\t0f 95 c2             \tsetne  %dl\n 15a:\t21 d0                \tand    %edx,%eax\n 15c:\t41 80 fc 0a          \tcmp    $0xa,%r12b\n 160:\t0f 94 c2             \tsete   %dl\n 163:\t09 d0                \tor     %edx,%eax\n 165:\t83 f9 03             \tcmp    $0x3,%ecx\n 168:\t75 7b                \tjne    1e5 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x165>\n 16a:\t41 80 fc 40          \tcmp    $0x40,%r12b\n 16e:\t0f 85 8a 00 00 00    \tjne    1fe <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x17e>\n 174:\t31 d2                \txor    %edx,%edx\n 176:\t41 8d 74 15 00       \tlea    0x0(%r13,%rdx,1),%esi\n 17b:\t48 89 df             \tmov    %rbx,%rdi\n 17e:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n 183:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n 187:\te8 00 00 00 00       \tcallq  18c <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x10c>\n 18c:\t0f be f8             \tmovsbl %al,%edi\n 18f:\te8 b0 fe ff ff       \tcallq  44 <_ZL11IsAWordChari>\n 194:\t84 c0                \ttest   %al,%al\n 196:\t74 23                \tje     1bb <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x13b>\n 198:\t8b 74 24 14          \tmov    0x14(%rsp),%esi\n 19c:\t48 89 df             \tmov    %rbx,%rdi\n 19f:\te8 00 00 00 00       \tcallq  1a4 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x124>\n 1a4:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n 1a9:\t88 44 14 26          \tmov    %al,0x26(%rsp,%rdx,1)\n 1ad:\tc6 44 14 27 00       \tmovb   $0x0,0x27(%rsp,%rdx,1)\n 1b2:\t48 ff c2             \tinc    %rdx\n 1b5:\t48 83 fa 08          \tcmp    $0x8,%rdx\n 1b9:\t75 bb                \tjne    176 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0xf6>\n 1bb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1c0:\t48 8d 7c 24 26       \tlea    0x26(%rsp),%rdi\n 1c5:\te8 00 00 00 00       \tcallq  1ca <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x14a>\n 1ca:\t85 c0                \ttest   %eax,%eax\n 1cc:\t74 22                \tje     1f0 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x170>\n 1ce:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1d3:\t48 8d 7c 24 26       \tlea    0x26(%rsp),%rdi\n 1d8:\te8 00 00 00 00       \tcallq  1dd <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x15d>\n 1dd:\t83 f8 01             \tcmp    $0x1,%eax\n 1e0:\t83 dd 00             \tsbb    $0x0,%ebp\n 1e3:\teb 71                \tjmp    256 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x1d6>\n 1e5:\t83 f9 08             \tcmp    $0x8,%ecx\n 1e8:\t75 14                \tjne    1fe <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x17e>\n 1ea:\t41 80 fc 7b          \tcmp    $0x7b,%r12b\n 1ee:\t75 04                \tjne    1f4 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x174>\n 1f0:\tff c5                \tinc    %ebp\n 1f2:\teb 62                \tjmp    256 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x1d6>\n 1f4:\t41 80 fc 7d          \tcmp    $0x7d,%r12b\n 1f8:\t75 04                \tjne    1fe <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x17e>\n 1fa:\tff cd                \tdec    %ebp\n 1fc:\teb 58                \tjmp    256 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x1d6>\n 1fe:\t84 c0                \ttest   %al,%al\n 200:\t74 54                \tje     256 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x1d6>\n 202:\t83 3c 24 00          \tcmpl   $0x0,(%rsp)\n 206:\t75 10                \tjne    218 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x198>\n 208:\t80 7c 24 0f 00       \tcmpb   $0x0,0xf(%rsp)\n 20d:\t74 09                \tje     218 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x198>\n 20f:\t41 81 cf 00 10 00 00 \tor     $0x1000,%r15d\n 216:\teb 12                \tjmp    22a <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x1aa>\n 218:\t41 39 ef             \tcmp    %ebp,%r15d\n 21b:\t7d 0d                \tjge    22a <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x1aa>\n 21d:\t83 3c 24 00          \tcmpl   $0x0,(%rsp)\n 221:\t7e 07                \tjle    22a <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x1aa>\n 223:\t41 81 cf 00 20 00 00 \tor     $0x2000,%r15d\n 22a:\t48 8b 3b             \tmov    (%rbx),%rdi\n 22d:\t44 89 f6             \tmov    %r14d,%esi\n 230:\te8 45 fe ff ff       \tcallq  7a <_ZNK11LexAccessor7LevelAtEi.isra.0>\n 235:\t41 39 c7             \tcmp    %eax,%r15d\n 238:\t74 0f                \tje     249 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x1c9>\n 23a:\t48 8b 3b             \tmov    (%rbx),%rdi\n 23d:\t44 89 fa             \tmov    %r15d,%edx\n 240:\t44 89 f6             \tmov    %r14d,%esi\n 243:\t48 8b 07             \tmov    (%rdi),%rax\n 246:\tff 50 40             \tcallq  *0x40(%rax)\n 249:\tc7 04 24 00 00 00 00 \tmovl   $0x0,(%rsp)\n 250:\t41 ff c6             \tinc    %r14d\n 253:\t41 89 ef             \tmov    %ebp,%r15d\n 256:\t41 0f be c4          \tmovsbl %r12b,%eax\n 25a:\t83 e8 09             \tsub    $0x9,%eax\n 25d:\t83 f8 04             \tcmp    $0x4,%eax\n 260:\t77 13                \tja     275 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x1f5>\n 262:\t44 8b 6c 24 04       \tmov    0x4(%rsp),%r13d\n 267:\t8b 4c 24 10          \tmov    0x10(%rsp),%ecx\n 26b:\t44 8a 64 24 0e       \tmov    0xe(%rsp),%r12b\n 270:\te9 94 fe ff ff       \tjmpq   109 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x89>\n 275:\t41 80 fc 20          \tcmp    $0x20,%r12b\n 279:\t0f 94 c0             \tsete   %al\n 27c:\t3c 01                \tcmp    $0x1,%al\n 27e:\t83 14 24 00          \tadcl   $0x0,(%rsp)\n 282:\teb de                \tjmp    262 <_ZL11FoldLoutDocjiiPP8WordListR8Accessor+0x1e2>\n 284:\t48 8b 3b             \tmov    (%rbx),%rdi\n 287:\t44 89 f6             \tmov    %r14d,%esi\n 28a:\te8 eb fd ff ff       \tcallq  7a <_ZNK11LexAccessor7LevelAtEi.isra.0>\n 28f:\t48 8b 3b             \tmov    (%rbx),%rdi\n 292:\t44 89 f6             \tmov    %r14d,%esi\n 295:\t25 00 f0 ff ff       \tand    $0xfffff000,%eax\n 29a:\t89 c2                \tmov    %eax,%edx\n 29c:\t48 8b 07             \tmov    (%rdi),%rax\n 29f:\t44 09 fa             \tor     %r15d,%edx\n 2a2:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n 2a6:\t48 83 c4 38          \tadd    $0x38,%rsp\n 2aa:\t5b                   \tpop    %rbx\n 2ab:\t5d                   \tpop    %rbp\n 2ac:\t41 5c                \tpop    %r12\n 2ae:\t41 5d                \tpop    %r13\n 2b0:\t41 5e                \tpop    %r14\n 2b2:\t41 5f                \tpop    %r15\n 2b4:\tff e0                \tjmpq   *%rax", "code_s": "__int64 __fastcall FoldLoutDoc(unsigned int <span class=\"supfact\">a1</span>,\n                               int <span class=\"supfact\">a2</span>, int <span class=\"supfact\">a3</span>,\n                               WordList **<span class=\"supfact\">a4</span>,\n                               Accessor *<span class=\"supfact\">a5</span>) {\n  unsigned int <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  char <span class=\"supfact\">v10</span>;\n  char v11;\n  int v12;\n  __int64 v13;\n  char v14;\n  int v15;\n  int <span class=\"supfact\">v17</span>;\n  char <span class=\"supfact\">v18</span>;\n  bool <span class=\"supfact\">v19</span>;\n  int <span class=\"supfact\">v20</span>;\n  int v21;\n  int v22;\n  __int64 <span class=\"supfact\">v23</span>;\n  char <span class=\"supfact\">s1</span>[Number];\n  __int16 <span class=\"supfact\">v25</span>;\n  <span class=\"supfact\">v5</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v7</span> = LexAccessor GetLine(*(_QWORD *)<span class=\"supfact\">a5</span>);\n  <span class=\"supfact\">v8</span> =\n      LexAccessor LevelAt(*(_QWORD *)<span class=\"supfact\">a5</span>) & Number;\n  <span class=\"supfact\">v9</span> = <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v10</span> =\n      LexAccessor operator[](<span class=\"supfact\">a5</span>, <span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v19</span> = (unsigned int)Accessor GetPropertyInt(\n                            <span class=\"supfact\">a5</span>, String, Number) != Number;\n  v11 = (*(__int64(__fastcall **)(_QWORD, _QWORD))(\n      **(_QWORD **)<span class=\"supfact\">a5</span> + Number L))(\n      *(_QWORD *)<span class=\"supfact\">a5</span>, <span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v25</span> = Number;\n  *(_QWORD *)<span class=\"supfact\">s1</span> = Number L;\n  v12 = v11;\n  <span class=\"supfact\">v17</span> = Number;\n  while (Number) {\n    v21 = v12;\n    if (<span class=\"supfact\">v5</span> >= <span class=\"supfact\">a2</span> + <span class=\"supfact\">a1</span>)\n      break;\n    <span class=\"supfact\">v18</span> = LexAccessor SafeGetCharAt(\n        <span class=\"supfact\">a5</span>, <span class=\"supfact\">v5</span> + Number, Number);\n    <span class=\"supfact\">v20</span> = (*(char(__fastcall **)(_QWORD, _QWORD))(\n        **(_QWORD **)<span class=\"supfact\">a5</span> + Number L))(\n        *(_QWORD *)<span class=\"supfact\">a5</span>, <span class=\"supfact\">v5</span> + Number);\n    if (v21 == Number) {\n      if (<span class=\"supfact\">v10</span> == Number) {\n        v13 = Number L;\n        do {\n          <span class=\"supfact\">v23</span> = v13;\n          v22 = <span class=\"supfact\">v5</span> + v13;\n          v14 = LexAccessor operator[](<span class=\"supfact\">a5</span>,\n                                       <span class=\"supfact\">v5</span> + (unsigned int)v13);\n          if (!IsAWordChar(v14))\n            break;\n          <span class=\"supfact\">s1</span>[<span class=\"supfact\">v23</span>] =\n              LexAccessor operator[](<span class=\"supfact\">a5</span>, v22);\n          <span class=\"supfact\">s1</span>[<span class=\"supfact\">v23</span> + Number] = Number;\n          v13 = <span class=\"supfact\">v23</span> + Number;\n        } while (<span class=\"supfact\">v23</span> != Number);\n        if (strcmp(<span class=\"supfact\">s1</span>, String)) {\n          LODWORD(<span class=\"supfact\">v8</span>) =\n              (__PAIR64__(<span class=\"supfact\">v8</span>,\n                          strcmp(<span class=\"supfact\">s1</span>, String)) -\n               Number) >>\n              Number;\n          goto LABEL_25;\n        }\n      LABEL_12:\n        LODWORD(<span class=\"supfact\">v8</span>) = <span class=\"supfact\">v8</span> + Number;\n        goto LABEL_25;\n      }\n    } else if (v21 == Number) {\n      if (<span class=\"supfact\">v10</span> == Number)\n        goto LABEL_12;\n      if (<span class=\"supfact\">v10</span> == Number) {\n        LODWORD(<span class=\"supfact\">v8</span>) = <span class=\"supfact\">v8</span> - Number;\n        goto LABEL_25;\n      }\n    }\n    if (<span class=\"supfact\">v10</span> == Number ||\n        <span class=\"supfact\">v18</span> != Number && <span class=\"supfact\">v10</span> == Number) {\n      if (<span class=\"supfact\">v17</span> || !<span class=\"supfact\">v19</span>) {\n        if (<span class=\"supfact\">v9</span> < (int)<span class=\"supfact\">v8</span> &&\n            <span class=\"supfact\">v17</span> > Number)\n          <span class=\"supfact\">v9</span> |= Number;\n      } else {\n        <span class=\"supfact\">v9</span> |= Number;\n      }\n      if (<span class=\"supfact\">v9</span> !=\n          (unsigned int)LexAccessor LevelAt(*(_QWORD *)<span class=\"supfact\">a5</span>))\n        (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD))(\n            **(_QWORD **)<span class=\"supfact\">a5</span> + Number L))(\n            *(_QWORD *)<span class=\"supfact\">a5</span>, <span class=\"supfact\">v7</span>,\n            (unsigned int)<span class=\"supfact\">v9</span>);\n      <span class=\"supfact\">v17</span> = Number;\n      ++<span class=\"supfact\">v7</span>;\n      <span class=\"supfact\">v9</span> = <span class=\"supfact\">v8</span>;\n    }\n  LABEL_25:\n    if ((unsigned int)(<span class=\"supfact\">v10</span> - Number) > Number)\n      <span class=\"supfact\">v17</span> += <span class=\"supfact\">v10</span> != Number;\n    ++<span class=\"supfact\">v5</span>;\n    v12 = <span class=\"supfact\">v20</span>;\n    <span class=\"supfact\">v10</span> = <span class=\"supfact\">v18</span>;\n  }\n  v15 = LexAccessor LevelAt(*(_QWORD *)<span class=\"supfact\">a5</span>);\n  return (*(__int64(__fastcall **)(_QWORD, _QWORD, _QWORD))(\n      **(_QWORD **)<span class=\"supfact\">a5</span> + Number L))(\n      *(_QWORD *)<span class=\"supfact\">a5</span>, <span class=\"supfact\">v7</span>,\n      <span class=\"supfact\">v9</span> | v15 & Number);\n}", "code_t": "__int64 __fastcall FoldLoutDoc(unsigned int <span class=\"supfact\">a1</span>,\n                               int <span class=\"supfact\">a2</span>, int <span class=\"supfact\">a3</span>,\n                               WordList **<span class=\"supfact\">a4</span>,\n                               Accessor *<span class=\"supfact\">a5</span>) {\n  unsigned int <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  char <span class=\"supfact\">v10</span>;\n  char v11;\n  int v12;\n  __int64 v13;\n  char v14;\n  int v15;\n  int <span class=\"supfact\">v17</span>;\n  char <span class=\"supfact\">v18</span>;\n  bool <span class=\"supfact\">v19</span>;\n  int <span class=\"supfact\">v20</span>;\n  int v21;\n  int v22;\n  __int64 <span class=\"supfact\">v23</span>;\n  char <span class=\"supfact\">s1</span>[Number];\n  __int16 <span class=\"supfact\">v25</span>;\n  <span class=\"supfact\">v5</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v7</span> = LexAccessor GetLine(*(_QWORD *)<span class=\"supfact\">a5</span>);\n  <span class=\"supfact\">v8</span> =\n      LexAccessor LevelAt(*(_QWORD *)<span class=\"supfact\">a5</span>) & Number;\n  <span class=\"supfact\">v9</span> = <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v10</span> =\n      LexAccessor operator[](<span class=\"supfact\">a5</span>, <span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v19</span> = (unsigned int)Accessor GetPropertyInt(\n                            <span class=\"supfact\">a5</span>, String, Number) != Number;\n  v11 = (*(__int64(__fastcall **)(_QWORD, _QWORD))(\n      **(_QWORD **)<span class=\"supfact\">a5</span> + Number L))(\n      *(_QWORD *)<span class=\"supfact\">a5</span>, <span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v25</span> = Number;\n  *(_QWORD *)<span class=\"supfact\">s1</span> = Number L;\n  v12 = v11;\n  <span class=\"supfact\">v17</span> = Number;\n  while (Number) {\n    v21 = v12;\n    if (<span class=\"supfact\">v5</span> >= <span class=\"supfact\">a2</span> + <span class=\"supfact\">a1</span>)\n      break;\n    <span class=\"supfact\">v18</span> = LexAccessor SafeGetCharAt(\n        <span class=\"supfact\">a5</span>, <span class=\"supfact\">v5</span> + Number, Number);\n    <span class=\"supfact\">v20</span> = (*(char(__fastcall **)(_QWORD, _QWORD))(\n        **(_QWORD **)<span class=\"supfact\">a5</span> + Number L))(\n        *(_QWORD *)<span class=\"supfact\">a5</span>, <span class=\"supfact\">v5</span> + Number);\n    if (v21 == Number) {\n      if (<span class=\"supfact\">v10</span> == Number) {\n        v13 = Number L;\n        do {\n          <span class=\"supfact\">v23</span> = v13;\n          v22 = <span class=\"supfact\">v5</span> + v13;\n          v14 = LexAccessor operator[](<span class=\"supfact\">a5</span>,\n                                       <span class=\"supfact\">v5</span> + (unsigned int)v13);\n          if (!IsAWordChar(v14))\n            break;\n          <span class=\"supfact\">s1</span>[<span class=\"supfact\">v23</span>] =\n              LexAccessor operator[](<span class=\"supfact\">a5</span>, v22);\n          <span class=\"supfact\">s1</span>[<span class=\"supfact\">v23</span> + Number] = Number;\n          v13 = <span class=\"supfact\">v23</span> + Number;\n        } while (<span class=\"supfact\">v23</span> != Number);\n        if (strcmp(<span class=\"supfact\">s1</span>, String)) {\n          LODWORD(<span class=\"supfact\">v8</span>) =\n              (__PAIR64__(<span class=\"supfact\">v8</span>,\n                          strcmp(<span class=\"supfact\">s1</span>, String)) -\n               Number) >>\n              Number;\n          goto LABEL_25;\n        }\n      LABEL_12:\n        LODWORD(<span class=\"supfact\">v8</span>) = <span class=\"supfact\">v8</span> + Number;\n        goto LABEL_25;\n      }\n    } else if (v21 == Number) {\n      if (<span class=\"supfact\">v10</span> == Number)\n        goto LABEL_12;\n      if (<span class=\"supfact\">v10</span> == Number) {\n        LODWORD(<span class=\"supfact\">v8</span>) = <span class=\"supfact\">v8</span> - Number;\n        goto LABEL_25;\n      }\n    }\n    if (<span class=\"supfact\">v10</span> == Number ||\n        <span class=\"supfact\">v18</span> != Number && <span class=\"supfact\">v10</span> == Number) {\n      if (<span class=\"supfact\">v17</span> || !<span class=\"supfact\">v19</span>) {\n        if (<span class=\"supfact\">v9</span> < (int)<span class=\"supfact\">v8</span> &&\n            <span class=\"supfact\">v17</span> > Number)\n          <span class=\"supfact\">v9</span> |= Number;\n      } else {\n        <span class=\"supfact\">v9</span> |= Number;\n      }\n      if (<span class=\"supfact\">v9</span> !=\n          (unsigned int)LexAccessor LevelAt(*(_QWORD *)<span class=\"supfact\">a5</span>))\n        (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD))(\n            **(_QWORD **)<span class=\"supfact\">a5</span> + Number L))(\n            *(_QWORD *)<span class=\"supfact\">a5</span>, <span class=\"supfact\">v7</span>,\n            (unsigned int)<span class=\"supfact\">v9</span>);\n      <span class=\"supfact\">v17</span> = Number;\n      ++<span class=\"supfact\">v7</span>;\n      <span class=\"supfact\">v9</span> = <span class=\"supfact\">v8</span>;\n    }\n  LABEL_25:\n    if ((unsigned int)(<span class=\"supfact\">v10</span> - Number) > Number)\n      <span class=\"supfact\">v17</span> += <span class=\"supfact\">v10</span> != Number;\n    ++<span class=\"supfact\">v5</span>;\n    v12 = <span class=\"supfact\">v20</span>;\n    <span class=\"supfact\">v10</span> = <span class=\"supfact\">v18</span>;\n  }\n  v15 = LexAccessor LevelAt(*(_QWORD *)<span class=\"supfact\">a5</span>);\n  return (*(__int64(__fastcall **)(_QWORD, _QWORD, _QWORD))(\n      **(_QWORD **)<span class=\"supfact\">a5</span> + Number L))(\n      *(_QWORD *)<span class=\"supfact\">a5</span>, <span class=\"supfact\">v7</span>,\n      <span class=\"supfact\">v9</span> | v15 & Number);\n}", "var": [{"name": "a1", "type": "unsigned int", "pred_name": "a1", "ref_name": "a1", "ref_type": "unsigned int"}, {"name": "a2", "type": "unsigned int", "pred_name": "a2", "ref_name": "a2", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "a3", "ref_name": "a3", "ref_type": "int"}, {"name": "a4", "type": "WordList * *", "pred_name": "a4", "ref_name": "a4", "ref_type": "WordList * *"}, {"name": "a5", "type": "Accessor *", "pred_name": "a5", "ref_name": "a5", "ref_type": "Accessor *"}, {"name": "v5", "type": "unsigned int", "pred_name": "v5", "ref_name": "v5", "ref_type": "unsigned int"}, {"name": "v7", "type": "int", "pred_name": "v7", "ref_name": "v7", "ref_type": "unsigned int"}, {"name": "v8", "type": "__int64", "pred_name": "v8", "ref_name": "v8", "ref_type": "__int64"}, {"name": "v9", "type": "unsigned int", "pred_name": "v9", "ref_name": "v9", "ref_type": "int"}, {"name": "v10", "type": "char", "pred_name": "v10", "ref_name": "v10", "ref_type": "char"}, {"name": "v17", "type": "int", "pred_name": "v17", "ref_name": "v17", "ref_type": "int"}, {"name": "v18", "type": "char", "pred_name": "v18", "ref_name": "v18", "ref_type": "char"}, {"name": "v19", "type": "char", "pred_name": "v19", "ref_name": "v19", "ref_type": "bool"}, {"name": "v20", "type": "unsigned int", "pred_name": "v20", "ref_name": "v20", "ref_type": "int"}, {"name": "v23", "type": "__int64", "pred_name": "v23", "ref_name": "v23", "ref_type": "__int64"}, {"name": "s1", "type": "char[8]", "pred_name": "s1", "ref_name": "s1", "ref_type": "char[8]"}, {"name": "v25", "type": "__int16", "pred_name": "v25", "ref_name": "v25", "ref_type": "__int16"}], "body_in_train": false}, {"repo_owner": "olegk0", "repo_name": "rk3x_kernel_3.0.36", "path": "olegk0/rk3x_kernel_3.0.36/0f6c805bbc45f7191927b1428e857a192dbadf6baea93ebdcc49fc4da527590e", "path_in_repo": "olegk0/rk3x_kernel_3.0.36/drivers/net/wireless/rtl8188eu_lwfinger/hostapd-0.8/src/radius/radius.o", "objdump": "0000000000000f9c <radius_msg_get_eap>:\n     f9c:\t55                   \tpush   %rbp\n     f9d:\t48 89 e5             \tmov    %rsp,%rbp\n     fa0:\t48 83 ec 40          \tsub    $0x40,%rsp\n     fa4:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     fa8:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     fac:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n     fb1:\t75 0a                \tjne    fbd <radius_msg_get_eap+0x21>\n     fb3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     fb8:\te9 29 01 00 00       \tjmpq   10e6 <radius_msg_get_eap+0x14a>\n     fbd:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     fc4:\t00 \n     fc5:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     fcc:\t00 \n     fcd:\teb 42                \tjmp    1011 <radius_msg_get_eap+0x75>\n     fcf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     fd3:\t89 c2                \tmov    %eax,%edx\n     fd5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     fd9:\t89 d6                \tmov    %edx,%esi\n     fdb:\t48 89 c7             \tmov    %rax,%rdi\n     fde:\te8 3e f1 ff ff       \tcallq  121 <radius_get_attr_hdr>\n     fe3:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     fe7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     feb:\t0f b6 00             \tmovzbl (%rax),%eax\n     fee:\t3c 4f                \tcmp    $0x4f,%al\n     ff0:\t75 1a                \tjne    100c <radius_msg_get_eap+0x70>\n     ff2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ff6:\t0f b6 40 01          \tmovzbl 0x1(%rax),%eax\n     ffa:\t0f b6 d0             \tmovzbl %al,%edx\n     ffd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1001:\t48 01 d0             \tadd    %rdx,%rax\n    1004:\t48 83 e8 02          \tsub    $0x2,%rax\n    1008:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    100c:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n    1011:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1015:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1019:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    101d:\t72 b0                \tjb     fcf <radius_msg_get_eap+0x33>\n    101f:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1024:\t75 0a                \tjne    1030 <radius_msg_get_eap+0x94>\n    1026:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    102b:\te9 b6 00 00 00       \tjmpq   10e6 <radius_msg_get_eap+0x14a>\n    1030:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1034:\t48 89 c7             \tmov    %rax,%rdi\n    1037:\te8 00 00 00 00       \tcallq  103c <radius_msg_get_eap+0xa0>\n    103c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1040:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    1045:\t75 0a                \tjne    1051 <radius_msg_get_eap+0xb5>\n    1047:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    104c:\te9 95 00 00 00       \tjmpq   10e6 <radius_msg_get_eap+0x14a>\n    1051:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1055:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1059:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1060:\t00 \n    1061:\teb 5f                \tjmp    10c2 <radius_msg_get_eap+0x126>\n    1063:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1067:\t89 c2                \tmov    %eax,%edx\n    1069:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    106d:\t89 d6                \tmov    %edx,%esi\n    106f:\t48 89 c7             \tmov    %rax,%rdi\n    1072:\te8 aa f0 ff ff       \tcallq  121 <radius_get_attr_hdr>\n    1077:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    107b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    107f:\t0f b6 00             \tmovzbl (%rax),%eax\n    1082:\t3c 4f                \tcmp    $0x4f,%al\n    1084:\t75 37                \tjne    10bd <radius_msg_get_eap+0x121>\n    1086:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    108a:\t0f b6 40 01          \tmovzbl 0x1(%rax),%eax\n    108e:\t0f b6 c0             \tmovzbl %al,%eax\n    1091:\t83 e8 02             \tsub    $0x2,%eax\n    1094:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    1097:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    109a:\t48 63 d0             \tmovslq %eax,%rdx\n    109d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    10a1:\t48 8d 48 02          \tlea    0x2(%rax),%rcx\n    10a5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    10a9:\t48 89 ce             \tmov    %rcx,%rsi\n    10ac:\t48 89 c7             \tmov    %rax,%rdi\n    10af:\te8 00 00 00 00       \tcallq  10b4 <radius_msg_get_eap+0x118>\n    10b4:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    10b7:\t48 98                \tcltq   \n    10b9:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n    10bd:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n    10c2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    10c6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    10ca:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n    10ce:\t72 93                \tjb     1063 <radius_msg_get_eap+0xc7>\n    10d0:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n    10d5:\t74 0b                \tje     10e2 <radius_msg_get_eap+0x146>\n    10d7:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    10db:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    10df:\t48 89 10             \tmov    %rdx,(%rax)\n    10e2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    10e6:\tc9                   \tleaveq \n    10e7:\tc3                   \tretq   ", "code_s": "char *__fastcall radius_msg_get_eap(__int64 *<span class=\"supfact\">a1</span>,\n                                    __int64 *<span class=\"supfact\">a2</span>) {\n  int <span class=\"supfact\">v3</span>;\n  _BYTE *v4;\n  _BYTE *v5;\n  char *<span class=\"supfact\">v6</span>;\n  unsigned __int64 i;\n  unsigned __int64 j;\n  __int64 <span class=\"supfact\">size</span>;\n  char *<span class=\"supfact\">dest</span>;\n  if (!<span class=\"supfact\">a1</span>)\n    return Number L;\n  <span class=\"supfact\">size</span> = Number L;\n  for (i = Number L; i < <span class=\"supfact\">a1</span>[Number]; ++i) {\n    v4 = (_BYTE *)radius_get_attr_hdr(<span class=\"supfact\">a1</span>, i);\n    if (*v4 == Number)\n      <span class=\"supfact\">size</span> =\n          (unsigned __int8)v4[Number] + <span class=\"supfact\">size</span> - Number;\n  }\n  if (!<span class=\"supfact\">size</span>)\n    return Number L;\n  <span class=\"supfact\">v6</span> = (char *)malloc(<span class=\"supfact\">size</span>);\n  if (!<span class=\"supfact\">v6</span>)\n    return Number L;\n  <span class=\"supfact\">dest</span> = <span class=\"supfact\">v6</span>;\n  for (j = Number L; j < <span class=\"supfact\">a1</span>[Number]; ++j) {\n    v5 = (_BYTE *)radius_get_attr_hdr(<span class=\"supfact\">a1</span>, j);\n    if (*v5 == Number) {\n      <span class=\"supfact\">v3</span> = (unsigned __int8)v5[Number] - Number;\n      memcpy(<span class=\"supfact\">dest</span>, v5 + Number, <span class=\"supfact\">v3</span>);\n      <span class=\"supfact\">dest</span> += <span class=\"supfact\">v3</span>;\n    }\n  }\n  if (<span class=\"supfact\">a2</span>)\n    *<span class=\"supfact\">a2</span> = <span class=\"supfact\">size</span>;\n  return <span class=\"supfact\">v6</span>;\n}", "code_t": "u8 *__cdecl radius_msg_get_eap(radius_msg *<span class=\"supfact\">msg</span>,\n                               size_t *<span class=\"supfact\">eap_len</span>) {\n  int <span class=\"supfact\">flen</span>;\n  radius_attr_hdr *attr;\n  radius_attr_hdr *attra;\n  u8 *<span class=\"supfact\">eap</span>;\n  size_t i;\n  size_t ia;\n  size_t <span class=\"supfact\">len</span>;\n  u8 *<span class=\"supfact\">pos</span>;\n  if (!<span class=\"supfact\">msg</span>)\n    return Number L;\n  <span class=\"supfact\">len</span> = Number L;\n  for (i = Number L; i < <span class=\"supfact\">msg</span>->attr_used; ++i) {\n    attr = radius_get_attr_hdr(<span class=\"supfact\">msg</span>, i);\n    if (attr->type == Number)\n      <span class=\"supfact\">len</span> = attr->length + <span class=\"supfact\">len</span> - Number;\n  }\n  if (!<span class=\"supfact\">len</span>)\n    return Number L;\n  <span class=\"supfact\">eap</span> = (u8 *)malloc(<span class=\"supfact\">len</span>);\n  if (!<span class=\"supfact\">eap</span>)\n    return Number L;\n  <span class=\"supfact\">pos</span> = <span class=\"supfact\">eap</span>;\n  for (ia = Number L; ia < <span class=\"supfact\">msg</span>->attr_used; ++ia) {\n    attra = radius_get_attr_hdr(<span class=\"supfact\">msg</span>, ia);\n    if (attra->type == Number) {\n      <span class=\"supfact\">flen</span> = attra->length - Number;\n      memcpy(<span class=\"supfact\">pos</span>, &attra[Number], <span class=\"supfact\">flen</span>);\n      <span class=\"supfact\">pos</span> += <span class=\"supfact\">flen</span>;\n    }\n  }\n  if (<span class=\"supfact\">eap_len</span>)\n    *<span class=\"supfact\">eap_len</span> = <span class=\"supfact\">len</span>;\n  return <span class=\"supfact\">eap</span>;\n}", "var": [{"name": "a1", "type": "radius_msg *", "pred_name": "msg", "ref_name": "msg", "ref_type": "radius_msg *"}, {"name": "a2", "type": "size_t *", "pred_name": "eap_len", "ref_name": "eap_len", "ref_type": "size_t *"}, {"name": "v3", "type": "int", "pred_name": "flen", "ref_name": "flen", "ref_type": "int"}, {"name": "v6", "type": "u8 *", "pred_name": "eap", "ref_name": "eap", "ref_type": "u8 *"}, {"name": "size", "type": "size_t", "pred_name": "len", "ref_name": "len", "ref_type": "size_t"}, {"name": "dest", "type": "u8 *", "pred_name": "pos", "ref_name": "pos", "ref_type": "u8 *"}], "body_in_train": true}, {"repo_owner": "pret", "repo_name": "agbcc", "path": "pret/agbcc/204888f163b15783c78de16fb0665f79cb7b20a028efdc5249dcea8ed5e8b32d", "path_in_repo": "pret/agbcc/gcc/genconfig", "objdump": "00000000004011d0 <_start>:\n  4011d0:\t31 ed                \txor    %ebp,%ebp\n  4011d2:\t49 89 d1             \tmov    %rdx,%r9\n  4011d5:\t5e                   \tpop    %rsi\n  4011d6:\t48 89 e2             \tmov    %rsp,%rdx\n  4011d9:\t48 83 e4 f0          \tand    $0xfffffffffffffff0,%rsp\n  4011dd:\t50                   \tpush   %rax\n  4011de:\t54                   \tpush   %rsp\n  4011df:\t49 c7 c0 b0 53 40 00 \tmov    $0x4053b0,%r8\n  4011e6:\t48 c7 c1 50 53 40 00 \tmov    $0x405350,%rcx\n  4011ed:\t48 c7 c7 cc 19 40 00 \tmov    $0x4019cc,%rdi\n  4011f4:\tff 15 f6 8d 00 00    \tcallq  *0x8df6(%rip)        # 409ff0 <__libc_start_main@GLIBC_2.2.5>\n  4011fa:\tf4                   \thlt    \n  4011fb:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)", "code_s": "void __fastcall __noreturn start(__int64 <span class=\"supfact\">a1</span>,\n                                 __int64 <span class=\"supfact\">a2</span>,\n                                 void (*<span class=\"supfact\">a3</span>)(void)) {\n  __int64 <span class=\"supfact\">v3</span>;\n  int v4;\n  __int64 <span class=\"supfact\">v5</span>;\n  char *<span class=\"supfact\">retaddr</span>;\n  v4 = <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = <span class=\"supfact\">v3</span>;\n  _libc_start_main((int(__fastcall *)(int, char **, char **))main, v4,\n                   &<span class=\"supfact\">retaddr</span>, _libc_csu_init, _libc_csu_fini,\n                   <span class=\"supfact\">a3</span>, &<span class=\"supfact\">v5</span>);\n  __halt();\n}", "code_t": "void __fastcall __noreturn start(__int64 <span class=\"supfact\">a1</span>,\n                                 __int64 <span class=\"supfact\">a2</span>,\n                                 void (*<span class=\"supfact\">a3</span>)(void)) {\n  __int64 <span class=\"supfact\">v3</span>;\n  int v4;\n  __int64 <span class=\"supfact\">v5</span>;\n  char *<span class=\"supfact\">retaddr</span>;\n  v4 = <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = <span class=\"supfact\">v3</span>;\n  _libc_start_main((int(__fastcall *)(int, char **, char **))main, v4,\n                   &<span class=\"supfact\">retaddr</span>, _libc_csu_init, _libc_csu_fini,\n                   <span class=\"supfact\">a3</span>, &<span class=\"supfact\">v5</span>);\n  __halt();\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "a3", "type": "void (*)(void)", "pred_name": "a3", "ref_name": "a3", "ref_type": "void (*)(void)"}, {"name": "v3", "type": "__int64", "pred_name": "v3", "ref_name": "v3", "ref_type": "__int64"}, {"name": "v5", "type": "__int64", "pred_name": "v5", "ref_name": "v5", "ref_type": "__int64"}, {"name": "retaddr", "type": "char *", "pred_name": "retaddr", "ref_name": "retaddr", "ref_type": "char *"}], "body_in_train": true}, {"repo_owner": "h2018-log710", "repo_name": "lab2", "path": "h2018-log710/lab2/c2d8e9617e7c4c44971f25e9433b8aa7919679a57a65fd7e6d67124e4f58b8a3", "path_in_repo": "h2018-log710/lab2/tools/perf/util/parse-events-flex.o", "objdump": "0000000000006c44 <parse_events_alloc>:\n    6c44:\t55                   \tpush   %rbp\n    6c45:\t48 89 e5             \tmov    %rsp,%rbp\n    6c48:\t48 83 ec 20          \tsub    $0x20,%rsp\n    6c4c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    6c50:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    6c54:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    6c5b:\t00 00 \n    6c5d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    6c61:\t31 c0                \txor    %eax,%eax\n    6c63:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    6c67:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    6c6b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6c6f:\t48 89 c7             \tmov    %rax,%rdi\n    6c72:\te8 00 00 00 00       \tcallq  6c77 <parse_events_alloc+0x33>\n    6c77:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    6c7b:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n    6c82:\t00 00 \n    6c84:\t74 05                \tje     6c8b <parse_events_alloc+0x47>\n    6c86:\te8 00 00 00 00       \tcallq  6c8b <parse_events_alloc+0x47>\n    6c8b:\tc9                   \tleaveq \n    6c8c:\tc3                   \tretq   ", "code_s": "void *__fastcall parse_events_alloc(size_t <span class=\"supfact\">a1</span>) {\n  return malloc(<span class=\"supfact\">a1</span>);\n}", "code_t": "void *__cdecl parse_events_alloc(yy_size_t <span class=\"supfact\">size</span>,\n                                 yyscan_t yyscanner) {\n  return malloc(<span class=\"supfact\">size</span>);\n}", "var": [{"name": "a1", "type": "yy_size_t", "pred_name": "size", "ref_name": "size", "ref_type": "yy_size_t"}], "body_in_train": true}, {"repo_owner": "sconklin", "repo_name": "rPi-kernel", "path": "sconklin/rPi-kernel/b1886f72c8d2b02e778c28296e6c0e8f02f620988b7dddb3662c9f62afc7bf99", "path_in_repo": "sconklin/rPi-kernel/tools/lib/traceevent/libtraceevent.so", "objdump": "0000000000005099 <test_type>:\n    5099:\t55                   \tpush   %rbp\n    509a:\t48 89 e5             \tmov    %rsp,%rbp\n    509d:\t48 83 ec 10          \tsub    $0x10,%rsp\n    50a1:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    50a4:\t89 75 f8             \tmov    %esi,-0x8(%rbp)\n    50a7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    50aa:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n    50ad:\t74 2a                \tje     50d9 <test_type+0x40>\n    50af:\t8b 05 f3 31 01 00    \tmov    0x131f3(%rip),%eax        # 182a8 <show_warning>\n    50b5:\t85 c0                \ttest   %eax,%eax\n    50b7:\t74 19                \tje     50d2 <test_type+0x39>\n    50b9:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    50bc:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    50bf:\t89 c6                \tmov    %eax,%esi\n    50c1:\t48 8d 3d 90 e0 00 00 \tlea    0xe090(%rip),%rdi        # 13158 <_fini+0xc10>\n    50c8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    50cd:\te8 fe df ff ff       \tcallq  30d0 <warning@plt>\n    50d2:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    50d7:\teb 05                \tjmp    50de <test_type+0x45>\n    50d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    50de:\tc9                   \tleaveq \n    50df:\tc3                   \tretq   ", "code_s": "__int64 __fastcall test_type(int <span class=\"supfact\">a1</span>, int <span class=\"supfact\">a2</span>,\n                             __int64 <span class=\"supfact\">a3</span>, int <span class=\"supfact\">a4</span>,\n                             int <span class=\"supfact\">a5</span>, int <span class=\"supfact\">a6</span>) {\n  char <span class=\"supfact\">v7</span>;\n  if (<span class=\"supfact\">a1</span> == <span class=\"supfact\">a2</span>)\n    return Number L;\n  if (show_warning)\n    warning((int)String, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a1</span>,\n            <span class=\"supfact\">a4</span>, <span class=\"supfact\">a5</span>, <span class=\"supfact\">a6</span>,\n            <span class=\"supfact\">v7</span>);\n  return Number;\n}", "code_t": "int __cdecl test_type(event_type <span class=\"supfact\">type</span>,\n                      event_type <span class=\"supfact\">expect</span>) {\n  if (<span class=\"supfact\">type</span> == <span class=\"supfact\">expect</span>)\n    return Number;\n  if (show_warning)\n    warning(String, (unsigned int)<span class=\"supfact\">expect</span>,\n            (unsigned int)<span class=\"supfact\">type</span>);\n  return Number;\n}", "var": [{"name": "a1", "type": "event_type", "pred_name": "type", "ref_name": "type", "ref_type": "event_type"}, {"name": "a2", "type": "event_type", "pred_name": "expect", "ref_name": "expect", "ref_type": "event_type"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v7", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "maple2rain", "repo_name": "myOwnShell", "path": "maple2rain/myOwnShell/d0cab4b739eea7bea0660ed55bc75ecb96d76c057af064c3007664136c1fbb06", "path_in_repo": "maple2rain/myOwnShell/shell/src/more.o", "objdump": "0000000000000090 <doMore>:\n  90:\t55                   \tpush   %rbp\n  91:\t48 89 e5             \tmov    %rsp,%rbp\n  94:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  9b:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  a2:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  a9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  ae:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  b3:\te8 00 00 00 00       \tcallq  b8 <doMore+0x28>\n  b8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  bc:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  c1:\t75 0a                \tjne    cd <doMore+0x3d>\n  c3:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  c8:\te8 00 00 00 00       \tcallq  cd <doMore+0x3d>\n  cd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  d2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  d7:\te8 00 00 00 00       \tcallq  dc <doMore+0x4c>\n  dc:\te8 00 00 00 00       \tcallq  e1 <doMore+0x51>\n  e1:\t83 e8 01             \tsub    $0x1,%eax\n  e4:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # ea <doMore+0x5a>\n  ea:\te8 00 00 00 00       \tcallq  ef <doMore+0x5f>\n  ef:\t83 e8 01             \tsub    $0x1,%eax\n  f2:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # f8 <doMore+0x68>\n  f8:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  ff:\t48 89 c7             \tmov    %rax,%rdi\n 102:\te8 00 00 00 00       \tcallq  107 <doMore+0x77>\n 107:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 10a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 110 <doMore+0x80>\n 110:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 113:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n 116:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 119:\t89 c6                \tmov    %eax,%esi\n 11b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 120:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 125:\te8 00 00 00 00       \tcallq  12a <doMore+0x9a>\n 12a:\te9 d5 00 00 00       \tjmpq   204 <doMore+0x174>\n 12f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 135 <doMore+0xa5>\n 135:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 138:\t0f 85 9a 00 00 00    \tjne    1d8 <doMore+0x148>\n 13e:\te8 00 00 00 00       \tcallq  143 <doMore+0xb3>\n 143:\t83 e8 01             \tsub    $0x1,%eax\n 146:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 14c <doMore+0xbc>\n 14c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 151:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 156:\te8 00 00 00 00       \tcallq  15b <doMore+0xcb>\n 15b:\tf3 0f 2a 45 f8       \tcvtsi2ssl -0x8(%rbp),%xmm0\n 160:\tf3 0f 2a 4d ec       \tcvtsi2ssl -0x14(%rbp),%xmm1\n 165:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n 169:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n 16c:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 174 <doMore+0xe4>\n 173:\t00 \n 174:\tf3 0f 59 c1          \tmulss  %xmm1,%xmm0\n 178:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n 17c:\t89 c6                \tmov    %eax,%esi\n 17e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 183:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 188:\te8 00 00 00 00       \tcallq  18d <doMore+0xfd>\n 18d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 192:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 197:\te8 00 00 00 00       \tcallq  19c <doMore+0x10c>\n 19c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 1a0:\t48 89 c7             \tmov    %rax,%rdi\n 1a3:\te8 00 00 00 00       \tcallq  1a8 <doMore+0x118>\n 1a8:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n 1ab:\t83 7d e8 ff          \tcmpl   $0xffffffff,-0x18(%rbp)\n 1af:\t75 0c                \tjne    1bd <doMore+0x12d>\n 1b1:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n 1b6:\te8 00 00 00 00       \tcallq  1bb <doMore+0x12b>\n 1bb:\teb 6f                \tjmp    22c <doMore+0x19c>\n 1bd:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 1c0:\t01 45 f8             \tadd    %eax,-0x8(%rbp)\n 1c3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1c8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1cd:\te8 00 00 00 00       \tcallq  1d2 <doMore+0x142>\n 1d2:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 1d5:\t29 45 fc             \tsub    %eax,-0x4(%rbp)\n 1d8:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1df <doMore+0x14f>\n 1df:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 1e6:\t48 89 d6             \tmov    %rdx,%rsi\n 1e9:\t48 89 c7             \tmov    %rax,%rdi\n 1ec:\te8 00 00 00 00       \tcallq  1f1 <doMore+0x161>\n 1f1:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 1f4:\t75 0a                \tjne    200 <doMore+0x170>\n 1f6:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 1fb:\te8 00 00 00 00       \tcallq  200 <doMore+0x170>\n 200:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 204:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 20a <doMore+0x17a>\n 20a:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n 211:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 218:\t89 ce                \tmov    %ecx,%esi\n 21a:\t48 89 c7             \tmov    %rax,%rdi\n 21d:\te8 00 00 00 00       \tcallq  222 <doMore+0x192>\n 222:\t48 85 c0             \ttest   %rax,%rax\n 225:\t0f 85 04 ff ff ff    \tjne    12f <doMore+0x9f>\n 22b:\t90                   \tnop\n 22c:\t90                   \tnop\n 22d:\tc9                   \tleaveq \n 22e:\tc3                   \tretq   ", "code_s": "int __fastcall doMore(FILE *<span class=\"supfact\">a1</span>) {\n  char *<span class=\"supfact\">v1</span>;\n  char <span class=\"supfact\">s</span>[Number];\n  int <span class=\"supfact\">v4</span>;\n  unsigned int <span class=\"supfact\">v5</span>;\n  FILE *<span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = Number;\n  <span class=\"supfact\">v6</span> = fopen(String, String);\n  if (!<span class=\"supfact\">v6</span>)\n    exit(Number);\n  printf(String);\n  PAGELEN = getPageLen() - Number;\n  PAGEWIDTH = getPageWidth() - Number;\n  <span class=\"supfact\">v5</span> = getFileLines(<span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v7</span> = PAGELEN;\n  printf(String, <span class=\"supfact\">v5</span>, (unsigned int)PAGELEN);\n  while (Number) {\n    <span class=\"supfact\">v1</span> =\n        fgets(<span class=\"supfact\">s</span>, PAGEWIDTH, <span class=\"supfact\">a1</span>);\n    if (!<span class=\"supfact\">v1</span>)\n      break;\n    if (<span class=\"supfact\">v8</span> == PAGELEN) {\n      PAGELEN = getPageLen() - Number;\n      printf(String);\n      printf(\n          String,\n          (unsigned int)(int)(float)(Number *\n                                     (float)((float)<span class=\"supfact\">v7</span> /\n                                             (float)(int)<span class=\"supfact\">v5</span>)));\n      printf(String);\n      <span class=\"supfact\">v4</span> = seeMore(<span class=\"supfact\">v6</span>);\n      if (<span class=\"supfact\">v4</span> == Number) {\n        LODWORD(<span class=\"supfact\">v1</span>) = putchar(Number);\n        return (int)<span class=\"supfact\">v1</span>;\n      }\n      <span class=\"supfact\">v7</span> += <span class=\"supfact\">v4</span>;\n      printf(String);\n      <span class=\"supfact\">v8</span> -= <span class=\"supfact\">v4</span>;\n    }\n    if (fputs(<span class=\"supfact\">s</span>, stdout) == Number)\n      exit(Number);\n    ++<span class=\"supfact\">v8</span>;\n  }\n  return (int)<span class=\"supfact\">v1</span>;\n}", "code_t": "void __cdecl doMore(FILE *<span class=\"supfact\">fp</span>) {\n  char <span class=\"supfact\">line</span>[Number];\n  int <span class=\"supfact\">reply</span>;\n  int <span class=\"supfact\">totalRows</span>;\n  FILE *<span class=\"supfact\">fp_tty</span>;\n  int <span class=\"supfact\">curRow</span>;\n  int <span class=\"supfact\">numOfLines</span>;\n  <span class=\"supfact\">numOfLines</span> = Number;\n  <span class=\"supfact\">fp_tty</span> = fopen(String, String);\n  if (!<span class=\"supfact\">fp_tty</span>)\n    exit(Number);\n  printf(String);\n  PAGELEN = getPageLen() - Number;\n  PAGEWIDTH = getPageWidth() - Number;\n  <span class=\"supfact\">totalRows</span> = getFileLines(<span class=\"supfact\">fp</span>);\n  <span class=\"supfact\">curRow</span> = PAGELEN;\n  printf(String, (unsigned int)<span class=\"supfact\">totalRows</span>,\n         (unsigned int)PAGELEN);\n  while (fgets(<span class=\"supfact\">line</span>, PAGEWIDTH, <span class=\"supfact\">fp</span>)) {\n    if (<span class=\"supfact\">numOfLines</span> == PAGELEN) {\n      PAGELEN = getPageLen() - Number;\n      printf(String);\n      printf(\n          String,\n          (unsigned int)(int)(float)(Number *\n                                     (float)((float)<span class=\"supfact\">curRow</span> /\n                                             (float)\n                                                 <span class=\"supfact\">totalRows</span>)));\n      printf(String);\n      <span class=\"supfact\">reply</span> = seeMore(<span class=\"supfact\">fp_tty</span>);\n      if (<span class=\"supfact\">reply</span> == Number) {\n        putchar(Number);\n        return;\n      }\n      <span class=\"supfact\">curRow</span> += <span class=\"supfact\">reply</span>;\n      printf(String);\n      <span class=\"supfact\">numOfLines</span> -= <span class=\"supfact\">reply</span>;\n    }\n    if (fputs(<span class=\"supfact\">line</span>, stdout) == Number)\n      exit(Number);\n    ++<span class=\"supfact\">numOfLines</span>;\n  }\n}", "var": [{"name": "a1", "type": "FILE *", "pred_name": "fp", "ref_name": "fp", "ref_type": "FILE *"}, {"name": "v1", "type": "char *", "pred_name": "v1", "ref_name": "", "ref_type": "disappear"}, {"name": "s", "type": "char[128]", "pred_name": "line", "ref_name": "line", "ref_type": "char[128]"}, {"name": "v4", "type": "int", "pred_name": "i", "ref_name": "reply", "ref_type": "int"}, {"name": "v5", "type": "int", "pred_name": "Len", "ref_name": "totalRows", "ref_type": "int"}, {"name": "v6", "type": "char *", "pred_name": "__unk__", "ref_name": "fp_tty", "ref_type": "FILE *"}, {"name": "v7", "type": "int", "pred_name": "Line", "ref_name": "curRow", "ref_type": "int"}, {"name": "v8", "type": "int", "pred_name": "__unk__", "ref_name": "numOfLines", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "xl0", "repo_name": "qemu", "path": "xl0/qemu/7967c58aec83d911c102aec7ed6fe4d68376e31de79c2fbdfc60b7cc70359dd8", "path_in_repo": "xl0/qemu//libhw64/pcie_aer.o", "objdump": "0000000000000134 <le32_to_cpupu>:\n     134:\t55                   \tpush   %rbp\n     135:\t48 89 e5             \tmov    %rsp,%rbp\n     138:\t48 83 ec 20          \tsub    $0x20,%rsp\n     13c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     140:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     147:\t00 00 \n     149:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     14d:\t31 c0                \txor    %eax,%eax\n     14f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     153:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     157:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     15b:\t0f b6 00             \tmovzbl (%rax),%eax\n     15e:\t0f b6 c0             \tmovzbl %al,%eax\n     161:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     165:\t48 83 c2 01          \tadd    $0x1,%rdx\n     169:\t0f b6 12             \tmovzbl (%rdx),%edx\n     16c:\t0f b6 d2             \tmovzbl %dl,%edx\n     16f:\tc1 e2 08             \tshl    $0x8,%edx\n     172:\t09 c2                \tor     %eax,%edx\n     174:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     178:\t48 83 c0 02          \tadd    $0x2,%rax\n     17c:\t0f b6 00             \tmovzbl (%rax),%eax\n     17f:\t0f b6 c0             \tmovzbl %al,%eax\n     182:\tc1 e0 10             \tshl    $0x10,%eax\n     185:\t09 c2                \tor     %eax,%edx\n     187:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     18b:\t48 83 c0 03          \tadd    $0x3,%rax\n     18f:\t0f b6 00             \tmovzbl (%rax),%eax\n     192:\t0f b6 c0             \tmovzbl %al,%eax\n     195:\tc1 e0 18             \tshl    $0x18,%eax\n     198:\t09 d0                \tor     %edx,%eax\n     19a:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     19e:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     1a5:\t00 00 \n     1a7:\t74 05                \tje     1ae <le32_to_cpupu+0x7a>\n     1a9:\te8 00 00 00 00       \tcallq  1ae <le32_to_cpupu+0x7a>\n     1ae:\tc9                   \tleaveq \n     1af:\tc3                   \tretq   ", "code_s": "__int64 __fastcall le32_to_cpupu(unsigned __int16 *<span class=\"supfact\">a1</span>) {\n  return (*((unsigned __int8 *)<span class=\"supfact\">a1</span> + Number) << Number) |\n         *<span class=\"supfact\">a1</span> |\n         (*((unsigned __int8 *)<span class=\"supfact\">a1</span> + Number) << Number);\n}", "code_t": "uint32_t __cdecl le32_to_cpupu(const uint32_t *<span class=\"supfact\">p</span>) {\n  return (*((unsigned __int8 *)<span class=\"supfact\">p</span> + Number) << Number) |\n         *(unsigned __int16 *)<span class=\"supfact\">p</span> |\n         (*((unsigned __int8 *)<span class=\"supfact\">p</span> + Number) << Number);\n}", "var": [{"name": "a1", "type": "const uint32_t *", "pred_name": "p", "ref_name": "p", "ref_type": "const uint32_t *"}], "body_in_train": true}, {"repo_owner": "ThisIsRedonkulous", "repo_name": "HoneyBee", "path": "ThisIsRedonkulous/HoneyBee/ea6411144b952d94e49ec22b6cd67332e8ece636deb2ec78179b0109b03b3222", "path_in_repo": "ThisIsRedonkulous/HoneyBee/Angel-3.2/Code/IntroGame/DemoScreens/DemoScreenLevelFile.o", "objdump": "0000000000000000 <_ZNSt6vectorIP10RenderableSaIS1_EE9push_backEOS1_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  10:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  14:\t48 89 c7             \tmov    %rax,%rdi\n  17:\te8 00 00 00 00       \tcallq  1c <_ZNSt6vectorIP10RenderableSaIS1_EE9push_backEOS1_+0x1c>\n  1c:\t48 89 c2             \tmov    %rax,%rdx\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\t48 89 d6             \tmov    %rdx,%rsi\n  26:\t48 89 c7             \tmov    %rax,%rdi\n  29:\te8 00 00 00 00       \tcallq  2e <_ZNSt6vectorIP10RenderableSaIS1_EE9push_backEOS1_+0x2e>\n  2e:\t90                   \tnop\n  2f:\tc9                   \tleaveq \n  30:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<Renderable *>\npush_back(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = std move<Renderable *&>(<span class=\"supfact\">a2</span>);\n  return std vector<Renderable *> emplace_back<Renderable *>(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">v2</span>);\n}", "code_t": "__int64 __fastcall std vector<Renderable *>\npush_back(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = std move<Renderable *&>(<span class=\"supfact\">a2</span>);\n  return std vector<Renderable *> emplace_back<Renderable *>(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">v2</span>);\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "v2", "type": "__int64", "pred_name": "v2", "ref_name": "v2", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "gshanr", "repo_name": "smartmeship", "path": "gshanr/smartmeship/f226488c3df6a286a146e49b643ff4d52c43fbf37c6b30ed8f026d26e26b5862", "path_in_repo": "gshanr/smartmeship/looci-contiki-os/contiki-2.6/examples/ftp/obj_native/frame802154.o", "objdump": "000000000000039b <frame802154_parse>:\n 39b:\t55                   \tpush   %rbp\n 39c:\t48 89 e5             \tmov    %rsp,%rbp\n 39f:\t48 83 ec 40          \tsub    $0x40,%rsp\n 3a3:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 3a7:\t89 f0                \tmov    %esi,%eax\n 3a9:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n 3ad:\t88 45 d4             \tmov    %al,-0x2c(%rbp)\n 3b0:\t80 7d d4 02          \tcmpb   $0x2,-0x2c(%rbp)\n 3b4:\t77 0a                \tja     3c0 <frame802154_parse+0x25>\n 3b6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3bb:\te9 c8 02 00 00       \tjmpq   688 <frame802154_parse+0x2ed>\n 3c0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3c4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 3c8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3cc:\t0f b6 00             \tmovzbl (%rax),%eax\n 3cf:\t83 e0 07             \tand    $0x7,%eax\n 3d2:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n 3d5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3d9:\t0f b6 00             \tmovzbl (%rax),%eax\n 3dc:\tc0 e8 03             \tshr    $0x3,%al\n 3df:\t83 e0 01             \tand    $0x1,%eax\n 3e2:\t88 45 f0             \tmov    %al,-0x10(%rbp)\n 3e5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3e9:\t0f b6 00             \tmovzbl (%rax),%eax\n 3ec:\tc0 e8 04             \tshr    $0x4,%al\n 3ef:\t83 e0 01             \tand    $0x1,%eax\n 3f2:\t88 45 f1             \tmov    %al,-0xf(%rbp)\n 3f5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3f9:\t0f b6 00             \tmovzbl (%rax),%eax\n 3fc:\tc0 e8 05             \tshr    $0x5,%al\n 3ff:\t83 e0 01             \tand    $0x1,%eax\n 402:\t88 45 f2             \tmov    %al,-0xe(%rbp)\n 405:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 409:\t0f b6 00             \tmovzbl (%rax),%eax\n 40c:\tc0 e8 06             \tshr    $0x6,%al\n 40f:\t83 e0 01             \tand    $0x1,%eax\n 412:\t88 45 f3             \tmov    %al,-0xd(%rbp)\n 415:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 419:\t48 83 c0 01          \tadd    $0x1,%rax\n 41d:\t0f b6 00             \tmovzbl (%rax),%eax\n 420:\tc0 e8 02             \tshr    $0x2,%al\n 423:\t83 e0 03             \tand    $0x3,%eax\n 426:\t88 45 f4             \tmov    %al,-0xc(%rbp)\n 429:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 42d:\t48 83 c0 01          \tadd    $0x1,%rax\n 431:\t0f b6 00             \tmovzbl (%rax),%eax\n 434:\tc0 e8 04             \tshr    $0x4,%al\n 437:\t83 e0 03             \tand    $0x3,%eax\n 43a:\t88 45 f5             \tmov    %al,-0xb(%rbp)\n 43d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 441:\t48 83 c0 01          \tadd    $0x1,%rax\n 445:\t0f b6 00             \tmovzbl (%rax),%eax\n 448:\tc0 e8 06             \tshr    $0x6,%al\n 44b:\t88 45 f6             \tmov    %al,-0xa(%rbp)\n 44e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 452:\t48 8b 55 ef          \tmov    -0x11(%rbp),%rdx\n 456:\t48 89 10             \tmov    %rdx,(%rax)\n 459:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 45d:\t0f b6 50 02          \tmovzbl 0x2(%rax),%edx\n 461:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 465:\t88 50 08             \tmov    %dl,0x8(%rax)\n 468:\t48 83 45 f8 03       \taddq   $0x3,-0x8(%rbp)\n 46d:\t0f b6 45 f4          \tmovzbl -0xc(%rbp),%eax\n 471:\t84 c0                \ttest   %al,%al\n 473:\t0f 84 b8 00 00 00    \tje     531 <frame802154_parse+0x196>\n 479:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 47d:\t0f b6 00             \tmovzbl (%rax),%eax\n 480:\t0f b6 c0             \tmovzbl %al,%eax\n 483:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 487:\t48 83 c2 01          \tadd    $0x1,%rdx\n 48b:\t0f b6 12             \tmovzbl (%rdx),%edx\n 48e:\t0f b6 d2             \tmovzbl %dl,%edx\n 491:\tc1 e2 08             \tshl    $0x8,%edx\n 494:\t01 c2                \tadd    %eax,%edx\n 496:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 49a:\t66 89 50 0a          \tmov    %dx,0xa(%rax)\n 49e:\t48 83 45 f8 02       \taddq   $0x2,-0x8(%rbp)\n 4a3:\t0f b6 45 f4          \tmovzbl -0xc(%rbp),%eax\n 4a7:\t3c 02                \tcmp    $0x2,%al\n 4a9:\t75 39                \tjne    4e4 <frame802154_parse+0x149>\n 4ab:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 4af:\t48 83 c0 0c          \tadd    $0xc,%rax\n 4b3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 4b8:\t48 89 c7             \tmov    %rax,%rdi\n 4bb:\te8 00 00 00 00       \tcallq  4c0 <frame802154_parse+0x125>\n 4c0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 4c4:\t0f b6 50 01          \tmovzbl 0x1(%rax),%edx\n 4c8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 4cc:\t88 50 0c             \tmov    %dl,0xc(%rax)\n 4cf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 4d3:\t0f b6 10             \tmovzbl (%rax),%edx\n 4d6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 4da:\t88 50 0d             \tmov    %dl,0xd(%rax)\n 4dd:\t48 83 45 f8 02       \taddq   $0x2,-0x8(%rbp)\n 4e2:\teb 6c                \tjmp    550 <frame802154_parse+0x1b5>\n 4e4:\t0f b6 45 f4          \tmovzbl -0xc(%rbp),%eax\n 4e8:\t3c 03                \tcmp    $0x3,%al\n 4ea:\t75 64                \tjne    550 <frame802154_parse+0x1b5>\n 4ec:\tc6 45 f7 00          \tmovb   $0x0,-0x9(%rbp)\n 4f0:\teb 32                \tjmp    524 <frame802154_parse+0x189>\n 4f2:\t0f b6 45 f7          \tmovzbl -0x9(%rbp),%eax\n 4f6:\tba 07 00 00 00       \tmov    $0x7,%edx\n 4fb:\t29 c2                \tsub    %eax,%edx\n 4fd:\t89 d0                \tmov    %edx,%eax\n 4ff:\t48 63 d0             \tmovslq %eax,%rdx\n 502:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 506:\t48 01 c2             \tadd    %rax,%rdx\n 509:\t0f b6 45 f7          \tmovzbl -0x9(%rbp),%eax\n 50d:\t0f b6 0a             \tmovzbl (%rdx),%ecx\n 510:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 514:\t48 98                \tcltq   \n 516:\t88 4c 02 0c          \tmov    %cl,0xc(%rdx,%rax,1)\n 51a:\t0f b6 45 f7          \tmovzbl -0x9(%rbp),%eax\n 51e:\t83 c0 01             \tadd    $0x1,%eax\n 521:\t88 45 f7             \tmov    %al,-0x9(%rbp)\n 524:\t80 7d f7 07          \tcmpb   $0x7,-0x9(%rbp)\n 528:\t76 c8                \tjbe    4f2 <frame802154_parse+0x157>\n 52a:\t48 83 45 f8 08       \taddq   $0x8,-0x8(%rbp)\n 52f:\teb 1f                \tjmp    550 <frame802154_parse+0x1b5>\n 531:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 535:\t48 83 c0 0c          \tadd    $0xc,%rax\n 539:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 53e:\t48 89 c7             \tmov    %rax,%rdi\n 541:\te8 00 00 00 00       \tcallq  546 <frame802154_parse+0x1ab>\n 546:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 54a:\t66 c7 40 0a 00 00    \tmovw   $0x0,0xa(%rax)\n 550:\t0f b6 45 f6          \tmovzbl -0xa(%rbp),%eax\n 554:\t84 c0                \ttest   %al,%al\n 556:\t0f 84 d2 00 00 00    \tje     62e <frame802154_parse+0x293>\n 55c:\t0f b6 45 f3          \tmovzbl -0xd(%rbp),%eax\n 560:\t84 c0                \ttest   %al,%al\n 562:\t75 2c                \tjne    590 <frame802154_parse+0x1f5>\n 564:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 568:\t0f b6 00             \tmovzbl (%rax),%eax\n 56b:\t0f b6 c0             \tmovzbl %al,%eax\n 56e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 572:\t48 83 c2 01          \tadd    $0x1,%rdx\n 576:\t0f b6 12             \tmovzbl (%rdx),%edx\n 579:\t0f b6 d2             \tmovzbl %dl,%edx\n 57c:\tc1 e2 08             \tshl    $0x8,%edx\n 57f:\t01 c2                \tadd    %eax,%edx\n 581:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 585:\t66 89 50 14          \tmov    %dx,0x14(%rax)\n 589:\t48 83 45 f8 02       \taddq   $0x2,-0x8(%rbp)\n 58e:\teb 10                \tjmp    5a0 <frame802154_parse+0x205>\n 590:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 594:\t0f b7 50 0a          \tmovzwl 0xa(%rax),%edx\n 598:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 59c:\t66 89 50 14          \tmov    %dx,0x14(%rax)\n 5a0:\t0f b6 45 f6          \tmovzbl -0xa(%rbp),%eax\n 5a4:\t3c 02                \tcmp    $0x2,%al\n 5a6:\t75 39                \tjne    5e1 <frame802154_parse+0x246>\n 5a8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 5ac:\t48 83 c0 16          \tadd    $0x16,%rax\n 5b0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 5b5:\t48 89 c7             \tmov    %rax,%rdi\n 5b8:\te8 00 00 00 00       \tcallq  5bd <frame802154_parse+0x222>\n 5bd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 5c1:\t0f b6 50 01          \tmovzbl 0x1(%rax),%edx\n 5c5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 5c9:\t88 50 16             \tmov    %dl,0x16(%rax)\n 5cc:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 5d0:\t0f b6 10             \tmovzbl (%rax),%edx\n 5d3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 5d7:\t88 50 17             \tmov    %dl,0x17(%rax)\n 5da:\t48 83 45 f8 02       \taddq   $0x2,-0x8(%rbp)\n 5df:\teb 6c                \tjmp    64d <frame802154_parse+0x2b2>\n 5e1:\t0f b6 45 f6          \tmovzbl -0xa(%rbp),%eax\n 5e5:\t3c 03                \tcmp    $0x3,%al\n 5e7:\t75 64                \tjne    64d <frame802154_parse+0x2b2>\n 5e9:\tc6 45 f7 00          \tmovb   $0x0,-0x9(%rbp)\n 5ed:\teb 32                \tjmp    621 <frame802154_parse+0x286>\n 5ef:\t0f b6 45 f7          \tmovzbl -0x9(%rbp),%eax\n 5f3:\tba 07 00 00 00       \tmov    $0x7,%edx\n 5f8:\t29 c2                \tsub    %eax,%edx\n 5fa:\t89 d0                \tmov    %edx,%eax\n 5fc:\t48 63 d0             \tmovslq %eax,%rdx\n 5ff:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 603:\t48 01 c2             \tadd    %rax,%rdx\n 606:\t0f b6 45 f7          \tmovzbl -0x9(%rbp),%eax\n 60a:\t0f b6 0a             \tmovzbl (%rdx),%ecx\n 60d:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 611:\t48 98                \tcltq   \n 613:\t88 4c 02 16          \tmov    %cl,0x16(%rdx,%rax,1)\n 617:\t0f b6 45 f7          \tmovzbl -0x9(%rbp),%eax\n 61b:\t83 c0 01             \tadd    $0x1,%eax\n 61e:\t88 45 f7             \tmov    %al,-0x9(%rbp)\n 621:\t80 7d f7 07          \tcmpb   $0x7,-0x9(%rbp)\n 625:\t76 c8                \tjbe    5ef <frame802154_parse+0x254>\n 627:\t48 83 45 f8 08       \taddq   $0x8,-0x8(%rbp)\n 62c:\teb 1f                \tjmp    64d <frame802154_parse+0x2b2>\n 62e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 632:\t48 83 c0 16          \tadd    $0x16,%rax\n 636:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 63b:\t48 89 c7             \tmov    %rax,%rdi\n 63e:\te8 00 00 00 00       \tcallq  643 <frame802154_parse+0x2a8>\n 643:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 647:\t66 c7 40 14 00 00    \tmovw   $0x0,0x14(%rax)\n 64d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 651:\t48 2b 45 d8          \tsub    -0x28(%rbp),%rax\n 655:\t88 45 f7             \tmov    %al,-0x9(%rbp)\n 658:\t0f b6 45 d4          \tmovzbl -0x2c(%rbp),%eax\n 65c:\t2a 45 f7             \tsub    -0x9(%rbp),%al\n 65f:\t89 c2                \tmov    %eax,%edx\n 661:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 665:\t88 50 40             \tmov    %dl,0x40(%rax)\n 668:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 66c:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 670:\t48 89 50 38          \tmov    %rdx,0x38(%rax)\n 674:\t0f b6 45 f7          \tmovzbl -0x9(%rbp),%eax\n 678:\t3a 45 d4             \tcmp    -0x2c(%rbp),%al\n 67b:\t77 06                \tja     683 <frame802154_parse+0x2e8>\n 67d:\t0f b6 45 f7          \tmovzbl -0x9(%rbp),%eax\n 681:\teb 05                \tjmp    688 <frame802154_parse+0x2ed>\n 683:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 688:\tc9                   \tleaveq \n 689:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall frame802154_parse(unsigned __int8 *<span class=\"supfact\">a1</span>,\n                                     unsigned __int8 <span class=\"supfact\">a2</span>,\n                                     __int64 <span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned __int8 i;\n  unsigned __int8 j;\n  unsigned __int8 *<span class=\"supfact\">v8</span>;\n  if (<span class=\"supfact\">a2</span> <= Number)\n    return Number L;\n  LOBYTE(<span class=\"supfact\">v5</span>) = *<span class=\"supfact\">a1</span> & Number;\n  BYTE1(<span class=\"supfact\">v5</span>) = (*<span class=\"supfact\">a1</span> & Number) != Number;\n  BYTE2(<span class=\"supfact\">v5</span>) = (*<span class=\"supfact\">a1</span> & Number) != Number;\n  BYTE3(<span class=\"supfact\">v5</span>) = (*<span class=\"supfact\">a1</span> & Number) != Number;\n  BYTE4(<span class=\"supfact\">v5</span>) = (*<span class=\"supfact\">a1</span> & Number) != Number;\n  BYTE5(<span class=\"supfact\">v5</span>) = (<span class=\"supfact\">a1</span>[Number] >> Number) & Number;\n  BYTE6(<span class=\"supfact\">v5</span>) = (<span class=\"supfact\">a1</span>[Number] >> Number) & Number;\n  HIBYTE(<span class=\"supfact\">v5</span>) = <span class=\"supfact\">a1</span>[Number] >> Number;\n  *(_QWORD *)<span class=\"supfact\">a3</span> = <span class=\"supfact\">v5</span>;\n  *(_BYTE *)(<span class=\"supfact\">a3</span> + Number) = <span class=\"supfact\">a1</span>[Number];\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">a1</span> + Number;\n  if (BYTE5(<span class=\"supfact\">v5</span>)) {\n    *(_WORD *)(<span class=\"supfact\">a3</span> + Number) =\n        <span class=\"supfact\">a1</span>[Number] + (<span class=\"supfact\">a1</span>[Number] << Number);\n    <span class=\"supfact\">v8</span> = <span class=\"supfact\">a1</span> + Number;\n    if (BYTE5(<span class=\"supfact\">v5</span>) == Number) {\n      rimeaddr_copy(<span class=\"supfact\">a3</span> + Number, &rimeaddr_null);\n      *(_BYTE *)(<span class=\"supfact\">a3</span> + Number) = <span class=\"supfact\">a1</span>[Number];\n      *(_BYTE *)(<span class=\"supfact\">a3</span> + Number) = *<span class=\"supfact\">v8</span>;\n      <span class=\"supfact\">v8</span> = <span class=\"supfact\">a1</span> + Number;\n    } else if (BYTE5(<span class=\"supfact\">v5</span>) == Number) {\n      for (i = Number; i <= Number; ++i)\n        *(_BYTE *)(<span class=\"supfact\">a3</span> + i + Number) =\n            <span class=\"supfact\">v8</span>[Number - i];\n      <span class=\"supfact\">v8</span> = <span class=\"supfact\">a1</span> + Number;\n    }\n  } else {\n    rimeaddr_copy(<span class=\"supfact\">a3</span> + Number, &rimeaddr_null);\n    *(_WORD *)(<span class=\"supfact\">a3</span> + Number) = Number;\n  }\n  if (HIBYTE(<span class=\"supfact\">v5</span>)) {\n    if (BYTE4(<span class=\"supfact\">v5</span>)) {\n      *(_WORD *)(<span class=\"supfact\">a3</span> + Number) =\n          *(_WORD *)(<span class=\"supfact\">a3</span> + Number);\n    } else {\n      *(_WORD *)(<span class=\"supfact\">a3</span> + Number) =\n          *<span class=\"supfact\">v8</span> + (<span class=\"supfact\">v8</span>[Number] << Number);\n      <span class=\"supfact\">v8</span> += Number;\n    }\n    if (HIBYTE(<span class=\"supfact\">v5</span>) == Number) {\n      rimeaddr_copy(<span class=\"supfact\">a3</span> + Number, &rimeaddr_null);\n      *(_BYTE *)(<span class=\"supfact\">a3</span> + Number) = <span class=\"supfact\">v8</span>[Number];\n      *(_BYTE *)(<span class=\"supfact\">a3</span> + Number) = *<span class=\"supfact\">v8</span>;\n      <span class=\"supfact\">v8</span> += Number;\n    } else if (HIBYTE(<span class=\"supfact\">v5</span>) == Number) {\n      for (j = Number; j <= Number; ++j)\n        *(_BYTE *)(<span class=\"supfact\">a3</span> + j + Number) =\n            <span class=\"supfact\">v8</span>[Number - j];\n      <span class=\"supfact\">v8</span> += Number;\n    }\n  } else {\n    rimeaddr_copy(<span class=\"supfact\">a3</span> + Number, &rimeaddr_null);\n    *(_WORD *)(<span class=\"supfact\">a3</span> + Number) = Number;\n  }\n  *(_BYTE *)(<span class=\"supfact\">a3</span> + Number) =\n      <span class=\"supfact\">a2</span> -\n      ((_BYTE)<span class=\"supfact\">v8</span> - (_BYTE)<span class=\"supfact\">a1</span>);\n  *(_QWORD *)(<span class=\"supfact\">a3</span> + Number) = <span class=\"supfact\">v8</span>;\n  if ((unsigned __int8)((_BYTE)<span class=\"supfact\">v8</span> - (_BYTE)<span class=\"supfact\">a1</span>) >\n      <span class=\"supfact\">a2</span>)\n    <span class=\"supfact\">result</span> = Number L;\n  else\n    <span class=\"supfact\">result</span> = (unsigned __int8)((_BYTE)<span class=\"supfact\">v8</span> -\n                                               (_BYTE)<span class=\"supfact\">a1</span>);\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "uint8_t __cdecl frame802154_parse(uint8_t *<span class=\"supfact\">data</span>,\n                                  uint8_t <span class=\"supfact\">len</span>,\n                                  frame802154_t *<span class=\"supfact\">pf_0</span>) {\n  uint8_t <span class=\"supfact\">result</span>;\n  frame802154_fcf_t <span class=\"supfact\">fcf</span>;\n  uint8_t c;\n  uint8_t ca;\n  uint8_t *<span class=\"supfact\">p</span>;\n  if (<span class=\"supfact\">len</span> <= Number)\n    return Number;\n  <span class=\"supfact\">fcf</span>.frame_type = *<span class=\"supfact\">data</span> & Number;\n  <span class=\"supfact\">fcf</span>.security_enabled =\n      (*<span class=\"supfact\">data</span> & Number) != Number;\n  <span class=\"supfact\">fcf</span>.frame_pending =\n      (*<span class=\"supfact\">data</span> & Number) != Number;\n  <span class=\"supfact\">fcf</span>.ack_required = (*<span class=\"supfact\">data</span> & Number) != Number;\n  <span class=\"supfact\">fcf</span>.panid_compression =\n      (*<span class=\"supfact\">data</span> & Number) != Number;\n  <span class=\"supfact\">fcf</span>.dest_addr_mode =\n      (<span class=\"supfact\">data</span>[Number] >> Number) & Number;\n  <span class=\"supfact\">fcf</span>.frame_version =\n      (<span class=\"supfact\">data</span>[Number] >> Number) & Number;\n  <span class=\"supfact\">fcf</span>.src_addr_mode = <span class=\"supfact\">data</span>[Number] >> Number;\n  <span class=\"supfact\">pf_0</span>-><span class=\"supfact\">fcf</span> = <span class=\"supfact\">fcf</span>;\n  <span class=\"supfact\">pf_0</span>->seq = <span class=\"supfact\">data</span>[Number];\n  <span class=\"supfact\">p</span> = <span class=\"supfact\">data</span> + Number;\n  if (<span class=\"supfact\">fcf</span>.dest_addr_mode) {\n    <span class=\"supfact\">pf_0</span>->dest_pid =\n        <span class=\"supfact\">data</span>[Number] + (<span class=\"supfact\">data</span>[Number] << Number);\n    <span class=\"supfact\">p</span> = <span class=\"supfact\">data</span> + Number;\n    if (<span class=\"supfact\">fcf</span>.dest_addr_mode == Number) {\n      rimeaddr_copy(<span class=\"supfact\">pf_0</span>->dest_addr, &rimeaddr_null);\n      <span class=\"supfact\">pf_0</span>->dest_addr[Number] = <span class=\"supfact\">data</span>[Number];\n      <span class=\"supfact\">pf_0</span>->dest_addr[Number] = *<span class=\"supfact\">p</span>;\n      <span class=\"supfact\">p</span> = <span class=\"supfact\">data</span> + Number;\n    } else if (<span class=\"supfact\">fcf</span>.dest_addr_mode == Number) {\n      for (c = Number; c <= Number; ++c)\n        <span class=\"supfact\">pf_0</span>->dest_addr[c] = <span class=\"supfact\">p</span>[Number - c];\n      <span class=\"supfact\">p</span> = <span class=\"supfact\">data</span> + Number;\n    }\n  } else {\n    rimeaddr_copy(<span class=\"supfact\">pf_0</span>->dest_addr, &rimeaddr_null);\n    <span class=\"supfact\">pf_0</span>->dest_pid = Number;\n  }\n  if (<span class=\"supfact\">fcf</span>.src_addr_mode) {\n    if (<span class=\"supfact\">fcf</span>.panid_compression) {\n      <span class=\"supfact\">pf_0</span>->src_pid = <span class=\"supfact\">pf_0</span>->dest_pid;\n    } else {\n      <span class=\"supfact\">pf_0</span>->src_pid =\n          *<span class=\"supfact\">p</span> + (<span class=\"supfact\">p</span>[Number] << Number);\n      <span class=\"supfact\">p</span> += Number;\n    }\n    if (<span class=\"supfact\">fcf</span>.src_addr_mode == Number) {\n      rimeaddr_copy(<span class=\"supfact\">pf_0</span>->src_addr, &rimeaddr_null);\n      <span class=\"supfact\">pf_0</span>->src_addr[Number] = <span class=\"supfact\">p</span>[Number];\n      <span class=\"supfact\">pf_0</span>->src_addr[Number] = *<span class=\"supfact\">p</span>;\n      <span class=\"supfact\">p</span> += Number;\n    } else if (<span class=\"supfact\">fcf</span>.src_addr_mode == Number) {\n      for (ca = Number; ca <= Number; ++ca)\n        <span class=\"supfact\">pf_0</span>->src_addr[ca] = <span class=\"supfact\">p</span>[Number - ca];\n      <span class=\"supfact\">p</span> += Number;\n    }\n  } else {\n    rimeaddr_copy(<span class=\"supfact\">pf_0</span>->src_addr, &rimeaddr_null);\n    <span class=\"supfact\">pf_0</span>->src_pid = Number;\n  }\n  <span class=\"supfact\">pf_0</span>->payload_len =\n      <span class=\"supfact\">len</span> -\n      ((_BYTE)<span class=\"supfact\">p</span> - (_BYTE)<span class=\"supfact\">data</span>);\n  <span class=\"supfact\">pf_0</span>->payload = <span class=\"supfact\">p</span>;\n  if ((unsigned __int8)((_BYTE)<span class=\"supfact\">p</span> -\n                        (_BYTE)<span class=\"supfact\">data</span>) > <span class=\"supfact\">len</span>)\n    <span class=\"supfact\">result</span> = Number;\n  else\n    <span class=\"supfact\">result</span> =\n        (_BYTE)<span class=\"supfact\">p</span> - (_BYTE)<span class=\"supfact\">data</span>;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "uint8_t *", "pred_name": "data", "ref_name": "data", "ref_type": "uint8_t *"}, {"name": "a2", "type": "uint8_t", "pred_name": "len", "ref_name": "len", "ref_type": "uint8_t"}, {"name": "a3", "type": "frame802154_t *", "pred_name": "pf_0", "ref_name": "pf_0", "ref_type": "frame802154_t *"}, {"name": "result", "type": "uint8_t", "pred_name": "result", "ref_name": "result", "ref_type": "uint8_t"}, {"name": "v5", "type": "struct frame802154_fcf_t { uint8_t frame_type; uint8_t security_enabled; uint8_t frame_pending; uint8_t ack_required; uint8_t panid_compression; uint8_t dest_addr_mode; uint8_t frame_version; uint8_t src_addr_mode; }", "pred_name": "fcf", "ref_name": "fcf", "ref_type": "struct frame802154_fcf_t { uint8_t frame_type; uint8_t security_enabled; uint8_t frame_pending; uint8_t ack_required; uint8_t panid_compression; uint8_t dest_addr_mode; uint8_t frame_version; uint8_t src_addr_mode; }"}, {"name": "v8", "type": "uint8_t *", "pred_name": "p", "ref_name": "p", "ref_type": "uint8_t *"}], "body_in_train": true}, {"repo_owner": "avafinger", "repo_name": "ffmpeg-3.3.4_cedrus264", "path": "avafinger/ffmpeg-3.3.4_cedrus264/0fac22d04bfb561e07f9323c932a90d9401c19e39202f67cea777055d9c6883a", "path_in_repo": "avafinger/ffmpeg-3.3.4_cedrus264/src/libavcodec/dca_core.o", "objdump": "0000000000007b26 <filter_frame_fixed>:\n    7b26:\t48 83 ec 68          \tsub    $0x68,%rsp\n    7b2a:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    7b2f:\t48 89 34 24          \tmov    %rsi,(%rsp)\n    7b33:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7b38:\t48 8b 00             \tmov    (%rax),%rax\n    7b3b:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n    7b40:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    7b45:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    7b49:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    7b4e:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    7b53:\t8b 80 94 32 01 00    \tmov    0x13294(%rax),%eax\n    7b59:\t83 e0 04             \tand    $0x4,%eax\n    7b5c:\t85 c0                \ttest   %eax,%eax\n    7b5e:\t75 26                \tjne    7b86 <filter_frame_fixed+0x60>\n    7b60:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7b65:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    7b6a:\t48 89 c7             \tmov    %rax,%rdi\n    7b6d:\te8 00 00 00 00       \tcallq  7b72 <filter_frame_fixed+0x4c>\n    7b72:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n    7b76:\t83 7c 24 34 00       \tcmpl   $0x0,0x34(%rsp)\n    7b7b:\t79 09                \tjns    7b86 <filter_frame_fixed+0x60>\n    7b7d:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    7b81:\te9 d3 04 00 00       \tjmpq   8059 <filter_frame_fixed+0x533>\n    7b86:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7b8b:\t8b 90 08 b6 00 00    \tmov    0xb608(%rax),%edx\n    7b91:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    7b96:\t89 90 d8 01 00 00    \tmov    %edx,0x1d8(%rax)\n    7b9c:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    7ba1:\tc7 80 e0 01 00 00 07 \tmovl   $0x7,0x1e0(%rax)\n    7ba8:\t00 00 00 \n    7bab:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    7bb0:\tc7 80 6c 03 00 00 18 \tmovl   $0x18,0x36c(%rax)\n    7bb7:\t00 00 00 \n    7bba:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7bbf:\t8b 80 04 b6 00 00    \tmov    0xb604(%rax),%eax\n    7bc5:\t89 44 24 30          \tmov    %eax,0x30(%rsp)\n    7bc9:\t48 8b 04 24          \tmov    (%rsp),%rax\n    7bcd:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n    7bd1:\t89 50 70             \tmov    %edx,0x70(%rax)\n    7bd4:\t48 8b 0c 24          \tmov    (%rsp),%rcx\n    7bd8:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    7bdd:\tba 00 00 00 00       \tmov    $0x0,%edx\n    7be2:\t48 89 ce             \tmov    %rcx,%rsi\n    7be5:\t48 89 c7             \tmov    %rax,%rdi\n    7be8:\te8 00 00 00 00       \tcallq  7bed <filter_frame_fixed+0xc7>\n    7bed:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n    7bf1:\t83 7c 24 34 00       \tcmpl   $0x0,0x34(%rsp)\n    7bf6:\t79 09                \tjns    7c01 <filter_frame_fixed+0xdb>\n    7bf8:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    7bfc:\te9 58 04 00 00       \tjmpq   8059 <filter_frame_fixed+0x533>\n    7c01:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7c06:\t8b 80 88 00 00 00    \tmov    0x88(%rax),%eax\n    7c0c:\t85 c0                \ttest   %eax,%eax\n    7c0e:\t74 60                \tje     7c70 <filter_frame_fixed+0x14a>\n    7c10:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7c15:\t8b 80 a8 25 00 00    \tmov    0x25a8(%rax),%eax\n    7c1b:\t83 e0 08             \tand    $0x8,%eax\n    7c1e:\t85 c0                \ttest   %eax,%eax\n    7c20:\t74 4e                \tje     7c70 <filter_frame_fixed+0x14a>\n    7c22:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7c27:\t8b 40 54             \tmov    0x54(%rax),%eax\n    7c2a:\t83 f8 07             \tcmp    $0x7,%eax\n    7c2d:\t7e 41                \tjle    7c70 <filter_frame_fixed+0x14a>\n    7c2f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7c34:\t48 8b 80 40 b3 00 00 \tmov    0xb340(%rax),%rax\n    7c3b:\t4c 8b 40 60          \tmov    0x60(%rax),%r8\n    7c3f:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n    7c43:\t48 63 c8             \tmovslq %eax,%rcx\n    7c46:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7c4b:\t48 8b 90 a8 b4 00 00 \tmov    0xb4a8(%rax),%rdx\n    7c52:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7c57:\t48 8b b0 98 b4 00 00 \tmov    0xb498(%rax),%rsi\n    7c5e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7c63:\t48 8b 80 90 b4 00 00 \tmov    0xb490(%rax),%rax\n    7c6a:\t48 89 c7             \tmov    %rax,%rdi\n    7c6d:\t41 ff d0             \tcallq  *%r8\n    7c70:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7c75:\t8b 80 a8 25 00 00    \tmov    0x25a8(%rax),%eax\n    7c7b:\t83 e0 42             \tand    $0x42,%eax\n    7c7e:\t85 c0                \ttest   %eax,%eax\n    7c80:\t0f 84 e5 01 00 00    \tje     7e6b <filter_frame_fixed+0x345>\n    7c86:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7c8b:\t8b 80 c0 25 00 00    \tmov    0x25c0(%rax),%eax\n    7c91:\t85 c0                \ttest   %eax,%eax\n    7c93:\t0f 84 d2 01 00 00    \tje     7e6b <filter_frame_fixed+0x345>\n    7c99:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7c9e:\t8b 80 c4 25 00 00    \tmov    0x25c4(%rax),%eax\n    7ca4:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n    7ca8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7cad:\t48 05 d0 25 00 00    \tadd    $0x25d0,%rax\n    7cb3:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n    7cb8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7cbd:\t8b 40 54             \tmov    0x54(%rax),%eax\n    7cc0:\t48 98                \tcltq   \n    7cc2:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n    7cc9:\t0f b6 c0             \tmovzbl %al,%eax\n    7ccc:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n    7cd0:\tc7 44 24 50 00 00 00 \tmovl   $0x0,0x50(%rsp)\n    7cd7:\t00 \n    7cd8:\teb 61                \tjmp    7d3b <filter_frame_fixed+0x215>\n    7cda:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7cdf:\t8b 80 b8 25 00 00    \tmov    0x25b8(%rax),%eax\n    7ce5:\t89 c2                \tmov    %eax,%edx\n    7ce7:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n    7ceb:\t89 c1                \tmov    %eax,%ecx\n    7ced:\td3 ea                \tshr    %cl,%edx\n    7cef:\t89 d0                \tmov    %edx,%eax\n    7cf1:\t83 e0 01             \tand    $0x1,%eax\n    7cf4:\t85 c0                \ttest   %eax,%eax\n    7cf6:\t74 3e                \tje     7d36 <filter_frame_fixed+0x210>\n    7cf8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7cfd:\t48 8b 80 40 b3 00 00 \tmov    0xb340(%rax),%rax\n    7d04:\t4c 8b 80 80 00 00 00 \tmov    0x80(%rax),%r8\n    7d0b:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n    7d0f:\t48 63 d0             \tmovslq %eax,%rdx\n    7d12:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7d17:\t8b 4c 24 50          \tmov    0x50(%rsp),%ecx\n    7d1b:\t48 63 c9             \tmovslq %ecx,%rcx\n    7d1e:\t48 81 c1 8e 16 00 00 \tadd    $0x168e,%rcx\n    7d25:\t48 8b 44 c8 08       \tmov    0x8(%rax,%rcx,8),%rax\n    7d2a:\t8b 4c 24 2c          \tmov    0x2c(%rsp),%ecx\n    7d2e:\t89 ce                \tmov    %ecx,%esi\n    7d30:\t48 89 c7             \tmov    %rax,%rdi\n    7d33:\t41 ff d0             \tcallq  *%r8\n    7d36:\t83 44 24 50 01       \taddl   $0x1,0x50(%rsp)\n    7d3b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7d40:\t8b 80 b4 25 00 00    \tmov    0x25b4(%rax),%eax\n    7d46:\t39 44 24 50          \tcmp    %eax,0x50(%rsp)\n    7d4a:\t7c 8e                \tjl     7cda <filter_frame_fixed+0x1b4>\n    7d4c:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n    7d50:\t89 44 24 54          \tmov    %eax,0x54(%rsp)\n    7d54:\te9 fd 00 00 00       \tjmpq   7e56 <filter_frame_fixed+0x330>\n    7d59:\t8b 54 24 54          \tmov    0x54(%rsp),%edx\n    7d5d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7d62:\t89 d6                \tmov    %edx,%esi\n    7d64:\t48 89 c7             \tmov    %rax,%rdi\n    7d67:\te8 bc f6 ff ff       \tcallq  7428 <map_prm_ch_to_spkr>\n    7d6c:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n    7d70:\t83 7c 24 24 00       \tcmpl   $0x0,0x24(%rsp)\n    7d75:\t79 0a                \tjns    7d81 <filter_frame_fixed+0x25b>\n    7d77:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    7d7c:\te9 d8 02 00 00       \tjmpq   8059 <filter_frame_fixed+0x533>\n    7d81:\tc7 44 24 50 00 00 00 \tmovl   $0x0,0x50(%rsp)\n    7d88:\t00 \n    7d89:\te9 ae 00 00 00       \tjmpq   7e3c <filter_frame_fixed+0x316>\n    7d8e:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n    7d92:\t2b 44 24 28          \tsub    0x28(%rsp),%eax\n    7d96:\t89 c2                \tmov    %eax,%edx\n    7d98:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7d9d:\t48 63 d2             \tmovslq %edx,%rdx\n    7da0:\t48 81 c2 70 09 00 00 \tadd    $0x970,%rdx\n    7da7:\t8b 44 90 08          \tmov    0x8(%rax,%rdx,4),%eax\n    7dab:\t89 c2                \tmov    %eax,%edx\n    7dad:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n    7db1:\t89 c1                \tmov    %eax,%ecx\n    7db3:\td3 ea                \tshr    %cl,%edx\n    7db5:\t89 d0                \tmov    %edx,%eax\n    7db7:\t83 e0 01             \tand    $0x1,%eax\n    7dba:\t85 c0                \ttest   %eax,%eax\n    7dbc:\t74 79                \tje     7e37 <filter_frame_fixed+0x311>\n    7dbe:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n    7dc3:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n    7dc7:\t48 89 54 24 48       \tmov    %rdx,0x48(%rsp)\n    7dcc:\t8b 00                \tmov    (%rax),%eax\n    7dce:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n    7dd2:\t89 d6                \tmov    %edx,%esi\n    7dd4:\t89 c7                \tmov    %eax,%edi\n    7dd6:\te8 b3 82 ff ff       \tcallq  8e <mul16>\n    7ddb:\t89 44 24 20          \tmov    %eax,0x20(%rsp)\n    7ddf:\t83 7c 24 20 00       \tcmpl   $0x0,0x20(%rsp)\n    7de4:\t74 51                \tje     7e37 <filter_frame_fixed+0x311>\n    7de6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7deb:\t48 8b 80 40 b3 00 00 \tmov    0xb340(%rax),%rax\n    7df2:\t4c 8b 40 68          \tmov    0x68(%rax),%r8\n    7df6:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n    7dfa:\t48 63 c8             \tmovslq %eax,%rcx\n    7dfd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7e02:\t8b 54 24 24          \tmov    0x24(%rsp),%edx\n    7e06:\t48 63 d2             \tmovslq %edx,%rdx\n    7e09:\t48 81 c2 8e 16 00 00 \tadd    $0x168e,%rdx\n    7e10:\t48 8b 74 d0 08       \tmov    0x8(%rax,%rdx,8),%rsi\n    7e15:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7e1a:\t8b 54 24 50          \tmov    0x50(%rsp),%edx\n    7e1e:\t48 63 d2             \tmovslq %edx,%rdx\n    7e21:\t48 81 c2 8e 16 00 00 \tadd    $0x168e,%rdx\n    7e28:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    7e2d:\t8b 54 24 20          \tmov    0x20(%rsp),%edx\n    7e31:\t48 89 c7             \tmov    %rax,%rdi\n    7e34:\t41 ff d0             \tcallq  *%r8\n    7e37:\t83 44 24 50 01       \taddl   $0x1,0x50(%rsp)\n    7e3c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7e41:\t8b 80 b4 25 00 00    \tmov    0x25b4(%rax),%eax\n    7e47:\t39 44 24 50          \tcmp    %eax,0x50(%rsp)\n    7e4b:\t0f 8c 3d ff ff ff    \tjl     7d8e <filter_frame_fixed+0x268>\n    7e51:\t83 44 24 54 01       \taddl   $0x1,0x54(%rsp)\n    7e56:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7e5b:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n    7e61:\t39 44 24 54          \tcmp    %eax,0x54(%rsp)\n    7e65:\t0f 8c ee fe ff ff    \tjl     7d59 <filter_frame_fixed+0x233>\n    7e6b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7e70:\t8b 80 a8 25 00 00    \tmov    0x25a8(%rax),%eax\n    7e76:\t83 e0 4a             \tand    $0x4a,%eax\n    7e79:\t85 c0                \ttest   %eax,%eax\n    7e7b:\t0f 85 ae 00 00 00    \tjne    7f2f <filter_frame_fixed+0x409>\n    7e81:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7e86:\t8b 80 8c 00 00 00    \tmov    0x8c(%rax),%eax\n    7e8c:\t85 c0                \ttest   %eax,%eax\n    7e8e:\t74 0c                \tje     7e9c <filter_frame_fixed+0x376>\n    7e90:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7e95:\t8b 40 54             \tmov    0x54(%rax),%eax\n    7e98:\t85 c0                \ttest   %eax,%eax\n    7e9a:\t7f 0d                \tjg     7ea9 <filter_frame_fixed+0x383>\n    7e9c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7ea1:\t8b 40 54             \tmov    0x54(%rax),%eax\n    7ea4:\t83 f8 03             \tcmp    $0x3,%eax\n    7ea7:\t75 35                \tjne    7ede <filter_frame_fixed+0x3b8>\n    7ea9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7eae:\t48 8b 80 60 b4 00 00 \tmov    0xb460(%rax),%rax\n    7eb5:\t4c 8b 40 30          \tmov    0x30(%rax),%r8\n    7eb9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7ebe:\t48 8b 88 88 b4 00 00 \tmov    0xb488(%rax),%rcx\n    7ec5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7eca:\t48 8b 80 80 b4 00 00 \tmov    0xb480(%rax),%rax\n    7ed1:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n    7ed5:\t48 89 ce             \tmov    %rcx,%rsi\n    7ed8:\t48 89 c7             \tmov    %rax,%rdi\n    7edb:\t41 ff d0             \tcallq  *%r8\n    7ede:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7ee3:\t8b 80 90 00 00 00    \tmov    0x90(%rax),%eax\n    7ee9:\t85 c0                \ttest   %eax,%eax\n    7eeb:\t74 42                \tje     7f2f <filter_frame_fixed+0x409>\n    7eed:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7ef2:\t8b 40 54             \tmov    0x54(%rax),%eax\n    7ef5:\t83 f8 07             \tcmp    $0x7,%eax\n    7ef8:\t7e 35                \tjle    7f2f <filter_frame_fixed+0x409>\n    7efa:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7eff:\t48 8b 80 60 b4 00 00 \tmov    0xb460(%rax),%rax\n    7f06:\t4c 8b 40 30          \tmov    0x30(%rax),%r8\n    7f0a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7f0f:\t48 8b 88 98 b4 00 00 \tmov    0xb498(%rax),%rcx\n    7f16:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7f1b:\t48 8b 80 90 b4 00 00 \tmov    0xb490(%rax),%rax\n    7f22:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n    7f26:\t48 89 ce             \tmov    %rcx,%rsi\n    7f29:\t48 89 c7             \tmov    %rax,%rdi\n    7f2c:\t41 ff d0             \tcallq  *%r8\n    7f2f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7f34:\t8b 90 00 b6 00 00    \tmov    0xb600(%rax),%edx\n    7f3a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7f3f:\t8b 80 9c 00 00 00    \tmov    0x9c(%rax),%eax\n    7f45:\t39 c2                \tcmp    %eax,%edx\n    7f47:\t74 43                \tje     7f8c <filter_frame_fixed+0x466>\n    7f49:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7f4e:\t8b 88 9c 00 00 00    \tmov    0x9c(%rax),%ecx\n    7f54:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7f59:\t48 8d b8 48 25 00 00 \tlea    0x2548(%rax),%rdi\n    7f60:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7f65:\t48 8d b0 78 b4 00 00 \tlea    0xb478(%rax),%rsi\n    7f6c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7f71:\t48 8b 80 40 b3 00 00 \tmov    0xb340(%rax),%rax\n    7f78:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n    7f7c:\t41 89 c8             \tmov    %ecx,%r8d\n    7f7f:\t89 d1                \tmov    %edx,%ecx\n    7f81:\t48 89 fa             \tmov    %rdi,%rdx\n    7f84:\t48 89 c7             \tmov    %rax,%rdi\n    7f87:\te8 00 00 00 00       \tcallq  7f8c <filter_frame_fixed+0x466>\n    7f8c:\tc7 44 24 5c 00 00 00 \tmovl   $0x0,0x5c(%rsp)\n    7f93:\t00 \n    7f94:\te9 a6 00 00 00       \tjmpq   803f <filter_frame_fixed+0x519>\n    7f99:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7f9e:\t8b 54 24 5c          \tmov    0x5c(%rsp),%edx\n    7fa2:\t48 63 d2             \tmovslq %edx,%rdx\n    7fa5:\t48 81 c2 60 2d 00 00 \tadd    $0x2d60,%rdx\n    7fac:\t8b 14 90             \tmov    (%rax,%rdx,4),%edx\n    7faf:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7fb4:\t48 63 d2             \tmovslq %edx,%rdx\n    7fb7:\t48 81 c2 8e 16 00 00 \tadd    $0x168e,%rdx\n    7fbe:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    7fc3:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n    7fc8:\t48 8b 04 24          \tmov    (%rsp),%rax\n    7fcc:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n    7fd0:\t8b 54 24 5c          \tmov    0x5c(%rsp),%edx\n    7fd4:\t48 63 d2             \tmovslq %edx,%rdx\n    7fd7:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    7fdb:\t48 01 d0             \tadd    %rdx,%rax\n    7fde:\t48 8b 00             \tmov    (%rax),%rax\n    7fe1:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n    7fe6:\tc7 44 24 58 00 00 00 \tmovl   $0x0,0x58(%rsp)\n    7fed:\t00 \n    7fee:\teb 40                \tjmp    8030 <filter_frame_fixed+0x50a>\n    7ff0:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    7ff4:\t48 98                \tcltq   \n    7ff6:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    7ffd:\t00 \n    7ffe:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    8003:\t48 01 d0             \tadd    %rdx,%rax\n    8006:\t8b 00                \tmov    (%rax),%eax\n    8008:\t89 c7                \tmov    %eax,%edi\n    800a:\te8 ee 80 ff ff       \tcallq  fd <clip23>\n    800f:\t8b 54 24 58          \tmov    0x58(%rsp),%edx\n    8013:\t48 63 d2             \tmovslq %edx,%rdx\n    8016:\t48 8d 0c 95 00 00 00 \tlea    0x0(,%rdx,4),%rcx\n    801d:\t00 \n    801e:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    8023:\t48 01 ca             \tadd    %rcx,%rdx\n    8026:\tc1 e0 08             \tshl    $0x8,%eax\n    8029:\t89 02                \tmov    %eax,(%rdx)\n    802b:\t83 44 24 58 01       \taddl   $0x1,0x58(%rsp)\n    8030:\t8b 44 24 58          \tmov    0x58(%rsp),%eax\n    8034:\t3b 44 24 30          \tcmp    0x30(%rsp),%eax\n    8038:\t7c b6                \tjl     7ff0 <filter_frame_fixed+0x4ca>\n    803a:\t83 44 24 5c 01       \taddl   $0x1,0x5c(%rsp)\n    803f:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    8044:\t8b 80 dc 01 00 00    \tmov    0x1dc(%rax),%eax\n    804a:\t39 44 24 5c          \tcmp    %eax,0x5c(%rsp)\n    804e:\t0f 8c 45 ff ff ff    \tjl     7f99 <filter_frame_fixed+0x473>\n    8054:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    8059:\t48 83 c4 68          \tadd    $0x68,%rsp\n    805d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall filter_frame_fixed(__int64 <span class=\"supfact\">a1</span>,\n                                      __int64 <span class=\"supfact\">a2</span>) {\n  int *<span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">v10</span>;\n  int v11;\n  int v12;\n  _DWORD *<span class=\"supfact\">v13</span>;\n  int *<span class=\"supfact\">v14</span>;\n  int i;\n  int k;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">m</span>;\n  int <span class=\"supfact\">l</span>;\n  <span class=\"supfact\">v13</span> = *(_DWORD **)<span class=\"supfact\">a1</span>;\n  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)<span class=\"supfact\">a1</span> + Number L) +\n                   Number L) &\n       Number) == Number) {\n    v11 = ff_dca_core_filter_fixed((_QWORD *)<span class=\"supfact\">a1</span>, Number);\n    if (v11 < Number)\n      return (unsigned int)v11;\n  }\n  <span class=\"supfact\">v13</span>[Number] = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v13</span>[Number] = Number;\n  <span class=\"supfact\">v13</span>[Number] = Number;\n  <span class=\"supfact\">v10</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  *(_DWORD *)(<span class=\"supfact\">a2</span> + Number) = <span class=\"supfact\">v10</span>;\n  v12 = ff_get_buffer(<span class=\"supfact\">v13</span>, <span class=\"supfact\">a2</span>, Number L);\n  if (v12 < Number)\n    return (unsigned int)v12;\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n      (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & Number) != Number &&\n      *(int *)(<span class=\"supfact\">a1</span> + Number) > Number)\n    (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD, _QWORD))(\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L))(\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number), (int)<span class=\"supfact\">v10</span>);\n  if ((*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & Number) != Number &&\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    <span class=\"supfact\">v9</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n    <span class=\"supfact\">v14</span> = (int *)(<span class=\"supfact\">a1</span> + Number);\n    <span class=\"supfact\">v8</span> = *((unsigned __int8 *)&ff_dca_channels +\n                           *(int *)(<span class=\"supfact\">a1</span> + Number));\n    for (i = Number; i < *(_DWORD *)(<span class=\"supfact\">a1</span> + Number); ++i) {\n      if (((*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) >> i) & Number) != Number)\n        (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD))(\n            *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L))(\n            *(_QWORD *)(<span class=\"supfact\">a1</span> + Number * (i + Number L) + Number),\n            <span class=\"supfact\">v9</span>, (int)<span class=\"supfact\">v10</span>);\n    }\n    for (<span class=\"supfact\">j</span> = <span class=\"supfact\">v8</span>;\n         <span class=\"supfact\">j</span> < *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">v7</span> =\n          map_prm_ch_to_spkr((int *)<span class=\"supfact\">a1</span>, <span class=\"supfact\">j</span>);\n      if (<span class=\"supfact\">v7</span> < Number)\n        return Number L;\n      for (k = Number; k < *(_DWORD *)(<span class=\"supfact\">a1</span> + Number); ++k) {\n        if (((*(_DWORD *)(<span class=\"supfact\">a1</span> +\n                          Number * (<span class=\"supfact\">j</span> - <span class=\"supfact\">v8</span> +\n                                    Number L) +\n                          Number) >>\n              k) &\n             Number) != Number) {\n          <span class=\"supfact\">v3</span> = <span class=\"supfact\">v14</span>++;\n          <span class=\"supfact\">v6</span> = mul16(*<span class=\"supfact\">v3</span>, <span class=\"supfact\">v9</span>);\n          if (<span class=\"supfact\">v6</span>)\n            (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD, _QWORD))(\n                *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L))(\n                *(_QWORD *)(<span class=\"supfact\">a1</span> + Number * (k + Number L) +\n                            Number),\n                *(_QWORD *)(<span class=\"supfact\">a1</span> +\n                            Number * (<span class=\"supfact\">v7</span> + Number L) + Number),\n                <span class=\"supfact\">v6</span>, (int)<span class=\"supfact\">v10</span>);\n        }\n      }\n    }\n  }\n  if ((*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & Number) == Number) {\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n            *(int *)(<span class=\"supfact\">a1</span> + Number) > Number ||\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number)\n      (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD))(\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L))(\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number), <span class=\"supfact\">v10</span>);\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n        *(int *)(<span class=\"supfact\">a1</span> + Number) > Number)\n      (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD))(\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L))(\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number), <span class=\"supfact\">v10</span>);\n  }\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) !=\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n    ff_dca_downmix_to_stereo_fixed(\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number), <span class=\"supfact\">a1</span> + Number,\n        <span class=\"supfact\">a1</span> + Number, <span class=\"supfact\">v10</span>,\n        *(unsigned int *)(<span class=\"supfact\">a1</span> + Number));\n  for (<span class=\"supfact\">l</span> = Number;\n       <span class=\"supfact\">l</span> < <span class=\"supfact\">v13</span>[Number]; ++<span class=\"supfact\">l</span>) {\n    <span class=\"supfact\">v5</span> = *(\n        _QWORD *)(<span class=\"supfact\">a1</span> +\n                  Number * (*(int *)(<span class=\"supfact\">a1</span> +\n                                     Number * (<span class=\"supfact\">l</span> + Number L)) +\n                            Number L) +\n                  Number);\n    <span class=\"supfact\">v4</span> = *(_QWORD *)(Number L * <span class=\"supfact\">l</span> +\n                                     *(_QWORD *)(<span class=\"supfact\">a2</span> + Number));\n    for (<span class=\"supfact\">m</span> = Number;\n         <span class=\"supfact\">m</span> < (int)<span class=\"supfact\">v10</span>; ++<span class=\"supfact\">m</span>)\n      *(_DWORD *)(Number L * <span class=\"supfact\">m</span> + <span class=\"supfact\">v4</span>) =\n          (unsigned int)clip23(\n              *(_DWORD *)(Number L * <span class=\"supfact\">m</span> + <span class=\"supfact\">v5</span>))\n          << Number;\n  }\n  return Number L;\n}", "code_t": "int __cdecl filter_frame_fixed(DCACoreDecoder_0 *<span class=\"supfact\">s</span>,\n                               AVFrame_0 *<span class=\"supfact\">frame</span>) {\n  int32_t *<span class=\"supfact\">v3</span>;\n  int32_t *<span class=\"supfact\">plane</span>;\n  int32_t *<span class=\"supfact\">samples</span>;\n  int32_t <span class=\"supfact\">coeff</span>;\n  int <span class=\"supfact\">src_spkr</span>;\n  int <span class=\"supfact\">xch_base</span>;\n  int <span class=\"supfact\">scale_inv</span>;\n  int <span class=\"supfact\">nsamples</span>;\n  int ret;\n  int reta;\n  AVCodecContext_0 *<span class=\"supfact\">avctx</span>;\n  int *<span class=\"supfact\">coeff_ptr</span>;\n  int spkr;\n  int spkra;\n  int <span class=\"supfact\">ch_0</span>;\n  int <span class=\"supfact\">n</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">avctx</span> = <span class=\"supfact\">s</span>-><span class=\"supfact\">avctx</span>;\n  if ((*((_DWORD *)<span class=\"supfact\">s</span>-><span class=\"supfact\">avctx</span>->priv_data +\n         Number) &\n       Number) == Number) {\n    ret = ff_dca_core_filter_fixed(<span class=\"supfact\">s</span>, Number);\n    if (ret < Number)\n      return ret;\n  }\n  <span class=\"supfact\">avctx</span>->sample_rate = <span class=\"supfact\">s</span>->output_rate;\n  <span class=\"supfact\">avctx</span>->sample_fmt = AV_SAMPLE_FMT_S32P;\n  <span class=\"supfact\">avctx</span>->bits_per_raw_sample = Number;\n  <span class=\"supfact\">nsamples</span> = <span class=\"supfact\">s</span>->npcmsamples;\n  <span class=\"supfact\">frame</span>->nb_samples = <span class=\"supfact\">nsamples</span>;\n  reta = ff_get_buffer(<span class=\"supfact\">avctx</span>, <span class=\"supfact\">frame</span>, Number L);\n  if (reta < Number)\n    return reta;\n  if (<span class=\"supfact\">s</span>->es_format &&\n      (<span class=\"supfact\">s</span>->ext_audio_mask & Number) != Number &&\n      <span class=\"supfact\">s</span>->audio_mode > Number)\n    <span class=\"supfact\">s</span>->dcadsp->dmix_sub_xch(\n        <span class=\"supfact\">s</span>->output_samples[Number],\n        <span class=\"supfact\">s</span>->output_samples[Number],\n        <span class=\"supfact\">s</span>->output_samples[Number], <span class=\"supfact\">nsamples</span>);\n  if ((<span class=\"supfact\">s</span>->ext_audio_mask & Number) != Number &&\n      <span class=\"supfact\">s</span>->xxch_dmix_embedded) {\n    <span class=\"supfact\">scale_inv</span> = <span class=\"supfact\">s</span>->xxch_dmix_scale_inv;\n    <span class=\"supfact\">coeff_ptr</span> = <span class=\"supfact\">s</span>->xxch_dmix_coeff;\n    <span class=\"supfact\">xch_base</span> =\n        *((unsigned __int8 *)&ff_dca_channels + <span class=\"supfact\">s</span>->audio_mode);\n    for (spkr = Number; spkr < <span class=\"supfact\">s</span>->xxch_mask_nbits; ++spkr) {\n      if ((((unsigned int)<span class=\"supfact\">s</span>->xxch_core_mask >> spkr) &\n           Number) != Number)\n        <span class=\"supfact\">s</span>->dcadsp->dmix_scale_inv(\n            <span class=\"supfact\">s</span>->output_samples[spkr], <span class=\"supfact\">scale_inv</span>,\n            <span class=\"supfact\">nsamples</span>);\n    }\n    for (<span class=\"supfact\">ch_0</span> = <span class=\"supfact\">xch_base</span>;\n         <span class=\"supfact\">ch_0</span> < <span class=\"supfact\">s</span>->nchannels;\n         ++<span class=\"supfact\">ch_0</span>) {\n      <span class=\"supfact\">src_spkr</span> =\n          map_prm_ch_to_spkr(<span class=\"supfact\">s</span>, <span class=\"supfact\">ch_0</span>);\n      if (<span class=\"supfact\">src_spkr</span> < Number)\n        return Number;\n      for (spkra = Number; spkra < <span class=\"supfact\">s</span>->xxch_mask_nbits;\n           ++spkra) {\n        if ((((unsigned int)\n                  <span class=\"supfact\">s</span>->xxch_dmix_mask[<span class=\"supfact\">ch_0</span> -\n                                                    <span class=\"supfact\">xch_base</span>] >>\n              spkra) &\n             Number) != Number) {\n          <span class=\"supfact\">v3</span> = <span class=\"supfact\">coeff_ptr</span>++;\n          <span class=\"supfact\">coeff</span> =\n              mul16(*<span class=\"supfact\">v3</span>, <span class=\"supfact\">scale_inv</span>);\n          if (<span class=\"supfact\">coeff</span>)\n            <span class=\"supfact\">s</span>->dcadsp->dmix_sub(\n                <span class=\"supfact\">s</span>->output_samples[spkra],\n                <span class=\"supfact\">s</span>->output_samples[<span class=\"supfact\">src_spkr</span>],\n                <span class=\"supfact\">coeff</span>, <span class=\"supfact\">nsamples</span>);\n        }\n      }\n    }\n  }\n  if ((<span class=\"supfact\">s</span>->ext_audio_mask & Number) == Number) {\n    if (<span class=\"supfact\">s</span>->sumdiff_front &&\n            <span class=\"supfact\">s</span>->audio_mode > Number ||\n        <span class=\"supfact\">s</span>->audio_mode == Number)\n      <span class=\"supfact\">s</span>->fixed_dsp->butterflies_fixed(\n          <span class=\"supfact\">s</span>->output_samples[Number],\n          <span class=\"supfact\">s</span>->output_samples[Number], <span class=\"supfact\">nsamples</span>);\n    if (<span class=\"supfact\">s</span>->sumdiff_surround &&\n        <span class=\"supfact\">s</span>->audio_mode > Number)\n      <span class=\"supfact\">s</span>->fixed_dsp->butterflies_fixed(\n          <span class=\"supfact\">s</span>->output_samples[Number],\n          <span class=\"supfact\">s</span>->output_samples[Number], <span class=\"supfact\">nsamples</span>);\n  }\n  if (<span class=\"supfact\">s</span>->request_mask != <span class=\"supfact\">s</span>->ch_mask)\n    ff_dca_downmix_to_stereo_fixed(<span class=\"supfact\">s</span>->dcadsp,\n                                   <span class=\"supfact\">s</span>->output_samples,\n                                   <span class=\"supfact\">s</span>->prim_dmix_coeff,\n                                   (unsigned int)<span class=\"supfact\">nsamples</span>,\n                                   (unsigned int)<span class=\"supfact\">s</span>->ch_mask);\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">avctx</span>->channels;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">samples</span> =\n        <span class=\"supfact\">s</span>\n            ->output_samples[<span class=\"supfact\">s</span>->ch_remap[<span class=\"supfact\">i</span>]];\n    <span class=\"supfact\">plane</span> =\n        (int32_t *)<span class=\"supfact\">frame</span>->extended_data[<span class=\"supfact\">i</span>];\n    for (<span class=\"supfact\">n</span> = Number;\n         <span class=\"supfact\">n</span> < <span class=\"supfact\">nsamples</span>; ++<span class=\"supfact\">n</span>)\n      <span class=\"supfact\">plane</span>[<span class=\"supfact\">n</span>] =\n          clip23(<span class=\"supfact\">samples</span>[<span class=\"supfact\">n</span>]) << Number;\n  }\n  return Number;\n}", "var": [{"name": "a1", "type": "AVFilterLink_0 *", "pred_name": "inlink", "ref_name": "s", "ref_type": "DCACoreDecoder_0 *"}, {"name": "a2", "type": "AVFrame_0 *", "pred_name": "in", "ref_name": "frame", "ref_type": "AVFrame_0 *"}, {"name": "v3", "type": "int64_t", "pred_name": "v3", "ref_name": "v3", "ref_type": "int32_t *"}, {"name": "v4", "type": "AVFrame_0 *", "pred_name": "ina", "ref_name": "plane", "ref_type": "int32_t *"}, {"name": "v5", "type": "AVFilterLink_0 *", "pred_name": "inlinka", "ref_name": "samples", "ref_type": "int32_t *"}, {"name": "v6", "type": "int", "pred_name": "__unk__", "ref_name": "coeff", "ref_type": "int32_t"}, {"name": "v7", "type": "int", "pred_name": "__unk__", "ref_name": "src_spkr", "ref_type": "int"}, {"name": "v8", "type": "int", "pred_name": "__unk__", "ref_name": "xch_base", "ref_type": "int"}, {"name": "v9", "type": "int", "pred_name": "__unk__", "ref_name": "scale_inv", "ref_type": "int"}, {"name": "v10", "type": "int", "pred_name": "ret", "ref_name": "nsamples", "ref_type": "int"}, {"name": "v13", "type": "AVFrame_0 *", "pred_name": "out", "ref_name": "avctx", "ref_type": "AVCodecContext_0 *"}, {"name": "v14", "type": "AVFilterLink_0 *", "pred_name": "outlink", "ref_name": "coeff_ptr", "ref_type": "int *"}, {"name": "j", "type": "int", "pred_name": "ch_0", "ref_name": "ch_0", "ref_type": "int"}, {"name": "m", "type": "int", "pred_name": "i", "ref_name": "n", "ref_type": "int"}, {"name": "l", "type": "int", "pred_name": "p", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/149e4ea1577ba793a614bde738a648d1c420d0a5d2d48fc5bdcea9ae5c205195", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Source/CMakeFiles/CMakeLib.dir/cmInstallTargetGenerator.cxx.o", "objdump": "", "code_s": "_QWORD *__fastcall __gnu_cxx\n    __normal_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>> const *,\n                      std vector<std __cxx11 basic_string<\n                          char, std char_traits<char>, std allocator<char>>>>\n    __normal_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>> *>(\n        _QWORD *<span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  _QWORD *<span class=\"supfact\">result</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)__gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n                           base(<span class=\"supfact\">a2</span>);\n  <span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>;\n  *<span class=\"supfact\">a1</span> = <span class=\"supfact\">v2</span>;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "_QWORD *__fastcall __gnu_cxx\n    __normal_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>> const *,\n                      std vector<std __cxx11 basic_string<\n                          char, std char_traits<char>, std allocator<char>>>>\n    __normal_iterator<std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>> *>(\n        _QWORD *<span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  _QWORD *<span class=\"supfact\">result</span>;\n  <span class=\"supfact\">v2</span> = *(_QWORD *)__gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n                           base(<span class=\"supfact\">a2</span>);\n  <span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>;\n  *<span class=\"supfact\">a1</span> = <span class=\"supfact\">v2</span>;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "_QWORD *", "pred_name": "a1", "ref_name": "a1", "ref_type": "_QWORD *"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "v2", "type": "__int64", "pred_name": "v2", "ref_name": "v2", "ref_type": "__int64"}, {"name": "result", "type": "_QWORD *", "pred_name": "result", "ref_name": "result", "ref_type": "_QWORD *"}], "body_in_train": true}, {"repo_owner": "jtanx", "repo_name": "libclipboard", "path": "jtanx/libclipboard/a5bb405315a8c227b400ae53e138e8a073501fc810add8d462a26e6d2a667d6c", "path_in_repo": "jtanx/libclipboard/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "0000000000000000 <_ZNSt6vectorIPN7testing8internal15ExpectationBaseESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  14:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n  18:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  1c:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  20:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n  24:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  28:\t48 89 c7             \tmov    %rax,%rdi\n  2b:\te8 00 00 00 00       \tcallq  30 <_ZNSt6vectorIPN7testing8internal15ExpectationBaseESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_+0x30>\n  30:\tc9                   \tleaveq \n  31:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<testing internal ExpectationBase *>\n_S_relocate(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n            __int64 <span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>) {\n  return std vector<testing internal ExpectationBase *> _S_do_relocate(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>,\n      <span class=\"supfact\">a4</span>);\n}", "code_t": "std vector<testing internal ExpectationBase *> pointer __cdecl std\n    vector<testing internal ExpectationBase *>\n    _S_relocate(std vector<testing internal ExpectationBase *> pointer\n                    <span class=\"supfact\">__first</span>,\n                std vector<testing internal ExpectationBase *> pointer\n                    <span class=\"supfact\">__last</span>,\n                std vector<testing internal ExpectationBase *> pointer\n                    <span class=\"supfact\">__result</span>,\n                std vector<testing internal ExpectationBase *> _Tp_alloc_type\n                    *<span class=\"supfact\">__alloc</span>) {\n  std true_type v4;\n  return std vector<testing internal ExpectationBase *> _S_do_relocate(\n      <span class=\"supfact\">__first</span>, <span class=\"supfact\">__last</span>, <span class=\"supfact\">__result</span>,\n      <span class=\"supfact\">__alloc</span>, v4);\n}", "var": [{"name": "a1", "type": "std::vector<nlohmann::basic_json<std::map,std::vector,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool,long int,long unsigned int,double,std::allocator,nlohmann::adl_serializer>>::pointer", "pred_name": "__first", "ref_name": "__first", "ref_type": "std::vector<testing::internal::ExpectationBase*>::pointer"}, {"name": "a2", "type": "std::vector<nlohmann::basic_json<std::map,std::vector,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool,long int,long unsigned int,double,std::allocator,nlohmann::adl_serializer>>::pointer", "pred_name": "__last", "ref_name": "__last", "ref_type": "std::vector<testing::internal::ExpectationBase*>::pointer"}, {"name": "a3", "type": "std::vector<nlohmann::basic_json<std::map,std::vector,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool,long int,long unsigned int,double,std::allocator,nlohmann::adl_serializer>>::pointer", "pred_name": "__result", "ref_name": "__result", "ref_type": "std::vector<testing::internal::ExpectationBase*>::pointer"}, {"name": "a4", "type": "std::vector<nlohmann::basic_json<std::map,std::vector,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,bool,long int,long unsigned int,double,std::allocator,nlohmann::adl_serializer>>::_Tp_alloc_type *", "pred_name": "__alloc", "ref_name": "__alloc", "ref_type": "std::vector<testing::internal::ExpectationBase*>::_Tp_alloc_type *"}], "body_in_train": true}, {"repo_owner": "PLEASE-EXCUSE-MY-DOPE-ASS-SWAG", "repo_name": "OHBot", "path": "PLEASE-EXCUSE-MY-DOPE-ASS-SWAG/OHBot/15aca905b501e38c682f9bb9e11fe52759e6eb1ec67bc5617903d75db1d6419d", "path_in_repo": "PLEASE-EXCUSE-MY-DOPE-ASS-SWAG/OHBot/bncsutil/src/bncsutil/libbncsutil.so", "objdump": "000000000000bfe9 <cm_stack_peek>:\n    bfe9:\t55                   \tpush   %rbp\n    bfea:\t48 89 e5             \tmov    %rsp,%rbp\n    bfed:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    bff1:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    bff6:\t74 0d                \tje     c005 <cm_stack_peek+0x1c>\n    bff8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    bffc:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    c000:\t48 85 c0             \ttest   %rax,%rax\n    c003:\t75 07                \tjne    c00c <cm_stack_peek+0x23>\n    c005:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    c00a:\teb 0b                \tjmp    c017 <cm_stack_peek+0x2e>\n    c00c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    c010:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    c014:\t48 8b 00             \tmov    (%rax),%rax\n    c017:\t5d                   \tpop    %rbp\n    c018:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cm_stack_peek(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">a1</span> && *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    <span class=\"supfact\">result</span> = **(_QWORD **)(<span class=\"supfact\">a1</span> + Number);\n  else\n    <span class=\"supfact\">result</span> = Number L;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void *__cdecl cm_stack_peek(cm_stack_t <span class=\"supfact\">stack</span>) {\n  void *<span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">stack</span> && <span class=\"supfact\">stack</span>->top)\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">stack</span>->top->value;\n  else\n    <span class=\"supfact\">result</span> = Number L;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "vector *", "pred_name": "v", "ref_name": "stack", "ref_type": "cm_stack_t"}, {"name": "result", "type": "void *", "pred_name": "result", "ref_name": "result", "ref_type": "void *"}], "body_in_train": false}, {"repo_owner": "VARoDeK", "repo_name": "rtems-libbsd", "path": "VARoDeK/rtems-libbsd/10a9b98ac110a163e7e4334685f0a5ad0591ea115bd730d5d91bf346f4e8cadd", "path_in_repo": "VARoDeK/rtems-libbsd/freebsd-org/contrib/dma/spool.o", "objdump": "00000000000008fc <load_queue>:\n 8fc:\t55                   \tpush   %rbp\n 8fd:\t48 89 e5             \tmov    %rsp,%rbp\n 900:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n 907:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n 90e:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 915:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n 91c:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n 923:\t00 \n 924:\t48 c7 40 10 00 00 00 \tmovq   $0x0,0x10(%rax)\n 92b:\t00 \n 92c:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n 933:\t00 \n 934:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n 93b:\t00 \n 93c:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n 943:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n 94a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 951 <load_queue+0x55>\n 951:\t48 89 c7             \tmov    %rax,%rdi\n 954:\te8 00 00 00 00       \tcallq  959 <load_queue+0x5d>\n 959:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 95d:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 962:\t0f 85 96 01 00 00    \tjne    afe <load_queue+0x202>\n 968:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 96d:\tbf 42 00 00 00       \tmov    $0x42,%edi\n 972:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 977:\te8 00 00 00 00       \tcallq  97c <load_queue+0x80>\n 97c:\t48 c7 85 48 ff ff ff \tmovq   $0x0,-0xb8(%rbp)\n 983:\t00 00 00 00 \n 987:\t48 c7 85 40 ff ff ff \tmovq   $0x0,-0xc0(%rbp)\n 98e:\t00 00 00 00 \n 992:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 996:\t0f b6 40 13          \tmovzbl 0x13(%rax),%eax\n 99a:\t3c 51                \tcmp    $0x51,%al\n 99c:\t74 05                \tje     9a3 <load_queue+0xa7>\n 99e:\te9 5b 01 00 00       \tjmpq   afe <load_queue+0x202>\n 9a3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 9a7:\t48 83 c0 13          \tadd    $0x13,%rax\n 9ab:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n 9af:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 9b6 <load_queue+0xba>\n 9b6:\t48 8d 85 48 ff ff ff \tlea    -0xb8(%rbp),%rax\n 9bd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 9c2:\t48 89 c7             \tmov    %rax,%rdi\n 9c5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 9ca:\te8 00 00 00 00       \tcallq  9cf <load_queue+0xd3>\n 9cf:\t85 c0                \ttest   %eax,%eax\n 9d1:\t0f 88 55 01 00 00    \tjs     b2c <load_queue+0x230>\n 9d7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 9db:\t48 83 c0 13          \tadd    $0x13,%rax\n 9df:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n 9e3:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 9ea <load_queue+0xee>\n 9ea:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n 9f1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 9f6:\t48 89 c7             \tmov    %rax,%rdi\n 9f9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 9fe:\te8 00 00 00 00       \tcallq  a03 <load_queue+0x107>\n a03:\t85 c0                \ttest   %eax,%eax\n a05:\t0f 88 24 01 00 00    \tjs     b2f <load_queue+0x233>\n a0b:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n a12:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n a19:\t48 89 d6             \tmov    %rdx,%rsi\n a1c:\t48 89 c7             \tmov    %rax,%rdi\n a1f:\te8 00 00 00 00       \tcallq  a24 <load_queue+0x128>\n a24:\t85 c0                \ttest   %eax,%eax\n a26:\t75 71                \tjne    a99 <load_queue+0x19d>\n a28:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n a2e:\t25 00 f0 00 00       \tand    $0xf000,%eax\n a33:\t3d 00 80 00 00       \tcmp    $0x8000,%eax\n a38:\t74 0d                \tje     a47 <load_queue+0x14b>\n a3a:\te8 00 00 00 00       \tcallq  a3f <load_queue+0x143>\n a3f:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n a45:\teb 59                \tjmp    aa0 <load_queue+0x1a4>\n a47:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n a4e:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n a55:\t48 89 d6             \tmov    %rdx,%rsi\n a58:\t48 89 c7             \tmov    %rax,%rdi\n a5b:\te8 00 00 00 00       \tcallq  a60 <load_queue+0x164>\n a60:\t85 c0                \ttest   %eax,%eax\n a62:\t75 38                \tjne    a9c <load_queue+0x1a0>\n a64:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n a6b:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n a72:\t48 89 d6             \tmov    %rdx,%rsi\n a75:\t48 89 c7             \tmov    %rax,%rdi\n a78:\te8 6a f8 ff ff       \tcallq  2e7 <readqueuef>\n a7d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n a81:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n a86:\t74 17                \tje     a9f <load_queue+0x1a3>\n a88:\t48 8b 95 40 ff ff ff \tmov    -0xc0(%rbp),%rdx\n a8f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n a93:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n a97:\teb 65                \tjmp    afe <load_queue+0x202>\n a99:\t90                   \tnop\n a9a:\teb 04                \tjmp    aa0 <load_queue+0x1a4>\n a9c:\t90                   \tnop\n a9d:\teb 01                \tjmp    aa0 <load_queue+0x1a4>\n a9f:\t90                   \tnop\n aa0:\t48 8b 95 40 ff ff ff \tmov    -0xc0(%rbp),%rdx\n aa7:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n aae:\t48 89 d1             \tmov    %rdx,%rcx\n ab1:\t48 89 c2             \tmov    %rax,%rdx\n ab4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n ab9:\tbf 06 00 00 00       \tmov    $0x6,%edi\n abe:\tb8 00 00 00 00       \tmov    $0x0,%eax\n ac3:\te8 00 00 00 00       \tcallq  ac8 <load_queue+0x1cc>\n ac8:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n acf:\t48 85 c0             \ttest   %rax,%rax\n ad2:\t74 0f                \tje     ae3 <load_queue+0x1e7>\n ad4:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n adb:\t48 89 c7             \tmov    %rax,%rdi\n ade:\te8 00 00 00 00       \tcallq  ae3 <load_queue+0x1e7>\n ae3:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n aea:\t48 85 c0             \ttest   %rax,%rax\n aed:\t74 0f                \tje     afe <load_queue+0x202>\n aef:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n af6:\t48 89 c7             \tmov    %rax,%rdi\n af9:\te8 00 00 00 00       \tcallq  afe <load_queue+0x202>\n afe:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n b02:\t48 89 c7             \tmov    %rax,%rdi\n b05:\te8 00 00 00 00       \tcallq  b0a <load_queue+0x20e>\n b0a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n b0e:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n b13:\t0f 85 63 fe ff ff    \tjne    97c <load_queue+0x80>\n b19:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n b1d:\t48 89 c7             \tmov    %rax,%rdi\n b20:\te8 00 00 00 00       \tcallq  b25 <load_queue+0x229>\n b25:\tb8 00 00 00 00       \tmov    $0x0,%eax\n b2a:\teb 09                \tjmp    b35 <load_queue+0x239>\n b2c:\t90                   \tnop\n b2d:\teb 01                \tjmp    b30 <load_queue+0x234>\n b2f:\t90                   \tnop\n b30:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n b35:\tc9                   \tleaveq \n b36:\tc3                   \tretq   ", "code_s": "__int64 __fastcall load_queue(_QWORD *<span class=\"supfact\">a1</span>) {\n  char *<span class=\"supfact\">file</span>;\n  char *<span class=\"supfact\">ptr</span>;\n  struct stat <span class=\"supfact\">v4</span>;\n  _QWORD *<span class=\"supfact\">v5</span>;\n  struct dirent *<span class=\"supfact\">v6</span>;\n  DIR *<span class=\"supfact\">dirp</span>;\n  *<span class=\"supfact\">a1</span> = Number L;\n  <span class=\"supfact\">a1</span>[Number] = Number L;\n  <span class=\"supfact\">a1</span>[Number] = Number L;\n  <span class=\"supfact\">a1</span>[Number] = Number L;\n  <span class=\"supfact\">a1</span>[Number] = Number L;\n  *<span class=\"supfact\">a1</span> = Number L;\n  <span class=\"supfact\">dirp</span> = opendir(*((const char **)&config + Number));\n  if (!<span class=\"supfact\">dirp</span>)\n    err(Number, String);\n  while (Number) {\n    do {\n      <span class=\"supfact\">v6</span> = readdir(<span class=\"supfact\">dirp</span>);\n      if (!<span class=\"supfact\">v6</span>) {\n        closedir(<span class=\"supfact\">dirp</span>);\n        return Number L;\n      }\n      <span class=\"supfact\">ptr</span> = Number L;\n      <span class=\"supfact\">file</span> = Number L;\n    } while (<span class=\"supfact\">v6</span>->d_name[Number] != Number);\n    if (asprintf(&<span class=\"supfact\">ptr</span>, String,\n                 *((const char **)&config + Number),\n                 &<span class=\"supfact\">v6</span>->d_name[Number]) < Number ||\n        asprintf(&<span class=\"supfact\">file</span>, String,\n                 *((const char **)&config + Number),\n                 &<span class=\"supfact\">v6</span>->d_name[Number]) < Number) {\n      return Number;\n    }\n    if (stat(<span class=\"supfact\">ptr</span>, &<span class=\"supfact\">v4</span>))\n      goto LABEL_12;\n    if ((<span class=\"supfact\">v4</span>.st_mode & Number) != Number) {\n      *_errno_location() = Number;\n      goto LABEL_12;\n    }\n    if (stat(<span class=\"supfact\">file</span>, &<span class=\"supfact\">v4</span>) ||\n        (<span class=\"supfact\">v5</span> = readqueuef((__int64)<span class=\"supfact\">a1</span>,\n                                         <span class=\"supfact\">ptr</span>)) == Number L) {\n    LABEL_12:\n      syslog(Number, String, <span class=\"supfact\">ptr</span>, <span class=\"supfact\">file</span>);\n      if (<span class=\"supfact\">ptr</span>)\n        free(<span class=\"supfact\">ptr</span>);\n      if (<span class=\"supfact\">file</span>)\n        free(<span class=\"supfact\">file</span>);\n    } else {\n      <span class=\"supfact\">v5</span>[Number] = <span class=\"supfact\">file</span>;\n    }\n  }\n}", "code_t": "int __cdecl load_queue(<span class=\"supfact\">queue</span> *<span class=\"supfact\">queue</span>) {\n  char *<span class=\"supfact\">mailfn</span>;\n  char *<span class=\"supfact\">queuefn</span>;\n  stat <span class=\"supfact\">sb</span>;\n  qitem *<span class=\"supfact\">it</span>;\n  dirent *<span class=\"supfact\">de</span>;\n  DIR *<span class=\"supfact\">spooldir</span>;\n  <span class=\"supfact\">queue</span>-><span class=\"supfact\">queue</span>.lh_first = Number L;\n  <span class=\"supfact\">queue</span>->id = Number L;\n  <span class=\"supfact\">queue</span>->mailf = Number L;\n  <span class=\"supfact\">queue</span>->tmpf = Number L;\n  <span class=\"supfact\">queue</span>->sender = Number L;\n  <span class=\"supfact\">queue</span>-><span class=\"supfact\">queue</span>.lh_first = Number L;\n  <span class=\"supfact\">spooldir</span> = opendir(*((const char **)&config_0 + Number));\n  if (!<span class=\"supfact\">spooldir</span>)\n    err(Number, String);\n  while (Number) {\n    do {\n      <span class=\"supfact\">de</span> = readdir(<span class=\"supfact\">spooldir</span>);\n      if (!<span class=\"supfact\">de</span>) {\n        closedir(<span class=\"supfact\">spooldir</span>);\n        return Number;\n      }\n      <span class=\"supfact\">queuefn</span> = Number L;\n      <span class=\"supfact\">mailfn</span> = Number L;\n    } while (<span class=\"supfact\">de</span>->d_name[Number] != Number);\n    if (asprintf(&<span class=\"supfact\">queuefn</span>, String,\n                 *((const char **)&config_0 + Number),\n                 &<span class=\"supfact\">de</span>->d_name[Number]) < Number ||\n        asprintf(&<span class=\"supfact\">mailfn</span>, String,\n                 *((const char **)&config_0 + Number),\n                 &<span class=\"supfact\">de</span>->d_name[Number]) < Number) {\n      return Number;\n    }\n    if (stat_0(<span class=\"supfact\">queuefn</span>, &<span class=\"supfact\">sb</span>))\n      goto skip_item;\n    if ((<span class=\"supfact\">sb</span>.st_mode & Number) != Number) {\n      *_errno_location() = Number;\n      goto skip_item;\n    }\n    if (stat_0(<span class=\"supfact\">mailfn</span>, &<span class=\"supfact\">sb</span>) ||\n        (<span class=\"supfact\">it</span> = readqueuef(\n             <span class=\"supfact\">queue</span>, <span class=\"supfact\">queuefn</span>)) == Number L) {\n    skip_item:\n      syslog(Number, String, <span class=\"supfact\">queuefn</span>, <span class=\"supfact\">mailfn</span>);\n      if (<span class=\"supfact\">queuefn</span>)\n        free(<span class=\"supfact\">queuefn</span>);\n      if (<span class=\"supfact\">mailfn</span>)\n        free(<span class=\"supfact\">mailfn</span>);\n    } else {\n      <span class=\"supfact\">it</span>-><span class=\"supfact\">mailfn</span> = <span class=\"supfact\">mailfn</span>;\n    }\n  }\n}", "var": [{"name": "a1", "type": "cmsysProcess *", "pred_name": "cp", "ref_name": "queue", "ref_type": "queue *"}, {"name": "file", "type": "char *", "pred_name": "__unk__", "ref_name": "mailfn", "ref_type": "char *"}, {"name": "ptr", "type": "char *", "pred_name": "__unk__", "ref_name": "queuefn", "ref_type": "char *"}, {"name": "v4", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "__unk__", "ref_name": "sb", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}, {"name": "v5", "type": "dirent *", "pred_name": "__unk__", "ref_name": "it", "ref_type": "qitem *"}, {"name": "v6", "type": "DIR *", "pred_name": "__unk__", "ref_name": "de", "ref_type": "dirent *"}, {"name": "dirp", "type": "DIR *", "pred_name": "__unk__", "ref_name": "spooldir", "ref_type": "DIR *"}], "body_in_train": false}, {"repo_owner": "ridgek", "repo_name": "9base", "path": "ridgek/9base/1d8e9d8b4177feb2c356955eedf824010d0afe8262cd35d31f11cb8173a26ca4", "path_in_repo": "ridgek/9base/lib9/_p9dir.o", "objdump": "0000000000000000 <disksize>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n   b:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n   f:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  13:\tba 10 00 00 00       \tmov    $0x10,%edx\n  18:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  1d:\t48 89 c7             \tmov    %rax,%rdi\n  20:\te8 00 00 00 00       \tcallq  25 <disksize+0x25>\n  25:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  2c:\t00 \n  2d:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  34:\t00 \n  35:\t48 8d 55 f8          \tlea    -0x8(%rbp),%rdx\n  39:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  3c:\tbe 72 12 08 80       \tmov    $0x80081272,%esi\n  41:\t89 c7                \tmov    %eax,%edi\n  43:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  48:\te8 00 00 00 00       \tcallq  4d <disksize+0x4d>\n  4d:\t85 c0                \ttest   %eax,%eax\n  4f:\t78 06                \tjs     57 <disksize+0x57>\n  51:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  55:\teb 6a                \tjmp    c1 <disksize+0xc1>\n  57:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  5b:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  5e:\tbe 60 12 00 00       \tmov    $0x1260,%esi\n  63:\t89 c7                \tmov    %eax,%edi\n  65:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  6a:\te8 00 00 00 00       \tcallq  6f <disksize+0x6f>\n  6f:\t85 c0                \ttest   %eax,%eax\n  71:\t78 0a                \tjs     7d <disksize+0x7d>\n  73:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  77:\t48 c1 e0 09          \tshl    $0x9,%rax\n  7b:\teb 44                \tjmp    c1 <disksize+0xc1>\n  7d:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  81:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  84:\tbe 01 03 00 00       \tmov    $0x301,%esi\n  89:\t89 c7                \tmov    %eax,%edi\n  8b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  90:\te8 00 00 00 00       \tcallq  95 <disksize+0x95>\n  95:\t85 c0                \ttest   %eax,%eax\n  97:\t78 23                \tjs     bc <disksize+0xbc>\n  99:\t0f b6 45 e0          \tmovzbl -0x20(%rbp),%eax\n  9d:\t0f b6 d0             \tmovzbl %al,%edx\n  a0:\t0f b6 45 e1          \tmovzbl -0x1f(%rbp),%eax\n  a4:\t0f b6 c0             \tmovzbl %al,%eax\n  a7:\t48 0f af d0          \timul   %rax,%rdx\n  ab:\t0f b7 45 e2          \tmovzwl -0x1e(%rbp),%eax\n  af:\t0f b7 c0             \tmovzwl %ax,%eax\n  b2:\t48 0f af c2          \timul   %rdx,%rax\n  b6:\t48 c1 e0 09          \tshl    $0x9,%rax\n  ba:\teb 05                \tjmp    c1 <disksize+0xc1>\n  bc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  c1:\tc9                   \tleaveq \n  c2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall disksize(int <span class=\"supfact\">a1</span>) {\n  __int16 <span class=\"supfact\">s</span>[Number];\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">v3</span> = Number L;\n  <span class=\"supfact\">v4</span> = Number L;\n  if (ioctl(<span class=\"supfact\">a1</span>, Number, &<span class=\"supfact\">v4</span>) >= Number)\n    return <span class=\"supfact\">v4</span>;\n  if (ioctl(<span class=\"supfact\">a1</span>, Number, &<span class=\"supfact\">v3</span>) >= Number)\n    return <span class=\"supfact\">v3</span> << Number;\n  if (ioctl(<span class=\"supfact\">a1</span>, Number, <span class=\"supfact\">s</span>) < Number)\n    return Number L;\n  return (HIBYTE(<span class=\"supfact\">s</span>[Number]) *\n          (unsigned __int64)LOBYTE(<span class=\"supfact\">s</span>[Number]) *\n          (unsigned __int16)<span class=\"supfact\">s</span>[Number])\n         << Number;\n}", "code_t": "vlong __cdecl disksize(int <span class=\"supfact\">fd</span>, stat *st) {\n  hd_geometry <span class=\"supfact\">geo</span>;\n  __int64 <span class=\"supfact\">l</span>;\n  u64int <span class=\"supfact\">u64</span>;\n  memset(&<span class=\"supfact\">geo</span>, Number, sizeof(<span class=\"supfact\">geo</span>));\n  <span class=\"supfact\">l</span> = Number L;\n  <span class=\"supfact\">u64</span> = Number L;\n  if (ioctl(<span class=\"supfact\">fd</span>, Number, &<span class=\"supfact\">u64</span>) >= Number)\n    return <span class=\"supfact\">u64</span>;\n  if (ioctl(<span class=\"supfact\">fd</span>, Number, &<span class=\"supfact\">l</span>) >= Number)\n    return <span class=\"supfact\">l</span> << Number;\n  if (ioctl(<span class=\"supfact\">fd</span>, Number, &<span class=\"supfact\">geo</span>) < Number)\n    return Number L;\n  return (<span class=\"supfact\">geo</span>.sectors *\n          (unsigned __int64)<span class=\"supfact\">geo</span>.heads *\n          <span class=\"supfact\">geo</span>.cylinders)\n         << Number;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "fd", "ref_name": "fd", "ref_type": "int"}, {"name": "s", "type": "struct ifreq { $EC3FB77B1F5CBB3C6B6AB4B4CE5B261D ifr_ifrn; $3766CEB1D20AE6FB37CD7F05C4AF9C4E ifr_ifru; }", "pred_name": "ifr", "ref_name": "geo", "ref_type": "struct hd_geometry { unsigned __int8 heads; unsigned __int8 sectors; unsigned __int16 cylinders; PADDING (4); unsigned __int64 start; }"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "l", "ref_type": "__int64"}, {"name": "v4", "type": "s64", "pred_name": "size", "ref_name": "u64", "ref_type": "u64int"}], "body_in_train": false}, {"repo_owner": "filipeaguiargeissler", "repo_name": "faultinjector_sw_based", "path": "filipeaguiargeissler/faultinjector_sw_based/a41be5a8e3c0fadbb6f6dd73e6ee24660391216081ac2d2e4bf136a58f2747c4", "path_in_repo": "filipeaguiargeissler/faultinjector_sw_based/qemu-1.6.0/hw/i2c/core.o", "objdump": "0000000000000943 <do_qemu_init_i2c_slave_register_types>:\n 943:\t55                   \tpush   %rbp\n 944:\t48 89 e5             \tmov    %rsp,%rbp\n 947:\t48 83 ec 10          \tsub    $0x10,%rsp\n 94b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 952:\t00 00 \n 954:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 958:\t31 c0                \txor    %eax,%eax\n 95a:\tbe 03 00 00 00       \tmov    $0x3,%esi\n 95f:\t48 8d 3d 97 ff ff ff \tlea    -0x69(%rip),%rdi        # 8fd <i2c_slave_register_types>\n 966:\te8 00 00 00 00       \tcallq  96b <do_qemu_init_i2c_slave_register_types+0x28>\n 96b:\t90                   \tnop\n 96c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 970:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 977:\t00 00 \n 979:\t74 05                \tje     980 <do_qemu_init_i2c_slave_register_types+0x3d>\n 97b:\te8 00 00 00 00       \tcallq  980 <do_qemu_init_i2c_slave_register_types+0x3d>\n 980:\tc9                   \tleaveq \n 981:\tc3                   \tretq   \n", "code_s": "unsigned __int64 do_qemu_init_i2c_slave_register_types() {\n  unsigned __int64 <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = __readfsqword(Number);\n  register_module_init(i2c_slave_register_types, Number L);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v1</span>;\n}", "code_t": "void __cdecl do_qemu_init_i2c_slave_register_types() {\n  register_module_init(i2c_slave_register_types, Number L);\n}", "var": [{"name": "v1", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "andrey-utkin", "repo_name": "ffmpeg", "path": "andrey-utkin/ffmpeg/229320588dd0908ad8633fb9a6fc02f6213015120fafbcc8d2dc4a85ff7ad4e7", "path_in_repo": "andrey-utkin/ffmpeg//libavcodec/mpegpicture.o", "objdump": "0000000000000250 <ff_mpeg_framesize_alloc>:\n     250:\t48 83 ec 38          \tsub    $0x38,%rsp\n     254:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n     259:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n     25e:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n     263:\t89 4c 24 04          \tmov    %ecx,0x4(%rsp)\n     267:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n     26b:\t99                   \tcltd   \n     26c:\t89 d0                \tmov    %edx,%eax\n     26e:\t33 44 24 04          \txor    0x4(%rsp),%eax\n     272:\t29 d0                \tsub    %edx,%eax\n     274:\t83 c0 5f             \tadd    $0x5f,%eax\n     277:\t83 e0 e0             \tand    $0xffffffe0,%eax\n     27a:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n     27e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     283:\t48 8b 80 10 03 00 00 \tmov    0x310(%rax),%rax\n     28a:\t48 85 c0             \ttest   %rax,%rax\n     28d:\t75 15                \tjne    2a4 <ff_mpeg_framesize_alloc+0x54>\n     28f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     294:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     298:\t8b 40 18             \tmov    0x18(%rax),%eax\n     29b:\t25 80 00 00 00       \tand    $0x80,%eax\n     2a0:\t85 c0                \ttest   %eax,%eax\n     2a2:\t74 0a                \tje     2ae <ff_mpeg_framesize_alloc+0x5e>\n     2a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     2a9:\te9 23 01 00 00       \tjmpq   3d1 <ff_mpeg_framesize_alloc+0x181>\n     2ae:\t83 7c 24 04 17       \tcmpl   $0x17,0x4(%rsp)\n     2b3:\t7f 26                \tjg     2db <ff_mpeg_framesize_alloc+0x8b>\n     2b5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     2ba:\tba 00 00 00 00       \tmov    $0x0,%edx\n     2bf:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     2c4:\t48 89 c7             \tmov    %rax,%rdi\n     2c7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     2cc:\te8 00 00 00 00       \tcallq  2d1 <ff_mpeg_framesize_alloc+0x81>\n     2d1:\tb8 b0 be a8 ba       \tmov    $0xbaa8beb0,%eax\n     2d6:\te9 f6 00 00 00       \tjmpq   3d1 <ff_mpeg_framesize_alloc+0x181>\n     2db:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n     2df:\t48 98                \tcltq   \n     2e1:\tbe 10 01 00 00       \tmov    $0x110,%esi\n     2e6:\t48 89 c7             \tmov    %rax,%rdi\n     2e9:\te8 12 fd ff ff       \tcallq  0 <av_mallocz_array>\n     2ee:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n     2f3:\t48 89 02             \tmov    %rax,(%rdx)\n     2f6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     2fb:\t48 8b 00             \tmov    (%rax),%rax\n     2fe:\t48 85 c0             \ttest   %rax,%rax\n     301:\t75 21                \tjne    324 <ff_mpeg_framesize_alloc+0xd4>\n     303:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     308:\tba 00 00 00 00       \tmov    $0x0,%edx\n     30d:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     312:\t48 89 c7             \tmov    %rax,%rdi\n     315:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     31a:\te8 00 00 00 00       \tcallq  31f <ff_mpeg_framesize_alloc+0xcf>\n     31f:\te9 9b 00 00 00       \tjmpq   3bf <ff_mpeg_framesize_alloc+0x16f>\n     324:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n     328:\t48 98                \tcltq   \n     32a:\tbe 80 00 00 00       \tmov    $0x80,%esi\n     32f:\t48 89 c7             \tmov    %rax,%rdi\n     332:\te8 c9 fc ff ff       \tcallq  0 <av_mallocz_array>\n     337:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n     33c:\t48 89 42 50          \tmov    %rax,0x50(%rdx)\n     340:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     345:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     349:\t48 85 c0             \ttest   %rax,%rax\n     34c:\t75 1e                \tjne    36c <ff_mpeg_framesize_alloc+0x11c>\n     34e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     353:\tba 00 00 00 00       \tmov    $0x0,%edx\n     358:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     35d:\t48 89 c7             \tmov    %rax,%rdi\n     360:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     365:\te8 00 00 00 00       \tcallq  36a <ff_mpeg_framesize_alloc+0x11a>\n     36a:\teb 53                \tjmp    3bf <ff_mpeg_framesize_alloc+0x16f>\n     36c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     371:\t48 8b 50 50          \tmov    0x50(%rax),%rdx\n     375:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     37a:\t48 89 50 70          \tmov    %rdx,0x70(%rax)\n     37e:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     383:\t48 8b 50 50          \tmov    0x50(%rax),%rdx\n     387:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     38c:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n     390:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     395:\t48 8b 50 50          \tmov    0x50(%rax),%rdx\n     399:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     39e:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n     3a2:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     3a7:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     3ab:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n     3af:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     3b4:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     3b8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     3bd:\teb 12                \tjmp    3d1 <ff_mpeg_framesize_alloc+0x181>\n     3bf:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     3c4:\t48 89 c7             \tmov    %rax,%rdi\n     3c7:\te8 00 00 00 00       \tcallq  3cc <ff_mpeg_framesize_alloc+0x17c>\n     3cc:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n     3d1:\t48 83 c4 38          \tadd    $0x38,%rsp\n     3d5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ff_mpeg_framesize_alloc(__int64 <span class=\"supfact\">a1</span>,\n                                           __int64 <span class=\"supfact\">a2</span>,\n                                           __int64 *<span class=\"supfact\">a3</span>,\n                                           int <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  signed int <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = (abs32(<span class=\"supfact\">a4</span>) + Number) & Number;\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) ||\n      (*(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) &\n       Number) != Number)\n    return Number L;\n  if (<span class=\"supfact\">a4</span> > Number) {\n    *<span class=\"supfact\">a3</span> = av_mallocz_array(<span class=\"supfact\">v6</span>, Number);\n    if (*<span class=\"supfact\">a3</span> &&\n        (*(_QWORD *)(<span class=\"supfact\">a2</span> + Number) =\n             av_mallocz_array(<span class=\"supfact\">v6</span>, Number)) != Number L) {\n      *(_QWORD *)(<span class=\"supfact\">a2</span> + Number) =\n          *(_QWORD *)(<span class=\"supfact\">a2</span> + Number);\n      <span class=\"supfact\">a3</span>[Number] = *(_QWORD *)(<span class=\"supfact\">a2</span> + Number);\n      <span class=\"supfact\">a3</span>[Number] = *(_QWORD *)(<span class=\"supfact\">a2</span> + Number);\n      <span class=\"supfact\">a3</span>[Number] =\n          *(_QWORD *)(<span class=\"supfact\">a2</span> + Number) + Number L;\n      <span class=\"supfact\">result</span> = Number L;\n    } else {\n      av_log(<span class=\"supfact\">a1</span>, Number L, String);\n      av_freep(<span class=\"supfact\">a3</span>);\n      <span class=\"supfact\">result</span> = Number L;\n    }\n  } else {\n    av_log(<span class=\"supfact\">a1</span>, Number L, String);\n    <span class=\"supfact\">result</span> = Number L;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl ff_mpeg_framesize_alloc(AVCodecContext_0 *<span class=\"supfact\">avctx</span>,\n                                    MotionEstContext_0 *<span class=\"supfact\">me</span>,\n                                    ScratchpadContext_0 *<span class=\"supfact\">sc</span>,\n                                    int <span class=\"supfact\">linesize</span>) {\n  int <span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">alloc_size</span>;\n  <span class=\"supfact\">alloc_size</span> =\n      (abs32(<span class=\"supfact\">linesize</span>) + Number) & Number;\n  if (<span class=\"supfact\">avctx</span>->hwaccel ||\n      (<span class=\"supfact\">avctx</span>->codec->capabilities & Number) != Number)\n    return Number;\n  if (<span class=\"supfact\">linesize</span> > Number) {\n    <span class=\"supfact\">sc</span>->edge_emu_buffer =\n        (uint8_t *)av_mallocz_array(<span class=\"supfact\">alloc_size</span>, Number);\n    if (<span class=\"supfact\">sc</span>->edge_emu_buffer &&\n        (<span class=\"supfact\">me</span>->scratchpad = (uint8_t *)av_mallocz_array(\n             <span class=\"supfact\">alloc_size</span>, Number)) != Number L) {\n      <span class=\"supfact\">me</span>->temp = <span class=\"supfact\">me</span>->scratchpad;\n      <span class=\"supfact\">sc</span>->rd_scratchpad = <span class=\"supfact\">me</span>->scratchpad;\n      <span class=\"supfact\">sc</span>->b_scratchpad = <span class=\"supfact\">me</span>->scratchpad;\n      <span class=\"supfact\">sc</span>->obmc_scratchpad =\n          <span class=\"supfact\">me</span>->scratchpad + Number;\n      <span class=\"supfact\">result</span> = Number;\n    } else {\n      av_log(<span class=\"supfact\">avctx</span>, Number L, String);\n      av_freep(<span class=\"supfact\">sc</span>);\n      <span class=\"supfact\">result</span> = Number;\n    }\n  } else {\n    av_log(<span class=\"supfact\">avctx</span>, Number L, String);\n    <span class=\"supfact\">result</span> = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "AVCodecContext_0 *", "pred_name": "avctx", "ref_name": "avctx", "ref_type": "AVCodecContext_0 *"}, {"name": "a2", "type": "MotionEstContext_0 *", "pred_name": "me", "ref_name": "me", "ref_type": "MotionEstContext_0 *"}, {"name": "a3", "type": "ScratchpadContext_0 *", "pred_name": "sc", "ref_name": "sc", "ref_type": "ScratchpadContext_0 *"}, {"name": "a4", "type": "int", "pred_name": "linesize", "ref_name": "linesize", "ref_type": "int"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "v6", "type": "int", "pred_name": "alloc_size", "ref_name": "alloc_size", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "webosose", "repo_name": "gst-libav", "path": "webosose/gst-libav/9b96d071de0297e8a3d5c08deb8cbb31687e021fc6ec2d8fc7f1ebdd8aee810a", "path_in_repo": "webosose/gst-libav/gst-libs/ext/libav/libavcodec/h264_parser.o", "objdump": "0000000000000691 <get_ue_golomb_31>:\n     691:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n     696:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     69b:\t8b 40 10             \tmov    0x10(%rax),%eax\n     69e:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n     6a2:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     6a7:\t48 8b 00             \tmov    (%rax),%rax\n     6aa:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n     6ae:\tc1 ea 03             \tshr    $0x3,%edx\n     6b1:\t89 d2                \tmov    %edx,%edx\n     6b3:\t48 01 d0             \tadd    %rdx,%rax\n     6b6:\t8b 00                \tmov    (%rax),%eax\n     6b8:\t89 44 24 f0          \tmov    %eax,-0x10(%rsp)\n     6bc:\t8b 44 24 f0          \tmov    -0x10(%rsp),%eax\n     6c0:\tc1 e0 08             \tshl    $0x8,%eax\n     6c3:\t0f b7 d0             \tmovzwl %ax,%edx\n     6c6:\t8b 44 24 f0          \tmov    -0x10(%rsp),%eax\n     6ca:\tc1 e8 08             \tshr    $0x8,%eax\n     6cd:\t0f b6 c0             \tmovzbl %al,%eax\n     6d0:\t09 d0                \tor     %edx,%eax\n     6d2:\tc1 e0 10             \tshl    $0x10,%eax\n     6d5:\t89 c1                \tmov    %eax,%ecx\n     6d7:\t8b 44 24 f0          \tmov    -0x10(%rsp),%eax\n     6db:\tc1 e8 10             \tshr    $0x10,%eax\n     6de:\tc1 e0 08             \tshl    $0x8,%eax\n     6e1:\t0f b7 c0             \tmovzwl %ax,%eax\n     6e4:\t8b 54 24 f0          \tmov    -0x10(%rsp),%edx\n     6e8:\tc1 ea 18             \tshr    $0x18,%edx\n     6eb:\t09 d0                \tor     %edx,%eax\n     6ed:\t09 c1                \tor     %eax,%ecx\n     6ef:\t89 ca                \tmov    %ecx,%edx\n     6f1:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n     6f5:\t83 e0 07             \tand    $0x7,%eax\n     6f8:\t89 c1                \tmov    %eax,%ecx\n     6fa:\td3 e2                \tshl    %cl,%edx\n     6fc:\t89 d0                \tmov    %edx,%eax\n     6fe:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n     702:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n     706:\t89 44 24 f4          \tmov    %eax,-0xc(%rsp)\n     70a:\tc1 6c 24 f4 17       \tshrl   $0x17,-0xc(%rsp)\n     70f:\t8b 44 24 f4          \tmov    -0xc(%rsp),%eax\n     713:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n     71a:\t0f b6 c0             \tmovzbl %al,%eax\n     71d:\t01 44 24 fc          \tadd    %eax,-0x4(%rsp)\n     721:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n     725:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n     72a:\t89 50 10             \tmov    %edx,0x10(%rax)\n     72d:\t8b 44 24 f4          \tmov    -0xc(%rsp),%eax\n     731:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n     738:\t0f b6 c0             \tmovzbl %al,%eax\n     73b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall get_ue_golomb_31(__int64 <span class=\"supfact\">a1</span>) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v2</span> = *(_DWORD *)((<span class=\"supfact\">v4</span> >> Number) +\n                                   *(_QWORD *)<span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v3</span> =\n      (unsigned int)((HIBYTE(<span class=\"supfact\">v2</span>) |\n                      (unsigned __int16)(HIWORD(<span class=\"supfact\">v2</span>) << Number) |\n                      (((unsigned __int16)((_WORD)<span class=\"supfact\">v2</span>\n                                           << Number) |\n                        BYTE1(<span class=\"supfact\">v2</span>))\n                       << Number))\n                     << (<span class=\"supfact\">v4</span> & Number)) >>\n      Number;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n      *((unsigned __int8 *)&ff_golomb_vlc_len + <span class=\"supfact\">v3</span>) +\n      <span class=\"supfact\">v4</span>;\n  return *((unsigned __int8 *)&ff_ue_golomb_vlc_code + <span class=\"supfact\">v3</span>);\n}", "code_t": "int __cdecl get_ue_golomb_31(GetBitContext_0 *<span class=\"supfact\">gb</span>) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">buf</span>;\n  unsigned int <span class=\"supfact\">re_index</span>;\n  <span class=\"supfact\">re_index</span> = <span class=\"supfact\">gb</span>->index;\n  <span class=\"supfact\">v2</span> = *(_DWORD *)&<span class=\"supfact\">gb</span>\n                            ->buffer[<span class=\"supfact\">re_index</span> >> Number];\n  <span class=\"supfact\">buf</span> =\n      (unsigned int)((HIBYTE(<span class=\"supfact\">v2</span>) |\n                      (unsigned __int16)(HIWORD(<span class=\"supfact\">v2</span>) << Number) |\n                      (((unsigned __int16)((_WORD)<span class=\"supfact\">v2</span>\n                                           << Number) |\n                        BYTE1(<span class=\"supfact\">v2</span>))\n                       << Number))\n                     << (<span class=\"supfact\">re_index</span> & Number)) >>\n      Number;\n  <span class=\"supfact\">gb</span>->index =\n      *((unsigned __int8 *)&ff_golomb_vlc_len + <span class=\"supfact\">buf</span>) +\n      <span class=\"supfact\">re_index</span>;\n  return *((unsigned __int8 *)&ff_ue_golomb_vlc_code + <span class=\"supfact\">buf</span>);\n}", "var": [{"name": "a1", "type": "GetBitContext_0 *", "pred_name": "gb", "ref_name": "gb", "ref_type": "GetBitContext_0 *"}, {"name": "v2", "type": "unsigned int", "pred_name": "v2", "ref_name": "v2", "ref_type": "unsigned int"}, {"name": "v3", "type": "unsigned int", "pred_name": "buf", "ref_name": "buf", "ref_type": "unsigned int"}, {"name": "v4", "type": "unsigned int", "pred_name": "re_index", "ref_name": "re_index", "ref_type": "unsigned int"}], "body_in_train": true}, {"repo_owner": "sipwise", "repo_name": "kamailio", "path": "sipwise/kamailio/c70d161be453f8e5ea1deb4bdc651b06d18e91973a2f9d654b58f61538e7f916", "path_in_repo": "sipwise/kamailio/src/modules/pv/pv.o", "objdump": "0000000000000000 <mod_init>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t41 57                \tpush   %r15\n       6:\t41 56                \tpush   %r14\n       8:\t41 55                \tpush   %r13\n       a:\t41 54                \tpush   %r12\n       c:\t53                   \tpush   %rbx\n       d:\t48 83 ec 18          \tsub    $0x18,%rsp\n      11:\te8 32 58 00 00       \tcallq  5848 <pv_init_rpc>\n      16:\t85 c0                \ttest   %eax,%eax\n      18:\t0f 84 fb 02 00 00    \tje     319 <mod_init+0x319>\n      1e:\tbe 02 00 00 00       \tmov    $0x2,%esi\n      23:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2a <mod_init+0x2a>\n      2a:\te8 00 00 00 00       \tcallq  2f <mod_init+0x2f>\n      2f:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n      32:\t0f 8c da 02 00 00    \tjl     312 <mod_init+0x312>\n      38:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3f <mod_init+0x3f>\n      3f:\t8b 00                \tmov    (%rax),%eax\n      41:\t85 c0                \ttest   %eax,%eax\n      43:\t0f 85 c9 02 00 00    \tjne    312 <mod_init+0x312>\n      49:\tc7 45 cc ff ff ff ff \tmovl   $0xffffffff,-0x34(%rbp)\n      50:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 57 <mod_init+0x57>\n      57:\t8b 00                \tmov    (%rax),%eax\n      59:\t8d 50 01             \tlea    0x1(%rax),%edx\n      5c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 63 <mod_init+0x63>\n      63:\t89 10                \tmov    %edx,(%rax)\n      65:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6c <mod_init+0x6c>\n      6c:\t8b 00                \tmov    (%rax),%eax\n      6e:\t85 c0                \ttest   %eax,%eax\n      70:\t0f 95 c0             \tsetne  %al\n      73:\t0f b6 c0             \tmovzbl %al,%eax\n      76:\t48 85 c0             \ttest   %rax,%rax\n      79:\t0f 84 46 01 00 00    \tje     1c5 <mod_init+0x1c5>\n      7f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 86 <mod_init+0x86>\n      86:\t8b 00                \tmov    (%rax),%eax\n      88:\t85 c0                \ttest   %eax,%eax\n      8a:\t0f 95 c0             \tsetne  %al\n      8d:\t0f b6 c0             \tmovzbl %al,%eax\n      90:\t48 85 c0             \ttest   %rax,%rax\n      93:\t74 0a                \tje     9f <mod_init+0x9f>\n      95:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n      98:\t89 c7                \tmov    %eax,%edi\n      9a:\te8 00 00 00 00       \tcallq  9f <mod_init+0x9f>\n      9f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a6 <mod_init+0xa6>\n      a6:\t48 8b 00             \tmov    (%rax),%rax\n      a9:\t48 85 c0             \ttest   %rax,%rax\n      ac:\t0f 95 c0             \tsetne  %al\n      af:\t0f b6 c0             \tmovzbl %al,%eax\n      b2:\t48 85 c0             \ttest   %rax,%rax\n      b5:\t0f 84 84 00 00 00    \tje     13f <mod_init+0x13f>\n      bb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c2 <mod_init+0xc2>\n      c2:\t48 8b 00             \tmov    (%rax),%rax\n      c5:\t48 8b 18             \tmov    (%rax),%rbx\n      c8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cf <mod_init+0xcf>\n      cf:\t48 8b 00             \tmov    (%rax),%rax\n      d2:\t44 8b 68 08          \tmov    0x8(%rax),%r13d\n      d6:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n      d9:\t8d 50 05             \tlea    0x5(%rax),%edx\n      dc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e3 <mod_init+0xe3>\n      e3:\t48 63 d2             \tmovslq %edx,%rdx\n      e6:\t48 c1 e2 04          \tshl    $0x4,%rdx\n      ea:\t48 01 d0             \tadd    %rdx,%rax\n      ed:\t4c 8b 20             \tmov    (%rax),%r12\n      f0:\te8 00 00 00 00       \tcallq  f5 <mod_init+0xf5>\n      f5:\t89 c1                \tmov    %eax,%ecx\n      f7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # fe <mod_init+0xfe>\n      fe:\t8b 10                \tmov    (%rax),%edx\n     100:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 107 <mod_init+0x107>\n     107:\t48 8b 00             \tmov    (%rax),%rax\n     10a:\t48 83 ec 08          \tsub    $0x8,%rsp\n     10e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 115 <mod_init+0x115>\n     115:\t56                   \tpush   %rsi\n     116:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 11d <mod_init+0x11d>\n     11d:\t56                   \tpush   %rsi\n     11e:\t53                   \tpush   %rbx\n     11f:\t45 89 e9             \tmov    %r13d,%r9d\n     122:\t4d 89 e0             \tmov    %r12,%r8\n     125:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 12c <mod_init+0x12c>\n     12c:\t48 89 c7             \tmov    %rax,%rdi\n     12f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     134:\te8 00 00 00 00       \tcallq  139 <mod_init+0x139>\n     139:\t48 83 c4 20          \tadd    $0x20,%rsp\n     13d:\teb 62                \tjmp    1a1 <mod_init+0x1a1>\n     13f:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     142:\t8d 50 05             \tlea    0x5(%rax),%edx\n     145:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 14c <mod_init+0x14c>\n     14c:\t48 63 d2             \tmovslq %edx,%rdx\n     14f:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     153:\t48 01 d0             \tadd    %rdx,%rax\n     156:\t48 8b 18             \tmov    (%rax),%rbx\n     159:\te8 00 00 00 00       \tcallq  15e <mod_init+0x15e>\n     15e:\t89 c1                \tmov    %eax,%ecx\n     160:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 167 <mod_init+0x167>\n     167:\t8b 10                \tmov    (%rax),%edx\n     169:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 170 <mod_init+0x170>\n     170:\t48 8b 00             \tmov    (%rax),%rax\n     173:\t48 83 ec 08          \tsub    $0x8,%rsp\n     177:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 17e <mod_init+0x17e>\n     17e:\t56                   \tpush   %rsi\n     17f:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 186 <mod_init+0x186>\n     186:\t49 89 d8             \tmov    %rbx,%r8\n     189:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 190 <mod_init+0x190>\n     190:\t48 89 c7             \tmov    %rax,%rdi\n     193:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     198:\te8 00 00 00 00       \tcallq  19d <mod_init+0x19d>\n     19d:\t48 83 c4 10          \tadd    $0x10,%rsp\n     1a1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a8 <mod_init+0x1a8>\n     1a8:\t8b 00                \tmov    (%rax),%eax\n     1aa:\t85 c0                \ttest   %eax,%eax\n     1ac:\t0f 95 c0             \tsetne  %al\n     1af:\t0f b6 c0             \tmovzbl %al,%eax\n     1b2:\t48 85 c0             \ttest   %rax,%rax\n     1b5:\t0f 84 42 01 00 00    \tje     2fd <mod_init+0x2fd>\n     1bb:\te8 00 00 00 00       \tcallq  1c0 <mod_init+0x1c0>\n     1c0:\te9 38 01 00 00       \tjmpq   2fd <mod_init+0x2fd>\n     1c5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1cc <mod_init+0x1cc>\n     1cc:\t48 8b 00             \tmov    (%rax),%rax\n     1cf:\t48 85 c0             \ttest   %rax,%rax\n     1d2:\t0f 95 c0             \tsetne  %al\n     1d5:\t0f b6 c0             \tmovzbl %al,%eax\n     1d8:\t48 85 c0             \ttest   %rax,%rax\n     1db:\t0f 84 a4 00 00 00    \tje     285 <mod_init+0x285>\n     1e1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e8 <mod_init+0x1e8>\n     1e8:\t4c 8b 28             \tmov    (%rax),%r13\n     1eb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1f2 <mod_init+0x1f2>\n     1f2:\t48 8b 00             \tmov    (%rax),%rax\n     1f5:\t4c 8b 38             \tmov    (%rax),%r15\n     1f8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ff <mod_init+0x1ff>\n     1ff:\t48 8b 00             \tmov    (%rax),%rax\n     202:\t44 8b 60 08          \tmov    0x8(%rax),%r12d\n     206:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     209:\t8d 50 05             \tlea    0x5(%rax),%edx\n     20c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 213 <mod_init+0x213>\n     213:\t48 63 d2             \tmovslq %edx,%rdx\n     216:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     21a:\t48 01 d0             \tadd    %rdx,%rax\n     21d:\t48 8b 18             \tmov    (%rax),%rbx\n     220:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     223:\t8d 50 05             \tlea    0x5(%rax),%edx\n     226:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 22d <mod_init+0x22d>\n     22d:\t48 63 d2             \tmovslq %edx,%rdx\n     230:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     234:\t48 01 d0             \tadd    %rdx,%rax\n     237:\t48 83 c0 08          \tadd    $0x8,%rax\n     23b:\t44 8b 30             \tmov    (%rax),%r14d\n     23e:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     243:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 24a <mod_init+0x24a>\n     24a:\te8 00 00 00 00       \tcallq  24f <mod_init+0x24f>\n     24f:\t44 09 f0             \tor     %r14d,%eax\n     252:\t48 83 ec 08          \tsub    $0x8,%rsp\n     256:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 25d <mod_init+0x25d>\n     25d:\t52                   \tpush   %rdx\n     25e:\t4c 8d 0d 00 00 00 00 \tlea    0x0(%rip),%r9        # 265 <mod_init+0x265>\n     265:\t4d 89 f8             \tmov    %r15,%r8\n     268:\t44 89 e1             \tmov    %r12d,%ecx\n     26b:\t48 89 da             \tmov    %rbx,%rdx\n     26e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 275 <mod_init+0x275>\n     275:\t89 c7                \tmov    %eax,%edi\n     277:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     27c:\t41 ff d5             \tcallq  *%r13\n     27f:\t48 83 c4 10          \tadd    $0x10,%rsp\n     283:\teb 78                \tjmp    2fd <mod_init+0x2fd>\n     285:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 28c <mod_init+0x28c>\n     28c:\t4c 8b 20             \tmov    (%rax),%r12\n     28f:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     292:\t8d 50 05             \tlea    0x5(%rax),%edx\n     295:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 29c <mod_init+0x29c>\n     29c:\t48 63 d2             \tmovslq %edx,%rdx\n     29f:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     2a3:\t48 01 d0             \tadd    %rdx,%rax\n     2a6:\t48 8b 18             \tmov    (%rax),%rbx\n     2a9:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     2ac:\t8d 50 05             \tlea    0x5(%rax),%edx\n     2af:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b6 <mod_init+0x2b6>\n     2b6:\t48 63 d2             \tmovslq %edx,%rdx\n     2b9:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     2bd:\t48 01 d0             \tadd    %rdx,%rax\n     2c0:\t48 83 c0 08          \tadd    $0x8,%rax\n     2c4:\t44 8b 28             \tmov    (%rax),%r13d\n     2c7:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     2cc:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2d3 <mod_init+0x2d3>\n     2d3:\te8 00 00 00 00       \tcallq  2d8 <mod_init+0x2d8>\n     2d8:\t44 09 e8             \tor     %r13d,%eax\n     2db:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 2e2 <mod_init+0x2e2>\n     2e2:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 2e9 <mod_init+0x2e9>\n     2e9:\t48 89 da             \tmov    %rbx,%rdx\n     2ec:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2f3 <mod_init+0x2f3>\n     2f3:\t89 c7                \tmov    %eax,%edi\n     2f5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     2fa:\t41 ff d4             \tcallq  *%r12\n     2fd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 304 <mod_init+0x304>\n     304:\t8b 00                \tmov    (%rax),%eax\n     306:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     309:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 310 <mod_init+0x310>\n     310:\t89 10                \tmov    %edx,(%rax)\n     312:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     317:\teb 0a                \tjmp    323 <mod_init+0x323>\n     319:\te8 00 00 00 00       \tcallq  31e <mod_init+0x31e>\n     31e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     323:\t48 8d 65 d8          \tlea    -0x28(%rbp),%rsp\n     327:\t5b                   \tpop    %rbx\n     328:\t41 5c                \tpop    %r12\n     32a:\t41 5d                \tpop    %r13\n     32c:\t41 5e                \tpop    %r14\n     32e:\t41 5f                \tpop    %r15\n     330:\t5d                   \tpop    %rbp\n     331:\tc3                   \tretq   ", "code_s": "__int64 mod_init() {\n  const char *v0;\n  int v1;\n  const char *v2;\n  unsigned int v3;\n  const char *v4;\n  unsigned int v5;\n  void (*v6)(_QWORD, const char *, ...);\n  __int64 <span class=\"supfact\">v7</span>;\n  unsigned int v8;\n  __int64 v9;\n  int <span class=\"supfact\">v10</span>;\n  unsigned int v11;\n  void (*v12)(_QWORD, const char *, ...);\n  const char *v13;\n  int v14;\n  unsigned int v15;\n  __int64 result;\n  if ((unsigned int)pv_init_rpc()) {\n    if ((int)get_debug_level(&off_63F0, Number L) >= Number && !dprint_crit) {\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color(Number);\n        if (log_prefix_val) {\n          v0 = (const char *)*log_prefix_val;\n          v1 = *((_DWORD *)log_prefix_val + Number);\n          v2 = (const char *)*((_QWORD *)&log_level_info + Number);\n          v3 = my_pid();\n          fprintf(stderr, String, process_no, v3, v2, v1, v0, String, String);\n        } else {\n          v4 = (const char *)*((_QWORD *)&log_level_info + Number);\n          v5 = my_pid();\n          fprintf(stderr, String, process_no, v5, v4, String, String);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v6 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        <span class=\"supfact\">v7</span> = *log_prefix_val;\n        v8 = *((_DWORD *)log_prefix_val + Number);\n        v9 = *((_QWORD *)&log_level_info + Number);\n        <span class=\"supfact\">v10</span> = *((_DWORD *)&log_level_info + Number);\n        v11 = get_debug_facility(&off_63F0, Number L);\n        v6(<span class=\"supfact\">v10</span> | v11, String, v9, v8, <span class=\"supfact\">v7</span>,\n           String, String);\n      } else {\n        v12 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v13 = (const char *)*((_QWORD *)&log_level_info + Number);\n        v14 = *((_DWORD *)&log_level_info + Number);\n        v15 = get_debug_facility(&off_63F0, Number L);\n        v12(v14 | v15, String, v13, String, String);\n      }\n      --dprint_crit;\n    }\n    result = Number;\n  } else {\n    pv_init_sbranch();\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl mod_init() {\n  const char *v0;\n  int v1;\n  const char *v2;\n  unsigned int v3;\n  const char *v4;\n  unsigned int v5;\n  void (*v6)(_QWORD, const char *, ...);\n  __int64 <span class=\"supfact\">v7</span>;\n  unsigned int v8;\n  __int64 v9;\n  int <span class=\"supfact\">v10</span>;\n  unsigned int v11;\n  void (*v12)(_QWORD, const char *, ...);\n  const char *v13;\n  int v14;\n  unsigned int v15;\n  int result;\n  if (pv_init_rpc()) {\n    if ((int)get_debug_level(&off_63F0, Number L) >= Number && !dprint_crit) {\n      ++dprint_crit;\n      if (log_stderr) {\n        if (log_color)\n          dprint_color(Number);\n        if (log_prefix_val) {\n          v0 = (const char *)*log_prefix_val;\n          v1 = *((_DWORD *)log_prefix_val + Number);\n          v2 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n          v3 = my_pid();\n          fprintf(stderr, String, process_no, v3, v2, v1, v0, String, String);\n        } else {\n          v4 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n          v5 = my_pid();\n          fprintf(stderr, String, process_no, v5, v4, String, String);\n        }\n        if (log_color)\n          dprint_color_reset();\n      } else if (log_prefix_val) {\n        v6 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        <span class=\"supfact\">v7</span> = *log_prefix_val;\n        v8 = *((_DWORD *)log_prefix_val + Number);\n        v9 = *((_QWORD *)&log_level_info_0 + Number);\n        <span class=\"supfact\">v10</span> = *((_DWORD *)&log_level_info_0 + Number);\n        v11 = get_debug_facility(&off_63F0, Number L);\n        v6(<span class=\"supfact\">v10</span> | v11, String, v9, v8, <span class=\"supfact\">v7</span>,\n           String, String);\n      } else {\n        v12 = (void (*)(_QWORD, const char *, ...))km_log_func;\n        v13 = (const char *)*((_QWORD *)&log_level_info_0 + Number);\n        v14 = *((_DWORD *)&log_level_info_0 + Number);\n        v15 = get_debug_facility(&off_63F0, Number L);\n        v12(v14 | v15, String, v13, String, String);\n      }\n      --dprint_crit;\n    }\n    result = Number;\n  } else {\n    pv_init_sbranch();\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v7", "type": "__int64", "pred_name": "v7", "ref_name": "v7", "ref_type": "__int64"}, {"name": "v10", "type": "int", "pred_name": "v10", "ref_name": "v10", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "barryo", "repo_name": "attila-libss7", "path": "barryo/attila-libss7/642a6b563422edd4f670aa84aa8f66f849a75ebe0a6f4e28e951c7d5bd192b92", "path_in_repo": "barryo/attila-libss7/trunk/parser_debug", "objdump": "000000000040c2b8 <calling_party_cat_dump>:\n  40c2b8:\t55                   \tpush   %rbp\n  40c2b9:\t48 89 e5             \tmov    %rsp,%rbp\n  40c2bc:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40c2c0:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40c2c4:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  40c2c7:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  40c2cb:\t89 4d e0             \tmov    %ecx,-0x20(%rbp)\n  40c2ce:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40c2d2:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c2d5:\t0f b6 c0             \tmovzbl %al,%eax\n  40c2d8:\t83 f8 0f             \tcmp    $0xf,%eax\n  40c2db:\t0f 87 b7 00 00 00    \tja     40c398 <calling_party_cat_dump+0xe0>\n  40c2e1:\t89 c0                \tmov    %eax,%eax\n  40c2e3:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n  40c2ea:\t00 \n  40c2eb:\t48 8d 05 b6 07 01 00 \tlea    0x107b6(%rip),%rax        # 41caa8 <_IO_stdin_used+0x2aa8>\n  40c2f2:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n  40c2f5:\t48 98                \tcltq   \n  40c2f7:\t48 8d 15 aa 07 01 00 \tlea    0x107aa(%rip),%rdx        # 41caa8 <_IO_stdin_used+0x2aa8>\n  40c2fe:\t48 01 d0             \tadd    %rdx,%rax\n  40c301:\tff e0                \tjmpq   *%rax\n  40c303:\t48 8d 05 b7 06 01 00 \tlea    0x106b7(%rip),%rax        # 41c9c1 <_IO_stdin_used+0x29c1>\n  40c30a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c30e:\te9 91 00 00 00       \tjmpq   40c3a4 <calling_party_cat_dump+0xec>\n  40c313:\t48 8d 05 b8 06 01 00 \tlea    0x106b8(%rip),%rax        # 41c9d2 <_IO_stdin_used+0x29d2>\n  40c31a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c31e:\te9 81 00 00 00       \tjmpq   40c3a4 <calling_party_cat_dump+0xec>\n  40c323:\t48 8d 05 ba 06 01 00 \tlea    0x106ba(%rip),%rax        # 41c9e4 <_IO_stdin_used+0x29e4>\n  40c32a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c32e:\teb 74                \tjmp    40c3a4 <calling_party_cat_dump+0xec>\n  40c330:\t48 8d 05 be 06 01 00 \tlea    0x106be(%rip),%rax        # 41c9f5 <_IO_stdin_used+0x29f5>\n  40c337:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c33b:\teb 67                \tjmp    40c3a4 <calling_party_cat_dump+0xec>\n  40c33d:\t48 8d 05 c3 06 01 00 \tlea    0x106c3(%rip),%rax        # 41ca07 <_IO_stdin_used+0x2a07>\n  40c344:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c348:\teb 5a                \tjmp    40c3a4 <calling_party_cat_dump+0xec>\n  40c34a:\t48 8d 05 c8 06 01 00 \tlea    0x106c8(%rip),%rax        # 41ca19 <_IO_stdin_used+0x2a19>\n  40c351:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c355:\teb 4d                \tjmp    40c3a4 <calling_party_cat_dump+0xec>\n  40c357:\t48 8d 05 c4 06 01 00 \tlea    0x106c4(%rip),%rax        # 41ca22 <_IO_stdin_used+0x2a22>\n  40c35e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c362:\teb 40                \tjmp    40c3a4 <calling_party_cat_dump+0xec>\n  40c364:\t48 8d 05 d5 06 01 00 \tlea    0x106d5(%rip),%rax        # 41ca40 <_IO_stdin_used+0x2a40>\n  40c36b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c36f:\teb 33                \tjmp    40c3a4 <calling_party_cat_dump+0xec>\n  40c371:\t48 8d 05 e9 06 01 00 \tlea    0x106e9(%rip),%rax        # 41ca61 <_IO_stdin_used+0x2a61>\n  40c378:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c37c:\teb 26                \tjmp    40c3a4 <calling_party_cat_dump+0xec>\n  40c37e:\t48 8d 05 f8 06 01 00 \tlea    0x106f8(%rip),%rax        # 41ca7d <_IO_stdin_used+0x2a7d>\n  40c385:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c389:\teb 19                \tjmp    40c3a4 <calling_party_cat_dump+0xec>\n  40c38b:\t48 8d 05 f5 06 01 00 \tlea    0x106f5(%rip),%rax        # 41ca87 <_IO_stdin_used+0x2a87>\n  40c392:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c396:\teb 0c                \tjmp    40c3a4 <calling_party_cat_dump+0xec>\n  40c398:\t48 8d 05 80 fd 00 00 \tlea    0xfd80(%rip),%rax        # 41c11f <_IO_stdin_used+0x211f>\n  40c39f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40c3a3:\t90                   \tnop\n  40c3a4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40c3a8:\t0f b6 00             \tmovzbl (%rax),%eax\n  40c3ab:\t0f b6 c8             \tmovzbl %al,%ecx\n  40c3ae:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  40c3b2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40c3b6:\t48 8d 35 d3 06 01 00 \tlea    0x106d3(%rip),%rsi        # 41ca90 <_IO_stdin_used+0x2a90>\n  40c3bd:\t48 89 c7             \tmov    %rax,%rdi\n  40c3c0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40c3c5:\te8 86 77 ff ff       \tcallq  403b50 <ss7_message>\n  40c3ca:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40c3cf:\tc9                   \tleaveq \n  40c3d0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall calling_party_cat_dump(__int64 <span class=\"supfact\">a1</span>,\n                                          __int64 <span class=\"supfact\">a2</span>,\n                                          _BYTE *<span class=\"supfact\">a3</span>,\n                                          __int64 <span class=\"supfact\">a4</span>,\n                                          __int64 <span class=\"supfact\">a5</span>,\n                                          __int64 <span class=\"supfact\">a6</span>) {\n  switch (*<span class=\"supfact\">a3</span>) {\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  default:\n    ss7_message(<span class=\"supfact\">a1</span>, String, (__int64)String,\n                (unsigned __int8)*<span class=\"supfact\">a3</span>, <span class=\"supfact\">a5</span>,\n                <span class=\"supfact\">a6</span>);\n    break;\n  }\n  return Number L;\n}", "code_t": "int __cdecl calling_party_cat_dump(<span class=\"supfact\">ss7</span> *<span class=\"supfact\">ss7</span>,\n                                   int <span class=\"supfact\">messagetype</span>,\n                                   unsigned __int8 *<span class=\"supfact\">parm</span>,\n                                   int <span class=\"supfact\">len</span>) {\n  switch (*<span class=\"supfact\">parm</span>) {\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  case Number:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  default:\n    ss7_message(<span class=\"supfact\">ss7</span>, String, String, *<span class=\"supfact\">parm</span>);\n    break;\n  }\n  return Number;\n}", "var": [{"name": "a1", "type": "ss7 *", "pred_name": "ss7", "ref_name": "ss7", "ref_type": "ss7 *"}, {"name": "a2", "type": "int", "pred_name": "messagetype", "ref_name": "messagetype", "ref_type": "int"}, {"name": "a3", "type": "unsigned __int8 *", "pred_name": "parm", "ref_name": "parm", "ref_type": "unsigned __int8 *"}, {"name": "a4", "type": "int", "pred_name": "len", "ref_name": "len", "ref_type": "int"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": true}, {"repo_owner": "wnoguchi", "repo_name": "hikari_denwa_asterisk", "path": "wnoguchi/hikari_denwa_asterisk/513dcb0a92eafe6237d3f1016fb0a9d8e0e0abaa48a3af0a523fb3d2c8d326f6", "path_in_repo": "wnoguchi/hikari_denwa_asterisk/asterisk-11.0.1/res/pjproject/pjnath/bin/pjturn-client-x86_64-unknown-linux-gnu", "objdump": "", "code_s": "__int64 __fastcall pj_pool_zalloc_8(__int64 <span class=\"supfact\">a1</span>,\n                                    __int64 <span class=\"supfact\">a2</span>) {\n  return pj_pool_calloc(<span class=\"supfact\">a1</span>, Number L, <span class=\"supfact\">a2</span>);\n}", "code_t": "void *__cdecl pj_pool_zalloc_8(pj_pool_t_0 *<span class=\"supfact\">pool</span>,\n                               pj_size_t <span class=\"supfact\">size</span>) {\n  return pj_pool_calloc(<span class=\"supfact\">pool</span>, Number, <span class=\"supfact\">size</span>);\n}", "var": [{"name": "a1", "type": "pj_pool_t_0 *", "pred_name": "pool", "ref_name": "pool", "ref_type": "pj_pool_t_0 *"}, {"name": "a2", "type": "pj_size_t", "pred_name": "size", "ref_name": "size", "ref_type": "pj_size_t"}], "body_in_train": true}, {"repo_owner": "AlexxNica", "repo_name": "linux_", "path": "AlexxNica/linux_/3576080cf2381b1da9a7faae944e51b30aceed4b0e96f2ea373a513dd6cf6e59", "path_in_repo": "AlexxNica/linux_//scripts/kconfig/zconf.tab.o", "objdump": "00000000000088f7 <expr_alloc_comp>:\n    88f7:\t48 83 ec 38          \tsub    $0x38,%rsp\n    88fb:\t89 7c 24 1c          \tmov    %edi,0x1c(%rsp)\n    88ff:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    8904:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    8909:\tbe 18 00 00 00       \tmov    $0x18,%esi\n    890e:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    8913:\te8 00 00 00 00       \tcallq  8918 <expr_alloc_comp+0x21>\n    8918:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n    891d:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    8922:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n    8926:\t89 10                \tmov    %edx,(%rax)\n    8928:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    892d:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    8932:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    8936:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    893b:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n    8940:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    8944:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    8949:\t48 83 c4 38          \tadd    $0x38,%rsp\n    894d:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall expr_alloc_comp(int <span class=\"supfact\">a1</span>,\n                                   __int64 <span class=\"supfact\">a2</span>,\n                                   __int64 <span class=\"supfact\">a3</span>) {\n  _QWORD *<span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = xcalloc(Number, Number);\n  *(_DWORD *)<span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">result</span>[Number] = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">result</span>[Number] = <span class=\"supfact\">a3</span>;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "expr *__cdecl expr_alloc_comp(expr_type <span class=\"supfact\">type</span>,\n                              symbol *<span class=\"supfact\">s1</span>,\n                              symbol *<span class=\"supfact\">s2</span>) {\n  expr *<span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = (expr *)xcalloc(Number, Number);\n  <span class=\"supfact\">result</span>-><span class=\"supfact\">type</span> = <span class=\"supfact\">type</span>;\n  <span class=\"supfact\">result</span>->left.expr = (expr *)<span class=\"supfact\">s1</span>;\n  <span class=\"supfact\">result</span>->right.expr = (expr *)<span class=\"supfact\">s2</span>;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "expr_type", "pred_name": "type", "ref_name": "type", "ref_type": "expr_type"}, {"name": "a2", "type": "symbol *", "pred_name": "s1", "ref_name": "s1", "ref_type": "symbol *"}, {"name": "a3", "type": "symbol *", "pred_name": "s2", "ref_name": "s2", "ref_type": "symbol *"}, {"name": "result", "type": "expr *", "pred_name": "result", "ref_name": "result", "ref_type": "expr *"}], "body_in_train": true}, {"repo_owner": "mconf", "repo_name": "ffmpeg", "path": "mconf/ffmpeg/0eeacbb4b63c24128c813dfd7aa0b744c8f075890fdee48bc76a4ca09badf6e1", "path_in_repo": "mconf/ffmpeg//libavcodec/mjpegenc.o", "objdump": "00000000000011b7 <ff_mjpeg_encode_dc>:\n    11b7:\t48 83 ec 30          \tsub    $0x30,%rsp\n    11bb:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    11c0:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n    11c4:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    11c9:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n    11cd:\t83 7c 24 14 00       \tcmpl   $0x0,0x14(%rsp)\n    11d2:\t75 30                \tjne    1204 <ff_mjpeg_encode_dc+0x4d>\n    11d4:\t48 8b 04 24          \tmov    (%rsp),%rax\n    11d8:\t0f b7 00             \tmovzwl (%rax),%eax\n    11db:\t0f b7 d0             \tmovzwl %ax,%edx\n    11de:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    11e3:\t0f b6 00             \tmovzbl (%rax),%eax\n    11e6:\t0f b6 c0             \tmovzbl %al,%eax\n    11e9:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n    11ee:\t48 81 c1 28 03 00 00 \tadd    $0x328,%rcx\n    11f5:\t89 c6                \tmov    %eax,%esi\n    11f7:\t48 89 cf             \tmov    %rcx,%rdi\n    11fa:\te8 c9 ee ff ff       \tcallq  c8 <put_bits>\n    11ff:\te9 92 00 00 00       \tjmpq   1296 <ff_mjpeg_encode_dc+0xdf>\n    1204:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    1208:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n    120c:\t83 7c 24 14 00       \tcmpl   $0x0,0x14(%rsp)\n    1211:\t79 09                \tjns    121c <ff_mjpeg_encode_dc+0x65>\n    1213:\tf7 5c 24 14          \tnegl   0x14(%rsp)\n    1217:\t83 6c 24 2c 01       \tsubl   $0x1,0x2c(%rsp)\n    121c:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n    1220:\t83 c8 01             \tor     $0x1,%eax\n    1223:\t0f bd c0             \tbsr    %eax,%eax\n    1226:\t83 f0 1f             \txor    $0x1f,%eax\n    1229:\tba 20 00 00 00       \tmov    $0x20,%edx\n    122e:\t29 c2                \tsub    %eax,%edx\n    1230:\t89 d0                \tmov    %edx,%eax\n    1232:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n    1236:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n    123a:\t48 98                \tcltq   \n    123c:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    1240:\t48 8b 04 24          \tmov    (%rsp),%rax\n    1244:\t48 01 d0             \tadd    %rdx,%rax\n    1247:\t0f b7 00             \tmovzwl (%rax),%eax\n    124a:\t0f b7 d0             \tmovzwl %ax,%edx\n    124d:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n    1251:\t48 63 c8             \tmovslq %eax,%rcx\n    1254:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1259:\t48 01 c8             \tadd    %rcx,%rax\n    125c:\t0f b6 00             \tmovzbl (%rax),%eax\n    125f:\t0f b6 c0             \tmovzbl %al,%eax\n    1262:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n    1267:\t48 81 c1 28 03 00 00 \tadd    $0x328,%rcx\n    126e:\t89 c6                \tmov    %eax,%esi\n    1270:\t48 89 cf             \tmov    %rcx,%rdi\n    1273:\te8 50 ee ff ff       \tcallq  c8 <put_bits>\n    1278:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    127d:\t48 8d 88 28 03 00 00 \tlea    0x328(%rax),%rcx\n    1284:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n    1288:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n    128c:\t89 c6                \tmov    %eax,%esi\n    128e:\t48 89 cf             \tmov    %rcx,%rdi\n    1291:\te8 05 ef ff ff       \tcallq  19b <put_sbits>\n    1296:\t90                   \tnop\n    1297:\t48 83 c4 30          \tadd    $0x30,%rsp\n    129b:\tc3                   \tretq   ", "code_s": "int *__fastcall ff_mjpeg_encode_dc(__int64 <span class=\"supfact\">a1</span>,\n                                   int <span class=\"supfact\">a2</span>,\n                                   unsigned __int8 *<span class=\"supfact\">a3</span>,\n                                   unsigned __int16 *<span class=\"supfact\">a4</span>) {\n  unsigned int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v6</span> = <span class=\"supfact\">a2</span>;\n  if (!<span class=\"supfact\">a2</span>)\n    return put_bits((int *)(<span class=\"supfact\">a1</span> + Number), *<span class=\"supfact\">a3</span>,\n                    *<span class=\"supfact\">a4</span>);\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">a2</span>;\n  if (<span class=\"supfact\">a2</span> < Number) {\n    <span class=\"supfact\">v6</span> = -<span class=\"supfact\">a2</span>;\n    <span class=\"supfact\">v8</span> = <span class=\"supfact\">a2</span> - Number;\n  }\n  _BitScanReverse(&<span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span> | Number);\n  <span class=\"supfact\">v7</span> = Number - (<span class=\"supfact\">v5</span> ^ Number);\n  put_bits((int *)(<span class=\"supfact\">a1</span> + Number),\n           <span class=\"supfact\">a3</span>[<span class=\"supfact\">v7</span>],\n           <span class=\"supfact\">a4</span>[<span class=\"supfact\">v7</span>]);\n  return put_sbits((int *)(<span class=\"supfact\">a1</span> + Number), <span class=\"supfact\">v7</span>,\n                   <span class=\"supfact\">v8</span>);\n}", "code_t": "void __cdecl ff_mjpeg_encode_dc(MpegEncContext_0 *<span class=\"supfact\">s</span>,\n                                int <span class=\"supfact\">val</span>,\n                                uint8_t *<span class=\"supfact\">huff_size</span>,\n                                uint16_t *<span class=\"supfact\">huff_code</span>) {\n  unsigned int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">vala</span>;\n  unsigned int <span class=\"supfact\">nbits</span>;\n  int32_t <span class=\"supfact\">mant</span>;\n  <span class=\"supfact\">vala</span> = <span class=\"supfact\">val</span>;\n  if (<span class=\"supfact\">val</span>) {\n    <span class=\"supfact\">mant</span> = <span class=\"supfact\">val</span>;\n    if (<span class=\"supfact\">val</span> < Number) {\n      <span class=\"supfact\">vala</span> = -<span class=\"supfact\">val</span>;\n      <span class=\"supfact\">mant</span> = <span class=\"supfact\">val</span> - Number;\n    }\n    _BitScanReverse(&<span class=\"supfact\">v4</span>, <span class=\"supfact\">vala</span> | Number);\n    <span class=\"supfact\">nbits</span> = Number - (<span class=\"supfact\">v4</span> ^ Number);\n    put_bits(&<span class=\"supfact\">s</span>->pb,\n             <span class=\"supfact\">huff_size</span>[<span class=\"supfact\">nbits</span>],\n             <span class=\"supfact\">huff_code</span>[<span class=\"supfact\">nbits</span>]);\n    put_sbits(&<span class=\"supfact\">s</span>->pb, <span class=\"supfact\">nbits</span>,\n              <span class=\"supfact\">mant</span>);\n  } else {\n    put_bits(&<span class=\"supfact\">s</span>->pb, *<span class=\"supfact\">huff_size</span>,\n             *<span class=\"supfact\">huff_code</span>);\n  }\n}", "var": [{"name": "a1", "type": "MpegEncContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "MpegEncContext_0 *"}, {"name": "a2", "type": "int", "pred_name": "val", "ref_name": "val", "ref_type": "int"}, {"name": "a3", "type": "uint8_t *", "pred_name": "huff_size", "ref_name": "huff_size", "ref_type": "uint8_t *"}, {"name": "a4", "type": "uint16_t *", "pred_name": "huff_code", "ref_name": "huff_code", "ref_type": "uint16_t *"}, {"name": "v5", "type": "unsigned int", "pred_name": "v4", "ref_name": "v4", "ref_type": "unsigned int"}, {"name": "v6", "type": "int", "pred_name": "vala", "ref_name": "vala", "ref_type": "int"}, {"name": "v7", "type": "unsigned int", "pred_name": "nbits", "ref_name": "nbits", "ref_type": "unsigned int"}, {"name": "v8", "type": "int32_t", "pred_name": "mant", "ref_name": "mant", "ref_type": "int32_t"}], "body_in_train": true}, {"repo_owner": "the0ry", "repo_name": "gfiber-gflt100", "path": "the0ry/gfiber-gflt100/cadc8f960aa71b0587735655e0d5bdc4b019d2ed6c1d18c59137f8398cd5f4c0", "path_in_repo": "the0ry/gfiber-gflt100/userspace/gpl/apps/sysstat/sadc", "objdump": "", "code_s": "__int64 __fastcall sub_4055B0(__int64 <span class=\"supfact\">a1</span>,\n                              int <span class=\"supfact\">a2</span>, int <span class=\"supfact\">a3</span>,\n                              unsigned int <span class=\"supfact\">a4</span>) {\n  char *s;\n  char *sa;\n  char *sb;\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  unsigned int v12;\n  unsigned int i;\n  v12 = Number;\n  <span class=\"supfact\">v10</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> +\n                                    Number * (<span class=\"supfact\">a2</span> + Number L)) +\n                        Number L * <span class=\"supfact\">a4</span>;\n  while (v12 < **(_DWORD **)(<span class=\"supfact\">a1</span> + Number)) {\n    s = (char *)(*(_QWORD *)(<span class=\"supfact\">a1</span> +\n                             Number * (<span class=\"supfact\">a3</span> + Number L)) +\n                 Number L * v12);\n    if (!strcmp((const char *)(<span class=\"supfact\">v10</span> + Number), s + Number)) {\n      if (*(_QWORD *)<span class=\"supfact\">v10</span> < *(_QWORD *)s ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number) ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number) ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number) ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number) ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number) ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number)) {\n        <span class=\"supfact\">v11</span> = Number;\n        if (*(_QWORD *)(<span class=\"supfact\">v10</span> + Number) <\n                *((_QWORD *)s + Number) &&\n            *(_QWORD *)<span class=\"supfact\">v10</span> > *(_QWORD *)s &&\n            *((__int64 *)s + Number) < Number)\n          <span class=\"supfact\">v11</span> = Number;\n        if (*(_QWORD *)(<span class=\"supfact\">v10</span> + Number) <\n                *((_QWORD *)s + Number) &&\n            *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) >\n                *((_QWORD *)s + Number) &&\n            *((__int64 *)s + Number) < Number) {\n          <span class=\"supfact\">v11</span> = Number;\n        }\n        if (*(_QWORD *)<span class=\"supfact\">v10</span><*(_QWORD *)s &&*(\n                    _QWORD *)(<span class=\"supfact\">v10</span> + Number)> *\n                ((_QWORD *)s + Number) &&\n            *(__int64 *)s < Number)\n          <span class=\"supfact\">v11</span> = Number;\n        if (*(_QWORD *)(<span class=\"supfact\">v10</span> + Number) <\n                *((_QWORD *)s + Number) &&\n            *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) >\n                *((_QWORD *)s + Number) &&\n            *((__int64 *)s + Number) < Number) {\n          <span class=\"supfact\">v11</span> = Number;\n        }\n        if (!<span class=\"supfact\">v11</span>) {\n          memset(s, Number, Number);\n          strcpy(s + Number, (const char *)(<span class=\"supfact\">v10</span> + Number));\n        }\n      }\n      return v12;\n    }\n    ++v12;\n  }\n  for (i = Number; i < **(_DWORD **)(<span class=\"supfact\">a1</span> + Number); ++i) {\n    sa = (char *)(*(_QWORD *)(<span class=\"supfact\">a1</span> +\n                              Number * (<span class=\"supfact\">a3</span> + Number L)) +\n                  Number L * i);\n    if (!strcmp(sa + Number, String)) {\n      memset(sa, Number, Number);\n      strcpy(sa + Number, (const char *)(<span class=\"supfact\">v10</span> + Number));\n      break;\n    }\n  }\n  if (i >= **(_DWORD **)(<span class=\"supfact\">a1</span> + Number))\n    i = <span class=\"supfact\">a4</span>;\n  sb = (char *)(*(_QWORD *)(<span class=\"supfact\">a1</span> +\n                            Number * (<span class=\"supfact\">a3</span> + Number L)) +\n                Number L * i);\n  memset(sb, Number, Number);\n  strcpy(sb + Number, (const char *)(<span class=\"supfact\">v10</span> + Number));\n  return i;\n}", "code_t": "__int64 __fastcall sub_4055B0(__int64 <span class=\"supfact\">a1</span>,\n                              int <span class=\"supfact\">a2</span>, int <span class=\"supfact\">a3</span>,\n                              unsigned int <span class=\"supfact\">a4</span>) {\n  char *s;\n  char *sa;\n  char *sb;\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  unsigned int v12;\n  unsigned int i;\n  v12 = Number;\n  <span class=\"supfact\">v10</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> +\n                                    Number * (<span class=\"supfact\">a2</span> + Number L)) +\n                        Number L * <span class=\"supfact\">a4</span>;\n  while (v12 < **(_DWORD **)(<span class=\"supfact\">a1</span> + Number)) {\n    s = (char *)(*(_QWORD *)(<span class=\"supfact\">a1</span> +\n                             Number * (<span class=\"supfact\">a3</span> + Number L)) +\n                 Number L * v12);\n    if (!strcmp((const char *)(<span class=\"supfact\">v10</span> + Number), s + Number)) {\n      if (*(_QWORD *)<span class=\"supfact\">v10</span> < *(_QWORD *)s ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number) ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number) ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number) ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number) ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number) ||\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) < *((_QWORD *)s + Number)) {\n        <span class=\"supfact\">v11</span> = Number;\n        if (*(_QWORD *)(<span class=\"supfact\">v10</span> + Number) <\n                *((_QWORD *)s + Number) &&\n            *(_QWORD *)<span class=\"supfact\">v10</span> > *(_QWORD *)s &&\n            *((__int64 *)s + Number) < Number)\n          <span class=\"supfact\">v11</span> = Number;\n        if (*(_QWORD *)(<span class=\"supfact\">v10</span> + Number) <\n                *((_QWORD *)s + Number) &&\n            *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) >\n                *((_QWORD *)s + Number) &&\n            *((__int64 *)s + Number) < Number) {\n          <span class=\"supfact\">v11</span> = Number;\n        }\n        if (*(_QWORD *)<span class=\"supfact\">v10</span><*(_QWORD *)s &&*(\n                    _QWORD *)(<span class=\"supfact\">v10</span> + Number)> *\n                ((_QWORD *)s + Number) &&\n            *(__int64 *)s < Number)\n          <span class=\"supfact\">v11</span> = Number;\n        if (*(_QWORD *)(<span class=\"supfact\">v10</span> + Number) <\n                *((_QWORD *)s + Number) &&\n            *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) >\n                *((_QWORD *)s + Number) &&\n            *((__int64 *)s + Number) < Number) {\n          <span class=\"supfact\">v11</span> = Number;\n        }\n        if (!<span class=\"supfact\">v11</span>) {\n          memset(s, Number, Number);\n          strcpy(s + Number, (const char *)(<span class=\"supfact\">v10</span> + Number));\n        }\n      }\n      return v12;\n    }\n    ++v12;\n  }\n  for (i = Number; i < **(_DWORD **)(<span class=\"supfact\">a1</span> + Number); ++i) {\n    sa = (char *)(*(_QWORD *)(<span class=\"supfact\">a1</span> +\n                              Number * (<span class=\"supfact\">a3</span> + Number L)) +\n                  Number L * i);\n    if (!strcmp(sa + Number, String)) {\n      memset(sa, Number, Number);\n      strcpy(sa + Number, (const char *)(<span class=\"supfact\">v10</span> + Number));\n      break;\n    }\n  }\n  if (i >= **(_DWORD **)(<span class=\"supfact\">a1</span> + Number))\n    i = <span class=\"supfact\">a4</span>;\n  sb = (char *)(*(_QWORD *)(<span class=\"supfact\">a1</span> +\n                            Number * (<span class=\"supfact\">a3</span> + Number L)) +\n                Number L * i);\n  memset(sb, Number, Number);\n  strcpy(sb + Number, (const char *)(<span class=\"supfact\">v10</span> + Number));\n  return i;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "int", "pred_name": "a2", "ref_name": "a2", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "a3", "ref_name": "a3", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "a4", "ref_name": "a4", "ref_type": "unsigned int"}, {"name": "v10", "type": "__int64", "pred_name": "v10", "ref_name": "v10", "ref_type": "__int64"}, {"name": "v11", "type": "int", "pred_name": "v11", "ref_name": "v11", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "rofl0r", "repo_name": "agsutils", "path": "rofl0r/agsutils/f31a77ae49e423a419e736ca78645b46750de045054c0d2c81e3cdfdfc19d08f", "path_in_repo": "rofl0r/agsutils//agssemble", "objdump": "0000000000409fdd <mem_write_stream>:\n  409fdd:\t55                   \tpush   %rbp\n  409fde:\t48 89 e5             \tmov    %rsp,%rbp\n  409fe1:\t48 83 ec 20          \tsub    $0x20,%rsp\n  409fe5:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  409fe9:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  409fed:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409ff1:\t48 8b 00             \tmov    (%rax),%rax\n  409ff4:\t48 85 c0             \ttest   %rax,%rax\n  409ff7:\t74 0d                \tje     40a006 <mem_write_stream+0x29>\n  409ff9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409ffd:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40a001:\t48 85 c0             \ttest   %rax,%rax\n  40a004:\t75 07                \tjne    40a00d <mem_write_stream+0x30>\n  40a006:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40a00b:\teb 37                \tjmp    40a044 <mem_write_stream+0x67>\n  40a00d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40a011:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  40a015:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40a019:\t48 8b 00             \tmov    (%rax),%rax\n  40a01c:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  40a020:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40a025:\t48 89 c7             \tmov    %rax,%rdi\n  40a028:\te8 f3 82 ff ff       \tcallq  402320 <fwrite@plt>\n  40a02d:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40a031:\t48 8b 52 08          \tmov    0x8(%rdx),%rdx\n  40a035:\t48 39 d0             \tcmp    %rdx,%rax\n  40a038:\t0f 94 c0             \tsete   %al\n  40a03b:\t0f b6 c0             \tmovzbl %al,%eax\n  40a03e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40a041:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40a044:\tc9                   \tleaveq \n  40a045:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall mem_write_stream(__int64 <span class=\"supfact\">a1</span>,\n                                   FILE *<span class=\"supfact\">a2</span>) {\n  _BOOL8 <span class=\"supfact\">result</span>;\n  if (*(_QWORD *)<span class=\"supfact\">a1</span> && *(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    <span class=\"supfact\">result</span> =\n        fwrite(*(const void **)<span class=\"supfact\">a1</span>, Number,\n               *(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n               <span class=\"supfact\">a2</span>) == *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  else\n    <span class=\"supfact\">result</span> = Number L;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl mem_write_stream(MG *<span class=\"supfact\">mem</span>,\n                             FILE *<span class=\"supfact\">out</span>) {\n  int <span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">mem</span>-><span class=\"supfact\">mem</span> && <span class=\"supfact\">mem</span>->used)\n    <span class=\"supfact\">result</span> =\n        fwrite(<span class=\"supfact\">mem</span>-><span class=\"supfact\">mem</span>, Number,\n               <span class=\"supfact\">mem</span>->used,\n               <span class=\"supfact\">out</span>) == <span class=\"supfact\">mem</span>->used;\n  else\n    <span class=\"supfact\">result</span> = Number;\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "SDL_RWops_0 *", "pred_name": "context", "ref_name": "mem", "ref_type": "MG *"}, {"name": "a2", "type": "const void *", "pred_name": "ptr", "ref_name": "out", "ref_type": "FILE *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/9d9b3cb984271790df9fd014f222508bdb151ed2c5c171fdadfc4d05e72f7a86", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Source/CMakeFiles/CMakeLib.dir/cmComputeLinkDepends.cxx.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_S_minimumEPSt18_Rb_tree_node_base>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  10:\t48 89 c7             \tmov    %rax,%rdi\n  13:\te8 00 00 00 00       \tcallq  18 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_S_minimumEPSt18_Rb_tree_node_base+0x18>\n  18:\tc9                   \tleaveq \n  19:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n    _Rb_tree<int, int, std _Identity<int>, std less<int>, std allocator<int>>\n    _S_minimum(__int64 <span class=\"supfact\">a1</span>) {\n  return std _Rb_tree_node_base _S_minimum(<span class=\"supfact\">a1</span>);\n}", "code_t": "__int64 __fastcall std\n    _Rb_tree<int, int, std _Identity<int>, std less<int>, std allocator<int>>\n    _S_minimum(__int64 <span class=\"supfact\">a1</span>) {\n  return std _Rb_tree_node_base _S_minimum(<span class=\"supfact\">a1</span>);\n}", "var": [{"name": "a1", "type": "std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int> >::_Base_ptr", "pred_name": "__x", "ref_name": "a1", "ref_type": "__int64"}], "body_in_train": true}, {"repo_owner": "darkspr1te", "repo_name": "uClinux-dist", "path": "darkspr1te/uClinux-dist/b636d0a3615974effa3b5c1b97bc213561a3e80aa67083859df8913f91c76b8b", "path_in_repo": "darkspr1te/uClinux-dist/user/hostap/hostapd/hostapd.o", "objdump": "0000000000000df9 <hostapd_flush_old_stations>:\n     df9:\t55                   \tpush   %rbp\n     dfa:\t48 89 e5             \tmov    %rsp,%rbp\n     dfd:\t48 83 ec 20          \tsub    $0x20,%rsp\n     e01:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     e05:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     e0c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     e11:\te8 00 00 00 00       \tcallq  e16 <hostapd_flush_old_stations+0x1d>\n     e16:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e1a:\t48 89 c7             \tmov    %rax,%rdi\n     e1d:\te8 00 00 00 00       \tcallq  e22 <hostapd_flush_old_stations+0x29>\n     e22:\t85 c0                \ttest   %eax,%eax\n     e24:\t74 11                \tje     e37 <hostapd_flush_old_stations+0x3e>\n     e26:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     e2b:\te8 00 00 00 00       \tcallq  e30 <hostapd_flush_old_stations+0x37>\n     e30:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n     e37:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     e3c:\te8 00 00 00 00       \tcallq  e41 <hostapd_flush_old_stations+0x48>\n     e41:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e45:\t48 89 c7             \tmov    %rax,%rdi\n     e48:\te8 14 f7 ff ff       \tcallq  561 <hostapd_deauth_all_stas>\n     e4d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     e50:\tc9                   \tleaveq \n     e51:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hostapd_flush_old_stations(__int64 <span class=\"supfact\">a1</span>) {\n  unsigned int <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = Number;\n  puts(String);\n  if ((unsigned int)hostapd_flush(<span class=\"supfact\">a1</span>)) {\n    puts(String);\n    <span class=\"supfact\">v2</span> = Number;\n  }\n  puts(String);\n  hostapd_deauth_all_stas(<span class=\"supfact\">a1</span>);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "int __cdecl hostapd_flush_old_stations(hostapd *<span class=\"supfact\">hapd</span>) {\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = Number;\n  puts(String);\n  if ((unsigned int)hostapd_flush(<span class=\"supfact\">hapd</span>)) {\n    puts(String);\n    <span class=\"supfact\">ret</span> = Number;\n  }\n  puts(String);\n  hostapd_deauth_all_stas(<span class=\"supfact\">hapd</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "a1", "type": "const char *", "pred_name": "__unk__", "ref_name": "hapd", "ref_type": "hostapd *"}, {"name": "v2", "type": "int", "pred_name": "ret", "ref_name": "ret", "ref_type": "int"}], "body_in_train": true}, {"repo_owner": "psprawka", "repo_name": "Corewar", "path": "psprawka/Corewar/c31806f6bca0fa1a5e6db058964c059632bf4b4c67cc0270c28b7981e0300c5c", "path_in_repo": "psprawka/Corewar/VM/srcs/utils/stack_utils.o", "objdump": "0000000000000110 <ft_delsup>:\n 110:\t55                   \tpush   %rbp\n 111:\t48 89 e5             \tmov    %rsp,%rbp\n 114:\t48 83 ec 20          \tsub    $0x20,%rsp\n 118:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n 11c:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n 120:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n 124:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 128:\t48 8b 00             \tmov    (%rax),%rax\n 12b:\t48 85 c0             \ttest   %rax,%rax\n 12e:\t74 6b                \tje     19b <ft_delsup+0x8b>\n 130:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 135:\t74 64                \tje     19b <ft_delsup+0x8b>\n 137:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 13c:\t75 11                \tjne    14f <ft_delsup+0x3f>\n 13e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 142:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n 146:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 14a:\t48 89 10             \tmov    %rdx,(%rax)\n 14d:\teb 10                \tjmp    15f <ft_delsup+0x4f>\n 14f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 153:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n 157:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 15b:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 15f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 163:\t48 8b 00             \tmov    (%rax),%rax\n 166:\t48 85 c0             \ttest   %rax,%rax\n 169:\t74 0f                \tje     17a <ft_delsup+0x6a>\n 16b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 16f:\t48 8b 00             \tmov    (%rax),%rax\n 172:\t48 89 c7             \tmov    %rax,%rdi\n 175:\te8 00 00 00 00       \tcallq  17a <ft_delsup+0x6a>\n 17a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 17e:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n 185:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 189:\t48 89 c7             \tmov    %rax,%rdi\n 18c:\te8 00 00 00 00       \tcallq  191 <ft_delsup+0x81>\n 191:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n 198:\t00 \n 199:\teb 01                \tjmp    19c <ft_delsup+0x8c>\n 19b:\t90                   \tnop\n 19c:\tc9                   \tleaveq \n 19d:\tc3                   \tretq   \n", "code_s": "void __fastcall ft_delsup(_QWORD *<span class=\"supfact\">a1</span>,\n                          __int64 <span class=\"supfact\">a2</span>,\n                          __int64 <span class=\"supfact\">a3</span>) {\n  if (*<span class=\"supfact\">a1</span> && <span class=\"supfact\">a2</span>) {\n    if (<span class=\"supfact\">a3</span>)\n      *(_QWORD *)(<span class=\"supfact\">a3</span> + Number) =\n          *(_QWORD *)(<span class=\"supfact\">a2</span> + Number);\n    else\n      *<span class=\"supfact\">a1</span> = *(_QWORD *)(<span class=\"supfact\">a2</span> + Number);\n    if (*(_QWORD *)<span class=\"supfact\">a2</span>)\n      free(*(void **)<span class=\"supfact\">a2</span>);\n    *(_QWORD *)<span class=\"supfact\">a2</span> = Number L;\n    free((void *)<span class=\"supfact\">a2</span>);\n  }\n}", "code_t": "void __cdecl ft_delsup(t_list **<span class=\"supfact\">list</span>,\n                       t_list *<span class=\"supfact\">bye</span>,\n                       t_list *<span class=\"supfact\">previous</span>) {\n  if (*<span class=\"supfact\">list</span> && <span class=\"supfact\">bye</span>) {\n    if (<span class=\"supfact\">previous</span>)\n      <span class=\"supfact\">previous</span>->next = <span class=\"supfact\">bye</span>->next;\n    else\n      *<span class=\"supfact\">list</span> = <span class=\"supfact\">bye</span>->next;\n    if (<span class=\"supfact\">bye</span>->content)\n      free(<span class=\"supfact\">bye</span>->content);\n    <span class=\"supfact\">bye</span>->content = Number L;\n    free(<span class=\"supfact\">bye</span>);\n  }\n}", "var": [{"name": "a1", "type": "private_ike_sa_t_0 *", "pred_name": "this", "ref_name": "list", "ref_type": "t_list * *"}, {"name": "a2", "type": "policy_t_0 *", "pred_name": "policy", "ref_name": "bye", "ref_type": "t_list *"}, {"name": "a3", "type": "__unk__", "pred_name": "__unk__", "ref_name": "previous", "ref_type": "t_list *"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/85db5fd110c71fb40e75d55507ec0da5d6043315bc8b6a036d234c5dede001f6", "path_in_repo": "XanClic/qemu//x86_64-softmmu/hw/i386/xen/xen-hvm.o", "objdump": "0000000000000000 <ctz64>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n       8:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n       d:\t74 08                \tje     17 <ctz64+0x17>\n       f:\tf3 48 0f bc 45 f8    \ttzcnt  -0x8(%rbp),%rax\n      15:\teb 05                \tjmp    1c <ctz64+0x1c>\n      17:\tb8 40 00 00 00       \tmov    $0x40,%eax\n      1c:\t5d                   \tpop    %rbp\n      1d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ctz64(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = <span class=\"supfact\">a1</span>;\n  if (!<span class=\"supfact\">a1</span>)\n    return Number L;\n  __asm { tzcnt rax , [ rbp + var_8 ] }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl ctz64(uint64_t <span class=\"supfact\">val</span>) {\n  uint64_t <span class=\"supfact\">vala</span>;\n  <span class=\"supfact\">vala</span> = <span class=\"supfact\">val</span>;\n  if (<span class=\"supfact\">val</span>)\n    __asm { tzcnt rax , [ rbp + <span class=\"supfact\">val</span> ] }\n    else LODWORD(<span class=\"supfact\">_RAX</span>) = Number;\n  return <span class=\"supfact\">_RAX</span>;\n}", "var": [{"name": "a1", "type": "uint64_t", "pred_name": "val", "ref_name": "val", "ref_type": "uint64_t"}, {"name": "result", "type": "__int64", "pred_name": "_RAX", "ref_name": "_RAX", "ref_type": "__int64"}, {"name": "v2", "type": "uint64_t", "pred_name": "vala", "ref_name": "vala", "ref_type": "uint64_t"}], "body_in_train": true}, {"repo_owner": "vang95", "repo_name": "LibraryCPP", "path": "vang95/LibraryCPP/acb7faf4ebe81b8b04aacf5426299cb3357c102dc851e608d5031e5699874ef4", "path_in_repo": "vang95/LibraryCPP/curl-7.50.1/curl-7.50.1/lib/libcurl_la-ssh.o", "objdump": "0000000000006025 <ssh_perform_getsock>:\n    6025:\t55                   \tpush   %rbp\n    6026:\t48 89 e5             \tmov    %rsp,%rbp\n    6029:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    602d:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    6031:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n    6034:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    603b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    603f:\t8b 90 f0 01 00 00    \tmov    0x1f0(%rax),%edx\n    6045:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    6049:\t89 10                \tmov    %edx,(%rax)\n    604b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    604f:\t8b 80 b4 06 00 00    \tmov    0x6b4(%rax),%eax\n    6055:\t83 e0 01             \tand    $0x1,%eax\n    6058:\t85 c0                \ttest   %eax,%eax\n    605a:\t74 04                \tje     6060 <ssh_perform_getsock+0x3b>\n    605c:\t83 4d fc 01          \torl    $0x1,-0x4(%rbp)\n    6060:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6064:\t8b 80 b4 06 00 00    \tmov    0x6b4(%rax),%eax\n    606a:\t83 e0 02             \tand    $0x2,%eax\n    606d:\t85 c0                \ttest   %eax,%eax\n    606f:\t74 07                \tje     6078 <ssh_perform_getsock+0x53>\n    6071:\t81 4d fc 00 00 01 00 \torl    $0x10000,-0x4(%rbp)\n    6078:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    607b:\t5d                   \tpop    %rbp\n    607c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ssh_perform_getsock(__int64 <span class=\"supfact\">a1</span>,\n                                       _DWORD *<span class=\"supfact\">a2</span>) {\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  *<span class=\"supfact\">a2</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  if ((*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & Number) != Number)\n    <span class=\"supfact\">v3</span> = Number;\n  if ((*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & Number) != Number)\n    <span class=\"supfact\">v3</span> |= Number;\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "int __cdecl ssh_perform_getsock(const connectdata *<span class=\"supfact\">conn</span>,\n                                curl_socket_t *<span class=\"supfact\">sock</span>,\n                                int numsocks) {\n  int <span class=\"supfact\">bitmap</span>;\n  <span class=\"supfact\">bitmap</span> = Number;\n  *<span class=\"supfact\">sock</span> = <span class=\"supfact\">conn</span>-><span class=\"supfact\">sock</span>[Number];\n  if ((<span class=\"supfact\">conn</span>->waitfor & Number) != Number)\n    <span class=\"supfact\">bitmap</span> = Number;\n  if ((<span class=\"supfact\">conn</span>->waitfor & Number) != Number)\n    <span class=\"supfact\">bitmap</span> |= Number;\n  return <span class=\"supfact\">bitmap</span>;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "sock", "ref_name": "conn", "ref_type": "const connectdata *"}, {"name": "a2", "type": "curl_socket_t *", "pred_name": "socks", "ref_name": "sock", "ref_type": "curl_socket_t *"}, {"name": "v3", "type": "int", "pred_name": "bitmap", "ref_name": "bitmap", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "Panopto", "repo_name": "panopto-ffmpeg", "path": "Panopto/panopto-ffmpeg/d1bbb79f72ca6a6b111d8e0e01ec4b1f801112fe78c15a4aeabb445dbd5f3a63", "path_in_repo": "Panopto/panopto-ffmpeg//libavcodec/hevcdsp.o", "objdump": "000000000000e028 <sao_edge_restore_0_9>:\n    e028:\t48 83 ec 38          \tsub    $0x38,%rsp\n    e02c:\t48 89 7c 24 b0       \tmov    %rdi,-0x50(%rsp)\n    e031:\t48 89 74 24 a8       \tmov    %rsi,-0x58(%rsp)\n    e036:\t48 89 54 24 a0       \tmov    %rdx,-0x60(%rsp)\n    e03b:\t48 89 4c 24 98       \tmov    %rcx,-0x68(%rsp)\n    e040:\t4c 89 44 24 90       \tmov    %r8,-0x70(%rsp)\n    e045:\t4c 89 4c 24 88       \tmov    %r9,-0x78(%rsp)\n    e04a:\t48 8b 44 24 b0       \tmov    -0x50(%rsp),%rax\n    e04f:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n    e054:\t48 8b 44 24 a8       \tmov    -0x58(%rsp),%rax\n    e059:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n    e05e:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n    e062:\t48 63 d0             \tmovslq %eax,%rdx\n    e065:\t48 89 d0             \tmov    %rdx,%rax\n    e068:\t48 c1 e0 02          \tshl    $0x2,%rax\n    e06c:\t48 01 d0             \tadd    %rdx,%rax\n    e06f:\t48 01 c0             \tadd    %rax,%rax\n    e072:\t48 8d 50 70          \tlea    0x70(%rax),%rdx\n    e076:\t48 8b 44 24 90       \tmov    -0x70(%rsp),%rax\n    e07b:\t48 01 d0             \tadd    %rdx,%rax\n    e07e:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n    e083:\t48 8b 44 24 90       \tmov    -0x70(%rsp),%rax\n    e088:\t8b 54 24 50          \tmov    0x50(%rsp),%edx\n    e08c:\t48 63 d2             \tmovslq %edx,%rdx\n    e08f:\t48 83 c2 18          \tadd    $0x18,%rdx\n    e093:\t8b 44 90 04          \tmov    0x4(%rax,%rdx,4),%eax\n    e097:\t89 44 24 0c          \tmov    %eax,0xc(%rsp)\n    e09b:\tc7 44 24 2c 00 00 00 \tmovl   $0x0,0x2c(%rsp)\n    e0a2:\t00 \n    e0a3:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n    e0a7:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n    e0ab:\t8b 44 24 48          \tmov    0x48(%rsp),%eax\n    e0af:\t89 44 24 08          \tmov    %eax,0x8(%rsp)\n    e0b3:\t48 8b 44 24 a0       \tmov    -0x60(%rsp),%rax\n    e0b8:\t48 d1 e8             \tshr    %rax\n    e0bb:\t48 89 44 24 a0       \tmov    %rax,-0x60(%rsp)\n    e0c0:\t48 8b 44 24 98       \tmov    -0x68(%rsp),%rax\n    e0c5:\t48 d1 e8             \tshr    %rax\n    e0c8:\t48 89 44 24 98       \tmov    %rax,-0x68(%rsp)\n    e0cd:\t83 7c 24 0c 01       \tcmpl   $0x1,0xc(%rsp)\n    e0d2:\t0f 84 b7 01 00 00    \tje     e28f <sao_edge_restore_0_9+0x267>\n    e0d8:\t48 8b 44 24 88       \tmov    -0x78(%rsp),%rax\n    e0dd:\t8b 00                \tmov    (%rax),%eax\n    e0df:\t85 c0                \ttest   %eax,%eax\n    e0e1:\t0f 84 bb 00 00 00    \tje     e1a2 <sao_edge_restore_0_9+0x17a>\n    e0e7:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    e0ec:\t0f b7 00             \tmovzwl (%rax),%eax\n    e0ef:\t98                   \tcwtl   \n    e0f0:\t89 44 24 04          \tmov    %eax,0x4(%rsp)\n    e0f4:\tc7 44 24 30 00 00 00 \tmovl   $0x0,0x30(%rsp)\n    e0fb:\t00 \n    e0fc:\te9 8b 00 00 00       \tjmpq   e18c <sao_edge_restore_0_9+0x164>\n    e101:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n    e105:\t48 98                \tcltq   \n    e107:\t48 0f af 44 24 98    \timul   -0x68(%rsp),%rax\n    e10d:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    e111:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    e116:\t48 01 d0             \tadd    %rdx,%rax\n    e119:\t0f b7 00             \tmovzwl (%rax),%eax\n    e11c:\t0f b7 d0             \tmovzwl %ax,%edx\n    e11f:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n    e123:\t01 d0                \tadd    %edx,%eax\n    e125:\t89 44 24 dc          \tmov    %eax,-0x24(%rsp)\n    e129:\tc7 44 24 d8 09 00 00 \tmovl   $0x9,-0x28(%rsp)\n    e130:\t00 \n    e131:\t8b 44 24 d8          \tmov    -0x28(%rsp),%eax\n    e135:\tba 01 00 00 00       \tmov    $0x1,%edx\n    e13a:\t89 c1                \tmov    %eax,%ecx\n    e13c:\td3 e2                \tshl    %cl,%edx\n    e13e:\t89 d0                \tmov    %edx,%eax\n    e140:\tf7 d8                \tneg    %eax\n    e142:\t23 44 24 dc          \tand    -0x24(%rsp),%eax\n    e146:\t85 c0                \ttest   %eax,%eax\n    e148:\t74 1d                \tje     e167 <sao_edge_restore_0_9+0x13f>\n    e14a:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n    e14e:\tf7 d8                \tneg    %eax\n    e150:\t99                   \tcltd   \n    e151:\t8b 44 24 d8          \tmov    -0x28(%rsp),%eax\n    e155:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    e15a:\t89 c1                \tmov    %eax,%ecx\n    e15c:\td3 e6                \tshl    %cl,%esi\n    e15e:\t89 f0                \tmov    %esi,%eax\n    e160:\t83 e8 01             \tsub    $0x1,%eax\n    e163:\t21 d0                \tand    %edx,%eax\n    e165:\teb 04                \tjmp    e16b <sao_edge_restore_0_9+0x143>\n    e167:\t8b 44 24 dc          \tmov    -0x24(%rsp),%eax\n    e16b:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n    e16f:\t48 63 d2             \tmovslq %edx,%rdx\n    e172:\t48 0f af 54 24 a0    \timul   -0x60(%rsp),%rdx\n    e178:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n    e17c:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n    e181:\t48 01 ca             \tadd    %rcx,%rdx\n    e184:\t66 89 02             \tmov    %ax,(%rdx)\n    e187:\t83 44 24 30 01       \taddl   $0x1,0x30(%rsp)\n    e18c:\t8b 44 24 30          \tmov    0x30(%rsp),%eax\n    e190:\t3b 44 24 08          \tcmp    0x8(%rsp),%eax\n    e194:\t0f 8c 67 ff ff ff    \tjl     e101 <sao_edge_restore_0_9+0xd9>\n    e19a:\tc7 44 24 2c 01 00 00 \tmovl   $0x1,0x2c(%rsp)\n    e1a1:\t00 \n    e1a2:\t48 8b 44 24 88       \tmov    -0x78(%rsp),%rax\n    e1a7:\t48 83 c0 08          \tadd    $0x8,%rax\n    e1ab:\t8b 00                \tmov    (%rax),%eax\n    e1ad:\t85 c0                \ttest   %eax,%eax\n    e1af:\t0f 84 da 00 00 00    \tje     e28f <sao_edge_restore_0_9+0x267>\n    e1b5:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    e1ba:\t0f b7 00             \tmovzwl (%rax),%eax\n    e1bd:\t98                   \tcwtl   \n    e1be:\t89 04 24             \tmov    %eax,(%rsp)\n    e1c1:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n    e1c5:\t83 e8 01             \tsub    $0x1,%eax\n    e1c8:\t89 44 24 fc          \tmov    %eax,-0x4(%rsp)\n    e1cc:\tc7 44 24 34 00 00 00 \tmovl   $0x0,0x34(%rsp)\n    e1d3:\t00 \n    e1d4:\te9 a3 00 00 00       \tjmpq   e27c <sao_edge_restore_0_9+0x254>\n    e1d9:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    e1dd:\t48 98                \tcltq   \n    e1df:\t48 0f af 44 24 98    \timul   -0x68(%rsp),%rax\n    e1e5:\t48 89 c2             \tmov    %rax,%rdx\n    e1e8:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n    e1ec:\t48 98                \tcltq   \n    e1ee:\t48 01 d0             \tadd    %rdx,%rax\n    e1f1:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    e1f5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    e1fa:\t48 01 d0             \tadd    %rdx,%rax\n    e1fd:\t0f b7 00             \tmovzwl (%rax),%eax\n    e200:\t0f b7 d0             \tmovzwl %ax,%edx\n    e203:\t8b 04 24             \tmov    (%rsp),%eax\n    e206:\t01 d0                \tadd    %edx,%eax\n    e208:\t89 44 24 d4          \tmov    %eax,-0x2c(%rsp)\n    e20c:\tc7 44 24 d0 09 00 00 \tmovl   $0x9,-0x30(%rsp)\n    e213:\t00 \n    e214:\t8b 44 24 d0          \tmov    -0x30(%rsp),%eax\n    e218:\tba 01 00 00 00       \tmov    $0x1,%edx\n    e21d:\t89 c1                \tmov    %eax,%ecx\n    e21f:\td3 e2                \tshl    %cl,%edx\n    e221:\t89 d0                \tmov    %edx,%eax\n    e223:\tf7 d8                \tneg    %eax\n    e225:\t23 44 24 d4          \tand    -0x2c(%rsp),%eax\n    e229:\t85 c0                \ttest   %eax,%eax\n    e22b:\t74 1d                \tje     e24a <sao_edge_restore_0_9+0x222>\n    e22d:\t8b 44 24 d4          \tmov    -0x2c(%rsp),%eax\n    e231:\tf7 d8                \tneg    %eax\n    e233:\t99                   \tcltd   \n    e234:\t8b 44 24 d0          \tmov    -0x30(%rsp),%eax\n    e238:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    e23d:\t89 c1                \tmov    %eax,%ecx\n    e23f:\td3 e6                \tshl    %cl,%esi\n    e241:\t89 f0                \tmov    %esi,%eax\n    e243:\t83 e8 01             \tsub    $0x1,%eax\n    e246:\t21 d0                \tand    %edx,%eax\n    e248:\teb 04                \tjmp    e24e <sao_edge_restore_0_9+0x226>\n    e24a:\t8b 44 24 d4          \tmov    -0x2c(%rsp),%eax\n    e24e:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n    e252:\t48 63 d2             \tmovslq %edx,%rdx\n    e255:\t48 89 d1             \tmov    %rdx,%rcx\n    e258:\t48 0f af 4c 24 a0    \timul   -0x60(%rsp),%rcx\n    e25e:\t8b 54 24 fc          \tmov    -0x4(%rsp),%edx\n    e262:\t48 63 d2             \tmovslq %edx,%rdx\n    e265:\t48 01 ca             \tadd    %rcx,%rdx\n    e268:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n    e26c:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n    e271:\t48 01 ca             \tadd    %rcx,%rdx\n    e274:\t66 89 02             \tmov    %ax,(%rdx)\n    e277:\t83 44 24 34 01       \taddl   $0x1,0x34(%rsp)\n    e27c:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    e280:\t3b 44 24 08          \tcmp    0x8(%rsp),%eax\n    e284:\t0f 8c 4f ff ff ff    \tjl     e1d9 <sao_edge_restore_0_9+0x1b1>\n    e28a:\t83 6c 24 28 01       \tsubl   $0x1,0x28(%rsp)\n    e28f:\t83 7c 24 0c 00       \tcmpl   $0x0,0xc(%rsp)\n    e294:\t0f 84 b5 01 00 00    \tje     e44f <sao_edge_restore_0_9+0x427>\n    e29a:\t48 8b 44 24 88       \tmov    -0x78(%rsp),%rax\n    e29f:\t48 83 c0 04          \tadd    $0x4,%rax\n    e2a3:\t8b 00                \tmov    (%rax),%eax\n    e2a5:\t85 c0                \ttest   %eax,%eax\n    e2a7:\t0f 84 a4 00 00 00    \tje     e351 <sao_edge_restore_0_9+0x329>\n    e2ad:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    e2b2:\t0f b7 00             \tmovzwl (%rax),%eax\n    e2b5:\t98                   \tcwtl   \n    e2b6:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n    e2ba:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n    e2be:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n    e2c2:\teb 7f                \tjmp    e343 <sao_edge_restore_0_9+0x31b>\n    e2c4:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    e2c8:\t48 98                \tcltq   \n    e2ca:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    e2ce:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    e2d3:\t48 01 d0             \tadd    %rdx,%rax\n    e2d6:\t0f b7 00             \tmovzwl (%rax),%eax\n    e2d9:\t0f b7 d0             \tmovzwl %ax,%edx\n    e2dc:\t8b 44 24 f8          \tmov    -0x8(%rsp),%eax\n    e2e0:\t01 d0                \tadd    %edx,%eax\n    e2e2:\t89 44 24 cc          \tmov    %eax,-0x34(%rsp)\n    e2e6:\tc7 44 24 c8 09 00 00 \tmovl   $0x9,-0x38(%rsp)\n    e2ed:\t00 \n    e2ee:\t8b 44 24 c8          \tmov    -0x38(%rsp),%eax\n    e2f2:\tba 01 00 00 00       \tmov    $0x1,%edx\n    e2f7:\t89 c1                \tmov    %eax,%ecx\n    e2f9:\td3 e2                \tshl    %cl,%edx\n    e2fb:\t89 d0                \tmov    %edx,%eax\n    e2fd:\tf7 d8                \tneg    %eax\n    e2ff:\t23 44 24 cc          \tand    -0x34(%rsp),%eax\n    e303:\t85 c0                \ttest   %eax,%eax\n    e305:\t74 1d                \tje     e324 <sao_edge_restore_0_9+0x2fc>\n    e307:\t8b 44 24 cc          \tmov    -0x34(%rsp),%eax\n    e30b:\tf7 d8                \tneg    %eax\n    e30d:\t99                   \tcltd   \n    e30e:\t8b 44 24 c8          \tmov    -0x38(%rsp),%eax\n    e312:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    e317:\t89 c1                \tmov    %eax,%ecx\n    e319:\td3 e6                \tshl    %cl,%esi\n    e31b:\t89 f0                \tmov    %esi,%eax\n    e31d:\t83 e8 01             \tsub    $0x1,%eax\n    e320:\t21 d0                \tand    %edx,%eax\n    e322:\teb 04                \tjmp    e328 <sao_edge_restore_0_9+0x300>\n    e324:\t8b 44 24 cc          \tmov    -0x34(%rsp),%eax\n    e328:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n    e32c:\t48 63 d2             \tmovslq %edx,%rdx\n    e32f:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n    e333:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n    e338:\t48 01 ca             \tadd    %rcx,%rdx\n    e33b:\t66 89 02             \tmov    %ax,(%rdx)\n    e33e:\t83 44 24 34 01       \taddl   $0x1,0x34(%rsp)\n    e343:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    e347:\t3b 44 24 28          \tcmp    0x28(%rsp),%eax\n    e34b:\t0f 8c 73 ff ff ff    \tjl     e2c4 <sao_edge_restore_0_9+0x29c>\n    e351:\t48 8b 44 24 88       \tmov    -0x78(%rsp),%rax\n    e356:\t48 83 c0 0c          \tadd    $0xc,%rax\n    e35a:\t8b 00                \tmov    (%rax),%eax\n    e35c:\t85 c0                \ttest   %eax,%eax\n    e35e:\t0f 84 eb 00 00 00    \tje     e44f <sao_edge_restore_0_9+0x427>\n    e364:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    e369:\t0f b7 00             \tmovzwl (%rax),%eax\n    e36c:\t98                   \tcwtl   \n    e36d:\t89 44 24 f4          \tmov    %eax,-0xc(%rsp)\n    e371:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n    e375:\t83 e8 01             \tsub    $0x1,%eax\n    e378:\t48 98                \tcltq   \n    e37a:\t48 8b 54 24 a0       \tmov    -0x60(%rsp),%rdx\n    e37f:\t48 0f af c2          \timul   %rdx,%rax\n    e383:\t48 89 44 24 e8       \tmov    %rax,-0x18(%rsp)\n    e388:\t8b 44 24 08          \tmov    0x8(%rsp),%eax\n    e38c:\t83 e8 01             \tsub    $0x1,%eax\n    e38f:\t48 98                \tcltq   \n    e391:\t48 8b 54 24 98       \tmov    -0x68(%rsp),%rdx\n    e396:\t48 0f af c2          \timul   %rdx,%rax\n    e39a:\t48 89 44 24 e0       \tmov    %rax,-0x20(%rsp)\n    e39f:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n    e3a3:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n    e3a7:\te9 90 00 00 00       \tjmpq   e43c <sao_edge_restore_0_9+0x414>\n    e3ac:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    e3b0:\t48 63 d0             \tmovslq %eax,%rdx\n    e3b3:\t48 8b 44 24 e0       \tmov    -0x20(%rsp),%rax\n    e3b8:\t48 01 d0             \tadd    %rdx,%rax\n    e3bb:\t48 8d 14 00          \tlea    (%rax,%rax,1),%rdx\n    e3bf:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    e3c4:\t48 01 d0             \tadd    %rdx,%rax\n    e3c7:\t0f b7 00             \tmovzwl (%rax),%eax\n    e3ca:\t0f b7 d0             \tmovzwl %ax,%edx\n    e3cd:\t8b 44 24 f4          \tmov    -0xc(%rsp),%eax\n    e3d1:\t01 d0                \tadd    %edx,%eax\n    e3d3:\t89 44 24 c4          \tmov    %eax,-0x3c(%rsp)\n    e3d7:\tc7 44 24 c0 09 00 00 \tmovl   $0x9,-0x40(%rsp)\n    e3de:\t00 \n    e3df:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n    e3e3:\tba 01 00 00 00       \tmov    $0x1,%edx\n    e3e8:\t89 c1                \tmov    %eax,%ecx\n    e3ea:\td3 e2                \tshl    %cl,%edx\n    e3ec:\t89 d0                \tmov    %edx,%eax\n    e3ee:\tf7 d8                \tneg    %eax\n    e3f0:\t23 44 24 c4          \tand    -0x3c(%rsp),%eax\n    e3f4:\t85 c0                \ttest   %eax,%eax\n    e3f6:\t74 1d                \tje     e415 <sao_edge_restore_0_9+0x3ed>\n    e3f8:\t8b 44 24 c4          \tmov    -0x3c(%rsp),%eax\n    e3fc:\tf7 d8                \tneg    %eax\n    e3fe:\t99                   \tcltd   \n    e3ff:\t8b 44 24 c0          \tmov    -0x40(%rsp),%eax\n    e403:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    e408:\t89 c1                \tmov    %eax,%ecx\n    e40a:\td3 e6                \tshl    %cl,%esi\n    e40c:\t89 f0                \tmov    %esi,%eax\n    e40e:\t83 e8 01             \tsub    $0x1,%eax\n    e411:\t21 d0                \tand    %edx,%eax\n    e413:\teb 04                \tjmp    e419 <sao_edge_restore_0_9+0x3f1>\n    e415:\t8b 44 24 c4          \tmov    -0x3c(%rsp),%eax\n    e419:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n    e41d:\t48 63 ca             \tmovslq %edx,%rcx\n    e420:\t48 8b 54 24 e8       \tmov    -0x18(%rsp),%rdx\n    e425:\t48 01 ca             \tadd    %rcx,%rdx\n    e428:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n    e42c:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n    e431:\t48 01 ca             \tadd    %rcx,%rdx\n    e434:\t66 89 02             \tmov    %ax,(%rdx)\n    e437:\t83 44 24 34 01       \taddl   $0x1,0x34(%rsp)\n    e43c:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    e440:\t3b 44 24 28          \tcmp    0x28(%rsp),%eax\n    e444:\t0f 8c 62 ff ff ff    \tjl     e3ac <sao_edge_restore_0_9+0x384>\n    e44a:\t83 6c 24 08 01       \tsubl   $0x1,0x8(%rsp)\n    e44f:\t90                   \tnop\n    e450:\t48 83 c4 38          \tadd    $0x38,%rsp\n    e454:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall sao_edge_restore_0_9(\n    __int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n    unsigned __int64 <span class=\"supfact\">a3</span>, unsigned __int64 <span class=\"supfact\">a4</span>,\n    __int64 <span class=\"supfact\">a5</span>, _DWORD *<span class=\"supfact\">a6</span>,\n    int <span class=\"supfact\">a7</span>, int <span class=\"supfact\">a8</span>, int <span class=\"supfact\">a9</span>) {\n  unsigned __int64 result;\n  int v10;\n  int v11;\n  int v12;\n  int v13;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  unsigned __int64 <span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">v17</span>;\n  int <span class=\"supfact\">v18</span>;\n  int <span class=\"supfact\">v19</span>;\n  __int64 <span class=\"supfact\">v20</span>;\n  int <span class=\"supfact\">v21</span>;\n  int <span class=\"supfact\">v22</span>;\n  int <span class=\"supfact\">v23</span>;\n  int <span class=\"supfact\">v24</span>;\n  int <span class=\"supfact\">v25</span>;\n  int <span class=\"supfact\">v26</span>;\n  __int16 *<span class=\"supfact\">v27</span>;\n  int <span class=\"supfact\">v28</span>;\n  int <span class=\"supfact\">v29</span>;\n  int <span class=\"supfact\">i</span>;\n  unsigned int j;\n  int k;\n  int l;\n  <span class=\"supfact\">v27</span> =\n      (__int16 *)(Number L * <span class=\"supfact\">a9</span> + Number + <span class=\"supfact\">a5</span>);\n  <span class=\"supfact\">v26</span> =\n      *(_DWORD *)(<span class=\"supfact\">a5</span> +\n                  Number * (<span class=\"supfact\">a9</span> + Number L) + Number);\n  <span class=\"supfact\">v29</span> = Number;\n  <span class=\"supfact\">v28</span> = <span class=\"supfact\">a7</span>;\n  <span class=\"supfact\">v15</span> = <span class=\"supfact\">a3</span> >> Number;\n  result = <span class=\"supfact\">a4</span> >> Number;\n  <span class=\"supfact\">v14</span> = <span class=\"supfact\">a4</span> >> Number;\n  if (<span class=\"supfact\">v26</span> != Number) {\n    if (*<span class=\"supfact\">a6</span>) {\n      <span class=\"supfact\">v25</span> = *<span class=\"supfact\">v27</span>;\n      for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">a8</span>;\n           ++<span class=\"supfact\">i</span>) {\n        <span class=\"supfact\">v19</span> =\n            *(unsigned __int16 *)(Number * <span class=\"supfact\">v14</span> *\n                                      <span class=\"supfact\">i</span> +\n                                  <span class=\"supfact\">a2</span>) +\n            <span class=\"supfact\">v25</span>;\n        if ((<span class=\"supfact\">v19</span> & Number) != Number)\n          v10 = (-<span class=\"supfact\">v19</span> >> Number) & Number;\n        else\n          LOWORD(v10) =\n              *(_WORD *)(Number * <span class=\"supfact\">v14</span> * <span class=\"supfact\">i</span> +\n                         <span class=\"supfact\">a2</span>) +\n              <span class=\"supfact\">v25</span>;\n        *(_WORD *)(Number * <span class=\"supfact\">v15</span> * <span class=\"supfact\">i</span> +\n                   <span class=\"supfact\">a1</span>) = v10;\n      }\n      <span class=\"supfact\">v29</span> = Number;\n    }\n    result = (unsigned int)<span class=\"supfact\">a6</span>[Number];\n    if ((_DWORD)result) {\n      <span class=\"supfact\">v24</span> = *<span class=\"supfact\">v27</span>;\n      <span class=\"supfact\">v23</span> = <span class=\"supfact\">a7</span> - Number;\n      for (j = Number;; ++j) {\n        result = j;\n        if ((int)j >= <span class=\"supfact\">a8</span>)\n          break;\n        <span class=\"supfact\">v18</span> =\n            *(unsigned __int16 *)(Number * (<span class=\"supfact\">v14</span> * (int)j +\n                                            <span class=\"supfact\">v23</span>) +\n                                  <span class=\"supfact\">a2</span>) +\n            <span class=\"supfact\">v24</span>;\n        if ((<span class=\"supfact\">v18</span> & Number) != Number)\n          v11 = (-<span class=\"supfact\">v18</span> >> Number) & Number;\n        else\n          LOWORD(v11) = *(_WORD *)(Number * (<span class=\"supfact\">v14</span> * (int)j +\n                                             <span class=\"supfact\">v23</span>) +\n                                   <span class=\"supfact\">a2</span>) +\n                        <span class=\"supfact\">v24</span>;\n        *(_WORD *)(Number *\n                       (<span class=\"supfact\">v15</span> * (int)j + <span class=\"supfact\">v23</span>) +\n                   <span class=\"supfact\">a1</span>) = v11;\n      }\n      <span class=\"supfact\">v28</span> = <span class=\"supfact\">a7</span> - Number;\n    }\n  }\n  if (<span class=\"supfact\">v26</span>) {\n    if (<span class=\"supfact\">a6</span>[Number]) {\n      <span class=\"supfact\">v22</span> = *<span class=\"supfact\">v27</span>;\n      for (k = <span class=\"supfact\">v29</span>; k < <span class=\"supfact\">v28</span>; ++k) {\n        <span class=\"supfact\">v17</span> =\n            *(unsigned __int16 *)(Number L * k + <span class=\"supfact\">a2</span>) +\n            <span class=\"supfact\">v22</span>;\n        if ((<span class=\"supfact\">v17</span> & Number) != Number)\n          v12 = (-<span class=\"supfact\">v17</span> >> Number) & Number;\n        else\n          LOWORD(v12) = *(_WORD *)(Number L * k + <span class=\"supfact\">a2</span>) +\n                        <span class=\"supfact\">v22</span>;\n        *(_WORD *)(Number L * k + <span class=\"supfact\">a1</span>) = v12;\n      }\n    }\n    result = (unsigned int)<span class=\"supfact\">a6</span>[Number];\n    if ((_DWORD)result) {\n      <span class=\"supfact\">v21</span> = *<span class=\"supfact\">v27</span>;\n      for (l = <span class=\"supfact\">v29</span>;; ++l) {\n        result = (unsigned int)l;\n        if (l >= <span class=\"supfact\">v28</span>)\n          break;\n        <span class=\"supfact\">v20</span> =\n            <span class=\"supfact\">v14</span> * (<span class=\"supfact\">a8</span> - Number);\n        <span class=\"supfact\">v16</span> =\n            *(unsigned __int16 *)(Number * (l + <span class=\"supfact\">v20</span>) +\n                                  <span class=\"supfact\">a2</span>) +\n            <span class=\"supfact\">v21</span>;\n        if ((<span class=\"supfact\">v16</span> & Number) != Number)\n          v13 = (-<span class=\"supfact\">v16</span> >> Number) & Number;\n        else\n          LOWORD(v13) = *(_WORD *)(Number * (l + <span class=\"supfact\">v20</span>) +\n                                   <span class=\"supfact\">a2</span>) +\n                        <span class=\"supfact\">v21</span>;\n        *(_WORD *)(Number * (l + <span class=\"supfact\">v15</span> *\n                                     (<span class=\"supfact\">a8</span> - Number)) +\n                   <span class=\"supfact\">a1</span>) = v13;\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl sao_edge_restore_0_9(\n    uint8_t *<span class=\"supfact\">_dst</span>, uint8_t *<span class=\"supfact\">_src</span>,\n    ptrdiff_t <span class=\"supfact\">stride_dst</span>, ptrdiff_t <span class=\"supfact\">stride_src</span>,\n    SAOParams_0 *<span class=\"supfact\">sao</span>, int *<span class=\"supfact\">borders</span>,\n    int <span class=\"supfact\">_width</span>, int <span class=\"supfact\">_height</span>,\n    int <span class=\"supfact\">c_idx</span>, uint8_t *vert_edge, uint8_t *horiz_edge,\n    uint8_t *diag_edge) {\n  int v12;\n  int v13;\n  int v14;\n  int v15;\n  unsigned __int64 <span class=\"supfact\">stride_srca</span>;\n  unsigned __int64 <span class=\"supfact\">stride_dsta</span>;\n  int <span class=\"supfact\">v18</span>;\n  int <span class=\"supfact\">v19</span>;\n  int <span class=\"supfact\">v20</span>;\n  int <span class=\"supfact\">v21</span>;\n  ptrdiff_t <span class=\"supfact\">y_stride_src</span>;\n  int <span class=\"supfact\">offset_val_2</span>;\n  int <span class=\"supfact\">offset_val_1</span>;\n  int <span class=\"supfact\">offset</span>;\n  int <span class=\"supfact\">offset_val_0</span>;\n  int <span class=\"supfact\">offset_val</span>;\n  int <span class=\"supfact\">sao_eo_class</span>;\n  int16_t *<span class=\"supfact\">sao_offset_val</span>;\n  int <span class=\"supfact\">width</span>;\n  int <span class=\"supfact\">init_x</span>;\n  int <span class=\"supfact\">y</span>;\n  int x;\n  int xa;\n  int xb;\n  <span class=\"supfact\">sao_offset_val</span> =\n      <span class=\"supfact\">sao</span>-><span class=\"supfact\">offset_val</span>[<span class=\"supfact\">c_idx</span>];\n  <span class=\"supfact\">sao_eo_class</span> =\n      <span class=\"supfact\">sao</span>->eo_class[<span class=\"supfact\">c_idx</span>];\n  <span class=\"supfact\">init_x</span> = Number;\n  <span class=\"supfact\">width</span> = <span class=\"supfact\">_width</span>;\n  <span class=\"supfact\">stride_dsta</span> =\n      (unsigned __int64)<span class=\"supfact\">stride_dst</span> >> Number;\n  <span class=\"supfact\">stride_srca</span> =\n      (unsigned __int64)<span class=\"supfact\">stride_src</span> >> Number;\n  if (<span class=\"supfact\">sao_eo_class</span> != Number) {\n    if (*<span class=\"supfact\">borders</span>) {\n      <span class=\"supfact\">offset_val</span> = *<span class=\"supfact\">sao_offset_val</span>;\n      for (<span class=\"supfact\">y</span> = Number;\n           <span class=\"supfact\">y</span> < <span class=\"supfact\">_height</span>; ++<span class=\"supfact\">y</span>) {\n        <span class=\"supfact\">v21</span> =\n            *(unsigned __int16\n                  *)&<span class=\"supfact\">_src</span>[Number * <span class=\"supfact\">stride_srca</span> *\n                                          <span class=\"supfact\">y</span>] +\n            <span class=\"supfact\">offset_val</span>;\n        if ((<span class=\"supfact\">v21</span> & Number) != Number)\n          v12 = (-<span class=\"supfact\">v21</span> >> Number) & Number;\n        else\n          LOWORD(v12) =\n              *(_WORD *)&<span class=\"supfact\">_src</span>[Number *\n                                              <span class=\"supfact\">stride_srca</span> *\n                                              <span class=\"supfact\">y</span>] +\n              <span class=\"supfact\">offset_val</span>;\n        *(_WORD *)&<span class=\"supfact\">_dst</span>[Number * <span class=\"supfact\">stride_dsta</span> *\n                                        <span class=\"supfact\">y</span>] = v12;\n      }\n      <span class=\"supfact\">init_x</span> = Number;\n    }\n    if (<span class=\"supfact\">borders</span>[Number]) {\n      <span class=\"supfact\">offset_val_0</span> = *<span class=\"supfact\">sao_offset_val</span>;\n      <span class=\"supfact\">offset</span> = <span class=\"supfact\">_width</span> - Number;\n      for (x = Number; x < <span class=\"supfact\">_height</span>; ++x) {\n        <span class=\"supfact\">v20</span> =\n            *(unsigned __int16\n                  *)&<span class=\"supfact\">_src</span>[Number * <span class=\"supfact\">stride_srca</span> *\n                                              x +\n                                          Number * <span class=\"supfact\">offset</span>] +\n            <span class=\"supfact\">offset_val_0</span>;\n        if ((<span class=\"supfact\">v20</span> & Number) != Number)\n          v13 = (-<span class=\"supfact\">v20</span> >> Number) & Number;\n        else\n          LOWORD(v13) =\n              *(_WORD *)&<span class=\"supfact\">_src</span>[Number *\n                                                  <span class=\"supfact\">stride_srca</span> *\n                                                  x +\n                                              Number * <span class=\"supfact\">offset</span>] +\n              <span class=\"supfact\">offset_val_0</span>;\n        *(_WORD\n              *)&<span class=\"supfact\">_dst</span>[Number * <span class=\"supfact\">stride_dsta</span> * x +\n                                      Number * <span class=\"supfact\">offset</span>] = v13;\n      }\n      <span class=\"supfact\">width</span> = <span class=\"supfact\">_width</span> - Number;\n    }\n  }\n  if (<span class=\"supfact\">sao_eo_class</span>) {\n    if (<span class=\"supfact\">borders</span>[Number]) {\n      <span class=\"supfact\">offset_val_1</span> = *<span class=\"supfact\">sao_offset_val</span>;\n      for (xa = <span class=\"supfact\">init_x</span>; xa < <span class=\"supfact\">width</span>; ++xa) {\n        <span class=\"supfact\">v19</span> =\n            *(unsigned __int16 *)&<span class=\"supfact\">_src</span>[Number * xa] +\n            <span class=\"supfact\">offset_val_1</span>;\n        if ((<span class=\"supfact\">v19</span> & Number) != Number)\n          v14 = (-<span class=\"supfact\">v19</span> >> Number) & Number;\n        else\n          LOWORD(v14) = *(_WORD *)&<span class=\"supfact\">_src</span>[Number * xa] +\n                        <span class=\"supfact\">offset_val_1</span>;\n        *(_WORD *)&<span class=\"supfact\">_dst</span>[Number * xa] = v14;\n      }\n    }\n    if (<span class=\"supfact\">borders</span>[Number]) {\n      <span class=\"supfact\">offset_val_2</span> = *<span class=\"supfact\">sao_offset_val</span>;\n      for (xb = <span class=\"supfact\">init_x</span>; xb < <span class=\"supfact\">width</span>; ++xb) {\n        <span class=\"supfact\">y_stride_src</span> =\n            <span class=\"supfact\">stride_srca</span> * (<span class=\"supfact\">_height</span> - Number);\n        <span class=\"supfact\">v18</span> =\n            *(unsigned __int16 *)&<span class=\"supfact\">_src</span>\n                [Number * xb + Number * <span class=\"supfact\">y_stride_src</span>] +\n            <span class=\"supfact\">offset_val_2</span>;\n        if ((<span class=\"supfact\">v18</span> & Number) != Number)\n          v15 = (-<span class=\"supfact\">v18</span> >> Number) & Number;\n        else\n          LOWORD(v15) =\n              *(_WORD *)&<span class=\"supfact\">_src</span>\n                  [Number * xb + Number * <span class=\"supfact\">y_stride_src</span>] +\n              <span class=\"supfact\">offset_val_2</span>;\n        *(_WORD *)&<span class=\"supfact\">_dst</span>[Number * xb +\n                                        Number * <span class=\"supfact\">stride_dsta</span> *\n                                            (<span class=\"supfact\">_height</span> -\n                                             Number)] = v15;\n      }\n    }\n  }\n}", "var": [{"name": "a1", "type": "uint8_t *", "pred_name": "_dst", "ref_name": "_dst", "ref_type": "uint8_t *"}, {"name": "a2", "type": "uint8_t *", "pred_name": "_src", "ref_name": "_src", "ref_type": "uint8_t *"}, {"name": "a3", "type": "ptrdiff_t", "pred_name": "stride", "ref_name": "stride_dst", "ref_type": "ptrdiff_t"}, {"name": "a4", "type": "SAOParams_0 *", "pred_name": "sao", "ref_name": "stride_src", "ref_type": "ptrdiff_t"}, {"name": "a5", "type": "int *", "pred_name": "borders", "ref_name": "sao", "ref_type": "SAOParams_0 *"}, {"name": "a6", "type": "int", "pred_name": "_width", "ref_name": "borders", "ref_type": "int *"}, {"name": "a7", "type": "int", "pred_name": "_height", "ref_name": "_width", "ref_type": "int"}, {"name": "a8", "type": "int", "pred_name": "c_idx", "ref_name": "_height", "ref_type": "int"}, {"name": "a9", "type": "int", "pred_name": "classa", "ref_name": "c_idx", "ref_type": "int"}, {"name": "v14", "type": "unsigned __int64", "pred_name": "stridea", "ref_name": "stride_srca", "ref_type": "unsigned __int64"}, {"name": "v15", "type": "int16_t *", "pred_name": "coeffsa", "ref_name": "stride_dsta", "ref_type": "unsigned __int64"}, {"name": "v16", "type": "int", "pred_name": "v15", "ref_name": "v18", "ref_type": "int"}, {"name": "v17", "type": "int", "pred_name": "v16", "ref_name": "v19", "ref_type": "int"}, {"name": "v18", "type": "int", "pred_name": "v17", "ref_name": "v20", "ref_type": "int"}, {"name": "v19", "type": "int", "pred_name": "v18", "ref_name": "v21", "ref_type": "int"}, {"name": "v20", "type": "int16_t *", "pred_name": "v19", "ref_name": "y_stride_src", "ref_type": "ptrdiff_t"}, {"name": "v21", "type": "int", "pred_name": "diff0", "ref_name": "offset_val_2", "ref_type": "int"}, {"name": "v22", "type": "int", "pred_name": "pos_1_0", "ref_name": "offset_val_1", "ref_type": "int"}, {"name": "v23", "type": "int", "pred_name": "pos_0_0", "ref_name": "offset", "ref_type": "int"}, {"name": "v24", "type": "int", "pred_name": "offset_val_0", "ref_name": "offset_val_0", "ref_type": "int"}, {"name": "v25", "type": "int", "pred_name": "offset_val", "ref_name": "offset_val", "ref_type": "int"}, {"name": "v26", "type": "int", "pred_name": "sao_eo_class", "ref_name": "sao_eo_class", "ref_type": "int"}, {"name": "v27", "type": "int *", "pred_name": "sao_offset_val", "ref_name": "sao_offset_val", "ref_type": "int16_t *"}, {"name": "v28", "type": "int", "pred_name": "width", "ref_name": "width", "ref_type": "int"}, {"name": "v29", "type": "int", "pred_name": "init_x", "ref_name": "init_x", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "y", "ref_name": "y", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "tbeu", "repo_name": "ExternData", "path": "tbeu/ExternData/5bef1c3f1431a5db2ae828c5f6fdf1a320d72d6f65256e3fd6c69023dfc11e07", "path_in_repo": "tbeu/ExternData/ExternData/Resources/C-Sources/expat/lib/xmlparse.o", "objdump": "000000000000193e <destroyBindings>:\n    193e:\t55                   \tpush   %rbp\n    193f:\t48 89 e5             \tmov    %rsp,%rbp\n    1942:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1946:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    194a:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    194e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1952:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1956:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    195b:\t74 34                \tje     1991 <destroyBindings+0x53>\n    195d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1961:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1965:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1969:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    196d:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n    1971:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1975:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1979:\t48 89 c7             \tmov    %rax,%rdi\n    197c:\tff d2                \tcallq  *%rdx\n    197e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1982:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n    1986:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    198a:\t48 89 c7             \tmov    %rax,%rdi\n    198d:\tff d2                \tcallq  *%rdx\n    198f:\teb bd                \tjmp    194e <destroyBindings+0x10>\n    1991:\t90                   \tnop\n    1992:\t90                   \tnop\n    1993:\tc9                   \tleaveq \n    1994:\tc3                   \tretq   ", "code_s": "__int64 __fastcall destroyBindings(__int64 <span class=\"supfact\">a1</span>,\n                                   __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  while (Number) {\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>;\n    <span class=\"supfact\">v4</span> = <span class=\"supfact\">a1</span>;\n    if (!<span class=\"supfact\">a1</span>)\n      break;\n    <span class=\"supfact\">a1</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n    (*(void(__fastcall **)(_QWORD))(<span class=\"supfact\">a2</span> + Number))(\n        *(_QWORD *)(<span class=\"supfact\">v4</span> + Number));\n    (*(void(__fastcall **)(__int64))(<span class=\"supfact\">a2</span> + Number))(\n        <span class=\"supfact\">v4</span>);\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl destroyBindings(BINDING *<span class=\"supfact\">bindings</span>,\n                             XML_Parser <span class=\"supfact\">parser</span>) {\n  BINDING *<span class=\"supfact\">b</span>;\n  while (Number) {\n    <span class=\"supfact\">b</span> = <span class=\"supfact\">bindings</span>;\n    if (!<span class=\"supfact\">bindings</span>)\n      break;\n    <span class=\"supfact\">bindings</span> = <span class=\"supfact\">bindings</span>->nextTagBinding;\n    <span class=\"supfact\">parser</span>->m_mem.free_fcn(<span class=\"supfact\">b</span>->uri);\n    <span class=\"supfact\">parser</span>->m_mem.free_fcn(<span class=\"supfact\">b</span>);\n  }\n}", "var": [{"name": "a1", "type": "private_ike_sa_t_0 *", "pred_name": "this", "ref_name": "bindings", "ref_type": "BINDING *"}, {"name": "a2", "type": "child_sa_t_0 *", "pred_name": "child_sa", "ref_name": "parser", "ref_type": "XML_Parser"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v4", "type": "child_sa_t_0 *", "pred_name": "child_sa", "ref_name": "b", "ref_type": "BINDING *"}], "body_in_train": false}, {"repo_owner": "wnoguchi", "repo_name": "hikari_denwa_asterisk", "path": "wnoguchi/hikari_denwa_asterisk/513dcb0a92eafe6237d3f1016fb0a9d8e0e0abaa48a3af0a523fb3d2c8d326f6", "path_in_repo": "wnoguchi/hikari_denwa_asterisk/asterisk-11.0.1/res/pjproject/pjnath/bin/pjturn-client-x86_64-unknown-linux-gnu", "objdump": "00000000004252f4 <pj_inet_ntop>:\n  4252f4:\t55                   \tpush   %rbp\n  4252f5:\t48 89 e5             \tmov    %rsp,%rbp\n  4252f8:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4252fc:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  4252ff:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  425303:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  425307:\t89 4d e8             \tmov    %ecx,-0x18(%rbp)\n  42530a:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  42530f:\t74 0d                \tje     42531e <pj_inet_ntop+0x2a>\n  425311:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  425316:\t74 06                \tje     42531e <pj_inet_ntop+0x2a>\n  425318:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  42531c:\t75 37                \tjne    425355 <pj_inet_ntop+0x61>\n  42531e:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  425323:\t74 0d                \tje     425332 <pj_inet_ntop+0x3e>\n  425325:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  42532a:\t74 06                \tje     425332 <pj_inet_ntop+0x3e>\n  42532c:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  425330:\t75 19                \tjne    42534b <pj_inet_ntop+0x57>\n  425332:\tb9 10 7e 43 00       \tmov    $0x437e10,%ecx\n  425337:\tba 69 01 00 00       \tmov    $0x169,%edx\n  42533c:\tbe ec 7c 43 00       \tmov    $0x437cec,%esi\n  425341:\tbf 52 7d 43 00       \tmov    $0x437d52,%edi\n  425346:\te8 45 dd fd ff       \tcallq  403090 <__assert_fail@plt>\n  42534b:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n  425350:\te9 94 00 00 00       \tjmpq   4253e9 <pj_inet_ntop+0xf5>\n  425355:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  425359:\tc6 00 00             \tmovb   $0x0,(%rax)\n  42535c:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  425361:\t0f b7 c0             \tmovzwl %ax,%eax\n  425364:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  425367:\t74 47                \tje     4253b0 <pj_inet_ntop+0xbc>\n  425369:\tb8 0a 00 00 00       \tmov    $0xa,%eax\n  42536e:\t0f b7 c0             \tmovzwl %ax,%eax\n  425371:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  425374:\t74 3a                \tje     4253b0 <pj_inet_ntop+0xbc>\n  425376:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  42537b:\t0f b7 c0             \tmovzwl %ax,%eax\n  42537e:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  425381:\t74 26                \tje     4253a9 <pj_inet_ntop+0xb5>\n  425383:\tb8 0a 00 00 00       \tmov    $0xa,%eax\n  425388:\t0f b7 c0             \tmovzwl %ax,%eax\n  42538b:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  42538e:\t74 19                \tje     4253a9 <pj_inet_ntop+0xb5>\n  425390:\tb9 10 7e 43 00       \tmov    $0x437e10,%ecx\n  425395:\tba 6d 01 00 00       \tmov    $0x16d,%edx\n  42539a:\tbe ec 7c 43 00       \tmov    $0x437cec,%esi\n  42539f:\tbf 18 7d 43 00       \tmov    $0x437d18,%edi\n  4253a4:\te8 e7 dc fd ff       \tcallq  403090 <__assert_fail@plt>\n  4253a9:\tb8 86 11 01 00       \tmov    $0x11186,%eax\n  4253ae:\teb 39                \tjmp    4253e9 <pj_inet_ntop+0xf5>\n  4253b0:\t8b 4d e8             \tmov    -0x18(%rbp),%ecx\n  4253b3:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4253b7:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n  4253bb:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4253be:\t89 c7                \tmov    %eax,%edi\n  4253c0:\te8 eb dc fd ff       \tcallq  4030b0 <inet_ntop@plt>\n  4253c5:\t48 85 c0             \ttest   %rax,%rax\n  4253c8:\t75 1a                \tjne    4253e4 <pj_inet_ntop+0xf0>\n  4253ca:\te8 71 ed ff ff       \tcallq  424140 <pj_get_netos_error>\n  4253cf:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4253d2:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4253d6:\t75 07                \tjne    4253df <pj_inet_ntop+0xeb>\n  4253d8:\tc7 45 fc 71 11 01 00 \tmovl   $0x11171,-0x4(%rbp)\n  4253df:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4253e2:\teb 05                \tjmp    4253e9 <pj_inet_ntop+0xf5>\n  4253e4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4253e9:\tc9                   \tleaveq \n  4253ea:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_inet_ntop(int <span class=\"supfact\">a1</span>,\n                                const void *<span class=\"supfact\">a2</span>,\n                                char *<span class=\"supfact\">a3</span>,\n                                socklen_t <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  unsigned int <span class=\"supfact\">v5</span>;\n  if (<span class=\"supfact\">a2</span> && <span class=\"supfact\">a3</span> && <span class=\"supfact\">a4</span>) {\n    *<span class=\"supfact\">a3</span> = Number;\n    if (<span class=\"supfact\">a1</span> != Number && <span class=\"supfact\">a1</span> != Number)\n      __assert_fail(String, String, Number, String);\n    if (inet_ntop(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>,\n                  <span class=\"supfact\">a4</span>)) {\n      <span class=\"supfact\">result</span> = Number L;\n    } else {\n      <span class=\"supfact\">v5</span> = pj_get_netos_error();\n      if (!<span class=\"supfact\">v5</span>)\n        <span class=\"supfact\">v5</span> = Number;\n      <span class=\"supfact\">result</span> = <span class=\"supfact\">v5</span>;\n    }\n  } else {\n    if (!<span class=\"supfact\">a2</span> || !<span class=\"supfact\">a3</span> || !<span class=\"supfact\">a4</span>)\n      __assert_fail(String, String, Number, String);\n    <span class=\"supfact\">result</span> = Number L;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "pj_status_t __cdecl pj_inet_ntop(int <span class=\"supfact\">af_0</span>,\n                                 const void *<span class=\"supfact\">src</span>,\n                                 char *<span class=\"supfact\">dst</span>,\n                                 int <span class=\"supfact\">size</span>) {\n  pj_status_t <span class=\"supfact\">result</span>;\n  pj_status_t <span class=\"supfact\">status</span>;\n  if (<span class=\"supfact\">src</span> && <span class=\"supfact\">dst</span> && <span class=\"supfact\">size</span>) {\n    *<span class=\"supfact\">dst</span> = Number;\n    if (<span class=\"supfact\">af_0</span> != Number && <span class=\"supfact\">af_0</span> != Number)\n      __assert_fail(String, String, Number, String);\n    if (inet_ntop(<span class=\"supfact\">af_0</span>, <span class=\"supfact\">src</span>,\n                  <span class=\"supfact\">dst</span>, <span class=\"supfact\">size</span>)) {\n      <span class=\"supfact\">result</span> = Number;\n    } else {\n      <span class=\"supfact\">status</span> = pj_get_netos_error();\n      if (!<span class=\"supfact\">status</span>)\n        <span class=\"supfact\">status</span> = Number;\n      <span class=\"supfact\">result</span> = <span class=\"supfact\">status</span>;\n    }\n  } else {\n    if (!<span class=\"supfact\">src</span> || !<span class=\"supfact\">dst</span> || !<span class=\"supfact\">size</span>)\n      __assert_fail(String, String, Number, String);\n    <span class=\"supfact\">result</span> = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "af_0", "ref_name": "af_0", "ref_type": "int"}, {"name": "a2", "type": "const void *", "pred_name": "src", "ref_name": "src", "ref_type": "const void *"}, {"name": "a3", "type": "char *", "pred_name": "dst", "ref_name": "dst", "ref_type": "char *"}, {"name": "a4", "type": "int", "pred_name": "size", "ref_name": "size", "ref_type": "int"}, {"name": "result", "type": "pj_status_t", "pred_name": "result", "ref_name": "result", "ref_type": "pj_status_t"}, {"name": "v5", "type": "pj_status_t", "pred_name": "status", "ref_name": "status", "ref_type": "pj_status_t"}], "body_in_train": true}, {"repo_owner": "hskarachiwala", "repo_name": "SecurityModule", "path": "hskarachiwala/SecurityModule/c7109f8fd1d5f0bf399eeadb5155b374888835f6d224866a86858cf8031138cc", "path_in_repo": "hskarachiwala/SecurityModule//gatorenc", "objdump": "", "code_s": "void rewind(FILE *<span class=\"supfact\">stream</span>) { rewind(<span class=\"supfact\">stream</span>); }", "code_t": "void rewind(FILE *<span class=\"supfact\">stream</span>) { rewind(<span class=\"supfact\">stream</span>); }", "var": [{"name": "stream", "type": "FILE *", "pred_name": "stream", "ref_name": "stream", "ref_type": "FILE *"}], "body_in_train": true}, {"repo_owner": "mariuz", "repo_name": "quake2-iccullus", "path": "mariuz/quake2-iccullus/cadf3df8ffe913c4282255aeb39e9ae6284ee2693344d2d6b286852fe375e4ea", "path_in_repo": "mariuz/quake2-iccullus//debugx86_64/game/p_client.o", "objdump": "0000000000000cfc <TossClientWeapon>:\n     cfc:\t55                   \tpush   %rbp\n     cfd:\t48 89 e5             \tmov    %rsp,%rbp\n     d00:\t48 83 ec 30          \tsub    $0x30,%rsp\n     d04:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     d08:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d0f <TossClientWeapon+0x13>\n     d0f:\t48 8b 00             \tmov    (%rax),%rax\n     d12:\tf3 0f 10 40 20       \tmovss  0x20(%rax),%xmm0\n     d17:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n     d1b:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n     d1e:\t7a 0d                \tjp     d2d <TossClientWeapon+0x31>\n     d20:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n     d24:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n     d27:\t0f 84 65 02 00 00    \tje     f92 <TossClientWeapon+0x296>\n     d2d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d31:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     d35:\t48 8b 80 00 07 00 00 \tmov    0x700(%rax),%rax\n     d3c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d40:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d44:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     d48:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     d4c:\t48 8b 52 58          \tmov    0x58(%rdx),%rdx\n     d50:\t8b 92 d4 0d 00 00    \tmov    0xdd4(%rdx),%edx\n     d56:\t48 63 d2             \tmovslq %edx,%rdx\n     d59:\t48 81 c2 b8 00 00 00 \tadd    $0xb8,%rdx\n     d60:\t8b 44 90 08          \tmov    0x8(%rax,%rdx,4),%eax\n     d64:\t85 c0                \ttest   %eax,%eax\n     d66:\t75 08                \tjne    d70 <TossClientWeapon+0x74>\n     d68:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     d6f:\t00 \n     d70:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     d75:\t74 23                \tje     d9a <TossClientWeapon+0x9e>\n     d77:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     d7b:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     d7f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # d86 <TossClientWeapon+0x8a>\n     d86:\t48 89 c7             \tmov    %rax,%rdi\n     d89:\te8 00 00 00 00       \tcallq  d8e <TossClientWeapon+0x92>\n     d8e:\t85 c0                \ttest   %eax,%eax\n     d90:\t75 08                \tjne    d9a <TossClientWeapon+0x9e>\n     d92:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     d99:\t00 \n     d9a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # da1 <TossClientWeapon+0xa5>\n     da1:\t48 8b 00             \tmov    (%rax),%rax\n     da4:\tf3 0f 10 40 20       \tmovss  0x20(%rax),%xmm0\n     da9:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n     dad:\t25 00 40 00 00       \tand    $0x4000,%eax\n     db2:\t85 c0                \ttest   %eax,%eax\n     db4:\t75 09                \tjne    dbf <TossClientWeapon+0xc3>\n     db6:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n     dbd:\teb 2c                \tjmp    deb <TossClientWeapon+0xef>\n     dbf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     dc3:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     dc7:\tf3 0f 10 80 9c 0e 00 \tmovss  0xe9c(%rax),%xmm0\n     dce:\t00 \n     dcf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # dd6 <TossClientWeapon+0xda>\n     dd6:\t8b 00                \tmov    (%rax),%eax\n     dd8:\t83 c0 0a             \tadd    $0xa,%eax\n     ddb:\tf3 0f 2a c8          \tcvtsi2ss %eax,%xmm1\n     ddf:\t0f 2f c1             \tcomiss %xmm1,%xmm0\n     de2:\t0f 97 c0             \tseta   %al\n     de5:\t0f b6 c0             \tmovzbl %al,%eax\n     de8:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     deb:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     df0:\t74 15                \tje     e07 <TossClientWeapon+0x10b>\n     df2:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     df6:\t74 0f                \tje     e07 <TossClientWeapon+0x10b>\n     df8:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # e00 <TossClientWeapon+0x104>\n     dff:\t00 \n     e00:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n     e05:\teb 09                \tjmp    e10 <TossClientWeapon+0x114>\n     e07:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n     e0b:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n     e10:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     e15:\t74 6f                \tje     e86 <TossClientWeapon+0x18a>\n     e17:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     e1b:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     e1f:\tf3 0f 10 80 58 0e 00 \tmovss  0xe58(%rax),%xmm0\n     e26:\t00 \n     e27:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     e2b:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     e2f:\tf3 0f 5c 45 f0       \tsubss  -0x10(%rbp),%xmm0\n     e34:\tf3 0f 11 80 58 0e 00 \tmovss  %xmm0,0xe58(%rax)\n     e3b:\t00 \n     e3c:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     e40:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     e44:\t48 89 d6             \tmov    %rdx,%rsi\n     e47:\t48 89 c7             \tmov    %rax,%rdi\n     e4a:\te8 00 00 00 00       \tcallq  e4f <TossClientWeapon+0x153>\n     e4f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     e53:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     e57:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     e5b:\tf3 0f 10 80 58 0e 00 \tmovss  0xe58(%rax),%xmm0\n     e62:\t00 \n     e63:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     e67:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     e6b:\tf3 0f 58 45 f0       \taddss  -0x10(%rbp),%xmm0\n     e70:\tf3 0f 11 80 58 0e 00 \tmovss  %xmm0,0xe58(%rax)\n     e77:\t00 \n     e78:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e7c:\tc7 80 40 01 00 00 00 \tmovl   $0x20000,0x140(%rax)\n     e83:\t00 02 00 \n     e86:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     e8a:\t0f 84 03 01 00 00    \tje     f93 <TossClientWeapon+0x297>\n     e90:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     e94:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     e98:\tf3 0f 10 80 58 0e 00 \tmovss  0xe58(%rax),%xmm0\n     e9f:\t00 \n     ea0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ea4:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     ea8:\tf3 0f 58 45 f0       \taddss  -0x10(%rbp),%xmm0\n     ead:\tf3 0f 11 80 58 0e 00 \tmovss  %xmm0,0xe58(%rax)\n     eb4:\t00 \n     eb5:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # ebc <TossClientWeapon+0x1c0>\n     ebc:\te8 00 00 00 00       \tcallq  ec1 <TossClientWeapon+0x1c5>\n     ec1:\t48 89 c2             \tmov    %rax,%rdx\n     ec4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ec8:\t48 89 d6             \tmov    %rdx,%rsi\n     ecb:\t48 89 c7             \tmov    %rax,%rdi\n     ece:\te8 00 00 00 00       \tcallq  ed3 <TossClientWeapon+0x1d7>\n     ed3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     ed7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     edb:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     edf:\tf3 0f 10 80 58 0e 00 \tmovss  0xe58(%rax),%xmm0\n     ee6:\t00 \n     ee7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     eeb:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     eef:\tf3 0f 5c 45 f0       \tsubss  -0x10(%rbp),%xmm0\n     ef4:\tf3 0f 11 80 58 0e 00 \tmovss  %xmm0,0xe58(%rax)\n     efb:\t00 \n     efc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f00:\t8b 80 40 01 00 00    \tmov    0x140(%rax),%eax\n     f06:\t0d 00 00 02 00       \tor     $0x20000,%eax\n     f0b:\t89 c2                \tmov    %eax,%edx\n     f0d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f11:\t89 90 40 01 00 00    \tmov    %edx,0x140(%rax)\n     f17:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f1b:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # f22 <TossClientWeapon+0x226>\n     f22:\t48 89 90 20 02 00 00 \tmov    %rdx,0x220(%rax)\n     f29:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f30 <TossClientWeapon+0x234>\n     f30:\tf3 0f 10 40 04       \tmovss  0x4(%rax),%xmm0\n     f35:\tf3 0f 5a c8          \tcvtss2sd %xmm0,%xmm1\n     f39:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f3d:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n     f41:\tf3 0f 10 80 9c 0e 00 \tmovss  0xe9c(%rax),%xmm0\n     f48:\t00 \n     f49:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f50 <TossClientWeapon+0x254>\n     f50:\t8b 00                \tmov    (%rax),%eax\n     f52:\tf3 0f 2a d0          \tcvtsi2ss %eax,%xmm2\n     f56:\tf3 0f 5c c2          \tsubss  %xmm2,%xmm0\n     f5a:\tf3 0f 5a d0          \tcvtss2sd %xmm0,%xmm2\n     f5e:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # f66 <TossClientWeapon+0x26a>\n     f65:\t00 \n     f66:\tf2 0f 59 c2          \tmulsd  %xmm2,%xmm0\n     f6a:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     f6e:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n     f72:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f76:\tf3 0f 11 80 00 02 00 \tmovss  %xmm0,0x200(%rax)\n     f7d:\t00 \n     f7e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     f82:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # f89 <TossClientWeapon+0x28d>\n     f89:\t48 89 90 10 02 00 00 \tmov    %rdx,0x210(%rax)\n     f90:\teb 01                \tjmp    f93 <TossClientWeapon+0x297>\n     f92:\t90                   \tnop\n     f93:\tc9                   \tleaveq \n     f94:\tc3                   \tretq   ", "code_s": "__int64 __fastcall TossClientWeapon(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 result;\n  float v2;\n  float <span class=\"supfact\">v3</span>;\n  __int64 v4;\n  float v5;\n  float <span class=\"supfact\">v6</span>;\n  _BOOL4 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  result = deathmatch;\n  if (*(float *)(deathmatch + Number L) != Number) {\n    <span class=\"supfact\">v8</span> =\n        *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L);\n    if (!*(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                     Number *\n                         (*(int *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                                   Number L) +\n                          Number L) +\n                     Number))\n      <span class=\"supfact\">v8</span> = Number L;\n    if (<span class=\"supfact\">v8</span> &&\n        !strcmp(*(const char **)(<span class=\"supfact\">v8</span> + Number), String))\n      <span class=\"supfact\">v8</span> = Number L;\n    result = (int)*(float *)(dmflags + Number L) & Number;\n    if ((_DWORD)result) {\n      v2 = *(float *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L);\n      <span class=\"supfact\">v3</span> = (float)(LODWORD(level[Number]) + Number);\n      result = v2 > <span class=\"supfact\">v3</span>;\n      <span class=\"supfact\">v7</span> = v2 > <span class=\"supfact\">v3</span>;\n    } else {\n      <span class=\"supfact\">v7</span> = Number;\n    }\n    if (<span class=\"supfact\">v8</span> && <span class=\"supfact\">v7</span>)\n      <span class=\"supfact\">v6</span> = Number;\n    else\n      <span class=\"supfact\">v6</span> = Number;\n    if (<span class=\"supfact\">v8</span>) {\n      *(float *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n          *(float *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) -\n          <span class=\"supfact\">v6</span>;\n      result = Drop_Item(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v8</span>);\n      *(float *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n          *(float *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) +\n          <span class=\"supfact\">v6</span>;\n      *(_DWORD *)(result + Number) = Number;\n    }\n    if (<span class=\"supfact\">v7</span>) {\n      *(float *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n          *(float *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) +\n          <span class=\"supfact\">v6</span>;\n      v4 = FindItemByClassname(String);\n      result = Drop_Item(<span class=\"supfact\">a1</span>, v4);\n      *(float *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n          *(float *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) -\n          <span class=\"supfact\">v6</span>;\n      *(_DWORD *)(result + Number) |= Number;\n      *(_QWORD *)(result + Number) = &Touch_Item;\n      v5 =\n          Number * (float)(*(float *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                                      Number L) -\n                           (float)SLODWORD(level[Number])) +\n          level[Number];\n      *(float *)(result + Number) = v5;\n      *(_QWORD *)(result + Number) = &G_FreeEdict;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl TossClientWeapon(edict_t *<span class=\"supfact\">self</span>) {\n  __int64 v1;\n  float v2;\n  edict_t *drop;\n  edict_t *dropa;\n  float <span class=\"supfact\">spread</span>;\n  _BOOL4 <span class=\"supfact\">quad</span>;\n  gitem_t *<span class=\"supfact\">item</span>;\n  if (*(float *)(deathmatch + Number L) != Number) {\n    <span class=\"supfact\">item</span> = <span class=\"supfact\">self</span>->client->pers.weapon;\n    if (!<span class=\"supfact\">self</span>->client->pers\n             .inventory[<span class=\"supfact\">self</span>->client->ammo_index])\n      <span class=\"supfact\">item</span> = Number L;\n    if (<span class=\"supfact\">item</span> &&\n        !strcmp(<span class=\"supfact\">item</span>->pickup_name, String))\n      <span class=\"supfact\">item</span> = Number L;\n    if (((int)*(float *)(dmflags + Number L) & Number) != Number)\n      <span class=\"supfact\">quad</span> = <span class=\"supfact\">self</span>->client->quad_framenum >\n                             (float)(LODWORD(level[Number]) + Number);\n    else\n      <span class=\"supfact\">quad</span> = Number;\n    if (<span class=\"supfact\">item</span> && <span class=\"supfact\">quad</span>)\n      <span class=\"supfact\">spread</span> = Number;\n    else\n      <span class=\"supfact\">spread</span> = Number;\n    if (<span class=\"supfact\">item</span>) {\n      <span class=\"supfact\">self</span>->client->v_angle[Number] =\n          <span class=\"supfact\">self</span>->client->v_angle[Number] -\n          <span class=\"supfact\">spread</span>;\n      drop = (edict_t *)Drop_Item(<span class=\"supfact\">self</span>, <span class=\"supfact\">item</span>);\n      <span class=\"supfact\">self</span>->client->v_angle[Number] =\n          <span class=\"supfact\">self</span>->client->v_angle[Number] +\n          <span class=\"supfact\">spread</span>;\n      drop->spawnflags = Number;\n    }\n    if (<span class=\"supfact\">quad</span>) {\n      <span class=\"supfact\">self</span>->client->v_angle[Number] =\n          <span class=\"supfact\">self</span>->client->v_angle[Number] +\n          <span class=\"supfact\">spread</span>;\n      v1 = FindItemByClassname(String);\n      dropa = (edict_t *)Drop_Item(<span class=\"supfact\">self</span>, v1);\n      <span class=\"supfact\">self</span>->client->v_angle[Number] =\n          <span class=\"supfact\">self</span>->client->v_angle[Number] -\n          <span class=\"supfact\">spread</span>;\n      dropa->spawnflags |= Number;\n      dropa->touch =\n          (void (*)(edict_t *, edict_t *, cplane_t *, csurface_t *)) &\n          Touch_Item;\n      v2 = Number * (float)(<span class=\"supfact\">self</span>->client->quad_framenum -\n                            (float)SLODWORD(level[Number])) +\n           level[Number];\n      dropa->nextthink = v2;\n      dropa->think = (void (*)(edict_t *)) & G_FreeEdict;\n    }\n  }\n}", "var": [{"name": "a1", "type": "edict_t *", "pred_name": "ent", "ref_name": "self", "ref_type": "edict_t *"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v6", "type": "float", "pred_name": "spread", "ref_name": "spread", "ref_type": "float"}, {"name": "v7", "type": "_BOOL4", "pred_name": "quad", "ref_name": "quad", "ref_type": "_BOOL4"}, {"name": "v8", "type": "gitem_t *", "pred_name": "item", "ref_name": "item", "ref_type": "gitem_t *"}], "body_in_train": true}]