[{"repo_owner": "dyladan", "repo_name": "dwm", "path": "dyladan/dwm/a396688e04253fe0c27221b96bf2ebff479cfd36fb5fad735290b598ace44795", "path_in_repo": "dyladan/dwm//dwm", "objdump": "", "code_s": "__int64 __fastcall sub_40B5F4(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">j</span>;\n  for (<span class=\"supfact\">i</span> = qword_4101C0; <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number)) {\n    for (<span class=\"supfact\">j</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number);\n         <span class=\"supfact\">j</span>;\n         <span class=\"supfact\">j</span> = *(_QWORD *)(<span class=\"supfact\">j</span> + Number)) {\n      if (<span class=\"supfact\">a1</span> == *(_QWORD *)(<span class=\"supfact\">j</span> + Number))\n        return <span class=\"supfact\">j</span>;\n    }\n  }\n  return Number L;\n}", "code_t": "__int64 __fastcall sub_40B5F4(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">j</span>;\n  for (<span class=\"supfact\">i</span> = qword_4101C0; <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number)) {\n    for (<span class=\"supfact\">j</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number);\n         <span class=\"supfact\">j</span>;\n         <span class=\"supfact\">j</span> = *(_QWORD *)(<span class=\"supfact\">j</span> + Number)) {\n      if (<span class=\"supfact\">a1</span> == *(_QWORD *)(<span class=\"supfact\">j</span> + Number))\n        return <span class=\"supfact\">j</span>;\n    }\n  }\n  return Number L;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "i", "type": "__int64", "pred_name": "i", "ref_name": "i", "ref_type": "__int64"}, {"name": "j", "type": "__int64", "pred_name": "j", "ref_name": "j", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "Aaron0927", "repo_name": "xen-4.2.1", "path": "Aaron0927/xen-4.2.1/78c0af8108f6d8ee5f412a05090b2432bd63de1b0a4f244958a8ae52a51e3e69", "path_in_repo": "Aaron0927/xen-4.2.1/tools/qemu-xen/block.o", "objdump": "000000000000777d <bdrv_set_buffer_alignment>:\n    777d:\t55                   \tpush   %rbp\n    777e:\t48 89 e5             \tmov    %rsp,%rbp\n    7781:\t48 83 ec 20          \tsub    $0x20,%rsp\n    7785:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    7789:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    778c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    7793:\t00 00 \n    7795:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    7799:\t31 c0                \txor    %eax,%eax\n    779b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    779f:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    77a2:\t89 90 cc 08 00 00    \tmov    %edx,0x8cc(%rax)\n    77a8:\t90                   \tnop\n    77a9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    77ad:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    77b4:\t00 00 \n    77b6:\t74 05                \tje     77bd <bdrv_set_buffer_alignment+0x40>\n    77b8:\te8 00 00 00 00       \tcallq  77bd <bdrv_set_buffer_alignment+0x40>\n    77bd:\tc9                   \tleaveq \n    77be:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall bdrv_set_buffer_alignment(\n    __int64 <span class=\"supfact\">a1</span>, int <span class=\"supfact\">a2</span>) {\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = __readfsqword(Number);\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">a2</span>;\n  return __readfsqword(Number) ^ <span class=\"supfact\">v3</span>;\n}", "code_t": "void __cdecl bdrv_set_buffer_alignment(BlockDriverState_0 *<span class=\"supfact\">bs</span>,\n                                       int <span class=\"supfact\">align</span>) {\n  <span class=\"supfact\">bs</span>->buffer_alignment = <span class=\"supfact\">align</span>;\n}", "var": [{"name": "a1", "type": "BlockDriverState_0 *", "pred_name": "bs", "ref_name": "bs", "ref_type": "BlockDriverState_0 *"}, {"name": "a2", "type": "int", "pred_name": "align", "ref_name": "align", "ref_type": "int"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "ShadowWarden", "repo_name": "ShadowRPG", "path": "ShadowWarden/ShadowRPG/5dba8985f5b44453b1a22f95836aa4830c1a12cac02d041988dc05612c9fb73c", "path_in_repo": "ShadowWarden/ShadowRPG/src/kardinal/parse.o", "objdump": "0000000000000433 <print_final>:\n 433:\t55                   \tpush   %rbp\n 434:\t48 89 e5             \tmov    %rsp,%rbp\n 437:\t48 83 ec 20          \tsub    $0x20,%rsp\n 43b:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n 43e:\t48 8d 45 10          \tlea    0x10(%rbp),%rax\n 442:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 446:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n 44d:\teb 57                \tjmp    4a6 <print_final+0x73>\n 44f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 453:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n 457:\t48 85 c0             \ttest   %rax,%rax\n 45a:\t75 3a                \tjne    496 <print_final+0x63>\n 45c:\t83 7d ec 01          \tcmpl   $0x1,-0x14(%rbp)\n 460:\t75 34                \tjne    496 <print_final+0x63>\n 462:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 466:\t8b 78 38             \tmov    0x38(%rax),%edi\n 469:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 46d:\t8b 70 34             \tmov    0x34(%rax),%esi\n 470:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 474:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 47b <print_final+0x48>\n 47b:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 47e:\t41 89 f9             \tmov    %edi,%r9d\n 481:\t41 89 f0             \tmov    %esi,%r8d\n 484:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 489:\t48 89 c7             \tmov    %rax,%rdi\n 48c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 491:\te8 00 00 00 00       \tcallq  496 <print_final+0x63>\n 496:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n 49a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 49e:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n 4a2:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 4a6:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 4ab:\t75 a2                \tjne    44f <print_final+0x1c>\n 4ad:\t90                   \tnop\n 4ae:\t90                   \tnop\n 4af:\tc9                   \tleaveq \n 4b0:\tc3                   \tretq   ", "code_s": "char *__fastcall print_final(int <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n                             __int64 <span class=\"supfact\">a3</span>,\n                             __int64 <span class=\"supfact\">a4</span>,\n                             __int64 <span class=\"supfact\">a5</span>,\n                             __int64 <span class=\"supfact\">a6</span>,\n                             char <span class=\"supfact\">a7</span>) {\n  char *<span class=\"supfact\">result</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  char *<span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">result</span> = &<span class=\"supfact\">a7</span>;\n  <span class=\"supfact\">v9</span> = &<span class=\"supfact\">a7</span>;\n  <span class=\"supfact\">v8</span> = Number;\n  while (<span class=\"supfact\">v9</span>) {\n    if (!*((_QWORD *)<span class=\"supfact\">v9</span> + Number) &&\n        <span class=\"supfact\">a1</span> == Number)\n      fprintf(stderr, String, <span class=\"supfact\">v8</span>, <span class=\"supfact\">v9</span>,\n              *((unsigned int *)<span class=\"supfact\">v9</span> + Number),\n              *((unsigned int *)<span class=\"supfact\">v9</span> + Number));\n    ++<span class=\"supfact\">v8</span>;\n    <span class=\"supfact\">result</span> = (char *)*((_QWORD *)<span class=\"supfact\">v9</span> + Number);\n    <span class=\"supfact\">v9</span> = <span class=\"supfact\">result</span>;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl print_final(Input_0 <span class=\"supfact\">In</span>,\n                         int <span class=\"supfact\">debug</span>) {\n  unsigned int <span class=\"supfact\">flag</span>;\n  Input_0 *<span class=\"supfact\">tmp</span>;\n  <span class=\"supfact\">tmp</span> = &<span class=\"supfact\">In</span>;\n  <span class=\"supfact\">flag</span> = Number;\n  while (<span class=\"supfact\">tmp</span>) {\n    if (!<span class=\"supfact\">tmp</span>->prev && <span class=\"supfact\">debug</span> == Number)\n      fprintf(stderr, String, <span class=\"supfact\">flag</span>, <span class=\"supfact\">tmp</span>->name,\n              (unsigned int)<span class=\"supfact\">tmp</span>->type,\n              (unsigned int)<span class=\"supfact\">tmp</span>->lvl);\n    ++<span class=\"supfact\">flag</span>;\n    <span class=\"supfact\">tmp</span> = <span class=\"supfact\">tmp</span>->prev;\n  }\n}", "var": [{"name": "a1", "type": "int", "pred_name": "type", "ref_name": "debug", "ref_type": "int"}, {"name": "a2", "type": "void *", "pred_name": "data", "ref_name": "", "ref_type": "disappear"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "a7", "type": "char", "pred_name": "c", "ref_name": "In", "ref_type": "struct Input_0 { char[50] name; PADDING (2); int type; int lvl; PADDING (4); Input * prev; }"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v8", "type": "int", "pred_name": "sz", "ref_name": "flag", "ref_type": "unsigned int"}, {"name": "v9", "type": "int", "pred_name": "i", "ref_name": "tmp", "ref_type": "Input_0 *"}], "body_in_train": false}, {"repo_owner": "leon-anavi", "repo_name": "xmame-arm", "path": "leon-anavi/xmame-arm/b06024db7ed1738589fcf4f214f081a029b1b15a4f450d350ae715fbdf68bb2e", "path_in_repo": "leon-anavi/xmame-arm//xmame.obj/drivers/galaxian.o", "objdump": "0000000000021a04 <construct_ipt_smooncrs>:\n   21a04:\t55                   \tpush   %rbp\n   21a05:\t48 89 e5             \tmov    %rsp,%rbp\n   21a08:\t48 83 ec 30          \tsub    $0x30,%rsp\n   21a0c:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   21a10:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n   21a17:\t00 \n   21a18:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n   21a1f:\t00 \n   21a20:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21a24:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   21a29:\tba 00 00 00 00       \tmov    $0x0,%edx\n   21a2e:\tbe 04 00 00 00       \tmov    $0x4,%esi\n   21a33:\t48 89 c7             \tmov    %rax,%rdi\n   21a36:\te8 00 00 00 00       \tcallq  21a3b <construct_ipt_smooncrs+0x37>\n   21a3b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21a3f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21a43:\t48 c7 80 08 01 00 00 \tmovq   $0x0,0x108(%rax)\n   21a4a:\t00 00 00 00 \n   21a4e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21a52:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21a56:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n   21a5b:\tbe 14 00 00 00       \tmov    $0x14,%esi\n   21a60:\t48 89 c7             \tmov    %rax,%rdi\n   21a63:\te8 00 00 00 00       \tcallq  21a68 <construct_ipt_smooncrs+0x64>\n   21a68:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21a6c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21a70:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n   21a76:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21a7a:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21a81:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21a88:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21a8b:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21a8e:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21a91:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21a94:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21a97:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21a9a:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21a9e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21aa2:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n   21aa7:\tbe 15 00 00 00       \tmov    $0x15,%esi\n   21aac:\t48 89 c7             \tmov    %rax,%rdi\n   21aaf:\te8 00 00 00 00       \tcallq  21ab4 <construct_ipt_smooncrs+0xb0>\n   21ab4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21ab8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21abc:\tc7 00 02 00 00 00    \tmovl   $0x2,(%rax)\n   21ac2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21ac6:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21acd:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21ad4:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21ad7:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21ada:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21add:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21ae0:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21ae3:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21ae6:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21aea:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21aee:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n   21af3:\tbe 2b 00 00 00       \tmov    $0x2b,%esi\n   21af8:\t48 89 c7             \tmov    %rax,%rdi\n   21afb:\te8 00 00 00 00       \tcallq  21b00 <construct_ipt_smooncrs+0xfc>\n   21b00:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21b04:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21b08:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n   21b0e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21b12:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21b19:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21b20:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21b23:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21b26:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21b29:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21b2c:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21b2f:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21b32:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21b36:\tc6 40 11 00          \tmovb   $0x0,0x11(%rax)\n   21b3a:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21b3e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21b42:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   21b47:\tbe 2c 00 00 00       \tmov    $0x2c,%esi\n   21b4c:\t48 89 c7             \tmov    %rax,%rdi\n   21b4f:\te8 00 00 00 00       \tcallq  21b54 <construct_ipt_smooncrs+0x150>\n   21b54:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21b58:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21b5c:\tc7 00 08 00 00 00    \tmovl   $0x8,(%rax)\n   21b62:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21b66:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21b6d:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21b74:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21b77:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21b7a:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21b7d:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21b80:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21b83:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21b86:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21b8a:\tc6 40 11 00          \tmovb   $0x0,0x11(%rax)\n   21b8e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21b92:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21b96:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n   21b9b:\tbe 35 00 00 00       \tmov    $0x35,%esi\n   21ba0:\t48 89 c7             \tmov    %rax,%rdi\n   21ba3:\te8 00 00 00 00       \tcallq  21ba8 <construct_ipt_smooncrs+0x1a4>\n   21ba8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21bac:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21bb0:\tc7 00 10 00 00 00    \tmovl   $0x10,(%rax)\n   21bb6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21bba:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21bc1:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21bc8:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21bcb:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21bce:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21bd1:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21bd4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21bd7:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21bda:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21bde:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21be2:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n   21be7:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   21bec:\t48 89 c7             \tmov    %rax,%rdi\n   21bef:\te8 00 00 00 00       \tcallq  21bf4 <construct_ipt_smooncrs+0x1f0>\n   21bf4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21bf8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21bfc:\tc7 00 20 00 00 00    \tmovl   $0x20,(%rax)\n   21c02:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21c06:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21c0d:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21c14:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21c17:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21c1a:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21c1d:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21c20:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21c23:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21c26:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 21c2d <construct_ipt_smooncrs+0x229>\n   21c2d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21c31:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   21c35:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21c39:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21c3d:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   21c42:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   21c47:\t48 89 c7             \tmov    %rax,%rdi\n   21c4a:\te8 00 00 00 00       \tcallq  21c4f <construct_ipt_smooncrs+0x24b>\n   21c4f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21c53:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21c57:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   21c5d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21c61:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21c68:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21c6f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21c72:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21c75:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21c78:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21c7b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21c7e:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21c81:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 21c88 <construct_ipt_smooncrs+0x284>\n   21c88:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21c8c:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   21c90:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21c94:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21c98:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   21c9d:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   21ca2:\t48 89 c7             \tmov    %rax,%rdi\n   21ca5:\te8 00 00 00 00       \tcallq  21caa <construct_ipt_smooncrs+0x2a6>\n   21caa:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21cae:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21cb2:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   21cb8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21cbc:\tc7 40 04 20 00 00 00 \tmovl   $0x20,0x4(%rax)\n   21cc3:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21cca:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21ccd:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21cd0:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21cd3:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21cd6:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21cd9:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21cdc:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 21ce3 <construct_ipt_smooncrs+0x2df>\n   21ce3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21ce7:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   21ceb:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21cef:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21cf3:\tb9 40 00 00 00       \tmov    $0x40,%ecx\n   21cf8:\tbe 03 00 00 00       \tmov    $0x3,%esi\n   21cfd:\t48 89 c7             \tmov    %rax,%rdi\n   21d00:\te8 00 00 00 00       \tcallq  21d05 <construct_ipt_smooncrs+0x301>\n   21d05:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21d09:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21d0d:\tc7 00 40 00 00 00    \tmovl   $0x40,(%rax)\n   21d13:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21d17:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21d1e:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21d25:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21d28:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21d2b:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21d2e:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21d31:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21d34:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21d37:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21d3b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21d3f:\tb9 80 00 00 00       \tmov    $0x80,%ecx\n   21d44:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   21d49:\t48 89 c7             \tmov    %rax,%rdi\n   21d4c:\te8 00 00 00 00       \tcallq  21d51 <construct_ipt_smooncrs+0x34d>\n   21d51:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21d55:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21d59:\tc7 00 80 00 00 00    \tmovl   $0x80,(%rax)\n   21d5f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21d63:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21d6a:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21d71:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21d74:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21d77:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21d7a:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21d7d:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21d80:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21d83:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n   21d8a:\t00 \n   21d8b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21d8f:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   21d94:\tba 00 00 00 00       \tmov    $0x0,%edx\n   21d99:\tbe 04 00 00 00       \tmov    $0x4,%esi\n   21d9e:\t48 89 c7             \tmov    %rax,%rdi\n   21da1:\te8 00 00 00 00       \tcallq  21da6 <construct_ipt_smooncrs+0x3a2>\n   21da6:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21daa:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21dae:\t48 c7 80 08 01 00 00 \tmovq   $0x0,0x108(%rax)\n   21db5:\t00 00 00 00 \n   21db9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21dbd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21dc1:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n   21dc6:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n   21dcb:\t48 89 c7             \tmov    %rax,%rdi\n   21dce:\te8 00 00 00 00       \tcallq  21dd3 <construct_ipt_smooncrs+0x3cf>\n   21dd3:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21dd7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21ddb:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n   21de1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21de5:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21dec:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21df3:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21df6:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21df9:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21dfc:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21dff:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21e02:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21e05:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21e09:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21e0d:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n   21e12:\tbe 0d 00 00 00       \tmov    $0xd,%esi\n   21e17:\t48 89 c7             \tmov    %rax,%rdi\n   21e1a:\te8 00 00 00 00       \tcallq  21e1f <construct_ipt_smooncrs+0x41b>\n   21e1f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21e23:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21e27:\tc7 00 02 00 00 00    \tmovl   $0x2,(%rax)\n   21e2d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21e31:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21e38:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21e3f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21e42:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21e45:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21e48:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21e4b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21e4e:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21e51:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21e55:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21e59:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n   21e5e:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   21e63:\t48 89 c7             \tmov    %rax,%rdi\n   21e66:\te8 00 00 00 00       \tcallq  21e6b <construct_ipt_smooncrs+0x467>\n   21e6b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21e6f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21e73:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n   21e79:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21e7d:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21e84:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21e8b:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21e8e:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21e91:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21e94:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21e97:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21e9a:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21e9d:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21ea1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21ea5:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   21eaa:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   21eaf:\t48 89 c7             \tmov    %rax,%rdi\n   21eb2:\te8 00 00 00 00       \tcallq  21eb7 <construct_ipt_smooncrs+0x4b3>\n   21eb7:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21ebb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21ebf:\tc7 00 08 00 00 00    \tmovl   $0x8,(%rax)\n   21ec5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21ec9:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21ed0:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21ed7:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21eda:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21edd:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21ee0:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21ee3:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21ee6:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21ee9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21eed:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21ef1:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n   21ef6:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   21efb:\t48 89 c7             \tmov    %rax,%rdi\n   21efe:\te8 00 00 00 00       \tcallq  21f03 <construct_ipt_smooncrs+0x4ff>\n   21f03:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21f07:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21f0b:\tc7 00 10 00 00 00    \tmovl   $0x10,(%rax)\n   21f11:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21f15:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21f1c:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21f23:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21f26:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21f29:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21f2c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21f2f:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21f32:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21f35:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21f39:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21f3d:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n   21f42:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   21f47:\t48 89 c7             \tmov    %rax,%rdi\n   21f4a:\te8 00 00 00 00       \tcallq  21f4f <construct_ipt_smooncrs+0x54b>\n   21f4f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21f53:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21f57:\tc7 00 20 00 00 00    \tmovl   $0x20,(%rax)\n   21f5d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21f61:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21f68:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21f6f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21f72:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21f75:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21f78:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21f7b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   21f7e:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   21f81:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n   21f88:\t00 \n   21f89:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21f8d:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   21f92:\tba 00 00 00 00       \tmov    $0x0,%edx\n   21f97:\tbe 04 00 00 00       \tmov    $0x4,%esi\n   21f9c:\t48 89 c7             \tmov    %rax,%rdi\n   21f9f:\te8 00 00 00 00       \tcallq  21fa4 <construct_ipt_smooncrs+0x5a0>\n   21fa4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21fa8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21fac:\t48 c7 80 08 01 00 00 \tmovq   $0x0,0x108(%rax)\n   21fb3:\t00 00 00 00 \n   21fb7:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   21fbb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   21fbf:\tb9 03 00 00 00       \tmov    $0x3,%ecx\n   21fc4:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   21fc9:\t48 89 c7             \tmov    %rax,%rdi\n   21fcc:\te8 00 00 00 00       \tcallq  21fd1 <construct_ipt_smooncrs+0x5cd>\n   21fd1:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   21fd5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21fd9:\tc7 00 03 00 00 00    \tmovl   $0x3,(%rax)\n   21fdf:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   21fe3:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   21fea:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   21ff1:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   21ff4:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   21ff7:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   21ffa:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   21ffd:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   22000:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   22003:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2200a <construct_ipt_smooncrs+0x606>\n   2200a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2200e:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   22012:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   22016:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   2201a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   2201f:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   22024:\t48 89 c7             \tmov    %rax,%rdi\n   22027:\te8 00 00 00 00       \tcallq  2202c <construct_ipt_smooncrs+0x628>\n   2202c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   22030:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22034:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   2203a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2203e:\tc7 40 04 03 00 00 00 \tmovl   $0x3,0x4(%rax)\n   22045:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   2204c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   2204f:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   22052:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   22055:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   22058:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   2205b:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   2205e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 22065 <construct_ipt_smooncrs+0x661>\n   22065:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22069:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   2206d:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   22071:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   22075:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   2207a:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   2207f:\t48 89 c7             \tmov    %rax,%rdi\n   22082:\te8 00 00 00 00       \tcallq  22087 <construct_ipt_smooncrs+0x683>\n   22087:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   2208b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2208f:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   22095:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22099:\tc7 40 04 02 00 00 00 \tmovl   $0x2,0x4(%rax)\n   220a0:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   220a7:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   220aa:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   220ad:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   220b0:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   220b3:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   220b6:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   220b9:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 220c0 <construct_ipt_smooncrs+0x6bc>\n   220c0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   220c4:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   220c8:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   220cc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   220d0:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   220d5:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   220da:\t48 89 c7             \tmov    %rax,%rdi\n   220dd:\te8 00 00 00 00       \tcallq  220e2 <construct_ipt_smooncrs+0x6de>\n   220e2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   220e6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   220ea:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   220f0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   220f4:\tc7 40 04 01 00 00 00 \tmovl   $0x1,0x4(%rax)\n   220fb:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   22102:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   22105:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   22108:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   2210b:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   2210e:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   22111:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   22114:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2211b <construct_ipt_smooncrs+0x717>\n   2211b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2211f:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   22123:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   22127:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   2212b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   22130:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   22135:\t48 89 c7             \tmov    %rax,%rdi\n   22138:\te8 00 00 00 00       \tcallq  2213d <construct_ipt_smooncrs+0x739>\n   2213d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   22141:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22145:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   2214b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2214f:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   22156:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   2215d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   22160:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   22163:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   22166:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   22169:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   2216c:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   2216f:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 22176 <construct_ipt_smooncrs+0x772>\n   22176:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2217a:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   2217e:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   22182:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   22186:\tb9 0c 00 00 00       \tmov    $0xc,%ecx\n   2218b:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   22190:\t48 89 c7             \tmov    %rax,%rdi\n   22193:\te8 00 00 00 00       \tcallq  22198 <construct_ipt_smooncrs+0x794>\n   22198:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   2219c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   221a0:\tc7 00 0c 00 00 00    \tmovl   $0xc,(%rax)\n   221a6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   221aa:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   221b1:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   221b8:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   221bb:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   221be:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   221c1:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   221c4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   221c7:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   221ca:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 221d1 <construct_ipt_smooncrs+0x7cd>\n   221d1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   221d5:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   221d9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   221dd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   221e1:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   221e6:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   221eb:\t48 89 c7             \tmov    %rax,%rdi\n   221ee:\te8 00 00 00 00       \tcallq  221f3 <construct_ipt_smooncrs+0x7ef>\n   221f3:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   221f7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   221fb:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   22201:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22205:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   2220c:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   22213:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   22216:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   22219:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   2221c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   2221f:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   22222:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   22225:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2222c <construct_ipt_smooncrs+0x828>\n   2222c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22230:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   22234:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   22238:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   2223c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   22241:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   22246:\t48 89 c7             \tmov    %rax,%rdi\n   22249:\te8 00 00 00 00       \tcallq  2224e <construct_ipt_smooncrs+0x84a>\n   2224e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   22252:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22256:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   2225c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22260:\tc7 40 04 04 00 00 00 \tmovl   $0x4,0x4(%rax)\n   22267:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   2226e:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   22271:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   22274:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   22277:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   2227a:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   2227d:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   22280:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 22287 <construct_ipt_smooncrs+0x883>\n   22287:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2228b:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   2228f:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   22293:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   22297:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   2229c:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   222a1:\t48 89 c7             \tmov    %rax,%rdi\n   222a4:\te8 00 00 00 00       \tcallq  222a9 <construct_ipt_smooncrs+0x8a5>\n   222a9:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   222ad:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   222b1:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   222b7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   222bb:\tc7 40 04 08 00 00 00 \tmovl   $0x8,0x4(%rax)\n   222c2:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   222c9:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   222cc:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   222cf:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   222d2:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   222d5:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   222d8:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   222db:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 222e2 <construct_ipt_smooncrs+0x8de>\n   222e2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   222e6:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   222ea:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   222ee:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   222f2:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   222f7:\tbe 06 00 00 00       \tmov    $0x6,%esi\n   222fc:\t48 89 c7             \tmov    %rax,%rdi\n   222ff:\te8 00 00 00 00       \tcallq  22304 <construct_ipt_smooncrs+0x900>\n   22304:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   22308:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   2230c:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n   22312:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22316:\tc7 40 04 0c 00 00 00 \tmovl   $0xc,0x4(%rax)\n   2231d:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   22324:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   22327:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   2232a:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   2232d:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   22330:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   22333:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   22336:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2233d <construct_ipt_smooncrs+0x939>\n   2233d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22341:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   22345:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   22349:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   2234d:\tb9 f0 00 00 00       \tmov    $0xf0,%ecx\n   22352:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   22357:\t48 89 c7             \tmov    %rax,%rdi\n   2235a:\te8 00 00 00 00       \tcallq  2235f <construct_ipt_smooncrs+0x95b>\n   2235f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n   22363:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22367:\tc7 00 f0 00 00 00    \tmovl   $0xf0,(%rax)\n   2236d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n   22371:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n   22378:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n   2237f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n   22382:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n   22385:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n   22388:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n   2238b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n   2238e:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n   22391:\t90                   \tnop\n   22392:\tc9                   \tleaveq \n   22393:\tc3                   \tretq   ", "code_s": "__int64 __fastcall construct_ipt_smooncrs(__int64 <span class=\"supfact\">a1</span>) {\n  _DWORD *v1;\n  _DWORD *v2;\n  __int64 v3;\n  __int64 v4;\n  _DWORD *v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  _DWORD *v9;\n  _DWORD *v10;\n  _DWORD *v11;\n  _DWORD *v12;\n  _DWORD *v13;\n  _DWORD *v14;\n  _DWORD *v15;\n  _DWORD *v16;\n  __int64 v17;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  __int64 v21;\n  __int64 v22;\n  __int64 v23;\n  __int64 v24;\n  __int64 v25;\n  _DWORD *v26;\n  __int64 <span class=\"supfact\">v28</span>;\n  *(_QWORD *)(input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                    Number L) +\n              Number) = String;\n  v1 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                       Number L);\n  *v1 = Number;\n  v1[Number] = Number;\n  v2 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                       Number L);\n  *v2 = Number;\n  v2[Number] = Number;\n  v3 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v3 = Number;\n  *(_DWORD *)(v3 + Number) = Number;\n  *(_BYTE *)(v3 + Number) = Number;\n  v4 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v4 = Number;\n  *(_DWORD *)(v4 + Number) = Number;\n  *(_BYTE *)(v4 + Number) = Number;\n  v5 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                       Number L);\n  *v5 = Number;\n  v5[Number] = Number;\n  v6 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v6 = Number;\n  *(_DWORD *)(v6 + Number) = Number;\n  *(_QWORD *)(v6 + Number) = input_port_default_strings[Number];\n  v7 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v7 = Number;\n  *(_DWORD *)(v7 + Number) = Number;\n  *(_QWORD *)(v7 + Number) = input_port_default_strings[Number];\n  v8 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v8 = Number;\n  *(_DWORD *)(v8 + Number) = Number;\n  *(_QWORD *)(v8 + Number) = input_port_default_strings[Number];\n  v9 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                       Number L);\n  *v9 = Number;\n  v9[Number] = Number;\n  v10 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                        Number L);\n  *v10 = Number;\n  v10[Number] = Number;\n  *(_QWORD *)(input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                    Number L) +\n              Number) = String;\n  v11 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                        Number L);\n  *v11 = Number;\n  v11[Number] = Number;\n  v12 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                        Number L);\n  *v12 = Number;\n  v12[Number] = Number;\n  v13 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                        Number L);\n  *v13 = Number;\n  v13[Number] = Number;\n  v14 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                        Number L);\n  *v14 = Number;\n  v14[Number] = Number;\n  v15 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                        Number L);\n  *v15 = Number;\n  v15[Number] = Number;\n  v16 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                        Number L);\n  *v16 = Number;\n  v16[Number] = Number;\n  *(_QWORD *)(input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                    Number L) +\n              Number) = String;\n  v17 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v17 = Number;\n  *(_DWORD *)(v17 + Number) = Number;\n  *(_QWORD *)(v17 + Number) = input_port_default_strings[Number];\n  v18 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v18 = Number;\n  *(_DWORD *)(v18 + Number) = Number;\n  *(_QWORD *)(v18 + Number) = input_port_default_strings[Number];\n  v19 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v19 = Number;\n  *(_DWORD *)(v19 + Number) = Number;\n  *(_QWORD *)(v19 + Number) = input_port_default_strings[Number];\n  v20 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v20 = Number;\n  *(_DWORD *)(v20 + Number) = Number;\n  *(_QWORD *)(v20 + Number) = input_port_default_strings[Number];\n  v21 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v21 = Number;\n  *(_DWORD *)(v21 + Number) = Number;\n  *(_QWORD *)(v21 + Number) = input_port_default_strings[Number];\n  v22 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v22 = Number;\n  *(_DWORD *)(v22 + Number) = Number;\n  *(_QWORD *)(v22 + Number) = input_port_default_strings[Number];\n  v23 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v23 = Number;\n  *(_DWORD *)(v23 + Number) = Number;\n  *(_QWORD *)(v23 + Number) = input_port_default_strings[Number];\n  v24 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v24 = Number;\n  *(_DWORD *)(v24 + Number) = Number;\n  *(_QWORD *)(v24 + Number) = input_port_default_strings[Number];\n  v25 = input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)v25 = Number;\n  *(_DWORD *)(v25 + Number) = Number;\n  *(_QWORD *)(v25 + Number) = input_port_default_strings[Number];\n  <span class=\"supfact\">v28</span> =\n      input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n  *(_DWORD *)<span class=\"supfact\">v28</span> = Number;\n  *(_DWORD *)(<span class=\"supfact\">v28</span> + Number) = Number;\n  *(_QWORD *)(<span class=\"supfact\">v28</span> + Number) =\n      input_port_default_strings[Number];\n  v26 = (_DWORD *)input_port_initialize(<span class=\"supfact\">a1</span>, Number L, Number L,\n                                        Number L);\n  *v26 = Number;\n  v26[Number] = Number;\n  return Number L;\n}", "code_t": "void __cdecl construct_ipt_smooncrs(\n    input_port_init_params *<span class=\"supfact\">param</span>) {\n  _DWORD *v1;\n  _DWORD *v2;\n  __int64 v3;\n  __int64 v4;\n  _DWORD *v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  _DWORD *v9;\n  _DWORD *v10;\n  _DWORD *v11;\n  _DWORD *v12;\n  _DWORD *v13;\n  _DWORD *v14;\n  _DWORD *v15;\n  _DWORD *v16;\n  __int64 v17;\n  __int64 v18;\n  __int64 v19;\n  __int64 v20;\n  __int64 v21;\n  __int64 v22;\n  __int64 v23;\n  __int64 v24;\n  __int64 v25;\n  _DWORD *v26;\n  input_port_entry *<span class=\"supfact\">port</span>;\n  *(_QWORD *)(input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                                    Number L) +\n              Number) = String;\n  v1 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                       Number L, Number L);\n  *v1 = Number;\n  v1[Number] = Number;\n  v2 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                       Number L, Number L);\n  *v2 = Number;\n  v2[Number] = Number;\n  v3 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                             Number L);\n  *(_DWORD *)v3 = Number;\n  *(_DWORD *)(v3 + Number) = Number;\n  *(_BYTE *)(v3 + Number) = Number;\n  v4 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                             Number L);\n  *(_DWORD *)v4 = Number;\n  *(_DWORD *)(v4 + Number) = Number;\n  *(_BYTE *)(v4 + Number) = Number;\n  v5 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                       Number L, Number L);\n  *v5 = Number;\n  v5[Number] = Number;\n  v6 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                             Number L);\n  *(_DWORD *)v6 = Number;\n  *(_DWORD *)(v6 + Number) = Number;\n  *(_QWORD *)(v6 + Number) = input_port_default_strings[Number];\n  v7 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                             Number L);\n  *(_DWORD *)v7 = Number;\n  *(_DWORD *)(v7 + Number) = Number;\n  *(_QWORD *)(v7 + Number) = input_port_default_strings[Number];\n  v8 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                             Number L);\n  *(_DWORD *)v8 = Number;\n  *(_DWORD *)(v8 + Number) = Number;\n  *(_QWORD *)(v8 + Number) = input_port_default_strings[Number];\n  v9 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                       Number L, Number L);\n  *v9 = Number;\n  v9[Number] = Number;\n  v10 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                        Number L, Number L);\n  *v10 = Number;\n  v10[Number] = Number;\n  *(_QWORD *)(input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                                    Number L) +\n              Number) = String;\n  v11 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                        Number L, Number L);\n  *v11 = Number;\n  v11[Number] = Number;\n  v12 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                        Number L, Number L);\n  *v12 = Number;\n  v12[Number] = Number;\n  v13 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                        Number L, Number L);\n  *v13 = Number;\n  v13[Number] = Number;\n  v14 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                        Number L, Number L);\n  *v14 = Number;\n  v14[Number] = Number;\n  v15 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                        Number L, Number L);\n  *v15 = Number;\n  v15[Number] = Number;\n  v16 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                        Number L, Number L);\n  *v16 = Number;\n  v16[Number] = Number;\n  *(_QWORD *)(input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                                    Number L) +\n              Number) = String;\n  v17 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                              Number L);\n  *(_DWORD *)v17 = Number;\n  *(_DWORD *)(v17 + Number) = Number;\n  *(_QWORD *)(v17 + Number) = input_port_default_strings[Number];\n  v18 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                              Number L);\n  *(_DWORD *)v18 = Number;\n  *(_DWORD *)(v18 + Number) = Number;\n  *(_QWORD *)(v18 + Number) = input_port_default_strings[Number];\n  v19 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                              Number L);\n  *(_DWORD *)v19 = Number;\n  *(_DWORD *)(v19 + Number) = Number;\n  *(_QWORD *)(v19 + Number) = input_port_default_strings[Number];\n  v20 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                              Number L);\n  *(_DWORD *)v20 = Number;\n  *(_DWORD *)(v20 + Number) = Number;\n  *(_QWORD *)(v20 + Number) = input_port_default_strings[Number];\n  v21 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                              Number L);\n  *(_DWORD *)v21 = Number;\n  *(_DWORD *)(v21 + Number) = Number;\n  *(_QWORD *)(v21 + Number) = input_port_default_strings[Number];\n  v22 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                              Number L);\n  *(_DWORD *)v22 = Number;\n  *(_DWORD *)(v22 + Number) = Number;\n  *(_QWORD *)(v22 + Number) = input_port_default_strings[Number];\n  v23 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                              Number L);\n  *(_DWORD *)v23 = Number;\n  *(_DWORD *)(v23 + Number) = Number;\n  *(_QWORD *)(v23 + Number) = input_port_default_strings[Number];\n  v24 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                              Number L);\n  *(_DWORD *)v24 = Number;\n  *(_DWORD *)(v24 + Number) = Number;\n  *(_QWORD *)(v24 + Number) = input_port_default_strings[Number];\n  v25 = input_port_initialize(<span class=\"supfact\">param</span>, Number L, Number L,\n                              Number L);\n  *(_DWORD *)v25 = Number;\n  *(_DWORD *)(v25 + Number) = Number;\n  *(_QWORD *)(v25 + Number) = input_port_default_strings[Number];\n  <span class=\"supfact\">port</span> = (input_port_entry *)input_port_initialize(\n      <span class=\"supfact\">param</span>, Number L, Number L, Number L);\n  <span class=\"supfact\">port</span>->mask = Number;\n  <span class=\"supfact\">port</span>->default_value = Number;\n  <span class=\"supfact\">port</span>->name = (const char *)input_port_default_strings[Number];\n  v26 = (_DWORD *)input_port_initialize(<span class=\"supfact\">param</span>, Number L,\n                                        Number L, Number L);\n  *v26 = Number;\n  v26[Number] = Number;\n}", "var": [{"name": "a1", "type": "input_port_init_params *", "pred_name": "param", "ref_name": "param", "ref_type": "input_port_init_params *"}, {"name": "v28", "type": "input_port_entry *", "pred_name": "port", "ref_name": "port", "ref_type": "input_port_entry *"}], "body_in_train": false}, {"repo_owner": "ADoby", "repo_name": "Project_Space_Pirate", "path": "ADoby/Project_Space_Pirate/6c9cee91ddccfc78eedcc9ced49e8045fb1037292ce4cbd578a1e44b9012b367", "path_in_repo": "ADoby/Project_Space_Pirate/ProjectFiles/extensions/proj.linux/obj/release/CCArmature/CCArmature.o", "objdump": "0000000000000000 <_ZNK7cocos2d9extension8armature4Bone17getDisplayManagerEv>:\n   0:\t48 8b 87 50 01 00 00 \tmov    0x150(%rdi),%rax\n   7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cocos2d extension armature Bone\ngetDisplayManager(cocos2d extension armature Bone *<span class=\"supfact\">this</span>) {\n  return *((_QWORD *)<span class=\"supfact\">this</span> + Number);\n}", "code_t": "__int64 __fastcall cocos2d extension armature Bone\ngetDisplayManager(cocos2d extension armature Bone *<span class=\"supfact\">this</span>) {\n  return *((_QWORD *)<span class=\"supfact\">this</span> + Number);\n}", "var": [{"name": "this", "type": "cocos2d::extension::armature::ProcessBase *", "pred_name": "this", "ref_name": "this", "ref_type": "cocos2d::extension::armature::Bone *"}], "body_in_train": false}, {"repo_owner": "moneyadviceservice", "repo_name": "tidy-html5-gem", "path": "moneyadviceservice/tidy-html5-gem/c059824c1d9586ef235a45c26fb010dbe5c4ef37c9247efdb8a48abab8666bc4", "path_in_repo": "moneyadviceservice/tidy-html5-gem/ext/tidy-html5/build/gmake/obj/tidylib.o", "objdump": "00000000000023c7 <tidyDocSaveStream>:\n    23c7:\t55                   \tpush   %rbp\n    23c8:\t48 89 e5             \tmov    %rsp,%rbp\n    23cb:\t48 83 ec 50          \tsub    $0x50,%rsp\n    23cf:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    23d3:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    23d7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    23db:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    23e0:\t48 89 c7             \tmov    %rax,%rdi\n    23e3:\te8 00 00 00 00       \tcallq  23e8 <tidyDocSaveStream+0x21>\n    23e8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    23eb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    23ef:\tbe 45 00 00 00       \tmov    $0x45,%esi\n    23f4:\t48 89 c7             \tmov    %rax,%rdi\n    23f7:\te8 00 00 00 00       \tcallq  23fc <tidyDocSaveStream+0x35>\n    23fc:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    23ff:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2403:\tbe 4d 00 00 00       \tmov    $0x4d,%esi\n    2408:\t48 89 c7             \tmov    %rax,%rdi\n    240b:\te8 00 00 00 00       \tcallq  2410 <tidyDocSaveStream+0x49>\n    2410:\t83 f8 01             \tcmp    $0x1,%eax\n    2413:\t0f 94 c0             \tsete   %al\n    2416:\t0f b6 c0             \tmovzbl %al,%eax\n    2419:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    241c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2420:\tbe 4d 00 00 00       \tmov    $0x4d,%esi\n    2425:\t48 89 c7             \tmov    %rax,%rdi\n    2428:\te8 00 00 00 00       \tcallq  242d <tidyDocSaveStream+0x66>\n    242d:\t83 f8 02             \tcmp    $0x2,%eax\n    2430:\t0f 94 c0             \tsete   %al\n    2433:\t0f b6 c0             \tmovzbl %al,%eax\n    2436:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    2439:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    243d:\tbe 19 00 00 00       \tmov    $0x19,%esi\n    2442:\t48 89 c7             \tmov    %rax,%rdi\n    2445:\te8 00 00 00 00       \tcallq  244a <tidyDocSaveStream+0x83>\n    244a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    244d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2451:\tbe 1a 00 00 00       \tmov    $0x1a,%esi\n    2456:\t48 89 c7             \tmov    %rax,%rdi\n    2459:\te8 00 00 00 00       \tcallq  245e <tidyDocSaveStream+0x97>\n    245e:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    2461:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2465:\tbe 40 00 00 00       \tmov    $0x40,%esi\n    246a:\t48 89 c7             \tmov    %rax,%rdi\n    246d:\te8 00 00 00 00       \tcallq  2472 <tidyDocSaveStream+0xab>\n    2472:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    2475:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2479:\tbe 43 00 00 00       \tmov    $0x43,%esi\n    247e:\t48 89 c7             \tmov    %rax,%rdi\n    2481:\te8 00 00 00 00       \tcallq  2486 <tidyDocSaveStream+0xbf>\n    2486:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    2489:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    248d:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    2492:\t48 89 c7             \tmov    %rax,%rdi\n    2495:\te8 00 00 00 00       \tcallq  249a <tidyDocSaveStream+0xd3>\n    249a:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    249d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    24a1:\tbe 47 00 00 00       \tmov    $0x47,%esi\n    24a6:\t48 89 c7             \tmov    %rax,%rdi\n    24a9:\te8 00 00 00 00       \tcallq  24ae <tidyDocSaveStream+0xe7>\n    24ae:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    24b1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    24b5:\tbe 1f 00 00 00       \tmov    $0x1f,%esi\n    24ba:\t48 89 c7             \tmov    %rax,%rdi\n    24bd:\te8 00 00 00 00       \tcallq  24c2 <tidyDocSaveStream+0xfb>\n    24c2:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    24c5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    24c9:\tbe 4a 00 00 00       \tmov    $0x4a,%esi\n    24ce:\t48 89 c7             \tmov    %rax,%rdi\n    24d1:\te8 00 00 00 00       \tcallq  24d6 <tidyDocSaveStream+0x10f>\n    24d6:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    24d9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    24dd:\tbe 5b 00 00 00       \tmov    $0x5b,%esi\n    24e2:\t48 89 c7             \tmov    %rax,%rdi\n    24e5:\te8 00 00 00 00       \tcallq  24ea <tidyDocSaveStream+0x123>\n    24ea:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    24ed:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n    24f1:\t74 13                \tje     2506 <tidyDocSaveStream+0x13f>\n    24f3:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    24f7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    24fb:\t48 89 d6             \tmov    %rdx,%rsi\n    24fe:\t48 89 c7             \tmov    %rax,%rdi\n    2501:\te8 00 00 00 00       \tcallq  2506 <tidyDocSaveStream+0x13f>\n    2506:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n    250a:\t74 13                \tje     251f <tidyDocSaveStream+0x158>\n    250c:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    2510:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2514:\t48 89 d6             \tmov    %rdx,%rsi\n    2517:\t48 89 c7             \tmov    %rax,%rdi\n    251a:\te8 00 00 00 00       \tcallq  251f <tidyDocSaveStream+0x158>\n    251f:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    2523:\t74 18                \tje     253d <tidyDocSaveStream+0x176>\n    2525:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    2529:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    252d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2532:\t48 89 ce             \tmov    %rcx,%rsi\n    2535:\t48 89 c7             \tmov    %rax,%rdi\n    2538:\te8 00 00 00 00       \tcallq  253d <tidyDocSaveStream+0x176>\n    253d:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    2541:\t74 06                \tje     2549 <tidyDocSaveStream+0x182>\n    2543:\t83 7d d8 00          \tcmpl   $0x0,-0x28(%rbp)\n    2547:\t75 06                \tjne    254f <tidyDocSaveStream+0x188>\n    2549:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    254d:\t74 13                \tje     2562 <tidyDocSaveStream+0x19b>\n    254f:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    2553:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2557:\t48 89 d6             \tmov    %rdx,%rsi\n    255a:\t48 89 c7             \tmov    %rax,%rdi\n    255d:\te8 00 00 00 00       \tcallq  2562 <tidyDocSaveStream+0x19b>\n    2562:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n    2566:\t74 19                \tje     2581 <tidyDocSaveStream+0x1ba>\n    2568:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    256c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2570:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n    2574:\t48 89 d6             \tmov    %rdx,%rsi\n    2577:\t48 89 c7             \tmov    %rax,%rdi\n    257a:\te8 00 00 00 00       \tcallq  257f <tidyDocSaveStream+0x1b8>\n    257f:\teb 13                \tjmp    2594 <tidyDocSaveStream+0x1cd>\n    2581:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    2585:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2589:\t48 89 d6             \tmov    %rdx,%rsi\n    258c:\t48 89 c7             \tmov    %rax,%rdi\n    258f:\te8 00 00 00 00       \tcallq  2594 <tidyDocSaveStream+0x1cd>\n    2594:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    2598:\t74 11                \tje     25ab <tidyDocSaveStream+0x1e4>\n    259a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    259e:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    25a1:\t89 d6                \tmov    %edx,%esi\n    25a3:\t48 89 c7             \tmov    %rax,%rdi\n    25a6:\te8 00 00 00 00       \tcallq  25ab <tidyDocSaveStream+0x1e4>\n    25ab:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    25af:\t0f 84 d8 00 00 00    \tje     268d <tidyDocSaveStream+0x2c6>\n    25b5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    25b9:\t8b 80 5c 13 00 00    \tmov    0x135c(%rax),%eax\n    25bf:\t85 c0                \ttest   %eax,%eax\n    25c1:\t74 0a                \tje     25cd <tidyDocSaveStream+0x206>\n    25c3:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n    25c7:\t0f 84 c0 00 00 00    \tje     268d <tidyDocSaveStream+0x2c6>\n    25cd:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    25d1:\t75 14                \tjne    25e7 <tidyDocSaveStream+0x220>\n    25d3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    25d7:\t8b 80 9c 13 00 00    \tmov    0x139c(%rax),%eax\n    25dd:\t85 c0                \ttest   %eax,%eax\n    25df:\t74 12                \tje     25f3 <tidyDocSaveStream+0x22c>\n    25e1:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n    25e5:\t74 0c                \tje     25f3 <tidyDocSaveStream+0x22c>\n    25e7:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    25eb:\t48 89 c7             \tmov    %rax,%rdi\n    25ee:\te8 00 00 00 00       \tcallq  25f3 <tidyDocSaveStream+0x22c>\n    25f3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    25f7:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n    25fb:\t48 89 90 38 13 00 00 \tmov    %rdx,0x1338(%rax)\n    2602:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    2606:\t74 25                \tje     262d <tidyDocSaveStream+0x266>\n    2608:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n    260c:\t75 1f                \tjne    262d <tidyDocSaveStream+0x266>\n    260e:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    2612:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2616:\t48 89 d1             \tmov    %rdx,%rcx\n    2619:\tba 00 00 00 00       \tmov    $0x0,%edx\n    261e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2623:\t48 89 c7             \tmov    %rax,%rdi\n    2626:\te8 00 00 00 00       \tcallq  262b <tidyDocSaveStream+0x264>\n    262b:\teb 40                \tjmp    266d <tidyDocSaveStream+0x2a6>\n    262d:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    2630:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2634:\t89 d6                \tmov    %edx,%esi\n    2636:\t48 89 c7             \tmov    %rax,%rdi\n    2639:\te8 2e fd ff ff       \tcallq  236c <showBodyOnly>\n    263e:\t85 c0                \ttest   %eax,%eax\n    2640:\t74 0e                \tje     2650 <tidyDocSaveStream+0x289>\n    2642:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2646:\t48 89 c7             \tmov    %rax,%rdi\n    2649:\te8 00 00 00 00       \tcallq  264e <tidyDocSaveStream+0x287>\n    264e:\teb 1d                \tjmp    266d <tidyDocSaveStream+0x2a6>\n    2650:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    2654:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2658:\t48 89 d1             \tmov    %rdx,%rcx\n    265b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2660:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2665:\t48 89 c7             \tmov    %rax,%rdi\n    2668:\te8 00 00 00 00       \tcallq  266d <tidyDocSaveStream+0x2a6>\n    266d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2671:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2676:\t48 89 c7             \tmov    %rax,%rdi\n    2679:\te8 00 00 00 00       \tcallq  267e <tidyDocSaveStream+0x2b7>\n    267e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2682:\t48 c7 80 38 13 00 00 \tmovq   $0x0,0x1338(%rax)\n    2689:\t00 00 00 00 \n    268d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    2691:\t48 89 c7             \tmov    %rax,%rdi\n    2694:\te8 00 00 00 00       \tcallq  2699 <tidyDocSaveStream+0x2d2>\n    2699:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    269d:\t48 89 c7             \tmov    %rax,%rdi\n    26a0:\te8 e3 f4 ff ff       \tcallq  1b88 <tidyDocStatus>\n    26a5:\tc9                   \tleaveq \n    26a6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tidyDocSaveStream(__int64 <span class=\"supfact\">a1</span>,\n                                     __int64 <span class=\"supfact\">a2</span>) {\n  unsigned int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  _BOOL4 <span class=\"supfact\">v12</span>;\n  _BOOL4 <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v15</span> = prvTidy_cfgGetBool(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v14</span> = prvTidy_cfgGetBool(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v13</span> =\n      prvTidy_cfgGetAutoBool(<span class=\"supfact\">a1</span>, Number L) == Number;\n  <span class=\"supfact\">v12</span> =\n      prvTidy_cfgGetAutoBool(<span class=\"supfact\">a1</span>, Number L) == Number;\n  <span class=\"supfact\">v11</span> = prvTidy_cfgGetBool(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v10</span> = prvTidy_cfgGetBool(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v9</span> = prvTidy_cfgGetAutoBool(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v8</span> = prvTidy_cfgGetBool(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v7</span> = prvTidy_cfgGetBool(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v6</span> = prvTidy_cfgGetBool(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v5</span> = prvTidy_cfgGetBool(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v4</span> = prvTidy_cfgGetBool(<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v3</span> = prvTidy_cfgGet(<span class=\"supfact\">a1</span>, Number L);\n  if (<span class=\"supfact\">v4</span>)\n    prvTidyConvertCDATANodes(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a1</span>);\n  if (<span class=\"supfact\">v8</span>)\n    prvTidyDropComments(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a1</span>);\n  if (<span class=\"supfact\">v7</span>)\n    prvTidyDropFontElements(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a1</span>, Number L);\n  if (<span class=\"supfact\">v7</span> && <span class=\"supfact\">v6</span> || <span class=\"supfact\">v5</span>)\n    prvTidyDowngradeTypography(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a1</span>);\n  if (<span class=\"supfact\">v5</span>)\n    prvTidyNormalizeSpaces(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                           <span class=\"supfact\">a1</span>);\n  else\n    prvTidyReplacePreformattedSpaces(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a1</span>);\n  if (<span class=\"supfact\">v3</span>)\n    prvTidySortAttributes(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v3</span>);\n  if (<span class=\"supfact\">v15</span> &&\n      (!*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) || <span class=\"supfact\">v14</span>)) {\n    if (<span class=\"supfact\">v13</span> ||\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) && <span class=\"supfact\">v12</span>)\n      prvTidyoutBOM(<span class=\"supfact\">a2</span>);\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">a2</span>;\n    if (!<span class=\"supfact\">v11</span> || <span class=\"supfact\">v10</span>) {\n      if (showBodyOnly(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v9</span>))\n        prvTidyPrintBody(<span class=\"supfact\">a1</span>);\n      else\n        prvTidyPPrintTree(<span class=\"supfact\">a1</span>, Number L, Number L,\n                          <span class=\"supfact\">a1</span>);\n    } else {\n      prvTidyPPrintXMLTree(<span class=\"supfact\">a1</span>, Number L, Number L,\n                           <span class=\"supfact\">a1</span>);\n    }\n    prvTidyPFlushLine(<span class=\"supfact\">a1</span>, Number L);\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = Number L;\n  }\n  prvTidyResetConfigToSnapshot(<span class=\"supfact\">a1</span>);\n  return tidyDocStatus((_DWORD *)<span class=\"supfact\">a1</span>);\n}", "code_t": "int __cdecl tidyDocSaveStream(TidyDocImpl *<span class=\"supfact\">doc</span>,\n                              StreamOut *<span class=\"supfact\">out</span>) {\n  TidyAttrSortStrategy <span class=\"supfact\">sortAttrStrat</span>;\n  Bool <span class=\"supfact\">escapeCDATA</span>;\n  Bool <span class=\"supfact\">makeBare</span>;\n  Bool <span class=\"supfact\">asciiChars</span>;\n  Bool <span class=\"supfact\">makeClean</span>;\n  Bool <span class=\"supfact\">dropComments</span>;\n  TidyTriState <span class=\"supfact\">bodyOnly</span>;\n  Bool <span class=\"supfact\">xhtmlOut</span>;\n  Bool <span class=\"supfact\">xmlOut</span>;\n  _BOOL4 <span class=\"supfact\">smartBOM</span>;\n  _BOOL4 <span class=\"supfact\">outputBOM</span>;\n  Bool <span class=\"supfact\">forceOutput</span>;\n  Bool <span class=\"supfact\">showMarkup</span>;\n  <span class=\"supfact\">showMarkup</span> =\n      (unsigned int)prvTidy_cfgGetBool(<span class=\"supfact\">doc</span>, Number L);\n  <span class=\"supfact\">forceOutput</span> =\n      (unsigned int)prvTidy_cfgGetBool(<span class=\"supfact\">doc</span>, Number L);\n  <span class=\"supfact\">outputBOM</span> =\n      prvTidy_cfgGetAutoBool(<span class=\"supfact\">doc</span>, Number L) == Number;\n  <span class=\"supfact\">smartBOM</span> =\n      prvTidy_cfgGetAutoBool(<span class=\"supfact\">doc</span>, Number L) == Number;\n  <span class=\"supfact\">xmlOut</span> =\n      (unsigned int)prvTidy_cfgGetBool(<span class=\"supfact\">doc</span>, Number L);\n  <span class=\"supfact\">xhtmlOut</span> =\n      (unsigned int)prvTidy_cfgGetBool(<span class=\"supfact\">doc</span>, Number L);\n  <span class=\"supfact\">bodyOnly</span> =\n      (unsigned int)prvTidy_cfgGetAutoBool(<span class=\"supfact\">doc</span>, Number L);\n  <span class=\"supfact\">dropComments</span> =\n      (unsigned int)prvTidy_cfgGetBool(<span class=\"supfact\">doc</span>, Number L);\n  <span class=\"supfact\">makeClean</span> =\n      (unsigned int)prvTidy_cfgGetBool(<span class=\"supfact\">doc</span>, Number L);\n  <span class=\"supfact\">asciiChars</span> =\n      (unsigned int)prvTidy_cfgGetBool(<span class=\"supfact\">doc</span>, Number L);\n  <span class=\"supfact\">makeBare</span> =\n      (unsigned int)prvTidy_cfgGetBool(<span class=\"supfact\">doc</span>, Number L);\n  <span class=\"supfact\">escapeCDATA</span> =\n      (unsigned int)prvTidy_cfgGetBool(<span class=\"supfact\">doc</span>, Number L);\n  <span class=\"supfact\">sortAttrStrat</span> =\n      (unsigned int)prvTidy_cfgGet(<span class=\"supfact\">doc</span>, Number L);\n  if (<span class=\"supfact\">escapeCDATA</span>)\n    prvTidyConvertCDATANodes(<span class=\"supfact\">doc</span>, <span class=\"supfact\">doc</span>);\n  if (<span class=\"supfact\">dropComments</span>)\n    prvTidyDropComments(<span class=\"supfact\">doc</span>, <span class=\"supfact\">doc</span>);\n  if (<span class=\"supfact\">makeClean</span>)\n    prvTidyDropFontElements(<span class=\"supfact\">doc</span>, <span class=\"supfact\">doc</span>, Number L);\n  if (<span class=\"supfact\">makeClean</span> && <span class=\"supfact\">asciiChars</span> ||\n      <span class=\"supfact\">makeBare</span>)\n    prvTidyDowngradeTypography(<span class=\"supfact\">doc</span>, <span class=\"supfact\">doc</span>);\n  if (<span class=\"supfact\">makeBare</span>)\n    prvTidyNormalizeSpaces(<span class=\"supfact\">doc</span>->lexer, <span class=\"supfact\">doc</span>);\n  else\n    prvTidyReplacePreformattedSpaces(<span class=\"supfact\">doc</span>, <span class=\"supfact\">doc</span>);\n  if (<span class=\"supfact\">sortAttrStrat</span>)\n    prvTidySortAttributes(<span class=\"supfact\">doc</span>,\n                          (unsigned int)<span class=\"supfact\">sortAttrStrat</span>);\n  if (<span class=\"supfact\">showMarkup</span> &&\n      (!<span class=\"supfact\">doc</span>->errors || <span class=\"supfact\">forceOutput</span>)) {\n    if (<span class=\"supfact\">outputBOM</span> ||\n        <span class=\"supfact\">doc</span>->inputHadBOM && <span class=\"supfact\">smartBOM</span>)\n      prvTidyoutBOM(<span class=\"supfact\">out</span>);\n    <span class=\"supfact\">doc</span>->docOut = <span class=\"supfact\">out</span>;\n    if (<span class=\"supfact\">xmlOut</span> == no || <span class=\"supfact\">xhtmlOut</span>) {\n      if (showBodyOnly(<span class=\"supfact\">doc</span>, <span class=\"supfact\">bodyOnly</span>))\n        prvTidyPrintBody(<span class=\"supfact\">doc</span>);\n      else\n        prvTidyPPrintTree(<span class=\"supfact\">doc</span>, Number L, Number L,\n                          <span class=\"supfact\">doc</span>);\n    } else {\n      prvTidyPPrintXMLTree(<span class=\"supfact\">doc</span>, Number L, Number L,\n                           <span class=\"supfact\">doc</span>);\n    }\n    prvTidyPFlushLine(<span class=\"supfact\">doc</span>, Number L);\n    <span class=\"supfact\">doc</span>->docOut = Number L;\n  }\n  prvTidyResetConfigToSnapshot(<span class=\"supfact\">doc</span>);\n  return tidyDocStatus(<span class=\"supfact\">doc</span>);\n}", "var": [{"name": "a1", "type": "TidyDocImpl *", "pred_name": "doc", "ref_name": "doc", "ref_type": "TidyDocImpl *"}, {"name": "a2", "type": "ctmbstr", "pred_name": "__unk__", "ref_name": "out", "ref_type": "StreamOut *"}, {"name": "v3", "type": "int", "pred_name": "__unk__", "ref_name": "sortAttrStrat", "ref_type": "TidyAttrSortStrategy"}, {"name": "v4", "type": "int", "pred_name": "__unk__", "ref_name": "escapeCDATA", "ref_type": "Bool"}, {"name": "v5", "type": "int", "pred_name": "__unk__", "ref_name": "makeBare", "ref_type": "Bool"}, {"name": "v6", "type": "int", "pred_name": "__unk__", "ref_name": "asciiChars", "ref_type": "Bool"}, {"name": "v7", "type": "int", "pred_name": "__unk__", "ref_name": "makeClean", "ref_type": "Bool"}, {"name": "v8", "type": "int", "pred_name": "__unk__", "ref_name": "dropComments", "ref_type": "Bool"}, {"name": "v9", "type": "int", "pred_name": "__unk__", "ref_name": "bodyOnly", "ref_type": "TidyTriState"}, {"name": "v10", "type": "int", "pred_name": "__unk__", "ref_name": "xhtmlOut", "ref_type": "Bool"}, {"name": "v11", "type": "int", "pred_name": "__unk__", "ref_name": "xmlOut", "ref_type": "Bool"}, {"name": "v12", "type": "int", "pred_name": "__unk__", "ref_name": "smartBOM", "ref_type": "_BOOL4"}, {"name": "v13", "type": "int", "pred_name": "__unk__", "ref_name": "outputBOM", "ref_type": "_BOOL4"}, {"name": "v14", "type": "int", "pred_name": "__unk__", "ref_name": "forceOutput", "ref_type": "Bool"}, {"name": "v15", "type": "int", "pred_name": "__unk__", "ref_name": "showMarkup", "ref_type": "Bool"}], "body_in_train": false}, {"repo_owner": "li-ch", "repo_name": "rdma-examples", "path": "li-ch/rdma-examples/e6f257de96c514738804c650444ce5c85df557e1143bef285a74e10cc7bdbbe5", "path_in_repo": "li-ch/rdma-examples/rdma_st/src/3_rdma/6-rc_write/hello_world_rc_write.o", "objdump": "00000000000004de <resources_create>:\n     4de:\t55                   \tpush   %rbp\n     4df:\t48 89 e5             \tmov    %rsp,%rbp\n     4e2:\t53                   \tpush   %rbx\n     4e3:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n     4ea:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n     4f1:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     4f8:\t00 \n     4f9:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n     500:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n     507:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 50e <resources_create+0x30>\n     50e:\t48 85 c0             \ttest   %rax,%rax\n     511:\t74 6b                \tje     57e <resources_create+0xa0>\n     513:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 519 <resources_create+0x3b>\n     519:\t89 c2                \tmov    %eax,%edx\n     51b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 522 <resources_create+0x44>\n     522:\t89 d6                \tmov    %edx,%esi\n     524:\t48 89 c7             \tmov    %rax,%rdi\n     527:\te8 00 00 00 00       \tcallq  52c <resources_create+0x4e>\n     52c:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     533:\t89 82 68 01 00 00    \tmov    %eax,0x168(%rdx)\n     539:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     540:\t8b 80 68 01 00 00    \tmov    0x168(%rax),%eax\n     546:\t85 c0                \ttest   %eax,%eax\n     548:\t0f 89 a3 00 00 00    \tjns    5f1 <resources_create+0x113>\n     54e:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 554 <resources_create+0x76>\n     554:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 55b <resources_create+0x7d>\n     55b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 562 <resources_create+0x84>\n     562:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     567:\t48 89 c7             \tmov    %rax,%rdi\n     56a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     56f:\te8 00 00 00 00       \tcallq  574 <resources_create+0x96>\n     574:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     579:\te9 26 06 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     57e:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 584 <resources_create+0xa6>\n     584:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 58b <resources_create+0xad>\n     58b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     590:\t48 89 c7             \tmov    %rax,%rdi\n     593:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     598:\te8 00 00 00 00       \tcallq  59d <resources_create+0xbf>\n     59d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 5a3 <resources_create+0xc5>\n     5a3:\t89 c7                \tmov    %eax,%edi\n     5a5:\te8 00 00 00 00       \tcallq  5aa <resources_create+0xcc>\n     5aa:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     5b1:\t89 82 68 01 00 00    \tmov    %eax,0x168(%rdx)\n     5b7:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     5be:\t8b 80 68 01 00 00    \tmov    0x168(%rax),%eax\n     5c4:\t85 c0                \ttest   %eax,%eax\n     5c6:\t79 29                \tjns    5f1 <resources_create+0x113>\n     5c8:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 5ce <resources_create+0xf0>\n     5ce:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5d5 <resources_create+0xf7>\n     5d5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     5da:\t48 89 c7             \tmov    %rax,%rdi\n     5dd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5e2:\te8 00 00 00 00       \tcallq  5e7 <resources_create+0x109>\n     5e7:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     5ec:\te9 b3 05 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     5f1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5f8 <resources_create+0x11a>\n     5f8:\t48 89 c1             \tmov    %rax,%rcx\n     5fb:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n     600:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     605:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     60a:\te8 00 00 00 00       \tcallq  60f <resources_create+0x131>\n     60f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 616 <resources_create+0x138>\n     616:\t48 89 c1             \tmov    %rax,%rcx\n     619:\tba 21 00 00 00       \tmov    $0x21,%edx\n     61e:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     623:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     628:\te8 00 00 00 00       \tcallq  62d <resources_create+0x14f>\n     62d:\t48 8d 45 8c          \tlea    -0x74(%rbp),%rax\n     631:\t48 89 c7             \tmov    %rax,%rdi\n     634:\te8 00 00 00 00       \tcallq  639 <resources_create+0x15b>\n     639:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     640:\t48 89 82 30 01 00 00 \tmov    %rax,0x130(%rdx)\n     647:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     64e:\t48 8b 80 30 01 00 00 \tmov    0x130(%rax),%rax\n     655:\t48 85 c0             \ttest   %rax,%rax\n     658:\t75 28                \tjne    682 <resources_create+0x1a4>\n     65a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 661 <resources_create+0x183>\n     661:\t48 89 c1             \tmov    %rax,%rcx\n     664:\tba 1e 00 00 00       \tmov    $0x1e,%edx\n     669:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     66e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     673:\te8 00 00 00 00       \tcallq  678 <resources_create+0x19a>\n     678:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     67d:\te9 22 05 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     682:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n     685:\t85 c0                \ttest   %eax,%eax\n     687:\t75 26                \tjne    6af <resources_create+0x1d1>\n     689:\t8b 55 8c             \tmov    -0x74(%rbp),%edx\n     68c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 693 <resources_create+0x1b5>\n     693:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     698:\t48 89 c7             \tmov    %rax,%rdi\n     69b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6a0:\te8 00 00 00 00       \tcallq  6a5 <resources_create+0x1c7>\n     6a5:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     6aa:\te9 f5 04 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     6af:\t8b 55 8c             \tmov    -0x74(%rbp),%edx\n     6b2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6b9 <resources_create+0x1db>\n     6b9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     6be:\t48 89 c7             \tmov    %rax,%rdi\n     6c1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6c6:\te8 00 00 00 00       \tcallq  6cb <resources_create+0x1ed>\n     6cb:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n     6d2:\teb 64                \tjmp    738 <resources_create+0x25a>\n     6d4:\t48 8b 1d 00 00 00 00 \tmov    0x0(%rip),%rbx        # 6db <resources_create+0x1fd>\n     6db:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     6e2:\t48 8b 80 30 01 00 00 \tmov    0x130(%rax),%rax\n     6e9:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     6ec:\t48 63 d2             \tmovslq %edx,%rdx\n     6ef:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     6f3:\t48 01 d0             \tadd    %rdx,%rax\n     6f6:\t48 8b 00             \tmov    (%rax),%rax\n     6f9:\t48 89 c7             \tmov    %rax,%rdi\n     6fc:\te8 00 00 00 00       \tcallq  701 <resources_create+0x223>\n     701:\t48 89 de             \tmov    %rbx,%rsi\n     704:\t48 89 c7             \tmov    %rax,%rdi\n     707:\te8 00 00 00 00       \tcallq  70c <resources_create+0x22e>\n     70c:\t85 c0                \ttest   %eax,%eax\n     70e:\t75 24                \tjne    734 <resources_create+0x256>\n     710:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     717:\t48 8b 80 30 01 00 00 \tmov    0x130(%rax),%rax\n     71e:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     721:\t48 63 d2             \tmovslq %edx,%rdx\n     724:\t48 c1 e2 03          \tshl    $0x3,%rdx\n     728:\t48 01 d0             \tadd    %rdx,%rax\n     72b:\t48 8b 00             \tmov    (%rax),%rax\n     72e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     732:\teb 0c                \tjmp    740 <resources_create+0x262>\n     734:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n     738:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n     73b:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n     73e:\t7c 94                \tjl     6d4 <resources_create+0x1f6>\n     740:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     745:\t75 2a                \tjne    771 <resources_create+0x293>\n     747:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 74e <resources_create+0x270>\n     74e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 755 <resources_create+0x277>\n     755:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     75a:\t48 89 c7             \tmov    %rax,%rdi\n     75d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     762:\te8 00 00 00 00       \tcallq  767 <resources_create+0x289>\n     767:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     76c:\te9 33 04 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     771:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     775:\t48 89 c7             \tmov    %rax,%rdi\n     778:\te8 00 00 00 00       \tcallq  77d <resources_create+0x29f>\n     77d:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     784:\t48 89 82 38 01 00 00 \tmov    %rax,0x138(%rdx)\n     78b:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     792:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n     799:\t48 85 c0             \ttest   %rax,%rax\n     79c:\t75 2a                \tjne    7c8 <resources_create+0x2ea>\n     79e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 7a5 <resources_create+0x2c7>\n     7a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7ac <resources_create+0x2ce>\n     7ac:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     7b1:\t48 89 c7             \tmov    %rax,%rdi\n     7b4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     7b9:\te8 00 00 00 00       \tcallq  7be <resources_create+0x2e0>\n     7be:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     7c3:\te9 dc 03 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     7c8:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     7cf:\t48 8d 90 e8 00 00 00 \tlea    0xe8(%rax),%rdx\n     7d6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7dc <resources_create+0x2fe>\n     7dc:\t0f b6 c8             \tmovzbl %al,%ecx\n     7df:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     7e6:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n     7ed:\t89 ce                \tmov    %ecx,%esi\n     7ef:\t48 89 c7             \tmov    %rax,%rdi\n     7f2:\te8 46 f8 ff ff       \tcallq  3d <___ibv_query_port>\n     7f7:\t85 c0                \ttest   %eax,%eax\n     7f9:\t74 29                \tje     824 <resources_create+0x346>\n     7fb:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 801 <resources_create+0x323>\n     801:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 808 <resources_create+0x32a>\n     808:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     80d:\t48 89 c7             \tmov    %rax,%rdi\n     810:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     815:\te8 00 00 00 00       \tcallq  81a <resources_create+0x33c>\n     81a:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     81f:\te9 80 03 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     824:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     82b:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n     832:\t48 89 c7             \tmov    %rax,%rdi\n     835:\te8 00 00 00 00       \tcallq  83a <resources_create+0x35c>\n     83a:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     841:\t48 89 82 40 01 00 00 \tmov    %rax,0x140(%rdx)\n     848:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     84f:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n     856:\t48 85 c0             \ttest   %rax,%rax\n     859:\t75 28                \tjne    883 <resources_create+0x3a5>\n     85b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 862 <resources_create+0x384>\n     862:\t48 89 c1             \tmov    %rax,%rcx\n     865:\tba 14 00 00 00       \tmov    $0x14,%edx\n     86a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     86f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     874:\te8 00 00 00 00       \tcallq  879 <resources_create+0x39b>\n     879:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     87e:\te9 21 03 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     883:\tc7 45 dc 01 00 00 00 \tmovl   $0x1,-0x24(%rbp)\n     88a:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     891:\t48 8b 80 38 01 00 00 \tmov    0x138(%rax),%rax\n     898:\t8b 75 dc             \tmov    -0x24(%rbp),%esi\n     89b:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     8a1:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     8a6:\tba 00 00 00 00       \tmov    $0x0,%edx\n     8ab:\t48 89 c7             \tmov    %rax,%rdi\n     8ae:\te8 00 00 00 00       \tcallq  8b3 <resources_create+0x3d5>\n     8b3:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     8ba:\t48 89 82 48 01 00 00 \tmov    %rax,0x148(%rdx)\n     8c1:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     8c8:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n     8cf:\t48 85 c0             \ttest   %rax,%rax\n     8d2:\t75 26                \tjne    8fa <resources_create+0x41c>\n     8d4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8db <resources_create+0x3fd>\n     8db:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n     8de:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     8e3:\t48 89 c7             \tmov    %rax,%rdi\n     8e6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     8eb:\te8 00 00 00 00       \tcallq  8f0 <resources_create+0x412>\n     8f0:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     8f5:\te9 aa 02 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     8fa:\t48 c7 45 d0 0c 00 00 \tmovq   $0xc,-0x30(%rbp)\n     901:\t00 \n     902:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     906:\t48 89 c7             \tmov    %rax,%rdi\n     909:\te8 00 00 00 00       \tcallq  90e <resources_create+0x430>\n     90e:\t48 89 c2             \tmov    %rax,%rdx\n     911:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     918:\t48 89 90 60 01 00 00 \tmov    %rdx,0x160(%rax)\n     91f:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     926:\t48 8b 80 60 01 00 00 \tmov    0x160(%rax),%rax\n     92d:\t48 85 c0             \ttest   %rax,%rax\n     930:\t75 27                \tjne    959 <resources_create+0x47b>\n     932:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 939 <resources_create+0x45b>\n     939:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     93d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     942:\t48 89 c7             \tmov    %rax,%rdi\n     945:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     94a:\te8 00 00 00 00       \tcallq  94f <resources_create+0x471>\n     94f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     954:\te9 4b 02 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     959:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 960 <resources_create+0x482>\n     960:\t48 85 c0             \ttest   %rax,%rax\n     963:\t75 4b                \tjne    9b0 <resources_create+0x4d2>\n     965:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     96c:\t48 8b 80 60 01 00 00 \tmov    0x160(%rax),%rax\n     973:\t48 bb 68 65 6c 6c 6f \tmovabs $0x6f77206f6c6c6568,%rbx\n     97a:\t20 77 6f \n     97d:\t48 89 18             \tmov    %rbx,(%rax)\n     980:\tc7 40 08 72 6c 64 00 \tmovl   $0x646c72,0x8(%rax)\n     987:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     98e:\t48 8b 90 60 01 00 00 \tmov    0x160(%rax),%rdx\n     995:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 99c <resources_create+0x4be>\n     99c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     9a1:\t48 89 c7             \tmov    %rax,%rdi\n     9a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9a9:\te8 00 00 00 00       \tcallq  9ae <resources_create+0x4d0>\n     9ae:\teb 1f                \tjmp    9cf <resources_create+0x4f1>\n     9b0:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     9b7:\t48 8b 80 60 01 00 00 \tmov    0x160(%rax),%rax\n     9be:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     9c2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     9c7:\t48 89 c7             \tmov    %rax,%rdi\n     9ca:\te8 00 00 00 00       \tcallq  9cf <resources_create+0x4f1>\n     9cf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9d6 <resources_create+0x4f8>\n     9d6:\t48 85 c0             \ttest   %rax,%rax\n     9d9:\t74 07                \tje     9e2 <resources_create+0x504>\n     9db:\tb8 03 00 00 00       \tmov    $0x3,%eax\n     9e0:\teb 05                \tjmp    9e7 <resources_create+0x509>\n     9e2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     9e7:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     9ea:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     9f1:\t48 8b b0 60 01 00 00 \tmov    0x160(%rax),%rsi\n     9f8:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     9ff:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n     a06:\t8b 4d e0             \tmov    -0x20(%rbp),%ecx\n     a09:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     a0d:\t48 89 c7             \tmov    %rax,%rdi\n     a10:\te8 00 00 00 00       \tcallq  a15 <resources_create+0x537>\n     a15:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     a1c:\t48 89 82 58 01 00 00 \tmov    %rax,0x158(%rdx)\n     a23:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     a2a:\t48 8b 80 58 01 00 00 \tmov    0x158(%rax),%rax\n     a31:\t48 85 c0             \ttest   %rax,%rax\n     a34:\t75 26                \tjne    a5c <resources_create+0x57e>\n     a36:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a3d <resources_create+0x55f>\n     a3d:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n     a40:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a45:\t48 89 c7             \tmov    %rax,%rdi\n     a48:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a4d:\te8 00 00 00 00       \tcallq  a52 <resources_create+0x574>\n     a52:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     a57:\te9 48 01 00 00       \tjmpq   ba4 <resources_create+0x6c6>\n     a5c:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     a63:\t48 8b 80 58 01 00 00 \tmov    0x158(%rax),%rax\n     a6a:\t8b 70 28             \tmov    0x28(%rax),%esi\n     a6d:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     a74:\t48 8b 80 58 01 00 00 \tmov    0x158(%rax),%rax\n     a7b:\t8b 48 24             \tmov    0x24(%rax),%ecx\n     a7e:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     a85:\t48 8b 90 60 01 00 00 \tmov    0x160(%rax),%rdx\n     a8c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a93 <resources_create+0x5b5>\n     a93:\t8b 7d e0             \tmov    -0x20(%rbp),%edi\n     a96:\t41 89 f9             \tmov    %edi,%r9d\n     a99:\t41 89 f0             \tmov    %esi,%r8d\n     a9c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     aa1:\t48 89 c7             \tmov    %rax,%rdi\n     aa4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     aa9:\te8 00 00 00 00       \tcallq  aae <resources_create+0x5d0>\n     aae:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n     ab2:\tba 40 00 00 00       \tmov    $0x40,%edx\n     ab7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     abc:\t48 89 c7             \tmov    %rax,%rdi\n     abf:\te8 00 00 00 00       \tcallq  ac4 <resources_create+0x5e6>\n     ac4:\tc7 45 c4 02 00 00 00 \tmovl   $0x2,-0x3c(%rbp)\n     acb:\tc7 45 c8 01 00 00 00 \tmovl   $0x1,-0x38(%rbp)\n     ad2:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     ad9:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n     ae0:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n     ae4:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     aeb:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n     af2:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n     af6:\tc7 45 b0 01 00 00 00 \tmovl   $0x1,-0x50(%rbp)\n     afd:\tc7 45 b4 01 00 00 00 \tmovl   $0x1,-0x4c(%rbp)\n     b04:\tc7 45 b8 01 00 00 00 \tmovl   $0x1,-0x48(%rbp)\n     b0b:\tc7 45 bc 01 00 00 00 \tmovl   $0x1,-0x44(%rbp)\n     b12:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     b19:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n     b20:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n     b24:\t48 89 d6             \tmov    %rdx,%rsi\n     b27:\t48 89 c7             \tmov    %rax,%rdi\n     b2a:\te8 00 00 00 00       \tcallq  b2f <resources_create+0x651>\n     b2f:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     b36:\t48 89 82 50 01 00 00 \tmov    %rax,0x150(%rdx)\n     b3d:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     b44:\t48 8b 80 50 01 00 00 \tmov    0x150(%rax),%rax\n     b4b:\t48 85 c0             \ttest   %rax,%rax\n     b4e:\t75 25                \tjne    b75 <resources_create+0x697>\n     b50:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b57 <resources_create+0x679>\n     b57:\t48 89 c1             \tmov    %rax,%rcx\n     b5a:\tba 14 00 00 00       \tmov    $0x14,%edx\n     b5f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     b64:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     b69:\te8 00 00 00 00       \tcallq  b6e <resources_create+0x690>\n     b6e:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     b73:\teb 2f                \tjmp    ba4 <resources_create+0x6c6>\n     b75:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     b7c:\t48 8b 80 50 01 00 00 \tmov    0x150(%rax),%rax\n     b83:\t8b 50 34             \tmov    0x34(%rax),%edx\n     b86:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b8d <resources_create+0x6af>\n     b8d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b92:\t48 89 c7             \tmov    %rax,%rdi\n     b95:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b9a:\te8 00 00 00 00       \tcallq  b9f <resources_create+0x6c1>\n     b9f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ba4:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n     bab:\t5b                   \tpop    %rbx\n     bac:\t5d                   \tpop    %rbp\n     bad:\tc3                   \tretq   ", "code_s": "__int64 __fastcall resources_create(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 result;\n  const char *<span class=\"supfact\">v2</span>;\n  const char *v3;\n  unsigned int v4;\n  unsigned int <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">s</span>[Number];\n  size_t <span class=\"supfact\">size</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = Number L;\n  <span class=\"supfact\">v9</span> = Number;\n  <span class=\"supfact\">v8</span> = Number;\n  if (*(&config + Number)) {\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = sock_client_connect(\n        *(&config + Number), *((unsigned int *)&config + Number));\n    if (*(int *)(<span class=\"supfact\">a1</span> + Number) < Number) {\n      fprintf(stderr, String, *(&config + Number),\n              *((unsigned int *)&config + Number));\n      return Number;\n    }\n  } else {\n    fprintf(stdout, String, *((unsigned int *)&config + Number));\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n        sock_daemon_connect(*((unsigned int *)&config + Number));\n    if (*(int *)(<span class=\"supfact\">a1</span> + Number) < Number) {\n      fprintf(stderr, String, *((unsigned int *)&config + Number));\n      return Number;\n    }\n  }\n  fwrite(String, Number, Number, stdout);\n  fwrite(String, Number, Number, stdout);\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n      ibv_get_device_list(&<span class=\"supfact\">v5</span>);\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    if (<span class=\"supfact\">v5</span>) {\n      fprintf(stdout, String, <span class=\"supfact\">v5</span>);\n      for (<span class=\"supfact\">i</span> = Number;\n           <span class=\"supfact\">i</span> < (int)<span class=\"supfact\">v5</span>; ++<span class=\"supfact\">i</span>) {\n        <span class=\"supfact\">v2</span> = config;\n        v3 = (const char *)ibv_get_device_name(\n            *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number)));\n        if (!strcmp(v3, <span class=\"supfact\">v2</span>)) {\n          <span class=\"supfact\">v11</span> =\n              *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n          break;\n        }\n      }\n      if (<span class=\"supfact\">v11</span>) {\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n            ibv_open_device(<span class=\"supfact\">v11</span>);\n        if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n          if ((unsigned int)__ibv_query_port(\n                  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                  *((_DWORD *)&config + Number),\n                  (void *)(<span class=\"supfact\">a1</span> + Number))) {\n            fprintf(stderr, String, *((unsigned int *)&config + Number));\n            result = Number L;\n          } else {\n            *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n                ibv_alloc_pd(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n            if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n              <span class=\"supfact\">v8</span> = Number;\n              *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n                  ibv_create_cq(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                                Number L, Number L, Number L, Number L);\n              if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n                <span class=\"supfact\">size</span> = Number L;\n                *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = malloc(Number);\n                if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n                  if (*(&config + Number)) {\n                    memset(*(void **)(<span class=\"supfact\">a1</span> + Number), Number,\n                           <span class=\"supfact\">size</span>);\n                  } else {\n                    strcpy(*(char **)(<span class=\"supfact\">a1</span> + Number), String);\n                    fprintf(stdout, String,\n                            *(const char **)(<span class=\"supfact\">a1</span> + Number));\n                  }\n                  if (*(&config + Number))\n                    v4 = Number;\n                  else\n                    v4 = Number;\n                  <span class=\"supfact\">v9</span> = v4;\n                  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n                      ibv_reg_mr(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                                 *(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                                 <span class=\"supfact\">size</span>, v4);\n                  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n                    fprintf(stdout, String,\n                            *(const void **)(<span class=\"supfact\">a1</span> + Number),\n                            *(unsigned int *)(*(_QWORD *)(<span class=\"supfact\">a1</span> +\n                                                          Number) +\n                                              Number L),\n                            *(unsigned int *)(*(_QWORD *)(<span class=\"supfact\">a1</span> +\n                                                          Number) +\n                                              Number L),\n                            <span class=\"supfact\">v9</span>);\n                    memset(<span class=\"supfact\">s</span>, Number,\n                           sizeof(<span class=\"supfact\">s</span>));\n                    HIDWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n                    LODWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n                    <span class=\"supfact\">s</span>[Number] =\n                        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n                    <span class=\"supfact\">s</span>[Number] =\n                        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n                    <span class=\"supfact\">s</span>[Number] = Number;\n                    <span class=\"supfact\">s</span>[Number] = Number;\n                    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) =\n                        ibv_create_qp(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                                      <span class=\"supfact\">s</span>);\n                    if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n                      fprintf(stdout, String,\n                              *(unsigned int *)(*(_QWORD *)(<span class=\"supfact\">a1</span> +\n                                                            Number) +\n                                                Number L));\n                      result = Number L;\n                    } else {\n                      fwrite(String, Number, Number, stderr);\n                      result = Number L;\n                    }\n                  } else {\n                    fprintf(stderr, String, <span class=\"supfact\">v9</span>);\n                    result = Number L;\n                  }\n                } else {\n                  fprintf(stderr, String, <span class=\"supfact\">size</span>);\n                  result = Number L;\n                }\n              } else {\n                fprintf(stderr, String, <span class=\"supfact\">v8</span>);\n                result = Number L;\n              }\n            } else {\n              fwrite(String, Number, Number, stderr);\n              result = Number L;\n            }\n          }\n        } else {\n          fprintf(stderr, String, config);\n          result = Number L;\n        }\n      } else {\n        fprintf(stderr, String, config);\n        result = Number L;\n      }\n    } else {\n      fprintf(stderr, String, Number L);\n      result = Number L;\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl resources_create(resources *<span class=\"supfact\">res</span>) {\n  int result;\n  const char *<span class=\"supfact\">v2</span>;\n  const char *v3;\n  unsigned int v4;\n  int <span class=\"supfact\">num_devices</span>;\n  ibv_qp_init_attr <span class=\"supfact\">qp_init_attr</span>;\n  size_t <span class=\"supfact\">size</span>;\n  int <span class=\"supfact\">cq_size</span>;\n  int <span class=\"supfact\">mr_flags</span>;\n  int <span class=\"supfact\">i</span>;\n  ibv_device *<span class=\"supfact\">ib_dev</span>;\n  <span class=\"supfact\">ib_dev</span> = Number L;\n  <span class=\"supfact\">mr_flags</span> = Number;\n  <span class=\"supfact\">cq_size</span> = Number;\n  if (config.server_name) {\n    <span class=\"supfact\">res</span>->sock =\n        sock_client_connect(config.server_name, config.tcp_port);\n    if (<span class=\"supfact\">res</span>->sock < Number) {\n      fprintf(stderr, String, config.server_name, config.tcp_port);\n      return Number;\n    }\n  } else {\n    fprintf(stdout, String, config.tcp_port);\n    <span class=\"supfact\">res</span>->sock = sock_daemon_connect(config.tcp_port);\n    if (<span class=\"supfact\">res</span>->sock < Number) {\n      fprintf(stderr, String, config.tcp_port);\n      return Number;\n    }\n  }\n  fwrite(String, Number, Number, stdout);\n  fwrite(String, Number, Number, stdout);\n  <span class=\"supfact\">res</span>->dev_list =\n      (ibv_device **)ibv_get_device_list(&<span class=\"supfact\">num_devices</span>);\n  if (<span class=\"supfact\">res</span>->dev_list) {\n    if (<span class=\"supfact\">num_devices</span>) {\n      fprintf(stdout, String, (unsigned int)<span class=\"supfact\">num_devices</span>);\n      for (<span class=\"supfact\">i</span> = Number;\n           <span class=\"supfact\">i</span> < <span class=\"supfact\">num_devices</span>;\n           ++<span class=\"supfact\">i</span>) {\n        <span class=\"supfact\">v2</span> = config.dev_name;\n        v3 = (const char *)ibv_get_device_name(\n            <span class=\"supfact\">res</span>->dev_list[<span class=\"supfact\">i</span>]);\n        if (!strcmp(v3, <span class=\"supfact\">v2</span>)) {\n          <span class=\"supfact\">ib_dev</span> =\n              <span class=\"supfact\">res</span>->dev_list[<span class=\"supfact\">i</span>];\n          break;\n        }\n      }\n      if (<span class=\"supfact\">ib_dev</span>) {\n        <span class=\"supfact\">res</span>->ib_ctx =\n            (ibv_context *)ibv_open_device(<span class=\"supfact\">ib_dev</span>);\n        if (<span class=\"supfact\">res</span>->ib_ctx) {\n          if (__ibv_query_port(<span class=\"supfact\">res</span>->ib_ctx, config.ib_port,\n                               &<span class=\"supfact\">res</span>->port_attr)) {\n            fprintf(stderr, String, (unsigned int)config.ib_port);\n            result = Number;\n          } else {\n            <span class=\"supfact\">res</span>->pd =\n                (ibv_pd *)ibv_alloc_pd(<span class=\"supfact\">res</span>->ib_ctx);\n            if (<span class=\"supfact\">res</span>->pd) {\n              <span class=\"supfact\">cq_size</span> = Number;\n              <span class=\"supfact\">res</span>->cq =\n                  (ibv_cq *)ibv_create_cq(<span class=\"supfact\">res</span>->ib_ctx, Number L,\n                                          Number L, Number L, Number L);\n              if (<span class=\"supfact\">res</span>->cq) {\n                <span class=\"supfact\">size</span> = Number L;\n                <span class=\"supfact\">res</span>->buf = (char *)malloc(Number);\n                if (<span class=\"supfact\">res</span>->buf) {\n                  if (config.server_name) {\n                    memset(<span class=\"supfact\">res</span>->buf, Number,\n                           <span class=\"supfact\">size</span>);\n                  } else {\n                    strcpy(<span class=\"supfact\">res</span>->buf, String);\n                    fprintf(stdout, String, <span class=\"supfact\">res</span>->buf);\n                  }\n                  if (config.server_name)\n                    v4 = Number;\n                  else\n                    v4 = Number;\n                  <span class=\"supfact\">mr_flags</span> = v4;\n                  <span class=\"supfact\">res</span>->mr = (ibv_mr *)ibv_reg_mr(\n                      <span class=\"supfact\">res</span>->pd, <span class=\"supfact\">res</span>->buf,\n                      <span class=\"supfact\">size</span>, v4);\n                  if (<span class=\"supfact\">res</span>->mr) {\n                    fprintf(stdout, String, <span class=\"supfact\">res</span>->buf,\n                            <span class=\"supfact\">res</span>->mr->lkey,\n                            <span class=\"supfact\">res</span>->mr->rkey,\n                            (unsigned int)<span class=\"supfact\">mr_flags</span>);\n                    memset(&<span class=\"supfact\">qp_init_attr</span>, Number,\n                           sizeof(<span class=\"supfact\">qp_init_attr</span>));\n                    <span class=\"supfact\">qp_init_attr</span>.qp_type = IBV_QPT_RC;\n                    <span class=\"supfact\">qp_init_attr</span>.sq_sig_all = Number;\n                    <span class=\"supfact\">qp_init_attr</span>.send_cq =\n                        <span class=\"supfact\">res</span>->cq;\n                    <span class=\"supfact\">qp_init_attr</span>.recv_cq =\n                        <span class=\"supfact\">res</span>->cq;\n                    <span class=\"supfact\">qp_init_attr</span>.cap.max_send_wr = Number;\n                    <span class=\"supfact\">qp_init_attr</span>.cap.max_recv_wr = Number;\n                    <span class=\"supfact\">qp_init_attr</span>.cap.max_send_sge = Number;\n                    <span class=\"supfact\">qp_init_attr</span>.cap.max_recv_sge = Number;\n                    <span class=\"supfact\">res</span>->qp = (ibv_qp *)ibv_create_qp(\n                        <span class=\"supfact\">res</span>->pd, &<span class=\"supfact\">qp_init_attr</span>);\n                    if (<span class=\"supfact\">res</span>->qp) {\n                      fprintf(stdout, String, <span class=\"supfact\">res</span>->qp->qp_num);\n                      result = Number;\n                    } else {\n                      fwrite(String, Number, Number, stderr);\n                      result = Number;\n                    }\n                  } else {\n                    fprintf(stderr, String,\n                            (unsigned int)<span class=\"supfact\">mr_flags</span>);\n                    result = Number;\n                  }\n                } else {\n                  fprintf(stderr, String, <span class=\"supfact\">size</span>);\n                  result = Number;\n                }\n              } else {\n                fprintf(stderr, String, (unsigned int)<span class=\"supfact\">cq_size</span>);\n                result = Number;\n              }\n            } else {\n              fwrite(String, Number, Number, stderr);\n              result = Number;\n            }\n          }\n        } else {\n          fprintf(stderr, String, config.dev_name);\n          result = Number;\n        }\n      } else {\n        fprintf(stderr, String, config.dev_name);\n        result = Number;\n      }\n    } else {\n      fprintf(stderr, String, Number L);\n      result = Number;\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "nl80211_state *", "pred_name": "state", "ref_name": "res", "ref_type": "resources *"}, {"name": "v2", "type": "const char *", "pred_name": "v2", "ref_name": "v2", "ref_type": "const char *"}, {"name": "v5", "type": "int", "pred_name": "ret", "ref_name": "num_devices", "ref_type": "int"}, {"name": "s", "type": "char[64]", "pred_name": "buf", "ref_name": "qp_init_attr", "ref_type": "struct ibv_qp_init_attr { void * qp_context; ibv_cq * send_cq; ibv_cq * recv_cq; ibv_srq * srq; ibv_qp_cap cap; ibv_qp_type qp_type; int sq_sig_all; PADDING (4); }"}, {"name": "size", "type": "size_t", "pred_name": "len", "ref_name": "size", "ref_type": "size_t"}, {"name": "v8", "type": "int", "pred_name": "ret", "ref_name": "cq_size", "ref_type": "int"}, {"name": "v9", "type": "int", "pred_name": "fd", "ref_name": "mr_flags", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "v11", "type": "__unk__", "pred_name": "__unk__", "ref_name": "ib_dev", "ref_type": "ibv_device *"}], "body_in_train": false}, {"repo_owner": "lalithsuresh", "repo_name": "QEMU-Device-State-Visualisations", "path": "lalithsuresh/QEMU-Device-State-Visualisations/5dbf21ae7d3d5eea02d9980c2fd803b8519cf7d8e5c66d529a688549d2729fca", "path_in_repo": "lalithsuresh/QEMU-Device-State-Visualisations//arm-softmmu/pxa2xx_pic.o", "objdump": "00000000000000e2 <pxa2xx_pic_update>:\n  e2:\t55                   \tpush   %rbp\n  e3:\t48 89 e5             \tmov    %rsp,%rbp\n  e6:\t48 83 ec 30          \tsub    $0x30,%rsp\n  ea:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  ee:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  f5:\t00 00 \n  f7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  fb:\t31 c0                \txor    %eax,%eax\n  fd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 101:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 105:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 109:\t48 8b 00             \tmov    (%rax),%rax\n 10c:\t8b 80 84 04 00 00    \tmov    0x484(%rax),%eax\n 112:\t85 c0                \ttest   %eax,%eax\n 114:\t74 5a                \tje     170 <pxa2xx_pic_update+0x8e>\n 116:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 11a:\t8b 50 10             \tmov    0x10(%rax),%edx\n 11d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 121:\t8b 48 08             \tmov    0x8(%rax),%ecx\n 124:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 128:\t8b 40 20             \tmov    0x20(%rax),%eax\n 12b:\t09 c8                \tor     %ecx,%eax\n 12d:\t21 d0                \tand    %edx,%eax\n 12f:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 132:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 136:\t8b 50 14             \tmov    0x14(%rax),%edx\n 139:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 13d:\t8b 48 0c             \tmov    0xc(%rax),%ecx\n 140:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 144:\t8b 40 20             \tmov    0x20(%rax),%eax\n 147:\t09 c8                \tor     %ecx,%eax\n 149:\t21 d0                \tand    %edx,%eax\n 14b:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 14e:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 151:\t85 c0                \ttest   %eax,%eax\n 153:\t75 07                \tjne    15c <pxa2xx_pic_update+0x7a>\n 155:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 158:\t85 c0                \ttest   %eax,%eax\n 15a:\t74 14                \tje     170 <pxa2xx_pic_update+0x8e>\n 15c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 160:\t48 8b 00             \tmov    (%rax),%rax\n 163:\tbe 04 00 00 00       \tmov    $0x4,%esi\n 168:\t48 89 c7             \tmov    %rax,%rdi\n 16b:\te8 00 00 00 00       \tcallq  170 <pxa2xx_pic_update+0x8e>\n 170:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 174:\t8b 50 10             \tmov    0x10(%rax),%edx\n 177:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 17b:\t8b 40 08             \tmov    0x8(%rax),%eax\n 17e:\t21 d0                \tand    %edx,%eax\n 180:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 183:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 187:\t8b 50 14             \tmov    0x14(%rax),%edx\n 18a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 18e:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 191:\t21 d0                \tand    %edx,%eax\n 193:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 196:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 199:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 19d:\t8b 40 18             \tmov    0x18(%rax),%eax\n 1a0:\t21 d0                \tand    %edx,%eax\n 1a2:\t85 c0                \ttest   %eax,%eax\n 1a4:\t75 10                \tjne    1b6 <pxa2xx_pic_update+0xd4>\n 1a6:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 1a9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1ad:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n 1b0:\t21 d0                \tand    %edx,%eax\n 1b2:\t85 c0                \ttest   %eax,%eax\n 1b4:\t74 16                \tje     1cc <pxa2xx_pic_update+0xea>\n 1b6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1ba:\t48 8b 00             \tmov    (%rax),%rax\n 1bd:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 1c2:\t48 89 c7             \tmov    %rax,%rdi\n 1c5:\te8 00 00 00 00       \tcallq  1ca <pxa2xx_pic_update+0xe8>\n 1ca:\teb 14                \tjmp    1e0 <pxa2xx_pic_update+0xfe>\n 1cc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1d0:\t48 8b 00             \tmov    (%rax),%rax\n 1d3:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 1d8:\t48 89 c7             \tmov    %rax,%rdi\n 1db:\te8 00 00 00 00       \tcallq  1e0 <pxa2xx_pic_update+0xfe>\n 1e0:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n 1e3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1e7:\t8b 40 18             \tmov    0x18(%rax),%eax\n 1ea:\tf7 d0                \tnot    %eax\n 1ec:\t21 d0                \tand    %edx,%eax\n 1ee:\t85 c0                \ttest   %eax,%eax\n 1f0:\t75 12                \tjne    204 <pxa2xx_pic_update+0x122>\n 1f2:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 1f5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1f9:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n 1fc:\tf7 d0                \tnot    %eax\n 1fe:\t21 d0                \tand    %edx,%eax\n 200:\t85 c0                \ttest   %eax,%eax\n 202:\t74 16                \tje     21a <pxa2xx_pic_update+0x138>\n 204:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 208:\t48 8b 00             \tmov    (%rax),%rax\n 20b:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 210:\t48 89 c7             \tmov    %rax,%rdi\n 213:\te8 00 00 00 00       \tcallq  218 <pxa2xx_pic_update+0x136>\n 218:\teb 14                \tjmp    22e <pxa2xx_pic_update+0x14c>\n 21a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 21e:\t48 8b 00             \tmov    (%rax),%rax\n 221:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 226:\t48 89 c7             \tmov    %rax,%rdi\n 229:\te8 00 00 00 00       \tcallq  22e <pxa2xx_pic_update+0x14c>\n 22e:\t90                   \tnop\n 22f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 233:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 23a:\t00 00 \n 23c:\t74 05                \tje     243 <pxa2xx_pic_update+0x161>\n 23e:\te8 00 00 00 00       \tcallq  243 <pxa2xx_pic_update+0x161>\n 243:\tc9                   \tleaveq \n 244:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall pxa2xx_pic_update(_DWORD *<span class=\"supfact\">a1</span>) {\n  int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (*(_DWORD *)(*(_QWORD *)<span class=\"supfact\">a1</span> + Number L) &&\n      ((<span class=\"supfact\">a1</span>[Number] &\n        (<span class=\"supfact\">a1</span>[Number] | <span class=\"supfact\">a1</span>[Number])) != Number ||\n       (<span class=\"supfact\">a1</span>[Number] &\n        (<span class=\"supfact\">a1</span>[Number] | <span class=\"supfact\">a1</span>[Number])) != Number))\n    cpu_interrupt(*(_QWORD *)<span class=\"supfact\">a1</span>, Number L);\n  <span class=\"supfact\">v2</span> = <span class=\"supfact\">a1</span>[Number] & <span class=\"supfact\">a1</span>[Number];\n  <span class=\"supfact\">v3</span> = <span class=\"supfact\">a1</span>[Number] & <span class=\"supfact\">a1</span>[Number];\n  if ((<span class=\"supfact\">v2</span> & <span class=\"supfact\">a1</span>[Number]) != Number ||\n      (<span class=\"supfact\">v3</span> & <span class=\"supfact\">a1</span>[Number]) != Number)\n    cpu_interrupt(*(_QWORD *)<span class=\"supfact\">a1</span>, Number L);\n  else\n    cpu_reset_interrupt(*(_QWORD *)<span class=\"supfact\">a1</span>, Number L);\n  if ((<span class=\"supfact\">v2</span> & ~<span class=\"supfact\">a1</span>[Number]) != Number ||\n      (<span class=\"supfact\">v3</span> & ~<span class=\"supfact\">a1</span>[Number]) != Number)\n    cpu_interrupt(*(_QWORD *)<span class=\"supfact\">a1</span>, Number L);\n  else\n    cpu_reset_interrupt(*(_QWORD *)<span class=\"supfact\">a1</span>, Number L);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n}", "code_t": "void __cdecl pxa2xx_pic_update(void *<span class=\"supfact\">opaque</span>) {\n  int <span class=\"supfact\">mask</span>;\n  int <span class=\"supfact\">mask_4</span>;\n  if (*(_DWORD *)(*(_QWORD *)<span class=\"supfact\">opaque</span> + Number L) &&\n      ((*((_DWORD *)<span class=\"supfact\">opaque</span> + Number) &\n        (*((_DWORD *)<span class=\"supfact\">opaque</span> + Number) |\n         *((_DWORD *)<span class=\"supfact\">opaque</span> + Number))) != Number ||\n       (*((_DWORD *)<span class=\"supfact\">opaque</span> + Number) &\n        (*((_DWORD *)<span class=\"supfact\">opaque</span> + Number) |\n         *((_DWORD *)<span class=\"supfact\">opaque</span> + Number))) != Number)) {\n    cpu_interrupt(*(_QWORD *)<span class=\"supfact\">opaque</span>, Number L);\n  }\n  <span class=\"supfact\">mask</span> = *((_DWORD *)<span class=\"supfact\">opaque</span> + Number) &\n                         *((_DWORD *)<span class=\"supfact\">opaque</span> + Number);\n  <span class=\"supfact\">mask_4</span> = *((_DWORD *)<span class=\"supfact\">opaque</span> + Number) &\n                           *((_DWORD *)<span class=\"supfact\">opaque</span> + Number);\n  if ((<span class=\"supfact\">mask</span> & *((_DWORD *)<span class=\"supfact\">opaque</span> + Number)) !=\n          Number ||\n      (<span class=\"supfact\">mask_4</span> & *((_DWORD *)<span class=\"supfact\">opaque</span> + Number)) !=\n          Number)\n    cpu_interrupt(*(_QWORD *)<span class=\"supfact\">opaque</span>, Number L);\n  else\n    cpu_reset_interrupt(*(_QWORD *)<span class=\"supfact\">opaque</span>, Number L);\n  if ((<span class=\"supfact\">mask</span> & ~*((_DWORD *)<span class=\"supfact\">opaque</span> + Number)) !=\n          Number ||\n      (<span class=\"supfact\">mask_4</span> &\n       ~*((_DWORD *)<span class=\"supfact\">opaque</span> + Number)) != Number)\n    cpu_interrupt(*(_QWORD *)<span class=\"supfact\">opaque</span>, Number L);\n  else\n    cpu_reset_interrupt(*(_QWORD *)<span class=\"supfact\">opaque</span>, Number L);\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "opaque", "ref_name": "opaque", "ref_type": "void *"}, {"name": "v2", "type": "uint32_t", "pred_name": "irq", "ref_name": "mask", "ref_type": "int"}, {"name": "v3", "type": "int", "pred_name": "level", "ref_name": "mask_4", "ref_type": "int"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "ubinix-warun", "repo_name": "sketchbook-promela", "path": "ubinix-warun/sketchbook-promela/a1c645ce325cf0b59b50843a90e6b607e780b09a70a2b9b0ff15edca0d2a8ded", "path_in_repo": "ubinix-warun/sketchbook-promela/cheatsheet/Spin644/Src6.4.4/spin", "objdump": "000000000041a9fe <announce>:\n  41a9fe:\t55                   \tpush   %rbp\n  41a9ff:\t48 89 e5             \tmov    %rsp,%rbp\n  41aa02:\t48 83 ec 10          \tsub    $0x10,%rsp\n  41aa06:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  41aa0a:\t8b 05 0c 58 0f 00    \tmov    0xf580c(%rip),%eax        # 51021c <columns>\n  41aa10:\t85 c0                \ttest   %eax,%eax\n  41aa12:\t0f 84 b4 00 00 00    \tje     41aacc <announce+0xce>\n  41aa18:\tc7 05 ba c1 0a 00 01 \tmovl   $0x1,0xac1ba(%rip)        # 4c6bdc <firstrow>\n  41aa1f:\t00 00 00 \n  41aa22:\t8b 05 f4 57 0f 00    \tmov    0xf57f4(%rip),%eax        # 51021c <columns>\n  41aa28:\t83 f8 02             \tcmp    $0x2,%eax\n  41aa2b:\t75 63                \tjne    41aa90 <announce+0x92>\n  41aa2d:\t48 8b 05 14 63 0e 00 \tmov    0xe6314(%rip),%rax        # 500d48 <run>\n  41aa34:\t48 8b 00             \tmov    (%rax),%rax\n  41aa37:\t48 8b 00             \tmov    (%rax),%rax\n  41aa3a:\t48 8b 15 07 63 0e 00 \tmov    0xe6307(%rip),%rdx        # 500d48 <run>\n  41aa41:\t8b 4a 0c             \tmov    0xc(%rdx),%ecx\n  41aa44:\t0f b7 15 39 63 0e 00 \tmovzwl 0xe6339(%rip),%edx        # 500d84 <Have_claim>\n  41aa4b:\t0f bf d2             \tmovswl %dx,%edx\n  41aa4e:\t29 d1                \tsub    %edx,%ecx\n  41aa50:\t89 ca                \tmov    %ecx,%edx\n  41aa52:\t48 89 c1             \tmov    %rax,%rcx\n  41aa55:\tbe 91 8a 45 00       \tmov    $0x458a91,%esi\n  41aa5a:\tbf 60 50 51 00       \tmov    $0x515060,%edi\n  41aa5f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41aa64:\te8 57 78 fe ff       \tcallq  4022c0 <sprintf@plt>\n  41aa69:\t48 8b 05 d8 62 0e 00 \tmov    0xe62d8(%rip),%rax        # 500d48 <run>\n  41aa70:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  41aa73:\t0f b7 05 0a 63 0e 00 \tmovzwl 0xe630a(%rip),%eax        # 500d84 <Have_claim>\n  41aa7a:\t98                   \tcwtl   \n  41aa7b:\t29 c2                \tsub    %eax,%edx\n  41aa7d:\t89 d0                \tmov    %edx,%eax\n  41aa7f:\tbe 60 50 51 00       \tmov    $0x515060,%esi\n  41aa84:\t89 c7                \tmov    %eax,%edi\n  41aa86:\te8 99 a3 ff ff       \tcallq  414e24 <pstext>\n  41aa8b:\te9 1c 01 00 00       \tjmpq   41abac <announce+0x1ae>\n  41aa90:\t48 8b 05 b1 62 0e 00 \tmov    0xe62b1(%rip),%rax        # 500d48 <run>\n  41aa97:\t48 8b 00             \tmov    (%rax),%rax\n  41aa9a:\t48 8b 00             \tmov    (%rax),%rax\n  41aa9d:\t48 8b 15 a4 62 0e 00 \tmov    0xe62a4(%rip),%rdx        # 500d48 <run>\n  41aaa4:\t8b 4a 0c             \tmov    0xc(%rdx),%ecx\n  41aaa7:\t0f b7 15 d6 62 0e 00 \tmovzwl 0xe62d6(%rip),%edx        # 500d84 <Have_claim>\n  41aaae:\t0f bf d2             \tmovswl %dx,%edx\n  41aab1:\t29 d1                \tsub    %edx,%ecx\n  41aab3:\t48 89 c2             \tmov    %rax,%rdx\n  41aab6:\t89 ce                \tmov    %ecx,%esi\n  41aab8:\tbf 97 8a 45 00       \tmov    $0x458a97,%edi\n  41aabd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41aac2:\te8 49 76 fe ff       \tcallq  402110 <printf@plt>\n  41aac7:\te9 e0 00 00 00       \tjmpq   41abac <announce+0x1ae>\n  41aacc:\t8b 05 4e 57 0f 00    \tmov    0xf574e(%rip),%eax        # 510220 <dumptab>\n  41aad2:\t85 c0                \ttest   %eax,%eax\n  41aad4:\t0f 85 d1 00 00 00    \tjne    41abab <announce+0x1ad>\n  41aada:\t8b 05 d8 56 0f 00    \tmov    0xf56d8(%rip),%eax        # 5101b8 <analyze>\n  41aae0:\t85 c0                \ttest   %eax,%eax\n  41aae2:\t0f 85 c3 00 00 00    \tjne    41abab <announce+0x1ad>\n  41aae8:\t8b 05 02 57 0f 00    \tmov    0xf5702(%rip),%eax        # 5101f0 <product>\n  41aaee:\t85 c0                \ttest   %eax,%eax\n  41aaf0:\t0f 85 b5 00 00 00    \tjne    41abab <announce+0x1ad>\n  41aaf6:\t8b 05 10 57 0f 00    \tmov    0xf5710(%rip),%eax        # 51020c <s_trail>\n  41aafc:\t85 c0                \ttest   %eax,%eax\n  41aafe:\t0f 85 a7 00 00 00    \tjne    41abab <announce+0x1ad>\n  41ab04:\t8b 05 0a 57 0f 00    \tmov    0xf570a(%rip),%eax        # 510214 <verbose>\n  41ab0a:\t83 e0 04             \tand    $0x4,%eax\n  41ab0d:\t85 c0                \ttest   %eax,%eax\n  41ab0f:\t0f 84 96 00 00 00    \tje     41abab <announce+0x1ad>\n  41ab15:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  41ab1a:\t74 18                \tje     41ab34 <announce+0x136>\n  41ab1c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41ab20:\t48 89 c6             \tmov    %rax,%rsi\n  41ab23:\tbf a5 8a 45 00       \tmov    $0x458aa5,%edi\n  41ab28:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41ab2d:\te8 de 75 fe ff       \tcallq  402110 <printf@plt>\n  41ab32:\teb 0a                \tjmp    41ab3e <announce+0x140>\n  41ab34:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  41ab39:\te8 cf 26 00 00       \tcallq  41d20d <whoruns>\n  41ab3e:\t48 8b 05 03 62 0e 00 \tmov    0xe6203(%rip),%rax        # 500d48 <run>\n  41ab45:\t48 8b 00             \tmov    (%rax),%rax\n  41ab48:\t48 8b 00             \tmov    (%rax),%rax\n  41ab4b:\t48 8b 15 f6 61 0e 00 \tmov    0xe61f6(%rip),%rdx        # 500d48 <run>\n  41ab52:\t8b 4a 0c             \tmov    0xc(%rdx),%ecx\n  41ab55:\t0f b7 15 28 62 0e 00 \tmovzwl 0xe6228(%rip),%edx        # 500d84 <Have_claim>\n  41ab5c:\t0f bf d2             \tmovswl %dx,%edx\n  41ab5f:\t29 d1                \tsub    %edx,%ecx\n  41ab61:\t48 89 c2             \tmov    %rax,%rdx\n  41ab64:\t89 ce                \tmov    %ecx,%esi\n  41ab66:\tbf b8 8a 45 00       \tmov    $0x458ab8,%edi\n  41ab6b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41ab70:\te8 9b 75 fe ff       \tcallq  402110 <printf@plt>\n  41ab75:\t48 8b 05 cc 61 0e 00 \tmov    0xe61cc(%rip),%rax        # 500d48 <run>\n  41ab7c:\t8b 40 10             \tmov    0x10(%rax),%eax\n  41ab7f:\t83 f8 01             \tcmp    $0x1,%eax\n  41ab82:\t7e 1b                \tjle    41ab9f <announce+0x1a1>\n  41ab84:\t48 8b 05 bd 61 0e 00 \tmov    0xe61bd(%rip),%rax        # 500d48 <run>\n  41ab8b:\t8b 40 10             \tmov    0x10(%rax),%eax\n  41ab8e:\t89 c6                \tmov    %eax,%esi\n  41ab90:\tbf 0b 8a 45 00       \tmov    $0x458a0b,%edi\n  41ab95:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41ab9a:\te8 71 75 fe ff       \tcallq  402110 <printf@plt>\n  41ab9f:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  41aba4:\te8 97 74 fe ff       \tcallq  402040 <putchar@plt>\n  41aba9:\teb 01                \tjmp    41abac <announce+0x1ae>\n  41abab:\t90                   \tnop\n  41abac:\tc9                   \tleaveq \n  41abad:\tc3                   \tretq   ", "code_s": "int __fastcall announce(const char *<span class=\"supfact\">a1</span>) {\n  int <span class=\"supfact\">result</span>;\n  if (columns) {\n    firstrow = Number;\n    if (columns == Number) {\n      sprintf(&Buf, String,\n              (unsigned int)(*(_DWORD *)(run + Number) - Have_claim),\n              **(const char ***)run);\n      <span class=\"supfact\">result</span> =\n          (unsigned int)pstext(*(_DWORD *)(run + Number) - Have_claim, &Buf);\n    } else {\n      <span class=\"supfact\">result</span> =\n          printf(String, (unsigned int)(*(_DWORD *)(run + Number) - Have_claim),\n                 **(const char ***)run);\n    }\n  } else {\n    <span class=\"supfact\">result</span> = dumptab;\n    if (!dumptab) {\n      <span class=\"supfact\">result</span> = analyze;\n      if (!analyze) {\n        <span class=\"supfact\">result</span> = product;\n        if (!product) {\n          <span class=\"supfact\">result</span> = s_trail;\n          if (!s_trail) {\n            <span class=\"supfact\">result</span> = verbose & Number;\n            if ((verbose & Number) != Number) {\n              if (<span class=\"supfact\">a1</span>)\n                printf(String, <span class=\"supfact\">a1</span>);\n              else\n                whoruns(Number L);\n              printf(String,\n                     (unsigned int)(*(_DWORD *)(run + Number) - Have_claim),\n                     **(const char ***)run);\n              if (*(int *)(run + Number) > Number)\n                printf(String, *(unsigned int *)(run + Number));\n              <span class=\"supfact\">result</span> = putchar(Number);\n            }\n          }\n        }\n      }\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl announce(char *<span class=\"supfact\">w</span>) {\n  if (columns) {\n    firstrow = Number;\n    if (columns == Number) {\n      sprintf(Buf, String, (unsigned int)(run->pid - Have_claim), run->n->name);\n      pstext(run->pid - Have_claim, Buf);\n    } else {\n      printf(String, (unsigned int)(run->pid - Have_claim), run->n->name);\n    }\n  } else if (!dumptab && !analyze && !product && !s_trail &&\n             (verbose & Number) != Number) {\n    if (<span class=\"supfact\">w</span>)\n      printf(String, <span class=\"supfact\">w</span>);\n    else\n      whoruns(Number);\n    printf(String, (unsigned int)(run->pid - Have_claim), run->n->name);\n    if (run->priority > Number)\n      printf(String, (unsigned int)run->priority);\n    putchar(Number);\n  }\n}", "var": [{"name": "a1", "type": "const char *const *", "pred_name": "argv", "ref_name": "w", "ref_type": "char *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/9e7879d21d487a1a1a720f1fe540487b3adac6cf77d0f194d5b1d0d9bf7b09c2", "path_in_repo": "eerimoq/pumbaa/simba/tst/oam/upgrade/kermit/build/linux/kermit_suite.out", "objdump": "0000000000434d05 <match_zero_or_one_non_greedy>:\n  434d05:\t55                   \tpush   %rbp\n  434d06:\t48 89 e5             \tmov    %rsp,%rbp\n  434d09:\t53                   \tpush   %rbx\n  434d0a:\t48 83 ec 58          \tsub    $0x58,%rsp\n  434d0e:\te8 3d d4 fc ff       \tcallq  402150 <mcount@plt>\n  434d13:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  434d17:\t89 75 a4             \tmov    %esi,-0x5c(%rbp)\n  434d1a:\t48 8b 05 7f 04 0a 00 \tmov    0xa047f(%rip),%rax        # 4d51a0 <__gcov0.match_zero_or_one_non_greedy>\n  434d21:\t48 83 c0 01          \tadd    $0x1,%rax\n  434d25:\t48 89 05 74 04 0a 00 \tmov    %rax,0xa0474(%rip)        # 4d51a0 <__gcov0.match_zero_or_one_non_greedy>\n  434d2c:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  434d30:\t48 8b 00             \tmov    (%rax),%rax\n  434d33:\t0f b6 00             \tmovzbl (%rax),%eax\n  434d36:\t0f be c0             \tmovsbl %al,%eax\n  434d39:\tc1 e0 08             \tshl    $0x8,%eax\n  434d3c:\t89 c2                \tmov    %eax,%edx\n  434d3e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  434d42:\t48 8b 00             \tmov    (%rax),%rax\n  434d45:\t48 83 c0 01          \tadd    $0x1,%rax\n  434d49:\t0f b6 00             \tmovzbl (%rax),%eax\n  434d4c:\t0f be c0             \tmovsbl %al,%eax\n  434d4f:\t09 d0                \tor     %edx,%eax\n  434d51:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  434d54:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  434d58:\t48 8b 00             \tmov    (%rax),%rax\n  434d5b:\t48 8d 50 02          \tlea    0x2(%rax),%rdx\n  434d5f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  434d63:\t48 89 10             \tmov    %rdx,(%rax)\n  434d66:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  434d6a:\t48 8b 08             \tmov    (%rax),%rcx\n  434d6d:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n  434d71:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n  434d75:\t48 89 5d b8          \tmov    %rbx,-0x48(%rbp)\n  434d79:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n  434d7d:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  434d81:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  434d85:\t48 89 5d c8          \tmov    %rbx,-0x38(%rbp)\n  434d89:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  434d8d:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  434d91:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  434d95:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  434d99:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  434d9d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  434da0:\t48 98                \tcltq   \n  434da2:\t48 01 d0             \tadd    %rdx,%rax\n  434da5:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  434da9:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  434dad:\t48 89 c7             \tmov    %rax,%rdi\n  434db0:\te8 73 05 00 00       \tcallq  435328 <match>\n  434db5:\t48 8b 15 ec 03 0a 00 \tmov    0xa03ec(%rip),%rdx        # 4d51a8 <__gcov0.match_zero_or_one_non_greedy+0x8>\n  434dbc:\t48 83 c2 01          \tadd    $0x1,%rdx\n  434dc0:\t48 89 15 e1 03 0a 00 \tmov    %rdx,0xa03e1(%rip)        # 4d51a8 <__gcov0.match_zero_or_one_non_greedy+0x8>\n  434dc7:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  434dca:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  434dce:\t78 1c                \tjs     434dec <match_zero_or_one_non_greedy+0xe7>\n  434dd0:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n  434dd3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  434dd6:\t01 d0                \tadd    %edx,%eax\n  434dd8:\t48 8b 15 d1 03 0a 00 \tmov    0xa03d1(%rip),%rdx        # 4d51b0 <__gcov0.match_zero_or_one_non_greedy+0x10>\n  434ddf:\t48 83 c2 01          \tadd    $0x1,%rdx\n  434de3:\t48 89 15 c6 03 0a 00 \tmov    %rdx,0xa03c6(%rip)        # 4d51b0 <__gcov0.match_zero_or_one_non_greedy+0x10>\n  434dea:\teb 48                \tjmp    434e34 <match_zero_or_one_non_greedy+0x12f>\n  434dec:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  434df0:\t48 89 c7             \tmov    %rax,%rdi\n  434df3:\te8 30 05 00 00       \tcallq  435328 <match>\n  434df8:\t48 8b 15 b9 03 0a 00 \tmov    0xa03b9(%rip),%rdx        # 4d51b8 <__gcov0.match_zero_or_one_non_greedy+0x18>\n  434dff:\t48 83 c2 01          \tadd    $0x1,%rdx\n  434e03:\t48 89 15 ae 03 0a 00 \tmov    %rdx,0xa03ae(%rip)        # 4d51b8 <__gcov0.match_zero_or_one_non_greedy+0x18>\n  434e0a:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  434e0d:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  434e11:\t78 1c                \tjs     434e2f <match_zero_or_one_non_greedy+0x12a>\n  434e13:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n  434e16:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  434e19:\t01 d0                \tadd    %edx,%eax\n  434e1b:\t48 8b 15 9e 03 0a 00 \tmov    0xa039e(%rip),%rdx        # 4d51c0 <__gcov0.match_zero_or_one_non_greedy+0x20>\n  434e22:\t48 83 c2 01          \tadd    $0x1,%rdx\n  434e26:\t48 89 15 93 03 0a 00 \tmov    %rdx,0xa0393(%rip)        # 4d51c0 <__gcov0.match_zero_or_one_non_greedy+0x20>\n  434e2d:\teb 05                \tjmp    434e34 <match_zero_or_one_non_greedy+0x12f>\n  434e2f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  434e34:\t48 83 c4 58          \tadd    $0x58,%rsp\n  434e38:\t5b                   \tpop    %rbx\n  434e39:\t5d                   \tpop    %rbp\n  434e3a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall match_zero_or_one_non_greedy(__int64 *<span class=\"supfact\">a1</span>,\n                                                int <span class=\"supfact\">a2</span>) {\n  __int64 v2;\n  __int64 v3;\n  __int64 <span class=\"supfact\">v4</span>;\n  int v5;\n  __int64 result;\n  int v7;\n  __int64 <span class=\"supfact\">v8</span>[Number];\n  int <span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  ++_gcov0_match_zero_or_one_non_greedy;\n  <span class=\"supfact\">v10</span> = (*(char *)*<span class=\"supfact\">a1</span> << Number) |\n                        *(char *)(*<span class=\"supfact\">a1</span> + Number);\n  *<span class=\"supfact\">a1</span> += Number L;\n  v2 = <span class=\"supfact\">a1</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = *<span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v8</span>[Number] = v2;\n  v3 = <span class=\"supfact\">a1</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = <span class=\"supfact\">a1</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = v3;\n  <span class=\"supfact\">v4</span> = <span class=\"supfact\">a1</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = <span class=\"supfact\">a1</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v8</span>[Number] += <span class=\"supfact\">v10</span>;\n  v5 = match(<span class=\"supfact\">v8</span>);\n  ++qword_4D51A8;\n  <span class=\"supfact\">v9</span> = v5;\n  if (v5 < Number) {\n    v7 = match(<span class=\"supfact\">a1</span>);\n    ++qword_4D51B8;\n    <span class=\"supfact\">v9</span> = v7;\n    if (v7 < Number) {\n      result = Number;\n    } else {\n      result = (unsigned int)(<span class=\"supfact\">a2</span> + <span class=\"supfact\">v9</span>);\n      ++qword_4D51C0;\n    }\n  } else {\n    result = (unsigned int)(<span class=\"supfact\">a2</span> + <span class=\"supfact\">v9</span>);\n    ++qword_4D51B0;\n  }\n  return result;\n}", "code_t": "int __cdecl match_zero_or_one_non_greedy(match_t *<span class=\"supfact\">self_p</span>,\n                                         int <span class=\"supfact\">matched_size</span>) {\n  __int64 v2;\n  size_t v3;\n  size_t *<span class=\"supfact\">v4</span>;\n  int v5;\n  int result;\n  int v7;\n  match_t <span class=\"supfact\">state</span>;\n  int <span class=\"supfact\">res</span>;\n  int <span class=\"supfact\">code_size</span>;\n  ++_gcov0_match_zero_or_one_non_greedy;\n  <span class=\"supfact\">code_size</span> =\n      (*<span class=\"supfact\">self_p</span>->compiled_p << Number) |\n      *((char *)<span class=\"supfact\">self_p</span>->compiled_p + Number);\n  <span class=\"supfact\">self_p</span>->compiled_p += Number;\n  v2 = *(_QWORD *)&<span class=\"supfact\">self_p</span>->flags;\n  <span class=\"supfact\">state</span>.compiled_p = <span class=\"supfact\">self_p</span>->compiled_p;\n  *(_QWORD *)&<span class=\"supfact\">state</span>.flags = v2;\n  v3 = <span class=\"supfact\">self_p</span>->buf_left;\n  <span class=\"supfact\">state</span>.buf_p = <span class=\"supfact\">self_p</span>->buf_p;\n  <span class=\"supfact\">state</span>.buf_left = v3;\n  <span class=\"supfact\">v4</span> = <span class=\"supfact\">self_p</span>->number_of_groups_p;\n  <span class=\"supfact\">state</span>.groups_p = <span class=\"supfact\">self_p</span>->groups_p;\n  <span class=\"supfact\">state</span>.number_of_groups_p = <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">state</span>.compiled_p += <span class=\"supfact\">code_size</span>;\n  v5 = match(&<span class=\"supfact\">state</span>);\n  ++qword_4D51A8;\n  <span class=\"supfact\">res</span> = v5;\n  if (v5 < Number) {\n    v7 = match(<span class=\"supfact\">self_p</span>);\n    ++qword_4D51B8;\n    <span class=\"supfact\">res</span> = v7;\n    if (v7 < Number) {\n      result = Number;\n    } else {\n      result = <span class=\"supfact\">matched_size</span> + <span class=\"supfact\">res</span>;\n      ++qword_4D51C0;\n    }\n  } else {\n    result = <span class=\"supfact\">matched_size</span> + <span class=\"supfact\">res</span>;\n    ++qword_4D51B0;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "match_t *", "pred_name": "self_p", "ref_name": "self_p", "ref_type": "match_t *"}, {"name": "a2", "type": "int", "pred_name": "matched_size", "ref_name": "matched_size", "ref_type": "int"}, {"name": "v4", "type": "size_t *", "pred_name": "v4", "ref_name": "v4", "ref_type": "size_t *"}, {"name": "v8", "type": "struct match_t { const char * compiled_p; char flags; PADDING (7); const char * buf_p; size_t buf_left; re_group_t * groups_p; size_t * number_of_groups_p; }", "pred_name": "state", "ref_name": "state", "ref_type": "struct match_t { const char * compiled_p; char flags; PADDING (7); const char * buf_p; size_t buf_left; re_group_t * groups_p; size_t * number_of_groups_p; }"}, {"name": "v9", "type": "int", "pred_name": "res", "ref_name": "res", "ref_type": "int"}, {"name": "v10", "type": "int", "pred_name": "number_of_members", "ref_name": "code_size", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "lalithsuresh", "repo_name": "QEMU-Device-State-Visualisations", "path": "lalithsuresh/QEMU-Device-State-Visualisations/a9f3a344538c5db62bba690be72ec67ccaf6a986cd26205332f66b3486acb077", "path_in_repo": "lalithsuresh/QEMU-Device-State-Visualisations//libhw64/virtio-9p-debug.o", "objdump": "0000000000000320 <pprint_int32>:\n     320:\t55                   \tpush   %rbp\n     321:\t48 89 e5             \tmov    %rsp,%rbp\n     324:\t48 83 ec 50          \tsub    $0x50,%rsp\n     328:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     32c:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n     32f:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     333:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n     337:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     33e:\t00 00 \n     340:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     344:\t31 c0                \txor    %eax,%eax\n     346:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n     349:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     34d:\t89 d6                \tmov    %edx,%esi\n     34f:\t48 89 c7             \tmov    %rax,%rdi\n     352:\te8 b3 fd ff ff       \tcallq  10a <get_sg_count>\n     357:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n     35a:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n     35d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     361:\t89 d6                \tmov    %edx,%esi\n     363:\t48 89 c7             \tmov    %rax,%rdi\n     366:\te8 4f fd ff ff       \tcallq  ba <get_sg>\n     36b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     36f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     373:\t48 8b 00             \tmov    (%rax),%rax\n     376:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     37a:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n     37e:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n     381:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n     385:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n     389:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n     38f:\t48 89 c7             \tmov    %rax,%rdi\n     392:\te8 bf fc ff ff       \tcallq  56 <do_pdu_unpack>\n     397:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     39b:\t48 83 7d f0 04       \tcmpq   $0x4,-0x10(%rbp)\n     3a0:\t74 19                \tje     3bb <pprint_int32+0x9b>\n     3a2:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     3a7:\tba 56 00 00 00       \tmov    $0x56,%edx\n     3ac:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     3b1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     3b6:\te8 00 00 00 00       \tcallq  3bb <pprint_int32+0x9b>\n     3bb:\t48 83 45 e8 04       \taddq   $0x4,-0x18(%rbp)\n     3c0:\t8b 4d d8             \tmov    -0x28(%rbp),%ecx\n     3c3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3ca <pprint_int32+0xaa>\n     3ca:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n     3ce:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     3d3:\t48 89 c7             \tmov    %rax,%rdi\n     3d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     3db:\te8 00 00 00 00       \tcallq  3e0 <pprint_int32+0xc0>\n     3e0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     3e4:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     3e8:\t48 89 10             \tmov    %rdx,(%rax)\n     3eb:\t90                   \tnop\n     3ec:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     3f0:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     3f7:\t00 00 \n     3f9:\t74 05                \tje     400 <pprint_int32+0xe0>\n     3fb:\te8 00 00 00 00       \tcallq  400 <pprint_int32+0xe0>\n     400:\tc9                   \tleaveq \n     401:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall pprint_int32(__int64 <span class=\"supfact\">a1</span>,\n                                         int <span class=\"supfact\">a2</span>,\n                                         __int64 *<span class=\"supfact\">a3</span>,\n                                         const char *<span class=\"supfact\">a4</span>) {\n  unsigned int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  <span class=\"supfact\">v8</span> = get_sg_count(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n  <span class=\"supfact\">v9</span> = get_sg(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n  <span class=\"supfact\">v10</span> = *<span class=\"supfact\">a3</span>;\n  <span class=\"supfact\">v11</span> =\n      do_pdu_unpack((__int64)&<span class=\"supfact\">v7</span>, <span class=\"supfact\">v9</span>,\n                    <span class=\"supfact\">v8</span>, <span class=\"supfact\">v10</span>, Number L);\n  if (<span class=\"supfact\">v11</span> != Number)\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v10</span> += Number L;\n  fprintf(llogfile, String, <span class=\"supfact\">a4</span>, <span class=\"supfact\">v7</span>);\n  *<span class=\"supfact\">a3</span> = <span class=\"supfact\">v10</span>;\n  return __readfsqword(Number) ^ <span class=\"supfact\">v12</span>;\n}", "code_t": "void __cdecl pprint_int32(V9fsPDU_0 *<span class=\"supfact\">pdu</span>,\n                          int <span class=\"supfact\">rx</span>,\n                          size_t *<span class=\"supfact\">offsetp</span>,\n                          const char *<span class=\"supfact\">name</span>) {\n  int32_t <span class=\"supfact\">value</span>;\n  int <span class=\"supfact\">count</span>;\n  iovec *<span class=\"supfact\">sg</span>;\n  size_t <span class=\"supfact\">offset</span>;\n  size_t <span class=\"supfact\">copied</span>;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = __readfsqword(Number);\n  <span class=\"supfact\">count</span> = get_sg_count(<span class=\"supfact\">pdu</span>, <span class=\"supfact\">rx</span>);\n  <span class=\"supfact\">sg</span> = get_sg(<span class=\"supfact\">pdu</span>, <span class=\"supfact\">rx</span>);\n  <span class=\"supfact\">offset</span> = *<span class=\"supfact\">offsetp</span>;\n  <span class=\"supfact\">copied</span> =\n      do_pdu_unpack(&<span class=\"supfact\">value</span>, <span class=\"supfact\">sg</span>,\n                    <span class=\"supfact\">count</span>, <span class=\"supfact\">offset</span>, Number);\n  if (<span class=\"supfact\">copied</span> != Number)\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">offset</span> += Number L;\n  fprintf(llogfile, String, <span class=\"supfact\">name</span>,\n          (unsigned int)<span class=\"supfact\">value</span>);\n  *<span class=\"supfact\">offsetp</span> = <span class=\"supfact\">offset</span>;\n}", "var": [{"name": "a1", "type": "V9fsPDU_0 *", "pred_name": "pdu", "ref_name": "pdu", "ref_type": "V9fsPDU_0 *"}, {"name": "a2", "type": "size_t", "pred_name": "offset", "ref_name": "rx", "ref_type": "int"}, {"name": "a3", "type": "const char *", "pred_name": "fmt", "ref_name": "offsetp", "ref_type": "size_t *"}, {"name": "a4", "type": "__va_list_tag *", "pred_name": "ap", "ref_name": "name", "ref_type": "const char *"}, {"name": "v7", "type": "int", "pred_name": "i", "ref_name": "value", "ref_type": "int32_t"}, {"name": "v8", "type": "unsigned int", "pred_name": "rx", "ref_name": "count", "ref_type": "int"}, {"name": "v9", "type": "iovec *", "pred_name": "sg", "ref_name": "sg", "ref_type": "iovec *"}, {"name": "v10", "type": "unsigned __int8 *", "pred_name": "p", "ref_name": "offset", "ref_type": "size_t"}, {"name": "v11", "type": "__va_list_tag[1]", "pred_name": "ap2", "ref_name": "copied", "ref_type": "size_t"}, {"name": "v12", "type": "unsigned __int64", "pred_name": "v11", "ref_name": "v11", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "forrest898", "repo_name": "Sample_Interface_HPL_Testing", "path": "forrest898/Sample_Interface_HPL_Testing/100fd9c371ffe34e7a3bf50ecbaf136397034bfff8b0b8ed7f8a481be806b22d", "path_in_repo": "forrest898/Sample_Interface_HPL_Testing/OpenBLAS/lapack-netlib/LAPACKE/src/lapacke_cggglm_work.o", "objdump": "0000000000000000 <LAPACKE_cggglm_work>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 40          \tsub    $0x40,%rsp\n   8:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n   b:\t89 75 d8             \tmov    %esi,-0x28(%rbp)\n   e:\t89 55 d4             \tmov    %edx,-0x2c(%rbp)\n  11:\t89 4d d0             \tmov    %ecx,-0x30(%rbp)\n  14:\t4c 89 45 c8          \tmov    %r8,-0x38(%rbp)\n  18:\t44 89 4d c4          \tmov    %r9d,-0x3c(%rbp)\n  1c:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  23:\t83 7d dc 66          \tcmpl   $0x66,-0x24(%rbp)\n  27:\t75 5c                \tjne    85 <LAPACKE_cggglm_work+0x85>\n  29:\t4c 8d 45 c4          \tlea    -0x3c(%rbp),%r8\n  2d:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  31:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  35:\t48 8d 75 d4          \tlea    -0x2c(%rbp),%rsi\n  39:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n  3d:\t48 83 ec 08          \tsub    $0x8,%rsp\n  41:\t48 8d 7d ec          \tlea    -0x14(%rbp),%rdi\n  45:\t57                   \tpush   %rdi\n  46:\t48 8d 7d 40          \tlea    0x40(%rbp),%rdi\n  4a:\t57                   \tpush   %rdi\n  4b:\tff 75 38             \tpushq  0x38(%rbp)\n  4e:\tff 75 30             \tpushq  0x30(%rbp)\n  51:\tff 75 28             \tpushq  0x28(%rbp)\n  54:\tff 75 20             \tpushq  0x20(%rbp)\n  57:\t48 8d 7d 18          \tlea    0x18(%rbp),%rdi\n  5b:\t57                   \tpush   %rdi\n  5c:\t4c 8b 4d 10          \tmov    0x10(%rbp),%r9\n  60:\t48 89 c7             \tmov    %rax,%rdi\n  63:\te8 00 00 00 00       \tcallq  68 <LAPACKE_cggglm_work+0x68>\n  68:\t48 83 c4 40          \tadd    $0x40,%rsp\n  6c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  6f:\t85 c0                \ttest   %eax,%eax\n  71:\t0f 89 c9 02 00 00    \tjns    340 <LAPACKE_cggglm_work+0x340>\n  77:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  7a:\t83 e8 01             \tsub    $0x1,%eax\n  7d:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  80:\te9 bb 02 00 00       \tjmpq   340 <LAPACKE_cggglm_work+0x340>\n  85:\t83 7d dc 65          \tcmpl   $0x65,-0x24(%rbp)\n  89:\t0f 85 9b 02 00 00    \tjne    32a <LAPACKE_cggglm_work+0x32a>\n  8f:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  92:\tba 01 00 00 00       \tmov    $0x1,%edx\n  97:\t85 c0                \ttest   %eax,%eax\n  99:\t0f 4e c2             \tcmovle %edx,%eax\n  9c:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  9f:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  a2:\tba 01 00 00 00       \tmov    $0x1,%edx\n  a7:\t85 c0                \ttest   %eax,%eax\n  a9:\t0f 4e c2             \tcmovle %edx,%eax\n  ac:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  af:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  b6:\t00 \n  b7:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  be:\t00 \n  bf:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  c2:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  c5:\t39 c2                \tcmp    %eax,%edx\n  c7:\t7d 1e                \tjge    e7 <LAPACKE_cggglm_work+0xe7>\n  c9:\tc7 45 ec fa ff ff ff \tmovl   $0xfffffffa,-0x14(%rbp)\n  d0:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  d3:\t89 c6                \tmov    %eax,%esi\n  d5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  da:\te8 00 00 00 00       \tcallq  df <LAPACKE_cggglm_work+0xdf>\n  df:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  e2:\te9 5c 02 00 00       \tjmpq   343 <LAPACKE_cggglm_work+0x343>\n  e7:\t8b 55 18             \tmov    0x18(%rbp),%edx\n  ea:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  ed:\t39 c2                \tcmp    %eax,%edx\n  ef:\t7d 1e                \tjge    10f <LAPACKE_cggglm_work+0x10f>\n  f1:\tc7 45 ec f8 ff ff ff \tmovl   $0xfffffff8,-0x14(%rbp)\n  f8:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  fb:\t89 c6                \tmov    %eax,%esi\n  fd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 102:\te8 00 00 00 00       \tcallq  107 <LAPACKE_cggglm_work+0x107>\n 107:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 10a:\te9 34 02 00 00       \tjmpq   343 <LAPACKE_cggglm_work+0x343>\n 10f:\t8b 45 40             \tmov    0x40(%rbp),%eax\n 112:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 115:\t75 5d                \tjne    174 <LAPACKE_cggglm_work+0x174>\n 117:\t4c 8d 45 e8          \tlea    -0x18(%rbp),%r8\n 11b:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n 11f:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n 123:\t48 8d 75 d4          \tlea    -0x2c(%rbp),%rsi\n 127:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n 12b:\t48 83 ec 08          \tsub    $0x8,%rsp\n 12f:\t48 8d 7d ec          \tlea    -0x14(%rbp),%rdi\n 133:\t57                   \tpush   %rdi\n 134:\t48 8d 7d 40          \tlea    0x40(%rbp),%rdi\n 138:\t57                   \tpush   %rdi\n 139:\tff 75 38             \tpushq  0x38(%rbp)\n 13c:\tff 75 30             \tpushq  0x30(%rbp)\n 13f:\tff 75 28             \tpushq  0x28(%rbp)\n 142:\tff 75 20             \tpushq  0x20(%rbp)\n 145:\t48 8d 7d e4          \tlea    -0x1c(%rbp),%rdi\n 149:\t57                   \tpush   %rdi\n 14a:\t4c 8b 4d 10          \tmov    0x10(%rbp),%r9\n 14e:\t48 89 c7             \tmov    %rax,%rdi\n 151:\te8 00 00 00 00       \tcallq  156 <LAPACKE_cggglm_work+0x156>\n 156:\t48 83 c4 40          \tadd    $0x40,%rsp\n 15a:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 15d:\t85 c0                \ttest   %eax,%eax\n 15f:\t79 0b                \tjns    16c <LAPACKE_cggglm_work+0x16c>\n 161:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 164:\t83 e8 01             \tsub    $0x1,%eax\n 167:\te9 d7 01 00 00       \tjmpq   343 <LAPACKE_cggglm_work+0x343>\n 16c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 16f:\te9 cf 01 00 00       \tjmpq   343 <LAPACKE_cggglm_work+0x343>\n 174:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 177:\t48 63 d0             \tmovslq %eax,%rdx\n 17a:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 17d:\t85 c0                \ttest   %eax,%eax\n 17f:\t7e 07                \tjle    188 <LAPACKE_cggglm_work+0x188>\n 181:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 184:\t48 98                \tcltq   \n 186:\teb 05                \tjmp    18d <LAPACKE_cggglm_work+0x18d>\n 188:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 18d:\t48 0f af c2          \timul   %rdx,%rax\n 191:\t48 c1 e0 03          \tshl    $0x3,%rax\n 195:\t48 89 c7             \tmov    %rax,%rdi\n 198:\te8 00 00 00 00       \tcallq  19d <LAPACKE_cggglm_work+0x19d>\n 19d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 1a1:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 1a6:\t75 0c                \tjne    1b4 <LAPACKE_cggglm_work+0x1b4>\n 1a8:\tc7 45 ec 0d fc ff ff \tmovl   $0xfffffc0d,-0x14(%rbp)\n 1af:\te9 5b 01 00 00       \tjmpq   30f <LAPACKE_cggglm_work+0x30f>\n 1b4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n 1b7:\t48 63 d0             \tmovslq %eax,%rdx\n 1ba:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n 1bd:\t85 c0                \ttest   %eax,%eax\n 1bf:\t7e 07                \tjle    1c8 <LAPACKE_cggglm_work+0x1c8>\n 1c1:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n 1c4:\t48 98                \tcltq   \n 1c6:\teb 05                \tjmp    1cd <LAPACKE_cggglm_work+0x1cd>\n 1c8:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 1cd:\t48 0f af c2          \timul   %rdx,%rax\n 1d1:\t48 c1 e0 03          \tshl    $0x3,%rax\n 1d5:\t48 89 c7             \tmov    %rax,%rdi\n 1d8:\te8 00 00 00 00       \tcallq  1dd <LAPACKE_cggglm_work+0x1dd>\n 1dd:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 1e1:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 1e6:\t75 0c                \tjne    1f4 <LAPACKE_cggglm_work+0x1f4>\n 1e8:\tc7 45 ec 0d fc ff ff \tmovl   $0xfffffc0d,-0x14(%rbp)\n 1ef:\te9 0f 01 00 00       \tjmpq   303 <LAPACKE_cggglm_work+0x303>\n 1f4:\t8b 7d e8             \tmov    -0x18(%rbp),%edi\n 1f7:\t44 8b 45 c4          \tmov    -0x3c(%rbp),%r8d\n 1fb:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n 1fe:\t8b 75 d8             \tmov    -0x28(%rbp),%esi\n 201:\t4c 8b 4d f8          \tmov    -0x8(%rbp),%r9\n 205:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n 209:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 20c:\t48 83 ec 08          \tsub    $0x8,%rsp\n 210:\t57                   \tpush   %rdi\n 211:\t89 c7                \tmov    %eax,%edi\n 213:\te8 00 00 00 00       \tcallq  218 <LAPACKE_cggglm_work+0x218>\n 218:\t48 83 c4 10          \tadd    $0x10,%rsp\n 21c:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n 21f:\t8b 7d 18             \tmov    0x18(%rbp),%edi\n 222:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n 225:\t8b 75 d8             \tmov    -0x28(%rbp),%esi\n 228:\t4c 8b 45 f0          \tmov    -0x10(%rbp),%r8\n 22c:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 22f:\t48 83 ec 08          \tsub    $0x8,%rsp\n 233:\t51                   \tpush   %rcx\n 234:\t4d 89 c1             \tmov    %r8,%r9\n 237:\t41 89 f8             \tmov    %edi,%r8d\n 23a:\t48 8b 4d 10          \tmov    0x10(%rbp),%rcx\n 23e:\t89 c7                \tmov    %eax,%edi\n 240:\te8 00 00 00 00       \tcallq  245 <LAPACKE_cggglm_work+0x245>\n 245:\t48 83 c4 10          \tadd    $0x10,%rsp\n 249:\t4c 8b 4d f0          \tmov    -0x10(%rbp),%r9\n 24d:\t4c 8d 45 e8          \tlea    -0x18(%rbp),%r8\n 251:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 255:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n 259:\t48 8d 75 d4          \tlea    -0x2c(%rbp),%rsi\n 25d:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n 261:\t48 83 ec 08          \tsub    $0x8,%rsp\n 265:\t48 8d 7d ec          \tlea    -0x14(%rbp),%rdi\n 269:\t57                   \tpush   %rdi\n 26a:\t48 8d 7d 40          \tlea    0x40(%rbp),%rdi\n 26e:\t57                   \tpush   %rdi\n 26f:\tff 75 38             \tpushq  0x38(%rbp)\n 272:\tff 75 30             \tpushq  0x30(%rbp)\n 275:\tff 75 28             \tpushq  0x28(%rbp)\n 278:\tff 75 20             \tpushq  0x20(%rbp)\n 27b:\t48 8d 7d e4          \tlea    -0x1c(%rbp),%rdi\n 27f:\t57                   \tpush   %rdi\n 280:\t48 89 c7             \tmov    %rax,%rdi\n 283:\te8 00 00 00 00       \tcallq  288 <LAPACKE_cggglm_work+0x288>\n 288:\t48 83 c4 40          \tadd    $0x40,%rsp\n 28c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 28f:\t85 c0                \ttest   %eax,%eax\n 291:\t79 09                \tjns    29c <LAPACKE_cggglm_work+0x29c>\n 293:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 296:\t83 e8 01             \tsub    $0x1,%eax\n 299:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 29c:\t8b 75 c4             \tmov    -0x3c(%rbp),%esi\n 29f:\t8b 7d e8             \tmov    -0x18(%rbp),%edi\n 2a2:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n 2a5:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 2a8:\t4c 8b 45 c8          \tmov    -0x38(%rbp),%r8\n 2ac:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 2b0:\t48 83 ec 08          \tsub    $0x8,%rsp\n 2b4:\t56                   \tpush   %rsi\n 2b5:\t4d 89 c1             \tmov    %r8,%r9\n 2b8:\t41 89 f8             \tmov    %edi,%r8d\n 2bb:\t89 c6                \tmov    %eax,%esi\n 2bd:\tbf 66 00 00 00       \tmov    $0x66,%edi\n 2c2:\te8 00 00 00 00       \tcallq  2c7 <LAPACKE_cggglm_work+0x2c7>\n 2c7:\t48 83 c4 10          \tadd    $0x10,%rsp\n 2cb:\t8b 75 18             \tmov    0x18(%rbp),%esi\n 2ce:\t8b 7d e4             \tmov    -0x1c(%rbp),%edi\n 2d1:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n 2d4:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 2d7:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n 2db:\t48 83 ec 08          \tsub    $0x8,%rsp\n 2df:\t56                   \tpush   %rsi\n 2e0:\t4c 8b 4d 10          \tmov    0x10(%rbp),%r9\n 2e4:\t41 89 f8             \tmov    %edi,%r8d\n 2e7:\t89 c6                \tmov    %eax,%esi\n 2e9:\tbf 66 00 00 00       \tmov    $0x66,%edi\n 2ee:\te8 00 00 00 00       \tcallq  2f3 <LAPACKE_cggglm_work+0x2f3>\n 2f3:\t48 83 c4 10          \tadd    $0x10,%rsp\n 2f7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 2fb:\t48 89 c7             \tmov    %rax,%rdi\n 2fe:\te8 00 00 00 00       \tcallq  303 <LAPACKE_cggglm_work+0x303>\n 303:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 307:\t48 89 c7             \tmov    %rax,%rdi\n 30a:\te8 00 00 00 00       \tcallq  30f <LAPACKE_cggglm_work+0x30f>\n 30f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 312:\t3d 0d fc ff ff       \tcmp    $0xfffffc0d,%eax\n 317:\t75 27                \tjne    340 <LAPACKE_cggglm_work+0x340>\n 319:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 31c:\t89 c6                \tmov    %eax,%esi\n 31e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 323:\te8 00 00 00 00       \tcallq  328 <LAPACKE_cggglm_work+0x328>\n 328:\teb 16                \tjmp    340 <LAPACKE_cggglm_work+0x340>\n 32a:\tc7 45 ec ff ff ff ff \tmovl   $0xffffffff,-0x14(%rbp)\n 331:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 334:\t89 c6                \tmov    %eax,%esi\n 336:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 33b:\te8 00 00 00 00       \tcallq  340 <LAPACKE_cggglm_work+0x340>\n 340:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 343:\tc9                   \tleaveq \n 344:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall LAPACKE_cggglm_work(\n    unsigned int <span class=\"supfact\">a1</span>, unsigned int <span class=\"supfact\">a2</span>,\n    unsigned int <span class=\"supfact\">a3</span>, unsigned int <span class=\"supfact\">a4</span>,\n    __int64 <span class=\"supfact\">a5</span>, unsigned int <span class=\"supfact\">a6</span>,\n    __int64 <span class=\"supfact\">a7</span>, unsigned int <span class=\"supfact\">a8</span>,\n    __int64 <span class=\"supfact\">a9</span>, __int64 <span class=\"supfact\">a10</span>,\n    __int64 <span class=\"supfact\">a11</span>, __int64 <span class=\"supfact\">a12</span>,\n    int <span class=\"supfact\">a13</span>) {\n  int v13;\n  int v14;\n  __int64 result;\n  __int64 v16;\n  __int64 v17;\n  unsigned int <span class=\"supfact\">v18</span>;\n  __int64 <span class=\"supfact\">v19</span>;\n  unsigned int <span class=\"supfact\">v20</span>;\n  unsigned int <span class=\"supfact\">v21</span>;\n  unsigned int <span class=\"supfact\">v22</span>;\n  unsigned int <span class=\"supfact\">v23</span>;\n  unsigned int <span class=\"supfact\">v24</span>;\n  unsigned int <span class=\"supfact\">v25</span>;\n  unsigned int <span class=\"supfact\">v26</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  void *<span class=\"supfact\">v28</span>;\n  <span class=\"supfact\">v23</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v22</span> = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v21</span> = <span class=\"supfact\">a3</span>;\n  <span class=\"supfact\">v20</span> = <span class=\"supfact\">a4</span>;\n  <span class=\"supfact\">v19</span> = <span class=\"supfact\">a5</span>;\n  <span class=\"supfact\">v18</span> = <span class=\"supfact\">a6</span>;\n  <span class=\"supfact\">v26</span> = Number;\n  if (<span class=\"supfact\">a1</span> == Number) {\n    cggglm_(&<span class=\"supfact\">v22</span>, &<span class=\"supfact\">v21</span>, &<span class=\"supfact\">v20</span>,\n            <span class=\"supfact\">v19</span>, &<span class=\"supfact\">v18</span>, <span class=\"supfact\">a7</span>,\n            &<span class=\"supfact\">a8</span>, <span class=\"supfact\">a9</span>, <span class=\"supfact\">a10</span>,\n            <span class=\"supfact\">a11</span>, <span class=\"supfact\">a12</span>, &<span class=\"supfact\">a13</span>,\n            &<span class=\"supfact\">v26</span>);\n    if ((<span class=\"supfact\">v26</span> & Number) != Number)\n      --<span class=\"supfact\">v26</span>;\n    return <span class=\"supfact\">v26</span>;\n  }\n  if (<span class=\"supfact\">v23</span> != Number) {\n    <span class=\"supfact\">v26</span> = Number;\n    LAPACKE_xerbla(String, Number);\n    return <span class=\"supfact\">v26</span>;\n  }\n  v13 = <span class=\"supfact\">v22</span>;\n  if ((int)<span class=\"supfact\">v22</span> <= Number)\n    v13 = Number;\n  <span class=\"supfact\">v25</span> = v13;\n  v14 = <span class=\"supfact\">v22</span>;\n  if ((int)<span class=\"supfact\">v22</span> <= Number)\n    v14 = Number;\n  <span class=\"supfact\">v24</span> = v14;\n  <span class=\"supfact\">v28</span> = Number L;\n  <span class=\"supfact\">ptr</span> = Number L;\n  if ((int)<span class=\"supfact\">v18</span> < (int)<span class=\"supfact\">v21</span>) {\n    LAPACKE_xerbla(String, Number L);\n    return Number L;\n  }\n  if ((int)<span class=\"supfact\">a8</span> < (int)<span class=\"supfact\">v20</span>) {\n    LAPACKE_xerbla(String, Number L);\n    return Number L;\n  }\n  if (<span class=\"supfact\">a13</span> != Number) {\n    if ((int)<span class=\"supfact\">v21</span> <= Number)\n      v16 = Number L;\n    else\n      v16 = (int)<span class=\"supfact\">v21</span>;\n    <span class=\"supfact\">v28</span> = malloc(Number * (int)<span class=\"supfact\">v25</span> * v16);\n    if (<span class=\"supfact\">v28</span>) {\n      if ((int)<span class=\"supfact\">v20</span> <= Number)\n        v17 = Number L;\n      else\n        v17 = (int)<span class=\"supfact\">v20</span>;\n      <span class=\"supfact\">ptr</span> = malloc(Number * (int)<span class=\"supfact\">v24</span> * v17);\n      if (<span class=\"supfact\">ptr</span>) {\n        LAPACKE_cge_trans(<span class=\"supfact\">v23</span>, <span class=\"supfact\">v22</span>,\n                          <span class=\"supfact\">v21</span>, <span class=\"supfact\">v19</span>,\n                          <span class=\"supfact\">v18</span>, <span class=\"supfact\">v28</span>,\n                          <span class=\"supfact\">v25</span>);\n        LAPACKE_cge_trans(<span class=\"supfact\">v23</span>, <span class=\"supfact\">v22</span>,\n                          <span class=\"supfact\">v20</span>, <span class=\"supfact\">a7</span>,\n                          <span class=\"supfact\">a8</span>, <span class=\"supfact\">ptr</span>,\n                          <span class=\"supfact\">v24</span>);\n        cggglm_(&<span class=\"supfact\">v22</span>, &<span class=\"supfact\">v21</span>,\n                &<span class=\"supfact\">v20</span>, <span class=\"supfact\">v28</span>, &<span class=\"supfact\">v25</span>,\n                <span class=\"supfact\">ptr</span>, &<span class=\"supfact\">v24</span>, <span class=\"supfact\">a9</span>,\n                <span class=\"supfact\">a10</span>, <span class=\"supfact\">a11</span>, <span class=\"supfact\">a12</span>,\n                &<span class=\"supfact\">a13</span>, &<span class=\"supfact\">v26</span>);\n        if ((<span class=\"supfact\">v26</span> & Number) != Number)\n          --<span class=\"supfact\">v26</span>;\n        LAPACKE_cge_trans(Number L, <span class=\"supfact\">v22</span>, <span class=\"supfact\">v21</span>,\n                          <span class=\"supfact\">v28</span>, <span class=\"supfact\">v25</span>,\n                          <span class=\"supfact\">v19</span>, <span class=\"supfact\">v18</span>);\n        LAPACKE_cge_trans(Number L, <span class=\"supfact\">v22</span>, <span class=\"supfact\">v20</span>,\n                          <span class=\"supfact\">ptr</span>, <span class=\"supfact\">v24</span>,\n                          <span class=\"supfact\">a7</span>, <span class=\"supfact\">a8</span>);\n        free(<span class=\"supfact\">ptr</span>);\n      } else {\n        <span class=\"supfact\">v26</span> = Number;\n      }\n      free(<span class=\"supfact\">v28</span>);\n    } else {\n      <span class=\"supfact\">v26</span> = Number;\n    }\n    if (<span class=\"supfact\">v26</span> == Number)\n      LAPACKE_xerbla(String, Number L);\n    return <span class=\"supfact\">v26</span>;\n  }\n  cggglm_(&<span class=\"supfact\">v22</span>, &<span class=\"supfact\">v21</span>, &<span class=\"supfact\">v20</span>,\n          <span class=\"supfact\">v19</span>, &<span class=\"supfact\">v25</span>, <span class=\"supfact\">a7</span>,\n          &<span class=\"supfact\">v24</span>, <span class=\"supfact\">a9</span>, <span class=\"supfact\">a10</span>,\n          <span class=\"supfact\">a11</span>, <span class=\"supfact\">a12</span>, &<span class=\"supfact\">a13</span>,\n          &<span class=\"supfact\">v26</span>);\n  if ((<span class=\"supfact\">v26</span> & Number) == Number)\n    result = <span class=\"supfact\">v26</span>;\n  else\n    result = <span class=\"supfact\">v26</span> - Number;\n  return result;\n}", "code_t": "int __cdecl LAPACKE_cggglm_work(\n    int <span class=\"supfact\">matrix_layout</span>, int <span class=\"supfact\">n</span>,\n    int <span class=\"supfact\">m</span>, int <span class=\"supfact\">p</span>,\n    complex_float *<span class=\"supfact\">a</span>, int <span class=\"supfact\">lda</span>,\n    complex_float *<span class=\"supfact\">b</span>, int <span class=\"supfact\">ldb</span>,\n    complex_float *<span class=\"supfact\">d</span>, complex_float *<span class=\"supfact\">x</span>,\n    complex_float *<span class=\"supfact\">y</span>, complex_float *<span class=\"supfact\">work</span>,\n    int <span class=\"supfact\">lwork</span>) {\n  int v13;\n  int v14;\n  int result;\n  __int64 v16;\n  __int64 v17;\n  int <span class=\"supfact\">ldaa</span>;\n  complex_float *<span class=\"supfact\">aa</span>;\n  int <span class=\"supfact\">pa</span>;\n  int <span class=\"supfact\">ma</span>;\n  int <span class=\"supfact\">na</span>;\n  int <span class=\"supfact\">matrix_layouta</span>;\n  int <span class=\"supfact\">ldb_t</span>;\n  int <span class=\"supfact\">lda_t</span>;\n  int <span class=\"supfact\">info</span>;\n  complex_float *<span class=\"supfact\">b_t</span>;\n  complex_float *<span class=\"supfact\">a_t</span>;\n  <span class=\"supfact\">matrix_layouta</span> = <span class=\"supfact\">matrix_layout</span>;\n  <span class=\"supfact\">na</span> = <span class=\"supfact\">n</span>;\n  <span class=\"supfact\">ma</span> = <span class=\"supfact\">m</span>;\n  <span class=\"supfact\">pa</span> = <span class=\"supfact\">p</span>;\n  <span class=\"supfact\">aa</span> = <span class=\"supfact\">a</span>;\n  <span class=\"supfact\">ldaa</span> = <span class=\"supfact\">lda</span>;\n  <span class=\"supfact\">info</span> = Number;\n  if (<span class=\"supfact\">matrix_layout</span> == Number) {\n    cggglm_(&<span class=\"supfact\">na</span>, &<span class=\"supfact\">ma</span>, &<span class=\"supfact\">pa</span>,\n            <span class=\"supfact\">aa</span>, &<span class=\"supfact\">ldaa</span>, <span class=\"supfact\">b</span>,\n            &<span class=\"supfact\">ldb</span>, <span class=\"supfact\">d</span>, <span class=\"supfact\">x</span>,\n            <span class=\"supfact\">y</span>, <span class=\"supfact\">work</span>, &<span class=\"supfact\">lwork</span>,\n            &<span class=\"supfact\">info</span>);\n    if (<span class=\"supfact\">info</span> < Number)\n      --<span class=\"supfact\">info</span>;\n    return <span class=\"supfact\">info</span>;\n  }\n  if (<span class=\"supfact\">matrix_layouta</span> != Number) {\n    <span class=\"supfact\">info</span> = Number;\n    LAPACKE_xerbla(String, Number);\n    return <span class=\"supfact\">info</span>;\n  }\n  v13 = <span class=\"supfact\">na</span>;\n  if (<span class=\"supfact\">na</span> <= Number)\n    v13 = Number;\n  <span class=\"supfact\">lda_t</span> = v13;\n  v14 = <span class=\"supfact\">na</span>;\n  if (<span class=\"supfact\">na</span> <= Number)\n    v14 = Number;\n  <span class=\"supfact\">ldb_t</span> = v14;\n  <span class=\"supfact\">a_t</span> = Number L;\n  <span class=\"supfact\">b_t</span> = Number L;\n  if (<span class=\"supfact\">ldaa</span> < <span class=\"supfact\">ma</span>) {\n    LAPACKE_xerbla(String, Number L);\n    return Number;\n  }\n  if (<span class=\"supfact\">ldb</span> < <span class=\"supfact\">pa</span>) {\n    LAPACKE_xerbla(String, Number L);\n    return Number;\n  }\n  if (<span class=\"supfact\">lwork</span> != Number) {\n    if (<span class=\"supfact\">ma</span> <= Number)\n      v16 = Number L;\n    else\n      v16 = <span class=\"supfact\">ma</span>;\n    <span class=\"supfact\">a_t</span> =\n        (complex_float *)malloc(Number * <span class=\"supfact\">lda_t</span> * v16);\n    if (<span class=\"supfact\">a_t</span>) {\n      if (<span class=\"supfact\">pa</span> <= Number)\n        v17 = Number L;\n      else\n        v17 = <span class=\"supfact\">pa</span>;\n      <span class=\"supfact\">b_t</span> =\n          (complex_float *)malloc(Number * <span class=\"supfact\">ldb_t</span> * v17);\n      if (<span class=\"supfact\">b_t</span>) {\n        LAPACKE_cge_trans(\n            (unsigned int)<span class=\"supfact\">matrix_layouta</span>,\n            (unsigned int)<span class=\"supfact\">na</span>, (unsigned int)<span class=\"supfact\">ma</span>,\n            <span class=\"supfact\">aa</span>, (unsigned int)<span class=\"supfact\">ldaa</span>,\n            <span class=\"supfact\">a_t</span>, (unsigned int)<span class=\"supfact\">lda_t</span>);\n        LAPACKE_cge_trans(\n            (unsigned int)<span class=\"supfact\">matrix_layouta</span>,\n            (unsigned int)<span class=\"supfact\">na</span>, (unsigned int)<span class=\"supfact\">pa</span>,\n            <span class=\"supfact\">b</span>, (unsigned int)<span class=\"supfact\">ldb</span>,\n            <span class=\"supfact\">b_t</span>, (unsigned int)<span class=\"supfact\">ldb_t</span>);\n        cggglm_(&<span class=\"supfact\">na</span>, &<span class=\"supfact\">ma</span>, &<span class=\"supfact\">pa</span>,\n                <span class=\"supfact\">a_t</span>, &<span class=\"supfact\">lda_t</span>,\n                <span class=\"supfact\">b_t</span>, &<span class=\"supfact\">ldb_t</span>, <span class=\"supfact\">d</span>,\n                <span class=\"supfact\">x</span>, <span class=\"supfact\">y</span>, <span class=\"supfact\">work</span>,\n                &<span class=\"supfact\">lwork</span>, &<span class=\"supfact\">info</span>);\n        if (<span class=\"supfact\">info</span> < Number)\n          --<span class=\"supfact\">info</span>;\n        LAPACKE_cge_trans(Number L, (unsigned int)<span class=\"supfact\">na</span>,\n                          (unsigned int)<span class=\"supfact\">ma</span>, <span class=\"supfact\">a_t</span>,\n                          (unsigned int)<span class=\"supfact\">lda_t</span>,\n                          <span class=\"supfact\">aa</span>,\n                          (unsigned int)<span class=\"supfact\">ldaa</span>);\n        LAPACKE_cge_trans(Number L, (unsigned int)<span class=\"supfact\">na</span>,\n                          (unsigned int)<span class=\"supfact\">pa</span>, <span class=\"supfact\">b_t</span>,\n                          (unsigned int)<span class=\"supfact\">ldb_t</span>,\n                          <span class=\"supfact\">b</span>, (unsigned int)<span class=\"supfact\">ldb</span>);\n        free(<span class=\"supfact\">b_t</span>);\n      } else {\n        <span class=\"supfact\">info</span> = Number;\n      }\n      free(<span class=\"supfact\">a_t</span>);\n    } else {\n      <span class=\"supfact\">info</span> = Number;\n    }\n    if (<span class=\"supfact\">info</span> == Number)\n      LAPACKE_xerbla(String, Number L);\n    return <span class=\"supfact\">info</span>;\n  }\n  cggglm_(&<span class=\"supfact\">na</span>, &<span class=\"supfact\">ma</span>, &<span class=\"supfact\">pa</span>,\n          <span class=\"supfact\">aa</span>, &<span class=\"supfact\">lda_t</span>, <span class=\"supfact\">b</span>,\n          &<span class=\"supfact\">ldb_t</span>, <span class=\"supfact\">d</span>, <span class=\"supfact\">x</span>,\n          <span class=\"supfact\">y</span>, <span class=\"supfact\">work</span>, &<span class=\"supfact\">lwork</span>,\n          &<span class=\"supfact\">info</span>);\n  if (<span class=\"supfact\">info</span> >= Number)\n    result = <span class=\"supfact\">info</span>;\n  else\n    result = <span class=\"supfact\">info</span> - Number;\n  return result;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "matrix_layout", "ref_name": "matrix_layout", "ref_type": "int"}, {"name": "a2", "type": "int", "pred_name": "n", "ref_name": "n", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "k", "ref_name": "m", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "nb", "ref_name": "p", "ref_type": "int"}, {"name": "a5", "type": "const complex_float *", "pred_name": "a", "ref_name": "a", "ref_type": "complex_float *"}, {"name": "a6", "type": "int", "pred_name": "lda", "ref_name": "lda", "ref_type": "int"}, {"name": "a7", "type": "const complex_float *", "pred_name": "af_0", "ref_name": "b", "ref_type": "complex_float *"}, {"name": "a8", "type": "int", "pred_name": "ldaf", "ref_name": "ldb", "ref_type": "int"}, {"name": "a9", "type": "const int *", "pred_name": "ipiv", "ref_name": "d", "ref_type": "complex_float *"}, {"name": "a10", "type": "const complex_float *", "pred_name": "b", "ref_name": "x", "ref_type": "complex_float *"}, {"name": "a11", "type": "complex_float *", "pred_name": "x", "ref_name": "y", "ref_type": "complex_float *"}, {"name": "a12", "type": "complex_float *", "pred_name": "work", "ref_name": "work", "ref_type": "complex_float *"}, {"name": "a13", "type": "int", "pred_name": "lwork", "ref_name": "lwork", "ref_type": "int"}, {"name": "v18", "type": "int", "pred_name": "ldaa", "ref_name": "ldaa", "ref_type": "int"}, {"name": "v19", "type": "const complex_float *", "pred_name": "aa", "ref_name": "aa", "ref_type": "complex_float *"}, {"name": "v20", "type": "int", "pred_name": "nrhsa", "ref_name": "pa", "ref_type": "int"}, {"name": "v21", "type": "int", "pred_name": "na", "ref_name": "ma", "ref_type": "int"}, {"name": "v22", "type": "int", "pred_name": "matrix_layouta", "ref_name": "na", "ref_type": "int"}, {"name": "v23", "type": "int", "pred_name": "ldb_t", "ref_name": "matrix_layouta", "ref_type": "int"}, {"name": "v24", "type": "int", "pred_name": "lda_t", "ref_name": "ldb_t", "ref_type": "int"}, {"name": "v25", "type": "int", "pred_name": "info", "ref_name": "lda_t", "ref_type": "int"}, {"name": "v26", "type": "int", "pred_name": "info", "ref_name": "info", "ref_type": "int"}, {"name": "ptr", "type": "complex_float *", "pred_name": "b_t", "ref_name": "b_t", "ref_type": "complex_float *"}, {"name": "v28", "type": "complex_float *", "pred_name": "a_t", "ref_name": "a_t", "ref_type": "complex_float *"}], "body_in_train": false}, {"repo_owner": "jaysnanavati", "repo_name": "MemoryMutationTestingFramework", "path": "jaysnanavati/MemoryMutationTestingFramework/7289c6780cc3662deccf9b64b694f18cf3b729645ee83b44e6d4f7b536cdd9c5", "path_in_repo": "jaysnanavati/MemoryMutationTestingFramework//Controller", "objdump": "00000000004081fe <flush_GStats>:\n  4081fe:\t55                   \tpush   %rbp\n  4081ff:\t48 89 e5             \tmov    %rsp,%rbp\n  408202:\t48 83 ec 10          \tsub    $0x10,%rsp\n  408206:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  40820a:\t48 8b 35 57 41 00 00 \tmov    0x4157(%rip),%rsi        # 40c368 <doc>\n  408211:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  408215:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n  40821a:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40821f:\t48 89 c7             \tmov    %rax,%rdi\n  408222:\te8 59 a1 ff ff       \tcallq  402380 <xmlSaveFormatFileEnc@plt>\n  408227:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  40822a:\t75 28                \tjne    408254 <flush_GStats+0x56>\n  40822c:\t48 8b 05 ad 40 00 00 \tmov    0x40ad(%rip),%rax        # 40c2e0 <stderr@@GLIBC_2.2.5>\n  408233:\t48 89 c1             \tmov    %rax,%rcx\n  408236:\tba 24 00 00 00       \tmov    $0x24,%edx\n  40823b:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  408240:\tbf 40 a0 40 00       \tmov    $0x40a040,%edi\n  408245:\te8 f6 a2 ff ff       \tcallq  402540 <fwrite@plt>\n  40824a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40824f:\te8 dc a0 ff ff       \tcallq  402330 <exit@plt>\n  408254:\t90                   \tnop\n  408255:\tc9                   \tleaveq \n  408256:\tc3                   \tretq   ", "code_s": "__int64 flush_GStats() {\n  __int64 <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = xmlSaveFormatFileEnc();\n  if ((_DWORD)<span class=\"supfact\">result</span> == Number) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl flush_GStats(char *GSTATS_PATH) {\n  if ((unsigned int)xmlSaveFormatFileEnc() == Number) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n}", "var": [{"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "KrisChaplin", "repo_name": "LRT2x4_v1.0.2.06_GPL_source", "path": "KrisChaplin/LRT2x4_v1.0.2.06_GPL_source/1d9125532850ec0de57a08238b292f2753b16c51b840a0e332725692123ac0f8", "path_in_repo": "KrisChaplin/LRT2x4_v1.0.2.06_GPL_source/linux/embedded_rootfs/pkg_addon/strongswan-4.0.4/src/charon/traffic_selector.o", "objdump": "000000000000058f <get_subset>:\n     58f:\t55                   \tpush   %rbp\n     590:\t48 89 e5             \tmov    %rsp,%rbp\n     593:\t48 83 ec 40          \tsub    $0x40,%rsp\n     597:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     59b:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     59f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     5a3:\t8b 50 60             \tmov    0x60(%rax),%edx\n     5a6:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     5aa:\t8b 40 60             \tmov    0x60(%rax),%eax\n     5ad:\t39 c2                \tcmp    %eax,%edx\n     5af:\t0f 85 dd 01 00 00    \tjne    792 <get_subset+0x203>\n     5b5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     5b9:\t0f b6 50 64          \tmovzbl 0x64(%rax),%edx\n     5bd:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     5c1:\t0f b6 40 64          \tmovzbl 0x64(%rax),%eax\n     5c5:\t38 c2                \tcmp    %al,%dl\n     5c7:\t74 1c                \tje     5e5 <get_subset+0x56>\n     5c9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     5cd:\t0f b6 40 64          \tmovzbl 0x64(%rax),%eax\n     5d1:\t84 c0                \ttest   %al,%al\n     5d3:\t74 10                \tje     5e5 <get_subset+0x56>\n     5d5:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     5d9:\t0f b6 40 64          \tmovzbl 0x64(%rax),%eax\n     5dd:\t84 c0                \ttest   %al,%al\n     5df:\t0f 85 ad 01 00 00    \tjne    792 <get_subset+0x203>\n     5e5:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     5e9:\t0f b7 90 88 00 00 00 \tmovzwl 0x88(%rax),%edx\n     5f0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     5f4:\t0f b7 80 88 00 00 00 \tmovzwl 0x88(%rax),%eax\n     5fb:\t66 39 c2             \tcmp    %ax,%dx\n     5fe:\t0f 43 c2             \tcmovae %edx,%eax\n     601:\t66 89 45 e6          \tmov    %ax,-0x1a(%rbp)\n     605:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     609:\t0f b7 90 8a 00 00 00 \tmovzwl 0x8a(%rax),%edx\n     610:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     614:\t0f b7 80 8a 00 00 00 \tmovzwl 0x8a(%rax),%eax\n     61b:\t66 39 c2             \tcmp    %ax,%dx\n     61e:\t0f 46 c2             \tcmovbe %edx,%eax\n     621:\t66 89 45 e4          \tmov    %ax,-0x1c(%rbp)\n     625:\t0f b7 45 e6          \tmovzwl -0x1a(%rbp),%eax\n     629:\t66 3b 45 e4          \tcmp    -0x1c(%rbp),%ax\n     62d:\t76 0a                \tjbe    639 <get_subset+0xaa>\n     62f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     634:\te9 5e 01 00 00       \tjmpq   797 <get_subset+0x208>\n     639:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     63d:\t0f b6 50 64          \tmovzbl 0x64(%rax),%edx\n     641:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     645:\t0f b6 40 64          \tmovzbl 0x64(%rax),%eax\n     649:\t38 c2                \tcmp    %al,%dl\n     64b:\t0f 43 c2             \tcmovae %edx,%eax\n     64e:\t88 45 e3             \tmov    %al,-0x1d(%rbp)\n     651:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     655:\t8b 40 60             \tmov    0x60(%rax),%eax\n     658:\t83 f8 07             \tcmp    $0x7,%eax\n     65b:\t74 07                \tje     664 <get_subset+0xd5>\n     65d:\t83 f8 08             \tcmp    $0x8,%eax\n     660:\t74 0c                \tje     66e <get_subset+0xdf>\n     662:\teb 14                \tjmp    678 <get_subset+0xe9>\n     664:\t48 c7 45 e8 04 00 00 \tmovq   $0x4,-0x18(%rbp)\n     66b:\t00 \n     66c:\teb 14                \tjmp    682 <get_subset+0xf3>\n     66e:\t48 c7 45 e8 10 00 00 \tmovq   $0x10,-0x18(%rbp)\n     675:\t00 \n     676:\teb 0a                \tjmp    682 <get_subset+0xf3>\n     678:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     67d:\te9 15 01 00 00       \tjmpq   797 <get_subset+0x208>\n     682:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     686:\t48 8d 70 68          \tlea    0x68(%rax),%rsi\n     68a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     68e:\t48 8d 48 68          \tlea    0x68(%rax),%rcx\n     692:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     696:\t48 89 c2             \tmov    %rax,%rdx\n     699:\t48 89 cf             \tmov    %rcx,%rdi\n     69c:\te8 00 00 00 00       \tcallq  6a1 <get_subset+0x112>\n     6a1:\t85 c0                \ttest   %eax,%eax\n     6a3:\t7e 0e                \tjle    6b3 <get_subset+0x124>\n     6a5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     6a9:\t48 83 c0 68          \tadd    $0x68,%rax\n     6ad:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     6b1:\teb 0c                \tjmp    6bf <get_subset+0x130>\n     6b3:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     6b7:\t48 83 c0 68          \tadd    $0x68,%rax\n     6bb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     6bf:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     6c3:\t48 8d 70 78          \tlea    0x78(%rax),%rsi\n     6c7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     6cb:\t48 8d 48 78          \tlea    0x78(%rax),%rcx\n     6cf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     6d3:\t48 89 c2             \tmov    %rax,%rdx\n     6d6:\t48 89 cf             \tmov    %rcx,%rdi\n     6d9:\te8 00 00 00 00       \tcallq  6de <get_subset+0x14f>\n     6de:\t85 c0                \ttest   %eax,%eax\n     6e0:\t7e 0e                \tjle    6f0 <get_subset+0x161>\n     6e2:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     6e6:\t48 83 c0 78          \tadd    $0x78,%rax\n     6ea:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     6ee:\teb 0c                \tjmp    6fc <get_subset+0x16d>\n     6f0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     6f4:\t48 83 c0 78          \tadd    $0x78,%rax\n     6f8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     6fc:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     700:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n     704:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     708:\t48 89 ce             \tmov    %rcx,%rsi\n     70b:\t48 89 c7             \tmov    %rax,%rdi\n     70e:\te8 00 00 00 00       \tcallq  713 <get_subset+0x184>\n     713:\t85 c0                \ttest   %eax,%eax\n     715:\t7e 07                \tjle    71e <get_subset+0x18f>\n     717:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     71c:\teb 79                \tjmp    797 <get_subset+0x208>\n     71e:\t0f b7 4d e4          \tmovzwl -0x1c(%rbp),%ecx\n     722:\t0f b7 55 e6          \tmovzwl -0x1a(%rbp),%edx\n     726:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     72a:\t8b 70 60             \tmov    0x60(%rax),%esi\n     72d:\t0f b6 45 e3          \tmovzbl -0x1d(%rbp),%eax\n     731:\t89 c7                \tmov    %eax,%edi\n     733:\te8 45 09 00 00       \tcallq  107d <traffic_selector_create>\n     738:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     73c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     740:\t8b 50 60             \tmov    0x60(%rax),%edx\n     743:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     747:\t89 50 60             \tmov    %edx,0x60(%rax)\n     74a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     74e:\t48 8d 48 68          \tlea    0x68(%rax),%rcx\n     752:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     756:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     75a:\t48 89 c6             \tmov    %rax,%rsi\n     75d:\t48 89 cf             \tmov    %rcx,%rdi\n     760:\te8 00 00 00 00       \tcallq  765 <get_subset+0x1d6>\n     765:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     769:\t48 8d 48 78          \tlea    0x78(%rax),%rcx\n     76d:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     771:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     775:\t48 89 c6             \tmov    %rax,%rsi\n     778:\t48 89 cf             \tmov    %rcx,%rdi\n     77b:\te8 00 00 00 00       \tcallq  780 <get_subset+0x1f1>\n     780:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     784:\t48 89 c7             \tmov    %rax,%rdi\n     787:\te8 b6 f9 ff ff       \tcallq  142 <update_string>\n     78c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     790:\teb 05                \tjmp    797 <get_subset+0x208>\n     792:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     797:\tc9                   \tleaveq \n     798:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall get_subset(__int64 <span class=\"supfact\">a1</span>,\n                              __int64 <span class=\"supfact\">a2</span>) {\n  unsigned __int16 v2;\n  unsigned __int16 v3;\n  unsigned __int8 v5;\n  int v6;\n  int v7;\n  int v8;\n  _DWORD *<span class=\"supfact\">v9</span>;\n  unsigned __int8 <span class=\"supfact\">v10</span>;\n  unsigned __int16 <span class=\"supfact\">v11</span>;\n  unsigned __int16 <span class=\"supfact\">v12</span>;\n  size_t <span class=\"supfact\">n</span>;\n  void *<span class=\"supfact\">s2</span>;\n  void *<span class=\"supfact\">s1</span>;\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) !=\n          *(_DWORD *)(<span class=\"supfact\">a2</span> + Number) ||\n      *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) !=\n              *(_BYTE *)(<span class=\"supfact\">a2</span> + Number) &&\n          *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) &&\n          *(_BYTE *)(<span class=\"supfact\">a2</span> + Number)) {\n    return Number L;\n  }\n  v2 = *(_WORD *)(<span class=\"supfact\">a1</span> + Number);\n  if (*(_WORD *)(<span class=\"supfact\">a2</span> + Number) >= v2)\n    v2 = *(_WORD *)(<span class=\"supfact\">a2</span> + Number);\n  <span class=\"supfact\">v12</span> = v2;\n  v3 = *(_WORD *)(<span class=\"supfact\">a1</span> + Number);\n  if (*(_WORD *)(<span class=\"supfact\">a2</span> + Number) <= v3)\n    v3 = *(_WORD *)(<span class=\"supfact\">a2</span> + Number);\n  <span class=\"supfact\">v11</span> = v3;\n  if (<span class=\"supfact\">v12</span> > v3)\n    return Number L;\n  v5 = *(_BYTE *)(<span class=\"supfact\">a1</span> + Number);\n  if (*(_BYTE *)(<span class=\"supfact\">a2</span> + Number) >= v5)\n    v5 = *(_BYTE *)(<span class=\"supfact\">a2</span> + Number);\n  <span class=\"supfact\">v10</span> = v5;\n  v6 = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  if (v6 == Number) {\n    <span class=\"supfact\">n</span> = Number L;\n    v7 = memcmp((const void *)(<span class=\"supfact\">a1</span> + Number),\n                (const void *)(<span class=\"supfact\">a2</span> + Number), Number);\n  } else {\n    if (v6 != Number)\n      return Number L;\n    <span class=\"supfact\">n</span> = Number L;\n    v7 = memcmp((const void *)(<span class=\"supfact\">a1</span> + Number),\n                (const void *)(<span class=\"supfact\">a2</span> + Number), Number);\n  }\n  if (v7 <= Number)\n    <span class=\"supfact\">s1</span> = (void *)(<span class=\"supfact\">a2</span> + Number);\n  else\n    <span class=\"supfact\">s1</span> = (void *)(<span class=\"supfact\">a1</span> + Number);\n  if (memcmp((const void *)(<span class=\"supfact\">a1</span> + Number),\n             (const void *)(<span class=\"supfact\">a2</span> + Number),\n             <span class=\"supfact\">n</span>) <= Number) {\n    <span class=\"supfact\">s2</span> = (void *)(<span class=\"supfact\">a1</span> + Number);\n    v8 = memcmp(<span class=\"supfact\">s1</span>, (const void *)(<span class=\"supfact\">a1</span> + Number),\n                <span class=\"supfact\">n</span>);\n  } else {\n    <span class=\"supfact\">s2</span> = (void *)(<span class=\"supfact\">a2</span> + Number);\n    v8 = memcmp(<span class=\"supfact\">s1</span>, (const void *)(<span class=\"supfact\">a2</span> + Number),\n                <span class=\"supfact\">n</span>);\n  }\n  if (v8 > Number)\n    return Number L;\n  <span class=\"supfact\">v9</span> = (_DWORD *)traffic_selector_create(\n      <span class=\"supfact\">v10</span>, *(unsigned int *)(<span class=\"supfact\">a1</span> + Number),\n      <span class=\"supfact\">v12</span>, <span class=\"supfact\">v11</span>);\n  <span class=\"supfact\">v9</span>[Number] = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  memcpy(<span class=\"supfact\">v9</span> + Number, <span class=\"supfact\">s1</span>, <span class=\"supfact\">n</span>);\n  memcpy(<span class=\"supfact\">v9</span> + Number, <span class=\"supfact\">s2</span>, <span class=\"supfact\">n</span>);\n  update_string((__int64)<span class=\"supfact\">v9</span>);\n  return <span class=\"supfact\">v9</span>;\n}", "code_t": "traffic_selector_t_0 *__cdecl get_subset(\n    private_traffic_selector_t_0 *<span class=\"supfact\">this</span>,\n    private_traffic_selector_t_0 *<span class=\"supfact\">other</span>) {\n  u_int16_t v2;\n  u_int16_t v3;\n  u_int8_t v5;\n  ts_type_t_0 v6;\n  private_traffic_selector_t_0 *<span class=\"supfact\">new_ts</span>;\n  u_int8_t <span class=\"supfact\">protocol</span>;\n  u_int16_t <span class=\"supfact\">to_port</span>;\n  u_int16_t <span class=\"supfact\">from_port</span>;\n  size_t <span class=\"supfact\">size</span>;\n  $36DF2EBBD83F685AF10C4006051F134B *<span class=\"supfact\">to</span>;\n  $965C21703EDED10546A850D1C255A0B1 *<span class=\"supfact\">from</span>;\n  if (<span class=\"supfact\">this</span>->type != <span class=\"supfact\">other</span>->type ||\n      <span class=\"supfact\">this</span>-><span class=\"supfact\">protocol</span> !=\n              <span class=\"supfact\">other</span>-><span class=\"supfact\">protocol</span> &&\n          <span class=\"supfact\">this</span>-><span class=\"supfact\">protocol</span> &&\n          <span class=\"supfact\">other</span>-><span class=\"supfact\">protocol</span>)\n    return Number L;\n  v2 = <span class=\"supfact\">this</span>-><span class=\"supfact\">from_port</span>;\n  if (<span class=\"supfact\">other</span>-><span class=\"supfact\">from_port</span> >= v2)\n    v2 = <span class=\"supfact\">other</span>-><span class=\"supfact\">from_port</span>;\n  <span class=\"supfact\">from_port</span> = v2;\n  v3 = <span class=\"supfact\">this</span>-><span class=\"supfact\">to_port</span>;\n  if (<span class=\"supfact\">other</span>-><span class=\"supfact\">to_port</span> <= v3)\n    v3 = <span class=\"supfact\">other</span>-><span class=\"supfact\">to_port</span>;\n  <span class=\"supfact\">to_port</span> = v3;\n  if (<span class=\"supfact\">from_port</span> > v3)\n    return Number L;\n  v5 = <span class=\"supfact\">this</span>-><span class=\"supfact\">protocol</span>;\n  if (<span class=\"supfact\">other</span>-><span class=\"supfact\">protocol</span> >= v5)\n    v5 = <span class=\"supfact\">other</span>-><span class=\"supfact\">protocol</span>;\n  <span class=\"supfact\">protocol</span> = v5;\n  v6 = <span class=\"supfact\">this</span>->type;\n  if (v6 == TS_IPV4_ADDR_RANGE) {\n    <span class=\"supfact\">size</span> = Number L;\n  } else {\n    if (v6 != TS_IPV6_ADDR_RANGE)\n      return Number L;\n    <span class=\"supfact\">size</span> = Number L;\n  }\n  if (memcmp(&<span class=\"supfact\">this</span>->_anon_0, &<span class=\"supfact\">other</span>->_anon_0,\n             <span class=\"supfact\">size</span>) <= Number)\n    <span class=\"supfact\">from</span> = &<span class=\"supfact\">other</span>->_anon_0;\n  else\n    <span class=\"supfact\">from</span> = &<span class=\"supfact\">this</span>->_anon_0;\n  if (memcmp(&<span class=\"supfact\">this</span>->_anon_1, &<span class=\"supfact\">other</span>->_anon_1,\n             <span class=\"supfact\">size</span>) <= Number)\n    <span class=\"supfact\">to</span> = &<span class=\"supfact\">this</span>->_anon_1;\n  else\n    <span class=\"supfact\">to</span> = &<span class=\"supfact\">other</span>->_anon_1;\n  if (memcmp(<span class=\"supfact\">from</span>, <span class=\"supfact\">to</span>, <span class=\"supfact\">size</span>) >\n      Number)\n    return Number L;\n  <span class=\"supfact\">new_ts</span> = traffic_selector_create(\n      <span class=\"supfact\">protocol</span>, <span class=\"supfact\">this</span>->type,\n      <span class=\"supfact\">from_port</span>, <span class=\"supfact\">to_port</span>);\n  <span class=\"supfact\">new_ts</span>->type = <span class=\"supfact\">this</span>->type;\n  memcpy(&<span class=\"supfact\">new_ts</span>->_anon_0, <span class=\"supfact\">from</span>,\n         <span class=\"supfact\">size</span>);\n  memcpy(&<span class=\"supfact\">new_ts</span>->_anon_1, <span class=\"supfact\">to</span>,\n         <span class=\"supfact\">size</span>);\n  update_string(<span class=\"supfact\">new_ts</span>);\n  return &<span class=\"supfact\">new_ts</span>->public;\n}", "var": [{"name": "a1", "type": "private_ike_sa_t_0 *", "pred_name": "this", "ref_name": "this", "ref_type": "private_traffic_selector_t_0 *"}, {"name": "a2", "type": "child_sa_t_0 *", "pred_name": "child_sa", "ref_name": "other", "ref_type": "private_traffic_selector_t_0 *"}, {"name": "v9", "type": "iterator_t_0 *", "pred_name": "iterator", "ref_name": "new_ts", "ref_type": "private_traffic_selector_t_0 *"}, {"name": "v10", "type": "bool", "pred_name": "__unk__", "ref_name": "protocol", "ref_type": "u_int8_t"}, {"name": "v11", "type": "u_int16_t", "pred_name": "__unk__", "ref_name": "to_port", "ref_type": "u_int16_t"}, {"name": "v12", "type": "u_int16_t", "pred_name": "__unk__", "ref_name": "from_port", "ref_type": "u_int16_t"}, {"name": "n", "type": "size_t", "pred_name": "len", "ref_name": "size", "ref_type": "size_t"}, {"name": "s2", "type": "const char *", "pred_name": "s2", "ref_name": "to", "ref_type": "$36DF2EBBD83F685AF10C4006051F134B *"}, {"name": "s1", "type": "const char *", "pred_name": "s1", "ref_name": "from", "ref_type": "$965C21703EDED10546A850D1C255A0B1 *"}], "body_in_train": false}, {"repo_owner": "v4o6", "repo_name": "cpsc314", "path": "v4o6/cpsc314/a25c6f651200c99b5d3b2a5b5317b70c75a4cab6d83283e756e97ad31a5762e2", "path_in_repo": "v4o6/cpsc314/template_clean/a3", "objdump": "000000000040eada <_ZN9__gnu_cxx13new_allocatorI6VectorE8allocateEmPKv>:\n  40eada:\t55                   \tpush   %rbp\n  40eadb:\t48 89 e5             \tmov    %rsp,%rbp\n  40eade:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40eae2:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  40eae6:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  40eaea:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  40eaee:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40eaf2:\t48 89 c7             \tmov    %rax,%rdi\n  40eaf5:\te8 88 03 00 00       \tcallq  40ee82 <_ZNK9__gnu_cxx13new_allocatorI6VectorE8max_sizeEv>\n  40eafa:\t48 39 45 f0          \tcmp    %rax,-0x10(%rbp)\n  40eafe:\t0f 97 c0             \tseta   %al\n  40eb01:\t84 c0                \ttest   %al,%al\n  40eb03:\t74 05                \tje     40eb0a <_ZN9__gnu_cxx13new_allocatorI6VectorE8allocateEmPKv+0x30>\n  40eb05:\te8 26 46 ff ff       \tcallq  403130 <_ZSt17__throw_bad_allocv@plt>\n  40eb0a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40eb0e:\t48 c1 e0 05          \tshl    $0x5,%rax\n  40eb12:\t48 89 c7             \tmov    %rax,%rdi\n  40eb15:\te8 d6 47 ff ff       \tcallq  4032f0 <_Znwm@plt>\n  40eb1a:\tc9                   \tleaveq \n  40eb1b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall __gnu_cxx new_allocator<Vector>\nallocate(__int64 <span class=\"supfact\">a1</span>, unsigned __int64 <span class=\"supfact\">a2</span>) {\n  if (<span class=\"supfact\">a2</span> >\n      __gnu_cxx new_allocator<Vector> max_size(<span class=\"supfact\">a1</span>))\n    std __throw_bad_alloc();\n  return operator new(Number *<span class=\"supfact\">a2</span>);\n}", "code_t": "__gnu_cxx new_allocator<Vector> pointer __cdecl __gnu_cxx new_allocator<Vector>\nallocate(__gnu_cxx new_allocator<Vector> *const <span class=\"supfact\">this</span>,\n         __gnu_cxx new_allocator<Vector> size_type <span class=\"supfact\">__n</span>,\n         const void *a3) {\n  if (<span class=\"supfact\">__n</span> >\n      __gnu_cxx new_allocator<Vector> max_size(<span class=\"supfact\">this</span>))\n    std __throw_bad_alloc();\n  return (__gnu_cxx new_allocator<Vector> pointer) operator new(\n      Number *<span class=\"supfact\">__n</span>);\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "this", "ref_type": "__gnu_cxx::new_allocator<Vector> *"}, {"name": "a2", "type": "unsigned __int64", "pred_name": "a2", "ref_name": "__n", "ref_type": "__gnu_cxx::new_allocator<Vector>::size_type"}], "body_in_train": false}, {"repo_owner": "hall-lab", "repo_name": "speedseq", "path": "hall-lab/speedseq/4e7f019e26e8061b9173086b284ac5380552591b6bdb4b63cfd1b602077d0f86", "path_in_repo": "hall-lab/speedseq/src/samtools-1.3.1/htslib-1.3.1/cram/cram_io.pico", "objdump": "000000000000947d <cram_read_container>:\n    947d:\t55                   \tpush   %rbp\n    947e:\t48 89 e5             \tmov    %rsp,%rbp\n    9481:\t48 81 ec 90 02 00 00 \tsub    $0x290,%rsp\n    9488:\t48 89 bd 78 fd ff ff \tmov    %rdi,-0x288(%rbp)\n    948f:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    9496:\t00 \n    9497:\tc7 85 8c fd ff ff 00 \tmovl   $0x0,-0x274(%rbp)\n    949e:\t00 00 00 \n    94a1:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    94a8:\tc7 40 30 00 00 00 00 \tmovl   $0x0,0x30(%rax)\n    94af:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    94b6:\tc7 80 48 88 00 00 00 \tmovl   $0x0,0x8848(%rax)\n    94bd:\t00 00 00 \n    94c0:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n    94c7:\tba 50 02 00 00       \tmov    $0x250,%edx\n    94cc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    94d1:\t48 89 c7             \tmov    %rax,%rdi\n    94d4:\te8 00 00 00 00       \tcallq  94d9 <cram_read_container+0x5c>\n    94d9:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    94e0:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    94e3:\tc1 f8 08             \tsar    $0x8,%eax\n    94e6:\t83 f8 01             \tcmp    $0x1,%eax\n    94e9:\t75 6b                \tjne    9556 <cram_read_container+0xd9>\n    94eb:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    94f2:\t48 8d 8d 90 fd ff ff \tlea    -0x270(%rbp),%rcx\n    94f9:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    9500:\t48 89 ce             \tmov    %rcx,%rsi\n    9503:\t48 89 c7             \tmov    %rax,%rdi\n    9506:\te8 00 00 00 00       \tcallq  950b <cram_read_container+0x8e>\n    950b:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    950e:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    9512:\t75 34                \tjne    9548 <cram_read_container+0xcb>\n    9514:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    951b:\t8b 80 58 88 00 00    \tmov    0x8858(%rax),%eax\n    9521:\t85 c0                \ttest   %eax,%eax\n    9523:\t74 07                \tje     952c <cram_read_container+0xaf>\n    9525:\tba 01 00 00 00       \tmov    $0x1,%edx\n    952a:\teb 05                \tjmp    9531 <cram_read_container+0xb4>\n    952c:\tba 02 00 00 00       \tmov    $0x2,%edx\n    9531:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    9538:\t89 90 48 88 00 00    \tmov    %edx,0x8848(%rax)\n    953e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9543:\te9 b8 05 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    9548:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    954b:\t48 98                \tcltq   \n    954d:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    9551:\te9 c0 00 00 00       \tjmpq   9616 <cram_read_container+0x199>\n    9556:\t48 8d 95 90 fd ff ff \tlea    -0x270(%rbp),%rdx\n    955d:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    9564:\t48 89 d6             \tmov    %rdx,%rsi\n    9567:\t48 89 c7             \tmov    %rax,%rdi\n    956a:\te8 00 00 00 00       \tcallq  956f <cram_read_container+0xf2>\n    956f:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    9572:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    9576:\t75 6a                \tjne    95e2 <cram_read_container+0x165>\n    9578:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    957f:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    9582:\tc1 f8 08             \tsar    $0x8,%eax\n    9585:\t83 f8 02             \tcmp    $0x2,%eax\n    9588:\t75 24                \tjne    95ae <cram_read_container+0x131>\n    958a:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    9591:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    9594:\t0f b6 c0             \tmovzbl %al,%eax\n    9597:\t85 c0                \ttest   %eax,%eax\n    9599:\t75 13                \tjne    95ae <cram_read_container+0x131>\n    959b:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    95a2:\tc7 80 48 88 00 00 01 \tmovl   $0x1,0x8848(%rax)\n    95a9:\t00 00 00 \n    95ac:\teb 2a                \tjmp    95d8 <cram_read_container+0x15b>\n    95ae:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    95b5:\t8b 80 58 88 00 00    \tmov    0x8858(%rax),%eax\n    95bb:\t85 c0                \ttest   %eax,%eax\n    95bd:\t74 07                \tje     95c6 <cram_read_container+0x149>\n    95bf:\tba 01 00 00 00       \tmov    $0x1,%edx\n    95c4:\teb 05                \tjmp    95cb <cram_read_container+0x14e>\n    95c6:\tba 02 00 00 00       \tmov    $0x2,%edx\n    95cb:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    95d2:\t89 90 48 88 00 00    \tmov    %edx,0x8848(%rax)\n    95d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    95dd:\te9 1e 05 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    95e2:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    95e5:\t48 98                \tcltq   \n    95e7:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    95eb:\t8b 85 90 fd ff ff    \tmov    -0x270(%rbp),%eax\n    95f1:\t89 85 88 fd ff ff    \tmov    %eax,-0x278(%rbp)\n    95f7:\t48 8d 85 88 fd ff ff \tlea    -0x278(%rbp),%rax\n    95fe:\tba 04 00 00 00       \tmov    $0x4,%edx\n    9603:\t48 89 c6             \tmov    %rax,%rsi\n    9606:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    960b:\te8 00 00 00 00       \tcallq  9610 <cram_read_container+0x193>\n    9610:\t89 85 8c fd ff ff    \tmov    %eax,-0x274(%rbp)\n    9616:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    961d:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n    9624:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n    9628:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    962f:\t48 89 ce             \tmov    %rcx,%rsi\n    9632:\t48 89 c7             \tmov    %rax,%rdi\n    9635:\te8 00 00 00 00       \tcallq  963a <cram_read_container+0x1bd>\n    963a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    963d:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    9641:\t75 0a                \tjne    964d <cram_read_container+0x1d0>\n    9643:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9648:\te9 b3 04 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    964d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    9650:\t48 98                \tcltq   \n    9652:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    9656:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    965d:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n    9664:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n    9668:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    966f:\t48 89 ce             \tmov    %rcx,%rsi\n    9672:\t48 89 c7             \tmov    %rax,%rdi\n    9675:\te8 00 00 00 00       \tcallq  967a <cram_read_container+0x1fd>\n    967a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    967d:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    9681:\t75 0a                \tjne    968d <cram_read_container+0x210>\n    9683:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9688:\te9 73 04 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    968d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    9690:\t48 98                \tcltq   \n    9692:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    9696:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    969d:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n    96a4:\t48 8d 48 0c          \tlea    0xc(%rax),%rcx\n    96a8:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    96af:\t48 89 ce             \tmov    %rcx,%rsi\n    96b2:\t48 89 c7             \tmov    %rax,%rdi\n    96b5:\te8 00 00 00 00       \tcallq  96ba <cram_read_container+0x23d>\n    96ba:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    96bd:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    96c1:\t75 0a                \tjne    96cd <cram_read_container+0x250>\n    96c3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    96c8:\te9 33 04 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    96cd:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    96d0:\t48 98                \tcltq   \n    96d2:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    96d6:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    96dd:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n    96e4:\t48 8d 48 20          \tlea    0x20(%rax),%rcx\n    96e8:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    96ef:\t48 89 ce             \tmov    %rcx,%rsi\n    96f2:\t48 89 c7             \tmov    %rax,%rdi\n    96f5:\te8 00 00 00 00       \tcallq  96fa <cram_read_container+0x27d>\n    96fa:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    96fd:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    9701:\t75 0a                \tjne    970d <cram_read_container+0x290>\n    9703:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9708:\te9 f3 03 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    970d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    9710:\t48 98                \tcltq   \n    9712:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    9716:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    971d:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    9720:\tc1 f8 08             \tsar    $0x8,%eax\n    9723:\t83 f8 01             \tcmp    $0x1,%eax\n    9726:\t75 1b                \tjne    9743 <cram_read_container+0x2c6>\n    9728:\t48 c7 85 a0 fd ff ff \tmovq   $0x0,-0x260(%rbp)\n    972f:\t00 00 00 00 \n    9733:\t48 c7 85 a8 fd ff ff \tmovq   $0x0,-0x258(%rbp)\n    973a:\t00 00 00 00 \n    973e:\te9 df 00 00 00       \tjmpq   9822 <cram_read_container+0x3a5>\n    9743:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    974a:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    974d:\tc1 f8 08             \tsar    $0x8,%eax\n    9750:\t83 f8 02             \tcmp    $0x2,%eax\n    9753:\t7e 42                \tjle    9797 <cram_read_container+0x31a>\n    9755:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    975c:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n    9763:\t48 8d 48 10          \tlea    0x10(%rax),%rcx\n    9767:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    976e:\t48 89 ce             \tmov    %rcx,%rsi\n    9771:\t48 89 c7             \tmov    %rax,%rdi\n    9774:\te8 00 00 00 00       \tcallq  9779 <cram_read_container+0x2fc>\n    9779:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    977c:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    9780:\t75 0a                \tjne    978c <cram_read_container+0x30f>\n    9782:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9787:\te9 74 03 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    978c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    978f:\t48 98                \tcltq   \n    9791:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    9795:\teb 4b                \tjmp    97e2 <cram_read_container+0x365>\n    9797:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    979e:\t48 8d 8d 84 fd ff ff \tlea    -0x27c(%rbp),%rcx\n    97a5:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    97ac:\t48 89 ce             \tmov    %rcx,%rsi\n    97af:\t48 89 c7             \tmov    %rax,%rdi\n    97b2:\te8 00 00 00 00       \tcallq  97b7 <cram_read_container+0x33a>\n    97b7:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    97ba:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    97be:\t75 0a                \tjne    97ca <cram_read_container+0x34d>\n    97c0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    97c5:\te9 36 03 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    97ca:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    97cd:\t48 98                \tcltq   \n    97cf:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    97d3:\t8b 85 84 fd ff ff    \tmov    -0x27c(%rbp),%eax\n    97d9:\t48 98                \tcltq   \n    97db:\t48 89 85 a0 fd ff ff \tmov    %rax,-0x260(%rbp)\n    97e2:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    97e9:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n    97f0:\t48 8d 48 18          \tlea    0x18(%rax),%rcx\n    97f4:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    97fb:\t48 89 ce             \tmov    %rcx,%rsi\n    97fe:\t48 89 c7             \tmov    %rax,%rdi\n    9801:\te8 00 00 00 00       \tcallq  9806 <cram_read_container+0x389>\n    9806:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    9809:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    980d:\t75 0a                \tjne    9819 <cram_read_container+0x39c>\n    980f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9814:\te9 e7 02 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    9819:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    981c:\t48 98                \tcltq   \n    981e:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    9822:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    9829:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n    9830:\t48 8d 48 24          \tlea    0x24(%rax),%rcx\n    9834:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    983b:\t48 89 ce             \tmov    %rcx,%rsi\n    983e:\t48 89 c7             \tmov    %rax,%rdi\n    9841:\te8 00 00 00 00       \tcallq  9846 <cram_read_container+0x3c9>\n    9846:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    9849:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    984d:\t75 0a                \tjne    9859 <cram_read_container+0x3dc>\n    984f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9854:\te9 a7 02 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    9859:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    985c:\t48 98                \tcltq   \n    985e:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    9862:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    9869:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n    9870:\t48 8d 48 28          \tlea    0x28(%rax),%rcx\n    9874:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    987b:\t48 89 ce             \tmov    %rcx,%rsi\n    987e:\t48 89 c7             \tmov    %rax,%rdi\n    9881:\te8 00 00 00 00       \tcallq  9886 <cram_read_container+0x409>\n    9886:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    9889:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    988d:\t75 0a                \tjne    9899 <cram_read_container+0x41c>\n    988f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9894:\te9 67 02 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    9899:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    989c:\t48 98                \tcltq   \n    989e:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    98a2:\tbe 50 02 00 00       \tmov    $0x250,%esi\n    98a7:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    98ac:\te8 00 00 00 00       \tcallq  98b1 <cram_read_container+0x434>\n    98b1:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    98b5:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    98ba:\t75 0a                \tjne    98c6 <cram_read_container+0x449>\n    98bc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    98c1:\te9 3a 02 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    98c6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    98ca:\t48 89 c7             \tmov    %rax,%rdi\n    98cd:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n    98d4:\tba 4a 00 00 00       \tmov    $0x4a,%edx\n    98d9:\t48 89 c6             \tmov    %rax,%rsi\n    98dc:\t48 89 d1             \tmov    %rdx,%rcx\n    98df:\tf3 48 a5             \trep movsq %ds:(%rsi),%es:(%rdi)\n    98e2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    98e6:\t8b 40 28             \tmov    0x28(%rax),%eax\n    98e9:\t48 98                \tcltq   \n    98eb:\t48 c1 e0 02          \tshl    $0x2,%rax\n    98ef:\t48 89 c7             \tmov    %rax,%rdi\n    98f2:\te8 00 00 00 00       \tcallq  98f7 <cram_read_container+0x47a>\n    98f7:\t48 89 c2             \tmov    %rax,%rdx\n    98fa:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    98fe:\t48 89 50 30          \tmov    %rdx,0x30(%rax)\n    9902:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9906:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    990a:\t48 85 c0             \ttest   %rax,%rax\n    990d:\t75 32                \tjne    9941 <cram_read_container+0x4c4>\n    990f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9913:\t8b 40 28             \tmov    0x28(%rax),%eax\n    9916:\t85 c0                \ttest   %eax,%eax\n    9918:\t74 27                \tje     9941 <cram_read_container+0x4c4>\n    991a:\te8 00 00 00 00       \tcallq  991f <cram_read_container+0x4a2>\n    991f:\t8b 10                \tmov    (%rax),%edx\n    9921:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    9928:\t89 50 30             \tmov    %edx,0x30(%rax)\n    992b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    992f:\t48 89 c7             \tmov    %rax,%rdi\n    9932:\te8 00 00 00 00       \tcallq  9937 <cram_read_container+0x4ba>\n    9937:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    993c:\te9 bf 01 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    9941:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    9948:\teb 5b                \tjmp    99a5 <cram_read_container+0x528>\n    994a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    994e:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    9952:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    9955:\t48 63 d2             \tmovslq %edx,%rdx\n    9958:\t48 c1 e2 02          \tshl    $0x2,%rdx\n    995c:\t48 8d 0c 10          \tlea    (%rax,%rdx,1),%rcx\n    9960:\t48 8d 95 8c fd ff ff \tlea    -0x274(%rbp),%rdx\n    9967:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    996e:\t48 89 ce             \tmov    %rcx,%rsi\n    9971:\t48 89 c7             \tmov    %rax,%rdi\n    9974:\te8 00 00 00 00       \tcallq  9979 <cram_read_container+0x4fc>\n    9979:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    997c:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n    9980:\t75 16                \tjne    9998 <cram_read_container+0x51b>\n    9982:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9986:\t48 89 c7             \tmov    %rax,%rdi\n    9989:\te8 00 00 00 00       \tcallq  998e <cram_read_container+0x511>\n    998e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9993:\te9 68 01 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    9998:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    999b:\t48 98                \tcltq   \n    999d:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    99a1:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    99a5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    99a9:\t8b 40 28             \tmov    0x28(%rax),%eax\n    99ac:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    99af:\t7c 99                \tjl     994a <cram_read_container+0x4cd>\n    99b1:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    99b8:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    99bb:\tc1 f8 08             \tsar    $0x8,%eax\n    99be:\t83 f8 02             \tcmp    $0x2,%eax\n    99c1:\t7e 7e                \tjle    9a41 <cram_read_container+0x5c4>\n    99c3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    99c7:\t48 8d 90 48 02 00 00 \tlea    0x248(%rax),%rdx\n    99ce:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    99d5:\t48 89 d6             \tmov    %rdx,%rsi\n    99d8:\t48 89 c7             \tmov    %rax,%rdi\n    99db:\te8 00 00 00 00       \tcallq  99e0 <cram_read_container+0x563>\n    99e0:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    99e3:\t75 0a                \tjne    99ef <cram_read_container+0x572>\n    99e5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    99ea:\te9 11 01 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    99ef:\t48 83 45 f0 04       \taddq   $0x4,-0x10(%rbp)\n    99f4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    99f8:\t8b 90 48 02 00 00    \tmov    0x248(%rax),%edx\n    99fe:\t8b 85 8c fd ff ff    \tmov    -0x274(%rbp),%eax\n    9a04:\t39 c2                \tcmp    %eax,%edx\n    9a06:\t74 39                \tje     9a41 <cram_read_container+0x5c4>\n    9a08:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9a0f <cram_read_container+0x592>\n    9a0f:\t48 8b 00             \tmov    (%rax),%rax\n    9a12:\t48 89 c1             \tmov    %rax,%rcx\n    9a15:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n    9a1a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    9a1f:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 9a26 <cram_read_container+0x5a9>\n    9a26:\te8 00 00 00 00       \tcallq  9a2b <cram_read_container+0x5ae>\n    9a2b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9a2f:\t48 89 c7             \tmov    %rax,%rdi\n    9a32:\te8 00 00 00 00       \tcallq  9a37 <cram_read_container+0x5ba>\n    9a37:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    9a3c:\te9 bf 00 00 00       \tjmpq   9b00 <cram_read_container+0x683>\n    9a41:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9a45:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    9a49:\t48 89 50 38          \tmov    %rdx,0x38(%rax)\n    9a4d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9a51:\t48 c7 40 78 00 00 00 \tmovq   $0x0,0x78(%rax)\n    9a58:\t00 \n    9a59:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9a5d:\tc7 40 54 00 00 00 00 \tmovl   $0x0,0x54(%rax)\n    9a64:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9a68:\t8b 50 28             \tmov    0x28(%rax),%edx\n    9a6b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9a6f:\t89 50 50             \tmov    %edx,0x50(%rax)\n    9a72:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9a76:\tc7 40 68 00 00 00 00 \tmovl   $0x0,0x68(%rax)\n    9a7d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9a81:\tc7 40 5c 00 00 00 00 \tmovl   $0x0,0x5c(%rax)\n    9a88:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9a8c:\tc7 40 58 00 00 00 00 \tmovl   $0x0,0x58(%rax)\n    9a93:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9a97:\t8b 40 04             \tmov    0x4(%rax),%eax\n    9a9a:\t83 f8 fe             \tcmp    $0xfffffffe,%eax\n    9a9d:\t75 1f                \tjne    9abe <cram_read_container+0x641>\n    9a9f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9aa3:\tc7 80 94 00 00 00 01 \tmovl   $0x1,0x94(%rax)\n    9aaa:\t00 00 00 \n    9aad:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    9ab4:\tc7 80 50 88 00 00 01 \tmovl   $0x1,0x8850(%rax)\n    9abb:\t00 00 00 \n    9abe:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9ac2:\t8b 40 20             \tmov    0x20(%rax),%eax\n    9ac5:\t85 c0                \ttest   %eax,%eax\n    9ac7:\t75 21                \tjne    9aea <cram_read_container+0x66d>\n    9ac9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9acd:\t8b 40 04             \tmov    0x4(%rax),%eax\n    9ad0:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    9ad3:\t75 15                \tjne    9aea <cram_read_container+0x66d>\n    9ad5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9ad9:\t8b 40 08             \tmov    0x8(%rax),%eax\n    9adc:\t3d 46 4f 45 00       \tcmp    $0x454f46,%eax\n    9ae1:\t75 07                \tjne    9aea <cram_read_container+0x66d>\n    9ae3:\tba 01 00 00 00       \tmov    $0x1,%edx\n    9ae8:\teb 05                \tjmp    9aef <cram_read_container+0x672>\n    9aea:\tba 00 00 00 00       \tmov    $0x0,%edx\n    9aef:\t48 8b 85 78 fd ff ff \tmov    -0x288(%rbp),%rax\n    9af6:\t89 90 58 88 00 00    \tmov    %edx,0x8858(%rax)\n    9afc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9b00:\tc9                   \tleaveq \n    9b01:\tc3                   \tretq   ", "code_s": "__int64 *__fastcall cram_read_container(__int64 <span class=\"supfact\">a1</span>) {\n  int v1;\n  __int64 *<span class=\"supfact\">result</span>;\n  int v3;\n  _BOOL4 v4;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">s</span>[Number];\n  __int64 *<span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v11</span> = Number L;\n  <span class=\"supfact\">v7</span> = Number;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  if (*(int *)(<span class=\"supfact\">a1</span> + Number) >> Number == Number) {\n    <span class=\"supfact\">v10</span> = itf8_decode_crc(\n        (__int64 *)<span class=\"supfact\">a1</span>, <span class=\"supfact\">s</span>, &<span class=\"supfact\">v7</span>);\n    if (<span class=\"supfact\">v10</span> == Number) {\n      if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n        v1 = Number;\n      else\n        v1 = Number;\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = v1;\n      return Number L;\n    }\n    <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n  } else {\n    <span class=\"supfact\">v10</span> =\n        int32_decode((__int64 *)<span class=\"supfact\">a1</span>, <span class=\"supfact\">s</span>);\n    if (<span class=\"supfact\">v10</span> == Number) {\n      if (*(int *)(<span class=\"supfact\">a1</span> + Number) >> Number != Number ||\n          (unsigned __int8)*(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n        if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n          v3 = Number;\n        else\n          v3 = Number;\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = v3;\n      } else {\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n      }\n      return Number L;\n    }\n    <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n    <span class=\"supfact\">v6</span> = <span class=\"supfact\">s</span>[Number];\n    <span class=\"supfact\">v7</span> = crc32(Number L, &<span class=\"supfact\">v6</span>, Number L);\n  }\n  <span class=\"supfact\">v10</span> = itf8_decode_crc((__int64 *)<span class=\"supfact\">a1</span>,\n                                        (_DWORD *)<span class=\"supfact\">s</span> + Number,\n                                        &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v10</span> == Number)\n    return Number L;\n  <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> =\n      itf8_decode_crc((__int64 *)<span class=\"supfact\">a1</span>, &<span class=\"supfact\">s</span>[Number],\n                      &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v10</span> == Number)\n    return Number L;\n  <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = itf8_decode_crc(\n      (__int64 *)<span class=\"supfact\">a1</span>,\n      (_DWORD *)&<span class=\"supfact\">s</span>[Number] + Number, &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v10</span> == Number)\n    return Number L;\n  <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> =\n      itf8_decode_crc((__int64 *)<span class=\"supfact\">a1</span>, &<span class=\"supfact\">s</span>[Number],\n                      &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v10</span> == Number)\n    return Number L;\n  <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n  if (*(int *)(<span class=\"supfact\">a1</span> + Number) >> Number == Number) {\n    <span class=\"supfact\">s</span>[Number] = Number L;\n    <span class=\"supfact\">s</span>[Number] = Number L;\n  } else {\n    if (*(int *)(<span class=\"supfact\">a1</span> + Number) >> Number <= Number) {\n      <span class=\"supfact\">v10</span> =\n          itf8_decode_crc((__int64 *)<span class=\"supfact\">a1</span>, &<span class=\"supfact\">v5</span>,\n                          &<span class=\"supfact\">v7</span>);\n      if (<span class=\"supfact\">v10</span> == Number)\n        return Number L;\n      <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n      <span class=\"supfact\">s</span>[Number] = <span class=\"supfact\">v5</span>;\n    } else {\n      <span class=\"supfact\">v10</span> =\n          ltf8_decode_crc((__int64 *)<span class=\"supfact\">a1</span>,\n                          &<span class=\"supfact\">s</span>[Number], &<span class=\"supfact\">v7</span>);\n      if (<span class=\"supfact\">v10</span> == Number)\n        return Number L;\n      <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n    }\n    <span class=\"supfact\">v10</span> =\n        ltf8_decode_crc((__int64 *)<span class=\"supfact\">a1</span>,\n                        &<span class=\"supfact\">s</span>[Number], &<span class=\"supfact\">v7</span>);\n    if (<span class=\"supfact\">v10</span> == Number)\n      return Number L;\n    <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n  }\n  <span class=\"supfact\">v10</span> = itf8_decode_crc(\n      (__int64 *)<span class=\"supfact\">a1</span>,\n      (_DWORD *)&<span class=\"supfact\">s</span>[Number] + Number, &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v10</span> == Number)\n    return Number L;\n  <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> =\n      itf8_decode_crc((__int64 *)<span class=\"supfact\">a1</span>, &<span class=\"supfact\">s</span>[Number],\n                      &<span class=\"supfact\">v7</span>);\n  if (<span class=\"supfact\">v10</span> == Number)\n    return Number L;\n  <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v9</span> = (__int64 *)calloc(Number, Number);\n  if (!<span class=\"supfact\">v9</span>)\n    return Number L;\n  qmemcpy(<span class=\"supfact\">v9</span>, <span class=\"supfact\">s</span>, Number);\n  <span class=\"supfact\">v9</span>[Number] =\n      (__int64)malloc(Number L * *((int *)<span class=\"supfact\">v9</span> + Number));\n  if (!<span class=\"supfact\">v9</span>[Number] && *((_DWORD *)<span class=\"supfact\">v9</span> + Number)) {\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = *_errno_location();\n    cram_free_container((__int64)<span class=\"supfact\">v9</span>);\n    return Number L;\n  }\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < *((_DWORD *)<span class=\"supfact\">v9</span> + Number);\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v10</span> = itf8_decode_crc(\n        (__int64 *)<span class=\"supfact\">a1</span>,\n        (_DWORD *)(<span class=\"supfact\">v9</span>[Number] + Number L * <span class=\"supfact\">i</span>),\n        &<span class=\"supfact\">v7</span>);\n    if (<span class=\"supfact\">v10</span> == Number) {\n      cram_free_container((__int64)<span class=\"supfact\">v9</span>);\n      return Number L;\n    }\n    <span class=\"supfact\">v11</span> += <span class=\"supfact\">v10</span>;\n  }\n  if (*(int *)(<span class=\"supfact\">a1</span> + Number) >> Number <= Number)\n    goto LABEL_57;\n  if ((unsigned int)int32_decode((__int64 *)<span class=\"supfact\">a1</span>,\n                                 (_DWORD *)<span class=\"supfact\">v9</span> + Number) ==\n      Number)\n    return Number L;\n  <span class=\"supfact\">v11</span> += Number L;\n  if (*((_DWORD *)<span class=\"supfact\">v9</span> + Number) == <span class=\"supfact\">v7</span>) {\n  LABEL_57:\n    <span class=\"supfact\">v9</span>[Number] = <span class=\"supfact\">v11</span>;\n    <span class=\"supfact\">v9</span>[Number] = Number L;\n    *((_DWORD *)<span class=\"supfact\">v9</span> + Number) = Number;\n    *((_DWORD *)<span class=\"supfact\">v9</span> + Number) =\n        *((_DWORD *)<span class=\"supfact\">v9</span> + Number);\n    *((_DWORD *)<span class=\"supfact\">v9</span> + Number) = Number;\n    *((_DWORD *)<span class=\"supfact\">v9</span> + Number) = Number;\n    *((_DWORD *)<span class=\"supfact\">v9</span> + Number) = Number;\n    if (*((_DWORD *)<span class=\"supfact\">v9</span> + Number) == Number) {\n      *((_DWORD *)<span class=\"supfact\">v9</span> + Number) = Number;\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n    }\n    v4 = !*((_DWORD *)<span class=\"supfact\">v9</span> + Number) &&\n         *((_DWORD *)<span class=\"supfact\">v9</span> + Number) == Number &&\n         *((_DWORD *)<span class=\"supfact\">v9</span> + Number) == Number;\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = v4;\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">v9</span>;\n  } else {\n    fwrite(String, Number, Number, stderr);\n    cram_free_container((__int64)<span class=\"supfact\">v9</span>);\n    <span class=\"supfact\">result</span> = Number L;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "cram_container_0 *__cdecl cram_read_container(cram_fd_0 *<span class=\"supfact\">fd</span>) {\n  int v1;\n  cram_container_0 *<span class=\"supfact\">result</span>;\n  int v3;\n  int v4;\n  int32_t <span class=\"supfact\">i32</span>;\n  uint32_t <span class=\"supfact\">len</span>;\n  uint32_t <span class=\"supfact\">crc</span>;\n  cram_container_0 <span class=\"supfact\">c2</span>;\n  cram_container_0 *<span class=\"supfact\">c</span>;\n  int <span class=\"supfact\">s</span>;\n  size_t <span class=\"supfact\">rd</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">rd</span> = Number L;\n  <span class=\"supfact\">crc</span> = Number;\n  <span class=\"supfact\">fd</span>->err = Number;\n  <span class=\"supfact\">fd</span>->eof = Number;\n  memset(&<span class=\"supfact\">c2</span>, Number, sizeof(<span class=\"supfact\">c2</span>));\n  if (<span class=\"supfact\">fd</span>->version >> Number == Number) {\n    <span class=\"supfact\">s</span> = itf8_decode_crc(\n        <span class=\"supfact\">fd</span>, &<span class=\"supfact\">c2</span>.length, &<span class=\"supfact\">crc</span>);\n    if (<span class=\"supfact\">s</span> == Number) {\n      if (<span class=\"supfact\">fd</span>->empty_container)\n        v1 = Number;\n      else\n        v1 = Number;\n      <span class=\"supfact\">fd</span>->eof = v1;\n      return Number L;\n    }\n    <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n  } else {\n    <span class=\"supfact\">s</span> =\n        int32_decode(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">c2</span>.length);\n    if (<span class=\"supfact\">s</span> == Number) {\n      if (<span class=\"supfact\">fd</span>->version >> Number != Number ||\n          (unsigned __int8)<span class=\"supfact\">fd</span>->version) {\n        if (<span class=\"supfact\">fd</span>->empty_container)\n          v3 = Number;\n        else\n          v3 = Number;\n        <span class=\"supfact\">fd</span>->eof = v3;\n      } else {\n        <span class=\"supfact\">fd</span>->eof = Number;\n      }\n      return Number L;\n    }\n    <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n    <span class=\"supfact\">len</span> = <span class=\"supfact\">c2</span>.length;\n    <span class=\"supfact\">crc</span> = crc32(Number L, &<span class=\"supfact\">len</span>, Number L);\n  }\n  <span class=\"supfact\">s</span> = itf8_decode_crc(\n      <span class=\"supfact\">fd</span>, &<span class=\"supfact\">c2</span>.ref_seq_id, &<span class=\"supfact\">crc</span>);\n  if (<span class=\"supfact\">s</span> == Number)\n    return Number L;\n  <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> =\n      itf8_decode_crc(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">c2</span>.ref_seq_start,\n                      &<span class=\"supfact\">crc</span>);\n  if (<span class=\"supfact\">s</span> == Number)\n    return Number L;\n  <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> =\n      itf8_decode_crc(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">c2</span>.ref_seq_span,\n                      &<span class=\"supfact\">crc</span>);\n  if (<span class=\"supfact\">s</span> == Number)\n    return Number L;\n  <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> =\n      itf8_decode_crc(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">c2</span>.num_records,\n                      &<span class=\"supfact\">crc</span>);\n  if (<span class=\"supfact\">s</span> == Number)\n    return Number L;\n  <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n  if (<span class=\"supfact\">fd</span>->version >> Number == Number) {\n    <span class=\"supfact\">c2</span>.record_counter = Number L;\n    <span class=\"supfact\">c2</span>.num_bases = Number L;\n  } else {\n    if (<span class=\"supfact\">fd</span>->version >> Number <= Number) {\n      <span class=\"supfact\">s</span> = itf8_decode_crc(\n          <span class=\"supfact\">fd</span>, &<span class=\"supfact\">i32</span>, &<span class=\"supfact\">crc</span>);\n      if (<span class=\"supfact\">s</span> == Number)\n        return Number L;\n      <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n      <span class=\"supfact\">c2</span>.record_counter = <span class=\"supfact\">i32</span>;\n    } else {\n      <span class=\"supfact\">s</span> = ltf8_decode_crc(<span class=\"supfact\">fd</span>,\n                                          &<span class=\"supfact\">c2</span>.record_counter,\n                                          &<span class=\"supfact\">crc</span>);\n      if (<span class=\"supfact\">s</span> == Number)\n        return Number L;\n      <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n    }\n    <span class=\"supfact\">s</span> =\n        ltf8_decode_crc(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">c2</span>.num_bases,\n                        &<span class=\"supfact\">crc</span>);\n    if (<span class=\"supfact\">s</span> == Number)\n      return Number L;\n    <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n  }\n  <span class=\"supfact\">s</span> = itf8_decode_crc(\n      <span class=\"supfact\">fd</span>, &<span class=\"supfact\">c2</span>.num_blocks, &<span class=\"supfact\">crc</span>);\n  if (<span class=\"supfact\">s</span> == Number)\n    return Number L;\n  <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> =\n      itf8_decode_crc(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">c2</span>.num_landmarks,\n                      &<span class=\"supfact\">crc</span>);\n  if (<span class=\"supfact\">s</span> == Number)\n    return Number L;\n  <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n  <span class=\"supfact\">c</span> = (cram_container_0 *)calloc(Number, Number);\n  if (!<span class=\"supfact\">c</span>)\n    return Number L;\n  qmemcpy(<span class=\"supfact\">c</span>, &<span class=\"supfact\">c2</span>, sizeof(cram_container_0));\n  <span class=\"supfact\">c</span>->landmark =\n      (int32_t *)malloc(Number L * <span class=\"supfact\">c</span>->num_landmarks);\n  if (!<span class=\"supfact\">c</span>->landmark && <span class=\"supfact\">c</span>->num_landmarks) {\n    <span class=\"supfact\">fd</span>->err = *_errno_location();\n    cram_free_container(<span class=\"supfact\">c</span>);\n    return Number L;\n  }\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">c</span>->num_landmarks;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">s</span> = itf8_decode_crc(\n        <span class=\"supfact\">fd</span>, &<span class=\"supfact\">c</span>->landmark[<span class=\"supfact\">i</span>],\n        &<span class=\"supfact\">crc</span>);\n    if (<span class=\"supfact\">s</span> == Number) {\n      cram_free_container(<span class=\"supfact\">c</span>);\n      return Number L;\n    }\n    <span class=\"supfact\">rd</span> += <span class=\"supfact\">s</span>;\n  }\n  if (<span class=\"supfact\">fd</span>->version >> Number <= Number)\n    goto LABEL_57;\n  if (int32_decode(<span class=\"supfact\">fd</span>, (int32_t *)&<span class=\"supfact\">c</span>->crc32) ==\n      Number)\n    return Number L;\n  <span class=\"supfact\">rd</span> += Number L;\n  if (<span class=\"supfact\">c</span>->crc32 == <span class=\"supfact\">crc</span>) {\n  LABEL_57:\n    <span class=\"supfact\">c</span>->offset = <span class=\"supfact\">rd</span>;\n    <span class=\"supfact\">c</span>->slices = Number L;\n    <span class=\"supfact\">c</span>->curr_slice = Number;\n    <span class=\"supfact\">c</span>->max_slice = <span class=\"supfact\">c</span>->num_landmarks;\n    <span class=\"supfact\">c</span>->slice_rec = Number;\n    <span class=\"supfact\">c</span>->curr_rec = Number;\n    <span class=\"supfact\">c</span>->max_rec = Number;\n    if (<span class=\"supfact\">c</span>->ref_seq_id == Number) {\n      <span class=\"supfact\">c</span>->multi_seq = Number;\n      <span class=\"supfact\">fd</span>->multi_seq = Number;\n    }\n    v4 = !<span class=\"supfact\">c</span>->num_records &&\n         <span class=\"supfact\">c</span>->ref_seq_id == Number &&\n         <span class=\"supfact\">c</span>->ref_seq_start == Number;\n    <span class=\"supfact\">fd</span>->empty_container = v4;\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">c</span>;\n  } else {\n    fwrite(String, Number, Number, stderr);\n    cram_free_container(<span class=\"supfact\">c</span>);\n    <span class=\"supfact\">result</span> = Number L;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "cram_fd_0 *", "pred_name": "fd", "ref_name": "fd", "ref_type": "cram_fd_0 *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "cram_container_0 *"}, {"name": "v5", "type": "int32_t", "pred_name": "i32", "ref_name": "i32", "ref_type": "int32_t"}, {"name": "v6", "type": "int", "pred_name": "crc", "ref_name": "len", "ref_type": "uint32_t"}, {"name": "v7", "type": "unsigned __int8 *", "pred_name": "cp", "ref_name": "crc", "ref_type": "uint32_t"}, {"name": "s", "type": "cram_block *", "pred_name": "b", "ref_name": "c2", "ref_type": "struct cram_container_0 { int32_t length; int32_t ref_seq_id; int32_t ref_seq_start; int32_t ref_seq_span; int64_t record_counter; int64_t num_bases; int32_t num_records; int32_t num_blocks; int32_t num_landmarks; PADDING (4); int32_t * landmark; size_t offset; cram_block_compression_hdr_0 * comp_hdr; cram_block_0 * comp_hdr_block; int max_slice; int curr_slice; int max_rec; int curr_rec; int max_c_rec; int curr_c_rec; int slice_rec; int curr_ref; int last_pos; PADDING (4); cram_slice ** slices; cram_slice * slice; int pos_sorted; int max_apos; int last_slice; int multi_seq; int unsorted; int ref_start; int first_base; int last_base; int ref_id; int ref_end; char * ref; bam_seq_t ** bams; cram_stats_0 *[47] stats; kh_s_i2i_t * tags_used; int * refs_used; uint32_t crc32; PADDING (4); }"}, {"name": "v9", "type": "cram_container *", "pred_name": "c", "ref_name": "c", "ref_type": "cram_container_0 *"}, {"name": "v10", "type": "int", "pred_name": "s", "ref_name": "s", "ref_type": "int"}, {"name": "v11", "type": "size_t", "pred_name": "rd", "ref_name": "rd", "ref_type": "size_t"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "postgrespro", "repo_name": "postgres_cluster", "path": "postgrespro/postgres_cluster/0b9f9d1b3d7ab24d9ba67623f7f9ecea7ed2e7152f069173225fdabd966d15a6", "path_in_repo": "postgrespro/postgres_cluster//src/backend/commands/matview.o", "objdump": "0000000000000a8b <transientrel_receive>:\n     a8b:\t55                   \tpush   %rbp\n     a8c:\t48 89 e5             \tmov    %rsp,%rbp\n     a8f:\t48 83 ec 20          \tsub    $0x20,%rsp\n     a93:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     a97:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     a9b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     a9f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     aa3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     aa7:\t48 89 c7             \tmov    %rax,%rdi\n     aaa:\te8 00 00 00 00       \tcallq  aaf <transientrel_receive+0x24>\n     aaf:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     ab3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     ab7:\t48 8b 78 40          \tmov    0x40(%rax),%rdi\n     abb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     abf:\t8b 48 3c             \tmov    0x3c(%rax),%ecx\n     ac2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     ac6:\t8b 50 38             \tmov    0x38(%rax),%edx\n     ac9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     acd:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     ad1:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n     ad5:\t49 89 f8             \tmov    %rdi,%r8\n     ad8:\t48 89 c7             \tmov    %rax,%rdi\n     adb:\te8 00 00 00 00       \tcallq  ae0 <transientrel_receive+0x55>\n     ae0:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     ae5:\tc9                   \tleaveq \n     ae6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall transientrel_receive(__int64 <span class=\"supfact\">a1</span>,\n                                        __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = ExecMaterializeSlot(<span class=\"supfact\">a1</span>);\n  heap_insert(*(_QWORD *)(<span class=\"supfact\">a2</span> + Number), <span class=\"supfact\">v3</span>,\n              *(unsigned int *)(<span class=\"supfact\">a2</span> + Number),\n              *(unsigned int *)(<span class=\"supfact\">a2</span> + Number),\n              *(_QWORD *)(<span class=\"supfact\">a2</span> + Number));\n  return Number L;\n}", "code_t": "bool __cdecl transientrel_receive(TupleTableSlot_0 *<span class=\"supfact\">slot</span>,\n                                  DestReceiver *<span class=\"supfact\">self</span>) {\n  HeapTuple <span class=\"supfact\">tuple</span>;\n  <span class=\"supfact\">tuple</span> = (HeapTuple)ExecMaterializeSlot(<span class=\"supfact\">slot</span>);\n  heap_insert(<span class=\"supfact\">self</span>[Number].rStartup, <span class=\"supfact\">tuple</span>,\n              LODWORD(<span class=\"supfact\">self</span>[Number].rShutdown),\n              HIDWORD(<span class=\"supfact\">self</span>[Number].rShutdown),\n              <span class=\"supfact\">self</span>[Number].rDestroy);\n  return Number;\n}", "var": [{"name": "a1", "type": "TupleTableSlot_0 *", "pred_name": "slot", "ref_name": "slot", "ref_type": "TupleTableSlot_0 *"}, {"name": "a2", "type": "DestReceiver *", "pred_name": "self", "ref_name": "self", "ref_type": "DestReceiver *"}, {"name": "v3", "type": "MemoryContextData *", "pred_name": "oldcxt", "ref_name": "tuple", "ref_type": "HeapTuple"}], "body_in_train": false}, {"repo_owner": "lixuewei", "repo_name": "rt-n56u", "path": "lixuewei/rt-n56u/38349714616a43b8927cd9e1485b4d6547dafaf08db61e8f96818df5fbdd5906", "path_in_repo": "lixuewei/rt-n56u/trunk/user/ntfs-3g/ntfsprogs-2014.2.15/ntfsprogs/ntfscluster", "objdump": "000000000042049b <ntfs_index_walk_down>:\n  42049b:\t55                   \tpush   %rbp\n  42049c:\t48 89 e5             \tmov    %rsp,%rbp\n  42049f:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4204a3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4204a7:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  4204ab:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4204af:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4204b3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4204b7:\t48 89 c7             \tmov    %rax,%rdi\n  4204ba:\te8 36 cc ff ff       \tcallq  41d0f5 <ntfs_ie_get_vcn>\n  4204bf:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4204c3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4204c7:\t8b 40 38             \tmov    0x38(%rax),%eax\n  4204ca:\t85 c0                \ttest   %eax,%eax\n  4204cc:\t74 43                \tje     420511 <ntfs_index_walk_down+0x76>\n  4204ce:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4204d2:\t48 c7 40 40 00 00 00 \tmovq   $0x0,0x40(%rax)\n  4204d9:\t00 \n  4204da:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4204de:\t8b 80 e8 01 00 00    \tmov    0x1e8(%rax),%eax\n  4204e4:\t89 c0                \tmov    %eax,%eax\n  4204e6:\t48 89 c7             \tmov    %rax,%rdi\n  4204e9:\te8 19 8f 00 00       \tcallq  429407 <ntfs_malloc>\n  4204ee:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  4204f2:\t48 89 42 50          \tmov    %rax,0x50(%rdx)\n  4204f6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4204fa:\tc7 80 e0 01 00 00 01 \tmovl   $0x1,0x1e0(%rax)\n  420501:\t00 00 00 \n  420504:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  420508:\tc7 40 38 00 00 00 00 \tmovl   $0x0,0x38(%rax)\n  42050f:\teb 17                \tjmp    420528 <ntfs_index_walk_down+0x8d>\n  420511:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  420515:\t8b 80 e0 01 00 00    \tmov    0x1e0(%rax),%eax\n  42051b:\t8d 50 01             \tlea    0x1(%rax),%edx\n  42051e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  420522:\t89 90 e0 01 00 00    \tmov    %edx,0x1e0(%rax)\n  420528:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  42052c:\t8b 90 e0 01 00 00    \tmov    0x1e0(%rax),%edx\n  420532:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  420536:\t48 63 d2             \tmovslq %edx,%rdx\n  420539:\t48 83 c2 18          \tadd    $0x18,%rdx\n  42053d:\tc7 04 90 00 00 00 00 \tmovl   $0x0,(%rax,%rdx,4)\n  420544:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  420548:\t8b 90 e0 01 00 00    \tmov    0x1e0(%rax),%edx\n  42054e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  420552:\t48 63 d2             \tmovslq %edx,%rdx\n  420555:\t48 8d 4a 1c          \tlea    0x1c(%rdx),%rcx\n  420559:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  42055d:\t48 89 14 c8          \tmov    %rdx,(%rax,%rcx,8)\n  420561:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  420565:\t48 8b 50 50          \tmov    0x50(%rax),%rdx\n  420569:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  42056d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  420571:\t48 89 ce             \tmov    %rcx,%rsi\n  420574:\t48 89 c7             \tmov    %rax,%rdi\n  420577:\te8 57 d6 ff ff       \tcallq  41dbd3 <ntfs_ib_read>\n  42057c:\t85 c0                \ttest   %eax,%eax\n  42057e:\t75 2a                \tjne    4205aa <ntfs_index_walk_down+0x10f>\n  420580:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  420584:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n  420588:\t48 83 c0 18          \tadd    $0x18,%rax\n  42058c:\t48 89 c7             \tmov    %rax,%rdi\n  42058f:\te8 7e cb ff ff       \tcallq  41d112 <ntfs_ie_get_first>\n  420594:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  420598:\t48 89 42 18          \tmov    %rax,0x18(%rdx)\n  42059c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4205a0:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4205a4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4205a8:\teb 08                \tjmp    4205b2 <ntfs_index_walk_down+0x117>\n  4205aa:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  4205b1:\t00 \n  4205b2:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4205b7:\t74 16                \tje     4205cf <ntfs_index_walk_down+0x134>\n  4205b9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4205bd:\t0f b7 40 0c          \tmovzwl 0xc(%rax),%eax\n  4205c1:\t0f b7 c0             \tmovzwl %ax,%eax\n  4205c4:\t83 e0 01             \tand    $0x1,%eax\n  4205c7:\t85 c0                \ttest   %eax,%eax\n  4205c9:\t0f 85 e4 fe ff ff    \tjne    4204b3 <ntfs_index_walk_down+0x18>\n  4205cf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4205d3:\tc9                   \tleaveq \n  4205d4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ntfs_index_walk_down(__int64 <span class=\"supfact\">a1</span>,\n                                        __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  do {\n    <span class=\"supfact\">v3</span> = ntfs_ie_get_vcn(<span class=\"supfact\">a1</span>);\n    if (*(_DWORD *)(<span class=\"supfact\">a2</span> + Number)) {\n      *(_QWORD *)(<span class=\"supfact\">a2</span> + Number) = Number L;\n      *(_QWORD *)(<span class=\"supfact\">a2</span> + Number) =\n          ntfs_malloc(*(unsigned int *)(<span class=\"supfact\">a2</span> + Number));\n      *(_DWORD *)(<span class=\"supfact\">a2</span> + Number) = Number;\n      *(_DWORD *)(<span class=\"supfact\">a2</span> + Number) = Number;\n    } else {\n      ++*(_DWORD *)(<span class=\"supfact\">a2</span> + Number);\n    }\n    *(_DWORD *)(<span class=\"supfact\">a2</span> +\n                Number * (*(int *)(<span class=\"supfact\">a2</span> + Number) + Number L)) =\n        Number;\n    *(_QWORD *)(<span class=\"supfact\">a2</span> +\n                Number * (*(int *)(<span class=\"supfact\">a2</span> + Number) + Number L)) =\n        <span class=\"supfact\">v3</span>;\n    if ((unsigned int)ntfs_ib_read(<span class=\"supfact\">a2</span>, <span class=\"supfact\">v3</span>,\n                                   *(_BYTE **)(<span class=\"supfact\">a2</span> + Number))) {\n      <span class=\"supfact\">a1</span> = Number L;\n    } else {\n      *(_QWORD *)(<span class=\"supfact\">a2</span> + Number) = ntfs_ie_get_first((\n          unsigned int *)(*(_QWORD *)(<span class=\"supfact\">a2</span> + Number) + Number L));\n      <span class=\"supfact\">a1</span> = *(_QWORD *)(<span class=\"supfact\">a2</span> + Number);\n    }\n  } while (<span class=\"supfact\">a1</span> &&\n           (*(_WORD *)(<span class=\"supfact\">a1</span> + Number) & Number) != Number);\n  return <span class=\"supfact\">a1</span>;\n}", "code_t": "INDEX_ENTRY *__cdecl ntfs_index_walk_down(\n    INDEX_ENTRY *<span class=\"supfact\">ie</span>, ntfs_index_context *<span class=\"supfact\">ictx</span>) {\n  s64 <span class=\"supfact\">vcn</span>;\n  do {\n    <span class=\"supfact\">vcn</span> = ntfs_ie_get_vcn(<span class=\"supfact\">ie</span>);\n    if (<span class=\"supfact\">ictx</span>->is_in_root) {\n      <span class=\"supfact\">ictx</span>->ir = Number L;\n      <span class=\"supfact\">ictx</span>->ib =\n          (INDEX_BLOCK *)ntfs_malloc(<span class=\"supfact\">ictx</span>->block_size);\n      <span class=\"supfact\">ictx</span>->pindex = Number;\n      <span class=\"supfact\">ictx</span>->is_in_root = FALSE;\n    } else {\n      ++<span class=\"supfact\">ictx</span>->pindex;\n    }\n    <span class=\"supfact\">ictx</span>->parent_pos[<span class=\"supfact\">ictx</span>->pindex] = Number;\n    <span class=\"supfact\">ictx</span>->parent_vcn[<span class=\"supfact\">ictx</span>->pindex] =\n        <span class=\"supfact\">vcn</span>;\n    if (ntfs_ib_read(<span class=\"supfact\">ictx</span>, <span class=\"supfact\">vcn</span>,\n                     <span class=\"supfact\">ictx</span>->ib)) {\n      <span class=\"supfact\">ie</span> = Number L;\n    } else {\n      <span class=\"supfact\">ictx</span>->entry =\n          ntfs_ie_get_first(&<span class=\"supfact\">ictx</span>->ib->index);\n      <span class=\"supfact\">ie</span> = <span class=\"supfact\">ictx</span>->entry;\n    }\n  } while (<span class=\"supfact\">ie</span> &&\n           (<span class=\"supfact\">ie</span>->ie_flags & Number) != Number);\n  return <span class=\"supfact\">ie</span>;\n}", "var": [{"name": "a1", "type": "SECURITY_API *", "pred_name": "scapi", "ref_name": "ie", "ref_type": "INDEX_ENTRY *"}, {"name": "a2", "type": "INDEX_ENTRY *", "pred_name": "entry", "ref_name": "ictx", "ref_type": "ntfs_index_context *"}, {"name": "v3", "type": "s64", "pred_name": "ret", "ref_name": "vcn", "ref_type": "s64"}], "body_in_train": false}, {"repo_owner": "Benny44", "repo_name": "QPALM", "path": "Benny44/QPALM/70587a48acd7abef90746fde7d5898bbac7dc19d03ed97f93eff64dfc62a53bc", "path_in_repo": "Benny44/QPALM/suitesparse/UMFPACK/Lib/umf_zl_assemble.o", "objdump": "000000000000068d <col_assemble>:\n     68d:\t55                   \tpush   %rbp\n     68e:\t48 89 e5             \tmov    %rsp,%rbp\n     691:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n     695:\t48 89 bd 18 ff ff ff \tmov    %rdi,-0xe8(%rbp)\n     69c:\t48 89 b5 10 ff ff ff \tmov    %rsi,-0xf0(%rbp)\n     6a3:\t48 89 95 08 ff ff ff \tmov    %rdx,-0xf8(%rbp)\n     6aa:\t48 8b 85 10 ff ff ff \tmov    -0xf0(%rbp),%rax\n     6b1:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n     6b8:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     6bc:\t48 8b 85 10 ff ff ff \tmov    -0xf0(%rbp),%rax\n     6c3:\t48 8b 80 b0 00 00 00 \tmov    0xb0(%rax),%rax\n     6ca:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     6ce:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     6d5:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     6dc:\t00 \n     6dd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6e1:\t48 01 d0             \tadd    %rdx,%rax\n     6e4:\t48 8b 00             \tmov    (%rax),%rax\n     6e7:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     6eb:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n     6f0:\t0f 84 47 06 00 00    \tje     d3d <col_assemble+0x6b0>\n     6f6:\t48 8b 85 10 ff ff ff \tmov    -0xf0(%rbp),%rax\n     6fd:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     701:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     705:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n     70c:\t48 8b 00             \tmov    (%rax),%rax\n     70f:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     713:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n     71a:\t48 8b 80 e8 09 00 00 \tmov    0x9e8(%rax),%rax\n     721:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n     725:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n     72c:\t48 8b 80 e0 09 00 00 \tmov    0x9e0(%rax),%rax\n     733:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n     737:\t48 8b 85 10 ff ff ff \tmov    -0xf0(%rbp),%rax\n     73e:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n     745:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n     749:\t48 8b 85 10 ff ff ff \tmov    -0xf0(%rbp),%rax\n     750:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n     757:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n     75b:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n     762:\t48 8b 00             \tmov    (%rax),%rax\n     765:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     769:\t48 8b 85 10 ff ff ff \tmov    -0xf0(%rbp),%rax\n     770:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n     774:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     778:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n     77f:\t48 8b 80 f0 00 00 00 \tmov    0xf0(%rax),%rax\n     786:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n     78a:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n     791:\t48 8b 80 c8 09 00 00 \tmov    0x9c8(%rax),%rax\n     798:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n     79c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     7a0:\t48 c1 e0 04          \tshl    $0x4,%rax\n     7a4:\t48 89 c2             \tmov    %rax,%rdx\n     7a7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     7ab:\t48 01 d0             \tadd    %rdx,%rax\n     7ae:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     7b2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7b6:\t48 89 45 88          \tmov    %rax,-0x78(%rbp)\n     7ba:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7be:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     7c2:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     7c9:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     7d0:\t00 \n     7d1:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     7d5:\t48 01 d0             \tadd    %rdx,%rax\n     7d8:\t48 8b 00             \tmov    (%rax),%rax\n     7db:\t48 c1 e0 04          \tshl    $0x4,%rax\n     7df:\t48 89 c2             \tmov    %rax,%rdx\n     7e2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7e6:\t48 01 d0             \tadd    %rdx,%rax\n     7e9:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n     7ed:\te9 13 05 00 00       \tjmpq   d05 <col_assemble+0x678>\n     7f2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7f6:\t48 8b 00             \tmov    (%rax),%rax\n     7f9:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n     800:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     807:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     80e:\t00 \n     80f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     813:\t48 01 d0             \tadd    %rdx,%rax\n     816:\t48 8b 00             \tmov    (%rax),%rax\n     819:\t48 85 c0             \ttest   %rax,%rax\n     81c:\t0f 84 da 04 00 00    \tje     cfc <col_assemble+0x66f>\n     822:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     826:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     82a:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n     831:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     838:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     83f:\t00 \n     840:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     844:\t48 01 d0             \tadd    %rdx,%rax\n     847:\t48 8b 00             \tmov    (%rax),%rax\n     84a:\t48 c1 e0 04          \tshl    $0x4,%rax\n     84e:\t48 89 c2             \tmov    %rax,%rdx\n     851:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     855:\t48 01 d0             \tadd    %rdx,%rax\n     858:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n     85f:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     866:\t48 89 85 60 ff ff ff \tmov    %rax,-0xa0(%rbp)\n     86d:\t48 83 85 68 ff ff ff \taddq   $0x40,-0x98(%rbp)\n     874:\t40 \n     875:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     87c:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n     883:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n     88a:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     891:\t00 \n     892:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     899:\t48 01 d0             \tadd    %rdx,%rax\n     89c:\t48 8b 00             \tmov    (%rax),%rax\n     89f:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n     8a3:\t0f 84 56 04 00 00    \tje     cff <col_assemble+0x672>\n     8a9:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n     8b0:\t48 8b 00             \tmov    (%rax),%rax\n     8b3:\t48 39 45 98          \tcmp    %rax,-0x68(%rbp)\n     8b7:\t0f 85 1f 04 00 00    \tjne    cdc <col_assemble+0x64f>\n     8bd:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n     8c4:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     8cb:\t00 \n     8cc:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     8d3:\t48 01 d0             \tadd    %rdx,%rax\n     8d6:\t48 c7 00 ff ff ff ff \tmovq   $0xffffffffffffffff,(%rax)\n     8dd:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n     8e4:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     8e8:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n     8ef:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n     8f6:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n     8fa:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n     901:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     908:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     90f:\t00 \n     910:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n     917:\t48 01 d0             \tadd    %rdx,%rax\n     91a:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n     921:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n     928:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n     92f:\t48 01 d0             \tadd    %rdx,%rax\n     932:\t48 83 c0 02          \tadd    $0x2,%rax\n     936:\t48 c1 e0 03          \tshl    $0x3,%rax\n     93a:\t48 83 e8 01          \tsub    $0x1,%rax\n     93e:\t48 83 e0 f0          \tand    $0xfffffffffffffff0,%rax\n     942:\t48 01 85 68 ff ff ff \tadd    %rax,-0x98(%rbp)\n     949:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n     950:\t48 0f af 85 50 ff ff \timul   -0xb0(%rbp),%rax\n     957:\tff \n     958:\t48 c1 e0 04          \tshl    $0x4,%rax\n     95c:\t48 89 c2             \tmov    %rax,%rdx\n     95f:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n     966:\t48 01 d0             \tadd    %rdx,%rax\n     969:\t48 89 85 38 ff ff ff \tmov    %rax,-0xc8(%rbp)\n     970:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n     977:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     97b:\t48 89 85 30 ff ff ff \tmov    %rax,-0xd0(%rbp)\n     982:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     989:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     990:\t00 \n     991:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     995:\t48 01 d0             \tadd    %rdx,%rax\n     998:\t48 8b 00             \tmov    (%rax),%rax\n     99b:\t48 c1 e0 04          \tshl    $0x4,%rax\n     99f:\t48 89 c2             \tmov    %rax,%rdx\n     9a2:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n     9a6:\t48 01 d0             \tadd    %rdx,%rax\n     9a9:\t48 89 85 28 ff ff ff \tmov    %rax,-0xd8(%rbp)\n     9b0:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     9b7:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     9be:\t00 \n     9bf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     9c3:\t48 01 d0             \tadd    %rdx,%rax\n     9c6:\t48 8b 00             \tmov    (%rax),%rax\n     9c9:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n     9d0:\t48 8d 0c d5 00 00 00 \tlea    0x0(,%rdx,8),%rcx\n     9d7:\t00 \n     9d8:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     9dc:\t48 01 ca             \tadd    %rcx,%rdx\n     9df:\t48 2b 85 30 ff ff ff \tsub    -0xd0(%rbp),%rax\n     9e6:\t48 89 02             \tmov    %rax,(%rdx)\n     9e9:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n     9f0:\t48 3b 85 30 ff ff ff \tcmp    -0xd0(%rbp),%rax\n     9f7:\t0f 85 5d 01 00 00    \tjne    b5a <col_assemble+0x4cd>\n     9fd:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     a04:\t00 \n     a05:\te9 3a 01 00 00       \tjmpq   b44 <col_assemble+0x4b7>\n     a0a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a0e:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     a15:\t00 \n     a16:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     a1d:\t48 01 d0             \tadd    %rdx,%rax\n     a20:\t48 8b 00             \tmov    (%rax),%rax\n     a23:\t48 89 85 20 ff ff ff \tmov    %rax,-0xe0(%rbp)\n     a2a:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n     a31:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     a38:\t00 \n     a39:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     a3d:\t48 01 d0             \tadd    %rdx,%rax\n     a40:\t48 8b 10             \tmov    (%rax),%rdx\n     a43:\t48 83 ea 01          \tsub    $0x1,%rdx\n     a47:\t48 89 10             \tmov    %rdx,(%rax)\n     a4a:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n     a51:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     a58:\t00 \n     a59:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     a5d:\t48 01 d0             \tadd    %rdx,%rax\n     a60:\t48 8b 00             \tmov    (%rax),%rax\n     a63:\t48 c1 e0 04          \tshl    $0x4,%rax\n     a67:\t48 89 c2             \tmov    %rax,%rdx\n     a6a:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n     a71:\t48 01 d0             \tadd    %rdx,%rax\n     a74:\tf2 0f 10 08          \tmovsd  (%rax),%xmm1\n     a78:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     a7c:\t48 c1 e0 04          \tshl    $0x4,%rax\n     a80:\t48 89 c2             \tmov    %rax,%rdx\n     a83:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     a8a:\t48 01 d0             \tadd    %rdx,%rax\n     a8d:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n     a91:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n     a98:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     a9f:\t00 \n     aa0:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     aa4:\t48 01 d0             \tadd    %rdx,%rax\n     aa7:\t48 8b 00             \tmov    (%rax),%rax\n     aaa:\t48 c1 e0 04          \tshl    $0x4,%rax\n     aae:\t48 89 c2             \tmov    %rax,%rdx\n     ab1:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n     ab8:\t48 01 d0             \tadd    %rdx,%rax\n     abb:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     abf:\tf2 0f 11 00          \tmovsd  %xmm0,(%rax)\n     ac3:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n     aca:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     ad1:\t00 \n     ad2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     ad6:\t48 01 d0             \tadd    %rdx,%rax\n     ad9:\t48 8b 00             \tmov    (%rax),%rax\n     adc:\t48 c1 e0 04          \tshl    $0x4,%rax\n     ae0:\t48 89 c2             \tmov    %rax,%rdx\n     ae3:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n     aea:\t48 01 d0             \tadd    %rdx,%rax\n     aed:\tf2 0f 10 48 08       \tmovsd  0x8(%rax),%xmm1\n     af2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     af6:\t48 c1 e0 04          \tshl    $0x4,%rax\n     afa:\t48 89 c2             \tmov    %rax,%rdx\n     afd:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     b04:\t48 01 d0             \tadd    %rdx,%rax\n     b07:\tf2 0f 10 40 08       \tmovsd  0x8(%rax),%xmm0\n     b0c:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n     b13:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     b1a:\t00 \n     b1b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     b1f:\t48 01 d0             \tadd    %rdx,%rax\n     b22:\t48 8b 00             \tmov    (%rax),%rax\n     b25:\t48 c1 e0 04          \tshl    $0x4,%rax\n     b29:\t48 89 c2             \tmov    %rax,%rdx\n     b2c:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n     b33:\t48 01 d0             \tadd    %rdx,%rax\n     b36:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     b3a:\tf2 0f 11 40 08       \tmovsd  %xmm0,0x8(%rax)\n     b3f:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n     b44:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     b48:\t48 3b 85 50 ff ff ff \tcmp    -0xb0(%rbp),%rax\n     b4f:\t0f 8c b5 fe ff ff    \tjl     a0a <col_assemble+0x37d>\n     b55:\te9 66 01 00 00       \tjmpq   cc0 <col_assemble+0x633>\n     b5a:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     b61:\t00 \n     b62:\te9 48 01 00 00       \tjmpq   caf <col_assemble+0x622>\n     b67:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     b6b:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     b72:\t00 \n     b73:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     b7a:\t48 01 d0             \tadd    %rdx,%rax\n     b7d:\t48 8b 00             \tmov    (%rax),%rax\n     b80:\t48 89 85 20 ff ff ff \tmov    %rax,-0xe0(%rbp)\n     b87:\t48 83 bd 20 ff ff ff \tcmpq   $0x0,-0xe0(%rbp)\n     b8e:\t00 \n     b8f:\t0f 88 15 01 00 00    \tjs     caa <col_assemble+0x61d>\n     b95:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n     b9c:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     ba3:\t00 \n     ba4:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     ba8:\t48 01 d0             \tadd    %rdx,%rax\n     bab:\t48 8b 10             \tmov    (%rax),%rdx\n     bae:\t48 83 ea 01          \tsub    $0x1,%rdx\n     bb2:\t48 89 10             \tmov    %rdx,(%rax)\n     bb5:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n     bbc:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     bc3:\t00 \n     bc4:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     bc8:\t48 01 d0             \tadd    %rdx,%rax\n     bcb:\t48 8b 00             \tmov    (%rax),%rax\n     bce:\t48 c1 e0 04          \tshl    $0x4,%rax\n     bd2:\t48 89 c2             \tmov    %rax,%rdx\n     bd5:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n     bdc:\t48 01 d0             \tadd    %rdx,%rax\n     bdf:\tf2 0f 10 08          \tmovsd  (%rax),%xmm1\n     be3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     be7:\t48 c1 e0 04          \tshl    $0x4,%rax\n     beb:\t48 89 c2             \tmov    %rax,%rdx\n     bee:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     bf5:\t48 01 d0             \tadd    %rdx,%rax\n     bf8:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n     bfc:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n     c03:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     c0a:\t00 \n     c0b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     c0f:\t48 01 d0             \tadd    %rdx,%rax\n     c12:\t48 8b 00             \tmov    (%rax),%rax\n     c15:\t48 c1 e0 04          \tshl    $0x4,%rax\n     c19:\t48 89 c2             \tmov    %rax,%rdx\n     c1c:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n     c23:\t48 01 d0             \tadd    %rdx,%rax\n     c26:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     c2a:\tf2 0f 11 00          \tmovsd  %xmm0,(%rax)\n     c2e:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n     c35:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     c3c:\t00 \n     c3d:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     c41:\t48 01 d0             \tadd    %rdx,%rax\n     c44:\t48 8b 00             \tmov    (%rax),%rax\n     c47:\t48 c1 e0 04          \tshl    $0x4,%rax\n     c4b:\t48 89 c2             \tmov    %rax,%rdx\n     c4e:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n     c55:\t48 01 d0             \tadd    %rdx,%rax\n     c58:\tf2 0f 10 48 08       \tmovsd  0x8(%rax),%xmm1\n     c5d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     c61:\t48 c1 e0 04          \tshl    $0x4,%rax\n     c65:\t48 89 c2             \tmov    %rax,%rdx\n     c68:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     c6f:\t48 01 d0             \tadd    %rdx,%rax\n     c72:\tf2 0f 10 40 08       \tmovsd  0x8(%rax),%xmm0\n     c77:\t48 8b 85 20 ff ff ff \tmov    -0xe0(%rbp),%rax\n     c7e:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     c85:\t00 \n     c86:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     c8a:\t48 01 d0             \tadd    %rdx,%rax\n     c8d:\t48 8b 00             \tmov    (%rax),%rax\n     c90:\t48 c1 e0 04          \tshl    $0x4,%rax\n     c94:\t48 89 c2             \tmov    %rax,%rdx\n     c97:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n     c9e:\t48 01 d0             \tadd    %rdx,%rax\n     ca1:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     ca5:\tf2 0f 11 40 08       \tmovsd  %xmm0,0x8(%rax)\n     caa:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n     caf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     cb3:\t48 3b 85 50 ff ff ff \tcmp    -0xb0(%rbp),%rax\n     cba:\t0f 8c a7 fe ff ff    \tjl     b67 <col_assemble+0x4da>\n     cc0:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n     cc7:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     ccb:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n     ccf:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n     cd6:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n     cda:\teb 24                \tjmp    d00 <col_assemble+0x673>\n     cdc:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n     ce0:\t48 8d 41 10          \tlea    0x10(%rcx),%rax\n     ce4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     ce8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     cec:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     cf0:\t48 8b 00             \tmov    (%rax),%rax\n     cf3:\t48 89 01             \tmov    %rax,(%rcx)\n     cf6:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n     cfa:\teb 04                \tjmp    d00 <col_assemble+0x673>\n     cfc:\t90                   \tnop\n     cfd:\teb 01                \tjmp    d00 <col_assemble+0x673>\n     cff:\t90                   \tnop\n     d00:\t48 83 45 f0 10       \taddq   $0x10,-0x10(%rbp)\n     d05:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d09:\t48 3b 45 80          \tcmp    -0x80(%rbp),%rax\n     d0d:\t0f 82 df fa ff ff    \tjb     7f2 <col_assemble+0x165>\n     d13:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d17:\t48 2b 45 88          \tsub    -0x78(%rbp),%rax\n     d1b:\t48 89 c2             \tmov    %rax,%rdx\n     d1e:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n     d25:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n     d2c:\t00 \n     d2d:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     d31:\t48 01 c8             \tadd    %rcx,%rax\n     d34:\t48 c1 fa 04          \tsar    $0x4,%rdx\n     d38:\t48 89 10             \tmov    %rdx,(%rax)\n     d3b:\teb 01                \tjmp    d3e <col_assemble+0x6b1>\n     d3d:\t90                   \tnop\n     d3e:\tc9                   \tleaveq \n     d3f:\tc3                   \tretq   ", "code_s": "__int64 *__fastcall col_assemble(__int64 <span class=\"supfact\">a1</span>,\n                                 _QWORD *<span class=\"supfact\">a2</span>,\n                                 __int64 *<span class=\"supfact\">a3</span>) {\n  __int64 *<span class=\"supfact\">result</span>;\n  _QWORD *<span class=\"supfact\">v4</span>;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  _QWORD *<span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  _QWORD *<span class=\"supfact\">v14</span>;\n  _QWORD *<span class=\"supfact\">v15</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  _QWORD *<span class=\"supfact\">v17</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  __int64 <span class=\"supfact\">v19</span>;\n  __int64 <span class=\"supfact\">v20</span>;\n  __int64 <span class=\"supfact\">v21</span>;\n  __int64 <span class=\"supfact\">v22</span>;\n  __int64 <span class=\"supfact\">v23</span>;\n  __int64 <span class=\"supfact\">v24</span>;\n  __int64 <span class=\"supfact\">v25</span>;\n  __int64 *<span class=\"supfact\">v26</span>;\n  __int64 <span class=\"supfact\">v27</span>;\n  _QWORD *<span class=\"supfact\">v28</span>;\n  _QWORD *<span class=\"supfact\">v29</span>;\n  __int64 i;\n  __int64 j;\n  <span class=\"supfact\">v27</span> = <span class=\"supfact\">a2</span>[Number];\n  <span class=\"supfact\">result</span> =\n      *(__int64 **)(Number * <span class=\"supfact\">a1</span> + <span class=\"supfact\">a2</span>[Number]);\n  <span class=\"supfact\">v26</span> = <span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">result</span>) {\n    <span class=\"supfact\">v23</span> = <span class=\"supfact\">a3</span>[Number];\n    <span class=\"supfact\">v22</span> = <span class=\"supfact\">a3</span>[Number];\n    <span class=\"supfact\">v21</span> = <span class=\"supfact\">a2</span>[Number];\n    <span class=\"supfact\">v20</span> = <span class=\"supfact\">a2</span>[Number];\n    <span class=\"supfact\">v24</span> = *<span class=\"supfact\">a3</span>;\n    <span class=\"supfact\">v25</span> = <span class=\"supfact\">a2</span>[Number];\n    <span class=\"supfact\">v19</span> = <span class=\"supfact\">a3</span>[Number];\n    <span class=\"supfact\">v18</span> = <span class=\"supfact\">a3</span>[Number];\n    <span class=\"supfact\">v29</span> = (_QWORD *)(Number L * (_QWORD)<span class=\"supfact\">result</span> +\n                                     <span class=\"supfact\">v25</span>);\n    <span class=\"supfact\">v28</span> = <span class=\"supfact\">v29</span>;\n    <span class=\"supfact\">v17</span> =\n        &<span class=\"supfact\">v29</span>[Number * *(_QWORD *)(Number * <span class=\"supfact\">a1</span> +\n                                                  <span class=\"supfact\">v20</span>)];\n    while (<span class=\"supfact\">v29</span> < <span class=\"supfact\">v17</span>) {\n      if (*(_QWORD *)(Number L * *<span class=\"supfact\">v29</span> + <span class=\"supfact\">v24</span>)) {\n        <span class=\"supfact\">v16</span> = <span class=\"supfact\">v29</span>[Number];\n        <span class=\"supfact\">v15</span> =\n            (_QWORD *)(Number L * *(_QWORD *)(Number L * *<span class=\"supfact\">v29</span> +\n                                              <span class=\"supfact\">v24</span>) +\n                       <span class=\"supfact\">v25</span>);\n        <span class=\"supfact\">v14</span> = <span class=\"supfact\">v15</span> + Number;\n        if (<span class=\"supfact\">v15</span>[<span class=\"supfact\">v16</span> + Number] != Number) {\n          if (<span class=\"supfact\">v19</span> == *<span class=\"supfact\">v15</span>) {\n            <span class=\"supfact\">v14</span>[<span class=\"supfact\">v16</span>] = Number;\n            <span class=\"supfact\">v13</span> = <span class=\"supfact\">v15</span>[Number];\n            <span class=\"supfact\">v12</span> = <span class=\"supfact\">v15</span>[Number];\n            <span class=\"supfact\">v11</span> = &<span class=\"supfact\">v14</span>[<span class=\"supfact\">v12</span>];\n            <span class=\"supfact\">v10</span> =\n                (unsigned __int64)&<span class=\"supfact\">v15</span>[Number *\n                                                           <span class=\"supfact\">v13</span> *\n                                                           <span class=\"supfact\">v16</span> +\n                                                       Number] +\n                ((Number *\n                      (<span class=\"supfact\">v12</span> + <span class=\"supfact\">v13</span> + Number) -\n                  Number) &\n                 Number);\n            <span class=\"supfact\">v9</span> = <span class=\"supfact\">v15</span>[Number];\n            <span class=\"supfact\">v8</span> =\n                Number L * *(_QWORD *)(Number * <span class=\"supfact\">a1</span> +\n                                       <span class=\"supfact\">v23</span>) +\n                <span class=\"supfact\">v18</span>;\n            *(_QWORD *)(Number * <span class=\"supfact\">a1</span> + <span class=\"supfact\">v27</span>) -=\n                <span class=\"supfact\">v9</span>;\n            if (<span class=\"supfact\">v13</span> == <span class=\"supfact\">v9</span>) {\n              for (i = Number L; i < <span class=\"supfact\">v13</span>; ++i) {\n                v6 = <span class=\"supfact\">v11</span>[i];\n                --*(_QWORD *)(Number * v6 + <span class=\"supfact\">v21</span>);\n                *(double *)(Number L *\n                                *(_QWORD *)(Number * v6 + <span class=\"supfact\">v22</span>) +\n                            <span class=\"supfact\">v8</span>) =\n                    *(double *)(Number * i + <span class=\"supfact\">v10</span>) +\n                    *(double *)(Number L * *(_QWORD *)(Number * v6 +\n                                                       <span class=\"supfact\">v22</span>) +\n                                <span class=\"supfact\">v8</span>);\n                *(double *)(Number L *\n                                *(_QWORD *)(Number * v6 + <span class=\"supfact\">v22</span>) +\n                            <span class=\"supfact\">v8</span> + Number) =\n                    *(double *)(Number * i + <span class=\"supfact\">v10</span> + Number) +\n                    *(double *)(Number L * *(_QWORD *)(Number * v6 +\n                                                       <span class=\"supfact\">v22</span>) +\n                                <span class=\"supfact\">v8</span> + Number);\n              }\n            } else {\n              for (j = Number L; j < <span class=\"supfact\">v13</span>; ++j) {\n                v7 = <span class=\"supfact\">v11</span>[j];\n                if (v7 >= Number) {\n                  --*(_QWORD *)(Number * v7 + <span class=\"supfact\">v21</span>);\n                  *(double *)(Number L * *(_QWORD *)(Number * v7 +\n                                                     <span class=\"supfact\">v22</span>) +\n                              <span class=\"supfact\">v8</span>) =\n                      *(double *)(Number * j + <span class=\"supfact\">v10</span>) +\n                      *(double *)(Number L * *(_QWORD *)(Number * v7 +\n                                                         <span class=\"supfact\">v22</span>) +\n                                  <span class=\"supfact\">v8</span>);\n                  *(double *)(Number L * *(_QWORD *)(Number * v7 +\n                                                     <span class=\"supfact\">v22</span>) +\n                              <span class=\"supfact\">v8</span> + Number) =\n                      *(double *)(Number * j + <span class=\"supfact\">v10</span> + Number) +\n                      *(double *)(Number L * *(_QWORD *)(Number * v7 +\n                                                         <span class=\"supfact\">v22</span>) +\n                                  <span class=\"supfact\">v8</span> + Number);\n                }\n              }\n            }\n            --<span class=\"supfact\">v15</span>[Number];\n          } else {\n            <span class=\"supfact\">v4</span> = <span class=\"supfact\">v28</span>;\n            <span class=\"supfact\">v28</span> += Number;\n            v5 = <span class=\"supfact\">v29</span>[Number];\n            *<span class=\"supfact\">v4</span> = *<span class=\"supfact\">v29</span>;\n            <span class=\"supfact\">v4</span>[Number] = v5;\n          }\n        }\n      }\n      <span class=\"supfact\">v29</span> += Number;\n    }\n    <span class=\"supfact\">result</span> =\n        (__int64 *)(Number * <span class=\"supfact\">a1</span> + <span class=\"supfact\">v20</span>);\n    *<span class=\"supfact\">result</span> =\n        ((__int64)<span class=\"supfact\">v28</span> - <span class=\"supfact\">v25</span> +\n         Number * (_QWORD)<span class=\"supfact\">v26</span>) >>\n        Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl col_assemble(__int64 <span class=\"supfact\">col</span>,\n                          NumericType *<span class=\"supfact\">Numeric</span>,\n                          WorkType *<span class=\"supfact\">Work</span>) {\n  Tuple *<span class=\"supfact\">v3</span>;\n  __int64 v4;\n  __int64 rowa;\n  __int64 row;\n  DoubleComplex *<span class=\"supfact\">Fcol</span>;\n  __int64 <span class=\"supfact\">nrowsleft</span>;\n  DoubleComplex *<span class=\"supfact\">S</span>;\n  __int64 *<span class=\"supfact\">Rows</span>;\n  __int64 <span class=\"supfact\">ncols</span>;\n  __int64 <span class=\"supfact\">nrows</span>;\n  __int64 *<span class=\"supfact\">Cols</span>;\n  Element *<span class=\"supfact\">ep</span>;\n  __int64 <span class=\"supfact\">f</span>;\n  Tuple *<span class=\"supfact\">tpend</span>;\n  DoubleComplex *<span class=\"supfact\">Fcblock</span>;\n  __int64 <span class=\"supfact\">cdeg0</span>;\n  __int64 *<span class=\"supfact\">Col_tlen</span>;\n  __int64 *<span class=\"supfact\">Row_degree</span>;\n  __int64 *<span class=\"supfact\">Frpos</span>;\n  __int64 *<span class=\"supfact\">Fcpos</span>;\n  __int64 *<span class=\"supfact\">E</span>;\n  Unit *<span class=\"supfact\">Memory</span>;\n  __int64 <span class=\"supfact\">tpi</span>;\n  __int64 *<span class=\"supfact\">Col_degree</span>;\n  Tuple *<span class=\"supfact\">tp2</span>;\n  Tuple *<span class=\"supfact\">tp</span>;\n  __int64 i;\n  __int64 ia;\n  <span class=\"supfact\">Col_degree</span> = <span class=\"supfact\">Numeric</span>->Cperm;\n  <span class=\"supfact\">tpi</span> = <span class=\"supfact\">Numeric</span>->Lip[<span class=\"supfact\">col</span>];\n  if (<span class=\"supfact\">tpi</span>) {\n    <span class=\"supfact\">Fcpos</span> = <span class=\"supfact\">Work</span>-><span class=\"supfact\">Fcpos</span>;\n    <span class=\"supfact\">Frpos</span> = <span class=\"supfact\">Work</span>-><span class=\"supfact\">Frpos</span>;\n    <span class=\"supfact\">Row_degree</span> = <span class=\"supfact\">Numeric</span>->Rperm;\n    <span class=\"supfact\">Col_tlen</span> = <span class=\"supfact\">Numeric</span>->Lilen;\n    <span class=\"supfact\">E</span> = <span class=\"supfact\">Work</span>-><span class=\"supfact\">E</span>;\n    <span class=\"supfact\">Memory</span> = <span class=\"supfact\">Numeric</span>-><span class=\"supfact\">Memory</span>;\n    <span class=\"supfact\">cdeg0</span> = <span class=\"supfact\">Work</span>-><span class=\"supfact\">cdeg0</span>;\n    <span class=\"supfact\">Fcblock</span> = <span class=\"supfact\">Work</span>-><span class=\"supfact\">Fcblock</span>;\n    <span class=\"supfact\">tp</span> = (Tuple *)&<span class=\"supfact\">Memory</span>[<span class=\"supfact\">tpi</span>];\n    <span class=\"supfact\">tp2</span> = <span class=\"supfact\">tp</span>;\n    <span class=\"supfact\">tpend</span> =\n        &<span class=\"supfact\">tp</span>[<span class=\"supfact\">Col_tlen</span>[<span class=\"supfact\">col</span>]];\n    while (<span class=\"supfact\">tp</span> < <span class=\"supfact\">tpend</span>) {\n      if (<span class=\"supfact\">E</span>[<span class=\"supfact\">tp</span>->e]) {\n        <span class=\"supfact\">f</span> = <span class=\"supfact\">tp</span>-><span class=\"supfact\">f</span>;\n        <span class=\"supfact\">ep</span> = (Element *)&<span class=\"supfact\">Memory</span>\n            [<span class=\"supfact\">E</span>[<span class=\"supfact\">tp</span>->e]];\n        <span class=\"supfact\">Cols</span> = &<span class=\"supfact\">ep</span>[Number].rdeg;\n        if (*(&<span class=\"supfact\">ep</span>[Number].rdeg + <span class=\"supfact\">f</span>) != Number) {\n          if (<span class=\"supfact\">cdeg0</span> == <span class=\"supfact\">ep</span>->cdeg) {\n            <span class=\"supfact\">Cols</span>[<span class=\"supfact\">f</span>] = Number;\n            <span class=\"supfact\">nrows</span> = <span class=\"supfact\">ep</span>-><span class=\"supfact\">nrows</span>;\n            <span class=\"supfact\">ncols</span> = <span class=\"supfact\">ep</span>-><span class=\"supfact\">ncols</span>;\n            <span class=\"supfact\">Rows</span> = &<span class=\"supfact\">Cols</span>[<span class=\"supfact\">ncols</span>];\n            <span class=\"supfact\">S</span> =\n                (DoubleComplex *)((char *)&<span class=\"supfact\">ep</span>[Number].rdeg +\n                                  Number * <span class=\"supfact\">nrows</span> *\n                                      <span class=\"supfact\">f</span> +\n                                  ((Number * (<span class=\"supfact\">ncols</span> +\n                                              <span class=\"supfact\">nrows</span> + Number) -\n                                    Number) &\n                                   Number));\n            <span class=\"supfact\">nrowsleft</span> =\n                <span class=\"supfact\">ep</span>-><span class=\"supfact\">nrowsleft</span>;\n            <span class=\"supfact\">Fcol</span> =\n                &<span class=\"supfact\">Fcblock</span>\n                    [<span class=\"supfact\">Fcpos</span>[<span class=\"supfact\">col</span>]];\n            <span class=\"supfact\">Col_degree</span>[<span class=\"supfact\">col</span>] -=\n                <span class=\"supfact\">nrowsleft</span>;\n            if (<span class=\"supfact\">nrows</span> == <span class=\"supfact\">nrowsleft</span>) {\n              for (i = Number L; i < <span class=\"supfact\">nrows</span>; ++i) {\n                rowa = <span class=\"supfact\">Rows</span>[i];\n                --<span class=\"supfact\">Row_degree</span>[rowa];\n                <span class=\"supfact\">Fcol</span>[<span class=\"supfact\">Frpos</span>[rowa]]\n                    .component[Number] =\n                    <span class=\"supfact\">S</span>[i].component[Number] +\n                    <span class=\"supfact\">Fcol</span>[<span class=\"supfact\">Frpos</span>[rowa]]\n                        .component[Number];\n                <span class=\"supfact\">Fcol</span>[<span class=\"supfact\">Frpos</span>[rowa]]\n                    .component[Number] =\n                    <span class=\"supfact\">S</span>[i].component[Number] +\n                    <span class=\"supfact\">Fcol</span>[<span class=\"supfact\">Frpos</span>[rowa]]\n                        .component[Number];\n              }\n            } else {\n              for (ia = Number L; ia < <span class=\"supfact\">nrows</span>; ++ia) {\n                row = <span class=\"supfact\">Rows</span>[ia];\n                if (row >= Number) {\n                  --<span class=\"supfact\">Row_degree</span>[row];\n                  <span class=\"supfact\">Fcol</span>[<span class=\"supfact\">Frpos</span>[row]]\n                      .component[Number] =\n                      <span class=\"supfact\">S</span>[ia].component[Number] +\n                      <span class=\"supfact\">Fcol</span>[<span class=\"supfact\">Frpos</span>[row]]\n                          .component[Number];\n                  <span class=\"supfact\">Fcol</span>[<span class=\"supfact\">Frpos</span>[row]]\n                      .component[Number] =\n                      <span class=\"supfact\">S</span>[ia].component[Number] +\n                      <span class=\"supfact\">Fcol</span>[<span class=\"supfact\">Frpos</span>[row]]\n                          .component[Number];\n                }\n              }\n            }\n            --<span class=\"supfact\">ep</span>->ncolsleft;\n          } else {\n            <span class=\"supfact\">v3</span> = <span class=\"supfact\">tp2</span>++;\n            v4 = <span class=\"supfact\">tp</span>-><span class=\"supfact\">f</span>;\n            <span class=\"supfact\">v3</span>->e = <span class=\"supfact\">tp</span>->e;\n            <span class=\"supfact\">v3</span>-><span class=\"supfact\">f</span> = v4;\n          }\n        }\n      }\n      ++<span class=\"supfact\">tp</span>;\n    }\n    <span class=\"supfact\">Col_tlen</span>[<span class=\"supfact\">col</span>] =\n        ((char *)<span class=\"supfact\">tp2</span> -\n         (char *)&<span class=\"supfact\">Memory</span>[<span class=\"supfact\">tpi</span>]) >>\n        Number;\n  }\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "col", "ref_name": "col", "ref_type": "__int64"}, {"name": "a2", "type": "NumericType *", "pred_name": "Numeric", "ref_name": "Numeric", "ref_type": "NumericType *"}, {"name": "a3", "type": "WorkType *", "pred_name": "Work", "ref_name": "Work", "ref_type": "WorkType *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v4", "type": "Tuple *", "pred_name": "v3", "ref_name": "v3", "ref_type": "Tuple *"}, {"name": "v8", "type": "__int64", "pred_name": "ncols", "ref_name": "Fcol", "ref_type": "DoubleComplex *"}, {"name": "v9", "type": "__int64", "pred_name": "nrows", "ref_name": "nrowsleft", "ref_type": "__int64"}, {"name": "v10", "type": "__int64", "pred_name": "ncols", "ref_name": "S", "ref_type": "DoubleComplex *"}, {"name": "v11", "type": "__int64", "pred_name": "Rows", "ref_name": "Rows", "ref_type": "__int64 *"}, {"name": "v12", "type": "__int64", "pred_name": "ncols", "ref_name": "ncols", "ref_type": "__int64"}, {"name": "v13", "type": "__int64", "pred_name": "nrows", "ref_name": "nrows", "ref_type": "__int64"}, {"name": "v14", "type": "__int64", "pred_name": "ncols", "ref_name": "Cols", "ref_type": "__int64 *"}, {"name": "v15", "type": "Element *", "pred_name": "ep", "ref_name": "ep", "ref_type": "Element *"}, {"name": "v16", "type": "__int64", "pred_name": "f", "ref_name": "f", "ref_type": "__int64"}, {"name": "v17", "type": "Tuple *", "pred_name": "tpend", "ref_name": "tpend", "ref_type": "Tuple *"}, {"name": "v18", "type": "DoubleComplex *", "pred_name": "Fcblock", "ref_name": "Fcblock", "ref_type": "DoubleComplex *"}, {"name": "v19", "type": "__int64", "pred_name": "cdeg0", "ref_name": "cdeg0", "ref_type": "__int64"}, {"name": "v20", "type": "__int64", "pred_name": "Col_tlen", "ref_name": "Col_tlen", "ref_type": "__int64 *"}, {"name": "v21", "type": "__int64 *", "pred_name": "Row_degree", "ref_name": "Row_degree", "ref_type": "__int64 *"}, {"name": "v22", "type": "__int64 *", "pred_name": "Frpos", "ref_name": "Frpos", "ref_type": "__int64 *"}, {"name": "v23", "type": "__int64 *", "pred_name": "Fcpos", "ref_name": "Fcpos", "ref_type": "__int64 *"}, {"name": "v24", "type": "__int64", "pred_name": "fnc_curr", "ref_name": "E", "ref_type": "__int64 *"}, {"name": "v25", "type": "__int64", "pred_name": "fnr_curr", "ref_name": "Memory", "ref_type": "Unit *"}, {"name": "v26", "type": "__int64", "pred_name": "c1", "ref_name": "tpi", "ref_type": "__int64"}, {"name": "v27", "type": "__int64", "pred_name": "c2", "ref_name": "Col_degree", "ref_type": "__int64 *"}, {"name": "v28", "type": "__int64", "pred_name": "c1", "ref_name": "tp2", "ref_type": "Tuple *"}, {"name": "v29", "type": "__int64", "pred_name": "nb", "ref_name": "tp", "ref_type": "Tuple *"}], "body_in_train": false}, {"repo_owner": "tanersener", "repo_name": "mobile-ffmpeg", "path": "tanersener/mobile-ffmpeg/be83c3305e02d38d4c8d223cdfdfc0997fc41efac07a0043ea5180b4bcfc97c8", "path_in_repo": "tanersener/mobile-ffmpeg/src/freetype/src/type1/type1.o", "objdump": "00000000000058c6 <parse_encoding>:\n    58c6:\t55                   \tpush   %rbp\n    58c7:\t48 89 e5             \tmov    %rsp,%rbp\n    58ca:\t48 83 ec 70          \tsub    $0x70,%rsp\n    58ce:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    58d2:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n    58d6:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    58da:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    58de:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    58e2:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    58e6:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    58ea:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    58ee:\t48 8b 80 10 03 00 00 \tmov    0x310(%rax),%rax\n    58f5:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    58f9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    58fd:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n    5901:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5905:\t48 89 c7             \tmov    %rax,%rdi\n    5908:\tff d2                \tcallq  *%rdx\n    590a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    590e:\t48 8b 00             \tmov    (%rax),%rax\n    5911:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    5915:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5919:\t48 3b 45 d0          \tcmp    -0x30(%rbp),%rax\n    591d:\t72 10                \tjb     592f <parse_encoding+0x69>\n    591f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5923:\tc7 40 18 03 00 00 00 \tmovl   $0x3,0x18(%rax)\n    592a:\te9 5d 06 00 00       \tjmpq   5f8c <parse_encoding+0x6c6>\n    592f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5933:\t0f b6 00             \tmovzbl (%rax),%eax\n    5936:\t0f b6 c0             \tmovzbl %al,%eax\n    5939:\t83 e8 30             \tsub    $0x30,%eax\n    593c:\t83 f8 09             \tcmp    $0x9,%eax\n    593f:\t76 0f                \tjbe    5950 <parse_encoding+0x8a>\n    5941:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5945:\t0f b6 00             \tmovzbl (%rax),%eax\n    5948:\t3c 5b                \tcmp    $0x5b,%al\n    594a:\t0f 85 77 05 00 00    \tjne    5ec7 <parse_encoding+0x601>\n    5950:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    5954:\t48 05 28 02 00 00    \tadd    $0x228,%rax\n    595a:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    595e:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    5962:\t48 05 c8 00 00 00    \tadd    $0xc8,%rax\n    5968:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    596c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5970:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    5974:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    5978:\tc6 45 eb 00          \tmovb   $0x0,-0x15(%rbp)\n    597c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5980:\t0f b6 00             \tmovzbl (%rax),%eax\n    5983:\t3c 5b                \tcmp    $0x5b,%al\n    5985:\t75 1f                \tjne    59a6 <parse_encoding+0xe0>\n    5987:\tc7 45 f4 00 01 00 00 \tmovl   $0x100,-0xc(%rbp)\n    598e:\tc6 45 eb 01          \tmovb   $0x1,-0x15(%rbp)\n    5992:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5996:\t48 8b 00             \tmov    (%rax),%rax\n    5999:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    599d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    59a1:\t48 89 10             \tmov    %rdx,(%rax)\n    59a4:\teb 14                \tjmp    59ba <parse_encoding+0xf4>\n    59a6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    59aa:\t48 8b 50 48          \tmov    0x48(%rax),%rdx\n    59ae:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    59b2:\t48 89 c7             \tmov    %rax,%rdi\n    59b5:\tff d2                \tcallq  *%rdx\n    59b7:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    59ba:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    59bd:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    59c0:\t81 7d f4 00 01 00 00 \tcmpl   $0x100,-0xc(%rbp)\n    59c7:\t7e 07                \tjle    59d0 <parse_encoding+0x10a>\n    59c9:\tc7 45 f0 00 01 00 00 \tmovl   $0x100,-0x10(%rbp)\n    59d0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    59d4:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n    59d8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    59dc:\t48 89 c7             \tmov    %rax,%rdi\n    59df:\tff d2                \tcallq  *%rdx\n    59e1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    59e5:\t48 8b 00             \tmov    (%rax),%rax\n    59e8:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n    59ec:\t0f 86 8d 05 00 00    \tjbe    5f7f <parse_encoding+0x6b9>\n    59f2:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    59f6:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    59fa:\t48 85 c0             \ttest   %rax,%rax\n    59fd:\t74 64                \tje     5a63 <parse_encoding+0x19d>\n    59ff:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    5a03:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    5a07:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    5a0b:\t48 89 d6             \tmov    %rdx,%rsi\n    5a0e:\t48 89 c7             \tmov    %rax,%rdi\n    5a11:\te8 00 00 00 00       \tcallq  5a16 <parse_encoding+0x150>\n    5a16:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    5a1a:\t48 c7 40 10 00 00 00 \tmovq   $0x0,0x10(%rax)\n    5a21:\t00 \n    5a22:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    5a26:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    5a2a:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    5a2e:\t48 89 d6             \tmov    %rdx,%rsi\n    5a31:\t48 89 c7             \tmov    %rax,%rdi\n    5a34:\te8 00 00 00 00       \tcallq  5a39 <parse_encoding+0x173>\n    5a39:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    5a3d:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n    5a44:\t00 \n    5a45:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5a49:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n    5a4d:\t48 85 c0             \ttest   %rax,%rax\n    5a50:\t74 11                \tje     5a63 <parse_encoding+0x19d>\n    5a52:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5a56:\t48 8b 50 58          \tmov    0x58(%rax),%rdx\n    5a5a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5a5e:\t48 89 c7             \tmov    %rax,%rdi\n    5a61:\tff d2                \tcallq  *%rdx\n    5a63:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    5a67:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n    5a6a:\t89 10                \tmov    %edx,(%rax)\n    5a6c:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    5a70:\t8b 10                \tmov    (%rax),%edx\n    5a72:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    5a76:\t89 90 c0 00 00 00    \tmov    %edx,0xc0(%rax)\n    5a7c:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    5a7f:\t48 63 d0             \tmovslq %eax,%rdx\n    5a82:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    5a86:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    5a8a:\t49 89 c9             \tmov    %rcx,%r9\n    5a8d:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    5a93:\t48 89 d1             \tmov    %rdx,%rcx\n    5a96:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5a9b:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    5aa0:\t48 89 c7             \tmov    %rax,%rdi\n    5aa3:\te8 00 00 00 00       \tcallq  5aa8 <parse_encoding+0x1e2>\n    5aa8:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    5aac:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n    5ab0:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    5ab3:\t85 c0                \ttest   %eax,%eax\n    5ab5:\t75 62                \tjne    5b19 <parse_encoding+0x253>\n    5ab7:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    5aba:\t48 63 d0             \tmovslq %eax,%rdx\n    5abd:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    5ac1:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    5ac5:\t49 89 c9             \tmov    %rcx,%r9\n    5ac8:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    5ace:\t48 89 d1             \tmov    %rdx,%rcx\n    5ad1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5ad6:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    5adb:\t48 89 c7             \tmov    %rax,%rdi\n    5ade:\te8 00 00 00 00       \tcallq  5ae3 <parse_encoding+0x21d>\n    5ae3:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    5ae7:\t48 89 42 18          \tmov    %rax,0x18(%rdx)\n    5aeb:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    5aee:\t85 c0                \ttest   %eax,%eax\n    5af0:\t75 27                \tjne    5b19 <parse_encoding+0x253>\n    5af2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    5af6:\t48 8b 00             \tmov    (%rax),%rax\n    5af9:\t4c 8b 00             \tmov    (%rax),%r8\n    5afc:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n    5b00:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n    5b03:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5b07:\t89 ce                \tmov    %ecx,%esi\n    5b09:\t48 89 c7             \tmov    %rax,%rdi\n    5b0c:\t41 ff d0             \tcallq  *%r8\n    5b0f:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n    5b12:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    5b15:\t85 c0                \ttest   %eax,%eax\n    5b17:\t74 0f                \tje     5b28 <parse_encoding+0x262>\n    5b19:\t8b 55 a8             \tmov    -0x58(%rbp),%edx\n    5b1c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5b20:\t89 50 18             \tmov    %edx,0x18(%rax)\n    5b23:\te9 64 04 00 00       \tjmpq   5f8c <parse_encoding+0x6c6>\n    5b28:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    5b2f:\teb 23                \tjmp    5b54 <parse_encoding+0x28e>\n    5b31:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5b35:\t4c 8b 40 50          \tmov    0x50(%rax),%r8\n    5b39:\t8b 75 ec             \tmov    -0x14(%rbp),%esi\n    5b3c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5b40:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n    5b45:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5b4a:\t48 89 c7             \tmov    %rax,%rdi\n    5b4d:\t41 ff d0             \tcallq  *%r8\n    5b50:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    5b54:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    5b57:\t3b 45 f0             \tcmp    -0x10(%rbp),%eax\n    5b5a:\t7c d5                \tjl     5b31 <parse_encoding+0x26b>\n    5b5c:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    5b63:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5b67:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n    5b6b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5b6f:\t48 89 c7             \tmov    %rax,%rdi\n    5b72:\tff d2                \tcallq  *%rdx\n    5b74:\te9 1f 03 00 00       \tjmpq   5e98 <parse_encoding+0x5d2>\n    5b79:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5b7d:\t48 8b 00             \tmov    (%rax),%rax\n    5b80:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    5b84:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5b88:\t0f b6 00             \tmovzbl (%rax),%eax\n    5b8b:\t3c 64                \tcmp    $0x64,%al\n    5b8d:\t0f 85 4e 01 00 00    \tjne    5ce1 <parse_encoding+0x41b>\n    5b93:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5b97:\t48 83 c0 03          \tadd    $0x3,%rax\n    5b9b:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n    5b9f:\t0f 86 3c 01 00 00    \tjbe    5ce1 <parse_encoding+0x41b>\n    5ba5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5ba9:\t48 83 c0 01          \tadd    $0x1,%rax\n    5bad:\t0f b6 00             \tmovzbl (%rax),%eax\n    5bb0:\t3c 65                \tcmp    $0x65,%al\n    5bb2:\t0f 85 29 01 00 00    \tjne    5ce1 <parse_encoding+0x41b>\n    5bb8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5bbc:\t48 83 c0 02          \tadd    $0x2,%rax\n    5bc0:\t0f b6 00             \tmovzbl (%rax),%eax\n    5bc3:\t3c 66                \tcmp    $0x66,%al\n    5bc5:\t0f 85 16 01 00 00    \tjne    5ce1 <parse_encoding+0x41b>\n    5bcb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5bcf:\t48 83 c0 03          \tadd    $0x3,%rax\n    5bd3:\t0f b6 00             \tmovzbl (%rax),%eax\n    5bd6:\t3c 20                \tcmp    $0x20,%al\n    5bd8:\t0f 84 f9 00 00 00    \tje     5cd7 <parse_encoding+0x411>\n    5bde:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5be2:\t48 83 c0 03          \tadd    $0x3,%rax\n    5be6:\t0f b6 00             \tmovzbl (%rax),%eax\n    5be9:\t3c 0d                \tcmp    $0xd,%al\n    5beb:\t0f 84 e6 00 00 00    \tje     5cd7 <parse_encoding+0x411>\n    5bf1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5bf5:\t48 83 c0 03          \tadd    $0x3,%rax\n    5bf9:\t0f b6 00             \tmovzbl (%rax),%eax\n    5bfc:\t3c 0a                \tcmp    $0xa,%al\n    5bfe:\t0f 84 d3 00 00 00    \tje     5cd7 <parse_encoding+0x411>\n    5c04:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5c08:\t48 83 c0 03          \tadd    $0x3,%rax\n    5c0c:\t0f b6 00             \tmovzbl (%rax),%eax\n    5c0f:\t3c 09                \tcmp    $0x9,%al\n    5c11:\t0f 84 c0 00 00 00    \tje     5cd7 <parse_encoding+0x411>\n    5c17:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5c1b:\t48 83 c0 03          \tadd    $0x3,%rax\n    5c1f:\t0f b6 00             \tmovzbl (%rax),%eax\n    5c22:\t3c 0c                \tcmp    $0xc,%al\n    5c24:\t0f 84 ad 00 00 00    \tje     5cd7 <parse_encoding+0x411>\n    5c2a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5c2e:\t48 83 c0 03          \tadd    $0x3,%rax\n    5c32:\t0f b6 00             \tmovzbl (%rax),%eax\n    5c35:\t84 c0                \ttest   %al,%al\n    5c37:\t0f 84 9a 00 00 00    \tje     5cd7 <parse_encoding+0x411>\n    5c3d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5c41:\t48 83 c0 03          \tadd    $0x3,%rax\n    5c45:\t0f b6 00             \tmovzbl (%rax),%eax\n    5c48:\t3c 2f                \tcmp    $0x2f,%al\n    5c4a:\t0f 84 87 00 00 00    \tje     5cd7 <parse_encoding+0x411>\n    5c50:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5c54:\t48 83 c0 03          \tadd    $0x3,%rax\n    5c58:\t0f b6 00             \tmovzbl (%rax),%eax\n    5c5b:\t3c 28                \tcmp    $0x28,%al\n    5c5d:\t74 78                \tje     5cd7 <parse_encoding+0x411>\n    5c5f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5c63:\t48 83 c0 03          \tadd    $0x3,%rax\n    5c67:\t0f b6 00             \tmovzbl (%rax),%eax\n    5c6a:\t3c 29                \tcmp    $0x29,%al\n    5c6c:\t74 69                \tje     5cd7 <parse_encoding+0x411>\n    5c6e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5c72:\t48 83 c0 03          \tadd    $0x3,%rax\n    5c76:\t0f b6 00             \tmovzbl (%rax),%eax\n    5c79:\t3c 3c                \tcmp    $0x3c,%al\n    5c7b:\t74 5a                \tje     5cd7 <parse_encoding+0x411>\n    5c7d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5c81:\t48 83 c0 03          \tadd    $0x3,%rax\n    5c85:\t0f b6 00             \tmovzbl (%rax),%eax\n    5c88:\t3c 3e                \tcmp    $0x3e,%al\n    5c8a:\t74 4b                \tje     5cd7 <parse_encoding+0x411>\n    5c8c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5c90:\t48 83 c0 03          \tadd    $0x3,%rax\n    5c94:\t0f b6 00             \tmovzbl (%rax),%eax\n    5c97:\t3c 5b                \tcmp    $0x5b,%al\n    5c99:\t74 3c                \tje     5cd7 <parse_encoding+0x411>\n    5c9b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5c9f:\t48 83 c0 03          \tadd    $0x3,%rax\n    5ca3:\t0f b6 00             \tmovzbl (%rax),%eax\n    5ca6:\t3c 5d                \tcmp    $0x5d,%al\n    5ca8:\t74 2d                \tje     5cd7 <parse_encoding+0x411>\n    5caa:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5cae:\t48 83 c0 03          \tadd    $0x3,%rax\n    5cb2:\t0f b6 00             \tmovzbl (%rax),%eax\n    5cb5:\t3c 7b                \tcmp    $0x7b,%al\n    5cb7:\t74 1e                \tje     5cd7 <parse_encoding+0x411>\n    5cb9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5cbd:\t48 83 c0 03          \tadd    $0x3,%rax\n    5cc1:\t0f b6 00             \tmovzbl (%rax),%eax\n    5cc4:\t3c 7d                \tcmp    $0x7d,%al\n    5cc6:\t74 0f                \tje     5cd7 <parse_encoding+0x411>\n    5cc8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5ccc:\t48 83 c0 03          \tadd    $0x3,%rax\n    5cd0:\t0f b6 00             \tmovzbl (%rax),%eax\n    5cd3:\t3c 25                \tcmp    $0x25,%al\n    5cd5:\t75 0a                \tjne    5ce1 <parse_encoding+0x41b>\n    5cd7:\t48 83 45 f8 03       \taddq   $0x3,-0x8(%rbp)\n    5cdc:\te9 c8 01 00 00       \tjmpq   5ea9 <parse_encoding+0x5e3>\n    5ce1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5ce5:\t0f b6 00             \tmovzbl (%rax),%eax\n    5ce8:\t3c 5d                \tcmp    $0x5d,%al\n    5cea:\t75 0a                \tjne    5cf6 <parse_encoding+0x430>\n    5cec:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    5cf1:\te9 b3 01 00 00       \tjmpq   5ea9 <parse_encoding+0x5e3>\n    5cf6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5cfa:\t0f b6 00             \tmovzbl (%rax),%eax\n    5cfd:\t0f b6 c0             \tmovzbl %al,%eax\n    5d00:\t83 e8 30             \tsub    $0x30,%eax\n    5d03:\t83 f8 09             \tcmp    $0x9,%eax\n    5d06:\t76 0a                \tjbe    5d12 <parse_encoding+0x44c>\n    5d08:\t80 7d eb 00          \tcmpb   $0x0,-0x15(%rbp)\n    5d0c:\t0f 84 52 01 00 00    \tje     5e64 <parse_encoding+0x59e>\n    5d12:\t80 7d eb 00          \tcmpb   $0x0,-0x15(%rbp)\n    5d16:\t74 08                \tje     5d20 <parse_encoding+0x45a>\n    5d18:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    5d1b:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    5d1e:\teb 42                \tjmp    5d62 <parse_encoding+0x49c>\n    5d20:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5d24:\t48 8b 50 48          \tmov    0x48(%rax),%rdx\n    5d28:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5d2c:\t48 89 c7             \tmov    %rax,%rdi\n    5d2f:\tff d2                \tcallq  *%rdx\n    5d31:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    5d34:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5d38:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n    5d3c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5d40:\t48 89 c7             \tmov    %rax,%rdi\n    5d43:\tff d2                \tcallq  *%rdx\n    5d45:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5d49:\t48 8b 00             \tmov    (%rax),%rax\n    5d4c:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n    5d50:\t75 10                \tjne    5d62 <parse_encoding+0x49c>\n    5d52:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5d56:\tc7 40 18 02 00 00 00 \tmovl   $0x2,0x18(%rax)\n    5d5d:\te9 2a 02 00 00       \tjmpq   5f8c <parse_encoding+0x6c6>\n    5d62:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5d66:\t48 8b 00             \tmov    (%rax),%rax\n    5d69:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    5d6d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5d71:\t48 83 c0 02          \tadd    $0x2,%rax\n    5d75:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n    5d79:\t0f 86 cf 00 00 00    \tjbe    5e4e <parse_encoding+0x588>\n    5d7f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5d83:\t0f b6 00             \tmovzbl (%rax),%eax\n    5d86:\t3c 2f                \tcmp    $0x2f,%al\n    5d88:\t0f 85 c0 00 00 00    \tjne    5e4e <parse_encoding+0x588>\n    5d8e:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    5d91:\t3b 45 f4             \tcmp    -0xc(%rbp),%eax\n    5d94:\t0f 8d b4 00 00 00    \tjge    5e4e <parse_encoding+0x588>\n    5d9a:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n    5d9f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5da3:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    5da7:\t48 89 10             \tmov    %rdx,(%rax)\n    5daa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5dae:\t48 8b 50 40          \tmov    0x40(%rax),%rdx\n    5db2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5db6:\t48 89 c7             \tmov    %rax,%rdi\n    5db9:\tff d2                \tcallq  *%rdx\n    5dbb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5dbf:\t48 8b 00             \tmov    (%rax),%rax\n    5dc2:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n    5dc6:\t0f 86 b6 01 00 00    \tjbe    5f82 <parse_encoding+0x6bc>\n    5dcc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5dd0:\t8b 40 18             \tmov    0x18(%rax),%eax\n    5dd3:\t85 c0                \ttest   %eax,%eax\n    5dd5:\t0f 85 aa 01 00 00    \tjne    5f85 <parse_encoding+0x6bf>\n    5ddb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5ddf:\t48 8b 00             \tmov    (%rax),%rax\n    5de2:\t48 2b 45 f8          \tsub    -0x8(%rbp),%rax\n    5de6:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    5de9:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    5dec:\t3b 45 f0             \tcmp    -0x10(%rbp),%eax\n    5def:\t7d 56                \tjge    5e47 <parse_encoding+0x581>\n    5df1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5df5:\t4c 8b 40 50          \tmov    0x50(%rax),%r8\n    5df9:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n    5dfc:\t8d 48 01             \tlea    0x1(%rax),%ecx\n    5dff:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    5e03:\t8b 75 e4             \tmov    -0x1c(%rbp),%esi\n    5e06:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5e0a:\t48 89 c7             \tmov    %rax,%rdi\n    5e0d:\t41 ff d0             \tcallq  *%r8\n    5e10:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    5e14:\t89 42 18             \tmov    %eax,0x18(%rdx)\n    5e17:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5e1b:\t8b 40 18             \tmov    0x18(%rax),%eax\n    5e1e:\t85 c0                \ttest   %eax,%eax\n    5e20:\t0f 85 62 01 00 00    \tjne    5f88 <parse_encoding+0x6c2>\n    5e26:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    5e2a:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    5e2e:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    5e31:\t48 63 d2             \tmovslq %edx,%rdx\n    5e34:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    5e38:\t48 01 d0             \tadd    %rdx,%rax\n    5e3b:\t48 8b 10             \tmov    (%rax),%rdx\n    5e3e:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n    5e41:\t48 01 d0             \tadd    %rdx,%rax\n    5e44:\tc6 00 00             \tmovb   $0x0,(%rax)\n    5e47:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    5e4b:\t90                   \tnop\n    5e4c:\teb 38                \tjmp    5e86 <parse_encoding+0x5c0>\n    5e4e:\t80 7d eb 00          \tcmpb   $0x0,-0x15(%rbp)\n    5e52:\t74 32                \tje     5e86 <parse_encoding+0x5c0>\n    5e54:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5e58:\tc7 40 18 02 00 00 00 \tmovl   $0x2,0x18(%rax)\n    5e5f:\te9 28 01 00 00       \tjmpq   5f8c <parse_encoding+0x6c6>\n    5e64:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5e68:\t48 8b 50 40          \tmov    0x40(%rax),%rdx\n    5e6c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5e70:\t48 89 c7             \tmov    %rax,%rdi\n    5e73:\tff d2                \tcallq  *%rdx\n    5e75:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5e79:\t8b 40 18             \tmov    0x18(%rax),%eax\n    5e7c:\t85 c0                \ttest   %eax,%eax\n    5e7e:\t0f 85 07 01 00 00    \tjne    5f8b <parse_encoding+0x6c5>\n    5e84:\teb 01                \tjmp    5e87 <parse_encoding+0x5c1>\n    5e86:\t90                   \tnop\n    5e87:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5e8b:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n    5e8f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5e93:\t48 89 c7             \tmov    %rax,%rdi\n    5e96:\tff d2                \tcallq  *%rdx\n    5e98:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5e9c:\t48 8b 00             \tmov    (%rax),%rax\n    5e9f:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n    5ea3:\t0f 87 d0 fc ff ff    \tja     5b79 <parse_encoding+0x2b3>\n    5ea9:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    5ead:\tc7 80 20 02 00 00 01 \tmovl   $0x1,0x220(%rax)\n    5eb4:\t00 00 00 \n    5eb7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5ebb:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    5ebf:\t48 89 10             \tmov    %rdx,(%rax)\n    5ec2:\te9 c5 00 00 00       \tjmpq   5f8c <parse_encoding+0x6c6>\n    5ec7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5ecb:\t48 83 c0 11          \tadd    $0x11,%rax\n    5ecf:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n    5ed3:\t76 2d                \tjbe    5f02 <parse_encoding+0x63c>\n    5ed5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5ed9:\tba 10 00 00 00       \tmov    $0x10,%edx\n    5ede:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5ee3:\t48 89 c7             \tmov    %rax,%rdi\n    5ee6:\te8 00 00 00 00       \tcallq  5eeb <parse_encoding+0x625>\n    5eeb:\t85 c0                \ttest   %eax,%eax\n    5eed:\t75 13                \tjne    5f02 <parse_encoding+0x63c>\n    5eef:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    5ef3:\tc7 80 20 02 00 00 02 \tmovl   $0x2,0x220(%rax)\n    5efa:\t00 00 00 \n    5efd:\te9 8a 00 00 00       \tjmpq   5f8c <parse_encoding+0x6c6>\n    5f02:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5f06:\t48 83 c0 0f          \tadd    $0xf,%rax\n    5f0a:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n    5f0e:\t76 2a                \tjbe    5f3a <parse_encoding+0x674>\n    5f10:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5f14:\tba 0e 00 00 00       \tmov    $0xe,%edx\n    5f19:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5f1e:\t48 89 c7             \tmov    %rax,%rdi\n    5f21:\te8 00 00 00 00       \tcallq  5f26 <parse_encoding+0x660>\n    5f26:\t85 c0                \ttest   %eax,%eax\n    5f28:\t75 10                \tjne    5f3a <parse_encoding+0x674>\n    5f2a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    5f2e:\tc7 80 20 02 00 00 04 \tmovl   $0x4,0x220(%rax)\n    5f35:\t00 00 00 \n    5f38:\teb 52                \tjmp    5f8c <parse_encoding+0x6c6>\n    5f3a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5f3e:\t48 83 c0 12          \tadd    $0x12,%rax\n    5f42:\t48 39 45 d0          \tcmp    %rax,-0x30(%rbp)\n    5f46:\t76 2a                \tjbe    5f72 <parse_encoding+0x6ac>\n    5f48:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5f4c:\tba 11 00 00 00       \tmov    $0x11,%edx\n    5f51:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5f56:\t48 89 c7             \tmov    %rax,%rdi\n    5f59:\te8 00 00 00 00       \tcallq  5f5e <parse_encoding+0x698>\n    5f5e:\t85 c0                \ttest   %eax,%eax\n    5f60:\t75 10                \tjne    5f72 <parse_encoding+0x6ac>\n    5f62:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    5f66:\tc7 80 20 02 00 00 03 \tmovl   $0x3,0x220(%rax)\n    5f6d:\t00 00 00 \n    5f70:\teb 1a                \tjmp    5f8c <parse_encoding+0x6c6>\n    5f72:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5f76:\tc7 40 18 a2 00 00 00 \tmovl   $0xa2,0x18(%rax)\n    5f7d:\teb 0d                \tjmp    5f8c <parse_encoding+0x6c6>\n    5f7f:\t90                   \tnop\n    5f80:\teb 0a                \tjmp    5f8c <parse_encoding+0x6c6>\n    5f82:\t90                   \tnop\n    5f83:\teb 07                \tjmp    5f8c <parse_encoding+0x6c6>\n    5f85:\t90                   \tnop\n    5f86:\teb 04                \tjmp    5f8c <parse_encoding+0x6c6>\n    5f88:\t90                   \tnop\n    5f89:\teb 01                \tjmp    5f8c <parse_encoding+0x6c6>\n    5f8b:\t90                   \tnop\n    5f8c:\tc9                   \tleaveq \n    5f8d:\tc3                   \tretq   ", "code_s": "char *__fastcall parse_encoding(__int64 <span class=\"supfact\">a1</span>,\n                                __int64 <span class=\"supfact\">a2</span>) {\n  char *result;\n  __int64 v3;\n  __int64 v4;\n  int v5;\n  int <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64(__fastcall * **<span class=\"supfact\">v11</span>)(__int64, _QWORD, __int64);\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  unsigned int <span class=\"supfact\">v14</span>;\n  char <span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v17</span>;\n  int <span class=\"supfact\">v18</span>;\n  char *<span class=\"supfact\">s1</span>;\n  <span class=\"supfact\">v13</span> = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v12</span> = *(_QWORD *)(<span class=\"supfact\">a2</span> + Number);\n  <span class=\"supfact\">v11</span> = *(__int64(__fastcall ****)(__int64, _QWORD, __int64))(\n      <span class=\"supfact\">a1</span> + Number);\n  (*(void(__fastcall **)(__int64))(<span class=\"supfact\">a2</span> + Number))(\n      <span class=\"supfact\">a2</span>);\n  <span class=\"supfact\">s1</span> = *(char **)<span class=\"supfact\">a2</span>;\n  if ((unsigned __int64)<span class=\"supfact\">s1</span> < <span class=\"supfact\">v12</span>) {\n    if ((unsigned int)(unsigned __int8)*<span class=\"supfact\">s1</span> - Number <= Number ||\n        *<span class=\"supfact\">s1</span> == Number) {\n      <span class=\"supfact\">v10</span> = <span class=\"supfact\">a1</span> + Number;\n      <span class=\"supfact\">v9</span> = <span class=\"supfact\">a2</span> + Number;\n      <span class=\"supfact\">v8</span> = *(_QWORD *)(<span class=\"supfact\">v13</span> + Number);\n      <span class=\"supfact\">v15</span> = Number;\n      if (*<span class=\"supfact\">s1</span> == Number) {\n        <span class=\"supfact\">v18</span> = Number;\n        <span class=\"supfact\">v15</span> = Number;\n        ++*(_QWORD *)<span class=\"supfact\">v13</span>;\n      } else {\n        <span class=\"supfact\">v18</span> = (*(__int64(__fastcall **)(__int64))(\n            <span class=\"supfact\">v13</span> + Number))(<span class=\"supfact\">v13</span>);\n      }\n      <span class=\"supfact\">v17</span> = <span class=\"supfact\">v18</span>;\n      if (<span class=\"supfact\">v18</span> > Number)\n        <span class=\"supfact\">v17</span> = Number;\n      (*(void(__fastcall **)(__int64))(<span class=\"supfact\">v13</span> + Number))(\n          <span class=\"supfact\">v13</span>);\n      result = *(char **)<span class=\"supfact\">v13</span>;\n      if (<span class=\"supfact\">v12</span> > *(_QWORD *)<span class=\"supfact\">v13</span>) {\n        if (*(_QWORD *)(<span class=\"supfact\">v10</span> + Number)) {\n          ft_mem_free(<span class=\"supfact\">v8</span>,\n                      *(_QWORD *)(<span class=\"supfact\">v10</span> + Number));\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) = Number L;\n          ft_mem_free(<span class=\"supfact\">v8</span>,\n                      *(_QWORD *)(<span class=\"supfact\">v10</span> + Number));\n          *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) = Number L;\n          if (*(_QWORD *)(<span class=\"supfact\">v9</span> + Number))\n            (*(void(__fastcall **)(__int64))(<span class=\"supfact\">v9</span> + Number))(\n                <span class=\"supfact\">v9</span>);\n        }\n        *(_DWORD *)<span class=\"supfact\">v10</span> = <span class=\"supfact\">v17</span>;\n        *(_DWORD *)(<span class=\"supfact\">a2</span> + Number) =\n            *(_DWORD *)<span class=\"supfact\">v10</span>;\n        v3 = ft_mem_realloc(<span class=\"supfact\">v8</span>, Number L, Number L,\n                            <span class=\"supfact\">v17</span>, Number L, &<span class=\"supfact\">v6</span>);\n        *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) = v3;\n        if (<span class=\"supfact\">v6</span> ||\n            (v4 = ft_mem_realloc(<span class=\"supfact\">v8</span>, Number L, Number L,\n                                 <span class=\"supfact\">v17</span>, Number L,\n                                 &<span class=\"supfact\">v6</span>),\n             *(_QWORD *)(<span class=\"supfact\">v10</span> + Number) = v4,\n             <span class=\"supfact\">v6</span>) ||\n            (<span class=\"supfact\">v6</span> = (**<span class=\"supfact\">v11</span>)(\n                 <span class=\"supfact\">v9</span>, (unsigned int)<span class=\"supfact\">v17</span>,\n                 <span class=\"supfact\">v8</span>)) != Number) {\n          result = (char *)<span class=\"supfact\">v13</span>;\n          *(_DWORD *)(<span class=\"supfact\">v13</span> + Number) = <span class=\"supfact\">v6</span>;\n        } else {\n          for (<span class=\"supfact\">i</span> = Number;\n               <span class=\"supfact\">i</span> < <span class=\"supfact\">v17</span>; ++<span class=\"supfact\">i</span>)\n            (*(void(__fastcall **)(__int64, _QWORD, const char *, __int64))(\n                <span class=\"supfact\">v9</span> + Number))(<span class=\"supfact\">v9</span>,\n                                              (unsigned int)<span class=\"supfact\">i</span>,\n                                              String, Number L);\n          <span class=\"supfact\">i</span> = Number;\n          (*(void(__fastcall **)(__int64))(<span class=\"supfact\">v13</span> + Number))(\n              <span class=\"supfact\">v13</span>);\n          while (<span class=\"supfact\">v12</span> > *(_QWORD *)<span class=\"supfact\">v13</span>) {\n            <span class=\"supfact\">s1</span> = *(char **)<span class=\"supfact\">v13</span>;\n            if (*<span class=\"supfact\">s1</span> == Number &&\n                <span class=\"supfact\">v12</span> >\n                    (unsigned __int64)(<span class=\"supfact\">s1</span> + Number) &&\n                <span class=\"supfact\">s1</span>[Number] == Number &&\n                <span class=\"supfact\">s1</span>[Number] == Number &&\n                (<span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 !<span class=\"supfact\">s1</span>[Number] ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number ||\n                 <span class=\"supfact\">s1</span>[Number] == Number)) {\n              <span class=\"supfact\">s1</span> += Number;\n              break;\n            }\n            if (*<span class=\"supfact\">s1</span> == Number) {\n              ++<span class=\"supfact\">s1</span>;\n              break;\n            }\n            if ((unsigned int)(unsigned __int8)*<span class=\"supfact\">s1</span> - Number <=\n                    Number ||\n                <span class=\"supfact\">v15</span>) {\n              if (<span class=\"supfact\">v15</span>) {\n                <span class=\"supfact\">v14</span> = <span class=\"supfact\">i</span>;\n              } else {\n                <span class=\"supfact\">v14</span> = (*(__int64(__fastcall **)(__int64))(\n                    <span class=\"supfact\">v13</span> + Number))(<span class=\"supfact\">v13</span>);\n                (*(void(__fastcall **)(__int64))(<span class=\"supfact\">v13</span> + Number))(\n                    <span class=\"supfact\">v13</span>);\n                if (<span class=\"supfact\">s1</span> == *(char **)<span class=\"supfact\">v13</span>) {\n                  result = (char *)<span class=\"supfact\">v13</span>;\n                  *(_DWORD *)(<span class=\"supfact\">v13</span> + Number) = Number;\n                  return result;\n                }\n              }\n              <span class=\"supfact\">s1</span> = *(char **)<span class=\"supfact\">v13</span>;\n              if (<span class=\"supfact\">v12</span> >\n                      (unsigned __int64)(<span class=\"supfact\">s1</span> + Number) &&\n                  *<span class=\"supfact\">s1</span> == Number &&\n                  <span class=\"supfact\">i</span> < <span class=\"supfact\">v18</span>) {\n                *(_QWORD *)<span class=\"supfact\">v13</span> = ++<span class=\"supfact\">s1</span>;\n                (*(void(__fastcall **)(__int64))(<span class=\"supfact\">v13</span> + Number))(\n                    <span class=\"supfact\">v13</span>);\n                result = *(char **)<span class=\"supfact\">v13</span>;\n                if (<span class=\"supfact\">v12</span> <= *(_QWORD *)<span class=\"supfact\">v13</span>)\n                  return result;\n                result =\n                    (char *)*(unsigned int *)(<span class=\"supfact\">v13</span> + Number);\n                if ((_DWORD)result)\n                  return result;\n                <span class=\"supfact\">v7</span> =\n                    *(_QWORD *)<span class=\"supfact\">v13</span> - (_DWORD)<span class=\"supfact\">s1</span>;\n                if (<span class=\"supfact\">i</span> < <span class=\"supfact\">v17</span>) {\n                  v5 = (*(__int64(__fastcall **)(__int64, _QWORD, char *,\n                                                 _QWORD))(<span class=\"supfact\">v9</span> +\n                                                          Number))(\n                      <span class=\"supfact\">v9</span>, <span class=\"supfact\">v14</span>,\n                      <span class=\"supfact\">s1</span>, <span class=\"supfact\">v7</span> + Number);\n                  *(_DWORD *)(<span class=\"supfact\">v13</span> + Number) = v5;\n                  result =\n                      (char *)*(unsigned int *)(<span class=\"supfact\">v13</span> + Number);\n                  if ((_DWORD)result)\n                    return result;\n                  *(_BYTE *)(*(_QWORD *)(Number L * (int)<span class=\"supfact\">v14</span> +\n                                         *(_QWORD *)(<span class=\"supfact\">v9</span> +\n                                                     Number)) +\n                             <span class=\"supfact\">v7</span>) = Number;\n                }\n                ++<span class=\"supfact\">i</span>;\n              } else if (<span class=\"supfact\">v15</span>) {\n                result = (char *)<span class=\"supfact\">v13</span>;\n                *(_DWORD *)(<span class=\"supfact\">v13</span> + Number) = Number;\n                return result;\n              }\n            } else {\n              (*(void(__fastcall **)(__int64))(<span class=\"supfact\">v13</span> + Number))(\n                  <span class=\"supfact\">v13</span>);\n              result = (char *)*(unsigned int *)(<span class=\"supfact\">v13</span> + Number);\n              if ((_DWORD)result)\n                return result;\n            }\n            (*(void(__fastcall **)(__int64))(<span class=\"supfact\">v13</span> + Number))(\n                <span class=\"supfact\">v13</span>);\n          }\n          *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n          result = (char *)<span class=\"supfact\">v13</span>;\n          *(_QWORD *)<span class=\"supfact\">v13</span> = <span class=\"supfact\">s1</span>;\n        }\n      }\n    } else if (<span class=\"supfact\">v12</span> >\n                   (unsigned __int64)(<span class=\"supfact\">s1</span> + Number) &&\n               !strncmp(<span class=\"supfact\">s1</span>, String, Number)) {\n      result = (char *)<span class=\"supfact\">a1</span>;\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n    } else if (<span class=\"supfact\">v12</span> >\n                   (unsigned __int64)(<span class=\"supfact\">s1</span> + Number) &&\n               !strncmp(<span class=\"supfact\">s1</span>, String, Number)) {\n      result = (char *)<span class=\"supfact\">a1</span>;\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n    } else if (<span class=\"supfact\">v12</span> >\n                   (unsigned __int64)(<span class=\"supfact\">s1</span> + Number) &&\n               !strncmp(<span class=\"supfact\">s1</span>, String, Number)) {\n      result = (char *)<span class=\"supfact\">a1</span>;\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n    } else {\n      result = (char *)<span class=\"supfact\">v13</span>;\n      *(_DWORD *)(<span class=\"supfact\">v13</span> + Number) = Number;\n    }\n  } else {\n    result = (char *)<span class=\"supfact\">v13</span>;\n    *(_DWORD *)(<span class=\"supfact\">v13</span> + Number) = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl parse_encoding(T1_Face <span class=\"supfact\">face</span>,\n                            T1_Loader <span class=\"supfact\">loader</span>) {\n  FT_UShort *v2;\n  const FT_String **v3;\n  FT_Error v4;\n  FT_Error <span class=\"supfact\">error</span>;\n  FT_UInt <span class=\"supfact\">len</span>;\n  FT_Memory <span class=\"supfact\">memory</span>;\n  PS_Table <span class=\"supfact\">char_table</span>;\n  T1_Encoding <span class=\"supfact\">encode</span>;\n  PSAux_Service <span class=\"supfact\">psaux</span>;\n  FT_Byte *<span class=\"supfact\">limit</span>;\n  T1_Parser <span class=\"supfact\">parser</span>;\n  FT_Int <span class=\"supfact\">charcode</span>;\n  FT_Bool <span class=\"supfact\">only_immediates</span>;\n  FT_Int <span class=\"supfact\">n</span>;\n  FT_Int <span class=\"supfact\">array_size</span>;\n  FT_Int <span class=\"supfact\">count</span>;\n  FT_Byte *<span class=\"supfact\">cur</span>;\n  <span class=\"supfact\">parser</span> = &<span class=\"supfact\">loader</span>-><span class=\"supfact\">parser</span>;\n  <span class=\"supfact\">limit</span> =\n      <span class=\"supfact\">loader</span>-><span class=\"supfact\">parser</span>.root.<span class=\"supfact\">limit</span>;\n  <span class=\"supfact\">psaux</span> =\n      (PSAux_Service)<span class=\"supfact\">face</span>-><span class=\"supfact\">psaux</span>;\n  <span class=\"supfact\">loader</span>-><span class=\"supfact\">parser</span>.root.funcs.skip_spaces(\n      (PS_Parser)<span class=\"supfact\">loader</span>);\n  <span class=\"supfact\">cur</span> =\n      <span class=\"supfact\">loader</span>-><span class=\"supfact\">parser</span>.root.cursor;\n  if (<span class=\"supfact\">cur</span> < <span class=\"supfact\">limit</span>) {\n    if ((unsigned int)*<span class=\"supfact\">cur</span> - Number <= Number ||\n        *<span class=\"supfact\">cur</span> == Number) {\n      <span class=\"supfact\">encode</span> = &<span class=\"supfact\">face</span>->type1.encoding;\n      <span class=\"supfact\">char_table</span> = &<span class=\"supfact\">loader</span>->encoding_table;\n      <span class=\"supfact\">memory</span> =\n          <span class=\"supfact\">parser</span>->root.<span class=\"supfact\">memory</span>;\n      <span class=\"supfact\">only_immediates</span> = Number;\n      if (*<span class=\"supfact\">cur</span> == Number) {\n        <span class=\"supfact\">count</span> = Number;\n        <span class=\"supfact\">only_immediates</span> = Number;\n        ++<span class=\"supfact\">parser</span>->root.cursor;\n      } else {\n        <span class=\"supfact\">count</span> = <span class=\"supfact\">parser</span>->root.funcs.to_int(\n            (PS_Parser)<span class=\"supfact\">parser</span>);\n      }\n      <span class=\"supfact\">array_size</span> = <span class=\"supfact\">count</span>;\n      if (<span class=\"supfact\">count</span> > Number)\n        <span class=\"supfact\">array_size</span> = Number;\n      <span class=\"supfact\">parser</span>->root.funcs.skip_spaces(\n          (PS_Parser)<span class=\"supfact\">parser</span>);\n      if (<span class=\"supfact\">limit</span> > <span class=\"supfact\">parser</span>->root.cursor) {\n        if (<span class=\"supfact\">encode</span>->char_index) {\n          ft_mem_free(<span class=\"supfact\">memory</span>,\n                      <span class=\"supfact\">encode</span>->char_index);\n          <span class=\"supfact\">encode</span>->char_index = Number L;\n          ft_mem_free(<span class=\"supfact\">memory</span>,\n                      <span class=\"supfact\">encode</span>->char_name);\n          <span class=\"supfact\">encode</span>->char_name = Number L;\n          if (<span class=\"supfact\">char_table</span>->funcs.release)\n            <span class=\"supfact\">char_table</span>->funcs.release(\n                <span class=\"supfact\">char_table</span>);\n        }\n        <span class=\"supfact\">encode</span>->num_chars = <span class=\"supfact\">array_size</span>;\n        <span class=\"supfact\">loader</span>->num_chars = <span class=\"supfact\">encode</span>->num_chars;\n        v2 = (FT_UShort *)ft_mem_realloc(<span class=\"supfact\">memory</span>, Number L,\n                                         Number L, <span class=\"supfact\">array_size</span>,\n                                         Number L, &<span class=\"supfact\">error</span>);\n        <span class=\"supfact\">encode</span>->char_index = v2;\n        if (<span class=\"supfact\">error</span> ||\n            (v3 = (const FT_String **)ft_mem_realloc(\n                 <span class=\"supfact\">memory</span>, Number L, Number L,\n                 <span class=\"supfact\">array_size</span>, Number L, &<span class=\"supfact\">error</span>),\n             <span class=\"supfact\">encode</span>->char_name = v3, <span class=\"supfact\">error</span>) ||\n            (<span class=\"supfact\">error</span> =\n                 <span class=\"supfact\">psaux</span>->ps_table_funcs->init(\n                     <span class=\"supfact\">char_table</span>, <span class=\"supfact\">array_size</span>,\n                     <span class=\"supfact\">memory</span>)) != Number) {\n          <span class=\"supfact\">parser</span>->root.<span class=\"supfact\">error</span> =\n              <span class=\"supfact\">error</span>;\n        } else {\n          for (<span class=\"supfact\">n</span> = Number;\n               <span class=\"supfact\">n</span> < <span class=\"supfact\">array_size</span>;\n               ++<span class=\"supfact\">n</span>)\n            <span class=\"supfact\">char_table</span>->funcs.add(<span class=\"supfact\">char_table</span>,\n                                                  <span class=\"supfact\">n</span>, String,\n                                                  Number L);\n          <span class=\"supfact\">n</span> = Number;\n          <span class=\"supfact\">parser</span>->root.funcs.skip_spaces(\n              (PS_Parser)<span class=\"supfact\">parser</span>);\n          while (<span class=\"supfact\">limit</span> > <span class=\"supfact\">parser</span>->root.cursor) {\n            <span class=\"supfact\">cur</span> = <span class=\"supfact\">parser</span>->root.cursor;\n            if (*<span class=\"supfact\">cur</span> == Number &&\n                <span class=\"supfact\">limit</span> > <span class=\"supfact\">cur</span> + Number &&\n                <span class=\"supfact\">cur</span>[Number] == Number &&\n                <span class=\"supfact\">cur</span>[Number] == Number &&\n                (<span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 !<span class=\"supfact\">cur</span>[Number] ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number ||\n                 <span class=\"supfact\">cur</span>[Number] == Number)) {\n              <span class=\"supfact\">cur</span> += Number;\n              break;\n            }\n            if (*<span class=\"supfact\">cur</span> == Number) {\n              ++<span class=\"supfact\">cur</span>;\n              break;\n            }\n            if ((unsigned int)*<span class=\"supfact\">cur</span> - Number <= Number ||\n                <span class=\"supfact\">only_immediates</span>) {\n              if (<span class=\"supfact\">only_immediates</span>) {\n                <span class=\"supfact\">charcode</span> = <span class=\"supfact\">n</span>;\n              } else {\n                <span class=\"supfact\">charcode</span> =\n                    <span class=\"supfact\">parser</span>->root.funcs.to_int(\n                        (PS_Parser)<span class=\"supfact\">parser</span>);\n                <span class=\"supfact\">parser</span>->root.funcs.skip_spaces(\n                    (PS_Parser)<span class=\"supfact\">parser</span>);\n                if (<span class=\"supfact\">cur</span> ==\n                    <span class=\"supfact\">parser</span>->root.cursor) {\n                  <span class=\"supfact\">parser</span>->root.<span class=\"supfact\">error</span> = Number;\n                  return;\n                }\n              }\n              <span class=\"supfact\">cur</span> = <span class=\"supfact\">parser</span>->root.cursor;\n              if (<span class=\"supfact\">limit</span> > <span class=\"supfact\">cur</span> + Number &&\n                  *<span class=\"supfact\">cur</span> == Number &&\n                  <span class=\"supfact\">n</span> < <span class=\"supfact\">count</span>) {\n                <span class=\"supfact\">parser</span>->root.cursor = ++<span class=\"supfact\">cur</span>;\n                <span class=\"supfact\">parser</span>->root.funcs.skip_PS_token(\n                    (PS_Parser)<span class=\"supfact\">parser</span>);\n                if (<span class=\"supfact\">limit</span> <=\n                        <span class=\"supfact\">parser</span>->root.cursor ||\n                    <span class=\"supfact\">parser</span>->root.<span class=\"supfact\">error</span>)\n                  return;\n                <span class=\"supfact\">len</span> = (FT_UInt)&<span class=\"supfact\">parser</span>->root\n                                          .cursor[-(_DWORD)<span class=\"supfact\">cur</span>];\n                if (<span class=\"supfact\">n</span> < <span class=\"supfact\">array_size</span>) {\n                  v4 = <span class=\"supfact\">char_table</span>->funcs.add(\n                      <span class=\"supfact\">char_table</span>, <span class=\"supfact\">charcode</span>,\n                      <span class=\"supfact\">cur</span>, <span class=\"supfact\">len</span> + Number);\n                  <span class=\"supfact\">parser</span>->root.<span class=\"supfact\">error</span> = v4;\n                  if (<span class=\"supfact\">parser</span>->root.<span class=\"supfact\">error</span>)\n                    return;\n                  <span class=\"supfact\">char_table</span>->elements[<span class=\"supfact\">charcode</span>]\n                                                      [<span class=\"supfact\">len</span>] =\n                      Number;\n                }\n                ++<span class=\"supfact\">n</span>;\n              } else if (<span class=\"supfact\">only_immediates</span>) {\n                <span class=\"supfact\">parser</span>->root.<span class=\"supfact\">error</span> = Number;\n                return;\n              }\n            } else {\n              <span class=\"supfact\">parser</span>->root.funcs.skip_PS_token(\n                  (PS_Parser)<span class=\"supfact\">parser</span>);\n              if (<span class=\"supfact\">parser</span>->root.<span class=\"supfact\">error</span>)\n                return;\n            }\n            <span class=\"supfact\">parser</span>->root.funcs.skip_spaces(\n                (PS_Parser)<span class=\"supfact\">parser</span>);\n          }\n          <span class=\"supfact\">face</span>->type1.encoding_type = T1_ENCODING_TYPE_ARRAY;\n          <span class=\"supfact\">parser</span>->root.cursor = <span class=\"supfact\">cur</span>;\n        }\n      }\n    } else if (<span class=\"supfact\">limit</span> > <span class=\"supfact\">cur</span> + Number &&\n               !strncmp((const char *)<span class=\"supfact\">cur</span>, String, Number)) {\n      <span class=\"supfact\">face</span>->type1.encoding_type = T1_ENCODING_TYPE_STANDARD;\n    } else if (<span class=\"supfact\">limit</span> > <span class=\"supfact\">cur</span> + Number &&\n               !strncmp((const char *)<span class=\"supfact\">cur</span>, String, Number)) {\n      <span class=\"supfact\">face</span>->type1.encoding_type = T1_ENCODING_TYPE_EXPERT;\n    } else if (<span class=\"supfact\">limit</span> > <span class=\"supfact\">cur</span> + Number &&\n               !strncmp((const char *)<span class=\"supfact\">cur</span>, String, Number)) {\n      <span class=\"supfact\">face</span>->type1.encoding_type = T1_ENCODING_TYPE_ISOLATIN1;\n    } else {\n      <span class=\"supfact\">parser</span>->root.<span class=\"supfact\">error</span> = Number;\n    }\n  } else {\n    <span class=\"supfact\">parser</span>->root.<span class=\"supfact\">error</span> = Number;\n  }\n}", "var": [{"name": "a1", "type": "T42_Face", "pred_name": "face", "ref_name": "face", "ref_type": "T1_Face"}, {"name": "a2", "type": "T42_Loader", "pred_name": "loader", "ref_name": "loader", "ref_type": "T1_Loader"}, {"name": "v6", "type": "FT_Error", "pred_name": "error", "ref_name": "error", "ref_type": "FT_Error"}, {"name": "v7", "type": "int", "pred_name": "len", "ref_name": "len", "ref_type": "FT_UInt"}, {"name": "v8", "type": "FT_Byte *", "pred_name": "limit", "ref_name": "memory", "ref_type": "FT_Memory"}, {"name": "v9", "type": "FT_Memory", "pred_name": "memory", "ref_name": "char_table", "ref_type": "PS_Table"}, {"name": "v10", "type": "PS_Table", "pred_name": "char_table", "ref_name": "encode", "ref_type": "T1_Encoding"}, {"name": "v11", "type": "T1_Encoding", "pred_name": "encode", "ref_name": "psaux", "ref_type": "PSAux_Service"}, {"name": "v12", "type": "PSAux_Service", "pred_name": "psaux", "ref_name": "limit", "ref_type": "FT_Byte *"}, {"name": "v13", "type": "FT_Byte *", "pred_name": "p", "ref_name": "parser", "ref_type": "T1_Parser"}, {"name": "v14", "type": "FT_Int", "pred_name": "charcode", "ref_name": "charcode", "ref_type": "FT_Int"}, {"name": "v15", "type": "FT_Bool", "pred_name": "only_immediates", "ref_name": "only_immediates", "ref_type": "FT_Bool"}, {"name": "i", "type": "FT_UInt", "pred_name": "n", "ref_name": "n", "ref_type": "FT_Int"}, {"name": "v17", "type": "FT_UInt", "pred_name": "count", "ref_name": "array_size", "ref_type": "FT_Int"}, {"name": "v18", "type": "FT_Int", "pred_name": "all", "ref_name": "count", "ref_type": "FT_Int"}, {"name": "s1", "type": "FT_Byte *", "pred_name": "cur", "ref_name": "cur", "ref_type": "FT_Byte *"}], "body_in_train": false}, {"repo_owner": "Dar13", "repo_name": "OpenMemDB", "path": "Dar13/OpenMemDB/f652a8e8913d63a93adbb5f4dc5a286f4a54baeb0912de7926f3f2c06b1e4428", "path_in_repo": "Dar13/OpenMemDB/database/libomdb/ConsoleDemo/omdb_console", "objdump": "0000000000405b5e <_ZN7libomdb10Connection11setMetaDataENS_18ConnectionMetaDataE>:\n  405b5e:\t55                   \tpush   %rbp\n  405b5f:\t48 89 e5             \tmov    %rsp,%rbp\n  405b62:\t48 83 ec 10          \tsub    $0x10,%rsp\n  405b66:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  405b6a:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  405b6e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405b72:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  405b76:\t48 89 d6             \tmov    %rdx,%rsi\n  405b79:\t48 89 c7             \tmov    %rax,%rdi\n  405b7c:\te8 d5 01 00 00       \tcallq  405d56 <_ZN7libomdb18ConnectionMetaDataaSERKS0_>\n  405b81:\t90                   \tnop\n  405b82:\tc9                   \tleaveq \n  405b83:\tc3                   \tretq   ", "code_s": "__int64 __fastcall libomdb Connection setMetaData(__int64 <span class=\"supfact\">a1</span>,\n                                                  __int64 <span class=\"supfact\">a2</span>) {\n  return libomdb ConnectionMetaData operator=(<span class=\"supfact\">a1</span>,\n                                              <span class=\"supfact\">a2</span>);\n}", "code_t": "void __cdecl libomdb Connection\nsetMetaData(libomdb Connection *const <span class=\"supfact\">this</span>,\n            libomdb ConnectionMetaData *<span class=\"supfact\">p_data</span>) {\n  libomdb ConnectionMetaData operator=(&<span class=\"supfact\">this</span>->m_metaData,\n                                       <span class=\"supfact\">p_data</span>);\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "libomdb::Connection *"}, {"name": "a2", "type": "__unk__", "pred_name": "db", "ref_name": "p_data", "ref_type": "libomdb::ConnectionMetaData *"}], "body_in_train": false}, {"repo_owner": "irl", "repo_name": "direwolf", "path": "irl/direwolf/da69ed739db6f4577641a740c1f46041fa4bc6cf338af527129769e8d8443b12", "path_in_repo": "irl/direwolf//decode_aprs", "objdump": "0000000000407836 <third_party_header>:\n  407836:\t55                   \tpush   %rbp\n  407837:\t48 89 e5             \tmov    %rsp,%rbp\n  40783a:\t48 83 ec 20          \tsub    $0x20,%rsp\n  40783e:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  407842:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  407846:\t89 55 ec             \tmov    %edx,-0x14(%rbp)\n  407849:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40784d:\t48 83 c0 10          \tadd    $0x10,%rax\n  407851:\t41 b9 f9 0a 00 00    \tmov    $0xaf9,%r9d\n  407857:\t41 b8 80 b5 41 00    \tmov    $0x41b580,%r8d\n  40785d:\tb9 38 93 41 00       \tmov    $0x419338,%ecx\n  407862:\tba 3c 00 00 00       \tmov    $0x3c,%edx\n  407867:\tbe 01 a1 41 00       \tmov    $0x41a101,%esi\n  40786c:\t48 89 c7             \tmov    %rax,%rdi\n  40786f:\te8 76 04 01 00       \tcallq  417cea <strlcpy_debug>\n  407874:\t90                   \tnop\n  407875:\tc9                   \tleaveq \n  407876:\tc3                   \tretq   ", "code_s": "__int64 __fastcall third_party_header(__int64 <span class=\"supfact\">a1</span>) {\n  return strlcpy_debug(<span class=\"supfact\">a1</span> + Number, String, Number L, String,\n                       String, Number L);\n}", "code_t": "void __cdecl third_party_header(decode_aprs_t *<span class=\"supfact\">A</span>, char *info,\n                                int ilen) {\n  strlcpy_debug(<span class=\"supfact\">A</span>->g_msg_type, String, Number, String, String,\n                Number);\n}", "var": [{"name": "a1", "type": "extent_buffer *", "pred_name": "eb", "ref_name": "A", "ref_type": "decode_aprs_t *"}], "body_in_train": false}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "0000000000002920 <glMap1f>:\n    2920:\t55                   \tpush   %rbp\n    2921:\t48 89 e5             \tmov    %rsp,%rbp\n    2924:\t48 83 ec 20          \tsub    $0x20,%rsp\n    2928:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    292b:\tf3 0f 11 45 f8       \tmovss  %xmm0,-0x8(%rbp)\n    2930:\tf3 0f 11 4d f4       \tmovss  %xmm1,-0xc(%rbp)\n    2935:\t89 75 f0             \tmov    %esi,-0x10(%rbp)\n    2938:\t89 55 ec             \tmov    %edx,-0x14(%rbp)\n    293b:\t48 89 4d e0          \tmov    %rcx,-0x20(%rbp)\n    293f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2946 <glMap1f+0x26>\n    2946:\t4c 8b 80 e8 06 00 00 \tmov    0x6e8(%rax),%r8\n    294d:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    2951:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    2954:\t8b 75 f0             \tmov    -0x10(%rbp),%esi\n    2957:\tf3 0f 10 45 f4       \tmovss  -0xc(%rbp),%xmm0\n    295c:\t8b 7d f8             \tmov    -0x8(%rbp),%edi\n    295f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    2962:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n    2965:\t66 0f 6e c7          \tmovd   %edi,%xmm0\n    2969:\t89 c7                \tmov    %eax,%edi\n    296b:\t41 ff d0             \tcallq  *%r8\n    296e:\t90                   \tnop\n    296f:\tc9                   \tleaveq \n    2970:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glMap1f(unsigned int <span class=\"supfact\">a1</span>,\n                           unsigned int <span class=\"supfact\">a2</span>,\n                           unsigned int <span class=\"supfact\">a3</span>,\n                           __int64 <span class=\"supfact\">a4</span>, float <span class=\"supfact\">a5</span>,\n                           float <span class=\"supfact\">a6</span>) {\n  return (*(__int64(__fastcall **)(_QWORD, _QWORD, _QWORD, __int64, double,\n                                   float))(glapi_Dispatch + Number L))(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>,\n      <span class=\"supfact\">a4</span>,\n      *(double *)_mm_cvtsi32_si128(LODWORD(<span class=\"supfact\">a5</span>)).m128i_i64,\n      <span class=\"supfact\">a6</span>);\n}", "code_t": "void __cdecl glMap1f(GLenum <span class=\"supfact\">target</span>, GLfloat <span class=\"supfact\">u1</span>,\n                     GLfloat <span class=\"supfact\">u2</span>, GLint <span class=\"supfact\">stride</span>,\n                     GLint <span class=\"supfact\">order</span>,\n                     const GLfloat *<span class=\"supfact\">points</span>) {\n  (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD, const GLfloat *, double,\n                         GLfloat))(glapi_Dispatch + Number L))(\n      <span class=\"supfact\">target</span>, (unsigned int)<span class=\"supfact\">stride</span>,\n      (unsigned int)<span class=\"supfact\">order</span>, <span class=\"supfact\">points</span>,\n      *(double *)_mm_cvtsi32_si128(LODWORD(<span class=\"supfact\">u1</span>)).m128i_i64,\n      <span class=\"supfact\">u2</span>);\n}", "var": [{"name": "a1", "type": "GLenum", "pred_name": "map", "ref_name": "target", "ref_type": "GLenum"}, {"name": "a2", "type": "GLsizei", "pred_name": "mapsize", "ref_name": "stride", "ref_type": "GLint"}, {"name": "a3", "type": "GLint", "pred_name": "stride", "ref_name": "order", "ref_type": "GLint"}, {"name": "a4", "type": "const void *", "pred_name": "payload", "ref_name": "points", "ref_type": "const GLfloat *"}, {"name": "a5", "type": "GLfloat", "pred_name": "u1", "ref_name": "u1", "ref_type": "GLfloat"}, {"name": "a6", "type": "GLfloat", "pred_name": "u2", "ref_name": "u2", "ref_type": "GLfloat"}], "body_in_train": false}, {"repo_owner": "Gage-Myers", "repo_name": "Raytracer-in-c", "path": "Gage-Myers/Raytracer-in-c/cbcfd8805dfb1b23d81f5fcc47c41512877573a9e5aac0f2cf39803add4183c9", "path_in_repo": "Gage-Myers/Raytracer-in-c//raytrace", "objdump": "000000000040133a <initiate>:\n  40133a:\t55                   \tpush   %rbp\n  40133b:\t48 89 e5             \tmov    %rsp,%rbp\n  40133e:\t48 83 ec 40          \tsub    $0x40,%rsp\n  401342:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  401346:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40134a:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  40134e:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n  401352:\t4c 89 45 c8          \tmov    %r8,-0x38(%rbp)\n  401356:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  40135b:\t75 0a                \tjne    401367 <initiate+0x2d>\n  40135d:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  401362:\te9 f6 00 00 00       \tjmpq   40145d <initiate+0x123>\n  401367:\t48 8d 55 ff          \tlea    -0x1(%rbp),%rdx\n  40136b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40136f:\tbe 10 50 40 00       \tmov    $0x405010,%esi\n  401374:\t48 89 c7             \tmov    %rax,%rdi\n  401377:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40137c:\te8 bf fc ff ff       \tcallq  401040 <__isoc99_fscanf@plt>\n  401381:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n  401385:\t3c 36                \tcmp    $0x36,%al\n  401387:\t74 12                \tje     40139b <initiate+0x61>\n  401389:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n  40138d:\t3c 33                \tcmp    $0x33,%al\n  40138f:\t74 0a                \tje     40139b <initiate+0x61>\n  401391:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401396:\te9 c2 00 00 00       \tjmpq   40145d <initiate+0x123>\n  40139b:\t48 8d 45 ff          \tlea    -0x1(%rbp),%rax\n  40139f:\t48 89 c7             \tmov    %rax,%rdi\n  4013a2:\te8 d9 fd ff ff       \tcallq  401180 <atoi@plt>\n  4013a7:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4013ab:\t89 02                \tmov    %eax,(%rdx)\n  4013ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4013b1:\t48 89 c7             \tmov    %rax,%rdi\n  4013b4:\te8 07 fe ff ff       \tcallq  4011c0 <getc@plt>\n  4013b9:\t88 45 ff             \tmov    %al,-0x1(%rbp)\n  4013bc:\teb 26                \tjmp    4013e4 <initiate+0xaa>\n  4013be:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4013c2:\t48 89 c7             \tmov    %rax,%rdi\n  4013c5:\te8 f6 fd ff ff       \tcallq  4011c0 <getc@plt>\n  4013ca:\t88 45 ff             \tmov    %al,-0x1(%rbp)\n  4013cd:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n  4013d1:\t3c 0a                \tcmp    $0xa,%al\n  4013d3:\t75 e9                \tjne    4013be <initiate+0x84>\n  4013d5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4013d9:\t48 89 c7             \tmov    %rax,%rdi\n  4013dc:\te8 df fd ff ff       \tcallq  4011c0 <getc@plt>\n  4013e1:\t88 45 ff             \tmov    %al,-0x1(%rbp)\n  4013e4:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n  4013e8:\t3c 23                \tcmp    $0x23,%al\n  4013ea:\t74 d2                \tje     4013be <initiate+0x84>\n  4013ec:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n  4013f0:\t0f be c0             \tmovsbl %al,%eax\n  4013f3:\t83 e8 30             \tsub    $0x30,%eax\n  4013f6:\t83 f8 09             \tcmp    $0x9,%eax\n  4013f9:\t76 07                \tjbe    401402 <initiate+0xc8>\n  4013fb:\tb8 03 00 00 00       \tmov    $0x3,%eax\n  401400:\teb 5b                \tjmp    40145d <initiate+0x123>\n  401402:\t0f b6 45 ff          \tmovzbl -0x1(%rbp),%eax\n  401406:\t0f be c0             \tmovsbl %al,%eax\n  401409:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40140d:\t48 89 d6             \tmov    %rdx,%rsi\n  401410:\t89 c7                \tmov    %eax,%edi\n  401412:\te8 29 fd ff ff       \tcallq  401140 <ungetc@plt>\n  401417:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n  40141b:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  40141f:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  401423:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401427:\t49 89 f0             \tmov    %rsi,%r8\n  40142a:\tbe 15 50 40 00       \tmov    $0x405015,%esi\n  40142f:\t48 89 c7             \tmov    %rax,%rdi\n  401432:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401437:\te8 04 fc ff ff       \tcallq  401040 <__isoc99_fscanf@plt>\n  40143c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  401440:\t8b 00                \tmov    (%rax),%eax\n  401442:\t3d ff 00 00 00       \tcmp    $0xff,%eax\n  401447:\t7e 0f                \tjle    401458 <initiate+0x11e>\n  401449:\tbf 20 50 40 00       \tmov    $0x405020,%edi\n  40144e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401453:\te8 28 fc ff ff       \tcallq  401080 <printf@plt>\n  401458:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40145d:\tc9                   \tleaveq \n  40145e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall initiate(FILE *<span class=\"supfact\">a1</span>,\n                            __int64 <span class=\"supfact\">a2</span>,\n                            __int64 <span class=\"supfact\">a3</span>, int *<span class=\"supfact\">a4</span>,\n                            int *<span class=\"supfact\">a5</span>) {\n  char <span class=\"supfact\">nptr</span>;\n  if (!<span class=\"supfact\">a1</span>)\n    return Number L;\n  __isoc99_fscanf();\n  if (<span class=\"supfact\">nptr</span> != Number && <span class=\"supfact\">nptr</span> != Number)\n    return Number L;\n  *<span class=\"supfact\">a5</span> = atoi(&<span class=\"supfact\">nptr</span>);\n  for (<span class=\"supfact\">nptr</span> = getc(<span class=\"supfact\">a1</span>);\n       <span class=\"supfact\">nptr</span> == Number;\n       <span class=\"supfact\">nptr</span> = getc(<span class=\"supfact\">a1</span>)) {\n    do\n      <span class=\"supfact\">nptr</span> = getc(<span class=\"supfact\">a1</span>);\n    while (<span class=\"supfact\">nptr</span> != Number);\n  }\n  if ((unsigned int)(<span class=\"supfact\">nptr</span> - Number) > Number)\n    return Number L;\n  ungetc(<span class=\"supfact\">nptr</span>, <span class=\"supfact\">a1</span>);\n  __isoc99_fscanf();\n  if (*<span class=\"supfact\">a4</span> > Number)\n    printf(String);\n  return Number L;\n}", "code_t": "int __cdecl initiate(FILE *<span class=\"supfact\">in</span>, int *<span class=\"supfact\">width</span>,\n                     int *<span class=\"supfact\">height</span>, int *<span class=\"supfact\">maxColor</span>,\n                     int *<span class=\"supfact\">ver</span>) {\n  char <span class=\"supfact\">c</span>;\n  if (!<span class=\"supfact\">in</span>)\n    return Number;\n  __isoc99_fscanf();\n  if (<span class=\"supfact\">c</span> != Number && <span class=\"supfact\">c</span> != Number)\n    return Number;\n  *<span class=\"supfact\">ver</span> = atoi(&<span class=\"supfact\">c</span>);\n  for (<span class=\"supfact\">c</span> = getc(<span class=\"supfact\">in</span>);\n       <span class=\"supfact\">c</span> == Number;\n       <span class=\"supfact\">c</span> = getc(<span class=\"supfact\">in</span>)) {\n    do\n      <span class=\"supfact\">c</span> = getc(<span class=\"supfact\">in</span>);\n    while (<span class=\"supfact\">c</span> != Number);\n  }\n  if ((unsigned int)(<span class=\"supfact\">c</span> - Number) > Number)\n    return Number;\n  ungetc(<span class=\"supfact\">c</span>, <span class=\"supfact\">in</span>);\n  __isoc99_fscanf();\n  if (*<span class=\"supfact\">maxColor</span> > Number)\n    printf(String);\n  return Number;\n}", "var": [{"name": "a1", "type": "FILE *", "pred_name": "fp", "ref_name": "in", "ref_type": "FILE *"}, {"name": "a2", "type": "disappear", "pred_name": "", "ref_name": "width", "ref_type": "int *"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "height", "ref_type": "int *"}, {"name": "a4", "type": "disappear", "pred_name": "", "ref_name": "maxColor", "ref_type": "int *"}, {"name": "a5", "type": "disappear", "pred_name": "", "ref_name": "ver", "ref_type": "int *"}, {"name": "nptr", "type": "char[5]", "pred_name": "num", "ref_name": "c", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "krishnair", "repo_name": "qlz", "path": "krishnair/qlz/c04e1ad6a663364772adc90f7d926ce705fabd1e29e47bd31cce69dcd12bc0b5", "path_in_repo": "krishnair/qlz//qdecomp", "objdump": "0000000000401dab <qlz_decompress>:\n  401dab:\t55                   \tpush   %rbp\n  401dac:\t48 89 e5             \tmov    %rsp,%rbp\n  401daf:\t48 83 ec 30          \tsub    $0x30,%rsp\n  401db3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  401db7:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  401dbb:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  401dbf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401dc3:\t48 89 c7             \tmov    %rax,%rdi\n  401dc6:\te8 7b f5 ff ff       \tcallq  401346 <qlz_size_decompressed>\n  401dcb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401dcf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401dd3:\t0f b6 00             \tmovzbl (%rax),%eax\n  401dd6:\t0f be c0             \tmovsbl %al,%eax\n  401dd9:\t83 e0 01             \tand    $0x1,%eax\n  401ddc:\t85 c0                \ttest   %eax,%eax\n  401dde:\t74 31                \tje     401e11 <qlz_decompress+0x66>\n  401de0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401de4:\t48 89 c7             \tmov    %rax,%rdi\n  401de7:\te8 73 f4 ff ff       \tcallq  40125f <reset_table_decompress>\n  401dec:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n  401df0:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  401df4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  401df8:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n  401dfc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401e00:\t49 89 f8             \tmov    %rdi,%r8\n  401e03:\t48 89 c7             \tmov    %rax,%rdi\n  401e06:\te8 f1 fb ff ff       \tcallq  4019fc <qlz_decompress_core>\n  401e0b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401e0f:\teb 27                \tjmp    401e38 <qlz_decompress+0x8d>\n  401e11:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401e15:\t48 89 c7             \tmov    %rax,%rdi\n  401e18:\te8 f3 f5 ff ff       \tcallq  401410 <qlz_size_header>\n  401e1d:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  401e21:\t48 8d 0c 10          \tlea    (%rax,%rdx,1),%rcx\n  401e25:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  401e29:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401e2d:\t48 89 ce             \tmov    %rcx,%rsi\n  401e30:\t48 89 c7             \tmov    %rax,%rdi\n  401e33:\te8 28 f2 ff ff       \tcallq  401060 <memcpy@plt>\n  401e38:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401e3c:\t48 c7 80 00 90 00 00 \tmovq   $0x0,0x9000(%rax)\n  401e43:\t00 00 00 00 \n  401e47:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401e4b:\t48 89 c7             \tmov    %rax,%rdi\n  401e4e:\te8 0c f4 ff ff       \tcallq  40125f <reset_table_decompress>\n  401e53:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401e57:\tc9                   \tleaveq \n  401e58:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qlz_decompress(_BYTE *<span class=\"supfact\">a1</span>,\n                                  _DWORD *<span class=\"supfact\">a2</span>,\n                                  __int64 <span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">n</span>;\n  <span class=\"supfact\">n</span> = qlz_size_decompressed(<span class=\"supfact\">a1</span>);\n  if ((*<span class=\"supfact\">a1</span> & Number) != Number) {\n    reset_table_decompress();\n    <span class=\"supfact\">n</span> =\n        qlz_decompress_core(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>,\n                            <span class=\"supfact\">n</span>, <span class=\"supfact\">a3</span>);\n  } else {\n    <span class=\"supfact\">v3</span> = qlz_size_header(<span class=\"supfact\">a1</span>);\n    memcpy(<span class=\"supfact\">a2</span>, &<span class=\"supfact\">a1</span>[<span class=\"supfact\">v3</span>],\n           <span class=\"supfact\">n</span>);\n  }\n  *(_QWORD *)(<span class=\"supfact\">a3</span> + Number) = Number L;\n  reset_table_decompress();\n  return <span class=\"supfact\">n</span>;\n}", "code_t": "size_t __cdecl qlz_decompress(const char *<span class=\"supfact\">source</span>,\n                              void *<span class=\"supfact\">destination</span>,\n                              qlz_state_decompress *<span class=\"supfact\">state</span>) {\n  const char *v3;\n  size_t <span class=\"supfact\">dsiz</span>;\n  <span class=\"supfact\">dsiz</span> = qlz_size_decompressed(<span class=\"supfact\">source</span>);\n  if ((*<span class=\"supfact\">source</span> & Number) != Number) {\n    reset_table_decompress(<span class=\"supfact\">state</span>);\n    <span class=\"supfact\">dsiz</span> = qlz_decompress_core(\n        (const unsigned __int8 *)<span class=\"supfact\">source</span>,\n        (unsigned __int8 *)<span class=\"supfact\">destination</span>, <span class=\"supfact\">dsiz</span>,\n        <span class=\"supfact\">state</span>,\n        (const unsigned __int8 *)<span class=\"supfact\">destination</span>);\n  } else {\n    v3 = &<span class=\"supfact\">source</span>[qlz_size_header(<span class=\"supfact\">source</span>)];\n    memcpy(<span class=\"supfact\">destination</span>, v3, <span class=\"supfact\">dsiz</span>);\n  }\n  <span class=\"supfact\">state</span>->stream_counter = Number L;\n  reset_table_decompress(<span class=\"supfact\">state</span>);\n  return <span class=\"supfact\">dsiz</span>;\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "h", "ref_name": "source", "ref_type": "const char *"}, {"name": "a2", "type": "void *", "pred_name": "dest", "ref_name": "destination", "ref_type": "void *"}, {"name": "a3", "type": "size_t", "pred_name": "size", "ref_name": "state", "ref_type": "qlz_state_decompress *"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "n", "type": "disappear", "pred_name": "", "ref_name": "dsiz", "ref_type": "size_t"}], "body_in_train": false}, {"repo_owner": "pranavrao870", "repo_name": "database_postgres", "path": "pranavrao870/database_postgres/0f60ce62b29dfad2c982fdd7b0c6be5e662c097dfba28e1650127d15efeca6e7", "path_in_repo": "pranavrao870/database_postgres//src/backend/nodes/params.o", "objdump": "00000000000001aa <EstimateParamListSpace>:\n 1aa:\t55                   \tpush   %rbp\n 1ab:\t48 89 e5             \tmov    %rsp,%rbp\n 1ae:\t48 83 ec 50          \tsub    $0x50,%rsp\n 1b2:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n 1b6:\t48 c7 45 f0 04 00 00 \tmovq   $0x4,-0x10(%rbp)\n 1bd:\t00 \n 1be:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n 1c3:\t74 0b                \tje     1d0 <EstimateParamListSpace+0x26>\n 1c5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 1c9:\t8b 40 30             \tmov    0x30(%rax),%eax\n 1cc:\t85 c0                \ttest   %eax,%eax\n 1ce:\t7f 09                \tjg     1d9 <EstimateParamListSpace+0x2f>\n 1d0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 1d4:\te9 11 01 00 00       \tjmpq   2ea <EstimateParamListSpace+0x140>\n 1d9:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 1e0:\te9 f1 00 00 00       \tjmpq   2d6 <EstimateParamListSpace+0x12c>\n 1e5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 1e9:\t48 8b 00             \tmov    (%rax),%rax\n 1ec:\t48 85 c0             \ttest   %rax,%rax\n 1ef:\t74 29                \tje     21a <EstimateParamListSpace+0x70>\n 1f1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 1f5:\t4c 8b 00             \tmov    (%rax),%r8\n 1f8:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 1fb:\t8d 70 01             \tlea    0x1(%rax),%esi\n 1fe:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n 202:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 206:\t48 89 d1             \tmov    %rdx,%rcx\n 209:\tba 00 00 00 00       \tmov    $0x0,%edx\n 20e:\t48 89 c7             \tmov    %rax,%rdi\n 211:\t41 ff d0             \tcallq  *%r8\n 214:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 218:\teb 1f                \tjmp    239 <EstimateParamListSpace+0x8f>\n 21a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 21d:\t48 98                \tcltq   \n 21f:\t48 83 c0 03          \tadd    $0x3,%rax\n 223:\t48 c1 e0 04          \tshl    $0x4,%rax\n 227:\t48 89 c2             \tmov    %rax,%rdx\n 22a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 22e:\t48 01 d0             \tadd    %rdx,%rax\n 231:\t48 83 c0 08          \tadd    $0x8,%rax\n 235:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 239:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 23d:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 240:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 243:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 247:\tbe 04 00 00 00       \tmov    $0x4,%esi\n 24c:\t48 89 c7             \tmov    %rax,%rdi\n 24f:\te8 00 00 00 00       \tcallq  254 <EstimateParamListSpace+0xaa>\n 254:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 258:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 25c:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 261:\t48 89 c7             \tmov    %rax,%rdi\n 264:\te8 00 00 00 00       \tcallq  269 <EstimateParamListSpace+0xbf>\n 269:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 26d:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n 271:\t74 17                \tje     28a <EstimateParamListSpace+0xe0>\n 273:\t48 8d 55 cd          \tlea    -0x33(%rbp),%rdx\n 277:\t48 8d 4d ce          \tlea    -0x32(%rbp),%rcx\n 27b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n 27e:\t48 89 ce             \tmov    %rcx,%rsi\n 281:\t89 c7                \tmov    %eax,%edi\n 283:\te8 00 00 00 00       \tcallq  288 <EstimateParamListSpace+0xde>\n 288:\teb 0a                \tjmp    294 <EstimateParamListSpace+0xea>\n 28a:\t66 c7 45 ce 08 00    \tmovw   $0x8,-0x32(%rbp)\n 290:\tc6 45 cd 01          \tmovb   $0x1,-0x33(%rbp)\n 294:\t0f b7 45 ce          \tmovzwl -0x32(%rbp),%eax\n 298:\t0f bf c8             \tmovswl %ax,%ecx\n 29b:\t0f b6 45 cd          \tmovzbl -0x33(%rbp),%eax\n 29f:\t0f b6 d0             \tmovzbl %al,%edx\n 2a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2a6:\t0f b6 40 08          \tmovzbl 0x8(%rax),%eax\n 2aa:\t0f b6 f0             \tmovzbl %al,%esi\n 2ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2b1:\t48 8b 00             \tmov    (%rax),%rax\n 2b4:\t48 89 c7             \tmov    %rax,%rdi\n 2b7:\te8 00 00 00 00       \tcallq  2bc <EstimateParamListSpace+0x112>\n 2bc:\t48 89 c2             \tmov    %rax,%rdx\n 2bf:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 2c3:\t48 89 d6             \tmov    %rdx,%rsi\n 2c6:\t48 89 c7             \tmov    %rax,%rdi\n 2c9:\te8 00 00 00 00       \tcallq  2ce <EstimateParamListSpace+0x124>\n 2ce:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 2d2:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 2d6:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 2da:\t8b 40 30             \tmov    0x30(%rax),%eax\n 2dd:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 2e0:\t0f 8c ff fe ff ff    \tjl     1e5 <EstimateParamListSpace+0x3b>\n 2e6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 2ea:\tc9                   \tleaveq \n 2eb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall EstimateParamListSpace(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  unsigned __int8 <span class=\"supfact\">v3</span>;\n  __int16 <span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  unsigned int <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v8</span> = Number L;\n  if (!<span class=\"supfact\">a1</span> || *(int *)(<span class=\"supfact\">a1</span> + Number) <= Number)\n    return <span class=\"supfact\">v8</span>;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n       ++<span class=\"supfact\">i</span>) {\n    if (*(_QWORD *)<span class=\"supfact\">a1</span>)\n      <span class=\"supfact\">v7</span> = (*(__int64(__fastcall **)(\n          __int64, _QWORD, _QWORD, char *))<span class=\"supfact\">a1</span>)(\n          <span class=\"supfact\">a1</span>, (unsigned int)(<span class=\"supfact\">i</span> + Number),\n          Number L, <span class=\"supfact\">v5</span>);\n    else\n      <span class=\"supfact\">v7</span> =\n          Number * (<span class=\"supfact\">i</span> + Number L) + <span class=\"supfact\">a1</span> + Number;\n    <span class=\"supfact\">v6</span> = *(_DWORD *)(<span class=\"supfact\">v7</span> + Number);\n    <span class=\"supfact\">v8</span> = add_size(<span class=\"supfact\">v8</span>, Number L);\n    <span class=\"supfact\">v8</span> = add_size(<span class=\"supfact\">v8</span>, Number L);\n    if (<span class=\"supfact\">v6</span>) {\n      get_typlenbyval(<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v4</span>,\n                      &<span class=\"supfact\">v3</span>);\n    } else {\n      <span class=\"supfact\">v4</span> = Number;\n      <span class=\"supfact\">v3</span> = Number;\n    }\n    <span class=\"supfact\">v2</span> = datumEstimateSpace(\n        *(_QWORD *)<span class=\"supfact\">v7</span>,\n        *(unsigned __int8 *)(<span class=\"supfact\">v7</span> + Number), <span class=\"supfact\">v3</span>,\n        (unsigned int)<span class=\"supfact\">v4</span>);\n    <span class=\"supfact\">v8</span> = add_size(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v2</span>);\n  }\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "Size __cdecl EstimateParamListSpace(ParamListInfo <span class=\"supfact\">paramLI</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  bool <span class=\"supfact\">typByVal</span>;\n  int16 <span class=\"supfact\">typLen</span>;\n  ParamExternData_0 <span class=\"supfact\">prmdata</span>;\n  Oid <span class=\"supfact\">typeOid</span>;\n  ParamExternData_0 *<span class=\"supfact\">prm</span>;\n  Size <span class=\"supfact\">sz</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">sz</span> = Number L;\n  if (!<span class=\"supfact\">paramLI</span> || <span class=\"supfact\">paramLI</span>->numParams <= Number)\n    return <span class=\"supfact\">sz</span>;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">paramLI</span>->numParams;\n       ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">paramLI</span>->paramFetch)\n      <span class=\"supfact\">prm</span> =\n          (ParamExternData_0 *)<span class=\"supfact\">paramLI</span>->paramFetch(\n              <span class=\"supfact\">paramLI</span>,\n              (unsigned int)(<span class=\"supfact\">i</span> + Number), Number L,\n              &<span class=\"supfact\">prmdata</span>);\n    else\n      <span class=\"supfact\">prm</span> = &<span class=\"supfact\">paramLI</span>->params[<span class=\"supfact\">i</span>];\n    <span class=\"supfact\">typeOid</span> = <span class=\"supfact\">prm</span>->ptype;\n    <span class=\"supfact\">sz</span> = add_size(<span class=\"supfact\">sz</span>, Number L);\n    <span class=\"supfact\">sz</span> = add_size(<span class=\"supfact\">sz</span>, Number L);\n    if (<span class=\"supfact\">typeOid</span>) {\n      get_typlenbyval(<span class=\"supfact\">typeOid</span>, &<span class=\"supfact\">typLen</span>,\n                      &<span class=\"supfact\">typByVal</span>);\n    } else {\n      <span class=\"supfact\">typLen</span> = Number;\n      <span class=\"supfact\">typByVal</span> = Number;\n    }\n    <span class=\"supfact\">v2</span> = datumEstimateSpace(\n        <span class=\"supfact\">prm</span>->value, <span class=\"supfact\">prm</span>->isnull,\n        <span class=\"supfact\">typByVal</span>, (unsigned int)<span class=\"supfact\">typLen</span>);\n    <span class=\"supfact\">sz</span> = add_size(<span class=\"supfact\">sz</span>, <span class=\"supfact\">v2</span>);\n  }\n  return <span class=\"supfact\">sz</span>;\n}", "var": [{"name": "a1", "type": "List_0 *", "pred_name": "list", "ref_name": "paramLI", "ref_type": "ParamListInfo"}, {"name": "v2", "type": "char *", "pred_name": "__unk__", "ref_name": "v2", "ref_type": "__int64"}, {"name": "v3", "type": "bool", "pred_name": "isnull", "ref_name": "typByVal", "ref_type": "bool"}, {"name": "v4", "type": "bool", "pred_name": "__unk__", "ref_name": "typLen", "ref_type": "int16"}, {"name": "v5", "type": "__unk__", "pred_name": "__unk__", "ref_name": "prmdata", "ref_type": "struct ParamExternData_0 { Datum value; bool isnull; PADDING (1); uint16 pflags; Oid ptype; }"}, {"name": "v6", "type": "int", "pred_name": "num", "ref_name": "typeOid", "ref_type": "Oid"}, {"name": "v7", "type": "List_0 *", "pred_name": "__unk__", "ref_name": "prm", "ref_type": "ParamExternData_0 *"}, {"name": "v8", "type": "List_0 *", "pred_name": "__unk__", "ref_name": "sz", "ref_type": "Size"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/9d9b3cb984271790df9fd014f222508bdb151ed2c5c171fdadfc4d05e72f7a86", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Source/CMakeFiles/CMakeLib.dir/cmComputeLinkDepends.cxx.o", "objdump": "", "code_s": "__int64 __fastcall cmComputeLinkDepends DependSet\nDependSet(cmComputeLinkDepends DependSet *<span class=\"supfact\">this</span>,\n          const cmComputeLinkDepends DependSet *<span class=\"supfact\">a2</span>) {\n  return std set<int> set((__int64)<span class=\"supfact\">this</span>,\n                          (__int64)<span class=\"supfact\">a2</span>);\n}", "code_t": "__int64 __fastcall cmComputeLinkDepends DependSet\nDependSet(cmComputeLinkDepends DependSet *<span class=\"supfact\">this</span>,\n          const cmComputeLinkDepends DependSet *<span class=\"supfact\">a2</span>) {\n  return std set<int> set((__int64)<span class=\"supfact\">this</span>,\n                          (__int64)<span class=\"supfact\">a2</span>);\n}", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "cmComputeLinkDepends::DependSet *"}, {"name": "a2", "type": "const int *", "pred_name": "a2", "ref_name": "a2", "ref_type": "const cmComputeLinkDepends::DependSet *"}], "body_in_train": false}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "000000000000e1ea <glBindFramebufferEXT>:\n    e1ea:\t55                   \tpush   %rbp\n    e1eb:\t48 89 e5             \tmov    %rsp,%rbp\n    e1ee:\t48 83 ec 10          \tsub    $0x10,%rsp\n    e1f2:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    e1f5:\t89 75 f8             \tmov    %esi,-0x8(%rbp)\n    e1f8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e1ff <glBindFramebufferEXT+0x15>\n    e1ff:\t48 8b 88 20 1a 00 00 \tmov    0x1a20(%rax),%rcx\n    e206:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    e209:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    e20c:\t89 d6                \tmov    %edx,%esi\n    e20e:\t89 c7                \tmov    %eax,%edi\n    e210:\tff d1                \tcallq  *%rcx\n    e212:\t90                   \tnop\n    e213:\tc9                   \tleaveq \n    e214:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glBindFramebufferEXT(unsigned int <span class=\"supfact\">a1</span>,\n                                        unsigned int <span class=\"supfact\">a2</span>) {\n  return (*(__int64(__fastcall **)(_QWORD, _QWORD))(glapi_Dispatch + Number L))(\n      <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n}", "code_t": "void __cdecl glBindFramebufferEXT(GLenum <span class=\"supfact\">target</span>,\n                                  GLuint <span class=\"supfact\">framebuffer</span>) {\n  (*(void(__fastcall **)(_QWORD, _QWORD))(glapi_Dispatch + Number L))(\n      <span class=\"supfact\">target</span>, <span class=\"supfact\">framebuffer</span>);\n}", "var": [{"name": "a1", "type": "unsigned int", "pred_name": "a1", "ref_name": "target", "ref_type": "GLenum"}, {"name": "a2", "type": "unsigned int", "pred_name": "a2", "ref_name": "framebuffer", "ref_type": "GLuint"}], "body_in_train": false}, {"repo_owner": "notno", "repo_name": "rosq", "path": "notno/rosq/35e3cec068f344418bdfabd46d509df9f68a2f36f189653cffe62270faf47ed5", "path_in_repo": "notno/rosq/src/functions", "objdump": "0000000000403f10 <mpc_err_char_unescape>:\n  403f10:\t55                   \tpush   %rbp\n  403f11:\t48 89 e5             \tmov    %rsp,%rbp\n  403f14:\t89 f8                \tmov    %edi,%eax\n  403f16:\t88 45 fc             \tmov    %al,-0x4(%rbp)\n  403f19:\tc6 05 09 f3 00 00 27 \tmovb   $0x27,0xf309(%rip)        # 413229 <char_unescape_buffer>\n  403f20:\tc6 05 03 f3 00 00 20 \tmovb   $0x20,0xf303(%rip)        # 41322a <char_unescape_buffer+0x1>\n  403f27:\tc6 05 fd f2 00 00 27 \tmovb   $0x27,0xf2fd(%rip)        # 41322b <char_unescape_buffer+0x2>\n  403f2e:\t0f be 45 fc          \tmovsbl -0x4(%rbp),%eax\n  403f32:\t83 f8 20             \tcmp    $0x20,%eax\n  403f35:\t77 4b                \tja     403f82 <mpc_err_char_unescape+0x72>\n  403f37:\t89 c0                \tmov    %eax,%eax\n  403f39:\t48 8b 04 c5 40 e6 40 \tmov    0x40e640(,%rax,8),%rax\n  403f40:\t00 \n  403f41:\tff e0                \tjmpq   *%rax\n  403f43:\tb8 e8 e5 40 00       \tmov    $0x40e5e8,%eax\n  403f48:\teb 47                \tjmp    403f91 <mpc_err_char_unescape+0x81>\n  403f4a:\tb8 ed e5 40 00       \tmov    $0x40e5ed,%eax\n  403f4f:\teb 40                \tjmp    403f91 <mpc_err_char_unescape+0x81>\n  403f51:\tb8 f7 e5 40 00       \tmov    $0x40e5f7,%eax\n  403f56:\teb 39                \tjmp    403f91 <mpc_err_char_unescape+0x81>\n  403f58:\tb8 00 e6 40 00       \tmov    $0x40e600,%eax\n  403f5d:\teb 32                \tjmp    403f91 <mpc_err_char_unescape+0x81>\n  403f5f:\tb8 10 e6 40 00       \tmov    $0x40e610,%eax\n  403f64:\teb 2b                \tjmp    403f91 <mpc_err_char_unescape+0x81>\n  403f66:\tb8 1d e6 40 00       \tmov    $0x40e61d,%eax\n  403f6b:\teb 24                \tjmp    403f91 <mpc_err_char_unescape+0x81>\n  403f6d:\tb8 2a e6 40 00       \tmov    $0x40e62a,%eax\n  403f72:\teb 1d                \tjmp    403f91 <mpc_err_char_unescape+0x81>\n  403f74:\tb8 32 e6 40 00       \tmov    $0x40e632,%eax\n  403f79:\teb 16                \tjmp    403f91 <mpc_err_char_unescape+0x81>\n  403f7b:\tb8 36 e6 40 00       \tmov    $0x40e636,%eax\n  403f80:\teb 0f                \tjmp    403f91 <mpc_err_char_unescape+0x81>\n  403f82:\t0f b6 45 fc          \tmovzbl -0x4(%rbp),%eax\n  403f86:\t88 05 9e f2 00 00    \tmov    %al,0xf29e(%rip)        # 41322a <char_unescape_buffer+0x1>\n  403f8c:\tb8 29 32 41 00       \tmov    $0x413229,%eax\n  403f91:\t5d                   \tpop    %rbp\n  403f92:\tc3                   \tretq   ", "code_s": "char *__fastcall mpc_err_char_unescape(char <span class=\"supfact\">a1</span>) {\n  char *<span class=\"supfact\">result</span>;\n  char_unescape_buffer = Number;\n  byte_41322A = Number;\n  byte_41322B = Number;\n  switch (<span class=\"supfact\">a1</span>) {\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  default:\n    byte_41322A = <span class=\"supfact\">a1</span>;\n    <span class=\"supfact\">result</span> = &char_unescape_buffer;\n    break;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "char *__cdecl mpc_err_char_unescape(char <span class=\"supfact\">c</span>) {\n  char *<span class=\"supfact\">result</span>;\n  char_unescape_buffer[Number] = Number;\n  char_unescape_buffer[Number] = Number;\n  char_unescape_buffer[Number] = Number;\n  switch (<span class=\"supfact\">c</span>) {\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  case Number:\n    <span class=\"supfact\">result</span> = String;\n    break;\n  default:\n    char_unescape_buffer[Number] = <span class=\"supfact\">c</span>;\n    <span class=\"supfact\">result</span> = char_unescape_buffer;\n    break;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "char", "pred_name": "c", "ref_name": "c", "ref_type": "char"}, {"name": "result", "type": "char *", "pred_name": "result", "ref_name": "result", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/85db5fd110c71fb40e75d55507ec0da5d6043315bc8b6a036d234c5dede001f6", "path_in_repo": "XanClic/qemu//x86_64-softmmu/hw/i386/xen/xen-hvm.o", "objdump": "0000000000001e74 <_nocheck__trace_xen_map_resource_ioreq>:\n    1e74:\t55                   \tpush   %rbp\n    1e75:\t48 89 e5             \tmov    %rsp,%rbp\n    1e78:\t41 54                \tpush   %r12\n    1e7a:\t53                   \tpush   %rbx\n    1e7b:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1e7f:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    1e82:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    1e86:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1e8d:\t00 00 \n    1e8f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1e93:\t31 c0                \txor    %eax,%eax\n    1e95:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1e9b <_nocheck__trace_xen_map_resource_ioreq+0x27>\n    1e9b:\t85 c0                \ttest   %eax,%eax\n    1e9d:\t0f 95 c0             \tsetne  %al\n    1ea0:\t0f b6 c0             \tmovzbl %al,%eax\n    1ea3:\t48 85 c0             \ttest   %rax,%rax\n    1ea6:\t74 64                \tje     1f0c <_nocheck__trace_xen_map_resource_ioreq+0x98>\n    1ea8:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 1eaf <_nocheck__trace_xen_map_resource_ioreq+0x3b>\n    1eaf:\t66 85 c0             \ttest   %ax,%ax\n    1eb2:\t74 58                \tje     1f0c <_nocheck__trace_xen_map_resource_ioreq+0x98>\n    1eb4:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    1eb9:\te8 fd e3 ff ff       \tcallq  2bb <qemu_loglevel_mask>\n    1ebe:\t84 c0                \ttest   %al,%al\n    1ec0:\t74 4a                \tje     1f0c <_nocheck__trace_xen_map_resource_ioreq+0x98>\n    1ec2:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1ec6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ecb:\t48 89 c7             \tmov    %rax,%rdi\n    1ece:\te8 00 00 00 00       \tcallq  1ed3 <_nocheck__trace_xen_map_resource_ioreq+0x5f>\n    1ed3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1ed7:\t49 89 c4             \tmov    %rax,%r12\n    1eda:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1ede:\t48 89 c3             \tmov    %rax,%rbx\n    1ee1:\te8 00 00 00 00       \tcallq  1ee6 <_nocheck__trace_xen_map_resource_ioreq+0x72>\n    1ee6:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n    1eea:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    1eed:\t49 89 c9             \tmov    %rcx,%r9\n    1ef0:\t41 89 d0             \tmov    %edx,%r8d\n    1ef3:\t4c 89 e1             \tmov    %r12,%rcx\n    1ef6:\t48 89 da             \tmov    %rbx,%rdx\n    1ef9:\t89 c6                \tmov    %eax,%esi\n    1efb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1f02 <_nocheck__trace_xen_map_resource_ioreq+0x8e>\n    1f02:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f07:\te8 00 00 00 00       \tcallq  1f0c <_nocheck__trace_xen_map_resource_ioreq+0x98>\n    1f0c:\t90                   \tnop\n    1f0d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1f11:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1f18:\t00 00 \n    1f1a:\t74 05                \tje     1f21 <_nocheck__trace_xen_map_resource_ioreq+0xad>\n    1f1c:\te8 00 00 00 00       \tcallq  1f21 <_nocheck__trace_xen_map_resource_ioreq+0xad>\n    1f21:\t48 83 c4 30          \tadd    $0x30,%rsp\n    1f25:\t5b                   \tpop    %rbx\n    1f26:\t41 5c                \tpop    %r12\n    1f28:\t5d                   \tpop    %rbp\n    1f29:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_xen_map_resource_ioreq(\n    unsigned int <span class=\"supfact\">a1</span>, const void *<span class=\"supfact\">a2</span>) {\n  __suseconds_t <span class=\"supfact\">v2</span>;\n  __time_t <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_XEN_MAP_RESOURCE_IOREQ_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    <span class=\"supfact\">v2</span> = <span class=\"supfact\">tv</span>.tv_usec;\n    <span class=\"supfact\">v3</span> = <span class=\"supfact\">tv</span>.tv_sec;\n    <span class=\"supfact\">v4</span> = qemu_get_thread_id();\n    qemu_log(String, <span class=\"supfact\">v4</span>, <span class=\"supfact\">v3</span>, <span class=\"supfact\">v2</span>,\n             <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v7</span>;\n}", "code_t": "void __cdecl nocheck__trace_xen_map_resource_ioreq(uint32_t <span class=\"supfact\">id</span>,\n                                                   void *<span class=\"supfact\">addr</span>) {\n  __suseconds_t <span class=\"supfact\">v2</span>;\n  __time_t <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_XEN_MAP_RESOURCE_IOREQ_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    <span class=\"supfact\">v2</span> = <span class=\"supfact\">_now</span>.tv_usec;\n    <span class=\"supfact\">v3</span> = <span class=\"supfact\">_now</span>.tv_sec;\n    <span class=\"supfact\">v4</span> = qemu_get_thread_id();\n    qemu_log(String, <span class=\"supfact\">v4</span>, <span class=\"supfact\">v3</span>, <span class=\"supfact\">v2</span>,\n             <span class=\"supfact\">id</span>, <span class=\"supfact\">addr</span>);\n  }\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "addr", "ref_name": "id", "ref_type": "uint32_t"}, {"name": "a2", "type": "void *", "pred_name": "vaddr", "ref_name": "addr", "ref_type": "void *"}, {"name": "v2", "type": "__suseconds_t", "pred_name": "v2", "ref_name": "v2", "ref_type": "__suseconds_t"}, {"name": "v3", "type": "__time_t", "pred_name": "v3", "ref_name": "v3", "ref_type": "__time_t"}, {"name": "v4", "type": "unsigned int", "pred_name": "v4", "ref_name": "v4", "ref_type": "unsigned int"}, {"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "_now", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v7", "type": "unsigned __int64", "pred_name": "v6", "ref_name": "v6", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "android-energy", "repo_name": "platform_external_qemu-android", "path": "android-energy/platform_external_qemu-android/65450ff6ac250e0c665d986b0c28d4ef889dba51c2a5f86b4c4b13685c28c6e6", "path_in_repo": "android-energy/platform_external_qemu-android//hw/misc/macio/mac_dbdma.o", "objdump": "0000000000000cf0 <DBDMA_run>:\n     cf0:\t55                   \tpush   %rbp\n     cf1:\t48 89 e5             \tmov    %rsp,%rbp\n     cf4:\t48 83 ec 20          \tsub    $0x20,%rsp\n     cf8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     cfc:\tc7 45 f0 00 00 00 00 \tmovl   $0x0,-0x10(%rbp)\n     d03:\teb 66                \tjmp    d6b <DBDMA_run+0x7b>\n     d05:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n     d08:\t48 98                \tcltq   \n     d0a:\t48 69 c0 e0 02 00 00 \timul   $0x2e0,%rax,%rax\n     d11:\t48 8d 90 f0 00 00 00 \tlea    0xf0(%rax),%rdx\n     d18:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d1c:\t48 01 d0             \tadd    %rdx,%rax\n     d1f:\t48 83 c0 08          \tadd    $0x8,%rax\n     d23:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d27:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     d2b:\t8b 40 08             \tmov    0x8(%rax),%eax\n     d2e:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     d31:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     d35:\t0f b6 80 80 00 00 00 \tmovzbl 0x80(%rax),%eax\n     d3c:\t83 f0 01             \txor    $0x1,%eax\n     d3f:\t84 c0                \ttest   %al,%al\n     d41:\t74 24                \tje     d67 <DBDMA_run+0x77>\n     d43:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     d46:\t25 00 80 00 00       \tand    $0x8000,%eax\n     d4b:\t85 c0                \ttest   %eax,%eax\n     d4d:\t74 18                \tje     d67 <DBDMA_run+0x77>\n     d4f:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     d52:\t25 00 04 00 00       \tand    $0x400,%eax\n     d57:\t85 c0                \ttest   %eax,%eax\n     d59:\t74 0c                \tje     d67 <DBDMA_run+0x77>\n     d5b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     d5f:\t48 89 c7             \tmov    %rax,%rdi\n     d62:\te8 25 fd ff ff       \tcallq  a8c <channel_run>\n     d67:\t83 45 f0 01          \taddl   $0x1,-0x10(%rbp)\n     d6b:\t83 7d f0 1f          \tcmpl   $0x1f,-0x10(%rbp)\n     d6f:\t7e 94                \tjle    d05 <DBDMA_run+0x15>\n     d71:\t90                   \tnop\n     d72:\t90                   \tnop\n     d73:\tc9                   \tleaveq \n     d74:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall DBDMA_run(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v1</span>;\n  unsigned __int64 <span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v4</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v1</span> = Number L * <span class=\"supfact\">i</span> + Number;\n    <span class=\"supfact\">v4</span> =\n        *(_DWORD *)(<span class=\"supfact\">v1</span> + <span class=\"supfact\">a1</span> + Number);\n    <span class=\"supfact\">result</span> =\n        *(unsigned __int8 *)(<span class=\"supfact\">v1</span> + <span class=\"supfact\">a1</span> + Number) ^\n        Number;\n    if (*(_BYTE *)(<span class=\"supfact\">v1</span> + <span class=\"supfact\">a1</span> + Number) !=\n        Number) {\n      <span class=\"supfact\">result</span> = (unsigned __int16)<span class=\"supfact\">v4</span> & Number;\n      if ((<span class=\"supfact\">v4</span> & Number) != Number) {\n        <span class=\"supfact\">result</span> = <span class=\"supfact\">v4</span> & Number;\n        if ((<span class=\"supfact\">v4</span> & Number) != Number)\n          <span class=\"supfact\">result</span> =\n              channel_run(<span class=\"supfact\">v1</span> + <span class=\"supfact\">a1</span> + Number);\n      }\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl DBDMA_run(DBDMAState *<span class=\"supfact\">s</span>) {\n  __int64 <span class=\"supfact\">v1</span>;\n  int <span class=\"supfact\">channel</span>;\n  uint32_t <span class=\"supfact\">status</span>;\n  for (<span class=\"supfact\">channel</span> = Number; <span class=\"supfact\">channel</span> <= Number;\n       ++<span class=\"supfact\">channel</span>) {\n    <span class=\"supfact\">v1</span> = Number L * <span class=\"supfact\">channel</span> + Number;\n    <span class=\"supfact\">status</span> = *(_DWORD *)((char *)&<span class=\"supfact\">s</span>->mem\n                                             .parent_obj.properties.tqh_first +\n                                         <span class=\"supfact\">v1</span>);\n    if (!*(&<span class=\"supfact\">s</span>->mem.warning_printed + <span class=\"supfact\">v1</span>) &&\n        (<span class=\"supfact\">status</span> & Number) != Number &&\n        (<span class=\"supfact\">status</span> & Number) != Number)\n      channel_run(\n          (DBDMA_channel_0 *)((char *)&<span class=\"supfact\">s</span>->mem.parent_obj.free +\n                              <span class=\"supfact\">v1</span>));\n  }\n}", "var": [{"name": "a1", "type": "DBDMAState *", "pred_name": "s", "ref_name": "s", "ref_type": "DBDMAState *"}, {"name": "v1", "type": "__int64", "pred_name": "v1", "ref_name": "v1", "ref_type": "__int64"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "i", "type": "int", "pred_name": "channel", "ref_name": "channel", "ref_type": "int"}, {"name": "v4", "type": "uint32_t", "pred_name": "status", "ref_name": "status", "ref_type": "uint32_t"}], "body_in_train": false}, {"repo_owner": "kjkasi", "repo_name": "030005", "path": "kjkasi/030005/42e3536ccbc1b695fb11b7d977771ee12fe1f447e7c6cf84d9004fd03c1822ae", "path_in_repo": "kjkasi/030005/ngos/JWNR2000_4EMRUS/SW/opensource/openssl/demos/eay/loadrsa", "objdump": "000000000041575e <BN_bin2bn>:\n  41575e:\t48 83 ec 48          \tsub    $0x48,%rsp\n  415762:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n  415767:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n  41576b:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n  415770:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n  415776:\t75 0a                \tjne    415782 <BN_bin2bn+0x24>\n  415778:\te8 cd f5 ff ff       \tcallq  414d4a <BN_new>\n  41577d:\t48 89 44 24 08       \tmov    %rax,0x8(%rsp)\n  415782:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n  415788:\t75 0a                \tjne    415794 <BN_bin2bn+0x36>\n  41578a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41578f:\te9 b4 01 00 00       \tjmpq   415948 <BN_bin2bn+0x1ea>\n  415794:\t48 c7 44 24 28 00 00 \tmovq   $0x0,0x28(%rsp)\n  41579b:\t00 00 \n  41579d:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n  4157a1:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n  4157a5:\t83 7c 24 34 00       \tcmpl   $0x0,0x34(%rsp)\n  4157aa:\t75 16                \tjne    4157c2 <BN_bin2bn+0x64>\n  4157ac:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4157b1:\tc7 40 08 00 00 00 00 \tmovl   $0x0,0x8(%rax)\n  4157b8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4157bd:\te9 86 01 00 00       \tjmpq   415948 <BN_bin2bn+0x1ea>\n  4157c2:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n  4157c6:\t83 c0 06             \tadd    $0x6,%eax\n  4157c9:\tc1 e0 03             \tshl    $0x3,%eax\n  4157cc:\t83 e8 01             \tsub    $0x1,%eax\n  4157cf:\t8d 50 1f             \tlea    0x1f(%rax),%edx\n  4157d2:\t85 c0                \ttest   %eax,%eax\n  4157d4:\t0f 48 c2             \tcmovs  %edx,%eax\n  4157d7:\tc1 f8 05             \tsar    $0x5,%eax\n  4157da:\t89 c2                \tmov    %eax,%edx\n  4157dc:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4157e1:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  4157e4:\t39 c2                \tcmp    %eax,%edx\n  4157e6:\t7e 2c                \tjle    415814 <BN_bin2bn+0xb6>\n  4157e8:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n  4157ec:\t83 c0 02             \tadd    $0x2,%eax\n  4157ef:\t8d 50 03             \tlea    0x3(%rax),%edx\n  4157f2:\t85 c0                \ttest   %eax,%eax\n  4157f4:\t0f 48 c2             \tcmovs  %edx,%eax\n  4157f7:\tc1 f8 02             \tsar    $0x2,%eax\n  4157fa:\t8d 50 01             \tlea    0x1(%rax),%edx\n  4157fd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  415802:\t89 d6                \tmov    %edx,%esi\n  415804:\t48 89 c7             \tmov    %rax,%rdi\n  415807:\te8 97 f9 ff ff       \tcallq  4151a3 <bn_expand2>\n  41580c:\t48 85 c0             \ttest   %rax,%rax\n  41580f:\t0f 94 c0             \tsete   %al\n  415812:\teb 09                \tjmp    41581d <BN_bin2bn+0xbf>\n  415814:\t48 83 7c 24 08 00    \tcmpq   $0x0,0x8(%rsp)\n  41581a:\t0f 94 c0             \tsete   %al\n  41581d:\t84 c0                \ttest   %al,%al\n  41581f:\t74 0a                \tje     41582b <BN_bin2bn+0xcd>\n  415821:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  415826:\te9 1d 01 00 00       \tjmpq   415948 <BN_bin2bn+0x1ea>\n  41582b:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n  41582f:\t83 e8 01             \tsub    $0x1,%eax\n  415832:\tc1 e8 02             \tshr    $0x2,%eax\n  415835:\t83 c0 01             \tadd    $0x1,%eax\n  415838:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n  41583c:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n  415840:\t83 e8 01             \tsub    $0x1,%eax\n  415843:\t83 e0 03             \tand    $0x3,%eax\n  415846:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n  41584a:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n  41584e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  415853:\t89 50 08             \tmov    %edx,0x8(%rax)\n  415856:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  41585b:\tc7 40 10 00 00 00 00 \tmovl   $0x0,0x10(%rax)\n  415862:\teb 68                \tjmp    4158cc <BN_bin2bn+0x16e>\n  415864:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  415869:\t48 c1 e0 08          \tshl    $0x8,%rax\n  41586d:\t48 89 c1             \tmov    %rax,%rcx\n  415870:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  415875:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  415879:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n  41587e:\t0f b6 00             \tmovzbl (%rax),%eax\n  415881:\t0f b6 c0             \tmovzbl %al,%eax\n  415884:\t48 09 c8             \tor     %rcx,%rax\n  415887:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n  41588c:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n  415890:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  415893:\t89 54 24 38          \tmov    %edx,0x38(%rsp)\n  415897:\t85 c0                \ttest   %eax,%eax\n  415899:\t75 31                \tjne    4158cc <BN_bin2bn+0x16e>\n  41589b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4158a0:\t48 8b 00             \tmov    (%rax),%rax\n  4158a3:\t83 6c 24 3c 01       \tsubl   $0x1,0x3c(%rsp)\n  4158a8:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n  4158ac:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  4158b0:\t48 01 c2             \tadd    %rax,%rdx\n  4158b3:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  4158b8:\t48 89 02             \tmov    %rax,(%rdx)\n  4158bb:\t48 c7 44 24 28 00 00 \tmovq   $0x0,0x28(%rsp)\n  4158c2:\t00 00 \n  4158c4:\tc7 44 24 38 03 00 00 \tmovl   $0x3,0x38(%rsp)\n  4158cb:\t00 \n  4158cc:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n  4158d0:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  4158d3:\t89 54 24 34          \tmov    %edx,0x34(%rsp)\n  4158d7:\t85 c0                \ttest   %eax,%eax\n  4158d9:\t75 89                \tjne    415864 <BN_bin2bn+0x106>\n  4158db:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4158e0:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4158e3:\t85 c0                \ttest   %eax,%eax\n  4158e5:\t7e 5c                \tjle    415943 <BN_bin2bn+0x1e5>\n  4158e7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4158ec:\t48 8b 10             \tmov    (%rax),%rdx\n  4158ef:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  4158f4:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4158f7:\t48 98                \tcltq   \n  4158f9:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4158fd:\t48 83 e8 08          \tsub    $0x8,%rax\n  415901:\t48 01 d0             \tadd    %rdx,%rax\n  415904:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n  415909:\teb 29                \tjmp    415934 <BN_bin2bn+0x1d6>\n  41590b:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n  415910:\t48 8d 50 f8          \tlea    -0x8(%rax),%rdx\n  415914:\t48 89 54 24 20       \tmov    %rdx,0x20(%rsp)\n  415919:\t48 8b 00             \tmov    (%rax),%rax\n  41591c:\t48 85 c0             \ttest   %rax,%rax\n  41591f:\t75 21                \tjne    415942 <BN_bin2bn+0x1e4>\n  415921:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  415926:\t8b 40 08             \tmov    0x8(%rax),%eax\n  415929:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  41592c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  415931:\t89 50 08             \tmov    %edx,0x8(%rax)\n  415934:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  415939:\t8b 40 08             \tmov    0x8(%rax),%eax\n  41593c:\t85 c0                \ttest   %eax,%eax\n  41593e:\t7f cb                \tjg     41590b <BN_bin2bn+0x1ad>\n  415940:\teb 01                \tjmp    415943 <BN_bin2bn+0x1e5>\n  415942:\t90                   \tnop\n  415943:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  415948:\t48 83 c4 48          \tadd    $0x48,%rsp\n  41594c:\tc3                   \tretq   ", "code_s": "_BYTE *__fastcall BN_bin2bn(unsigned __int8 *<span class=\"supfact\">a1</span>,\n                            int <span class=\"supfact\">a2</span>, _BYTE *<span class=\"supfact\">a3</span>) {\n  _BYTE *result;\n  int v4;\n  bool v5;\n  unsigned __int8 *v6;\n  _QWORD *v8;\n  _BYTE *<span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  unsigned int <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v9</span> = <span class=\"supfact\">a3</span>;\n  if (!<span class=\"supfact\">a3</span>)\n    <span class=\"supfact\">v9</span> = BN_new();\n  if (!<span class=\"supfact\">v9</span>)\n    return Number L;\n  <span class=\"supfact\">v12</span> = Number L;\n  <span class=\"supfact\">v13</span> = <span class=\"supfact\">a2</span>;\n  if (<span class=\"supfact\">a2</span>) {\n    if ((Number * (<span class=\"supfact\">a2</span> + Number) - Number) / Number <=\n        *((_DWORD *)<span class=\"supfact\">v9</span> + Number)) {\n      v5 = <span class=\"supfact\">v9</span> == Number L;\n    } else {\n      v4 = <span class=\"supfact\">a2</span> + Number;\n      if (<span class=\"supfact\">a2</span> + Number < Number)\n        v4 = <span class=\"supfact\">a2</span> + Number;\n      v5 = bn_expand2((__int64)<span class=\"supfact\">v9</span>, (v4 >> Number) + Number) ==\n           Number;\n    }\n    if (v5) {\n      result = Number L;\n    } else {\n      <span class=\"supfact\">v15</span> =\n          ((unsigned int)(<span class=\"supfact\">a2</span> - Number) >> Number) + Number;\n      <span class=\"supfact\">v14</span> = ((_BYTE)<span class=\"supfact\">a2</span> - Number) & Number;\n      *((_DWORD *)<span class=\"supfact\">v9</span> + Number) = <span class=\"supfact\">v15</span>;\n      *((_DWORD *)<span class=\"supfact\">v9</span> + Number) = Number;\n      while (<span class=\"supfact\">v13</span>--) {\n        v6 = <span class=\"supfact\">a1</span>++;\n        <span class=\"supfact\">v12</span> = (<span class=\"supfact\">v12</span> << Number) | *v6;\n        LODWORD(v6) = <span class=\"supfact\">v14</span>--;\n        if (!(_DWORD)v6) {\n          *(_QWORD *)(*(_QWORD *)<span class=\"supfact\">v9</span> +\n                      Number L * --<span class=\"supfact\">v15</span>) = <span class=\"supfact\">v12</span>;\n          <span class=\"supfact\">v12</span> = Number L;\n          <span class=\"supfact\">v14</span> = Number;\n        }\n      }\n      if (*((int *)<span class=\"supfact\">v9</span> + Number) > Number) {\n        <span class=\"supfact\">v11</span> = *(_QWORD *)<span class=\"supfact\">v9</span> +\n                              Number L * *((int *)<span class=\"supfact\">v9</span> + Number) -\n                              Number;\n        while (*((int *)<span class=\"supfact\">v9</span> + Number) > Number) {\n          v8 = (_QWORD *)<span class=\"supfact\">v11</span>;\n          <span class=\"supfact\">v11</span> -= Number L;\n          if (*v8)\n            break;\n          --*((_DWORD *)<span class=\"supfact\">v9</span> + Number);\n        }\n      }\n      result = <span class=\"supfact\">v9</span>;\n    }\n  } else {\n    *((_DWORD *)<span class=\"supfact\">v9</span> + Number) = Number;\n    result = <span class=\"supfact\">v9</span>;\n  }\n  return result;\n}", "code_t": "BIGNUM *__cdecl BN_bin2bn(const unsigned __int8 *<span class=\"supfact\">s</span>,\n                          int <span class=\"supfact\">len</span>,\n                          BIGNUM *<span class=\"supfact\">ret</span>) {\n  BIGNUM *result;\n  int v4;\n  bool v5;\n  const unsigned __int8 *v6;\n  unsigned __int64 *v8;\n  BIGNUM *<span class=\"supfact\">reta</span>;\n  unsigned __int64 *<span class=\"supfact\">ftl</span>;\n  unsigned __int64 <span class=\"supfact\">l</span>;\n  int <span class=\"supfact\">n</span>;\n  int <span class=\"supfact\">m</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">reta</span> = <span class=\"supfact\">ret</span>;\n  if (!<span class=\"supfact\">ret</span>)\n    <span class=\"supfact\">reta</span> = BN_new();\n  if (!<span class=\"supfact\">reta</span>)\n    return Number L;\n  <span class=\"supfact\">l</span> = Number L;\n  <span class=\"supfact\">n</span> = <span class=\"supfact\">len</span>;\n  if (<span class=\"supfact\">len</span>) {\n    if ((Number * (<span class=\"supfact\">len</span> + Number) - Number) / Number <=\n        <span class=\"supfact\">reta</span>->dmax) {\n      v5 = <span class=\"supfact\">reta</span> == Number L;\n    } else {\n      v4 = <span class=\"supfact\">len</span> + Number;\n      if (<span class=\"supfact\">len</span> + Number < Number)\n        v4 = <span class=\"supfact\">len</span> + Number;\n      v5 =\n          bn_expand2(<span class=\"supfact\">reta</span>, (v4 >> Number) + Number) == Number L;\n    }\n    if (v5) {\n      result = Number L;\n    } else {\n      <span class=\"supfact\">i</span> =\n          ((unsigned int)(<span class=\"supfact\">len</span> - Number) >> Number) + Number;\n      <span class=\"supfact\">m</span> = ((_BYTE)<span class=\"supfact\">len</span> - Number) & Number;\n      <span class=\"supfact\">reta</span>->top = <span class=\"supfact\">i</span>;\n      <span class=\"supfact\">reta</span>->neg = Number;\n      while (<span class=\"supfact\">n</span>--) {\n        v6 = <span class=\"supfact\">s</span>++;\n        <span class=\"supfact\">l</span> = (<span class=\"supfact\">l</span> << Number) | *v6;\n        LODWORD(v6) = <span class=\"supfact\">m</span>--;\n        if (!(_DWORD)v6) {\n          <span class=\"supfact\">reta</span>->d[--<span class=\"supfact\">i</span>] = <span class=\"supfact\">l</span>;\n          <span class=\"supfact\">l</span> = Number L;\n          <span class=\"supfact\">m</span> = Number;\n        }\n      }\n      if (<span class=\"supfact\">reta</span>->top > Number) {\n        <span class=\"supfact\">ftl</span> =\n            &<span class=\"supfact\">reta</span>->d[<span class=\"supfact\">reta</span>->top - Number];\n        while (<span class=\"supfact\">reta</span>->top > Number) {\n          v8 = <span class=\"supfact\">ftl</span>--;\n          if (*v8)\n            break;\n          --<span class=\"supfact\">reta</span>->top;\n        }\n      }\n      result = <span class=\"supfact\">reta</span>;\n    }\n  } else {\n    <span class=\"supfact\">reta</span>->top = Number;\n    result = <span class=\"supfact\">reta</span>;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "const unsigned __int8 *", "pred_name": "s", "ref_name": "s", "ref_type": "const unsigned __int8 *"}, {"name": "a2", "type": "int", "pred_name": "len", "ref_name": "len", "ref_type": "int"}, {"name": "a3", "type": "BIGNUM *", "pred_name": "ret", "ref_name": "ret", "ref_type": "BIGNUM *"}, {"name": "v9", "type": "BIGNUM *", "pred_name": "reta", "ref_name": "reta", "ref_type": "BIGNUM *"}, {"name": "v11", "type": "unsigned __int64 *", "pred_name": "ftl", "ref_name": "ftl", "ref_type": "unsigned __int64 *"}, {"name": "v12", "type": "BIGNUM *", "pred_name": "ret", "ref_name": "l", "ref_type": "unsigned __int64"}, {"name": "v13", "type": "int", "pred_name": "n", "ref_name": "n", "ref_type": "int"}, {"name": "v14", "type": "int", "pred_name": "m", "ref_name": "m", "ref_type": "int"}, {"name": "v15", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "juj", "repo_name": "posixtestsuite", "path": "juj/posixtestsuite/817e5f46964ed452a252941a4eb713fa8f669542d16b5941060b8b19fd5fb536", "path_in_repo": "juj/posixtestsuite//conformance/interfaces/sigaction/19-24.o", "objdump": "000000000000019c <main>:\n 19c:\t55                   \tpush   %rbp\n 19d:\t48 89 e5             \tmov    %rsp,%rbp\n 1a0:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n 1a7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1ac:\te8 00 00 00 00       \tcallq  1b1 <main+0x15>\n 1b1:\tbf 09 00 00 00       \tmov    $0x9,%edi\n 1b6:\te8 00 00 00 00       \tcallq  1bb <main+0x1f>\n 1bb:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 1bf:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 1c4:\t79 2d                \tjns    1f3 <main+0x57>\n 1c6:\tba 00 00 00 00       \tmov    $0x0,%edx\n 1cb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1d0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1d5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1da:\te8 00 00 00 00       \tcallq  1df <main+0x43>\n 1df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1e4:\te8 00 00 00 00       \tcallq  1e9 <main+0x4d>\n 1e9:\tbf 05 00 00 00       \tmov    $0x5,%edi\n 1ee:\te8 00 00 00 00       \tcallq  1f3 <main+0x57>\n 1f3:\tc7 45 d8 04 00 00 00 \tmovl   $0x4,-0x28(%rbp)\n 1fa:\t48 c7 85 50 ff ff ff \tmovq   $0x0,-0xb0(%rbp)\n 201:\t00 00 00 00 \n 205:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n 20c:\t48 83 c0 08          \tadd    $0x8,%rax\n 210:\t48 89 c7             \tmov    %rax,%rdi\n 213:\te8 00 00 00 00       \tcallq  218 <main+0x7c>\n 218:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 21b:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 21f:\t74 49                \tje     26a <main+0xce>\n 221:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 224:\t89 c7                \tmov    %eax,%edi\n 226:\te8 00 00 00 00       \tcallq  22b <main+0x8f>\n 22b:\t48 89 c2             \tmov    %rax,%rdx\n 22e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 231:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 237:\t41 b8 7d 00 00 00    \tmov    $0x7d,%r8d\n 23d:\t48 89 d1             \tmov    %rdx,%rcx\n 240:\t89 c2                \tmov    %eax,%edx\n 242:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 247:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 24c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 251:\te8 00 00 00 00       \tcallq  256 <main+0xba>\n 256:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 25b:\te8 00 00 00 00       \tcallq  260 <main+0xc4>\n 260:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 265:\te8 00 00 00 00       \tcallq  26a <main+0xce>\n 26a:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n 271:\tba 00 00 00 00       \tmov    $0x0,%edx\n 276:\t48 89 c6             \tmov    %rax,%rsi\n 279:\tbf 1a 00 00 00       \tmov    $0x1a,%edi\n 27e:\te8 00 00 00 00       \tcallq  283 <main+0xe7>\n 283:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 286:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 28a:\t74 49                \tje     2d5 <main+0x139>\n 28c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 28f:\t89 c7                \tmov    %eax,%edi\n 291:\te8 00 00 00 00       \tcallq  296 <main+0xfa>\n 296:\t48 89 c2             \tmov    %rax,%rdx\n 299:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 29c:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 2a2:\t41 b8 85 00 00 00    \tmov    $0x85,%r8d\n 2a8:\t48 89 d1             \tmov    %rdx,%rcx\n 2ab:\t89 c2                \tmov    %eax,%edx\n 2ad:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2b2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2b7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2bc:\te8 00 00 00 00       \tcallq  2c1 <main+0x125>\n 2c1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2c6:\te8 00 00 00 00       \tcallq  2cb <main+0x12f>\n 2cb:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 2d0:\te8 00 00 00 00       \tcallq  2d5 <main+0x139>\n 2d5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2db <main+0x13f>\n 2db:\t85 c0                \ttest   %eax,%eax\n 2dd:\t74 2d                \tje     30c <main+0x170>\n 2df:\tba 00 00 00 00       \tmov    $0x0,%edx\n 2e4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2e9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2ee:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2f3:\te8 00 00 00 00       \tcallq  2f8 <main+0x15c>\n 2f8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2fd:\te8 00 00 00 00       \tcallq  302 <main+0x166>\n 302:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 307:\te8 00 00 00 00       \tcallq  30c <main+0x170>\n 30c:\tbf 1a 00 00 00       \tmov    $0x1a,%edi\n 311:\te8 00 00 00 00       \tcallq  316 <main+0x17a>\n 316:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 319:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 31d:\t74 49                \tje     368 <main+0x1cc>\n 31f:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 322:\t89 c7                \tmov    %eax,%edi\n 324:\te8 00 00 00 00       \tcallq  329 <main+0x18d>\n 329:\t48 89 c2             \tmov    %rax,%rdx\n 32c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 32f:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 335:\t41 b8 91 00 00 00    \tmov    $0x91,%r8d\n 33b:\t48 89 d1             \tmov    %rdx,%rcx\n 33e:\t89 c2                \tmov    %eax,%edx\n 340:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 345:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 34a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 34f:\te8 00 00 00 00       \tcallq  354 <main+0x1b8>\n 354:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 359:\te8 00 00 00 00       \tcallq  35e <main+0x1c2>\n 35e:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 363:\te8 00 00 00 00       \tcallq  368 <main+0x1cc>\n 368:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 36e <main+0x1d2>\n 36e:\t85 c0                \ttest   %eax,%eax\n 370:\t75 2d                \tjne    39f <main+0x203>\n 372:\tba 00 00 00 00       \tmov    $0x0,%edx\n 377:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 37c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 381:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 386:\te8 00 00 00 00       \tcallq  38b <main+0x1ef>\n 38b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 390:\te8 00 00 00 00       \tcallq  395 <main+0x1f9>\n 395:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 39a:\te8 00 00 00 00       \tcallq  39f <main+0x203>\n 39f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 3a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3a9:\te8 00 00 00 00       \tcallq  3ae <main+0x212>\n 3ae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3b3:\te8 00 00 00 00       \tcallq  3b8 <main+0x21c>\n 3b8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 3bd:\te8 00 00 00 00       \tcallq  3c2 <main+0x226>\n", "code_s": "int __cdecl __noreturn main(int <span class=\"supfact\">argc</span>,\n                            const char **<span class=\"supfact\">argv</span>,\n                            const char **<span class=\"supfact\">envp</span>) {\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  char *v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  char *v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  __int64 v14;\n  char *v15;\n  struct sigaction <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">errnum</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  output_init();\n  <span class=\"supfact\">v18</span> = sysconf(Number);\n  if (<span class=\"supfact\">v18</span> < Number) {\n    output(String, (__int64)String, (__int64)String, v3, v4, v5);\n    output_fini();\n    exit(Number);\n  }\n  <span class=\"supfact\">v16</span>.sa_flags = Number;\n  <span class=\"supfact\">v16</span>.sa_handler = (__sighandler_t)handler;\n  <span class=\"supfact\">errnum</span> = sigemptyset(&<span class=\"supfact\">v16</span>.sa_mask);\n  if (<span class=\"supfact\">errnum</span>) {\n    v6 = strerror(<span class=\"supfact\">errnum</span>);\n    output(String, (__int64)String, (unsigned int)<span class=\"supfact\">errnum</span>,\n           (__int64)v6, Number L, (__int64)String,\n           <span class=\"supfact\">v16</span>.sa_handler);\n    output_fini();\n    exit(Number);\n  }\n  <span class=\"supfact\">errnum</span> = sigaction(Number, &<span class=\"supfact\">v16</span>, Number L);\n  if (<span class=\"supfact\">errnum</span>) {\n    v10 = strerror(<span class=\"supfact\">errnum</span>);\n    output(String, (__int64)String, (unsigned int)<span class=\"supfact\">errnum</span>,\n           (__int64)v10, Number L, (__int64)String,\n           <span class=\"supfact\">v16</span>.sa_handler);\n    output_fini();\n    exit(Number);\n  }\n  if (called) {\n    output(String, (__int64)String, (__int64)String, v7, v8, v9,\n           <span class=\"supfact\">v16</span>.sa_handler);\n    output_fini();\n    exit(Number);\n  }\n  <span class=\"supfact\">errnum</span> = raise(Number);\n  if (<span class=\"supfact\">errnum</span>) {\n    v15 = strerror(<span class=\"supfact\">errnum</span>);\n    output(String, (__int64)String, (unsigned int)<span class=\"supfact\">errnum</span>,\n           (__int64)v15, Number L, (__int64)String,\n           <span class=\"supfact\">v16</span>.sa_handler);\n    output_fini();\n    exit(Number);\n  }\n  if (!called) {\n    output(String, (__int64)String, (__int64)String, v12, v13, v14,\n           <span class=\"supfact\">v16</span>.sa_handler);\n    output_fini();\n    exit(Number);\n  }\n  output(String, (__int64)&<span class=\"supfact\">v16</span>, v11, v12, v13, v14,\n         <span class=\"supfact\">v16</span>.sa_handler);\n  output_fini();\n  exit(Number);\n}", "code_t": "int __cdecl __noreturn main(int <span class=\"supfact\">argc</span>,\n                            const char **<span class=\"supfact\">argv</span>,\n                            const char **<span class=\"supfact\">envp</span>) {\n  char *v3;\n  char *v4;\n  char *v5;\n  sigaction <span class=\"supfact\">sa</span>;\n  int <span class=\"supfact\">ret</span>;\n  __int64 <span class=\"supfact\">rts</span>;\n  output_init();\n  <span class=\"supfact\">rts</span> = sysconf(Number);\n  if (<span class=\"supfact\">rts</span> < Number) {\n    output(String, String, String);\n    output_fini();\n    exit(Number);\n  }\n  <span class=\"supfact\">sa</span>.sa_flags = Number;\n  <span class=\"supfact\">sa</span>.sa_handler = (__sighandler_t)handler;\n  <span class=\"supfact\">ret</span> = sigemptyset(&<span class=\"supfact\">sa</span>.sa_mask);\n  if (<span class=\"supfact\">ret</span>) {\n    v3 = strerror(<span class=\"supfact\">ret</span>);\n    output(String, String, (unsigned int)<span class=\"supfact\">ret</span>, v3, Number L,\n           String);\n    output_fini();\n    exit(Number);\n  }\n  <span class=\"supfact\">ret</span> = sigaction_0(Number, &<span class=\"supfact\">sa</span>, Number L);\n  if (<span class=\"supfact\">ret</span>) {\n    v4 = strerror(<span class=\"supfact\">ret</span>);\n    output(String, String, (unsigned int)<span class=\"supfact\">ret</span>, v4, Number L,\n           String);\n    output_fini();\n    exit(Number);\n  }\n  if (called) {\n    output(String, String, String);\n    output_fini();\n    exit(Number);\n  }\n  <span class=\"supfact\">ret</span> = raise(Number);\n  if (<span class=\"supfact\">ret</span>) {\n    v5 = strerror(<span class=\"supfact\">ret</span>);\n    output(String, String, (unsigned int)<span class=\"supfact\">ret</span>, v5, Number L,\n           String);\n    output_fini();\n    exit(Number);\n  }\n  if (!called) {\n    output(String, String, String);\n    output_fini();\n    exit(Number);\n  }\n  output(String);\n  output_fini();\n  exit(Number);\n}", "var": [{"name": "argc", "type": "int", "pred_name": "argc", "ref_name": "argc", "ref_type": "int"}, {"name": "argv", "type": "const char * *", "pred_name": "argv", "ref_name": "argv", "ref_type": "const char * *"}, {"name": "envp", "type": "const char * *", "pred_name": "envp", "ref_name": "envp", "ref_type": "const char * *"}, {"name": "v16", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "pred_name": "sa", "ref_name": "sa", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}, {"name": "errnum", "type": "int", "pred_name": "ret", "ref_name": "ret", "ref_type": "int"}, {"name": "v18", "type": "__int64", "pred_name": "rts", "ref_name": "rts", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "TSP-RomanHargrave", "repo_name": "debian-proftpd", "path": "TSP-RomanHargrave/debian-proftpd/0aac9b73dc1b3ed9b02b70ebf4e498ba19e3024a6b74d8ce1b86e91f156d470d", "path_in_repo": "TSP-RomanHargrave/debian-proftpd/lib/libcap/cap_proc.o", "objdump": "0000000000000047 <cap_set_proc>:\n  47:\t55                   \tpush   %rbp\n  48:\t48 89 e5             \tmov    %rsp,%rbp\n  4b:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  53:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  58:\t74 11                \tje     6b <cap_set_proc+0x24>\n  5a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  5e:\t48 83 e8 04          \tsub    $0x4,%rax\n  62:\t8b 00                \tmov    (%rax),%eax\n  64:\t3d d0 90 ca 00       \tcmp    $0xca90d0,%eax\n  69:\t74 12                \tje     7d <cap_set_proc+0x36>\n  6b:\te8 00 00 00 00       \tcallq  70 <cap_set_proc+0x29>\n  70:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  76:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  7b:\teb 27                \tjmp    a4 <cap_set_proc+0x5d>\n  7d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  81:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n  85:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  89:\t48 89 d6             \tmov    %rdx,%rsi\n  8c:\t48 89 c7             \tmov    %rax,%rdi\n  8f:\te8 00 00 00 00       \tcallq  94 <cap_set_proc+0x4d>\n  94:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  97:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  9b:\tc7 00 30 03 98 19    \tmovl   $0x19980330,(%rax)\n  a1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  a4:\tc9                   \tleaveq \n  a5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cap_set_proc(_DWORD *<span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">a1</span> && *(<span class=\"supfact\">a1</span> - Number) == Number) {\n    LODWORD(<span class=\"supfact\">result</span>) =\n        capset(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a1</span> + Number);\n    *<span class=\"supfact\">a1</span> = Number;\n    <span class=\"supfact\">result</span> = (unsigned int)<span class=\"supfact\">result</span>;\n  } else {\n    *_errno_location() = Number;\n    <span class=\"supfact\">result</span> = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl cap_set_proc(cap_t <span class=\"supfact\">cap_d</span>) {\n  int <span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">cap_d</span> &&\n      <span class=\"supfact\">cap_d</span>[Number].set.inheritable == Number) {\n    <span class=\"supfact\">result</span> =\n        capset(<span class=\"supfact\">cap_d</span>, &<span class=\"supfact\">cap_d</span>->set);\n    <span class=\"supfact\">cap_d</span>->head.version = Number;\n  } else {\n    *_errno_location() = Number;\n    <span class=\"supfact\">result</span> = Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "cap_t", "pred_name": "cap_d", "ref_name": "cap_d", "ref_type": "cap_t"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "euiko", "repo_name": "platchamer", "path": "euiko/platchamer/367ec57e0b105587d6f339daffeeca40572f30e9b2c0afc01de628a12c6230e5", "path_in_repo": "euiko/platchamer/3rdparty/bgfx/3rdparty/spirv-cross/spirv_cpp.o", "objdump": "0000000000000000 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v>:\n   0:\t41 54                \tpush   %r12\n   2:\t55                   \tpush   %rbp\n   3:\t48 83 ec 28          \tsub    $0x28,%rsp\n   7:\t48 8b 47 08          \tmov    0x8(%rdi),%rax\n   b:\t48 85 c0             \ttest   %rax,%rax\n   e:\t74 0e                \tje     1e <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x1e>\n  10:\t83 7f 10 01          \tcmpl   $0x1,0x10(%rdi)\n  14:\t75 5d                \tjne    73 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x73>\n  16:\t48 83 c4 28          \tadd    $0x28,%rsp\n  1a:\t5d                   \tpop    %rbp\n  1b:\t41 5c                \tpop    %r12\n  1d:\tc3                   \tretq   \n  1e:\tbf 10 00 00 00       \tmov    $0x10,%edi\n  23:\t48 89 e5             \tmov    %rsp,%rbp\n  26:\te8 00 00 00 00       \tcallq  2b <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x2b>\n  2b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  30:\t48 89 ef             \tmov    %rbp,%rdi\n  33:\t49 89 c4             \tmov    %rax,%r12\n  36:\te8 00 00 00 00       \tcallq  3b <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x3b>\n  3b:\t48 89 ee             \tmov    %rbp,%rsi\n  3e:\t4c 89 e7             \tmov    %r12,%rdi\n  41:\te8 00 00 00 00       \tcallq  46 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x46>\n  46:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n  4a:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  4f:\t49 c7 04 24 00 00 00 \tmovq   $0x0,(%r12)\n  56:\t00 \n  57:\t48 39 c7             \tcmp    %rax,%rdi\n  5a:\t74 05                \tje     61 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x61>\n  5c:\te8 00 00 00 00       \tcallq  61 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x61>\n  61:\tba 00 00 00 00       \tmov    $0x0,%edx\n  66:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  6b:\t4c 89 e7             \tmov    %r12,%rdi\n  6e:\te8 00 00 00 00       \tcallq  73 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x73>\n  73:\tbf 10 00 00 00       \tmov    $0x10,%edi\n  78:\t48 89 e5             \tmov    %rsp,%rbp\n  7b:\te8 00 00 00 00       \tcallq  80 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x80>\n  80:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  85:\t48 89 ef             \tmov    %rbp,%rdi\n  88:\t49 89 c4             \tmov    %rax,%r12\n  8b:\te8 00 00 00 00       \tcallq  90 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x90>\n  90:\t48 89 ee             \tmov    %rbp,%rsi\n  93:\t4c 89 e7             \tmov    %r12,%rdi\n  96:\te8 00 00 00 00       \tcallq  9b <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x9b>\n  9b:\teb a9                \tjmp    46 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x46>\n  9d:\t48 89 c5             \tmov    %rax,%rbp\n  a0:\teb 05                \tjmp    a7 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0xa7>\n  a2:\t48 89 c5             \tmov    %rax,%rbp\n  a5:\teb 13                \tjmp    ba <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0xba>\n  a7:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n  ab:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n  b0:\t48 39 c7             \tcmp    %rax,%rdi\n  b3:\t74 05                \tje     ba <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0xba>\n  b5:\te8 00 00 00 00       \tcallq  ba <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0xba>\n  ba:\t4c 89 e7             \tmov    %r12,%rdi\n  bd:\te8 00 00 00 00       \tcallq  c2 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0xc2>\n  c2:\t48 89 ef             \tmov    %rbp,%rdi\n  c5:\te8 00 00 00 00       \tcallq  ca <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0xca>\n  ca:\teb d1                \tjmp    9d <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0x9d>\n  cc:\teb d4                \tjmp    a2 <_ZN11spirv_cross7Variant3getINS_8SPIRTypeEEERT_v+0xa2>", "code_s": "__int64 __fastcall spirv_cross Variant\nget<spirv_cross SPIRType>(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  _QWORD *<span class=\"supfact\">v2</span>;\n  char *v3;\n  void *<span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">result</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  if (!<span class=\"supfact\">result</span>) {\n    <span class=\"supfact\">v2</span> = _cxa_allocate_exception(Number);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string((char **)<span class=\"supfact\">v4</span>, String);\n    std runtime_error runtime_error(<span class=\"supfact\">v2</span>, <span class=\"supfact\">v4</span>);\n    goto LABEL_5;\n  }\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) != Number) {\n    <span class=\"supfact\">v2</span> = _cxa_allocate_exception(Number);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string((char **)<span class=\"supfact\">v4</span>, String);\n    std runtime_error runtime_error(<span class=\"supfact\">v2</span>, <span class=\"supfact\">v4</span>);\n  LABEL_5:\n    v3 = (char *)<span class=\"supfact\">v4</span>[Number];\n    *<span class=\"supfact\">v2</span> =\n        & ` vtable for ' spirv_cross CompilerError + Number ; if ( v3 != & <span class=\"supfact\">v5</span> ) operator delete ( v3 ) ; _cxa_throw ( <span class=\"supfact\">v2</span> , ( struct type_info * ) & ` typeinfo for ' spirv_cross\n            CompilerError,\n    spirv_cross CompilerError ~CompilerError);\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "__int64 __fastcall spirv_cross Variant\nget<spirv_cross SPIRType>(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  _QWORD *<span class=\"supfact\">v2</span>;\n  char *v3;\n  void *<span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">result</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  if (!<span class=\"supfact\">result</span>) {\n    <span class=\"supfact\">v2</span> = _cxa_allocate_exception(Number);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string((char **)<span class=\"supfact\">v4</span>, String);\n    std runtime_error runtime_error(<span class=\"supfact\">v2</span>, <span class=\"supfact\">v4</span>);\n    goto LABEL_5;\n  }\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) != Number) {\n    <span class=\"supfact\">v2</span> = _cxa_allocate_exception(Number);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string((char **)<span class=\"supfact\">v4</span>, String);\n    std runtime_error runtime_error(<span class=\"supfact\">v2</span>, <span class=\"supfact\">v4</span>);\n  LABEL_5:\n    v3 = (char *)<span class=\"supfact\">v4</span>[Number];\n    *<span class=\"supfact\">v2</span> =\n        & ` vtable for ' spirv_cross CompilerError + Number ; if ( v3 != & <span class=\"supfact\">v5</span> ) operator delete ( v3 ) ; _cxa_throw ( <span class=\"supfact\">v2</span> , ( struct type_info * ) & ` typeinfo for ' spirv_cross\n            CompilerError,\n    spirv_cross CompilerError ~CompilerError);\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "result", "type": "__int64", "pred_name": "result", "ref_name": "result", "ref_type": "__int64"}, {"name": "v2", "type": "_QWORD *", "pred_name": "v2", "ref_name": "v2", "ref_type": "_QWORD *"}, {"name": "v4", "type": "void *[2]", "pred_name": "v4", "ref_name": "v4", "ref_type": "void *[2]"}, {"name": "v5", "type": "char", "pred_name": "v5", "ref_name": "v5", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "trakons", "repo_name": "QEMU-s5l89xx-test", "path": "trakons/QEMU-s5l89xx-test/ee2220ca5f144506ebd30f6ecb3c583e17967d5efd38d3c4cf2df372969e7432", "path_in_repo": "trakons/QEMU-s5l89xx-test//libhw32/xio3130_downstream.o", "objdump": "0000000000000264 <xio3130_downstream_initfn>:\n 264:\t55                   \tpush   %rbp\n 265:\t48 89 e5             \tmov    %rsp,%rbp\n 268:\t48 83 ec 60          \tsub    $0x60,%rsp\n 26c:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n 270:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 277:\t00 00 \n 279:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 27d:\t31 c0                \txor    %eax,%eax\n 27f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 283:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n 287:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 28b:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 28f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 293:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 297:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 29b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 29f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 2a3:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 2a7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 2ab:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 2af:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 2b3:\t48 89 c7             \tmov    %rax,%rdi\n 2b6:\te8 00 00 00 00       \tcallq  2bb <xio3130_downstream_initfn+0x57>\n 2bb:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n 2be:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n 2c2:\t79 08                \tjns    2cc <xio3130_downstream_initfn+0x68>\n 2c4:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n 2c7:\te9 bb 01 00 00       \tjmpq   487 <xio3130_downstream_initfn+0x223>\n 2cc:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 2d0:\t48 89 c7             \tmov    %rax,%rdi\n 2d3:\te8 00 00 00 00       \tcallq  2d8 <xio3130_downstream_initfn+0x74>\n 2d8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 2dc:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n 2e0:\tbe 4c 10 00 00       \tmov    $0x104c,%esi\n 2e5:\t48 89 c7             \tmov    %rax,%rdi\n 2e8:\te8 bd fd ff ff       \tcallq  aa <pci_config_set_vendor_id>\n 2ed:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 2f1:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n 2f5:\tbe 33 82 00 00       \tmov    $0x8233,%esi\n 2fa:\t48 89 c7             \tmov    %rax,%rdi\n 2fd:\te8 f2 fd ff ff       \tcallq  f4 <pci_config_set_device_id>\n 302:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 306:\t48 8b 40 78          \tmov    0x78(%rax),%rax\n 30a:\t48 83 c0 08          \tadd    $0x8,%rax\n 30e:\tc6 00 01             \tmovb   $0x1,(%rax)\n 311:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 315:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 31b:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n 320:\tba 01 00 00 00       \tmov    $0x1,%edx\n 325:\tbe 70 00 00 00       \tmov    $0x70,%esi\n 32a:\t48 89 c7             \tmov    %rax,%rdi\n 32d:\te8 00 00 00 00       \tcallq  332 <xio3130_downstream_initfn+0xce>\n 332:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n 335:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n 339:\t0f 88 13 01 00 00    \tjs     452 <xio3130_downstream_initfn+0x1ee>\n 33f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 343:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 348:\tba 00 00 00 00       \tmov    $0x0,%edx\n 34d:\tbe 80 00 00 00       \tmov    $0x80,%esi\n 352:\t48 89 c7             \tmov    %rax,%rdi\n 355:\te8 00 00 00 00       \tcallq  35a <xio3130_downstream_initfn+0xf6>\n 35a:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n 35d:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n 361:\t0f 88 ee 00 00 00    \tjs     455 <xio3130_downstream_initfn+0x1f1>\n 367:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 36b:\t0f b6 80 48 0b 00 00 \tmovzbl 0xb48(%rax),%eax\n 372:\t0f b6 d0             \tmovzbl %al,%edx\n 375:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 379:\t89 d1                \tmov    %edx,%ecx\n 37b:\tba 06 00 00 00       \tmov    $0x6,%edx\n 380:\tbe 90 00 00 00       \tmov    $0x90,%esi\n 385:\t48 89 c7             \tmov    %rax,%rdi\n 388:\te8 00 00 00 00       \tcallq  38d <xio3130_downstream_initfn+0x129>\n 38d:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n 390:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n 394:\t0f 88 a9 00 00 00    \tjs     443 <xio3130_downstream_initfn+0x1df>\n 39a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 39e:\t48 89 c7             \tmov    %rax,%rdi\n 3a1:\te8 00 00 00 00       \tcallq  3a6 <xio3130_downstream_initfn+0x142>\n 3a6:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 3aa:\t48 89 c7             \tmov    %rax,%rdi\n 3ad:\te8 00 00 00 00       \tcallq  3b2 <xio3130_downstream_initfn+0x14e>\n 3b2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3b6:\t0f b7 80 52 0b 00 00 \tmovzwl 0xb52(%rax),%eax\n 3bd:\t0f b7 d0             \tmovzwl %ax,%edx\n 3c0:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 3c4:\t89 d6                \tmov    %edx,%esi\n 3c6:\t48 89 c7             \tmov    %rax,%rdi\n 3c9:\te8 00 00 00 00       \tcallq  3ce <xio3130_downstream_initfn+0x16a>\n 3ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3d2:\t0f b6 80 50 0b 00 00 \tmovzbl 0xb50(%rax),%eax\n 3d9:\t0f b6 c0             \tmovzbl %al,%eax\n 3dc:\t89 c7                \tmov    %eax,%edi\n 3de:\te8 00 00 00 00       \tcallq  3e3 <xio3130_downstream_initfn+0x17f>\n 3e3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3e7:\t48 89 c7             \tmov    %rax,%rdi\n 3ea:\te8 00 00 00 00       \tcallq  3ef <xio3130_downstream_initfn+0x18b>\n 3ef:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n 3f2:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n 3f6:\t78 3c                \tjs     434 <xio3130_downstream_initfn+0x1d0>\n 3f8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 3fc:\t48 89 c7             \tmov    %rax,%rdi\n 3ff:\te8 00 00 00 00       \tcallq  404 <xio3130_downstream_initfn+0x1a0>\n 404:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 408:\tbe 00 01 00 00       \tmov    $0x100,%esi\n 40d:\t48 89 c7             \tmov    %rax,%rdi\n 410:\te8 00 00 00 00       \tcallq  415 <xio3130_downstream_initfn+0x1b1>\n 415:\t89 45 b8             \tmov    %eax,-0x48(%rbp)\n 418:\t83 7d b8 00          \tcmpl   $0x0,-0x48(%rbp)\n 41c:\t78 07                \tjs     425 <xio3130_downstream_initfn+0x1c1>\n 41e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 423:\teb 62                \tjmp    487 <xio3130_downstream_initfn+0x223>\n 425:\t90                   \tnop\n 426:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 42a:\t48 89 c7             \tmov    %rax,%rdi\n 42d:\te8 00 00 00 00       \tcallq  432 <xio3130_downstream_initfn+0x1ce>\n 432:\teb 01                \tjmp    435 <xio3130_downstream_initfn+0x1d1>\n 434:\t90                   \tnop\n 435:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 439:\t48 89 c7             \tmov    %rax,%rdi\n 43c:\te8 00 00 00 00       \tcallq  441 <xio3130_downstream_initfn+0x1dd>\n 441:\teb 01                \tjmp    444 <xio3130_downstream_initfn+0x1e0>\n 443:\t90                   \tnop\n 444:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 448:\t48 89 c7             \tmov    %rax,%rdi\n 44b:\te8 00 00 00 00       \tcallq  450 <xio3130_downstream_initfn+0x1ec>\n 450:\teb 04                \tjmp    456 <xio3130_downstream_initfn+0x1f2>\n 452:\t90                   \tnop\n 453:\teb 01                \tjmp    456 <xio3130_downstream_initfn+0x1f2>\n 455:\t90                   \tnop\n 456:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 45a:\t48 89 c7             \tmov    %rax,%rdi\n 45d:\te8 00 00 00 00       \tcallq  462 <xio3130_downstream_initfn+0x1fe>\n 462:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n 465:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n 469:\t74 19                \tje     484 <xio3130_downstream_initfn+0x220>\n 46b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 470:\tba 74 00 00 00       \tmov    $0x74,%edx\n 475:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 47a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 47f:\te8 00 00 00 00       \tcallq  484 <xio3130_downstream_initfn+0x220>\n 484:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n 487:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 48b:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 492:\t00 00 \n 494:\t74 05                \tje     49b <xio3130_downstream_initfn+0x237>\n 496:\te8 00 00 00 00       \tcallq  49b <xio3130_downstream_initfn+0x237>\n 49b:\tc9                   \tleaveq \n 49c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall xio3130_downstream_initfn(__int64 <span class=\"supfact\">a1</span>) {\n  int v2;\n  int v3;\n  v2 = pci_bridge_initfn(<span class=\"supfact\">a1</span>);\n  if (v2 < Number)\n    return (unsigned int)v2;\n  pcie_port_init_reg(<span class=\"supfact\">a1</span>);\n  pci_config_set_vendor_id(*(_WORD **)(<span class=\"supfact\">a1</span> + Number), Number);\n  pci_config_set_device_id(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number);\n  *(_BYTE *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = Number;\n  v3 = msi_init(<span class=\"supfact\">a1</span>, Number L, Number L, Number L, Number L);\n  if (v3 >= Number) {\n    v3 =\n        pci_bridge_ssvid_init(<span class=\"supfact\">a1</span>, Number L, Number L, Number L);\n    if (v3 >= Number) {\n      v3 = pcie_cap_init(<span class=\"supfact\">a1</span>, Number L, Number L,\n                         *(unsigned __int8 *)(<span class=\"supfact\">a1</span> + Number));\n      if (v3 >= Number) {\n        pcie_cap_flr_init(<span class=\"supfact\">a1</span>);\n        pcie_cap_deverr_init(<span class=\"supfact\">a1</span>);\n        pcie_cap_slot_init(<span class=\"supfact\">a1</span>,\n                           *(unsigned __int16 *)(<span class=\"supfact\">a1</span> + Number));\n        pcie_chassis_create(*(unsigned __int8 *)(<span class=\"supfact\">a1</span> + Number));\n        v3 = pcie_chassis_add_slot(<span class=\"supfact\">a1</span>);\n        if (v3 >= Number) {\n          pcie_cap_ari_init(<span class=\"supfact\">a1</span>);\n          v3 = pcie_aer_init(<span class=\"supfact\">a1</span>, Number L);\n          if (v3 >= Number)\n            return Number L;\n          pcie_chassis_del_slot(<span class=\"supfact\">a1</span>);\n        }\n        pcie_cap_exit(<span class=\"supfact\">a1</span>);\n      }\n      msi_uninit(<span class=\"supfact\">a1</span>);\n    }\n  }\n  if ((unsigned int)pci_bridge_exitfn(<span class=\"supfact\">a1</span>))\n    _assert_fail(String, String, Number, String);\n  return (unsigned int)v3;\n}", "code_t": "int __cdecl xio3130_downstream_initfn(PCIDevice_0 *<span class=\"supfact\">d</span>) {\n  int rc;\n  int rca;\n  rc = pci_bridge_initfn(<span class=\"supfact\">d</span>);\n  if (rc < Number)\n    return rc;\n  pcie_port_init_reg(<span class=\"supfact\">d</span>);\n  pci_config_set_vendor_id(<span class=\"supfact\">d</span>->config, Number);\n  pci_config_set_device_id(<span class=\"supfact\">d</span>->config, Number);\n  <span class=\"supfact\">d</span>->config[Number] = Number;\n  rca = msi_init(<span class=\"supfact\">d</span>, Number L, Number L, Number L, Number L);\n  if (rca >= Number) {\n    rca =\n        pci_bridge_ssvid_init(<span class=\"supfact\">d</span>, Number L, Number L, Number L);\n    if (rca >= Number) {\n      rca = pcie_cap_init(\n          <span class=\"supfact\">d</span>, Number L, Number L,\n          (unsigned __int8)<span class=\"supfact\">d</span>[Number].name[Number]);\n      if (rca >= Number) {\n        pcie_cap_flr_init(<span class=\"supfact\">d</span>);\n        pcie_cap_deverr_init(<span class=\"supfact\">d</span>);\n        pcie_cap_slot_init(\n            <span class=\"supfact\">d</span>,\n            WORD1(<span class=\"supfact\">d</span>[Number].io_regions[Number].addr));\n        pcie_chassis_create(\n            LOBYTE(<span class=\"supfact\">d</span>[Number].io_regions[Number].addr));\n        rca = pcie_chassis_add_slot(<span class=\"supfact\">d</span>);\n        if (rca >= Number) {\n          pcie_cap_ari_init(<span class=\"supfact\">d</span>);\n          rca = pcie_aer_init(<span class=\"supfact\">d</span>, Number L);\n          if (rca >= Number)\n            return Number;\n          pcie_chassis_del_slot(<span class=\"supfact\">d</span>);\n        }\n        pcie_cap_exit(<span class=\"supfact\">d</span>);\n      }\n      msi_uninit(<span class=\"supfact\">d</span>);\n    }\n  }\n  if ((unsigned int)pci_bridge_exitfn(<span class=\"supfact\">d</span>))\n    _assert_fail(String, String, Number, String);\n  return rca;\n}", "var": [{"name": "a1", "type": "PCIDevice_0 *", "pred_name": "d", "ref_name": "d", "ref_type": "PCIDevice_0 *"}], "body_in_train": false}, {"repo_owner": "shishuo365", "repo_name": "ffmpeg-h265", "path": "shishuo365/ffmpeg-h265/37d86bbdb3f6dc69180f3c21c0134821d9a2fbbdef6a4497634b1b4d4b5b433b", "path_in_repo": "shishuo365/ffmpeg-h265//libavcodec/dds.o", "objdump": "0000000000001e1f <decompress_texture_thread>:\n    1e1f:\t48 83 ec 78          \tsub    $0x78,%rsp\n    1e23:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    1e28:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    1e2d:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n    1e31:\t89 4c 24 08          \tmov    %ecx,0x8(%rsp)\n    1e35:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1e3a:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1e3e:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n    1e43:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1e48:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n    1e4d:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n    1e52:\t48 8b 80 a0 00 00 00 \tmov    0xa0(%rax),%rax\n    1e59:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n    1e5e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1e63:\t8b 40 7c             \tmov    0x7c(%rax),%eax\n    1e66:\t8d 50 03             \tlea    0x3(%rax),%edx\n    1e69:\t85 c0                \ttest   %eax,%eax\n    1e6b:\t0f 48 c2             \tcmovs  %edx,%eax\n    1e6e:\tc1 f8 02             \tsar    $0x2,%eax\n    1e71:\t89 44 24 44          \tmov    %eax,0x44(%rsp)\n    1e75:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1e7a:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n    1e80:\t8d 50 03             \tlea    0x3(%rax),%edx\n    1e83:\t85 c0                \ttest   %eax,%eax\n    1e85:\t0f 48 c2             \tcmovs  %edx,%eax\n    1e88:\tc1 f8 02             \tsar    $0x2,%eax\n    1e8b:\t89 44 24 40          \tmov    %eax,0x40(%rsp)\n    1e8f:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n    1e94:\t8b 88 ac 00 00 00    \tmov    0xac(%rax),%ecx\n    1e9a:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n    1e9e:\t99                   \tcltd   \n    1e9f:\tf7 f9                \tidiv   %ecx\n    1ea1:\t89 44 24 3c          \tmov    %eax,0x3c(%rsp)\n    1ea5:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n    1eaa:\t8b 88 ac 00 00 00    \tmov    0xac(%rax),%ecx\n    1eb0:\t8b 44 24 40          \tmov    0x40(%rsp),%eax\n    1eb4:\t99                   \tcltd   \n    1eb5:\tf7 f9                \tidiv   %ecx\n    1eb7:\t89 54 24 38          \tmov    %edx,0x38(%rsp)\n    1ebb:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    1ebf:\t0f af 44 24 3c       \timul   0x3c(%rsp),%eax\n    1ec4:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n    1ec8:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n    1ecc:\t39 44 24 0c          \tcmp    %eax,0xc(%rsp)\n    1ed0:\t0f 4e 44 24 0c       \tcmovle 0xc(%rsp),%eax\n    1ed5:\t01 44 24 34          \tadd    %eax,0x34(%rsp)\n    1ed9:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n    1edd:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n    1ee1:\t01 d0                \tadd    %edx,%eax\n    1ee3:\t89 44 24 64          \tmov    %eax,0x64(%rsp)\n    1ee7:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    1eeb:\t3b 44 24 38          \tcmp    0x38(%rsp),%eax\n    1eef:\t7d 05                \tjge    1ef6 <decompress_texture_thread+0xd7>\n    1ef1:\t83 44 24 64 01       \taddl   $0x1,0x64(%rsp)\n    1ef6:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    1efa:\t89 44 24 68          \tmov    %eax,0x68(%rsp)\n    1efe:\te9 9d 00 00 00       \tjmpq   1fa0 <decompress_texture_thread+0x181>\n    1f03:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    1f08:\t48 8b 10             \tmov    (%rax),%rdx\n    1f0b:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    1f10:\t8b 40 40             \tmov    0x40(%rax),%eax\n    1f13:\t0f af 44 24 68       \timul   0x68(%rsp),%eax\n    1f18:\tc1 e0 02             \tshl    $0x2,%eax\n    1f1b:\t48 98                \tcltq   \n    1f1d:\t48 01 d0             \tadd    %rdx,%rax\n    1f20:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n    1f25:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n    1f29:\t0f af 44 24 44       \timul   0x44(%rsp),%eax\n    1f2e:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n    1f32:\tc7 44 24 6c 00 00 00 \tmovl   $0x0,0x6c(%rsp)\n    1f39:\t00 \n    1f3a:\teb 55                \tjmp    1f91 <decompress_texture_thread+0x172>\n    1f3c:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n    1f41:\t48 8b 88 b0 00 00 00 \tmov    0xb0(%rax),%rcx\n    1f48:\t8b 54 24 24          \tmov    0x24(%rsp),%edx\n    1f4c:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    1f50:\t01 c2                \tadd    %eax,%edx\n    1f52:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n    1f57:\t8b 80 a8 00 00 00    \tmov    0xa8(%rax),%eax\n    1f5d:\t0f af c2             \timul   %edx,%eax\n    1f60:\t48 63 d0             \tmovslq %eax,%rdx\n    1f63:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n    1f68:\t48 01 c2             \tadd    %rax,%rdx\n    1f6b:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    1f70:\t8b 40 40             \tmov    0x40(%rax),%eax\n    1f73:\t48 98                \tcltq   \n    1f75:\t8b 74 24 6c          \tmov    0x6c(%rsp),%esi\n    1f79:\tc1 e6 04             \tshl    $0x4,%esi\n    1f7c:\t48 63 fe             \tmovslq %esi,%rdi\n    1f7f:\t48 8b 74 24 28       \tmov    0x28(%rsp),%rsi\n    1f84:\t48 01 f7             \tadd    %rsi,%rdi\n    1f87:\t48 89 c6             \tmov    %rax,%rsi\n    1f8a:\tff d1                \tcallq  *%rcx\n    1f8c:\t83 44 24 6c 01       \taddl   $0x1,0x6c(%rsp)\n    1f91:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    1f95:\t3b 44 24 44          \tcmp    0x44(%rsp),%eax\n    1f99:\t7c a1                \tjl     1f3c <decompress_texture_thread+0x11d>\n    1f9b:\t83 44 24 68 01       \taddl   $0x1,0x68(%rsp)\n    1fa0:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n    1fa4:\t3b 44 24 64          \tcmp    0x64(%rsp),%eax\n    1fa8:\t0f 8c 55 ff ff ff    \tjl     1f03 <decompress_texture_thread+0xe4>\n    1fae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1fb3:\t48 83 c4 78          \tadd    $0x78,%rsp\n    1fb7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall decompress_texture_thread(__int64 <span class=\"supfact\">a1</span>,\n                                             __int64 <span class=\"supfact\">a2</span>,\n                                             int <span class=\"supfact\">a3</span>) {\n  int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">j</span>;\n  <span class=\"supfact\">v10</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v9</span> = *(_QWORD *)(<span class=\"supfact\">v10</span> + Number);\n  <span class=\"supfact\">v8</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number;\n  <span class=\"supfact\">v7</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number /\n                       *(_DWORD *)(<span class=\"supfact\">v10</span> + Number);\n  <span class=\"supfact\">v6</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number %\n                       *(_DWORD *)(<span class=\"supfact\">v10</span> + Number);\n  <span class=\"supfact\">v3</span> = <span class=\"supfact\">v6</span>;\n  if (<span class=\"supfact\">a3</span> <= <span class=\"supfact\">v6</span>)\n    <span class=\"supfact\">v3</span> = <span class=\"supfact\">a3</span>;\n  <span class=\"supfact\">v11</span> = <span class=\"supfact\">v3</span> +\n                        <span class=\"supfact\">v7</span> * <span class=\"supfact\">a3</span> +\n                        <span class=\"supfact\">v7</span>;\n  if (<span class=\"supfact\">a3</span> < <span class=\"supfact\">v6</span>)\n    ++<span class=\"supfact\">v11</span>;\n  for (<span class=\"supfact\">i</span> =\n           <span class=\"supfact\">v3</span> + <span class=\"supfact\">v7</span> * <span class=\"supfact\">a3</span>;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">v11</span>; ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v5</span> =\n        *(_QWORD *)<span class=\"supfact\">a2</span> +\n        Number * <span class=\"supfact\">i</span> * *(_DWORD *)(<span class=\"supfact\">a2</span> + Number);\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> < <span class=\"supfact\">v8</span>;\n         ++<span class=\"supfact\">j</span>)\n      (*(void(__fastcall **)(__int64, _QWORD, __int64))(<span class=\"supfact\">v10</span> +\n                                                        Number))(\n          <span class=\"supfact\">v5</span> + Number * <span class=\"supfact\">j</span>,\n          *(int *)(<span class=\"supfact\">a2</span> + Number),\n          <span class=\"supfact\">v9</span> +\n              (<span class=\"supfact\">j</span> + <span class=\"supfact\">v8</span> * <span class=\"supfact\">i</span>) *\n                  *(_DWORD *)(<span class=\"supfact\">v10</span> + Number));\n  }\n  return Number L;\n}", "code_t": "int __cdecl decompress_texture_thread(AVCodecContext_0 *<span class=\"supfact\">avctx</span>,\n                                      void *<span class=\"supfact\">arg</span>,\n                                      int <span class=\"supfact\">slice</span>,\n                                      int thread_nb) {\n  int <span class=\"supfact\">v4</span>;\n  uint8_t *<span class=\"supfact\">p</span>;\n  int <span class=\"supfact\">remainder_blocks</span>;\n  int <span class=\"supfact\">base_blocks_per_slice</span>;\n  int <span class=\"supfact\">w_block</span>;\n  const uint8_t *<span class=\"supfact\">d</span>;\n  DDSContext_0 *<span class=\"supfact\">ctx</span>;\n  int <span class=\"supfact\">end_slice</span>;\n  int <span class=\"supfact\">y</span>;\n  int <span class=\"supfact\">x</span>;\n  <span class=\"supfact\">ctx</span> = (DDSContext_0 *)<span class=\"supfact\">avctx</span>->priv_data;\n  <span class=\"supfact\">d</span> = <span class=\"supfact\">ctx</span>->tex_data;\n  <span class=\"supfact\">w_block</span> = <span class=\"supfact\">avctx</span>->coded_width / Number;\n  <span class=\"supfact\">base_blocks_per_slice</span> = <span class=\"supfact\">avctx</span>->coded_height /\n                                          Number /\n                                          <span class=\"supfact\">ctx</span>->slice_count;\n  <span class=\"supfact\">remainder_blocks</span> = <span class=\"supfact\">avctx</span>->coded_height /\n                                     Number % <span class=\"supfact\">ctx</span>->slice_count;\n  <span class=\"supfact\">v4</span> = <span class=\"supfact\">remainder_blocks</span>;\n  if (<span class=\"supfact\">slice</span> <= <span class=\"supfact\">remainder_blocks</span>)\n    <span class=\"supfact\">v4</span> = <span class=\"supfact\">slice</span>;\n  <span class=\"supfact\">end_slice</span> =\n      <span class=\"supfact\">v4</span> +\n      <span class=\"supfact\">base_blocks_per_slice</span> * <span class=\"supfact\">slice</span> +\n      <span class=\"supfact\">base_blocks_per_slice</span>;\n  if (<span class=\"supfact\">slice</span> < <span class=\"supfact\">remainder_blocks</span>)\n    ++<span class=\"supfact\">end_slice</span>;\n  for (<span class=\"supfact\">y</span> =\n           <span class=\"supfact\">v4</span> +\n           <span class=\"supfact\">base_blocks_per_slice</span> * <span class=\"supfact\">slice</span>;\n       <span class=\"supfact\">y</span> < <span class=\"supfact\">end_slice</span>; ++<span class=\"supfact\">y</span>) {\n    <span class=\"supfact\">p</span> =\n        (uint8_t *)(*(_QWORD *)<span class=\"supfact\">arg</span> +\n                    Number * <span class=\"supfact\">y</span> *\n                        *((_DWORD *)<span class=\"supfact\">arg</span> + Number));\n    for (<span class=\"supfact\">x</span> = Number;\n         <span class=\"supfact\">x</span> < <span class=\"supfact\">w_block</span>; ++<span class=\"supfact\">x</span>)\n      <span class=\"supfact\">ctx</span>->tex_funct(\n          &<span class=\"supfact\">p</span>[Number * <span class=\"supfact\">x</span>],\n          *((int *)<span class=\"supfact\">arg</span> + Number),\n          &<span class=\"supfact\">d</span>[(<span class=\"supfact\">x</span> +\n                              <span class=\"supfact\">w_block</span> * <span class=\"supfact\">y</span>) *\n                             <span class=\"supfact\">ctx</span>->tex_ratio]);\n  }\n  return Number;\n}", "var": [{"name": "a1", "type": "AVCodecContext_0 *", "pred_name": "avctx", "ref_name": "avctx", "ref_type": "AVCodecContext_0 *"}, {"name": "a2", "type": "void *", "pred_name": "arg", "ref_name": "arg", "ref_type": "void *"}, {"name": "a3", "type": "int", "pred_name": "slice", "ref_name": "slice", "ref_type": "int"}, {"name": "v3", "type": "int", "pred_name": "v4", "ref_name": "v4", "ref_type": "int"}, {"name": "v5", "type": "uint8_t *", "pred_name": "p", "ref_name": "p", "ref_type": "uint8_t *"}, {"name": "v6", "type": "int", "pred_name": "remainder_blocks", "ref_name": "remainder_blocks", "ref_type": "int"}, {"name": "v7", "type": "int", "pred_name": "base_blocks_per_slice", "ref_name": "base_blocks_per_slice", "ref_type": "int"}, {"name": "v8", "type": "int", "pred_name": "w_block", "ref_name": "w_block", "ref_type": "int"}, {"name": "v9", "type": "const uint8_t *", "pred_name": "d", "ref_name": "d", "ref_type": "const uint8_t *"}, {"name": "v10", "type": "HapContext_0 *", "pred_name": "ctx", "ref_name": "ctx", "ref_type": "DDSContext_0 *"}, {"name": "v11", "type": "int", "pred_name": "end_slice", "ref_name": "end_slice", "ref_type": "int"}, {"name": "i", "type": "int", "pred_name": "y", "ref_name": "y", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "x", "ref_name": "x", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "bodiroga", "repo_name": "VEV", "path": "bodiroga/VEV/d32abb2602f0c180d8695671c7413de71c8952d2a8ed815361804d2c64caf319", "path_in_repo": "bodiroga/VEV/practica/Shading/light.o", "objdump": "00000000000007bb <SwitchLight>:\n 7bb:\t55                   \tpush   %rbp\n 7bc:\t48 89 e5             \tmov    %rsp,%rbp\n 7bf:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n 7c3:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n 7c6:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 7ca:\t0f 95 c0             \tsetne  %al\n 7cd:\t0f b6 d0             \tmovzbl %al,%edx\n 7d0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 7d4:\t89 50 0c             \tmov    %edx,0xc(%rax)\n 7d7:\t90                   \tnop\n 7d8:\t5d                   \tpop    %rbp\n 7d9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall SwitchLight(__int64 <span class=\"supfact\">a1</span>,\n                               int <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">a2</span> != Number;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl SwitchLight(Light *<span class=\"supfact\">thisLight</span>,\n                         int <span class=\"supfact\">status</span>) {\n  <span class=\"supfact\">thisLight</span>->switched = <span class=\"supfact\">status</span> != Number;\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "thisLight", "ref_type": "Light *"}, {"name": "a2", "type": "int", "pred_name": "a2", "ref_name": "status", "ref_type": "int"}, {"name": "result", "type": "__int64", "pred_name": "result", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "skl", "repo_name": "cthehardway", "path": "skl/cthehardway/03a52278e16a93d13252dc0e5e49cb072ddbe13de601585278ca5f0cad255498", "path_in_repo": "skl/cthehardway/src/ex22/stack_overflow", "objdump": "000000000040114e <main>:\n  40114e:\t55                   \tpush   %rbp\n  40114f:\t48 89 e5             \tmov    %rsp,%rbp\n  401152:\t48 83 ec 10          \tsub    $0x10,%rsp\n  401156:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n  401159:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  40115d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401162:\te8 bb ff ff ff       \tcallq  401122 <stack_overflow>\n  401167:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40116c:\tc9                   \tleaveq \n  40116d:\tc3                   \tretq   \n  40116e:\t66 90                \txchg   %ax,%ax", "code_s": "int __cdecl main(int <span class=\"supfact\">argc</span>, const char **<span class=\"supfact\">argv</span>,\n                 const char **<span class=\"supfact\">envp</span>) {\n  stack_overflow();\n  return Number;\n}", "code_t": "int __cdecl main(int <span class=\"supfact\">argc</span>, const char **<span class=\"supfact\">argv</span>,\n                 const char **<span class=\"supfact\">envp</span>) {\n  stack_overflow();\n  return Number;\n}", "var": [{"name": "argc", "type": "int", "pred_name": "argc", "ref_name": "argc", "ref_type": "int"}, {"name": "argv", "type": "const char * *", "pred_name": "argv", "ref_name": "argv", "ref_type": "const char * *"}, {"name": "envp", "type": "const char * *", "pred_name": "envp", "ref_name": "envp", "ref_type": "const char * *"}], "body_in_train": false}, {"repo_owner": "igvtee", "repo_name": "books", "path": "igvtee/books/4ed9f65c36eace0967272112dede43b8d4e8c5771409da17ab49ed332c89f8b7", "path_in_repo": "igvtee/books/pointers_on_c/ch9/encrypt", "objdump": "0000000000401162 <prepare_key>:\n  401162:\t55                   \tpush   %rbp\n  401163:\t48 89 e5             \tmov    %rsp,%rbp\n  401166:\t48 83 ec 50          \tsub    $0x50,%rsp\n  40116a:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  40116e:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  401172:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401176:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40117a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40117e:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  401185:\te9 9b 00 00 00       \tjmpq   401225 <prepare_key+0xc3>\n  40118a:\te8 e1 fe ff ff       \tcallq  401070 <__ctype_b_loc@plt>\n  40118f:\t48 8b 10             \tmov    (%rax),%rdx\n  401192:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401196:\t0f b6 00             \tmovzbl (%rax),%eax\n  401199:\t48 0f be c0          \tmovsbq %al,%rax\n  40119d:\t48 01 c0             \tadd    %rax,%rax\n  4011a0:\t48 01 d0             \tadd    %rdx,%rax\n  4011a3:\t0f b7 00             \tmovzwl (%rax),%eax\n  4011a6:\t0f b7 c0             \tmovzwl %ax,%eax\n  4011a9:\t25 00 04 00 00       \tand    $0x400,%eax\n  4011ae:\t85 c0                \ttest   %eax,%eax\n  4011b0:\t75 0a                \tjne    4011bc <prepare_key+0x5a>\n  4011b2:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4011b7:\te9 d5 00 00 00       \tjmpq   401291 <prepare_key+0x12f>\n  4011bc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4011c0:\t0f b6 00             \tmovzbl (%rax),%eax\n  4011c3:\t0f be c0             \tmovsbl %al,%eax\n  4011c6:\t89 c7                \tmov    %eax,%edi\n  4011c8:\te8 73 fe ff ff       \tcallq  401040 <toupper@plt>\n  4011cd:\t89 c2                \tmov    %eax,%edx\n  4011cf:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4011d3:\t88 10                \tmov    %dl,(%rax)\n  4011d5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4011d9:\t0f b6 00             \tmovzbl (%rax),%eax\n  4011dc:\t0f be c0             \tmovsbl %al,%eax\n  4011df:\t83 e8 41             \tsub    $0x41,%eax\n  4011e2:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  4011e5:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4011e8:\tba 01 00 00 00       \tmov    $0x1,%edx\n  4011ed:\t89 c1                \tmov    %eax,%ecx\n  4011ef:\td3 e2                \tshl    %cl,%edx\n  4011f1:\t89 d0                \tmov    %edx,%eax\n  4011f3:\t23 45 ec             \tand    -0x14(%rbp),%eax\n  4011f6:\t85 c0                \ttest   %eax,%eax\n  4011f8:\t75 26                \tjne    401220 <prepare_key+0xbe>\n  4011fa:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4011fd:\tba 01 00 00 00       \tmov    $0x1,%edx\n  401202:\t89 c1                \tmov    %eax,%ecx\n  401204:\td3 e2                \tshl    %cl,%edx\n  401206:\t89 d0                \tmov    %edx,%eax\n  401208:\t09 45 ec             \tor     %eax,-0x14(%rbp)\n  40120b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40120f:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  401213:\t48 89 55 f8          \tmov    %rdx,-0x8(%rbp)\n  401217:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  40121b:\t0f b6 12             \tmovzbl (%rdx),%edx\n  40121e:\t88 10                \tmov    %dl,(%rax)\n  401220:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n  401225:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401229:\t0f b6 00             \tmovzbl (%rax),%eax\n  40122c:\t84 c0                \ttest   %al,%al\n  40122e:\t0f 85 56 ff ff ff    \tjne    40118a <prepare_key+0x28>\n  401234:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  40123b:\teb 2f                \tjmp    40126c <prepare_key+0x10a>\n  40123d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401240:\tba 01 00 00 00       \tmov    $0x1,%edx\n  401245:\t89 c1                \tmov    %eax,%ecx\n  401247:\td3 e2                \tshl    %cl,%edx\n  401249:\t89 d0                \tmov    %edx,%eax\n  40124b:\t23 45 ec             \tand    -0x14(%rbp),%eax\n  40124e:\t85 c0                \ttest   %eax,%eax\n  401250:\t75 16                \tjne    401268 <prepare_key+0x106>\n  401252:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401255:\t8d 48 41             \tlea    0x41(%rax),%ecx\n  401258:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40125c:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  401260:\t48 89 55 f8          \tmov    %rdx,-0x8(%rbp)\n  401264:\t89 ca                \tmov    %ecx,%edx\n  401266:\t88 10                \tmov    %dl,(%rax)\n  401268:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  40126c:\t83 7d e8 19          \tcmpl   $0x19,-0x18(%rbp)\n  401270:\t7e cb                \tjle    40123d <prepare_key+0xdb>\n  401272:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401276:\tc6 00 00             \tmovb   $0x0,(%rax)\n  401279:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  40127d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  401281:\t48 89 d6             \tmov    %rdx,%rsi\n  401284:\t48 89 c7             \tmov    %rax,%rdi\n  401287:\te8 a4 fd ff ff       \tcallq  401030 <strcpy@plt>\n  40128c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401291:\tc9                   \tleaveq \n  401292:\tc3                   \tretq   ", "code_s": "__int64 __fastcall prepare_key(char *<span class=\"supfact\">a1</span>) {\n  char *v2;\n  char *v3;\n  char <span class=\"supfact\">src</span>[Number];\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">v6</span>;\n  char *<span class=\"supfact\">v7</span>;\n  char *<span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">src</span>;\n  <span class=\"supfact\">v7</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v6</span> = Number;\n  while (*<span class=\"supfact\">v7</span>) {\n    if (((*__ctype_b_loc())[*<span class=\"supfact\">v7</span>] & Number) == Number)\n      return Number;\n    *<span class=\"supfact\">v7</span> = toupper(*<span class=\"supfact\">v7</span>);\n    <span class=\"supfact\">i</span> = *<span class=\"supfact\">v7</span> - Number;\n    if ((<span class=\"supfact\">v6</span> & (Number << <span class=\"supfact\">i</span>)) == Number) {\n      <span class=\"supfact\">v6</span> |= Number << <span class=\"supfact\">i</span>;\n      v2 = <span class=\"supfact\">v8</span>++;\n      *v2 = *<span class=\"supfact\">v7</span>;\n    }\n    ++<span class=\"supfact\">v7</span>;\n  }\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if ((<span class=\"supfact\">v6</span> & (Number << <span class=\"supfact\">i</span>)) == Number) {\n      v3 = <span class=\"supfact\">v8</span>++;\n      *v3 = <span class=\"supfact\">i</span> + Number;\n    }\n  }\n  *<span class=\"supfact\">v8</span> = Number;\n  strcpy(<span class=\"supfact\">a1</span>, <span class=\"supfact\">src</span>);\n  return Number L;\n}", "code_t": "int __cdecl prepare_key(char *<span class=\"supfact\">key</span>) {\n  char *v2;\n  char *v3;\n  char <span class=\"supfact\">buf</span>[Number];\n  int <span class=\"supfact\">offset</span>;\n  unsigned int <span class=\"supfact\">bits</span>;\n  char *<span class=\"supfact\">pkey</span>;\n  char *<span class=\"supfact\">pbuf</span>;\n  <span class=\"supfact\">pbuf</span> = <span class=\"supfact\">buf</span>;\n  <span class=\"supfact\">pkey</span> = <span class=\"supfact\">key</span>;\n  <span class=\"supfact\">bits</span> = Number;\n  while (*<span class=\"supfact\">pkey</span>) {\n    if (((*__ctype_b_loc())[*<span class=\"supfact\">pkey</span>] & Number) == Number)\n      return Number;\n    *<span class=\"supfact\">pkey</span> = toupper(*<span class=\"supfact\">pkey</span>);\n    <span class=\"supfact\">offset</span> = *<span class=\"supfact\">pkey</span> - Number;\n    if ((<span class=\"supfact\">bits</span> & (Number << <span class=\"supfact\">offset</span>)) == Number) {\n      <span class=\"supfact\">bits</span> |= Number << <span class=\"supfact\">offset</span>;\n      v2 = <span class=\"supfact\">pbuf</span>++;\n      *v2 = *<span class=\"supfact\">pkey</span>;\n    }\n    ++<span class=\"supfact\">pkey</span>;\n  }\n  for (<span class=\"supfact\">offset</span> = Number; <span class=\"supfact\">offset</span> <= Number;\n       ++<span class=\"supfact\">offset</span>) {\n    if ((<span class=\"supfact\">bits</span> & (Number << <span class=\"supfact\">offset</span>)) == Number) {\n      v3 = <span class=\"supfact\">pbuf</span>++;\n      *v3 = <span class=\"supfact\">offset</span> + Number;\n    }\n  }\n  *<span class=\"supfact\">pbuf</span> = Number;\n  strcpy(<span class=\"supfact\">key</span>, <span class=\"supfact\">buf</span>);\n  return Number;\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "str", "ref_name": "key", "ref_type": "char *"}, {"name": "src", "type": "char[40]", "pred_name": "buf", "ref_name": "buf", "ref_type": "char[27]"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "offset", "ref_type": "int"}, {"name": "v6", "type": "int", "pred_name": "len", "ref_name": "bits", "ref_type": "unsigned int"}, {"name": "v7", "type": "char *", "pred_name": "b", "ref_name": "pkey", "ref_type": "char *"}, {"name": "v8", "type": "char *", "pred_name": "a", "ref_name": "pbuf", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2af4e000b03dbd36bf5f5b1e94bd385a31b5c6a785c70e9770f2544cd62ecd92", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/m68000/m68kops.o", "objdump": "0000000000066e45 <_ZL15m68k_op_unlk_32P15_m68ki_cpu_core>:\n   66e45:\t55                   \tpush   %rbp\n   66e46:\t48 89 e5             \tmov    %rsp,%rbp\n   66e49:\t48 83 ec 20          \tsub    $0x20,%rsp\n   66e4d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   66e51:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   66e55:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n   66e59:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   66e5d:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n   66e63:\t89 c0                \tmov    %eax,%eax\n   66e65:\t83 e0 07             \tand    $0x7,%eax\n   66e68:\t48 83 c0 08          \tadd    $0x8,%rax\n   66e6c:\t48 c1 e0 02          \tshl    $0x2,%rax\n   66e70:\t48 01 d0             \tadd    %rdx,%rax\n   66e73:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   66e77:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   66e7b:\t8b 10                \tmov    (%rax),%edx\n   66e7d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   66e81:\t89 50 44             \tmov    %edx,0x44(%rax)\n   66e84:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   66e88:\t48 89 c7             \tmov    %rax,%rdi\n   66e8b:\te8 92 a8 f9 ff       \tcallq  1722 <_ZL13m68ki_pull_32P15_m68ki_cpu_core>\n   66e90:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   66e94:\t89 02                \tmov    %eax,(%rdx)\n   66e96:\t90                   \tnop\n   66e97:\tc9                   \tleaveq \n   66e98:\tc3                   \tretq   ", "code_s": "__int64 __fastcall m68k_op_unlk_32(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  _DWORD *<span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> =\n      (_DWORD *)(<span class=\"supfact\">a1</span> + Number +\n                 Number * ((*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & Number) +\n                           Number L));\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = *<span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">result</span> = m68ki_pull_32(<span class=\"supfact\">a1</span>);\n  *<span class=\"supfact\">v2</span> = <span class=\"supfact\">result</span>;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl m68k_op_unlk_32(m68ki_cpu_core *<span class=\"supfact\">m68k</span>) {\n  UINT32 *<span class=\"supfact\">r_dst</span>;\n  <span class=\"supfact\">r_dst</span> =\n      &<span class=\"supfact\">m68k</span>->dar[(<span class=\"supfact\">m68k</span>->ir & Number) + Number];\n  <span class=\"supfact\">m68k</span>->dar[Number] = *<span class=\"supfact\">r_dst</span>;\n  *<span class=\"supfact\">r_dst</span> = m68ki_pull_32(<span class=\"supfact\">m68k</span>);\n}", "var": [{"name": "a1", "type": "opus_int16 *", "pred_name": "__unk__", "ref_name": "m68k", "ref_type": "m68ki_cpu_core *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v2", "type": "opus_int32", "pred_name": "__unk__", "ref_name": "r_dst", "ref_type": "UINT32 *"}], "body_in_train": false}, {"repo_owner": "lfgGitHub", "repo_name": "x264", "path": "lfgGitHub/x264/ab93bde61053763cc897f547f8d1b0c3d36341e3b00fa077bc5d5a180bc5c4cc", "path_in_repo": "lfgGitHub/x264//common/x86/sad16-a-10.o", "objdump": "0000000000007ca0 <x264_10_pixel_sad_x4_8x16_xop>:\n    7ca0:\tb8 07 00 00 00       \tmov    $0x7,%eax\n    7ca5:\tc5 f9 6f 27          \tvmovdqa (%rdi),%xmm4\n    7ca9:\tc5 fa 6f 06          \tvmovdqu (%rsi),%xmm0\n    7cad:\tc5 fa 6f 0a          \tvmovdqu (%rdx),%xmm1\n    7cb1:\tc5 fa 6f 11          \tvmovdqu (%rcx),%xmm2\n    7cb5:\tc4 c1 7a 6f 18       \tvmovdqu (%r8),%xmm3\n    7cba:\tc5 f9 f9 c4          \tvpsubw %xmm4,%xmm0,%xmm0\n    7cbe:\tc5 f1 f9 cc          \tvpsubw %xmm4,%xmm1,%xmm1\n    7cc2:\tc5 e9 f9 d4          \tvpsubw %xmm4,%xmm2,%xmm2\n    7cc6:\tc5 e1 f9 dc          \tvpsubw %xmm4,%xmm3,%xmm3\n    7cca:\tc4 e2 79 1d c0       \tvpabsw %xmm0,%xmm0\n    7ccf:\tc4 e2 79 1d c9       \tvpabsw %xmm1,%xmm1\n    7cd4:\tc4 e2 79 1d d2       \tvpabsw %xmm2,%xmm2\n    7cd9:\tc4 e2 79 1d db       \tvpabsw %xmm3,%xmm3\n    7cde:\tc5 f9 6f 67 20       \tvmovdqa 0x20(%rdi),%xmm4\n    7ce3:\tc4 a1 7a 6f 2c 4e    \tvmovdqu (%rsi,%r9,2),%xmm5\n    7ce9:\tc4 a1 7a 6f 34 4a    \tvmovdqu (%rdx,%r9,2),%xmm6\n    7cef:\tc4 a1 7a 6f 3c 49    \tvmovdqu (%rcx,%r9,2),%xmm7\n    7cf5:\tc4 01 7a 6f 04 48    \tvmovdqu (%r8,%r9,2),%xmm8\n    7cfb:\tc5 d1 f9 ec          \tvpsubw %xmm4,%xmm5,%xmm5\n    7cff:\tc5 c9 f9 f4          \tvpsubw %xmm4,%xmm6,%xmm6\n    7d03:\tc5 c1 f9 fc          \tvpsubw %xmm4,%xmm7,%xmm7\n    7d07:\tc5 39 f9 c4          \tvpsubw %xmm4,%xmm8,%xmm8\n    7d0b:\tc4 e2 79 1d ed       \tvpabsw %xmm5,%xmm5\n    7d10:\tc4 e2 79 1d f6       \tvpabsw %xmm6,%xmm6\n    7d15:\tc4 e2 79 1d ff       \tvpabsw %xmm7,%xmm7\n    7d1a:\tc4 42 79 1d c0       \tvpabsw %xmm8,%xmm8\n    7d1f:\tc5 f9 fd c5          \tvpaddw %xmm5,%xmm0,%xmm0\n    7d23:\tc5 f1 fd ce          \tvpaddw %xmm6,%xmm1,%xmm1\n    7d27:\tc5 e9 fd d7          \tvpaddw %xmm7,%xmm2,%xmm2\n    7d2b:\tc5 b9 fd db          \tvpaddw %xmm3,%xmm8,%xmm3\n    7d2f:\t48 83 c7 40          \tadd    $0x40,%rdi\n    7d33:\t4a 8d 34 8e          \tlea    (%rsi,%r9,4),%rsi\n    7d37:\t4a 8d 14 8a          \tlea    (%rdx,%r9,4),%rdx\n    7d3b:\t4a 8d 0c 89          \tlea    (%rcx,%r9,4),%rcx\n    7d3f:\t4f 8d 04 88          \tlea    (%r8,%r9,4),%r8\n    7d43:\tc5 f9 6f 27          \tvmovdqa (%rdi),%xmm4\n    7d47:\tc5 fa 6f 2e          \tvmovdqu (%rsi),%xmm5\n    7d4b:\tc5 fa 6f 32          \tvmovdqu (%rdx),%xmm6\n    7d4f:\tc5 fa 6f 39          \tvmovdqu (%rcx),%xmm7\n    7d53:\tc4 41 7a 6f 00       \tvmovdqu (%r8),%xmm8\n    7d58:\tc5 d1 f9 ec          \tvpsubw %xmm4,%xmm5,%xmm5\n    7d5c:\tc5 c9 f9 f4          \tvpsubw %xmm4,%xmm6,%xmm6\n    7d60:\tc5 c1 f9 fc          \tvpsubw %xmm4,%xmm7,%xmm7\n    7d64:\tc5 39 f9 c4          \tvpsubw %xmm4,%xmm8,%xmm8\n    7d68:\tc4 e2 79 1d ed       \tvpabsw %xmm5,%xmm5\n    7d6d:\tc4 e2 79 1d f6       \tvpabsw %xmm6,%xmm6\n    7d72:\tc4 e2 79 1d ff       \tvpabsw %xmm7,%xmm7\n    7d77:\tc4 42 79 1d c0       \tvpabsw %xmm8,%xmm8\n    7d7c:\tc5 f9 fd c5          \tvpaddw %xmm5,%xmm0,%xmm0\n    7d80:\tc5 f1 fd ce          \tvpaddw %xmm6,%xmm1,%xmm1\n    7d84:\tc5 e9 fd d7          \tvpaddw %xmm7,%xmm2,%xmm2\n    7d88:\tc5 b9 fd db          \tvpaddw %xmm3,%xmm8,%xmm3\n    7d8c:\tc5 f9 6f 67 20       \tvmovdqa 0x20(%rdi),%xmm4\n    7d91:\tc4 a1 7a 6f 2c 4e    \tvmovdqu (%rsi,%r9,2),%xmm5\n    7d97:\tc4 a1 7a 6f 34 4a    \tvmovdqu (%rdx,%r9,2),%xmm6\n    7d9d:\tc4 a1 7a 6f 3c 49    \tvmovdqu (%rcx,%r9,2),%xmm7\n    7da3:\tc4 01 7a 6f 04 48    \tvmovdqu (%r8,%r9,2),%xmm8\n    7da9:\tc5 d1 f9 ec          \tvpsubw %xmm4,%xmm5,%xmm5\n    7dad:\tc5 c9 f9 f4          \tvpsubw %xmm4,%xmm6,%xmm6\n    7db1:\tc5 c1 f9 fc          \tvpsubw %xmm4,%xmm7,%xmm7\n    7db5:\tc5 39 f9 c4          \tvpsubw %xmm4,%xmm8,%xmm8\n    7db9:\tc4 e2 79 1d ed       \tvpabsw %xmm5,%xmm5\n    7dbe:\tc4 e2 79 1d f6       \tvpabsw %xmm6,%xmm6\n    7dc3:\tc4 e2 79 1d ff       \tvpabsw %xmm7,%xmm7\n    7dc8:\tc4 42 79 1d c0       \tvpabsw %xmm8,%xmm8\n    7dcd:\tc5 f9 fd c5          \tvpaddw %xmm5,%xmm0,%xmm0\n    7dd1:\tc5 f1 fd ce          \tvpaddw %xmm6,%xmm1,%xmm1\n    7dd5:\tc5 e9 fd d7          \tvpaddw %xmm7,%xmm2,%xmm2\n    7dd9:\tc5 b9 fd db          \tvpaddw %xmm3,%xmm8,%xmm3\n    7ddd:\t48 ff c8             \tdec    %rax\n    7de0:\t0f 8f 49 ff ff ff    \tjg     7d2f <x264_10_pixel_sad_x4_8x16_xop+0x8f>\n    7de6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    7deb:\t8f e9 78 c7 c0       \tvphaddwq %xmm0,%xmm0\n    7df0:\tc5 f9 6d e0          \tvpunpckhqdq %xmm0,%xmm0,%xmm4\n    7df4:\tc5 f9 fe c4          \tvpaddd %xmm4,%xmm0,%xmm0\n    7df8:\t8f e9 78 c7 c9       \tvphaddwq %xmm1,%xmm1\n    7dfd:\tc5 f1 6d e9          \tvpunpckhqdq %xmm1,%xmm1,%xmm5\n    7e01:\tc5 f1 fe cd          \tvpaddd %xmm5,%xmm1,%xmm1\n    7e05:\t8f e9 78 c7 d2       \tvphaddwq %xmm2,%xmm2\n    7e0a:\tc5 e9 6d f2          \tvpunpckhqdq %xmm2,%xmm2,%xmm6\n    7e0e:\tc5 e9 fe d6          \tvpaddd %xmm6,%xmm2,%xmm2\n    7e12:\t8f e9 78 c7 db       \tvphaddwq %xmm3,%xmm3\n    7e17:\tc5 e1 6d fb          \tvpunpckhqdq %xmm3,%xmm3,%xmm7\n    7e1b:\tc5 e1 fe df          \tvpaddd %xmm7,%xmm3,%xmm3\n    7e1f:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n    7e24:\tc5 f9 7e 07          \tvmovd  %xmm0,(%rdi)\n    7e28:\tc5 f9 7e 4f 04       \tvmovd  %xmm1,0x4(%rdi)\n    7e2d:\tc5 f9 7e 57 08       \tvmovd  %xmm2,0x8(%rdi)\n    7e32:\tc5 f9 7e 5f 0c       \tvmovd  %xmm3,0xc(%rdi)\n    7e37:\tc3                   \tretq   \n    7e38:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n    7e3f:\t00 ", "code_s": "__int64 __fastcall x264_10_pixel_sad_x4_8x16_xop(__int64 <span class=\"supfact\">_RDI</span>,\n                                                 __int64 <span class=\"supfact\">_RSI</span>,\n                                                 __int64 <span class=\"supfact\">_RDX</span>,\n                                                 __int64 <span class=\"supfact\">_RCX</span>,\n                                                 __int64 <span class=\"supfact\">_R8</span>,\n                                                 __int64 <span class=\"supfact\">_R9</span>,\n                                                 __int64 <span class=\"supfact\">a7</span>) {\n  __int64 v7;\n  __int64 result;\n  v7 = Number L;\n  __asm { vmovdqa xmm4 , xmmword ptr [ rdi ] vmovdqu xmm0 , xmmword ptr [ rsi ] vmovdqu xmm1 , xmmword ptr [ rdx ] vmovdqu xmm2 , xmmword ptr [ rcx ] vmovdqu xmm3 , xmmword ptr [ r8 ] vpsubw xmm0 , xmm0 , xmm4 vpsubw xmm1 , xmm1 , xmm4 vpsubw xmm2 , xmm2 , xmm4 vpsubw xmm3 , xmm3 , xmm4 vpabsw xmm0 , xmm0 vpabsw xmm1 , xmm1 vpabsw xmm2 , xmm2 vpabsw xmm3 , xmm3 vmovdqa xmm4 , xmmword ptr [ rdi + Number h ] vmovdqu xmm5 , xmmword ptr [ rsi + r9 * Number ] vmovdqu xmm6 , xmmword ptr [ rdx + r9 * Number ] vmovdqu xmm7 , xmmword ptr [ rcx + r9 * Number ] vmovdqu xmm8 , xmmword ptr [ r8 + r9 * Number ] vpsubw xmm5 , xmm5 , xmm4 vpsubw xmm6 , xmm6 , xmm4 vpsubw xmm7 , xmm7 , xmm4 vpsubw xmm8 , xmm8 , xmm4 vpabsw xmm5 , xmm5 vpabsw xmm6 , xmm6 vpabsw xmm7 , xmm7 vpabsw xmm8 , xmm8 vpaddw xmm0 , xmm0 , xmm5 vpaddw xmm1 , xmm1 , xmm6 vpaddw xmm2 , xmm2 , xmm7 vpaddw xmm3 , xmm8 , xmm3\n  }\n  do {\n    <span class=\"supfact\">_RDI</span> += Number L;\n    <span class=\"supfact\">_RSI</span> += Number * <span class=\"supfact\">_R9</span>;\n    <span class=\"supfact\">_RDX</span> += Number * <span class=\"supfact\">_R9</span>;\n    <span class=\"supfact\">_RCX</span> += Number * <span class=\"supfact\">_R9</span>;\n    <span class=\"supfact\">_R8</span> += Number * <span class=\"supfact\">_R9</span>;\n    __asm { vmovdqa xmm4 , xmmword ptr [ rdi ] vmovdqu xmm5 , xmmword ptr [ rsi ] vmovdqu xmm6 , xmmword ptr [ rdx ] vmovdqu xmm7 , xmmword ptr [ rcx ] vmovdqu xmm8 , xmmword ptr [ r8 ] vpsubw xmm5 , xmm5 , xmm4 vpsubw xmm6 , xmm6 , xmm4 vpsubw xmm7 , xmm7 , xmm4 vpsubw xmm8 , xmm8 , xmm4 vpabsw xmm5 , xmm5 vpabsw xmm6 , xmm6 vpabsw xmm7 , xmm7 vpabsw xmm8 , xmm8 vpaddw xmm0 , xmm0 , xmm5 vpaddw xmm1 , xmm1 , xmm6 vpaddw xmm2 , xmm2 , xmm7 vpaddw xmm3 , xmm8 , xmm3 vmovdqa xmm4 , xmmword ptr [ rdi + Number h ] vmovdqu xmm5 , xmmword ptr [ rsi + r9 * Number ] vmovdqu xmm6 , xmmword ptr [ rdx + r9 * Number ] vmovdqu xmm7 , xmmword ptr [ rcx + r9 * Number ] vmovdqu xmm8 , xmmword ptr [ r8 + r9 * Number ] vpsubw xmm5 , xmm5 , xmm4 vpsubw xmm6 , xmm6 , xmm4 vpsubw xmm7 , xmm7 , xmm4 vpsubw xmm8 , xmm8 , xmm4 vpabsw xmm5 , xmm5 vpabsw xmm6 , xmm6 vpabsw xmm7 , xmm7 vpabsw xmm8 , xmm8 vpaddw xmm0 , xmm0 , xmm5 vpaddw xmm1 , xmm1 , xmm6 vpaddw xmm2 , xmm2 , xmm7 vpaddw xmm3 , xmm8 , xmm3\n    }\n  }\n  while (v7-- > Number)\n    ;\n  result = <span class=\"supfact\">a7</span>;\n  __asm { vphaddwq xmm0 , xmm0 vpunpckhqdq xmm4 , xmm0 , xmm0 vpaddd xmm0 , xmm0 , xmm4 vphaddwq xmm1 , xmm1 vpunpckhqdq xmm5 , xmm1 , xmm1 vpaddd xmm1 , xmm1 , xmm5 vphaddwq xmm2 , xmm2 vpunpckhqdq xmm6 , xmm2 , xmm2 vpaddd xmm2 , xmm2 , xmm6 vphaddwq xmm3 , xmm3 vpunpckhqdq xmm7 , xmm3 , xmm3 vpaddd xmm3 , xmm3 , xmm7}\n  <span class=\"supfact\">_RDI</span> = <span class=\"supfact\">a7</span>;\n  __asm { vmovd dword ptr [ rdi ] , xmm0 vmovd dword ptr [ rdi + Number ] , xmm1 vmovd dword ptr [ rdi + Number ] , xmm2 vmovd dword ptr [ rdi + Number Ch ] , xmm3\n  }\n  return result;\n}", "code_t": "__int64 __fastcall x264_10_pixel_sad_x4_8x16_xop(__int64 <span class=\"supfact\">_RDI</span>,\n                                                 __int64 <span class=\"supfact\">_RSI</span>,\n                                                 __int64 <span class=\"supfact\">_RDX</span>,\n                                                 __int64 <span class=\"supfact\">_RCX</span>,\n                                                 __int64 <span class=\"supfact\">_R8</span>,\n                                                 __int64 <span class=\"supfact\">_R9</span>,\n                                                 __int64 <span class=\"supfact\">a7</span>) {\n  __int64 v7;\n  __int64 result;\n  v7 = Number L;\n  __asm { vmovdqa xmm4 , xmmword ptr [ rdi ] vmovdqu xmm0 , xmmword ptr [ rsi ] vmovdqu xmm1 , xmmword ptr [ rdx ] vmovdqu xmm2 , xmmword ptr [ rcx ] vmovdqu xmm3 , xmmword ptr [ r8 ] vpsubw xmm0 , xmm0 , xmm4 vpsubw xmm1 , xmm1 , xmm4 vpsubw xmm2 , xmm2 , xmm4 vpsubw xmm3 , xmm3 , xmm4 vpabsw xmm0 , xmm0 vpabsw xmm1 , xmm1 vpabsw xmm2 , xmm2 vpabsw xmm3 , xmm3 vmovdqa xmm4 , xmmword ptr [ rdi + Number h ] vmovdqu xmm5 , xmmword ptr [ rsi + r9 * Number ] vmovdqu xmm6 , xmmword ptr [ rdx + r9 * Number ] vmovdqu xmm7 , xmmword ptr [ rcx + r9 * Number ] vmovdqu xmm8 , xmmword ptr [ r8 + r9 * Number ] vpsubw xmm5 , xmm5 , xmm4 vpsubw xmm6 , xmm6 , xmm4 vpsubw xmm7 , xmm7 , xmm4 vpsubw xmm8 , xmm8 , xmm4 vpabsw xmm5 , xmm5 vpabsw xmm6 , xmm6 vpabsw xmm7 , xmm7 vpabsw xmm8 , xmm8 vpaddw xmm0 , xmm0 , xmm5 vpaddw xmm1 , xmm1 , xmm6 vpaddw xmm2 , xmm2 , xmm7 vpaddw xmm3 , xmm8 , xmm3\n  }\n  do {\n    <span class=\"supfact\">_RDI</span> += Number L;\n    <span class=\"supfact\">_RSI</span> += Number * <span class=\"supfact\">_R9</span>;\n    <span class=\"supfact\">_RDX</span> += Number * <span class=\"supfact\">_R9</span>;\n    <span class=\"supfact\">_RCX</span> += Number * <span class=\"supfact\">_R9</span>;\n    <span class=\"supfact\">_R8</span> += Number * <span class=\"supfact\">_R9</span>;\n    __asm { vmovdqa xmm4 , xmmword ptr [ rdi ] vmovdqu xmm5 , xmmword ptr [ rsi ] vmovdqu xmm6 , xmmword ptr [ rdx ] vmovdqu xmm7 , xmmword ptr [ rcx ] vmovdqu xmm8 , xmmword ptr [ r8 ] vpsubw xmm5 , xmm5 , xmm4 vpsubw xmm6 , xmm6 , xmm4 vpsubw xmm7 , xmm7 , xmm4 vpsubw xmm8 , xmm8 , xmm4 vpabsw xmm5 , xmm5 vpabsw xmm6 , xmm6 vpabsw xmm7 , xmm7 vpabsw xmm8 , xmm8 vpaddw xmm0 , xmm0 , xmm5 vpaddw xmm1 , xmm1 , xmm6 vpaddw xmm2 , xmm2 , xmm7 vpaddw xmm3 , xmm8 , xmm3 vmovdqa xmm4 , xmmword ptr [ rdi + Number h ] vmovdqu xmm5 , xmmword ptr [ rsi + r9 * Number ] vmovdqu xmm6 , xmmword ptr [ rdx + r9 * Number ] vmovdqu xmm7 , xmmword ptr [ rcx + r9 * Number ] vmovdqu xmm8 , xmmword ptr [ r8 + r9 * Number ] vpsubw xmm5 , xmm5 , xmm4 vpsubw xmm6 , xmm6 , xmm4 vpsubw xmm7 , xmm7 , xmm4 vpsubw xmm8 , xmm8 , xmm4 vpabsw xmm5 , xmm5 vpabsw xmm6 , xmm6 vpabsw xmm7 , xmm7 vpabsw xmm8 , xmm8 vpaddw xmm0 , xmm0 , xmm5 vpaddw xmm1 , xmm1 , xmm6 vpaddw xmm2 , xmm2 , xmm7 vpaddw xmm3 , xmm8 , xmm3\n    }\n  }\n  while (v7-- > Number)\n    ;\n  result = <span class=\"supfact\">a7</span>;\n  __asm { vphaddwq xmm0 , xmm0 vpunpckhqdq xmm4 , xmm0 , xmm0 vpaddd xmm0 , xmm0 , xmm4 vphaddwq xmm1 , xmm1 vpunpckhqdq xmm5 , xmm1 , xmm1 vpaddd xmm1 , xmm1 , xmm5 vphaddwq xmm2 , xmm2 vpunpckhqdq xmm6 , xmm2 , xmm2 vpaddd xmm2 , xmm2 , xmm6 vphaddwq xmm3 , xmm3 vpunpckhqdq xmm7 , xmm3 , xmm3 vpaddd xmm3 , xmm3 , xmm7}\n  <span class=\"supfact\">_RDI</span> = <span class=\"supfact\">a7</span>;\n  __asm { vmovd dword ptr [ rdi ] , xmm0 vmovd dword ptr [ rdi + Number ] , xmm1 vmovd dword ptr [ rdi + Number ] , xmm2 vmovd dword ptr [ rdi + Number Ch ] , xmm3\n  }\n  return result;\n}", "var": [{"name": "_RDI", "type": "__int64", "pred_name": "_RDI", "ref_name": "_RDI", "ref_type": "__int64"}, {"name": "_RSI", "type": "__int64", "pred_name": "_RSI", "ref_name": "_RSI", "ref_type": "__int64"}, {"name": "_RDX", "type": "__int64", "pred_name": "_RDX", "ref_name": "_RDX", "ref_type": "__int64"}, {"name": "_RCX", "type": "__int64", "pred_name": "_RCX", "ref_name": "_RCX", "ref_type": "__int64"}, {"name": "_R8", "type": "__int64", "pred_name": "_R8", "ref_name": "_R8", "ref_type": "__int64"}, {"name": "_R9", "type": "__int64", "pred_name": "_R9", "ref_name": "_R9", "ref_type": "__int64"}, {"name": "a7", "type": "__int64", "pred_name": "a7", "ref_name": "a7", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2af4e000b03dbd36bf5f5b1e94bd385a31b5c6a785c70e9770f2544cd62ecd92", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/m68000/m68kops.o", "objdump": "0000000000066e45 <_ZL15m68k_op_unlk_32P15_m68ki_cpu_core>:\n   66e45:\t55                   \tpush   %rbp\n   66e46:\t48 89 e5             \tmov    %rsp,%rbp\n   66e49:\t48 83 ec 20          \tsub    $0x20,%rsp\n   66e4d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   66e51:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   66e55:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n   66e59:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   66e5d:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n   66e63:\t89 c0                \tmov    %eax,%eax\n   66e65:\t83 e0 07             \tand    $0x7,%eax\n   66e68:\t48 83 c0 08          \tadd    $0x8,%rax\n   66e6c:\t48 c1 e0 02          \tshl    $0x2,%rax\n   66e70:\t48 01 d0             \tadd    %rdx,%rax\n   66e73:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   66e77:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   66e7b:\t8b 10                \tmov    (%rax),%edx\n   66e7d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   66e81:\t89 50 44             \tmov    %edx,0x44(%rax)\n   66e84:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   66e88:\t48 89 c7             \tmov    %rax,%rdi\n   66e8b:\te8 92 a8 f9 ff       \tcallq  1722 <_ZL13m68ki_pull_32P15_m68ki_cpu_core>\n   66e90:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   66e94:\t89 02                \tmov    %eax,(%rdx)\n   66e96:\t90                   \tnop\n   66e97:\tc9                   \tleaveq \n   66e98:\tc3                   \tretq   ", "code_s": "__int64 __fastcall m68k_op_unlk_32(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  _DWORD *<span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> =\n      (_DWORD *)(<span class=\"supfact\">a1</span> + Number +\n                 Number * ((*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) & Number) +\n                           Number L));\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = *<span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">result</span> = m68ki_pull_32(<span class=\"supfact\">a1</span>);\n  *<span class=\"supfact\">v2</span> = <span class=\"supfact\">result</span>;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl m68k_op_unlk_32(m68ki_cpu_core *<span class=\"supfact\">m68k</span>) {\n  UINT32 *<span class=\"supfact\">r_dst</span>;\n  <span class=\"supfact\">r_dst</span> =\n      &<span class=\"supfact\">m68k</span>->dar[(<span class=\"supfact\">m68k</span>->ir & Number) + Number];\n  <span class=\"supfact\">m68k</span>->dar[Number] = *<span class=\"supfact\">r_dst</span>;\n  *<span class=\"supfact\">r_dst</span> = m68ki_pull_32(<span class=\"supfact\">m68k</span>);\n}", "var": [{"name": "a1", "type": "opus_int16 *", "pred_name": "__unk__", "ref_name": "m68k", "ref_type": "m68ki_cpu_core *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v2", "type": "opus_int32", "pred_name": "__unk__", "ref_name": "r_dst", "ref_type": "UINT32 *"}], "body_in_train": false}, {"repo_owner": "mrayy", "repo_name": "ChampionRun", "path": "mrayy/ChampionRun/286bc8ce0ed35b360c520991509f3b838a221eafdfc8a956d0dff612fccebc58", "path_in_repo": "mrayy/ChampionRun/cocos2dx/proj.linux/obj/release/layers_scenes_transitions_nodes/CCLayer.o", "objdump": "0000000000000000 <_ZNSt17_Function_handlerIFvPN7cocos2d12AccelerationEPNS0_5EventEESt5_BindIFMNS0_5LayerEFvS2_S4_EPS7_St12_PlaceholderILi1EESB_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS2_OS4_>:\n   0:\t49 89 d0             \tmov    %rdx,%r8\n   3:\t48 8b 17             \tmov    (%rdi),%rdx\n   6:\t48 8b 36             \tmov    (%rsi),%rsi\n   9:\t4d 8b 00             \tmov    (%r8),%r8\n   c:\t48 8b 02             \tmov    (%rdx),%rax\n   f:\t48 8b 7a 08          \tmov    0x8(%rdx),%rdi\n  13:\t48 03 7a 10          \tadd    0x10(%rdx),%rdi\n  17:\ta8 01                \ttest   $0x1,%al\n  19:\t74 08                \tje     23 <_ZNSt17_Function_handlerIFvPN7cocos2d12AccelerationEPNS0_5EventEESt5_BindIFMNS0_5LayerEFvS2_S4_EPS7_St12_PlaceholderILi1EESB_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS2_OS4_+0x23>\n  1b:\t48 8b 17             \tmov    (%rdi),%rdx\n  1e:\t48 8b 44 02 ff       \tmov    -0x1(%rdx,%rax,1),%rax\n  23:\t4c 89 c2             \tmov    %r8,%rdx\n  26:\tff e0                \tjmpq   *%rax", "code_s": "__int64 __fastcall std _Function_handler<\n    void()(cocos2d Acceleration *, cocos2d Event *),\n    std _Bind<void(cocos2d Layer *)(cocos2d Acceleration *, cocos2d Event *)()(\n        cocos2d Layer *, std _Placeholder<Number>, std _Placeholder<Number>)>>\n_M_invoke(char ***<span class=\"supfact\">a1</span>, __int64 *<span class=\"supfact\">a2</span>,\n          _QWORD *<span class=\"supfact\">a3</span>) {\n  __int64 v3;\n  char *<span class=\"supfact\">v4</span>;\n  char *v5;\n  v3 = *<span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v4</span> = **<span class=\"supfact\">a1</span>;\n  v5 = &(*<span class=\"supfact\">a1</span>)[Number][(_QWORD)(*<span class=\"supfact\">a1</span>)[Number]];\n  if (((unsigned __int8)<span class=\"supfact\">v4</span> & Number) != Number)\n    <span class=\"supfact\">v4</span> = *(char **)&<span class=\"supfact\">v4</span>[*(_QWORD *)v5 - Number];\n  return ((__int64(__fastcall *)(char *, __int64, _QWORD))<span class=\"supfact\">v4</span>)(\n      v5, v3, *<span class=\"supfact\">a3</span>);\n}", "code_t": "__int64 __fastcall std _Function_handler<\n    void()(cocos2d Acceleration *, cocos2d Event *),\n    std _Bind<void(cocos2d Layer *)(cocos2d Acceleration *, cocos2d Event *)()(\n        cocos2d Layer *, std _Placeholder<Number>, std _Placeholder<Number>)>>\n_M_invoke(char ***<span class=\"supfact\">a1</span>, __int64 *<span class=\"supfact\">a2</span>,\n          _QWORD *<span class=\"supfact\">a3</span>) {\n  __int64 v3;\n  char *<span class=\"supfact\">v4</span>;\n  char *v5;\n  v3 = *<span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v4</span> = **<span class=\"supfact\">a1</span>;\n  v5 = &(*<span class=\"supfact\">a1</span>)[Number][(_QWORD)(*<span class=\"supfact\">a1</span>)[Number]];\n  if (((unsigned __int8)<span class=\"supfact\">v4</span> & Number) != Number)\n    <span class=\"supfact\">v4</span> = *(char **)&<span class=\"supfact\">v4</span>[*(_QWORD *)v5 - Number];\n  return ((__int64(__fastcall *)(char *, __int64, _QWORD))<span class=\"supfact\">v4</span>)(\n      v5, v3, *<span class=\"supfact\">a3</span>);\n}", "var": [{"name": "a1", "type": "void ** *", "pred_name": "a1", "ref_name": "a1", "ref_type": "char ** *"}, {"name": "a2", "type": "void ** *", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64 *"}, {"name": "a3", "type": "unsigned __int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "_QWORD *"}, {"name": "v4", "type": "char *", "pred_name": "v4", "ref_name": "v4", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "darkspr1te", "repo_name": "uClinux-dist", "path": "darkspr1te/uClinux-dist/4f48b8dd337bdb9b572e329da46d270bff93562c94ef84e91a64c1ffdc36dabc", "path_in_repo": "darkspr1te/uClinux-dist/user/mysql/innobase/dict/dict0dict.o", "objdump": "0000000000001e0b <dict_table_autoinc_update>:\n    1e0b:\t55                   \tpush   %rbp\n    1e0c:\t48 89 e5             \tmov    %rsp,%rbp\n    1e0f:\t48 83 ec 10          \tsub    $0x10,%rsp\n    1e13:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    1e17:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    1e1b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1e1f:\t48 05 68 01 00 00    \tadd    $0x168,%rax\n    1e25:\tba bd 01 00 00       \tmov    $0x1bd,%edx\n    1e2a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e2f:\t48 89 c7             \tmov    %rax,%rdi\n    1e32:\te8 10 ed ff ff       \tcallq  b47 <mutex_enter_func>\n    1e37:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1e3b:\t48 8b 80 e8 01 00 00 \tmov    0x1e8(%rax),%rax\n    1e42:\t48 85 c0             \ttest   %rax,%rax\n    1e45:\t74 24                \tje     1e6b <dict_table_autoinc_update+0x60>\n    1e47:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1e4b:\t48 8b 80 f0 01 00 00 \tmov    0x1f0(%rax),%rax\n    1e52:\t48 39 45 f0          \tcmp    %rax,-0x10(%rbp)\n    1e56:\t7c 13                \tjl     1e6b <dict_table_autoinc_update+0x60>\n    1e58:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1e5c:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    1e60:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1e64:\t48 89 90 f0 01 00 00 \tmov    %rdx,0x1f0(%rax)\n    1e6b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1e6f:\t48 05 68 01 00 00    \tadd    $0x168,%rax\n    1e75:\t48 89 c7             \tmov    %rax,%rdi\n    1e78:\te8 92 ec ff ff       \tcallq  b0f <mutex_exit>\n    1e7d:\t90                   \tnop\n    1e7e:\tc9                   \tleaveq \n    1e7f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dict_table_autoinc_update(_QWORD *<span class=\"supfact\">a1</span>,\n                                             __int64 <span class=\"supfact\">a2</span>) {\n  mutex_enter_func((__int64)(<span class=\"supfact\">a1</span> + Number), (__int64)String,\n                   Number L);\n  if (<span class=\"supfact\">a1</span>[Number] &&\n      <span class=\"supfact\">a2</span> >= <span class=\"supfact\">a1</span>[Number])\n    <span class=\"supfact\">a1</span>[Number] = <span class=\"supfact\">a2</span> + Number;\n  return mutex_exit(<span class=\"supfact\">a1</span> + Number);\n}", "code_t": "void __cdecl dict_table_autoinc_update(dict_table_t *<span class=\"supfact\">table</span>,\n                                       ib_longlong <span class=\"supfact\">value</span>) {\n  mutex_enter_func(&<span class=\"supfact\">table</span>->autoinc_mutex, String, Number);\n  if (<span class=\"supfact\">table</span>->autoinc_inited &&\n      <span class=\"supfact\">value</span> >= <span class=\"supfact\">table</span>->autoinc)\n    <span class=\"supfact\">table</span>->autoinc = <span class=\"supfact\">value</span> + Number;\n  mutex_exit(&<span class=\"supfact\">table</span>->autoinc_mutex);\n}", "var": [{"name": "a1", "type": "dict_table_t *", "pred_name": "table", "ref_name": "table", "ref_type": "dict_table_t *"}, {"name": "a2", "type": "ulint", "pred_name": "offset", "ref_name": "value", "ref_type": "ib_longlong"}], "body_in_train": false}, {"repo_owner": "krishnair", "repo_name": "qlz", "path": "krishnair/qlz/c04e1ad6a663364772adc90f7d926ce705fabd1e29e47bd31cce69dcd12bc0b5", "path_in_repo": "krishnair/qlz//qdecomp", "objdump": "0000000000401346 <qlz_size_decompressed>:\n  401346:\t55                   \tpush   %rbp\n  401347:\t48 89 e5             \tmov    %rsp,%rbp\n  40134a:\t48 83 ec 18          \tsub    $0x18,%rsp\n  40134e:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  401352:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401356:\t0f b6 00             \tmovzbl (%rax),%eax\n  401359:\t0f be c0             \tmovsbl %al,%eax\n  40135c:\t83 e0 02             \tand    $0x2,%eax\n  40135f:\t85 c0                \ttest   %eax,%eax\n  401361:\t74 07                \tje     40136a <qlz_size_decompressed+0x24>\n  401363:\tb8 04 00 00 00       \tmov    $0x4,%eax\n  401368:\teb 05                \tjmp    40136f <qlz_size_decompressed+0x29>\n  40136a:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40136f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  401372:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401375:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  401379:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40137d:\t48 01 c2             \tadd    %rax,%rdx\n  401380:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401383:\t89 c6                \tmov    %eax,%esi\n  401385:\t48 89 d7             \tmov    %rdx,%rdi\n  401388:\te8 f4 fe ff ff       \tcallq  401281 <fast_read>\n  40138d:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  401390:\tb8 04 00 00 00       \tmov    $0x4,%eax\n  401395:\t2b 45 fc             \tsub    -0x4(%rbp),%eax\n  401398:\tc1 e0 03             \tshl    $0x3,%eax\n  40139b:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n  4013a0:\t89 c1                \tmov    %eax,%ecx\n  4013a2:\td3 ea                \tshr    %cl,%edx\n  4013a4:\t89 d0                \tmov    %edx,%eax\n  4013a6:\t21 45 f8             \tand    %eax,-0x8(%rbp)\n  4013a9:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4013ac:\tc9                   \tleaveq \n  4013ad:\tc3                   \tretq   ", "code_s": "__int64 __fastcall qlz_size_decompressed(_BYTE *<span class=\"supfact\">a1</span>) {\n  unsigned int <span class=\"supfact\">v1</span>;\n  if ((*<span class=\"supfact\">a1</span> & Number) != Number)\n    <span class=\"supfact\">v1</span> = Number;\n  else\n    <span class=\"supfact\">v1</span> = Number;\n  return (Number >> (Number * (Number - <span class=\"supfact\">v1</span>))) &\n         (unsigned int)fast_read(\n             (unsigned int *)&<span class=\"supfact\">a1</span>[<span class=\"supfact\">v1</span> + Number],\n             <span class=\"supfact\">v1</span>);\n}", "code_t": "size_t __cdecl qlz_size_decompressed(const char *<span class=\"supfact\">source</span>) {\n  ui32 <span class=\"supfact\">v1</span>;\n  if ((*<span class=\"supfact\">source</span> & Number) != Number)\n    <span class=\"supfact\">v1</span> = Number;\n  else\n    <span class=\"supfact\">v1</span> = Number;\n  return (Number >> (Number * (Number - <span class=\"supfact\">v1</span>))) &\n         fast_read(&<span class=\"supfact\">source</span>[<span class=\"supfact\">v1</span> + Number],\n                   <span class=\"supfact\">v1</span>);\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "p", "ref_name": "source", "ref_type": "const char *"}, {"name": "v1", "type": "unsigned int", "pred_name": "v1", "ref_name": "v1", "ref_type": "ui32"}], "body_in_train": false}, {"repo_owner": "bluecmd", "repo_name": "or1k-qemu", "path": "bluecmd/or1k-qemu/4a57d871ae66a268aea896f495de4a1d666e97516bdc7267896fd300b13d7151", "path_in_repo": "bluecmd/or1k-qemu//hw/nvram/fw_cfg.o", "objdump": "0000000000000af4 <fw_cfg_data_mem_write>:\n     af4:\t55                   \tpush   %rbp\n     af5:\t48 89 e5             \tmov    %rsp,%rbp\n     af8:\t48 83 ec 30          \tsub    $0x30,%rsp\n     afc:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     b00:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     b04:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     b08:\t89 4d d4             \tmov    %ecx,-0x2c(%rbp)\n     b0b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     b12:\t00 00 \n     b14:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     b18:\t31 c0                \txor    %eax,%eax\n     b1a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b1e:\t0f b6 d0             \tmovzbl %al,%edx\n     b21:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b25:\t89 d6                \tmov    %edx,%esi\n     b27:\t48 89 c7             \tmov    %rax,%rdi\n     b2a:\te8 94 fc ff ff       \tcallq  7c3 <fw_cfg_write>\n     b2f:\t90                   \tnop\n     b30:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     b34:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     b3b:\t00 00 \n     b3d:\t74 05                \tje     b44 <fw_cfg_data_mem_write+0x50>\n     b3f:\te8 00 00 00 00       \tcallq  b44 <fw_cfg_data_mem_write+0x50>\n     b44:\tc9                   \tleaveq \n     b45:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall fw_cfg_data_mem_write(\n    __int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n    unsigned __int8 <span class=\"supfact\">a3</span>) {\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  fw_cfg_write(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a3</span>);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n}", "code_t": "void __cdecl fw_cfg_data_mem_write(void *<span class=\"supfact\">opaque</span>,\n                                   hwaddr <span class=\"supfact\">addr</span>,\n                                   uint64_t <span class=\"supfact\">value</span>,\n                                   unsigned int size) {\n  fw_cfg_write((FWCfgState_0 *)<span class=\"supfact\">opaque</span>, <span class=\"supfact\">value</span>);\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "opaque", "ref_name": "opaque", "ref_type": "void *"}, {"name": "a2", "type": "target_phys_addr_t", "pred_name": "addr", "ref_name": "addr", "ref_type": "hwaddr"}, {"name": "a3", "type": "uint32_t", "pred_name": "value", "ref_name": "value", "ref_type": "uint64_t"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "trakons", "repo_name": "QEMU-s5l89xx-test", "path": "trakons/QEMU-s5l89xx-test/ffd0ba8141213c8f5540c0ec04654d9e061f16b59f78c68a92e414155a57fa57", "path_in_repo": "trakons/QEMU-s5l89xx-test//libdis-user/i386-dis.o", "objdump": "0000000000003fb2 <OP_G>:\n    3fb2:\t55                   \tpush   %rbp\n    3fb3:\t48 89 e5             \tmov    %rsp,%rbp\n    3fb6:\t48 83 ec 20          \tsub    $0x20,%rsp\n    3fba:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n    3fbd:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n    3fc0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    3fc7:\t00 00 \n    3fc9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3fcd:\t31 c0                \txor    %eax,%eax\n    3fcf:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n    3fd6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3fdc <OP_G+0x2a>\n    3fdc:\t83 e0 04             \tand    $0x4,%eax\n    3fdf:\t85 c0                \ttest   %eax,%eax\n    3fe1:\t74 0f                \tje     3ff2 <OP_G+0x40>\n    3fe3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3fe9 <OP_G+0x37>\n    3fe9:\t83 c8 44             \tor     $0x44,%eax\n    3fec:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 3ff2 <OP_G+0x40>\n    3ff2:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 3ff8 <OP_G+0x46>\n    3ff8:\t83 e0 04             \tand    $0x4,%eax\n    3ffb:\t85 c0                \ttest   %eax,%eax\n    3ffd:\t74 04                \tje     4003 <OP_G+0x51>\n    3fff:\t83 45 f4 08          \taddl   $0x8,-0xc(%rbp)\n    4003:\t83 7d ec 13          \tcmpl   $0x13,-0x14(%rbp)\n    4007:\t0f 87 2e 02 00 00    \tja     423b <OP_G+0x289>\n    400d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    4010:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    4017:\t00 \n    4018:\tff e0                \tjmpq   *%rax\n    401a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4020 <OP_G+0x6e>\n    4020:\t83 c8 40             \tor     $0x40,%eax\n    4023:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 4029 <OP_G+0x77>\n    4029:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 402f <OP_G+0x7d>\n    402f:\t85 c0                \ttest   %eax,%eax\n    4031:\t74 2c                \tje     405f <OP_G+0xad>\n    4033:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 403a <OP_G+0x88>\n    403a:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 4040 <OP_G+0x8e>\n    4040:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    4043:\t01 ca                \tadd    %ecx,%edx\n    4045:\t48 63 d2             \tmovslq %edx,%rdx\n    4048:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    404c:\t48 01 d0             \tadd    %rdx,%rax\n    404f:\t48 8b 00             \tmov    (%rax),%rax\n    4052:\t48 89 c7             \tmov    %rax,%rdi\n    4055:\te8 45 eb ff ff       \tcallq  2b9f <oappend>\n    405a:\te9 e7 01 00 00       \tjmpq   4246 <OP_G+0x294>\n    405f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4066 <OP_G+0xb4>\n    4066:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 406c <OP_G+0xba>\n    406c:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    406f:\t01 ca                \tadd    %ecx,%edx\n    4071:\t48 63 d2             \tmovslq %edx,%rdx\n    4074:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    4078:\t48 01 d0             \tadd    %rdx,%rax\n    407b:\t48 8b 00             \tmov    (%rax),%rax\n    407e:\t48 89 c7             \tmov    %rax,%rdi\n    4081:\te8 19 eb ff ff       \tcallq  2b9f <oappend>\n    4086:\te9 bb 01 00 00       \tjmpq   4246 <OP_G+0x294>\n    408b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4092 <OP_G+0xe0>\n    4092:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 4098 <OP_G+0xe6>\n    4098:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    409b:\t01 ca                \tadd    %ecx,%edx\n    409d:\t48 63 d2             \tmovslq %edx,%rdx\n    40a0:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    40a4:\t48 01 d0             \tadd    %rdx,%rax\n    40a7:\t48 8b 00             \tmov    (%rax),%rax\n    40aa:\t48 89 c7             \tmov    %rax,%rdi\n    40ad:\te8 ed ea ff ff       \tcallq  2b9f <oappend>\n    40b2:\te9 8f 01 00 00       \tjmpq   4246 <OP_G+0x294>\n    40b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40be <OP_G+0x10c>\n    40be:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 40c4 <OP_G+0x112>\n    40c4:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    40c7:\t01 ca                \tadd    %ecx,%edx\n    40c9:\t48 63 d2             \tmovslq %edx,%rdx\n    40cc:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    40d0:\t48 01 d0             \tadd    %rdx,%rax\n    40d3:\t48 8b 00             \tmov    (%rax),%rax\n    40d6:\t48 89 c7             \tmov    %rax,%rdi\n    40d9:\te8 c1 ea ff ff       \tcallq  2b9f <oappend>\n    40de:\te9 63 01 00 00       \tjmpq   4246 <OP_G+0x294>\n    40e3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40ea <OP_G+0x138>\n    40ea:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 40f0 <OP_G+0x13e>\n    40f0:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    40f3:\t01 ca                \tadd    %ecx,%edx\n    40f5:\t48 63 d2             \tmovslq %edx,%rdx\n    40f8:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    40fc:\t48 01 d0             \tadd    %rdx,%rax\n    40ff:\t48 8b 00             \tmov    (%rax),%rax\n    4102:\t48 89 c7             \tmov    %rax,%rdi\n    4105:\te8 95 ea ff ff       \tcallq  2b9f <oappend>\n    410a:\te9 37 01 00 00       \tjmpq   4246 <OP_G+0x294>\n    410f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4115 <OP_G+0x163>\n    4115:\t83 e0 08             \tand    $0x8,%eax\n    4118:\t85 c0                \ttest   %eax,%eax\n    411a:\t74 0f                \tje     412b <OP_G+0x179>\n    411c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4122 <OP_G+0x170>\n    4122:\t83 c8 48             \tor     $0x48,%eax\n    4125:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 412b <OP_G+0x179>\n    412b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4131 <OP_G+0x17f>\n    4131:\t83 e0 08             \tand    $0x8,%eax\n    4134:\t85 c0                \ttest   %eax,%eax\n    4136:\t74 29                \tje     4161 <OP_G+0x1af>\n    4138:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 413f <OP_G+0x18d>\n    413f:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 4145 <OP_G+0x193>\n    4145:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    4148:\t01 ca                \tadd    %ecx,%edx\n    414a:\t48 63 d2             \tmovslq %edx,%rdx\n    414d:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    4151:\t48 01 d0             \tadd    %rdx,%rax\n    4154:\t48 8b 00             \tmov    (%rax),%rax\n    4157:\t48 89 c7             \tmov    %rax,%rdi\n    415a:\te8 40 ea ff ff       \tcallq  2b9f <oappend>\n    415f:\teb 60                \tjmp    41c1 <OP_G+0x20f>\n    4161:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    4164:\t83 e0 01             \tand    $0x1,%eax\n    4167:\t85 c0                \ttest   %eax,%eax\n    4169:\t75 06                \tjne    4171 <OP_G+0x1bf>\n    416b:\t83 7d ec 02          \tcmpl   $0x2,-0x14(%rbp)\n    416f:\t74 29                \tje     419a <OP_G+0x1e8>\n    4171:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4178 <OP_G+0x1c6>\n    4178:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 417e <OP_G+0x1cc>\n    417e:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    4181:\t01 ca                \tadd    %ecx,%edx\n    4183:\t48 63 d2             \tmovslq %edx,%rdx\n    4186:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    418a:\t48 01 d0             \tadd    %rdx,%rax\n    418d:\t48 8b 00             \tmov    (%rax),%rax\n    4190:\t48 89 c7             \tmov    %rax,%rdi\n    4193:\te8 07 ea ff ff       \tcallq  2b9f <oappend>\n    4198:\teb 27                \tjmp    41c1 <OP_G+0x20f>\n    419a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 41a1 <OP_G+0x1ef>\n    41a1:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 41a7 <OP_G+0x1f5>\n    41a7:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    41aa:\t01 ca                \tadd    %ecx,%edx\n    41ac:\t48 63 d2             \tmovslq %edx,%rdx\n    41af:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    41b3:\t48 01 d0             \tadd    %rdx,%rax\n    41b6:\t48 8b 00             \tmov    (%rax),%rax\n    41b9:\t48 89 c7             \tmov    %rax,%rdi\n    41bc:\te8 de e9 ff ff       \tcallq  2b9f <oappend>\n    41c1:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 41c7 <OP_G+0x215>\n    41c7:\t25 00 02 00 00       \tand    $0x200,%eax\n    41cc:\t89 c2                \tmov    %eax,%edx\n    41ce:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 41d4 <OP_G+0x222>\n    41d4:\t09 d0                \tor     %edx,%eax\n    41d6:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 41dc <OP_G+0x22a>\n    41dc:\teb 68                \tjmp    4246 <OP_G+0x294>\n    41de:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 41e4 <OP_G+0x232>\n    41e4:\t83 f8 02             \tcmp    $0x2,%eax\n    41e7:\t75 29                \tjne    4212 <OP_G+0x260>\n    41e9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 41f0 <OP_G+0x23e>\n    41f0:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 41f6 <OP_G+0x244>\n    41f6:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    41f9:\t01 ca                \tadd    %ecx,%edx\n    41fb:\t48 63 d2             \tmovslq %edx,%rdx\n    41fe:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    4202:\t48 01 d0             \tadd    %rdx,%rax\n    4205:\t48 8b 00             \tmov    (%rax),%rax\n    4208:\t48 89 c7             \tmov    %rax,%rdi\n    420b:\te8 8f e9 ff ff       \tcallq  2b9f <oappend>\n    4210:\teb 34                \tjmp    4246 <OP_G+0x294>\n    4212:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4219 <OP_G+0x267>\n    4219:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 421f <OP_G+0x26d>\n    421f:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    4222:\t01 ca                \tadd    %ecx,%edx\n    4224:\t48 63 d2             \tmovslq %edx,%rdx\n    4227:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    422b:\t48 01 d0             \tadd    %rdx,%rax\n    422e:\t48 8b 00             \tmov    (%rax),%rax\n    4231:\t48 89 c7             \tmov    %rax,%rdi\n    4234:\te8 66 e9 ff ff       \tcallq  2b9f <oappend>\n    4239:\teb 0b                \tjmp    4246 <OP_G+0x294>\n    423b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4240:\te8 5a e9 ff ff       \tcallq  2b9f <oappend>\n    4245:\t90                   \tnop\n    4246:\t90                   \tnop\n    4247:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    424b:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    4252:\t00 00 \n    4254:\t74 05                \tje     425b <OP_G+0x2a9>\n    4256:\te8 00 00 00 00       \tcallq  425b <OP_G+0x2a9>\n    425b:\tc9                   \tleaveq \n    425c:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall OP_G(int <span class=\"supfact\">a1</span>,\n                                 char <span class=\"supfact\">a2</span>) {\n  int <span class=\"supfact\">v3</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  <span class=\"supfact\">v3</span> = Number;\n  if ((rex & Number) != Number)\n    rex_used |= Number;\n  if ((rex & Number) != Number)\n    <span class=\"supfact\">v3</span> = Number;\n  switch (<span class=\"supfact\">a1</span>) {\n  case Number:\n    rex_used |= Number;\n    if (rex)\n      oappend(*(const char **)(Number L * (dword_812C + <span class=\"supfact\">v3</span>) +\n                               names8rex));\n    else\n      oappend(*(const char **)(Number L * (dword_812C + <span class=\"supfact\">v3</span>) +\n                               names8));\n    return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n    if ((rex & Number) != Number)\n      rex_used |= Number;\n    if ((rex & Number) != Number) {\n      oappend(*(const char **)(Number L * (dword_812C + <span class=\"supfact\">v3</span>) +\n                               names64));\n    } else if ((<span class=\"supfact\">a2</span> & Number) == Number &&\n               <span class=\"supfact\">a1</span> == Number) {\n      oappend(*(const char **)(Number L * (dword_812C + <span class=\"supfact\">v3</span>) +\n                               names16));\n    } else {\n      oappend(*(const char **)(Number L * (dword_812C + <span class=\"supfact\">v3</span>) +\n                               names32));\n    }\n    used_prefixes |= prefixes & Number;\n    return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n  case Number:\n    oappend(*(const char **)(Number L * (dword_812C + <span class=\"supfact\">v3</span>) +\n                             names16));\n    return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n  case Number:\n    goto LABEL_10;\n  case Number:\n    goto LABEL_21;\n  case Number:\n    if (address_mode == Number)\n    LABEL_21:\n      oappend(*(const char **)(Number L * (dword_812C + <span class=\"supfact\">v3</span>) +\n                               names64));\n    else\n    LABEL_10:\n      oappend(*(const char **)(Number L * (dword_812C + <span class=\"supfact\">v3</span>) +\n                               names32));\n    break;\n  default:\n    oappend(String);\n    break;\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v4</span>;\n}", "code_t": "void __cdecl OP_G(int <span class=\"supfact\">bytemode</span>, int <span class=\"supfact\">sizeflag</span>) {\n  int <span class=\"supfact\">add</span>;\n  <span class=\"supfact\">add</span> = Number;\n  if ((rex & Number) != Number)\n    rex_used |= Number;\n  if ((rex & Number) != Number)\n    <span class=\"supfact\">add</span> = Number;\n  switch (<span class=\"supfact\">bytemode</span>) {\n  case Number:\n    rex_used |= Number;\n    if (rex)\n      oappend((&names8rex[modrm.reg])[<span class=\"supfact\">add</span>]);\n    else\n      oappend((&names8[modrm.reg])[<span class=\"supfact\">add</span>]);\n    return;\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n    if ((rex & Number) != Number)\n      rex_used |= Number;\n    if ((rex & Number) != Number) {\n      oappend((&names64[modrm.reg])[<span class=\"supfact\">add</span>]);\n    } else if ((<span class=\"supfact\">sizeflag</span> & Number) == Number &&\n               <span class=\"supfact\">bytemode</span> == Number) {\n      oappend((&names16[modrm.reg])[<span class=\"supfact\">add</span>]);\n    } else {\n      oappend((&names32[modrm.reg])[<span class=\"supfact\">add</span>]);\n    }\n    used_prefixes |= prefixes & Number;\n    return;\n  case Number:\n    oappend((&names16[modrm.reg])[<span class=\"supfact\">add</span>]);\n    return;\n  case Number:\n    goto LABEL_10;\n  case Number:\n    goto LABEL_21;\n  case Number:\n    if (address_mode_0 == mode_64bit)\n    LABEL_21:\n      oappend((&names64[modrm.reg])[<span class=\"supfact\">add</span>]);\n    else\n    LABEL_10:\n      oappend((&names32[modrm.reg])[<span class=\"supfact\">add</span>]);\n    break;\n  default:\n    oappend(String);\n    break;\n  }\n}", "var": [{"name": "a1", "type": "int", "pred_name": "bytemode", "ref_name": "bytemode", "ref_type": "int"}, {"name": "a2", "type": "int", "pred_name": "sizeflag", "ref_name": "sizeflag", "ref_type": "int"}, {"name": "v3", "type": "int", "pred_name": "add", "ref_name": "add", "ref_type": "int"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "euiko", "repo_name": "platchamer", "path": "euiko/platchamer/995767706994243047ada80627fd194521a36b46696ecea9f64f3732e0b95db6", "path_in_repo": "euiko/platchamer/3rdparty/bgfx/3rdparty/glsl-optimizer/src/glsl/glsl_lexer.o", "objdump": "0000000000000000 <_ZL35_mesa_glsl_lexer__load_buffer_statePv>:\n   0:\t48 8b 47 28          \tmov    0x28(%rdi),%rax\n   4:\t48 8b 57 18          \tmov    0x18(%rdi),%rdx\n   8:\t48 8b 14 d0          \tmov    (%rax,%rdx,8),%rdx\n   c:\t8b 42 20             \tmov    0x20(%rdx),%eax\n   f:\t89 47 34             \tmov    %eax,0x34(%rdi)\n  12:\t48 8b 42 10          \tmov    0x10(%rdx),%rax\n  16:\t48 8b 12             \tmov    (%rdx),%rdx\n  19:\t48 89 47 40          \tmov    %rax,0x40(%rdi)\n  1d:\t48 89 87 80 00 00 00 \tmov    %rax,0x80(%rdi)\n  24:\t48 89 57 08          \tmov    %rdx,0x8(%rdi)\n  28:\t8a 00                \tmov    (%rax),%al\n  2a:\t88 47 30             \tmov    %al,0x30(%rdi)\n  2d:\tc3                   \tretq   ", "code_s": "char __fastcall _mesa_glsl_lexer__load_buffer_state(void *<span class=\"supfact\">a1</span>) {\n  __int64 *v1;\n  char *v2;\n  __int64 v3;\n  char result;\n  v1 = *(__int64 **)(*((_QWORD *)<span class=\"supfact\">a1</span> + Number) +\n                     Number L * *((_QWORD *)<span class=\"supfact\">a1</span> + Number));\n  *((_DWORD *)<span class=\"supfact\">a1</span> + Number) = *((_DWORD *)v1 + Number);\n  v2 = (char *)v1[Number];\n  v3 = *v1;\n  *((_QWORD *)<span class=\"supfact\">a1</span> + Number) = v2;\n  *((_QWORD *)<span class=\"supfact\">a1</span> + Number) = v2;\n  *((_QWORD *)<span class=\"supfact\">a1</span> + Number) = v3;\n  result = *v2;\n  *((_BYTE *)<span class=\"supfact\">a1</span> + Number) = result;\n  return result;\n}", "code_t": "char __fastcall _mesa_glsl_lexer__load_buffer_state(void *<span class=\"supfact\">a1</span>) {\n  __int64 *v1;\n  char *v2;\n  __int64 v3;\n  char result;\n  v1 = *(__int64 **)(*((_QWORD *)<span class=\"supfact\">a1</span> + Number) +\n                     Number L * *((_QWORD *)<span class=\"supfact\">a1</span> + Number));\n  *((_DWORD *)<span class=\"supfact\">a1</span> + Number) = *((_DWORD *)v1 + Number);\n  v2 = (char *)v1[Number];\n  v3 = *v1;\n  *((_QWORD *)<span class=\"supfact\">a1</span> + Number) = v2;\n  *((_QWORD *)<span class=\"supfact\">a1</span> + Number) = v2;\n  *((_QWORD *)<span class=\"supfact\">a1</span> + Number) = v3;\n  result = *v2;\n  *((_BYTE *)<span class=\"supfact\">a1</span> + Number) = result;\n  return result;\n}", "var": [{"name": "a1", "type": "md5 *", "pred_name": "s", "ref_name": "a1", "ref_type": "void *"}], "body_in_train": false}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/9d9b3cb984271790df9fd014f222508bdb151ed2c5c171fdadfc4d05e72f7a86", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Source/CMakeFiles/CMakeLib.dir/cmComputeLinkDepends.cxx.o", "objdump": "0000000000000000 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n   b:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n   f:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n  13:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n  1a:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n  21:\t48 83 bd 78 ff ff ff \tcmpq   $0x0,-0x88(%rbp)\n  28:\t00 \n  29:\t0f 84 b1 04 00 00    \tje     4e0 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x4e0>\n  2f:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  33:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  37:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  3b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  3f:\t48 29 c2             \tsub    %rax,%rdx\n  42:\t48 89 d0             \tmov    %rdx,%rax\n  45:\t48 c1 f8 02          \tsar    $0x2,%rax\n  49:\t48 39 85 78 ff ff ff \tcmp    %rax,-0x88(%rbp)\n  50:\t0f 87 06 02 00 00    \tja     25c <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x25c>\n  56:\t48 8b 95 70 ff ff ff \tmov    -0x90(%rbp),%rdx\n  5d:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n  61:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  65:\t48 89 ce             \tmov    %rcx,%rsi\n  68:\t48 89 c7             \tmov    %rax,%rdi\n  6b:\te8 00 00 00 00       \tcallq  70 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x70>\n  70:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  74:\t48 89 c7             \tmov    %rax,%rdi\n  77:\te8 00 00 00 00       \tcallq  7c <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x7c>\n  7c:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  80:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  84:\t48 89 c7             \tmov    %rax,%rdi\n  87:\te8 00 00 00 00       \tcallq  8c <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x8c>\n  8c:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n  90:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n  94:\t48 8d 45 a8          \tlea    -0x58(%rbp),%rax\n  98:\t48 89 d6             \tmov    %rdx,%rsi\n  9b:\t48 89 c7             \tmov    %rax,%rdi\n  9e:\te8 00 00 00 00       \tcallq  a3 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0xa3>\n  a3:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  a7:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  ab:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  af:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  b3:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  b7:\t48 3b 85 78 ff ff ff \tcmp    -0x88(%rbp),%rax\n  be:\t0f 86 d9 00 00 00    \tjbe    19d <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x19d>\n  c4:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  c8:\t48 89 c7             \tmov    %rax,%rdi\n  cb:\te8 00 00 00 00       \tcallq  d0 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0xd0>\n  d0:\t48 89 c6             \tmov    %rax,%rsi\n  d3:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  d7:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  db:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  df:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  e3:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n  e7:\t48 8b 49 08          \tmov    0x8(%rcx),%rcx\n  eb:\t48 8b bd 78 ff ff ff \tmov    -0x88(%rbp),%rdi\n  f2:\t48 c1 e7 02          \tshl    $0x2,%rdi\n  f6:\t48 f7 df             \tneg    %rdi\n  f9:\t48 01 cf             \tadd    %rcx,%rdi\n  fc:\t48 89 f1             \tmov    %rsi,%rcx\n  ff:\t48 89 c6             \tmov    %rax,%rsi\n 102:\te8 00 00 00 00       \tcallq  107 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x107>\n 107:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 10b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 10f:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n 116:\t48 c1 e2 02          \tshl    $0x2,%rdx\n 11a:\t48 01 c2             \tadd    %rax,%rdx\n 11d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 121:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n 125:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 12c:\t48 c1 e0 02          \tshl    $0x2,%rax\n 130:\t48 f7 d8             \tneg    %rax\n 133:\t48 89 c2             \tmov    %rax,%rdx\n 136:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 13a:\t48 8d 1c 02          \tlea    (%rdx,%rax,1),%rbx\n 13e:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 142:\t48 89 c7             \tmov    %rax,%rdi\n 145:\te8 00 00 00 00       \tcallq  14a <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x14a>\n 14a:\t48 8b 00             \tmov    (%rax),%rax\n 14d:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n 151:\t48 89 de             \tmov    %rbx,%rsi\n 154:\t48 89 c7             \tmov    %rax,%rdi\n 157:\te8 00 00 00 00       \tcallq  15c <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x15c>\n 15c:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 160:\t48 89 c7             \tmov    %rax,%rdi\n 163:\te8 00 00 00 00       \tcallq  168 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x168>\n 168:\t48 8b 00             \tmov    (%rax),%rax\n 16b:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n 172:\t48 c1 e2 02          \tshl    $0x2,%rdx\n 176:\t48 8d 1c 10          \tlea    (%rax,%rdx,1),%rbx\n 17a:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 17e:\t48 89 c7             \tmov    %rax,%rdi\n 181:\te8 00 00 00 00       \tcallq  186 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x186>\n 186:\t48 8b 00             \tmov    (%rax),%rax\n 189:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 18d:\t48 89 de             \tmov    %rbx,%rsi\n 190:\t48 89 c7             \tmov    %rax,%rdi\n 193:\te8 00 00 00 00       \tcallq  198 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x198>\n 198:\te9 ae 00 00 00       \tjmpq   24b <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x24b>\n 19d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1a1:\t48 89 c7             \tmov    %rax,%rdi\n 1a4:\te8 00 00 00 00       \tcallq  1a9 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x1a9>\n 1a9:\t48 89 c1             \tmov    %rax,%rcx\n 1ac:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 1b3:\t48 2b 45 c0          \tsub    -0x40(%rbp),%rax\n 1b7:\t48 89 c6             \tmov    %rax,%rsi\n 1ba:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1be:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 1c2:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 1c6:\t48 89 c7             \tmov    %rax,%rdi\n 1c9:\te8 00 00 00 00       \tcallq  1ce <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x1ce>\n 1ce:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n 1d2:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n 1d6:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1da:\t48 89 c7             \tmov    %rax,%rdi\n 1dd:\te8 00 00 00 00       \tcallq  1e2 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x1e2>\n 1e2:\t49 89 c4             \tmov    %rax,%r12\n 1e5:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1e9:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n 1ed:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 1f1:\t48 89 c7             \tmov    %rax,%rdi\n 1f4:\te8 00 00 00 00       \tcallq  1f9 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x1f9>\n 1f9:\t48 8b 00             \tmov    (%rax),%rax\n 1fc:\t48 8b 75 b8          \tmov    -0x48(%rbp),%rsi\n 200:\t4c 89 e1             \tmov    %r12,%rcx\n 203:\t48 89 da             \tmov    %rbx,%rdx\n 206:\t48 89 c7             \tmov    %rax,%rdi\n 209:\te8 00 00 00 00       \tcallq  20e <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x20e>\n 20e:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 212:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 216:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n 21a:\t48 c1 e2 02          \tshl    $0x2,%rdx\n 21e:\t48 01 c2             \tadd    %rax,%rdx\n 221:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 225:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n 229:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 22d:\t48 89 c7             \tmov    %rax,%rdi\n 230:\te8 00 00 00 00       \tcallq  235 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x235>\n 235:\t48 8b 00             \tmov    (%rax),%rax\n 238:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 23c:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n 240:\t48 89 ce             \tmov    %rcx,%rsi\n 243:\t48 89 c7             \tmov    %rax,%rdi\n 246:\te8 00 00 00 00       \tcallq  24b <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x24b>\n 24b:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 24f:\t48 89 c7             \tmov    %rax,%rdi\n 252:\te8 00 00 00 00       \tcallq  257 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x257>\n 257:\te9 84 02 00 00       \tjmpq   4e0 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x4e0>\n 25c:\t48 8b 8d 78 ff ff ff \tmov    -0x88(%rbp),%rcx\n 263:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 267:\tba 00 00 00 00       \tmov    $0x0,%edx\n 26c:\t48 89 ce             \tmov    %rcx,%rsi\n 26f:\t48 89 c7             \tmov    %rax,%rdi\n 272:\te8 00 00 00 00       \tcallq  277 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x277>\n 277:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 27b:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 27f:\t48 89 c7             \tmov    %rax,%rdi\n 282:\te8 00 00 00 00       \tcallq  287 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x287>\n 287:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n 28b:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n 28f:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 293:\t48 89 d6             \tmov    %rdx,%rsi\n 296:\t48 89 c7             \tmov    %rax,%rdi\n 299:\te8 00 00 00 00       \tcallq  29e <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x29e>\n 29e:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 2a2:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 2a6:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 2aa:\t48 89 d6             \tmov    %rdx,%rsi\n 2ad:\t48 89 c7             \tmov    %rax,%rdi\n 2b0:\te8 00 00 00 00       \tcallq  2b5 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x2b5>\n 2b5:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 2b9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 2bd:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 2c1:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 2c5:\t48 89 c7             \tmov    %rax,%rdi\n 2c8:\te8 00 00 00 00       \tcallq  2cd <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x2cd>\n 2cd:\t48 89 c1             \tmov    %rax,%rcx\n 2d0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 2d4:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 2db:\t00 \n 2dc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 2e0:\t48 8d 3c 02          \tlea    (%rdx,%rax,1),%rdi\n 2e4:\t48 8b 95 70 ff ff ff \tmov    -0x90(%rbp),%rdx\n 2eb:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 2f2:\t48 89 c6             \tmov    %rax,%rsi\n 2f5:\te8 00 00 00 00       \tcallq  2fa <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x2fa>\n 2fa:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n 301:\t00 \n 302:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 306:\t48 89 c7             \tmov    %rax,%rdi\n 309:\te8 00 00 00 00       \tcallq  30e <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x30e>\n 30e:\t48 89 c3             \tmov    %rax,%rbx\n 311:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 315:\t48 89 c7             \tmov    %rax,%rdi\n 318:\te8 00 00 00 00       \tcallq  31d <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x31d>\n 31d:\t48 8b 30             \tmov    (%rax),%rsi\n 320:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 324:\t48 8b 00             \tmov    (%rax),%rax\n 327:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 32b:\t48 89 d9             \tmov    %rbx,%rcx\n 32e:\t48 89 c7             \tmov    %rax,%rdi\n 331:\te8 00 00 00 00       \tcallq  336 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x336>\n 336:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 33a:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 341:\t48 c1 e0 02          \tshl    $0x2,%rax\n 345:\t48 01 45 e8          \tadd    %rax,-0x18(%rbp)\n 349:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 34d:\t48 89 c7             \tmov    %rax,%rdi\n 350:\te8 00 00 00 00       \tcallq  355 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x355>\n 355:\t49 89 c4             \tmov    %rax,%r12\n 358:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 35c:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n 360:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 364:\t48 89 c7             \tmov    %rax,%rdi\n 367:\te8 00 00 00 00       \tcallq  36c <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x36c>\n 36c:\t48 8b 00             \tmov    (%rax),%rax\n 36f:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 373:\t4c 89 e1             \tmov    %r12,%rcx\n 376:\t48 89 de             \tmov    %rbx,%rsi\n 379:\t48 89 c7             \tmov    %rax,%rdi\n 37c:\te8 00 00 00 00       \tcallq  381 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x381>\n 381:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 385:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 389:\t48 89 c7             \tmov    %rax,%rdi\n 38c:\te8 00 00 00 00       \tcallq  391 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x391>\n 391:\t48 89 c2             \tmov    %rax,%rdx\n 394:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 398:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n 39c:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 3a0:\t48 8b 00             \tmov    (%rax),%rax\n 3a3:\t48 89 ce             \tmov    %rcx,%rsi\n 3a6:\t48 89 c7             \tmov    %rax,%rdi\n 3a9:\te8 00 00 00 00       \tcallq  3ae <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x3ae>\n 3ae:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 3b2:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n 3b6:\t48 8b 4a 10          \tmov    0x10(%rdx),%rcx\n 3ba:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n 3be:\t48 8b 12             \tmov    (%rdx),%rdx\n 3c1:\t48 29 d1             \tsub    %rdx,%rcx\n 3c4:\t48 89 ca             \tmov    %rcx,%rdx\n 3c7:\t48 c1 fa 02          \tsar    $0x2,%rdx\n 3cb:\t48 89 d6             \tmov    %rdx,%rsi\n 3ce:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n 3d2:\t48 8b 0a             \tmov    (%rdx),%rcx\n 3d5:\t48 89 f2             \tmov    %rsi,%rdx\n 3d8:\t48 89 ce             \tmov    %rcx,%rsi\n 3db:\t48 89 c7             \tmov    %rax,%rdi\n 3de:\te8 00 00 00 00       \tcallq  3e3 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x3e3>\n 3e3:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 3e7:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 3eb:\t48 89 10             \tmov    %rdx,(%rax)\n 3ee:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 3f2:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 3f6:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n 3fa:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 3fe:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n 405:\t00 \n 406:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 40a:\t48 01 c2             \tadd    %rax,%rdx\n 40d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 411:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n 415:\te9 c6 00 00 00       \tjmpq   4e0 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x4e0>\n 41a:\t48 89 c3             \tmov    %rax,%rbx\n 41d:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n 421:\t48 89 c7             \tmov    %rax,%rdi\n 424:\te8 00 00 00 00       \tcallq  429 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x429>\n 429:\t48 89 d8             \tmov    %rbx,%rax\n 42c:\t48 89 c7             \tmov    %rax,%rdi\n 42f:\te8 00 00 00 00       \tcallq  434 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x434>\n 434:\t48 89 c7             \tmov    %rax,%rdi\n 437:\te8 00 00 00 00       \tcallq  43c <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x43c>\n 43c:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 441:\t75 4c                \tjne    48f <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x48f>\n 443:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 447:\t48 89 c7             \tmov    %rax,%rdi\n 44a:\te8 00 00 00 00       \tcallq  44f <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x44f>\n 44f:\t48 89 c2             \tmov    %rax,%rdx\n 452:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n 456:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 45d:\t48 01 c8             \tadd    %rcx,%rax\n 460:\t48 8d 0c 85 00 00 00 \tlea    0x0(,%rax,4),%rcx\n 467:\t00 \n 468:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 46c:\t48 01 c1             \tadd    %rax,%rcx\n 46f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 473:\t48 8d 34 85 00 00 00 \tlea    0x0(,%rax,4),%rsi\n 47a:\t00 \n 47b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 47f:\t48 01 f0             \tadd    %rsi,%rax\n 482:\t48 89 ce             \tmov    %rcx,%rsi\n 485:\t48 89 c7             \tmov    %rax,%rdi\n 488:\te8 00 00 00 00       \tcallq  48d <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x48d>\n 48d:\teb 22                \tjmp    4b1 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x4b1>\n 48f:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 493:\t48 89 c7             \tmov    %rax,%rdi\n 496:\te8 00 00 00 00       \tcallq  49b <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x49b>\n 49b:\t48 89 c2             \tmov    %rax,%rdx\n 49e:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n 4a2:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 4a6:\t48 89 ce             \tmov    %rcx,%rsi\n 4a9:\t48 89 c7             \tmov    %rax,%rdi\n 4ac:\te8 00 00 00 00       \tcallq  4b1 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x4b1>\n 4b1:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 4b5:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 4b9:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n 4bd:\t48 89 ce             \tmov    %rcx,%rsi\n 4c0:\t48 89 c7             \tmov    %rax,%rdi\n 4c3:\te8 00 00 00 00       \tcallq  4c8 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x4c8>\n 4c8:\te8 00 00 00 00       \tcallq  4cd <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x4cd>\n 4cd:\t48 89 c3             \tmov    %rax,%rbx\n 4d0:\te8 00 00 00 00       \tcallq  4d5 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x4d5>\n 4d5:\t48 89 d8             \tmov    %rbx,%rax\n 4d8:\t48 89 c7             \tmov    %rax,%rdi\n 4db:\te8 00 00 00 00       \tcallq  4e0 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x4e0>\n 4e0:\t90                   \tnop\n 4e1:\t48 83 ec 80          \tsub    $0xffffffffffffff80,%rsp\n 4e5:\t5b                   \tpop    %rbx\n 4e6:\t41 5c                \tpop    %r12\n 4e8:\t5d                   \tpop    %rbp\n 4e9:\tc3                   \tretq   ", "code_s": "void __fastcall std vector<int>\n_M_fill_insert(__int64 *<span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n               unsigned __int64 <span class=\"supfact\">a3</span>,\n               __int64 <span class=\"supfact\">a4</span>) {\n  __int64 v4;\n  __int64 v5;\n  _QWORD *v6;\n  __int64 v7;\n  _QWORD *v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  _QWORD *v13;\n  _QWORD *v14;\n  __int64 v15;\n  __int64 v16;\n  _QWORD *v17;\n  __int64 v18;\n  __int64 v19;\n  _QWORD *v20;\n  __int64 <span class=\"supfact\">v23</span>;\n  __int64 *<span class=\"supfact\">v24</span>;\n  char <span class=\"supfact\">v25</span>[Number];\n  __int64 <span class=\"supfact\">v26</span>;\n  __int64 <span class=\"supfact\">v27</span>;\n  __int64 <span class=\"supfact\">v28</span>;\n  unsigned __int64 <span class=\"supfact\">v29</span>;\n  __int64 <span class=\"supfact\">v30</span>;\n  __int64 <span class=\"supfact\">v31</span>;\n  __int64 <span class=\"supfact\">v32</span>;\n  __int64 <span class=\"supfact\">v33</span>;\n  unsigned __int64 <span class=\"supfact\">v34</span>;\n  <span class=\"supfact\">v24</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v23</span> = <span class=\"supfact\">a2</span>;\n  if (<span class=\"supfact\">a3</span>) {\n    if (<span class=\"supfact\">a3</span> >\n        (<span class=\"supfact\">v24</span>[Number] - <span class=\"supfact\">v24</span>[Number]) >> Number) {\n      <span class=\"supfact\">v33</span> = std vector<int> _M_check_len(\n          <span class=\"supfact\">v24</span>, <span class=\"supfact\">a3</span>, String);\n      <span class=\"supfact\">v27</span> = std vector<int> begin((__int64)<span class=\"supfact\">v24</span>);\n      <span class=\"supfact\">v32</span> = __gnu_cxx operator-\n          <int *, std vector<int>>(&<span class=\"supfact\">v23</span>, &<span class=\"supfact\">v27</span>);\n      <span class=\"supfact\">v31</span> = std _Vector_base<int> _M_allocate(\n          <span class=\"supfact\">v24</span>, <span class=\"supfact\">v33</span>);\n      <span class=\"supfact\">v34</span> = <span class=\"supfact\">v31</span>;\n      v15 = std _Vector_base<int> _M_get_Tp_allocator(\n          (__int64)<span class=\"supfact\">v24</span>);\n      std __uninitialized_fill_n_a<int *, unsigned long, int, int>(\n          Number * <span class=\"supfact\">v32</span> + <span class=\"supfact\">v31</span>,\n          <span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>, v15);\n      <span class=\"supfact\">v34</span> = Number L;\n      v16 = std _Vector_base<int> _M_get_Tp_allocator(\n          (__int64)<span class=\"supfact\">v24</span>);\n      v17 = (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n          (__int64)&<span class=\"supfact\">v23</span>);\n      <span class=\"supfact\">v34</span> =\n          Number * <span class=\"supfact\">a3</span> +\n          std __uninitialized_move_if_noexcept_a<int *, int *,\n                                                 std allocator<int>>(\n              *<span class=\"supfact\">v24</span>, *v17, <span class=\"supfact\">v31</span>, v16);\n      v18 = std _Vector_base<int> _M_get_Tp_allocator(\n          (__int64)<span class=\"supfact\">v24</span>);\n      v19 = <span class=\"supfact\">v24</span>[Number];\n      v20 = (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n          (__int64)&<span class=\"supfact\">v23</span>);\n      <span class=\"supfact\">v34</span> = std\n          __uninitialized_move_if_noexcept_a<int *, int *, std allocator<int>>(\n              *v20, v19, <span class=\"supfact\">v34</span>, v18);\n      std _Vector_base<int> _M_get_Tp_allocator((__int64)<span class=\"supfact\">v24</span>);\n      std _Destroy<int *, int>(*<span class=\"supfact\">v24</span>,\n                               <span class=\"supfact\">v24</span>[Number]);\n      std _Vector_base<int> _M_deallocate(\n          (__int64)<span class=\"supfact\">v24</span>, *<span class=\"supfact\">v24</span>,\n          (<span class=\"supfact\">v24</span>[Number] - *<span class=\"supfact\">v24</span>) >> Number);\n      *<span class=\"supfact\">v24</span> = <span class=\"supfact\">v31</span>;\n      <span class=\"supfact\">v24</span>[Number] = <span class=\"supfact\">v34</span>;\n      <span class=\"supfact\">v24</span>[Number] =\n          <span class=\"supfact\">v31</span> + Number * <span class=\"supfact\">v33</span>;\n    } else {\n      std vector<int> _Temporary_value _Temporary_value<int const &>(\n          <span class=\"supfact\">v25</span>, <span class=\"supfact\">v24</span>, <span class=\"supfact\">a4</span>);\n      <span class=\"supfact\">v30</span> =\n          std vector<int> _Temporary_value _M_val(<span class=\"supfact\">v25</span>);\n      <span class=\"supfact\">v26</span> = std vector<int> end((__int64)<span class=\"supfact\">v24</span>);\n      <span class=\"supfact\">v29</span> = __gnu_cxx operator-\n          <int *, std vector<int>>(&<span class=\"supfact\">v26</span>, &<span class=\"supfact\">v23</span>);\n      <span class=\"supfact\">v28</span> = <span class=\"supfact\">v24</span>[Number];\n      if (<span class=\"supfact\">v29</span> <= <span class=\"supfact\">a3</span>) {\n        v9 = std _Vector_base<int> _M_get_Tp_allocator(\n            (__int64)<span class=\"supfact\">v24</span>);\n        v10 = std __uninitialized_fill_n_a<int *, unsigned long, int, int>(\n            <span class=\"supfact\">v24</span>[Number],\n            <span class=\"supfact\">a3</span> - <span class=\"supfact\">v29</span>, <span class=\"supfact\">v30</span>, v9);\n        <span class=\"supfact\">v24</span>[Number] = v10;\n        v11 = std _Vector_base<int> _M_get_Tp_allocator(\n            (__int64)<span class=\"supfact\">v24</span>);\n        v12 = <span class=\"supfact\">v24</span>[Number];\n        v13 =\n            (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n                (__int64)&<span class=\"supfact\">v23</span>);\n        std __uninitialized_move_a<int *, int *, std allocator<int>>(\n            *v13, <span class=\"supfact\">v28</span>, v12, v11);\n        <span class=\"supfact\">v24</span>[Number] += Number * <span class=\"supfact\">v29</span>;\n        v14 =\n            (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n                (__int64)&<span class=\"supfact\">v23</span>);\n        std fill<int *, int>(*v14, <span class=\"supfact\">v28</span>, <span class=\"supfact\">v30</span>);\n      } else {\n        v4 = std _Vector_base<int> _M_get_Tp_allocator(\n            (__int64)<span class=\"supfact\">v24</span>);\n        std __uninitialized_move_a<int *, int *, std allocator<int>>(\n            <span class=\"supfact\">v24</span>[Number] - Number * <span class=\"supfact\">a3</span>,\n            <span class=\"supfact\">v24</span>[Number], <span class=\"supfact\">v24</span>[Number], v4);\n        <span class=\"supfact\">v24</span>[Number] += Number * <span class=\"supfact\">a3</span>;\n        v5 = Number * <span class=\"supfact\">a3</span> + <span class=\"supfact\">v28</span>;\n        v6 = (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n            (__int64)&<span class=\"supfact\">v23</span>);\n        std move_backward<int *, int *>(*v6, v5, <span class=\"supfact\">v28</span>);\n        v7 =\n            *(_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n                (__int64)&<span class=\"supfact\">v23</span>) +\n            Number * <span class=\"supfact\">a3</span>;\n        v8 = (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n            (__int64)&<span class=\"supfact\">v23</span>);\n        std fill<int *, int>(*v8, v7, <span class=\"supfact\">v30</span>);\n      }\n      std vector<int> _Temporary_value ~_Temporary_value(<span class=\"supfact\">v25</span>);\n    }\n  }\n}", "code_t": "void __fastcall std vector<int>\n_M_fill_insert(__int64 *<span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n               unsigned __int64 <span class=\"supfact\">a3</span>,\n               __int64 <span class=\"supfact\">a4</span>) {\n  __int64 v4;\n  __int64 v5;\n  _QWORD *v6;\n  __int64 v7;\n  _QWORD *v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  _QWORD *v13;\n  _QWORD *v14;\n  __int64 v15;\n  __int64 v16;\n  _QWORD *v17;\n  __int64 v18;\n  __int64 v19;\n  _QWORD *v20;\n  __int64 <span class=\"supfact\">v23</span>;\n  __int64 *<span class=\"supfact\">v24</span>;\n  char <span class=\"supfact\">v25</span>[Number];\n  __int64 <span class=\"supfact\">v26</span>;\n  __int64 <span class=\"supfact\">v27</span>;\n  __int64 <span class=\"supfact\">v28</span>;\n  unsigned __int64 <span class=\"supfact\">v29</span>;\n  __int64 <span class=\"supfact\">v30</span>;\n  __int64 <span class=\"supfact\">v31</span>;\n  __int64 <span class=\"supfact\">v32</span>;\n  __int64 <span class=\"supfact\">v33</span>;\n  unsigned __int64 <span class=\"supfact\">v34</span>;\n  <span class=\"supfact\">v24</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">v23</span> = <span class=\"supfact\">a2</span>;\n  if (<span class=\"supfact\">a3</span>) {\n    if (<span class=\"supfact\">a3</span> >\n        (<span class=\"supfact\">v24</span>[Number] - <span class=\"supfact\">v24</span>[Number]) >> Number) {\n      <span class=\"supfact\">v33</span> = std vector<int> _M_check_len(\n          <span class=\"supfact\">v24</span>, <span class=\"supfact\">a3</span>, String);\n      <span class=\"supfact\">v27</span> = std vector<int> begin((__int64)<span class=\"supfact\">v24</span>);\n      <span class=\"supfact\">v32</span> = __gnu_cxx operator-\n          <int *, std vector<int>>(&<span class=\"supfact\">v23</span>, &<span class=\"supfact\">v27</span>);\n      <span class=\"supfact\">v31</span> = std _Vector_base<int> _M_allocate(\n          <span class=\"supfact\">v24</span>, <span class=\"supfact\">v33</span>);\n      <span class=\"supfact\">v34</span> = <span class=\"supfact\">v31</span>;\n      v15 = std _Vector_base<int> _M_get_Tp_allocator(\n          (__int64)<span class=\"supfact\">v24</span>);\n      std __uninitialized_fill_n_a<int *, unsigned long, int, int>(\n          Number * <span class=\"supfact\">v32</span> + <span class=\"supfact\">v31</span>,\n          <span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>, v15);\n      <span class=\"supfact\">v34</span> = Number L;\n      v16 = std _Vector_base<int> _M_get_Tp_allocator(\n          (__int64)<span class=\"supfact\">v24</span>);\n      v17 = (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n          (__int64)&<span class=\"supfact\">v23</span>);\n      <span class=\"supfact\">v34</span> =\n          Number * <span class=\"supfact\">a3</span> +\n          std __uninitialized_move_if_noexcept_a<int *, int *,\n                                                 std allocator<int>>(\n              *<span class=\"supfact\">v24</span>, *v17, <span class=\"supfact\">v31</span>, v16);\n      v18 = std _Vector_base<int> _M_get_Tp_allocator(\n          (__int64)<span class=\"supfact\">v24</span>);\n      v19 = <span class=\"supfact\">v24</span>[Number];\n      v20 = (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n          (__int64)&<span class=\"supfact\">v23</span>);\n      <span class=\"supfact\">v34</span> = std\n          __uninitialized_move_if_noexcept_a<int *, int *, std allocator<int>>(\n              *v20, v19, <span class=\"supfact\">v34</span>, v18);\n      std _Vector_base<int> _M_get_Tp_allocator((__int64)<span class=\"supfact\">v24</span>);\n      std _Destroy<int *, int>(*<span class=\"supfact\">v24</span>,\n                               <span class=\"supfact\">v24</span>[Number]);\n      std _Vector_base<int> _M_deallocate(\n          (__int64)<span class=\"supfact\">v24</span>, *<span class=\"supfact\">v24</span>,\n          (<span class=\"supfact\">v24</span>[Number] - *<span class=\"supfact\">v24</span>) >> Number);\n      *<span class=\"supfact\">v24</span> = <span class=\"supfact\">v31</span>;\n      <span class=\"supfact\">v24</span>[Number] = <span class=\"supfact\">v34</span>;\n      <span class=\"supfact\">v24</span>[Number] =\n          <span class=\"supfact\">v31</span> + Number * <span class=\"supfact\">v33</span>;\n    } else {\n      std vector<int> _Temporary_value _Temporary_value<int const &>(\n          <span class=\"supfact\">v25</span>, <span class=\"supfact\">v24</span>, <span class=\"supfact\">a4</span>);\n      <span class=\"supfact\">v30</span> =\n          std vector<int> _Temporary_value _M_val(<span class=\"supfact\">v25</span>);\n      <span class=\"supfact\">v26</span> = std vector<int> end((__int64)<span class=\"supfact\">v24</span>);\n      <span class=\"supfact\">v29</span> = __gnu_cxx operator-\n          <int *, std vector<int>>(&<span class=\"supfact\">v26</span>, &<span class=\"supfact\">v23</span>);\n      <span class=\"supfact\">v28</span> = <span class=\"supfact\">v24</span>[Number];\n      if (<span class=\"supfact\">v29</span> <= <span class=\"supfact\">a3</span>) {\n        v9 = std _Vector_base<int> _M_get_Tp_allocator(\n            (__int64)<span class=\"supfact\">v24</span>);\n        v10 = std __uninitialized_fill_n_a<int *, unsigned long, int, int>(\n            <span class=\"supfact\">v24</span>[Number],\n            <span class=\"supfact\">a3</span> - <span class=\"supfact\">v29</span>, <span class=\"supfact\">v30</span>, v9);\n        <span class=\"supfact\">v24</span>[Number] = v10;\n        v11 = std _Vector_base<int> _M_get_Tp_allocator(\n            (__int64)<span class=\"supfact\">v24</span>);\n        v12 = <span class=\"supfact\">v24</span>[Number];\n        v13 =\n            (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n                (__int64)&<span class=\"supfact\">v23</span>);\n        std __uninitialized_move_a<int *, int *, std allocator<int>>(\n            *v13, <span class=\"supfact\">v28</span>, v12, v11);\n        <span class=\"supfact\">v24</span>[Number] += Number * <span class=\"supfact\">v29</span>;\n        v14 =\n            (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n                (__int64)&<span class=\"supfact\">v23</span>);\n        std fill<int *, int>(*v14, <span class=\"supfact\">v28</span>, <span class=\"supfact\">v30</span>);\n      } else {\n        v4 = std _Vector_base<int> _M_get_Tp_allocator(\n            (__int64)<span class=\"supfact\">v24</span>);\n        std __uninitialized_move_a<int *, int *, std allocator<int>>(\n            <span class=\"supfact\">v24</span>[Number] - Number * <span class=\"supfact\">a3</span>,\n            <span class=\"supfact\">v24</span>[Number], <span class=\"supfact\">v24</span>[Number], v4);\n        <span class=\"supfact\">v24</span>[Number] += Number * <span class=\"supfact\">a3</span>;\n        v5 = Number * <span class=\"supfact\">a3</span> + <span class=\"supfact\">v28</span>;\n        v6 = (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n            (__int64)&<span class=\"supfact\">v23</span>);\n        std move_backward<int *, int *>(*v6, v5, <span class=\"supfact\">v28</span>);\n        v7 =\n            *(_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n                (__int64)&<span class=\"supfact\">v23</span>) +\n            Number * <span class=\"supfact\">a3</span>;\n        v8 = (_QWORD *)__gnu_cxx __normal_iterator<int *, std vector<int>> base(\n            (__int64)&<span class=\"supfact\">v23</span>);\n        std fill<int *, int>(*v8, v7, <span class=\"supfact\">v30</span>);\n      }\n      std vector<int> _Temporary_value ~_Temporary_value(<span class=\"supfact\">v25</span>);\n    }\n  }\n}", "var": [{"name": "a1", "type": "__int64 *", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64 *"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "unsigned __int64"}, {"name": "a4", "type": "__int64", "pred_name": "a4", "ref_name": "a4", "ref_type": "__int64"}, {"name": "v23", "type": "__int64", "pred_name": "v23", "ref_name": "v23", "ref_type": "__int64"}, {"name": "v24", "type": "__int64 *", "pred_name": "v24", "ref_name": "v24", "ref_type": "__int64 *"}, {"name": "v25", "type": "char[24]", "pred_name": "v25", "ref_name": "v25", "ref_type": "char[24]"}, {"name": "v26", "type": "__int64", "pred_name": "v26", "ref_name": "v26", "ref_type": "__int64"}, {"name": "v27", "type": "__int64", "pred_name": "v27", "ref_name": "v27", "ref_type": "__int64"}, {"name": "v28", "type": "__int64", "pred_name": "v28", "ref_name": "v28", "ref_type": "__int64"}, {"name": "v29", "type": "__int64", "pred_name": "v29", "ref_name": "v29", "ref_type": "unsigned __int64"}, {"name": "v30", "type": "__int64", "pred_name": "v30", "ref_name": "v30", "ref_type": "__int64"}, {"name": "v31", "type": "__int64", "pred_name": "v31", "ref_name": "v31", "ref_type": "__int64"}, {"name": "v32", "type": "__int64", "pred_name": "v32", "ref_name": "v32", "ref_type": "__int64"}, {"name": "v33", "type": "__int64", "pred_name": "v33", "ref_name": "v33", "ref_type": "__int64"}, {"name": "v34", "type": "unsigned __int64", "pred_name": "v34", "ref_name": "v34", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "sekcheong", "repo_name": "tgrep2", "path": "sekcheong/tgrep2/c3c0148e6eda0ba194943c5c6d7d67ff9e34261f2c4b28a3de0963ab70b38733", "path_in_repo": "sekcheong/tgrep2//tgrep2", "objdump": "00000000004035a3 <isPrintable>:\n  4035a3:\t55                   \tpush   %rbp\n  4035a4:\t48 89 e5             \tmov    %rsp,%rbp\n  4035a7:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4035ab:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  4035b2:\t00 \n  4035b3:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  4035b8:\t74 3e                \tje     4035f8 <isPrintable+0x55>\n  4035ba:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4035be:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4035c2:\t48 85 c0             \ttest   %rax,%rax\n  4035c5:\t75 07                \tjne    4035ce <isPrintable+0x2b>\n  4035c7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4035cc:\teb 71                \tjmp    40363f <isPrintable+0x9c>\n  4035ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4035d2:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  4035d6:\t48 85 c0             \ttest   %rax,%rax\n  4035d9:\t75 07                \tjne    4035e2 <isPrintable+0x3f>\n  4035db:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4035e0:\teb 5d                \tjmp    40363f <isPrintable+0x9c>\n  4035e2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4035e6:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  4035ea:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4035ee:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  4035f5:\t00 \n  4035f6:\teb bb                \tjmp    4035b3 <isPrintable+0x10>\n  4035f8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4035fc:\t0f b6 40 12          \tmovzbl 0x12(%rax),%eax\n  403600:\t84 c0                \ttest   %al,%al\n  403602:\t74 07                \tje     40360b <isPrintable+0x68>\n  403604:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403609:\teb 34                \tjmp    40363f <isPrintable+0x9c>\n  40360b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40360f:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  403613:\t48 85 c0             \ttest   %rax,%rax\n  403616:\t74 0e                \tje     403626 <isPrintable+0x83>\n  403618:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40361c:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  403620:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  403624:\teb 8d                \tjmp    4035b3 <isPrintable+0x10>\n  403626:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40362a:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40362e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  403632:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  403639:\t00 \n  40363a:\te9 74 ff ff ff       \tjmpq   4035b3 <isPrintable+0x10>\n  40363f:\t5d                   \tpop    %rbp\n  403640:\tc3                   \tretq   ", "code_s": "__int64 __fastcall isPrintable(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = Number L;\n  while (Number) {\n    while (<span class=\"supfact\">a1</span>) {\n      if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n        return Number L;\n      if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n        return Number L;\n      <span class=\"supfact\">v3</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n      <span class=\"supfact\">a1</span> = Number L;\n    }\n    if (*(_BYTE *)(<span class=\"supfact\">v3</span> + Number))\n      break;\n    if (*(_QWORD *)(<span class=\"supfact\">v3</span> + Number)) {\n      <span class=\"supfact\">v3</span> = *(_QWORD *)(<span class=\"supfact\">v3</span> + Number);\n    } else {\n      <span class=\"supfact\">a1</span> = *(_QWORD *)(<span class=\"supfact\">v3</span> + Number);\n      <span class=\"supfact\">v3</span> = Number L;\n    }\n  }\n  return Number L;\n}", "code_t": "char __cdecl isPrintable(Node <span class=\"supfact\">P</span>) {\n  Link <span class=\"supfact\">L</span>;\n  <span class=\"supfact\">L</span> = Number <span class=\"supfact\">L</span>;\n  while (Number) {\n    while (<span class=\"supfact\">P</span>) {\n      if (!<span class=\"supfact\">P</span>->tree)\n        return Number;\n      if (!<span class=\"supfact\">P</span>->parentLink)\n        return Number;\n      <span class=\"supfact\">L</span> = <span class=\"supfact\">P</span>->parentLink;\n      <span class=\"supfact\">P</span> = Number <span class=\"supfact\">L</span>;\n    }\n    if (<span class=\"supfact\">L</span>->not )\n      break;\n    if (<span class=\"supfact\">L</span>->parentLink) {\n      <span class=\"supfact\">L</span> = <span class=\"supfact\">L</span>->parentLink;\n    } else {\n      <span class=\"supfact\">P</span> = <span class=\"supfact\">L</span>->parentNode;\n      <span class=\"supfact\">L</span> = Number <span class=\"supfact\">L</span>;\n    }\n  }\n  return Number;\n}", "var": [{"name": "a1", "type": "tLinkTable *", "pred_name": "pLinkTable", "ref_name": "P", "ref_type": "Node"}, {"name": "v3", "type": "tLinkTableNode *", "pred_name": "p", "ref_name": "L", "ref_type": "Link"}], "body_in_train": false}, {"repo_owner": "whistlinwilly", "repo_name": "graphics-project2", "path": "whistlinwilly/graphics-project2/e5b77334a9186e6f25ab057991b7930a49bb119faf5167236fbb049aa41c2052", "path_in_repo": "whistlinwilly/graphics-project2/p2out/bin/debug/scene/mesh.o", "objdump": "0000000000000000 <_ZNSt6vectorIN4_4624FaceESaIS1_EE11_S_max_sizeERKS2_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 b8 8e e3 38 8e e3 \tmovabs $0x38e38e38e38e38e,%rax\n  13:\t38 8e 03 \n  16:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  1a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  1e:\t48 89 c7             \tmov    %rax,%rdi\n  21:\te8 00 00 00 00       \tcallq  26 <_ZNSt6vectorIN4_4624FaceESaIS1_EE11_S_max_sizeERKS2_+0x26>\n  26:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  2a:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  2e:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  32:\t48 89 d6             \tmov    %rdx,%rsi\n  35:\t48 89 c7             \tmov    %rax,%rdi\n  38:\te8 00 00 00 00       \tcallq  3d <_ZNSt6vectorIN4_4624FaceESaIS1_EE11_S_max_sizeERKS2_+0x3d>\n  3d:\t48 8b 00             \tmov    (%rax),%rax\n  40:\tc9                   \tleaveq \n  41:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<_462 Face>\n_S_max_size(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = Number;\n  <span class=\"supfact\">v2</span> =\n      __gnu_cxx __alloc_traits<std allocator<_462 Face>, _462 Face> max_size(\n          <span class=\"supfact\">a1</span>);\n  return *std min<unsigned long>(&<span class=\"supfact\">v3</span>, &<span class=\"supfact\">v2</span>);\n}", "code_t": "std vector<_462 Face> size_type __cdecl std vector<_462 Face>\n_S_max_size(const std vector<_462 Face> _Tp_alloc_type *<span class=\"supfact\">__a</span>) {\n  std size_t <span class=\"supfact\">__allocmax</span>;\n  std size_t <span class=\"supfact\">__diffmax</span>;\n  <span class=\"supfact\">__diffmax</span> = Number;\n  <span class=\"supfact\">__allocmax</span> =\n      __gnu_cxx __alloc_traits<std allocator<_462 Face>, _462 Face> max_size(\n          <span class=\"supfact\">__a</span>);\n  return *std min<unsigned long>(&<span class=\"supfact\">__diffmax</span>,\n                                 &<span class=\"supfact\">__allocmax</span>);\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "__a", "ref_name": "__a", "ref_type": "const std::vector<_462::Face>::_Tp_alloc_type *"}, {"name": "v2", "type": "std::size_t", "pred_name": "__diffmax", "ref_name": "__allocmax", "ref_type": "std::size_t"}, {"name": "v3", "type": "std::size_t[2]", "pred_name": "__allocmax", "ref_name": "__diffmax", "ref_type": "std::size_t"}], "body_in_train": false}, {"repo_owner": "mdsitton", "repo_name": "musicgame", "path": "mdsitton/musicgame/5e1c7fdfe3c6e4d0e154330d4313f67aea5d9a4a7d6ba52958965816848824ce", "path_in_repo": "mdsitton/musicgame/extern/spdlog/bench/spdlog-async", "objdump": "000000000040a8b0 <_ZN6spdlog12async_loggerD0Ev>:\n  40a8b0:\t41 56                \tpush   %r14\n  40a8b2:\t41 55                \tpush   %r13\n  40a8b4:\t41 54                \tpush   %r12\n  40a8b6:\t55                   \tpush   %rbp\n  40a8b7:\t48 89 fd             \tmov    %rdi,%rbp\n  40a8ba:\t53                   \tpush   %rbx\n  40a8bb:\t48 83 ec 60          \tsub    $0x60,%rsp\n  40a8bf:\t4c 8b a7 80 00 00 00 \tmov    0x80(%rdi),%r12\n  40a8c6:\t48 c7 07 00 67 41 00 \tmovq   $0x416700,(%rdi)\n  40a8cd:\t4d 85 e4             \ttest   %r12,%r12\n  40a8d0:\t0f 84 0a 02 00 00    \tje     40aae0 <_ZN6spdlog12async_loggerD0Ev+0x230>\n  40a8d6:\t48 8d 5c 24 10       \tlea    0x10(%rsp),%rbx\n  40a8db:\t4c 8d 6c 24 48       \tlea    0x48(%rsp),%r13\n  40a8e0:\t48 89 e6             \tmov    %rsp,%rsi\n  40a8e3:\t4c 89 e7             \tmov    %r12,%rdi\n  40a8e6:\t48 89 1c 24          \tmov    %rbx,(%rsp)\n  40a8ea:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n  40a8f1:\t00 00 \n  40a8f3:\tc6 44 24 10 00       \tmovb   $0x0,0x10(%rsp)\n  40a8f8:\t48 c7 44 24 28 00 00 \tmovq   $0x0,0x28(%rsp)\n  40a8ff:\t00 00 \n  40a901:\t4c 89 6c 24 38       \tmov    %r13,0x38(%rsp)\n  40a906:\t48 c7 44 24 40 00 00 \tmovq   $0x0,0x40(%rsp)\n  40a90d:\t00 00 \n  40a90f:\tc6 44 24 48 00       \tmovb   $0x0,0x48(%rsp)\n  40a914:\tc7 44 24 58 02 00 00 \tmovl   $0x2,0x58(%rsp)\n  40a91b:\t00 \n  40a91c:\te8 cf fa ff ff       \tcallq  40a3f0 <_ZN6spdlog7details16async_log_helper8push_msgEONS1_9async_msgE>\n  40a921:\t48 8b 7c 24 38       \tmov    0x38(%rsp),%rdi\n  40a926:\t4c 39 ef             \tcmp    %r13,%rdi\n  40a929:\t74 05                \tje     40a930 <_ZN6spdlog12async_loggerD0Ev+0x80>\n  40a92b:\te8 40 89 ff ff       \tcallq  403270 <_ZdlPv@plt>\n  40a930:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n  40a934:\t48 39 df             \tcmp    %rbx,%rdi\n  40a937:\t74 05                \tje     40a93e <_ZN6spdlog12async_loggerD0Ev+0x8e>\n  40a939:\te8 32 89 ff ff       \tcallq  403270 <_ZdlPv@plt>\n  40a93e:\t49 8d bc 24 c0 01 00 \tlea    0x1c0(%r12),%rdi\n  40a945:\t00 \n  40a946:\te8 d5 8a ff ff       \tcallq  403420 <_ZNSt6thread4joinEv@plt>\n  40a94b:\t49 83 bc 24 c0 01 00 \tcmpq   $0x0,0x1c0(%r12)\n  40a952:\t00 00 \n  40a954:\t0f 85 d6 03 00 00    \tjne    40ad30 <_ZN6spdlog12async_loggerD0Ev+0x480>\n  40a95a:\t49 8b 84 24 b0 01 00 \tmov    0x1b0(%r12),%rax\n  40a961:\t00 \n  40a962:\t48 85 c0             \ttest   %rax,%rax\n  40a965:\t74 12                \tje     40a979 <_ZN6spdlog12async_loggerD0Ev+0xc9>\n  40a967:\t49 8d bc 24 a0 01 00 \tlea    0x1a0(%r12),%rdi\n  40a96e:\t00 \n  40a96f:\tba 03 00 00 00       \tmov    $0x3,%edx\n  40a974:\t48 89 fe             \tmov    %rdi,%rsi\n  40a977:\tff d0                \tcallq  *%rax\n  40a979:\t49 8b 84 24 88 01 00 \tmov    0x188(%r12),%rax\n  40a980:\t00 \n  40a981:\t48 85 c0             \ttest   %rax,%rax\n  40a984:\t74 12                \tje     40a998 <_ZN6spdlog12async_loggerD0Ev+0xe8>\n  40a986:\t49 8d bc 24 78 01 00 \tlea    0x178(%r12),%rdi\n  40a98d:\t00 \n  40a98e:\tba 03 00 00 00       \tmov    $0x3,%edx\n  40a993:\t48 89 fe             \tmov    %rdi,%rsi\n  40a996:\tff d0                \tcallq  *%rax\n  40a998:\t49 8b 84 24 60 01 00 \tmov    0x160(%r12),%rax\n  40a99f:\t00 \n  40a9a0:\t48 85 c0             \ttest   %rax,%rax\n  40a9a3:\t74 12                \tje     40a9b7 <_ZN6spdlog12async_loggerD0Ev+0x107>\n  40a9a5:\t49 8d bc 24 50 01 00 \tlea    0x150(%r12),%rdi\n  40a9ac:\t00 \n  40a9ad:\tba 03 00 00 00       \tmov    $0x3,%edx\n  40a9b2:\t48 89 fe             \tmov    %rdi,%rsi\n  40a9b5:\tff d0                \tcallq  *%rax\n  40a9b7:\t49 8b 44 24 70       \tmov    0x70(%r12),%rax\n  40a9bc:\t48 85 c0             \ttest   %rax,%rax\n  40a9bf:\t74 4b                \tje     40aa0c <_ZN6spdlog12async_loggerD0Ev+0x15c>\n  40a9c1:\t48 6b 58 f8 68       \timul   $0x68,-0x8(%rax),%rbx\n  40a9c6:\t48 01 c3             \tadd    %rax,%rbx\n  40a9c9:\t48 39 d8             \tcmp    %rbx,%rax\n  40a9cc:\t74 35                \tje     40aa03 <_ZN6spdlog12async_loggerD0Ev+0x153>\n  40a9ce:\t66 90                \txchg   %ax,%ax\n  40a9d0:\t48 83 eb 68          \tsub    $0x68,%rbx\n  40a9d4:\t48 8b 7b 40          \tmov    0x40(%rbx),%rdi\n  40a9d8:\t48 8d 43 50          \tlea    0x50(%rbx),%rax\n  40a9dc:\t48 39 c7             \tcmp    %rax,%rdi\n  40a9df:\t74 05                \tje     40a9e6 <_ZN6spdlog12async_loggerD0Ev+0x136>\n  40a9e1:\te8 8a 88 ff ff       \tcallq  403270 <_ZdlPv@plt>\n  40a9e6:\t48 8b 7b 08          \tmov    0x8(%rbx),%rdi\n  40a9ea:\t48 8d 43 18          \tlea    0x18(%rbx),%rax\n  40a9ee:\t48 39 c7             \tcmp    %rax,%rdi\n  40a9f1:\t0f 84 d9 02 00 00    \tje     40acd0 <_ZN6spdlog12async_loggerD0Ev+0x420>\n  40a9f7:\te8 74 88 ff ff       \tcallq  403270 <_ZdlPv@plt>\n  40a9fc:\t49 3b 5c 24 70       \tcmp    0x70(%r12),%rbx\n  40aa01:\t75 cd                \tjne    40a9d0 <_ZN6spdlog12async_loggerD0Ev+0x120>\n  40aa03:\t48 8d 7b f8          \tlea    -0x8(%rbx),%rdi\n  40aa07:\te8 f4 88 ff ff       \tcallq  403300 <_ZdaPv@plt>\n  40aa0c:\t49 8b 5c 24 18       \tmov    0x18(%r12),%rbx\n  40aa11:\t4d 8b 6c 24 10       \tmov    0x10(%r12),%r13\n  40aa16:\t4c 39 eb             \tcmp    %r13,%rbx\n  40aa19:\t74 5a                \tje     40aa75 <_ZN6spdlog12async_loggerD0Ev+0x1c5>\n  40aa1b:\tb8 10 34 40 00       \tmov    $0x403410,%eax\n  40aa20:\t48 85 c0             \ttest   %rax,%rax\n  40aa23:\t75 14                \tjne    40aa39 <_ZN6spdlog12async_loggerD0Ev+0x189>\n  40aa25:\te9 3b 02 00 00       \tjmpq   40ac65 <_ZN6spdlog12async_loggerD0Ev+0x3b5>\n  40aa2a:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n  40aa30:\t49 83 c5 10          \tadd    $0x10,%r13\n  40aa34:\t4c 39 eb             \tcmp    %r13,%rbx\n  40aa37:\t74 37                \tje     40aa70 <_ZN6spdlog12async_loggerD0Ev+0x1c0>\n  40aa39:\t4d 8b 75 08          \tmov    0x8(%r13),%r14\n  40aa3d:\t4d 85 f6             \ttest   %r14,%r14\n  40aa40:\t74 ee                \tje     40aa30 <_ZN6spdlog12async_loggerD0Ev+0x180>\n  40aa42:\tf0 41 ff 4e 08       \tlock decl 0x8(%r14)\n  40aa47:\t75 e7                \tjne    40aa30 <_ZN6spdlog12async_loggerD0Ev+0x180>\n  40aa49:\t49 8b 06             \tmov    (%r14),%rax\n  40aa4c:\t4c 89 f7             \tmov    %r14,%rdi\n  40aa4f:\tff 50 10             \tcallq  *0x10(%rax)\n  40aa52:\tf0 41 ff 4e 0c       \tlock decl 0xc(%r14)\n  40aa57:\t75 d7                \tjne    40aa30 <_ZN6spdlog12async_loggerD0Ev+0x180>\n  40aa59:\t49 8b 06             \tmov    (%r14),%rax\n  40aa5c:\t49 83 c5 10          \tadd    $0x10,%r13\n  40aa60:\t4c 89 f7             \tmov    %r14,%rdi\n  40aa63:\tff 50 18             \tcallq  *0x18(%rax)\n  40aa66:\t4c 39 eb             \tcmp    %r13,%rbx\n  40aa69:\t75 ce                \tjne    40aa39 <_ZN6spdlog12async_loggerD0Ev+0x189>\n  40aa6b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n  40aa70:\t4d 8b 6c 24 10       \tmov    0x10(%r12),%r13\n  40aa75:\t4d 85 ed             \ttest   %r13,%r13\n  40aa78:\t74 08                \tje     40aa82 <_ZN6spdlog12async_loggerD0Ev+0x1d2>\n  40aa7a:\t4c 89 ef             \tmov    %r13,%rdi\n  40aa7d:\te8 ee 87 ff ff       \tcallq  403270 <_ZdlPv@plt>\n  40aa82:\t4d 8b 6c 24 08       \tmov    0x8(%r12),%r13\n  40aa87:\t4d 85 ed             \ttest   %r13,%r13\n  40aa8a:\t74 4c                \tje     40aad8 <_ZN6spdlog12async_loggerD0Ev+0x228>\n  40aa8c:\tbb 10 34 40 00       \tmov    $0x403410,%ebx\n  40aa91:\t48 85 db             \ttest   %rbx,%rbx\n  40aa94:\t0f 84 56 02 00 00    \tje     40acf0 <_ZN6spdlog12async_loggerD0Ev+0x440>\n  40aa9a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40aa9f:\tf0 41 0f c1 45 08    \tlock xadd %eax,0x8(%r13)\n  40aaa5:\t83 f8 01             \tcmp    $0x1,%eax\n  40aaa8:\t75 2e                \tjne    40aad8 <_ZN6spdlog12async_loggerD0Ev+0x228>\n  40aaaa:\t49 8b 45 00          \tmov    0x0(%r13),%rax\n  40aaae:\t4c 89 ef             \tmov    %r13,%rdi\n  40aab1:\tff 50 10             \tcallq  *0x10(%rax)\n  40aab4:\t48 85 db             \ttest   %rbx,%rbx\n  40aab7:\t0f 84 63 02 00 00    \tje     40ad20 <_ZN6spdlog12async_loggerD0Ev+0x470>\n  40aabd:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40aac2:\tf0 41 0f c1 45 0c    \tlock xadd %eax,0xc(%r13)\n  40aac8:\t83 f8 01             \tcmp    $0x1,%eax\n  40aacb:\t0f 84 3f 02 00 00    \tje     40ad10 <_ZN6spdlog12async_loggerD0Ev+0x460>\n  40aad1:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n  40aad8:\t4c 89 e7             \tmov    %r12,%rdi\n  40aadb:\te8 90 87 ff ff       \tcallq  403270 <_ZdlPv@plt>\n  40aae0:\t48 8b 45 68          \tmov    0x68(%rbp),%rax\n  40aae4:\t48 c7 45 00 b8 66 41 \tmovq   $0x4166b8,0x0(%rbp)\n  40aaeb:\t00 \n  40aaec:\t48 85 c0             \ttest   %rax,%rax\n  40aaef:\t74 0e                \tje     40aaff <_ZN6spdlog12async_loggerD0Ev+0x24f>\n  40aaf1:\t48 8d 7d 58          \tlea    0x58(%rbp),%rdi\n  40aaf5:\tba 03 00 00 00       \tmov    $0x3,%edx\n  40aafa:\t48 89 fe             \tmov    %rdi,%rsi\n  40aafd:\tff d0                \tcallq  *%rax\n  40aaff:\t4c 8b 65 48          \tmov    0x48(%rbp),%r12\n  40ab03:\t4d 85 e4             \ttest   %r12,%r12\n  40ab06:\t74 28                \tje     40ab30 <_ZN6spdlog12async_loggerD0Ev+0x280>\n  40ab08:\tbb 10 34 40 00       \tmov    $0x403410,%ebx\n  40ab0d:\t48 85 db             \ttest   %rbx,%rbx\n  40ab10:\t0f 84 6a 01 00 00    \tje     40ac80 <_ZN6spdlog12async_loggerD0Ev+0x3d0>\n  40ab16:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40ab1b:\tf0 41 0f c1 44 24 08 \tlock xadd %eax,0x8(%r12)\n  40ab22:\t83 f8 01             \tcmp    $0x1,%eax\n  40ab25:\t0f 84 6b 01 00 00    \tje     40ac96 <_ZN6spdlog12async_loggerD0Ev+0x3e6>\n  40ab2b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n  40ab30:\t48 8b 5d 30          \tmov    0x30(%rbp),%rbx\n  40ab34:\t4c 8b 65 28          \tmov    0x28(%rbp),%r12\n  40ab38:\t4c 39 e3             \tcmp    %r12,%rbx\n  40ab3b:\t74 67                \tje     40aba4 <_ZN6spdlog12async_loggerD0Ev+0x2f4>\n  40ab3d:\tb8 10 34 40 00       \tmov    $0x403410,%eax\n  40ab42:\t48 85 c0             \ttest   %rax,%rax\n  40ab45:\t0f 84 c6 00 00 00    \tje     40ac11 <_ZN6spdlog12async_loggerD0Ev+0x361>\n  40ab4b:\t4d 8b 6c 24 08       \tmov    0x8(%r12),%r13\n  40ab50:\t4d 85 ed             \ttest   %r13,%r13\n  40ab53:\t75 16                \tjne    40ab6b <_ZN6spdlog12async_loggerD0Ev+0x2bb>\n  40ab55:\t0f 1f 00             \tnopl   (%rax)\n  40ab58:\t49 83 c4 10          \tadd    $0x10,%r12\n  40ab5c:\t4c 39 e3             \tcmp    %r12,%rbx\n  40ab5f:\t74 3f                \tje     40aba0 <_ZN6spdlog12async_loggerD0Ev+0x2f0>\n  40ab61:\t4d 8b 6c 24 08       \tmov    0x8(%r12),%r13\n  40ab66:\t4d 85 ed             \ttest   %r13,%r13\n  40ab69:\t74 ed                \tje     40ab58 <_ZN6spdlog12async_loggerD0Ev+0x2a8>\n  40ab6b:\tf0 41 ff 4d 08       \tlock decl 0x8(%r13)\n  40ab70:\t75 e6                \tjne    40ab58 <_ZN6spdlog12async_loggerD0Ev+0x2a8>\n  40ab72:\t49 8b 45 00          \tmov    0x0(%r13),%rax\n  40ab76:\t4c 89 ef             \tmov    %r13,%rdi\n  40ab79:\tff 50 10             \tcallq  *0x10(%rax)\n  40ab7c:\tf0 41 ff 4d 0c       \tlock decl 0xc(%r13)\n  40ab81:\t75 d5                \tjne    40ab58 <_ZN6spdlog12async_loggerD0Ev+0x2a8>\n  40ab83:\t49 8b 45 00          \tmov    0x0(%r13),%rax\n  40ab87:\t49 83 c4 10          \tadd    $0x10,%r12\n  40ab8b:\t4c 89 ef             \tmov    %r13,%rdi\n  40ab8e:\tff 50 18             \tcallq  *0x18(%rax)\n  40ab91:\t4c 39 e3             \tcmp    %r12,%rbx\n  40ab94:\t75 cb                \tjne    40ab61 <_ZN6spdlog12async_loggerD0Ev+0x2b1>\n  40ab96:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  40ab9d:\t00 00 00 \n  40aba0:\t4c 8b 65 28          \tmov    0x28(%rbp),%r12\n  40aba4:\t4d 85 e4             \ttest   %r12,%r12\n  40aba7:\t74 08                \tje     40abb1 <_ZN6spdlog12async_loggerD0Ev+0x301>\n  40aba9:\t4c 89 e7             \tmov    %r12,%rdi\n  40abac:\te8 bf 86 ff ff       \tcallq  403270 <_ZdlPv@plt>\n  40abb1:\t48 8b 7d 08          \tmov    0x8(%rbp),%rdi\n  40abb5:\t48 8d 45 18          \tlea    0x18(%rbp),%rax\n  40abb9:\t48 39 c7             \tcmp    %rax,%rdi\n  40abbc:\t74 05                \tje     40abc3 <_ZN6spdlog12async_loggerD0Ev+0x313>\n  40abbe:\te8 ad 86 ff ff       \tcallq  403270 <_ZdlPv@plt>\n  40abc3:\t48 89 ef             \tmov    %rbp,%rdi\n  40abc6:\te8 a5 86 ff ff       \tcallq  403270 <_ZdlPv@plt>\n  40abcb:\t48 83 c4 60          \tadd    $0x60,%rsp\n  40abcf:\t5b                   \tpop    %rbx\n  40abd0:\t5d                   \tpop    %rbp\n  40abd1:\t41 5c                \tpop    %r12\n  40abd3:\t41 5d                \tpop    %r13\n  40abd5:\t41 5e                \tpop    %r14\n  40abd7:\tc3                   \tretq   \n  40abd8:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n  40abdf:\t00 \n  40abe0:\t49 8b 45 00          \tmov    0x0(%r13),%rax\n  40abe4:\t4c 89 ef             \tmov    %r13,%rdi\n  40abe7:\tff 50 10             \tcallq  *0x10(%rax)\n  40abea:\t41 8b 45 0c          \tmov    0xc(%r13),%eax\n  40abee:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  40abf1:\t41 89 55 0c          \tmov    %edx,0xc(%r13)\n  40abf5:\t83 f8 01             \tcmp    $0x1,%eax\n  40abf8:\t75 0e                \tjne    40ac08 <_ZN6spdlog12async_loggerD0Ev+0x358>\n  40abfa:\t49 8b 45 00          \tmov    0x0(%r13),%rax\n  40abfe:\t4c 89 ef             \tmov    %r13,%rdi\n  40ac01:\tff 50 18             \tcallq  *0x18(%rax)\n  40ac04:\t0f 1f 40 00          \tnopl   0x0(%rax)\n  40ac08:\t49 83 c4 10          \tadd    $0x10,%r12\n  40ac0c:\t4c 39 e3             \tcmp    %r12,%rbx\n  40ac0f:\t74 8f                \tje     40aba0 <_ZN6spdlog12async_loggerD0Ev+0x2f0>\n  40ac11:\t4d 8b 6c 24 08       \tmov    0x8(%r12),%r13\n  40ac16:\t4d 85 ed             \ttest   %r13,%r13\n  40ac19:\t74 ed                \tje     40ac08 <_ZN6spdlog12async_loggerD0Ev+0x358>\n  40ac1b:\t41 8b 45 08          \tmov    0x8(%r13),%eax\n  40ac1f:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  40ac22:\t41 89 55 08          \tmov    %edx,0x8(%r13)\n  40ac26:\t83 f8 01             \tcmp    $0x1,%eax\n  40ac29:\t75 dd                \tjne    40ac08 <_ZN6spdlog12async_loggerD0Ev+0x358>\n  40ac2b:\teb b3                \tjmp    40abe0 <_ZN6spdlog12async_loggerD0Ev+0x330>\n  40ac2d:\t0f 1f 00             \tnopl   (%rax)\n  40ac30:\t49 8b 06             \tmov    (%r14),%rax\n  40ac33:\t4c 89 f7             \tmov    %r14,%rdi\n  40ac36:\tff 50 10             \tcallq  *0x10(%rax)\n  40ac39:\t41 8b 46 0c          \tmov    0xc(%r14),%eax\n  40ac3d:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  40ac40:\t41 89 56 0c          \tmov    %edx,0xc(%r14)\n  40ac44:\t83 f8 01             \tcmp    $0x1,%eax\n  40ac47:\t75 0f                \tjne    40ac58 <_ZN6spdlog12async_loggerD0Ev+0x3a8>\n  40ac49:\t49 8b 06             \tmov    (%r14),%rax\n  40ac4c:\t4c 89 f7             \tmov    %r14,%rdi\n  40ac4f:\tff 50 18             \tcallq  *0x18(%rax)\n  40ac52:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n  40ac58:\t49 83 c5 10          \tadd    $0x10,%r13\n  40ac5c:\t4c 39 eb             \tcmp    %r13,%rbx\n  40ac5f:\t0f 84 0b fe ff ff    \tje     40aa70 <_ZN6spdlog12async_loggerD0Ev+0x1c0>\n  40ac65:\t4d 8b 75 08          \tmov    0x8(%r13),%r14\n  40ac69:\t4d 85 f6             \ttest   %r14,%r14\n  40ac6c:\t74 ea                \tje     40ac58 <_ZN6spdlog12async_loggerD0Ev+0x3a8>\n  40ac6e:\t41 8b 46 08          \tmov    0x8(%r14),%eax\n  40ac72:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  40ac75:\t41 89 56 08          \tmov    %edx,0x8(%r14)\n  40ac79:\t83 f8 01             \tcmp    $0x1,%eax\n  40ac7c:\t75 da                \tjne    40ac58 <_ZN6spdlog12async_loggerD0Ev+0x3a8>\n  40ac7e:\teb b0                \tjmp    40ac30 <_ZN6spdlog12async_loggerD0Ev+0x380>\n  40ac80:\t41 8b 44 24 08       \tmov    0x8(%r12),%eax\n  40ac85:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  40ac88:\t41 89 54 24 08       \tmov    %edx,0x8(%r12)\n  40ac8d:\t83 f8 01             \tcmp    $0x1,%eax\n  40ac90:\t0f 85 9a fe ff ff    \tjne    40ab30 <_ZN6spdlog12async_loggerD0Ev+0x280>\n  40ac96:\t49 8b 04 24          \tmov    (%r12),%rax\n  40ac9a:\t4c 89 e7             \tmov    %r12,%rdi\n  40ac9d:\tff 50 10             \tcallq  *0x10(%rax)\n  40aca0:\t48 85 db             \ttest   %rbx,%rbx\n  40aca3:\t74 5b                \tje     40ad00 <_ZN6spdlog12async_loggerD0Ev+0x450>\n  40aca5:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40acaa:\tf0 41 0f c1 44 24 0c \tlock xadd %eax,0xc(%r12)\n  40acb1:\t83 f8 01             \tcmp    $0x1,%eax\n  40acb4:\t0f 85 76 fe ff ff    \tjne    40ab30 <_ZN6spdlog12async_loggerD0Ev+0x280>\n  40acba:\t49 8b 04 24          \tmov    (%r12),%rax\n  40acbe:\t4c 89 e7             \tmov    %r12,%rdi\n  40acc1:\tff 50 18             \tcallq  *0x18(%rax)\n  40acc4:\te9 67 fe ff ff       \tjmpq   40ab30 <_ZN6spdlog12async_loggerD0Ev+0x280>\n  40acc9:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n  40acd0:\t49 39 5c 24 70       \tcmp    %rbx,0x70(%r12)\n  40acd5:\t0f 85 f5 fc ff ff    \tjne    40a9d0 <_ZN6spdlog12async_loggerD0Ev+0x120>\n  40acdb:\t48 8d 7b f8          \tlea    -0x8(%rbx),%rdi\n  40acdf:\te8 1c 86 ff ff       \tcallq  403300 <_ZdaPv@plt>\n  40ace4:\te9 23 fd ff ff       \tjmpq   40aa0c <_ZN6spdlog12async_loggerD0Ev+0x15c>\n  40ace9:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n  40acf0:\t41 8b 45 08          \tmov    0x8(%r13),%eax\n  40acf4:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  40acf7:\t41 89 55 08          \tmov    %edx,0x8(%r13)\n  40acfb:\te9 a5 fd ff ff       \tjmpq   40aaa5 <_ZN6spdlog12async_loggerD0Ev+0x1f5>\n  40ad00:\t41 8b 44 24 0c       \tmov    0xc(%r12),%eax\n  40ad05:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  40ad08:\t41 89 54 24 0c       \tmov    %edx,0xc(%r12)\n  40ad0d:\teb a2                \tjmp    40acb1 <_ZN6spdlog12async_loggerD0Ev+0x401>\n  40ad0f:\t90                   \tnop\n  40ad10:\t49 8b 45 00          \tmov    0x0(%r13),%rax\n  40ad14:\t4c 89 ef             \tmov    %r13,%rdi\n  40ad17:\tff 50 18             \tcallq  *0x18(%rax)\n  40ad1a:\te9 b9 fd ff ff       \tjmpq   40aad8 <_ZN6spdlog12async_loggerD0Ev+0x228>\n  40ad1f:\t90                   \tnop\n  40ad20:\t41 8b 45 0c          \tmov    0xc(%r13),%eax\n  40ad24:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  40ad27:\t41 89 55 0c          \tmov    %edx,0xc(%r13)\n  40ad2b:\te9 98 fd ff ff       \tjmpq   40aac8 <_ZN6spdlog12async_loggerD0Ev+0x218>\n  40ad30:\te8 7b 83 ff ff       \tcallq  4030b0 <_ZSt9terminatev@plt>\n  40ad35:\t48 89 c7             \tmov    %rax,%rdi\n  40ad38:\tc5 f8 77             \tvzeroupper \n  40ad3b:\te9 8a 91 ff ff       \tjmpq   403eca <_ZN6spdlog12async_loggerD0Ev.cold+0xe>\n  40ad40:\t48 89 c3             \tmov    %rax,%rbx\n  40ad43:\te9 74 91 ff ff       \tjmpq   403ebc <_ZN6spdlog12async_loggerD0Ev.cold>\n  40ad48:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n  40ad4f:\t00 ", "code_s": "void __fastcall spdlog\n    async_logger ~async_logger(spdlog async_logger *<span class=\"supfact\">this</span>) {\n  struct timespec *v2;\n  void(__fastcall * v3)(struct timespec *, struct timespec *, __int64);\n  void(__fastcall * v4)(__syscall_slong_t *, __syscall_slong_t *, __int64);\n  void(__fastcall * v5)(struct timespec *, struct timespec *, __int64);\n  __time_t v6;\n  _QWORD *v7;\n  _QWORD *v8;\n  _QWORD *v9;\n  _QWORD *v10;\n  _QWORD *v11;\n  volatile signed __int32 *v12;\n  volatile signed __int32 *v13;\n  signed __int32 v14;\n  signed __int32 v15;\n  void(__fastcall * v16)(char *, char *, __int64);\n  volatile signed __int32 *v17;\n  _QWORD *v18;\n  _QWORD *v19;\n  volatile signed __int32 *v20;\n  char *v21;\n  int v22;\n  _DWORD *v23;\n  int v24;\n  int v25;\n  _DWORD *v26;\n  int v27;\n  int v28;\n  signed __int32 v29;\n  void *<span class=\"supfact\">v30</span>[Number];\n  char <span class=\"supfact\">v31</span>[Number];\n  __int64 <span class=\"supfact\">v32</span>;\n  void *<span class=\"supfact\">v33</span>;\n  __int64 <span class=\"supfact\">v34</span>;\n  char <span class=\"supfact\">v35</span>[Number];\n  int <span class=\"supfact\">v36</span>;\n  v2 = (struct timespec *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  *(_QWORD *)<span class=\"supfact\">this</span> = off_416700;\n  if (v2) {\n    <span class=\"supfact\">v30</span>[Number] = <span class=\"supfact\">v31</span>;\n    <span class=\"supfact\">v30</span>[Number] = Number L;\n    <span class=\"supfact\">v31</span>[Number] = Number;\n    <span class=\"supfact\">v32</span> = Number L;\n    <span class=\"supfact\">v33</span> = <span class=\"supfact\">v35</span>;\n    <span class=\"supfact\">v34</span> = Number L;\n    <span class=\"supfact\">v35</span>[Number] = Number;\n    <span class=\"supfact\">v36</span> = Number;\n    spdlog details async_log_helper push_msg(v2, (__int64)<span class=\"supfact\">v30</span>);\n    if (<span class=\"supfact\">v33</span> != <span class=\"supfact\">v35</span>)\n      operator delete(<span class=\"supfact\">v33</span>);\n    if (<span class=\"supfact\">v30</span>[Number] != <span class=\"supfact\">v31</span>)\n      operator delete(<span class=\"supfact\">v30</span>[Number]);\n    std thread join((std thread *)&v2[Number]);\n    if (v2[Number].tv_sec)\n      std terminate();\n    v3 = (void(__fastcall *)(struct timespec *, struct timespec *,\n                             __int64))v2[Number]\n             .tv_sec;\n    if (v3)\n      v3(v2 + Number, v2 + Number, Number L);\n    v4 = (void(__fastcall *)(__syscall_slong_t *, __syscall_slong_t *,\n                             __int64))v2[Number]\n             .tv_nsec;\n    if (v4)\n      v4(&v2[Number].tv_nsec, &v2[Number].tv_nsec, Number L);\n    v5 = (void(__fastcall *)(struct timespec *, struct timespec *,\n                             __int64))v2[Number]\n             .tv_sec;\n    if (v5)\n      v5(v2 + Number, v2 + Number, Number L);\n    v6 = v2[Number].tv_sec;\n    if (v6) {\n      v7 = (_QWORD *)(v6 + Number L * *(_QWORD *)(v6 - Number));\n      if ((_QWORD *)v6 != v7) {\n        do {\n          while (Number) {\n            v7 -= Number;\n            v8 = (_QWORD *)v7[Number];\n            if (v8 != v7 + Number)\n              operator delete(v8);\n            v9 = (_QWORD *)v7[Number];\n            if (v9 == v7 + Number)\n              break;\n            operator delete(v9);\n            if (v7 == (_QWORD *)v2[Number].tv_sec)\n              goto LABEL_19;\n          }\n        } while ((_QWORD *)v2[Number].tv_sec != v7);\n      }\n    LABEL_19:\n      operator delete[](v7 - Number);\n    }\n    v10 = (_QWORD *)v2[Number].tv_nsec;\n    v11 = (_QWORD *)v2[Number].tv_sec;\n    if (v10 != v11) {\n      if (__pthread_key_create) {\n        do {\n          while (Number) {\n            v12 = (volatile signed __int32 *)v11[Number];\n            if (v12) {\n              if (!_InterlockedDecrement(v12 + Number)) {\n                (*(void(__fastcall **)(volatile signed __int32 *))(\n                    *(_QWORD *)v12 + Number L))(v12);\n                if (!_InterlockedDecrement(v12 + Number))\n                  break;\n              }\n            }\n            v11 += Number;\n            if (v10 == v11)\n              goto LABEL_28;\n          }\n          v11 += Number;\n          (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v12 +\n                                                             Number L))(v12);\n        } while (v10 != v11);\n      } else {\n        do {\n          v26 = (_DWORD *)v11[Number];\n          if (v26) {\n            v27 = v26[Number];\n            v26[Number] = v27 - Number;\n            if (v27 == Number) {\n              (*(void(__fastcall **)(_DWORD *))(*(_QWORD *)v26 + Number L))(\n                  v26);\n              v25 = v26[Number];\n              v26[Number] = v25 - Number;\n              if (v25 == Number)\n                (*(void(__fastcall **)(_DWORD *))(*(_QWORD *)v26 + Number L))(\n                    v26);\n            }\n          }\n          v11 += Number;\n        } while (v10 != v11);\n      }\n    LABEL_28:\n      v11 = (_QWORD *)v2[Number].tv_sec;\n    }\n    if (v11)\n      operator delete(v11);\n    v13 = (volatile signed __int32 *)v2->tv_nsec;\n    if (v13) {\n      if (__pthread_key_create) {\n        v14 = _InterlockedExchangeAdd(v13 + Number, Number);\n      } else {\n        v14 = *((_DWORD *)v13 + Number);\n        *((_DWORD *)v13 + Number) = v14 - Number;\n      }\n      if (v14 == Number) {\n        (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v13 +\n                                                           Number L))(v13);\n        if (__pthread_key_create) {\n          v15 = _InterlockedExchangeAdd(v13 + Number, Number);\n        } else {\n          v15 = *((_DWORD *)v13 + Number);\n          *((_DWORD *)v13 + Number) = v15 - Number;\n        }\n        if (v15 == Number)\n          (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v13 +\n                                                             Number L))(v13);\n      }\n    }\n    operator delete(v2);\n  }\n  v16 = (void(__fastcall *)(char *, char *, __int64)) *\n        ((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  *(_QWORD *)<span class=\"supfact\">this</span> = off_4166B8;\n  if (v16)\n    v16((char *)<span class=\"supfact\">this</span> + Number,\n        (char *)<span class=\"supfact\">this</span> + Number, Number L);\n  v17 = (volatile signed __int32 *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  if (v17) {\n    if (__pthread_key_create) {\n      if (_InterlockedExchangeAdd(v17 + Number, Number) != Number)\n        goto LABEL_45;\n    } else {\n      v28 = *((_DWORD *)v17 + Number);\n      *((_DWORD *)v17 + Number) = v28 - Number;\n      if (v28 != Number)\n        goto LABEL_45;\n    }\n    (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v17 +\n                                                       Number L))(v17);\n    if (__pthread_key_create) {\n      v29 = _InterlockedExchangeAdd(v17 + Number, Number);\n    } else {\n      v29 = *((_DWORD *)v17 + Number);\n      *((_DWORD *)v17 + Number) = v29 - Number;\n    }\n    if (v29 == Number)\n      (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v17 +\n                                                         Number L))(v17);\n  }\nLABEL_45:\n  v18 = (_QWORD *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  v19 = (_QWORD *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  if (v18 != v19) {\n    if (__pthread_key_create) {\n      v20 = (volatile signed __int32 *)v19[Number];\n      if (v20)\n        goto LABEL_50;\n    LABEL_48:\n      while (Number) {\n        v19 += Number;\n        if (v18 == v19)\n          break;\n        while (Number) {\n          v20 = (volatile signed __int32 *)v19[Number];\n          if (!v20)\n            break;\n        LABEL_50:\n          if (_InterlockedDecrement(v20 + Number))\n            goto LABEL_48;\n          (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v20 +\n                                                             Number L))(v20);\n          if (_InterlockedDecrement(v20 + Number))\n            goto LABEL_48;\n          v19 += Number;\n          (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v20 +\n                                                             Number L))(v20);\n          if (v18 == v19)\n            goto LABEL_53;\n        }\n      }\n    } else {\n      do {\n        v23 = (_DWORD *)v19[Number];\n        if (v23) {\n          v24 = v23[Number];\n          v23[Number] = v24 - Number;\n          if (v24 == Number) {\n            (*(void(__fastcall **)(_DWORD *))(*(_QWORD *)v23 + Number L))(v23);\n            v22 = v23[Number];\n            v23[Number] = v22 - Number;\n            if (v22 == Number)\n              (*(void(__fastcall **)(_DWORD *))(*(_QWORD *)v23 + Number L))(\n                  v23);\n          }\n        }\n        v19 += Number;\n      } while (v18 != v19);\n    }\n  LABEL_53:\n    v19 = (_QWORD *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  }\n  if (v19)\n    operator delete(v19);\n  v21 = (char *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  if (v21 != (char *)<span class=\"supfact\">this</span> + Number)\n    operator delete(v21);\n  operator delete(<span class=\"supfact\">this</span>);\n}", "code_t": "void __fastcall spdlog\n    async_logger ~async_logger(spdlog async_logger *<span class=\"supfact\">this</span>) {\n  struct timespec *v2;\n  void(__fastcall * v3)(struct timespec *, struct timespec *, __int64);\n  void(__fastcall * v4)(__syscall_slong_t *, __syscall_slong_t *, __int64);\n  void(__fastcall * v5)(struct timespec *, struct timespec *, __int64);\n  __time_t v6;\n  _QWORD *v7;\n  _QWORD *v8;\n  _QWORD *v9;\n  _QWORD *v10;\n  _QWORD *v11;\n  volatile signed __int32 *v12;\n  volatile signed __int32 *v13;\n  signed __int32 v14;\n  signed __int32 v15;\n  void(__fastcall * v16)(char *, char *, __int64);\n  volatile signed __int32 *v17;\n  _QWORD *v18;\n  _QWORD *v19;\n  volatile signed __int32 *v20;\n  char *v21;\n  int v22;\n  _DWORD *v23;\n  int v24;\n  int v25;\n  _DWORD *v26;\n  int v27;\n  int v28;\n  signed __int32 v29;\n  void *<span class=\"supfact\">v30</span>[Number];\n  char <span class=\"supfact\">v31</span>[Number];\n  __int64 <span class=\"supfact\">v32</span>;\n  void *<span class=\"supfact\">v33</span>;\n  __int64 <span class=\"supfact\">v34</span>;\n  char <span class=\"supfact\">v35</span>[Number];\n  int <span class=\"supfact\">v36</span>;\n  v2 = (struct timespec *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  *(_QWORD *)<span class=\"supfact\">this</span> = off_416700;\n  if (v2) {\n    <span class=\"supfact\">v30</span>[Number] = <span class=\"supfact\">v31</span>;\n    <span class=\"supfact\">v30</span>[Number] = Number L;\n    <span class=\"supfact\">v31</span>[Number] = Number;\n    <span class=\"supfact\">v32</span> = Number L;\n    <span class=\"supfact\">v33</span> = <span class=\"supfact\">v35</span>;\n    <span class=\"supfact\">v34</span> = Number L;\n    <span class=\"supfact\">v35</span>[Number] = Number;\n    <span class=\"supfact\">v36</span> = Number;\n    spdlog details async_log_helper push_msg(v2, (__int64)<span class=\"supfact\">v30</span>);\n    if (<span class=\"supfact\">v33</span> != <span class=\"supfact\">v35</span>)\n      operator delete(<span class=\"supfact\">v33</span>);\n    if (<span class=\"supfact\">v30</span>[Number] != <span class=\"supfact\">v31</span>)\n      operator delete(<span class=\"supfact\">v30</span>[Number]);\n    std thread join((std thread *)&v2[Number]);\n    if (v2[Number].tv_sec)\n      std terminate();\n    v3 = (void(__fastcall *)(struct timespec *, struct timespec *,\n                             __int64))v2[Number]\n             .tv_sec;\n    if (v3)\n      v3(v2 + Number, v2 + Number, Number L);\n    v4 = (void(__fastcall *)(__syscall_slong_t *, __syscall_slong_t *,\n                             __int64))v2[Number]\n             .tv_nsec;\n    if (v4)\n      v4(&v2[Number].tv_nsec, &v2[Number].tv_nsec, Number L);\n    v5 = (void(__fastcall *)(struct timespec *, struct timespec *,\n                             __int64))v2[Number]\n             .tv_sec;\n    if (v5)\n      v5(v2 + Number, v2 + Number, Number L);\n    v6 = v2[Number].tv_sec;\n    if (v6) {\n      v7 = (_QWORD *)(v6 + Number L * *(_QWORD *)(v6 - Number));\n      if ((_QWORD *)v6 != v7) {\n        do {\n          while (Number) {\n            v7 -= Number;\n            v8 = (_QWORD *)v7[Number];\n            if (v8 != v7 + Number)\n              operator delete(v8);\n            v9 = (_QWORD *)v7[Number];\n            if (v9 == v7 + Number)\n              break;\n            operator delete(v9);\n            if (v7 == (_QWORD *)v2[Number].tv_sec)\n              goto LABEL_19;\n          }\n        } while ((_QWORD *)v2[Number].tv_sec != v7);\n      }\n    LABEL_19:\n      operator delete[](v7 - Number);\n    }\n    v10 = (_QWORD *)v2[Number].tv_nsec;\n    v11 = (_QWORD *)v2[Number].tv_sec;\n    if (v10 != v11) {\n      if (__pthread_key_create) {\n        do {\n          while (Number) {\n            v12 = (volatile signed __int32 *)v11[Number];\n            if (v12) {\n              if (!_InterlockedDecrement(v12 + Number)) {\n                (*(void(__fastcall **)(volatile signed __int32 *))(\n                    *(_QWORD *)v12 + Number L))(v12);\n                if (!_InterlockedDecrement(v12 + Number))\n                  break;\n              }\n            }\n            v11 += Number;\n            if (v10 == v11)\n              goto LABEL_28;\n          }\n          v11 += Number;\n          (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v12 +\n                                                             Number L))(v12);\n        } while (v10 != v11);\n      } else {\n        do {\n          v26 = (_DWORD *)v11[Number];\n          if (v26) {\n            v27 = v26[Number];\n            v26[Number] = v27 - Number;\n            if (v27 == Number) {\n              (*(void(__fastcall **)(_DWORD *))(*(_QWORD *)v26 + Number L))(\n                  v26);\n              v25 = v26[Number];\n              v26[Number] = v25 - Number;\n              if (v25 == Number)\n                (*(void(__fastcall **)(_DWORD *))(*(_QWORD *)v26 + Number L))(\n                    v26);\n            }\n          }\n          v11 += Number;\n        } while (v10 != v11);\n      }\n    LABEL_28:\n      v11 = (_QWORD *)v2[Number].tv_sec;\n    }\n    if (v11)\n      operator delete(v11);\n    v13 = (volatile signed __int32 *)v2->tv_nsec;\n    if (v13) {\n      if (__pthread_key_create) {\n        v14 = _InterlockedExchangeAdd(v13 + Number, Number);\n      } else {\n        v14 = *((_DWORD *)v13 + Number);\n        *((_DWORD *)v13 + Number) = v14 - Number;\n      }\n      if (v14 == Number) {\n        (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v13 +\n                                                           Number L))(v13);\n        if (__pthread_key_create) {\n          v15 = _InterlockedExchangeAdd(v13 + Number, Number);\n        } else {\n          v15 = *((_DWORD *)v13 + Number);\n          *((_DWORD *)v13 + Number) = v15 - Number;\n        }\n        if (v15 == Number)\n          (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v13 +\n                                                             Number L))(v13);\n      }\n    }\n    operator delete(v2);\n  }\n  v16 = (void(__fastcall *)(char *, char *, __int64)) *\n        ((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  *(_QWORD *)<span class=\"supfact\">this</span> = off_4166B8;\n  if (v16)\n    v16((char *)<span class=\"supfact\">this</span> + Number,\n        (char *)<span class=\"supfact\">this</span> + Number, Number L);\n  v17 = (volatile signed __int32 *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  if (v17) {\n    if (__pthread_key_create) {\n      if (_InterlockedExchangeAdd(v17 + Number, Number) != Number)\n        goto LABEL_45;\n    } else {\n      v28 = *((_DWORD *)v17 + Number);\n      *((_DWORD *)v17 + Number) = v28 - Number;\n      if (v28 != Number)\n        goto LABEL_45;\n    }\n    (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v17 +\n                                                       Number L))(v17);\n    if (__pthread_key_create) {\n      v29 = _InterlockedExchangeAdd(v17 + Number, Number);\n    } else {\n      v29 = *((_DWORD *)v17 + Number);\n      *((_DWORD *)v17 + Number) = v29 - Number;\n    }\n    if (v29 == Number)\n      (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v17 +\n                                                         Number L))(v17);\n  }\nLABEL_45:\n  v18 = (_QWORD *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  v19 = (_QWORD *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  if (v18 != v19) {\n    if (__pthread_key_create) {\n      v20 = (volatile signed __int32 *)v19[Number];\n      if (v20)\n        goto LABEL_50;\n    LABEL_48:\n      while (Number) {\n        v19 += Number;\n        if (v18 == v19)\n          break;\n        while (Number) {\n          v20 = (volatile signed __int32 *)v19[Number];\n          if (!v20)\n            break;\n        LABEL_50:\n          if (_InterlockedDecrement(v20 + Number))\n            goto LABEL_48;\n          (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v20 +\n                                                             Number L))(v20);\n          if (_InterlockedDecrement(v20 + Number))\n            goto LABEL_48;\n          v19 += Number;\n          (*(void(__fastcall **)(volatile signed __int32 *))(*(_QWORD *)v20 +\n                                                             Number L))(v20);\n          if (v18 == v19)\n            goto LABEL_53;\n        }\n      }\n    } else {\n      do {\n        v23 = (_DWORD *)v19[Number];\n        if (v23) {\n          v24 = v23[Number];\n          v23[Number] = v24 - Number;\n          if (v24 == Number) {\n            (*(void(__fastcall **)(_DWORD *))(*(_QWORD *)v23 + Number L))(v23);\n            v22 = v23[Number];\n            v23[Number] = v22 - Number;\n            if (v22 == Number)\n              (*(void(__fastcall **)(_DWORD *))(*(_QWORD *)v23 + Number L))(\n                  v23);\n          }\n        }\n        v19 += Number;\n      } while (v18 != v19);\n    }\n  LABEL_53:\n    v19 = (_QWORD *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  }\n  if (v19)\n    operator delete(v19);\n  v21 = (char *)*((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  if (v21 != (char *)<span class=\"supfact\">this</span> + Number)\n    operator delete(v21);\n  operator delete(<span class=\"supfact\">this</span>);\n}", "var": [{"name": "this", "type": "spdlog::async_logger *", "pred_name": "this", "ref_name": "this", "ref_type": "spdlog::async_logger *"}, {"name": "v30", "type": "void *[2]", "pred_name": "v30", "ref_name": "v30", "ref_type": "void *[2]"}, {"name": "v31", "type": "char[24]", "pred_name": "v31", "ref_name": "v31", "ref_type": "char[24]"}, {"name": "v32", "type": "__int64", "pred_name": "v32", "ref_name": "v32", "ref_type": "__int64"}, {"name": "v33", "type": "void *", "pred_name": "v33", "ref_name": "v33", "ref_type": "void *"}, {"name": "v34", "type": "__int64", "pred_name": "v34", "ref_name": "v34", "ref_type": "__int64"}, {"name": "v35", "type": "char[16]", "pred_name": "v35", "ref_name": "v35", "ref_type": "char[16]"}, {"name": "v36", "type": "int", "pred_name": "v36", "ref_name": "v36", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "lolo32", "repo_name": "mupdf-mirror", "path": "lolo32/mupdf-mirror/0542c2d9046ac8dd641070dad3827c18a3386323896d39f480d9faada1eb4bf0", "path_in_repo": "lolo32/mupdf-mirror//build/debug/pdf/pdf-object.o", "objdump": "000000000000376f <pdf_dict_dels>:\n    376f:\t55                   \tpush   %rbp\n    3770:\t48 89 e5             \tmov    %rsp,%rbp\n    3773:\t48 83 ec 20          \tsub    $0x20,%rsp\n    3777:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    377b:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    377f:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    3784:\t74 1c                \tje     37a2 <pdf_dict_dels+0x33>\n    3786:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    378a:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n    378e:\t3c 72                \tcmp    $0x72,%al\n    3790:\t75 10                \tjne    37a2 <pdf_dict_dels+0x33>\n    3792:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3796:\t48 89 c7             \tmov    %rax,%rdi\n    3799:\te8 00 00 00 00       \tcallq  379e <pdf_dict_dels+0x2f>\n    379e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    37a2:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    37a7:\t0f 84 1e 01 00 00    \tje     38cb <pdf_dict_dels+0x15c>\n    37ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    37b1:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n    37b5:\t3c 64                \tcmp    $0x64,%al\n    37b7:\t74 35                \tje     37ee <pdf_dict_dels+0x7f>\n    37b9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    37bd:\t48 89 c7             \tmov    %rax,%rdi\n    37c0:\te8 5e d6 ff ff       \tcallq  e23 <pdf_objkindstr>\n    37c5:\t48 89 c2             \tmov    %rax,%rdx\n    37c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    37cc:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    37d0:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    37d7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    37dc:\t48 89 c7             \tmov    %rax,%rdi\n    37df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    37e4:\te8 00 00 00 00       \tcallq  37e9 <pdf_dict_dels+0x7a>\n    37e9:\te9 ca 00 00 00       \tjmpq   38b8 <pdf_dict_dels+0x149>\n    37ee:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    37f2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    37f6:\tba 00 00 00 00       \tmov    $0x0,%edx\n    37fb:\t48 89 ce             \tmov    %rcx,%rsi\n    37fe:\t48 89 c7             \tmov    %rax,%rdi\n    3801:\te8 67 ef ff ff       \tcallq  276d <pdf_dict_finds>\n    3806:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    3809:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    380d:\t0f 88 a5 00 00 00    \tjs     38b8 <pdf_dict_dels+0x149>\n    3813:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3817:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    381b:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    381e:\t48 63 d2             \tmovslq %edx,%rdx\n    3821:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    3825:\t48 01 d0             \tadd    %rdx,%rax\n    3828:\t48 8b 00             \tmov    (%rax),%rax\n    382b:\t48 89 c7             \tmov    %rax,%rdi\n    382e:\te8 00 00 00 00       \tcallq  3833 <pdf_dict_dels+0xc4>\n    3833:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3837:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    383b:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    383e:\t48 63 d2             \tmovslq %edx,%rdx\n    3841:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    3845:\t48 01 d0             \tadd    %rdx,%rax\n    3848:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    384c:\t48 89 c7             \tmov    %rax,%rdi\n    384f:\te8 00 00 00 00       \tcallq  3854 <pdf_dict_dels+0xe5>\n    3854:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3858:\t0f b6 40 05          \tmovzbl 0x5(%rax),%eax\n    385c:\t83 e0 fd             \tand    $0xfffffffd,%eax\n    385f:\t89 c2                \tmov    %eax,%edx\n    3861:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3865:\t88 50 05             \tmov    %dl,0x5(%rax)\n    3868:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    386c:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n    3870:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3874:\t8b 40 18             \tmov    0x18(%rax),%eax\n    3877:\t48 98                \tcltq   \n    3879:\t48 c1 e0 04          \tshl    $0x4,%rax\n    387d:\t48 83 e8 10          \tsub    $0x10,%rax\n    3881:\t48 01 c2             \tadd    %rax,%rdx\n    3884:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3888:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    388c:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n    388f:\t48 63 c9             \tmovslq %ecx,%rcx\n    3892:\t48 c1 e1 04          \tshl    $0x4,%rcx\n    3896:\t48 01 c1             \tadd    %rax,%rcx\n    3899:\t48 8b 02             \tmov    (%rdx),%rax\n    389c:\t48 8b 52 08          \tmov    0x8(%rdx),%rdx\n    38a0:\t48 89 01             \tmov    %rax,(%rcx)\n    38a3:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n    38a7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    38ab:\t8b 40 18             \tmov    0x18(%rax),%eax\n    38ae:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    38b1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    38b5:\t89 50 18             \tmov    %edx,0x18(%rax)\n    38b8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    38bc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    38c1:\t48 89 c7             \tmov    %rax,%rdi\n    38c4:\te8 42 da ff ff       \tcallq  130b <object_altered>\n    38c9:\teb 01                \tjmp    38cc <pdf_dict_dels+0x15d>\n    38cb:\t90                   \tnop\n    38cc:\tc9                   \tleaveq \n    38cd:\tc3                   \tretq   ", "code_s": "void __fastcall pdf_dict_dels(__int64 <span class=\"supfact\">a1</span>,\n                              const char *<span class=\"supfact\">a2</span>) {\n  const char *v2;\n  __int64 *v3;\n  _QWORD *<span class=\"supfact\">v4</span>;\n  __int64 v5;\n  __int64 v6;\n  __int64 <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v7</span> = <span class=\"supfact\">a1</span>;\n  if (<span class=\"supfact\">a1</span> && *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) == Number)\n    <span class=\"supfact\">v7</span> = pdf_resolve_indirect(<span class=\"supfact\">a1</span>);\n  if (<span class=\"supfact\">v7</span>) {\n    if (*(_BYTE *)(<span class=\"supfact\">v7</span> + Number) == Number) {\n      <span class=\"supfact\">v8</span> =\n          pdf_dict_finds(<span class=\"supfact\">v7</span>, <span class=\"supfact\">a2</span>, Number L);\n      if (<span class=\"supfact\">v8</span> >= Number) {\n        pdf_drop_obj(*(_QWORD *)(Number L * <span class=\"supfact\">v8</span> +\n                                 *(_QWORD *)(<span class=\"supfact\">v7</span> + Number)));\n        pdf_drop_obj(*(_QWORD *)(Number L * <span class=\"supfact\">v8</span> +\n                                 *(_QWORD *)(<span class=\"supfact\">v7</span> + Number) +\n                                 Number));\n        *(_BYTE *)(<span class=\"supfact\">v7</span> + Number) &= Number;\n        v3 = (__int64 *)(Number L * *(int *)(<span class=\"supfact\">v7</span> + Number) -\n                         Number + *(_QWORD *)(<span class=\"supfact\">v7</span> + Number));\n        <span class=\"supfact\">v4</span> =\n            (_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v7</span> + Number) +\n                       Number L * <span class=\"supfact\">v8</span>);\n        v5 = *v3;\n        v6 = v3[Number];\n        *<span class=\"supfact\">v4</span> = v5;\n        <span class=\"supfact\">v4</span>[Number] = v6;\n        --*(_DWORD *)(<span class=\"supfact\">v7</span> + Number);\n      }\n    } else {\n      v2 = pdf_objkindstr(<span class=\"supfact\">v7</span>);\n      fz_warn(*(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v7</span> + Number) + Number L),\n              String, v2);\n    }\n    object_altered(<span class=\"supfact\">v7</span>, Number L);\n  }\n}", "code_t": "void __cdecl pdf_dict_dels(pdf_obj *<span class=\"supfact\">obj</span>,\n                           const char *<span class=\"supfact\">key</span>) {\n  char *v2;\n  pdf_obj **v3;\n  pdf_obj **<span class=\"supfact\">v4</span>;\n  pdf_obj *v5;\n  pdf_obj *v6;\n  pdf_obj *<span class=\"supfact\">obja</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">obja</span> = <span class=\"supfact\">obj</span>;\n  if (<span class=\"supfact\">obj</span> && <span class=\"supfact\">obj</span>->kind == Number)\n    <span class=\"supfact\">obja</span> = (pdf_obj *)pdf_resolve_indirect(<span class=\"supfact\">obj</span>);\n  if (<span class=\"supfact\">obja</span>) {\n    if (<span class=\"supfact\">obja</span>->kind == Number) {\n      <span class=\"supfact\">i</span> =\n          pdf_dict_finds(<span class=\"supfact\">obja</span>, <span class=\"supfact\">key</span>, Number L);\n      if (<span class=\"supfact\">i</span> >= Number) {\n        pdf_drop_obj(\n            <span class=\"supfact\">obja</span>->u.a.items[Number * <span class=\"supfact\">i</span>]);\n        pdf_drop_obj(<span class=\"supfact\">obja</span>->u.a\n                         .items[Number * <span class=\"supfact\">i</span> + Number]);\n        <span class=\"supfact\">obja</span>->flags &= Number;\n        v3 = &<span class=\"supfact\">obja</span>->u.a\n                  .items[Number * <span class=\"supfact\">obja</span>->u.b - Number];\n        <span class=\"supfact\">v4</span> =\n            &<span class=\"supfact\">obja</span>->u.a.items[Number * <span class=\"supfact\">i</span>];\n        v5 = *v3;\n        v6 = v3[Number];\n        *<span class=\"supfact\">v4</span> = v5;\n        <span class=\"supfact\">v4</span>[Number] = v6;\n        --<span class=\"supfact\">obja</span>->u.b;\n      }\n    } else {\n      v2 = pdf_objkindstr(<span class=\"supfact\">obja</span>);\n      fz_warn(<span class=\"supfact\">obja</span>->doc->ctx, String, v2);\n    }\n    object_altered(<span class=\"supfact\">obja</span>, Number L);\n  }\n}", "var": [{"name": "a1", "type": "fz_context *", "pred_name": "ctx", "ref_name": "obj", "ref_type": "pdf_obj *"}, {"name": "a2", "type": "pdf_obj *", "pred_name": "obj", "ref_name": "key", "ref_type": "const char *"}, {"name": "v4", "type": "__int64", "pred_name": "v4", "ref_name": "v4", "ref_type": "pdf_obj * *"}, {"name": "v7", "type": "pdf_obj *", "pred_name": "obja", "ref_name": "obja", "ref_type": "pdf_obj *"}, {"name": "v8", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "xenko3d", "repo_name": "freeimage", "path": "xenko3d/freeimage/17e553d844d6b10874d5ac56efb2d557b070568e913122bce4fd67cd08416481", "path_in_repo": "xenko3d/freeimage//Source/LibPNG/pngtrans.o", "objdump": "0000000000000000 <png_set_bgr>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   8:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n   d:\t74 1b                \tje     2a <png_set_bgr+0x2a>\n   f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  13:\t8b 80 34 01 00 00    \tmov    0x134(%rax),%eax\n  19:\t83 c8 01             \tor     $0x1,%eax\n  1c:\t89 c2                \tmov    %eax,%edx\n  1e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  22:\t89 90 34 01 00 00    \tmov    %edx,0x134(%rax)\n  28:\teb 01                \tjmp    2b <png_set_bgr+0x2b>\n  2a:\t90                   \tnop\n  2b:\t5d                   \tpop    %rbp\n  2c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall png_set_bgr(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  if (<span class=\"supfact\">a1</span>) {\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>;\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) |= Number;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl png_set_bgr(png_structrp <span class=\"supfact\">png_ptr</span>) {\n  if (<span class=\"supfact\">png_ptr</span>)\n    <span class=\"supfact\">png_ptr</span>->transformations |= Number;\n}", "var": [{"name": "a1", "type": "png_structp", "pred_name": "png_ptr", "ref_name": "png_ptr", "ref_type": "png_structrp"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "jamesbulpin", "repo_name": "xcp-xen-4.1", "path": "jamesbulpin/xcp-xen-4.1/0fe99bb5d51c254c756f657bcb89eac17de1ea3ed0abec6f9a56729cd461c8f8", "path_in_repo": "jamesbulpin/xcp-xen-4.1/tools/pygrub/build/temp.linux-x86_64-2.7/src/fsimage/fsimage.o", "objdump": "00000000000001c4 <fsimage_file_getattr>:\n 1c4:\t48 83 ec 18          \tsub    $0x18,%rsp\n 1c8:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n 1cd:\t48 89 34 24          \tmov    %rsi,(%rsp)\n 1d1:\t48 8b 14 24          \tmov    (%rsp),%rdx\n 1d5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 1da:\t48 89 c6             \tmov    %rax,%rsi\n 1dd:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1e4 <fsimage_file_getattr+0x20>\n 1e4:\te8 00 00 00 00       \tcallq  1e9 <fsimage_file_getattr+0x25>\n 1e9:\t48 83 c4 18          \tadd    $0x18,%rsp\n 1ed:\tc3                   \tretq   ", "code_s": "__int64 __fastcall fsimage_file_getattr(__int64 <span class=\"supfact\">a1</span>,\n                                        __int64 <span class=\"supfact\">a2</span>) {\n  return Py_FindMethod(&fsimage_file_methods, <span class=\"supfact\">a1</span>,\n                       <span class=\"supfact\">a2</span>);\n}", "code_t": "PyObject *__cdecl fsimage_file_getattr(fsimage_file_t *<span class=\"supfact\">file</span>,\n                                       char *<span class=\"supfact\">name</span>) {\n  return (PyObject *)Py_FindMethod(fsimage_file_methods, <span class=\"supfact\">file</span>,\n                                   <span class=\"supfact\">name</span>);\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "handle", "ref_name": "file", "ref_type": "fsimage_file_t *"}, {"name": "a2", "type": "const char *", "pred_name": "f", "ref_name": "name", "ref_type": "char *"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/85db5fd110c71fb40e75d55507ec0da5d6043315bc8b6a036d234c5dede001f6", "path_in_repo": "XanClic/qemu//x86_64-softmmu/hw/i386/xen/xen-hvm.o", "objdump": "000000000000337e <xen_log_start>:\n    337e:\t55                   \tpush   %rbp\n    337f:\t48 89 e5             \tmov    %rsp,%rbp\n    3382:\t53                   \tpush   %rbx\n    3383:\t48 83 ec 38          \tsub    $0x38,%rsp\n    3387:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    338b:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    338f:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n    3392:\t89 4d c8             \tmov    %ecx,-0x38(%rbp)\n    3395:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3399:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    339d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    33a1:\t48 83 e8 58          \tsub    $0x58,%rax\n    33a5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    33a9:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    33ac:\tf7 d0                \tnot    %eax\n    33ae:\t23 45 c8             \tand    -0x38(%rbp),%eax\n    33b1:\t83 e0 01             \tand    $0x1,%eax\n    33b4:\t85 c0                \ttest   %eax,%eax\n    33b6:\t74 39                \tje     33f1 <xen_log_start+0x73>\n    33b8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    33bc:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    33c0:\t48 8b 00             \tmov    (%rax),%rax\n    33c3:\t48 89 c1             \tmov    %rax,%rcx\n    33c6:\t48 89 d3             \tmov    %rdx,%rbx\n    33c9:\t48 89 d0             \tmov    %rdx,%rax\n    33cc:\t48 89 cf             \tmov    %rcx,%rdi\n    33cf:\t48 89 c6             \tmov    %rax,%rsi\n    33d2:\te8 47 cc ff ff       \tcallq  1e <int128_get64>\n    33d7:\t48 89 c2             \tmov    %rax,%rdx\n    33da:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    33de:\t48 8b 48 28          \tmov    0x28(%rax),%rcx\n    33e2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    33e6:\t48 89 ce             \tmov    %rcx,%rsi\n    33e9:\t48 89 c7             \tmov    %rax,%rdi\n    33ec:\te8 bd fd ff ff       \tcallq  31ae <xen_sync_dirty_bitmap>\n    33f1:\t90                   \tnop\n    33f2:\t48 83 c4 38          \tadd    $0x38,%rsp\n    33f6:\t5b                   \tpop    %rbx\n    33f7:\t5d                   \tpop    %rbp\n    33f8:\tc3                   \tretq   ", "code_s": "unsigned __int64 *__fastcall xen_log_start(__int64 <span class=\"supfact\">a1</span>,\n                                           __int64 <span class=\"supfact\">a2</span>,\n                                           char <span class=\"supfact\">a3</span>,\n                                           unsigned __int8 <span class=\"supfact\">a4</span>) {\n  unsigned __int64 *result;\n  __int64 v5;\n  result = (unsigned __int64 *)(<span class=\"supfact\">a4</span> &\n                                (unsigned __int8)~<span class=\"supfact\">a3</span> & Number);\n  if ((<span class=\"supfact\">a4</span> & (unsigned __int8)~<span class=\"supfact\">a3</span> & Number) !=\n      Number) {\n    v5 = int128_get64(*(_QWORD *)<span class=\"supfact\">a2</span>,\n                      *(_QWORD *)(<span class=\"supfact\">a2</span> + Number));\n    result =\n        xen_sync_dirty_bitmap(<span class=\"supfact\">a1</span> - Number,\n                              *(_QWORD *)(<span class=\"supfact\">a2</span> + Number), v5);\n  }\n  return result;\n}", "code_t": "void __cdecl xen_log_start(MemoryListener_0 *<span class=\"supfact\">listener</span>,\n                           MemoryRegionSection_0 *<span class=\"supfact\">section</span>,\n                           int <span class=\"supfact\">old</span>, int <span class=\"supfact\">a4</span>) {\n  uint64_t v4;\n  if (((unsigned __int8)<span class=\"supfact\">a4</span> &\n       (unsigned __int8)~(_BYTE)<span class=\"supfact\">old</span> & Number) != Number) {\n    v4 = int128_get64(<span class=\"supfact\">section</span>->size);\n    xen_sync_dirty_bitmap(\n        (XenIOState_0 *)&<span class=\"supfact\">listener</span>[Number].log_global_after_sync,\n        <span class=\"supfact\">section</span>->offset_within_address_space, v4);\n  }\n}", "var": [{"name": "a1", "type": "XenPCIPassthroughState_0 *", "pred_name": "s", "ref_name": "listener", "ref_type": "MemoryListener_0 *"}, {"name": "a2", "type": "MemoryRegionSection_0 *", "pred_name": "list", "ref_name": "section", "ref_type": "MemoryRegionSection_0 *"}, {"name": "a3", "type": "unsigned int", "pred_name": "start", "ref_name": "old", "ref_type": "int"}, {"name": "a4", "type": "unsigned int", "pred_name": "len", "ref_name": "a4", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "leofountain", "repo_name": "FusionHunter", "path": "leofountain/FusionHunter/cbe5ad6d36cec1b42bc8950da459d10c79384b16b00a46d65460f75d65d11af2", "path_in_repo": "leofountain/FusionHunter/lib/errabort.o", "objdump": "000000000000012c <errnoWarn>:\n 12c:\t55                   \tpush   %rbp\n 12d:\t48 89 e5             \tmov    %rsp,%rbp\n 130:\t48 81 ec e0 02 00 00 \tsub    $0x2e0,%rsp\n 137:\t48 89 bd 28 fd ff ff \tmov    %rdi,-0x2d8(%rbp)\n 13e:\t48 89 b5 58 ff ff ff \tmov    %rsi,-0xa8(%rbp)\n 145:\t48 89 95 60 ff ff ff \tmov    %rdx,-0xa0(%rbp)\n 14c:\t48 89 8d 68 ff ff ff \tmov    %rcx,-0x98(%rbp)\n 153:\t4c 89 85 70 ff ff ff \tmov    %r8,-0x90(%rbp)\n 15a:\t4c 89 8d 78 ff ff ff \tmov    %r9,-0x88(%rbp)\n 161:\t84 c0                \ttest   %al,%al\n 163:\t74 20                \tje     185 <errnoWarn+0x59>\n 165:\t0f 29 45 80          \tmovaps %xmm0,-0x80(%rbp)\n 169:\t0f 29 4d 90          \tmovaps %xmm1,-0x70(%rbp)\n 16d:\t0f 29 55 a0          \tmovaps %xmm2,-0x60(%rbp)\n 171:\t0f 29 5d b0          \tmovaps %xmm3,-0x50(%rbp)\n 175:\t0f 29 65 c0          \tmovaps %xmm4,-0x40(%rbp)\n 179:\t0f 29 6d d0          \tmovaps %xmm5,-0x30(%rbp)\n 17d:\t0f 29 75 e0          \tmovaps %xmm6,-0x20(%rbp)\n 181:\t0f 29 7d f0          \tmovaps %xmm7,-0x10(%rbp)\n 185:\tc7 85 38 fd ff ff 08 \tmovl   $0x8,-0x2c8(%rbp)\n 18c:\t00 00 00 \n 18f:\tc7 85 3c fd ff ff 30 \tmovl   $0x30,-0x2c4(%rbp)\n 196:\t00 00 00 \n 199:\t48 8d 45 10          \tlea    0x10(%rbp),%rax\n 19d:\t48 89 85 40 fd ff ff \tmov    %rax,-0x2c0(%rbp)\n 1a4:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n 1ab:\t48 89 85 48 fd ff ff \tmov    %rax,-0x2b8(%rbp)\n 1b2:\te8 00 00 00 00       \tcallq  1b7 <errnoWarn+0x8b>\n 1b7:\t8b 00                \tmov    (%rax),%eax\n 1b9:\t89 c7                \tmov    %eax,%edi\n 1bb:\te8 00 00 00 00       \tcallq  1c0 <errnoWarn+0x94>\n 1c0:\t48 89 c6             \tmov    %rax,%rsi\n 1c3:\t48 8b 95 28 fd ff ff \tmov    -0x2d8(%rbp),%rdx\n 1ca:\t48 8d 85 50 fd ff ff \tlea    -0x2b0(%rbp),%rax\n 1d1:\t48 89 d1             \tmov    %rdx,%rcx\n 1d4:\t48 89 f2             \tmov    %rsi,%rdx\n 1d7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1dc:\t48 89 c7             \tmov    %rax,%rdi\n 1df:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1e4:\te8 00 00 00 00       \tcallq  1e9 <errnoWarn+0xbd>\n 1e9:\t48 8d 95 38 fd ff ff \tlea    -0x2c8(%rbp),%rdx\n 1f0:\t48 8d 85 50 fd ff ff \tlea    -0x2b0(%rbp),%rax\n 1f7:\t48 89 d6             \tmov    %rdx,%rsi\n 1fa:\t48 89 c7             \tmov    %rax,%rdi\n 1fd:\te8 00 00 00 00       \tcallq  202 <errnoWarn+0xd6>\n 202:\t90                   \tnop\n 203:\tc9                   \tleaveq \n 204:\tc3                   \tretq   ", "code_s": "int errnoWarn(const char *<span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n              __int64 <span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>,\n              __int64 <span class=\"supfact\">a5</span>, __int64 <span class=\"supfact\">a6</span>, ...) {\n  int *v6;\n  char *v7;\n  gcc_va_list <span class=\"supfact\">va</span>;\n  char <span class=\"supfact\">s</span>[Number];\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  va_start(<span class=\"supfact\">va</span>, <span class=\"supfact\">a6</span>);\n  <span class=\"supfact\">v11</span> = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v12</span> = <span class=\"supfact\">a3</span>;\n  <span class=\"supfact\">v13</span> = <span class=\"supfact\">a4</span>;\n  <span class=\"supfact\">v14</span> = <span class=\"supfact\">a5</span>;\n  <span class=\"supfact\">v15</span> = <span class=\"supfact\">a6</span>;\n  <span class=\"supfact\">va</span>[Number].gp_offset = Number;\n  v6 = _errno_location();\n  v7 = strerror(*v6);\n  sprintf(<span class=\"supfact\">s</span>, String, v7, <span class=\"supfact\">a1</span>);\n  return vaWarn(<span class=\"supfact\">s</span>, <span class=\"supfact\">va</span>);\n}", "code_t": "void errnoWarn(char *<span class=\"supfact\">format</span>, ...) {\n  __int64 <span class=\"supfact\">v1</span>;\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  int *v6;\n  char *v7;\n  va_list <span class=\"supfact\">args</span>;\n  char <span class=\"supfact\">fbuf</span>[Number];\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  va_start(<span class=\"supfact\">args</span>, <span class=\"supfact\">format</span>);\n  <span class=\"supfact\">v3</span> = va_arg(<span class=\"supfact\">args</span>, _QWORD);\n  <span class=\"supfact\">v1</span> = va_arg(<span class=\"supfact\">args</span>, _QWORD);\n  <span class=\"supfact\">v2</span> = va_arg(<span class=\"supfact\">args</span>, _QWORD);\n  <span class=\"supfact\">v4</span> = va_arg(<span class=\"supfact\">args</span>, _QWORD);\n  <span class=\"supfact\">v5</span> = va_arg(<span class=\"supfact\">args</span>, _QWORD);\n  <span class=\"supfact\">v10</span> = <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v11</span> = <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v12</span> = <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v13</span> = <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v14</span> = <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">args</span>[Number].gp_offset = Number;\n  v6 = _errno_location();\n  v7 = strerror(*v6);\n  sprintf(<span class=\"supfact\">fbuf</span>, String, v7, <span class=\"supfact\">format</span>);\n  vaWarn(<span class=\"supfact\">fbuf</span>, <span class=\"supfact\">args</span>);\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "format", "ref_name": "format", "ref_type": "char *"}, {"name": "a2", "type": "__int64", "pred_name": "v3", "ref_name": "v3", "ref_type": "__int64"}, {"name": "a3", "type": "__int64", "pred_name": "v1", "ref_name": "v1", "ref_type": "__int64"}, {"name": "a4", "type": "__int64", "pred_name": "v2", "ref_name": "v2", "ref_type": "__int64"}, {"name": "a5", "type": "__int64", "pred_name": "v4", "ref_name": "v4", "ref_type": "__int64"}, {"name": "a6", "type": "__int64", "pred_name": "v5", "ref_name": "v5", "ref_type": "__int64"}, {"name": "va", "type": "__va_list_tag[1]", "pred_name": "args", "ref_name": "args", "ref_type": "__va_list_tag[1]"}, {"name": "s", "type": "char[512]", "pred_name": "buffer", "ref_name": "fbuf", "ref_type": "char[512]"}, {"name": "v11", "type": "__int64", "pred_name": "v7", "ref_name": "v10", "ref_type": "__int64"}, {"name": "v12", "type": "__int64", "pred_name": "v8", "ref_name": "v11", "ref_type": "__int64"}, {"name": "v13", "type": "__int64", "pred_name": "v9", "ref_name": "v12", "ref_type": "__int64"}, {"name": "v14", "type": "__int64", "pred_name": "v10", "ref_name": "v13", "ref_type": "__int64"}, {"name": "v15", "type": "__int64", "pred_name": "v11", "ref_name": "v14", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "lbdroid", "repo_name": "cups", "path": "lbdroid/cups/e11a14d6d48da1e9780634eb2977af781379780805915dd32eda27ab06f33e9a", "path_in_repo": "lbdroid/cups/scheduler/job.o", "objdump": "0000000000008116 <get_options>:\n    8116:\t55                   \tpush   %rbp\n    8117:\t48 89 e5             \tmov    %rsp,%rbp\n    811a:\t53                   \tpush   %rbx\n    811b:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n    8122:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    8126:\t89 75 84             \tmov    %esi,-0x7c(%rbp)\n    8129:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    8130:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n    8137:\t4c 89 85 68 ff ff ff \tmov    %r8,-0x98(%rbp)\n    813e:\t4c 89 8d 60 ff ff ff \tmov    %r9,-0xa0(%rbp)\n    8145:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8149:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    814d:\t48 8b 80 68 07 00 00 \tmov    0x768(%rax),%rax\n    8154:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    8158:\tc7 45 9c 00 00 00 00 \tmovl   $0x0,-0x64(%rbp)\n    815f:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n    8166:\t00 \n    8167:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    816c:\t0f 84 9e 02 00 00    \tje     8410 <get_options+0x2fa>\n    8172:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8176:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    817d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    8182:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8189 <get_options+0x73>\n    8189:\t48 89 c7             \tmov    %rax,%rdi\n    818c:\te8 00 00 00 00       \tcallq  8191 <get_options+0x7b>\n    8191:\t48 85 c0             \ttest   %rax,%rax\n    8194:\t0f 85 76 02 00 00    \tjne    8410 <get_options+0x2fa>\n    819a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    819e:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    81a5:\tba 00 00 00 00       \tmov    $0x0,%edx\n    81aa:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 81b1 <get_options+0x9b>\n    81b1:\t48 89 c7             \tmov    %rax,%rdi\n    81b4:\te8 00 00 00 00       \tcallq  81b9 <get_options+0xa3>\n    81b9:\t48 85 c0             \ttest   %rax,%rax\n    81bc:\t0f 85 4e 02 00 00    \tjne    8410 <get_options+0x2fa>\n    81c2:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    81c6:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    81cd:\tba 00 00 00 00       \tmov    $0x0,%edx\n    81d2:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 81d9 <get_options+0xc3>\n    81d9:\t48 89 c7             \tmov    %rax,%rdi\n    81dc:\te8 00 00 00 00       \tcallq  81e1 <get_options+0xcb>\n    81e1:\t48 85 c0             \ttest   %rax,%rax\n    81e4:\t75 28                \tjne    820e <get_options+0xf8>\n    81e6:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    81ea:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    81f1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    81f6:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 81fd <get_options+0xe7>\n    81fd:\t48 89 c7             \tmov    %rax,%rdi\n    8200:\te8 00 00 00 00       \tcallq  8205 <get_options+0xef>\n    8205:\t48 85 c0             \ttest   %rax,%rax\n    8208:\t0f 84 02 02 00 00    \tje     8410 <get_options+0x2fa>\n    820e:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8212:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    8219:\tba 44 00 00 00       \tmov    $0x44,%edx\n    821e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8225 <get_options+0x10f>\n    8225:\t48 89 c7             \tmov    %rax,%rdi\n    8228:\te8 00 00 00 00       \tcallq  822d <get_options+0x117>\n    822d:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    8231:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    8236:\t74 24                \tje     825c <get_options+0x146>\n    8238:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    823c:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    8240:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8247 <get_options+0x131>\n    8247:\t48 89 c7             \tmov    %rax,%rdi\n    824a:\te8 00 00 00 00       \tcallq  824f <get_options+0x139>\n    824f:\t85 c0                \ttest   %eax,%eax\n    8251:\t75 09                \tjne    825c <get_options+0x146>\n    8253:\tc7 45 a0 00 00 00 00 \tmovl   $0x0,-0x60(%rbp)\n    825a:\teb 07                \tjmp    8263 <get_options+0x14d>\n    825c:\tc7 45 a0 01 00 00 00 \tmovl   $0x1,-0x60(%rbp)\n    8263:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8267:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    826e:\tba 23 00 00 00       \tmov    $0x23,%edx\n    8273:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 827a <get_options+0x164>\n    827a:\t48 89 c7             \tmov    %rax,%rdi\n    827d:\te8 00 00 00 00       \tcallq  8282 <get_options+0x16c>\n    8282:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    8286:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    828b:\t74 27                \tje     82b4 <get_options+0x19e>\n    828d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8291:\t8b 40 20             \tmov    0x20(%rax),%eax\n    8294:\t83 f8 02             \tcmp    $0x2,%eax\n    8297:\t7e 1b                \tjle    82b4 <get_options+0x19e>\n    8299:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    829d:\t8b 40 20             \tmov    0x20(%rax),%eax\n    82a0:\t83 f8 05             \tcmp    $0x5,%eax\n    82a3:\t7f 0f                \tjg     82b4 <get_options+0x19e>\n    82a5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    82a9:\t8b 40 20             \tmov    0x20(%rax),%eax\n    82ac:\t83 e8 03             \tsub    $0x3,%eax\n    82af:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n    82b2:\teb 07                \tjmp    82bb <get_options+0x1a5>\n    82b4:\tc7 45 a4 01 00 00 00 \tmovl   $0x1,-0x5c(%rbp)\n    82bb:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    82bf:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n    82c2:\t48 63 f0             \tmovslq %eax,%rsi\n    82c5:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n    82c8:\t48 63 d0             \tmovslq %eax,%rdx\n    82cb:\t48 89 d0             \tmov    %rdx,%rax\n    82ce:\t48 01 c0             \tadd    %rax,%rax\n    82d1:\t48 01 d0             \tadd    %rdx,%rax\n    82d4:\t48 01 f0             \tadd    %rsi,%rax\n    82d7:\t48 83 c0 30          \tadd    $0x30,%rax\n    82db:\t8b 04 81             \tmov    (%rcx,%rax,4),%eax\n    82de:\t85 c0                \ttest   %eax,%eax\n    82e0:\t75 5b                \tjne    833d <get_options+0x227>\n    82e2:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    82e6:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n    82e9:\t48 63 d0             \tmovslq %eax,%rdx\n    82ec:\t48 89 d0             \tmov    %rdx,%rax\n    82ef:\t48 01 c0             \tadd    %rax,%rax\n    82f2:\t48 01 d0             \tadd    %rdx,%rax\n    82f5:\t48 c1 e0 02          \tshl    $0x2,%rax\n    82f9:\t48 01 c8             \tadd    %rcx,%rax\n    82fc:\t48 05 c4 00 00 00    \tadd    $0xc4,%rax\n    8302:\t8b 00                \tmov    (%rax),%eax\n    8304:\t85 c0                \ttest   %eax,%eax\n    8306:\t7e 09                \tjle    8311 <get_options+0x1fb>\n    8308:\tc7 45 a4 01 00 00 00 \tmovl   $0x1,-0x5c(%rbp)\n    830f:\teb 2c                \tjmp    833d <get_options+0x227>\n    8311:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8315:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n    8318:\t48 63 d2             \tmovslq %edx,%rdx\n    831b:\t48 83 c2 33          \tadd    $0x33,%rdx\n    831f:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    8322:\t85 c0                \ttest   %eax,%eax\n    8324:\t7e 09                \tjle    832f <get_options+0x219>\n    8326:\tc7 45 a0 01 00 00 00 \tmovl   $0x1,-0x60(%rbp)\n    832d:\teb 0e                \tjmp    833d <get_options+0x227>\n    832f:\tc7 45 a4 01 00 00 00 \tmovl   $0x1,-0x5c(%rbp)\n    8336:\tc7 45 a0 01 00 00 00 \tmovl   $0x1,-0x60(%rbp)\n    833d:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    8341:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n    8344:\t48 63 f0             \tmovslq %eax,%rsi\n    8347:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n    834a:\t48 63 d0             \tmovslq %eax,%rdx\n    834d:\t48 89 d0             \tmov    %rdx,%rax\n    8350:\t48 01 c0             \tadd    %rax,%rax\n    8353:\t48 01 d0             \tadd    %rdx,%rax\n    8356:\t48 01 f0             \tadd    %rsi,%rax\n    8359:\t48 83 c0 30          \tadd    $0x30,%rax\n    835d:\t8b 04 81             \tmov    (%rcx,%rax,4),%eax\n    8360:\t85 c0                \ttest   %eax,%eax\n    8362:\t0f 8e a8 00 00 00    \tjle    8410 <get_options+0x2fa>\n    8368:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    836c:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n    836f:\t48 63 f0             \tmovslq %eax,%rsi\n    8372:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n    8375:\t48 63 d0             \tmovslq %eax,%rdx\n    8378:\t48 89 d0             \tmov    %rdx,%rax\n    837b:\t48 01 c0             \tadd    %rax,%rax\n    837e:\t48 01 d0             \tadd    %rdx,%rax\n    8381:\t48 01 f0             \tadd    %rsi,%rax\n    8384:\t48 83 c0 30          \tadd    $0x30,%rax\n    8388:\t8b 04 81             \tmov    (%rcx,%rax,4),%eax\n    838b:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n    838e:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    8392:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n    8395:\t48 63 f0             \tmovslq %eax,%rsi\n    8398:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n    839b:\t48 63 d0             \tmovslq %eax,%rdx\n    839e:\t48 89 d0             \tmov    %rdx,%rax\n    83a1:\t48 01 c0             \tadd    %rax,%rax\n    83a4:\t48 01 d0             \tadd    %rdx,%rax\n    83a7:\t48 01 f0             \tadd    %rsi,%rax\n    83aa:\t48 83 c0 1a          \tadd    $0x1a,%rax\n    83ae:\t48 8b 44 c1 08       \tmov    0x8(%rcx,%rax,8),%rax\n    83b3:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    83b7:\teb 51                \tjmp    840a <get_options+0x2f4>\n    83b9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    83bd:\t48 8b 08             \tmov    (%rax),%rcx\n    83c0:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    83c4:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    83cb:\tba 00 00 00 00       \tmov    $0x0,%edx\n    83d0:\t48 89 ce             \tmov    %rcx,%rsi\n    83d3:\t48 89 c7             \tmov    %rax,%rdi\n    83d6:\te8 00 00 00 00       \tcallq  83db <get_options+0x2c5>\n    83db:\t48 85 c0             \ttest   %rax,%rax\n    83de:\t75 21                \tjne    8401 <get_options+0x2eb>\n    83e0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    83e4:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n    83e8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    83ec:\t48 8b 00             \tmov    (%rax),%rax\n    83ef:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    83f3:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    83f6:\t48 89 c7             \tmov    %rax,%rdi\n    83f9:\te8 00 00 00 00       \tcallq  83fe <get_options+0x2e8>\n    83fe:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    8401:\t83 6d 98 01          \tsubl   $0x1,-0x68(%rbp)\n    8405:\t48 83 45 d8 10       \taddq   $0x10,-0x28(%rbp)\n    840a:\t83 7d 98 00          \tcmpl   $0x0,-0x68(%rbp)\n    840e:\t7f a9                \tjg     83b9 <get_options+0x2a3>\n    8410:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    8415:\t0f 84 ef 03 00 00    \tje     880a <get_options+0x6f4>\n    841b:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    841f:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    8426:\tba 00 00 00 00       \tmov    $0x0,%edx\n    842b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8432 <get_options+0x31c>\n    8432:\t48 89 c7             \tmov    %rax,%rdi\n    8435:\te8 00 00 00 00       \tcallq  843a <get_options+0x324>\n    843a:\t48 85 c0             \ttest   %rax,%rax\n    843d:\t75 6f                \tjne    84ae <get_options+0x398>\n    843f:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8443:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    844a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    844f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8456 <get_options+0x340>\n    8456:\t48 89 c7             \tmov    %rax,%rdi\n    8459:\te8 00 00 00 00       \tcallq  845e <get_options+0x348>\n    845e:\t48 85 c0             \ttest   %rax,%rax\n    8461:\t75 4b                \tjne    84ae <get_options+0x398>\n    8463:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8467:\t48 8b 88 d0 00 00 00 \tmov    0xd0(%rax),%rcx\n    846e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8472:\tba 00 00 00 00       \tmov    $0x0,%edx\n    8477:\t48 89 ce             \tmov    %rcx,%rsi\n    847a:\t48 89 c7             \tmov    %rax,%rdi\n    847d:\te8 00 00 00 00       \tcallq  8482 <get_options+0x36c>\n    8482:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    8486:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    848b:\t74 21                \tje     84ae <get_options+0x398>\n    848d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8491:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    8498:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    849c:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    849f:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    84a3:\t48 89 c7             \tmov    %rax,%rdi\n    84a6:\te8 00 00 00 00       \tcallq  84ab <get_options+0x395>\n    84ab:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    84ae:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    84b2:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    84b9:\tba 00 00 00 00       \tmov    $0x0,%edx\n    84be:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 84c5 <get_options+0x3af>\n    84c5:\t48 89 c7             \tmov    %rax,%rdi\n    84c8:\te8 00 00 00 00       \tcallq  84cd <get_options+0x3b7>\n    84cd:\t48 85 c0             \ttest   %rax,%rax\n    84d0:\t75 47                \tjne    8519 <get_options+0x403>\n    84d2:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    84d6:\t48 8b 88 d0 00 00 00 \tmov    0xd0(%rax),%rcx\n    84dd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    84e1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    84e6:\t48 89 ce             \tmov    %rcx,%rsi\n    84e9:\t48 89 c7             \tmov    %rax,%rdi\n    84ec:\te8 00 00 00 00       \tcallq  84f1 <get_options+0x3db>\n    84f1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    84f5:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    84fa:\t74 1d                \tje     8519 <get_options+0x403>\n    84fc:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    8500:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    8503:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    8507:\t48 89 c6             \tmov    %rax,%rsi\n    850a:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 8511 <get_options+0x3fb>\n    8511:\te8 00 00 00 00       \tcallq  8516 <get_options+0x400>\n    8516:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    8519:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    851d:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    8524:\tba 00 00 00 00       \tmov    $0x0,%edx\n    8529:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8530 <get_options+0x41a>\n    8530:\t48 89 c7             \tmov    %rax,%rdi\n    8533:\te8 00 00 00 00       \tcallq  8538 <get_options+0x422>\n    8538:\t48 85 c0             \ttest   %rax,%rax\n    853b:\t0f 85 b4 00 00 00    \tjne    85f5 <get_options+0x4df>\n    8541:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8545:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    854c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    8551:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8558 <get_options+0x442>\n    8558:\t48 89 c7             \tmov    %rax,%rdi\n    855b:\te8 00 00 00 00       \tcallq  8560 <get_options+0x44a>\n    8560:\t48 85 c0             \ttest   %rax,%rax\n    8563:\t0f 85 8c 00 00 00    \tjne    85f5 <get_options+0x4df>\n    8569:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    856d:\t48 8b b0 d0 00 00 00 \tmov    0xd0(%rax),%rsi\n    8574:\t48 8d 55 94          \tlea    -0x6c(%rbp),%rdx\n    8578:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    857c:\t48 89 d1             \tmov    %rdx,%rcx\n    857f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    8584:\t48 89 c7             \tmov    %rax,%rdi\n    8587:\te8 00 00 00 00       \tcallq  858c <get_options+0x476>\n    858c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    8590:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    8595:\t74 5e                \tje     85f5 <get_options+0x4df>\n    8597:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    859b:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    859e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    85a2:\t48 89 c6             \tmov    %rax,%rsi\n    85a5:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 85ac <get_options+0x496>\n    85ac:\te8 00 00 00 00       \tcallq  85b1 <get_options+0x49b>\n    85b1:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    85b4:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    85b8:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    85bf:\tba 00 00 00 00       \tmov    $0x0,%edx\n    85c4:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 85cb <get_options+0x4b5>\n    85cb:\t48 89 c7             \tmov    %rax,%rdi\n    85ce:\te8 00 00 00 00       \tcallq  85d3 <get_options+0x4bd>\n    85d3:\t48 85 c0             \ttest   %rax,%rax\n    85d6:\t75 1d                \tjne    85f5 <get_options+0x4df>\n    85d8:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    85dc:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    85df:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    85e3:\t48 89 c6             \tmov    %rax,%rsi\n    85e6:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 85ed <get_options+0x4d7>\n    85ed:\te8 00 00 00 00       \tcallq  85f2 <get_options+0x4dc>\n    85f2:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    85f5:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    85f9:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    8600:\tba 00 00 00 00       \tmov    $0x0,%edx\n    8605:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 860c <get_options+0x4f6>\n    860c:\t48 89 c7             \tmov    %rax,%rdi\n    860f:\te8 00 00 00 00       \tcallq  8614 <get_options+0x4fe>\n    8614:\t48 85 c0             \ttest   %rax,%rax\n    8617:\t0f 85 81 00 00 00    \tjne    869e <get_options+0x588>\n    861d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8621:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    8628:\tba 00 00 00 00       \tmov    $0x0,%edx\n    862d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8634 <get_options+0x51e>\n    8634:\t48 89 c7             \tmov    %rax,%rdi\n    8637:\te8 00 00 00 00       \tcallq  863c <get_options+0x526>\n    863c:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    8640:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    8645:\t74 57                \tje     869e <get_options+0x588>\n    8647:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    864b:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    864e:\t83 f8 44             \tcmp    $0x44,%eax\n    8651:\t74 0c                \tje     865f <get_options+0x549>\n    8653:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8657:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    865a:\t83 f8 42             \tcmp    $0x42,%eax\n    865d:\t75 3f                \tjne    869e <get_options+0x588>\n    865f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8663:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n    8667:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    866b:\t48 89 d6             \tmov    %rdx,%rsi\n    866e:\t48 89 c7             \tmov    %rax,%rdi\n    8671:\te8 00 00 00 00       \tcallq  8676 <get_options+0x560>\n    8676:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    867a:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    867f:\t74 1d                \tje     869e <get_options+0x588>\n    8681:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    8685:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    8688:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    868c:\t48 89 c6             \tmov    %rax,%rsi\n    868f:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 8696 <get_options+0x580>\n    8696:\te8 00 00 00 00       \tcallq  869b <get_options+0x585>\n    869b:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    869e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    86a2:\t48 8b 80 08 01 00 00 \tmov    0x108(%rax),%rax\n    86a9:\t48 85 c0             \ttest   %rax,%rax\n    86ac:\t0f 84 2d 01 00 00    \tje     87df <get_options+0x6c9>\n    86b2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    86b6:\t48 8b 88 08 01 00 00 \tmov    0x108(%rax),%rcx\n    86bd:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    86c1:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    86c8:\tba 00 00 00 00       \tmov    $0x0,%edx\n    86cd:\t48 89 ce             \tmov    %rcx,%rsi\n    86d0:\t48 89 c7             \tmov    %rax,%rdi\n    86d3:\te8 00 00 00 00       \tcallq  86d8 <get_options+0x5c2>\n    86d8:\t48 85 c0             \ttest   %rax,%rax\n    86db:\t0f 85 fe 00 00 00    \tjne    87df <get_options+0x6c9>\n    86e1:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    86e5:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    86ec:\tba 44 00 00 00       \tmov    $0x44,%edx\n    86f1:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 86f8 <get_options+0x5e2>\n    86f8:\t48 89 c7             \tmov    %rax,%rdi\n    86fb:\te8 00 00 00 00       \tcallq  8700 <get_options+0x5ea>\n    8700:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    8704:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    8709:\t0f 84 d0 00 00 00    \tje     87df <get_options+0x6c9>\n    870f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8713:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    8717:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 871e <get_options+0x608>\n    871e:\t48 89 c7             \tmov    %rax,%rdi\n    8721:\te8 00 00 00 00       \tcallq  8726 <get_options+0x610>\n    8726:\t85 c0                \ttest   %eax,%eax\n    8728:\t75 2d                \tjne    8757 <get_options+0x641>\n    872a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    872e:\t48 8b b0 10 01 00 00 \tmov    0x110(%rax),%rsi\n    8735:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8739:\t48 8b 80 08 01 00 00 \tmov    0x108(%rax),%rax\n    8740:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    8744:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    8747:\t48 89 c7             \tmov    %rax,%rdi\n    874a:\te8 00 00 00 00       \tcallq  874f <get_options+0x639>\n    874f:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    8752:\te9 88 00 00 00       \tjmpq   87df <get_options+0x6c9>\n    8757:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    875b:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    875f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8766 <get_options+0x650>\n    8766:\t48 89 c7             \tmov    %rax,%rdi\n    8769:\te8 00 00 00 00       \tcallq  876e <get_options+0x658>\n    876e:\t85 c0                \ttest   %eax,%eax\n    8770:\t75 2a                \tjne    879c <get_options+0x686>\n    8772:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8776:\t48 8b b0 18 01 00 00 \tmov    0x118(%rax),%rsi\n    877d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8781:\t48 8b 80 08 01 00 00 \tmov    0x108(%rax),%rax\n    8788:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    878c:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    878f:\t48 89 c7             \tmov    %rax,%rdi\n    8792:\te8 00 00 00 00       \tcallq  8797 <get_options+0x681>\n    8797:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    879a:\teb 43                \tjmp    87df <get_options+0x6c9>\n    879c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    87a0:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    87a4:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 87ab <get_options+0x695>\n    87ab:\t48 89 c7             \tmov    %rax,%rdi\n    87ae:\te8 00 00 00 00       \tcallq  87b3 <get_options+0x69d>\n    87b3:\t85 c0                \ttest   %eax,%eax\n    87b5:\t75 28                \tjne    87df <get_options+0x6c9>\n    87b7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    87bb:\t48 8b b0 20 01 00 00 \tmov    0x120(%rax),%rsi\n    87c2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    87c6:\t48 8b 80 08 01 00 00 \tmov    0x108(%rax),%rax\n    87cd:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    87d1:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    87d4:\t48 89 c7             \tmov    %rax,%rdi\n    87d7:\te8 00 00 00 00       \tcallq  87dc <get_options+0x6c6>\n    87dc:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    87df:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    87e3:\t48 8b b0 d0 00 00 00 \tmov    0xd0(%rax),%rsi\n    87ea:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n    87ee:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    87f1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    87f5:\t49 89 c8             \tmov    %rcx,%r8\n    87f8:\t89 d1                \tmov    %edx,%ecx\n    87fa:\tba 03 00 00 00       \tmov    $0x3,%edx\n    87ff:\t48 89 c7             \tmov    %rax,%rdi\n    8802:\te8 00 00 00 00       \tcallq  8807 <get_options+0x6f1>\n    8807:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    880a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    880e:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    8815:\t48 89 c7             \tmov    %rax,%rdi\n    8818:\te8 ad 0b 00 00       \tcallq  93ca <ipp_length>\n    881d:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    8821:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n    8824:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n    8827:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    882b:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    882f:\teb 3e                \tjmp    886f <get_options+0x759>\n    8831:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    8835:\t48 8b 00             \tmov    (%rax),%rax\n    8838:\t48 89 c7             \tmov    %rax,%rdi\n    883b:\te8 00 00 00 00       \tcallq  8840 <get_options+0x72a>\n    8840:\t48 89 c3             \tmov    %rax,%rbx\n    8843:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    8847:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    884b:\t48 89 c7             \tmov    %rax,%rdi\n    884e:\te8 00 00 00 00       \tcallq  8853 <get_options+0x73d>\n    8853:\t48 8d 14 03          \tlea    (%rbx,%rax,1),%rdx\n    8857:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    885b:\t48 01 d0             \tadd    %rdx,%rax\n    885e:\t48 83 c0 02          \tadd    $0x2,%rax\n    8862:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    8866:\t83 6d 98 01          \tsubl   $0x1,-0x68(%rbp)\n    886a:\t48 83 45 d0 10       \taddq   $0x10,-0x30(%rbp)\n    886f:\t83 7d 98 00          \tcmpl   $0x0,-0x68(%rbp)\n    8873:\t7f bc                \tjg     8831 <get_options+0x71b>\n    8875:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n    887a:\t75 08                \tjne    8884 <get_options+0x76e>\n    887c:\t48 c7 45 b0 01 00 00 \tmovq   $0x1,-0x50(%rbp)\n    8883:\t00 \n    8884:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 888b <get_options+0x775>\n    888b:\t48 39 45 b0          \tcmp    %rax,-0x50(%rbp)\n    888f:\t77 10                \tja     88a1 <get_options+0x78b>\n    8891:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8898 <get_options+0x782>\n    8898:\t48 85 c0             \ttest   %rax,%rax\n    889b:\t0f 85 83 00 00 00    \tjne    8924 <get_options+0x80e>\n    88a1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 88a8 <get_options+0x792>\n    88a8:\t48 85 c0             \ttest   %rax,%rax\n    88ab:\t75 12                \tjne    88bf <get_options+0x7a9>\n    88ad:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    88b1:\t48 89 c7             \tmov    %rax,%rdi\n    88b4:\te8 00 00 00 00       \tcallq  88b9 <get_options+0x7a3>\n    88b9:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    88bd:\teb 1a                \tjmp    88d9 <get_options+0x7c3>\n    88bf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 88c6 <get_options+0x7b0>\n    88c6:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n    88ca:\t48 89 d6             \tmov    %rdx,%rsi\n    88cd:\t48 89 c7             \tmov    %rax,%rdi\n    88d0:\te8 00 00 00 00       \tcallq  88d5 <get_options+0x7bf>\n    88d5:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    88d9:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n    88de:\t75 2e                \tjne    890e <get_options+0x7f8>\n    88e0:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n    88e4:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    88e8:\t48 89 d1             \tmov    %rdx,%rcx\n    88eb:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 88f2 <get_options+0x7dc>\n    88f2:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    88f7:\t48 89 c7             \tmov    %rax,%rdi\n    88fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    88ff:\te8 00 00 00 00       \tcallq  8904 <get_options+0x7ee>\n    8904:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    8909:\te9 b2 0a 00 00       \tjmpq   93c0 <get_options+0x12aa>\n    890e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    8912:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 8919 <get_options+0x803>\n    8919:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    891d:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 8924 <get_options+0x80e>\n    8924:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 892b <get_options+0x815>\n    892b:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    892f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    8933:\tc6 00 00             \tmovb   $0x0,(%rax)\n    8936:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    893a:\t8b 08                \tmov    (%rax),%ecx\n    893c:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8940:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    8944:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    8948:\t48 8b b5 60 ff ff ff \tmov    -0xa0(%rbp),%rsi\n    894f:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    8956:\t41 89 c8             \tmov    %ecx,%r8d\n    8959:\t48 89 d1             \tmov    %rdx,%rcx\n    895c:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 8963 <get_options+0x84d>\n    8963:\t48 89 c7             \tmov    %rax,%rdi\n    8966:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    896b:\te8 00 00 00 00       \tcallq  8970 <get_options+0x85a>\n    8970:\t48 8b 95 70 ff ff ff \tmov    -0x90(%rbp),%rdx\n    8977:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    897e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8985 <get_options+0x86f>\n    8985:\t48 89 c7             \tmov    %rax,%rdi\n    8988:\te8 00 00 00 00       \tcallq  898d <get_options+0x877>\n    898d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8991:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n    8998:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    899c:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    89a0:\te9 2b 09 00 00       \tjmpq   92d0 <get_options+0x11ba>\n    89a5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    89a9:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    89ad:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 89b4 <get_options+0x89e>\n    89b4:\t48 89 c7             \tmov    %rax,%rdi\n    89b7:\te8 00 00 00 00       \tcallq  89bc <get_options+0x8a6>\n    89bc:\t85 c0                \ttest   %eax,%eax\n    89be:\t75 46                \tjne    8a06 <get_options+0x8f0>\n    89c0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    89c4:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    89c7:\t83 f8 21             \tcmp    $0x21,%eax\n    89ca:\t75 3a                \tjne    8a06 <get_options+0x8f0>\n    89cc:\t83 7d 84 00          \tcmpl   $0x0,-0x7c(%rbp)\n    89d0:\t0f 85 ef 08 00 00    \tjne    92c5 <get_options+0x11af>\n    89d6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    89da:\t8b 50 20             \tmov    0x20(%rax),%edx\n    89dd:\t48 8b b5 70 ff ff ff \tmov    -0x90(%rbp),%rsi\n    89e4:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    89eb:\t89 d1                \tmov    %edx,%ecx\n    89ed:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 89f4 <get_options+0x8de>\n    89f4:\t48 89 c7             \tmov    %rax,%rdi\n    89f7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    89fc:\te8 00 00 00 00       \tcallq  8a01 <get_options+0x8eb>\n    8a01:\te9 bf 08 00 00       \tjmpq   92c5 <get_options+0x11af>\n    8a06:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8a0a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8a0e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8a15 <get_options+0x8ff>\n    8a15:\t48 89 c7             \tmov    %rax,%rdi\n    8a18:\te8 00 00 00 00       \tcallq  8a1d <get_options+0x907>\n    8a1d:\t85 c0                \ttest   %eax,%eax\n    8a1f:\t75 3e                \tjne    8a5f <get_options+0x949>\n    8a21:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8a25:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8a28:\t83 f8 42             \tcmp    $0x42,%eax\n    8a2b:\t74 0c                \tje     8a39 <get_options+0x923>\n    8a2d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8a31:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8a34:\t83 f8 36             \tcmp    $0x36,%eax\n    8a37:\t75 26                \tjne    8a5f <get_options+0x949>\n    8a39:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8a3d:\t48 8b 48 28          \tmov    0x28(%rax),%rcx\n    8a41:\t48 8b 95 60 ff ff ff \tmov    -0xa0(%rbp),%rdx\n    8a48:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    8a4f:\t48 89 ce             \tmov    %rcx,%rsi\n    8a52:\t48 89 c7             \tmov    %rax,%rdi\n    8a55:\te8 00 00 00 00       \tcallq  8a5a <get_options+0x944>\n    8a5a:\te9 66 08 00 00       \tjmpq   92c5 <get_options+0x11af>\n    8a5f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8a63:\t8b 40 08             \tmov    0x8(%rax),%eax\n    8a66:\t83 f8 02             \tcmp    $0x2,%eax\n    8a69:\t0f 85 56 08 00 00    \tjne    92c5 <get_options+0x11af>\n    8a6f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8a73:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8a76:\t83 f8 13             \tcmp    $0x13,%eax\n    8a79:\t0f 84 3c 08 00 00    \tje     92bb <get_options+0x11a5>\n    8a7f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8a83:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8a86:\t83 f8 49             \tcmp    $0x49,%eax\n    8a89:\t0f 84 2c 08 00 00    \tje     92bb <get_options+0x11a5>\n    8a8f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8a93:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8a96:\t83 f8 36             \tcmp    $0x36,%eax\n    8a99:\t0f 84 1c 08 00 00    \tje     92bb <get_options+0x11a5>\n    8a9f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8aa3:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8aa6:\t83 f8 35             \tcmp    $0x35,%eax\n    8aa9:\t0f 84 0c 08 00 00    \tje     92bb <get_options+0x11a5>\n    8aaf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8ab3:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8ab6:\t83 f8 45             \tcmp    $0x45,%eax\n    8ab9:\t75 3a                \tjne    8af5 <get_options+0x9df>\n    8abb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8abf:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8ac3:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8aca <get_options+0x9b4>\n    8aca:\t48 89 c7             \tmov    %rax,%rdi\n    8acd:\te8 00 00 00 00       \tcallq  8ad2 <get_options+0x9bc>\n    8ad2:\t85 c0                \ttest   %eax,%eax\n    8ad4:\t74 1f                \tje     8af5 <get_options+0x9df>\n    8ad6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8ada:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8ade:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8ae5 <get_options+0x9cf>\n    8ae5:\t48 89 c7             \tmov    %rax,%rdi\n    8ae8:\te8 00 00 00 00       \tcallq  8aed <get_options+0x9d7>\n    8aed:\t85 c0                \ttest   %eax,%eax\n    8aef:\t0f 85 c6 07 00 00    \tjne    92bb <get_options+0x11a5>\n    8af5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8af9:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8afc:\t83 f8 46             \tcmp    $0x46,%eax\n    8aff:\t0f 84 b6 07 00 00    \tje     92bb <get_options+0x11a5>\n    8b05:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8b09:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8b0c:\t83 f8 34             \tcmp    $0x34,%eax\n    8b0f:\t0f 84 a6 07 00 00    \tje     92bb <get_options+0x11a5>\n    8b15:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8b19:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8b1d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8b24 <get_options+0xa0e>\n    8b24:\t48 89 c7             \tmov    %rax,%rdi\n    8b27:\te8 00 00 00 00       \tcallq  8b2c <get_options+0xa16>\n    8b2c:\t85 c0                \ttest   %eax,%eax\n    8b2e:\t0f 84 8a 07 00 00    \tje     92be <get_options+0x11a8>\n    8b34:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8b38:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8b3c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8b43 <get_options+0xa2d>\n    8b43:\t48 89 c7             \tmov    %rax,%rdi\n    8b46:\te8 00 00 00 00       \tcallq  8b4b <get_options+0xa35>\n    8b4b:\t85 c0                \ttest   %eax,%eax\n    8b4d:\t0f 84 6b 07 00 00    \tje     92be <get_options+0x11a8>\n    8b53:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8b57:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8b5b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8b62 <get_options+0xa4c>\n    8b62:\t48 89 c7             \tmov    %rax,%rdi\n    8b65:\te8 00 00 00 00       \tcallq  8b6a <get_options+0xa54>\n    8b6a:\t85 c0                \ttest   %eax,%eax\n    8b6c:\t0f 84 4c 07 00 00    \tje     92be <get_options+0x11a8>\n    8b72:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8b76:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8b7a:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8b81 <get_options+0xa6b>\n    8b81:\t48 89 c7             \tmov    %rax,%rdi\n    8b84:\te8 00 00 00 00       \tcallq  8b89 <get_options+0xa73>\n    8b89:\t85 c0                \ttest   %eax,%eax\n    8b8b:\t0f 84 2d 07 00 00    \tje     92be <get_options+0x11a8>\n    8b91:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8b95:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8b99:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8ba0 <get_options+0xa8a>\n    8ba0:\t48 89 c7             \tmov    %rax,%rdi\n    8ba3:\te8 00 00 00 00       \tcallq  8ba8 <get_options+0xa92>\n    8ba8:\t85 c0                \ttest   %eax,%eax\n    8baa:\t0f 84 0e 07 00 00    \tje     92be <get_options+0x11a8>\n    8bb0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8bb4:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8bb8:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8bbf <get_options+0xaa9>\n    8bbf:\t48 89 c7             \tmov    %rax,%rdi\n    8bc2:\te8 00 00 00 00       \tcallq  8bc7 <get_options+0xab1>\n    8bc7:\t85 c0                \ttest   %eax,%eax\n    8bc9:\t0f 84 ef 06 00 00    \tje     92be <get_options+0x11a8>\n    8bcf:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8bd3:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8bd7:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8bde <get_options+0xac8>\n    8bde:\t48 89 c7             \tmov    %rax,%rdi\n    8be1:\te8 00 00 00 00       \tcallq  8be6 <get_options+0xad0>\n    8be6:\t85 c0                \ttest   %eax,%eax\n    8be8:\t0f 84 d0 06 00 00    \tje     92be <get_options+0x11a8>\n    8bee:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8bf2:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8bf6:\tba 04 00 00 00       \tmov    $0x4,%edx\n    8bfb:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8c02 <get_options+0xaec>\n    8c02:\t48 89 c7             \tmov    %rax,%rdi\n    8c05:\te8 00 00 00 00       \tcallq  8c0a <get_options+0xaf4>\n    8c0a:\t85 c0                \ttest   %eax,%eax\n    8c0c:\t0f 85 20 01 00 00    \tjne    8d32 <get_options+0xc1c>\n    8c12:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8c16:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8c1a:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8c21 <get_options+0xb0b>\n    8c21:\t48 89 c7             \tmov    %rax,%rdi\n    8c24:\te8 00 00 00 00       \tcallq  8c29 <get_options+0xb13>\n    8c29:\t85 c0                \ttest   %eax,%eax\n    8c2b:\t0f 84 01 01 00 00    \tje     8d32 <get_options+0xc1c>\n    8c31:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8c35:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8c39:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8c40 <get_options+0xb2a>\n    8c40:\t48 89 c7             \tmov    %rax,%rdi\n    8c43:\te8 00 00 00 00       \tcallq  8c48 <get_options+0xb32>\n    8c48:\t85 c0                \ttest   %eax,%eax\n    8c4a:\t0f 84 e2 00 00 00    \tje     8d32 <get_options+0xc1c>\n    8c50:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8c54:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8c58:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8c5f <get_options+0xb49>\n    8c5f:\t48 89 c7             \tmov    %rax,%rdi\n    8c62:\te8 00 00 00 00       \tcallq  8c67 <get_options+0xb51>\n    8c67:\t85 c0                \ttest   %eax,%eax\n    8c69:\t0f 84 c3 00 00 00    \tje     8d32 <get_options+0xc1c>\n    8c6f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8c73:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8c77:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8c7e <get_options+0xb68>\n    8c7e:\t48 89 c7             \tmov    %rax,%rdi\n    8c81:\te8 00 00 00 00       \tcallq  8c86 <get_options+0xb70>\n    8c86:\t85 c0                \ttest   %eax,%eax\n    8c88:\t0f 84 a4 00 00 00    \tje     8d32 <get_options+0xc1c>\n    8c8e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8c92:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8c96:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8c9d <get_options+0xb87>\n    8c9d:\t48 89 c7             \tmov    %rax,%rdi\n    8ca0:\te8 00 00 00 00       \tcallq  8ca5 <get_options+0xb8f>\n    8ca5:\t85 c0                \ttest   %eax,%eax\n    8ca7:\t0f 84 85 00 00 00    \tje     8d32 <get_options+0xc1c>\n    8cad:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8cb1:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8cb5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8cbc <get_options+0xba6>\n    8cbc:\t48 89 c7             \tmov    %rax,%rdi\n    8cbf:\te8 00 00 00 00       \tcallq  8cc4 <get_options+0xbae>\n    8cc4:\t85 c0                \ttest   %eax,%eax\n    8cc6:\t74 6a                \tje     8d32 <get_options+0xc1c>\n    8cc8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8ccc:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8cd0:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8cd7 <get_options+0xbc1>\n    8cd7:\t48 89 c7             \tmov    %rax,%rdi\n    8cda:\te8 00 00 00 00       \tcallq  8cdf <get_options+0xbc9>\n    8cdf:\t85 c0                \ttest   %eax,%eax\n    8ce1:\t74 4f                \tje     8d32 <get_options+0xc1c>\n    8ce3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8ce7:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8ceb:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8cf2 <get_options+0xbdc>\n    8cf2:\t48 89 c7             \tmov    %rax,%rdi\n    8cf5:\te8 00 00 00 00       \tcallq  8cfa <get_options+0xbe4>\n    8cfa:\t85 c0                \ttest   %eax,%eax\n    8cfc:\t74 34                \tje     8d32 <get_options+0xc1c>\n    8cfe:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8d02:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8d06:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8d0d <get_options+0xbf7>\n    8d0d:\t48 89 c7             \tmov    %rax,%rdi\n    8d10:\te8 00 00 00 00       \tcallq  8d15 <get_options+0xbff>\n    8d15:\t85 c0                \ttest   %eax,%eax\n    8d17:\t74 19                \tje     8d32 <get_options+0xc1c>\n    8d19:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    8d1d:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    8d21:\t8b 80 80 06 00 00    \tmov    0x680(%rax),%eax\n    8d27:\t83 e0 02             \tand    $0x2,%eax\n    8d2a:\t85 c0                \ttest   %eax,%eax\n    8d2c:\t0f 84 8f 05 00 00    \tje     92c1 <get_options+0x11ab>\n    8d32:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8d36:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8d3a:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8d41 <get_options+0xc2b>\n    8d41:\t48 89 c7             \tmov    %rax,%rdi\n    8d44:\te8 00 00 00 00       \tcallq  8d49 <get_options+0xc33>\n    8d49:\t85 c0                \ttest   %eax,%eax\n    8d4b:\t0f 84 08 01 00 00    \tje     8e59 <get_options+0xd43>\n    8d51:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8d55:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8d59:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8d60 <get_options+0xc4a>\n    8d60:\t48 89 c7             \tmov    %rax,%rdi\n    8d63:\te8 00 00 00 00       \tcallq  8d68 <get_options+0xc52>\n    8d68:\t85 c0                \ttest   %eax,%eax\n    8d6a:\t0f 84 e9 00 00 00    \tje     8e59 <get_options+0xd43>\n    8d70:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8d74:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8d78:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8d7f <get_options+0xc69>\n    8d7f:\t48 89 c7             \tmov    %rax,%rdi\n    8d82:\te8 00 00 00 00       \tcallq  8d87 <get_options+0xc71>\n    8d87:\t85 c0                \ttest   %eax,%eax\n    8d89:\t0f 84 ca 00 00 00    \tje     8e59 <get_options+0xd43>\n    8d8f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8d93:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8d97:\tba 09 00 00 00       \tmov    $0x9,%edx\n    8d9c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8da3 <get_options+0xc8d>\n    8da3:\t48 89 c7             \tmov    %rax,%rdi\n    8da6:\te8 00 00 00 00       \tcallq  8dab <get_options+0xc95>\n    8dab:\t85 c0                \ttest   %eax,%eax\n    8dad:\t0f 84 a6 00 00 00    \tje     8e59 <get_options+0xd43>\n    8db3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8db7:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8dbb:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8dc2 <get_options+0xcac>\n    8dc2:\t48 89 c7             \tmov    %rax,%rdi\n    8dc5:\te8 00 00 00 00       \tcallq  8dca <get_options+0xcb4>\n    8dca:\t85 c0                \ttest   %eax,%eax\n    8dcc:\t0f 84 87 00 00 00    \tje     8e59 <get_options+0xd43>\n    8dd2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8dd6:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8dda:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8de1 <get_options+0xccb>\n    8de1:\t48 89 c7             \tmov    %rax,%rdi\n    8de4:\te8 00 00 00 00       \tcallq  8de9 <get_options+0xcd3>\n    8de9:\t85 c0                \ttest   %eax,%eax\n    8deb:\t74 6c                \tje     8e59 <get_options+0xd43>\n    8ded:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8df1:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8df5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8dfc <get_options+0xce6>\n    8dfc:\t48 89 c7             \tmov    %rax,%rdi\n    8dff:\te8 00 00 00 00       \tcallq  8e04 <get_options+0xcee>\n    8e04:\t85 c0                \ttest   %eax,%eax\n    8e06:\t74 51                \tje     8e59 <get_options+0xd43>\n    8e08:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8e0c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8e10:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8e17 <get_options+0xd01>\n    8e17:\t48 89 c7             \tmov    %rax,%rdi\n    8e1a:\te8 00 00 00 00       \tcallq  8e1f <get_options+0xd09>\n    8e1f:\t85 c0                \ttest   %eax,%eax\n    8e21:\t74 36                \tje     8e59 <get_options+0xd43>\n    8e23:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8e27:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8e2b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8e32 <get_options+0xd1c>\n    8e32:\t48 89 c7             \tmov    %rax,%rdi\n    8e35:\te8 00 00 00 00       \tcallq  8e3a <get_options+0xd24>\n    8e3a:\t85 c0                \ttest   %eax,%eax\n    8e3c:\t74 1b                \tje     8e59 <get_options+0xd43>\n    8e3e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8e42:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    8e46:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8e4d <get_options+0xd37>\n    8e4d:\t48 89 c7             \tmov    %rax,%rdi\n    8e50:\te8 00 00 00 00       \tcallq  8e55 <get_options+0xd3f>\n    8e55:\t85 c0                \ttest   %eax,%eax\n    8e57:\t75 0a                \tjne    8e63 <get_options+0xd4d>\n    8e59:\t83 7d 84 00          \tcmpl   $0x0,-0x7c(%rbp)\n    8e5d:\t0f 85 61 04 00 00    \tjne    92c4 <get_options+0x11ae>\n    8e63:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8e6a <get_options+0xd54>\n    8e6a:\t48 39 45 b8          \tcmp    %rax,-0x48(%rbp)\n    8e6e:\t76 31                \tjbe    8ea1 <get_options+0xd8b>\n    8e70:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8e77 <get_options+0xd61>\n    8e77:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 8e7e <get_options+0xd68>\n    8e7e:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    8e82:\t48 29 d1             \tsub    %rdx,%rcx\n    8e85:\t48 89 ca             \tmov    %rcx,%rdx\n    8e88:\t48 29 d0             \tsub    %rdx,%rax\n    8e8b:\t48 89 c2             \tmov    %rax,%rdx\n    8e8e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    8e92:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8e99 <get_options+0xd83>\n    8e99:\t48 89 c7             \tmov    %rax,%rdi\n    8e9c:\te8 00 00 00 00       \tcallq  8ea1 <get_options+0xd8b>\n    8ea1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8ea5:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8ea8:\t83 f8 22             \tcmp    $0x22,%eax\n    8eab:\t74 66                \tje     8f13 <get_options+0xdfd>\n    8ead:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8eb4 <get_options+0xd9e>\n    8eb4:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 8ebb <get_options+0xda5>\n    8ebb:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    8ebf:\t48 29 d1             \tsub    %rdx,%rcx\n    8ec2:\t48 89 ca             \tmov    %rcx,%rdx\n    8ec5:\t48 29 d0             \tsub    %rdx,%rax\n    8ec8:\t48 89 c2             \tmov    %rax,%rdx\n    8ecb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8ecf:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n    8ed3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    8ed7:\t48 89 ce             \tmov    %rcx,%rsi\n    8eda:\t48 89 c7             \tmov    %rax,%rdi\n    8edd:\te8 00 00 00 00       \tcallq  8ee2 <get_options+0xdcc>\n    8ee2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8ee9 <get_options+0xdd3>\n    8ee9:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 8ef0 <get_options+0xdda>\n    8ef0:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    8ef4:\t48 29 d1             \tsub    %rdx,%rcx\n    8ef7:\t48 89 ca             \tmov    %rcx,%rdx\n    8efa:\t48 29 d0             \tsub    %rdx,%rax\n    8efd:\t48 89 c2             \tmov    %rax,%rdx\n    8f00:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    8f04:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8f0b <get_options+0xdf5>\n    8f0b:\t48 89 c7             \tmov    %rax,%rdi\n    8f0e:\te8 00 00 00 00       \tcallq  8f13 <get_options+0xdfd>\n    8f13:\tc7 45 98 00 00 00 00 \tmovl   $0x0,-0x68(%rbp)\n    8f1a:\te9 7a 03 00 00       \tjmpq   9299 <get_options+0x1183>\n    8f1f:\t83 7d 98 00          \tcmpl   $0x0,-0x68(%rbp)\n    8f23:\t74 31                \tje     8f56 <get_options+0xe40>\n    8f25:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8f2c <get_options+0xe16>\n    8f2c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 8f33 <get_options+0xe1d>\n    8f33:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    8f37:\t48 29 d1             \tsub    %rdx,%rcx\n    8f3a:\t48 89 ca             \tmov    %rcx,%rdx\n    8f3d:\t48 29 d0             \tsub    %rdx,%rax\n    8f40:\t48 89 c2             \tmov    %rax,%rdx\n    8f43:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    8f47:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8f4e <get_options+0xe38>\n    8f4e:\t48 89 c7             \tmov    %rax,%rdi\n    8f51:\te8 00 00 00 00       \tcallq  8f56 <get_options+0xe40>\n    8f56:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    8f5a:\t48 89 c7             \tmov    %rax,%rdi\n    8f5d:\te8 00 00 00 00       \tcallq  8f62 <get_options+0xe4c>\n    8f62:\t48 01 45 b8          \tadd    %rax,-0x48(%rbp)\n    8f66:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8f6a:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    8f6d:\t83 e8 21             \tsub    $0x21,%eax\n    8f70:\t83 f8 27             \tcmp    $0x27,%eax\n    8f73:\t0f 87 1b 03 00 00    \tja     9294 <get_options+0x117e>\n    8f79:\t89 c0                \tmov    %eax,%eax\n    8f7b:\t48 8d 14 85 00 00 00 \tlea    0x0(,%rax,4),%rdx\n    8f82:\t00 \n    8f83:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 8f8a <get_options+0xe74>\n    8f8a:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n    8f8d:\t48 98                \tcltq   \n    8f8f:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 8f96 <get_options+0xe80>\n    8f96:\t48 01 d0             \tadd    %rdx,%rax\n    8f99:\tff e0                \tjmpq   *%rax\n    8f9b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8f9f:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n    8fa2:\t48 63 d2             \tmovslq %edx,%rdx\n    8fa5:\t48 83 c2 02          \tadd    $0x2,%rdx\n    8fa9:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    8fad:\t48 01 d0             \tadd    %rdx,%rax\n    8fb0:\t8b 10                \tmov    (%rax),%edx\n    8fb2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8fb9 <get_options+0xea3>\n    8fb9:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 8fc0 <get_options+0xeaa>\n    8fc0:\t48 8b 75 b8          \tmov    -0x48(%rbp),%rsi\n    8fc4:\t48 29 ce             \tsub    %rcx,%rsi\n    8fc7:\t48 89 f1             \tmov    %rsi,%rcx\n    8fca:\t48 29 c8             \tsub    %rcx,%rax\n    8fcd:\t48 89 c6             \tmov    %rax,%rsi\n    8fd0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    8fd4:\t89 d1                \tmov    %edx,%ecx\n    8fd6:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 8fdd <get_options+0xec7>\n    8fdd:\t48 89 c7             \tmov    %rax,%rdi\n    8fe0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    8fe5:\te8 00 00 00 00       \tcallq  8fea <get_options+0xed4>\n    8fea:\te9 a6 02 00 00       \tjmpq   9295 <get_options+0x117f>\n    8fef:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    8ff3:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n    8ff6:\t48 63 d2             \tmovslq %edx,%rdx\n    8ff9:\t48 83 c2 02          \tadd    $0x2,%rdx\n    8ffd:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    9001:\t48 01 d0             \tadd    %rdx,%rax\n    9004:\t0f b6 00             \tmovzbl (%rax),%eax\n    9007:\t84 c0                \ttest   %al,%al\n    9009:\t75 31                \tjne    903c <get_options+0xf26>\n    900b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9012 <get_options+0xefc>\n    9012:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 9019 <get_options+0xf03>\n    9019:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    901d:\t48 29 d1             \tsub    %rdx,%rcx\n    9020:\t48 89 ca             \tmov    %rcx,%rdx\n    9023:\t48 29 d0             \tsub    %rdx,%rax\n    9026:\t48 89 c2             \tmov    %rax,%rdx\n    9029:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    902d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 9034 <get_options+0xf1e>\n    9034:\t48 89 c7             \tmov    %rax,%rdi\n    9037:\te8 00 00 00 00       \tcallq  903c <get_options+0xf26>\n    903c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9043 <get_options+0xf2d>\n    9043:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 904a <get_options+0xf34>\n    904a:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    904e:\t48 29 d1             \tsub    %rdx,%rcx\n    9051:\t48 89 ca             \tmov    %rcx,%rdx\n    9054:\t48 29 d0             \tsub    %rdx,%rax\n    9057:\t48 89 c2             \tmov    %rax,%rdx\n    905a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    905e:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n    9062:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9066:\t48 89 ce             \tmov    %rcx,%rsi\n    9069:\t48 89 c7             \tmov    %rax,%rdi\n    906c:\te8 00 00 00 00       \tcallq  9071 <get_options+0xf5b>\n    9071:\te9 1f 02 00 00       \tjmpq   9295 <get_options+0x117f>\n    9076:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    907a:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n    907d:\t48 63 d2             \tmovslq %edx,%rdx\n    9080:\t48 83 c2 02          \tadd    $0x2,%rdx\n    9084:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    9088:\t48 01 d0             \tadd    %rdx,%rax\n    908b:\t8b 10                \tmov    (%rax),%edx\n    908d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    9091:\t8b 4d 98             \tmov    -0x68(%rbp),%ecx\n    9094:\t48 63 c9             \tmovslq %ecx,%rcx\n    9097:\t48 83 c1 02          \tadd    $0x2,%rcx\n    909b:\t48 c1 e1 04          \tshl    $0x4,%rcx\n    909f:\t48 01 c8             \tadd    %rcx,%rax\n    90a2:\t48 83 c0 04          \tadd    $0x4,%rax\n    90a6:\t8b 00                \tmov    (%rax),%eax\n    90a8:\t39 c2                \tcmp    %eax,%edx\n    90aa:\t75 55                \tjne    9101 <get_options+0xfeb>\n    90ac:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    90b0:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n    90b3:\t48 63 d2             \tmovslq %edx,%rdx\n    90b6:\t48 83 c2 02          \tadd    $0x2,%rdx\n    90ba:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    90be:\t48 01 d0             \tadd    %rdx,%rax\n    90c1:\t8b 10                \tmov    (%rax),%edx\n    90c3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 90ca <get_options+0xfb4>\n    90ca:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 90d1 <get_options+0xfbb>\n    90d1:\t48 8b 75 b8          \tmov    -0x48(%rbp),%rsi\n    90d5:\t48 29 ce             \tsub    %rcx,%rsi\n    90d8:\t48 89 f1             \tmov    %rsi,%rcx\n    90db:\t48 29 c8             \tsub    %rcx,%rax\n    90de:\t48 8d 70 ff          \tlea    -0x1(%rax),%rsi\n    90e2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    90e6:\t89 d1                \tmov    %edx,%ecx\n    90e8:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 90ef <get_options+0xfd9>\n    90ef:\t48 89 c7             \tmov    %rax,%rdi\n    90f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    90f7:\te8 00 00 00 00       \tcallq  90fc <get_options+0xfe6>\n    90fc:\te9 94 01 00 00       \tjmpq   9295 <get_options+0x117f>\n    9101:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    9105:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n    9108:\t48 63 d2             \tmovslq %edx,%rdx\n    910b:\t48 83 c2 02          \tadd    $0x2,%rdx\n    910f:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    9113:\t48 01 d0             \tadd    %rdx,%rax\n    9116:\t48 83 c0 04          \tadd    $0x4,%rax\n    911a:\t8b 38                \tmov    (%rax),%edi\n    911c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    9120:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n    9123:\t48 63 d2             \tmovslq %edx,%rdx\n    9126:\t48 83 c2 02          \tadd    $0x2,%rdx\n    912a:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    912e:\t48 01 d0             \tadd    %rdx,%rax\n    9131:\t8b 10                \tmov    (%rax),%edx\n    9133:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 913a <get_options+0x1024>\n    913a:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 9141 <get_options+0x102b>\n    9141:\t48 8b 75 b8          \tmov    -0x48(%rbp),%rsi\n    9145:\t48 29 ce             \tsub    %rcx,%rsi\n    9148:\t48 89 f1             \tmov    %rsi,%rcx\n    914b:\t48 29 c8             \tsub    %rcx,%rax\n    914e:\t48 8d 70 ff          \tlea    -0x1(%rax),%rsi\n    9152:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9156:\t41 89 f8             \tmov    %edi,%r8d\n    9159:\t89 d1                \tmov    %edx,%ecx\n    915b:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 9162 <get_options+0x104c>\n    9162:\t48 89 c7             \tmov    %rax,%rdi\n    9165:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    916a:\te8 00 00 00 00       \tcallq  916f <get_options+0x1059>\n    916f:\te9 21 01 00 00       \tjmpq   9295 <get_options+0x117f>\n    9174:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    9178:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n    917b:\t48 63 d2             \tmovslq %edx,%rdx\n    917e:\t48 83 c2 02          \tadd    $0x2,%rdx\n    9182:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    9186:\t48 01 d0             \tadd    %rdx,%rax\n    9189:\t48 83 c0 08          \tadd    $0x8,%rax\n    918d:\t8b 00                \tmov    (%rax),%eax\n    918f:\t83 f8 03             \tcmp    $0x3,%eax\n    9192:\t75 09                \tjne    919d <get_options+0x1087>\n    9194:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 919b <get_options+0x1085>\n    919b:\teb 07                \tjmp    91a4 <get_options+0x108e>\n    919d:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 91a4 <get_options+0x108e>\n    91a4:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    91a8:\t8b 4d 98             \tmov    -0x68(%rbp),%ecx\n    91ab:\t48 63 c9             \tmovslq %ecx,%rcx\n    91ae:\t48 83 c1 02          \tadd    $0x2,%rcx\n    91b2:\t48 c1 e1 04          \tshl    $0x4,%rcx\n    91b6:\t48 01 ca             \tadd    %rcx,%rdx\n    91b9:\t48 83 c2 04          \tadd    $0x4,%rdx\n    91bd:\t44 8b 02             \tmov    (%rdx),%r8d\n    91c0:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    91c4:\t8b 4d 98             \tmov    -0x68(%rbp),%ecx\n    91c7:\t48 63 c9             \tmovslq %ecx,%rcx\n    91ca:\t48 83 c1 02          \tadd    $0x2,%rcx\n    91ce:\t48 c1 e1 04          \tshl    $0x4,%rcx\n    91d2:\t48 01 ca             \tadd    %rcx,%rdx\n    91d5:\t8b 12                \tmov    (%rdx),%edx\n    91d7:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 91de <get_options+0x10c8>\n    91de:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 91e5 <get_options+0x10cf>\n    91e5:\t48 8b 7d b8          \tmov    -0x48(%rbp),%rdi\n    91e9:\t48 29 f7             \tsub    %rsi,%rdi\n    91ec:\t48 89 fe             \tmov    %rdi,%rsi\n    91ef:\t48 29 f1             \tsub    %rsi,%rcx\n    91f2:\t48 8d 71 ff          \tlea    -0x1(%rcx),%rsi\n    91f6:\t48 8b 7d b8          \tmov    -0x48(%rbp),%rdi\n    91fa:\t49 89 c1             \tmov    %rax,%r9\n    91fd:\t89 d1                \tmov    %edx,%ecx\n    91ff:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 9206 <get_options+0x10f0>\n    9206:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    920b:\te8 00 00 00 00       \tcallq  9210 <get_options+0x10fa>\n    9210:\te9 80 00 00 00       \tjmpq   9295 <get_options+0x117f>\n    9215:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    9219:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n    921c:\t48 63 d2             \tmovslq %edx,%rdx\n    921f:\t48 83 c2 02          \tadd    $0x2,%rdx\n    9223:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    9227:\t48 01 d0             \tadd    %rdx,%rax\n    922a:\t48 83 c0 08          \tadd    $0x8,%rax\n    922e:\t48 8b 00             \tmov    (%rax),%rax\n    9231:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    9235:\teb 49                \tjmp    9280 <get_options+0x116a>\n    9237:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    923b:\t0f b6 00             \tmovzbl (%rax),%eax\n    923e:\t0f be c0             \tmovsbl %al,%eax\n    9241:\t89 c6                \tmov    %eax,%esi\n    9243:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 924a <get_options+0x1134>\n    924a:\te8 00 00 00 00       \tcallq  924f <get_options+0x1139>\n    924f:\t48 85 c0             \ttest   %rax,%rax\n    9252:\t74 0f                \tje     9263 <get_options+0x114d>\n    9254:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9258:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    925c:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    9260:\tc6 00 5c             \tmovb   $0x5c,(%rax)\n    9263:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    9267:\t48 8d 42 01          \tlea    0x1(%rdx),%rax\n    926b:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    926f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9273:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n    9277:\t48 89 4d b8          \tmov    %rcx,-0x48(%rbp)\n    927b:\t0f b6 12             \tmovzbl (%rdx),%edx\n    927e:\t88 10                \tmov    %dl,(%rax)\n    9280:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    9284:\t0f b6 00             \tmovzbl (%rax),%eax\n    9287:\t84 c0                \ttest   %al,%al\n    9289:\t75 ac                \tjne    9237 <get_options+0x1121>\n    928b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    928f:\tc6 00 00             \tmovb   $0x0,(%rax)\n    9292:\teb 01                \tjmp    9295 <get_options+0x117f>\n    9294:\t90                   \tnop\n    9295:\t83 45 98 01          \taddl   $0x1,-0x68(%rbp)\n    9299:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    929d:\t8b 40 18             \tmov    0x18(%rax),%eax\n    92a0:\t39 45 98             \tcmp    %eax,-0x68(%rbp)\n    92a3:\t0f 8c 76 fc ff ff    \tjl     8f1f <get_options+0xe09>\n    92a9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    92ad:\t48 89 c7             \tmov    %rax,%rdi\n    92b0:\te8 00 00 00 00       \tcallq  92b5 <get_options+0x119f>\n    92b5:\t48 01 45 b8          \tadd    %rax,-0x48(%rbp)\n    92b9:\teb 0a                \tjmp    92c5 <get_options+0x11af>\n    92bb:\t90                   \tnop\n    92bc:\teb 07                \tjmp    92c5 <get_options+0x11af>\n    92be:\t90                   \tnop\n    92bf:\teb 04                \tjmp    92c5 <get_options+0x11af>\n    92c1:\t90                   \tnop\n    92c2:\teb 01                \tjmp    92c5 <get_options+0x11af>\n    92c4:\t90                   \tnop\n    92c5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    92c9:\t48 8b 00             \tmov    (%rax),%rax\n    92cc:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    92d0:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    92d5:\t0f 85 ca f6 ff ff    \tjne    89a5 <get_options+0x88f>\n    92db:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n    92de:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n    92e1:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    92e5:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    92e9:\te9 b0 00 00 00       \tjmpq   939e <get_options+0x1288>\n    92ee:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    92f2:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    92f6:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    92fa:\tc6 00 20             \tmovb   $0x20,(%rax)\n    92fd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9304 <get_options+0x11ee>\n    9304:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 930b <get_options+0x11f5>\n    930b:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    930f:\t48 29 d1             \tsub    %rdx,%rcx\n    9312:\t48 89 ca             \tmov    %rcx,%rdx\n    9315:\t48 29 d0             \tsub    %rdx,%rax\n    9318:\t48 89 c2             \tmov    %rax,%rdx\n    931b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    931f:\t48 8b 08             \tmov    (%rax),%rcx\n    9322:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9326:\t48 89 ce             \tmov    %rcx,%rsi\n    9329:\t48 89 c7             \tmov    %rax,%rdi\n    932c:\te8 00 00 00 00       \tcallq  9331 <get_options+0x121b>\n    9331:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9335:\t48 89 c7             \tmov    %rax,%rdi\n    9338:\te8 00 00 00 00       \tcallq  933d <get_options+0x1227>\n    933d:\t48 01 45 b8          \tadd    %rax,-0x48(%rbp)\n    9341:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9345:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    9349:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    934d:\tc6 00 3d             \tmovb   $0x3d,(%rax)\n    9350:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9357 <get_options+0x1241>\n    9357:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 935e <get_options+0x1248>\n    935e:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    9362:\t48 29 d1             \tsub    %rdx,%rcx\n    9365:\t48 89 ca             \tmov    %rcx,%rdx\n    9368:\t48 29 d0             \tsub    %rdx,%rax\n    936b:\t48 89 c2             \tmov    %rax,%rdx\n    936e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    9372:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n    9376:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    937a:\t48 89 ce             \tmov    %rcx,%rsi\n    937d:\t48 89 c7             \tmov    %rax,%rdi\n    9380:\te8 00 00 00 00       \tcallq  9385 <get_options+0x126f>\n    9385:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    9389:\t48 89 c7             \tmov    %rax,%rdi\n    938c:\te8 00 00 00 00       \tcallq  9391 <get_options+0x127b>\n    9391:\t48 01 45 b8          \tadd    %rax,-0x48(%rbp)\n    9395:\t83 6d 98 01          \tsubl   $0x1,-0x68(%rbp)\n    9399:\t48 83 45 d0 10       \taddq   $0x10,-0x30(%rbp)\n    939e:\t83 7d 98 00          \tcmpl   $0x0,-0x68(%rbp)\n    93a2:\t0f 8f 46 ff ff ff    \tjg     92ee <get_options+0x11d8>\n    93a8:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    93ac:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n    93af:\t48 89 d6             \tmov    %rdx,%rsi\n    93b2:\t89 c7                \tmov    %eax,%edi\n    93b4:\te8 00 00 00 00       \tcallq  93b9 <get_options+0x12a3>\n    93b9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 93c0 <get_options+0x12aa>\n    93c0:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n    93c7:\t5b                   \tpop    %rbx\n    93c8:\t5d                   \tpop    %rbp\n    93c9:\tc3                   \tretq   ", "code_s": "void *__fastcall get_options(unsigned int *<span class=\"supfact\">a1</span>,\n                             int <span class=\"supfact\">a2</span>, char *<span class=\"supfact\">a3</span>,\n                             size_t <span class=\"supfact\">a4</span>,\n                             char *<span class=\"supfact\">a5</span>,\n                             size_t <span class=\"supfact\">a6</span>) {\n  size_t <span class=\"supfact\">v6</span>;\n  size_t v7;\n  size_t v9;\n  const char *v10;\n  char *v11;\n  char *v12;\n  char *v13;\n  size_t v14;\n  char *v15;\n  size_t v16;\n  char *v17;\n  size_t v18;\n  char <span class=\"supfact\">v23</span>[Number];\n  int <span class=\"supfact\">j</span>;\n  unsigned int <span class=\"supfact\">v25</span>;\n  _BOOL4 <span class=\"supfact\">v26</span>;\n  int <span class=\"supfact\">v27</span>;\n  const char **<span class=\"supfact\">v28</span>;\n  size_t <span class=\"supfact\">size</span>;\n  char *<span class=\"supfact\">v30</span>;\n  char *<span class=\"supfact\">v31</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  const char **<span class=\"supfact\">v33</span>;\n  _QWORD *<span class=\"supfact\">v34</span>;\n  int *<span class=\"supfact\">v35</span>;\n  __int64 <span class=\"supfact\">v36</span>;\n  <span class=\"supfact\">v35</span> =\n      *(int **)(*((_QWORD *)<span class=\"supfact\">a1</span> + Number) + Number L);\n  <span class=\"supfact\">v25</span> = Number;\n  <span class=\"supfact\">v28</span> = Number L;\n  if (<span class=\"supfact\">v35</span> &&\n      !ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                        Number L) &&\n      !ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                        Number L) &&\n      (ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                        Number L) ||\n       ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                        Number L))) {\n    <span class=\"supfact\">i</span> = ippFindAttribute(\n        *((_QWORD *)<span class=\"supfact\">a1</span> + Number), String, Number L);\n    <span class=\"supfact\">v26</span> =\n        !<span class=\"supfact\">i</span> ||\n        strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String);\n    <span class=\"supfact\">i</span> = ippFindAttribute(\n        *((_QWORD *)<span class=\"supfact\">a1</span> + Number), String, Number L);\n    if (<span class=\"supfact\">i</span> && *(int *)(<span class=\"supfact\">i</span> + Number) > Number &&\n        *(int *)(<span class=\"supfact\">i</span> + Number) <= Number)\n      <span class=\"supfact\">v27</span> = *(_DWORD *)(<span class=\"supfact\">i</span> + Number) - Number;\n    else\n      <span class=\"supfact\">v27</span> = Number;\n    if (!<span class=\"supfact\">v35</span>[Number * <span class=\"supfact\">v26</span> + Number +\n                             <span class=\"supfact\">v27</span>]) {\n      if (<span class=\"supfact\">v35</span>[Number * <span class=\"supfact\">v26</span> + Number] <=\n          Number) {\n        if (<span class=\"supfact\">v35</span>[<span class=\"supfact\">v27</span> + Number] <= Number)\n          <span class=\"supfact\">v27</span> = Number;\n        <span class=\"supfact\">v26</span> = Number;\n      } else {\n        <span class=\"supfact\">v27</span> = Number;\n      }\n    }\n    if (<span class=\"supfact\">v35</span>[Number * <span class=\"supfact\">v26</span> + Number +\n                            <span class=\"supfact\">v27</span>] > Number) {\n      <span class=\"supfact\">j</span> = <span class=\"supfact\">v35</span>[Number * <span class=\"supfact\">v26</span> +\n                                              Number + <span class=\"supfact\">v27</span>];\n      <span class=\"supfact\">v34</span> = *(\n          _QWORD **)&<span class=\"supfact\">v35</span>[Number * <span class=\"supfact\">v26</span> + Number +\n                                         Number * <span class=\"supfact\">v27</span>];\n      while (<span class=\"supfact\">j</span> > Number) {\n        if (!ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number),\n                              *<span class=\"supfact\">v34</span>, Number L))\n          <span class=\"supfact\">v25</span> =\n              cupsAddOption(*<span class=\"supfact\">v34</span>, <span class=\"supfact\">v34</span>[Number],\n                            <span class=\"supfact\">v25</span>, &<span class=\"supfact\">v28</span>);\n        --<span class=\"supfact\">j</span>;\n        <span class=\"supfact\">v34</span> += Number;\n      }\n    }\n  }\n  if (<span class=\"supfact\">v35</span>) {\n    if (!ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                          Number L) &&\n        !ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                          Number L)) {\n      <span class=\"supfact\">v36</span> = ppdCacheGetInputSlot(\n          <span class=\"supfact\">v35</span>, *((_QWORD *)<span class=\"supfact\">a1</span> + Number),\n          Number L);\n      if (<span class=\"supfact\">v36</span>)\n        <span class=\"supfact\">v25</span> = cupsAddOption(\n            *((_QWORD *)<span class=\"supfact\">v35</span> + Number), <span class=\"supfact\">v36</span>,\n            <span class=\"supfact\">v25</span>, &<span class=\"supfact\">v28</span>);\n    }\n    if (!ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                          Number L)) {\n      <span class=\"supfact\">v36</span> = ppdCacheGetMediaType(\n          <span class=\"supfact\">v35</span>, *((_QWORD *)<span class=\"supfact\">a1</span> + Number),\n          Number L);\n      if (<span class=\"supfact\">v36</span>)\n        <span class=\"supfact\">v25</span> =\n            cupsAddOption(String, <span class=\"supfact\">v36</span>, <span class=\"supfact\">v25</span>,\n                          &<span class=\"supfact\">v28</span>);\n    }\n    if (!ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                          Number L) &&\n        !ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                          Number L)) {\n      <span class=\"supfact\">v36</span> = ppdCacheGetPageSize(\n          <span class=\"supfact\">v35</span>, *((_QWORD *)<span class=\"supfact\">a1</span> + Number),\n          Number L, <span class=\"supfact\">v23</span>);\n      if (<span class=\"supfact\">v36</span>) {\n        <span class=\"supfact\">v25</span> =\n            cupsAddOption(String, <span class=\"supfact\">v36</span>, <span class=\"supfact\">v25</span>,\n                          &<span class=\"supfact\">v28</span>);\n        if (!ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                              Number L))\n          <span class=\"supfact\">v25</span> =\n              cupsAddOption(String, <span class=\"supfact\">v36</span>, <span class=\"supfact\">v25</span>,\n                            &<span class=\"supfact\">v28</span>);\n      }\n    }\n    if (!ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number), String,\n                          Number L)) {\n      <span class=\"supfact\">i</span> = ippFindAttribute(\n          *((_QWORD *)<span class=\"supfact\">a1</span> + Number), String, Number L);\n      if (<span class=\"supfact\">i</span>) {\n        if (*(_DWORD *)(<span class=\"supfact\">i</span> + Number) == Number ||\n            *(_DWORD *)(<span class=\"supfact\">i</span> + Number) == Number) {\n          <span class=\"supfact\">v36</span> = ppdCacheGetOutputBin(\n              <span class=\"supfact\">v35</span>, *(_QWORD *)(<span class=\"supfact\">i</span> + Number));\n          if (<span class=\"supfact\">v36</span>)\n            <span class=\"supfact\">v25</span> =\n                cupsAddOption(String, <span class=\"supfact\">v36</span>, <span class=\"supfact\">v25</span>,\n                              &<span class=\"supfact\">v28</span>);\n        }\n      }\n    }\n    if (*((_QWORD *)<span class=\"supfact\">v35</span> + Number)) {\n      if (!ippFindAttribute(*((_QWORD *)<span class=\"supfact\">a1</span> + Number),\n                            *((_QWORD *)<span class=\"supfact\">v35</span> + Number),\n                            Number L)) {\n        <span class=\"supfact\">i</span> = ippFindAttribute(\n            *((_QWORD *)<span class=\"supfact\">a1</span> + Number), String, Number L);\n        if (<span class=\"supfact\">i</span>) {\n          if (!strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String)) {\n            <span class=\"supfact\">v25</span> =\n                cupsAddOption(*((_QWORD *)<span class=\"supfact\">v35</span> + Number),\n                              *((_QWORD *)<span class=\"supfact\">v35</span> + Number),\n                              <span class=\"supfact\">v25</span>, &<span class=\"supfact\">v28</span>);\n          } else if (!strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number),\n                             String)) {\n            <span class=\"supfact\">v25</span> =\n                cupsAddOption(*((_QWORD *)<span class=\"supfact\">v35</span> + Number),\n                              *((_QWORD *)<span class=\"supfact\">v35</span> + Number),\n                              <span class=\"supfact\">v25</span>, &<span class=\"supfact\">v28</span>);\n          } else if (!strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number),\n                             String)) {\n            <span class=\"supfact\">v25</span> =\n                cupsAddOption(*((_QWORD *)<span class=\"supfact\">v35</span> + Number),\n                              *((_QWORD *)<span class=\"supfact\">v35</span> + Number),\n                              <span class=\"supfact\">v25</span>, &<span class=\"supfact\">v28</span>);\n          }\n        }\n      }\n    }\n    <span class=\"supfact\">v25</span> = ppdCacheGetFinishingOptions(\n        <span class=\"supfact\">v35</span>, *((_QWORD *)<span class=\"supfact\">a1</span> + Number), Number L,\n        <span class=\"supfact\">v25</span>, &<span class=\"supfact\">v28</span>);\n  }\n  <span class=\"supfact\">size</span> = ipp_length(*((_QWORD *)<span class=\"supfact\">a1</span> + Number));\n  <span class=\"supfact\">j</span> = <span class=\"supfact\">v25</span>;\n  <span class=\"supfact\">v33</span> = <span class=\"supfact\">v28</span>;\n  while (<span class=\"supfact\">j</span> > Number) {\n    <span class=\"supfact\">v6</span> = strlen(*<span class=\"supfact\">v33</span>);\n    v7 = strlen(<span class=\"supfact\">v33</span>[Number]);\n    <span class=\"supfact\">size</span> += <span class=\"supfact\">v6</span> + v7 + Number;\n    --<span class=\"supfact\">j</span>;\n    <span class=\"supfact\">v33</span> += Number;\n  }\n  if (!<span class=\"supfact\">size</span>)\n    <span class=\"supfact\">size</span> = Number L;\n  if (<span class=\"supfact\">size</span> > optlength_30742 || !options_30741) {\n    if (options_30741)\n      <span class=\"supfact\">v30</span> =\n          (char *)realloc(options_30741, <span class=\"supfact\">size</span>);\n    else\n      <span class=\"supfact\">v30</span> = (char *)malloc(<span class=\"supfact\">size</span>);\n    if (!<span class=\"supfact\">v30</span>) {\n      cupsdLogJob(<span class=\"supfact\">a1</span>, Number L, String, <span class=\"supfact\">size</span>);\n      return Number L;\n    }\n    options_30741 = <span class=\"supfact\">v30</span>;\n    optlength_30742 = <span class=\"supfact\">size</span>;\n  }\n  <span class=\"supfact\">v30</span> = (char *)options_30741;\n  *(_BYTE *)options_30741 = Number;\n  snprintf(\n      <span class=\"supfact\">a5</span>, <span class=\"supfact\">a6</span>, String,\n      *(const char **)(*((_QWORD *)<span class=\"supfact\">a1</span> + Number) + Number L),\n      *<span class=\"supfact\">a1</span>);\n  cups_strlcpy(<span class=\"supfact\">a3</span>, String, <span class=\"supfact\">a4</span>);\n  for (<span class=\"supfact\">i</span> =\n           *(_QWORD *)(*((_QWORD *)<span class=\"supfact\">a1</span> + Number) + Number L);\n       <span class=\"supfact\">i</span>; <span class=\"supfact\">i</span> = *(_QWORD *)<span class=\"supfact\">i</span>) {\n    if (!strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) &&\n        *(_DWORD *)(<span class=\"supfact\">i</span> + Number) == Number) {\n      if (!<span class=\"supfact\">a2</span>)\n        snprintf(<span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>, String,\n                 *(unsigned int *)(<span class=\"supfact\">i</span> + Number));\n    } else if (!strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) &&\n               (*(_DWORD *)(<span class=\"supfact\">i</span> + Number) == Number ||\n                *(_DWORD *)(<span class=\"supfact\">i</span> + Number) == Number)) {\n      cups_strlcpy(<span class=\"supfact\">a5</span>, *(_QWORD *)(<span class=\"supfact\">i</span> + Number),\n                   <span class=\"supfact\">a6</span>);\n    } else if (*(_DWORD *)(<span class=\"supfact\">i</span> + Number) == Number &&\n               *(_DWORD *)(<span class=\"supfact\">i</span> + Number) != Number &&\n               *(_DWORD *)(<span class=\"supfact\">i</span> + Number) != Number &&\n               *(_DWORD *)(<span class=\"supfact\">i</span> + Number) != Number &&\n               *(_DWORD *)(<span class=\"supfact\">i</span> + Number) != Number &&\n               (*(_DWORD *)(<span class=\"supfact\">i</span> + Number) != Number ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number),\n                        String)) &&\n               *(_DWORD *)(<span class=\"supfact\">i</span> + Number) != Number &&\n               *(_DWORD *)(<span class=\"supfact\">i</span> + Number) != Number &&\n               strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) &&\n               strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) &&\n               strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) &&\n               strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) &&\n               strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) &&\n               strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) &&\n               strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) &&\n               (strncmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String,\n                        Number) ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) ||\n                !strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) ||\n                (*(_DWORD *)(*((_QWORD *)<span class=\"supfact\">a1</span> + Number) +\n                             Number L) &\n                 Number) != Number) &&\n               (strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number), String) &&\n                    strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number),\n                           String) &&\n                    strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number),\n                           String) &&\n                    strncmp(*(const char **)(<span class=\"supfact\">i</span> + Number),\n                            String, Number) &&\n                    strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number),\n                           String) &&\n                    strcmp(*(const char **)(<span class=\"supfact\">i</span> + Number),\n                           String) &&\n                    (unsigned int)cups_strcasecmp(\n                        *(_QWORD *)(<span class=\"supfact\">i</span> + Number), String) &&\n                    (unsigned int)cups_strcasecmp(\n                        *(_QWORD *)(<span class=\"supfact\">i</span> + Number), String) &&\n                    (unsigned int)cups_strcasecmp(\n                        *(_QWORD *)(<span class=\"supfact\">i</span> + Number), String) &&\n                    (unsigned int)cups_strcasecmp(\n                        *(_QWORD *)(<span class=\"supfact\">i</span> + Number), String) ||\n                !<span class=\"supfact\">a2</span>)) {\n      if (<span class=\"supfact\">v30</span> > options_30741)\n        cups_strlcat(<span class=\"supfact\">v30</span>, asc_E62C,\n                     optlength_30742 -\n                         (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741));\n      if (*(_DWORD *)(<span class=\"supfact\">i</span> + Number) != Number) {\n        cups_strlcat(\n            <span class=\"supfact\">v30</span>, *(_QWORD *)(<span class=\"supfact\">i</span> + Number),\n            optlength_30742 - (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741));\n        cups_strlcat(<span class=\"supfact\">v30</span>, &asc_E62C[Number],\n                     optlength_30742 -\n                         (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741));\n      }\n      for (<span class=\"supfact\">j</span> = Number;\n           <span class=\"supfact\">j</span> < *(_DWORD *)(<span class=\"supfact\">i</span> + Number);\n           ++<span class=\"supfact\">j</span>) {\n        if (<span class=\"supfact\">j</span>)\n          cups_strlcat(<span class=\"supfact\">v30</span>, &asc_E62C[Number],\n                       optlength_30742 -\n                           (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741));\n        v9 = strlen(<span class=\"supfact\">v30</span>);\n        <span class=\"supfact\">v30</span> += v9;\n        switch (*(_DWORD *)(<span class=\"supfact\">i</span> + Number)) {\n        case String:\n        case String:\n          snprintf(<span class=\"supfact\">v30</span>,\n                   optlength_30742 -\n                       (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741),\n                   String,\n                   *(unsigned int *)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                                     <span class=\"supfact\">i</span>));\n          break;\n        case String:\n          if (!*(_BYTE *)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                          <span class=\"supfact\">i</span>))\n            cups_strlcat(<span class=\"supfact\">v30</span>, String,\n                         optlength_30742 -\n                             (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741));\n          cups_strlcat(\n              <span class=\"supfact\">v30</span>, *(_QWORD *)(<span class=\"supfact\">i</span> + Number),\n              optlength_30742 - (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741));\n          break;\n        case String:\n        case String:\n        case String:\n        case String:\n        case String:\n        case String:\n        case String:\n          <span class=\"supfact\">v31</span> =\n              *(char **)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                         <span class=\"supfact\">i</span> + Number);\n          while (*<span class=\"supfact\">v31</span>) {\n            if (strchr(String, *<span class=\"supfact\">v31</span>)) {\n              v11 = <span class=\"supfact\">v30</span>++;\n              *v11 = Number;\n            }\n            v12 = <span class=\"supfact\">v31</span>++;\n            v13 = <span class=\"supfact\">v30</span>++;\n            *v13 = *v12;\n          }\n          *<span class=\"supfact\">v30</span> = Number;\n          break;\n        case String:\n          if (*(_DWORD *)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                          <span class=\"supfact\">i</span> + Number) == Number)\n            v10 = String;\n          else\n            v10 = String;\n          snprintf(<span class=\"supfact\">v30</span>,\n                   optlength_30742 -\n                       (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741) - Number,\n                   String,\n                   *(unsigned int *)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                                     <span class=\"supfact\">i</span>),\n                   *(unsigned int *)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                                     <span class=\"supfact\">i</span> + Number),\n                   v10);\n          break;\n        case String:\n          if (*(_DWORD *)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                          <span class=\"supfact\">i</span>) ==\n              *(_DWORD *)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                          <span class=\"supfact\">i</span> + Number))\n            snprintf(<span class=\"supfact\">v30</span>,\n                     optlength_30742 -\n                         (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741) -\n                         Number,\n                     String,\n                     *(unsigned int *)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                                       <span class=\"supfact\">i</span>));\n          else\n            snprintf(<span class=\"supfact\">v30</span>,\n                     optlength_30742 -\n                         (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741) -\n                         Number,\n                     String,\n                     *(unsigned int *)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                                       <span class=\"supfact\">i</span>),\n                     *(unsigned int *)(Number * (<span class=\"supfact\">j</span> + Number L) +\n                                       <span class=\"supfact\">i</span> + Number));\n          break;\n        default:\n          continue;\n        }\n      }\n      v14 = strlen(<span class=\"supfact\">v30</span>);\n      <span class=\"supfact\">v30</span> += v14;\n    }\n  }\n  <span class=\"supfact\">j</span> = <span class=\"supfact\">v25</span>;\n  <span class=\"supfact\">v33</span> = <span class=\"supfact\">v28</span>;\n  while (<span class=\"supfact\">j</span> > Number) {\n    v15 = <span class=\"supfact\">v30</span>++;\n    *v15 = Number;\n    cups_strlcpy(<span class=\"supfact\">v30</span>, *<span class=\"supfact\">v33</span>,\n                 optlength_30742 -\n                     (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741));\n    v16 = strlen(<span class=\"supfact\">v30</span>);\n    <span class=\"supfact\">v30</span> += v16;\n    v17 = <span class=\"supfact\">v30</span>++;\n    *v17 = Number;\n    cups_strlcpy(<span class=\"supfact\">v30</span>, <span class=\"supfact\">v33</span>[Number],\n                 optlength_30742 -\n                     (<span class=\"supfact\">v30</span> - (_BYTE *)options_30741));\n    v18 = strlen(<span class=\"supfact\">v30</span>);\n    <span class=\"supfact\">v30</span> += v18;\n    --<span class=\"supfact\">j</span>;\n    <span class=\"supfact\">v33</span> += Number;\n  }\n  cupsFreeOptions(<span class=\"supfact\">v25</span>, <span class=\"supfact\">v28</span>);\n  return options_30741;\n}", "code_t": "char *__cdecl get_options(cupsd_job_t *<span class=\"supfact\">job</span>,\n                          int <span class=\"supfact\">banner_page</span>,\n                          char *<span class=\"supfact\">copies</span>,\n                          size_t <span class=\"supfact\">copies_size</span>,\n                          char *<span class=\"supfact\">title</span>,\n                          size_t <span class=\"supfact\">title_size</span>) {\n  size_t <span class=\"supfact\">v6</span>;\n  size_t v7;\n  size_t v9;\n  const char *v10;\n  char *v11;\n  char *v12;\n  char *v13;\n  size_t v14;\n  char *v15;\n  size_t v16;\n  char *v17;\n  size_t v18;\n  int <span class=\"supfact\">exact</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">num_pwgppds</span>;\n  int <span class=\"supfact\">print_color_mode</span>;\n  int <span class=\"supfact\">print_quality</span>;\n  cups_option_t *<span class=\"supfact\">pwgppds</span>;\n  size_t <span class=\"supfact\">newlength</span>;\n  char *<span class=\"supfact\">optptr</span>;\n  char *<span class=\"supfact\">valptr</span>;\n  ipp_attribute_t *<span class=\"supfact\">attr</span>;\n  cups_option_t *<span class=\"supfact\">pwgppd</span>;\n  cups_option_t *<span class=\"supfact\">preset</span>;\n  _ppd_cache_t *<span class=\"supfact\">pc</span>;\n  const char *<span class=\"supfact\">ppd</span>;\n  <span class=\"supfact\">pc</span> = <span class=\"supfact\">job</span>->printer-><span class=\"supfact\">pc</span>;\n  <span class=\"supfact\">num_pwgppds</span> = Number;\n  <span class=\"supfact\">pwgppds</span> = Number L;\n  if (<span class=\"supfact\">pc</span> &&\n      !ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L) &&\n      !ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L) &&\n      (ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L) ||\n       ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L))) {\n    <span class=\"supfact\">attr</span> = (ipp_attribute_t *)ippFindAttribute(\n        <span class=\"supfact\">job</span>->attrs, String, Number L);\n    <span class=\"supfact\">print_color_mode</span> =\n        !<span class=\"supfact\">attr</span> ||\n        strcmp(<span class=\"supfact\">attr</span>->values[Number].string.text, String);\n    <span class=\"supfact\">attr</span> = (ipp_attribute_t *)ippFindAttribute(\n        <span class=\"supfact\">job</span>->attrs, String, Number L);\n    if (<span class=\"supfact\">attr</span> &&\n        <span class=\"supfact\">attr</span>->values[Number].integer > Number &&\n        <span class=\"supfact\">attr</span>->values[Number].integer <= Number)\n      <span class=\"supfact\">print_quality</span> =\n          <span class=\"supfact\">attr</span>->values[Number].integer - Number;\n    else\n      <span class=\"supfact\">print_quality</span> = Number;\n    if (!<span class=\"supfact\">pc</span>->num_presets[<span class=\"supfact\">print_color_mode</span>]\n                                        [<span class=\"supfact\">print_quality</span>]) {\n      if (<span class=\"supfact\">pc</span>->num_presets[<span class=\"supfact\">print_color_mode</span>]\n                                         [Number] <= Number) {\n        if (<span class=\"supfact\">pc</span>\n                ->num_presets[Number][<span class=\"supfact\">print_quality</span>] <= Number)\n          <span class=\"supfact\">print_quality</span> = Number;\n        <span class=\"supfact\">print_color_mode</span> = Number;\n      } else {\n        <span class=\"supfact\">print_quality</span> = Number;\n      }\n    }\n    if (<span class=\"supfact\">pc</span>->num_presets[<span class=\"supfact\">print_color_mode</span>]\n                                       [<span class=\"supfact\">print_quality</span>] >\n        Number) {\n      <span class=\"supfact\">i</span> =\n          <span class=\"supfact\">pc</span>->num_presets[<span class=\"supfact\">print_color_mode</span>]\n                                         [<span class=\"supfact\">print_quality</span>];\n      <span class=\"supfact\">preset</span> =\n          <span class=\"supfact\">pc</span>->presets[<span class=\"supfact\">print_color_mode</span>]\n                                     [<span class=\"supfact\">print_quality</span>];\n      while (<span class=\"supfact\">i</span> > Number) {\n        if (!ippFindAttribute(<span class=\"supfact\">job</span>->attrs,\n                              <span class=\"supfact\">preset</span>->name, Number L))\n          <span class=\"supfact\">num_pwgppds</span> = cupsAddOption(\n              <span class=\"supfact\">preset</span>->name, <span class=\"supfact\">preset</span>->value,\n              (unsigned int)<span class=\"supfact\">num_pwgppds</span>,\n              &<span class=\"supfact\">pwgppds</span>);\n        --<span class=\"supfact\">i</span>;\n        ++<span class=\"supfact\">preset</span>;\n      }\n    }\n  }\n  if (<span class=\"supfact\">pc</span>) {\n    if (!ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L) &&\n        !ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L)) {\n      <span class=\"supfact\">ppd</span> = (const char *)ppdCacheGetInputSlot(\n          <span class=\"supfact\">pc</span>, <span class=\"supfact\">job</span>->attrs, Number L);\n      if (<span class=\"supfact\">ppd</span>)\n        <span class=\"supfact\">num_pwgppds</span> = cupsAddOption(\n            <span class=\"supfact\">pc</span>->source_option, <span class=\"supfact\">ppd</span>,\n            (unsigned int)<span class=\"supfact\">num_pwgppds</span>,\n            &<span class=\"supfact\">pwgppds</span>);\n    }\n    if (!ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L)) {\n      <span class=\"supfact\">ppd</span> = (const char *)ppdCacheGetMediaType(\n          <span class=\"supfact\">pc</span>, <span class=\"supfact\">job</span>->attrs, Number L);\n      if (<span class=\"supfact\">ppd</span>)\n        <span class=\"supfact\">num_pwgppds</span> =\n            cupsAddOption(String, <span class=\"supfact\">ppd</span>,\n                          (unsigned int)<span class=\"supfact\">num_pwgppds</span>,\n                          &<span class=\"supfact\">pwgppds</span>);\n    }\n    if (!ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L) &&\n        !ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L)) {\n      <span class=\"supfact\">ppd</span> = (const char *)ppdCacheGetPageSize(\n          <span class=\"supfact\">pc</span>, <span class=\"supfact\">job</span>->attrs, Number L,\n          &<span class=\"supfact\">exact</span>);\n      if (<span class=\"supfact\">ppd</span>) {\n        <span class=\"supfact\">num_pwgppds</span> =\n            cupsAddOption(String, <span class=\"supfact\">ppd</span>,\n                          (unsigned int)<span class=\"supfact\">num_pwgppds</span>,\n                          &<span class=\"supfact\">pwgppds</span>);\n        if (!ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L))\n          <span class=\"supfact\">num_pwgppds</span> =\n              cupsAddOption(String, <span class=\"supfact\">ppd</span>,\n                            (unsigned int)<span class=\"supfact\">num_pwgppds</span>,\n                            &<span class=\"supfact\">pwgppds</span>);\n      }\n    }\n    if (!ippFindAttribute(<span class=\"supfact\">job</span>->attrs, String, Number L)) {\n      <span class=\"supfact\">attr</span> = (ipp_attribute_t *)ippFindAttribute(\n          <span class=\"supfact\">job</span>->attrs, String, Number L);\n      if (<span class=\"supfact\">attr</span>) {\n        if (<span class=\"supfact\">attr</span>->value_tag == IPP_TAG_KEYWORD ||\n            <span class=\"supfact\">attr</span>->value_tag == IPP_TAG_NAME) {\n          <span class=\"supfact\">ppd</span> = (const char *)ppdCacheGetOutputBin(\n              <span class=\"supfact\">pc</span>,\n              <span class=\"supfact\">attr</span>->values[Number].string.text);\n          if (<span class=\"supfact\">ppd</span>)\n            <span class=\"supfact\">num_pwgppds</span> =\n                cupsAddOption(String, <span class=\"supfact\">ppd</span>,\n                              (unsigned int)<span class=\"supfact\">num_pwgppds</span>,\n                              &<span class=\"supfact\">pwgppds</span>);\n        }\n      }\n    }\n    if (<span class=\"supfact\">pc</span>->sides_option) {\n      if (!ippFindAttribute(<span class=\"supfact\">job</span>->attrs,\n                            <span class=\"supfact\">pc</span>->sides_option, Number L)) {\n        <span class=\"supfact\">attr</span> = (ipp_attribute_t *)ippFindAttribute(\n            <span class=\"supfact\">job</span>->attrs, String, Number L);\n        if (<span class=\"supfact\">attr</span>) {\n          if (!strcmp(<span class=\"supfact\">attr</span>->values[Number].string.text,\n                      String)) {\n            <span class=\"supfact\">num_pwgppds</span> =\n                cupsAddOption(<span class=\"supfact\">pc</span>->sides_option,\n                              <span class=\"supfact\">pc</span>->sides_1sided,\n                              (unsigned int)<span class=\"supfact\">num_pwgppds</span>,\n                              &<span class=\"supfact\">pwgppds</span>);\n          } else if (!strcmp(<span class=\"supfact\">attr</span>->values[Number].string.text,\n                             String)) {\n            <span class=\"supfact\">num_pwgppds</span> =\n                cupsAddOption(<span class=\"supfact\">pc</span>->sides_option,\n                              <span class=\"supfact\">pc</span>->sides_2sided_long,\n                              (unsigned int)<span class=\"supfact\">num_pwgppds</span>,\n                              &<span class=\"supfact\">pwgppds</span>);\n          } else if (!strcmp(<span class=\"supfact\">attr</span>->values[Number].string.text,\n                             String)) {\n            <span class=\"supfact\">num_pwgppds</span> =\n                cupsAddOption(<span class=\"supfact\">pc</span>->sides_option,\n                              <span class=\"supfact\">pc</span>->sides_2sided_short,\n                              (unsigned int)<span class=\"supfact\">num_pwgppds</span>,\n                              &<span class=\"supfact\">pwgppds</span>);\n          }\n        }\n      }\n    }\n    <span class=\"supfact\">num_pwgppds</span> = ppdCacheGetFinishingOptions(\n        <span class=\"supfact\">pc</span>, <span class=\"supfact\">job</span>->attrs, Number L,\n        (unsigned int)<span class=\"supfact\">num_pwgppds</span>, &<span class=\"supfact\">pwgppds</span>);\n  }\n  <span class=\"supfact\">newlength</span> = ipp_length(<span class=\"supfact\">job</span>->attrs);\n  <span class=\"supfact\">i</span> = <span class=\"supfact\">num_pwgppds</span>;\n  <span class=\"supfact\">pwgppd</span> = <span class=\"supfact\">pwgppds</span>;\n  while (<span class=\"supfact\">i</span> > Number) {\n    <span class=\"supfact\">v6</span> = strlen(<span class=\"supfact\">pwgppd</span>->name);\n    v7 = strlen(<span class=\"supfact\">pwgppd</span>->value);\n    <span class=\"supfact\">newlength</span> += <span class=\"supfact\">v6</span> + v7 + Number;\n    --<span class=\"supfact\">i</span>;\n    ++<span class=\"supfact\">pwgppd</span>;\n  }\n  if (!<span class=\"supfact\">newlength</span>)\n    <span class=\"supfact\">newlength</span> = Number L;\n  if (<span class=\"supfact\">newlength</span> > optlength_30742 || !options_30741) {\n    if (options_30741)\n      <span class=\"supfact\">optptr</span> =\n          (char *)realloc(options_30741, <span class=\"supfact\">newlength</span>);\n    else\n      <span class=\"supfact\">optptr</span> = (char *)malloc(<span class=\"supfact\">newlength</span>);\n    if (!<span class=\"supfact\">optptr</span>) {\n      cupsdLogJob(<span class=\"supfact\">job</span>, Number L, String,\n                  <span class=\"supfact\">newlength</span>);\n      return Number L;\n    }\n    options_30741 = <span class=\"supfact\">optptr</span>;\n    optlength_30742 = <span class=\"supfact\">newlength</span>;\n  }\n  <span class=\"supfact\">optptr</span> = options_30741;\n  *options_30741 = Number;\n  snprintf(<span class=\"supfact\">title</span>, <span class=\"supfact\">title_size</span>, String,\n           <span class=\"supfact\">job</span>->printer->name,\n           (unsigned int)<span class=\"supfact\">job</span>->id);\n  cups_strlcpy(<span class=\"supfact\">copies</span>, String, <span class=\"supfact\">copies_size</span>);\n  for (<span class=\"supfact\">attr</span> = <span class=\"supfact\">job</span>->attrs->attrs;\n       <span class=\"supfact\">attr</span>;\n       <span class=\"supfact\">attr</span> = <span class=\"supfact\">attr</span>->next) {\n    if (!strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n        <span class=\"supfact\">attr</span>->value_tag == IPP_TAG_INTEGER) {\n      if (!<span class=\"supfact\">banner_page</span>)\n        snprintf(<span class=\"supfact\">copies</span>, <span class=\"supfact\">copies_size</span>, String,\n                 (unsigned int)<span class=\"supfact\">attr</span>->values[Number].integer);\n    } else if (!strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n               (<span class=\"supfact\">attr</span>->value_tag == IPP_TAG_NAME ||\n                <span class=\"supfact\">attr</span>->value_tag == IPP_TAG_NAMELANG)) {\n      cups_strlcpy(<span class=\"supfact\">title</span>,\n                   <span class=\"supfact\">attr</span>->values[Number].string.text,\n                   <span class=\"supfact\">title_size</span>);\n    } else if (<span class=\"supfact\">attr</span>->group_tag == IPP_TAG_JOB &&\n               <span class=\"supfact\">attr</span>->value_tag != IPP_TAG_NOVALUE &&\n               <span class=\"supfact\">attr</span>->value_tag != IPP_TAG_MIMETYPE &&\n               <span class=\"supfact\">attr</span>->value_tag != IPP_TAG_NAMELANG &&\n               <span class=\"supfact\">attr</span>->value_tag != IPP_TAG_TEXTLANG &&\n               (<span class=\"supfact\">attr</span>->value_tag != IPP_TAG_URI ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String) ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String)) &&\n               <span class=\"supfact\">attr</span>->value_tag != IPP_TAG_URISCHEME &&\n               <span class=\"supfact\">attr</span>->value_tag != IPP_TAG_BEGIN_COLLECTION &&\n               strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n               strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n               strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n               strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n               strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n               strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n               strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n               (strncmp(<span class=\"supfact\">attr</span>->name, String, Number) ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String) ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String) ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String) ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String) ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String) ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String) ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String) ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String) ||\n                !strcmp(<span class=\"supfact\">attr</span>->name, String) ||\n                (<span class=\"supfact\">job</span>->printer->type & Number) != Number) &&\n               (strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n                    strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n                    strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n                    strncmp(<span class=\"supfact\">attr</span>->name, String, Number) &&\n                    strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n                    strcmp(<span class=\"supfact\">attr</span>->name, String) &&\n                    (unsigned int)cups_strcasecmp(<span class=\"supfact\">attr</span>->name,\n                                                  String) &&\n                    (unsigned int)cups_strcasecmp(<span class=\"supfact\">attr</span>->name,\n                                                  String) &&\n                    (unsigned int)cups_strcasecmp(<span class=\"supfact\">attr</span>->name,\n                                                  String) &&\n                    (unsigned int)cups_strcasecmp(<span class=\"supfact\">attr</span>->name,\n                                                  String) ||\n                !<span class=\"supfact\">banner_page</span>)) {\n      if (<span class=\"supfact\">optptr</span> > options_30741)\n        cups_strlcat(<span class=\"supfact\">optptr</span>, asc_E62C,\n                     optlength_30742 -\n                         (<span class=\"supfact\">optptr</span> - options_30741));\n      if (<span class=\"supfact\">attr</span>->value_tag != IPP_TAG_BOOLEAN) {\n        cups_strlcat(<span class=\"supfact\">optptr</span>, <span class=\"supfact\">attr</span>->name,\n                     optlength_30742 -\n                         (<span class=\"supfact\">optptr</span> - options_30741));\n        cups_strlcat(<span class=\"supfact\">optptr</span>, &asc_E62C[Number],\n                     optlength_30742 -\n                         (<span class=\"supfact\">optptr</span> - options_30741));\n      }\n      for (<span class=\"supfact\">i</span> = Number;\n           <span class=\"supfact\">i</span> < <span class=\"supfact\">attr</span>->num_values;\n           ++<span class=\"supfact\">i</span>) {\n        if (<span class=\"supfact\">i</span>)\n          cups_strlcat(<span class=\"supfact\">optptr</span>, &asc_E62C[Number],\n                       optlength_30742 -\n                           (<span class=\"supfact\">optptr</span> - options_30741));\n        v9 = strlen(<span class=\"supfact\">optptr</span>);\n        <span class=\"supfact\">optptr</span> += v9;\n        switch (<span class=\"supfact\">attr</span>->value_tag) {\n        case IPP_TAG_INTEGER:\n        case IPP_TAG_ENUM:\n          snprintf(<span class=\"supfact\">optptr</span>,\n                   optlength_30742 - (<span class=\"supfact\">optptr</span> - options_30741),\n                   String,\n                   (unsigned int)<span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>]\n                       .integer);\n          break;\n        case IPP_TAG_BOOLEAN:\n          if (!<span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>].boolean)\n            cups_strlcat(<span class=\"supfact\">optptr</span>, String,\n                         optlength_30742 -\n                             (<span class=\"supfact\">optptr</span> - options_30741));\n          cups_strlcat(<span class=\"supfact\">optptr</span>, <span class=\"supfact\">attr</span>->name,\n                       optlength_30742 -\n                           (<span class=\"supfact\">optptr</span> - options_30741));\n          break;\n        case IPP_TAG_STRING:\n        case IPP_TAG_TEXT:\n        case IPP_TAG_NAME:\n        case IPP_TAG_KEYWORD:\n        case IPP_TAG_URI:\n        case IPP_TAG_CHARSET:\n        case IPP_TAG_LANGUAGE:\n          <span class=\"supfact\">valptr</span> =\n              <span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>].string.text;\n          while (*<span class=\"supfact\">valptr</span>) {\n            if (strchr(String, *<span class=\"supfact\">valptr</span>)) {\n              v11 = <span class=\"supfact\">optptr</span>++;\n              *v11 = Number;\n            }\n            v12 = <span class=\"supfact\">valptr</span>++;\n            v13 = <span class=\"supfact\">optptr</span>++;\n            *v13 = *v12;\n          }\n          *<span class=\"supfact\">optptr</span> = Number;\n          break;\n        case IPP_TAG_RESOLUTION:\n          if (<span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>]\n                  .resolution.units == IPP_RES_PER_INCH)\n            v10 = String;\n          else\n            v10 = String;\n          snprintf(<span class=\"supfact\">optptr</span>,\n                   optlength_30742 - (<span class=\"supfact\">optptr</span> - options_30741) -\n                       Number,\n                   String,\n                   (unsigned int)<span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>]\n                       .integer,\n                   (unsigned int)<span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>]\n                       .resolution.yres,\n                   v10);\n          break;\n        case IPP_TAG_RANGE:\n          if (<span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>].integer ==\n              <span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>].resolution.yres)\n            snprintf(\n                <span class=\"supfact\">optptr</span>,\n                optlength_30742 - (<span class=\"supfact\">optptr</span> - options_30741) -\n                    Number,\n                String,\n                (unsigned int)<span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>]\n                    .integer);\n          else\n            snprintf(\n                <span class=\"supfact\">optptr</span>,\n                optlength_30742 - (<span class=\"supfact\">optptr</span> - options_30741) -\n                    Number,\n                String,\n                (unsigned int)<span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>]\n                    .integer,\n                (unsigned int)<span class=\"supfact\">attr</span>->values[<span class=\"supfact\">i</span>]\n                    .resolution.yres);\n          break;\n        default:\n          continue;\n        }\n      }\n      v14 = strlen(<span class=\"supfact\">optptr</span>);\n      <span class=\"supfact\">optptr</span> += v14;\n    }\n  }\n  <span class=\"supfact\">i</span> = <span class=\"supfact\">num_pwgppds</span>;\n  <span class=\"supfact\">pwgppd</span> = <span class=\"supfact\">pwgppds</span>;\n  while (<span class=\"supfact\">i</span> > Number) {\n    v15 = <span class=\"supfact\">optptr</span>++;\n    *v15 = Number;\n    cups_strlcpy(<span class=\"supfact\">optptr</span>, <span class=\"supfact\">pwgppd</span>->name,\n                 optlength_30742 - (<span class=\"supfact\">optptr</span> - options_30741));\n    v16 = strlen(<span class=\"supfact\">optptr</span>);\n    <span class=\"supfact\">optptr</span> += v16;\n    v17 = <span class=\"supfact\">optptr</span>++;\n    *v17 = Number;\n    cups_strlcpy(<span class=\"supfact\">optptr</span>, <span class=\"supfact\">pwgppd</span>->value,\n                 optlength_30742 - (<span class=\"supfact\">optptr</span> - options_30741));\n    v18 = strlen(<span class=\"supfact\">optptr</span>);\n    <span class=\"supfact\">optptr</span> += v18;\n    --<span class=\"supfact\">i</span>;\n    ++<span class=\"supfact\">pwgppd</span>;\n  }\n  cupsFreeOptions((unsigned int)<span class=\"supfact\">num_pwgppds</span>,\n                  <span class=\"supfact\">pwgppds</span>);\n  return options_30741;\n}", "var": [{"name": "a1", "type": "pdfapp_t *", "pred_name": "app", "ref_name": "job", "ref_type": "cupsd_job_t *"}, {"name": "a2", "type": "int", "pred_name": "__unk__", "ref_name": "banner_page", "ref_type": "int"}, {"name": "a3", "type": "char *", "pred_name": "__unk__", "ref_name": "copies", "ref_type": "char *"}, {"name": "a4", "type": "char *", "pred_name": "__unk__", "ref_name": "copies_size", "ref_type": "size_t"}, {"name": "a5", "type": "char *", "pred_name": "__unk__", "ref_name": "title", "ref_type": "char *"}, {"name": "a6", "type": "char *", "pred_name": "__unk__", "ref_name": "title_size", "ref_type": "size_t"}, {"name": "v6", "type": "size_t", "pred_name": "v6", "ref_name": "v6", "ref_type": "size_t"}, {"name": "v23", "type": "int", "pred_name": "__unk__", "ref_name": "exact", "ref_type": "int"}, {"name": "j", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "v25", "type": "int", "pred_name": "__unk__", "ref_name": "num_pwgppds", "ref_type": "int"}, {"name": "v26", "type": "int", "pred_name": "__unk__", "ref_name": "print_color_mode", "ref_type": "int"}, {"name": "v27", "type": "int", "pred_name": "__unk__", "ref_name": "print_quality", "ref_type": "int"}, {"name": "v28", "type": "char *", "pred_name": "__unk__", "ref_name": "pwgppds", "ref_type": "cups_option_t *"}, {"name": "size", "type": "size_t", "pred_name": "__unk__", "ref_name": "newlength", "ref_type": "size_t"}, {"name": "v30", "type": "char *", "pred_name": "__unk__", "ref_name": "optptr", "ref_type": "char *"}, {"name": "v31", "type": "char *", "pred_name": "__unk__", "ref_name": "valptr", "ref_type": "char *"}, {"name": "i", "type": "__unk__", "pred_name": "__unk__", "ref_name": "attr", "ref_type": "ipp_attribute_t *"}, {"name": "v33", "type": "char *", "pred_name": "__unk__", "ref_name": "pwgppd", "ref_type": "cups_option_t *"}, {"name": "v34", "type": "char *", "pred_name": "__unk__", "ref_name": "preset", "ref_type": "cups_option_t *"}, {"name": "v35", "type": "char *", "pred_name": "__unk__", "ref_name": "pc", "ref_type": "_ppd_cache_t *"}, {"name": "v36", "type": "char *", "pred_name": "__unk__", "ref_name": "ppd", "ref_type": "const char *"}], "body_in_train": false}, {"repo_owner": "ps3dev", "repo_name": "mesa-7.10.2-PS3", "path": "ps3dev/mesa-7.10.2-PS3/13431da030414425ae26be770c9b2f8d4835774547303aee63f783fd845f3cc6", "path_in_repo": "ps3dev/mesa-7.10.2-PS3/src/glsl/linker.o", "objdump": "0000000000000000 <_ZN23find_assignment_visitor11visit_enterEP13ir_assignment>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  10:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  14:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  18:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  1c:\t48 8b 52 28          \tmov    0x28(%rdx),%rdx\n  20:\t48 8b 12             \tmov    (%rdx),%rdx\n  23:\t48 81 c2 a0 00 00 00 \tadd    $0xa0,%rdx\n  2a:\t48 8b 12             \tmov    (%rdx),%rdx\n  2d:\t48 89 c7             \tmov    %rax,%rdi\n  30:\tff d2                \tcallq  *%rdx\n  32:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  36:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  3a:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  3e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  46:\t48 89 d6             \tmov    %rdx,%rsi\n  49:\t48 89 c7             \tmov    %rax,%rdi\n  4c:\te8 00 00 00 00       \tcallq  51 <_ZN23find_assignment_visitor11visit_enterEP13ir_assignment+0x51>\n  51:\t85 c0                \ttest   %eax,%eax\n  53:\t75 0f                \tjne    64 <_ZN23find_assignment_visitor11visit_enterEP13ir_assignment+0x64>\n  55:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  59:\tc6 40 30 01          \tmovb   $0x1,0x30(%rax)\n  5d:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  62:\teb 05                \tjmp    69 <_ZN23find_assignment_visitor11visit_enterEP13ir_assignment+0x69>\n  64:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  69:\tc9                   \tleaveq \n  6a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall find_assignment_visitor\nvisit_enter(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = (*(__int64(__fastcall **)(_QWORD))(\n      **(_QWORD **)(<span class=\"supfact\">a2</span> + Number) + Number L))(\n      *(_QWORD *)(<span class=\"supfact\">a2</span> + Number));\n  if (strcmp(*(const char **)(<span class=\"supfact\">a1</span> + Number),\n             *(const char **)(<span class=\"supfact\">v3</span> + Number)))\n    return Number L;\n  *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  return Number L;\n}", "code_t": "__int64 __fastcall find_assignment_visitor\nvisit_enter(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = (*(__int64(__fastcall **)(_QWORD))(\n      **(_QWORD **)(<span class=\"supfact\">a2</span> + Number) + Number L))(\n      *(_QWORD *)(<span class=\"supfact\">a2</span> + Number));\n  if (strcmp(*(const char **)(<span class=\"supfact\">a1</span> + Number),\n             *(const char **)(<span class=\"supfact\">v3</span> + Number)))\n    return Number L;\n  *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  return Number L;\n}", "var": [{"name": "a1", "type": "uc_struct *", "pred_name": "uc", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "Object_0 *", "pred_name": "obj", "ref_name": "a2", "ref_type": "__int64"}, {"name": "v3", "type": "Visitor_0 *", "pred_name": "v", "ref_name": "v3", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "timothy-r", "repo_name": "smart-ptr", "path": "timothy-r/smart-ptr/67649c2577443eedfe9cbcadd9f1030e3781e0cc6574865f39e01acc1f0e89f1", "path_in_repo": "timothy-r/smart-ptr//objs/counter.o", "objdump": "0000000000000020 <_ZN7Counter3decEv>:\n  20:\t55                   \tpush   %rbp\n  21:\t48 89 e5             \tmov    %rsp,%rbp\n  24:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  28:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  2c:\t8b 00                \tmov    (%rax),%eax\n  2e:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  31:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  35:\t89 10                \tmov    %edx,(%rax)\n  37:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  3b:\t8b 00                \tmov    (%rax),%eax\n  3d:\t5d                   \tpop    %rbp\n  3e:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall Counter dec(Counter *<span class=\"supfact\">this</span>) {\n  return (unsigned int)--*(_DWORD *)<span class=\"supfact\">this</span>;\n}", "code_t": "int __cdecl Counter dec(Counter *const <span class=\"supfact\">this</span>) {\n  return --<span class=\"supfact\">this</span>->count;\n}", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "Counter *"}], "body_in_train": false}, {"repo_owner": "mariuz", "repo_name": "quake2-iccullus", "path": "mariuz/quake2-iccullus/c3ee55dd4385fa608651529dfeb9577e12af25d7392979db3bb90d465f4592c4", "path_in_repo": "mariuz/quake2-iccullus//debugx86_64/client/cvar.o", "objdump": "0000000000000967 <Cvar_WriteVariables>:\n 967:\t55                   \tpush   %rbp\n 968:\t48 89 e5             \tmov    %rsp,%rbp\n 96b:\t48 81 ec 20 04 00 00 \tsub    $0x420,%rsp\n 972:\t48 89 bd e8 fb ff ff \tmov    %rdi,-0x418(%rbp)\n 979:\t48 8b 85 e8 fb ff ff \tmov    -0x418(%rbp),%rax\n 980:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 985:\t48 89 c7             \tmov    %rax,%rdi\n 988:\te8 00 00 00 00       \tcallq  98d <Cvar_WriteVariables+0x26>\n 98d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 991:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 998 <Cvar_WriteVariables+0x31>\n 998:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 99c:\teb 63                \tjmp    a01 <Cvar_WriteVariables+0x9a>\n 99e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 9a2:\t8b 40 18             \tmov    0x18(%rax),%eax\n 9a5:\t83 e0 01             \tand    $0x1,%eax\n 9a8:\t85 c0                \ttest   %eax,%eax\n 9aa:\t74 49                \tje     9f5 <Cvar_WriteVariables+0x8e>\n 9ac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 9b0:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n 9b4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 9b8:\t48 8b 10             \tmov    (%rax),%rdx\n 9bb:\t48 8d 85 f0 fb ff ff \tlea    -0x410(%rbp),%rax\n 9c2:\t49 89 c8             \tmov    %rcx,%r8\n 9c5:\t48 89 d1             \tmov    %rdx,%rcx\n 9c8:\tba 00 00 00 00       \tmov    $0x0,%edx\n 9cd:\tbe 00 04 00 00       \tmov    $0x400,%esi\n 9d2:\t48 89 c7             \tmov    %rax,%rdi\n 9d5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 9da:\te8 00 00 00 00       \tcallq  9df <Cvar_WriteVariables+0x78>\n 9df:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 9e3:\t48 8d 85 f0 fb ff ff \tlea    -0x410(%rbp),%rax\n 9ea:\t48 89 d6             \tmov    %rdx,%rsi\n 9ed:\t48 89 c7             \tmov    %rax,%rdi\n 9f0:\te8 00 00 00 00       \tcallq  9f5 <Cvar_WriteVariables+0x8e>\n 9f5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 9f9:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n 9fd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n a01:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n a06:\t75 96                \tjne    99e <Cvar_WriteVariables+0x37>\n a08:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n a0c:\t48 89 c7             \tmov    %rax,%rdi\n a0f:\te8 00 00 00 00       \tcallq  a14 <Cvar_WriteVariables+0xad>\n a14:\t90                   \tnop\n a15:\tc9                   \tleaveq \n a16:\tc3                   \tretq   ", "code_s": "int __fastcall Cvar_WriteVariables(const char *<span class=\"supfact\">a1</span>) {\n  char <span class=\"supfact\">s</span>[Number];\n  FILE *<span class=\"supfact\">stream</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">stream</span> = fopen(<span class=\"supfact\">a1</span>, String);\n  for (<span class=\"supfact\">i</span> = cvar_vars; <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = *(_QWORD *)(<span class=\"supfact\">i</span> + Number)) {\n    if ((*(_DWORD *)(<span class=\"supfact\">i</span> + Number) & Number) != Number) {\n      Com_sprintf(<span class=\"supfact\">s</span>, Number L, String,\n                  *(const char **)<span class=\"supfact\">i</span>,\n                  *(const char **)(<span class=\"supfact\">i</span> + Number));\n      fputs(<span class=\"supfact\">s</span>, <span class=\"supfact\">stream</span>);\n    }\n  }\n  return fclose(<span class=\"supfact\">stream</span>);\n}", "code_t": "void __cdecl Cvar_WriteVariables(char *<span class=\"supfact\">path</span>) {\n  char <span class=\"supfact\">buffer</span>[Number];\n  FILE *<span class=\"supfact\">f</span>;\n  cvar_t *<span class=\"supfact\">var</span>;\n  <span class=\"supfact\">f</span> = fopen(<span class=\"supfact\">path</span>, String);\n  for (<span class=\"supfact\">var</span> = (cvar_t *)cvar_vars; <span class=\"supfact\">var</span>;\n       <span class=\"supfact\">var</span> = <span class=\"supfact\">var</span>->next) {\n    if ((<span class=\"supfact\">var</span>->flags & Number) != Number) {\n      Com_sprintf(<span class=\"supfact\">buffer</span>, Number L, String,\n                  <span class=\"supfact\">var</span>->name, <span class=\"supfact\">var</span>->string);\n      fputs(<span class=\"supfact\">buffer</span>, <span class=\"supfact\">f</span>);\n    }\n  }\n  fclose(<span class=\"supfact\">f</span>);\n}", "var": [{"name": "a1", "type": "char *", "pred_name": "name", "ref_name": "path", "ref_type": "char *"}, {"name": "s", "type": "char[1024]", "pred_name": "buf", "ref_name": "buffer", "ref_type": "char[1024]"}, {"name": "stream", "type": "FILE *", "pred_name": "fp", "ref_name": "f", "ref_type": "FILE *"}, {"name": "i", "type": "cvar_t *", "pred_name": "var", "ref_name": "var", "ref_type": "cvar_t *"}], "body_in_train": false}, {"repo_owner": "islanderz", "repo_name": "ARDRoneSDK", "path": "islanderz/ARDRoneSDK/63e18d25d98565251236daa21b68022809fa7e66d4e4699979514782d7ab5072", "path_in_repo": "islanderz/ARDRoneSDK/ARDroneLib/FFMPEG/ffmpeg/libavformat/wav.o", "objdump": "0000000000000000 <wav_write_header>:\n       0:\t48 83 ec 58          \tsub    $0x58,%rsp\n       4:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n       9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n       e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n      12:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n      17:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n      1c:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n      20:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n      25:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n      2a:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n      2f:\t48 c7 44 24 10 00 00 \tmovq   $0x0,0x10(%rsp)\n      36:\t00 00 \n      38:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n      3d:\t0f b6 00             \tmovzbl (%rax),%eax\n      40:\t0f b6 c0             \tmovzbl %al,%eax\n      43:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n      48:\t48 83 c2 01          \tadd    $0x1,%rdx\n      4c:\t0f b6 12             \tmovzbl (%rdx),%edx\n      4f:\t0f b6 d2             \tmovzbl %dl,%edx\n      52:\tc1 e2 08             \tshl    $0x8,%edx\n      55:\t09 c2                \tor     %eax,%edx\n      57:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n      5c:\t48 83 c0 02          \tadd    $0x2,%rax\n      60:\t0f b6 00             \tmovzbl (%rax),%eax\n      63:\t0f b6 c0             \tmovzbl %al,%eax\n      66:\tc1 e0 10             \tshl    $0x10,%eax\n      69:\t09 c2                \tor     %eax,%edx\n      6b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n      70:\t48 83 c0 03          \tadd    $0x3,%rax\n      74:\t0f b6 00             \tmovzbl (%rax),%eax\n      77:\t0f b6 c0             \tmovzbl %al,%eax\n      7a:\tc1 e0 18             \tshl    $0x18,%eax\n      7d:\t09 d0                \tor     %edx,%eax\n      7f:\t89 c2                \tmov    %eax,%edx\n      81:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n      86:\t89 d6                \tmov    %edx,%esi\n      88:\t48 89 c7             \tmov    %rax,%rdi\n      8b:\te8 00 00 00 00       \tcallq  90 <wav_write_header+0x90>\n      90:\t90                   \tnop\n      91:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n      96:\tbe 00 00 00 00       \tmov    $0x0,%esi\n      9b:\t48 89 c7             \tmov    %rax,%rdi\n      9e:\te8 00 00 00 00       \tcallq  a3 <wav_write_header+0xa3>\n      a3:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n      a8:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n      ad:\t48 c7 44 24 20 00 00 \tmovq   $0x0,0x20(%rsp)\n      b4:\t00 00 \n      b6:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n      bb:\t0f b6 00             \tmovzbl (%rax),%eax\n      be:\t0f b6 c0             \tmovzbl %al,%eax\n      c1:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n      c6:\t48 83 c2 01          \tadd    $0x1,%rdx\n      ca:\t0f b6 12             \tmovzbl (%rdx),%edx\n      cd:\t0f b6 d2             \tmovzbl %dl,%edx\n      d0:\tc1 e2 08             \tshl    $0x8,%edx\n      d3:\t09 c2                \tor     %eax,%edx\n      d5:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n      da:\t48 83 c0 02          \tadd    $0x2,%rax\n      de:\t0f b6 00             \tmovzbl (%rax),%eax\n      e1:\t0f b6 c0             \tmovzbl %al,%eax\n      e4:\tc1 e0 10             \tshl    $0x10,%eax\n      e7:\t09 c2                \tor     %eax,%edx\n      e9:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n      ee:\t48 83 c0 03          \tadd    $0x3,%rax\n      f2:\t0f b6 00             \tmovzbl (%rax),%eax\n      f5:\t0f b6 c0             \tmovzbl %al,%eax\n      f8:\tc1 e0 18             \tshl    $0x18,%eax\n      fb:\t09 d0                \tor     %edx,%eax\n      fd:\t89 c2                \tmov    %eax,%edx\n      ff:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n     104:\t89 d6                \tmov    %edx,%esi\n     106:\t48 89 c7             \tmov    %rax,%rdi\n     109:\te8 00 00 00 00       \tcallq  10e <wav_write_header+0x10e>\n     10e:\t90                   \tnop\n     10f:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     114:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     119:\t48 89 c7             \tmov    %rax,%rdi\n     11c:\te8 00 00 00 00       \tcallq  121 <wav_write_header+0x121>\n     121:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n     126:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     12b:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     12f:\t48 8b 00             \tmov    (%rax),%rax\n     132:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     136:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     13b:\t48 89 d6             \tmov    %rdx,%rsi\n     13e:\t48 89 c7             \tmov    %rax,%rdi\n     141:\te8 00 00 00 00       \tcallq  146 <wav_write_header+0x146>\n     146:\t85 c0                \ttest   %eax,%eax\n     148:\t79 63                \tjns    1ad <wav_write_header+0x1ad>\n     14a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     14f:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     153:\t48 8b 00             \tmov    (%rax),%rax\n     156:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     15a:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n     161:\t48 85 c0             \ttest   %rax,%rax\n     164:\t74 1c                \tje     182 <wav_write_header+0x182>\n     166:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     16b:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     16f:\t48 8b 00             \tmov    (%rax),%rax\n     172:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     176:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n     17d:\t48 8b 00             \tmov    (%rax),%rax\n     180:\teb 05                \tjmp    187 <wav_write_header+0x187>\n     182:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     187:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n     18c:\t48 89 c1             \tmov    %rax,%rcx\n     18f:\tba 00 00 00 00       \tmov    $0x0,%edx\n     194:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     199:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     19e:\te8 00 00 00 00       \tcallq  1a3 <wav_write_header+0x1a3>\n     1a3:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     1a8:\te9 0e 01 00 00       \tjmpq   2bb <wav_write_header+0x2bb>\n     1ad:\t48 8b 54 24 38       \tmov    0x38(%rsp),%rdx\n     1b2:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     1b7:\t48 89 d6             \tmov    %rdx,%rsi\n     1ba:\t48 89 c7             \tmov    %rax,%rdi\n     1bd:\te8 00 00 00 00       \tcallq  1c2 <wav_write_header+0x1c2>\n     1c2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     1c7:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     1cb:\t48 8b 00             \tmov    (%rax),%rax\n     1ce:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     1d2:\t8b 80 08 01 00 00    \tmov    0x108(%rax),%eax\n     1d8:\t83 f8 01             \tcmp    $0x1,%eax\n     1db:\t74 51                \tje     22e <wav_write_header+0x22e>\n     1dd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     1e2:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     1e6:\t8b 80 90 00 00 00    \tmov    0x90(%rax),%eax\n     1ec:\t85 c0                \ttest   %eax,%eax\n     1ee:\t74 3e                \tje     22e <wav_write_header+0x22e>\n     1f0:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     1f5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     1fa:\t48 89 c7             \tmov    %rax,%rdi\n     1fd:\te8 00 00 00 00       \tcallq  202 <wav_write_header+0x202>\n     202:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n     207:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     20c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     211:\t48 89 c7             \tmov    %rax,%rdi\n     214:\te8 00 00 00 00       \tcallq  219 <wav_write_header+0x219>\n     219:\t48 8b 54 24 30       \tmov    0x30(%rsp),%rdx\n     21e:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     223:\t48 89 d6             \tmov    %rdx,%rsi\n     226:\t48 89 c7             \tmov    %rax,%rdi\n     229:\te8 00 00 00 00       \tcallq  22e <wav_write_header+0x22e>\n     22e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     233:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     237:\t48 8b 00             \tmov    (%rax),%rax\n     23a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     23e:\t8b 40 50             \tmov    0x50(%rax),%eax\n     241:\t89 c2                \tmov    %eax,%edx\n     243:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     248:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     24c:\t48 8b 00             \tmov    (%rax),%rax\n     24f:\t89 d1                \tmov    %edx,%ecx\n     251:\tba 01 00 00 00       \tmov    $0x1,%edx\n     256:\tbe 40 00 00 00       \tmov    $0x40,%esi\n     25b:\t48 89 c7             \tmov    %rax,%rdi\n     25e:\te8 00 00 00 00       \tcallq  263 <wav_write_header+0x263>\n     263:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     268:\tc7 40 20 00 00 00 00 \tmovl   $0x0,0x20(%rax)\n     26f:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     274:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n     27b:\t00 \n     27c:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     281:\t48 b9 ff ff ff ff ff \tmovabs $0x7fffffffffffffff,%rcx\n     288:\tff ff 7f \n     28b:\t48 89 48 10          \tmov    %rcx,0x10(%rax)\n     28f:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     294:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     299:\t48 89 c7             \tmov    %rax,%rdi\n     29c:\te8 00 00 00 00       \tcallq  2a1 <wav_write_header+0x2a1>\n     2a1:\t48 8b 54 24 48       \tmov    0x48(%rsp),%rdx\n     2a6:\t48 89 02             \tmov    %rax,(%rdx)\n     2a9:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n     2ae:\t48 89 c7             \tmov    %rax,%rdi\n     2b1:\te8 00 00 00 00       \tcallq  2b6 <wav_write_header+0x2b6>\n     2b6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     2bb:\t48 83 c4 58          \tadd    $0x58,%rsp\n     2bf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall wav_write_header(__int64 <span class=\"supfact\">a1</span>) {\n  const char *v1;\n  __int64 result;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  <span class=\"supfact\">v5</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  avio_wl32(<span class=\"supfact\">v5</span>, ((unsigned __int8)aRiff[Number] << Number) |\n                                    (unsigned __int8)aRiff[Number] |\n                                    ((unsigned __int8)aRiff[Number] << Number) |\n                                    ((unsigned __int8)aRiff[Number] << Number));\n  avio_wl32(<span class=\"supfact\">v5</span>, Number L);\n  avio_wl32(<span class=\"supfact\">v5</span>, ((unsigned __int8)aWave[Number] << Number) |\n                                    (unsigned __int8)aWave[Number] |\n                                    ((unsigned __int8)aWave[Number] << Number) |\n                                    ((unsigned __int8)aWave[Number] << Number));\n  <span class=\"supfact\">v4</span> = ff_start_tag(<span class=\"supfact\">v5</span>, String);\n  if ((int)ff_put_wav_header(\n          <span class=\"supfact\">v5</span>,\n          *(_QWORD *)(**(_QWORD **)(<span class=\"supfact\">a1</span> + Number) + Number L)) >=\n      Number) {\n    ff_end_tag(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v4</span>);\n    if (*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(<span class=\"supfact\">a1</span> + Number) +\n                                Number L) +\n                    Number L) != Number &&\n        *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L)) {\n      <span class=\"supfact\">v3</span> = ff_start_tag(<span class=\"supfact\">v5</span>, String);\n      avio_wl32(<span class=\"supfact\">v5</span>, Number L);\n      ff_end_tag(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v3</span>);\n    }\n    av_set_pts_info(\n        **(_QWORD **)(<span class=\"supfact\">a1</span> + Number), Number L, Number L,\n        *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(<span class=\"supfact\">a1</span> +\n                                                    Number) +\n                                      Number L) +\n                          Number L));\n    *(_DWORD *)(<span class=\"supfact\">v6</span> + Number) = Number;\n    *(_QWORD *)(<span class=\"supfact\">v6</span> + Number) = Number L;\n    *(_QWORD *)(<span class=\"supfact\">v6</span> + Number) = Number;\n    *(_QWORD *)<span class=\"supfact\">v6</span> = ff_start_tag(<span class=\"supfact\">v5</span>, String);\n    avio_flush(<span class=\"supfact\">v5</span>);\n    result = Number L;\n  } else {\n    if (*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(<span class=\"supfact\">a1</span> + Number) +\n                                Number L) +\n                    Number L))\n      v1 = **(const char ***)(*(_QWORD *)(**(_QWORD **)(<span class=\"supfact\">a1</span> +\n                                                        Number) +\n                                          Number L) +\n                              Number L);\n    else\n      v1 = String;\n    av_log(<span class=\"supfact\">a1</span>, Number L, String, v1);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl wav_write_header(AVFormatContext_0 *<span class=\"supfact\">s</span>) {\n  const char *v1;\n  int result;\n  int64_t <span class=\"supfact\">fact</span>;\n  int64_t <span class=\"supfact\">fmt</span>;\n  AVIOContext *<span class=\"supfact\">pb</span>;\n  WAVContext *<span class=\"supfact\">wav</span>;\n  <span class=\"supfact\">wav</span> = (WAVContext *)<span class=\"supfact\">s</span>->priv_data;\n  <span class=\"supfact\">pb</span> = <span class=\"supfact\">s</span>-><span class=\"supfact\">pb</span>;\n  avio_wl32(<span class=\"supfact\">pb</span>, ((unsigned __int8)aRiff[Number] << Number) |\n                                    (unsigned __int8)aRiff[Number] |\n                                    ((unsigned __int8)aRiff[Number] << Number) |\n                                    ((unsigned __int8)aRiff[Number] << Number));\n  avio_wl32(<span class=\"supfact\">pb</span>, Number L);\n  avio_wl32(<span class=\"supfact\">pb</span>, ((unsigned __int8)aWave[Number] << Number) |\n                                    (unsigned __int8)aWave[Number] |\n                                    ((unsigned __int8)aWave[Number] << Number) |\n                                    ((unsigned __int8)aWave[Number] << Number));\n  <span class=\"supfact\">fmt</span> = ff_start_tag(<span class=\"supfact\">pb</span>, String);\n  if ((int)ff_put_wav_header(<span class=\"supfact\">pb</span>,\n                             (*<span class=\"supfact\">s</span>->streams)->codec) >= Number) {\n    ff_end_tag(<span class=\"supfact\">pb</span>, <span class=\"supfact\">fmt</span>);\n    if ((*<span class=\"supfact\">s</span>->streams)->codec->codec_tag != Number &&\n        <span class=\"supfact\">s</span>-><span class=\"supfact\">pb</span>->seekable) {\n      <span class=\"supfact\">fact</span> = ff_start_tag(<span class=\"supfact\">pb</span>, String);\n      avio_wl32(<span class=\"supfact\">pb</span>, Number L);\n      ff_end_tag(<span class=\"supfact\">pb</span>, <span class=\"supfact\">fact</span>);\n    }\n    av_set_pts_info(\n        *<span class=\"supfact\">s</span>->streams, Number L, Number L,\n        (unsigned int)(*<span class=\"supfact\">s</span>->streams)->codec->sample_rate);\n    <span class=\"supfact\">wav</span>->last_duration = Number;\n    <span class=\"supfact\">wav</span>->maxpts = Number L;\n    <span class=\"supfact\">wav</span>->minpts = Number;\n    <span class=\"supfact\">wav</span>->data = ff_start_tag(<span class=\"supfact\">pb</span>, String);\n    avio_flush(<span class=\"supfact\">pb</span>);\n    result = Number;\n  } else {\n    if ((*<span class=\"supfact\">s</span>->streams)->codec->codec)\n      v1 = (*<span class=\"supfact\">s</span>->streams)->codec->codec->name;\n    else\n      v1 = String;\n    av_log(<span class=\"supfact\">s</span>, Number L, String, v1);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "AVFormatContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "AVFormatContext_0 *"}, {"name": "v3", "type": "int64_t", "pred_name": "fact", "ref_name": "fact", "ref_type": "int64_t"}, {"name": "v4", "type": "int64_t", "pred_name": "fmt", "ref_name": "fmt", "ref_type": "int64_t"}, {"name": "v5", "type": "AVIOContext_0 *", "pred_name": "pb", "ref_name": "pb", "ref_type": "AVIOContext *"}, {"name": "v6", "type": "WAVMuxContext_0 *", "pred_name": "wav", "ref_name": "wav", "ref_type": "WAVContext *"}], "body_in_train": false}, {"repo_owner": "mrayy", "repo_name": "ChampionRun", "path": "mrayy/ChampionRun/286bc8ce0ed35b360c520991509f3b838a221eafdfc8a956d0dff612fccebc58", "path_in_repo": "mrayy/ChampionRun/cocos2dx/proj.linux/obj/release/layers_scenes_transitions_nodes/CCLayer.o", "objdump": "0000000000000030 <_ZNK7cocos2d5Layer22isAccelerometerEnabledEv>:\n      30:\t0f b6 87 79 01 00 00 \tmovzbl 0x179(%rdi),%eax\n      37:\tc3                   \tretq   \n      38:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n      3f:\t00 ", "code_s": "__int64 __fastcall cocos2d Layer\nisAccelerometerEnabled(cocos2d Layer *<span class=\"supfact\">this</span>) {\n  return *((unsigned __int8 *)<span class=\"supfact\">this</span> + Number);\n}", "code_t": "__int64 __fastcall cocos2d Layer\nisAccelerometerEnabled(cocos2d Layer *<span class=\"supfact\">this</span>) {\n  return *((unsigned __int8 *)<span class=\"supfact\">this</span> + Number);\n}", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "cocos2d::Layer *"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/37fe6dc57b25b65c49eed93aa72802572312b8d60bcd0721560a1db5be36a81b", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/ssem/ssem.o", "objdump": "0000000000000000 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 60          \tsub    $0x60,%rsp\n   b:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n   f:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  13:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  17:\t89 4d 94             \tmov    %ecx,-0x6c(%rbp)\n  1a:\t48 c7 45 e8 a0 23 00 \tmovq   $0x23a0,-0x18(%rbp)\n  21:\t00 \n  22:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  29:\t00 \n  2a:\tc7 45 dc d3 00 00 00 \tmovl   $0xd3,-0x24(%rbp)\n  31:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  34:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  38:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  3c:\t48 89 ce             \tmov    %rcx,%rsi\n  3f:\t48 89 c7             \tmov    %rax,%rdi\n  42:\te8 00 00 00 00       \tcallq  47 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0x47>\n  47:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4b:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  50:\t75 27                \tjne    79 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0x79>\n  52:\tbf 08 00 00 00       \tmov    $0x8,%edi\n  57:\te8 00 00 00 00       \tcallq  5c <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0x5c>\n  5c:\t48 89 c3             \tmov    %rax,%rbx\n  5f:\t48 89 df             \tmov    %rbx,%rdi\n  62:\te8 00 00 00 00       \tcallq  67 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0x67>\n  67:\tba 00 00 00 00       \tmov    $0x0,%edx\n  6c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  71:\t48 89 df             \tmov    %rbx,%rdi\n  74:\te8 00 00 00 00       \tcallq  79 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0x79>\n  79:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  7d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  81:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  86:\t48 89 c7             \tmov    %rax,%rdi\n  89:\te8 00 00 00 00       \tcallq  8e <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0x8e>\n  8e:\t48 8b 5d d0          \tmov    -0x30(%rbp),%rbx\n  92:\t8b 75 94             \tmov    -0x6c(%rbp),%esi\n  95:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n  99:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n  9d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  a1:\t41 89 f1             \tmov    %esi,%r9d\n  a4:\t49 89 c8             \tmov    %rcx,%r8\n  a7:\t48 89 d1             \tmov    %rdx,%rcx\n  aa:\tba 00 00 00 00       \tmov    $0x0,%edx\n  af:\t48 89 c6             \tmov    %rax,%rsi\n  b2:\t48 89 df             \tmov    %rbx,%rdi\n  b5:\te8 00 00 00 00       \tcallq  ba <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0xba>\n  ba:\teb 16                \tjmp    d2 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0xd2>\n  bc:\t48 83 fa ff          \tcmp    $0xffffffffffffffff,%rdx\n  c0:\t74 08                \tje     ca <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0xca>\n  c2:\t48 89 c7             \tmov    %rax,%rdi\n  c5:\te8 00 00 00 00       \tcallq  ca <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0xca>\n  ca:\t48 89 c7             \tmov    %rax,%rdi\n  cd:\te8 00 00 00 00       \tcallq  d2 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0xd2>\n  d2:\t48 89 de             \tmov    %rbx,%rsi\n  d5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  da:\te8 00 00 00 00       \tcallq  df <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0xdf>\n  df:\teb 3f                \tjmp    120 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0x120>\n  e1:\t49 89 c4             \tmov    %rax,%r12\n  e4:\t48 89 5d c8          \tmov    %rbx,-0x38(%rbp)\n  e8:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n  ef:\t00 \n  f0:\tc7 45 bc d3 00 00 00 \tmovl   $0xd3,-0x44(%rbp)\n  f7:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  fc:\t74 16                \tje     114 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0x114>\n  fe:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n 101:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n 105:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 109:\t48 89 ce             \tmov    %rcx,%rsi\n 10c:\t48 89 c7             \tmov    %rax,%rdi\n 10f:\te8 00 00 00 00       \tcallq  114 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0x114>\n 114:\t90                   \tnop\n 115:\t4c 89 e0             \tmov    %r12,%rax\n 118:\t48 89 c7             \tmov    %rax,%rdi\n 11b:\te8 00 00 00 00       \tcallq  120 <_Z21legacy_device_creatorI11ssem_deviceEP8device_tRK14machine_configPKcS2_j+0x120>\n 120:\t48 83 c4 60          \tadd    $0x60,%rsp\n 124:\t5b                   \tpop    %rbx\n 125:\t41 5c                \tpop    %r12\n 127:\t5d                   \tpop    %rbp\n 128:\tc3                   \tretq   ", "code_s": "__int64 __fastcall legacy_device_creator<ssem_device>(\n    __int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n    __int64 <span class=\"supfact\">a3</span>, unsigned int <span class=\"supfact\">a4</span>) {\n  std bad_alloc *<span class=\"supfact\">v4</span>;\n  _QWORD *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (_QWORD *)malloc_file_line(Number, String, Number);\n  if (!<span class=\"supfact\">s</span>) {\n    <span class=\"supfact\">v4</span> = (std bad_alloc *)_cxa_allocate_exception(Number);\n    std bad_alloc bad_alloc(<span class=\"supfact\">v4</span>); _cxa_throw ( <span class=\"supfact\">v4</span> , ( struct type_info * ) & ` typeinfo for ' std bad_alloc , ( void ( __fastcall * ) ( void * ) ) & std bad_alloc ~ bad_alloc ) ; } memset ( <span class=\"supfact\">s</span> , Number , Number ) ; ssem_device ssem_device ( <span class=\"supfact\">s</span> , <span class=\"supfact\">a1</span> , ( __int64 ) legacy_device_creator < ssem_device > , <span class=\"supfact\">a2</span> , <span class=\"supfact\">a3</span> , <span class=\"supfact\">a4</span> ) ; return resource_pool add_object < ssem_device > ( & global_resource_pool , <span class=\"supfact\">s</span> ) ; }", "code_t": "device_t *__cdecl legacy_device_creator<ssem_device>(\n    const machine_config *<span class=\"supfact\">mconfig</span>,\n    const char *<span class=\"supfact\">tag</span>, device_t *<span class=\"supfact\">owner</span>,\n    UINT32 <span class=\"supfact\">clock</span>) {\n  std bad_alloc *<span class=\"supfact\">v4</span>;\n  ssem_device *<span class=\"supfact\">s</span>;\n  <span class=\"supfact\">s</span> = (ssem_device *)malloc_file_line(Number, String, Number);\n  if (!<span class=\"supfact\">s</span>) {\n    <span class=\"supfact\">v4</span> = (std bad_alloc *)_cxa_allocate_exception(Number);\n    std bad_alloc bad_alloc(<span class=\"supfact\">v4</span>); _cxa_throw ( <span class=\"supfact\">v4</span> , ( struct type_info * ) & ` typeinfo for ' std bad_alloc , ( void ( __fastcall * ) ( void * ) ) & std bad_alloc ~ bad_alloc ) ; } memset ( <span class=\"supfact\">s</span> , Number , sizeof ( ssem_device ) ) ; ssem_device ssem_device ( <span class=\"supfact\">s</span> , <span class=\"supfact\">mconfig</span> , ( device_type ) legacy_device_creator < ssem_device > , <span class=\"supfact\">tag</span> , <span class=\"supfact\">owner</span> , <span class=\"supfact\">clock</span> ) ; return ( device_t * ) resource_pool add_object < ssem_device > ( & global_resource_pool , <span class=\"supfact\">s</span> ) ; }", "var": [{"name": "a1", "type": "const machine_config *", "pred_name": "mconfig", "ref_name": "mconfig", "ref_type": "const machine_config *"}, {"name": "a2", "type": "const char *", "pred_name": "tag", "ref_name": "tag", "ref_type": "const char *"}, {"name": "a3", "type": "device_t *", "pred_name": "owner", "ref_name": "owner", "ref_type": "device_t *"}, {"name": "a4", "type": "UINT32", "pred_name": "clock", "ref_name": "clock", "ref_type": "UINT32"}, {"name": "v4", "type": "std::bad_alloc *", "pred_name": "v4", "ref_name": "v4", "ref_type": "std::bad_alloc *"}, {"name": "s", "type": "mirax_state *", "pred_name": "s", "ref_name": "s", "ref_type": "ssem_device *"}], "body_in_train": false}, {"repo_owner": "euiko", "repo_name": "platchamer", "path": "euiko/platchamer/9572e148d91f0d3cdf2699c65941506d87f60244e957c9ca0b672d5d4665201a", "path_in_repo": "euiko/platchamer/3rdparty/sdl_bgi/src/libSDL_bgi.so", "objdump": "", "code_s": "int __fastcall sector(signed int <span class=\"supfact\">a1</span>,\n                      signed int <span class=\"supfact\">a2</span>, int <span class=\"supfact\">a3</span>,\n                      int <span class=\"supfact\">a4</span>, int <span class=\"supfact\">a5</span>,\n                      int <span class=\"supfact\">a6</span>) {\n  unsigned int <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  unsigned int v8;\n  double v9;\n  unsigned int v10;\n  double v11;\n  int <span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">v15</span>;\n  unsigned int <span class=\"supfact\">v17</span>;\n  int i;\n  int v19;\n  <span class=\"supfact\">v15</span> = <span class=\"supfact\">a4</span>;\n  if (<span class=\"supfact\">a5</span> || <span class=\"supfact\">a6</span>) {\n    if (<span class=\"supfact\">a4</span> < <span class=\"supfact\">a3</span>)\n      <span class=\"supfact\">v15</span> = <span class=\"supfact\">a4</span> + Number;\n    dword_12180 = <span class=\"supfact\">a1</span>;\n    dword_12184 = <span class=\"supfact\">a2</span>;\n    dword_12188 = (int)(cos(Number * (double)<span class=\"supfact\">a3</span>) *\n                            (double)<span class=\"supfact\">a5</span> +\n                        (double)<span class=\"supfact\">a1</span>);\n    dword_1218C = (int)((double)<span class=\"supfact\">a2</span> -\n                        sin(Number * (double)<span class=\"supfact\">a3</span>) *\n                            (double)<span class=\"supfact\">a6</span>);\n    dword_12190 = (int)(cos(Number * (double)<span class=\"supfact\">v15</span>) *\n                            (double)<span class=\"supfact\">a5</span> +\n                        (double)<span class=\"supfact\">a1</span>);\n    dword_12194 = (int)((double)<span class=\"supfact\">a2</span> -\n                        sin(Number * (double)<span class=\"supfact\">v15</span>) *\n                            (double)<span class=\"supfact\">a6</span>);\n    for (i = <span class=\"supfact\">a3</span>; i < <span class=\"supfact\">v15</span>; ++i) {\n      <span class=\"supfact\">v6</span> = (int)((double)<span class=\"supfact\">a2</span> -\n                                 sin(Number * (double)(i + Number)) *\n                                     (double)<span class=\"supfact\">a6</span>);\n      <span class=\"supfact\">v7</span> = (int)(cos(Number * (double)(i + Number)) *\n                                     (double)<span class=\"supfact\">a5</span> +\n                                 (double)<span class=\"supfact\">a1</span>);\n      v8 = (int)((double)<span class=\"supfact\">a2</span> -\n                 sin(Number * (double)i) * (double)<span class=\"supfact\">a6</span>);\n      v9 = cos(Number * (double)i);\n      sub_70CD(\n          (int)(v9 * (double)<span class=\"supfact\">a5</span> + (double)<span class=\"supfact\">a1</span>),\n          v8, <span class=\"supfact\">v7</span>, <span class=\"supfact\">v6</span>);\n    }\n    sub_70CD(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, dword_12188, dword_1218C);\n    sub_70CD(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, dword_12190, dword_12194);\n    <span class=\"supfact\">v17</span> = dword_DAF4;\n    setcolor((unsigned int)dword_1219C);\n    v19 = (<span class=\"supfact\">a3</span> + <span class=\"supfact\">v15</span>) / Number;\n    v10 =\n        (int)((double)<span class=\"supfact\">a2</span> -\n              sin(Number * (double)v19) * (double)<span class=\"supfact\">a6</span> / Number);\n    v11 = cos(Number * (double)v19);\n    floodfill((unsigned int)(int)(v11 * (double)<span class=\"supfact\">a5</span> / Number +\n                                  (double)<span class=\"supfact\">a1</span>),\n              v10, <span class=\"supfact\">v17</span>);\n    <span class=\"supfact\">result</span> = dword_DB04;\n    if (!dword_DB04)\n      <span class=\"supfact\">result</span> = refresh();\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __fastcall sector(signed int <span class=\"supfact\">a1</span>,\n                      signed int <span class=\"supfact\">a2</span>, int <span class=\"supfact\">a3</span>,\n                      int <span class=\"supfact\">a4</span>, int <span class=\"supfact\">a5</span>,\n                      int <span class=\"supfact\">a6</span>) {\n  unsigned int <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  unsigned int v8;\n  double v9;\n  unsigned int v10;\n  double v11;\n  int <span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">v15</span>;\n  unsigned int <span class=\"supfact\">v17</span>;\n  int i;\n  int v19;\n  <span class=\"supfact\">v15</span> = <span class=\"supfact\">a4</span>;\n  if (<span class=\"supfact\">a5</span> || <span class=\"supfact\">a6</span>) {\n    if (<span class=\"supfact\">a4</span> < <span class=\"supfact\">a3</span>)\n      <span class=\"supfact\">v15</span> = <span class=\"supfact\">a4</span> + Number;\n    dword_12180 = <span class=\"supfact\">a1</span>;\n    dword_12184 = <span class=\"supfact\">a2</span>;\n    dword_12188 = (int)(cos(Number * (double)<span class=\"supfact\">a3</span>) *\n                            (double)<span class=\"supfact\">a5</span> +\n                        (double)<span class=\"supfact\">a1</span>);\n    dword_1218C = (int)((double)<span class=\"supfact\">a2</span> -\n                        sin(Number * (double)<span class=\"supfact\">a3</span>) *\n                            (double)<span class=\"supfact\">a6</span>);\n    dword_12190 = (int)(cos(Number * (double)<span class=\"supfact\">v15</span>) *\n                            (double)<span class=\"supfact\">a5</span> +\n                        (double)<span class=\"supfact\">a1</span>);\n    dword_12194 = (int)((double)<span class=\"supfact\">a2</span> -\n                        sin(Number * (double)<span class=\"supfact\">v15</span>) *\n                            (double)<span class=\"supfact\">a6</span>);\n    for (i = <span class=\"supfact\">a3</span>; i < <span class=\"supfact\">v15</span>; ++i) {\n      <span class=\"supfact\">v6</span> = (int)((double)<span class=\"supfact\">a2</span> -\n                                 sin(Number * (double)(i + Number)) *\n                                     (double)<span class=\"supfact\">a6</span>);\n      <span class=\"supfact\">v7</span> = (int)(cos(Number * (double)(i + Number)) *\n                                     (double)<span class=\"supfact\">a5</span> +\n                                 (double)<span class=\"supfact\">a1</span>);\n      v8 = (int)((double)<span class=\"supfact\">a2</span> -\n                 sin(Number * (double)i) * (double)<span class=\"supfact\">a6</span>);\n      v9 = cos(Number * (double)i);\n      sub_70CD(\n          (int)(v9 * (double)<span class=\"supfact\">a5</span> + (double)<span class=\"supfact\">a1</span>),\n          v8, <span class=\"supfact\">v7</span>, <span class=\"supfact\">v6</span>);\n    }\n    sub_70CD(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, dword_12188, dword_1218C);\n    sub_70CD(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, dword_12190, dword_12194);\n    <span class=\"supfact\">v17</span> = dword_DAF4;\n    setcolor((unsigned int)dword_1219C);\n    v19 = (<span class=\"supfact\">a3</span> + <span class=\"supfact\">v15</span>) / Number;\n    v10 =\n        (int)((double)<span class=\"supfact\">a2</span> -\n              sin(Number * (double)v19) * (double)<span class=\"supfact\">a6</span> / Number);\n    v11 = cos(Number * (double)v19);\n    floodfill((unsigned int)(int)(v11 * (double)<span class=\"supfact\">a5</span> / Number +\n                                  (double)<span class=\"supfact\">a1</span>),\n              v10, <span class=\"supfact\">v17</span>);\n    <span class=\"supfact\">result</span> = dword_DB04;\n    if (!dword_DB04)\n      <span class=\"supfact\">result</span> = refresh();\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "int", "pred_name": "a1", "ref_name": "a1", "ref_type": "signed int"}, {"name": "a2", "type": "int", "pred_name": "a2", "ref_name": "a2", "ref_type": "signed int"}, {"name": "a3", "type": "int", "pred_name": "a3", "ref_name": "a3", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "a4", "ref_name": "a4", "ref_type": "int"}, {"name": "a5", "type": "int", "pred_name": "a5", "ref_name": "a5", "ref_type": "int"}, {"name": "a6", "type": "unsigned int", "pred_name": "a6", "ref_name": "a6", "ref_type": "int"}, {"name": "v6", "type": "signed int", "pred_name": "v6", "ref_name": "v6", "ref_type": "unsigned int"}, {"name": "v7", "type": "signed int", "pred_name": "v7", "ref_name": "v7", "ref_type": "unsigned int"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "v15", "type": "int", "pred_name": "v15", "ref_name": "v15", "ref_type": "int"}, {"name": "v17", "type": "int", "pred_name": "v17", "ref_name": "v17", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "waxspin", "repo_name": "FFmpeg", "path": "waxspin/FFmpeg/392c01dc579c6b28b1b61a354d9bfd8f9818f0e16c48346fed9512fa90bdd2ab", "path_in_repo": "waxspin/FFmpeg//libavcodec/v4l2_m2m_enc.o", "objdump": "00000000000001c9 <v4l2_get_ext_ctrl>:\n 1c9:\t48 83 ec 78          \tsub    $0x78,%rsp\n 1cd:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n 1d2:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n 1d6:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n 1db:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n 1df:\t48 c7 44 24 40 00 00 \tmovq   $0x0,0x40(%rsp)\n 1e6:\t00 00 \n 1e8:\t48 c7 44 24 48 00 00 \tmovq   $0x0,0x48(%rsp)\n 1ef:\t00 00 \n 1f1:\t48 c7 44 24 50 00 00 \tmovq   $0x0,0x50(%rsp)\n 1f8:\t00 00 \n 1fa:\t48 c7 44 24 58 00 00 \tmovq   $0x0,0x58(%rsp)\n 201:\t00 00 \n 203:\t48 c7 44 24 20 00 00 \tmovq   $0x0,0x20(%rsp)\n 20a:\t00 00 \n 20c:\t48 c7 44 24 28 00 00 \tmovq   $0x0,0x28(%rsp)\n 213:\t00 00 \n 215:\tc7 44 24 30 00 00 00 \tmovl   $0x0,0x30(%rsp)\n 21c:\t00 \n 21d:\tc7 44 24 40 00 00 99 \tmovl   $0x990000,0x40(%rsp)\n 224:\t00 \n 225:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n 22a:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n 22f:\tc7 44 24 44 01 00 00 \tmovl   $0x1,0x44(%rsp)\n 236:\t00 \n 237:\t8b 44 24 14          \tmov    0x14(%rsp),%eax\n 23b:\t89 44 24 20          \tmov    %eax,0x20(%rsp)\n 23f:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 244:\t8b 80 00 10 00 00    \tmov    0x1000(%rax),%eax\n 24a:\t48 8d 54 24 40       \tlea    0x40(%rsp),%rdx\n 24f:\tbe 47 56 20 c0       \tmov    $0xc0205647,%esi\n 254:\t89 c7                \tmov    %eax,%edi\n 256:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 25b:\te8 00 00 00 00       \tcallq  260 <v4l2_get_ext_ctrl+0x97>\n 260:\t89 44 24 6c          \tmov    %eax,0x6c(%rsp)\n 264:\t83 7c 24 6c 00       \tcmpl   $0x0,0x6c(%rsp)\n 269:\t79 30                \tjns    29b <v4l2_get_ext_ctrl+0xd2>\n 26b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 270:\t48 8b 80 18 12 00 00 \tmov    0x1218(%rax),%rax\n 277:\t48 8b 14 24          \tmov    (%rsp),%rdx\n 27b:\t48 89 d1             \tmov    %rdx,%rcx\n 27e:\tba 00 00 00 00       \tmov    $0x0,%edx\n 283:\tbe 18 00 00 00       \tmov    $0x18,%esi\n 288:\t48 89 c7             \tmov    %rax,%rdi\n 28b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 290:\te8 00 00 00 00       \tcallq  295 <v4l2_get_ext_ctrl+0xcc>\n 295:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n 299:\teb 10                \tjmp    2ab <v4l2_get_ext_ctrl+0xe2>\n 29b:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n 29f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 2a4:\t89 10                \tmov    %edx,(%rax)\n 2a6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2ab:\t48 83 c4 78          \tadd    $0x78,%rsp\n 2af:\tc3                   \tretq   ", "code_s": "__int64 __fastcall v4l2_get_ext_ctrl(__int64 <span class=\"supfact\">a1</span>,\n                                     unsigned int <span class=\"supfact\">a2</span>,\n                                     _DWORD *<span class=\"supfact\">a3</span>,\n                                     const char *<span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>[Number];\n  int <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v10</span>[Number] = Number;\n  <span class=\"supfact\">v10</span>[Number] = Number L;\n  <span class=\"supfact\">v10</span>[Number] = Number L;\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v9</span> = Number;\n  <span class=\"supfact\">v10</span>[Number] = (__int64)&<span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v11</span> = ioctl(*(_DWORD *)(<span class=\"supfact\">a1</span> + Number), Number,\n                              <span class=\"supfact\">v10</span>);\n  if (<span class=\"supfact\">v11</span> >= Number) {\n    *<span class=\"supfact\">a3</span> = HIDWORD(<span class=\"supfact\">v8</span>);\n    <span class=\"supfact\">result</span> = Number L;\n  } else {\n    av_log(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number L, String,\n           <span class=\"supfact\">a4</span>);\n    <span class=\"supfact\">result</span> = (unsigned int)<span class=\"supfact\">v11</span>;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl v4l2_get_ext_ctrl(V4L2m2mContext_0 *<span class=\"supfact\">s</span>,\n                              unsigned int <span class=\"supfact\">id</span>,\n                              int *<span class=\"supfact\">value</span>,\n                              const char *<span class=\"supfact\">name</span>) {\n  int <span class=\"supfact\">result</span>;\n  v4l2_ext_control <span class=\"supfact\">ctrl</span>;\n  v4l2_ext_controls <span class=\"supfact\">ctrls</span>;\n  int <span class=\"supfact\">ret</span>;\n  *(_QWORD *)&<span class=\"supfact\">ctrls</span>._anon_0.ctrl_class = Number;\n  *(_QWORD *)&<span class=\"supfact\">ctrls</span>.error_idx = Number L;\n  *(_QWORD *)&<span class=\"supfact\">ctrls</span>.reserved[Number] = Number L;\n  <span class=\"supfact\">ctrl</span>.size = Number;\n  *(_QWORD *)<span class=\"supfact\">ctrl</span>.reserved2 = Number L;\n  HIDWORD(<span class=\"supfact\">ctrl</span>._anon_0.p_u8) = Number;\n  <span class=\"supfact\">ctrls</span>.controls = &<span class=\"supfact\">ctrl</span>;\n  <span class=\"supfact\">ctrl</span>.<span class=\"supfact\">id</span> = <span class=\"supfact\">id</span>;\n  <span class=\"supfact\">ret</span> =\n      ioctl(<span class=\"supfact\">s</span>->fd, Number, &<span class=\"supfact\">ctrls</span>);\n  if (<span class=\"supfact\">ret</span> >= Number) {\n    *<span class=\"supfact\">value</span> = <span class=\"supfact\">ctrl</span>._anon_0.<span class=\"supfact\">value</span>;\n    <span class=\"supfact\">result</span> = Number;\n  } else {\n    av_log(<span class=\"supfact\">s</span>->avctx, Number L, String, <span class=\"supfact\">name</span>);\n    <span class=\"supfact\">result</span> = <span class=\"supfact\">ret</span>;\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "a1", "type": "V4L2m2mContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "V4L2m2mContext_0 *"}, {"name": "a2", "type": "int", "pred_name": "cmd", "ref_name": "id", "ref_type": "unsigned int"}, {"name": "a3", "type": "const char *", "pred_name": "ifname", "ref_name": "value", "ref_type": "int *"}, {"name": "a4", "type": "void *", "pred_name": "info", "ref_name": "name", "ref_type": "const char *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "v7", "type": "__unk__", "pred_name": "args", "ref_name": "ctrl", "ref_type": "struct v4l2_ext_control { __u32 id; __u32 size; __u32[1] reserved2; $D8D4059C0E1C044467B505BD3DF87A88 _anon_0; }"}, {"name": "v8", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v9", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v10", "type": "__unk__", "pred_name": "__unk__", "ref_name": "ctrls", "ref_type": "struct v4l2_ext_controls { $0E0178647BF21974F5963910765662B1 _anon_0; __u32 count; __u32 error_idx; __u32[2] reserved; PADDING (4); v4l2_ext_control * controls; }"}, {"name": "v11", "type": "int", "pred_name": "ret", "ref_name": "ret", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "FlyingJester", "repo_name": "corona", "path": "FlyingJester/corona/dcd4dc53395c58c73e5e90eac8885be4306c22662e39049b164b4990af3ac85d", "path_in_repo": "FlyingJester/corona//src/DefaultFileSystem.o", "objdump": "0000000000000000 <_ZN6corona5CFileD0Ev>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 fd             \tmov    %rdi,%rbp\n   4:\t48 c7 07 00 00 00 00 \tmovq   $0x0,(%rdi)\n   b:\t48 8b 7f 08          \tmov    0x8(%rdi),%rdi\n   f:\te8 00 00 00 00       \tcallq  14 <_ZN6corona5CFileD0Ev+0x14>\n  14:\t48 89 ef             \tmov    %rbp,%rdi\n  17:\t5d                   \tpop    %rbp\n  18:\te9 00 00 00 00       \tjmpq   1d <_ZN6corona5CFileD0Ev+0x1d>", "code_s": "void __fastcall corona CFile ~CFile(corona CFile *<span class=\"supfact\">this</span>) { * ( _QWORD * ) <span class=\"supfact\">this</span> = & ` vtable for ' corona CFile + Number ; fclose ( * ( ( FILE * * ) <span class=\"supfact\">this</span> + Number ) ) ; operator delete ( <span class=\"supfact\">this</span> ) ; }", "code_t": "void __fastcall corona CFile ~CFile(corona CFile *const <span class=\"supfact\">this</span>) { <span class=\"supfact\">this</span> -> _vptr_DLLInterface = ( int ( * * ) ( ... ) ) ( & ` vtable for ' corona CFile + Number ) ; fclose ( <span class=\"supfact\">this</span> -> m_file ) ; operator delete ( <span class=\"supfact\">this</span> ) ; }", "var": [{"name": "this", "type": "CFile *", "pred_name": "this", "ref_name": "this", "ref_type": "corona::CFile *"}], "body_in_train": false}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/9d9b3cb984271790df9fd014f222508bdb151ed2c5c171fdadfc4d05e72f7a86", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Source/CMakeFiles/CMakeLib.dir/cmComputeLinkDepends.cxx.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 38          \tsub    $0x38,%rsp\n   9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  11:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  15:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  19:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  1e:\t74 58                \tje     78 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x78>\n  20:\t48 8b 5d d8          \tmov    -0x28(%rbp),%rbx\n  24:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  28:\t48 89 c7             \tmov    %rax,%rdi\n  2b:\te8 00 00 00 00       \tcallq  30 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x30>\n  30:\t48 89 c1             \tmov    %rax,%rcx\n  33:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  37:\t48 89 c2             \tmov    %rax,%rdx\n  3a:\t48 89 ce             \tmov    %rcx,%rsi\n  3d:\t48 89 df             \tmov    %rbx,%rdi\n  40:\te8 00 00 00 00       \tcallq  45 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x45>\n  45:\t83 f0 01             \txor    $0x1,%eax\n  48:\t84 c0                \ttest   %al,%al\n  4a:\t74 1a                \tje     66 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x66>\n  4c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  50:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  54:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  58:\t48 89 c7             \tmov    %rax,%rdi\n  5b:\te8 00 00 00 00       \tcallq  60 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x60>\n  60:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  64:\teb b3                \tjmp    19 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x19>\n  66:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  6a:\t48 89 c7             \tmov    %rax,%rdi\n  6d:\te8 00 00 00 00       \tcallq  72 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x72>\n  72:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  76:\teb a1                \tjmp    19 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x19>\n  78:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  7c:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  80:\t48 89 d6             \tmov    %rdx,%rsi\n  83:\t48 89 c7             \tmov    %rax,%rdi\n  86:\te8 00 00 00 00       \tcallq  8b <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x8b>\n  8b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  8f:\t48 83 c4 38          \tadd    $0x38,%rsp\n  93:\t5b                   \tpop    %rbx\n  94:\t5d                   \tpop    %rbp\n  95:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n    _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n             std _Select1st<std pair<cmsys String const, int>>,\n             std less<cmsys String>,\n             std allocator<std pair<cmsys String const, int>>>\n    _M_lower_bound(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n                   __int64 <span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  while (<span class=\"supfact\">a2</span>) {\n    <span class=\"supfact\">v4</span> =\n        std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                     std _Select1st<std pair<cmsys String const, int>>,\n                     std less<cmsys String>,\n                     std allocator<std pair<cmsys String const, int>>>\n            _S_key(<span class=\"supfact\">a2</span>);\n    if ((unsigned __int8)std less<cmsys String> operator()(\n            <span class=\"supfact\">a1</span>, <span class=\"supfact\">v4</span>, <span class=\"supfact\">a4</span>) !=\n        Number) {\n      <span class=\"supfact\">a3</span> = <span class=\"supfact\">a2</span>;\n      <span class=\"supfact\">a2</span> =\n          std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                       std _Select1st<std pair<cmsys String const, int>>,\n                       std less<cmsys String>,\n                       std allocator<std pair<cmsys String const, int>>>\n              _S_left(<span class=\"supfact\">a2</span>);\n    } else {\n      <span class=\"supfact\">a2</span> =\n          std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                       std _Select1st<std pair<cmsys String const, int>>,\n                       std less<cmsys String>,\n                       std allocator<std pair<cmsys String const, int>>>\n              _S_right(<span class=\"supfact\">a2</span>);\n    }\n  }\n  std _Rb_tree_iterator<std pair<cmsys String const, int>> _Rb_tree_iterator(\n      <span class=\"supfact\">v9</span>, <span class=\"supfact\">a3</span>);\n  return <span class=\"supfact\">v9</span>[Number];\n}", "code_t": "__int64 __fastcall std\n    _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n             std _Select1st<std pair<cmsys String const, int>>,\n             std less<cmsys String>,\n             std allocator<std pair<cmsys String const, int>>>\n    _M_lower_bound(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n                   __int64 <span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  while (<span class=\"supfact\">a2</span>) {\n    <span class=\"supfact\">v4</span> =\n        std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                     std _Select1st<std pair<cmsys String const, int>>,\n                     std less<cmsys String>,\n                     std allocator<std pair<cmsys String const, int>>>\n            _S_key(<span class=\"supfact\">a2</span>);\n    if ((unsigned __int8)std less<cmsys String> operator()(\n            <span class=\"supfact\">a1</span>, <span class=\"supfact\">v4</span>, <span class=\"supfact\">a4</span>) !=\n        Number) {\n      <span class=\"supfact\">a3</span> = <span class=\"supfact\">a2</span>;\n      <span class=\"supfact\">a2</span> =\n          std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                       std _Select1st<std pair<cmsys String const, int>>,\n                       std less<cmsys String>,\n                       std allocator<std pair<cmsys String const, int>>>\n              _S_left(<span class=\"supfact\">a2</span>);\n    } else {\n      <span class=\"supfact\">a2</span> =\n          std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                       std _Select1st<std pair<cmsys String const, int>>,\n                       std less<cmsys String>,\n                       std allocator<std pair<cmsys String const, int>>>\n              _S_right(<span class=\"supfact\">a2</span>);\n    }\n  }\n  std _Rb_tree_iterator<std pair<cmsys String const, int>> _Rb_tree_iterator(\n      <span class=\"supfact\">v9</span>, <span class=\"supfact\">a3</span>);\n  return <span class=\"supfact\">v9</span>[Number];\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "__int64"}, {"name": "a4", "type": "__int64", "pred_name": "a4", "ref_name": "a4", "ref_type": "__int64"}, {"name": "v4", "type": "__int64", "pred_name": "v4", "ref_name": "v4", "ref_type": "__int64"}, {"name": "v9", "type": "__int64[3]", "pred_name": "v9", "ref_name": "v9", "ref_type": "__int64[3]"}], "body_in_train": false}, {"repo_owner": "Maxul", "repo_name": "sgx_vmx_protocol", "path": "Maxul/sgx_vmx_protocol/0d155bf3a1b9fdd5f32592f49ecc971ef70cb53ca4fa282943934c11e6eb03d8", "path_in_repo": "Maxul/sgx_vmx_protocol/Sandbox/qemu-sgx-master/hw/acpi/bios-linker-loader.o", "objdump": "000000000000053c <bios_linker_loader_add_pointer>:\n 53c:\t55                   \tpush   %rbp\n 53d:\t48 89 e5             \tmov    %rsp,%rbp\n 540:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n 547:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n 54e:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n 555:\t89 95 3c ff ff ff    \tmov    %edx,-0xc4(%rbp)\n 55b:\t89 c8                \tmov    %ecx,%eax\n 55d:\t4c 89 85 30 ff ff ff \tmov    %r8,-0xd0(%rbp)\n 564:\t44 89 8d 2c ff ff ff \tmov    %r9d,-0xd4(%rbp)\n 56b:\t88 85 38 ff ff ff    \tmov    %al,-0xc8(%rbp)\n 571:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 578:\t00 00 \n 57a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 57e:\t31 c0                \txor    %eax,%eax\n 580:\t48 8b 95 40 ff ff ff \tmov    -0xc0(%rbp),%rdx\n 587:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n 58e:\t48 89 d6             \tmov    %rdx,%rsi\n 591:\t48 89 c7             \tmov    %rax,%rdi\n 594:\te8 67 fb ff ff       \tcallq  100 <bios_linker_find_file>\n 599:\t48 89 85 60 ff ff ff \tmov    %rax,-0xa0(%rbp)\n 5a0:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n 5a7:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n 5ae:\t48 89 d6             \tmov    %rdx,%rsi\n 5b1:\t48 89 c7             \tmov    %rax,%rdi\n 5b4:\te8 47 fb ff ff       \tcallq  100 <bios_linker_find_file>\n 5b9:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n 5c0:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n 5c7:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 5cb:\t8b 40 08             \tmov    0x8(%rax),%eax\n 5ce:\t39 85 3c ff ff ff    \tcmp    %eax,-0xc4(%rbp)\n 5d4:\t72 1f                \tjb     5f5 <bios_linker_loader_add_pointer+0xb9>\n 5d6:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 5dd <bios_linker_loader_add_pointer+0xa1>\n 5dd:\tba 04 01 00 00       \tmov    $0x104,%edx\n 5e2:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 5e9 <bios_linker_loader_add_pointer+0xad>\n 5e9:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5f0 <bios_linker_loader_add_pointer+0xb4>\n 5f0:\te8 00 00 00 00       \tcallq  5f5 <bios_linker_loader_add_pointer+0xb9>\n 5f5:\t0f b6 95 38 ff ff ff \tmovzbl -0xc8(%rbp),%edx\n 5fc:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n 602:\t01 c2                \tadd    %eax,%edx\n 604:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n 60b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 60f:\t8b 40 08             \tmov    0x8(%rax),%eax\n 612:\t39 c2                \tcmp    %eax,%edx\n 614:\t76 1f                \tjbe    635 <bios_linker_loader_add_pointer+0xf9>\n 616:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 61d <bios_linker_loader_add_pointer+0xe1>\n 61d:\tba 05 01 00 00       \tmov    $0x105,%edx\n 622:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 629 <bios_linker_loader_add_pointer+0xed>\n 629:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 630 <bios_linker_loader_add_pointer+0xf4>\n 630:\te8 00 00 00 00       \tcallq  635 <bios_linker_loader_add_pointer+0xf9>\n 635:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n 63c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 640:\t8b 40 08             \tmov    0x8(%rax),%eax\n 643:\t39 85 2c ff ff ff    \tcmp    %eax,-0xd4(%rbp)\n 649:\t72 1f                \tjb     66a <bios_linker_loader_add_pointer+0x12e>\n 64b:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 652 <bios_linker_loader_add_pointer+0x116>\n 652:\tba 06 01 00 00       \tmov    $0x106,%edx\n 657:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 65e <bios_linker_loader_add_pointer+0x122>\n 65e:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 665 <bios_linker_loader_add_pointer+0x129>\n 665:\te8 00 00 00 00       \tcallq  66a <bios_linker_loader_add_pointer+0x12e>\n 66a:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 671:\tba 80 00 00 00       \tmov    $0x80,%edx\n 676:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 67b:\t48 89 c7             \tmov    %rax,%rdi\n 67e:\te8 00 00 00 00       \tcallq  683 <bios_linker_loader_add_pointer+0x147>\n 683:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n 68a:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n 691:\t48 8d 4a 04          \tlea    0x4(%rdx),%rcx\n 695:\tba 37 00 00 00       \tmov    $0x37,%edx\n 69a:\t48 89 c6             \tmov    %rax,%rsi\n 69d:\t48 89 cf             \tmov    %rcx,%rdi\n 6a0:\te8 00 00 00 00       \tcallq  6a5 <bios_linker_loader_add_pointer+0x169>\n 6a5:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n 6ac:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n 6b3:\t48 8d 4a 3c          \tlea    0x3c(%rdx),%rcx\n 6b7:\tba 37 00 00 00       \tmov    $0x37,%edx\n 6bc:\t48 89 c6             \tmov    %rax,%rsi\n 6bf:\t48 89 cf             \tmov    %rcx,%rdi\n 6c2:\te8 00 00 00 00       \tcallq  6c7 <bios_linker_loader_add_pointer+0x18b>\n 6c7:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 6cc:\te8 2f f9 ff ff       \tcallq  0 <cpu_to_le32>\n 6d1:\t89 85 70 ff ff ff    \tmov    %eax,-0x90(%rbp)\n 6d7:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n 6dd:\t89 c7                \tmov    %eax,%edi\n 6df:\te8 1c f9 ff ff       \tcallq  0 <cpu_to_le32>\n 6e4:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 6e7:\t0f b6 85 38 ff ff ff \tmovzbl -0xc8(%rbp),%eax\n 6ee:\t88 45 e8             \tmov    %al,-0x18(%rbp)\n 6f1:\t80 bd 38 ff ff ff 01 \tcmpb   $0x1,-0xc8(%rbp)\n 6f8:\t74 3a                \tje     734 <bios_linker_loader_add_pointer+0x1f8>\n 6fa:\t80 bd 38 ff ff ff 02 \tcmpb   $0x2,-0xc8(%rbp)\n 701:\t74 31                \tje     734 <bios_linker_loader_add_pointer+0x1f8>\n 703:\t80 bd 38 ff ff ff 04 \tcmpb   $0x4,-0xc8(%rbp)\n 70a:\t74 28                \tje     734 <bios_linker_loader_add_pointer+0x1f8>\n 70c:\t80 bd 38 ff ff ff 08 \tcmpb   $0x8,-0xc8(%rbp)\n 713:\t74 1f                \tje     734 <bios_linker_loader_add_pointer+0x1f8>\n 715:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 71c <bios_linker_loader_add_pointer+0x1e0>\n 71c:\tba 10 01 00 00       \tmov    $0x110,%edx\n 721:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 728 <bios_linker_loader_add_pointer+0x1ec>\n 728:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 72f <bios_linker_loader_add_pointer+0x1f3>\n 72f:\te8 00 00 00 00       \tcallq  734 <bios_linker_loader_add_pointer+0x1f8>\n 734:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n 73a:\t48 89 c7             \tmov    %rax,%rdi\n 73d:\te8 ca f8 ff ff       \tcallq  c <cpu_to_le64>\n 742:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n 749:\t0f b6 95 38 ff ff ff \tmovzbl -0xc8(%rbp),%edx\n 750:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n 757:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 75b:\t48 8b 08             \tmov    (%rax),%rcx\n 75e:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n 764:\t48 01 c1             \tadd    %rax,%rcx\n 767:\t48 8d 85 58 ff ff ff \tlea    -0xa8(%rbp),%rax\n 76e:\t48 89 c6             \tmov    %rax,%rsi\n 771:\t48 89 cf             \tmov    %rcx,%rdi\n 774:\te8 00 00 00 00       \tcallq  779 <bios_linker_loader_add_pointer+0x23d>\n 779:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n 780:\t48 8b 00             \tmov    (%rax),%rax\n 783:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n 78a:\tba 80 00 00 00       \tmov    $0x80,%edx\n 78f:\t48 89 ce             \tmov    %rcx,%rsi\n 792:\t48 89 c7             \tmov    %rax,%rdi\n 795:\te8 00 00 00 00       \tcallq  79a <bios_linker_loader_add_pointer+0x25e>\n 79a:\t90                   \tnop\n 79b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 79f:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 7a6:\t00 00 \n 7a8:\t74 05                \tje     7af <bios_linker_loader_add_pointer+0x273>\n 7aa:\te8 00 00 00 00       \tcallq  7af <bios_linker_loader_add_pointer+0x273>\n 7af:\tc9                   \tleaveq \n 7b0:\tc3                   \tretq   \n", "code_s": "unsigned __int64 __fastcall bios_linker_loader_add_pointer(\n    _QWORD *<span class=\"supfact\">a1</span>, const char *<span class=\"supfact\">a2</span>,\n    unsigned int <span class=\"supfact\">a3</span>, unsigned __int8 <span class=\"supfact\">a4</span>,\n    const char *<span class=\"supfact\">a5</span>, unsigned int <span class=\"supfact\">a6</span>) {\n  __int64 <span class=\"supfact\">v11</span>;\n  const char **<span class=\"supfact\">v12</span>;\n  const char **<span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">s</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v15</span> = __readfsqword(Number);\n  <span class=\"supfact\">v12</span> =\n      bios_linker_find_file((__int64)<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>);\n  <span class=\"supfact\">v13</span> =\n      bios_linker_find_file((__int64)<span class=\"supfact\">a1</span>, <span class=\"supfact\">a5</span>);\n  if (<span class=\"supfact\">a3</span> >= *((_DWORD *)<span class=\"supfact\">v12</span>[Number] + Number))\n    _assert_fail(String, String, Number, String);\n  if (<span class=\"supfact\">a3</span> + <span class=\"supfact\">a4</span> >\n      *((_DWORD *)<span class=\"supfact\">v12</span>[Number] + Number))\n    _assert_fail(String, String, Number, String);\n  if (<span class=\"supfact\">a6</span> >= *((_DWORD *)<span class=\"supfact\">v13</span>[Number] + Number))\n    _assert_fail(String, String, Number, String);\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  strncpy((char *)&<span class=\"supfact\">s</span>[Number], <span class=\"supfact\">a2</span>, Number);\n  strncpy((char *)&<span class=\"supfact\">s</span>[Number], <span class=\"supfact\">a5</span>, Number);\n  <span class=\"supfact\">s</span>[Number] = cpu_to_le32(Number);\n  <span class=\"supfact\">s</span>[Number] = cpu_to_le32(<span class=\"supfact\">a3</span>);\n  LOBYTE(<span class=\"supfact\">s</span>[Number]) = <span class=\"supfact\">a4</span>;\n  if (<span class=\"supfact\">a4</span> != Number && <span class=\"supfact\">a4</span> != Number &&\n      <span class=\"supfact\">a4</span> != Number && <span class=\"supfact\">a4</span> != Number)\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v11</span> = cpu_to_le64(<span class=\"supfact\">a6</span>);\n  memcpy((void *)(<span class=\"supfact\">a3</span> + *(_QWORD *)<span class=\"supfact\">v12</span>[Number]),\n         &<span class=\"supfact\">v11</span>, <span class=\"supfact\">a4</span>);\n  g_array_append_vals(*<span class=\"supfact\">a1</span>, <span class=\"supfact\">s</span>, Number L);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v15</span>;\n}", "code_t": "void __cdecl bios_linker_loader_add_pointer(\n    BIOSLinker_0 *<span class=\"supfact\">linker</span>, const char *<span class=\"supfact\">dest_file</span>,\n    uint32_t <span class=\"supfact\">dst_patched_offset</span>,\n    uint8_t <span class=\"supfact\">dst_patched_size</span>,\n    const char *<span class=\"supfact\">src_file</span>, uint32_t <span class=\"supfact\">src_offset</span>) {\n  uint64_t <span class=\"supfact\">le_src_offset</span>;\n  const BiosLinkerFileEntry_0 *<span class=\"supfact\">dst_file</span>;\n  const BiosLinkerFileEntry_0 *<span class=\"supfact\">source_file</span>;\n  BiosLinkerLoaderEntry_0 <span class=\"supfact\">entry</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v14</span> = __readfsqword(Number);\n  <span class=\"supfact\">dst_file</span> =\n      bios_linker_find_file(<span class=\"supfact\">linker</span>, <span class=\"supfact\">dest_file</span>);\n  <span class=\"supfact\">source_file</span> =\n      bios_linker_find_file(<span class=\"supfact\">linker</span>, <span class=\"supfact\">src_file</span>);\n  if (<span class=\"supfact\">dst_patched_offset</span> >= <span class=\"supfact\">dst_file</span>->blob->len)\n    _assert_fail(String, String, Number, String);\n  if (<span class=\"supfact\">dst_patched_offset</span> + <span class=\"supfact\">dst_patched_size</span> >\n      <span class=\"supfact\">dst_file</span>->blob->len)\n    _assert_fail(String, String, Number, String);\n  if (<span class=\"supfact\">src_offset</span> >= <span class=\"supfact\">source_file</span>->blob->len)\n    _assert_fail(String, String, Number, String);\n  memset(&<span class=\"supfact\">entry</span>, Number, sizeof(<span class=\"supfact\">entry</span>));\n  strncpy(<span class=\"supfact\">entry</span>._anon_0.alloc.file, <span class=\"supfact\">dest_file</span>,\n          Number);\n  strncpy(<span class=\"supfact\">entry</span>._anon_0.pointer.<span class=\"supfact\">src_file</span>,\n          <span class=\"supfact\">src_file</span>, Number);\n  <span class=\"supfact\">entry</span>.command = cpu_to_le32(Number);\n  <span class=\"supfact\">entry</span>._anon_0.pointer.offset =\n      cpu_to_le32(<span class=\"supfact\">dst_patched_offset</span>);\n  <span class=\"supfact\">entry</span>._anon_0.pointer.size = <span class=\"supfact\">dst_patched_size</span>;\n  if (<span class=\"supfact\">dst_patched_size</span> != Number &&\n      <span class=\"supfact\">dst_patched_size</span> != Number &&\n      <span class=\"supfact\">dst_patched_size</span> != Number &&\n      <span class=\"supfact\">dst_patched_size</span> != Number)\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">le_src_offset</span> = cpu_to_le64(<span class=\"supfact\">src_offset</span>);\n  memcpy(\n      &<span class=\"supfact\">dst_file</span>->blob->data[<span class=\"supfact\">dst_patched_offset</span>],\n      &<span class=\"supfact\">le_src_offset</span>, <span class=\"supfact\">dst_patched_size</span>);\n  g_array_append_vals(<span class=\"supfact\">linker</span>->cmd_blob, &<span class=\"supfact\">entry</span>,\n                      Number L);\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "opaque", "ref_name": "linker", "ref_type": "BIOSLinker_0 *"}, {"name": "a2", "type": "const uint8_t *", "pred_name": "buf", "ref_name": "dest_file", "ref_type": "const char *"}, {"name": "a3", "type": "int", "pred_name": "size", "ref_name": "dst_patched_offset", "ref_type": "uint32_t"}, {"name": "a4", "type": "bool", "pred_name": "update", "ref_name": "dst_patched_size", "ref_type": "uint8_t"}, {"name": "a5", "type": "off_t", "pred_name": "offset", "ref_name": "src_file", "ref_type": "const char *"}, {"name": "a6", "type": "uint32_t", "pred_name": "len", "ref_name": "src_offset", "ref_type": "uint32_t"}, {"name": "v11", "type": "__unk__", "pred_name": "__unk__", "ref_name": "le_src_offset", "ref_type": "uint64_t"}, {"name": "v12", "type": "__unk__", "pred_name": "di_0", "ref_name": "dst_file", "ref_type": "const BiosLinkerFileEntry_0 *"}, {"name": "v13", "type": "disappear", "pred_name": "", "ref_name": "source_file", "ref_type": "const BiosLinkerFileEntry_0 *"}, {"name": "s", "type": "__unk__", "pred_name": "di_0", "ref_name": "entry", "ref_type": "struct BiosLinkerLoaderEntry_0 { uint32_t command; $A8D27074B79C4580A0AC877F82F7C4E5 _anon_0; }"}, {"name": "v15", "type": "unsigned __int64", "pred_name": "v15", "ref_name": "v14", "ref_type": "unsigned __int64"}], "body_in_train": false}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/9d9b3cb984271790df9fd014f222508bdb151ed2c5c171fdadfc4d05e72f7a86", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Source/CMakeFiles/CMakeLib.dir/cmComputeLinkDepends.cxx.o", "objdump": "0000000000000000 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 38          \tsub    $0x38,%rsp\n   9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  11:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  15:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  19:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  1e:\t74 58                \tje     78 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x78>\n  20:\t48 8b 5d d8          \tmov    -0x28(%rbp),%rbx\n  24:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  28:\t48 89 c7             \tmov    %rax,%rdi\n  2b:\te8 00 00 00 00       \tcallq  30 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x30>\n  30:\t48 89 c1             \tmov    %rax,%rcx\n  33:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  37:\t48 89 c2             \tmov    %rax,%rdx\n  3a:\t48 89 ce             \tmov    %rcx,%rsi\n  3d:\t48 89 df             \tmov    %rbx,%rdi\n  40:\te8 00 00 00 00       \tcallq  45 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x45>\n  45:\t83 f0 01             \txor    $0x1,%eax\n  48:\t84 c0                \ttest   %al,%al\n  4a:\t74 1a                \tje     66 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x66>\n  4c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  50:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  54:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  58:\t48 89 c7             \tmov    %rax,%rdi\n  5b:\te8 00 00 00 00       \tcallq  60 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x60>\n  60:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  64:\teb b3                \tjmp    19 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x19>\n  66:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  6a:\t48 89 c7             \tmov    %rax,%rdi\n  6d:\te8 00 00 00 00       \tcallq  72 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x72>\n  72:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  76:\teb a1                \tjmp    19 <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x19>\n  78:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  7c:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  80:\t48 89 d6             \tmov    %rdx,%rsi\n  83:\t48 89 c7             \tmov    %rax,%rdi\n  86:\te8 00 00 00 00       \tcallq  8b <_ZNSt8_Rb_treeIN5cmsys6StringESt4pairIKS1_iESt10_Select1stIS4_ESt4lessIS1_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS3_+0x8b>\n  8b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  8f:\t48 83 c4 38          \tadd    $0x38,%rsp\n  93:\t5b                   \tpop    %rbx\n  94:\t5d                   \tpop    %rbp\n  95:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n    _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n             std _Select1st<std pair<cmsys String const, int>>,\n             std less<cmsys String>,\n             std allocator<std pair<cmsys String const, int>>>\n    _M_lower_bound(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n                   __int64 <span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  while (<span class=\"supfact\">a2</span>) {\n    <span class=\"supfact\">v4</span> =\n        std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                     std _Select1st<std pair<cmsys String const, int>>,\n                     std less<cmsys String>,\n                     std allocator<std pair<cmsys String const, int>>>\n            _S_key(<span class=\"supfact\">a2</span>);\n    if ((unsigned __int8)std less<cmsys String> operator()(\n            <span class=\"supfact\">a1</span>, <span class=\"supfact\">v4</span>, <span class=\"supfact\">a4</span>) !=\n        Number) {\n      <span class=\"supfact\">a3</span> = <span class=\"supfact\">a2</span>;\n      <span class=\"supfact\">a2</span> =\n          std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                       std _Select1st<std pair<cmsys String const, int>>,\n                       std less<cmsys String>,\n                       std allocator<std pair<cmsys String const, int>>>\n              _S_left(<span class=\"supfact\">a2</span>);\n    } else {\n      <span class=\"supfact\">a2</span> =\n          std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                       std _Select1st<std pair<cmsys String const, int>>,\n                       std less<cmsys String>,\n                       std allocator<std pair<cmsys String const, int>>>\n              _S_right(<span class=\"supfact\">a2</span>);\n    }\n  }\n  std _Rb_tree_iterator<std pair<cmsys String const, int>> _Rb_tree_iterator(\n      <span class=\"supfact\">v9</span>, <span class=\"supfact\">a3</span>);\n  return <span class=\"supfact\">v9</span>[Number];\n}", "code_t": "__int64 __fastcall std\n    _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n             std _Select1st<std pair<cmsys String const, int>>,\n             std less<cmsys String>,\n             std allocator<std pair<cmsys String const, int>>>\n    _M_lower_bound(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n                   __int64 <span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  while (<span class=\"supfact\">a2</span>) {\n    <span class=\"supfact\">v4</span> =\n        std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                     std _Select1st<std pair<cmsys String const, int>>,\n                     std less<cmsys String>,\n                     std allocator<std pair<cmsys String const, int>>>\n            _S_key(<span class=\"supfact\">a2</span>);\n    if ((unsigned __int8)std less<cmsys String> operator()(\n            <span class=\"supfact\">a1</span>, <span class=\"supfact\">v4</span>, <span class=\"supfact\">a4</span>) !=\n        Number) {\n      <span class=\"supfact\">a3</span> = <span class=\"supfact\">a2</span>;\n      <span class=\"supfact\">a2</span> =\n          std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                       std _Select1st<std pair<cmsys String const, int>>,\n                       std less<cmsys String>,\n                       std allocator<std pair<cmsys String const, int>>>\n              _S_left(<span class=\"supfact\">a2</span>);\n    } else {\n      <span class=\"supfact\">a2</span> =\n          std _Rb_tree<cmsys String, std pair<cmsys String const, int>,\n                       std _Select1st<std pair<cmsys String const, int>>,\n                       std less<cmsys String>,\n                       std allocator<std pair<cmsys String const, int>>>\n              _S_right(<span class=\"supfact\">a2</span>);\n    }\n  }\n  std _Rb_tree_iterator<std pair<cmsys String const, int>> _Rb_tree_iterator(\n      <span class=\"supfact\">v9</span>, <span class=\"supfact\">a3</span>);\n  return <span class=\"supfact\">v9</span>[Number];\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "__int64"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "__int64"}, {"name": "a4", "type": "__int64", "pred_name": "a4", "ref_name": "a4", "ref_type": "__int64"}, {"name": "v4", "type": "__int64", "pred_name": "v4", "ref_name": "v4", "ref_type": "__int64"}, {"name": "v9", "type": "__int64[3]", "pred_name": "v9", "ref_name": "v9", "ref_type": "__int64[3]"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/1ccdc7a16e0460c308f33b23061c7204da58cf8e87ec9292898ab638c5302fd0", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_l.o", "objdump": "00000000000041da <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t>:\n    41da:\t55                   \tpush   %rbp\n    41db:\t48 89 e5             \tmov    %rsp,%rbp\n    41de:\t48 83 ec 20          \tsub    $0x20,%rsp\n    41e2:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    41e6:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    41ea:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    41f1:\t00 \n    41f2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    41f6:\tba 08 00 00 00       \tmov    $0x8,%edx\n    41fb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4200:\t48 89 c7             \tmov    %rax,%rdi\n    4203:\te8 00 00 00 00       \tcallq  4208 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x2e>\n    4208:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    420c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4210:\t48 89 d1             \tmov    %rdx,%rcx\n    4213:\tba ff 5f 00 00       \tmov    $0x5fff,%edx\n    4218:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    421d:\t48 89 c7             \tmov    %rax,%rdi\n    4220:\te8 00 00 00 00       \tcallq  4225 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x4b>\n    4225:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4229:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    422d:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    4232:\t48 89 c7             \tmov    %rax,%rdi\n    4235:\te8 00 00 00 00       \tcallq  423a <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x60>\n    423a:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    423e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4242:\t48 89 d1             \tmov    %rdx,%rcx\n    4245:\tba ff 7f 00 00       \tmov    $0x7fff,%edx\n    424a:\tbe 00 60 00 00       \tmov    $0x6000,%esi\n    424f:\t48 89 c7             \tmov    %rax,%rdi\n    4252:\te8 00 00 00 00       \tcallq  4257 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x7d>\n    4257:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    425b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    425f:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    4263:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4268:\t48 89 ce             \tmov    %rcx,%rsi\n    426b:\t48 89 c7             \tmov    %rax,%rdi\n    426e:\te8 00 00 00 00       \tcallq  4273 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x99>\n    4273:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    4277:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    427b:\t48 89 d1             \tmov    %rdx,%rcx\n    427e:\tba ff cf 00 00       \tmov    $0xcfff,%edx\n    4283:\tbe 00 c0 00 00       \tmov    $0xc000,%esi\n    4288:\t48 89 c7             \tmov    %rax,%rdi\n    428b:\te8 00 00 00 00       \tcallq  4290 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0xb6>\n    4290:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4294:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4298:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    429c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    42a1:\t48 89 ce             \tmov    %rcx,%rsi\n    42a4:\t48 89 c7             \tmov    %rax,%rdi\n    42a7:\te8 00 00 00 00       \tcallq  42ac <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0xd2>\n    42ac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    42b0:\tba 00 00 00 00       \tmov    $0x0,%edx\n    42b5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    42ba:\t48 89 c7             \tmov    %rax,%rdi\n    42bd:\te8 00 00 00 00       \tcallq  42c2 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0xe8>\n    42c2:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    42c6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    42ca:\t48 89 d1             \tmov    %rdx,%rcx\n    42cd:\tba ff df 00 00       \tmov    $0xdfff,%edx\n    42d2:\tbe 00 d0 00 00       \tmov    $0xd000,%esi\n    42d7:\t48 89 c7             \tmov    %rax,%rdi\n    42da:\te8 00 00 00 00       \tcallq  42df <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x105>\n    42df:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    42e3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    42e7:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    42eb:\tba 00 00 00 00       \tmov    $0x0,%edx\n    42f0:\t48 89 ce             \tmov    %rcx,%rsi\n    42f3:\t48 89 c7             \tmov    %rax,%rdi\n    42f6:\te8 00 00 00 00       \tcallq  42fb <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x121>\n    42fb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    42ff:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4304:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4309:\t48 89 c7             \tmov    %rax,%rdi\n    430c:\te8 00 00 00 00       \tcallq  4311 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x137>\n    4311:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    4315:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4319:\t48 89 d1             \tmov    %rdx,%rcx\n    431c:\tba ff ef 00 00       \tmov    $0xefff,%edx\n    4321:\tbe 00 e0 00 00       \tmov    $0xe000,%esi\n    4326:\t48 89 c7             \tmov    %rax,%rdi\n    4329:\te8 00 00 00 00       \tcallq  432e <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x154>\n    432e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4332:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4336:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    433a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    433f:\t48 89 ce             \tmov    %rcx,%rsi\n    4342:\t48 89 c7             \tmov    %rax,%rdi\n    4345:\te8 00 00 00 00       \tcallq  434a <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x170>\n    434a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    434e:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4353:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4358:\t48 89 c7             \tmov    %rax,%rdi\n    435b:\te8 00 00 00 00       \tcallq  4360 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x186>\n    4360:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    4364:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4368:\t48 89 d1             \tmov    %rdx,%rcx\n    436b:\tba ff fd 00 00       \tmov    $0xfdff,%edx\n    4370:\tbe 00 f0 00 00       \tmov    $0xf000,%esi\n    4375:\t48 89 c7             \tmov    %rax,%rdi\n    4378:\te8 00 00 00 00       \tcallq  437d <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x1a3>\n    437d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4381:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4385:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    4389:\tba 00 00 00 00       \tmov    $0x0,%edx\n    438e:\t48 89 ce             \tmov    %rcx,%rsi\n    4391:\t48 89 c7             \tmov    %rax,%rdi\n    4394:\te8 00 00 00 00       \tcallq  4399 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x1bf>\n    4399:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    439d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    43a2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    43a7:\t48 89 c7             \tmov    %rax,%rdi\n    43aa:\te8 00 00 00 00       \tcallq  43af <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x1d5>\n    43af:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    43b3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    43b7:\t48 89 d1             \tmov    %rdx,%rcx\n    43ba:\tba 03 fe 00 00       \tmov    $0xfe03,%edx\n    43bf:\tbe 00 fe 00 00       \tmov    $0xfe00,%esi\n    43c4:\t48 89 c7             \tmov    %rax,%rdi\n    43c7:\te8 00 00 00 00       \tcallq  43cc <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x1f2>\n    43cc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    43d0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    43d4:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    43da:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    43df:\tba 00 00 00 00       \tmov    $0x0,%edx\n    43e4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    43e9:\t48 89 c7             \tmov    %rax,%rdi\n    43ec:\te8 00 00 00 00       \tcallq  43f1 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x217>\n    43f1:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    43f5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    43f9:\t48 89 d1             \tmov    %rdx,%rcx\n    43fc:\tba 04 fe 00 00       \tmov    $0xfe04,%edx\n    4401:\tbe 04 fe 00 00       \tmov    $0xfe04,%esi\n    4406:\t48 89 c7             \tmov    %rax,%rdi\n    4409:\te8 00 00 00 00       \tcallq  440e <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x234>\n    440e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4412:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4416:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    441c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    4421:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4426:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    442b:\t48 89 c7             \tmov    %rax,%rdi\n    442e:\te8 00 00 00 00       \tcallq  4433 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x259>\n    4433:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    4437:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    443b:\t48 89 d1             \tmov    %rdx,%rcx\n    443e:\tba 02 ff 00 00       \tmov    $0xff02,%edx\n    4443:\tbe 00 ff 00 00       \tmov    $0xff00,%esi\n    4448:\t48 89 c7             \tmov    %rax,%rdi\n    444b:\te8 00 00 00 00       \tcallq  4450 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x276>\n    4450:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4454:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4458:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    445e:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    4463:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4468:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    446d:\t48 89 c7             \tmov    %rax,%rdi\n    4470:\te8 00 00 00 00       \tcallq  4475 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x29b>\n    4475:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    4479:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    447d:\t48 89 d1             \tmov    %rdx,%rcx\n    4480:\tba 03 ff 00 00       \tmov    $0xff03,%edx\n    4485:\tbe 03 ff 00 00       \tmov    $0xff03,%esi\n    448a:\t48 89 c7             \tmov    %rax,%rdi\n    448d:\te8 00 00 00 00       \tcallq  4492 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x2b8>\n    4492:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4496:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    449a:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    44a0:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    44a5:\tba 00 00 00 00       \tmov    $0x0,%edx\n    44aa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    44af:\t48 89 c7             \tmov    %rax,%rdi\n    44b2:\te8 00 00 00 00       \tcallq  44b7 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x2dd>\n    44b7:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    44bb:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    44bf:\t48 89 d1             \tmov    %rdx,%rcx\n    44c2:\tba 07 ff 00 00       \tmov    $0xff07,%edx\n    44c7:\tbe 04 ff 00 00       \tmov    $0xff04,%esi\n    44cc:\t48 89 c7             \tmov    %rax,%rdi\n    44cf:\te8 00 00 00 00       \tcallq  44d4 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x2fa>\n    44d4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    44d8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    44dc:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    44e2:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    44e7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    44ec:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    44f1:\t48 89 c7             \tmov    %rax,%rdi\n    44f4:\te8 00 00 00 00       \tcallq  44f9 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x31f>\n    44f9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    44fd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4501:\t48 89 d1             \tmov    %rdx,%rcx\n    4504:\tba 08 ff 00 00       \tmov    $0xff08,%edx\n    4509:\tbe 08 ff 00 00       \tmov    $0xff08,%esi\n    450e:\t48 89 c7             \tmov    %rax,%rdi\n    4511:\te8 00 00 00 00       \tcallq  4516 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x33c>\n    4516:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    451a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    451e:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    4524:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    4529:\tba 00 00 00 00       \tmov    $0x0,%edx\n    452e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4533:\t48 89 c7             \tmov    %rax,%rdi\n    4536:\te8 00 00 00 00       \tcallq  453b <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x361>\n    453b:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    453f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4543:\t48 89 d1             \tmov    %rdx,%rcx\n    4546:\tba 03 a0 00 00       \tmov    $0xa003,%edx\n    454b:\tbe 00 a0 00 00       \tmov    $0xa000,%esi\n    4550:\t48 89 c7             \tmov    %rax,%rdi\n    4553:\te8 00 00 00 00       \tcallq  4558 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x37e>\n    4558:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    455c:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n    4560:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4564:\t48 83 ec 08          \tsub    $0x8,%rsp\n    4568:\t68 00 00 00 00       \tpushq  $0x0\n    456d:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    4573:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    4579:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    457e:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4583:\t48 89 c7             \tmov    %rax,%rdi\n    4586:\te8 00 00 00 00       \tcallq  458b <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x3b1>\n    458b:\t48 83 c4 10          \tadd    $0x10,%rsp\n    458f:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    4593:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4597:\t48 89 d1             \tmov    %rdx,%rcx\n    459a:\tba ff 9f 00 00       \tmov    $0x9fff,%edx\n    459f:\tbe 00 80 00 00       \tmov    $0x8000,%esi\n    45a4:\t48 89 c7             \tmov    %rax,%rdi\n    45a7:\te8 00 00 00 00       \tcallq  45ac <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x3d2>\n    45ac:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    45b0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    45b4:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    45b9:\t48 89 c7             \tmov    %rax,%rdi\n    45bc:\te8 00 00 00 00       \tcallq  45c1 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x3e7>\n    45c1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    45c5:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    45ca:\t48 89 c7             \tmov    %rax,%rdi\n    45cd:\te8 00 00 00 00       \tcallq  45d2 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x3f8>\n    45d2:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    45d6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    45da:\t48 89 d1             \tmov    %rdx,%rcx\n    45dd:\tba 00 a8 00 00       \tmov    $0xa800,%edx\n    45e2:\tbe 00 a8 00 00       \tmov    $0xa800,%esi\n    45e7:\t48 89 c7             \tmov    %rax,%rdi\n    45ea:\te8 00 00 00 00       \tcallq  45ef <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x415>\n    45ef:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    45f3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    45f7:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    45fc:\t48 89 c7             \tmov    %rax,%rdi\n    45ff:\te8 00 00 00 00       \tcallq  4604 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x42a>\n    4604:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    4608:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    460c:\t48 89 d1             \tmov    %rdx,%rcx\n    460f:\tba ff b7 00 00       \tmov    $0xb7ff,%edx\n    4614:\tbe 00 b0 00 00       \tmov    $0xb000,%esi\n    4619:\t48 89 c7             \tmov    %rax,%rdi\n    461c:\te8 00 00 00 00       \tcallq  4621 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x447>\n    4621:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4625:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4629:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    462e:\t48 89 c7             \tmov    %rax,%rdi\n    4631:\te8 00 00 00 00       \tcallq  4636 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x45c>\n    4636:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    463a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    463f:\t48 89 c7             \tmov    %rax,%rdi\n    4642:\te8 00 00 00 00       \tcallq  4647 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x46d>\n    4647:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    464b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    464f:\t48 89 d1             \tmov    %rdx,%rcx\n    4652:\tba 00 b8 00 00       \tmov    $0xb800,%edx\n    4657:\tbe 00 b8 00 00       \tmov    $0xb800,%esi\n    465c:\t48 89 c7             \tmov    %rax,%rdi\n    465f:\te8 00 00 00 00       \tcallq  4664 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x48a>\n    4664:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4668:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    466c:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    4672:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    4677:\tba 00 00 00 00       \tmov    $0x0,%edx\n    467c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4681:\t48 89 c7             \tmov    %rax,%rdi\n    4684:\te8 00 00 00 00       \tcallq  4689 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x4af>\n    4689:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    468d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4691:\t48 89 d1             \tmov    %rdx,%rcx\n    4694:\tba 01 b8 00 00       \tmov    $0xb801,%edx\n    4699:\tbe 01 b8 00 00       \tmov    $0xb801,%esi\n    469e:\t48 89 c7             \tmov    %rax,%rdi\n    46a1:\te8 00 00 00 00       \tcallq  46a6 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x4cc>\n    46a6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    46aa:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    46ae:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    46b4:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    46b9:\tba 00 00 00 00       \tmov    $0x0,%edx\n    46be:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    46c3:\t48 89 c7             \tmov    %rax,%rdi\n    46c6:\te8 00 00 00 00       \tcallq  46cb <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x4f1>\n    46cb:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    46cf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    46d3:\t48 89 d1             \tmov    %rdx,%rcx\n    46d6:\tba 00 bc 00 00       \tmov    $0xbc00,%edx\n    46db:\tbe 00 bc 00 00       \tmov    $0xbc00,%esi\n    46e0:\t48 89 c7             \tmov    %rax,%rdi\n    46e3:\te8 00 00 00 00       \tcallq  46e8 <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x50e>\n    46e8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    46ec:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    46f0:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    46f5:\t48 89 c7             \tmov    %rax,%rdi\n    46f8:\te8 00 00 00 00       \tcallq  46fd <_ZL33construct_address_map_puzznic_mapR11address_mapRK8device_t+0x523>\n    46fd:\t90                   \tnop\n    46fe:\tc9                   \tleaveq \n    46ff:\tc3                   \tretq   ", "code_s": "__int64 __fastcall construct_address_map_puzznic_map(\n    address_map *<span class=\"supfact\">a1</span>, const device_t *<span class=\"supfact\">a2</span>) {\n  address_map_entry *v3;\n  address_map *v4;\n  address_map *v5;\n  address_map *v6;\n  address_map *v7;\n  address_map *v8;\n  address_map_entry *v9;\n  address_map_entry *v10;\n  address_map_entry *v11;\n  address_map_entry *v12;\n  address_map_entry *v13;\n  address_map_entry *v14;\n  address_map_entry *v15;\n  address_map_entry *v16;\n  address_map_entry *v17;\n  address_map_entry *v18;\n  address_map_entry *v19;\n  address_map_entry *v20;\n  address_map_entry *v21;\n  address_map configure(<span class=\"supfact\">a1</span>, Number L, Number L);\n  v3 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, Number L);\n  address_map_entry set_read_type(v3, Number L);\n  v4 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v3);\n  address_map_entry set_read_bank(v4, <span class=\"supfact\">a2</span>, String);\n  v5 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v4);\n  address_map_entry set_read_bank(v5, <span class=\"supfact\">a2</span>, String);\n  address_map_entry8 set_handler(\n      v5,\n      (void(__fastcall *)(address_space *, unsigned int,\n                          unsigned __int8))bank0_w,\n      String);\n  v6 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v5);\n  address_map_entry set_read_bank(v6, <span class=\"supfact\">a2</span>, String);\n  address_map_entry8 set_handler(\n      v6,\n      (void(__fastcall *)(address_space *, unsigned int,\n                          unsigned __int8))bank1_w,\n      String);\n  v7 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v6);\n  address_map_entry set_read_bank(v7, <span class=\"supfact\">a2</span>, String);\n  address_map_entry8 set_handler(\n      v7,\n      (void(__fastcall *)(address_space *, unsigned int,\n                          unsigned __int8))bank2_w,\n      String);\n  v8 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v7);\n  address_map_entry set_read_bank(v8, <span class=\"supfact\">a2</span>, String);\n  address_map_entry8 set_handler(\n      v8,\n      (void(__fastcall *)(address_space *, unsigned int,\n                          unsigned __int8))bank3_w,\n      String);\n  v9 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v8);\n  address_map_entry8 set_handler(\n      v9,\n      (unsigned __int8(__fastcall *)(address_space *, unsigned int)) &\n          taitol_bankc_r,\n      String,\n      (void(__fastcall *)(address_space *, unsigned int, unsigned __int8)) &\n          taitol_bankc_w,\n      String);\n  v10 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v9);\n  address_map_entry8 set_handler(\n      v10,\n      (unsigned __int8(__fastcall *)(address_space *, unsigned int)) &\n          taitol_control_r,\n      String,\n      (void(__fastcall *)(address_space *, unsigned int, unsigned __int8)) &\n          taitol_control_w,\n      String);\n  v11 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v10);\n  address_map_entry8 set_handler(\n      v11,\n      (unsigned __int8(__fastcall *)(address_space *, unsigned int))irq_adr_r,\n      String,\n      (void(__fastcall *)(address_space *, unsigned int,\n                          unsigned __int8))irq_adr_w,\n      String);\n  v12 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v11);\n  address_map_entry8 set_handler(\n      v12,\n      (unsigned __int8(__fastcall *)(address_space *,\n                                     unsigned int))irq_enable_r,\n      String,\n      (void(__fastcall *)(address_space *, unsigned int,\n                          unsigned __int8))irq_enable_w,\n      String);\n  v13 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v12);\n  address_map_entry8 set_handler(\n      v13,\n      (unsigned __int8(__fastcall *)(address_space *,\n                                     unsigned int))rambankswitch_r,\n      String,\n      (void(__fastcall *)(address_space *, unsigned int,\n                          unsigned __int8))rambankswitch_w,\n      String);\n  v14 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v13);\n  address_map_entry8 set_handler(\n      v14,\n      (unsigned __int8(__fastcall *)(address_space *,\n                                     unsigned int))rombankswitch_r,\n      String,\n      (void(__fastcall *)(address_space *, unsigned int,\n                          unsigned __int8))rombankswitch_w,\n      String);\n  v15 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v14);\n  address_map_entry8 set_handler(\n      v15, <span class=\"supfact\">a2</span>, String,\n      (unsigned __int8(__fastcall *)(device_t *,\n                                     unsigned int))extport_select_and_ym2203_r,\n      String,\n      (void(__fastcall *)(device_t *, unsigned int, unsigned __int8)) &\n          ym2203_w,\n      String);\n  v16 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v15);\n  address_map_entry set_read_type(v16, Number L);\n  address_map_entry set_write_type(v16, Number L);\n  v17 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v16);\n  address_map_entry set_read_type(v17, Number L);\n  v18 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v17);\n  address_map_entry set_read_type(v18, Number L);\n  address_map_entry set_write_type(v18, Number L);\n  v19 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v18);\n  address_map_entry8 set_handler(\n      v19,\n      (unsigned __int8(__fastcall *)(address_space *, unsigned int))mcu_data_r,\n      String,\n      (void(__fastcall *)(address_space *, unsigned int,\n                          unsigned __int8))mcu_data_w,\n      String);\n  v20 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v19);\n  address_map_entry8 set_handler(\n      v20,\n      (unsigned __int8(__fastcall *)(address_space *,\n                                     unsigned int))mcu_control_r,\n      String,\n      (void(__fastcall *)(address_space *, unsigned int,\n                          unsigned __int8))mcu_control_w,\n      String);\n  v21 = address_map add(<span class=\"supfact\">a1</span>, Number, Number, v20);\n  return address_map_entry set_write_type(v21, Number L);\n}", "code_t": "void __cdecl construct_address_map_puzznic_map(\n    address_map *<span class=\"supfact\">map</span>, const device_t *<span class=\"supfact\">device</span>) {\n  address_map_entry8 *curentry;\n  address_map_entry8 *curentrya;\n  address_map_entry8 *curentryb;\n  address_map_entry8 *curentryc;\n  address_map_entry8 *curentryd;\n  address_map_entry8 *curentrye;\n  address_map_entry8 *curentryf;\n  address_map_entry8 *curentryg;\n  address_map_entry8 *curentryh;\n  address_map_entry8 *curentryi;\n  address_map_entry8 *curentryj;\n  address_map_entry8 *curentryk;\n  address_map_entry8 *curentryl;\n  address_map_entry8 *curentrym;\n  address_map_entry8 *curentryn;\n  address_map_entry8 *curentryo;\n  address_map_entry8 *curentryp;\n  address_map_entry8 *curentryq;\n  address_map_entry8 *curentryr;\n  address_map configure(<span class=\"supfact\">map</span>, AS_0, Number);\n  curentry = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                   Number, Number L);\n  address_map_entry set_read_type(curentry, AMH_ROM);\n  curentrya = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentry);\n  address_map_entry set_read_bank(curentrya, <span class=\"supfact\">device</span>, String);\n  curentryb = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentrya);\n  address_map_entry set_read_bank(curentryb, <span class=\"supfact\">device</span>, String);\n  address_map_entry8 set_handler(curentryb, (write8_space_func)bank0_w, String);\n  curentryc = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryb);\n  address_map_entry set_read_bank(curentryc, <span class=\"supfact\">device</span>, String);\n  address_map_entry8 set_handler(curentryc, (write8_space_func)bank1_w, String);\n  curentryd = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryc);\n  address_map_entry set_read_bank(curentryd, <span class=\"supfact\">device</span>, String);\n  address_map_entry8 set_handler(curentryd, (write8_space_func)bank2_w, String);\n  curentrye = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryd);\n  address_map_entry set_read_bank(curentrye, <span class=\"supfact\">device</span>, String);\n  address_map_entry8 set_handler(curentrye, (write8_space_func)bank3_w, String);\n  curentryf = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentrye);\n  address_map_entry8 set_handler(curentryf, (read8_space_func)&taitol_bankc_r,\n                                 String, (write8_space_func)&taitol_bankc_w,\n                                 String);\n  curentryg = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryf);\n  address_map_entry8 set_handler(curentryg, (read8_space_func)&taitol_control_r,\n                                 String, (write8_space_func)&taitol_control_w,\n                                 String);\n  curentryh = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryg);\n  address_map_entry8 set_handler(curentryh, (read8_space_func)irq_adr_r, String,\n                                 (write8_space_func)irq_adr_w, String);\n  curentryi = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryh);\n  address_map_entry8 set_handler(curentryi, (read8_space_func)irq_enable_r,\n                                 String, (write8_space_func)irq_enable_w,\n                                 String);\n  curentryj = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryi);\n  address_map_entry8 set_handler(curentryj, (read8_space_func)rambankswitch_r,\n                                 String, (write8_space_func)rambankswitch_w,\n                                 String);\n  curentryk = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryj);\n  address_map_entry8 set_handler(curentryk, (read8_space_func)rombankswitch_r,\n                                 String, (write8_space_func)rombankswitch_w,\n                                 String);\n  curentryl = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryk);\n  address_map_entry8 set_handler(curentryl, <span class=\"supfact\">device</span>, String,\n                                 (read8_device_func)extport_select_and_ym2203_r,\n                                 String, (write8_device_func)&ym2203_w, String);\n  curentrym = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryl);\n  address_map_entry set_read_type(curentrym, AMH_RAM);\n  address_map_entry set_write_type(curentrym, AMH_RAM);\n  curentryn = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentrym);\n  address_map_entry set_read_type(curentryn, AMH_NOP);\n  curentryo = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryn);\n  address_map_entry set_read_type(curentryo, AMH_RAM);\n  address_map_entry set_write_type(curentryo, AMH_RAM);\n  curentryp = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryo);\n  address_map_entry8 set_handler(curentryp, (read8_space_func)mcu_data_r,\n                                 String, (write8_space_func)mcu_data_w, String);\n  curentryq = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryp);\n  address_map_entry8 set_handler(curentryq, (read8_space_func)mcu_control_r,\n                                 String, (write8_space_func)mcu_control_w,\n                                 String);\n  curentryr = (address_map_entry8 *)address_map add(<span class=\"supfact\">map</span>, Number,\n                                                    Number, curentryq);\n  address_map_entry set_write_type(curentryr, AMH_NOP);\n}", "var": [{"name": "a1", "type": "address_map *", "pred_name": "map", "ref_name": "map", "ref_type": "address_map *"}, {"name": "a2", "type": "const device_t *", "pred_name": "device", "ref_name": "device", "ref_type": "const device_t *"}], "body_in_train": false}, {"repo_owner": "CPFL", "repo_name": "xen", "path": "CPFL/xen/0e5bf2f71ed1105d21fb873dae88a8e862b63709a1fe541f6e568ebfe99bd28c", "path_in_repo": "CPFL/xen/xen/arch/x86/acpi/built_in.o", "objdump": "000000000000739c <powernow_cpufreq_update>:\n    739c:\t55                   \tpush   %rbp\n    739d:\t48 89 e5             \tmov    %rsp,%rbp\n    73a0:\t48 83 ec 10          \tsub    $0x10,%rsp\n    73a4:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    73a7:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    73ab:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    73ae:\t89 c7                \tmov    %eax,%edi\n    73b0:\te8 fb fb ff ff       \tcallq  6fb0 <cpumask_check>\n    73b5:\t89 c2                \tmov    %eax,%edx\n    73b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 73be <powernow_cpufreq_update+0x22>\n    73be:\t48 89 c6             \tmov    %rax,%rsi\n    73c1:\t89 d7                \tmov    %edx,%edi\n    73c3:\te8 1f fb ff ff       \tcallq  6ee7 <variable_test_bit>\n    73c8:\t85 c0                \ttest   %eax,%eax\n    73ca:\t75 07                \tjne    73d3 <powernow_cpufreq_update+0x37>\n    73cc:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    73d1:\teb 2a                \tjmp    73fd <powernow_cpufreq_update+0x61>\n    73d3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    73d6:\t89 c7                \tmov    %eax,%edi\n    73d8:\te8 97 fd ff ff       \tcallq  7174 <cpumask_of>\n    73dd:\t48 89 c7             \tmov    %rax,%rdi\n    73e0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    73e4:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    73e9:\t48 89 c2             \tmov    %rax,%rdx\n    73ec:\t48 8d 35 36 ff ff ff \tlea    -0xca(%rip),%rsi        # 7329 <update_cpb>\n    73f3:\te8 00 00 00 00       \tcallq  73f8 <powernow_cpufreq_update+0x5c>\n    73f8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    73fd:\tc9                   \tleaveq \n    73fe:\tc3                   \tretq   ", "code_s": "__int64 __fastcall powernow_cpufreq_update(unsigned int <span class=\"supfact\">a1</span>,\n                                           __int64 <span class=\"supfact\">a2</span>) {\n  unsigned int v2;\n  char *v4;\n  v2 = cpumask_check_3(<span class=\"supfact\">a1</span>);\n  if (!(unsigned int)variable_test_bit_3(v2, &cpu_online_map))\n    return Number L;\n  v4 = cpumask_of_2(<span class=\"supfact\">a1</span>);\n  on_selected_cpus(v4, update_cpb, <span class=\"supfact\">a2</span>, Number L);\n  return Number L;\n}", "code_t": "int __cdecl powernow_cpufreq_update(int <span class=\"supfact\">cpuid</span>,\n                                    cpufreq_policy *<span class=\"supfact\">policy</span>) {\n  int v2;\n  const cpumask_t *v4;\n  v2 = cpumask_check_3(<span class=\"supfact\">cpuid</span>);\n  if (!variable_test_bit_3(v2, &cpu_online_map))\n    return Number;\n  v4 = cpumask_of_2(<span class=\"supfact\">cpuid</span>);\n  on_selected_cpus(v4, update_cpb, <span class=\"supfact\">policy</span>, Number L);\n  return Number;\n}", "var": [{"name": "a1", "type": "unsigned int", "pred_name": "cpu", "ref_name": "cpuid", "ref_type": "int"}, {"name": "a2", "type": "cpufreq_affected_cpus *", "pred_name": "cpus", "ref_name": "policy", "ref_type": "cpufreq_policy *"}], "body_in_train": false}, {"repo_owner": "mrkj", "repo_name": "abc", "path": "mrkj/abc/d4fbeb2190e48d633a51e2997716fc4a448cf9e4bd7db05a92c0634530c486e1", "path_in_repo": "mrkj/abc//src/aig/dar/darScript.o", "objdump": "00000000000003a2 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii>:\n     3a2:\t41 56                \tpush   %r14\n     3a4:\t41 55                \tpush   %r13\n     3a6:\t41 54                \tpush   %r12\n     3a8:\t55                   \tpush   %rbp\n     3a9:\t53                   \tpush   %rbx\n     3aa:\t48 83 ec 50          \tsub    $0x50,%rsp\n     3ae:\t48 89 fb             \tmov    %rdi,%rbx\n     3b1:\t41 89 f5             \tmov    %esi,%r13d\n     3b4:\t89 d5                \tmov    %edx,%ebp\n     3b6:\t41 89 ce             \tmov    %ecx,%r14d\n     3b9:\t45 89 c4             \tmov    %r8d,%r12d\n     3bc:\t48 8d 7c 24 20       \tlea    0x20(%rsp),%rdi\n     3c1:\te8 00 00 00 00       \tcallq  3c6 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x24>\n     3c6:\t48 89 e7             \tmov    %rsp,%rdi\n     3c9:\te8 00 00 00 00       \tcallq  3ce <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x2c>\n     3ce:\t89 6c 24 2c          \tmov    %ebp,0x2c(%rsp)\n     3d2:\t89 6c 24 10          \tmov    %ebp,0x10(%rsp)\n     3d6:\t44 89 74 24 34       \tmov    %r14d,0x34(%rsp)\n     3db:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n     3e2:\t00 \n     3e3:\tc7 44 24 18 00 00 00 \tmovl   $0x0,0x18(%rsp)\n     3ea:\t00 \n     3eb:\t48 89 df             \tmov    %rbx,%rdi\n     3ee:\te8 00 00 00 00       \tcallq  3f3 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x51>\n     3f3:\t48 89 c3             \tmov    %rax,%rbx\n     3f6:\t45 85 e4             \ttest   %r12d,%r12d\n     3f9:\t0f 85 87 00 00 00    \tjne    486 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0xe4>\n     3ff:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n     404:\t48 89 c7             \tmov    %rax,%rdi\n     407:\te8 00 00 00 00       \tcallq  40c <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x6a>\n     40c:\t48 89 df             \tmov    %rbx,%rdi\n     40f:\te8 00 00 00 00       \tcallq  414 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x72>\n     414:\t49 89 c4             \tmov    %rax,%r12\n     417:\t48 89 df             \tmov    %rbx,%rdi\n     41a:\te8 00 00 00 00       \tcallq  41f <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x7d>\n     41f:\t48 89 e6             \tmov    %rsp,%rsi\n     422:\t4c 89 e7             \tmov    %r12,%rdi\n     425:\te8 00 00 00 00       \tcallq  42a <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x88>\n     42a:\t4c 89 e7             \tmov    %r12,%rdi\n     42d:\te8 00 00 00 00       \tcallq  432 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x90>\n     432:\t49 89 c6             \tmov    %rax,%r14\n     435:\t4c 89 e7             \tmov    %r12,%rdi\n     438:\te8 00 00 00 00       \tcallq  43d <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x9b>\n     43d:\t45 85 ed             \ttest   %r13d,%r13d\n     440:\t0f 85 dc 00 00 00    \tjne    522 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x180>\n     446:\tc7 44 24 30 01 00 00 \tmovl   $0x1,0x30(%rsp)\n     44d:\t00 \n     44e:\tc7 44 24 14 01 00 00 \tmovl   $0x1,0x14(%rsp)\n     455:\t00 \n     456:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n     45b:\t4c 89 f7             \tmov    %r14,%rdi\n     45e:\te8 00 00 00 00       \tcallq  463 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0xc1>\n     463:\t4c 89 f7             \tmov    %r14,%rdi\n     466:\te8 00 00 00 00       \tcallq  46b <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0xc9>\n     46b:\t48 89 c3             \tmov    %rax,%rbx\n     46e:\t4c 89 f7             \tmov    %r14,%rdi\n     471:\te8 00 00 00 00       \tcallq  476 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0xd4>\n     476:\t48 89 d8             \tmov    %rbx,%rax\n     479:\t48 83 c4 50          \tadd    $0x50,%rsp\n     47d:\t5b                   \tpop    %rbx\n     47e:\t5d                   \tpop    %rbp\n     47f:\t41 5c                \tpop    %r12\n     481:\t41 5d                \tpop    %r13\n     483:\t41 5e                \tpop    %r14\n     485:\tc3                   \tretq   \n     486:\t48 89 c7             \tmov    %rax,%rdi\n     489:\te8 00 00 00 00       \tcallq  48e <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0xec>\n     48e:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n     493:\t48 89 df             \tmov    %rbx,%rdi\n     496:\te8 00 00 00 00       \tcallq  49b <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0xf9>\n     49b:\t48 89 df             \tmov    %rbx,%rdi\n     49e:\te8 00 00 00 00       \tcallq  4a3 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x101>\n     4a3:\t49 89 c4             \tmov    %rax,%r12\n     4a6:\t48 89 df             \tmov    %rbx,%rdi\n     4a9:\te8 00 00 00 00       \tcallq  4ae <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x10c>\n     4ae:\t4c 89 e7             \tmov    %r12,%rdi\n     4b1:\te8 00 00 00 00       \tcallq  4b6 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x114>\n     4b6:\t48 89 e6             \tmov    %rsp,%rsi\n     4b9:\t4c 89 e7             \tmov    %r12,%rdi\n     4bc:\te8 00 00 00 00       \tcallq  4c1 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x11f>\n     4c1:\t4c 89 e7             \tmov    %r12,%rdi\n     4c4:\te8 00 00 00 00       \tcallq  4c9 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x127>\n     4c9:\t49 89 c6             \tmov    %rax,%r14\n     4cc:\t4c 89 e7             \tmov    %r12,%rdi\n     4cf:\te8 00 00 00 00       \tcallq  4d4 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x132>\n     4d4:\t4c 89 f7             \tmov    %r14,%rdi\n     4d7:\te8 00 00 00 00       \tcallq  4dc <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x13a>\n     4dc:\t45 85 ed             \ttest   %r13d,%r13d\n     4df:\t0f 85 87 00 00 00    \tjne    56c <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x1ca>\n     4e5:\tc7 44 24 30 01 00 00 \tmovl   $0x1,0x30(%rsp)\n     4ec:\t00 \n     4ed:\tc7 44 24 14 01 00 00 \tmovl   $0x1,0x14(%rsp)\n     4f4:\t00 \n     4f5:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n     4fa:\t4c 89 f7             \tmov    %r14,%rdi\n     4fd:\te8 00 00 00 00       \tcallq  502 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x160>\n     502:\t4c 89 f7             \tmov    %r14,%rdi\n     505:\te8 00 00 00 00       \tcallq  50a <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x168>\n     50a:\t48 89 c3             \tmov    %rax,%rbx\n     50d:\t4c 89 f7             \tmov    %r14,%rdi\n     510:\te8 00 00 00 00       \tcallq  515 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x173>\n     515:\t48 89 df             \tmov    %rbx,%rdi\n     518:\te8 00 00 00 00       \tcallq  51d <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x17b>\n     51d:\te9 54 ff ff ff       \tjmpq   476 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0xd4>\n     522:\t89 ee                \tmov    %ebp,%esi\n     524:\t4c 89 f7             \tmov    %r14,%rdi\n     527:\te8 00 00 00 00       \tcallq  52c <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x18a>\n     52c:\t48 89 c5             \tmov    %rax,%rbp\n     52f:\t4c 89 f7             \tmov    %r14,%rdi\n     532:\te8 00 00 00 00       \tcallq  537 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x195>\n     537:\tc7 44 24 30 01 00 00 \tmovl   $0x1,0x30(%rsp)\n     53e:\t00 \n     53f:\tc7 44 24 14 01 00 00 \tmovl   $0x1,0x14(%rsp)\n     546:\t00 \n     547:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n     54c:\t48 89 ef             \tmov    %rbp,%rdi\n     54f:\te8 00 00 00 00       \tcallq  554 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x1b2>\n     554:\t48 89 ef             \tmov    %rbp,%rdi\n     557:\te8 00 00 00 00       \tcallq  55c <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x1ba>\n     55c:\t48 89 c3             \tmov    %rax,%rbx\n     55f:\t48 89 ef             \tmov    %rbp,%rdi\n     562:\te8 00 00 00 00       \tcallq  567 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x1c5>\n     567:\te9 0a ff ff ff       \tjmpq   476 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0xd4>\n     56c:\t89 ee                \tmov    %ebp,%esi\n     56e:\t4c 89 f7             \tmov    %r14,%rdi\n     571:\te8 00 00 00 00       \tcallq  576 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x1d4>\n     576:\t48 89 c5             \tmov    %rax,%rbp\n     579:\t4c 89 f7             \tmov    %r14,%rdi\n     57c:\te8 00 00 00 00       \tcallq  581 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x1df>\n     581:\t48 89 ef             \tmov    %rbp,%rdi\n     584:\te8 00 00 00 00       \tcallq  589 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x1e7>\n     589:\tc7 44 24 30 01 00 00 \tmovl   $0x1,0x30(%rsp)\n     590:\t00 \n     591:\tc7 44 24 14 01 00 00 \tmovl   $0x1,0x14(%rsp)\n     598:\t00 \n     599:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n     59e:\t48 89 ef             \tmov    %rbp,%rdi\n     5a1:\te8 00 00 00 00       \tcallq  5a6 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x204>\n     5a6:\t48 89 ef             \tmov    %rbp,%rdi\n     5a9:\te8 00 00 00 00       \tcallq  5ae <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x20c>\n     5ae:\t48 89 c3             \tmov    %rax,%rbx\n     5b1:\t48 89 ef             \tmov    %rbp,%rdi\n     5b4:\te8 00 00 00 00       \tcallq  5b9 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x217>\n     5b9:\te9 57 ff ff ff       \tjmpq   515 <_ZN3xxx15Dar_ManCompressEPNS_10Aig_Man_t_Eiiii+0x173>", "code_s": "__int64 __fastcall xxx Dar_ManCompress(__int64 <span class=\"supfact\">a1</span>,\n                                       int <span class=\"supfact\">a2</span>,\n                                       unsigned int <span class=\"supfact\">a3</span>,\n                                       int <span class=\"supfact\">a4</span>,\n                                       int <span class=\"supfact\">a5</span>) {\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  _DWORD <span class=\"supfact\">v18</span>[Number];\n  int <span class=\"supfact\">v19</span>;\n  int <span class=\"supfact\">v20</span>;\n  char <span class=\"supfact\">v21</span>[Number];\n  unsigned int <span class=\"supfact\">v22</span>;\n  int <span class=\"supfact\">v23</span>;\n  int <span class=\"supfact\">v24</span>;\n  int <span class=\"supfact\">v25</span>;\n  xxx Dar_ManDefaultRwrParams(<span class=\"supfact\">v21</span>);\n  xxx Dar_ManDefaultRefParams(<span class=\"supfact\">v18</span>);\n  <span class=\"supfact\">v22</span> = <span class=\"supfact\">a3</span>;\n  <span class=\"supfact\">v18</span>[Number] = <span class=\"supfact\">a3</span>;\n  <span class=\"supfact\">v24</span> = <span class=\"supfact\">a4</span>;\n  <span class=\"supfact\">v25</span> = Number;\n  <span class=\"supfact\">v20</span> = Number;\n  <span class=\"supfact\">v8</span> = xxx Aig_ManDupDfs(<span class=\"supfact\">a1</span>);\n  v9 = <span class=\"supfact\">v8</span>;\n  if (<span class=\"supfact\">a5</span>) {\n    xxx Aig_ManPrintStats(<span class=\"supfact\">v8</span>);\n    xxx Dar_ManRewrite(v9, <span class=\"supfact\">v21</span>);\n    v14 = xxx Aig_ManDupDfs(v9);\n    xxx Aig_ManStop(v9);\n    xxx Aig_ManPrintStats(v14);\n    xxx Dar_ManRefactor(v14, <span class=\"supfact\">v18</span>);\n    v15 = xxx Aig_ManDupDfs(v14);\n    xxx Aig_ManStop(v14);\n    xxx Aig_ManPrintStats(v15);\n    if (<span class=\"supfact\">a2</span>) {\n      v17 = xxx Dar_ManBalance(v15, <span class=\"supfact\">a3</span>);\n      xxx Aig_ManStop(v15);\n      xxx Aig_ManPrintStats(v17);\n      <span class=\"supfact\">v23</span> = Number;\n      <span class=\"supfact\">v19</span> = Number;\n      xxx Dar_ManRewrite(v17, <span class=\"supfact\">v21</span>);\n      v12 = xxx Aig_ManDupDfs(v17);\n      xxx Aig_ManStop(v17);\n    } else {\n      <span class=\"supfact\">v23</span> = Number;\n      <span class=\"supfact\">v19</span> = Number;\n      xxx Dar_ManRewrite(v15, <span class=\"supfact\">v21</span>);\n      v12 = xxx Aig_ManDupDfs(v15);\n      xxx Aig_ManStop(v15);\n    }\n    xxx Aig_ManPrintStats(v12);\n  } else {\n    xxx Dar_ManRewrite(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v21</span>);\n    v10 = xxx Aig_ManDupDfs(v9);\n    xxx Aig_ManStop(v9);\n    xxx Dar_ManRefactor(v10, <span class=\"supfact\">v18</span>);\n    v11 = xxx Aig_ManDupDfs(v10);\n    xxx Aig_ManStop(v10);\n    if (<span class=\"supfact\">a2</span>) {\n      v16 = xxx Dar_ManBalance(v11, <span class=\"supfact\">a3</span>);\n      xxx Aig_ManStop(v11);\n      <span class=\"supfact\">v23</span> = Number;\n      <span class=\"supfact\">v19</span> = Number;\n      xxx Dar_ManRewrite(v16, <span class=\"supfact\">v21</span>);\n      v12 = xxx Aig_ManDupDfs(v16);\n      xxx Aig_ManStop(v16);\n    } else {\n      <span class=\"supfact\">v23</span> = Number;\n      <span class=\"supfact\">v19</span> = Number;\n      xxx Dar_ManRewrite(v11, <span class=\"supfact\">v21</span>);\n      v12 = xxx Aig_ManDupDfs(v11);\n      xxx Aig_ManStop(v11);\n    }\n  }\n  return v12;\n}", "code_t": "xxx Aig_Man_t *__fastcall xxx\nDar_ManCompress(xxx Aig_Man_t *<span class=\"supfact\">pAig</span>,\n                int <span class=\"supfact\">fBalance</span>, int <span class=\"supfact\">fUpdateLevel</span>,\n                int <span class=\"supfact\">fPower</span>, int <span class=\"supfact\">fVerbose</span>) {\n  xxx *<span class=\"supfact\">v8</span>;\n  xxx Dar_RwrPar_t_ *v9;\n  xxx *v10;\n  xxx *v11;\n  xxx Dar_RefPar_t_ *v12;\n  xxx *v13;\n  xxx Dar_RwrPar_t_ *v14;\n  xxx *v15;\n  xxx Dar_RwrPar_t_ *v17;\n  xxx *v18;\n  xxx Dar_RefPar_t_ *v19;\n  xxx *v20;\n  xxx Dar_RwrPar_t_ *v21;\n  xxx Aig_Man_t_ *v22;\n  xxx *v23;\n  xxx Dar_RwrPar_t_ *v24;\n  xxx Aig_Man_t_ *v25;\n  xxx *v26;\n  xxx Dar_RwrPar_t_ *v27;\n  xxx Dar_RefPar_t <span class=\"supfact\">ParsRef</span>;\n  xxx Dar_RwrPar_t <span class=\"supfact\">ParsRwr</span>;\n  xxx Dar_ManDefaultRwrParams((xxx *)&<span class=\"supfact\">ParsRwr</span>,\n                              *(xxx Dar_RwrPar_t_ **)&<span class=\"supfact\">fBalance</span>);\n  xxx Dar_ManDefaultRefParams((xxx *)&<span class=\"supfact\">ParsRef</span>,\n                              *(xxx Dar_RefPar_t_ **)&<span class=\"supfact\">fBalance</span>);\n  <span class=\"supfact\">ParsRwr</span>.<span class=\"supfact\">fUpdateLevel</span> =\n      <span class=\"supfact\">fUpdateLevel</span>;\n  <span class=\"supfact\">ParsRef</span>.<span class=\"supfact\">fUpdateLevel</span> =\n      <span class=\"supfact\">fUpdateLevel</span>;\n  <span class=\"supfact\">ParsRwr</span>.<span class=\"supfact\">fPower</span> = <span class=\"supfact\">fPower</span>;\n  <span class=\"supfact\">ParsRwr</span>.<span class=\"supfact\">fVerbose</span> = Number;\n  <span class=\"supfact\">ParsRef</span>.<span class=\"supfact\">fVerbose</span> = Number;\n  <span class=\"supfact\">v8</span> =\n      (xxx *)xxx Aig_ManDupDfs((xxx *)<span class=\"supfact\">pAig</span>,\n                               *(xxx Aig_Man_t_ **)&<span class=\"supfact\">fBalance</span>);\n  v10 = <span class=\"supfact\">v8</span>;\n  if (<span class=\"supfact\">fVerbose</span>) {\n    xxx Aig_ManPrintStats(<span class=\"supfact\">v8</span>,\n                          *(xxx Aig_Man_t_ **)&<span class=\"supfact\">fBalance</span>);\n    xxx Dar_ManRewrite(v10, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>, v17);\n    v18 = (xxx *)xxx Aig_ManDupDfs(v10,\n                                   (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n    xxx Aig_ManStop(v10, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n    xxx Aig_ManPrintStats(v18, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n    xxx Dar_ManRefactor(v18, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRef</span>, v19);\n    v20 = (xxx *)xxx Aig_ManDupDfs(v18,\n                                   (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRef</span>);\n    xxx Aig_ManStop(v18, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRef</span>);\n    xxx Aig_ManPrintStats(v20, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRef</span>);\n    if (<span class=\"supfact\">fBalance</span>) {\n      v25 = (xxx Aig_Man_t_ *)(unsigned int)<span class=\"supfact\">fUpdateLevel</span>;\n      v26 = (xxx *)xxx Dar_ManBalance(\n          v20, (xxx Aig_Man_t_ *)(unsigned int)<span class=\"supfact\">fUpdateLevel</span>,\n          (int)v21);\n      xxx Aig_ManStop(v20, v25);\n      xxx Aig_ManPrintStats(v26, v25);\n      <span class=\"supfact\">ParsRwr</span>.fUseZeros = Number;\n      <span class=\"supfact\">ParsRef</span>.fUseZeros = Number;\n      xxx Dar_ManRewrite(v26, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>, v27);\n      v15 = (xxx *)xxx Aig_ManDupDfs(\n          v26, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n      xxx Aig_ManStop(v26, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n    } else {\n      <span class=\"supfact\">ParsRwr</span>.fUseZeros = Number;\n      <span class=\"supfact\">ParsRef</span>.fUseZeros = Number;\n      xxx Dar_ManRewrite(v20, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>, v21);\n      v15 = (xxx *)xxx Aig_ManDupDfs(\n          v20, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n      xxx Aig_ManStop(v20, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n    }\n    xxx Aig_ManPrintStats(v15, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n  } else {\n    xxx Dar_ManRewrite(<span class=\"supfact\">v8</span>,\n                       (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>, v9);\n    v11 = (xxx *)xxx Aig_ManDupDfs(v10,\n                                   (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n    xxx Aig_ManStop(v10, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n    xxx Dar_ManRefactor(v11, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRef</span>, v12);\n    v13 = (xxx *)xxx Aig_ManDupDfs(v11,\n                                   (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRef</span>);\n    xxx Aig_ManStop(v11, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRef</span>);\n    if (<span class=\"supfact\">fBalance</span>) {\n      v22 = (xxx Aig_Man_t_ *)(unsigned int)<span class=\"supfact\">fUpdateLevel</span>;\n      v23 = (xxx *)xxx Dar_ManBalance(\n          v13, (xxx Aig_Man_t_ *)(unsigned int)<span class=\"supfact\">fUpdateLevel</span>,\n          (int)v14);\n      xxx Aig_ManStop(v13, v22);\n      <span class=\"supfact\">ParsRwr</span>.fUseZeros = Number;\n      <span class=\"supfact\">ParsRef</span>.fUseZeros = Number;\n      xxx Dar_ManRewrite(v23, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>, v24);\n      v15 = (xxx *)xxx Aig_ManDupDfs(\n          v23, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n      xxx Aig_ManStop(v23, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n    } else {\n      <span class=\"supfact\">ParsRwr</span>.fUseZeros = Number;\n      <span class=\"supfact\">ParsRef</span>.fUseZeros = Number;\n      xxx Dar_ManRewrite(v13, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>, v14);\n      v15 = (xxx *)xxx Aig_ManDupDfs(\n          v13, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n      xxx Aig_ManStop(v13, (xxx Aig_Man_t_ *)&<span class=\"supfact\">ParsRwr</span>);\n    }\n  }\n  return (xxx Aig_Man_t *)v15;\n}", "var": [{"name": "a1", "type": "xxx::Aig_Man_t *", "pred_name": "p0", "ref_name": "pAig", "ref_type": "xxx::Aig_Man_t *"}, {"name": "a2", "type": "int", "pred_name": "p1", "ref_name": "fBalance", "ref_type": "int"}, {"name": "a3", "type": "int", "pred_name": "nNodes", "ref_name": "fUpdateLevel", "ref_type": "int"}, {"name": "a4", "type": "int", "pred_name": "fVerbose", "ref_name": "fPower", "ref_type": "int"}, {"name": "a5", "type": "int", "pred_name": "fVeryVerbose", "ref_name": "fVerbose", "ref_type": "int"}, {"name": "v8", "type": "disappear", "pred_name": "", "ref_name": "v8", "ref_type": "xxx *"}, {"name": "v18", "type": "int[4]", "pred_name": "__unk__", "ref_name": "ParsRef", "ref_type": "struct xxx::Dar_RefPar_t { int nMffcMin; int nLeafMax; int nCutsMax; int fExtend; int fUpdateLevel; int fUseZeros; int fVerbose; int fVeryVerbose; }"}, {"name": "v19", "type": "int", "pred_name": "v19", "ref_name": "", "ref_type": "disappear"}, {"name": "v20", "type": "int", "pred_name": "v20", "ref_name": "", "ref_type": "disappear"}, {"name": "v21", "type": "_BYTE[12]", "pred_name": "v21", "ref_name": "ParsRwr", "ref_type": "struct xxx::Dar_RwrPar_t { int nCutsMax; int nSubgMax; int fFanout; int fUpdateLevel; int fUseZeros; int fPower; int fRecycle; int fVerbose; int fVeryVerbose; }"}, {"name": "v22", "type": "int", "pred_name": "v22", "ref_name": "", "ref_type": "disappear"}, {"name": "v23", "type": "int", "pred_name": "v23", "ref_name": "", "ref_type": "disappear"}, {"name": "v24", "type": "int", "pred_name": "v24", "ref_name": "", "ref_type": "disappear"}, {"name": "v25", "type": "int", "pred_name": "v25", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "50ButtonsEach", "repo_name": "flichub-linux-kernel", "path": "50ButtonsEach/flichub-linux-kernel/8550721e4956685c533543461e245a7cde1e6dec11be8797025f27bef38568fe", "path_in_repo": "50ButtonsEach/flichub-linux-kernel/tools/perf/util/stat.o", "objdump": "00000000000005fb <perf_stat_evsel_id_init>:\n     5fb:\t55                   \tpush   %rbp\n     5fc:\t48 89 e5             \tmov    %rsp,%rbp\n     5ff:\t53                   \tpush   %rbx\n     600:\t48 83 ec 38          \tsub    $0x38,%rsp\n     604:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     608:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     60f:\t00 00 \n     611:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     615:\t31 c0                \txor    %eax,%eax\n     617:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     61b:\t48 8b 80 e8 00 00 00 \tmov    0xe8(%rax),%rax\n     622:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     626:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n     62d:\teb 38                \tjmp    667 <perf_stat_evsel_id_init+0x6c>\n     62f:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     632:\t48 98                \tcltq   \n     634:\t48 8b 1c c5 00 00 00 \tmov    0x0(,%rax,8),%rbx\n     63b:\t00 \n     63c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     640:\t48 89 c7             \tmov    %rax,%rdi\n     643:\te8 00 00 00 00       \tcallq  648 <perf_stat_evsel_id_init+0x4d>\n     648:\t48 89 de             \tmov    %rbx,%rsi\n     64b:\t48 89 c7             \tmov    %rax,%rdi\n     64e:\te8 00 00 00 00       \tcallq  653 <perf_stat_evsel_id_init+0x58>\n     653:\t85 c0                \ttest   %eax,%eax\n     655:\t75 0c                \tjne    663 <perf_stat_evsel_id_init+0x68>\n     657:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n     65a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     65e:\t89 50 78             \tmov    %edx,0x78(%rax)\n     661:\teb 0a                \tjmp    66d <perf_stat_evsel_id_init+0x72>\n     663:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n     667:\t83 7d dc 04          \tcmpl   $0x4,-0x24(%rbp)\n     66b:\t7e c2                \tjle    62f <perf_stat_evsel_id_init+0x34>\n     66d:\t90                   \tnop\n     66e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     672:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     679:\t00 00 \n     67b:\t74 05                \tje     682 <perf_stat_evsel_id_init+0x87>\n     67d:\te8 00 00 00 00       \tcallq  682 <perf_stat_evsel_id_init+0x87>\n     682:\t48 83 c4 38          \tadd    $0x38,%rsp\n     686:\t5b                   \tpop    %rbx\n     687:\t5d                   \tpop    %rbp\n     688:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall perf_stat_evsel_id_init(\n    __int64 <span class=\"supfact\">a1</span>) {\n  const char *<span class=\"supfact\">v1</span>;\n  const char *<span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  <span class=\"supfact\">v5</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v1</span> = (&id_str)[<span class=\"supfact\">i</span>];\n    <span class=\"supfact\">v2</span> = (const char *)perf_evsel__name(<span class=\"supfact\">a1</span>);\n    if (!strcmp(<span class=\"supfact\">v2</span>, <span class=\"supfact\">v1</span>)) {\n      *(_DWORD *)(<span class=\"supfact\">v5</span> + Number) = <span class=\"supfact\">i</span>;\n      return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl perf_stat_evsel_id_init(perf_evsel *<span class=\"supfact\">evsel</span>) {\n  const char *<span class=\"supfact\">v1</span>;\n  const char *<span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">i</span>;\n  perf_stat_evsel *<span class=\"supfact\">ps</span>;\n  <span class=\"supfact\">ps</span> = (perf_stat_evsel *)<span class=\"supfact\">evsel</span>->_anon_0.priv;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v1</span> = id_str[<span class=\"supfact\">i</span>];\n    <span class=\"supfact\">v2</span> = (const char *)perf_evsel__name(<span class=\"supfact\">evsel</span>);\n    if (!strcmp(<span class=\"supfact\">v2</span>, <span class=\"supfact\">v1</span>)) {\n      <span class=\"supfact\">ps</span>->id = <span class=\"supfact\">i</span>;\n      return;\n    }\n  }\n}", "var": [{"name": "a1", "type": "perf_evsel *", "pred_name": "evsel", "ref_name": "evsel", "ref_type": "perf_evsel *"}, {"name": "v1", "type": "const char *", "pred_name": "v1", "ref_name": "v1", "ref_type": "const char *"}, {"name": "v2", "type": "const char *", "pred_name": "v2", "ref_name": "v2", "ref_type": "const char *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}, {"name": "v5", "type": "perf_stat_evsel *", "pred_name": "ps", "ref_name": "ps", "ref_type": "perf_stat_evsel *"}, {"name": "v6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "nmacs", "repo_name": "print3d", "path": "nmacs/print3d/142ee0ab03aaea08c1cce3b49aba610648f7bc1ddb53dfc348f2f9408898fa3c", "path_in_repo": "nmacs/print3d//toolchain/openocd-0.7.0/jimtcl/jimsh", "objdump": "00000000004199b7 <JimRandomBytes>:\n  4199b7:\t55                   \tpush   %rbp\n  4199b8:\t48 89 e5             \tmov    %rsp,%rbp\n  4199bb:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4199bf:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4199c3:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  4199c7:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n  4199ca:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4199ce:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4199d2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4199d6:\t48 8b 80 78 01 00 00 \tmov    0x178(%rax),%rax\n  4199dd:\t48 85 c0             \ttest   %rax,%rax\n  4199e0:\t75 0c                \tjne    4199ee <JimRandomBytes+0x37>\n  4199e2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4199e6:\t48 89 c7             \tmov    %rax,%rdi\n  4199e9:\te8 1d ff ff ff       \tcallq  41990b <JimPrngInit>\n  4199ee:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4199f2:\t48 8b 80 78 01 00 00 \tmov    0x178(%rax),%rax\n  4199f9:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4199fd:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  419a04:\te9 c1 00 00 00       \tjmpq   419aca <JimRandomBytes+0x113>\n  419a09:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a0d:\t8b 80 00 01 00 00    \tmov    0x100(%rax),%eax\n  419a13:\t83 c0 01             \tadd    $0x1,%eax\n  419a16:\t0f b6 d0             \tmovzbl %al,%edx\n  419a19:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a1d:\t89 90 00 01 00 00    \tmov    %edx,0x100(%rax)\n  419a23:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a27:\t8b 90 00 01 00 00    \tmov    0x100(%rax),%edx\n  419a2d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a31:\t89 d2                \tmov    %edx,%edx\n  419a33:\t0f b6 04 10          \tmovzbl (%rax,%rdx,1),%eax\n  419a37:\t0f b6 c0             \tmovzbl %al,%eax\n  419a3a:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  419a3d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a41:\t8b 90 04 01 00 00    \tmov    0x104(%rax),%edx\n  419a47:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  419a4a:\t01 d0                \tadd    %edx,%eax\n  419a4c:\t0f b6 d0             \tmovzbl %al,%edx\n  419a4f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a53:\t89 90 04 01 00 00    \tmov    %edx,0x104(%rax)\n  419a59:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a5d:\t8b 90 04 01 00 00    \tmov    0x104(%rax),%edx\n  419a63:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a67:\t89 d2                \tmov    %edx,%edx\n  419a69:\t0f b6 04 10          \tmovzbl (%rax,%rdx,1),%eax\n  419a6d:\t0f b6 c0             \tmovzbl %al,%eax\n  419a70:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  419a73:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a77:\t8b 90 00 01 00 00    \tmov    0x100(%rax),%edx\n  419a7d:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  419a80:\t89 c1                \tmov    %eax,%ecx\n  419a82:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a86:\t89 d2                \tmov    %edx,%edx\n  419a88:\t88 0c 10             \tmov    %cl,(%rax,%rdx,1)\n  419a8b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a8f:\t8b 90 04 01 00 00    \tmov    0x104(%rax),%edx\n  419a95:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  419a98:\t89 c1                \tmov    %eax,%ecx\n  419a9a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  419a9e:\t89 d2                \tmov    %edx,%edx\n  419aa0:\t88 0c 10             \tmov    %cl,(%rax,%rdx,1)\n  419aa3:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  419aa6:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  419aa9:\t01 d0                \tadd    %edx,%eax\n  419aab:\t0f b6 c8             \tmovzbl %al,%ecx\n  419aae:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  419ab2:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  419ab6:\t48 89 55 f8          \tmov    %rdx,-0x8(%rbp)\n  419aba:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  419abe:\t89 c9                \tmov    %ecx,%ecx\n  419ac0:\t0f b6 14 0a          \tmovzbl (%rdx,%rcx,1),%edx\n  419ac4:\t88 10                \tmov    %dl,(%rax)\n  419ac6:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  419aca:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  419acd:\t3b 45 cc             \tcmp    -0x34(%rbp),%eax\n  419ad0:\t0f 82 33 ff ff ff    \tjb     419a09 <JimRandomBytes+0x52>\n  419ad6:\t90                   \tnop\n  419ad7:\t90                   \tnop\n  419ad8:\tc9                   \tleaveq \n  419ad9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall JimRandomBytes(__int64 <span class=\"supfact\">a1</span>,\n                                  _BYTE *<span class=\"supfact\">a2</span>,\n                                  unsigned int <span class=\"supfact\">a3</span>) {\n  _BYTE *v3;\n  __int64 result;\n  char <span class=\"supfact\">v6</span>;\n  char <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  if (!*(_QWORD *)(<span class=\"supfact\">a1</span> + Number))\n    JimPrngInit(<span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v8</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = <span class=\"supfact\">i</span>;\n    if (<span class=\"supfact\">i</span> >= <span class=\"supfact\">a3</span>)\n      break;\n    *(_DWORD *)(<span class=\"supfact\">v8</span> + Number) =\n        (unsigned __int8)(*(_DWORD *)(<span class=\"supfact\">v8</span> + Number) + Number);\n    <span class=\"supfact\">v7</span> =\n        *(_BYTE *)(<span class=\"supfact\">v8</span> +\n                   *(unsigned int *)(<span class=\"supfact\">v8</span> + Number));\n    *(_DWORD *)(<span class=\"supfact\">v8</span> + Number) =\n        (unsigned __int8)(*(_DWORD *)(<span class=\"supfact\">v8</span> + Number) +\n                          <span class=\"supfact\">v7</span>);\n    <span class=\"supfact\">v6</span> =\n        *(_BYTE *)(<span class=\"supfact\">v8</span> +\n                   *(unsigned int *)(<span class=\"supfact\">v8</span> + Number));\n    *(_BYTE *)(<span class=\"supfact\">v8</span> +\n               *(unsigned int *)(<span class=\"supfact\">v8</span> + Number)) =\n        <span class=\"supfact\">v6</span>;\n    *(_BYTE *)(<span class=\"supfact\">v8</span> +\n               *(unsigned int *)(<span class=\"supfact\">v8</span> + Number)) =\n        <span class=\"supfact\">v7</span>;\n    v3 = <span class=\"supfact\">a2</span>++;\n    *v3 =\n        *(_BYTE *)(<span class=\"supfact\">v8</span> +\n                   (unsigned __int8)(<span class=\"supfact\">v7</span> + <span class=\"supfact\">v6</span>));\n  }\n  return result;\n}", "code_t": "void __cdecl JimRandomBytes(Jim_Interp_0 *<span class=\"supfact\">interp</span>,\n                            void *<span class=\"supfact\">dest</span>,\n                            unsigned int <span class=\"supfact\">len</span>) {\n  _BYTE *v3;\n  unsigned __int8 <span class=\"supfact\">sj</span>;\n  unsigned __int8 <span class=\"supfact\">si_0</span>;\n  Jim_PrngState_0 *<span class=\"supfact\">prng</span>;\n  unsigned int <span class=\"supfact\">x</span>;\n  if (!<span class=\"supfact\">interp</span>->prngState)\n    JimPrngInit(<span class=\"supfact\">interp</span>);\n  <span class=\"supfact\">prng</span> = <span class=\"supfact\">interp</span>->prngState;\n  for (<span class=\"supfact\">x</span> = Number; <span class=\"supfact\">x</span> < <span class=\"supfact\">len</span>;\n       ++<span class=\"supfact\">x</span>) {\n    <span class=\"supfact\">prng</span>->i =\n        (unsigned __int8)(<span class=\"supfact\">prng</span>->i + Number);\n    <span class=\"supfact\">si_0</span> = <span class=\"supfact\">prng</span>->sbox[<span class=\"supfact\">prng</span>->i];\n    <span class=\"supfact\">prng</span>->j =\n        (unsigned __int8)(<span class=\"supfact\">prng</span>->j + <span class=\"supfact\">si_0</span>);\n    <span class=\"supfact\">sj</span> = <span class=\"supfact\">prng</span>->sbox[<span class=\"supfact\">prng</span>->j];\n    <span class=\"supfact\">prng</span>->sbox[<span class=\"supfact\">prng</span>->i] = <span class=\"supfact\">sj</span>;\n    <span class=\"supfact\">prng</span>->sbox[<span class=\"supfact\">prng</span>->j] = <span class=\"supfact\">si_0</span>;\n    v3 = <span class=\"supfact\">dest</span>;\n    <span class=\"supfact\">dest</span> = (char *)<span class=\"supfact\">dest</span> + Number;\n    *v3 = <span class=\"supfact\">prng</span>->sbox[(unsigned __int8)(<span class=\"supfact\">si_0</span> +\n                                                       <span class=\"supfact\">sj</span>)];\n  }\n}", "var": [{"name": "a1", "type": "__unk__", "pred_name": "__unk__", "ref_name": "interp", "ref_type": "Jim_Interp_0 *"}, {"name": "a2", "type": "__unk__", "pred_name": "__unk__", "ref_name": "dest", "ref_type": "void *"}, {"name": "a3", "type": "int", "pred_name": "__unk__", "ref_name": "len", "ref_type": "unsigned int"}, {"name": "v6", "type": "uint8_t", "pred_name": "__unk__", "ref_name": "sj", "ref_type": "unsigned __int8"}, {"name": "v7", "type": "uint8_t", "pred_name": "__unk__", "ref_name": "si_0", "ref_type": "unsigned __int8"}, {"name": "v8", "type": "__unk__", "pred_name": "__unk__", "ref_name": "prng", "ref_type": "Jim_PrngState_0 *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "x", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "mrayy", "repo_name": "ChampionRun", "path": "mrayy/ChampionRun/0a9c47e8b201ac60965703b9a99ab314553f8f24e98fe99a2d6774e94af78a44", "path_in_repo": "mrayy/ChampionRun/cocos2dx/proj.linux/obj/release/menu_nodes/CCMenuItem.o", "objdump": "00000000000021c0 <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE>:\n    21c0:\t41 56                \tpush   %r14\n    21c2:\t49 89 d6             \tmov    %rdx,%r14\n    21c5:\t41 55                \tpush   %r13\n    21c7:\t49 89 f5             \tmov    %rsi,%r13\n    21ca:\t41 54                \tpush   %r12\n    21cc:\t55                   \tpush   %rbp\n    21cd:\t48 89 fd             \tmov    %rdi,%rbp\n    21d0:\tbf d0 01 00 00       \tmov    $0x1d0,%edi\n    21d5:\t53                   \tpush   %rbx\n    21d6:\t48 89 cb             \tmov    %rcx,%rbx\n    21d9:\te8 00 00 00 00       \tcallq  21de <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x1e>\n    21de:\t48 89 c7             \tmov    %rax,%rdi\n    21e1:\t49 89 c4             \tmov    %rax,%r12\n    21e4:\te8 00 00 00 00       \tcallq  21e9 <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x29>\n    21e9:\t31 c0                \txor    %eax,%eax\n    21eb:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    21ef:\t49 89 d8             \tmov    %rbx,%r8\n    21f2:\t4c 89 f1             \tmov    %r14,%rcx\n    21f5:\t66 41 89 84 24 8a 01 \tmov    %ax,0x18a(%r12)\n    21fc:\t00 00 \n    21fe:\t48 89 ee             \tmov    %rbp,%rsi\n    2201:\t4c 89 e7             \tmov    %r12,%rdi\n    2204:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 220b <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x4b>\n    220b:\t49 c7 84 24 a0 01 00 \tmovq   $0x0,0x1a0(%r12)\n    2212:\t00 00 00 00 00 \n    2217:\t41 0f 11 84 24 b0 01 \tmovups %xmm0,0x1b0(%r12)\n    221e:\t00 00 \n    2220:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n    2224:\t48 05 10 04 00 00    \tadd    $0x410,%rax\n    222a:\t49 89 14 24          \tmov    %rdx,(%r12)\n    222e:\t4c 89 ea             \tmov    %r13,%rdx\n    2231:\t49 89 84 24 78 01 00 \tmov    %rax,0x178(%r12)\n    2238:\t00 \n    2239:\t41 0f 11 84 24 c0 01 \tmovups %xmm0,0x1c0(%r12)\n    2240:\t00 00 \n    2242:\te8 00 00 00 00       \tcallq  2247 <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x87>\n    2247:\t84 c0                \ttest   %al,%al\n    2249:\t75 55                \tjne    22a0 <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0xe0>\n    224b:\t49 8b 04 24          \tmov    (%r12),%rax\n    224f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    2253:\t48 3b 05 00 00 00 00 \tcmp    0x0(%rip),%rax        # 225a <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x9a>\n    225a:\t75 5c                \tjne    22b8 <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0xf8>\n    225c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2263 <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0xa3>\n    2263:\t4c 89 e7             \tmov    %r12,%rdi\n    2266:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n    226a:\t48 05 10 04 00 00    \tadd    $0x410,%rax\n    2270:\t49 89 84 24 78 01 00 \tmov    %rax,0x178(%r12)\n    2277:\t00 \n    2278:\t49 89 14 24          \tmov    %rdx,(%r12)\n    227c:\te8 00 00 00 00       \tcallq  2281 <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0xc1>\n    2281:\t4c 89 e7             \tmov    %r12,%rdi\n    2284:\t45 31 e4             \txor    %r12d,%r12d\n    2287:\te8 00 00 00 00       \tcallq  228c <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0xcc>\n    228c:\t5b                   \tpop    %rbx\n    228d:\t4c 89 e0             \tmov    %r12,%rax\n    2290:\t5d                   \tpop    %rbp\n    2291:\t41 5c                \tpop    %r12\n    2293:\t41 5d                \tpop    %r13\n    2295:\t41 5e                \tpop    %r14\n    2297:\tc3                   \tretq   \n    2298:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n    229f:\t00 \n    22a0:\t4c 89 e7             \tmov    %r12,%rdi\n    22a3:\te8 00 00 00 00       \tcallq  22a8 <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0xe8>\n    22a8:\t5b                   \tpop    %rbx\n    22a9:\t4c 89 e0             \tmov    %r12,%rax\n    22ac:\t5d                   \tpop    %rbp\n    22ad:\t41 5c                \tpop    %r12\n    22af:\t41 5d                \tpop    %r13\n    22b1:\t41 5e                \tpop    %r14\n    22b3:\tc3                   \tretq   \n    22b4:\t0f 1f 40 00          \tnopl   0x0(%rax)\n    22b8:\t4c 89 e7             \tmov    %r12,%rdi\n    22bb:\t45 31 e4             \txor    %r12d,%r12d\n    22be:\tff d0                \tcallq  *%rax\n    22c0:\t5b                   \tpop    %rbx\n    22c1:\t4c 89 e0             \tmov    %r12,%rax\n    22c4:\t5d                   \tpop    %rbp\n    22c5:\t41 5c                \tpop    %r12\n    22c7:\t41 5d                \tpop    %r13\n    22c9:\t41 5e                \tpop    %r14\n    22cb:\tc3                   \tretq   \n    22cc:\t48 89 c5             \tmov    %rax,%rbp\n    22cf:\te9 00 00 00 00       \tjmpq   22d4 <_ZN7cocos2d13MenuItemImage6createEPKcS2_S2_RKSt8functionIFvPNS_6ObjectEEE+0x114>\n    22d4:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n    22db:\t00 00 00 00 \n    22df:\t90                   \tnop", "code_s": "__int64 __fastcall cocos2d MenuItemImage\ncreate(cocos2d Node *<span class=\"supfact\">a1</span>, cocos2d Node *<span class=\"supfact\">a2</span>,\n       cocos2d Node *<span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">v6</span>;\n  void(__fastcall * v7)(cocos2d MenuItemImage * __hidden);\n  __int64 result;\n  <span class=\"supfact\">v6</span> = operator new(Number);\n  cocos2d NodeRGBA NodeRGBA((cocos2d NodeRGBA *)<span class=\"supfact\">v6</span>);\n  *(_WORD *)(<span class=\"supfact\">v6</span> + Number) = Number;\n  *(_QWORD *)(<span class=\"supfact\">v6</span> + Number) = Number L;\n  *(_OWORD *)(<span class=\"supfact\">v6</span> + Number) = Number L; * ( _QWORD * ) <span class=\"supfact\">v6</span> = & ` vtable for ' cocos2d MenuItemImage + Number ; * ( _QWORD * ) ( <span class=\"supfact\">v6</span> + Number ) = & ` vtable for ' cocos2d MenuItemImage + Number ;\n  *(_OWORD *)(<span class=\"supfact\">v6</span> + Number) = Number L;\n  if ((unsigned __int8)cocos2d MenuItemImage initWithNormalImage(\n          (cocos2d MenuItemSprite *)<span class=\"supfact\">v6</span>, <span class=\"supfact\">a1</span>,\n          <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>)) {\n    cocos2d Object autorelease((cocos2d Object *)<span class=\"supfact\">v6</span>);\n    result = <span class=\"supfact\">v6</span>;\n  } else {\n    v7 = *(void(__fastcall **)(cocos2d MenuItemImage * __hidden))(\n        *(_QWORD *)<span class=\"supfact\">v6</span> + Number L);\n    if (v7 == cocos2d MenuItemImage ~MenuItemImage) { * ( _QWORD * ) ( <span class=\"supfact\">v6</span> + Number ) = & ` vtable for ' cocos2d MenuItemSprite + Number ; * ( _QWORD * ) <span class=\"supfact\">v6</span> = & ` vtable for ' cocos2d MenuItemSprite + Number ;\n      cocos2d MenuItem ~MenuItem((cocos2d MenuItem *)<span class=\"supfact\">v6</span>);\n      operator delete((void *)<span class=\"supfact\">v6</span>);\n    } else {\n      v7((cocos2d MenuItemImage *)<span class=\"supfact\">v6</span>);\n    }\n    result = Number L;\n  }\n  return result;\n}", "code_t": "__int64 __fastcall cocos2d MenuItemImage\ncreate(cocos2d Node *<span class=\"supfact\">a1</span>, cocos2d Node *<span class=\"supfact\">a2</span>,\n       cocos2d Node *<span class=\"supfact\">a3</span>, __int64 <span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">v6</span>;\n  void(__fastcall * v7)(cocos2d MenuItemImage * __hidden);\n  __int64 result;\n  <span class=\"supfact\">v6</span> = operator new(Number);\n  cocos2d NodeRGBA NodeRGBA((cocos2d NodeRGBA *)<span class=\"supfact\">v6</span>);\n  *(_WORD *)(<span class=\"supfact\">v6</span> + Number) = Number;\n  *(_QWORD *)(<span class=\"supfact\">v6</span> + Number) = Number L;\n  *(_OWORD *)(<span class=\"supfact\">v6</span> + Number) = Number L; * ( _QWORD * ) <span class=\"supfact\">v6</span> = & ` vtable for ' cocos2d MenuItemImage + Number ; * ( _QWORD * ) ( <span class=\"supfact\">v6</span> + Number ) = & ` vtable for ' cocos2d MenuItemImage + Number ;\n  *(_OWORD *)(<span class=\"supfact\">v6</span> + Number) = Number L;\n  if ((unsigned __int8)cocos2d MenuItemImage initWithNormalImage(\n          (cocos2d MenuItemSprite *)<span class=\"supfact\">v6</span>, <span class=\"supfact\">a1</span>,\n          <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>, <span class=\"supfact\">a4</span>)) {\n    cocos2d Object autorelease((cocos2d Object *)<span class=\"supfact\">v6</span>);\n    result = <span class=\"supfact\">v6</span>;\n  } else {\n    v7 = *(void(__fastcall **)(cocos2d MenuItemImage * __hidden))(\n        *(_QWORD *)<span class=\"supfact\">v6</span> + Number L);\n    if (v7 == cocos2d MenuItemImage ~MenuItemImage) { * ( _QWORD * ) ( <span class=\"supfact\">v6</span> + Number ) = & ` vtable for ' cocos2d MenuItemSprite + Number ; * ( _QWORD * ) <span class=\"supfact\">v6</span> = & ` vtable for ' cocos2d MenuItemSprite + Number ;\n      cocos2d MenuItem ~MenuItem((cocos2d MenuItem *)<span class=\"supfact\">v6</span>);\n      operator delete((void *)<span class=\"supfact\">v6</span>);\n    } else {\n      v7((cocos2d MenuItemImage *)<span class=\"supfact\">v6</span>);\n    }\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "cocos2d::Node *", "pred_name": "a1", "ref_name": "a1", "ref_type": "cocos2d::Node *"}, {"name": "a2", "type": "__int64", "pred_name": "a2", "ref_name": "a2", "ref_type": "cocos2d::Node *"}, {"name": "a3", "type": "__int64", "pred_name": "a3", "ref_name": "a3", "ref_type": "cocos2d::Node *"}, {"name": "a4", "type": "__int64", "pred_name": "a4", "ref_name": "a4", "ref_type": "__int64"}, {"name": "v6", "type": "__int64", "pred_name": "v6", "ref_name": "v6", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/5fde6802ef23238b9f9bd571d4958c8c4c2534f27760608496a315bbe625ff22", "path_in_repo": "XanClic/qemu//xtensaeb-softmmu/hw/xtensa/sim.o", "objdump": "000000000000045a <xtensa_sim_machine_init>:\n 45a:\t55                   \tpush   %rbp\n 45b:\t48 89 e5             \tmov    %rsp,%rbp\n 45e:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n 462:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 466:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 46d <xtensa_sim_machine_init+0x13>\n 46d:\t48 89 50 78          \tmov    %rdx,0x78(%rax)\n 471:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 475:\tc7 80 d0 00 00 00 01 \tmovl   $0x1,0xd0(%rax)\n 47c:\t00 00 00 \n 47f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 483:\t48 8d 15 9e ff ff ff \tlea    -0x62(%rip),%rdx        # 428 <xtensa_sim_init>\n 48a:\t48 89 90 88 00 00 00 \tmov    %rdx,0x88(%rax)\n 491:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 495:\tc7 80 c0 00 00 00 04 \tmovl   $0x4,0xc0(%rax)\n 49c:\t00 00 00 \n 49f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 4a3:\t0f b6 90 cc 00 00 00 \tmovzbl 0xcc(%rax),%edx\n 4aa:\t83 ca 01             \tor     $0x1,%edx\n 4ad:\t88 90 cc 00 00 00    \tmov    %dl,0xcc(%rax)\n 4b3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 4b7:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 4be <xtensa_sim_machine_init+0x64>\n 4be:\t48 89 90 08 01 00 00 \tmov    %rdx,0x108(%rax)\n 4c5:\t90                   \tnop\n 4c6:\t5d                   \tpop    %rbp\n 4c7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall xtensa_sim_machine_init(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = String;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = xtensa_sim_init;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) |= Number;\n  <span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>;\n  *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = String;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl xtensa_sim_machine_init(MachineClass_0 *<span class=\"supfact\">mc</span>) {\n  <span class=\"supfact\">mc</span>->desc = String;\n  <span class=\"supfact\">mc</span>->is_default = Number;\n  <span class=\"supfact\">mc</span>->init = (void (*)(MachineState_0 *))xtensa_sim_init;\n  <span class=\"supfact\">mc</span>->max_cpus = Number;\n  *((_BYTE *)<span class=\"supfact\">mc</span> + Number) |= Number;\n  <span class=\"supfact\">mc</span>->default_cpu_type = String;\n}", "var": [{"name": "a1", "type": "MachineState_0 *", "pred_name": "ms", "ref_name": "mc", "ref_type": "MachineClass_0 *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/31feca0b01f7963552d84f00505fe4a77a17dbe5b130536a7d7912b04adf2717", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Applications/d/Output/make_dparser.native", "objdump": "000000000041be83 <vec_add_internal>:\n  41be83:\t55                   \tpush   %rbp\n  41be84:\t48 89 e5             \tmov    %rsp,%rbp\n  41be87:\t48 83 ec 20          \tsub    $0x20,%rsp\n  41be8b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  41be8f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  41be93:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41be97:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  41be9b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41be9f:\t8b 00                \tmov    (%rax),%eax\n  41bea1:\t85 c0                \ttest   %eax,%eax\n  41bea3:\t75 15                \tjne    41beba <vec_add_internal+0x37>\n  41bea5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bea9:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n  41bead:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41beb1:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  41beb5:\te9 da 00 00 00       \tjmpq   41bf94 <vec_add_internal+0x111>\n  41beba:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bebe:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  41bec2:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  41bec6:\t48 83 c2 10          \tadd    $0x10,%rdx\n  41beca:\t48 39 d0             \tcmp    %rdx,%rax\n  41becd:\t75 45                \tjne    41bf14 <vec_add_internal+0x91>\n  41becf:\tbf 40 00 00 00       \tmov    $0x40,%edi\n  41bed4:\te8 c7 52 fe ff       \tcallq  4011a0 <malloc@plt>\n  41bed9:\t48 89 c2             \tmov    %rax,%rdx\n  41bedc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bee0:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  41bee4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bee8:\t8b 00                \tmov    (%rax),%eax\n  41beea:\t89 c0                \tmov    %eax,%eax\n  41beec:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  41bef3:\t00 \n  41bef4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bef8:\t48 8d 48 10          \tlea    0x10(%rax),%rcx\n  41befc:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bf00:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  41bf04:\t48 89 ce             \tmov    %rcx,%rsi\n  41bf07:\t48 89 c7             \tmov    %rax,%rdi\n  41bf0a:\te8 c1 51 fe ff       \tcallq  4010d0 <memcpy@plt>\n  41bf0f:\te9 80 00 00 00       \tjmpq   41bf94 <vec_add_internal+0x111>\n  41bf14:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bf18:\t8b 00                \tmov    (%rax),%eax\n  41bf1a:\t83 e0 07             \tand    $0x7,%eax\n  41bf1d:\t85 c0                \ttest   %eax,%eax\n  41bf1f:\t75 73                \tjne    41bf94 <vec_add_internal+0x111>\n  41bf21:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bf25:\t8b 00                \tmov    (%rax),%eax\n  41bf27:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41bf2a:\tc7 45 f8 04 00 00 00 \tmovl   $0x4,-0x8(%rbp)\n  41bf31:\tc1 7d fc 03          \tsarl   $0x3,-0x4(%rbp)\n  41bf35:\teb 07                \tjmp    41bf3e <vec_add_internal+0xbb>\n  41bf37:\td1 7d fc             \tsarl   -0x4(%rbp)\n  41bf3a:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  41bf3e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41bf41:\t83 e0 01             \tand    $0x1,%eax\n  41bf44:\t85 c0                \ttest   %eax,%eax\n  41bf46:\t74 ef                \tje     41bf37 <vec_add_internal+0xb4>\n  41bf48:\td1 7d fc             \tsarl   -0x4(%rbp)\n  41bf4b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bf4f:\t8b 00                \tmov    (%rax),%eax\n  41bf51:\t85 c0                \ttest   %eax,%eax\n  41bf53:\t74 06                \tje     41bf5b <vec_add_internal+0xd8>\n  41bf55:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  41bf59:\t75 39                \tjne    41bf94 <vec_add_internal+0x111>\n  41bf5b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41bf5e:\tba 01 00 00 00       \tmov    $0x1,%edx\n  41bf63:\t89 c1                \tmov    %eax,%ecx\n  41bf65:\td3 e2                \tshl    %cl,%edx\n  41bf67:\t89 d0                \tmov    %edx,%eax\n  41bf69:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  41bf6c:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41bf6f:\t48 98                \tcltq   \n  41bf71:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  41bf78:\t00 \n  41bf79:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bf7d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  41bf81:\t48 89 d6             \tmov    %rdx,%rsi\n  41bf84:\t48 89 c7             \tmov    %rax,%rdi\n  41bf87:\te8 d4 52 fe ff       \tcallq  401260 <realloc@plt>\n  41bf8c:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  41bf90:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n  41bf94:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bf98:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n  41bf9c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41bfa0:\t8b 00                \tmov    (%rax),%eax\n  41bfa2:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  41bfa5:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  41bfa9:\t89 0a                \tmov    %ecx,(%rdx)\n  41bfab:\t89 c0                \tmov    %eax,%eax\n  41bfad:\t48 c1 e0 03          \tshl    $0x3,%rax\n  41bfb1:\t48 8d 14 06          \tlea    (%rsi,%rax,1),%rdx\n  41bfb5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41bfb9:\t48 89 02             \tmov    %rax,(%rdx)\n  41bfbc:\t90                   \tnop\n  41bfbd:\tc9                   \tleaveq \n  41bfbe:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vec_add_internal(unsigned int *<span class=\"supfact\">a1</span>,\n                                    __int64 <span class=\"supfact\">a2</span>) {\n  __int64 v2;\n  unsigned int v3;\n  _QWORD *<span class=\"supfact\">v4</span>;\n  __int64 result;\n  char <span class=\"supfact\">v7</span>;\n  int i;\n  int v9;\n  if (*<span class=\"supfact\">a1</span>) {\n    if (*((unsigned int **)<span class=\"supfact\">a1</span> + Number) ==\n        <span class=\"supfact\">a1</span> + Number) {\n      *((_QWORD *)<span class=\"supfact\">a1</span> + Number) = malloc(Number);\n      memcpy(*((void **)<span class=\"supfact\">a1</span> + Number),\n             <span class=\"supfact\">a1</span> + Number, Number L * *<span class=\"supfact\">a1</span>);\n    } else if ((*<span class=\"supfact\">a1</span> & Number) == Number) {\n      <span class=\"supfact\">v7</span> = Number;\n      for (i = (int)*<span class=\"supfact\">a1</span> >> Number; (i & Number) == Number;\n           i >>= Number)\n        ++<span class=\"supfact\">v7</span>;\n      v9 = i >> Number;\n      if (!*<span class=\"supfact\">a1</span> || !v9)\n        *((_QWORD *)<span class=\"supfact\">a1</span> + Number) =\n            realloc(*((void **)<span class=\"supfact\">a1</span> + Number),\n                    Number L * (Number << <span class=\"supfact\">v7</span>));\n    }\n  } else {\n    *((_QWORD *)<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">a1</span> + Number;\n  }\n  v2 = *((_QWORD *)<span class=\"supfact\">a1</span> + Number);\n  v3 = (*<span class=\"supfact\">a1</span>)++;\n  <span class=\"supfact\">v4</span> = (_QWORD *)(v2 + Number L * v3);\n  result = <span class=\"supfact\">a2</span>;\n  *<span class=\"supfact\">v4</span> = <span class=\"supfact\">a2</span>;\n  return result;\n}", "code_t": "void __cdecl vec_add_internal(void *<span class=\"supfact\">v</span>,\n                              void *<span class=\"supfact\">elem</span>) {\n  __int64 v2;\n  unsigned int v3;\n  char <span class=\"supfact\">nl</span>;\n  int l;\n  int la;\n  if (*(_DWORD *)<span class=\"supfact\">v</span>) {\n    if (*((void **)<span class=\"supfact\">v</span> + Number) ==\n        (char *)<span class=\"supfact\">v</span> + Number) {\n      *((_QWORD *)<span class=\"supfact\">v</span> + Number) = malloc(Number);\n      memcpy(*((void **)<span class=\"supfact\">v</span> + Number),\n             (char *)<span class=\"supfact\">v</span> + Number,\n             Number L * *(unsigned int *)<span class=\"supfact\">v</span>);\n    } else if ((*(_DWORD *)<span class=\"supfact\">v</span> & Number) == Number) {\n      <span class=\"supfact\">nl</span> = Number;\n      for (l = *(int *)<span class=\"supfact\">v</span> >> Number; (l & Number) == Number;\n           l >>= Number)\n        ++<span class=\"supfact\">nl</span>;\n      la = l >> Number;\n      if (!*(_DWORD *)<span class=\"supfact\">v</span> || !la)\n        *((_QWORD *)<span class=\"supfact\">v</span> + Number) =\n            realloc(*((void **)<span class=\"supfact\">v</span> + Number),\n                    Number L * (Number << <span class=\"supfact\">nl</span>));\n    }\n  } else {\n    *((_QWORD *)<span class=\"supfact\">v</span> + Number) =\n        (char *)<span class=\"supfact\">v</span> + Number;\n  }\n  v2 = *((_QWORD *)<span class=\"supfact\">v</span> + Number);\n  v3 = (*(_DWORD *)<span class=\"supfact\">v</span>)++;\n  *(_QWORD *)(v2 + Number L * v3) = <span class=\"supfact\">elem</span>;\n}", "var": [{"name": "a1", "type": "veci *", "pred_name": "v", "ref_name": "v", "ref_type": "void *"}, {"name": "a2", "type": "__int64", "pred_name": "nl", "ref_name": "elem", "ref_type": "void *"}, {"name": "v4", "type": "__int64", "pred_name": "v4", "ref_name": "", "ref_type": "disappear"}, {"name": "v7", "type": "char", "pred_name": "z", "ref_name": "nl", "ref_type": "char"}], "body_in_train": false}, {"repo_owner": "markessien", "repo_name": "DirectEncode", "path": "markessien/DirectEncode/93e9ff7c4ac0da1aa858a85f6540ce8d4ba3d364846b1390ab18d2d9879f68a6", "path_in_repo": "markessien/DirectEncode/Libraries/ffmpeg-0.5/libavformat/matroskadec.o", "objdump": "00000000000018ee <matroska_convert_tag>:\n    18ee:\t48 81 ec 48 04 00 00 \tsub    $0x448,%rsp\n    18f5:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    18fa:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    18ff:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    1904:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n    1908:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    190d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1911:\t48 89 84 24 30 04 00 \tmov    %rax,0x430(%rsp)\n    1918:\t00 \n    1919:\tc7 84 24 3c 04 00 00 \tmovl   $0x0,0x43c(%rsp)\n    1920:\t00 00 00 00 \n    1924:\te9 e2 02 00 00       \tjmpq   1c0b <matroska_convert_tag+0x31d>\n    1929:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    1930:\t48 63 d0             \tmovslq %eax,%rdx\n    1933:\t48 89 d0             \tmov    %rdx,%rax\n    1936:\t48 01 c0             \tadd    %rax,%rax\n    1939:\t48 01 d0             \tadd    %rdx,%rax\n    193c:\t48 c1 e0 04          \tshl    $0x4,%rax\n    1940:\t48 89 c2             \tmov    %rax,%rdx\n    1943:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    194a:\t00 \n    194b:\t48 01 d0             \tadd    %rdx,%rax\n    194e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1952:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1957:\t48 89 c7             \tmov    %rax,%rdi\n    195a:\te8 00 00 00 00       \tcallq  195f <matroska_convert_tag+0x71>\n    195f:\t85 c0                \ttest   %eax,%eax\n    1961:\t74 2b                \tje     198e <matroska_convert_tag+0xa0>\n    1963:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    196a:\t48 63 d0             \tmovslq %eax,%rdx\n    196d:\t48 89 d0             \tmov    %rdx,%rax\n    1970:\t48 01 c0             \tadd    %rax,%rax\n    1973:\t48 01 d0             \tadd    %rdx,%rax\n    1976:\t48 c1 e0 04          \tshl    $0x4,%rax\n    197a:\t48 89 c2             \tmov    %rax,%rdx\n    197d:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    1984:\t00 \n    1985:\t48 01 d0             \tadd    %rdx,%rax\n    1988:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    198c:\teb 05                \tjmp    1993 <matroska_convert_tag+0xa5>\n    198e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1993:\t48 89 84 24 28 04 00 \tmov    %rax,0x428(%rsp)\n    199a:\t00 \n    199b:\t48 83 3c 24 00       \tcmpq   $0x0,(%rsp)\n    19a0:\t74 50                \tje     19f2 <matroska_convert_tag+0x104>\n    19a2:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    19a9:\t48 63 d0             \tmovslq %eax,%rdx\n    19ac:\t48 89 d0             \tmov    %rdx,%rax\n    19af:\t48 01 c0             \tadd    %rax,%rax\n    19b2:\t48 01 d0             \tadd    %rdx,%rax\n    19b5:\t48 c1 e0 04          \tshl    $0x4,%rax\n    19b9:\t48 89 c2             \tmov    %rax,%rdx\n    19bc:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    19c3:\t00 \n    19c4:\t48 01 d0             \tadd    %rdx,%rax\n    19c7:\t48 8b 08             \tmov    (%rax),%rcx\n    19ca:\t48 8b 14 24          \tmov    (%rsp),%rdx\n    19ce:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    19d3:\t49 89 c8             \tmov    %rcx,%r8\n    19d6:\t48 89 d1             \tmov    %rdx,%rcx\n    19d9:\tba 00 00 00 00       \tmov    $0x0,%edx\n    19de:\tbe 00 04 00 00       \tmov    $0x400,%esi\n    19e3:\t48 89 c7             \tmov    %rax,%rdi\n    19e6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    19eb:\te8 00 00 00 00       \tcallq  19f0 <matroska_convert_tag+0x102>\n    19f0:\teb 3d                \tjmp    1a2f <matroska_convert_tag+0x141>\n    19f2:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    19f9:\t48 63 d0             \tmovslq %eax,%rdx\n    19fc:\t48 89 d0             \tmov    %rdx,%rax\n    19ff:\t48 01 c0             \tadd    %rax,%rax\n    1a02:\t48 01 d0             \tadd    %rdx,%rax\n    1a05:\t48 c1 e0 04          \tshl    $0x4,%rax\n    1a09:\t48 89 c2             \tmov    %rax,%rdx\n    1a0c:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    1a13:\t00 \n    1a14:\t48 01 d0             \tadd    %rdx,%rax\n    1a17:\t48 8b 08             \tmov    (%rax),%rcx\n    1a1a:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    1a1f:\tba 00 04 00 00       \tmov    $0x400,%edx\n    1a24:\t48 89 ce             \tmov    %rcx,%rsi\n    1a27:\t48 89 c7             \tmov    %rax,%rdi\n    1a2a:\te8 00 00 00 00       \tcallq  1a2f <matroska_convert_tag+0x141>\n    1a2f:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    1a36:\t48 63 d0             \tmovslq %eax,%rdx\n    1a39:\t48 89 d0             \tmov    %rdx,%rax\n    1a3c:\t48 01 c0             \tadd    %rax,%rax\n    1a3f:\t48 01 d0             \tadd    %rdx,%rax\n    1a42:\t48 c1 e0 04          \tshl    $0x4,%rax\n    1a46:\t48 89 c2             \tmov    %rax,%rdx\n    1a49:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    1a50:\t00 \n    1a51:\t48 01 d0             \tadd    %rdx,%rax\n    1a54:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    1a58:\t48 85 c0             \ttest   %rax,%rax\n    1a5b:\t75 0f                \tjne    1a6c <matroska_convert_tag+0x17e>\n    1a5d:\t48 83 bc 24 28 04 00 \tcmpq   $0x0,0x428(%rsp)\n    1a64:\t00 00 \n    1a66:\t0f 85 aa 00 00 00    \tjne    1b16 <matroska_convert_tag+0x228>\n    1a6c:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    1a73:\t48 63 d0             \tmovslq %eax,%rdx\n    1a76:\t48 89 d0             \tmov    %rdx,%rax\n    1a79:\t48 01 c0             \tadd    %rax,%rax\n    1a7c:\t48 01 d0             \tadd    %rdx,%rax\n    1a7f:\t48 c1 e0 04          \tshl    $0x4,%rax\n    1a83:\t48 89 c2             \tmov    %rax,%rdx\n    1a86:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    1a8d:\t00 \n    1a8e:\t48 01 d0             \tadd    %rdx,%rax\n    1a91:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    1a95:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    1a9a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a9f:\t48 89 ce             \tmov    %rcx,%rsi\n    1aa2:\t48 89 c7             \tmov    %rax,%rdi\n    1aa5:\te8 00 00 00 00       \tcallq  1aaa <matroska_convert_tag+0x1bc>\n    1aaa:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    1ab1:\t48 63 d0             \tmovslq %eax,%rdx\n    1ab4:\t48 89 d0             \tmov    %rdx,%rax\n    1ab7:\t48 01 c0             \tadd    %rax,%rax\n    1aba:\t48 01 d0             \tadd    %rdx,%rax\n    1abd:\t48 c1 e0 04          \tshl    $0x4,%rax\n    1ac1:\t48 89 c2             \tmov    %rax,%rdx\n    1ac4:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    1acb:\t00 \n    1acc:\t48 01 d0             \tadd    %rdx,%rax\n    1acf:\t8b 40 20             \tmov    0x20(%rax),%eax\n    1ad2:\t85 c0                \ttest   %eax,%eax\n    1ad4:\t74 40                \tje     1b16 <matroska_convert_tag+0x228>\n    1ad6:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    1add:\t48 63 d0             \tmovslq %eax,%rdx\n    1ae0:\t48 89 d0             \tmov    %rdx,%rax\n    1ae3:\t48 01 c0             \tadd    %rax,%rax\n    1ae6:\t48 01 d0             \tadd    %rdx,%rax\n    1ae9:\t48 c1 e0 04          \tshl    $0x4,%rax\n    1aed:\t48 89 c2             \tmov    %rax,%rdx\n    1af0:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    1af7:\t00 \n    1af8:\t48 01 d0             \tadd    %rdx,%rax\n    1afb:\t48 8d 70 20          \tlea    0x20(%rax),%rsi\n    1aff:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    1b04:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n    1b09:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1b0e:\t48 89 c7             \tmov    %rax,%rdi\n    1b11:\te8 d8 fd ff ff       \tcallq  18ee <matroska_convert_tag>\n    1b16:\t48 83 bc 24 28 04 00 \tcmpq   $0x0,0x428(%rsp)\n    1b1d:\t00 00 \n    1b1f:\t0f 84 de 00 00 00    \tje     1c03 <matroska_convert_tag+0x315>\n    1b25:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    1b2a:\tba 00 04 00 00       \tmov    $0x400,%edx\n    1b2f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b34:\t48 89 c7             \tmov    %rax,%rdi\n    1b37:\te8 00 00 00 00       \tcallq  1b3c <matroska_convert_tag+0x24e>\n    1b3c:\t48 8b 8c 24 28 04 00 \tmov    0x428(%rsp),%rcx\n    1b43:\t00 \n    1b44:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    1b49:\tba 00 04 00 00       \tmov    $0x400,%edx\n    1b4e:\t48 89 ce             \tmov    %rcx,%rsi\n    1b51:\t48 89 c7             \tmov    %rax,%rdi\n    1b54:\te8 00 00 00 00       \tcallq  1b59 <matroska_convert_tag+0x26b>\n    1b59:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    1b60:\t48 63 d0             \tmovslq %eax,%rdx\n    1b63:\t48 89 d0             \tmov    %rdx,%rax\n    1b66:\t48 01 c0             \tadd    %rax,%rax\n    1b69:\t48 01 d0             \tadd    %rdx,%rax\n    1b6c:\t48 c1 e0 04          \tshl    $0x4,%rax\n    1b70:\t48 89 c2             \tmov    %rax,%rdx\n    1b73:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    1b7a:\t00 \n    1b7b:\t48 01 d0             \tadd    %rdx,%rax\n    1b7e:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    1b82:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    1b87:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1b8c:\t48 89 ce             \tmov    %rcx,%rsi\n    1b8f:\t48 89 c7             \tmov    %rax,%rdi\n    1b92:\te8 00 00 00 00       \tcallq  1b97 <matroska_convert_tag+0x2a9>\n    1b97:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    1b9e:\t48 63 d0             \tmovslq %eax,%rdx\n    1ba1:\t48 89 d0             \tmov    %rdx,%rax\n    1ba4:\t48 01 c0             \tadd    %rax,%rax\n    1ba7:\t48 01 d0             \tadd    %rdx,%rax\n    1baa:\t48 c1 e0 04          \tshl    $0x4,%rax\n    1bae:\t48 89 c2             \tmov    %rax,%rdx\n    1bb1:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    1bb8:\t00 \n    1bb9:\t48 01 d0             \tadd    %rdx,%rax\n    1bbc:\t8b 40 20             \tmov    0x20(%rax),%eax\n    1bbf:\t85 c0                \ttest   %eax,%eax\n    1bc1:\t74 40                \tje     1c03 <matroska_convert_tag+0x315>\n    1bc3:\t8b 84 24 3c 04 00 00 \tmov    0x43c(%rsp),%eax\n    1bca:\t48 63 d0             \tmovslq %eax,%rdx\n    1bcd:\t48 89 d0             \tmov    %rdx,%rax\n    1bd0:\t48 01 c0             \tadd    %rax,%rax\n    1bd3:\t48 01 d0             \tadd    %rdx,%rax\n    1bd6:\t48 c1 e0 04          \tshl    $0x4,%rax\n    1bda:\t48 89 c2             \tmov    %rax,%rdx\n    1bdd:\t48 8b 84 24 30 04 00 \tmov    0x430(%rsp),%rax\n    1be4:\t00 \n    1be5:\t48 01 d0             \tadd    %rdx,%rax\n    1be8:\t48 8d 70 20          \tlea    0x20(%rax),%rsi\n    1bec:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    1bf1:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n    1bf6:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1bfb:\t48 89 c7             \tmov    %rax,%rdi\n    1bfe:\te8 eb fc ff ff       \tcallq  18ee <matroska_convert_tag>\n    1c03:\t83 84 24 3c 04 00 00 \taddl   $0x1,0x43c(%rsp)\n    1c0a:\t01 \n    1c0b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1c10:\t8b 00                \tmov    (%rax),%eax\n    1c12:\t39 84 24 3c 04 00 00 \tcmp    %eax,0x43c(%rsp)\n    1c19:\t0f 8c 0a fd ff ff    \tjl     1929 <matroska_convert_tag+0x3b>\n    1c1f:\t90                   \tnop\n    1c20:\t90                   \tnop\n    1c21:\t48 81 c4 48 04 00 00 \tadd    $0x448,%rsp\n    1c28:\tc3                   \tretq   ", "code_s": "__int64 __fastcall matroska_convert_tag(__int64 <span class=\"supfact\">a1</span>,\n                                        unsigned int *<span class=\"supfact\">a2</span>,\n                                        __int64 <span class=\"supfact\">a3</span>,\n                                        const char *<span class=\"supfact\">a4</span>) {\n  __int64 v4;\n  __int64 result;\n  char <span class=\"supfact\">s</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v10</span> = *((_QWORD *)<span class=\"supfact\">a2</span> + Number);\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = *<span class=\"supfact\">a2</span>;\n    if (<span class=\"supfact\">i</span> >= (int)result)\n      break;\n    if (!strcmp(*(const char **)(Number L * <span class=\"supfact\">i</span> +\n                                 <span class=\"supfact\">v10</span> + Number),\n                String))\n      v4 = Number L;\n    else\n      v4 = *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">v10</span> +\n                       Number);\n    <span class=\"supfact\">v9</span> = v4;\n    if (<span class=\"supfact\">a4</span>)\n      snprintf(\n          <span class=\"supfact\">s</span>, Number, String, <span class=\"supfact\">a4</span>,\n          *(const char **)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">v10</span>));\n    else\n      av_strlcpy(\n          <span class=\"supfact\">s</span>,\n          *(_QWORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">v10</span>),\n          Number L);\n    if (*(_QWORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">v10</span> +\n                    Number) ||\n        !<span class=\"supfact\">v9</span>) {\n      av_metadata_set(<span class=\"supfact\">a3</span>, <span class=\"supfact\">s</span>,\n                      *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                                  <span class=\"supfact\">v10</span> + Number));\n      if (*(_DWORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">v10</span> +\n                      Number))\n        matroska_convert_tag(<span class=\"supfact\">a1</span>,\n                             Number L * <span class=\"supfact\">i</span> +\n                                 <span class=\"supfact\">v10</span> + Number,\n                             <span class=\"supfact\">a3</span>, <span class=\"supfact\">s</span>);\n    }\n    if (<span class=\"supfact\">v9</span>) {\n      av_strlcat(<span class=\"supfact\">s</span>, String, Number L);\n      av_strlcat(<span class=\"supfact\">s</span>, <span class=\"supfact\">v9</span>, Number L);\n      av_metadata_set(<span class=\"supfact\">a3</span>, <span class=\"supfact\">s</span>,\n                      *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                                  <span class=\"supfact\">v10</span> + Number));\n      if (*(_DWORD *)(Number L * <span class=\"supfact\">i</span> + <span class=\"supfact\">v10</span> +\n                      Number))\n        matroska_convert_tag(<span class=\"supfact\">a1</span>,\n                             Number L * <span class=\"supfact\">i</span> +\n                                 <span class=\"supfact\">v10</span> + Number,\n                             <span class=\"supfact\">a3</span>, <span class=\"supfact\">s</span>);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl matroska_convert_tag(AVFormatContext_0 *<span class=\"supfact\">s</span>,\n                                  EbmlList *<span class=\"supfact\">list</span>,\n                                  AVMetadata_0 **<span class=\"supfact\">metadata</span>,\n                                  char *<span class=\"supfact\">prefix</span>) {\n  char *v4;\n  char <span class=\"supfact\">key</span>[Number];\n  const char *<span class=\"supfact\">lang</span>;\n  MatroskaTag *<span class=\"supfact\">tags</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">tags</span> = (MatroskaTag *)<span class=\"supfact\">list</span>->elem;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">list</span>->nb_elem; ++<span class=\"supfact\">i</span>) {\n    if (!strcmp(<span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].<span class=\"supfact\">lang</span>,\n                String))\n      v4 = Number L;\n    else\n      v4 = <span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].<span class=\"supfact\">lang</span>;\n    <span class=\"supfact\">lang</span> = v4;\n    if (<span class=\"supfact\">prefix</span>)\n      snprintf(<span class=\"supfact\">key</span>, Number, String, <span class=\"supfact\">prefix</span>,\n               <span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].name);\n    else\n      av_strlcpy(<span class=\"supfact\">key</span>,\n                 <span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].name, Number L);\n    if (<span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].def || !<span class=\"supfact\">lang</span>) {\n      av_metadata_set(<span class=\"supfact\">metadata</span>, <span class=\"supfact\">key</span>,\n                      <span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].string);\n      if (<span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].sub.nb_elem)\n        matroska_convert_tag(<span class=\"supfact\">s</span>,\n                             &<span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].sub,\n                             <span class=\"supfact\">metadata</span>, <span class=\"supfact\">key</span>);\n    }\n    if (<span class=\"supfact\">lang</span>) {\n      av_strlcat(<span class=\"supfact\">key</span>, String, Number L);\n      av_strlcat(<span class=\"supfact\">key</span>, <span class=\"supfact\">lang</span>, Number L);\n      av_metadata_set(<span class=\"supfact\">metadata</span>, <span class=\"supfact\">key</span>,\n                      <span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].string);\n      if (<span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].sub.nb_elem)\n        matroska_convert_tag(<span class=\"supfact\">s</span>,\n                             &<span class=\"supfact\">tags</span>[<span class=\"supfact\">i</span>].sub,\n                             <span class=\"supfact\">metadata</span>, <span class=\"supfact\">key</span>);\n    }\n  }\n}", "var": [{"name": "a1", "type": "AVFormatContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "AVFormatContext_0 *"}, {"name": "a2", "type": "EbmlList *", "pred_name": "list", "ref_name": "list", "ref_type": "EbmlList *"}, {"name": "a3", "type": "AVMetadata_0 * *", "pred_name": "metadata", "ref_name": "metadata", "ref_type": "AVMetadata_0 * *"}, {"name": "a4", "type": "char *", "pred_name": "prefix", "ref_name": "prefix", "ref_type": "char *"}, {"name": "s", "type": "char[1024]", "pred_name": "key", "ref_name": "key", "ref_type": "char[1024]"}, {"name": "v9", "type": "const char *", "pred_name": "lang", "ref_name": "lang", "ref_type": "const char *"}, {"name": "v10", "type": "MatroskaTag *", "pred_name": "tags", "ref_name": "tags", "ref_type": "MatroskaTag *"}, {"name": "i", "type": "int", "pred_name": "i", "ref_name": "i", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "alex-mocanu", "repo_name": "Interesting-Homeworks", "path": "alex-mocanu/Interesting-Homeworks/e4404e6ba613fdb21b3517d204ae6d3760936b66b573d6cebd61e518803cb484", "path_in_repo": "alex-mocanu/Interesting-Homeworks/Second Year/Communication Protocols/Web Crawler/server", "objdump": "0000000000407252 <_ZSt9make_pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEtESt4pairINSt17__decay_and_stripIT_E6__typeENS7_IT0_E6__typeEEOS8_OSB_>:\n  407252:\t55                   \tpush   %rbp\n  407253:\t48 89 e5             \tmov    %rsp,%rbp\n  407256:\t53                   \tpush   %rbx\n  407257:\t48 83 ec 28          \tsub    $0x28,%rsp\n  40725b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40725f:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  407263:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  407267:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40726b:\t48 89 c7             \tmov    %rax,%rdi\n  40726e:\te8 2f 00 00 00       \tcallq  4072a2 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>\n  407273:\t48 89 c3             \tmov    %rax,%rbx\n  407276:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40727a:\t48 89 c7             \tmov    %rax,%rdi\n  40727d:\te8 11 0c 00 00       \tcallq  407e93 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>\n  407282:\t48 89 c1             \tmov    %rax,%rcx\n  407285:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  407289:\t48 89 da             \tmov    %rbx,%rdx\n  40728c:\t48 89 ce             \tmov    %rcx,%rsi\n  40728f:\t48 89 c7             \tmov    %rax,%rdi\n  407292:\te8 0b 0c 00 00       \tcallq  407ea2 <_ZNSt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEtEC1IS5_tLb1EEEOT_OT0_>\n  407297:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40729b:\t48 83 c4 28          \tadd    $0x28,%rsp\n  40729f:\t5b                   \tpop    %rbx\n  4072a0:\t5d                   \tpop    %rbp\n  4072a1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std make_pair<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>,\n    unsigned short>(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n                    __int64 <span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v3</span> = std forward<unsigned short>(<span class=\"supfact\">a3</span>);\n  <span class=\"supfact\">v4</span> = std forward<std __cxx11 basic_string<\n      char, std char_traits<char>, std allocator<char>>>(<span class=\"supfact\">a2</span>);\n  std pair<std __cxx11\n               basic_string<char, std char_traits<char>, std allocator<char>>,\n           unsigned short>\n      pair<std __cxx11\n               basic_string<char, std char_traits<char>, std allocator<char>>,\n           unsigned short, true>(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v4</span>,\n                                 <span class=\"supfact\">v3</span>);\n  return <span class=\"supfact\">a1</span>;\n}", "code_t": "__int64 __fastcall std make_pair<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>,\n    unsigned short>(__int64 <span class=\"supfact\">a1</span>, __int64 <span class=\"supfact\">a2</span>,\n                    __int64 <span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v3</span> = std forward<unsigned short>(<span class=\"supfact\">a3</span>);\n  <span class=\"supfact\">v4</span> = std forward<std __cxx11 basic_string<\n      char, std char_traits<char>, std allocator<char>>>(<span class=\"supfact\">a2</span>);\n  std pair<std __cxx11\n               basic_string<char, std char_traits<char>, std allocator<char>>,\n           unsigned short>\n      pair<std __cxx11\n               basic_string<char, std char_traits<char>, std allocator<char>>,\n           unsigned short, true>(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v4</span>,\n                                 <span class=\"supfact\">v3</span>);\n  return <span class=\"supfact\">a1</span>;\n}", "var": [{"name": "a1", "type": "std::string *", "pred_name": "retstr", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > *", "pred_name": "__x", "ref_name": "a2", "ref_type": "__int64"}, {"name": "a3", "type": "unsigned __int16 *", "pred_name": "__y", "ref_name": "a3", "ref_type": "__int64"}, {"name": "v3", "type": "unsigned __int16 *", "pred_name": "v3", "ref_name": "v3", "ref_type": "__int64"}, {"name": "v4", "type": "disappear", "pred_name": "", "ref_name": "v4", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "euiko", "repo_name": "platchamer", "path": "euiko/platchamer/b069376ef244c15a34ffd8d3dd5888567198fc51fe0113d35bd4887340e7db9f", "path_in_repo": "euiko/platchamer/3rdparty/bgfx/3rdparty/glsl-optimizer/src/glsl/ir_builder.o", "objdump": "0000000000000000 <_ZN10ir_builder3i2fENS_7operandE>:\n   0:\t48 89 fe             \tmov    %rdi,%rsi\n   3:\tbf 0f 00 00 00       \tmov    $0xf,%edi\n   8:\te9 00 00 00 00       \tjmpq   d <_ZN10ir_builder3i2fENS_7operandE+0xd>", "code_s": "__int64 __fastcall ir_builder i2f(__int64 <span class=\"supfact\">a1</span>) {\n  return ir_builder expr(Number, <span class=\"supfact\">a1</span>);\n}", "code_t": "__int64 __fastcall ir_builder i2f(__int64 <span class=\"supfact\">a1</span>) {\n  return ir_builder expr(Number, <span class=\"supfact\">a1</span>);\n}", "var": [{"name": "a1", "type": "__int64", "pred_name": "a1", "ref_name": "a1", "ref_type": "__int64"}], "body_in_train": false}, {"repo_owner": "openpattreco", "repo_name": "3rdParty", "path": "openpattreco/3rdParty/adebc44e5edae6319afe7065574d8800eeadfc318d6ace4ce56c9f7d1b4c4c47", "path_in_repo": "openpattreco/3rdParty/fingerprint/NBIS/Rel_4.2.0/png/src/lib/png/pngrutil.o", "objdump": "00000000000029a2 <png_handle_bKGD>:\n    29a2:\t55                   \tpush   %rbp\n    29a3:\t48 89 e5             \tmov    %rsp,%rbp\n    29a6:\t48 83 ec 30          \tsub    $0x30,%rsp\n    29aa:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    29ae:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    29b2:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    29b6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    29ba:\t48 8b 80 18 01 00 00 \tmov    0x118(%rax),%rax\n    29c1:\t83 e0 01             \tand    $0x1,%eax\n    29c4:\t48 85 c0             \ttest   %rax,%rax\n    29c7:\t75 16                \tjne    29df <png_handle_bKGD+0x3d>\n    29c9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    29cd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    29d2:\t48 89 c7             \tmov    %rax,%rdi\n    29d5:\te8 00 00 00 00       \tcallq  29da <png_handle_bKGD+0x38>\n    29da:\te9 c7 00 00 00       \tjmpq   2aa6 <png_handle_bKGD+0x104>\n    29df:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    29e3:\t48 8b 80 18 01 00 00 \tmov    0x118(%rax),%rax\n    29ea:\t83 e0 04             \tand    $0x4,%eax\n    29ed:\t48 85 c0             \ttest   %rax,%rax\n    29f0:\t74 29                \tje     2a1b <png_handle_bKGD+0x79>\n    29f2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    29f6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    29fb:\t48 89 c7             \tmov    %rax,%rdi\n    29fe:\te8 00 00 00 00       \tcallq  2a03 <png_handle_bKGD+0x61>\n    2a03:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2a07:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2a0b:\t48 89 d6             \tmov    %rdx,%rsi\n    2a0e:\t48 89 c7             \tmov    %rax,%rdi\n    2a11:\te8 00 00 00 00       \tcallq  2a16 <png_handle_bKGD+0x74>\n    2a16:\te9 fc 02 00 00       \tjmpq   2d17 <png_handle_bKGD+0x375>\n    2a1b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2a1f:\t0f b6 80 76 02 00 00 \tmovzbl 0x276(%rax),%eax\n    2a26:\t3c 03                \tcmp    $0x3,%al\n    2a28:\t75 3c                \tjne    2a66 <png_handle_bKGD+0xc4>\n    2a2a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2a2e:\t48 8b 80 18 01 00 00 \tmov    0x118(%rax),%rax\n    2a35:\t83 e0 02             \tand    $0x2,%eax\n    2a38:\t48 85 c0             \ttest   %rax,%rax\n    2a3b:\t75 29                \tjne    2a66 <png_handle_bKGD+0xc4>\n    2a3d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2a41:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2a46:\t48 89 c7             \tmov    %rax,%rdi\n    2a49:\te8 00 00 00 00       \tcallq  2a4e <png_handle_bKGD+0xac>\n    2a4e:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2a52:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2a56:\t48 89 d6             \tmov    %rdx,%rsi\n    2a59:\t48 89 c7             \tmov    %rax,%rdi\n    2a5c:\te8 00 00 00 00       \tcallq  2a61 <png_handle_bKGD+0xbf>\n    2a61:\te9 b1 02 00 00       \tjmpq   2d17 <png_handle_bKGD+0x375>\n    2a66:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    2a6b:\t74 39                \tje     2aa6 <png_handle_bKGD+0x104>\n    2a6d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2a71:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2a75:\t83 e0 20             \tand    $0x20,%eax\n    2a78:\t48 85 c0             \ttest   %rax,%rax\n    2a7b:\t74 29                \tje     2aa6 <png_handle_bKGD+0x104>\n    2a7d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2a81:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2a86:\t48 89 c7             \tmov    %rax,%rdi\n    2a89:\te8 00 00 00 00       \tcallq  2a8e <png_handle_bKGD+0xec>\n    2a8e:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2a92:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2a96:\t48 89 d6             \tmov    %rdx,%rsi\n    2a99:\t48 89 c7             \tmov    %rax,%rdi\n    2a9c:\te8 00 00 00 00       \tcallq  2aa1 <png_handle_bKGD+0xff>\n    2aa1:\te9 71 02 00 00       \tjmpq   2d17 <png_handle_bKGD+0x375>\n    2aa6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2aaa:\t0f b6 80 76 02 00 00 \tmovzbl 0x276(%rax),%eax\n    2ab1:\t3c 03                \tcmp    $0x3,%al\n    2ab3:\t75 0a                \tjne    2abf <png_handle_bKGD+0x11d>\n    2ab5:\t48 c7 45 f8 01 00 00 \tmovq   $0x1,-0x8(%rbp)\n    2abc:\t00 \n    2abd:\teb 27                \tjmp    2ae6 <png_handle_bKGD+0x144>\n    2abf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2ac3:\t0f b6 80 76 02 00 00 \tmovzbl 0x276(%rax),%eax\n    2aca:\t0f b6 c0             \tmovzbl %al,%eax\n    2acd:\t83 e0 02             \tand    $0x2,%eax\n    2ad0:\t85 c0                \ttest   %eax,%eax\n    2ad2:\t74 0a                \tje     2ade <png_handle_bKGD+0x13c>\n    2ad4:\t48 c7 45 f8 06 00 00 \tmovq   $0x6,-0x8(%rbp)\n    2adb:\t00 \n    2adc:\teb 08                \tjmp    2ae6 <png_handle_bKGD+0x144>\n    2ade:\t48 c7 45 f8 02 00 00 \tmovq   $0x2,-0x8(%rbp)\n    2ae5:\t00 \n    2ae6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2aea:\t48 3b 45 f8          \tcmp    -0x8(%rbp),%rax\n    2aee:\t74 29                \tje     2b19 <png_handle_bKGD+0x177>\n    2af0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2af4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2af9:\t48 89 c7             \tmov    %rax,%rdi\n    2afc:\te8 00 00 00 00       \tcallq  2b01 <png_handle_bKGD+0x15f>\n    2b01:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2b05:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2b09:\t48 89 d6             \tmov    %rdx,%rsi\n    2b0c:\t48 89 c7             \tmov    %rax,%rdi\n    2b0f:\te8 00 00 00 00       \tcallq  2b14 <png_handle_bKGD+0x172>\n    2b14:\te9 fe 01 00 00       \tjmpq   2d17 <png_handle_bKGD+0x375>\n    2b19:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    2b1d:\t48 8d 4d f2          \tlea    -0xe(%rbp),%rcx\n    2b21:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2b25:\t48 89 ce             \tmov    %rcx,%rsi\n    2b28:\t48 89 c7             \tmov    %rax,%rdi\n    2b2b:\te8 00 00 00 00       \tcallq  2b30 <png_handle_bKGD+0x18e>\n    2b30:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2b34:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2b39:\t48 89 c7             \tmov    %rax,%rdi\n    2b3c:\te8 00 00 00 00       \tcallq  2b41 <png_handle_bKGD+0x19f>\n    2b41:\t85 c0                \ttest   %eax,%eax\n    2b43:\t0f 85 cd 01 00 00    \tjne    2d16 <png_handle_bKGD+0x374>\n    2b49:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2b4d:\t0f b6 80 76 02 00 00 \tmovzbl 0x276(%rax),%eax\n    2b54:\t3c 03                \tcmp    $0x3,%al\n    2b56:\t0f 85 dd 00 00 00    \tjne    2c39 <png_handle_bKGD+0x297>\n    2b5c:\t0f b6 55 f2          \tmovzbl -0xe(%rbp),%edx\n    2b60:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2b64:\t88 90 88 02 00 00    \tmov    %dl,0x288(%rax)\n    2b6a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2b6e:\t0f b7 40 28          \tmovzwl 0x28(%rax),%eax\n    2b72:\t66 85 c0             \ttest   %ax,%ax\n    2b75:\t0f 84 7b 01 00 00    \tje     2cf6 <png_handle_bKGD+0x354>\n    2b7b:\t0f b6 45 f2          \tmovzbl -0xe(%rbp),%eax\n    2b7f:\t0f b6 d0             \tmovzbl %al,%edx\n    2b82:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2b86:\t0f b7 40 28          \tmovzwl 0x28(%rax),%eax\n    2b8a:\t66 39 c2             \tcmp    %ax,%dx\n    2b8d:\t76 16                \tjbe    2ba5 <png_handle_bKGD+0x203>\n    2b8f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2b93:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2b98:\t48 89 c7             \tmov    %rax,%rdi\n    2b9b:\te8 00 00 00 00       \tcallq  2ba0 <png_handle_bKGD+0x1fe>\n    2ba0:\te9 72 01 00 00       \tjmpq   2d17 <png_handle_bKGD+0x375>\n    2ba5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2ba9:\t48 8b 88 60 02 00 00 \tmov    0x260(%rax),%rcx\n    2bb0:\t0f b6 45 f2          \tmovzbl -0xe(%rbp),%eax\n    2bb4:\t0f b6 d0             \tmovzbl %al,%edx\n    2bb7:\t48 89 d0             \tmov    %rdx,%rax\n    2bba:\t48 01 c0             \tadd    %rax,%rax\n    2bbd:\t48 01 d0             \tadd    %rdx,%rax\n    2bc0:\t48 01 c8             \tadd    %rcx,%rax\n    2bc3:\t0f b6 00             \tmovzbl (%rax),%eax\n    2bc6:\t0f b6 d0             \tmovzbl %al,%edx\n    2bc9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2bcd:\t66 89 90 8a 02 00 00 \tmov    %dx,0x28a(%rax)\n    2bd4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2bd8:\t48 8b 88 60 02 00 00 \tmov    0x260(%rax),%rcx\n    2bdf:\t0f b6 45 f2          \tmovzbl -0xe(%rbp),%eax\n    2be3:\t0f b6 d0             \tmovzbl %al,%edx\n    2be6:\t48 89 d0             \tmov    %rdx,%rax\n    2be9:\t48 01 c0             \tadd    %rax,%rax\n    2bec:\t48 01 d0             \tadd    %rdx,%rax\n    2bef:\t48 01 c8             \tadd    %rcx,%rax\n    2bf2:\t0f b6 40 01          \tmovzbl 0x1(%rax),%eax\n    2bf6:\t0f b6 d0             \tmovzbl %al,%edx\n    2bf9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2bfd:\t66 89 90 8c 02 00 00 \tmov    %dx,0x28c(%rax)\n    2c04:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c08:\t48 8b 88 60 02 00 00 \tmov    0x260(%rax),%rcx\n    2c0f:\t0f b6 45 f2          \tmovzbl -0xe(%rbp),%eax\n    2c13:\t0f b6 d0             \tmovzbl %al,%edx\n    2c16:\t48 89 d0             \tmov    %rdx,%rax\n    2c19:\t48 01 c0             \tadd    %rax,%rax\n    2c1c:\t48 01 d0             \tadd    %rdx,%rax\n    2c1f:\t48 01 c8             \tadd    %rcx,%rax\n    2c22:\t0f b6 40 02          \tmovzbl 0x2(%rax),%eax\n    2c26:\t0f b6 d0             \tmovzbl %al,%edx\n    2c29:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c2d:\t66 89 90 8e 02 00 00 \tmov    %dx,0x28e(%rax)\n    2c34:\te9 bd 00 00 00       \tjmpq   2cf6 <png_handle_bKGD+0x354>\n    2c39:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c3d:\t0f b6 80 76 02 00 00 \tmovzbl 0x276(%rax),%eax\n    2c44:\t0f b6 c0             \tmovzbl %al,%eax\n    2c47:\t83 e0 02             \tand    $0x2,%eax\n    2c4a:\t85 c0                \ttest   %eax,%eax\n    2c4c:\t75 5b                \tjne    2ca9 <png_handle_bKGD+0x307>\n    2c4e:\t48 8d 45 f2          \tlea    -0xe(%rbp),%rax\n    2c52:\t48 89 c7             \tmov    %rax,%rdi\n    2c55:\te8 00 00 00 00       \tcallq  2c5a <png_handle_bKGD+0x2b8>\n    2c5a:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    2c5e:\t66 89 82 90 02 00 00 \tmov    %ax,0x290(%rdx)\n    2c65:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c69:\t0f b7 90 90 02 00 00 \tmovzwl 0x290(%rax),%edx\n    2c70:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c74:\t66 89 90 8e 02 00 00 \tmov    %dx,0x28e(%rax)\n    2c7b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c7f:\t0f b7 90 8e 02 00 00 \tmovzwl 0x28e(%rax),%edx\n    2c86:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c8a:\t66 89 90 8c 02 00 00 \tmov    %dx,0x28c(%rax)\n    2c91:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2c95:\t0f b7 90 8c 02 00 00 \tmovzwl 0x28c(%rax),%edx\n    2c9c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2ca0:\t66 89 90 8a 02 00 00 \tmov    %dx,0x28a(%rax)\n    2ca7:\teb 4d                \tjmp    2cf6 <png_handle_bKGD+0x354>\n    2ca9:\t48 8d 45 f2          \tlea    -0xe(%rbp),%rax\n    2cad:\t48 89 c7             \tmov    %rax,%rdi\n    2cb0:\te8 00 00 00 00       \tcallq  2cb5 <png_handle_bKGD+0x313>\n    2cb5:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    2cb9:\t66 89 82 8a 02 00 00 \tmov    %ax,0x28a(%rdx)\n    2cc0:\t48 8d 45 f2          \tlea    -0xe(%rbp),%rax\n    2cc4:\t48 83 c0 02          \tadd    $0x2,%rax\n    2cc8:\t48 89 c7             \tmov    %rax,%rdi\n    2ccb:\te8 00 00 00 00       \tcallq  2cd0 <png_handle_bKGD+0x32e>\n    2cd0:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    2cd4:\t66 89 82 8c 02 00 00 \tmov    %ax,0x28c(%rdx)\n    2cdb:\t48 8d 45 f2          \tlea    -0xe(%rbp),%rax\n    2cdf:\t48 83 c0 04          \tadd    $0x4,%rax\n    2ce3:\t48 89 c7             \tmov    %rax,%rdi\n    2ce6:\te8 00 00 00 00       \tcallq  2ceb <png_handle_bKGD+0x349>\n    2ceb:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    2cef:\t66 89 82 8e 02 00 00 \tmov    %ax,0x28e(%rdx)\n    2cf6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2cfa:\t48 8d 90 88 02 00 00 \tlea    0x288(%rax),%rdx\n    2d01:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n    2d05:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    2d09:\t48 89 ce             \tmov    %rcx,%rsi\n    2d0c:\t48 89 c7             \tmov    %rax,%rdi\n    2d0f:\te8 00 00 00 00       \tcallq  2d14 <png_handle_bKGD+0x372>\n    2d14:\teb 01                \tjmp    2d17 <png_handle_bKGD+0x375>\n    2d16:\t90                   \tnop\n    2d17:\tc9                   \tleaveq \n    2d18:\tc3                   \tretq   ", "code_s": "__int64 __fastcall png_handle_bKGD(__int64 <span class=\"supfact\">a1</span>,\n                                   __int64 <span class=\"supfact\">a2</span>,\n                                   unsigned __int64 <span class=\"supfact\">a3</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  unsigned __int8 <span class=\"supfact\">v5</span>[Number];\n  unsigned __int8 <span class=\"supfact\">v6</span>[Number];\n  unsigned __int8 <span class=\"supfact\">v7</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>;\n  if ((*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) & Number L) != Number) {\n    if ((*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) & Number L) != Number) {\n      png_warning(<span class=\"supfact\">a1</span>, String);\n      return png_crc_finish(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a3</span>);\n    }\n    if (*(_BYTE *)(<span class=\"supfact\">a1</span> + Number) == Number &&\n        (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) & Number L) == Number) {\n      png_warning(<span class=\"supfact\">a1</span>, String);\n      return png_crc_finish(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a3</span>);\n    }\n    if (<span class=\"supfact\">a2</span> &&\n        (*(_QWORD *)(<span class=\"supfact\">a2</span> + Number) & Number) != Number) {\n      png_warning(<span class=\"supfact\">a1</span>, String);\n      return png_crc_finish(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a3</span>);\n    }\n  } else {\n    png_error(<span class=\"supfact\">a1</span>, String);\n  }\n  if (*(_BYTE *)(<span class=\"supfact\">a1</span> + Number) == Number) {\n    <span class=\"supfact\">v8</span> = Number L;\n  } else if ((*(_BYTE *)(<span class=\"supfact\">a1</span> + Number) & Number) != Number) {\n    <span class=\"supfact\">v8</span> = Number L;\n  } else {\n    <span class=\"supfact\">v8</span> = Number L;\n  }\n  if (<span class=\"supfact\">a3</span> != <span class=\"supfact\">v8</span>) {\n    png_warning(<span class=\"supfact\">a1</span>, String);\n    return png_crc_finish(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a3</span>);\n  }\n  png_crc_read(<span class=\"supfact\">a1</span>, (__int64)<span class=\"supfact\">v5</span>,\n               <span class=\"supfact\">v8</span>);\n  <span class=\"supfact\">result</span> = png_crc_finish(<span class=\"supfact\">a1</span>, Number L);\n  if (!(_DWORD)<span class=\"supfact\">result</span>) {\n    if (*(_BYTE *)(<span class=\"supfact\">a1</span> + Number) == Number) {\n      *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v5</span>[Number];\n      if (*(_WORD *)(<span class=\"supfact\">a2</span> + Number)) {\n        if (<span class=\"supfact\">v5</span>[Number] >\n            (unsigned int)*(_WORD *)(<span class=\"supfact\">a2</span> + Number))\n          return png_warning(<span class=\"supfact\">a1</span>, String);\n        *(_WORD *)(<span class=\"supfact\">a1</span> + Number) =\n            *(unsigned __int8 *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                                 Number L * <span class=\"supfact\">v5</span>[Number]);\n        *(_WORD *)(<span class=\"supfact\">a1</span> + Number) = *(\n            unsigned __int8 *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                               Number L * <span class=\"supfact\">v5</span>[Number] + Number);\n        *(_WORD *)(<span class=\"supfact\">a1</span> + Number) = *(\n            unsigned __int8 *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                               Number L * <span class=\"supfact\">v5</span>[Number] + Number);\n      }\n    } else if ((*(_BYTE *)(<span class=\"supfact\">a1</span> + Number) & Number) != Number) {\n      *(_WORD *)(<span class=\"supfact\">a1</span> + Number) =\n          png_get_uint_16(<span class=\"supfact\">v5</span>);\n      *(_WORD *)(<span class=\"supfact\">a1</span> + Number) =\n          png_get_uint_16(<span class=\"supfact\">v6</span>);\n      *(_WORD *)(<span class=\"supfact\">a1</span> + Number) =\n          png_get_uint_16(<span class=\"supfact\">v7</span>);\n    } else {\n      *(_WORD *)(<span class=\"supfact\">a1</span> + Number) =\n          png_get_uint_16(<span class=\"supfact\">v5</span>);\n      *(_WORD *)(<span class=\"supfact\">a1</span> + Number) =\n          *(_WORD *)(<span class=\"supfact\">a1</span> + Number);\n      *(_WORD *)(<span class=\"supfact\">a1</span> + Number) =\n          *(_WORD *)(<span class=\"supfact\">a1</span> + Number);\n      *(_WORD *)(<span class=\"supfact\">a1</span> + Number) =\n          *(_WORD *)(<span class=\"supfact\">a1</span> + Number);\n    }\n    <span class=\"supfact\">result</span> = png_set_bKGD(\n        <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a1</span> + Number);\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl png_handle_bKGD(png_structp <span class=\"supfact\">png_ptr</span>,\n                             png_infop <span class=\"supfact\">info_ptr</span>,\n                             png_uint_32 <span class=\"supfact\">length</span>) {\n  png_byte <span class=\"supfact\">buf</span>[Number];\n  png_size_t <span class=\"supfact\">truelen</span>;\n  if ((<span class=\"supfact\">png_ptr</span>->mode & Number) != Number) {\n    if ((<span class=\"supfact\">png_ptr</span>->mode & Number) != Number) {\n      png_warning(<span class=\"supfact\">png_ptr</span>, String);\n      png_crc_finish(<span class=\"supfact\">png_ptr</span>, <span class=\"supfact\">length</span>);\n      return;\n    }\n    if (<span class=\"supfact\">png_ptr</span>->color_type == Number &&\n        (<span class=\"supfact\">png_ptr</span>->mode & Number) == Number) {\n      png_warning(<span class=\"supfact\">png_ptr</span>, String);\n      png_crc_finish(<span class=\"supfact\">png_ptr</span>, <span class=\"supfact\">length</span>);\n      return;\n    }\n    if (<span class=\"supfact\">info_ptr</span> &&\n        (<span class=\"supfact\">info_ptr</span>->valid & Number) != Number) {\n      png_warning(<span class=\"supfact\">png_ptr</span>, String);\n      png_crc_finish(<span class=\"supfact\">png_ptr</span>, <span class=\"supfact\">length</span>);\n      return;\n    }\n  } else {\n    png_error(<span class=\"supfact\">png_ptr</span>, String);\n  }\n  if (<span class=\"supfact\">png_ptr</span>->color_type == Number) {\n    <span class=\"supfact\">truelen</span> = Number L;\n  } else if ((<span class=\"supfact\">png_ptr</span>->color_type & Number) != Number) {\n    <span class=\"supfact\">truelen</span> = Number L;\n  } else {\n    <span class=\"supfact\">truelen</span> = Number L;\n  }\n  if (<span class=\"supfact\">length</span> != <span class=\"supfact\">truelen</span>) {\n    png_warning(<span class=\"supfact\">png_ptr</span>, String);\n    png_crc_finish(<span class=\"supfact\">png_ptr</span>, <span class=\"supfact\">length</span>);\n    return;\n  }\n  png_crc_read(<span class=\"supfact\">png_ptr</span>, <span class=\"supfact\">buf</span>,\n               <span class=\"supfact\">truelen</span>);\n  if (!png_crc_finish(<span class=\"supfact\">png_ptr</span>, Number L)) {\n    if (<span class=\"supfact\">png_ptr</span>->color_type == Number) {\n      <span class=\"supfact\">png_ptr</span>->background.index = <span class=\"supfact\">buf</span>[Number];\n      if (<span class=\"supfact\">info_ptr</span>->num_palette) {\n        if (<span class=\"supfact\">buf</span>[Number] >\n            (unsigned int)<span class=\"supfact\">info_ptr</span>->num_palette) {\n          png_warning(<span class=\"supfact\">png_ptr</span>, String);\n          return;\n        }\n        <span class=\"supfact\">png_ptr</span>->background.red =\n            <span class=\"supfact\">png_ptr</span>->palette[<span class=\"supfact\">buf</span>[Number]].red;\n        <span class=\"supfact\">png_ptr</span>->background.green =\n            <span class=\"supfact\">png_ptr</span>->palette[<span class=\"supfact\">buf</span>[Number]].green;\n        <span class=\"supfact\">png_ptr</span>->background.blue =\n            <span class=\"supfact\">png_ptr</span>->palette[<span class=\"supfact\">buf</span>[Number]].blue;\n      }\n    } else if ((<span class=\"supfact\">png_ptr</span>->color_type & Number) != Number) {\n      <span class=\"supfact\">png_ptr</span>->background.red =\n          png_get_uint_16(<span class=\"supfact\">buf</span>);\n      <span class=\"supfact\">png_ptr</span>->background.green =\n          png_get_uint_16(&<span class=\"supfact\">buf</span>[Number]);\n      <span class=\"supfact\">png_ptr</span>->background.blue =\n          png_get_uint_16(&<span class=\"supfact\">buf</span>[Number]);\n    } else {\n      <span class=\"supfact\">png_ptr</span>->background.gray =\n          png_get_uint_16(<span class=\"supfact\">buf</span>);\n      <span class=\"supfact\">png_ptr</span>->background.blue =\n          <span class=\"supfact\">png_ptr</span>->background.gray;\n      <span class=\"supfact\">png_ptr</span>->background.green =\n          <span class=\"supfact\">png_ptr</span>->background.blue;\n      <span class=\"supfact\">png_ptr</span>->background.red =\n          <span class=\"supfact\">png_ptr</span>->background.green;\n    }\n    png_set_bKGD(<span class=\"supfact\">png_ptr</span>, <span class=\"supfact\">info_ptr</span>,\n                 &<span class=\"supfact\">png_ptr</span>->background);\n  }\n}", "var": [{"name": "a1", "type": "png_structp", "pred_name": "png_ptr", "ref_name": "png_ptr", "ref_type": "png_structp"}, {"name": "a2", "type": "png_infop", "pred_name": "info_ptr", "ref_name": "info_ptr", "ref_type": "png_infop"}, {"name": "a3", "type": "__unk__", "pred_name": "__unk__", "ref_name": "length", "ref_type": "png_uint_32"}, {"name": "result", "type": "voidpf", "pred_name": "result", "ref_name": "", "ref_type": "disappear"}, {"name": "v5", "type": "__unk__", "pred_name": "__unk__", "ref_name": "buf", "ref_type": "png_byte[6]"}, {"name": "v6", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v7", "type": "__unk__", "pred_name": "__unk__", "ref_name": "", "ref_type": "disappear"}, {"name": "v8", "type": "__unk__", "pred_name": "__unk__", "ref_name": "truelen", "ref_type": "png_size_t"}], "body_in_train": false}, {"repo_owner": "Vereis", "repo_name": "urxvt-patched", "path": "Vereis/urxvt-patched/61aed3892b773725799a1ca8d65d913b5467394881ee247c409b56da26908d1d", "path_in_repo": "Vereis/urxvt-patched//src/ptytty_wrapper.o", "objdump": "0000000000000000 <_ZN12ptytty_proxy5loginEibPKc>:\n   0:\t48 81 ec 28 02 00 00 \tsub    $0x228,%rsp\n   7:\t48 8b 47 10          \tmov    0x10(%rdi),%rax\n   b:\t41 89 f0             \tmov    %esi,%r8d\n   e:\t48 89 ce             \tmov    %rcx,%rsi\n  11:\t88 54 24 10          \tmov    %dl,0x10(%rsp)\n  15:\t48 8d 7c 24 18       \tlea    0x18(%rsp),%rdi\n  1a:\tba 00 02 00 00       \tmov    $0x200,%edx\n  1f:\t44 89 44 24 14       \tmov    %r8d,0x14(%rsp)\n  24:\tc7 04 24 01 00 00 00 \tmovl   $0x1,(%rsp)\n  2b:\t48 89 44 24 08       \tmov    %rax,0x8(%rsp)\n  30:\te8 00 00 00 00       \tcallq  35 <_ZN12ptytty_proxy5loginEibPKc+0x35>\n  35:\t8b 3d 00 00 00 00    \tmov    0x0(%rip),%edi        # 3b <_ZN12ptytty_proxy5loginEibPKc+0x3b>\n  3b:\t48 89 e6             \tmov    %rsp,%rsi\n  3e:\tba 18 02 00 00       \tmov    $0x218,%edx\n  43:\te8 00 00 00 00       \tcallq  48 <_ZN12ptytty_proxy5loginEibPKc+0x48>\n  48:\t48 81 c4 28 02 00 00 \tadd    $0x228,%rsp\n  4f:\tc3                   \tretq   ", "code_s": "ssize_t __fastcall ptytty_proxy login(ptytty_proxy *<span class=\"supfact\">this</span>,\n                                      int <span class=\"supfact\">a2</span>,\n                                      char <span class=\"supfact\">a3</span>,\n                                      const char *<span class=\"supfact\">a4</span>) {\n  __int64 <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">v9</span>;\n  char <span class=\"supfact\">dest</span>[Number];\n  <span class=\"supfact\">v4</span> = *((_QWORD *)<span class=\"supfact\">this</span> + Number);\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">a3</span>;\n  <span class=\"supfact\">v9</span> = <span class=\"supfact\">a2</span>;\n  <span class=\"supfact\">v6</span> = Number;\n  <span class=\"supfact\">v7</span> = <span class=\"supfact\">v4</span>;\n  strncpy(<span class=\"supfact\">dest</span>, <span class=\"supfact\">a4</span>, Number);\n  return write((int)sock_fd, &<span class=\"supfact\">v6</span>, Number);\n}", "code_t": "void __fastcall ptytty_proxy login(ptytty_proxy *const <span class=\"supfact\">this</span>,\n                                   int <span class=\"supfact\">cmd_pid</span>,\n                                   bool <span class=\"supfact\">login_shell</span>,\n                                   const char *<span class=\"supfact\">hostname</span>) {\n  ptytty *<span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  ptytty *<span class=\"supfact\">v6</span>;\n  bool <span class=\"supfact\">login_shella</span>;\n  int <span class=\"supfact\">v8</span>;\n  char <span class=\"supfact\">dest</span>[Number];\n  <span class=\"supfact\">v4</span> = <span class=\"supfact\">this</span>->id;\n  <span class=\"supfact\">login_shella</span> = <span class=\"supfact\">login_shell</span>;\n  <span class=\"supfact\">v8</span> = <span class=\"supfact\">cmd_pid</span>;\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">v6</span> = <span class=\"supfact\">v4</span>;\n  strncpy(<span class=\"supfact\">dest</span>, <span class=\"supfact\">hostname</span>, Number);\n  write((int)sock_fd, &<span class=\"supfact\">v5</span>, Number);\n}", "var": [{"name": "this", "type": "__unk__", "pred_name": "this", "ref_name": "this", "ref_type": "ptytty_proxy *"}, {"name": "a2", "type": "int", "pred_name": "a2", "ref_name": "cmd_pid", "ref_type": "int"}, {"name": "a3", "type": "char", "pred_name": "a3", "ref_name": "login_shell", "ref_type": "bool"}, {"name": "a4", "type": "const char *", "pred_name": "a4", "ref_name": "hostname", "ref_type": "const char *"}, {"name": "v4", "type": "__int64", "pred_name": "v4", "ref_name": "v4", "ref_type": "ptytty *"}, {"name": "v6", "type": "int", "pred_name": "v6", "ref_name": "v5", "ref_type": "int"}, {"name": "v7", "type": "__int64", "pred_name": "v7", "ref_name": "v6", "ref_type": "ptytty *"}, {"name": "v8", "type": "char", "pred_name": "v8", "ref_name": "login_shella", "ref_type": "bool"}, {"name": "v9", "type": "int", "pred_name": "v9", "ref_name": "v8", "ref_type": "int"}, {"name": "dest", "type": "char[512]", "pred_name": "buf", "ref_name": "dest", "ref_type": "char[528]"}], "body_in_train": false}, {"repo_owner": "martinez-zea", "repo_name": "localconflict", "path": "martinez-zea/localconflict/99778e4b4149d78a20327fd85d18bd4dfb4cd28faf6cce9c18c62db3a1133046", "path_in_repo": "martinez-zea/localconflict/q3osc/build/release-linux-x86_64/missionpack/ui/ui_shared.o", "objdump": "00000000000084a4 <Item_Text_AutoWrapped_Paint>:\n    84a4:\t48 81 ec 68 08 00 00 \tsub    $0x868,%rsp\n    84ab:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    84b0:\tc7 84 24 40 08 00 00 \tmovl   $0x0,0x840(%rsp)\n    84b7:\t00 00 00 00 \n    84bb:\t48 c7 84 24 48 08 00 \tmovq   $0x0,0x848(%rsp)\n    84c2:\t00 00 00 00 00 \n    84c7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    84cc:\t48 8b 80 f0 00 00 00 \tmov    0xf0(%rax),%rax\n    84d3:\t48 85 c0             \ttest   %rax,%rax\n    84d6:\t75 5a                \tjne    8532 <Item_Text_AutoWrapped_Paint+0x8e>\n    84d8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    84dd:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n    84e4:\t48 85 c0             \ttest   %rax,%rax\n    84e7:\t0f 84 e9 03 00 00    \tje     88d6 <Item_Text_AutoWrapped_Paint+0x432>\n    84ed:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 84f4 <Item_Text_AutoWrapped_Paint+0x50>\n    84f4:\t48 8b 00             \tmov    (%rax),%rax\n    84f7:\t4c 8b 80 b0 00 00 00 \tmov    0xb0(%rax),%r8\n    84fe:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8503:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n    850a:\t48 8d 8c 24 30 04 00 \tlea    0x430(%rsp),%rcx\n    8511:\t00 \n    8512:\tba 00 04 00 00       \tmov    $0x400,%edx\n    8517:\t48 89 ce             \tmov    %rcx,%rsi\n    851a:\t48 89 c7             \tmov    %rax,%rdi\n    851d:\t41 ff d0             \tcallq  *%r8\n    8520:\t48 8d 84 24 30 04 00 \tlea    0x430(%rsp),%rax\n    8527:\t00 \n    8528:\t48 89 84 24 50 08 00 \tmov    %rax,0x850(%rsp)\n    852f:\t00 \n    8530:\teb 14                \tjmp    8546 <Item_Text_AutoWrapped_Paint+0xa2>\n    8532:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8537:\t48 8b 80 f0 00 00 00 \tmov    0xf0(%rax),%rax\n    853e:\t48 89 84 24 50 08 00 \tmov    %rax,0x850(%rsp)\n    8545:\t00 \n    8546:\t48 8b 84 24 50 08 00 \tmov    0x850(%rsp),%rax\n    854d:\t00 \n    854e:\t0f b6 00             \tmovzbl (%rax),%eax\n    8551:\t84 c0                \ttest   %al,%al\n    8553:\t0f 84 80 03 00 00    \tje     88d9 <Item_Text_AutoWrapped_Paint+0x435>\n    8559:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n    855e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8563:\t48 89 d6             \tmov    %rdx,%rsi\n    8566:\t48 89 c7             \tmov    %rax,%rdi\n    8569:\te8 00 00 00 00       \tcallq  856e <Item_Text_AutoWrapped_Paint+0xca>\n    856e:\t48 8b 8c 24 50 08 00 \tmov    0x850(%rsp),%rcx\n    8575:\t00 \n    8576:\t48 8d 54 24 28       \tlea    0x28(%rsp),%rdx\n    857b:\t48 8d 74 24 2c       \tlea    0x2c(%rsp),%rsi\n    8580:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8585:\t48 89 c7             \tmov    %rax,%rdi\n    8588:\te8 00 00 00 00       \tcallq  858d <Item_Text_AutoWrapped_Paint+0xe9>\n    858d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8592:\tf3 0f 10 80 e0 00 00 \tmovss  0xe0(%rax),%xmm0\n    8599:\t00 \n    859a:\tf3 0f 11 84 24 34 08 \tmovss  %xmm0,0x834(%rsp)\n    85a1:\t00 00 \n    85a3:\tc7 84 24 44 08 00 00 \tmovl   $0x0,0x844(%rsp)\n    85aa:\t00 00 00 00 \n    85ae:\tc6 44 24 30 00       \tmovb   $0x0,0x30(%rsp)\n    85b3:\tc7 84 24 3c 08 00 00 \tmovl   $0x0,0x83c(%rsp)\n    85ba:\t00 00 00 00 \n    85be:\tc7 84 24 38 08 00 00 \tmovl   $0x0,0x838(%rsp)\n    85c5:\t00 00 00 00 \n    85c9:\t48 8b 84 24 50 08 00 \tmov    0x850(%rsp),%rax\n    85d0:\t00 \n    85d1:\t48 89 84 24 58 08 00 \tmov    %rax,0x858(%rsp)\n    85d8:\t00 \n    85d9:\te9 e7 02 00 00       \tjmpq   88c5 <Item_Text_AutoWrapped_Paint+0x421>\n    85de:\t48 8b 84 24 58 08 00 \tmov    0x858(%rsp),%rax\n    85e5:\t00 \n    85e6:\t0f b6 00             \tmovzbl (%rax),%eax\n    85e9:\t3c 20                \tcmp    $0x20,%al\n    85eb:\t74 2d                \tje     861a <Item_Text_AutoWrapped_Paint+0x176>\n    85ed:\t48 8b 84 24 58 08 00 \tmov    0x858(%rsp),%rax\n    85f4:\t00 \n    85f5:\t0f b6 00             \tmovzbl (%rax),%eax\n    85f8:\t3c 09                \tcmp    $0x9,%al\n    85fa:\t74 1e                \tje     861a <Item_Text_AutoWrapped_Paint+0x176>\n    85fc:\t48 8b 84 24 58 08 00 \tmov    0x858(%rsp),%rax\n    8603:\t00 \n    8604:\t0f b6 00             \tmovzbl (%rax),%eax\n    8607:\t3c 0a                \tcmp    $0xa,%al\n    8609:\t74 0f                \tje     861a <Item_Text_AutoWrapped_Paint+0x176>\n    860b:\t48 8b 84 24 58 08 00 \tmov    0x858(%rsp),%rax\n    8612:\t00 \n    8613:\t0f b6 00             \tmovzbl (%rax),%eax\n    8616:\t84 c0                \ttest   %al,%al\n    8618:\t75 30                \tjne    864a <Item_Text_AutoWrapped_Paint+0x1a6>\n    861a:\t8b 84 24 44 08 00 00 \tmov    0x844(%rsp),%eax\n    8621:\t89 84 24 3c 08 00 00 \tmov    %eax,0x83c(%rsp)\n    8628:\t48 8b 84 24 58 08 00 \tmov    0x858(%rsp),%rax\n    862f:\t00 \n    8630:\t48 83 c0 01          \tadd    $0x1,%rax\n    8634:\t48 89 84 24 48 08 00 \tmov    %rax,0x848(%rsp)\n    863b:\t00 \n    863c:\t8b 84 24 40 08 00 00 \tmov    0x840(%rsp),%eax\n    8643:\t89 84 24 38 08 00 00 \tmov    %eax,0x838(%rsp)\n    864a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8651 <Item_Text_AutoWrapped_Paint+0x1ad>\n    8651:\t48 8b 00             \tmov    (%rax),%rax\n    8654:\t48 8b 48 28          \tmov    0x28(%rax),%rcx\n    8658:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    865d:\t8b 90 e4 00 00 00    \tmov    0xe4(%rax),%edx\n    8663:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n    8668:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    866d:\t66 0f 6e c2          \tmovd   %edx,%xmm0\n    8671:\t48 89 c7             \tmov    %rax,%rdi\n    8674:\tff d1                \tcallq  *%rcx\n    8676:\t89 84 24 40 08 00 00 \tmov    %eax,0x840(%rsp)\n    867d:\t83 bc 24 3c 08 00 00 \tcmpl   $0x0,0x83c(%rsp)\n    8684:\t00 \n    8685:\t74 18                \tje     869f <Item_Text_AutoWrapped_Paint+0x1fb>\n    8687:\tf3 0f 2a 84 24 40 08 \tcvtsi2ssl 0x840(%rsp),%xmm0\n    868e:\t00 00 \n    8690:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8695:\tf3 0f 10 48 08       \tmovss  0x8(%rax),%xmm1\n    869a:\t0f 2f c1             \tcomiss %xmm1,%xmm0\n    869d:\t77 22                \tja     86c1 <Item_Text_AutoWrapped_Paint+0x21d>\n    869f:\t48 8b 84 24 58 08 00 \tmov    0x858(%rsp),%rax\n    86a6:\t00 \n    86a7:\t0f b6 00             \tmovzbl (%rax),%eax\n    86aa:\t3c 0a                \tcmp    $0xa,%al\n    86ac:\t74 13                \tje     86c1 <Item_Text_AutoWrapped_Paint+0x21d>\n    86ae:\t48 8b 84 24 58 08 00 \tmov    0x858(%rsp),%rax\n    86b5:\t00 \n    86b6:\t0f b6 00             \tmovzbl (%rax),%eax\n    86b9:\t84 c0                \ttest   %al,%al\n    86bb:\t0f 85 c7 01 00 00    \tjne    8888 <Item_Text_AutoWrapped_Paint+0x3e4>\n    86c1:\t83 bc 24 44 08 00 00 \tcmpl   $0x0,0x844(%rsp)\n    86c8:\t00 \n    86c9:\t0f 84 52 01 00 00    \tje     8821 <Item_Text_AutoWrapped_Paint+0x37d>\n    86cf:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    86d4:\t8b 80 d8 00 00 00    \tmov    0xd8(%rax),%eax\n    86da:\t85 c0                \ttest   %eax,%eax\n    86dc:\t75 1c                \tjne    86fa <Item_Text_AutoWrapped_Paint+0x256>\n    86de:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    86e3:\tf3 0f 10 80 dc 00 00 \tmovss  0xdc(%rax),%xmm0\n    86ea:\t00 \n    86eb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    86f0:\tf3 0f 11 80 c0 00 00 \tmovss  %xmm0,0xc0(%rax)\n    86f7:\t00 \n    86f8:\teb 7b                \tjmp    8775 <Item_Text_AutoWrapped_Paint+0x2d1>\n    86fa:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    86ff:\t8b 80 d8 00 00 00    \tmov    0xd8(%rax),%eax\n    8705:\t83 f8 02             \tcmp    $0x2,%eax\n    8708:\t75 29                \tjne    8733 <Item_Text_AutoWrapped_Paint+0x28f>\n    870a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    870f:\tf3 0f 10 80 dc 00 00 \tmovss  0xdc(%rax),%xmm0\n    8716:\t00 \n    8717:\tf3 0f 2a 8c 24 38 08 \tcvtsi2ssl 0x838(%rsp),%xmm1\n    871e:\t00 00 \n    8720:\tf3 0f 5c c1          \tsubss  %xmm1,%xmm0\n    8724:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8729:\tf3 0f 11 80 c0 00 00 \tmovss  %xmm0,0xc0(%rax)\n    8730:\t00 \n    8731:\teb 42                \tjmp    8775 <Item_Text_AutoWrapped_Paint+0x2d1>\n    8733:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8738:\t8b 80 d8 00 00 00    \tmov    0xd8(%rax),%eax\n    873e:\t83 f8 01             \tcmp    $0x1,%eax\n    8741:\t75 32                \tjne    8775 <Item_Text_AutoWrapped_Paint+0x2d1>\n    8743:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8748:\tf3 0f 10 80 dc 00 00 \tmovss  0xdc(%rax),%xmm0\n    874f:\t00 \n    8750:\t8b 84 24 38 08 00 00 \tmov    0x838(%rsp),%eax\n    8757:\t89 c2                \tmov    %eax,%edx\n    8759:\tc1 ea 1f             \tshr    $0x1f,%edx\n    875c:\t01 d0                \tadd    %edx,%eax\n    875e:\td1 f8                \tsar    %eax\n    8760:\tf3 0f 2a c8          \tcvtsi2ss %eax,%xmm1\n    8764:\tf3 0f 5c c1          \tsubss  %xmm1,%xmm0\n    8768:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    876d:\tf3 0f 11 80 c0 00 00 \tmovss  %xmm0,0xc0(%rax)\n    8774:\t00 \n    8775:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    877a:\tf3 0f 10 84 24 34 08 \tmovss  0x834(%rsp),%xmm0\n    8781:\t00 00 \n    8783:\tf3 0f 11 80 c4 00 00 \tmovss  %xmm0,0xc4(%rax)\n    878a:\t00 \n    878b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    8790:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n    8795:\t48 8d b2 c4 00 00 00 \tlea    0xc4(%rdx),%rsi\n    879c:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n    87a1:\t48 8d 8a c0 00 00 00 \tlea    0xc0(%rdx),%rcx\n    87a8:\t48 89 c2             \tmov    %rax,%rdx\n    87ab:\t48 89 cf             \tmov    %rcx,%rdi\n    87ae:\te8 00 00 00 00       \tcallq  87b3 <Item_Text_AutoWrapped_Paint+0x30f>\n    87b3:\t8b 84 24 3c 08 00 00 \tmov    0x83c(%rsp),%eax\n    87ba:\t48 98                \tcltq   \n    87bc:\tc6 44 04 30 00       \tmovb   $0x0,0x30(%rsp,%rax,1)\n    87c1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 87c8 <Item_Text_AutoWrapped_Paint+0x324>\n    87c8:\t48 8b 00             \tmov    (%rax),%rax\n    87cb:\t4c 8b 40 20          \tmov    0x20(%rax),%r8\n    87cf:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    87d4:\t8b 90 e8 00 00 00    \tmov    0xe8(%rax),%edx\n    87da:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    87df:\tf3 0f 10 88 e4 00 00 \tmovss  0xe4(%rax),%xmm1\n    87e6:\t00 \n    87e7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    87ec:\tf3 0f 10 80 c4 00 00 \tmovss  0xc4(%rax),%xmm0\n    87f3:\t00 \n    87f4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    87f9:\t8b 80 c0 00 00 00    \tmov    0xc0(%rax),%eax\n    87ff:\t48 8d 74 24 30       \tlea    0x30(%rsp),%rsi\n    8804:\t48 8d 7c 24 10       \tlea    0x10(%rsp),%rdi\n    8809:\t89 d1                \tmov    %edx,%ecx\n    880b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    8810:\t66 0f ef db          \tpxor   %xmm3,%xmm3\n    8814:\t0f 28 d1             \tmovaps %xmm1,%xmm2\n    8817:\t0f 28 c8             \tmovaps %xmm0,%xmm1\n    881a:\t66 0f 6e c0          \tmovd   %eax,%xmm0\n    881e:\t41 ff d0             \tcallq  *%r8\n    8821:\t48 8b 84 24 58 08 00 \tmov    0x858(%rsp),%rax\n    8828:\t00 \n    8829:\t0f b6 00             \tmovzbl (%rax),%eax\n    882c:\t84 c0                \ttest   %al,%al\n    882e:\t0f 84 a8 00 00 00    \tje     88dc <Item_Text_AutoWrapped_Paint+0x438>\n    8834:\t8b 44 24 28          \tmov    0x28(%rsp),%eax\n    8838:\t83 c0 05             \tadd    $0x5,%eax\n    883b:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    883f:\tf3 0f 10 8c 24 34 08 \tmovss  0x834(%rsp),%xmm1\n    8846:\t00 00 \n    8848:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n    884c:\tf3 0f 11 84 24 34 08 \tmovss  %xmm0,0x834(%rsp)\n    8853:\t00 00 \n    8855:\t48 8b 84 24 48 08 00 \tmov    0x848(%rsp),%rax\n    885c:\t00 \n    885d:\t48 89 84 24 58 08 00 \tmov    %rax,0x858(%rsp)\n    8864:\t00 \n    8865:\tc7 84 24 44 08 00 00 \tmovl   $0x0,0x844(%rsp)\n    886c:\t00 00 00 00 \n    8870:\tc7 84 24 3c 08 00 00 \tmovl   $0x0,0x83c(%rsp)\n    8877:\t00 00 00 00 \n    887b:\tc7 84 24 38 08 00 00 \tmovl   $0x0,0x838(%rsp)\n    8882:\t00 00 00 00 \n    8886:\teb 3d                \tjmp    88c5 <Item_Text_AutoWrapped_Paint+0x421>\n    8888:\t48 8b 84 24 58 08 00 \tmov    0x858(%rsp),%rax\n    888f:\t00 \n    8890:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    8894:\t48 89 94 24 58 08 00 \tmov    %rdx,0x858(%rsp)\n    889b:\t00 \n    889c:\t8b 94 24 44 08 00 00 \tmov    0x844(%rsp),%edx\n    88a3:\t8d 4a 01             \tlea    0x1(%rdx),%ecx\n    88a6:\t89 8c 24 44 08 00 00 \tmov    %ecx,0x844(%rsp)\n    88ad:\t0f b6 08             \tmovzbl (%rax),%ecx\n    88b0:\t48 63 c2             \tmovslq %edx,%rax\n    88b3:\t88 4c 04 30          \tmov    %cl,0x30(%rsp,%rax,1)\n    88b7:\t8b 84 24 44 08 00 00 \tmov    0x844(%rsp),%eax\n    88be:\t48 98                \tcltq   \n    88c0:\tc6 44 04 30 00       \tmovb   $0x0,0x30(%rsp,%rax,1)\n    88c5:\t48 83 bc 24 58 08 00 \tcmpq   $0x0,0x858(%rsp)\n    88cc:\t00 00 \n    88ce:\t0f 85 0a fd ff ff    \tjne    85de <Item_Text_AutoWrapped_Paint+0x13a>\n    88d4:\teb 07                \tjmp    88dd <Item_Text_AutoWrapped_Paint+0x439>\n    88d6:\t90                   \tnop\n    88d7:\teb 04                \tjmp    88dd <Item_Text_AutoWrapped_Paint+0x439>\n    88d9:\t90                   \tnop\n    88da:\teb 01                \tjmp    88dd <Item_Text_AutoWrapped_Paint+0x439>\n    88dc:\t90                   \tnop\n    88dd:\t48 81 c4 68 08 00 00 \tadd    $0x868,%rsp\n    88e4:\tc3                   \tretq   \n    88e5:\t90                   \tnop", "code_s": "float *__fastcall Item_Text_AutoWrapped_Paint(__int64 <span class=\"supfact\">a1</span>) {\n  float *result;\n  char *v2;\n  int <span class=\"supfact\">v3</span>;\n  _QWORD <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  char <span class=\"supfact\">v7</span>[Number];\n  char <span class=\"supfact\">v8</span>[Number];\n  float <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  float *<span class=\"supfact\">v12</span>;\n  float *<span class=\"supfact\">v13</span>;\n  float *<span class=\"supfact\">v14</span>;\n  LODWORD(<span class=\"supfact\">v11</span>) = Number;\n  <span class=\"supfact\">v12</span> = Number L;\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    <span class=\"supfact\">v13</span> = *(float **)(<span class=\"supfact\">a1</span> + Number);\n  } else {\n    result = *(float **)(<span class=\"supfact\">a1</span> + Number);\n    if (!result)\n      return result;\n    (*(void(__fastcall **)(_QWORD, char *, __int64))(DC + Number L))(\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number), <span class=\"supfact\">v8</span>, Number L);\n    <span class=\"supfact\">v13</span> = (float *)<span class=\"supfact\">v8</span>;\n  }\n  result = (float *)*(unsigned __int8 *)<span class=\"supfact\">v13</span>;\n  if ((_BYTE)result) {\n    Item_TextColor(<span class=\"supfact\">a1</span>, <span class=\"supfact\">v4</span>);\n    Item_SetTextExtents(<span class=\"supfact\">a1</span>, &<span class=\"supfact\">v6</span>,\n                        &<span class=\"supfact\">v5</span>, <span class=\"supfact\">v13</span>);\n    <span class=\"supfact\">v9</span> = *(float *)(<span class=\"supfact\">a1</span> + Number);\n    HIDWORD(<span class=\"supfact\">v11</span>) = Number;\n    <span class=\"supfact\">v7</span>[Number] = Number;\n    <span class=\"supfact\">v10</span> = Number L;\n    result = <span class=\"supfact\">v13</span>;\n    <span class=\"supfact\">v14</span> = <span class=\"supfact\">v13</span>;\n    while (<span class=\"supfact\">v14</span>) {\n      if (*(_BYTE *)<span class=\"supfact\">v14</span> == Number ||\n          *(_BYTE *)<span class=\"supfact\">v14</span> == Number ||\n          *(_BYTE *)<span class=\"supfact\">v14</span> == Number ||\n          !*(_BYTE *)<span class=\"supfact\">v14</span>) {\n        <span class=\"supfact\">v12</span> = (float *)((char *)<span class=\"supfact\">v14</span> + Number);\n        <span class=\"supfact\">v10</span> = <span class=\"supfact\">v11</span>;\n      }\n      LODWORD(<span class=\"supfact\">v11</span>) = (*(\n          __int64(__fastcall **)(char *, _QWORD, double))(DC + Number L))(\n          <span class=\"supfact\">v7</span>, Number L,\n          *(double *)_mm_cvtsi32_si128(*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n               .m128i_i64);\n      if (HIDWORD(<span class=\"supfact\">v10</span>) &&\n              (float)(int)<span class=\"supfact\">v11</span> >\n                  *(float *)(<span class=\"supfact\">a1</span> + Number) ||\n          *(_BYTE *)<span class=\"supfact\">v14</span> == Number ||\n          !*(_BYTE *)<span class=\"supfact\">v14</span>) {\n        if (HIDWORD(<span class=\"supfact\">v11</span>)) {\n          if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n            if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number) {\n              *(float *)(<span class=\"supfact\">a1</span> + Number) =\n                  *(float *)(<span class=\"supfact\">a1</span> + Number) -\n                  (float)(int)<span class=\"supfact\">v10</span>;\n            } else if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number) {\n              *(float *)(<span class=\"supfact\">a1</span> + Number) =\n                  *(float *)(<span class=\"supfact\">a1</span> + Number) -\n                  (float)((int)<span class=\"supfact\">v10</span> / Number);\n            }\n          } else {\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n                *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n          }\n          *(float *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v9</span>;\n          ToWindowCoords((float *)(<span class=\"supfact\">a1</span> + Number),\n                         (float *)(<span class=\"supfact\">a1</span> + Number),\n                         <span class=\"supfact\">a1</span>);\n          <span class=\"supfact\">v7</span>[SHIDWORD(<span class=\"supfact\">v10</span>)] = Number;\n          (*(void(__fastcall **)(_QWORD *, char *, _QWORD, _QWORD, double,\n                                 float, float, double))(DC + Number L))(\n              <span class=\"supfact\">v4</span>, <span class=\"supfact\">v7</span>, Number L,\n              *(unsigned int *)(<span class=\"supfact\">a1</span> + Number),\n              *(double *)_mm_cvtsi32_si128(\n                   *(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n                   .m128i_i64,\n              *(float *)(<span class=\"supfact\">a1</span> + Number),\n              *(float *)(<span class=\"supfact\">a1</span> + Number), Number);\n        }\n        result = (float *)*(unsigned __int8 *)<span class=\"supfact\">v14</span>;\n        if (!(_BYTE)result)\n          return result;\n        <span class=\"supfact\">v9</span> =\n            (float)(<span class=\"supfact\">v5</span> + Number) + <span class=\"supfact\">v9</span>;\n        result = <span class=\"supfact\">v12</span>;\n        <span class=\"supfact\">v14</span> = <span class=\"supfact\">v12</span>;\n        HIDWORD(<span class=\"supfact\">v11</span>) = Number;\n        <span class=\"supfact\">v10</span> = Number L;\n      } else {\n        v2 = (char *)<span class=\"supfact\">v14</span>;\n        <span class=\"supfact\">v14</span> = (float *)((char *)<span class=\"supfact\">v14</span> + Number);\n        <span class=\"supfact\">v3</span> = HIDWORD(<span class=\"supfact\">v11</span>)++;\n        <span class=\"supfact\">v7</span>[<span class=\"supfact\">v3</span>] = *v2;\n        result = (float *)SHIDWORD(<span class=\"supfact\">v11</span>);\n        <span class=\"supfact\">v7</span>[SHIDWORD(<span class=\"supfact\">v11</span>)] = Number;\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl Item_Text_AutoWrapped_Paint(itemDef_t *<span class=\"supfact\">item</span>) {\n  char *v1;\n  int <span class=\"supfact\">v2</span>;\n  vec4_t <span class=\"supfact\">color</span>;\n  int <span class=\"supfact\">height</span>;\n  int <span class=\"supfact\">width</span>;\n  char <span class=\"supfact\">buff</span>[Number];\n  char <span class=\"supfact\">text</span>[Number];\n  float <span class=\"supfact\">y</span>;\n  unsigned __int64 <span class=\"supfact\">newLineWidth</span>;\n  int <span class=\"supfact\">textWidth</span>;\n  int len;\n  const char *<span class=\"supfact\">newLinePtr</span>;\n  const char *<span class=\"supfact\">textPtr</span>;\n  const char *<span class=\"supfact\">p</span>;\n  <span class=\"supfact\">textWidth</span> = Number;\n  <span class=\"supfact\">newLinePtr</span> = Number L;\n  if (<span class=\"supfact\">item</span>-><span class=\"supfact\">text</span>) {\n    <span class=\"supfact\">textPtr</span> = <span class=\"supfact\">item</span>-><span class=\"supfact\">text</span>;\n  } else {\n    if (!<span class=\"supfact\">item</span>->cvar)\n      return;\n    DC->getCVarString(<span class=\"supfact\">item</span>->cvar, <span class=\"supfact\">text</span>, Number);\n    <span class=\"supfact\">textPtr</span> = <span class=\"supfact\">text</span>;\n  }\n  if (*<span class=\"supfact\">textPtr</span>) {\n    Item_TextColor(<span class=\"supfact\">item</span>, (vec4_t *)<span class=\"supfact\">color</span>);\n    Item_SetTextExtents(<span class=\"supfact\">item</span>, &<span class=\"supfact\">width</span>,\n                        &<span class=\"supfact\">height</span>, <span class=\"supfact\">textPtr</span>);\n    <span class=\"supfact\">y</span> = <span class=\"supfact\">item</span>->textaligny;\n    len = Number;\n    <span class=\"supfact\">buff</span>[Number] = Number;\n    <span class=\"supfact\">newLineWidth</span> = Number L;\n    <span class=\"supfact\">p</span> = <span class=\"supfact\">textPtr</span>;\n    while (<span class=\"supfact\">p</span>) {\n      if (*<span class=\"supfact\">p</span> == Number || *<span class=\"supfact\">p</span> == Number ||\n          *<span class=\"supfact\">p</span> == Number || !*<span class=\"supfact\">p</span>) {\n        <span class=\"supfact\">newLinePtr</span> = <span class=\"supfact\">p</span> + Number;\n        <span class=\"supfact\">newLineWidth</span> =\n            __PAIR64__(len, <span class=\"supfact\">textWidth</span>);\n      }\n      <span class=\"supfact\">textWidth</span> = ((__int64(__fastcall *)(\n          char *, _QWORD, double))DC-><span class=\"supfact\">textWidth</span>)(\n          <span class=\"supfact\">buff</span>, Number L,\n          *(double *)_mm_cvtsi32_si128(LODWORD(<span class=\"supfact\">item</span>->textscale))\n               .m128i_i64);\n      if (HIDWORD(<span class=\"supfact\">newLineWidth</span>) &&\n              (float)<span class=\"supfact\">textWidth</span> >\n                  <span class=\"supfact\">item</span>->window.rect.w ||\n          *<span class=\"supfact\">p</span> == Number || !*<span class=\"supfact\">p</span>) {\n        if (len) {\n          if (<span class=\"supfact\">item</span>->textalignment) {\n            if (<span class=\"supfact\">item</span>->textalignment == Number) {\n              <span class=\"supfact\">item</span>->textRect.x =\n                  <span class=\"supfact\">item</span>->textalignx -\n                  (float)(int)<span class=\"supfact\">newLineWidth</span>;\n            } else if (<span class=\"supfact\">item</span>->textalignment == Number) {\n              <span class=\"supfact\">item</span>->textRect.x =\n                  <span class=\"supfact\">item</span>->textalignx -\n                  (float)((int)<span class=\"supfact\">newLineWidth</span> / Number);\n            }\n          } else {\n            <span class=\"supfact\">item</span>->textRect.x = <span class=\"supfact\">item</span>->textalignx;\n          }\n          <span class=\"supfact\">item</span>->textRect.<span class=\"supfact\">y</span> = <span class=\"supfact\">y</span>;\n          ToWindowCoords(&<span class=\"supfact\">item</span>->textRect.x,\n                         &<span class=\"supfact\">item</span>->textRect.<span class=\"supfact\">y</span>,\n                         &<span class=\"supfact\">item</span>->window);\n          <span class=\"supfact\">buff</span>[SHIDWORD(<span class=\"supfact\">newLineWidth</span>)] = Number;\n          ((void(__fastcall *)(vec_t *, char *, _QWORD, _QWORD, double, float,\n                               float, double))DC->drawText)(\n              <span class=\"supfact\">color</span>, <span class=\"supfact\">buff</span>, Number L,\n              (unsigned int)<span class=\"supfact\">item</span>->textStyle,\n              *(double *)_mm_cvtsi32_si128(\n                   LODWORD(<span class=\"supfact\">item</span>->textRect.x))\n                   .m128i_i64,\n              <span class=\"supfact\">item</span>->textRect.<span class=\"supfact\">y</span>,\n              <span class=\"supfact\">item</span>->textscale, Number);\n        }\n        if (!*<span class=\"supfact\">p</span>)\n          return;\n        <span class=\"supfact\">y</span> =\n            (float)(<span class=\"supfact\">height</span> + Number) + <span class=\"supfact\">y</span>;\n        <span class=\"supfact\">p</span> = <span class=\"supfact\">newLinePtr</span>;\n        len = Number;\n        <span class=\"supfact\">newLineWidth</span> = Number L;\n      } else {\n        v1 = (char *)<span class=\"supfact\">p</span>++;\n        <span class=\"supfact\">v2</span> = len++;\n        <span class=\"supfact\">buff</span>[<span class=\"supfact\">v2</span>] = *v1;\n        <span class=\"supfact\">buff</span>[len] = Number;\n      }\n    }\n  }\n}", "var": [{"name": "a1", "type": "itemDef_t *", "pred_name": "item", "ref_name": "item", "ref_type": "itemDef_t *"}, {"name": "v3", "type": "int", "pred_name": "v2", "ref_name": "v2", "ref_type": "int"}, {"name": "v4", "type": "vec_t[4]", "pred_name": "color", "ref_name": "color", "ref_type": "vec_t[4]"}, {"name": "v5", "type": "int", "pred_name": "__unk__", "ref_name": "height", "ref_type": "int"}, {"name": "v6", "type": "int", "pred_name": "__unk__", "ref_name": "width", "ref_type": "int"}, {"name": "v7", "type": "char[1024]", "pred_name": "buff", "ref_name": "buff", "ref_type": "char[1024]"}, {"name": "v8", "type": "char[1024]", "pred_name": "buff", "ref_name": "text", "ref_type": "char[1024]"}, {"name": "v9", "type": "int", "pred_name": "__unk__", "ref_name": "y", "ref_type": "float"}, {"name": "v10", "type": "const char *", "pred_name": "text", "ref_name": "newLineWidth", "ref_type": "unsigned __int64"}, {"name": "v11", "type": "const char *", "pred_name": "textPtr", "ref_name": "textWidth", "ref_type": "int"}, {"name": "v12", "type": "const char *", "pred_name": "textPtr", "ref_name": "newLinePtr", "ref_type": "const char *"}, {"name": "v13", "type": "const char *", "pred_name": "p", "ref_name": "textPtr", "ref_type": "const char *"}, {"name": "v14", "type": "const char *", "pred_name": "__unk__", "ref_name": "p", "ref_type": "const char *"}], "body_in_train": false}, {"repo_owner": "ovsoft", "repo_name": "ffmpeg", "path": "ovsoft/ffmpeg/0f0a53ee485a7293b318f361358ec01ca7b3c441e2f5d5561df4d68f4c5d8034", "path_in_repo": "ovsoft/ffmpeg/libavcodec/mjpegdec.o", "objdump": "000000000000116d <ff_mjpeg_decode_sof>:\n    116d:\t48 83 ec 48          \tsub    $0x48,%rsp\n    1171:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    1176:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    117b:\tc7 80 88 1d 00 00 00 \tmovl   $0x0,0x1d88(%rax)\n    1182:\t00 00 00 \n    1185:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    118a:\t48 83 c0 10          \tadd    $0x10,%rax\n    118e:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    1193:\t48 89 c7             \tmov    %rax,%rdi\n    1196:\te8 c4 f2 ff ff       \tcallq  45f <get_bits>\n    119b:\t89 44 24 30          \tmov    %eax,0x30(%rsp)\n    119f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    11a4:\t48 83 c0 10          \tadd    $0x10,%rax\n    11a8:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    11ad:\t48 89 c7             \tmov    %rax,%rdi\n    11b0:\te8 aa f2 ff ff       \tcallq  45f <get_bits>\n    11b5:\t89 c2                \tmov    %eax,%edx\n    11b7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    11bc:\t89 90 90 03 00 00    \tmov    %edx,0x390(%rax)\n    11c2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    11c7:\t8b 80 8c 03 00 00    \tmov    0x38c(%rax),%eax\n    11cd:\t85 c0                \ttest   %eax,%eax\n    11cf:\t74 0f                \tje     11e0 <ff_mjpeg_decode_sof+0x73>\n    11d1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    11d6:\tc7 80 90 03 00 00 09 \tmovl   $0x9,0x390(%rax)\n    11dd:\t00 00 00 \n    11e0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    11e5:\t8b 80 90 03 00 00    \tmov    0x390(%rax),%eax\n    11eb:\t83 f8 09             \tcmp    $0x9,%eax\n    11ee:\t75 1e                \tjne    120e <ff_mjpeg_decode_sof+0xa1>\n    11f0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    11f5:\t8b 80 8c 03 00 00    \tmov    0x38c(%rax),%eax\n    11fb:\t85 c0                \ttest   %eax,%eax\n    11fd:\t75 0f                \tjne    120e <ff_mjpeg_decode_sof+0xa1>\n    11ff:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1204:\tc7 80 88 03 00 00 01 \tmovl   $0x1,0x388(%rax)\n    120b:\t00 00 00 \n    120e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1213:\t8b 80 90 03 00 00    \tmov    0x390(%rax),%eax\n    1219:\t83 f8 08             \tcmp    $0x8,%eax\n    121c:\t74 39                \tje     1257 <ff_mjpeg_decode_sof+0xea>\n    121e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1223:\t8b 80 78 03 00 00    \tmov    0x378(%rax),%eax\n    1229:\t85 c0                \ttest   %eax,%eax\n    122b:\t75 2a                \tjne    1257 <ff_mjpeg_decode_sof+0xea>\n    122d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1232:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1236:\tba 00 00 00 00       \tmov    $0x0,%edx\n    123b:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    1240:\t48 89 c7             \tmov    %rax,%rdi\n    1243:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1248:\te8 00 00 00 00       \tcallq  124d <ff_mjpeg_decode_sof+0xe0>\n    124d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1252:\te9 dd 0c 00 00       \tjmpq   1f34 <ff_mjpeg_decode_sof+0xdc7>\n    1257:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    125c:\t48 83 c0 10          \tadd    $0x10,%rax\n    1260:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    1265:\t48 89 c7             \tmov    %rax,%rdi\n    1268:\te8 f2 f1 ff ff       \tcallq  45f <get_bits>\n    126d:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n    1271:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1276:\t48 83 c0 10          \tadd    $0x10,%rax\n    127a:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    127f:\t48 89 c7             \tmov    %rax,%rdi\n    1282:\te8 d8 f1 ff ff       \tcallq  45f <get_bits>\n    1287:\t89 44 24 2c          \tmov    %eax,0x2c(%rsp)\n    128b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1290:\t8b 80 70 03 00 00    \tmov    0x370(%rax),%eax\n    1296:\t85 c0                \ttest   %eax,%eax\n    1298:\t74 36                \tje     12d0 <ff_mjpeg_decode_sof+0x163>\n    129a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    129f:\t8b 80 ac 03 00 00    \tmov    0x3ac(%rax),%eax\n    12a5:\t39 44 24 2c          \tcmp    %eax,0x2c(%rsp)\n    12a9:\t75 25                \tjne    12d0 <ff_mjpeg_decode_sof+0x163>\n    12ab:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    12b0:\t8b 80 b0 03 00 00    \tmov    0x3b0(%rax),%eax\n    12b6:\t8b 54 24 38          \tmov    0x38(%rsp),%edx\n    12ba:\t83 c2 01             \tadd    $0x1,%edx\n    12bd:\t39 d0                \tcmp    %edx,%eax\n    12bf:\t75 0f                \tjne    12d0 <ff_mjpeg_decode_sof+0x163>\n    12c1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    12c6:\t8b 80 b0 03 00 00    \tmov    0x3b0(%rax),%eax\n    12cc:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n    12d0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    12d5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    12d9:\t8b 4c 24 38          \tmov    0x38(%rsp),%ecx\n    12dd:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n    12e1:\t41 89 c8             \tmov    %ecx,%r8d\n    12e4:\t89 d1                \tmov    %edx,%ecx\n    12e6:\tba 00 00 00 00       \tmov    $0x0,%edx\n    12eb:\tbe 30 00 00 00       \tmov    $0x30,%esi\n    12f0:\t48 89 c7             \tmov    %rax,%rdi\n    12f3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12f8:\te8 00 00 00 00       \tcallq  12fd <ff_mjpeg_decode_sof+0x190>\n    12fd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1302:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    1306:\t8b 74 24 38          \tmov    0x38(%rsp),%esi\n    130a:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n    130e:\t48 89 d1             \tmov    %rdx,%rcx\n    1311:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1316:\t89 c7                \tmov    %eax,%edi\n    1318:\te8 00 00 00 00       \tcallq  131d <ff_mjpeg_decode_sof+0x1b0>\n    131d:\t85 c0                \ttest   %eax,%eax\n    131f:\t74 0a                \tje     132b <ff_mjpeg_decode_sof+0x1be>\n    1321:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1326:\te9 09 0c 00 00       \tjmpq   1f34 <ff_mjpeg_decode_sof+0xdc7>\n    132b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1330:\t48 83 c0 10          \tadd    $0x10,%rax\n    1334:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    1339:\t48 89 c7             \tmov    %rax,%rdi\n    133c:\te8 1e f1 ff ff       \tcallq  45f <get_bits>\n    1341:\t89 44 24 28          \tmov    %eax,0x28(%rsp)\n    1345:\t83 7c 24 28 00       \tcmpl   $0x0,0x28(%rsp)\n    134a:\t7e 07                \tjle    1353 <ff_mjpeg_decode_sof+0x1e6>\n    134c:\t83 7c 24 28 04       \tcmpl   $0x4,0x28(%rsp)\n    1351:\t7e 0a                \tjle    135d <ff_mjpeg_decode_sof+0x1f0>\n    1353:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1358:\te9 d7 0b 00 00       \tjmpq   1f34 <ff_mjpeg_decode_sof+0xdc7>\n    135d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1362:\t8b 80 7c 03 00 00    \tmov    0x37c(%rax),%eax\n    1368:\t85 c0                \ttest   %eax,%eax\n    136a:\t74 41                \tje     13ad <ff_mjpeg_decode_sof+0x240>\n    136c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1371:\t8b 80 90 03 00 00    \tmov    0x390(%rax),%eax\n    1377:\t83 f8 08             \tcmp    $0x8,%eax\n    137a:\t7e 31                \tjle    13ad <ff_mjpeg_decode_sof+0x240>\n    137c:\t83 7c 24 28 01       \tcmpl   $0x1,0x28(%rsp)\n    1381:\t74 2a                \tje     13ad <ff_mjpeg_decode_sof+0x240>\n    1383:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1388:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    138c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1391:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    1396:\t48 89 c7             \tmov    %rax,%rdi\n    1399:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    139e:\te8 00 00 00 00       \tcallq  13a3 <ff_mjpeg_decode_sof+0x236>\n    13a3:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    13a8:\te9 87 0b 00 00       \tjmpq   1f34 <ff_mjpeg_decode_sof+0xdc7>\n    13ad:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    13b2:\t8b 54 24 28          \tmov    0x28(%rsp),%edx\n    13b6:\t89 90 bc 03 00 00    \tmov    %edx,0x3bc(%rax)\n    13bc:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    13c1:\tc7 80 60 04 00 00 01 \tmovl   $0x1,0x460(%rax)\n    13c8:\t00 00 00 \n    13cb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    13d0:\tc7 80 64 04 00 00 01 \tmovl   $0x1,0x464(%rax)\n    13d7:\t00 00 00 \n    13da:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n    13e1:\t00 \n    13e2:\te9 ff 01 00 00       \tjmpq   15e6 <ff_mjpeg_decode_sof+0x479>\n    13e7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    13ec:\t48 83 c0 10          \tadd    $0x10,%rax\n    13f0:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    13f5:\t48 89 c7             \tmov    %rax,%rdi\n    13f8:\te8 62 f0 ff ff       \tcallq  45f <get_bits>\n    13fd:\t83 e8 01             \tsub    $0x1,%eax\n    1400:\t89 c1                \tmov    %eax,%ecx\n    1402:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1407:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    140b:\t48 63 d2             \tmovslq %edx,%rdx\n    140e:\t48 81 c2 f4 00 00 00 \tadd    $0xf4,%rdx\n    1415:\t89 0c 90             \tmov    %ecx,(%rax,%rdx,4)\n    1418:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    141d:\t48 83 c0 10          \tadd    $0x10,%rax\n    1421:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    1426:\t48 89 c7             \tmov    %rax,%rdi\n    1429:\te8 31 f0 ff ff       \tcallq  45f <get_bits>\n    142e:\t89 c1                \tmov    %eax,%ecx\n    1430:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1435:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    1439:\t48 63 d2             \tmovslq %edx,%rdx\n    143c:\t48 81 c2 f8 00 00 00 \tadd    $0xf8,%rdx\n    1443:\t89 0c 90             \tmov    %ecx,(%rax,%rdx,4)\n    1446:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    144b:\t48 83 c0 10          \tadd    $0x10,%rax\n    144f:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    1454:\t48 89 c7             \tmov    %rax,%rdi\n    1457:\te8 03 f0 ff ff       \tcallq  45f <get_bits>\n    145c:\t89 c1                \tmov    %eax,%ecx\n    145e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1463:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    1467:\t48 63 d2             \tmovslq %edx,%rdx\n    146a:\t48 81 c2 fc 00 00 00 \tadd    $0xfc,%rdx\n    1471:\t89 0c 90             \tmov    %ecx,(%rax,%rdx,4)\n    1474:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1479:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    147d:\t48 63 d2             \tmovslq %edx,%rdx\n    1480:\t48 81 c2 f8 00 00 00 \tadd    $0xf8,%rdx\n    1487:\t8b 14 90             \tmov    (%rax,%rdx,4),%edx\n    148a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    148f:\t8b 80 60 04 00 00    \tmov    0x460(%rax),%eax\n    1495:\t39 c2                \tcmp    %eax,%edx\n    1497:\t7e 21                \tjle    14ba <ff_mjpeg_decode_sof+0x34d>\n    1499:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    149e:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    14a2:\t48 63 d2             \tmovslq %edx,%rdx\n    14a5:\t48 81 c2 f8 00 00 00 \tadd    $0xf8,%rdx\n    14ac:\t8b 14 90             \tmov    (%rax,%rdx,4),%edx\n    14af:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    14b4:\t89 90 60 04 00 00    \tmov    %edx,0x460(%rax)\n    14ba:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    14bf:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    14c3:\t48 63 d2             \tmovslq %edx,%rdx\n    14c6:\t48 81 c2 fc 00 00 00 \tadd    $0xfc,%rdx\n    14cd:\t8b 14 90             \tmov    (%rax,%rdx,4),%edx\n    14d0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    14d5:\t8b 80 64 04 00 00    \tmov    0x464(%rax),%eax\n    14db:\t39 c2                \tcmp    %eax,%edx\n    14dd:\t7e 21                \tjle    1500 <ff_mjpeg_decode_sof+0x393>\n    14df:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    14e4:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    14e8:\t48 63 d2             \tmovslq %edx,%rdx\n    14eb:\t48 81 c2 fc 00 00 00 \tadd    $0xfc,%rdx\n    14f2:\t8b 14 90             \tmov    (%rax,%rdx,4),%edx\n    14f5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    14fa:\t89 90 64 04 00 00    \tmov    %edx,0x464(%rax)\n    1500:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1505:\t48 83 c0 10          \tadd    $0x10,%rax\n    1509:\tbe 08 00 00 00       \tmov    $0x8,%esi\n    150e:\t48 89 c7             \tmov    %rax,%rdi\n    1511:\te8 49 ef ff ff       \tcallq  45f <get_bits>\n    1516:\t89 c1                \tmov    %eax,%ecx\n    1518:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    151d:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    1521:\t48 63 d2             \tmovslq %edx,%rdx\n    1524:\t48 81 c2 18 01 00 00 \tadd    $0x118,%rdx\n    152b:\t89 4c 90 08          \tmov    %ecx,0x8(%rax,%rdx,4)\n    152f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1534:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    1538:\t48 63 d2             \tmovslq %edx,%rdx\n    153b:\t48 81 c2 18 01 00 00 \tadd    $0x118,%rdx\n    1542:\t8b 44 90 08          \tmov    0x8(%rax,%rdx,4),%eax\n    1546:\t83 f8 03             \tcmp    $0x3,%eax\n    1549:\t7e 0a                \tjle    1555 <ff_mjpeg_decode_sof+0x3e8>\n    154b:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1550:\te9 df 09 00 00       \tjmpq   1f34 <ff_mjpeg_decode_sof+0xdc7>\n    1555:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    155a:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    155e:\t48 63 d2             \tmovslq %edx,%rdx\n    1561:\t48 81 c2 18 01 00 00 \tadd    $0x118,%rdx\n    1568:\t8b 74 90 08          \tmov    0x8(%rax,%rdx,4),%esi\n    156c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1571:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    1575:\t48 63 d2             \tmovslq %edx,%rdx\n    1578:\t48 81 c2 f4 00 00 00 \tadd    $0xf4,%rdx\n    157f:\t8b 0c 90             \tmov    (%rax,%rdx,4),%ecx\n    1582:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1587:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    158b:\t48 63 d2             \tmovslq %edx,%rdx\n    158e:\t48 81 c2 fc 00 00 00 \tadd    $0xfc,%rdx\n    1595:\t44 8b 04 90          \tmov    (%rax,%rdx,4),%r8d\n    1599:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    159e:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    15a2:\t48 63 d2             \tmovslq %edx,%rdx\n    15a5:\t48 81 c2 f8 00 00 00 \tadd    $0xf8,%rdx\n    15ac:\t8b 3c 90             \tmov    (%rax,%rdx,4),%edi\n    15af:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    15b4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    15b8:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    15bc:\t56                   \tpush   %rsi\n    15bd:\t51                   \tpush   %rcx\n    15be:\t45 89 c1             \tmov    %r8d,%r9d\n    15c1:\t41 89 f8             \tmov    %edi,%r8d\n    15c4:\t89 d1                \tmov    %edx,%ecx\n    15c6:\tba 00 00 00 00       \tmov    $0x0,%edx\n    15cb:\tbe 30 00 00 00       \tmov    $0x30,%esi\n    15d0:\t48 89 c7             \tmov    %rax,%rdi\n    15d3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    15d8:\te8 00 00 00 00       \tcallq  15dd <ff_mjpeg_decode_sof+0x470>\n    15dd:\t48 83 c4 10          \tadd    $0x10,%rsp\n    15e1:\t83 44 24 3c 01       \taddl   $0x1,0x3c(%rsp)\n    15e6:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n    15ea:\t3b 44 24 28          \tcmp    0x28(%rsp),%eax\n    15ee:\t0f 8c f3 fd ff ff    \tjl     13e7 <ff_mjpeg_decode_sof+0x27a>\n    15f4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    15f9:\t8b 80 7c 03 00 00    \tmov    0x37c(%rax),%eax\n    15ff:\t85 c0                \ttest   %eax,%eax\n    1601:\t74 4a                \tje     164d <ff_mjpeg_decode_sof+0x4e0>\n    1603:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1608:\t8b 80 60 04 00 00    \tmov    0x460(%rax),%eax\n    160e:\t83 f8 01             \tcmp    $0x1,%eax\n    1611:\t7f 10                \tjg     1623 <ff_mjpeg_decode_sof+0x4b6>\n    1613:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1618:\t8b 80 64 04 00 00    \tmov    0x464(%rax),%eax\n    161e:\t83 f8 01             \tcmp    $0x1,%eax\n    1621:\t7e 2a                \tjle    164d <ff_mjpeg_decode_sof+0x4e0>\n    1623:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1628:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    162c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1631:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    1636:\t48 89 c7             \tmov    %rax,%rdi\n    1639:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    163e:\te8 00 00 00 00       \tcallq  1643 <ff_mjpeg_decode_sof+0x4d6>\n    1643:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1648:\te9 e7 08 00 00       \tjmpq   1f34 <ff_mjpeg_decode_sof+0xdc7>\n    164d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1652:\t8b 80 64 04 00 00    \tmov    0x464(%rax),%eax\n    1658:\t83 f8 01             \tcmp    $0x1,%eax\n    165b:\t75 2f                \tjne    168c <ff_mjpeg_decode_sof+0x51f>\n    165d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1662:\t8b 80 60 04 00 00    \tmov    0x460(%rax),%eax\n    1668:\t83 f8 01             \tcmp    $0x1,%eax\n    166b:\t75 1f                \tjne    168c <ff_mjpeg_decode_sof+0x51f>\n    166d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1672:\t8b 80 78 03 00 00    \tmov    0x378(%rax),%eax\n    1678:\t83 f8 01             \tcmp    $0x1,%eax\n    167b:\t75 0f                \tjne    168c <ff_mjpeg_decode_sof+0x51f>\n    167d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1682:\tc7 80 84 03 00 00 01 \tmovl   $0x1,0x384(%rax)\n    1689:\t00 00 00 \n    168c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1691:\t8b 80 ac 03 00 00    \tmov    0x3ac(%rax),%eax\n    1697:\t39 44 24 2c          \tcmp    %eax,0x2c(%rsp)\n    169b:\t75 15                \tjne    16b2 <ff_mjpeg_decode_sof+0x545>\n    169d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    16a2:\t8b 80 b0 03 00 00    \tmov    0x3b0(%rax),%eax\n    16a8:\t39 44 24 38          \tcmp    %eax,0x38(%rsp)\n    16ac:\t0f 84 51 01 00 00    \tje     1803 <ff_mjpeg_decode_sof+0x696>\n    16b2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    16b7:\t48 05 18 06 00 00    \tadd    $0x618,%rax\n    16bd:\t48 89 c7             \tmov    %rax,%rdi\n    16c0:\te8 00 00 00 00       \tcallq  16c5 <ff_mjpeg_decode_sof+0x558>\n    16c5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    16ca:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n    16ce:\t89 90 ac 03 00 00    \tmov    %edx,0x3ac(%rax)\n    16d4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    16d9:\t8b 54 24 38          \tmov    0x38(%rsp),%edx\n    16dd:\t89 90 b0 03 00 00    \tmov    %edx,0x3b0(%rax)\n    16e3:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    16e8:\tc7 80 70 03 00 00 00 \tmovl   $0x0,0x370(%rax)\n    16ef:\t00 00 00 \n    16f2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    16f7:\t8b 80 6c 03 00 00    \tmov    0x36c(%rax),%eax\n    16fd:\t85 c0                \ttest   %eax,%eax\n    16ff:\t0f 84 a2 00 00 00    \tje     17a7 <ff_mjpeg_decode_sof+0x63a>\n    1705:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    170a:\t8b 80 68 03 00 00    \tmov    0x368(%rax),%eax\n    1710:\t85 c0                \ttest   %eax,%eax\n    1712:\t0f 84 8f 00 00 00    \tje     17a7 <ff_mjpeg_decode_sof+0x63a>\n    1718:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    171d:\t8b 88 b0 03 00 00    \tmov    0x3b0(%rax),%ecx\n    1723:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1728:\t8b 90 68 03 00 00    \tmov    0x368(%rax),%edx\n    172e:\t89 d0                \tmov    %edx,%eax\n    1730:\t01 c0                \tadd    %eax,%eax\n    1732:\t01 d0                \tadd    %edx,%eax\n    1734:\t8d 50 03             \tlea    0x3(%rax),%edx\n    1737:\t85 c0                \ttest   %eax,%eax\n    1739:\t0f 48 c2             \tcmovs  %edx,%eax\n    173c:\tc1 f8 02             \tsar    $0x2,%eax\n    173f:\t39 c1                \tcmp    %eax,%ecx\n    1741:\t7d 64                \tjge    17a7 <ff_mjpeg_decode_sof+0x63a>\n    1743:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1748:\tc7 80 70 03 00 00 01 \tmovl   $0x1,0x370(%rax)\n    174f:\t00 00 00 \n    1752:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1757:\t8b 90 80 1d 00 00    \tmov    0x1d80(%rax),%edx\n    175d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1762:\t89 90 74 03 00 00    \tmov    %edx,0x374(%rax)\n    1768:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    176d:\t48 8b 80 f8 05 00 00 \tmov    0x5f8(%rax),%rax\n    1774:\tc7 80 e4 00 00 00 01 \tmovl   $0x1,0xe4(%rax)\n    177b:\t00 00 00 \n    177e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1783:\t8b 80 80 1d 00 00    \tmov    0x1d80(%rax),%eax\n    1789:\t85 c0                \ttest   %eax,%eax\n    178b:\t0f 94 c2             \tsete   %dl\n    178e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1793:\t48 8b 80 f8 05 00 00 \tmov    0x5f8(%rax),%rax\n    179a:\t0f b6 d2             \tmovzbl %dl,%edx\n    179d:\t89 90 e8 00 00 00    \tmov    %edx,0xe8(%rax)\n    17a3:\td1 64 24 38          \tshll   0x38(%rsp)\n    17a7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    17ac:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    17b0:\t8b 54 24 38          \tmov    0x38(%rsp),%edx\n    17b4:\t8b 4c 24 2c          \tmov    0x2c(%rsp),%ecx\n    17b8:\t89 ce                \tmov    %ecx,%esi\n    17ba:\t48 89 c7             \tmov    %rax,%rdi\n    17bd:\te8 00 00 00 00       \tcallq  17c2 <ff_mjpeg_decode_sof+0x655>\n    17c2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    17c7:\t8b 80 ac 03 00 00    \tmov    0x3ac(%rax),%eax\n    17cd:\t83 c0 0f             \tadd    $0xf,%eax\n    17d0:\t8d 50 0f             \tlea    0xf(%rax),%edx\n    17d3:\t85 c0                \ttest   %eax,%eax\n    17d5:\t0f 48 c2             \tcmovs  %edx,%eax\n    17d8:\tc1 f8 04             \tsar    $0x4,%eax\n    17db:\t48 98                \tcltq   \n    17dd:\t48 89 c7             \tmov    %rax,%rdi\n    17e0:\te8 00 00 00 00       \tcallq  17e5 <ff_mjpeg_decode_sof+0x678>\n    17e5:\t48 89 c2             \tmov    %rax,%rdx\n    17e8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    17ed:\t48 89 90 18 06 00 00 \tmov    %rdx,0x618(%rax)\n    17f4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    17f9:\tc7 80 6c 03 00 00 00 \tmovl   $0x0,0x36c(%rax)\n    1800:\t00 00 00 \n    1803:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1808:\t8b 80 70 03 00 00    \tmov    0x370(%rax),%eax\n    180e:\t85 c0                \ttest   %eax,%eax\n    1810:\t74 2c                \tje     183e <ff_mjpeg_decode_sof+0x6d1>\n    1812:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1817:\t8b 90 74 03 00 00    \tmov    0x374(%rax),%edx\n    181d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1822:\t8b 80 80 1d 00 00    \tmov    0x1d80(%rax),%eax\n    1828:\t85 c0                \ttest   %eax,%eax\n    182a:\t0f 94 c0             \tsete   %al\n    182d:\t0f b6 c0             \tmovzbl %al,%eax\n    1830:\t39 c2                \tcmp    %eax,%edx\n    1832:\t75 0a                \tjne    183e <ff_mjpeg_decode_sof+0x6d1>\n    1834:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1839:\te9 f6 06 00 00       \tjmpq   1f34 <ff_mjpeg_decode_sof+0xdc7>\n    183e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1843:\t8b 80 e0 03 00 00    \tmov    0x3e0(%rax),%eax\n    1849:\tc1 e0 1c             \tshl    $0x1c,%eax\n    184c:\t89 c2                \tmov    %eax,%edx\n    184e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1853:\t8b 80 f0 03 00 00    \tmov    0x3f0(%rax),%eax\n    1859:\tc1 e0 18             \tshl    $0x18,%eax\n    185c:\t09 c2                \tor     %eax,%edx\n    185e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1863:\t8b 80 e4 03 00 00    \tmov    0x3e4(%rax),%eax\n    1869:\tc1 e0 14             \tshl    $0x14,%eax\n    186c:\t09 c2                \tor     %eax,%edx\n    186e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1873:\t8b 80 f4 03 00 00    \tmov    0x3f4(%rax),%eax\n    1879:\tc1 e0 10             \tshl    $0x10,%eax\n    187c:\t09 c2                \tor     %eax,%edx\n    187e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1883:\t8b 80 e8 03 00 00    \tmov    0x3e8(%rax),%eax\n    1889:\tc1 e0 0c             \tshl    $0xc,%eax\n    188c:\t09 c2                \tor     %eax,%edx\n    188e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1893:\t8b 80 f8 03 00 00    \tmov    0x3f8(%rax),%eax\n    1899:\tc1 e0 08             \tshl    $0x8,%eax\n    189c:\t09 c2                \tor     %eax,%edx\n    189e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    18a3:\t8b 80 ec 03 00 00    \tmov    0x3ec(%rax),%eax\n    18a9:\tc1 e0 04             \tshl    $0x4,%eax\n    18ac:\t09 c2                \tor     %eax,%edx\n    18ae:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    18b3:\t8b 80 fc 03 00 00    \tmov    0x3fc(%rax),%eax\n    18b9:\t09 d0                \tor     %edx,%eax\n    18bb:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n    18bf:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    18c4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    18c8:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n    18cc:\t89 d1                \tmov    %edx,%ecx\n    18ce:\tba 00 00 00 00       \tmov    $0x0,%edx\n    18d3:\tbe 30 00 00 00       \tmov    $0x30,%esi\n    18d8:\t48 89 c7             \tmov    %rax,%rdi\n    18db:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    18e0:\te8 00 00 00 00       \tcallq  18e5 <ff_mjpeg_decode_sof+0x778>\n    18e5:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    18e9:\t25 d0 d0 d0 d0       \tand    $0xd0d0d0d0,%eax\n    18ee:\t85 c0                \ttest   %eax,%eax\n    18f0:\t75 16                \tjne    1908 <ff_mjpeg_decode_sof+0x79b>\n    18f2:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    18f6:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n    18fa:\td1 ea                \tshr    %edx\n    18fc:\t81 e2 78 78 78 78    \tand    $0x78787878,%edx\n    1902:\t29 d0                \tsub    %edx,%eax\n    1904:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n    1908:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    190c:\t25 0d 0d 0d 0d       \tand    $0xd0d0d0d,%eax\n    1911:\t85 c0                \ttest   %eax,%eax\n    1913:\t75 0f                \tjne    1924 <ff_mjpeg_decode_sof+0x7b7>\n    1915:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    1919:\td1 f8                \tsar    %eax\n    191b:\t25 87 87 87 07       \tand    $0x7878787,%eax\n    1920:\t29 44 24 34          \tsub    %eax,0x34(%rsp)\n    1924:\t81 7c 24 34 00 11 11 \tcmpl   $0x22111100,0x34(%rsp)\n    192b:\t22 \n    192c:\t0f 84 e2 01 00 00    \tje     1b14 <ff_mjpeg_decode_sof+0x9a7>\n    1932:\t81 7c 24 34 00 11 11 \tcmpl   $0x22111100,0x34(%rsp)\n    1939:\t22 \n    193a:\t0f 8f 27 02 00 00    \tjg     1b67 <ff_mjpeg_decode_sof+0x9fa>\n    1940:\t81 7c 24 34 00 11 11 \tcmpl   $0x21111100,0x34(%rsp)\n    1947:\t21 \n    1948:\t0f 84 70 01 00 00    \tje     1abe <ff_mjpeg_decode_sof+0x951>\n    194e:\t81 7c 24 34 00 11 11 \tcmpl   $0x21111100,0x34(%rsp)\n    1955:\t21 \n    1956:\t0f 8f 0b 02 00 00    \tjg     1b67 <ff_mjpeg_decode_sof+0x9fa>\n    195c:\t81 7c 24 34 00 11 11 \tcmpl   $0x12111100,0x34(%rsp)\n    1963:\t12 \n    1964:\t0f 84 fe 00 00 00    \tje     1a68 <ff_mjpeg_decode_sof+0x8fb>\n    196a:\t81 7c 24 34 00 11 11 \tcmpl   $0x12111100,0x34(%rsp)\n    1971:\t12 \n    1972:\t0f 8f ef 01 00 00    \tjg     1b67 <ff_mjpeg_decode_sof+0x9fa>\n    1978:\t81 7c 24 34 00 00 00 \tcmpl   $0x11000000,0x34(%rsp)\n    197f:\t11 \n    1980:\t0f 84 cd 00 00 00    \tje     1a53 <ff_mjpeg_decode_sof+0x8e6>\n    1986:\t81 7c 24 34 00 11 11 \tcmpl   $0x11111100,0x34(%rsp)\n    198d:\t11 \n    198e:\t0f 85 d3 01 00 00    \tjne    1b67 <ff_mjpeg_decode_sof+0x9fa>\n    1994:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1999:\t8b 80 84 03 00 00    \tmov    0x384(%rax),%eax\n    199f:\t85 c0                \ttest   %eax,%eax\n    19a1:\t74 15                \tje     19b8 <ff_mjpeg_decode_sof+0x84b>\n    19a3:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    19a8:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    19ac:\tc7 40 40 1e 00 00 00 \tmovl   $0x1e,0x40(%rax)\n    19b3:\te9 df 01 00 00       \tjmpq   1b97 <ff_mjpeg_decode_sof+0xa2a>\n    19b8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    19bd:\t8b 80 d0 03 00 00    \tmov    0x3d0(%rax),%eax\n    19c3:\t83 f8 51             \tcmp    $0x51,%eax\n    19c6:\t75 35                \tjne    19fd <ff_mjpeg_decode_sof+0x890>\n    19c8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    19cd:\t8b 80 d4 03 00 00    \tmov    0x3d4(%rax),%eax\n    19d3:\t83 f8 46             \tcmp    $0x46,%eax\n    19d6:\t75 25                \tjne    19fd <ff_mjpeg_decode_sof+0x890>\n    19d8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    19dd:\t8b 80 d8 03 00 00    \tmov    0x3d8(%rax),%eax\n    19e3:\t83 f8 41             \tcmp    $0x41,%eax\n    19e6:\t75 15                \tjne    19fd <ff_mjpeg_decode_sof+0x890>\n    19e8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    19ed:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    19f1:\tc7 40 40 52 00 00 00 \tmovl   $0x52,0x40(%rax)\n    19f8:\te9 9a 01 00 00       \tjmpq   1b97 <ff_mjpeg_decode_sof+0xa2a>\n    19fd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a02:\t8b 80 7c 1d 00 00    \tmov    0x1d7c(%rax),%eax\n    1a08:\t85 c0                \ttest   %eax,%eax\n    1a0a:\t74 07                \tje     1a13 <ff_mjpeg_decode_sof+0x8a6>\n    1a0c:\tba 05 00 00 00       \tmov    $0x5,%edx\n    1a11:\teb 05                \tjmp    1a18 <ff_mjpeg_decode_sof+0x8ab>\n    1a13:\tba 0e 00 00 00       \tmov    $0xe,%edx\n    1a18:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a1d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a21:\t89 50 40             \tmov    %edx,0x40(%rax)\n    1a24:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a29:\t8b 80 7c 1d 00 00    \tmov    0x1d7c(%rax),%eax\n    1a2f:\t85 c0                \ttest   %eax,%eax\n    1a31:\t74 07                \tje     1a3a <ff_mjpeg_decode_sof+0x8cd>\n    1a33:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1a38:\teb 05                \tjmp    1a3f <ff_mjpeg_decode_sof+0x8d2>\n    1a3a:\tba 02 00 00 00       \tmov    $0x2,%edx\n    1a3f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a44:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a48:\t89 90 fc 03 00 00    \tmov    %edx,0x3fc(%rax)\n    1a4e:\te9 44 01 00 00       \tjmpq   1b97 <ff_mjpeg_decode_sof+0xa2a>\n    1a53:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a58:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a5c:\tc7 40 40 08 00 00 00 \tmovl   $0x8,0x40(%rax)\n    1a63:\te9 2f 01 00 00       \tjmpq   1b97 <ff_mjpeg_decode_sof+0xa2a>\n    1a68:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a6d:\t8b 80 7c 1d 00 00    \tmov    0x1d7c(%rax),%eax\n    1a73:\t85 c0                \ttest   %eax,%eax\n    1a75:\t74 07                \tje     1a7e <ff_mjpeg_decode_sof+0x911>\n    1a77:\tba 21 00 00 00       \tmov    $0x21,%edx\n    1a7c:\teb 05                \tjmp    1a83 <ff_mjpeg_decode_sof+0x916>\n    1a7e:\tba 22 00 00 00       \tmov    $0x22,%edx\n    1a83:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a88:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a8c:\t89 50 40             \tmov    %edx,0x40(%rax)\n    1a8f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a94:\t8b 80 7c 1d 00 00    \tmov    0x1d7c(%rax),%eax\n    1a9a:\t85 c0                \ttest   %eax,%eax\n    1a9c:\t74 07                \tje     1aa5 <ff_mjpeg_decode_sof+0x938>\n    1a9e:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1aa3:\teb 05                \tjmp    1aaa <ff_mjpeg_decode_sof+0x93d>\n    1aa5:\tba 02 00 00 00       \tmov    $0x2,%edx\n    1aaa:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1aaf:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1ab3:\t89 90 fc 03 00 00    \tmov    %edx,0x3fc(%rax)\n    1ab9:\te9 d9 00 00 00       \tjmpq   1b97 <ff_mjpeg_decode_sof+0xa2a>\n    1abe:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1ac3:\t8b 80 7c 1d 00 00    \tmov    0x1d7c(%rax),%eax\n    1ac9:\t85 c0                \ttest   %eax,%eax\n    1acb:\t74 07                \tje     1ad4 <ff_mjpeg_decode_sof+0x967>\n    1acd:\tba 04 00 00 00       \tmov    $0x4,%edx\n    1ad2:\teb 05                \tjmp    1ad9 <ff_mjpeg_decode_sof+0x96c>\n    1ad4:\tba 0d 00 00 00       \tmov    $0xd,%edx\n    1ad9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1ade:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1ae2:\t89 50 40             \tmov    %edx,0x40(%rax)\n    1ae5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1aea:\t8b 80 7c 1d 00 00    \tmov    0x1d7c(%rax),%eax\n    1af0:\t85 c0                \ttest   %eax,%eax\n    1af2:\t74 07                \tje     1afb <ff_mjpeg_decode_sof+0x98e>\n    1af4:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1af9:\teb 05                \tjmp    1b00 <ff_mjpeg_decode_sof+0x993>\n    1afb:\tba 02 00 00 00       \tmov    $0x2,%edx\n    1b00:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1b05:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1b09:\t89 90 fc 03 00 00    \tmov    %edx,0x3fc(%rax)\n    1b0f:\te9 83 00 00 00       \tjmpq   1b97 <ff_mjpeg_decode_sof+0xa2a>\n    1b14:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1b19:\t8b 80 7c 1d 00 00    \tmov    0x1d7c(%rax),%eax\n    1b1f:\t85 c0                \ttest   %eax,%eax\n    1b21:\t74 07                \tje     1b2a <ff_mjpeg_decode_sof+0x9bd>\n    1b23:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b28:\teb 05                \tjmp    1b2f <ff_mjpeg_decode_sof+0x9c2>\n    1b2a:\tba 0c 00 00 00       \tmov    $0xc,%edx\n    1b2f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1b34:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1b38:\t89 50 40             \tmov    %edx,0x40(%rax)\n    1b3b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1b40:\t8b 80 7c 1d 00 00    \tmov    0x1d7c(%rax),%eax\n    1b46:\t85 c0                \ttest   %eax,%eax\n    1b48:\t74 07                \tje     1b51 <ff_mjpeg_decode_sof+0x9e4>\n    1b4a:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1b4f:\teb 05                \tjmp    1b56 <ff_mjpeg_decode_sof+0x9e9>\n    1b51:\tba 02 00 00 00       \tmov    $0x2,%edx\n    1b56:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1b5b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1b5f:\t89 90 fc 03 00 00    \tmov    %edx,0x3fc(%rax)\n    1b65:\teb 30                \tjmp    1b97 <ff_mjpeg_decode_sof+0xa2a>\n    1b67:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1b6c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1b70:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n    1b74:\t89 d1                \tmov    %edx,%ecx\n    1b76:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b7b:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    1b80:\t48 89 c7             \tmov    %rax,%rdi\n    1b83:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b88:\te8 00 00 00 00       \tcallq  1b8d <ff_mjpeg_decode_sof+0xa20>\n    1b8d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1b92:\te9 9d 03 00 00       \tjmpq   1f34 <ff_mjpeg_decode_sof+0xdc7>\n    1b97:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1b9c:\t8b 80 7c 03 00 00    \tmov    0x37c(%rax),%eax\n    1ba2:\t85 c0                \ttest   %eax,%eax\n    1ba4:\t74 54                \tje     1bfa <ff_mjpeg_decode_sof+0xa8d>\n    1ba6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1bab:\t8b 80 bc 03 00 00    \tmov    0x3bc(%rax),%eax\n    1bb1:\t83 f8 01             \tcmp    $0x1,%eax\n    1bb4:\t7e 12                \tjle    1bc8 <ff_mjpeg_decode_sof+0xa5b>\n    1bb6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1bbb:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1bbf:\tc7 40 40 02 00 00 00 \tmovl   $0x2,0x40(%rax)\n    1bc6:\teb 32                \tjmp    1bfa <ff_mjpeg_decode_sof+0xa8d>\n    1bc8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1bcd:\t8b 80 90 03 00 00    \tmov    0x390(%rax),%eax\n    1bd3:\t83 f8 08             \tcmp    $0x8,%eax\n    1bd6:\t7f 12                \tjg     1bea <ff_mjpeg_decode_sof+0xa7d>\n    1bd8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1bdd:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1be1:\tc7 40 40 08 00 00 00 \tmovl   $0x8,0x40(%rax)\n    1be8:\teb 10                \tjmp    1bfa <ff_mjpeg_decode_sof+0xa8d>\n    1bea:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1bef:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1bf3:\tc7 40 40 20 00 00 00 \tmovl   $0x20,0x40(%rax)\n    1bfa:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1bff:\t48 8b 80 f8 05 00 00 \tmov    0x5f8(%rax),%rax\n    1c06:\t48 8b 00             \tmov    (%rax),%rax\n    1c09:\t48 85 c0             \ttest   %rax,%rax\n    1c0c:\t74 2d                \tje     1c3b <ff_mjpeg_decode_sof+0xace>\n    1c0e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1c13:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1c17:\t48 8b 88 30 01 00 00 \tmov    0x130(%rax),%rcx\n    1c1e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1c23:\t48 8b 90 f8 05 00 00 \tmov    0x5f8(%rax),%rdx\n    1c2a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1c2f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1c33:\t48 89 d6             \tmov    %rdx,%rsi\n    1c36:\t48 89 c7             \tmov    %rax,%rdi\n    1c39:\tff d1                \tcallq  *%rcx\n    1c3b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1c40:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1c44:\t48 8b 88 28 01 00 00 \tmov    0x128(%rax),%rcx\n    1c4b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1c50:\t48 8b 90 f8 05 00 00 \tmov    0x5f8(%rax),%rdx\n    1c57:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1c5c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1c60:\t48 89 d6             \tmov    %rdx,%rsi\n    1c63:\t48 89 c7             \tmov    %rax,%rdi\n    1c66:\tff d1                \tcallq  *%rcx\n    1c68:\t85 c0                \ttest   %eax,%eax\n    1c6a:\t79 2a                \tjns    1c96 <ff_mjpeg_decode_sof+0xb29>\n    1c6c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1c71:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1c75:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1c7a:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    1c7f:\t48 89 c7             \tmov    %rax,%rdi\n    1c82:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c87:\te8 00 00 00 00       \tcallq  1c8c <ff_mjpeg_decode_sof+0xb1f>\n    1c8c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1c91:\te9 9e 02 00 00       \tjmpq   1f34 <ff_mjpeg_decode_sof+0xdc7>\n    1c96:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1c9b:\t48 8b 80 f8 05 00 00 \tmov    0x5f8(%rax),%rax\n    1ca2:\tc7 40 54 01 00 00 00 \tmovl   $0x1,0x54(%rax)\n    1ca9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1cae:\t48 8b 80 f8 05 00 00 \tmov    0x5f8(%rax),%rax\n    1cb5:\tc7 40 50 01 00 00 00 \tmovl   $0x1,0x50(%rax)\n    1cbc:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1cc1:\tc7 80 00 06 00 00 01 \tmovl   $0x1,0x600(%rax)\n    1cc8:\t00 00 00 \n    1ccb:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n    1cd2:\t00 \n    1cd3:\teb 47                \tjmp    1d1c <ff_mjpeg_decode_sof+0xbaf>\n    1cd5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1cda:\t48 8b 80 f8 05 00 00 \tmov    0x5f8(%rax),%rax\n    1ce1:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    1ce5:\t48 63 d2             \tmovslq %edx,%rdx\n    1ce8:\t48 83 c2 08          \tadd    $0x8,%rdx\n    1cec:\t8b 14 90             \tmov    (%rax,%rdx,4),%edx\n    1cef:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1cf4:\t8b 80 70 03 00 00    \tmov    0x370(%rax),%eax\n    1cfa:\t89 c1                \tmov    %eax,%ecx\n    1cfc:\td3 e2                \tshl    %cl,%edx\n    1cfe:\t89 d1                \tmov    %edx,%ecx\n    1d00:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1d05:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    1d09:\t48 63 d2             \tmovslq %edx,%rdx\n    1d0c:\t48 81 c2 80 01 00 00 \tadd    $0x180,%rdx\n    1d13:\t89 4c 90 04          \tmov    %ecx,0x4(%rax,%rdx,4)\n    1d17:\t83 44 24 3c 01       \taddl   $0x1,0x3c(%rsp)\n    1d1c:\t83 7c 24 3c 02       \tcmpl   $0x2,0x3c(%rsp)\n    1d21:\t7e b2                \tjle    1cd5 <ff_mjpeg_decode_sof+0xb68>\n    1d23:\t8b 54 24 28          \tmov    0x28(%rsp),%edx\n    1d27:\t89 d0                \tmov    %edx,%eax\n    1d29:\t01 c0                \tadd    %eax,%eax\n    1d2b:\t01 d0                \tadd    %edx,%eax\n    1d2d:\t83 c0 08             \tadd    $0x8,%eax\n    1d30:\t39 44 24 30          \tcmp    %eax,0x30(%rsp)\n    1d34:\t74 26                \tje     1d5c <ff_mjpeg_decode_sof+0xbef>\n    1d36:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1d3b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1d3f:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n    1d43:\t89 d1                \tmov    %edx,%ecx\n    1d45:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1d4a:\tbe 30 00 00 00       \tmov    $0x30,%esi\n    1d4f:\t48 89 c7             \tmov    %rax,%rdi\n    1d52:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d57:\te8 00 00 00 00       \tcallq  1d5c <ff_mjpeg_decode_sof+0xbef>\n    1d5c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1d61:\t8b 80 80 03 00 00    \tmov    0x380(%rax),%eax\n    1d67:\t85 c0                \ttest   %eax,%eax\n    1d69:\t0f 84 c0 01 00 00    \tje     1f2f <ff_mjpeg_decode_sof+0xdc2>\n    1d6f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1d74:\t8b 80 60 04 00 00    \tmov    0x460(%rax),%eax\n    1d7a:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n    1d81:\t8b 44 24 2c          \tmov    0x2c(%rsp),%eax\n    1d85:\t01 d0                \tadd    %edx,%eax\n    1d87:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    1d8a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1d8f:\t8b 80 60 04 00 00    \tmov    0x460(%rax),%eax\n    1d95:\t8d 0c c5 00 00 00 00 \tlea    0x0(,%rax,8),%ecx\n    1d9c:\t89 d0                \tmov    %edx,%eax\n    1d9e:\t99                   \tcltd   \n    1d9f:\tf7 f9                \tidiv   %ecx\n    1da1:\t89 44 24 24          \tmov    %eax,0x24(%rsp)\n    1da5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1daa:\t8b 80 64 04 00 00    \tmov    0x464(%rax),%eax\n    1db0:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n    1db7:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n    1dbb:\t01 d0                \tadd    %edx,%eax\n    1dbd:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    1dc0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1dc5:\t8b 80 64 04 00 00    \tmov    0x464(%rax),%eax\n    1dcb:\t8d 0c c5 00 00 00 00 \tlea    0x0(,%rax,8),%ecx\n    1dd2:\t89 d0                \tmov    %edx,%eax\n    1dd4:\t99                   \tcltd   \n    1dd5:\tf7 f9                \tidiv   %ecx\n    1dd7:\t89 44 24 20          \tmov    %eax,0x20(%rsp)\n    1ddb:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n    1de2:\t00 \n    1de3:\te9 15 01 00 00       \tjmpq   1efd <ff_mjpeg_decode_sof+0xd90>\n    1de8:\t8b 44 24 24          \tmov    0x24(%rsp),%eax\n    1dec:\t0f af 44 24 20       \timul   0x20(%rsp),%eax\n    1df1:\t89 c2                \tmov    %eax,%edx\n    1df3:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1df8:\t8b 4c 24 3c          \tmov    0x3c(%rsp),%ecx\n    1dfc:\t48 63 c9             \tmovslq %ecx,%rcx\n    1dff:\t48 81 c1 f8 00 00 00 \tadd    $0xf8,%rcx\n    1e06:\t8b 04 88             \tmov    (%rax,%rcx,4),%eax\n    1e09:\t0f af d0             \timul   %eax,%edx\n    1e0c:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1e11:\t8b 4c 24 3c          \tmov    0x3c(%rsp),%ecx\n    1e15:\t48 63 c9             \tmovslq %ecx,%rcx\n    1e18:\t48 81 c1 fc 00 00 00 \tadd    $0xfc,%rcx\n    1e1f:\t8b 04 88             \tmov    (%rax,%rcx,4),%eax\n    1e22:\t0f af c2             \timul   %edx,%eax\n    1e25:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n    1e29:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n    1e2d:\t48 98                \tcltq   \n    1e2f:\t48 05 d4 00 00 00    \tadd    $0xd4,%rax\n    1e35:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1e3c:\t00 \n    1e3d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1e42:\t48 01 d0             \tadd    %rdx,%rax\n    1e45:\t48 89 c7             \tmov    %rax,%rdi\n    1e48:\te8 00 00 00 00       \tcallq  1e4d <ff_mjpeg_decode_sof+0xce0>\n    1e4d:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n    1e51:\t48 98                \tcltq   \n    1e53:\t48 05 d8 00 00 00    \tadd    $0xd8,%rax\n    1e59:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1e60:\t00 \n    1e61:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1e66:\t48 01 d0             \tadd    %rdx,%rax\n    1e69:\t48 89 c7             \tmov    %rax,%rdi\n    1e6c:\te8 00 00 00 00       \tcallq  1e71 <ff_mjpeg_decode_sof+0xd04>\n    1e71:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    1e75:\t48 98                \tcltq   \n    1e77:\t48 c1 e0 07          \tshl    $0x7,%rax\n    1e7b:\t48 89 c7             \tmov    %rax,%rdi\n    1e7e:\te8 00 00 00 00       \tcallq  1e83 <ff_mjpeg_decode_sof+0xd16>\n    1e83:\t48 89 c1             \tmov    %rax,%rcx\n    1e86:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1e8b:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    1e8f:\t48 63 d2             \tmovslq %edx,%rdx\n    1e92:\t48 81 c2 d4 00 00 00 \tadd    $0xd4,%rdx\n    1e99:\t48 89 0c d0          \tmov    %rcx,(%rax,%rdx,8)\n    1e9d:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n    1ea1:\t48 98                \tcltq   \n    1ea3:\t48 89 c7             \tmov    %rax,%rdi\n    1ea6:\te8 00 00 00 00       \tcallq  1eab <ff_mjpeg_decode_sof+0xd3e>\n    1eab:\t48 89 c1             \tmov    %rax,%rcx\n    1eae:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1eb3:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    1eb7:\t48 63 d2             \tmovslq %edx,%rdx\n    1eba:\t48 81 c2 d8 00 00 00 \tadd    $0xd8,%rdx\n    1ec1:\t48 89 0c d0          \tmov    %rcx,(%rax,%rdx,8)\n    1ec5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1eca:\t8b 54 24 3c          \tmov    0x3c(%rsp),%edx\n    1ece:\t48 63 d2             \tmovslq %edx,%rdx\n    1ed1:\t48 81 c2 f8 00 00 00 \tadd    $0xf8,%rdx\n    1ed8:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    1edb:\t0f af 44 24 24       \timul   0x24(%rsp),%eax\n    1ee0:\t89 c2                \tmov    %eax,%edx\n    1ee2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1ee7:\t8b 4c 24 3c          \tmov    0x3c(%rsp),%ecx\n    1eeb:\t48 63 c9             \tmovslq %ecx,%rcx\n    1eee:\t48 81 c1 f0 00 00 00 \tadd    $0xf0,%rcx\n    1ef5:\t89 14 88             \tmov    %edx,(%rax,%rcx,4)\n    1ef8:\t83 44 24 3c 01       \taddl   $0x1,0x3c(%rsp)\n    1efd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1f02:\t8b 80 bc 03 00 00    \tmov    0x3bc(%rax),%eax\n    1f08:\t39 44 24 3c          \tcmp    %eax,0x3c(%rsp)\n    1f0c:\t0f 8c d6 fe ff ff    \tjl     1de8 <ff_mjpeg_decode_sof+0xc7b>\n    1f12:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1f17:\t48 05 e0 06 00 00    \tadd    $0x6e0,%rax\n    1f1d:\tba 20 00 00 00       \tmov    $0x20,%edx\n    1f22:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f27:\t48 89 c7             \tmov    %rax,%rdi\n    1f2a:\te8 00 00 00 00       \tcallq  1f2f <ff_mjpeg_decode_sof+0xdc2>\n    1f2f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f34:\t48 83 c4 48          \tadd    $0x48,%rsp\n    1f38:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ff_mjpeg_decode_sof(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 result;\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  int v10;\n  int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">v14</span>;\n  unsigned int <span class=\"supfact\">v15</span>;\n  unsigned int <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">v17</span>;\n  unsigned int <span class=\"supfact\">v18</span>;\n  int i;\n  int j;\n  int k;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  <span class=\"supfact\">v16</span> = get_bits(<span class=\"supfact\">a1</span> + Number, Number);\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n      get_bits(<span class=\"supfact\">a1</span> + Number, Number);\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number &&\n      !*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) != Number &&\n      !*(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    av_log(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number L, String);\n    return Number;\n  }\n  <span class=\"supfact\">v18</span> = get_bits(<span class=\"supfact\">a1</span> + Number, Number);\n  <span class=\"supfact\">v15</span> = get_bits(<span class=\"supfact\">a1</span> + Number, Number);\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n      <span class=\"supfact\">v15</span> == *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == <span class=\"supfact\">v18</span> + Number)\n    <span class=\"supfact\">v18</span> = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  av_log(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number L, String,\n         <span class=\"supfact\">v15</span>, <span class=\"supfact\">v18</span>);\n  if ((unsigned int)av_image_check_size(\n          <span class=\"supfact\">v15</span>, <span class=\"supfact\">v18</span>, Number L,\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number)))\n    return Number;\n  <span class=\"supfact\">v14</span> = get_bits(<span class=\"supfact\">a1</span> + Number, Number);\n  if (<span class=\"supfact\">v14</span> <= Number || <span class=\"supfact\">v14</span> > Number)\n    return Number;\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n      *(int *)(<span class=\"supfact\">a1</span> + Number) > Number &&\n      <span class=\"supfact\">v14</span> != Number) {\n    av_log(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number L, String);\n    return Number;\n  }\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v14</span>;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  for (i = Number; i < <span class=\"supfact\">v14</span>; ++i) {\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (i + Number L)) =\n        get_bits(<span class=\"supfact\">a1</span> + Number, Number) - Number;\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (i + Number L)) =\n        get_bits(<span class=\"supfact\">a1</span> + Number, Number);\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (i + Number L)) =\n        get_bits(<span class=\"supfact\">a1</span> + Number, Number);\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (i + Number L)) >\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n          *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (i + Number L));\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (i + Number L)) >\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n          *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (i + Number L));\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (i + Number L) + Number) =\n        get_bits(<span class=\"supfact\">a1</span> + Number, Number);\n    if (*(int *)(<span class=\"supfact\">a1</span> + Number * (i + Number L) + Number) >\n        Number)\n      return Number;\n    av_log(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number L, String,\n           (unsigned int)i,\n           *(unsigned int *)(<span class=\"supfact\">a1</span> + Number * (i + Number L)),\n           *(unsigned int *)(<span class=\"supfact\">a1</span> + Number * (i + Number L)),\n           *(unsigned int *)(<span class=\"supfact\">a1</span> + Number * (i + Number L)),\n           *(unsigned int *)(<span class=\"supfact\">a1</span> + Number * (i + Number L) +\n                             Number));\n  }\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n      (*(int *)(<span class=\"supfact\">a1</span> + Number) > Number ||\n       *(int *)(<span class=\"supfact\">a1</span> + Number) > Number)) {\n    av_log(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number L, String);\n    return Number;\n  }\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number &&\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number &&\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number)\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  if (<span class=\"supfact\">v15</span> != *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) ||\n      <span class=\"supfact\">v18</span> != *(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    av_freep(<span class=\"supfact\">a1</span> + Number);\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v15</span>;\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">v18</span>;\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) <\n            Number * *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) / Number) {\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n          *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n      *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = Number;\n      *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n          *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number;\n      <span class=\"supfact\">v18</span> *= Number;\n    }\n    avcodec_set_dimensions(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n                           <span class=\"supfact\">v15</span>, <span class=\"supfact\">v18</span>);\n    v2 = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) + Number;\n    if (v2 < Number)\n      v2 = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) + Number;\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = av_mallocz(v2 >> Number);\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n  }\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) &&\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) ==\n          (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number))\n    return Number L;\n  <span class=\"supfact\">v17</span> = (Number * *(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) |\n                        (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) << Number) |\n                        (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) << Number) |\n                        (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) << Number) |\n                        (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) << Number) |\n                        (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) << Number) |\n                        (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) << Number) |\n                        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n  av_log(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number L, String,\n         (unsigned int)<span class=\"supfact\">v17</span>);\n  if ((<span class=\"supfact\">v17</span> & Number) == Number)\n    <span class=\"supfact\">v17</span> -=\n        ((unsigned int)<span class=\"supfact\">v17</span> >> Number) & Number;\n  if ((<span class=\"supfact\">v17</span> & Number) == Number)\n    <span class=\"supfact\">v17</span> -= (<span class=\"supfact\">v17</span> >> Number) & Number;\n  if (<span class=\"supfact\">v17</span> == Number) {\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n      v9 = Number;\n    else\n      v9 = Number;\n    *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = v9;\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n      v10 = Number;\n    else\n      v10 = Number;\n    *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = v10;\n    goto LABEL_99;\n  }\n  if (<span class=\"supfact\">v17</span> > Number)\n    goto LABEL_98;\n  if (<span class=\"supfact\">v17</span> == Number) {\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n      v7 = Number;\n    else\n      v7 = Number;\n    *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = v7;\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n      v8 = Number;\n    else\n      v8 = Number;\n    *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = v8;\n    goto LABEL_99;\n  }\n  if (<span class=\"supfact\">v17</span> > Number)\n    goto LABEL_98;\n  if (<span class=\"supfact\">v17</span> == Number) {\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n      v5 = Number;\n    else\n      v5 = Number;\n    *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = v5;\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n      v6 = Number;\n    else\n      v6 = Number;\n    *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = v6;\n    goto LABEL_99;\n  }\n  if (<span class=\"supfact\">v17</span> > Number)\n    goto LABEL_98;\n  if (<span class=\"supfact\">v17</span> != Number) {\n    if (<span class=\"supfact\">v17</span> == Number) {\n      if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n        *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n            Number;\n      } else if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number &&\n                 *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number &&\n                 *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) == Number) {\n        *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n            Number;\n      } else {\n        if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n          v3 = Number;\n        else\n          v3 = Number;\n        *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = v3;\n        if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n          v4 = Number;\n        else\n          v4 = Number;\n        *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = v4;\n      }\n      goto LABEL_99;\n    }\n  LABEL_98:\n    av_log(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number L, String,\n           (unsigned int)<span class=\"supfact\">v17</span>);\n    return Number;\n  }\n  *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = Number;\nLABEL_99:\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    if (*(int *)(<span class=\"supfact\">a1</span> + Number) <= Number) {\n      if (*(int *)(<span class=\"supfact\">a1</span> + Number) > Number)\n        *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n            Number;\n      else\n        *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) =\n            Number;\n    } else {\n      *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = Number;\n    }\n  }\n  if (**(_QWORD **)(<span class=\"supfact\">a1</span> + Number))\n    (*(void(__fastcall **)(_QWORD, _QWORD))(\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L))(\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number));\n  if ((*(int(__fastcall **)(_QWORD, _QWORD))(\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L))(\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number),\n          *(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) >= Number) {\n    *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = Number;\n    *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) + Number L) = Number;\n    *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = Number;\n    for (j = Number; j <= Number; ++j)\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (j + Number L) + Number) =\n          *(_DWORD *)(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                      Number * (j + Number L))\n          << *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n    if (<span class=\"supfact\">v16</span> != Number * <span class=\"supfact\">v14</span> + Number)\n      av_log(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number L, String,\n             <span class=\"supfact\">v16</span>);\n    if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n      <span class=\"supfact\">v13</span> =\n          (int)(Number * *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                <span class=\"supfact\">v15</span> - Number) /\n          (Number * *(_DWORD *)(<span class=\"supfact\">a1</span> + Number));\n      <span class=\"supfact\">v12</span> =\n          (int)(Number * *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) +\n                <span class=\"supfact\">v18</span> - Number) /\n          (Number * *(_DWORD *)(<span class=\"supfact\">a1</span> + Number));\n      for (k = Number; k < *(_DWORD *)(<span class=\"supfact\">a1</span> + Number); ++k) {\n        <span class=\"supfact\">v11</span> =\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (k + Number L)) *\n            <span class=\"supfact\">v12</span> * <span class=\"supfact\">v13</span> *\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (k + Number L));\n        av_freep(Number * (k + Number L) + <span class=\"supfact\">a1</span>);\n        av_freep(Number * (k + Number L) + <span class=\"supfact\">a1</span>);\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number * (k + Number L)) =\n            av_malloc((__int64)<span class=\"supfact\">v11</span> << Number);\n        *(_QWORD *)(<span class=\"supfact\">a1</span> + Number * (k + Number L)) =\n            av_mallocz(<span class=\"supfact\">v11</span>);\n        *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (k + Number L)) =\n            <span class=\"supfact\">v13</span> *\n            *(_DWORD *)(<span class=\"supfact\">a1</span> + Number * (k + Number L));\n      }\n      memset((void *)(<span class=\"supfact\">a1</span> + Number), Number, Number);\n    }\n    result = Number L;\n  } else {\n    av_log(*(_QWORD *)(<span class=\"supfact\">a1</span> + Number), Number L, String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl ff_mjpeg_decode_sof(MJpegDecodeContext_0 *<span class=\"supfact\">s</span>) {\n  int result;\n  int v2;\n  PixelFormat v3;\n  AVColorRange v4;\n  PixelFormat v5;\n  AVColorRange v6;\n  PixelFormat v7;\n  AVColorRange v8;\n  PixelFormat v9;\n  AVColorRange v10;\n  int <span class=\"supfact\">size</span>;\n  int <span class=\"supfact\">bh_0</span>;\n  int <span class=\"supfact\">bw</span>;\n  signed int <span class=\"supfact\">nb_components</span>;\n  unsigned int <span class=\"supfact\">width</span>;\n  unsigned int <span class=\"supfact\">len</span>;\n  int <span class=\"supfact\">pix_fmt_id</span>;\n  unsigned int <span class=\"supfact\">height</span>;\n  int i;\n  int ia;\n  int ib;\n  <span class=\"supfact\">s</span>->cur_scan = Number;\n  <span class=\"supfact\">len</span> = get_bits(&<span class=\"supfact\">s</span>->gb, Number);\n  <span class=\"supfact\">s</span>->bits = get_bits(&<span class=\"supfact\">s</span>->gb, Number);\n  if (<span class=\"supfact\">s</span>->pegasus_rct)\n    <span class=\"supfact\">s</span>->bits = Number;\n  if (<span class=\"supfact\">s</span>->bits == Number && !<span class=\"supfact\">s</span>->pegasus_rct)\n    <span class=\"supfact\">s</span>->rct = Number;\n  if (<span class=\"supfact\">s</span>->bits != Number && !<span class=\"supfact\">s</span>->lossless) {\n    av_log(<span class=\"supfact\">s</span>->avctx, Number L, String);\n    return Number;\n  }\n  <span class=\"supfact\">height</span> = get_bits(&<span class=\"supfact\">s</span>->gb, Number);\n  <span class=\"supfact\">width</span> = get_bits(&<span class=\"supfact\">s</span>->gb, Number);\n  if (<span class=\"supfact\">s</span>->interlaced &&\n      <span class=\"supfact\">width</span> == <span class=\"supfact\">s</span>-><span class=\"supfact\">width</span> &&\n      <span class=\"supfact\">s</span>-><span class=\"supfact\">height</span> ==\n          <span class=\"supfact\">height</span> + Number)\n    <span class=\"supfact\">height</span> = <span class=\"supfact\">s</span>-><span class=\"supfact\">height</span>;\n  av_log(<span class=\"supfact\">s</span>->avctx, Number L, String, <span class=\"supfact\">width</span>,\n         <span class=\"supfact\">height</span>);\n  if ((unsigned int)av_image_check_size(<span class=\"supfact\">width</span>,\n                                        <span class=\"supfact\">height</span>, Number L,\n                                        <span class=\"supfact\">s</span>->avctx))\n    return Number;\n  <span class=\"supfact\">nb_components</span> = get_bits(&<span class=\"supfact\">s</span>->gb, Number);\n  if (<span class=\"supfact\">nb_components</span> <= Number ||\n      <span class=\"supfact\">nb_components</span> > Number)\n    return Number;\n  if (<span class=\"supfact\">s</span>->ls && <span class=\"supfact\">s</span>->bits > Number &&\n      <span class=\"supfact\">nb_components</span> != Number) {\n    av_log(<span class=\"supfact\">s</span>->avctx, Number L, String);\n    return Number;\n  }\n  <span class=\"supfact\">s</span>-><span class=\"supfact\">nb_components</span> =\n      <span class=\"supfact\">nb_components</span>;\n  <span class=\"supfact\">s</span>->h_max = Number;\n  <span class=\"supfact\">s</span>->v_max = Number;\n  for (i = Number; i < <span class=\"supfact\">nb_components</span>; ++i) {\n    <span class=\"supfact\">s</span>->component_id[i] =\n        get_bits(&<span class=\"supfact\">s</span>->gb, Number) - Number;\n    <span class=\"supfact\">s</span>->h_count[i] = get_bits(&<span class=\"supfact\">s</span>->gb, Number);\n    <span class=\"supfact\">s</span>->v_count[i] = get_bits(&<span class=\"supfact\">s</span>->gb, Number);\n    if (<span class=\"supfact\">s</span>->h_count[i] > <span class=\"supfact\">s</span>->h_max)\n      <span class=\"supfact\">s</span>->h_max = <span class=\"supfact\">s</span>->h_count[i];\n    if (<span class=\"supfact\">s</span>->v_count[i] > <span class=\"supfact\">s</span>->v_max)\n      <span class=\"supfact\">s</span>->v_max = <span class=\"supfact\">s</span>->v_count[i];\n    <span class=\"supfact\">s</span>->quant_index[i] =\n        get_bits(&<span class=\"supfact\">s</span>->gb, Number);\n    if (<span class=\"supfact\">s</span>->quant_index[i] > Number)\n      return Number;\n    av_log(<span class=\"supfact\">s</span>->avctx, Number L, String, (unsigned int)i,\n           (unsigned int)<span class=\"supfact\">s</span>->h_count[i],\n           (unsigned int)<span class=\"supfact\">s</span>->v_count[i],\n           (unsigned int)<span class=\"supfact\">s</span>->component_id[i],\n           (unsigned int)<span class=\"supfact\">s</span>->quant_index[i]);\n  }\n  if (<span class=\"supfact\">s</span>->ls && (<span class=\"supfact\">s</span>->h_max > Number ||\n                                <span class=\"supfact\">s</span>->v_max > Number)) {\n    av_log(<span class=\"supfact\">s</span>->avctx, Number L, String);\n    return Number;\n  }\n  if (<span class=\"supfact\">s</span>->v_max == Number &&\n      <span class=\"supfact\">s</span>->h_max == Number &&\n      <span class=\"supfact\">s</span>->lossless == Number)\n    <span class=\"supfact\">s</span>->rgb = Number;\n  if (<span class=\"supfact\">width</span> != <span class=\"supfact\">s</span>-><span class=\"supfact\">width</span> ||\n      <span class=\"supfact\">height</span> != <span class=\"supfact\">s</span>-><span class=\"supfact\">height</span>) {\n    av_freep(&<span class=\"supfact\">s</span>->qscale_table);\n    <span class=\"supfact\">s</span>-><span class=\"supfact\">width</span> = <span class=\"supfact\">width</span>;\n    <span class=\"supfact\">s</span>-><span class=\"supfact\">height</span> = <span class=\"supfact\">height</span>;\n    <span class=\"supfact\">s</span>->interlaced = Number;\n    if (<span class=\"supfact\">s</span>->first_picture && <span class=\"supfact\">s</span>->org_height &&\n        <span class=\"supfact\">s</span>-><span class=\"supfact\">height</span> <\n            Number * <span class=\"supfact\">s</span>->org_height / Number) {\n      <span class=\"supfact\">s</span>->interlaced = Number;\n      <span class=\"supfact\">s</span>->bottom_field = <span class=\"supfact\">s</span>->interlace_polarity;\n      <span class=\"supfact\">s</span>->picture_ptr->interlaced_frame = Number;\n      <span class=\"supfact\">s</span>->picture_ptr->top_field_first =\n          <span class=\"supfact\">s</span>->interlace_polarity == Number;\n      <span class=\"supfact\">height</span> *= Number;\n    }\n    avcodec_set_dimensions(<span class=\"supfact\">s</span>->avctx, <span class=\"supfact\">width</span>,\n                           <span class=\"supfact\">height</span>);\n    v2 = <span class=\"supfact\">s</span>-><span class=\"supfact\">width</span> + Number;\n    if (v2 < Number)\n      v2 = <span class=\"supfact\">s</span>-><span class=\"supfact\">width</span> + Number;\n    <span class=\"supfact\">s</span>->qscale_table = (int8_t *)av_mallocz(v2 >> Number);\n    <span class=\"supfact\">s</span>->first_picture = Number;\n  }\n  if (<span class=\"supfact\">s</span>->interlaced &&\n      <span class=\"supfact\">s</span>->bottom_field ==\n          (<span class=\"supfact\">s</span>->interlace_polarity == Number))\n    return Number;\n  <span class=\"supfact\">pix_fmt_id</span> = (Number * <span class=\"supfact\">s</span>->h_count[Number]) |\n                               (<span class=\"supfact\">s</span>->v_count[Number] << Number) |\n                               (<span class=\"supfact\">s</span>->h_count[Number] << Number) |\n                               (<span class=\"supfact\">s</span>->v_count[Number] << Number) |\n                               (<span class=\"supfact\">s</span>->h_count[Number] << Number) |\n                               (<span class=\"supfact\">s</span>->v_count[Number] << Number) |\n                               (<span class=\"supfact\">s</span>->h_count[Number] << Number) |\n                               <span class=\"supfact\">s</span>->v_count[Number];\n  av_log(<span class=\"supfact\">s</span>->avctx, Number L, String,\n         (unsigned int)<span class=\"supfact\">pix_fmt_id</span>);\n  if ((<span class=\"supfact\">pix_fmt_id</span> & Number) == Number)\n    <span class=\"supfact\">pix_fmt_id</span> -=\n        ((unsigned int)<span class=\"supfact\">pix_fmt_id</span> >> Number) & Number;\n  if ((<span class=\"supfact\">pix_fmt_id</span> & Number) == Number)\n    <span class=\"supfact\">pix_fmt_id</span> -=\n        (<span class=\"supfact\">pix_fmt_id</span> >> Number) & Number;\n  if (<span class=\"supfact\">pix_fmt_id</span> == Number) {\n    if (<span class=\"supfact\">s</span>->cs_itu601)\n      v9 = PIX_FMT_YUV420P;\n    else\n      v9 = PIX_FMT_YUVJ420P;\n    <span class=\"supfact\">s</span>->avctx->pix_fmt = v9;\n    if (<span class=\"supfact\">s</span>->cs_itu601)\n      v10 = AVCOL_RANGE_MPEG;\n    else\n      v10 = AVCOL_RANGE_JPEG;\n    <span class=\"supfact\">s</span>->avctx->color_range = v10;\n    goto LABEL_99;\n  }\n  if (<span class=\"supfact\">pix_fmt_id</span> > Number)\n    goto LABEL_98;\n  if (<span class=\"supfact\">pix_fmt_id</span> == Number) {\n    if (<span class=\"supfact\">s</span>->cs_itu601)\n      v7 = PIX_FMT_YUV422P;\n    else\n      v7 = PIX_FMT_YUVJ422P;\n    <span class=\"supfact\">s</span>->avctx->pix_fmt = v7;\n    if (<span class=\"supfact\">s</span>->cs_itu601)\n      v8 = AVCOL_RANGE_MPEG;\n    else\n      v8 = AVCOL_RANGE_JPEG;\n    <span class=\"supfact\">s</span>->avctx->color_range = v8;\n    goto LABEL_99;\n  }\n  if (<span class=\"supfact\">pix_fmt_id</span> > Number)\n    goto LABEL_98;\n  if (<span class=\"supfact\">pix_fmt_id</span> == Number) {\n    if (<span class=\"supfact\">s</span>->cs_itu601)\n      v5 = PIX_FMT_YUV440P;\n    else\n      v5 = PIX_FMT_YUVJ440P;\n    <span class=\"supfact\">s</span>->avctx->pix_fmt = v5;\n    if (<span class=\"supfact\">s</span>->cs_itu601)\n      v6 = AVCOL_RANGE_MPEG;\n    else\n      v6 = AVCOL_RANGE_JPEG;\n    <span class=\"supfact\">s</span>->avctx->color_range = v6;\n    goto LABEL_99;\n  }\n  if (<span class=\"supfact\">pix_fmt_id</span> > Number)\n    goto LABEL_98;\n  if (<span class=\"supfact\">pix_fmt_id</span> != Number) {\n    if (<span class=\"supfact\">pix_fmt_id</span> == Number) {\n      if (<span class=\"supfact\">s</span>->rgb) {\n        <span class=\"supfact\">s</span>->avctx->pix_fmt = PIX_FMT_BGRA;\n      } else if (<span class=\"supfact\">s</span>->component_id[Number] == Number &&\n                 <span class=\"supfact\">s</span>->component_id[Number] == Number &&\n                 <span class=\"supfact\">s</span>->component_id[Number] == Number) {\n        <span class=\"supfact\">s</span>->avctx->pix_fmt = PIX_FMT_GBRP;\n      } else {\n        if (<span class=\"supfact\">s</span>->cs_itu601)\n          v3 = PIX_FMT_YUV444P;\n        else\n          v3 = PIX_FMT_YUVJ444P;\n        <span class=\"supfact\">s</span>->avctx->pix_fmt = v3;\n        if (<span class=\"supfact\">s</span>->cs_itu601)\n          v4 = AVCOL_RANGE_MPEG;\n        else\n          v4 = AVCOL_RANGE_JPEG;\n        <span class=\"supfact\">s</span>->avctx->color_range = v4;\n      }\n      goto LABEL_99;\n    }\n  LABEL_98:\n    av_log(<span class=\"supfact\">s</span>->avctx, Number L, String,\n           (unsigned int)<span class=\"supfact\">pix_fmt_id</span>);\n    return Number;\n  }\n  <span class=\"supfact\">s</span>->avctx->pix_fmt = PIX_FMT_GRAY8;\nLABEL_99:\n  if (<span class=\"supfact\">s</span>->ls) {\n    if (<span class=\"supfact\">s</span>-><span class=\"supfact\">nb_components</span> <= Number) {\n      if (<span class=\"supfact\">s</span>->bits > Number)\n        <span class=\"supfact\">s</span>->avctx->pix_fmt = PIX_FMT_GRAY16LE;\n      else\n        <span class=\"supfact\">s</span>->avctx->pix_fmt = PIX_FMT_GRAY8;\n    } else {\n      <span class=\"supfact\">s</span>->avctx->pix_fmt = PIX_FMT_RGB24;\n    }\n  }\n  if (<span class=\"supfact\">s</span>->picture_ptr->data[Number])\n    <span class=\"supfact\">s</span>->avctx->release_buffer(<span class=\"supfact\">s</span>->avctx,\n                                             <span class=\"supfact\">s</span>->picture_ptr);\n  if (<span class=\"supfact\">s</span>->avctx->get_buffer(\n          <span class=\"supfact\">s</span>->avctx, <span class=\"supfact\">s</span>->picture_ptr) >= Number) {\n    <span class=\"supfact\">s</span>->picture_ptr->pict_type = AV_PICTURE_TYPE_I;\n    <span class=\"supfact\">s</span>->picture_ptr->key_frame = Number;\n    <span class=\"supfact\">s</span>->got_picture = Number;\n    for (ia = Number; ia <= Number; ++ia)\n      <span class=\"supfact\">s</span>->linesize[ia] =\n          <span class=\"supfact\">s</span>->picture_ptr->linesize[ia]\n          << <span class=\"supfact\">s</span>->interlaced;\n    if (<span class=\"supfact\">len</span> != Number * <span class=\"supfact\">nb_components</span> + Number)\n      av_log(<span class=\"supfact\">s</span>->avctx, Number L, String, <span class=\"supfact\">len</span>);\n    if (<span class=\"supfact\">s</span>->progressive) {\n      <span class=\"supfact\">bw</span> = (int)(Number * <span class=\"supfact\">s</span>->h_max +\n                                 <span class=\"supfact\">width</span> - Number) /\n                           (Number * <span class=\"supfact\">s</span>->h_max);\n      <span class=\"supfact\">bh_0</span> = (int)(Number * <span class=\"supfact\">s</span>->v_max +\n                                   <span class=\"supfact\">height</span> - Number) /\n                             (Number * <span class=\"supfact\">s</span>->v_max);\n      for (ib = Number; ib < <span class=\"supfact\">s</span>-><span class=\"supfact\">nb_components</span>;\n           ++ib) {\n        <span class=\"supfact\">size</span> = <span class=\"supfact\">s</span>->h_count[ib] *\n                               <span class=\"supfact\">bh_0</span> * <span class=\"supfact\">bw</span> *\n                               <span class=\"supfact\">s</span>->v_count[ib];\n        av_freep(&<span class=\"supfact\">s</span>->blocks[ib]);\n        av_freep(&<span class=\"supfact\">s</span>->last_nnz[ib]);\n        <span class=\"supfact\">s</span>->blocks[ib] = (DCTELEM(*)[Number])av_malloc(\n            (__int64)<span class=\"supfact\">size</span> << Number);\n        <span class=\"supfact\">s</span>->last_nnz[ib] =\n            (uint8_t *)av_mallocz(<span class=\"supfact\">size</span>);\n        <span class=\"supfact\">s</span>->block_stride[ib] =\n            <span class=\"supfact\">bw</span> * <span class=\"supfact\">s</span>->h_count[ib];\n      }\n      memset(<span class=\"supfact\">s</span>->coefs_finished, Number,\n             sizeof(<span class=\"supfact\">s</span>->coefs_finished));\n    }\n    result = Number;\n  } else {\n    av_log(<span class=\"supfact\">s</span>->avctx, Number L, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "MJpegDecodeContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "MJpegDecodeContext_0 *"}, {"name": "v11", "type": "int", "pred_name": "ret", "ref_name": "size", "ref_type": "int"}, {"name": "v12", "type": "signed int", "pred_name": "nb_components", "ref_name": "bh_0", "ref_type": "int"}, {"name": "v13", "type": "unsigned int", "pred_name": "width", "ref_name": "bw", "ref_type": "int"}, {"name": "v14", "type": "unsigned int", "pred_name": "height", "ref_name": "nb_components", "ref_type": "signed int"}, {"name": "v15", "type": "signed int", "pred_name": "mb_num", "ref_name": "width", "ref_type": "unsigned int"}, {"name": "v16", "type": "unsigned int", "pred_name": "heighta", "ref_name": "len", "ref_type": "unsigned int"}, {"name": "v17", "type": "unsigned int", "pred_name": "widtha", "ref_name": "pix_fmt_id", "ref_type": "int"}, {"name": "v18", "type": "int", "pred_name": "nb_components", "ref_name": "height", "ref_type": "unsigned int"}], "body_in_train": false}, {"repo_owner": "leon-anavi", "repo_name": "xmame-arm", "path": "leon-anavi/xmame-arm/bad60a32b293dab5592647658c78568221567e7e97ec231cf097df14abdf8227", "path_in_repo": "leon-anavi/xmame-arm//xmame.obj/cpu/m37710/m37710o2.o", "objdump": "000000000000899b <m37710i_1a8_M1X0>:\n    899b:\t55                   \tpush   %rbp\n    899c:\t48 89 e5             \tmov    %rsp,%rbp\n    899f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 89a5 <m37710i_1a8_M1X0+0xa>\n    89a5:\t83 e8 02             \tsub    $0x2,%eax\n    89a8:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 89ae <m37710i_1a8_M1X0+0x13>\n    89ae:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 89b4 <m37710i_1a8_M1X0+0x19>\n    89b4:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 89ba <m37710i_1a8_M1X0+0x1f>\n    89ba:\t09 d0                \tor     %edx,%eax\n    89bc:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 89c2 <m37710i_1a8_M1X0+0x27>\n    89c2:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 89c8 <m37710i_1a8_M1X0+0x2d>\n    89c8:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 89ce <m37710i_1a8_M1X0+0x33>\n    89ce:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 89d4 <m37710i_1a8_M1X0+0x39>\n    89d4:\tc1 e8 08             \tshr    $0x8,%eax\n    89d7:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 89dd <m37710i_1a8_M1X0+0x42>\n    89dd:\t90                   \tnop\n    89de:\t5d                   \tpop    %rbp\n    89df:\tc3                   \tretq   ", "code_s": "__int64 m37710i_1a8_M1X0() {\n  __int64 <span class=\"supfact\">result</span>;\n  m37710_ICount -= Number;\n  m37710i_cpu[Number] = m37710i_cpu[Number] | m37710i_cpu[Number];\n  m37710i_cpu[Number] = m37710i_cpu[Number];\n  <span class=\"supfact\">result</span> = m37710i_cpu[Number] >> Number;\n  m37710i_cpu[Number] = <span class=\"supfact\">result</span>;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl m37710i_1a8_M1X0() {\n  m37710_ICount -= Number;\n  m37710i_cpu[Number] = m37710i_cpu[Number] | m37710i_cpu[Number];\n  m37710i_cpu[Number] = m37710i_cpu[Number];\n  m37710i_cpu[Number] = m37710i_cpu[Number] >> Number;\n}", "var": [{"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2af4e000b03dbd36bf5f5b1e94bd385a31b5c6a785c70e9770f2544cd62ecd92", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/m68000/m68kops.o", "objdump": "000000000003b23b <_ZL21m68k_op_move_16_al_pdP15_m68ki_cpu_core>:\n   3b23b:\t55                   \tpush   %rbp\n   3b23c:\t48 89 e5             \tmov    %rsp,%rbp\n   3b23f:\t48 83 ec 20          \tsub    $0x20,%rsp\n   3b243:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   3b247:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   3b24b:\t48 89 c7             \tmov    %rax,%rdi\n   3b24e:\te8 09 5c fc ff       \tcallq  e5c <_ZL13OPER_AY_PD_16P15_m68ki_cpu_core>\n   3b253:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n   3b256:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   3b25a:\t48 89 c7             \tmov    %rax,%rdi\n   3b25d:\te8 d6 51 fc ff       \tcallq  438 <_ZL17m68ki_read_imm_32P15_m68ki_cpu_core>\n   3b262:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n   3b265:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   3b269:\t8b 80 1c 01 00 00    \tmov    0x11c(%rax),%eax\n   3b26f:\t83 c8 01             \tor     $0x1,%eax\n   3b272:\t89 c7                \tmov    %eax,%edi\n   3b274:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n   3b277:\t8b 75 f8             \tmov    -0x8(%rbp),%esi\n   3b27a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   3b27e:\t89 d1                \tmov    %edx,%ecx\n   3b280:\t89 fa                \tmov    %edi,%edx\n   3b282:\t48 89 c7             \tmov    %rax,%rdi\n   3b285:\te8 33 55 fc ff       \tcallq  7bd <_ZL17m68ki_write_16_fcP15_m68ki_cpu_corejjj>\n   3b28a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n   3b28d:\tc1 e8 08             \tshr    $0x8,%eax\n   3b290:\t89 c2                \tmov    %eax,%edx\n   3b292:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   3b296:\t89 90 28 01 00 00    \tmov    %edx,0x128(%rax)\n   3b29c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   3b2a0:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n   3b2a3:\t89 90 2c 01 00 00    \tmov    %edx,0x12c(%rax)\n   3b2a9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   3b2ad:\tc7 80 30 01 00 00 00 \tmovl   $0x0,0x130(%rax)\n   3b2b4:\t00 00 00 \n   3b2b7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   3b2bb:\tc7 80 34 01 00 00 00 \tmovl   $0x0,0x134(%rax)\n   3b2c2:\t00 00 00 \n   3b2c5:\t90                   \tnop\n   3b2c6:\tc9                   \tleaveq \n   3b2c7:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall m68k_op_move_16_al_pd(_DWORD *<span class=\"supfact\">a1</span>) {\n  _DWORD *<span class=\"supfact\">result</span>;\n  unsigned int <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = OPER_AY_PD_16((__int64)<span class=\"supfact\">a1</span>);\n  <span class=\"supfact\">v2</span> = m68ki_read_imm_32((__int64)<span class=\"supfact\">a1</span>);\n  m68ki_write_16_fc((__int64)<span class=\"supfact\">a1</span>, <span class=\"supfact\">v2</span>,\n                    <span class=\"supfact\">a1</span>[Number] | Number, <span class=\"supfact\">v3</span>);\n  <span class=\"supfact\">a1</span>[Number] = <span class=\"supfact\">v3</span> >> Number;\n  <span class=\"supfact\">a1</span>[Number] = <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">a1</span>[Number] = Number;\n  <span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>;\n  <span class=\"supfact\">a1</span>[Number] = Number;\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl m68k_op_move_16_al_pd(m68ki_cpu_core *<span class=\"supfact\">m68k</span>) {\n  UINT32 v1;\n  UINT32 <span class=\"supfact\">res</span>;\n  <span class=\"supfact\">res</span> = OPER_AY_PD_16(<span class=\"supfact\">m68k</span>);\n  v1 = m68ki_read_imm_32(<span class=\"supfact\">m68k</span>);\n  m68ki_write_16_fc(<span class=\"supfact\">m68k</span>, v1,\n                    <span class=\"supfact\">m68k</span>->s_flag | Number, <span class=\"supfact\">res</span>);\n  <span class=\"supfact\">m68k</span>->n_flag = <span class=\"supfact\">res</span> >> Number;\n  <span class=\"supfact\">m68k</span>->not_z_flag = <span class=\"supfact\">res</span>;\n  <span class=\"supfact\">m68k</span>->v_flag = Number;\n  <span class=\"supfact\">m68k</span>->c_flag = Number;\n}", "var": [{"name": "a1", "type": "virtqueue *", "pred_name": "vq", "ref_name": "m68k", "ref_type": "m68ki_cpu_core *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v2", "type": "unsigned int", "pred_name": "v2", "ref_name": "", "ref_type": "disappear"}, {"name": "v3", "type": "unsigned int", "pred_name": "ea", "ref_name": "res", "ref_type": "UINT32"}], "body_in_train": false}, {"repo_owner": "isDerek", "repo_name": "BTC-Device", "path": "isDerek/BTC-Device/9eb5bdb0143a63b31132ea31d83410eefa0b801b31f29f5ffc43fd093e6ca1ae", "path_in_repo": "isDerek/BTC-Device/BTC_APP/middleware/multicore/erpc/Debug/Linux/erpcsniffer/obj/erpcgen/src/types/Type.o", "objdump": "0000000000000000 <_ZSt12__miter_baseIPPN7erpcgen8FunctionEET_S4_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   c:\t5d                   \tpop    %rbp\n   d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n__miter_base<erpcgen Function **>(__int64 <span class=\"supfact\">a1</span>) {\n  return <span class=\"supfact\">a1</span>;\n}", "code_t": "erpcgen Function **__cdecl std\n__miter_base<erpcgen Function **>(erpcgen Function **<span class=\"supfact\">__it</span>) {\n  return <span class=\"supfact\">__it</span>;\n}", "var": [{"name": "a1", "type": "erpcgen::Function * *", "pred_name": "__it", "ref_name": "__it", "ref_type": "erpcgen::Function * *"}], "body_in_train": false}, {"repo_owner": "joostrenes", "repo_name": "web", "path": "joostrenes/web/4c54da1514a53c97595728a59d4ee0787c1ca7104fce40dad058a3a005f7855e", "path_in_repo": "joostrenes/web/software/kummer/cref-kl25519/test/test", "objdump": "0000000000402972 <xDBLADD>:\n  402972:\t55                   \tpush   %rbp\n  402973:\t48 89 e5             \tmov    %rsp,%rbp\n  402976:\t48 81 ec 20 01 00 00 \tsub    $0x120,%rsp\n  40297d:\t48 89 bd f8 fe ff ff \tmov    %rdi,-0x108(%rbp)\n  402984:\t48 89 b5 f0 fe ff ff \tmov    %rsi,-0x110(%rbp)\n  40298b:\t48 89 95 e8 fe ff ff \tmov    %rdx,-0x118(%rbp)\n  402992:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402999:\t48 8d 90 80 00 00 00 \tlea    0x80(%rax),%rdx\n  4029a0:\t48 8b 8d f8 fe ff ff \tmov    -0x108(%rbp),%rcx\n  4029a7:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  4029ab:\t48 89 ce             \tmov    %rcx,%rsi\n  4029ae:\t48 89 c7             \tmov    %rax,%rdi\n  4029b1:\te8 4a f6 ff ff       \tcallq  402000 <fe25519_add>\n  4029b6:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  4029bd:\t48 8d 90 80 00 00 00 \tlea    0x80(%rax),%rdx\n  4029c4:\t48 8b 8d f8 fe ff ff \tmov    -0x108(%rbp),%rcx\n  4029cb:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n  4029d2:\t48 89 ce             \tmov    %rcx,%rsi\n  4029d5:\t48 89 c7             \tmov    %rax,%rdi\n  4029d8:\te8 82 f6 ff ff       \tcallq  40205f <fe25519_sub>\n  4029dd:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  4029e4:\t48 8d 90 80 00 00 00 \tlea    0x80(%rax),%rdx\n  4029eb:\t48 8b 8d f0 fe ff ff \tmov    -0x110(%rbp),%rcx\n  4029f2:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  4029f9:\t48 89 ce             \tmov    %rcx,%rsi\n  4029fc:\t48 89 c7             \tmov    %rax,%rdi\n  4029ff:\te8 fc f5 ff ff       \tcallq  402000 <fe25519_add>\n  402a04:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402a0b:\t48 8d 90 80 00 00 00 \tlea    0x80(%rax),%rdx\n  402a12:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402a19:\t48 8b 8d f8 fe ff ff \tmov    -0x108(%rbp),%rcx\n  402a20:\t48 83 e9 80          \tsub    $0xffffffffffffff80,%rcx\n  402a24:\t48 89 c6             \tmov    %rax,%rsi\n  402a27:\t48 89 cf             \tmov    %rcx,%rdi\n  402a2a:\te8 30 f6 ff ff       \tcallq  40205f <fe25519_sub>\n  402a2f:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402a36:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n  402a3a:\t48 89 d6             \tmov    %rdx,%rsi\n  402a3d:\t48 89 c7             \tmov    %rax,%rdi\n  402a40:\te8 7f f8 ff ff       \tcallq  4022c4 <fe25519_square>\n  402a45:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402a4c:\t48 8d 90 80 00 00 00 \tlea    0x80(%rax),%rdx\n  402a53:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n  402a5a:\t48 89 c6             \tmov    %rax,%rsi\n  402a5d:\t48 89 d7             \tmov    %rdx,%rdi\n  402a60:\te8 5f f8 ff ff       \tcallq  4022c4 <fe25519_square>\n  402a65:\t48 8b 95 f8 fe ff ff \tmov    -0x108(%rbp),%rdx\n  402a6c:\t48 8d 4d 80          \tlea    -0x80(%rbp),%rcx\n  402a70:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  402a74:\t48 89 ce             \tmov    %rcx,%rsi\n  402a77:\t48 89 c7             \tmov    %rax,%rdi\n  402a7a:\te8 1d f7 ff ff       \tcallq  40219c <fe25519_mul>\n  402a7f:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402a86:\t48 8d 90 80 00 00 00 \tlea    0x80(%rax),%rdx\n  402a8d:\t48 8d 8d 00 ff ff ff \tlea    -0x100(%rbp),%rcx\n  402a94:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n  402a9b:\t48 89 ce             \tmov    %rcx,%rsi\n  402a9e:\t48 89 c7             \tmov    %rax,%rdi\n  402aa1:\te8 f6 f6 ff ff       \tcallq  40219c <fe25519_mul>\n  402aa6:\t48 8b b5 f0 fe ff ff \tmov    -0x110(%rbp),%rsi\n  402aad:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402ab4:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  402ab9:\tba 4d 00 00 00       \tmov    $0x4d,%edx\n  402abe:\t48 89 c7             \tmov    %rax,%rdi\n  402ac1:\te8 67 f6 ff ff       \tcallq  40212d <fe25519_mulconst>\n  402ac6:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402acd:\t48 8d b0 80 00 00 00 \tlea    0x80(%rax),%rsi\n  402ad4:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402adb:\t48 83 e8 80          \tsub    $0xffffffffffffff80,%rax\n  402adf:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  402ae4:\tba 52 00 00 00       \tmov    $0x52,%edx\n  402ae9:\t48 89 c7             \tmov    %rax,%rdi\n  402aec:\te8 3c f6 ff ff       \tcallq  40212d <fe25519_mulconst>\n  402af1:\t48 8d 75 80          \tlea    -0x80(%rbp),%rsi\n  402af5:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  402af9:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  402afe:\tba 4d 00 00 00       \tmov    $0x4d,%edx\n  402b03:\t48 89 c7             \tmov    %rax,%rdi\n  402b06:\te8 22 f6 ff ff       \tcallq  40212d <fe25519_mulconst>\n  402b0b:\t48 8d b5 00 ff ff ff \tlea    -0x100(%rbp),%rsi\n  402b12:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n  402b19:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  402b1e:\tba 52 00 00 00       \tmov    $0x52,%edx\n  402b23:\t48 89 c7             \tmov    %rax,%rdi\n  402b26:\te8 02 f6 ff ff       \tcallq  40212d <fe25519_mulconst>\n  402b2b:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402b32:\t48 8d 90 80 00 00 00 \tlea    0x80(%rax),%rdx\n  402b39:\t48 8b 8d f8 fe ff ff \tmov    -0x108(%rbp),%rcx\n  402b40:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402b47:\t48 89 ce             \tmov    %rcx,%rsi\n  402b4a:\t48 89 c7             \tmov    %rax,%rdi\n  402b4d:\te8 ae f4 ff ff       \tcallq  402000 <fe25519_add>\n  402b52:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402b59:\t48 8d 90 80 00 00 00 \tlea    0x80(%rax),%rdx\n  402b60:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402b67:\t48 8b 8d f0 fe ff ff \tmov    -0x110(%rbp),%rcx\n  402b6e:\t48 83 e9 80          \tsub    $0xffffffffffffff80,%rcx\n  402b72:\t48 89 c6             \tmov    %rax,%rsi\n  402b75:\t48 89 cf             \tmov    %rcx,%rdi\n  402b78:\te8 e2 f4 ff ff       \tcallq  40205f <fe25519_sub>\n  402b7d:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402b84:\t48 8d 95 00 ff ff ff \tlea    -0x100(%rbp),%rdx\n  402b8b:\t48 8d 4d 80          \tlea    -0x80(%rbp),%rcx\n  402b8f:\t48 89 ce             \tmov    %rcx,%rsi\n  402b92:\t48 89 c7             \tmov    %rax,%rdi\n  402b95:\te8 66 f4 ff ff       \tcallq  402000 <fe25519_add>\n  402b9a:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402ba1:\t48 8d 88 80 00 00 00 \tlea    0x80(%rax),%rcx\n  402ba8:\t48 8d 95 00 ff ff ff \tlea    -0x100(%rbp),%rdx\n  402baf:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  402bb3:\t48 89 c6             \tmov    %rax,%rsi\n  402bb6:\t48 89 cf             \tmov    %rcx,%rdi\n  402bb9:\te8 a1 f4 ff ff       \tcallq  40205f <fe25519_sub>\n  402bbe:\t48 8b 95 f0 fe ff ff \tmov    -0x110(%rbp),%rdx\n  402bc5:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  402bc9:\t48 89 d6             \tmov    %rdx,%rsi\n  402bcc:\t48 89 c7             \tmov    %rax,%rdi\n  402bcf:\te8 f0 f6 ff ff       \tcallq  4022c4 <fe25519_square>\n  402bd4:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402bdb:\t48 8d 90 80 00 00 00 \tlea    0x80(%rax),%rdx\n  402be2:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n  402be9:\t48 89 d6             \tmov    %rdx,%rsi\n  402bec:\t48 89 c7             \tmov    %rax,%rdi\n  402bef:\te8 d0 f6 ff ff       \tcallq  4022c4 <fe25519_square>\n  402bf4:\t48 8b 95 f8 fe ff ff \tmov    -0x108(%rbp),%rdx\n  402bfb:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402c02:\t48 89 d6             \tmov    %rdx,%rsi\n  402c05:\t48 89 c7             \tmov    %rax,%rdi\n  402c08:\te8 b7 f6 ff ff       \tcallq  4022c4 <fe25519_square>\n  402c0d:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402c14:\t48 8d 90 80 00 00 00 \tlea    0x80(%rax),%rdx\n  402c1b:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402c22:\t48 83 e8 80          \tsub    $0xffffffffffffff80,%rax\n  402c26:\t48 89 d6             \tmov    %rdx,%rsi\n  402c29:\t48 89 c7             \tmov    %rax,%rdi\n  402c2c:\te8 93 f6 ff ff       \tcallq  4022c4 <fe25519_square>\n  402c31:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402c38:\t48 8d 75 80          \tlea    -0x80(%rbp),%rsi\n  402c3c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  402c41:\tba 05 00 00 00       \tmov    $0x5,%edx\n  402c46:\t48 89 c7             \tmov    %rax,%rdi\n  402c49:\te8 df f4 ff ff       \tcallq  40212d <fe25519_mulconst>\n  402c4e:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n  402c55:\t48 8d b8 80 00 00 00 \tlea    0x80(%rax),%rdi\n  402c5c:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n  402c63:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  402c68:\tba 9f 00 00 00       \tmov    $0x9f,%edx\n  402c6d:\t48 89 c6             \tmov    %rax,%rsi\n  402c70:\te8 b8 f4 ff ff       \tcallq  40212d <fe25519_mulconst>\n  402c75:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402c7c:\t48 8d b0 80 00 00 00 \tlea    0x80(%rax),%rsi\n  402c83:\t48 8b 85 f0 fe ff ff \tmov    -0x110(%rbp),%rax\n  402c8a:\t48 8d 88 80 00 00 00 \tlea    0x80(%rax),%rcx\n  402c91:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n  402c98:\t48 89 c2             \tmov    %rax,%rdx\n  402c9b:\t48 89 cf             \tmov    %rcx,%rdi\n  402c9e:\te8 f9 f4 ff ff       \tcallq  40219c <fe25519_mul>\n  402ca3:\t90                   \tnop\n  402ca4:\tc9                   \tleaveq \n  402ca5:\tc3                   \tretq   ", "code_s": "void __fastcall xDBLADD(_DWORD *<span class=\"supfact\">a1</span>, _DWORD *<span class=\"supfact\">a2</span>,\n                        __int64 <span class=\"supfact\">a3</span>) {\n  _DWORD <span class=\"supfact\">v6</span>[Number];\n  _DWORD <span class=\"supfact\">v7</span>[Number];\n  fe25519_add(<span class=\"supfact\">v7</span>, (__int64)<span class=\"supfact\">a1</span>,\n              (__int64)(<span class=\"supfact\">a1</span> + Number));\n  fe25519_sub(<span class=\"supfact\">v6</span>, <span class=\"supfact\">a1</span>,\n              (__int64)(<span class=\"supfact\">a1</span> + Number));\n  fe25519_add(<span class=\"supfact\">a1</span>, (__int64)<span class=\"supfact\">a2</span>,\n              (__int64)(<span class=\"supfact\">a2</span> + Number));\n  fe25519_sub(<span class=\"supfact\">a1</span> + Number, <span class=\"supfact\">a2</span>,\n              (__int64)(<span class=\"supfact\">a2</span> + Number));\n  fe25519_square(<span class=\"supfact\">a2</span>, (__int64)<span class=\"supfact\">v7</span>);\n  fe25519_square(<span class=\"supfact\">a2</span> + Number, (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_mul(<span class=\"supfact\">v7</span>, (__int64)<span class=\"supfact\">v7</span>,\n              (__int64)<span class=\"supfact\">a1</span>);\n  fe25519_mul(<span class=\"supfact\">v6</span>, (__int64)<span class=\"supfact\">v6</span>,\n              (__int64)(<span class=\"supfact\">a1</span> + Number));\n  fe25519_mulconst((__int64)<span class=\"supfact\">a1</span>, (__int64)<span class=\"supfact\">a2</span>,\n                   Number, Number);\n  fe25519_mulconst((__int64)(<span class=\"supfact\">a1</span> + Number),\n                   (__int64)(<span class=\"supfact\">a2</span> + Number), Number, Number);\n  fe25519_mulconst((__int64)<span class=\"supfact\">v7</span>, (__int64)<span class=\"supfact\">v7</span>,\n                   Number, Number);\n  fe25519_mulconst((__int64)<span class=\"supfact\">v6</span>, (__int64)<span class=\"supfact\">v6</span>,\n                   Number, Number);\n  fe25519_add(<span class=\"supfact\">a2</span>, (__int64)<span class=\"supfact\">a1</span>,\n              (__int64)(<span class=\"supfact\">a1</span> + Number));\n  fe25519_sub(<span class=\"supfact\">a2</span> + Number, <span class=\"supfact\">a1</span>,\n              (__int64)(<span class=\"supfact\">a1</span> + Number));\n  fe25519_add(<span class=\"supfact\">a1</span>, (__int64)<span class=\"supfact\">v7</span>,\n              (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_sub(<span class=\"supfact\">a1</span> + Number, <span class=\"supfact\">v7</span>,\n              (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v7</span>, (__int64)<span class=\"supfact\">a2</span>);\n  fe25519_square(<span class=\"supfact\">v6</span>, (__int64)(<span class=\"supfact\">a2</span> + Number));\n  fe25519_square(<span class=\"supfact\">a2</span>, (__int64)<span class=\"supfact\">a1</span>);\n  fe25519_square(<span class=\"supfact\">a2</span> + Number,\n                 (__int64)(<span class=\"supfact\">a1</span> + Number));\n  fe25519_mulconst((__int64)<span class=\"supfact\">a1</span>, (__int64)<span class=\"supfact\">v7</span>,\n                   Number, Number);\n  fe25519_mulconst((__int64)(<span class=\"supfact\">a1</span> + Number),\n                   (__int64)<span class=\"supfact\">v6</span>, Number, Number);\n  fe25519_mul(<span class=\"supfact\">a2</span> + Number,\n              (__int64)(<span class=\"supfact\">a2</span> + Number), <span class=\"supfact\">a3</span>);\n}", "code_t": "void __cdecl xDBLADD(ecp *<span class=\"supfact\">xp</span>, ecp *<span class=\"supfact\">xq</span>,\n                     const fe25519 *<span class=\"supfact\">xd</span>) {\n  fe25519 <span class=\"supfact\">b1</span>;\n  fe25519 <span class=\"supfact\">b0</span>;\n  fe25519_add(&<span class=\"supfact\">b0</span>, &<span class=\"supfact\">xp</span>->X,\n              &<span class=\"supfact\">xp</span>->Z);\n  fe25519_sub(&<span class=\"supfact\">b1</span>, &<span class=\"supfact\">xp</span>->X,\n              &<span class=\"supfact\">xp</span>->Z);\n  fe25519_add(&<span class=\"supfact\">xp</span>->X, &<span class=\"supfact\">xq</span>->X,\n              &<span class=\"supfact\">xq</span>->Z);\n  fe25519_sub(&<span class=\"supfact\">xp</span>->Z, &<span class=\"supfact\">xq</span>->X,\n              &<span class=\"supfact\">xq</span>->Z);\n  fe25519_square(&<span class=\"supfact\">xq</span>->X, &<span class=\"supfact\">b0</span>);\n  fe25519_square(&<span class=\"supfact\">xq</span>->Z, &<span class=\"supfact\">b1</span>);\n  fe25519_mul(&<span class=\"supfact\">b0</span>, &<span class=\"supfact\">b0</span>, &<span class=\"supfact\">xp</span>->X);\n  fe25519_mul(&<span class=\"supfact\">b1</span>, &<span class=\"supfact\">b1</span>, &<span class=\"supfact\">xp</span>->Z);\n  fe25519_mulconst(&<span class=\"supfact\">xp</span>->X, &<span class=\"supfact\">xq</span>->X, Number,\n                   Number);\n  fe25519_mulconst(&<span class=\"supfact\">xp</span>->Z, &<span class=\"supfact\">xq</span>->Z, Number,\n                   Number);\n  fe25519_mulconst(&<span class=\"supfact\">b0</span>, &<span class=\"supfact\">b0</span>, Number, Number);\n  fe25519_mulconst(&<span class=\"supfact\">b1</span>, &<span class=\"supfact\">b1</span>, Number, Number);\n  fe25519_add(&<span class=\"supfact\">xq</span>->X, &<span class=\"supfact\">xp</span>->X,\n              &<span class=\"supfact\">xp</span>->Z);\n  fe25519_sub(&<span class=\"supfact\">xq</span>->Z, &<span class=\"supfact\">xp</span>->X,\n              &<span class=\"supfact\">xp</span>->Z);\n  fe25519_add(&<span class=\"supfact\">xp</span>->X, &<span class=\"supfact\">b0</span>, &<span class=\"supfact\">b1</span>);\n  fe25519_sub(&<span class=\"supfact\">xp</span>->Z, &<span class=\"supfact\">b0</span>, &<span class=\"supfact\">b1</span>);\n  fe25519_square(&<span class=\"supfact\">b0</span>, &<span class=\"supfact\">xq</span>->X);\n  fe25519_square(&<span class=\"supfact\">b1</span>, &<span class=\"supfact\">xq</span>->Z);\n  fe25519_square(&<span class=\"supfact\">xq</span>->X, &<span class=\"supfact\">xp</span>->X);\n  fe25519_square(&<span class=\"supfact\">xq</span>->Z, &<span class=\"supfact\">xp</span>->Z);\n  fe25519_mulconst(&<span class=\"supfact\">xp</span>->X, &<span class=\"supfact\">b0</span>, Number, Number);\n  fe25519_mulconst(&<span class=\"supfact\">xp</span>->Z, &<span class=\"supfact\">b1</span>, Number, Number);\n  fe25519_mul(&<span class=\"supfact\">xq</span>->Z, &<span class=\"supfact\">xq</span>->Z,\n              <span class=\"supfact\">xd</span>);\n}", "var": [{"name": "a1", "type": "ecp *", "pred_name": "r", "ref_name": "xp", "ref_type": "ecp *"}, {"name": "a2", "type": "ecp *", "pred_name": "d2", "ref_name": "xq", "ref_type": "ecp *"}, {"name": "a3", "type": "disappear", "pred_name": "", "ref_name": "xd", "ref_type": "const fe25519 *"}, {"name": "v6", "type": "int[32]", "pred_name": "__unk__", "ref_name": "b1", "ref_type": "struct fe25519 { crypto_uint32[32] v; }"}, {"name": "v7", "type": "int[32]", "pred_name": "__unk__", "ref_name": "b0", "ref_type": "struct fe25519 { crypto_uint32[32] v; }"}], "body_in_train": false}, {"repo_owner": "SymbianSource", "repo_name": "oss.FCL.interim.QEMU", "path": "SymbianSource/oss.FCL.interim.QEMU/378f4318ffb8153f8ce6342c15754d7a510cdaeddd0d3b2fafcf89751c925444", "path_in_repo": "SymbianSource/oss.FCL.interim.QEMU/symbian-qemu-0.9.1-12/qemu-symbian-svp/cris-linux-user/main.o", "objdump": "00000000000000dd <cpu_outw>:\n      dd:\t55                   \tpush   %rbp\n      de:\t48 89 e5             \tmov    %rsp,%rbp\n      e1:\t48 83 ec 10          \tsub    $0x10,%rsp\n      e5:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n      e9:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n      ec:\t89 55 f0             \tmov    %edx,-0x10(%rbp)\n      ef:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f6 <cpu_outw+0x19>\n      f6:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n      f9:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n      fc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     101:\t48 89 c7             \tmov    %rax,%rdi\n     104:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     109:\te8 00 00 00 00       \tcallq  10e <cpu_outw+0x31>\n     10e:\t90                   \tnop\n     10f:\tc9                   \tleaveq \n     110:\tc3                   \tretq   ", "code_s": "int __fastcall cpu_outw(__int64 <span class=\"supfact\">a1</span>,\n                        unsigned int <span class=\"supfact\">a2</span>,\n                        unsigned int <span class=\"supfact\">a3</span>) {\n  return fprintf(stderr, String, <span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>);\n}", "code_t": "void __cdecl cpu_outw(CPUCRISState_0 *<span class=\"supfact\">env</span>,\n                      int <span class=\"supfact\">addr</span>, int <span class=\"supfact\">val</span>) {\n  fprintf(stderr, String, (unsigned int)<span class=\"supfact\">addr</span>,\n          (unsigned int)<span class=\"supfact\">val</span>);\n}", "var": [{"name": "a1", "type": "void *", "pred_name": "opaque", "ref_name": "env", "ref_type": "CPUCRISState_0 *"}, {"name": "a2", "type": "uint32_t", "pred_name": "addr", "ref_name": "addr", "ref_type": "int"}, {"name": "a3", "type": "uint32_t", "pred_name": "val", "ref_name": "val", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "lixuewei", "repo_name": "rt-n56u", "path": "lixuewei/rt-n56u/38349714616a43b8927cd9e1485b4d6547dafaf08db61e8f96818df5fbdd5906", "path_in_repo": "lixuewei/rt-n56u/trunk/user/ntfs-3g/ntfsprogs-2014.2.15/ntfsprogs/ntfscluster", "objdump": "0000000000430415 <setsecurityattr>:\n  430415:\t55                   \tpush   %rbp\n  430416:\t48 89 e5             \tmov    %rsp,%rbp\n  430419:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n  430420:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n  430424:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n  430428:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n  43042f:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  430436:\t89 c2                \tmov    %eax,%edx\n  430438:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  43043c:\t89 d6                \tmov    %edx,%esi\n  43043e:\t48 89 c7             \tmov    %rax,%rdi\n  430441:\te8 7f f6 ff ff       \tcallq  42fac5 <ntfs_security_hash>\n  430446:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  430449:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  430450:\t00 \n  430451:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n  430458:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  43045f:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  430463:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n  43046a:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  43046e:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  430472:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n  430479:\t48 85 c0             \ttest   %rax,%rax\n  43047c:\t0f 84 84 02 00 00    \tje     430706 <setsecurityattr+0x2f1>\n  430482:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  430487:\t0f 84 79 02 00 00    \tje     430706 <setsecurityattr+0x2f1>\n  43048d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  430491:\t8b 80 c0 00 00 00    \tmov    0xc0(%rax),%eax\n  430497:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  43049a:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n  43049e:\t89 8a c0 00 00 00    \tmov    %ecx,0xc0(%rdx)\n  4304a4:\t85 c0                \ttest   %eax,%eax\n  4304a6:\t0f 85 5a 02 00 00    \tjne    430706 <setsecurityattr+0x2f1>\n  4304ac:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4304b0:\t48 89 c7             \tmov    %rax,%rdi\n  4304b3:\te8 9c cb fe ff       \tcallq  41d054 <ntfs_index_ctx_reinit>\n  4304b8:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  4304bb:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n  4304be:\tc7 45 9c 00 00 00 00 \tmovl   $0x0,-0x64(%rbp)\n  4304c5:\te8 86 1b fd ff       \tcallq  402050 <__errno_location@plt>\n  4304ca:\t8b 00                \tmov    (%rax),%eax\n  4304cc:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n  4304cf:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4304d3:\t48 8d 45 98          \tlea    -0x68(%rbp),%rax\n  4304d7:\tbe 08 00 00 00       \tmov    $0x8,%esi\n  4304dc:\t48 89 c7             \tmov    %rax,%rdi\n  4304df:\te8 ef d8 fe ff       \tcallq  41ddd3 <ntfs_index_lookup>\n  4304e4:\t85 c0                \ttest   %eax,%eax\n  4304e6:\t0f 94 c0             \tsete   %al\n  4304e9:\t0f b6 c0             \tmovzbl %al,%eax\n  4304ec:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4304ef:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4304f3:\t75 3b                \tjne    430530 <setsecurityattr+0x11b>\n  4304f5:\te8 56 1b fd ff       \tcallq  402050 <__errno_location@plt>\n  4304fa:\t8b 00                \tmov    (%rax),%eax\n  4304fc:\t83 f8 02             \tcmp    $0x2,%eax\n  4304ff:\t74 2f                \tje     430530 <setsecurityattr+0x11b>\n  430501:\t41 b9 46 8e 44 00    \tmov    $0x448e46,%r9d\n  430507:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  43050d:\tb9 00 01 00 00       \tmov    $0x100,%ecx\n  430512:\tba 49 03 00 00       \tmov    $0x349,%edx\n  430517:\tbe cc 8d 44 00       \tmov    $0x448dcc,%esi\n  43051c:\tbf 80 91 44 00       \tmov    $0x449180,%edi\n  430521:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  430526:\te8 98 4c ff ff       \tcallq  4251c3 <ntfs_log_redirect>\n  43052b:\te9 d6 01 00 00       \tjmpq   430706 <setsecurityattr+0x2f1>\n  430530:\te8 1b 1b fd ff       \tcallq  402050 <__errno_location@plt>\n  430535:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  430538:\t89 10                \tmov    %edx,(%rax)\n  43053a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  43053e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  430542:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  430546:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  43054d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  430551:\t0f b7 40 0c          \tmovzwl 0xc(%rax),%eax\n  430555:\t0f b7 c0             \tmovzwl %ax,%eax\n  430558:\t83 e0 02             \tand    $0x2,%eax\n  43055b:\t85 c0                \ttest   %eax,%eax\n  43055d:\t74 17                \tje     430576 <setsecurityattr+0x161>\n  43055f:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  430563:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  430567:\t48 89 d6             \tmov    %rdx,%rsi\n  43056a:\t48 89 c7             \tmov    %rax,%rdi\n  43056d:\te8 35 02 ff ff       \tcallq  4207a7 <ntfs_index_next>\n  430572:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  430576:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  43057d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  430581:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  430585:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n  43058a:\t74 13                \tje     43059f <setsecurityattr+0x18a>\n  43058c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  430590:\t8b 40 28             \tmov    0x28(%rax),%eax\n  430593:\t89 c0                \tmov    %eax,%eax\n  430595:\t48 83 e8 14          \tsub    $0x14,%rax\n  430599:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  43059d:\teb 08                \tjmp    4305a7 <setsecurityattr+0x192>\n  43059f:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  4305a6:\t00 \n  4305a7:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n  4305ac:\t0f 84 fb 00 00 00    \tje     4306ad <setsecurityattr+0x298>\n  4305b2:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  4305b7:\t0f 84 f0 00 00 00    \tje     4306ad <setsecurityattr+0x298>\n  4305bd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4305c1:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4305c4:\t39 45 d8             \tcmp    %eax,-0x28(%rbp)\n  4305c7:\t0f 85 e0 00 00 00    \tjne    4306ad <setsecurityattr+0x298>\n  4305cd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4305d1:\t8b 40 24             \tmov    0x24(%rax),%eax\n  4305d4:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n  4305d7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4305db:\t8b 40 20             \tmov    0x20(%rax),%eax\n  4305de:\t89 45 a0             \tmov    %eax,-0x60(%rbp)\n  4305e1:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  4305e5:\t48 83 c0 14          \tadd    $0x14,%rax\n  4305e9:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  4305ed:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4305f1:\t48 89 c7             \tmov    %rax,%rdi\n  4305f4:\te8 0e 8e ff ff       \tcallq  429407 <ntfs_malloc>\n  4305f9:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4305fd:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  430602:\t0f 84 9e 00 00 00    \tje     4306a6 <setsecurityattr+0x291>\n  430608:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  43060c:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n  430613:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n  430617:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  43061b:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  43061f:\t49 89 f1             \tmov    %rsi,%r9\n  430622:\t49 89 c8             \tmov    %rcx,%r8\n  430625:\t48 89 d1             \tmov    %rdx,%rcx\n  430628:\tba 04 00 00 00       \tmov    $0x4,%edx\n  43062d:\tbe 00 33 45 00       \tmov    $0x453300,%esi\n  430632:\t48 89 c7             \tmov    %rax,%rdi\n  430635:\te8 37 1e fe ff       \tcallq  412471 <ntfs_attr_data_read>\n  43063a:\t48 98                \tcltq   \n  43063c:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n  430640:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  430644:\t48 3b 45 f0          \tcmp    -0x10(%rbp),%rax\n  430648:\t75 22                \tjne    43066c <setsecurityattr+0x257>\n  43064a:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  43064e:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n  430652:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  430656:\t48 89 ce             \tmov    %rcx,%rsi\n  430659:\t48 89 c7             \tmov    %rax,%rdi\n  43065c:\te8 9f 1b fd ff       \tcallq  402200 <memcmp@plt>\n  430661:\t85 c0                \ttest   %eax,%eax\n  430663:\t75 07                \tjne    43066c <setsecurityattr+0x257>\n  430665:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  43066a:\teb 05                \tjmp    430671 <setsecurityattr+0x25c>\n  43066c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  430671:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  430674:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  430678:\t48 89 c7             \tmov    %rax,%rdi\n  43067b:\te8 b0 19 fd ff       \tcallq  402030 <free@plt>\n  430680:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  430684:\t75 27                \tjne    4306ad <setsecurityattr+0x298>\n  430686:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  43068a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  43068e:\t48 89 d6             \tmov    %rdx,%rsi\n  430691:\t48 89 c7             \tmov    %rax,%rdi\n  430694:\te8 0e 01 ff ff       \tcallq  4207a7 <ntfs_index_next>\n  430699:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  43069d:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  4306a4:\teb 07                \tjmp    4306ad <setsecurityattr+0x298>\n  4306a6:\tc7 45 ec 0c 00 00 00 \tmovl   $0xc,-0x14(%rbp)\n  4306ad:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  4306b1:\t74 0b                \tje     4306be <setsecurityattr+0x2a9>\n  4306b3:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  4306b8:\t0f 85 b8 fe ff ff    \tjne    430576 <setsecurityattr+0x161>\n  4306be:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4306c2:\t74 0c                \tje     4306d0 <setsecurityattr+0x2bb>\n  4306c4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4306c8:\t8b 40 14             \tmov    0x14(%rax),%eax\n  4306cb:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  4306ce:\teb 36                \tjmp    430706 <setsecurityattr+0x2f1>\n  4306d0:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  4306d4:\t74 13                \tje     4306e9 <setsecurityattr+0x2d4>\n  4306d6:\te8 75 19 fd ff       \tcallq  402050 <__errno_location@plt>\n  4306db:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4306de:\t89 10                \tmov    %edx,(%rax)\n  4306e0:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n  4306e7:\teb 1d                \tjmp    430706 <setsecurityattr+0x2f1>\n  4306e9:\t8b 4d d8             \tmov    -0x28(%rbp),%ecx\n  4306ec:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n  4306f3:\t48 8b 75 80          \tmov    -0x80(%rbp),%rsi\n  4306f7:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4306fb:\t48 89 c7             \tmov    %rax,%rdi\n  4306fe:\te8 53 f8 ff ff       \tcallq  42ff56 <entersecurityattr>\n  430703:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  430706:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  43070a:\t8b 80 c0 00 00 00    \tmov    0xc0(%rax),%eax\n  430710:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  430713:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  430717:\t89 90 c0 00 00 00    \tmov    %edx,0xc0(%rax)\n  43071d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  430721:\t8b 80 c0 00 00 00    \tmov    0xc0(%rax),%eax\n  430727:\t85 c0                \ttest   %eax,%eax\n  430729:\t74 2a                \tje     430755 <setsecurityattr+0x340>\n  43072b:\t41 b9 68 8e 44 00    \tmov    $0x448e68,%r9d\n  430731:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  430737:\tb9 00 01 00 00       \tmov    $0x100,%ecx\n  43073c:\tba 8b 03 00 00       \tmov    $0x38b,%edx\n  430741:\tbe cc 8d 44 00       \tmov    $0x448dcc,%esi\n  430746:\tbf 80 91 44 00       \tmov    $0x449180,%edi\n  43074b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  430750:\te8 6e 4a ff ff       \tcallq  4251c3 <ntfs_log_redirect>\n  430755:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  430758:\tc9                   \tleaveq \n  430759:\tc3                   \tretq   ", "code_s": "__int64 __fastcall setsecurityattr(__int64 <span class=\"supfact\">a1</span>,\n                                   int *<span class=\"supfact\">a2</span>,\n                                   size_t <span class=\"supfact\">a3</span>) {\n  int v3;\n  int v4;\n  _BOOL4 v5;\n  int <span class=\"supfact\">v8</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  void *<span class=\"supfact\">s1</span>;\n  int <span class=\"supfact\">v16</span>;\n  unsigned int <span class=\"supfact\">v17</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  int <span class=\"supfact\">v19</span>;\n  size_t <span class=\"supfact\">n</span>;\n  int <span class=\"supfact\">v21</span>;\n  _BOOL4 <span class=\"supfact\">v22</span>;\n  <span class=\"supfact\">v16</span> =\n      ntfs_security_hash(<span class=\"supfact\">a2</span>, <span class=\"supfact\">a3</span>);\n  <span class=\"supfact\">s1</span> = Number L;\n  <span class=\"supfact\">v17</span> = Number;\n  <span class=\"supfact\">v19</span> = Number;\n  <span class=\"supfact\">v14</span> = *(_QWORD *)(<span class=\"supfact\">a1</span> + Number);\n  if (*(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    if (<span class=\"supfact\">v14</span>) {\n      v3 = *(_DWORD *)(<span class=\"supfact\">a1</span> + Number);\n      *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) = v3 + Number;\n      if (!v3) {\n        ntfs_index_ctx_reinit(<span class=\"supfact\">v14</span>);\n        <span class=\"supfact\">v8</span>[Number] = <span class=\"supfact\">v16</span>;\n        <span class=\"supfact\">v8</span>[Number] = Number;\n        <span class=\"supfact\">v13</span> = *__errno_location();\n        v4 = ntfs_index_lookup((__int64)<span class=\"supfact\">v8</span>, Number,\n                               <span class=\"supfact\">v14</span>);\n        <span class=\"supfact\">v22</span> = v4 == Number;\n        if (!v4 || *__errno_location() == Number) {\n          *__errno_location() = <span class=\"supfact\">v13</span>;\n          <span class=\"supfact\">v18</span> = *(_QWORD *)(<span class=\"supfact\">v14</span> + Number);\n          <span class=\"supfact\">v22</span> = Number;\n          if ((*(_WORD *)(<span class=\"supfact\">v18</span> + Number) & Number) != Number)\n            <span class=\"supfact\">v18</span> =\n                ntfs_index_next(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v14</span>);\n          do {\n            <span class=\"supfact\">v21</span> = Number;\n            <span class=\"supfact\">v12</span> = <span class=\"supfact\">v18</span>;\n            if (<span class=\"supfact\">v18</span>)\n              <span class=\"supfact\">n</span> =\n                  *(unsigned int *)(<span class=\"supfact\">v12</span> + Number) - Number L;\n            else\n              <span class=\"supfact\">n</span> = Number L;\n            if (<span class=\"supfact\">v12</span> && <span class=\"supfact\">n</span> &&\n                <span class=\"supfact\">v16</span> ==\n                    *(_DWORD *)(<span class=\"supfact\">v12</span> + Number)) {\n              <span class=\"supfact\">v9</span> = *(_QWORD *)(<span class=\"supfact\">v12</span> + Number);\n              <span class=\"supfact\">v11</span> = <span class=\"supfact\">v9</span> + Number;\n              <span class=\"supfact\">s1</span> = ntfs_malloc(<span class=\"supfact\">n</span>);\n              if (<span class=\"supfact\">s1</span>) {\n                <span class=\"supfact\">v10</span> = (int)ntfs_attr_data_read(\n                    *(_QWORD **)(<span class=\"supfact\">a1</span> + Number), STREAM_SDS,\n                    Number, (__int64)<span class=\"supfact\">s1</span>, <span class=\"supfact\">n</span>,\n                    <span class=\"supfact\">v11</span>);\n                v5 = <span class=\"supfact\">v10</span> == <span class=\"supfact\">n</span> &&\n                     !memcmp(<span class=\"supfact\">s1</span>, <span class=\"supfact\">a2</span>,\n                             <span class=\"supfact\">n</span>);\n                <span class=\"supfact\">v22</span> = v5;\n                free(<span class=\"supfact\">s1</span>);\n                if (!<span class=\"supfact\">v22</span>) {\n                  <span class=\"supfact\">v18</span> =\n                      ntfs_index_next(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v14</span>);\n                  <span class=\"supfact\">v21</span> = Number;\n                }\n              } else {\n                <span class=\"supfact\">v19</span> = Number;\n              }\n            }\n          } while (<span class=\"supfact\">v21</span> && <span class=\"supfact\">v18</span>);\n          if (<span class=\"supfact\">v22</span>) {\n            <span class=\"supfact\">v17</span> = *(_DWORD *)(<span class=\"supfact\">v12</span> + Number);\n          } else if (<span class=\"supfact\">v19</span>) {\n            *__errno_location() = <span class=\"supfact\">v19</span>;\n            <span class=\"supfact\">v17</span> = Number;\n          } else {\n            <span class=\"supfact\">v17</span> =\n                entersecurityattr(<span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>,\n                                  <span class=\"supfact\">a3</span>, <span class=\"supfact\">v16</span>);\n          }\n        } else {\n          ntfs_log_redirect((__int64)String, (__int64)String, Number, Number,\n                            Number L, (__int64)String);\n        }\n      }\n    }\n  }\n  if (--*(_DWORD *)(<span class=\"supfact\">a1</span> + Number))\n    ntfs_log_redirect((__int64)String, (__int64)String, Number, Number,\n                      Number L, (__int64)String);\n  return <span class=\"supfact\">v17</span>;\n}", "code_t": "le32 __cdecl setsecurityattr(\n    ntfs_volume *<span class=\"supfact\">vol</span>,\n    const SECURITY_DESCRIPTOR_RELATIVE *<span class=\"supfact\">attr</span>,\n    s64 <span class=\"supfact\">attrsz</span>) {\n  int v3;\n  int v4;\n  BOOL v5;\n  SDH_INDEX_KEY <span class=\"supfact\">key</span>;\n  setsecurityattr $3A29FE47464F3577C5C3643FFF1922DD <span class=\"supfact\">realign</span>;\n  size_t <span class=\"supfact\">rdsize</span>;\n  s64 <span class=\"supfact\">offs</span>;\n  SDH *<span class=\"supfact\">psdh</span>;\n  int <span class=\"supfact\">olderrno</span>;\n  ntfs_index_context *<span class=\"supfact\">xsdh</span>;\n  char *<span class=\"supfact\">oldattr</span>;\n  le32 <span class=\"supfact\">hash</span>;\n  le32 <span class=\"supfact\">securid</span>;\n  INDEX_ENTRY *<span class=\"supfact\">entry</span>;\n  int <span class=\"supfact\">res</span>;\n  size_t <span class=\"supfact\">size</span>;\n  BOOL <span class=\"supfact\">collision</span>;\n  BOOL <span class=\"supfact\">found</span>;\n  <span class=\"supfact\">hash</span> =\n      ntfs_security_hash(<span class=\"supfact\">attr</span>, <span class=\"supfact\">attrsz</span>);\n  <span class=\"supfact\">oldattr</span> = Number L;\n  <span class=\"supfact\">securid</span> = Number;\n  <span class=\"supfact\">res</span> = Number;\n  <span class=\"supfact\">xsdh</span> = <span class=\"supfact\">vol</span>->secure_xsdh;\n  if (<span class=\"supfact\">vol</span>->secure_ni) {\n    if (<span class=\"supfact\">xsdh</span>) {\n      v3 = <span class=\"supfact\">vol</span>->secure_reentry;\n      <span class=\"supfact\">vol</span>->secure_reentry = v3 + Number;\n      if (!v3) {\n        ntfs_index_ctx_reinit(<span class=\"supfact\">xsdh</span>);\n        <span class=\"supfact\">key</span>.<span class=\"supfact\">hash</span> = <span class=\"supfact\">hash</span>;\n        <span class=\"supfact\">key</span>.security_id = Number;\n        <span class=\"supfact\">olderrno</span> = *__errno_location();\n        v4 = ntfs_index_lookup(&<span class=\"supfact\">key</span>, Number,\n                               <span class=\"supfact\">xsdh</span>);\n        <span class=\"supfact\">found</span> = v4 == Number;\n        if (!v4 || *__errno_location() == Number) {\n          *__errno_location() = <span class=\"supfact\">olderrno</span>;\n          <span class=\"supfact\">entry</span> = <span class=\"supfact\">xsdh</span>-><span class=\"supfact\">entry</span>;\n          <span class=\"supfact\">found</span> = FALSE;\n          if ((<span class=\"supfact\">entry</span>->ie_flags & Number) != Number)\n            <span class=\"supfact\">entry</span> =\n                ntfs_index_next(<span class=\"supfact\">entry</span>, <span class=\"supfact\">xsdh</span>);\n          do {\n            <span class=\"supfact\">collision</span> = FALSE;\n            <span class=\"supfact\">psdh</span> = (SDH *)<span class=\"supfact\">entry</span>;\n            if (<span class=\"supfact\">entry</span>)\n              <span class=\"supfact\">size</span> = <span class=\"supfact\">psdh</span>->datasize - Number L;\n            else\n              <span class=\"supfact\">size</span> = Number L;\n            if (<span class=\"supfact\">psdh</span> && <span class=\"supfact\">size</span> &&\n                <span class=\"supfact\">hash</span> == <span class=\"supfact\">psdh</span>->keyhash) {\n              <span class=\"supfact\">realign</span> =\n                  *(setsecurityattr $3A29FE47464F3577C5C3643FFF1922DD\n                        *)&<span class=\"supfact\">psdh</span>->dataoffsl;\n              <span class=\"supfact\">offs</span> = <span class=\"supfact\">realign</span>.all + Number;\n              <span class=\"supfact\">oldattr</span> =\n                  (char *)ntfs_malloc(<span class=\"supfact\">size</span>);\n              if (<span class=\"supfact\">oldattr</span>) {\n                <span class=\"supfact\">rdsize</span> = ntfs_attr_data_read(\n                    <span class=\"supfact\">vol</span>->secure_ni, STREAM_SDS, Number,\n                    <span class=\"supfact\">oldattr</span>, <span class=\"supfact\">size</span>,\n                    <span class=\"supfact\">offs</span>);\n                v5 = <span class=\"supfact\">rdsize</span> == <span class=\"supfact\">size</span> &&\n                     !memcmp(<span class=\"supfact\">oldattr</span>, <span class=\"supfact\">attr</span>,\n                             <span class=\"supfact\">size</span>);\n                <span class=\"supfact\">found</span> = v5;\n                free(<span class=\"supfact\">oldattr</span>);\n                if (<span class=\"supfact\">found</span> == FALSE) {\n                  <span class=\"supfact\">entry</span> = ntfs_index_next(<span class=\"supfact\">entry</span>,\n                                                          <span class=\"supfact\">xsdh</span>);\n                  <span class=\"supfact\">collision</span> = TRUE;\n                }\n              } else {\n                <span class=\"supfact\">res</span> = Number;\n              }\n            }\n          } while (<span class=\"supfact\">collision</span> && <span class=\"supfact\">entry</span>);\n          if (<span class=\"supfact\">found</span>) {\n            <span class=\"supfact\">securid</span> = <span class=\"supfact\">psdh</span>->keysecurid;\n          } else if (<span class=\"supfact\">res</span>) {\n            *__errno_location() = <span class=\"supfact\">res</span>;\n            <span class=\"supfact\">securid</span> = Number;\n          } else {\n            <span class=\"supfact\">securid</span> =\n                entersecurityattr(<span class=\"supfact\">vol</span>, <span class=\"supfact\">attr</span>,\n                                  <span class=\"supfact\">attrsz</span>, <span class=\"supfact\">hash</span>);\n          }\n        } else {\n          ntfs_log_redirect(String, String, Number, Number, Number L, String);\n        }\n      }\n    }\n  }\n  if (--<span class=\"supfact\">vol</span>->secure_reentry)\n    ntfs_log_redirect(String, String, Number, Number, Number L, String);\n  return <span class=\"supfact\">securid</span>;\n}", "var": [{"name": "a1", "type": "ntfs_volume *", "pred_name": "vol", "ref_name": "vol", "ref_type": "ntfs_volume *"}, {"name": "a2", "type": "ntfs_inode *", "pred_name": "base_ni", "ref_name": "attr", "ref_type": "const SECURITY_DESCRIPTOR_RELATIVE *"}, {"name": "a3", "type": "ntfs_inode *", "pred_name": "base_ni", "ref_name": "attrsz", "ref_type": "s64"}, {"name": "v8", "type": "__unk__", "pred_name": "__unk__", "ref_name": "key", "ref_type": "struct SDH_INDEX_KEY { u32 hash; u32 security_id; }"}, {"name": "v9", "type": "s64", "pred_name": "ll", "ref_name": "realign", "ref_type": "void"}, {"name": "v10", "type": "s64", "pred_name": "__unk__", "ref_name": "rdsize", "ref_type": "size_t"}, {"name": "v11", "type": "s64", "pred_name": "__unk__", "ref_name": "offs", "ref_type": "s64"}, {"name": "v12", "type": "s64", "pred_name": "__unk__", "ref_name": "psdh", "ref_type": "SDH *"}, {"name": "v13", "type": "int", "pred_name": "__unk__", "ref_name": "olderrno", "ref_type": "int"}, {"name": "v14", "type": "s64", "pred_name": "__unk__", "ref_name": "xsdh", "ref_type": "ntfs_index_context *"}, {"name": "s1", "type": "s64", "pred_name": "__unk__", "ref_name": "oldattr", "ref_type": "char *"}, {"name": "v16", "type": "int", "pred_name": "ret", "ref_name": "hash", "ref_type": "le32"}, {"name": "v17", "type": "int", "pred_name": "__unk__", "ref_name": "securid", "ref_type": "le32"}, {"name": "v18", "type": "s64", "pred_name": "br", "ref_name": "entry", "ref_type": "INDEX_ENTRY *"}, {"name": "v19", "type": "int", "pred_name": "__unk__", "ref_name": "res", "ref_type": "int"}, {"name": "n", "type": "s64", "pred_name": "__unk__", "ref_name": "size", "ref_type": "size_t"}, {"name": "v21", "type": "int", "pred_name": "__unk__", "ref_name": "collision", "ref_type": "BOOL"}, {"name": "v22", "type": "int", "pred_name": "res", "ref_name": "found", "ref_type": "BOOL"}], "body_in_train": false}, {"repo_owner": "mrayy", "repo_name": "ChampionRun", "path": "mrayy/ChampionRun/0a9c47e8b201ac60965703b9a99ab314553f8f24e98fe99a2d6774e94af78a44", "path_in_repo": "mrayy/ChampionRun/cocos2dx/proj.linux/obj/release/menu_nodes/CCMenuItem.o", "objdump": "0000000000003040 <_ZN7cocos2d14MenuItemToggle15getSelectedItemEv>:\n    3040:\t48 8b 87 c0 01 00 00 \tmov    0x1c0(%rdi),%rax\n    3047:\t48 63 97 b8 01 00 00 \tmovslq 0x1b8(%rdi),%rdx\n    304e:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    3052:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3056:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n    305a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cocos2d MenuItemToggle\ngetSelectedItem(cocos2d MenuItemToggle *<span class=\"supfact\">this</span>) {\n  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)<span class=\"supfact\">this</span> +\n                                               Number) +\n                                             Number L) +\n                                 Number L) +\n                     Number L * *((int *)<span class=\"supfact\">this</span> + Number));\n}", "code_t": "__int64 __fastcall cocos2d MenuItemToggle\ngetSelectedItem(cocos2d MenuItemToggle *<span class=\"supfact\">this</span>) {\n  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)<span class=\"supfact\">this</span> +\n                                               Number) +\n                                             Number L) +\n                                 Number L) +\n                     Number L * *((int *)<span class=\"supfact\">this</span> + Number));\n}", "var": [{"name": "this", "type": "cocos2d::MenuItemToggle *", "pred_name": "this", "ref_name": "this", "ref_type": "cocos2d::MenuItemToggle *"}], "body_in_train": false}, {"repo_owner": "jtanx", "repo_name": "libclipboard", "path": "jtanx/libclipboard/a5bb405315a8c227b400ae53e138e8a073501fc810add8d462a26e6d2a667d6c", "path_in_repo": "jtanx/libclipboard/third_party/googletest/googlemock/make/gmock-all.o", "objdump": "", "code_s": "__int64 __fastcall std vector<testing internal linked_ptr<\n    testing internal ExpectationBase>> ~vector(_QWORD *<span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = std _Vector_base<\n      testing internal linked_ptr<testing internal ExpectationBase>>\n      _M_get_Tp_allocator(<span class=\"supfact\">a1</span>);\n  std _Destroy<testing internal linked_ptr<testing internal ExpectationBase> *,\n               testing internal linked_ptr<testing internal ExpectationBase>>(\n      *<span class=\"supfact\">a1</span>, <span class=\"supfact\">a1</span>[Number], <span class=\"supfact\">v1</span>);\n  return std _Vector_base<testing internal linked_ptr<\n      testing internal ExpectationBase>> ~_Vector_base(<span class=\"supfact\">a1</span>);\n}", "code_t": "void __cdecl std vector<testing internal linked_ptr<\n    testing internal\n        ExpectationBase>> ~vector(std\n                                      vector<testing internal linked_ptr<\n                                          testing internal ExpectationBase>>\n                                          *const <span class=\"supfact\">this</span>) {\n  std allocator<testing internal linked_ptr<testing internal ExpectationBase>>\n      *<span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = std _Vector_base<\n      testing internal linked_ptr<testing internal ExpectationBase>>\n      _M_get_Tp_allocator(<span class=\"supfact\">this</span>);\n  std _Destroy<testing internal linked_ptr<testing internal ExpectationBase> *,\n               testing internal linked_ptr<testing internal ExpectationBase>>(\n      <span class=\"supfact\">this</span>->_M_impl._M_start,\n      <span class=\"supfact\">this</span>->_M_impl._M_finish, <span class=\"supfact\">v1</span>);\n  std _Vector_base<testing internal linked_ptr<\n      testing internal ExpectationBase>> ~_Vector_base(<span class=\"supfact\">this</span>);\n}", "var": [{"name": "a1", "type": "std::vector<cpptempl::data_ptr> *", "pred_name": "this", "ref_name": "this", "ref_type": "std::vector<testing::internal::linked_ptr<testing::internal::ExpectationBase>> *"}, {"name": "v1", "type": "pjsip_uri_0 *", "pred_name": "v1", "ref_name": "v1", "ref_type": "std::allocator<testing::internal::linked_ptr<testing::internal::ExpectationBase> > *"}], "body_in_train": false}, {"repo_owner": "qiupq", "repo_name": "kernel-xillinx", "path": "qiupq/kernel-xillinx/0f5dce95fd681a9528dd80b5534a400aea0e9f149e986d06afabe3d727c2da87", "path_in_repo": "qiupq/kernel-xillinx/tools/perf/util/evlist.o", "objdump": "0000000000000cf0 <perf_evlist__set_id_pos>:\n     cf0:\t55                   \tpush   %rbp\n     cf1:\t48 89 e5             \tmov    %rsp,%rbp\n     cf4:\t48 83 ec 20          \tsub    $0x20,%rsp\n     cf8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     cfc:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     d03:\t00 00 \n     d05:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d09:\t31 c0                \txor    %eax,%eax\n     d0b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d0f:\t48 89 c7             \tmov    %rax,%rdi\n     d12:\te8 9c fd ff ff       \tcallq  ab3 <perf_evlist__first>\n     d17:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     d1b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d1f:\t8b 90 dc 02 00 00    \tmov    0x2dc(%rax),%edx\n     d25:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d29:\t89 90 28 08 00 00    \tmov    %edx,0x828(%rax)\n     d2f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     d33:\t8b 90 e0 02 00 00    \tmov    0x2e0(%rax),%edx\n     d39:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d3d:\t89 90 2c 08 00 00    \tmov    %edx,0x82c(%rax)\n     d43:\t90                   \tnop\n     d44:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     d48:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     d4f:\t00 00 \n     d51:\t74 05                \tje     d58 <perf_evlist__set_id_pos+0x68>\n     d53:\te8 00 00 00 00       \tcallq  d58 <perf_evlist__set_id_pos+0x68>\n     d58:\tc9                   \tleaveq \n     d59:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall perf_evlist__set_id_pos(\n    __int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">v1</span>;\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = __readfsqword(Number);\n  <span class=\"supfact\">v1</span> = perf_evlist__first(<span class=\"supfact\">a1</span>);\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n      *(_DWORD *)(<span class=\"supfact\">v1</span> + Number);\n  *(_DWORD *)(<span class=\"supfact\">a1</span> + Number) =\n      *(_DWORD *)(<span class=\"supfact\">v1</span> + Number);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v3</span>;\n}", "code_t": "void __cdecl perf_evlist__set_id_pos(perf_evlist *<span class=\"supfact\">evlist</span>) {\n  perf_evsel *<span class=\"supfact\">v1</span>;\n  <span class=\"supfact\">v1</span> = perf_evlist__first(<span class=\"supfact\">evlist</span>);\n  <span class=\"supfact\">evlist</span>->id_pos = <span class=\"supfact\">v1</span>->id_pos;\n  <span class=\"supfact\">evlist</span>->is_pos = <span class=\"supfact\">v1</span>->is_pos;\n}", "var": [{"name": "a1", "type": "perf_evlist *", "pred_name": "evlist", "ref_name": "evlist", "ref_type": "perf_evlist *"}, {"name": "v1", "type": "perf_evsel *", "pred_name": "v1", "ref_name": "v1", "ref_type": "perf_evsel *"}, {"name": "v3", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "hakansel05", "repo_name": "PandaLin", "path": "hakansel05/PandaLin/08aefaaa1779a253949ba5823799adcbbfa6e51711030baf1a1ef8a2e0a62105", "path_in_repo": "hakansel05/PandaLin//output/build/kmod-9/testsuite/rootfs-pristine/test-modprobe/softdep-loop/lib/modules/4.4.4/kernel/net/bluetooth/bluetooth.ko", "objdump": "00000000000176d0 <l2cap_add_scid>:\n   176d0:\t55                   \tpush   %rbp\n   176d1:\t48 89 e5             \tmov    %rsp,%rbp\n   176d4:\t48 83 ec 10          \tsub    $0x10,%rsp\n   176d8:\t48 89 5d f0          \tmov    %rbx,-0x10(%rbp)\n   176dc:\t48 89 fb             \tmov    %rdi,%rbx\n   176df:\t48 c7 c7 00 00 00 00 \tmov    $0x0,%rdi\n   176e6:\t4c 89 65 f8          \tmov    %r12,-0x8(%rbp)\n   176ea:\t41 89 f4             \tmov    %esi,%r12d\n   176ed:\te8 00 00 00 00       \tcallq  176f2 <l2cap_add_scid+0x22>\n   176f2:\t66 44 89 63 1c       \tmov    %r12w,0x1c(%rbx)\n   176f7:\t48 c7 c7 00 00 00 00 \tmov    $0x0,%rdi\n   176fe:\te8 00 00 00 00       \tcallq  17703 <l2cap_add_scid+0x33>\n   17703:\t31 c0                \txor    %eax,%eax\n   17705:\t48 8b 5d f0          \tmov    -0x10(%rbp),%rbx\n   17709:\t4c 8b 65 f8          \tmov    -0x8(%rbp),%r12\n   1770d:\tc9                   \tleaveq \n   1770e:\tc3                   \tretq   \n   1770f:\t90                   \tnop", "code_s": "__int64 __fastcall l2cap_add_scid(__int64 <span class=\"supfact\">a1</span>,\n                                  __int16 <span class=\"supfact\">a2</span>) {\n  raw_write_lock(&chan_list_lock);\n  *(_WORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">a2</span>;\n  raw_write_unlock(&chan_list_lock);\n  return Number L;\n}", "code_t": "__int64 __fastcall l2cap_add_scid(__int64 <span class=\"supfact\">a1</span>,\n                                  __int16 <span class=\"supfact\">a2</span>) {\n  raw_write_lock(&chan_list_lock);\n  *(_WORD *)(<span class=\"supfact\">a1</span> + Number) = <span class=\"supfact\">a2</span>;\n  raw_write_unlock(&chan_list_lock);\n  return Number L;\n}", "var": [{"name": "a1", "type": "chan *", "pred_name": "chan", "ref_name": "a1", "ref_type": "__int64"}, {"name": "a2", "type": "uint16_t", "pred_name": "id", "ref_name": "a2", "ref_type": "__int16"}], "body_in_train": false}, {"repo_owner": "infinity-gbc", "repo_name": "gbdk", "path": "infinity-gbc/gbdk/a8230c3fd60e1f0e27d4f189a8c6fe2afb0ab31d5fbd50a40b429409477cffde", "path_in_repo": "infinity-gbc/gbdk//as/asexpr.o", "objdump": "0000000000000905 <abscheck>:\n 905:\t55                   \tpush   %rbp\n 906:\t48 89 e5             \tmov    %rsp,%rbp\n 909:\t48 89 f8             \tmov    %rdi,%rax\n 90c:\t0f b6 50 01          \tmovzbl 0x1(%rax),%edx\n 910:\t84 d2                \ttest   %dl,%dl\n 912:\t75 09                \tjne    91d <abscheck+0x18>\n 914:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 918:\t48 85 d2             \ttest   %rdx,%rdx\n 91b:\t74 16                \tje     933 <abscheck+0x2e>\n 91d:\tc6 40 01 00          \tmovb   $0x0,0x1(%rax)\n 921:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n 928:\t00 \n 929:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 92e:\te8 00 00 00 00       \tcallq  933 <abscheck+0x2e>\n 933:\t90                   \tnop\n 934:\t5d                   \tpop    %rbp\n 935:\tc3                   \tretq   ", "code_s": "__int64 __fastcall abscheck(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>;\n  if (*(_BYTE *)(<span class=\"supfact\">a1</span> + Number) ||\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) = Number;\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = Number L;\n    <span class=\"supfact\">result</span> = rerr();\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __fastcall abscheck(__int64 <span class=\"supfact\">a1</span>, __int64 a2) {\n  if (*(_BYTE *)(<span class=\"supfact\">a1</span> + Number) ||\n      *(_QWORD *)(<span class=\"supfact\">a1</span> + Number)) {\n    *(_BYTE *)(<span class=\"supfact\">a1</span> + Number) = Number;\n    *(_QWORD *)(<span class=\"supfact\">a1</span> + Number) = Number L;\n    rerr(<span class=\"supfact\">a1</span>, a2);\n  }\n}", "var": [{"name": "a1", "type": "STATE *", "pred_name": "state", "ref_name": "a1", "ref_type": "__int64"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}], "body_in_train": false}, {"repo_owner": "nining", "repo_name": "tomato", "path": "nining/tomato/05d795ee87443935e4f84684589559609fab1a87bd2eb84c6e70a304ff4ee4be", "path_in_repo": "nining/tomato/release/src/router/ffmpeg/libavcodec/dvbsubdec.o", "objdump": "00000000000003bd <delete_state>:\n     3bd:\t48 83 ec 28          \tsub    $0x28,%rsp\n     3c1:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     3c6:\teb 61                \tjmp    429 <delete_state+0x6c>\n     3c8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     3cd:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     3d1:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n     3d6:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     3db:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n     3df:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     3e4:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     3e8:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n     3ed:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     3f2:\t48 89 d6             \tmov    %rdx,%rsi\n     3f5:\t48 89 c7             \tmov    %rax,%rdi\n     3f8:\te8 6b fe ff ff       \tcallq  268 <delete_region_display_list>\n     3fd:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     402:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     406:\t48 85 c0             \ttest   %rax,%rax\n     409:\t74 11                \tje     41c <delete_state+0x5f>\n     40b:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     410:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     414:\t48 89 c7             \tmov    %rax,%rdi\n     417:\te8 00 00 00 00       \tcallq  41c <delete_state+0x5f>\n     41c:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     421:\t48 89 c7             \tmov    %rax,%rdi\n     424:\te8 00 00 00 00       \tcallq  429 <delete_state+0x6c>\n     429:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     42e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     432:\t48 85 c0             \ttest   %rax,%rax\n     435:\t75 91                \tjne    3c8 <delete_state+0xb>\n     437:\teb 30                \tjmp    469 <delete_state+0xac>\n     439:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     43e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     442:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n     447:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     44c:\t48 8b 90 58 04 00 00 \tmov    0x458(%rax),%rdx\n     453:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     458:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n     45c:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     461:\t48 89 c7             \tmov    %rax,%rdi\n     464:\te8 00 00 00 00       \tcallq  469 <delete_state+0xac>\n     469:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     46e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     472:\t48 85 c0             \ttest   %rax,%rax\n     475:\t75 c2                \tjne    439 <delete_state+0x7c>\n     477:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     47c:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     480:\t48 85 c0             \ttest   %rax,%rax\n     483:\t74 19                \tje     49e <delete_state+0xe1>\n     485:\tba 00 00 00 00       \tmov    $0x0,%edx\n     48a:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     48f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     494:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     499:\te8 00 00 00 00       \tcallq  49e <delete_state+0xe1>\n     49e:\t90                   \tnop\n     49f:\t48 83 c4 28          \tadd    $0x28,%rsp\n     4a3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall delete_state(_QWORD *<span class=\"supfact\">a1</span>) {\n  __int64 <span class=\"supfact\">result</span>;\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  while (<span class=\"supfact\">a1</span>[Number]) {\n    <span class=\"supfact\">v2</span> = <span class=\"supfact\">a1</span>[Number];\n    <span class=\"supfact\">a1</span>[Number] = *(_QWORD *)(<span class=\"supfact\">v2</span> + Number);\n    delete_region_display_list((__int64)<span class=\"supfact\">a1</span>, <span class=\"supfact\">v2</span>);\n    if (*(_QWORD *)(<span class=\"supfact\">v2</span> + Number))\n      av_free(*(_QWORD *)(<span class=\"supfact\">v2</span> + Number));\n    av_free(<span class=\"supfact\">v2</span>);\n  }\n  while (<span class=\"supfact\">a1</span>[Number]) {\n    <span class=\"supfact\">v3</span> = <span class=\"supfact\">a1</span>[Number];\n    <span class=\"supfact\">a1</span>[Number] = *(_QWORD *)(<span class=\"supfact\">v3</span> + Number);\n    av_free(<span class=\"supfact\">v3</span>);\n  }\n  <span class=\"supfact\">result</span> = <span class=\"supfact\">a1</span>[Number];\n  if (<span class=\"supfact\">result</span>)\n    <span class=\"supfact\">result</span> = av_log(Number L, Number L, String);\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "void __cdecl delete_state(DVBSubContext_0 *<span class=\"supfact\">ctx</span>) {\n  DVBSubRegion_0 *<span class=\"supfact\">region</span>;\n  DVBSubCLUT_0 *<span class=\"supfact\">clut</span>;\n  while (<span class=\"supfact\">ctx</span>->region_list) {\n    <span class=\"supfact\">region</span> = <span class=\"supfact\">ctx</span>->region_list;\n    <span class=\"supfact\">ctx</span>->region_list = <span class=\"supfact\">region</span>->next;\n    delete_region_display_list(<span class=\"supfact\">ctx</span>, <span class=\"supfact\">region</span>);\n    if (<span class=\"supfact\">region</span>->pbuf)\n      av_free(<span class=\"supfact\">region</span>->pbuf);\n    av_free(<span class=\"supfact\">region</span>);\n  }\n  while (<span class=\"supfact\">ctx</span>->clut_list) {\n    <span class=\"supfact\">clut</span> = <span class=\"supfact\">ctx</span>->clut_list;\n    <span class=\"supfact\">ctx</span>->clut_list = <span class=\"supfact\">clut</span>->next;\n    av_free(<span class=\"supfact\">clut</span>);\n  }\n  if (<span class=\"supfact\">ctx</span>->object_list)\n    av_log(Number L, Number L, String);\n}", "var": [{"name": "a1", "type": "DVBSubContext_0 *", "pred_name": "ctx", "ref_name": "ctx", "ref_type": "DVBSubContext_0 *"}, {"name": "result", "type": "disappear", "pred_name": "", "ref_name": "", "ref_type": "disappear"}, {"name": "v2", "type": "DVBSubRegion_0 *", "pred_name": "region", "ref_name": "region", "ref_type": "DVBSubRegion_0 *"}, {"name": "v3", "type": "DVBSubCLUT_0 *", "pred_name": "clut", "ref_name": "clut", "ref_type": "DVBSubCLUT_0 *"}], "body_in_train": false}, {"repo_owner": "sconklin", "repo_name": "ltp-tools", "path": "sconklin/ltp-tools/cb910f302e6a489157e2075e9d152ca542dd2ffa742fc24ca014a93dff729ed2", "path_in_repo": "sconklin/ltp-tools/ltp-full-20110915/testcases/open_posix_testsuite/conformance/interfaces/pthread_attr_destroy/1-1.run-test", "objdump": "0000000000401190 <main>:\n  401190:\t55                   \tpush   %rbp\n  401191:\t48 89 e5             \tmov    %rsp,%rbp\n  401194:\t48 83 ec 50          \tsub    $0x50,%rsp\n  401198:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  40119c:\t48 89 c7             \tmov    %rax,%rdi\n  40119f:\te8 bc fe ff ff       \tcallq  401060 <pthread_attr_init@plt>\n  4011a4:\t85 c0                \ttest   %eax,%eax\n  4011a6:\t74 14                \tje     4011bc <main+0x2c>\n  4011a8:\tbf 08 20 40 00       \tmov    $0x402008,%edi\n  4011ad:\te8 ce fe ff ff       \tcallq  401080 <perror@plt>\n  4011b2:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4011b7:\te9 ab 00 00 00       \tjmpq   401267 <main+0xd7>\n  4011bc:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  4011c0:\t48 89 c7             \tmov    %rax,%rdi\n  4011c3:\te8 c8 fe ff ff       \tcallq  401090 <pthread_attr_destroy@plt>\n  4011c8:\t85 c0                \ttest   %eax,%eax\n  4011ca:\t74 14                \tje     4011e0 <main+0x50>\n  4011cc:\tbf 30 20 40 00       \tmov    $0x402030,%edi\n  4011d1:\te8 aa fe ff ff       \tcallq  401080 <perror@plt>\n  4011d6:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4011db:\te9 87 00 00 00       \tjmpq   401267 <main+0xd7>\n  4011e0:\t48 8d 75 b0          \tlea    -0x50(%rbp),%rsi\n  4011e4:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  4011e8:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  4011ed:\tba 82 11 40 00       \tmov    $0x401182,%edx\n  4011f2:\t48 89 c7             \tmov    %rax,%rdi\n  4011f5:\te8 36 fe ff ff       \tcallq  401030 <pthread_create@plt>\n  4011fa:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4011fd:\t83 7d fc 16          \tcmpl   $0x16,-0x4(%rbp)\n  401201:\t75 11                \tjne    401214 <main+0x84>\n  401203:\tbf 55 20 40 00       \tmov    $0x402055,%edi\n  401208:\te8 33 fe ff ff       \tcallq  401040 <puts@plt>\n  40120d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401212:\teb 53                \tjmp    401267 <main+0xd7>\n  401214:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  401218:\t74 1d                \tje     401237 <main+0xa7>\n  40121a:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%rbp)\n  40121e:\t74 06                \tje     401226 <main+0x96>\n  401220:\t83 7d fc 0b          \tcmpl   $0xb,-0x4(%rbp)\n  401224:\t75 11                \tjne    401237 <main+0xa7>\n  401226:\tbf 61 20 40 00       \tmov    $0x402061,%edi\n  40122b:\te8 50 fe ff ff       \tcallq  401080 <perror@plt>\n  401230:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  401235:\teb 30                \tjmp    401267 <main+0xd7>\n  401237:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40123b:\t75 11                \tjne    40124e <main+0xbe>\n  40123d:\tbf 80 20 40 00       \tmov    $0x402080,%edi\n  401242:\te8 f9 fd ff ff       \tcallq  401040 <puts@plt>\n  401247:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40124c:\teb 19                \tjmp    401267 <main+0xd7>\n  40124e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401251:\t89 c6                \tmov    %eax,%esi\n  401253:\tbf 18 21 40 00       \tmov    $0x402118,%edi\n  401258:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40125d:\te8 ee fd ff ff       \tcallq  401050 <printf@plt>\n  401262:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401267:\tc9                   \tleaveq \n  401268:\tc3                   \tretq   \n  401269:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)", "code_s": "int __cdecl main(int <span class=\"supfact\">argc</span>, const char **<span class=\"supfact\">argv</span>,\n                 const char **<span class=\"supfact\">envp</span>) {\n  int <span class=\"supfact\">result</span>;\n  pthread_attr_t <span class=\"supfact\">attr</span>;\n  pthread_t <span class=\"supfact\">newthread</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  if (pthread_attr_init(&<span class=\"supfact\">attr</span>)) {\n    perror(String);\n    <span class=\"supfact\">result</span> = Number;\n  } else if (pthread_attr_destroy(&<span class=\"supfact\">attr</span>)) {\n    perror(String);\n    <span class=\"supfact\">result</span> = Number;\n  } else {\n    <span class=\"supfact\">v6</span> =\n        pthread_create(&<span class=\"supfact\">newthread</span>, &<span class=\"supfact\">attr</span>,\n                       (void *(*)(void *))a_thread_func, Number L);\n    if (<span class=\"supfact\">v6</span> == Number) {\n      puts(String);\n      <span class=\"supfact\">result</span> = Number;\n    } else if (<span class=\"supfact\">v6</span> &&\n               (<span class=\"supfact\">v6</span> == Number || <span class=\"supfact\">v6</span> == Number)) {\n      perror(String);\n      <span class=\"supfact\">result</span> = Number;\n    } else if (<span class=\"supfact\">v6</span>) {\n      printf(String String, <span class=\"supfact\">v6</span>);\n      <span class=\"supfact\">result</span> = Number;\n    } else {\n      puts(String String);\n      <span class=\"supfact\">result</span> = Number;\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "code_t": "int __cdecl main(int <span class=\"supfact\">argc</span>, const char **<span class=\"supfact\">argv</span>,\n                 const char **<span class=\"supfact\">envp</span>) {\n  int <span class=\"supfact\">result</span>;\n  pthread_attr_t_0 <span class=\"supfact\">new_attr</span>;\n  pthread_t <span class=\"supfact\">new_th</span>;\n  int <span class=\"supfact\">ret</span>;\n  if (pthread_attr_init(&<span class=\"supfact\">new_attr</span>)) {\n    perror(String);\n    <span class=\"supfact\">result</span> = Number;\n  } else if (pthread_attr_destroy(&<span class=\"supfact\">new_attr</span>)) {\n    perror(String);\n    <span class=\"supfact\">result</span> = Number;\n  } else {\n    <span class=\"supfact\">ret</span> =\n        pthread_create(&<span class=\"supfact\">new_th</span>, &<span class=\"supfact\">new_attr</span>,\n                       (void *(*)(void *))a_thread_func, Number L);\n    if (<span class=\"supfact\">ret</span> == Number) {\n      puts(String);\n      <span class=\"supfact\">result</span> = Number;\n    } else if (<span class=\"supfact\">ret</span> && (<span class=\"supfact\">ret</span> == Number ||\n                                       <span class=\"supfact\">ret</span> == Number)) {\n      perror(String);\n      <span class=\"supfact\">result</span> = Number;\n    } else if (<span class=\"supfact\">ret</span>) {\n      printf(String String, (unsigned int)<span class=\"supfact\">ret</span>);\n      <span class=\"supfact\">result</span> = Number;\n    } else {\n      puts(String String);\n      <span class=\"supfact\">result</span> = Number;\n    }\n  }\n  return <span class=\"supfact\">result</span>;\n}", "var": [{"name": "argc", "type": "int", "pred_name": "argc", "ref_name": "argc", "ref_type": "int"}, {"name": "argv", "type": "const char * *", "pred_name": "argv", "ref_name": "argv", "ref_type": "const char * *"}, {"name": "envp", "type": "const char * *", "pred_name": "envp", "ref_name": "envp", "ref_type": "const char * *"}, {"name": "result", "type": "int", "pred_name": "result", "ref_name": "result", "ref_type": "int"}, {"name": "attr", "type": "void", "pred_name": "new_attr", "ref_name": "new_attr", "ref_type": "void"}, {"name": "newthread", "type": "pthread_t", "pred_name": "new_th", "ref_name": "new_th", "ref_type": "pthread_t"}, {"name": "v6", "type": "int", "pred_name": "ret_val", "ref_name": "ret", "ref_type": "int"}], "body_in_train": false}, {"repo_owner": "Xuno", "repo_name": "chromium-ffmpeg", "path": "Xuno/chromium-ffmpeg/ef28637c2d8a690631c2112936f08b1937373e7fc869c5f16e8f3548f31e8a9f", "path_in_repo": "Xuno/chromium-ffmpeg//libavformat/yuv4mpegenc.o", "objdump": "00000000000006b6 <yuv4_write_header>:\n 6b6:\t48 83 ec 28          \tsub    $0x28,%rsp\n 6ba:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n 6bf:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 6c4:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 6c8:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n 6cd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 6d2:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n 6d5:\t83 f8 01             \tcmp    $0x1,%eax\n 6d8:\t74 0a                \tje     6e4 <yuv4_write_header+0x2e>\n 6da:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n 6df:\te9 72 01 00 00       \tjmpq   856 <yuv4_write_header+0x1a0>\n 6e4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 6e9:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 6ed:\t48 8b 00             \tmov    (%rax),%rax\n 6f0:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 6f4:\t8b 40 38             \tmov    0x38(%rax),%eax\n 6f7:\t3d 01 10 02 00       \tcmp    $0x21001,%eax\n 6fc:\t74 26                \tje     724 <yuv4_write_header+0x6e>\n 6fe:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 703:\tba 00 00 00 00       \tmov    $0x0,%edx\n 708:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 70d:\t48 89 c7             \tmov    %rax,%rdi\n 710:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 715:\te8 00 00 00 00       \tcallq  71a <yuv4_write_header+0x64>\n 71a:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n 71f:\te9 32 01 00 00       \tjmpq   856 <yuv4_write_header+0x1a0>\n 724:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 729:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 72d:\t48 8b 00             \tmov    (%rax),%rax\n 730:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 734:\t8b 80 b0 00 00 00    \tmov    0xb0(%rax),%eax\n 73a:\t83 f8 50             \tcmp    $0x50,%eax\n 73d:\t7f 38                \tjg     777 <yuv4_write_header+0xc1>\n 73f:\t85 c0                \ttest   %eax,%eax\n 741:\t79 1f                \tjns    762 <yuv4_write_header+0xac>\n 743:\te9 da 00 00 00       \tjmpq   822 <yuv4_write_header+0x16c>\n 748:\t2d 2c 01 00 00       \tsub    $0x12c,%eax\n 74d:\t83 f8 0a             \tcmp    $0xa,%eax\n 750:\t0f 87 cc 00 00 00    \tja     822 <yuv4_write_header+0x16c>\n 756:\t89 c0                \tmov    %eax,%eax\n 758:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 75f:\t00 \n 760:\tff e0                \tjmpq   *%rax\n 762:\t83 f8 50             \tcmp    $0x50,%eax\n 765:\t0f 87 b7 00 00 00    \tja     822 <yuv4_write_header+0x16c>\n 76b:\t89 c0                \tmov    %eax,%eax\n 76d:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 774:\t00 \n 775:\tff e0                \tjmpq   *%rax\n 777:\t3d 36 01 00 00       \tcmp    $0x136,%eax\n 77c:\t0f 8f a0 00 00 00    \tjg     822 <yuv4_write_header+0x16c>\n 782:\t3d 2c 01 00 00       \tcmp    $0x12c,%eax\n 787:\t7d bf                \tjge    748 <yuv4_write_header+0x92>\n 789:\te9 94 00 00 00       \tjmpq   822 <yuv4_write_header+0x16c>\n 78e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 793:\tba 00 00 00 00       \tmov    $0x0,%edx\n 798:\tbe 18 00 00 00       \tmov    $0x18,%esi\n 79d:\t48 89 c7             \tmov    %rax,%rdi\n 7a0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 7a5:\te8 00 00 00 00       \tcallq  7aa <yuv4_write_header+0xf4>\n 7aa:\te9 97 00 00 00       \tjmpq   846 <yuv4_write_header+0x190>\n 7af:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 7b4:\t8b 80 e0 04 00 00    \tmov    0x4e0(%rax),%eax\n 7ba:\t85 c0                \ttest   %eax,%eax\n 7bc:\t78 46                \tjs     804 <yuv4_write_header+0x14e>\n 7be:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 7c3:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 7c7:\t48 8b 00             \tmov    (%rax),%rax\n 7ca:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 7ce:\t8b 80 b0 00 00 00    \tmov    0xb0(%rax),%eax\n 7d4:\t89 c7                \tmov    %eax,%edi\n 7d6:\te8 00 00 00 00       \tcallq  7db <yuv4_write_header+0x125>\n 7db:\t48 89 c2             \tmov    %rax,%rdx\n 7de:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 7e3:\t48 89 d1             \tmov    %rdx,%rcx\n 7e6:\tba 00 00 00 00       \tmov    $0x0,%edx\n 7eb:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 7f0:\t48 89 c7             \tmov    %rax,%rdi\n 7f3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 7f8:\te8 00 00 00 00       \tcallq  7fd <yuv4_write_header+0x147>\n 7fd:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n 802:\teb 52                \tjmp    856 <yuv4_write_header+0x1a0>\n 804:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 809:\tba 00 00 00 00       \tmov    $0x0,%edx\n 80e:\tbe 18 00 00 00       \tmov    $0x18,%esi\n 813:\t48 89 c7             \tmov    %rax,%rdi\n 816:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 81b:\te8 00 00 00 00       \tcallq  820 <yuv4_write_header+0x16a>\n 820:\teb 24                \tjmp    846 <yuv4_write_header+0x190>\n 822:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 827:\tba 00 00 00 00       \tmov    $0x0,%edx\n 82c:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 831:\t48 89 c7             \tmov    %rax,%rdi\n 834:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 839:\te8 00 00 00 00       \tcallq  83e <yuv4_write_header+0x188>\n 83e:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n 843:\teb 11                \tjmp    856 <yuv4_write_header+0x1a0>\n 845:\t90                   \tnop\n 846:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 84b:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n 851:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 856:\t48 83 c4 28          \tadd    $0x28,%rsp\n 85a:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall yuv4_write_header(__int64 <span class=\"supfact\">a1</span>) {\n  __int64 result;\n  int v2;\n  const char *v3;\n  _DWORD *<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = *(_DWORD **)(<span class=\"supfact\">a1</span> + Number);\n  if (*(_DWORD *)(<span class=\"supfact\">a1</span> + Number) != Number)\n    return Number L;\n  if (*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(<span class=\"supfact\">a1</span> + Number) +\n                              Number L) +\n                  Number L) != Number) {\n    av_log(<span class=\"supfact\">a1</span>, Number L, String);\n    return Number L;\n  }\n  v2 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(<span class=\"supfact\">a1</span> + Number) +\n                               Number L) +\n                   Number L);\n  if (v2 <= Number) {\n    if (v2 >= Number) {\n      switch (v2) {\n      case Number:\n      case Number:\n      case Number:\n      case Number:\n      case Number:\n        goto LABEL_18;\n      case Number:\n        av_log(<span class=\"supfact\">a1</span>, Number L, String);\n        goto LABEL_18;\n      case Number:\n      case Number:\n      case Number:\n      case Number:\n      case Number:\n      case Number:\n      case Number:\n      case Number:\n      case Number:\n        goto LABEL_14;\n      default:\n        goto LABEL_17;\n      }\n    }\n    goto LABEL_17;\n  }\n  if (v2 > Number || v2 < Number) {\n  LABEL_17:\n    av_log(<span class=\"supfact\">a1</span>, Number L, String String String);\n    return Number L;\n  }\n  switch (v2) {\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n  case Number:\n  LABEL_14:\n    if (*(int *)(<span class=\"supfact\">a1</span> + Number) < Number) {\n      av_log(<span class=\"supfact\">a1</span>, Number L, String);\n    LABEL_18:\n      *<span class=\"supfact\">v4</span> = Number;\n      result = Number L;\n    } else {\n      v3 = (const char *)av_get_pix_fmt_name(\n          *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(<span class=\"supfact\">a1</span> +\n                                                      Number) +\n                                        Number L) +\n                            Number L));\n      av_log(<span class=\"supfact\">a1</span>, Number L, String, v3);\n      result = Number L;\n    }\n    break;\n  default:\n    goto LABEL_17;\n  }\n  return result;\n}", "code_t": "int __cdecl yuv4_write_header(AVFormatContext_0 *<span class=\"supfact\">s</span>) {\n  int result;\n  AVPixelFormat v2;\n  const char *v3;\n  int *<span class=\"supfact\">first_pkt</span>;\n  <span class=\"supfact\">first_pkt</span> = (int *)<span class=\"supfact\">s</span>->priv_data;\n  if (<span class=\"supfact\">s</span>->nb_streams != Number)\n    return Number;\n  if ((*<span class=\"supfact\">s</span>->streams)->codec->codec_id !=\n      AV_CODEC_ID_WRAPPED_AVFRAME) {\n    av_log(<span class=\"supfact\">s</span>, Number L, String);\n    return Number;\n  }\n  v2 = (*<span class=\"supfact\">s</span>->streams)->codec->pix_fmt;\n  if (v2 <= AV_PIX_FMT_YUV422P9LE) {\n    if (v2 >= AV_PIX_FMT_YUV420P) {\n      switch (v2) {\n      case AV_PIX_FMT_YUV420P:\n      case AV_PIX_FMT_YUV422P:\n      case AV_PIX_FMT_YUV444P:\n      case AV_PIX_FMT_GRAY8:\n      case AV_PIX_FMT_GRAY16LE:\n        goto LABEL_18;\n      case AV_PIX_FMT_YUV411P:\n        av_log(<span class=\"supfact\">s</span>, Number L, String);\n        goto LABEL_18;\n      case AV_PIX_FMT_YUV420P16LE:\n      case AV_PIX_FMT_YUV422P16LE:\n      case AV_PIX_FMT_YUV444P16LE:\n      case AV_PIX_FMT_YUV420P9LE:\n      case AV_PIX_FMT_YUV420P10LE:\n      case AV_PIX_FMT_YUV422P10LE:\n      case AV_PIX_FMT_YUV444P9LE:\n      case AV_PIX_FMT_YUV444P10LE:\n      case AV_PIX_FMT_YUV422P9LE:\n        goto LABEL_14;\n      default:\n        goto LABEL_17;\n      }\n    }\n    goto LABEL_17;\n  }\n  if (v2 > AV_PIX_FMT_YUV444P14LE || v2 < AV_PIX_FMT_YUV420P12LE) {\n  LABEL_17:\n    av_log(<span class=\"supfact\">s</span>, Number L, String String String);\n    return Number;\n  }\n  switch (v2) {\n  case AV_PIX_FMT_YUV420P12LE:\n  case AV_PIX_FMT_YUV420P14LE:\n  case AV_PIX_FMT_YUV422P12LE:\n  case AV_PIX_FMT_YUV422P14LE:\n  case AV_PIX_FMT_YUV444P12LE:\n  case AV_PIX_FMT_YUV444P14LE:\n  LABEL_14:\n    if (<span class=\"supfact\">s</span>->strict_std_compliance < Number) {\n      av_log(<span class=\"supfact\">s</span>, Number L, String);\n    LABEL_18:\n      *<span class=\"supfact\">first_pkt</span> = Number;\n      result = Number;\n    } else {\n      v3 = (const char *)av_get_pix_fmt_name(\n          (unsigned int)(*<span class=\"supfact\">s</span>->streams)->codec->pix_fmt);\n      av_log(<span class=\"supfact\">s</span>, Number L, String, v3);\n      result = Number;\n    }\n    break;\n  default:\n    goto LABEL_17;\n  }\n  return result;\n}", "var": [{"name": "a1", "type": "AVFormatContext_0 *", "pred_name": "s", "ref_name": "s", "ref_type": "AVFormatContext_0 *"}, {"name": "v4", "type": "int *", "pred_name": "first_pkt", "ref_name": "first_pkt", "ref_type": "int *"}], "body_in_train": false}]