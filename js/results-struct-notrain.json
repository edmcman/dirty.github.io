[{"repo_owner": "xurubin", "repo_name": "wl530g-mini", "path": "xurubin/wl530g-mini/4d337c4aa305f9d9d0e7d4f1e8b677dad1b592ece3d7c956a74c175b25217931", "path_in_repo": "xurubin/wl530g-mini/Src/uClinux-dist/user/zebra/ospfd/ospf_zebra.o", "objdump": "00000000000005f8 <ospf_interface_address_delete>:\n     5f8:\t55                   \tpush   %rbp\n     5f9:\t48 89 e5             \tmov    %rsp,%rbp\n     5fc:\t48 83 ec 40          \tsub    $0x40,%rsp\n     600:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n     603:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     607:\t89 d0                \tmov    %edx,%eax\n     609:\t66 89 45 c8          \tmov    %ax,-0x38(%rbp)\n     60d:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     611:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     615:\t48 89 c7             \tmov    %rax,%rdi\n     618:\te8 00 00 00 00       \tcallq  61d <ospf_interface_address_delete+0x25>\n     61d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     621:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     626:\t75 0a                \tjne    632 <ospf_interface_address_delete+0x3a>\n     628:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     62d:\te9 ac 00 00 00       \tjmpq   6de <ospf_interface_address_delete+0xe6>\n     632:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     636:\t48 8b 00             \tmov    (%rax),%rax\n     639:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     63d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     641:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     645:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     649:\t48 8b 00             \tmov    (%rax),%rax\n     64c:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     650:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n     654:\tc6 45 d1 20          \tmovb   $0x20,-0x2f(%rbp)\n     658:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     65c:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n     660:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     664:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n     668:\t48 89 d6             \tmov    %rdx,%rsi\n     66b:\t48 89 c7             \tmov    %rax,%rdi\n     66e:\te8 00 00 00 00       \tcallq  673 <ospf_interface_address_delete+0x7b>\n     673:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     677:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     67c:\t75 07                \tjne    685 <ospf_interface_address_delete+0x8d>\n     67e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     683:\teb 59                \tjmp    6de <ospf_interface_address_delete+0xe6>\n     685:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     689:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     68d:\t48 85 c0             \ttest   %rax,%rax\n     690:\t75 19                \tjne    6ab <ospf_interface_address_delete+0xb3>\n     692:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     697:\tba 28 01 00 00       \tmov    $0x128,%edx\n     69c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     6a1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     6a6:\te8 00 00 00 00       \tcallq  6ab <ospf_interface_address_delete+0xb3>\n     6ab:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     6af:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n     6b3:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     6b7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     6bb:\t48 89 c7             \tmov    %rax,%rdi\n     6be:\te8 00 00 00 00       \tcallq  6c3 <ospf_interface_address_delete+0xcb>\n     6c3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     6c7:\t48 89 c7             \tmov    %rax,%rdi\n     6ca:\te8 00 00 00 00       \tcallq  6cf <ospf_interface_address_delete+0xd7>\n     6cf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6d4:\te8 00 00 00 00       \tcallq  6d9 <ospf_interface_address_delete+0xe1>\n     6d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6de:\tc9                   \tleaveq \n     6df:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ospf_interface_address_delete(__int64 a1, __int64 a2) {\n  __int64 *v3;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 *<span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> =\n      (__int64 *)zebra_interface_address_delete_read(*(_QWORD *)(a2 + Number));\n  if (!<span class=\"supfact\">v9</span>)\n    return Number L;\n  <span class=\"supfact\">v8</span> = *<span class=\"supfact\">v9</span>;\n  v3 = (__int64 *)<span class=\"supfact\">v9</span>[Number];\n  v4 = v3[Number];\n  <span class=\"supfact\">v5</span>[Number] = *v3;\n  <span class=\"supfact\">v5</span>[Number] = v4;\n  BYTE1(<span class=\"supfact\">v5</span>[Number]) = Number;\n  <span class=\"supfact\">v7</span> = route_node_lookup(\n      *(_QWORD *)(*(_QWORD *)(<span class=\"supfact\">v8</span> + Number) + Number L),\n      <span class=\"supfact\">v5</span>);\n  if (!<span class=\"supfact\">v7</span>)\n    return Number L;\n  if (!*(_QWORD *)(<span class=\"supfact\">v7</span> + Number))\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">v6</span> = *(_QWORD *)(<span class=\"supfact\">v7</span> + Number);\n  ospf_if_free(<span class=\"supfact\">v6</span>);\n  connected_free(<span class=\"supfact\">v9</span>);\n  ospf_if_update();\n  return Number L;\n}", "code_t": "int __cdecl ospf_interface_address_delete(int command, zclient *zclient,\n                                          zebra_size_t length) {\n  prefix *v4;\n  $26109F02538F55E13183C7F1E37E0B3C v5;\n  prefix <span class=\"supfact\">p</span>;\n  ospf_interface *<span class=\"supfact\">oi</span>;\n  route_node *<span class=\"supfact\">rn</span>;\n  interface *<span class=\"supfact\">ifp</span>;\n  connected *<span class=\"supfact\">c</span>;\n  <span class=\"supfact\">c</span> =\n      (connected *)zebra_interface_address_delete_read(zclient->ibuf);\n  if (!<span class=\"supfact\">c</span>)\n    return Number;\n  <span class=\"supfact\">ifp</span> = <span class=\"supfact\">c</span>-><span class=\"supfact\">ifp</span>;\n  v4 = <span class=\"supfact\">c</span>->address;\n  v5 = v4->u;\n  *(_QWORD *)&<span class=\"supfact\">p</span>.family = *(_QWORD *)&v4->family;\n  <span class=\"supfact\">p</span>.u = v5;\n  <span class=\"supfact\">p</span>.prefixlen = Number;\n  <span class=\"supfact\">rn</span> = (route_node *)route_node_lookup(\n      *((_QWORD *)<span class=\"supfact\">ifp</span>->info + Number), &<span class=\"supfact\">p</span>);\n  if (!<span class=\"supfact\">rn</span>)\n    return Number;\n  if (!<span class=\"supfact\">rn</span>->info)\n    _assert_fail(String, String, Number, String);\n  <span class=\"supfact\">oi</span> = (ospf_interface *)<span class=\"supfact\">rn</span>->info;\n  ospf_if_free(<span class=\"supfact\">oi</span>);\n  connected_free(<span class=\"supfact\">c</span>);\n  ospf_if_update();\n  return Number;\n}", "var": [{"name": "v5", "type": "struct prefix { u_char family; u_char prefixlen; PADDING (6); $26109F02538F55E13183C7F1E37E0B3C u; }", "ref_name": "p", "ref_type": "struct prefix { u_char family; u_char prefixlen; PADDING (6); $26109F02538F55E13183C7F1E37E0B3C u; }"}], "body_in_train": false}, {"repo_owner": "SecureAuthCorp", "repo_name": "pycodin", "path": "SecureAuthCorp/pycodin/fa4808635cbd0bb4d49e08eb1bbb0965d61915a75cb83a268b4765cbb2c29731", "path_in_repo": "SecureAuthCorp/pycodin/qemu-0.12.3/qemu-img", "objdump": "0000000000410ea6 <paio_init>:\n  410ea6:\t55                   \tpush   %rbp\n  410ea7:\t48 89 e5             \tmov    %rsp,%rbp\n  410eaa:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n  410eb1:\t48 8b 05 f8 56 03 00 \tmov    0x356f8(%rip),%rax        # 4465b0 <posix_aio_state>\n  410eb8:\t48 85 c0             \ttest   %rax,%rax\n  410ebb:\t74 0a                \tje     410ec7 <paio_init+0x21>\n  410ebd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  410ec2:\te9 7e 01 00 00       \tjmpq   411045 <paio_init+0x19f>\n  410ec7:\tbf 10 00 00 00       \tmov    $0x10,%edi\n  410ecc:\te8 be 55 ff ff       \tcallq  40648f <qemu_malloc>\n  410ed1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  410ed5:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  410edc:\t48 83 c0 08          \tadd    $0x8,%rax\n  410ee0:\t48 89 c7             \tmov    %rax,%rdi\n  410ee3:\te8 68 23 ff ff       \tcallq  403250 <sigfillset@plt>\n  410ee8:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n  410eef:\t48 c7 85 50 ff ff ff \tmovq   $0x410b56,-0xb0(%rbp)\n  410ef6:\t56 0b 41 00 \n  410efa:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  410f01:\tba 00 00 00 00       \tmov    $0x0,%edx\n  410f06:\t48 89 c6             \tmov    %rax,%rsi\n  410f09:\tbf 0c 00 00 00       \tmov    $0xc,%edi\n  410f0e:\te8 ad 25 ff ff       \tcallq  4034c0 <sigaction@plt>\n  410f13:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410f17:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n  410f1e:\t00 \n  410f1f:\t48 8d 85 48 ff ff ff \tlea    -0xb8(%rbp),%rax\n  410f26:\t48 89 c7             \tmov    %rax,%rdi\n  410f29:\te8 e6 ee ff ff       \tcallq  40fe14 <qemu_pipe>\n  410f2e:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  410f31:\t75 28                \tjne    410f5b <paio_init+0xb5>\n  410f33:\t48 8b 05 e6 54 03 00 \tmov    0x354e6(%rip),%rax        # 446420 <stderr@@GLIBC_2.2.5>\n  410f3a:\t48 89 c1             \tmov    %rax,%rcx\n  410f3d:\tba 16 00 00 00       \tmov    $0x16,%edx\n  410f42:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  410f47:\tbf 45 47 43 00       \tmov    $0x434745,%edi\n  410f4c:\te8 ef 27 ff ff       \tcallq  403740 <fwrite@plt>\n  410f51:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  410f56:\te9 ea 00 00 00       \tjmpq   411045 <paio_init+0x19f>\n  410f5b:\t8b 95 48 ff ff ff    \tmov    -0xb8(%rbp),%edx\n  410f61:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410f65:\t89 10                \tmov    %edx,(%rax)\n  410f67:\t8b 95 4c ff ff ff    \tmov    -0xb4(%rbp),%edx\n  410f6d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410f71:\t89 50 04             \tmov    %edx,0x4(%rax)\n  410f74:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410f78:\t8b 00                \tmov    (%rax),%eax\n  410f7a:\tba 00 08 00 00       \tmov    $0x800,%edx\n  410f7f:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  410f84:\t89 c7                \tmov    %eax,%edi\n  410f86:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  410f8b:\te8 90 25 ff ff       \tcallq  403520 <fcntl64@plt>\n  410f90:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410f94:\t8b 40 04             \tmov    0x4(%rax),%eax\n  410f97:\tba 00 08 00 00       \tmov    $0x800,%edx\n  410f9c:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  410fa1:\t89 c7                \tmov    %eax,%edi\n  410fa3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  410fa8:\te8 73 25 ff ff       \tcallq  403520 <fcntl64@plt>\n  410fad:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410fb1:\t8b 00                \tmov    (%rax),%eax\n  410fb3:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  410fb7:\t49 89 d1             \tmov    %rdx,%r9\n  410fba:\t41 b8 91 09 41 00    \tmov    $0x410991,%r8d\n  410fc0:\tb9 33 0b 41 00       \tmov    $0x410b33,%ecx\n  410fc5:\tba 00 00 00 00       \tmov    $0x0,%edx\n  410fca:\tbe d2 0a 41 00       \tmov    $0x410ad2,%esi\n  410fcf:\t89 c7                \tmov    %eax,%edi\n  410fd1:\te8 07 c8 ff ff       \tcallq  40d7dd <qemu_aio_set_fd_handler>\n  410fd6:\tbf 60 65 44 00       \tmov    $0x446560,%edi\n  410fdb:\te8 e0 26 ff ff       \tcallq  4036c0 <pthread_attr_init@plt>\n  410fe0:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  410fe3:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  410fe7:\t74 0f                \tje     410ff8 <paio_init+0x152>\n  410fe9:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  410fec:\tbe 5c 47 43 00       \tmov    $0x43475c,%esi\n  410ff1:\t89 c7                \tmov    %eax,%edi\n  410ff3:\te8 6a ef ff ff       \tcallq  40ff62 <die2>\n  410ff8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  410ffd:\tbf 60 65 44 00       \tmov    $0x446560,%edi\n  411002:\te8 89 28 ff ff       \tcallq  403890 <pthread_attr_setdetachstate@plt>\n  411007:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  41100a:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  41100e:\t74 0f                \tje     41101f <paio_init+0x179>\n  411010:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  411013:\tbe 6e 47 43 00       \tmov    $0x43476e,%esi\n  411018:\t89 c7                \tmov    %eax,%edi\n  41101a:\te8 43 ef ff ff       \tcallq  40ff62 <die2>\n  41101f:\t48 c7 05 76 55 03 00 \tmovq   $0x0,0x35576(%rip)        # 4465a0 <request_list>\n  411026:\t00 00 00 00 \n  41102a:\t48 c7 05 73 55 03 00 \tmovq   $0x4465a0,0x35573(%rip)        # 4465a8 <request_list+0x8>\n  411031:\ta0 65 44 00 \n  411035:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  411039:\t48 89 05 70 55 03 00 \tmov    %rax,0x35570(%rip)        # 4465b0 <posix_aio_state>\n  411040:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  411045:\tc9                   \tleaveq \n  411046:\tc3                   \tretq   ", "code_s": "__int64 paio_init() {\n  __int64 result;\n  int <span class=\"supfact\">v1</span>[Number];\n  struct sigaction <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  if (posix_aio_state)\n    return Number L;\n  <span class=\"supfact\">v4</span> = qemu_malloc(Number);\n  sigfillset(&<span class=\"supfact\">v2</span>.sa_mask);\n  <span class=\"supfact\">v2</span>.sa_flags = Number;\n  <span class=\"supfact\">v2</span>.sa_handler = (__sighandler_t)aio_signal_handler;\n  sigaction(Number, &<span class=\"supfact\">v2</span>, Number L);\n  *(_QWORD *)(<span class=\"supfact\">v4</span> + Number) = Number L;\n  if ((unsigned int)qemu_pipe(<span class=\"supfact\">v1</span>) == Number) {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  } else {\n    *(_DWORD *)<span class=\"supfact\">v4</span> = <span class=\"supfact\">v1</span>[Number];\n    *(_DWORD *)(<span class=\"supfact\">v4</span> + Number) = <span class=\"supfact\">v1</span>[Number];\n    fcntl64();\n    fcntl64();\n    qemu_aio_set_fd_handler(\n        *(_DWORD *)<span class=\"supfact\">v4</span>, (__int64)posix_aio_read, Number L,\n        (__int64)posix_aio_flush, (__int64)posix_aio_process_queue,\n        <span class=\"supfact\">v4</span>);\n    <span class=\"supfact\">v3</span> = pthread_attr_init(&attr);\n    if (<span class=\"supfact\">v3</span>)\n      die2(<span class=\"supfact\">v3</span>, String);\n    <span class=\"supfact\">v3</span> = pthread_attr_setdetachstate(&attr, Number);\n    if (<span class=\"supfact\">v3</span>)\n      die2(<span class=\"supfact\">v3</span>, String);\n    request_list = Number L;\n    qword_4465A8 = (__int64)&request_list;\n    posix_aio_state = <span class=\"supfact\">v4</span>;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl paio_init() {\n  int result;\n  int <span class=\"supfact\">fds</span>[Number];\n  sigaction <span class=\"supfact\">act</span>;\n  int <span class=\"supfact\">ret</span>;\n  PosixAioState_0 *<span class=\"supfact\">s</span>;\n  if (posix_aio_state)\n    return Number;\n  <span class=\"supfact\">s</span> = (PosixAioState_0 *)qemu_malloc(Number);\n  sigfillset(&<span class=\"supfact\">act</span>.sa_mask);\n  <span class=\"supfact\">act</span>.sa_flags = Number;\n  <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)aio_signal_handler;\n  sigaction(Number, &<span class=\"supfact\">act</span>, Number L);\n  <span class=\"supfact\">s</span>->first_aio = Number L;\n  if (qemu_pipe(<span class=\"supfact\">fds</span>) == Number) {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  } else {\n    <span class=\"supfact\">s</span>->rfd = <span class=\"supfact\">fds</span>[Number];\n    <span class=\"supfact\">s</span>->wfd = <span class=\"supfact\">fds</span>[Number];\n    fcntl64();\n    fcntl64();\n    qemu_aio_set_fd_handler(<span class=\"supfact\">s</span>->rfd, (IOHandler *)posix_aio_read,\n                            Number L, (AioFlushHandler *)posix_aio_flush,\n                            (AioProcessQueue *)posix_aio_process_queue,\n                            <span class=\"supfact\">s</span>);\n    <span class=\"supfact\">ret</span> = pthread_attr_init(&attr);\n    if (<span class=\"supfact\">ret</span>)\n      die2(<span class=\"supfact\">ret</span>, String);\n    <span class=\"supfact\">ret</span> = pthread_attr_setdetachstate(&attr, Number);\n    if (<span class=\"supfact\">ret</span>)\n      die2(<span class=\"supfact\">ret</span>, String);\n    request_list.tqh_first = Number L;\n    request_list.tqh_last = (qemu_paiocb **)&request_list;\n    posix_aio_state = <span class=\"supfact\">s</span>;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": false}, {"repo_owner": "konstunn", "repo_name": "mynetque", "path": "konstunn/mynetque/fb6c88fd0690ed4bd615ed9e7ca3ee48573bfe5d341deb99edd21f5cc51e09c5", "path_in_repo": "konstunn/mynetque//server.o", "objdump": "00000000000004cd <main>:\n 4cd:\t55                   \tpush   %rbp\n 4ce:\t48 89 e5             \tmov    %rsp,%rbp\n 4d1:\t48 83 ec 50          \tsub    $0x50,%rsp\n 4d5:\tc7 45 fc 0a 00 00 00 \tmovl   $0xa,-0x4(%rbp)\n 4dc:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 4df:\t89 c7                \tmov    %eax,%edi\n 4e1:\te8 00 00 00 00       \tcallq  4e6 <main+0x19>\n 4e6:\tc7 45 f8 0a 00 00 00 \tmovl   $0xa,-0x8(%rbp)\n 4ed:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 4f0:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 4f3:\tba 00 00 00 00       \tmov    $0x0,%edx\n 4f8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 4fd:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 502:\te8 00 00 00 00       \tcallq  507 <main+0x3a>\n 507:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 50a:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 50e:\tba 10 00 00 00       \tmov    $0x10,%edx\n 513:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 518:\t48 89 c7             \tmov    %rax,%rdi\n 51b:\te8 00 00 00 00       \tcallq  520 <main+0x53>\n 520:\t66 c7 45 d0 02 00    \tmovw   $0x2,-0x30(%rbp)\n 526:\tbf ff ff 00 00       \tmov    $0xffff,%edi\n 52b:\te8 00 00 00 00       \tcallq  530 <main+0x63>\n 530:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n 534:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 539:\te8 00 00 00 00       \tcallq  53e <main+0x71>\n 53e:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n 541:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n 545:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 548:\tba 10 00 00 00       \tmov    $0x10,%edx\n 54d:\t48 89 ce             \tmov    %rcx,%rsi\n 550:\t89 c7                \tmov    %eax,%edi\n 552:\te8 00 00 00 00       \tcallq  557 <main+0x8a>\n 557:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 55a:\t75 14                \tjne    570 <main+0xa3>\n 55c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 561:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 566:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 56b:\te8 00 00 00 00       \tcallq  570 <main+0xa3>\n 570:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 573:\tbe 80 00 00 00       \tmov    $0x80,%esi\n 578:\t89 c7                \tmov    %eax,%edi\n 57a:\te8 00 00 00 00       \tcallq  57f <main+0xb2>\n 57f:\t85 c0                \ttest   %eax,%eax\n 581:\t79 14                \tjns    597 <main+0xca>\n 583:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 588:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 58d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 592:\te8 00 00 00 00       \tcallq  597 <main+0xca>\n 597:\tc7 45 cc 01 00 00 00 \tmovl   $0x1,-0x34(%rbp)\n 59e:\tc7 45 c4 02 00 00 00 \tmovl   $0x2,-0x3c(%rbp)\n 5a5:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 5a8:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n 5ab:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 5ae:\t89 45 c0             \tmov    %eax,-0x40(%rbp)\n 5b1:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n 5b5:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n 5b9:\t48 89 d1             \tmov    %rdx,%rcx\n 5bc:\tba 00 00 00 00       \tmov    $0x0,%edx\n 5c1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 5c6:\t48 89 c7             \tmov    %rax,%rdi\n 5c9:\te8 00 00 00 00       \tcallq  5ce <main+0x101>\n 5ce:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 5d2:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n 5d6:\t48 89 d1             \tmov    %rdx,%rcx\n 5d9:\tba 00 00 00 00       \tmov    $0x0,%edx\n 5de:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 5e3:\t48 89 c7             \tmov    %rax,%rdi\n 5e6:\te8 00 00 00 00       \tcallq  5eb <main+0x11e>\n 5eb:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 5ee:\tba 00 00 00 00       \tmov    $0x0,%edx\n 5f3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 5f8:\t89 c7                \tmov    %eax,%edi\n 5fa:\te8 00 00 00 00       \tcallq  5ff <main+0x132>\n 5ff:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 602:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n 606:\t79 11                \tjns    619 <main+0x14c>\n 608:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 60d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 612:\te8 00 00 00 00       \tcallq  617 <main+0x14a>\n 617:\teb 34                \tjmp    64d <main+0x180>\n 619:\tbf 04 00 00 00       \tmov    $0x4,%edi\n 61e:\te8 00 00 00 00       \tcallq  623 <main+0x156>\n 623:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 627:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 62b:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n 62e:\t89 10                \tmov    %edx,(%rax)\n 630:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 634:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n 638:\t48 89 d1             \tmov    %rdx,%rcx\n 63b:\tba 00 00 00 00       \tmov    $0x0,%edx\n 640:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 645:\t48 89 c7             \tmov    %rax,%rdi\n 648:\te8 00 00 00 00       \tcallq  64d <main+0x180>\n 64d:\teb 9c                \tjmp    5eb <main+0x11e>\n", "code_s": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  pthread_t <span class=\"supfact\">newthread</span>;\n  int <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">arg</span>[Number];\n  struct sockaddr <span class=\"supfact\">s</span>;\n  void *<span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">fd</span>;\n  int <span class=\"supfact\">v10</span>;\n  int <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = Number;\n  myqueue_init(Number L, argv, envp);\n  <span class=\"supfact\">v11</span> = Number;\n  <span class=\"supfact\">v10</span> = Number;\n  <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.sa_family = Number;\n  *(_WORD *)<span class=\"supfact\">s</span>.sa_data = htons(Number);\n  *(_DWORD *)&<span class=\"supfact\">s</span>.sa_data[Number] = htonl(Number);\n  if (bind(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">s</span>, Number) == Number)\n    err(Number, String);\n  if (listen(<span class=\"supfact\">fd</span>, Number) < Number)\n    err(Number, String);\n  <span class=\"supfact\">arg</span>[Number] = Number;\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  <span class=\"supfact\">arg</span>[Number] = <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v4</span>[Number] = <span class=\"supfact\">v11</span>;\n  pthread_create(&<span class=\"supfact\">newthread</span>, Number L,\n                 (void *(*)(void *))bcast_thread_func, <span class=\"supfact\">arg</span>);\n  pthread_create(&<span class=\"supfact\">newthread</span>, Number L,\n                 (void *(*)(void *))bcast_thread_func, <span class=\"supfact\">v4</span>);\n  while (Number) {\n    <span class=\"supfact\">v8</span> = accept(<span class=\"supfact\">fd</span>, Number L, Number L);\n    if (<span class=\"supfact\">v8</span> >= Number) {\n      <span class=\"supfact\">v7</span> = malloc(Number);\n      *(_DWORD *)<span class=\"supfact\">v7</span> = <span class=\"supfact\">v8</span>;\n      pthread_create(&<span class=\"supfact\">newthread</span>, Number L,\n                     client_server_thread_func, <span class=\"supfact\">v7</span>);\n    } else {\n      warn(String);\n    }\n  }\n}", "code_t": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  pthread_t <span class=\"supfact\">tid</span>;\n  bcast_thread_arg <span class=\"supfact\">bta2</span>;\n  bcast_thread_arg <span class=\"supfact\">bta1</span>;\n  sockaddr_in <span class=\"supfact\">addr</span>;\n  int *<span class=\"supfact\">p</span>;\n  int <span class=\"supfact\">cfd</span>;\n  int <span class=\"supfact\">tcp_sfd</span>;\n  int <span class=\"supfact\">K</span>;\n  int <span class=\"supfact\">L</span>;\n  int <span class=\"supfact\">N</span>;\n  <span class=\"supfact\">N</span> = Number;\n  myqueue_init(Number <span class=\"supfact\">L</span>, argv, envp);\n  <span class=\"supfact\">L</span> = Number;\n  <span class=\"supfact\">K</span> = Number;\n  <span class=\"supfact\">tcp_sfd</span> = socket(Number, Number, Number);\n  memset(&<span class=\"supfact\">addr</span>, Number, sizeof(<span class=\"supfact\">addr</span>));\n  <span class=\"supfact\">addr</span>.sin_family = Number;\n  <span class=\"supfact\">addr</span>.sin_port = htons(Number);\n  <span class=\"supfact\">addr</span>.sin_addr.s_addr = htonl(Number);\n  if (bind(<span class=\"supfact\">tcp_sfd</span>,\n           (const struct sockaddr *)&<span class=\"supfact\">addr</span>, Number) == Number)\n    err(Number, String);\n  if (listen(<span class=\"supfact\">tcp_sfd</span>, Number) < Number)\n    err(Number, String);\n  <span class=\"supfact\">bta1</span>.type = Number;\n  <span class=\"supfact\">bta2</span>.type = Number;\n  <span class=\"supfact\">bta1</span>.KL = <span class=\"supfact\">K</span>;\n  <span class=\"supfact\">bta2</span>.KL = <span class=\"supfact\">L</span>;\n  pthread_create(&<span class=\"supfact\">tid</span>, Number <span class=\"supfact\">L</span>,\n                 (void *(*)(void *))bcast_thread_func, &<span class=\"supfact\">bta1</span>);\n  pthread_create(&<span class=\"supfact\">tid</span>, Number <span class=\"supfact\">L</span>,\n                 (void *(*)(void *))bcast_thread_func, &<span class=\"supfact\">bta2</span>);\n  while (Number) {\n    <span class=\"supfact\">cfd</span> =\n        accept(<span class=\"supfact\">tcp_sfd</span>, Number <span class=\"supfact\">L</span>,\n               Number <span class=\"supfact\">L</span>);\n    if (<span class=\"supfact\">cfd</span> >= Number) {\n      <span class=\"supfact\">p</span> = (int *)malloc(Number);\n      *<span class=\"supfact\">p</span> = <span class=\"supfact\">cfd</span>;\n      pthread_create(&<span class=\"supfact\">tid</span>, Number <span class=\"supfact\">L</span>,\n                     (void *(*)(void *))client_server_thread_func,\n                     <span class=\"supfact\">p</span>);\n    } else {\n      warn(String);\n    }\n  }\n}", "var": [{"name": "s", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "wintersteiger", "repo_name": "openenclave", "path": "wintersteiger/openenclave/e11399632a6dc82f7ad3506a76945d1c48efe40f019914e0cdc6adc9d28628e7", "path_in_repo": "wintersteiger/openenclave/3rdparty/musl/musl/obj/src/passwd/getspnam_r.o", "objdump": "0000000000000000 <getspnam_r>:\n   0:\t48 81 ec 28 02 00 00 \tsub    $0x228,%rsp\n   7:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n   c:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n  11:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n  16:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n  1b:\t4c 89 44 24 08       \tmov    %r8,0x8(%rsp)\n  20:\t48 c7 84 24 18 02 00 \tmovq   $0x0,0x218(%rsp)\n  27:\t00 00 00 00 00 \n  2c:\tc7 84 24 14 02 00 00 \tmovl   $0x0,0x214(%rsp)\n  33:\t00 00 00 00 \n  37:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  3c:\t48 89 c7             \tmov    %rax,%rdi\n  3f:\te8 00 00 00 00       \tcallq  44 <getspnam_r+0x44>\n  44:\t48 89 84 24 08 02 00 \tmov    %rax,0x208(%rsp)\n  4b:\t00 \n  4c:\tc7 84 24 10 02 00 00 \tmovl   $0x0,0x210(%rsp)\n  53:\t00 00 00 00 \n  57:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  5c:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  63:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  68:\t0f b6 00             \tmovzbl (%rax),%eax\n  6b:\t3c 2e                \tcmp    $0x2e,%al\n  6d:\t74 22                \tje     91 <getspnam_r+0x91>\n  6f:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  74:\tbe 2f 00 00 00       \tmov    $0x2f,%esi\n  79:\t48 89 c7             \tmov    %rax,%rdi\n  7c:\te8 00 00 00 00       \tcallq  81 <getspnam_r+0x81>\n  81:\t48 85 c0             \ttest   %rax,%rax\n  84:\t75 0b                \tjne    91 <getspnam_r+0x91>\n  86:\t48 83 bc 24 08 02 00 \tcmpq   $0x0,0x208(%rsp)\n  8d:\t00 00 \n  8f:\t75 12                \tjne    a3 <getspnam_r+0xa3>\n  91:\te8 00 00 00 00       \tcallq  96 <getspnam_r+0x96>\n  96:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  9c:\t8b 00                \tmov    (%rax),%eax\n  9e:\te9 cd 02 00 00       \tjmpq   370 <getspnam_r+0x370>\n  a3:\t48 8b 84 24 08 02 00 \tmov    0x208(%rsp),%rax\n  aa:\t00 \n  ab:\t48 83 c0 64          \tadd    $0x64,%rax\n  af:\t48 39 44 24 10       \tcmp    %rax,0x10(%rsp)\n  b4:\t73 12                \tjae    c8 <getspnam_r+0xc8>\n  b6:\te8 00 00 00 00       \tcallq  bb <getspnam_r+0xbb>\n  bb:\tc7 00 22 00 00 00    \tmovl   $0x22,(%rax)\n  c1:\t8b 00                \tmov    (%rax),%eax\n  c3:\te9 a8 02 00 00       \tjmpq   370 <getspnam_r+0x370>\n  c8:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n  cd:\t48 8d 84 24 e0 00 00 \tlea    0xe0(%rsp),%rax\n  d4:\t00 \n  d5:\t48 89 d1             \tmov    %rdx,%rcx\n  d8:\tba 00 00 00 00       \tmov    $0x0,%edx\n  dd:\tbe 13 01 00 00       \tmov    $0x113,%esi\n  e2:\t48 89 c7             \tmov    %rax,%rdi\n  e5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  ea:\te8 00 00 00 00       \tcallq  ef <getspnam_r+0xef>\n  ef:\t3d 12 01 00 00       \tcmp    $0x112,%eax\n  f4:\t76 12                \tjbe    108 <getspnam_r+0x108>\n  f6:\te8 00 00 00 00       \tcallq  fb <getspnam_r+0xfb>\n  fb:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n 101:\t8b 00                \tmov    (%rax),%eax\n 103:\te9 68 02 00 00       \tjmpq   370 <getspnam_r+0x370>\n 108:\t48 8d 84 24 e0 00 00 \tlea    0xe0(%rsp),%rax\n 10f:\t00 \n 110:\tbe 00 08 0a 00       \tmov    $0xa0800,%esi\n 115:\t48 89 c7             \tmov    %rax,%rdi\n 118:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 11d:\te8 00 00 00 00       \tcallq  122 <getspnam_r+0x122>\n 122:\t89 84 24 04 02 00 00 \tmov    %eax,0x204(%rsp)\n 129:\t83 bc 24 04 02 00 00 \tcmpl   $0x0,0x204(%rsp)\n 130:\t00 \n 131:\t0f 88 b2 00 00 00    \tjs     1e9 <getspnam_r+0x1e9>\n 137:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n 13c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 141:\tb9 12 00 00 00       \tmov    $0x12,%ecx\n 146:\t48 89 d7             \tmov    %rdx,%rdi\n 149:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n 14c:\te8 00 00 00 00       \tcallq  151 <getspnam_r+0x151>\n 151:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n 157:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n 15c:\t8b 84 24 04 02 00 00 \tmov    0x204(%rsp),%eax\n 163:\t48 89 d6             \tmov    %rdx,%rsi\n 166:\t89 c7                \tmov    %eax,%edi\n 168:\te8 00 00 00 00       \tcallq  16d <getspnam_r+0x16d>\n 16d:\t85 c0                \ttest   %eax,%eax\n 16f:\t75 36                \tjne    1a7 <getspnam_r+0x1a7>\n 171:\t8b 44 24 48          \tmov    0x48(%rsp),%eax\n 175:\t25 00 f0 00 00       \tand    $0xf000,%eax\n 17a:\t3d 00 80 00 00       \tcmp    $0x8000,%eax\n 17f:\t75 26                \tjne    1a7 <getspnam_r+0x1a7>\n 181:\t8b 84 24 04 02 00 00 \tmov    0x204(%rsp),%eax\n 188:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 18d:\t89 c7                \tmov    %eax,%edi\n 18f:\te8 00 00 00 00       \tcallq  194 <getspnam_r+0x194>\n 194:\t48 89 84 24 18 02 00 \tmov    %rax,0x218(%rsp)\n 19b:\t00 \n 19c:\t48 83 bc 24 18 02 00 \tcmpq   $0x0,0x218(%rsp)\n 1a3:\t00 00 \n 1a5:\t75 70                \tjne    217 <getspnam_r+0x217>\n 1a7:\t48 8d 84 24 dc 00 00 \tlea    0xdc(%rsp),%rax\n 1ae:\t00 \n 1af:\t48 89 c6             \tmov    %rax,%rsi\n 1b2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 1b7:\te8 00 00 00 00       \tcallq  1bc <getspnam_r+0x1bc>\n 1bc:\t8b 84 24 04 02 00 00 \tmov    0x204(%rsp),%eax\n 1c3:\t89 c7                \tmov    %eax,%edi\n 1c5:\te8 00 00 00 00       \tcallq  1ca <getspnam_r+0x1ca>\n 1ca:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n 1d1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1d6:\t89 c7                \tmov    %eax,%edi\n 1d8:\te8 00 00 00 00       \tcallq  1dd <getspnam_r+0x1dd>\n 1dd:\te8 00 00 00 00       \tcallq  1e2 <getspnam_r+0x1e2>\n 1e2:\t8b 00                \tmov    (%rax),%eax\n 1e4:\te9 87 01 00 00       \tjmpq   370 <getspnam_r+0x370>\n 1e9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1ee:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1f3:\te8 00 00 00 00       \tcallq  1f8 <getspnam_r+0x1f8>\n 1f8:\t48 89 84 24 18 02 00 \tmov    %rax,0x218(%rsp)\n 1ff:\t00 \n 200:\t48 83 bc 24 18 02 00 \tcmpq   $0x0,0x218(%rsp)\n 207:\t00 00 \n 209:\t75 0c                \tjne    217 <getspnam_r+0x217>\n 20b:\te8 00 00 00 00       \tcallq  210 <getspnam_r+0x210>\n 210:\t8b 00                \tmov    (%rax),%eax\n 212:\te9 59 01 00 00       \tjmpq   370 <getspnam_r+0x370>\n 217:\t48 8b 94 24 18 02 00 \tmov    0x218(%rsp),%rdx\n 21e:\t00 \n 21f:\t48 8d 84 24 c0 00 00 \tlea    0xc0(%rsp),%rax\n 226:\t00 \n 227:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 22c:\t48 89 c7             \tmov    %rax,%rdi\n 22f:\te8 00 00 00 00       \tcallq  234 <getspnam_r+0x234>\n 234:\te9 bc 00 00 00       \tjmpq   2f5 <getspnam_r+0x2f5>\n 239:\t83 bc 24 10 02 00 00 \tcmpl   $0x0,0x210(%rsp)\n 240:\t00 \n 241:\t75 38                \tjne    27b <getspnam_r+0x27b>\n 243:\t48 8b 94 24 08 02 00 \tmov    0x208(%rsp),%rdx\n 24a:\t00 \n 24b:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n 250:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n 255:\t48 89 ce             \tmov    %rcx,%rsi\n 258:\t48 89 c7             \tmov    %rax,%rdi\n 25b:\te8 00 00 00 00       \tcallq  260 <getspnam_r+0x260>\n 260:\t85 c0                \ttest   %eax,%eax\n 262:\t75 17                \tjne    27b <getspnam_r+0x27b>\n 264:\t48 8b 54 24 18       \tmov    0x18(%rsp),%rdx\n 269:\t48 8b 84 24 08 02 00 \tmov    0x208(%rsp),%rax\n 270:\t00 \n 271:\t48 01 d0             \tadd    %rdx,%rax\n 274:\t0f b6 00             \tmovzbl (%rax),%eax\n 277:\t3c 3a                \tcmp    $0x3a,%al\n 279:\t74 28                \tje     2a3 <getspnam_r+0x2a3>\n 27b:\t48 8b 84 24 f8 01 00 \tmov    0x1f8(%rsp),%rax\n 282:\t00 \n 283:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n 287:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 28c:\t48 01 d0             \tadd    %rdx,%rax\n 28f:\t0f b6 00             \tmovzbl (%rax),%eax\n 292:\t3c 0a                \tcmp    $0xa,%al\n 294:\t0f 95 c0             \tsetne  %al\n 297:\t0f b6 c0             \tmovzbl %al,%eax\n 29a:\t89 84 24 10 02 00 00 \tmov    %eax,0x210(%rsp)\n 2a1:\teb 52                \tjmp    2f5 <getspnam_r+0x2f5>\n 2a3:\t48 8b 84 24 f8 01 00 \tmov    0x1f8(%rsp),%rax\n 2aa:\t00 \n 2ab:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n 2af:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 2b4:\t48 01 d0             \tadd    %rdx,%rax\n 2b7:\t0f b6 00             \tmovzbl (%rax),%eax\n 2ba:\t3c 0a                \tcmp    $0xa,%al\n 2bc:\t74 0d                \tje     2cb <getspnam_r+0x2cb>\n 2be:\tc7 84 24 14 02 00 00 \tmovl   $0x22,0x214(%rsp)\n 2c5:\t22 00 00 00 \n 2c9:\teb 71                \tjmp    33c <getspnam_r+0x33c>\n 2cb:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n 2d0:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 2d5:\t48 89 d6             \tmov    %rdx,%rsi\n 2d8:\t48 89 c7             \tmov    %rax,%rdi\n 2db:\te8 00 00 00 00       \tcallq  2e0 <getspnam_r+0x2e0>\n 2e0:\t85 c0                \ttest   %eax,%eax\n 2e2:\t79 02                \tjns    2e6 <getspnam_r+0x2e6>\n 2e4:\teb 0f                \tjmp    2f5 <getspnam_r+0x2f5>\n 2e6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 2eb:\t48 8b 54 24 20       \tmov    0x20(%rsp),%rdx\n 2f0:\t48 89 10             \tmov    %rdx,(%rax)\n 2f3:\teb 47                \tjmp    33c <getspnam_r+0x33c>\n 2f5:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 2fa:\t89 c1                \tmov    %eax,%ecx\n 2fc:\t48 8b 94 24 18 02 00 \tmov    0x218(%rsp),%rdx\n 303:\t00 \n 304:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 309:\t89 ce                \tmov    %ecx,%esi\n 30b:\t48 89 c7             \tmov    %rax,%rdi\n 30e:\te8 00 00 00 00       \tcallq  313 <getspnam_r+0x313>\n 313:\t48 85 c0             \ttest   %rax,%rax\n 316:\t74 24                \tje     33c <getspnam_r+0x33c>\n 318:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 31d:\t48 89 c7             \tmov    %rax,%rdi\n 320:\te8 00 00 00 00       \tcallq  325 <getspnam_r+0x325>\n 325:\t48 89 84 24 f8 01 00 \tmov    %rax,0x1f8(%rsp)\n 32c:\t00 \n 32d:\t48 83 bc 24 f8 01 00 \tcmpq   $0x0,0x1f8(%rsp)\n 334:\t00 00 \n 336:\t0f 85 fd fe ff ff    \tjne    239 <getspnam_r+0x239>\n 33c:\t48 8d 84 24 c0 00 00 \tlea    0xc0(%rsp),%rax\n 343:\t00 \n 344:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 349:\t48 89 c7             \tmov    %rax,%rdi\n 34c:\te8 00 00 00 00       \tcallq  351 <getspnam_r+0x351>\n 351:\t83 bc 24 14 02 00 00 \tcmpl   $0x0,0x214(%rsp)\n 358:\t00 \n 359:\t74 0e                \tje     369 <getspnam_r+0x369>\n 35b:\te8 00 00 00 00       \tcallq  360 <getspnam_r+0x360>\n 360:\t8b 94 24 14 02 00 00 \tmov    0x214(%rsp),%edx\n 367:\t89 10                \tmov    %edx,(%rax)\n 369:\t8b 84 24 14 02 00 00 \tmov    0x214(%rsp),%eax\n 370:\t48 81 c4 28 02 00 00 \tadd    $0x228,%rsp\n 377:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall getspnam_r(const char *a1, __int64 a2, char *a3, size_t a4,\n                              __int64 *a5) {\n  int *v5;\n  int *v7;\n  int *v8;\n  struct stat <span class=\"supfact\">buf</span>;\n  char <span class=\"supfact\">v13</span>[Number];\n  int <span class=\"supfact\">oldstate</span>;\n  char <span class=\"supfact\">file</span>[Number];\n  size_t <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">fd</span>;\n  size_t <span class=\"supfact\">n</span>;\n  _BOOL4 <span class=\"supfact\">v19</span>;\n  unsigned int <span class=\"supfact\">v20</span>;\n  FILE *<span class=\"supfact\">stream</span>;\n  <span class=\"supfact\">stream</span> = Number L;\n  <span class=\"supfact\">v20</span> = Number;\n  <span class=\"supfact\">n</span> = strlen(a1);\n  <span class=\"supfact\">v19</span> = Number;\n  *a5 = Number L;\n  if (*a1 == Number || strchr(a1, Number) || !<span class=\"supfact\">n</span>) {\n    v5 = _errno_location();\n    *v5 = Number;\n    return (unsigned int)*v5;\n  }\n  if (a4 < <span class=\"supfact\">n</span> + Number) {\n    v7 = _errno_location();\n    *v7 = Number;\n    return (unsigned int)*v7;\n  }\n  if ((unsigned int)snprintf(<span class=\"supfact\">file</span>, Number, String, a1) >\n      Number) {\n    v8 = _errno_location();\n    *v8 = Number;\n    return (unsigned int)*v8;\n  }\n  <span class=\"supfact\">fd</span> = open(<span class=\"supfact\">file</span>, Number);\n  if (<span class=\"supfact\">fd</span> < Number) {\n    <span class=\"supfact\">stream</span> = fopen(String, String);\n    if (!<span class=\"supfact\">stream</span>)\n      return (unsigned int)*_errno_location();\n  } else {\n    memset(&<span class=\"supfact\">buf</span>, Number, sizeof(<span class=\"supfact\">buf</span>));\n    *_errno_location() = Number;\n    if (fstat(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">buf</span>) ||\n        (<span class=\"supfact\">buf</span>.st_mode & Number) != Number ||\n        (<span class=\"supfact\">stream</span> = fdopen(<span class=\"supfact\">fd</span>, String)) ==\n            Number L) {\n      pthread_setcancelstate(Number, &<span class=\"supfact\">oldstate</span>);\n      close(<span class=\"supfact\">fd</span>);\n      pthread_setcancelstate(<span class=\"supfact\">oldstate</span>, Number L);\n      return (unsigned int)*_errno_location();\n    }\n  }\n  pthread_cleanup_push(<span class=\"supfact\">v13</span>, cleanup, <span class=\"supfact\">stream</span>);\n  while (fgets(a3, a4, <span class=\"supfact\">stream</span>)) {\n    <span class=\"supfact\">v16</span> = strlen(a3);\n    if (!<span class=\"supfact\">v16</span>)\n      break;\n    if (!<span class=\"supfact\">v19</span> && !strncmp(a1, a3, <span class=\"supfact\">n</span>) &&\n        a3[<span class=\"supfact\">n</span>] == Number) {\n      if (a3[<span class=\"supfact\">v16</span> - Number] != Number) {\n        <span class=\"supfact\">v20</span> = Number;\n        break;\n      }\n      if ((int)_parsespent(a3, a2) >= Number) {\n        *a5 = a2;\n        break;\n      }\n    } else {\n      <span class=\"supfact\">v19</span> = a3[<span class=\"supfact\">v16</span> - Number] != Number;\n    }\n  }\n  pthread_cleanup_pop(<span class=\"supfact\">v13</span>, Number L);\n  if (<span class=\"supfact\">v20</span>)\n    *_errno_location() = <span class=\"supfact\">v20</span>;\n  return <span class=\"supfact\">v20</span>;\n}", "code_t": "int __cdecl getspnam_r(const char *name, spwd *sp_0, char *buf, size_t size,\n                       spwd **res) {\n  int *v5;\n  int *v7;\n  int *v8;\n  stat <span class=\"supfact\">st</span>;\n  __ptcb <span class=\"supfact\">__cb</span>;\n  int <span class=\"supfact\">cs_0</span>;\n  char <span class=\"supfact\">path</span>[Number];\n  size_t <span class=\"supfact\">k</span>;\n  int <span class=\"supfact\">fd</span>;\n  size_t <span class=\"supfact\">l</span>;\n  int <span class=\"supfact\">skip</span>;\n  int <span class=\"supfact\">rv</span>;\n  FILE *<span class=\"supfact\">f</span>;\n  <span class=\"supfact\">f</span> = Number L;\n  <span class=\"supfact\">rv</span> = Number;\n  <span class=\"supfact\">l</span> = strlen(name);\n  <span class=\"supfact\">skip</span> = Number;\n  *res = Number L;\n  if (*name == Number || strchr(name, Number) || !<span class=\"supfact\">l</span>) {\n    v5 = _errno_location();\n    *v5 = Number;\n    return *v5;\n  }\n  if (size < <span class=\"supfact\">l</span> + Number) {\n    v7 = _errno_location();\n    *v7 = Number;\n    return *v7;\n  }\n  if ((unsigned int)snprintf(<span class=\"supfact\">path</span>, Number, String, name) >\n      Number) {\n    v8 = _errno_location();\n    *v8 = Number;\n    return *v8;\n  }\n  <span class=\"supfact\">fd</span> = open(<span class=\"supfact\">path</span>, Number);\n  if (<span class=\"supfact\">fd</span> < Number) {\n    <span class=\"supfact\">f</span> = fopen(String, String);\n    if (!<span class=\"supfact\">f</span>)\n      return *_errno_location();\n  } else {\n    memset(&<span class=\"supfact\">st</span>, Number, sizeof(<span class=\"supfact\">st</span>));\n    *_errno_location() = Number;\n    if (fstat(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">st</span>) ||\n        (<span class=\"supfact\">st</span>.st_mode & Number) != Number ||\n        (<span class=\"supfact\">f</span> = fdopen(<span class=\"supfact\">fd</span>, String)) == Number L) {\n      pthread_setcancelstate(Number, &<span class=\"supfact\">cs_0</span>);\n      close(<span class=\"supfact\">fd</span>);\n      pthread_setcancelstate(<span class=\"supfact\">cs_0</span>, Number L);\n      return *_errno_location();\n    }\n  }\n  pthread_cleanup_push(&<span class=\"supfact\">__cb</span>, cleanup, <span class=\"supfact\">f</span>);\n  while (fgets(buf, size, <span class=\"supfact\">f</span>)) {\n    <span class=\"supfact\">k</span> = strlen(buf);\n    if (!<span class=\"supfact\">k</span>)\n      break;\n    if (!<span class=\"supfact\">skip</span> && !strncmp(name, buf, <span class=\"supfact\">l</span>) &&\n        buf[<span class=\"supfact\">l</span>] == Number) {\n      if (buf[<span class=\"supfact\">k</span> - Number] != Number) {\n        <span class=\"supfact\">rv</span> = Number;\n        break;\n      }\n      if (_parsespent(buf, sp_0) >= Number) {\n        *res = sp_0;\n        break;\n      }\n    } else {\n      <span class=\"supfact\">skip</span> = buf[<span class=\"supfact\">k</span> - Number] != Number;\n    }\n  }\n  pthread_cleanup_pop(&<span class=\"supfact\">__cb</span>, Number L);\n  if (<span class=\"supfact\">rv</span>)\n    *_errno_location() = <span class=\"supfact\">rv</span>;\n  return <span class=\"supfact\">rv</span>;\n}", "var": [{"name": "v13", "type": "char[24]", "ref_name": "__cb", "ref_type": "struct __ptcb { void (*)(void *) __f; void * __x; __ptcb * __next; }"}, {"name": "buf", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { dev_t st_dev; ino_t st_ino; nlink_t st_nlink; mode_t st_mode; uid_t st_uid; gid_t st_gid; unsigned int __pad0; dev_t st_rdev; off_t st_size; blksize_t st_blksize; blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __int64[3] __unused; }"}], "body_in_train": false}, {"repo_owner": "mortang2410", "repo_name": "tabbed", "path": "mortang2410/tabbed/e279090c2caeb8b1774673ac9f4e718cfaae2b813169344649b6592c5ce6d8a0", "path_in_repo": "mortang2410/tabbed//tabbed", "objdump": "", "code_s": "int __fastcall sub_405915(Window a1, char *a2) {\n  int result;\n  char *<span class=\"supfact\">list</span>;\n  Window <span class=\"supfact\">v4</span>;\n  XTextProperty <span class=\"supfact\">text_prop_return</span>;\n  <span class=\"supfact\">v4</span> = a1;\n  <span class=\"supfact\">list</span> = a2;\n  result = XmbTextListToTextProperty(display, &<span class=\"supfact\">list</span>, Number,\n                                     XCompoundTextStyle,\n                                     &<span class=\"supfact\">text_prop_return</span>);\n  if (!result) {\n    XSetTextProperty(display, <span class=\"supfact\">v4</span>,\n                     &<span class=\"supfact\">text_prop_return</span>, qword_40A870);\n    XSetTextProperty(display, <span class=\"supfact\">v4</span>,\n                     &<span class=\"supfact\">text_prop_return</span>, Number);\n    result = XFree(<span class=\"supfact\">text_prop_return</span>.value);\n  }\n  return result;\n}", "code_t": "int __fastcall sub_405915(Window a1, char *a2) {\n  int result;\n  char *<span class=\"supfact\">list</span>;\n  Window <span class=\"supfact\">v4</span>;\n  XTextProperty <span class=\"supfact\">text_prop_return</span>;\n  <span class=\"supfact\">v4</span> = a1;\n  <span class=\"supfact\">list</span> = a2;\n  result = XmbTextListToTextProperty(display, &<span class=\"supfact\">list</span>, Number,\n                                     XCompoundTextStyle,\n                                     &<span class=\"supfact\">text_prop_return</span>);\n  if (!result) {\n    XSetTextProperty(display, <span class=\"supfact\">v4</span>,\n                     &<span class=\"supfact\">text_prop_return</span>, qword_40A870);\n    XSetTextProperty(display, <span class=\"supfact\">v4</span>,\n                     &<span class=\"supfact\">text_prop_return</span>, Number);\n    result = XFree(<span class=\"supfact\">text_prop_return</span>.value);\n  }\n  return result;\n}", "var": [{"name": "text_prop_return", "type": "struct XTextProperty { unsigned __int8 * value; Atom encoding; int format; PADDING (4); unsigned __int64 nitems; }", "ref_name": "text_prop_return", "ref_type": "struct XTextProperty { unsigned __int8 * value; Atom encoding; int format; PADDING (4); unsigned __int64 nitems; }"}], "body_in_train": false}, {"repo_owner": "RSB4760", "repo_name": "apq8016_external_wpa_supplicant_8", "path": "RSB4760/apq8016_external_wpa_supplicant_8/2a7fab9c73429f714ec7f312a1572e3de6f9ff677b8014dd8f44b6f287bc11ba", "path_in_repo": "RSB4760/apq8016_external_wpa_supplicant_8/wpa_supplicant/dbus/dbus_new.o", "objdump": "0000000000000253 <wpas_dbus_signal_bss>:\n     253:\t55                   \tpush   %rbp\n     254:\t48 89 e5             \tmov    %rsp,%rbp\n     257:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n     25b:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n     25f:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n     263:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n     267:\t89 4d 84             \tmov    %ecx,-0x7c(%rbp)\n     26a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     26e:\t48 8b 00             \tmov    (%rax),%rax\n     271:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n     275:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     279:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     27e:\t0f 84 d0 00 00 00    \tje     354 <wpas_dbus_signal_bss+0x101>\n     284:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     288:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n     28f:\t48 85 c0             \ttest   %rax,%rax\n     292:\t0f 84 bc 00 00 00    \tje     354 <wpas_dbus_signal_bss+0x101>\n     298:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     29c:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n     2a3:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n     2a7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     2ac:\t48 89 c7             \tmov    %rax,%rdi\n     2af:\te8 00 00 00 00       \tcallq  2b4 <wpas_dbus_signal_bss+0x61>\n     2b4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     2b8:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     2bd:\t0f 84 94 00 00 00    \tje     357 <wpas_dbus_signal_bss+0x104>\n     2c3:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n     2c7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     2cb:\t48 89 d6             \tmov    %rdx,%rsi\n     2ce:\t48 89 c7             \tmov    %rax,%rdi\n     2d1:\te8 00 00 00 00       \tcallq  2d6 <wpas_dbus_signal_bss+0x83>\n     2d6:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n     2da:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     2de:\tbe 6f 00 00 00       \tmov    $0x6f,%esi\n     2e3:\t48 89 c7             \tmov    %rax,%rdi\n     2e6:\te8 00 00 00 00       \tcallq  2eb <wpas_dbus_signal_bss+0x98>\n     2eb:\t85 c0                \ttest   %eax,%eax\n     2ed:\t74 26                \tje     315 <wpas_dbus_signal_bss+0xc2>\n     2ef:\t83 7d 84 00          \tcmpl   $0x0,-0x7c(%rbp)\n     2f3:\t74 36                \tje     32b <wpas_dbus_signal_bss+0xd8>\n     2f5:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n     2f9:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n     2fd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     301:\t48 89 d1             \tmov    %rdx,%rcx\n     304:\tba 00 00 00 00       \tmov    $0x0,%edx\n     309:\t48 89 c7             \tmov    %rax,%rdi\n     30c:\te8 00 00 00 00       \tcallq  311 <wpas_dbus_signal_bss+0xbe>\n     311:\t85 c0                \ttest   %eax,%eax\n     313:\t75 16                \tjne    32b <wpas_dbus_signal_bss+0xd8>\n     315:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     31a:\tbf 05 00 00 00       \tmov    $0x5,%edi\n     31f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     324:\te8 00 00 00 00       \tcallq  329 <wpas_dbus_signal_bss+0xd6>\n     329:\teb 1b                \tjmp    346 <wpas_dbus_signal_bss+0xf3>\n     32b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     32f:\t48 8b 00             \tmov    (%rax),%rax\n     332:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n     336:\tba 00 00 00 00       \tmov    $0x0,%edx\n     33b:\t48 89 ce             \tmov    %rcx,%rsi\n     33e:\t48 89 c7             \tmov    %rax,%rdi\n     341:\te8 00 00 00 00       \tcallq  346 <wpas_dbus_signal_bss+0xf3>\n     346:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     34a:\t48 89 c7             \tmov    %rax,%rdi\n     34d:\te8 00 00 00 00       \tcallq  352 <wpas_dbus_signal_bss+0xff>\n     352:\teb 04                \tjmp    358 <wpas_dbus_signal_bss+0x105>\n     354:\t90                   \tnop\n     355:\teb 01                \tjmp    358 <wpas_dbus_signal_bss+0x105>\n     357:\t90                   \tnop\n     358:\tc9                   \tleaveq \n     359:\tc3                   \tretq   ", "code_s": "_QWORD *__fastcall wpas_dbus_signal_bss(__int64 a1, __int64 a2, __int64 a3,\n                                        int a4) {\n  _QWORD *result;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>[Number];\n  _QWORD *<span class=\"supfact\">v9</span>;\n  _QWORD *<span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v7</span> = a1;\n  <span class=\"supfact\">v6</span> = a2;\n  result = *(_QWORD **)(*(_QWORD *)a1 + Number L);\n  <span class=\"supfact\">v10</span> = result;\n  if (result) {\n    result = *(_QWORD **)(<span class=\"supfact\">v7</span> + Number);\n    if (result) {\n      result = (_QWORD *)dbus_message_new_signal(\n          *(_QWORD *)(<span class=\"supfact\">v7</span> + Number), String, a3);\n      <span class=\"supfact\">v9</span> = result;\n      if (result) {\n        dbus_message_iter_init_append(<span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>);\n        if ((unsigned int)dbus_message_iter_append_basic(\n                <span class=\"supfact\">v8</span>, Number L, &<span class=\"supfact\">v6</span>) &&\n            (!a4 || (unsigned int)wpa_dbus_get_object_properties(\n                        <span class=\"supfact\">v10</span>, <span class=\"supfact\">v6</span>, String,\n                        <span class=\"supfact\">v8</span>))) {\n          dbus_connection_send(*<span class=\"supfact\">v10</span>, <span class=\"supfact\">v9</span>,\n                               Number L);\n        } else {\n          wpa_printf(Number L, String);\n        }\n        result = (_QWORD *)dbus_message_unref(<span class=\"supfact\">v9</span>);\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl wpas_dbus_signal_bss(wpa_supplicant *wpa_s,\n                                  const char *bss_obj_path,\n                                  const char *sig_name, int properties) {\n  const char *<span class=\"supfact\">bss_obj_patha</span>;\n  wpa_supplicant *<span class=\"supfact\">wpa_sa</span>;\n  DBusMessageIter_0 <span class=\"supfact\">iter</span>;\n  DBusMessage_0 *<span class=\"supfact\">msg</span>;\n  wpas_dbus_priv *<span class=\"supfact\">iface</span>;\n  <span class=\"supfact\">wpa_sa</span> = wpa_s;\n  <span class=\"supfact\">bss_obj_patha</span> = bss_obj_path;\n  <span class=\"supfact\">iface</span> = wpa_s->global->dbus;\n  if (<span class=\"supfact\">iface</span>) {\n    if (<span class=\"supfact\">wpa_sa</span>->dbus_new_path) {\n      <span class=\"supfact\">msg</span> = (DBusMessage_0 *)dbus_message_new_signal(\n          <span class=\"supfact\">wpa_sa</span>->dbus_new_path, String, sig_name);\n      if (<span class=\"supfact\">msg</span>) {\n        dbus_message_iter_init_append(<span class=\"supfact\">msg</span>,\n                                      &<span class=\"supfact\">iter</span>);\n        if ((unsigned int)dbus_message_iter_append_basic(\n                &<span class=\"supfact\">iter</span>, Number L,\n                &<span class=\"supfact\">bss_obj_patha</span>) &&\n            (!properties ||\n             (unsigned int)wpa_dbus_get_object_properties(\n                 <span class=\"supfact\">iface</span>, <span class=\"supfact\">bss_obj_patha</span>, String,\n                 &<span class=\"supfact\">iter</span>))) {\n          dbus_connection_send(<span class=\"supfact\">iface</span>->con, <span class=\"supfact\">msg</span>,\n                               Number L);\n        } else {\n          wpa_printf(Number L, String);\n        }\n        dbus_message_unref(<span class=\"supfact\">msg</span>);\n      }\n    }\n  }\n}", "var": [{"name": "v8", "type": "struct DBusMessageIter_0 { void * dummy1; void * dummy2; dbus_uint32_t dummy3; int dummy4; int dummy5; int dummy6; int dummy7; int dummy8; int dummy9; int dummy10; int dummy11; int pad1; void * pad2; void * pad3; }", "ref_name": "iter", "ref_type": "struct DBusMessageIter_0 { void * dummy1; void * dummy2; dbus_uint32_t dummy3; int dummy4; int dummy5; int dummy6; int dummy7; int dummy8; int dummy9; int dummy10; int dummy11; int pad1; void * pad2; void * pad3; }"}], "body_in_train": false}, {"repo_owner": "ekoby", "repo_name": "uv-mbed", "path": "ekoby/uv-mbed/dcb8cfc19b1d723fd5fad9ae551b9f63adb87e9e6e82c5bbaf0a221013c62501", "path_in_repo": "ekoby/uv-mbed/deps/mbedtls/programs/ssl/ssl_mail_client", "objdump": "00000000004314c9 <mbedtls_mpi_write_string>:\n  4314c9:\t55                   \tpush   %rbp\n  4314ca:\t48 89 e5             \tmov    %rsp,%rbp\n  4314cd:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n  4314d1:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  4314d5:\t89 75 a4             \tmov    %esi,-0x5c(%rbp)\n  4314d8:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  4314dc:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n  4314e0:\t4c 89 45 88          \tmov    %r8,-0x78(%rbp)\n  4314e4:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4314eb:\t83 7d a4 01          \tcmpl   $0x1,-0x5c(%rbp)\n  4314ef:\t7e 06                \tjle    4314f7 <mbedtls_mpi_write_string+0x2e>\n  4314f1:\t83 7d a4 10          \tcmpl   $0x10,-0x5c(%rbp)\n  4314f5:\t7e 0a                \tjle    431501 <mbedtls_mpi_write_string+0x38>\n  4314f7:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n  4314fc:\te9 15 02 00 00       \tjmpq   431716 <mbedtls_mpi_write_string+0x24d>\n  431501:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  431505:\t48 89 c7             \tmov    %rax,%rdi\n  431508:\te8 72 fa ff ff       \tcallq  430f7f <mbedtls_mpi_bitlen>\n  43150d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  431511:\t83 7d a4 03          \tcmpl   $0x3,-0x5c(%rbp)\n  431515:\t7e 04                \tjle    43151b <mbedtls_mpi_write_string+0x52>\n  431517:\t48 d1 6d f0          \tshrq   -0x10(%rbp)\n  43151b:\t83 7d a4 0f          \tcmpl   $0xf,-0x5c(%rbp)\n  43151f:\t7e 04                \tjle    431525 <mbedtls_mpi_write_string+0x5c>\n  431521:\t48 d1 6d f0          \tshrq   -0x10(%rbp)\n  431525:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n  43152a:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n  43152f:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n  431534:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  431538:\t48 83 c0 01          \tadd    $0x1,%rax\n  43153c:\t48 83 e0 fe          \tand    $0xfffffffffffffffe,%rax\n  431540:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  431544:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  431548:\t48 3b 45 f0          \tcmp    -0x10(%rbp),%rax\n  43154c:\t73 15                \tjae    431563 <mbedtls_mpi_write_string+0x9a>\n  43154e:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  431552:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  431556:\t48 89 10             \tmov    %rdx,(%rax)\n  431559:\tb8 f8 ff ff ff       \tmov    $0xfffffff8,%eax\n  43155e:\te9 b3 01 00 00       \tjmpq   431716 <mbedtls_mpi_write_string+0x24d>\n  431563:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  431567:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  43156b:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  43156f:\t48 89 c7             \tmov    %rax,%rdi\n  431572:\te8 eb ef ff ff       \tcallq  430562 <mbedtls_mpi_init>\n  431577:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  43157b:\t8b 00                \tmov    (%rax),%eax\n  43157d:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  431580:\t75 14                \tjne    431596 <mbedtls_mpi_write_string+0xcd>\n  431582:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  431586:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  43158a:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  43158e:\tc6 00 2d             \tmovb   $0x2d,(%rax)\n  431591:\t48 83 6d 90 01       \tsubq   $0x1,-0x70(%rbp)\n  431596:\t83 7d a4 10          \tcmpl   $0x10,-0x5c(%rbp)\n  43159a:\t0f 85 f5 00 00 00    \tjne    431695 <mbedtls_mpi_write_string+0x1cc>\n  4315a0:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4315a4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4315a8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4315ac:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n  4315b3:\t00 \n  4315b4:\te9 cf 00 00 00       \tjmpq   431688 <mbedtls_mpi_write_string+0x1bf>\n  4315b9:\t48 c7 45 e0 08 00 00 \tmovq   $0x8,-0x20(%rbp)\n  4315c0:\t00 \n  4315c1:\te9 b2 00 00 00       \tjmpq   431678 <mbedtls_mpi_write_string+0x1af>\n  4315c6:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4315ca:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4315ce:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4315d2:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  4315d6:\t48 83 ea 08          \tsub    $0x8,%rdx\n  4315da:\t48 01 d0             \tadd    %rdx,%rax\n  4315dd:\t48 8b 10             \tmov    (%rax),%rdx\n  4315e0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4315e4:\t83 e8 01             \tsub    $0x1,%eax\n  4315e7:\tc1 e0 03             \tshl    $0x3,%eax\n  4315ea:\t89 c1                \tmov    %eax,%ecx\n  4315ec:\t48 d3 ea             \tshr    %cl,%rdx\n  4315ef:\t48 89 d0             \tmov    %rdx,%rax\n  4315f2:\t25 ff 00 00 00       \tand    $0xff,%eax\n  4315f7:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  4315fa:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n  4315fe:\t75 18                \tjne    431618 <mbedtls_mpi_write_string+0x14f>\n  431600:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  431605:\t75 11                \tjne    431618 <mbedtls_mpi_write_string+0x14f>\n  431607:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  43160b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  43160f:\t48 01 d0             \tadd    %rdx,%rax\n  431612:\t48 83 f8 02          \tcmp    $0x2,%rax\n  431616:\t75 5a                \tjne    431672 <mbedtls_mpi_write_string+0x1a9>\n  431618:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  43161b:\t8d 50 0f             \tlea    0xf(%rax),%edx\n  43161e:\t85 c0                \ttest   %eax,%eax\n  431620:\t0f 48 c2             \tcmovs  %edx,%eax\n  431623:\tc1 f8 04             \tsar    $0x4,%eax\n  431626:\t89 c1                \tmov    %eax,%ecx\n  431628:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  43162c:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  431630:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  431634:\t48 63 d1             \tmovslq %ecx,%rdx\n  431637:\t0f b6 92 20 aa 48 00 \tmovzbl 0x48aa20(%rdx),%edx\n  43163e:\t88 10                \tmov    %dl,(%rax)\n  431640:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  431643:\t99                   \tcltd   \n  431644:\tc1 ea 1c             \tshr    $0x1c,%edx\n  431647:\t01 d0                \tadd    %edx,%eax\n  431649:\t83 e0 0f             \tand    $0xf,%eax\n  43164c:\t29 d0                \tsub    %edx,%eax\n  43164e:\t89 c1                \tmov    %eax,%ecx\n  431650:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  431654:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  431658:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  43165c:\t48 63 d1             \tmovslq %ecx,%rdx\n  43165f:\t0f b6 92 20 aa 48 00 \tmovzbl 0x48aa20(%rdx),%edx\n  431666:\t88 10                \tmov    %dl,(%rax)\n  431668:\t48 c7 45 d8 01 00 00 \tmovq   $0x1,-0x28(%rbp)\n  43166f:\t00 \n  431670:\teb 01                \tjmp    431673 <mbedtls_mpi_write_string+0x1aa>\n  431672:\t90                   \tnop\n  431673:\t48 83 6d e0 01       \tsubq   $0x1,-0x20(%rbp)\n  431678:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  43167d:\t0f 85 43 ff ff ff    \tjne    4315c6 <mbedtls_mpi_write_string+0xfd>\n  431683:\t48 83 6d e8 01       \tsubq   $0x1,-0x18(%rbp)\n  431688:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  43168d:\t0f 85 26 ff ff ff    \tjne    4315b9 <mbedtls_mpi_write_string+0xf0>\n  431693:\teb 4b                \tjmp    4316e0 <mbedtls_mpi_write_string+0x217>\n  431695:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  431699:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  43169d:\t48 89 d6             \tmov    %rdx,%rsi\n  4316a0:\t48 89 c7             \tmov    %rax,%rdi\n  4316a3:\te8 6a f1 ff ff       \tcallq  430812 <mbedtls_mpi_copy>\n  4316a8:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4316ab:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4316af:\t75 52                \tjne    431703 <mbedtls_mpi_write_string+0x23a>\n  4316b1:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n  4316b4:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4316b7:\t75 07                \tjne    4316c0 <mbedtls_mpi_write_string+0x1f7>\n  4316b9:\tc7 45 b0 01 00 00 00 \tmovl   $0x1,-0x50(%rbp)\n  4316c0:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n  4316c4:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n  4316c8:\t8b 75 a4             \tmov    -0x5c(%rbp),%esi\n  4316cb:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  4316cf:\t48 89 c7             \tmov    %rax,%rdi\n  4316d2:\te8 d3 fc ff ff       \tcallq  4313aa <mpi_write_hlp>\n  4316d7:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4316da:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4316de:\t75 26                \tjne    431706 <mbedtls_mpi_write_string+0x23d>\n  4316e0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4316e4:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  4316e8:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  4316ec:\tc6 00 00             \tmovb   $0x0,(%rax)\n  4316ef:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4316f3:\t48 2b 45 98          \tsub    -0x68(%rbp),%rax\n  4316f7:\t48 89 c2             \tmov    %rax,%rdx\n  4316fa:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4316fe:\t48 89 10             \tmov    %rdx,(%rax)\n  431701:\teb 04                \tjmp    431707 <mbedtls_mpi_write_string+0x23e>\n  431703:\t90                   \tnop\n  431704:\teb 01                \tjmp    431707 <mbedtls_mpi_write_string+0x23e>\n  431706:\t90                   \tnop\n  431707:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  43170b:\t48 89 c7             \tmov    %rax,%rdi\n  43170e:\te8 7c ee ff ff       \tcallq  43058f <mbedtls_mpi_free>\n  431713:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  431716:\tc9                   \tleaveq \n  431717:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_mpi_write_string(__int64 a1, int a2, char *a3,\n                                            size_t a4, unsigned __int64 *a5) {\n  char *v6;\n  char *v7;\n  char *v8;\n  char *v9;\n  int <span class=\"supfact\">v13</span>[Number];\n  char *<span class=\"supfact\">v14</span>;\n  int <span class=\"supfact\">v15</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  unsigned __int64 <span class=\"supfact\">v19</span>;\n  unsigned int <span class=\"supfact\">v20</span>;\n  <span class=\"supfact\">v20</span> = Number;\n  if (a2 <= Number || a2 > Number)\n    return Number L;\n  <span class=\"supfact\">v19</span> = mbedtls_mpi_bitlen(a1);\n  if (a2 > Number)\n    <span class=\"supfact\">v19</span> >>= Number;\n  if (a2 > Number)\n    <span class=\"supfact\">v19</span> >>= Number;\n  <span class=\"supfact\">v19</span> = (<span class=\"supfact\">v19</span> + Number) & Number;\n  if (a4 < <span class=\"supfact\">v19</span>) {\n    *a5 = <span class=\"supfact\">v19</span>;\n    return Number L;\n  }\n  <span class=\"supfact\">v14</span> = a3;\n  mbedtls_mpi_init((__int64)<span class=\"supfact\">v13</span>);\n  if (*(_DWORD *)a1 == Number) {\n    v6 = <span class=\"supfact\">v14</span>++;\n    *v6 = Number;\n    --a4;\n  }\n  if (a2 == Number) {\n    <span class=\"supfact\">v18</span> = *(_QWORD *)(a1 + Number);\n    <span class=\"supfact\">v16</span> = Number L;\n    while (<span class=\"supfact\">v18</span>) {\n      for (<span class=\"supfact\">i</span> = Number L; <span class=\"supfact\">i</span>;\n           --<span class=\"supfact\">i</span>) {\n        <span class=\"supfact\">v15</span> =\n            (unsigned __int8)(*(_QWORD *)(Number * <span class=\"supfact\">v18</span> -\n                                          Number + *(_QWORD *)(a1 + Number)) >>\n                              (Number *\n                               ((unsigned __int8)<span class=\"supfact\">i</span> - Number)));\n        if (<span class=\"supfact\">v15</span> || <span class=\"supfact\">v16</span> ||\n            <span class=\"supfact\">v18</span> + <span class=\"supfact\">i</span> == Number) {\n          v7 = <span class=\"supfact\">v14</span>++;\n          *v7 = byte_48AA20[<span class=\"supfact\">v15</span> >> Number];\n          v8 = <span class=\"supfact\">v14</span>++;\n          *v8 = byte_48AA20[<span class=\"supfact\">v15</span> % Number];\n          <span class=\"supfact\">v16</span> = Number L;\n        }\n      }\n      --<span class=\"supfact\">v18</span>;\n    }\n  } else {\n    <span class=\"supfact\">v20</span> = mbedtls_mpi_copy((__int64)<span class=\"supfact\">v13</span>, a1);\n    if (<span class=\"supfact\">v20</span>)\n      goto LABEL_29;\n    if (<span class=\"supfact\">v13</span>[Number] == Number)\n      <span class=\"supfact\">v13</span>[Number] = Number;\n    <span class=\"supfact\">v20</span> = mpi_write_hlp((__int64)<span class=\"supfact\">v13</span>, a2,\n                                        (void **)&<span class=\"supfact\">v14</span>, a4);\n    if (<span class=\"supfact\">v20</span>)\n      goto LABEL_29;\n  }\n  v9 = <span class=\"supfact\">v14</span>++;\n  *v9 = Number;\n  *a5 = <span class=\"supfact\">v14</span> - a3;\nLABEL_29:\n  mbedtls_mpi_free((__int64)<span class=\"supfact\">v13</span>);\n  return <span class=\"supfact\">v20</span>;\n}", "code_t": "int __cdecl mbedtls_mpi_write_string(const mbedtls_mpi_0 *X, int radix,\n                                     char *buf, size_t buflen, size_t *olen) {\n  char *v6;\n  char *v7;\n  char *v8;\n  char *v9;\n  mbedtls_mpi_0 <span class=\"supfact\">T</span>;\n  char *<span class=\"supfact\">p</span>;\n  int <span class=\"supfact\">c</span>;\n  size_t <span class=\"supfact\">k</span>;\n  size_t <span class=\"supfact\">j</span>;\n  size_t <span class=\"supfact\">i</span>;\n  size_t <span class=\"supfact\">n</span>;\n  int <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = Number;\n  if (radix <= Number || radix > Number)\n    return Number;\n  <span class=\"supfact\">n</span> = mbedtls_mpi_bitlen(X);\n  if (radix > Number)\n    <span class=\"supfact\">n</span> >>= Number;\n  if (radix > Number)\n    <span class=\"supfact\">n</span> >>= Number;\n  <span class=\"supfact\">n</span> = (<span class=\"supfact\">n</span> + Number) & Number;\n  if (buflen < <span class=\"supfact\">n</span>) {\n    *olen = <span class=\"supfact\">n</span>;\n    return Number;\n  }\n  <span class=\"supfact\">p</span> = buf;\n  mbedtls_mpi_init(&<span class=\"supfact\">T</span>);\n  if (X->s == Number) {\n    v6 = <span class=\"supfact\">p</span>++;\n    *v6 = Number;\n    --buflen;\n  }\n  if (radix == Number) {\n    <span class=\"supfact\">i</span> = X-><span class=\"supfact\">n</span>;\n    <span class=\"supfact\">k</span> = Number L;\n    while (<span class=\"supfact\">i</span>) {\n      for (<span class=\"supfact\">j</span> = Number L; <span class=\"supfact\">j</span>;\n           --<span class=\"supfact\">j</span>) {\n        <span class=\"supfact\">c</span> =\n            (unsigned __int8)(X-><span class=\"supfact\">p</span>[<span class=\"supfact\">i</span> -\n                                                   Number] >>\n                              (Number *\n                               ((unsigned __int8)<span class=\"supfact\">j</span> - Number)));\n        if (<span class=\"supfact\">c</span> || <span class=\"supfact\">k</span> ||\n            <span class=\"supfact\">i</span> + <span class=\"supfact\">j</span> == Number) {\n          v7 = <span class=\"supfact\">p</span>++;\n          *v7 = byte_48AA20[<span class=\"supfact\">c</span> >> Number];\n          v8 = <span class=\"supfact\">p</span>++;\n          *v8 = byte_48AA20[<span class=\"supfact\">c</span> % Number];\n          <span class=\"supfact\">k</span> = Number L;\n        }\n      }\n      --<span class=\"supfact\">i</span>;\n    }\n  } else {\n    <span class=\"supfact\">ret</span> = mbedtls_mpi_copy(&<span class=\"supfact\">T</span>, X);\n    if (<span class=\"supfact\">ret</span>)\n      goto cleanup;\n    if (<span class=\"supfact\">T</span>.s == Number)\n      <span class=\"supfact\">T</span>.s = Number;\n    <span class=\"supfact\">ret</span> =\n        mpi_write_hlp(&<span class=\"supfact\">T</span>, radix, &<span class=\"supfact\">p</span>, buflen);\n    if (<span class=\"supfact\">ret</span>)\n      goto cleanup;\n  }\n  v9 = <span class=\"supfact\">p</span>++;\n  *v9 = Number;\n  *olen = <span class=\"supfact\">p</span> - buf;\ncleanup:\n  mbedtls_mpi_free(&<span class=\"supfact\">T</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v13", "type": "struct mbedtls_mpi_0 { int s; PADDING (4); size_t n; mbedtls_mpi_uint * p; }", "ref_name": "T", "ref_type": "struct mbedtls_mpi_0 { int s; PADDING (4); size_t n; mbedtls_mpi_uint * p; }"}], "body_in_train": false}, {"repo_owner": "silverweed", "repo_name": "pkpterm", "path": "silverweed/pkpterm/fb808120c89a5bcb64b6cf3f1d262a674afae7f6a790587e2067e61e9babf589", "path_in_repo": "silverweed/pkpterm/src/utils.o", "objdump": "000000000000012b <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:\n 12b:\t55                   \tpush   %rbp\n 12c:\t48 89 e5             \tmov    %rsp,%rbp\n 12f:\t53                   \tpush   %rbx\n 130:\t48 83 ec 58          \tsub    $0x58,%rsp\n 134:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n 138:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n 13c:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n 140:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 144:\t48 89 d6             \tmov    %rdx,%rsi\n 147:\t48 89 c7             \tmov    %rax,%rdi\n 14a:\te8 00 00 00 00       \tcallq  14f <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24>\n 14f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 153:\t48 89 c7             \tmov    %rax,%rdi\n 156:\te8 00 00 00 00       \tcallq  15b <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>\n 15b:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n 15f:\t48 8d 55 b8          \tlea    -0x48(%rbp),%rdx\n 163:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n 167:\t48 89 d6             \tmov    %rdx,%rsi\n 16a:\t48 89 c7             \tmov    %rax,%rdi\n 16d:\te8 00 00 00 00       \tcallq  172 <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x47>\n 172:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 177:\te8 00 00 00 00       \tcallq  17c <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x51>\n 17c:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 180:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n 184:\t48 89 c7             \tmov    %rax,%rdi\n 187:\te8 00 00 00 00       \tcallq  18c <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x61>\n 18c:\t48 89 c3             \tmov    %rax,%rbx\n 18f:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 193:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n 197:\t48 89 d6             \tmov    %rdx,%rsi\n 19a:\t48 89 c7             \tmov    %rax,%rdi\n 19d:\te8 00 00 00 00       \tcallq  1a2 <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x77>\n 1a2:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n 1a6:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n 1aa:\t48 89 d6             \tmov    %rdx,%rsi\n 1ad:\t48 89 c7             \tmov    %rax,%rdi\n 1b0:\te8 00 00 00 00       \tcallq  1b5 <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>\n 1b5:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 1b9:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 1bd:\t48 8d 75 e8          \tlea    -0x18(%rbp),%rsi\n 1c1:\t48 89 d9             \tmov    %rbx,%rcx\n 1c4:\t48 89 c7             \tmov    %rax,%rdi\n 1c7:\te8 00 00 00 00       \tcallq  1cc <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa1>\n 1cc:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 1d0:\t48 89 c7             \tmov    %rax,%rdi\n 1d3:\te8 00 00 00 00       \tcallq  1d8 <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xad>\n 1d8:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 1dc:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n 1e0:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 1e4:\t48 89 d6             \tmov    %rdx,%rsi\n 1e7:\t48 89 c7             \tmov    %rax,%rdi\n 1ea:\te8 00 00 00 00       \tcallq  1ef <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>\n 1ef:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n 1f3:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n 1f7:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 1fb:\t48 89 ce             \tmov    %rcx,%rsi\n 1fe:\t48 89 c7             \tmov    %rax,%rdi\n 201:\te8 00 00 00 00       \tcallq  206 <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdb>\n 206:\teb 1c                \tjmp    224 <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf9>\n 208:\teb 00                \tjmp    20a <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xdf>\n 20a:\t48 89 c3             \tmov    %rax,%rbx\n 20d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 211:\t48 89 c7             \tmov    %rax,%rdi\n 214:\te8 00 00 00 00       \tcallq  219 <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee>\n 219:\t48 89 d8             \tmov    %rbx,%rax\n 21c:\t48 89 c7             \tmov    %rax,%rdi\n 21f:\te8 00 00 00 00       \tcallq  224 <_ZN7Pokepon5rtrimERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf9>\n 224:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 228:\t48 83 c4 58          \tadd    $0x58,%rsp\n 22c:\t5b                   \tpop    %rbx\n 22d:\t5d                   \tpop    %rbp\n 22e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Pokepon rtrim(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>;\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>[Number];\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(a1, a2);\n  <span class=\"supfact\">v5</span> =\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          end(a1);\n  __gnu_cxx __normal_iterator<\n      char const *, std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>>>\n      __normal_iterator<char *>(&<span class=\"supfact\">v4</span>, &<span class=\"supfact\">v5</span>);\n  <span class=\"supfact\">v9</span> = std ptr_fun<int, int>(&isspace);\n  v2 = std not1<std pointer_to_unary_function<int, int>>(&<span class=\"supfact\">v9</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      rend(<span class=\"supfact\">v10</span>, a1);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      rbegin(<span class=\"supfact\">v11</span>, a1);\n  std find_if<std reverse_iterator<__gnu_cxx __normal_iterator<\n                  char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>,\n              std unary_negate<std pointer_to_unary_function<int, int>>>(\n      <span class=\"supfact\">v8</span>, <span class=\"supfact\">v11</span>, <span class=\"supfact\">v10</span>, v2);\n  <span class=\"supfact\">v7</span> = std reverse_iterator<__gnu_cxx __normal_iterator<\n      char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>>>>\n      base(<span class=\"supfact\">v8</span>);\n  __gnu_cxx __normal_iterator<\n      char const *, std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>>>\n      __normal_iterator<char *>(&<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v7</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      erase(a1, <span class=\"supfact\">v6</span>, <span class=\"supfact\">v4</span>);\n  return a1;\n}", "code_t": "std string *__cdecl Pokepon rtrim(std string *retstr, const std string *ss_0) {\n  __gnu_cxx __normal_iterator<\n      char const *, std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>>>\n      <span class=\"supfact\">v3</span>;\n  __gnu_cxx __normal_iterator<\n      char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>>>\n      <span class=\"supfact\">__i</span>;\n  __gnu_cxx __normal_iterator<\n      char const *, std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>>>\n      <span class=\"supfact\">v5</span>;\n  __gnu_cxx __normal_iterator<\n      char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>>>\n      <span class=\"supfact\">v6</span>;\n  std reverse_iterator<__gnu_cxx __normal_iterator<\n      char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>>>>\n      <span class=\"supfact\">p___first</span>;\n  std pointer_to_unary_function<int, int> <span class=\"supfact\">__pred</span>;\n  std unary_negate<std pointer_to_unary_function<int, int>> <span class=\"supfact\">v9</span>;\n  std reverse_iterator<__gnu_cxx __normal_iterator<\n      char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>>>>\n      <span class=\"supfact\">p___last</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(retstr, ss_0);\n  <span class=\"supfact\">__i</span>._M_current = (char *)\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          end(retstr);\n  __gnu_cxx __normal_iterator<\n      char const *, std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>>>\n      __normal_iterator<char *>(&<span class=\"supfact\">v3</span>, &<span class=\"supfact\">__i</span>);\n  <span class=\"supfact\">__pred</span>._M_ptr =\n      std ptr_fun<int, int>((int (*)(int)) & isspace)._M_ptr;\n  std not1<std pointer_to_unary_function<int, int>>(&<span class=\"supfact\">__pred</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      rend(&<span class=\"supfact\">v9</span>, retstr);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      rbegin(&<span class=\"supfact\">p___last</span>, retstr);\n  std find_if<std reverse_iterator<__gnu_cxx __normal_iterator<\n                  char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>,\n              std unary_negate<std pointer_to_unary_function<int, int>>>(\n      &<span class=\"supfact\">p___first</span>, &<span class=\"supfact\">p___last</span>,\n      (std unary_negate<\n          std pointer_to_unary_function<int, int>>)&<span class=\"supfact\">v9</span>);\n  <span class=\"supfact\">v6</span>._M_current =\n      std reverse_iterator<__gnu_cxx __normal_iterator<\n          char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                           std allocator<char>>>>\n          base(&<span class=\"supfact\">p___first</span>)._M_current;\n  __gnu_cxx __normal_iterator<\n      char const *, std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>>>\n      __normal_iterator<char *>(&<span class=\"supfact\">v5</span>, &<span class=\"supfact\">v6</span>);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      erase(retstr, <span class=\"supfact\">v5</span>._M_current,\n            <span class=\"supfact\">v3</span>._M_current);\n  return retstr;\n}", "var": [{"name": "v11", "type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > > { __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > current; }", "ref_name": "p___last", "ref_type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > > { __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > current; }"}, {"name": "v10", "type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > > { __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > current; }", "ref_name": "v9", "ref_type": "struct std::unary_negate<std::pointer_to_unary_function<int,int> > { std::pointer_to_unary_function<int,int> _M_pred; }"}, {"name": "v9", "type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > > { __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > current; }", "ref_name": "__pred", "ref_type": "struct std::pointer_to_unary_function<int,int> { int (*)(int) _M_ptr; }"}, {"name": "v8", "type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > > { __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > current; }", "ref_name": "p___first", "ref_type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > > { __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > current; }"}, {"name": "v7", "type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > > { __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > current; }", "ref_name": "v6", "ref_type": "struct __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > { char * _M_current; }"}, {"name": "v6", "type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > > { __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > current; }", "ref_name": "v5", "ref_type": "struct __gnu_cxx::__normal_iterator<char const*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > { const char * _M_current; }"}, {"name": "v5", "type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > > { __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > current; }", "ref_name": "__i", "ref_type": "struct __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > { char * _M_current; }"}, {"name": "v4", "type": "struct std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > > { __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > current; }", "ref_name": "v3", "ref_type": "struct __gnu_cxx::__normal_iterator<char const*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > { const char * _M_current; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7c8b7a7781f1cadd00b86bd331a6acad366142cb3db9ab2fde20cee244c5ff14", "path_in_repo": "XanClic/qemu//qemu-ga", "objdump": "000000000000cca1 <guest_exec_task_setup>:\n    cca1:\t55                   \tpush   %rbp\n    cca2:\t48 89 e5             \tmov    %rsp,%rbp\n    cca5:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n    ccac:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n    ccb3:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    ccba:\t00 00 \n    ccbc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    ccc0:\t31 c0                \txor    %eax,%eax\n    ccc2:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    ccc9:\tba 98 00 00 00       \tmov    $0x98,%edx\n    ccce:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    ccd3:\t48 89 c7             \tmov    %rax,%rdi\n    ccd6:\te8 95 e7 ff ff       \tcallq  b470 <memset@plt>\n    ccdb:\t48 c7 85 60 ff ff ff \tmovq   $0x0,-0xa0(%rbp)\n    cce2:\t00 00 00 00 \n    cce6:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    cced:\tba 00 00 00 00       \tmov    $0x0,%edx\n    ccf2:\t48 89 c6             \tmov    %rax,%rsi\n    ccf5:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n    ccfa:\te8 51 ee ff ff       \tcallq  bb50 <sigaction@plt>\n    ccff:\t85 c0                \ttest   %eax,%eax\n    cd01:\t74 22                \tje     cd25 <guest_exec_task_setup+0x84>\n    cd03:\te8 68 e3 ff ff       \tcallq  b070 <__errno_location@plt>\n    cd08:\t8b 00                \tmov    (%rax),%eax\n    cd0a:\t89 c7                \tmov    %eax,%edi\n    cd0c:\te8 4f e5 ff ff       \tcallq  b260 <strerror@plt>\n    cd11:\t48 89 c6             \tmov    %rax,%rsi\n    cd14:\t48 8d 3d b5 13 04 00 \tlea    0x413b5(%rip),%rdi        # 4e0d0 <_IO_stdin_used+0xd0>\n    cd1b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    cd20:\te8 d0 f7 ff ff       \tcallq  c4f5 <slog>\n    cd25:\t90                   \tnop\n    cd26:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    cd2a:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    cd31:\t00 00 \n    cd33:\t74 05                \tje     cd3a <guest_exec_task_setup+0x99>\n    cd35:\te8 36 ec ff ff       \tcallq  b970 <__stack_chk_fail@plt>\n    cd3a:\tc9                   \tleaveq \n    cd3b:\tc3                   \tretq   ", "code_s": "unsigned __int64 guest_exec_task_setup() {\n  int *v0;\n  struct sigaction <span class=\"supfact\">s</span>;\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = __readfsqword(Number);\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.sa_handler = Number L;\n  if (sigaction(Number, &<span class=\"supfact\">s</span>, Number L)) {\n    v0 = __errno_location();\n    strerror(*v0);\n    slog();\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v3</span>;\n}", "code_t": "void __cdecl guest_exec_task_setup(gpointer data) {\n  int *v1;\n  char *v2;\n  sigaction <span class=\"supfact\">sigact</span>;\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  memset(&<span class=\"supfact\">sigact</span>, Number, sizeof(<span class=\"supfact\">sigact</span>));\n  <span class=\"supfact\">sigact</span>.sa_handler = Number L;\n  if (sigaction(Number, &<span class=\"supfact\">sigact</span>, Number L)) {\n    v1 = __errno_location();\n    v2 = strerror(*v1);\n    slog(String, v2);\n  }\n}", "var": [{"name": "s", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "sigact", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": false}, {"repo_owner": "lxl1140989", "repo_name": "6291-xl", "path": "lxl1140989/6291-xl/8a565e1eeb6e0851c3ea2eec820372e9b38289077077758397b2ccca92cf3acf", "path_in_repo": "lxl1140989/6291-xl/package/libnassdk/src/Demo/util/du_common.o", "objdump": "0000000000001618 <_ZN9DU_Common6now2usEv>:\n    1618:\t55                   \tpush   %rbp\n    1619:\t48 89 e5             \tmov    %rsp,%rbp\n    161c:\t48 83 ec 10          \tsub    $0x10,%rsp\n    1620:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n    1624:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1629:\t48 89 c7             \tmov    %rax,%rdi\n    162c:\te8 00 00 00 00       \tcallq  1631 <_ZN9DU_Common6now2usEv+0x19>\n    1631:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1635:\t48 69 d0 40 42 0f 00 \timul   $0xf4240,%rax,%rdx\n    163c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1640:\t48 01 d0             \tadd    %rdx,%rax\n    1643:\tc9                   \tleaveq \n    1644:\tc3                   \tretq   \n    1645:\t90                   \tnop", "code_s": "__time_t __fastcall DU_Common now2us(DU_Common *this) {\n  struct timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  return Number * <span class=\"supfact\">tv</span>.tv_sec + <span class=\"supfact\">tv</span>.tv_usec;\n}", "code_t": "int64_t __cdecl DU_Common now2us() {\n  timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  return Number * <span class=\"supfact\">tv</span>.tv_sec + <span class=\"supfact\">tv</span>.tv_usec;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "hbowden", "repo_name": "nextgen", "path": "hbowden/nextgen/749cd7274abd7be4b3735b79dc38349403f91a69d36ed4ba6331261be3d2741d", "path_in_repo": "hbowden/nextgen/deps/libressl-2.5.1/ssl/d1_lib.o", "objdump": "0000000000000a3c <dtls1_is_timer_expired>:\n a3c:\t55                   \tpush   %rbp\n a3d:\t48 89 e5             \tmov    %rsp,%rbp\n a40:\t48 83 ec 30          \tsub    $0x30,%rsp\n a44:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n a48:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n a4f:\t00 00 \n a51:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n a55:\t31 c0                \txor    %eax,%eax\n a57:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n a5b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n a5f:\t48 89 d6             \tmov    %rdx,%rsi\n a62:\t48 89 c7             \tmov    %rax,%rdi\n a65:\te8 00 00 00 00       \tcallq  a6a <dtls1_is_timer_expired+0x2e>\n a6a:\t48 85 c0             \ttest   %rax,%rax\n a6d:\t75 07                \tjne    a76 <dtls1_is_timer_expired+0x3a>\n a6f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n a74:\teb 1e                \tjmp    a94 <dtls1_is_timer_expired+0x58>\n a76:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n a7a:\t48 85 c0             \ttest   %rax,%rax\n a7d:\t7f 09                \tjg     a88 <dtls1_is_timer_expired+0x4c>\n a7f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n a83:\t48 85 c0             \ttest   %rax,%rax\n a86:\t7e 07                \tjle    a8f <dtls1_is_timer_expired+0x53>\n a88:\tb8 00 00 00 00       \tmov    $0x0,%eax\n a8d:\teb 05                \tjmp    a94 <dtls1_is_timer_expired+0x58>\n a8f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n a94:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n a98:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n a9f:\t00 00 \n aa1:\t74 05                \tje     aa8 <dtls1_is_timer_expired+0x6c>\n aa3:\te8 00 00 00 00       \tcallq  aa8 <dtls1_is_timer_expired+0x6c>\n aa8:\tc9                   \tleaveq \n aa9:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall dtls1_is_timer_expired(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  <span class=\"supfact\">v2</span>[Number] = __readfsqword(Number);\n  if (!dtls1_get_timeout(a1, <span class=\"supfact\">v2</span>))\n    return Number L;\n  return <span class=\"supfact\">v2</span>[Number] <= Number &&\n         <span class=\"supfact\">v2</span>[Number] <= Number;\n}", "code_t": "int __cdecl dtls1_is_timer_expired(SSL *s) {\n  timeval <span class=\"supfact\">timeleft</span>;\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  if (!dtls1_get_timeout(s, &<span class=\"supfact\">timeleft</span>))\n    return Number;\n  return <span class=\"supfact\">timeleft</span>.tv_sec <= Number &&\n         <span class=\"supfact\">timeleft</span>.tv_usec <= Number;\n}", "var": [{"name": "v2", "type": "_QWORD[4]", "ref_name": "timeleft", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "jordansissel", "repo_name": "tmux", "path": "jordansissel/tmux/8c54c58ec5c6c45af38e829f1a79d944af77d1a77275700b93d321f9e256a16e", "path_in_repo": "jordansissel/tmux/tags/TMUX_1_0/tmux", "objdump": "000000000040636b <cmd_choose_client_callback>:\n  40636b:\t55                   \tpush   %rbp\n  40636c:\t48 89 e5             \tmov    %rsp,%rbp\n  40636f:\t48 83 ec 70          \tsub    $0x70,%rsp\n  406373:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n  406377:\t89 75 94             \tmov    %esi,-0x6c(%rbp)\n  40637a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  40637e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  406382:\t83 7d 94 ff          \tcmpl   $0xffffffff,-0x6c(%rbp)\n  406386:\t0f 84 60 01 00 00    \tje     4064ec <cmd_choose_client_callback+0x181>\n  40638c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406390:\t48 8b 00             \tmov    (%rax),%rax\n  406393:\t8b 80 88 02 01 00    \tmov    0x10288(%rax),%eax\n  406399:\t25 00 02 00 00       \tand    $0x200,%eax\n  40639e:\t85 c0                \ttest   %eax,%eax\n  4063a0:\t0f 85 49 01 00 00    \tjne    4064ef <cmd_choose_client_callback+0x184>\n  4063a6:\t8b 05 4c 5e 05 00    \tmov    0x55e4c(%rip),%eax        # 45c1f8 <clients+0x8>\n  4063ac:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n  4063af:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n  4063b2:\t39 c2                \tcmp    %eax,%edx\n  4063b4:\t0f 82 38 01 00 00    \tjb     4064f2 <cmd_choose_client_callback+0x187>\n  4063ba:\t48 8b 05 2f 5e 05 00 \tmov    0x55e2f(%rip),%rax        # 45c1f0 <clients>\n  4063c1:\t8b 55 94             \tmov    -0x6c(%rbp),%edx\n  4063c4:\t48 63 d2             \tmovslq %edx,%rdx\n  4063c7:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  4063cb:\t48 01 d0             \tadd    %rdx,%rax\n  4063ce:\t48 8b 00             \tmov    (%rax),%rax\n  4063d1:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4063d5:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  4063da:\t0f 84 15 01 00 00    \tje     4064f5 <cmd_choose_client_callback+0x18a>\n  4063e0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4063e4:\t48 8b 80 18 03 01 00 \tmov    0x10318(%rax),%rax\n  4063eb:\t48 85 c0             \ttest   %rax,%rax\n  4063ee:\t0f 84 01 01 00 00    \tje     4064f5 <cmd_choose_client_callback+0x18a>\n  4063f4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4063f8:\t48 8b 88 58 00 01 00 \tmov    0x10058(%rax),%rcx\n  4063ff:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  406403:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  406407:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40640c:\t48 89 ce             \tmov    %rcx,%rsi\n  40640f:\t48 89 c7             \tmov    %rax,%rdi\n  406412:\te8 68 e6 00 00       \tcallq  414a7f <cmd_template_replace>\n  406417:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40641b:\t48 8d 55 a8          \tlea    -0x58(%rbp),%rdx\n  40641f:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  406423:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406427:\t48 89 ce             \tmov    %rcx,%rsi\n  40642a:\t48 89 c7             \tmov    %rax,%rdi\n  40642d:\te8 f0 b1 00 00       \tcallq  411622 <cmd_string_parse>\n  406432:\t85 c0                \ttest   %eax,%eax\n  406434:\t74 56                \tje     40648c <cmd_choose_client_callback+0x121>\n  406436:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40643a:\t48 85 c0             \ttest   %rax,%rax\n  40643d:\t74 3f                \tje     40647e <cmd_choose_client_callback+0x113>\n  40643f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  406443:\t0f b6 00             \tmovzbl (%rax),%eax\n  406446:\t0f b6 c0             \tmovzbl %al,%eax\n  406449:\t89 c7                \tmov    %eax,%edi\n  40644b:\te8 a0 cc ff ff       \tcallq  4030f0 <toupper@plt>\n  406450:\t89 c2                \tmov    %eax,%edx\n  406452:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  406456:\t88 10                \tmov    %dl,(%rax)\n  406458:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  40645c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  406460:\tbe bd 08 44 00       \tmov    $0x4408bd,%esi\n  406465:\t48 89 c7             \tmov    %rax,%rdi\n  406468:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40646d:\te8 d8 58 02 00       \tcallq  42bd4a <status_message_set>\n  406472:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  406476:\t48 89 c7             \tmov    %rax,%rdi\n  406479:\te8 7d 6f 03 00       \tcallq  43d3fb <xfree>\n  40647e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406482:\t48 89 c7             \tmov    %rax,%rdi\n  406485:\te8 71 6f 03 00       \tcallq  43d3fb <xfree>\n  40648a:\teb 6a                \tjmp    4064f6 <cmd_choose_client_callback+0x18b>\n  40648c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  406490:\t48 89 c7             \tmov    %rax,%rdi\n  406493:\te8 63 6f 03 00       \tcallq  43d3fb <xfree>\n  406498:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n  40649f:\t00 \n  4064a0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4064a4:\t48 8b 00             \tmov    (%rax),%rax\n  4064a7:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  4064ab:\t48 c7 45 d8 71 ba 41 \tmovq   $0x41ba71,-0x28(%rbp)\n  4064b2:\t00 \n  4064b3:\t48 c7 45 c8 6b bb 41 \tmovq   $0x41bb6b,-0x38(%rbp)\n  4064ba:\t00 \n  4064bb:\t48 c7 45 d0 89 bc 41 \tmovq   $0x41bc89,-0x30(%rbp)\n  4064c2:\t00 \n  4064c3:\t48 c7 45 b8 00 00 00 \tmovq   $0x0,-0x48(%rbp)\n  4064ca:\t00 \n  4064cb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4064cf:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  4064d3:\t48 89 d6             \tmov    %rdx,%rsi\n  4064d6:\t48 89 c7             \tmov    %rax,%rdi\n  4064d9:\te8 12 4f 00 00       \tcallq  40b3f0 <cmd_list_exec>\n  4064de:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4064e2:\t48 89 c7             \tmov    %rax,%rdi\n  4064e5:\te8 5e 4f 00 00       \tcallq  40b448 <cmd_list_free>\n  4064ea:\teb 0a                \tjmp    4064f6 <cmd_choose_client_callback+0x18b>\n  4064ec:\t90                   \tnop\n  4064ed:\teb 07                \tjmp    4064f6 <cmd_choose_client_callback+0x18b>\n  4064ef:\t90                   \tnop\n  4064f0:\teb 04                \tjmp    4064f6 <cmd_choose_client_callback+0x18b>\n  4064f2:\t90                   \tnop\n  4064f3:\teb 01                \tjmp    4064f6 <cmd_choose_client_callback+0x18b>\n  4064f5:\t90                   \tnop\n  4064f6:\tc9                   \tleaveq \n  4064f7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cmd_choose_client_callback(_QWORD *a1, unsigned int a2) {\n  __int64 result;\n  int v3;\n  int v4;\n  int v5;\n  _BYTE *<span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  _QWORD *<span class=\"supfact\">v11</span>;\n  result = (__int64)a1;\n  <span class=\"supfact\">v11</span> = a1;\n  if (a2 != Number) {\n    result = *(_DWORD *)(*<span class=\"supfact\">v11</span> + Number L) & Number;\n    if (!(_DWORD)result) {\n      result = a2;\n      if (dword_45C1F8 - Number >= a2) {\n        result = *(_QWORD *)(Number L * (int)a2 + clients);\n        <span class=\"supfact\">v10</span> = result;\n        if (result) {\n          result = *(_QWORD *)(<span class=\"supfact\">v10</span> + Number);\n          if (result) {\n            <span class=\"supfact\">v9</span> = cmd_template_replace(\n                <span class=\"supfact\">v11</span>[Number],\n                *(_QWORD *)(<span class=\"supfact\">v10</span> + Number), Number L);\n            if ((unsigned int)cmd_string_parse(<span class=\"supfact\">v9</span>,\n                                               &<span class=\"supfact\">v8</span>,\n                                               &<span class=\"supfact\">v6</span>)) {\n              if (<span class=\"supfact\">v6</span>) {\n                *<span class=\"supfact\">v6</span> =\n                    toupper((unsigned __int8)*<span class=\"supfact\">v6</span>);\n                status_message_set(<span class=\"supfact\">v10</span>, (unsigned int)String,\n                                   (_DWORD)<span class=\"supfact\">v6</span>, v3, v4, v5);\n                xfree(<span class=\"supfact\">v6</span>);\n              }\n              result = xfree(<span class=\"supfact\">v9</span>);\n            } else {\n              xfree(<span class=\"supfact\">v9</span>);\n              <span class=\"supfact\">v7</span>[Number] = Number L;\n              <span class=\"supfact\">v7</span>[Number] = *<span class=\"supfact\">v11</span>;\n              <span class=\"supfact\">v7</span>[Number] = (__int64)key_bindings_error;\n              <span class=\"supfact\">v7</span>[Number] = (__int64)key_bindings_print;\n              <span class=\"supfact\">v7</span>[Number] = (__int64)key_bindings_info;\n              <span class=\"supfact\">v7</span>[Number] = Number L;\n              cmd_list_exec(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v7</span>);\n              result = cmd_list_free(<span class=\"supfact\">v8</span>);\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl cmd_choose_client_callback(void *data, int idx) {\n  char *<span class=\"supfact\">cause</span>;\n  cmd_ctx <span class=\"supfact\">ctx</span>;\n  cmd_list *<span class=\"supfact\">cmdlist</span>;\n  char *<span class=\"supfact\">templatea</span>;\n  client *<span class=\"supfact\">c</span>;\n  cmd_choose_client_data *<span class=\"supfact\">cdata</span>;\n  <span class=\"supfact\">cdata</span> = (cmd_choose_client_data *)data;\n  if (idx != Number &&\n      (<span class=\"supfact\">cdata</span>->client->flags & Number) == Number &&\n      clients_0.num - Number >= idx) {\n    <span class=\"supfact\">c</span> = clients_0.list[idx];\n    if (<span class=\"supfact\">c</span>) {\n      if (<span class=\"supfact\">c</span>->session) {\n        <span class=\"supfact\">templatea</span> =\n            cmd_template_replace(<span class=\"supfact\">cdata</span>->template,\n                                 <span class=\"supfact\">c</span>->tty.path, Number);\n        if (cmd_string_parse(<span class=\"supfact\">templatea</span>,\n                             &<span class=\"supfact\">cmdlist</span>,\n                             &<span class=\"supfact\">cause</span>)) {\n          if (<span class=\"supfact\">cause</span>) {\n            *<span class=\"supfact\">cause</span> =\n                toupper((unsigned __int8)*<span class=\"supfact\">cause</span>);\n            status_message_set(<span class=\"supfact\">c</span>, String,\n                               <span class=\"supfact\">cause</span>);\n            xfree(<span class=\"supfact\">cause</span>);\n          }\n          xfree(<span class=\"supfact\">templatea</span>);\n        } else {\n          xfree(<span class=\"supfact\">templatea</span>);\n          <span class=\"supfact\">ctx</span>.msgdata = Number L;\n          <span class=\"supfact\">ctx</span>.curclient = <span class=\"supfact\">cdata</span>->client;\n          <span class=\"supfact\">ctx</span>.error = key_bindings_error;\n          <span class=\"supfact\">ctx</span>.print = key_bindings_print;\n          <span class=\"supfact\">ctx</span>.info = key_bindings_info;\n          <span class=\"supfact\">ctx</span>.cmdclient = Number L;\n          cmd_list_exec(<span class=\"supfact\">cmdlist</span>, &<span class=\"supfact\">ctx</span>);\n          cmd_list_free(<span class=\"supfact\">cmdlist</span>);\n        }\n      }\n    }\n  }\n}", "var": [{"name": "v7", "type": "struct cmd_ctx { client * curclient; client * cmdclient; msg_command_data * msgdata; void (*)(cmd_ctx *, const char *, ...) print; void (*)(cmd_ctx *, const char *, ...) info; void (*)(cmd_ctx *, const char *, ...) error; }", "ref_name": "ctx", "ref_type": "struct cmd_ctx { client * curclient; client * cmdclient; msg_command_data * msgdata; void (*)(cmd_ctx *, const char *, ...) print; void (*)(cmd_ctx *, const char *, ...) info; void (*)(cmd_ctx *, const char *, ...) error; }"}], "body_in_train": false}, {"repo_owner": "TI-LPRF-Software", "repo_name": "RemoTI-Linux", "path": "TI-LPRF-Software/RemoTI-Linux/3fdc93c0572db7d6382aac47de1e09c93eb63c513834efd9536a5543e7c9a920", "path_in_repo": "TI-LPRF-Software/RemoTI-Linux/Projects/tools/LinuxHost/application/mpa/out/MPA_lnx_x86_client", "objdump": "0000000000413586 <timer_set_event>:\n  413586:\t55                   \tpush   %rbp\n  413587:\t48 89 e5             \tmov    %rsp,%rbp\n  41358a:\t53                   \tpush   %rbx\n  41358b:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n  413592:\t89 f8                \tmov    %edi,%eax\n  413594:\t89 b5 78 ff ff ff    \tmov    %esi,-0x88(%rbp)\n  41359a:\t88 85 7c ff ff ff    \tmov    %al,-0x84(%rbp)\n  4135a0:\t8b 05 5a 8d 01 00    \tmov    0x18d5a(%rip),%eax        # 42c300 <__APP_LOG_LEVEL>\n  4135a6:\t83 f8 04             \tcmp    $0x4,%eax\n  4135a9:\t7f 0e                \tjg     4135b9 <timer_set_event+0x33>\n  4135ab:\t8b 05 4f 96 01 00    \tmov    0x1964f(%rip),%eax        # 42cc00 <__BIG_DEBUG_ACTIVE>\n  4135b1:\t85 c0                \ttest   %eax,%eax\n  4135b3:\t0f 84 de 00 00 00    \tje     413697 <timer_set_event+0x111>\n  4135b9:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4135bd:\t48 89 c6             \tmov    %rax,%rsi\n  4135c0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4135c5:\te8 a6 ec fe ff       \tcallq  402270 <clock_gettime@plt>\n  4135ca:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4135ce:\t48 89 c7             \tmov    %rax,%rdi\n  4135d1:\te8 6a ed fe ff       \tcallq  402340 <gmtime@plt>\n  4135d6:\t48 8b 08             \tmov    (%rax),%rcx\n  4135d9:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n  4135dd:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n  4135e1:\t48 89 5d 88          \tmov    %rbx,-0x78(%rbp)\n  4135e5:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n  4135e9:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  4135ed:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n  4135f1:\t48 89 5d 98          \tmov    %rbx,-0x68(%rbp)\n  4135f5:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  4135f9:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n  4135fd:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n  413601:\t48 89 5d a8          \tmov    %rbx,-0x58(%rbp)\n  413605:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  413609:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  41360d:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  413611:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n  413618:\t9b c4 20 \n  41361b:\t48 89 c8             \tmov    %rcx,%rax\n  41361e:\t48 f7 ea             \timul   %rdx\n  413621:\t48 c1 fa 07          \tsar    $0x7,%rdx\n  413625:\t48 89 c8             \tmov    %rcx,%rax\n  413628:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  41362c:\t48 29 c2             \tsub    %rax,%rdx\n  41362f:\t48 89 d0             \tmov    %rdx,%rax\n  413632:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  413636:\t44 0f b6 8d 7c ff ff \tmovzbl -0x84(%rbp),%r9d\n  41363d:\tff \n  41363e:\t4c 8b 05 c3 8c 01 00 \tmov    0x18cc3(%rip),%r8        # 42c308 <processLogPrefix>\n  413645:\t8b 7d 80             \tmov    -0x80(%rbp),%edi\n  413648:\t8b 75 84             \tmov    -0x7c(%rbp),%esi\n  41364b:\t44 8b 5d 88          \tmov    -0x78(%rbp),%r11d\n  41364f:\t44 8b 55 8c          \tmov    -0x74(%rbp),%r10d\n  413653:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n  413656:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  413659:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n  41365c:\t8d 90 6c 07 00 00    \tlea    0x76c(%rax),%edx\n  413662:\t48 8b 05 17 8d 01 00 \tmov    0x18d17(%rip),%rax        # 42c380 <stderr@@GLIBC_2.2.5>\n  413669:\t41 51                \tpush   %r9\n  41366b:\t44 8b 8d 78 ff ff ff \tmov    -0x88(%rbp),%r9d\n  413672:\t41 51                \tpush   %r9\n  413674:\t41 50                \tpush   %r8\n  413676:\tff 75 e8             \tpushq  -0x18(%rbp)\n  413679:\t57                   \tpush   %rdi\n  41367a:\t56                   \tpush   %rsi\n  41367b:\t45 89 d9             \tmov    %r11d,%r9d\n  41367e:\t45 89 d0             \tmov    %r10d,%r8d\n  413681:\tbe 00 5c 42 00       \tmov    $0x425c00,%esi\n  413686:\t48 89 c7             \tmov    %rax,%rdi\n  413689:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41368e:\te8 3d eb fe ff       \tcallq  4021d0 <fprintf@plt>\n  413693:\t48 83 c4 30          \tadd    $0x30,%rsp\n  413697:\tbf 00 c9 42 00       \tmov    $0x42c900,%edi\n  41369c:\te8 5f ed fe ff       \tcallq  402400 <pthread_mutex_lock@plt>\n  4136a1:\t48 8b 15 d8 92 01 00 \tmov    0x192d8(%rip),%rdx        # 42c980 <timerThreadTbl>\n  4136a8:\t0f b6 85 7c ff ff ff \tmovzbl -0x84(%rbp),%eax\n  4136af:\t48 69 c0 0c 01 00 00 \timul   $0x10c,%rax,%rax\n  4136b6:\t48 01 d0             \tadd    %rdx,%rax\n  4136b9:\t8b 00                \tmov    (%rax),%eax\n  4136bb:\t48 8b 0d be 92 01 00 \tmov    0x192be(%rip),%rcx        # 42c980 <timerThreadTbl>\n  4136c2:\t0f b6 95 7c ff ff ff \tmovzbl -0x84(%rbp),%edx\n  4136c9:\t48 69 d2 0c 01 00 00 \timul   $0x10c,%rdx,%rdx\n  4136d0:\t48 01 ca             \tadd    %rcx,%rdx\n  4136d3:\t0b 85 78 ff ff ff    \tor     -0x88(%rbp),%eax\n  4136d9:\t89 02                \tmov    %eax,(%rdx)\n  4136db:\tbf 40 cf 42 00       \tmov    $0x42cf40,%edi\n  4136e0:\te8 ab eb fe ff       \tcallq  402290 <sem_post@plt>\n  4136e5:\t85 c0                \ttest   %eax,%eax\n  4136e7:\t0f 89 fc 00 00 00    \tjns    4137e9 <timer_set_event+0x263>\n  4136ed:\t8b 05 0d 8c 01 00    \tmov    0x18c0d(%rip),%eax        # 42c300 <__APP_LOG_LEVEL>\n  4136f3:\t83 f8 01             \tcmp    $0x1,%eax\n  4136f6:\t7f 0e                \tjg     413706 <timer_set_event+0x180>\n  4136f8:\t8b 05 02 95 01 00    \tmov    0x19502(%rip),%eax        # 42cc00 <__BIG_DEBUG_ACTIVE>\n  4136fe:\t85 c0                \ttest   %eax,%eax\n  413700:\t0f 84 d9 00 00 00    \tje     4137df <timer_set_event+0x259>\n  413706:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  41370a:\t48 89 c6             \tmov    %rax,%rsi\n  41370d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  413712:\te8 59 eb fe ff       \tcallq  402270 <clock_gettime@plt>\n  413717:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  41371b:\t48 89 c7             \tmov    %rax,%rdi\n  41371e:\te8 1d ec fe ff       \tcallq  402340 <gmtime@plt>\n  413723:\t48 8b 08             \tmov    (%rax),%rcx\n  413726:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n  41372a:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n  41372e:\t48 89 5d 88          \tmov    %rbx,-0x78(%rbp)\n  413732:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n  413736:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  41373a:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n  41373e:\t48 89 5d 98          \tmov    %rbx,-0x68(%rbp)\n  413742:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  413746:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n  41374a:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n  41374e:\t48 89 5d a8          \tmov    %rbx,-0x58(%rbp)\n  413752:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  413756:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  41375a:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  41375e:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n  413765:\t9b c4 20 \n  413768:\t48 89 c8             \tmov    %rcx,%rax\n  41376b:\t48 f7 ea             \timul   %rdx\n  41376e:\t48 c1 fa 07          \tsar    $0x7,%rdx\n  413772:\t48 89 c8             \tmov    %rcx,%rax\n  413775:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  413779:\t48 29 c2             \tsub    %rax,%rdx\n  41377c:\t48 89 d0             \tmov    %rdx,%rax\n  41377f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  413783:\t4c 8b 05 7e 8b 01 00 \tmov    0x18b7e(%rip),%r8        # 42c308 <processLogPrefix>\n  41378a:\t8b 7d 80             \tmov    -0x80(%rbp),%edi\n  41378d:\t8b 75 84             \tmov    -0x7c(%rbp),%esi\n  413790:\t44 8b 5d 88          \tmov    -0x78(%rbp),%r11d\n  413794:\t44 8b 55 8c          \tmov    -0x74(%rbp),%r10d\n  413798:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n  41379b:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  41379e:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n  4137a1:\t8d 90 6c 07 00 00    \tlea    0x76c(%rax),%edx\n  4137a7:\t48 8b 05 d2 8b 01 00 \tmov    0x18bd2(%rip),%rax        # 42c380 <stderr@@GLIBC_2.2.5>\n  4137ae:\t68 40 cf 42 00       \tpushq  $0x42cf40\n  4137b3:\t44 8b 8d 78 ff ff ff \tmov    -0x88(%rbp),%r9d\n  4137ba:\t41 51                \tpush   %r9\n  4137bc:\t41 50                \tpush   %r8\n  4137be:\tff 75 e0             \tpushq  -0x20(%rbp)\n  4137c1:\t57                   \tpush   %rdi\n  4137c2:\t56                   \tpush   %rsi\n  4137c3:\t45 89 d9             \tmov    %r11d,%r9d\n  4137c6:\t45 89 d0             \tmov    %r10d,%r8d\n  4137c9:\tbe 60 5c 42 00       \tmov    $0x425c60,%esi\n  4137ce:\t48 89 c7             \tmov    %rax,%rdi\n  4137d1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4137d6:\te8 f5 e9 fe ff       \tcallq  4021d0 <fprintf@plt>\n  4137db:\t48 83 c4 30          \tadd    $0x30,%rsp\n  4137df:\tbf c4 5c 42 00       \tmov    $0x425cc4,%edi\n  4137e4:\te8 27 eb fe ff       \tcallq  402310 <perror@plt>\n  4137e9:\tbf 00 c9 42 00       \tmov    $0x42c900,%edi\n  4137ee:\te8 4d ea fe ff       \tcallq  402240 <pthread_mutex_unlock@plt>\n  4137f3:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4137f8:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n  4137fc:\tc9                   \tleaveq \n  4137fd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall timer_set_event(unsigned __int8 a1, unsigned int a2) {\n  struct tm *v2;\n  struct tm *v3;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  struct timespec <span class=\"supfact\">v11</span>;\n  struct timespec <span class=\"supfact\">tp</span>;\n  __syscall_slong_t <span class=\"supfact\">v13</span>;\n  __syscall_slong_t <span class=\"supfact\">v14</span>;\n  if (_APP_LOG_LEVEL > Number || _BIG_DEBUG_ACTIVE) {\n    clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n    v2 = gmtime(&<span class=\"supfact\">tp</span>.tv_sec);\n    v5 = *(_QWORD *)&v2->tm_sec;\n    v7 = *(_QWORD *)&v2->tm_hour;\n    v9 = *(_QWORD *)&v2->tm_mon;\n    <span class=\"supfact\">v14</span> = <span class=\"supfact\">tp</span>.tv_nsec / Number;\n    fprintf(stderr, String, (unsigned int)(HIDWORD(v9) + Number),\n            (unsigned int)(v9 + Number), HIDWORD(v7), (unsigned int)v7,\n            HIDWORD(v5), (unsigned int)v5, <span class=\"supfact\">tp</span>.tv_nsec / Number,\n            (const char *)processLogPrefix, a2, a1);\n  }\n  pthread_mutex_lock(&timerEventMutex);\n  *((_DWORD *)timerThreadTbl + Number * a1) |= a2;\n  if (sem_post(&eventSem) < Number) {\n    if (_APP_LOG_LEVEL > Number || _BIG_DEBUG_ACTIVE) {\n      clock_gettime(Number, &<span class=\"supfact\">v11</span>);\n      v3 = gmtime(&<span class=\"supfact\">v11</span>.tv_sec);\n      v6 = *(_QWORD *)&v3->tm_sec;\n      v8 = *(_QWORD *)&v3->tm_hour;\n      v10 = *(_QWORD *)&v3->tm_mon;\n      <span class=\"supfact\">v13</span> = <span class=\"supfact\">v11</span>.tv_nsec / Number;\n      fprintf(stderr, String, (unsigned int)(HIDWORD(v10) + Number),\n              (unsigned int)(v10 + Number), HIDWORD(v8), (unsigned int)v8,\n              HIDWORD(v6), (unsigned int)v6,\n              <span class=\"supfact\">v11</span>.tv_nsec / Number,\n              (const char *)processLogPrefix, a2, &eventSem);\n    }\n    perror(String);\n  }\n  pthread_mutex_unlock(&timerEventMutex);\n  return Number L;\n}", "code_t": "uint8 __cdecl timer_set_event(uint8 threadId, uint32 event) {\n  struct tm *v2;\n  struct tm *v3;\n  __int64 _currTm;\n  __int64 _currTma;\n  __int64 _currTm_8;\n  __int64 _currTm_8a;\n  __int64 _currTm_16;\n  __int64 _currTm_16a;\n  timespec <span class=\"supfact\">_currTime_0</span>;\n  timespec <span class=\"supfact\">_currTime</span>;\n  __int64 <span class=\"supfact\">_uSecs_0</span>;\n  __int64 <span class=\"supfact\">_uSecs</span>;\n  if (_APP_LOG_LEVEL > Number || _BIG_DEBUG_ACTIVE) {\n    clock_gettime(Number, &<span class=\"supfact\">_currTime</span>);\n    v2 = gmtime(&<span class=\"supfact\">_currTime</span>.tv_sec);\n    _currTm = *(_QWORD *)&v2->tm_sec;\n    _currTm_8 = *(_QWORD *)&v2->tm_hour;\n    _currTm_16 = *(_QWORD *)&v2->tm_mon;\n    <span class=\"supfact\">_uSecs</span> = <span class=\"supfact\">_currTime</span>.tv_nsec / Number;\n    fprintf(stderr, String, (unsigned int)(HIDWORD(_currTm_16) + Number),\n            (unsigned int)(_currTm_16 + Number), HIDWORD(_currTm_8),\n            (unsigned int)_currTm_8, HIDWORD(_currTm), (unsigned int)_currTm,\n            <span class=\"supfact\">_currTime</span>.tv_nsec / Number, processLogPrefix, event,\n            threadId);\n  }\n  pthread_mutex_lock(&timerEventMutex);\n  timerThreadTbl[threadId].eventFlag |= event;\n  if (sem_post(&eventSem) < Number) {\n    if (_APP_LOG_LEVEL > Number || _BIG_DEBUG_ACTIVE) {\n      clock_gettime(Number, &<span class=\"supfact\">_currTime_0</span>);\n      v3 = gmtime(&<span class=\"supfact\">_currTime_0</span>.tv_sec);\n      _currTma = *(_QWORD *)&v3->tm_sec;\n      _currTm_8a = *(_QWORD *)&v3->tm_hour;\n      _currTm_16a = *(_QWORD *)&v3->tm_mon;\n      <span class=\"supfact\">_uSecs_0</span> = <span class=\"supfact\">_currTime_0</span>.tv_nsec / Number;\n      fprintf(stderr, String, (unsigned int)(HIDWORD(_currTm_16a) + Number),\n              (unsigned int)(_currTm_16a + Number), HIDWORD(_currTm_8a),\n              (unsigned int)_currTm_8a, HIDWORD(_currTma),\n              (unsigned int)_currTma,\n              <span class=\"supfact\">_currTime_0</span>.tv_nsec / Number, processLogPrefix,\n              event, &eventSem);\n    }\n    perror(String);\n  }\n  pthread_mutex_unlock(&timerEventMutex);\n  return Number;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "_currTime", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}, {"name": "v11", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "_currTime_0", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "hikoseuro", "repo_name": "tstools_fixed_loop", "path": "hikoseuro/tstools_fixed_loop/eb99f3a488b22b7dbfb7b58da67a1b582462638d4f7b89c3ee59490e82fe05af", "path_in_repo": "hikoseuro/tstools_fixed_loop//obj/tswrite.o", "objdump": "0000000000000000 <map_circular_buffer>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 83 ec 50          \tsub    $0x50,%rsp\n       8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n       c:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n       f:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n      12:\t89 4d bc             \tmov    %ecx,-0x44(%rbp)\n      15:\t44 89 45 b8          \tmov    %r8d,-0x48(%rbp)\n      19:\t44 89 4d b4          \tmov    %r9d,-0x4c(%rbp)\n      1d:\t83 7d b4 01          \tcmpl   $0x1,-0x4c(%rbp)\n      21:\t75 07                \tjne    2a <map_circular_buffer+0x2a>\n      23:\tb8 0c 00 00 00       \tmov    $0xc,%eax\n      28:\teb 05                \tjmp    2f <map_circular_buffer+0x2f>\n      2a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      2f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n      32:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n      35:\t48 98                \tcltq   \n      37:\t89 c2                \tmov    %eax,%edx\n      39:\t89 d0                \tmov    %edx,%eax\n      3b:\t01 c0                \tadd    %eax,%eax\n      3d:\t01 d0                \tadd    %edx,%eax\n      3f:\tc1 e0 02             \tshl    $0x2,%eax\n      42:\t83 c0 40             \tadd    $0x40,%eax\n      45:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n      48:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n      4b:\t69 d0 bc 00 00 00    \timul   $0xbc,%eax,%edx\n      51:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n      54:\t01 c2                \tadd    %eax,%edx\n      56:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n      59:\t0f af c2             \timul   %edx,%eax\n      5c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n      5f:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n      62:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n      65:\t01 d0                \tadd    %edx,%eax\n      67:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n      6a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n      6e:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n      75:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n      78:\t48 98                \tcltq   \n      7a:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n      80:\t41 b8 ff ff ff ff    \tmov    $0xffffffff,%r8d\n      86:\tb9 21 00 00 00       \tmov    $0x21,%ecx\n      8b:\tba 03 00 00 00       \tmov    $0x3,%edx\n      90:\t48 89 c6             \tmov    %rax,%rsi\n      93:\tbf 00 00 00 00       \tmov    $0x0,%edi\n      98:\te8 00 00 00 00       \tcallq  9d <map_circular_buffer+0x9d>\n      9d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n      a1:\t48 83 7d e8 ff       \tcmpq   $0xffffffffffffffff,-0x18(%rbp)\n      a6:\t75 2c                \tjne    d4 <map_circular_buffer+0xd4>\n      a8:\te8 00 00 00 00       \tcallq  ad <map_circular_buffer+0xad>\n      ad:\t8b 00                \tmov    (%rax),%eax\n      af:\t89 c7                \tmov    %eax,%edi\n      b1:\te8 00 00 00 00       \tcallq  b6 <map_circular_buffer+0xb6>\n      b6:\t48 89 c6             \tmov    %rax,%rsi\n      b9:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # c0 <map_circular_buffer+0xc0>\n      c0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      c5:\te8 00 00 00 00       \tcallq  ca <map_circular_buffer+0xca>\n      ca:\tb8 01 00 00 00       \tmov    $0x1,%eax\n      cf:\te9 e3 00 00 00       \tjmpq   1b7 <map_circular_buffer+0x1b7>\n      d4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n      d8:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n      de:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n      e2:\tc7 40 04 00 00 00 00 \tmovl   $0x0,0x4(%rax)\n      e9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n      ed:\tc7 40 08 00 00 00 00 \tmovl   $0x0,0x8(%rax)\n      f4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n      f8:\tc7 40 10 00 00 00 00 \tmovl   $0x0,0x10(%rax)\n      ff:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     103:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n     106:\t89 50 0c             \tmov    %edx,0xc(%rax)\n     109:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     10d:\t8b 55 c0             \tmov    -0x40(%rbp),%edx\n     110:\t89 50 14             \tmov    %edx,0x14(%rax)\n     113:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     116:\t69 d0 bc 00 00 00    \timul   $0xbc,%eax,%edx\n     11c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     11f:\t01 c2                \tadd    %eax,%edx\n     121:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     125:\t89 50 18             \tmov    %edx,0x18(%rax)\n     128:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     12c:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     12f:\t89 50 1c             \tmov    %edx,0x1c(%rax)\n     132:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     136:\t8b 55 b4             \tmov    -0x4c(%rbp),%edx\n     139:\t89 50 20             \tmov    %edx,0x20(%rax)\n     13c:\t83 7d b4 01          \tcmpl   $0x1,-0x4c(%rbp)\n     140:\t75 34                \tjne    176 <map_circular_buffer+0x176>\n     142:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     146:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     14b:\t48 89 c7             \tmov    %rax,%rdi\n     14e:\te8 00 00 00 00       \tcallq  153 <map_circular_buffer+0x153>\n     153:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     157:\t66 c7 40 24 00 00    \tmovw   $0x0,0x24(%rax)\n     15d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     161:\t89 c2                \tmov    %eax,%edx\n     163:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     167:\t48 c1 e0 0c          \tshl    $0xc,%rax\n     16b:\t31 d0                \txor    %edx,%eax\n     16d:\t89 c2                \tmov    %eax,%edx\n     16f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     173:\t89 50 28             \tmov    %edx,0x28(%rax)\n     176:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     17a:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n     17d:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n     180:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     184:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n     187:\t89 50 30             \tmov    %edx,0x30(%rax)\n     18a:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     18d:\t48 63 d0             \tmovslq %eax,%rdx\n     190:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     193:\t48 98                \tcltq   \n     195:\t48 01 c2             \tadd    %rax,%rdx\n     198:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     19c:\t48 01 c2             \tadd    %rax,%rdx\n     19f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     1a3:\t48 89 50 38          \tmov    %rdx,0x38(%rax)\n     1a7:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     1ab:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     1af:\t48 89 10             \tmov    %rdx,(%rax)\n     1b2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     1b7:\tc9                   \tleaveq \n     1b8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall map_circular_buffer(_QWORD *a1, int a2, int a3, int a4,\n                                       int a5, int a6) {\n  int v6;\n  int *v7;\n  char *v8;\n  __int64 result;\n  struct timeval <span class=\"supfact\">tv</span>;\n  _DWORD *<span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">v17</span>;\n  int <span class=\"supfact\">v18</span>;\n  int <span class=\"supfact\">v19</span>;\n  if (a6 == Number)\n    v6 = Number;\n  else\n    v6 = Number;\n  <span class=\"supfact\">v19</span> = v6;\n  <span class=\"supfact\">v18</span> = Number * a2 + Number;\n  <span class=\"supfact\">v17</span> = (v6 + Number * a3) * a2;\n  <span class=\"supfact\">v16</span> = <span class=\"supfact\">v18</span> + <span class=\"supfact\">v17</span>;\n  *a1 = Number L;\n  <span class=\"supfact\">v15</span> =\n      mmap64(Number L, <span class=\"supfact\">v16</span>, Number, Number, Number, Number L);\n  if (<span class=\"supfact\">v15</span> == (_DWORD *)Number) {\n    v7 = _errno_location();\n    v8 = strerror(*v7);\n    fprint_err(String, v8);\n    result = Number L;\n  } else {\n    *<span class=\"supfact\">v15</span> = Number;\n    <span class=\"supfact\">v15</span>[Number] = Number;\n    <span class=\"supfact\">v15</span>[Number] = Number;\n    <span class=\"supfact\">v15</span>[Number] = Number;\n    <span class=\"supfact\">v15</span>[Number] = a2;\n    <span class=\"supfact\">v15</span>[Number] = a3;\n    <span class=\"supfact\">v15</span>[Number] = <span class=\"supfact\">v19</span> + Number * a3;\n    <span class=\"supfact\">v15</span>[Number] = <span class=\"supfact\">v19</span>;\n    <span class=\"supfact\">v15</span>[Number] = a6;\n    if (a6 == Number) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      *((_WORD *)<span class=\"supfact\">v15</span> + Number) = Number;\n      <span class=\"supfact\">v15</span>[Number] =\n          LODWORD(<span class=\"supfact\">tv</span>.tv_sec) ^\n          (LODWORD(<span class=\"supfact\">tv</span>.tv_usec) << Number);\n    }\n    <span class=\"supfact\">v15</span>[Number] = a4;\n    <span class=\"supfact\">v15</span>[Number] = a5;\n    *((_QWORD *)<span class=\"supfact\">v15</span> + Number) = (char *)<span class=\"supfact\">v15</span> +\n                                                <span class=\"supfact\">v19</span> +\n                                                (__int64)<span class=\"supfact\">v18</span>;\n    *a1 = <span class=\"supfact\">v15</span>;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl map_circular_buffer(circular_buffer_p *circular, int circ_buf_size,\n                                int TS_in_packet, int maxnowait, int waitfor,\n                                const tswrite_pkt_hdr_type_t hdr_type) {\n  int v6;\n  int *v7;\n  char *v8;\n  int result;\n  timeval <span class=\"supfact\">now</span>;\n  circular_buffer_p <span class=\"supfact\">cb</span>;\n  int <span class=\"supfact\">total_size</span>;\n  int <span class=\"supfact\">data_size</span>;\n  int <span class=\"supfact\">base_size</span>;\n  int <span class=\"supfact\">hdr_size</span>;\n  if (hdr_type == PKT_HDR_TYPE_RTP)\n    v6 = Number;\n  else\n    v6 = Number;\n  <span class=\"supfact\">hdr_size</span> = v6;\n  <span class=\"supfact\">base_size</span> = Number * circ_buf_size + Number;\n  <span class=\"supfact\">data_size</span> = (v6 + Number * TS_in_packet) * circ_buf_size;\n  <span class=\"supfact\">total_size</span> =\n      <span class=\"supfact\">base_size</span> + <span class=\"supfact\">data_size</span>;\n  *circular = Number L;\n  <span class=\"supfact\">cb</span> = (circular_buffer_p)mmap64(\n      Number L, <span class=\"supfact\">total_size</span>, Number, Number, Number, Number L);\n  if (<span class=\"supfact\">cb</span> == (circular_buffer_p)Number) {\n    v7 = _errno_location();\n    v8 = strerror(*v7);\n    fprint_err(String, v8);\n    result = Number;\n  } else {\n    <span class=\"supfact\">cb</span>->start = Number;\n    <span class=\"supfact\">cb</span>->end = Number;\n    <span class=\"supfact\">cb</span>->pending = Number;\n    <span class=\"supfact\">cb</span>->eos = Number;\n    <span class=\"supfact\">cb</span>->size = circ_buf_size;\n    <span class=\"supfact\">cb</span>->TS_in_item = TS_in_packet;\n    <span class=\"supfact\">cb</span>->item_size =\n        <span class=\"supfact\">hdr_size</span> + Number * TS_in_packet;\n    <span class=\"supfact\">cb</span>-><span class=\"supfact\">hdr_size</span> = <span class=\"supfact\">hdr_size</span>;\n    <span class=\"supfact\">cb</span>->hdr_type = hdr_type;\n    if (hdr_type == PKT_HDR_TYPE_RTP) {\n      gettimeofday(&<span class=\"supfact\">now</span>, Number L);\n      <span class=\"supfact\">cb</span>->hdr.rtp.seq = Number;\n      <span class=\"supfact\">cb</span>->hdr.rtp.ssrc =\n          LODWORD(<span class=\"supfact\">now</span>.tv_sec) ^\n          (LODWORD(<span class=\"supfact\">now</span>.tv_usec) << Number);\n    }\n    <span class=\"supfact\">cb</span>->maxnowait = maxnowait;\n    <span class=\"supfact\">cb</span>->waitfor = waitfor;\n    <span class=\"supfact\">cb</span>->item_data = (byte *)<span class=\"supfact\">cb</span> +\n                                    <span class=\"supfact\">hdr_size</span> +\n                                    (__int64)<span class=\"supfact\">base_size</span>;\n    *circular = <span class=\"supfact\">cb</span>;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "yosh1k104", "repo_name": "D-Switch", "path": "yosh1k104/D-Switch/ea0a7a7c796a860b1903c3ab2722da253d71d6e0df8f7b1d2aeb7e06999a468a", "path_in_repo": "yosh1k104/D-Switch/nano-RK/projects/SAMPL/slip-clients/sox-gateway/src/ffdb.o", "objdump": "0000000000000000 <init_db>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec b0 01 00 00 \tsub    $0x1b0,%rsp\n   b:\t48 89 bd 58 fe ff ff \tmov    %rdi,-0x1a8(%rbp)\n  12:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  19:\t00 \n  1a:\t48 8d 95 60 fe ff ff \tlea    -0x1a0(%rbp),%rdx\n  21:\t48 8b 85 58 fe ff ff \tmov    -0x1a8(%rbp),%rax\n  28:\t48 89 d6             \tmov    %rdx,%rsi\n  2b:\t48 89 c7             \tmov    %rax,%rdi\n  2e:\te8 00 00 00 00       \tcallq  33 <init_db+0x33>\n  33:\t85 c0                \ttest   %eax,%eax\n  35:\t74 2e                \tje     65 <init_db+0x65>\n  37:\t48 8b 85 58 fe ff ff \tmov    -0x1a8(%rbp),%rax\n  3e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  43:\t48 89 c7             \tmov    %rax,%rdi\n  46:\te8 00 00 00 00       \tcallq  4b <init_db+0x4b>\n  4b:\t85 c0                \ttest   %eax,%eax\n  4d:\t74 0a                \tje     59 <init_db+0x59>\n  4f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  54:\te8 00 00 00 00       \tcallq  59 <init_db+0x59>\n  59:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  5e:\te8 00 00 00 00       \tcallq  63 <init_db+0x63>\n  63:\teb 2f                \tjmp    94 <init_db+0x94>\n  65:\t48 8b 85 58 fe ff ff \tmov    -0x1a8(%rbp),%rax\n  6c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  71:\t48 89 c7             \tmov    %rax,%rdi\n  74:\te8 00 00 00 00       \tcallq  79 <init_db+0x79>\n  79:\t85 c0                \ttest   %eax,%eax\n  7b:\t74 0c                \tje     89 <init_db+0x89>\n  7d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  82:\te8 00 00 00 00       \tcallq  87 <init_db+0x87>\n  87:\teb 0b                \tjmp    94 <init_db+0x94>\n  89:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  8e:\te8 00 00 00 00       \tcallq  93 <init_db+0x93>\n  93:\t90                   \tnop\n  94:\tc9                   \tleaveq \n  95:\tc3                   \tretq   ", "code_s": "int __fastcall init_db(const char *a1) {\n  int result;\n  struct stat <span class=\"supfact\">v2</span>[Number];\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = Number L;\n  if (stat(a1, <span class=\"supfact\">v2</span>)) {\n    if ((unsigned int)sqlite3_open(a1, &db))\n      err(String);\n    result = setup_new_db();\n  } else {\n    if ((unsigned int)sqlite3_open(a1, &db))\n      err(String);\n    result = puts(String);\n  }\n  return result;\n}", "code_t": "void __cdecl init_db(char *dbpath) {\n  stat <span class=\"supfact\">info</span>;\n  char *<span class=\"supfact\">dberror</span>;\n  <span class=\"supfact\">dberror</span> = Number L;\n  if (stat_0(dbpath, &<span class=\"supfact\">info</span>)) {\n    if ((unsigned int)sqlite3_open(dbpath, &db))\n      err(String);\n    setup_new_db();\n  } else {\n    if ((unsigned int)sqlite3_open(dbpath, &db))\n      err(String);\n    puts(String);\n  }\n}", "var": [{"name": "v2", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "info", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "rofl0r", "repo_name": "microwindows", "path": "rofl0r/microwindows/3f05555457b55e62636036b055b5284df65a26283432e7f8563b804b3503346d", "path_in_repo": "rofl0r/microwindows/src/obj/demos/nanox/ntetris.o", "objdump": "00000000000022e6 <timeout_delay>:\n    22e6:\t55                   \tpush   %rbp\n    22e7:\t48 89 e5             \tmov    %rsp,%rbp\n    22ea:\t48 83 ec 40          \tsub    $0x40,%rsp\n    22ee:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    22f2:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    22f6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    22fb:\t48 89 c7             \tmov    %rax,%rdi\n    22fe:\te8 00 00 00 00       \tcallq  2303 <timeout_delay+0x1d>\n    2303:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    2307:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    230b:\t48 8b 80 38 0b 00 00 \tmov    0xb38(%rax),%rax\n    2312:\t48 39 c2             \tcmp    %rax,%rdx\n    2315:\t7f 28                \tjg     233f <timeout_delay+0x59>\n    2317:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    231b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    231f:\t48 8b 80 38 0b 00 00 \tmov    0xb38(%rax),%rax\n    2326:\t48 39 c2             \tcmp    %rax,%rdx\n    2329:\t75 1b                \tjne    2346 <timeout_delay+0x60>\n    232b:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    232f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2333:\t48 8b 80 40 0b 00 00 \tmov    0xb40(%rax),%rax\n    233a:\t48 39 c2             \tcmp    %rax,%rdx\n    233d:\t7c 07                \tjl     2346 <timeout_delay+0x60>\n    233f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    2344:\teb 7b                \tjmp    23c1 <timeout_delay+0xdb>\n    2346:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    234a:\t48 8b 90 38 0b 00 00 \tmov    0xb38(%rax),%rdx\n    2351:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2355:\t48 29 c2             \tsub    %rax,%rdx\n    2358:\t48 89 d0             \tmov    %rdx,%rax\n    235b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    235f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2363:\t48 8b 90 40 0b 00 00 \tmov    0xb40(%rax),%rdx\n    236a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    236e:\t48 89 d1             \tmov    %rdx,%rcx\n    2371:\t48 29 c1             \tsub    %rax,%rcx\n    2374:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n    237b:\t9b c4 20 \n    237e:\t48 89 c8             \tmov    %rcx,%rax\n    2381:\t48 f7 ea             \timul   %rdx\n    2384:\t48 c1 fa 07          \tsar    $0x7,%rdx\n    2388:\t48 89 c8             \tmov    %rcx,%rax\n    238b:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n    238f:\t48 29 c2             \tsub    %rax,%rdx\n    2392:\t48 89 d0             \tmov    %rdx,%rax\n    2395:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2399:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    239d:\t48 69 d0 e8 03 00 00 \timul   $0x3e8,%rax,%rdx\n    23a4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    23a8:\t48 01 d0             \tadd    %rdx,%rax\n    23ab:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    23af:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    23b4:\t7f 07                \tjg     23bd <timeout_delay+0xd7>\n    23b6:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    23bb:\teb 04                \tjmp    23c1 <timeout_delay+0xdb>\n    23bd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    23c1:\tc9                   \tleaveq \n    23c2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall timeout_delay(__int64 a1) {\n  __int64 result;\n  struct timeval <span class=\"supfact\">tv</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  __suseconds_t <span class=\"supfact\">v4</span>;\n  __time_t <span class=\"supfact\">v5</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  if (<span class=\"supfact\">tv</span>.tv_sec > *(_QWORD *)(a1 + Number) ||\n      <span class=\"supfact\">tv</span>.tv_sec == *(_QWORD *)(a1 + Number) &&\n          <span class=\"supfact\">tv</span>.tv_usec >= *(_QWORD *)(a1 + Number))\n    return Number L;\n  <span class=\"supfact\">v5</span> = *(_QWORD *)(a1 + Number) - <span class=\"supfact\">tv</span>.tv_sec;\n  <span class=\"supfact\">v4</span> =\n      (*(_QWORD *)(a1 + Number) - <span class=\"supfact\">tv</span>.tv_usec) / Number;\n  <span class=\"supfact\">v3</span> = Number * <span class=\"supfact\">v5</span> + <span class=\"supfact\">v4</span>;\n  if (<span class=\"supfact\">v3</span> > Number)\n    result = <span class=\"supfact\">v3</span>;\n  else\n    result = Number L;\n  return result;\n}", "code_t": "unsigned __int64 __cdecl timeout_delay(nstate *state) {\n  unsigned __int64 result;\n  timeval <span class=\"supfact\">t</span>;\n  __int64 <span class=\"supfact\">ret</span>;\n  __int64 <span class=\"supfact\">m</span>;\n  __int64 <span class=\"supfact\">s</span>;\n  gettimeofday(&<span class=\"supfact\">t</span>, Number L);\n  if (<span class=\"supfact\">t</span>.tv_sec > state->timeout.tv_sec ||\n      <span class=\"supfact\">t</span>.tv_sec == state->timeout.tv_sec &&\n          <span class=\"supfact\">t</span>.tv_usec >= state->timeout.tv_usec)\n    return Number L;\n  <span class=\"supfact\">s</span> = state->timeout.tv_sec - <span class=\"supfact\">t</span>.tv_sec;\n  <span class=\"supfact\">m</span> =\n      (state->timeout.tv_usec - <span class=\"supfact\">t</span>.tv_usec) / Number;\n  <span class=\"supfact\">ret</span> = Number * <span class=\"supfact\">s</span> + <span class=\"supfact\">m</span>;\n  if (<span class=\"supfact\">ret</span> > Number)\n    result = <span class=\"supfact\">ret</span>;\n  else\n    result = Number L;\n  return result;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "t", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "jerrypnz", "repo_name": "breeze", "path": "jerrypnz/breeze/598211c4bd8a64d209b8966c14887e0868a502f4405f553bcac732a40ece6580", "path_in_repo": "jerrypnz/breeze/src/http.o", "objdump": "0000000000000dcd <response_get_header>:\n     dcd:\t55                   \tpush   %rbp\n     dce:\t48 89 e5             \tmov    %rsp,%rbp\n     dd1:\t48 83 ec 70          \tsub    $0x70,%rsp\n     dd5:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n     dd9:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n     ddd:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n     de1:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n     de5:\tba 40 00 00 00       \tmov    $0x40,%edx\n     dea:\t48 89 ce             \tmov    %rcx,%rsi\n     ded:\t48 89 c7             \tmov    %rax,%rdi\n     df0:\te8 00 00 00 00       \tcallq  df5 <response_get_header+0x28>\n     df5:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     df9:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     dfd:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     e01:\t48 8d 88 c0 01 00 00 \tlea    0x1c0(%rax),%rcx\n     e08:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n     e0c:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n     e10:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e14:\t49 89 c8             \tmov    %rcx,%r8\n     e17:\t48 89 d1             \tmov    %rdx,%rcx\n     e1a:\tba 00 00 00 00       \tmov    $0x0,%edx\n     e1f:\t48 89 f7             \tmov    %rsi,%rdi\n     e22:\t48 89 c6             \tmov    %rax,%rsi\n     e25:\te8 00 00 00 00       \tcallq  e2a <response_get_header+0x5d>\n     e2a:\t85 c0                \ttest   %eax,%eax\n     e2c:\t75 07                \tjne    e35 <response_get_header+0x68>\n     e2e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e33:\teb 0c                \tjmp    e41 <response_get_header+0x74>\n     e35:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e39:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     e3d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     e41:\tc9                   \tleaveq \n     e42:\tc3                   \tretq   ", "code_s": "__int64 __fastcall response_get_header(struct hsearch_data *a1, __int64 a2) {\n  ENTRY v2;\n  __int64 result;\n  char <span class=\"supfact\">v5</span>[Number];\n  ENTRY *<span class=\"supfact\">retval</span>;\n  ENTRY <span class=\"supfact\">item</span>;\n  strlowercase(a2, <span class=\"supfact\">v5</span>, Number L);\n  <span class=\"supfact\">item</span>.key = <span class=\"supfact\">v5</span>;\n  v2.key = <span class=\"supfact\">v5</span>;\n  v2.data = <span class=\"supfact\">item</span>.data;\n  if (hsearch_r(v2, FIND, &<span class=\"supfact\">retval</span>, a1 + Number))\n    result = *((_QWORD *)<span class=\"supfact\">retval</span>->data + Number);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "const char *__cdecl response_get_header(response_t *resp,\n                                        const char *header_name) {\n  ENTRY v2;\n  const char *result;\n  char <span class=\"supfact\">header_name_lower</span>[Number];\n  ENTRY *<span class=\"supfact\">ret</span>;\n  ENTRY <span class=\"supfact\">item</span>;\n  strlowercase(header_name, <span class=\"supfact\">header_name_lower</span>, Number L);\n  <span class=\"supfact\">item</span>.key = <span class=\"supfact\">header_name_lower</span>;\n  v2.key = <span class=\"supfact\">header_name_lower</span>;\n  v2.data = <span class=\"supfact\">item</span>.data;\n  if (hsearch_r(v2, FIND, &<span class=\"supfact\">ret</span>, &resp->_header_hash))\n    result = (const char *)*((_QWORD *)<span class=\"supfact\">ret</span>->data + Number);\n  else\n    result = Number L;\n  return result;\n}", "var": [{"name": "item", "type": "struct ENTRY { char * key; void * data; }", "ref_name": "item", "ref_type": "struct ENTRY { char * key; void * data; }"}], "body_in_train": false}, {"repo_owner": "lxl1140989", "repo_name": "6291-xl", "path": "lxl1140989/6291-xl/8a565e1eeb6e0851c3ea2eec820372e9b38289077077758397b2ccca92cf3acf", "path_in_repo": "lxl1140989/6291-xl/package/libnassdk/src/Demo/util/du_common.o", "objdump": "0000000000000f00 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:\n     f00:\t55                   \tpush   %rbp\n     f01:\t48 89 e5             \tmov    %rsp,%rbp\n     f04:\t53                   \tpush   %rbx\n     f05:\t48 83 ec 28          \tsub    $0x28,%rsp\n     f09:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     f0d:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n     f11:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     f15:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f19:\t48 89 d6             \tmov    %rdx,%rsi\n     f1c:\t48 89 c7             \tmov    %rax,%rdi\n     f1f:\te8 00 00 00 00       \tcallq  f24 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24>\n     f24:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f28:\t48 89 c7             \tmov    %rax,%rdi\n     f2b:\te8 00 00 00 00       \tcallq  f30 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>\n     f30:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     f34:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f38:\t48 89 c7             \tmov    %rax,%rdi\n     f3b:\te8 00 00 00 00       \tcallq  f40 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>\n     f40:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     f44:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n     f48:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     f4c:\t48 89 d6             \tmov    %rdx,%rsi\n     f4f:\t48 89 c7             \tmov    %rax,%rdi\n     f52:\te8 00 00 00 00       \tcallq  f57 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x57>\n     f57:\t84 c0                \ttest   %al,%al\n     f59:\t74 39                \tje     f94 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x94>\n     f5b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     f5f:\t48 89 c7             \tmov    %rax,%rdi\n     f62:\te8 00 00 00 00       \tcallq  f67 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x67>\n     f67:\t0f b6 00             \tmovzbl (%rax),%eax\n     f6a:\t0f be c0             \tmovsbl %al,%eax\n     f6d:\t89 c7                \tmov    %eax,%edi\n     f6f:\te8 00 00 00 00       \tcallq  f74 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x74>\n     f74:\t89 c3                \tmov    %eax,%ebx\n     f76:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     f7a:\t48 89 c7             \tmov    %rax,%rdi\n     f7d:\te8 00 00 00 00       \tcallq  f82 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>\n     f82:\t89 da                \tmov    %ebx,%edx\n     f84:\t88 10                \tmov    %dl,(%rax)\n     f86:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     f8a:\t48 89 c7             \tmov    %rax,%rdi\n     f8d:\te8 00 00 00 00       \tcallq  f92 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x92>\n     f92:\teb a0                \tjmp    f34 <_ZN9DU_Common5upperERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>\n     f94:\t90                   \tnop\n     f95:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     f99:\t48 83 c4 28          \tadd    $0x28,%rsp\n     f9d:\t5b                   \tpop    %rbx\n     f9e:\t5d                   \tpop    %rbp\n     f9f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall DU_Common upper(__int64 a1, __int64 a2) {\n  char *v2;\n  char v3;\n  __int64 <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(a1, a2);\n  for (<span class=\"supfact\">i</span> = std __cxx11\n           basic_string<char, std char_traits<char>, std allocator<char>>\n               begin(a1);\n       ; __gnu_cxx __normal_iterator<\n           char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>\n       operator++(&<span class=\"supfact\">i</span>)) {\n    <span class=\"supfact\">v6</span>[Number] = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            end(a1);\n    if (!(unsigned __int8)__gnu_cxx operator!=\n        <char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>(\n            &<span class=\"supfact\">i</span>, <span class=\"supfact\">v6</span>))\n      break;\n    v2 = (char *)__gnu_cxx __normal_iterator<\n        char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                         std allocator<char>>>\n    operator*(&<span class=\"supfact\">i</span>);\n    v3 = toupper(*v2);\n    *(_BYTE *)__gnu_cxx __normal_iterator<\n        char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                         std allocator<char>>>\n    operator*(&<span class=\"supfact\">i</span>) = v3;\n  }\n  return a1;\n}", "code_t": "std string *__cdecl DU_Common upper(std string *retstr, const std string *s) {\n  __gnu_cxx __normal_iterator<\n      char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>>>\n      reference v2;\n  char v3;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      iterator <span class=\"supfact\">iter</span>;\n  __gnu_cxx __normal_iterator<\n      char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                       std allocator<char>>>\n      <span class=\"supfact\">__rhs</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(retstr, s);\n  for (<span class=\"supfact\">iter</span>._M_current = (char *)std __cxx11\n           basic_string<char, std char_traits<char>, std allocator<char>>\n               begin(retstr);\n       ; __gnu_cxx __normal_iterator<\n           char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>\n       operator++(&<span class=\"supfact\">iter</span>)) {\n    <span class=\"supfact\">__rhs</span>._M_current = (char *)std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            end(retstr);\n    if (!__gnu_cxx operator!=\n        <char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>(\n            &<span class=\"supfact\">iter</span>, &<span class=\"supfact\">__rhs</span>))\n      break;\n    v2 = __gnu_cxx __normal_iterator<\n        char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                         std allocator<char>>>\n    operator*(&<span class=\"supfact\">iter</span>);\n    v3 = toupper(*v2);\n    *__gnu_cxx __normal_iterator<\n        char *, std __cxx11 basic_string<char, std char_traits<char>,\n                                         std allocator<char>>>\n    operator*(&<span class=\"supfact\">iter</span>) = v3;\n  }\n  return retstr;\n}", "var": [{"name": "v6", "type": "__int64[3]", "ref_name": "__rhs", "ref_type": "struct __gnu_cxx::__normal_iterator<char*,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > > { char * _M_current; }"}, {"name": "i", "type": "__int64", "ref_name": "iter", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::iterator { char * _M_current; }"}], "body_in_train": false}, {"repo_owner": "github", "repo_name": "git-msysgit", "path": "github/git-msysgit/6ae84bed2bea0bdc791463b7d3222148587b6c92f5751dc6aba3318c26f5edc8", "path_in_repo": "github/git-msysgit//url.o", "objdump": "0000000000000392 <url_decode_mem>:\n 392:\t55                   \tpush   %rbp\n 393:\t48 89 e5             \tmov    %rsp,%rbp\n 396:\t48 83 ec 30          \tsub    $0x30,%rsp\n 39a:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 39e:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n 3a1:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n 3a8:\t00 \n 3a9:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n 3b0:\t00 \n 3b1:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n 3b8:\t00 \n 3b9:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 3bc:\t48 63 d0             \tmovslq %eax,%rdx\n 3bf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3c3:\tbe 3a 00 00 00       \tmov    $0x3a,%esi\n 3c8:\t48 89 c7             \tmov    %rax,%rdi\n 3cb:\te8 00 00 00 00       \tcallq  3d0 <url_decode_mem+0x3e>\n 3d0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 3d4:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 3d9:\t74 4c                \tje     427 <url_decode_mem+0x95>\n 3db:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3df:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n 3e3:\t76 42                \tjbe    427 <url_decode_mem+0x95>\n 3e5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3e9:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 3ed:\t48 29 c2             \tsub    %rax,%rdx\n 3f0:\t48 89 d0             \tmov    %rdx,%rax\n 3f3:\t48 89 c2             \tmov    %rax,%rdx\n 3f6:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n 3fa:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 3fe:\t48 89 ce             \tmov    %rcx,%rsi\n 401:\t48 89 c7             \tmov    %rax,%rdi\n 404:\te8 00 00 00 00       \tcallq  409 <url_decode_mem+0x77>\n 409:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 40c:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 410:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 414:\t48 29 d1             \tsub    %rdx,%rcx\n 417:\t48 89 ca             \tmov    %rcx,%rdx\n 41a:\t29 d0                \tsub    %edx,%eax\n 41c:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n 41f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 423:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 427:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 42b:\t8b 75 d4             \tmov    -0x2c(%rbp),%esi\n 42e:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n 432:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 438:\t48 89 d1             \tmov    %rdx,%rcx\n 43b:\tba 00 00 00 00       \tmov    $0x0,%edx\n 440:\t48 89 c7             \tmov    %rax,%rdi\n 443:\te8 15 fe ff ff       \tcallq  25d <url_decode_internal>\n 448:\tc9                   \tleaveq \n 449:\tc3                   \tretq   ", "code_s": "__int64 __fastcall url_decode_mem(void *a1, int a2) {\n  int <span class=\"supfact\">v3</span>;\n  void *<span class=\"supfact\">s</span>;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  _BYTE *<span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">s</span> = a1;\n  <span class=\"supfact\">v3</span> = a2;\n  <span class=\"supfact\">v5</span>[Number] = Number L;\n  <span class=\"supfact\">v5</span>[Number] = Number L;\n  <span class=\"supfact\">v5</span>[Number] = (__int64)&strbuf_slopbuf;\n  <span class=\"supfact\">v6</span> = memchr(a1, Number, a2);\n  if (<span class=\"supfact\">v6</span> && <span class=\"supfact\">v6</span> > <span class=\"supfact\">s</span>) {\n    strbuf_add(<span class=\"supfact\">v5</span>, <span class=\"supfact\">s</span>,\n               <span class=\"supfact\">v6</span> - (_BYTE *)<span class=\"supfact\">s</span>);\n    <span class=\"supfact\">v3</span> =\n        a2 - ((_DWORD)<span class=\"supfact\">v6</span> - (_DWORD)<span class=\"supfact\">s</span>);\n    <span class=\"supfact\">s</span> = <span class=\"supfact\">v6</span>;\n  }\n  return url_decode_internal((unsigned __int8 **)&<span class=\"supfact\">s</span>,\n                             <span class=\"supfact\">v3</span>, Number L,\n                             (__int64)<span class=\"supfact\">v5</span>, Number);\n}", "code_t": "char *__cdecl url_decode_mem(const char *url, int len) {\n  int <span class=\"supfact\">lena</span>;\n  const char *<span class=\"supfact\">urla</span>;\n  strbuf <span class=\"supfact\">out</span>;\n  const char *<span class=\"supfact\">colon</span>;\n  <span class=\"supfact\">urla</span> = url;\n  <span class=\"supfact\">lena</span> = len;\n  <span class=\"supfact\">out</span>.alloc = Number L;\n  <span class=\"supfact\">out</span>.len = Number L;\n  <span class=\"supfact\">out</span>.buf = (char *)&strbuf_slopbuf;\n  <span class=\"supfact\">colon</span> = (const char *)memchr(url, Number, len);\n  if (<span class=\"supfact\">colon</span> && <span class=\"supfact\">colon</span> > <span class=\"supfact\">urla</span>) {\n    strbuf_add(&<span class=\"supfact\">out</span>, <span class=\"supfact\">urla</span>,\n               <span class=\"supfact\">colon</span> - <span class=\"supfact\">urla</span>);\n    <span class=\"supfact\">lena</span> =\n        len - ((_DWORD)<span class=\"supfact\">colon</span> - (_DWORD)<span class=\"supfact\">urla</span>);\n    <span class=\"supfact\">urla</span> = <span class=\"supfact\">colon</span>;\n  }\n  return url_decode_internal(&<span class=\"supfact\">urla</span>, <span class=\"supfact\">lena</span>,\n                             Number L, &<span class=\"supfact\">out</span>, Number);\n}", "var": [{"name": "v5", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "ref_name": "out", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": false}, {"repo_owner": "sconklin", "repo_name": "ltp-tools", "path": "sconklin/ltp-tools/97538d056bc5f36d3265ad26584992229a513cc00b0099d0fb6e632ff44ba7b3", "path_in_repo": "sconklin/ltp-tools/ltp-full-20110915/testcases/open_posix_testsuite/conformance/interfaces/sigaction/4-36.run-test", "objdump": "00000000004011e5 <main>:\n  4011e5:\t55                   \tpush   %rbp\n  4011e6:\t48 89 e5             \tmov    %rsp,%rbp\n  4011e9:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  4011f0:\te8 cb fe ff ff       \tcallq  4010c0 <fork@plt>\n  4011f5:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4011f8:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4011fc:\t0f 85 8f 00 00 00    \tjne    401291 <main+0xac>\n  401202:\t48 c7 85 60 ff ff ff \tmovq   $0x4011b2,-0xa0(%rbp)\n  401209:\tb2 11 40 00 \n  40120d:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  401214:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  40121b:\t48 83 c0 08          \tadd    $0x8,%rax\n  40121f:\t48 89 c7             \tmov    %rax,%rdi\n  401222:\te8 39 fe ff ff       \tcallq  401060 <sigemptyset@plt>\n  401227:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  40122e:\t48 83 c0 08          \tadd    $0x8,%rax\n  401232:\tbe 13 00 00 00       \tmov    $0x13,%esi\n  401237:\t48 89 c7             \tmov    %rax,%rdi\n  40123a:\te8 71 fe ff ff       \tcallq  4010b0 <sigaddset@plt>\n  40123f:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  401246:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40124b:\t48 89 c6             \tmov    %rax,%rsi\n  40124e:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n  401253:\te8 f8 fd ff ff       \tcallq  401050 <sigaction@plt>\n  401258:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  40125b:\t75 14                \tjne    401271 <main+0x8c>\n  40125d:\tbf 30 20 40 00       \tmov    $0x402030,%edi\n  401262:\te8 29 fe ff ff       \tcallq  401090 <perror@plt>\n  401267:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  40126c:\te9 86 00 00 00       \tjmpq   4012f7 <main+0x112>\n  401271:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n  401276:\te8 b5 fd ff ff       \tcallq  401030 <raise@plt>\n  40127b:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  40127e:\t75 0a                \tjne    40128a <main+0xa5>\n  401280:\tbf 30 20 40 00       \tmov    $0x402030,%edi\n  401285:\te8 06 fe ff ff       \tcallq  401090 <perror@plt>\n  40128a:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  40128f:\teb 66                \tjmp    4012f7 <main+0x112>\n  401291:\t48 8d 4d f8          \tlea    -0x8(%rbp),%rcx\n  401295:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401298:\tba 02 00 00 00       \tmov    $0x2,%edx\n  40129d:\t48 89 ce             \tmov    %rcx,%rsi\n  4012a0:\t89 c7                \tmov    %eax,%edi\n  4012a2:\te8 d9 fd ff ff       \tcallq  401080 <waitpid@plt>\n  4012a7:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4012aa:\t75 11                \tjne    4012bd <main+0xd8>\n  4012ac:\tbf 70 20 40 00       \tmov    $0x402070,%edi\n  4012b1:\te8 da fd ff ff       \tcallq  401090 <perror@plt>\n  4012b6:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  4012bb:\teb 3a                \tjmp    4012f7 <main+0x112>\n  4012bd:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4012c0:\t0f b6 c0             \tmovzbl %al,%eax\n  4012c3:\t83 f8 7f             \tcmp    $0x7f,%eax\n  4012c6:\t75 20                \tjne    4012e8 <main+0x103>\n  4012c8:\tbf a6 20 40 00       \tmov    $0x4020a6,%edi\n  4012cd:\te8 6e fd ff ff       \tcallq  401040 <puts@plt>\n  4012d2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4012d5:\tbe 09 00 00 00       \tmov    $0x9,%esi\n  4012da:\t89 c7                \tmov    %eax,%edi\n  4012dc:\te8 8f fd ff ff       \tcallq  401070 <kill@plt>\n  4012e1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4012e6:\teb 0f                \tjmp    4012f7 <main+0x112>\n  4012e8:\tbf b2 20 40 00       \tmov    $0x4020b2,%edi\n  4012ed:\te8 4e fd ff ff       \tcallq  401040 <puts@plt>\n  4012f2:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4012f7:\tc9                   \tleaveq \n  4012f8:\tc3                   \tretq   \n  4012f9:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  struct sigaction <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">stat_loc</span>;\n  __pid_t <span class=\"supfact\">pid</span>;\n  <span class=\"supfact\">pid</span> = fork();\n  if (<span class=\"supfact\">pid</span>) {\n    if (waitpid(<span class=\"supfact\">pid</span>, &<span class=\"supfact\">stat_loc</span>, Number) ==\n        Number) {\n      perror(String);\n      result = Number;\n    } else if ((unsigned __int8)<span class=\"supfact\">stat_loc</span> == Number) {\n      puts(String);\n      kill(<span class=\"supfact\">pid</span>, Number);\n      result = Number;\n    } else {\n      puts(String);\n      result = Number;\n    }\n  } else {\n    <span class=\"supfact\">v4</span>.sa_handler = (__sighandler_t)handler;\n    <span class=\"supfact\">v4</span>.sa_flags = Number;\n    sigemptyset(&<span class=\"supfact\">v4</span>.sa_mask);\n    sigaddset(&<span class=\"supfact\">v4</span>.sa_mask, Number);\n    if (sigaction(Number, &<span class=\"supfact\">v4</span>, Number L) == Number) {\n      perror(String);\n      result = Number;\n    } else {\n      if (raise(Number) == Number)\n        perror(String);\n      result = Number;\n    }\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  sigaction <span class=\"supfact\">act</span>;\n  int <span class=\"supfact\">s</span>;\n  pid_t <span class=\"supfact\">pid</span>;\n  <span class=\"supfact\">pid</span> = fork();\n  if (<span class=\"supfact\">pid</span>) {\n    if (waitpid(<span class=\"supfact\">pid</span>, &<span class=\"supfact\">s</span>, Number) == Number) {\n      perror(String);\n      result = Number;\n    } else if ((unsigned __int8)<span class=\"supfact\">s</span> == Number) {\n      puts(String);\n      kill(<span class=\"supfact\">pid</span>, Number);\n      result = Number;\n    } else {\n      puts(String);\n      result = Number;\n    }\n  } else {\n    <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)handler;\n    <span class=\"supfact\">act</span>.sa_flags = Number;\n    sigemptyset(&<span class=\"supfact\">act</span>.sa_mask);\n    sigaddset(&<span class=\"supfact\">act</span>.sa_mask, Number);\n    if (sigaction(Number, &<span class=\"supfact\">act</span>, Number L) == Number) {\n      perror(String);\n      result = Number;\n    } else {\n      if (raise(Number) == Number)\n        perror(String);\n      result = Number;\n    }\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": false}, {"repo_owner": "YumeMichi", "repo_name": "Refrain", "path": "YumeMichi/Refrain/48070e187d78ad8dfb381e902f8a984ae11f67fff7f2e0a4cdae5ef8e13e4dcd", "path_in_repo": "YumeMichi/Refrain/tools/testing/selftests/bpf/libbpf.o", "objdump": "00000000000041c9 <check_path>:\n    41c9:\t55                   \tpush   %rbp\n    41ca:\t48 89 e5             \tmov    %rsp,%rbp\n    41cd:\t48 81 ec 30 01 00 00 \tsub    $0x130,%rsp\n    41d4:\t48 89 bd d8 fe ff ff \tmov    %rdi,-0x128(%rbp)\n    41db:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    41e2:\t48 83 bd d8 fe ff ff \tcmpq   $0x0,-0x128(%rbp)\n    41e9:\t00 \n    41ea:\t75 0a                \tjne    41f6 <check_path+0x2d>\n    41ec:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    41f1:\te9 ff 00 00 00       \tjmpq   42f5 <check_path+0x12c>\n    41f6:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    41fd:\t48 89 c7             \tmov    %rax,%rdi\n    4200:\te8 00 00 00 00       \tcallq  4205 <check_path+0x3c>\n    4205:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    4209:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    420e:\t75 0a                \tjne    421a <check_path+0x51>\n    4210:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    4215:\te9 db 00 00 00       \tjmpq   42f5 <check_path+0x12c>\n    421a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    421e:\t48 89 c7             \tmov    %rax,%rdi\n    4221:\te8 00 00 00 00       \tcallq  4226 <check_path+0x5d>\n    4226:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    422a:\t48 8d 95 e0 fe ff ff \tlea    -0x120(%rbp),%rdx\n    4231:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4235:\t48 89 d6             \tmov    %rdx,%rsi\n    4238:\t48 89 c7             \tmov    %rax,%rdi\n    423b:\te8 00 00 00 00       \tcallq  4240 <check_path+0x77>\n    4240:\t85 c0                \ttest   %eax,%eax\n    4242:\t74 59                \tje     429d <check_path+0xd4>\n    4244:\te8 00 00 00 00       \tcallq  4249 <check_path+0x80>\n    4249:\t8b 00                \tmov    (%rax),%eax\n    424b:\t48 8d 8d 60 ff ff ff \tlea    -0xa0(%rbp),%rcx\n    4252:\tba 80 00 00 00       \tmov    $0x80,%edx\n    4257:\t48 89 ce             \tmov    %rcx,%rsi\n    425a:\t89 c7                \tmov    %eax,%edi\n    425c:\te8 00 00 00 00       \tcallq  4261 <check_path+0x98>\n    4261:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4265:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 426c <check_path+0xa3>\n    426c:\t48 85 c0             \ttest   %rax,%rax\n    426f:\t74 20                \tje     4291 <check_path+0xc8>\n    4271:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 4278 <check_path+0xaf>\n    4278:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    427c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4280:\t48 89 c6             \tmov    %rax,%rsi\n    4283:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 428a <check_path+0xc1>\n    428a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    428f:\tff d1                \tcallq  *%rcx\n    4291:\te8 00 00 00 00       \tcallq  4296 <check_path+0xcd>\n    4296:\t8b 00                \tmov    (%rax),%eax\n    4298:\tf7 d8                \tneg    %eax\n    429a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    429d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    42a1:\t48 89 c7             \tmov    %rax,%rdi\n    42a4:\te8 00 00 00 00       \tcallq  42a9 <check_path+0xe0>\n    42a9:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    42ad:\t75 43                \tjne    42f2 <check_path+0x129>\n    42af:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    42b6:\tba 11 4a fe ca       \tmov    $0xcafe4a11,%edx\n    42bb:\t48 39 d0             \tcmp    %rdx,%rax\n    42be:\t74 32                \tje     42f2 <check_path+0x129>\n    42c0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 42c7 <check_path+0xfe>\n    42c7:\t48 85 c0             \ttest   %rax,%rax\n    42ca:\t74 1f                \tje     42eb <check_path+0x122>\n    42cc:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 42d3 <check_path+0x10a>\n    42d3:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n    42da:\t48 89 c6             \tmov    %rax,%rsi\n    42dd:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 42e4 <check_path+0x11b>\n    42e4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    42e9:\tff d2                \tcallq  *%rdx\n    42eb:\tc7 45 fc ea ff ff ff \tmovl   $0xffffffea,-0x4(%rbp)\n    42f2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    42f5:\tc9                   \tleaveq \n    42f6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall check_path(const char *a1) {\n  int *v2;\n  struct statfs <span class=\"supfact\">v3</span>;\n  char <span class=\"supfact\">v4</span>[Number];\n  const char *<span class=\"supfact\">v5</span>;\n  char *<span class=\"supfact\">file</span>;\n  char *<span class=\"supfact\">path</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = Number;\n  if (!a1)\n    return Number L;\n  <span class=\"supfact\">path</span> = strdup(a1);\n  if (!<span class=\"supfact\">path</span>)\n    return Number L;\n  <span class=\"supfact\">file</span> = dirname(<span class=\"supfact\">path</span>);\n  if (statfs(<span class=\"supfact\">file</span>, &<span class=\"supfact\">v3</span>)) {\n    v2 = _errno_location();\n    <span class=\"supfact\">v5</span> = (const char *)str_error((unsigned int)*v2,\n                                                 <span class=\"supfact\">v4</span>, Number L);\n    if (_pr_warning)\n      _pr_warning(String, <span class=\"supfact\">file</span>, <span class=\"supfact\">v5</span>);\n    <span class=\"supfact\">v8</span> = -*_errno_location();\n  }\n  free(<span class=\"supfact\">path</span>);\n  if (!<span class=\"supfact\">v8</span> && <span class=\"supfact\">v3</span>.f_type != Number L) {\n    if (_pr_warning)\n      _pr_warning(String, a1);\n    <span class=\"supfact\">v8</span> = Number;\n  }\n  return <span class=\"supfact\">v8</span>;\n}", "code_t": "int __cdecl check_path(const char *path) {\n  int *v2;\n  statfs <span class=\"supfact\">st_fs</span>;\n  char <span class=\"supfact\">errmsg</span>[Number];\n  char *<span class=\"supfact\">cp</span>;\n  char *<span class=\"supfact\">dir</span>;\n  char *<span class=\"supfact\">dname</span>;\n  int <span class=\"supfact\">err</span>;\n  <span class=\"supfact\">err</span> = Number;\n  if (!path)\n    return Number;\n  <span class=\"supfact\">dname</span> = strdup(path);\n  if (!<span class=\"supfact\">dname</span>)\n    return Number;\n  <span class=\"supfact\">dir</span> = dirname(<span class=\"supfact\">dname</span>);\n  if (statfs_0(<span class=\"supfact\">dir</span>, &<span class=\"supfact\">st_fs</span>)) {\n    v2 = _errno_location();\n    <span class=\"supfact\">cp</span> =\n        (char *)str_error((unsigned int)*v2, <span class=\"supfact\">errmsg</span>, Number L);\n    if (_pr_warning)\n      _pr_warning(String, <span class=\"supfact\">dir</span>, <span class=\"supfact\">cp</span>);\n    <span class=\"supfact\">err</span> = -*_errno_location();\n  }\n  free(<span class=\"supfact\">dname</span>);\n  if (!<span class=\"supfact\">err</span> && <span class=\"supfact\">st_fs</span>.f_type != Number L) {\n    if (_pr_warning)\n      _pr_warning(String, path);\n    <span class=\"supfact\">err</span> = Number;\n  }\n  return <span class=\"supfact\">err</span>;\n}", "var": [{"name": "v3", "type": "struct statfs { __fsword_t f_type; __fsword_t f_bsize; __fsblkcnt_t f_blocks; __fsblkcnt_t f_bfree; __fsblkcnt_t f_bavail; __fsfilcnt_t f_files; __fsfilcnt_t f_ffree; __fsid_t f_fsid; __fsword_t f_namelen; __fsword_t f_frsize; __fsword_t f_flags; __fsword_t[4] f_spare; }", "ref_name": "st_fs", "ref_type": "struct statfs { __fsword_t f_type; __fsword_t f_bsize; __fsblkcnt_t f_blocks; __fsblkcnt_t f_bfree; __fsblkcnt_t f_bavail; __fsfilcnt_t f_files; __fsfilcnt_t f_ffree; __fsid_t f_fsid; __fsword_t f_namelen; __fsword_t f_frsize; __fsword_t f_flags; __fsword_t[4] f_spare; }"}], "body_in_train": false}, {"repo_owner": "ardax", "repo_name": "Pellet", "path": "ardax/Pellet/09647a44e76be3cea0c2f9a7241b9e63370114795cc5f1de0c47077caeb8eb9e", "path_in_repo": "ardax/Pellet//CompletionStrategy.o", "objdump": "00000000000063da <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv>:\n    63da:\t55                   \tpush   %rbp\n    63db:\t48 89 e5             \tmov    %rsp,%rbp\n    63de:\t48 83 ec 40          \tsub    $0x40,%rsp\n    63e2:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    63e6:\te8 00 00 00 00       \tcallq  63eb <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x11>\n    63eb:\t84 c0                \ttest   %al,%al\n    63ed:\t74 4a                \tje     6439 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x5f>\n    63ef:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 63f5 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x1b>\n    63f5:\t83 c0 01             \tadd    $0x1,%eax\n    63f8:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 63fe <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x24>\n    63fe:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    6405:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 640b <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x31>\n    640b:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    640e:\t7d 15                \tjge    6425 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x4b>\n    6410:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    6415:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    641a:\te8 00 00 00 00       \tcallq  641f <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x45>\n    641f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    6423:\teb e0                \tjmp    6405 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x2b>\n    6425:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    642a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    642f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6434:\te8 00 00 00 00       \tcallq  6439 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x5f>\n    6439:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    643d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    6441:\t48 05 a0 00 00 00    \tadd    $0xa0,%rax\n    6447:\t48 89 c7             \tmov    %rax,%rdi\n    644a:\te8 00 00 00 00       \tcallq  644f <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x75>\n    644f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    6453:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    6457:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    645b:\t48 05 a0 00 00 00    \tadd    $0xa0,%rax\n    6461:\t48 89 c7             \tmov    %rax,%rdi\n    6464:\te8 00 00 00 00       \tcallq  6469 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x8f>\n    6469:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    646d:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    6471:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    6475:\t48 89 d6             \tmov    %rdx,%rsi\n    6478:\t48 89 c7             \tmov    %rax,%rdi\n    647b:\te8 00 00 00 00       \tcallq  6480 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0xa6>\n    6480:\t84 c0                \ttest   %al,%al\n    6482:\t0f 84 88 00 00 00    \tje     6510 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x136>\n    6488:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    648c:\t48 89 c7             \tmov    %rax,%rdi\n    648f:\te8 00 00 00 00       \tcallq  6494 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0xba>\n    6494:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    6498:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    649c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    64a0:\t48 8b 00             \tmov    (%rax),%rax\n    64a3:\t48 83 c0 60          \tadd    $0x60,%rax\n    64a7:\t48 8b 10             \tmov    (%rax),%rdx\n    64aa:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    64ae:\t48 89 c7             \tmov    %rax,%rdi\n    64b1:\tff d2                \tcallq  *%rdx\n    64b3:\t83 f0 01             \txor    $0x1,%eax\n    64b6:\t84 c0                \ttest   %al,%al\n    64b8:\t75 3e                \tjne    64f8 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x11e>\n    64ba:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    64be:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    64c2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    64c6:\t48 8b 00             \tmov    (%rax),%rax\n    64c9:\t48 05 40 01 00 00    \tadd    $0x140,%rax\n    64cf:\t48 8b 08             \tmov    (%rax),%rcx\n    64d2:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    64d6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    64da:\t48 89 d6             \tmov    %rdx,%rsi\n    64dd:\t48 89 c7             \tmov    %rax,%rdi\n    64e0:\tff d1                \tcallq  *%rcx\n    64e2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    64e6:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    64ea:\t48 89 c7             \tmov    %rax,%rdi\n    64ed:\te8 00 00 00 00       \tcallq  64f2 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x118>\n    64f2:\t84 c0                \ttest   %al,%al\n    64f4:\t75 19                \tjne    650f <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x135>\n    64f6:\teb 01                \tjmp    64f9 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x11f>\n    64f8:\t90                   \tnop\n    64f9:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    64fd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6502:\t48 89 c7             \tmov    %rax,%rdi\n    6505:\te8 00 00 00 00       \tcallq  650a <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x130>\n    650a:\te9 44 ff ff ff       \tjmpq   6453 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x79>\n    650f:\t90                   \tnop\n    6510:\te8 00 00 00 00       \tcallq  6515 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x13b>\n    6515:\t84 c0                \ttest   %al,%al\n    6517:\t74 4a                \tje     6563 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x189>\n    6519:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    6520:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6526 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x14c>\n    6526:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n    6529:\t7d 15                \tjge    6540 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x166>\n    652b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    6530:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6535:\te8 00 00 00 00       \tcallq  653a <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x160>\n    653a:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n    653e:\teb e0                \tjmp    6520 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x146>\n    6540:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    6545:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    654a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    654f:\te8 00 00 00 00       \tcallq  6554 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x17a>\n    6554:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 655a <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x180>\n    655a:\t83 e8 01             \tsub    $0x1,%eax\n    655d:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6563 <_ZN18CompletionStrategy25applyMinRuleOnIndividualsEv+0x189>\n    6563:\t90                   \tnop\n    6564:\tc9                   \tleaveq \n    6565:\tc3                   \tretq   ", "code_s": "__int64 __fastcall CompletionStrategy\napplyMinRuleOnIndividuals(CompletionStrategy *this) {\n  __int64 result;\n  __int64 <span class=\"supfact\">j</span>;\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">k</span>;\n  int <span class=\"supfact\">i</span>;\n  if ((unsigned __int8)PARAMS_PRINT_DEBUGINFO_INHTML()) {\n    ++g_iCommentIndent;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < g_iCommentIndent;\n         ++<span class=\"supfact\">i</span>)\n      printf(String);\n    printf(String, String);\n  }\n  for (<span class=\"supfact\">j</span> =\n           std map<_ExpressionNode_ *, Node *, strCmpExprNode,\n                   std allocator<std pair<_ExpressionNode_ *const, Node *>>>\n               begin(*((_QWORD *)this + Number) + Number L);\n       ; std _Rb_tree_iterator<std pair<_ExpressionNode_ *const, Node *>>\n       operator++(&<span class=\"supfact\">j</span>, Number L)) {\n    <span class=\"supfact\">v3</span>[Number] =\n        std map<_ExpressionNode_ *, Node *, strCmpExprNode,\n                std allocator<std pair<_ExpressionNode_ *const, Node *>>>\n        end(*((_QWORD *)this + Number) + Number L);\n    if (!(unsigned __int8)std operator!=(&<span class=\"supfact\">j</span>,\n                                         <span class=\"supfact\">v3</span>))\n      break;\n    <span class=\"supfact\">v4</span> = *(\n        _QWORD\n            *)(std _Rb_tree_iterator<std pair<_ExpressionNode_ *const, Node *>>\n               operator->(&<span class=\"supfact\">j</span>) +\n               Number);\n    if ((*(unsigned __int8(__fastcall **)(__int64))(\n            *(_QWORD *)<span class=\"supfact\">v4</span> + Number L))(<span class=\"supfact\">v4</span>) ==\n        Number) {\n      <span class=\"supfact\">v3</span>[Number] = <span class=\"supfact\">v4</span>;\n      (*(void(__fastcall **)(CompletionStrategy *, __int64))(\n          *(_QWORD *)this + Number L))(this, <span class=\"supfact\">v4</span>);\n      if ((unsigned __int8)ABox isClosed(*((ABox **)this + Number)))\n        break;\n    }\n  }\n  result = PARAMS_PRINT_DEBUGINFO_INHTML();\n  if ((_BYTE)result) {\n    for (<span class=\"supfact\">k</span> = Number; <span class=\"supfact\">k</span> < g_iCommentIndent;\n         ++<span class=\"supfact\">k</span>)\n      printf(String);\n    printf(String);\n    result = (unsigned int)--g_iCommentIndent;\n  }\n  return result;\n}", "code_t": "void __cdecl CompletionStrategy\napplyMinRuleOnIndividuals(CompletionStrategy *const this) {\n  std map<_ExpressionNode_ *, Node *, strCmpExprNode,\n          std allocator<std pair<_ExpressionNode_ *const, Node *>>>\n      iterator <span class=\"supfact\">i_0</span>;\n  std _Rb_tree_iterator<std pair<_ExpressionNode_ *const, Node *>> _Self\n      <span class=\"supfact\">__y</span>;\n  Individual *pNode;\n  Node *<span class=\"supfact\">pN</span>;\n  int <span class=\"supfact\">i_1</span>;\n  int <span class=\"supfact\">i</span>;\n  if ((unsigned __int8)PARAMS_PRINT_DEBUGINFO_INHTML()) {\n    ++g_iCommentIndent;\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < g_iCommentIndent;\n         ++<span class=\"supfact\">i</span>)\n      printf(String);\n    printf(String, String);\n  }\n  for (<span class=\"supfact\">i_0</span>._M_node =\n           std map<_ExpressionNode_ *, Node *, strCmpExprNode,\n                   std allocator<std pair<_ExpressionNode_ *const, Node *>>>\n               begin(&this->m_pABox->m_mNodes)\n                   ._M_node;\n       ; std _Rb_tree_iterator<std pair<_ExpressionNode_ *const, Node *>>\n       operator++(&<span class=\"supfact\">i_0</span>, Number)) {\n    <span class=\"supfact\">__y</span>._M_node =\n        std map<_ExpressionNode_ *, Node *, strCmpExprNode,\n                std allocator<std pair<_ExpressionNode_ *const, Node *>>>\n            end(&this->m_pABox->m_mNodes)._M_node;\n    if (!std operator!=(&<span class=\"supfact\">i_0</span>, &<span class=\"supfact\">__y</span>))\n      break;\n    <span class=\"supfact\">pN</span> =\n        std _Rb_tree_iterator<std pair<_ExpressionNode_ *const, Node *>>\n        operator->(&<span class=\"supfact\">i_0</span>)->second;\n    if ((*(unsigned __int8(__fastcall **)(Node *))(\n            *(_QWORD *)<span class=\"supfact\">pN</span> + Number L))(<span class=\"supfact\">pN</span>) ==\n        Number) {\n      pNode = <span class=\"supfact\">pN</span>;\n      (*((void(__fastcall **)(CompletionStrategy *const,\n                              Node *))this->_vptr_CompletionStrategy +\n         Number))(this, <span class=\"supfact\">pN</span>);\n      if ((unsigned __int8)ABox isClosed(this->m_pABox))\n        break;\n    }\n  }\n  if ((unsigned __int8)PARAMS_PRINT_DEBUGINFO_INHTML()) {\n    for (<span class=\"supfact\">i_1</span> = Number; <span class=\"supfact\">i_1</span> < g_iCommentIndent;\n         ++<span class=\"supfact\">i_1</span>)\n      printf(String);\n    printf(String);\n    --g_iCommentIndent;\n  }\n}", "var": [{"name": "v3", "type": "__unk__", "ref_name": "__y", "ref_type": "struct std::_Rb_tree_iterator<std::pair<_ExpressionNode_* const,Node*> >::_Self { std::_Rb_tree_iterator<std::pair<_ExpressionNode_* const,Node*> >::_Base_ptr _M_node; }"}, {"name": "j", "type": "__unk__", "ref_name": "i_0", "ref_type": "struct std::map<_ExpressionNode_*,Node*,strCmpExprNode,std::allocator<std::pair<_ExpressionNode_* const,Node*> > >::iterator { std::_Rb_tree_iterator<std::pair<_ExpressionNode_* const,Node*> >::_Base_ptr _M_node; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/167d712463e0992729e10389549ca204bb5a890bb1dd0460101cee04a39115ca", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_f2.o", "objdump": "0000000000025f58 <_ZL31construct_machine_config_yesnojR14machine_configP8device_t>:\n   25f58:\t55                   \tpush   %rbp\n   25f59:\t48 89 e5             \tmov    %rsp,%rbp\n   25f5c:\t53                   \tpush   %rbx\n   25f5d:\t48 83 ec 68          \tsub    $0x68,%rsp\n   25f61:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   25f65:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n   25f69:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   25f70:\t00 \n   25f71:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   25f75:\t48 89 c7             \tmov    %rax,%rdi\n   25f78:\te8 00 00 00 00       \tcallq  25f7d <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0x25>\n   25f7d:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n   25f81:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   25f85:\t48 89 d6             \tmov    %rdx,%rsi\n   25f88:\t48 89 c7             \tmov    %rax,%rdi\n   25f8b:\te8 ad dc ff ff       \tcallq  23c3d <_ZL33construct_machine_config_taito_f2R14machine_configP8device_t>\n   25f90:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n   25f94:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n   25f98:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   25f9c:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25fa1:\t48 89 ce             \tmov    %rcx,%rsi\n   25fa4:\t48 89 c7             \tmov    %rax,%rdi\n   25fa7:\te8 00 00 00 00       \tcallq  25fac <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0x54>\n   25fac:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   25fb0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   25fb4:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25fb9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   25fbe:\t48 89 c7             \tmov    %rax,%rdi\n   25fc1:\te8 00 00 00 00       \tcallq  25fc6 <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0x6e>\n   25fc6:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   25fca:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n   25fd1:\t00 \n   25fd2:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n   25fd6:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25fdb:\tbe 04 00 00 00       \tmov    $0x4,%esi\n   25fe0:\t48 89 c7             \tmov    %rax,%rdi\n   25fe3:\te8 00 00 00 00       \tcallq  25fe8 <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0x90>\n   25fe8:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n   25fec:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   25ff0:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25ff5:\t48 89 ce             \tmov    %rcx,%rsi\n   25ff8:\t48 89 c7             \tmov    %rax,%rdi\n   25ffb:\te8 00 00 00 00       \tcallq  26000 <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0xa8>\n   26000:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   26004:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   26008:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   2600d:\t48 89 c7             \tmov    %rax,%rdi\n   26010:\te8 00 00 00 00       \tcallq  26015 <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0xbd>\n   26015:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2601c <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0xc4>\n   2601c:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n   26020:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   26024:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   2602a:\t48 89 d1             \tmov    %rdx,%rcx\n   2602d:\tba 00 00 00 00       \tmov    $0x0,%edx\n   26032:\t48 89 c7             \tmov    %rax,%rdi\n   26035:\te8 00 00 00 00       \tcallq  2603a <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0xe2>\n   2603a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   2603e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   26042:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   26047:\t48 89 c7             \tmov    %rax,%rdi\n   2604a:\te8 00 00 00 00       \tcallq  2604f <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0xf7>\n   2604f:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n   26053:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   26057:\t48 89 c7             \tmov    %rax,%rdi\n   2605a:\te8 00 00 00 00       \tcallq  2605f <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0x107>\n   2605f:\t48 89 d8             \tmov    %rbx,%rax\n   26062:\teb 1a                \tjmp    2607e <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0x126>\n   26064:\t48 89 c3             \tmov    %rax,%rbx\n   26067:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   2606b:\t48 89 c7             \tmov    %rax,%rdi\n   2606e:\te8 00 00 00 00       \tcallq  26073 <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0x11b>\n   26073:\t48 89 d8             \tmov    %rbx,%rax\n   26076:\t48 89 c7             \tmov    %rax,%rdi\n   26079:\te8 00 00 00 00       \tcallq  2607e <_ZL31construct_machine_config_yesnojR14machine_configP8device_t+0x126>\n   2607e:\t48 83 c4 68          \tadd    $0x68,%rsp\n   26082:\t5b                   \tpop    %rbx\n   26083:\t5d                   \tpop    %rbp\n   26084:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_yesnoj(machine_config *a1,\n                                                     device_t *a2) {\n  const void *v2;\n  device_t *<span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  device_t *<span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = Number L;\n  astring astring((astring *)<span class=\"supfact\">v5</span>);\n  <span class=\"supfact\">v4</span> = construct_machine_config_taito_f2(a1, a2);\n  <span class=\"supfact\">v6</span> =\n      (device_t *)machine_config device_find(a1, <span class=\"supfact\">v4</span>, String);\n  device_memory_interface static_set_addrmap(<span class=\"supfact\">v6</span>, Number L,\n                                             construct_address_map_yesnoj_map);\n  *((_QWORD *)a1 + Number) = &gfxdecodeinfo_yuyugogo;\n  driver_device static_set_callback(<span class=\"supfact\">v4</span>, Number L,\n                                    &video_start_taitof2_yesnoj);\n  <span class=\"supfact\">v6</span> =\n      (device_t *)machine_config device_find(a1, <span class=\"supfact\">v4</span>, String);\n  screen_device static_set_screen_update(<span class=\"supfact\">v6</span>,\n                                         &screen_update_taitof2_yesnoj);\n  <span class=\"supfact\">v6</span> = (device_t *)machine_config device_add(\n      a1, <span class=\"supfact\">v4</span>, String, TC0100SCN, Number);\n  device_t static_set_static_config(<span class=\"supfact\">v6</span>,\n                                    (device_t *)&liquidk_tc0100scn_intf, v2);\n  astring ~astring((astring *)<span class=\"supfact\">v5</span>);\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "device_t *__cdecl construct_machine_config_yesnoj(machine_config *config,\n                                                  device_t *owner) {\n  void(__fastcall * v2)(address_map *, const device_t *);\n  void(__fastcall * v3)(running_machine *);\n  unsigned int(__fastcall * v4)(screen_device *, bitmap_t *,\n                                const _rectangle *);\n  device_t *<span class=\"supfact\">ownera</span>;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *<span class=\"supfact\">device</span>;\n  <span class=\"supfact\">device</span> = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  <span class=\"supfact\">ownera</span> = construct_machine_config_taito_f2(config, owner);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, Number L,\n      (address_spacenum)construct_address_map_yesnoj_map, v2);\n  config->m_gfxdecodeinfo = gfxdecodeinfo_yuyugogo;\n  driver_device static_set_callback(\n      <span class=\"supfact\">ownera</span>, (device_t *)&loc_4,\n      (driver_device callback_type)&video_start_taitof2_yesnoj, v3);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  screen_device static_set_screen_update(\n      <span class=\"supfact\">device</span>, (device_t *)&screen_update_taitof2_yesnoj, v4);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_add(\n      config, <span class=\"supfact\">ownera</span>, String, TC0100SCN, Number);\n  device_t static_set_static_config(<span class=\"supfact\">device</span>,\n                                    &liquidk_tc0100scn_intf);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return <span class=\"supfact\">ownera</span>;\n}", "var": [{"name": "v5", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/a6c0476d37fab0a2016b706bb595a9db57bad22bae2083133c2d1eeb6cb12f1c", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_events_584896b4.o", "objdump": "0000000000000000 <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n   f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  13:\t48 89 c7             \tmov    %rax,%rdi\n  16:\te8 00 00 00 00       \tcallq  1b <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x1b>\n  1b:\t48 89 c2             \tmov    %rax,%rdx\n  1e:\t48 8d 45 ff          \tlea    -0x1(%rbp),%rax\n  22:\t48 89 d6             \tmov    %rdx,%rsi\n  25:\t48 89 c7             \tmov    %rax,%rdi\n  28:\te8 00 00 00 00       \tcallq  2d <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x2d>\n  2d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  31:\t8b 50 10             \tmov    0x10(%rax),%edx\n  34:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  37:\t89 d6                \tmov    %edx,%esi\n  39:\t89 c7                \tmov    %eax,%edi\n  3b:\te8 00 00 00 00       \tcallq  40 <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x40>\n  40:\t83 f0 01             \txor    $0x1,%eax\n  43:\t84 c0                \ttest   %al,%al\n  45:\t75 18                \tjne    5f <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x5f>\n  47:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  50:\t48 89 c7             \tmov    %rax,%rdi\n  53:\te8 00 00 00 00       \tcallq  58 <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x58>\n  58:\t83 f0 01             \txor    $0x1,%eax\n  5b:\t84 c0                \ttest   %al,%al\n  5d:\t74 07                \tje     66 <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x66>\n  5f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  64:\teb 05                \tjmp    6b <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x6b>\n  66:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  6b:\t84 c0                \ttest   %al,%al\n  6d:\t74 27                \tje     96 <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x96>\n  6f:\tbe 00 01 00 00       \tmov    $0x100,%esi\n  74:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  79:\te8 00 00 00 00       \tcallq  7e <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x7e>\n  7e:\te8 00 00 00 00       \tcallq  83 <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x83>\n  83:\t84 c0                \ttest   %al,%al\n  85:\t74 0f                \tje     96 <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x96>\n  87:\tbe 05 00 00 00       \tmov    $0x5,%esi\n  8c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  91:\te8 00 00 00 00       \tcallq  96 <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x96>\n  96:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  9a:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  9d:\t89 d6                \tmov    %edx,%esi\n  9f:\t48 89 c7             \tmov    %rax,%rdi\n  a2:\te8 00 00 00 00       \tcallq  a7 <_ZNK4juce5ArrayIPNS_14ChangeListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0xa7>\n  a7:\t48 8b 00             \tmov    (%rax),%rax\n  aa:\tc9                   \tleaveq \n  ab:\tc3                   \tretq   ", "code_s": "__int64 __fastcall juce\n    Array<juce ChangeListener *, juce DummyCriticalSection, Number>\n    getUnchecked(__int64 a1, unsigned int a2) {\n  const juce DummyCriticalSection *v2;\n  int v3;\n  char <span class=\"supfact\">v6</span>;\n  v2 = (const juce DummyCriticalSection *)\n      juce Array<juce ChangeListener *, juce DummyCriticalSection, Number>\n          getLock(a1);\n  juce DummyCriticalSection ScopedLockType ScopedLockType(\n      (juce DummyCriticalSection ScopedLockType *)&<span class=\"supfact\">v6</span>, v2);\n  if (!juce isPositiveAndBelow<int>(a2, *(_DWORD *)(a1 + Number),\n                                    *(_DWORD *)(a1 + Number)) ||\n      (unsigned __int8)juce HeapBlock<juce ChangeListener *, false> operator!=(\n          a1, Number L) != Number) {\n    juce logAssertion((juce *)String, (const char *)&loc_100, v3);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  return *(_QWORD *)juce HeapBlock<juce ChangeListener *, false>\n  operator[]<int>(a1, a2);\n}", "code_t": "juce ChangeListener *__cdecl juce\n    Array<juce ChangeListener *, juce DummyCriticalSection, Number>\n    getUnchecked(\n        const juce Array<juce ChangeListener *, juce DummyCriticalSection,\n                         Number> *const this,\n        const int index) {\n  const juce DummyCriticalSection *v2;\n  int v3;\n  juce Array<juce ChangeListener *, juce DummyCriticalSection, Number>\n      ScopedLockType <span class=\"supfact\">lock</span>;\n  v2 = juce Array<juce ChangeListener *, juce DummyCriticalSection, Number>\n      getLock(this);\n  juce DummyCriticalSection ScopedLockType ScopedLockType(&<span class=\"supfact\">lock</span>,\n                                                          v2);\n  if (!juce isPositiveAndBelow<int>(index, this->numUsed) ||\n      !juce HeapBlock<juce ChangeListener *, false> operator!=(\n          &this->data.elements, Number L)) {\n    juce logAssertion((juce *)String, (const char *)&loc_100, v3);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  return *juce HeapBlock<juce ChangeListener *, false> operator[]<int>(\n      &this->data.elements, index);\n}", "var": [{"name": "v6", "type": "struct juce::Array<juce::ChangeListener*,juce::DummyCriticalSection,0>::ScopedLockType { __int8[1] gap0; }", "ref_name": "lock", "ref_type": "struct juce::Array<juce::ChangeListener*,juce::DummyCriticalSection,0>::ScopedLockType { __int8[1] gap0; }"}], "body_in_train": false}, {"repo_owner": "bloodstalker", "repo_name": "blogstuff", "path": "bloodstalker/blogstuff/e5d1c8fad2951977dc94940e542db30173b87fe2732e6c1c20f8e810270889e7", "path_in_repo": "bloodstalker/blogstuff/src/cstruct2luatbale/lua/lua", "objdump": "00000000004283b9 <luaL_loadbufferx>:\n  4283b9:\t55                   \tpush   %rbp\n  4283ba:\t48 89 e5             \tmov    %rsp,%rbp\n  4283bd:\t48 83 ec 40          \tsub    $0x40,%rsp\n  4283c1:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4283c5:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  4283c9:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  4283cd:\t48 89 4d d0          \tmov    %rcx,-0x30(%rbp)\n  4283d1:\t4c 89 45 c8          \tmov    %r8,-0x38(%rbp)\n  4283d5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4283d9:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4283dd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4283e1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4283e5:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n  4283e9:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  4283ed:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  4283f1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4283f5:\t49 89 f0             \tmov    %rsi,%r8\n  4283f8:\tbe 69 83 42 00       \tmov    $0x428369,%esi\n  4283fd:\t48 89 c7             \tmov    %rax,%rdi\n  428400:\te8 d3 02 fe ff       \tcallq  4086d8 <lua_load>\n  428405:\tc9                   \tleaveq \n  428406:\tc3                   \tretq   ", "code_s": "__int64 __fastcall luaL_loadbufferx(__int64 a1, __int64 a2, __int64 a3,\n                                    void *a4, __int64 a5) {\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  <span class=\"supfact\">v6</span>[Number] = a2;\n  <span class=\"supfact\">v6</span>[Number] = a3;\n  return lua_load(a1, (__int64)getS, (__int64)<span class=\"supfact\">v6</span>, a4, a5);\n}", "code_t": "int __cdecl luaL_loadbufferx(lua_State_0 *L, const char *buff, size_t size,\n                             const char *name, const char *mode) {\n  LoadS_0 <span class=\"supfact\">ls</span>;\n  <span class=\"supfact\">ls</span>.s = buff;\n  <span class=\"supfact\">ls</span>.size = size;\n  return lua_load(L, (lua_Reader)getS, &<span class=\"supfact\">ls</span>, name, mode);\n}", "var": [{"name": "v6", "type": "struct LoadS_0 { const char * s; size_t size; }", "ref_name": "ls", "ref_type": "struct LoadS_0 { const char * s; size_t size; }"}], "body_in_train": false}, {"repo_owner": "rhuitl", "repo_name": "uClinux", "path": "rhuitl/uClinux/c15641e0c989e3a84aeab75faf5b750c9807d8353e2f67488765fc3c1000318a", "path_in_repo": "rhuitl/uClinux/user/zebra/bgpd/bgp_main.o", "objdump": "0000000000000212 <main>:\n 212:\t55                   \tpush   %rbp\n 213:\t48 89 e5             \tmov    %rsp,%rbp\n 216:\t48 81 ec 00 01 00 00 \tsub    $0x100,%rsp\n 21d:\t89 bd 0c ff ff ff    \tmov    %edi,-0xf4(%rbp)\n 223:\t48 89 b5 00 ff ff ff \tmov    %rsi,-0x100(%rbp)\n 22a:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 231:\tbf 17 00 00 00       \tmov    $0x17,%edi\n 236:\te8 00 00 00 00       \tcallq  23b <main+0x29>\n 23b:\t48 8b 85 00 ff ff ff \tmov    -0x100(%rbp),%rax\n 242:\t48 8b 00             \tmov    (%rax),%rax\n 245:\tbe 2f 00 00 00       \tmov    $0x2f,%esi\n 24a:\t48 89 c7             \tmov    %rax,%rdi\n 24d:\te8 00 00 00 00       \tcallq  252 <main+0x40>\n 252:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 256:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 25b:\t74 0b                \tje     268 <main+0x56>\n 25d:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n 262:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 266:\teb 0a                \tjmp    272 <main+0x60>\n 268:\t48 8b 85 00 ff ff ff \tmov    -0x100(%rbp),%rax\n 26f:\t48 8b 00             \tmov    (%rax),%rax\n 272:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 276:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 27a:\t41 b8 18 00 00 00    \tmov    $0x18,%r8d\n 280:\tb9 0b 00 00 00       \tmov    $0xb,%ecx\n 285:\tba 04 00 00 00       \tmov    $0x4,%edx\n 28a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 28f:\t48 89 c7             \tmov    %rax,%rdi\n 292:\te8 00 00 00 00       \tcallq  297 <main+0x85>\n 297:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 29e <main+0x8c>\n 29e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2a3:\te8 00 00 00 00       \tcallq  2a8 <main+0x96>\n 2a8:\t48 8b b5 00 ff ff ff \tmov    -0x100(%rbp),%rsi\n 2af:\t8b 85 0c ff ff ff    \tmov    -0xf4(%rbp),%eax\n 2b5:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 2bb:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 2c0:\tba 00 00 00 00       \tmov    $0x0,%edx\n 2c5:\t89 c7                \tmov    %eax,%edi\n 2c7:\te8 00 00 00 00       \tcallq  2cc <main+0xba>\n 2cc:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 2cf:\t83 7d e4 ff          \tcmpl   $0xffffffff,-0x1c(%rbp)\n 2d3:\t0f 84 14 01 00 00    \tje     3ed <main+0x1db>\n 2d9:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n 2dd:\t0f 84 04 01 00 00    \tje     3e7 <main+0x1d5>\n 2e3:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n 2e7:\t0f 88 e7 00 00 00    \tjs     3d4 <main+0x1c2>\n 2ed:\t83 7d e4 76          \tcmpl   $0x76,-0x1c(%rbp)\n 2f1:\t0f 8f dd 00 00 00    \tjg     3d4 <main+0x1c2>\n 2f7:\t83 7d e4 41          \tcmpl   $0x41,-0x1c(%rbp)\n 2fb:\t0f 8c d3 00 00 00    \tjl     3d4 <main+0x1c2>\n 301:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n 304:\t83 e8 41             \tsub    $0x41,%eax\n 307:\t83 f8 35             \tcmp    $0x35,%eax\n 30a:\t0f 87 c4 00 00 00    \tja     3d4 <main+0x1c2>\n 310:\t89 c0                \tmov    %eax,%eax\n 312:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 319:\t00 \n 31a:\tff e0                \tjmpq   *%rax\n 31c:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n 323:\te9 c0 00 00 00       \tjmpq   3e8 <main+0x1d6>\n 328:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 32f <main+0x11d>\n 32f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 336 <main+0x124>\n 336:\te9 ad 00 00 00       \tjmpq   3e8 <main+0x1d6>\n 33b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 342 <main+0x130>\n 342:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 349 <main+0x137>\n 349:\te9 9a 00 00 00       \tjmpq   3e8 <main+0x1d6>\n 34e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 355 <main+0x143>\n 355:\t48 89 c7             \tmov    %rax,%rdi\n 358:\te8 00 00 00 00       \tcallq  35d <main+0x14b>\n 35d:\t89 c2                \tmov    %eax,%edx\n 35f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 366 <main+0x154>\n 366:\t66 89 50 10          \tmov    %dx,0x10(%rax)\n 36a:\teb 7c                \tjmp    3e8 <main+0x1d6>\n 36c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 373 <main+0x161>\n 373:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 37a <main+0x168>\n 37a:\teb 6c                \tjmp    3e8 <main+0x1d6>\n 37c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 383 <main+0x171>\n 383:\t48 89 c7             \tmov    %rax,%rdi\n 386:\te8 00 00 00 00       \tcallq  38b <main+0x179>\n 38b:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 391 <main+0x17f>\n 391:\teb 55                \tjmp    3e8 <main+0x1d6>\n 393:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 39d <main+0x18b>\n 39a:\t00 00 00 \n 39d:\teb 49                \tjmp    3e8 <main+0x1d6>\n 39f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 3a4:\te8 00 00 00 00       \tcallq  3a9 <main+0x197>\n 3a9:\teb 3d                \tjmp    3e8 <main+0x1d6>\n 3ab:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3af:\t48 89 c7             \tmov    %rax,%rdi\n 3b2:\te8 00 00 00 00       \tcallq  3b7 <main+0x1a5>\n 3b7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 3bc:\te8 00 00 00 00       \tcallq  3c1 <main+0x1af>\n 3c1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3c5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3ca:\t48 89 c7             \tmov    %rax,%rdi\n 3cd:\te8 2e fc ff ff       \tcallq  0 <usage>\n 3d2:\teb 14                \tjmp    3e8 <main+0x1d6>\n 3d4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3d8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 3dd:\t48 89 c7             \tmov    %rax,%rdi\n 3e0:\te8 1b fc ff ff       \tcallq  0 <usage>\n 3e5:\teb 01                \tjmp    3e8 <main+0x1d6>\n 3e7:\t90                   \tnop\n 3e8:\te9 bb fe ff ff       \tjmpq   2a8 <main+0x96>\n 3ed:\t90                   \tnop\n 3ee:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3f5 <main+0x1e3>\n 3f5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 3f9:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 400 <main+0x1ee>\n 400:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 405:\te8 00 00 00 00       \tcallq  40a <main+0x1f8>\n 40a:\t89 c7                \tmov    %eax,%edi\n 40c:\te8 00 00 00 00       \tcallq  411 <main+0x1ff>\n 411:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 416:\te8 00 00 00 00       \tcallq  41b <main+0x209>\n 41b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 420:\te8 00 00 00 00       \tcallq  425 <main+0x213>\n 425:\te8 00 00 00 00       \tcallq  42a <main+0x218>\n 42a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 42f:\te8 00 00 00 00       \tcallq  434 <main+0x222>\n 434:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 439:\te8 00 00 00 00       \tcallq  43e <main+0x22c>\n 43e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 443:\te8 00 00 00 00       \tcallq  448 <main+0x236>\n 448:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 44f <main+0x23d>\n 44f:\tba 00 00 00 00       \tmov    $0x0,%edx\n 454:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 459:\t48 89 c7             \tmov    %rax,%rdi\n 45c:\te8 00 00 00 00       \tcallq  461 <main+0x24f>\n 461:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 465:\t74 0f                \tje     476 <main+0x264>\n 467:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 46c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 471:\te8 00 00 00 00       \tcallq  476 <main+0x264>\n 476:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 47d <main+0x26b>\n 47d:\t48 89 c7             \tmov    %rax,%rdi\n 480:\te8 00 00 00 00       \tcallq  485 <main+0x273>\n 485:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 48b <main+0x279>\n 48b:\t0f b7 c8             \tmovzwl %ax,%ecx\n 48e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 495 <main+0x283>\n 495:\tba 00 00 00 00       \tmov    $0x0,%edx\n 49a:\t89 ce                \tmov    %ecx,%esi\n 49c:\t48 89 c7             \tmov    %rax,%rdi\n 49f:\te8 00 00 00 00       \tcallq  4a4 <main+0x292>\n 4a4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4ab <main+0x299>\n 4ab:\t0f b7 40 10          \tmovzwl 0x10(%rax),%eax\n 4af:\t0f b7 d0             \tmovzwl %ax,%edx\n 4b2:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4b8 <main+0x2a6>\n 4b8:\t89 d1                \tmov    %edx,%ecx\n 4ba:\t89 c2                \tmov    %eax,%edx\n 4bc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 4c1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 4c6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4cb:\te8 00 00 00 00       \tcallq  4d0 <main+0x2be>\n 4d0:\teb 0f                \tjmp    4e1 <main+0x2cf>\n 4d2:\t48 8d 85 10 ff ff ff \tlea    -0xf0(%rbp),%rax\n 4d9:\t48 89 c7             \tmov    %rax,%rdi\n 4dc:\te8 00 00 00 00       \tcallq  4e1 <main+0x2cf>\n 4e1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4e8 <main+0x2d6>\n 4e8:\t48 8d 95 10 ff ff ff \tlea    -0xf0(%rbp),%rdx\n 4ef:\t48 89 d6             \tmov    %rdx,%rsi\n 4f2:\t48 89 c7             \tmov    %rax,%rdi\n 4f5:\te8 00 00 00 00       \tcallq  4fa <main+0x2e8>\n 4fa:\t48 85 c0             \ttest   %rax,%rax\n 4fd:\t75 d3                \tjne    4d2 <main+0x2c0>\n 4ff:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 504:\te8 00 00 00 00       \tcallq  509 <main+0x2f7>\n", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  const char *v3;\n  unsigned int v4;\n  char <span class=\"supfact\">v6</span>[Number];\n  int <span class=\"supfact\">v7</span>;\n  const char *<span class=\"supfact\">v8</span>;\n  char *<span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = Number;\n  umask(Number);\n  <span class=\"supfact\">v9</span> = strrchr(*argv, Number);\n  if (<span class=\"supfact\">v9</span>)\n    v3 = ++<span class=\"supfact\">v9</span>;\n  else\n    v3 = *argv;\n  <span class=\"supfact\">v8</span> = v3;\n  zlog_default = openzlog(v3, Number L, Number L, Number L, Number L);\n  bgp_master_init();\n  while (Number) {\n    <span class=\"supfact\">v7</span> =\n        getopt_long(argc, (char *const *)argv, String, &longopts, Number L);\n    if (<span class=\"supfact\">v7</span> == Number)\n      break;\n    if (<span class=\"supfact\">v7</span>) {\n      if (<span class=\"supfact\">v7</span> >= Number && <span class=\"supfact\">v7</span> <= Number &&\n          <span class=\"supfact\">v7</span> >= Number) {\n        switch (<span class=\"supfact\">v7</span>) {\n        case String:\n          vty_addr = (__int64)optarg;\n          continue;\n        case String:\n          vty_port = atoi(optarg);\n          continue;\n        case String:\n          <span class=\"supfact\">v10</span> = Number;\n          continue;\n        case String:\n          config_file = (__int64)optarg;\n          continue;\n        case String:\n          usage(<span class=\"supfact\">v8</span>, Number);\n        case String:\n          pid_file = optarg;\n          continue;\n        case String:\n          bgp_option_set(Number L);\n          continue;\n        case String:\n          *(_WORD *)(bm + Number L) = atoi(optarg);\n          continue;\n        case String:\n          retain_mode = Number;\n          continue;\n        case String:\n          print_version(<span class=\"supfact\">v8</span>);\n          exit(Number);\n        default:\n          break;\n        }\n      }\n      usage(<span class=\"supfact\">v8</span>, Number);\n    }\n  }\n  master = *(_QWORD *)(bm + Number L);\n  v4 = time(Number L);\n  srand(v4);\n  signal_init();\n  cmd_init(Number L);\n  vty_init();\n  memory_init();\n  bgp_init();\n  sort_node();\n  vty_read_config(config_file, config_current, config_default);\n  if (<span class=\"supfact\">v10</span>)\n    daemon(Number, Number);\n  pid_output(pid_file);\n  vty_serv_sock(vty_addr, (unsigned __int16)vty_port, String);\n  zlog_info(String, String, (unsigned int)vty_port,\n            *(unsigned __int16 *)(bm + Number L));\n  while (thread_fetch(master, <span class=\"supfact\">v6</span>))\n    thread_call(<span class=\"supfact\">v6</span>);\n  exit(Number);\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  char *v3;\n  unsigned int v4;\n  int result;\n  <span class=\"supfact\">thread</span> <span class=\"supfact\">thread</span>;\n  int <span class=\"supfact\">opt</span>;\n  char *<span class=\"supfact\">progname</span>;\n  char *<span class=\"supfact\">p</span>;\n  int <span class=\"supfact\">daemon_mode</span>;\n  <span class=\"supfact\">daemon_mode</span> = Number;\n  umask(Number);\n  <span class=\"supfact\">p</span> = strrchr(*argv, Number);\n  if (<span class=\"supfact\">p</span>)\n    v3 = ++<span class=\"supfact\">p</span>;\n  else\n    v3 = (char *)*argv;\n  <span class=\"supfact\">progname</span> = v3;\n  zlog_default = openzlog(v3, Number L, Number L, Number L, Number L);\n  bgp_master_init();\n  while (Number) {\n    <span class=\"supfact\">opt</span> =\n        getopt_long(argc, (char *const *)argv, String, longopts, Number L);\n    if (<span class=\"supfact\">opt</span> == Number)\n      break;\n    if (<span class=\"supfact\">opt</span>) {\n      if (<span class=\"supfact\">opt</span> >= Number && <span class=\"supfact\">opt</span> <= Number &&\n          <span class=\"supfact\">opt</span> >= Number) {\n        switch (<span class=\"supfact\">opt</span>) {\n        case String:\n          vty_addr = optarg;\n          continue;\n        case String:\n          vty_port = atoi(optarg);\n          continue;\n        case String:\n          <span class=\"supfact\">daemon_mode</span> = Number;\n          continue;\n        case String:\n          config_file = optarg;\n          continue;\n        case String:\n          usage(<span class=\"supfact\">progname</span>, Number);\n          return result;\n        case String:\n          pid_file = optarg;\n          continue;\n        case String:\n          bgp_option_set(Number L);\n          continue;\n        case String:\n          *(_WORD *)(bm + Number L) = atoi(optarg);\n          continue;\n        case String:\n          retain_mode = Number;\n          continue;\n        case String:\n          print_version(<span class=\"supfact\">progname</span>);\n          exit(Number);\n        default:\n          break;\n        }\n      }\n      usage(<span class=\"supfact\">progname</span>, Number);\n    }\n  }\n  master = *(_QWORD *)(bm + Number L);\n  v4 = time(Number L);\n  srand(v4);\n  signal_init();\n  cmd_init(Number L);\n  vty_init();\n  memory_init();\n  bgp_init();\n  sort_node();\n  vty_read_config(config_file, config_current, config_default);\n  if (<span class=\"supfact\">daemon_mode</span>)\n    daemon(Number, Number);\n  pid_output(pid_file);\n  vty_serv_sock(vty_addr, (unsigned __int16)vty_port, String);\n  zlog_info(String, String, (unsigned int)vty_port,\n            *(unsigned __int16 *)(bm + Number L));\n  while (thread_fetch(master, &<span class=\"supfact\">thread</span>))\n    thread_call(&<span class=\"supfact\">thread</span>);\n  exit(Number);\n}", "var": [{"name": "v6", "type": "struct thread { unsigned __int8 type; PADDING (7); thread * next; thread * prev; thread_master * master; int (*)(thread *) func; void * arg; $6EDFAFE75B7BFDEFAC0AD1BDC68BD418 u; rusage ru; }", "ref_name": "thread", "ref_type": "struct thread { unsigned __int8 type; PADDING (7); thread * next; thread * prev; thread_master * master; int (*)(thread *) func; void * arg; $6EDFAFE75B7BFDEFAC0AD1BDC68BD418 u; rusage ru; }"}], "body_in_train": false}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/1dd11b101682284153534b1391faa5b2a1aaf4e7663bb3ede73e7c42ea9fb148", "path_in_repo": "sslab-gatech/janus/core/create_corpus.o", "objdump": "0000000000000000 <_ZN7Program13remove_dir_fdEl>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 30          \tsub    $0x30,%rsp\n   b:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   f:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  13:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  17:\t48 8d 58 60          \tlea    0x60(%rax),%rbx\n  1b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  1f:\t48 83 c0 60          \tadd    $0x60,%rax\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZN7Program13remove_dir_fdEl+0x2b>\n  2b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  2f:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  33:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  37:\t48 89 d6             \tmov    %rdx,%rsi\n  3a:\t48 89 c7             \tmov    %rax,%rdi\n  3d:\te8 00 00 00 00       \tcallq  42 <_ZN7Program13remove_dir_fdEl+0x42>\n  42:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  46:\t48 83 c0 60          \tadd    $0x60,%rax\n  4a:\t48 89 c7             \tmov    %rax,%rdi\n  4d:\te8 00 00 00 00       \tcallq  52 <_ZN7Program13remove_dir_fdEl+0x52>\n  52:\t49 89 c4             \tmov    %rax,%r12\n  55:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  59:\t48 83 c0 60          \tadd    $0x60,%rax\n  5d:\t48 89 c7             \tmov    %rax,%rdi\n  60:\te8 00 00 00 00       \tcallq  65 <_ZN7Program13remove_dir_fdEl+0x65>\n  65:\t48 89 c1             \tmov    %rax,%rcx\n  68:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  6c:\t48 89 c2             \tmov    %rax,%rdx\n  6f:\t4c 89 e6             \tmov    %r12,%rsi\n  72:\t48 89 cf             \tmov    %rcx,%rdi\n  75:\te8 00 00 00 00       \tcallq  7a <_ZN7Program13remove_dir_fdEl+0x7a>\n  7a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  7e:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n  82:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  86:\t48 89 d6             \tmov    %rdx,%rsi\n  89:\t48 89 c7             \tmov    %rax,%rdi\n  8c:\te8 00 00 00 00       \tcallq  91 <_ZN7Program13remove_dir_fdEl+0x91>\n  91:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  95:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  99:\t48 89 c6             \tmov    %rax,%rsi\n  9c:\t48 89 df             \tmov    %rbx,%rdi\n  9f:\te8 00 00 00 00       \tcallq  a4 <_ZN7Program13remove_dir_fdEl+0xa4>\n  a4:\teb 08                \tjmp    ae <_ZN7Program13remove_dir_fdEl+0xae>\n  a6:\t48 89 c7             \tmov    %rax,%rdi\n  a9:\te8 00 00 00 00       \tcallq  ae <_ZN7Program13remove_dir_fdEl+0xae>\n  ae:\t48 83 c4 30          \tadd    $0x30,%rsp\n  b2:\t5b                   \tpop    %rbx\n  b3:\t41 5c                \tpop    %r12\n  b5:\t5d                   \tpop    %rbp\n  b6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Program remove_dir_fd(Program *this, __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  <span class=\"supfact\">v5</span>[Number] = (__int64)this;\n  <span class=\"supfact\">v5</span>[Number] = a2;\n  <span class=\"supfact\">v7</span> = std vector<long> end((char *)this + Number);\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v7</span>);\n  v2 = std vector<long> end((char *)this + Number);\n  v3 = std vector<long> begin((char *)this + Number);\n  <span class=\"supfact\">v9</span>[Number] =\n      std remove<__gnu_cxx __normal_iterator<long *, std vector<long>>, long>(\n          v3, v2, <span class=\"supfact\">v5</span>);\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">v8</span>, <span class=\"supfact\">v9</span>);\n  return std vector<long> erase((char *)this + Number, <span class=\"supfact\">v8</span>,\n                                <span class=\"supfact\">v6</span>);\n}", "code_t": "void __cdecl Program remove_dir_fd(Program *const this, int64_t fd_index) {\n  __int64 *v2;\n  std vector<long int> iterator v3;\n  int64_t <span class=\"supfact\">fd_indexa</span>;\n  Program *thisa;\n  __gnu_cxx __normal_iterator<long int const *, std vector<long int>>\n      <span class=\"supfact\">__last</span>;\n  __gnu_cxx __normal_iterator<long int *, std vector<long int>>\n      <span class=\"supfact\">__i</span>;\n  __gnu_cxx __normal_iterator<long int const *, std vector<long int>>\n      <span class=\"supfact\">__first</span>;\n  __gnu_cxx __normal_iterator<long int *, std vector<long int>>\n      <span class=\"supfact\">v9</span>;\n  thisa = this;\n  <span class=\"supfact\">fd_indexa</span> = fd_index;\n  <span class=\"supfact\">__i</span>._M_current =\n      std vector<long> end(&this->active_dir_fds)._M_current;\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">__last</span>, &<span class=\"supfact\">__i</span>);\n  v2 = std vector<long> end(&this->active_dir_fds)._M_current;\n  v3._M_current = std vector<long> begin(&this->active_dir_fds)._M_current;\n  <span class=\"supfact\">v9</span>._M_current =\n      std remove<__gnu_cxx __normal_iterator<long *, std vector<long>>, long>(\n          v3, (__gnu_cxx __normal_iterator<long int *, std vector<long int>>)v2,\n          &<span class=\"supfact\">fd_indexa</span>)\n          ._M_current;\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">__first</span>, &<span class=\"supfact\">v9</span>);\n  std vector<long> erase(&this->active_dir_fds, <span class=\"supfact\">__first</span>,\n                         <span class=\"supfact\">__last</span>);\n}", "var": [{"name": "v9", "type": "__int64[3]", "ref_name": "v9", "ref_type": "struct __gnu_cxx::__normal_iterator<long int*,std::vector<long int> > { __int64 * _M_current; }"}, {"name": "v8", "type": "__int64", "ref_name": "__first", "ref_type": "struct __gnu_cxx::__normal_iterator<long int const*,std::vector<long int> > { const __int64 * _M_current; }"}, {"name": "v7", "type": "__int64", "ref_name": "__i", "ref_type": "struct __gnu_cxx::__normal_iterator<long int*,std::vector<long int> > { __int64 * _M_current; }"}, {"name": "v6", "type": "__int64", "ref_name": "__last", "ref_type": "struct __gnu_cxx::__normal_iterator<long int const*,std::vector<long int> > { const __int64 * _M_current; }"}], "body_in_train": false}, {"repo_owner": "ksudhir007", "repo_name": "multicast-tour-application", "path": "ksudhir007/multicast-tour-application/62517741026d2ae5c522ed1cce88d8e690523295c651e0100ab5c30fb2fcfe47", "path_in_repo": "ksudhir007/multicast-tour-application//tour.o", "objdump": "0000000000000492 <proc_v4>:\n     492:\t55                   \tpush   %rbp\n     493:\t48 89 e5             \tmov    %rsp,%rbp\n     496:\t41 55                \tpush   %r13\n     498:\t41 54                \tpush   %r12\n     49a:\t53                   \tpush   %rbx\n     49b:\t48 81 ec 68 02 00 00 \tsub    $0x268,%rsp\n     4a2:\t48 89 bd 98 fd ff ff \tmov    %rdi,-0x268(%rbp)\n     4a9:\t48 89 b5 90 fd ff ff \tmov    %rsi,-0x270(%rbp)\n     4b0:\t48 89 95 88 fd ff ff \tmov    %rdx,-0x278(%rbp)\n     4b7:\t48 89 8d 80 fd ff ff \tmov    %rcx,-0x280(%rbp)\n     4be:\t48 8d 45 a4          \tlea    -0x5c(%rbp),%rax\n     4c2:\tba 04 00 00 00       \tmov    $0x4,%edx\n     4c7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     4cc:\t48 89 c7             \tmov    %rax,%rdi\n     4cf:\te8 00 00 00 00       \tcallq  4d4 <proc_v4+0x42>\n     4d4:\t48 8b 85 98 fd ff ff \tmov    -0x268(%rbp),%rax\n     4db:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     4df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4e3:\t0f b6 00             \tmovzbl (%rax),%eax\n     4e6:\t83 e0 0f             \tand    $0xf,%eax\n     4e9:\t0f b6 c0             \tmovzbl %al,%eax\n     4ec:\tc1 e0 02             \tshl    $0x2,%eax\n     4ef:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n     4f2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     4f6:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n     4fa:\t3c 01                \tcmp    $0x1,%al\n     4fc:\t0f 85 a1 01 00 00    \tjne    6a3 <proc_v4+0x211>\n     502:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     505:\t48 63 d0             \tmovslq %eax,%rdx\n     508:\t48 8b 85 98 fd ff ff \tmov    -0x268(%rbp),%rax\n     50f:\t48 01 d0             \tadd    %rdx,%rax\n     512:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     516:\t48 8b 85 90 fd ff ff \tmov    -0x270(%rbp),%rax\n     51d:\t89 c2                \tmov    %eax,%edx\n     51f:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     522:\t29 c2                \tsub    %eax,%edx\n     524:\t89 d0                \tmov    %edx,%eax\n     526:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n     529:\t83 7d c4 07          \tcmpl   $0x7,-0x3c(%rbp)\n     52d:\t0f 8e 73 01 00 00    \tjle    6a6 <proc_v4+0x214>\n     533:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     537:\t0f b6 00             \tmovzbl (%rax),%eax\n     53a:\t84 c0                \ttest   %al,%al\n     53c:\t0f 85 6b 01 00 00    \tjne    6ad <proc_v4+0x21b>\n     542:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     546:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n     54a:\t0f b7 d0             \tmovzwl %ax,%edx\n     54d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 553 <proc_v4+0xc1>\n     553:\t39 c2                \tcmp    %eax,%edx\n     555:\t0f 85 4e 01 00 00    \tjne    6a9 <proc_v4+0x217>\n     55b:\t83 7d c4 0f          \tcmpl   $0xf,-0x3c(%rbp)\n     55f:\t0f 8e 47 01 00 00    \tjle    6ac <proc_v4+0x21a>\n     565:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     569:\t48 83 c0 08          \tadd    $0x8,%rax\n     56d:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n     571:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     575:\t48 8b 85 80 fd ff ff \tmov    -0x280(%rbp),%rax\n     57c:\t48 89 d6             \tmov    %rdx,%rsi\n     57f:\t48 89 c7             \tmov    %rax,%rdi\n     582:\te8 00 00 00 00       \tcallq  587 <proc_v4+0xf5>\n     587:\t48 8b 85 80 fd ff ff \tmov    -0x280(%rbp),%rax\n     58e:\t48 8b 00             \tmov    (%rax),%rax\n     591:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n     596:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 59e <proc_v4+0x10c>\n     59d:\t00 \n     59e:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n     5a2:\t48 8b 85 80 fd ff ff \tmov    -0x280(%rbp),%rax\n     5a9:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     5ad:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n     5b2:\tf2 0f 10 15 00 00 00 \tmovsd  0x0(%rip),%xmm2        # 5ba <proc_v4+0x128>\n     5b9:\t00 \n     5ba:\tf2 0f 5e c2          \tdivsd  %xmm2,%xmm0\n     5be:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     5c2:\tf2 0f 11 45 b0       \tmovsd  %xmm0,-0x50(%rbp)\n     5c7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5ce <proc_v4+0x13c>\n     5ce:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     5d2:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n     5d6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     5da:\t0f b6 40 08          \tmovzbl 0x8(%rax),%eax\n     5de:\t44 0f b6 e8          \tmovzbl %al,%r13d\n     5e2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     5e6:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n     5ea:\t44 0f b7 e0          \tmovzwl %ax,%r12d\n     5ee:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5f5 <proc_v4+0x163>\n     5f5:\t8b 50 28             \tmov    0x28(%rax),%edx\n     5f8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5ff <proc_v4+0x16d>\n     5ff:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     603:\t89 d6                \tmov    %edx,%esi\n     605:\t48 89 c7             \tmov    %rax,%rdi\n     608:\te8 00 00 00 00       \tcallq  60d <proc_v4+0x17b>\n     60d:\t48 89 c3             \tmov    %rax,%rbx\n     610:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     614:\t8b 40 04             \tmov    0x4(%rax),%eax\n     617:\t89 c7                \tmov    %eax,%edi\n     619:\te8 00 00 00 00       \tcallq  61e <proc_v4+0x18c>\n     61e:\t48 89 c6             \tmov    %rax,%rsi\n     621:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n     625:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     628:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n     62d:\t45 89 e9             \tmov    %r13d,%r9d\n     630:\t45 89 e0             \tmov    %r12d,%r8d\n     633:\t48 89 d9             \tmov    %rbx,%rcx\n     636:\t48 89 f2             \tmov    %rsi,%rdx\n     639:\t89 c6                \tmov    %eax,%esi\n     63b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     640:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     645:\te8 00 00 00 00       \tcallq  64a <proc_v4+0x1b8>\n     64a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 650 <proc_v4+0x1be>\n     650:\t83 f8 01             \tcmp    $0x1,%eax\n     653:\t75 58                \tjne    6ad <proc_v4+0x21b>\n     655:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 65b <proc_v4+0x1c9>\n     65b:\t83 c0 01             \tadd    $0x1,%eax\n     65e:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 664 <proc_v4+0x1d2>\n     664:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 66a <proc_v4+0x1d8>\n     66a:\t83 f8 05             \tcmp    $0x5,%eax\n     66d:\t7e 3e                \tjle    6ad <proc_v4+0x21b>\n     66f:\t48 8d 85 a0 fd ff ff \tlea    -0x260(%rbp),%rax\n     676:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     67b:\tba 00 00 00 00       \tmov    $0x0,%edx\n     680:\tbe 00 02 00 00       \tmov    $0x200,%esi\n     685:\t48 89 c7             \tmov    %rax,%rdi\n     688:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     68d:\te8 00 00 00 00       \tcallq  692 <proc_v4+0x200>\n     692:\t48 8d 85 a0 fd ff ff \tlea    -0x260(%rbp),%rax\n     699:\t48 89 c7             \tmov    %rax,%rdi\n     69c:\te8 00 00 00 00       \tcallq  6a1 <proc_v4+0x20f>\n     6a1:\teb 0a                \tjmp    6ad <proc_v4+0x21b>\n     6a3:\t90                   \tnop\n     6a4:\teb 07                \tjmp    6ad <proc_v4+0x21b>\n     6a6:\t90                   \tnop\n     6a7:\teb 04                \tjmp    6ad <proc_v4+0x21b>\n     6a9:\t90                   \tnop\n     6aa:\teb 01                \tjmp    6ad <proc_v4+0x21b>\n     6ac:\t90                   \tnop\n     6ad:\t48 81 c4 68 02 00 00 \tadd    $0x268,%rsp\n     6b4:\t5b                   \tpop    %rbx\n     6b5:\t41 5c                \tpop    %r12\n     6b7:\t41 5d                \tpop    %r13\n     6b9:\t5d                   \tpop    %rbp\n     6ba:\tc3                   \tretq   ", "code_s": "ssize_t __fastcall proc_v4(_BYTE *a1, int a2, __int64 a3, _QWORD *a4) {\n  ssize_t result;\n  unsigned int v5;\n  unsigned int v6;\n  char *v7;\n  char *v8;\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">s</span>[Number];\n  __int64 <span class=\"supfact\">v12</span>;\n  double <span class=\"supfact\">v13</span>;\n  unsigned __int8 *<span class=\"supfact\">v14</span>;\n  unsigned int <span class=\"supfact\">v15</span>;\n  unsigned __int8 *<span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">v17</span>;\n  _BYTE *<span class=\"supfact\">v18</span>;\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">v18</span> = a1;\n  <span class=\"supfact\">v17</span> = Number * (*a1 & Number);\n  result = (unsigned __int8)a1[Number];\n  if ((_BYTE)result == Number) {\n    <span class=\"supfact\">v16</span> = &a1[<span class=\"supfact\">v17</span>];\n    result = (unsigned int)(a2 - <span class=\"supfact\">v17</span>);\n    <span class=\"supfact\">v15</span> = a2 - <span class=\"supfact\">v17</span>;\n    if (a2 - <span class=\"supfact\">v17</span> > Number) {\n      result = *<span class=\"supfact\">v16</span>;\n      if (!(_BYTE)result) {\n        result = (unsigned int)pid;\n        if (*((unsigned __int16 *)<span class=\"supfact\">v16</span> + Number) == pid &&\n            (int)<span class=\"supfact\">v15</span> > Number) {\n          <span class=\"supfact\">v14</span> = <span class=\"supfact\">v16</span> + Number;\n          tv_sub(a4, (_QWORD *)<span class=\"supfact\">v16</span> + Number);\n          <span class=\"supfact\">v13</span> =\n              (double)(int)a4[Number] / Number + (double)(int)*a4 * Number;\n          <span class=\"supfact\">v12</span> = *(_QWORD *)(pr + Number);\n          v5 = (unsigned __int8)<span class=\"supfact\">v18</span>[Number];\n          v6 = *((unsigned __int16 *)<span class=\"supfact\">v16</span> + Number);\n          v7 = my_sock_ntop(*(unsigned __int16 **)(pr + Number));\n          v8 = getVM(*(_DWORD *)(<span class=\"supfact\">v12</span> + Number));\n          printf(String, <span class=\"supfact\">v15</span>, v8, v7, v6, v5,\n                 <span class=\"supfact\">v13</span>);\n          result = (unsigned int)amILast;\n          if (amILast == Number) {\n            result = (unsigned int)++countEnd;\n            if (countEnd > Number) {\n              snprintf(<span class=\"supfact\">v10</span>, Number, String, &myName);\n              result = mcastSend(<span class=\"supfact\">v10</span>);\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl proc_v4(char *ptr, ssize_t len, msghdr *msg, timeval *tvrecv) {\n  unsigned int v4;\n  unsigned int v5;\n  char *v6;\n  char *v7;\n  char <span class=\"supfact\">msgEnd</span>[Number];\n  in_addr <span class=\"supfact\">forVMName</span>;\n  sockaddr_in *<span class=\"supfact\">sin</span>;\n  double <span class=\"supfact\">rtt</span>;\n  timeval *<span class=\"supfact\">tvsend</span>;\n  int <span class=\"supfact\">icmplen</span>;\n  <span class=\"supfact\">icmp</span> *<span class=\"supfact\">icmp</span>;\n  int <span class=\"supfact\">hlen1</span>;\n  ip *<span class=\"supfact\">ip_0</span>;\n  memset(&<span class=\"supfact\">forVMName</span>, Number, sizeof(<span class=\"supfact\">forVMName</span>));\n  <span class=\"supfact\">ip_0</span> = (ip *)ptr;\n  <span class=\"supfact\">hlen1</span> = Number * (*ptr & Number);\n  if (ptr[Number] == Number) {\n    <span class=\"supfact\">icmp</span> = (<span class=\"supfact\">icmp</span> *)&ptr[<span class=\"supfact\">hlen1</span>];\n    <span class=\"supfact\">icmplen</span> = len - <span class=\"supfact\">hlen1</span>;\n    if ((int)len - <span class=\"supfact\">hlen1</span> > Number &&\n        !<span class=\"supfact\">icmp</span>->icmp_type &&\n        <span class=\"supfact\">icmp</span>->icmp_hun.ih_idseq.icd_id == pid &&\n        <span class=\"supfact\">icmplen</span> > Number) {\n      <span class=\"supfact\">tvsend</span> = (timeval *)&<span class=\"supfact\">icmp</span>->icmp_dun;\n      tv_sub(tvrecv, (timeval *)&<span class=\"supfact\">icmp</span>->icmp_dun);\n      <span class=\"supfact\">rtt</span> = (double)(int)tvrecv->tv_usec / Number +\n                            (double)(int)tvrecv->tv_sec * Number;\n      <span class=\"supfact\">sin</span> = (sockaddr_in *)pr->sarecv;\n      v4 = <span class=\"supfact\">ip_0</span>->ip_ttl;\n      v5 = <span class=\"supfact\">icmp</span>->icmp_hun.ih_idseq.icd_seq;\n      v6 = my_sock_ntop(pr->sarecv, pr->salen);\n      v7 = getVM(<span class=\"supfact\">sin</span>->sin_addr);\n      printf(String, (unsigned int)<span class=\"supfact\">icmplen</span>, v7, v6, v5, v4,\n             <span class=\"supfact\">rtt</span>);\n      if (amILast == Number && ++countEnd > Number) {\n        snprintf(<span class=\"supfact\">msgEnd</span>, Number, String, myName);\n        mcastSend(<span class=\"supfact\">msgEnd</span>);\n      }\n    }\n  }\n}", "var": [{"name": "s", "type": "char[4]", "ref_name": "forVMName", "ref_type": "struct in_addr { in_addr_t s_addr; }"}], "body_in_train": false}, {"repo_owner": "btrask", "repo_name": "stronglink", "path": "btrask/stronglink/50c5348d42251c5813a77b72fc5cfdb7f957a06409229ec084e6fd08494ea507", "path_in_repo": "btrask/stronglink/deps/libasync/deps/libressl-portable/crypto/err/err.o", "objdump": "000000000000172b <ERR_lib_error_string>:\n    172b:\t55                   \tpush   %rbp\n    172c:\t48 89 e5             \tmov    %rsp,%rbp\n    172f:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1733:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1737:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    173e:\t00 00 \n    1740:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1744:\t31 c0                \txor    %eax,%eax\n    1746:\te8 b5 e8 ff ff       \tcallq  0 <err_fns_check>\n    174b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    174f:\t48 c1 e8 18          \tshr    $0x18,%rax\n    1753:\t48 98                \tcltq   \n    1755:\t25 ff 00 00 00       \tand    $0xff,%eax\n    175a:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    175e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1762:\t48 c1 e0 18          \tshl    $0x18,%rax\n    1766:\t89 c0                \tmov    %eax,%eax\n    1768:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    176c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1773 <ERR_lib_error_string+0x48>\n    1773:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1777:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    177b:\t48 89 c7             \tmov    %rax,%rdi\n    177e:\tff d2                \tcallq  *%rdx\n    1780:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1784:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    1789:\t74 0a                \tje     1795 <ERR_lib_error_string+0x6a>\n    178b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    178f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1793:\teb 05                \tjmp    179a <ERR_lib_error_string+0x6f>\n    1795:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    179a:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    179e:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    17a5:\t00 00 \n    17a7:\t74 05                \tje     17ae <ERR_lib_error_string+0x83>\n    17a9:\te8 00 00 00 00       \tcallq  17ae <ERR_lib_error_string+0x83>\n    17ae:\tc9                   \tleaveq \n    17af:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ERR_lib_error_string(int a1) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  <span class=\"supfact\">v3</span>[Number] = __readfsqword(Number);\n  err_fns_check();\n  <span class=\"supfact\">v3</span>[Number] = HIBYTE(a1) << Number;\n  <span class=\"supfact\">v2</span> = (*(__int64(__fastcall **)(__int64 *))(err_fns + Number))(\n      <span class=\"supfact\">v3</span>);\n  if (<span class=\"supfact\">v2</span>)\n    result = *(_QWORD *)(<span class=\"supfact\">v2</span> + Number);\n  else\n    result = Number L;\n  return result;\n}", "code_t": "const char *__cdecl ERR_lib_error_string(unsigned __int64 e) {\n  const char *result;\n  ERR_STRING_DATA *<span class=\"supfact\">p</span>;\n  ERR_STRING_DATA <span class=\"supfact\">d</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  err_fns_check();\n  <span class=\"supfact\">d</span>.error = BYTE3(e) << Number;\n  <span class=\"supfact\">p</span> = err_fns->cb_err_get_item(&<span class=\"supfact\">d</span>);\n  if (<span class=\"supfact\">p</span>)\n    result = <span class=\"supfact\">p</span>->string;\n  else\n    result = Number L;\n  return result;\n}", "var": [{"name": "v3", "type": "unsigned __int64[4]", "ref_name": "d", "ref_type": "struct ERR_STRING_DATA { unsigned __int64 error; const char * string; }"}], "body_in_train": false}, {"repo_owner": "Alhadis", "repo_name": "Research-Unix-v9", "path": "Alhadis/Research-Unix-v9/70c892bac8ce8c9e8c5daf0f42ae82147d58d2c656b5cbefc4a25ee7ed9dc6c7", "path_in_repo": "Alhadis/Research-Unix-v9/v9/X11/src/X.V11R1/lib/X/XCrBFData.o", "objdump": "0000000000000000 <XCreateBitmapFromData>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec 40 01 00 00 \tsub    $0x140,%rsp\n   b:\t48 89 bd d8 fe ff ff \tmov    %rdi,-0x128(%rbp)\n  12:\t48 89 b5 d0 fe ff ff \tmov    %rsi,-0x130(%rbp)\n  19:\t48 89 95 c8 fe ff ff \tmov    %rdx,-0x138(%rbp)\n  20:\t89 8d c4 fe ff ff    \tmov    %ecx,-0x13c(%rbp)\n  26:\t44 89 85 c0 fe ff ff \tmov    %r8d,-0x140(%rbp)\n  2d:\t8b 8d c0 fe ff ff    \tmov    -0x140(%rbp),%ecx\n  33:\t8b 95 c4 fe ff ff    \tmov    -0x13c(%rbp),%edx\n  39:\t48 8b b5 d0 fe ff ff \tmov    -0x130(%rbp),%rsi\n  40:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n  47:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n  4d:\t48 89 c7             \tmov    %rax,%rdi\n  50:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  55:\te8 00 00 00 00       \tcallq  5a <XCreateBitmapFromData+0x5a>\n  5a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  5e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  63:\t75 0a                \tjne    6f <XCreateBitmapFromData+0x6f>\n  65:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  6a:\te9 1f 01 00 00       \tjmpq   18e <XCreateBitmapFromData+0x18e>\n  6f:\t48 c7 85 f0 fe ff ff \tmovq   $0x1,-0x110(%rbp)\n  76:\t01 00 00 00 \n  7a:\t48 c7 85 f8 fe ff ff \tmovq   $0x0,-0x108(%rbp)\n  81:\t00 00 00 00 \n  85:\t48 8d 95 e0 fe ff ff \tlea    -0x120(%rbp),%rdx\n  8c:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n  90:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n  97:\t48 89 d1             \tmov    %rdx,%rcx\n  9a:\tba 0c 00 00 00       \tmov    $0xc,%edx\n  9f:\t48 89 c7             \tmov    %rax,%rdi\n  a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  a7:\te8 00 00 00 00       \tcallq  ac <XCreateBitmapFromData+0xac>\n  ac:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  b0:\t8b 85 c0 fe ff ff    \tmov    -0x140(%rbp),%eax\n  b6:\t89 85 64 ff ff ff    \tmov    %eax,-0x9c(%rbp)\n  bc:\t8b 85 c4 fe ff ff    \tmov    -0x13c(%rbp),%eax\n  c2:\t89 85 60 ff ff ff    \tmov    %eax,-0xa0(%rbp)\n  c8:\tc7 45 88 01 00 00 00 \tmovl   $0x1,-0x78(%rbp)\n  cf:\tc7 85 68 ff ff ff 00 \tmovl   $0x0,-0x98(%rbp)\n  d6:\t00 00 00 \n  d9:\tc7 85 6c ff ff ff 00 \tmovl   $0x0,-0x94(%rbp)\n  e0:\t00 00 00 \n  e3:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n  ea:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n  f1:\tc7 85 78 ff ff ff 00 \tmovl   $0x0,-0x88(%rbp)\n  f8:\t00 00 00 \n  fb:\tc7 85 7c ff ff ff 08 \tmovl   $0x8,-0x84(%rbp)\n 102:\t00 00 00 \n 105:\tc7 45 80 00 00 00 00 \tmovl   $0x0,-0x80(%rbp)\n 10c:\tc7 45 84 08 00 00 00 \tmovl   $0x8,-0x7c(%rbp)\n 113:\t8b 85 c4 fe ff ff    \tmov    -0x13c(%rbp),%eax\n 119:\t83 c0 07             \tadd    $0x7,%eax\n 11c:\t8d 50 07             \tlea    0x7(%rax),%edx\n 11f:\t85 c0                \ttest   %eax,%eax\n 121:\t0f 48 c2             \tcmovs  %edx,%eax\n 124:\tc1 f8 03             \tsar    $0x3,%eax\n 127:\t89 45 8c             \tmov    %eax,-0x74(%rbp)\n 12a:\t48 8d 8d 60 ff ff ff \tlea    -0xa0(%rbp),%rcx\n 131:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 135:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n 139:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n 140:\t8b bd c0 fe ff ff    \tmov    -0x140(%rbp),%edi\n 146:\t57                   \tpush   %rdi\n 147:\t8b bd c4 fe ff ff    \tmov    -0x13c(%rbp),%edi\n 14d:\t57                   \tpush   %rdi\n 14e:\t6a 00                \tpushq  $0x0\n 150:\t6a 00                \tpushq  $0x0\n 152:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 158:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 15e:\t48 89 c7             \tmov    %rax,%rdi\n 161:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 166:\te8 00 00 00 00       \tcallq  16b <XCreateBitmapFromData+0x16b>\n 16b:\t48 83 c4 20          \tadd    $0x20,%rsp\n 16f:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 173:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n 17a:\t48 89 d6             \tmov    %rdx,%rsi\n 17d:\t48 89 c7             \tmov    %rax,%rdi\n 180:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 185:\te8 00 00 00 00       \tcallq  18a <XCreateBitmapFromData+0x18a>\n 18a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 18e:\tc9                   \tleaveq \n 18f:\tc3                   \tretq   \n", "code_s": "Drawable __fastcall XCreateBitmapFromData(Display *a1, Drawable a2, char *a3,\n                                          unsigned int a4, unsigned int a5) {\n  int v6;\n  XGCValues <span class=\"supfact\">v10</span>;\n  XImage <span class=\"supfact\">v11</span>;\n  GC <span class=\"supfact\">v12</span>;\n  Drawable <span class=\"supfact\">v13</span>;\n  <span class=\"supfact\">v13</span> = XCreatePixmap(a1, a2, a4, a5, Number);\n  if (!<span class=\"supfact\">v13</span>)\n    return Number L;\n  <span class=\"supfact\">v10</span>.foreground = Number L;\n  <span class=\"supfact\">v10</span>.background = Number L;\n  <span class=\"supfact\">v12</span> =\n      XCreateGC(a1, <span class=\"supfact\">v13</span>, Number, &<span class=\"supfact\">v10</span>);\n  <span class=\"supfact\">v11</span>.height = a5;\n  <span class=\"supfact\">v11</span>.width = a4;\n  <span class=\"supfact\">v11</span>.depth = Number;\n  <span class=\"supfact\">v11</span>.xoffset = Number;\n  <span class=\"supfact\">v11</span>.format = Number;\n  <span class=\"supfact\">v11</span>.data = a3;\n  <span class=\"supfact\">v11</span>.byte_order = Number;\n  <span class=\"supfact\">v11</span>.bitmap_unit = Number;\n  <span class=\"supfact\">v11</span>.bitmap_bit_order = Number;\n  <span class=\"supfact\">v11</span>.bitmap_pad = Number;\n  v6 = a4 + Number;\n  if ((int)(a4 + Number) < Number)\n    v6 = a4 + Number;\n  <span class=\"supfact\">v11</span>.bytes_per_line = v6 >> Number;\n  XPutImage(a1, <span class=\"supfact\">v13</span>, <span class=\"supfact\">v12</span>, &<span class=\"supfact\">v11</span>,\n            Number, Number, Number, Number, a4, a5);\n  XFreeGC(a1, <span class=\"supfact\">v12</span>);\n  return <span class=\"supfact\">v13</span>;\n}", "code_t": "Pixmap __cdecl XCreateBitmapFromData(Display *display, Drawable d, char *data,\n                                     int width, int height) {\n  int v6;\n  XGCValues <span class=\"supfact\">gcv</span>;\n  XImage <span class=\"supfact\">ximage</span>;\n  GC <span class=\"supfact\">gc</span>;\n  Pixmap <span class=\"supfact\">pix</span>;\n  <span class=\"supfact\">pix</span> = XCreatePixmap(display, d, width, height, Number);\n  if (!<span class=\"supfact\">pix</span>)\n    return Number L;\n  <span class=\"supfact\">gcv</span>.foreground = Number L;\n  <span class=\"supfact\">gcv</span>.background = Number L;\n  <span class=\"supfact\">gc</span> =\n      XCreateGC(display, <span class=\"supfact\">pix</span>, Number, &<span class=\"supfact\">gcv</span>);\n  <span class=\"supfact\">ximage</span>.height = height;\n  <span class=\"supfact\">ximage</span>.width = width;\n  <span class=\"supfact\">ximage</span>.depth = Number;\n  <span class=\"supfact\">ximage</span>.xoffset = Number;\n  <span class=\"supfact\">ximage</span>.format = Number;\n  <span class=\"supfact\">ximage</span>.data = data;\n  <span class=\"supfact\">ximage</span>.byte_order = Number;\n  <span class=\"supfact\">ximage</span>.bitmap_unit = Number;\n  <span class=\"supfact\">ximage</span>.bitmap_bit_order = Number;\n  <span class=\"supfact\">ximage</span>.bitmap_pad = Number;\n  v6 = width + Number;\n  if (width + Number < Number)\n    v6 = width + Number;\n  <span class=\"supfact\">ximage</span>.bytes_per_line = v6 >> Number;\n  XPutImage(display, <span class=\"supfact\">pix</span>, <span class=\"supfact\">gc</span>,\n            &<span class=\"supfact\">ximage</span>, Number, Number, Number, Number, width,\n            height);\n  XFreeGC(display, <span class=\"supfact\">gc</span>);\n  return <span class=\"supfact\">pix</span>;\n}", "var": [{"name": "v10", "type": "struct XColor { unsigned __int64 pixel; unsigned __int16 red; unsigned __int16 green; unsigned __int16 blue; char flags; char pad; }", "ref_name": "gcv", "ref_type": "struct XGCValues { int function; PADDING (4); unsigned __int64 plane_mask; unsigned __int64 foreground; unsigned __int64 background; int line_width; int line_style; int cap_style; int join_style; int fill_style; int fill_rule; int arc_mode; PADDING (4); Pixmap tile; Pixmap stipple; int ts_x_origin; int ts_y_origin; Font font; int subwindow_mode; int graphics_exposures; int clip_x_origin; int clip_y_origin; Pixmap clip_mask; int dash_offset; char dashes; PADDING (3); }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "0000000000001833 <_nocheck__trace_megasas_iov_read_overflow>:\n    1833:\t55                   \tpush   %rbp\n    1834:\t48 89 e5             \tmov    %rsp,%rbp\n    1837:\t41 54                \tpush   %r12\n    1839:\t53                   \tpush   %rbx\n    183a:\t48 83 ec 30          \tsub    $0x30,%rsp\n    183e:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    1841:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    1844:\t89 55 c4             \tmov    %edx,-0x3c(%rbp)\n    1847:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    184e:\t00 00 \n    1850:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1854:\t31 c0                \txor    %eax,%eax\n    1856:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 185c <_nocheck__trace_megasas_iov_read_overflow+0x29>\n    185c:\t85 c0                \ttest   %eax,%eax\n    185e:\t0f 95 c0             \tsetne  %al\n    1861:\t0f b6 c0             \tmovzbl %al,%eax\n    1864:\t48 85 c0             \ttest   %rax,%rax\n    1867:\t74 6f                \tje     18d8 <_nocheck__trace_megasas_iov_read_overflow+0xa5>\n    1869:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 1870 <_nocheck__trace_megasas_iov_read_overflow+0x3d>\n    1870:\t66 85 c0             \ttest   %ax,%ax\n    1873:\t74 63                \tje     18d8 <_nocheck__trace_megasas_iov_read_overflow+0xa5>\n    1875:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    187a:\te8 ae ef ff ff       \tcallq  82d <qemu_loglevel_mask>\n    187f:\t84 c0                \ttest   %al,%al\n    1881:\t74 55                \tje     18d8 <_nocheck__trace_megasas_iov_read_overflow+0xa5>\n    1883:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1887:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    188c:\t48 89 c7             \tmov    %rax,%rdi\n    188f:\te8 00 00 00 00       \tcallq  1894 <_nocheck__trace_megasas_iov_read_overflow+0x61>\n    1894:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1898:\t49 89 c4             \tmov    %rax,%r12\n    189b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    189f:\t48 89 c3             \tmov    %rax,%rbx\n    18a2:\te8 00 00 00 00       \tcallq  18a7 <_nocheck__trace_megasas_iov_read_overflow+0x74>\n    18a7:\t89 c6                \tmov    %eax,%esi\n    18a9:\t8b 4d c8             \tmov    -0x38(%rbp),%ecx\n    18ac:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    18af:\t48 83 ec 08          \tsub    $0x8,%rsp\n    18b3:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    18b6:\t50                   \tpush   %rax\n    18b7:\t41 89 c9             \tmov    %ecx,%r9d\n    18ba:\t41 89 d0             \tmov    %edx,%r8d\n    18bd:\t4c 89 e1             \tmov    %r12,%rcx\n    18c0:\t48 89 da             \tmov    %rbx,%rdx\n    18c3:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 18ca <_nocheck__trace_megasas_iov_read_overflow+0x97>\n    18ca:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    18cf:\te8 00 00 00 00       \tcallq  18d4 <_nocheck__trace_megasas_iov_read_overflow+0xa1>\n    18d4:\t48 83 c4 10          \tadd    $0x10,%rsp\n    18d8:\t90                   \tnop\n    18d9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18dd:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    18e4:\t00 00 \n    18e6:\t74 05                \tje     18ed <_nocheck__trace_megasas_iov_read_overflow+0xba>\n    18e8:\te8 00 00 00 00       \tcallq  18ed <_nocheck__trace_megasas_iov_read_overflow+0xba>\n    18ed:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n    18f1:\t5b                   \tpop    %rbx\n    18f2:\t41 5c                \tpop    %r12\n    18f4:\t5d                   \tpop    %rbp\n    18f5:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_iov_read_overflow(\n    unsigned int a1, unsigned int a2, unsigned int a3) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_IOV_READ_OVERFLOW_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v3 = <span class=\"supfact\">tv</span>.tv_usec;\n    v4 = <span class=\"supfact\">tv</span>.tv_sec;\n    v5 = qemu_get_thread_id();\n    qemu_log(String, v5, v4, v3, a1, a2, a3);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl nocheck__trace_megasas_iov_read_overflow(int cmd, int bytes,\n                                                      int len) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_IOV_READ_OVERFLOW_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v3 = <span class=\"supfact\">_now</span>.tv_usec;\n    v4 = <span class=\"supfact\">_now</span>.tv_sec;\n    v5 = qemu_get_thread_id();\n    qemu_log(String, v5, v4, v3, (unsigned int)cmd, (unsigned int)bytes,\n             (unsigned int)len);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "f1vefour", "repo_name": "ptunnel", "path": "f1vefour/ptunnel/dfc033354a2f309d7b8e062aa77aa8d27cb032787bc251200ff1d05142b9e288", "path_in_repo": "f1vefour/ptunnel//ptunnel.o", "objdump": "00000000000045f5 <generate_challenge>:\n    45f5:\t55                   \tpush   %rbp\n    45f6:\t48 89 e5             \tmov    %rsp,%rbp\n    45f9:\t53                   \tpush   %rbx\n    45fa:\t48 83 ec 28          \tsub    $0x28,%rsp\n    45fe:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    4603:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4608:\te8 00 00 00 00       \tcallq  460d <generate_challenge+0x18>\n    460d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4611:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    4615:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    461a:\t48 89 c7             \tmov    %rax,%rdi\n    461d:\te8 00 00 00 00       \tcallq  4622 <generate_challenge+0x2d>\n    4622:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    4626:\t89 c2                \tmov    %eax,%edx\n    4628:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    462c:\t89 10                \tmov    %edx,(%rax)\n    462e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4632:\t89 c3                \tmov    %eax,%ebx\n    4634:\te8 00 00 00 00       \tcallq  4639 <generate_challenge+0x44>\n    4639:\t8d 14 03             \tlea    (%rbx,%rax,1),%edx\n    463c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    4640:\t89 50 04             \tmov    %edx,0x4(%rax)\n    4643:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    464a:\teb 19                \tjmp    4665 <generate_challenge+0x70>\n    464c:\te8 00 00 00 00       \tcallq  4651 <generate_challenge+0x5c>\n    4651:\t89 c1                \tmov    %eax,%ecx\n    4653:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    4657:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    465a:\t48 63 d2             \tmovslq %edx,%rdx\n    465d:\t89 4c 90 08          \tmov    %ecx,0x8(%rax,%rdx,4)\n    4661:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    4665:\t83 7d ec 05          \tcmpl   $0x5,-0x14(%rbp)\n    4669:\t7e e1                \tjle    464c <generate_challenge+0x57>\n    466b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    466f:\t48 83 c4 28          \tadd    $0x28,%rsp\n    4673:\t5b                   \tpop    %rbx\n    4674:\t5d                   \tpop    %rbp\n    4675:\tc3                   \tretq   ", "code_s": "_DWORD *generate_challenge() {\n  int v0;\n  struct timeval <span class=\"supfact\">tv</span>;\n  _DWORD *<span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v3</span> = calloc(Number, Number);\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  *<span class=\"supfact\">v3</span> = <span class=\"supfact\">tv</span>.tv_sec;\n  v0 = <span class=\"supfact\">tv</span>.tv_usec;\n  <span class=\"supfact\">v3</span>[Number] = v0 + rand();\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    <span class=\"supfact\">v3</span>[<span class=\"supfact\">i</span> + Number] = rand();\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "challenge_t_0 *__cdecl generate_challenge() {\n  int v0;\n  timeval <span class=\"supfact\">tt</span>;\n  challenge_t_0 *<span class=\"supfact\">c</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">c</span> = (challenge_t_0 *)calloc(Number, Number);\n  gettimeofday(&<span class=\"supfact\">tt</span>, Number L);\n  <span class=\"supfact\">c</span>->sec = <span class=\"supfact\">tt</span>.tv_sec;\n  v0 = <span class=\"supfact\">tt</span>.tv_usec;\n  <span class=\"supfact\">c</span>->usec_rnd = v0 + rand();\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    <span class=\"supfact\">c</span>->random[<span class=\"supfact\">i</span>] = rand();\n  return <span class=\"supfact\">c</span>;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tt", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "0000000000002221 <_nocheck__trace_megasas_io_target_not_present>:\n    2221:\t55                   \tpush   %rbp\n    2222:\t48 89 e5             \tmov    %rsp,%rbp\n    2225:\t41 54                \tpush   %r12\n    2227:\t53                   \tpush   %rbx\n    2228:\t48 83 ec 40          \tsub    $0x40,%rsp\n    222c:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    222f:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    2233:\t89 55 c8             \tmov    %edx,-0x38(%rbp)\n    2236:\t89 4d bc             \tmov    %ecx,-0x44(%rbp)\n    2239:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2240:\t00 00 \n    2242:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2246:\t31 c0                \txor    %eax,%eax\n    2248:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 224e <_nocheck__trace_megasas_io_target_not_present+0x2d>\n    224e:\t85 c0                \ttest   %eax,%eax\n    2250:\t0f 95 c0             \tsetne  %al\n    2253:\t0f b6 c0             \tmovzbl %al,%eax\n    2256:\t48 85 c0             \ttest   %rax,%rax\n    2259:\t74 70                \tje     22cb <_nocheck__trace_megasas_io_target_not_present+0xaa>\n    225b:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 2262 <_nocheck__trace_megasas_io_target_not_present+0x41>\n    2262:\t66 85 c0             \ttest   %ax,%ax\n    2265:\t74 64                \tje     22cb <_nocheck__trace_megasas_io_target_not_present+0xaa>\n    2267:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    226c:\te8 bc e5 ff ff       \tcallq  82d <qemu_loglevel_mask>\n    2271:\t84 c0                \ttest   %al,%al\n    2273:\t74 56                \tje     22cb <_nocheck__trace_megasas_io_target_not_present+0xaa>\n    2275:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    2279:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    227e:\t48 89 c7             \tmov    %rax,%rdi\n    2281:\te8 00 00 00 00       \tcallq  2286 <_nocheck__trace_megasas_io_target_not_present+0x65>\n    2286:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    228a:\t49 89 c4             \tmov    %rax,%r12\n    228d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2291:\t48 89 c3             \tmov    %rax,%rbx\n    2294:\te8 00 00 00 00       \tcallq  2299 <_nocheck__trace_megasas_io_target_not_present+0x78>\n    2299:\t89 c6                \tmov    %eax,%esi\n    229b:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n    229f:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    22a2:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    22a5:\t50                   \tpush   %rax\n    22a6:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    22a9:\t50                   \tpush   %rax\n    22aa:\t49 89 c9             \tmov    %rcx,%r9\n    22ad:\t41 89 d0             \tmov    %edx,%r8d\n    22b0:\t4c 89 e1             \tmov    %r12,%rcx\n    22b3:\t48 89 da             \tmov    %rbx,%rdx\n    22b6:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 22bd <_nocheck__trace_megasas_io_target_not_present+0x9c>\n    22bd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22c2:\te8 00 00 00 00       \tcallq  22c7 <_nocheck__trace_megasas_io_target_not_present+0xa6>\n    22c7:\t48 83 c4 10          \tadd    $0x10,%rsp\n    22cb:\t90                   \tnop\n    22cc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    22d0:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    22d7:\t00 00 \n    22d9:\t74 05                \tje     22e0 <_nocheck__trace_megasas_io_target_not_present+0xbf>\n    22db:\te8 00 00 00 00       \tcallq  22e0 <_nocheck__trace_megasas_io_target_not_present+0xbf>\n    22e0:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n    22e4:\t5b                   \tpop    %rbx\n    22e5:\t41 5c                \tpop    %r12\n    22e7:\t5d                   \tpop    %rbp\n    22e8:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_io_target_not_present(\n    unsigned int a1, const char *a2, unsigned int a3, unsigned int a4) {\n  __suseconds_t v4;\n  __time_t v5;\n  unsigned int v6;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v11</span> = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MEGASAS_IO_TARGET_NOT_PRESENT_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v4 = <span class=\"supfact\">tv</span>.tv_usec;\n    v5 = <span class=\"supfact\">tv</span>.tv_sec;\n    v6 = qemu_get_thread_id();\n    qemu_log(String, v6, v5, v4, a1, a2, a3, a4);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v11</span>;\n}", "code_t": "void __cdecl nocheck__trace_megasas_io_target_not_present(int cmd,\n                                                          const char *frame,\n                                                          int dev, int lun) {\n  __suseconds_t v4;\n  __time_t v5;\n  unsigned int v6;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MEGASAS_IO_TARGET_NOT_PRESENT_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v4 = <span class=\"supfact\">_now</span>.tv_usec;\n    v5 = <span class=\"supfact\">_now</span>.tv_sec;\n    v6 = qemu_get_thread_id();\n    qemu_log(String, v6, v5, v4, (unsigned int)cmd, frame, (unsigned int)dev,\n             (unsigned int)lun);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "Sabayon", "repo_name": "kernel", "path": "Sabayon/kernel/fd6a6c908f4edc4f82e433c077ac9db14f94bd0ff24c1ae1334f8d9e86ed0973", "path_in_repo": "Sabayon/kernel/tools/perf/util/evlist.o", "objdump": "000000000000423c <perf_evlist__to_front>:\n    423c:\t55                   \tpush   %rbp\n    423d:\t48 89 e5             \tmov    %rsp,%rbp\n    4240:\t48 83 ec 60          \tsub    $0x60,%rsp\n    4244:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    4248:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n    424c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    4253:\t00 00 \n    4255:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4259:\t31 c0                \txor    %eax,%eax\n    425b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    425f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4263:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    4267:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    426b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    426f:\t48 89 c7             \tmov    %rax,%rdi\n    4272:\te8 3c c8 ff ff       \tcallq  ab3 <perf_evlist__first>\n    4277:\t48 39 45 a0          \tcmp    %rax,-0x60(%rbp)\n    427b:\t0f 84 90 00 00 00    \tje     4311 <perf_evlist__to_front+0xd5>\n    4281:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    4285:\t48 8b 00             \tmov    (%rax),%rax\n    4288:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    428c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4290:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    4294:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    4298:\t48 8b 00             \tmov    (%rax),%rax\n    429b:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    429f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    42a3:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    42a7:\teb 49                \tjmp    42f2 <perf_evlist__to_front+0xb6>\n    42a9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    42ad:\t48 8b 90 10 03 00 00 \tmov    0x310(%rax),%rdx\n    42b4:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    42b8:\t48 8b 80 10 03 00 00 \tmov    0x310(%rax),%rax\n    42bf:\t48 39 c2             \tcmp    %rax,%rdx\n    42c2:\t75 13                \tjne    42d7 <perf_evlist__to_front+0x9b>\n    42c4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    42c8:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    42cc:\t48 89 d6             \tmov    %rdx,%rsi\n    42cf:\t48 89 c7             \tmov    %rax,%rdi\n    42d2:\te8 20 c3 ff ff       \tcallq  5f7 <list_move_tail>\n    42d7:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    42db:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    42df:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    42e3:\t48 8b 00             \tmov    (%rax),%rax\n    42e6:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    42ea:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    42ee:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    42f2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    42f6:\t48 3b 45 a8          \tcmp    -0x58(%rbp),%rax\n    42fa:\t75 ad                \tjne    42a9 <perf_evlist__to_front+0x6d>\n    42fc:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    4300:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    4304:\t48 89 d6             \tmov    %rdx,%rsi\n    4307:\t48 89 c7             \tmov    %rax,%rdi\n    430a:\te8 fe c3 ff ff       \tcallq  70d <list_splice>\n    430f:\teb 01                \tjmp    4312 <perf_evlist__to_front+0xd6>\n    4311:\t90                   \tnop\n    4312:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4316:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    431d:\t00 00 \n    431f:\t74 05                \tje     4326 <perf_evlist__to_front+0xea>\n    4321:\te8 00 00 00 00       \tcallq  4326 <perf_evlist__to_front+0xea>\n    4326:\tc9                   \tleaveq \n    4327:\tc3                   \tretq   \n", "code_s": "unsigned __int64 __fastcall perf_evlist__to_front(__int64 *a1, __int64 a2) {\n  __int64 *<span class=\"supfact\">v3</span>;\n  __int64 *<span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  <span class=\"supfact\">v5</span>[Number] = (__int64)<span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span>[Number] = (__int64)<span class=\"supfact\">v5</span>;\n  if (a2 != perf_evlist__first((__int64)a1)) {\n    <span class=\"supfact\">v3</span> = (__int64 *)*a1;\n    <span class=\"supfact\">v4</span> = *(__int64 **)*a1;\n    while (<span class=\"supfact\">v3</span> != a1) {\n      if (<span class=\"supfact\">v3</span>[Number] == *(_QWORD *)(a2 + Number))\n        list_move_tail(<span class=\"supfact\">v3</span>, (__int64)<span class=\"supfact\">v5</span>);\n      <span class=\"supfact\">v3</span> = <span class=\"supfact\">v4</span>;\n      <span class=\"supfact\">v4</span> = (__int64 *)*<span class=\"supfact\">v4</span>;\n    }\n    list_splice(<span class=\"supfact\">v5</span>, a1);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl perf_evlist__to_front(perf_evlist *evlist,\n                                   perf_evsel *move_evsel) {\n  perf_evsel *<span class=\"supfact\">evsel</span>;\n  perf_evsel *<span class=\"supfact\">n</span>;\n  list_head <span class=\"supfact\">move</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  <span class=\"supfact\">move</span>.next = &<span class=\"supfact\">move</span>;\n  <span class=\"supfact\">move</span>.prev = &<span class=\"supfact\">move</span>;\n  if (move_evsel != perf_evlist__first(evlist)) {\n    <span class=\"supfact\">evsel</span> = (perf_evsel *)evlist->entries.next;\n    <span class=\"supfact\">n</span> = (perf_evsel *)evlist->entries.next->next;\n    while (<span class=\"supfact\">evsel</span> != (perf_evsel *)evlist) {\n      if (<span class=\"supfact\">evsel</span>->leader == move_evsel->leader)\n        list_move_tail(&<span class=\"supfact\">evsel</span>->node, &<span class=\"supfact\">move</span>);\n      <span class=\"supfact\">evsel</span> = <span class=\"supfact\">n</span>;\n      <span class=\"supfact\">n</span> = (perf_evsel *)<span class=\"supfact\">n</span>->node.next;\n    }\n    list_splice(&<span class=\"supfact\">move</span>, &evlist->entries);\n  }\n}", "var": [{"name": "v5", "type": "struct list_head { list_head * next; list_head * prev; }", "ref_name": "move", "ref_type": "struct list_head { list_head * next; list_head * prev; }"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/8705675c38806a2636ef9e01882a4e613a8d555758da6da678ccdb53fbbec44a", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/XML/samples/SAXParser/bin/Linux/x86_64/SAXParserd", "objdump": "0000000000402c00 <_ZN9MyHandler21processingInstructionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_>:\n  402c00:\t55                   \tpush   %rbp\n  402c01:\t48 89 e5             \tmov    %rsp,%rbp\n  402c04:\t53                   \tpush   %rbx\n  402c05:\t48 83 ec 58          \tsub    $0x58,%rsp\n  402c09:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  402c0d:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  402c11:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n  402c15:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  402c19:\t48 89 c7             \tmov    %rax,%rdi\n  402c1c:\te8 6f f5 ff ff       \tcallq  402190 <_ZNSaIcEC1Ev@plt>\n  402c21:\t48 8d 55 ef          \tlea    -0x11(%rbp),%rdx\n  402c25:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  402c29:\t48 8d 35 5b 14 00 00 \tlea    0x145b(%rip),%rsi        # 40408b <_ZStL6ignore+0x85>\n  402c30:\t48 89 c7             \tmov    %rax,%rdi\n  402c33:\te8 e8 f4 ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>\n  402c38:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  402c3c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  402c40:\t48 89 d6             \tmov    %rdx,%rsi\n  402c43:\t48 89 c7             \tmov    %rax,%rdi\n  402c46:\te8 87 07 00 00       \tcallq  4033d2 <_ZN9MyHandler5whereERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>\n  402c4b:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  402c4f:\t48 89 c7             \tmov    %rax,%rdi\n  402c52:\te8 39 f4 ff ff       \tcallq  402090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  402c57:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  402c5b:\t48 89 c7             \tmov    %rax,%rdi\n  402c5e:\te8 8d f4 ff ff       \tcallq  4020f0 <_ZNSaIcED1Ev@plt>\n  402c63:\t48 8d 35 37 14 00 00 \tlea    0x1437(%rip),%rsi        # 4040a1 <_ZStL6ignore+0x9b>\n  402c6a:\t48 8b 05 4f 33 00 00 \tmov    0x334f(%rip),%rax        # 405fc0 <_DYNAMIC+0x288>\n  402c71:\t48 89 c7             \tmov    %rax,%rdi\n  402c74:\te8 47 f4 ff ff       \tcallq  4020c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  402c79:\t48 89 c2             \tmov    %rax,%rdx\n  402c7c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  402c80:\t48 89 c6             \tmov    %rax,%rsi\n  402c83:\t48 89 d7             \tmov    %rdx,%rdi\n  402c86:\te8 25 f4 ff ff       \tcallq  4020b0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>\n  402c8b:\t48 8d 35 17 14 00 00 \tlea    0x1417(%rip),%rsi        # 4040a9 <_ZStL6ignore+0xa3>\n  402c92:\t48 89 c7             \tmov    %rax,%rdi\n  402c95:\te8 26 f4 ff ff       \tcallq  4020c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  402c9a:\t48 89 c2             \tmov    %rax,%rdx\n  402c9d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  402ca1:\t48 89 c6             \tmov    %rax,%rsi\n  402ca4:\t48 89 d7             \tmov    %rdx,%rdi\n  402ca7:\te8 04 f4 ff ff       \tcallq  4020b0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>\n  402cac:\t48 89 c2             \tmov    %rax,%rdx\n  402caf:\t48 8b 05 fa 32 00 00 \tmov    0x32fa(%rip),%rax        # 405fb0 <_DYNAMIC+0x278>\n  402cb6:\t48 89 c6             \tmov    %rax,%rsi\n  402cb9:\t48 89 d7             \tmov    %rdx,%rdi\n  402cbc:\te8 1f f4 ff ff       \tcallq  4020e0 <_ZNSolsEPFRSoS_E@plt>\n  402cc1:\teb 2b                \tjmp    402cee <_ZN9MyHandler21processingInstructionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0xee>\n  402cc3:\t48 89 c3             \tmov    %rax,%rbx\n  402cc6:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  402cca:\t48 89 c7             \tmov    %rax,%rdi\n  402ccd:\te8 be f3 ff ff       \tcallq  402090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  402cd2:\teb 03                \tjmp    402cd7 <_ZN9MyHandler21processingInstructionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_+0xd7>\n  402cd4:\t48 89 c3             \tmov    %rax,%rbx\n  402cd7:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  402cdb:\t48 89 c7             \tmov    %rax,%rdi\n  402cde:\te8 0d f4 ff ff       \tcallq  4020f0 <_ZNSaIcED1Ev@plt>\n  402ce3:\t48 89 d8             \tmov    %rbx,%rax\n  402ce6:\t48 89 c7             \tmov    %rax,%rdi\n  402ce9:\te8 92 f4 ff ff       \tcallq  402180 <_Unwind_Resume@plt>\n  402cee:\t48 83 c4 58          \tadd    $0x58,%rsp\n  402cf2:\t5b                   \tpop    %rbx\n  402cf3:\t5d                   \tpop    %rbp\n  402cf4:\tc3                   \tretq   \n  402cf5:\t90                   \tnop", "code_s": "__int64 __fastcall MyHandler processingInstruction(__int64 a1) {\n  char <span class=\"supfact\">v2</span>[Number];\n  std allocator<char> allocator();\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  MyHandler where(a1, <span class=\"supfact\">v2</span>);\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  std allocator<char> ~allocator();\n  std operator<<<std char_traits<char>>();\n  std operator<<<char>();\n  std operator<<<std char_traits<char>>();\n  std operator<<<char>();\n  return std ostream operator<<();\n}", "code_t": "void __cdecl MyHandler processingInstruction(MyHandler *const this,\n                                             const Poco XML XMLString *target,\n                                             const Poco XML XMLString *data) {\n  std string <span class=\"supfact\">meth</span>;\n  std allocator<char> allocator();\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  MyHandler where(this, &<span class=\"supfact\">meth</span>);\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  std allocator<char> ~allocator();\n  std operator<<<std char_traits<char>>();\n  std operator<<<char>();\n  std operator<<<std char_traits<char>>();\n  std operator<<<char>();\n  std ostream operator<<();\n}", "var": [{"name": "v2", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "meth", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"code_s": "void __fastcall DSP56K XMemoryDataMoveWithShortDisplacement\ndisassemble(DSP56K XMemoryDataMoveWithShortDisplacement *this, astring *a2) {\n  char <span class=\"supfact\">v2</span>[Number];\n  char <span class=\"supfact\">v3</span>[Number];\n  operator+(\n      (astring *)<span class=\"supfact\">v3</span>,\n      (DSP56K XMemoryDataMoveWithShortDisplacement *)((char *)this + Number),\n      String);\n  operator+(\n      (astring *)<span class=\"supfact\">v2</span>, (const astring *)<span class=\"supfact\">v3</span>,\n      (DSP56K XMemoryDataMoveWithShortDisplacement *)((char *)this + Number));\n  astring operator=(a2, (const astring *)<span class=\"supfact\">v2</span>);\n  astring ~astring((astring *)<span class=\"supfact\">v2</span>);\n  astring ~astring((astring *)<span class=\"supfact\">v3</span>);\n}", "code_t": "void __cdecl DSP56K XMemoryDataMoveWithShortDisplacement\ndisassemble(const DSP56K XMemoryDataMoveWithShortDisplacement *const this,\n            astring *retString) {\n  astring <span class=\"supfact\">string</span>;\n  astring <span class=\"supfact\">lhs</span>;\n  operator+(&<span class=\"supfact\">lhs</span>, &this->m_source, String);\n  operator+(&<span class=\"supfact\">string</span>, &<span class=\"supfact\">lhs</span>,\n            &this->m_destination);\n  astring operator=(retString, &<span class=\"supfact\">string</span>);\n  astring ~astring(&<span class=\"supfact\">string</span>);\n  astring ~astring(&<span class=\"supfact\">lhs</span>);\n}", "var": [{"name": "v3", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "lhs", "ref_type": "struct astring { _astring_base baseclass_0; }"}, {"name": "v2", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "string", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/167d712463e0992729e10389549ca204bb5a890bb1dd0460101cee04a39115ca", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_f2.o", "objdump": "00000000000251e4 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t>:\n   251e4:\t55                   \tpush   %rbp\n   251e5:\t48 89 e5             \tmov    %rsp,%rbp\n   251e8:\t53                   \tpush   %rbx\n   251e9:\t48 83 ec 68          \tsub    $0x68,%rsp\n   251ed:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   251f1:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n   251f5:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   251fc:\t00 \n   251fd:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   25201:\t48 89 c7             \tmov    %rax,%rdi\n   25204:\te8 00 00 00 00       \tcallq  25209 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x25>\n   25209:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n   2520d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   25211:\t48 89 d6             \tmov    %rdx,%rsi\n   25214:\t48 89 c7             \tmov    %rax,%rdi\n   25217:\te8 21 ea ff ff       \tcallq  23c3d <_ZL33construct_machine_config_taito_f2R14machine_configP8device_t>\n   2521c:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n   25220:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n   25224:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   25228:\tba 00 00 00 00       \tmov    $0x0,%edx\n   2522d:\t48 89 ce             \tmov    %rcx,%rsi\n   25230:\t48 89 c7             \tmov    %rax,%rdi\n   25233:\te8 00 00 00 00       \tcallq  25238 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x54>\n   25238:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   2523c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   25240:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25245:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   2524a:\t48 89 c7             \tmov    %rax,%rdi\n   2524d:\te8 00 00 00 00       \tcallq  25252 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x6e>\n   25252:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   25256:\t48 c7 40 48 00 00 00 \tmovq   $0x0,0x48(%rax)\n   2525d:\t00 \n   2525e:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n   25262:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25267:\tbe 04 00 00 00       \tmov    $0x4,%esi\n   2526c:\t48 89 c7             \tmov    %rax,%rdi\n   2526f:\te8 00 00 00 00       \tcallq  25274 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x90>\n   25274:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n   25278:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   2527c:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25281:\t48 89 ce             \tmov    %rcx,%rsi\n   25284:\t48 89 c7             \tmov    %rax,%rdi\n   25287:\te8 00 00 00 00       \tcallq  2528c <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0xa8>\n   2528c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   25290:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   25294:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   25299:\t48 89 c7             \tmov    %rax,%rdi\n   2529c:\te8 00 00 00 00       \tcallq  252a1 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0xbd>\n   252a1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   252a5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   252aa:\t48 89 c7             \tmov    %rax,%rdi\n   252ad:\te8 00 00 00 00       \tcallq  252b2 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0xce>\n   252b2:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 252b9 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0xd5>\n   252b9:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n   252bd:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   252c1:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   252c7:\t48 89 d1             \tmov    %rdx,%rcx\n   252ca:\tba 00 00 00 00       \tmov    $0x0,%edx\n   252cf:\t48 89 c7             \tmov    %rax,%rdi\n   252d2:\te8 00 00 00 00       \tcallq  252d7 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0xf3>\n   252d7:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   252db:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   252df:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   252e4:\t48 89 c7             \tmov    %rax,%rdi\n   252e7:\te8 00 00 00 00       \tcallq  252ec <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x108>\n   252ec:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 252f3 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x10f>\n   252f3:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n   252f7:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   252fb:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   25301:\t48 89 d1             \tmov    %rdx,%rcx\n   25304:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25309:\t48 89 c7             \tmov    %rax,%rdi\n   2530c:\te8 00 00 00 00       \tcallq  25311 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x12d>\n   25311:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   25315:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n   25319:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   2531d:\t48 89 c7             \tmov    %rax,%rdi\n   25320:\te8 00 00 00 00       \tcallq  25325 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x141>\n   25325:\t48 89 d8             \tmov    %rbx,%rax\n   25328:\teb 1a                \tjmp    25344 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x160>\n   2532a:\t48 89 c3             \tmov    %rax,%rbx\n   2532d:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   25331:\t48 89 c7             \tmov    %rax,%rdi\n   25334:\te8 00 00 00 00       \tcallq  25339 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x155>\n   25339:\t48 89 d8             \tmov    %rbx,%rax\n   2533c:\t48 89 c7             \tmov    %rax,%rdi\n   2533f:\te8 00 00 00 00       \tcallq  25344 <_ZL33construct_machine_config_footchmpR14machine_configP8device_t+0x160>\n   25344:\t48 83 c4 68          \tadd    $0x68,%rsp\n   25348:\t5b                   \tpop    %rbx\n   25349:\t5d                   \tpop    %rbp\n   2534a:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_footchmp(machine_config *a1,\n                                                       device_t *a2) {\n  void(__fastcall * v2)(screen_device *, running_machine *);\n  const void *v3;\n  device_t *<span class=\"supfact\">v5</span>;\n  char <span class=\"supfact\">v6</span>[Number];\n  device_t *<span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = Number L;\n  astring astring((astring *)<span class=\"supfact\">v6</span>);\n  <span class=\"supfact\">v5</span> = construct_machine_config_taito_f2(a1, a2);\n  <span class=\"supfact\">v7</span> =\n      (device_t *)machine_config device_find(a1, <span class=\"supfact\">v5</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">v7</span>, Number L, construct_address_map_footchmp_map);\n  *((_QWORD *)a1 + Number) = &gfxdecodeinfo_deadconx;\n  driver_device static_set_callback(<span class=\"supfact\">v5</span>, Number L,\n                                    &video_start_taitof2_footchmp);\n  <span class=\"supfact\">v7</span> =\n      (device_t *)machine_config device_find(a1, <span class=\"supfact\">v5</span>, String);\n  screen_device static_set_screen_update(<span class=\"supfact\">v7</span>,\n                                         &screen_update_taitof2_deadconx);\n  screen_device static_set_screen_eof(\n      <span class=\"supfact\">v7</span>, (device_t *)&screen_eof_taitof2_full_buffer_delayed,\n      v2);\n  <span class=\"supfact\">v7</span> = (device_t *)machine_config device_add(\n      a1, <span class=\"supfact\">v5</span>, String, TC0480SCP, Number);\n  device_t static_set_static_config(<span class=\"supfact\">v7</span>,\n                                    (device_t *)&footchmp_tc0480scp_intf, v3);\n  <span class=\"supfact\">v7</span> = (device_t *)machine_config device_add(\n      a1, <span class=\"supfact\">v5</span>, String, TC0360PRI, Number);\n  astring ~astring((astring *)<span class=\"supfact\">v6</span>);\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "device_t *__cdecl construct_machine_config_footchmp(machine_config *config,\n                                                    device_t *owner) {\n  void(__fastcall * v2)(address_map *, const device_t *);\n  void(__fastcall * v3)(running_machine *);\n  unsigned int(__fastcall * v4)(screen_device *, bitmap_t *,\n                                const _rectangle *);\n  void(__fastcall * v5)(screen_device *, running_machine *);\n  device_t *<span class=\"supfact\">ownera</span>;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *<span class=\"supfact\">device</span>;\n  <span class=\"supfact\">device</span> = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  <span class=\"supfact\">ownera</span> = construct_machine_config_taito_f2(config, owner);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, Number L,\n      (address_spacenum)construct_address_map_footchmp_map, v2);\n  config->m_gfxdecodeinfo = gfxdecodeinfo_deadconx;\n  driver_device static_set_callback(\n      <span class=\"supfact\">ownera</span>, (device_t *)&loc_4,\n      (driver_device callback_type)&video_start_taitof2_footchmp, v3);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  screen_device static_set_screen_update(\n      <span class=\"supfact\">device</span>, (device_t *)&screen_update_taitof2_deadconx, v4);\n  screen_device static_set_screen_eof(\n      <span class=\"supfact\">device</span>,\n      (device_t *)&screen_eof_taitof2_full_buffer_delayed, v5);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_add(\n      config, <span class=\"supfact\">ownera</span>, String, TC0480SCP, Number);\n  device_t static_set_static_config(<span class=\"supfact\">device</span>,\n                                    &footchmp_tc0480scp_intf);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_add(\n      config, <span class=\"supfact\">ownera</span>, String, TC0360PRI, Number);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return <span class=\"supfact\">ownera</span>;\n}", "var": [{"name": "v6", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "AndersTrier", "repo_name": "QEMU-bitflip", "path": "AndersTrier/QEMU-bitflip/344c8de551127883f2c31d5d67462ea9cb0b7fc5fe990c608bc8b68569e390ba", "path_in_repo": "AndersTrier/QEMU-bitflip//qapi/qapi-visit-core.o", "objdump": "00000000000006f5 <trace_visit_end_alternate>:\n     6f5:\t55                   \tpush   %rbp\n     6f6:\t48 89 e5             \tmov    %rsp,%rbp\n     6f9:\t41 54                \tpush   %r12\n     6fb:\t53                   \tpush   %rbx\n     6fc:\t48 83 ec 30          \tsub    $0x30,%rsp\n     700:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     704:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     708:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     70f:\t00 00 \n     711:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     715:\t31 c0                \txor    %eax,%eax\n     717:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 71d <trace_visit_end_alternate+0x28>\n     71d:\t85 c0                \ttest   %eax,%eax\n     71f:\t0f 95 c0             \tsetne  %al\n     722:\t0f b6 c0             \tmovzbl %al,%eax\n     725:\t48 85 c0             \ttest   %rax,%rax\n     728:\t74 69                \tje     793 <trace_visit_end_alternate+0x9e>\n     72a:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 731 <trace_visit_end_alternate+0x3c>\n     731:\t66 85 c0             \ttest   %ax,%ax\n     734:\t74 5d                \tje     793 <trace_visit_end_alternate+0x9e>\n     736:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     73a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     73f:\t48 89 c7             \tmov    %rax,%rdi\n     742:\te8 00 00 00 00       \tcallq  747 <trace_visit_end_alternate+0x52>\n     747:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     74c:\te8 af f8 ff ff       \tcallq  0 <qemu_loglevel_mask>\n     751:\t0f b6 c0             \tmovzbl %al,%eax\n     754:\t48 85 c0             \ttest   %rax,%rax\n     757:\t74 3a                \tje     793 <trace_visit_end_alternate+0x9e>\n     759:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     75d:\t49 89 c4             \tmov    %rax,%r12\n     760:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     764:\t48 89 c3             \tmov    %rax,%rbx\n     767:\te8 00 00 00 00       \tcallq  76c <trace_visit_end_alternate+0x77>\n     76c:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     770:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     774:\t49 89 c9             \tmov    %rcx,%r9\n     777:\t49 89 d0             \tmov    %rdx,%r8\n     77a:\t4c 89 e1             \tmov    %r12,%rcx\n     77d:\t48 89 da             \tmov    %rbx,%rdx\n     780:\t89 c6                \tmov    %eax,%esi\n     782:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 789 <trace_visit_end_alternate+0x94>\n     789:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     78e:\te8 00 00 00 00       \tcallq  793 <trace_visit_end_alternate+0x9e>\n     793:\t90                   \tnop\n     794:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     798:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     79f:\t00 00 \n     7a1:\t74 05                \tje     7a8 <trace_visit_end_alternate+0xb3>\n     7a3:\te8 00 00 00 00       \tcallq  7a8 <trace_visit_end_alternate+0xb3>\n     7a8:\t48 83 c4 30          \tadd    $0x30,%rsp\n     7ac:\t5b                   \tpop    %rbx\n     7ad:\t41 5c                \tpop    %r12\n     7af:\t5d                   \tpop    %rbp\n     7b0:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_visit_end_alternate(const void *a1,\n                                                      const void *a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_VISIT_END_ALTERNATE_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v2 = <span class=\"supfact\">tv</span>.tv_usec;\n        v3 = <span class=\"supfact\">tv</span>.tv_sec;\n        v4 = getpid();\n        qemu_log(String, v4, v3, v2, a1, a2);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v7</span>;\n}", "code_t": "void __cdecl trace_visit_end_alternate(void *v, void *obj) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VISIT_END_ALTERNATE_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v2 = <span class=\"supfact\">_now</span>.tv_usec;\n      v3 = <span class=\"supfact\">_now</span>.tv_sec;\n      v4 = getpid();\n      qemu_log(String, v4, v3, v2, v, obj);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "marmphco", "repo_name": "shittpd", "path": "marmphco/shittpd/4d9bbdda6b347e15d519a2a154e26a3347c49782fd11d3b0b3b14cfb925082a3", "path_in_repo": "marmphco/shittpd//sdlistener.o", "objdump": "000000000000017b <sdListen>:\n 17b:\t55                   \tpush   %rbp\n 17c:\t48 89 e5             \tmov    %rsp,%rbp\n 17f:\t48 83 ec 50          \tsub    $0x50,%rsp\n 183:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n 187:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 18b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 18f:\tc7 45 dc 10 00 00 00 \tmovl   $0x10,-0x24(%rbp)\n 196:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 19d <sdListen+0x22>\n 19d:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 1a1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1a6:\t48 89 c7             \tmov    %rax,%rdi\n 1a9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1ae:\te8 00 00 00 00       \tcallq  1b3 <sdListen+0x38>\n 1b3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ba <sdListen+0x3f>\n 1ba:\t48 89 c7             \tmov    %rax,%rdi\n 1bd:\te8 00 00 00 00       \tcallq  1c2 <sdListen+0x47>\n 1c2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1c6:\t8b 40 14             \tmov    0x14(%rax),%eax\n 1c9:\t48 8d 55 dc          \tlea    -0x24(%rbp),%rdx\n 1cd:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n 1d1:\t48 89 ce             \tmov    %rcx,%rsi\n 1d4:\t89 c7                \tmov    %eax,%edi\n 1d6:\te8 00 00 00 00       \tcallq  1db <sdListen+0x60>\n 1db:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 1de:\t83 7d f4 ff          \tcmpl   $0xffffffff,-0xc(%rbp)\n 1e2:\t75 72                \tjne    256 <sdListen+0xdb>\n 1e4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1e8:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n 1eb:\t83 f8 01             \tcmp    $0x1,%eax\n 1ee:\t75 2f                \tjne    21f <sdListen+0xa4>\n 1f0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1f7 <sdListen+0x7c>\n 1f7:\t48 89 c1             \tmov    %rax,%rcx\n 1fa:\tba 11 00 00 00       \tmov    $0x11,%edx\n 1ff:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 204:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 209:\te8 00 00 00 00       \tcallq  20e <sdListen+0x93>\n 20e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 215 <sdListen+0x9a>\n 215:\t48 89 c7             \tmov    %rax,%rdi\n 218:\te8 00 00 00 00       \tcallq  21d <sdListen+0xa2>\n 21d:\teb 2d                \tjmp    24c <sdListen+0xd1>\n 21f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 226 <sdListen+0xab>\n 226:\t48 89 c1             \tmov    %rax,%rcx\n 229:\tba 1b 00 00 00       \tmov    $0x1b,%edx\n 22e:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 233:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 238:\te8 00 00 00 00       \tcallq  23d <sdListen+0xc2>\n 23d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 244 <sdListen+0xc9>\n 244:\t48 89 c7             \tmov    %rax,%rdi\n 247:\te8 00 00 00 00       \tcallq  24c <sdListen+0xd1>\n 24c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 251:\te8 00 00 00 00       \tcallq  256 <sdListen+0xdb>\n 256:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 25d <sdListen+0xe2>\n 25d:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n 260:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 264:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 269:\t48 89 c7             \tmov    %rax,%rdi\n 26c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 271:\te8 00 00 00 00       \tcallq  276 <sdListen+0xfb>\n 276:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 27d <sdListen+0x102>\n 27d:\t48 89 c7             \tmov    %rax,%rdi\n 280:\te8 00 00 00 00       \tcallq  285 <sdListen+0x10a>\n 285:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 289:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n 28d:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 290:\t89 d6                \tmov    %edx,%esi\n 292:\t48 89 c7             \tmov    %rax,%rdi\n 295:\te8 00 00 00 00       \tcallq  29a <sdListen+0x11f>\n 29a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2a1 <sdListen+0x126>\n 2a1:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n 2a4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 2a8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2ad:\t48 89 c7             \tmov    %rax,%rdi\n 2b0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2b5:\te8 00 00 00 00       \tcallq  2ba <sdListen+0x13f>\n 2ba:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2c1 <sdListen+0x146>\n 2c1:\t48 89 c7             \tmov    %rax,%rdi\n 2c4:\te8 00 00 00 00       \tcallq  2c9 <sdListen+0x14e>\n 2c9:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n 2d0:\t00 \n 2d1:\t48 c7 45 c8 01 00 00 \tmovq   $0x1,-0x38(%rbp)\n 2d8:\t00 \n 2d9:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 2dd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2e2:\t48 89 c7             \tmov    %rax,%rdi\n 2e5:\te8 00 00 00 00       \tcallq  2ea <sdListen+0x16f>\n 2ea:\te9 a0 fe ff ff       \tjmpq   18f <sdListen+0x14>", "code_s": "void __fastcall __noreturn sdListen(void *a1) {\n  struct timespec <span class=\"supfact\">requested_time</span>;\n  socklen_t <span class=\"supfact\">addr_len</span>;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  _DWORD *<span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = a1;\n  while (Number) {\n    <span class=\"supfact\">addr_len</span> = Number;\n    fprintf(stderr, String, <span class=\"supfact\">v5</span>);\n    fflush(stderr);\n    <span class=\"supfact\">v4</span> =\n        accept(<span class=\"supfact\">v5</span>[Number], &<span class=\"supfact\">addr</span>,\n               &<span class=\"supfact\">addr_len</span>);\n    if (<span class=\"supfact\">v4</span> == Number)\n      break;\n    fprintf(stderr, String, <span class=\"supfact\">v5</span>, <span class=\"supfact\">v4</span>);\n    fflush(stderr);\n    sdRequestQueuePut(*((_QWORD *)<span class=\"supfact\">v5</span> + Number),\n                      <span class=\"supfact\">v4</span>);\n    fprintf(stderr, String, <span class=\"supfact\">v5</span>, <span class=\"supfact\">v4</span>);\n    fflush(stderr);\n    <span class=\"supfact\">requested_time</span>.tv_sec = Number L;\n    <span class=\"supfact\">requested_time</span>.tv_nsec = Number L;\n    nanosleep(&<span class=\"supfact\">requested_time</span>, Number L);\n  }\n  if (<span class=\"supfact\">v5</span>[Number] == Number)\n    fwrite(String, Number, Number, stderr);\n  else\n    fwrite(String, Number, Number, stderr);\n  fflush(stderr);\n  pthread_exit(Number L);\n}", "code_t": "void *__cdecl __noreturn sdListen(void *arg) {\n  timespec <span class=\"supfact\">t</span>;\n  socklen_t <span class=\"supfact\">caddrsize</span>;\n  sockaddr_in <span class=\"supfact\">caddr</span>;\n  int <span class=\"supfact\">sock</span>;\n  SDListenerRef <span class=\"supfact\">listener</span>;\n  <span class=\"supfact\">listener</span> = (SDListenerRef)arg;\n  while (Number) {\n    <span class=\"supfact\">caddrsize</span> = Number;\n    fprintf(stderr, String, <span class=\"supfact\">listener</span>);\n    fflush(stderr);\n    <span class=\"supfact\">sock</span> = accept(<span class=\"supfact\">listener</span>->socket,\n                                  (struct sockaddr *)&<span class=\"supfact\">caddr</span>,\n                                  &<span class=\"supfact\">caddrsize</span>);\n    if (<span class=\"supfact\">sock</span> == Number)\n      break;\n    fprintf(stderr, String, <span class=\"supfact\">listener</span>,\n            (unsigned int)<span class=\"supfact\">sock</span>);\n    fflush(stderr);\n    sdRequestQueuePut(<span class=\"supfact\">listener</span>->queue,\n                      (unsigned int)<span class=\"supfact\">sock</span>);\n    fprintf(stderr, String, <span class=\"supfact\">listener</span>,\n            (unsigned int)<span class=\"supfact\">sock</span>);\n    fflush(stderr);\n    <span class=\"supfact\">t</span>.tv_sec = Number L;\n    <span class=\"supfact\">t</span>.tv_nsec = Number L;\n    nanosleep(&<span class=\"supfact\">t</span>, Number L);\n  }\n  if (<span class=\"supfact\">listener</span>->stopped == Number)\n    fwrite(String, Number, Number, stderr);\n  else\n    fwrite(String, Number, Number, stderr);\n  fflush(stderr);\n  pthread_exit(Number L);\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "caddr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}, {"name": "requested_time", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "t", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/1dd11b101682284153534b1391faa5b2a1aaf4e7663bb3ede73e7c42ea9fb148", "path_in_repo": "sslab-gatech/janus/core/create_corpus.o", "objdump": "0000000000000000 <_ZN7Program13remove_dir_fdEl>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 30          \tsub    $0x30,%rsp\n   b:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   f:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  13:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  17:\t48 8d 58 60          \tlea    0x60(%rax),%rbx\n  1b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  1f:\t48 83 c0 60          \tadd    $0x60,%rax\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZN7Program13remove_dir_fdEl+0x2b>\n  2b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  2f:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  33:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  37:\t48 89 d6             \tmov    %rdx,%rsi\n  3a:\t48 89 c7             \tmov    %rax,%rdi\n  3d:\te8 00 00 00 00       \tcallq  42 <_ZN7Program13remove_dir_fdEl+0x42>\n  42:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  46:\t48 83 c0 60          \tadd    $0x60,%rax\n  4a:\t48 89 c7             \tmov    %rax,%rdi\n  4d:\te8 00 00 00 00       \tcallq  52 <_ZN7Program13remove_dir_fdEl+0x52>\n  52:\t49 89 c4             \tmov    %rax,%r12\n  55:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  59:\t48 83 c0 60          \tadd    $0x60,%rax\n  5d:\t48 89 c7             \tmov    %rax,%rdi\n  60:\te8 00 00 00 00       \tcallq  65 <_ZN7Program13remove_dir_fdEl+0x65>\n  65:\t48 89 c1             \tmov    %rax,%rcx\n  68:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  6c:\t48 89 c2             \tmov    %rax,%rdx\n  6f:\t4c 89 e6             \tmov    %r12,%rsi\n  72:\t48 89 cf             \tmov    %rcx,%rdi\n  75:\te8 00 00 00 00       \tcallq  7a <_ZN7Program13remove_dir_fdEl+0x7a>\n  7a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  7e:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n  82:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  86:\t48 89 d6             \tmov    %rdx,%rsi\n  89:\t48 89 c7             \tmov    %rax,%rdi\n  8c:\te8 00 00 00 00       \tcallq  91 <_ZN7Program13remove_dir_fdEl+0x91>\n  91:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  95:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  99:\t48 89 c6             \tmov    %rax,%rsi\n  9c:\t48 89 df             \tmov    %rbx,%rdi\n  9f:\te8 00 00 00 00       \tcallq  a4 <_ZN7Program13remove_dir_fdEl+0xa4>\n  a4:\teb 08                \tjmp    ae <_ZN7Program13remove_dir_fdEl+0xae>\n  a6:\t48 89 c7             \tmov    %rax,%rdi\n  a9:\te8 00 00 00 00       \tcallq  ae <_ZN7Program13remove_dir_fdEl+0xae>\n  ae:\t48 83 c4 30          \tadd    $0x30,%rsp\n  b2:\t5b                   \tpop    %rbx\n  b3:\t41 5c                \tpop    %r12\n  b5:\t5d                   \tpop    %rbp\n  b6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Program remove_dir_fd(Program *this, __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  <span class=\"supfact\">v5</span>[Number] = (__int64)this;\n  <span class=\"supfact\">v5</span>[Number] = a2;\n  <span class=\"supfact\">v7</span> = std vector<long> end((char *)this + Number);\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v7</span>);\n  v2 = std vector<long> end((char *)this + Number);\n  v3 = std vector<long> begin((char *)this + Number);\n  <span class=\"supfact\">v9</span>[Number] =\n      std remove<__gnu_cxx __normal_iterator<long *, std vector<long>>, long>(\n          v3, v2, <span class=\"supfact\">v5</span>);\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">v8</span>, <span class=\"supfact\">v9</span>);\n  return std vector<long> erase((char *)this + Number, <span class=\"supfact\">v8</span>,\n                                <span class=\"supfact\">v6</span>);\n}", "code_t": "void __cdecl Program remove_dir_fd(Program *const this, int64_t fd_index) {\n  __int64 *v2;\n  std vector<long int> iterator v3;\n  int64_t <span class=\"supfact\">fd_indexa</span>;\n  Program *thisa;\n  __gnu_cxx __normal_iterator<long int const *, std vector<long int>>\n      <span class=\"supfact\">__last</span>;\n  __gnu_cxx __normal_iterator<long int *, std vector<long int>>\n      <span class=\"supfact\">__i</span>;\n  __gnu_cxx __normal_iterator<long int const *, std vector<long int>>\n      <span class=\"supfact\">__first</span>;\n  __gnu_cxx __normal_iterator<long int *, std vector<long int>>\n      <span class=\"supfact\">v9</span>;\n  thisa = this;\n  <span class=\"supfact\">fd_indexa</span> = fd_index;\n  <span class=\"supfact\">__i</span>._M_current =\n      std vector<long> end(&this->active_dir_fds)._M_current;\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">__last</span>, &<span class=\"supfact\">__i</span>);\n  v2 = std vector<long> end(&this->active_dir_fds)._M_current;\n  v3._M_current = std vector<long> begin(&this->active_dir_fds)._M_current;\n  <span class=\"supfact\">v9</span>._M_current =\n      std remove<__gnu_cxx __normal_iterator<long *, std vector<long>>, long>(\n          v3, (__gnu_cxx __normal_iterator<long int *, std vector<long int>>)v2,\n          &<span class=\"supfact\">fd_indexa</span>)\n          ._M_current;\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">__first</span>, &<span class=\"supfact\">v9</span>);\n  std vector<long> erase(&this->active_dir_fds, <span class=\"supfact\">__first</span>,\n                         <span class=\"supfact\">__last</span>);\n}", "var": [{"name": "v9", "type": "__int64[3]", "ref_name": "v9", "ref_type": "struct __gnu_cxx::__normal_iterator<long int*,std::vector<long int> > { __int64 * _M_current; }"}, {"name": "v8", "type": "__int64", "ref_name": "__first", "ref_type": "struct __gnu_cxx::__normal_iterator<long int const*,std::vector<long int> > { const __int64 * _M_current; }"}, {"name": "v7", "type": "__int64", "ref_name": "__i", "ref_type": "struct __gnu_cxx::__normal_iterator<long int*,std::vector<long int> > { __int64 * _M_current; }"}, {"name": "v6", "type": "__int64", "ref_name": "__last", "ref_type": "struct __gnu_cxx::__normal_iterator<long int const*,std::vector<long int> > { const __int64 * _M_current; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "000000000000151a <_nocheck__trace_megasas_handle_scsi>:\n    151a:\t55                   \tpush   %rbp\n    151b:\t48 89 e5             \tmov    %rsp,%rbp\n    151e:\t41 54                \tpush   %r12\n    1520:\t53                   \tpush   %rbx\n    1521:\t48 83 ec 50          \tsub    $0x50,%rsp\n    1525:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1529:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    152c:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n    152f:\t89 4d bc             \tmov    %ecx,-0x44(%rbp)\n    1532:\t4c 89 45 b0          \tmov    %r8,-0x50(%rbp)\n    1536:\t4c 89 4d a8          \tmov    %r9,-0x58(%rbp)\n    153a:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1541:\t00 00 \n    1543:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1547:\t31 c0                \txor    %eax,%eax\n    1549:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 154f <_nocheck__trace_megasas_handle_scsi+0x35>\n    154f:\t85 c0                \ttest   %eax,%eax\n    1551:\t0f 95 c0             \tsetne  %al\n    1554:\t0f b6 c0             \tmovzbl %al,%eax\n    1557:\t48 85 c0             \ttest   %rax,%rax\n    155a:\t74 76                \tje     15d2 <_nocheck__trace_megasas_handle_scsi+0xb8>\n    155c:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 1563 <_nocheck__trace_megasas_handle_scsi+0x49>\n    1563:\t66 85 c0             \ttest   %ax,%ax\n    1566:\t74 6a                \tje     15d2 <_nocheck__trace_megasas_handle_scsi+0xb8>\n    1568:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    156d:\te8 bb f2 ff ff       \tcallq  82d <qemu_loglevel_mask>\n    1572:\t84 c0                \ttest   %al,%al\n    1574:\t74 5c                \tje     15d2 <_nocheck__trace_megasas_handle_scsi+0xb8>\n    1576:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    157a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    157f:\t48 89 c7             \tmov    %rax,%rdi\n    1582:\te8 00 00 00 00       \tcallq  1587 <_nocheck__trace_megasas_handle_scsi+0x6d>\n    1587:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    158b:\t49 89 c4             \tmov    %rax,%r12\n    158e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1592:\t48 89 c3             \tmov    %rax,%rbx\n    1595:\te8 00 00 00 00       \tcallq  159a <_nocheck__trace_megasas_handle_scsi+0x80>\n    159a:\t89 c6                \tmov    %eax,%esi\n    159c:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n    159f:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    15a3:\tff 75 a8             \tpushq  -0x58(%rbp)\n    15a6:\tff 75 b0             \tpushq  -0x50(%rbp)\n    15a9:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    15ac:\t50                   \tpush   %rax\n    15ad:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    15b0:\t50                   \tpush   %rax\n    15b1:\t41 89 c9             \tmov    %ecx,%r9d\n    15b4:\t49 89 d0             \tmov    %rdx,%r8\n    15b7:\t4c 89 e1             \tmov    %r12,%rcx\n    15ba:\t48 89 da             \tmov    %rbx,%rdx\n    15bd:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 15c4 <_nocheck__trace_megasas_handle_scsi+0xaa>\n    15c4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    15c9:\te8 00 00 00 00       \tcallq  15ce <_nocheck__trace_megasas_handle_scsi+0xb4>\n    15ce:\t48 83 c4 20          \tadd    $0x20,%rsp\n    15d2:\t90                   \tnop\n    15d3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    15d7:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    15de:\t00 00 \n    15e0:\t74 05                \tje     15e7 <_nocheck__trace_megasas_handle_scsi+0xcd>\n    15e2:\te8 00 00 00 00       \tcallq  15e7 <_nocheck__trace_megasas_handle_scsi+0xcd>\n    15e7:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n    15eb:\t5b                   \tpop    %rbx\n    15ec:\t41 5c                \tpop    %r12\n    15ee:\t5d                   \tpop    %rbp\n    15ef:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_handle_scsi(\n    const char *a1, unsigned int a2, unsigned int a3, unsigned int a4,\n    const void *a5, __int64 a6) {\n  __suseconds_t v6;\n  __time_t v7;\n  unsigned int v8;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v15</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_HANDLE_SCSI_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v6 = <span class=\"supfact\">tv</span>.tv_usec;\n    v7 = <span class=\"supfact\">tv</span>.tv_sec;\n    v8 = qemu_get_thread_id();\n    qemu_log(String, v8, v7, v6, a1, a2, a3, a4, a5, a6);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v15</span>;\n}", "code_t": "void __cdecl nocheck__trace_megasas_handle_scsi(const char *frame, int bus,\n                                                int dev, int lun, void *sdev,\n                                                unsigned __int64 size) {\n  __suseconds_t v6;\n  __time_t v7;\n  unsigned int v8;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v14</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_HANDLE_SCSI_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v6 = <span class=\"supfact\">_now</span>.tv_usec;\n    v7 = <span class=\"supfact\">_now</span>.tv_sec;\n    v8 = qemu_get_thread_id();\n    qemu_log(String, v8, v7, v6, frame, (unsigned int)bus, (unsigned int)dev,\n             (unsigned int)lun, sdev, size);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/a6c0476d37fab0a2016b706bb595a9db57bad22bae2083133c2d1eeb6cb12f1c", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_events_584896b4.o", "objdump": "", "code_s": "unsigned int juce LeakedObjectDetector<\n    juce ChildProcessMaster Connection> ~LeakedObjectDetector() {\n  volatile signed __int32 *v0;\n  unsigned int result;\n  __int64 v2;\n  const juce String *v3;\n  int v4;\n  char <span class=\"supfact\">v5</span>[Number];\n  v0 = (volatile signed __int32 *)\n      juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n      getCounter();\n  result = (unsigned int)juce Atomic<int> operator--(v0) >> Number;\n  if ((_BYTE)result) {\n    juce String String((juce String *)<span class=\"supfact\">v5</span>);\n    v2 = juce operator<<(<span class=\"supfact\">v5</span>, String);\n    v3 = (const juce String *)\n        juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n        getLeakedObjectClassName();\n    juce operator<<(v2, v3);\n    juce Logger outputDebugString((juce Logger *)<span class=\"supfact\">v5</span>, v3);\n    juce String ~String((juce String *)<span class=\"supfact\">v5</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_46 + Number, v4);\n    result = juce juce_isRunningUnderDebugger((juce *)String);\n    if ((_BYTE)result)\n      result = kill(Number, Number);\n  }\n  return result;\n}", "code_t": "void __cdecl juce LeakedObjectDetector<\n    juce ChildProcessMaster\n        Connection> ~LeakedObjectDetector(juce\n                                              LeakedObjectDetector<\n                                                  juce ChildProcessMaster\n                                                      Connection> *const this) {\n  juce LeakedObjectDetector<juce ChildProcessMaster Connection> LeakCounter *v1;\n  __int64 v2;\n  const char *v3;\n  int v4;\n  juce String <span class=\"supfact\">tempDbgBuf</span>;\n  v1 = juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n  getCounter();\n  if (juce Atomic<int> operator--(&v1->numObjects) < Number) {\n    juce String String(&<span class=\"supfact\">tempDbgBuf</span>);\n    v2 = juce operator<<(&<span class=\"supfact\">tempDbgBuf</span>, String);\n    v3 = juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n    getLeakedObjectClassName();\n    juce operator<<(v2, v3);\n    juce Logger outputDebugString((juce Logger *)&<span class=\"supfact\">tempDbgBuf</span>,\n                                  (const juce String *)v3);\n    juce String ~String(&<span class=\"supfact\">tempDbgBuf</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_46 + Number, v4);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n}", "var": [{"name": "v5", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "tempDbgBuf", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/5631eb03036580eed21c2bb869de67c5abe12626d32354cf1559c3a570587379", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/mw8080bw.o", "objdump": "0000000000006f05 <_ZL33construct_machine_config_checkmatR14machine_configP8device_t>:\n    6f05:\t55                   \tpush   %rbp\n    6f06:\t48 89 e5             \tmov    %rsp,%rbp\n    6f09:\t53                   \tpush   %rbx\n    6f0a:\t48 83 ec 68          \tsub    $0x68,%rsp\n    6f0e:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    6f12:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n    6f16:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    6f1d:\t00 \n    6f1e:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    6f22:\t48 89 c7             \tmov    %rax,%rdi\n    6f25:\te8 00 00 00 00       \tcallq  6f2a <_ZL33construct_machine_config_checkmatR14machine_configP8device_t+0x25>\n    6f2a:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    6f2e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    6f32:\t48 89 d6             \tmov    %rdx,%rsi\n    6f35:\t48 89 c7             \tmov    %rax,%rdi\n    6f38:\te8 00 00 00 00       \tcallq  6f3d <_ZL33construct_machine_config_checkmatR14machine_configP8device_t+0x38>\n    6f3d:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n    6f41:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n    6f45:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    6f49:\tba 00 00 00 00       \tmov    $0x0,%edx\n    6f4e:\t48 89 ce             \tmov    %rcx,%rsi\n    6f51:\t48 89 c7             \tmov    %rax,%rdi\n    6f54:\te8 00 00 00 00       \tcallq  6f59 <_ZL33construct_machine_config_checkmatR14machine_configP8device_t+0x54>\n    6f59:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    6f5d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    6f61:\tba 00 00 00 00       \tmov    $0x0,%edx\n    6f66:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    6f6b:\t48 89 c7             \tmov    %rax,%rdi\n    6f6e:\te8 00 00 00 00       \tcallq  6f73 <_ZL33construct_machine_config_checkmatR14machine_configP8device_t+0x6e>\n    6f73:\t48 8b 5d 98          \tmov    -0x68(%rbp),%rbx\n    6f77:\tbf 7f 9a 06 b1       \tmov    $0xb1069a7f,%edi\n    6f7c:\te8 00 00 00 00       \tcallq  6f81 <_ZL33construct_machine_config_checkmatR14machine_configP8device_t+0x7c>\n    6f81:\t89 c1                \tmov    %eax,%ecx\n    6f83:\t48 89 d0             \tmov    %rdx,%rax\n    6f86:\t89 4b 20             \tmov    %ecx,0x20(%rbx)\n    6f89:\t48 89 43 28          \tmov    %rax,0x28(%rbx)\n    6f8d:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    6f91:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    6f95:\t48 89 d6             \tmov    %rdx,%rsi\n    6f98:\t48 89 c7             \tmov    %rax,%rdi\n    6f9b:\te8 00 00 00 00       \tcallq  6fa0 <_ZL33construct_machine_config_checkmatR14machine_configP8device_t+0x9b>\n    6fa0:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n    6fa4:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    6fa8:\t48 89 c7             \tmov    %rax,%rdi\n    6fab:\te8 00 00 00 00       \tcallq  6fb0 <_ZL33construct_machine_config_checkmatR14machine_configP8device_t+0xab>\n    6fb0:\t48 89 d8             \tmov    %rbx,%rax\n    6fb3:\teb 1a                \tjmp    6fcf <_ZL33construct_machine_config_checkmatR14machine_configP8device_t+0xca>\n    6fb5:\t48 89 c3             \tmov    %rax,%rbx\n    6fb8:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    6fbc:\t48 89 c7             \tmov    %rax,%rdi\n    6fbf:\te8 00 00 00 00       \tcallq  6fc4 <_ZL33construct_machine_config_checkmatR14machine_configP8device_t+0xbf>\n    6fc4:\t48 89 d8             \tmov    %rbx,%rax\n    6fc7:\t48 89 c7             \tmov    %rax,%rdi\n    6fca:\te8 00 00 00 00       \tcallq  6fcf <_ZL33construct_machine_config_checkmatR14machine_configP8device_t+0xca>\n    6fcf:\t48 83 c4 68          \tadd    $0x68,%rsp\n    6fd3:\t5b                   \tpop    %rbx\n    6fd4:\t5d                   \tpop    %rbp\n    6fd5:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_checkmat(machine_config *a1,\n                                                       device_t *a2) {\n  __int64 v2;\n  device_t *<span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = Number L;\n  astring astring((astring *)<span class=\"supfact\">v5</span>);\n  <span class=\"supfact\">v4</span> = construct_machine_config_mw8080bw_root(a1, a2);\n  <span class=\"supfact\">v6</span> =\n      machine_config device_find(a1, <span class=\"supfact\">v4</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">v6</span>, Number L, construct_address_map_checkmat_io_map);\n  *((_DWORD *)a1 + Number) = attotime from_nsec((attotime *)Number, Number L);\n  *((_QWORD *)a1 + Number) = v2;\n  construct_machine_config_checkmat_audio(a1, <span class=\"supfact\">v4</span>);\n  astring ~astring((astring *)<span class=\"supfact\">v5</span>);\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "device_t *__cdecl construct_machine_config_checkmat(machine_config *config,\n                                                    device_t *owner) {\n  void(__fastcall * v2)(address_map *, const device_t *);\n  attotime v3;\n  device_t *<span class=\"supfact\">ownera</span>;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *<span class=\"supfact\">device</span>;\n  <span class=\"supfact\">device</span> = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  <span class=\"supfact\">ownera</span> =\n      construct_machine_config_mw8080bw_root(config, owner);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, (device_t *)((char *)&loc_1 + Number),\n      (address_spacenum)construct_address_map_checkmat_io_map, v2);\n  v3 = attotime from_nsec(Number L);\n  config->m_watchdog_time.seconds = v3.seconds;\n  config->m_watchdog_time.attoseconds = v3.attoseconds;\n  construct_machine_config_checkmat_audio(config, <span class=\"supfact\">ownera</span>);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return <span class=\"supfact\">ownera</span>;\n}", "var": [{"name": "v5", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "gbarsever", "repo_name": "in-progress-perp", "path": "gbarsever/in-progress-perp/d762a916db4a0400f89015c69f71459794febf16b03bb0755f37b59c35e0aeea", "path_in_repo": "gbarsever/in-progress-perp/bhmmi-code/bhmmi-master/gsl-1.16/specfunc/legendre_poly.o", "objdump": "0000000000002c7a <gsl_sf_legendre_Pl>:\n    2c7a:\t55                   \tpush   %rbp\n    2c7b:\t48 89 e5             \tmov    %rsp,%rbp\n    2c7e:\t48 83 ec 30          \tsub    $0x30,%rsp\n    2c82:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n    2c85:\tf2 0f 11 45 d0       \tmovsd  %xmm0,-0x30(%rbp)\n    2c8a:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n    2c8e:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    2c92:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    2c95:\t48 89 ce             \tmov    %rcx,%rsi\n    2c98:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n    2c9d:\t89 c7                \tmov    %eax,%edi\n    2c9f:\te8 00 00 00 00       \tcallq  2ca4 <gsl_sf_legendre_Pl+0x2a>\n    2ca4:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    2ca7:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    2cab:\t74 20                \tje     2ccd <gsl_sf_legendre_Pl+0x53>\n    2cad:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    2cb0:\t89 c1                \tmov    %eax,%ecx\n    2cb2:\tba ff 02 00 00       \tmov    $0x2ff,%edx\n    2cb7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2cbc:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2cc1:\te8 00 00 00 00       \tcallq  2cc6 <gsl_sf_legendre_Pl+0x4c>\n    2cc6:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n    2ccb:\teb 05                \tjmp    2cd2 <gsl_sf_legendre_Pl+0x58>\n    2ccd:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n    2cd2:\tc9                   \tleaveq \n    2cd3:\tc3                   \tretq   ", "code_s": "double __fastcall gsl_sf_legendre_Pl(int a1, double a2) {\n  double <span class=\"supfact\">v3</span>[Number];\n  unsigned int <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> =\n      gsl_sf_legendre_Pl_e(a1, (__int64)<span class=\"supfact\">v3</span>, a2);\n  if (<span class=\"supfact\">v4</span>)\n    gsl_error(String, String, Number L, <span class=\"supfact\">v4</span>);\n  return <span class=\"supfact\">v3</span>[Number];\n}", "code_t": "double __cdecl gsl_sf_legendre_Pl(const int l, const double x) {\n  gsl_sf_result <span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">status</span>;\n  <span class=\"supfact\">status</span> = gsl_sf_legendre_Pl_e(l, x, &<span class=\"supfact\">result</span>);\n  if (<span class=\"supfact\">status</span>)\n    gsl_error(String, String, Number L, (unsigned int)<span class=\"supfact\">status</span>);\n  return <span class=\"supfact\">result</span>.val;\n}", "var": [{"name": "v3", "type": "struct gsl_sf_result { double val; double err; }", "ref_name": "result", "ref_type": "struct gsl_sf_result { double val; double err; }"}], "body_in_train": false}, {"repo_owner": "romankap", "repo_name": "Using-dlib", "path": "romankap/Using-dlib/3a2246d1f9dcfe4bd2b2510d725749a069338bfe3e7e84cdb6bbee13e1278bba", "path_in_repo": "romankap/Using-dlib/Lot_w_dlib/dlib-18.10/dlib/test/queue.o", "objdump": "000000000000c9a6 <_ZN4dlib12queue_sort_1INS_14queue_kernel_cINS_14queue_kernel_2IiLm20ENS_30memory_manager_global_kernel_1IcN12_GLOBAL__N_17factoryEEEEEEEE4sortEv>:\n    c9a6:\t55                   \tpush   %rbp\n    c9a7:\t48 89 e5             \tmov    %rsp,%rbp\n    c9aa:\t48 83 ec 20          \tsub    $0x20,%rsp\n    c9ae:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    c9b2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    c9b6:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    c9ba:\t48 8b 12             \tmov    (%rdx),%rdx\n    c9bd:\t48 83 c2 40          \tadd    $0x40,%rdx\n    c9c1:\t48 8b 12             \tmov    (%rdx),%rdx\n    c9c4:\t48 89 c7             \tmov    %rax,%rdi\n    c9c7:\tff d2                \tcallq  *%rdx\n    c9c9:\t48 83 f8 01          \tcmp    $0x1,%rax\n    c9cd:\t0f 97 c0             \tseta   %al\n    c9d0:\t84 c0                \ttest   %al,%al\n    c9d2:\t74 1c                \tje     c9f0 <_ZN4dlib12queue_sort_1INS_14queue_kernel_cINS_14queue_kernel_2IiLm20ENS_30memory_manager_global_kernel_1IcN12_GLOBAL__N_17factoryEEEEEEEE4sortEv+0x4a>\n    c9d4:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    c9d8:\t48 8d 55 ff          \tlea    -0x1(%rbp),%rdx\n    c9dc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    c9e0:\t48 89 d1             \tmov    %rdx,%rcx\n    c9e3:\tba 00 00 00 00       \tmov    $0x0,%edx\n    c9e8:\t48 89 c7             \tmov    %rax,%rdi\n    c9eb:\te8 98 28 00 00       \tcallq  f288 <_ZN4dlib12queue_sort_1INS_14queue_kernel_cINS_14queue_kernel_2IiLm20ENS_30memory_manager_global_kernel_1IcN12_GLOBAL__N_17factoryEEEEEEEE15sort_this_queueISt4lessIiEEEvRS8_lRKT_>\n    c9f0:\t90                   \tnop\n    c9f1:\tc9                   \tleaveq \n    c9f2:\tc3                   \tretq   \n    c9f3:\t90                   \tnop", "code_s": "char __fastcall dlib queue_sort_1<dlib queue_kernel_c<dlib queue_kernel_2<\n    int, Number,\n    dlib memory_manager_global_kernel_1<\n        char, ` anonymous namespace ' factory >> >> sort ( __int64 a1 ) { char result ; char <span class=\"supfact\">v2</span> ; result = ( unsigned __int64 ) ( * ( __int64 ( __fastcall * * ) ( __int64 ) ) ( * ( _QWORD * ) a1 + Number L ) ) ( a1 ) > Number ; if ( result ) result = dlib queue_sort_1 < dlib queue_kernel_c < dlib queue_kernel_2 < int , Number , dlib memory_manager_global_kernel_1 < char , ` anonymous namespace ' factory>>>>\nsort_this_queue<std less<int>>(a1, a1, Number L, &<span class=\"supfact\">v2</span>);\nreturn result;\n}", "code_t": "void __cdecl dlib\n    queue_sort_1<\n        dlib queue_kernel_c<\n            dlib\n                queue_kernel_2<int, Number,\n                               dlib\n                                   memory_manager_global_kernel_1<char, ` anonymous namespace ' factory >> >> sort ( dlib queue_sort_1 < dlib queue_kernel_c < dlib queue_kernel_2 < int , Number , dlib memory_manager_global_kernel_1 < char , ( anonymous namespace ) factory > > > > * const this ) { std less < int > <span class=\"supfact\">compare</span> ; if ( ( unsigned __int64 ) ( * ( ( __int64 ( __fastcall * * ) ( dlib queue_sort_1 < dlib queue_kernel_c < dlib queue_kernel_2 < int , Number , dlib memory_manager_global_kernel_1 < char , ( anonymous namespace ) factory > > > > * const ) ) this -> _vptr_enumerable + Number ) ) ( this ) > Number ) dlib queue_sort_1 < dlib queue_kernel_c < dlib queue_kernel_2 < int , Number , dlib memory_manager_global_kernel_1 < char , ` anonymous namespace ' factory>>>>\n    sort_this_queue<std less<int>>(this, this, Number L,\n                                   &<span class=\"supfact\">compare</span>);\n}", "var": [{"name": "v2", "type": "char", "ref_name": "compare", "ref_type": "struct std::less<int> { std::binary_function<int,int,bool> baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "threeearcat", "repo_name": "repro-guest", "path": "threeearcat/repro-guest/aea8740642b09c40d0a4e6f62417e2d65ee554e88b3fcba3e265142c2d651e8a", "path_in_repo": "threeearcat/repro-guest/tools/testing/selftests/x86/test_vsyscall_64", "objdump": "00000000004017e0 <test_gtod>:\n  4017e0:\t55                   \tpush   %rbp\n  4017e1:\t48 89 e5             \tmov    %rsp,%rbp\n  4017e4:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n  4017e8:\t48 c7 45 f8 ff ff ff \tmovq   $0xffffffffffffffff,-0x8(%rbp)\n  4017ef:\tff \n  4017f0:\t48 c7 45 f0 ff ff ff \tmovq   $0xffffffffffffffff,-0x10(%rbp)\n  4017f7:\tff \n  4017f8:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  4017ff:\tbf fb 32 40 00       \tmov    $0x4032fb,%edi\n  401804:\te8 37 f8 ff ff       \tcallq  401040 <puts@plt>\n  401809:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n  40180d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  401811:\t48 89 d6             \tmov    %rdx,%rsi\n  401814:\t48 89 c7             \tmov    %rax,%rdi\n  401817:\te8 9c fd ff ff       \tcallq  4015b8 <sys_gtod>\n  40181c:\t48 85 c0             \ttest   %rax,%rax\n  40181f:\t74 14                \tje     401835 <test_gtod+0x55>\n  401821:\tbe 15 33 40 00       \tmov    $0x403315,%esi\n  401826:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40182b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401830:\te8 fb f8 ff ff       \tcallq  401130 <err@plt>\n  401835:\t48 8b 05 c4 49 00 00 \tmov    0x49c4(%rip),%rax        # 406200 <vdso_gtod>\n  40183c:\t48 85 c0             \ttest   %rax,%rax\n  40183f:\t74 1b                \tje     40185c <test_gtod+0x7c>\n  401841:\t48 8b 0d b8 49 00 00 \tmov    0x49b8(%rip),%rcx        # 406200 <vdso_gtod>\n  401848:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n  40184c:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  401850:\t48 89 d6             \tmov    %rdx,%rsi\n  401853:\t48 89 c7             \tmov    %rax,%rdi\n  401856:\tff d1                \tcallq  *%rcx\n  401858:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40185c:\t0f b6 05 9e 48 00 00 \tmovzbl 0x489e(%rip),%eax        # 406101 <vsyscall_map_x>\n  401863:\t84 c0                \ttest   %al,%al\n  401865:\t74 1b                \tje     401882 <test_gtod+0xa2>\n  401867:\t48 c7 c1 00 00 60 ff \tmov    $0xffffffffff600000,%rcx\n  40186e:\t48 8d 55 88          \tlea    -0x78(%rbp),%rdx\n  401872:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  401876:\t48 89 d6             \tmov    %rdx,%rsi\n  401879:\t48 89 c7             \tmov    %rax,%rdi\n  40187c:\tff d1                \tcallq  *%rcx\n  40187e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401882:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n  401886:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40188a:\t48 89 d6             \tmov    %rdx,%rsi\n  40188d:\t48 89 c7             \tmov    %rax,%rdi\n  401890:\te8 23 fd ff ff       \tcallq  4015b8 <sys_gtod>\n  401895:\t48 85 c0             \ttest   %rax,%rax\n  401898:\t74 14                \tje     4018ae <test_gtod+0xce>\n  40189a:\tbe 15 33 40 00       \tmov    $0x403315,%esi\n  40189f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4018a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4018a9:\te8 82 f8 ff ff       \tcallq  401130 <err@plt>\n  4018ae:\t48 8b 05 4b 49 00 00 \tmov    0x494b(%rip),%rax        # 406200 <vdso_gtod>\n  4018b5:\t48 85 c0             \ttest   %rax,%rax\n  4018b8:\t74 4d                \tje     401907 <test_gtod+0x127>\n  4018ba:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  4018bf:\t75 2c                \tjne    4018ed <test_gtod+0x10d>\n  4018c1:\t48 8d 7d 90          \tlea    -0x70(%rbp),%rdi\n  4018c5:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n  4018c9:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n  4018cd:\t48 8d 75 c0          \tlea    -0x40(%rbp),%rsi\n  4018d1:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4018d5:\t49 89 f9             \tmov    %rdi,%r9\n  4018d8:\t49 89 c8             \tmov    %rcx,%r8\n  4018db:\tb9 2a 33 40 00       \tmov    $0x40332a,%ecx\n  4018e0:\t48 89 c7             \tmov    %rax,%rdi\n  4018e3:\te8 e1 fd ff ff       \tcallq  4016c9 <check_gtod>\n  4018e8:\t01 45 ec             \tadd    %eax,-0x14(%rbp)\n  4018eb:\teb 1a                \tjmp    401907 <test_gtod+0x127>\n  4018ed:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4018f1:\t48 89 c6             \tmov    %rax,%rsi\n  4018f4:\tbf 30 33 40 00       \tmov    $0x403330,%edi\n  4018f9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4018fe:\te8 7d f7 ff ff       \tcallq  401080 <printf@plt>\n  401903:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  401907:\t0f b6 05 f3 47 00 00 \tmovzbl 0x47f3(%rip),%eax        # 406101 <vsyscall_map_x>\n  40190e:\t84 c0                \ttest   %al,%al\n  401910:\t74 4d                \tje     40195f <test_gtod+0x17f>\n  401912:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  401917:\t75 2c                \tjne    401945 <test_gtod+0x165>\n  401919:\t48 8d 7d 88          \tlea    -0x78(%rbp),%rdi\n  40191d:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n  401921:\t48 8d 55 98          \tlea    -0x68(%rbp),%rdx\n  401925:\t48 8d 75 c0          \tlea    -0x40(%rbp),%rsi\n  401929:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  40192d:\t49 89 f9             \tmov    %rdi,%r9\n  401930:\t49 89 c8             \tmov    %rcx,%r8\n  401933:\tb9 58 33 40 00       \tmov    $0x403358,%ecx\n  401938:\t48 89 c7             \tmov    %rax,%rdi\n  40193b:\te8 89 fd ff ff       \tcallq  4016c9 <check_gtod>\n  401940:\t01 45 ec             \tadd    %eax,-0x14(%rbp)\n  401943:\teb 1a                \tjmp    40195f <test_gtod+0x17f>\n  401945:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401949:\t48 89 c6             \tmov    %rax,%rsi\n  40194c:\tbf 68 33 40 00       \tmov    $0x403368,%edi\n  401951:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401956:\te8 25 f7 ff ff       \tcallq  401080 <printf@plt>\n  40195b:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  40195f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  401962:\tc9                   \tleaveq \n  401963:\tc3                   \tretq   ", "code_s": "__int64 test_gtod() {\n  int v0;\n  int v1;\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  _QWORD <span class=\"supfact\">v6</span>[Number];\n  _QWORD <span class=\"supfact\">v7</span>[Number];\n  _QWORD <span class=\"supfact\">v8</span>[Number];\n  _QWORD <span class=\"supfact\">v9</span>[Number];\n  unsigned int <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = Number;\n  <span class=\"supfact\">v11</span> = Number;\n  <span class=\"supfact\">v10</span> = Number;\n  puts(String);\n  if (sys_gtod((__int64)<span class=\"supfact\">v9</span>, (__int64)&<span class=\"supfact\">v5</span>))\n    err(Number, String);\n  if (vdso_gtod)\n    <span class=\"supfact\">v12</span> = vdso_gtod(<span class=\"supfact\">v7</span>, &<span class=\"supfact\">v4</span>);\n  if (vsyscall_map_x)\n    <span class=\"supfact\">v11</span> =\n        MEMORY[Number](<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v3</span>);\n  if (sys_gtod((__int64)<span class=\"supfact\">v8</span>, (__int64)&<span class=\"supfact\">v5</span>))\n    err(Number, String);\n  if (vdso_gtod) {\n    if (<span class=\"supfact\">v12</span>) {\n      printf(String, <span class=\"supfact\">v12</span>);\n      ++<span class=\"supfact\">v10</span>;\n    } else {\n      v0 = check_gtod(<span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>,\n                      &<span class=\"supfact\">v5</span>, String, <span class=\"supfact\">v7</span>,\n                      &<span class=\"supfact\">v4</span>);\n      <span class=\"supfact\">v10</span> += v0;\n    }\n  }\n  if (vsyscall_map_x) {\n    if (<span class=\"supfact\">v11</span>) {\n      printf(String, <span class=\"supfact\">v11</span>);\n      ++<span class=\"supfact\">v10</span>;\n    } else {\n      v1 = check_gtod(<span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>,\n                      &<span class=\"supfact\">v5</span>, String, <span class=\"supfact\">v6</span>,\n                      &<span class=\"supfact\">v3</span>);\n      <span class=\"supfact\">v10</span> += v1;\n    }\n  }\n  return <span class=\"supfact\">v10</span>;\n}", "code_t": "int __cdecl test_gtod() {\n  int v0;\n  int v1;\n  timezone <span class=\"supfact\">tz_vsys</span>;\n  timezone <span class=\"supfact\">tz_vdso</span>;\n  timezone <span class=\"supfact\">tz_sys</span>;\n  timeval <span class=\"supfact\">tv_vsys</span>;\n  timeval <span class=\"supfact\">tv_vdso</span>;\n  timeval <span class=\"supfact\">tv_sys2</span>;\n  timeval <span class=\"supfact\">tv_sys1</span>;\n  int <span class=\"supfact\">nerrs</span>;\n  __int64 <span class=\"supfact\">ret_vsys</span>;\n  __int64 <span class=\"supfact\">ret_vdso</span>;\n  <span class=\"supfact\">ret_vdso</span> = Number;\n  <span class=\"supfact\">ret_vsys</span> = Number;\n  <span class=\"supfact\">nerrs</span> = Number;\n  puts(String);\n  if (sys_gtod(&<span class=\"supfact\">tv_sys1</span>, &<span class=\"supfact\">tz_sys</span>))\n    err(Number, String);\n  if (vdso_gtod)\n    <span class=\"supfact\">ret_vdso</span> =\n        vdso_gtod(&<span class=\"supfact\">tv_vdso</span>, &<span class=\"supfact\">tz_vdso</span>);\n  if (vsyscall_map_x)\n    <span class=\"supfact\">ret_vsys</span> =\n        MEMORY[Number](&<span class=\"supfact\">tv_vsys</span>, &<span class=\"supfact\">tz_vsys</span>);\n  if (sys_gtod(&<span class=\"supfact\">tv_sys2</span>, &<span class=\"supfact\">tz_sys</span>))\n    err(Number, String);\n  if (vdso_gtod) {\n    if (<span class=\"supfact\">ret_vdso</span>) {\n      printf(String, <span class=\"supfact\">ret_vdso</span>);\n      ++<span class=\"supfact\">nerrs</span>;\n    } else {\n      v0 = check_gtod(&<span class=\"supfact\">tv_sys1</span>, &<span class=\"supfact\">tv_sys2</span>,\n                      &<span class=\"supfact\">tz_sys</span>, String, &<span class=\"supfact\">tv_vdso</span>,\n                      &<span class=\"supfact\">tz_vdso</span>);\n      <span class=\"supfact\">nerrs</span> += v0;\n    }\n  }\n  if (vsyscall_map_x) {\n    if (<span class=\"supfact\">ret_vsys</span>) {\n      printf(String, <span class=\"supfact\">ret_vsys</span>);\n      ++<span class=\"supfact\">nerrs</span>;\n    } else {\n      v1 = check_gtod(&<span class=\"supfact\">tv_sys1</span>, &<span class=\"supfact\">tv_sys2</span>,\n                      &<span class=\"supfact\">tz_sys</span>, String, &<span class=\"supfact\">tv_vsys</span>,\n                      &<span class=\"supfact\">tz_vsys</span>);\n      <span class=\"supfact\">nerrs</span> += v1;\n    }\n  }\n  return <span class=\"supfact\">nerrs</span>;\n}", "var": [{"name": "v9", "type": "__va_list_tag[1]", "ref_name": "tv_sys1", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v8", "type": "char[16]", "ref_name": "tv_sys2", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v7", "type": "char[16]", "ref_name": "tv_vdso", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v6", "type": "char[16]", "ref_name": "tv_vsys", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v5", "type": "int", "ref_name": "tz_sys", "ref_type": "struct timezone { int tz_minuteswest; int tz_dsttime; }"}, {"name": "v4", "type": "int", "ref_name": "tz_vdso", "ref_type": "struct timezone { int tz_minuteswest; int tz_dsttime; }"}, {"name": "v3", "type": "int", "ref_name": "tz_vsys", "ref_type": "struct timezone { int tz_minuteswest; int tz_dsttime; }"}], "body_in_train": false}, {"repo_owner": "kaija", "repo_name": "bee", "path": "kaija/bee/cdddfc9ffe0feab1f6002d54c1260d840906a5465541b671a6aa841ac6ac07bc", "path_in_repo": "kaija/bee//third_party/lssdp.o", "objdump": "000000000000021c <lssdp_request_service>:\n     21c:\t55                   \tpush   %rbp\n     21d:\t48 89 e5             \tmov    %rsp,%rbp\n     220:\t53                   \tpush   %rbx\n     221:\t48 81 ec 38 02 00 00 \tsub    $0x238,%rsp\n     228:\t48 89 bd c8 fd ff ff \tmov    %rdi,-0x238(%rbp)\n     22f:\tc7 45 ec 10 00 00 00 \tmovl   $0x10,-0x14(%rbp)\n     236:\tba 11 00 00 00       \tmov    $0x11,%edx\n     23b:\tbe 02 00 00 00       \tmov    $0x2,%esi\n     240:\tbf 02 00 00 00       \tmov    $0x2,%edi\n     245:\te8 00 00 00 00       \tcallq  24a <lssdp_request_service+0x2e>\n     24a:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n     24d:\t83 7d e8 ff          \tcmpl   $0xffffffff,-0x18(%rbp)\n     251:\t75 33                \tjne    286 <lssdp_request_service+0x6a>\n     253:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 25a <lssdp_request_service+0x3e>\n     25a:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 261 <lssdp_request_service+0x45>\n     261:\tba 52 00 00 00       \tmov    $0x52,%edx\n     266:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 26d <lssdp_request_service+0x51>\n     26d:\tbf 03 00 00 00       \tmov    $0x3,%edi\n     272:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     277:\te8 00 00 00 00       \tcallq  27c <lssdp_request_service+0x60>\n     27c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     281:\te9 0b 01 00 00       \tjmpq   391 <lssdp_request_service+0x175>\n     286:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     28a:\tba 10 00 00 00       \tmov    $0x10,%edx\n     28f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     294:\t48 89 c7             \tmov    %rax,%rdi\n     297:\te8 00 00 00 00       \tcallq  29c <lssdp_request_service+0x80>\n     29c:\t66 c7 45 d0 02 00    \tmovw   $0x2,-0x30(%rbp)\n     2a2:\tbf 6c 07 00 00       \tmov    $0x76c,%edi\n     2a7:\te8 00 00 00 00       \tcallq  2ac <lssdp_request_service+0x90>\n     2ac:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n     2b0:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     2b4:\t48 83 c0 04          \tadd    $0x4,%rax\n     2b8:\t48 89 c6             \tmov    %rax,%rsi\n     2bb:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 2c2 <lssdp_request_service+0xa6>\n     2c2:\te8 00 00 00 00       \tcallq  2c7 <lssdp_request_service+0xab>\n     2c7:\t85 c0                \ttest   %eax,%eax\n     2c9:\t75 29                \tjne    2f4 <lssdp_request_service+0xd8>\n     2cb:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 2d2 <lssdp_request_service+0xb6>\n     2d2:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 2d9 <lssdp_request_service+0xbd>\n     2d9:\tba 59 00 00 00       \tmov    $0x59,%edx\n     2de:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2e5 <lssdp_request_service+0xc9>\n     2e5:\tbf 03 00 00 00       \tmov    $0x3,%edi\n     2ea:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     2ef:\te8 00 00 00 00       \tcallq  2f4 <lssdp_request_service+0xd8>\n     2f4:\t48 8b 95 c8 fd ff ff \tmov    -0x238(%rbp),%rdx\n     2fb:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n     302:\t48 89 d1             \tmov    %rdx,%rcx\n     305:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 30c <lssdp_request_service+0xf0>\n     30c:\tbe 00 02 00 00       \tmov    $0x200,%esi\n     311:\t48 89 c7             \tmov    %rax,%rdi\n     314:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     319:\te8 00 00 00 00       \tcallq  31e <lssdp_request_service+0x102>\n     31e:\t8b 5d ec             \tmov    -0x14(%rbp),%ebx\n     321:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n     328:\t48 89 c7             \tmov    %rax,%rdi\n     32b:\te8 00 00 00 00       \tcallq  330 <lssdp_request_service+0x114>\n     330:\t48 89 c2             \tmov    %rax,%rdx\n     333:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n     337:\t48 8d b5 d0 fd ff ff \tlea    -0x230(%rbp),%rsi\n     33e:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     341:\t41 89 d9             \tmov    %ebx,%r9d\n     344:\t49 89 c8             \tmov    %rcx,%r8\n     347:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     34c:\t89 c7                \tmov    %eax,%edi\n     34e:\te8 00 00 00 00       \tcallq  353 <lssdp_request_service+0x137>\n     353:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n     357:\t75 29                \tjne    382 <lssdp_request_service+0x166>\n     359:\t4c 8d 05 00 00 00 00 \tlea    0x0(%rip),%r8        # 360 <lssdp_request_service+0x144>\n     360:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 367 <lssdp_request_service+0x14b>\n     367:\tba 65 00 00 00       \tmov    $0x65,%edx\n     36c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 373 <lssdp_request_service+0x157>\n     373:\tbf 03 00 00 00       \tmov    $0x3,%edi\n     378:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     37d:\te8 00 00 00 00       \tcallq  382 <lssdp_request_service+0x166>\n     382:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n     385:\t89 c7                \tmov    %eax,%edi\n     387:\te8 00 00 00 00       \tcallq  38c <lssdp_request_service+0x170>\n     38c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     391:\t48 81 c4 38 02 00 00 \tadd    $0x238,%rsp\n     398:\t5b                   \tpop    %rbx\n     399:\t5d                   \tpop    %rbp\n     39a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall lssdp_request_service(const char *a1) {\n  __int64 result;\n  socklen_t v2;\n  size_t v3;\n  char <span class=\"supfact\">buf</span>[Number];\n  struct sockaddr <span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">fd</span>;\n  socklen_t <span class=\"supfact\">addr_len</span>;\n  <span class=\"supfact\">addr_len</span> = Number;\n  <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n  if (<span class=\"supfact\">fd</span> == Number) {\n    plogger_print(Number L, String, Number L, String, String);\n    result = Number;\n  } else {\n    memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n    <span class=\"supfact\">s</span>.sa_family = Number;\n    *(_WORD *)<span class=\"supfact\">s</span>.sa_data = htons(Number);\n    if (!inet_aton(String,\n                   (struct in_addr *)&<span class=\"supfact\">s</span>.sa_data[Number]))\n      plogger_print(Number L, String, Number L, String, String);\n    snprintf(<span class=\"supfact\">buf</span>, Number, String, a1);\n    v2 = <span class=\"supfact\">addr_len</span>;\n    v3 = strlen(<span class=\"supfact\">buf</span>);\n    if (sendto(<span class=\"supfact\">fd</span>, <span class=\"supfact\">buf</span>, v3, Number,\n               &<span class=\"supfact\">s</span>, v2) == Number)\n      plogger_print(Number L, String, Number L, String, String);\n    close(<span class=\"supfact\">fd</span>);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl lssdp_request_service(char *service) {\n  int result;\n  int v2;\n  size_t v3;\n  char <span class=\"supfact\">req</span>[Number];\n  sockaddr_in <span class=\"supfact\">addr</span>;\n  int <span class=\"supfact\">sock</span>;\n  int <span class=\"supfact\">slen</span>;\n  <span class=\"supfact\">slen</span> = Number;\n  <span class=\"supfact\">sock</span> = socket(Number, Number, Number);\n  if (<span class=\"supfact\">sock</span> == Number) {\n    plogger_print(Number L, String, Number L, String, String);\n    result = Number;\n  } else {\n    memset(&<span class=\"supfact\">addr</span>, Number, sizeof(<span class=\"supfact\">addr</span>));\n    <span class=\"supfact\">addr</span>.sin_family = Number;\n    <span class=\"supfact\">addr</span>.sin_port = htons(Number);\n    if (!inet_aton(String, &<span class=\"supfact\">addr</span>.sin_addr))\n      plogger_print(Number L, String, Number L, String, String);\n    snprintf(<span class=\"supfact\">req</span>, Number, String, service);\n    v2 = <span class=\"supfact\">slen</span>;\n    v3 = strlen(<span class=\"supfact\">req</span>);\n    if (sendto(<span class=\"supfact\">sock</span>, <span class=\"supfact\">req</span>, v3, Number,\n               (const struct sockaddr *)&<span class=\"supfact\">addr</span>, v2) == Number)\n      plogger_print(Number L, String, Number L, String, String);\n    close(<span class=\"supfact\">sock</span>);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "s", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/0c220081571b31109458ad0af80da996db681a85a2e92ce9cf7314108079ece6", "path_in_repo": "AlexanderVangelov/pjsip//pjlib-util/bin/pjlib-util-test-x86_64-unknown-linux-gnu", "objdump": "000000000040a562 <srv_resolver_many_test>:\n  40a562:\t55                   \tpush   %rbp\n  40a563:\t48 89 e5             \tmov    %rsp,%rbp\n  40a566:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40a56a:\tbf 0a 61 43 00       \tmov    $0x43610a,%edi\n  40a56f:\te8 d3 5d 02 00       \tcallq  430347 <pj_str>\n  40a574:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40a578:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  40a57c:\tbf 4f 5c 43 00       \tmov    $0x435c4f,%edi\n  40a581:\te8 c1 5d 02 00       \tcallq  430347 <pj_str>\n  40a586:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  40a58a:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  40a58e:\te8 db 18 02 00       \tcallq  42be6e <pj_log_get_level>\n  40a593:\t83 f8 02             \tcmp    $0x2,%eax\n  40a596:\t7e 14                \tjle    40a5ac <srv_resolver_many_test+0x4a>\n  40a598:\tbe 10 61 43 00       \tmov    $0x436110,%esi\n  40a59d:\tbf 4c 51 43 00       \tmov    $0x43514c,%edi\n  40a5a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40a5a7:\te8 92 21 02 00       \tcallq  42c73e <pj_log_3>\n  40a5ac:\tc7 05 a2 c6 03 00 fe \tmovl   $0xfffffffe,0x3c6a2(%rip)        # 446c58 <g_server+0x18>\n  40a5b3:\tff ff ff \n  40a5b6:\t48 c7 05 cf c6 03 00 \tmovq   $0x40a012,0x3c6cf(%rip)        # 446c90 <g_server+0x50>\n  40a5bd:\t12 a0 40 00 \n  40a5c1:\tc7 05 ed c6 03 00 fe \tmovl   $0xfffffffe,0x3c6ed(%rip)        # 446cb8 <g_server+0x78>\n  40a5c8:\tff ff ff \n  40a5cb:\t48 c7 05 1a c7 03 00 \tmovq   $0x40a012,0x3c71a(%rip)        # 446cf0 <g_server+0xb0>\n  40a5d2:\t12 a0 40 00 \n  40a5d6:\tc7 05 b8 c6 03 00 00 \tmovl   $0x0,0x3c6b8(%rip)        # 446c98 <g_server+0x58>\n  40a5dd:\t00 00 00 \n  40a5e0:\tc7 05 0e c7 03 00 00 \tmovl   $0x0,0x3c70e(%rip)        # 446cf8 <g_server+0xb8>\n  40a5e7:\t00 00 00 \n  40a5ea:\t48 8b 0d 17 c7 03 00 \tmov    0x3c717(%rip),%rcx        # 446d08 <resolver>\n  40a5f1:\t48 8b 15 08 c7 03 00 \tmov    0x3c708(%rip),%rdx        # 446d00 <pool>\n  40a5f8:\t48 8d 75 d0          \tlea    -0x30(%rbp),%rsi\n  40a5fc:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40a600:\t48 83 ec 08          \tsub    $0x8,%rsp\n  40a604:\t6a 00                \tpushq  $0x0\n  40a606:\t68 66 a3 40 00       \tpushq  $0x40a366\n  40a60b:\t6a 00                \tpushq  $0x0\n  40a60d:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n  40a613:\t49 89 c8             \tmov    %rcx,%r8\n  40a616:\t48 89 d1             \tmov    %rdx,%rcx\n  40a619:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40a61e:\t48 89 c7             \tmov    %rax,%rdi\n  40a621:\te8 f8 2a 01 00       \tcallq  41d11e <pj_dns_srv_resolve>\n  40a626:\t48 83 c4 20          \tadd    $0x20,%rsp\n  40a62a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40a62d:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  40a631:\t74 19                \tje     40a64c <srv_resolver_many_test+0xea>\n  40a633:\tb9 d0 62 43 00       \tmov    $0x4362d0,%ecx\n  40a638:\tba 2f 07 00 00       \tmov    $0x72f,%edx\n  40a63d:\tbe b0 50 43 00       \tmov    $0x4350b0,%esi\n  40a642:\tbf b8 51 43 00       \tmov    $0x4351b8,%edi\n  40a647:\te8 54 8a ff ff       \tcallq  4030a0 <__assert_fail@plt>\n  40a64c:\t48 8b 05 dd c6 03 00 \tmov    0x3c6dd(%rip),%rax        # 446d30 <sem>\n  40a653:\t48 89 c7             \tmov    %rax,%rdi\n  40a656:\te8 68 ab 01 00       \tcallq  4251c3 <pj_sem_wait>\n  40a65b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40a65e:\tc9                   \tleaveq \n  40a65f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall srv_resolver_many_test(__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  __int64 <span class=\"supfact\">v10</span>[Number];\n  unsigned int <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v10</span>[Number] = pj_str(String);\n  <span class=\"supfact\">v10</span>[Number] = v2;\n  <span class=\"supfact\">v9</span>[Number] = pj_str(String);\n  <span class=\"supfact\">v9</span>[Number] = v3;\n  if ((int)pj_log_get_level(String, a2) > Number)\n    pj_log_3((unsigned int)String, (unsigned int)String, v4, v5, v6, v7);\n  dword_446C58 = Number;\n  qword_446C90 = (__int64)action3_1;\n  dword_446CB8 = Number;\n  qword_446CF0 = (__int64)action3_1;\n  dword_446C98 = Number;\n  dword_446CF8 = Number;\n  <span class=\"supfact\">v11</span> = pj_dns_srv_resolve(\n      (unsigned int)<span class=\"supfact\">v10</span>, (unsigned int)<span class=\"supfact\">v9</span>,\n      Number, pool, resolver, Number, Number L, (__int64)srv_cb_3, Number L);\n  if (<span class=\"supfact\">v11</span>)\n    __assert_fail(String, String, Number, String);\n  pj_sem_wait(sem);\n  return <span class=\"supfact\">v11</span>;\n}", "code_t": "int __cdecl srv_resolver_many_test() {\n  pj_str_t_0 <span class=\"supfact\">res_name</span>;\n  pj_str_t_0 <span class=\"supfact\">domain</span>;\n  pj_status_t <span class=\"supfact\">status</span>;\n  <span class=\"supfact\">domain</span> = pj_str(String);\n  <span class=\"supfact\">res_name</span> = pj_str(String);\n  if (pj_log_get_level() > Number)\n    pj_log_3(String, String);\n  g_server[Number].action = Number;\n  g_server[Number].action_cb = (void (*)(const pj_dns_parsed_packet_0 *,\n                                         pj_dns_parsed_packet_0 **))action3_1;\n  g_server[Number].action = Number;\n  g_server[Number].action_cb = (void (*)(const pj_dns_parsed_packet_0 *,\n                                         pj_dns_parsed_packet_0 **))action3_1;\n  g_server[Number].pkt_count = Number;\n  g_server[Number].pkt_count = Number;\n  <span class=\"supfact\">status</span> = pj_dns_srv_resolve(\n      &<span class=\"supfact\">domain</span>, &<span class=\"supfact\">res_name</span>, Number, pool,\n      resolver, Number, Number L, (pj_dns_srv_resolver_cb *)srv_cb_3, Number L);\n  if (<span class=\"supfact\">status</span>)\n    __assert_fail(String, String, Number, String);\n  pj_sem_wait(sem);\n  return <span class=\"supfact\">status</span>;\n}", "var": [{"name": "v10", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "domain", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}, {"name": "v9", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "res_name", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": false}, {"repo_owner": "tjhuang", "repo_name": "backport-iwlwifi", "path": "tjhuang/backport-iwlwifi/853ab28a2cff43cc887f3a4f52e1fd5e73c2f04f177a619cd5178adbca860419", "path_in_repo": "tjhuang/backport-iwlwifi/kconf/zconf.tab.o", "objdump": "000000000000bb03 <sym_init>:\n    bb03:\t48 81 ec 98 01 00 00 \tsub    $0x198,%rsp\n    bb0a:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # bb11 <sym_init+0xe>\n    bb11:\t84 c0                \ttest   %al,%al\n    bb13:\t75 72                \tjne    bb87 <sym_init+0x84>\n    bb15:\tc6 05 00 00 00 00 01 \tmovb   $0x1,0x0(%rip)        # bb1c <sym_init+0x19>\n    bb1c:\t48 89 e0             \tmov    %rsp,%rax\n    bb1f:\t48 89 c7             \tmov    %rax,%rdi\n    bb22:\te8 00 00 00 00       \tcallq  bb27 <sym_init+0x24>\n    bb27:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    bb2c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    bb31:\te8 00 00 00 00       \tcallq  bb36 <sym_init+0x33>\n    bb36:\t48 89 84 24 88 01 00 \tmov    %rax,0x188(%rsp)\n    bb3d:\t00 \n    bb3e:\t48 8b 84 24 88 01 00 \tmov    0x188(%rsp),%rax\n    bb45:\t00 \n    bb46:\tc7 40 10 05 00 00 00 \tmovl   $0x5,0x10(%rax)\n    bb4d:\t48 8b 84 24 88 01 00 \tmov    0x188(%rsp),%rax\n    bb54:\t00 \n    bb55:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n    bb58:\t80 cc 10             \tor     $0x10,%ah\n    bb5b:\t89 c2                \tmov    %eax,%edx\n    bb5d:\t48 8b 84 24 88 01 00 \tmov    0x188(%rsp),%rax\n    bb64:\t00 \n    bb65:\t89 50 6c             \tmov    %edx,0x6c(%rax)\n    bb68:\t48 89 e0             \tmov    %rsp,%rax\n    bb6b:\t48 8d 90 82 00 00 00 \tlea    0x82(%rax),%rdx\n    bb72:\t48 8b 84 24 88 01 00 \tmov    0x188(%rsp),%rax\n    bb79:\t00 \n    bb7a:\t48 89 d6             \tmov    %rdx,%rsi\n    bb7d:\t48 89 c7             \tmov    %rax,%rdi\n    bb80:\te8 32 ff ff ff       \tcallq  bab7 <sym_add_default>\n    bb85:\teb 01                \tjmp    bb88 <sym_init+0x85>\n    bb87:\t90                   \tnop\n    bb88:\t48 81 c4 98 01 00 00 \tadd    $0x198,%rsp\n    bb8f:\tc3                   \tretq   ", "code_s": "unsigned __int64 sym_init() {\n  unsigned __int64 result;\n  int v1;\n  struct utsname <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  result = (unsigned __int8)inited_6268;\n  if (!inited_6268) {\n    inited_6268 = Number;\n    uname(&<span class=\"supfact\">v2</span>);\n    <span class=\"supfact\">v3</span> = sym_lookup(String, Number L);\n    *(_DWORD *)(<span class=\"supfact\">v3</span> + Number) = Number;\n    v1 = *(_DWORD *)(<span class=\"supfact\">v3</span> + Number);\n    BYTE1(v1) |= Number;\n    *(_DWORD *)(<span class=\"supfact\">v3</span> + Number) = v1;\n    result = (unsigned __int64)sym_add_default(\n        <span class=\"supfact\">v3</span>, (__int64)<span class=\"supfact\">v2</span>.release);\n  }\n  return result;\n}", "code_t": "void __cdecl sym_init() {\n  int v0;\n  utsname <span class=\"supfact\">uts</span>;\n  symbol *<span class=\"supfact\">sym</span>;\n  if (!inited_6268) {\n    inited_6268 = Number;\n    uname(&<span class=\"supfact\">uts</span>);\n    <span class=\"supfact\">sym</span> = sym_lookup(String, Number);\n    <span class=\"supfact\">sym</span>->type = S_STRING;\n    v0 = <span class=\"supfact\">sym</span>->flags;\n    BYTE1(v0) |= Number;\n    <span class=\"supfact\">sym</span>->flags = v0;\n    sym_add_default(<span class=\"supfact\">sym</span>, <span class=\"supfact\">uts</span>.release);\n  }\n}", "var": [{"name": "v2", "type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] __domainname; }", "ref_name": "uts", "ref_type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] __domainname; }"}], "body_in_train": false}, {"repo_owner": "romankap", "repo_name": "Using-dlib", "path": "romankap/Using-dlib/eebdb1d2d9af3f5ec71427ae382bf9801cc42fcfadd9f5c8b4b7638ab15698bc", "path_in_repo": "romankap/Using-dlib/Lot_w_dlib/dlib-18.10/dlib/test/iosockstream.o", "objdump": "00000000000001e4 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty>:\n 1e4:\t55                   \tpush   %rbp\n 1e5:\t48 89 e5             \tmov    %rsp,%rbp\n 1e8:\t41 54                \tpush   %r12\n 1ea:\t53                   \tpush   %rbx\n 1eb:\t48 83 ec 50          \tsub    $0x50,%rsp\n 1ef:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 1f3:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n 1f7:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n 1fb:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n 1ff:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n 203:\t44 89 ca             \tmov    %r9d,%edx\n 206:\t8b 45 10             \tmov    0x10(%rbp),%eax\n 209:\t66 89 55 a4          \tmov    %dx,-0x5c(%rbp)\n 20d:\t66 89 45 a0          \tmov    %ax,-0x60(%rbp)\n 211:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 215:\tba 00 00 00 00       \tmov    $0x0,%edx\n 21a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 21f:\t48 89 c7             \tmov    %rax,%rdi\n 222:\te8 00 00 00 00       \tcallq  227 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0x43>\n 227:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 22b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 230:\t48 89 c7             \tmov    %rax,%rdi\n 233:\te8 00 00 00 00       \tcallq  238 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0x54>\n 238:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 23c:\t48 89 c7             \tmov    %rax,%rdi\n 23f:\te8 00 00 00 00       \tcallq  244 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0x60>\n 244:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 248:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 24d:\t48 89 c7             \tmov    %rax,%rdi\n 250:\te8 00 00 00 00       \tcallq  255 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0x71>\n 255:\teb 7d                \tjmp    2d4 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0xf0>\n 257:\t49 89 c4             \tmov    %rax,%r12\n 25a:\t48 89 d3             \tmov    %rdx,%rbx\n 25d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 261:\t48 89 c7             \tmov    %rax,%rdi\n 264:\te8 00 00 00 00       \tcallq  269 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0x85>\n 269:\t4c 89 e0             \tmov    %r12,%rax\n 26c:\t48 89 da             \tmov    %rbx,%rdx\n 26f:\teb 00                \tjmp    271 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0x8d>\n 271:\t48 83 fa 01          \tcmp    $0x1,%rdx\n 275:\t74 08                \tje     27f <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0x9b>\n 277:\t48 89 c7             \tmov    %rax,%rdi\n 27a:\te8 00 00 00 00       \tcallq  27f <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0x9b>\n 27f:\t48 89 c7             \tmov    %rax,%rdi\n 282:\te8 00 00 00 00       \tcallq  287 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0xa3>\n 287:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 28b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 28f:\t48 8b 00             \tmov    (%rax),%rax\n 292:\t48 83 c0 10          \tadd    $0x10,%rax\n 296:\t48 8b 10             \tmov    (%rax),%rdx\n 299:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 29d:\t48 89 c7             \tmov    %rax,%rdi\n 2a0:\tff d2                \tcallq  *%rdx\n 2a2:\t48 89 c2             \tmov    %rax,%rdx\n 2a5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 2a9:\t48 05 f0 03 00 00    \tadd    $0x3f0,%rax\n 2af:\t48 89 d6             \tmov    %rdx,%rsi\n 2b2:\t48 89 c7             \tmov    %rax,%rdi\n 2b5:\te8 00 00 00 00       \tcallq  2ba <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0xd6>\n 2ba:\te8 00 00 00 00       \tcallq  2bf <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0xdb>\n 2bf:\teb 13                \tjmp    2d4 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0xf0>\n 2c1:\t48 89 c3             \tmov    %rax,%rbx\n 2c4:\te8 00 00 00 00       \tcallq  2c9 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0xe5>\n 2c9:\t48 89 d8             \tmov    %rbx,%rax\n 2cc:\t48 89 c7             \tmov    %rax,%rdi\n 2cf:\te8 00 00 00 00       \tcallq  2d4 <_ZN12_GLOBAL__N_15serv210on_connectERSiRSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_tty+0xf0>\n 2d4:\t48 83 c4 50          \tadd    $0x50,%rsp\n 2d8:\t5b                   \tpop    %rbx\n 2d9:\t41 5c                \tpop    %r12\n 2db:\t5d                   \tpop    %rbp\n 2dc:\tc3                   \tretq   \n 2dd:\t90                   \tnop", "code_s": "__int64 __fastcall ` anonymous namespace ' serv2 on_connect ( __int64 a1 , __int64 a2 , __int64 a3 ) { char <span class=\"supfact\">v5</span> [ Number ] ; dlib logger operator << ( <span class=\"supfact\">v5</span> , & ` anonymous namespace ' dlog , & dlib LINFO ) ;\ndlib logger logger_stream operator<<<char[Number]>(<span class=\"supfact\">v5</span>, String);\ndlib logger logger_stream ~logger_stream((dlib logger logger_stream *)\n                                             <span class=\"supfact\">v5</span>);\nreturn std operator<<<std char_traits<char>>(a3, String);\n}", "code_t": "void __cdecl ` anonymous namespace ' serv2 on_connect ( ` anonymous namespace ' serv2 * const this , std istream * a2 , std ostream * out , const std string * a4 , const std string * a5 , unsigned __int16 a6 , unsigned __int16 a7 , dlib uint64 a8 ) {\n  dlib logger logger_stream <span class=\"supfact\">v9</span>; dlib logger operator << ( & <span class=\"supfact\">v9</span> , ( const dlib logger * const ) & ` anonymous namespace ' dlog , & dlib LINFO ) ; dlib logger logger_stream operator << < char [ Number ] > ( & <span class=\"supfact\">v9</span> , ( const char ( * ) [ Number ] ) String ) ; dlib logger logger_stream ~ logger_stream ( & <span class=\"supfact\">v9</span> ) ; std operator << < std char_traits < char >> ( out , String ) ; }", "var": [{"name": "v5", "type": "struct dlib::logger::logger_stream { const dlib::log_level * l; dlib::logger * log; bool been_used; const bool enabled; PADDING (6); }", "ref_name": "v9", "ref_type": "struct dlib::logger::logger_stream { const dlib::log_level * l; dlib::logger * log; bool been_used; const bool enabled; PADDING (6); }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/06598c09babb55e178e8c8c3155b037a828ea5bef219725349a6c3eae0c73702", "path_in_repo": "XanClic/qemu//hw/scsi/scsi-generic.o", "objdump": "0000000000000898 <_nocheck__trace_scsi_generic_realize_type>:\n     898:\t55                   \tpush   %rbp\n     899:\t48 89 e5             \tmov    %rsp,%rbp\n     89c:\t41 54                \tpush   %r12\n     89e:\t53                   \tpush   %rbx\n     89f:\t48 83 ec 30          \tsub    $0x30,%rsp\n     8a3:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n     8a6:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     8ad:\t00 00 \n     8af:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     8b3:\t31 c0                \txor    %eax,%eax\n     8b5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8bb <_nocheck__trace_scsi_generic_realize_type+0x23>\n     8bb:\t85 c0                \ttest   %eax,%eax\n     8bd:\t0f 95 c0             \tsetne  %al\n     8c0:\t0f b6 c0             \tmovzbl %al,%eax\n     8c3:\t48 85 c0             \ttest   %rax,%rax\n     8c6:\t74 5d                \tje     925 <_nocheck__trace_scsi_generic_realize_type+0x8d>\n     8c8:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 8cf <_nocheck__trace_scsi_generic_realize_type+0x37>\n     8cf:\t66 85 c0             \ttest   %ax,%ax\n     8d2:\t74 51                \tje     925 <_nocheck__trace_scsi_generic_realize_type+0x8d>\n     8d4:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     8d9:\te8 0d fa ff ff       \tcallq  2eb <qemu_loglevel_mask>\n     8de:\t84 c0                \ttest   %al,%al\n     8e0:\t74 43                \tje     925 <_nocheck__trace_scsi_generic_realize_type+0x8d>\n     8e2:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     8e6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     8eb:\t48 89 c7             \tmov    %rax,%rdi\n     8ee:\te8 00 00 00 00       \tcallq  8f3 <_nocheck__trace_scsi_generic_realize_type+0x5b>\n     8f3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     8f7:\t49 89 c4             \tmov    %rax,%r12\n     8fa:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     8fe:\t48 89 c3             \tmov    %rax,%rbx\n     901:\te8 00 00 00 00       \tcallq  906 <_nocheck__trace_scsi_generic_realize_type+0x6e>\n     906:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n     909:\t41 89 d0             \tmov    %edx,%r8d\n     90c:\t4c 89 e1             \tmov    %r12,%rcx\n     90f:\t48 89 da             \tmov    %rbx,%rdx\n     912:\t89 c6                \tmov    %eax,%esi\n     914:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 91b <_nocheck__trace_scsi_generic_realize_type+0x83>\n     91b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     920:\te8 00 00 00 00       \tcallq  925 <_nocheck__trace_scsi_generic_realize_type+0x8d>\n     925:\t90                   \tnop\n     926:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     92a:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     931:\t00 00 \n     933:\t74 05                \tje     93a <_nocheck__trace_scsi_generic_realize_type+0xa2>\n     935:\te8 00 00 00 00       \tcallq  93a <_nocheck__trace_scsi_generic_realize_type+0xa2>\n     93a:\t48 83 c4 30          \tadd    $0x30,%rsp\n     93e:\t5b                   \tpop    %rbx\n     93f:\t41 5c                \tpop    %r12\n     941:\t5d                   \tpop    %rbp\n     942:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_scsi_generic_realize_type(\n    unsigned int a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SCSI_GENERIC_REALIZE_TYPE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl nocheck__trace_scsi_generic_realize_type(int type) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SCSI_GENERIC_REALIZE_TYPE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, (unsigned int)type);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "f1vefour", "repo_name": "ptunnel", "path": "f1vefour/ptunnel/dfc033354a2f309d7b8e062aa77aa8d27cb032787bc251200ff1d05142b9e288", "path_in_repo": "f1vefour/ptunnel//ptunnel.o", "objdump": "00000000000045f5 <generate_challenge>:\n    45f5:\t55                   \tpush   %rbp\n    45f6:\t48 89 e5             \tmov    %rsp,%rbp\n    45f9:\t53                   \tpush   %rbx\n    45fa:\t48 83 ec 28          \tsub    $0x28,%rsp\n    45fe:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    4603:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    4608:\te8 00 00 00 00       \tcallq  460d <generate_challenge+0x18>\n    460d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4611:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    4615:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    461a:\t48 89 c7             \tmov    %rax,%rdi\n    461d:\te8 00 00 00 00       \tcallq  4622 <generate_challenge+0x2d>\n    4622:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    4626:\t89 c2                \tmov    %eax,%edx\n    4628:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    462c:\t89 10                \tmov    %edx,(%rax)\n    462e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4632:\t89 c3                \tmov    %eax,%ebx\n    4634:\te8 00 00 00 00       \tcallq  4639 <generate_challenge+0x44>\n    4639:\t8d 14 03             \tlea    (%rbx,%rax,1),%edx\n    463c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    4640:\t89 50 04             \tmov    %edx,0x4(%rax)\n    4643:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    464a:\teb 19                \tjmp    4665 <generate_challenge+0x70>\n    464c:\te8 00 00 00 00       \tcallq  4651 <generate_challenge+0x5c>\n    4651:\t89 c1                \tmov    %eax,%ecx\n    4653:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    4657:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    465a:\t48 63 d2             \tmovslq %edx,%rdx\n    465d:\t89 4c 90 08          \tmov    %ecx,0x8(%rax,%rdx,4)\n    4661:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    4665:\t83 7d ec 05          \tcmpl   $0x5,-0x14(%rbp)\n    4669:\t7e e1                \tjle    464c <generate_challenge+0x57>\n    466b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    466f:\t48 83 c4 28          \tadd    $0x28,%rsp\n    4673:\t5b                   \tpop    %rbx\n    4674:\t5d                   \tpop    %rbp\n    4675:\tc3                   \tretq   ", "code_s": "_DWORD *generate_challenge() {\n  int v0;\n  struct timeval <span class=\"supfact\">tv</span>;\n  _DWORD *<span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v3</span> = calloc(Number, Number);\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  *<span class=\"supfact\">v3</span> = <span class=\"supfact\">tv</span>.tv_sec;\n  v0 = <span class=\"supfact\">tv</span>.tv_usec;\n  <span class=\"supfact\">v3</span>[Number] = v0 + rand();\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    <span class=\"supfact\">v3</span>[<span class=\"supfact\">i</span> + Number] = rand();\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "challenge_t_0 *__cdecl generate_challenge() {\n  int v0;\n  timeval <span class=\"supfact\">tt</span>;\n  challenge_t_0 *<span class=\"supfact\">c</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">c</span> = (challenge_t_0 *)calloc(Number, Number);\n  gettimeofday(&<span class=\"supfact\">tt</span>, Number L);\n  <span class=\"supfact\">c</span>->sec = <span class=\"supfact\">tt</span>.tv_sec;\n  v0 = <span class=\"supfact\">tt</span>.tv_usec;\n  <span class=\"supfact\">c</span>->usec_rnd = v0 + rand();\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    <span class=\"supfact\">c</span>->random[<span class=\"supfact\">i</span>] = rand();\n  return <span class=\"supfact\">c</span>;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tt", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "Plain-Andy-legacy", "repo_name": "android_external_wpa_supplicant_8", "path": "Plain-Andy-legacy/android_external_wpa_supplicant_8/b3145f6f41d5ed8508d8ca71301b3351478802748080e98fbdfee0c63d6e6c3f", "path_in_repo": "Plain-Andy-legacy/android_external_wpa_supplicant_8/wpa_supplicant/dbus/dbus_old_handlers.o", "objdump": "0000000000000805 <wpas_dbus_iface_scan_results>:\n     805:\t55                   \tpush   %rbp\n     806:\t48 89 e5             \tmov    %rsp,%rbp\n     809:\t48 81 ec 60 01 00 00 \tsub    $0x160,%rsp\n     810:\t48 89 bd a8 fe ff ff \tmov    %rdi,-0x158(%rbp)\n     817:\t48 89 b5 a0 fe ff ff \tmov    %rsi,-0x160(%rbp)\n     81e:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n     825:\t48 89 c7             \tmov    %rax,%rdi\n     828:\te8 00 00 00 00       \tcallq  82d <wpas_dbus_iface_scan_results+0x28>\n     82d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     831:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n     835:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     839:\t48 89 d6             \tmov    %rdx,%rsi\n     83c:\t48 89 c7             \tmov    %rax,%rdi\n     83f:\te8 00 00 00 00       \tcallq  844 <wpas_dbus_iface_scan_results+0x3f>\n     844:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n     84b:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     84f:\t48 89 d1             \tmov    %rdx,%rcx\n     852:\tba 00 00 00 00       \tmov    $0x0,%edx\n     857:\tbe 61 00 00 00       \tmov    $0x61,%esi\n     85c:\t48 89 c7             \tmov    %rax,%rdi\n     85f:\te8 00 00 00 00       \tcallq  864 <wpas_dbus_iface_scan_results+0x5f>\n     864:\t85 c0                \ttest   %eax,%eax\n     866:\t0f 84 16 01 00 00    \tje     982 <wpas_dbus_iface_scan_results+0x17d>\n     86c:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n     873:\t48 8b 80 e0 01 00 00 \tmov    0x1e0(%rax),%rax\n     87a:\t48 83 e8 10          \tsub    $0x10,%rax\n     87e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     882:\te9 bd 00 00 00       \tjmpq   944 <wpas_dbus_iface_scan_results+0x13f>\n     887:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n     88e:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n     895:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     899:\t0f b6 40 35          \tmovzbl 0x35(%rax),%eax\n     89d:\t44 0f b6 c0          \tmovzbl %al,%r8d\n     8a1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     8a5:\t0f b6 40 34          \tmovzbl 0x34(%rax),%eax\n     8a9:\t0f b6 f8             \tmovzbl %al,%edi\n     8ac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     8b0:\t0f b6 40 33          \tmovzbl 0x33(%rax),%eax\n     8b4:\t0f b6 f0             \tmovzbl %al,%esi\n     8b7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     8bb:\t0f b6 40 32          \tmovzbl 0x32(%rax),%eax\n     8bf:\t0f b6 c8             \tmovzbl %al,%ecx\n     8c2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     8c6:\t0f b6 40 31          \tmovzbl 0x31(%rax),%eax\n     8ca:\t44 0f b6 c8          \tmovzbl %al,%r9d\n     8ce:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     8d2:\t0f b6 40 30          \tmovzbl 0x30(%rax),%eax\n     8d6:\t44 0f b6 d0          \tmovzbl %al,%r10d\n     8da:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n     8e1:\t48 8b 90 b0 00 00 00 \tmov    0xb0(%rax),%rdx\n     8e8:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     8ef:\t41 50                \tpush   %r8\n     8f1:\t57                   \tpush   %rdi\n     8f2:\t56                   \tpush   %rsi\n     8f3:\t51                   \tpush   %rcx\n     8f4:\t45 89 d0             \tmov    %r10d,%r8d\n     8f7:\t48 89 d1             \tmov    %rdx,%rcx\n     8fa:\tba 00 00 00 00       \tmov    $0x0,%edx\n     8ff:\tbe 96 00 00 00       \tmov    $0x96,%esi\n     904:\t48 89 c7             \tmov    %rax,%rdi\n     907:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     90c:\te8 00 00 00 00       \tcallq  911 <wpas_dbus_iface_scan_results+0x10c>\n     911:\t48 83 c4 20          \tadd    $0x20,%rsp\n     915:\t48 8d 95 48 ff ff ff \tlea    -0xb8(%rbp),%rdx\n     91c:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n     923:\tbe 6f 00 00 00       \tmov    $0x6f,%esi\n     928:\t48 89 c7             \tmov    %rax,%rdi\n     92b:\te8 00 00 00 00       \tcallq  930 <wpas_dbus_iface_scan_results+0x12b>\n     930:\t85 c0                \ttest   %eax,%eax\n     932:\t74 51                \tje     985 <wpas_dbus_iface_scan_results+0x180>\n     934:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     938:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     93c:\t48 83 e8 10          \tsub    $0x10,%rax\n     940:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     944:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     948:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n     94c:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n     953:\t48 05 e0 01 00 00    \tadd    $0x1e0,%rax\n     959:\t48 39 c2             \tcmp    %rax,%rdx\n     95c:\t0f 85 25 ff ff ff    \tjne    887 <wpas_dbus_iface_scan_results+0x82>\n     962:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n     969:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     96d:\t48 89 d6             \tmov    %rdx,%rsi\n     970:\t48 89 c7             \tmov    %rax,%rdi\n     973:\te8 00 00 00 00       \tcallq  978 <wpas_dbus_iface_scan_results+0x173>\n     978:\t85 c0                \ttest   %eax,%eax\n     97a:\t74 0c                \tje     988 <wpas_dbus_iface_scan_results+0x183>\n     97c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     980:\teb 2c                \tjmp    9ae <wpas_dbus_iface_scan_results+0x1a9>\n     982:\t90                   \tnop\n     983:\teb 04                \tjmp    989 <wpas_dbus_iface_scan_results+0x184>\n     985:\t90                   \tnop\n     986:\teb 01                \tjmp    989 <wpas_dbus_iface_scan_results+0x184>\n     988:\t90                   \tnop\n     989:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     98d:\t48 89 c7             \tmov    %rax,%rdi\n     990:\te8 00 00 00 00       \tcallq  995 <wpas_dbus_iface_scan_results+0x190>\n     995:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n     99c:\tba 00 00 00 00       \tmov    $0x0,%edx\n     9a1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     9a6:\t48 89 c7             \tmov    %rax,%rdi\n     9a9:\te8 00 00 00 00       \tcallq  9ae <wpas_dbus_iface_scan_results+0x1a9>\n     9ae:\tc9                   \tleaveq \n     9af:\tc3                   \tretq   ", "code_s": "__int64 __fastcall wpas_dbus_iface_scan_results(__int64 a1, __int64 a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  char *<span class=\"supfact\">s</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  char <span class=\"supfact\">v6</span>[Number];\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v7</span> = dbus_message_new_method_return(a1);\n  dbus_message_iter_init_append(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v6</span>);\n  if ((unsigned int)dbus_message_iter_open_container(\n          <span class=\"supfact\">v6</span>, Number L, String, <span class=\"supfact\">v5</span>)) {\n    for (<span class=\"supfact\">i</span> = *(_QWORD *)(a2 + Number) - Number L;\n         <span class=\"supfact\">i</span> + Number != a2 + Number;\n         <span class=\"supfact\">i</span> =\n             *(_QWORD *)(<span class=\"supfact\">i</span> + Number) - Number L) {\n      <span class=\"supfact\">s</span> = <span class=\"supfact\">v3</span>;\n      snprintf(<span class=\"supfact\">v3</span>, Number, String,\n               *(const char **)(a2 + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number),\n               *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number));\n      if (!(unsigned int)dbus_message_iter_append_basic(\n              <span class=\"supfact\">v5</span>, Number L, &<span class=\"supfact\">s</span>))\n        goto LABEL_8;\n    }\n    if ((unsigned int)dbus_message_iter_close_container(<span class=\"supfact\">v6</span>,\n                                                        <span class=\"supfact\">v5</span>))\n      return <span class=\"supfact\">v7</span>;\n  }\nLABEL_8:\n  dbus_message_unref(<span class=\"supfact\">v7</span>);\n  return dbus_message_new_error(a1, String, String);\n}", "code_t": "DBusMessage_0 *__cdecl wpas_dbus_iface_scan_results(DBusMessage_0 *message,\n                                                    wpa_supplicant *wpa_s) {\n  char <span class=\"supfact\">path_buf</span>[Number];\n  char *<span class=\"supfact\">path</span>;\n  DBusMessageIter_0 <span class=\"supfact\">sub_iter</span>;\n  DBusMessageIter_0 <span class=\"supfact\">iter</span>;\n  DBusMessage_0 *<span class=\"supfact\">reply</span>;\n  wpa_bss *<span class=\"supfact\">bss</span>;\n  <span class=\"supfact\">reply</span> =\n      (DBusMessage_0 *)dbus_message_new_method_return(message);\n  dbus_message_iter_init_append(<span class=\"supfact\">reply</span>, &<span class=\"supfact\">iter</span>);\n  if ((unsigned int)dbus_message_iter_open_container(\n          &<span class=\"supfact\">iter</span>, Number L, String, &<span class=\"supfact\">sub_iter</span>)) {\n    for (<span class=\"supfact\">bss</span> =\n             CONTAINING_RECORD(wpa_s->bss_id.next, wpa_bss, list_id);\n         &<span class=\"supfact\">bss</span>->list_id != &wpa_s->bss_id;\n         <span class=\"supfact\">bss</span> = CONTAINING_RECORD(\n             <span class=\"supfact\">bss</span>->list_id.next, wpa_bss, list_id)) {\n      <span class=\"supfact\">path</span> = <span class=\"supfact\">path_buf</span>;\n      snprintf(<span class=\"supfact\">path_buf</span>, Number, String, wpa_s->dbus_path,\n               <span class=\"supfact\">bss</span>->bssid[Number],\n               <span class=\"supfact\">bss</span>->bssid[Number],\n               <span class=\"supfact\">bss</span>->bssid[Number],\n               <span class=\"supfact\">bss</span>->bssid[Number],\n               <span class=\"supfact\">bss</span>->bssid[Number],\n               <span class=\"supfact\">bss</span>->bssid[Number]);\n      if (!(unsigned int)dbus_message_iter_append_basic(\n              &<span class=\"supfact\">sub_iter</span>, Number L, &<span class=\"supfact\">path</span>))\n        goto error;\n    }\n    if ((unsigned int)dbus_message_iter_close_container(\n            &<span class=\"supfact\">iter</span>, &<span class=\"supfact\">sub_iter</span>))\n      return <span class=\"supfact\">reply</span>;\n  }\nerror:\n  dbus_message_unref(<span class=\"supfact\">reply</span>);\n  return (DBusMessage_0 *)dbus_message_new_error(message, String, String);\n}", "var": [{"name": "v6", "type": "struct DBusMessageIter_0 { void * dummy1; void * dummy2; dbus_uint32_t dummy3; int dummy4; int dummy5; int dummy6; int dummy7; int dummy8; int dummy9; int dummy10; int dummy11; int pad1; void * pad2; void * pad3; }", "ref_name": "iter", "ref_type": "struct DBusMessageIter_0 { void * dummy1; void * dummy2; dbus_uint32_t dummy3; int dummy4; int dummy5; int dummy6; int dummy7; int dummy8; int dummy9; int dummy10; int dummy11; int pad1; void * pad2; void * pad3; }"}, {"name": "v5", "type": "struct DBusMessageIter_0 { void * dummy1; void * dummy2; dbus_uint32_t dummy3; int dummy4; int dummy5; int dummy6; int dummy7; int dummy8; int dummy9; int dummy10; int dummy11; int pad1; void * pad2; void * pad3; }", "ref_name": "sub_iter", "ref_type": "struct DBusMessageIter_0 { void * dummy1; void * dummy2; dbus_uint32_t dummy3; int dummy4; int dummy5; int dummy6; int dummy7; int dummy8; int dummy9; int dummy10; int dummy11; int pad1; void * pad2; void * pad3; }"}], "body_in_train": false}, {"repo_owner": "threeearcat", "repo_name": "repro-guest", "path": "threeearcat/repro-guest/aea8740642b09c40d0a4e6f62417e2d65ee554e88b3fcba3e265142c2d651e8a", "path_in_repo": "threeearcat/repro-guest/tools/testing/selftests/x86/test_vsyscall_64", "objdump": "0000000000401b61 <test_getcpu>:\n  401b61:\t55                   \tpush   %rbp\n  401b62:\t48 89 e5             \tmov    %rsp,%rbp\n  401b65:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n  401b6c:\t89 bd 2c ff ff ff    \tmov    %edi,-0xd4(%rbp)\n  401b72:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  401b79:\t48 c7 45 f0 ff ff ff \tmovq   $0xffffffffffffffff,-0x10(%rbp)\n  401b80:\tff \n  401b81:\t48 c7 45 e8 ff ff ff \tmovq   $0xffffffffffffffff,-0x18(%rbp)\n  401b88:\tff \n  401b89:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n  401b8f:\t89 c6                \tmov    %eax,%esi\n  401b91:\tbf f4 34 40 00       \tmov    $0x4034f4,%edi\n  401b96:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401b9b:\te8 e0 f4 ff ff       \tcallq  401080 <printf@plt>\n  401ba0:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  401ba7:\t48 89 c6             \tmov    %rax,%rsi\n  401baa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401baf:\tba 10 00 00 00       \tmov    $0x10,%edx\n  401bb4:\t48 89 f7             \tmov    %rsi,%rdi\n  401bb7:\t48 89 d1             \tmov    %rdx,%rcx\n  401bba:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  401bbd:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n  401bc3:\t48 98                \tcltq   \n  401bc5:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  401bc9:\t48 81 7d d8 ff 03 00 \tcmpq   $0x3ff,-0x28(%rbp)\n  401bd0:\t00 \n  401bd1:\t77 47                \tja     401c1a <test_getcpu+0xb9>\n  401bd3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401bd7:\t48 c1 e8 06          \tshr    $0x6,%rax\n  401bdb:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  401be2:\t00 \n  401be3:\t48 8d 8d 50 ff ff ff \tlea    -0xb0(%rbp),%rcx\n  401bea:\t48 01 ca             \tadd    %rcx,%rdx\n  401bed:\t48 8b 12             \tmov    (%rdx),%rdx\n  401bf0:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  401bf4:\t83 e1 3f             \tand    $0x3f,%ecx\n  401bf7:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401bfc:\t48 d3 e6             \tshl    %cl,%rsi\n  401bff:\t48 89 f1             \tmov    %rsi,%rcx\n  401c02:\t48 8d 34 c5 00 00 00 \tlea    0x0(,%rax,8),%rsi\n  401c09:\t00 \n  401c0a:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  401c11:\t48 01 f0             \tadd    %rsi,%rax\n  401c14:\t48 09 ca             \tor     %rcx,%rdx\n  401c17:\t48 89 10             \tmov    %rdx,(%rax)\n  401c1a:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  401c21:\t48 89 c2             \tmov    %rax,%rdx\n  401c24:\tbe 80 00 00 00       \tmov    $0x80,%esi\n  401c29:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401c2e:\te8 7d f4 ff ff       \tcallq  4010b0 <sched_setaffinity@plt>\n  401c33:\t85 c0                \ttest   %eax,%eax\n  401c35:\t74 1f                \tje     401c56 <test_getcpu+0xf5>\n  401c37:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n  401c3d:\t89 c6                \tmov    %eax,%esi\n  401c3f:\tbf 10 35 40 00       \tmov    $0x403510,%edi\n  401c44:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401c49:\te8 32 f4 ff ff       \tcallq  401080 <printf@plt>\n  401c4e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401c51:\te9 41 02 00 00       \tjmpq   401e97 <test_getcpu+0x336>\n  401c56:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  401c5d:\tc6 45 e3 00          \tmovb   $0x0,-0x1d(%rbp)\n  401c61:\t48 8d 8d 40 ff ff ff \tlea    -0xc0(%rbp),%rcx\n  401c68:\t48 8d 85 4c ff ff ff \tlea    -0xb4(%rbp),%rax\n  401c6f:\tba 00 00 00 00       \tmov    $0x0,%edx\n  401c74:\t48 89 ce             \tmov    %rcx,%rsi\n  401c77:\t48 89 c7             \tmov    %rax,%rdi\n  401c7a:\te8 89 f9 ff ff       \tcallq  401608 <sys_getcpu>\n  401c7f:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  401c83:\t48 8b 05 7e 45 00 00 \tmov    0x457e(%rip),%rax        # 406208 <vdso_getcpu>\n  401c8a:\t48 85 c0             \ttest   %rax,%rax\n  401c8d:\t74 27                \tje     401cb6 <test_getcpu+0x155>\n  401c8f:\t4c 8b 05 72 45 00 00 \tmov    0x4572(%rip),%r8        # 406208 <vdso_getcpu>\n  401c96:\t48 8d 8d 3c ff ff ff \tlea    -0xc4(%rbp),%rcx\n  401c9d:\t48 8d 85 48 ff ff ff \tlea    -0xb8(%rbp),%rax\n  401ca4:\tba 00 00 00 00       \tmov    $0x0,%edx\n  401ca9:\t48 89 ce             \tmov    %rcx,%rsi\n  401cac:\t48 89 c7             \tmov    %rax,%rdi\n  401caf:\t41 ff d0             \tcallq  *%r8\n  401cb2:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401cb6:\t0f b6 05 44 44 00 00 \tmovzbl 0x4444(%rip),%eax        # 406101 <vsyscall_map_x>\n  401cbd:\t84 c0                \ttest   %al,%al\n  401cbf:\t74 27                \tje     401ce8 <test_getcpu+0x187>\n  401cc1:\t49 c7 c0 00 08 60 ff \tmov    $0xffffffffff600800,%r8\n  401cc8:\t48 8d 8d 38 ff ff ff \tlea    -0xc8(%rbp),%rcx\n  401ccf:\t48 8d 85 44 ff ff ff \tlea    -0xbc(%rbp),%rax\n  401cd6:\tba 00 00 00 00       \tmov    $0x0,%edx\n  401cdb:\t48 89 ce             \tmov    %rcx,%rsi\n  401cde:\t48 89 c7             \tmov    %rax,%rdi\n  401ce1:\t41 ff d0             \tcallq  *%r8\n  401ce4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  401ce8:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  401ced:\t75 3e                \tjne    401d2d <test_getcpu+0x1cc>\n  401cef:\t8b 95 4c ff ff ff    \tmov    -0xb4(%rbp),%edx\n  401cf5:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n  401cfb:\t39 c2                \tcmp    %eax,%edx\n  401cfd:\t74 21                \tje     401d20 <test_getcpu+0x1bf>\n  401cff:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n  401d05:\t8b 95 2c ff ff ff    \tmov    -0xd4(%rbp),%edx\n  401d0b:\t89 c6                \tmov    %eax,%esi\n  401d0d:\tbf 30 35 40 00       \tmov    $0x403530,%edi\n  401d12:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401d17:\te8 64 f3 ff ff       \tcallq  401080 <printf@plt>\n  401d1c:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401d20:\tc6 45 e3 01          \tmovb   $0x1,-0x1d(%rbp)\n  401d24:\t8b 85 40 ff ff ff    \tmov    -0xc0(%rbp),%eax\n  401d2a:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  401d2d:\t48 8b 05 d4 44 00 00 \tmov    0x44d4(%rip),%rax        # 406208 <vdso_getcpu>\n  401d34:\t48 85 c0             \ttest   %rax,%rax\n  401d37:\t0f 84 a4 00 00 00    \tje     401de1 <test_getcpu+0x280>\n  401d3d:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  401d42:\t74 13                \tje     401d57 <test_getcpu+0x1f6>\n  401d44:\tbf 62 35 40 00       \tmov    $0x403562,%edi\n  401d49:\te8 f2 f2 ff ff       \tcallq  401040 <puts@plt>\n  401d4e:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401d52:\te9 8a 00 00 00       \tjmpq   401de1 <test_getcpu+0x280>\n  401d57:\t0f b6 45 e3          \tmovzbl -0x1d(%rbp),%eax\n  401d5b:\t83 f0 01             \txor    $0x1,%eax\n  401d5e:\t84 c0                \ttest   %al,%al\n  401d60:\t74 0d                \tje     401d6f <test_getcpu+0x20e>\n  401d62:\tc6 45 e3 01          \tmovb   $0x1,-0x1d(%rbp)\n  401d66:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n  401d6c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  401d6f:\t8b 95 48 ff ff ff    \tmov    -0xb8(%rbp),%edx\n  401d75:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n  401d7b:\t39 c2                \tcmp    %eax,%edx\n  401d7d:\t74 23                \tje     401da2 <test_getcpu+0x241>\n  401d7f:\t8b 85 48 ff ff ff    \tmov    -0xb8(%rbp),%eax\n  401d85:\t8b 95 2c ff ff ff    \tmov    -0xd4(%rbp),%edx\n  401d8b:\t89 c6                \tmov    %eax,%esi\n  401d8d:\tbf 80 35 40 00       \tmov    $0x403580,%edi\n  401d92:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401d97:\te8 e4 f2 ff ff       \tcallq  401080 <printf@plt>\n  401d9c:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401da0:\teb 0a                \tjmp    401dac <test_getcpu+0x24b>\n  401da2:\tbf b0 35 40 00       \tmov    $0x4035b0,%edi\n  401da7:\te8 94 f2 ff ff       \tcallq  401040 <puts@plt>\n  401dac:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n  401db2:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n  401db5:\t74 20                \tje     401dd7 <test_getcpu+0x276>\n  401db7:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n  401dbd:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  401dc0:\t89 c6                \tmov    %eax,%esi\n  401dc2:\tbf d0 35 40 00       \tmov    $0x4035d0,%edi\n  401dc7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401dcc:\te8 af f2 ff ff       \tcallq  401080 <printf@plt>\n  401dd1:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401dd5:\teb 0a                \tjmp    401de1 <test_getcpu+0x280>\n  401dd7:\tbf 08 36 40 00       \tmov    $0x403608,%edi\n  401ddc:\te8 5f f2 ff ff       \tcallq  401040 <puts@plt>\n  401de1:\t0f b6 05 19 43 00 00 \tmovzbl 0x4319(%rip),%eax        # 406101 <vsyscall_map_x>\n  401de8:\t84 c0                \ttest   %al,%al\n  401dea:\t0f 84 a4 00 00 00    \tje     401e94 <test_getcpu+0x333>\n  401df0:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  401df5:\t74 13                \tje     401e0a <test_getcpu+0x2a9>\n  401df7:\tbf 28 36 40 00       \tmov    $0x403628,%edi\n  401dfc:\te8 3f f2 ff ff       \tcallq  401040 <puts@plt>\n  401e01:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401e05:\te9 8a 00 00 00       \tjmpq   401e94 <test_getcpu+0x333>\n  401e0a:\t0f b6 45 e3          \tmovzbl -0x1d(%rbp),%eax\n  401e0e:\t83 f0 01             \txor    $0x1,%eax\n  401e11:\t84 c0                \ttest   %al,%al\n  401e13:\t74 0d                \tje     401e22 <test_getcpu+0x2c1>\n  401e15:\tc6 45 e3 01          \tmovb   $0x1,-0x1d(%rbp)\n  401e19:\t8b 85 38 ff ff ff    \tmov    -0xc8(%rbp),%eax\n  401e1f:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  401e22:\t8b 95 44 ff ff ff    \tmov    -0xbc(%rbp),%edx\n  401e28:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n  401e2e:\t39 c2                \tcmp    %eax,%edx\n  401e30:\t74 23                \tje     401e55 <test_getcpu+0x2f4>\n  401e32:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n  401e38:\t8b 95 2c ff ff ff    \tmov    -0xd4(%rbp),%edx\n  401e3e:\t89 c6                \tmov    %eax,%esi\n  401e40:\tbf 48 36 40 00       \tmov    $0x403648,%edi\n  401e45:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401e4a:\te8 31 f2 ff ff       \tcallq  401080 <printf@plt>\n  401e4f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401e53:\teb 0a                \tjmp    401e5f <test_getcpu+0x2fe>\n  401e55:\tbf 80 36 40 00       \tmov    $0x403680,%edi\n  401e5a:\te8 e1 f1 ff ff       \tcallq  401040 <puts@plt>\n  401e5f:\t8b 85 38 ff ff ff    \tmov    -0xc8(%rbp),%eax\n  401e65:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n  401e68:\t74 20                \tje     401e8a <test_getcpu+0x329>\n  401e6a:\t8b 85 38 ff ff ff    \tmov    -0xc8(%rbp),%eax\n  401e70:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  401e73:\t89 c6                \tmov    %eax,%esi\n  401e75:\tbf a8 36 40 00       \tmov    $0x4036a8,%edi\n  401e7a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401e7f:\te8 fc f1 ff ff       \tcallq  401080 <printf@plt>\n  401e84:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401e88:\teb 0a                \tjmp    401e94 <test_getcpu+0x333>\n  401e8a:\tbf e0 36 40 00       \tmov    $0x4036e0,%edi\n  401e8f:\te8 ac f1 ff ff       \tcallq  401040 <puts@plt>\n  401e94:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401e97:\tc9                   \tleaveq \n  401e98:\tc3                   \tretq   ", "code_s": "__int64 __fastcall test_getcpu(unsigned int a1) {\n  __int64 result;\n  unsigned int <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  unsigned int <span class=\"supfact\">v5</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  cpu_set_t <span class=\"supfact\">cpuset</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  char <span class=\"supfact\">v11</span>;\n  unsigned int <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  unsigned int <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v15</span> = Number;\n  <span class=\"supfact\">v14</span> = Number;\n  <span class=\"supfact\">v13</span> = Number;\n  printf(String, a1);\n  memset(&<span class=\"supfact\">cpuset</span>, Number, sizeof(<span class=\"supfact\">cpuset</span>));\n  <span class=\"supfact\">v10</span> = (int)a1;\n  if ((unsigned __int64)(int)a1 <= Number)\n    <span class=\"supfact\">cpuset</span>.__bits[<span class=\"supfact\">v10</span> >> Number] |=\n        Number L << (<span class=\"supfact\">v10</span> & Number);\n  if (sched_setaffinity(Number, Number, &<span class=\"supfact\">cpuset</span>)) {\n    printf(String, a1);\n    result = <span class=\"supfact\">v15</span>;\n  } else {\n    <span class=\"supfact\">v12</span> = Number;\n    <span class=\"supfact\">v11</span> = Number;\n    <span class=\"supfact\">v9</span> = sys_getcpu((__int64)&<span class=\"supfact\">v7</span>,\n                                    (__int64)&<span class=\"supfact\">v4</span>, Number L);\n    if (vdso_getcpu)\n      <span class=\"supfact\">v14</span> =\n          vdso_getcpu(&<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v3</span>, Number L);\n    if (vsyscall_map_x)\n      <span class=\"supfact\">v13</span> =\n          MEMORY[Number](&<span class=\"supfact\">v5</span>, &<span class=\"supfact\">v2</span>, Number L);\n    if (!<span class=\"supfact\">v9</span>) {\n      if (<span class=\"supfact\">v7</span> != a1) {\n        printf(String, <span class=\"supfact\">v7</span>, a1);\n        ++<span class=\"supfact\">v15</span>;\n      }\n      <span class=\"supfact\">v11</span> = Number;\n      <span class=\"supfact\">v12</span> = <span class=\"supfact\">v4</span>;\n    }\n    if (vdso_getcpu) {\n      if (<span class=\"supfact\">v14</span>) {\n        puts(String);\n        ++<span class=\"supfact\">v15</span>;\n      } else {\n        if (<span class=\"supfact\">v11</span> != Number) {\n          <span class=\"supfact\">v11</span> = Number;\n          <span class=\"supfact\">v12</span> = <span class=\"supfact\">v3</span>;\n        }\n        if (<span class=\"supfact\">v6</span> == a1) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">v6</span>, a1);\n          ++<span class=\"supfact\">v15</span>;\n        }\n        if (<span class=\"supfact\">v12</span> == <span class=\"supfact\">v3</span>) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">v3</span>, <span class=\"supfact\">v12</span>);\n          ++<span class=\"supfact\">v15</span>;\n        }\n      }\n    }\n    if (vsyscall_map_x) {\n      if (<span class=\"supfact\">v13</span>) {\n        puts(String);\n        ++<span class=\"supfact\">v15</span>;\n      } else {\n        if (<span class=\"supfact\">v11</span> != Number) {\n          <span class=\"supfact\">v11</span> = Number;\n          <span class=\"supfact\">v12</span> = <span class=\"supfact\">v2</span>;\n        }\n        if (<span class=\"supfact\">v5</span> == a1) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">v5</span>, a1);\n          ++<span class=\"supfact\">v15</span>;\n        }\n        if (<span class=\"supfact\">v12</span> == <span class=\"supfact\">v2</span>) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">v2</span>, <span class=\"supfact\">v12</span>);\n          ++<span class=\"supfact\">v15</span>;\n        }\n      }\n    }\n    result = <span class=\"supfact\">v15</span>;\n  }\n  return result;\n}", "code_t": "int __cdecl test_getcpu(int cpu) {\n  int result;\n  unsigned int <span class=\"supfact\">node_vsys</span>;\n  unsigned int <span class=\"supfact\">node_vdso</span>;\n  unsigned int <span class=\"supfact\">node_sys</span>;\n  unsigned int <span class=\"supfact\">cpu_vsys</span>;\n  unsigned int <span class=\"supfact\">cpu_vdso</span>;\n  unsigned int <span class=\"supfact\">cpu_sys</span>;\n  cpu_set_t <span class=\"supfact\">cpuset</span>;\n  __int64 <span class=\"supfact\">ret_sys</span>;\n  size_t <span class=\"supfact\">__cpu</span>;\n  bool <span class=\"supfact\">have_node</span>;\n  unsigned int <span class=\"supfact\">node</span>;\n  __int64 <span class=\"supfact\">ret_vsys</span>;\n  __int64 <span class=\"supfact\">ret_vdso</span>;\n  int <span class=\"supfact\">nerrs</span>;\n  <span class=\"supfact\">nerrs</span> = Number;\n  <span class=\"supfact\">ret_vdso</span> = Number;\n  <span class=\"supfact\">ret_vsys</span> = Number;\n  printf(String, (unsigned int)cpu);\n  memset(&<span class=\"supfact\">cpuset</span>, Number, sizeof(<span class=\"supfact\">cpuset</span>));\n  <span class=\"supfact\">__cpu</span> = cpu;\n  if ((unsigned __int64)cpu <= Number)\n    <span class=\"supfact\">cpuset</span>.__bits[<span class=\"supfact\">__cpu</span> >> Number] |=\n        Number L << (<span class=\"supfact\">__cpu</span> & Number);\n  if (sched_setaffinity(Number, Number, &<span class=\"supfact\">cpuset</span>)) {\n    printf(String, (unsigned int)cpu);\n    result = <span class=\"supfact\">nerrs</span>;\n  } else {\n    <span class=\"supfact\">node</span> = Number;\n    <span class=\"supfact\">have_node</span> = Number;\n    <span class=\"supfact\">ret_sys</span> = sys_getcpu(&<span class=\"supfact\">cpu_sys</span>,\n                                         &<span class=\"supfact\">node_sys</span>, Number L);\n    if (vdso_getcpu)\n      <span class=\"supfact\">ret_vdso</span> = vdso_getcpu(\n          &<span class=\"supfact\">cpu_vdso</span>, &<span class=\"supfact\">node_vdso</span>, Number L);\n    if (vsyscall_map_x)\n      <span class=\"supfact\">ret_vsys</span> = MEMORY[Number](\n          &<span class=\"supfact\">cpu_vsys</span>, &<span class=\"supfact\">node_vsys</span>, Number L);\n    if (!<span class=\"supfact\">ret_sys</span>) {\n      if (<span class=\"supfact\">cpu_sys</span> != cpu) {\n        printf(String, <span class=\"supfact\">cpu_sys</span>, (unsigned int)cpu);\n        ++<span class=\"supfact\">nerrs</span>;\n      }\n      <span class=\"supfact\">have_node</span> = Number;\n      <span class=\"supfact\">node</span> = <span class=\"supfact\">node_sys</span>;\n    }\n    if (vdso_getcpu) {\n      if (<span class=\"supfact\">ret_vdso</span>) {\n        puts(String);\n        ++<span class=\"supfact\">nerrs</span>;\n      } else {\n        if (!<span class=\"supfact\">have_node</span>) {\n          <span class=\"supfact\">have_node</span> = Number;\n          <span class=\"supfact\">node</span> = <span class=\"supfact\">node_vdso</span>;\n        }\n        if (<span class=\"supfact\">cpu_vdso</span> == cpu) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">cpu_vdso</span>, (unsigned int)cpu);\n          ++<span class=\"supfact\">nerrs</span>;\n        }\n        if (<span class=\"supfact\">node</span> == <span class=\"supfact\">node_vdso</span>) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">node_vdso</span>, <span class=\"supfact\">node</span>);\n          ++<span class=\"supfact\">nerrs</span>;\n        }\n      }\n    }\n    if (vsyscall_map_x) {\n      if (<span class=\"supfact\">ret_vsys</span>) {\n        puts(String);\n        ++<span class=\"supfact\">nerrs</span>;\n      } else {\n        if (!<span class=\"supfact\">have_node</span>) {\n          <span class=\"supfact\">have_node</span> = Number;\n          <span class=\"supfact\">node</span> = <span class=\"supfact\">node_vsys</span>;\n        }\n        if (<span class=\"supfact\">cpu_vsys</span> == cpu) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">cpu_vsys</span>, (unsigned int)cpu);\n          ++<span class=\"supfact\">nerrs</span>;\n        }\n        if (<span class=\"supfact\">node</span> == <span class=\"supfact\">node_vsys</span>) {\n          puts(String);\n        } else {\n          printf(String, <span class=\"supfact\">node_vsys</span>, <span class=\"supfact\">node</span>);\n          ++<span class=\"supfact\">nerrs</span>;\n        }\n      }\n    }\n    result = <span class=\"supfact\">nerrs</span>;\n  }\n  return result;\n}", "var": [{"name": "cpuset", "type": "struct cpu_set_t { __cpu_mask[16] __bits; }", "ref_name": "cpuset", "ref_type": "struct cpu_set_t { __cpu_mask[16] __bits; }"}], "body_in_train": false}, {"repo_owner": "ireader", "repo_name": "sdk", "path": "ireader/sdk/8cfb4007e0f9c4befce6030950fa80504c913159a90ef69ae7f988acf2219141", "path_in_repo": "ireader/sdk//source/port/aio-socket-epoll.o", "objdump": "000000000000108f <epoll_recv_v>:\n    108f:\t55                   \tpush   %rbp\n    1090:\t48 89 e5             \tmov    %rsp,%rbp\n    1093:\t53                   \tpush   %rbx\n    1094:\t48 83 ec 58          \tsub    $0x58,%rsp\n    1098:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    109c:\t89 75 a4             \tmov    %esi,-0x5c(%rbp)\n    109f:\t89 55 a0             \tmov    %edx,-0x60(%rbp)\n    10a2:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    10a6:\tba 38 00 00 00       \tmov    $0x38,%edx\n    10ab:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    10b0:\t48 89 c7             \tmov    %rax,%rdi\n    10b3:\te8 00 00 00 00       \tcallq  10b8 <epoll_recv_v+0x29>\n    10b8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    10bc:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n    10c0:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    10c4:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    10c8:\t8b 40 58             \tmov    0x58(%rax),%eax\n    10cb:\t48 98                \tcltq   \n    10cd:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    10d1:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    10d5:\t8b 40 10             \tmov    0x10(%rax),%eax\n    10d8:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n    10dc:\tba 00 00 00 00       \tmov    $0x0,%edx\n    10e1:\t48 89 ce             \tmov    %rcx,%rsi\n    10e4:\t89 c7                \tmov    %eax,%edi\n    10e6:\te8 00 00 00 00       \tcallq  10eb <epoll_recv_v+0x5c>\n    10eb:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    10ef:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    10f4:\t78 25                \tjs     111b <epoll_recv_v+0x8c>\n    10f6:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    10fa:\t48 8b 48 40          \tmov    0x40(%rax),%rcx\n    10fe:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1102:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1106:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    110a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    110f:\t48 89 c7             \tmov    %rax,%rdi\n    1112:\tff d1                \tcallq  *%rcx\n    1114:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1119:\teb 37                \tjmp    1152 <epoll_recv_v+0xc3>\n    111b:\t83 7d a4 00          \tcmpl   $0x0,-0x5c(%rbp)\n    111f:\t75 09                \tjne    112a <epoll_recv_v+0x9b>\n    1121:\te8 00 00 00 00       \tcallq  1126 <epoll_recv_v+0x97>\n    1126:\t8b 00                \tmov    (%rax),%eax\n    1128:\teb 28                \tjmp    1152 <epoll_recv_v+0xc3>\n    112a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    112e:\t48 8b 58 40          \tmov    0x40(%rax),%rbx\n    1132:\te8 00 00 00 00       \tcallq  1137 <epoll_recv_v+0xa8>\n    1137:\t8b 08                \tmov    (%rax),%ecx\n    1139:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    113d:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    1141:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1146:\t89 ce                \tmov    %ecx,%esi\n    1148:\t48 89 c7             \tmov    %rax,%rdi\n    114b:\tff d3                \tcallq  *%rbx\n    114d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1152:\t48 83 c4 58          \tadd    $0x58,%rsp\n    1156:\t5b                   \tpop    %rbx\n    1157:\t5d                   \tpop    %rbp\n    1158:\tc3                   \tretq   ", "code_s": "__int64 __fastcall epoll_recv_v(__int64 a1, int a2) {\n  __int64 result;\n  void(__fastcall * v3)(_QWORD, _QWORD, _QWORD);\n  int *v4;\n  struct msghdr <span class=\"supfact\">s</span>;\n  ssize_t <span class=\"supfact\">v6</span>;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.msg_iov = *(iovec **)(a1 + Number);\n  <span class=\"supfact\">s</span>.msg_iovlen = *(int *)(a1 + Number);\n  <span class=\"supfact\">v6</span> =\n      recvmsg(*(_DWORD *)(a1 + Number), &<span class=\"supfact\">s</span>, Number);\n  if (<span class=\"supfact\">v6</span> < Number) {\n    if (a2) {\n      v3 = *(void(__fastcall **)(_QWORD, _QWORD, _QWORD))(a1 + Number);\n      v4 = _errno_location();\n      v3(*(_QWORD *)(a1 + Number), (unsigned int)*v4, Number L);\n      result = Number L;\n    } else {\n      result = (unsigned int)*_errno_location();\n    }\n  } else {\n    (*(void(__fastcall **)(_QWORD, _QWORD, ssize_t))(a1 + Number))(\n        *(_QWORD *)(a1 + Number), Number L, <span class=\"supfact\">v6</span>);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl epoll_recv_v(epoll_context *ctx, int flags, int error) {\n  int result;\n  aio_onaccept v4;\n  int *v5;\n  msghdr <span class=\"supfact\">msg</span>;\n  ssize_t <span class=\"supfact\">r</span>;\n  memset(&<span class=\"supfact\">msg</span>, Number, sizeof(<span class=\"supfact\">msg</span>));\n  <span class=\"supfact\">msg</span>.msg_iov = ctx->in.recv_v.vec;\n  <span class=\"supfact\">msg</span>.msg_iovlen = ctx->in.recv_v.n;\n  <span class=\"supfact\">r</span> = recvmsg(ctx->socket, &<span class=\"supfact\">msg</span>, Number);\n  if (<span class=\"supfact\">r</span> < Number) {\n    if (flags) {\n      v4 = ctx->in.accept.proc;\n      v5 = _errno_location();\n      ((void(__fastcall *)(void *, _QWORD, _QWORD))v4)(\n          ctx->in.accept.param, (unsigned int)*v5, Number L);\n      result = Number;\n    } else {\n      result = *_errno_location();\n    }\n  } else {\n    ((void(__fastcall *)(void *, _QWORD, ssize_t))ctx->in.accept.proc)(\n        ctx->in.accept.param, Number L, <span class=\"supfact\">r</span>);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "s", "type": "struct msghdr { void * msg_name; socklen_t msg_namelen; PADDING (4); iovec * msg_iov; size_t msg_iovlen; void * msg_control; size_t msg_controllen; int msg_flags; PADDING (4); }", "ref_name": "msg", "ref_type": "struct msghdr { void * msg_name; socklen_t msg_namelen; PADDING (4); iovec * msg_iov; size_t msg_iovlen; void * msg_control; size_t msg_controllen; int msg_flags; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/167d712463e0992729e10389549ca204bb5a890bb1dd0460101cee04a39115ca", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_f2.o", "objdump": "000000000000920e <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring>:\n    920e:\t55                   \tpush   %rbp\n    920f:\t48 89 e5             \tmov    %rsp,%rbp\n    9212:\t53                   \tpush   %rbx\n    9213:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    921a:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    921e:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n    9222:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    9229:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    922d:\t48 89 c7             \tmov    %rax,%rdi\n    9230:\te8 00 00 00 00       \tcallq  9235 <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n    9235:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    923c:\t00 \n    923d:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    9244:\t00 \n    9245:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    924c:\t00 \n    924d:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    9254:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    925b:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n    925f:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    9263:\t48 89 ce             \tmov    %rcx,%rsi\n    9266:\t48 89 c7             \tmov    %rax,%rdi\n    9269:\te8 14 f3 ff ff       \tcallq  8582 <_ZL23construct_ioport_finalbR8device_tR11tagged_listI17input_port_configER7astring>\n    926e:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    9272:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    9276:\tba 00 00 00 00       \tmov    $0x0,%edx\n    927b:\t48 89 ce             \tmov    %rcx,%rsi\n    927e:\t48 89 c7             \tmov    %rax,%rdi\n    9281:\te8 00 00 00 00       \tcallq  9286 <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x78>\n    9286:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    928a:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    9291:\t00 \n    9292:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    9299:\t00 \n    929a:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    92a1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    92a5:\t41 b8 0a 00 00 00    \tmov    $0xa,%r8d\n    92ab:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n    92b0:\tba 30 00 00 00       \tmov    $0x30,%edx\n    92b5:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    92ba:\t48 89 c7             \tmov    %rax,%rdi\n    92bd:\te8 00 00 00 00       \tcallq  92c2 <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0xb4>\n    92c2:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    92c6:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    92cd:\t00 \n    92ce:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    92d2:\t8b 00                \tmov    (%rax),%eax\n    92d4:\t83 e0 10             \tand    $0x10,%eax\n    92d7:\t89 c1                \tmov    %eax,%ecx\n    92d9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    92dd:\tba 15 00 00 00       \tmov    $0x15,%edx\n    92e2:\t89 ce                \tmov    %ecx,%esi\n    92e4:\t48 89 c7             \tmov    %rax,%rdi\n    92e7:\te8 00 00 00 00       \tcallq  92ec <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0xde>\n    92ec:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    92f0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    92f4:\t8b 00                \tmov    (%rax),%eax\n    92f6:\t83 e0 30             \tand    $0x30,%eax\n    92f9:\t89 c1                \tmov    %eax,%ecx\n    92fb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    92ff:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    9304:\t89 ce                \tmov    %ecx,%esi\n    9306:\t48 89 c7             \tmov    %rax,%rdi\n    9309:\te8 00 00 00 00       \tcallq  930e <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x100>\n    930e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    9312:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9316:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n    931b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    9320:\t48 89 c7             \tmov    %rax,%rdi\n    9323:\te8 00 00 00 00       \tcallq  9328 <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x11a>\n    9328:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    932c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    9330:\t8b 00                \tmov    (%rax),%eax\n    9332:\t83 e0 20             \tand    $0x20,%eax\n    9335:\t89 c1                \tmov    %eax,%ecx\n    9337:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    933b:\tba 22 00 00 00       \tmov    $0x22,%edx\n    9340:\t89 ce                \tmov    %ecx,%esi\n    9342:\t48 89 c7             \tmov    %rax,%rdi\n    9345:\te8 00 00 00 00       \tcallq  934a <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x13c>\n    934a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    934e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    9352:\t41 b8 0b 00 00 00    \tmov    $0xb,%r8d\n    9358:\tb9 c0 00 00 00       \tmov    $0xc0,%ecx\n    935d:\tba c0 00 00 00       \tmov    $0xc0,%edx\n    9362:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    9367:\t48 89 c7             \tmov    %rax,%rdi\n    936a:\te8 00 00 00 00       \tcallq  936f <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x161>\n    936f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    9373:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    937a:\t00 \n    937b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    937f:\t8b 00                \tmov    (%rax),%eax\n    9381:\t83 e0 40             \tand    $0x40,%eax\n    9384:\t89 c1                \tmov    %eax,%ecx\n    9386:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    938a:\tba 15 00 00 00       \tmov    $0x15,%edx\n    938f:\t89 ce                \tmov    %ecx,%esi\n    9391:\t48 89 c7             \tmov    %rax,%rdi\n    9394:\te8 00 00 00 00       \tcallq  9399 <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x18b>\n    9399:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    939d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    93a1:\t8b 00                \tmov    (%rax),%eax\n    93a3:\t25 c0 00 00 00       \tand    $0xc0,%eax\n    93a8:\t89 c1                \tmov    %eax,%ecx\n    93aa:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    93ae:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    93b3:\t89 ce                \tmov    %ecx,%esi\n    93b5:\t48 89 c7             \tmov    %rax,%rdi\n    93b8:\te8 00 00 00 00       \tcallq  93bd <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x1af>\n    93bd:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    93c1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    93c5:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n    93ca:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    93cf:\t48 89 c7             \tmov    %rax,%rdi\n    93d2:\te8 00 00 00 00       \tcallq  93d7 <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x1c9>\n    93d7:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    93db:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    93df:\t8b 00                \tmov    (%rax),%eax\n    93e1:\t25 80 00 00 00       \tand    $0x80,%eax\n    93e6:\t89 c1                \tmov    %eax,%ecx\n    93e8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    93ec:\tba 22 00 00 00       \tmov    $0x22,%edx\n    93f1:\t89 ce                \tmov    %ecx,%esi\n    93f3:\t48 89 c7             \tmov    %rax,%rdi\n    93f6:\te8 00 00 00 00       \tcallq  93fb <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x1ed>\n    93fb:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    93ff:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    9403:\t48 89 c7             \tmov    %rax,%rdi\n    9406:\te8 00 00 00 00       \tcallq  940b <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x1fd>\n    940b:\teb 1a                \tjmp    9427 <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n    940d:\t48 89 c3             \tmov    %rax,%rbx\n    9410:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    9414:\t48 89 c7             \tmov    %rax,%rdi\n    9417:\te8 00 00 00 00       \tcallq  941c <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x20e>\n    941c:\t48 89 d8             \tmov    %rbx,%rax\n    941f:\t48 89 c7             \tmov    %rax,%rdi\n    9422:\te8 00 00 00 00       \tcallq  9427 <_ZL24construct_ioport_finalbjR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n    9427:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    942e:\t5b                   \tpop    %rbx\n    942f:\t5d                   \tpop    %rbp\n    9430:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_finalbj(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  _DWORD *<span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v6</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  construct_ioport_finalb(a1, a2, a3);\n  <span class=\"supfact\">v6</span> = ioconfig_modify_port(a2, a1, String);\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">v7</span> = (_DWORD *)ioconfig_alloc_field(\n      <span class=\"supfact\">v6</span>, Number L, Number L, Number L, Number L);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> =\n      ioconfig_alloc_setting(<span class=\"supfact\">v7</span>, Number L, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v7</span> = (_DWORD *)ioconfig_alloc_field(\n      <span class=\"supfact\">v6</span>, Number L, Number L, Number L, Number L);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> =\n      ioconfig_alloc_setting(<span class=\"supfact\">v7</span>, Number L, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl construct_ioport_finalbj(device_t *owner, ioport_list *portlist,\n                                      astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value <span class=\"supfact\">maskbits</span>;\n  input_port_config *<span class=\"supfact\">curport</span>;\n  input_field_config *<span class=\"supfact\">curfield</span>;\n  input_setting_config *<span class=\"supfact\">cursetting</span>;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">curfield</span> = Number L;\n  <span class=\"supfact\">curport</span> = Number L;\n  <span class=\"supfact\">maskbits</span> = Number;\n  construct_ioport_finalb(owner, portlist, errorbuf);\n  <span class=\"supfact\">curport</span> =\n      (input_port_config *)ioconfig_modify_port(portlist, owner, String);\n  <span class=\"supfact\">curfield</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">maskbits</span> = Number;\n  <span class=\"supfact\">curfield</span> = (input_field_config *)ioconfig_alloc_field(\n      <span class=\"supfact\">curport</span>, Number, Number, Number,\n      (const char *)&loc_8 + Number);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_14 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_1A + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, Number, (const char *)&loc_1D + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_21 + Number);\n  <span class=\"supfact\">curfield</span> = (input_field_config *)ioconfig_alloc_field(\n      <span class=\"supfact\">curport</span>, Number, Number, Number,\n      (const char *)&loc_8 + Number);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_14 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_1A + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, Number, (const char *)&loc_1D + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_21 + Number);\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"code_s": "rocksdb RandomAccessFile *__fastcall rocksdb RandomAccessFile\nInvalidateCache(rocksdb RandomAccessFile *this) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  <span class=\"supfact\">v3</span>[Number] = (__int64)&unk_3314;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  <span class=\"supfact\">v2</span>[Number] = (__int64)String;\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  rocksdb Status Status(this, Number L, Number L, <span class=\"supfact\">v2</span>,\n                        <span class=\"supfact\">v3</span>);\n  return this;\n}", "code_t": "rocksdb Status *__fastcall rocksdb RandomAccessFile\nInvalidateCache(rocksdb Status *a1, rocksdb RandomAccessFile *const this) {\n  rocksdb Slice <span class=\"supfact\">v3</span>;\n  rocksdb Slice <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span>.data_ = (const char *)&unk_3314;\n  <span class=\"supfact\">v4</span>.size_ = Number L;\n  <span class=\"supfact\">v3</span>.data_ = String;\n  <span class=\"supfact\">v3</span>.size_ = Number L;\n  rocksdb Status Status(a1, kNotSupported, kNone, &<span class=\"supfact\">v3</span>,\n                        &<span class=\"supfact\">v4</span>);\n  return a1;\n}", "var": [{"name": "v3", "type": "struct rocksdb::Slice { const char * data_; size_t size_; }", "ref_name": "v4", "ref_type": "struct rocksdb::Slice { const char * data_; size_t size_; }"}, {"name": "v2", "type": "struct rocksdb::Slice { const char * data_; size_t size_; }", "ref_name": "v3", "ref_type": "struct rocksdb::Slice { const char * data_; size_t size_; }"}], "body_in_train": false}, {"repo_owner": "fallenworld", "repo_name": "Access", "path": "fallenworld/Access/5aab417b65fb9ff6e99de2d6b25f683af303fcb33c6b7aeba09b18f937f1d8f2", "path_in_repo": "fallenworld/Access//access_helper.o", "objdump": "00000000000002dd <open_clientfd>:\n 2dd:\t55                   \tpush   %rbp\n 2de:\t48 89 e5             \tmov    %rsp,%rbp\n 2e1:\t48 83 ec 40          \tsub    $0x40,%rsp\n 2e5:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 2e9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 2ed:\t48 89 c7             \tmov    %rax,%rdi\n 2f0:\te8 00 00 00 00       \tcallq  2f5 <open_clientfd+0x18>\n 2f5:\t48 83 c0 01          \tadd    $0x1,%rax\n 2f9:\t48 89 c7             \tmov    %rax,%rdi\n 2fc:\te8 00 00 00 00       \tcallq  301 <open_clientfd+0x24>\n 301:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 305:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 30a:\t75 0a                \tjne    316 <open_clientfd+0x39>\n 30c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 311:\te9 2c 01 00 00       \tjmpq   442 <open_clientfd+0x165>\n 316:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 31a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 31e:\t48 89 d6             \tmov    %rdx,%rsi\n 321:\t48 89 c7             \tmov    %rax,%rdi\n 324:\te8 00 00 00 00       \tcallq  329 <open_clientfd+0x4c>\n 329:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 32e:\te8 00 00 00 00       \tcallq  333 <open_clientfd+0x56>\n 333:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 336:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 33a:\t79 20                \tjns    35c <open_clientfd+0x7f>\n 33c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 340:\t48 89 c7             \tmov    %rax,%rdi\n 343:\te8 00 00 00 00       \tcallq  348 <open_clientfd+0x6b>\n 348:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 34b:\t89 c7                \tmov    %eax,%edi\n 34d:\te8 00 00 00 00       \tcallq  352 <open_clientfd+0x75>\n 352:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 357:\te9 e6 00 00 00       \tjmpq   442 <open_clientfd+0x165>\n 35c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 360:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 365:\t48 89 c7             \tmov    %rax,%rdi\n 368:\te8 00 00 00 00       \tcallq  36d <open_clientfd+0x90>\n 36d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 371:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 376:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 37b:\te8 00 00 00 00       \tcallq  380 <open_clientfd+0xa3>\n 380:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 384:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 388:\tba 10 00 00 00       \tmov    $0x10,%edx\n 38d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 392:\t48 89 c7             \tmov    %rax,%rdi\n 395:\te8 00 00 00 00       \tcallq  39a <open_clientfd+0xbd>\n 39a:\t66 c7 45 d0 02 00    \tmovw   $0x2,-0x30(%rbp)\n 3a0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 3a4:\t48 89 c7             \tmov    %rax,%rdi\n 3a7:\te8 00 00 00 00       \tcallq  3ac <open_clientfd+0xcf>\n 3ac:\t0f b7 c0             \tmovzwl %ax,%eax\n 3af:\t89 c7                \tmov    %eax,%edi\n 3b1:\te8 00 00 00 00       \tcallq  3b6 <open_clientfd+0xd9>\n 3b6:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n 3ba:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 3be:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n 3c2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3c6:\t48 89 c6             \tmov    %rax,%rsi\n 3c9:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 3ce:\te8 00 00 00 00       \tcallq  3d3 <open_clientfd+0xf6>\n 3d3:\t85 c0                \ttest   %eax,%eax\n 3d5:\t7f 27                \tjg     3fe <open_clientfd+0x121>\n 3d7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3db:\t48 89 c7             \tmov    %rax,%rdi\n 3de:\te8 00 00 00 00       \tcallq  3e3 <open_clientfd+0x106>\n 3e3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 3e8:\te8 00 00 00 00       \tcallq  3ed <open_clientfd+0x110>\n 3ed:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 3f0:\t89 c7                \tmov    %eax,%edi\n 3f2:\te8 00 00 00 00       \tcallq  3f7 <open_clientfd+0x11a>\n 3f7:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 3fc:\teb 44                \tjmp    442 <open_clientfd+0x165>\n 3fe:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n 402:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 405:\tba 10 00 00 00       \tmov    $0x10,%edx\n 40a:\t48 89 ce             \tmov    %rcx,%rsi\n 40d:\t89 c7                \tmov    %eax,%edi\n 40f:\te8 00 00 00 00       \tcallq  414 <open_clientfd+0x137>\n 414:\t85 c0                \ttest   %eax,%eax\n 416:\t79 27                \tjns    43f <open_clientfd+0x162>\n 418:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 41c:\t48 89 c7             \tmov    %rax,%rdi\n 41f:\te8 00 00 00 00       \tcallq  424 <open_clientfd+0x147>\n 424:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 429:\te8 00 00 00 00       \tcallq  42e <open_clientfd+0x151>\n 42e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 431:\t89 c7                \tmov    %eax,%edi\n 433:\te8 00 00 00 00       \tcallq  438 <open_clientfd+0x15b>\n 438:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 43d:\teb 03                \tjmp    442 <open_clientfd+0x165>\n 43f:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 442:\tc9                   \tleaveq \n 443:\tc3                   \tretq   ", "code_s": "__int64 __fastcall open_clientfd(const char *a1) {\n  size_t v1;\n  __int64 result;\n  uint16_t v3;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  char *<span class=\"supfact\">nptr</span>;\n  char *<span class=\"supfact\">cp</span>;\n  int <span class=\"supfact\">fd</span>;\n  char *<span class=\"supfact\">dest</span>;\n  v1 = strlen(a1);\n  <span class=\"supfact\">dest</span> = (char *)malloc(v1 + Number);\n  if (!<span class=\"supfact\">dest</span>)\n    return Number;\n  strcpy(<span class=\"supfact\">dest</span>, a1);\n  <span class=\"supfact\">fd</span> = create_tcp_socket();\n  if (<span class=\"supfact\">fd</span> >= Number) {\n    <span class=\"supfact\">cp</span> = strtok(<span class=\"supfact\">dest</span>, String);\n    <span class=\"supfact\">nptr</span> = strtok(Number L, String);\n    memset(&<span class=\"supfact\">addr</span>, Number, sizeof(<span class=\"supfact\">addr</span>));\n    <span class=\"supfact\">addr</span>.sa_family = Number;\n    v3 = atoi(<span class=\"supfact\">nptr</span>);\n    *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(v3);\n    if (inet_pton(Number, <span class=\"supfact\">cp</span>,\n                  &<span class=\"supfact\">addr</span>.sa_data[Number]) > Number) {\n      if (connect(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">addr</span>, Number) >=\n          Number) {\n        result = (unsigned int)<span class=\"supfact\">fd</span>;\n      } else {\n        free(<span class=\"supfact\">dest</span>);\n        perror(String);\n        close(<span class=\"supfact\">fd</span>);\n        result = Number;\n      }\n    } else {\n      free(<span class=\"supfact\">dest</span>);\n      puts(String);\n      close(<span class=\"supfact\">fd</span>);\n      result = Number;\n    }\n  } else {\n    free(<span class=\"supfact\">dest</span>);\n    close(<span class=\"supfact\">fd</span>);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl open_clientfd(const char *hostaddress) {\n  size_t v1;\n  int result;\n  uint16_t v3;\n  sockaddr_in <span class=\"supfact\">server_address</span>;\n  char *<span class=\"supfact\">port_str</span>;\n  char *<span class=\"supfact\">ip_str</span>;\n  int <span class=\"supfact\">clientfd</span>;\n  char *<span class=\"supfact\">address_str</span>;\n  v1 = strlen(hostaddress);\n  <span class=\"supfact\">address_str</span> = (char *)malloc(v1 + Number);\n  if (!<span class=\"supfact\">address_str</span>)\n    return Number;\n  strcpy(<span class=\"supfact\">address_str</span>, hostaddress);\n  <span class=\"supfact\">clientfd</span> = create_tcp_socket();\n  if (<span class=\"supfact\">clientfd</span> >= Number) {\n    <span class=\"supfact\">ip_str</span> = strtok(<span class=\"supfact\">address_str</span>, String);\n    <span class=\"supfact\">port_str</span> = strtok(Number L, String);\n    memset(&<span class=\"supfact\">server_address</span>, Number,\n           sizeof(<span class=\"supfact\">server_address</span>));\n    <span class=\"supfact\">server_address</span>.sin_family = Number;\n    v3 = atoi(<span class=\"supfact\">port_str</span>);\n    <span class=\"supfact\">server_address</span>.sin_port = htons(v3);\n    if (inet_pton(Number, <span class=\"supfact\">ip_str</span>,\n                  &<span class=\"supfact\">server_address</span>.sin_addr) > Number) {\n      if (connect(<span class=\"supfact\">clientfd</span>,\n                  (const struct sockaddr *)&<span class=\"supfact\">server_address</span>,\n                  Number) >= Number) {\n        result = <span class=\"supfact\">clientfd</span>;\n      } else {\n        free(<span class=\"supfact\">address_str</span>);\n        perror(String);\n        close(<span class=\"supfact\">clientfd</span>);\n        result = Number;\n      }\n    } else {\n      free(<span class=\"supfact\">address_str</span>);\n      puts(String);\n      close(<span class=\"supfact\">clientfd</span>);\n      result = Number;\n    }\n  } else {\n    free(<span class=\"supfact\">address_str</span>);\n    close(<span class=\"supfact\">clientfd</span>);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "server_address", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "mDibyo", "repo_name": "py-dlib", "path": "mDibyo/py-dlib/d00a54a73f0a7862888db48f974a0404f85faa9914b1976ae3b066f6b9db7f21", "path_in_repo": "mDibyo/py-dlib/dlib/test/find_max_factor_graph_nmplp.o", "objdump": "0000000000002e52 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE>:\n    2e52:\t55                   \tpush   %rbp\n    2e53:\t48 89 e5             \tmov    %rsp,%rbp\n    2e56:\t53                   \tpush   %rbx\n    2e57:\t48 83 ec 58          \tsub    $0x58,%rsp\n    2e5b:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    2e5f:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n    2e63:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2e67:\t48 89 c7             \tmov    %rax,%rdi\n    2e6a:\te8 00 00 00 00       \tcallq  2e6f <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x1d>\n    2e6f:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n    2e76:\t00 \n    2e77:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2e7b:\t48 89 c7             \tmov    %rax,%rdi\n    2e7e:\te8 17 d5 ff ff       \tcallq  39a <_ZNK12_GLOBAL__N_117map_problem_chain15number_of_nodesEv>\n    2e83:\t48 89 c1             \tmov    %rax,%rcx\n    2e86:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    2e8a:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2e8e:\t48 89 ce             \tmov    %rcx,%rsi\n    2e91:\t48 89 c7             \tmov    %rax,%rdi\n    2e94:\te8 00 00 00 00       \tcallq  2e99 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x47>\n    2e99:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 2ea1 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x4f>\n    2ea0:\t00 \n    2ea1:\tf2 0f 11 45 e8       \tmovsd  %xmm0,-0x18(%rbp)\n    2ea6:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    2ead:\t00 \n    2eae:\t48 81 7d e0 fe 00 00 \tcmpq   $0xfe,-0x20(%rbp)\n    2eb5:\t00 \n    2eb6:\t0f 87 71 01 00 00    \tja     302d <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x1db>\n    2ebc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2ec0:\t83 e0 01             \tand    $0x1,%eax\n    2ec3:\t48 85 c0             \ttest   %rax,%rax\n    2ec6:\t0f 95 c3             \tsetne  %bl\n    2ec9:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2ecd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2ed2:\t48 89 c7             \tmov    %rax,%rdi\n    2ed5:\te8 00 00 00 00       \tcallq  2eda <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x88>\n    2eda:\t0f b6 d3             \tmovzbl %bl,%edx\n    2edd:\t48 89 10             \tmov    %rdx,(%rax)\n    2ee0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2ee4:\t83 e0 02             \tand    $0x2,%eax\n    2ee7:\t48 85 c0             \ttest   %rax,%rax\n    2eea:\t0f 95 c3             \tsetne  %bl\n    2eed:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2ef1:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    2ef6:\t48 89 c7             \tmov    %rax,%rdi\n    2ef9:\te8 00 00 00 00       \tcallq  2efe <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0xac>\n    2efe:\t0f b6 d3             \tmovzbl %bl,%edx\n    2f01:\t48 89 10             \tmov    %rdx,(%rax)\n    2f04:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2f08:\t83 e0 04             \tand    $0x4,%eax\n    2f0b:\t48 85 c0             \ttest   %rax,%rax\n    2f0e:\t0f 95 c3             \tsetne  %bl\n    2f11:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2f15:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    2f1a:\t48 89 c7             \tmov    %rax,%rdi\n    2f1d:\te8 00 00 00 00       \tcallq  2f22 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0xd0>\n    2f22:\t0f b6 d3             \tmovzbl %bl,%edx\n    2f25:\t48 89 10             \tmov    %rdx,(%rax)\n    2f28:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2f2c:\t83 e0 08             \tand    $0x8,%eax\n    2f2f:\t48 85 c0             \ttest   %rax,%rax\n    2f32:\t0f 95 c3             \tsetne  %bl\n    2f35:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2f39:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    2f3e:\t48 89 c7             \tmov    %rax,%rdi\n    2f41:\te8 00 00 00 00       \tcallq  2f46 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0xf4>\n    2f46:\t0f b6 d3             \tmovzbl %bl,%edx\n    2f49:\t48 89 10             \tmov    %rdx,(%rax)\n    2f4c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2f50:\t83 e0 10             \tand    $0x10,%eax\n    2f53:\t48 85 c0             \ttest   %rax,%rax\n    2f56:\t0f 95 c3             \tsetne  %bl\n    2f59:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2f5d:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    2f62:\t48 89 c7             \tmov    %rax,%rdi\n    2f65:\te8 00 00 00 00       \tcallq  2f6a <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x118>\n    2f6a:\t0f b6 d3             \tmovzbl %bl,%edx\n    2f6d:\t48 89 10             \tmov    %rdx,(%rax)\n    2f70:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2f74:\t83 e0 20             \tand    $0x20,%eax\n    2f77:\t48 85 c0             \ttest   %rax,%rax\n    2f7a:\t0f 95 c3             \tsetne  %bl\n    2f7d:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2f81:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    2f86:\t48 89 c7             \tmov    %rax,%rdi\n    2f89:\te8 00 00 00 00       \tcallq  2f8e <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x13c>\n    2f8e:\t0f b6 d3             \tmovzbl %bl,%edx\n    2f91:\t48 89 10             \tmov    %rdx,(%rax)\n    2f94:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2f98:\t83 e0 40             \tand    $0x40,%eax\n    2f9b:\t48 85 c0             \ttest   %rax,%rax\n    2f9e:\t0f 95 c3             \tsetne  %bl\n    2fa1:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2fa5:\tbe 06 00 00 00       \tmov    $0x6,%esi\n    2faa:\t48 89 c7             \tmov    %rax,%rdi\n    2fad:\te8 00 00 00 00       \tcallq  2fb2 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x160>\n    2fb2:\t0f b6 d3             \tmovzbl %bl,%edx\n    2fb5:\t48 89 10             \tmov    %rdx,(%rax)\n    2fb8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2fbc:\t25 80 00 00 00       \tand    $0x80,%eax\n    2fc1:\t48 85 c0             \ttest   %rax,%rax\n    2fc4:\t0f 95 c3             \tsetne  %bl\n    2fc7:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    2fcb:\tbe 07 00 00 00       \tmov    $0x7,%esi\n    2fd0:\t48 89 c7             \tmov    %rax,%rdi\n    2fd3:\te8 00 00 00 00       \tcallq  2fd8 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x186>\n    2fd8:\t0f b6 d3             \tmovzbl %bl,%edx\n    2fdb:\t48 89 10             \tmov    %rdx,(%rax)\n    2fde:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    2fe2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    2fe6:\t48 89 d6             \tmov    %rdx,%rsi\n    2fe9:\t48 89 c7             \tmov    %rax,%rdi\n    2fec:\te8 10 fd ff ff       \tcallq  2d01 <_ZN12_GLOBAL__N_116find_total_scoreINS_17map_problem_chainEEEdRKT_RKSt6vectorImSaImEE>\n    2ff1:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n    2ff6:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    2ffa:\tf2 0f 10 45 d8       \tmovsd  -0x28(%rbp),%xmm0\n    2fff:\t66 0f 2f 45 e8       \tcomisd -0x18(%rbp),%xmm0\n    3004:\t76 1d                \tjbe    3023 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x1d1>\n    3006:\tf2 0f 10 45 d8       \tmovsd  -0x28(%rbp),%xmm0\n    300b:\tf2 0f 11 45 e8       \tmovsd  %xmm0,-0x18(%rbp)\n    3010:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    3014:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    3018:\t48 89 d6             \tmov    %rdx,%rsi\n    301b:\t48 89 c7             \tmov    %rax,%rdi\n    301e:\te8 00 00 00 00       \tcallq  3023 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x1d1>\n    3023:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n    3028:\te9 81 fe ff ff       \tjmpq   2eae <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x5c>\n    302d:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    3031:\t48 89 c7             \tmov    %rax,%rdi\n    3034:\te8 00 00 00 00       \tcallq  3039 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x1e7>\n    3039:\teb 1a                \tjmp    3055 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x203>\n    303b:\t48 89 c3             \tmov    %rax,%rbx\n    303e:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    3042:\t48 89 c7             \tmov    %rax,%rdi\n    3045:\te8 00 00 00 00       \tcallq  304a <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x1f8>\n    304a:\t48 89 d8             \tmov    %rbx,%rax\n    304d:\t48 89 c7             \tmov    %rax,%rdi\n    3050:\te8 00 00 00 00       \tcallq  3055 <_ZN12_GLOBAL__N_139brute_force_find_max_factor_graph_nmplpINS_17map_problem_chainEEEvRKT_RSt6vectorImSaImEE+0x203>\n    3055:\t48 83 c4 58          \tadd    $0x58,%rsp\n    3059:\t5b                   \tpop    %rbx\n    305a:\t5d                   \tpop    %rbp\n    305b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ` anonymous namespace ' brute_force_find_max_factor_graph_nmplp < ` anonymous namespace ' map_problem_chain >\n    (_anonymous_namespace_ map_problem_chain * a1, __int64 a2) {\n  double v2;\n  __int64 v3;\n  bool v4;\n  bool v5;\n  bool v6;\n  bool v7;\n  bool v8;\n  bool v9;\n  bool v10;\n  bool v11;\n  char <span class=\"supfact\">v13</span>[Number];\n  __int64 <span class=\"supfact\">v14</span>;\n  double <span class=\"supfact\">v15</span>;\n  unsigned __int64 <span class=\"supfact\">i</span>;\n  double <span class=\"supfact\">v17</span>;\n  v2 = std vector<unsigned long> vector(<span class=\"supfact\">v13</span>);\n  <span class=\"supfact\">v14</span> = Number L;\n  v3 = ` anonymous namespace ' map_problem_chain number_of_nodes ( a1 ) ; std vector < unsigned long > resize ( <span class=\"supfact\">v13</span> , v3 , & <span class=\"supfact\">v14</span> , v2 ) ; <span class=\"supfact\">v17</span> = - INFINITY ; for ( <span class=\"supfact\">i</span> = Number L ; <span class=\"supfact\">i</span> <= Number ; ++ <span class=\"supfact\">i</span> ) { v4 = ( <span class=\"supfact\">i</span> & Number ) != Number ; * ( _QWORD * ) std vector < unsigned long > operator [ ] ( <span class=\"supfact\">v13</span> , Number L ) = v4 ; v5 = ( <span class=\"supfact\">i</span> & Number ) != Number ; * ( _QWORD * ) std vector < unsigned long > operator [ ] ( <span class=\"supfact\">v13</span> , Number L ) = v5 ; v6 = ( <span class=\"supfact\">i</span> & Number ) != Number ; * ( _QWORD * ) std vector < unsigned long > operator [ ] ( <span class=\"supfact\">v13</span> , Number L ) = v6 ; v7 = ( <span class=\"supfact\">i</span> & Number ) != Number ; * ( _QWORD * ) std vector < unsigned long > operator [ ] ( <span class=\"supfact\">v13</span> , Number L ) = v7 ; v8 = ( <span class=\"supfact\">i</span> & Number ) != Number ; * ( _QWORD * ) std vector < unsigned long > operator [ ] ( <span class=\"supfact\">v13</span> , Number L ) = v8 ; v9 = ( <span class=\"supfact\">i</span> & Number ) != Number ; * ( _QWORD * ) std vector < unsigned long > operator [ ] ( <span class=\"supfact\">v13</span> , Number L ) = v9 ; v10 = ( <span class=\"supfact\">i</span> & Number ) != Number ; * ( _QWORD * ) std vector < unsigned long > operator [ ] ( <span class=\"supfact\">v13</span> , Number L ) = v10 ; v11 = ( <span class=\"supfact\">i</span> & Number ) != Number ; * ( _QWORD * ) std vector < unsigned long > operator [ ] ( <span class=\"supfact\">v13</span> , Number L ) = v11 ; <span class=\"supfact\">v15</span> = ` anonymous namespace ' find_total_score < ` anonymous namespace ' map_problem_chain > ( a1 , ( __int64 ) <span class=\"supfact\">v13</span> ) ; if ( <span class=\"supfact\">v15</span> > <span class=\"supfact\">v17</span> ) { <span class=\"supfact\">v17</span> = <span class=\"supfact\">v15</span> ; std vector < unsigned long > operator = ( a2 , <span class=\"supfact\">v13</span> ) ; } } return std vector < unsigned long > ~ vector ( <span class=\"supfact\">v13</span> ) ; }", "code_t": "void __cdecl ` anonymous namespace ' brute_force_find_max_factor_graph_nmplp < ` anonymous namespace ' map_problem_chain > ( const ` anonymous namespace ' map_problem_chain * prob , std vector < long unsigned int > * map_assignment ) { unsigned __int64 v2 ; bool v3 ; bool v4 ; bool v5 ; bool v6 ; bool v7 ; bool v8 ; bool v9 ; bool v10 ; std vector < long unsigned int > <span class=\"supfact\">temp_assignment</span> ; std vector < long unsigned int > value_type <span class=\"supfact\">__x</span> ; double <span class=\"supfact\">score</span> ; unsigned __int64 <span class=\"supfact\">i</span> ; double <span class=\"supfact\">best_score</span> ; std vector < unsigned long > vector ( & <span class=\"supfact\">temp_assignment</span> ) ; <span class=\"supfact\">__x</span> = Number L ; v2 = ` anonymous namespace ' map_problem_chain number_of_nodes ( prob ) ; std vector < unsigned long > resize ( & <span class=\"supfact\">temp_assignment</span> , v2 , & <span class=\"supfact\">__x</span> ) ; <span class=\"supfact\">best_score</span> = - INFINITY ; for ( <span class=\"supfact\">i</span> = Number L ; <span class=\"supfact\">i</span> <= Number ; ++ <span class=\"supfact\">i</span> ) {\n  v3 = (<span class=\"supfact\">i</span> & Number) != Number;\n  *std vector<unsigned long> operator[](&<span class=\"supfact\">temp_assignment</span>,\n                                        Number L) = v3;\n  v4 = (<span class=\"supfact\">i</span> & Number) != Number;\n  *std vector<unsigned long> operator[](&<span class=\"supfact\">temp_assignment</span>,\n                                        Number) = v4;\n  v5 = (<span class=\"supfact\">i</span> & Number) != Number;\n  *std vector<unsigned long> operator[](&<span class=\"supfact\">temp_assignment</span>,\n                                        Number) = v5;\n  v6 = (<span class=\"supfact\">i</span> & Number) != Number;\n  *std vector<unsigned long> operator[](&<span class=\"supfact\">temp_assignment</span>,\n                                        Number) = v6;\n  v7 = (<span class=\"supfact\">i</span> & Number) != Number;\n  *std vector<unsigned long> operator[](&<span class=\"supfact\">temp_assignment</span>,\n                                        Number) = v7;\n  v8 = (<span class=\"supfact\">i</span> & Number) != Number;\n  *std vector<unsigned long> operator[](&<span class=\"supfact\">temp_assignment</span>,\n                                        Number) = v8;\n  v9 = (<span class=\"supfact\">i</span> & Number) != Number;\n  *std vector<unsigned long> operator[](&<span class=\"supfact\">temp_assignment</span>,\n                                        Number) = v9;\n  v10 = (<span class=\"supfact\">i</span> & Number) != Number;\n  *std vector<unsigned long> operator[](&<span class=\"supfact\">temp_assignment</span>,\n                                        Number) = v10;\n  <span class=\"supfact\">score</span> = ` anonymous namespace ' find_total_score < ` anonymous namespace ' map_problem_chain >\n                          (prob, &<span class=\"supfact\">temp_assignment</span>);\n  if (<span class=\"supfact\">score</span> > <span class=\"supfact\">best_score</span>) {\n    <span class=\"supfact\">best_score</span> = <span class=\"supfact\">score</span>;\n    std vector<unsigned long> operator=(map_assignment,\n                                        &<span class=\"supfact\">temp_assignment</span>);\n  } } std vector < unsigned long > ~ vector ( & <span class=\"supfact\">temp_assignment</span> ) ;\n}", "var": [{"name": "v13", "type": "char[32]", "ref_name": "temp_assignment", "ref_type": "struct std::vector<long unsigned int> { std::_Vector_base<long unsigned int> baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "dc-fukuoka", "repo_name": "wow", "path": "dc-fukuoka/wow/8601e68209a00103f14ae6397d122d01b5a8b731081c146cf57780806db91be0", "path_in_repo": "dc-fukuoka/wow//wow", "objdump": "0000000000401497 <resolv_name>:\n  401497:\t55                   \tpush   %rbp\n  401498:\t48 89 e5             \tmov    %rsp,%rbp\n  40149b:\t53                   \tpush   %rbx\n  40149c:\t48 83 ec 28          \tsub    $0x28,%rsp\n  4014a0:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4014a4:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  4014a8:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  4014af:\t00 \n  4014b0:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  4014b4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4014b8:\t48 89 d1             \tmov    %rdx,%rcx\n  4014bb:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4014c0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4014c5:\t48 89 c7             \tmov    %rax,%rdi\n  4014c8:\te8 93 fc ff ff       \tcallq  401160 <getaddrinfo@plt>\n  4014cd:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4014d0:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  4014d4:\t74 5d                \tje     401533 <resolv_name+0x9c>\n  4014d6:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4014d9:\t89 c7                \tmov    %eax,%edi\n  4014db:\te8 d0 fb ff ff       \tcallq  4010b0 <gai_strerror@plt>\n  4014e0:\t48 89 c3             \tmov    %rax,%rbx\n  4014e3:\te8 68 fb ff ff       \tcallq  401050 <__errno_location@plt>\n  4014e8:\t8b 00                \tmov    (%rax),%eax\n  4014ea:\t89 c7                \tmov    %eax,%edi\n  4014ec:\te8 8f fc ff ff       \tcallq  401180 <strerror@plt>\n  4014f1:\t48 89 c2             \tmov    %rax,%rdx\n  4014f4:\t48 8b 05 05 2c 00 00 \tmov    0x2c05(%rip),%rax        # 404100 <stderr@@GLIBC_2.2.5>\n  4014fb:\t48 83 ec 08          \tsub    $0x8,%rsp\n  4014ff:\t53                   \tpush   %rbx\n  401500:\t49 89 d1             \tmov    %rdx,%r9\n  401503:\t41 b8 f8 21 40 00    \tmov    $0x4021f8,%r8d\n  401509:\tb9 6a 00 00 00       \tmov    $0x6a,%ecx\n  40150e:\tba 2e 20 40 00       \tmov    $0x40202e,%edx\n  401513:\tbe 38 20 40 00       \tmov    $0x402038,%esi\n  401518:\t48 89 c7             \tmov    %rax,%rdi\n  40151b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401520:\te8 cb fb ff ff       \tcallq  4010f0 <fprintf@plt>\n  401525:\t48 83 c4 10          \tadd    $0x10,%rsp\n  401529:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40152e:\te8 0d fc ff ff       \tcallq  401140 <exit@plt>\n  401533:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401537:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  40153b:\t8b 40 04             \tmov    0x4(%rax),%eax\n  40153e:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  401541:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401545:\tba 0f 00 00 00       \tmov    $0xf,%edx\n  40154a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40154f:\t48 89 c7             \tmov    %rax,%rdi\n  401552:\te8 69 fb ff ff       \tcallq  4010c0 <memset@plt>\n  401557:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  40155b:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  40155f:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  401564:\t48 89 c6             \tmov    %rax,%rsi\n  401567:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40156c:\te8 bf fa ff ff       \tcallq  401030 <inet_ntop@plt>\n  401571:\t48 85 c0             \ttest   %rax,%rax\n  401574:\t75 47                \tjne    4015bd <resolv_name+0x126>\n  401576:\te8 d5 fa ff ff       \tcallq  401050 <__errno_location@plt>\n  40157b:\t8b 00                \tmov    (%rax),%eax\n  40157d:\t89 c7                \tmov    %eax,%edi\n  40157f:\te8 fc fb ff ff       \tcallq  401180 <strerror@plt>\n  401584:\t48 89 c2             \tmov    %rax,%rdx\n  401587:\t48 8b 05 72 2b 00 00 \tmov    0x2b72(%rip),%rax        # 404100 <stderr@@GLIBC_2.2.5>\n  40158e:\t49 89 d1             \tmov    %rdx,%r9\n  401591:\t41 b8 f8 21 40 00    \tmov    $0x4021f8,%r8d\n  401597:\tb9 6f 00 00 00       \tmov    $0x6f,%ecx\n  40159c:\tba 2e 20 40 00       \tmov    $0x40202e,%edx\n  4015a1:\tbe 60 20 40 00       \tmov    $0x402060,%esi\n  4015a6:\t48 89 c7             \tmov    %rax,%rdi\n  4015a9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4015ae:\te8 3d fb ff ff       \tcallq  4010f0 <fprintf@plt>\n  4015b3:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4015b8:\te8 83 fb ff ff       \tcallq  401140 <exit@plt>\n  4015bd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4015c1:\t48 89 c7             \tmov    %rax,%rdi\n  4015c4:\te8 c7 fb ff ff       \tcallq  401190 <freeaddrinfo@plt>\n  4015c9:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4015cd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4015d1:\t48 89 c6             \tmov    %rax,%rsi\n  4015d4:\tbf 80 20 40 00       \tmov    $0x402080,%edi\n  4015d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4015de:\te8 bd fa ff ff       \tcallq  4010a0 <printf@plt>\n  4015e3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4015e8:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n  4015ec:\tc9                   \tleaveq \n  4015ed:\tc3                   \tretq   ", "code_s": "__int64 __fastcall resolv_name(void *a1, const char *a2) {\n  const char *v2;\n  int *v3;\n  char *v4;\n  int *v5;\n  char *v6;\n  struct addrinfo *<span class=\"supfact\">pai</span>;\n  int <span class=\"supfact\">cp</span>;\n  int <span class=\"supfact\">ecode</span>;\n  <span class=\"supfact\">pai</span> = Number L;\n  <span class=\"supfact\">ecode</span> =\n      getaddrinfo(a2, Number L, Number L, &<span class=\"supfact\">pai</span>);\n  if (<span class=\"supfact\">ecode</span>) {\n    v2 = gai_strerror(<span class=\"supfact\">ecode</span>);\n    v3 = __errno_location();\n    v4 = strerror(*v3);\n    fprintf(stderr, String, String, Number L, String, v4, v2);\n    exit(Number);\n  }\n  <span class=\"supfact\">cp</span> =\n      *(_DWORD *)&<span class=\"supfact\">pai</span>->ai_addr->sa_data[Number];\n  memset(a1, Number, Number);\n  if (!inet_ntop(Number, &<span class=\"supfact\">cp</span>, (char *)a1, Number)) {\n    v5 = __errno_location();\n    v6 = strerror(*v5);\n    fprintf(stderr, String, String, Number L, String, v6);\n    exit(Number);\n  }\n  freeaddrinfo(<span class=\"supfact\">pai</span>);\n  printf(String, a2, (const char *)a1);\n  return Number L;\n}", "code_t": "int __cdecl resolv_name(magic_packet_info *minfo, const char *node) {\n  const char *v2;\n  int *v3;\n  char *v4;\n  int *v5;\n  char *v6;\n  addrinfo *<span class=\"supfact\">res</span>;\n  in_addr <span class=\"supfact\">addr</span>;\n  int <span class=\"supfact\">err</span>;\n  <span class=\"supfact\">res</span> = Number L;\n  <span class=\"supfact\">err</span> =\n      getaddrinfo(node, Number L, Number L, &<span class=\"supfact\">res</span>);\n  if (<span class=\"supfact\">err</span>) {\n    v2 = gai_strerror(<span class=\"supfact\">err</span>);\n    v3 = __errno_location();\n    v4 = strerror(*v3);\n    fprintf(stderr, String, String, Number L, String, v4, v2);\n    exit(Number);\n  }\n  <span class=\"supfact\">addr</span>.s_addr =\n      *(_DWORD *)&<span class=\"supfact\">res</span>->ai_addr->sa_data[Number];\n  memset(minfo, Number, Number);\n  if (!inet_ntop(Number, &<span class=\"supfact\">addr</span>, minfo->ip_str, Number)) {\n    v5 = __errno_location();\n    v6 = strerror(*v5);\n    fprintf(stderr, String, String, Number L, String, v6);\n    exit(Number);\n  }\n  freeaddrinfo(<span class=\"supfact\">res</span>);\n  printf(String, node, minfo->ip_str);\n  return Number;\n}", "var": [{"name": "cp", "type": "struct in_addr { in_addr_t s_addr; }", "ref_name": "addr", "ref_type": "struct in_addr { in_addr_t s_addr; }"}], "body_in_train": false}, {"repo_owner": "converse2006", "repo_name": "ArduinoUno-QEMU", "path": "converse2006/ArduinoUno-QEMU/0a3c2e3ca4fd921130bd6699cdbaf82d104d0f7cc575b23721da750739853bd9", "path_in_repo": "converse2006/ArduinoUno-QEMU//ppc64abi32-linux-user/elfload.o", "objdump": "0000000000006559 <core_dump_filename>:\n    6559:\t55                   \tpush   %rbp\n    655a:\t48 89 e5             \tmov    %rsp,%rbp\n    655d:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n    6564:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n    656b:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n    6572:\t48 89 95 38 ff ff ff \tmov    %rdx,-0xc8(%rbp)\n    6579:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    6580:\t00 00 \n    6582:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    6586:\t31 c0                \txor    %eax,%eax\n    6588:\t48 c7 85 50 ff ff ff \tmovq   $0x0,-0xb0(%rbp)\n    658f:\t00 00 00 00 \n    6593:\t48 c7 85 58 ff ff ff \tmovq   $0x0,-0xa8(%rbp)\n    659a:\t00 00 00 00 \n    659e:\t48 81 bd 38 ff ff ff \tcmpq   $0xfff,-0xc8(%rbp)\n    65a5:\tff 0f 00 00 \n    65a9:\t77 19                \tja     65c4 <core_dump_filename+0x6b>\n    65ab:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    65b0:\tba 6c 09 00 00       \tmov    $0x96c,%edx\n    65b5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    65ba:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    65bf:\te8 00 00 00 00       \tcallq  65c4 <core_dump_filename+0x6b>\n    65c4:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    65cb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    65d0:\t48 89 c7             \tmov    %rax,%rdi\n    65d3:\te8 00 00 00 00       \tcallq  65d8 <core_dump_filename+0x7f>\n    65d8:\t85 c0                \ttest   %eax,%eax\n    65da:\t79 34                \tjns    6610 <core_dump_filename+0xb7>\n    65dc:\te8 00 00 00 00       \tcallq  65e1 <core_dump_filename+0x88>\n    65e1:\t8b 00                \tmov    (%rax),%eax\n    65e3:\t89 c7                \tmov    %eax,%edi\n    65e5:\te8 00 00 00 00       \tcallq  65ea <core_dump_filename+0x91>\n    65ea:\t48 89 c2             \tmov    %rax,%rdx\n    65ed:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 65f4 <core_dump_filename+0x9b>\n    65f4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    65f9:\t48 89 c7             \tmov    %rax,%rdi\n    65fc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6601:\te8 00 00 00 00       \tcallq  6606 <core_dump_filename+0xad>\n    6606:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    660b:\te9 d2 00 00 00       \tjmpq   66e2 <core_dump_filename+0x189>\n    6610:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    6617:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    661b:\t48 8b 80 b0 01 00 00 \tmov    0x1b0(%rax),%rax\n    6622:\t48 89 c7             \tmov    %rax,%rdi\n    6625:\te8 00 00 00 00       \tcallq  662a <core_dump_filename+0xd1>\n    662a:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n    6631:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    6638:\t48 89 c7             \tmov    %rax,%rdi\n    663b:\te8 00 00 00 00       \tcallq  6640 <core_dump_filename+0xe7>\n    6640:\t48 89 c7             \tmov    %rax,%rdi\n    6643:\te8 00 00 00 00       \tcallq  6648 <core_dump_filename+0xef>\n    6648:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n    664f:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n    6656:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    665d:\t48 89 d6             \tmov    %rdx,%rsi\n    6660:\t48 89 c7             \tmov    %rax,%rdi\n    6663:\te8 00 00 00 00       \tcallq  6668 <core_dump_filename+0x10f>\n    6668:\t48 89 c2             \tmov    %rax,%rdx\n    666b:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    666f:\t48 89 d1             \tmov    %rdx,%rcx\n    6672:\tba 00 00 00 00       \tmov    $0x0,%edx\n    6677:\tbe 40 00 00 00       \tmov    $0x40,%esi\n    667c:\t48 89 c7             \tmov    %rax,%rdi\n    667f:\te8 00 00 00 00       \tcallq  6684 <core_dump_filename+0x12b>\n    6684:\te8 00 00 00 00       \tcallq  6689 <core_dump_filename+0x130>\n    6689:\t89 c1                \tmov    %eax,%ecx\n    668b:\t48 8d 7d b0          \tlea    -0x50(%rbp),%rdi\n    668f:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n    6696:\t48 8b b5 38 ff ff ff \tmov    -0xc8(%rbp),%rsi\n    669d:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    66a4:\t41 89 c9             \tmov    %ecx,%r9d\n    66a7:\t49 89 f8             \tmov    %rdi,%r8\n    66aa:\t48 89 d1             \tmov    %rdx,%rcx\n    66ad:\tba 00 00 00 00       \tmov    $0x0,%edx\n    66b2:\t48 89 c7             \tmov    %rax,%rdi\n    66b5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    66ba:\te8 00 00 00 00       \tcallq  66bf <core_dump_filename+0x166>\n    66bf:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    66c6:\t48 89 c7             \tmov    %rax,%rdi\n    66c9:\te8 00 00 00 00       \tcallq  66ce <core_dump_filename+0x175>\n    66ce:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    66d5:\t48 89 c7             \tmov    %rax,%rdi\n    66d8:\te8 00 00 00 00       \tcallq  66dd <core_dump_filename+0x184>\n    66dd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    66e2:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    66e6:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    66ed:\t00 00 \n    66ef:\t74 05                \tje     66f6 <core_dump_filename+0x19d>\n    66f1:\te8 00 00 00 00       \tcallq  66f6 <core_dump_filename+0x19d>\n    66f6:\tc9                   \tleaveq \n    66f7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall core_dump_filename(__int64 a1, char *a2, size_t a3) {\n  int *v3;\n  char *v4;\n  __int64 result;\n  char *v6;\n  struct tm *v7;\n  unsigned int v8;\n  char *<span class=\"supfact\">filename</span>;\n  char *<span class=\"supfact\">ptr</span>;\n  struct timeval <span class=\"supfact\">tv</span>;\n  struct tm <span class=\"supfact\">tp</span>;\n  char <span class=\"supfact\">s</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v15</span> = __readfsqword(Number);\n  if (a3 <= Number)\n    _assert_fail(String, String, Number, String);\n  if (gettimeofday(&<span class=\"supfact\">tv</span>, Number L) >= Number) {\n    <span class=\"supfact\">filename</span> =\n        strdup(*(const char **)(*(_QWORD *)(a1 + Number) + Number L));\n    v6 = basename(<span class=\"supfact\">filename</span>);\n    <span class=\"supfact\">ptr</span> = strdup(v6);\n    v7 = localtime_r(&<span class=\"supfact\">tv</span>.tv_sec, &<span class=\"supfact\">tp</span>);\n    strftime(<span class=\"supfact\">s</span>, Number, String, v7);\n    v8 = getpid();\n    snprintf(a2, a3, String, <span class=\"supfact\">ptr</span>, <span class=\"supfact\">s</span>, v8);\n    free(<span class=\"supfact\">ptr</span>);\n    free(<span class=\"supfact\">filename</span>);\n    result = Number L;\n  } else {\n    v3 = _errno_location();\n    v4 = strerror(*v3);\n    fprintf(stderr, String, v4);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl core_dump_filename(const TaskState_0 *ts, char *buf,\n                               size_t bufsize) {\n  int *v3;\n  char *v4;\n  int result;\n  char *v6;\n  struct <span class=\"supfact\">tm</span> *v7;\n  unsigned int v8;\n  char *<span class=\"supfact\">filename</span>;\n  char *<span class=\"supfact\">base_filename</span>;\n  timeval <span class=\"supfact\">tv</span>;\n  <span class=\"supfact\">tm</span> <span class=\"supfact\">tm</span>;\n  char <span class=\"supfact\">timestamp</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v15</span> = __readfsqword(Number);\n  if (bufsize <= Number)\n    _assert_fail(String, String, Number, String);\n  if (gettimeofday(&<span class=\"supfact\">tv</span>, Number L) >= Number) {\n    <span class=\"supfact\">filename</span> = strdup(ts->bprm-><span class=\"supfact\">filename</span>);\n    v6 = basename(<span class=\"supfact\">filename</span>);\n    <span class=\"supfact\">base_filename</span> = strdup(v6);\n    v7 = localtime_r(&<span class=\"supfact\">tv</span>.tv_sec, &<span class=\"supfact\">tm</span>);\n    strftime(<span class=\"supfact\">timestamp</span>, Number, String, v7);\n    v8 = getpid();\n    snprintf(buf, bufsize, String, <span class=\"supfact\">base_filename</span>,\n             <span class=\"supfact\">timestamp</span>, v8);\n    free(<span class=\"supfact\">base_filename</span>);\n    free(<span class=\"supfact\">filename</span>);\n    result = Number;\n  } else {\n    v3 = _errno_location();\n    v4 = strerror(*v3);\n    fprintf(stderr, String, v4);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "tp", "type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }", "ref_name": "tm", "ref_type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}, {"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "tjhuang", "repo_name": "backport-iwlwifi", "path": "tjhuang/backport-iwlwifi/853ab28a2cff43cc887f3a4f52e1fd5e73c2f04f177a619cd5178adbca860419", "path_in_repo": "tjhuang/backport-iwlwifi/kconf/zconf.tab.o", "objdump": "0000000000005c70 <conf_get_default_confname>:\n    5c70:\t48 81 ec a8 00 00 00 \tsub    $0xa8,%rsp\n    5c77:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c7c:\te8 83 fe ff ff       \tcallq  5b04 <conf_expand_value>\n    5c81:\t48 89 84 24 98 00 00 \tmov    %rax,0x98(%rsp)\n    5c88:\t00 \n    5c89:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5c8e:\te8 00 00 00 00       \tcallq  5c93 <conf_get_default_confname+0x23>\n    5c93:\t48 89 84 24 90 00 00 \tmov    %rax,0x90(%rsp)\n    5c9a:\t00 \n    5c9b:\t48 83 bc 24 90 00 00 \tcmpq   $0x0,0x90(%rsp)\n    5ca2:\t00 00 \n    5ca4:\t74 45                \tje     5ceb <conf_get_default_confname+0x7b>\n    5ca6:\t48 8b 94 24 98 00 00 \tmov    0x98(%rsp),%rdx\n    5cad:\t00 \n    5cae:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    5cb5:\t00 \n    5cb6:\t48 89 d1             \tmov    %rdx,%rcx\n    5cb9:\t48 89 c2             \tmov    %rax,%rdx\n    5cbc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    5cc1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5cc6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5ccb:\te8 00 00 00 00       \tcallq  5cd0 <conf_get_default_confname+0x60>\n    5cd0:\t48 89 e0             \tmov    %rsp,%rax\n    5cd3:\t48 89 c6             \tmov    %rax,%rsi\n    5cd6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5cdb:\te8 00 00 00 00       \tcallq  5ce0 <conf_get_default_confname+0x70>\n    5ce0:\t85 c0                \ttest   %eax,%eax\n    5ce2:\t75 07                \tjne    5ceb <conf_get_default_confname+0x7b>\n    5ce4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5ce9:\teb 08                \tjmp    5cf3 <conf_get_default_confname+0x83>\n    5ceb:\t48 8b 84 24 98 00 00 \tmov    0x98(%rsp),%rax\n    5cf2:\t00 \n    5cf3:\t48 81 c4 a8 00 00 00 \tadd    $0xa8,%rsp\n    5cfa:\tc3                   \tretq   ", "code_s": "char *conf_get_default_confname() {\n  char *result;\n  struct stat <span class=\"supfact\">v1</span>;\n  char *<span class=\"supfact\">v2</span>;\n  char *<span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = conf_expand_value(String);\n  <span class=\"supfact\">v2</span> = getenv(String);\n  if (!<span class=\"supfact\">v2</span> ||\n      (sprintf(fullname_5435, String, <span class=\"supfact\">v2</span>, <span class=\"supfact\">v3</span>),\n       stat(fullname_5435, &<span class=\"supfact\">v1</span>)))\n    result = <span class=\"supfact\">v3</span>;\n  else\n    result = fullname_5435;\n  return result;\n}", "code_t": "char *__cdecl conf_get_default_confname() {\n  char *result;\n  stat <span class=\"supfact\">buf</span>;\n  char *<span class=\"supfact\">env</span>;\n  char *<span class=\"supfact\">name</span>;\n  <span class=\"supfact\">name</span> = conf_expand_value(String);\n  <span class=\"supfact\">env</span> = getenv(String);\n  if (!<span class=\"supfact\">env</span> ||\n      (sprintf(fullname_5435, String, <span class=\"supfact\">env</span>,\n               <span class=\"supfact\">name</span>),\n       stat_0(fullname_5435, &<span class=\"supfact\">buf</span>)))\n    result = <span class=\"supfact\">name</span>;\n  else\n    result = fullname_5435;\n  return result;\n}", "var": [{"name": "v1", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "buf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "jamesbulpin", "repo_name": "xcp-xen-4.1", "path": "jamesbulpin/xcp-xen-4.1/24b00767a273e76fe678054697f4aa2426b3b24fa88f4257f4124cb3b68e0c30", "path_in_repo": "jamesbulpin/xcp-xen-4.1/tools/libxen/src/xen_acmpolicy.o", "objdump": "0000000000000375 <xen_acmpolicy_get_map>:\n 375:\t53                   \tpush   %rbx\n 376:\t48 83 ec 70          \tsub    $0x70,%rsp\n 37a:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n 37f:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n 384:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n 389:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 390 <xen_acmpolicy_get_map+0x1b>\n 390:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n 395:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 39a:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n 39f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3a6 <xen_acmpolicy_get_map+0x31>\n 3a6:\t48 8b 08             \tmov    (%rax),%rcx\n 3a9:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n 3ad:\t48 89 4c 24 20       \tmov    %rcx,0x20(%rsp)\n 3b2:\t48 89 5c 24 28       \tmov    %rbx,0x28(%rsp)\n 3b7:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n 3bb:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n 3bf:\t48 89 4c 24 30       \tmov    %rcx,0x30(%rsp)\n 3c4:\t48 89 5c 24 38       \tmov    %rbx,0x38(%rsp)\n 3c9:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n 3cd:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n 3d1:\t48 89 4c 24 40       \tmov    %rcx,0x40(%rsp)\n 3d6:\t48 89 5c 24 48       \tmov    %rbx,0x48(%rsp)\n 3db:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n 3df:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n 3e4:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n 3e9:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n 3f0:\t48 8b 74 24 10       \tmov    0x10(%rsp),%rsi\n 3f5:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n 3fa:\t48 8d 54 24 60       \tlea    0x60(%rsp),%rdx\n 3ff:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 404:\t49 89 f1             \tmov    %rsi,%r9\n 407:\t49 89 c8             \tmov    %rcx,%r8\n 40a:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n 40f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 416 <xen_acmpolicy_get_map+0xa1>\n 416:\t48 89 c7             \tmov    %rax,%rdi\n 419:\te8 00 00 00 00       \tcallq  41e <xen_acmpolicy_get_map+0xa9>\n 41e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n 423:\t0f b6 40 18          \tmovzbl 0x18(%rax),%eax\n 427:\t48 83 c4 70          \tadd    $0x70,%rsp\n 42b:\t5b                   \tpop    %rbx\n 42c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall xen_acmpolicy_get_map(__int64 a1, _QWORD *a2, __int64 a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = (__int64)abstract_type_string;\n  <span class=\"supfact\">v8</span>[Number] = a3;\n  v3 = abstract_type_string[Number];\n  <span class=\"supfact\">v7</span>[Number] = abstract_type_string[Number];\n  <span class=\"supfact\">v7</span>[Number] = v3;\n  v4 = abstract_type_string[Number];\n  <span class=\"supfact\">v7</span>[Number] = abstract_type_string[Number];\n  <span class=\"supfact\">v7</span>[Number] = v4;\n  v5 = abstract_type_string[Number];\n  <span class=\"supfact\">v7</span>[Number] = abstract_type_string[Number];\n  <span class=\"supfact\">v7</span>[Number] = v5;\n  <span class=\"supfact\">v7</span>[Number] = abstract_type_string[Number];\n  *a2 = Number L;\n  xen_call_(a1, String, <span class=\"supfact\">v8</span>, Number L, <span class=\"supfact\">v7</span>, a2);\n  return *(unsigned __int8 *)(a1 + Number);\n}", "code_t": "bool __cdecl xen_acmpolicy_get_map(xen_session *session, char **result,\n                                   xen_xspolicy xspolicy) {\n  const abstract_type *v3;\n  int (*v4)(xen_session *, const char *);\n  size_t v5;\n  abstract_type_0 <span class=\"supfact\">result_type</span>;\n  abstract_value_0 <span class=\"supfact\">param_values</span>[Number];\n  <span class=\"supfact\">param_values</span>[Number].type =\n      (const abstract_type_0 *)abstract_type_string;\n  <span class=\"supfact\">param_values</span>[Number].u.int_val = (int64_t)xspolicy;\n  v3 = (const abstract_type *)abstract_type_string[Number];\n  *(_QWORD *)&<span class=\"supfact\">result_type</span>.typename =\n      abstract_type_string[Number];\n  <span class=\"supfact\">result_type</span>.child = v3;\n  v4 = (int (*)(xen_session *, const char *))abstract_type_string[Number];\n  <span class=\"supfact\">result_type</span>.enum_marshaller =\n      (const char *(*)(int))abstract_type_string[Number];\n  <span class=\"supfact\">result_type</span>.enum_demarshaller = v4;\n  v5 = abstract_type_string[Number];\n  <span class=\"supfact\">result_type</span>.struct_size = abstract_type_string[Number];\n  <span class=\"supfact\">result_type</span>.member_count = v5;\n  <span class=\"supfact\">result_type</span>.members =\n      (const struct_member_0 *)abstract_type_string[Number];\n  *result = Number L;\n  xen_call_(session, String, <span class=\"supfact\">param_values</span>, Number L,\n            &<span class=\"supfact\">result_type</span>, result);\n  return session->ok;\n}", "var": [{"name": "v7", "type": "struct abstract_type_0 { abstract_typename typename; PADDING (4); const abstract_type * child; const char *(*)(int) enum_marshaller; int (*)(xen_session *, const char *) enum_demarshaller; size_t struct_size; size_t member_count; const struct_member_0 * members; }", "ref_name": "result_type", "ref_type": "struct abstract_type_0 { abstract_typename typename; PADDING (4); const abstract_type * child; const char *(*)(int) enum_marshaller; int (*)(xen_session *, const char *) enum_demarshaller; size_t struct_size; size_t member_count; const struct_member_0 * members; }"}], "body_in_train": false}, {"repo_owner": "jackwener", "repo_name": "ucore-os-learning", "path": "jackwener/ucore-os-learning/a295437736e1830ef557a9bf5555e23979cf6772ac5f645a51b7dfa9dad632a8", "path_in_repo": "jackwener/ucore-os-learning/ucore_os_lab/labcodes/lab8/obj/sign/tools/sign.o", "objdump": "0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec c0 02 00 00 \tsub    $0x2c0,%rsp\n   b:\t89 bd 4c fd ff ff    \tmov    %edi,-0x2b4(%rbp)\n  11:\t48 89 b5 40 fd ff ff \tmov    %rsi,-0x2c0(%rbp)\n  18:\t83 bd 4c fd ff ff 03 \tcmpl   $0x3,-0x2b4(%rbp)\n  1f:\t74 28                \tje     49 <main+0x49>\n  21:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 28 <main+0x28>\n  28:\t48 89 c1             \tmov    %rax,%rcx\n  2b:\tba 2a 00 00 00       \tmov    $0x2a,%edx\n  30:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  35:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  3a:\te8 00 00 00 00       \tcallq  3f <main+0x3f>\n  3f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  44:\te9 27 02 00 00       \tjmpq   270 <main+0x270>\n  49:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n  50:\t48 83 c0 08          \tadd    $0x8,%rax\n  54:\t48 8b 00             \tmov    (%rax),%rax\n  57:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n  5e:\t48 89 d6             \tmov    %rdx,%rsi\n  61:\t48 89 c7             \tmov    %rax,%rdi\n  64:\te8 00 00 00 00       \tcallq  69 <main+0x69>\n  69:\t85 c0                \ttest   %eax,%eax\n  6b:\t74 42                \tje     af <main+0xaf>\n  6d:\te8 00 00 00 00       \tcallq  72 <main+0x72>\n  72:\t8b 00                \tmov    (%rax),%eax\n  74:\t89 c7                \tmov    %eax,%edi\n  76:\te8 00 00 00 00       \tcallq  7b <main+0x7b>\n  7b:\t48 89 c1             \tmov    %rax,%rcx\n  7e:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n  85:\t48 83 c0 08          \tadd    $0x8,%rax\n  89:\t48 8b 10             \tmov    (%rax),%rdx\n  8c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 93 <main+0x93>\n  93:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  98:\t48 89 c7             \tmov    %rax,%rdi\n  9b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  a0:\te8 00 00 00 00       \tcallq  a5 <main+0xa5>\n  a5:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  aa:\te9 c1 01 00 00       \tjmpq   270 <main+0x270>\n  af:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n  b3:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n  ba:\t48 83 c0 08          \tadd    $0x8,%rax\n  be:\t48 8b 00             \tmov    (%rax),%rax\n  c1:\t48 89 c6             \tmov    %rax,%rsi\n  c4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  c9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  ce:\te8 00 00 00 00       \tcallq  d3 <main+0xd3>\n  d3:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  d7:\t48 3d fe 01 00 00    \tcmp    $0x1fe,%rax\n  dd:\t7e 27                \tjle    106 <main+0x106>\n  df:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n  e3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ea <main+0xea>\n  ea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  ef:\t48 89 c7             \tmov    %rax,%rdi\n  f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  f7:\te8 00 00 00 00       \tcallq  fc <main+0xfc>\n  fc:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 101:\te9 6a 01 00 00       \tjmpq   270 <main+0x270>\n 106:\t48 8d 85 50 fd ff ff \tlea    -0x2b0(%rbp),%rax\n 10d:\tba 00 02 00 00       \tmov    $0x200,%edx\n 112:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 117:\t48 89 c7             \tmov    %rax,%rdi\n 11a:\te8 00 00 00 00       \tcallq  11f <main+0x11f>\n 11f:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n 126:\t48 83 c0 08          \tadd    $0x8,%rax\n 12a:\t48 8b 00             \tmov    (%rax),%rax\n 12d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 132:\t48 89 c7             \tmov    %rax,%rdi\n 135:\te8 00 00 00 00       \tcallq  13a <main+0x13a>\n 13a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 13e:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 142:\t48 89 c6             \tmov    %rax,%rsi\n 145:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 149:\t48 8d 85 50 fd ff ff \tlea    -0x2b0(%rbp),%rax\n 150:\t48 89 d1             \tmov    %rdx,%rcx\n 153:\t48 89 f2             \tmov    %rsi,%rdx\n 156:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 15b:\t48 89 c7             \tmov    %rax,%rdi\n 15e:\te8 00 00 00 00       \tcallq  163 <main+0x163>\n 163:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 166:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 169:\t48 63 d0             \tmovslq %eax,%rdx\n 16c:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n 170:\t48 39 c2             \tcmp    %rax,%rdx\n 173:\t74 34                \tje     1a9 <main+0x1a9>\n 175:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n 17c:\t48 83 c0 08          \tadd    $0x8,%rax\n 180:\t48 8b 10             \tmov    (%rax),%rdx\n 183:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18a <main+0x18a>\n 18a:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n 18d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 192:\t48 89 c7             \tmov    %rax,%rdi\n 195:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 19a:\te8 00 00 00 00       \tcallq  19f <main+0x19f>\n 19f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 1a4:\te9 c7 00 00 00       \tjmpq   270 <main+0x270>\n 1a9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1ad:\t48 89 c7             \tmov    %rax,%rdi\n 1b0:\te8 00 00 00 00       \tcallq  1b5 <main+0x1b5>\n 1b5:\tc6 85 4e ff ff ff 55 \tmovb   $0x55,-0xb2(%rbp)\n 1bc:\tc6 85 4f ff ff ff aa \tmovb   $0xaa,-0xb1(%rbp)\n 1c3:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n 1ca:\t48 83 c0 10          \tadd    $0x10,%rax\n 1ce:\t48 8b 00             \tmov    (%rax),%rax\n 1d1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1d6:\t48 89 c7             \tmov    %rax,%rdi\n 1d9:\te8 00 00 00 00       \tcallq  1de <main+0x1de>\n 1de:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 1e2:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 1e6:\t48 8d 85 50 fd ff ff \tlea    -0x2b0(%rbp),%rax\n 1ed:\t48 89 d1             \tmov    %rdx,%rcx\n 1f0:\tba 00 02 00 00       \tmov    $0x200,%edx\n 1f5:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 1fa:\t48 89 c7             \tmov    %rax,%rdi\n 1fd:\te8 00 00 00 00       \tcallq  202 <main+0x202>\n 202:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 205:\t81 7d f4 00 02 00 00 \tcmpl   $0x200,-0xc(%rbp)\n 20c:\t74 31                \tje     23f <main+0x23f>\n 20e:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n 215:\t48 83 c0 10          \tadd    $0x10,%rax\n 219:\t48 8b 10             \tmov    (%rax),%rdx\n 21c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 223 <main+0x223>\n 223:\t8b 4d f4             \tmov    -0xc(%rbp),%ecx\n 226:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 22b:\t48 89 c7             \tmov    %rax,%rdi\n 22e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 233:\te8 00 00 00 00       \tcallq  238 <main+0x238>\n 238:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 23d:\teb 31                \tjmp    270 <main+0x270>\n 23f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 243:\t48 89 c7             \tmov    %rax,%rdi\n 246:\te8 00 00 00 00       \tcallq  24b <main+0x24b>\n 24b:\t48 8b 85 40 fd ff ff \tmov    -0x2c0(%rbp),%rax\n 252:\t48 83 c0 10          \tadd    $0x10,%rax\n 256:\t48 8b 00             \tmov    (%rax),%rax\n 259:\t48 89 c6             \tmov    %rax,%rsi\n 25c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 261:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 266:\te8 00 00 00 00       \tcallq  26b <main+0x26b>\n 26b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 270:\tc9                   \tleaveq \n 271:\tc3                   \tretq   \n", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  int *v4;\n  char *v5;\n  char <span class=\"supfact\">s</span>[Number];\n  struct stat64 <span class=\"supfact\">v7</span>;\n  FILE *<span class=\"supfact\">v8</span>;\n  unsigned int <span class=\"supfact\">v9</span>;\n  FILE *<span class=\"supfact\">stream</span>;\n  if (argc == Number) {\n    if (stat64(argv[Number], &<span class=\"supfact\">v7</span>)) {\n      v4 = _errno_location();\n      v5 = strerror(*v4);\n      fprintf(stderr, String, argv[Number], v5);\n      result = Number;\n    } else {\n      printf(String, argv[Number], <span class=\"supfact\">v7</span>.st_size);\n      if (<span class=\"supfact\">v7</span>.st_size <= Number) {\n        memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n        <span class=\"supfact\">stream</span> = fopen64(argv[Number], String);\n        <span class=\"supfact\">v9</span> =\n            fread(<span class=\"supfact\">s</span>, Number, <span class=\"supfact\">v7</span>.st_size,\n                  <span class=\"supfact\">stream</span>);\n        if (<span class=\"supfact\">v9</span> == <span class=\"supfact\">v7</span>.st_size) {\n          fclose(<span class=\"supfact\">stream</span>);\n          <span class=\"supfact\">s</span>[Number] = Number;\n          <span class=\"supfact\">s</span>[Number] = Number;\n          <span class=\"supfact\">v8</span> = fopen64(argv[Number], String);\n          <span class=\"supfact\">v9</span> =\n              fwrite(<span class=\"supfact\">s</span>, Number, Number, <span class=\"supfact\">v8</span>);\n          if (<span class=\"supfact\">v9</span> == Number) {\n            fclose(<span class=\"supfact\">v8</span>);\n            printf(String, argv[Number]);\n            result = Number;\n          } else {\n            fprintf(stderr, String, argv[Number], <span class=\"supfact\">v9</span>);\n            result = Number;\n          }\n        } else {\n          fprintf(stderr, String, argv[Number], <span class=\"supfact\">v9</span>);\n          result = Number;\n        }\n      } else {\n        fprintf(stderr, String, <span class=\"supfact\">v7</span>.st_size);\n        result = Number;\n      }\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  int *v4;\n  char *v5;\n  char <span class=\"supfact\">buf</span>[Number];\n  stat <span class=\"supfact\">st</span>;\n  FILE *<span class=\"supfact\">ofp</span>;\n  int <span class=\"supfact\">size</span>;\n  FILE *<span class=\"supfact\">ifp</span>;\n  if (argc == Number) {\n    if (stat64(argv[Number], (struct stat64 *)&<span class=\"supfact\">st</span>)) {\n      v4 = _errno_location();\n      v5 = strerror(*v4);\n      fprintf(stderr, String, argv[Number], v5);\n      result = Number;\n    } else {\n      printf(String, argv[Number], <span class=\"supfact\">st</span>.st_size);\n      if (<span class=\"supfact\">st</span>.st_size <= Number) {\n        memset(<span class=\"supfact\">buf</span>, Number, sizeof(<span class=\"supfact\">buf</span>));\n        <span class=\"supfact\">ifp</span> = fopen64(argv[Number], String);\n        <span class=\"supfact\">size</span> =\n            fread(<span class=\"supfact\">buf</span>, Number, <span class=\"supfact\">st</span>.st_size,\n                  <span class=\"supfact\">ifp</span>);\n        if (<span class=\"supfact\">size</span> == <span class=\"supfact\">st</span>.st_size) {\n          fclose(<span class=\"supfact\">ifp</span>);\n          <span class=\"supfact\">buf</span>[Number] = Number;\n          <span class=\"supfact\">buf</span>[Number] = Number;\n          <span class=\"supfact\">ofp</span> = fopen64(argv[Number], String);\n          <span class=\"supfact\">size</span> =\n              fwrite(<span class=\"supfact\">buf</span>, Number, Number, <span class=\"supfact\">ofp</span>);\n          if (<span class=\"supfact\">size</span> == Number) {\n            fclose(<span class=\"supfact\">ofp</span>);\n            printf(String, argv[Number]);\n            result = Number;\n          } else {\n            fprintf(stderr, String, argv[Number],\n                    (unsigned int)<span class=\"supfact\">size</span>);\n            result = Number;\n          }\n        } else {\n          fprintf(stderr, String, argv[Number],\n                  (unsigned int)<span class=\"supfact\">size</span>);\n          result = Number;\n        }\n      } else {\n        fprintf(stderr, String, <span class=\"supfact\">st</span>.st_size);\n        result = Number;\n      }\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v7", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "mthuurne", "repo_name": "qemu-dingoo", "path": "mthuurne/qemu-dingoo/70a27879145810417d9ea93077e696fec28cdfea3e4322bca9e3e7e869c3ace1", "path_in_repo": "mthuurne/qemu-dingoo//migration-tcp.o", "objdump": "00000000000003c1 <tcp_accept_incoming_migration>:\n 3c1:\t55                   \tpush   %rbp\n 3c2:\t48 89 e5             \tmov    %rsp,%rbp\n 3c5:\t48 83 ec 50          \tsub    $0x50,%rsp\n 3c9:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n 3cd:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 3d4:\t00 00 \n 3d6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 3da:\t31 c0                \txor    %eax,%eax\n 3dc:\tc7 45 cc 10 00 00 00 \tmovl   $0x10,-0x34(%rbp)\n 3e3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 3e7:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n 3ea:\t48 8d 55 cc          \tlea    -0x34(%rbp),%rdx\n 3ee:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n 3f2:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n 3f5:\t48 89 ce             \tmov    %rcx,%rsi\n 3f8:\t89 c7                \tmov    %eax,%edi\n 3fa:\te8 00 00 00 00       \tcallq  3ff <tcp_accept_incoming_migration+0x3e>\n 3ff:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n 402:\t83 7d d4 ff          \tcmpl   $0xffffffff,-0x2c(%rbp)\n 406:\t75 0c                \tjne    414 <tcp_accept_incoming_migration+0x53>\n 408:\te8 00 00 00 00       \tcallq  40d <tcp_accept_incoming_migration+0x4c>\n 40d:\t8b 00                \tmov    (%rax),%eax\n 40f:\t83 f8 04             \tcmp    $0x4,%eax\n 412:\t74 d6                \tje     3ea <tcp_accept_incoming_migration+0x29>\n 414:\t83 7d d4 ff          \tcmpl   $0xffffffff,-0x2c(%rbp)\n 418:\t75 23                \tjne    43d <tcp_accept_incoming_migration+0x7c>\n 41a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 421 <tcp_accept_incoming_migration+0x60>\n 421:\t48 89 c1             \tmov    %rax,%rcx\n 424:\tba 26 00 00 00       \tmov    $0x26,%edx\n 429:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 42e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 433:\te8 00 00 00 00       \tcallq  438 <tcp_accept_incoming_migration+0x77>\n 438:\te9 80 00 00 00       \tjmpq   4bd <tcp_accept_incoming_migration+0xfc>\n 43d:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 440:\t89 c7                \tmov    %eax,%edi\n 442:\te8 00 00 00 00       \tcallq  447 <tcp_accept_incoming_migration+0x86>\n 447:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 44b:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n 450:\t75 20                \tjne    472 <tcp_accept_incoming_migration+0xb1>\n 452:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 459 <tcp_accept_incoming_migration+0x98>\n 459:\t48 89 c1             \tmov    %rax,%rcx\n 45c:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n 461:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 466:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 46b:\te8 00 00 00 00       \tcallq  470 <tcp_accept_incoming_migration+0xaf>\n 470:\teb 18                \tjmp    48a <tcp_accept_incoming_migration+0xc9>\n 472:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 476:\t48 89 c7             \tmov    %rax,%rdi\n 479:\te8 00 00 00 00       \tcallq  47e <tcp_accept_incoming_migration+0xbd>\n 47e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 482:\t48 89 c7             \tmov    %rax,%rdi\n 485:\te8 00 00 00 00       \tcallq  48a <tcp_accept_incoming_migration+0xc9>\n 48a:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n 48d:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 493:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 498:\tba 00 00 00 00       \tmov    $0x0,%edx\n 49d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 4a2:\t89 c7                \tmov    %eax,%edi\n 4a4:\te8 00 00 00 00       \tcallq  4a9 <tcp_accept_incoming_migration+0xe8>\n 4a9:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n 4ac:\t89 c7                \tmov    %eax,%edi\n 4ae:\te8 00 00 00 00       \tcallq  4b3 <tcp_accept_incoming_migration+0xf2>\n 4b3:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 4b6:\t89 c7                \tmov    %eax,%edi\n 4b8:\te8 00 00 00 00       \tcallq  4bd <tcp_accept_incoming_migration+0xfc>\n 4bd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 4c1:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 4c8:\t00 00 \n 4ca:\t74 05                \tje     4d1 <tcp_accept_incoming_migration+0x110>\n 4cc:\te8 00 00 00 00       \tcallq  4d1 <tcp_accept_incoming_migration+0x110>\n 4d1:\tc9                   \tleaveq \n 4d2:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall tcp_accept_incoming_migration(int a1) {\n  int <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">fd</span>;\n  int <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  char <span class=\"supfact\">v6</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  <span class=\"supfact\">v2</span> = Number;\n  <span class=\"supfact\">fd</span> = a1;\n  do\n    <span class=\"supfact\">v4</span> = qemu_accept((unsigned int)<span class=\"supfact\">fd</span>,\n                                     <span class=\"supfact\">v6</span>, &<span class=\"supfact\">v2</span>);\n  while (<span class=\"supfact\">v4</span> == Number && *_errno_location() == Number);\n  if (<span class=\"supfact\">v4</span> == Number) {\n    fwrite(String, Number, Number, stderr);\n  } else {\n    <span class=\"supfact\">v5</span> = qemu_fopen_socket((unsigned int)<span class=\"supfact\">v4</span>);\n    if (<span class=\"supfact\">v5</span>) {\n      process_incoming_migration(<span class=\"supfact\">v5</span>);\n      qemu_fclose(<span class=\"supfact\">v5</span>);\n    } else {\n      fwrite(String, Number, Number, stderr);\n    }\n    qemu_set_fd_handler2((unsigned int)<span class=\"supfact\">fd</span>, Number L, Number L,\n                         Number L, Number L);\n    close(<span class=\"supfact\">fd</span>);\n    close(<span class=\"supfact\">v4</span>);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v7</span>;\n}", "code_t": "void __cdecl tcp_accept_incoming_migration(void *opaque) {\n  socklen_t <span class=\"supfact\">addrlen</span>;\n  int <span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">c</span>;\n  QEMUFile_0 *<span class=\"supfact\">f</span>;\n  sockaddr_in <span class=\"supfact\">addr</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  <span class=\"supfact\">addrlen</span> = Number;\n  <span class=\"supfact\">s</span> = (int)opaque;\n  do\n    <span class=\"supfact\">c</span> =\n        qemu_accept((unsigned int)<span class=\"supfact\">s</span>, &<span class=\"supfact\">addr</span>,\n                    &<span class=\"supfact\">addrlen</span>);\n  while (<span class=\"supfact\">c</span> == Number && *_errno_location() == Number);\n  if (<span class=\"supfact\">c</span> == Number) {\n    fwrite(String, Number, Number, stderr);\n  } else {\n    <span class=\"supfact\">f</span> =\n        (QEMUFile_0 *)qemu_fopen_socket((unsigned int)<span class=\"supfact\">c</span>);\n    if (<span class=\"supfact\">f</span>) {\n      process_incoming_migration(<span class=\"supfact\">f</span>);\n      qemu_fclose(<span class=\"supfact\">f</span>);\n    } else {\n      fwrite(String, Number, Number, stderr);\n    }\n    qemu_set_fd_handler2((unsigned int)<span class=\"supfact\">s</span>, Number L, Number L,\n                         Number L, Number L);\n    close(<span class=\"supfact\">s</span>);\n    close(<span class=\"supfact\">c</span>);\n  }\n}", "var": [{"name": "v6", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "MinerGuo", "repo_name": "MySocket", "path": "MinerGuo/MySocket/28abb4ed2ffb60a8d4d9380bf350a58b67ac0e83744966d7416d3f286e76f8f8", "path_in_repo": "MinerGuo/MySocket/advance/daemon13/rule.o", "objdump": "0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n   b:\t89 bd 2c ff ff ff    \tmov    %edi,-0xd4(%rbp)\n  11:\t48 89 b5 20 ff ff ff \tmov    %rsi,-0xe0(%rbp)\n  18:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  1d:\te8 00 00 00 00       \tcallq  22 <main+0x22>\n  22:\te8 00 00 00 00       \tcallq  27 <main+0x27>\n  27:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  2a:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  2e:\t7e 0a                \tjle    3a <main+0x3a>\n  30:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  35:\te8 00 00 00 00       \tcallq  3a <main+0x3a>\n  3a:\te8 00 00 00 00       \tcallq  3f <main+0x3f>\n  3f:\t48 c7 85 30 ff ff ff \tmovq   $0x1,-0xd0(%rbp)\n  46:\t01 00 00 00 \n  4a:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n  51:\t48 83 c0 08          \tadd    $0x8,%rax\n  55:\t48 89 c7             \tmov    %rax,%rdi\n  58:\te8 00 00 00 00       \tcallq  5d <main+0x5d>\n  5d:\tc7 45 b8 00 00 00 00 \tmovl   $0x0,-0x48(%rbp)\n  64:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n  6b:\tba 00 00 00 00       \tmov    $0x0,%edx\n  70:\t48 89 c6             \tmov    %rax,%rsi\n  73:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  78:\te8 00 00 00 00       \tcallq  7d <main+0x7d>\n  7d:\te8 00 00 00 00       \tcallq  82 <main+0x82>\n  82:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  85:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  89:\t7e 0a                \tjle    95 <main+0x95>\n  8b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  90:\te8 00 00 00 00       \tcallq  95 <main+0x95>\n  95:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  9a:\te8 00 00 00 00       \tcallq  9f <main+0x9f>\n  9f:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  a3:\t48 89 c6             \tmov    %rax,%rsi\n  a6:\tbf 07 00 00 00       \tmov    $0x7,%edi\n  ab:\te8 00 00 00 00       \tcallq  b0 <main+0xb0>\n  b0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  b4:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n  b8:\t75 08                \tjne    c2 <main+0xc2>\n  ba:\t48 c7 45 d8 00 04 00 \tmovq   $0x400,-0x28(%rbp)\n  c1:\t00 \n  c2:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  c9:\teb 0e                \tjmp    d9 <main+0xd9>\n  cb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  ce:\t89 c7                \tmov    %eax,%edi\n  d0:\te8 00 00 00 00       \tcallq  d5 <main+0xd5>\n  d5:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  d9:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  dc:\t48 63 d0             \tmovslq %eax,%rdx\n  df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  e3:\t48 39 c2             \tcmp    %rax,%rdx\n  e6:\t72 e3                \tjb     cb <main+0xcb>\n  e8:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  ed:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  f7:\te8 00 00 00 00       \tcallq  fc <main+0xfc>\n  fc:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  ff:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 102:\t89 c7                \tmov    %eax,%edi\n 104:\te8 00 00 00 00       \tcallq  109 <main+0x109>\n 109:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 10c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 10f:\t89 c7                \tmov    %eax,%edi\n 111:\te8 00 00 00 00       \tcallq  116 <main+0x116>\n 116:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 119:\teb fe                \tjmp    119 <main+0x119>\n", "code_s": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  struct sigaction <span class=\"supfact\">v3</span>;\n  struct rlimit <span class=\"supfact\">rlimits</span>;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  __pid_t <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">fd</span>;\n  umask(Number);\n  <span class=\"supfact\">v8</span> = fork();\n  if (<span class=\"supfact\">v8</span> > Number)\n    exit(Number);\n  setsid();\n  <span class=\"supfact\">v3</span>.sa_handler = (__sighandler_t)&loc_1;\n  sigemptyset(&<span class=\"supfact\">v3</span>.sa_mask);\n  <span class=\"supfact\">v3</span>.sa_flags = Number;\n  sigaction(Number, &<span class=\"supfact\">v3</span>, Number L);\n  <span class=\"supfact\">v8</span> = fork();\n  if (<span class=\"supfact\">v8</span> > Number)\n    exit(Number);\n  chdir(String);\n  getrlimit(RLIMIT_NOFILE, &<span class=\"supfact\">rlimits</span>);\n  if (<span class=\"supfact\">rlimits</span>.rlim_max == Number)\n    <span class=\"supfact\">rlimits</span>.rlim_max = Number L;\n  for (<span class=\"supfact\">fd</span> = Number;\n       <span class=\"supfact\">fd</span> < <span class=\"supfact\">rlimits</span>.rlim_max;\n       ++<span class=\"supfact\">fd</span>)\n    close(<span class=\"supfact\">fd</span>);\n  <span class=\"supfact\">v7</span> = open(String, Number);\n  <span class=\"supfact\">v6</span> = dup(<span class=\"supfact\">v7</span>);\n  <span class=\"supfact\">v5</span> = dup(<span class=\"supfact\">v7</span>);\n  while (Number)\n    ;\n}", "code_t": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  sigaction <span class=\"supfact\">sa</span>;\n  rlimit <span class=\"supfact\">rl</span>;\n  int <span class=\"supfact\">fd2</span>;\n  int <span class=\"supfact\">fd1</span>;\n  int <span class=\"supfact\">fd0</span>;\n  pid_t <span class=\"supfact\">pid</span>;\n  int <span class=\"supfact\">i</span>;\n  umask(Number);\n  <span class=\"supfact\">pid</span> = fork();\n  if (<span class=\"supfact\">pid</span> > Number)\n    exit(Number);\n  setsid();\n  <span class=\"supfact\">sa</span>.sa_handler = (__sighandler_t)&loc_1;\n  sigemptyset(&<span class=\"supfact\">sa</span>.sa_mask);\n  <span class=\"supfact\">sa</span>.sa_flags = Number;\n  sigaction_0(Number, &<span class=\"supfact\">sa</span>, Number L);\n  <span class=\"supfact\">pid</span> = fork();\n  if (<span class=\"supfact\">pid</span> > Number)\n    exit(Number);\n  chdir(String);\n  getrlimit(RLIMIT_NOFILE, &<span class=\"supfact\">rl</span>);\n  if (<span class=\"supfact\">rl</span>.rlim_max == Number)\n    <span class=\"supfact\">rl</span>.rlim_max = Number L;\n  for (<span class=\"supfact\">i</span> = Number;\n       <span class=\"supfact\">i</span> < <span class=\"supfact\">rl</span>.rlim_max; ++<span class=\"supfact\">i</span>)\n    close(<span class=\"supfact\">i</span>);\n  <span class=\"supfact\">fd0</span> = open(String, Number);\n  <span class=\"supfact\">fd1</span> = dup(<span class=\"supfact\">fd0</span>);\n  <span class=\"supfact\">fd2</span> = dup(<span class=\"supfact\">fd0</span>);\n  while (Number)\n    ;\n}", "var": [{"name": "rlimits", "type": "struct rlimit { rlim_t rlim_cur; rlim_t rlim_max; }", "ref_name": "rl", "ref_type": "struct rlimit { rlim_t rlim_cur; rlim_t rlim_max; }"}, {"name": "v3", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "sa", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d4a3e7148b67bff6fe668513f6b0b311eb206e1822da210277eb341beb1dc43d", "path_in_repo": "XanClic/qemu//arm-softmmu/hw/arm/smmuv3.o", "objdump": "0000000000000e16 <_nocheck__trace_smmuv3_find_ste_2lvl>:\n     e16:\t55                   \tpush   %rbp\n     e17:\t48 89 e5             \tmov    %rsp,%rbp\n     e1a:\t41 54                \tpush   %r12\n     e1c:\t53                   \tpush   %rbx\n     e1d:\t48 83 ec 50          \tsub    $0x50,%rsp\n     e21:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     e25:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     e29:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n     e2c:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n     e30:\t44 89 45 b8          \tmov    %r8d,-0x48(%rbp)\n     e34:\t44 89 4d ac          \tmov    %r9d,-0x54(%rbp)\n     e38:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     e3f:\t00 00 \n     e41:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     e45:\t31 c0                \txor    %eax,%eax\n     e47:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # e4d <_nocheck__trace_smmuv3_find_ste_2lvl+0x37>\n     e4d:\t85 c0                \ttest   %eax,%eax\n     e4f:\t0f 95 c0             \tsetne  %al\n     e52:\t0f b6 c0             \tmovzbl %al,%eax\n     e55:\t48 85 c0             \ttest   %rax,%rax\n     e58:\t74 78                \tje     ed2 <_nocheck__trace_smmuv3_find_ste_2lvl+0xbc>\n     e5a:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # e61 <_nocheck__trace_smmuv3_find_ste_2lvl+0x4b>\n     e61:\t66 85 c0             \ttest   %ax,%ax\n     e64:\t74 6c                \tje     ed2 <_nocheck__trace_smmuv3_find_ste_2lvl+0xbc>\n     e66:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     e6b:\te8 e1 f4 ff ff       \tcallq  351 <qemu_loglevel_mask>\n     e70:\t84 c0                \ttest   %al,%al\n     e72:\t74 5e                \tje     ed2 <_nocheck__trace_smmuv3_find_ste_2lvl+0xbc>\n     e74:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     e78:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     e7d:\t48 89 c7             \tmov    %rax,%rdi\n     e80:\te8 00 00 00 00       \tcallq  e85 <_nocheck__trace_smmuv3_find_ste_2lvl+0x6f>\n     e85:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     e89:\t49 89 c4             \tmov    %rax,%r12\n     e8c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     e90:\t48 89 c3             \tmov    %rax,%rbx\n     e93:\te8 00 00 00 00       \tcallq  e98 <_nocheck__trace_smmuv3_find_ste_2lvl+0x82>\n     e98:\t89 c6                \tmov    %eax,%esi\n     e9a:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     e9e:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     ea2:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n     ea5:\t50                   \tpush   %rax\n     ea6:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n     ea9:\t50                   \tpush   %rax\n     eaa:\tff 75 b0             \tpushq  -0x50(%rbp)\n     ead:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     eb0:\t50                   \tpush   %rax\n     eb1:\t49 89 c9             \tmov    %rcx,%r9\n     eb4:\t49 89 d0             \tmov    %rdx,%r8\n     eb7:\t4c 89 e1             \tmov    %r12,%rcx\n     eba:\t48 89 da             \tmov    %rbx,%rdx\n     ebd:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # ec4 <_nocheck__trace_smmuv3_find_ste_2lvl+0xae>\n     ec4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ec9:\te8 00 00 00 00       \tcallq  ece <_nocheck__trace_smmuv3_find_ste_2lvl+0xb8>\n     ece:\t48 83 c4 20          \tadd    $0x20,%rsp\n     ed2:\t90                   \tnop\n     ed3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ed7:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     ede:\t00 00 \n     ee0:\t74 05                \tje     ee7 <_nocheck__trace_smmuv3_find_ste_2lvl+0xd1>\n     ee2:\te8 00 00 00 00       \tcallq  ee7 <_nocheck__trace_smmuv3_find_ste_2lvl+0xd1>\n     ee7:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     eeb:\t5b                   \tpop    %rbx\n     eec:\t41 5c                \tpop    %r12\n     eee:\t5d                   \tpop    %rbp\n     eef:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_smmuv3_find_ste_2lvl(\n    __int64 a1, __int64 a2, unsigned int a3, __int64 a4, unsigned int a5,\n    unsigned int a6) {\n  __suseconds_t v6;\n  __time_t v7;\n  unsigned int v8;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v15</span>;\n  <span class=\"supfact\">v15</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_FIND_STE_2LVL_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v6 = <span class=\"supfact\">tv</span>.tv_usec;\n    v7 = <span class=\"supfact\">tv</span>.tv_sec;\n    v8 = qemu_get_thread_id();\n    qemu_log(String, v8, v7, v6, a1, a2, a3, a4, a5, a6);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v15</span>;\n}", "code_t": "void __cdecl nocheck__trace_smmuv3_find_ste_2lvl(\n    uint64_t strtab_base, uint64_t l1ptr, int l1_ste_offset, uint64_t l2ptr,\n    int l2_ste_offset, int max_l2_ste) {\n  __suseconds_t v6;\n  __time_t v7;\n  unsigned int v8;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v14</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_FIND_STE_2LVL_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v6 = <span class=\"supfact\">_now</span>.tv_usec;\n    v7 = <span class=\"supfact\">_now</span>.tv_sec;\n    v8 = qemu_get_thread_id();\n    qemu_log(String, v8, v7, v6, strtab_base, l1ptr,\n             (unsigned int)l1_ste_offset, l2ptr, (unsigned int)l2_ste_offset,\n             (unsigned int)max_l2_ste);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "lukesalisbury", "repo_name": "meg", "path": "lukesalisbury/meg/480c56a06a00ed217dfbf4bdd3f05118d83fa094762891d9248265884cef37e2", "path_in_repo": "lukesalisbury/meg//objects/ma_log.o", "objdump": "00000000000000ba <Meg_Log_Append>:\n  ba:\t55                   \tpush   %rbp\n  bb:\t48 89 e5             \tmov    %rsp,%rbp\n  be:\t48 83 ec 60          \tsub    $0x60,%rsp\n  c2:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n  c5:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  c9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d0 <Meg_Log_Append+0x16>\n  d0:\t48 85 c0             \ttest   %rax,%rax\n  d3:\t75 3c                \tjne    111 <Meg_Log_Append+0x57>\n  d5:\t83 7d ac 02          \tcmpl   $0x2,-0x54(%rbp)\n  d9:\t75 1b                \tjne    f6 <Meg_Log_Append+0x3c>\n  db:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  df:\t48 89 c6             \tmov    %rax,%rsi\n  e2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  e7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  ec:\te8 00 00 00 00       \tcallq  f1 <Meg_Log_Append+0x37>\n  f1:\te9 62 01 00 00       \tjmpq   258 <Meg_Log_Append+0x19e>\n  f6:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  fa:\t48 89 c6             \tmov    %rax,%rsi\n  fd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 102:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 107:\te8 00 00 00 00       \tcallq  10c <Meg_Log_Append+0x52>\n 10c:\te9 47 01 00 00       \tjmpq   258 <Meg_Log_Append+0x19e>\n 111:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 118 <Meg_Log_Append+0x5e>\n 118:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n 11c:\t48 89 d6             \tmov    %rdx,%rsi\n 11f:\t48 89 c7             \tmov    %rax,%rdi\n 122:\te8 00 00 00 00       \tcallq  127 <Meg_Log_Append+0x6d>\n 127:\t83 7d ac 04          \tcmpl   $0x4,-0x54(%rbp)\n 12b:\t0f 87 0a 01 00 00    \tja     23b <Meg_Log_Append+0x181>\n 131:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n 134:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 13b:\t00 \n 13c:\tff e0                \tjmpq   *%rax\n 13e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 145 <Meg_Log_Append+0x8b>\n 145:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n 149:\t48 8d 75 b0          \tlea    -0x50(%rbp),%rsi\n 14d:\tb9 ff ff ff ff       \tmov    $0xffffffff,%ecx\n 152:\t48 89 c7             \tmov    %rax,%rdi\n 155:\te8 00 00 00 00       \tcallq  15a <Meg_Log_Append+0xa0>\n 15a:\te9 dc 00 00 00       \tjmpq   23b <Meg_Log_Append+0x181>\n 15f:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 166 <Meg_Log_Append+0xac>\n 166:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 16d <Meg_Log_Append+0xb3>\n 16d:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n 171:\t48 8d 75 b0          \tlea    -0x50(%rbp),%rsi\n 175:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 17b:\t49 89 c8             \tmov    %rcx,%r8\n 17e:\tb9 ff ff ff ff       \tmov    $0xffffffff,%ecx\n 183:\t48 89 c7             \tmov    %rax,%rdi\n 186:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 18b:\te8 00 00 00 00       \tcallq  190 <Meg_Log_Append+0xd6>\n 190:\te9 a6 00 00 00       \tjmpq   23b <Meg_Log_Append+0x181>\n 195:\t48 8b 3d 00 00 00 00 \tmov    0x0(%rip),%rdi        # 19c <Meg_Log_Append+0xe2>\n 19c:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 1a3 <Meg_Log_Append+0xe9>\n 1a3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1aa <Meg_Log_Append+0xf0>\n 1aa:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n 1ae:\t48 8d 75 b0          \tlea    -0x50(%rbp),%rsi\n 1b2:\t48 83 ec 08          \tsub    $0x8,%rsp\n 1b6:\t6a 00                \tpushq  $0x0\n 1b8:\t49 89 f9             \tmov    %rdi,%r9\n 1bb:\t49 89 c8             \tmov    %rcx,%r8\n 1be:\tb9 ff ff ff ff       \tmov    $0xffffffff,%ecx\n 1c3:\t48 89 c7             \tmov    %rax,%rdi\n 1c6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1cb:\te8 00 00 00 00       \tcallq  1d0 <Meg_Log_Append+0x116>\n 1d0:\t48 83 c4 10          \tadd    $0x10,%rsp\n 1d4:\teb 65                \tjmp    23b <Meg_Log_Append+0x181>\n 1d6:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 1dd <Meg_Log_Append+0x123>\n 1dd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e4 <Meg_Log_Append+0x12a>\n 1e4:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n 1e8:\t48 8d 75 b0          \tlea    -0x50(%rbp),%rsi\n 1ec:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 1f2:\t49 89 c8             \tmov    %rcx,%r8\n 1f5:\tb9 ff ff ff ff       \tmov    $0xffffffff,%ecx\n 1fa:\t48 89 c7             \tmov    %rax,%rdi\n 1fd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 202:\te8 00 00 00 00       \tcallq  207 <Meg_Log_Append+0x14d>\n 207:\teb 32                \tjmp    23b <Meg_Log_Append+0x181>\n 209:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 210 <Meg_Log_Append+0x156>\n 210:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 217 <Meg_Log_Append+0x15d>\n 217:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n 21b:\t48 8d 75 b0          \tlea    -0x50(%rbp),%rsi\n 21f:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 225:\t49 89 c8             \tmov    %rcx,%r8\n 228:\tb9 ff ff ff ff       \tmov    $0xffffffff,%ecx\n 22d:\t48 89 c7             \tmov    %rax,%rdi\n 230:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 235:\te8 00 00 00 00       \tcallq  23a <Meg_Log_Append+0x180>\n 23a:\t90                   \tnop\n 23b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 242 <Meg_Log_Append+0x188>\n 242:\t48 8d 75 b0          \tlea    -0x50(%rbp),%rsi\n 246:\tb9 ff ff ff ff       \tmov    $0xffffffff,%ecx\n 24b:\tba 00 00 00 00       \tmov    $0x0,%edx\n 250:\t48 89 c7             \tmov    %rax,%rdi\n 253:\te8 00 00 00 00       \tcallq  258 <Meg_Log_Append+0x19e>\n 258:\t90                   \tnop\n 259:\tc9                   \tleaveq \n 25a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Meg_Log_Append(int a1, const char *a2) {\n  __int64 result;\n  char <span class=\"supfact\">v3</span>[Number];\n  if (log_buffer) {\n    gtk_text_buffer_get_end_iter(log_buffer, <span class=\"supfact\">v3</span>);\n    switch (a1) {\n    case Number:\n      gtk_text_buffer_insert(log_buffer, <span class=\"supfact\">v3</span>, a2, Number);\n      break;\n    case Number:\n      gtk_text_buffer_insert_with_tags(log_buffer, <span class=\"supfact\">v3</span>, a2,\n                                       Number, log_bold, Number L);\n      break;\n    case Number:\n      gtk_text_buffer_insert_with_tags(log_buffer, <span class=\"supfact\">v3</span>, a2,\n                                       Number, log_bold, log_error);\n      break;\n    case Number:\n      gtk_text_buffer_insert_with_tags(log_buffer, <span class=\"supfact\">v3</span>, a2,\n                                       Number, log_error, Number L);\n      break;\n    case Number:\n      gtk_text_buffer_insert_with_tags(log_buffer, <span class=\"supfact\">v3</span>, a2,\n                                       Number, log_fine, Number L);\n      break;\n    default:\n      break;\n    }\n    result =\n        gtk_text_buffer_insert(log_buffer, <span class=\"supfact\">v3</span>, String, Number);\n  } else if (a1 == Number) {\n    result = g_printerr(String, a2);\n  } else {\n    result = g_print(String, a2);\n  }\n  return result;\n}", "code_t": "void __cdecl Meg_Log_Append(LogStyle_0 style, gchar *text) {\n  GtkTextIter <span class=\"supfact\">iter</span>;\n  if (log_buffer) {\n    gtk_text_buffer_get_end_iter(log_buffer, &<span class=\"supfact\">iter</span>);\n    switch (style) {\n    case LOG_NONE:\n      gtk_text_buffer_insert(log_buffer, &<span class=\"supfact\">iter</span>, text, Number);\n      break;\n    case LOG_BOLD:\n      gtk_text_buffer_insert_with_tags(log_buffer, &<span class=\"supfact\">iter</span>, text,\n                                       Number, log_bold, Number L);\n      break;\n    case LOG_ERROR:\n      gtk_text_buffer_insert_with_tags(log_buffer, &<span class=\"supfact\">iter</span>, text,\n                                       Number, log_bold, log_error);\n      break;\n    case LOG_WARNING:\n      gtk_text_buffer_insert_with_tags(log_buffer, &<span class=\"supfact\">iter</span>, text,\n                                       Number, log_error, Number L);\n      break;\n    case LOG_FINE:\n      gtk_text_buffer_insert_with_tags(log_buffer, &<span class=\"supfact\">iter</span>, text,\n                                       Number, log_fine, Number L);\n      break;\n    default:\n      break;\n    }\n    gtk_text_buffer_insert(log_buffer, &<span class=\"supfact\">iter</span>, String, Number);\n  } else if (style == LOG_ERROR) {\n    g_printerr(String, text);\n  } else {\n    g_print(String, text);\n  }\n}", "var": [{"name": "v3", "type": "struct GtkTextIter { gpointer dummy1; gpointer dummy2; gint dummy3; gint dummy4; gint dummy5; gint dummy6; gint dummy7; gint dummy8; gpointer dummy9; gpointer dummy10; gint dummy11; gint dummy12; gint dummy13; PADDING (4); gpointer dummy14; }", "ref_name": "iter", "ref_type": "struct GtkTextIter { gpointer dummy1; gpointer dummy2; gint dummy3; gint dummy4; gint dummy5; gint dummy6; gint dummy7; gint dummy8; gpointer dummy9; gpointer dummy10; gint dummy11; gint dummy12; gint dummy13; PADDING (4); gpointer dummy14; }"}], "body_in_train": false}, {"repo_owner": "ADoby", "repo_name": "Project_Space_Pirate", "path": "ADoby/Project_Space_Pirate/f5868d766fb7a6da99203947602aabe3fafe3cf8a4c6ba6b81446ab5cc9fa247", "path_in_repo": "ADoby/Project_Space_Pirate/ProjectFiles/cocos2dx/proj.linux/obj/release/platform/linux/CCFileUtilsLinux.o", "objdump": "0000000000000000 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:\n   0:\t41 56                \tpush   %r14\n   2:\t41 55                \tpush   %r13\n   4:\t45 31 ed             \txor    %r13d,%r13d\n   7:\t41 54                \tpush   %r12\n   9:\t55                   \tpush   %rbp\n   a:\t53                   \tpush   %rbx\n   b:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  12:\t4c 8b 66 08          \tmov    0x8(%rsi),%r12\n  16:\t4d 85 e4             \ttest   %r12,%r12\n  19:\t75 15                \tjne    30 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>\n  1b:\t48 81 c4 b0 00 00 00 \tadd    $0xb0,%rsp\n  22:\t44 89 e8             \tmov    %r13d,%eax\n  25:\t5b                   \tpop    %rbx\n  26:\t5d                   \tpop    %rbp\n  27:\t41 5c                \tpop    %r12\n  29:\t41 5d                \tpop    %r13\n  2b:\t41 5e                \tpop    %r14\n  2d:\tc3                   \tretq   \n  2e:\t66 90                \txchg   %ax,%ax\n  30:\t4c 8b 2e             \tmov    (%rsi),%r13\n  33:\t48 8d 6c 24 10       \tlea    0x10(%rsp),%rbp\n  38:\t49 89 e6             \tmov    %rsp,%r14\n  3b:\t48 89 2c 24          \tmov    %rbp,(%rsp)\n  3f:\t4d 85 ed             \ttest   %r13,%r13\n  42:\t0f 84 ca 00 00 00    \tje     112 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x112>\n  48:\t4c 89 64 24 20       \tmov    %r12,0x20(%rsp)\n  4d:\t48 89 fb             \tmov    %rdi,%rbx\n  50:\t49 83 fc 0f          \tcmp    $0xf,%r12\n  54:\t0f 87 96 00 00 00    \tja     f0 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>\n  5a:\t49 83 fc 01          \tcmp    $0x1,%r12\n  5e:\t75 70                \tjne    d0 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>\n  60:\t41 0f b6 45 00       \tmovzbl 0x0(%r13),%eax\n  65:\t88 44 24 10          \tmov    %al,0x10(%rsp)\n  69:\t48 89 e8             \tmov    %rbp,%rax\n  6c:\t4c 89 64 24 08       \tmov    %r12,0x8(%rsp)\n  71:\t4c 89 f6             \tmov    %r14,%rsi\n  74:\t48 89 df             \tmov    %rbx,%rdi\n  77:\t42 c6 04 20 00       \tmovb   $0x0,(%rax,%r12,1)\n  7c:\t48 8b 03             \tmov    (%rbx),%rax\n  7f:\tff 90 88 00 00 00    \tcallq  *0x88(%rax)\n  85:\t84 c0                \ttest   %al,%al\n  87:\t75 14                \tjne    9d <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d>\n  89:\t48 8b 4b 40          \tmov    0x40(%rbx),%rcx\n  8d:\t4c 8b 43 48          \tmov    0x48(%rbx),%r8\n  91:\t31 d2                \txor    %edx,%edx\n  93:\t31 f6                \txor    %esi,%esi\n  95:\t4c 89 f7             \tmov    %r14,%rdi\n  98:\te8 00 00 00 00       \tcallq  9d <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d>\n  9d:\t48 8b 34 24          \tmov    (%rsp),%rsi\n  a1:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  a6:\t48 8d 54 24 20       \tlea    0x20(%rsp),%rdx\n  ab:\te8 00 00 00 00       \tcallq  b0 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb0>\n  b0:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n  b4:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  b7:\t41 0f 95 c5          \tsetne  %r13b\n  bb:\t48 39 ef             \tcmp    %rbp,%rdi\n  be:\t0f 84 57 ff ff ff    \tje     1b <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b>\n  c4:\te8 00 00 00 00       \tcallq  c9 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc9>\n  c9:\te9 4d ff ff ff       \tjmpq   1b <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b>\n  ce:\t66 90                \txchg   %ax,%ax\n  d0:\t48 89 ef             \tmov    %rbp,%rdi\n  d3:\t4c 89 e2             \tmov    %r12,%rdx\n  d6:\t4c 89 ee             \tmov    %r13,%rsi\n  d9:\te8 00 00 00 00       \tcallq  de <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>\n  de:\t4c 8b 64 24 20       \tmov    0x20(%rsp),%r12\n  e3:\t48 8b 04 24          \tmov    (%rsp),%rax\n  e7:\teb 83                \tjmp    6c <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c>\n  e9:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n  f0:\t4c 89 f7             \tmov    %r14,%rdi\n  f3:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n  f8:\t31 d2                \txor    %edx,%edx\n  fa:\te8 00 00 00 00       \tcallq  ff <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xff>\n  ff:\t48 89 04 24          \tmov    %rax,(%rsp)\n 103:\t48 89 c7             \tmov    %rax,%rdi\n 106:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 10b:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n 110:\teb c1                \tjmp    d3 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd3>\n 112:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 119 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x119>\n 119:\te8 00 00 00 00       \tcallq  11e <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11e>\n 11e:\t49 89 c4             \tmov    %rax,%r12\n 121:\te9 00 00 00 00       \tjmpq   126 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x126>\n 126:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n 12d:\t00 00 00 ", "code_s": "__int64 __fastcall cocos2d FileUtilsLinux isFileExist(_QWORD *a1, _BYTE **a2) {\n  _BYTE *v2;\n  char *v3;\n  __int64 *v6;\n  __int64 *v7;\n  char *<span class=\"supfact\">filename</span>[Number];\n  __int64 <span class=\"supfact\">dest</span>[Number];\n  struct stat <span class=\"supfact\">stat_buf</span>;\n  LODWORD(v2) = Number;\n  v3 = a2[Number];\n  if (!v3)\n    return (unsigned int)v2;\n  v2 = *a2;\n  <span class=\"supfact\">filename</span>[Number] = (char *)<span class=\"supfact\">dest</span>;\n  if (!v2)\n    std __throw_logic_error(String);\n  <span class=\"supfact\">stat_buf</span>.st_dev = (__dev_t)v3;\n  if ((unsigned __int64)v3 > Number) {\n    <span class=\"supfact\">filename</span>[Number] = (char *)std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        _M_create(<span class=\"supfact\">filename</span>, &<span class=\"supfact\">stat_buf</span>,\n                  Number L);\n    v7 = (__int64 *)<span class=\"supfact\">filename</span>[Number];\n    <span class=\"supfact\">dest</span>[Number] = <span class=\"supfact\">stat_buf</span>.st_dev;\n    goto LABEL_12;\n  }\n  if (v3 != (_BYTE *)cocos2d FileUtilsLinux isFileExist + Number) {\n    v7 = <span class=\"supfact\">dest</span>;\n  LABEL_12:\n    memcpy(v7, v2, (size_t)v3);\n    v3 = (char *)<span class=\"supfact\">stat_buf</span>.st_dev;\n    v6 = (__int64 *)<span class=\"supfact\">filename</span>[Number];\n    goto LABEL_7;\n  }\n  LOBYTE(<span class=\"supfact\">dest</span>[Number]) = *v2;\n  v6 = <span class=\"supfact\">dest</span>;\nLABEL_7:\n  <span class=\"supfact\">filename</span>[Number] = v3;\n  v3[(_QWORD)v6] = Number;\n  if (!(*(unsigned __int8(__fastcall **)(_QWORD *, char **))(*a1 + Number L))(\n          a1, <span class=\"supfact\">filename</span>))\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    _M_replace(<span class=\"supfact\">filename</span>, Number L, Number L, a1[Number],\n               a1[Number]);\n  LOBYTE(v2) = _xstat(Number, <span class=\"supfact\">filename</span>[Number],\n                      &<span class=\"supfact\">stat_buf</span>) != Number;\n  if ((__int64 *)<span class=\"supfact\">filename</span>[Number] != <span class=\"supfact\">dest</span>)\n    operator delete(<span class=\"supfact\">filename</span>[Number]);\n  return (unsigned int)v2;\n}", "code_t": "__int64 __fastcall cocos2d FileUtilsLinux isFileExist(_QWORD *a1, _BYTE **a2) {\n  _BYTE *v2;\n  char *v3;\n  __int64 *v6;\n  __int64 *v7;\n  char *<span class=\"supfact\">filename</span>[Number];\n  __int64 <span class=\"supfact\">dest</span>[Number];\n  struct stat <span class=\"supfact\">stat_buf</span>;\n  LODWORD(v2) = Number;\n  v3 = a2[Number];\n  if (!v3)\n    return (unsigned int)v2;\n  v2 = *a2;\n  <span class=\"supfact\">filename</span>[Number] = (char *)<span class=\"supfact\">dest</span>;\n  if (!v2)\n    std __throw_logic_error(String);\n  <span class=\"supfact\">stat_buf</span>.st_dev = (__dev_t)v3;\n  if ((unsigned __int64)v3 > Number) {\n    <span class=\"supfact\">filename</span>[Number] = (char *)std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        _M_create(<span class=\"supfact\">filename</span>, &<span class=\"supfact\">stat_buf</span>,\n                  Number L);\n    v7 = (__int64 *)<span class=\"supfact\">filename</span>[Number];\n    <span class=\"supfact\">dest</span>[Number] = <span class=\"supfact\">stat_buf</span>.st_dev;\n    goto LABEL_12;\n  }\n  if (v3 != (_BYTE *)cocos2d FileUtilsLinux isFileExist + Number) {\n    v7 = <span class=\"supfact\">dest</span>;\n  LABEL_12:\n    memcpy(v7, v2, (size_t)v3);\n    v3 = (char *)<span class=\"supfact\">stat_buf</span>.st_dev;\n    v6 = (__int64 *)<span class=\"supfact\">filename</span>[Number];\n    goto LABEL_7;\n  }\n  LOBYTE(<span class=\"supfact\">dest</span>[Number]) = *v2;\n  v6 = <span class=\"supfact\">dest</span>;\nLABEL_7:\n  <span class=\"supfact\">filename</span>[Number] = v3;\n  v3[(_QWORD)v6] = Number;\n  if (!(*(unsigned __int8(__fastcall **)(_QWORD *, char **))(*a1 + Number L))(\n          a1, <span class=\"supfact\">filename</span>))\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    _M_replace(<span class=\"supfact\">filename</span>, Number L, Number L, a1[Number],\n               a1[Number]);\n  LOBYTE(v2) = _xstat(Number, <span class=\"supfact\">filename</span>[Number],\n                      &<span class=\"supfact\">stat_buf</span>) != Number;\n  if ((__int64 *)<span class=\"supfact\">filename</span>[Number] != <span class=\"supfact\">dest</span>)\n    operator delete(<span class=\"supfact\">filename</span>[Number]);\n  return (unsigned int)v2;\n}", "var": [{"name": "stat_buf", "type": "struct struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __unused; }", "ref_name": "stat_buf", "ref_type": "struct struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __unused; }"}], "body_in_train": false}, {"repo_owner": "roger-zhao", "repo_name": "hostapd", "path": "roger-zhao/hostapd/5050a0d94d34dc8c9a769c94b075d9bc1075109b16fa911067eb27547f96c86f", "path_in_repo": "roger-zhao/hostapd/src/rsn_supp/pmksa_cache.o", "objdump": "0000000000001066 <pmksa_cache_list>:\n    1066:\t55                   \tpush   %rbp\n    1067:\t48 89 e5             \tmov    %rsp,%rbp\n    106a:\t48 83 ec 50          \tsub    $0x50,%rsp\n    106e:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1072:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    1076:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    107a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    107e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1082:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1086:\t48 89 c7             \tmov    %rax,%rdi\n    1089:\te8 00 00 00 00       \tcallq  108e <pmksa_cache_list+0x28>\n    108e:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    1092:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1096:\t48 01 d0             \tadd    %rdx,%rax\n    1099:\t48 2b 45 f0          \tsub    -0x10(%rbp),%rax\n    109d:\t48 89 c1             \tmov    %rax,%rcx\n    10a0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    10a4:\tba 00 00 00 00       \tmov    $0x0,%edx\n    10a9:\t48 89 ce             \tmov    %rcx,%rsi\n    10ac:\t48 89 c7             \tmov    %rax,%rdi\n    10af:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    10b4:\te8 00 00 00 00       \tcallq  10b9 <pmksa_cache_list+0x53>\n    10b9:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    10bc:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    10c0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    10c4:\t48 01 d0             \tadd    %rdx,%rax\n    10c7:\t48 2b 45 f0          \tsub    -0x10(%rbp),%rax\n    10cb:\t48 89 c2             \tmov    %rax,%rdx\n    10ce:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    10d1:\t89 c6                \tmov    %eax,%esi\n    10d3:\t48 89 d7             \tmov    %rdx,%rdi\n    10d6:\te8 25 ef ff ff       \tcallq  0 <os_snprintf_error>\n    10db:\t85 c0                \ttest   %eax,%eax\n    10dd:\t74 0d                \tje     10ec <pmksa_cache_list+0x86>\n    10df:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    10e3:\t48 2b 45 c0          \tsub    -0x40(%rbp),%rax\n    10e7:\te9 b1 01 00 00       \tjmpq   129d <pmksa_cache_list+0x237>\n    10ec:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    10ef:\t48 98                \tcltq   \n    10f1:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    10f5:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    10fc:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1100:\t48 8b 00             \tmov    (%rax),%rax\n    1103:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1107:\te9 7e 01 00 00       \tjmpq   128a <pmksa_cache_list+0x224>\n    110c:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    1110:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1114:\t0f b6 40 51          \tmovzbl 0x51(%rax),%eax\n    1118:\t44 0f b6 c0          \tmovzbl %al,%r8d\n    111c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1120:\t0f b6 40 50          \tmovzbl 0x50(%rax),%eax\n    1124:\t0f b6 f8             \tmovzbl %al,%edi\n    1127:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    112b:\t0f b6 40 4f          \tmovzbl 0x4f(%rax),%eax\n    112f:\t0f b6 f0             \tmovzbl %al,%esi\n    1132:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1136:\t0f b6 40 4e          \tmovzbl 0x4e(%rax),%eax\n    113a:\t0f b6 c8             \tmovzbl %al,%ecx\n    113d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1141:\t0f b6 40 4d          \tmovzbl 0x4d(%rax),%eax\n    1145:\t44 0f b6 c8          \tmovzbl %al,%r9d\n    1149:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    114d:\t0f b6 40 4c          \tmovzbl 0x4c(%rax),%eax\n    1151:\t44 0f b6 d0          \tmovzbl %al,%r10d\n    1155:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    1159:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    115d:\t48 01 d0             \tadd    %rdx,%rax\n    1160:\t48 2b 45 f0          \tsub    -0x10(%rbp),%rax\n    1164:\t49 89 c3             \tmov    %rax,%r11\n    1167:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    116a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    116e:\t41 50                \tpush   %r8\n    1170:\t57                   \tpush   %rdi\n    1171:\t56                   \tpush   %rsi\n    1172:\t51                   \tpush   %rcx\n    1173:\t45 89 d0             \tmov    %r10d,%r8d\n    1176:\t89 d1                \tmov    %edx,%ecx\n    1178:\tba 00 00 00 00       \tmov    $0x0,%edx\n    117d:\t4c 89 de             \tmov    %r11,%rsi\n    1180:\t48 89 c7             \tmov    %rax,%rdi\n    1183:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1188:\te8 00 00 00 00       \tcallq  118d <pmksa_cache_list+0x127>\n    118d:\t48 83 c4 20          \tadd    $0x20,%rsp\n    1191:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    1194:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    1198:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    119c:\t48 01 d0             \tadd    %rdx,%rax\n    119f:\t48 2b 45 f0          \tsub    -0x10(%rbp),%rax\n    11a3:\t48 89 c2             \tmov    %rax,%rdx\n    11a6:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    11a9:\t89 c6                \tmov    %eax,%esi\n    11ab:\t48 89 d7             \tmov    %rdx,%rdi\n    11ae:\te8 4d ee ff ff       \tcallq  0 <os_snprintf_error>\n    11b3:\t85 c0                \ttest   %eax,%eax\n    11b5:\t74 0d                \tje     11c4 <pmksa_cache_list+0x15e>\n    11b7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    11bb:\t48 2b 45 c0          \tsub    -0x40(%rbp),%rax\n    11bf:\te9 d9 00 00 00       \tjmpq   129d <pmksa_cache_list+0x237>\n    11c4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    11c7:\t48 98                \tcltq   \n    11c9:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    11cd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    11d1:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n    11d5:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n    11d9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    11dd:\t48 01 c8             \tadd    %rcx,%rax\n    11e0:\t48 2b 45 f0          \tsub    -0x10(%rbp),%rax\n    11e4:\t48 89 c6             \tmov    %rax,%rsi\n    11e7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    11eb:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    11f0:\t48 89 c7             \tmov    %rax,%rdi\n    11f3:\te8 00 00 00 00       \tcallq  11f8 <pmksa_cache_list+0x192>\n    11f8:\t48 98                \tcltq   \n    11fa:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    11fe:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1202:\t8b 48 68             \tmov    0x68(%rax),%ecx\n    1205:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1209:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    120d:\t89 c2                \tmov    %eax,%edx\n    120f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1213:\t29 c2                \tsub    %eax,%edx\n    1215:\t89 d0                \tmov    %edx,%eax\n    1217:\t89 c7                \tmov    %eax,%edi\n    1219:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    121d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1221:\t48 01 d0             \tadd    %rdx,%rax\n    1224:\t48 2b 45 f0          \tsub    -0x10(%rbp),%rax\n    1228:\t48 89 c6             \tmov    %rax,%rsi\n    122b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    122f:\t41 89 c8             \tmov    %ecx,%r8d\n    1232:\t89 f9                \tmov    %edi,%ecx\n    1234:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1239:\t48 89 c7             \tmov    %rax,%rdi\n    123c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1241:\te8 00 00 00 00       \tcallq  1246 <pmksa_cache_list+0x1e0>\n    1246:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    1249:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    124d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1251:\t48 01 d0             \tadd    %rdx,%rax\n    1254:\t48 2b 45 f0          \tsub    -0x10(%rbp),%rax\n    1258:\t48 89 c2             \tmov    %rax,%rdx\n    125b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    125e:\t89 c6                \tmov    %eax,%esi\n    1260:\t48 89 d7             \tmov    %rdx,%rdi\n    1263:\te8 98 ed ff ff       \tcallq  0 <os_snprintf_error>\n    1268:\t85 c0                \ttest   %eax,%eax\n    126a:\t74 0a                \tje     1276 <pmksa_cache_list+0x210>\n    126c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1270:\t48 2b 45 c0          \tsub    -0x40(%rbp),%rax\n    1274:\teb 27                \tjmp    129d <pmksa_cache_list+0x237>\n    1276:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    1279:\t48 98                \tcltq   \n    127b:\t48 01 45 f0          \tadd    %rax,-0x10(%rbp)\n    127f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1283:\t48 8b 00             \tmov    (%rax),%rax\n    1286:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    128a:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    128f:\t0f 85 77 fe ff ff    \tjne    110c <pmksa_cache_list+0xa6>\n    1295:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1299:\t48 2b 45 c0          \tsub    -0x40(%rbp),%rax\n    129d:\tc9                   \tleaveq \n    129e:\tc3                   \tretq   ", "code_s": "char *__fastcall pmksa_cache_list(__int64 *a1, char *a2, __int64 a3) {\n  int v4;\n  __int64 <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">i</span>;\n  char *<span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">s</span> = a2;\n  os_get_reltime(&<span class=\"supfact\">v6</span>);\n  <span class=\"supfact\">v7</span> =\n      snprintf(<span class=\"supfact\">s</span>, &a2[a3] - <span class=\"supfact\">s</span>, String);\n  if (os_snprintf_error(&a2[a3] - <span class=\"supfact\">s</span>, <span class=\"supfact\">v7</span>))\n    return (char *)(<span class=\"supfact\">s</span> - a2);\n  <span class=\"supfact\">s</span> += <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v10</span> = Number;\n  for (<span class=\"supfact\">i</span> = *a1; <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = *(_QWORD *)<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v7</span> =\n        snprintf(<span class=\"supfact\">s</span>, &a2[a3] - <span class=\"supfact\">s</span>, String,\n                 (unsigned int)++<span class=\"supfact\">v10</span>,\n                 *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number),\n                 *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number),\n                 *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number),\n                 *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number),\n                 *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number),\n                 *(unsigned __int8 *)(<span class=\"supfact\">i</span> + Number));\n    if (os_snprintf_error(&a2[a3] - <span class=\"supfact\">s</span>, <span class=\"supfact\">v7</span>))\n      return (char *)(<span class=\"supfact\">s</span> - a2);\n    <span class=\"supfact\">s</span> += <span class=\"supfact\">v7</span>;\n    v4 = wpa_snprintf_hex(<span class=\"supfact\">s</span>, &a2[a3] - <span class=\"supfact\">s</span>,\n                          <span class=\"supfact\">i</span> + Number, Number L);\n    <span class=\"supfact\">s</span> += v4;\n    <span class=\"supfact\">v7</span> =\n        snprintf(<span class=\"supfact\">s</span>, &a2[a3] - <span class=\"supfact\">s</span>, String,\n                 (unsigned int)*(_QWORD *)(<span class=\"supfact\">i</span> + Number) -\n                     (unsigned int)<span class=\"supfact\">v6</span>,\n                 *(unsigned int *)(<span class=\"supfact\">i</span> + Number));\n    if (os_snprintf_error(&a2[a3] - <span class=\"supfact\">s</span>, <span class=\"supfact\">v7</span>))\n      return (char *)(<span class=\"supfact\">s</span> - a2);\n    <span class=\"supfact\">s</span> += <span class=\"supfact\">v7</span>;\n  }\n  return (char *)(<span class=\"supfact\">s</span> - a2);\n}", "code_t": "int __cdecl pmksa_cache_list(rsn_pmksa_cache *pmksa, char *buf, size_t len) {\n  int v4;\n  os_reltime <span class=\"supfact\">now</span>;\n  int <span class=\"supfact\">ret</span>;\n  rsn_pmksa_cache_entry *<span class=\"supfact\">entry</span>;\n  char *<span class=\"supfact\">pos</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">pos</span> = buf;\n  os_get_reltime(&<span class=\"supfact\">now</span>);\n  <span class=\"supfact\">ret</span> =\n      snprintf(<span class=\"supfact\">pos</span>, &buf[len] - <span class=\"supfact\">pos</span>, String);\n  if (os_snprintf_error(&buf[len] - <span class=\"supfact\">pos</span>, <span class=\"supfact\">ret</span>))\n    return (_DWORD)<span class=\"supfact\">pos</span> - (_DWORD)buf;\n  <span class=\"supfact\">pos</span> += <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">i</span> = Number;\n  for (<span class=\"supfact\">entry</span> = pmksa->pmksa; <span class=\"supfact\">entry</span>;\n       <span class=\"supfact\">entry</span> = <span class=\"supfact\">entry</span>->next) {\n    <span class=\"supfact\">ret</span> = snprintf(\n        <span class=\"supfact\">pos</span>, &buf[len] - <span class=\"supfact\">pos</span>, String,\n        (unsigned int)++<span class=\"supfact\">i</span>, <span class=\"supfact\">entry</span>->aa[Number],\n        <span class=\"supfact\">entry</span>->aa[Number], <span class=\"supfact\">entry</span>->aa[Number],\n        <span class=\"supfact\">entry</span>->aa[Number], <span class=\"supfact\">entry</span>->aa[Number],\n        <span class=\"supfact\">entry</span>->aa[Number]);\n    if (os_snprintf_error(&buf[len] - <span class=\"supfact\">pos</span>, <span class=\"supfact\">ret</span>))\n      return (_DWORD)<span class=\"supfact\">pos</span> - (_DWORD)buf;\n    <span class=\"supfact\">pos</span> += <span class=\"supfact\">ret</span>;\n    v4 = wpa_snprintf_hex(<span class=\"supfact\">pos</span>, &buf[len] - <span class=\"supfact\">pos</span>,\n                          <span class=\"supfact\">entry</span>->pmkid, Number L);\n    <span class=\"supfact\">pos</span> += v4;\n    <span class=\"supfact\">ret</span> =\n        snprintf(<span class=\"supfact\">pos</span>, &buf[len] - <span class=\"supfact\">pos</span>, String,\n                 (unsigned int)<span class=\"supfact\">entry</span>->expiration -\n                     LODWORD(<span class=\"supfact\">now</span>.sec),\n                 (unsigned int)<span class=\"supfact\">entry</span>->opportunistic);\n    if (os_snprintf_error(&buf[len] - <span class=\"supfact\">pos</span>, <span class=\"supfact\">ret</span>))\n      return (_DWORD)<span class=\"supfact\">pos</span> - (_DWORD)buf;\n    <span class=\"supfact\">pos</span> += <span class=\"supfact\">ret</span>;\n  }\n  return (_DWORD)<span class=\"supfact\">pos</span> - (_DWORD)buf;\n}", "var": [{"name": "v6", "type": "struct os_reltime { os_time_t sec; os_time_t usec; }", "ref_name": "now", "ref_type": "struct os_reltime { os_time_t sec; os_time_t usec; }"}], "body_in_train": false}, {"repo_owner": "romankap", "repo_name": "Using-dlib", "path": "romankap/Using-dlib/3a2246d1f9dcfe4bd2b2510d725749a069338bfe3e7e84cdb6bbee13e1278bba", "path_in_repo": "romankap/Using-dlib/Lot_w_dlib/dlib-18.10/dlib/test/queue.o", "objdump": "0000000000000000 <_ZN4dlib9serializeERKiRSo>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 60          \tsub    $0x60,%rsp\n   b:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   f:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n  13:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  17:\t8b 00                \tmov    (%rax),%eax\n  19:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n  1d:\t48 89 d6             \tmov    %rdx,%rsi\n  20:\t89 c7                \tmov    %eax,%edi\n  22:\te8 00 00 00 00       \tcallq  27 <_ZN4dlib9serializeERKiRSo+0x27>\n  27:\t84 c0                \ttest   %al,%al\n  29:\t0f 84 cc 00 00 00    \tje     fb <_ZN4dlib9serializeERKiRSo+0xfb>\n  2f:\tbf 30 00 00 00       \tmov    $0x30,%edi\n  34:\te8 00 00 00 00       \tcallq  39 <_ZN4dlib9serializeERKiRSo+0x39>\n  39:\t48 89 c3             \tmov    %rax,%rbx\n  3c:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  40:\t48 89 c7             \tmov    %rax,%rdi\n  43:\te8 00 00 00 00       \tcallq  48 <_ZN4dlib9serializeERKiRSo+0x48>\n  48:\t48 8d 55 ef          \tlea    -0x11(%rbp),%rdx\n  4c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  50:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  55:\t48 89 c7             \tmov    %rax,%rdi\n  58:\te8 00 00 00 00       \tcallq  5d <_ZN4dlib9serializeERKiRSo+0x5d>\n  5d:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  61:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  65:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  6a:\t48 89 c7             \tmov    %rax,%rdi\n  6d:\te8 00 00 00 00       \tcallq  72 <_ZN4dlib9serializeERKiRSo+0x72>\n  72:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  76:\t48 89 c6             \tmov    %rax,%rsi\n  79:\t48 89 df             \tmov    %rbx,%rdi\n  7c:\te8 00 00 00 00       \tcallq  81 <_ZN4dlib9serializeERKiRSo+0x81>\n  81:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  85:\t48 89 c7             \tmov    %rax,%rdi\n  88:\te8 00 00 00 00       \tcallq  8d <_ZN4dlib9serializeERKiRSo+0x8d>\n  8d:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  91:\t48 89 c7             \tmov    %rax,%rdi\n  94:\te8 00 00 00 00       \tcallq  99 <_ZN4dlib9serializeERKiRSo+0x99>\n  99:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  9d:\t48 89 c7             \tmov    %rax,%rdi\n  a0:\te8 00 00 00 00       \tcallq  a5 <_ZN4dlib9serializeERKiRSo+0xa5>\n  a5:\tba 00 00 00 00       \tmov    $0x0,%edx\n  aa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  af:\t48 89 df             \tmov    %rbx,%rdi\n  b2:\te8 00 00 00 00       \tcallq  b7 <_ZN4dlib9serializeERKiRSo+0xb7>\n  b7:\t49 89 c4             \tmov    %rax,%r12\n  ba:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  be:\t48 89 c7             \tmov    %rax,%rdi\n  c1:\te8 00 00 00 00       \tcallq  c6 <_ZN4dlib9serializeERKiRSo+0xc6>\n  c6:\teb 03                \tjmp    cb <_ZN4dlib9serializeERKiRSo+0xcb>\n  c8:\t49 89 c4             \tmov    %rax,%r12\n  cb:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  cf:\t48 89 c7             \tmov    %rax,%rdi\n  d2:\te8 00 00 00 00       \tcallq  d7 <_ZN4dlib9serializeERKiRSo+0xd7>\n  d7:\teb 03                \tjmp    dc <_ZN4dlib9serializeERKiRSo+0xdc>\n  d9:\t49 89 c4             \tmov    %rax,%r12\n  dc:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n  e0:\t48 89 c7             \tmov    %rax,%rdi\n  e3:\te8 00 00 00 00       \tcallq  e8 <_ZN4dlib9serializeERKiRSo+0xe8>\n  e8:\t48 89 df             \tmov    %rbx,%rdi\n  eb:\te8 00 00 00 00       \tcallq  f0 <_ZN4dlib9serializeERKiRSo+0xf0>\n  f0:\t4c 89 e0             \tmov    %r12,%rax\n  f3:\t48 89 c7             \tmov    %rax,%rdi\n  f6:\te8 00 00 00 00       \tcallq  fb <_ZN4dlib9serializeERKiRSo+0xfb>\n  fb:\t90                   \tnop\n  fc:\t48 83 c4 60          \tadd    $0x60,%rsp\n 100:\t5b                   \tpop    %rbx\n 101:\t41 5c                \tpop    %r12\n 103:\t5d                   \tpop    %rbp\n 104:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dlib serialize(unsigned int *a1, __int64 a2) {\n  __int64 result;\n  std exception *v3;\n  char <span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>[Number];\n  char <span class=\"supfact\">v6</span>[Number];\n  result = dlib ser_helper pack_int<int>(*a1, a2);\n  if ((_BYTE)result) {\n    v3 = (std exception *)_cxa_allocate_exception(Number);\n    std allocator<char> allocator(<span class=\"supfact\">v6</span>);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(<span class=\"supfact\">v5</span>, &unk_11E28, <span class=\"supfact\">v6</span>);\n    std operator+<char>(<span class=\"supfact\">v4</span>, String, <span class=\"supfact\">v5</span>);\n    dlib serialization_error serialization_error(v3,\n                                                 (__int64)<span class=\"supfact\">v4</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v4</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v5</span>);\n    std allocator<char> ~allocator(<span class=\"supfact\">v6</span>); _cxa_throw ( v3 , ( struct type_info * ) & ` typeinfo for ' dlib serialization_error , dlib serialization_error ~ serialization_error ) ; } return result ; }", "code_t": "void __cdecl dlib serialize(const int *item, std ostream *out) {\n  dlib serialization_error *v2;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">e</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">__rhs</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  if (dlib ser_helper pack_int<int>(*item, out)) {\n    v2 = (dlib serialization_error *)_cxa_allocate_exception(Number);\n    std allocator<char> allocator(<span class=\"supfact\">v5</span>);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(&<span class=\"supfact\">__rhs</span>, &unk_11E28, <span class=\"supfact\">v5</span>);\n    std operator+<char>(&<span class=\"supfact\">e</span>, String, &<span class=\"supfact\">__rhs</span>);\n    dlib serialization_error serialization_error(v2, &<span class=\"supfact\">e</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">e</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">__rhs</span>);\n    std allocator<char> ~allocator(<span class=\"supfact\">v5</span>); _cxa_throw ( v2 , ( struct type_info * ) & ` typeinfo for ' dlib serialization_error , ( void ( __fastcall * ) ( void * ) ) dlib serialization_error ~ serialization_error ) ; } }", "var": [{"name": "v5", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "__rhs", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v4", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "e", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "johankj", "repo_name": "ShillBSD", "path": "johankj/ShillBSD/c20e2363f2d6cb974cb163c0611e038d0bff096fe72cc6b7129e21d4af3e31ca", "path_in_repo": "johankj/ShillBSD/usr.bin/csup/mux.o", "objdump": "00000000000000c0 <sock_write>:\n      c0:\t55                   \tpush   %rbp\n      c1:\t48 89 e5             \tmov    %rsp,%rbp\n      c4:\t48 83 ec 40          \tsub    $0x40,%rsp\n      c8:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n      cb:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n      cf:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n      d3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n      d7:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n      db:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n      df:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n      e3:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n      e7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n      ea:\tba 01 00 00 00       \tmov    $0x1,%edx\n      ef:\t48 89 ce             \tmov    %rcx,%rsi\n      f2:\t89 c7                \tmov    %eax,%edi\n      f4:\te8 07 ff ff ff       \tcallq  0 <sock_writev>\n      f9:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n      fc:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n      ff:\tc9                   \tleaveq \n     100:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sock_write(int a1, void *a2, size_t a3) {\n  struct iovec <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span>.iov_base = a2;\n  <span class=\"supfact\">v4</span>.iov_len = a3;\n  return (unsigned int)sock_writev(a1, &<span class=\"supfact\">v4</span>, Number);\n}", "code_t": "int __cdecl sock_write(int s, void *buf, size_t size) {\n  iovec <span class=\"supfact\">iov</span>;\n  <span class=\"supfact\">iov</span>.iov_base = buf;\n  <span class=\"supfact\">iov</span>.iov_len = size;\n  return sock_writev(s, &<span class=\"supfact\">iov</span>, Number);\n}", "var": [{"name": "v4", "type": "struct iovec { void * iov_base; size_t iov_len; }", "ref_name": "iov", "ref_type": "struct iovec { void * iov_base; size_t iov_len; }"}], "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/a6c0476d37fab0a2016b706bb595a9db57bad22bae2083133c2d1eeb6cb12f1c", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_events_584896b4.o", "objdump": "", "code_s": "void __fastcall juce LeakedObjectDetector<juce Timer TimerThread>\n    LeakCounter ~LeakCounter(void *a1) {\n  __int64 v1;\n  juce Timer TimerThread *v2;\n  __int64 v3;\n  const char *v4;\n  int v5;\n  char <span class=\"supfact\">v6</span>[Number];\n  if (*(int *)a1 > Number) {\n    juce String String((juce String *)<span class=\"supfact\">v6</span>);\n    v1 = juce operator<<(<span class=\"supfact\">v6</span>, String);\n    v2 = (juce Timer TimerThread *)juce operator<<(v1, *(unsigned int *)a1);\n    v3 = juce operator<<(v2, String);\n    v4 = juce LeakedObjectDetector<juce Timer TimerThread>\n        getLeakedObjectClassName(v2);\n    juce operator<<(v3, v4);\n    juce Logger outputDebugString((juce Logger *)<span class=\"supfact\">v6</span>,\n                                  (const juce String *)v4);\n    juce String ~String((juce String *)<span class=\"supfact\">v6</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_5B + Number, v5);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  juce Atomic<int> ~Atomic();\n}", "code_t": "void __cdecl juce LeakedObjectDetector<juce Timer TimerThread>\n    LeakCounter ~LeakCounter(juce LeakedObjectDetector<juce Timer TimerThread>\n                                 LeakCounter *const this) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  const char *v4;\n  int v5;\n  juce String <span class=\"supfact\">tempDbgBuf</span>;\n  if (this->numObjects.value > Number) {\n    juce String String(&<span class=\"supfact\">tempDbgBuf</span>);\n    v1 = juce operator<<(&<span class=\"supfact\">tempDbgBuf</span>, String);\n    v2 = juce operator<<(v1, (unsigned int)this->numObjects.value);\n    v3 = juce operator<<(v2, String);\n    v4 = juce LeakedObjectDetector<juce Timer TimerThread>\n    getLeakedObjectClassName();\n    juce operator<<(v3, v4);\n    juce Logger outputDebugString((juce Logger *)&<span class=\"supfact\">tempDbgBuf</span>,\n                                  (const juce String *)v4);\n    juce String ~String(&<span class=\"supfact\">tempDbgBuf</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_5B + Number, v5);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  juce Atomic<int> ~Atomic(&this->numObjects);\n}", "var": [{"name": "v6", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "tempDbgBuf", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}], "body_in_train": false}, {"repo_owner": "AndersTrier", "repo_name": "QEMU-bitflip", "path": "AndersTrier/QEMU-bitflip/344c8de551127883f2c31d5d67462ea9cb0b7fc5fe990c608bc8b68569e390ba", "path_in_repo": "AndersTrier/QEMU-bitflip//qapi/qapi-visit-core.o", "objdump": "0000000000000a12 <trace_visit_type_uint16>:\n     a12:\t55                   \tpush   %rbp\n     a13:\t48 89 e5             \tmov    %rsp,%rbp\n     a16:\t41 54                \tpush   %r12\n     a18:\t53                   \tpush   %rbx\n     a19:\t48 83 ec 40          \tsub    $0x40,%rsp\n     a1d:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     a21:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     a25:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     a29:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     a30:\t00 00 \n     a32:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     a36:\t31 c0                \txor    %eax,%eax\n     a38:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a3e <trace_visit_type_uint16+0x2c>\n     a3e:\t85 c0                \ttest   %eax,%eax\n     a40:\t0f 95 c0             \tsetne  %al\n     a43:\t0f b6 c0             \tmovzbl %al,%eax\n     a46:\t48 85 c0             \ttest   %rax,%rax\n     a49:\t74 74                \tje     abf <trace_visit_type_uint16+0xad>\n     a4b:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # a52 <trace_visit_type_uint16+0x40>\n     a52:\t66 85 c0             \ttest   %ax,%ax\n     a55:\t74 68                \tje     abf <trace_visit_type_uint16+0xad>\n     a57:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     a5b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     a60:\t48 89 c7             \tmov    %rax,%rdi\n     a63:\te8 00 00 00 00       \tcallq  a68 <trace_visit_type_uint16+0x56>\n     a68:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     a6d:\te8 8e f5 ff ff       \tcallq  0 <qemu_loglevel_mask>\n     a72:\t0f b6 c0             \tmovzbl %al,%eax\n     a75:\t48 85 c0             \ttest   %rax,%rax\n     a78:\t74 45                \tje     abf <trace_visit_type_uint16+0xad>\n     a7a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     a7e:\t49 89 c4             \tmov    %rax,%r12\n     a81:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     a85:\t48 89 c3             \tmov    %rax,%rbx\n     a88:\te8 00 00 00 00       \tcallq  a8d <trace_visit_type_uint16+0x7b>\n     a8d:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     a91:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     a95:\t48 83 ec 08          \tsub    $0x8,%rsp\n     a99:\tff 75 b8             \tpushq  -0x48(%rbp)\n     a9c:\t49 89 c9             \tmov    %rcx,%r9\n     a9f:\t49 89 d0             \tmov    %rdx,%r8\n     aa2:\t4c 89 e1             \tmov    %r12,%rcx\n     aa5:\t48 89 da             \tmov    %rbx,%rdx\n     aa8:\t89 c6                \tmov    %eax,%esi\n     aaa:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # ab1 <trace_visit_type_uint16+0x9f>\n     ab1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ab6:\te8 00 00 00 00       \tcallq  abb <trace_visit_type_uint16+0xa9>\n     abb:\t48 83 c4 10          \tadd    $0x10,%rsp\n     abf:\t90                   \tnop\n     ac0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ac4:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     acb:\t00 00 \n     acd:\t74 05                \tje     ad4 <trace_visit_type_uint16+0xc2>\n     acf:\te8 00 00 00 00       \tcallq  ad4 <trace_visit_type_uint16+0xc2>\n     ad4:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     ad8:\t5b                   \tpop    %rbx\n     ad9:\t41 5c                \tpop    %r12\n     adb:\t5d                   \tpop    %rbp\n     adc:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_visit_type_uint16(const void *a1,\n                                                    const char *a2,\n                                                    const void *a3) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_VISIT_TYPE_UINT16_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v3 = <span class=\"supfact\">tv</span>.tv_usec;\n        v4 = <span class=\"supfact\">tv</span>.tv_sec;\n        v5 = getpid();\n        qemu_log(String, v5, v4, v3, a1, a2, a3);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl trace_visit_type_uint16(void *v, const char *name, uint16_t *obj) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VISIT_TYPE_UINT16_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v3 = <span class=\"supfact\">_now</span>.tv_usec;\n      v4 = <span class=\"supfact\">_now</span>.tv_sec;\n      v5 = getpid();\n      qemu_log(String, v5, v4, v3, v, name, obj);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "ADoby", "repo_name": "Project_Space_Pirate", "path": "ADoby/Project_Space_Pirate/f5868d766fb7a6da99203947602aabe3fafe3cf8a4c6ba6b81446ab5cc9fa247", "path_in_repo": "ADoby/Project_Space_Pirate/ProjectFiles/cocos2dx/proj.linux/obj/release/platform/linux/CCFileUtilsLinux.o", "objdump": "0000000000000000 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:\n   0:\t41 56                \tpush   %r14\n   2:\t41 55                \tpush   %r13\n   4:\t45 31 ed             \txor    %r13d,%r13d\n   7:\t41 54                \tpush   %r12\n   9:\t55                   \tpush   %rbp\n   a:\t53                   \tpush   %rbx\n   b:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  12:\t4c 8b 66 08          \tmov    0x8(%rsi),%r12\n  16:\t4d 85 e4             \ttest   %r12,%r12\n  19:\t75 15                \tjne    30 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x30>\n  1b:\t48 81 c4 b0 00 00 00 \tadd    $0xb0,%rsp\n  22:\t44 89 e8             \tmov    %r13d,%eax\n  25:\t5b                   \tpop    %rbx\n  26:\t5d                   \tpop    %rbp\n  27:\t41 5c                \tpop    %r12\n  29:\t41 5d                \tpop    %r13\n  2b:\t41 5e                \tpop    %r14\n  2d:\tc3                   \tretq   \n  2e:\t66 90                \txchg   %ax,%ax\n  30:\t4c 8b 2e             \tmov    (%rsi),%r13\n  33:\t48 8d 6c 24 10       \tlea    0x10(%rsp),%rbp\n  38:\t49 89 e6             \tmov    %rsp,%r14\n  3b:\t48 89 2c 24          \tmov    %rbp,(%rsp)\n  3f:\t4d 85 ed             \ttest   %r13,%r13\n  42:\t0f 84 ca 00 00 00    \tje     112 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x112>\n  48:\t4c 89 64 24 20       \tmov    %r12,0x20(%rsp)\n  4d:\t48 89 fb             \tmov    %rdi,%rbx\n  50:\t49 83 fc 0f          \tcmp    $0xf,%r12\n  54:\t0f 87 96 00 00 00    \tja     f0 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>\n  5a:\t49 83 fc 01          \tcmp    $0x1,%r12\n  5e:\t75 70                \tjne    d0 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>\n  60:\t41 0f b6 45 00       \tmovzbl 0x0(%r13),%eax\n  65:\t88 44 24 10          \tmov    %al,0x10(%rsp)\n  69:\t48 89 e8             \tmov    %rbp,%rax\n  6c:\t4c 89 64 24 08       \tmov    %r12,0x8(%rsp)\n  71:\t4c 89 f6             \tmov    %r14,%rsi\n  74:\t48 89 df             \tmov    %rbx,%rdi\n  77:\t42 c6 04 20 00       \tmovb   $0x0,(%rax,%r12,1)\n  7c:\t48 8b 03             \tmov    (%rbx),%rax\n  7f:\tff 90 88 00 00 00    \tcallq  *0x88(%rax)\n  85:\t84 c0                \ttest   %al,%al\n  87:\t75 14                \tjne    9d <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d>\n  89:\t48 8b 4b 40          \tmov    0x40(%rbx),%rcx\n  8d:\t4c 8b 43 48          \tmov    0x48(%rbx),%r8\n  91:\t31 d2                \txor    %edx,%edx\n  93:\t31 f6                \txor    %esi,%esi\n  95:\t4c 89 f7             \tmov    %r14,%rdi\n  98:\te8 00 00 00 00       \tcallq  9d <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9d>\n  9d:\t48 8b 34 24          \tmov    (%rsp),%rsi\n  a1:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  a6:\t48 8d 54 24 20       \tlea    0x20(%rsp),%rdx\n  ab:\te8 00 00 00 00       \tcallq  b0 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb0>\n  b0:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n  b4:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  b7:\t41 0f 95 c5          \tsetne  %r13b\n  bb:\t48 39 ef             \tcmp    %rbp,%rdi\n  be:\t0f 84 57 ff ff ff    \tje     1b <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b>\n  c4:\te8 00 00 00 00       \tcallq  c9 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc9>\n  c9:\te9 4d ff ff ff       \tjmpq   1b <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b>\n  ce:\t66 90                \txchg   %ax,%ax\n  d0:\t48 89 ef             \tmov    %rbp,%rdi\n  d3:\t4c 89 e2             \tmov    %r12,%rdx\n  d6:\t4c 89 ee             \tmov    %r13,%rsi\n  d9:\te8 00 00 00 00       \tcallq  de <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xde>\n  de:\t4c 8b 64 24 20       \tmov    0x20(%rsp),%r12\n  e3:\t48 8b 04 24          \tmov    (%rsp),%rax\n  e7:\teb 83                \tjmp    6c <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c>\n  e9:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n  f0:\t4c 89 f7             \tmov    %r14,%rdi\n  f3:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n  f8:\t31 d2                \txor    %edx,%edx\n  fa:\te8 00 00 00 00       \tcallq  ff <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xff>\n  ff:\t48 89 04 24          \tmov    %rax,(%rsp)\n 103:\t48 89 c7             \tmov    %rax,%rdi\n 106:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n 10b:\t48 89 44 24 10       \tmov    %rax,0x10(%rsp)\n 110:\teb c1                \tjmp    d3 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd3>\n 112:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 119 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x119>\n 119:\te8 00 00 00 00       \tcallq  11e <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11e>\n 11e:\t49 89 c4             \tmov    %rax,%r12\n 121:\te9 00 00 00 00       \tjmpq   126 <_ZN7cocos2d14FileUtilsLinux11isFileExistERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x126>\n 126:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n 12d:\t00 00 00 ", "code_s": "__int64 __fastcall cocos2d FileUtilsLinux isFileExist(_QWORD *a1, _BYTE **a2) {\n  _BYTE *v2;\n  char *v3;\n  __int64 *v6;\n  __int64 *v7;\n  char *<span class=\"supfact\">filename</span>[Number];\n  __int64 <span class=\"supfact\">dest</span>[Number];\n  struct stat <span class=\"supfact\">stat_buf</span>;\n  LODWORD(v2) = Number;\n  v3 = a2[Number];\n  if (!v3)\n    return (unsigned int)v2;\n  v2 = *a2;\n  <span class=\"supfact\">filename</span>[Number] = (char *)<span class=\"supfact\">dest</span>;\n  if (!v2)\n    std __throw_logic_error(String);\n  <span class=\"supfact\">stat_buf</span>.st_dev = (__dev_t)v3;\n  if ((unsigned __int64)v3 > Number) {\n    <span class=\"supfact\">filename</span>[Number] = (char *)std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        _M_create(<span class=\"supfact\">filename</span>, &<span class=\"supfact\">stat_buf</span>,\n                  Number L);\n    v7 = (__int64 *)<span class=\"supfact\">filename</span>[Number];\n    <span class=\"supfact\">dest</span>[Number] = <span class=\"supfact\">stat_buf</span>.st_dev;\n    goto LABEL_12;\n  }\n  if (v3 != (_BYTE *)cocos2d FileUtilsLinux isFileExist + Number) {\n    v7 = <span class=\"supfact\">dest</span>;\n  LABEL_12:\n    memcpy(v7, v2, (size_t)v3);\n    v3 = (char *)<span class=\"supfact\">stat_buf</span>.st_dev;\n    v6 = (__int64 *)<span class=\"supfact\">filename</span>[Number];\n    goto LABEL_7;\n  }\n  LOBYTE(<span class=\"supfact\">dest</span>[Number]) = *v2;\n  v6 = <span class=\"supfact\">dest</span>;\nLABEL_7:\n  <span class=\"supfact\">filename</span>[Number] = v3;\n  v3[(_QWORD)v6] = Number;\n  if (!(*(unsigned __int8(__fastcall **)(_QWORD *, char **))(*a1 + Number L))(\n          a1, <span class=\"supfact\">filename</span>))\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    _M_replace(<span class=\"supfact\">filename</span>, Number L, Number L, a1[Number],\n               a1[Number]);\n  LOBYTE(v2) = _xstat(Number, <span class=\"supfact\">filename</span>[Number],\n                      &<span class=\"supfact\">stat_buf</span>) != Number;\n  if ((__int64 *)<span class=\"supfact\">filename</span>[Number] != <span class=\"supfact\">dest</span>)\n    operator delete(<span class=\"supfact\">filename</span>[Number]);\n  return (unsigned int)v2;\n}", "code_t": "__int64 __fastcall cocos2d FileUtilsLinux isFileExist(_QWORD *a1, _BYTE **a2) {\n  _BYTE *v2;\n  char *v3;\n  __int64 *v6;\n  __int64 *v7;\n  char *<span class=\"supfact\">filename</span>[Number];\n  __int64 <span class=\"supfact\">dest</span>[Number];\n  struct stat <span class=\"supfact\">stat_buf</span>;\n  LODWORD(v2) = Number;\n  v3 = a2[Number];\n  if (!v3)\n    return (unsigned int)v2;\n  v2 = *a2;\n  <span class=\"supfact\">filename</span>[Number] = (char *)<span class=\"supfact\">dest</span>;\n  if (!v2)\n    std __throw_logic_error(String);\n  <span class=\"supfact\">stat_buf</span>.st_dev = (__dev_t)v3;\n  if ((unsigned __int64)v3 > Number) {\n    <span class=\"supfact\">filename</span>[Number] = (char *)std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        _M_create(<span class=\"supfact\">filename</span>, &<span class=\"supfact\">stat_buf</span>,\n                  Number L);\n    v7 = (__int64 *)<span class=\"supfact\">filename</span>[Number];\n    <span class=\"supfact\">dest</span>[Number] = <span class=\"supfact\">stat_buf</span>.st_dev;\n    goto LABEL_12;\n  }\n  if (v3 != (_BYTE *)cocos2d FileUtilsLinux isFileExist + Number) {\n    v7 = <span class=\"supfact\">dest</span>;\n  LABEL_12:\n    memcpy(v7, v2, (size_t)v3);\n    v3 = (char *)<span class=\"supfact\">stat_buf</span>.st_dev;\n    v6 = (__int64 *)<span class=\"supfact\">filename</span>[Number];\n    goto LABEL_7;\n  }\n  LOBYTE(<span class=\"supfact\">dest</span>[Number]) = *v2;\n  v6 = <span class=\"supfact\">dest</span>;\nLABEL_7:\n  <span class=\"supfact\">filename</span>[Number] = v3;\n  v3[(_QWORD)v6] = Number;\n  if (!(*(unsigned __int8(__fastcall **)(_QWORD *, char **))(*a1 + Number L))(\n          a1, <span class=\"supfact\">filename</span>))\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    _M_replace(<span class=\"supfact\">filename</span>, Number L, Number L, a1[Number],\n               a1[Number]);\n  LOBYTE(v2) = _xstat(Number, <span class=\"supfact\">filename</span>[Number],\n                      &<span class=\"supfact\">stat_buf</span>) != Number;\n  if ((__int64 *)<span class=\"supfact\">filename</span>[Number] != <span class=\"supfact\">dest</span>)\n    operator delete(<span class=\"supfact\">filename</span>[Number]);\n  return (unsigned int)v2;\n}", "var": [{"name": "stat_buf", "type": "struct struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __unused; }", "ref_name": "stat_buf", "ref_type": "struct struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __unused; }"}], "body_in_train": false}, {"repo_owner": "iondis", "repo_name": "neo", "path": "iondis/neo/4393151aed031b866fd6cd39e818aa738f2c2f4dc83478d41c100ffe9cefb0bd", "path_in_repo": "iondis/neo/M/build-x86_64-linux-gnu/curl-7.55.1/lib/vtls/openssl.o", "objdump": "0000000000006cd3 <Curl_ossl_sha256sum>:\n    6cd3:\t55                   \tpush   %rbp\n    6cd4:\t48 89 e5             \tmov    %rsp,%rbp\n    6cd7:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n    6cde:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    6ce2:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n    6ce6:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    6ced:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n    6cf4:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    6cf8:\t48 89 c7             \tmov    %rax,%rdi\n    6cfb:\te8 00 00 00 00       \tcallq  6d00 <Curl_ossl_sha256sum+0x2d>\n    6d00:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n    6d04:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    6d08:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    6d0c:\t48 89 ce             \tmov    %rcx,%rsi\n    6d0f:\t48 89 c7             \tmov    %rax,%rdi\n    6d12:\te8 00 00 00 00       \tcallq  6d17 <Curl_ossl_sha256sum+0x44>\n    6d17:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n    6d1b:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    6d22:\t48 89 d6             \tmov    %rdx,%rsi\n    6d25:\t48 89 c7             \tmov    %rax,%rdi\n    6d28:\te8 00 00 00 00       \tcallq  6d2d <Curl_ossl_sha256sum+0x5a>\n    6d2d:\t90                   \tnop\n    6d2e:\tc9                   \tleaveq \n    6d2f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Curl_ossl_sha256sum(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v5</span>[Number];\n  SHA256_Init(<span class=\"supfact\">v5</span>);\n  SHA256_Update(<span class=\"supfact\">v5</span>, a1, a2);\n  return SHA256_Final(a3, <span class=\"supfact\">v5</span>);\n}", "code_t": "void __cdecl Curl_ossl_sha256sum(const unsigned __int8 *tmp, size_t tmplen,\n                                 unsigned __int8 *sha256sum, size_t unused) {\n  SHA256_CTX <span class=\"supfact\">SHA256pw</span>;\n  SHA256_Init(&<span class=\"supfact\">SHA256pw</span>);\n  SHA256_Update(&<span class=\"supfact\">SHA256pw</span>, tmp, tmplen);\n  SHA256_Final(sha256sum, &<span class=\"supfact\">SHA256pw</span>);\n}", "var": [{"name": "v5", "type": "char[100]", "ref_name": "SHA256pw", "ref_type": "struct SHA256_CTX { unsigned int[8] h; unsigned int Nl; unsigned int Nh; unsigned int[16] data; unsigned int num; unsigned int md_len; }"}], "body_in_train": false}, {"repo_owner": "giamteckchoon", "repo_name": "djbdns-ipv6", "path": "giamteckchoon/djbdns-ipv6/2946bc6b2cb1a1e1216fa683dccd2a7add36cbec1239142ef60136aebebb1da7", "path_in_repo": "giamteckchoon/djbdns-ipv6//axfr-get", "objdump": "", "code_s": "ssize_t __fastcall sub_403101(unsigned int a1, int a2, void *a3, int a4) {\n  struct pollfd <span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  sub_403E50(<span class=\"supfact\">v9</span>);\n  sub_403F94(<span class=\"supfact\">v8</span>, a1);\n  sub_403C1F(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>);\n  <span class=\"supfact\">v7</span>.fd = a2;\n  <span class=\"supfact\">v7</span>.events = Number;\n  while (Number) {\n    sub_403E50(<span class=\"supfact\">v9</span>);\n    sub_402FF9(&<span class=\"supfact\">v7</span>, Number, (__int64)<span class=\"supfact\">v8</span>,\n               <span class=\"supfact\">v9</span>);\n    if (<span class=\"supfact\">v7</span>.revents)\n      break;\n    if ((unsigned int)sub_403DBD(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v9</span>)) {\n      *__errno_location() = dword_40A140;\n      return Number;\n    }\n  }\n  return read(a2, a3, a4);\n}", "code_t": "ssize_t __fastcall sub_403101(unsigned int a1, int a2, void *a3, int a4) {\n  struct pollfd <span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  sub_403E50(<span class=\"supfact\">v9</span>);\n  sub_403F94(<span class=\"supfact\">v8</span>, a1);\n  sub_403C1F(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>);\n  <span class=\"supfact\">v7</span>.fd = a2;\n  <span class=\"supfact\">v7</span>.events = Number;\n  while (Number) {\n    sub_403E50(<span class=\"supfact\">v9</span>);\n    sub_402FF9(&<span class=\"supfact\">v7</span>, Number, (__int64)<span class=\"supfact\">v8</span>,\n               <span class=\"supfact\">v9</span>);\n    if (<span class=\"supfact\">v7</span>.revents)\n      break;\n    if ((unsigned int)sub_403DBD(<span class=\"supfact\">v8</span>, <span class=\"supfact\">v9</span>)) {\n      *__errno_location() = dword_40A140;\n      return Number;\n    }\n  }\n  return read(a2, a3, a4);\n}", "var": [{"name": "v7", "type": "struct struct pollfd { int fd; __int16 events; __int16 revents; }", "ref_name": "v7", "ref_type": "struct struct pollfd { int fd; __int16 events; __int16 revents; }"}], "body_in_train": false}, {"repo_owner": "csjpeter", "repo_name": "psqldroid", "path": "csjpeter/psqldroid/93301a77b4a5da935b213d27d0583810cca42a9367d81f2f19df8b03654e6887", "path_in_repo": "csjpeter/psqldroid//src/interfaces/libpq/fe-protocol3.o", "objdump": "0000000000001cd1 <getParameterStatus>:\n    1cd1:\t55                   \tpush   %rbp\n    1cd2:\t48 89 e5             \tmov    %rsp,%rbp\n    1cd5:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1cd9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1cdd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1ce1:\t48 8d 90 b0 02 00 00 \tlea    0x2b0(%rax),%rdx\n    1ce8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1cec:\t48 89 c6             \tmov    %rax,%rsi\n    1cef:\t48 89 d7             \tmov    %rdx,%rdi\n    1cf2:\te8 00 00 00 00       \tcallq  1cf7 <getParameterStatus+0x26>\n    1cf7:\t85 c0                \ttest   %eax,%eax\n    1cf9:\t74 07                \tje     1d02 <getParameterStatus+0x31>\n    1cfb:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1d00:\teb 65                \tjmp    1d67 <getParameterStatus+0x96>\n    1d02:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    1d06:\t48 89 c7             \tmov    %rax,%rdi\n    1d09:\te8 00 00 00 00       \tcallq  1d0e <getParameterStatus+0x3d>\n    1d0e:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1d12:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    1d16:\t48 89 d6             \tmov    %rdx,%rsi\n    1d19:\t48 89 c7             \tmov    %rax,%rdi\n    1d1c:\te8 00 00 00 00       \tcallq  1d21 <getParameterStatus+0x50>\n    1d21:\t85 c0                \ttest   %eax,%eax\n    1d23:\t74 13                \tje     1d38 <getParameterStatus+0x67>\n    1d25:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    1d29:\t48 89 c7             \tmov    %rax,%rdi\n    1d2c:\te8 00 00 00 00       \tcallq  1d31 <getParameterStatus+0x60>\n    1d31:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1d36:\teb 2f                \tjmp    1d67 <getParameterStatus+0x96>\n    1d38:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    1d3c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1d40:\t48 8b 88 b0 02 00 00 \tmov    0x2b0(%rax),%rcx\n    1d47:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1d4b:\t48 89 ce             \tmov    %rcx,%rsi\n    1d4e:\t48 89 c7             \tmov    %rax,%rdi\n    1d51:\te8 00 00 00 00       \tcallq  1d56 <getParameterStatus+0x85>\n    1d56:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    1d5a:\t48 89 c7             \tmov    %rax,%rdi\n    1d5d:\te8 00 00 00 00       \tcallq  1d62 <getParameterStatus+0x91>\n    1d62:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d67:\tc9                   \tleaveq \n    1d68:\tc3                   \tretq   ", "code_s": "__int64 __fastcall getParameterStatus(__int64 a1) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  if ((unsigned int)pqGets(a1 + Number, a1))\n    return Number;\n  initPQExpBuffer(<span class=\"supfact\">v2</span>);\n  if ((unsigned int)pqGets(<span class=\"supfact\">v2</span>, a1)) {\n    termPQExpBuffer(<span class=\"supfact\">v2</span>);\n    result = Number;\n  } else {\n    pqSaveParameterStatus(a1, *(_QWORD *)(a1 + Number),\n                          <span class=\"supfact\">v2</span>[Number]);\n    termPQExpBuffer(<span class=\"supfact\">v2</span>);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl getParameterStatus(PGconn *conn) {\n  int result;\n  PQExpBufferData_0 <span class=\"supfact\">valueBuf</span>;\n  if ((unsigned int)pqGets(&conn->workBuffer, conn))\n    return Number;\n  initPQExpBuffer(&<span class=\"supfact\">valueBuf</span>);\n  if ((unsigned int)pqGets(&<span class=\"supfact\">valueBuf</span>, conn)) {\n    termPQExpBuffer(&<span class=\"supfact\">valueBuf</span>);\n    result = Number;\n  } else {\n    pqSaveParameterStatus(conn, conn->workBuffer.data,\n                          <span class=\"supfact\">valueBuf</span>.data);\n    termPQExpBuffer(&<span class=\"supfact\">valueBuf</span>);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "struct PQExpBufferData_0 { char * data; size_t len; size_t maxlen; }", "ref_name": "valueBuf", "ref_type": "struct PQExpBufferData_0 { char * data; size_t len; size_t maxlen; }"}], "body_in_train": false}, {"repo_owner": "christophrico", "repo_name": "OSU_CS372", "path": "christophrico/OSU_CS372/53ec4907d3247fe20a55422477a12e9aa51ca1a23530ce9e1466e8301fce0cc2", "path_in_repo": "christophrico/OSU_CS372/p2/ftserve", "objdump": "000000000040197a <fileValid>:\n  40197a:\t55                   \tpush   %rbp\n  40197b:\t48 89 e5             \tmov    %rsp,%rbp\n  40197e:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  401985:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  40198c:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  401993:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40199a:\t48 89 d6             \tmov    %rdx,%rsi\n  40199d:\t48 89 c7             \tmov    %rax,%rdi\n  4019a0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4019a5:\te8 96 05 00 00       \tcallq  401f40 <__stat>\n  4019aa:\t85 c0                \ttest   %eax,%eax\n  4019ac:\t74 09                \tje     4019b7 <fileValid+0x3d>\n  4019ae:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4019b5:\teb 07                \tjmp    4019be <fileValid+0x44>\n  4019b7:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  4019be:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4019c1:\tc9                   \tleaveq \n  4019c2:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall fileValid(char *a1) {\n  struct stat <span class=\"supfact\">v2</span>;\n  return (unsigned int)stat(a1, &<span class=\"supfact\">v2</span>) == Number;\n}", "code_t": "int __cdecl fileValid(char *fileName) {\n  stat <span class=\"supfact\">sb</span>;\n  return stat_0(fileName, &<span class=\"supfact\">sb</span>) == Number;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "sb", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "WASDMagician", "repo_name": "BoltonUniversitySoftwareEngineeringAssignment", "path": "WASDMagician/BoltonUniversitySoftwareEngineeringAssignment/718a8b74afc8dfc81b25030e29c23d0918f750a023c9246c5c1e6cf126738949", "path_in_repo": "WASDMagician/BoltonUniversitySoftwareEngineeringAssignment/SDL_Game_Framework/UnitTest++/src/Posix/TimeHelpers.o", "objdump": "0000000000000042 <_ZNK8UnitTest5Timer11GetTimeInMsEv>:\n  42:\t55                   \tpush   %rbp\n  43:\t48 89 e5             \tmov    %rsp,%rbp\n  46:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4a:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  4e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  52:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  57:\t48 89 c7             \tmov    %rax,%rdi\n  5a:\te8 00 00 00 00       \tcallq  5f <_ZNK8UnitTest5Timer11GetTimeInMsEv+0x1d>\n  5f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  63:\t89 c2                \tmov    %eax,%edx\n  65:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  69:\t48 8b 00             \tmov    (%rax),%rax\n  6c:\t29 c2                \tsub    %eax,%edx\n  6e:\t89 d0                \tmov    %edx,%eax\n  70:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  73:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  77:\t89 c2                \tmov    %eax,%edx\n  79:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  7d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  81:\t29 c2                \tsub    %eax,%edx\n  83:\t89 d0                \tmov    %edx,%eax\n  85:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  88:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  8b:\t69 d0 e8 03 00 00    \timul   $0x3e8,%eax,%edx\n  91:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  94:\t48 63 c8             \tmovslq %eax,%rcx\n  97:\t48 69 c9 d3 4d 62 10 \timul   $0x10624dd3,%rcx,%rcx\n  9e:\t48 c1 e9 20          \tshr    $0x20,%rcx\n  a2:\tc1 f9 06             \tsar    $0x6,%ecx\n  a5:\tc1 f8 1f             \tsar    $0x1f,%eax\n  a8:\t29 c1                \tsub    %eax,%ecx\n  aa:\t89 c8                \tmov    %ecx,%eax\n  ac:\t01 d0                \tadd    %edx,%eax\n  ae:\tc9                   \tleaveq \n  af:\tc3                   \tretq   ", "code_s": "__int64 __fastcall UnitTest Timer GetTimeInMs(UnitTest Timer *this) {\n  struct timeval <span class=\"supfact\">tv</span>;\n  int <span class=\"supfact\">v3</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  <span class=\"supfact\">v3</span> = LODWORD(<span class=\"supfact\">tv</span>.tv_sec) - *(_QWORD *)this;\n  return (unsigned int)(Number * <span class=\"supfact\">v3</span> +\n                        (int)(LODWORD(<span class=\"supfact\">tv</span>.tv_usec) -\n                              *((_QWORD *)this + Number)) /\n                            Number);\n}", "code_t": "int __cdecl UnitTest Timer GetTimeInMs(const UnitTest Timer *const this) {\n  timeval <span class=\"supfact\">currentTime</span>;\n  int <span class=\"supfact\">dsecs</span>;\n  gettimeofday(&<span class=\"supfact\">currentTime</span>, Number L);\n  <span class=\"supfact\">dsecs</span> =\n      LODWORD(<span class=\"supfact\">currentTime</span>.tv_sec) - this->m_startTime.tv_sec;\n  return Number * <span class=\"supfact\">dsecs</span> +\n         (int)(LODWORD(<span class=\"supfact\">currentTime</span>.tv_usec) -\n               this->m_startTime.tv_usec) /\n             Number;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "currentTime", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "jtsiomb", "repo_name": "c11threads", "path": "jtsiomb/c11threads/a4173441994b43a157ca7722ec4a0c33c099ce0e4112afc5d89c15cd6acca0c3", "path_in_repo": "jtsiomb/c11threads//test", "objdump": "0000000000401520 <tfunc>:\n  401520:\t55                   \tpush   %rbp\n  401521:\t48 89 e5             \tmov    %rsp,%rbp\n  401524:\t48 83 ec 30          \tsub    $0x30,%rsp\n  401528:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  40152c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  401530:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  401533:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401536:\t89 c6                \tmov    %eax,%esi\n  401538:\tbf 58 20 40 00       \tmov    $0x402058,%edi\n  40153d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401542:\te8 29 fb ff ff       \tcallq  401070 <printf@plt>\n  401547:\t48 c7 45 e0 04 00 00 \tmovq   $0x4,-0x20(%rbp)\n  40154e:\t00 \n  40154f:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  401556:\t00 \n  401557:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40155b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401560:\t48 89 c7             \tmov    %rax,%rdi\n  401563:\te8 33 fd ff ff       \tcallq  40129b <thrd_sleep>\n  401568:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40156b:\t89 c6                \tmov    %eax,%esi\n  40156d:\tbf 6e 20 40 00       \tmov    $0x40206e,%edi\n  401572:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401577:\te8 f4 fa ff ff       \tcallq  401070 <printf@plt>\n  40157c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401581:\tc9                   \tleaveq \n  401582:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tfunc(unsigned int a1) {\n  struct timespec <span class=\"supfact\">v2</span>;\n  unsigned int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = a1;\n  printf(String, a1);\n  <span class=\"supfact\">v2</span>.tv_sec = Number L;\n  <span class=\"supfact\">v2</span>.tv_nsec = Number L;\n  thrd_sleep(&<span class=\"supfact\">v2</span>, Number L);\n  printf(String, <span class=\"supfact\">v3</span>);\n  return Number L;\n}", "code_t": "int __cdecl tfunc(void *arg) {\n  timespec <span class=\"supfact\">dur</span>;\n  int <span class=\"supfact\">num</span>;\n  <span class=\"supfact\">num</span> = (int)arg;\n  printf(String, (unsigned int)arg);\n  <span class=\"supfact\">dur</span>.tv_sec = Number L;\n  <span class=\"supfact\">dur</span>.tv_nsec = Number L;\n  thrd_sleep(&<span class=\"supfact\">dur</span>, Number L);\n  printf(String, (unsigned int)<span class=\"supfact\">num</span>);\n  return Number;\n}", "var": [{"name": "v2", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "dur", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "munjeni", "repo_name": "android_real_web_server", "path": "munjeni/android_real_web_server/941627953653bb8ac16dcadbf988412b4210368b8b2a21463b5bcf8ef337b830", "path_in_repo": "munjeni/android_real_web_server/openssl/ssl/t1_enc.o", "objdump": "0000000000001ebf <tls1_cert_verify_mac>:\n    1ebf:\t48 83 ec 68          \tsub    $0x68,%rsp\n    1ec3:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    1ec8:\t89 74 24 14          \tmov    %esi,0x14(%rsp)\n    1ecc:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    1ed1:\t48 c7 44 24 58 00 00 \tmovq   $0x0,0x58(%rsp)\n    1ed8:\t00 00 \n    1eda:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1edf:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    1ee6:\t48 8b 80 b8 01 00 00 \tmov    0x1b8(%rax),%rax\n    1eed:\t48 85 c0             \ttest   %rax,%rax\n    1ef0:\t74 1b                \tje     1f0d <tls1_cert_verify_mac+0x4e>\n    1ef2:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1ef7:\t48 89 c7             \tmov    %rax,%rdi\n    1efa:\te8 00 00 00 00       \tcallq  1eff <tls1_cert_verify_mac+0x40>\n    1eff:\t85 c0                \ttest   %eax,%eax\n    1f01:\t75 0a                \tjne    1f0d <tls1_cert_verify_mac+0x4e>\n    1f03:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f08:\te9 28 01 00 00       \tjmpq   2035 <tls1_cert_verify_mac+0x176>\n    1f0d:\tc7 44 24 54 00 00 00 \tmovl   $0x0,0x54(%rsp)\n    1f14:\t00 \n    1f15:\te9 93 00 00 00       \tjmpq   1fad <tls1_cert_verify_mac+0xee>\n    1f1a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1f1f:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    1f26:\t48 8b 80 c0 01 00 00 \tmov    0x1c0(%rax),%rax\n    1f2d:\t8b 54 24 54          \tmov    0x54(%rsp),%edx\n    1f31:\t48 63 d2             \tmovslq %edx,%rdx\n    1f34:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    1f38:\t48 01 d0             \tadd    %rdx,%rax\n    1f3b:\t48 8b 00             \tmov    (%rax),%rax\n    1f3e:\t48 85 c0             \ttest   %rax,%rax\n    1f41:\t74 65                \tje     1fa8 <tls1_cert_verify_mac+0xe9>\n    1f43:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1f48:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    1f4f:\t48 8b 80 c0 01 00 00 \tmov    0x1c0(%rax),%rax\n    1f56:\t8b 54 24 54          \tmov    0x54(%rsp),%edx\n    1f5a:\t48 63 d2             \tmovslq %edx,%rdx\n    1f5d:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    1f61:\t48 01 d0             \tadd    %rdx,%rax\n    1f64:\t48 8b 00             \tmov    (%rax),%rax\n    1f67:\t48 89 c7             \tmov    %rax,%rdi\n    1f6a:\te8 00 00 00 00       \tcallq  1f6f <tls1_cert_verify_mac+0xb0>\n    1f6f:\t48 89 c7             \tmov    %rax,%rdi\n    1f72:\te8 00 00 00 00       \tcallq  1f77 <tls1_cert_verify_mac+0xb8>\n    1f77:\t39 44 24 14          \tcmp    %eax,0x14(%rsp)\n    1f7b:\t75 2b                \tjne    1fa8 <tls1_cert_verify_mac+0xe9>\n    1f7d:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    1f82:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    1f89:\t48 8b 80 c0 01 00 00 \tmov    0x1c0(%rax),%rax\n    1f90:\t8b 54 24 54          \tmov    0x54(%rsp),%edx\n    1f94:\t48 63 d2             \tmovslq %edx,%rdx\n    1f97:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    1f9b:\t48 01 d0             \tadd    %rdx,%rax\n    1f9e:\t48 8b 00             \tmov    (%rax),%rax\n    1fa1:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n    1fa6:\teb 10                \tjmp    1fb8 <tls1_cert_verify_mac+0xf9>\n    1fa8:\t83 44 24 54 01       \taddl   $0x1,0x54(%rsp)\n    1fad:\t83 7c 24 54 05       \tcmpl   $0x5,0x54(%rsp)\n    1fb2:\t0f 8e 62 ff ff ff    \tjle    1f1a <tls1_cert_verify_mac+0x5b>\n    1fb8:\t48 83 7c 24 58 00    \tcmpq   $0x0,0x58(%rsp)\n    1fbe:\t75 28                \tjne    1fe8 <tls1_cert_verify_mac+0x129>\n    1fc0:\t41 b8 72 03 00 00    \tmov    $0x372,%r8d\n    1fc6:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 1fcd <tls1_cert_verify_mac+0x10e>\n    1fcd:\tba 44 01 00 00       \tmov    $0x144,%edx\n    1fd2:\tbe 1e 01 00 00       \tmov    $0x11e,%esi\n    1fd7:\tbf 14 00 00 00       \tmov    $0x14,%edi\n    1fdc:\te8 00 00 00 00       \tcallq  1fe1 <tls1_cert_verify_mac+0x122>\n    1fe1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1fe6:\teb 4d                \tjmp    2035 <tls1_cert_verify_mac+0x176>\n    1fe8:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    1fed:\t48 89 c7             \tmov    %rax,%rdi\n    1ff0:\te8 00 00 00 00       \tcallq  1ff5 <tls1_cert_verify_mac+0x136>\n    1ff5:\t48 8b 54 24 58       \tmov    0x58(%rsp),%rdx\n    1ffa:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    1fff:\t48 89 d6             \tmov    %rdx,%rsi\n    2002:\t48 89 c7             \tmov    %rax,%rdi\n    2005:\te8 00 00 00 00       \tcallq  200a <tls1_cert_verify_mac+0x14b>\n    200a:\t48 8d 54 24 50       \tlea    0x50(%rsp),%rdx\n    200f:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    2014:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    2019:\t48 89 ce             \tmov    %rcx,%rsi\n    201c:\t48 89 c7             \tmov    %rax,%rdi\n    201f:\te8 00 00 00 00       \tcallq  2024 <tls1_cert_verify_mac+0x165>\n    2024:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    2029:\t48 89 c7             \tmov    %rax,%rdi\n    202c:\te8 00 00 00 00       \tcallq  2031 <tls1_cert_verify_mac+0x172>\n    2031:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n    2035:\t48 83 c4 68          \tadd    $0x68,%rsp\n    2039:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tls1_cert_verify_mac(__int64 a1, int a2, __int64 a3) {\n  __int64 result;\n  __int64 v4;\n  char <span class=\"supfact\">v6</span>[Number];\n  unsigned int <span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">i</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = Number L;\n  if (*(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L) &&\n      !(unsigned int)ssl3_digest_cached_records(a1))\n    return Number L;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (*(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                    *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L))) {\n      v4 = EVP_MD_CTX_md(\n          *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                      *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L)));\n      if (a2 == (unsigned int)EVP_MD_type(v4)) {\n        <span class=\"supfact\">v9</span> =\n            *(_QWORD *)(Number L * <span class=\"supfact\">i</span> +\n                        *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L));\n        break;\n      }\n    }\n  }\n  if (<span class=\"supfact\">v9</span>) {\n    EVP_MD_CTX_init(<span class=\"supfact\">v6</span>);\n    EVP_MD_CTX_copy_ex(<span class=\"supfact\">v6</span>, <span class=\"supfact\">v9</span>);\n    EVP_DigestFinal_ex(<span class=\"supfact\">v6</span>, a3, &<span class=\"supfact\">v7</span>);\n    EVP_MD_CTX_cleanup(<span class=\"supfact\">v6</span>);\n    result = <span class=\"supfact\">v7</span>;\n  } else {\n    ERR_put_error(Number L, Number L, Number L, String, Number L);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl tls1_cert_verify_mac(SSL *s, int md_nid, unsigned __int8 *out) {\n  int result;\n  __int64 v4;\n  EVP_MD_CTX <span class=\"supfact\">ctx</span>;\n  unsigned int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">i</span>;\n  EVP_MD_CTX *<span class=\"supfact\">d</span>;\n  <span class=\"supfact\">d</span> = Number L;\n  if (s->s3->handshake_buffer && !(unsigned int)ssl3_digest_cached_records(s))\n    return Number;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (s->s3->handshake_dgst[<span class=\"supfact\">i</span>]) {\n      v4 = EVP_MD_CTX_md(s->s3->handshake_dgst[<span class=\"supfact\">i</span>]);\n      if (md_nid == (unsigned int)EVP_MD_type(v4)) {\n        <span class=\"supfact\">d</span> = s->s3->handshake_dgst[<span class=\"supfact\">i</span>];\n        break;\n      }\n    }\n  }\n  if (<span class=\"supfact\">d</span>) {\n    EVP_MD_CTX_init(&<span class=\"supfact\">ctx</span>);\n    EVP_MD_CTX_copy_ex(&<span class=\"supfact\">ctx</span>, <span class=\"supfact\">d</span>);\n    EVP_DigestFinal_ex(&<span class=\"supfact\">ctx</span>, out, &<span class=\"supfact\">ret</span>);\n    EVP_MD_CTX_cleanup(&<span class=\"supfact\">ctx</span>);\n    result = <span class=\"supfact\">ret</span>;\n  } else {\n    ERR_put_error(Number L, Number L, Number L, String, Number L);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "struct EVP_MD_CTX { const EVP_MD * digest; ENGINE * engine; unsigned __int64 flags; void * md_data; EVP_PKEY_CTX * pctx; int (*)(EVP_MD_CTX *, const void *, size_t) update; }", "ref_name": "ctx", "ref_type": "struct EVP_MD_CTX { const EVP_MD * digest; ENGINE * engine; unsigned __int64 flags; void * md_data; EVP_PKEY_CTX * pctx; int (*)(EVP_MD_CTX *, const void *, size_t) update; }"}], "body_in_train": false}, {"repo_owner": "fallenworld", "repo_name": "Access", "path": "fallenworld/Access/5aab417b65fb9ff6e99de2d6b25f683af303fcb33c6b7aeba09b18f937f1d8f2", "path_in_repo": "fallenworld/Access//access_helper.o", "objdump": "0000000000000135 <open_localfd>:\n 135:\t55                   \tpush   %rbp\n 136:\t48 89 e5             \tmov    %rsp,%rbp\n 139:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n 140:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n 147:\t89 b5 74 ff ff ff    \tmov    %esi,-0x8c(%rbp)\n 14d:\tba 00 00 00 00       \tmov    $0x0,%edx\n 152:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 157:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 15c:\te8 00 00 00 00       \tcallq  161 <open_localfd+0x2c>\n 161:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 164:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 168:\t79 14                \tjns    17e <open_localfd+0x49>\n 16a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 16f:\te8 00 00 00 00       \tcallq  174 <open_localfd+0x3f>\n 174:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 179:\te9 a4 00 00 00       \tjmpq   222 <open_localfd+0xed>\n 17e:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 185:\t48 89 c7             \tmov    %rax,%rdi\n 188:\te8 00 00 00 00       \tcallq  18d <open_localfd+0x58>\n 18d:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n 191:\tba 6e 00 00 00       \tmov    $0x6e,%edx\n 196:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 19b:\t48 89 c7             \tmov    %rax,%rdi\n 19e:\te8 00 00 00 00       \tcallq  1a3 <open_localfd+0x6e>\n 1a3:\t66 c7 45 80 01 00    \tmovw   $0x1,-0x80(%rbp)\n 1a9:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 1b0:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n 1b4:\t48 83 c2 02          \tadd    $0x2,%rdx\n 1b8:\t48 89 c6             \tmov    %rax,%rsi\n 1bb:\t48 89 d7             \tmov    %rdx,%rdi\n 1be:\te8 00 00 00 00       \tcallq  1c3 <open_localfd+0x8e>\n 1c3:\t48 8d 4d 80          \tlea    -0x80(%rbp),%rcx\n 1c7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 1ca:\tba 6e 00 00 00       \tmov    $0x6e,%edx\n 1cf:\t48 89 ce             \tmov    %rcx,%rsi\n 1d2:\t89 c7                \tmov    %eax,%edi\n 1d4:\te8 00 00 00 00       \tcallq  1d9 <open_localfd+0xa4>\n 1d9:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 1dc:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n 1e0:\t79 11                \tjns    1f3 <open_localfd+0xbe>\n 1e2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1e7:\te8 00 00 00 00       \tcallq  1ec <open_localfd+0xb7>\n 1ec:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 1f1:\teb 2f                \tjmp    222 <open_localfd+0xed>\n 1f3:\t8b 95 74 ff ff ff    \tmov    -0x8c(%rbp),%edx\n 1f9:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 1fc:\t89 d6                \tmov    %edx,%esi\n 1fe:\t89 c7                \tmov    %eax,%edi\n 200:\te8 00 00 00 00       \tcallq  205 <open_localfd+0xd0>\n 205:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 208:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n 20c:\t79 11                \tjns    21f <open_localfd+0xea>\n 20e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 213:\te8 00 00 00 00       \tcallq  218 <open_localfd+0xe3>\n 218:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 21d:\teb 03                \tjmp    222 <open_localfd+0xed>\n 21f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 222:\tc9                   \tleaveq \n 223:\tc3                   \tretq   ", "code_s": "__int64 __fastcall open_localfd(const char *a1, int a2) {\n  __int64 result;\n  struct sockaddr <span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n  if (<span class=\"supfact\">fd</span> >= Number) {\n    unlink(a1);\n    memset(&<span class=\"supfact\">s</span>, Number, Number);\n    <span class=\"supfact\">s</span>.sa_family = Number;\n    strcpy(<span class=\"supfact\">s</span>.sa_data, a1);\n    <span class=\"supfact\">v4</span> = bind(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">s</span>, Number);\n    if (<span class=\"supfact\">v4</span> >= Number) {\n      <span class=\"supfact\">v4</span> = listen(<span class=\"supfact\">fd</span>, a2);\n      if (<span class=\"supfact\">v4</span> >= Number) {\n        result = (unsigned int)<span class=\"supfact\">fd</span>;\n      } else {\n        perror(String);\n        result = Number;\n      }\n    } else {\n      perror(String);\n      result = Number;\n    }\n  } else {\n    perror(String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl open_localfd(char *file_name, int listen_queue_size) {\n  int result;\n  sockaddr_un <span class=\"supfact\">address</span>;\n  int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">local_fd</span>;\n  <span class=\"supfact\">local_fd</span> = socket(Number, Number, Number);\n  if (<span class=\"supfact\">local_fd</span> >= Number) {\n    unlink(file_name);\n    memset(&<span class=\"supfact\">address</span>, Number, sizeof(<span class=\"supfact\">address</span>));\n    <span class=\"supfact\">address</span>.sun_family = Number;\n    strcpy(<span class=\"supfact\">address</span>.sun_path, file_name);\n    <span class=\"supfact\">ret</span> =\n        bind(<span class=\"supfact\">local_fd</span>,\n             (const struct sockaddr *)&<span class=\"supfact\">address</span>, Number);\n    if (<span class=\"supfact\">ret</span> >= Number) {\n      <span class=\"supfact\">ret</span> = listen(<span class=\"supfact\">local_fd</span>, listen_queue_size);\n      if (<span class=\"supfact\">ret</span> >= Number) {\n        result = <span class=\"supfact\">local_fd</span>;\n      } else {\n        perror(String);\n        result = Number;\n      }\n    } else {\n      perror(String);\n      result = Number;\n    }\n  } else {\n    perror(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "s", "type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }", "ref_name": "address", "ref_type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }"}], "body_in_train": false}, {"repo_owner": "vinceau", "repo_name": "csi4106-01-cache-proxyserver", "path": "vinceau/csi4106-01-cache-proxyserver/cf54c71e5d2d0268a7209d0b8acc35bf5854ad8ab62282ed9e601cebbe2b81c1", "path_in_repo": "vinceau/csi4106-01-cache-proxyserver//network.o", "objdump": "0000000000000029 <setup_server>:\n  29:\t55                   \tpush   %rbp\n  2a:\t48 89 e5             \tmov    %rsp,%rbp\n  2d:\t48 83 ec 60          \tsub    $0x60,%rsp\n  31:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  35:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  39:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  3d:\tba 30 00 00 00       \tmov    $0x30,%edx\n  42:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  47:\t48 89 c7             \tmov    %rax,%rdi\n  4a:\te8 00 00 00 00       \tcallq  4f <setup_server+0x26>\n  4f:\tc7 45 c4 00 00 00 00 \tmovl   $0x0,-0x3c(%rbp)\n  56:\tc7 45 c8 01 00 00 00 \tmovl   $0x1,-0x38(%rbp)\n  5d:\tc7 45 c0 01 00 00 00 \tmovl   $0x1,-0x40(%rbp)\n  64:\t48 8d 4d b8          \tlea    -0x48(%rbp),%rcx\n  68:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  6c:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  70:\t48 89 c6             \tmov    %rax,%rsi\n  73:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  78:\te8 00 00 00 00       \tcallq  7d <setup_server+0x54>\n  7d:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  80:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  84:\t74 30                \tje     b6 <setup_server+0x8d>\n  86:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  89:\t89 c7                \tmov    %eax,%edi\n  8b:\te8 00 00 00 00       \tcallq  90 <setup_server+0x67>\n  90:\t48 89 c2             \tmov    %rax,%rdx\n  93:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9a <setup_server+0x71>\n  9a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  9f:\t48 89 c7             \tmov    %rax,%rdi\n  a2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  a7:\te8 00 00 00 00       \tcallq  ac <setup_server+0x83>\n  ac:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  b1:\te8 00 00 00 00       \tcallq  b6 <setup_server+0x8d>\n  b6:\tc7 45 b4 01 00 00 00 \tmovl   $0x1,-0x4c(%rbp)\n  bd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  c1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  c5:\te9 b6 00 00 00       \tjmpq   180 <setup_server+0x157>\n  ca:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  ce:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  d1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  d5:\t8b 48 08             \tmov    0x8(%rax),%ecx\n  d8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  dc:\t8b 40 04             \tmov    0x4(%rax),%eax\n  df:\t89 ce                \tmov    %ecx,%esi\n  e1:\t89 c7                \tmov    %eax,%edi\n  e3:\te8 00 00 00 00       \tcallq  e8 <setup_server+0xbf>\n  e8:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  ec:\t89 02                \tmov    %eax,(%rdx)\n  ee:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  f2:\t8b 00                \tmov    (%rax),%eax\n  f4:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  f7:\t75 0c                \tjne    105 <setup_server+0xdc>\n  f9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  fe:\te8 00 00 00 00       \tcallq  103 <setup_server+0xda>\n 103:\teb 6f                \tjmp    174 <setup_server+0x14b>\n 105:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 109:\t8b 00                \tmov    (%rax),%eax\n 10b:\t48 8d 55 b4          \tlea    -0x4c(%rbp),%rdx\n 10f:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n 115:\t48 89 d1             \tmov    %rdx,%rcx\n 118:\tba 02 00 00 00       \tmov    $0x2,%edx\n 11d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 122:\t89 c7                \tmov    %eax,%edi\n 124:\te8 00 00 00 00       \tcallq  129 <setup_server+0x100>\n 129:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 12c:\t75 14                \tjne    142 <setup_server+0x119>\n 12e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 133:\te8 00 00 00 00       \tcallq  138 <setup_server+0x10f>\n 138:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 13d:\te8 00 00 00 00       \tcallq  142 <setup_server+0x119>\n 142:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 146:\t8b 50 10             \tmov    0x10(%rax),%edx\n 149:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 14d:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 151:\t48 89 c1             \tmov    %rax,%rcx\n 154:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 158:\t8b 00                \tmov    (%rax),%eax\n 15a:\t48 89 ce             \tmov    %rcx,%rsi\n 15d:\t89 c7                \tmov    %eax,%edi\n 15f:\te8 00 00 00 00       \tcallq  164 <setup_server+0x13b>\n 164:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 167:\t75 24                \tjne    18d <setup_server+0x164>\n 169:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 16e:\te8 00 00 00 00       \tcallq  173 <setup_server+0x14a>\n 173:\t90                   \tnop\n 174:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 178:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n 17c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 180:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 185:\t0f 85 3f ff ff ff    \tjne    ca <setup_server+0xa1>\n 18b:\teb 01                \tjmp    18e <setup_server+0x165>\n 18d:\t90                   \tnop\n 18e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 192:\t48 89 c7             \tmov    %rax,%rdi\n 195:\te8 00 00 00 00       \tcallq  19a <setup_server+0x171>\n 19a:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 19f:\t75 28                \tjne    1c9 <setup_server+0x1a0>\n 1a1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a8 <setup_server+0x17f>\n 1a8:\t48 89 c1             \tmov    %rax,%rcx\n 1ab:\tba 23 00 00 00       \tmov    $0x23,%edx\n 1b0:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 1b5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1ba:\te8 00 00 00 00       \tcallq  1bf <setup_server+0x196>\n 1bf:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 1c4:\te8 00 00 00 00       \tcallq  1c9 <setup_server+0x1a0>\n 1c9:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 1cd:\t8b 00                \tmov    (%rax),%eax\n 1cf:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n 1d4:\t89 c7                \tmov    %eax,%edi\n 1d6:\te8 00 00 00 00       \tcallq  1db <setup_server+0x1b2>\n 1db:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 1de:\t75 14                \tjne    1f4 <setup_server+0x1cb>\n 1e0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1e5:\te8 00 00 00 00       \tcallq  1ea <setup_server+0x1c1>\n 1ea:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 1ef:\te8 00 00 00 00       \tcallq  1f4 <setup_server+0x1cb>\n 1f4:\t90                   \tnop\n 1f5:\tc9                   \tleaveq \n 1f6:\tc3                   \tretq   ", "code_s": "int __fastcall setup_server(int *a1, const char *a2) {\n  const char *v2;\n  int result;\n  int <span class=\"supfact\">optval</span>;\n  struct addrinfo *<span class=\"supfact\">pai</span>;\n  struct addrinfo <span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">ecode</span>;\n  struct addrinfo *<span class=\"supfact\">i</span>;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.ai_family = Number;\n  <span class=\"supfact\">s</span>.ai_socktype = Number;\n  <span class=\"supfact\">s</span>.ai_flags = Number;\n  <span class=\"supfact\">ecode</span> =\n      getaddrinfo(Number L, a2, &<span class=\"supfact\">s</span>, &<span class=\"supfact\">pai</span>);\n  if (<span class=\"supfact\">ecode</span>) {\n    v2 = gai_strerror(<span class=\"supfact\">ecode</span>);\n    fprintf(stderr, String, v2);\n    exit(Number);\n  }\n  <span class=\"supfact\">optval</span> = Number;\n  for (<span class=\"supfact\">i</span> = <span class=\"supfact\">pai</span>; <span class=\"supfact\">i</span>;\n       <span class=\"supfact\">i</span> = <span class=\"supfact\">i</span>->ai_next) {\n    *a1 =\n        socket(<span class=\"supfact\">pai</span>->ai_family, <span class=\"supfact\">pai</span>->ai_socktype,\n               <span class=\"supfact\">pai</span>->ai_protocol);\n    if (*a1 == Number) {\n      perror(String);\n    } else {\n      if (setsockopt(*a1, Number, Number, &<span class=\"supfact\">optval</span>, Number) ==\n          Number) {\n        perror(String);\n        exit(Number);\n      }\n      if (bind(*a1, <span class=\"supfact\">pai</span>->ai_addr,\n               <span class=\"supfact\">pai</span>->ai_addrlen) != Number)\n        break;\n      perror(String);\n    }\n  }\n  freeaddrinfo(<span class=\"supfact\">pai</span>);\n  if (!<span class=\"supfact\">i</span>) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  result = listen(*a1, Number);\n  if (result == Number) {\n    perror(String);\n    exit(Number);\n  }\n  return result;\n}", "code_t": "void __cdecl setup_server(int *listener, char *port) {\n  const char *v2;\n  int <span class=\"supfact\">yes</span>;\n  addrinfo *<span class=\"supfact\">servinfo</span>;\n  addrinfo <span class=\"supfact\">hints</span>;\n  int <span class=\"supfact\">status</span>;\n  addrinfo *<span class=\"supfact\">p</span>;\n  memset(&<span class=\"supfact\">hints</span>, Number, sizeof(<span class=\"supfact\">hints</span>));\n  <span class=\"supfact\">hints</span>.ai_family = Number;\n  <span class=\"supfact\">hints</span>.ai_socktype = Number;\n  <span class=\"supfact\">hints</span>.ai_flags = Number;\n  <span class=\"supfact\">status</span> = getaddrinfo(Number L, port, &<span class=\"supfact\">hints</span>,\n                                       &<span class=\"supfact\">servinfo</span>);\n  if (<span class=\"supfact\">status</span>) {\n    v2 = gai_strerror(<span class=\"supfact\">status</span>);\n    fprintf(stderr, String, v2);\n    exit(Number);\n  }\n  <span class=\"supfact\">yes</span> = Number;\n  for (<span class=\"supfact\">p</span> = <span class=\"supfact\">servinfo</span>; <span class=\"supfact\">p</span>;\n       <span class=\"supfact\">p</span> = <span class=\"supfact\">p</span>->ai_next) {\n    *listener = socket(<span class=\"supfact\">servinfo</span>->ai_family,\n                       <span class=\"supfact\">servinfo</span>->ai_socktype,\n                       <span class=\"supfact\">servinfo</span>->ai_protocol);\n    if (*listener == Number) {\n      perror(String);\n    } else {\n      if (setsockopt(*listener, Number, Number, &<span class=\"supfact\">yes</span>, Number) ==\n          Number) {\n        perror(String);\n        exit(Number);\n      }\n      if (bind(*listener, <span class=\"supfact\">servinfo</span>->ai_addr,\n               <span class=\"supfact\">servinfo</span>->ai_addrlen) != Number)\n        break;\n      perror(String);\n    }\n  }\n  freeaddrinfo(<span class=\"supfact\">servinfo</span>);\n  if (!<span class=\"supfact\">p</span>) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  if (listen(*listener, Number) == Number) {\n    perror(String);\n    exit(Number);\n  }\n}", "var": [{"name": "s", "type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }", "ref_name": "hints", "ref_type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }"}], "body_in_train": false}, {"repo_owner": "moseymosey", "repo_name": "netpbm", "path": "moseymosey/netpbm/136429587717dd6209cf00f7d7e63f53ea3b0cf0d18fbab69834964e20d50021", "path_in_repo": "moseymosey/netpbm/other/pamx/pamx", "objdump": "0000000000408ac4 <createImageWindow>:\n  408ac4:\t55                   \tpush   %rbp\n  408ac5:\t48 89 e5             \tmov    %rsp,%rbp\n  408ac8:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  408acf:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n  408ad3:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n  408ad7:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n  408ade:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n  408ae5:\t44 89 85 6c ff ff ff \tmov    %r8d,-0x94(%rbp)\n  408aec:\t44 89 8d 68 ff ff ff \tmov    %r9d,-0x98(%rbp)\n  408af3:\tc7 45 b0 01 00 00 00 \tmovl   $0x1,-0x50(%rbp)\n  408afa:\tc7 45 d0 00 00 00 00 \tmovl   $0x0,-0x30(%rbp)\n  408b01:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  408b05:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  408b09:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  408b0d:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n  408b14:\t00 \n  408b15:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  408b19:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  408b1c:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  408b23:\t44 8b 40 34          \tmov    0x34(%rax),%r8d\n  408b27:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n  408b2e:\t8b 78 30             \tmov    0x30(%rax),%edi\n  408b31:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408b35:\t8b 40 34             \tmov    0x34(%rax),%eax\n  408b38:\t41 89 c3             \tmov    %eax,%r11d\n  408b3b:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408b3f:\t8b 40 30             \tmov    0x30(%rax),%eax\n  408b42:\t41 89 c2             \tmov    %eax,%r10d\n  408b45:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408b49:\t48 8b 70 18          \tmov    0x18(%rax),%rsi\n  408b4d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408b51:\t48 8b 00             \tmov    (%rax),%rax\n  408b54:\t48 8d 4d 90          \tlea    -0x70(%rbp),%rcx\n  408b58:\t51                   \tpush   %rcx\n  408b59:\t68 18 24 00 00       \tpushq  $0x2418\n  408b5e:\tff b5 70 ff ff ff    \tpushq  -0x90(%rbp)\n  408b64:\t6a 01                \tpushq  $0x1\n  408b66:\t52                   \tpush   %rdx\n  408b67:\t6a 00                \tpushq  $0x0\n  408b69:\t45 89 c1             \tmov    %r8d,%r9d\n  408b6c:\t41 89 f8             \tmov    %edi,%r8d\n  408b6f:\t44 89 d9             \tmov    %r11d,%ecx\n  408b72:\t44 89 d2             \tmov    %r10d,%edx\n  408b75:\t48 89 c7             \tmov    %rax,%rdi\n  408b78:\te8 53 a6 ff ff       \tcallq  4031d0 <XCreateWindow@plt>\n  408b7d:\t48 83 c4 30          \tadd    $0x30,%rsp\n  408b81:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n  408b85:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n  408b89:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  408b8d:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  408b91:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408b95:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n  408b99:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408b9d:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  408ba1:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408ba5:\t48 8b 00             \tmov    (%rax),%rax\n  408ba8:\t48 89 d6             \tmov    %rdx,%rsi\n  408bab:\t48 89 c7             \tmov    %rax,%rdi\n  408bae:\te8 15 f9 ff ff       \tcallq  4084c8 <setXloadimageClassHint>\n  408bb3:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408bb7:\t48 8d 78 58          \tlea    0x58(%rax),%rdi\n  408bbb:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n  408bbf:\t8b 95 68 ff ff ff    \tmov    -0x98(%rbp),%edx\n  408bc5:\t8b b5 6c ff ff ff    \tmov    -0x94(%rbp),%esi\n  408bcb:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408bcf:\t49 89 f8             \tmov    %rdi,%r8\n  408bd2:\t48 89 c7             \tmov    %rax,%rdi\n  408bd5:\te8 4e fd ff ff       \tcallq  408928 <determineRepaintStrategy>\n  408bda:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408bde:\t48 8b 78 58          \tmov    0x58(%rax),%rdi\n  408be2:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  408be6:\t48 8b 48 28          \tmov    0x28(%rax),%rcx\n  408bea:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408bee:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  408bf2:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408bf6:\t8b 70 08             \tmov    0x8(%rax),%esi\n  408bf9:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  408bfd:\t48 8b 00             \tmov    (%rax),%rax\n  408c00:\t49 89 f8             \tmov    %rdi,%r8\n  408c03:\t48 89 c7             \tmov    %rax,%rdi\n  408c06:\te8 cb fd ff ff       \tcallq  4089d6 <setImageWindowAttr>\n  408c0b:\t90                   \tnop\n  408c0c:\tc9                   \tleaveq \n  408c0d:\tc3                   \tretq   ", "code_s": "int __fastcall createImageWindow(__int64 a1, __int64 a2, __int64 a3, Visual *a4,\n                                 int a5, int a6) {\n  XSetWindowAttributes <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span>.bit_gravity = Number;\n  <span class=\"supfact\">v10</span>.save_under = Number;\n  <span class=\"supfact\">v10</span>.colormap = *(_QWORD *)(a2 + Number);\n  <span class=\"supfact\">v10</span>.border_pixel = Number L;\n  *(_QWORD *)(a1 + Number) = XCreateWindow(\n      *(Display **)a1, *(_QWORD *)(a1 + Number), *(_DWORD *)(a1 + Number),\n      *(_DWORD *)(a1 + Number), *(_DWORD *)(a3 + Number),\n      *(_DWORD *)(a3 + Number), Number, *(_DWORD *)(a2 + Number), Number, a4,\n      Number, &<span class=\"supfact\">v10</span>);\n  *(_QWORD *)(a1 + Number) = *(_QWORD *)(a2 + Number);\n  setXloadimageClassHint(*(Display **)a1, *(_QWORD *)(a1 + Number));\n  determineRepaintStrategy(a1, a5, a6, a2, (__int64 *)(a1 + Number));\n  return setImageWindowAttr(*(Display **)a1, *(_DWORD *)(a1 + Number),\n                            *(_QWORD *)(a1 + Number), *(_QWORD *)(a2 + Number),\n                            *(_QWORD *)(a1 + Number));\n}", "code_t": "void __cdecl createImageWindow(viewer_0 *const viewerP,\n                               XImageInfo *const ximageInfoP,\n                               Image_0 *const imageP, Visual *const visualP,\n                               const bool userWantsPixmap, const bool verbose) {\n  XSetWindowAttributes <span class=\"supfact\">swa_img</span>;\n  <span class=\"supfact\">swa_img</span>.bit_gravity = Number;\n  <span class=\"supfact\">swa_img</span>.save_under = Number;\n  <span class=\"supfact\">swa_img</span>.colormap = ximageInfoP->cmap;\n  <span class=\"supfact\">swa_img</span>.border_pixel = Number L;\n  viewerP->imageWin = XCreateWindow(\n      viewerP->dispP, viewerP->viewportWin, viewerP->xpos, viewerP->ypos,\n      imageP->width, imageP->height, Number, ximageInfoP->depth, Number,\n      visualP, Number, &<span class=\"supfact\">swa_img</span>);\n  viewerP->imageColormap = ximageInfoP->cmap;\n  setXloadimageClassHint(viewerP->dispP, viewerP->imageWin);\n  determineRepaintStrategy(viewerP, userWantsPixmap, verbose, ximageInfoP,\n                           &viewerP->pixmap);\n  setImageWindowAttr(viewerP->dispP, viewerP->scrn, viewerP->imageWin,\n                     ximageInfoP->cmap, viewerP->pixmap);\n}", "var": [{"name": "v10", "type": "struct XSetWindowAttributes { Pixmap background_pixmap; unsigned __int64 background_pixel; Pixmap border_pixmap; unsigned __int64 border_pixel; int bit_gravity; int win_gravity; int backing_store; PADDING (4); unsigned __int64 backing_planes; unsigned __int64 backing_pixel; int save_under; PADDING (4); __int64 event_mask; __int64 do_not_propagate_mask; int override_redirect; PADDING (4); Colormap colormap; Cursor cursor; }", "ref_name": "swa_img", "ref_type": "struct XSetWindowAttributes { Pixmap background_pixmap; unsigned __int64 background_pixel; Pixmap border_pixmap; unsigned __int64 border_pixel; int bit_gravity; int win_gravity; int backing_store; PADDING (4); unsigned __int64 backing_planes; unsigned __int64 backing_pixel; int save_under; PADDING (4); __int64 event_mask; __int64 do_not_propagate_mask; int override_redirect; PADDING (4); Colormap colormap; Cursor cursor; }"}], "body_in_train": false}, {"repo_owner": "forrest898", "repo_name": "Sample_Interface_HPL_Testing", "path": "forrest898/Sample_Interface_HPL_Testing/510194c80b991f60762bbda82c91a14599255ad24e7d13e055e83362db349605", "path_in_repo": "forrest898/Sample_Interface_HPL_Testing/OpenBLAS/lapack-netlib/LAPACKE/src/lapacke_cgels.o", "objdump": "0000000000000000 <LAPACKE_cgels>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 40          \tsub    $0x40,%rsp\n   8:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n   b:\t89 f0                \tmov    %esi,%eax\n   d:\t89 55 d4             \tmov    %edx,-0x2c(%rbp)\n  10:\t89 4d d0             \tmov    %ecx,-0x30(%rbp)\n  13:\t44 89 45 cc          \tmov    %r8d,-0x34(%rbp)\n  17:\t4c 89 4d c0          \tmov    %r9,-0x40(%rbp)\n  1b:\t88 45 d8             \tmov    %al,-0x28(%rbp)\n  1e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  25:\tc7 45 f8 ff ff ff ff \tmovl   $0xffffffff,-0x8(%rbp)\n  2c:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  33:\t00 \n  34:\t83 7d dc 66          \tcmpl   $0x66,-0x24(%rbp)\n  38:\t74 1f                \tje     59 <LAPACKE_cgels+0x59>\n  3a:\t83 7d dc 65          \tcmpl   $0x65,-0x24(%rbp)\n  3e:\t74 19                \tje     59 <LAPACKE_cgels+0x59>\n  40:\tbe ff ff ff ff       \tmov    $0xffffffff,%esi\n  45:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4a:\te8 00 00 00 00       \tcallq  4f <LAPACKE_cgels+0x4f>\n  4f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  54:\te9 3a 01 00 00       \tjmpq   193 <LAPACKE_cgels+0x193>\n  59:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  5e:\te8 00 00 00 00       \tcallq  63 <LAPACKE_cgels+0x63>\n  63:\t85 c0                \ttest   %eax,%eax\n  65:\t74 57                \tje     be <LAPACKE_cgels+0xbe>\n  67:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  6b:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n  6e:\t8b 75 d4             \tmov    -0x2c(%rbp),%esi\n  71:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  74:\t44 8b 45 10          \tmov    0x10(%rbp),%r8d\n  78:\t89 c7                \tmov    %eax,%edi\n  7a:\te8 00 00 00 00       \tcallq  7f <LAPACKE_cgels+0x7f>\n  7f:\t85 c0                \ttest   %eax,%eax\n  81:\t74 0a                \tje     8d <LAPACKE_cgels+0x8d>\n  83:\tb8 fa ff ff ff       \tmov    $0xfffffffa,%eax\n  88:\te9 06 01 00 00       \tjmpq   193 <LAPACKE_cgels+0x193>\n  8d:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  90:\t39 45 d0             \tcmp    %eax,-0x30(%rbp)\n  93:\t0f 4d 45 d0          \tcmovge -0x30(%rbp),%eax\n  97:\t89 c6                \tmov    %eax,%esi\n  99:\t8b 7d 20             \tmov    0x20(%rbp),%edi\n  9c:\t48 8b 4d 18          \tmov    0x18(%rbp),%rcx\n  a0:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n  a3:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  a6:\t41 89 f8             \tmov    %edi,%r8d\n  a9:\t89 c7                \tmov    %eax,%edi\n  ab:\te8 00 00 00 00       \tcallq  b0 <LAPACKE_cgels+0xb0>\n  b0:\t85 c0                \ttest   %eax,%eax\n  b2:\t74 0a                \tje     be <LAPACKE_cgels+0xbe>\n  b4:\tb8 f8 ff ff ff       \tmov    $0xfffffff8,%eax\n  b9:\te9 d5 00 00 00       \tjmpq   193 <LAPACKE_cgels+0x193>\n  be:\t0f be 75 d8          \tmovsbl -0x28(%rbp),%esi\n  c2:\t4c 8b 4d c0          \tmov    -0x40(%rbp),%r9\n  c6:\t44 8b 45 cc          \tmov    -0x34(%rbp),%r8d\n  ca:\t8b 4d d0             \tmov    -0x30(%rbp),%ecx\n  cd:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n  d0:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  d3:\t48 83 ec 08          \tsub    $0x8,%rsp\n  d7:\t8b 7d f8             \tmov    -0x8(%rbp),%edi\n  da:\t57                   \tpush   %rdi\n  db:\t48 8d 7d e8          \tlea    -0x18(%rbp),%rdi\n  df:\t57                   \tpush   %rdi\n  e0:\t8b 7d 20             \tmov    0x20(%rbp),%edi\n  e3:\t57                   \tpush   %rdi\n  e4:\tff 75 18             \tpushq  0x18(%rbp)\n  e7:\t8b 7d 10             \tmov    0x10(%rbp),%edi\n  ea:\t57                   \tpush   %rdi\n  eb:\t89 c7                \tmov    %eax,%edi\n  ed:\te8 00 00 00 00       \tcallq  f2 <LAPACKE_cgels+0xf2>\n  f2:\t48 83 c4 30          \tadd    $0x30,%rsp\n  f6:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  f9:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  fd:\t75 78                \tjne    177 <LAPACKE_cgels+0x177>\n  ff:\tf3 0f 10 45 e8       \tmovss  -0x18(%rbp),%xmm0\n 104:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n 108:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 10b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 10e:\t48 98                \tcltq   \n 110:\t48 c1 e0 03          \tshl    $0x3,%rax\n 114:\t48 89 c7             \tmov    %rax,%rdi\n 117:\te8 00 00 00 00       \tcallq  11c <LAPACKE_cgels+0x11c>\n 11c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 120:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 125:\t75 09                \tjne    130 <LAPACKE_cgels+0x130>\n 127:\tc7 45 fc 0e fc ff ff \tmovl   $0xfffffc0e,-0x4(%rbp)\n 12e:\teb 48                \tjmp    178 <LAPACKE_cgels+0x178>\n 130:\t0f be 75 d8          \tmovsbl -0x28(%rbp),%esi\n 134:\t4c 8b 4d c0          \tmov    -0x40(%rbp),%r9\n 138:\t44 8b 45 cc          \tmov    -0x34(%rbp),%r8d\n 13c:\t8b 4d d0             \tmov    -0x30(%rbp),%ecx\n 13f:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n 142:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 145:\t48 83 ec 08          \tsub    $0x8,%rsp\n 149:\t8b 7d f8             \tmov    -0x8(%rbp),%edi\n 14c:\t57                   \tpush   %rdi\n 14d:\tff 75 f0             \tpushq  -0x10(%rbp)\n 150:\t8b 7d 20             \tmov    0x20(%rbp),%edi\n 153:\t57                   \tpush   %rdi\n 154:\tff 75 18             \tpushq  0x18(%rbp)\n 157:\t8b 7d 10             \tmov    0x10(%rbp),%edi\n 15a:\t57                   \tpush   %rdi\n 15b:\t89 c7                \tmov    %eax,%edi\n 15d:\te8 00 00 00 00       \tcallq  162 <LAPACKE_cgels+0x162>\n 162:\t48 83 c4 30          \tadd    $0x30,%rsp\n 166:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 169:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 16d:\t48 89 c7             \tmov    %rax,%rdi\n 170:\te8 00 00 00 00       \tcallq  175 <LAPACKE_cgels+0x175>\n 175:\teb 01                \tjmp    178 <LAPACKE_cgels+0x178>\n 177:\t90                   \tnop\n 178:\t81 7d fc 0e fc ff ff \tcmpl   $0xfffffc0e,-0x4(%rbp)\n 17f:\t75 0f                \tjne    190 <LAPACKE_cgels+0x190>\n 181:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 184:\t89 c6                \tmov    %eax,%esi\n 186:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 18b:\te8 00 00 00 00       \tcallq  190 <LAPACKE_cgels+0x190>\n 190:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 193:\tc9                   \tleaveq \n 194:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall LAPACKE_cgels(unsigned int a1, char a2, unsigned int a3,\n                                 unsigned int a4, unsigned int a5, __int64 a6,\n                                 unsigned int <span class=\"supfact\">a7</span>,\n                                 __int64 <span class=\"supfact\">a8</span>,\n                                 unsigned int <span class=\"supfact\">a9</span>) {\n  unsigned int v10;\n  float <span class=\"supfact\">v15</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  unsigned int <span class=\"supfact\">v17</span>;\n  unsigned int <span class=\"supfact\">v18</span>;\n  <span class=\"supfact\">v18</span> = Number;\n  <span class=\"supfact\">v17</span> = Number;\n  <span class=\"supfact\">ptr</span> = Number L;\n  if (a1 != Number && a1 != Number) {\n    LAPACKE_xerbla(String, Number);\n    return Number;\n  }\n  if (!(unsigned int)LAPACKE_get_nancheck())\n    goto LABEL_11;\n  if ((unsigned int)LAPACKE_cge_nancheck(a1, a3, a4, a6, <span class=\"supfact\">a7</span>))\n    return Number L;\n  v10 = a3;\n  if ((int)a4 >= (int)a3)\n    v10 = a4;\n  if ((unsigned int)LAPACKE_cge_nancheck(a1, v10, a5, <span class=\"supfact\">a8</span>,\n                                         <span class=\"supfact\">a9</span>))\n    return Number L;\nLABEL_11:\n  <span class=\"supfact\">v18</span> = LAPACKE_cgels_work(\n      a1, (unsigned int)a2, a3, a4, a5, a6, <span class=\"supfact\">a7</span>,\n      <span class=\"supfact\">a8</span>, <span class=\"supfact\">a9</span>, &<span class=\"supfact\">v15</span>,\n      <span class=\"supfact\">v17</span>);\n  if (!<span class=\"supfact\">v18</span>) {\n    <span class=\"supfact\">v17</span> = (int)<span class=\"supfact\">v15</span>;\n    <span class=\"supfact\">ptr</span> = malloc(Number L * (int)<span class=\"supfact\">v15</span>);\n    if (<span class=\"supfact\">ptr</span>) {\n      <span class=\"supfact\">v18</span> = LAPACKE_cgels_work(\n          a1, (unsigned int)a2, a3, a4, a5, a6, <span class=\"supfact\">a7</span>,\n          <span class=\"supfact\">a8</span>, <span class=\"supfact\">a9</span>, <span class=\"supfact\">ptr</span>,\n          <span class=\"supfact\">v17</span>);\n      free(<span class=\"supfact\">ptr</span>);\n    } else {\n      <span class=\"supfact\">v18</span> = Number;\n    }\n  }\n  if (<span class=\"supfact\">v18</span> == Number)\n    LAPACKE_xerbla(String, Number L);\n  return <span class=\"supfact\">v18</span>;\n}", "code_t": "int __cdecl LAPACKE_cgels(int matrix_layout, char trans, int m, int n, int nrhs,\n                          complex_float *a, int lda, complex_float *b,\n                          int ldb) {\n  unsigned int v10;\n  complex_float <span class=\"supfact\">work_query</span>;\n  complex_float *<span class=\"supfact\">work</span>;\n  int <span class=\"supfact\">lwork</span>;\n  int <span class=\"supfact\">info</span>;\n  <span class=\"supfact\">info</span> = Number;\n  <span class=\"supfact\">lwork</span> = Number;\n  <span class=\"supfact\">work</span> = Number L;\n  if (matrix_layout != Number && matrix_layout != Number) {\n    LAPACKE_xerbla(String, Number);\n    return Number;\n  }\n  if (!(unsigned int)LAPACKE_get_nancheck())\n    goto LABEL_11;\n  if ((unsigned int)LAPACKE_cge_nancheck((unsigned int)matrix_layout,\n                                         (unsigned int)m, (unsigned int)n, a,\n                                         (unsigned int)lda))\n    return Number;\n  v10 = m;\n  if (n >= m)\n    v10 = n;\n  if ((unsigned int)LAPACKE_cge_nancheck((unsigned int)matrix_layout, v10,\n                                         (unsigned int)nrhs, b,\n                                         (unsigned int)ldb))\n    return Number;\nLABEL_11:\n  <span class=\"supfact\">info</span> = LAPACKE_cgels_work(\n      (unsigned int)matrix_layout, (unsigned int)trans, (unsigned int)m,\n      (unsigned int)n, (unsigned int)nrhs, a, (unsigned int)lda, b,\n      (unsigned int)ldb, &<span class=\"supfact\">work_query</span>,\n      (unsigned int)<span class=\"supfact\">lwork</span>);\n  if (!<span class=\"supfact\">info</span>) {\n    <span class=\"supfact\">lwork</span> = (int)<span class=\"supfact\">work_query</span>.real;\n    <span class=\"supfact\">work</span> = (complex_float *)malloc(\n        Number L * (int)<span class=\"supfact\">work_query</span>.real);\n    if (<span class=\"supfact\">work</span>) {\n      <span class=\"supfact\">info</span> = LAPACKE_cgels_work(\n          (unsigned int)matrix_layout, (unsigned int)trans, (unsigned int)m,\n          (unsigned int)n, (unsigned int)nrhs, a, (unsigned int)lda, b,\n          (unsigned int)ldb, <span class=\"supfact\">work</span>,\n          (unsigned int)<span class=\"supfact\">lwork</span>);\n      free(<span class=\"supfact\">work</span>);\n    } else {\n      <span class=\"supfact\">info</span> = Number;\n    }\n  }\n  if (<span class=\"supfact\">info</span> == Number)\n    LAPACKE_xerbla(String, Number L);\n  return <span class=\"supfact\">info</span>;\n}", "var": [{"name": "v15", "type": "struct complex_float { float real; float imag; }", "ref_name": "work_query", "ref_type": "struct complex_float { float real; float imag; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/baf54fa94846d0b997c980a3a36d011deefd15856e966d19355f75f502e081d6", "path_in_repo": "XanClic/qemu//util/vfio-helpers.o", "objdump": "00000000000001d4 <_nocheck__trace_qemu_vfio_ram_block_removed>:\n     1d4:\t55                   \tpush   %rbp\n     1d5:\t48 89 e5             \tmov    %rsp,%rbp\n     1d8:\t41 54                \tpush   %r12\n     1da:\t53                   \tpush   %rbx\n     1db:\t48 83 ec 40          \tsub    $0x40,%rsp\n     1df:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     1e3:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     1e7:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     1eb:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     1f2:\t00 00 \n     1f4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     1f8:\t31 c0                \txor    %eax,%eax\n     1fa:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 200 <_nocheck__trace_qemu_vfio_ram_block_removed+0x2c>\n     200:\t85 c0                \ttest   %eax,%eax\n     202:\t0f 95 c0             \tsetne  %al\n     205:\t0f b6 c0             \tmovzbl %al,%eax\n     208:\t48 85 c0             \ttest   %rax,%rax\n     20b:\t74 70                \tje     27d <_nocheck__trace_qemu_vfio_ram_block_removed+0xa9>\n     20d:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 214 <_nocheck__trace_qemu_vfio_ram_block_removed+0x40>\n     214:\t66 85 c0             \ttest   %ax,%ax\n     217:\t74 64                \tje     27d <_nocheck__trace_qemu_vfio_ram_block_removed+0xa9>\n     219:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     21e:\te8 dd fd ff ff       \tcallq  0 <qemu_loglevel_mask>\n     223:\t84 c0                \ttest   %al,%al\n     225:\t74 56                \tje     27d <_nocheck__trace_qemu_vfio_ram_block_removed+0xa9>\n     227:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     22b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     230:\t48 89 c7             \tmov    %rax,%rdi\n     233:\te8 00 00 00 00       \tcallq  238 <_nocheck__trace_qemu_vfio_ram_block_removed+0x64>\n     238:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     23c:\t49 89 c4             \tmov    %rax,%r12\n     23f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     243:\t48 89 c3             \tmov    %rax,%rbx\n     246:\te8 00 00 00 00       \tcallq  24b <_nocheck__trace_qemu_vfio_ram_block_removed+0x77>\n     24b:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     24f:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     253:\t48 83 ec 08          \tsub    $0x8,%rsp\n     257:\tff 75 b8             \tpushq  -0x48(%rbp)\n     25a:\t49 89 c9             \tmov    %rcx,%r9\n     25d:\t49 89 d0             \tmov    %rdx,%r8\n     260:\t4c 89 e1             \tmov    %r12,%rcx\n     263:\t48 89 da             \tmov    %rbx,%rdx\n     266:\t89 c6                \tmov    %eax,%esi\n     268:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 26f <_nocheck__trace_qemu_vfio_ram_block_removed+0x9b>\n     26f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     274:\te8 00 00 00 00       \tcallq  279 <_nocheck__trace_qemu_vfio_ram_block_removed+0xa5>\n     279:\t48 83 c4 10          \tadd    $0x10,%rsp\n     27d:\t90                   \tnop\n     27e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     282:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     289:\t00 00 \n     28b:\t74 05                \tje     292 <_nocheck__trace_qemu_vfio_ram_block_removed+0xbe>\n     28d:\te8 00 00 00 00       \tcallq  292 <_nocheck__trace_qemu_vfio_ram_block_removed+0xbe>\n     292:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     296:\t5b                   \tpop    %rbx\n     297:\t41 5c                \tpop    %r12\n     299:\t5d                   \tpop    %rbp\n     29a:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_qemu_vfio_ram_block_removed(\n    const void *a1, const void *a2, __int64 a3) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_QEMU_VFIO_RAM_BLOCK_REMOVED_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v3 = <span class=\"supfact\">tv</span>.tv_usec;\n    v4 = <span class=\"supfact\">tv</span>.tv_sec;\n    v5 = qemu_get_thread_id();\n    qemu_log(String, v5, v4, v3, a1, a2, a3);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl nocheck__trace_qemu_vfio_ram_block_removed(void *s, void *p,\n                                                        size_t size) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_QEMU_VFIO_RAM_BLOCK_REMOVED_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v3 = <span class=\"supfact\">_now</span>.tv_usec;\n    v4 = <span class=\"supfact\">_now</span>.tv_sec;\n    v5 = qemu_get_thread_id();\n    qemu_log(String, v5, v4, v3, s, p, size);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "avble", "repo_name": "natClientEx", "path": "avble/natClientEx/824108a769e79b065622ce72297898d954ac7b1f1b8da130f1afccc9909029aa", "path_in_repo": "avble/natClientEx/pjproject-2.5/pjsip-apps/build/output/sample-x86_64-unknown-linux-gnu/stateless_proxy.o", "objdump": "0000000000000d8c <proxy_postprocess>:\n     d8c:\t55                   \tpush   %rbp\n     d8d:\t48 89 e5             \tmov    %rsp,%rbp\n     d90:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n     d97:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n     d9e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # da4 <proxy_postprocess+0x18>\n     da4:\t85 c0                \ttest   %eax,%eax\n     da6:\t0f 84 a2 00 00 00    \tje     e4e <proxy_postprocess+0xc2>\n     dac:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n     db3:\t00 \n     db4:\t48 c7 45 d8 0c 00 00 \tmovq   $0xc,-0x28(%rbp)\n     dbb:\t00 \n     dbc:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # dc2 <proxy_postprocess+0x36>\n     dc2:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # dc9 <proxy_postprocess+0x3d>\n     dc9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # dd0 <proxy_postprocess+0x44>\n     dd0:\t89 c6                \tmov    %eax,%esi\n     dd2:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n     dd9:\t41 89 c9             \tmov    %ecx,%r9d\n     ddc:\t49 89 d0             \tmov    %rdx,%r8\n     ddf:\t89 f1                \tmov    %esi,%ecx\n     de1:\tba 00 00 00 00       \tmov    $0x0,%edx\n     de6:\tbe 80 00 00 00       \tmov    $0x80,%esi\n     deb:\t48 89 c7             \tmov    %rax,%rdi\n     dee:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     df3:\te8 00 00 00 00       \tcallq  df8 <proxy_postprocess+0x6c>\n     df8:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n     dff:\t48 89 c7             \tmov    %rax,%rdi\n     e02:\te8 00 00 00 00       \tcallq  e07 <proxy_postprocess+0x7b>\n     e07:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     e0b:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n     e0f:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     e16:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     e1a:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     e1e:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n     e22:\t48 89 ce             \tmov    %rcx,%rsi\n     e25:\t48 89 c7             \tmov    %rax,%rdi\n     e28:\te8 00 00 00 00       \tcallq  e2d <proxy_postprocess+0xa1>\n     e2d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     e31:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     e38:\t48 8b 80 88 01 00 00 \tmov    0x188(%rax),%rax\n     e3f:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     e43:\t48 89 d6             \tmov    %rdx,%rsi\n     e46:\t48 89 c7             \tmov    %rax,%rdi\n     e49:\te8 f5 f1 ff ff       \tcallq  43 <pjsip_msg_insert_first_hdr>\n     e4e:\t90                   \tnop\n     e4f:\tc9                   \tleaveq \n     e50:\tc3                   \tretq   ", "code_s": "__int64 __fastcall proxy_postprocess(__int64 a1) {\n  __int64 result;\n  __int64 v2;\n  char <span class=\"supfact\">s</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  result = (unsigned int)dword_18AC;\n  if (dword_18AC) {\n    <span class=\"supfact\">v4</span>[Number] = (__int64)String;\n    <span class=\"supfact\">v4</span>[Number] = Number L;\n    snprintf(<span class=\"supfact\">s</span>, Number, String, SLODWORD(qword_18C0[Number]),\n             (const char *)qword_18B8[Number],\n             (unsigned int)dword_18C8[Number]);\n    <span class=\"supfact\">v5</span>[Number] = pj_str(<span class=\"supfact\">s</span>);\n    <span class=\"supfact\">v5</span>[Number] = v2;\n    <span class=\"supfact\">v6</span> = pjsip_generic_string_hdr_create(\n        *(_QWORD *)(a1 + Number), <span class=\"supfact\">v4</span>, <span class=\"supfact\">v5</span>);\n    result = pjsip_msg_insert_first_hdr(*(_QWORD *)(a1 + Number),\n                                        <span class=\"supfact\">v6</span>);\n  }\n  return result;\n}", "code_t": "void __cdecl proxy_postprocess(pjsip_tx_data_0 *tdata) {\n  pj_ssize_t v1;\n  char <span class=\"supfact\">uribuf</span>[Number];\n  pj_str_t_0 <span class=\"supfact\">H_RR</span>;\n  pj_str_t_0 <span class=\"supfact\">uri</span>;\n  pjsip_generic_string_hdr_0 *<span class=\"supfact\">rr</span>;\n  if (global.record_route) {\n    <span class=\"supfact\">H_RR</span>.ptr = String;\n    <span class=\"supfact\">H_RR</span>.slen = Number L;\n    snprintf(<span class=\"supfact\">uribuf</span>, Number, String,\n             SLODWORD(global.name[Number].host.slen),\n             global.name[Number].host.ptr,\n             (unsigned int)global.name[Number].port);\n    <span class=\"supfact\">uri</span>.ptr = (char *)pj_str(<span class=\"supfact\">uribuf</span>);\n    <span class=\"supfact\">uri</span>.slen = v1;\n    <span class=\"supfact\">rr</span> =\n        (pjsip_generic_string_hdr_0 *)pjsip_generic_string_hdr_create(\n            tdata->pool, &<span class=\"supfact\">H_RR</span>, &<span class=\"supfact\">uri</span>);\n    pjsip_msg_insert_first_hdr(tdata->msg, (pjsip_hdr_0 *)<span class=\"supfact\">rr</span>);\n  }\n}", "var": [{"name": "v5", "type": "struct pj_time_val_0 { __int64 sec; __int64 msec; }", "ref_name": "uri", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}, {"name": "v4", "type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }", "ref_name": "H_RR", "ref_type": "struct pj_str_t_0 { char * ptr; pj_ssize_t slen; }"}], "body_in_train": false}, {"repo_owner": "tgroh007", "repo_name": "koying-SPMC", "path": "tgroh007/koying-SPMC/91db7a96cf61a5453041214646ecacb3df61b62c685031eec5c5f73574904160", "path_in_repo": "tgroh007/koying-SPMC/lib/ffmpeg/ffserver.o", "objdump": "00000000000010cc <new_connection>:\n    10cc:\t48 83 ec 48          \tsub    $0x48,%rsp\n    10d0:\t89 7c 24 0c          \tmov    %edi,0xc(%rsp)\n    10d4:\t89 74 24 08          \tmov    %esi,0x8(%rsp)\n    10d8:\t48 c7 44 24 38 00 00 \tmovq   $0x0,0x38(%rsp)\n    10df:\t00 00 \n    10e1:\tc7 44 24 1c 10 00 00 \tmovl   $0x10,0x1c(%rsp)\n    10e8:\t00 \n    10e9:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    10ee:\t48 89 c1             \tmov    %rax,%rcx\n    10f1:\t48 8d 54 24 1c       \tlea    0x1c(%rsp),%rdx\n    10f6:\t8b 44 24 0c          \tmov    0xc(%rsp),%eax\n    10fa:\t48 89 ce             \tmov    %rcx,%rsi\n    10fd:\t89 c7                \tmov    %eax,%edi\n    10ff:\te8 00 00 00 00       \tcallq  1104 <new_connection+0x38>\n    1104:\t89 44 24 34          \tmov    %eax,0x34(%rsp)\n    1108:\t83 7c 24 34 00       \tcmpl   $0x0,0x34(%rsp)\n    110d:\t79 25                \tjns    1134 <new_connection+0x68>\n    110f:\te8 00 00 00 00       \tcallq  1114 <new_connection+0x48>\n    1114:\t8b 00                \tmov    (%rax),%eax\n    1116:\t89 c7                \tmov    %eax,%edi\n    1118:\te8 00 00 00 00       \tcallq  111d <new_connection+0x51>\n    111d:\t48 89 c6             \tmov    %rax,%rsi\n    1120:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1125:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    112a:\te8 6c f1 ff ff       \tcallq  29b <http_log>\n    112f:\te9 37 01 00 00       \tjmpq   126b <new_connection+0x19f>\n    1134:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    1138:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    113d:\t89 c7                \tmov    %eax,%edi\n    113f:\te8 00 00 00 00       \tcallq  1144 <new_connection+0x78>\n    1144:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 114a <new_connection+0x7e>\n    114a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1150 <new_connection+0x84>\n    1150:\t39 c2                \tcmp    %eax,%edx\n    1152:\t72 10                \tjb     1164 <new_connection+0x98>\n    1154:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    1158:\t89 c7                \tmov    %eax,%edi\n    115a:\te8 06 ff ff ff       \tcallq  1065 <http_send_too_busy_reply>\n    115f:\te9 d3 00 00 00       \tjmpq   1237 <new_connection+0x16b>\n    1164:\tbf 10 09 00 00       \tmov    $0x910,%edi\n    1169:\te8 00 00 00 00       \tcallq  116e <new_connection+0xa2>\n    116e:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    1173:\t48 83 7c 24 38 00    \tcmpq   $0x0,0x38(%rsp)\n    1179:\t0f 84 b4 00 00 00    \tje     1233 <new_connection+0x167>\n    117f:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1184:\t8b 54 24 34          \tmov    0x34(%rsp),%edx\n    1188:\t89 50 04             \tmov    %edx,0x4(%rax)\n    118b:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1190:\t48 c7 40 18 00 00 00 \tmovq   $0x0,0x18(%rax)\n    1197:\t00 \n    1198:\t48 8b 4c 24 38       \tmov    0x38(%rsp),%rcx\n    119d:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    11a2:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n    11a7:\t48 89 41 08          \tmov    %rax,0x8(%rcx)\n    11ab:\t48 89 51 10          \tmov    %rdx,0x10(%rcx)\n    11af:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    11b4:\tc7 80 64 07 00 00 00 \tmovl   $0x2000,0x764(%rax)\n    11bb:\t20 00 00 \n    11be:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    11c3:\t8b 80 64 07 00 00    \tmov    0x764(%rax),%eax\n    11c9:\t48 98                \tcltq   \n    11cb:\t48 89 c7             \tmov    %rax,%rdi\n    11ce:\te8 00 00 00 00       \tcallq  11d3 <new_connection+0x107>\n    11d3:\t48 89 c2             \tmov    %rax,%rdx\n    11d6:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    11db:\t48 89 90 68 07 00 00 \tmov    %rdx,0x768(%rax)\n    11e2:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    11e7:\t48 8b 80 68 07 00 00 \tmov    0x768(%rax),%rax\n    11ee:\t48 85 c0             \ttest   %rax,%rax\n    11f1:\t74 43                \tje     1236 <new_connection+0x16a>\n    11f3:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 11fa <new_connection+0x12e>\n    11fa:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    11ff:\t48 89 50 48          \tmov    %rdx,0x48(%rax)\n    1203:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1208:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 120f <new_connection+0x143>\n    120f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1215 <new_connection+0x149>\n    1215:\t83 c0 01             \tadd    $0x1,%eax\n    1218:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 121e <new_connection+0x152>\n    121e:\t8b 54 24 08          \tmov    0x8(%rsp),%edx\n    1222:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1227:\t89 d6                \tmov    %edx,%esi\n    1229:\t48 89 c7             \tmov    %rax,%rdi\n    122c:\te8 9e fd ff ff       \tcallq  fcf <start_wait_request>\n    1231:\teb 38                \tjmp    126b <new_connection+0x19f>\n    1233:\t90                   \tnop\n    1234:\teb 01                \tjmp    1237 <new_connection+0x16b>\n    1236:\t90                   \tnop\n    1237:\t48 83 7c 24 38 00    \tcmpq   $0x0,0x38(%rsp)\n    123d:\t74 21                \tje     1260 <new_connection+0x194>\n    123f:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1244:\t48 8b 80 68 07 00 00 \tmov    0x768(%rax),%rax\n    124b:\t48 89 c7             \tmov    %rax,%rdi\n    124e:\te8 00 00 00 00       \tcallq  1253 <new_connection+0x187>\n    1253:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    1258:\t48 89 c7             \tmov    %rax,%rdi\n    125b:\te8 00 00 00 00       \tcallq  1260 <new_connection+0x194>\n    1260:\t8b 44 24 34          \tmov    0x34(%rsp),%eax\n    1264:\t89 c7                \tmov    %eax,%edi\n    1266:\te8 00 00 00 00       \tcallq  126b <new_connection+0x19f>\n    126b:\t48 83 c4 48          \tadd    $0x48,%rsp\n    126f:\tc3                   \tretq   ", "code_s": "int __fastcall new_connection(int a1, int a2) {\n  int *v2;\n  char *v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v9;\n  __int64 v10;\n  socklen_t <span class=\"supfact\">addr_len</span>;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  int <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  <span class=\"supfact\">v14</span> = Number L;\n  <span class=\"supfact\">addr_len</span> = Number;\n  <span class=\"supfact\">v13</span> =\n      accept(a1, &<span class=\"supfact\">addr</span>, &<span class=\"supfact\">addr_len</span>);\n  if (<span class=\"supfact\">v13</span> < Number) {\n    v2 = _errno_location();\n    v3 = strerror(*v2);\n    return http_log(String, (__int64)v3, v4, v5, v6, v7);\n  }\n  ff_socket_nonblock((unsigned int)<span class=\"supfact\">v13</span>, Number L);\n  if (nb_connections < (unsigned int)nb_max_connections) {\n    <span class=\"supfact\">v14</span> = av_mallocz(Number L);\n    if (<span class=\"supfact\">v14</span>) {\n      *(_DWORD *)(<span class=\"supfact\">v14</span> + Number) = <span class=\"supfact\">v13</span>;\n      *(_QWORD *)(<span class=\"supfact\">v14</span> + Number) = Number L;\n      v9 = <span class=\"supfact\">v14</span>;\n      v10 = *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number];\n      *(_QWORD *)(<span class=\"supfact\">v14</span> + Number) =\n          *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_family;\n      *(_QWORD *)(v9 + Number) = v10;\n      *(_DWORD *)(<span class=\"supfact\">v14</span> + Number) = Number;\n      *(_QWORD *)(<span class=\"supfact\">v14</span> + Number) =\n          av_malloc(*(int *)(<span class=\"supfact\">v14</span> + Number));\n      if (*(_QWORD *)(<span class=\"supfact\">v14</span> + Number)) {\n        *(_QWORD *)(<span class=\"supfact\">v14</span> + Number) = first_http_ctx;\n        first_http_ctx = <span class=\"supfact\">v14</span>;\n        ++nb_connections;\n        return start_wait_request(<span class=\"supfact\">v14</span>, a2);\n      }\n    }\n  } else {\n    http_send_too_busy_reply(<span class=\"supfact\">v13</span>);\n  }\n  if (<span class=\"supfact\">v14</span>) {\n    av_free(*(_QWORD *)(<span class=\"supfact\">v14</span> + Number));\n    av_free(<span class=\"supfact\">v14</span>);\n  }\n  return close(<span class=\"supfact\">v13</span>);\n}", "code_t": "void __cdecl new_connection(int server_fd, int is_rtsp) {\n  int *v2;\n  char *v3;\n  HTTPContext_0 *v4;\n  __int64 v5;\n  int <span class=\"supfact\">len</span>;\n  sockaddr_in <span class=\"supfact\">from_addr</span>;\n  int <span class=\"supfact\">fd</span>;\n  HTTPContext_0 *<span class=\"supfact\">c</span>;\n  <span class=\"supfact\">c</span> = Number L;\n  <span class=\"supfact\">len</span> = Number;\n  <span class=\"supfact\">fd</span> =\n      accept(server_fd, (struct sockaddr *)&<span class=\"supfact\">from_addr</span>,\n             (socklen_t *)&<span class=\"supfact\">len</span>);\n  if (<span class=\"supfact\">fd</span> < Number) {\n    v2 = _errno_location();\n    v3 = strerror(*v2);\n    http_log(String, v3);\n    return;\n  }\n  ff_socket_nonblock((unsigned int)<span class=\"supfact\">fd</span>, Number L);\n  if (nb_connections < nb_max_connections) {\n    <span class=\"supfact\">c</span> = (HTTPContext_0 *)av_mallocz(Number L);\n    if (<span class=\"supfact\">c</span>) {\n      <span class=\"supfact\">c</span>-><span class=\"supfact\">fd</span> = <span class=\"supfact\">fd</span>;\n      <span class=\"supfact\">c</span>->poll_entry = Number L;\n      v4 = <span class=\"supfact\">c</span>;\n      v5 = *(_QWORD *)<span class=\"supfact\">from_addr</span>.sin_zero;\n      *(_QWORD *)&<span class=\"supfact\">c</span>-><span class=\"supfact\">from_addr</span>.sin_family =\n          *(_QWORD *)&<span class=\"supfact\">from_addr</span>.sin_family;\n      *(_QWORD *)v4-><span class=\"supfact\">from_addr</span>.sin_zero = v5;\n      <span class=\"supfact\">c</span>->buffer_size = Number;\n      <span class=\"supfact\">c</span>->buffer =\n          (uint8_t *)av_malloc(<span class=\"supfact\">c</span>->buffer_size);\n      if (<span class=\"supfact\">c</span>->buffer) {\n        <span class=\"supfact\">c</span>->next = first_http_ctx;\n        first_http_ctx = <span class=\"supfact\">c</span>;\n        ++nb_connections;\n        start_wait_request(<span class=\"supfact\">c</span>, is_rtsp);\n        return;\n      }\n    }\n  } else {\n    http_send_too_busy_reply(<span class=\"supfact\">fd</span>);\n  }\n  if (<span class=\"supfact\">c</span>) {\n    av_free(<span class=\"supfact\">c</span>->buffer);\n    av_free(<span class=\"supfact\">c</span>);\n  }\n  close(<span class=\"supfact\">fd</span>);\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "from_addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "Wyvern", "repo_name": "git", "path": "Wyvern/git/6b1c23a5ba03934d86fbb071beb586f2195d3980c05c52da42b8f76ac3e59207", "path_in_repo": "Wyvern/git//builtin/submodule--helper.o", "objdump": "00000000000058de <resolve_remote_submodule_branch>:\n    58de:\t55                   \tpush   %rbp\n    58df:\t48 89 e5             \tmov    %rsp,%rbp\n    58e2:\t48 83 ec 40          \tsub    $0x40,%rsp\n    58e6:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n    58e9:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    58ed:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    58f1:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    58f8:\t00 \n    58f9:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    5900:\t00 \n    5901:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    5908:\t00 \n    5909:\t83 7d dc 02          \tcmpl   $0x2,-0x24(%rbp)\n    590d:\t74 14                \tje     5923 <resolve_remote_submodule_branch+0x45>\n    590f:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    5912:\t89 c6                \tmov    %eax,%esi\n    5914:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5919:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    591e:\te8 00 00 00 00       \tcallq  5923 <resolve_remote_submodule_branch+0x45>\n    5923:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5927:\t48 83 c0 08          \tadd    $0x8,%rax\n    592b:\t48 8b 00             \tmov    (%rax),%rax\n    592e:\t48 89 c7             \tmov    %rax,%rdi\n    5931:\te8 25 fe ff ff       \tcallq  575b <remote_submodule_branch>\n    5936:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    593a:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    593f:\t75 1d                \tjne    595e <resolve_remote_submodule_branch+0x80>\n    5941:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5945:\t48 83 c0 08          \tadd    $0x8,%rax\n    5949:\t48 8b 00             \tmov    (%rax),%rax\n    594c:\t48 89 c6             \tmov    %rax,%rsi\n    594f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    5954:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5959:\te8 00 00 00 00       \tcallq  595e <resolve_remote_submodule_branch+0x80>\n    595e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    5962:\t48 89 c6             \tmov    %rax,%rsi\n    5965:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    596a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    596f:\te8 00 00 00 00       \tcallq  5974 <resolve_remote_submodule_branch+0x96>\n    5974:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    5978:\t48 89 c7             \tmov    %rax,%rdi\n    597b:\te8 00 00 00 00       \tcallq  5980 <resolve_remote_submodule_branch+0xa2>\n    5980:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5985:\tc9                   \tleaveq \n    5986:\tc3                   \tretq   ", "code_s": "__int64 __fastcall resolve_remote_submodule_branch(unsigned int a1,\n                                                   __int64 a2) {\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  const char *<span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  <span class=\"supfact\">v3</span>[Number] = (__int64)&strbuf_slopbuf;\n  if (a1 != Number)\n    die(String, a1);\n  <span class=\"supfact\">v4</span> = remote_submodule_branch(*(_QWORD *)(a2 + Number));\n  if (!<span class=\"supfact\">v4</span>)\n    die(String, *(const char **)(a2 + Number));\n  printf(String, <span class=\"supfact\">v4</span>);\n  strbuf_release(<span class=\"supfact\">v3</span>);\n  return Number L;\n}", "code_t": "int __cdecl resolve_remote_submodule_branch(int argc, const char **argv,\n                                            const char *prefix) {\n  strbuf <span class=\"supfact\">sb</span>;\n  const char *<span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">sb</span>.alloc = Number L;\n  <span class=\"supfact\">sb</span>.len = Number L;\n  <span class=\"supfact\">sb</span>.buf = (char *)&strbuf_slopbuf;\n  if (argc != Number)\n    die(String, (unsigned int)argc);\n  <span class=\"supfact\">ret</span> = remote_submodule_branch(argv[Number]);\n  if (!<span class=\"supfact\">ret</span>)\n    die(String, argv[Number]);\n  printf(String, <span class=\"supfact\">ret</span>);\n  strbuf_release(&<span class=\"supfact\">sb</span>);\n  return Number;\n}", "var": [{"name": "v3", "type": "abstract_value_0[1]", "ref_name": "sb", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": false}, {"repo_owner": "jdkoftinoff", "repo_name": "mb-linux-msli", "path": "jdkoftinoff/mb-linux-msli/314fc9236a7d26d1092d949c3458aa4d79259bd17e6438ce19dacbc1baa44439", "path_in_repo": "jdkoftinoff/mb-linux-msli/uClinux-dist/user/tftp/tftp", "objdump": "000000000040300a <main>:\n  40300a:\t55                   \tpush   %rbp\n  40300b:\t48 89 e5             \tmov    %rsp,%rbp\n  40300e:\t48 83 ec 30          \tsub    $0x30,%rsp\n  403012:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n  403015:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  403019:\tbe 39 52 40 00       \tmov    $0x405239,%esi\n  40301e:\tbf e8 51 40 00       \tmov    $0x4051e8,%edi\n  403023:\te8 d8 f0 ff ff       \tcallq  402100 <getservbyname@plt>\n  403028:\t48 89 05 11 4c 00 00 \tmov    %rax,0x4c11(%rip)        # 407c40 <sp>\n  40302f:\t48 8b 05 0a 4c 00 00 \tmov    0x4c0a(%rip),%rax        # 407c40 <sp>\n  403036:\t48 85 c0             \ttest   %rax,%rax\n  403039:\t75 28                \tjne    403063 <main+0x59>\n  40303b:\t48 8b 05 1e 47 00 00 \tmov    0x471e(%rip),%rax        # 407760 <stderr@@GLIBC_2.2.5>\n  403042:\t48 89 c1             \tmov    %rax,%rcx\n  403045:\tba 20 00 00 00       \tmov    $0x20,%edx\n  40304a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40304f:\tbf 40 52 40 00       \tmov    $0x405240,%edi\n  403054:\te8 67 f2 ff ff       \tcallq  4022c0 <fwrite@plt>\n  403059:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40305e:\te8 4d f2 ff ff       \tcallq  4022b0 <exit@plt>\n  403063:\tba 00 00 00 00       \tmov    $0x0,%edx\n  403068:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  40306d:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  403072:\te8 99 f2 ff ff       \tcallq  402310 <socket@plt>\n  403077:\t89 05 4b 4d 00 00    \tmov    %eax,0x4d4b(%rip)        # 407dc8 <f>\n  40307d:\t8b 05 45 4d 00 00    \tmov    0x4d45(%rip),%eax        # 407dc8 <f>\n  403083:\t85 c0                \ttest   %eax,%eax\n  403085:\t79 14                \tjns    40309b <main+0x91>\n  403087:\tbf 61 52 40 00       \tmov    $0x405261,%edi\n  40308c:\te8 ef f1 ff ff       \tcallq  402280 <perror@plt>\n  403091:\tbf 03 00 00 00       \tmov    $0x3,%edi\n  403096:\te8 15 f2 ff ff       \tcallq  4022b0 <exit@plt>\n  40309b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40309f:\tba 10 00 00 00       \tmov    $0x10,%edx\n  4030a4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4030a9:\t48 89 c7             \tmov    %rax,%rdi\n  4030ac:\te8 5f f0 ff ff       \tcallq  402110 <memset@plt>\n  4030b1:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n  4030b7:\t8b 05 0b 4d 00 00    \tmov    0x4d0b(%rip),%eax        # 407dc8 <f>\n  4030bd:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  4030c1:\tba 10 00 00 00       \tmov    $0x10,%edx\n  4030c6:\t48 89 ce             \tmov    %rcx,%rsi\n  4030c9:\t89 c7                \tmov    %eax,%edi\n  4030cb:\te8 90 f1 ff ff       \tcallq  402260 <bind@plt>\n  4030d0:\t85 c0                \ttest   %eax,%eax\n  4030d2:\t79 14                \tjns    4030e8 <main+0xde>\n  4030d4:\tbf 6e 52 40 00       \tmov    $0x40526e,%edi\n  4030d9:\te8 a2 f1 ff ff       \tcallq  402280 <perror@plt>\n  4030de:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4030e3:\te8 c8 f1 ff ff       \tcallq  4022b0 <exit@plt>\n  4030e8:\t48 b8 6e 65 74 61 73 \tmovabs $0x696963736174656e,%rax\n  4030ef:\t63 69 69 \n  4030f2:\t48 89 05 a7 49 00 00 \tmov    %rax,0x49a7(%rip)        # 407aa0 <mode>\n  4030f9:\tc6 05 a8 49 00 00 00 \tmovb   $0x0,0x49a8(%rip)        # 407aa8 <mode+0x8>\n  403100:\tbe 35 40 40 00       \tmov    $0x404035,%esi\n  403105:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40310a:\te8 91 f0 ff ff       \tcallq  4021a0 <signal@plt>\n  40310f:\t83 7d dc 01          \tcmpl   $0x1,-0x24(%rbp)\n  403113:\t7e 2e                \tjle    403143 <main+0x139>\n  403115:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40311a:\tbf 00 7d 40 00       \tmov    $0x407d00,%edi\n  40311f:\te8 bc f1 ff ff       \tcallq  4022e0 <__sigsetjmp@plt>\n  403124:\t85 c0                \ttest   %eax,%eax\n  403126:\t74 0a                \tje     403132 <main+0x128>\n  403128:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  40312d:\te8 7e f1 ff ff       \tcallq  4022b0 <exit@plt>\n  403132:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  403136:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  403139:\t48 89 d6             \tmov    %rdx,%rsi\n  40313c:\t89 c7                \tmov    %eax,%edi\n  40313e:\te8 26 00 00 00       \tcallq  403169 <setpeer>\n  403143:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  403148:\tbf 00 7d 40 00       \tmov    $0x407d00,%edi\n  40314d:\te8 8e f1 ff ff       \tcallq  4022e0 <__sigsetjmp@plt>\n  403152:\t85 c0                \ttest   %eax,%eax\n  403154:\t0f 94 c0             \tsete   %al\n  403157:\t0f b6 c0             \tmovzbl %al,%eax\n  40315a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40315d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  403160:\t89 c7                \tmov    %eax,%edi\n  403162:\te8 56 0f 00 00       \tcallq  4040bd <command>\n  403167:\teb f4                \tjmp    40315d <main+0x153>", "code_s": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  struct sockaddr <span class=\"supfact\">s</span>;\n  _BOOL4 <span class=\"supfact\">v4</span>;\n  qword_407C40 = (__int64)getservbyname(String, String);\n  if (!qword_407C40) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  f = socket(Number, Number, Number);\n  if (f < Number) {\n    perror(String);\n    exit(Number);\n  }\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.sa_family = Number;\n  if (bind(f, &<span class=\"supfact\">s</span>, Number) < Number) {\n    perror(String);\n    exit(Number);\n  }\n  strcpy(mode, String);\n  signal(Number, intr);\n  if (argc > Number) {\n    if (__sigsetjmp(toplevel, Number))\n      exit(Number);\n    setpeer((unsigned int)argc, argv);\n  }\n  <span class=\"supfact\">v4</span> = __sigsetjmp(toplevel, Number) == Number;\n  command(<span class=\"supfact\">v4</span>);\n}", "code_t": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  sockaddr_in <span class=\"supfact\">s_in</span>;\n  int <span class=\"supfact\">top</span>;\n  qword_407C40 = getservbyname(String, String);\n  if (!qword_407C40) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  f = socket(Number, Number, Number);\n  if (f < Number) {\n    perror(String);\n    exit(Number);\n  }\n  memset(&<span class=\"supfact\">s_in</span>, Number, sizeof(<span class=\"supfact\">s_in</span>));\n  <span class=\"supfact\">s_in</span>.sin_family = Number;\n  if (bind(f, (const struct sockaddr *)&<span class=\"supfact\">s_in</span>, Number) <\n      Number) {\n    perror(String);\n    exit(Number);\n  }\n  strcpy(mode, String);\n  signal(Number, (__sighandler_t)intr);\n  if (argc > Number) {\n    if (__sigsetjmp(toplevel, Number))\n      exit(Number);\n    setpeer(argc, (char **)argv);\n  }\n  <span class=\"supfact\">top</span> = __sigsetjmp(toplevel, Number) == Number;\n  command(<span class=\"supfact\">top</span>);\n}", "var": [{"name": "s", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "s_in", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/167d712463e0992729e10389549ca204bb5a890bb1dd0460101cee04a39115ca", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_f2.o", "objdump": "0000000000017a22 <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring>:\n   17a22:\t55                   \tpush   %rbp\n   17a23:\t48 89 e5             \tmov    %rsp,%rbp\n   17a26:\t53                   \tpush   %rbx\n   17a27:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n   17a2e:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n   17a32:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n   17a36:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n   17a3d:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   17a41:\t48 89 c7             \tmov    %rax,%rdi\n   17a44:\te8 00 00 00 00       \tcallq  17a49 <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n   17a49:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   17a50:\t00 \n   17a51:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   17a58:\t00 \n   17a59:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n   17a60:\t00 \n   17a61:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   17a68:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n   17a6f:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n   17a73:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   17a77:\t48 89 ce             \tmov    %rcx,%rsi\n   17a7a:\t48 89 c7             \tmov    %rax,%rdi\n   17a7d:\te8 80 ef ff ff       \tcallq  16a02 <_ZL23construct_ioport_ninjakR8device_tR11tagged_listI17input_port_configER7astring>\n   17a82:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n   17a86:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n   17a8a:\tba 00 00 00 00       \tmov    $0x0,%edx\n   17a8f:\t48 89 ce             \tmov    %rcx,%rsi\n   17a92:\t48 89 c7             \tmov    %rax,%rdi\n   17a95:\te8 00 00 00 00       \tcallq  17a9a <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x78>\n   17a9a:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   17a9e:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   17aa5:\t00 \n   17aa6:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   17aad:\t00 \n   17aae:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   17ab5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   17ab9:\t41 b8 09 00 00 00    \tmov    $0x9,%r8d\n   17abf:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n   17ac4:\tba 30 00 00 00       \tmov    $0x30,%edx\n   17ac9:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   17ace:\t48 89 c7             \tmov    %rax,%rdi\n   17ad1:\te8 00 00 00 00       \tcallq  17ad6 <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0xb4>\n   17ad6:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   17ada:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   17ae1:\t00 \n   17ae2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17ae6:\tba 11 00 00 00       \tmov    $0x11,%edx\n   17aeb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   17af0:\t48 89 c7             \tmov    %rax,%rdi\n   17af3:\te8 00 00 00 00       \tcallq  17af8 <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0xd6>\n   17af8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17afc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17b00:\t8b 00                \tmov    (%rax),%eax\n   17b02:\t83 e0 10             \tand    $0x10,%eax\n   17b05:\t89 c1                \tmov    %eax,%ecx\n   17b07:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17b0b:\tba 12 00 00 00       \tmov    $0x12,%edx\n   17b10:\t89 ce                \tmov    %ecx,%esi\n   17b12:\t48 89 c7             \tmov    %rax,%rdi\n   17b15:\te8 00 00 00 00       \tcallq  17b1a <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0xf8>\n   17b1a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17b1e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17b22:\t8b 00                \tmov    (%rax),%eax\n   17b24:\t83 e0 20             \tand    $0x20,%eax\n   17b27:\t89 c1                \tmov    %eax,%ecx\n   17b29:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17b2d:\tba 15 00 00 00       \tmov    $0x15,%edx\n   17b32:\t89 ce                \tmov    %ecx,%esi\n   17b34:\t48 89 c7             \tmov    %rax,%rdi\n   17b37:\te8 00 00 00 00       \tcallq  17b3c <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x11a>\n   17b3c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17b40:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17b44:\t8b 00                \tmov    (%rax),%eax\n   17b46:\t83 e0 30             \tand    $0x30,%eax\n   17b49:\t89 c1                \tmov    %eax,%ecx\n   17b4b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17b4f:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n   17b54:\t89 ce                \tmov    %ecx,%esi\n   17b56:\t48 89 c7             \tmov    %rax,%rdi\n   17b59:\te8 00 00 00 00       \tcallq  17b5e <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x13c>\n   17b5e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17b62:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   17b66:\t41 b8 63 00 00 00    \tmov    $0x63,%r8d\n   17b6c:\tb9 c0 00 00 00       \tmov    $0xc0,%ecx\n   17b71:\tba c0 00 00 00       \tmov    $0xc0,%edx\n   17b76:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   17b7b:\t48 89 c7             \tmov    %rax,%rdi\n   17b7e:\te8 00 00 00 00       \tcallq  17b83 <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x161>\n   17b83:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   17b87:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   17b8e:\t00 \n   17b8f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17b93:\tba 12 00 00 00       \tmov    $0x12,%edx\n   17b98:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   17b9d:\t48 89 c7             \tmov    %rax,%rdi\n   17ba0:\te8 00 00 00 00       \tcallq  17ba5 <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x183>\n   17ba5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17ba9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17bad:\t8b 00                \tmov    (%rax),%eax\n   17baf:\t83 e0 40             \tand    $0x40,%eax\n   17bb2:\t89 c1                \tmov    %eax,%ecx\n   17bb4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17bb8:\tba 15 00 00 00       \tmov    $0x15,%edx\n   17bbd:\t89 ce                \tmov    %ecx,%esi\n   17bbf:\t48 89 c7             \tmov    %rax,%rdi\n   17bc2:\te8 00 00 00 00       \tcallq  17bc7 <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x1a5>\n   17bc7:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17bcb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17bcf:\t8b 00                \tmov    (%rax),%eax\n   17bd1:\t25 80 00 00 00       \tand    $0x80,%eax\n   17bd6:\t89 c1                \tmov    %eax,%ecx\n   17bd8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17bdc:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n   17be1:\t89 ce                \tmov    %ecx,%esi\n   17be3:\t48 89 c7             \tmov    %rax,%rdi\n   17be6:\te8 00 00 00 00       \tcallq  17beb <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x1c9>\n   17beb:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17bef:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17bf3:\t8b 00                \tmov    (%rax),%eax\n   17bf5:\t25 c0 00 00 00       \tand    $0xc0,%eax\n   17bfa:\t89 c1                \tmov    %eax,%ecx\n   17bfc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17c00:\tba 00 00 00 00       \tmov    $0x0,%edx\n   17c05:\t89 ce                \tmov    %ecx,%esi\n   17c07:\t48 89 c7             \tmov    %rax,%rdi\n   17c0a:\te8 00 00 00 00       \tcallq  17c0f <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x1ed>\n   17c0f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17c13:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   17c17:\t48 89 c7             \tmov    %rax,%rdi\n   17c1a:\te8 00 00 00 00       \tcallq  17c1f <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x1fd>\n   17c1f:\teb 1a                \tjmp    17c3b <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n   17c21:\t48 89 c3             \tmov    %rax,%rbx\n   17c24:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   17c28:\t48 89 c7             \tmov    %rax,%rdi\n   17c2b:\te8 00 00 00 00       \tcallq  17c30 <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x20e>\n   17c30:\t48 89 d8             \tmov    %rbx,%rax\n   17c33:\t48 89 c7             \tmov    %rax,%rdi\n   17c36:\te8 00 00 00 00       \tcallq  17c3b <_ZL24construct_ioport_ninjakuR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n   17c3b:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n   17c42:\t5b                   \tpop    %rbx\n   17c43:\t5d                   \tpop    %rbp\n   17c44:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_ninjaku(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  _DWORD *<span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v6</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  construct_ioport_ninjak(a1, a2, a3);\n  <span class=\"supfact\">v6</span> = ioconfig_modify_port(a2, a1, String);\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">v7</span> = (_DWORD *)ioconfig_alloc_field(\n      <span class=\"supfact\">v6</span>, Number L, Number L, Number L, Number L);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v8</span> =\n      ioconfig_alloc_setting(<span class=\"supfact\">v7</span>, Number L, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v7</span> = (_DWORD *)ioconfig_alloc_field(\n      <span class=\"supfact\">v6</span>, Number L, Number L, Number L, Number L);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v8</span> =\n      ioconfig_alloc_setting(<span class=\"supfact\">v7</span>, Number L, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, String);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl construct_ioport_ninjaku(device_t *owner, ioport_list *portlist,\n                                      astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value <span class=\"supfact\">maskbits</span>;\n  input_port_config *<span class=\"supfact\">curport</span>;\n  input_field_config *<span class=\"supfact\">curfield</span>;\n  input_setting_config *<span class=\"supfact\">cursetting</span>;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">curfield</span> = Number L;\n  <span class=\"supfact\">curport</span> = Number L;\n  <span class=\"supfact\">maskbits</span> = Number;\n  construct_ioport_ninjak(owner, portlist, errorbuf);\n  <span class=\"supfact\">curport</span> =\n      (input_port_config *)ioconfig_modify_port(portlist, owner, String);\n  <span class=\"supfact\">curfield</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">maskbits</span> = Number;\n  <span class=\"supfact\">curfield</span> = (input_field_config *)ioconfig_alloc_field(\n      <span class=\"supfact\">curport</span>, Number, Number, Number,\n      (const char *)&loc_8 + Number);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, Number, (const char *)&loc_10 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_10 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_14 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_1A + Number);\n  <span class=\"supfact\">curfield</span> = (input_field_config *)ioconfig_alloc_field(\n      <span class=\"supfact\">curport</span>, Number, Number, Number,\n      (const char *)&loc_62 + Number);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, Number, (const char *)&loc_10 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_14 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_1A + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      String);\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d4a3e7148b67bff6fe668513f6b0b311eb206e1822da210277eb341beb1dc43d", "path_in_repo": "XanClic/qemu//arm-softmmu/hw/arm/smmuv3.o", "objdump": "000000000000178f <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range>:\n    178f:\t55                   \tpush   %rbp\n    1790:\t48 89 e5             \tmov    %rsp,%rbp\n    1793:\t41 54                \tpush   %r12\n    1795:\t53                   \tpush   %rbx\n    1796:\t48 83 ec 30          \tsub    $0x30,%rsp\n    179a:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    179d:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    17a0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    17a7:\t00 00 \n    17a9:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    17ad:\t31 c0                \txor    %eax,%eax\n    17af:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 17b5 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x26>\n    17b5:\t85 c0                \ttest   %eax,%eax\n    17b7:\t0f 95 c0             \tsetne  %al\n    17ba:\t0f b6 c0             \tmovzbl %al,%eax\n    17bd:\t48 85 c0             \ttest   %rax,%rax\n    17c0:\t74 63                \tje     1825 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x96>\n    17c2:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 17c9 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x3a>\n    17c9:\t66 85 c0             \ttest   %ax,%ax\n    17cc:\t74 57                \tje     1825 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x96>\n    17ce:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    17d3:\te8 79 eb ff ff       \tcallq  351 <qemu_loglevel_mask>\n    17d8:\t84 c0                \ttest   %al,%al\n    17da:\t74 49                \tje     1825 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x96>\n    17dc:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    17e0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    17e5:\t48 89 c7             \tmov    %rax,%rdi\n    17e8:\te8 00 00 00 00       \tcallq  17ed <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x5e>\n    17ed:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    17f1:\t49 89 c4             \tmov    %rax,%r12\n    17f4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    17f8:\t48 89 c3             \tmov    %rax,%rbx\n    17fb:\te8 00 00 00 00       \tcallq  1800 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x71>\n    1800:\t8b 4d c8             \tmov    -0x38(%rbp),%ecx\n    1803:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    1806:\t41 89 c9             \tmov    %ecx,%r9d\n    1809:\t41 89 d0             \tmov    %edx,%r8d\n    180c:\t4c 89 e1             \tmov    %r12,%rcx\n    180f:\t48 89 da             \tmov    %rbx,%rdx\n    1812:\t89 c6                \tmov    %eax,%esi\n    1814:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 181b <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x8c>\n    181b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1820:\te8 00 00 00 00       \tcallq  1825 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x96>\n    1825:\t90                   \tnop\n    1826:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    182a:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1831:\t00 00 \n    1833:\t74 05                \tje     183a <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0xab>\n    1835:\te8 00 00 00 00       \tcallq  183a <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0xab>\n    183a:\t48 83 c4 30          \tadd    $0x30,%rsp\n    183e:\t5b                   \tpop    %rbx\n    183f:\t41 5c                \tpop    %r12\n    1841:\t5d                   \tpop    %rbp\n    1842:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_smmuv3_cmdq_cfgi_ste_range(\n    unsigned int a1, unsigned int a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_CMDQ_CFGI_STE_RANGE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v2 = <span class=\"supfact\">tv</span>.tv_usec;\n    v3 = <span class=\"supfact\">tv</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, a1, a2);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v7</span>;\n}", "code_t": "void __cdecl nocheck__trace_smmuv3_cmdq_cfgi_ste_range(int start, int end) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_CMDQ_CFGI_STE_RANGE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v2 = <span class=\"supfact\">_now</span>.tv_usec;\n    v3 = <span class=\"supfact\">_now</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, (unsigned int)start, (unsigned int)end);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d4a3e7148b67bff6fe668513f6b0b311eb206e1822da210277eb341beb1dc43d", "path_in_repo": "XanClic/qemu//arm-softmmu/hw/arm/smmuv3.o", "objdump": "000000000000178f <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range>:\n    178f:\t55                   \tpush   %rbp\n    1790:\t48 89 e5             \tmov    %rsp,%rbp\n    1793:\t41 54                \tpush   %r12\n    1795:\t53                   \tpush   %rbx\n    1796:\t48 83 ec 30          \tsub    $0x30,%rsp\n    179a:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    179d:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n    17a0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    17a7:\t00 00 \n    17a9:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    17ad:\t31 c0                \txor    %eax,%eax\n    17af:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 17b5 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x26>\n    17b5:\t85 c0                \ttest   %eax,%eax\n    17b7:\t0f 95 c0             \tsetne  %al\n    17ba:\t0f b6 c0             \tmovzbl %al,%eax\n    17bd:\t48 85 c0             \ttest   %rax,%rax\n    17c0:\t74 63                \tje     1825 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x96>\n    17c2:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 17c9 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x3a>\n    17c9:\t66 85 c0             \ttest   %ax,%ax\n    17cc:\t74 57                \tje     1825 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x96>\n    17ce:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    17d3:\te8 79 eb ff ff       \tcallq  351 <qemu_loglevel_mask>\n    17d8:\t84 c0                \ttest   %al,%al\n    17da:\t74 49                \tje     1825 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x96>\n    17dc:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    17e0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    17e5:\t48 89 c7             \tmov    %rax,%rdi\n    17e8:\te8 00 00 00 00       \tcallq  17ed <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x5e>\n    17ed:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    17f1:\t49 89 c4             \tmov    %rax,%r12\n    17f4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    17f8:\t48 89 c3             \tmov    %rax,%rbx\n    17fb:\te8 00 00 00 00       \tcallq  1800 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x71>\n    1800:\t8b 4d c8             \tmov    -0x38(%rbp),%ecx\n    1803:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    1806:\t41 89 c9             \tmov    %ecx,%r9d\n    1809:\t41 89 d0             \tmov    %edx,%r8d\n    180c:\t4c 89 e1             \tmov    %r12,%rcx\n    180f:\t48 89 da             \tmov    %rbx,%rdx\n    1812:\t89 c6                \tmov    %eax,%esi\n    1814:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 181b <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x8c>\n    181b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1820:\te8 00 00 00 00       \tcallq  1825 <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0x96>\n    1825:\t90                   \tnop\n    1826:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    182a:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1831:\t00 00 \n    1833:\t74 05                \tje     183a <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0xab>\n    1835:\te8 00 00 00 00       \tcallq  183a <_nocheck__trace_smmuv3_cmdq_cfgi_ste_range+0xab>\n    183a:\t48 83 c4 30          \tadd    $0x30,%rsp\n    183e:\t5b                   \tpop    %rbx\n    183f:\t41 5c                \tpop    %r12\n    1841:\t5d                   \tpop    %rbp\n    1842:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_smmuv3_cmdq_cfgi_ste_range(\n    unsigned int a1, unsigned int a2) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_CMDQ_CFGI_STE_RANGE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v2 = <span class=\"supfact\">tv</span>.tv_usec;\n    v3 = <span class=\"supfact\">tv</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, a1, a2);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v7</span>;\n}", "code_t": "void __cdecl nocheck__trace_smmuv3_cmdq_cfgi_ste_range(int start, int end) {\n  __suseconds_t v2;\n  __time_t v3;\n  unsigned int v4;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_CMDQ_CFGI_STE_RANGE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v2 = <span class=\"supfact\">_now</span>.tv_usec;\n    v3 = <span class=\"supfact\">_now</span>.tv_sec;\n    v4 = qemu_get_thread_id();\n    qemu_log(String, v4, v3, v2, (unsigned int)start, (unsigned int)end);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "pdumais", "repo_name": "dhas", "path": "pdumais/dhas/2767837c4ccf9f35596b1b353a311c2ad5c69d2d9836389591f6aa0d6c11e485", "path_in_repo": "pdumais/dhas/src/libs/dumaislib/json/Object.o", "objdump": "0000000000001470 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:\n    1470:\t55                   \tpush   %rbp\n    1471:\t48 89 e5             \tmov    %rsp,%rbp\n    1474:\t41 54                \tpush   %r12\n    1476:\t53                   \tpush   %rbx\n    1477:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n    147b:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    147f:\tf2 0f 11 45 80       \tmovsd  %xmm0,-0x80(%rbp)\n    1484:\t48 89 b5 78 ff ff ff \tmov    %rsi,-0x88(%rbp)\n    148b:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    1492:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1496:\t48 89 d6             \tmov    %rdx,%rsi\n    1499:\t48 89 c7             \tmov    %rax,%rdi\n    149c:\te8 00 00 00 00       \tcallq  14a1 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x31>\n    14a1:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    14a8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    14ad:\t48 89 c7             \tmov    %rax,%rdi\n    14b0:\te8 00 00 00 00       \tcallq  14b5 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x45>\n    14b5:\t84 c0                \ttest   %al,%al\n    14b7:\t74 32                \tje     14eb <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7b>\n    14b9:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    14bd:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n    14c1:\t48 89 d6             \tmov    %rdx,%rsi\n    14c4:\t48 89 c7             \tmov    %rax,%rdi\n    14c7:\te8 00 00 00 00       \tcallq  14cc <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>\n    14cc:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    14d0:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    14d4:\t48 89 d6             \tmov    %rdx,%rsi\n    14d7:\t48 89 c7             \tmov    %rax,%rdi\n    14da:\te8 00 00 00 00       \tcallq  14df <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6f>\n    14df:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    14e3:\t48 89 c7             \tmov    %rax,%rdi\n    14e6:\te8 00 00 00 00       \tcallq  14eb <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7b>\n    14eb:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    14ef:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n    14f3:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    14f7:\t48 89 c6             \tmov    %rax,%rsi\n    14fa:\t48 89 d7             \tmov    %rdx,%rdi\n    14fd:\te8 00 00 00 00       \tcallq  1502 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x92>\n    1502:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n    1506:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    150a:\t48 83 c0 18          \tadd    $0x18,%rax\n    150e:\t48 89 c7             \tmov    %rax,%rdi\n    1511:\te8 00 00 00 00       \tcallq  1516 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa6>\n    1516:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    151a:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    151e:\t48 8d 45 98          \tlea    -0x68(%rbp),%rax\n    1522:\t48 89 d6             \tmov    %rdx,%rsi\n    1525:\t48 89 c7             \tmov    %rax,%rdi\n    1528:\te8 00 00 00 00       \tcallq  152d <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbd>\n    152d:\t84 c0                \ttest   %al,%al\n    152f:\t74 27                \tje     1558 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>\n    1531:\t48 8d 45 98          \tlea    -0x68(%rbp),%rax\n    1535:\t48 89 c7             \tmov    %rax,%rdi\n    1538:\te8 00 00 00 00       \tcallq  153d <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcd>\n    153d:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1541:\t48 85 c0             \ttest   %rax,%rax\n    1544:\t74 12                \tje     1558 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe8>\n    1546:\t48 8b 10             \tmov    (%rax),%rdx\n    1549:\t48 81 c2 90 00 00 00 \tadd    $0x90,%rdx\n    1550:\t48 8b 12             \tmov    (%rdx),%rdx\n    1553:\t48 89 c7             \tmov    %rax,%rdi\n    1556:\tff d2                \tcallq  *%rdx\n    1558:\tbf 40 00 00 00       \tmov    $0x40,%edi\n    155d:\te8 00 00 00 00       \tcallq  1562 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf2>\n    1562:\t48 89 c3             \tmov    %rax,%rbx\n    1565:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    1569:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n    156e:\t48 89 df             \tmov    %rbx,%rdi\n    1571:\te8 00 00 00 00       \tcallq  1576 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x106>\n    1576:\t48 89 5d e8          \tmov    %rbx,-0x18(%rbp)\n    157a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    157e:\t48 8d 50 18          \tlea    0x18(%rax),%rdx\n    1582:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1586:\t48 89 c6             \tmov    %rax,%rsi\n    1589:\t48 89 d7             \tmov    %rdx,%rdi\n    158c:\te8 00 00 00 00       \tcallq  1591 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x121>\n    1591:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1595:\t48 89 10             \tmov    %rdx,(%rax)\n    1598:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    159c:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    15a0:\t48 89 c7             \tmov    %rax,%rdi\n    15a3:\te8 00 00 00 00       \tcallq  15a8 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x138>\n    15a8:\t48 89 d8             \tmov    %rbx,%rax\n    15ab:\teb 2a                \tjmp    15d7 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x167>\n    15ad:\t49 89 c4             \tmov    %rax,%r12\n    15b0:\t48 89 df             \tmov    %rbx,%rdi\n    15b3:\te8 00 00 00 00       \tcallq  15b8 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x148>\n    15b8:\t4c 89 e3             \tmov    %r12,%rbx\n    15bb:\teb 03                \tjmp    15c0 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x150>\n    15bd:\t48 89 c3             \tmov    %rax,%rbx\n    15c0:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    15c4:\t48 89 c7             \tmov    %rax,%rdi\n    15c7:\te8 00 00 00 00       \tcallq  15cc <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x15c>\n    15cc:\t48 89 d8             \tmov    %rbx,%rax\n    15cf:\t48 89 c7             \tmov    %rax,%rdi\n    15d2:\te8 00 00 00 00       \tcallq  15d7 <_ZN6Dumais4JSON6Object8addValueEdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x167>\n    15d7:\t48 83 ec 80          \tsub    $0xffffffffffffff80,%rsp\n    15db:\t5b                   \tpop    %rbx\n    15dc:\t41 5c                \tpop    %r12\n    15de:\t5d                   \tpop    %rbp\n    15df:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Dumais JSON Object addValue(__int64 a1, __int64 a2,\n                                               double a3) {\n  __int64 v3;\n  Dumais JSON Value *v4;\n  Dumais JSON Value **v5;\n  __int64 v6;\n  __int64 <span class=\"supfact\">v8</span>;\n  char <span class=\"supfact\">v9</span>[Number];\n  char <span class=\"supfact\">v10</span>[Number];\n  __int64 <span class=\"supfact\">v11</span>;\n  Dumais JSON Value *<span class=\"supfact\">v12</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v9</span>, a2);\n  if ((unsigned __int8)std operator==<char>(a2, &unk_17AD)) {\n    Dumais JSON Object generateKey[abi:cxx11]((__int64)<span class=\"supfact\">v10</span>, a1);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator=(<span class=\"supfact\">v9</span>, <span class=\"supfact\">v10</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v10</span>);\n  }\n  <span class=\"supfact\">v8</span> =\n      std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>,\n                        Dumais JSON JSON *>\n          find(a1 + Number, <span class=\"supfact\">v9</span>);\n  <span class=\"supfact\">v11</span> =\n      std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>,\n                        Dumais JSON JSON *>\n          end(a1 + Number);\n  if ((unsigned __int8)std __detail operator!=\n      <std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                         std allocator<char>> const,\n                Dumais JSON JSON *>,\n       true>(&<span class=\"supfact\">v8</span>, &<span class=\"supfact\">v11</span>)) {\n    v3 = *(_QWORD *)(std __detail _Node_iterator<\n                         std pair<std __cxx11\n                                      basic_string<char, std char_traits<char>,\n                                                   std allocator<char>> const,\n                                  Dumais JSON JSON *>,\n                         false, true>\n                     operator->(&<span class=\"supfact\">v8</span>) +\n                     Number);\n    if (v3)\n      (*(void(__fastcall **)(__int64))(*(_QWORD *)v3 + Number L))(v3);\n  }\n  v4 = (Dumais JSON Value *)operator new(Number);\n  Dumais JSON Value Value(v4, a3);\n  <span class=\"supfact\">v12</span> = v4;\n  v5 = (Dumais JSON Value **)\n      std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>,\n                        Dumais JSON JSON *>\n      operator[](a1 + Number, <span class=\"supfact\">v9</span>);\n  *v5 = <span class=\"supfact\">v12</span>;\n  v6 = (__int64)<span class=\"supfact\">v12</span>;\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v9</span>);\n  return v6;\n}", "code_t": "Dumais JSON JSON *__cdecl Dumais JSON Object\naddValue(Dumais JSON Object *const this, double val, const std string *name) {\n  Dumais JSON JSON *v3;\n  Dumais JSON Value *v4;\n  std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>>,\n                    Dumais JSON JSON *>\n      mapped_type *v5;\n  Dumais JSON JSON *v6;\n  std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                             std allocator<char>>,\n                    Dumais JSON JSON *>\n      iterator <span class=\"supfact\">it</span>;\n  std string <span class=\"supfact\">key</span>;\n  std string <span class=\"supfact\">v10</span>;\n  std __detail _Node_iterator_base<\n      std pair<const std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>,\n               Dumais JSON JSON *>,\n      true>\n      <span class=\"supfact\">__y</span>;\n  Dumais JSON Value *<span class=\"supfact\">item</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(&<span class=\"supfact\">key</span>, name);\n  if (std operator==<char>(name, &_rhs)) {\n    Dumais JSON Object generateKey[abi:cxx11](&<span class=\"supfact\">v10</span>, this);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator=(&<span class=\"supfact\">key</span>, &<span class=\"supfact\">v10</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">v10</span>);\n  }\n  <span class=\"supfact\">it</span>._M_cur =\n      std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>,\n                        Dumais JSON JSON *>\n          find(&this->mMembers, &<span class=\"supfact\">key</span>)._M_cur;\n  <span class=\"supfact\">__y</span>._M_cur =\n      std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                 std allocator<char>>,\n                        Dumais JSON JSON *>\n          end(&this->mMembers)._M_cur;\n  if (std __detail operator!=\n      <std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                         std allocator<char>> const,\n                Dumais JSON JSON *>,\n       true>(&<span class=\"supfact\">it</span>, &<span class=\"supfact\">__y</span>)) {\n    v3 = std __detail _Node_iterator<\n             std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                               std allocator<char>> const,\n                      Dumais JSON JSON *>,\n             false, true>\n         operator->(&<span class=\"supfact\">it</span>)->second;\n    if (v3)\n      (*(void(__fastcall **)(Dumais JSON JSON *))(*(_QWORD *)v3 + Number L))(\n          v3);\n  }\n  v4 = (Dumais JSON Value *)operator new(Number);\n  Dumais JSON Value Value(v4, val);\n  <span class=\"supfact\">item</span> = v4;\n  v5 = std unordered_map<std __cxx11 basic_string<char, std char_traits<char>,\n                                                  std allocator<char>>,\n                         Dumais JSON JSON *>\n  operator[](&this->mMembers, &<span class=\"supfact\">key</span>);\n  *v5 = <span class=\"supfact\">item</span>;\n  v6 = <span class=\"supfact\">item</span>;\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">key</span>);\n  return v6;\n}", "var": [{"name": "v10", "type": "char[32]", "ref_name": "v10", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v9", "type": "char[32]", "ref_name": "key", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "jberaud", "repo_name": "joystick_remote", "path": "jberaud/joystick_remote/e29378cf60c4550ec64f1285d94adc093a93abfdfb99d211e92c73f3d153c412", "path_in_repo": "jberaud/joystick_remote//joystick_remote", "objdump": "000000000040187a <remote_start>:\n  40187a:\t55                   \tpush   %rbp\n  40187b:\t48 89 e5             \tmov    %rsp,%rbp\n  40187e:\t48 83 ec 60          \tsub    $0x60,%rsp\n  401882:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  401886:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  40188a:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  40188e:\tba 10 00 00 00       \tmov    $0x10,%edx\n  401893:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401898:\t48 89 c7             \tmov    %rax,%rdi\n  40189b:\te8 30 f8 ff ff       \tcallq  4010d0 <memset@plt>\n  4018a0:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4018a4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4018a8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4018ac:\tbe 3a 00 00 00       \tmov    $0x3a,%esi\n  4018b1:\t48 89 c7             \tmov    %rax,%rdi\n  4018b4:\te8 d7 f7 ff ff       \tcallq  401090 <strchr@plt>\n  4018b9:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4018bd:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  4018c2:\t75 23                \tjne    4018e7 <remote_start+0x6d>\n  4018c4:\t48 8b 05 d5 39 00 00 \tmov    0x39d5(%rip),%rax        # 4052a0 <stderr@@GLIBC_2.2.5>\n  4018cb:\t48 89 c1             \tmov    %rax,%rcx\n  4018ce:\tba 21 00 00 00       \tmov    $0x21,%edx\n  4018d3:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4018d8:\tbf e8 34 40 00       \tmov    $0x4034e8,%edi\n  4018dd:\te8 ce f8 ff ff       \tcallq  4011b0 <fwrite@plt>\n  4018e2:\te9 04 01 00 00       \tjmpq   4019eb <remote_start+0x171>\n  4018e7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4018eb:\tc6 00 00             \tmovb   $0x0,(%rax)\n  4018ee:\t48 83 45 f0 01       \taddq   $0x1,-0x10(%rbp)\n  4018f3:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  4018f7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4018fb:\t48 89 c6             \tmov    %rax,%rsi\n  4018fe:\tbf 10 35 40 00       \tmov    $0x403510,%edi\n  401903:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401908:\te8 e5 f9 ff ff       \tcallq  4012f2 <debug_printf>\n  40190d:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  401911:\tba 30 00 00 00       \tmov    $0x30,%edx\n  401916:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40191b:\t48 89 c7             \tmov    %rax,%rdi\n  40191e:\te8 ad f7 ff ff       \tcallq  4010d0 <memset@plt>\n  401923:\tc7 45 b4 00 00 00 00 \tmovl   $0x0,-0x4c(%rbp)\n  40192a:\tc7 45 b8 02 00 00 00 \tmovl   $0x2,-0x48(%rbp)\n  401931:\tc7 45 bc 00 00 00 00 \tmovl   $0x0,-0x44(%rbp)\n  401938:\tc7 45 b0 20 00 00 00 \tmovl   $0x20,-0x50(%rbp)\n  40193f:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  401943:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n  401947:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  40194b:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n  40194f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401953:\t48 89 c7             \tmov    %rax,%rdi\n  401956:\te8 65 f8 ff ff       \tcallq  4011c0 <getaddrinfo@plt>\n  40195b:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  40195e:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  401962:\t74 28                \tje     40198c <remote_start+0x112>\n  401964:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  401967:\t89 c7                \tmov    %eax,%edi\n  401969:\te8 52 f7 ff ff       \tcallq  4010c0 <gai_strerror@plt>\n  40196e:\t48 89 c2             \tmov    %rax,%rdx\n  401971:\t48 8b 05 28 39 00 00 \tmov    0x3928(%rip),%rax        # 4052a0 <stderr@@GLIBC_2.2.5>\n  401978:\tbe 38 35 40 00       \tmov    $0x403538,%esi\n  40197d:\t48 89 c7             \tmov    %rax,%rdi\n  401980:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401985:\te8 a6 f7 ff ff       \tcallq  401130 <fprintf@plt>\n  40198a:\teb 5f                \tjmp    4019eb <remote_start+0x171>\n  40198c:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  401990:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  401994:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  401997:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  40199b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  40199f:\t8b 48 08             \tmov    0x8(%rax),%ecx\n  4019a2:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  4019a6:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4019aa:\t8b 40 04             \tmov    0x4(%rax),%eax\n  4019ad:\t89 ce                \tmov    %ecx,%esi\n  4019af:\t89 c7                \tmov    %eax,%edi\n  4019b1:\te8 4a f8 ff ff       \tcallq  401200 <socket@plt>\n  4019b6:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n  4019ba:\t89 02                \tmov    %eax,(%rdx)\n  4019bc:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  4019c0:\t8b 00                \tmov    (%rax),%eax\n  4019c2:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4019c5:\t75 1d                \tjne    4019e4 <remote_start+0x16a>\n  4019c7:\tbf 59 35 40 00       \tmov    $0x403559,%edi\n  4019cc:\te8 bf f7 ff ff       \tcallq  401190 <perror@plt>\n  4019d1:\t90                   \tnop\n  4019d2:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  4019d6:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4019da:\t48 89 c7             \tmov    %rax,%rdi\n  4019dd:\te8 0e f8 ff ff       \tcallq  4011f0 <freeaddrinfo@plt>\n  4019e2:\teb 07                \tjmp    4019eb <remote_start+0x171>\n  4019e4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4019e9:\teb 05                \tjmp    4019f0 <remote_start+0x176>\n  4019eb:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4019f0:\tc9                   \tleaveq \n  4019f1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall remote_start(char *a1, struct addrinfo **a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  const char *v5;\n  struct addrinfo <span class=\"supfact\">req</span>;\n  int <span class=\"supfact\">ecode</span>;\n  char *<span class=\"supfact\">service</span>;\n  char *<span class=\"supfact\">name</span>;\n  memset(a2, Number, Number);\n  <span class=\"supfact\">name</span> = a1;\n  <span class=\"supfact\">service</span> = strchr(a1, Number);\n  if (<span class=\"supfact\">service</span>) {\n    *<span class=\"supfact\">service</span>++ = Number;\n    debug_printf(String, (__int64)<span class=\"supfact\">name</span>,\n                 (__int64)<span class=\"supfact\">service</span>, v2, v3, v4);\n    memset(&<span class=\"supfact\">req</span>, Number, sizeof(<span class=\"supfact\">req</span>));\n    <span class=\"supfact\">req</span>.ai_family = Number;\n    <span class=\"supfact\">req</span>.ai_socktype = Number;\n    <span class=\"supfact\">req</span>.ai_protocol = Number;\n    <span class=\"supfact\">req</span>.ai_flags = Number;\n    <span class=\"supfact\">ecode</span> =\n        getaddrinfo(<span class=\"supfact\">name</span>, <span class=\"supfact\">service</span>,\n                    &<span class=\"supfact\">req</span>, a2 + Number);\n    if (<span class=\"supfact\">ecode</span>) {\n      v5 = gai_strerror(<span class=\"supfact\">ecode</span>);\n      fprintf(stderr, String, v5);\n    } else {\n      *(_DWORD *)a2 = socket(a2[Number]->ai_family, a2[Number]->ai_socktype,\n                             a2[Number]->ai_protocol);\n      if (*(_DWORD *)a2 != Number)\n        return Number L;\n      perror(String);\n      freeaddrinfo(a2[Number]);\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n  }\n  return Number;\n}", "code_t": "int __cdecl remote_start(char *remote_host, remote *remote) {\n  const char *v2;\n  addrinfo <span class=\"supfact\">info</span>;\n  int <span class=\"supfact\">ret</span>;\n  char *<span class=\"supfact\">remote_port</span>;\n  char *<span class=\"supfact\">remote_addr</span>;\n  memset(remote, Number, sizeof(remote));\n  <span class=\"supfact\">remote_addr</span> = remote_host;\n  <span class=\"supfact\">remote_port</span> = strchr(remote_host, Number);\n  if (<span class=\"supfact\">remote_port</span>) {\n    *<span class=\"supfact\">remote_port</span>++ = Number;\n    debug_printf(String, <span class=\"supfact\">remote_addr</span>,\n                 <span class=\"supfact\">remote_port</span>);\n    memset(&<span class=\"supfact\">info</span>, Number, sizeof(<span class=\"supfact\">info</span>));\n    <span class=\"supfact\">info</span>.ai_family = Number;\n    <span class=\"supfact\">info</span>.ai_socktype = Number;\n    <span class=\"supfact\">info</span>.ai_protocol = Number;\n    <span class=\"supfact\">info</span>.ai_flags = Number;\n    <span class=\"supfact\">ret</span> =\n        getaddrinfo(<span class=\"supfact\">remote_addr</span>, <span class=\"supfact\">remote_port</span>,\n                    &<span class=\"supfact\">info</span>, &remote->res);\n    if (<span class=\"supfact\">ret</span>) {\n      v2 = gai_strerror(<span class=\"supfact\">ret</span>);\n      fprintf(stderr, String, v2);\n    } else {\n      remote->fd = socket(remote->res->ai_family, remote->res->ai_socktype,\n                          remote->res->ai_protocol);\n      if (remote->fd != Number)\n        return Number;\n      perror(String);\n      freeaddrinfo(remote->res);\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n  }\n  return Number;\n}", "var": [{"name": "req", "type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }", "ref_name": "info", "ref_type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }"}], "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/95e2976d4dbab75a04d3663dbd6d625147c011b33b8fb7696190981a0e7d946e", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_data_structures_84790dfc.o", "objdump": "0000000000002248 <_ZNK4juce9ValueTree11toXmlStringEv>:\n    2248:\t55                   \tpush   %rbp\n    2249:\t48 89 e5             \tmov    %rsp,%rbp\n    224c:\t53                   \tpush   %rbx\n    224d:\t48 83 ec 38          \tsub    $0x38,%rsp\n    2251:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    2255:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    2259:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    225d:\t48 89 c7             \tmov    %rax,%rdi\n    2260:\te8 00 00 00 00       \tcallq  2265 <_ZNK4juce9ValueTree11toXmlStringEv+0x1d>\n    2265:\t48 89 c2             \tmov    %rax,%rdx\n    2268:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    226c:\t48 89 d6             \tmov    %rdx,%rsi\n    226f:\t48 89 c7             \tmov    %rax,%rdi\n    2272:\te8 00 00 00 00       \tcallq  2277 <_ZNK4juce9ValueTree11toXmlStringEv+0x2f>\n    2277:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    227b:\t48 89 c7             \tmov    %rax,%rdi\n    227e:\te8 00 00 00 00       \tcallq  2283 <_ZNK4juce9ValueTree11toXmlStringEv+0x3b>\n    2283:\t48 85 c0             \ttest   %rax,%rax\n    2286:\t74 62                \tje     22ea <_ZNK4juce9ValueTree11toXmlStringEv+0xa2>\n    2288:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    228c:\t48 89 c7             \tmov    %rax,%rdi\n    228f:\te8 00 00 00 00       \tcallq  2294 <_ZNK4juce9ValueTree11toXmlStringEv+0x4c>\n    2294:\t48 89 c3             \tmov    %rax,%rbx\n    2297:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    229b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    22a0:\t48 89 c7             \tmov    %rax,%rdi\n    22a3:\te8 00 00 00 00       \tcallq  22a8 <_ZNK4juce9ValueTree11toXmlStringEv+0x60>\n    22a8:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n    22ac:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    22b1:\t48 89 c7             \tmov    %rax,%rdi\n    22b4:\te8 00 00 00 00       \tcallq  22b9 <_ZNK4juce9ValueTree11toXmlStringEv+0x71>\n    22b9:\t48 8b 7d c8          \tmov    -0x38(%rbp),%rdi\n    22bd:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    22c1:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n    22c5:\t48 83 ec 08          \tsub    $0x8,%rsp\n    22c9:\t6a 3c                \tpushq  $0x3c\n    22cb:\t49 89 d1             \tmov    %rdx,%r9\n    22ce:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    22d4:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    22d9:\t48 89 c2             \tmov    %rax,%rdx\n    22dc:\t48 89 de             \tmov    %rbx,%rsi\n    22df:\te8 00 00 00 00       \tcallq  22e4 <_ZNK4juce9ValueTree11toXmlStringEv+0x9c>\n    22e4:\t48 83 c4 10          \tadd    $0x10,%rsp\n    22e8:\teb 0c                \tjmp    22f6 <_ZNK4juce9ValueTree11toXmlStringEv+0xae>\n    22ea:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    22ee:\t48 89 c7             \tmov    %rax,%rdi\n    22f1:\te8 00 00 00 00       \tcallq  22f6 <_ZNK4juce9ValueTree11toXmlStringEv+0xae>\n    22f6:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    22fa:\t48 89 c7             \tmov    %rax,%rdi\n    22fd:\te8 00 00 00 00       \tcallq  2302 <_ZNK4juce9ValueTree11toXmlStringEv+0xba>\n    2302:\teb 1a                \tjmp    231e <_ZNK4juce9ValueTree11toXmlStringEv+0xd6>\n    2304:\t48 89 c3             \tmov    %rax,%rbx\n    2307:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    230b:\t48 89 c7             \tmov    %rax,%rdi\n    230e:\te8 00 00 00 00       \tcallq  2313 <_ZNK4juce9ValueTree11toXmlStringEv+0xcb>\n    2313:\t48 89 d8             \tmov    %rbx,%rax\n    2316:\t48 89 c7             \tmov    %rax,%rdi\n    2319:\te8 00 00 00 00       \tcallq  231e <_ZNK4juce9ValueTree11toXmlStringEv+0xd6>\n    231e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2322:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n    2326:\tc9                   \tleaveq \n    2327:\tc3                   \tretq   ", "code_s": "juce ValueTree *__fastcall juce ValueTree toXmlString(juce ValueTree *this,\n                                                      juce ValueTree *a2) {\n  __int64 v2;\n  __int64 v3;\n  char <span class=\"supfact\">v5</span>[Number];\n  char <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  v2 = juce ValueTree createXml(a2);\n  juce ScopedPointer<juce XmlElement> ScopedPointer(<span class=\"supfact\">v5</span>, v2);\n  if (juce ScopedPointer<juce XmlElement> operator juce XmlElement *(\n          <span class=\"supfact\">v5</span>)) {\n    v3 = juce ScopedPointer<juce XmlElement> operator->(<span class=\"supfact\">v5</span>);\n    juce StringRef StringRef((juce StringRef *)<span class=\"supfact\">v6</span>, String);\n    juce StringRef StringRef((juce StringRef *)<span class=\"supfact\">v7</span>, byte_52CB);\n    juce XmlElement createDocument(this, v3, <span class=\"supfact\">v7</span>, Number L,\n                                   Number L, <span class=\"supfact\">v6</span>, Number L);\n  } else {\n    juce String String(this);\n  }\n  juce ScopedPointer<juce XmlElement> ~ScopedPointer(<span class=\"supfact\">v5</span>);\n  return this;\n}", "code_t": "juce String __cdecl juce ValueTree\ntoXmlString(const juce ValueTree *const this) {\n  const juce ValueTree *v1;\n  juce XmlElement *v2;\n  juce XmlElement *v3;\n  juce ScopedPointer<juce XmlElement> <span class=\"supfact\">xml</span>;\n  juce StringRef <span class=\"supfact\">v6</span>;\n  juce StringRef <span class=\"supfact\">v7</span>;\n  v2 = juce ValueTree createXml(v1);\n  juce ScopedPointer<juce XmlElement> ScopedPointer(&<span class=\"supfact\">xml</span>, v2);\n  if (juce ScopedPointer<juce XmlElement> operator juce XmlElement *(\n          &<span class=\"supfact\">xml</span>)) {\n    v3 = juce ScopedPointer<juce XmlElement> operator->(&<span class=\"supfact\">xml</span>);\n    juce StringRef StringRef(&<span class=\"supfact\">v6</span>, String);\n    juce StringRef StringRef(&<span class=\"supfact\">v7</span>, byte_52CB);\n    juce XmlElement createDocument(\n        (juce XmlElement *)this, (juce StringRef)v3, (bool)&<span class=\"supfact\">v7</span>,\n        Number, (juce StringRef)Number L, (int)&<span class=\"supfact\">v6</span>);\n  } else {\n    juce String String((juce String *)this);\n  }\n  juce ScopedPointer<juce XmlElement> ~ScopedPointer(&<span class=\"supfact\">xml</span>);\n  return (juce String)this;\n}", "var": [{"name": "v7", "type": "char[16]", "ref_name": "v7", "ref_type": "struct juce::StringRef { juce::String::CharPointerType text; }"}, {"name": "v6", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "v6", "ref_type": "struct juce::StringRef { juce::String::CharPointerType text; }"}], "body_in_train": false}, {"repo_owner": "gbarsever", "repo_name": "in-progress-perp", "path": "gbarsever/in-progress-perp/5fee62774275677d10486a46bc8daeb47979405ab35b5e1b0b5e22702b48697e", "path_in_repo": "gbarsever/in-progress-perp/bhmmi-code/bhmmi-master/gsl-1.16/specfunc/hyperg_U.o", "objdump": "00000000000087ae <gsl_sf_hyperg_U_int>:\n    87ae:\t55                   \tpush   %rbp\n    87af:\t48 89 e5             \tmov    %rsp,%rbp\n    87b2:\t48 83 ec 30          \tsub    $0x30,%rsp\n    87b6:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n    87b9:\t89 75 d8             \tmov    %esi,-0x28(%rbp)\n    87bc:\tf2 0f 11 45 d0       \tmovsd  %xmm0,-0x30(%rbp)\n    87c1:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    87c5:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n    87c9:\t8b 4d d8             \tmov    -0x28(%rbp),%ecx\n    87cc:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    87cf:\t66 48 0f 6e c6       \tmovq   %rsi,%xmm0\n    87d4:\t89 ce                \tmov    %ecx,%esi\n    87d6:\t89 c7                \tmov    %eax,%edi\n    87d8:\te8 00 00 00 00       \tcallq  87dd <gsl_sf_hyperg_U_int+0x2f>\n    87dd:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    87e0:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    87e4:\t74 20                \tje     8806 <gsl_sf_hyperg_U_int+0x58>\n    87e6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    87e9:\t89 c1                \tmov    %eax,%ecx\n    87eb:\tba cc 06 00 00       \tmov    $0x6cc,%edx\n    87f0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    87f5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    87fa:\te8 00 00 00 00       \tcallq  87ff <gsl_sf_hyperg_U_int+0x51>\n    87ff:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n    8804:\teb 05                \tjmp    880b <gsl_sf_hyperg_U_int+0x5d>\n    8806:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n    880b:\tc9                   \tleaveq \n    880c:\tc3                   \tretq   ", "code_s": "double __fastcall gsl_sf_hyperg_U_int(int a1, int a2, double a3) {\n  double <span class=\"supfact\">v4</span>[Number];\n  unsigned int <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> =\n      gsl_sf_hyperg_U_int_e(a1, a2, (__int64)<span class=\"supfact\">v4</span>, a3);\n  if (<span class=\"supfact\">v5</span>)\n    gsl_error(String, String, Number L, <span class=\"supfact\">v5</span>);\n  return <span class=\"supfact\">v4</span>[Number];\n}", "code_t": "double __cdecl gsl_sf_hyperg_U_int(const int a, const int b, const double x) {\n  gsl_sf_result <span class=\"supfact\">result</span>;\n  int <span class=\"supfact\">status</span>;\n  <span class=\"supfact\">status</span> =\n      gsl_sf_hyperg_U_int_e(a, b, x, &<span class=\"supfact\">result</span>);\n  if (<span class=\"supfact\">status</span>)\n    gsl_error(String, String, Number L, (unsigned int)<span class=\"supfact\">status</span>);\n  return <span class=\"supfact\">result</span>.val;\n}", "var": [{"name": "v4", "type": "struct gsl_sf_result { double val; double err; }", "ref_name": "result", "ref_type": "struct gsl_sf_result { double val; double err; }"}], "body_in_train": false}, {"repo_owner": "FillipeAs", "repo_name": "Linuuux", "path": "FillipeAs/Linuuux/ba6b4935dc933017d14157eb9058e98e2e209ae0feb8361f77241f1a3c31fb6b", "path_in_repo": "FillipeAs/Linuuux/tools/testing/selftests/net/psock_fanout", "objdump": "00000000004013be <pair_udp_open>:\n  4013be:\t55                   \tpush   %rbp\n  4013bf:\t48 89 e5             \tmov    %rsp,%rbp\n  4013c2:\t53                   \tpush   %rbx\n  4013c3:\t48 83 ec 38          \tsub    $0x38,%rsp\n  4013c7:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  4013cb:\t89 f0                \tmov    %esi,%eax\n  4013cd:\t66 89 45 c4          \tmov    %ax,-0x3c(%rbp)\n  4013d1:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4013d6:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  4013db:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  4013e0:\te8 ab fd ff ff       \tcallq  401190 <socket@plt>\n  4013e5:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4013e9:\t89 02                \tmov    %eax,(%rdx)\n  4013eb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4013ef:\t48 8d 58 04          \tlea    0x4(%rax),%rbx\n  4013f3:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4013f8:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  4013fd:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  401402:\te8 89 fd ff ff       \tcallq  401190 <socket@plt>\n  401407:\t89 03                \tmov    %eax,(%rbx)\n  401409:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40140d:\t8b 00                \tmov    (%rax),%eax\n  40140f:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  401412:\t74 0f                \tje     401423 <pair_udp_open+0x65>\n  401414:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  401418:\t48 83 c0 04          \tadd    $0x4,%rax\n  40141c:\t8b 00                \tmov    (%rax),%eax\n  40141e:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  401421:\t75 28                \tjne    40144b <pair_udp_open+0x8d>\n  401423:\t48 8b 05 b6 3c 00 00 \tmov    0x3cb6(%rip),%rax        # 4050e0 <__TMC_END__>\n  40142a:\t48 89 c1             \tmov    %rax,%rcx\n  40142d:\tba 14 00 00 00       \tmov    $0x14,%edx\n  401432:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401437:\tbf 24 30 40 00       \tmov    $0x403024,%edi\n  40143c:\te8 3f fd ff ff       \tcallq  401180 <fwrite@plt>\n  401441:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401446:\te8 15 fd ff ff       \tcallq  401160 <exit@plt>\n  40144b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40144f:\tba 10 00 00 00       \tmov    $0x10,%edx\n  401454:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401459:\t48 89 c7             \tmov    %rax,%rdi\n  40145c:\te8 3f fc ff ff       \tcallq  4010a0 <memset@plt>\n  401461:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n  401467:\t0f b7 45 c4          \tmovzwl -0x3c(%rbp),%eax\n  40146b:\t89 c7                \tmov    %eax,%edi\n  40146d:\te8 0e fc ff ff       \tcallq  401080 <htons@plt>\n  401472:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n  401476:\tbf 01 00 00 7f       \tmov    $0x7f000001,%edi\n  40147b:\te8 10 fc ff ff       \tcallq  401090 <htonl@plt>\n  401480:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  401483:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  401487:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40148c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401491:\t48 89 c7             \tmov    %rax,%rdi\n  401494:\te8 07 fc ff ff       \tcallq  4010a0 <memset@plt>\n  401499:\t66 c7 45 d0 02 00    \tmovw   $0x2,-0x30(%rbp)\n  40149f:\t0f b7 45 c4          \tmovzwl -0x3c(%rbp),%eax\n  4014a3:\t83 c0 01             \tadd    $0x1,%eax\n  4014a6:\t0f b7 c0             \tmovzwl %ax,%eax\n  4014a9:\t89 c7                \tmov    %eax,%edi\n  4014ab:\te8 d0 fb ff ff       \tcallq  401080 <htons@plt>\n  4014b0:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n  4014b4:\tbf 01 00 00 7f       \tmov    $0x7f000001,%edi\n  4014b9:\te8 d2 fb ff ff       \tcallq  401090 <htonl@plt>\n  4014be:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  4014c1:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4014c5:\t48 89 c1             \tmov    %rax,%rcx\n  4014c8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4014cc:\t48 83 c0 04          \tadd    $0x4,%rax\n  4014d0:\t8b 00                \tmov    (%rax),%eax\n  4014d2:\tba 10 00 00 00       \tmov    $0x10,%edx\n  4014d7:\t48 89 ce             \tmov    %rcx,%rsi\n  4014da:\t89 c7                \tmov    %eax,%edi\n  4014dc:\te8 4f fc ff ff       \tcallq  401130 <bind@plt>\n  4014e1:\t85 c0                \ttest   %eax,%eax\n  4014e3:\t74 14                \tje     4014f9 <pair_udp_open+0x13b>\n  4014e5:\tbf 39 30 40 00       \tmov    $0x403039,%edi\n  4014ea:\te8 51 fc ff ff       \tcallq  401140 <perror@plt>\n  4014ef:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4014f4:\te8 67 fc ff ff       \tcallq  401160 <exit@plt>\n  4014f9:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4014fd:\t48 89 c1             \tmov    %rax,%rcx\n  401500:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  401504:\t8b 00                \tmov    (%rax),%eax\n  401506:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40150b:\t48 89 ce             \tmov    %rcx,%rsi\n  40150e:\t89 c7                \tmov    %eax,%edi\n  401510:\te8 1b fc ff ff       \tcallq  401130 <bind@plt>\n  401515:\t85 c0                \ttest   %eax,%eax\n  401517:\t74 14                \tje     40152d <pair_udp_open+0x16f>\n  401519:\tbf 39 30 40 00       \tmov    $0x403039,%edi\n  40151e:\te8 1d fc ff ff       \tcallq  401140 <perror@plt>\n  401523:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401528:\te8 33 fc ff ff       \tcallq  401160 <exit@plt>\n  40152d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  401531:\t48 89 c1             \tmov    %rax,%rcx\n  401534:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  401538:\t8b 00                \tmov    (%rax),%eax\n  40153a:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40153f:\t48 89 ce             \tmov    %rcx,%rsi\n  401542:\t89 c7                \tmov    %eax,%edi\n  401544:\te8 27 fc ff ff       \tcallq  401170 <connect@plt>\n  401549:\t85 c0                \ttest   %eax,%eax\n  40154b:\t74 14                \tje     401561 <pair_udp_open+0x1a3>\n  40154d:\tbf 3e 30 40 00       \tmov    $0x40303e,%edi\n  401552:\te8 e9 fb ff ff       \tcallq  401140 <perror@plt>\n  401557:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40155c:\te8 ff fb ff ff       \tcallq  401160 <exit@plt>\n  401561:\t90                   \tnop\n  401562:\t48 83 c4 38          \tadd    $0x38,%rsp\n  401566:\t5b                   \tpop    %rbx\n  401567:\t5d                   \tpop    %rbp\n  401568:\tc3                   \tretq   ", "code_s": "int __fastcall pair_udp_open(int *a1, uint16_t a2) {\n  int result;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  struct sockaddr <span class=\"supfact\">s</span>[Number];\n  *a1 = socket(Number, Number, Number);\n  a1[Number] = socket(Number, Number, Number);\n  if (*a1 == Number || a1[Number] == Number) {\n    fwrite(String, Number, Number, _bss_start);\n    exit(Number);\n  }\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  <span class=\"supfact\">s</span>[Number].sa_family = Number;\n  *(_WORD *)<span class=\"supfact\">s</span>[Number].sa_data = htons(a2);\n  *(_DWORD *)&<span class=\"supfact\">s</span>[Number].sa_data[Number] = htonl(Number);\n  memset(&<span class=\"supfact\">addr</span>, Number, sizeof(<span class=\"supfact\">addr</span>));\n  <span class=\"supfact\">addr</span>.sa_family = Number;\n  *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(a2 + Number);\n  *(_DWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = htonl(Number);\n  if (bind(a1[Number], &<span class=\"supfact\">addr</span>, Number)) {\n    perror(String);\n    exit(Number);\n  }\n  if (bind(*a1, <span class=\"supfact\">s</span>, Number)) {\n    perror(String);\n    exit(Number);\n  }\n  result = connect(*a1, &<span class=\"supfact\">addr</span>, Number);\n  if (result) {\n    perror(String);\n    exit(Number);\n  }\n  return result;\n}", "code_t": "void __cdecl pair_udp_open(int *fds, uint16_t port) {\n  sockaddr_in <span class=\"supfact\">daddr</span>;\n  sockaddr_in <span class=\"supfact\">saddr</span>;\n  *fds = socket(Number, Number, Number);\n  fds[Number] = socket(Number, Number, Number);\n  if (*fds == Number || fds[Number] == Number) {\n    fwrite(String, Number, Number, _bss_start);\n    exit(Number);\n  }\n  memset(&<span class=\"supfact\">saddr</span>, Number, sizeof(<span class=\"supfact\">saddr</span>));\n  <span class=\"supfact\">saddr</span>.sin_family = Number;\n  <span class=\"supfact\">saddr</span>.sin_port = htons(port);\n  <span class=\"supfact\">saddr</span>.sin_addr.s_addr = htonl(Number);\n  memset(&<span class=\"supfact\">daddr</span>, Number, sizeof(<span class=\"supfact\">daddr</span>));\n  <span class=\"supfact\">daddr</span>.sin_family = Number;\n  <span class=\"supfact\">daddr</span>.sin_port = htons(port + Number);\n  <span class=\"supfact\">daddr</span>.sin_addr.s_addr = htonl(Number);\n  if (bind(fds[Number], (const struct sockaddr *)&<span class=\"supfact\">daddr</span>,\n           Number)) {\n    perror(String);\n    exit(Number);\n  }\n  if (bind(*fds, (const struct sockaddr *)&<span class=\"supfact\">saddr</span>, Number)) {\n    perror(String);\n    exit(Number);\n  }\n  if (connect(*fds, (const struct sockaddr *)&<span class=\"supfact\">daddr</span>, Number)) {\n    perror(String);\n    exit(Number);\n  }\n}", "var": [{"name": "s", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "saddr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}, {"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "daddr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/8f8b600dd647fc4f8a99225a5f0230bc0903b805741b9a7de0f247a7e255007a", "path_in_repo": "sslab-gatech/janus/core/Utils.o", "objdump": "0000000000000268 <_Z17random_xattr_nameB5cxx11v>:\n 268:\t55                   \tpush   %rbp\n 269:\t48 89 e5             \tmov    %rsp,%rbp\n 26c:\t53                   \tpush   %rbx\n 26d:\t48 83 ec 68          \tsub    $0x68,%rsp\n 271:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n 275:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 27a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 27f:\te8 00 00 00 00       \tcallq  284 <_Z17random_xattr_nameB5cxx11v+0x1c>\n 284:\t85 c0                \ttest   %eax,%eax\n 286:\t0f 95 c0             \tsetne  %al\n 289:\t84 c0                \ttest   %al,%al\n 28b:\t74 4e                \tje     2db <_Z17random_xattr_nameB5cxx11v+0x73>\n 28d:\t48 8d 45 ce          \tlea    -0x32(%rbp),%rax\n 291:\t48 89 c7             \tmov    %rax,%rdi\n 294:\te8 00 00 00 00       \tcallq  299 <_Z17random_xattr_nameB5cxx11v+0x31>\n 299:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n 29e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2a3:\te8 00 00 00 00       \tcallq  2a8 <_Z17random_xattr_nameB5cxx11v+0x40>\n 2a8:\t89 c2                \tmov    %eax,%edx\n 2aa:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b1 <_Z17random_xattr_nameB5cxx11v+0x49>\n 2b1:\t89 d2                \tmov    %edx,%edx\n 2b3:\t48 8b 0c d0          \tmov    (%rax,%rdx,8),%rcx\n 2b7:\t48 8d 55 ce          \tlea    -0x32(%rbp),%rdx\n 2bb:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 2bf:\t48 89 ce             \tmov    %rcx,%rsi\n 2c2:\t48 89 c7             \tmov    %rax,%rdi\n 2c5:\te8 00 00 00 00       \tcallq  2ca <_Z17random_xattr_nameB5cxx11v+0x62>\n 2ca:\t48 8d 45 ce          \tlea    -0x32(%rbp),%rax\n 2ce:\t48 89 c7             \tmov    %rax,%rdi\n 2d1:\te8 00 00 00 00       \tcallq  2d6 <_Z17random_xattr_nameB5cxx11v+0x6e>\n 2d6:\te9 eb 00 00 00       \tjmpq   3c6 <_Z17random_xattr_nameB5cxx11v+0x15e>\n 2db:\t48 8d 45 cf          \tlea    -0x31(%rbp),%rax\n 2df:\t48 89 c7             \tmov    %rax,%rdi\n 2e2:\te8 00 00 00 00       \tcallq  2e7 <_Z17random_xattr_nameB5cxx11v+0x7f>\n 2e7:\tbe 05 00 00 00       \tmov    $0x5,%esi\n 2ec:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2f1:\te8 00 00 00 00       \tcallq  2f6 <_Z17random_xattr_nameB5cxx11v+0x8e>\n 2f6:\t89 c2                \tmov    %eax,%edx\n 2f8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2ff <_Z17random_xattr_nameB5cxx11v+0x97>\n 2ff:\t89 d2                \tmov    %edx,%edx\n 301:\t48 8b 0c d0          \tmov    (%rax,%rdx,8),%rcx\n 305:\t48 8d 55 cf          \tlea    -0x31(%rbp),%rdx\n 309:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 30d:\t48 89 ce             \tmov    %rcx,%rsi\n 310:\t48 89 c7             \tmov    %rax,%rdi\n 313:\te8 00 00 00 00       \tcallq  318 <_Z17random_xattr_nameB5cxx11v+0xb0>\n 318:\t48 8d 45 cf          \tlea    -0x31(%rbp),%rax\n 31c:\t48 89 c7             \tmov    %rax,%rdi\n 31f:\te8 00 00 00 00       \tcallq  324 <_Z17random_xattr_nameB5cxx11v+0xbc>\n 324:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 328:\tbe 08 00 00 00       \tmov    $0x8,%esi\n 32d:\t48 89 c7             \tmov    %rax,%rdi\n 330:\te8 00 00 00 00       \tcallq  335 <_Z17random_xattr_nameB5cxx11v+0xcd>\n 335:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 339:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n 33d:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n 341:\t48 89 ce             \tmov    %rcx,%rsi\n 344:\t48 89 c7             \tmov    %rax,%rdi\n 347:\te8 00 00 00 00       \tcallq  34c <_Z17random_xattr_nameB5cxx11v+0xe4>\n 34c:\t90                   \tnop\n 34d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 351:\t48 89 c7             \tmov    %rax,%rdi\n 354:\te8 00 00 00 00       \tcallq  359 <_Z17random_xattr_nameB5cxx11v+0xf1>\n 359:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 35d:\t48 89 c7             \tmov    %rax,%rdi\n 360:\te8 00 00 00 00       \tcallq  365 <_Z17random_xattr_nameB5cxx11v+0xfd>\n 365:\teb 5f                \tjmp    3c6 <_Z17random_xattr_nameB5cxx11v+0x15e>\n 367:\t48 89 c3             \tmov    %rax,%rbx\n 36a:\t48 8d 45 ce          \tlea    -0x32(%rbp),%rax\n 36e:\t48 89 c7             \tmov    %rax,%rdi\n 371:\te8 00 00 00 00       \tcallq  376 <_Z17random_xattr_nameB5cxx11v+0x10e>\n 376:\t48 89 d8             \tmov    %rbx,%rax\n 379:\t48 89 c7             \tmov    %rax,%rdi\n 37c:\te8 00 00 00 00       \tcallq  381 <_Z17random_xattr_nameB5cxx11v+0x119>\n 381:\t48 89 c3             \tmov    %rax,%rbx\n 384:\t48 8d 45 cf          \tlea    -0x31(%rbp),%rax\n 388:\t48 89 c7             \tmov    %rax,%rdi\n 38b:\te8 00 00 00 00       \tcallq  390 <_Z17random_xattr_nameB5cxx11v+0x128>\n 390:\t48 89 d8             \tmov    %rbx,%rax\n 393:\t48 89 c7             \tmov    %rax,%rdi\n 396:\te8 00 00 00 00       \tcallq  39b <_Z17random_xattr_nameB5cxx11v+0x133>\n 39b:\t48 89 c3             \tmov    %rax,%rbx\n 39e:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 3a2:\t48 89 c7             \tmov    %rax,%rdi\n 3a5:\te8 00 00 00 00       \tcallq  3aa <_Z17random_xattr_nameB5cxx11v+0x142>\n 3aa:\teb 03                \tjmp    3af <_Z17random_xattr_nameB5cxx11v+0x147>\n 3ac:\t48 89 c3             \tmov    %rax,%rbx\n 3af:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 3b3:\t48 89 c7             \tmov    %rax,%rdi\n 3b6:\te8 00 00 00 00       \tcallq  3bb <_Z17random_xattr_nameB5cxx11v+0x153>\n 3bb:\t48 89 d8             \tmov    %rbx,%rax\n 3be:\t48 89 c7             \tmov    %rax,%rdi\n 3c1:\te8 00 00 00 00       \tcallq  3c6 <_Z17random_xattr_nameB5cxx11v+0x15e>\n 3c6:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 3ca:\t48 83 c4 68          \tadd    $0x68,%rsp\n 3ce:\t5b                   \tpop    %rbx\n 3cf:\t5d                   \tpop    %rbp\n 3d0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall random_xattr_name[abi:cxx11](__int64 a1) {\n  int v1;\n  int v2;\n  char <span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>;\n  char <span class=\"supfact\">v6</span>;\n  char <span class=\"supfact\">v7</span>[Number];\n  if ((unsigned int)rand32(Number, Number)) {\n    std allocator<char> allocator(&<span class=\"supfact\">v5</span>);\n    v1 = rand32(Number, Number);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(a1, default_xattr[v1], &<span class=\"supfact\">v5</span>);\n    std allocator<char> ~allocator(&<span class=\"supfact\">v5</span>);\n  } else {\n    std allocator<char> allocator(&<span class=\"supfact\">v6</span>);\n    v2 = rand32(Number, Number);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(<span class=\"supfact\">v4</span>, default_xattr_prefix[v2],\n                     &<span class=\"supfact\">v6</span>);\n    std allocator<char> ~allocator(&<span class=\"supfact\">v6</span>);\n    random_string[abi:cxx11]((__int64)<span class=\"supfact\">v7</span>, Number L);\n    std operator+<char>(a1, <span class=\"supfact\">v4</span>, <span class=\"supfact\">v7</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v7</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v4</span>);\n  }\n  return a1;\n}", "code_t": "std string *__cdecl random_xattr_name[abi:cxx11](std string *retstr) {\n  __int64 v1;\n  uint32_t v2;\n  std string <span class=\"supfact\">base</span>;\n  char <span class=\"supfact\">v5</span>;\n  char <span class=\"supfact\">v6</span>;\n  std string <span class=\"supfact\">__rhs</span>;\n  if (rand32(Number, Number)) {\n    std allocator<char> allocator(&<span class=\"supfact\">v5</span>);\n    v1 = default_xattr[rand32(Number, Number)];\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(retstr, v1, &<span class=\"supfact\">v5</span>);\n    std allocator<char> ~allocator(&<span class=\"supfact\">v5</span>);\n  } else {\n    std allocator<char> allocator(&<span class=\"supfact\">v6</span>);\n    v2 = rand32(Number, Number);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(&<span class=\"supfact\">base</span>, default_xattr_prefix[v2],\n                     &<span class=\"supfact\">v6</span>);\n    std allocator<char> ~allocator(&<span class=\"supfact\">v6</span>);\n    random_string[abi:cxx11](&<span class=\"supfact\">__rhs</span>, Number);\n    std operator+<char>(retstr, &<span class=\"supfact\">base</span>, &<span class=\"supfact\">__rhs</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">__rhs</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">base</span>);\n  }\n  return retstr;\n}", "var": [{"name": "v7", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "__rhs", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v4", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "ref_name": "base", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "giamteckchoon", "repo_name": "djbdns-ipv6", "path": "giamteckchoon/djbdns-ipv6/49fa39ad4fca16b46e4d05158ac24b8a4cefed76e4464489a30a44573b562ac8", "path_in_repo": "giamteckchoon/djbdns-ipv6//dnstxt", "objdump": "", "code_s": "__int64 __fastcall sub_402395(__int64 a1, __int64 a2) {\n  struct pollfd <span class=\"supfact\">v3</span>;\n  char <span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  int <span class=\"supfact\">v7</span>;\n  if ((unsigned int)sub_403E92(<span class=\"supfact\">v4</span>) == Number)\n    return Number;\n  if ((unsigned int)sub_40331C(&unk_40A360, <span class=\"supfact\">v4</span>, Number L, a1,\n                               a2, &unk_407090) == Number)\n    return Number;\n  do {\n    sub_404269(<span class=\"supfact\">v6</span>);\n    sub_40447C(<span class=\"supfact\">v5</span>, Number L);\n    sub_404038(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>);\n    sub_4034E8(&unk_40A360, &<span class=\"supfact\">v3</span>, <span class=\"supfact\">v5</span>);\n    sub_401374(&<span class=\"supfact\">v3</span>, Number, (__int64)<span class=\"supfact\">v5</span>,\n               <span class=\"supfact\">v6</span>);\n    <span class=\"supfact\">v7</span> =\n        sub_403583(&unk_40A360, &<span class=\"supfact\">v3</span>, <span class=\"supfact\">v6</span>);\n    if (<span class=\"supfact\">v7</span> == Number)\n      return Number;\n  } while (<span class=\"supfact\">v7</span> != Number);\n  return Number L;\n}", "code_t": "__int64 __fastcall sub_402395(__int64 a1, __int64 a2) {\n  struct pollfd <span class=\"supfact\">v3</span>;\n  char <span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  int <span class=\"supfact\">v7</span>;\n  if ((unsigned int)sub_403E92(<span class=\"supfact\">v4</span>) == Number)\n    return Number;\n  if ((unsigned int)sub_40331C(&unk_40A360, <span class=\"supfact\">v4</span>, Number L, a1,\n                               a2, &unk_407090) == Number)\n    return Number;\n  do {\n    sub_404269(<span class=\"supfact\">v6</span>);\n    sub_40447C(<span class=\"supfact\">v5</span>, Number L);\n    sub_404038(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>);\n    sub_4034E8(&unk_40A360, &<span class=\"supfact\">v3</span>, <span class=\"supfact\">v5</span>);\n    sub_401374(&<span class=\"supfact\">v3</span>, Number, (__int64)<span class=\"supfact\">v5</span>,\n               <span class=\"supfact\">v6</span>);\n    <span class=\"supfact\">v7</span> =\n        sub_403583(&unk_40A360, &<span class=\"supfact\">v3</span>, <span class=\"supfact\">v6</span>);\n    if (<span class=\"supfact\">v7</span> == Number)\n      return Number;\n  } while (<span class=\"supfact\">v7</span> != Number);\n  return Number L;\n}", "var": [{"name": "v3", "type": "struct struct pollfd { int fd; __int16 events; __int16 revents; }", "ref_name": "v3", "ref_type": "struct struct pollfd { int fd; __int16 events; __int16 revents; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/c8943ed7431093b8fc94d4fdedb6462ac0e9b93a37c38637aed39ec6eb36e455", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/audio/taito_zm.o", "objdump": "000000000000023a <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t>:\n 23a:\t55                   \tpush   %rbp\n 23b:\t48 89 e5             \tmov    %rsp,%rbp\n 23e:\t53                   \tpush   %rbx\n 23f:\t48 83 ec 68          \tsub    $0x68,%rsp\n 243:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n 247:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n 24b:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n 252:\t00 \n 253:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 257:\t48 89 c7             \tmov    %rax,%rdi\n 25a:\te8 00 00 00 00       \tcallq  25f <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x25>\n 25f:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 266 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x2c>\n 266:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n 26a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 26e:\t41 b8 20 bc be 00    \tmov    $0xbebc20,%r8d\n 274:\t48 89 d1             \tmov    %rdx,%rcx\n 277:\tba 00 00 00 00       \tmov    $0x0,%edx\n 27c:\t48 89 c7             \tmov    %rax,%rdi\n 27f:\te8 00 00 00 00       \tcallq  284 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x4a>\n 284:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 288:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 28c:\tba 00 00 00 00       \tmov    $0x0,%edx\n 291:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 296:\t48 89 c7             \tmov    %rax,%rdi\n 299:\te8 00 00 00 00       \tcallq  29e <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x64>\n 29e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2a2:\tba 00 00 00 00       \tmov    $0x0,%edx\n 2a7:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 2ac:\t48 89 c7             \tmov    %rax,%rdi\n 2af:\te8 00 00 00 00       \tcallq  2b4 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x7a>\n 2b4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2b8:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 2bd:\tba 00 00 00 00       \tmov    $0x0,%edx\n 2c2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2c7:\t48 89 c7             \tmov    %rax,%rdi\n 2ca:\te8 00 00 00 00       \tcallq  2cf <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x95>\n 2cf:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2d6 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x9c>\n 2d6:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n 2da:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 2de:\t41 b8 20 bc be 00    \tmov    $0xbebc20,%r8d\n 2e4:\t48 89 d1             \tmov    %rdx,%rcx\n 2e7:\tba 00 00 00 00       \tmov    $0x0,%edx\n 2ec:\t48 89 c7             \tmov    %rax,%rdi\n 2ef:\te8 00 00 00 00       \tcallq  2f4 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0xba>\n 2f4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 2f8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2fc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 301:\t48 89 c7             \tmov    %rax,%rdi\n 304:\te8 00 00 00 00       \tcallq  309 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0xcf>\n 309:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 310 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0xd6>\n 310:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 314:\tb9 ff ff 00 00       \tmov    $0xffff,%ecx\n 319:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n 31e:\tba 00 00 00 00       \tmov    $0x0,%edx\n 323:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 328:\t48 89 c7             \tmov    %rax,%rdi\n 32b:\te8 00 00 00 00       \tcallq  330 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0xf6>\n 330:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 337 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0xfd>\n 337:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 33b:\tb9 ff ff 00 00       \tmov    $0xffff,%ecx\n 340:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n 345:\tba 00 00 00 00       \tmov    $0x0,%edx\n 34a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 34f:\t48 89 c7             \tmov    %rax,%rdi\n 352:\te8 00 00 00 00       \tcallq  357 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x11d>\n 357:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n 35b:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 35f:\t48 89 c7             \tmov    %rax,%rdi\n 362:\te8 00 00 00 00       \tcallq  367 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x12d>\n 367:\t48 89 d8             \tmov    %rbx,%rax\n 36a:\teb 1a                \tjmp    386 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x14c>\n 36c:\t48 89 c3             \tmov    %rax,%rbx\n 36f:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 373:\t48 89 c7             \tmov    %rax,%rdi\n 376:\te8 00 00 00 00       \tcallq  37b <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x141>\n 37b:\t48 89 d8             \tmov    %rbx,%rax\n 37e:\t48 89 c7             \tmov    %rax,%rdi\n 381:\te8 00 00 00 00       \tcallq  386 <_Z41construct_machine_config_taito_zoom_soundR14machine_configP8device_t+0x14c>\n 386:\t48 83 c4 68          \tadd    $0x68,%rsp\n 38a:\t5b                   \tpop    %rbx\n 38b:\t5d                   \tpop    %rbp\n 38c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall construct_machine_config_taito_zoom_sound(__int64 a1,\n                                                             __int64 a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = Number L;\n  astring astring((astring *)<span class=\"supfact\">v3</span>);\n  <span class=\"supfact\">v4</span> =\n      machine_config device_add(a1, a2, String, MN10200, Number L);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">v4</span>, Number L, construct_address_map_taitozoom_map);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">v4</span>, Number L, construct_address_map_taitozoom_io_map);\n  device_execute_interface static_set_vblank_int(\n      <span class=\"supfact\">v4</span>, &irq0_line_pulse, String, Number L);\n  <span class=\"supfact\">v4</span> =\n      machine_config device_add(a1, a2, String, ZSG2, Number L);\n  device_t static_set_static_config(<span class=\"supfact\">v4</span>, &zsg2_taito_config);\n  device_sound_interface static_add_route(<span class=\"supfact\">v4</span>, Number L, String,\n                                          Number, Number);\n  device_sound_interface static_add_route(<span class=\"supfact\">v4</span>, Number L, String,\n                                          Number, Number);\n  astring ~astring((astring *)<span class=\"supfact\">v3</span>);\n  return a2;\n}", "code_t": "device_t *__cdecl construct_machine_config_taito_zoom_sound(\n    machine_config *config, device_t *owner) {\n  void(__fastcall * v2)(address_map *, const device_t *);\n  void(__fastcall * v3)(address_map *, const device_t *);\n  int v4;\n  unsigned int v5;\n  unsigned int v6;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *<span class=\"supfact\">device</span>;\n  <span class=\"supfact\">device</span> = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_add(\n      config, owner, String, MN10200, Number);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, Number L,\n      (address_spacenum)construct_address_map_taitozoom_map, v2);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, (device_t *)((char *)&loc_1 + Number),\n      (address_spacenum)construct_address_map_taitozoom_io_map, v3);\n  device_execute_interface static_set_vblank_int(\n      <span class=\"supfact\">device</span>, (device_t *)&irq0_line_pulse,\n      (void(__fastcall *)(device_t *))String, Number L, v4);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_add(\n      config, owner, String, ZSG2, Number);\n  device_t static_set_static_config(<span class=\"supfact\">device</span>, &zsg2_taito_config);\n  device_sound_interface static_add_route(<span class=\"supfact\">device</span>, Number L,\n                                          (unsigned int)String,\n                                          (const char *)Number, Number, v5);\n  device_sound_interface static_add_route(\n      <span class=\"supfact\">device</span>, (device_t *)&loc_1, (unsigned int)String,\n      (const char *)Number, Number, v6);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return owner;\n}", "var": [{"name": "v3", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/a6c0476d37fab0a2016b706bb595a9db57bad22bae2083133c2d1eeb6cb12f1c", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_events_584896b4.o", "objdump": "", "code_s": "unsigned int juce LeakedObjectDetector<\n    juce ChildProcessMaster Connection> ~LeakedObjectDetector() {\n  volatile signed __int32 *v0;\n  unsigned int result;\n  __int64 v2;\n  const juce String *v3;\n  int v4;\n  char <span class=\"supfact\">v5</span>[Number];\n  v0 = (volatile signed __int32 *)\n      juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n      getCounter();\n  result = (unsigned int)juce Atomic<int> operator--(v0) >> Number;\n  if ((_BYTE)result) {\n    juce String String((juce String *)<span class=\"supfact\">v5</span>);\n    v2 = juce operator<<(<span class=\"supfact\">v5</span>, String);\n    v3 = (const juce String *)\n        juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n        getLeakedObjectClassName();\n    juce operator<<(v2, v3);\n    juce Logger outputDebugString((juce Logger *)<span class=\"supfact\">v5</span>, v3);\n    juce String ~String((juce String *)<span class=\"supfact\">v5</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_46 + Number, v4);\n    result = juce juce_isRunningUnderDebugger((juce *)String);\n    if ((_BYTE)result)\n      result = kill(Number, Number);\n  }\n  return result;\n}", "code_t": "void __cdecl juce LeakedObjectDetector<\n    juce ChildProcessMaster\n        Connection> ~LeakedObjectDetector(juce\n                                              LeakedObjectDetector<\n                                                  juce ChildProcessMaster\n                                                      Connection> *const this) {\n  juce LeakedObjectDetector<juce ChildProcessMaster Connection> LeakCounter *v1;\n  __int64 v2;\n  const char *v3;\n  int v4;\n  juce String <span class=\"supfact\">tempDbgBuf</span>;\n  v1 = juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n  getCounter();\n  if (juce Atomic<int> operator--(&v1->numObjects) < Number) {\n    juce String String(&<span class=\"supfact\">tempDbgBuf</span>);\n    v2 = juce operator<<(&<span class=\"supfact\">tempDbgBuf</span>, String);\n    v3 = juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n    getLeakedObjectClassName();\n    juce operator<<(v2, v3);\n    juce Logger outputDebugString((juce Logger *)&<span class=\"supfact\">tempDbgBuf</span>,\n                                  (const juce String *)v3);\n    juce String ~String(&<span class=\"supfact\">tempDbgBuf</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_46 + Number, v4);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n}", "var": [{"name": "v5", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "tempDbgBuf", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/560880a0d78a16c1d09b1d26c617d93994fcc3deea10e346cbe2cb3ba3e3c537", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/royalmah.o", "objdump": "000000000001673f <_ZL30construct_machine_config_janohR14machine_configP8device_t>:\n   1673f:\t55                   \tpush   %rbp\n   16740:\t48 89 e5             \tmov    %rsp,%rbp\n   16743:\t53                   \tpush   %rbx\n   16744:\t48 83 ec 68          \tsub    $0x68,%rsp\n   16748:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   1674c:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n   16750:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   16757:\t00 \n   16758:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   1675c:\t48 89 c7             \tmov    %rax,%rdi\n   1675f:\te8 00 00 00 00       \tcallq  16764 <_ZL30construct_machine_config_janohR14machine_configP8device_t+0x25>\n   16764:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n   16768:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   1676c:\t48 89 d6             \tmov    %rdx,%rsi\n   1676f:\t48 89 c7             \tmov    %rax,%rdi\n   16772:\te8 12 fd ff ff       \tcallq  16489 <_ZL33construct_machine_config_royalmahR14machine_configP8device_t>\n   16777:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n   1677b:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n   1677f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   16783:\tba 00 00 00 00       \tmov    $0x0,%edx\n   16788:\t48 89 ce             \tmov    %rcx,%rsi\n   1678b:\t48 89 c7             \tmov    %rax,%rdi\n   1678e:\te8 00 00 00 00       \tcallq  16793 <_ZL30construct_machine_config_janohR14machine_configP8device_t+0x54>\n   16793:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   16797:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1679b:\tbe 00 09 3d 00       \tmov    $0x3d0900,%esi\n   167a0:\t48 89 c7             \tmov    %rax,%rdi\n   167a3:\te8 00 00 00 00       \tcallq  167a8 <_ZL30construct_machine_config_janohR14machine_configP8device_t+0x69>\n   167a8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   167ac:\tba 00 00 00 00       \tmov    $0x0,%edx\n   167b1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   167b6:\t48 89 c7             \tmov    %rax,%rdi\n   167b9:\te8 00 00 00 00       \tcallq  167be <_ZL30construct_machine_config_janohR14machine_configP8device_t+0x7f>\n   167be:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 167c5 <_ZL30construct_machine_config_janohR14machine_configP8device_t+0x86>\n   167c5:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n   167c9:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   167cd:\t41 b8 00 09 3d 00    \tmov    $0x3d0900,%r8d\n   167d3:\t48 89 d1             \tmov    %rdx,%rcx\n   167d6:\tba 00 00 00 00       \tmov    $0x0,%edx\n   167db:\t48 89 c7             \tmov    %rax,%rdi\n   167de:\te8 00 00 00 00       \tcallq  167e3 <_ZL30construct_machine_config_janohR14machine_configP8device_t+0xa4>\n   167e3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   167e7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   167eb:\tba 00 00 00 00       \tmov    $0x0,%edx\n   167f0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   167f5:\t48 89 c7             \tmov    %rax,%rdi\n   167f8:\te8 00 00 00 00       \tcallq  167fd <_ZL30construct_machine_config_janohR14machine_configP8device_t+0xbe>\n   167fd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   16801:\tba 00 00 00 00       \tmov    $0x0,%edx\n   16806:\tbe 02 00 00 00       \tmov    $0x2,%esi\n   1680b:\t48 89 c7             \tmov    %rax,%rdi\n   1680e:\te8 00 00 00 00       \tcallq  16813 <_ZL30construct_machine_config_janohR14machine_configP8device_t+0xd4>\n   16813:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   16817:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n   1681c:\tba 00 00 00 00       \tmov    $0x0,%edx\n   16821:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   16826:\t48 89 c7             \tmov    %rax,%rdi\n   16829:\te8 00 00 00 00       \tcallq  1682e <_ZL30construct_machine_config_janohR14machine_configP8device_t+0xef>\n   1682e:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n   16832:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   16836:\t48 89 c7             \tmov    %rax,%rdi\n   16839:\te8 00 00 00 00       \tcallq  1683e <_ZL30construct_machine_config_janohR14machine_configP8device_t+0xff>\n   1683e:\t48 89 d8             \tmov    %rbx,%rax\n   16841:\teb 1a                \tjmp    1685d <_ZL30construct_machine_config_janohR14machine_configP8device_t+0x11e>\n   16843:\t48 89 c3             \tmov    %rax,%rbx\n   16846:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   1684a:\t48 89 c7             \tmov    %rax,%rdi\n   1684d:\te8 00 00 00 00       \tcallq  16852 <_ZL30construct_machine_config_janohR14machine_configP8device_t+0x113>\n   16852:\t48 89 d8             \tmov    %rbx,%rax\n   16855:\t48 89 c7             \tmov    %rax,%rdi\n   16858:\te8 00 00 00 00       \tcallq  1685d <_ZL30construct_machine_config_janohR14machine_configP8device_t+0x11e>\n   1685d:\t48 83 c4 68          \tadd    $0x68,%rsp\n   16861:\t5b                   \tpop    %rbx\n   16862:\t5d                   \tpop    %rbp\n   16863:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_janoh(machine_config *a1,\n                                                    device_t *a2) {\n  unsigned int v2;\n  int v3;\n  device_t *<span class=\"supfact\">v5</span>;\n  char <span class=\"supfact\">v6</span>[Number];\n  device_execute_interface *<span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = Number L;\n  astring astring((astring *)<span class=\"supfact\">v6</span>);\n  <span class=\"supfact\">v5</span> = construct_machine_config_royalmah(a1, a2);\n  <span class=\"supfact\">v7</span> = (device_execute_interface *)machine_config device_find(\n      a1, <span class=\"supfact\">v5</span>, String);\n  device_t static_set_clock(<span class=\"supfact\">v7</span>, (device_t *)Number, v2);\n  device_memory_interface static_set_addrmap(<span class=\"supfact\">v7</span>, Number L,\n                                             construct_address_map_janho_map);\n  <span class=\"supfact\">v7</span> = (device_execute_interface *)machine_config device_add(\n      a1, <span class=\"supfact\">v5</span>, String, Z80, Number);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">v7</span>, Number L, construct_address_map_janoh_sub_map);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">v7</span>, Number L, construct_address_map_janoh_sub_iomap);\n  device_execute_interface static_set_vblank_int(\n      <span class=\"supfact\">v7</span>, (device_t *)&irq0_line_hold,\n      (void(__fastcall *)(device_t *))String, Number L, v3);\n  astring ~astring((astring *)<span class=\"supfact\">v6</span>);\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "device_t *__cdecl construct_machine_config_janoh(machine_config *config,\n                                                 device_t *owner) {\n  unsigned int v2;\n  void(__fastcall * v3)(address_map *, const device_t *);\n  void(__fastcall * v4)(address_map *, const device_t *);\n  void(__fastcall * v5)(address_map *, const device_t *);\n  int v6;\n  device_t *<span class=\"supfact\">ownera</span>;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *<span class=\"supfact\">device</span>;\n  <span class=\"supfact\">device</span> = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  <span class=\"supfact\">ownera</span> = construct_machine_config_royalmah(config, owner);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  device_t static_set_clock(<span class=\"supfact\">device</span>, (device_t *)Number, v2);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, Number L,\n      (address_spacenum)construct_address_map_janho_map, v3);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_add(\n      config, <span class=\"supfact\">ownera</span>, String, Z80, Number);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, Number L,\n      (address_spacenum)construct_address_map_janoh_sub_map, v4);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, (device_t *)((char *)&loc_1 + Number),\n      (address_spacenum)construct_address_map_janoh_sub_iomap, v5);\n  device_execute_interface static_set_vblank_int(\n      <span class=\"supfact\">device</span>, (device_t *)&irq0_line_hold,\n      (void(__fastcall *)(device_t *))String, Number L, v6);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return <span class=\"supfact\">ownera</span>;\n}", "var": [{"name": "v6", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "SirClaudiu", "repo_name": "sshbackdoor", "path": "SirClaudiu/sshbackdoor/3780e207a869c6bbcc6f7ebf8c0a3784fa6579dda5c3bbf12cfdc33b5abb8635", "path_in_repo": "SirClaudiu/sshbackdoor//sftp-client.o", "objdump": "0000000000000668 <do_init>:\n     668:\t55                   \tpush   %rbp\n     669:\t48 89 e5             \tmov    %rsp,%rbp\n     66c:\t48 83 ec 50          \tsub    $0x50,%rsp\n     670:\t89 7d bc             \tmov    %edi,-0x44(%rbp)\n     673:\t89 75 b8             \tmov    %esi,-0x48(%rbp)\n     676:\t89 55 b4             \tmov    %edx,-0x4c(%rbp)\n     679:\t89 4d b0             \tmov    %ecx,-0x50(%rbp)\n     67c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     680:\t48 89 c7             \tmov    %rax,%rdi\n     683:\te8 00 00 00 00       \tcallq  688 <do_init+0x20>\n     688:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     68c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     691:\t48 89 c7             \tmov    %rax,%rdi\n     694:\te8 00 00 00 00       \tcallq  699 <do_init+0x31>\n     699:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     69d:\tbe 03 00 00 00       \tmov    $0x3,%esi\n     6a2:\t48 89 c7             \tmov    %rax,%rdi\n     6a5:\te8 00 00 00 00       \tcallq  6aa <do_init+0x42>\n     6aa:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n     6ae:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n     6b1:\t48 89 d6             \tmov    %rdx,%rsi\n     6b4:\t89 c7                \tmov    %eax,%edi\n     6b6:\te8 45 f9 ff ff       \tcallq  0 <send_msg>\n     6bb:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     6bf:\t48 89 c7             \tmov    %rax,%rdi\n     6c2:\te8 00 00 00 00       \tcallq  6c7 <do_init+0x5f>\n     6c7:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n     6cb:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     6ce:\t48 89 d6             \tmov    %rdx,%rsi\n     6d1:\t89 c7                \tmov    %eax,%edi\n     6d3:\te8 52 fa ff ff       \tcallq  12a <get_msg>\n     6d8:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     6dc:\t48 89 c7             \tmov    %rax,%rdi\n     6df:\te8 00 00 00 00       \tcallq  6e4 <do_init+0x7c>\n     6e4:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     6e7:\t83 7d fc 02          \tcmpl   $0x2,-0x4(%rbp)\n     6eb:\t74 2a                \tje     717 <do_init+0xaf>\n     6ed:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     6f0:\t89 c6                \tmov    %eax,%esi\n     6f2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     6f7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6fc:\te8 00 00 00 00       \tcallq  701 <do_init+0x99>\n     701:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     705:\t48 89 c7             \tmov    %rax,%rdi\n     708:\te8 00 00 00 00       \tcallq  70d <do_init+0xa5>\n     70d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     712:\te9 08 01 00 00       \tjmpq   81f <do_init+0x1b7>\n     717:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     71b:\t48 89 c7             \tmov    %rax,%rdi\n     71e:\te8 00 00 00 00       \tcallq  723 <do_init+0xbb>\n     723:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     726:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     729:\t89 c6                \tmov    %eax,%esi\n     72b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     730:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     735:\te8 00 00 00 00       \tcallq  73a <do_init+0xd2>\n     73a:\teb 58                \tjmp    794 <do_init+0x12c>\n     73c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     740:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     745:\t48 89 c7             \tmov    %rax,%rdi\n     748:\te8 00 00 00 00       \tcallq  74d <do_init+0xe5>\n     74d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     751:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     755:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     75a:\t48 89 c7             \tmov    %rax,%rdi\n     75d:\te8 00 00 00 00       \tcallq  762 <do_init+0xfa>\n     762:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     766:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     76a:\t48 89 c6             \tmov    %rax,%rsi\n     76d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     772:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     777:\te8 00 00 00 00       \tcallq  77c <do_init+0x114>\n     77c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     780:\t48 89 c7             \tmov    %rax,%rdi\n     783:\te8 00 00 00 00       \tcallq  788 <do_init+0x120>\n     788:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     78c:\t48 89 c7             \tmov    %rax,%rdi\n     78f:\te8 00 00 00 00       \tcallq  794 <do_init+0x12c>\n     794:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     798:\t48 89 c7             \tmov    %rax,%rdi\n     79b:\te8 00 00 00 00       \tcallq  7a0 <do_init+0x138>\n     7a0:\t85 c0                \ttest   %eax,%eax\n     7a2:\t75 98                \tjne    73c <do_init+0xd4>\n     7a4:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     7a8:\t48 89 c7             \tmov    %rax,%rdi\n     7ab:\te8 00 00 00 00       \tcallq  7b0 <do_init+0x148>\n     7b0:\tbf 18 00 00 00       \tmov    $0x18,%edi\n     7b5:\te8 00 00 00 00       \tcallq  7ba <do_init+0x152>\n     7ba:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     7be:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7c2:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n     7c5:\t89 10                \tmov    %edx,(%rax)\n     7c7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7cb:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n     7ce:\t89 50 04             \tmov    %edx,0x4(%rax)\n     7d1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7d5:\t8b 55 b4             \tmov    -0x4c(%rbp),%edx\n     7d8:\t89 50 08             \tmov    %edx,0x8(%rax)\n     7db:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7df:\t8b 55 b0             \tmov    -0x50(%rbp),%edx\n     7e2:\t89 50 0c             \tmov    %edx,0xc(%rax)\n     7e5:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n     7e8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7ec:\t89 50 10             \tmov    %edx,0x10(%rax)\n     7ef:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     7f3:\tc7 40 14 01 00 00 00 \tmovl   $0x1,0x14(%rax)\n     7fa:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n     7fe:\t75 1b                \tjne    81b <do_init+0x1b3>\n     800:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     804:\t8b 40 08             \tmov    0x8(%rax),%eax\n     807:\tba 00 50 00 00       \tmov    $0x5000,%edx\n     80c:\t3d 00 50 00 00       \tcmp    $0x5000,%eax\n     811:\t0f 46 d0             \tcmovbe %eax,%edx\n     814:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     818:\t89 50 08             \tmov    %edx,0x8(%rax)\n     81b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     81f:\tc9                   \tleaveq \n     820:\tc3                   \tretq   ", "code_s": "unsigned int *__fastcall do_init(unsigned int a1, unsigned int a2,\n                                 unsigned int a3, unsigned int a4) {\n  const char *v4;\n  unsigned int *result;\n  int v6;\n  char <span class=\"supfact\">v9</span>[Number];\n  __int64 <span class=\"supfact\">v10</span>;\n  const char *<span class=\"supfact\">v11</span>;\n  unsigned int *<span class=\"supfact\">v12</span>;\n  unsigned int <span class=\"supfact\">v13</span>;\n  int <span class=\"supfact\">errnum</span>;\n  buffer_init(<span class=\"supfact\">v9</span>);\n  buffer_put_char(<span class=\"supfact\">v9</span>, Number L);\n  buffer_put_int(<span class=\"supfact\">v9</span>, Number L);\n  send_msg(a2, (__int64)<span class=\"supfact\">v9</span>);\n  buffer_clear(<span class=\"supfact\">v9</span>);\n  get_msg(a1, (__int64)<span class=\"supfact\">v9</span>);\n  <span class=\"supfact\">errnum</span> = buffer_get_char(<span class=\"supfact\">v9</span>);\n  if (<span class=\"supfact\">errnum</span> == Number) {\n    <span class=\"supfact\">v13</span> = buffer_get_int(<span class=\"supfact\">v9</span>);\n    debug2(String, <span class=\"supfact\">v13</span>);\n    while ((unsigned int)buffer_len(<span class=\"supfact\">v9</span>)) {\n      <span class=\"supfact\">v11</span> =\n          (const char *)buffer_get_string(<span class=\"supfact\">v9</span>, Number L);\n      <span class=\"supfact\">v10</span> = buffer_get_string(<span class=\"supfact\">v9</span>, Number L);\n      debug2(String, <span class=\"supfact\">v11</span>);\n      xfree(<span class=\"supfact\">v11</span>);\n      xfree(<span class=\"supfact\">v10</span>);\n    }\n    buffer_free(<span class=\"supfact\">v9</span>);\n    <span class=\"supfact\">v12</span> = (unsigned int *)xmalloc(Number L);\n    *<span class=\"supfact\">v12</span> = a1;\n    <span class=\"supfact\">v12</span>[Number] = a2;\n    <span class=\"supfact\">v12</span>[Number] = a3;\n    <span class=\"supfact\">v12</span>[Number] = a4;\n    <span class=\"supfact\">v12</span>[Number] = <span class=\"supfact\">v13</span>;\n    <span class=\"supfact\">v12</span>[Number] = Number;\n    if (!<span class=\"supfact\">v13</span>) {\n      v6 = Number;\n      if (<span class=\"supfact\">v12</span>[Number] <= Number)\n        v6 = <span class=\"supfact\">v12</span>[Number];\n      <span class=\"supfact\">v12</span>[Number] = v6;\n    }\n    result = <span class=\"supfact\">v12</span>;\n  } else {\n    error((int)String, <span class=\"supfact\">errnum</span>, v4);\n    buffer_free(<span class=\"supfact\">v9</span>);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "sftp_conn *__cdecl do_init(int fd_in, int fd_out, u_int transfer_buflen,\n                           u_int num_requests) {\n  const char *v4;\n  sftp_conn *result;\n  u_int v6;\n  Buffer <span class=\"supfact\">msg</span>;\n  char *<span class=\"supfact\">value</span>;\n  char *<span class=\"supfact\">name</span>;\n  sftp_conn *<span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">version</span>;\n  u_int <span class=\"supfact\">type</span>;\n  buffer_init(&<span class=\"supfact\">msg</span>);\n  buffer_put_char(&<span class=\"supfact\">msg</span>, Number L);\n  buffer_put_int(&<span class=\"supfact\">msg</span>, Number L);\n  send_msg(fd_out, &<span class=\"supfact\">msg</span>);\n  buffer_clear(&<span class=\"supfact\">msg</span>);\n  get_msg(fd_in, &<span class=\"supfact\">msg</span>);\n  <span class=\"supfact\">type</span> = buffer_get_char(&<span class=\"supfact\">msg</span>);\n  if (<span class=\"supfact\">type</span> == Number) {\n    <span class=\"supfact\">version</span> = buffer_get_int(&<span class=\"supfact\">msg</span>);\n    debug2(String, (unsigned int)<span class=\"supfact\">version</span>);\n    while ((unsigned int)buffer_len(&<span class=\"supfact\">msg</span>)) {\n      <span class=\"supfact\">name</span> =\n          (char *)buffer_get_string(&<span class=\"supfact\">msg</span>, Number L);\n      <span class=\"supfact\">value</span> =\n          (char *)buffer_get_string(&<span class=\"supfact\">msg</span>, Number L);\n      debug2(String, <span class=\"supfact\">name</span>);\n      xfree(<span class=\"supfact\">name</span>);\n      xfree(<span class=\"supfact\">value</span>);\n    }\n    buffer_free(&<span class=\"supfact\">msg</span>);\n    <span class=\"supfact\">ret</span> = (sftp_conn *)xmalloc(Number L);\n    <span class=\"supfact\">ret</span>->fd_in = fd_in;\n    <span class=\"supfact\">ret</span>->fd_out = fd_out;\n    <span class=\"supfact\">ret</span>->transfer_buflen = transfer_buflen;\n    <span class=\"supfact\">ret</span>->num_requests = num_requests;\n    <span class=\"supfact\">ret</span>-><span class=\"supfact\">version</span> = <span class=\"supfact\">version</span>;\n    <span class=\"supfact\">ret</span>->msg_id = Number;\n    if (!<span class=\"supfact\">version</span>) {\n      v6 = Number;\n      if (<span class=\"supfact\">ret</span>->transfer_buflen <= Number)\n        v6 = <span class=\"supfact\">ret</span>->transfer_buflen;\n      <span class=\"supfact\">ret</span>->transfer_buflen = v6;\n    }\n    result = <span class=\"supfact\">ret</span>;\n  } else {\n    error((int)String, <span class=\"supfact\">type</span>, v4);\n    buffer_free(&<span class=\"supfact\">msg</span>);\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v9", "type": "struct Buffer { u_char * buf; u_int alloc; u_int offset; u_int end; PADDING (4); }", "ref_name": "msg", "ref_type": "struct Buffer { u_char * buf; u_int alloc; u_int offset; u_int end; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "jordansissel", "repo_name": "tmux", "path": "jordansissel/tmux/8c54c58ec5c6c45af38e829f1a79d944af77d1a77275700b93d321f9e256a16e", "path_in_repo": "jordansissel/tmux/tags/TMUX_1_0/tmux", "objdump": "000000000043a210 <window_scroll_scroll_up>:\n  43a210:\t55                   \tpush   %rbp\n  43a211:\t48 89 e5             \tmov    %rsp,%rbp\n  43a214:\t48 83 ec 30          \tsub    $0x30,%rsp\n  43a218:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  43a21c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  43a220:\t48 8b 80 90 01 00 00 \tmov    0x190(%rax),%rax\n  43a227:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  43a22b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  43a22f:\t8b 50 64             \tmov    0x64(%rax),%edx\n  43a232:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  43a236:\t48 8b 80 28 01 00 00 \tmov    0x128(%rax),%rax\n  43a23d:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  43a240:\t39 c2                \tcmp    %eax,%edx\n  43a242:\t0f 83 8e 00 00 00    \tjae    43a2d6 <window_scroll_scroll_up+0xc6>\n  43a248:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  43a24c:\t8b 40 64             \tmov    0x64(%rax),%eax\n  43a24f:\t8d 50 01             \tlea    0x1(%rax),%edx\n  43a252:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  43a256:\t89 50 64             \tmov    %edx,0x64(%rax)\n  43a259:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  43a25d:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  43a261:\tba 00 00 00 00       \tmov    $0x0,%edx\n  43a266:\t48 89 ce             \tmov    %rcx,%rsi\n  43a269:\t48 89 c7             \tmov    %rax,%rdi\n  43a26c:\te8 b1 7b fe ff       \tcallq  421e22 <screen_write_start>\n  43a271:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  43a275:\tba 00 00 00 00       \tmov    $0x0,%edx\n  43a27a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  43a27f:\t48 89 c7             \tmov    %rax,%rdi\n  43a282:\te8 8f 96 fe ff       \tcallq  423916 <screen_write_cursormove>\n  43a287:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  43a28b:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  43a290:\t48 89 c7             \tmov    %rax,%rdi\n  43a293:\te8 7d 91 fe ff       \tcallq  423415 <screen_write_insertline>\n  43a298:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  43a29c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  43a2a0:\tba 00 00 00 00       \tmov    $0x0,%edx\n  43a2a5:\t48 89 ce             \tmov    %rcx,%rsi\n  43a2a8:\t48 89 c7             \tmov    %rax,%rdi\n  43a2ab:\te8 87 fc ff ff       \tcallq  439f37 <window_scroll_write_line>\n  43a2b0:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  43a2b4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  43a2b8:\tba 01 00 00 00       \tmov    $0x1,%edx\n  43a2bd:\t48 89 ce             \tmov    %rcx,%rsi\n  43a2c0:\t48 89 c7             \tmov    %rax,%rdi\n  43a2c3:\te8 6f fc ff ff       \tcallq  439f37 <window_scroll_write_line>\n  43a2c8:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  43a2cc:\t48 89 c7             \tmov    %rax,%rdi\n  43a2cf:\te8 9c 7b fe ff       \tcallq  421e70 <screen_write_stop>\n  43a2d4:\teb 01                \tjmp    43a2d7 <window_scroll_scroll_up+0xc7>\n  43a2d6:\t90                   \tnop\n  43a2d7:\tc9                   \tleaveq \n  43a2d8:\tc3                   \tretq   ", "code_s": "void __fastcall window_scroll_scroll_up(_QWORD *a1) {\n  _QWORD <span class=\"supfact\">v1</span>[Number];\n  __int64 <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">v2</span> = a1[Number];\n  if (*(_DWORD *)(<span class=\"supfact\">v2</span> + Number) <\n      *(_DWORD *)(a1[Number] + Number L)) {\n    ++*(_DWORD *)(<span class=\"supfact\">v2</span> + Number);\n    screen_write_start(<span class=\"supfact\">v1</span>, (__int64)a1, Number L);\n    screen_write_cursormove((__int64)<span class=\"supfact\">v1</span>, Number, Number);\n    screen_write_insertline(<span class=\"supfact\">v1</span>, Number);\n    window_scroll_write_line(a1, (__int64)<span class=\"supfact\">v1</span>, Number);\n    window_scroll_write_line(a1, (__int64)<span class=\"supfact\">v1</span>, Number);\n    screen_write_stop();\n  }\n}", "code_t": "void __cdecl window_scroll_scroll_up(window_pane *wp) {\n  screen_write_ctx <span class=\"supfact\">ctx</span>;\n  window_scroll_mode_data *<span class=\"supfact\">data</span>;\n  <span class=\"supfact\">data</span> = (window_scroll_mode_data *)wp->modedata;\n  if (<span class=\"supfact\">data</span>->oy < wp->base.grid->hsize) {\n    ++<span class=\"supfact\">data</span>->oy;\n    screen_write_start(&<span class=\"supfact\">ctx</span>, wp, Number L);\n    screen_write_cursormove(&<span class=\"supfact\">ctx</span>, Number, Number);\n    screen_write_insertline(&<span class=\"supfact\">ctx</span>, Number);\n    window_scroll_write_line(wp, &<span class=\"supfact\">ctx</span>, Number);\n    window_scroll_write_line(wp, &<span class=\"supfact\">ctx</span>, Number);\n    screen_write_stop(&<span class=\"supfact\">ctx</span>);\n  }\n}", "var": [{"name": "v1", "type": "struct screen_write_ctx { window_pane * wp; screen * s; }", "ref_name": "ctx", "ref_type": "struct screen_write_ctx { window_pane * wp; screen * s; }"}], "body_in_train": false}, {"repo_owner": "smarabbit", "repo_name": "jscapel", "path": "smarabbit/jscapel/e946b71d7458994475aa6423c805f1207af37eed41582134ad82c91d587d6319", "path_in_repo": "smarabbit/jscapel/decaf/libhw32/9pfs/cofs.o", "objdump": "0000000000000cfb <v9fs_co_symlink>:\n     cfb:\t55                   \tpush   %rbp\n     cfc:\t48 89 e5             \tmov    %rsp,%rbp\n     cff:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n     d03:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n     d07:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n     d0b:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n     d0f:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n     d13:\t44 89 45 8c          \tmov    %r8d,-0x74(%rbp)\n     d17:\t4c 89 4d 80          \tmov    %r9,-0x80(%rbp)\n     d1b:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     d22:\t00 00 \n     d24:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d28:\t31 c0                \txor    %eax,%eax\n     d2a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     d2e:\t48 8b 80 28 a0 00 00 \tmov    0xa028(%rax),%rax\n     d35:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     d39:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     d3d:\t48 89 c7             \tmov    %rax,%rdi\n     d40:\te8 65 f3 ff ff       \tcallq  aa <v9fs_request_cancelled>\n     d45:\t84 c0                \ttest   %al,%al\n     d47:\t74 0a                \tje     d53 <v9fs_co_symlink+0x58>\n     d49:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n     d4e:\te9 53 01 00 00       \tjmpq   ea6 <v9fs_co_symlink+0x1ab>\n     d53:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     d57:\t48 89 c7             \tmov    %rax,%rdi\n     d5a:\te8 00 00 00 00       \tcallq  d5f <v9fs_co_symlink+0x64>\n     d5f:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     d63:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n     d69:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n     d6c:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n     d6f:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     d72:\tc7 45 e8 ff 01 00 00 \tmovl   $0x1ff,-0x18(%rbp)\n     d79:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     d7d:\t48 89 c7             \tmov    %rax,%rdi\n     d80:\te8 7b f2 ff ff       \tcallq  0 <v9fs_path_read_lock>\n     d85:\te8 00 00 00 00       \tcallq  d8a <v9fs_co_symlink+0x8f>\n     d8a:\t48 89 c6             \tmov    %rax,%rsi\n     d8d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d94 <v9fs_co_symlink+0x99>\n     d94:\t48 89 c7             \tmov    %rax,%rdi\n     d97:\te8 00 00 00 00       \tcallq  d9c <v9fs_co_symlink+0xa1>\n     d9c:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     da0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     da4:\t48 89 c7             \tmov    %rax,%rdi\n     da7:\te8 00 00 00 00       \tcallq  dac <v9fs_co_symlink+0xb1>\n     dac:\te8 00 00 00 00       \tcallq  db1 <v9fs_co_symlink+0xb6>\n     db1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     db5:\t48 89 c7             \tmov    %rax,%rdi\n     db8:\te8 00 00 00 00       \tcallq  dbd <v9fs_co_symlink+0xc2>\n     dbd:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     dc1:\t48 8b 80 a8 20 50 00 \tmov    0x5020a8(%rax),%rax\n     dc8:\t4c 8b 48 40          \tmov    0x40(%rax),%r9\n     dcc:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     dd0:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     dd4:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     dd8:\t48 8d 70 08          \tlea    0x8(%rax),%rsi\n     ddc:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     de0:\t48 8d b8 b0 20 50 00 \tlea    0x5020b0(%rax),%rdi\n     de7:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n     deb:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n     def:\t49 89 c8             \tmov    %rcx,%r8\n     df2:\t48 89 d1             \tmov    %rdx,%rcx\n     df5:\t48 89 f2             \tmov    %rsi,%rdx\n     df8:\t48 89 c6             \tmov    %rax,%rsi\n     dfb:\t41 ff d1             \tcallq  *%r9\n     dfe:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n     e01:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n     e05:\t79 0e                \tjns    e15 <v9fs_co_symlink+0x11a>\n     e07:\te8 00 00 00 00       \tcallq  e0c <v9fs_co_symlink+0x111>\n     e0c:\t8b 00                \tmov    (%rax),%eax\n     e0e:\tf7 d8                \tneg    %eax\n     e10:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n     e13:\teb 7d                \tjmp    e92 <v9fs_co_symlink+0x197>\n     e15:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     e19:\t48 89 c7             \tmov    %rax,%rdi\n     e1c:\te8 00 00 00 00       \tcallq  e21 <v9fs_co_symlink+0x126>\n     e21:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     e25:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     e29:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     e2d:\t48 8d 70 08          \tlea    0x8(%rax),%rsi\n     e31:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n     e35:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     e39:\t48 89 c7             \tmov    %rax,%rdi\n     e3c:\te8 00 00 00 00       \tcallq  e41 <v9fs_co_symlink+0x146>\n     e41:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n     e44:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n     e48:\t75 3c                \tjne    e86 <v9fs_co_symlink+0x18b>\n     e4a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     e4e:\t48 8b 80 a8 20 50 00 \tmov    0x5020a8(%rax),%rax\n     e55:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n     e59:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     e5d:\t48 8d b8 b0 20 50 00 \tlea    0x5020b0(%rax),%rdi\n     e64:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n     e68:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     e6c:\t48 89 c6             \tmov    %rax,%rsi\n     e6f:\tff d1                \tcallq  *%rcx\n     e71:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n     e74:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n     e78:\t79 0c                \tjns    e86 <v9fs_co_symlink+0x18b>\n     e7a:\te8 00 00 00 00       \tcallq  e7f <v9fs_co_symlink+0x184>\n     e7f:\t8b 00                \tmov    (%rax),%eax\n     e81:\tf7 d8                \tneg    %eax\n     e83:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n     e86:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     e8a:\t48 89 c7             \tmov    %rax,%rdi\n     e8d:\te8 00 00 00 00       \tcallq  e92 <v9fs_co_symlink+0x197>\n     e92:\te8 00 00 00 00       \tcallq  e97 <v9fs_co_symlink+0x19c>\n     e97:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     e9b:\t48 89 c7             \tmov    %rax,%rdi\n     e9e:\te8 b2 f1 ff ff       \tcallq  55 <v9fs_path_unlock>\n     ea3:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     ea6:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     eaa:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     eb1:\t00 00 \n     eb3:\t74 05                \tje     eba <v9fs_co_symlink+0x1bf>\n     eb5:\te8 00 00 00 00       \tcallq  eba <v9fs_co_symlink+0x1bf>\n     eba:\tc9                   \tleaveq \n     ebb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall v9fs_co_symlink(__int64 a1, __int64 a2, __int64 a3,\n                                   __int64 a4, int a5, __int64 a6) {\n  __int64 v7;\n  __int64 v8;\n  int <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>;\n  char <span class=\"supfact\">v16</span>[Number];\n  int <span class=\"supfact\">v17</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v18</span>;\n  <span class=\"supfact\">v18</span> = __readfsqword(Number);\n  <span class=\"supfact\">v15</span> = *(_QWORD *)(a1 + Number);\n  if ((unsigned __int8)v9fs_request_cancelled(a1))\n    return Number L;\n  cred_init(<span class=\"supfact\">v17</span>);\n  <span class=\"supfact\">v17</span>[Number] = *(_DWORD *)(a2 + Number);\n  <span class=\"supfact\">v17</span>[Number] = a5;\n  <span class=\"supfact\">v17</span>[Number] = Number;\n  v9fs_path_read_lock(<span class=\"supfact\">v15</span>);\n  v7 = qemu_coroutine_self();\n  v8 = qemu_bh_new(&co_run_in_worker_bh, v7);\n  qemu_bh_schedule(v8);\n  qemu_coroutine_yield();\n  qemu_bh_delete(v8);\n  if ((*(int(__fastcall **)(__int64, __int64, __int64, _QWORD, int *))(\n          *(_QWORD *)(<span class=\"supfact\">v15</span> + Number) + Number L))(\n          <span class=\"supfact\">v15</span> + Number, a4, a2 + Number,\n          *(_QWORD *)(a3 + Number), <span class=\"supfact\">v17</span>) >= Number) {\n    v9fs_path_init(<span class=\"supfact\">v16</span>);\n    <span class=\"supfact\">v14</span> =\n        v9fs_name_to_path(<span class=\"supfact\">v15</span>, a2 + Number,\n                          *(_QWORD *)(a3 + Number), <span class=\"supfact\">v16</span>);\n    if (!<span class=\"supfact\">v14</span>) {\n      <span class=\"supfact\">v14</span> =\n          (*(__int64(__fastcall **)(__int64, char *, __int64))(\n              *(_QWORD *)(<span class=\"supfact\">v15</span> + Number) + Number L))(\n              <span class=\"supfact\">v15</span> + Number, <span class=\"supfact\">v16</span>, a6);\n      if (<span class=\"supfact\">v14</span> < Number)\n        <span class=\"supfact\">v14</span> = -*_errno_location();\n    }\n    v9fs_path_free(<span class=\"supfact\">v16</span>);\n  } else {\n    <span class=\"supfact\">v14</span> = -*_errno_location();\n  }\n  qemu_coroutine_yield();\n  v9fs_path_unlock(<span class=\"supfact\">v15</span>);\n  return (unsigned int)<span class=\"supfact\">v14</span>;\n}", "code_t": "int __cdecl v9fs_co_symlink(V9fsPDU_0 *pdu, V9fsFidState_0 *dfidp,\n                            V9fsString_0 *name, const char *oldpath, gid_t gid,\n                            stat *stbuf) {\n  __int64 v7;\n  __int64 v8;\n  int <span class=\"supfact\">err</span>;\n  V9fsState *<span class=\"supfact\">s</span>;\n  V9fsPath_0 <span class=\"supfact\">path</span>;\n  FsCred_0 <span class=\"supfact\">cred</span>;\n  unsigned __int64 <span class=\"supfact\">v18</span>;\n  <span class=\"supfact\">v18</span> = __readfsqword(Number);\n  <span class=\"supfact\">s</span> = pdu-><span class=\"supfact\">s</span>;\n  if (v9fs_request_cancelled(pdu))\n    return Number;\n  cred_init(&<span class=\"supfact\">cred</span>);\n  <span class=\"supfact\">cred</span>.fc_uid = dfidp->uid;\n  <span class=\"supfact\">cred</span>.fc_gid = gid;\n  <span class=\"supfact\">cred</span>.fc_mode = Number;\n  v9fs_path_read_lock(<span class=\"supfact\">s</span>);\n  v7 = qemu_coroutine_self();\n  v8 = qemu_bh_new(&co_run_in_worker_bh, v7);\n  qemu_bh_schedule(v8);\n  qemu_coroutine_yield();\n  qemu_bh_delete(v8);\n  if (<span class=\"supfact\">s</span>->ops->symlink(&<span class=\"supfact\">s</span>->ctx, oldpath,\n                                      &dfidp-><span class=\"supfact\">path</span>, name->data,\n                                      &<span class=\"supfact\">cred</span>) >= Number) {\n    v9fs_path_init(&<span class=\"supfact\">path</span>);\n    <span class=\"supfact\">err</span> =\n        v9fs_name_to_path(<span class=\"supfact\">s</span>, &dfidp-><span class=\"supfact\">path</span>,\n                          name->data, &<span class=\"supfact\">path</span>);\n    if (!<span class=\"supfact\">err</span>) {\n      <span class=\"supfact\">err</span> = <span class=\"supfact\">s</span>->ops->lstat(\n          &<span class=\"supfact\">s</span>->ctx, &<span class=\"supfact\">path</span>, stbuf);\n      if (<span class=\"supfact\">err</span> < Number)\n        <span class=\"supfact\">err</span> = -*_errno_location();\n    }\n    v9fs_path_free(&<span class=\"supfact\">path</span>);\n  } else {\n    <span class=\"supfact\">err</span> = -*_errno_location();\n  }\n  qemu_coroutine_yield();\n  v9fs_path_unlock(<span class=\"supfact\">s</span>);\n  return <span class=\"supfact\">err</span>;\n}", "var": [{"name": "v17", "type": "struct FsCred_0 { uid_t fc_uid; gid_t fc_gid; mode_t fc_mode; PADDING (4); dev_t fc_rdev; }", "ref_name": "cred", "ref_type": "struct FsCred_0 { uid_t fc_uid; gid_t fc_gid; mode_t fc_mode; PADDING (4); dev_t fc_rdev; }"}], "body_in_train": false}, {"repo_owner": "apenwarr", "repo_name": "dropdyn", "path": "apenwarr/dropdyn/cad4d894d31910031eaf8740339a01da3fea7f56a6482f68040ba118749cdd2f", "path_in_repo": "apenwarr/dropdyn/djbdns/dnsqr", "objdump": "", "code_s": "int __fastcall sub_40645C(int a1, __int64 a2, unsigned __int16 a3) {\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  sub_40688C(&<span class=\"supfact\">addr</span>, Number L);\n  <span class=\"supfact\">addr</span>.sa_family = Number;\n  sub_406CDF(<span class=\"supfact\">addr</span>.sa_data, a3);\n  sub_406757(&<span class=\"supfact\">addr</span>.sa_data[Number], Number L, a2);\n  return bind(a1, &<span class=\"supfact\">addr</span>, Number);\n}", "code_t": "int __fastcall sub_40645C(int a1, __int64 a2, unsigned __int16 a3) {\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  sub_40688C(&<span class=\"supfact\">addr</span>, Number L);\n  <span class=\"supfact\">addr</span>.sa_family = Number;\n  sub_406CDF(<span class=\"supfact\">addr</span>.sa_data, a3);\n  sub_406757(&<span class=\"supfact\">addr</span>.sa_data[Number], Number L, a2);\n  return bind(a1, &<span class=\"supfact\">addr</span>, Number);\n}", "var": [{"name": "addr", "type": "struct struct sockaddr { sa_family_t sa_family; char[14] sa_data; }", "ref_name": "addr", "ref_type": "struct struct sockaddr { sa_family_t sa_family; char[14] sa_data; }"}], "body_in_train": false}, {"repo_owner": "zturtleman", "repo_name": "oaunofficial", "path": "zturtleman/oaunofficial/9c4c08c2cc3c9f726f73a22aa7d1edb77ec3f76c48d6c764c3d0f40ef5afac65", "path_in_repo": "zturtleman/oaunofficial//build/release-linux-x86_64/baseq3/cgame/cg_ents.o", "objdump": "0000000000002d20 <CG_TeamBase>:\n    2d20:\t48 81 ec a8 00 00 00 \tsub    $0xa8,%rsp\n    2d27:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    2d2c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2d33 <CG_TeamBase+0x13>\n    2d33:\t8b 80 e0 7a 00 00    \tmov    0x7ae0(%rax),%eax\n    2d39:\t83 f8 04             \tcmp    $0x4,%eax\n    2d3c:\t0f 85 12 01 00 00    \tjne    2e54 <CG_TeamBase+0x134>\n    2d42:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n    2d47:\tba 8c 00 00 00       \tmov    $0x8c,%edx\n    2d4c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2d51:\t48 89 c7             \tmov    %rax,%rdi\n    2d54:\te8 00 00 00 00       \tcallq  2d59 <CG_TeamBase+0x39>\n    2d59:\tc7 44 24 10 00 00 00 \tmovl   $0x0,0x10(%rsp)\n    2d60:\t00 \n    2d61:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2d66:\tf3 0f 10 80 dc 02 00 \tmovss  0x2dc(%rax),%xmm0\n    2d6d:\t00 \n    2d6e:\tf3 0f 11 44 24 1c    \tmovss  %xmm0,0x1c(%rsp)\n    2d74:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2d79:\tf3 0f 10 80 e0 02 00 \tmovss  0x2e0(%rax),%xmm0\n    2d80:\t00 \n    2d81:\tf3 0f 11 44 24 20    \tmovss  %xmm0,0x20(%rsp)\n    2d87:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2d8c:\tf3 0f 10 80 e4 02 00 \tmovss  0x2e4(%rax),%xmm0\n    2d93:\t00 \n    2d94:\tf3 0f 11 44 24 24    \tmovss  %xmm0,0x24(%rsp)\n    2d9a:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2d9f:\tf3 0f 10 80 dc 02 00 \tmovss  0x2dc(%rax),%xmm0\n    2da6:\t00 \n    2da7:\tf3 0f 11 44 24 54    \tmovss  %xmm0,0x54(%rsp)\n    2dad:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2db2:\tf3 0f 10 80 e0 02 00 \tmovss  0x2e0(%rax),%xmm0\n    2db9:\t00 \n    2dba:\tf3 0f 11 44 24 58    \tmovss  %xmm0,0x58(%rsp)\n    2dc0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2dc5:\tf3 0f 10 80 e4 02 00 \tmovss  0x2e4(%rax),%xmm0\n    2dcc:\t00 \n    2dcd:\tf3 0f 11 44 24 5c    \tmovss  %xmm0,0x5c(%rsp)\n    2dd3:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2dd8:\t48 83 c0 74          \tadd    $0x74,%rax\n    2ddc:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n    2de1:\t48 83 c2 1c          \tadd    $0x1c,%rdx\n    2de5:\t48 89 d6             \tmov    %rdx,%rsi\n    2de8:\t48 89 c7             \tmov    %rax,%rdi\n    2deb:\te8 00 00 00 00       \tcallq  2df0 <CG_TeamBase+0xd0>\n    2df0:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2df5:\t8b 80 a0 00 00 00    \tmov    0xa0(%rax),%eax\n    2dfb:\t83 f8 01             \tcmp    $0x1,%eax\n    2dfe:\t75 13                \tjne    2e13 <CG_TeamBase+0xf3>\n    2e00:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2e07 <CG_TeamBase+0xe7>\n    2e07:\t8b 80 54 b9 02 00    \tmov    0x2b954(%rax),%eax\n    2e0d:\t89 44 24 18          \tmov    %eax,0x18(%rsp)\n    2e11:\teb 34                \tjmp    2e47 <CG_TeamBase+0x127>\n    2e13:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    2e18:\t8b 80 a0 00 00 00    \tmov    0xa0(%rax),%eax\n    2e1e:\t83 f8 02             \tcmp    $0x2,%eax\n    2e21:\t75 13                \tjne    2e36 <CG_TeamBase+0x116>\n    2e23:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2e2a <CG_TeamBase+0x10a>\n    2e2a:\t8b 80 58 b9 02 00    \tmov    0x2b958(%rax),%eax\n    2e30:\t89 44 24 18          \tmov    %eax,0x18(%rsp)\n    2e34:\teb 11                \tjmp    2e47 <CG_TeamBase+0x127>\n    2e36:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2e3d <CG_TeamBase+0x11d>\n    2e3d:\t8b 80 5c b9 02 00    \tmov    0x2b95c(%rax),%eax\n    2e43:\t89 44 24 18          \tmov    %eax,0x18(%rsp)\n    2e47:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n    2e4c:\t48 89 c7             \tmov    %rax,%rdi\n    2e4f:\te8 00 00 00 00       \tcallq  2e54 <CG_TeamBase+0x134>\n    2e54:\t90                   \tnop\n    2e55:\t48 81 c4 a8 00 00 00 \tadd    $0xa8,%rsp\n    2e5c:\tc3                   \tretq   \n    2e5d:\t90                   \tnop", "code_s": "__int64 __fastcall CG_TeamBase(_DWORD *a1) {\n  __int64 result;\n  int <span class=\"supfact\">s</span>[Number];\n  result = cgs[Number];\n  if ((_DWORD)result == Number) {\n    memset(<span class=\"supfact\">s</span>, Number, Number);\n    <span class=\"supfact\">s</span>[Number] = Number;\n    <span class=\"supfact\">s</span>[Number] = a1[Number];\n    <span class=\"supfact\">s</span>[Number] = a1[Number];\n    <span class=\"supfact\">s</span>[Number] = a1[Number];\n    <span class=\"supfact\">s</span>[Number] = a1[Number];\n    <span class=\"supfact\">s</span>[Number] = a1[Number];\n    <span class=\"supfact\">s</span>[Number] = a1[Number];\n    AnglesToAxis(a1 + Number, &<span class=\"supfact\">s</span>[Number]);\n    if (a1[Number] == Number) {\n      <span class=\"supfact\">s</span>[Number] = cgs[Number];\n    } else if (a1[Number] == Number) {\n      <span class=\"supfact\">s</span>[Number] = cgs[Number];\n    } else {\n      <span class=\"supfact\">s</span>[Number] = cgs[Number];\n    }\n    result = trap_R_AddRefEntityToScene(<span class=\"supfact\">s</span>);\n  }\n  return result;\n}", "code_t": "void __cdecl CG_TeamBase(centity_t *cent) {\n  refEntity_t <span class=\"supfact\">model</span>;\n  if (cgs[Number] == Number) {\n    memset(&<span class=\"supfact\">model</span>, Number, sizeof(<span class=\"supfact\">model</span>));\n    <span class=\"supfact\">model</span>.reType = RT_MODEL;\n    <span class=\"supfact\">model</span>.lightingOrigin[Number] = cent->lerpOrigin[Number];\n    <span class=\"supfact\">model</span>.lightingOrigin[Number] = cent->lerpOrigin[Number];\n    <span class=\"supfact\">model</span>.lightingOrigin[Number] = cent->lerpOrigin[Number];\n    <span class=\"supfact\">model</span>.origin[Number] = cent->lerpOrigin[Number];\n    <span class=\"supfact\">model</span>.origin[Number] = cent->lerpOrigin[Number];\n    <span class=\"supfact\">model</span>.origin[Number] = cent->lerpOrigin[Number];\n    AnglesToAxis(cent->currentState.angles, <span class=\"supfact\">model</span>.axis);\n    if (cent->currentState.modelindex == Number) {\n      <span class=\"supfact\">model</span>.hModel = cgs[Number];\n    } else if (cent->currentState.modelindex == Number) {\n      <span class=\"supfact\">model</span>.hModel = cgs[Number];\n    } else {\n      <span class=\"supfact\">model</span>.hModel = cgs[Number];\n    }\n    trap_R_AddRefEntityToScene(&<span class=\"supfact\">model</span>);\n  }\n}", "var": [{"name": "s", "type": "struct refEntity_t { refEntityType_t reType; int renderfx; qhandle_t hModel; vec3_t lightingOrigin; float shadowPlane; vec_t[3][3] axis; qboolean nonNormalizedAxes; float[3] origin; int frame; float[3] oldorigin; int oldframe; float backlerp; int skinNum; qhandle_t customSkin; qhandle_t customShader; byte[4] shaderRGBA; float[2] shaderTexCoord; float shaderTime; float radius; float rotation; }", "ref_name": "model", "ref_type": "struct refEntity_t { refEntityType_t reType; int renderfx; qhandle_t hModel; vec3_t lightingOrigin; float shadowPlane; vec_t[3][3] axis; qboolean nonNormalizedAxes; float[3] origin; int frame; float[3] oldorigin; int oldframe; float backlerp; int skinNum; qhandle_t customSkin; qhandle_t customShader; byte[4] shaderRGBA; float[2] shaderTexCoord; float shaderTime; float radius; float rotation; }"}], "body_in_train": false}, {"repo_owner": "daydaygit", "repo_name": "flrelse", "path": "daydaygit/flrelse/6c685802310efa5348086daf0df3e670342f8ab6f5c20e25c9fc55592c31a3de", "path_in_repo": "daydaygit/flrelse/linux-3.0.1/yaffs2/utils/mkyaffs2image", "objdump": "0000000000402745 <main>:\n  402745:\t55                   \tpush   %rbp\n  402746:\t48 89 e5             \tmov    %rsp,%rbp\n  402749:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  402750:\t89 bd 6c ff ff ff    \tmov    %edi,-0x94(%rbp)\n  402756:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n  40275d:\tbf 20 41 40 00       \tmov    $0x404120,%edi\n  402762:\te8 f9 e8 ff ff       \tcallq  401060 <puts@plt>\n  402767:\t83 bd 6c ff ff ff 02 \tcmpl   $0x2,-0x94(%rbp)\n  40276e:\t7f 32                \tjg     4027a2 <main+0x5d>\n  402770:\tbf 60 41 40 00       \tmov    $0x404160,%edi\n  402775:\te8 e6 e8 ff ff       \tcallq  401060 <puts@plt>\n  40277a:\tbf 90 41 40 00       \tmov    $0x404190,%edi\n  40277f:\te8 dc e8 ff ff       \tcallq  401060 <puts@plt>\n  402784:\tbf d0 41 40 00       \tmov    $0x4041d0,%edi\n  402789:\te8 d2 e8 ff ff       \tcallq  401060 <puts@plt>\n  40278e:\tbf 08 42 40 00       \tmov    $0x404208,%edi\n  402793:\te8 c8 e8 ff ff       \tcallq  401060 <puts@plt>\n  402798:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40279d:\te8 fe e9 ff ff       \tcallq  4011a0 <exit@plt>\n  4027a2:\t83 bd 6c ff ff ff 04 \tcmpl   $0x4,-0x94(%rbp)\n  4027a9:\t75 2e                \tjne    4027d9 <main+0x94>\n  4027ab:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4027b2:\t48 83 c0 18          \tadd    $0x18,%rax\n  4027b6:\t48 8b 00             \tmov    (%rax),%rax\n  4027b9:\tba 07 00 00 00       \tmov    $0x7,%edx\n  4027be:\tbe 56 42 40 00       \tmov    $0x404256,%esi\n  4027c3:\t48 89 c7             \tmov    %rax,%rdi\n  4027c6:\te8 75 e8 ff ff       \tcallq  401040 <strncmp@plt>\n  4027cb:\t85 c0                \ttest   %eax,%eax\n  4027cd:\t75 0a                \tjne    4027d9 <main+0x94>\n  4027cf:\tc7 05 7f 6f 6e 01 01 \tmovl   $0x1,0x16e6f7f(%rip)        # 1ae9758 <convert_endian>\n  4027d6:\t00 00 00 \n  4027d9:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4027e0:\t48 83 c0 08          \tadd    $0x8,%rax\n  4027e4:\t48 8b 00             \tmov    (%rax),%rax\n  4027e7:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  4027ee:\t48 89 d6             \tmov    %rdx,%rsi\n  4027f1:\t48 89 c7             \tmov    %rax,%rdi\n  4027f4:\te8 17 0c 00 00       \tcallq  403410 <__stat>\n  4027f9:\t85 c0                \ttest   %eax,%eax\n  4027fb:\t79 2a                \tjns    402827 <main+0xe2>\n  4027fd:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  402804:\t48 83 c0 08          \tadd    $0x8,%rax\n  402808:\t48 8b 00             \tmov    (%rax),%rax\n  40280b:\t48 89 c6             \tmov    %rax,%rsi\n  40280e:\tbf 5e 42 40 00       \tmov    $0x40425e,%edi\n  402813:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402818:\te8 b3 e8 ff ff       \tcallq  4010d0 <printf@plt>\n  40281d:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402822:\te8 79 e9 ff ff       \tcallq  4011a0 <exit@plt>\n  402827:\t8b 45 88             \tmov    -0x78(%rbp),%eax\n  40282a:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  40282f:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n  402834:\t74 2a                \tje     402860 <main+0x11b>\n  402836:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  40283d:\t48 83 c0 08          \tadd    $0x8,%rax\n  402841:\t48 8b 00             \tmov    (%rax),%rax\n  402844:\t48 89 c6             \tmov    %rax,%rsi\n  402847:\tbf 71 42 40 00       \tmov    $0x404271,%edi\n  40284c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402851:\te8 7a e8 ff ff       \tcallq  4010d0 <printf@plt>\n  402856:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40285b:\te8 40 e9 ff ff       \tcallq  4011a0 <exit@plt>\n  402860:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  402867:\t48 83 c0 10          \tadd    $0x10,%rax\n  40286b:\t48 8b 00             \tmov    (%rax),%rax\n  40286e:\tba 80 01 00 00       \tmov    $0x180,%edx\n  402873:\tbe 41 02 00 00       \tmov    $0x241,%esi\n  402878:\t48 89 c7             \tmov    %rax,%rdi\n  40287b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402880:\te8 fb e8 ff ff       \tcallq  401180 <open@plt>\n  402885:\t89 05 c1 6e 6e 01    \tmov    %eax,0x16e6ec1(%rip)        # 1ae974c <outFile>\n  40288b:\t8b 05 bb 6e 6e 01    \tmov    0x16e6ebb(%rip),%eax        # 1ae974c <outFile>\n  402891:\t85 c0                \ttest   %eax,%eax\n  402893:\t79 2a                \tjns    4028bf <main+0x17a>\n  402895:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  40289c:\t48 83 c0 10          \tadd    $0x10,%rax\n  4028a0:\t48 8b 00             \tmov    (%rax),%rax\n  4028a3:\t48 89 c6             \tmov    %rax,%rsi\n  4028a6:\tbf 90 42 40 00       \tmov    $0x404290,%edi\n  4028ab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4028b0:\te8 1b e8 ff ff       \tcallq  4010d0 <printf@plt>\n  4028b5:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4028ba:\te8 e1 e8 ff ff       \tcallq  4011a0 <exit@plt>\n  4028bf:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4028c6:\t48 83 c0 10          \tadd    $0x10,%rax\n  4028ca:\t48 8b 10             \tmov    (%rax),%rdx\n  4028cd:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4028d4:\t48 83 c0 08          \tadd    $0x8,%rax\n  4028d8:\t48 8b 00             \tmov    (%rax),%rax\n  4028db:\t48 89 c6             \tmov    %rax,%rsi\n  4028de:\tbf b0 42 40 00       \tmov    $0x4042b0,%edi\n  4028e3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4028e8:\te8 e3 e7 ff ff       \tcallq  4010d0 <printf@plt>\n  4028ed:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4028f4:\t48 83 c0 08          \tadd    $0x8,%rax\n  4028f8:\t48 8b 00             \tmov    (%rax),%rax\n  4028fb:\t48 89 c6             \tmov    %rax,%rsi\n  4028fe:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402903:\te8 b2 f7 ff ff       \tcallq  4020ba <process_directory>\n  402908:\te8 27 f7 ff ff       \tcallq  402034 <pad_image>\n  40290d:\t8b 05 39 6e 6e 01    \tmov    0x16e6e39(%rip),%eax        # 1ae974c <outFile>\n  402913:\t89 c7                \tmov    %eax,%edi\n  402915:\te8 e6 e7 ff ff       \tcallq  401100 <close@plt>\n  40291a:\t8b 05 30 6e 6e 01    \tmov    0x16e6e30(%rip),%eax        # 1ae9750 <error>\n  402920:\t85 c0                \ttest   %eax,%eax\n  402922:\t74 19                \tje     40293d <main+0x1f8>\n  402924:\te8 07 e7 ff ff       \tcallq  401030 <__errno_location@plt>\n  402929:\t8b 15 25 6e 6e 01    \tmov    0x16e6e25(%rip),%edx        # 1ae9754 <savedErrno>\n  40292f:\t89 10                \tmov    %edx,(%rax)\n  402931:\tbf dc 42 40 00       \tmov    $0x4042dc,%edi\n  402936:\te8 55 e8 ff ff       \tcallq  401190 <perror@plt>\n  40293b:\teb 23                \tjmp    402960 <main+0x21b>\n  40293d:\t8b 0d 05 6e 6e 01    \tmov    0x16e6e05(%rip),%ecx        # 1ae9748 <nPages>\n  402943:\t8b 15 fb 6d 6e 01    \tmov    0x16e6dfb(%rip),%edx        # 1ae9744 <nDirectories>\n  402949:\t8b 05 f1 6d 6e 01    \tmov    0x16e6df1(%rip),%eax        # 1ae9740 <n_obj>\n  40294f:\t89 c6                \tmov    %eax,%esi\n  402951:\tbf f8 42 40 00       \tmov    $0x4042f8,%edi\n  402956:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40295b:\te8 70 e7 ff ff       \tcallq  4010d0 <printf@plt>\n  402960:\t8b 05 ea 6d 6e 01    \tmov    0x16e6dea(%rip),%eax        # 1ae9750 <error>\n  402966:\t89 c7                \tmov    %eax,%edi\n  402968:\te8 33 e8 ff ff       \tcallq  4011a0 <exit@plt>", "code_s": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  struct stat <span class=\"supfact\">v3</span>;\n  puts(String);\n  if (argc <= Number) {\n    puts(String);\n    puts(String);\n    puts(String);\n    puts(String);\n    exit(Number);\n  }\n  if (argc == Number && !strncmp(argv[Number], String, Number))\n    convert_endian = Number;\n  if ((int)stat((char *)argv[Number], &<span class=\"supfact\">v3</span>) < Number) {\n    printf(String, argv[Number]);\n    exit(Number);\n  }\n  if ((<span class=\"supfact\">v3</span>.st_mode & Number) != Number) {\n    printf(String, argv[Number]);\n    exit(Number);\n  }\n  outFile = open(argv[Number], Number, Number L);\n  if (outFile < Number) {\n    printf(String, argv[Number]);\n    exit(Number);\n  }\n  printf(String, argv[Number], argv[Number]);\n  process_directory(Number, argv[Number]);\n  pad_image();\n  close(outFile);\n  if (error) {\n    *__errno_location() = savedErrno;\n    perror(String);\n  } else {\n    printf(String, (unsigned int)n_obj, (unsigned int)nDirectories,\n           (unsigned int)nPages);\n  }\n  exit(error);\n}", "code_t": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  stat <span class=\"supfact\">stats</span>;\n  puts(String);\n  if (argc <= Number) {\n    puts(String);\n    puts(String);\n    puts(String);\n    puts(String);\n    exit(Number);\n  }\n  if (argc == Number && !strncmp(argv[Number], String, Number))\n    convert_endian = Number;\n  if ((int)stat_0((char *)argv[Number], &<span class=\"supfact\">stats</span>) < Number) {\n    printf(String, argv[Number]);\n    exit(Number);\n  }\n  if ((<span class=\"supfact\">stats</span>.st_mode & Number) != Number) {\n    printf(String, argv[Number]);\n    exit(Number);\n  }\n  outFile = open(argv[Number], Number, Number L);\n  if (outFile < Number) {\n    printf(String, argv[Number]);\n    exit(Number);\n  }\n  printf(String, argv[Number], argv[Number]);\n  process_directory(Number, argv[Number]);\n  pad_image();\n  close(outFile);\n  if (error) {\n    *__errno_location() = savedErrno;\n    perror(String);\n  } else {\n    printf(String, (unsigned int)n_obj, (unsigned int)nDirectories,\n           (unsigned int)nPages);\n  }\n  exit(error);\n}", "var": [{"name": "v3", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "stats", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "qhan1028", "repo_name": "System-Programming", "path": "qhan1028/System-Programming/6464a3b0d1fe9f7792638fb2714f141e7945fb44957e26987f7fadb3c96d0c3b", "path_in_repo": "qhan1028/System-Programming/SP15MP3/src/connect.o", "objdump": "0000000000000104 <connect_to>:\n 104:\t55                   \tpush   %rbp\n 105:\t48 89 e5             \tmov    %rsp,%rbp\n 108:\t48 83 ec 30          \tsub    $0x30,%rsp\n 10c:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 110:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n 113:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 11a:\t00 \n 11b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 11f:\t48 89 c7             \tmov    %rax,%rdi\n 122:\te8 00 00 00 00       \tcallq  127 <connect_to+0x23>\n 127:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 12b:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 130:\t75 28                \tjne    15a <connect_to+0x56>\n 132:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 139 <connect_to+0x35>\n 139:\t48 89 c1             \tmov    %rax,%rcx\n 13c:\tba 19 00 00 00       \tmov    $0x19,%edx\n 141:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 146:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 14b:\te8 00 00 00 00       \tcallq  150 <connect_to+0x4c>\n 150:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 155:\te9 e6 00 00 00       \tjmpq   240 <connect_to+0x13c>\n 15a:\tba 00 00 00 00       \tmov    $0x0,%edx\n 15f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 164:\tbf 02 00 00 00       \tmov    $0x2,%edi\n 169:\te8 00 00 00 00       \tcallq  16e <connect_to+0x6a>\n 16e:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 171:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 175:\t79 28                \tjns    19f <connect_to+0x9b>\n 177:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 17e <connect_to+0x7a>\n 17e:\t48 89 c1             \tmov    %rax,%rcx\n 181:\tba 12 00 00 00       \tmov    $0x12,%edx\n 186:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 18b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 190:\te8 00 00 00 00       \tcallq  195 <connect_to+0x91>\n 195:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 19a:\te9 a1 00 00 00       \tjmpq   240 <connect_to+0x13c>\n 19f:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 1a3:\tba 10 00 00 00       \tmov    $0x10,%edx\n 1a8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1ad:\t48 89 c7             \tmov    %rax,%rdi\n 1b0:\te8 00 00 00 00       \tcallq  1b5 <connect_to+0xb1>\n 1b5:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n 1bb:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 1be:\t0f b7 c0             \tmovzwl %ax,%eax\n 1c1:\t89 c7                \tmov    %eax,%edi\n 1c3:\te8 00 00 00 00       \tcallq  1c8 <connect_to+0xc4>\n 1c8:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n 1cc:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1d0:\t8b 40 14             \tmov    0x14(%rax),%eax\n 1d3:\t48 63 d0             \tmovslq %eax,%rdx\n 1d6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 1da:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 1de:\t48 8b 00             \tmov    (%rax),%rax\n 1e1:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n 1e5:\t48 83 c1 04          \tadd    $0x4,%rcx\n 1e9:\t48 89 c6             \tmov    %rax,%rsi\n 1ec:\t48 89 cf             \tmov    %rcx,%rdi\n 1ef:\te8 00 00 00 00       \tcallq  1f4 <connect_to+0xf0>\n 1f4:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n 1f8:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 1fb:\tba 10 00 00 00       \tmov    $0x10,%edx\n 200:\t48 89 ce             \tmov    %rcx,%rsi\n 203:\t89 c7                \tmov    %eax,%edi\n 205:\te8 00 00 00 00       \tcallq  20a <connect_to+0x106>\n 20a:\t85 c0                \ttest   %eax,%eax\n 20c:\t79 2f                \tjns    23d <connect_to+0x139>\n 20e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 215 <connect_to+0x111>\n 215:\t48 89 c1             \tmov    %rax,%rcx\n 218:\tba 15 00 00 00       \tmov    $0x15,%edx\n 21d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 222:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 227:\te8 00 00 00 00       \tcallq  22c <connect_to+0x128>\n 22c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 22f:\t89 c7                \tmov    %eax,%edi\n 231:\te8 00 00 00 00       \tcallq  236 <connect_to+0x132>\n 236:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 23b:\teb 03                \tjmp    240 <connect_to+0x13c>\n 23d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 240:\tc9                   \tleaveq \n 241:\tc3                   \tretq   ", "code_s": "__int64 __fastcall connect_to(const char *a1, uint16_t a2) {\n  __int64 result;\n  struct sockaddr <span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">fd</span>;\n  struct hostent *<span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = gethostbyname(a1);\n  if (<span class=\"supfact\">v5</span>) {\n    <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n    if (<span class=\"supfact\">fd</span> >= Number) {\n      memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n      <span class=\"supfact\">s</span>.sa_family = Number;\n      *(_WORD *)<span class=\"supfact\">s</span>.sa_data = htons(a2);\n      memcpy(&<span class=\"supfact\">s</span>.sa_data[Number],\n             *(const void **)<span class=\"supfact\">v5</span>->h_addr_list,\n             <span class=\"supfact\">v5</span>->h_length);\n      if (connect(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">s</span>, Number) >= Number) {\n        result = (unsigned int)<span class=\"supfact\">fd</span>;\n      } else {\n        fwrite(String, Number, Number, stderr);\n        close(<span class=\"supfact\">fd</span>);\n        result = Number;\n      }\n    } else {\n      fwrite(String, Number, Number, stderr);\n      result = Number;\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl connect_to(const char *servername, int port) {\n  int result;\n  sockaddr_in <span class=\"supfact\">addr</span>;\n  int <span class=\"supfact\">fd</span>;\n  hostent *<span class=\"supfact\">server</span>;\n  <span class=\"supfact\">server</span> = gethostbyname(servername);\n  if (<span class=\"supfact\">server</span>) {\n    <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n    if (<span class=\"supfact\">fd</span> >= Number) {\n      memset(&<span class=\"supfact\">addr</span>, Number, sizeof(<span class=\"supfact\">addr</span>));\n      <span class=\"supfact\">addr</span>.sin_family = Number;\n      <span class=\"supfact\">addr</span>.sin_port = htons(port);\n      memcpy(&<span class=\"supfact\">addr</span>.sin_addr,\n             *(const void **)<span class=\"supfact\">server</span>->h_addr_list,\n             <span class=\"supfact\">server</span>->h_length);\n      if (connect(<span class=\"supfact\">fd</span>,\n                  (const struct sockaddr *)&<span class=\"supfact\">addr</span>,\n                  Number) >= Number) {\n        result = <span class=\"supfact\">fd</span>;\n      } else {\n        fwrite(String, Number, Number, stderr);\n        close(<span class=\"supfact\">fd</span>);\n        result = Number;\n      }\n    } else {\n      fwrite(String, Number, Number, stderr);\n      result = Number;\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "s", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/5631eb03036580eed21c2bb869de67c5abe12626d32354cf1559c3a570587379", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/mw8080bw.o", "objdump": "00000000000053a0 <_ZL29construct_machine_config_mazeR14machine_configP8device_t>:\n    53a0:\t55                   \tpush   %rbp\n    53a1:\t48 89 e5             \tmov    %rsp,%rbp\n    53a4:\t53                   \tpush   %rbx\n    53a5:\t48 83 ec 68          \tsub    $0x68,%rsp\n    53a9:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    53ad:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n    53b1:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    53b8:\t00 \n    53b9:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    53bd:\t48 89 c7             \tmov    %rax,%rdi\n    53c0:\te8 00 00 00 00       \tcallq  53c5 <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0x25>\n    53c5:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    53c9:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    53cd:\t48 89 d6             \tmov    %rdx,%rsi\n    53d0:\t48 89 c7             \tmov    %rax,%rdi\n    53d3:\te8 00 00 00 00       \tcallq  53d8 <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0x38>\n    53d8:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n    53dc:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n    53e0:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    53e4:\tba 00 00 00 00       \tmov    $0x0,%edx\n    53e9:\t48 89 ce             \tmov    %rcx,%rsi\n    53ec:\t48 89 c7             \tmov    %rax,%rdi\n    53ef:\te8 00 00 00 00       \tcallq  53f4 <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0x54>\n    53f4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    53f8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    53fc:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5401:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    5406:\t48 89 c7             \tmov    %rax,%rdi\n    5409:\te8 00 00 00 00       \tcallq  540e <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0x6e>\n    540e:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    5412:\tba 00 00 00 00       \tmov    $0x0,%edx\n    5417:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    541c:\t48 89 c7             \tmov    %rax,%rdi\n    541f:\te8 00 00 00 00       \tcallq  5424 <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0x84>\n    5424:\t48 8b 5d 98          \tmov    -0x68(%rbp),%rbx\n    5428:\tbf 7f 9a 06 b1       \tmov    $0xb1069a7f,%edi\n    542d:\te8 00 00 00 00       \tcallq  5432 <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0x92>\n    5432:\t89 c1                \tmov    %eax,%ecx\n    5434:\t48 89 d0             \tmov    %rdx,%rax\n    5437:\t89 4b 20             \tmov    %ecx,0x20(%rbx)\n    543a:\t48 89 43 28          \tmov    %rax,0x28(%rbx)\n    543e:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    5442:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    5446:\t48 89 d6             \tmov    %rdx,%rsi\n    5449:\t48 89 c7             \tmov    %rax,%rdi\n    544c:\te8 00 00 00 00       \tcallq  5451 <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0xb1>\n    5451:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n    5455:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    5459:\t48 89 c7             \tmov    %rax,%rdi\n    545c:\te8 00 00 00 00       \tcallq  5461 <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0xc1>\n    5461:\t48 89 d8             \tmov    %rbx,%rax\n    5464:\teb 1a                \tjmp    5480 <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0xe0>\n    5466:\t48 89 c3             \tmov    %rax,%rbx\n    5469:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    546d:\t48 89 c7             \tmov    %rax,%rdi\n    5470:\te8 00 00 00 00       \tcallq  5475 <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0xd5>\n    5475:\t48 89 d8             \tmov    %rbx,%rax\n    5478:\t48 89 c7             \tmov    %rax,%rdi\n    547b:\te8 00 00 00 00       \tcallq  5480 <_ZL29construct_machine_config_mazeR14machine_configP8device_t+0xe0>\n    5480:\t48 83 c4 68          \tadd    $0x68,%rsp\n    5484:\t5b                   \tpop    %rbx\n    5485:\t5d                   \tpop    %rbp\n    5486:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_maze(machine_config *a1,\n                                                   device_t *a2) {\n  __int64 v2;\n  device_t *<span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = Number L;\n  astring astring((astring *)<span class=\"supfact\">v5</span>);\n  <span class=\"supfact\">v4</span> = construct_machine_config_mw8080bw_root(a1, a2);\n  <span class=\"supfact\">v6</span> =\n      machine_config device_find(a1, <span class=\"supfact\">v4</span>, String);\n  device_memory_interface static_set_addrmap(<span class=\"supfact\">v6</span>, Number L,\n                                             construct_address_map_maze_io_map);\n  driver_device static_set_callback(<span class=\"supfact\">v4</span>, Number L,\n                                    machine_start_maze);\n  *((_DWORD *)a1 + Number) = attotime from_nsec((attotime *)Number, Number L);\n  *((_QWORD *)a1 + Number) = v2;\n  construct_machine_config_maze_audio(a1, <span class=\"supfact\">v4</span>);\n  astring ~astring((astring *)<span class=\"supfact\">v5</span>);\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "device_t *__cdecl construct_machine_config_maze(machine_config *config,\n                                                device_t *owner) {\n  void(__fastcall * v2)(address_map *, const device_t *);\n  void(__fastcall * v3)(running_machine *);\n  attotime v4;\n  device_t *<span class=\"supfact\">ownera</span>;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *<span class=\"supfact\">device</span>;\n  <span class=\"supfact\">device</span> = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  <span class=\"supfact\">ownera</span> =\n      construct_machine_config_mw8080bw_root(config, owner);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, (device_t *)((char *)&loc_1 + Number),\n      (address_spacenum)construct_address_map_maze_io_map, v2);\n  driver_device static_set_callback(\n      <span class=\"supfact\">ownera</span>, Number L,\n      (driver_device callback_type)machine_start_maze, v3);\n  v4 = attotime from_nsec(Number L);\n  config->m_watchdog_time.seconds = v4.seconds;\n  config->m_watchdog_time.attoseconds = v4.attoseconds;\n  construct_machine_config_maze_audio(config, <span class=\"supfact\">ownera</span>);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return <span class=\"supfact\">ownera</span>;\n}", "var": [{"name": "v5", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "migueldeicaza", "repo_name": "mono-wasm-libc", "path": "migueldeicaza/mono-wasm-libc/f6dae8604d5eb5bbfcca3b6ae94d6f3cf0e14ceb9c164f644140cf5fec05bfc7", "path_in_repo": "migueldeicaza/mono-wasm-libc//obj/src/process/fork.o", "objdump": "0000000000000000 <fork>:\n   0:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n   7:\tbf ff ff ff ff       \tmov    $0xffffffff,%edi\n   c:\te8 00 00 00 00       \tcallq  11 <fork+0x11>\n  11:\t48 89 e0             \tmov    %rsp,%rax\n  14:\t48 89 c7             \tmov    %rax,%rdi\n  17:\te8 00 00 00 00       \tcallq  1c <fork+0x1c>\n  1c:\tbf 39 00 00 00       \tmov    $0x39,%edi\n  21:\te8 00 00 00 00       \tcallq  26 <fork+0x26>\n  26:\t48 89 c7             \tmov    %rax,%rdi\n  29:\te8 00 00 00 00       \tcallq  2e <fork+0x2e>\n  2e:\t89 84 24 8c 00 00 00 \tmov    %eax,0x8c(%rsp)\n  35:\t83 bc 24 8c 00 00 00 \tcmpl   $0x0,0x8c(%rsp)\n  3c:\t00 \n  3d:\t75 59                \tjne    98 <fork+0x98>\n  3f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  44:\te8 00 00 00 00       \tcallq  49 <fork+0x49>\n  49:\t48 89 84 24 80 00 00 \tmov    %rax,0x80(%rsp)\n  50:\t00 \n  51:\tbf ba 00 00 00       \tmov    $0xba,%edi\n  56:\te8 00 00 00 00       \tcallq  5b <fork+0x5b>\n  5b:\t89 c2                \tmov    %eax,%edx\n  5d:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n  64:\t00 \n  65:\t89 50 38             \tmov    %edx,0x38(%rax)\n  68:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n  6f:\t00 \n  70:\t48 c7 80 e8 00 00 00 \tmovq   $0x0,0xe8(%rax)\n  77:\t00 00 00 00 \n  7b:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n  82:\t00 \n  83:\t48 c7 80 f0 00 00 00 \tmovq   $0x0,0xf0(%rax)\n  8a:\t00 00 00 00 \n  8e:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 98 <fork+0x98>\n  95:\t00 00 00 \n  98:\t48 89 e0             \tmov    %rsp,%rax\n  9b:\t48 89 c7             \tmov    %rax,%rdi\n  9e:\te8 00 00 00 00       \tcallq  a3 <fork+0xa3>\n  a3:\t83 bc 24 8c 00 00 00 \tcmpl   $0x0,0x8c(%rsp)\n  aa:\t00 \n  ab:\t0f 94 c0             \tsete   %al\n  ae:\t0f b6 c0             \tmovzbl %al,%eax\n  b1:\t89 c7                \tmov    %eax,%edi\n  b3:\te8 00 00 00 00       \tcallq  b8 <fork+0xb8>\n  b8:\t8b 84 24 8c 00 00 00 \tmov    0x8c(%rsp),%eax\n  bf:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n  c6:\tc3                   \tretq   \n", "code_s": "__int64 fork() {\n  __int64 v0;\n  _BYTE <span class=\"supfact\">v2</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v3</span>;\n  unsigned int <span class=\"supfact\">v4</span>;\n  dummy();\n  _block_all_sigs(<span class=\"supfact\">v2</span>);\n  v0 = _syscall0(Number L);\n  <span class=\"supfact\">v4</span> = _syscall_ret(v0);\n  if (!<span class=\"supfact\">v4</span>) {\n    <span class=\"supfact\">v3</span> = _pthread_self();\n    *(_DWORD *)(<span class=\"supfact\">v3</span> + Number) = _syscall0(Number L);\n    *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) = Number L;\n    *(_QWORD *)(<span class=\"supfact\">v3</span> + Number) = Number L;\n    _libc[Number] = Number;\n  }\n  _restore_sigs(<span class=\"supfact\">v2</span>);\n  dummy();\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "pid_t __cdecl fork() {\n  __int64 v0;\n  sigset_t <span class=\"supfact\">set</span>;\n  pthread_t <span class=\"supfact\">self</span>;\n  pid_t <span class=\"supfact\">ret</span>;\n  dummy(Number);\n  _block_all_sigs(&<span class=\"supfact\">set</span>);\n  v0 = _syscall0(Number L);\n  <span class=\"supfact\">ret</span> = _syscall_ret(v0);\n  if (!<span class=\"supfact\">ret</span>) {\n    <span class=\"supfact\">self</span> = _pthread_self();\n    <span class=\"supfact\">self</span>->tid = _syscall0(Number L);\n    <span class=\"supfact\">self</span>->robust_list.off = Number L;\n    <span class=\"supfact\">self</span>->robust_list.pending = Number L;\n    _libc_0[Number] = Number;\n  }\n  _restore_sigs(&<span class=\"supfact\">set</span>);\n  dummy(<span class=\"supfact\">ret</span> == Number);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v2", "type": "char[128]", "ref_name": "set", "ref_type": "struct sigset_t { unsigned __int64[16] __bits; }"}], "body_in_train": false}, {"repo_owner": "Feh", "repo_name": "nocache", "path": "Feh/nocache/bea498ab35ccf7e746797b5709b4a0dd4066908df8fd641af952373e0a8c71aa", "path_in_repo": "Feh/nocache//nocache.so", "objdump": "0000000000002355 <init>:\n    2355:\t55                   \tpush   %rbp\n    2356:\t48 89 e5             \tmov    %rsp,%rbp\n    2359:\t48 83 ec 30          \tsub    $0x30,%rsp\n    235d:\t48 8b 05 fc 4d 00 00 \tmov    0x4dfc(%rip),%rax        # 7160 <env_nr_fadvise>\n    2364:\t48 89 c7             \tmov    %rax,%rdi\n    2367:\te8 d4 fc ff ff       \tcallq  2040 <getenv@plt>\n    236c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    2370:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    2375:\t74 12                \tje     2389 <init+0x34>\n    2377:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    237b:\t48 89 c7             \tmov    %rax,%rdi\n    237e:\te8 6d fe ff ff       \tcallq  21f0 <atoi@plt>\n    2383:\t89 05 67 4e 00 00    \tmov    %eax,0x4e67(%rip)        # 71f0 <nr_fadvise>\n    2389:\t8b 05 61 4e 00 00    \tmov    0x4e61(%rip),%eax        # 71f0 <nr_fadvise>\n    238f:\t85 c0                \ttest   %eax,%eax\n    2391:\t7f 0a                \tjg     239d <init+0x48>\n    2393:\tc7 05 53 4e 00 00 01 \tmovl   $0x1,0x4e53(%rip)        # 71f0 <nr_fadvise>\n    239a:\t00 00 00 \n    239d:\t48 8b 05 cc 4d 00 00 \tmov    0x4dcc(%rip),%rax        # 7170 <env_flushall>\n    23a4:\t48 89 c7             \tmov    %rax,%rdi\n    23a7:\te8 94 fc ff ff       \tcallq  2040 <getenv@plt>\n    23ac:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    23b0:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    23b5:\t74 12                \tje     23c9 <init+0x74>\n    23b7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    23bb:\t48 89 c7             \tmov    %rax,%rdi\n    23be:\te8 2d fe ff ff       \tcallq  21f0 <atoi@plt>\n    23c3:\t88 05 2b 4e 00 00    \tmov    %al,0x4e2b(%rip)        # 71f4 <flushall>\n    23c9:\t0f b6 05 24 4e 00 00 \tmovzbl 0x4e24(%rip),%eax        # 71f4 <flushall>\n    23d0:\t84 c0                \ttest   %al,%al\n    23d2:\t7f 07                \tjg     23db <init+0x86>\n    23d4:\tc6 05 19 4e 00 00 00 \tmovb   $0x0,0x4e19(%rip)        # 71f4 <flushall>\n    23db:\t48 8b 05 96 4d 00 00 \tmov    0x4d96(%rip),%rax        # 7178 <env_max_fds>\n    23e2:\t48 89 c7             \tmov    %rax,%rdi\n    23e5:\te8 56 fc ff ff       \tcallq  2040 <getenv@plt>\n    23ea:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    23ee:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    23f3:\t74 13                \tje     2408 <init+0xb3>\n    23f5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    23f9:\t48 89 c7             \tmov    %rax,%rdi\n    23fc:\te8 ff fc ff ff       \tcallq  2100 <atoll@plt>\n    2401:\t48 89 05 50 4d 00 00 \tmov    %rax,0x4d50(%rip)        # 7158 <max_fd_limit>\n    2408:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    240c:\t48 89 c6             \tmov    %rax,%rsi\n    240f:\tbf 07 00 00 00       \tmov    $0x7,%edi\n    2414:\te8 17 fe ff ff       \tcallq  2230 <getrlimit@plt>\n    2419:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    241d:\t89 05 7d 4d 00 00    \tmov    %eax,0x4d7d(%rip)        # 71a0 <max_fds>\n    2423:\t8b 05 77 4d 00 00    \tmov    0x4d77(%rip),%eax        # 71a0 <max_fds>\n    2429:\t48 63 d0             \tmovslq %eax,%rdx\n    242c:\t48 8b 05 25 4d 00 00 \tmov    0x4d25(%rip),%rax        # 7158 <max_fd_limit>\n    2433:\t48 39 c2             \tcmp    %rax,%rdx\n    2436:\t76 0d                \tjbe    2445 <init+0xf0>\n    2438:\t48 8b 05 19 4d 00 00 \tmov    0x4d19(%rip),%rax        # 7158 <max_fd_limit>\n    243f:\t89 05 5b 4d 00 00    \tmov    %eax,0x4d5b(%rip)        # 71a0 <max_fds>\n    2445:\t8b 05 55 4d 00 00    \tmov    0x4d55(%rip),%eax        # 71a0 <max_fds>\n    244b:\t85 c0                \ttest   %eax,%eax\n    244d:\t0f 84 e2 02 00 00    \tje     2735 <init+0x3e0>\n    2453:\te8 e0 02 00 00       \tcallq  2738 <init_mutexes>\n    2458:\t48 8d 15 d9 02 00 00 \tlea    0x2d9(%rip),%rdx        # 2738 <init_mutexes>\n    245f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2464:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2469:\te8 12 1d 00 00       \tcallq  4180 <__pthread_atfork>\n    246e:\t8b 05 2c 4d 00 00    \tmov    0x4d2c(%rip),%eax        # 71a0 <max_fds>\n    2474:\t48 63 d0             \tmovslq %eax,%rdx\n    2477:\t48 89 d0             \tmov    %rdx,%rax\n    247a:\t48 c1 e0 02          \tshl    $0x2,%rax\n    247e:\t48 01 d0             \tadd    %rdx,%rax\n    2481:\t48 c1 e0 03          \tshl    $0x3,%rax\n    2485:\t48 89 c7             \tmov    %rax,%rdi\n    2488:\te8 d3 fc ff ff       \tcallq  2160 <malloc@plt>\n    248d:\t48 89 05 14 4d 00 00 \tmov    %rax,0x4d14(%rip)        # 71a8 <fds>\n    2494:\t48 8b 05 0d 4d 00 00 \tmov    0x4d0d(%rip),%rax        # 71a8 <fds>\n    249b:\t48 85 c0             \ttest   %rax,%rax\n    249e:\t75 1f                \tjne    24bf <init+0x16a>\n    24a0:\t48 8d 0d e9 30 00 00 \tlea    0x30e9(%rip),%rcx        # 5590 <__PRETTY_FUNCTION__.5645>\n    24a7:\tba 79 00 00 00       \tmov    $0x79,%edx\n    24ac:\t48 8d 35 91 2b 00 00 \tlea    0x2b91(%rip),%rsi        # 5044 <_fini+0xeb8>\n    24b3:\t48 8d 3d 94 2b 00 00 \tlea    0x2b94(%rip),%rdi        # 504e <_fini+0xec2>\n    24ba:\te8 01 fc ff ff       \tcallq  20c0 <__assert_fail@plt>\n    24bf:\t48 8d 35 94 2b 00 00 \tlea    0x2b94(%rip),%rsi        # 505a <_fini+0xece>\n    24c6:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    24cd:\te8 7e fd ff ff       \tcallq  2250 <dlsym@plt>\n    24d2:\t48 89 c2             \tmov    %rax,%rdx\n    24d5:\t48 8b 05 f4 4a 00 00 \tmov    0x4af4(%rip),%rax        # 6fd0 <_DYNAMIC+0x268>\n    24dc:\t48 89 10             \tmov    %rdx,(%rax)\n    24df:\t48 8d 35 79 2b 00 00 \tlea    0x2b79(%rip),%rsi        # 505f <_fini+0xed3>\n    24e6:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    24ed:\te8 5e fd ff ff       \tcallq  2250 <dlsym@plt>\n    24f2:\t48 89 c2             \tmov    %rax,%rdx\n    24f5:\t48 8b 05 fc 4a 00 00 \tmov    0x4afc(%rip),%rax        # 6ff8 <_DYNAMIC+0x290>\n    24fc:\t48 89 10             \tmov    %rdx,(%rax)\n    24ff:\t48 8d 35 60 2b 00 00 \tlea    0x2b60(%rip),%rsi        # 5066 <_fini+0xeda>\n    2506:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    250d:\te8 3e fd ff ff       \tcallq  2250 <dlsym@plt>\n    2512:\t48 89 c2             \tmov    %rax,%rdx\n    2515:\t48 8b 05 ac 4a 00 00 \tmov    0x4aac(%rip),%rax        # 6fc8 <_DYNAMIC+0x260>\n    251c:\t48 89 10             \tmov    %rdx,(%rax)\n    251f:\t48 8d 35 46 2b 00 00 \tlea    0x2b46(%rip),%rsi        # 506c <_fini+0xee0>\n    2526:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    252d:\te8 1e fd ff ff       \tcallq  2250 <dlsym@plt>\n    2532:\t48 89 c2             \tmov    %rax,%rdx\n    2535:\t48 8b 05 6c 4a 00 00 \tmov    0x4a6c(%rip),%rax        # 6fa8 <_DYNAMIC+0x240>\n    253c:\t48 89 10             \tmov    %rdx,(%rax)\n    253f:\t48 8d 35 2e 2b 00 00 \tlea    0x2b2e(%rip),%rsi        # 5074 <_fini+0xee8>\n    2546:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    254d:\te8 fe fc ff ff       \tcallq  2250 <dlsym@plt>\n    2552:\t48 89 c2             \tmov    %rax,%rdx\n    2555:\t48 8b 05 0c 4a 00 00 \tmov    0x4a0c(%rip),%rax        # 6f68 <_DYNAMIC+0x200>\n    255c:\t48 89 10             \tmov    %rdx,(%rax)\n    255f:\t48 8d 35 15 2b 00 00 \tlea    0x2b15(%rip),%rsi        # 507b <_fini+0xeef>\n    2566:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    256d:\te8 de fc ff ff       \tcallq  2250 <dlsym@plt>\n    2572:\t48 89 c2             \tmov    %rax,%rdx\n    2575:\t48 8b 05 1c 4a 00 00 \tmov    0x4a1c(%rip),%rax        # 6f98 <_DYNAMIC+0x230>\n    257c:\t48 89 10             \tmov    %rdx,(%rax)\n    257f:\t48 8d 35 fe 2a 00 00 \tlea    0x2afe(%rip),%rsi        # 5084 <_fini+0xef8>\n    2586:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    258d:\te8 be fc ff ff       \tcallq  2250 <dlsym@plt>\n    2592:\t48 89 c2             \tmov    %rax,%rdx\n    2595:\t48 8b 05 ec 49 00 00 \tmov    0x49ec(%rip),%rax        # 6f88 <_DYNAMIC+0x220>\n    259c:\t48 89 10             \tmov    %rdx,(%rax)\n    259f:\t48 8d 35 e2 2a 00 00 \tlea    0x2ae2(%rip),%rsi        # 5088 <_fini+0xefc>\n    25a6:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    25ad:\te8 9e fc ff ff       \tcallq  2250 <dlsym@plt>\n    25b2:\t48 89 c2             \tmov    %rax,%rdx\n    25b5:\t48 8b 05 bc 49 00 00 \tmov    0x49bc(%rip),%rax        # 6f78 <_DYNAMIC+0x210>\n    25bc:\t48 89 10             \tmov    %rdx,(%rax)\n    25bf:\t48 8d 35 c7 2a 00 00 \tlea    0x2ac7(%rip),%rsi        # 508d <_fini+0xf01>\n    25c6:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    25cd:\te8 7e fc ff ff       \tcallq  2250 <dlsym@plt>\n    25d2:\t48 89 c2             \tmov    %rax,%rdx\n    25d5:\t48 8b 05 b4 49 00 00 \tmov    0x49b4(%rip),%rax        # 6f90 <_DYNAMIC+0x228>\n    25dc:\t48 89 10             \tmov    %rdx,(%rax)\n    25df:\t48 8d 35 ad 2a 00 00 \tlea    0x2aad(%rip),%rsi        # 5093 <_fini+0xf07>\n    25e6:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    25ed:\te8 5e fc ff ff       \tcallq  2250 <dlsym@plt>\n    25f2:\t48 89 c2             \tmov    %rax,%rdx\n    25f5:\t48 8b 05 dc 49 00 00 \tmov    0x49dc(%rip),%rax        # 6fd8 <_DYNAMIC+0x270>\n    25fc:\t48 89 10             \tmov    %rdx,(%rax)\n    25ff:\t48 8d 35 93 2a 00 00 \tlea    0x2a93(%rip),%rsi        # 5099 <_fini+0xf0d>\n    2606:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    260d:\te8 3e fc ff ff       \tcallq  2250 <dlsym@plt>\n    2612:\t48 89 c2             \tmov    %rax,%rdx\n    2615:\t48 8b 05 9c 49 00 00 \tmov    0x499c(%rip),%rax        # 6fb8 <_DYNAMIC+0x250>\n    261c:\t48 89 10             \tmov    %rdx,(%rax)\n    261f:\t48 8d 35 7b 2a 00 00 \tlea    0x2a7b(%rip),%rsi        # 50a1 <_fini+0xf15>\n    2626:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    262d:\te8 1e fc ff ff       \tcallq  2250 <dlsym@plt>\n    2632:\t48 89 c2             \tmov    %rax,%rdx\n    2635:\t48 8b 05 34 49 00 00 \tmov    0x4934(%rip),%rax        # 6f70 <_DYNAMIC+0x208>\n    263c:\t48 89 10             \tmov    %rdx,(%rax)\n    263f:\te8 3c fc ff ff       \tcallq  2280 <dlerror@plt>\n    2644:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2648:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    264d:\t74 2c                \tje     267b <init+0x326>\n    264f:\t48 8b 05 9a 49 00 00 \tmov    0x499a(%rip),%rax        # 6ff0 <_DYNAMIC+0x288>\n    2656:\t48 8b 00             \tmov    (%rax),%rax\n    2659:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    265d:\t48 8d 35 44 2a 00 00 \tlea    0x2a44(%rip),%rsi        # 50a8 <_fini+0xf1c>\n    2664:\t48 89 c7             \tmov    %rax,%rdi\n    2667:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    266c:\te8 9f fa ff ff       \tcallq  2110 <fprintf@plt>\n    2671:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    2676:\te8 95 fb ff ff       \tcallq  2210 <exit@plt>\n    267b:\te8 80 fb ff ff       \tcallq  2200 <getpagesize@plt>\n    2680:\t48 98                \tcltq   \n    2682:\t48 89 05 5f 4b 00 00 \tmov    %rax,0x4b5f(%rip)        # 71e8 <PAGESIZE>\n    2689:\t48 8d 3d 30 4b 00 00 \tlea    0x4b30(%rip),%rdi        # 71c0 <fds_iter_lock>\n    2690:\te8 db fb ff ff       \tcallq  2270 <pthread_mutex_lock@plt>\n    2695:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    269c:\teb 74                \tjmp    2712 <init+0x3bd>\n    269e:\t48 8b 0d 0b 4b 00 00 \tmov    0x4b0b(%rip),%rcx        # 71b0 <fds_lock>\n    26a5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    26a8:\t48 63 d0             \tmovslq %eax,%rdx\n    26ab:\t48 89 d0             \tmov    %rdx,%rax\n    26ae:\t48 c1 e0 02          \tshl    $0x2,%rax\n    26b2:\t48 01 d0             \tadd    %rdx,%rax\n    26b5:\t48 c1 e0 03          \tshl    $0x3,%rax\n    26b9:\t48 01 c8             \tadd    %rcx,%rax\n    26bc:\t48 89 c7             \tmov    %rax,%rdi\n    26bf:\te8 ac fb ff ff       \tcallq  2270 <pthread_mutex_lock@plt>\n    26c4:\t48 8b 0d dd 4a 00 00 \tmov    0x4add(%rip),%rcx        # 71a8 <fds>\n    26cb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    26ce:\t48 63 d0             \tmovslq %eax,%rdx\n    26d1:\t48 89 d0             \tmov    %rdx,%rax\n    26d4:\t48 c1 e0 02          \tshl    $0x2,%rax\n    26d8:\t48 01 d0             \tadd    %rdx,%rax\n    26db:\t48 c1 e0 03          \tshl    $0x3,%rax\n    26df:\t48 01 c8             \tadd    %rcx,%rax\n    26e2:\tc7 00 ff ff ff ff    \tmovl   $0xffffffff,(%rax)\n    26e8:\t48 8b 0d c1 4a 00 00 \tmov    0x4ac1(%rip),%rcx        # 71b0 <fds_lock>\n    26ef:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    26f2:\t48 63 d0             \tmovslq %eax,%rdx\n    26f5:\t48 89 d0             \tmov    %rdx,%rax\n    26f8:\t48 c1 e0 02          \tshl    $0x2,%rax\n    26fc:\t48 01 d0             \tadd    %rdx,%rax\n    26ff:\t48 c1 e0 03          \tshl    $0x3,%rax\n    2703:\t48 01 c8             \tadd    %rcx,%rax\n    2706:\t48 89 c7             \tmov    %rax,%rdi\n    2709:\te8 42 fa ff ff       \tcallq  2150 <pthread_mutex_unlock@plt>\n    270e:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    2712:\t8b 05 88 4a 00 00    \tmov    0x4a88(%rip),%eax        # 71a0 <max_fds>\n    2718:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    271b:\t7c 81                \tjl     269e <init+0x349>\n    271d:\t48 8d 3d 9c 4a 00 00 \tlea    0x4a9c(%rip),%rdi        # 71c0 <fds_iter_lock>\n    2724:\te8 27 fa ff ff       \tcallq  2150 <pthread_mutex_unlock@plt>\n    2729:\te8 d2 00 00 00       \tcallq  2800 <init_debugging>\n    272e:\te8 2a 01 00 00       \tcallq  285d <handle_stdout>\n    2733:\teb 01                \tjmp    2736 <init+0x3e1>\n    2735:\t90                   \tnop\n    2736:\tc9                   \tleaveq \n    2737:\tc3                   \tretq   ", "code_s": "__int64 init() {\n  __int64 result;\n  struct rlimit <span class=\"supfact\">rlimits</span>;\n  char *<span class=\"supfact\">v2</span>;\n  char *<span class=\"supfact\">nptr</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">nptr</span> = getenv(env_nr_fadvise);\n  if (<span class=\"supfact\">nptr</span>)\n    nr_fadvise = atoi(<span class=\"supfact\">nptr</span>);\n  if (nr_fadvise <= Number)\n    nr_fadvise = Number;\n  <span class=\"supfact\">nptr</span> = getenv(env_flushall);\n  if (<span class=\"supfact\">nptr</span>)\n    flushall = atoi(<span class=\"supfact\">nptr</span>);\n  if (flushall <= Number)\n    flushall = Number;\n  <span class=\"supfact\">nptr</span> = getenv(env_max_fds);\n  if (<span class=\"supfact\">nptr</span>)\n    max_fd_limit = atoll(<span class=\"supfact\">nptr</span>);\n  getrlimit(RLIMIT_NOFILE, &<span class=\"supfact\">rlimits</span>);\n  max_fds = <span class=\"supfact\">rlimits</span>.rlim_max;\n  if (SLODWORD(<span class=\"supfact\">rlimits</span>.rlim_max) >\n      (unsigned __int64)max_fd_limit)\n    max_fds = max_fd_limit;\n  result = (unsigned int)max_fds;\n  if (max_fds) {\n    init_mutexes();\n    pthread_atfork(Number L, Number L, init_mutexes);\n    fds = malloc(Number L * max_fds);\n    if (!fds)\n      __assert_fail(String, String, Number, String);\n    original_open = dlsym((void *)Number, String);\n    original_open64 = dlsym((void *)Number, String);\n    original_creat = dlsym((void *)Number, String);\n    original_creat64 = dlsym((void *)Number, String);\n    original_openat = dlsym((void *)Number, String);\n    original_openat64 = dlsym((void *)Number, String);\n    original_dup = dlsym((void *)Number, String);\n    original_dup2 = dlsym((void *)Number, String);\n    original_close = dlsym((void *)Number, String);\n    original_fopen = dlsym((void *)Number, String);\n    original_fopen64 = dlsym((void *)Number, String);\n    original_fclose = dlsym((void *)Number, String);\n    <span class=\"supfact\">v2</span> = dlerror();\n    if (<span class=\"supfact\">v2</span>) {\n      fprintf(stderr, String, <span class=\"supfact\">v2</span>);\n      exit(Number);\n    }\n    PAGESIZE = getpagesize();\n    pthread_mutex_lock(&fds_iter_lock);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < max_fds;\n         ++<span class=\"supfact\">i</span>) {\n      pthread_mutex_lock((pthread_mutex_t *)fds_lock + <span class=\"supfact\">i</span>);\n      *((_DWORD *)fds + Number * <span class=\"supfact\">i</span>) = Number;\n      pthread_mutex_unlock((pthread_mutex_t *)fds_lock + <span class=\"supfact\">i</span>);\n    }\n    pthread_mutex_unlock(&fds_iter_lock);\n    init_debugging();\n    result = handle_stdout();\n  }\n  return result;\n}", "code_t": "void __cdecl init() {\n  rlimit <span class=\"supfact\">rlim</span>;\n  char *<span class=\"supfact\">error</span>;\n  char *<span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">s</span> = getenv(env_nr_fadvise);\n  if (<span class=\"supfact\">s</span>)\n    nr_fadvise = atoi(<span class=\"supfact\">s</span>);\n  if (nr_fadvise <= Number)\n    nr_fadvise = Number;\n  <span class=\"supfact\">s</span> = getenv(env_flushall);\n  if (<span class=\"supfact\">s</span>)\n    flushall[Number] = atoi(<span class=\"supfact\">s</span>);\n  if (flushall[Number] <= Number)\n    flushall[Number] = Number;\n  <span class=\"supfact\">s</span> = getenv(env_max_fds);\n  if (<span class=\"supfact\">s</span>)\n    max_fd_limit = atoll(<span class=\"supfact\">s</span>);\n  getrlimit(RLIMIT_NOFILE, &<span class=\"supfact\">rlim</span>);\n  max_fds = <span class=\"supfact\">rlim</span>.rlim_max;\n  if (SLODWORD(<span class=\"supfact\">rlim</span>.rlim_max) > max_fd_limit)\n    max_fds = max_fd_limit;\n  if (max_fds) {\n    init_mutexes();\n    pthread_atfork(Number L, Number L, init_mutexes);\n    fds = (file_pageinfo *)malloc(Number L * max_fds);\n    if (!fds)\n      __assert_fail(String, String, Number, String);\n    original_open =\n        (int (*)(const char *, int, mode_t))dlsym((void *)Number, String);\n    original_open64 =\n        (int (*)(const char *, int, mode_t))dlsym((void *)Number, String);\n    original_creat =\n        (int (*)(const char *, int, mode_t))dlsym((void *)Number, String);\n    original_creat64 =\n        (int (*)(const char *, int, mode_t))dlsym((void *)Number, String);\n    original_openat =\n        (int (*)(int, const char *, int, mode_t))dlsym((void *)Number, String);\n    original_openat64 =\n        (int (*)(int, const char *, int, mode_t))dlsym((void *)Number, String);\n    original_dup = (int (*)(int))dlsym((void *)Number, String);\n    original_dup2 = (int (*)(int, int))dlsym((void *)Number, String);\n    original_close = (int (*)(int))dlsym((void *)Number, String);\n    original_fopen =\n        (FILE * (*)(const char *, const char *)) dlsym((void *)Number, String);\n    original_fopen64 =\n        (FILE * (*)(const char *, const char *)) dlsym((void *)Number, String);\n    original_fclose = (int (*)(FILE *))dlsym((void *)Number, String);\n    <span class=\"supfact\">error</span> = dlerror();\n    if (<span class=\"supfact\">error</span>) {\n      fprintf(stderr, String, <span class=\"supfact\">error</span>);\n      exit(Number);\n    }\n    PAGESIZE = getpagesize();\n    pthread_mutex_lock(&fds_iter_lock);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < max_fds;\n         ++<span class=\"supfact\">i</span>) {\n      pthread_mutex_lock(&fds_lock[<span class=\"supfact\">i</span>]);\n      fds[<span class=\"supfact\">i</span>].fd = Number;\n      pthread_mutex_unlock(&fds_lock[<span class=\"supfact\">i</span>]);\n    }\n    pthread_mutex_unlock(&fds_iter_lock);\n    init_debugging();\n    handle_stdout();\n  }\n}", "var": [{"name": "rlimits", "type": "struct rlimit { rlim_t rlim_cur; rlim_t rlim_max; }", "ref_name": "rlim", "ref_type": "struct rlimit { rlim_t rlim_cur; rlim_t rlim_max; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/15a5b8989460b9fe7a264fef632b9c326d75797bb9bc55d73f5a16fdabf55d7d", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/merit.o", "objdump": "0000000000009b49 <_ZL32construct_machine_config_casino5R14machine_configP8device_t>:\n    9b49:\t55                   \tpush   %rbp\n    9b4a:\t48 89 e5             \tmov    %rsp,%rbp\n    9b4d:\t53                   \tpush   %rbx\n    9b4e:\t48 83 ec 68          \tsub    $0x68,%rsp\n    9b52:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n    9b56:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n    9b5a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    9b61:\t00 \n    9b62:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    9b66:\t48 89 c7             \tmov    %rax,%rdi\n    9b69:\te8 00 00 00 00       \tcallq  9b6e <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0x25>\n    9b6e:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n    9b72:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    9b76:\t48 89 d6             \tmov    %rdx,%rsi\n    9b79:\t48 89 c7             \tmov    %rax,%rdi\n    9b7c:\te8 f1 fc ff ff       \tcallq  9872 <_ZL32construct_machine_config_pitbossR14machine_configP8device_t>\n    9b81:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n    9b85:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n    9b89:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    9b8d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    9b92:\t48 89 ce             \tmov    %rcx,%rsi\n    9b95:\t48 89 c7             \tmov    %rax,%rdi\n    9b98:\te8 00 00 00 00       \tcallq  9b9d <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0x54>\n    9b9d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    9ba1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    9ba5:\tba 00 00 00 00       \tmov    $0x0,%edx\n    9baa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    9baf:\t48 89 c7             \tmov    %rax,%rdi\n    9bb2:\te8 00 00 00 00       \tcallq  9bb7 <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0x6e>\n    9bb7:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 9bbe <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0x75>\n    9bbe:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n    9bc2:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    9bc6:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    9bcc:\t48 89 d1             \tmov    %rdx,%rcx\n    9bcf:\tba 00 00 00 00       \tmov    $0x0,%edx\n    9bd4:\t48 89 c7             \tmov    %rax,%rdi\n    9bd7:\te8 00 00 00 00       \tcallq  9bdc <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0x93>\n    9bdc:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    9be0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    9be4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    9be9:\t48 89 c7             \tmov    %rax,%rdi\n    9bec:\te8 00 00 00 00       \tcallq  9bf1 <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0xa8>\n    9bf1:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    9bf5:\tba 00 00 00 00       \tmov    $0x0,%edx\n    9bfa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    9bff:\t48 89 c7             \tmov    %rax,%rdi\n    9c02:\te8 00 00 00 00       \tcallq  9c07 <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0xbe>\n    9c07:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n    9c0b:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    9c0f:\t48 89 c7             \tmov    %rax,%rdi\n    9c12:\te8 00 00 00 00       \tcallq  9c17 <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0xce>\n    9c17:\t48 89 d8             \tmov    %rbx,%rax\n    9c1a:\teb 1a                \tjmp    9c36 <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0xed>\n    9c1c:\t48 89 c3             \tmov    %rax,%rbx\n    9c1f:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    9c23:\t48 89 c7             \tmov    %rax,%rdi\n    9c26:\te8 00 00 00 00       \tcallq  9c2b <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0xe2>\n    9c2b:\t48 89 d8             \tmov    %rbx,%rax\n    9c2e:\t48 89 c7             \tmov    %rax,%rdi\n    9c31:\te8 00 00 00 00       \tcallq  9c36 <_ZL32construct_machine_config_casino5R14machine_configP8device_t+0xed>\n    9c36:\t48 83 c4 68          \tadd    $0x68,%rsp\n    9c3a:\t5b                   \tpop    %rbx\n    9c3b:\t5d                   \tpop    %rbp\n    9c3c:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_casino5(machine_config *a1,\n                                                      device_t *a2) {\n  device_t *<span class=\"supfact\">v3</span>;\n  char <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = Number L;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">v3</span> = construct_machine_config_pitboss(a1, a2);\n  <span class=\"supfact\">v5</span> =\n      machine_config device_find(a1, <span class=\"supfact\">v3</span>, String);\n  device_memory_interface static_set_addrmap(<span class=\"supfact\">v5</span>, Number L,\n                                             construct_address_map_casino5_map);\n  <span class=\"supfact\">v5</span> =\n      machine_config device_add(a1, <span class=\"supfact\">v3</span>, String, NVRAM, Number);\n  nvram_device static_set_default_value(<span class=\"supfact\">v5</span>, Number L);\n  driver_device static_set_callback(<span class=\"supfact\">v3</span>, Number L,\n                                    machine_start_casino5);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "device_t *__cdecl construct_machine_config_casino5(machine_config *config,\n                                                   device_t *owner) {\n  void(__fastcall * v2)(address_map *, const device_t *);\n  nvram_device default_value v3;\n  void(__fastcall * v4)(running_machine *);\n  device_t *<span class=\"supfact\">ownera</span>;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *<span class=\"supfact\">device</span>;\n  <span class=\"supfact\">device</span> = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  <span class=\"supfact\">ownera</span> = construct_machine_config_pitboss(config, owner);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, Number L,\n      (address_spacenum)construct_address_map_casino5_map, v2);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_add(\n      config, <span class=\"supfact\">ownera</span>, String, NVRAM, Number);\n  nvram_device static_set_default_value(<span class=\"supfact\">device</span>, Number L, v3);\n  driver_device static_set_callback(\n      <span class=\"supfact\">ownera</span>, Number L,\n      (driver_device callback_type)machine_start_casino5, v4);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return <span class=\"supfact\">ownera</span>;\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/8705675c38806a2636ef9e01882a4e613a8d555758da6da678ccdb53fbbec44a", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/XML/samples/SAXParser/bin/Linux/x86_64/SAXParserd", "objdump": "000000000040275c <_ZN9MyHandler12startElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_RKN4Poco3XML10AttributesE>:\n  40275c:\t55                   \tpush   %rbp\n  40275d:\t48 89 e5             \tmov    %rsp,%rbp\n  402760:\t53                   \tpush   %rbx\n  402761:\t48 83 ec 68          \tsub    $0x68,%rsp\n  402765:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  402769:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  40276d:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n  402771:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n  402775:\t4c 89 45 98          \tmov    %r8,-0x68(%rbp)\n  402779:\t48 8d 45 eb          \tlea    -0x15(%rbp),%rax\n  40277d:\t48 89 c7             \tmov    %rax,%rdi\n  402780:\te8 0b fa ff ff       \tcallq  402190 <_ZNSaIcEC1Ev@plt>\n  402785:\t48 8d 55 eb          \tlea    -0x15(%rbp),%rdx\n  402789:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  40278d:\t48 8d 35 8d 18 00 00 \tlea    0x188d(%rip),%rsi        # 404021 <_ZStL6ignore+0x1b>\n  402794:\t48 89 c7             \tmov    %rax,%rdi\n  402797:\te8 84 f9 ff ff       \tcallq  402120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@plt>\n  40279c:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  4027a0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  4027a4:\t48 89 d6             \tmov    %rdx,%rsi\n  4027a7:\t48 89 c7             \tmov    %rax,%rdi\n  4027aa:\te8 23 0c 00 00       \tcallq  4033d2 <_ZN9MyHandler5whereERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>\n  4027af:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4027b3:\t48 89 c7             \tmov    %rax,%rdi\n  4027b6:\te8 d5 f8 ff ff       \tcallq  402090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  4027bb:\t48 8d 45 eb          \tlea    -0x15(%rbp),%rax\n  4027bf:\t48 89 c7             \tmov    %rax,%rdi\n  4027c2:\te8 29 f9 ff ff       \tcallq  4020f0 <_ZNSaIcED1Ev@plt>\n  4027c7:\t48 8d 35 60 18 00 00 \tlea    0x1860(%rip),%rsi        # 40402e <_ZStL6ignore+0x28>\n  4027ce:\t48 8b 05 eb 37 00 00 \tmov    0x37eb(%rip),%rax        # 405fc0 <_DYNAMIC+0x288>\n  4027d5:\t48 89 c7             \tmov    %rax,%rdi\n  4027d8:\te8 e3 f8 ff ff       \tcallq  4020c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  4027dd:\t48 89 c2             \tmov    %rax,%rdx\n  4027e0:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  4027e4:\t48 89 c6             \tmov    %rax,%rsi\n  4027e7:\t48 89 d7             \tmov    %rdx,%rdi\n  4027ea:\te8 c1 f8 ff ff       \tcallq  4020b0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>\n  4027ef:\t48 89 c2             \tmov    %rax,%rdx\n  4027f2:\t48 8b 05 b7 37 00 00 \tmov    0x37b7(%rip),%rax        # 405fb0 <_DYNAMIC+0x278>\n  4027f9:\t48 89 c6             \tmov    %rax,%rsi\n  4027fc:\t48 89 d7             \tmov    %rdx,%rdi\n  4027ff:\te8 dc f8 ff ff       \tcallq  4020e0 <_ZNSolsEPFRSoS_E@plt>\n  402804:\t48 8d 35 2f 18 00 00 \tlea    0x182f(%rip),%rsi        # 40403a <_ZStL6ignore+0x34>\n  40280b:\t48 89 c7             \tmov    %rax,%rdi\n  40280e:\te8 ad f8 ff ff       \tcallq  4020c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  402813:\t48 89 c2             \tmov    %rax,%rdx\n  402816:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40281a:\t48 89 c6             \tmov    %rax,%rsi\n  40281d:\t48 89 d7             \tmov    %rdx,%rdi\n  402820:\te8 8b f8 ff ff       \tcallq  4020b0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>\n  402825:\t48 89 c2             \tmov    %rax,%rdx\n  402828:\t48 8b 05 81 37 00 00 \tmov    0x3781(%rip),%rax        # 405fb0 <_DYNAMIC+0x278>\n  40282f:\t48 89 c6             \tmov    %rax,%rsi\n  402832:\t48 89 d7             \tmov    %rdx,%rdi\n  402835:\te8 a6 f8 ff ff       \tcallq  4020e0 <_ZNSolsEPFRSoS_E@plt>\n  40283a:\t48 8d 35 05 18 00 00 \tlea    0x1805(%rip),%rsi        # 404046 <_ZStL6ignore+0x40>\n  402841:\t48 89 c7             \tmov    %rax,%rdi\n  402844:\te8 77 f8 ff ff       \tcallq  4020c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  402849:\t48 89 c2             \tmov    %rax,%rdx\n  40284c:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  402850:\t48 89 c6             \tmov    %rax,%rsi\n  402853:\t48 89 d7             \tmov    %rdx,%rdi\n  402856:\te8 55 f8 ff ff       \tcallq  4020b0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>\n  40285b:\t48 89 c2             \tmov    %rax,%rdx\n  40285e:\t48 8b 05 4b 37 00 00 \tmov    0x374b(%rip),%rax        # 405fb0 <_DYNAMIC+0x278>\n  402865:\t48 89 c6             \tmov    %rax,%rsi\n  402868:\t48 89 d7             \tmov    %rdx,%rdi\n  40286b:\te8 70 f8 ff ff       \tcallq  4020e0 <_ZNSolsEPFRSoS_E@plt>\n  402870:\t48 8d 35 db 17 00 00 \tlea    0x17db(%rip),%rsi        # 404052 <_ZStL6ignore+0x4c>\n  402877:\t48 8b 05 42 37 00 00 \tmov    0x3742(%rip),%rax        # 405fc0 <_DYNAMIC+0x288>\n  40287e:\t48 89 c7             \tmov    %rax,%rdi\n  402881:\te8 3a f8 ff ff       \tcallq  4020c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  402886:\t48 89 c2             \tmov    %rax,%rdx\n  402889:\t48 8b 05 20 37 00 00 \tmov    0x3720(%rip),%rax        # 405fb0 <_DYNAMIC+0x278>\n  402890:\t48 89 c6             \tmov    %rax,%rsi\n  402893:\t48 89 d7             \tmov    %rdx,%rdi\n  402896:\te8 45 f8 ff ff       \tcallq  4020e0 <_ZNSolsEPFRSoS_E@plt>\n  40289b:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  4028a2:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4028a6:\t48 8b 00             \tmov    (%rax),%rax\n  4028a9:\t48 83 c0 10          \tadd    $0x10,%rax\n  4028ad:\t48 8b 10             \tmov    (%rax),%rdx\n  4028b0:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4028b4:\t48 89 c7             \tmov    %rax,%rdi\n  4028b7:\tff d2                \tcallq  *%rdx\n  4028b9:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n  4028bc:\t0f 9c c0             \tsetl   %al\n  4028bf:\t84 c0                \ttest   %al,%al\n  4028c1:\t0f 84 b0 00 00 00    \tje     402977 <_ZN9MyHandler12startElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_RKN4Poco3XML10AttributesE+0x21b>\n  4028c7:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4028cb:\t48 8b 00             \tmov    (%rax),%rax\n  4028ce:\t48 83 c0 18          \tadd    $0x18,%rax\n  4028d2:\t48 8b 08             \tmov    (%rax),%rcx\n  4028d5:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4028d8:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4028dc:\t89 d6                \tmov    %edx,%esi\n  4028de:\t48 89 c7             \tmov    %rax,%rdi\n  4028e1:\tff d1                \tcallq  *%rcx\n  4028e3:\t48 89 c6             \tmov    %rax,%rsi\n  4028e6:\t48 8b 05 d3 36 00 00 \tmov    0x36d3(%rip),%rax        # 405fc0 <_DYNAMIC+0x288>\n  4028ed:\t48 89 c7             \tmov    %rax,%rdi\n  4028f0:\te8 bb f7 ff ff       \tcallq  4020b0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>\n  4028f5:\t48 8d 35 63 17 00 00 \tlea    0x1763(%rip),%rsi        # 40405f <_ZStL6ignore+0x59>\n  4028fc:\t48 89 c7             \tmov    %rax,%rdi\n  4028ff:\te8 bc f7 ff ff       \tcallq  4020c0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>\n  402904:\t48 89 c3             \tmov    %rax,%rbx\n  402907:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  40290b:\t48 8b 00             \tmov    (%rax),%rax\n  40290e:\t48 83 c0 40          \tadd    $0x40,%rax\n  402912:\t48 8b 08             \tmov    (%rax),%rcx\n  402915:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  402918:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  40291c:\t89 d6                \tmov    %edx,%esi\n  40291e:\t48 89 c7             \tmov    %rax,%rdi\n  402921:\tff d1                \tcallq  *%rcx\n  402923:\t48 89 c6             \tmov    %rax,%rsi\n  402926:\t48 89 df             \tmov    %rbx,%rdi\n  402929:\te8 82 f7 ff ff       \tcallq  4020b0 <_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@plt>\n  40292e:\t48 89 c2             \tmov    %rax,%rdx\n  402931:\t48 8b 05 78 36 00 00 \tmov    0x3678(%rip),%rax        # 405fb0 <_DYNAMIC+0x278>\n  402938:\t48 89 c6             \tmov    %rax,%rsi\n  40293b:\t48 89 d7             \tmov    %rdx,%rdi\n  40293e:\te8 9d f7 ff ff       \tcallq  4020e0 <_ZNSolsEPFRSoS_E@plt>\n  402943:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  402947:\te9 56 ff ff ff       \tjmpq   4028a2 <_ZN9MyHandler12startElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_RKN4Poco3XML10AttributesE+0x146>\n  40294c:\t48 89 c3             \tmov    %rax,%rbx\n  40294f:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  402953:\t48 89 c7             \tmov    %rax,%rdi\n  402956:\te8 35 f7 ff ff       \tcallq  402090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt>\n  40295b:\teb 03                \tjmp    402960 <_ZN9MyHandler12startElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_RKN4Poco3XML10AttributesE+0x204>\n  40295d:\t48 89 c3             \tmov    %rax,%rbx\n  402960:\t48 8d 45 eb          \tlea    -0x15(%rbp),%rax\n  402964:\t48 89 c7             \tmov    %rax,%rdi\n  402967:\te8 84 f7 ff ff       \tcallq  4020f0 <_ZNSaIcED1Ev@plt>\n  40296c:\t48 89 d8             \tmov    %rbx,%rax\n  40296f:\t48 89 c7             \tmov    %rax,%rdi\n  402972:\te8 09 f8 ff ff       \tcallq  402180 <_Unwind_Resume@plt>\n  402977:\t90                   \tnop\n  402978:\t48 83 c4 68          \tadd    $0x68,%rsp\n  40297c:\t5b                   \tpop    %rbx\n  40297d:\t5d                   \tpop    %rbp\n  40297e:\tc3                   \tretq   \n  40297f:\t90                   \tnop", "code_s": "bool __fastcall MyHandler startElement(__int64 a1, __int64 a2, __int64 a3,\n                                       __int64 a4, __int64 a5) {\n  signed int v5;\n  bool result;\n  char <span class=\"supfact\">v8</span>[Number];\n  unsigned int <span class=\"supfact\">i</span>;\n  std allocator<char> allocator();\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  MyHandler where(a1, <span class=\"supfact\">v8</span>);\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  std allocator<char> ~allocator();\n  std operator<<<std char_traits<char>>();\n  std operator<<<char>();\n  std ostream operator<<();\n  std operator<<<std char_traits<char>>();\n  std operator<<<char>();\n  std ostream operator<<();\n  std operator<<<std char_traits<char>>();\n  std operator<<<char>();\n  std ostream operator<<();\n  std operator<<<std char_traits<char>>();\n  std ostream operator<<();\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    v5 = (*(__int64(__fastcall **)(__int64, void *))(*(_QWORD *)a5 + Number L))(\n        a5, &std endl<char, std char_traits<char>>);\n    result = (int)<span class=\"supfact\">i</span> < v5;\n    if (!result)\n      break;\n    (*(void(__fastcall **)(__int64, _QWORD))(*(_QWORD *)a5 + Number L))(\n        a5, <span class=\"supfact\">i</span>);\n    std operator<<<char>();\n    std operator<<<std char_traits<char>>();\n    (*(void(__fastcall **)(__int64, _QWORD))(*(_QWORD *)a5 + Number L))(\n        a5, <span class=\"supfact\">i</span>);\n    std operator<<<char>();\n    std ostream operator<<();\n  }\n  return result;\n}", "code_t": "void __cdecl MyHandler startElement(MyHandler *const this,\n                                    const Poco XML XMLString *uri,\n                                    const Poco XML XMLString *localName,\n                                    const Poco XML XMLString *qname,\n                                    const Poco XML Attributes *attributes) {\n  int v5;\n  std string <span class=\"supfact\">meth</span>;\n  int <span class=\"supfact\">i</span>;\n  std allocator<char> allocator();\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  basic_string();\n  MyHandler where(this, &<span class=\"supfact\">meth</span>);\n  std __cxx11 basic_string<char, std char_traits<char>,\n                           std allocator<char>> ~basic_string();\n  std allocator<char> ~allocator();\n  std operator<<<std char_traits<char>>();\n  std operator<<<char>();\n  std ostream operator<<();\n  std operator<<<std char_traits<char>>();\n  std operator<<<char>();\n  std ostream operator<<();\n  std operator<<<std char_traits<char>>();\n  std operator<<<char>();\n  std ostream operator<<();\n  std operator<<<std char_traits<char>>();\n  std ostream operator<<();\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    v5 = (*(__int64(__fastcall **)(const Poco XML Attributes *, void *))(\n        *(_QWORD *)attributes + Number L))(\n        attributes, &std endl<char, std char_traits<char>>);\n    if (<span class=\"supfact\">i</span> >= v5)\n      break;\n    (*(void(__fastcall **)(const Poco XML Attributes *, _QWORD))(\n        *(_QWORD *)attributes + Number L))(attributes,\n                                           (unsigned int)<span class=\"supfact\">i</span>);\n    std operator<<<char>();\n    std operator<<<std char_traits<char>>();\n    (*(void(__fastcall **)(const Poco XML Attributes *, _QWORD))(\n        *(_QWORD *)attributes + Number L))(attributes,\n                                           (unsigned int)<span class=\"supfact\">i</span>);\n    std operator<<<char>();\n    std ostream operator<<();\n  }\n}", "var": [{"name": "v8", "type": "char[44]", "ref_name": "meth", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "bigbighd604", "repo_name": "C-Notes", "path": "bigbighd604/C-Notes/75672d2114c622ee34dd3e8c48aba36b38d5e777ddd8ea2ef819c28a734f02a7", "path_in_repo": "bigbighd604/C-Notes/self-learn/2011-09-16/final/filter.o", "objdump": "0000000000000183 <apply_filters>:\n 183:\t55                   \tpush   %rbp\n 184:\t48 89 e5             \tmov    %rsp,%rbp\n 187:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n 18e:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n 195:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n 19c:\t48 89 95 58 ff ff ff \tmov    %rdx,-0xa8(%rbp)\n 1a3:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 1aa:\t8b 00                \tmov    (%rax),%eax\n 1ac:\t85 c0                \ttest   %eax,%eax\n 1ae:\t7e 2f                \tjle    1df <apply_filters+0x5c>\n 1b0:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 1b7:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 1bb:\t48 8b 95 60 ff ff ff \tmov    -0xa0(%rbp),%rdx\n 1c2:\t48 83 c2 13          \tadd    $0x13,%rdx\n 1c6:\t48 89 c6             \tmov    %rax,%rsi\n 1c9:\t48 89 d7             \tmov    %rdx,%rdi\n 1cc:\te8 00 00 00 00       \tcallq  1d1 <apply_filters+0x4e>\n 1d1:\t85 c0                \ttest   %eax,%eax\n 1d3:\t74 0a                \tje     1df <apply_filters+0x5c>\n 1d5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1da:\te9 4f 01 00 00       \tjmpq   32e <apply_filters+0x1ab>\n 1df:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 1e6:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n 1ea:\t84 c0                \ttest   %al,%al\n 1ec:\t74 24                \tje     212 <apply_filters+0x8f>\n 1ee:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n 1f5:\t0f b6 50 12          \tmovzbl 0x12(%rax),%edx\n 1f9:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 200:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n 204:\t38 c2                \tcmp    %al,%dl\n 206:\t74 0a                \tje     212 <apply_filters+0x8f>\n 208:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 20d:\te9 1c 01 00 00       \tjmpq   32e <apply_filters+0x1ab>\n 212:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 219:\t8b 40 14             \tmov    0x14(%rax),%eax\n 21c:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 21f:\t75 24                \tjne    245 <apply_filters+0xc2>\n 221:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 228:\t8b 40 18             \tmov    0x18(%rax),%eax\n 22b:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 22e:\t75 15                \tjne    245 <apply_filters+0xc2>\n 230:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 237:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n 23b:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n 23f:\t0f 84 c5 00 00 00    \tje     30a <apply_filters+0x187>\n 245:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n 24c:\t48 8d 50 13          \tlea    0x13(%rax),%rdx\n 250:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n 257:\t48 89 d6             \tmov    %rdx,%rsi\n 25a:\t48 89 c7             \tmov    %rax,%rdi\n 25d:\te8 00 00 00 00       \tcallq  262 <apply_filters+0xdf>\n 262:\t48 89 c2             \tmov    %rax,%rdx\n 265:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 26c:\t48 89 c6             \tmov    %rax,%rsi\n 26f:\t48 89 d7             \tmov    %rdx,%rdi\n 272:\te8 00 00 00 00       \tcallq  277 <apply_filters+0xf4>\n 277:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 27a:\t75 14                \tjne    290 <apply_filters+0x10d>\n 27c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 281:\te8 00 00 00 00       \tcallq  286 <apply_filters+0x103>\n 286:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 28b:\te9 9e 00 00 00       \tjmpq   32e <apply_filters+0x1ab>\n 290:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 297:\t8b 40 14             \tmov    0x14(%rax),%eax\n 29a:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 29d:\t74 18                \tje     2b7 <apply_filters+0x134>\n 29f:\t8b 55 8c             \tmov    -0x74(%rbp),%edx\n 2a2:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 2a9:\t8b 40 14             \tmov    0x14(%rax),%eax\n 2ac:\t39 c2                \tcmp    %eax,%edx\n 2ae:\t74 07                \tje     2b7 <apply_filters+0x134>\n 2b0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2b5:\teb 77                \tjmp    32e <apply_filters+0x1ab>\n 2b7:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 2be:\t8b 40 18             \tmov    0x18(%rax),%eax\n 2c1:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n 2c4:\t74 18                \tje     2de <apply_filters+0x15b>\n 2c6:\t8b 55 90             \tmov    -0x70(%rbp),%edx\n 2c9:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 2d0:\t8b 40 18             \tmov    0x18(%rax),%eax\n 2d3:\t39 c2                \tcmp    %eax,%edx\n 2d5:\t74 07                \tje     2de <apply_filters+0x15b>\n 2d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2dc:\teb 50                \tjmp    32e <apply_filters+0x1ab>\n 2de:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 2e5:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n 2e9:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n 2ed:\t74 1b                \tje     30a <apply_filters+0x187>\n 2ef:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n 2f3:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n 2fa:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n 2fe:\t48 39 c2             \tcmp    %rax,%rdx\n 301:\t7d 07                \tjge    30a <apply_filters+0x187>\n 303:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 308:\teb 24                \tjmp    32e <apply_filters+0x1ab>\n 30a:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n 311:\t48 8d 50 13          \tlea    0x13(%rax),%rdx\n 315:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n 31c:\t48 89 c6             \tmov    %rax,%rsi\n 31f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 324:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 329:\te8 00 00 00 00       \tcallq  32e <apply_filters+0x1ab>\n 32e:\tc9                   \tleaveq \n 32f:\tc3                   \tretq   ", "code_s": "int __fastcall apply_filters(const char *a1, __int64 a2, __int64 a3) {\n  int result;\n  const char *v4;\n  struct stat <span class=\"supfact\">buf</span>;\n  if (*(int *)a3 > Number &&\n      strcmp((const char *)(a2 + Number), *(const char **)(a3 + Number)))\n    return Number;\n  if (*(_BYTE *)(a3 + Number) &&\n      *(_BYTE *)(a2 + Number) != *(_BYTE *)(a3 + Number))\n    return Number;\n  if (*(_DWORD *)(a3 + Number) == Number &&\n      *(_DWORD *)(a3 + Number) == Number && *(_QWORD *)(a3 + Number) == Number)\n    goto LABEL_21;\n  v4 = (const char *)normalize_path(a1, a2 + Number);\n  if (lstat(v4, &<span class=\"supfact\">buf</span>) == Number) {\n    perror(String);\n    return Number;\n  }\n  if (*(_DWORD *)(a3 + Number) != Number &&\n      <span class=\"supfact\">buf</span>.st_uid != *(_DWORD *)(a3 + Number))\n    return Number;\n  if (*(_DWORD *)(a3 + Number) != Number &&\n      <span class=\"supfact\">buf</span>.st_gid != *(_DWORD *)(a3 + Number))\n    return Number;\n  if (*(_QWORD *)(a3 + Number) == Number ||\n      <span class=\"supfact\">buf</span>.st_size >= *(_QWORD *)(a3 + Number))\n  LABEL_21:\n    result = printf(String, a1, (const char *)(a2 + Number));\n  else\n    result = Number;\n  return result;\n}", "code_t": "int __cdecl apply_filters(const char *pathname, const dirent *entry,\n                          const FILTER *filter) {\n  int result;\n  const char *v4;\n  stat <span class=\"supfact\">file_stat</span>;\n  if (filter->name_len > Number && strcmp(entry->d_name, filter->name))\n    return Number;\n  if (filter->d_type && entry->d_type != filter->d_type)\n    return Number;\n  if (filter->uid == Number && filter->gid == Number && filter->size == Number)\n    goto LABEL_21;\n  v4 = (const char *)normalize_path(pathname, entry->d_name);\n  if (lstat(v4, &<span class=\"supfact\">file_stat</span>) == Number) {\n    perror(String);\n    return Number;\n  }\n  if (filter->uid != Number && <span class=\"supfact\">file_stat</span>.st_uid != filter->uid)\n    return Number;\n  if (filter->gid != Number && <span class=\"supfact\">file_stat</span>.st_gid != filter->gid)\n    return Number;\n  if (filter->size == Number ||\n      <span class=\"supfact\">file_stat</span>.st_size >= filter->size)\n  LABEL_21:\n    result = printf(String, pathname, entry->d_name);\n  else\n    result = Number;\n  return result;\n}", "var": [{"name": "buf", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "file_stat", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "dreamflyforever", "repo_name": "easyxm", "path": "dreamflyforever/easyxm/8b9f0b359137048ef5e56f3d2fa1dc64184a90c16b65e118136c6ea2d1f9a7c4", "path_in_repo": "dreamflyforever/easyxm//xmodemserver", "objdump": "0000000000401de0 <set_speed>:\n  401de0:\t55                   \tpush   %rbp\n  401de1:\t48 89 e5             \tmov    %rsp,%rbp\n  401de4:\t48 83 ec 60          \tsub    $0x60,%rsp\n  401de8:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n  401deb:\t89 75 a8             \tmov    %esi,-0x58(%rbp)\n  401dee:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  401df2:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  401df5:\t48 89 d6             \tmov    %rdx,%rsi\n  401df8:\t89 c7                \tmov    %eax,%edi\n  401dfa:\te8 21 f3 ff ff       \tcallq  401120 <tcgetattr@plt>\n  401dff:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  401e06:\te9 9c 00 00 00       \tjmpq   401ea7 <set_speed+0xc7>\n  401e0b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401e0e:\t48 98                \tcltq   \n  401e10:\t8b 04 85 40 51 40 00 \tmov    0x405140(,%rax,4),%eax\n  401e17:\t39 45 a8             \tcmp    %eax,-0x58(%rbp)\n  401e1a:\t0f 85 83 00 00 00    \tjne    401ea3 <set_speed+0xc3>\n  401e20:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  401e23:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  401e28:\t89 c7                \tmov    %eax,%edi\n  401e2a:\te8 91 f2 ff ff       \tcallq  4010c0 <tcflush@plt>\n  401e2f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401e32:\t48 98                \tcltq   \n  401e34:\t8b 04 85 00 51 40 00 \tmov    0x405100(,%rax,4),%eax\n  401e3b:\t89 c2                \tmov    %eax,%edx\n  401e3d:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  401e41:\t89 d6                \tmov    %edx,%esi\n  401e43:\t48 89 c7             \tmov    %rax,%rdi\n  401e46:\te8 15 f3 ff ff       \tcallq  401160 <cfsetispeed@plt>\n  401e4b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401e4e:\t48 98                \tcltq   \n  401e50:\t8b 04 85 00 51 40 00 \tmov    0x405100(,%rax,4),%eax\n  401e57:\t89 c2                \tmov    %eax,%edx\n  401e59:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  401e5d:\t89 d6                \tmov    %edx,%esi\n  401e5f:\t48 89 c7             \tmov    %rax,%rdi\n  401e62:\te8 39 f2 ff ff       \tcallq  4010a0 <cfsetospeed@plt>\n  401e67:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  401e6b:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  401e6e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401e73:\t89 c7                \tmov    %eax,%edi\n  401e75:\te8 b6 f2 ff ff       \tcallq  401130 <tcsetattr@plt>\n  401e7a:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  401e7d:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  401e81:\t74 11                \tje     401e94 <set_speed+0xb4>\n  401e83:\tbf 70 33 40 00       \tmov    $0x403370,%edi\n  401e88:\te8 e3 f2 ff ff       \tcallq  401170 <perror@plt>\n  401e8d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401e92:\teb 24                \tjmp    401eb8 <set_speed+0xd8>\n  401e94:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  401e97:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  401e9c:\t89 c7                \tmov    %eax,%edi\n  401e9e:\te8 1d f2 ff ff       \tcallq  4010c0 <tcflush@plt>\n  401ea3:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  401ea7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401eaa:\t83 f8 0f             \tcmp    $0xf,%eax\n  401ead:\t0f 86 58 ff ff ff    \tjbe    401e0b <set_speed+0x2b>\n  401eb3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401eb8:\tc9                   \tleaveq \n  401eb9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall set_speed(int a1, int a2) {\n  struct termios <span class=\"supfact\">termios_p</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  tcgetattr(a1, &<span class=\"supfact\">termios_p</span>);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (a2 == name_arr[<span class=\"supfact\">i</span>]) {\n      tcflush(a1, Number);\n      cfsetispeed(&<span class=\"supfact\">termios_p</span>, speed_arr[<span class=\"supfact\">i</span>]);\n      cfsetospeed(&<span class=\"supfact\">termios_p</span>, speed_arr[<span class=\"supfact\">i</span>]);\n      if (tcsetattr(a1, Number, &<span class=\"supfact\">termios_p</span>)) {\n        perror(String);\n        return Number L;\n      }\n      tcflush(a1, Number);\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl set_speed(int fd, int speed) {\n  termios <span class=\"supfact\">opt</span>;\n  int <span class=\"supfact\">i</span>;\n  tcgetattr(fd, &<span class=\"supfact\">opt</span>);\n  for (<span class=\"supfact\">i</span> = Number; (unsigned int)<span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (speed == name_arr[<span class=\"supfact\">i</span>]) {\n      tcflush(fd, Number);\n      cfsetispeed(&<span class=\"supfact\">opt</span>, speed_arr[<span class=\"supfact\">i</span>]);\n      cfsetospeed(&<span class=\"supfact\">opt</span>, speed_arr[<span class=\"supfact\">i</span>]);\n      if (tcsetattr(fd, Number, &<span class=\"supfact\">opt</span>)) {\n        perror(String);\n        return Number;\n      }\n      tcflush(fd, Number);\n    }\n  }\n  return Number;\n}", "var": [{"name": "termios_p", "type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }", "ref_name": "opt", "ref_type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }"}], "body_in_train": false}, {"repo_owner": "UberGames", "repo_name": "rpgxEF", "path": "UberGames/rpgxEF/4ecb6c62b4a787344b69c43e324ea2e3cbc71c7f4ae775d181331228a8dd7bac", "path_in_repo": "UberGames/rpgxEF//build/release-linux-x86_64/ded/net_ip.o", "objdump": "000000000000198a <NET_SetMulticast6>:\n    198a:\t48 83 ec 28          \tsub    $0x28,%rsp\n    198e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1995 <NET_SetMulticast6+0xb>\n    1995:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1999:\t0f b6 00             \tmovzbl (%rax),%eax\n    199c:\t84 c0                \ttest   %al,%al\n    199e:\t74 24                \tje     19c4 <NET_SetMulticast6+0x3a>\n    19a0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 19a7 <NET_SetMulticast6+0x1d>\n    19a7:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    19ab:\t48 89 e6             \tmov    %rsp,%rsi\n    19ae:\tb9 0a 00 00 00       \tmov    $0xa,%ecx\n    19b3:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    19b8:\t48 89 c7             \tmov    %rax,%rdi\n    19bb:\te8 68 e8 ff ff       \tcallq  228 <Sys_StringToSockaddr>\n    19c0:\t85 c0                \ttest   %eax,%eax\n    19c2:\t75 41                \tjne    1a05 <NET_SetMulticast6+0x7b>\n    19c4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 19cb <NET_SetMulticast6+0x41>\n    19cb:\t48 8b 00             \tmov    (%rax),%rax\n    19ce:\t48 89 c6             \tmov    %rax,%rsi\n    19d1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    19d6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    19db:\te8 00 00 00 00       \tcallq  19e0 <NET_SetMulticast6+0x56>\n    19e0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 19e7 <NET_SetMulticast6+0x5d>\n    19e7:\t8b 40 30             \tmov    0x30(%rax),%eax\n    19ea:\t83 c8 08             \tor     $0x8,%eax\n    19ed:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    19f1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 19f8 <NET_SetMulticast6+0x6e>\n    19f8:\t48 8b 00             \tmov    (%rax),%rax\n    19fb:\t48 89 c7             \tmov    %rax,%rdi\n    19fe:\te8 00 00 00 00       \tcallq  1a03 <NET_SetMulticast6+0x79>\n    1a03:\teb 4f                \tjmp    1a54 <NET_SetMulticast6+0xca>\n    1a05:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1a0a:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n    1a0f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1a16 <NET_SetMulticast6+0x8c>\n    1a16:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 1a1d <NET_SetMulticast6+0x93>\n    1a1d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a24 <NET_SetMulticast6+0x9a>\n    1a24:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a28:\t0f b6 00             \tmovzbl (%rax),%eax\n    1a2b:\t84 c0                \ttest   %al,%al\n    1a2d:\t74 1b                \tje     1a4a <NET_SetMulticast6+0xc0>\n    1a2f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a36 <NET_SetMulticast6+0xac>\n    1a36:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a3a:\t48 89 c7             \tmov    %rax,%rdi\n    1a3d:\te8 00 00 00 00       \tcallq  1a42 <NET_SetMulticast6+0xb8>\n    1a42:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1a48 <NET_SetMulticast6+0xbe>\n    1a48:\teb 0a                \tjmp    1a54 <NET_SetMulticast6+0xca>\n    1a4a:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 1a54 <NET_SetMulticast6+0xca>\n    1a51:\t00 00 00 \n    1a54:\t48 83 c4 28          \tadd    $0x28,%rsp\n    1a58:\tc3                   \tretq   \n    1a59:\t90                   \tnop", "code_s": "unsigned int NET_SetMulticast6() {\n  unsigned int result;\n  _QWORD <span class=\"supfact\">v1</span>[Number];\n  if (**(_BYTE **)(net_mcast6addr + Number) &&\n      (unsigned int)Sys_StringToSockaddr(\n          *(const char **)(net_mcast6addr + Number), <span class=\"supfact\">v1</span>, Number,\n          Number)) {\n    curgroup = <span class=\"supfact\">v1</span>[Number];\n    qword_2E48 = <span class=\"supfact\">v1</span>[Number];\n    result = **(unsigned __int8 **)(net_mcast6iface + Number);\n    if ((_BYTE)result) {\n      result = if_nametoindex(*(const char **)(net_mcast6iface + Number));\n      dword_2E50 = result;\n    } else {\n      dword_2E50 = Number;\n    }\n  } else {\n    Com_Printf(String, *(const char **)net_mcast6addr);\n    result = Cvar_SetValue(*(_QWORD *)net_enabled,\n                           (float)(*(_DWORD *)(net_enabled + Number) | Number));\n  }\n  return result;\n}", "code_t": "void __cdecl NET_SetMulticast6() {\n  sockaddr_in6 <span class=\"supfact\">addr</span>;\n  if (*net_mcast6addr->string &&\n      Sys_StringToSockaddr(net_mcast6addr->string,\n                           (sockaddr *)&<span class=\"supfact\">addr</span>, Number, Number)) {\n    curgroup.ipv6mr_multiaddr = <span class=\"supfact\">addr</span>.sin6_addr;\n    if (*net_mcast6iface->string)\n      curgroup.ipv6mr_interface = if_nametoindex(net_mcast6iface->string);\n    else\n      curgroup.ipv6mr_interface = Number;\n  } else {\n    Com_Printf(String, net_mcast6addr->name);\n    Cvar_SetValue(net_enabled->name, (float)(net_enabled->integer | Number));\n  }\n}", "var": [{"name": "v1", "type": "struct sockaddr_in6 { sa_family_t sin6_family; in_port_t sin6_port; uint32_t_0 sin6_flowinfo; in6_addr_0 sin6_addr; uint32_t_0 sin6_scope_id; }", "ref_name": "addr", "ref_type": "struct sockaddr_in6 { sa_family_t sin6_family; in_port_t sin6_port; uint32_t_0 sin6_flowinfo; in6_addr_0 sin6_addr; uint32_t_0 sin6_scope_id; }"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/6fd7fcea23e76ad8ee4e55be03ffce93e451dd3f7cf424ad4763658c704304ab", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/Foundation/obj/Linux/x86_64/release_shared/Mutex.o", "objdump": "0000000000000210 <_ZN4Poco9MutexImpl11tryLockImplEl>:\n 210:\t41 54                \tpush   %r12\n 212:\t55                   \tpush   %rbp\n 213:\t48 89 fd             \tmov    %rdi,%rbp\n 216:\t53                   \tpush   %rbx\n 217:\t48 89 f3             \tmov    %rsi,%rbx\n 21a:\t31 f6                \txor    %esi,%esi\n 21c:\t48 83 ec 40          \tsub    $0x40,%rsp\n 220:\t48 8d 7c 24 10       \tlea    0x10(%rsp),%rdi\n 225:\te8 00 00 00 00       \tcallq  22a <_ZN4Poco9MutexImpl11tryLockImplEl+0x1a>\n 22a:\t48 89 d8             \tmov    %rbx,%rax\n 22d:\t48 8b 4c 24 10       \tmov    0x10(%rsp),%rcx\n 232:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n 239:\t9b c4 20 \n 23c:\t48 f7 ea             \timul   %rdx\n 23f:\t48 89 d8             \tmov    %rbx,%rax\n 242:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n 246:\t48 c1 fa 07          \tsar    $0x7,%rdx\n 24a:\t48 29 c2             \tsub    %rax,%rdx\n 24d:\t48 69 44 24 18 e8 03 \timul   $0x3e8,0x18(%rsp),%rax\n 254:\t00 00 \n 256:\t48 01 d1             \tadd    %rdx,%rcx\n 259:\t48 69 d2 e8 03 00 00 \timul   $0x3e8,%rdx,%rdx\n 260:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n 264:\t48 29 d3             \tsub    %rdx,%rbx\n 267:\t48 69 db 40 42 0f 00 \timul   $0xf4240,%rbx,%rbx\n 26e:\t48 01 c3             \tadd    %rax,%rbx\n 271:\t48 81 fb ff c9 9a 3b \tcmp    $0x3b9ac9ff,%rbx\n 278:\t7f 2e                \tjg     2a8 <_ZN4Poco9MutexImpl11tryLockImplEl+0x98>\n 27a:\t48 89 e6             \tmov    %rsp,%rsi\n 27d:\t48 89 ef             \tmov    %rbp,%rdi\n 280:\t48 89 5c 24 08       \tmov    %rbx,0x8(%rsp)\n 285:\te8 00 00 00 00       \tcallq  28a <_ZN4Poco9MutexImpl11tryLockImplEl+0x7a>\n 28a:\t85 c0                \ttest   %eax,%eax\n 28c:\t74 3d                \tje     2cb <_ZN4Poco9MutexImpl11tryLockImplEl+0xbb>\n 28e:\t83 f8 6e             \tcmp    $0x6e,%eax\n 291:\t0f 85 00 00 00 00    \tjne    297 <_ZN4Poco9MutexImpl11tryLockImplEl+0x87>\n 297:\t48 83 c4 40          \tadd    $0x40,%rsp\n 29b:\t31 c0                \txor    %eax,%eax\n 29d:\t5b                   \tpop    %rbx\n 29e:\t5d                   \tpop    %rbp\n 29f:\t41 5c                \tpop    %r12\n 2a1:\tc3                   \tretq   \n 2a2:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n 2a8:\t48 81 eb 00 ca 9a 3b \tsub    $0x3b9aca00,%rbx\n 2af:\t48 83 c1 01          \tadd    $0x1,%rcx\n 2b3:\t48 89 e6             \tmov    %rsp,%rsi\n 2b6:\t48 89 ef             \tmov    %rbp,%rdi\n 2b9:\t48 89 5c 24 08       \tmov    %rbx,0x8(%rsp)\n 2be:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n 2c2:\te8 00 00 00 00       \tcallq  2c7 <_ZN4Poco9MutexImpl11tryLockImplEl+0xb7>\n 2c7:\t85 c0                \ttest   %eax,%eax\n 2c9:\t75 c3                \tjne    28e <_ZN4Poco9MutexImpl11tryLockImplEl+0x7e>\n 2cb:\t48 83 c4 40          \tadd    $0x40,%rsp\n 2cf:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 2d4:\t5b                   \tpop    %rbx\n 2d5:\t5d                   \tpop    %rbp\n 2d6:\t41 5c                \tpop    %r12\n 2d8:\tc3                   \tretq   \n 2d9:\t90                   \tnop\n 2da:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)", "code_s": "__int64 __fastcall Poco MutexImpl tryLockImpl(\n    pthread_mutex_t *mutex, __int64 a2, __int64 a3, __int64 a4, __int64 a5,\n    __int64 a6, int <span class=\"supfact\">a7</span>, int <span class=\"supfact\">a8</span>,\n    int <span class=\"supfact\">a9</span>, void *<span class=\"supfact\">a10</span>, int <span class=\"supfact\">a11</span>,\n    char <span class=\"supfact\">a12</span>) {\n  __suseconds_t v12;\n  int v13;\n  int v14;\n  int v15;\n  int v16;\n  int v17;\n  struct timespec <span class=\"supfact\">v19</span>;\n  struct timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  <span class=\"supfact\">v19</span>.tv_sec = a2 / Number + <span class=\"supfact\">tv</span>.tv_sec;\n  v12 = Number * <span class=\"supfact\">tv</span>.tv_usec + Number * (a2 % Number);\n  if (v12 > Number) {\n    <span class=\"supfact\">v19</span>.tv_nsec = v12 - Number;\n    <span class=\"supfact\">v19</span>.tv_sec =\n        a2 / Number + <span class=\"supfact\">tv</span>.tv_sec + Number;\n    v13 = pthread_mutex_timedlock(mutex, &<span class=\"supfact\">v19</span>);\n    if (v13)\n      goto LABEL_3;\n    return Number L;\n  }\n  <span class=\"supfact\">v19</span>.tv_nsec =\n      Number * <span class=\"supfact\">tv</span>.tv_usec + Number * (a2 % Number);\n  v13 = pthread_mutex_timedlock(mutex, &<span class=\"supfact\">v19</span>);\n  if (!v13)\n    return Number L;\nLABEL_3:\n  if (v13 != Number)\n    Poco MutexImpl tryLockImpl((int)mutex, (int)&<span class=\"supfact\">v19</span>, v14, v15,\n                               v16, v17, <span class=\"supfact\">a7</span>, <span class=\"supfact\">a8</span>,\n                               <span class=\"supfact\">a9</span>, <span class=\"supfact\">a10</span>,\n                               <span class=\"supfact\">a11</span>, <span class=\"supfact\">a12</span>);\n  return Number L;\n}", "code_t": "__int64 __fastcall Poco MutexImpl tryLockImpl(\n    pthread_mutex_t *mutex, __int64 a2, __int64 a3, __int64 a4, __int64 a5,\n    __int64 a6, int a7, int a8, int a9, void *a10, int a11, char a12) {\n  __suseconds_t v12;\n  int v13;\n  int v14;\n  int v15;\n  int v16;\n  int v17;\n  struct timespec <span class=\"supfact\">v19</span>;\n  struct timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  <span class=\"supfact\">v19</span>.tv_sec = a2 / Number + <span class=\"supfact\">tv</span>.tv_sec;\n  v12 = Number * <span class=\"supfact\">tv</span>.tv_usec + Number * (a2 % Number);\n  if (v12 > Number) {\n    <span class=\"supfact\">v19</span>.tv_nsec = v12 - Number;\n    <span class=\"supfact\">v19</span>.tv_sec =\n        a2 / Number + <span class=\"supfact\">tv</span>.tv_sec + Number;\n    v13 = pthread_mutex_timedlock(mutex, &<span class=\"supfact\">v19</span>);\n    if (v13)\n      goto LABEL_3;\n    return Number L;\n  }\n  <span class=\"supfact\">v19</span>.tv_nsec =\n      Number * <span class=\"supfact\">tv</span>.tv_usec + Number * (a2 % Number);\n  v13 = pthread_mutex_timedlock(mutex, &<span class=\"supfact\">v19</span>);\n  if (!v13)\n    return Number L;\nLABEL_3:\n  if (v13 != Number)\n    Poco MutexImpl tryLockImpl((int)mutex, (int)&<span class=\"supfact\">v19</span>, v14, v15,\n                               v16, v17, a7, a8, a9, a10, a11, a12);\n  return Number L;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "v19", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "v19", "ref_type": "struct struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/a323a420a317e5b4bf9af3b8eeac0aece488d056f21dab47affbd8b3ddc42b6e", "path_in_repo": "jikk/intflow-llvm/utils/unittest/googletest/Debug+Asserts/gtest-death-test.o", "objdump": "0000000000000000 <_Z19GTestStreamToHelperIA40_cEvPSoRKT_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec 50 01 00 00 \tsub    $0x150,%rsp\n   b:\t48 89 bd b8 fe ff ff \tmov    %rdi,-0x148(%rbp)\n  12:\t48 89 b5 b0 fe ff ff \tmov    %rsi,-0x150(%rbp)\n  19:\t48 8b 95 b8 fe ff ff \tmov    -0x148(%rbp),%rdx\n  20:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  27:\t48 89 d6             \tmov    %rdx,%rsi\n  2a:\t48 89 c7             \tmov    %rax,%rdi\n  2d:\te8 00 00 00 00       \tcallq  32 <_Z19GTestStreamToHelperIA40_cEvPSoRKT_+0x32>\n  32:\t48 8b 95 b0 fe ff ff \tmov    -0x150(%rbp),%rdx\n  39:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  40:\t48 89 d6             \tmov    %rdx,%rsi\n  43:\t48 89 c7             \tmov    %rax,%rdi\n  46:\te8 00 00 00 00       \tcallq  4b <_Z19GTestStreamToHelperIA40_cEvPSoRKT_+0x4b>\n  4b:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  52:\t48 89 c7             \tmov    %rax,%rdi\n  55:\te8 00 00 00 00       \tcallq  5a <_Z19GTestStreamToHelperIA40_cEvPSoRKT_+0x5a>\n  5a:\t90                   \tnop\n  5b:\tc9                   \tleaveq \n  5c:\tc3                   \tretq   ", "code_s": "void __fastcall GTestStreamToHelper<char[Number]>(std ostream *a1, __int64 a2) {\n  char <span class=\"supfact\">v2</span>[Number];\n  llvm convertible_fwd_ostream convertible_fwd_ostream(\n      (llvm convertible_fwd_ostream *)<span class=\"supfact\">v2</span>, a1);\n  std operator<<<std char_traits<char>>(<span class=\"supfact\">v2</span>, a2);\n  llvm convertible_fwd_ostream ~convertible_fwd_ostream(\n      (llvm convertible_fwd_ostream *)<span class=\"supfact\">v2</span>);\n}", "code_t": "void __cdecl GTestStreamToHelper<char[Number]>(std ostream *os,\n                                               const char (*val)[Number]) {\n  llvm convertible_fwd_ostream <span class=\"supfact\">cos</span>;\n  llvm convertible_fwd_ostream convertible_fwd_ostream(&<span class=\"supfact\">cos</span>,\n                                                       os);\n  std operator<<<std char_traits<char>>(&<span class=\"supfact\">cos</span>, val);\n  llvm convertible_fwd_ostream ~convertible_fwd_ostream(&<span class=\"supfact\">cos</span>);\n}", "var": [{"name": "v2", "type": "struct llvm::convertible_fwd_ostream { __int8[8] baseclass_0; __int8[312] ros_; }", "ref_name": "cos", "ref_type": "struct llvm::convertible_fwd_ostream { __int8[8] baseclass_0; __int8[312] ros_; }"}], "body_in_train": false}, {"repo_owner": "jamesoft", "repo_name": "dcat", "path": "jamesoft/dcat/2b2a80590e54d01fa0ed675e97ffd75009b078344990493d73818d2cffcb0065", "path_in_repo": "jamesoft/dcat/lst/listener", "objdump": "000000000040222a <iocom_client>:\n  40222a:\t55                   \tpush   %rbp\n  40222b:\t48 89 e5             \tmov    %rsp,%rbp\n  40222e:\t48 83 ec 50          \tsub    $0x50,%rsp\n  402232:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  402236:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  40223a:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n  40223d:\tc7 45 fc 01 00 00 7f \tmovl   $0x7f000001,-0x4(%rbp)\n  402244:\t48 b8 41 4c 49 43 45 \tmovabs $0x4544204543494c41,%rax\n  40224b:\t20 44 45 \n  40224e:\t48 ba 46 41 55 4c 54 \tmovabs $0x444920544c554146,%rdx\n  402255:\t20 49 44 \n  402258:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  40225c:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  402260:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  402264:\t48 89 c7             \tmov    %rax,%rdi\n  402267:\te8 b4 ee ff ff       \tcallq  401120 <gethostbyname@plt>\n  40226c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  402270:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  402275:\t75 16                \tjne    40228d <iocom_client+0x63>\n  402277:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  40227b:\t48 89 c7             \tmov    %rax,%rdi\n  40227e:\te8 0d ef ff ff       \tcallq  401190 <perror@plt>\n  402283:\tb8 e0 fe ff ff       \tmov    $0xfffffee0,%eax\n  402288:\te9 47 01 00 00       \tjmpq   4023d4 <iocom_client+0x1aa>\n  40228d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  402291:\t8b 40 10             \tmov    0x10(%rax),%eax\n  402294:\t83 f8 02             \tcmp    $0x2,%eax\n  402297:\t75 0c                \tjne    4022a5 <iocom_client+0x7b>\n  402299:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40229d:\t8b 40 14             \tmov    0x14(%rax),%eax\n  4022a0:\t83 f8 04             \tcmp    $0x4,%eax\n  4022a3:\t74 28                \tje     4022cd <iocom_client+0xa3>\n  4022a5:\t48 8b 05 b4 3e 00 00 \tmov    0x3eb4(%rip),%rax        # 406160 <stderr@@GLIBC_2.2.5>\n  4022ac:\t48 89 c1             \tmov    %rax,%rcx\n  4022af:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n  4022b4:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4022b9:\tbf 00 42 40 00       \tmov    $0x404200,%edi\n  4022be:\te8 2d ef ff ff       \tcallq  4011f0 <fwrite@plt>\n  4022c3:\tb8 dc fe ff ff       \tmov    $0xfffffedc,%eax\n  4022c8:\te9 07 01 00 00       \tjmpq   4023d4 <iocom_client+0x1aa>\n  4022cd:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4022d1:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4022d5:\t48 8b 00             \tmov    (%rax),%rax\n  4022d8:\t8b 00                \tmov    (%rax),%eax\n  4022da:\t89 c7                \tmov    %eax,%edi\n  4022dc:\te8 1f ef ff ff       \tcallq  401200 <ntohl@plt>\n  4022e1:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4022e4:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4022e9:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4022ee:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  4022f3:\te8 48 ef ff ff       \tcallq  401240 <socket@plt>\n  4022f8:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4022fc:\t89 02                \tmov    %eax,(%rdx)\n  4022fe:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  402302:\t8b 00                \tmov    (%rax),%eax\n  402304:\t85 c0                \ttest   %eax,%eax\n  402306:\t79 14                \tjns    40231c <iocom_client+0xf2>\n  402308:\tbf 20 42 40 00       \tmov    $0x404220,%edi\n  40230d:\te8 7e ee ff ff       \tcallq  401190 <perror@plt>\n  402312:\tb8 d4 fe ff ff       \tmov    $0xfffffed4,%eax\n  402317:\te9 b8 00 00 00       \tjmpq   4023d4 <iocom_client+0x1aa>\n  40231c:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  402320:\tba 10 00 00 00       \tmov    $0x10,%edx\n  402325:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40232a:\t48 89 c7             \tmov    %rax,%rdi\n  40232d:\te8 9e ed ff ff       \tcallq  4010d0 <memset@plt>\n  402332:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n  402338:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40233b:\t89 c7                \tmov    %eax,%edi\n  40233d:\te8 7e ed ff ff       \tcallq  4010c0 <htonl@plt>\n  402342:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  402345:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  402348:\t0f b7 c0             \tmovzwl %ax,%eax\n  40234b:\t89 c7                \tmov    %eax,%edi\n  40234d:\te8 3e ed ff ff       \tcallq  401090 <htons@plt>\n  402352:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n  402356:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40235a:\t8b 00                \tmov    (%rax),%eax\n  40235c:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  402360:\tba 10 00 00 00       \tmov    $0x10,%edx\n  402365:\t48 89 ce             \tmov    %rcx,%rsi\n  402368:\t89 c7                \tmov    %eax,%edi\n  40236a:\te8 71 ee ff ff       \tcallq  4011e0 <connect@plt>\n  40236f:\t85 c0                \ttest   %eax,%eax\n  402371:\t79 11                \tjns    402384 <iocom_client+0x15a>\n  402373:\tbf 29 42 40 00       \tmov    $0x404229,%edi\n  402378:\te8 13 ee ff ff       \tcallq  401190 <perror@plt>\n  40237d:\tb8 cb fe ff ff       \tmov    $0xfffffecb,%eax\n  402382:\teb 50                \tjmp    4023d4 <iocom_client+0x1aa>\n  402384:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  402388:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40238c:\t48 89 d6             \tmov    %rdx,%rsi\n  40238f:\t48 89 c7             \tmov    %rax,%rdi\n  402392:\te8 92 09 00 00       \tcallq  402d29 <cblnk_hand>\n  402397:\t85 c0                \ttest   %eax,%eax\n  402399:\t78 17                \tjs     4023b2 <iocom_client+0x188>\n  40239b:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  40239f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4023a3:\t48 89 d6             \tmov    %rdx,%rsi\n  4023a6:\t48 89 c7             \tmov    %rax,%rdi\n  4023a9:\te8 49 0a 00 00       \tcallq  402df7 <cblnk_shake_alice>\n  4023ae:\t85 c0                \ttest   %eax,%eax\n  4023b0:\t79 07                \tjns    4023b9 <iocom_client+0x18f>\n  4023b2:\tb8 c5 fe ff ff       \tmov    $0xfffffec5,%eax\n  4023b7:\teb 1b                \tjmp    4023d4 <iocom_client+0x1aa>\n  4023b9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4023bd:\tba 00 20 00 00       \tmov    $0x2000,%edx\n  4023c2:\tbe 00 10 00 00       \tmov    $0x1000,%esi\n  4023c7:\t48 89 c7             \tmov    %rax,%rdi\n  4023ca:\te8 06 fb ff ff       \tcallq  401ed5 <iocom_comms>\n  4023cf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4023d4:\tc9                   \tleaveq \n  4023d5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall iocom_client(int *a1, const char *a2, uint16_t a3) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  struct sockaddr <span class=\"supfact\">s</span>;\n  struct hostent *<span class=\"supfact\">v7</span>;\n  uint32_t <span class=\"supfact\">hostlong</span>;\n  <span class=\"supfact\">hostlong</span> = Number;\n  qmemcpy(<span class=\"supfact\">v5</span>, String, sizeof(<span class=\"supfact\">v5</span>));\n  <span class=\"supfact\">v7</span> = gethostbyname(a2);\n  if (<span class=\"supfact\">v7</span>) {\n    if (<span class=\"supfact\">v7</span>->h_addrtype == Number &&\n        <span class=\"supfact\">v7</span>->h_length == Number) {\n      <span class=\"supfact\">hostlong</span> =\n          ntohl(**(_DWORD **)<span class=\"supfact\">v7</span>->h_addr_list);\n      *a1 = socket(Number, Number, Number);\n      if (*a1 >= Number) {\n        memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n        <span class=\"supfact\">s</span>.sa_family = Number;\n        *(_DWORD *)&<span class=\"supfact\">s</span>.sa_data[Number] =\n            htonl(<span class=\"supfact\">hostlong</span>);\n        *(_WORD *)<span class=\"supfact\">s</span>.sa_data = htons(a3);\n        if (connect(*a1, &<span class=\"supfact\">s</span>, Number) >= Number) {\n          if ((int)cblnk_hand(a1, <span class=\"supfact\">v5</span>) >= Number &&\n              (int)cblnk_shake_alice(a1, <span class=\"supfact\">v5</span>) >= Number) {\n            iocom_comms(a1, Number, Number);\n            result = Number L;\n          } else {\n            result = Number L;\n          }\n        } else {\n          perror(String);\n          result = Number L;\n        }\n      } else {\n        perror(String);\n        result = Number L;\n      }\n    } else {\n      fwrite(String, Number, Number, stderr);\n      result = Number L;\n    }\n  } else {\n    perror(a2);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl iocom_client(cb0cat_t *cx_0, char *hostname, int port) {\n  int result;\n  uint16_t porta;\n  uint8_t <span class=\"supfact\">aliceid</span>[Number];\n  sockaddr_in <span class=\"supfact\">addr</span>;\n  hostent *<span class=\"supfact\">he</span>;\n  uint32_t <span class=\"supfact\">host</span>;\n  porta = port;\n  <span class=\"supfact\">host</span> = Number;\n  qmemcpy(<span class=\"supfact\">aliceid</span>, String, sizeof(<span class=\"supfact\">aliceid</span>));\n  <span class=\"supfact\">he</span> = gethostbyname(hostname);\n  if (<span class=\"supfact\">he</span>) {\n    if (<span class=\"supfact\">he</span>->h_addrtype == Number &&\n        <span class=\"supfact\">he</span>->h_length == Number) {\n      <span class=\"supfact\">host</span> =\n          ntohl(**(_DWORD **)<span class=\"supfact\">he</span>->h_addr_list);\n      cx_0->sck = socket(Number, Number, Number);\n      if (cx_0->sck >= Number) {\n        memset(&<span class=\"supfact\">addr</span>, Number, sizeof(<span class=\"supfact\">addr</span>));\n        <span class=\"supfact\">addr</span>.sin_family = Number;\n        <span class=\"supfact\">addr</span>.sin_addr.s_addr = htonl(<span class=\"supfact\">host</span>);\n        <span class=\"supfact\">addr</span>.sin_port = htons(porta);\n        if (connect(cx_0->sck, (const struct sockaddr *)&<span class=\"supfact\">addr</span>,\n                    Number) >= Number) {\n          if (cblnk_hand(cx_0, <span class=\"supfact\">aliceid</span>) >= Number &&\n              cblnk_shake_alice(cx_0, <span class=\"supfact\">aliceid</span>) >= Number) {\n            iocom_comms(cx_0, Number, Number);\n            result = Number;\n          } else {\n            result = Number;\n          }\n        } else {\n          perror(String);\n          result = Number;\n        }\n      } else {\n        perror(String);\n        result = Number;\n      }\n    } else {\n      fwrite(String, Number, Number, stderr);\n      result = Number;\n    }\n  } else {\n    perror(hostname);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "s", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "sslab-gatech", "repo_name": "janus", "path": "sslab-gatech/janus/1dd11b101682284153534b1391faa5b2a1aaf4e7663bb3ede73e7c42ea9fb148", "path_in_repo": "sslab-gatech/janus/core/create_corpus.o", "objdump": "0000000000000000 <_ZN7Program14remove_file_fdEl>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 30          \tsub    $0x30,%rsp\n   b:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   f:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  13:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  17:\t48 8d 58 48          \tlea    0x48(%rax),%rbx\n  1b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  1f:\t48 83 c0 48          \tadd    $0x48,%rax\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZN7Program14remove_file_fdEl+0x2b>\n  2b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  2f:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  33:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  37:\t48 89 d6             \tmov    %rdx,%rsi\n  3a:\t48 89 c7             \tmov    %rax,%rdi\n  3d:\te8 00 00 00 00       \tcallq  42 <_ZN7Program14remove_file_fdEl+0x42>\n  42:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  46:\t48 83 c0 48          \tadd    $0x48,%rax\n  4a:\t48 89 c7             \tmov    %rax,%rdi\n  4d:\te8 00 00 00 00       \tcallq  52 <_ZN7Program14remove_file_fdEl+0x52>\n  52:\t49 89 c4             \tmov    %rax,%r12\n  55:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  59:\t48 83 c0 48          \tadd    $0x48,%rax\n  5d:\t48 89 c7             \tmov    %rax,%rdi\n  60:\te8 00 00 00 00       \tcallq  65 <_ZN7Program14remove_file_fdEl+0x65>\n  65:\t48 89 c1             \tmov    %rax,%rcx\n  68:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  6c:\t48 89 c2             \tmov    %rax,%rdx\n  6f:\t4c 89 e6             \tmov    %r12,%rsi\n  72:\t48 89 cf             \tmov    %rcx,%rdi\n  75:\te8 00 00 00 00       \tcallq  7a <_ZN7Program14remove_file_fdEl+0x7a>\n  7a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  7e:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n  82:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  86:\t48 89 d6             \tmov    %rdx,%rsi\n  89:\t48 89 c7             \tmov    %rax,%rdi\n  8c:\te8 00 00 00 00       \tcallq  91 <_ZN7Program14remove_file_fdEl+0x91>\n  91:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  95:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  99:\t48 89 c6             \tmov    %rax,%rsi\n  9c:\t48 89 df             \tmov    %rbx,%rdi\n  9f:\te8 00 00 00 00       \tcallq  a4 <_ZN7Program14remove_file_fdEl+0xa4>\n  a4:\teb 08                \tjmp    ae <_ZN7Program14remove_file_fdEl+0xae>\n  a6:\t48 89 c7             \tmov    %rax,%rdi\n  a9:\te8 00 00 00 00       \tcallq  ae <_ZN7Program14remove_file_fdEl+0xae>\n  ae:\t48 83 c4 30          \tadd    $0x30,%rsp\n  b2:\t5b                   \tpop    %rbx\n  b3:\t41 5c                \tpop    %r12\n  b5:\t5d                   \tpop    %rbp\n  b6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Program remove_file_fd(Program *this, __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  <span class=\"supfact\">v5</span>[Number] = (__int64)this;\n  <span class=\"supfact\">v5</span>[Number] = a2;\n  <span class=\"supfact\">v7</span> = std vector<long> end((char *)this + Number);\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">v6</span>, &<span class=\"supfact\">v7</span>);\n  v2 = std vector<long> end((char *)this + Number);\n  v3 = std vector<long> begin((char *)this + Number);\n  <span class=\"supfact\">v9</span>[Number] =\n      std remove<__gnu_cxx __normal_iterator<long *, std vector<long>>, long>(\n          v3, v2, <span class=\"supfact\">v5</span>);\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">v8</span>, <span class=\"supfact\">v9</span>);\n  return std vector<long> erase((char *)this + Number, <span class=\"supfact\">v8</span>,\n                                <span class=\"supfact\">v6</span>);\n}", "code_t": "void __cdecl Program remove_file_fd(Program *const this, int64_t fd_index) {\n  __int64 *v2;\n  std vector<long int> iterator v3;\n  int64_t <span class=\"supfact\">fd_indexa</span>;\n  Program *thisa;\n  __gnu_cxx __normal_iterator<long int const *, std vector<long int>>\n      <span class=\"supfact\">__last</span>;\n  __gnu_cxx __normal_iterator<long int *, std vector<long int>>\n      <span class=\"supfact\">__i</span>;\n  __gnu_cxx __normal_iterator<long int const *, std vector<long int>>\n      <span class=\"supfact\">__first</span>;\n  __gnu_cxx __normal_iterator<long int *, std vector<long int>>\n      <span class=\"supfact\">v9</span>;\n  thisa = this;\n  <span class=\"supfact\">fd_indexa</span> = fd_index;\n  <span class=\"supfact\">__i</span>._M_current =\n      std vector<long> end(&this->active_file_fds)._M_current;\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">__last</span>, &<span class=\"supfact\">__i</span>);\n  v2 = std vector<long> end(&this->active_file_fds)._M_current;\n  v3._M_current = std vector<long> begin(&this->active_file_fds)._M_current;\n  <span class=\"supfact\">v9</span>._M_current =\n      std remove<__gnu_cxx __normal_iterator<long *, std vector<long>>, long>(\n          v3, (__gnu_cxx __normal_iterator<long int *, std vector<long int>>)v2,\n          &<span class=\"supfact\">fd_indexa</span>)\n          ._M_current;\n  __gnu_cxx __normal_iterator<long const *, std vector<long>>\n      __normal_iterator<long *>(&<span class=\"supfact\">__first</span>, &<span class=\"supfact\">v9</span>);\n  std vector<long> erase(&this->active_file_fds, <span class=\"supfact\">__first</span>,\n                         <span class=\"supfact\">__last</span>);\n}", "var": [{"name": "v9", "type": "__int64[3]", "ref_name": "v9", "ref_type": "struct __gnu_cxx::__normal_iterator<long int*,std::vector<long int> > { __int64 * _M_current; }"}, {"name": "v8", "type": "__int64", "ref_name": "__first", "ref_type": "struct __gnu_cxx::__normal_iterator<long int const*,std::vector<long int> > { const __int64 * _M_current; }"}, {"name": "v7", "type": "__int64", "ref_name": "__i", "ref_type": "struct __gnu_cxx::__normal_iterator<long int*,std::vector<long int> > { __int64 * _M_current; }"}, {"name": "v6", "type": "__int64", "ref_name": "__last", "ref_type": "struct __gnu_cxx::__normal_iterator<long int const*,std::vector<long int> > { const __int64 * _M_current; }"}], "body_in_train": false}, {"repo_owner": "greguu", "repo_name": "linux-4.14.18-c3x00", "path": "greguu/linux-4.14.18-c3x00/45ff5563159ea896cdc2e057fad76d8a729406f27ab115d4684886f244d25df6", "path_in_repo": "greguu/linux-4.14.18-c3x00/tools/perf/util/header.o", "objdump": "00000000000075a2 <perf_header__read_pipe>:\n    75a2:\t55                   \tpush   %rbp\n    75a3:\t48 89 e5             \tmov    %rsp,%rbp\n    75a6:\t53                   \tpush   %rbx\n    75a7:\t48 83 ec 48          \tsub    $0x48,%rsp\n    75ab:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    75af:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    75b6:\t00 00 \n    75b8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    75bc:\t31 c0                \txor    %eax,%eax\n    75be:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    75c2:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    75c6:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    75ca:\t0f b6 80 e8 02 00 00 \tmovzbl 0x2e8(%rax),%eax\n    75d1:\t0f b6 d8             \tmovzbl %al,%ebx\n    75d4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    75d8:\t48 8b 80 88 03 00 00 \tmov    0x388(%rax),%rax\n    75df:\t48 89 c7             \tmov    %rax,%rdi\n    75e2:\te8 4a 8d ff ff       \tcallq  331 <perf_data_file__fd>\n    75e7:\t89 c2                \tmov    %eax,%edx\n    75e9:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n    75ed:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    75f1:\t89 d9                \tmov    %ebx,%ecx\n    75f3:\t48 89 c7             \tmov    %rax,%rdi\n    75f6:\te8 64 fe ff ff       \tcallq  745f <perf_file_header__read_pipe>\n    75fb:\t85 c0                \ttest   %eax,%eax\n    75fd:\t79 23                \tjns    7622 <perf_header__read_pipe+0x80>\n    75ff:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7605 <perf_header__read_pipe+0x63>\n    7605:\tba 00 00 00 00       \tmov    $0x0,%edx\n    760a:\t89 c6                \tmov    %eax,%esi\n    760c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    7611:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7616:\te8 00 00 00 00       \tcallq  761b <perf_header__read_pipe+0x79>\n    761b:\tb8 ea ff ff ff       \tmov    $0xffffffea,%eax\n    7620:\teb 05                \tjmp    7627 <perf_header__read_pipe+0x85>\n    7622:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7627:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    762b:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    7632:\t00 00 \n    7634:\t74 05                \tje     763b <perf_header__read_pipe+0x99>\n    7636:\te8 00 00 00 00       \tcallq  763b <perf_header__read_pipe+0x99>\n    763b:\t48 83 c4 48          \tadd    $0x48,%rsp\n    763f:\t5b                   \tpop    %rbx\n    7640:\t5d                   \tpop    %rbp\n    7641:\tc3                   \tretq   ", "code_s": "__int64 __fastcall perf_header__read_pipe(__int64 a1, float a2, double a3) {\n  char v3;\n  unsigned int v4;\n  unsigned __int64 <span class=\"supfact\">v6</span>[Number];\n  <span class=\"supfact\">v6</span>[Number] = __readfsqword(Number);\n  v3 = *(_BYTE *)(a1 + Number);\n  v4 = perf_data_file(a2, a3, *(_QWORD *)(a1 + Number));\n  if ((int)perf_file_header__read_pipe(<span class=\"supfact\">v6</span>, a1, v4, v3) >=\n      Number)\n    return Number L;\n  eprintf(Number L, verbose, String);\n  return Number L;\n}", "code_t": "int __cdecl perf_header__read_pipe(perf_session *session) {\n  bool v1;\n  int v2;\n  perf_pipe_file_header <span class=\"supfact\">f_header</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  v1 = session->repipe;\n  v2 = perf_data_file(session->file);\n  if (perf_file_header__read_pipe(&<span class=\"supfact\">f_header</span>, &session->header,\n                                  v2, v1) >= Number)\n    return Number;\n  eprintf(Number L, verbose, String);\n  return Number;\n}", "var": [{"name": "v6", "type": "struct perf_pipe_file_header { u64 magic; u64 size; }", "ref_name": "f_header", "ref_type": "struct perf_pipe_file_header { u64 magic; u64 size; }"}], "body_in_train": false}, {"repo_owner": "josephgbr", "repo_name": "cups-pt_BR", "path": "josephgbr/cups-pt_BR/61631ff58bfd371bb97bacda63b6428d029c05735ea41300fc05764c1536020d", "path_in_repo": "josephgbr/cups-pt_BR/cups-2.1.2/scheduler/select.o", "objdump": "00000000000006d4 <cupsdRemoveSelect>:\n 6d4:\t55                   \tpush   %rbp\n 6d5:\t48 89 e5             \tmov    %rsp,%rbp\n 6d8:\t48 83 ec 30          \tsub    $0x30,%rsp\n 6dc:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n 6df:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 6e2:\t89 c2                \tmov    %eax,%edx\n 6e4:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 6eb <cupsdRemoveSelect+0x17>\n 6eb:\tbf 09 00 00 00       \tmov    $0x9,%edi\n 6f0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 6f5:\te8 00 00 00 00       \tcallq  6fa <cupsdRemoveSelect+0x26>\n 6fa:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n 6fe:\t0f 88 b9 00 00 00    \tjs     7bd <cupsdRemoveSelect+0xe9>\n 704:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 707:\t89 c7                \tmov    %eax,%edi\n 709:\te8 70 02 00 00       \tcallq  97e <find_fd>\n 70e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 712:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 717:\t0f 84 a3 00 00 00    \tje     7c0 <cupsdRemoveSelect+0xec>\n 71d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 723 <cupsdRemoveSelect+0x4f>\n 723:\t48 8d 4d f4          \tlea    -0xc(%rbp),%rcx\n 727:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n 72a:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 72f:\t89 c7                \tmov    %eax,%edi\n 731:\te8 00 00 00 00       \tcallq  736 <cupsdRemoveSelect+0x62>\n 736:\t85 c0                \ttest   %eax,%eax\n 738:\t74 21                \tje     75b <cupsdRemoveSelect+0x87>\n 73a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 740 <cupsdRemoveSelect+0x6c>\n 740:\t89 c7                \tmov    %eax,%edi\n 742:\te8 00 00 00 00       \tcallq  747 <cupsdRemoveSelect+0x73>\n 747:\tc7 05 00 00 00 00 ff \tmovl   $0xffffffff,0x0(%rip)        # 751 <cupsdRemoveSelect+0x7d>\n 74e:\tff ff ff \n 751:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 75b <cupsdRemoveSelect+0x87>\n 758:\t00 00 00 \n 75b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 762 <cupsdRemoveSelect+0x8e>\n 762:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 766:\t48 89 d6             \tmov    %rdx,%rsi\n 769:\t48 89 c7             \tmov    %rax,%rdi\n 76c:\te8 00 00 00 00       \tcallq  771 <cupsdRemoveSelect+0x9d>\n 771:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 777 <cupsdRemoveSelect+0xa3>\n 777:\t85 c0                \ttest   %eax,%eax\n 779:\t74 18                \tje     793 <cupsdRemoveSelect+0xbf>\n 77b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 782 <cupsdRemoveSelect+0xae>\n 782:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 786:\t48 89 d6             \tmov    %rdx,%rsi\n 789:\t48 89 c7             \tmov    %rax,%rdi\n 78c:\te8 00 00 00 00       \tcallq  791 <cupsdRemoveSelect+0xbd>\n 791:\teb 2e                \tjmp    7c1 <cupsdRemoveSelect+0xed>\n 793:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 797:\t8b 40 04             \tmov    0x4(%rax),%eax\n 79a:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n 79d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 7a1:\t89 50 04             \tmov    %edx,0x4(%rax)\n 7a4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 7a8:\t8b 40 04             \tmov    0x4(%rax),%eax\n 7ab:\t85 c0                \ttest   %eax,%eax\n 7ad:\t75 12                \tjne    7c1 <cupsdRemoveSelect+0xed>\n 7af:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 7b3:\t48 89 c7             \tmov    %rax,%rdi\n 7b6:\te8 00 00 00 00       \tcallq  7bb <cupsdRemoveSelect+0xe7>\n 7bb:\teb 04                \tjmp    7c1 <cupsdRemoveSelect+0xed>\n 7bd:\t90                   \tnop\n 7be:\teb 01                \tjmp    7c1 <cupsdRemoveSelect+0xed>\n 7c0:\t90                   \tnop\n 7c1:\tc9                   \tleaveq \n 7c2:\tc3                   \tretq   ", "code_s": "void __fastcall cupsdRemoveSelect(int a1) {\n  _DWORD *<span class=\"supfact\">ptr</span>;\n  struct epoll_event <span class=\"supfact\">event</span>;\n  cupsdLogMessage(Number L, String, (unsigned int)a1);\n  if (a1 >= Number) {\n    <span class=\"supfact\">ptr</span> = (_DWORD *)find_fd((unsigned int)a1);\n    if (<span class=\"supfact\">ptr</span>) {\n      if (epoll_ctl(cupsd_epoll_fd, Number, a1, &<span class=\"supfact\">event</span>)) {\n        close(cupsd_epoll_fd);\n        cupsd_epoll_fd = Number;\n        cupsd_update_pollfds = Number;\n      }\n      cupsArrayRemove(cupsd_fds, <span class=\"supfact\">ptr</span>);\n      if (cupsd_in_select) {\n        cupsArrayAdd(cupsd_inactive_fds, <span class=\"supfact\">ptr</span>);\n      } else if (!--<span class=\"supfact\">ptr</span>[Number]) {\n        free(<span class=\"supfact\">ptr</span>);\n      }\n    }\n  }\n}", "code_t": "void __cdecl cupsdRemoveSelect(int fd) {\n  _cupsd_fd_t *<span class=\"supfact\">fdptr</span>;\n  epoll_event <span class=\"supfact\">event</span>;\n  cupsdLogMessage(Number L, String, (unsigned int)fd);\n  if (fd >= Number) {\n    <span class=\"supfact\">fdptr</span> = find_fd(fd);\n    if (<span class=\"supfact\">fdptr</span>) {\n      if (epoll_ctl(cupsd_epoll_fd, Number, fd, &<span class=\"supfact\">event</span>)) {\n        close(cupsd_epoll_fd);\n        cupsd_epoll_fd = Number;\n        cupsd_update_pollfds = Number;\n      }\n      cupsArrayRemove(cupsd_fds, <span class=\"supfact\">fdptr</span>);\n      if (cupsd_in_select) {\n        cupsArrayAdd(cupsd_inactive_fds, <span class=\"supfact\">fdptr</span>);\n      } else if (!--<span class=\"supfact\">fdptr</span>->use) {\n        free(<span class=\"supfact\">fdptr</span>);\n      }\n    }\n  }\n}", "var": [{"name": "event", "type": "struct epoll_event { uint32_t events; epoll_data_t data; }", "ref_name": "event", "ref_type": "struct epoll_event { uint32_t events; epoll_data_t data; }"}], "body_in_train": false}, {"repo_owner": "pathscale", "repo_name": "absoft", "path": "pathscale/absoft/6674f3caead8e13121201a428754f8ce648e8cb68ae84bd4ab0ca86b61b41f90", "path_in_repo": "pathscale/absoft/svn/trunk/kpro64/targx8664_builtonia32/libfortran/pxfsigsuspend.pic.o", "objdump": "0000000000000026 <_PXFSIGSUSPEND>:\n  26:\t55                   \tpush   %rbp\n  27:\t48 89 e5             \tmov    %rsp,%rbp\n  2a:\t53                   \tpush   %rbx\n  2b:\t48 81 ec b8 00 00 00 \tsub    $0xb8,%rsp\n  32:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n  39:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n  40:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n  47:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n  4d:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  54:\t8b 00                \tmov    (%rax),%eax\n  56:\t89 c6                \tmov    %eax,%esi\n  58:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5f <_PXFSIGSUSPEND+0x39>\n  5f:\t48 89 c7             \tmov    %rax,%rdi\n  62:\te8 00 00 00 00       \tcallq  67 <_PXFSIGSUSPEND+0x41>\n  67:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n  6e:\t48 89 95 58 ff ff ff \tmov    %rdx,-0xa8(%rbp)\n  75:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  7c:\t48 85 c0             \ttest   %rax,%rax\n  7f:\t74 0b                \tje     8c <_PXFSIGSUSPEND+0x66>\n  81:\t8b 85 58 ff ff ff    \tmov    -0xa8(%rbp),%eax\n  87:\t83 f8 09             \tcmp    $0x9,%eax\n  8a:\t74 12                \tje     9e <_PXFSIGSUSPEND+0x78>\n  8c:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n  93:\tc7 00 f7 12 00 00    \tmovl   $0x12f7,(%rax)\n  99:\te9 bb 00 00 00       \tjmpq   159 <_PXFSIGSUSPEND+0x133>\n  9e:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  a5:\t48 8b 08             \tmov    (%rax),%rcx\n  a8:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n  ac:\t48 89 8d 60 ff ff ff \tmov    %rcx,-0xa0(%rbp)\n  b3:\t48 89 9d 68 ff ff ff \tmov    %rbx,-0x98(%rbp)\n  ba:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n  be:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  c2:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n  c9:\t48 89 9d 78 ff ff ff \tmov    %rbx,-0x88(%rbp)\n  d0:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  d4:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n  d8:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n  dc:\t48 89 5d 88          \tmov    %rbx,-0x78(%rbp)\n  e0:\t48 8b 48 30          \tmov    0x30(%rax),%rcx\n  e4:\t48 8b 58 38          \tmov    0x38(%rax),%rbx\n  e8:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n  ec:\t48 89 5d 98          \tmov    %rbx,-0x68(%rbp)\n  f0:\t48 8b 48 40          \tmov    0x40(%rax),%rcx\n  f4:\t48 8b 58 48          \tmov    0x48(%rax),%rbx\n  f8:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n  fc:\t48 89 5d a8          \tmov    %rbx,-0x58(%rbp)\n 100:\t48 8b 48 50          \tmov    0x50(%rax),%rcx\n 104:\t48 8b 58 58          \tmov    0x58(%rax),%rbx\n 108:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n 10c:\t48 89 5d b8          \tmov    %rbx,-0x48(%rbp)\n 110:\t48 8b 48 60          \tmov    0x60(%rax),%rcx\n 114:\t48 8b 58 68          \tmov    0x68(%rax),%rbx\n 118:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n 11c:\t48 89 5d c8          \tmov    %rbx,-0x38(%rbp)\n 120:\t48 8b 50 78          \tmov    0x78(%rax),%rdx\n 124:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n 128:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 12c:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n 130:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n 137:\t48 89 c7             \tmov    %rax,%rdi\n 13a:\te8 00 00 00 00       \tcallq  13f <_PXFSIGSUSPEND+0x119>\n 13f:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 142:\t83 7d ec ff          \tcmpl   $0xffffffff,-0x14(%rbp)\n 146:\t75 10                \tjne    158 <_PXFSIGSUSPEND+0x132>\n 148:\te8 00 00 00 00       \tcallq  14d <_PXFSIGSUSPEND+0x127>\n 14d:\t8b 10                \tmov    (%rax),%edx\n 14f:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n 156:\t89 10                \tmov    %edx,(%rax)\n 158:\t90                   \tnop\n 159:\t48 81 c4 b8 00 00 00 \tadd    $0xb8,%rsp\n 160:\t5b                   \tpop    %rbx\n 161:\t5d                   \tpop    %rbp\n 162:\tc3                   \tretq   ", "code_s": "int __fastcall PXFSIGSUSPEND(unsigned int *a1, int *a2) {\n  int v2;\n  int result;\n  unsigned __int64 v4;\n  unsigned __int64 v5;\n  unsigned __int64 v6;\n  unsigned __int64 v7;\n  unsigned __int64 v8;\n  unsigned __int64 v9;\n  unsigned __int64 v10;\n  unsigned __int64 v11;\n  int v12;\n  unsigned __int64 *<span class=\"supfact\">v13</span>;\n  sigset_t <span class=\"supfact\">set</span>;\n  int <span class=\"supfact\">v15</span>;\n  *a2 = Number;\n  <span class=\"supfact\">v13</span> =\n      (unsigned __int64 *)pxfhandle_table_lookup(&pxfhandle_table, *a1);\n  if (<span class=\"supfact\">v13</span> && v2 == Number) {\n    v4 = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = *<span class=\"supfact\">v13</span>;\n    <span class=\"supfact\">set</span>.__val[Number] = v4;\n    v5 = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = v5;\n    v6 = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = v6;\n    v7 = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = v7;\n    v8 = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = v8;\n    v9 = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = v9;\n    v10 = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = v10;\n    v11 = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = <span class=\"supfact\">v13</span>[Number];\n    <span class=\"supfact\">set</span>.__val[Number] = v11;\n    result = sigsuspend(&<span class=\"supfact\">set</span>);\n    <span class=\"supfact\">v15</span> = result;\n    if (result == Number) {\n      v12 = *_errno_location();\n      result = (int)a2;\n      *a2 = v12;\n    }\n  } else {\n    result = (int)a2;\n    *a2 = Number;\n  }\n  return result;\n}", "code_t": "void __cdecl PXFSIGSUSPEND(_f_int *jsigset, _f_int *ierror) {\n  int v2;\n  unsigned __int64 v3;\n  unsigned __int64 v4;\n  unsigned __int64 v5;\n  unsigned __int64 v6;\n  unsigned __int64 v7;\n  unsigned __int64 v8;\n  unsigned __int64 v9;\n  unsigned __int64 v10;\n  unsigned __int64 *<span class=\"supfact\">pxfhand</span>;\n  sigset_t <span class=\"supfact\">mask</span>;\n  int <span class=\"supfact\">stat</span>;\n  *ierror = Number;\n  <span class=\"supfact\">pxfhand</span> = (unsigned __int64 *)pxfhandle_table_lookup(\n      &pxfhandle_table, (unsigned int)*jsigset);\n  if (<span class=\"supfact\">pxfhand</span> && v2 == Number) {\n    v3 = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = *<span class=\"supfact\">pxfhand</span>;\n    <span class=\"supfact\">mask</span>.__val[Number] = v3;\n    v4 = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = v4;\n    v5 = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = v5;\n    v6 = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = v6;\n    v7 = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = v7;\n    v8 = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = v8;\n    v9 = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = v9;\n    v10 = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = <span class=\"supfact\">pxfhand</span>[Number];\n    <span class=\"supfact\">mask</span>.__val[Number] = v10;\n    <span class=\"supfact\">stat</span> = sigsuspend(&<span class=\"supfact\">mask</span>);\n    if (<span class=\"supfact\">stat</span> == Number)\n      *ierror = *_errno_location();\n  } else {\n    *ierror = Number;\n  }\n}", "var": [{"name": "set", "type": "struct sigset_t { unsigned __int64[16] __val; }", "ref_name": "mask", "ref_type": "struct sigset_t { unsigned __int64[16] __val; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/560880a0d78a16c1d09b1d26c617d93994fcc3deea10e346cbe2cb3ba3e3c537", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/royalmah.o", "objdump": "0000000000016b4c <_ZL33construct_machine_config_daisyariR14machine_configP8device_t>:\n   16b4c:\t55                   \tpush   %rbp\n   16b4d:\t48 89 e5             \tmov    %rsp,%rbp\n   16b50:\t53                   \tpush   %rbx\n   16b51:\t48 83 ec 68          \tsub    $0x68,%rsp\n   16b55:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   16b59:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n   16b5d:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   16b64:\t00 \n   16b65:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   16b69:\t48 89 c7             \tmov    %rax,%rdi\n   16b6c:\te8 00 00 00 00       \tcallq  16b71 <_ZL33construct_machine_config_daisyariR14machine_configP8device_t+0x25>\n   16b71:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n   16b75:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   16b79:\t48 89 d6             \tmov    %rdx,%rsi\n   16b7c:\t48 89 c7             \tmov    %rax,%rdi\n   16b7f:\te8 05 f9 ff ff       \tcallq  16489 <_ZL33construct_machine_config_royalmahR14machine_configP8device_t>\n   16b84:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n   16b88:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n   16b8c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   16b90:\tba 00 00 00 00       \tmov    $0x0,%edx\n   16b95:\t48 89 ce             \tmov    %rcx,%rsi\n   16b98:\t48 89 c7             \tmov    %rax,%rdi\n   16b9b:\te8 00 00 00 00       \tcallq  16ba0 <_ZL33construct_machine_config_daisyariR14machine_configP8device_t+0x54>\n   16ba0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   16ba4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   16ba8:\tbe 00 09 3d 00       \tmov    $0x3d0900,%esi\n   16bad:\t48 89 c7             \tmov    %rax,%rdi\n   16bb0:\te8 00 00 00 00       \tcallq  16bb5 <_ZL33construct_machine_config_daisyariR14machine_configP8device_t+0x69>\n   16bb5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   16bb9:\tba 00 00 00 00       \tmov    $0x0,%edx\n   16bbe:\tbe 02 00 00 00       \tmov    $0x2,%esi\n   16bc3:\t48 89 c7             \tmov    %rax,%rdi\n   16bc6:\te8 00 00 00 00       \tcallq  16bcb <_ZL33construct_machine_config_daisyariR14machine_configP8device_t+0x7f>\n   16bcb:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n   16bcf:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   16bd3:\t48 89 c7             \tmov    %rax,%rdi\n   16bd6:\te8 00 00 00 00       \tcallq  16bdb <_ZL33construct_machine_config_daisyariR14machine_configP8device_t+0x8f>\n   16bdb:\t48 89 d8             \tmov    %rbx,%rax\n   16bde:\teb 1a                \tjmp    16bfa <_ZL33construct_machine_config_daisyariR14machine_configP8device_t+0xae>\n   16be0:\t48 89 c3             \tmov    %rax,%rbx\n   16be3:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   16be7:\t48 89 c7             \tmov    %rax,%rdi\n   16bea:\te8 00 00 00 00       \tcallq  16bef <_ZL33construct_machine_config_daisyariR14machine_configP8device_t+0xa3>\n   16bef:\t48 89 d8             \tmov    %rbx,%rax\n   16bf2:\t48 89 c7             \tmov    %rax,%rdi\n   16bf5:\te8 00 00 00 00       \tcallq  16bfa <_ZL33construct_machine_config_daisyariR14machine_configP8device_t+0xae>\n   16bfa:\t48 83 c4 68          \tadd    $0x68,%rsp\n   16bfe:\t5b                   \tpop    %rbx\n   16bff:\t5d                   \tpop    %rbp\n   16c00:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_daisyari(machine_config *a1,\n                                                       device_t *a2) {\n  unsigned int v2;\n  device_t *<span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  device_t *<span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = Number L;\n  astring astring((astring *)<span class=\"supfact\">v5</span>);\n  <span class=\"supfact\">v4</span> = construct_machine_config_royalmah(a1, a2);\n  <span class=\"supfact\">v6</span> =\n      (device_t *)machine_config device_find(a1, <span class=\"supfact\">v4</span>, String);\n  device_t static_set_clock(<span class=\"supfact\">v6</span>, (device_t *)Number, v2);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">v6</span>, Number L, construct_address_map_daisyari_iomap);\n  astring ~astring((astring *)<span class=\"supfact\">v5</span>);\n  return <span class=\"supfact\">v4</span>;\n}", "code_t": "device_t *__cdecl construct_machine_config_daisyari(machine_config *config,\n                                                    device_t *owner) {\n  unsigned int v2;\n  void(__fastcall * v3)(address_map *, const device_t *);\n  device_t *<span class=\"supfact\">ownera</span>;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *<span class=\"supfact\">device</span>;\n  <span class=\"supfact\">device</span> = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  <span class=\"supfact\">ownera</span> = construct_machine_config_royalmah(config, owner);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  device_t static_set_clock(<span class=\"supfact\">device</span>, (device_t *)Number, v2);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, (device_t *)((char *)&loc_1 + Number),\n      (address_spacenum)construct_address_map_daisyari_iomap, v3);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return <span class=\"supfact\">ownera</span>;\n}", "var": [{"name": "v5", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "emfoa23", "repo_name": "LinuxKernel", "path": "emfoa23/LinuxKernel/4bc0c536f9c08e7bad2dca674c4a7a3650ea4785c5c3ca633902f88a3dd5fbdf", "path_in_repo": "emfoa23/LinuxKernel/tools/testing/selftests/bpf/test_flow_dissector", "objdump": "0000000000401252 <util_gettime>:\n  401252:\t55                   \tpush   %rbp\n  401253:\t48 89 e5             \tmov    %rsp,%rbp\n  401256:\t48 83 ec 10          \tsub    $0x10,%rsp\n  40125a:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  40125e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401263:\t48 89 c7             \tmov    %rax,%rdi\n  401266:\te8 15 fe ff ff       \tcallq  401080 <gettimeofday@plt>\n  40126b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40126f:\t48 69 f0 e8 03 00 00 \timul   $0x3e8,%rax,%rsi\n  401276:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  40127a:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n  401281:\t9b c4 20 \n  401284:\t48 89 c8             \tmov    %rcx,%rax\n  401287:\t48 f7 ea             \timul   %rdx\n  40128a:\t48 c1 fa 07          \tsar    $0x7,%rdx\n  40128e:\t48 89 c8             \tmov    %rcx,%rax\n  401291:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  401295:\t48 29 c2             \tsub    %rax,%rdx\n  401298:\t48 89 d0             \tmov    %rdx,%rax\n  40129b:\t48 01 f0             \tadd    %rsi,%rax\n  40129e:\tc9                   \tleaveq \n  40129f:\tc3                   \tretq   ", "code_s": "__time_t util_gettime() {\n  struct timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  return Number * <span class=\"supfact\">tv</span>.tv_sec +\n         <span class=\"supfact\">tv</span>.tv_usec / Number;\n}", "code_t": "unsigned __int64 __cdecl util_gettime() {\n  timeval <span class=\"supfact\">tv</span>;\n  gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n  return Number * <span class=\"supfact\">tv</span>.tv_sec +\n         <span class=\"supfact\">tv</span>.tv_usec / Number;\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "jdkoftinoff", "repo_name": "mb-linux-msli", "path": "jdkoftinoff/mb-linux-msli/222118451efa607cc31ab996fd88ed78c0c51e340da555f06d4098c91fe5f6e5", "path_in_repo": "jdkoftinoff/mb-linux-msli/uClinux-dist/user/pppd-2.3/pppd/plugins/tacc/lib/connect.o", "objdump": "0000000000000000 <tac_connect>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 40          \tsub    $0x40,%rsp\n   8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n   c:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n   f:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  16:\t83 7d c4 00          \tcmpl   $0x0,-0x3c(%rbp)\n  1a:\t0f 85 1f 01 00 00    \tjne    13f <tac_connect+0x13f>\n  20:\tba 00 00 00 00       \tmov    $0x0,%edx\n  25:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  2a:\tbf 03 00 00 00       \tmov    $0x3,%edi\n  2f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  34:\te8 00 00 00 00       \tcallq  39 <tac_connect+0x39>\n  39:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  3e:\te9 26 01 00 00       \tjmpq   169 <tac_connect+0x169>\n  43:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  47:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  4e:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n  55:\t00 \n  56:\t66 c7 45 d0 02 00    \tmovw   $0x2,-0x30(%rbp)\n  5c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  5f:\t48 98                \tcltq   \n  61:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  68:\t00 \n  69:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  6d:\t48 01 d0             \tadd    %rdx,%rax\n  70:\t48 8b 00             \tmov    (%rax),%rax\n  73:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  76:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  7b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  80:\te8 00 00 00 00       \tcallq  85 <tac_connect+0x85>\n  85:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  89:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  8e:\t75 10                \tjne    a0 <tac_connect+0xa0>\n  90:\tbf 31 00 00 00       \tmov    $0x31,%edi\n  95:\te8 00 00 00 00       \tcallq  9a <tac_connect+0x9a>\n  9a:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n  9e:\teb 0b                \tjmp    ab <tac_connect+0xab>\n  a0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  a4:\t8b 40 10             \tmov    0x10(%rax),%eax\n  a7:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n  ab:\tba 00 00 00 00       \tmov    $0x0,%edx\n  b0:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  b5:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  ba:\te8 00 00 00 00       \tcallq  bf <tac_connect+0xbf>\n  bf:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  c2:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  c6:\t79 2c                \tjns    f4 <tac_connect+0xf4>\n  c8:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  cb:\t89 c7                \tmov    %eax,%edi\n  cd:\te8 00 00 00 00       \tcallq  d2 <tac_connect+0xd2>\n  d2:\t48 89 c1             \tmov    %rax,%rcx\n  d5:\tba 00 00 00 00       \tmov    $0x0,%edx\n  da:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  df:\tbf 04 00 00 00       \tmov    $0x4,%edi\n  e4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  e9:\te8 00 00 00 00       \tcallq  ee <tac_connect+0xee>\n  ee:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  f2:\teb 4b                \tjmp    13f <tac_connect+0x13f>\n  f4:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  f8:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  fb:\tba 10 00 00 00       \tmov    $0x10,%edx\n 100:\t48 89 ce             \tmov    %rcx,%rsi\n 103:\t89 c7                \tmov    %eax,%edi\n 105:\te8 00 00 00 00       \tcallq  10a <tac_connect+0x10a>\n 10a:\t85 c0                \ttest   %eax,%eax\n 10c:\t79 2c                \tjns    13a <tac_connect+0x13a>\n 10e:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 111:\t89 c7                \tmov    %eax,%edi\n 113:\te8 00 00 00 00       \tcallq  118 <tac_connect+0x118>\n 118:\t48 89 c1             \tmov    %rax,%rcx\n 11b:\tba 00 00 00 00       \tmov    $0x0,%edx\n 120:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 125:\tbf 04 00 00 00       \tmov    $0x4,%edi\n 12a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 12f:\te8 00 00 00 00       \tcallq  134 <tac_connect+0x134>\n 134:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 138:\teb 05                \tjmp    13f <tac_connect+0x13f>\n 13a:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 13d:\teb 2a                \tjmp    169 <tac_connect+0x169>\n 13f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 142:\t3b 45 c4             \tcmp    -0x3c(%rbp),%eax\n 145:\t0f 8c f8 fe ff ff    \tjl     43 <tac_connect+0x43>\n 14b:\tba 00 00 00 00       \tmov    $0x0,%edx\n 150:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 155:\tbf 03 00 00 00       \tmov    $0x3,%edi\n 15a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 15f:\te8 00 00 00 00       \tcallq  164 <tac_connect+0x164>\n 164:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 169:\tc9                   \tleaveq \n 16a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tac_connect(__int64 a1, int a2) {\n  __int64 result;\n  char *v3;\n  char *v4;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  int <span class=\"supfact\">fd</span>;\n  struct servent *<span class=\"supfact\">v7</span>;\n  int <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = Number;\n  if (a2) {\n    while (<span class=\"supfact\">v8</span> < a2) {\n      *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_family = Number L;\n      *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = Number L;\n      *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] =\n          (unsigned int)*(_QWORD *)(Number L * <span class=\"supfact\">v8</span> + a1);\n      <span class=\"supfact\">v7</span> = getservbyname(String, String);\n      if (<span class=\"supfact\">v7</span>)\n        *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = <span class=\"supfact\">v7</span>->s_port;\n      else\n        *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(Number);\n      <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n      if (<span class=\"supfact\">fd</span> >= Number) {\n        if (connect(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">addr</span>, Number) >=\n            Number)\n          return (unsigned int)<span class=\"supfact\">fd</span>;\n        v4 =\n            inet_ntoa(*(struct in_addr *)&<span class=\"supfact\">addr</span>.sa_data[Number]);\n        syslog(Number, String, String, v4);\n        ++<span class=\"supfact\">v8</span>;\n      } else {\n        v3 =\n            inet_ntoa(*(struct in_addr *)&<span class=\"supfact\">addr</span>.sa_data[Number]);\n        syslog(Number, String, String, v3);\n        ++<span class=\"supfact\">v8</span>;\n      }\n    }\n    syslog(Number, String, String);\n    result = Number;\n  } else {\n    syslog(Number, String, String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl tac_connect(u_long *server, int servers) {\n  int result;\n  char *v3;\n  char *v4;\n  sockaddr_in <span class=\"supfact\">serv_addr</span>;\n  int <span class=\"supfact\">fd</span>;\n  servent *<span class=\"supfact\">s</span>;\n  int <span class=\"supfact\">tries</span>;\n  <span class=\"supfact\">tries</span> = Number;\n  if (servers) {\n    while (<span class=\"supfact\">tries</span> < servers) {\n      *(_QWORD *)&<span class=\"supfact\">serv_addr</span>.sin_family = Number L;\n      *(_QWORD *)<span class=\"supfact\">serv_addr</span>.sin_zero = Number L;\n      *(_QWORD *)&<span class=\"supfact\">serv_addr</span>.sin_addr.s_addr =\n          (unsigned int)server[<span class=\"supfact\">tries</span>];\n      <span class=\"supfact\">s</span> = getservbyname(String, String);\n      if (<span class=\"supfact\">s</span>)\n        <span class=\"supfact\">serv_addr</span>.sin_port = <span class=\"supfact\">s</span>->s_port;\n      else\n        <span class=\"supfact\">serv_addr</span>.sin_port = htons(Number);\n      <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n      if (<span class=\"supfact\">fd</span> >= Number) {\n        if (connect(<span class=\"supfact\">fd</span>,\n                    (const struct sockaddr *)&<span class=\"supfact\">serv_addr</span>,\n                    Number) >= Number)\n          return <span class=\"supfact\">fd</span>;\n        v4 = inet_ntoa(<span class=\"supfact\">serv_addr</span>.sin_addr);\n        syslog(Number, String, String, v4);\n        ++<span class=\"supfact\">tries</span>;\n      } else {\n        v3 = inet_ntoa(<span class=\"supfact\">serv_addr</span>.sin_addr);\n        syslog(Number, String, String, v3);\n        ++<span class=\"supfact\">tries</span>;\n      }\n    }\n    syslog(Number, String, String);\n    result = Number;\n  } else {\n    syslog(Number, String, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "serv_addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "versatica", "repo_name": "mediasoup", "path": "versatica/mediasoup/5f14787735a916d88eb221c25e358d04b726f99097f2151b48779938667693f4", "path_in_repo": "versatica/mediasoup/worker/out/Release/obj.target/libwebrtc/deps/libwebrtc/libwebrtc/modules/congestion_controller/rtp/send_time_history.o", "objdump": "0000000000000000 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 83 ec 48          \tsub    $0x48,%rsp\n   9:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n   d:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  11:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  15:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  19:\t48 89 d6             \tmov    %rdx,%rsi\n  1c:\t48 89 c7             \tmov    %rax,%rdi\n  1f:\te8 00 00 00 00       \tcallq  24 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x24>\n  24:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  28:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  2c:\t48 89 c7             \tmov    %rax,%rdi\n  2f:\te8 00 00 00 00       \tcallq  34 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x34>\n  34:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  38:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n  3c:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  40:\t48 89 d6             \tmov    %rdx,%rsi\n  43:\t48 89 c7             \tmov    %rax,%rdi\n  46:\te8 00 00 00 00       \tcallq  4b <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x4b>\n  4b:\t84 c0                \ttest   %al,%al\n  4d:\t75 32                \tjne    81 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x81>\n  4f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  53:\t48 89 c7             \tmov    %rax,%rdi\n  56:\te8 00 00 00 00       \tcallq  5b <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x5b>\n  5b:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  5f:\t48 89 c7             \tmov    %rax,%rdi\n  62:\te8 00 00 00 00       \tcallq  67 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x67>\n  67:\t48 89 c2             \tmov    %rax,%rdx\n  6a:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n  6e:\t48 8d 45 de          \tlea    -0x22(%rbp),%rax\n  72:\t48 89 ce             \tmov    %rcx,%rsi\n  75:\t48 89 c7             \tmov    %rax,%rdi\n  78:\te8 00 00 00 00       \tcallq  7d <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x7d>\n  7d:\t84 c0                \ttest   %al,%al\n  7f:\t74 07                \tje     88 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x88>\n  81:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  86:\teb 05                \tjmp    8d <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x8d>\n  88:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  8d:\t84 c0                \ttest   %al,%al\n  8f:\t74 5d                \tje     ee <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0xee>\n  91:\t48 8b 5d b8          \tmov    -0x48(%rbp),%rbx\n  95:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  99:\t48 89 c7             \tmov    %rax,%rdi\n  9c:\te8 00 00 00 00       \tcallq  a1 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0xa1>\n  a1:\t48 89 c2             \tmov    %rax,%rdx\n  a4:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  a8:\t48 89 d6             \tmov    %rdx,%rsi\n  ab:\t48 89 c7             \tmov    %rax,%rdi\n  ae:\te8 00 00 00 00       \tcallq  b3 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0xb3>\n  b3:\t48 8d 55 c8          \tlea    -0x38(%rbp),%rdx\n  b7:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n  bb:\t48 89 d6             \tmov    %rdx,%rsi\n  be:\t48 89 c7             \tmov    %rax,%rdi\n  c1:\te8 00 00 00 00       \tcallq  c6 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0xc6>\n  c6:\t48 8d 4d df          \tlea    -0x21(%rbp),%rcx\n  ca:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  ce:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  d2:\t49 89 c8             \tmov    %rcx,%r8\n  d5:\t48 89 d1             \tmov    %rdx,%rcx\n  d8:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # df <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0xdf>\n  df:\t48 89 c6             \tmov    %rax,%rsi\n  e2:\t48 89 df             \tmov    %rbx,%rdi\n  e5:\te8 00 00 00 00       \tcallq  ea <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0xea>\n  ea:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  ee:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  f2:\t48 89 c7             \tmov    %rax,%rdi\n  f5:\te8 00 00 00 00       \tcallq  fa <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0xfa>\n  fa:\t48 83 c0 08          \tadd    $0x8,%rax\n  fe:\teb 08                \tjmp    108 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x108>\n 100:\t48 89 c7             \tmov    %rax,%rdi\n 103:\te8 00 00 00 00       \tcallq  108 <_ZNSt3mapISt4pairIttEmSt4lessIS1_ESaIS0_IKS1_mEEEixEOS1_+0x108>\n 108:\t48 83 c4 48          \tadd    $0x48,%rsp\n 10c:\t5b                   \tpop    %rbx\n 10d:\t5d                   \tpop    %rbp\n 10e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std\n    map<std pair<unsigned short, unsigned short>, unsigned long>\n    operator[](__int64 a1, __int64 a2) {\n  __int64 v2;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>;\n  char <span class=\"supfact\">v8</span>;\n  char <span class=\"supfact\">v9</span>;\n  char <span class=\"supfact\">v10</span>[Number];\n  __int64 <span class=\"supfact\">v11</span>[Number];\n  <span class=\"supfact\">v6</span> =\n      std map<std pair<unsigned short, unsigned short>, unsigned long>\n          lower_bound(a1, a2);\n  <span class=\"supfact\">v7</span> =\n      std map<std pair<unsigned short, unsigned short>, unsigned long> end(a1);\n  if ((unsigned __int8)std operator==(&<span class=\"supfact\">v6</span>,\n                                      &<span class=\"supfact\">v7</span>) ||\n      (std map<std pair<unsigned short, unsigned short>, unsigned long>\n           key_comp(a1),\n       v2 = std _Rb_tree_iterator<std pair<\n           std pair const<unsigned short, unsigned short>, unsigned long>>\n       operator*(&<span class=\"supfact\">v6</span>),\n       (unsigned __int8)std less<std pair<unsigned short, unsigned short>>\n       operator()(&<span class=\"supfact\">v8</span>, a2, v2))) {\n    v4 = std move<std pair<unsigned short, unsigned short> &>(a2);\n    std forward_as_tuple<std pair<unsigned short, unsigned short>>(\n        <span class=\"supfact\">v10</span>, v4);\n    std _Rb_tree_const_iterator<\n        std pair<std pair const<unsigned short, unsigned short>, unsigned long>>\n        _Rb_tree_const_iterator(<span class=\"supfact\">v11</span>, &<span class=\"supfact\">v6</span>);\n    <span class=\"supfact\">v6</span> = std _Rb_tree<\n        std pair<unsigned short, unsigned short>,\n        std pair<std pair<unsigned short, unsigned short> const, unsigned long>,\n        std _Select1st<std pair<std pair<unsigned short, unsigned short> const,\n                                unsigned long>>,\n        std less<std pair<unsigned short, unsigned short>>,\n        std allocator<std pair<std pair<unsigned short, unsigned short> const,\n                               unsigned long>>>\n    _M_emplace_hint_unique<\n        std piecewise_construct_t const &,\n        std tuple<std pair<unsigned short, unsigned short> &&>, std tuple<>>(\n        a1, <span class=\"supfact\">v11</span>[Number], &std piecewise_construct,\n        <span class=\"supfact\">v10</span>, &<span class=\"supfact\">v9</span>);\n  }\n  return std _Rb_tree_iterator<std pair<\n             std pair const<unsigned short, unsigned short>, unsigned long>>\n         operator*(&<span class=\"supfact\">v6</span>) + Number;\n}", "code_t": "std map<std pair<short unsigned int, short unsigned int>, long unsigned int>\n    mapped_type *__cdecl std\n        map<std pair<unsigned short, unsigned short>, unsigned long>\n        operator[](std map<std pair<short unsigned int, short unsigned int>,\n                           long unsigned int> *const this,\n                   std map<std pair<short unsigned int, short unsigned int>,\n                           long unsigned int>\n                       key_type *__k) {\n  std _Rb_tree_iterator<\n      std pair<const std pair<short unsigned int, short unsigned int>,\n               long unsigned int>>\n      reference v2;\n  std pair<short unsigned int, short unsigned int> *v4;\n  const std piecewise_construct_t *v5;\n  std map<std pair<short unsigned int, short unsigned int>, long unsigned int>\n      iterator <span class=\"supfact\">__i</span>;\n  std _Rb_tree_iterator<\n      std pair<const std pair<short unsigned int, short unsigned int>,\n               long unsigned int>>\n      _Self <span class=\"supfact\">__y</span>;\n  std less<std pair<short unsigned int, short unsigned int>> <span class=\"supfact\">v9</span>;\n  std tuple<> <span class=\"supfact\">v10</span>;\n  std tuple<std pair<short unsigned int, short unsigned int> &&>\n      <span class=\"supfact\">v11</span>;\n  std _Rb_tree_const_iterator<\n      std pair<const std pair<short unsigned int, short unsigned int>,\n               long unsigned int>>\n      <span class=\"supfact\">__pos</span>;\n  <span class=\"supfact\">__i</span>._M_node =\n      std map<std pair<unsigned short, unsigned short>, unsigned long>\n          lower_bound(this, __k)._M_node;\n  <span class=\"supfact\">__y</span>._M_node =\n      std map<std pair<unsigned short, unsigned short>, unsigned long> end(this)\n          ._M_node;\n  if (std operator==(&<span class=\"supfact\">__i</span>, &<span class=\"supfact\">__y</span>) ||\n      (std map<std pair<unsigned short, unsigned short>, unsigned long>\n           key_comp(this),\n       v2 = std _Rb_tree_iterator<std pair<\n           std pair const<unsigned short, unsigned short>, unsigned long>>\n       operator*(&<span class=\"supfact\">__i</span>),\n       std less<std pair<unsigned short, unsigned short>> operator()(\n           &<span class=\"supfact\">v9</span>, __k, &v2->first))) {\n    v4 = std move<std pair<unsigned short, unsigned short> &>(__k);\n    std forward_as_tuple<std pair<unsigned short, unsigned short>>(\n        (std pair<short unsigned int, short unsigned int>\n             *)&<span class=\"supfact\">v11</span>,\n        v4);\n    std _Rb_tree_const_iterator<\n        std pair<std pair const<unsigned short, unsigned short>, unsigned long>>\n        _Rb_tree_const_iterator(&<span class=\"supfact\">__pos</span>, &<span class=\"supfact\">__i</span>);\n    <span class=\"supfact\">__i</span>._M_node =\n        std _Rb_tree<\n            std pair<unsigned short, unsigned short>,\n            std pair<std pair<unsigned short, unsigned short> const,\n                     unsigned long>,\n            std _Select1st<std pair<\n                std pair<unsigned short, unsigned short> const, unsigned long>>,\n            std less<std pair<unsigned short, unsigned short>>,\n            std allocator<std pair<\n                std pair<unsigned short, unsigned short> const, unsigned long>>>\n        _M_emplace_hint_unique<\n            std piecewise_construct_t const &,\n            std tuple<std pair<unsigned short, unsigned short> &&>,\n            std tuple<>>(\n            &this->_M_t, <span class=\"supfact\">__pos</span>, &std piecewise_construct,\n            &<span class=\"supfact\">v11</span>, &<span class=\"supfact\">v10</span>, v5,\n            (std tuple<std pair<short unsigned int, short unsigned int> &&> *)\n                __k,\n            (std tuple<> *)this)\n            ._M_node;\n  }\n  return &std _Rb_tree_iterator<std pair<\n      std pair const<unsigned short, unsigned short>, unsigned long>>\n          operator*(&<span class=\"supfact\">__i</span>)->second;\n}", "var": [{"name": "v9", "type": "char", "ref_name": "v10", "ref_type": "struct std::tuple<> { __int8[1] gap0; }"}], "body_in_train": false}, {"repo_owner": "FireLeaf", "repo_name": "XGame", "path": "FireLeaf/XGame/eba57a087ba7e8caca6a8b389986fa7b899992931cf742d0a98bc692f92cf0d5", "path_in_repo": "FireLeaf/XGame/XGame/XSrc/3-Party/openssl/test/destest", "objdump": "0000000000402da6 <cfb64_test>:\n  402da6:\t55                   \tpush   %rbp\n  402da7:\t48 89 e5             \tmov    %rsp,%rbp\n  402daa:\t48 81 ec 30 01 00 00 \tsub    $0x130,%rsp\n  402db1:\t48 89 bd d8 fe ff ff \tmov    %rdi,-0x128(%rbp)\n  402db8:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  402dbf:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402dc6:\t48 89 c6             \tmov    %rax,%rsi\n  402dc9:\tbf e0 25 41 00       \tmov    $0x4125e0,%edi\n  402dce:\te8 2e 05 00 00       \tcallq  403301 <DES_set_key_checked>\n  402dd3:\t48 8b 05 0e f8 00 00 \tmov    0xf80e(%rip),%rax        # 4125e8 <cfb_iv>\n  402dda:\t48 89 05 e7 f9 00 00 \tmov    %rax,0xf9e7(%rip)        # 4127c8 <cfb_tmp>\n  402de1:\tc7 85 ec fe ff ff 00 \tmovl   $0x0,-0x114(%rbp)\n  402de8:\t00 00 00 \n  402deb:\t48 8d 95 ec fe ff ff \tlea    -0x114(%rbp),%rdx\n  402df2:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402df9:\t48 83 ec 08          \tsub    $0x8,%rsp\n  402dfd:\t6a 01                \tpushq  $0x1\n  402dff:\t49 89 d1             \tmov    %rdx,%r9\n  402e02:\t41 b8 c8 27 41 00    \tmov    $0x4127c8,%r8d\n  402e08:\t48 89 c1             \tmov    %rax,%rcx\n  402e0b:\tba 0c 00 00 00       \tmov    $0xc,%edx\n  402e10:\tbe 60 27 41 00       \tmov    $0x412760,%esi\n  402e15:\tbf f0 25 41 00       \tmov    $0x4125f0,%edi\n  402e1a:\te8 c4 0c 00 00       \tcallq  403ae3 <DES_cfb64_encrypt>\n  402e1f:\t48 83 c4 10          \tadd    $0x10,%rsp\n  402e23:\t48 8d 95 ec fe ff ff \tlea    -0x114(%rbp),%rdx\n  402e2a:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402e31:\t48 83 ec 08          \tsub    $0x8,%rsp\n  402e35:\t6a 01                \tpushq  $0x1\n  402e37:\t49 89 d1             \tmov    %rdx,%r9\n  402e3a:\t41 b8 c8 27 41 00    \tmov    $0x4127c8,%r8d\n  402e40:\t48 89 c1             \tmov    %rax,%rcx\n  402e43:\tba 0c 00 00 00       \tmov    $0xc,%edx\n  402e48:\tbe 6c 27 41 00       \tmov    $0x41276c,%esi\n  402e4d:\tbf fc 25 41 00       \tmov    $0x4125fc,%edi\n  402e52:\te8 8c 0c 00 00       \tcallq  403ae3 <DES_cfb64_encrypt>\n  402e57:\t48 83 c4 10          \tadd    $0x10,%rsp\n  402e5b:\t48 8b 85 d8 fe ff ff \tmov    -0x128(%rbp),%rax\n  402e62:\tba 18 00 00 00       \tmov    $0x18,%edx\n  402e67:\tbe 60 27 41 00       \tmov    $0x412760,%esi\n  402e6c:\t48 89 c7             \tmov    %rax,%rdi\n  402e6f:\te8 0c e2 ff ff       \tcallq  401080 <memcmp@plt>\n  402e74:\t85 c0                \ttest   %eax,%eax\n  402e76:\t74 3f                \tje     402eb7 <cfb64_test+0x111>\n  402e78:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  402e7f:\tbf b6 d5 40 00       \tmov    $0x40d5b6,%edi\n  402e84:\te8 b7 e1 ff ff       \tcallq  401040 <puts@plt>\n  402e89:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  402e90:\teb 1f                \tjmp    402eb1 <cfb64_test+0x10b>\n  402e92:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  402e95:\t48 98                \tcltq   \n  402e97:\t48 05 60 27 41 00    \tadd    $0x412760,%rax\n  402e9d:\t48 89 c7             \tmov    %rax,%rdi\n  402ea0:\te8 96 fc ff ff       \tcallq  402b3b <pt>\n  402ea5:\t48 89 c7             \tmov    %rax,%rdi\n  402ea8:\te8 93 e1 ff ff       \tcallq  401040 <puts@plt>\n  402ead:\t83 45 f8 08          \taddl   $0x8,-0x8(%rbp)\n  402eb1:\t83 7d f8 17          \tcmpl   $0x17,-0x8(%rbp)\n  402eb5:\t7e db                \tjle    402e92 <cfb64_test+0xec>\n  402eb7:\t48 8b 05 2a f7 00 00 \tmov    0xf72a(%rip),%rax        # 4125e8 <cfb_iv>\n  402ebe:\t48 89 05 03 f9 00 00 \tmov    %rax,0xf903(%rip)        # 4127c8 <cfb_tmp>\n  402ec5:\tc7 85 ec fe ff ff 00 \tmovl   $0x0,-0x114(%rbp)\n  402ecc:\t00 00 00 \n  402ecf:\t48 8d 95 ec fe ff ff \tlea    -0x114(%rbp),%rdx\n  402ed6:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402edd:\t48 83 ec 08          \tsub    $0x8,%rsp\n  402ee1:\t6a 00                \tpushq  $0x0\n  402ee3:\t49 89 d1             \tmov    %rdx,%r9\n  402ee6:\t41 b8 c8 27 41 00    \tmov    $0x4127c8,%r8d\n  402eec:\t48 89 c1             \tmov    %rax,%rcx\n  402eef:\tba 11 00 00 00       \tmov    $0x11,%edx\n  402ef4:\tbe a0 27 41 00       \tmov    $0x4127a0,%esi\n  402ef9:\tbf 60 27 41 00       \tmov    $0x412760,%edi\n  402efe:\te8 e0 0b 00 00       \tcallq  403ae3 <DES_cfb64_encrypt>\n  402f03:\t48 83 c4 10          \tadd    $0x10,%rsp\n  402f07:\t48 8d 95 ec fe ff ff \tlea    -0x114(%rbp),%rdx\n  402f0e:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402f15:\t48 83 ec 08          \tsub    $0x8,%rsp\n  402f19:\t6a 00                \tpushq  $0x0\n  402f1b:\t49 89 d1             \tmov    %rdx,%r9\n  402f1e:\t41 b8 c8 27 41 00    \tmov    $0x4127c8,%r8d\n  402f24:\t48 89 c1             \tmov    %rax,%rcx\n  402f27:\tba 07 00 00 00       \tmov    $0x7,%edx\n  402f2c:\tbe b1 27 41 00       \tmov    $0x4127b1,%esi\n  402f31:\tbf 71 27 41 00       \tmov    $0x412771,%edi\n  402f36:\te8 a8 0b 00 00       \tcallq  403ae3 <DES_cfb64_encrypt>\n  402f3b:\t48 83 c4 10          \tadd    $0x10,%rsp\n  402f3f:\tba 18 00 00 00       \tmov    $0x18,%edx\n  402f44:\tbe a0 27 41 00       \tmov    $0x4127a0,%esi\n  402f49:\tbf f0 25 41 00       \tmov    $0x4125f0,%edi\n  402f4e:\te8 2d e1 ff ff       \tcallq  401080 <memcmp@plt>\n  402f53:\t85 c0                \ttest   %eax,%eax\n  402f55:\t74 3f                \tje     402f96 <cfb64_test+0x1f0>\n  402f57:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  402f5e:\tbf d0 d5 40 00       \tmov    $0x40d5d0,%edi\n  402f63:\te8 d8 e0 ff ff       \tcallq  401040 <puts@plt>\n  402f68:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  402f6f:\teb 1f                \tjmp    402f90 <cfb64_test+0x1ea>\n  402f71:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  402f74:\t48 98                \tcltq   \n  402f76:\t48 05 a0 27 41 00    \tadd    $0x4127a0,%rax\n  402f7c:\t48 89 c7             \tmov    %rax,%rdi\n  402f7f:\te8 b7 fb ff ff       \tcallq  402b3b <pt>\n  402f84:\t48 89 c7             \tmov    %rax,%rdi\n  402f87:\te8 b4 e0 ff ff       \tcallq  401040 <puts@plt>\n  402f8c:\t83 45 f8 08          \taddl   $0x8,-0x8(%rbp)\n  402f90:\t83 7d f8 17          \tcmpl   $0x17,-0x8(%rbp)\n  402f94:\t7e db                \tjle    402f71 <cfb64_test+0x1cb>\n  402f96:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402f99:\tc9                   \tleaveq \n  402f9a:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cfb64_test(const void *a1) {\n  const char *v1;\n  const char *v2;\n  int <span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  int <span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = Number;\n  DES_set_key_checked(&cfb_key, <span class=\"supfact\">v5</span>);\n  cfb_tmp = cfb_iv;\n  <span class=\"supfact\">v4</span> = Number;\n  DES_cfb64_encrypt((unsigned int)&plain, (unsigned int)&cfb_buf1, Number,\n                    (unsigned int)<span class=\"supfact\">v5</span>, (unsigned int)&cfb_tmp,\n                    (unsigned int)&<span class=\"supfact\">v4</span>, Number);\n  DES_cfb64_encrypt((unsigned int)&byte_4125FC, (unsigned int)&unk_41276C,\n                    Number, (unsigned int)<span class=\"supfact\">v5</span>,\n                    (unsigned int)&cfb_tmp, (unsigned int)&<span class=\"supfact\">v4</span>,\n                    Number);\n  if (memcmp(a1, &cfb_buf1, Number)) {\n    <span class=\"supfact\">v7</span> = Number;\n    puts(String);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         <span class=\"supfact\">i</span> += Number) {\n      v1 = (const char *)pt(<span class=\"supfact\">i</span> + Number L);\n      puts(v1);\n    }\n  }\n  cfb_tmp = cfb_iv;\n  <span class=\"supfact\">v4</span> = Number;\n  DES_cfb64_encrypt((unsigned int)&cfb_buf1, (unsigned int)&cfb_buf2, Number,\n                    (unsigned int)<span class=\"supfact\">v5</span>, (unsigned int)&cfb_tmp,\n                    (unsigned int)&<span class=\"supfact\">v4</span>, Number);\n  DES_cfb64_encrypt((unsigned int)&unk_412771, (unsigned int)&unk_4127B1,\n                    Number, (unsigned int)<span class=\"supfact\">v5</span>,\n                    (unsigned int)&cfb_tmp, (unsigned int)&<span class=\"supfact\">v4</span>,\n                    Number);\n  if (memcmp(&plain, &cfb_buf2, Number)) {\n    <span class=\"supfact\">v7</span> = Number;\n    puts(String);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         <span class=\"supfact\">i</span> += Number) {\n      v2 = (const char *)pt(<span class=\"supfact\">i</span> + Number L);\n      puts(v2);\n    }\n  }\n  return <span class=\"supfact\">v7</span>;\n}", "code_t": "int __cdecl cfb64_test(unsigned __int8 *cfb_cipher) {\n  char *v1;\n  char *v2;\n  int <span class=\"supfact\">n</span>;\n  DES_key_schedule <span class=\"supfact\">ks</span>;\n  int <span class=\"supfact\">i</span>;\n  int <span class=\"supfact\">err</span>;\n  <span class=\"supfact\">err</span> = Number;\n  DES_set_key_checked((const_DES_cblock *)cfb_key, &<span class=\"supfact\">ks</span>);\n  *(_QWORD *)cfb_tmp = *(_QWORD *)cfb_iv;\n  <span class=\"supfact\">n</span> = Number;\n  DES_cfb64_encrypt(plain, cfb_buf1, Number L, &<span class=\"supfact\">ks</span>,\n                    (DES_cblock *)cfb_tmp, &<span class=\"supfact\">n</span>, Number);\n  DES_cfb64_encrypt(&plain[Number], &cfb_buf1[Number], Number L,\n                    &<span class=\"supfact\">ks</span>, (DES_cblock *)cfb_tmp,\n                    &<span class=\"supfact\">n</span>, Number);\n  if (memcmp(cfb_cipher, cfb_buf1, Number)) {\n    <span class=\"supfact\">err</span> = Number;\n    puts(String);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         <span class=\"supfact\">i</span> += Number) {\n      v1 = pt((unsigned __int8 *)(<span class=\"supfact\">i</span> + Number L));\n      puts(v1);\n    }\n  }\n  *(_QWORD *)cfb_tmp = *(_QWORD *)cfb_iv;\n  <span class=\"supfact\">n</span> = Number;\n  DES_cfb64_encrypt(cfb_buf1, cfb_buf2, Number L, &<span class=\"supfact\">ks</span>,\n                    (DES_cblock *)cfb_tmp, &<span class=\"supfact\">n</span>, Number);\n  DES_cfb64_encrypt(&cfb_buf1[Number], &cfb_buf2[Number], Number L,\n                    &<span class=\"supfact\">ks</span>, (DES_cblock *)cfb_tmp,\n                    &<span class=\"supfact\">n</span>, Number);\n  if (memcmp(plain, cfb_buf2, Number)) {\n    <span class=\"supfact\">err</span> = Number;\n    puts(String);\n    for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n         <span class=\"supfact\">i</span> += Number) {\n      v2 = pt((unsigned __int8 *)(<span class=\"supfact\">i</span> + Number L));\n      puts(v2);\n    }\n  }\n  return <span class=\"supfact\">err</span>;\n}", "var": [{"name": "v5", "type": "struct DES_key_schedule { $8615BE8F2105F562F4397AB730391A6E[16] ks; }", "ref_name": "ks", "ref_type": "struct DES_key_schedule { $8615BE8F2105F562F4397AB730391A6E[16] ks; }"}], "body_in_train": false}, {"repo_owner": "krysmopompas", "repo_name": "OpenFrameworks-ng", "path": "krysmopompas/OpenFrameworks-ng/30079410ef5b6c27486fd5a5575213fa82408b30de9efda4557c55e1f595afc1", "path_in_repo": "krysmopompas/OpenFrameworks-ng/extern/trees/poco/XML/obj/Linux/x86_64/debug_shared/DOMImplementation.o", "objdump": "0000000000000018 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_>:\n  18:\t55                   \tpush   %rbp\n  19:\t48 89 e5             \tmov    %rsp,%rbp\n  1c:\t53                   \tpush   %rbx\n  1d:\t48 83 ec 48          \tsub    $0x48,%rsp\n  21:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  25:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  29:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  2d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  31:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  35:\t48 89 d6             \tmov    %rdx,%rsi\n  38:\t48 89 c7             \tmov    %rax,%rdi\n  3b:\te8 00 00 00 00       \tcallq  40 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x28>\n  40:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  44:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 4b <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x33>\n  4b:\t48 89 d6             \tmov    %rdx,%rsi\n  4e:\t48 89 c7             \tmov    %rax,%rdi\n  51:\te8 00 00 00 00       \tcallq  56 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x3e>\n  56:\t84 c0                \ttest   %al,%al\n  58:\t74 1e                \tje     78 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x60>\n  5a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  5e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 65 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x4d>\n  65:\t48 89 d6             \tmov    %rdx,%rsi\n  68:\t48 89 c7             \tmov    %rax,%rdi\n  6b:\te8 00 00 00 00       \tcallq  70 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x58>\n  70:\t84 c0                \ttest   %al,%al\n  72:\t0f 85 d4 00 00 00    \tjne    14c <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x134>\n  78:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  7c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 83 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x6b>\n  83:\t48 89 d6             \tmov    %rdx,%rsi\n  86:\t48 89 c7             \tmov    %rax,%rdi\n  89:\te8 00 00 00 00       \tcallq  8e <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x76>\n  8e:\t84 c0                \ttest   %al,%al\n  90:\t74 1e                \tje     b0 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x98>\n  92:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  96:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 9d <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x85>\n  9d:\t48 89 d6             \tmov    %rdx,%rsi\n  a0:\t48 89 c7             \tmov    %rax,%rdi\n  a3:\te8 00 00 00 00       \tcallq  a8 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x90>\n  a8:\t84 c0                \ttest   %al,%al\n  aa:\t0f 85 9c 00 00 00    \tjne    14c <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x134>\n  b0:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  b4:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # bb <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0xa3>\n  bb:\t48 89 d6             \tmov    %rdx,%rsi\n  be:\t48 89 c7             \tmov    %rax,%rdi\n  c1:\te8 00 00 00 00       \tcallq  c6 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0xae>\n  c6:\t84 c0                \ttest   %al,%al\n  c8:\t74 1a                \tje     e4 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0xcc>\n  ca:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  ce:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # d5 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0xbd>\n  d5:\t48 89 d6             \tmov    %rdx,%rsi\n  d8:\t48 89 c7             \tmov    %rax,%rdi\n  db:\te8 00 00 00 00       \tcallq  e0 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0xc8>\n  e0:\t84 c0                \ttest   %al,%al\n  e2:\t75 68                \tjne    14c <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x134>\n  e4:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  e8:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # ef <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0xd7>\n  ef:\t48 89 d6             \tmov    %rdx,%rsi\n  f2:\t48 89 c7             \tmov    %rax,%rdi\n  f5:\te8 00 00 00 00       \tcallq  fa <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0xe2>\n  fa:\t84 c0                \ttest   %al,%al\n  fc:\t74 1a                \tje     118 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x100>\n  fe:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 102:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 109 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0xf1>\n 109:\t48 89 d6             \tmov    %rdx,%rsi\n 10c:\t48 89 c7             \tmov    %rax,%rdi\n 10f:\te8 00 00 00 00       \tcallq  114 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0xfc>\n 114:\t84 c0                \ttest   %al,%al\n 116:\t75 34                \tjne    14c <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x134>\n 118:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 11c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 123 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x10b>\n 123:\t48 89 d6             \tmov    %rdx,%rsi\n 126:\t48 89 c7             \tmov    %rax,%rdi\n 129:\te8 00 00 00 00       \tcallq  12e <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x116>\n 12e:\t84 c0                \ttest   %al,%al\n 130:\t74 21                \tje     153 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x13b>\n 132:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 136:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 13d <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x125>\n 13d:\t48 89 d6             \tmov    %rdx,%rsi\n 140:\t48 89 c7             \tmov    %rax,%rdi\n 143:\te8 00 00 00 00       \tcallq  148 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x130>\n 148:\t84 c0                \ttest   %al,%al\n 14a:\t74 07                \tje     153 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x13b>\n 14c:\tbb 01 00 00 00       \tmov    $0x1,%ebx\n 151:\teb 05                \tjmp    158 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x140>\n 153:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n 158:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 15c:\t48 89 c7             \tmov    %rax,%rdi\n 15f:\te8 00 00 00 00       \tcallq  164 <_ZNK4Poco3XML17DOMImplementation10hasFeatureERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x14c>\n 164:\t89 d8                \tmov    %ebx,%eax\n 166:\t48 83 c4 48          \tadd    $0x48,%rsp\n 16a:\t5b                   \tpop    %rbx\n 16b:\t5d                   \tpop    %rbp\n 16c:\tc3                   \tretq   \n 16d:\t90                   \tnop", "code_s": "_BOOL8 __fastcall Poco XML DOMImplementation hasFeature(__int64 a1, __int64 a2,\n                                                        __int64 a3) {\n  _BOOL4 v3;\n  char <span class=\"supfact\">v6</span>[Number];\n  Poco toLower<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>(\n      <span class=\"supfact\">v6</span>, a2);\n  v3 = (unsigned __int8)std operator==\n           <char>(<span class=\"supfact\">v6</span>,\n                  &Poco XML DOMImplementation FEATURE_XML [abi:cxx11]) &&\n           (unsigned __int8)std operator==\n           <char>(a3, &Poco XML DOMImplementation VERSION_1_0 [abi:cxx11]) ||\n       (unsigned __int8)std operator==\n           <char>(<span class=\"supfact\">v6</span>,\n                  &Poco XML DOMImplementation FEATURE_CORE [abi:cxx11]) &&\n           (unsigned __int8)std operator==\n           <char>(a3, &Poco XML DOMImplementation VERSION_2_0 [abi:cxx11]) ||\n       (unsigned __int8)std operator==\n           <char>(<span class=\"supfact\">v6</span>,\n                  &Poco XML DOMImplementation FEATURE_EVENTS [abi:cxx11]) &&\n           (unsigned __int8)std operator==\n           <char>(a3, &Poco XML DOMImplementation VERSION_2_0 [abi:cxx11]) ||\n       (unsigned __int8)std operator==<char>(\n           <span class=\"supfact\">v6</span>,\n           &Poco XML DOMImplementation FEATURE_MUTATIONEVENTS [abi:cxx11]) &&\n           (unsigned __int8)std operator==\n           <char>(a3, &Poco XML DOMImplementation VERSION_2_0 [abi:cxx11]) ||\n       (unsigned __int8)std operator==\n           <char>(<span class=\"supfact\">v6</span>,\n                  &Poco XML DOMImplementation FEATURE_TRAVERSAL [abi:cxx11]) &&\n           (unsigned __int8)std operator==\n           <char>(a3, &Poco XML DOMImplementation VERSION_2_0 [abi:cxx11]);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v6</span>);\n  return v3;\n}", "code_t": "bool __cdecl Poco XML DOMImplementation hasFeature(\n    const Poco XML DOMImplementation *const this,\n    const Poco XML XMLString *feature, const Poco XML XMLString *version) {\n  bool v3;\n  Poco XML XMLString <span class=\"supfact\">lcFeature</span>;\n  Poco toLower<std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>>>(\n      &<span class=\"supfact\">lcFeature</span>, feature);\n  v3 = std operator==\n           <char>(&<span class=\"supfact\">lcFeature</span>,\n                  &Poco XML DOMImplementation FEATURE_XML [abi:cxx11]) &&\n           std operator==<char>(version, &Poco XML DOMImplementation VERSION_1_0\n                                         [abi:cxx11]) ||\n       std operator==\n           <char>(&<span class=\"supfact\">lcFeature</span>,\n                  &Poco XML DOMImplementation FEATURE_CORE [abi:cxx11]) &&\n           std operator==<char>(version, &Poco XML DOMImplementation VERSION_2_0\n                                         [abi:cxx11]) ||\n       std operator==\n           <char>(&<span class=\"supfact\">lcFeature</span>,\n                  &Poco XML DOMImplementation FEATURE_EVENTS [abi:cxx11]) &&\n           std operator==<char>(version, &Poco XML DOMImplementation VERSION_2_0\n                                         [abi:cxx11]) ||\n       std operator==<char>(&<span class=\"supfact\">lcFeature</span>,\n                            &Poco XML DOMImplementation FEATURE_MUTATIONEVENTS\n                            [abi:cxx11]) &&\n           std operator==<char>(version, &Poco XML DOMImplementation VERSION_2_0\n                                         [abi:cxx11]) ||\n       std operator==\n           <char>(&<span class=\"supfact\">lcFeature</span>,\n                  &Poco XML DOMImplementation FEATURE_TRAVERSAL [abi:cxx11]) &&\n           std operator==\n           <char>(version, &Poco XML DOMImplementation VERSION_2_0 [abi:cxx11]);\n  std __cxx11 basic_string<\n      char, std char_traits<char>,\n      std allocator<char>> ~basic_string(&<span class=\"supfact\">lcFeature</span>);\n  return v3;\n}", "var": [{"name": "v6", "type": "char[48]", "ref_name": "lcFeature", "ref_type": "struct Poco::XML::XMLString { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "mortang2410", "repo_name": "tabbed", "path": "mortang2410/tabbed/e279090c2caeb8b1774673ac9f4e718cfaae2b813169344649b6592c5ce6d8a0", "path_in_repo": "mortang2410/tabbed//tabbed", "objdump": "", "code_s": "int __fastcall sub_402A0A(__int64 a1) {\n  int result;\n  XWindowChanges <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = a1;\n  result = sub_40383B(*(_QWORD *)(a1 + Number));\n  <span class=\"supfact\">v3</span> = result;\n  if (result >= Number) {\n    <span class=\"supfact\">v2</span>.x = Number;\n    <span class=\"supfact\">v2</span>.y = dword_40A784;\n    <span class=\"supfact\">v2</span>.width = dword_40A790;\n    <span class=\"supfact\">v2</span>.height = dword_40A794 - dword_40A784;\n    <span class=\"supfact\">v2</span>.border_width = Number;\n    <span class=\"supfact\">v2</span>.sibling = *(_QWORD *)(<span class=\"supfact\">v4</span> + Number);\n    <span class=\"supfact\">v2</span>.stack_mode = *(_DWORD *)(<span class=\"supfact\">v4</span> + Number);\n    result = XConfigureWindow(\n        display, *(_QWORD *)(*((_QWORD *)ptr + <span class=\"supfact\">v3</span>) + Number L),\n        *(_QWORD *)(<span class=\"supfact\">v4</span> + Number), &<span class=\"supfact\">v2</span>);\n  }\n  return result;\n}", "code_t": "int __fastcall sub_402A0A(__int64 a1) {\n  int result;\n  XWindowChanges <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = a1;\n  result = sub_40383B(*(_QWORD *)(a1 + Number));\n  <span class=\"supfact\">v3</span> = result;\n  if (result >= Number) {\n    <span class=\"supfact\">v2</span>.x = Number;\n    <span class=\"supfact\">v2</span>.y = dword_40A784;\n    <span class=\"supfact\">v2</span>.width = dword_40A790;\n    <span class=\"supfact\">v2</span>.height = dword_40A794 - dword_40A784;\n    <span class=\"supfact\">v2</span>.border_width = Number;\n    <span class=\"supfact\">v2</span>.sibling = *(_QWORD *)(<span class=\"supfact\">v4</span> + Number);\n    <span class=\"supfact\">v2</span>.stack_mode = *(_DWORD *)(<span class=\"supfact\">v4</span> + Number);\n    result = XConfigureWindow(\n        display, *(_QWORD *)(*((_QWORD *)ptr + <span class=\"supfact\">v3</span>) + Number L),\n        *(_QWORD *)(<span class=\"supfact\">v4</span> + Number), &<span class=\"supfact\">v2</span>);\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "struct XWindowChanges { int x; int y; int width; int height; int border_width; PADDING (4); Window sibling; int stack_mode; PADDING (4); }", "ref_name": "v2", "ref_type": "struct XWindowChanges { int x; int y; int width; int height; int border_width; PADDING (4); Window sibling; int stack_mode; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "guduzhe123", "repo_name": "Firmware_Marine", "path": "guduzhe123/Firmware_Marine/582d6d606538015083d5eab8524e53be8f5cd379c0a690a72a7c3a38ef4fc73d", "path_in_repo": "guduzhe123/Firmware_Marine/build/px4io-v2_default/NuttX/nuttx/libc/zoneinfo/tzcode/zic.o", "objdump": "00000000000018fa <itsdir>:\n    18fa:\t55                   \tpush   %rbp\n    18fb:\t48 89 e5             \tmov    %rsp,%rbp\n    18fe:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    1905:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n    190c:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n    1913:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    191a:\t48 89 d6             \tmov    %rdx,%rsi\n    191d:\t48 89 c7             \tmov    %rax,%rdi\n    1920:\te8 00 00 00 00       \tcallq  1925 <itsdir+0x2b>\n    1925:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1928:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    192c:\t75 18                \tjne    1946 <itsdir+0x4c>\n    192e:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n    1934:\t25 00 f0 00 00       \tand    $0xf000,%eax\n    1939:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n    193e:\t0f 94 c0             \tsete   %al\n    1941:\te9 19 01 00 00       \tjmpq   1a5f <itsdir+0x165>\n    1946:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    194a:\t74 10                \tje     195c <itsdir+0x62>\n    194c:\te8 00 00 00 00       \tcallq  1951 <itsdir+0x57>\n    1951:\t8b 00                \tmov    (%rax),%eax\n    1953:\t83 f8 4b             \tcmp    $0x4b,%eax\n    1956:\t0f 85 fe 00 00 00    \tjne    1a5a <itsdir+0x160>\n    195c:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    1963:\t48 89 c7             \tmov    %rax,%rdi\n    1966:\te8 00 00 00 00       \tcallq  196b <itsdir+0x71>\n    196b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    196f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1973:\t48 83 c0 03          \tadd    $0x3,%rax\n    1977:\t48 89 c7             \tmov    %rax,%rdi\n    197a:\te8 7c e7 ff ff       \tcallq  fb <emalloc>\n    197f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1983:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1987:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n    198e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1992:\t48 89 ce             \tmov    %rcx,%rsi\n    1995:\t48 89 c7             \tmov    %rax,%rdi\n    1998:\te8 00 00 00 00       \tcallq  199d <itsdir+0xa3>\n    199d:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    19a2:\t74 19                \tje     19bd <itsdir+0xc3>\n    19a4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    19a8:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n    19ac:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    19b3:\t48 01 d0             \tadd    %rdx,%rax\n    19b6:\t0f b6 00             \tmovzbl (%rax),%eax\n    19b9:\t3c 2f                \tcmp    $0x2f,%al\n    19bb:\t75 07                \tjne    19c4 <itsdir+0xca>\n    19bd:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    19c2:\teb 05                \tjmp    19c9 <itsdir+0xcf>\n    19c4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    19c9:\t48 63 d0             \tmovslq %eax,%rdx\n    19cc:\t48 8d b2 00 00 00 00 \tlea    0x0(%rdx),%rsi\n    19d3:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    19d7:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    19db:\t48 01 d1             \tadd    %rdx,%rcx\n    19de:\t48 63 d0             \tmovslq %eax,%rdx\n    19e1:\t48 98                \tcltq   \n    19e3:\tbf 03 00 00 00       \tmov    $0x3,%edi\n    19e8:\t48 29 c7             \tsub    %rax,%rdi\n    19eb:\t48 89 f8             \tmov    %rdi,%rax\n    19ee:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    19f3:\t48 83 fa 02          \tcmp    $0x2,%rdx\n    19f7:\t48 0f 47 c7          \tcmova  %rdi,%rax\n    19fb:\t48 89 c2             \tmov    %rax,%rdx\n    19fe:\t48 89 c8             \tmov    %rcx,%rax\n    1a01:\t48 89 f1             \tmov    %rsi,%rcx\n    1a04:\t48 89 ce             \tmov    %rcx,%rsi\n    1a07:\t48 89 c7             \tmov    %rax,%rdi\n    1a0a:\te8 00 00 00 00       \tcallq  1a0f <itsdir+0x115>\n    1a0f:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n    1a16:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1a1a:\t48 89 d6             \tmov    %rdx,%rsi\n    1a1d:\t48 89 c7             \tmov    %rax,%rdi\n    1a20:\te8 00 00 00 00       \tcallq  1a25 <itsdir+0x12b>\n    1a25:\t85 c0                \ttest   %eax,%eax\n    1a27:\t74 0c                \tje     1a35 <itsdir+0x13b>\n    1a29:\te8 00 00 00 00       \tcallq  1a2e <itsdir+0x134>\n    1a2e:\t8b 00                \tmov    (%rax),%eax\n    1a30:\t83 f8 4b             \tcmp    $0x4b,%eax\n    1a33:\t75 07                \tjne    1a3c <itsdir+0x142>\n    1a35:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1a3a:\teb 05                \tjmp    1a41 <itsdir+0x147>\n    1a3c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1a41:\t88 45 e7             \tmov    %al,-0x19(%rbp)\n    1a44:\t80 65 e7 01          \tandb   $0x1,-0x19(%rbp)\n    1a48:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1a4c:\t48 89 c7             \tmov    %rax,%rdi\n    1a4f:\te8 00 00 00 00       \tcallq  1a54 <itsdir+0x15a>\n    1a54:\t0f b6 45 e7          \tmovzbl -0x19(%rbp),%eax\n    1a58:\teb 05                \tjmp    1a5f <itsdir+0x165>\n    1a5a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1a5f:\tc9                   \tleaveq \n    1a60:\tc3                   \tretq   ", "code_s": "char __fastcall itsdir(const char *a1) {\n  _BOOL4 v2;\n  bool v3;\n  struct stat64 <span class=\"supfact\">v4</span>;\n  bool <span class=\"supfact\">v5</span>;\n  void *<span class=\"supfact\">dest</span>;\n  size_t <span class=\"supfact\">n</span>;\n  if (!stat64(a1, &<span class=\"supfact\">v4</span>))\n    return (<span class=\"supfact\">v4</span>.st_mode & Number) == Number;\n  if (*_errno_location() != Number)\n    return Number;\n  <span class=\"supfact\">n</span> = strlen(a1);\n  <span class=\"supfact\">dest</span> = (void *)emalloc(<span class=\"supfact\">n</span> + Number);\n  memcpy(<span class=\"supfact\">dest</span>, a1, <span class=\"supfact\">n</span>);\n  v2 = !<span class=\"supfact\">n</span> || a1[<span class=\"supfact\">n</span> - Number] == Number;\n  memcpy((char *)<span class=\"supfact\">dest</span> + <span class=\"supfact\">n</span>, &asc_A77B[v2],\n         Number L - v2);\n  v3 = !stat64((const char *)<span class=\"supfact\">dest</span>, &<span class=\"supfact\">v4</span>) ||\n       *_errno_location() == Number;\n  <span class=\"supfact\">v5</span> = v3;\n  free(<span class=\"supfact\">dest</span>);\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "bool __cdecl itsdir(const char *name) {\n  _BOOL4 v2;\n  bool v3;\n  stat <span class=\"supfact\">st</span>;\n  bool <span class=\"supfact\">dir</span>;\n  char *<span class=\"supfact\">nameslashdot</span>;\n  size_t <span class=\"supfact\">n</span>;\n  if (!stat64(name, (struct stat64 *)&<span class=\"supfact\">st</span>))\n    return (<span class=\"supfact\">st</span>.st_mode & Number) == Number;\n  if (*_errno_location() != Number)\n    return Number;\n  <span class=\"supfact\">n</span> = strlen(name);\n  <span class=\"supfact\">nameslashdot</span> = (char *)emalloc(<span class=\"supfact\">n</span> + Number);\n  memcpy(<span class=\"supfact\">nameslashdot</span>, name, <span class=\"supfact\">n</span>);\n  v2 = !<span class=\"supfact\">n</span> || name[<span class=\"supfact\">n</span> - Number] == Number;\n  memcpy(&<span class=\"supfact\">nameslashdot</span>[<span class=\"supfact\">n</span>], &asc_A77B[v2],\n         Number L - v2);\n  v3 = !stat64(<span class=\"supfact\">nameslashdot</span>,\n               (struct stat64 *)&<span class=\"supfact\">st</span>) ||\n       *_errno_location() == Number;\n  <span class=\"supfact\">dir</span> = v3;\n  free(<span class=\"supfact\">nameslashdot</span>);\n  return <span class=\"supfact\">dir</span>;\n}", "var": [{"name": "v4", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "lbt", "repo_name": "git", "path": "lbt/git/7506f241eb204f3f07b4edd4ac404e6c208bc365386f336215a4da841640f57d", "path_in_repo": "lbt/git//remote.o", "objdump": "00000000000034b1 <guess_ref>:\n    34b1:\t55                   \tpush   %rbp\n    34b2:\t48 89 e5             \tmov    %rsp,%rbp\n    34b5:\t48 83 ec 50          \tsub    $0x50,%rsp\n    34b9:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    34bd:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    34c1:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    34c8:\t00 \n    34c9:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    34d0:\t00 \n    34d1:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    34d8:\t00 \n    34d9:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    34dd:\t48 8d 78 50          \tlea    0x50(%rax),%rdi\n    34e1:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    34e5:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    34ea:\tba 01 00 00 00       \tmov    $0x1,%edx\n    34ef:\t48 89 c6             \tmov    %rax,%rsi\n    34f2:\te8 00 00 00 00       \tcallq  34f7 <guess_ref+0x46>\n    34f7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    34fb:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    3500:\t75 07                \tjne    3509 <guess_ref+0x58>\n    3502:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3507:\teb 7b                \tjmp    3584 <guess_ref+0xd3>\n    3509:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    350d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3512:\t48 89 c7             \tmov    %rax,%rdi\n    3515:\te8 00 00 00 00       \tcallq  351a <guess_ref+0x69>\n    351a:\t85 c0                \ttest   %eax,%eax\n    351c:\t75 13                \tjne    3531 <guess_ref+0x80>\n    351e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    3522:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    3527:\t48 89 c7             \tmov    %rax,%rdi\n    352a:\te8 35 cb ff ff       \tcallq  64 <strbuf_addstr>\n    352f:\teb 2f                \tjmp    3560 <guess_ref+0xaf>\n    3531:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3535:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    353a:\t48 89 c7             \tmov    %rax,%rdi\n    353d:\te8 00 00 00 00       \tcallq  3542 <guess_ref+0x91>\n    3542:\t85 c0                \ttest   %eax,%eax\n    3544:\t75 13                \tjne    3559 <guess_ref+0xa8>\n    3546:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    354a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    354f:\t48 89 c7             \tmov    %rax,%rdi\n    3552:\te8 0d cb ff ff       \tcallq  64 <strbuf_addstr>\n    3557:\teb 07                \tjmp    3560 <guess_ref+0xaf>\n    3559:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    355e:\teb 24                \tjmp    3584 <guess_ref+0xd3>\n    3560:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    3564:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    3568:\t48 89 d6             \tmov    %rdx,%rsi\n    356b:\t48 89 c7             \tmov    %rax,%rdi\n    356e:\te8 f1 ca ff ff       \tcallq  64 <strbuf_addstr>\n    3573:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    3577:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    357c:\t48 89 c7             \tmov    %rax,%rdi\n    357f:\te8 00 00 00 00       \tcallq  3584 <guess_ref+0xd3>\n    3584:\tc9                   \tleaveq \n    3585:\tc3                   \tretq   ", "code_s": "__int64 __fastcall guess_ref(const char *a1, __int64 a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  <span class=\"supfact\">v4</span>[Number] = Number L;\n  <span class=\"supfact\">v4</span>[Number] = (__int64)&strbuf_slopbuf;\n  <span class=\"supfact\">v5</span> =\n      resolve_ref_unsafe(a2 + Number, <span class=\"supfact\">v3</span>, Number L, Number L);\n  if (!<span class=\"supfact\">v5</span>)\n    return Number L;\n  if ((unsigned int)prefixcmp(<span class=\"supfact\">v5</span>, String)) {\n    if ((unsigned int)prefixcmp(<span class=\"supfact\">v5</span>, String))\n      return Number L;\n    strbuf_addstr((__int64)<span class=\"supfact\">v4</span>, String);\n  } else {\n    strbuf_addstr((__int64)<span class=\"supfact\">v4</span>, String);\n  }\n  strbuf_addstr((__int64)<span class=\"supfact\">v4</span>, a1);\n  return strbuf_detach(<span class=\"supfact\">v4</span>, Number L);\n}", "code_t": "char *__cdecl guess_ref(const char *name, ref *peer) {\n  unsigned __int8 <span class=\"supfact\">sha1</span>[Number];\n  strbuf <span class=\"supfact\">buf</span>;\n  const char *<span class=\"supfact\">r</span>;\n  <span class=\"supfact\">buf</span>.alloc = Number L;\n  <span class=\"supfact\">buf</span>.len = Number L;\n  <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span> = (char *)&strbuf_slopbuf;\n  <span class=\"supfact\">r</span> = (const char *)resolve_ref_unsafe(\n      peer->name, <span class=\"supfact\">sha1</span>, Number L, Number L);\n  if (!<span class=\"supfact\">r</span>)\n    return Number L;\n  if ((unsigned int)prefixcmp(<span class=\"supfact\">r</span>, String)) {\n    if ((unsigned int)prefixcmp(<span class=\"supfact\">r</span>, String))\n      return Number L;\n    strbuf_addstr(&<span class=\"supfact\">buf</span>, String);\n  } else {\n    strbuf_addstr(&<span class=\"supfact\">buf</span>, String);\n  }\n  strbuf_addstr(&<span class=\"supfact\">buf</span>, name);\n  return (char *)strbuf_detach(&<span class=\"supfact\">buf</span>, Number L);\n}", "var": [{"name": "v4", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "ref_name": "buf", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": false}, {"repo_owner": "liqingqiya", "repo_name": "i", "path": "liqingqiya/i/21647b87e575fe2250d57697dfb9b298b3d3b07459efd2d201b48a31cab437c8", "path_in_repo": "liqingqiya/i/tgt/usr/tgtd.o", "objdump": "0000000000000276 <oom_adjust>:\n     276:\t55                   \tpush   %rbp\n     277:\t48 89 e5             \tmov    %rsp,%rbp\n     27a:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n     281:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 288 <oom_adjust+0x12>\n     288:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     28c:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 293 <oom_adjust+0x1d>\n     293:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     297:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n     29e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2a2:\t48 89 d6             \tmov    %rdx,%rsi\n     2a5:\t48 89 c7             \tmov    %rax,%rdi\n     2a8:\te8 00 00 00 00       \tcallq  2ad <oom_adjust+0x37>\n     2ad:\t85 c0                \ttest   %eax,%eax\n     2af:\t74 16                \tje     2c7 <oom_adjust+0x51>\n     2b1:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 2b8 <oom_adjust+0x42>\n     2b8:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     2bc:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 2c3 <oom_adjust+0x4d>\n     2c3:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     2c7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2cb:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     2d0:\t48 89 c7             \tmov    %rax,%rdi\n     2d3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     2d8:\te8 00 00 00 00       \tcallq  2dd <oom_adjust+0x67>\n     2dd:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     2e0:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     2e4:\t79 2b                \tjns    311 <oom_adjust+0x9b>\n     2e6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2ed <oom_adjust+0x77>\n     2ed:\t48 8b 00             \tmov    (%rax),%rax\n     2f0:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     2f4:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2fb <oom_adjust+0x85>\n     2fb:\t48 89 c7             \tmov    %rax,%rdi\n     2fe:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     303:\te8 00 00 00 00       \tcallq  308 <oom_adjust+0x92>\n     308:\te8 00 00 00 00       \tcallq  30d <oom_adjust+0x97>\n     30d:\t8b 00                \tmov    (%rax),%eax\n     30f:\teb 6d                \tjmp    37e <oom_adjust+0x108>\n     311:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     315:\t48 89 c7             \tmov    %rax,%rdi\n     318:\te8 00 00 00 00       \tcallq  31d <oom_adjust+0xa7>\n     31d:\t48 89 c2             \tmov    %rax,%rdx\n     320:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n     324:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     327:\t48 89 ce             \tmov    %rcx,%rsi\n     32a:\t89 c7                \tmov    %eax,%edi\n     32c:\te8 00 00 00 00       \tcallq  331 <oom_adjust+0xbb>\n     331:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n     334:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n     338:\t79 35                \tjns    36f <oom_adjust+0xf9>\n     33a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 341 <oom_adjust+0xcb>\n     341:\t48 8b 00             \tmov    (%rax),%rax\n     344:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     348:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 34f <oom_adjust+0xd9>\n     34f:\t48 89 c7             \tmov    %rax,%rdi\n     352:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     357:\te8 00 00 00 00       \tcallq  35c <oom_adjust+0xe6>\n     35c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     35f:\t89 c7                \tmov    %eax,%edi\n     361:\te8 00 00 00 00       \tcallq  366 <oom_adjust+0xf0>\n     366:\te8 00 00 00 00       \tcallq  36b <oom_adjust+0xf5>\n     36b:\t8b 00                \tmov    (%rax),%eax\n     36d:\teb 0f                \tjmp    37e <oom_adjust+0x108>\n     36f:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     372:\t89 c7                \tmov    %eax,%edi\n     374:\te8 00 00 00 00       \tcallq  379 <oom_adjust+0x103>\n     379:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     37e:\tc9                   \tleaveq \n     37f:\tc3                   \tretq   ", "code_s": "__int64 oom_adjust() {\n  __int64 result;\n  size_t v1;\n  struct stat <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">fd</span>;\n  char *<span class=\"supfact\">s</span>;\n  char *<span class=\"supfact\">file</span>;\n  <span class=\"supfact\">file</span> = String;\n  <span class=\"supfact\">s</span> = String;\n  if (stat(String, &<span class=\"supfact\">v2</span>)) {\n    <span class=\"supfact\">file</span> = String;\n    <span class=\"supfact\">s</span> = String;\n  }\n  <span class=\"supfact\">fd</span> = open(<span class=\"supfact\">file</span>, Number);\n  if (<span class=\"supfact\">fd</span> >= Number) {\n    v1 = strlen(<span class=\"supfact\">s</span>);\n    <span class=\"supfact\">v3</span> = write(<span class=\"supfact\">fd</span>, <span class=\"supfact\">s</span>, v1);\n    if (<span class=\"supfact\">v3</span> >= Number) {\n      close(<span class=\"supfact\">fd</span>);\n      result = Number L;\n    } else {\n      fprintf(stderr, String, <span class=\"supfact\">file</span>);\n      close(<span class=\"supfact\">fd</span>);\n      result = (unsigned int)*_errno_location();\n    }\n  } else {\n    fprintf(stderr, String, <span class=\"supfact\">file</span>);\n    result = (unsigned int)*_errno_location();\n  }\n  return result;\n}", "code_t": "int __cdecl oom_adjust() {\n  int result;\n  size_t v1;\n  stat <span class=\"supfact\">st</span>;\n  int <span class=\"supfact\">err</span>;\n  int <span class=\"supfact\">fd</span>;\n  const char *<span class=\"supfact\">score</span>;\n  const char *<span class=\"supfact\">path</span>;\n  <span class=\"supfact\">path</span> = String;\n  <span class=\"supfact\">score</span> = String;\n  if (stat_0(String, &<span class=\"supfact\">st</span>)) {\n    <span class=\"supfact\">path</span> = String;\n    <span class=\"supfact\">score</span> = String;\n  }\n  <span class=\"supfact\">fd</span> = open(<span class=\"supfact\">path</span>, Number);\n  if (<span class=\"supfact\">fd</span> >= Number) {\n    v1 = strlen(<span class=\"supfact\">score</span>);\n    <span class=\"supfact\">err</span> = write(<span class=\"supfact\">fd</span>, <span class=\"supfact\">score</span>, v1);\n    if (<span class=\"supfact\">err</span> >= Number) {\n      close(<span class=\"supfact\">fd</span>);\n      result = Number;\n    } else {\n      fprintf(stderr, String, <span class=\"supfact\">path</span>);\n      close(<span class=\"supfact\">fd</span>);\n      result = *_errno_location();\n    }\n  } else {\n    fprintf(stderr, String, <span class=\"supfact\">path</span>);\n    result = *_errno_location();\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "liushengxi13689209566", "repo_name": "SourceReading", "path": "liushengxi13689209566/SourceReading/a810996799c73aa0ca37785002192185529da18986d98aa55722b7be8d6fcba4", "path_in_repo": "liushengxi13689209566/SourceReading/libco_with_comments/example_poll", "objdump": "0000000000403eb0 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiEPSt18_Rb_tree_node_baseRKi>:\n  403eb0:\t41 54                \tpush   %r12\n  403eb2:\t49 89 d4             \tmov    %rdx,%r12\n  403eb5:\t55                   \tpush   %rbp\n  403eb6:\t53                   \tpush   %rbx\n  403eb7:\t48 83 ec 10          \tsub    $0x10,%rsp\n  403ebb:\t48 85 f6             \ttest   %rsi,%rsi\n  403ebe:\t74 4a                \tje     403f0a <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiEPSt18_Rb_tree_node_baseRKi+0x5a>\n  403ec0:\t8b 29                \tmov    (%rcx),%ebp\n  403ec2:\t48 89 f3             \tmov    %rsi,%rbx\n  403ec5:\teb 1d                \tjmp    403ee4 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiEPSt18_Rb_tree_node_baseRKi+0x34>\n  403ec7:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n  403ece:\t00 00 \n  403ed0:\t48 8b 7b 10          \tmov    0x10(%rbx),%rdi\n  403ed4:\t49 89 dc             \tmov    %rbx,%r12\n  403ed7:\te8 c4 e8 ff ff       \tcallq  4027a0 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPSt18_Rb_tree_node_base.isra.0>\n  403edc:\t48 89 c3             \tmov    %rax,%rbx\n  403edf:\t48 85 db             \ttest   %rbx,%rbx\n  403ee2:\t74 26                \tje     403f0a <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiEPSt18_Rb_tree_node_baseRKi+0x5a>\n  403ee4:\t48 89 df             \tmov    %rbx,%rdi\n  403ee7:\te8 74 fc ff ff       \tcallq  403b60 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt13_Rb_tree_nodeIiE>\n  403eec:\t89 ee                \tmov    %ebp,%esi\n  403eee:\t8b 38                \tmov    (%rax),%edi\n  403ef0:\te8 cb e8 ff ff       \tcallq  4027c0 <_ZNKSt4lessIiEclERKiS2_.isra.0>\n  403ef5:\t84 c0                \ttest   %al,%al\n  403ef7:\t74 d7                \tje     403ed0 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiEPSt18_Rb_tree_node_baseRKi+0x20>\n  403ef9:\t48 8b 7b 18          \tmov    0x18(%rbx),%rdi\n  403efd:\te8 9e e8 ff ff       \tcallq  4027a0 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPSt18_Rb_tree_node_base.isra.0>\n  403f02:\t48 89 c3             \tmov    %rax,%rbx\n  403f05:\t48 85 db             \ttest   %rbx,%rbx\n  403f08:\t75 da                \tjne    403ee4 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiEPSt18_Rb_tree_node_baseRKi+0x34>\n  403f0a:\t48 8d 7c 24 08       \tlea    0x8(%rsp),%rdi\n  403f0f:\t4c 89 e6             \tmov    %r12,%rsi\n  403f12:\te8 79 f1 ff ff       \tcallq  403090 <_ZNSt17_Rb_tree_iteratorIiEC1EPSt18_Rb_tree_node_base>\n  403f17:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  403f1c:\t48 83 c4 10          \tadd    $0x10,%rsp\n  403f20:\t5b                   \tpop    %rbx\n  403f21:\t5d                   \tpop    %rbp\n  403f22:\t41 5c                \tpop    %r12\n  403f24:\tc3                   \tretq   \n  403f25:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  403f2c:\t00 00 00 \n  403f2f:\t90                   \tnop", "code_s": "__int64 __fastcall std\n    _Rb_tree<int, int, std _Identity<int>, std less<int>, std allocator<int>>\n    _M_lower_bound(__int64 a1, __int64 a2, __int64 a3, int *a4) {\n  int v5;\n  __int64 v6;\n  int *v7;\n  __int64 <span class=\"supfact\">v9</span>[Number];\n  if (a2) {\n    v5 = *a4;\n    v6 = a2;\n    do {\n      while (Number) {\n        v7 = (int *)std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                                 std allocator<int>>\n            _S_key(v6);\n        if (std less<int> operator()(*v7, v5))\n          break;\n        a3 = v6;\n        v6 = std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                          std allocator<int>>\n            _S_right(*(_QWORD *)(v6 + Number));\n        if (!v6)\n          goto LABEL_6;\n      }\n      v6 = std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                        std allocator<int>>\n          _S_right(*(_QWORD *)(v6 + Number));\n    } while (v6);\n  }\nLABEL_6:\n  std _Rb_tree_iterator<int> _Rb_tree_iterator(<span class=\"supfact\">v9</span>, a3);\n  return <span class=\"supfact\">v9</span>[Number];\n}", "code_t": "std _Rb_tree<int, int, std _Identity<int>, std less<int>, std allocator<int>>\n    iterator __fastcall std _Rb_tree<int, int, std _Identity<int>,\n                                     std less<int>, std allocator<int>>\n    _M_lower_bound(std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                                std allocator<int>> *const this,\n                   std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                                std allocator<int>>\n                       _Link_type __x,\n                   std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                                std allocator<int>>\n                       _Base_ptr __y,\n                   const int *__k) {\n  unsigned int v5;\n  void *v6;\n  const int *v7;\n  const int *v8;\n  std _Rb_tree_iterator<int> <span class=\"supfact\">v10</span>;\n  if (__x) {\n    v5 = *__k;\n    v6 = __x;\n    do {\n      while (Number) {\n        v7 = std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                          std allocator<int>>\n            _S_key((std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                                 std allocator<int>>\n                        _Const_Link_type)v6);\n        if (std less<int> operator()((const std less<int> *const) *\n                                         (unsigned int *)v7,\n                                     (const int *)v5, v8))\n          break;\n        __y = (std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                            std allocator<int>>\n                   _Base_ptr)v6;\n        v6 = std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                          std allocator<int>>\n            _S_right(\n                *((std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                                std allocator<int>> *const *)v6 +\n                  Number));\n        if (!v6)\n          goto LABEL_6;\n      }\n      v6 = std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                        std allocator<int>>\n          _S_right(*((std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                                   std allocator<int>> *const *)v6 +\n                     Number));\n    } while (v6);\n  }\nLABEL_6:\n  std _Rb_tree_iterator<int> _Rb_tree_iterator(&<span class=\"supfact\">v10</span>, __y);\n  return <span class=\"supfact\">v10</span>;\n}", "var": [{"name": "v9", "type": "__int64[4]", "ref_name": "v10", "ref_type": "struct std::_Rb_tree_iterator<int> { std::_Rb_tree_iterator<int>::_Base_ptr _M_node; }"}], "body_in_train": false}, {"repo_owner": "kadavris", "repo_name": "fprn", "path": "kadavris/fprn/5ed8464dde3c0819970f188e0951368fedcb0ab8a70c5d5bad24159abfde709f", "path_in_repo": "kadavris/fprn/libs/ap_tcp.o", "objdump": "0000000000000407 <ap_tcp_close_connection>:\n 407:\t55                   \tpush   %rbp\n 408:\t48 89 e5             \tmov    %rsp,%rbp\n 40b:\t48 83 ec 30          \tsub    $0x30,%rsp\n 40f:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n 412:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n 416:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 41d <ap_tcp_close_connection+0x16>\n 41d:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 420:\t48 63 d0             \tmovslq %eax,%rdx\n 423:\t48 89 d0             \tmov    %rdx,%rax\n 426:\t48 c1 e0 02          \tshl    $0x2,%rax\n 42a:\t48 01 d0             \tadd    %rdx,%rax\n 42d:\t48 01 c0             \tadd    %rax,%rax\n 430:\t48 01 d0             \tadd    %rdx,%rax\n 433:\t48 c1 e0 03          \tshl    $0x3,%rax\n 437:\t48 01 c8             \tadd    %rcx,%rax\n 43a:\t8b 00                \tmov    (%rax),%eax\n 43c:\t85 c0                \ttest   %eax,%eax\n 43e:\t0f 84 12 02 00 00    \tje     656 <ap_tcp_close_connection+0x24f>\n 444:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 44b <ap_tcp_close_connection+0x44>\n 44b:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 44e:\t48 63 d0             \tmovslq %eax,%rdx\n 451:\t48 89 d0             \tmov    %rdx,%rax\n 454:\t48 c1 e0 02          \tshl    $0x2,%rax\n 458:\t48 01 d0             \tadd    %rdx,%rax\n 45b:\t48 01 c0             \tadd    %rax,%rax\n 45e:\t48 01 d0             \tadd    %rdx,%rax\n 461:\t48 c1 e0 03          \tshl    $0x3,%rax\n 465:\t48 01 c8             \tadd    %rcx,%rax\n 468:\t8b 00                \tmov    (%rax),%eax\n 46a:\t89 c7                \tmov    %eax,%edi\n 46c:\te8 00 00 00 00       \tcallq  471 <ap_tcp_close_connection+0x6a>\n 471:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 474:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 47b <ap_tcp_close_connection+0x74>\n 47b:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 47e:\t48 63 d0             \tmovslq %eax,%rdx\n 481:\t48 89 d0             \tmov    %rdx,%rax\n 484:\t48 c1 e0 02          \tshl    $0x2,%rax\n 488:\t48 01 d0             \tadd    %rdx,%rax\n 48b:\t48 01 c0             \tadd    %rax,%rax\n 48e:\t48 01 d0             \tadd    %rdx,%rax\n 491:\t48 c1 e0 03          \tshl    $0x3,%rax\n 495:\t48 01 c8             \tadd    %rcx,%rax\n 498:\t8b 00                \tmov    (%rax),%eax\n 49a:\t89 c7                \tmov    %eax,%edi\n 49c:\te8 00 00 00 00       \tcallq  4a1 <ap_tcp_close_connection+0x9a>\n 4a1:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n 4a6:\t74 1f                \tje     4c7 <ap_tcp_close_connection+0xc0>\n 4a8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 4ac:\t48 89 c7             \tmov    %rax,%rdi\n 4af:\te8 00 00 00 00       \tcallq  4b4 <ap_tcp_close_connection+0xad>\n 4b4:\t89 c2                \tmov    %eax,%edx\n 4b6:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n 4ba:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 4bd:\t48 89 ce             \tmov    %rcx,%rsi\n 4c0:\t89 c7                \tmov    %eax,%edi\n 4c2:\te8 00 00 00 00       \tcallq  4c7 <ap_tcp_close_connection+0xc0>\n 4c7:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 4ce <ap_tcp_close_connection+0xc7>\n 4ce:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 4d1:\t48 63 d0             \tmovslq %eax,%rdx\n 4d4:\t48 89 d0             \tmov    %rdx,%rax\n 4d7:\t48 c1 e0 02          \tshl    $0x2,%rax\n 4db:\t48 01 d0             \tadd    %rdx,%rax\n 4de:\t48 01 c0             \tadd    %rax,%rax\n 4e1:\t48 01 d0             \tadd    %rdx,%rax\n 4e4:\t48 c1 e0 03          \tshl    $0x3,%rax\n 4e8:\t48 01 c8             \tadd    %rcx,%rax\n 4eb:\t8b 00                \tmov    (%rax),%eax\n 4ed:\t89 c7                \tmov    %eax,%edi\n 4ef:\te8 00 00 00 00       \tcallq  4f4 <ap_tcp_close_connection+0xed>\n 4f4:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 4fb <ap_tcp_close_connection+0xf4>\n 4fb:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 4fe:\t48 63 d0             \tmovslq %eax,%rdx\n 501:\t48 89 d0             \tmov    %rdx,%rax\n 504:\t48 c1 e0 02          \tshl    $0x2,%rax\n 508:\t48 01 d0             \tadd    %rdx,%rax\n 50b:\t48 01 c0             \tadd    %rax,%rax\n 50e:\t48 01 d0             \tadd    %rdx,%rax\n 511:\t48 c1 e0 03          \tshl    $0x3,%rax\n 515:\t48 01 c8             \tadd    %rcx,%rax\n 518:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n 51e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 524 <ap_tcp_close_connection+0x11d>\n 524:\t83 e8 01             \tsub    $0x1,%eax\n 527:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 52d <ap_tcp_close_connection+0x126>\n 52d:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 531:\t0f 85 ff 00 00 00    \tjne    636 <ap_tcp_close_connection+0x22f>\n 537:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 53b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 540:\t48 89 c7             \tmov    %rax,%rdi\n 543:\te8 00 00 00 00       \tcallq  548 <ap_tcp_close_connection+0x141>\n 548:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n 54c:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 553 <ap_tcp_close_connection+0x14c>\n 553:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 556:\t48 63 d0             \tmovslq %eax,%rdx\n 559:\t48 89 d0             \tmov    %rdx,%rax\n 55c:\t48 c1 e0 02          \tshl    $0x2,%rax\n 560:\t48 01 d0             \tadd    %rdx,%rax\n 563:\t48 01 c0             \tadd    %rax,%rax\n 566:\t48 01 d0             \tadd    %rdx,%rax\n 569:\t48 c1 e0 03          \tshl    $0x3,%rax\n 56d:\t48 01 f0             \tadd    %rsi,%rax\n 570:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 574:\t48 29 c1             \tsub    %rax,%rcx\n 577:\t48 89 c8             \tmov    %rcx,%rax\n 57a:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 57e:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n 582:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 589 <ap_tcp_close_connection+0x182>\n 589:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 58c:\t48 63 d0             \tmovslq %eax,%rdx\n 58f:\t48 89 d0             \tmov    %rdx,%rax\n 592:\t48 c1 e0 02          \tshl    $0x2,%rax\n 596:\t48 01 d0             \tadd    %rdx,%rax\n 599:\t48 01 c0             \tadd    %rax,%rax\n 59c:\t48 01 d0             \tadd    %rdx,%rax\n 59f:\t48 c1 e0 03          \tshl    $0x3,%rax\n 5a3:\t48 01 f0             \tadd    %rsi,%rax\n 5a6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n 5aa:\t48 29 c1             \tsub    %rax,%rcx\n 5ad:\t48 89 c8             \tmov    %rcx,%rax\n 5b0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 5b4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 5b8:\t48 85 c0             \ttest   %rax,%rax\n 5bb:\t79 1a                \tjns    5d7 <ap_tcp_close_connection+0x1d0>\n 5bd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 5c1:\t48 83 e8 01          \tsub    $0x1,%rax\n 5c5:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 5c9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 5cd:\t48 05 40 42 0f 00    \tadd    $0xf4240,%rax\n 5d3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 5d7:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 5de <ap_tcp_close_connection+0x1d7>\n 5de:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 5e2:\t48 01 d0             \tadd    %rdx,%rax\n 5e5:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 5ec <ap_tcp_close_connection+0x1e5>\n 5ec:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 5f3 <ap_tcp_close_connection+0x1ec>\n 5f3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 5f7:\t48 01 d0             \tadd    %rdx,%rax\n 5fa:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 601 <ap_tcp_close_connection+0x1fa>\n 601:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 608 <ap_tcp_close_connection+0x201>\n 608:\t48 3d 3f 42 0f 00    \tcmp    $0xf423f,%rax\n 60e:\t7e 26                \tjle    636 <ap_tcp_close_connection+0x22f>\n 610:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 617 <ap_tcp_close_connection+0x210>\n 617:\t48 83 c0 01          \tadd    $0x1,%rax\n 61b:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 622 <ap_tcp_close_connection+0x21b>\n 622:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 629 <ap_tcp_close_connection+0x222>\n 629:\t48 2d 40 42 0f 00    \tsub    $0xf4240,%rax\n 62f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 636 <ap_tcp_close_connection+0x22f>\n 636:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 63c <ap_tcp_close_connection+0x235>\n 63c:\t85 c0                \ttest   %eax,%eax\n 63e:\t7e 17                \tjle    657 <ap_tcp_close_connection+0x250>\n 640:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 643:\t89 c6                \tmov    %eax,%esi\n 645:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 64a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 64f:\te8 00 00 00 00       \tcallq  654 <ap_tcp_close_connection+0x24d>\n 654:\teb 01                \tjmp    657 <ap_tcp_close_connection+0x250>\n 656:\t90                   \tnop\n 657:\tc9                   \tleaveq \n 658:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ap_tcp_close_connection(signed int a1, const char *a2) {\n  __int64 result;\n  int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  int <span class=\"supfact\">v5</span>;\n  result = *(unsigned int *)(ap_tcp_connections + Number L * a1);\n  if ((_DWORD)result) {\n    <span class=\"supfact\">v5</span> =\n        is_debug_handle(*(unsigned int *)(ap_tcp_connections + Number L * a1));\n    remove_debug_handle(*(unsigned int *)(ap_tcp_connections + Number L * a1));\n    if (a2) {\n      v3 = strlen(a2);\n      ap_tcp_conn_send(a1, a2, v3);\n    }\n    close(*(_DWORD *)(ap_tcp_connections + Number L * a1));\n    *(_DWORD *)(ap_tcp_connections + Number L * a1) = Number;\n    --ap_tcp_conn_count;\n    if (!<span class=\"supfact\">v5</span>) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      <span class=\"supfact\">tv</span>.tv_sec -=\n          *(_QWORD *)(ap_tcp_connections + Number L * a1 + Number);\n      <span class=\"supfact\">tv</span>.tv_usec -=\n          *(_QWORD *)(ap_tcp_connections + Number L * a1 + Number);\n      if (<span class=\"supfact\">tv</span>.tv_usec < Number) {\n        --<span class=\"supfact\">tv</span>.tv_sec;\n        <span class=\"supfact\">tv</span>.tv_usec += Number L;\n      }\n      ap_tcp_stat[Number] += <span class=\"supfact\">tv</span>.tv_sec;\n      ap_tcp_stat[Number] += <span class=\"supfact\">tv</span>.tv_usec;\n      if (ap_tcp_stat[Number] > Number) {\n        ++ap_tcp_stat[Number];\n        ap_tcp_stat[Number] -= Number L;\n      }\n    }\n    result = debug_level;\n    if (debug_level > Number)\n      result = debuglog(String, (unsigned int)a1);\n  }\n  return result;\n}", "code_t": "void __cdecl ap_tcp_close_connection(int conn_idx, char *msg) {\n  int v2;\n  timeval <span class=\"supfact\">tv</span>;\n  int <span class=\"supfact\">dh_0</span>;\n  if (ap_tcp_connections[conn_idx].fd) {\n    <span class=\"supfact\">dh_0</span> =\n        is_debug_handle((unsigned int)ap_tcp_connections[conn_idx].fd);\n    remove_debug_handle((unsigned int)ap_tcp_connections[conn_idx].fd);\n    if (msg) {\n      v2 = strlen(msg);\n      ap_tcp_conn_send(conn_idx, msg, v2);\n    }\n    close(ap_tcp_connections[conn_idx].fd);\n    ap_tcp_connections[conn_idx].fd = Number;\n    --ap_tcp_conn_count;\n    if (!<span class=\"supfact\">dh_0</span>) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      <span class=\"supfact\">tv</span>.tv_sec -=\n          ap_tcp_connections[conn_idx].created_time.tv_sec;\n      <span class=\"supfact\">tv</span>.tv_usec -=\n          ap_tcp_connections[conn_idx].created_time.tv_usec;\n      if (<span class=\"supfact\">tv</span>.tv_usec < Number) {\n        --<span class=\"supfact\">tv</span>.tv_sec;\n        <span class=\"supfact\">tv</span>.tv_usec += Number L;\n      }\n      ap_tcp_stat.total_time.tv_sec += <span class=\"supfact\">tv</span>.tv_sec;\n      ap_tcp_stat.total_time.tv_usec += <span class=\"supfact\">tv</span>.tv_usec;\n      if (ap_tcp_stat.total_time.tv_usec > Number) {\n        ++ap_tcp_stat.total_time.tv_sec;\n        ap_tcp_stat.total_time.tv_usec -= Number L;\n      }\n    }\n    if (debug_level > Number)\n      debuglog(String, (unsigned int)conn_idx);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "pathscale", "repo_name": "absoft", "path": "pathscale/absoft/8ae466f99711e0b47658455b742024312490a4e84c25739aa982c2905d4a7cfb", "path_in_repo": "pathscale/absoft/svn/trunk/kpro64/targx8664_builtonia32/libfortran/matmul_l2l1.pg.o", "objdump": "000000000000089d <_MATMUL_L2L1>:\n 89d:\t55                   \tpush   %rbp\n 89e:\t48 89 e5             \tmov    %rsp,%rbp\n 8a1:\t41 56                \tpush   %r14\n 8a3:\t41 55                \tpush   %r13\n 8a5:\t41 54                \tpush   %r12\n 8a7:\t53                   \tpush   %rbx\n 8a8:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n 8af:\te8 00 00 00 00       \tcallq  8b4 <_MATMUL_L2L1+0x17>\n 8b4:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n 8bb:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n 8c2:\t48 89 95 58 ff ff ff \tmov    %rdx,-0xa8(%rbp)\n 8c9:\t66 c7 45 d6 01 00    \tmovw   $0x1,-0x2a(%rbp)\n 8cf:\t66 c7 45 d4 00 00    \tmovw   $0x0,-0x2c(%rbp)\n 8d5:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 8dc:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 8e0:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n 8e4:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n 8eb:\t48 8b b5 60 ff ff ff \tmov    -0xa0(%rbp),%rsi\n 8f2:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n 8f9:\t48 89 c7             \tmov    %rax,%rdi\n 8fc:\te8 2e f7 ff ff       \tcallq  2f <_premult>\n 901:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 905:\t4c 8d 60 58          \tlea    0x58(%rax),%r12\n 909:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 90d:\t48 8d 58 5c          \tlea    0x5c(%rax),%rbx\n 911:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 915:\t4c 8b 40 10          \tmov    0x10(%rax),%r8\n 919:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 91d:\t4c 8d 58 48          \tlea    0x48(%rax),%r11\n 921:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 925:\t4c 8d 50 4c          \tlea    0x4c(%rax),%r10\n 929:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 92d:\t48 8b 08             \tmov    (%rax),%rcx\n 930:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 934:\t4c 8d 48 50          \tlea    0x50(%rax),%r9\n 938:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 93c:\t4c 8d 70 54          \tlea    0x54(%rax),%r14\n 940:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 944:\t4c 8b 68 08          \tmov    0x8(%rax),%r13\n 948:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 94c:\t48 8d 50 44          \tlea    0x44(%rax),%rdx\n 950:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 954:\t48 8d 70 3c          \tlea    0x3c(%rax),%rsi\n 958:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 95c:\t48 8d 78 40          \tlea    0x40(%rax),%rdi\n 960:\t48 8d 45 d6          \tlea    -0x2a(%rbp),%rax\n 964:\t41 54                \tpush   %r12\n 966:\t53                   \tpush   %rbx\n 967:\t41 50                \tpush   %r8\n 969:\t4c 8d 45 d4          \tlea    -0x2c(%rbp),%r8\n 96d:\t41 50                \tpush   %r8\n 96f:\t41 53                \tpush   %r11\n 971:\t41 52                \tpush   %r10\n 973:\t51                   \tpush   %rcx\n 974:\t41 51                \tpush   %r9\n 976:\t4d 89 f1             \tmov    %r14,%r9\n 979:\t4d 89 e8             \tmov    %r13,%r8\n 97c:\t48 89 c1             \tmov    %rax,%rcx\n 97f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 984:\te8 00 00 00 00       \tcallq  989 <_MATMUL_L2L1+0xec>\n 989:\t48 83 c4 40          \tadd    $0x40,%rsp\n 98d:\t90                   \tnop\n 98e:\t48 8d 65 e0          \tlea    -0x20(%rbp),%rsp\n 992:\t5b                   \tpop    %rbx\n 993:\t41 5c                \tpop    %r12\n 995:\t41 5d                \tpop    %r13\n 997:\t41 5e                \tpop    %r14\n 999:\t5d                   \tpop    %rbp\n 99a:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall MATMUL_L2L1(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  __int16 <span class=\"supfact\">v5</span>;\n  __int16 <span class=\"supfact\">v6</span>;\n  char *<span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v6</span> = Number;\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">v7</span> = <span class=\"supfact\">v4</span>;\n  premult(a1, a2, a3, (__int64)<span class=\"supfact\">v4</span>);\n  return l1l2gemmx__(<span class=\"supfact\">v7</span> + Number, <span class=\"supfact\">v7</span> + Number,\n                     <span class=\"supfact\">v7</span> + Number, &<span class=\"supfact\">v6</span>,\n                     *((_QWORD *)<span class=\"supfact\">v7</span> + Number),\n                     <span class=\"supfact\">v7</span> + Number, <span class=\"supfact\">v7</span> + Number,\n                     *(_QWORD *)<span class=\"supfact\">v7</span>, <span class=\"supfact\">v7</span> + Number,\n                     <span class=\"supfact\">v7</span> + Number, &<span class=\"supfact\">v5</span>,\n                     *((_QWORD *)<span class=\"supfact\">v7</span> + Number),\n                     <span class=\"supfact\">v7</span> + Number, <span class=\"supfact\">v7</span> + Number);\n}", "code_t": "void __cdecl MATMUL_L2L1(DopeVectorType *RESULT, DopeVectorType *MATRIX_A,\n                         DopeVectorType *MATRIX_B) {\n  MatrixDimenType <span class=\"supfact\">matdimdata</span>;\n  _f_int2 <span class=\"supfact\">false</span>;\n  _f_int2 <span class=\"supfact\">true</span>;\n  MatrixDimenType *<span class=\"supfact\">MATDIM</span>;\n  <span class=\"supfact\">true</span> = Number;\n  <span class=\"supfact\">false</span> = Number;\n  <span class=\"supfact\">MATDIM</span> = &<span class=\"supfact\">matdimdata</span>;\n  premult(RESULT, MATRIX_A, MATRIX_B, &<span class=\"supfact\">matdimdata</span>);\n  l1l2gemmx__(&<span class=\"supfact\">MATDIM</span>->n, &<span class=\"supfact\">MATDIM</span>->m,\n              &<span class=\"supfact\">MATDIM</span>->k, &<span class=\"supfact\">true</span>,\n              <span class=\"supfact\">MATDIM</span>->B, &<span class=\"supfact\">MATDIM</span>->inc2b,\n              &<span class=\"supfact\">MATDIM</span>->inc1b, <span class=\"supfact\">MATDIM</span>->A,\n              &<span class=\"supfact\">MATDIM</span>->inc2a, &<span class=\"supfact\">MATDIM</span>->inc1a,\n              &<span class=\"supfact\">false</span>, <span class=\"supfact\">MATDIM</span>->C,\n              &<span class=\"supfact\">MATDIM</span>->inc2c, &<span class=\"supfact\">MATDIM</span>->inc1c);\n}", "var": [{"name": "v4", "type": "struct MatrixDimenType { void * A; void * B; void * C; int ndima; int ndimb; int ndimc; int n1a; int n2a; int n1b; int n2b; int n1c; int n2c; int m; int n; int k; int inc1a; int inc2a; int inc1b; int inc2b; int inc1c; int inc2c; }", "ref_name": "matdimdata", "ref_type": "struct MatrixDimenType { void * A; void * B; void * C; int ndima; int ndimb; int ndimc; int n1a; int n2a; int n1b; int n2b; int n1c; int n2c; int m; int n; int k; int inc1a; int inc2a; int inc1b; int inc2b; int inc1c; int inc2c; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/7c8b7a7781f1cadd00b86bd331a6acad366142cb3db9ab2fde20cee244c5ff14", "path_in_repo": "XanClic/qemu//qemu-ga", "objdump": "000000000003d467 <unix_connect_saddr>:\n   3d467:\t55                   \tpush   %rbp\n   3d468:\t48 89 e5             \tmov    %rsp,%rbp\n   3d46b:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n   3d472:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n   3d479:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n   3d480:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n   3d487:\t00 00 \n   3d489:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   3d48d:\t31 c0                \txor    %eax,%eax\n   3d48f:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n   3d496:\t48 8b 00             \tmov    (%rax),%rax\n   3d499:\t48 85 c0             \ttest   %rax,%rax\n   3d49c:\t75 38                \tjne    3d4d6 <unix_connect_saddr+0x6f>\n   3d49e:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n   3d4a5:\t4c 8d 05 54 88 01 00 \tlea    0x18854(%rip),%r8        # 55d00 <__PRETTY_FUNCTION__.14486+0x4e0>\n   3d4ac:\t48 8d 0d 8d 8b 01 00 \tlea    0x18b8d(%rip),%rcx        # 56040 <__func__.22499>\n   3d4b3:\tba b0 03 00 00       \tmov    $0x3b0,%edx\n   3d4b8:\t48 8d 35 d3 83 01 00 \tlea    0x183d3(%rip),%rsi        # 55892 <__PRETTY_FUNCTION__.14486+0x72>\n   3d4bf:\t48 89 c7             \tmov    %rax,%rdi\n   3d4c2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d4c7:\te8 32 ad ff ff       \tcallq  381fe <error_setg_internal>\n   3d4cc:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   3d4d1:\te9 dd 01 00 00       \tjmpq   3d6b3 <unix_connect_saddr+0x24c>\n   3d4d6:\tba 00 00 00 00       \tmov    $0x0,%edx\n   3d4db:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   3d4e0:\tbf 01 00 00 00       \tmov    $0x1,%edi\n   3d4e5:\te8 74 63 ff ff       \tcallq  3385e <qemu_socket>\n   3d4ea:\t89 85 74 ff ff ff    \tmov    %eax,-0x8c(%rbp)\n   3d4f0:\t83 bd 74 ff ff ff 00 \tcmpl   $0x0,-0x8c(%rbp)\n   3d4f7:\t79 42                \tjns    3d53b <unix_connect_saddr+0xd4>\n   3d4f9:\te8 72 db fc ff       \tcallq  b070 <__errno_location@plt>\n   3d4fe:\t8b 10                \tmov    (%rax),%edx\n   3d500:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n   3d507:\t4c 8d 0d f5 84 01 00 \tlea    0x184f5(%rip),%r9        # 55a03 <__PRETTY_FUNCTION__.14486+0x1e3>\n   3d50e:\t41 89 d0             \tmov    %edx,%r8d\n   3d511:\t48 8d 0d 28 8b 01 00 \tlea    0x18b28(%rip),%rcx        # 56040 <__func__.22499>\n   3d518:\tba b6 03 00 00       \tmov    $0x3b6,%edx\n   3d51d:\t48 8d 35 6e 83 01 00 \tlea    0x1836e(%rip),%rsi        # 55892 <__PRETTY_FUNCTION__.14486+0x72>\n   3d524:\t48 89 c7             \tmov    %rax,%rdi\n   3d527:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d52c:\te8 bf ad ff ff       \tcallq  382f0 <error_setg_errno_internal>\n   3d531:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   3d536:\te9 78 01 00 00       \tjmpq   3d6b3 <unix_connect_saddr+0x24c>\n   3d53b:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n   3d542:\t48 8b 00             \tmov    (%rax),%rax\n   3d545:\t48 89 c7             \tmov    %rax,%rdi\n   3d548:\te8 d3 dd fc ff       \tcallq  b320 <strlen@plt>\n   3d54d:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n   3d554:\t48 83 bd 78 ff ff ff \tcmpq   $0x6c,-0x88(%rbp)\n   3d55b:\t6c \n   3d55c:\t76 60                \tjbe    3d5be <unix_connect_saddr+0x157>\n   3d55e:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n   3d565:\t48 8b 10             \tmov    (%rax),%rdx\n   3d568:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n   3d56f:\t49 89 d1             \tmov    %rdx,%r9\n   3d572:\t4c 8d 05 d7 86 01 00 \tlea    0x186d7(%rip),%r8        # 55c50 <__PRETTY_FUNCTION__.14486+0x430>\n   3d579:\t48 8d 0d c0 8a 01 00 \tlea    0x18ac0(%rip),%rcx        # 56040 <__func__.22499>\n   3d580:\tba bc 03 00 00       \tmov    $0x3bc,%edx\n   3d585:\t48 8d 35 06 83 01 00 \tlea    0x18306(%rip),%rsi        # 55892 <__PRETTY_FUNCTION__.14486+0x72>\n   3d58c:\t48 89 c7             \tmov    %rax,%rdi\n   3d58f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d594:\te8 65 ac ff ff       \tcallq  381fe <error_setg_internal>\n   3d599:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n   3d5a0:\tba 6c 00 00 00       \tmov    $0x6c,%edx\n   3d5a5:\t48 8d 35 cc 86 01 00 \tlea    0x186cc(%rip),%rsi        # 55c78 <__PRETTY_FUNCTION__.14486+0x458>\n   3d5ac:\t48 89 c7             \tmov    %rax,%rdi\n   3d5af:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d5b4:\te8 15 b0 ff ff       \tcallq  385ce <error_append_hint>\n   3d5b9:\te9 e3 00 00 00       \tjmpq   3d6a1 <unix_connect_saddr+0x23a>\n   3d5be:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n   3d5c2:\tba 6e 00 00 00       \tmov    $0x6e,%edx\n   3d5c7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   3d5cc:\t48 89 c7             \tmov    %rax,%rdi\n   3d5cf:\te8 9c de fc ff       \tcallq  b470 <memset@plt>\n   3d5d4:\t66 c7 45 80 01 00    \tmovw   $0x1,-0x80(%rbp)\n   3d5da:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n   3d5e1:\t48 8b 00             \tmov    (%rax),%rax\n   3d5e4:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n   3d5eb:\t48 8d 4d 80          \tlea    -0x80(%rbp),%rcx\n   3d5ef:\t48 83 c1 02          \tadd    $0x2,%rcx\n   3d5f3:\t48 89 c6             \tmov    %rax,%rsi\n   3d5f6:\t48 89 cf             \tmov    %rcx,%rdi\n   3d5f9:\te8 c2 e0 fc ff       \tcallq  b6c0 <memcpy@plt>\n   3d5fe:\tc7 85 70 ff ff ff 00 \tmovl   $0x0,-0x90(%rbp)\n   3d605:\t00 00 00 \n   3d608:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n   3d60c:\t48 89 c1             \tmov    %rax,%rcx\n   3d60f:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n   3d615:\tba 6e 00 00 00       \tmov    $0x6e,%edx\n   3d61a:\t48 89 ce             \tmov    %rcx,%rsi\n   3d61d:\t89 c7                \tmov    %eax,%edi\n   3d61f:\te8 ac e0 fc ff       \tcallq  b6d0 <connect@plt>\n   3d624:\t85 c0                \ttest   %eax,%eax\n   3d626:\t79 0f                \tjns    3d637 <unix_connect_saddr+0x1d0>\n   3d628:\te8 43 da fc ff       \tcallq  b070 <__errno_location@plt>\n   3d62d:\t8b 00                \tmov    (%rax),%eax\n   3d62f:\tf7 d8                \tneg    %eax\n   3d631:\t89 85 70 ff ff ff    \tmov    %eax,-0x90(%rbp)\n   3d637:\t83 bd 70 ff ff ff fc \tcmpl   $0xfffffffc,-0x90(%rbp)\n   3d63e:\t74 be                \tje     3d5fe <unix_connect_saddr+0x197>\n   3d640:\t83 bd 70 ff ff ff 00 \tcmpl   $0x0,-0x90(%rbp)\n   3d647:\t79 50                \tjns    3d699 <unix_connect_saddr+0x232>\n   3d649:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n   3d650:\t48 8b 10             \tmov    (%rax),%rdx\n   3d653:\t8b 85 70 ff ff ff    \tmov    -0x90(%rbp),%eax\n   3d659:\tf7 d8                \tneg    %eax\n   3d65b:\t89 c1                \tmov    %eax,%ecx\n   3d65d:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n   3d664:\t48 83 ec 08          \tsub    $0x8,%rsp\n   3d668:\t52                   \tpush   %rdx\n   3d669:\t4c 8d 0d b0 86 01 00 \tlea    0x186b0(%rip),%r9        # 55d20 <__PRETTY_FUNCTION__.14486+0x500>\n   3d670:\t41 89 c8             \tmov    %ecx,%r8d\n   3d673:\t48 8d 0d c6 89 01 00 \tlea    0x189c6(%rip),%rcx        # 56040 <__func__.22499>\n   3d67a:\tba cf 03 00 00       \tmov    $0x3cf,%edx\n   3d67f:\t48 8d 35 0c 82 01 00 \tlea    0x1820c(%rip),%rsi        # 55892 <__PRETTY_FUNCTION__.14486+0x72>\n   3d686:\t48 89 c7             \tmov    %rax,%rdi\n   3d689:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   3d68e:\te8 5d ac ff ff       \tcallq  382f0 <error_setg_errno_internal>\n   3d693:\t48 83 c4 10          \tadd    $0x10,%rsp\n   3d697:\teb 08                \tjmp    3d6a1 <unix_connect_saddr+0x23a>\n   3d699:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n   3d69f:\teb 12                \tjmp    3d6b3 <unix_connect_saddr+0x24c>\n   3d6a1:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n   3d6a7:\t89 c7                \tmov    %eax,%edi\n   3d6a9:\te8 f2 ec fc ff       \tcallq  c3a0 <close@plt>\n   3d6ae:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n   3d6b3:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n   3d6b7:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n   3d6be:\t00 00 \n   3d6c0:\t74 05                \tje     3d6c7 <unix_connect_saddr+0x260>\n   3d6c2:\te8 a9 e2 fc ff       \tcallq  b970 <__stack_chk_fail@plt>\n   3d6c7:\tc9                   \tleaveq \n   3d6c8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall unix_connect_saddr(const char **a1, __int64 *a2, __int64 a3,\n                                      __int64 a4, __int64 a5, __int64 a6) {\n  int *v7;\n  int <span class=\"supfact\">v8</span>;\n  int <span class=\"supfact\">fd</span>;\n  size_t <span class=\"supfact\">n</span>;\n  struct sockaddr <span class=\"supfact\">s</span>;\n  unsigned __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = __readfsqword(Number);\n  if (!*a1) {\n    error_setg_internal(a2, (__int64)String, Number, (__int64)String,\n                        (__int64)String, a6);\n    return Number;\n  }\n  <span class=\"supfact\">fd</span> = qemu_socket(Number, Number, Number);\n  if (<span class=\"supfact\">fd</span> < Number) {\n    v7 = __errno_location();\n    error_setg_errno_internal(a2, (__int64)String, Number, (__int64)String, *v7,\n                              (__int64)String);\n    return Number;\n  }\n  <span class=\"supfact\">n</span> = strlen(*a1);\n  if (<span class=\"supfact\">n</span> <= Number) {\n    memset(&<span class=\"supfact\">s</span>, Number, Number);\n    <span class=\"supfact\">s</span>.sa_family = Number;\n    memcpy(<span class=\"supfact\">s</span>.sa_data, *a1, <span class=\"supfact\">n</span>);\n    do {\n      <span class=\"supfact\">v8</span> = Number;\n      if (connect(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">s</span>, Number) < Number)\n        <span class=\"supfact\">v8</span> = -*__errno_location();\n    } while (<span class=\"supfact\">v8</span> == Number);\n    if (<span class=\"supfact\">v8</span> >= Number)\n      return (unsigned int)<span class=\"supfact\">fd</span>;\n    error_setg_errno_internal(a2, (__int64)String, Number, (__int64)String,\n                              -<span class=\"supfact\">v8</span>, (__int64)String, *a1);\n  } else {\n    error_setg_internal(a2, (__int64)String, Number, (__int64)String,\n                        (__int64)String, (__int64)*a1);\n    error_append_hint(a2);\n  }\n  close(<span class=\"supfact\">fd</span>);\n  return Number;\n}", "code_t": "int __cdecl unix_connect_saddr(UnixSocketAddress_0 *saddr, Error_0 **errp) {\n  int *v3;\n  int <span class=\"supfact\">rc</span>;\n  int <span class=\"supfact\">sock</span>;\n  size_t <span class=\"supfact\">pathlen</span>;\n  sockaddr_un <span class=\"supfact\">un</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (!saddr->path) {\n    error_setg_internal(errp, String, Number, String, String);\n    return Number;\n  }\n  <span class=\"supfact\">sock</span> = qemu_socket(Number, Number, Number);\n  if (<span class=\"supfact\">sock</span> < Number) {\n    v3 = __errno_location();\n    error_setg_errno_internal(errp, String, Number, String, *v3, String);\n    return Number;\n  }\n  <span class=\"supfact\">pathlen</span> = strlen(saddr->path);\n  if (<span class=\"supfact\">pathlen</span> <= Number) {\n    memset(&<span class=\"supfact\">un</span>, Number, sizeof(<span class=\"supfact\">un</span>));\n    <span class=\"supfact\">un</span>.sun_family = Number;\n    memcpy(<span class=\"supfact\">un</span>.sun_path, saddr->path, <span class=\"supfact\">pathlen</span>);\n    do {\n      <span class=\"supfact\">rc</span> = Number;\n      if (connect(<span class=\"supfact\">sock</span>,\n                  (const struct sockaddr *)&<span class=\"supfact\">un</span>,\n                  Number) < Number)\n        <span class=\"supfact\">rc</span> = -*__errno_location();\n    } while (<span class=\"supfact\">rc</span> == Number);\n    if (<span class=\"supfact\">rc</span> >= Number)\n      return <span class=\"supfact\">sock</span>;\n    error_setg_errno_internal(errp, String, Number, String, -<span class=\"supfact\">rc</span>,\n                              String, saddr->path);\n  } else {\n    error_setg_internal(errp, String, Number, String, String, saddr->path);\n    error_append_hint(errp, String, Number);\n  }\n  close(<span class=\"supfact\">sock</span>);\n  return Number;\n}", "var": [{"name": "s", "type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }", "ref_name": "un", "ref_type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/1c63823da0e00a44d4de58dac08a08f99583cd862fbba6ec752f0074f38c3ca5", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/lib/RakNet/NatPunchthroughClient.o", "objdump": "0000000000001dfa <_ZN6RakNet21NatPunchthroughClient7SendTTLENS_13SystemAddressE>:\n    1dfa:\t55                   \tpush   %rbp\n    1dfb:\t48 89 e5             \tmov    %rsp,%rbp\n    1dfe:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1e02:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1e06:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    1e0a:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1e0e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e13:\t48 89 c7             \tmov    %rax,%rdi\n    1e16:\te8 00 00 00 00       \tcallq  1e1b <_ZN6RakNet21NatPunchthroughClient7SendTTLENS_13SystemAddressE+0x21>\n    1e1b:\t84 c0                \ttest   %al,%al\n    1e1d:\t75 59                \tjne    1e78 <_ZN6RakNet21NatPunchthroughClient7SendTTLENS_13SystemAddressE+0x7e>\n    1e1f:\t0f b7 45 d4          \tmovzwl -0x2c(%rbp),%eax\n    1e23:\t66 85 c0             \ttest   %ax,%ax\n    1e26:\t74 53                \tje     1e7b <_ZN6RakNet21NatPunchthroughClient7SendTTLENS_13SystemAddressE+0x81>\n    1e28:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    1e2c:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1e30:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e35:\t48 89 c7             \tmov    %rax,%rdi\n    1e38:\te8 00 00 00 00       \tcallq  1e3d <_ZN6RakNet21NatPunchthroughClient7SendTTLENS_13SystemAddressE+0x43>\n    1e3d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1e41:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1e45:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    1e49:\t48 8b 52 08          \tmov    0x8(%rdx),%rdx\n    1e4d:\t48 8b 12             \tmov    (%rdx),%rdx\n    1e50:\t48 81 c2 08 02 00 00 \tadd    $0x208,%rdx\n    1e57:\t4c 8b 0a             \tmov    (%rdx),%r9\n    1e5a:\t0f b7 55 d4          \tmovzwl -0x2c(%rbp),%edx\n    1e5e:\t0f b7 d2             \tmovzwl %dx,%edx\n    1e61:\t48 8d 75 e0          \tlea    -0x20(%rbp),%rsi\n    1e65:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1e6b:\tb9 03 00 00 00       \tmov    $0x3,%ecx\n    1e70:\t48 89 c7             \tmov    %rax,%rdi\n    1e73:\t41 ff d1             \tcallq  *%r9\n    1e76:\teb 04                \tjmp    1e7c <_ZN6RakNet21NatPunchthroughClient7SendTTLENS_13SystemAddressE+0x82>\n    1e78:\t90                   \tnop\n    1e79:\teb 01                \tjmp    1e7c <_ZN6RakNet21NatPunchthroughClient7SendTTLENS_13SystemAddressE+0x82>\n    1e7b:\t90                   \tnop\n    1e7c:\tc9                   \tleaveq \n    1e7d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall RakNet NatPunchthroughClient SendTTL(__int64 a1,\n                                                        __int64 a2) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  <span class=\"supfact\">v4</span> = a1;\n  <span class=\"supfact\">v3</span> = a2;\n  result = RakNet SystemAddress operator==(&<span class=\"supfact\">v3</span>,\n                                           &RakNet UNASSIGNED_SYSTEM_ADDRESS);\n  if (!(_BYTE)result) {\n    result = WORD2(<span class=\"supfact\">v3</span>);\n    if (WORD2(<span class=\"supfact\">v3</span>)) {\n      RakNet SystemAddress ToString((RakNet SystemAddress *)&<span class=\"supfact\">v3</span>,\n                                    Number, <span class=\"supfact\">v5</span>);\n      result =\n          (*(__int64(__fastcall **)(_QWORD, char *, _QWORD, __int64, _QWORD))(\n              **(_QWORD **)(<span class=\"supfact\">v4</span> + Number) + Number L))(\n              *(_QWORD *)(<span class=\"supfact\">v4</span> + Number), <span class=\"supfact\">v5</span>,\n              WORD2(<span class=\"supfact\">v3</span>), Number L, Number L);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl RakNet NatPunchthroughClient\nSendTTL(RakNet NatPunchthroughClient *const this, RakNet SystemAddress sa) {\n  RakNet SystemAddress <span class=\"supfact\">saa</span>;\n  RakNet NatPunchthroughClient *<span class=\"supfact\">thisa</span>;\n  char <span class=\"supfact\">ipAddressString</span>[Number];\n  <span class=\"supfact\">thisa</span> = this;\n  <span class=\"supfact\">saa</span> = sa;\n  if (!(unsigned __int8)RakNet SystemAddress operator==(\n          &<span class=\"supfact\">saa</span>, &RakNet UNASSIGNED_SYSTEM_ADDRESS)) {\n    if (<span class=\"supfact\">saa</span>.port) {\n      RakNet SystemAddress ToString(&<span class=\"supfact\">saa</span>, Number,\n                                    <span class=\"supfact\">ipAddressString</span>);\n      (*(void(__fastcall **)(_QWORD, char *, _QWORD, __int64, _QWORD))(\n          **(_QWORD **)&<span class=\"supfact\">thisa</span>->baseclass_0[Number] + Number L))(\n          *(_QWORD *)&<span class=\"supfact\">thisa</span>->baseclass_0[Number],\n          <span class=\"supfact\">ipAddressString</span>, <span class=\"supfact\">saa</span>.port, Number L,\n          Number L);\n    }\n  }\n}", "var": [{"name": "v3", "type": "ogg_stream *", "ref_name": "saa", "ref_type": "struct RakNet::SystemAddress { uint32_t binaryAddress; unsigned __int16 port; RakNet::SystemIndex systemIndex; }"}], "body_in_train": false}, {"repo_owner": "peterfillmore", "repo_name": "QEMU-Experimentation", "path": "peterfillmore/QEMU-Experimentation/84af56cb227c6ff43a28f9d03c63736f620f7f65b7813601378713df9ecafde5", "path_in_repo": "peterfillmore/QEMU-Experimentation//block/raw_bsd.o", "objdump": "0000000000000066 <raw_co_writev>:\n  66:\t55                   \tpush   %rbp\n  67:\t48 89 e5             \tmov    %rsp,%rbp\n  6a:\t48 83 ec 60          \tsub    $0x60,%rsp\n  6e:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  72:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  76:\t89 55 ac             \tmov    %edx,-0x54(%rbp)\n  79:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n  7d:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  84:\t00 00 \n  86:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  8a:\t31 c0                \txor    %eax,%eax\n  8c:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  93:\t00 \n  94:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  98:\t0f b6 40 20          \tmovzbl 0x20(%rax),%eax\n  9c:\t84 c0                \ttest   %al,%al\n  9e:\t0f 84 0f 01 00 00    \tje     1b3 <raw_co_writev+0x14d>\n  a4:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n  a9:\t0f 85 04 01 00 00    \tjne    1b3 <raw_co_writev+0x14d>\n  af:\t83 7d ac 00          \tcmpl   $0x0,-0x54(%rbp)\n  b3:\t75 0a                \tjne    bf <raw_co_writev+0x59>\n  b5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  ba:\te9 52 01 00 00       \tjmpq   211 <raw_co_writev+0x1ab>\n  bf:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  c3:\t48 8b 80 70 0c 00 00 \tmov    0xc70(%rax),%rax\n  ca:\tbe 00 02 00 00       \tmov    $0x200,%esi\n  cf:\t48 89 c7             \tmov    %rax,%rdi\n  d2:\te8 00 00 00 00       \tcallq  d7 <raw_co_writev+0x71>\n  d7:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  db:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  e0:\t75 0c                \tjne    ee <raw_co_writev+0x88>\n  e2:\tc7 45 cc f4 ff ff ff \tmovl   $0xfffffff4,-0x34(%rbp)\n  e9:\te9 fe 00 00 00       \tjmpq   1ec <raw_co_writev+0x186>\n  ee:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  f2:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n  f6:\tb9 00 02 00 00       \tmov    $0x200,%ecx\n  fb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 100:\t48 89 c7             \tmov    %rax,%rdi\n 103:\te8 00 00 00 00       \tcallq  108 <raw_co_writev+0xa2>\n 108:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n 10b:\t81 7d cc 00 02 00 00 \tcmpl   $0x200,-0x34(%rbp)\n 112:\t74 0c                \tje     120 <raw_co_writev+0xba>\n 114:\tc7 45 cc ea ff ff ff \tmovl   $0xffffffea,-0x34(%rbp)\n 11b:\te9 cc 00 00 00       \tjmpq   1ec <raw_co_writev+0x186>\n 120:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 124:\tba 00 00 00 00       \tmov    $0x0,%edx\n 129:\tbe 00 02 00 00       \tmov    $0x200,%esi\n 12e:\t48 89 c7             \tmov    %rax,%rdi\n 131:\te8 00 00 00 00       \tcallq  136 <raw_co_writev+0xd0>\n 136:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 13a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 13e:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n 142:\t48 39 45 d8          \tcmp    %rax,-0x28(%rbp)\n 146:\t74 0c                \tje     154 <raw_co_writev+0xee>\n 148:\tc7 45 cc ff ff ff ff \tmovl   $0xffffffff,-0x34(%rbp)\n 14f:\te9 98 00 00 00       \tjmpq   1ec <raw_co_writev+0x186>\n 154:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 158:\t8b 40 08             \tmov    0x8(%rax),%eax\n 15b:\t8d 50 01             \tlea    0x1(%rax),%edx\n 15e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 162:\t89 d6                \tmov    %edx,%esi\n 164:\t48 89 c7             \tmov    %rax,%rdi\n 167:\te8 00 00 00 00       \tcallq  16c <raw_co_writev+0x106>\n 16c:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n 170:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 174:\tba 00 02 00 00       \tmov    $0x200,%edx\n 179:\t48 89 ce             \tmov    %rcx,%rsi\n 17c:\t48 89 c7             \tmov    %rax,%rdi\n 17f:\te8 00 00 00 00       \tcallq  184 <raw_co_writev+0x11e>\n 184:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 188:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 18c:\t48 8d 90 00 fe ff ff \tlea    -0x200(%rax),%rdx\n 193:\t48 8b 75 a0          \tmov    -0x60(%rbp),%rsi\n 197:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 19b:\t48 89 d1             \tmov    %rdx,%rcx\n 19e:\tba 00 02 00 00       \tmov    $0x200,%edx\n 1a3:\t48 89 c7             \tmov    %rax,%rdi\n 1a6:\te8 00 00 00 00       \tcallq  1ab <raw_co_writev+0x145>\n 1ab:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 1af:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n 1b3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 1b7:\t48 8b 80 70 0c 00 00 \tmov    0xc70(%rax),%rax\n 1be:\tbe 0c 00 00 00       \tmov    $0xc,%esi\n 1c3:\t48 89 c7             \tmov    %rax,%rdi\n 1c6:\te8 00 00 00 00       \tcallq  1cb <raw_co_writev+0x165>\n 1cb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 1cf:\t48 8b 80 70 0c 00 00 \tmov    0xc70(%rax),%rax\n 1d6:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n 1da:\t8b 55 ac             \tmov    -0x54(%rbp),%edx\n 1dd:\t48 8b 75 b0          \tmov    -0x50(%rbp),%rsi\n 1e1:\t48 89 c7             \tmov    %rax,%rdi\n 1e4:\te8 00 00 00 00       \tcallq  1e9 <raw_co_writev+0x183>\n 1e9:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n 1ec:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 1f0:\t48 39 45 a0          \tcmp    %rax,-0x60(%rbp)\n 1f4:\t75 0c                \tjne    202 <raw_co_writev+0x19c>\n 1f6:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 1fa:\t48 89 c7             \tmov    %rax,%rdi\n 1fd:\te8 00 00 00 00       \tcallq  202 <raw_co_writev+0x19c>\n 202:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 206:\t48 89 c7             \tmov    %rax,%rdi\n 209:\te8 00 00 00 00       \tcallq  20e <raw_co_writev+0x1a8>\n 20e:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n 211:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 215:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 21c:\t00 00 \n 21e:\t74 05                \tje     225 <raw_co_writev+0x1bf>\n 220:\te8 00 00 00 00       \tcallq  225 <raw_co_writev+0x1bf>\n 225:\tc9                   \tleaveq \n 226:\tc3                   \tretq   ", "code_s": "__int64 __fastcall raw_co_writev(__int64 a1, __int64 a2, unsigned int a3,\n                                 char *a4) {\n  unsigned int <span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  char <span class=\"supfact\">v9</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  <span class=\"supfact\">v8</span> = Number L;\n  if (!*(_BYTE *)(a1 + Number) || a2)\n    goto LABEL_12;\n  if (!a3)\n    return Number L;\n  <span class=\"supfact\">v8</span> = qemu_try_blockalign(*(_QWORD *)(a1 + Number), Number L);\n  if (<span class=\"supfact\">v8</span>) {\n    if ((unsigned int)qemu_iovec_to_buf(a4, Number L, <span class=\"supfact\">v8</span>,\n                                        Number L) != Number) {\n      <span class=\"supfact\">v7</span> = Number;\n      goto LABEL_13;\n    }\n    if (bdrv_probe_all(<span class=\"supfact\">v8</span>, Number L, Number L) !=\n        *(_QWORD *)(a1 + Number)) {\n      <span class=\"supfact\">v7</span> = Number;\n      goto LABEL_13;\n    }\n    qemu_iovec_init(<span class=\"supfact\">v9</span>,\n                    (unsigned int)(*((_DWORD *)a4 + Number) + Number));\n    qemu_iovec_add(<span class=\"supfact\">v9</span>, <span class=\"supfact\">v8</span>, Number L);\n    qemu_iovec_concat(<span class=\"supfact\">v9</span>, a4, Number L,\n                      *((_QWORD *)a4 + Number) - Number L);\n    a4 = <span class=\"supfact\">v9</span>;\n  LABEL_12:\n    bdrv_debug_event(*(_QWORD *)(a1 + Number), Number L);\n    <span class=\"supfact\">v7</span> = bdrv_co_writev(*(_QWORD *)(a1 + Number), a2, a3, a4);\n    goto LABEL_13;\n  }\n  <span class=\"supfact\">v7</span> = Number;\nLABEL_13:\n  if (a4 == <span class=\"supfact\">v9</span>)\n    qemu_iovec_destroy(<span class=\"supfact\">v9</span>);\n  qemu_vfree(<span class=\"supfact\">v8</span>);\n  return <span class=\"supfact\">v7</span>;\n}", "code_t": "int __cdecl raw_co_writev(BlockDriverState_0 *bs, int64_t sector_num,\n                          int nb_sectors, QEMUIOVector_0 *qiov) {\n  int <span class=\"supfact\">ret</span>;\n  void *<span class=\"supfact\">buf</span>;\n  QEMUIOVector_0 <span class=\"supfact\">local_qiov</span>;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  <span class=\"supfact\">v10</span> = __readfsqword(Number);\n  <span class=\"supfact\">buf</span> = Number L;\n  if (!bs->probed || sector_num)\n    goto LABEL_12;\n  if (!nb_sectors)\n    return Number;\n  <span class=\"supfact\">buf</span> = (void *)qemu_try_blockalign(bs->file, Number L);\n  if (<span class=\"supfact\">buf</span>) {\n    if ((unsigned int)qemu_iovec_to_buf(qiov, Number L, <span class=\"supfact\">buf</span>,\n                                        Number L) != Number) {\n      <span class=\"supfact\">ret</span> = Number;\n      goto fail;\n    }\n    if ((BlockDriver_0 *)bdrv_probe_all(<span class=\"supfact\">buf</span>, Number L,\n                                        Number L) != bs->drv) {\n      <span class=\"supfact\">ret</span> = Number;\n      goto fail;\n    }\n    qemu_iovec_init(&<span class=\"supfact\">local_qiov</span>,\n                    (unsigned int)(qiov->niov + Number));\n    qemu_iovec_add(&<span class=\"supfact\">local_qiov</span>, <span class=\"supfact\">buf</span>, Number L);\n    qemu_iovec_concat(&<span class=\"supfact\">local_qiov</span>, qiov, Number L,\n                      qiov->size - Number);\n    qiov = &<span class=\"supfact\">local_qiov</span>;\n  LABEL_12:\n    bdrv_debug_event(bs->file, Number L);\n    <span class=\"supfact\">ret</span> =\n        bdrv_co_writev(bs->file, sector_num, (unsigned int)nb_sectors, qiov);\n    goto fail;\n  }\n  <span class=\"supfact\">ret</span> = Number;\nfail:\n  if (qiov == &<span class=\"supfact\">local_qiov</span>)\n    qemu_iovec_destroy(&<span class=\"supfact\">local_qiov</span>);\n  qemu_vfree(<span class=\"supfact\">buf</span>);\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v9", "type": "struct QEMUIOVector_0 { iovec * iov; int niov; int nalloc; size_t size; }", "ref_name": "local_qiov", "ref_type": "struct QEMUIOVector_0 { iovec * iov; int niov; int nalloc; size_t size; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/167d712463e0992729e10389549ca204bb5a890bb1dd0460101cee04a39115ca", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_f2.o", "objdump": "0000000000017c45 <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring>:\n   17c45:\t55                   \tpush   %rbp\n   17c46:\t48 89 e5             \tmov    %rsp,%rbp\n   17c49:\t53                   \tpush   %rbx\n   17c4a:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n   17c51:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n   17c55:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n   17c59:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n   17c60:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   17c64:\t48 89 c7             \tmov    %rax,%rdi\n   17c67:\te8 00 00 00 00       \tcallq  17c6c <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n   17c6c:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   17c73:\t00 \n   17c74:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   17c7b:\t00 \n   17c7c:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n   17c83:\t00 \n   17c84:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   17c8b:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n   17c92:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n   17c96:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   17c9a:\t48 89 ce             \tmov    %rcx,%rsi\n   17c9d:\t48 89 c7             \tmov    %rax,%rdi\n   17ca0:\te8 5d ed ff ff       \tcallq  16a02 <_ZL23construct_ioport_ninjakR8device_tR11tagged_listI17input_port_configER7astring>\n   17ca5:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n   17ca9:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n   17cad:\tba 00 00 00 00       \tmov    $0x0,%edx\n   17cb2:\t48 89 ce             \tmov    %rcx,%rsi\n   17cb5:\t48 89 c7             \tmov    %rax,%rdi\n   17cb8:\te8 00 00 00 00       \tcallq  17cbd <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x78>\n   17cbd:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n   17cc1:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n   17cc8:\t00 \n   17cc9:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   17cd0:\t00 \n   17cd1:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n   17cd8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   17cdc:\t41 b8 0a 00 00 00    \tmov    $0xa,%r8d\n   17ce2:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n   17ce7:\tba 30 00 00 00       \tmov    $0x30,%edx\n   17cec:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   17cf1:\t48 89 c7             \tmov    %rax,%rdi\n   17cf4:\te8 00 00 00 00       \tcallq  17cf9 <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0xb4>\n   17cf9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   17cfd:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   17d04:\t00 \n   17d05:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17d09:\tba 12 00 00 00       \tmov    $0x12,%edx\n   17d0e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   17d13:\t48 89 c7             \tmov    %rax,%rdi\n   17d16:\te8 00 00 00 00       \tcallq  17d1b <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0xd6>\n   17d1b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17d1f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17d23:\t8b 00                \tmov    (%rax),%eax\n   17d25:\t83 e0 10             \tand    $0x10,%eax\n   17d28:\t89 c1                \tmov    %eax,%ecx\n   17d2a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17d2e:\tba 15 00 00 00       \tmov    $0x15,%edx\n   17d33:\t89 ce                \tmov    %ecx,%esi\n   17d35:\t48 89 c7             \tmov    %rax,%rdi\n   17d38:\te8 00 00 00 00       \tcallq  17d3d <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0xf8>\n   17d3d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17d41:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17d45:\t8b 00                \tmov    (%rax),%eax\n   17d47:\t83 e0 30             \tand    $0x30,%eax\n   17d4a:\t89 c1                \tmov    %eax,%ecx\n   17d4c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17d50:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n   17d55:\t89 ce                \tmov    %ecx,%esi\n   17d57:\t48 89 c7             \tmov    %rax,%rdi\n   17d5a:\te8 00 00 00 00       \tcallq  17d5f <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x11a>\n   17d5f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17d63:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17d67:\t8b 00                \tmov    (%rax),%eax\n   17d69:\t83 e0 20             \tand    $0x20,%eax\n   17d6c:\t89 c1                \tmov    %eax,%ecx\n   17d6e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17d72:\tba 22 00 00 00       \tmov    $0x22,%edx\n   17d77:\t89 ce                \tmov    %ecx,%esi\n   17d79:\t48 89 c7             \tmov    %rax,%rdi\n   17d7c:\te8 00 00 00 00       \tcallq  17d81 <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x13c>\n   17d81:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17d85:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n   17d89:\t41 b8 0b 00 00 00    \tmov    $0xb,%r8d\n   17d8f:\tb9 c0 00 00 00       \tmov    $0xc0,%ecx\n   17d94:\tba c0 00 00 00       \tmov    $0xc0,%edx\n   17d99:\tbe 05 00 00 00       \tmov    $0x5,%esi\n   17d9e:\t48 89 c7             \tmov    %rax,%rdi\n   17da1:\te8 00 00 00 00       \tcallq  17da6 <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x161>\n   17da6:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n   17daa:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   17db1:\t00 \n   17db2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17db6:\tba 12 00 00 00       \tmov    $0x12,%edx\n   17dbb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   17dc0:\t48 89 c7             \tmov    %rax,%rdi\n   17dc3:\te8 00 00 00 00       \tcallq  17dc8 <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x183>\n   17dc8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17dcc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17dd0:\t8b 00                \tmov    (%rax),%eax\n   17dd2:\t83 e0 40             \tand    $0x40,%eax\n   17dd5:\t89 c1                \tmov    %eax,%ecx\n   17dd7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17ddb:\tba 15 00 00 00       \tmov    $0x15,%edx\n   17de0:\t89 ce                \tmov    %ecx,%esi\n   17de2:\t48 89 c7             \tmov    %rax,%rdi\n   17de5:\te8 00 00 00 00       \tcallq  17dea <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x1a5>\n   17dea:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17dee:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17df2:\t8b 00                \tmov    (%rax),%eax\n   17df4:\t25 c0 00 00 00       \tand    $0xc0,%eax\n   17df9:\t89 c1                \tmov    %eax,%ecx\n   17dfb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17dff:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n   17e04:\t89 ce                \tmov    %ecx,%esi\n   17e06:\t48 89 c7             \tmov    %rax,%rdi\n   17e09:\te8 00 00 00 00       \tcallq  17e0e <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x1c9>\n   17e0e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17e12:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17e16:\t8b 00                \tmov    (%rax),%eax\n   17e18:\t25 80 00 00 00       \tand    $0x80,%eax\n   17e1d:\t89 c1                \tmov    %eax,%ecx\n   17e1f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   17e23:\tba 22 00 00 00       \tmov    $0x22,%edx\n   17e28:\t89 ce                \tmov    %ecx,%esi\n   17e2a:\t48 89 c7             \tmov    %rax,%rdi\n   17e2d:\te8 00 00 00 00       \tcallq  17e32 <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x1ed>\n   17e32:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   17e36:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   17e3a:\t48 89 c7             \tmov    %rax,%rdi\n   17e3d:\te8 00 00 00 00       \tcallq  17e42 <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x1fd>\n   17e42:\teb 1a                \tjmp    17e5e <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n   17e44:\t48 89 c3             \tmov    %rax,%rbx\n   17e47:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n   17e4b:\t48 89 c7             \tmov    %rax,%rdi\n   17e4e:\te8 00 00 00 00       \tcallq  17e53 <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x20e>\n   17e53:\t48 89 d8             \tmov    %rbx,%rax\n   17e56:\t48 89 c7             \tmov    %rax,%rdi\n   17e59:\te8 00 00 00 00       \tcallq  17e5e <_ZL24construct_ioport_ninjakjR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n   17e5e:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n   17e65:\t5b                   \tpop    %rbx\n   17e66:\t5d                   \tpop    %rbp\n   17e67:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_ninjakj(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  int <span class=\"supfact\">v5</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  _DWORD *<span class=\"supfact\">v7</span>;\n  __int64 <span class=\"supfact\">v8</span>;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v6</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  construct_ioport_ninjak(a1, a2, a3);\n  <span class=\"supfact\">v6</span> = ioconfig_modify_port(a2, a1, String);\n  <span class=\"supfact\">v7</span> = Number L;\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v5</span> = Number;\n  <span class=\"supfact\">v7</span> = (_DWORD *)ioconfig_alloc_field(\n      <span class=\"supfact\">v6</span>, Number L, Number L, Number L, Number L);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v8</span> =\n      ioconfig_alloc_setting(<span class=\"supfact\">v7</span>, Number L, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v7</span> = (_DWORD *)ioconfig_alloc_field(\n      <span class=\"supfact\">v6</span>, Number L, Number L, Number L, Number L);\n  <span class=\"supfact\">v8</span> = Number L;\n  <span class=\"supfact\">v8</span> =\n      ioconfig_alloc_setting(<span class=\"supfact\">v7</span>, Number L, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  <span class=\"supfact\">v8</span> = ioconfig_alloc_setting(\n      <span class=\"supfact\">v7</span>, *<span class=\"supfact\">v7</span> & Number, Number L);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl construct_ioport_ninjakj(device_t *owner, ioport_list *portlist,\n                                      astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value <span class=\"supfact\">maskbits</span>;\n  input_port_config *<span class=\"supfact\">curport</span>;\n  input_field_config *<span class=\"supfact\">curfield</span>;\n  input_setting_config *<span class=\"supfact\">cursetting</span>;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">curfield</span> = Number L;\n  <span class=\"supfact\">curport</span> = Number L;\n  <span class=\"supfact\">maskbits</span> = Number;\n  construct_ioport_ninjak(owner, portlist, errorbuf);\n  <span class=\"supfact\">curport</span> =\n      (input_port_config *)ioconfig_modify_port(portlist, owner, String);\n  <span class=\"supfact\">curfield</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">maskbits</span> = Number;\n  <span class=\"supfact\">curfield</span> = (input_field_config *)ioconfig_alloc_field(\n      <span class=\"supfact\">curport</span>, Number, Number, Number,\n      (const char *)&loc_8 + Number);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, Number, (const char *)&loc_10 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_14 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_1A + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_21 + Number);\n  <span class=\"supfact\">curfield</span> = (input_field_config *)ioconfig_alloc_field(\n      <span class=\"supfact\">curport</span>, Number, Number, Number,\n      (const char *)&loc_8 + Number);\n  <span class=\"supfact\">cursetting</span> = Number L;\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, Number, (const char *)&loc_10 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_14 + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_1A + Number);\n  <span class=\"supfact\">cursetting</span> = (input_setting_config *)ioconfig_alloc_setting(\n      <span class=\"supfact\">curfield</span>, <span class=\"supfact\">curfield</span>->mask & Number,\n      (const char *)&loc_21 + Number);\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "wjfsanhe", "repo_name": "newPlayer", "path": "wjfsanhe/newPlayer/f1bebd3436a29b758b7ee68675765e28ecb28fac0286a62c92ce573ac1311f6f", "path_in_repo": "wjfsanhe/newPlayer/amadec/src/adecproc.o", "objdump": "0000000000000766 <adecd_process>:\n 766:\t55                   \tpush   %rbp\n 767:\t48 89 e5             \tmov    %rsp,%rbp\n 76a:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n 771:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n 778:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n 77f:\t8b 40 08             \tmov    0x8(%rax),%eax\n 782:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 785:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 78a:\tbf 06 00 00 00       \tmov    $0x6,%edi\n 78f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 794:\te8 00 00 00 00       \tcallq  799 <adecd_process+0x33>\n 799:\te8 00 00 00 00       \tcallq  79e <adecd_process+0x38>\n 79e:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 7a1:\tbe 05 00 00 00       \tmov    $0x5,%esi\n 7a6:\t89 c7                \tmov    %eax,%edi\n 7a8:\te8 00 00 00 00       \tcallq  7ad <adecd_process+0x47>\n 7ad:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n 7b1:\t48 8d 4d 80          \tlea    -0x80(%rbp),%rcx\n 7b5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 7b8:\t48 89 ce             \tmov    %rcx,%rsi\n 7bb:\t89 c7                \tmov    %eax,%edi\n 7bd:\te8 00 00 00 00       \tcallq  7c2 <adecd_process+0x5c>\n 7c2:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 7c5:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 7c8:\t89 c7                \tmov    %eax,%edi\n 7ca:\te8 2d fe ff ff       \tcallq  5fc <cmd_server>\n 7cf:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 7d2:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 7d5:\t89 c7                \tmov    %eax,%edi\n 7d7:\te8 00 00 00 00       \tcallq  7dc <adecd_process+0x76>\n 7dc:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 7e0:\t74 cb                \tje     7ad <adecd_process+0x47>\n 7e2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 7e7:\tbf 06 00 00 00       \tmov    $0x6,%edi\n 7ec:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 7f1:\te8 00 00 00 00       \tcallq  7f6 <adecd_process+0x90>\n 7f6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 7fb:\tc9                   \tleaveq \n 7fc:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall adecd_process(__int64 a1) {\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  socklen_t <span class=\"supfact\">addr_len</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">v5</span>;\n  int <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">fd</span> = *(_DWORD *)(a1 + Number);\n  log_print(Number L, String);\n  adec_init();\n  listen(<span class=\"supfact\">fd</span>, Number);\n  do {\n    <span class=\"supfact\">v5</span> = accept(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">addr</span>,\n                                &<span class=\"supfact\">addr_len</span>);\n    <span class=\"supfact\">v4</span> = cmd_server(<span class=\"supfact\">v5</span>);\n    close(<span class=\"supfact\">v5</span>);\n  } while (!<span class=\"supfact\">v4</span>);\n  log_print(Number L, String);\n  return Number L;\n}", "code_t": "int __cdecl adecd_process(amadec_opt *opt) {\n  sockaddr_un <span class=\"supfact\">client_name</span>;\n  socklen_t <span class=\"supfact\">client_name_len</span>;\n  int <span class=\"supfact\">quit</span>;\n  int <span class=\"supfact\">client_socket_fd</span>;\n  int <span class=\"supfact\">socket_fd</span>;\n  <span class=\"supfact\">socket_fd</span> = opt-><span class=\"supfact\">socket_fd</span>;\n  log_print(Number L, String);\n  adec_init();\n  listen(<span class=\"supfact\">socket_fd</span>, Number);\n  do {\n    <span class=\"supfact\">client_socket_fd</span> =\n        accept(<span class=\"supfact\">socket_fd</span>,\n               (struct sockaddr *)&<span class=\"supfact\">client_name</span>,\n               &<span class=\"supfact\">client_name_len</span>);\n    <span class=\"supfact\">quit</span> = cmd_server(<span class=\"supfact\">client_socket_fd</span>);\n    close(<span class=\"supfact\">client_socket_fd</span>);\n  } while (!<span class=\"supfact\">quit</span>);\n  log_print(Number L, String);\n  return Number;\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "client_name", "ref_type": "struct sockaddr_un { sa_family_t sun_family; char[108] sun_path; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/167d712463e0992729e10389549ca204bb5a890bb1dd0460101cee04a39115ca", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_f2.o", "objdump": "00000000000250b6 <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t>:\n   250b6:\t55                   \tpush   %rbp\n   250b7:\t48 89 e5             \tmov    %rsp,%rbp\n   250ba:\t53                   \tpush   %rbx\n   250bb:\t48 83 ec 68          \tsub    $0x68,%rsp\n   250bf:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   250c3:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n   250c7:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n   250ce:\t00 \n   250cf:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   250d3:\t48 89 c7             \tmov    %rax,%rdi\n   250d6:\te8 00 00 00 00       \tcallq  250db <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0x25>\n   250db:\t48 8b 55 90          \tmov    -0x70(%rbp),%rdx\n   250df:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   250e3:\t48 89 d6             \tmov    %rdx,%rsi\n   250e6:\t48 89 c7             \tmov    %rax,%rdi\n   250e9:\te8 4f eb ff ff       \tcallq  23c3d <_ZL33construct_machine_config_taito_f2R14machine_configP8device_t>\n   250ee:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n   250f2:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n   250f6:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   250fa:\tba 00 00 00 00       \tmov    $0x0,%edx\n   250ff:\t48 89 ce             \tmov    %rcx,%rsi\n   25102:\t48 89 c7             \tmov    %rax,%rdi\n   25105:\te8 00 00 00 00       \tcallq  2510a <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0x54>\n   2510a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   2510e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   25112:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25117:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   2511c:\t48 89 c7             \tmov    %rax,%rdi\n   2511f:\te8 00 00 00 00       \tcallq  25124 <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0x6e>\n   25124:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n   25128:\tba 00 00 00 00       \tmov    $0x0,%edx\n   2512d:\tbe 04 00 00 00       \tmov    $0x4,%esi\n   25132:\t48 89 c7             \tmov    %rax,%rdi\n   25135:\te8 00 00 00 00       \tcallq  2513a <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0x84>\n   2513a:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 25141 <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0x8b>\n   25141:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n   25145:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   25149:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   2514f:\t48 89 d1             \tmov    %rdx,%rcx\n   25152:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25157:\t48 89 c7             \tmov    %rax,%rdi\n   2515a:\te8 00 00 00 00       \tcallq  2515f <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0xa9>\n   2515f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   25163:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   25167:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   2516c:\t48 89 c7             \tmov    %rax,%rdi\n   2516f:\te8 00 00 00 00       \tcallq  25174 <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0xbe>\n   25174:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2517b <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0xc5>\n   2517b:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n   2517f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n   25183:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   25189:\t48 89 d1             \tmov    %rdx,%rcx\n   2518c:\tba 00 00 00 00       \tmov    $0x0,%edx\n   25191:\t48 89 c7             \tmov    %rax,%rdi\n   25194:\te8 00 00 00 00       \tcallq  25199 <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0xe3>\n   25199:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n   2519d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   251a1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n   251a6:\t48 89 c7             \tmov    %rax,%rdi\n   251a9:\te8 00 00 00 00       \tcallq  251ae <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0xf8>\n   251ae:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n   251b2:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   251b6:\t48 89 c7             \tmov    %rax,%rdi\n   251b9:\te8 00 00 00 00       \tcallq  251be <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0x108>\n   251be:\t48 89 d8             \tmov    %rbx,%rax\n   251c1:\teb 1a                \tjmp    251dd <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0x127>\n   251c3:\t48 89 c3             \tmov    %rax,%rbx\n   251c6:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n   251ca:\t48 89 c7             \tmov    %rax,%rdi\n   251cd:\te8 00 00 00 00       \tcallq  251d2 <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0x11c>\n   251d2:\t48 89 d8             \tmov    %rbx,%rax\n   251d5:\t48 89 c7             \tmov    %rax,%rdi\n   251d8:\te8 00 00 00 00       \tcallq  251dd <_ZL33construct_machine_config_mjnquestR14machine_configP8device_t+0x127>\n   251dd:\t48 83 c4 68          \tadd    $0x68,%rsp\n   251e1:\t5b                   \tpop    %rbx\n   251e2:\t5d                   \tpop    %rbp\n   251e3:\tc3                   \tretq   ", "code_s": "device_t *__fastcall construct_machine_config_mjnquest(machine_config *a1,\n                                                       device_t *a2) {\n  const void *v2;\n  const void *v3;\n  device_t *<span class=\"supfact\">v5</span>;\n  char <span class=\"supfact\">v6</span>[Number];\n  device_t *<span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v7</span> = Number L;\n  astring astring((astring *)<span class=\"supfact\">v6</span>);\n  <span class=\"supfact\">v5</span> = construct_machine_config_taito_f2(a1, a2);\n  <span class=\"supfact\">v7</span> =\n      (device_t *)machine_config device_find(a1, <span class=\"supfact\">v5</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">v7</span>, Number L, construct_address_map_mjnquest_map);\n  driver_device static_set_callback(<span class=\"supfact\">v5</span>, Number L,\n                                    &video_start_taitof2_mjnquest);\n  <span class=\"supfact\">v7</span> = (device_t *)machine_config device_add(\n      a1, <span class=\"supfact\">v5</span>, String, TC0100SCN, Number);\n  device_t static_set_static_config(<span class=\"supfact\">v7</span>,\n                                    (device_t *)&taitof2_tc0100scn_intf, v2);\n  <span class=\"supfact\">v7</span> = (device_t *)machine_config device_add(\n      a1, <span class=\"supfact\">v5</span>, String, TC0110PCR, Number);\n  device_t static_set_static_config(<span class=\"supfact\">v7</span>,\n                                    (device_t *)&taitof2_tc0110pcr_intf, v3);\n  astring ~astring((astring *)<span class=\"supfact\">v6</span>);\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "device_t *__cdecl construct_machine_config_mjnquest(machine_config *config,\n                                                    device_t *owner) {\n  void(__fastcall * v2)(address_map *, const device_t *);\n  void(__fastcall * v3)(running_machine *);\n  device_t *<span class=\"supfact\">ownera</span>;\n  astring <span class=\"supfact\">tempstring</span>;\n  device_t *<span class=\"supfact\">device</span>;\n  <span class=\"supfact\">device</span> = Number L;\n  astring astring(&<span class=\"supfact\">tempstring</span>);\n  <span class=\"supfact\">ownera</span> = construct_machine_config_taito_f2(config, owner);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_find(\n      config, <span class=\"supfact\">ownera</span>, String);\n  device_memory_interface static_set_addrmap(\n      <span class=\"supfact\">device</span>, Number L,\n      (address_spacenum)construct_address_map_mjnquest_map, v2);\n  driver_device static_set_callback(\n      <span class=\"supfact\">ownera</span>, (device_t *)&loc_4,\n      (driver_device callback_type)&video_start_taitof2_mjnquest, v3);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_add(\n      config, <span class=\"supfact\">ownera</span>, String, TC0100SCN, Number);\n  device_t static_set_static_config(<span class=\"supfact\">device</span>,\n                                    &taitof2_tc0100scn_intf);\n  <span class=\"supfact\">device</span> = (device_t *)machine_config device_add(\n      config, <span class=\"supfact\">ownera</span>, String, TC0110PCR, Number);\n  device_t static_set_static_config(<span class=\"supfact\">device</span>,\n                                    &taitof2_tc0110pcr_intf);\n  astring ~astring(&<span class=\"supfact\">tempstring</span>);\n  return <span class=\"supfact\">ownera</span>;\n}", "var": [{"name": "v6", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "tempstring", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "a110605", "repo_name": "optimized_qemu", "path": "a110605/optimized_qemu/8f96972ace4ca96b91ac886c6caff4b57bd0271777efd1bcee047994438e5b31", "path_in_repo": "a110605/optimized_qemu//qemu-io", "objdump": "00000000004187d1 <aio_thread>:\n  4187d1:\t55                   \tpush   %rbp\n  4187d2:\t48 89 e5             \tmov    %rsp,%rbp\n  4187d5:\t48 83 ec 60          \tsub    $0x60,%rsp\n  4187d9:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  4187dd:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  4187e4:\t00 00 \n  4187e6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4187ea:\t31 c0                \txor    %eax,%eax\n  4187ec:\te8 cf aa fe ff       \tcallq  4032c0 <getpid@plt>\n  4187f1:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n  4187f4:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n  4187fb:\t00 \n  4187fc:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  418800:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  418805:\t48 89 c7             \tmov    %rax,%rdi\n  418808:\te8 a3 a9 fe ff       \tcallq  4031b0 <gettimeofday@plt>\n  41880d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  418811:\t48 83 c0 0a          \tadd    $0xa,%rax\n  418815:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  418819:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  418820:\t00 \n  418821:\tbf a0 29 46 00       \tmov    $0x4629a0,%edi\n  418826:\te8 f3 f7 ff ff       \tcallq  41801e <mutex_lock>\n  41882b:\teb 1c                \tjmp    418849 <aio_thread+0x78>\n  41882d:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  418831:\t48 89 c2             \tmov    %rax,%rdx\n  418834:\tbe a0 29 46 00       \tmov    $0x4629a0,%esi\n  418839:\tbf e0 29 46 00       \tmov    $0x4629e0,%edi\n  41883e:\te8 87 f8 ff ff       \tcallq  4180ca <cond_timedwait>\n  418843:\t48 98                \tcltq   \n  418845:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  418849:\t48 8b 05 10 a2 04 00 \tmov    0x4a210(%rip),%rax        # 462a60 <request_list>\n  418850:\t48 85 c0             \ttest   %rax,%rax\n  418853:\t75 07                \tjne    41885c <aio_thread+0x8b>\n  418855:\t48 83 7d c0 6e       \tcmpq   $0x6e,-0x40(%rbp)\n  41885a:\t75 d1                \tjne    41882d <aio_thread+0x5c>\n  41885c:\t48 8b 05 fd a1 04 00 \tmov    0x4a1fd(%rip),%rax        # 462a60 <request_list>\n  418863:\t48 85 c0             \ttest   %rax,%rax\n  418866:\t75 45                \tjne    4188ad <aio_thread+0xdc>\n  418868:\t8b 05 ee a1 04 00    \tmov    0x4a1ee(%rip),%eax        # 462a5c <idle_threads>\n  41886e:\t83 e8 01             \tsub    $0x1,%eax\n  418871:\t89 05 e5 a1 04 00    \tmov    %eax,0x4a1e5(%rip)        # 462a5c <idle_threads>\n  418877:\t8b 05 db a1 04 00    \tmov    0x4a1db(%rip),%eax        # 462a58 <cur_threads>\n  41887d:\t83 e8 01             \tsub    $0x1,%eax\n  418880:\t89 05 d2 a1 04 00    \tmov    %eax,0x4a1d2(%rip)        # 462a58 <cur_threads>\n  418886:\tbf a0 29 46 00       \tmov    $0x4629a0,%edi\n  41888b:\te8 e4 f7 ff ff       \tcallq  418074 <mutex_unlock>\n  418890:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  418895:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  418899:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n  4188a0:\t00 00 \n  4188a2:\t0f 84 5c 01 00 00    \tje     418a04 <aio_thread+0x233>\n  4188a8:\te9 52 01 00 00       \tjmpq   4189ff <aio_thread+0x22e>\n  4188ad:\t48 8b 05 ac a1 04 00 \tmov    0x4a1ac(%rip),%rax        # 462a60 <request_list>\n  4188b4:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  4188b8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4188bc:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  4188c0:\t48 85 c0             \ttest   %rax,%rax\n  4188c3:\t74 16                \tje     4188db <aio_thread+0x10a>\n  4188c5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4188c9:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  4188cd:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4188d1:\t48 8b 52 60          \tmov    0x60(%rdx),%rdx\n  4188d5:\t48 89 50 60          \tmov    %rdx,0x60(%rax)\n  4188d9:\teb 0f                \tjmp    4188ea <aio_thread+0x119>\n  4188db:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4188df:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n  4188e3:\t48 89 05 7e a1 04 00 \tmov    %rax,0x4a17e(%rip)        # 462a68 <request_list+0x8>\n  4188ea:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4188ee:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n  4188f2:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4188f6:\t48 8b 52 58          \tmov    0x58(%rdx),%rdx\n  4188fa:\t48 89 10             \tmov    %rdx,(%rax)\n  4188fd:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  418901:\tc7 40 78 01 00 00 00 \tmovl   $0x1,0x78(%rax)\n  418908:\t8b 05 4e a1 04 00    \tmov    0x4a14e(%rip),%eax        # 462a5c <idle_threads>\n  41890e:\t83 e8 01             \tsub    $0x1,%eax\n  418911:\t89 05 45 a1 04 00    \tmov    %eax,0x4a145(%rip)        # 462a5c <idle_threads>\n  418917:\tbf a0 29 46 00       \tmov    $0x4629a0,%edi\n  41891c:\te8 53 f7 ff ff       \tcallq  418074 <mutex_unlock>\n  418921:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  418925:\t8b 40 68             \tmov    0x68(%rax),%eax\n  418928:\t83 e0 0f             \tand    $0xf,%eax\n  41892b:\t83 f8 08             \tcmp    $0x8,%eax\n  41892e:\t74 29                \tje     418959 <aio_thread+0x188>\n  418930:\t83 f8 08             \tcmp    $0x8,%eax\n  418933:\t7f 48                \tjg     41897d <aio_thread+0x1ac>\n  418935:\t83 f8 02             \tcmp    $0x2,%eax\n  418938:\t7f 06                \tjg     418940 <aio_thread+0x16f>\n  41893a:\t85 c0                \ttest   %eax,%eax\n  41893c:\t7f 09                \tjg     418947 <aio_thread+0x176>\n  41893e:\teb 3d                \tjmp    41897d <aio_thread+0x1ac>\n  418940:\t83 f8 04             \tcmp    $0x4,%eax\n  418943:\t74 26                \tje     41896b <aio_thread+0x19a>\n  418945:\teb 36                \tjmp    41897d <aio_thread+0x1ac>\n  418947:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41894b:\t48 89 c7             \tmov    %rax,%rdi\n  41894e:\te8 21 fc ff ff       \tcallq  418574 <handle_aiocb_rw>\n  418953:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  418957:\teb 4d                \tjmp    4189a6 <aio_thread+0x1d5>\n  418959:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41895d:\t48 89 c7             \tmov    %rax,%rdi\n  418960:\te8 0f f9 ff ff       \tcallq  418274 <handle_aiocb_flush>\n  418965:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  418969:\teb 3b                \tjmp    4189a6 <aio_thread+0x1d5>\n  41896b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41896f:\t48 89 c7             \tmov    %rax,%rdi\n  418972:\te8 88 f8 ff ff       \tcallq  4181ff <handle_aiocb_ioctl>\n  418977:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  41897b:\teb 29                \tjmp    4189a6 <aio_thread+0x1d5>\n  41897d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  418981:\t8b 50 68             \tmov    0x68(%rax),%edx\n  418984:\t48 8b 05 75 8e 04 00 \tmov    0x48e75(%rip),%rax        # 461800 <stderr@@GLIBC_2.2.5>\n  41898b:\tbe 49 b5 44 00       \tmov    $0x44b549,%esi\n  418990:\t48 89 c7             \tmov    %rax,%rdi\n  418993:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  418998:\te8 a3 ae fe ff       \tcallq  403840 <fprintf@plt>\n  41899d:\t48 c7 45 c0 ea ff ff \tmovq   $0xffffffffffffffea,-0x40(%rbp)\n  4189a4:\tff \n  4189a5:\t90                   \tnop\n  4189a6:\tbf a0 29 46 00       \tmov    $0x4629a0,%edi\n  4189ab:\te8 6e f6 ff ff       \tcallq  41801e <mutex_lock>\n  4189b0:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4189b4:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  4189b8:\t48 89 50 70          \tmov    %rdx,0x70(%rax)\n  4189bc:\t8b 05 9a a0 04 00    \tmov    0x4a09a(%rip),%eax        # 462a5c <idle_threads>\n  4189c2:\t83 c0 01             \tadd    $0x1,%eax\n  4189c5:\t89 05 91 a0 04 00    \tmov    %eax,0x4a091(%rip)        # 462a5c <idle_threads>\n  4189cb:\tbf a0 29 46 00       \tmov    $0x4629a0,%edi\n  4189d0:\te8 9f f6 ff ff       \tcallq  418074 <mutex_unlock>\n  4189d5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  4189d9:\t8b 50 48             \tmov    0x48(%rax),%edx\n  4189dc:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n  4189df:\t89 d6                \tmov    %edx,%esi\n  4189e1:\t89 c7                \tmov    %eax,%edi\n  4189e3:\te8 b8 aa fe ff       \tcallq  4034a0 <kill@plt>\n  4189e8:\t85 c0                \ttest   %eax,%eax\n  4189ea:\t0f 84 04 fe ff ff    \tje     4187f4 <aio_thread+0x23>\n  4189f0:\tbf 65 b5 44 00       \tmov    $0x44b565,%edi\n  4189f5:\te8 dd f5 ff ff       \tcallq  417fd7 <die>\n  4189fa:\te9 f5 fd ff ff       \tjmpq   4187f4 <aio_thread+0x23>\n  4189ff:\te8 6c ac fe ff       \tcallq  403670 <__stack_chk_fail@plt>\n  418a04:\tc9                   \tleaveq \n  418a05:\tc3                   \tretq   ", "code_s": "__int64 aio_thread() {\n  int v1;\n  __pid_t <span class=\"supfact\">pid</span>;\n  __int64 v3;\n  unsigned __int64 v4;\n  __int64 <span class=\"supfact\">v5</span>;\n  struct timeval <span class=\"supfact\">tv</span>;\n  struct timespec <span class=\"supfact\">v7</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  <span class=\"supfact\">pid</span> = getpid();\n  while (Number) {\n    v3 = Number L;\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    <span class=\"supfact\">v7</span>.tv_sec = <span class=\"supfact\">tv</span>.tv_sec + Number;\n    <span class=\"supfact\">v7</span>.tv_nsec = Number L;\n    mutex_lock(&lock);\n    while (!request_list && v3 != Number)\n      v3 = (int)cond_timedwait(&cond, &lock, &<span class=\"supfact\">v7</span>);\n    if (!request_list)\n      break;\n    <span class=\"supfact\">v5</span> = request_list;\n    if (*(_QWORD *)(request_list + Number))\n      *(_QWORD *)(*(_QWORD *)(request_list + Number) + Number L) =\n          *(_QWORD *)(request_list + Number);\n    else\n      qword_462A68 = *(_QWORD *)(request_list + Number);\n    **(_QWORD **)(<span class=\"supfact\">v5</span> + Number) =\n        *(_QWORD *)(<span class=\"supfact\">v5</span> + Number);\n    *(_DWORD *)(<span class=\"supfact\">v5</span> + Number) = Number;\n    --idle_threads;\n    mutex_unlock(&lock);\n    v1 = *(_DWORD *)(<span class=\"supfact\">v5</span> + Number) & Number;\n    if (v1 == Number) {\n      v4 = handle_aiocb_flush(<span class=\"supfact\">v5</span>);\n    } else {\n      if ((*(_DWORD *)(<span class=\"supfact\">v5</span> + Number) & Number) > Number)\n        goto LABEL_21;\n      if ((*(_DWORD *)(<span class=\"supfact\">v5</span> + Number) & Number) > Number) {\n        if (v1 != Number) {\n        LABEL_21:\n          fprintf(stderr, String,\n                  *(unsigned int *)(<span class=\"supfact\">v5</span> + Number));\n          v4 = Number;\n          goto LABEL_22;\n        }\n        v4 = handle_aiocb_ioctl(<span class=\"supfact\">v5</span>);\n      } else {\n        if ((*(_DWORD *)(<span class=\"supfact\">v5</span> + Number) & Number) == Number)\n          goto LABEL_21;\n        v4 = handle_aiocb_rw(<span class=\"supfact\">v5</span>);\n      }\n    }\n  LABEL_22:\n    mutex_lock(&lock);\n    *(_QWORD *)(<span class=\"supfact\">v5</span> + Number) = v4;\n    ++idle_threads;\n    mutex_unlock(&lock);\n    if (kill(<span class=\"supfact\">pid</span>, *(_DWORD *)(<span class=\"supfact\">v5</span> + Number)))\n      die(String);\n  }\n  --idle_threads;\n  --cur_threads;\n  mutex_unlock(&lock);\n  return Number L;\n}", "code_t": "void *__cdecl aio_thread(void *unused) {\n  int v2;\n  pid_t <span class=\"supfact\">pid</span>;\n  ssize_t ret;\n  ssize_t reta;\n  qemu_paiocb *<span class=\"supfact\">aiocb</span>;\n  qemu_timeval <span class=\"supfact\">tv</span>;\n  timespec <span class=\"supfact\">ts</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  <span class=\"supfact\">pid</span> = getpid();\n  while (Number) {\n    ret = Number L;\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    <span class=\"supfact\">ts</span>.tv_sec = <span class=\"supfact\">tv</span>.tv_sec + Number;\n    <span class=\"supfact\">ts</span>.tv_nsec = Number L;\n    mutex_lock(&lock);\n    while (!request_list.tqh_first && ret != Number)\n      ret = cond_timedwait(&cond, &lock, &<span class=\"supfact\">ts</span>);\n    if (!request_list.tqh_first)\n      break;\n    <span class=\"supfact\">aiocb</span> = request_list.tqh_first;\n    if (request_list.tqh_first->node.tqe_next)\n      request_list.tqh_first->node.tqe_next->node.tqe_prev =\n          request_list.tqh_first->node.tqe_prev;\n    else\n      request_list.tqh_last = request_list.tqh_first->node.tqe_prev;\n    *<span class=\"supfact\">aiocb</span>->node.tqe_prev =\n        <span class=\"supfact\">aiocb</span>->node.tqe_next;\n    <span class=\"supfact\">aiocb</span>->active = Number;\n    --idle_threads;\n    mutex_unlock(&lock);\n    v2 = <span class=\"supfact\">aiocb</span>->aio_type & Number;\n    if (v2 == Number) {\n      reta = handle_aiocb_flush(<span class=\"supfact\">aiocb</span>);\n    } else {\n      if ((<span class=\"supfact\">aiocb</span>->aio_type & Number) > Number)\n        goto LABEL_21;\n      if ((<span class=\"supfact\">aiocb</span>->aio_type & Number) > Number) {\n        if (v2 != Number) {\n        LABEL_21:\n          fprintf(stderr, String,\n                  (unsigned int)<span class=\"supfact\">aiocb</span>->aio_type);\n          reta = Number;\n          goto LABEL_22;\n        }\n        reta = handle_aiocb_ioctl(<span class=\"supfact\">aiocb</span>);\n      } else {\n        if ((<span class=\"supfact\">aiocb</span>->aio_type & Number) == Number)\n          goto LABEL_21;\n        reta = handle_aiocb_rw(<span class=\"supfact\">aiocb</span>);\n      }\n    }\n  LABEL_22:\n    mutex_lock(&lock);\n    <span class=\"supfact\">aiocb</span>->ret = reta;\n    ++idle_threads;\n    mutex_unlock(&lock);\n    if (kill(<span class=\"supfact\">pid</span>, <span class=\"supfact\">aiocb</span>->ev_signo))\n      die(String);\n  }\n  --idle_threads;\n  --cur_threads;\n  mutex_unlock(&lock);\n  return Number L;\n}", "var": [{"name": "v7", "type": "struct iovec { void * iov_base; size_t iov_len; }", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}, {"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct qemu_timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "jdupuy", "repo_name": "ssgi", "path": "jdupuy/ssgi/21f372ceceff229ae255f68da7ec13774c651de99e519d8af1bc418ae5f63cf5", "path_in_repo": "jdupuy/ssgi/build/gmake.unix/obj/debug/freeglut_window.o", "objdump": "0000000000000995 <fghResizeFullscrToggle>:\n     995:\t55                   \tpush   %rbp\n     996:\t48 89 e5             \tmov    %rsp,%rbp\n     999:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n     9a0:\tbf ff 01 00 00       \tmov    $0x1ff,%edi\n     9a5:\te8 00 00 00 00       \tcallq  9aa <fghResizeFullscrToggle+0x15>\n     9aa:\t85 c0                \ttest   %eax,%eax\n     9ac:\t74 3a                \tje     9e8 <fghResizeFullscrToggle+0x53>\n     9ae:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9b5 <fghResizeFullscrToggle+0x20>\n     9b5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     9b9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9c0 <fghResizeFullscrToggle+0x2b>\n     9c0:\tc6 40 6a 01          \tmovb   $0x1,0x6a(%rax)\n     9c4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9cb <fghResizeFullscrToggle+0x36>\n     9cb:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     9cf:\t8b 52 40             \tmov    0x40(%rdx),%edx\n     9d2:\t89 50 38             \tmov    %edx,0x38(%rax)\n     9d5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9dc <fghResizeFullscrToggle+0x47>\n     9dc:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     9e0:\t8b 52 44             \tmov    0x44(%rdx),%edx\n     9e3:\t89 50 3c             \tmov    %edx,0x3c(%rax)\n     9e6:\teb 69                \tjmp    a51 <fghResizeFullscrToggle+0xbc>\n     9e8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9ef <fghResizeFullscrToggle+0x5a>\n     9ef:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n     9f3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 9fa <fghResizeFullscrToggle+0x65>\n     9fa:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n     a01:\t48 89 ce             \tmov    %rcx,%rsi\n     a04:\t48 89 c7             \tmov    %rax,%rdi\n     a07:\te8 00 00 00 00       \tcallq  a0c <fghResizeFullscrToggle+0x77>\n     a0c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a12 <fghResizeFullscrToggle+0x7d>\n     a12:\t41 89 c0             \tmov    %eax,%r8d\n     a15:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # a1b <fghResizeFullscrToggle+0x86>\n     a1b:\t89 c7                \tmov    %eax,%edi\n     a1d:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n     a23:\tf7 d8                \tneg    %eax\n     a25:\t89 c1                \tmov    %eax,%ecx\n     a27:\t8b 85 70 ff ff ff    \tmov    -0x90(%rbp),%eax\n     a2d:\tf7 d8                \tneg    %eax\n     a2f:\t89 c2                \tmov    %eax,%edx\n     a31:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a38 <fghResizeFullscrToggle+0xa3>\n     a38:\t48 8b 70 18          \tmov    0x18(%rax),%rsi\n     a3c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a43 <fghResizeFullscrToggle+0xae>\n     a43:\t45 89 c1             \tmov    %r8d,%r9d\n     a46:\t41 89 f8             \tmov    %edi,%r8d\n     a49:\t48 89 c7             \tmov    %rax,%rdi\n     a4c:\te8 00 00 00 00       \tcallq  a51 <fghResizeFullscrToggle+0xbc>\n     a51:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     a56:\tc9                   \tleaveq \n     a57:\tc3                   \tretq   ", "code_s": "__int64 fghResizeFullscrToggle() {\n  XWindowAttributes <span class=\"supfact\">v1</span>;\n  __int64 <span class=\"supfact\">v2</span>;\n  if ((unsigned int)((__int64(__fastcall *)(__int64))glutGet)(Number L)) {\n    <span class=\"supfact\">v2</span> = fgStructure[Number];\n    *(_BYTE *)(fgStructure[Number] + Number L) = Number;\n    *(_DWORD *)(fgStructure[Number] + Number L) =\n        *(_DWORD *)(<span class=\"supfact\">v2</span> + Number);\n    *(_DWORD *)(fgStructure[Number] + Number L) =\n        *(_DWORD *)(<span class=\"supfact\">v2</span> + Number);\n  } else {\n    XGetWindowAttributes((Display *)fgDisplay,\n                         *(_QWORD *)(fgStructure[Number] + Number L),\n                         &<span class=\"supfact\">v1</span>);\n    XMoveResizeWindow(\n        (Display *)fgDisplay, *(_QWORD *)(fgStructure[Number] + Number L),\n        -<span class=\"supfact\">v1</span>.x, -<span class=\"supfact\">v1</span>.y,\n        *((_DWORD *)&fgDisplay + Number), *((_DWORD *)&fgDisplay + Number));\n  }\n  return Number L;\n}", "code_t": "int __cdecl fghResizeFullscrToggle() {\n  XWindowAttributes <span class=\"supfact\">attributes</span>;\n  SFG_Window *<span class=\"supfact\">win</span>;\n  if ((unsigned int)((__int64(__fastcall *)(__int64))glutGet)(Number L)) {\n    <span class=\"supfact\">win</span> = (SFG_Window *)fgStructure[Number];\n    *(_BYTE *)(fgStructure[Number] + Number L) = Number;\n    *(_DWORD *)(fgStructure[Number] + Number L) =\n        <span class=\"supfact\">win</span>->State.OldWidth;\n    *(_DWORD *)(fgStructure[Number] + Number L) =\n        <span class=\"supfact\">win</span>->State.OldHeight;\n  } else {\n    XGetWindowAttributes((Display *)fgDisplay,\n                         *(_QWORD *)(fgStructure[Number] + Number L),\n                         &<span class=\"supfact\">attributes</span>);\n    XMoveResizeWindow(\n        (Display *)fgDisplay, *(_QWORD *)(fgStructure[Number] + Number L),\n        -<span class=\"supfact\">attributes</span>.x, -<span class=\"supfact\">attributes</span>.y,\n        *((_DWORD *)&fgDisplay + Number), *((_DWORD *)&fgDisplay + Number));\n  }\n  return Number;\n}", "var": [{"name": "v1", "type": "SFG_Menu *", "ref_name": "attributes", "ref_type": "struct XWindowAttributes { int x; int y; int width; int height; int border_width; int depth; Visual * visual; Window root; int class; int bit_gravity; int win_gravity; int backing_store; unsigned __int64 backing_planes; unsigned __int64 backing_pixel; int save_under; PADDING (4); Colormap colormap; int map_installed; int map_state; __int64 all_event_masks; __int64 your_event_mask; __int64 do_not_propagate_mask; int override_redirect; PADDING (4); Screen * screen; }"}], "body_in_train": false}, {"repo_owner": "gbarsever", "repo_name": "in-progress-perp", "path": "gbarsever/in-progress-perp/5fee62774275677d10486a46bc8daeb47979405ab35b5e1b0b5e22702b48697e", "path_in_repo": "gbarsever/in-progress-perp/bhmmi-code/bhmmi-master/gsl-1.16/specfunc/hyperg_U.o", "objdump": "0000000000007a6f <hyperg_U_origin>:\n    7a6f:\t55                   \tpush   %rbp\n    7a70:\t48 89 e5             \tmov    %rsp,%rbp\n    7a73:\t48 83 ec 50          \tsub    $0x50,%rsp\n    7a77:\tf2 0f 11 45 c8       \tmovsd  %xmm0,-0x38(%rbp)\n    7a7c:\tf2 0f 11 4d c0       \tmovsd  %xmm1,-0x40(%rbp)\n    7a81:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    7a85:\tf2 0f 10 4d c8       \tmovsd  -0x38(%rbp),%xmm1\n    7a8a:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 7a92 <hyperg_U_origin+0x23>\n    7a91:\t00 \n    7a92:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n    7a96:\tf2 0f 5c 45 c0       \tsubsd  -0x40(%rbp),%xmm0\n    7a9b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    7a9f:\t48 89 c7             \tmov    %rax,%rdi\n    7aa2:\te8 00 00 00 00       \tcallq  7aa7 <hyperg_U_origin+0x38>\n    7aa7:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    7aaa:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    7aae:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    7ab2:\t48 89 d7             \tmov    %rdx,%rdi\n    7ab5:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n    7aba:\te8 00 00 00 00       \tcallq  7abf <hyperg_U_origin+0x50>\n    7abf:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    7ac2:\tf2 0f 10 4d c0       \tmovsd  -0x40(%rbp),%xmm1\n    7ac7:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 7acf <hyperg_U_origin+0x60>\n    7ace:\t00 \n    7acf:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n    7ad3:\te8 00 00 00 00       \tcallq  7ad8 <hyperg_U_origin+0x69>\n    7ad8:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 7ae0 <hyperg_U_origin+0x71>\n    7adf:\t00 \n    7ae0:\tf2 0f 5e c8          \tdivsd  %xmm0,%xmm1\n    7ae4:\t66 0f 28 c1          \tmovapd %xmm1,%xmm0\n    7ae8:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n    7aed:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n    7af2:\t66 0f 28 c8          \tmovapd %xmm0,%xmm1\n    7af6:\tf2 0f 59 4d f0       \tmulsd  -0x10(%rbp),%xmm1\n    7afb:\tf2 0f 10 45 d0       \tmovsd  -0x30(%rbp),%xmm0\n    7b00:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n    7b04:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    7b08:\tf2 0f 11 00          \tmovsd  %xmm0,(%rax)\n    7b0c:\tf2 0f 10 45 f0       \tmovsd  -0x10(%rbp),%xmm0\n    7b11:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 7b19 <hyperg_U_origin+0xaa>\n    7b18:\t00 \n    7b19:\t66 0f 54 c8          \tandpd  %xmm0,%xmm1\n    7b1d:\tf2 0f 10 55 e8       \tmovsd  -0x18(%rbp),%xmm2\n    7b22:\tf2 0f 10 45 d8       \tmovsd  -0x28(%rbp),%xmm0\n    7b27:\tf2 0f 58 c2          \taddsd  %xmm2,%xmm0\n    7b2b:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n    7b2f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    7b33:\tf2 0f 11 40 08       \tmovsd  %xmm0,0x8(%rax)\n    7b38:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    7b3c:\tc7 40 10 00 00 00 00 \tmovl   $0x0,0x10(%rax)\n    7b43:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n    7b47:\t74 05                \tje     7b4e <hyperg_U_origin+0xdf>\n    7b49:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    7b4c:\teb 03                \tjmp    7b51 <hyperg_U_origin+0xe2>\n    7b4e:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    7b51:\tc9                   \tleaveq \n    7b52:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hyperg_U_origin(__int64 a1, double a2, double a3) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  double <span class=\"supfact\">v6</span>;\n  unsigned int <span class=\"supfact\">v7</span>;\n  unsigned int <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = gsl_sf_gammainv_e(<span class=\"supfact\">v5</span>, a2 + Number - a3);\n  <span class=\"supfact\">v7</span> = gsl_sf_gammainv_e(<span class=\"supfact\">v4</span>, a3);\n  <span class=\"supfact\">v6</span> = Number / sin(Number * a3);\n  *(double *)a1 = *(double *)<span class=\"supfact\">v4</span> *\n                  (*(double *)<span class=\"supfact\">v5</span> * <span class=\"supfact\">v6</span>);\n  *(double *)(a1 + Number) = (*(double *)&<span class=\"supfact\">v4</span>[Number] +\n                              *(double *)&<span class=\"supfact\">v5</span>[Number]) *\n                             fabs(<span class=\"supfact\">v6</span>);\n  *(_DWORD *)(a1 + Number) = Number;\n  if (<span class=\"supfact\">v8</span>)\n    result = <span class=\"supfact\">v8</span>;\n  else\n    result = <span class=\"supfact\">v7</span>;\n  return result;\n}", "code_t": "int __cdecl hyperg_U_origin(const double a, const double b,\n                            gsl_sf_result_e10 *result) {\n  int v3;\n  gsl_sf_result <span class=\"supfact\">r2</span>;\n  gsl_sf_result <span class=\"supfact\">r1</span>;\n  double <span class=\"supfact\">factor</span>;\n  int <span class=\"supfact\">stat_2</span>;\n  int <span class=\"supfact\">stat_1</span>;\n  <span class=\"supfact\">stat_1</span> =\n      gsl_sf_gammainv_e(&<span class=\"supfact\">r1</span>, a + Number - b);\n  <span class=\"supfact\">stat_2</span> = gsl_sf_gammainv_e(&<span class=\"supfact\">r2</span>, b);\n  <span class=\"supfact\">factor</span> = Number / sin(Number * b);\n  result->val = <span class=\"supfact\">r2</span>.val *\n                (<span class=\"supfact\">r1</span>.val * <span class=\"supfact\">factor</span>);\n  result->err = (<span class=\"supfact\">r2</span>.err + <span class=\"supfact\">r1</span>.err) *\n                fabs(<span class=\"supfact\">factor</span>);\n  result->e10 = Number;\n  if (<span class=\"supfact\">stat_1</span>)\n    v3 = <span class=\"supfact\">stat_1</span>;\n  else\n    v3 = <span class=\"supfact\">stat_2</span>;\n  return v3;\n}", "var": [{"name": "v5", "type": "struct gsl_sf_result { double val; double err; }", "ref_name": "r1", "ref_type": "struct gsl_sf_result { double val; double err; }"}, {"name": "v4", "type": "struct gsl_sf_result { double val; double err; }", "ref_name": "r2", "ref_type": "struct gsl_sf_result { double val; double err; }"}], "body_in_train": false}, {"repo_owner": "SystemGarden", "repo_name": "habitat", "path": "SystemGarden/habitat/456b3f6d29316a93b87a361c5e4b64ca8adda33faaef22cb7a943346a525909b", "path_in_repo": "SystemGarden/habitat/src/myhabitat/myhabitat", "objdump": "000000000041a79c <uitime_on_bounds_win>:\n  41a79c:\t55                   \tpush   %rbp\n  41a79d:\t48 89 e5             \tmov    %rsp,%rbp\n  41a7a0:\t53                   \tpush   %rbx\n  41a7a1:\t48 81 ec a8 00 00 00 \tsub    $0xa8,%rsp\n  41a7a8:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  41a7af:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n  41a7b6:\te8 15 3e ff ff       \tcallq  40e5d0 <gtk_widget_get_type@plt>\n  41a7bb:\t48 89 c3             \tmov    %rax,%rbx\n  41a7be:\t48 c7 c0 88 ff 42 00 \tmov    $0x42ff88,%rax\n  41a7c5:\t48 8b 00             \tmov    (%rax),%rax\n  41a7c8:\t48 8d 35 14 e1 00 00 \tlea    0xe114(%rip),%rsi        # 4288e3 <__PRETTY_FUNCTION__.58127+0x2d3>\n  41a7cf:\t48 89 c7             \tmov    %rax,%rdi\n  41a7d2:\te8 29 35 ff ff       \tcallq  40dd00 <gtk_builder_get_object@plt>\n  41a7d7:\t48 89 de             \tmov    %rbx,%rsi\n  41a7da:\t48 89 c7             \tmov    %rax,%rdi\n  41a7dd:\te8 6e 29 ff ff       \tcallq  40d150 <g_type_check_instance_cast@plt>\n  41a7e2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  41a7e6:\te8 35 2f ff ff       \tcallq  40d720 <gtk_calendar_get_type@plt>\n  41a7eb:\t48 89 c3             \tmov    %rax,%rbx\n  41a7ee:\t48 c7 c0 88 ff 42 00 \tmov    $0x42ff88,%rax\n  41a7f5:\t48 8b 00             \tmov    (%rax),%rax\n  41a7f8:\t48 8d 35 f3 e0 00 00 \tlea    0xe0f3(%rip),%rsi        # 4288f2 <__PRETTY_FUNCTION__.58127+0x2e2>\n  41a7ff:\t48 89 c7             \tmov    %rax,%rdi\n  41a802:\te8 f9 34 ff ff       \tcallq  40dd00 <gtk_builder_get_object@plt>\n  41a807:\t48 89 de             \tmov    %rbx,%rsi\n  41a80a:\t48 89 c7             \tmov    %rax,%rdi\n  41a80d:\te8 3e 29 ff ff       \tcallq  40d150 <g_type_check_instance_cast@plt>\n  41a812:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  41a816:\te8 05 2f ff ff       \tcallq  40d720 <gtk_calendar_get_type@plt>\n  41a81b:\t48 89 c3             \tmov    %rax,%rbx\n  41a81e:\t48 c7 c0 88 ff 42 00 \tmov    $0x42ff88,%rax\n  41a825:\t48 8b 00             \tmov    (%rax),%rax\n  41a828:\t48 8d 35 dd e0 00 00 \tlea    0xe0dd(%rip),%rsi        # 42890c <__PRETTY_FUNCTION__.58127+0x2fc>\n  41a82f:\t48 89 c7             \tmov    %rax,%rdi\n  41a832:\te8 c9 34 ff ff       \tcallq  40dd00 <gtk_builder_get_object@plt>\n  41a837:\t48 89 de             \tmov    %rbx,%rsi\n  41a83a:\t48 89 c7             \tmov    %rax,%rdi\n  41a83d:\te8 0e 29 ff ff       \tcallq  40d150 <g_type_check_instance_cast@plt>\n  41a842:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  41a846:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  41a84a:\t48 89 c6             \tmov    %rax,%rsi\n  41a84d:\t48 c7 c0 a0 fe 42 00 \tmov    $0x42fea0,%rax\n  41a854:\t48 89 c7             \tmov    %rax,%rdi\n  41a857:\te8 24 35 ff ff       \tcallq  40dd80 <gmtime_r@plt>\n  41a85c:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  41a863:\t48 89 c6             \tmov    %rax,%rsi\n  41a866:\t48 c7 c0 a8 fe 42 00 \tmov    $0x42fea8,%rax\n  41a86d:\t48 89 c7             \tmov    %rax,%rdi\n  41a870:\te8 0b 35 ff ff       \tcallq  40dd80 <gmtime_r@plt>\n  41a875:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n  41a878:\t05 6c 07 00 00       \tadd    $0x76c,%eax\n  41a87d:\t89 c2                \tmov    %eax,%edx\n  41a87f:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n  41a882:\t89 c1                \tmov    %eax,%ecx\n  41a884:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41a888:\t89 ce                \tmov    %ecx,%esi\n  41a88a:\t48 89 c7             \tmov    %rax,%rdi\n  41a88d:\te8 8e 3d ff ff       \tcallq  40e620 <gtk_calendar_select_month@plt>\n  41a892:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  41a895:\t89 c2                \tmov    %eax,%edx\n  41a897:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41a89b:\t89 d6                \tmov    %edx,%esi\n  41a89d:\t48 89 c7             \tmov    %rax,%rdi\n  41a8a0:\te8 9b 38 ff ff       \tcallq  40e140 <gtk_calendar_select_day@plt>\n  41a8a5:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n  41a8ab:\t05 6c 07 00 00       \tadd    $0x76c,%eax\n  41a8b0:\t89 c2                \tmov    %eax,%edx\n  41a8b2:\t8b 85 70 ff ff ff    \tmov    -0x90(%rbp),%eax\n  41a8b8:\t89 c1                \tmov    %eax,%ecx\n  41a8ba:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41a8be:\t89 ce                \tmov    %ecx,%esi\n  41a8c0:\t48 89 c7             \tmov    %rax,%rdi\n  41a8c3:\te8 58 3d ff ff       \tcallq  40e620 <gtk_calendar_select_month@plt>\n  41a8c8:\t8b 85 6c ff ff ff    \tmov    -0x94(%rbp),%eax\n  41a8ce:\t89 c2                \tmov    %eax,%edx\n  41a8d0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41a8d4:\t89 d6                \tmov    %edx,%esi\n  41a8d6:\t48 89 c7             \tmov    %rax,%rdi\n  41a8d9:\te8 62 38 ff ff       \tcallq  40e140 <gtk_calendar_select_day@plt>\n  41a8de:\te8 5d 3c ff ff       \tcallq  40e540 <gtk_window_get_type@plt>\n  41a8e3:\t48 89 c2             \tmov    %rax,%rdx\n  41a8e6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41a8ea:\t48 89 d6             \tmov    %rdx,%rsi\n  41a8ed:\t48 89 c7             \tmov    %rax,%rdi\n  41a8f0:\te8 5b 28 ff ff       \tcallq  40d150 <g_type_check_instance_cast@plt>\n  41a8f5:\t48 89 c7             \tmov    %rax,%rdi\n  41a8f8:\te8 43 2c ff ff       \tcallq  40d540 <gtk_window_present@plt>\n  41a8fd:\t90                   \tnop\n  41a8fe:\t48 81 c4 a8 00 00 00 \tadd    $0xa8,%rsp\n  41a905:\t5b                   \tpop    %rbx\n  41a906:\t5d                   \tpop    %rbp\n  41a907:\tc3                   \tretq   ", "code_s": "__int64 uitime_on_bounds_win() {\n  struct tm <span class=\"supfact\">v1</span>;\n  struct tm <span class=\"supfact\">tp</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v5</span>;\n  gtk_widget_get_type();\n  gtk_builder_get_object();\n  <span class=\"supfact\">v5</span> = g_type_check_instance_cast();\n  gtk_calendar_get_type();\n  gtk_builder_get_object();\n  <span class=\"supfact\">v4</span> = g_type_check_instance_cast();\n  gtk_calendar_get_type();\n  gtk_builder_get_object();\n  <span class=\"supfact\">v3</span> = g_type_check_instance_cast();\n  gmtime_r(&uitime_view_oldest, &<span class=\"supfact\">tp</span>);\n  gmtime_r(&uitime_view_youngest, &<span class=\"supfact\">v1</span>);\n  gtk_calendar_select_month();\n  gtk_calendar_select_day();\n  gtk_calendar_select_month();\n  gtk_calendar_select_day();\n  gtk_window_get_type();\n  g_type_check_instance_cast();\n  return gtk_window_present();\n}", "code_t": "void __cdecl uitime_on_bounds_win(GtkObject *object, gpointer user_data) {\n  tm <span class=\"supfact\">youngest_tm</span>;\n  tm <span class=\"supfact\">oldest_tm</span>;\n  GtkCalendar *<span class=\"supfact\">databounds_last_calendar</span>;\n  GtkCalendar *<span class=\"supfact\">databounds_first_calendar</span>;\n  GtkWidget *<span class=\"supfact\">databounds_win</span>;\n  gtk_widget_get_type();\n  gtk_builder_get_object();\n  <span class=\"supfact\">databounds_win</span> = (GtkWidget *)g_type_check_instance_cast();\n  gtk_calendar_get_type();\n  gtk_builder_get_object();\n  <span class=\"supfact\">databounds_first_calendar</span> =\n      (GtkCalendar *)g_type_check_instance_cast();\n  gtk_calendar_get_type();\n  gtk_builder_get_object();\n  <span class=\"supfact\">databounds_last_calendar</span> =\n      (GtkCalendar *)g_type_check_instance_cast();\n  gmtime_r(&uitime_view_oldest, &<span class=\"supfact\">oldest_tm</span>);\n  gmtime_r(&uitime_view_youngest, &<span class=\"supfact\">youngest_tm</span>);\n  gtk_calendar_select_month();\n  gtk_calendar_select_day();\n  gtk_calendar_select_month();\n  gtk_calendar_select_day();\n  gtk_window_get_type();\n  g_type_check_instance_cast();\n  gtk_window_present();\n}", "var": [{"name": "tp", "type": "__unk__", "ref_name": "oldest_tm", "ref_type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}, {"name": "v1", "type": "__unk__", "ref_name": "youngest_tm", "ref_type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}], "body_in_train": false}, {"code_s": "void __fastcall DSP56K RegisterToRegisterDataMove\ndisassemble(DSP56K RegisterToRegisterDataMove *this, astring *a2) {\n  char <span class=\"supfact\">v2</span>[Number];\n  char <span class=\"supfact\">v3</span>[Number];\n  char <span class=\"supfact\">v4</span>[Number];\n  char <span class=\"supfact\">v5</span>[Number];\n  if (*((_DWORD *)this + Number) == Number &&\n      *((_DWORD *)this + Number) == Number) {\n    astring operator=(a2, &byte_F28);\n  } else {\n    DSP56K regIdAsString(<span class=\"supfact\">v3</span>, (char *)this + Number);\n    DSP56K regIdAsString(<span class=\"supfact\">v5</span>, (char *)this + Number);\n    operator+((astring *)<span class=\"supfact\">v4</span>,\n              (const astring *)<span class=\"supfact\">v5</span>, String);\n    operator+((astring *)<span class=\"supfact\">v2</span>,\n              (const astring *)<span class=\"supfact\">v4</span>,\n              (const astring *)<span class=\"supfact\">v3</span>);\n    astring operator=(a2, (const astring *)<span class=\"supfact\">v2</span>);\n    astring ~astring((astring *)<span class=\"supfact\">v2</span>);\n    astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n    astring ~astring((astring *)<span class=\"supfact\">v5</span>);\n    astring ~astring((astring *)<span class=\"supfact\">v3</span>);\n  }\n}", "code_t": "void __cdecl DSP56K RegisterToRegisterDataMove disassemble(\n    const DSP56K RegisterToRegisterDataMove *const this, astring *retString) {\n  astring <span class=\"supfact\">string</span>;\n  astring <span class=\"supfact\">rhs</span>;\n  astring <span class=\"supfact\">v4</span>;\n  astring <span class=\"supfact\">lhs</span>;\n  if (this->m_source == iWEIRD && this->m_destination == iWEIRD) {\n    astring operator=(retString, &byte_F28);\n  } else {\n    DSP56K regIdAsString((DSP56K *)&<span class=\"supfact\">rhs</span>, &this->m_destination);\n    DSP56K regIdAsString((DSP56K *)&<span class=\"supfact\">lhs</span>, &this->m_source);\n    operator+(&<span class=\"supfact\">v4</span>, &<span class=\"supfact\">lhs</span>, String);\n    operator+(&<span class=\"supfact\">string</span>, &<span class=\"supfact\">v4</span>,\n              &<span class=\"supfact\">rhs</span>);\n    astring operator=(retString, &<span class=\"supfact\">string</span>);\n    astring ~astring(&<span class=\"supfact\">string</span>);\n    astring ~astring(&<span class=\"supfact\">v4</span>);\n    astring ~astring(&<span class=\"supfact\">lhs</span>);\n    astring ~astring(&<span class=\"supfact\">rhs</span>);\n  }\n}", "var": [{"name": "v5", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "lhs", "ref_type": "struct astring { _astring_base baseclass_0; }"}, {"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "v4", "ref_type": "struct astring { _astring_base baseclass_0; }"}, {"name": "v3", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "rhs", "ref_type": "struct astring { _astring_base baseclass_0; }"}, {"name": "v2", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "string", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "darkspr1te", "repo_name": "uClinux-dist", "path": "darkspr1te/uClinux-dist/1b0c208b91108459e3d659166d36379e71f5c35d06d4700d924e8bbfa1fb67a0", "path_in_repo": "darkspr1te/uClinux-dist/user/vixie-cron/misc.o", "objdump": "00000000000002c7 <set_cron_cwd>:\n 2c7:\t55                   \tpush   %rbp\n 2c8:\t48 89 e5             \tmov    %rsp,%rbp\n 2cb:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n 2d2:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 2d9:\t48 89 c6             \tmov    %rax,%rsi\n 2dc:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2e1:\te8 00 00 00 00       \tcallq  2e6 <set_cron_cwd+0x1f>\n 2e6:\t85 c0                \ttest   %eax,%eax\n 2e8:\t0f 89 93 00 00 00    \tjns    381 <set_cron_cwd+0xba>\n 2ee:\te8 00 00 00 00       \tcallq  2f3 <set_cron_cwd+0x2c>\n 2f3:\t8b 00                \tmov    (%rax),%eax\n 2f5:\t83 f8 02             \tcmp    $0x2,%eax\n 2f8:\t0f 85 83 00 00 00    \tjne    381 <set_cron_cwd+0xba>\n 2fe:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 303:\te8 00 00 00 00       \tcallq  308 <set_cron_cwd+0x41>\n 308:\tbe c0 01 00 00       \tmov    $0x1c0,%esi\n 30d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 312:\te8 00 00 00 00       \tcallq  317 <set_cron_cwd+0x50>\n 317:\t85 c0                \ttest   %eax,%eax\n 319:\t75 34                \tjne    34f <set_cron_cwd+0x88>\n 31b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 322 <set_cron_cwd+0x5b>\n 322:\tba 00 00 00 00       \tmov    $0x0,%edx\n 327:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 32c:\t48 89 c7             \tmov    %rax,%rdi\n 32f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 334:\te8 00 00 00 00       \tcallq  339 <set_cron_cwd+0x72>\n 339:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 340:\t48 89 c6             \tmov    %rax,%rsi\n 343:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 348:\te8 00 00 00 00       \tcallq  34d <set_cron_cwd+0x86>\n 34d:\teb 32                \tjmp    381 <set_cron_cwd+0xba>\n 34f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 356 <set_cron_cwd+0x8f>\n 356:\tba 00 00 00 00       \tmov    $0x0,%edx\n 35b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 360:\t48 89 c7             \tmov    %rax,%rdi\n 363:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 368:\te8 00 00 00 00       \tcallq  36d <set_cron_cwd+0xa6>\n 36d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 372:\te8 00 00 00 00       \tcallq  377 <set_cron_cwd+0xb0>\n 377:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 37c:\te8 00 00 00 00       \tcallq  381 <set_cron_cwd+0xba>\n 381:\t8b 45 88             \tmov    -0x78(%rbp),%eax\n 384:\t25 00 40 00 00       \tand    $0x4000,%eax\n 389:\t85 c0                \ttest   %eax,%eax\n 38b:\t75 28                \tjne    3b5 <set_cron_cwd+0xee>\n 38d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 394 <set_cron_cwd+0xcd>\n 394:\tba 00 00 00 00       \tmov    $0x0,%edx\n 399:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 39e:\t48 89 c7             \tmov    %rax,%rdi\n 3a1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3a6:\te8 00 00 00 00       \tcallq  3ab <set_cron_cwd+0xe4>\n 3ab:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 3b0:\te8 00 00 00 00       \tcallq  3b5 <set_cron_cwd+0xee>\n 3b5:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 3ba:\te8 00 00 00 00       \tcallq  3bf <set_cron_cwd+0xf8>\n 3bf:\t85 c0                \ttest   %eax,%eax\n 3c1:\t79 32                \tjns    3f5 <set_cron_cwd+0x12e>\n 3c3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3ca <set_cron_cwd+0x103>\n 3ca:\tba 00 00 00 00       \tmov    $0x0,%edx\n 3cf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3d4:\t48 89 c7             \tmov    %rax,%rdi\n 3d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3dc:\te8 00 00 00 00       \tcallq  3e1 <set_cron_cwd+0x11a>\n 3e1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 3e6:\te8 00 00 00 00       \tcallq  3eb <set_cron_cwd+0x124>\n 3eb:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 3f0:\te8 00 00 00 00       \tcallq  3f5 <set_cron_cwd+0x12e>\n 3f5:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 3fc:\t48 89 c6             \tmov    %rax,%rsi\n 3ff:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 404:\te8 00 00 00 00       \tcallq  409 <set_cron_cwd+0x142>\n 409:\t85 c0                \ttest   %eax,%eax\n 40b:\t0f 89 93 00 00 00    \tjns    4a4 <set_cron_cwd+0x1dd>\n 411:\te8 00 00 00 00       \tcallq  416 <set_cron_cwd+0x14f>\n 416:\t8b 00                \tmov    (%rax),%eax\n 418:\t83 f8 02             \tcmp    $0x2,%eax\n 41b:\t0f 85 83 00 00 00    \tjne    4a4 <set_cron_cwd+0x1dd>\n 421:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 426:\te8 00 00 00 00       \tcallq  42b <set_cron_cwd+0x164>\n 42b:\tbe c0 01 00 00       \tmov    $0x1c0,%esi\n 430:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 435:\te8 00 00 00 00       \tcallq  43a <set_cron_cwd+0x173>\n 43a:\t85 c0                \ttest   %eax,%eax\n 43c:\t75 34                \tjne    472 <set_cron_cwd+0x1ab>\n 43e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 445 <set_cron_cwd+0x17e>\n 445:\tba 00 00 00 00       \tmov    $0x0,%edx\n 44a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 44f:\t48 89 c7             \tmov    %rax,%rdi\n 452:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 457:\te8 00 00 00 00       \tcallq  45c <set_cron_cwd+0x195>\n 45c:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n 463:\t48 89 c6             \tmov    %rax,%rsi\n 466:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 46b:\te8 00 00 00 00       \tcallq  470 <set_cron_cwd+0x1a9>\n 470:\teb 32                \tjmp    4a4 <set_cron_cwd+0x1dd>\n 472:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 479 <set_cron_cwd+0x1b2>\n 479:\tba 00 00 00 00       \tmov    $0x0,%edx\n 47e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 483:\t48 89 c7             \tmov    %rax,%rdi\n 486:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 48b:\te8 00 00 00 00       \tcallq  490 <set_cron_cwd+0x1c9>\n 490:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 495:\te8 00 00 00 00       \tcallq  49a <set_cron_cwd+0x1d3>\n 49a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 49f:\te8 00 00 00 00       \tcallq  4a4 <set_cron_cwd+0x1dd>\n 4a4:\t8b 45 88             \tmov    -0x78(%rbp),%eax\n 4a7:\t25 00 40 00 00       \tand    $0x4000,%eax\n 4ac:\t85 c0                \ttest   %eax,%eax\n 4ae:\t75 28                \tjne    4d8 <set_cron_cwd+0x211>\n 4b0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4b7 <set_cron_cwd+0x1f0>\n 4b7:\tba 00 00 00 00       \tmov    $0x0,%edx\n 4bc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 4c1:\t48 89 c7             \tmov    %rax,%rdi\n 4c4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 4c9:\te8 00 00 00 00       \tcallq  4ce <set_cron_cwd+0x207>\n 4ce:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 4d3:\te8 00 00 00 00       \tcallq  4d8 <set_cron_cwd+0x211>\n 4d8:\t90                   \tnop\n 4d9:\tc9                   \tleaveq \n 4da:\tc3                   \tretq   ", "code_s": "__int64 set_cron_cwd() {\n  __int64 result;\n  struct stat <span class=\"supfact\">v1</span>;\n  if (stat(String, &<span class=\"supfact\">v1</span>) < Number &&\n      *_errno_location() == Number) {\n    perror(String);\n    if (mkdir(String, Number)) {\n      fprintf(stderr, String, String);\n      perror(String);\n      exit(Number);\n    }\n    fprintf(stderr, String, String);\n    stat(String, &<span class=\"supfact\">v1</span>);\n  }\n  if ((<span class=\"supfact\">v1</span>.st_mode & Number) == Number) {\n    fprintf(stderr, String, String);\n    exit(Number);\n  }\n  if (chdir(String) < Number) {\n    fprintf(stderr, String, String);\n    perror(String);\n    exit(Number);\n  }\n  if (stat(String, &<span class=\"supfact\">v1</span>) < Number &&\n      *_errno_location() == Number) {\n    perror(String);\n    if (mkdir(String, Number)) {\n      fprintf(stderr, String, String);\n      perror(String);\n      exit(Number);\n    }\n    fprintf(stderr, String, String);\n    stat(String, &<span class=\"supfact\">v1</span>);\n  }\n  result = <span class=\"supfact\">v1</span>.st_mode & Number;\n  if ((<span class=\"supfact\">v1</span>.st_mode & Number) == Number) {\n    fprintf(stderr, String, String);\n    exit(Number);\n  }\n  return result;\n}", "code_t": "void __cdecl set_cron_cwd() {\n  stat <span class=\"supfact\">sb</span>;\n  if (stat_0(String, &<span class=\"supfact\">sb</span>) < Number &&\n      *_errno_location() == Number) {\n    perror(String);\n    if (mkdir(String, Number)) {\n      fprintf(stderr, String, String);\n      perror(String);\n      exit(Number);\n    }\n    fprintf(stderr, String, String);\n    stat_0(String, &<span class=\"supfact\">sb</span>);\n  }\n  if ((<span class=\"supfact\">sb</span>.st_mode & Number) == Number) {\n    fprintf(stderr, String, String);\n    exit(Number);\n  }\n  if (chdir(String) < Number) {\n    fprintf(stderr, String, String);\n    perror(String);\n    exit(Number);\n  }\n  if (stat_0(String, &<span class=\"supfact\">sb</span>) < Number &&\n      *_errno_location() == Number) {\n    perror(String);\n    if (mkdir(String, Number)) {\n      fprintf(stderr, String, String);\n      perror(String);\n      exit(Number);\n    }\n    fprintf(stderr, String, String);\n    stat_0(String, &<span class=\"supfact\">sb</span>);\n  }\n  if ((<span class=\"supfact\">sb</span>.st_mode & Number) == Number) {\n    fprintf(stderr, String, String);\n    exit(Number);\n  }\n}", "var": [{"name": "v1", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "sb", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "0000000000001bd7 <_nocheck__trace_megasas_scsi_req_alloc_failed>:\n    1bd7:\t55                   \tpush   %rbp\n    1bd8:\t48 89 e5             \tmov    %rsp,%rbp\n    1bdb:\t41 54                \tpush   %r12\n    1bdd:\t53                   \tpush   %rbx\n    1bde:\t48 83 ec 30          \tsub    $0x30,%rsp\n    1be2:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1be6:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    1be9:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n    1bec:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1bf3:\t00 00 \n    1bf5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1bf9:\t31 c0                \txor    %eax,%eax\n    1bfb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1c01 <_nocheck__trace_megasas_scsi_req_alloc_failed+0x2a>\n    1c01:\t85 c0                \ttest   %eax,%eax\n    1c03:\t0f 95 c0             \tsetne  %al\n    1c06:\t0f b6 c0             \tmovzbl %al,%eax\n    1c09:\t48 85 c0             \ttest   %rax,%rax\n    1c0c:\t74 70                \tje     1c7e <_nocheck__trace_megasas_scsi_req_alloc_failed+0xa7>\n    1c0e:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 1c15 <_nocheck__trace_megasas_scsi_req_alloc_failed+0x3e>\n    1c15:\t66 85 c0             \ttest   %ax,%ax\n    1c18:\t74 64                \tje     1c7e <_nocheck__trace_megasas_scsi_req_alloc_failed+0xa7>\n    1c1a:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    1c1f:\te8 09 ec ff ff       \tcallq  82d <qemu_loglevel_mask>\n    1c24:\t84 c0                \ttest   %al,%al\n    1c26:\t74 56                \tje     1c7e <_nocheck__trace_megasas_scsi_req_alloc_failed+0xa7>\n    1c28:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1c2c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c31:\t48 89 c7             \tmov    %rax,%rdi\n    1c34:\te8 00 00 00 00       \tcallq  1c39 <_nocheck__trace_megasas_scsi_req_alloc_failed+0x62>\n    1c39:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c3d:\t49 89 c4             \tmov    %rax,%r12\n    1c40:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1c44:\t48 89 c3             \tmov    %rax,%rbx\n    1c47:\te8 00 00 00 00       \tcallq  1c4c <_nocheck__trace_megasas_scsi_req_alloc_failed+0x75>\n    1c4c:\t89 c6                \tmov    %eax,%esi\n    1c4e:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n    1c51:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    1c55:\t48 83 ec 08          \tsub    $0x8,%rsp\n    1c59:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    1c5c:\t50                   \tpush   %rax\n    1c5d:\t41 89 c9             \tmov    %ecx,%r9d\n    1c60:\t49 89 d0             \tmov    %rdx,%r8\n    1c63:\t4c 89 e1             \tmov    %r12,%rcx\n    1c66:\t48 89 da             \tmov    %rbx,%rdx\n    1c69:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1c70 <_nocheck__trace_megasas_scsi_req_alloc_failed+0x99>\n    1c70:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c75:\te8 00 00 00 00       \tcallq  1c7a <_nocheck__trace_megasas_scsi_req_alloc_failed+0xa3>\n    1c7a:\t48 83 c4 10          \tadd    $0x10,%rsp\n    1c7e:\t90                   \tnop\n    1c7f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1c83:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    1c8a:\t00 00 \n    1c8c:\t74 05                \tje     1c93 <_nocheck__trace_megasas_scsi_req_alloc_failed+0xbc>\n    1c8e:\te8 00 00 00 00       \tcallq  1c93 <_nocheck__trace_megasas_scsi_req_alloc_failed+0xbc>\n    1c93:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n    1c97:\t5b                   \tpop    %rbx\n    1c98:\t41 5c                \tpop    %r12\n    1c9a:\t5d                   \tpop    %rbp\n    1c9b:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_scsi_req_alloc_failed(\n    const char *a1, unsigned int a2, unsigned int a3) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MEGASAS_SCSI_REQ_ALLOC_FAILED_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v3 = <span class=\"supfact\">tv</span>.tv_usec;\n    v4 = <span class=\"supfact\">tv</span>.tv_sec;\n    v5 = qemu_get_thread_id();\n    qemu_log(String, v5, v4, v3, a1, a2, a3);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl nocheck__trace_megasas_scsi_req_alloc_failed(const char *frame,\n                                                          int dev, int lun) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MEGASAS_SCSI_REQ_ALLOC_FAILED_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v3 = <span class=\"supfact\">_now</span>.tv_usec;\n    v4 = <span class=\"supfact\">_now</span>.tv_sec;\n    v5 = qemu_get_thread_id();\n    qemu_log(String, v5, v4, v3, frame, (unsigned int)dev, (unsigned int)lun);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "pk-codebox-evo", "repo_name": "iOS-apps-dospad", "path": "pk-codebox-evo/iOS-apps-dospad/9c85bc2016ddce9c4059eaea047d42eff6b099525d09324c3aa6c865fe1f4130", "path_in_repo": "pk-codebox-evo/iOS-apps-dospad/dosbox/src/shell/shell_cmds.o", "objdump": "00000000000010f0 <_ZN9DOS_Shell8CMD_ECHOEPc>:\n    10f0:\t55                   \tpush   %rbp\n    10f1:\t48 89 e5             \tmov    %rsp,%rbp\n    10f4:\t53                   \tpush   %rbx\n    10f5:\t48 81 ec 48 02 00 00 \tsub    $0x248,%rsp\n    10fc:\t48 89 bd b8 fd ff ff \tmov    %rdi,-0x248(%rbp)\n    1103:\t48 89 b5 b0 fd ff ff \tmov    %rsi,-0x250(%rbp)\n    110a:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n    1111:\t0f b6 00             \tmovzbl (%rax),%eax\n    1114:\t84 c0                \ttest   %al,%al\n    1116:\t75 5e                \tjne    1176 <_ZN9DOS_Shell8CMD_ECHOEPc+0x86>\n    1118:\t48 8b 85 b8 fd ff ff \tmov    -0x248(%rbp),%rax\n    111f:\t0f b6 80 80 00 00 00 \tmovzbl 0x80(%rax),%eax\n    1126:\t84 c0                \ttest   %al,%al\n    1128:\t74 26                \tje     1150 <_ZN9DOS_Shell8CMD_ECHOEPc+0x60>\n    112a:\t48 8b 9d b8 fd ff ff \tmov    -0x248(%rbp),%rbx\n    1131:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1136:\te8 00 00 00 00       \tcallq  113b <_ZN9DOS_Shell8CMD_ECHOEPc+0x4b>\n    113b:\t48 89 c6             \tmov    %rax,%rsi\n    113e:\t48 89 df             \tmov    %rbx,%rdi\n    1141:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1146:\te8 00 00 00 00       \tcallq  114b <_ZN9DOS_Shell8CMD_ECHOEPc+0x5b>\n    114b:\te9 32 02 00 00       \tjmpq   1382 <_ZN9DOS_Shell8CMD_ECHOEPc+0x292>\n    1150:\t48 8b 9d b8 fd ff ff \tmov    -0x248(%rbp),%rbx\n    1157:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    115c:\te8 00 00 00 00       \tcallq  1161 <_ZN9DOS_Shell8CMD_ECHOEPc+0x71>\n    1161:\t48 89 c6             \tmov    %rax,%rsi\n    1164:\t48 89 df             \tmov    %rbx,%rdi\n    1167:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    116c:\te8 00 00 00 00       \tcallq  1171 <_ZN9DOS_Shell8CMD_ECHOEPc+0x81>\n    1171:\te9 0c 02 00 00       \tjmpq   1382 <_ZN9DOS_Shell8CMD_ECHOEPc+0x292>\n    1176:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n    117d:\t48 89 85 c8 fd ff ff \tmov    %rax,-0x238(%rbp)\n    1184:\t48 8b 8d b0 fd ff ff \tmov    -0x250(%rbp),%rcx\n    118b:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n    1192:\tba ff 01 00 00       \tmov    $0x1ff,%edx\n    1197:\t48 89 ce             \tmov    %rcx,%rsi\n    119a:\t48 89 c7             \tmov    %rax,%rdi\n    119d:\te8 00 00 00 00       \tcallq  11a2 <_ZN9DOS_Shell8CMD_ECHOEPc+0xb2>\n    11a2:\tc6 45 cf 00          \tmovb   $0x0,-0x31(%rbp)\n    11a6:\t48 8d 85 c8 fd ff ff \tlea    -0x238(%rbp),%rax\n    11ad:\t48 89 c7             \tmov    %rax,%rdi\n    11b0:\te8 88 ee ff ff       \tcallq  3d <_ZL11StripSpacesRPc>\n    11b5:\t48 8b 85 c8 fd ff ff \tmov    -0x238(%rbp),%rax\n    11bc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11c1:\t48 89 c7             \tmov    %rax,%rdi\n    11c4:\te8 00 00 00 00       \tcallq  11c9 <_ZN9DOS_Shell8CMD_ECHOEPc+0xd9>\n    11c9:\t85 c0                \ttest   %eax,%eax\n    11cb:\t75 13                \tjne    11e0 <_ZN9DOS_Shell8CMD_ECHOEPc+0xf0>\n    11cd:\t48 8b 85 b8 fd ff ff \tmov    -0x248(%rbp),%rax\n    11d4:\tc6 80 80 00 00 00 00 \tmovb   $0x0,0x80(%rax)\n    11db:\te9 a2 01 00 00       \tjmpq   1382 <_ZN9DOS_Shell8CMD_ECHOEPc+0x292>\n    11e0:\t48 8b 85 c8 fd ff ff \tmov    -0x238(%rbp),%rax\n    11e7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11ec:\t48 89 c7             \tmov    %rax,%rdi\n    11ef:\te8 00 00 00 00       \tcallq  11f4 <_ZN9DOS_Shell8CMD_ECHOEPc+0x104>\n    11f4:\t85 c0                \ttest   %eax,%eax\n    11f6:\t75 13                \tjne    120b <_ZN9DOS_Shell8CMD_ECHOEPc+0x11b>\n    11f8:\t48 8b 85 b8 fd ff ff \tmov    -0x248(%rbp),%rax\n    11ff:\tc6 80 80 00 00 00 01 \tmovb   $0x1,0x80(%rax)\n    1206:\te9 77 01 00 00       \tjmpq   1382 <_ZN9DOS_Shell8CMD_ECHOEPc+0x292>\n    120b:\t48 8b 85 c8 fd ff ff \tmov    -0x238(%rbp),%rax\n    1212:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1217:\t48 89 c7             \tmov    %rax,%rdi\n    121a:\te8 00 00 00 00       \tcallq  121f <_ZN9DOS_Shell8CMD_ECHOEPc+0x12f>\n    121f:\t85 c0                \ttest   %eax,%eax\n    1221:\t0f 85 b7 00 00 00    \tjne    12de <_ZN9DOS_Shell8CMD_ECHOEPc+0x1ee>\n    1227:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n    122e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1233:\t48 89 c7             \tmov    %rax,%rdi\n    1236:\te8 00 00 00 00       \tcallq  123b <_ZN9DOS_Shell8CMD_ECHOEPc+0x14b>\n    123b:\t84 c0                \ttest   %al,%al\n    123d:\t0f 84 9b 00 00 00    \tje     12de <_ZN9DOS_Shell8CMD_ECHOEPc+0x1ee>\n    1243:\t48 8b 9d b8 fd ff ff \tmov    -0x248(%rbp),%rbx\n    124a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    124f:\te8 00 00 00 00       \tcallq  1254 <_ZN9DOS_Shell8CMD_ECHOEPc+0x164>\n    1254:\t48 89 c6             \tmov    %rax,%rsi\n    1257:\t48 89 df             \tmov    %rbx,%rdi\n    125a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    125f:\te8 00 00 00 00       \tcallq  1264 <_ZN9DOS_Shell8CMD_ECHOEPc+0x174>\n    1264:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1269:\te8 00 00 00 00       \tcallq  126e <_ZN9DOS_Shell8CMD_ECHOEPc+0x17e>\n    126e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1272:\t48 8b 85 b8 fd ff ff \tmov    -0x248(%rbp),%rax\n    1279:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    127e:\t48 89 c7             \tmov    %rax,%rdi\n    1281:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1286:\te8 00 00 00 00       \tcallq  128b <_ZN9DOS_Shell8CMD_ECHOEPc+0x19b>\n    128b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    128f:\t48 89 c6             \tmov    %rax,%rsi\n    1292:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1297:\te8 00 00 00 00       \tcallq  129c <_ZN9DOS_Shell8CMD_ECHOEPc+0x1ac>\n    129c:\t85 c0                \ttest   %eax,%eax\n    129e:\t74 20                \tje     12c0 <_ZN9DOS_Shell8CMD_ECHOEPc+0x1d0>\n    12a0:\t48 8b 85 b8 fd ff ff \tmov    -0x248(%rbp),%rax\n    12a7:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    12ab:\t48 89 d6             \tmov    %rdx,%rsi\n    12ae:\t48 89 c7             \tmov    %rax,%rdi\n    12b1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12b6:\te8 00 00 00 00       \tcallq  12bb <_ZN9DOS_Shell8CMD_ECHOEPc+0x1cb>\n    12bb:\te9 c2 00 00 00       \tjmpq   1382 <_ZN9DOS_Shell8CMD_ECHOEPc+0x292>\n    12c0:\t48 8b 85 b8 fd ff ff \tmov    -0x248(%rbp),%rax\n    12c7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    12cc:\t48 89 c7             \tmov    %rax,%rdi\n    12cf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12d4:\te8 00 00 00 00       \tcallq  12d9 <_ZN9DOS_Shell8CMD_ECHOEPc+0x1e9>\n    12d9:\te9 a4 00 00 00       \tjmpq   1382 <_ZN9DOS_Shell8CMD_ECHOEPc+0x292>\n    12de:\t48 83 85 b0 fd ff ff \taddq   $0x1,-0x250(%rbp)\n    12e5:\t01 \n    12e6:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n    12ed:\t48 89 c7             \tmov    %rax,%rdi\n    12f0:\te8 00 00 00 00       \tcallq  12f5 <_ZN9DOS_Shell8CMD_ECHOEPc+0x205>\n    12f5:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    12f9:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    12fe:\t74 62                \tje     1362 <_ZN9DOS_Shell8CMD_ECHOEPc+0x272>\n    1300:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1304:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n    1308:\t48 8b 85 b0 fd ff ff \tmov    -0x250(%rbp),%rax\n    130f:\t48 01 d0             \tadd    %rdx,%rax\n    1312:\t0f b6 00             \tmovzbl (%rax),%eax\n    1315:\t3c 0d                \tcmp    $0xd,%al\n    1317:\t75 49                \tjne    1362 <_ZN9DOS_Shell8CMD_ECHOEPc+0x272>\n    1319:\t48 8d 45 df          \tlea    -0x21(%rbp),%rax\n    131d:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1322:\tbe 15 00 00 00       \tmov    $0x15,%esi\n    1327:\t48 89 c7             \tmov    %rax,%rdi\n    132a:\te8 00 00 00 00       \tcallq  132f <_ZN9DOS_Shell8CMD_ECHOEPc+0x23f>\n    132f:\t48 8d 45 df          \tlea    -0x21(%rbp),%rax\n    1333:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1338:\t48 89 c7             \tmov    %rax,%rdi\n    133b:\te8 00 00 00 00       \tcallq  1340 <_ZN9DOS_Shell8CMD_ECHOEPc+0x250>\n    1340:\t48 8b 85 b8 fd ff ff \tmov    -0x248(%rbp),%rax\n    1347:\t48 8b 95 b0 fd ff ff \tmov    -0x250(%rbp),%rdx\n    134e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1353:\t48 89 c7             \tmov    %rax,%rdi\n    1356:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    135b:\te8 00 00 00 00       \tcallq  1360 <_ZN9DOS_Shell8CMD_ECHOEPc+0x270>\n    1360:\teb 20                \tjmp    1382 <_ZN9DOS_Shell8CMD_ECHOEPc+0x292>\n    1362:\t48 8b 85 b8 fd ff ff \tmov    -0x248(%rbp),%rax\n    1369:\t48 8b 95 b0 fd ff ff \tmov    -0x250(%rbp),%rdx\n    1370:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1375:\t48 89 c7             \tmov    %rax,%rdi\n    1378:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    137d:\te8 00 00 00 00       \tcallq  1382 <_ZN9DOS_Shell8CMD_ECHOEPc+0x292>\n    1382:\t48 81 c4 48 02 00 00 \tadd    $0x248,%rsp\n    1389:\t5b                   \tpop    %rbx\n    138a:\t5d                   \tpop    %rbp\n    138b:\tc3                   \tretq   ", "code_s": "DOS_Shell *__fastcall DOS_Shell CMD_ECHO(DOS_Shell *this, char *a2) {\n  const char *v2;\n  DOS_Shell *result;\n  const char *v4;\n  char *<span class=\"supfact\">src</span>;\n  char *<span class=\"supfact\">s1</span>;\n  char <span class=\"supfact\">dest</span>[Number];\n  char <span class=\"supfact\">v8</span>;\n  size_t <span class=\"supfact\">v9</span>;\n  char *<span class=\"supfact\">s2</span>;\n  if (*a2) {\n    <span class=\"supfact\">s1</span> = <span class=\"supfact\">dest</span>;\n    strncpy(<span class=\"supfact\">dest</span>, a2, Number);\n    <span class=\"supfact\">dest</span>[Number] = Number;\n    StripSpaces(&<span class=\"supfact\">s1</span>);\n    if (!strcasecmp(<span class=\"supfact\">s1</span>, String)) {\n      result = this;\n      *((_BYTE *)this + Number) = Number;\n    } else if (!strcasecmp(<span class=\"supfact\">s1</span>, String)) {\n      result = this;\n      *((_BYTE *)this + Number) = Number;\n    } else if (!strcasecmp(<span class=\"supfact\">s1</span>, String) &&\n               (unsigned __int8)ScanCMDBool(a2, String)) {\n      v4 = (const char *)MSG_Get(String);\n      Program WriteOut(this, v4);\n      <span class=\"supfact\">s2</span> = (char *)MSG_Get(String);\n      Program WriteOut(this, String);\n      if (!strcmp(String, <span class=\"supfact\">s2</span>))\n        result = (DOS_Shell *)Program WriteOut(this, String);\n      else\n        result = (DOS_Shell *)Program WriteOut(this, <span class=\"supfact\">s2</span>);\n    } else {\n      <span class=\"supfact\">src</span> = a2 + Number;\n      <span class=\"supfact\">v9</span> = strlen(a2 + Number);\n      if (<span class=\"supfact\">v9</span> && a2[<span class=\"supfact\">v9</span>] == Number) {\n        LOG LOG(&<span class=\"supfact\">v8</span>, Number L, Number L);\n        LOG operator()(&<span class=\"supfact\">v8</span>, String);\n        result =\n            (DOS_Shell *)Program WriteOut(this, String, <span class=\"supfact\">src</span>);\n      } else {\n        result =\n            (DOS_Shell *)Program WriteOut(this, String, <span class=\"supfact\">src</span>);\n      }\n    }\n  } else {\n    if (*((_BYTE *)this + Number))\n      v2 = (const char *)MSG_Get(String);\n    else\n      v2 = (const char *)MSG_Get(String);\n    result = (DOS_Shell *)Program WriteOut(this, v2);\n  }\n  return result;\n}", "code_t": "void __cdecl DOS_Shell CMD_ECHO(DOS_Shell *const this, char *args) {\n  const char *v2;\n  const char *v3;\n  char *<span class=\"supfact\">argsa</span>;\n  char *<span class=\"supfact\">pbuffer</span>;\n  char <span class=\"supfact\">buffer</span>[Number];\n  LOG <span class=\"supfact\">v7</span>;\n  size_t <span class=\"supfact\">len</span>;\n  const char *<span class=\"supfact\">long_m</span>;\n  if (*args) {\n    <span class=\"supfact\">pbuffer</span> = <span class=\"supfact\">buffer</span>;\n    strncpy(<span class=\"supfact\">buffer</span>, args, Number);\n    <span class=\"supfact\">buffer</span>[Number] = Number;\n    StripSpaces(&<span class=\"supfact\">pbuffer</span>);\n    if (!strcasecmp(<span class=\"supfact\">pbuffer</span>, String)) {\n      *((_BYTE *)this + Number) = Number;\n    } else if (!strcasecmp(<span class=\"supfact\">pbuffer</span>, String)) {\n      *((_BYTE *)this + Number) = Number;\n    } else if (!strcasecmp(<span class=\"supfact\">pbuffer</span>, String) &&\n               (unsigned __int8)ScanCMDBool(args, String)) {\n      v3 = (const char *)MSG_Get(String);\n      Program WriteOut((Program *)this, v3);\n      <span class=\"supfact\">long_m</span> = (const char *)MSG_Get(String);\n      Program WriteOut((Program *)this, String);\n      if (!strcmp(String, <span class=\"supfact\">long_m</span>))\n        Program WriteOut((Program *)this, String);\n      else\n        Program WriteOut((Program *)this, <span class=\"supfact\">long_m</span>);\n    } else {\n      <span class=\"supfact\">argsa</span> = args + Number;\n      <span class=\"supfact\">len</span> = strlen(args + Number);\n      if (<span class=\"supfact\">len</span> && args[<span class=\"supfact\">len</span>] == Number) {\n        LOG LOG(&<span class=\"supfact\">v7</span>, LOG_MISC, LOG_WARN);\n        LOG operator()(&<span class=\"supfact\">v7</span>, String);\n        Program WriteOut((Program *)this, String, <span class=\"supfact\">argsa</span>);\n      } else {\n        Program WriteOut((Program *)this, String, <span class=\"supfact\">argsa</span>);\n      }\n    }\n  } else {\n    if (*((_BYTE *)this + Number))\n      v2 = (const char *)MSG_Get(String);\n    else\n      v2 = (const char *)MSG_Get(String);\n    Program WriteOut((Program *)this, v2);\n  }\n}", "var": [{"name": "v8", "type": "char", "ref_name": "v7", "ref_type": "struct LOG { __int8[1] gap0; }"}], "body_in_train": false}, {"repo_owner": "github", "repo_name": "git-msysgit", "path": "github/git-msysgit/6ae84bed2bea0bdc791463b7d3222148587b6c92f5751dc6aba3318c26f5edc8", "path_in_repo": "github/git-msysgit//url.o", "objdump": "0000000000000493 <url_decode_parameter_value>:\n 493:\t55                   \tpush   %rbp\n 494:\t48 89 e5             \tmov    %rsp,%rbp\n 497:\t48 83 ec 30          \tsub    $0x30,%rsp\n 49b:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 49f:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n 4a6:\t00 \n 4a7:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n 4ae:\t00 \n 4af:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n 4b6:\t00 \n 4b7:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 4bb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 4bf:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n 4c5:\t48 89 d1             \tmov    %rdx,%rcx\n 4c8:\tba 00 00 00 00       \tmov    $0x0,%edx\n 4cd:\tbe ff ff ff ff       \tmov    $0xffffffff,%esi\n 4d2:\t48 89 c7             \tmov    %rax,%rdi\n 4d5:\te8 83 fd ff ff       \tcallq  25d <url_decode_internal>\n 4da:\tc9                   \tleaveq \n 4db:\tc3                   \tretq   ", "code_s": "__int64 __fastcall url_decode_parameter_value(unsigned __int8 **a1) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  <span class=\"supfact\">v2</span>[Number] = (__int64)&strbuf_slopbuf;\n  return url_decode_internal(a1, Number, String, (__int64)<span class=\"supfact\">v2</span>,\n                             Number);\n}", "code_t": "char *__cdecl url_decode_parameter_value(const char **query) {\n  strbuf <span class=\"supfact\">out</span>;\n  <span class=\"supfact\">out</span>.alloc = Number L;\n  <span class=\"supfact\">out</span>.len = Number L;\n  <span class=\"supfact\">out</span>.buf = (char *)&strbuf_slopbuf;\n  return url_decode_internal(query, Number, String, &<span class=\"supfact\">out</span>,\n                             Number);\n}", "var": [{"name": "v2", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "ref_name": "out", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": false}, {"code_s": "__int64 __fastcall Poco Logger has(__int64 a1) {\n  __int64 v1;\n  char <span class=\"supfact\">v3</span>[Number];\n  Poco ScopedLock<Poco Mutex> ScopedLock(<span class=\"supfact\">v3</span>,\n                                         &Poco Logger _mapMtx);\n  v1 = Poco Logger find(a1);\n  Poco ScopedLock<Poco Mutex> ~ScopedLock(<span class=\"supfact\">v3</span>);\n  return v1;\n}", "code_t": "Poco Logger *__cdecl Poco Logger has(const std string *name) {\n  Poco Logger *v1;\n  Poco Mutex ScopedLock <span class=\"supfact\">lock</span>;\n  Poco ScopedLock<Poco Mutex> ScopedLock(&<span class=\"supfact\">lock</span>,\n                                         &Poco Logger _mapMtx);\n  v1 = Poco Logger find(name);\n  Poco ScopedLock<Poco Mutex> ~ScopedLock(&<span class=\"supfact\">lock</span>);\n  return v1;\n}", "var": [{"name": "v3", "type": "struct Poco::Mutex::ScopedLock { Poco::Mutex * _mutex; }", "ref_name": "lock", "ref_type": "struct Poco::Mutex::ScopedLock { Poco::Mutex * _mutex; }"}], "body_in_train": false}, {"repo_owner": "CPFL", "repo_name": "xen", "path": "CPFL/xen/b2249775998a10176c2bce29b26882d15c14acec92becc85f149a9d5ab555802", "path_in_repo": "CPFL/xen/xen/arch/x86/mm/shadow/guest_4.o", "objdump": "00000000000070b0 <validate_gl4e>:\n    70b0:\t55                   \tpush   %rbp\n    70b1:\t48 89 e5             \tmov    %rsp,%rbp\n    70b4:\t48 83 ec 70          \tsub    $0x70,%rsp\n    70b8:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    70bc:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n    70c0:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n    70c4:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n    70c8:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    70cc:\t48 8b 00             \tmov    (%rax),%rax\n    70cf:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    70d3:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    70d7:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    70db:\t48 c7 c7 ff ff ff ff \tmov    $0xffffffffffffffff,%rdi\n    70e2:\te8 ad 90 ff ff       \tcallq  194 <_mfn>\n    70e7:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    70eb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    70ef:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    70f3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    70f7:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    70fe:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    7102:\t48 89 c7             \tmov    %rax,%rdi\n    7105:\te8 0f 97 ff ff       \tcallq  819 <guest_l4e_get_flags>\n    710a:\t83 e0 01             \tand    $0x1,%eax\n    710d:\t85 c0                \ttest   %eax,%eax\n    710f:\t0f 84 9c 00 00 00    \tje     71b1 <validate_gl4e+0x101>\n    7115:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    7119:\t48 89 c7             \tmov    %rax,%rdi\n    711c:\te8 52 96 ff ff       \tcallq  773 <guest_l4e_get_gfn>\n    7121:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    7125:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    7129:\t48 89 c7             \tmov    %rax,%rdi\n    712c:\te8 69 95 ff ff       \tcallq  69a <gfn_x>\n    7131:\t48 89 c1             \tmov    %rax,%rcx\n    7134:\t48 8d 55 c4          \tlea    -0x3c(%rbp),%rdx\n    7138:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    713c:\t48 89 ce             \tmov    %rcx,%rsi\n    713f:\t48 89 c7             \tmov    %rax,%rdi\n    7142:\te8 b2 93 ff ff       \tcallq  4f9 <get_gfn_query_unlocked>\n    7147:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    714b:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    714e:\tba 0d 1e 00 00       \tmov    $0x1e0d,%edx\n    7153:\t89 c1                \tmov    %eax,%ecx\n    7155:\t48 d3 ea             \tshr    %cl,%rdx\n    7158:\t48 89 d0             \tmov    %rdx,%rax\n    715b:\t83 e0 01             \tand    $0x1,%eax\n    715e:\t48 85 c0             \ttest   %rax,%rax\n    7161:\t74 1e                \tje     7181 <validate_gl4e+0xd1>\n    7163:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n    7167:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    716b:\tba 0c 00 00 00       \tmov    $0xc,%edx\n    7170:\t48 89 ce             \tmov    %rcx,%rsi\n    7173:\t48 89 c7             \tmov    %rax,%rdi\n    7176:\te8 68 ab ff ff       \tcallq  1ce3 <get_shadow_status>\n    717b:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    717f:\teb 0c                \tjmp    718d <validate_gl4e+0xdd>\n    7181:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    7184:\t83 f8 06             \tcmp    $0x6,%eax\n    7187:\t74 04                \tje     718d <validate_gl4e+0xdd>\n    7189:\t83 4d fc 04          \torl    $0x4,-0x4(%rbp)\n    718d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    7191:\t48 89 c7             \tmov    %rax,%rdi\n    7194:\te8 0d 90 ff ff       \tcallq  1a6 <mfn_x>\n    7199:\t48 89 c7             \tmov    %rax,%rdi\n    719c:\te8 00 00 00 00       \tcallq  71a1 <validate_gl4e+0xf1>\n    71a1:\t85 c0                \ttest   %eax,%eax\n    71a3:\t74 0c                \tje     71b1 <validate_gl4e+0x101>\n    71a5:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    71a9:\t48 89 c7             \tmov    %rax,%rdi\n    71ac:\te8 f9 9b ff ff       \tcallq  daa <shadow_resync_all>\n    71b1:\t48 8d 4d d8          \tlea    -0x28(%rbp),%rcx\n    71b5:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n    71b9:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n    71bd:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    71c1:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    71c7:\t48 89 c7             \tmov    %rax,%rdi\n    71ca:\te8 da b6 ff ff       \tcallq  28a9 <l4e_propagate_from_guest>\n    71cf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    71d3:\t8b 80 10 0a 00 00    \tmov    0xa10(%rax),%eax\n    71d9:\t25 00 00 10 00       \tand    $0x100000,%eax\n    71de:\t85 c0                \ttest   %eax,%eax\n    71e0:\t74 17                \tje     71f9 <validate_gl4e+0x149>\n    71e2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    71e6:\t8b 80 10 0a 00 00    \tmov    0xa10(%rax),%eax\n    71ec:\t25 00 40 00 00       \tand    $0x4000,%eax\n    71f1:\t85 c0                \ttest   %eax,%eax\n    71f3:\t0f 85 8f 00 00 00    \tjne    7288 <validate_gl4e+0x1d8>\n    71f9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    71fd:\t25 ff 0f 00 00       \tand    $0xfff,%eax\n    7202:\t48 c1 e8 03          \tshr    $0x3,%rax\n    7206:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    7209:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    720d:\t0f b6 80 a0 0b 00 00 \tmovzbl 0xba0(%rax),%eax\n    7214:\t84 c0                \ttest   %al,%al\n    7216:\t74 0c                \tje     7224 <validate_gl4e+0x174>\n    7218:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n    721c:\t0f 95 c0             \tsetne  %al\n    721f:\t0f b6 c0             \tmovzbl %al,%eax\n    7222:\teb 1e                \tjmp    7242 <validate_gl4e+0x192>\n    7224:\t81 7d e4 ff 00 00 00 \tcmpl   $0xff,-0x1c(%rbp)\n    722b:\t7e 10                \tjle    723d <validate_gl4e+0x18d>\n    722d:\t81 7d e4 0f 01 00 00 \tcmpl   $0x10f,-0x1c(%rbp)\n    7234:\t7f 07                \tjg     723d <validate_gl4e+0x18d>\n    7236:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    723b:\teb 05                \tjmp    7242 <validate_gl4e+0x192>\n    723d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7242:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    7245:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n    7249:\t0f 95 c0             \tsetne  %al\n    724c:\t0f b6 c0             \tmovzbl %al,%eax\n    724f:\t48 85 c0             \ttest   %rax,%rax\n    7252:\t74 34                \tje     7288 <validate_gl4e+0x1d8>\n    7254:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    7258:\t48 89 c7             \tmov    %rax,%rdi\n    725b:\te8 c7 a7 ff ff       \tcallq  1a27 <shadow_l4e_get_flags>\n    7260:\t83 e0 01             \tand    $0x1,%eax\n    7263:\t85 c0                \ttest   %eax,%eax\n    7265:\t74 1c                \tje     7283 <validate_gl4e+0x1d3>\n    7267:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 726e <validate_gl4e+0x1be>\n    726e:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 7275 <validate_gl4e+0x1c5>\n    7275:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    727a:\te8 00 00 00 00       \tcallq  727f <validate_gl4e+0x1cf>\n    727f:\t83 4d fc 04          \torl    $0x4,-0x4(%rbp)\n    7283:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    7286:\teb 1e                \tjmp    72a6 <validate_gl4e+0x1f6>\n    7288:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n    728c:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    7290:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n    7294:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7298:\t48 89 c7             \tmov    %rax,%rdi\n    729b:\te8 44 d8 ff ff       \tcallq  4ae4 <shadow_set_l4e>\n    72a0:\t09 45 fc             \tor     %eax,-0x4(%rbp)\n    72a3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    72a6:\tc9                   \tleaveq \n    72a7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall validate_gl4e(__int64 a1, unsigned __int64 *a2, __int64 a3,\n                                 unsigned __int64 *a4) {\n  __int64 v4;\n  __int64 v5;\n  _BOOL4 v6;\n  __int64 result;\n  int v8;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  unsigned __int64 <span class=\"supfact\">v15</span>;\n  _BOOL4 <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">v17</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  unsigned __int64 *<span class=\"supfact\">v19</span>;\n  unsigned int <span class=\"supfact\">v20</span>;\n  <span class=\"supfact\">v14</span> = *a2;\n  <span class=\"supfact\">v19</span> = a4;\n  <span class=\"supfact\">v13</span> = mfn(Number);\n  <span class=\"supfact\">v18</span> = *(_QWORD *)(a1 + Number);\n  <span class=\"supfact\">v20</span> = Number;\n  if ((guest_l4e_get_flags(<span class=\"supfact\">v14</span>) & Number) != Number) {\n    <span class=\"supfact\">v11</span> = guest_l4e_get_gfn(<span class=\"supfact\">v14</span>);\n    v4 = gfn_x(<span class=\"supfact\">v11</span>);\n    <span class=\"supfact\">v10</span> = get_gfn_query_unlocked(<span class=\"supfact\">v18</span>, v4,\n                                                 (__int64)&<span class=\"supfact\">v12</span>);\n    if (((Number >> <span class=\"supfact\">v12</span>) & Number) != Number) {\n      <span class=\"supfact\">v13</span> =\n          get_shadow_status(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v10</span>, Number);\n    } else if (<span class=\"supfact\">v12</span> != Number) {\n      <span class=\"supfact\">v20</span> |= Number;\n    }\n    v5 = mfn_x(<span class=\"supfact\">v13</span>);\n    if ((unsigned int)_mfn_valid(v5))\n      shadow_resync_all(a1);\n  }\n  l4e_propagate_from_guest(a1, <span class=\"supfact\">v14</span>, <span class=\"supfact\">v13</span>,\n                           &<span class=\"supfact\">v15</span>, Number);\n  if ((*(_DWORD *)(<span class=\"supfact\">v18</span> + Number) & Number) != Number &&\n          (*(_DWORD *)(<span class=\"supfact\">v18</span> + Number) & Number) != Number ||\n      ((<span class=\"supfact\">v17</span> =\n            (unsigned __int64)((unsigned __int16)<span class=\"supfact\">v19</span> &\n                               Number) >>\n            Number,\n        !*(_BYTE *)(<span class=\"supfact\">v18</span> + Number))\n           ? (<span class=\"supfact\">v17</span> <= Number || <span class=\"supfact\">v17</span> > Number\n                  ? (v6 = Number)\n                  : (v6 = Number))\n           : (v6 = <span class=\"supfact\">v17</span> != Number),\n       !(<span class=\"supfact\">v16</span> = v6))) {\n    v8 = shadow_set_l4e(<span class=\"supfact\">v18</span>, <span class=\"supfact\">v19</span>,\n                        <span class=\"supfact\">v15</span>, a3);\n    result = v8 | <span class=\"supfact\">v20</span>;\n  } else {\n    if ((shadow_l4e_get_flags(<span class=\"supfact\">v15</span>) & Number) != Number) {\n      printk(String, String);\n      <span class=\"supfact\">v20</span> |= Number;\n    }\n    result = <span class=\"supfact\">v20</span>;\n  }\n  return result;\n}", "code_t": "int __cdecl validate_gl4e(vcpu *v, void *new_ge, mfn_t sl4mfn, void *se) {\n  unsigned __int64 v4;\n  unsigned __int64 v5;\n  int v6;\n  int v7;\n  int v8;\n  unsigned __int64 <span class=\"supfact\">gl3mfn</span>;\n  unsigned __int64 <span class=\"supfact\">gl3gfn</span>;\n  p2m_type_t <span class=\"supfact\">p2mt</span>;\n  mfn_t <span class=\"supfact\">sl3mfn</span>;\n  guest_l4e_t <span class=\"supfact\">new_gl4e</span>;\n  shadow_l4e_t <span class=\"supfact\">new_sl4e</span>;\n  int <span class=\"supfact\">reserved_xen_slot</span>;\n  int <span class=\"supfact\">shadow_index</span>;\n  domain *<span class=\"supfact\">d</span>;\n  shadow_l4e_t *<span class=\"supfact\">sl4p</span>;\n  int <span class=\"supfact\">result</span>;\n  <span class=\"supfact\">new_gl4e</span>.l4 = *(_QWORD *)new_ge;\n  <span class=\"supfact\">sl4p</span> = (shadow_l4e_t *)se;\n  <span class=\"supfact\">sl3mfn</span>.mfn = mfn(Number).mfn;\n  <span class=\"supfact\">d</span> = v->domain;\n  <span class=\"supfact\">result</span> = Number;\n  if ((guest_l4e_get_flags(<span class=\"supfact\">new_gl4e</span>) & Number) != Number) {\n    <span class=\"supfact\">gl3gfn</span> = guest_l4e_get_gfn(<span class=\"supfact\">new_gl4e</span>).gfn;\n    v4 = gfn_x((gfn_t)<span class=\"supfact\">gl3gfn</span>);\n    <span class=\"supfact\">gl3mfn</span> =\n        get_gfn_query_unlocked(<span class=\"supfact\">d</span>, v4, &<span class=\"supfact\">p2mt</span>)\n            .mfn;\n    if (((Number >> <span class=\"supfact\">p2mt</span>) & Number) != Number) {\n      <span class=\"supfact\">sl3mfn</span>.mfn =\n          get_shadow_status(<span class=\"supfact\">d</span>, (mfn_t)<span class=\"supfact\">gl3mfn</span>,\n                            Number)\n              .mfn;\n    } else if (<span class=\"supfact\">p2mt</span> != p2m_populate_on_demand) {\n      <span class=\"supfact\">result</span> |= Number;\n    }\n    v5 = mfn_x(<span class=\"supfact\">sl3mfn</span>);\n    if ((unsigned int)_mfn_valid(v5))\n      shadow_resync_all(v);\n  }\n  l4e_propagate_from_guest(v, <span class=\"supfact\">new_gl4e</span>, <span class=\"supfact\">sl3mfn</span>,\n                           &<span class=\"supfact\">new_sl4e</span>, ft_prefetch);\n  if ((<span class=\"supfact\">d</span>->arch.paging.mode & Number) != Number &&\n          (<span class=\"supfact\">d</span>->arch.paging.mode & Number) != Number ||\n      ((<span class=\"supfact\">shadow_index</span> =\n            (unsigned __int64)((unsigned __int16)<span class=\"supfact\">sl4p</span> &\n                               Number) >>\n            Number,\n        !<span class=\"supfact\">d</span>->arch.is_32bit_pv)\n           ? (<span class=\"supfact\">shadow_index</span> <= Number ||\n                      <span class=\"supfact\">shadow_index</span> > Number\n                  ? (v6 = Number)\n                  : (v6 = Number))\n           : (v6 = <span class=\"supfact\">shadow_index</span> != Number),\n       (<span class=\"supfact\">reserved_xen_slot</span> = v6) == Number)) {\n    v8 = shadow_set_l4e(<span class=\"supfact\">d</span>, <span class=\"supfact\">sl4p</span>,\n                        <span class=\"supfact\">new_sl4e</span>, sl4mfn);\n    v7 = v8 | <span class=\"supfact\">result</span>;\n  } else {\n    if ((shadow_l4e_get_flags(<span class=\"supfact\">new_sl4e</span>) & Number) != Number) {\n      printk(String, String);\n      <span class=\"supfact\">result</span> |= Number;\n    }\n    v7 = <span class=\"supfact\">result</span>;\n  }\n  return v7;\n}", "var": [{"name": "v13", "type": "uint64_t", "ref_name": "sl3mfn", "ref_type": "struct mfn_t { unsigned __int64 mfn; }"}], "body_in_train": false}, {"repo_owner": "LuaLanes", "repo_name": "lanes", "path": "LuaLanes/lanes/774fef9cd9977ecb99fae568674bcbe49d87e2f42005bd15aa06c733494dc42a", "path_in_repo": "LuaLanes/lanes/src/threading.o", "objdump": "00000000000007d6 <THREAD_WAIT_IMPL>:\n 7d6:\t55                   \tpush   %rbp\n 7d7:\t48 89 e5             \tmov    %rsp,%rbp\n 7da:\t48 83 ec 60          \tsub    $0x60,%rsp\n 7de:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 7e2:\tf2 0f 11 45 c0       \tmovsd  %xmm0,-0x40(%rbp)\n 7e7:\t48 89 75 b8          \tmov    %rsi,-0x48(%rbp)\n 7eb:\t48 89 55 b0          \tmov    %rdx,-0x50(%rbp)\n 7ef:\t48 89 4d a8          \tmov    %rcx,-0x58(%rbp)\n 7f3:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 7fa:\t00 \n 7fb:\tf2 0f 10 45 c0       \tmovsd  -0x40(%rbp),%xmm0\n 800:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n 804:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n 808:\t76 1e                \tjbe    828 <THREAD_WAIT_IMPL+0x52>\n 80a:\te8 00 00 00 00       \tcallq  80f <THREAD_WAIT_IMPL+0x39>\n 80f:\tf2 0f 58 45 c0       \taddsd  -0x40(%rbp),%xmm0\n 814:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 818:\t48 89 c7             \tmov    %rax,%rdi\n 81b:\te8 91 f8 ff ff       \tcallq  b1 <prepare_timeout>\n 820:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 824:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 828:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 82c:\t48 89 c7             \tmov    %rax,%rdi\n 82f:\te8 00 00 00 00       \tcallq  834 <THREAD_WAIT_IMPL+0x5e>\n 834:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 838:\t66 0f 2e 45 c0       \tucomisd -0x40(%rbp),%xmm0\n 83d:\t0f 8a 99 00 00 00    \tjp     8dc <THREAD_WAIT_IMPL+0x106>\n 843:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 847:\t66 0f 2e 45 c0       \tucomisd -0x40(%rbp),%xmm0\n 84c:\t0f 84 9c 00 00 00    \tje     8ee <THREAD_WAIT_IMPL+0x118>\n 852:\te9 85 00 00 00       \tjmpq   8dc <THREAD_WAIT_IMPL+0x106>\n 857:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 85c:\t75 3b                \tjne    899 <THREAD_WAIT_IMPL+0xc3>\n 85e:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n 862:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 866:\t48 89 d6             \tmov    %rdx,%rsi\n 869:\t48 89 c7             \tmov    %rax,%rdi\n 86c:\te8 00 00 00 00       \tcallq  871 <THREAD_WAIT_IMPL+0x9b>\n 871:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 874:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n 878:\t74 62                \tje     8dc <THREAD_WAIT_IMPL+0x106>\n 87a:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 87d:\tb9 c5 03 00 00       \tmov    $0x3c5,%ecx\n 882:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 889 <THREAD_WAIT_IMPL+0xb3>\n 889:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 890 <THREAD_WAIT_IMPL+0xba>\n 890:\t89 c7                \tmov    %eax,%edi\n 892:\te8 36 f9 ff ff       \tcallq  1cd <_PT_FAIL>\n 897:\teb 43                \tjmp    8dc <THREAD_WAIT_IMPL+0x106>\n 899:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 89d:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n 8a1:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 8a5:\t48 89 ce             \tmov    %rcx,%rsi\n 8a8:\t48 89 c7             \tmov    %rax,%rdi\n 8ab:\te8 00 00 00 00       \tcallq  8b0 <THREAD_WAIT_IMPL+0xda>\n 8b0:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 8b3:\t83 7d f4 6e          \tcmpl   $0x6e,-0xc(%rbp)\n 8b7:\t74 34                \tje     8ed <THREAD_WAIT_IMPL+0x117>\n 8b9:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 8bd:\t74 1d                \tje     8dc <THREAD_WAIT_IMPL+0x106>\n 8bf:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 8c2:\tb9 c7 03 00 00       \tmov    $0x3c7,%ecx\n 8c7:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 8ce <THREAD_WAIT_IMPL+0xf8>\n 8ce:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8d5 <THREAD_WAIT_IMPL+0xff>\n 8d5:\t89 c7                \tmov    %eax,%edi\n 8d7:\te8 f1 f8 ff ff       \tcallq  1cd <_PT_FAIL>\n 8dc:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 8e0:\t8b 00                \tmov    (%rax),%eax\n 8e2:\t83 f8 02             \tcmp    $0x2,%eax\n 8e5:\t0f 86 6c ff ff ff    \tjbe    857 <THREAD_WAIT_IMPL+0x81>\n 8eb:\teb 01                \tjmp    8ee <THREAD_WAIT_IMPL+0x118>\n 8ed:\t90                   \tnop\n 8ee:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 8f2:\t8b 00                \tmov    (%rax),%eax\n 8f4:\t83 f8 02             \tcmp    $0x2,%eax\n 8f7:\t0f 97 c0             \tseta   %al\n 8fa:\t0f b6 c0             \tmovzbl %al,%eax\n 8fd:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 900:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 904:\t48 89 c7             \tmov    %rax,%rdi\n 907:\te8 00 00 00 00       \tcallq  90c <THREAD_WAIT_IMPL+0x136>\n 90c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 90f:\tc9                   \tleaveq \n 910:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall THREAD_WAIT_IMPL(double a1, __int64 a2, pthread_cond_t *a3,\n                                   pthread_mutex_t *a4, _DWORD *a5) {\n  double v5;\n  _QWORD <span class=\"supfact\">v10</span>[Number];\n  _BOOL4 <span class=\"supfact\">v11</span>;\n  int <span class=\"supfact\">v12</span>;\n  int <span class=\"supfact\">v13</span>;\n  struct timespec *<span class=\"supfact\">abstime</span>;\n  <span class=\"supfact\">abstime</span> = Number L;\n  if (a1 > Number) {\n    v5 = now_secs();\n    prepare_timeout(<span class=\"supfact\">v10</span>, v5 + a1);\n    <span class=\"supfact\">abstime</span> = (struct timespec *)<span class=\"supfact\">v10</span>;\n  }\n  pthread_mutex_lock(a4);\n  if (a1 != Number) {\n    while (*a5 <= Number) {\n      if (<span class=\"supfact\">abstime</span>) {\n        <span class=\"supfact\">v13</span> =\n            pthread_cond_timedwait(a3, a4, <span class=\"supfact\">abstime</span>);\n        if (<span class=\"supfact\">v13</span> == Number)\n          break;\n        if (<span class=\"supfact\">v13</span>)\n          PT_FAIL(<span class=\"supfact\">v13</span>, String, String, Number);\n      } else {\n        <span class=\"supfact\">v12</span> = pthread_cond_wait(a3, a4);\n        if (<span class=\"supfact\">v12</span>)\n          PT_FAIL(<span class=\"supfact\">v12</span>, String, String, Number);\n      }\n    }\n  }\n  <span class=\"supfact\">v11</span> = *a5 > Number;\n  pthread_mutex_unlock(a4);\n  return <span class=\"supfact\">v11</span>;\n}", "code_t": "bool_t __cdecl THREAD_WAIT_IMPL(THREAD_T *ref, double secs,\n                                SIGNAL_T *signal_ref, pthread_mutex_t *mu_ref,\n                                volatile e_status *st_ref) {\n  time_d v5;\n  timespec <span class=\"supfact\">ts_store</span>;\n  bool_t <span class=\"supfact\">done</span>;\n  int <span class=\"supfact\">rc</span>;\n  int <span class=\"supfact\">rc_0</span>;\n  const timespec *<span class=\"supfact\">timeout</span>;\n  <span class=\"supfact\">timeout</span> = Number L;\n  if (secs > Number) {\n    v5 = now_secs();\n    prepare_timeout(&<span class=\"supfact\">ts_store</span>, v5 + secs);\n    <span class=\"supfact\">timeout</span> = &<span class=\"supfact\">ts_store</span>;\n  }\n  pthread_mutex_lock(mu_ref);\n  if (secs != Number) {\n    while (*st_ref <= (unsigned int)WAITING) {\n      if (<span class=\"supfact\">timeout</span>) {\n        <span class=\"supfact\">rc_0</span> =\n            pthread_cond_timedwait(signal_ref, mu_ref, <span class=\"supfact\">timeout</span>);\n        if (<span class=\"supfact\">rc_0</span> == Number)\n          break;\n        if (<span class=\"supfact\">rc_0</span>)\n          PT_FAIL(<span class=\"supfact\">rc_0</span>, String, String, Number);\n      } else {\n        <span class=\"supfact\">rc</span> = pthread_cond_wait(signal_ref, mu_ref);\n        if (<span class=\"supfact\">rc</span>)\n          PT_FAIL(<span class=\"supfact\">rc</span>, String, String, Number);\n      }\n    }\n  }\n  <span class=\"supfact\">done</span> = *st_ref > (unsigned int)WAITING;\n  pthread_mutex_unlock(mu_ref);\n  return <span class=\"supfact\">done</span>;\n}", "var": [{"name": "v10", "type": "double[3]", "ref_name": "ts_store", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "CPFL", "repo_name": "xen", "path": "CPFL/xen/bf7ded588946945d1153eacf57c6228d878082f2fae1060e1c2e695ce80936ea", "path_in_repo": "CPFL/xen/xen/arch/x86/mm/built_in.o", "objdump": "", "code_s": "__int64 __fastcall shadow_set_l2e_0(__int64 a1, unsigned __int64 *a2,\n                                    unsigned __int64 a3, __int64 a4) {\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  int v11;\n  int v12;\n  unsigned __int64 <span class=\"supfact\">v14</span>;\n  unsigned __int64 *<span class=\"supfact\">v15</span>;\n  __int64 <span class=\"supfact\">v16</span>;\n  __int64 <span class=\"supfact\">v17</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  __int64 <span class=\"supfact\">v19</span>;\n  unsigned __int64 <span class=\"supfact\">v20</span>;\n  unsigned __int64 <span class=\"supfact\">v21</span>;\n  __int64 <span class=\"supfact\">v22</span>;\n  unsigned int <span class=\"supfact\">v23</span>;\n  <span class=\"supfact\">v16</span> = a1;\n  <span class=\"supfact\">v15</span> = a2;\n  <span class=\"supfact\">v14</span> = a3;\n  <span class=\"supfact\">v23</span> = Number;\n  if (!a2)\n    BUG();\n  <span class=\"supfact\">v20</span> = *<span class=\"supfact\">v15</span>;\n  if (<span class=\"supfact\">v20</span> == <span class=\"supfact\">v14</span>)\n    return Number L;\n  <span class=\"supfact\">v22</span> =\n      (mfn_x_10(a4) << Number) | (unsigned __int16)<span class=\"supfact\">v15</span> & Number;\n  if ((shadow_l2e_get_flags_0(<span class=\"supfact\">v14</span>) & Number) != Number) {\n    <span class=\"supfact\">v19</span> = shadow_l2e_get_mfn_0(<span class=\"supfact\">v14</span>);\n    v5 = mfn_x_10(<span class=\"supfact\">v19</span>);\n    if ((*(_BYTE *)(Number * pfn_to_pdx_10(v5) - Number + Number) & Number) ==\n        Number)\n      BUG();\n    if (!(unsigned int)sh_get_ref_0(<span class=\"supfact\">v16</span>, <span class=\"supfact\">v19</span>,\n                                    <span class=\"supfact\">v22</span>)) {\n      printk(String, String, Number L);\n      _domain_crash(<span class=\"supfact\">v16</span>);\n      return Number L;\n    }\n    v6 = mfn_x_10(<span class=\"supfact\">v19</span>);\n    <span class=\"supfact\">v21</span> = Number * pfn_to_pdx_10(v6) - Number;\n    if ((*(_BYTE *)(<span class=\"supfact\">v21</span> + Number) & Number) == Number)\n      BUG();\n    v7 = pdx_to_pfn_10(*(unsigned int *)(<span class=\"supfact\">v21</span> + Number));\n    <span class=\"supfact\">v18</span> = mfn_10(v7);\n    if ((*(_BYTE *)(<span class=\"supfact\">v21</span> + Number) & Number) != Number) {\n      v8 = mfn_x_10(<span class=\"supfact\">v18</span>);\n      if ((unsigned int)_mfn_valid(v8)) {\n        if (mfn_is_out_of_sync_1(<span class=\"supfact\">v18</span>))\n          sh_resync(<span class=\"supfact\">v16</span>, <span class=\"supfact\">v18</span>);\n      }\n    }\n  }\n  shadow_write_entries_0(<span class=\"supfact\">v15</span>, &<span class=\"supfact\">v14</span>, Number, a4);\n  <span class=\"supfact\">v23</span> |= Number;\n  if ((shadow_l2e_get_flags_0(<span class=\"supfact\">v20</span>) & Number) != Number) {\n    <span class=\"supfact\">v17</span> = shadow_l2e_get_mfn_0(<span class=\"supfact\">v20</span>);\n    v9 = mfn_x_10(<span class=\"supfact\">v17</span>);\n    v10 = shadow_l2e_get_mfn_0(<span class=\"supfact\">v14</span>);\n    if (v9 != mfn_x_10(v10) ||\n        (v11 = shadow_l2e_get_flags_0(<span class=\"supfact\">v14</span>),\n         v12 = shadow_l2e_get_flags_0(<span class=\"supfact\">v20</span>),\n         !perms_strictly_increased_0(v12, v11))) {\n      <span class=\"supfact\">v23</span> |= Number;\n    }\n    sh_put_ref_1(<span class=\"supfact\">v16</span>, <span class=\"supfact\">v17</span>, <span class=\"supfact\">v22</span>);\n  }\n  return <span class=\"supfact\">v23</span>;\n}", "code_t": "int __cdecl shadow_set_l2e_0(domain *d, shadow_l2e_t *sl2e,\n                             shadow_l2e_t new_sl2e, mfn_t sl2mfn) {\n  unsigned __int64 v5;\n  unsigned __int64 v6;\n  unsigned __int64 v7;\n  unsigned __int64 v8;\n  unsigned __int64 v9;\n  mfn_t v10;\n  u32 v11;\n  u32 v12;\n  shadow_l2e_t <span class=\"supfact\">new_sl2ea</span>;\n  shadow_l2e_t *<span class=\"supfact\">sl2ea</span>;\n  domain *<span class=\"supfact\">da</span>;\n  mfn_t <span class=\"supfact\">osl1mfn</span>;\n  mfn_t <span class=\"supfact\">gl1mfn</span>;\n  mfn_t <span class=\"supfact\">sl1mfn</span>;\n  shadow_l2e_t <span class=\"supfact\">old_sl2e</span>;\n  page_info *<span class=\"supfact\">sp_0</span>;\n  paddr_t <span class=\"supfact\">paddr</span>;\n  int <span class=\"supfact\">flags</span>;\n  <span class=\"supfact\">da</span> = d;\n  <span class=\"supfact\">sl2ea</span> = sl2e;\n  <span class=\"supfact\">new_sl2ea</span>.l2 = new_sl2e.l2;\n  <span class=\"supfact\">flags</span> = Number;\n  if (!sl2e)\n    BUG();\n  <span class=\"supfact\">old_sl2e</span>.l2 = <span class=\"supfact\">sl2ea</span>->l2;\n  if (<span class=\"supfact\">old_sl2e</span>.l2 == <span class=\"supfact\">new_sl2ea</span>.l2)\n    return Number;\n  <span class=\"supfact\">paddr</span> = (mfn_x_10(sl2mfn) << Number) |\n                          (unsigned __int16)<span class=\"supfact\">sl2ea</span> & Number;\n  if ((shadow_l2e_get_flags_0(<span class=\"supfact\">new_sl2ea</span>) & Number) != Number) {\n    <span class=\"supfact\">sl1mfn</span>.mfn =\n        shadow_l2e_get_mfn_0(<span class=\"supfact\">new_sl2ea</span>).mfn;\n    v5 = mfn_x_10(<span class=\"supfact\">sl1mfn</span>);\n    if ((*(_BYTE *)(Number * pfn_to_pdx_10(v5) - Number + Number) & Number) ==\n        Number)\n      BUG();\n    if (!sh_get_ref_0(<span class=\"supfact\">da</span>, <span class=\"supfact\">sl1mfn</span>,\n                      <span class=\"supfact\">paddr</span>)) {\n      printk(String, String, Number L);\n      _domain_crash(<span class=\"supfact\">da</span>);\n      return Number;\n    }\n    v6 = mfn_x_10(<span class=\"supfact\">sl1mfn</span>);\n    <span class=\"supfact\">sp_0</span> = (page_info *)(Number * pfn_to_pdx_10(v6) - Number);\n    if ((<span class=\"supfact\">sp_0</span>->u.free.need_tlbflush & Number) == Number)\n      BUG();\n    v7 = pdx_to_pfn_10(<span class=\"supfact\">sp_0</span>->v.inuse._domain);\n    <span class=\"supfact\">gl1mfn</span>.mfn = mfn_10(v7).mfn;\n    if ((<span class=\"supfact\">sp_0</span>->u.free.need_tlbflush & Number) != Number) {\n      v8 = mfn_x_10(<span class=\"supfact\">gl1mfn</span>);\n      if ((unsigned int)_mfn_valid(v8)) {\n        if (mfn_is_out_of_sync_1(<span class=\"supfact\">gl1mfn</span>))\n          sh_resync(<span class=\"supfact\">da</span>, <span class=\"supfact\">gl1mfn</span>);\n      }\n    }\n  }\n  shadow_write_entries_0(<span class=\"supfact\">sl2ea</span>, &<span class=\"supfact\">new_sl2ea</span>,\n                         Number, sl2mfn);\n  <span class=\"supfact\">flags</span> |= Number;\n  if ((shadow_l2e_get_flags_0(<span class=\"supfact\">old_sl2e</span>) & Number) != Number) {\n    <span class=\"supfact\">osl1mfn</span>.mfn =\n        shadow_l2e_get_mfn_0(<span class=\"supfact\">old_sl2e</span>).mfn;\n    v9 = mfn_x_10(<span class=\"supfact\">osl1mfn</span>);\n    v10.mfn = shadow_l2e_get_mfn_0(<span class=\"supfact\">new_sl2ea</span>).mfn;\n    if (v9 != mfn_x_10(v10) ||\n        (v11 = shadow_l2e_get_flags_0(<span class=\"supfact\">new_sl2ea</span>),\n         v12 = shadow_l2e_get_flags_0(<span class=\"supfact\">old_sl2e</span>),\n         !perms_strictly_increased_0(v12, v11))) {\n      <span class=\"supfact\">flags</span> |= Number;\n    }\n    sh_put_ref_1(<span class=\"supfact\">da</span>, <span class=\"supfact\">osl1mfn</span>,\n                 <span class=\"supfact\">paddr</span>);\n  }\n  return <span class=\"supfact\">flags</span>;\n}", "var": [{"name": "v19", "type": "page_info *", "ref_name": "sl1mfn", "ref_type": "struct mfn_t { unsigned __int64 mfn; }"}, {"name": "v18", "type": "page_info *", "ref_name": "gl1mfn", "ref_type": "struct mfn_t { unsigned __int64 mfn; }"}, {"name": "v17", "type": "page_info *", "ref_name": "osl1mfn", "ref_type": "struct mfn_t { unsigned __int64 mfn; }"}], "body_in_train": false}, {"repo_owner": "lspss9950101", "repo_name": "Database_Course", "path": "lspss9950101/Database_Course/1f0f8d1a998134055c126d9a7f529efb3400589b0957b303bbfab3d24cb9e0bb", "path_in_repo": "lspss9950101/Database_Course/HW3_sad/0716020/shell", "objdump": "0000000000401867 <load_table>:\n  401867:\t55                   \tpush   %rbp\n  401868:\t48 89 e5             \tmov    %rsp,%rbp\n  40186b:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n  401872:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n  401879:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n  401880:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  401887:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  40188b:\t48 85 c0             \ttest   %rax,%rax\n  40188e:\t74 44                \tje     4018d4 <load_table+0x6d>\n  401890:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  401897:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  40189b:\t48 89 c7             \tmov    %rax,%rdi\n  40189e:\te8 fd f7 ff ff       \tcallq  4010a0 <fclose@plt>\n  4018a3:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  4018aa:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  4018ae:\t48 89 c7             \tmov    %rax,%rdi\n  4018b1:\te8 7a f7 ff ff       \tcallq  401030 <free@plt>\n  4018b6:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  4018bd:\t48 c7 40 20 00 00 00 \tmovq   $0x0,0x20(%rax)\n  4018c4:\t00 \n  4018c5:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  4018cc:\t48 c7 40 28 00 00 00 \tmovq   $0x0,0x28(%rax)\n  4018d3:\t00 \n  4018d4:\t48 83 bd 40 ff ff ff \tcmpq   $0x0,-0xc0(%rbp)\n  4018db:\t00 \n  4018dc:\t0f 84 97 01 00 00    \tje     401a79 <load_table+0x212>\n  4018e2:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  4018e9:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n  4018f0:\t00 \n  4018f1:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  4018f8:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4018fc:\tba 10 27 00 00       \tmov    $0x2710,%edx\n  401901:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401906:\t48 89 c7             \tmov    %rax,%rdi\n  401909:\te8 e2 f7 ff ff       \tcallq  4010f0 <memset@plt>\n  40190e:\t48 8d 95 50 ff ff ff \tlea    -0xb0(%rbp),%rdx\n  401915:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n  40191c:\t48 89 d6             \tmov    %rdx,%rsi\n  40191f:\t48 89 c7             \tmov    %rax,%rdi\n  401922:\te8 89 38 00 00       \tcallq  4051b0 <__stat>\n  401927:\t85 c0                \ttest   %eax,%eax\n  401929:\t74 24                \tje     40194f <load_table+0xe8>\n  40192b:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n  401932:\tbe 08 60 40 00       \tmov    $0x406008,%esi\n  401937:\t48 89 c7             \tmov    %rax,%rdi\n  40193a:\te8 31 f8 ff ff       \tcallq  401170 <fopen@plt>\n  40193f:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n  401946:\t48 89 42 20          \tmov    %rax,0x20(%rdx)\n  40194a:\te9 0d 01 00 00       \tjmpq   401a5c <load_table+0x1f5>\n  40194f:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  401953:\t48 ba c1 0f fc c0 0f \tmovabs $0xfc0fc0fc0fc0fc1,%rdx\n  40195a:\tfc c0 0f \n  40195d:\t48 f7 e2             \tmul    %rdx\n  401960:\t48 89 d0             \tmov    %rdx,%rax\n  401963:\t48 c1 e8 05          \tshr    $0x5,%rax\n  401967:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  40196b:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  401972:\t48 8b 00             \tmov    (%rax),%rax\n  401975:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  401979:\t0f 86 af 00 00 00    \tjbe    401a2e <load_table+0x1c7>\n  40197f:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  401983:\t48 89 d0             \tmov    %rdx,%rax\n  401986:\t48 c1 e0 06          \tshl    $0x6,%rax\n  40198a:\t48 01 d0             \tadd    %rdx,%rax\n  40198d:\t48 c1 e0 03          \tshl    $0x3,%rax\n  401991:\t48 05 a0 f7 03 00    \tadd    $0x3f7a0,%rax\n  401997:\t48 89 c7             \tmov    %rax,%rdi\n  40199a:\te8 a1 f7 ff ff       \tcallq  401140 <malloc@plt>\n  40199f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4019a3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4019a7:\t48 05 f4 01 00 00    \tadd    $0x1f4,%rax\n  4019ad:\t48 89 c7             \tmov    %rax,%rdi\n  4019b0:\te8 8b f7 ff ff       \tcallq  401140 <malloc@plt>\n  4019b5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4019b9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4019bd:\t48 8d 90 f4 01 00 00 \tlea    0x1f4(%rax),%rdx\n  4019c4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4019c8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4019cd:\t48 89 c7             \tmov    %rax,%rdi\n  4019d0:\te8 1b f7 ff ff       \tcallq  4010f0 <memset@plt>\n  4019d5:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  4019dc:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4019e0:\t48 89 c7             \tmov    %rax,%rdi\n  4019e3:\te8 48 f6 ff ff       \tcallq  401030 <free@plt>\n  4019e8:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  4019ef:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4019f3:\t48 89 c7             \tmov    %rax,%rdi\n  4019f6:\te8 35 f6 ff ff       \tcallq  401030 <free@plt>\n  4019fb:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  401a02:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  401a06:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  401a0a:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  401a11:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  401a15:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n  401a19:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401a1d:\t48 8d 90 f4 01 00 00 \tlea    0x1f4(%rax),%rdx\n  401a24:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  401a2b:\t48 89 10             \tmov    %rdx,(%rax)\n  401a2e:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n  401a35:\tbe 0b 60 40 00       \tmov    $0x40600b,%esi\n  401a3a:\t48 89 c7             \tmov    %rax,%rdi\n  401a3d:\te8 2e f7 ff ff       \tcallq  401170 <fopen@plt>\n  401a42:\t48 8b 95 48 ff ff ff \tmov    -0xb8(%rbp),%rdx\n  401a49:\t48 89 42 20          \tmov    %rax,0x20(%rdx)\n  401a4d:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  401a54:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  401a58:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  401a5c:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n  401a63:\t48 89 c7             \tmov    %rax,%rdi\n  401a66:\te8 75 f7 ff ff       \tcallq  4011e0 <strdup@plt>\n  401a6b:\t48 89 c2             \tmov    %rax,%rdx\n  401a6e:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  401a75:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n  401a79:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  401a80:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  401a84:\tc9                   \tleaveq \n  401a85:\tc3                   \tretq   ", "code_s": "__int64 __fastcall load_table(__int64 a1, char *a2) {\n  struct stat <span class=\"supfact\">v3</span>;\n  void *<span class=\"supfact\">s</span>;\n  void *<span class=\"supfact\">v5</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  if (*(_QWORD *)(a1 + Number)) {\n    fclose(*(FILE **)(a1 + Number));\n    free(*(void **)(a1 + Number));\n    *(_QWORD *)(a1 + Number) = Number L;\n    *(_QWORD *)(a1 + Number) = Number L;\n  }\n  if (a2) {\n    *(_QWORD *)(a1 + Number) = Number L;\n    memset(*(void **)(a1 + Number), Number, Number);\n    if ((unsigned int)stat(a2, &<span class=\"supfact\">v3</span>)) {\n      *(_QWORD *)(a1 + Number) = fopen(a2, String);\n    } else {\n      <span class=\"supfact\">v6</span> = <span class=\"supfact\">v3</span>.st_size / Number;\n      if (<span class=\"supfact\">v3</span>.st_size / Number > *(_QWORD *)a1) {\n        <span class=\"supfact\">v5</span> = malloc(Number * <span class=\"supfact\">v6</span> + Number);\n        <span class=\"supfact\">s</span> = malloc(<span class=\"supfact\">v6</span> + Number);\n        memset(<span class=\"supfact\">s</span>, Number, <span class=\"supfact\">v6</span> + Number);\n        free(*(void **)(a1 + Number));\n        free(*(void **)(a1 + Number));\n        *(_QWORD *)(a1 + Number) = <span class=\"supfact\">v5</span>;\n        *(_QWORD *)(a1 + Number) = <span class=\"supfact\">s</span>;\n        *(_QWORD *)a1 = <span class=\"supfact\">v6</span> + Number;\n      }\n      *(_QWORD *)(a1 + Number) = fopen(a2, String);\n      *(_QWORD *)(a1 + Number) = <span class=\"supfact\">v6</span>;\n    }\n    *(_QWORD *)(a1 + Number) = strdup(a2);\n  }\n  return *(_QWORD *)(a1 + Number);\n}", "code_t": "int __cdecl load_table(Table_t *table, char *file_name) {\n  stat <span class=\"supfact\">st</span>;\n  unsigned __int8 *<span class=\"supfact\">new_cache_buf</span>;\n  User_t *<span class=\"supfact\">new_user_buf</span>;\n  size_t <span class=\"supfact\">archived_len</span>;\n  if (table->fp) {\n    fclose(table->fp);\n    free(table->file_name);\n    table->fp = Number L;\n    table->file_name = Number L;\n  }\n  if (file_name) {\n    table->len = Number L;\n    memset(table->cache_map, Number, Number);\n    if ((unsigned int)stat_0(file_name, &<span class=\"supfact\">st</span>)) {\n      table->fp = fopen(file_name, String);\n    } else {\n      <span class=\"supfact\">archived_len</span> = <span class=\"supfact\">st</span>.st_size / Number;\n      if (<span class=\"supfact\">st</span>.st_size / Number > table->capacity) {\n        <span class=\"supfact\">new_user_buf</span> =\n            (User_t *)malloc(Number * <span class=\"supfact\">archived_len</span> + Number);\n        <span class=\"supfact\">new_cache_buf</span> =\n            (unsigned __int8 *)malloc(<span class=\"supfact\">archived_len</span> + Number);\n        memset(<span class=\"supfact\">new_cache_buf</span>, Number,\n               <span class=\"supfact\">archived_len</span> + Number);\n        free(table->users);\n        free(table->cache_map);\n        table->users = <span class=\"supfact\">new_user_buf</span>;\n        table->cache_map = <span class=\"supfact\">new_cache_buf</span>;\n        table->capacity = <span class=\"supfact\">archived_len</span> + Number;\n      }\n      table->fp = fopen(file_name, String);\n      table->len = <span class=\"supfact\">archived_len</span>;\n    }\n    table->file_name = strdup(file_name);\n  }\n  return table->len;\n}", "var": [{"name": "v3", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "st", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "jpbonn", "repo_name": "musl", "path": "jpbonn/musl/d9f67cbe18669ac0dc39b09e45d0627163238b240efc27e892d8329c6545745d", "path_in_repo": "jpbonn/musl//src/multibyte/mbstowcs.o", "objdump": "0000000000000000 <mbstowcs>:\n   0:\t48 83 ec 38          \tsub    $0x38,%rsp\n   4:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n   9:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n   e:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n  13:\t48 c7 44 24 28 00 00 \tmovq   $0x0,0x28(%rsp)\n  1a:\t00 00 \n  1c:\t48 8d 4c 24 28       \tlea    0x28(%rsp),%rcx\n  21:\t48 8b 54 24 08       \tmov    0x8(%rsp),%rdx\n  26:\t48 8d 74 24 10       \tlea    0x10(%rsp),%rsi\n  2b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  30:\t48 89 c7             \tmov    %rax,%rdi\n  33:\te8 00 00 00 00       \tcallq  38 <mbstowcs+0x38>\n  38:\t48 83 c4 38          \tadd    $0x38,%rsp\n  3c:\tc3                   \tretq   \n", "code_s": "size_t __fastcall mbstowcs(char *a1, char *a2, size_t a3) {\n  char *<span class=\"supfact\">src</span>[Number];\n  mbstate_t <span class=\"supfact\">ps</span>;\n  <span class=\"supfact\">src</span>[Number] = a1;\n  <span class=\"supfact\">src</span>[Number] = a2;\n  <span class=\"supfact\">ps</span> = Number L;\n  return mbsrtowcs((wchar_t *)a1, (const char **)<span class=\"supfact\">src</span>, a3,\n                   &<span class=\"supfact\">ps</span>);\n}", "code_t": "size_t __cdecl mbstowcs(wchar_t *ws, const char *s, size_t wn) {\n  const char *<span class=\"supfact\">sa</span>;\n  wchar_t *wsa;\n  mbstate_t <span class=\"supfact\">st</span>;\n  wsa = ws;\n  <span class=\"supfact\">sa</span> = s;\n  <span class=\"supfact\">st</span> = Number L;\n  return mbsrtowcs(ws, &<span class=\"supfact\">sa</span>, wn, &<span class=\"supfact\">st</span>);\n}", "var": [{"name": "ps", "type": "struct mbstate_t { int __count; $E9F5FE92D7DB981290475B0A784F5155::$BADCA52C29225A708D9C0115E5B974AC __value; }", "ref_name": "st", "ref_type": "struct mbstate_t { unsigned int __opaque1; unsigned int __opaque2; }"}], "body_in_train": false}, {"repo_owner": "juj", "repo_name": "posixtestsuite", "path": "juj/posixtestsuite/41fb089c6599d8af4105c1d54b49615b1b51958629f168cd99f7f1b37684148b", "path_in_repo": "juj/posixtestsuite//conformance/interfaces/sigaction/6-16.o", "objdump": "000000000000001c <main>:\n  1c:\t55                   \tpush   %rbp\n  1d:\t48 89 e5             \tmov    %rsp,%rbp\n  20:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  27:\t48 c7 85 60 ff ff ff \tmovq   $0x0,-0xa0(%rbp)\n  2e:\t00 00 00 00 \n  32:\tc7 45 e8 04 00 00 00 \tmovl   $0x4,-0x18(%rbp)\n  39:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  40:\t48 83 c0 08          \tadd    $0x8,%rax\n  44:\t48 89 c7             \tmov    %rax,%rdi\n  47:\te8 00 00 00 00       \tcallq  4c <main+0x30>\n  4c:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  53:\t48 83 c0 08          \tadd    $0x8,%rax\n  57:\tbe 13 00 00 00       \tmov    $0x13,%esi\n  5c:\t48 89 c7             \tmov    %rax,%rdi\n  5f:\te8 00 00 00 00       \tcallq  64 <main+0x48>\n  64:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  6b:\tba 00 00 00 00       \tmov    $0x0,%edx\n  70:\t48 89 c6             \tmov    %rax,%rsi\n  73:\tbf 16 00 00 00       \tmov    $0x16,%edi\n  78:\te8 00 00 00 00       \tcallq  7d <main+0x61>\n  7d:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  80:\t75 11                \tjne    93 <main+0x77>\n  82:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  87:\te8 00 00 00 00       \tcallq  8c <main+0x70>\n  8c:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  91:\teb 4a                \tjmp    dd <main+0xc1>\n  93:\tbf 16 00 00 00       \tmov    $0x16,%edi\n  98:\te8 00 00 00 00       \tcallq  9d <main+0x81>\n  9d:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  a0:\t75 11                \tjne    b3 <main+0x97>\n  a2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  a7:\te8 00 00 00 00       \tcallq  ac <main+0x90>\n  ac:\tb8 02 00 00 00       \tmov    $0x2,%eax\n  b1:\teb 2a                \tjmp    dd <main+0xc1>\n  b3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # b9 <main+0x9d>\n  b9:\t85 c0                \ttest   %eax,%eax\n  bb:\t74 11                \tje     ce <main+0xb2>\n  bd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  c2:\te8 00 00 00 00       \tcallq  c7 <main+0xab>\n  c7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  cc:\teb 0f                \tjmp    dd <main+0xc1>\n  ce:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  d3:\te8 00 00 00 00       \tcallq  d8 <main+0xbc>\n  d8:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  dd:\tc9                   \tleaveq \n  de:\tc3                   \tretq   \n", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  struct sigaction <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span>.sa_handler = (__sighandler_t)handler;\n  <span class=\"supfact\">v4</span>.sa_flags = Number;\n  sigemptyset(&<span class=\"supfact\">v4</span>.sa_mask);\n  sigaddset(&<span class=\"supfact\">v4</span>.sa_mask, Number);\n  if (sigaction(Number, &<span class=\"supfact\">v4</span>, Number L) == Number ||\n      raise(Number) == Number) {\n    puts(String);\n    result = Number;\n  } else if (handler_called) {\n    puts(String);\n    result = Number;\n  } else {\n    puts(String);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  sigaction <span class=\"supfact\">act</span>;\n  <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)handler;\n  <span class=\"supfact\">act</span>.sa_flags = Number;\n  sigemptyset(&<span class=\"supfact\">act</span>.sa_mask);\n  sigaddset(&<span class=\"supfact\">act</span>.sa_mask, Number);\n  if (sigaction_0(Number, &<span class=\"supfact\">act</span>, Number L) == Number ||\n      raise(Number) == Number) {\n    puts(String);\n    result = Number;\n  } else if (handler_called) {\n    puts(String);\n    result = Number;\n  } else {\n    puts(String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": false}, {"repo_owner": "rhuitl", "repo_name": "uClinux", "path": "rhuitl/uClinux/2f969583af238c67499e604cd028d7fe2b20a24fdce349c479735396b96e1134", "path_in_repo": "rhuitl/uClinux/user/gdbserver/gdbserver", "objdump": "00000000004026a5 <remote_open>:\n  4026a5:\t55                   \tpush   %rbp\n  4026a6:\t48 89 e5             \tmov    %rsp,%rbp\n  4026a9:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n  4026ad:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n  4026b1:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4026b5:\tbe 3a 00 00 00       \tmov    $0x3a,%esi\n  4026ba:\t48 89 c7             \tmov    %rax,%rdi\n  4026bd:\te8 fe e9 ff ff       \tcallq  4010c0 <strchr@plt>\n  4026c2:\t48 85 c0             \ttest   %rax,%rax\n  4026c5:\t0f 85 92 00 00 00    \tjne    40275d <remote_open+0xb8>\n  4026cb:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4026cf:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  4026d4:\t48 89 c7             \tmov    %rax,%rdi\n  4026d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4026dc:\te8 ff ea ff ff       \tcallq  4011e0 <open@plt>\n  4026e1:\t89 05 dd 89 00 00    \tmov    %eax,0x89dd(%rip)        # 40b0c4 <remote_desc>\n  4026e7:\t8b 05 d7 89 00 00    \tmov    0x89d7(%rip),%eax        # 40b0c4 <remote_desc>\n  4026ed:\t85 c0                \ttest   %eax,%eax\n  4026ef:\t79 0a                \tjns    4026fb <remote_open+0x56>\n  4026f1:\tbf 00 45 40 00       \tmov    $0x404500,%edi\n  4026f6:\te8 a7 ec ff ff       \tcallq  4013a2 <perror_with_name>\n  4026fb:\t8b 05 c3 89 00 00    \tmov    0x89c3(%rip),%eax        # 40b0c4 <remote_desc>\n  402701:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n  402705:\t48 89 d6             \tmov    %rdx,%rsi\n  402708:\t89 c7                \tmov    %eax,%edi\n  40270a:\te8 b1 ea ff ff       \tcallq  4011c0 <tcgetattr@plt>\n  40270f:\tc7 45 90 00 00 00 00 \tmovl   $0x0,-0x70(%rbp)\n  402716:\tc7 45 94 00 00 00 00 \tmovl   $0x0,-0x6c(%rbp)\n  40271d:\tc7 45 9c 00 00 00 00 \tmovl   $0x0,-0x64(%rbp)\n  402724:\t8b 45 98             \tmov    -0x68(%rbp),%eax\n  402727:\t25 cf fe ff ff       \tand    $0xfffffecf,%eax\n  40272c:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n  40272f:\t8b 45 98             \tmov    -0x68(%rbp),%eax\n  402732:\t0d 30 08 00 00       \tor     $0x830,%eax\n  402737:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n  40273a:\tc6 45 a7 00          \tmovb   $0x0,-0x59(%rbp)\n  40273e:\tc6 45 a6 00          \tmovb   $0x0,-0x5a(%rbp)\n  402742:\t8b 05 7c 89 00 00    \tmov    0x897c(%rip),%eax        # 40b0c4 <remote_desc>\n  402748:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n  40274c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  402751:\t89 c7                \tmov    %eax,%edi\n  402753:\te8 78 ea ff ff       \tcallq  4011d0 <tcsetattr@plt>\n  402758:\te9 6f 01 00 00       \tjmpq   4028cc <remote_open+0x227>\n  40275d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  402761:\tbe 3a 00 00 00       \tmov    $0x3a,%esi\n  402766:\t48 89 c7             \tmov    %rax,%rdi\n  402769:\te8 52 e9 ff ff       \tcallq  4010c0 <strchr@plt>\n  40276e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  402772:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  402776:\t48 83 c0 01          \tadd    $0x1,%rax\n  40277a:\t48 89 c7             \tmov    %rax,%rdi\n  40277d:\te8 ae ea ff ff       \tcallq  401230 <atoi@plt>\n  402782:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  402785:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40278a:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40278f:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  402794:\te8 17 eb ff ff       \tcallq  4012b0 <socket@plt>\n  402799:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40279c:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  4027a0:\t79 0a                \tjns    4027ac <remote_open+0x107>\n  4027a2:\tbf 1d 45 40 00       \tmov    $0x40451d,%edi\n  4027a7:\te8 f6 eb ff ff       \tcallq  4013a2 <perror_with_name>\n  4027ac:\tc7 45 cc 01 00 00 00 \tmovl   $0x1,-0x34(%rbp)\n  4027b3:\t48 8d 55 cc          \tlea    -0x34(%rbp),%rdx\n  4027b7:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  4027ba:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n  4027c0:\t48 89 d1             \tmov    %rdx,%rcx\n  4027c3:\tba 02 00 00 00       \tmov    $0x2,%edx\n  4027c8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4027cd:\t89 c7                \tmov    %eax,%edi\n  4027cf:\te8 9c e8 ff ff       \tcallq  401070 <setsockopt@plt>\n  4027d4:\t66 c7 45 d0 02 00    \tmovw   $0x2,-0x30(%rbp)\n  4027da:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  4027dd:\t0f b7 c0             \tmovzwl %ax,%eax\n  4027e0:\t89 c7                \tmov    %eax,%edi\n  4027e2:\te8 c9 e8 ff ff       \tcallq  4010b0 <htons@plt>\n  4027e7:\t66 89 45 d2          \tmov    %ax,-0x2e(%rbp)\n  4027eb:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n  4027f2:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  4027f6:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  4027f9:\tba 10 00 00 00       \tmov    $0x10,%edx\n  4027fe:\t48 89 ce             \tmov    %rcx,%rsi\n  402801:\t89 c7                \tmov    %eax,%edi\n  402803:\te8 98 e9 ff ff       \tcallq  4011a0 <bind@plt>\n  402808:\t85 c0                \ttest   %eax,%eax\n  40280a:\t75 13                \tjne    40281f <remote_open+0x17a>\n  40280c:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  40280f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  402814:\t89 c7                \tmov    %eax,%edi\n  402816:\te8 65 e9 ff ff       \tcallq  401180 <listen@plt>\n  40281b:\t85 c0                \ttest   %eax,%eax\n  40281d:\t74 0a                \tje     402829 <remote_open+0x184>\n  40281f:\tbf 2f 45 40 00       \tmov    $0x40452f,%edi\n  402824:\te8 79 eb ff ff       \tcallq  4013a2 <perror_with_name>\n  402829:\tc7 45 cc 10 00 00 00 \tmovl   $0x10,-0x34(%rbp)\n  402830:\t48 8d 55 cc          \tlea    -0x34(%rbp),%rdx\n  402834:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n  402838:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  40283b:\t48 89 ce             \tmov    %rcx,%rsi\n  40283e:\t89 c7                \tmov    %eax,%edi\n  402840:\te8 db e9 ff ff       \tcallq  401220 <accept@plt>\n  402845:\t89 05 79 88 00 00    \tmov    %eax,0x8879(%rip)        # 40b0c4 <remote_desc>\n  40284b:\t8b 05 73 88 00 00    \tmov    0x8873(%rip),%eax        # 40b0c4 <remote_desc>\n  402851:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  402854:\t75 0a                \tjne    402860 <remote_open+0x1bb>\n  402856:\tbf 42 45 40 00       \tmov    $0x404542,%edi\n  40285b:\te8 42 eb ff ff       \tcallq  4013a2 <perror_with_name>\n  402860:\tc7 45 cc 01 00 00 00 \tmovl   $0x1,-0x34(%rbp)\n  402867:\t48 8d 55 cc          \tlea    -0x34(%rbp),%rdx\n  40286b:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  40286e:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n  402874:\t48 89 d1             \tmov    %rdx,%rcx\n  402877:\tba 09 00 00 00       \tmov    $0x9,%edx\n  40287c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  402881:\t89 c7                \tmov    %eax,%edi\n  402883:\te8 e8 e7 ff ff       \tcallq  401070 <setsockopt@plt>\n  402888:\tc7 45 cc 01 00 00 00 \tmovl   $0x1,-0x34(%rbp)\n  40288f:\t8b 05 2f 88 00 00    \tmov    0x882f(%rip),%eax        # 40b0c4 <remote_desc>\n  402895:\t48 8d 55 cc          \tlea    -0x34(%rbp),%rdx\n  402899:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n  40289f:\t48 89 d1             \tmov    %rdx,%rcx\n  4028a2:\tba 01 00 00 00       \tmov    $0x1,%edx\n  4028a7:\tbe 06 00 00 00       \tmov    $0x6,%esi\n  4028ac:\t89 c7                \tmov    %eax,%edi\n  4028ae:\te8 bd e7 ff ff       \tcallq  401070 <setsockopt@plt>\n  4028b3:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  4028b6:\t89 c7                \tmov    %eax,%edi\n  4028b8:\te8 23 e8 ff ff       \tcallq  4010e0 <close@plt>\n  4028bd:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4028c2:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n  4028c7:\te8 54 e8 ff ff       \tcallq  401120 <signal@plt>\n  4028cc:\t8b 05 f2 87 00 00    \tmov    0x87f2(%rip),%eax        # 40b0c4 <remote_desc>\n  4028d2:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4028d7:\tbe 03 00 00 00       \tmov    $0x3,%esi\n  4028dc:\t89 c7                \tmov    %eax,%edi\n  4028de:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4028e3:\te8 98 e7 ff ff       \tcallq  401080 <fcntl@plt>\n  4028e8:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4028eb:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4028ee:\t80 cc 20             \tor     $0x20,%ah\n  4028f1:\t89 c2                \tmov    %eax,%edx\n  4028f3:\t8b 05 cb 87 00 00    \tmov    0x87cb(%rip),%eax        # 40b0c4 <remote_desc>\n  4028f9:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  4028fe:\t89 c7                \tmov    %eax,%edi\n  402900:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402905:\te8 76 e7 ff ff       \tcallq  401080 <fcntl@plt>\n  40290a:\te8 24 03 00 00       \tcallq  402c33 <disable_async_io>\n  40290f:\t48 8b 05 0a 49 00 00 \tmov    0x490a(%rip),%rax        # 407220 <stderr@@GLIBC_2.2.5>\n  402916:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n  40291a:\tbe 50 45 40 00       \tmov    $0x404550,%esi\n  40291f:\t48 89 c7             \tmov    %rax,%rdi\n  402922:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402927:\te8 04 e8 ff ff       \tcallq  401130 <fprintf@plt>\n  40292c:\t90                   \tnop\n  40292d:\tc9                   \tleaveq \n  40292e:\tc3                   \tretq   ", "code_s": "int __fastcall remote_open(const char *a1) {\n  unsigned int v1;\n  struct termios <span class=\"supfact\">termios_p</span>;\n  socklen_t <span class=\"supfact\">optval</span>;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  unsigned int <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">fd</span>;\n  int <span class=\"supfact\">v8</span>;\n  char *<span class=\"supfact\">v9</span>;\n  if (strchr(a1, Number)) {\n    <span class=\"supfact\">v9</span> = strchr(a1, Number);\n    <span class=\"supfact\">v8</span> = atoi(<span class=\"supfact\">v9</span> + Number);\n    <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n    if (<span class=\"supfact\">fd</span> < Number)\n      perror_with_name(String);\n    <span class=\"supfact\">optval</span> = Number;\n    setsockopt(<span class=\"supfact\">fd</span>, Number, Number, &<span class=\"supfact\">optval</span>,\n               Number);\n    <span class=\"supfact\">addr</span>.sa_family = Number;\n    *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(<span class=\"supfact\">v8</span>);\n    *(_DWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = Number;\n    if (bind(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">addr</span>, Number) ||\n        listen(<span class=\"supfact\">fd</span>, Number))\n      perror_with_name(String);\n    <span class=\"supfact\">optval</span> = Number;\n    remote_desc = accept(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">addr</span>,\n                         &<span class=\"supfact\">optval</span>);\n    if (remote_desc == Number)\n      perror_with_name(String);\n    <span class=\"supfact\">optval</span> = Number;\n    setsockopt(<span class=\"supfact\">fd</span>, Number, Number, &<span class=\"supfact\">optval</span>,\n               Number);\n    <span class=\"supfact\">optval</span> = Number;\n    setsockopt(remote_desc, Number, Number, &<span class=\"supfact\">optval</span>, Number);\n    close(<span class=\"supfact\">fd</span>);\n    signal(Number, (__sighandler_t)Number);\n  } else {\n    remote_desc = open(a1, Number);\n    if (remote_desc < Number)\n      perror_with_name(String);\n    tcgetattr(remote_desc, &<span class=\"supfact\">termios_p</span>);\n    <span class=\"supfact\">termios_p</span>.c_iflag = Number;\n    <span class=\"supfact\">termios_p</span>.c_oflag = Number;\n    <span class=\"supfact\">termios_p</span>.c_lflag = Number;\n    <span class=\"supfact\">termios_p</span>.c_cflag &= Number;\n    <span class=\"supfact\">termios_p</span>.c_cflag |= Number;\n    <span class=\"supfact\">termios_p</span>.c_cc[Number] = Number;\n    <span class=\"supfact\">termios_p</span>.c_cc[Number] = Number;\n    tcsetattr(remote_desc, Number, &<span class=\"supfact\">termios_p</span>);\n  }\n  v1 = fcntl(remote_desc, Number, Number L);\n  <span class=\"supfact\">v6</span> = v1;\n  BYTE1(v1) |= Number;\n  fcntl(remote_desc, Number, v1);\n  disable_async_io();\n  return fprintf(stderr, String, a1);\n}", "code_t": "void __cdecl remote_open(char *name) {\n  unsigned int v1;\n  <span class=\"supfact\">termios</span> <span class=\"supfact\">termios</span>;\n  int <span class=\"supfact\">tmp</span>;\n  sockaddr_in <span class=\"supfact\">sockaddr</span>;\n  int <span class=\"supfact\">save_fcntl_flags</span>;\n  int <span class=\"supfact\">tmp_desc</span>;\n  int <span class=\"supfact\">port</span>;\n  char *<span class=\"supfact\">port_str</span>;\n  if (strchr(name, Number)) {\n    <span class=\"supfact\">port_str</span> = strchr(name, Number);\n    <span class=\"supfact\">port</span> = atoi(<span class=\"supfact\">port_str</span> + Number);\n    <span class=\"supfact\">tmp_desc</span> = socket(Number, Number, Number);\n    if (<span class=\"supfact\">tmp_desc</span> < Number)\n      perror_with_name(String);\n    <span class=\"supfact\">tmp</span> = Number;\n    setsockopt(<span class=\"supfact\">tmp_desc</span>, Number, Number, &<span class=\"supfact\">tmp</span>,\n               Number);\n    <span class=\"supfact\">sockaddr</span>.sin_family = Number;\n    <span class=\"supfact\">sockaddr</span>.sin_port = htons(<span class=\"supfact\">port</span>);\n    <span class=\"supfact\">sockaddr</span>.sin_addr.s_addr = Number;\n    if (bind(<span class=\"supfact\">tmp_desc</span>,\n             (const struct <span class=\"supfact\">sockaddr</span> *)&<span class=\"supfact\">sockaddr</span>,\n             Number) ||\n        listen(<span class=\"supfact\">tmp_desc</span>, Number))\n      perror_with_name(String);\n    <span class=\"supfact\">tmp</span> = Number;\n    remote_desc =\n        accept(<span class=\"supfact\">tmp_desc</span>,\n               (struct <span class=\"supfact\">sockaddr</span> *)&<span class=\"supfact\">sockaddr</span>,\n               (socklen_t *)&<span class=\"supfact\">tmp</span>);\n    if (remote_desc == Number)\n      perror_with_name(String);\n    <span class=\"supfact\">tmp</span> = Number;\n    setsockopt(<span class=\"supfact\">tmp_desc</span>, Number, Number, &<span class=\"supfact\">tmp</span>,\n               Number);\n    <span class=\"supfact\">tmp</span> = Number;\n    setsockopt(remote_desc, Number, Number, &<span class=\"supfact\">tmp</span>, Number);\n    close(<span class=\"supfact\">tmp_desc</span>);\n    signal(Number, (__sighandler_t)Number);\n  } else {\n    remote_desc = open(name, Number);\n    if (remote_desc < Number)\n      perror_with_name(String);\n    tcgetattr(remote_desc, &<span class=\"supfact\">termios</span>);\n    <span class=\"supfact\">termios</span>.c_iflag = Number;\n    <span class=\"supfact\">termios</span>.c_oflag = Number;\n    <span class=\"supfact\">termios</span>.c_lflag = Number;\n    <span class=\"supfact\">termios</span>.c_cflag &= Number;\n    <span class=\"supfact\">termios</span>.c_cflag |= Number;\n    <span class=\"supfact\">termios</span>.c_cc[Number] = Number;\n    <span class=\"supfact\">termios</span>.c_cc[Number] = Number;\n    tcsetattr(remote_desc, Number, &<span class=\"supfact\">termios</span>);\n  }\n  v1 = fcntl(remote_desc, Number, Number L);\n  <span class=\"supfact\">save_fcntl_flags</span> = v1;\n  BYTE1(v1) |= Number;\n  fcntl(remote_desc, Number, v1);\n  disable_async_io();\n  fprintf(stderr, String, name);\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "sockaddr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}, {"name": "termios_p", "type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }", "ref_name": "termios", "ref_type": "struct termios { tcflag_t c_iflag; tcflag_t c_oflag; tcflag_t c_cflag; tcflag_t c_lflag; cc_t c_line; cc_t[32] c_cc; PADDING (3); speed_t c_ispeed; speed_t c_ospeed; }"}], "body_in_train": false}, {"repo_owner": "woshinieao", "repo_name": "neo-h3", "path": "woshinieao/neo-h3/14ceb3782f7058ee5457429615c7785b702d68003e7cc8a7617254dda5f0b5c8", "path_in_repo": "woshinieao/neo-h3/buildroot/output/build/buildroot-config/mconf.o", "objdump": "0000000000000106 <search_conf>:\n     106:\t55                   \tpush   %rbp\n     107:\t48 89 e5             \tmov    %rsp,%rbp\n     10a:\t53                   \tpush   %rbx\n     10b:\t48 83 ec 58          \tsub    $0x58,%rsp\n     10f:\te8 00 00 00 00       \tcallq  114 <search_conf+0xe>\n     114:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     119:\te8 00 00 00 00       \tcallq  11e <search_conf+0x18>\n     11e:\t48 89 c3             \tmov    %rax,%rbx\n     121:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     126:\te8 00 00 00 00       \tcallq  12b <search_conf+0x25>\n     12b:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     131:\tb9 4b 00 00 00       \tmov    $0x4b,%ecx\n     136:\tba 0a 00 00 00       \tmov    $0xa,%edx\n     13b:\t48 89 de             \tmov    %rbx,%rsi\n     13e:\t48 89 c7             \tmov    %rax,%rdi\n     141:\te8 00 00 00 00       \tcallq  146 <search_conf+0x40>\n     146:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n     149:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n     14d:\t74 24                \tje     173 <search_conf+0x6d>\n     14f:\t83 7d e4 01          \tcmpl   $0x1,-0x1c(%rbp)\n     153:\t74 05                \tje     15a <search_conf+0x54>\n     155:\te9 c0 00 00 00       \tjmpq   21a <search_conf+0x114>\n     15a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     15f:\te8 00 00 00 00       \tcallq  164 <search_conf+0x5e>\n     164:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     169:\t48 89 c7             \tmov    %rax,%rdi\n     16c:\te8 0a 0d 00 00       \tcallq  e7b <show_helptext>\n     171:\teb 9c                \tjmp    10f <search_conf+0x9>\n     173:\t90                   \tnop\n     174:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     17b:\t00 \n     17c:\tba 04 00 00 00       \tmov    $0x4,%edx\n     181:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     186:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     18b:\te8 00 00 00 00       \tcallq  190 <search_conf+0x8a>\n     190:\t85 c0                \ttest   %eax,%eax\n     192:\t75 05                \tjne    199 <search_conf+0x93>\n     194:\t48 83 45 e8 04       \taddq   $0x4,-0x18(%rbp)\n     199:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     19d:\t48 89 c7             \tmov    %rax,%rdi\n     1a0:\te8 00 00 00 00       \tcallq  1a5 <search_conf+0x9f>\n     1a5:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     1a9:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     1ad:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     1b1:\t48 89 d6             \tmov    %rdx,%rsi\n     1b4:\t48 89 c7             \tmov    %rax,%rdi\n     1b7:\te8 00 00 00 00       \tcallq  1bc <search_conf+0xb6>\n     1bc:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     1c0:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n     1c4:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     1c8:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     1cc:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     1d0:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     1d4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     1d8:\t48 89 c7             \tmov    %rax,%rdi\n     1db:\te8 00 00 00 00       \tcallq  1e0 <search_conf+0xda>\n     1e0:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     1e4:\t48 89 c7             \tmov    %rax,%rdi\n     1e7:\te8 00 00 00 00       \tcallq  1ec <search_conf+0xe6>\n     1ec:\t48 89 c3             \tmov    %rax,%rbx\n     1ef:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     1f4:\te8 00 00 00 00       \tcallq  1f9 <search_conf+0xf3>\n     1f9:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     1fe:\tba 00 00 00 00       \tmov    $0x0,%edx\n     203:\t48 89 de             \tmov    %rbx,%rsi\n     206:\t48 89 c7             \tmov    %rax,%rdi\n     209:\te8 39 0c 00 00       \tcallq  e47 <show_textbox>\n     20e:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     212:\t48 89 c7             \tmov    %rax,%rdi\n     215:\te8 00 00 00 00       \tcallq  21a <search_conf+0x114>\n     21a:\t48 83 c4 58          \tadd    $0x58,%rsp\n     21e:\t5b                   \tpop    %rbx\n     21f:\t5d                   \tpop    %rbp\n     220:\tc3                   \tretq   ", "code_s": "__int64 search_conf() {\n  char *v0;\n  char *v1;\n  __int64 result;\n  char *v3;\n  __int64 v4;\n  char *v5;\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  void *<span class=\"supfact\">ptr</span>;\n  int <span class=\"supfact\">v9</span>;\n  char *<span class=\"supfact\">v10</span>;\n  while (Number) {\n    dialog_clear();\n    v0 = gettext(String);\n    v1 = gettext(String);\n    result = dialog_inputbox(v1, v0, Number L, Number L, &locale);\n    <span class=\"supfact\">v9</span> = result;\n    if (!(_DWORD)result)\n      break;\n    if (<span class=\"supfact\">v9</span> != Number)\n      return result;\n    v3 = gettext(String);\n    show_helptext(\n        v3, String String String String String String String String String\n                String String String String String String String String String\n                    String String String String String String String String\n                        String String String String String String String String\n                            String String String String String);\n  }\n  <span class=\"supfact\">v10</span> = &dialog_input_result;\n  if (!strncasecmp(&dialog_input_result, String, Number))\n    <span class=\"supfact\">v10</span> += Number;\n  <span class=\"supfact\">ptr</span> = (void *)sym_re_search(<span class=\"supfact\">v10</span>);\n  get_relations_str(<span class=\"supfact\">v6</span>, <span class=\"supfact\">ptr</span>);\n  <span class=\"supfact\">v7</span>[Number] = <span class=\"supfact\">v6</span>[Number];\n  <span class=\"supfact\">v7</span>[Number] = <span class=\"supfact\">v6</span>[Number];\n  <span class=\"supfact\">v7</span>[Number] = <span class=\"supfact\">v6</span>[Number];\n  free(<span class=\"supfact\">ptr</span>);\n  v4 = str_get(<span class=\"supfact\">v7</span>);\n  v5 = gettext(String);\n  show_textbox(v5, v4, Number L, Number L);\n  return str_free(<span class=\"supfact\">v7</span>);\n}", "code_t": "void __cdecl search_conf() {\n  char *v0;\n  char *v1;\n  char *v2;\n  const char *v3;\n  char *v4;\n  gstr <span class=\"supfact\">v5</span>;\n  gstr <span class=\"supfact\">res</span>;\n  symbol **<span class=\"supfact\">sym_arr</span>;\n  int <span class=\"supfact\">dres</span>;\n  char *<span class=\"supfact\">dialog_input</span>;\n  while (Number) {\n    dialog_clear();\n    v0 = gettext(String);\n    v1 = gettext(String);\n    <span class=\"supfact\">dres</span> = dialog_inputbox(v1, v0, Number L, Number L, &locale);\n    if (!<span class=\"supfact\">dres</span>)\n      break;\n    if (<span class=\"supfact\">dres</span> != Number)\n      return;\n    v2 = gettext(String);\n    show_helptext(\n        v2, String String String String String String String String String\n                String String String String String String String String String\n                    String String String String String String String String\n                        String String String String String String String String\n                            String String String String String);\n  }\n  <span class=\"supfact\">dialog_input</span> = &dialog_input_result;\n  if (!strncasecmp(&dialog_input_result, String, Number))\n    <span class=\"supfact\">dialog_input</span> += Number;\n  <span class=\"supfact\">sym_arr</span> =\n      (symbol **)sym_re_search(<span class=\"supfact\">dialog_input</span>);\n  get_relations_str(&<span class=\"supfact\">v5</span>, <span class=\"supfact\">sym_arr</span>);\n  <span class=\"supfact\">res</span> = <span class=\"supfact\">v5</span>;\n  free(<span class=\"supfact\">sym_arr</span>);\n  v3 = (const char *)str_get(&<span class=\"supfact\">res</span>);\n  v4 = gettext(String);\n  show_textbox(v4, v3, Number, Number);\n  str_free(&<span class=\"supfact\">res</span>);\n}", "var": [{"name": "v7", "type": "struct gstr { size_t len; char * s; }", "ref_name": "res", "ref_type": "struct gstr { size_t len; char * s; int max_width; PADDING (4); }"}, {"name": "v6", "type": "__int64[4]", "ref_name": "v5", "ref_type": "struct gstr { size_t len; char * s; int max_width; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "virtadpt", "repo_name": "eBBS", "path": "virtadpt/eBBS/2dfe0cf0da025d8ed6a051d56e06702731063b5ced098f3b8393db06c5539c55", "path_in_repo": "virtadpt/eBBS//pbbs/vedit.o", "objdump": "00000000000007ff <write_file>:\n     7ff:\t55                   \tpush   %rbp\n     800:\t48 89 e5             \tmov    %rsp,%rbp\n     803:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n     80a:\t48 89 bd 38 ff ff ff \tmov    %rdi,-0xc8(%rbp)\n     811:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 818 <write_file+0x19>\n     818:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     81c:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n     823:\t48 8d 45 da          \tlea    -0x26(%rbp),%rax\n     827:\t6a 00                \tpushq  $0x0\n     829:\t6a 00                \tpushq  $0x0\n     82b:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n     831:\t41 b8 06 00 00 00    \tmov    $0x6,%r8d\n     837:\t48 89 c1             \tmov    %rax,%rcx\n     83a:\tba 00 00 00 00       \tmov    $0x0,%edx\n     83f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     844:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     849:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     84e:\te8 00 00 00 00       \tcallq  853 <write_file+0x54>\n     853:\t48 83 c4 10          \tadd    $0x10,%rsp\n     857:\t0f b6 45 da          \tmovzbl -0x26(%rbp),%eax\n     85b:\t3c 61                \tcmp    $0x61,%al\n     85d:\t74 08                \tje     867 <write_file+0x68>\n     85f:\t0f b6 45 da          \tmovzbl -0x26(%rbp),%eax\n     863:\t3c 41                \tcmp    $0x41,%al\n     865:\t75 46                \tjne    8ad <write_file+0xae>\n     867:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n     86e:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     875:\t48 89 d6             \tmov    %rdx,%rsi\n     878:\t48 89 c7             \tmov    %rax,%rdi\n     87b:\te8 00 00 00 00       \tcallq  880 <write_file+0x81>\n     880:\t85 c0                \ttest   %eax,%eax\n     882:\t75 0c                \tjne    890 <write_file+0x91>\n     884:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n     88b:\t48 85 c0             \ttest   %rax,%rax\n     88e:\t75 14                \tjne    8a4 <write_file+0xa5>\n     890:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     897:\t48 89 c7             \tmov    %rax,%rdi\n     89a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     89f:\te8 00 00 00 00       \tcallq  8a4 <write_file+0xa5>\n     8a4:\tc7 45 ec ff ff ff ff \tmovl   $0xffffffff,-0x14(%rbp)\n     8ab:\teb 1a                \tjmp    8c7 <write_file+0xc8>\n     8ad:\t0f b6 45 da          \tmovzbl -0x26(%rbp),%eax\n     8b1:\t3c 65                \tcmp    $0x65,%al\n     8b3:\t74 08                \tje     8bd <write_file+0xbe>\n     8b5:\t0f b6 45 da          \tmovzbl -0x26(%rbp),%eax\n     8b9:\t3c 45                \tcmp    $0x45,%al\n     8bb:\t75 0a                \tjne    8c7 <write_file+0xc8>\n     8bd:\tb8 fe ff ff ff       \tmov    $0xfffffffe,%eax\n     8c2:\te9 e9 00 00 00       \tjmpq   9b0 <write_file+0x1b1>\n     8c7:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 8d2 <write_file+0xd3>\n     8ce:\t00 00 00 00 \n     8d2:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     8d6:\t0f 85 97 00 00 00    \tjne    973 <write_file+0x174>\n     8dc:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n     8e3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     8e8:\t48 89 c7             \tmov    %rax,%rdi\n     8eb:\te8 00 00 00 00       \tcallq  8f0 <write_file+0xf1>\n     8f0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     8f4:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     8f9:\t75 78                \tjne    973 <write_file+0x174>\n     8fb:\tbf 05 00 00 00       \tmov    $0x5,%edi\n     900:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     905:\te8 00 00 00 00       \tcallq  90a <write_file+0x10b>\n     90a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     90f:\te8 00 00 00 00       \tcallq  914 <write_file+0x115>\n     914:\teb 5d                \tjmp    973 <write_file+0x174>\n     916:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     91a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     91e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     922:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     926:\t75 37                \tjne    95f <write_file+0x160>\n     928:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     92c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     930:\t48 85 c0             \ttest   %rax,%rax\n     933:\t75 0c                \tjne    941 <write_file+0x142>\n     935:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     939:\t0f b6 40 14          \tmovzbl 0x14(%rax),%eax\n     93d:\t84 c0                \ttest   %al,%al\n     93f:\t74 1e                \tje     95f <write_file+0x160>\n     941:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     945:\t48 8d 50 14          \tlea    0x14(%rax),%rdx\n     949:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     94d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     952:\t48 89 c7             \tmov    %rax,%rdi\n     955:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     95a:\te8 00 00 00 00       \tcallq  95f <write_file+0x160>\n     95f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     963:\t48 89 c7             \tmov    %rax,%rdi\n     966:\te8 00 00 00 00       \tcallq  96b <write_file+0x16c>\n     96b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     96f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     973:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     978:\t75 9c                \tjne    916 <write_file+0x117>\n     97a:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     97e:\t75 0c                \tjne    98c <write_file+0x18d>\n     980:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     984:\t48 89 c7             \tmov    %rax,%rdi\n     987:\te8 00 00 00 00       \tcallq  98c <write_file+0x18d>\n     98c:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 997 <write_file+0x198>\n     993:\t00 00 00 00 \n     997:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 9a2 <write_file+0x1a3>\n     99e:\t00 00 00 00 \n     9a2:\t48 c7 05 00 00 00 00 \tmovq   $0x0,0x0(%rip)        # 9ad <write_file+0x1ae>\n     9a9:\t00 00 00 00 \n     9ad:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     9b0:\tc9                   \tleaveq \n     9b1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall write_file(const char *a1) {\n  struct stat <span class=\"supfact\">v2</span>;\n  char <span class=\"supfact\">v3</span>[Number];\n  void *<span class=\"supfact\">v4</span>;\n  unsigned int <span class=\"supfact\">v5</span>;\n  void *<span class=\"supfact\">ptr</span>;\n  FILE *<span class=\"supfact\">stream</span>;\n  <span class=\"supfact\">ptr</span> = (void *)firstline;\n  <span class=\"supfact\">v5</span> = Number;\n  getdata(Number L, Number L, String, <span class=\"supfact\">v3</span>, Number L, Number L,\n          Number L, Number L);\n  if (<span class=\"supfact\">v3</span>[Number] == Number ||\n      <span class=\"supfact\">v3</span>[Number] == Number) {\n    if (stat(a1, &<span class=\"supfact\">v2</span>) || !<span class=\"supfact\">v2</span>.st_size)\n      unlink(a1);\n    <span class=\"supfact\">v5</span> = Number;\n  } else if (<span class=\"supfact\">v3</span>[Number] == Number ||\n             <span class=\"supfact\">v3</span>[Number] == Number) {\n    return Number L;\n  }\n  firstline = Number L;\n  if (!<span class=\"supfact\">v5</span>) {\n    <span class=\"supfact\">stream</span> = fopen(a1, String);\n    if (!<span class=\"supfact\">stream</span>) {\n      indigestion(Number);\n      generic_abort();\n    }\n  }\n  while (<span class=\"supfact\">ptr</span>) {\n    <span class=\"supfact\">v4</span> = (void *)*((_QWORD *)<span class=\"supfact\">ptr</span> + Number);\n    if (!<span class=\"supfact\">v5</span> && (*((_QWORD *)<span class=\"supfact\">ptr</span> + Number) ||\n                                *((_BYTE *)<span class=\"supfact\">ptr</span> + Number)))\n      fprintf(<span class=\"supfact\">stream</span>, String,\n              (const char *)<span class=\"supfact\">ptr</span> + Number);\n    free(<span class=\"supfact\">ptr</span>);\n    <span class=\"supfact\">ptr</span> = <span class=\"supfact\">v4</span>;\n  }\n  if (!<span class=\"supfact\">v5</span>)\n    fclose(<span class=\"supfact\">stream</span>);\n  currline = Number L;\n  lastline = Number L;\n  firstline = Number L;\n  return <span class=\"supfact\">v5</span>;\n}", "code_t": "int __cdecl write_file(char *filename) {\n  stat <span class=\"supfact\">stbuf</span>;\n  char <span class=\"supfact\">abort</span>[Number];\n  textline *<span class=\"supfact\">v</span>;\n  int <span class=\"supfact\">aborted</span>;\n  textline *<span class=\"supfact\">p</span>;\n  FILE *<span class=\"supfact\">fp</span>;\n  <span class=\"supfact\">p</span> = firstline;\n  <span class=\"supfact\">aborted</span> = Number;\n  getdata(Number L, Number L, String, <span class=\"supfact\">abort</span>, Number L, Number L,\n          Number L, Number L);\n  if (<span class=\"supfact\">abort</span>[Number] == Number ||\n      <span class=\"supfact\">abort</span>[Number] == Number) {\n    if (stat_0(filename, &<span class=\"supfact\">stbuf</span>) ||\n        !<span class=\"supfact\">stbuf</span>.st_size)\n      unlink(filename);\n    <span class=\"supfact\">aborted</span> = Number;\n  } else if (<span class=\"supfact\">abort</span>[Number] == Number ||\n             <span class=\"supfact\">abort</span>[Number] == Number) {\n    return Number;\n  }\n  firstline = Number L;\n  if (!<span class=\"supfact\">aborted</span>) {\n    <span class=\"supfact\">fp</span> = fopen(filename, String);\n    if (!<span class=\"supfact\">fp</span>) {\n      indigestion(Number);\n      generic_abort();\n    }\n  }\n  while (<span class=\"supfact\">p</span>) {\n    <span class=\"supfact\">v</span> = <span class=\"supfact\">p</span>->next;\n    if (!<span class=\"supfact\">aborted</span> &&\n        (<span class=\"supfact\">p</span>->next || <span class=\"supfact\">p</span>->data[Number]))\n      fprintf(<span class=\"supfact\">fp</span>, String, <span class=\"supfact\">p</span>->data);\n    free(<span class=\"supfact\">p</span>);\n    <span class=\"supfact\">p</span> = <span class=\"supfact\">v</span>;\n  }\n  if (!<span class=\"supfact\">aborted</span>)\n    fclose(<span class=\"supfact\">fp</span>);\n  currline = Number L;\n  lastline = Number L;\n  firstline = Number L;\n  return <span class=\"supfact\">aborted</span>;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "stbuf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "liushengxi13689209566", "repo_name": "SourceReading", "path": "liushengxi13689209566/SourceReading/a810996799c73aa0ca37785002192185529da18986d98aa55722b7be8d6fcba4", "path_in_repo": "liushengxi13689209566/SourceReading/libco_with_comments/example_poll", "objdump": "0000000000403d90 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_>:\n  403d90:\t41 56                \tpush   %r14\n  403d92:\t41 55                \tpush   %r13\n  403d94:\t49 89 f5             \tmov    %rsi,%r13\n  403d97:\t41 54                \tpush   %r12\n  403d99:\t55                   \tpush   %rbp\n  403d9a:\t48 89 fd             \tmov    %rdi,%rbp\n  403d9d:\t48 89 f7             \tmov    %rsi,%rdi\n  403da0:\t53                   \tpush   %rbx\n  403da1:\t48 83 ec 30          \tsub    $0x30,%rsp\n  403da5:\te8 06 ea ff ff       \tcallq  4027b0 <_ZNKSt9_IdentityIiEclERKi.isra.0>\n  403daa:\t48 89 ef             \tmov    %rbp,%rdi\n  403dad:\t48 89 c6             \tmov    %rax,%rsi\n  403db0:\te8 7b fe ff ff       \tcallq  403c30 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE24_M_get_insert_unique_posERKi>\n  403db5:\t49 89 c6             \tmov    %rax,%r14\n  403db8:\t48 85 d2             \ttest   %rdx,%rdx\n  403dbb:\t74 6b                \tje     403e28 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_+0x98>\n  403dbd:\t48 8d 5c 24 10       \tlea    0x10(%rsp),%rbx\n  403dc2:\t48 89 ee             \tmov    %rbp,%rsi\n  403dc5:\t49 89 d4             \tmov    %rdx,%r12\n  403dc8:\t48 89 df             \tmov    %rbx,%rdi\n  403dcb:\te8 60 f2 ff ff       \tcallq  403030 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_Alloc_nodeC1ERS5_>\n  403dd0:\t4c 89 ef             \tmov    %r13,%rdi\n  403dd3:\tc6 44 24 0f 01       \tmovb   $0x1,0xf(%rsp)\n  403dd8:\te8 63 f2 ff ff       \tcallq  403040 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>\n  403ddd:\t49 89 d8             \tmov    %rbx,%r8\n  403de0:\t4c 89 e2             \tmov    %r12,%rdx\n  403de3:\t4c 89 f6             \tmov    %r14,%rsi\n  403de6:\t48 89 ef             \tmov    %rbp,%rdi\n  403de9:\t48 89 c1             \tmov    %rax,%rcx\n  403dec:\te8 9f fd ff ff       \tcallq  403b90 <_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_IRKiNS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIiEPSt18_Rb_tree_node_baseSD_OT_RT0_>\n  403df1:\t48 8d 54 24 0f       \tlea    0xf(%rsp),%rdx\n  403df6:\t48 8d 74 24 18       \tlea    0x18(%rsp),%rsi\n  403dfb:\t48 8d 7c 24 20       \tlea    0x20(%rsp),%rdi\n  403e00:\t48 89 44 24 18       \tmov    %rax,0x18(%rsp)\n  403e05:\te8 36 f5 ff ff       \tcallq  403340 <_ZNSt4pairISt17_Rb_tree_iteratorIiEbEC1IS1_bLb1EEEOT_OT0_>\n  403e0a:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n  403e0f:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n  403e14:\t48 83 c4 30          \tadd    $0x30,%rsp\n  403e18:\t5b                   \tpop    %rbx\n  403e19:\t5d                   \tpop    %rbp\n  403e1a:\t41 5c                \tpop    %r12\n  403e1c:\t41 5d                \tpop    %r13\n  403e1e:\t41 5e                \tpop    %r14\n  403e20:\tc3                   \tretq   \n  403e21:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n  403e28:\t48 8d 6c 24 18       \tlea    0x18(%rsp),%rbp\n  403e2d:\t48 89 c6             \tmov    %rax,%rsi\n  403e30:\tc6 44 24 10 00       \tmovb   $0x0,0x10(%rsp)\n  403e35:\t48 89 ef             \tmov    %rbp,%rdi\n  403e38:\te8 53 f2 ff ff       \tcallq  403090 <_ZNSt17_Rb_tree_iteratorIiEC1EPSt18_Rb_tree_node_base>\n  403e3d:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n  403e42:\t48 8d 7c 24 20       \tlea    0x20(%rsp),%rdi\n  403e47:\t48 89 ee             \tmov    %rbp,%rsi\n  403e4a:\te8 f1 f4 ff ff       \tcallq  403340 <_ZNSt4pairISt17_Rb_tree_iteratorIiEbEC1IS1_bLb1EEEOT_OT0_>\n  403e4f:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n  403e54:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n  403e59:\t48 83 c4 30          \tadd    $0x30,%rsp\n  403e5d:\t5b                   \tpop    %rbx\n  403e5e:\t5d                   \tpop    %rbp\n  403e5f:\t41 5c                \tpop    %r12\n  403e61:\t41 5d                \tpop    %r13\n  403e63:\t41 5e                \tpop    %r14\n  403e65:\tc3                   \tretq   \n  403e66:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  403e6d:\t00 00 00 ", "code_s": "__int64 __fastcall std\n    _Rb_tree<int, int, std _Identity<int>, std less<int>, std allocator<int>>\n    _M_insert_unique<int const &>(__int64 a1, __int64 a2) {\n  int *v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  char <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  v2 = (int *)std _Identity<int> operator()(a2);\n  v3 = std\n      _Rb_tree<int, int, std _Identity<int>, std less<int>, std allocator<int>>\n          _M_get_insert_unique_pos(a1, v2);\n  v5 = v3;\n  if (v4) {\n    v6 = v4;\n    std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                 std allocator<int>>\n        _Alloc_node _Alloc_node(&<span class=\"supfact\">v10</span>, a1);\n    <span class=\"supfact\">v9</span> = Number;\n    v7 = std forward<int const &>(a2);\n    <span class=\"supfact\">v11</span> = std _Rb_tree<int, int, std _Identity<int>,\n                                       std less<int>, std allocator<int>>\n        _M_insert_<int const &, std _Rb_tree<int, int, std _Identity<int>,\n                                             std less<int>, std allocator<int>>\n                                    _Alloc_node>(a1, v5, v6, v7);\n    std pair<std _Rb_tree_iterator<int>, bool>\n        pair<std _Rb_tree_iterator<int>, bool, true>(\n            (__int64)&<span class=\"supfact\">v12</span>, (__int64)&<span class=\"supfact\">v11</span>,\n            (__int64)&<span class=\"supfact\">v9</span>);\n  } else {\n    LOBYTE(<span class=\"supfact\">v10</span>) = Number;\n    std _Rb_tree_iterator<int> _Rb_tree_iterator(&<span class=\"supfact\">v11</span>, v3);\n    std pair<std _Rb_tree_iterator<int>, bool>\n        pair<std _Rb_tree_iterator<int>, bool, true>(\n            (__int64)&<span class=\"supfact\">v12</span>, (__int64)&<span class=\"supfact\">v11</span>,\n            (__int64)&<span class=\"supfact\">v10</span>);\n  }\n  return <span class=\"supfact\">v12</span>;\n}", "code_t": "std pair<std _Rb_tree_iterator<int>, bool> __fastcall std\n    _Rb_tree<int, int, std _Identity<int>, std less<int>, std allocator<int>>\n    _M_insert_unique<int const &>(\n        std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                     std allocator<int>> *const this,\n        const int *__v) {\n  const std\n      _Rb_tree<int, int, std _Identity<int>, std less<int>, std allocator<int>>\n          key_type *v2;\n  std pair<std _Rb_tree_node_base *, std _Rb_tree_node_base *> v3;\n  std _Rb_tree_node_base *v4;\n  std _Rb_tree_node_base *v5;\n  const int *v6;\n  bool <span class=\"supfact\">__y</span>;\n  std _Rb_tree<int, int, std _Identity<int>, std less<int>, std allocator<int>>\n      _Alloc_node <span class=\"supfact\">__an</span>;\n  std _Rb_tree_iterator<int> <span class=\"supfact\">__x</span>;\n  std pair<std _Rb_tree_iterator<int>, bool> <span class=\"supfact\">v10</span>;\n  v2 = (const std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                           std allocator<int>>\n            key_type *)std _Identity<int>\n  operator()((const std _Identity<int> *const)__v, __v);\n  v3 = std\n      _Rb_tree<int, int, std _Identity<int>, std less<int>, std allocator<int>>\n          _M_get_insert_unique_pos(this, v2);\n  v4 = v3.first;\n  if (v3.second) {\n    v5 = v3.second;\n    std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                 std allocator<int>>\n        _Alloc_node _Alloc_node(&<span class=\"supfact\">__an</span>, this);\n    <span class=\"supfact\">__y</span> = Number;\n    v6 =\n        std forward<int const &>((std remove_reference<int const &> type *)__v);\n    <span class=\"supfact\">__x</span>._M_node =\n        std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                     std allocator<int>>\n            _M_insert_<int const &,\n                       std _Rb_tree<int, int, std _Identity<int>, std less<int>,\n                                    std allocator<int>>\n                           _Alloc_node>(this, v4, v5, v6, &<span class=\"supfact\">__an</span>)\n                ._M_node;\n    std pair<std _Rb_tree_iterator<int>, bool>\n        pair<std _Rb_tree_iterator<int>, bool, true>(\n            &<span class=\"supfact\">v10</span>, &<span class=\"supfact\">__x</span>, &<span class=\"supfact\">__y</span>);\n  } else {\n    LOBYTE(<span class=\"supfact\">__an</span>._M_t) = Number;\n    std _Rb_tree_iterator<int> _Rb_tree_iterator(&<span class=\"supfact\">__x</span>,\n                                                 v3.first);\n    std pair<std _Rb_tree_iterator<int>, bool>\n        pair<std _Rb_tree_iterator<int>, bool, true>(\n            &<span class=\"supfact\">v10</span>, &<span class=\"supfact\">__x</span>,\n            (bool *)&<span class=\"supfact\">__an</span>);\n  }\n  return <span class=\"supfact\">v10</span>;\n}", "var": [{"name": "v11", "type": "__int64", "ref_name": "__x", "ref_type": "struct std::_Rb_tree_iterator<int> { std::_Rb_tree_iterator<int>::_Base_ptr _M_node; }"}, {"name": "v10", "type": "__int64", "ref_name": "__an", "ref_type": "struct std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int> >::_Alloc_node { std::_Rb_tree<int,int,std::_Identity<int>,std::less<int>,std::allocator<int> > * _M_t; }"}], "body_in_train": false}, {"repo_owner": "yuroc5390", "repo_name": "fuzz_target", "path": "yuroc5390/fuzz_target/20212b5dabe72bc57008a03ade4d16536f691816511a329ecc08f14b17e35e2f", "path_in_repo": "yuroc5390/fuzz_target/qemu_mode/qemu-2.10.0/block/qcow2-cache.o", "objdump": "000000000000011c <_nocheck__trace_qcow2_cache_get_replace_entry>:\n     11c:\t55                   \tpush   %rbp\n     11d:\t48 89 e5             \tmov    %rsp,%rbp\n     120:\t41 54                \tpush   %r12\n     122:\t53                   \tpush   %rbx\n     123:\t48 83 ec 30          \tsub    $0x30,%rsp\n     127:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     12b:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n     12e:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n     131:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     138:\t00 00 \n     13a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     13e:\t31 c0                \txor    %eax,%eax\n     140:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 146 <_nocheck__trace_qcow2_cache_get_replace_entry+0x2a>\n     146:\t85 c0                \ttest   %eax,%eax\n     148:\t0f 95 c0             \tsetne  %al\n     14b:\t0f b6 c0             \tmovzbl %al,%eax\n     14e:\t48 85 c0             \ttest   %rax,%rax\n     151:\t74 74                \tje     1c7 <_nocheck__trace_qcow2_cache_get_replace_entry+0xab>\n     153:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 15a <_nocheck__trace_qcow2_cache_get_replace_entry+0x3e>\n     15a:\t66 85 c0             \ttest   %ax,%ax\n     15d:\t74 68                \tje     1c7 <_nocheck__trace_qcow2_cache_get_replace_entry+0xab>\n     15f:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     163:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     168:\t48 89 c7             \tmov    %rax,%rdi\n     16b:\te8 00 00 00 00       \tcallq  170 <_nocheck__trace_qcow2_cache_get_replace_entry+0x54>\n     170:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     175:\te8 86 fe ff ff       \tcallq  0 <qemu_loglevel_mask>\n     17a:\t0f b6 c0             \tmovzbl %al,%eax\n     17d:\t48 85 c0             \ttest   %rax,%rax\n     180:\t74 45                \tje     1c7 <_nocheck__trace_qcow2_cache_get_replace_entry+0xab>\n     182:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     186:\t49 89 c4             \tmov    %rax,%r12\n     189:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     18d:\t48 89 c3             \tmov    %rax,%rbx\n     190:\te8 00 00 00 00       \tcallq  195 <_nocheck__trace_qcow2_cache_get_replace_entry+0x79>\n     195:\t89 c6                \tmov    %eax,%esi\n     197:\t8b 4d c4             \tmov    -0x3c(%rbp),%ecx\n     19a:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     19e:\t48 83 ec 08          \tsub    $0x8,%rsp\n     1a2:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n     1a5:\t50                   \tpush   %rax\n     1a6:\t41 89 c9             \tmov    %ecx,%r9d\n     1a9:\t49 89 d0             \tmov    %rdx,%r8\n     1ac:\t4c 89 e1             \tmov    %r12,%rcx\n     1af:\t48 89 da             \tmov    %rbx,%rdx\n     1b2:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 1b9 <_nocheck__trace_qcow2_cache_get_replace_entry+0x9d>\n     1b9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     1be:\te8 00 00 00 00       \tcallq  1c3 <_nocheck__trace_qcow2_cache_get_replace_entry+0xa7>\n     1c3:\t48 83 c4 10          \tadd    $0x10,%rsp\n     1c7:\t90                   \tnop\n     1c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     1cc:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     1d3:\t00 00 \n     1d5:\t74 05                \tje     1dc <_nocheck__trace_qcow2_cache_get_replace_entry+0xc0>\n     1d7:\te8 00 00 00 00       \tcallq  1dc <_nocheck__trace_qcow2_cache_get_replace_entry+0xc0>\n     1dc:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     1e0:\t5b                   \tpop    %rbx\n     1e1:\t41 5c                \tpop    %r12\n     1e3:\t5d                   \tpop    %rbp\n     1e4:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_qcow2_cache_get_replace_entry(\n    const void *a1, unsigned int a2, unsigned int a3) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_QCOW2_CACHE_GET_REPLACE_ENTRY_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v3 = <span class=\"supfact\">tv</span>.tv_usec;\n        v4 = <span class=\"supfact\">tv</span>.tv_sec;\n        v5 = getpid();\n        qemu_log(String, v5, v4, v3, a1, a2, a3);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl nocheck__trace_qcow2_cache_get_replace_entry(void *co, int c,\n                                                          int i) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_QCOW2_CACHE_GET_REPLACE_ENTRY_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v3 = <span class=\"supfact\">_now</span>.tv_usec;\n      v4 = <span class=\"supfact\">_now</span>.tv_sec;\n      v5 = getpid();\n      qemu_log(String, v5, v4, v3, co, (unsigned int)c, (unsigned int)i);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "SecureAuthCorp", "repo_name": "pycodin", "path": "SecureAuthCorp/pycodin/fa4808635cbd0bb4d49e08eb1bbb0965d61915a75cb83a268b4765cbb2c29731", "path_in_repo": "SecureAuthCorp/pycodin/qemu-0.12.3/qemu-img", "objdump": "0000000000410ea6 <paio_init>:\n  410ea6:\t55                   \tpush   %rbp\n  410ea7:\t48 89 e5             \tmov    %rsp,%rbp\n  410eaa:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n  410eb1:\t48 8b 05 f8 56 03 00 \tmov    0x356f8(%rip),%rax        # 4465b0 <posix_aio_state>\n  410eb8:\t48 85 c0             \ttest   %rax,%rax\n  410ebb:\t74 0a                \tje     410ec7 <paio_init+0x21>\n  410ebd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  410ec2:\te9 7e 01 00 00       \tjmpq   411045 <paio_init+0x19f>\n  410ec7:\tbf 10 00 00 00       \tmov    $0x10,%edi\n  410ecc:\te8 be 55 ff ff       \tcallq  40648f <qemu_malloc>\n  410ed1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  410ed5:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  410edc:\t48 83 c0 08          \tadd    $0x8,%rax\n  410ee0:\t48 89 c7             \tmov    %rax,%rdi\n  410ee3:\te8 68 23 ff ff       \tcallq  403250 <sigfillset@plt>\n  410ee8:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n  410eef:\t48 c7 85 50 ff ff ff \tmovq   $0x410b56,-0xb0(%rbp)\n  410ef6:\t56 0b 41 00 \n  410efa:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  410f01:\tba 00 00 00 00       \tmov    $0x0,%edx\n  410f06:\t48 89 c6             \tmov    %rax,%rsi\n  410f09:\tbf 0c 00 00 00       \tmov    $0xc,%edi\n  410f0e:\te8 ad 25 ff ff       \tcallq  4034c0 <sigaction@plt>\n  410f13:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410f17:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n  410f1e:\t00 \n  410f1f:\t48 8d 85 48 ff ff ff \tlea    -0xb8(%rbp),%rax\n  410f26:\t48 89 c7             \tmov    %rax,%rdi\n  410f29:\te8 e6 ee ff ff       \tcallq  40fe14 <qemu_pipe>\n  410f2e:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  410f31:\t75 28                \tjne    410f5b <paio_init+0xb5>\n  410f33:\t48 8b 05 e6 54 03 00 \tmov    0x354e6(%rip),%rax        # 446420 <stderr@@GLIBC_2.2.5>\n  410f3a:\t48 89 c1             \tmov    %rax,%rcx\n  410f3d:\tba 16 00 00 00       \tmov    $0x16,%edx\n  410f42:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  410f47:\tbf 45 47 43 00       \tmov    $0x434745,%edi\n  410f4c:\te8 ef 27 ff ff       \tcallq  403740 <fwrite@plt>\n  410f51:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  410f56:\te9 ea 00 00 00       \tjmpq   411045 <paio_init+0x19f>\n  410f5b:\t8b 95 48 ff ff ff    \tmov    -0xb8(%rbp),%edx\n  410f61:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410f65:\t89 10                \tmov    %edx,(%rax)\n  410f67:\t8b 95 4c ff ff ff    \tmov    -0xb4(%rbp),%edx\n  410f6d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410f71:\t89 50 04             \tmov    %edx,0x4(%rax)\n  410f74:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410f78:\t8b 00                \tmov    (%rax),%eax\n  410f7a:\tba 00 08 00 00       \tmov    $0x800,%edx\n  410f7f:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  410f84:\t89 c7                \tmov    %eax,%edi\n  410f86:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  410f8b:\te8 90 25 ff ff       \tcallq  403520 <fcntl64@plt>\n  410f90:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410f94:\t8b 40 04             \tmov    0x4(%rax),%eax\n  410f97:\tba 00 08 00 00       \tmov    $0x800,%edx\n  410f9c:\tbe 04 00 00 00       \tmov    $0x4,%esi\n  410fa1:\t89 c7                \tmov    %eax,%edi\n  410fa3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  410fa8:\te8 73 25 ff ff       \tcallq  403520 <fcntl64@plt>\n  410fad:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  410fb1:\t8b 00                \tmov    (%rax),%eax\n  410fb3:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  410fb7:\t49 89 d1             \tmov    %rdx,%r9\n  410fba:\t41 b8 91 09 41 00    \tmov    $0x410991,%r8d\n  410fc0:\tb9 33 0b 41 00       \tmov    $0x410b33,%ecx\n  410fc5:\tba 00 00 00 00       \tmov    $0x0,%edx\n  410fca:\tbe d2 0a 41 00       \tmov    $0x410ad2,%esi\n  410fcf:\t89 c7                \tmov    %eax,%edi\n  410fd1:\te8 07 c8 ff ff       \tcallq  40d7dd <qemu_aio_set_fd_handler>\n  410fd6:\tbf 60 65 44 00       \tmov    $0x446560,%edi\n  410fdb:\te8 e0 26 ff ff       \tcallq  4036c0 <pthread_attr_init@plt>\n  410fe0:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  410fe3:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  410fe7:\t74 0f                \tje     410ff8 <paio_init+0x152>\n  410fe9:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  410fec:\tbe 5c 47 43 00       \tmov    $0x43475c,%esi\n  410ff1:\t89 c7                \tmov    %eax,%edi\n  410ff3:\te8 6a ef ff ff       \tcallq  40ff62 <die2>\n  410ff8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  410ffd:\tbf 60 65 44 00       \tmov    $0x446560,%edi\n  411002:\te8 89 28 ff ff       \tcallq  403890 <pthread_attr_setdetachstate@plt>\n  411007:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  41100a:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  41100e:\t74 0f                \tje     41101f <paio_init+0x179>\n  411010:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  411013:\tbe 6e 47 43 00       \tmov    $0x43476e,%esi\n  411018:\t89 c7                \tmov    %eax,%edi\n  41101a:\te8 43 ef ff ff       \tcallq  40ff62 <die2>\n  41101f:\t48 c7 05 76 55 03 00 \tmovq   $0x0,0x35576(%rip)        # 4465a0 <request_list>\n  411026:\t00 00 00 00 \n  41102a:\t48 c7 05 73 55 03 00 \tmovq   $0x4465a0,0x35573(%rip)        # 4465a8 <request_list+0x8>\n  411031:\ta0 65 44 00 \n  411035:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  411039:\t48 89 05 70 55 03 00 \tmov    %rax,0x35570(%rip)        # 4465b0 <posix_aio_state>\n  411040:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  411045:\tc9                   \tleaveq \n  411046:\tc3                   \tretq   ", "code_s": "__int64 paio_init() {\n  __int64 result;\n  int <span class=\"supfact\">v1</span>[Number];\n  struct sigaction <span class=\"supfact\">v2</span>;\n  int <span class=\"supfact\">v3</span>;\n  __int64 <span class=\"supfact\">v4</span>;\n  if (posix_aio_state)\n    return Number L;\n  <span class=\"supfact\">v4</span> = qemu_malloc(Number);\n  sigfillset(&<span class=\"supfact\">v2</span>.sa_mask);\n  <span class=\"supfact\">v2</span>.sa_flags = Number;\n  <span class=\"supfact\">v2</span>.sa_handler = (__sighandler_t)aio_signal_handler;\n  sigaction(Number, &<span class=\"supfact\">v2</span>, Number L);\n  *(_QWORD *)(<span class=\"supfact\">v4</span> + Number) = Number L;\n  if ((unsigned int)qemu_pipe(<span class=\"supfact\">v1</span>) == Number) {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  } else {\n    *(_DWORD *)<span class=\"supfact\">v4</span> = <span class=\"supfact\">v1</span>[Number];\n    *(_DWORD *)(<span class=\"supfact\">v4</span> + Number) = <span class=\"supfact\">v1</span>[Number];\n    fcntl64();\n    fcntl64();\n    qemu_aio_set_fd_handler(\n        *(_DWORD *)<span class=\"supfact\">v4</span>, (__int64)posix_aio_read, Number L,\n        (__int64)posix_aio_flush, (__int64)posix_aio_process_queue,\n        <span class=\"supfact\">v4</span>);\n    <span class=\"supfact\">v3</span> = pthread_attr_init(&attr);\n    if (<span class=\"supfact\">v3</span>)\n      die2(<span class=\"supfact\">v3</span>, String);\n    <span class=\"supfact\">v3</span> = pthread_attr_setdetachstate(&attr, Number);\n    if (<span class=\"supfact\">v3</span>)\n      die2(<span class=\"supfact\">v3</span>, String);\n    request_list = Number L;\n    qword_4465A8 = (__int64)&request_list;\n    posix_aio_state = <span class=\"supfact\">v4</span>;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl paio_init() {\n  int result;\n  int <span class=\"supfact\">fds</span>[Number];\n  sigaction <span class=\"supfact\">act</span>;\n  int <span class=\"supfact\">ret</span>;\n  PosixAioState_0 *<span class=\"supfact\">s</span>;\n  if (posix_aio_state)\n    return Number;\n  <span class=\"supfact\">s</span> = (PosixAioState_0 *)qemu_malloc(Number);\n  sigfillset(&<span class=\"supfact\">act</span>.sa_mask);\n  <span class=\"supfact\">act</span>.sa_flags = Number;\n  <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)aio_signal_handler;\n  sigaction(Number, &<span class=\"supfact\">act</span>, Number L);\n  <span class=\"supfact\">s</span>->first_aio = Number L;\n  if (qemu_pipe(<span class=\"supfact\">fds</span>) == Number) {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  } else {\n    <span class=\"supfact\">s</span>->rfd = <span class=\"supfact\">fds</span>[Number];\n    <span class=\"supfact\">s</span>->wfd = <span class=\"supfact\">fds</span>[Number];\n    fcntl64();\n    fcntl64();\n    qemu_aio_set_fd_handler(<span class=\"supfact\">s</span>->rfd, (IOHandler *)posix_aio_read,\n                            Number L, (AioFlushHandler *)posix_aio_flush,\n                            (AioProcessQueue *)posix_aio_process_queue,\n                            <span class=\"supfact\">s</span>);\n    <span class=\"supfact\">ret</span> = pthread_attr_init(&attr);\n    if (<span class=\"supfact\">ret</span>)\n      die2(<span class=\"supfact\">ret</span>, String);\n    <span class=\"supfact\">ret</span> = pthread_attr_setdetachstate(&attr, Number);\n    if (<span class=\"supfact\">ret</span>)\n      die2(<span class=\"supfact\">ret</span>, String);\n    request_list.tqh_first = Number L;\n    request_list.tqh_last = (qemu_paiocb **)&request_list;\n    posix_aio_state = <span class=\"supfact\">s</span>;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v2", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": false}, {"repo_owner": "lxl1140989", "repo_name": "6291-xl", "path": "lxl1140989/6291-xl/8a565e1eeb6e0851c3ea2eec820372e9b38289077077758397b2ccca92cf3acf", "path_in_repo": "lxl1140989/6291-xl/package/libnassdk/src/Demo/util/du_common.o", "objdump": "0000000000001262 <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:\n    1262:\t55                   \tpush   %rbp\n    1263:\t48 89 e5             \tmov    %rsp,%rbp\n    1266:\t53                   \tpush   %rbx\n    1267:\t48 83 ec 58          \tsub    $0x58,%rsp\n    126b:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n    126f:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n    1273:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1278:\te8 00 00 00 00       \tcallq  127d <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b>\n    127d:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    1281:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n    1285:\t48 89 c7             \tmov    %rax,%rdi\n    1288:\te8 00 00 00 00       \tcallq  128d <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2b>\n    128d:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    1291:\t48 89 c7             \tmov    %rax,%rdi\n    1294:\te8 00 00 00 00       \tcallq  1299 <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x37>\n    1299:\t48 89 c1             \tmov    %rax,%rcx\n    129c:\t48 8d 55 ef          \tlea    -0x11(%rbp),%rdx\n    12a0:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    12a4:\t48 89 ce             \tmov    %rcx,%rsi\n    12a7:\t48 89 c7             \tmov    %rax,%rdi\n    12aa:\te8 00 00 00 00       \tcallq  12af <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4d>\n    12af:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    12b3:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    12b7:\t48 8d 4d b8          \tlea    -0x48(%rbp),%rcx\n    12bb:\t48 89 ce             \tmov    %rcx,%rsi\n    12be:\t48 89 c7             \tmov    %rax,%rdi\n    12c1:\te8 00 00 00 00       \tcallq  12c6 <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x64>\n    12c6:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    12ca:\t48 89 c7             \tmov    %rax,%rdi\n    12cd:\te8 00 00 00 00       \tcallq  12d2 <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x70>\n    12d2:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n    12d6:\t48 89 c7             \tmov    %rax,%rdi\n    12d9:\te8 00 00 00 00       \tcallq  12de <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c>\n    12de:\teb 2b                \tjmp    130b <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa9>\n    12e0:\t48 89 c3             \tmov    %rax,%rbx\n    12e3:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    12e7:\t48 89 c7             \tmov    %rax,%rdi\n    12ea:\te8 00 00 00 00       \tcallq  12ef <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8d>\n    12ef:\teb 03                \tjmp    12f4 <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x92>\n    12f1:\t48 89 c3             \tmov    %rax,%rbx\n    12f4:\t48 8d 45 ef          \tlea    -0x11(%rbp),%rax\n    12f8:\t48 89 c7             \tmov    %rax,%rdi\n    12fb:\te8 00 00 00 00       \tcallq  1300 <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>\n    1300:\t48 89 d8             \tmov    %rbx,%rax\n    1303:\t48 89 c7             \tmov    %rax,%rdi\n    1306:\te8 00 00 00 00       \tcallq  130b <_ZN9DU_Common7now2strERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa9>\n    130b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    130f:\t48 83 c4 58          \tadd    $0x58,%rsp\n    1313:\t5b                   \tpop    %rbx\n    1314:\t5d                   \tpop    %rbp\n    1315:\tc3                   \tretq   ", "code_s": "__int64 __fastcall DU_Common now2str(__int64 a1, __int64 a2) {\n  __int64 v2;\n  time_t <span class=\"supfact\">v4</span>;\n  char <span class=\"supfact\">v5</span>[Number];\n  char <span class=\"supfact\">v6</span>[Number];\n  <span class=\"supfact\">v4</span> = time(Number L);\n  std allocator<char> allocator(<span class=\"supfact\">v6</span>);\n  v2 =\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          c_str(a2);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(<span class=\"supfact\">v5</span>, v2, <span class=\"supfact\">v6</span>);\n  DU_Common tm2str(a1, &<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v5</span>);\n  std allocator<char> ~allocator(<span class=\"supfact\">v6</span>);\n  return a1;\n}", "code_t": "std string *__cdecl DU_Common now2str(std string *retstr,\n                                      const std string *sFormat) {\n  __int64 v2;\n  time_t <span class=\"supfact\">t</span>;\n  std string <span class=\"supfact\">v5</span>;\n  char <span class=\"supfact\">v6</span>[Number];\n  <span class=\"supfact\">t</span> = time(Number L);\n  std allocator<char> allocator(<span class=\"supfact\">v6</span>);\n  v2 =\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          c_str(sFormat);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(&<span class=\"supfact\">v5</span>, v2, <span class=\"supfact\">v6</span>);\n  DU_Common tm2str(retstr, &<span class=\"supfact\">t</span>, &<span class=\"supfact\">v5</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">v5</span>);\n  std allocator<char> ~allocator(<span class=\"supfact\">v6</span>);\n  return retstr;\n}", "var": [{"name": "v5", "type": "char[47]", "ref_name": "v5", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/3da554e7be727d06ab7f4e2330fe40c06e49dc1c481fc3ec5a772104aacc182a", "path_in_repo": "XanClic/qemu//hw/scsi/megasas.o", "objdump": "0000000000000844 <_nocheck__trace_megasas_init_firmware>:\n     844:\t55                   \tpush   %rbp\n     845:\t48 89 e5             \tmov    %rsp,%rbp\n     848:\t41 54                \tpush   %r12\n     84a:\t53                   \tpush   %rbx\n     84b:\t48 83 ec 30          \tsub    $0x30,%rsp\n     84f:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     853:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     85a:\t00 00 \n     85c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     860:\t31 c0                \txor    %eax,%eax\n     862:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 868 <_nocheck__trace_megasas_init_firmware+0x24>\n     868:\t85 c0                \ttest   %eax,%eax\n     86a:\t0f 95 c0             \tsetne  %al\n     86d:\t0f b6 c0             \tmovzbl %al,%eax\n     870:\t48 85 c0             \ttest   %rax,%rax\n     873:\t74 5e                \tje     8d3 <_nocheck__trace_megasas_init_firmware+0x8f>\n     875:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 87c <_nocheck__trace_megasas_init_firmware+0x38>\n     87c:\t66 85 c0             \ttest   %ax,%ax\n     87f:\t74 52                \tje     8d3 <_nocheck__trace_megasas_init_firmware+0x8f>\n     881:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     886:\te8 a2 ff ff ff       \tcallq  82d <qemu_loglevel_mask>\n     88b:\t84 c0                \ttest   %al,%al\n     88d:\t74 44                \tje     8d3 <_nocheck__trace_megasas_init_firmware+0x8f>\n     88f:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     893:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     898:\t48 89 c7             \tmov    %rax,%rdi\n     89b:\te8 00 00 00 00       \tcallq  8a0 <_nocheck__trace_megasas_init_firmware+0x5c>\n     8a0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     8a4:\t49 89 c4             \tmov    %rax,%r12\n     8a7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     8ab:\t48 89 c3             \tmov    %rax,%rbx\n     8ae:\te8 00 00 00 00       \tcallq  8b3 <_nocheck__trace_megasas_init_firmware+0x6f>\n     8b3:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     8b7:\t49 89 d0             \tmov    %rdx,%r8\n     8ba:\t4c 89 e1             \tmov    %r12,%rcx\n     8bd:\t48 89 da             \tmov    %rbx,%rdx\n     8c0:\t89 c6                \tmov    %eax,%esi\n     8c2:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 8c9 <_nocheck__trace_megasas_init_firmware+0x85>\n     8c9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     8ce:\te8 00 00 00 00       \tcallq  8d3 <_nocheck__trace_megasas_init_firmware+0x8f>\n     8d3:\t90                   \tnop\n     8d4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8d8:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     8df:\t00 00 \n     8e1:\t74 05                \tje     8e8 <_nocheck__trace_megasas_init_firmware+0xa4>\n     8e3:\te8 00 00 00 00       \tcallq  8e8 <_nocheck__trace_megasas_init_firmware+0xa4>\n     8e8:\t48 83 c4 30          \tadd    $0x30,%rsp\n     8ec:\t5b                   \tpop    %rbx\n     8ed:\t41 5c                \tpop    %r12\n     8ef:\t5d                   \tpop    %rbp\n     8f0:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_megasas_init_firmware(__int64 a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_INIT_FIRMWARE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v1 = <span class=\"supfact\">tv</span>.tv_usec;\n    v2 = <span class=\"supfact\">tv</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, a1);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl nocheck__trace_megasas_init_firmware(uint64_t pa) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_MEGASAS_INIT_FIRMWARE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v1 = <span class=\"supfact\">_now</span>.tv_usec;\n    v2 = <span class=\"supfact\">_now</span>.tv_sec;\n    v3 = qemu_get_thread_id();\n    qemu_log(String, v3, v2, v1, pa);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/a6c0476d37fab0a2016b706bb595a9db57bad22bae2083133c2d1eeb6cb12f1c", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_events_584896b4.o", "objdump": "", "code_s": "void __fastcall juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n    LeakCounter ~LeakCounter(void *a1) {\n  __int64 v1;\n  juce ChildProcessMaster Connection *v2;\n  __int64 v3;\n  const char *v4;\n  int v5;\n  char <span class=\"supfact\">v6</span>[Number];\n  if (*(int *)a1 > Number) {\n    juce String String((juce String *)<span class=\"supfact\">v6</span>);\n    v1 = juce operator<<(<span class=\"supfact\">v6</span>, String);\n    v2 = (juce ChildProcessMaster Connection *)juce operator<<(\n        v1, *(unsigned int *)a1);\n    v3 = juce operator<<(v2, String);\n    v4 = juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n        getLeakedObjectClassName(v2);\n    juce operator<<(v3, v4);\n    juce Logger outputDebugString((juce Logger *)<span class=\"supfact\">v6</span>,\n                                  (const juce String *)v4);\n    juce String ~String((juce String *)<span class=\"supfact\">v6</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_5B + Number, v5);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  juce Atomic<int> ~Atomic();\n}", "code_t": "void __cdecl juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n    LeakCounter ~LeakCounter(\n        juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n            LeakCounter *const this) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  const char *v4;\n  int v5;\n  juce String <span class=\"supfact\">tempDbgBuf</span>;\n  if (this->numObjects.value > Number) {\n    juce String String(&<span class=\"supfact\">tempDbgBuf</span>);\n    v1 = juce operator<<(&<span class=\"supfact\">tempDbgBuf</span>, String);\n    v2 = juce operator<<(v1, (unsigned int)this->numObjects.value);\n    v3 = juce operator<<(v2, String);\n    v4 = juce LeakedObjectDetector<juce ChildProcessMaster Connection>\n    getLeakedObjectClassName();\n    juce operator<<(v3, v4);\n    juce Logger outputDebugString((juce Logger *)&<span class=\"supfact\">tempDbgBuf</span>,\n                                  (const juce String *)v4);\n    juce String ~String(&<span class=\"supfact\">tempDbgBuf</span>);\n    juce logAssertion((juce *)String, (const char *)&loc_5B + Number, v5);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  juce Atomic<int> ~Atomic(&this->numObjects);\n}", "var": [{"name": "v6", "type": "struct juce::String { juce::String::CharPointerType text; }", "ref_name": "tempDbgBuf", "ref_type": "struct juce::String { juce::String::CharPointerType text; }"}], "body_in_train": false}, {"repo_owner": "jordansissel", "repo_name": "tmux", "path": "jordansissel/tmux/8c54c58ec5c6c45af38e829f1a79d944af77d1a77275700b93d321f9e256a16e", "path_in_repo": "jordansissel/tmux/tags/TMUX_1_0/tmux", "objdump": "000000000041f44a <set_window_names>:\n  41f44a:\t55                   \tpush   %rbp\n  41f44b:\t48 89 e5             \tmov    %rsp,%rbp\n  41f44e:\t48 83 ec 40          \tsub    $0x40,%rsp\n  41f452:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  41f456:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  41f45b:\t48 89 c7             \tmov    %rax,%rdi\n  41f45e:\te8 4d 3e fe ff       \tcallq  4032b0 <gettimeofday@plt>\n  41f463:\t85 c0                \ttest   %eax,%eax\n  41f465:\t74 19                \tje     41f480 <set_window_names+0x36>\n  41f467:\tba 80 70 44 00       \tmov    $0x447080,%edx\n  41f46c:\tbe c0 70 44 00       \tmov    $0x4470c0,%esi\n  41f471:\tbf 8d 70 44 00       \tmov    $0x44708d,%edi\n  41f476:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41f47b:\te8 f6 f5 ff ff       \tcallq  41ea76 <log_fatal>\n  41f480:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  41f487:\te9 5d 02 00 00       \tjmpq   41f6e9 <set_window_names+0x29f>\n  41f48c:\t48 8b 05 8d ce 03 00 \tmov    0x3ce8d(%rip),%rax        # 45c320 <windows>\n  41f493:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  41f496:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  41f49a:\t48 01 d0             \tadd    %rdx,%rax\n  41f49d:\t48 8b 00             \tmov    (%rax),%rax\n  41f4a0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  41f4a4:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n  41f4a9:\t0f 84 2f 02 00 00    \tje     41f6de <set_window_names+0x294>\n  41f4af:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f4b3:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  41f4b7:\t48 85 c0             \ttest   %rax,%rax\n  41f4ba:\t0f 84 1e 02 00 00    \tje     41f6de <set_window_names+0x294>\n  41f4c0:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  41f4c4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f4c8:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  41f4cc:\t48 39 c2             \tcmp    %rax,%rdx\n  41f4cf:\t75 14                \tjne    41f4e5 <set_window_names+0x9b>\n  41f4d1:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  41f4d5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f4d9:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  41f4dd:\t48 39 c2             \tcmp    %rax,%rdx\n  41f4e0:\t0f 9c c0             \tsetl   %al\n  41f4e3:\teb 12                \tjmp    41f4f7 <set_window_names+0xad>\n  41f4e5:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  41f4e9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f4ed:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  41f4f1:\t48 39 c2             \tcmp    %rax,%rdx\n  41f4f4:\t0f 9c c0             \tsetl   %al\n  41f4f7:\t84 c0                \ttest   %al,%al\n  41f4f9:\t0f 85 e2 01 00 00    \tjne    41f6e1 <set_window_names+0x297>\n  41f4ff:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f503:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n  41f507:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41f50b:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  41f50f:\t48 89 01             \tmov    %rax,(%rcx)\n  41f512:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n  41f516:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n  41f51d:\t00 \n  41f51e:\t48 c7 45 c8 20 a1 07 \tmovq   $0x7a120,-0x38(%rbp)\n  41f525:\t00 \n  41f526:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f52a:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  41f52e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  41f532:\t48 01 c2             \tadd    %rax,%rdx\n  41f535:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f539:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  41f53d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f541:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  41f545:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41f549:\t48 01 c2             \tadd    %rax,%rdx\n  41f54c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f550:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  41f554:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f558:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  41f55c:\t48 3d 3f 42 0f 00    \tcmp    $0xf423f,%rax\n  41f562:\t7e 2b                \tjle    41f58f <set_window_names+0x145>\n  41f564:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f568:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  41f56c:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n  41f570:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f574:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n  41f578:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f57c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  41f580:\t48 8d 90 c0 bd f0 ff \tlea    -0xf4240(%rax),%rdx\n  41f587:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f58b:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  41f58f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f593:\t48 83 c0 50          \tadd    $0x50,%rax\n  41f597:\tbe 94 70 44 00       \tmov    $0x447094,%esi\n  41f59c:\t48 89 c7             \tmov    %rax,%rdi\n  41f59f:\te8 bb 13 00 00       \tcallq  42095f <options_get_number>\n  41f5a4:\t48 85 c0             \ttest   %rax,%rax\n  41f5a7:\t0f 84 37 01 00 00    \tje     41f6e4 <set_window_names+0x29a>\n  41f5ad:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f5b1:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  41f5b5:\t48 8b 90 18 01 00 00 \tmov    0x118(%rax),%rdx\n  41f5bc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f5c0:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  41f5c4:\t48 05 20 01 00 00    \tadd    $0x120,%rax\n  41f5ca:\t48 39 c2             \tcmp    %rax,%rdx\n  41f5cd:\t74 0a                \tje     41f5d9 <set_window_names+0x18f>\n  41f5cf:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  41f5d6:\t00 \n  41f5d7:\teb 25                \tjmp    41f5fe <set_window_names+0x1b4>\n  41f5d9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f5dd:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  41f5e1:\t48 8d 50 48          \tlea    0x48(%rax),%rdx\n  41f5e5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f5e9:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  41f5ed:\t8b 40 44             \tmov    0x44(%rax),%eax\n  41f5f0:\t48 89 d6             \tmov    %rdx,%rsi\n  41f5f3:\t89 c7                \tmov    %eax,%edi\n  41f5f5:\te8 81 e0 01 00       \tcallq  43d67b <osdep_get_name>\n  41f5fa:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  41f5fe:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  41f603:\t75 12                \tjne    41f617 <set_window_names+0x1cd>\n  41f605:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f609:\t48 89 c7             \tmov    %rax,%rdi\n  41f60c:\te8 eb 00 00 00       \tcallq  41f6fc <default_window_name>\n  41f611:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  41f615:\teb 77                \tjmp    41f68e <set_window_names+0x244>\n  41f617:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f61b:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  41f61f:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  41f623:\t48 85 c0             \ttest   %rax,%rax\n  41f626:\t74 4a                \tje     41f672 <set_window_names+0x228>\n  41f628:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f62c:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  41f630:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  41f634:\t0f b6 00             \tmovzbl (%rax),%eax\n  41f637:\t84 c0                \ttest   %al,%al\n  41f639:\t75 37                \tjne    41f672 <set_window_names+0x228>\n  41f63b:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  41f640:\t74 30                \tje     41f672 <set_window_names+0x228>\n  41f642:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41f646:\t0f b6 00             \tmovzbl (%rax),%eax\n  41f649:\t3c 2d                \tcmp    $0x2d,%al\n  41f64b:\t75 25                \tjne    41f672 <set_window_names+0x228>\n  41f64d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41f651:\t48 83 c0 01          \tadd    $0x1,%rax\n  41f655:\t0f b6 00             \tmovzbl (%rax),%eax\n  41f658:\t84 c0                \ttest   %al,%al\n  41f65a:\t74 16                \tje     41f672 <set_window_names+0x228>\n  41f65c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41f660:\t48 83 c0 01          \tadd    $0x1,%rax\n  41f664:\t48 89 c7             \tmov    %rax,%rdi\n  41f667:\te8 1a 01 00 00       \tcallq  41f786 <parse_window_name>\n  41f66c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  41f670:\teb 10                \tjmp    41f682 <set_window_names+0x238>\n  41f672:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41f676:\t48 89 c7             \tmov    %rax,%rdi\n  41f679:\te8 08 01 00 00       \tcallq  41f786 <parse_window_name>\n  41f67e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  41f682:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41f686:\t48 89 c7             \tmov    %rax,%rdi\n  41f689:\te8 6d dd 01 00       \tcallq  43d3fb <xfree>\n  41f68e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f692:\t48 8b 10             \tmov    (%rax),%rdx\n  41f695:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41f699:\t48 89 d6             \tmov    %rdx,%rsi\n  41f69c:\t48 89 c7             \tmov    %rax,%rdi\n  41f69f:\te8 0c 3d fe ff       \tcallq  4033b0 <strcmp@plt>\n  41f6a4:\t85 c0                \ttest   %eax,%eax\n  41f6a6:\t75 0e                \tjne    41f6b6 <set_window_names+0x26c>\n  41f6a8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41f6ac:\t48 89 c7             \tmov    %rax,%rdi\n  41f6af:\te8 47 dd 01 00       \tcallq  43d3fb <xfree>\n  41f6b4:\teb 2f                \tjmp    41f6e5 <set_window_names+0x29b>\n  41f6b6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f6ba:\t48 8b 00             \tmov    (%rax),%rax\n  41f6bd:\t48 89 c7             \tmov    %rax,%rdi\n  41f6c0:\te8 36 dd 01 00       \tcallq  43d3fb <xfree>\n  41f6c5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f6c9:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  41f6cd:\t48 89 10             \tmov    %rdx,(%rax)\n  41f6d0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41f6d4:\t48 89 c7             \tmov    %rax,%rdi\n  41f6d7:\te8 d4 5a 00 00       \tcallq  4251b0 <server_status_window>\n  41f6dc:\teb 07                \tjmp    41f6e5 <set_window_names+0x29b>\n  41f6de:\t90                   \tnop\n  41f6df:\teb 04                \tjmp    41f6e5 <set_window_names+0x29b>\n  41f6e1:\t90                   \tnop\n  41f6e2:\teb 01                \tjmp    41f6e5 <set_window_names+0x29b>\n  41f6e4:\t90                   \tnop\n  41f6e5:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  41f6e9:\t8b 05 39 cc 03 00    \tmov    0x3cc39(%rip),%eax        # 45c328 <windows+0x8>\n  41f6ef:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n  41f6f2:\t0f 82 94 fd ff ff    \tjb     41f48c <set_window_names+0x42>\n  41f6f8:\t90                   \tnop\n  41f6f9:\t90                   \tnop\n  41f6fa:\tc9                   \tleaveq \n  41f6fb:\tc3                   \tretq   ", "code_s": "__int64 set_window_names() {\n  __int64 v0;\n  __int64 v1;\n  __int64 v2;\n  _QWORD *v4;\n  __suseconds_t v5;\n  __int64 result;\n  struct timeval <span class=\"supfact\">tv</span>;\n  char **<span class=\"supfact\">v8</span>;\n  char *<span class=\"supfact\">s1</span>;\n  _BYTE *<span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  if (gettimeofday(&<span class=\"supfact\">tv</span>, Number L))\n    log_fatal(String, (__int64)String, (__int64)String, v0, v1, v2);\n  for (<span class=\"supfact\">i</span> = Number;; ++<span class=\"supfact\">i</span>) {\n    result = (unsigned int)dword_45C328;\n    if (<span class=\"supfact\">i</span> >= dword_45C328)\n      break;\n    <span class=\"supfact\">v8</span> = *(char ***)(Number L * <span class=\"supfact\">i</span> + windows);\n    if (<span class=\"supfact\">v8</span> && <span class=\"supfact\">v8</span>[Number] &&\n        !((char *)<span class=\"supfact\">tv</span>.tv_sec == <span class=\"supfact\">v8</span>[Number]\n              ? <span class=\"supfact\">tv</span>.tv_usec < (__int64)<span class=\"supfact\">v8</span>[Number]\n              : <span class=\"supfact\">tv</span>.tv_sec <\n                    (__int64)<span class=\"supfact\">v8</span>[Number])) {\n      v4 = <span class=\"supfact\">v8</span> + Number;\n      v5 = <span class=\"supfact\">tv</span>.tv_usec;\n      <span class=\"supfact\">v8</span>[Number] = (char *)<span class=\"supfact\">tv</span>.tv_sec;\n      v4[Number] = v5;\n      <span class=\"supfact\">v8</span>[Number] = <span class=\"supfact\">v8</span>[Number];\n      <span class=\"supfact\">v8</span>[Number] += Number;\n      if ((__int64)<span class=\"supfact\">v8</span>[Number] > Number) {\n        ++<span class=\"supfact\">v8</span>[Number];\n        <span class=\"supfact\">v8</span>[Number] -= Number;\n      }\n      if (options_get_number(<span class=\"supfact\">v8</span> + Number, String)) {\n        if (*((char **)<span class=\"supfact\">v8</span>[Number] + Number) ==\n            <span class=\"supfact\">v8</span>[Number] + Number)\n          <span class=\"supfact\">v10</span> = (_BYTE *)osdep_get_name(\n              *((unsigned int *)<span class=\"supfact\">v8</span>[Number] + Number),\n              <span class=\"supfact\">v8</span>[Number] + Number);\n        else\n          <span class=\"supfact\">v10</span> = Number L;\n        if (<span class=\"supfact\">v10</span>) {\n          if (*((_QWORD *)<span class=\"supfact\">v8</span>[Number] + Number) &&\n              !**((_BYTE **)<span class=\"supfact\">v8</span>[Number] + Number) &&\n              *<span class=\"supfact\">v10</span> == Number && <span class=\"supfact\">v10</span>[Number])\n            <span class=\"supfact\">s1</span> =\n                (char *)parse_window_name(<span class=\"supfact\">v10</span> + Number);\n          else\n            <span class=\"supfact\">s1</span> = (char *)parse_window_name(<span class=\"supfact\">v10</span>);\n          xfree(<span class=\"supfact\">v10</span>);\n        } else {\n          <span class=\"supfact\">s1</span> = (char *)default_window_name(<span class=\"supfact\">v8</span>);\n        }\n        if (!strcmp(<span class=\"supfact\">s1</span>, *<span class=\"supfact\">v8</span>)) {\n          xfree(<span class=\"supfact\">s1</span>);\n        } else {\n          xfree(*<span class=\"supfact\">v8</span>);\n          *<span class=\"supfact\">v8</span> = <span class=\"supfact\">s1</span>;\n          server_status_window(<span class=\"supfact\">v8</span>);\n        }\n      }\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl set_window_names() {\n  timeval *v1;\n  __suseconds_t v2;\n  timeval <span class=\"supfact\">tv</span>;\n  window *<span class=\"supfact\">w</span>;\n  char *<span class=\"supfact\">wname</span>;\n  char *<span class=\"supfact\">name</span>;\n  u_int <span class=\"supfact\">i</span>;\n  if (gettimeofday(&<span class=\"supfact\">tv</span>, Number L))\n    log_fatal(String, String, String);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < windows_0.num;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">w</span> = windows_0.list[<span class=\"supfact\">i</span>];\n    if (<span class=\"supfact\">w</span> && <span class=\"supfact\">w</span>->active &&\n        !(<span class=\"supfact\">tv</span>.tv_sec == <span class=\"supfact\">w</span>->name_timer.tv_sec\n              ? <span class=\"supfact\">tv</span>.tv_usec <\n                    <span class=\"supfact\">w</span>->name_timer.tv_usec\n              : <span class=\"supfact\">tv</span>.tv_sec <\n                    <span class=\"supfact\">w</span>->name_timer.tv_sec)) {\n      v1 = &<span class=\"supfact\">w</span>->name_timer;\n      v2 = <span class=\"supfact\">tv</span>.tv_usec;\n      <span class=\"supfact\">w</span>->name_timer.tv_sec = <span class=\"supfact\">tv</span>.tv_sec;\n      v1->tv_usec = v2;\n      <span class=\"supfact\">w</span>->name_timer.tv_sec =\n          <span class=\"supfact\">w</span>->name_timer.tv_sec;\n      <span class=\"supfact\">w</span>->name_timer.tv_usec += Number L;\n      if (<span class=\"supfact\">w</span>->name_timer.tv_usec > Number) {\n        ++<span class=\"supfact\">w</span>->name_timer.tv_sec;\n        <span class=\"supfact\">w</span>->name_timer.tv_usec -= Number L;\n      }\n      if (options_get_number(&<span class=\"supfact\">w</span>->options, String)) {\n        if (<span class=\"supfact\">w</span>->active->screen ==\n            &<span class=\"supfact\">w</span>->active->base)\n          <span class=\"supfact\">name</span> = osdep_get_name(<span class=\"supfact\">w</span>->active->fd,\n                                                <span class=\"supfact\">w</span>->active->tty);\n        else\n          <span class=\"supfact\">name</span> = Number L;\n        if (<span class=\"supfact\">name</span>) {\n          if (<span class=\"supfact\">w</span>->active->cmd &&\n              !*<span class=\"supfact\">w</span>->active->cmd &&\n              *<span class=\"supfact\">name</span> == Number && <span class=\"supfact\">name</span>[Number])\n            <span class=\"supfact\">wname</span> =\n                parse_window_name(<span class=\"supfact\">name</span> + Number);\n          else\n            <span class=\"supfact\">wname</span> = parse_window_name(<span class=\"supfact\">name</span>);\n          xfree(<span class=\"supfact\">name</span>);\n        } else {\n          <span class=\"supfact\">wname</span> = default_window_name(<span class=\"supfact\">w</span>);\n        }\n        if (!strcmp(<span class=\"supfact\">wname</span>,\n                    <span class=\"supfact\">w</span>-><span class=\"supfact\">name</span>)) {\n          xfree(<span class=\"supfact\">wname</span>);\n        } else {\n          xfree(<span class=\"supfact\">w</span>-><span class=\"supfact\">name</span>);\n          <span class=\"supfact\">w</span>-><span class=\"supfact\">name</span> = <span class=\"supfact\">wname</span>;\n          server_status_window(<span class=\"supfact\">w</span>);\n        }\n      }\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "christophrico", "repo_name": "OSU_CS372", "path": "christophrico/OSU_CS372/53ec4907d3247fe20a55422477a12e9aa51ca1a23530ce9e1466e8301fce0cc2", "path_in_repo": "christophrico/OSU_CS372/p2/ftserve", "objdump": "000000000040197a <fileValid>:\n  40197a:\t55                   \tpush   %rbp\n  40197b:\t48 89 e5             \tmov    %rsp,%rbp\n  40197e:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  401985:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  40198c:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  401993:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40199a:\t48 89 d6             \tmov    %rdx,%rsi\n  40199d:\t48 89 c7             \tmov    %rax,%rdi\n  4019a0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4019a5:\te8 96 05 00 00       \tcallq  401f40 <__stat>\n  4019aa:\t85 c0                \ttest   %eax,%eax\n  4019ac:\t74 09                \tje     4019b7 <fileValid+0x3d>\n  4019ae:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4019b5:\teb 07                \tjmp    4019be <fileValid+0x44>\n  4019b7:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  4019be:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4019c1:\tc9                   \tleaveq \n  4019c2:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall fileValid(char *a1) {\n  struct stat <span class=\"supfact\">v2</span>;\n  return (unsigned int)stat(a1, &<span class=\"supfact\">v2</span>) == Number;\n}", "code_t": "int __cdecl fileValid(char *fileName) {\n  stat <span class=\"supfact\">sb</span>;\n  return stat_0(fileName, &<span class=\"supfact\">sb</span>) == Number;\n}", "var": [{"name": "v2", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "sb", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/1e1e7cb97ebb80eac8dbb33680b64d176ff61b4eaa68df0fca22659194da5490", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/stateful_proxy", "objdump": "000000000041e3b5 <udp_destroy>:\n  41e3b5:\t55                   \tpush   %rbp\n  41e3b6:\t48 89 e5             \tmov    %rsp,%rbp\n  41e3b9:\t48 83 ec 40          \tsub    $0x40,%rsp\n  41e3bd:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  41e3c1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41e3c5:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  41e3c9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e3cd:\tc7 80 80 01 00 00 01 \tmovl   $0x1,0x180(%rax)\n  41e3d4:\t00 00 00 \n  41e3d7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e3db:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n  41e3e2:\t48 85 c0             \ttest   %rax,%rax\n  41e3e5:\t74 24                \tje     41e40b <udp_destroy+0x56>\n  41e3e7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e3eb:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n  41e3f2:\t48 89 c7             \tmov    %rax,%rdi\n  41e3f5:\te8 ff a2 03 00       \tcallq  4586f9 <pj_ioqueue_unregister>\n  41e3fa:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e3fe:\t48 c7 80 68 01 00 00 \tmovq   $0x0,0x168(%rax)\n  41e405:\t00 00 00 00 \n  41e409:\teb 43                \tjmp    41e44e <udp_destroy+0x99>\n  41e40b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e40f:\t48 8b 80 60 01 00 00 \tmov    0x160(%rax),%rax\n  41e416:\t48 85 c0             \ttest   %rax,%rax\n  41e419:\t74 33                \tje     41e44e <udp_destroy+0x99>\n  41e41b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e41f:\t48 8b 80 60 01 00 00 \tmov    0x160(%rax),%rax\n  41e426:\t48 83 f8 ff          \tcmp    $0xffffffffffffffff,%rax\n  41e42a:\t74 22                \tje     41e44e <udp_destroy+0x99>\n  41e42c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e430:\t48 8b 80 60 01 00 00 \tmov    0x160(%rax),%rax\n  41e437:\t48 89 c7             \tmov    %rax,%rdi\n  41e43a:\te8 32 e1 03 00       \tcallq  45c571 <pj_sock_close>\n  41e43f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e443:\t48 c7 80 60 01 00 00 \tmovq   $0xffffffffffffffff,0x160(%rax)\n  41e44a:\tff ff ff ff \n  41e44e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  41e455:\teb 42                \tjmp    41e499 <udp_destroy+0xe4>\n  41e457:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  41e45e:\t00 \n  41e45f:\t48 c7 45 d8 01 00 00 \tmovq   $0x1,-0x28(%rbp)\n  41e466:\t00 \n  41e467:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41e46b:\t48 8b 80 e0 00 00 00 \tmov    0xe0(%rax),%rax\n  41e472:\t48 89 c7             \tmov    %rax,%rdi\n  41e475:\te8 1b 52 ff ff       \tcallq  413695 <pjsip_endpt_get_ioqueue>\n  41e47a:\t48 89 c2             \tmov    %rax,%rdx\n  41e47d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  41e481:\t48 89 c6             \tmov    %rax,%rsi\n  41e484:\t48 89 d7             \tmov    %rdx,%rdi\n  41e487:\te8 c0 a6 03 00       \tcallq  458b4c <pj_ioqueue_poll>\n  41e48c:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  41e48f:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  41e493:\t74 24                \tje     41e4b9 <udp_destroy+0x104>\n  41e495:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  41e499:\t83 7d fc 31          \tcmpl   $0x31,-0x4(%rbp)\n  41e49d:\t7f 1b                \tjg     41e4ba <udp_destroy+0x105>\n  41e49f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e4a3:\t8b 90 70 01 00 00    \tmov    0x170(%rax),%edx\n  41e4a9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e4ad:\t8b 80 80 01 00 00    \tmov    0x180(%rax),%eax\n  41e4b3:\t39 c2                \tcmp    %eax,%edx\n  41e4b5:\t7d a0                \tjge    41e457 <udp_destroy+0xa2>\n  41e4b7:\teb 01                \tjmp    41e4ba <udp_destroy+0x105>\n  41e4b9:\t90                   \tnop\n  41e4ba:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e4be:\t48 8b 80 90 01 00 00 \tmov    0x190(%rax),%rax\n  41e4c5:\t48 85 c0             \ttest   %rax,%rax\n  41e4c8:\t74 2c                \tje     41e4f6 <udp_destroy+0x141>\n  41e4ca:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e4ce:\t48 8b 80 90 01 00 00 \tmov    0x190(%rax),%rax\n  41e4d5:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  41e4d9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e4dd:\t48 c7 80 90 01 00 00 \tmovq   $0x0,0x190(%rax)\n  41e4e4:\t00 00 00 00 \n  41e4e8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41e4ec:\t48 89 c7             \tmov    %rax,%rdi\n  41e4ef:\te8 ac 1d 04 00       \tcallq  4602a0 <pj_grp_lock_dec_ref>\n  41e4f4:\teb 0c                \tjmp    41e502 <udp_destroy+0x14d>\n  41e4f6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  41e4fa:\t48 89 c7             \tmov    %rax,%rdi\n  41e4fd:\te8 e2 fd ff ff       \tcallq  41e2e4 <udp_on_destroy>\n  41e502:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41e507:\tc9                   \tleaveq \n  41e508:\tc3                   \tretq   ", "code_s": "__int64 __fastcall udp_destroy(__int64 a1) {\n  __int64 v1;\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>;\n  __int64 <span class=\"supfact\">v6</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v6</span> = a1;\n  *(_DWORD *)(a1 + Number) = Number;\n  if (*(_QWORD *)(<span class=\"supfact\">v6</span> + Number)) {\n    pj_ioqueue_unregister(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number));\n    *(_QWORD *)(<span class=\"supfact\">v6</span> + Number) = Number L;\n  } else if (*(_QWORD *)(<span class=\"supfact\">v6</span> + Number) &&\n             *(_QWORD *)(<span class=\"supfact\">v6</span> + Number) != Number) {\n    pj_sock_close(*(_QWORD *)(<span class=\"supfact\">v6</span> + Number));\n    *(_QWORD *)(<span class=\"supfact\">v6</span> + Number) = Number;\n  }\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (*(_DWORD *)(<span class=\"supfact\">v6</span> + Number) <\n        *(_DWORD *)(<span class=\"supfact\">v6</span> + Number))\n      break;\n    <span class=\"supfact\">v3</span>[Number] = Number L;\n    <span class=\"supfact\">v3</span>[Number] = Number L;\n    v1 = pjsip_endpt_get_ioqueue(*(_QWORD *)(a1 + Number));\n    if (!(unsigned int)pj_ioqueue_poll(v1, <span class=\"supfact\">v3</span>))\n      break;\n  }\n  if (*(_QWORD *)(<span class=\"supfact\">v6</span> + Number)) {\n    <span class=\"supfact\">v4</span> = *(_QWORD *)(<span class=\"supfact\">v6</span> + Number);\n    *(_QWORD *)(<span class=\"supfact\">v6</span> + Number) = Number L;\n    pj_grp_lock_dec_ref(<span class=\"supfact\">v4</span>);\n  } else {\n    udp_on_destroy(<span class=\"supfact\">v6</span>);\n  }\n  return Number L;\n}", "code_t": "pj_status_t __cdecl udp_destroy(pjsip_transport_0 *transport) {\n  pj_ioqueue_t_0 *v1;\n  pj_time_val_0 <span class=\"supfact\">timeout</span>;\n  pj_grp_lock_t_0 *<span class=\"supfact\">grp_lock</span>;\n  udp_transport *<span class=\"supfact\">tp</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">tp</span> = (udp_transport *)transport;\n  LODWORD(transport[Number].pool) = Number;\n  if (<span class=\"supfact\">tp</span>->key) {\n    pj_ioqueue_unregister(<span class=\"supfact\">tp</span>->key);\n    <span class=\"supfact\">tp</span>->key = Number L;\n  } else if (<span class=\"supfact\">tp</span>->sock && <span class=\"supfact\">tp</span>->sock != Number) {\n    pj_sock_close(<span class=\"supfact\">tp</span>->sock);\n    <span class=\"supfact\">tp</span>->sock = Number;\n  }\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    if (<span class=\"supfact\">tp</span>->rdata_cnt < <span class=\"supfact\">tp</span>->is_closing)\n      break;\n    <span class=\"supfact\">timeout</span>.sec = Number L;\n    <span class=\"supfact\">timeout</span>.msec = Number L;\n    v1 = pjsip_endpt_get_ioqueue(transport->endpt);\n    if (!pj_ioqueue_poll(v1, &<span class=\"supfact\">timeout</span>))\n      break;\n  }\n  if (<span class=\"supfact\">tp</span>-><span class=\"supfact\">grp_lock</span>) {\n    <span class=\"supfact\">grp_lock</span> = <span class=\"supfact\">tp</span>-><span class=\"supfact\">grp_lock</span>;\n    <span class=\"supfact\">tp</span>-><span class=\"supfact\">grp_lock</span> = Number L;\n    pj_grp_lock_dec_ref(<span class=\"supfact\">grp_lock</span>);\n  } else {\n    udp_on_destroy(<span class=\"supfact\">tp</span>);\n  }\n  return Number;\n}", "var": [{"name": "v3", "type": "struct pj_time_val_0 { __int64 sec; __int64 msec; }", "ref_name": "timeout", "ref_type": "struct pj_time_val_0 { __int64 sec; __int64 msec; }"}], "body_in_train": false}, {"code_s": "void __fastcall DSP56K XMemoryDataMove_2\ndisassemble(DSP56K XMemoryDataMove_2 *this, astring *a2) {\n  char <span class=\"supfact\">v2</span>[Number];\n  char <span class=\"supfact\">v3</span>[Number];\n  operator+((astring *)<span class=\"supfact\">v3</span>,\n            (DSP56K XMemoryDataMove_2 *)((char *)this + Number), String);\n  operator+((astring *)<span class=\"supfact\">v2</span>, (const astring *)<span class=\"supfact\">v3</span>,\n            (DSP56K XMemoryDataMove_2 *)((char *)this + Number));\n  astring operator=(a2, (const astring *)<span class=\"supfact\">v2</span>);\n  astring ~astring((astring *)<span class=\"supfact\">v2</span>);\n  astring ~astring((astring *)<span class=\"supfact\">v3</span>);\n}", "code_t": "void __cdecl DSP56K XMemoryDataMove_2\ndisassemble(const DSP56K XMemoryDataMove_2 *const this, astring *retString) {\n  astring <span class=\"supfact\">string</span>;\n  astring <span class=\"supfact\">lhs</span>;\n  operator+(&<span class=\"supfact\">lhs</span>, &this->m_source, String);\n  operator+(&<span class=\"supfact\">string</span>, &<span class=\"supfact\">lhs</span>,\n            &this->m_destination);\n  astring operator=(retString, &<span class=\"supfact\">string</span>);\n  astring ~astring(&<span class=\"supfact\">string</span>);\n  astring ~astring(&<span class=\"supfact\">lhs</span>);\n}", "var": [{"name": "v3", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "lhs", "ref_type": "struct astring { _astring_base baseclass_0; }"}, {"name": "v2", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "string", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "LuaLanes", "repo_name": "lanes", "path": "LuaLanes/lanes/774fef9cd9977ecb99fae568674bcbe49d87e2f42005bd15aa06c733494dc42a", "path_in_repo": "LuaLanes/lanes/src/threading.o", "objdump": "0000000000000000 <now_secs>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n   c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  11:\t48 89 c7             \tmov    %rax,%rdi\n  14:\te8 00 00 00 00       \tcallq  19 <now_secs+0x19>\n  19:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  1c:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  20:\t74 1f                \tje     41 <now_secs+0x41>\n  22:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 29 <now_secs+0x29>\n  29:\tba c0 00 00 00       \tmov    $0xc0,%edx\n  2e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 35 <now_secs+0x35>\n  35:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 3c <now_secs+0x3c>\n  3c:\te8 00 00 00 00       \tcallq  41 <now_secs+0x41>\n  41:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  45:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n  4a:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  4e:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n  55:\t9b c4 20 \n  58:\t48 89 c8             \tmov    %rcx,%rax\n  5b:\t48 f7 ea             \timul   %rdx\n  5e:\t48 c1 fa 07          \tsar    $0x7,%rdx\n  62:\t48 89 c8             \tmov    %rcx,%rax\n  65:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  69:\t48 29 c2             \tsub    %rax,%rdx\n  6c:\t48 89 d0             \tmov    %rdx,%rax\n  6f:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  74:\tf2 0f 10 15 00 00 00 \tmovsd  0x0(%rip),%xmm2        # 7c <now_secs+0x7c>\n  7b:\t00 \n  7c:\tf2 0f 5e c2          \tdivsd  %xmm2,%xmm0\n  80:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n  84:\tc9                   \tleaveq \n  85:\tc3                   \tretq   ", "code_s": "double now_secs() {\n  struct timeval <span class=\"supfact\">tv</span>;\n  if (gettimeofday(&<span class=\"supfact\">tv</span>, Number L))\n    _assert_fail(String, String, Number, String);\n  return (double)(int)(<span class=\"supfact\">tv</span>.tv_usec / Number) / Number +\n         (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_sec);\n}", "code_t": "time_d __cdecl now_secs() {\n  timeval <span class=\"supfact\">tv</span>;\n  if (gettimeofday(&<span class=\"supfact\">tv</span>, Number L))\n    _assert_fail(String, String, Number, String);\n  return (double)(int)(<span class=\"supfact\">tv</span>.tv_usec / Number) / Number +\n         (double)SLODWORD(<span class=\"supfact\">tv</span>.tv_sec);\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "AndersTrier", "repo_name": "QEMU-bitflip", "path": "AndersTrier/QEMU-bitflip/344c8de551127883f2c31d5d67462ea9cb0b7fc5fe990c608bc8b68569e390ba", "path_in_repo": "AndersTrier/QEMU-bitflip//qapi/qapi-visit-core.o", "objdump": "0000000000000add <trace_visit_type_uint32>:\n     add:\t55                   \tpush   %rbp\n     ade:\t48 89 e5             \tmov    %rsp,%rbp\n     ae1:\t41 54                \tpush   %r12\n     ae3:\t53                   \tpush   %rbx\n     ae4:\t48 83 ec 40          \tsub    $0x40,%rsp\n     ae8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     aec:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     af0:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     af4:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     afb:\t00 00 \n     afd:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     b01:\t31 c0                \txor    %eax,%eax\n     b03:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # b09 <trace_visit_type_uint32+0x2c>\n     b09:\t85 c0                \ttest   %eax,%eax\n     b0b:\t0f 95 c0             \tsetne  %al\n     b0e:\t0f b6 c0             \tmovzbl %al,%eax\n     b11:\t48 85 c0             \ttest   %rax,%rax\n     b14:\t74 74                \tje     b8a <trace_visit_type_uint32+0xad>\n     b16:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # b1d <trace_visit_type_uint32+0x40>\n     b1d:\t66 85 c0             \ttest   %ax,%ax\n     b20:\t74 68                \tje     b8a <trace_visit_type_uint32+0xad>\n     b22:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     b26:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b2b:\t48 89 c7             \tmov    %rax,%rdi\n     b2e:\te8 00 00 00 00       \tcallq  b33 <trace_visit_type_uint32+0x56>\n     b33:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     b38:\te8 c3 f4 ff ff       \tcallq  0 <qemu_loglevel_mask>\n     b3d:\t0f b6 c0             \tmovzbl %al,%eax\n     b40:\t48 85 c0             \ttest   %rax,%rax\n     b43:\t74 45                \tje     b8a <trace_visit_type_uint32+0xad>\n     b45:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b49:\t49 89 c4             \tmov    %rax,%r12\n     b4c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     b50:\t48 89 c3             \tmov    %rax,%rbx\n     b53:\te8 00 00 00 00       \tcallq  b58 <trace_visit_type_uint32+0x7b>\n     b58:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n     b5c:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     b60:\t48 83 ec 08          \tsub    $0x8,%rsp\n     b64:\tff 75 b8             \tpushq  -0x48(%rbp)\n     b67:\t49 89 c9             \tmov    %rcx,%r9\n     b6a:\t49 89 d0             \tmov    %rdx,%r8\n     b6d:\t4c 89 e1             \tmov    %r12,%rcx\n     b70:\t48 89 da             \tmov    %rbx,%rdx\n     b73:\t89 c6                \tmov    %eax,%esi\n     b75:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # b7c <trace_visit_type_uint32+0x9f>\n     b7c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b81:\te8 00 00 00 00       \tcallq  b86 <trace_visit_type_uint32+0xa9>\n     b86:\t48 83 c4 10          \tadd    $0x10,%rsp\n     b8a:\t90                   \tnop\n     b8b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b8f:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     b96:\t00 00 \n     b98:\t74 05                \tje     b9f <trace_visit_type_uint32+0xc2>\n     b9a:\te8 00 00 00 00       \tcallq  b9f <trace_visit_type_uint32+0xc2>\n     b9f:\t48 8d 65 f0          \tlea    -0x10(%rbp),%rsp\n     ba3:\t5b                   \tpop    %rbx\n     ba4:\t41 5c                \tpop    %r12\n     ba6:\t5d                   \tpop    %rbp\n     ba7:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_visit_type_uint32(const void *a1,\n                                                    const char *a2,\n                                                    const void *a3) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_VISIT_TYPE_UINT32_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v3 = <span class=\"supfact\">tv</span>.tv_usec;\n        v4 = <span class=\"supfact\">tv</span>.tv_sec;\n        v5 = getpid();\n        qemu_log(String, v5, v4, v3, a1, a2, a3);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl trace_visit_type_uint32(void *v, const char *name, uint32_t *obj) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_VISIT_TYPE_UINT32_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v3 = <span class=\"supfact\">_now</span>.tv_usec;\n      v4 = <span class=\"supfact\">_now</span>.tv_sec;\n      v5 = getpid();\n      qemu_log(String, v5, v4, v3, v, name, obj);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "mstoilov", "repo_name": "rpatk", "path": "mstoilov/rpatk/37ec2e0abc2a46bb09cdfda162c9811549ab1149b5f4a1b73dc526bed4ef4835", "path_in_repo": "mstoilov/rpatk/rvm/build/unix/arm/out/librvm.so.2.0", "objdump": "000000000000d147 <rvm_reg_create_strptr>:\n    d147:\t55                   \tpush   %rbp\n    d148:\t48 89 e5             \tmov    %rsp,%rbp\n    d14b:\t48 83 ec 20          \tsub    $0x20,%rsp\n    d14f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    d153:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    d156:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    d159:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    d15d:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n    d161:\t48 89 ce             \tmov    %rcx,%rsi\n    d164:\t48 89 c7             \tmov    %rax,%rdi\n    d167:\te8 34 70 ff ff       \tcallq  41a0 <rvm_reg_setstrptr@plt>\n    d16c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    d170:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    d174:\tc9                   \tleaveq \n    d175:\tc3                   \tretq   ", "code_s": "__int64 __fastcall rvm_reg_create_strptr(__int64 a1, unsigned int a2) {\n  __int64 <span class=\"supfact\">v3</span>;\n  rvm_reg_setstrptr(&<span class=\"supfact\">v3</span>, a1, a2);\n  return <span class=\"supfact\">v3</span>;\n}", "code_t": "rvmreg_t __cdecl rvm_reg_create_strptr(char *s, unsigned int size) {\n  rvmreg_t <span class=\"supfact\">r</span>;\n  rvm_reg_setstrptr(&<span class=\"supfact\">r</span>, s, size);\n  return <span class=\"supfact\">r</span>;\n}", "var": [{"name": "v3", "type": "rvmreg_t *", "ref_name": "r", "ref_type": "struct rvmreg_t { $8B83D36BBA2B5A9DA35EC761161D149E v; ruint32 size; rvmreg_type_t type; rvmreg_flags_t flags; }"}], "body_in_train": false}, {"repo_owner": "NavInfoNC", "repo_name": "visual-wrk", "path": "NavInfoNC/visual-wrk/563adcb200b6cb7c622f6c90a511227232b92dc1dab4b2ffd766023fbf07b77f", "path_in_repo": "NavInfoNC/visual-wrk//obj/openssl-1.1.0g/apps/apps.o", "objdump": "0000000000001c31 <load_pubkey>:\n    1c31:\t55                   \tpush   %rbp\n    1c32:\t48 89 e5             \tmov    %rsp,%rbp\n    1c35:\t48 83 ec 60          \tsub    $0x60,%rsp\n    1c39:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1c3d:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    1c40:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n    1c43:\t48 89 4d b8          \tmov    %rcx,-0x48(%rbp)\n    1c47:\t4c 89 45 b0          \tmov    %r8,-0x50(%rbp)\n    1c4b:\t4c 89 4d a8          \tmov    %r9,-0x58(%rbp)\n    1c4f:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    1c56:\t00 \n    1c57:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    1c5e:\t00 \n    1c5f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1c63:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    1c67:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1c6b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1c6f:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    1c74:\t75 2a                \tjne    1ca0 <load_pubkey+0x6f>\n    1c76:\t83 7d c0 00          \tcmpl   $0x0,-0x40(%rbp)\n    1c7a:\t74 06                \tje     1c82 <load_pubkey+0x51>\n    1c7c:\t83 7d c4 08          \tcmpl   $0x8,-0x3c(%rbp)\n    1c80:\t75 1e                \tjne    1ca0 <load_pubkey+0x6f>\n    1c82:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c89 <load_pubkey+0x58>\n    1c89:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c8e:\t48 89 c7             \tmov    %rax,%rdi\n    1c91:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c96:\te8 00 00 00 00       \tcallq  1c9b <load_pubkey+0x6a>\n    1c9b:\te9 13 02 00 00       \tjmpq   1eb3 <load_pubkey+0x282>\n    1ca0:\t83 7d c4 08          \tcmpl   $0x8,-0x3c(%rbp)\n    1ca4:\t0f 85 80 00 00 00    \tjne    1d2a <load_pubkey+0xf9>\n    1caa:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n    1caf:\t75 1e                \tjne    1ccf <load_pubkey+0x9e>\n    1cb1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1cb8 <load_pubkey+0x87>\n    1cb8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1cbd:\t48 89 c7             \tmov    %rax,%rdi\n    1cc0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1cc5:\te8 00 00 00 00       \tcallq  1cca <load_pubkey+0x99>\n    1cca:\te9 dd 01 00 00       \tjmpq   1eac <load_pubkey+0x27b>\n    1ccf:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1cd6 <load_pubkey+0xa5>\n    1cd6:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n    1cda:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n    1cde:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1ce2:\t48 89 c7             \tmov    %rax,%rdi\n    1ce5:\te8 00 00 00 00       \tcallq  1cea <load_pubkey+0xb9>\n    1cea:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1cee:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1cf3:\t0f 85 b3 01 00 00    \tjne    1eac <load_pubkey+0x27b>\n    1cf9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d00 <load_pubkey+0xcf>\n    1d00:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    1d04:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1d09:\t48 89 c7             \tmov    %rax,%rdi\n    1d0c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d11:\te8 00 00 00 00       \tcallq  1d16 <load_pubkey+0xe5>\n    1d16:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d1d <load_pubkey+0xec>\n    1d1d:\t48 89 c7             \tmov    %rax,%rdi\n    1d20:\te8 00 00 00 00       \tcallq  1d25 <load_pubkey+0xf4>\n    1d25:\te9 82 01 00 00       \tjmpq   1eac <load_pubkey+0x27b>\n    1d2a:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    1d2f:\t75 25                \tjne    1d56 <load_pubkey+0x125>\n    1d31:\t83 7d c0 00          \tcmpl   $0x0,-0x40(%rbp)\n    1d35:\t74 1f                \tje     1d56 <load_pubkey+0x125>\n    1d37:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d3e <load_pubkey+0x10d>\n    1d3e:\t48 89 c7             \tmov    %rax,%rdi\n    1d41:\te8 00 00 00 00       \tcallq  1d46 <load_pubkey+0x115>\n    1d46:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    1d49:\t89 c7                \tmov    %eax,%edi\n    1d4b:\te8 00 00 00 00       \tcallq  1d50 <load_pubkey+0x11f>\n    1d50:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1d54:\teb 18                \tjmp    1d6e <load_pubkey+0x13d>\n    1d56:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    1d59:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1d5d:\tbe 72 00 00 00       \tmov    $0x72,%esi\n    1d62:\t48 89 c7             \tmov    %rax,%rdi\n    1d65:\te8 00 00 00 00       \tcallq  1d6a <load_pubkey+0x139>\n    1d6a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1d6e:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    1d73:\t0f 84 36 01 00 00    \tje     1eaf <load_pubkey+0x27e>\n    1d79:\t83 7d c4 04          \tcmpl   $0x4,-0x3c(%rbp)\n    1d7d:\t75 1a                \tjne    1d99 <load_pubkey+0x168>\n    1d7f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1d83:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1d88:\t48 89 c7             \tmov    %rax,%rdi\n    1d8b:\te8 00 00 00 00       \tcallq  1d90 <load_pubkey+0x15f>\n    1d90:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1d94:\te9 1a 01 00 00       \tjmpq   1eb3 <load_pubkey+0x282>\n    1d99:\t83 7d c4 0a          \tcmpl   $0xa,-0x3c(%rbp)\n    1d9d:\t75 5d                \tjne    1dfc <load_pubkey+0x1cb>\n    1d9f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1da3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1da8:\t48 89 c7             \tmov    %rax,%rdi\n    1dab:\te8 00 00 00 00       \tcallq  1db0 <load_pubkey+0x17f>\n    1db0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1db4:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    1db9:\t74 34                \tje     1def <load_pubkey+0x1be>\n    1dbb:\te8 00 00 00 00       \tcallq  1dc0 <load_pubkey+0x18f>\n    1dc0:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1dc4:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1dc9:\t74 13                \tje     1dde <load_pubkey+0x1ad>\n    1dcb:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    1dcf:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1dd3:\t48 89 d6             \tmov    %rdx,%rsi\n    1dd6:\t48 89 c7             \tmov    %rax,%rdi\n    1dd9:\te8 00 00 00 00       \tcallq  1dde <load_pubkey+0x1ad>\n    1dde:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1de2:\t48 89 c7             \tmov    %rax,%rdi\n    1de5:\te8 00 00 00 00       \tcallq  1dea <load_pubkey+0x1b9>\n    1dea:\te9 c4 00 00 00       \tjmpq   1eb3 <load_pubkey+0x282>\n    1def:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    1df6:\t00 \n    1df7:\te9 b7 00 00 00       \tjmpq   1eb3 <load_pubkey+0x282>\n    1dfc:\t81 7d c4 09 80 00 00 \tcmpl   $0x8009,-0x3c(%rbp)\n    1e03:\t75 63                \tjne    1e68 <load_pubkey+0x237>\n    1e05:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    1e09:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1e0d:\t48 89 d1             \tmov    %rdx,%rcx\n    1e10:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1e15:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e1a:\t48 89 c7             \tmov    %rax,%rdi\n    1e1d:\te8 00 00 00 00       \tcallq  1e22 <load_pubkey+0x1f1>\n    1e22:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1e26:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    1e2b:\t74 31                \tje     1e5e <load_pubkey+0x22d>\n    1e2d:\te8 00 00 00 00       \tcallq  1e32 <load_pubkey+0x201>\n    1e32:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1e36:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1e3b:\t74 13                \tje     1e50 <load_pubkey+0x21f>\n    1e3d:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1e41:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1e45:\t48 89 d6             \tmov    %rdx,%rsi\n    1e48:\t48 89 c7             \tmov    %rax,%rdi\n    1e4b:\te8 00 00 00 00       \tcallq  1e50 <load_pubkey+0x21f>\n    1e50:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1e54:\t48 89 c7             \tmov    %rax,%rdi\n    1e57:\te8 00 00 00 00       \tcallq  1e5c <load_pubkey+0x22b>\n    1e5c:\teb 55                \tjmp    1eb3 <load_pubkey+0x282>\n    1e5e:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n    1e65:\t00 \n    1e66:\teb 4b                \tjmp    1eb3 <load_pubkey+0x282>\n    1e68:\t81 7d c4 05 80 00 00 \tcmpl   $0x8005,-0x3c(%rbp)\n    1e6f:\t75 23                \tjne    1e94 <load_pubkey+0x263>\n    1e71:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n    1e75:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1e79:\t48 89 d1             \tmov    %rdx,%rcx\n    1e7c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1e81:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e86:\t48 89 c7             \tmov    %rax,%rdi\n    1e89:\te8 00 00 00 00       \tcallq  1e8e <load_pubkey+0x25d>\n    1e8e:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1e92:\teb 1f                \tjmp    1eb3 <load_pubkey+0x282>\n    1e94:\t83 7d c4 0b          \tcmpl   $0xb,-0x3c(%rbp)\n    1e98:\t75 18                \tjne    1eb2 <load_pubkey+0x281>\n    1e9a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1e9e:\t48 89 c7             \tmov    %rax,%rdi\n    1ea1:\te8 00 00 00 00       \tcallq  1ea6 <load_pubkey+0x275>\n    1ea6:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1eaa:\teb 07                \tjmp    1eb3 <load_pubkey+0x282>\n    1eac:\t90                   \tnop\n    1ead:\teb 04                \tjmp    1eb3 <load_pubkey+0x282>\n    1eaf:\t90                   \tnop\n    1eb0:\teb 01                \tjmp    1eb3 <load_pubkey+0x282>\n    1eb2:\t90                   \tnop\n    1eb3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    1eb7:\t48 89 c7             \tmov    %rax,%rdi\n    1eba:\te8 00 00 00 00       \tcallq  1ebf <load_pubkey+0x28e>\n    1ebf:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1ec4:\t75 1d                \tjne    1ee3 <load_pubkey+0x2b2>\n    1ec6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ecd <load_pubkey+0x29c>\n    1ecd:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    1ed1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ed6:\t48 89 c7             \tmov    %rax,%rdi\n    1ed9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1ede:\te8 00 00 00 00       \tcallq  1ee3 <load_pubkey+0x2b2>\n    1ee3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1ee7:\tc9                   \tleaveq \n    1ee8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall load_pubkey(__int64 a1, unsigned int a2, int a3, __int64 a4,\n                               __int64 a5, const char *a6) {\n  __int64 <span class=\"supfact\">v8</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = Number L;\n  <span class=\"supfact\">v11</span> = Number L;\n  <span class=\"supfact\">v8</span>[Number] = a4;\n  <span class=\"supfact\">v8</span>[Number] = a1;\n  if (a1 || a3 && a2 != Number) {\n    if (a2 == Number) {\n      if (a5) {\n        <span class=\"supfact\">v11</span> =\n            ENGINE_load_public_key(a5, a1, ui_method, <span class=\"supfact\">v8</span>);\n        if (!<span class=\"supfact\">v11</span>) {\n          BIO_printf(bio_err, String, a6);\n          ERR_print_errors(bio_err);\n        }\n      } else {\n        BIO_printf(bio_err, String);\n      }\n    } else {\n      if (a1 || !a3) {\n        <span class=\"supfact\">v12</span> = bio_open_default(a1, Number L, a2);\n      } else {\n        unbuffer(stdin);\n        <span class=\"supfact\">v12</span> = dup_bio_in(a2);\n      }\n      if (<span class=\"supfact\">v12</span>) {\n        switch (a2) {\n        case Number:\n          <span class=\"supfact\">v11</span> = d2i_PUBKEY_bio(<span class=\"supfact\">v12</span>, Number L);\n          break;\n        case Number:\n          <span class=\"supfact\">v9</span> =\n              d2i_RSAPublicKey_bio(<span class=\"supfact\">v12</span>, Number L);\n          if (<span class=\"supfact\">v9</span>) {\n            <span class=\"supfact\">v11</span> = EVP_PKEY_new();\n            if (<span class=\"supfact\">v11</span>)\n              EVP_PKEY_set1_RSA(<span class=\"supfact\">v11</span>, <span class=\"supfact\">v9</span>);\n            RSA_free(<span class=\"supfact\">v9</span>);\n          } else {\n            <span class=\"supfact\">v11</span> = Number L;\n          }\n          break;\n        case Number:\n          <span class=\"supfact\">v10</span> =\n              PEM_read_bio_RSAPublicKey(<span class=\"supfact\">v12</span>, Number L,\n                                        password_callback, <span class=\"supfact\">v8</span>);\n          if (<span class=\"supfact\">v10</span>) {\n            <span class=\"supfact\">v11</span> = EVP_PKEY_new();\n            if (<span class=\"supfact\">v11</span>)\n              EVP_PKEY_set1_RSA(<span class=\"supfact\">v11</span>, <span class=\"supfact\">v10</span>);\n            RSA_free(<span class=\"supfact\">v10</span>);\n          } else {\n            <span class=\"supfact\">v11</span> = Number L;\n          }\n          break;\n        case Number:\n          <span class=\"supfact\">v11</span> =\n              PEM_read_bio_PUBKEY(<span class=\"supfact\">v12</span>, Number L,\n                                  password_callback, <span class=\"supfact\">v8</span>);\n          break;\n        case Number:\n          <span class=\"supfact\">v11</span> = b2i_PublicKey_bio(<span class=\"supfact\">v12</span>);\n          break;\n        }\n      }\n    }\n  } else {\n    BIO_printf(bio_err, String);\n  }\n  BIO_free(<span class=\"supfact\">v12</span>);\n  if (!<span class=\"supfact\">v11</span>)\n    BIO_printf(bio_err, String, a6);\n  return <span class=\"supfact\">v11</span>;\n}", "code_t": "EVP_PKEY *__cdecl load_pubkey(const char *file, int format, int maybe_stdin,\n                              const char *pass, ENGINE *e,\n                              const char *key_descrip) {\n  PW_CB_DATA <span class=\"supfact\">cb_data</span>;\n  RSA *<span class=\"supfact\">rsa</span>;\n  RSA *<span class=\"supfact\">rsa_0</span>;\n  EVP_PKEY *<span class=\"supfact\">pkey</span>;\n  BIO *<span class=\"supfact\">key</span>;\n  <span class=\"supfact\">key</span> = Number L;\n  <span class=\"supfact\">pkey</span> = Number L;\n  <span class=\"supfact\">cb_data</span>.password = pass;\n  <span class=\"supfact\">cb_data</span>.prompt_info = file;\n  if (file || maybe_stdin && format != Number) {\n    if (format == Number) {\n      if (e) {\n        <span class=\"supfact\">pkey</span> = (EVP_PKEY *)ENGINE_load_public_key(\n            e, file, ui_method, &<span class=\"supfact\">cb_data</span>);\n        if (!<span class=\"supfact\">pkey</span>) {\n          BIO_printf(bio_err, String, key_descrip);\n          ERR_print_errors(bio_err);\n        }\n      } else {\n        BIO_printf(bio_err, String);\n      }\n    } else {\n      if (file || !maybe_stdin) {\n        <span class=\"supfact\">key</span> = bio_open_default(file, Number, format);\n      } else {\n        unbuffer(stdin);\n        <span class=\"supfact\">key</span> = dup_bio_in(format);\n      }\n      if (<span class=\"supfact\">key</span>) {\n        switch (format) {\n        case Number:\n          <span class=\"supfact\">pkey</span> =\n              (EVP_PKEY *)d2i_PUBKEY_bio(<span class=\"supfact\">key</span>, Number L);\n          break;\n        case Number:\n          <span class=\"supfact\">rsa</span> =\n              (RSA *)d2i_RSAPublicKey_bio(<span class=\"supfact\">key</span>, Number L);\n          if (<span class=\"supfact\">rsa</span>) {\n            <span class=\"supfact\">pkey</span> = (EVP_PKEY *)EVP_PKEY_new();\n            if (<span class=\"supfact\">pkey</span>)\n              EVP_PKEY_set1_RSA(<span class=\"supfact\">pkey</span>, <span class=\"supfact\">rsa</span>);\n            RSA_free(<span class=\"supfact\">rsa</span>);\n          } else {\n            <span class=\"supfact\">pkey</span> = Number L;\n          }\n          break;\n        case Number:\n          <span class=\"supfact\">rsa_0</span> = (RSA *)PEM_read_bio_RSAPublicKey(\n              <span class=\"supfact\">key</span>, Number L, password_callback,\n              &<span class=\"supfact\">cb_data</span>);\n          if (<span class=\"supfact\">rsa_0</span>) {\n            <span class=\"supfact\">pkey</span> = (EVP_PKEY *)EVP_PKEY_new();\n            if (<span class=\"supfact\">pkey</span>)\n              EVP_PKEY_set1_RSA(<span class=\"supfact\">pkey</span>, <span class=\"supfact\">rsa_0</span>);\n            RSA_free(<span class=\"supfact\">rsa_0</span>);\n          } else {\n            <span class=\"supfact\">pkey</span> = Number L;\n          }\n          break;\n        case Number:\n          <span class=\"supfact\">pkey</span> = (EVP_PKEY *)PEM_read_bio_PUBKEY(\n              <span class=\"supfact\">key</span>, Number L, password_callback,\n              &<span class=\"supfact\">cb_data</span>);\n          break;\n        case Number:\n          <span class=\"supfact\">pkey</span> =\n              (EVP_PKEY *)b2i_PublicKey_bio(<span class=\"supfact\">key</span>);\n          break;\n        }\n      }\n    }\n  } else {\n    BIO_printf(bio_err, String);\n  }\n  BIO_free(<span class=\"supfact\">key</span>);\n  if (!<span class=\"supfact\">pkey</span>)\n    BIO_printf(bio_err, String, key_descrip);\n  return <span class=\"supfact\">pkey</span>;\n}", "var": [{"name": "v8", "type": "struct PW_CB_DATA { const void * password; const char * prompt_info; }", "ref_name": "cb_data", "ref_type": "struct PW_CB_DATA { const void * password; const char * prompt_info; }"}], "body_in_train": false}, {"repo_owner": "alcap-org", "repo_name": "AlcapDAQ", "path": "alcap-org/AlcapDAQ/25a60878b1a90d71fd0b6bfb93abfe56f6d023251a2c07d49ff7f7c23f3eda31", "path_in_repo": "alcap-org/AlcapDAQ/midas/mscb/msc", "objdump": "000000000040bb7b <mrpc_connect>:\n  40bb7b:\t55                   \tpush   %rbp\n  40bb7c:\t48 89 e5             \tmov    %rsp,%rbp\n  40bb7f:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40bb83:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  40bb87:\tba 00 00 00 00       \tmov    $0x0,%edx\n  40bb8c:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40bb91:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40bb96:\te8 c5 68 ff ff       \tcallq  402460 <socket@plt>\n  40bb9b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40bb9e:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n  40bba2:\t75 14                \tjne    40bbb8 <mrpc_connect+0x3d>\n  40bba4:\tbf 59 fa 40 00       \tmov    $0x40fa59,%edi\n  40bba9:\te8 02 68 ff ff       \tcallq  4023b0 <perror@plt>\n  40bbae:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40bbb3:\te9 10 01 00 00       \tjmpq   40bcc8 <mrpc_connect+0x14d>\n  40bbb8:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40bbbc:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40bbc1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40bbc6:\t48 89 c7             \tmov    %rax,%rdi\n  40bbc9:\te8 f2 65 ff ff       \tcallq  4021c0 <memset@plt>\n  40bbce:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n  40bbd4:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  40bbdb:\t66 c7 45 e2 00 00    \tmovw   $0x0,-0x1e(%rbp)\n  40bbe1:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  40bbe5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40bbe8:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40bbed:\t48 89 ce             \tmov    %rcx,%rsi\n  40bbf0:\t89 c7                \tmov    %eax,%edi\n  40bbf2:\te8 69 67 ff ff       \tcallq  402360 <bind@plt>\n  40bbf7:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40bbfa:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  40bbfe:\t79 14                \tjns    40bc14 <mrpc_connect+0x99>\n  40bc00:\tbf 59 fa 40 00       \tmov    $0x40fa59,%edi\n  40bc05:\te8 a6 67 ff ff       \tcallq  4023b0 <perror@plt>\n  40bc0a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40bc0f:\te9 b4 00 00 00       \tjmpq   40bcc8 <mrpc_connect+0x14d>\n  40bc14:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  40bc18:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40bc1d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40bc22:\t48 89 c7             \tmov    %rax,%rdi\n  40bc25:\te8 96 65 ff ff       \tcallq  4021c0 <memset@plt>\n  40bc2a:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n  40bc30:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  40bc37:\tbf 98 04 00 00       \tmov    $0x498,%edi\n  40bc3c:\te8 ef 64 ff ff       \tcallq  402130 <htons@plt>\n  40bc41:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n  40bc45:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40bc49:\t48 89 c7             \tmov    %rax,%rdi\n  40bc4c:\te8 0f 66 ff ff       \tcallq  402260 <gethostbyname@plt>\n  40bc51:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  40bc55:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  40bc5a:\t75 11                \tjne    40bc6d <mrpc_connect+0xf2>\n  40bc5c:\tbf 59 fa 40 00       \tmov    $0x40fa59,%edi\n  40bc61:\te8 4a 67 ff ff       \tcallq  4023b0 <perror@plt>\n  40bc66:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40bc6b:\teb 5b                \tjmp    40bcc8 <mrpc_connect+0x14d>\n  40bc6d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40bc71:\t8b 40 14             \tmov    0x14(%rax),%eax\n  40bc74:\t48 63 d0             \tmovslq %eax,%rdx\n  40bc77:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40bc7b:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  40bc7f:\t48 8b 00             \tmov    (%rax),%rax\n  40bc82:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  40bc86:\t48 83 c1 04          \tadd    $0x4,%rcx\n  40bc8a:\t48 89 c6             \tmov    %rax,%rsi\n  40bc8d:\t48 89 cf             \tmov    %rcx,%rdi\n  40bc90:\te8 0b 66 ff ff       \tcallq  4022a0 <memcpy@plt>\n  40bc95:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  40bc99:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40bc9c:\tba 10 00 00 00       \tmov    $0x10,%edx\n  40bca1:\t48 89 ce             \tmov    %rcx,%rsi\n  40bca4:\t89 c7                \tmov    %eax,%edi\n  40bca6:\te8 65 67 ff ff       \tcallq  402410 <connect@plt>\n  40bcab:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  40bcae:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  40bcb2:\t74 11                \tje     40bcc5 <mrpc_connect+0x14a>\n  40bcb4:\tbf 59 fa 40 00       \tmov    $0x40fa59,%edi\n  40bcb9:\te8 f2 66 ff ff       \tcallq  4023b0 <perror@plt>\n  40bcbe:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40bcc3:\teb 03                \tjmp    40bcc8 <mrpc_connect+0x14d>\n  40bcc5:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40bcc8:\tc9                   \tleaveq \n  40bcc9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mrpc_connect(const char *a1) {\n  __int64 result;\n  struct sockaddr <span class=\"supfact\">s</span>;\n  struct hostent *<span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">v4</span>;\n  int <span class=\"supfact\">fd</span>;\n  <span class=\"supfact\">fd</span> = socket(Number, Number, Number);\n  if (<span class=\"supfact\">fd</span> == Number) {\n    perror(String);\n    result = Number;\n  } else {\n    memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n    <span class=\"supfact\">s</span>.sa_family = Number;\n    *(_DWORD *)&<span class=\"supfact\">s</span>.sa_data[Number] = Number;\n    *(_WORD *)<span class=\"supfact\">s</span>.sa_data = Number;\n    <span class=\"supfact\">v4</span> = bind(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">s</span>, Number);\n    if (<span class=\"supfact\">v4</span> < Number ||\n        (memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>)),\n         <span class=\"supfact\">s</span>.sa_family = Number,\n         *(_DWORD *)&<span class=\"supfact\">s</span>.sa_data[Number] = Number,\n         *(_WORD *)<span class=\"supfact\">s</span>.sa_data = htons(Number),\n         (<span class=\"supfact\">v3</span> = gethostbyname(a1)) == Number L) ||\n        (memcpy(&<span class=\"supfact\">s</span>.sa_data[Number],\n                *(const void **)<span class=\"supfact\">v3</span>->h_addr_list,\n                <span class=\"supfact\">v3</span>->h_length),\n         (<span class=\"supfact\">v4</span> = connect(<span class=\"supfact\">fd</span>, &<span class=\"supfact\">s</span>,\n                                       Number)) != Number)) {\n      perror(String);\n      result = Number;\n    } else {\n      result = (unsigned int)<span class=\"supfact\">fd</span>;\n    }\n  }\n  return result;\n}", "code_t": "int __cdecl mrpc_connect(char *host_name) {\n  int result;\n  sockaddr_in <span class=\"supfact\">bind_addr</span>;\n  hostent *<span class=\"supfact\">phe</span>;\n  INT <span class=\"supfact\">status</span>;\n  INT <span class=\"supfact\">sock</span>;\n  <span class=\"supfact\">sock</span> = socket(Number, Number, Number);\n  if (<span class=\"supfact\">sock</span> == Number) {\n    perror(String);\n    result = Number;\n  } else {\n    memset(&<span class=\"supfact\">bind_addr</span>, Number,\n           sizeof(<span class=\"supfact\">bind_addr</span>));\n    <span class=\"supfact\">bind_addr</span>.sin_family = Number;\n    <span class=\"supfact\">bind_addr</span>.sin_addr.s_addr = Number;\n    <span class=\"supfact\">bind_addr</span>.sin_port = Number;\n    <span class=\"supfact\">status</span> =\n        bind(<span class=\"supfact\">sock</span>,\n             (const struct sockaddr *)&<span class=\"supfact\">bind_addr</span>, Number);\n    if (<span class=\"supfact\">status</span> < Number ||\n        (memset(&<span class=\"supfact\">bind_addr</span>, Number,\n                sizeof(<span class=\"supfact\">bind_addr</span>)),\n         <span class=\"supfact\">bind_addr</span>.sin_family = Number,\n         <span class=\"supfact\">bind_addr</span>.sin_addr.s_addr = Number,\n         <span class=\"supfact\">bind_addr</span>.sin_port = htons(Number),\n         (<span class=\"supfact\">phe</span> = gethostbyname(host_name)) == Number L) ||\n        (memcpy(&<span class=\"supfact\">bind_addr</span>.sin_addr,\n                *(const void **)<span class=\"supfact\">phe</span>->h_addr_list,\n                <span class=\"supfact\">phe</span>->h_length),\n         (<span class=\"supfact\">status</span> =\n              connect(<span class=\"supfact\">sock</span>,\n                      (const struct sockaddr *)&<span class=\"supfact\">bind_addr</span>,\n                      Number)) != Number)) {\n      perror(String);\n      result = Number;\n    } else {\n      result = <span class=\"supfact\">sock</span>;\n    }\n  }\n  return result;\n}", "var": [{"name": "s", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "bind_addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/fa30d6faaedcde67788bf126875a8ee909c95940ad46f41db7ecc62679bc1ddd", "path_in_repo": "XanClic/qemu//block/vhdx-log.o", "objdump": "0000000000001ff8 <vhdx_log_write_and_flush>:\n    1ff8:\t55                   \tpush   %rbp\n    1ff9:\t48 89 e5             \tmov    %rsp,%rbp\n    1ffc:\t53                   \tpush   %rbx\n    1ffd:\t48 81 ec d8 00 00 00 \tsub    $0xd8,%rsp\n    2004:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n    200b:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n    2012:\t48 89 95 38 ff ff ff \tmov    %rdx,-0xc8(%rbp)\n    2019:\t89 8d 34 ff ff ff    \tmov    %ecx,-0xcc(%rbp)\n    201f:\t4c 89 85 28 ff ff ff \tmov    %r8,-0xd8(%rbp)\n    2026:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    202d:\t00 00 \n    202f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2033:\t31 c0                \txor    %eax,%eax\n    2035:\tc7 85 5c ff ff ff 00 \tmovl   $0x0,-0xa4(%rbp)\n    203c:\t00 00 00 \n    203f:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n    2046:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    204b:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    2050:\t48 89 d7             \tmov    %rdx,%rdi\n    2053:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    2056:\tc6 85 60 ff ff ff 01 \tmovb   $0x1,-0xa0(%rbp)\n    205d:\tc7 85 64 ff ff ff 01 \tmovl   $0x1,-0x9c(%rbp)\n    2064:\t00 00 00 \n    2067:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    206e:\t48 89 c7             \tmov    %rax,%rdi\n    2071:\te8 00 00 00 00       \tcallq  2076 <vhdx_log_write_and_flush+0x7e>\n    2076:\t89 85 5c ff ff ff    \tmov    %eax,-0xa4(%rbp)\n    207c:\t83 bd 5c ff ff ff 00 \tcmpl   $0x0,-0xa4(%rbp)\n    2083:\t0f 88 4d 01 00 00    \tjs     21d6 <vhdx_log_write_and_flush+0x1de>\n    2089:\t48 8b bd 28 ff ff ff \tmov    -0xd8(%rbp),%rdi\n    2090:\t8b 8d 34 ff ff ff    \tmov    -0xcc(%rbp),%ecx\n    2096:\t48 8b 95 38 ff ff ff \tmov    -0xc8(%rbp),%rdx\n    209d:\t48 8b b5 40 ff ff ff \tmov    -0xc0(%rbp),%rsi\n    20a4:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    20ab:\t49 89 f8             \tmov    %rdi,%r8\n    20ae:\t48 89 c7             \tmov    %rax,%rdi\n    20b1:\te8 16 f8 ff ff       \tcallq  18cc <vhdx_log_write>\n    20b6:\t89 85 5c ff ff ff    \tmov    %eax,-0xa4(%rbp)\n    20bc:\t83 bd 5c ff ff ff 00 \tcmpl   $0x0,-0xa4(%rbp)\n    20c3:\t0f 88 10 01 00 00    \tjs     21d9 <vhdx_log_write_and_flush+0x1e1>\n    20c9:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    20d0:\t48 8b 88 e8 01 00 00 \tmov    0x1e8(%rax),%rcx\n    20d7:\t48 8b 98 f0 01 00 00 \tmov    0x1f0(%rax),%rbx\n    20de:\t48 89 8d 68 ff ff ff \tmov    %rcx,-0x98(%rbp)\n    20e5:\t48 89 9d 70 ff ff ff \tmov    %rbx,-0x90(%rbp)\n    20ec:\t48 8b 88 f8 01 00 00 \tmov    0x1f8(%rax),%rcx\n    20f3:\t48 8b 98 00 02 00 00 \tmov    0x200(%rax),%rbx\n    20fa:\t48 89 8d 78 ff ff ff \tmov    %rcx,-0x88(%rbp)\n    2101:\t48 89 5d 80          \tmov    %rbx,-0x80(%rbp)\n    2105:\t48 8b 88 08 02 00 00 \tmov    0x208(%rax),%rcx\n    210c:\t48 8b 98 10 02 00 00 \tmov    0x210(%rax),%rbx\n    2113:\t48 89 4d 88          \tmov    %rcx,-0x78(%rbp)\n    2117:\t48 89 5d 90          \tmov    %rbx,-0x70(%rbp)\n    211b:\t48 8b 80 18 02 00 00 \tmov    0x218(%rax),%rax\n    2122:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n    2126:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    212d:\t48 89 c7             \tmov    %rax,%rdi\n    2130:\te8 00 00 00 00       \tcallq  2135 <vhdx_log_write_and_flush+0x13d>\n    2135:\t89 85 5c ff ff ff    \tmov    %eax,-0xa4(%rbp)\n    213b:\t83 bd 5c ff ff ff 00 \tcmpl   $0x0,-0xa4(%rbp)\n    2142:\t0f 88 94 00 00 00    \tjs     21dc <vhdx_log_write_and_flush+0x1e4>\n    2148:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n    214f:\t48 8b 8d 40 ff ff ff \tmov    -0xc0(%rbp),%rcx\n    2156:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    215d:\t48 89 ce             \tmov    %rcx,%rsi\n    2160:\t48 89 c7             \tmov    %rax,%rdi\n    2163:\te8 67 e8 ff ff       \tcallq  9cf <vhdx_log_flush>\n    2168:\t89 85 5c ff ff ff    \tmov    %eax,-0xa4(%rbp)\n    216e:\t83 bd 5c ff ff ff 00 \tcmpl   $0x0,-0xa4(%rbp)\n    2175:\t78 68                \tjs     21df <vhdx_log_write_and_flush+0x1e7>\n    2177:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n    217e:\t48 8b 8d 68 ff ff ff \tmov    -0x98(%rbp),%rcx\n    2185:\t48 8b 9d 70 ff ff ff \tmov    -0x90(%rbp),%rbx\n    218c:\t48 89 88 e8 01 00 00 \tmov    %rcx,0x1e8(%rax)\n    2193:\t48 89 98 f0 01 00 00 \tmov    %rbx,0x1f0(%rax)\n    219a:\t48 8b 8d 78 ff ff ff \tmov    -0x88(%rbp),%rcx\n    21a1:\t48 8b 5d 80          \tmov    -0x80(%rbp),%rbx\n    21a5:\t48 89 88 f8 01 00 00 \tmov    %rcx,0x1f8(%rax)\n    21ac:\t48 89 98 00 02 00 00 \tmov    %rbx,0x200(%rax)\n    21b3:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    21b7:\t48 8b 5d 90          \tmov    -0x70(%rbp),%rbx\n    21bb:\t48 89 88 08 02 00 00 \tmov    %rcx,0x208(%rax)\n    21c2:\t48 89 98 10 02 00 00 \tmov    %rbx,0x210(%rax)\n    21c9:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n    21cd:\t48 89 90 18 02 00 00 \tmov    %rdx,0x218(%rax)\n    21d4:\teb 0a                \tjmp    21e0 <vhdx_log_write_and_flush+0x1e8>\n    21d6:\t90                   \tnop\n    21d7:\teb 07                \tjmp    21e0 <vhdx_log_write_and_flush+0x1e8>\n    21d9:\t90                   \tnop\n    21da:\teb 04                \tjmp    21e0 <vhdx_log_write_and_flush+0x1e8>\n    21dc:\t90                   \tnop\n    21dd:\teb 01                \tjmp    21e0 <vhdx_log_write_and_flush+0x1e8>\n    21df:\t90                   \tnop\n    21e0:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n    21e6:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    21ea:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n    21f1:\t00 00 \n    21f3:\t74 05                \tje     21fa <vhdx_log_write_and_flush+0x202>\n    21f5:\te8 00 00 00 00       \tcallq  21fa <vhdx_log_write_and_flush+0x202>\n    21fa:\t48 81 c4 d8 00 00 00 \tadd    $0xd8,%rsp\n    2201:\t5b                   \tpop    %rbx\n    2202:\t5d                   \tpop    %rbp\n    2203:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall vhdx_log_write_and_flush(__int64 a1, _QWORD *a2, void *a3,\n                                            unsigned int a4, __int64 a5) {\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  int <span class=\"supfact\">v15</span>;\n  __int64 <span class=\"supfact\">v16</span>[Number];\n  <span class=\"supfact\">v16</span>[Number] = __readfsqword(Number);\n  memset(<span class=\"supfact\">v16</span>, Number, Number);\n  LOBYTE(<span class=\"supfact\">v16</span>[Number]) = Number;\n  HIDWORD(<span class=\"supfact\">v16</span>[Number]) = Number;\n  <span class=\"supfact\">v15</span> = bdrv_flush(a1);\n  if (<span class=\"supfact\">v15</span> >= Number) {\n    <span class=\"supfact\">v15</span> = vhdx_log_write(a1, (__int64)a2, a3, a4, a5);\n    if (<span class=\"supfact\">v15</span> >= Number) {\n      v5 = a2[Number];\n      <span class=\"supfact\">v16</span>[Number] = a2[Number];\n      <span class=\"supfact\">v16</span>[Number] = v5;\n      v6 = a2[Number];\n      <span class=\"supfact\">v16</span>[Number] = a2[Number];\n      <span class=\"supfact\">v16</span>[Number] = v6;\n      v7 = a2[Number];\n      <span class=\"supfact\">v16</span>[Number] = a2[Number];\n      <span class=\"supfact\">v16</span>[Number] = v7;\n      <span class=\"supfact\">v16</span>[Number] = a2[Number];\n      <span class=\"supfact\">v15</span> = bdrv_flush(a1);\n      if (<span class=\"supfact\">v15</span> >= Number) {\n        <span class=\"supfact\">v15</span> =\n            vhdx_log_flush(a1, (__int64)a2, (__int64)<span class=\"supfact\">v16</span>);\n        if (<span class=\"supfact\">v15</span> >= Number) {\n          v8 = <span class=\"supfact\">v16</span>[Number];\n          a2[Number] = <span class=\"supfact\">v16</span>[Number];\n          a2[Number] = v8;\n          v9 = <span class=\"supfact\">v16</span>[Number];\n          a2[Number] = <span class=\"supfact\">v16</span>[Number];\n          a2[Number] = v9;\n          v10 = <span class=\"supfact\">v16</span>[Number];\n          a2[Number] = <span class=\"supfact\">v16</span>[Number];\n          a2[Number] = v10;\n          a2[Number] = <span class=\"supfact\">v16</span>[Number];\n        }\n      }\n    }\n  }\n  return (unsigned int)<span class=\"supfact\">v15</span>;\n}", "code_t": "int __cdecl vhdx_log_write_and_flush(BlockDriverState_0 *bs, BDRVVHDXState_0 *s,\n                                     void *data, uint32_t length,\n                                     uint64_t offset) {\n  uint64_t v5;\n  VHDXLogEntryHeader_0 *v6;\n  uint64_t v7;\n  uint64_t v8;\n  VHDXLogEntryHeader_0 *v9;\n  uint64_t v10;\n  int <span class=\"supfact\">ret</span>;\n  VHDXLogSequence_0 <span class=\"supfact\">logs</span>;\n  unsigned __int64 v17;\n  v17 = __readfsqword(Number);\n  memset(&<span class=\"supfact\">logs</span>, Number, sizeof(<span class=\"supfact\">logs</span>));\n  <span class=\"supfact\">logs</span>.valid = Number;\n  <span class=\"supfact\">logs</span>.count = Number;\n  <span class=\"supfact\">ret</span> = bdrv_flush(bs);\n  if (<span class=\"supfact\">ret</span> >= Number) {\n    <span class=\"supfact\">ret</span> = vhdx_log_write(bs, s, data, length, offset);\n    if (<span class=\"supfact\">ret</span> >= Number) {\n      v5 = s->log.length;\n      <span class=\"supfact\">logs</span>.log.offset = s->log.offset;\n      <span class=\"supfact\">logs</span>.log.length = v5;\n      v6 = s->log.hdr;\n      *(_QWORD *)&<span class=\"supfact\">logs</span>.log.write = *(_QWORD *)&s->log.write;\n      <span class=\"supfact\">logs</span>.log.hdr = v6;\n      v7 = s->log.sequence;\n      <span class=\"supfact\">logs</span>.log.desc_buffer = s->log.desc_buffer;\n      <span class=\"supfact\">logs</span>.log.sequence = v7;\n      *(_QWORD *)&<span class=\"supfact\">logs</span>.log.tail = *(_QWORD *)&s->log.tail;\n      <span class=\"supfact\">ret</span> = bdrv_flush(bs);\n      if (<span class=\"supfact\">ret</span> >= Number) {\n        <span class=\"supfact\">ret</span> = vhdx_log_flush(bs, s, &<span class=\"supfact\">logs</span>);\n        if (<span class=\"supfact\">ret</span> >= Number) {\n          v8 = <span class=\"supfact\">logs</span>.log.length;\n          s->log.offset = <span class=\"supfact\">logs</span>.log.offset;\n          s->log.length = v8;\n          v9 = <span class=\"supfact\">logs</span>.log.hdr;\n          *(_QWORD *)&s->log.write = *(_QWORD *)&<span class=\"supfact\">logs</span>.log.write;\n          s->log.hdr = v9;\n          v10 = <span class=\"supfact\">logs</span>.log.sequence;\n          s->log.desc_buffer = <span class=\"supfact\">logs</span>.log.desc_buffer;\n          s->log.sequence = v10;\n          *(_QWORD *)&s->log.tail = *(_QWORD *)&<span class=\"supfact\">logs</span>.log.tail;\n        }\n      }\n    }\n  }\n  return <span class=\"supfact\">ret</span>;\n}", "var": [{"name": "v16", "type": "struct VHDXLogSequence_0 { bool valid; PADDING (3); uint32_t count; VHDXLogEntries_0 log; VHDXLogEntryHeader_0 hdr; }", "ref_name": "logs", "ref_type": "struct VHDXLogSequence_0 { bool valid; PADDING (3); uint32_t count; VHDXLogEntries_0 log; VHDXLogEntryHeader_0 hdr; }"}], "body_in_train": false}, {"repo_owner": "christoph-husse", "repo_name": "isynth", "path": "christoph-husse/isynth/a6c0476d37fab0a2016b706bb595a9db57bad22bae2083133c2d1eeb6cb12f1c", "path_in_repo": "christoph-husse/isynth/dependencies/juce/extras/Introjucer/Builds/Linux/build/intermediate/Debug/juce_events_584896b4.o", "objdump": "0000000000000000 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n   f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  13:\t48 89 c7             \tmov    %rax,%rdi\n  16:\te8 00 00 00 00       \tcallq  1b <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x1b>\n  1b:\t48 89 c2             \tmov    %rax,%rdx\n  1e:\t48 8d 45 ff          \tlea    -0x1(%rbp),%rax\n  22:\t48 89 d6             \tmov    %rdx,%rsi\n  25:\t48 89 c7             \tmov    %rax,%rdi\n  28:\te8 00 00 00 00       \tcallq  2d <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x2d>\n  2d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  31:\t8b 50 10             \tmov    0x10(%rax),%edx\n  34:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  37:\t89 d6                \tmov    %edx,%esi\n  39:\t89 c7                \tmov    %eax,%edi\n  3b:\te8 00 00 00 00       \tcallq  40 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x40>\n  40:\t83 f0 01             \txor    $0x1,%eax\n  43:\t84 c0                \ttest   %al,%al\n  45:\t75 18                \tjne    5f <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x5f>\n  47:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  50:\t48 89 c7             \tmov    %rax,%rdi\n  53:\te8 00 00 00 00       \tcallq  58 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x58>\n  58:\t83 f0 01             \txor    $0x1,%eax\n  5b:\t84 c0                \ttest   %al,%al\n  5d:\t74 07                \tje     66 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x66>\n  5f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  64:\teb 05                \tjmp    6b <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x6b>\n  66:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  6b:\t84 c0                \ttest   %al,%al\n  6d:\t74 27                \tje     96 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x96>\n  6f:\tbe 00 01 00 00       \tmov    $0x100,%esi\n  74:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  79:\te8 00 00 00 00       \tcallq  7e <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x7e>\n  7e:\te8 00 00 00 00       \tcallq  83 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x83>\n  83:\t84 c0                \ttest   %al,%al\n  85:\t74 0f                \tje     96 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x96>\n  87:\tbe 05 00 00 00       \tmov    $0x5,%esi\n  8c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  91:\te8 00 00 00 00       \tcallq  96 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0x96>\n  96:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  9a:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  9d:\t89 d6                \tmov    %edx,%esi\n  9f:\t48 89 c7             \tmov    %rax,%rdi\n  a2:\te8 00 00 00 00       \tcallq  a7 <_ZNK4juce5ArrayIPNS_14ActionListenerENS_20DummyCriticalSectionELi0EE12getUncheckedEi+0xa7>\n  a7:\t48 8b 00             \tmov    (%rax),%rax\n  aa:\tc9                   \tleaveq \n  ab:\tc3                   \tretq   ", "code_s": "__int64 __fastcall juce\n    Array<juce ActionListener *, juce DummyCriticalSection, Number>\n    getUnchecked(__int64 a1, unsigned int a2) {\n  const juce DummyCriticalSection *v2;\n  int v3;\n  char <span class=\"supfact\">v6</span>;\n  v2 = (const juce DummyCriticalSection *)\n      juce Array<juce ActionListener *, juce DummyCriticalSection, Number>\n          getLock(a1);\n  juce DummyCriticalSection ScopedLockType ScopedLockType(\n      (juce DummyCriticalSection ScopedLockType *)&<span class=\"supfact\">v6</span>, v2);\n  if (!juce isPositiveAndBelow<int>(a2, *(_DWORD *)(a1 + Number),\n                                    *(_DWORD *)(a1 + Number)) ||\n      (unsigned __int8)juce HeapBlock<juce ActionListener *, false> operator!=(\n          a1, Number L) != Number) {\n    juce logAssertion((juce *)String, (const char *)&loc_100, v3);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  return *(_QWORD *)juce HeapBlock<juce ActionListener *, false>\n  operator[]<int>(a1, a2);\n}", "code_t": "juce ActionListener *__cdecl juce\n    Array<juce ActionListener *, juce DummyCriticalSection, Number>\n    getUnchecked(\n        const juce Array<juce ActionListener *, juce DummyCriticalSection,\n                         Number> *const this,\n        const int index) {\n  const juce DummyCriticalSection *v2;\n  int v3;\n  juce Array<juce ActionListener *, juce DummyCriticalSection, Number>\n      ScopedLockType <span class=\"supfact\">lock</span>;\n  v2 = juce Array<juce ActionListener *, juce DummyCriticalSection, Number>\n      getLock(this);\n  juce DummyCriticalSection ScopedLockType ScopedLockType(&<span class=\"supfact\">lock</span>,\n                                                          v2);\n  if (!juce isPositiveAndBelow<int>(index, this->numUsed) ||\n      !juce HeapBlock<juce ActionListener *, false> operator!=(\n          &this->data.elements, Number L)) {\n    juce logAssertion((juce *)String, (const char *)&loc_100, v3);\n    if ((unsigned __int8)juce juce_isRunningUnderDebugger(\n            (juce *)String String))\n      kill(Number, Number);\n  }\n  return *juce HeapBlock<juce ActionListener *, false> operator[]<int>(\n      &this->data.elements, index);\n}", "var": [{"name": "v6", "type": "struct juce::Array<juce::ActionListener*,juce::DummyCriticalSection,0>::ScopedLockType { __int8[1] gap0; }", "ref_name": "lock", "ref_type": "struct juce::Array<juce::ActionListener*,juce::DummyCriticalSection,0>::ScopedLockType { __int8[1] gap0; }"}], "body_in_train": false}, {"repo_owner": "FillipeAs", "repo_name": "Linuuux", "path": "FillipeAs/Linuuux/fd7ad9aa5daf535bb2143a788dd93e9b722633273fb7e5ec6202bf4733993d31", "path_in_repo": "FillipeAs/Linuuux/tools/testing/selftests/breakpoints/step_after_suspend_test", "objdump": "0000000000401c66 <main>:\n  401c66:\t55                   \tpush   %rbp\n  401c67:\t48 89 e5             \tmov    %rsp,%rbp\n  401c6a:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  401c71:\t89 bd 5c ff ff ff    \tmov    %edi,-0xa4(%rbp)\n  401c77:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n  401c7e:\tc6 45 ff 01          \tmovb   $0x1,-0x1(%rbp)\n  401c82:\tc6 45 fe 01          \tmovb   $0x1,-0x2(%rbp)\n  401c86:\te8 e3 f5 ff ff       \tcallq  40126e <ksft_print_header>\n  401c8b:\teb 3c                \tjmp    401cc9 <main+0x63>\n  401c8d:\t83 7d f4 6e          \tcmpl   $0x6e,-0xc(%rbp)\n  401c91:\t75 06                \tjne    401c99 <main+0x33>\n  401c93:\tc6 45 ff 00          \tmovb   $0x0,-0x1(%rbp)\n  401c97:\teb 30                \tjmp    401cc9 <main+0x63>\n  401c99:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401ca0:\t48 8b 00             \tmov    (%rax),%rax\n  401ca3:\t48 89 c6             \tmov    %rax,%rsi\n  401ca6:\tbf ef 22 40 00       \tmov    $0x4022ef,%edi\n  401cab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401cb0:\te8 cb f3 ff ff       \tcallq  401080 <printf@plt>\n  401cb5:\tbf 00 23 40 00       \tmov    $0x402300,%edi\n  401cba:\te8 a1 f3 ff ff       \tcallq  401060 <puts@plt>\n  401cbf:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  401cc4:\te9 30 01 00 00       \tjmpq   401df9 <main+0x193>\n  401cc9:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n  401cd0:\t8b 85 5c ff ff ff    \tmov    -0xa4(%rbp),%eax\n  401cd6:\tba 42 23 40 00       \tmov    $0x402342,%edx\n  401cdb:\t48 89 ce             \tmov    %rcx,%rsi\n  401cde:\t89 c7                \tmov    %eax,%edi\n  401ce0:\te8 1b f4 ff ff       \tcallq  401100 <getopt@plt>\n  401ce5:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  401ce8:\t83 7d f4 ff          \tcmpl   $0xffffffff,-0xc(%rbp)\n  401cec:\t75 9f                \tjne    401c8d <main+0x27>\n  401cee:\t80 7d ff 00          \tcmpb   $0x0,-0x1(%rbp)\n  401cf2:\t74 05                \tje     401cf9 <main+0x93>\n  401cf4:\te8 3a fe ff ff       \tcallq  401b33 <suspend>\n  401cf9:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  401d00:\t48 89 c2             \tmov    %rax,%rdx\n  401d03:\tbe 80 00 00 00       \tmov    $0x80,%esi\n  401d08:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401d0d:\te8 1e f4 ff ff       \tcallq  401130 <sched_getaffinity@plt>\n  401d12:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  401d15:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n  401d19:\t79 0f                \tjns    401d2a <main+0xc4>\n  401d1b:\tbf 44 23 40 00       \tmov    $0x402344,%edi\n  401d20:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401d25:\te8 e1 f7 ff ff       \tcallq  40150b <ksft_exit_fail_msg>\n  401d2a:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  401d31:\te9 9f 00 00 00       \tjmpq   401dd5 <main+0x16f>\n  401d36:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  401d39:\t48 98                \tcltq   \n  401d3b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  401d3f:\t48 81 7d e8 ff 03 00 \tcmpq   $0x3ff,-0x18(%rbp)\n  401d46:\t00 \n  401d47:\t77 3b                \tja     401d84 <main+0x11e>\n  401d49:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401d4d:\t48 c1 e8 06          \tshr    $0x6,%rax\n  401d51:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  401d58:\t00 \n  401d59:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  401d60:\t48 01 d0             \tadd    %rdx,%rax\n  401d63:\t48 8b 10             \tmov    (%rax),%rdx\n  401d66:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401d6a:\t83 e0 3f             \tand    $0x3f,%eax\n  401d6d:\t89 c1                \tmov    %eax,%ecx\n  401d6f:\t48 d3 ea             \tshr    %cl,%rdx\n  401d72:\t48 89 d0             \tmov    %rdx,%rax\n  401d75:\t83 e0 01             \tand    $0x1,%eax\n  401d78:\t48 85 c0             \ttest   %rax,%rax\n  401d7b:\t74 07                \tje     401d84 <main+0x11e>\n  401d7d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401d82:\teb 05                \tjmp    401d89 <main+0x123>\n  401d84:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401d89:\t85 c0                \ttest   %eax,%eax\n  401d8b:\t74 43                \tje     401dd0 <main+0x16a>\n  401d8d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  401d90:\t89 c7                \tmov    %eax,%edi\n  401d92:\te8 62 fa ff ff       \tcallq  4017f9 <run_test>\n  401d97:\t88 45 e7             \tmov    %al,-0x19(%rbp)\n  401d9a:\t80 7d e7 00          \tcmpb   $0x0,-0x19(%rbp)\n  401d9e:\t74 16                \tje     401db6 <main+0x150>\n  401da0:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  401da3:\t89 c6                \tmov    %eax,%esi\n  401da5:\tbf 60 23 40 00       \tmov    $0x402360,%edi\n  401daa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401daf:\te8 99 f5 ff ff       \tcallq  40134d <ksft_test_result_pass>\n  401db4:\teb 1b                \tjmp    401dd1 <main+0x16b>\n  401db6:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  401db9:\t89 c6                \tmov    %eax,%esi\n  401dbb:\tbf 60 23 40 00       \tmov    $0x402360,%edi\n  401dc0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401dc5:\te8 4a f6 ff ff       \tcallq  401414 <ksft_test_result_fail>\n  401dca:\tc6 45 fe 00          \tmovb   $0x0,-0x2(%rbp)\n  401dce:\teb 01                \tjmp    401dd1 <main+0x16b>\n  401dd0:\t90                   \tnop\n  401dd1:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  401dd5:\t81 7d f8 ff 03 00 00 \tcmpl   $0x3ff,-0x8(%rbp)\n  401ddc:\t0f 8e 54 ff ff ff    \tjle    401d36 <main+0xd0>\n  401de2:\t80 7d fe 00          \tcmpb   $0x0,-0x2(%rbp)\n  401de6:\t74 07                \tje     401def <main+0x189>\n  401de8:\te8 ee f6 ff ff       \tcallq  4014db <ksft_exit_pass>\n  401ded:\teb 05                \tjmp    401df4 <main+0x18e>\n  401def:\te8 fa f6 ff ff       \tcallq  4014ee <ksft_exit_fail>\n  401df4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401df9:\tc9                   \tleaveq \n  401dfa:\tc3                   \tretq   \n  401dfb:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  cpu_set_t <span class=\"supfact\">cpuset</span>;\n  unsigned __int64 <span class=\"supfact\">v15</span>;\n  int <span class=\"supfact\">v16</span>;\n  int <span class=\"supfact\">v17</span>;\n  unsigned int <span class=\"supfact\">i</span>;\n  char <span class=\"supfact\">v19</span>;\n  char <span class=\"supfact\">v20</span>;\n  <span class=\"supfact\">v20</span> = Number;\n  <span class=\"supfact\">v19</span> = Number;\n  ksft_print_header();\n  while (Number) {\n    <span class=\"supfact\">v17</span> = getopt(argc, (char *const *)argv, String);\n    if (<span class=\"supfact\">v17</span> == Number) {\n      if (<span class=\"supfact\">v20</span>)\n        suspend();\n      <span class=\"supfact\">v16</span> =\n          sched_getaffinity(Number, Number, &<span class=\"supfact\">cpuset</span>);\n      if (<span class=\"supfact\">v16</span> < Number)\n        ksft_exit_fail_msg(String, Number L, v4, v5, v6, v7);\n      for (<span class=\"supfact\">i</span> = Number; (int)<span class=\"supfact\">i</span> <= Number;\n           ++<span class=\"supfact\">i</span>) {\n        <span class=\"supfact\">v15</span> = (int)<span class=\"supfact\">i</span>;\n        if ((unsigned __int64)(int)<span class=\"supfact\">i</span> <= Number &&\n            ((<span class=\"supfact\">cpuset</span>.__bits[<span class=\"supfact\">v15</span> >> Number] >>\n              (<span class=\"supfact\">v15</span> & Number)) &\n             Number) != Number) {\n          if ((unsigned __int8)run_test(<span class=\"supfact\">i</span>)) {\n            ksft_test_result_pass(String, <span class=\"supfact\">i</span>, v9, v10, v11, v12);\n          } else {\n            ksft_test_result_fail(String, <span class=\"supfact\">i</span>, v9, v10, v11, v12);\n            <span class=\"supfact\">v19</span> = Number;\n          }\n        }\n      }\n      if (<span class=\"supfact\">v19</span>)\n        ksft_exit_pass();\n      ksft_exit_fail();\n    }\n    if (<span class=\"supfact\">v17</span> != Number)\n      break;\n    <span class=\"supfact\">v20</span> = Number;\n  }\n  printf(String, *argv);\n  puts(String);\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  cpu_set_t <span class=\"supfact\">available_cpus</span>;\n  size_t <span class=\"supfact\">__cpu</span>;\n  int <span class=\"supfact\">err</span>;\n  int <span class=\"supfact\">opt</span>;\n  int <span class=\"supfact\">cpu</span>;\n  bool <span class=\"supfact\">succeeded</span>;\n  bool <span class=\"supfact\">do_suspend</span>;\n  <span class=\"supfact\">do_suspend</span> = Number;\n  <span class=\"supfact\">succeeded</span> = Number;\n  ksft_print_header();\n  while (Number) {\n    <span class=\"supfact\">opt</span> = getopt(argc, (char *const *)argv, String);\n    if (<span class=\"supfact\">opt</span> == Number) {\n      if (<span class=\"supfact\">do_suspend</span>)\n        suspend();\n      <span class=\"supfact\">err</span> =\n          sched_getaffinity(Number, Number, &<span class=\"supfact\">available_cpus</span>);\n      if (<span class=\"supfact\">err</span> < Number)\n        ksft_exit_fail_msg(String);\n      for (<span class=\"supfact\">cpu</span> = Number; <span class=\"supfact\">cpu</span> <= Number;\n           ++<span class=\"supfact\">cpu</span>) {\n        <span class=\"supfact\">__cpu</span> = <span class=\"supfact\">cpu</span>;\n        if ((unsigned __int64)<span class=\"supfact\">cpu</span> <= Number &&\n            ((<span class=\"supfact\">available_cpus</span>\n                  .__bits[<span class=\"supfact\">__cpu</span> >> Number] >>\n              (<span class=\"supfact\">__cpu</span> & Number)) &\n             Number) != Number) {\n          if (run_test(<span class=\"supfact\">cpu</span>)) {\n            ksft_test_result_pass(String, (unsigned int)<span class=\"supfact\">cpu</span>);\n          } else {\n            ksft_test_result_fail(String, (unsigned int)<span class=\"supfact\">cpu</span>);\n            <span class=\"supfact\">succeeded</span> = Number;\n          }\n        }\n      }\n      if (<span class=\"supfact\">succeeded</span>)\n        ksft_exit_pass();\n      ksft_exit_fail();\n    }\n    if (<span class=\"supfact\">opt</span> != Number)\n      break;\n    <span class=\"supfact\">do_suspend</span> = Number;\n  }\n  printf(String, *argv);\n  puts(String);\n  return Number;\n}", "var": [{"name": "cpuset", "type": "struct cpu_set_t { __cpu_mask[16] __bits; }", "ref_name": "available_cpus", "ref_type": "struct cpu_set_t { __cpu_mask[16] __bits; }"}], "body_in_train": false}, {"repo_owner": "bigbluesky123", "repo_name": "decaf-platform", "path": "bigbluesky123/decaf-platform/d7bce523daa6d847a48e99e4aefacbcf892d5f860ef0450f760cbe00a26adff8", "path_in_repo": "bigbluesky123/decaf-platform//libhw32/9pfs/virtio-9p.o", "objdump": "0000000000009335 <v9fs_statfs>:\n    9335:\t55                   \tpush   %rbp\n    9336:\t48 89 e5             \tmov    %rsp,%rbp\n    9339:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    9340:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n    9347:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    934e:\t00 00 \n    9350:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    9354:\t31 c0                \txor    %eax,%eax\n    9356:\t48 c7 85 58 ff ff ff \tmovq   $0x0,-0xa8(%rbp)\n    935d:\t00 00 00 00 \n    9361:\t48 c7 85 60 ff ff ff \tmovq   $0x7,-0xa0(%rbp)\n    9368:\t07 00 00 00 \n    936c:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n    9373:\t48 89 85 68 ff ff ff \tmov    %rax,-0x98(%rbp)\n    937a:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    9381:\t48 8b 80 28 a0 00 00 \tmov    0xa028(%rax),%rax\n    9388:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n    938f:\t48 8d 95 54 ff ff ff \tlea    -0xac(%rbp),%rdx\n    9396:\t48 8b b5 60 ff ff ff \tmov    -0xa0(%rbp),%rsi\n    939d:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    93a4:\t48 89 d1             \tmov    %rdx,%rcx\n    93a7:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 93ae <v9fs_statfs+0x79>\n    93ae:\t48 89 c7             \tmov    %rax,%rdi\n    93b1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    93b6:\te8 27 94 ff ff       \tcallq  27e2 <pdu_unmarshal>\n    93bb:\t8b 95 54 ff ff ff    \tmov    -0xac(%rbp),%edx\n    93c1:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    93c8:\t89 d6                \tmov    %edx,%esi\n    93ca:\t48 89 c7             \tmov    %rax,%rdi\n    93cd:\te8 f7 82 ff ff       \tcallq  16c9 <get_fid>\n    93d2:\t48 89 85 78 ff ff ff \tmov    %rax,-0x88(%rbp)\n    93d9:\t48 83 bd 78 ff ff ff \tcmpq   $0x0,-0x88(%rbp)\n    93e0:\t00 \n    93e1:\t75 10                \tjne    93f3 <v9fs_statfs+0xbe>\n    93e3:\t48 c7 85 58 ff ff ff \tmovq   $0xfffffffffffffffe,-0xa8(%rbp)\n    93ea:\tfe ff ff ff \n    93ee:\te9 84 00 00 00       \tjmpq   9477 <v9fs_statfs+0x142>\n    93f3:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    93fa:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n    93fe:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    9402:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    9409:\t48 89 ce             \tmov    %rcx,%rsi\n    940c:\t48 89 c7             \tmov    %rax,%rdi\n    940f:\te8 00 00 00 00       \tcallq  9414 <v9fs_statfs+0xdf>\n    9414:\t48 98                \tcltq   \n    9416:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n    941d:\t48 83 bd 58 ff ff ff \tcmpq   $0x0,-0xa8(%rbp)\n    9424:\t00 \n    9425:\t78 36                \tjs     945d <v9fs_statfs+0x128>\n    9427:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    942e:\t48 89 85 58 ff ff ff \tmov    %rax,-0xa8(%rbp)\n    9435:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    9439:\t48 8b 8d 68 ff ff ff \tmov    -0x98(%rbp),%rcx\n    9440:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n    9447:\t48 89 ce             \tmov    %rcx,%rsi\n    944a:\t48 89 c7             \tmov    %rax,%rdi\n    944d:\te8 82 fd ff ff       \tcallq  91d4 <v9fs_fill_statfs>\n    9452:\t48 98                \tcltq   \n    9454:\t48 01 85 58 ff ff ff \tadd    %rax,-0xa8(%rbp)\n    945b:\teb 01                \tjmp    945e <v9fs_statfs+0x129>\n    945d:\t90                   \tnop\n    945e:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    9465:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    946c:\t48 89 d6             \tmov    %rdx,%rsi\n    946f:\t48 89 c7             \tmov    %rax,%rdi\n    9472:\te8 6a 86 ff ff       \tcallq  1ae1 <put_fid>\n    9477:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n    947e:\t48 8b 8d 68 ff ff ff \tmov    -0x98(%rbp),%rcx\n    9485:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n    948c:\t48 89 ce             \tmov    %rcx,%rsi\n    948f:\t48 89 c7             \tmov    %rax,%rdi\n    9492:\te8 a3 a4 ff ff       \tcallq  393a <complete_pdu>\n    9497:\t90                   \tnop\n    9498:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    949c:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    94a3:\t00 00 \n    94a5:\t74 05                \tje     94ac <v9fs_statfs+0x177>\n    94a7:\te8 00 00 00 00       \tcallq  94ac <v9fs_statfs+0x177>\n    94ac:\tc9                   \tleaveq \n    94ad:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall v9fs_statfs(__int64 a1, __int64 a2, __int64 a3,\n                                        __int64 a4, __int64 a5, __int64 a6) {\n  __int64 v6;\n  __int64 v7;\n  int v8;\n  int <span class=\"supfact\">v10</span>;\n  __int64 <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 <span class=\"supfact\">v13</span>;\n  __int64 <span class=\"supfact\">v14</span>;\n  _DWORD *<span class=\"supfact\">v15</span>;\n  char <span class=\"supfact\">v16</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v17</span>;\n  <span class=\"supfact\">v17</span> = __readfsqword(Number);\n  <span class=\"supfact\">v11</span> = Number L;\n  <span class=\"supfact\">v12</span> = Number L;\n  <span class=\"supfact\">v13</span> = a1;\n  <span class=\"supfact\">v14</span> = *(_QWORD *)(a1 + Number);\n  pdu_unmarshal(a1, Number L, (__int64)&unk_ACCA, (__int64)&<span class=\"supfact\">v10</span>,\n                a5, a6);\n  <span class=\"supfact\">v15</span> =\n      (_DWORD *)get_fid(<span class=\"supfact\">v13</span>, <span class=\"supfact\">v10</span>);\n  if (<span class=\"supfact\">v15</span>) {\n    <span class=\"supfact\">v11</span> = (int)v9fs_co_statfs(\n        <span class=\"supfact\">v13</span>, <span class=\"supfact\">v15</span> + Number, <span class=\"supfact\">v16</span>);\n    if (<span class=\"supfact\">v11</span> >= Number) {\n      <span class=\"supfact\">v11</span> = <span class=\"supfact\">v12</span>;\n      v8 = v9fs_fill_statfs(<span class=\"supfact\">v14</span>, <span class=\"supfact\">v13</span>,\n                            (__int64)<span class=\"supfact\">v16</span>);\n      <span class=\"supfact\">v11</span> += v8;\n    }\n    put_fid(<span class=\"supfact\">v13</span>, <span class=\"supfact\">v15</span>);\n  } else {\n    <span class=\"supfact\">v11</span> = Number;\n  }\n  complete_pdu(<span class=\"supfact\">v14</span>, <span class=\"supfact\">v13</span>, <span class=\"supfact\">v11</span>,\n               <span class=\"supfact\">v13</span>, v6, v7);\n  return __readfsqword(Number) ^ <span class=\"supfact\">v17</span>;\n}", "code_t": "void __cdecl v9fs_statfs(void *opaque) {\n  int v1;\n  int32_t <span class=\"supfact\">fid</span>;\n  ssize_t <span class=\"supfact\">retval</span>;\n  size_t <span class=\"supfact\">offset</span>;\n  V9fsPDU_0 *<span class=\"supfact\">pdu</span>;\n  V9fsState_0 *<span class=\"supfact\">s</span>;\n  V9fsFidState_0 *<span class=\"supfact\">fidp</span>;\n  statfs <span class=\"supfact\">stbuf</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  <span class=\"supfact\">retval</span> = Number L;\n  <span class=\"supfact\">offset</span> = Number L;\n  <span class=\"supfact\">pdu</span> = (V9fsPDU_0 *)opaque;\n  <span class=\"supfact\">s</span> = (V9fsState_0 *)*((_QWORD *)opaque + Number);\n  pdu_unmarshal((V9fsPDU_0 *)opaque, Number, String, &<span class=\"supfact\">fid</span>);\n  <span class=\"supfact\">fidp</span> = get_fid(<span class=\"supfact\">pdu</span>, <span class=\"supfact\">fid</span>);\n  if (<span class=\"supfact\">fidp</span>) {\n    <span class=\"supfact\">retval</span> =\n        (int)v9fs_co_statfs(<span class=\"supfact\">pdu</span>, &<span class=\"supfact\">fidp</span>->path,\n                            &<span class=\"supfact\">stbuf</span>);\n    if (<span class=\"supfact\">retval</span> >= Number) {\n      <span class=\"supfact\">retval</span> = <span class=\"supfact\">offset</span>;\n      v1 = v9fs_fill_statfs(<span class=\"supfact\">s</span>, <span class=\"supfact\">pdu</span>,\n                            &<span class=\"supfact\">stbuf</span>);\n      <span class=\"supfact\">retval</span> += v1;\n    }\n    put_fid(<span class=\"supfact\">pdu</span>, <span class=\"supfact\">fidp</span>);\n  } else {\n    <span class=\"supfact\">retval</span> = Number;\n  }\n  complete_pdu(<span class=\"supfact\">s</span>, <span class=\"supfact\">pdu</span>, <span class=\"supfact\">retval</span>);\n}", "var": [{"name": "v16", "type": "struct V9fsQID_0 { int8_t type; PADDING (3); int32_t version; int64_t path; }", "ref_name": "stbuf", "ref_type": "struct statfs { __fsword_t f_type; __fsword_t f_bsize; __fsblkcnt64_t f_blocks; __fsblkcnt64_t f_bfree; __fsblkcnt64_t f_bavail; __fsfilcnt64_t f_files; __fsfilcnt64_t f_ffree; __fsid_t f_fsid; __fsword_t f_namelen; __fsword_t f_frsize; __fsword_t f_flags; __fsword_t[4] f_spare; }"}], "body_in_train": false}, {"repo_owner": "mannannlegur", "repo_name": "CTU-FIT-Bachelor", "path": "mannannlegur/CTU-FIT-Bachelor/d8edbf383dfe6ba3837f34c3bb39d9c6ff4b609fee00dd96f08ef3cd000f39eb", "path_in_repo": "mannannlegur/CTU-FIT-Bachelor/PA2/ASCII-Plot/ASCII-Plot/obj/CBarChart.o", "objdump": "", "code_s": "__int64 __fastcall std vector<double> vector(__int64 *a1, __int64 *a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 result;\n  char <span class=\"supfact\">v8</span>[Number];\n  v2 = std _Vector_base<double> _M_get_Tp_allocator(a2);\n  __gnu_cxx __alloc_traits<std allocator<double>, double> _S_select_on_copy(\n      <span class=\"supfact\">v8</span>, v2);\n  v3 = std vector<double> size(a2);\n  std _Vector_base<double> _Vector_base((__int64)a1, v3,\n                                        (__int64)<span class=\"supfact\">v8</span>);\n  std allocator<double> ~allocator((__int64)<span class=\"supfact\">v8</span>);\n  std _Vector_base<double> _M_get_Tp_allocator((__int64)a1);\n  v4 = *a1;\n  v5 = std vector<double> end((__int64)a2);\n  v6 = std vector<double> begin(a2);\n  result = std __uninitialized_copy_a<\n      __gnu_cxx __normal_iterator<double const *, std vector<double>>, double *,\n      double>(v6, v5, v4);\n  a1[Number] = result;\n  return result;\n}", "code_t": "void __cdecl std vector<double> vector(std vector<double> *const this,\n                                       const std vector<double> *__x) {\n  std size_t v2;\n  std allocator<double> *v3;\n  double *v4;\n  const double *v5;\n  std vector<double> const_iterator v6;\n  std allocator<double> <span class=\"supfact\">__a</span>;\n  std _Vector_base<double> _M_get_Tp_allocator(__x);\n  __gnu_cxx __alloc_traits<std allocator<double>, double> _S_select_on_copy(\n      &<span class=\"supfact\">__a</span>);\n  v2 = std vector<double> size(__x);\n  std _Vector_base<double> _Vector_base(this, v2, &<span class=\"supfact\">__a</span>);\n  std allocator<double> ~allocator(&<span class=\"supfact\">__a</span>);\n  v3 = std _Vector_base<double> _M_get_Tp_allocator(this);\n  v4 = this->_M_impl._M_start;\n  v5 = std vector<double> end(__x)._M_current;\n  *(std vector<double> const_iterator *)&v6._M_current =\n      (std vector<double> const_iterator)std vector<double> begin(__x)\n          ._M_current;\n  this->_M_impl._M_finish = std __uninitialized_copy_a<\n      __gnu_cxx __normal_iterator<double const *, std vector<double>>, double *,\n      double>(\n      v6, (__gnu_cxx __normal_iterator<double const *, std vector<double>>)v5,\n      v4, v3);\n}", "var": [{"name": "v8", "type": "struct std::allocator<double> { __gnu_cxx::new_allocator<double> baseclass_0; }", "ref_name": "__a", "ref_type": "struct std::allocator<double> { __gnu_cxx::new_allocator<double> baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "jcalvinowens", "repo_name": "miscellaneous", "path": "jcalvinowens/miscellaneous/12fac9f19c58e866794a18e9046366a511e377149bce9c1a496defe0102da01d", "path_in_repo": "jcalvinowens/miscellaneous/benchmarks/test-zero", "objdump": "000000000040136f <main>:\n  40136f:\t55                   \tpush   %rbp\n  401370:\t48 89 e5             \tmov    %rsp,%rbp\n  401373:\t48 83 ec 50          \tsub    $0x50,%rsp\n  401377:\tbf 00 10 00 00       \tmov    $0x1000,%edi\n  40137c:\te8 a5 ff ff ff       \tcallq  401326 <alloc_buffer>\n  401381:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401385:\tc7 45 ec 08 00 00 00 \tmovl   $0x8,-0x14(%rbp)\n  40138c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40138f:\t89 c2                \tmov    %eax,%edx\n  401391:\tbe 80 96 98 00       \tmov    $0x989680,%esi\n  401396:\tbf 98 20 40 00       \tmov    $0x402098,%edi\n  40139b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013a0:\te8 bb fc ff ff       \tcallq  401060 <printf@plt>\n  4013a5:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4013ac:\te9 ea 00 00 00       \tjmpq   40149b <main+0x12c>\n  4013b1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4013b4:\t48 98                \tcltq   \n  4013b6:\t48 c1 e0 04          \tshl    $0x4,%rax\n  4013ba:\t48 05 60 40 40 00    \tadd    $0x404060,%rax\n  4013c0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4013c4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4013c8:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4013cc:\t48 89 c6             \tmov    %rax,%rsi\n  4013cf:\tbf b7 20 40 00       \tmov    $0x4020b7,%edi\n  4013d4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013d9:\te8 82 fc ff ff       \tcallq  401060 <printf@plt>\n  4013de:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4013e2:\t48 89 c6             \tmov    %rax,%rsi\n  4013e5:\tbf 04 00 00 00       \tmov    $0x4,%edi\n  4013ea:\te8 51 fc ff ff       \tcallq  401040 <clock_gettime@plt>\n  4013ef:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4013f6:\teb 1c                \tjmp    401414 <main+0xa5>\n  4013f8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4013fc:\t48 8b 10             \tmov    (%rax),%rdx\n  4013ff:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401403:\tbe 00 10 00 00       \tmov    $0x1000,%esi\n  401408:\t48 89 c7             \tmov    %rax,%rdi\n  40140b:\tff d2                \tcallq  *%rdx\n  40140d:\t0f ae f8             \tsfence \n  401410:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  401414:\t81 7d f8 7f 96 98 00 \tcmpl   $0x98967f,-0x8(%rbp)\n  40141b:\t7e db                \tjle    4013f8 <main+0x89>\n  40141d:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  401421:\t48 89 c6             \tmov    %rax,%rsi\n  401424:\tbf 04 00 00 00       \tmov    $0x4,%edi\n  401429:\te8 12 fc ff ff       \tcallq  401040 <clock_gettime@plt>\n  40142e:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  401432:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  401436:\t48 29 c2             \tsub    %rax,%rdx\n  401439:\t48 89 d0             \tmov    %rdx,%rax\n  40143c:\t48 69 c0 00 ca 9a 3b \timul   $0x3b9aca00,%rax,%rax\n  401443:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  401447:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  40144b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  40144f:\t48 29 c2             \tsub    %rax,%rdx\n  401452:\t48 89 d0             \tmov    %rdx,%rax\n  401455:\t48 01 45 d8          \tadd    %rax,-0x28(%rbp)\n  401459:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  40145d:\t48 ba bd 42 7a e5 d5 \tmovabs $0xd6bf94d5e57a42bd,%rdx\n  401464:\t94 bf d6 \n  401467:\t48 89 c8             \tmov    %rcx,%rax\n  40146a:\t48 f7 ea             \timul   %rdx\n  40146d:\t48 8d 04 0a          \tlea    (%rdx,%rcx,1),%rax\n  401471:\t48 c1 f8 17          \tsar    $0x17,%rax\n  401475:\t48 89 c2             \tmov    %rax,%rdx\n  401478:\t48 89 c8             \tmov    %rcx,%rax\n  40147b:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n  40147f:\t48 29 c2             \tsub    %rax,%rdx\n  401482:\t48 89 d0             \tmov    %rdx,%rax\n  401485:\t48 89 c6             \tmov    %rax,%rsi\n  401488:\tbf bc 20 40 00       \tmov    $0x4020bc,%edi\n  40148d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401492:\te8 c9 fb ff ff       \tcallq  401060 <printf@plt>\n  401497:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40149b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40149e:\t3b 45 ec             \tcmp    -0x14(%rbp),%eax\n  4014a1:\t0f 8c 0a ff ff ff    \tjl     4013b1 <main+0x42>\n  4014a7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4014ac:\tc9                   \tleaveq \n  4014ad:\tc3                   \tretq   \n  4014ae:\t66 90                \txchg   %ax,%ax", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  struct timespec <span class=\"supfact\">v4</span>;\n  struct timespec <span class=\"supfact\">tp</span>;\n  __time_t <span class=\"supfact\">v6</span>;\n  void(__fastcall * *<span class=\"supfact\">v7</span>)(void *, __int64);\n  int <span class=\"supfact\">v8</span>;\n  void *<span class=\"supfact\">v9</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v9</span> = alloc_buffer(Number);\n  <span class=\"supfact\">v8</span> = Number;\n  printf(String, Number L, Number L);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">v8</span>;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">v7</span> = (void(__fastcall **)(void *, __int64))(\n        Number L * <span class=\"supfact\">i</span> + Number);\n    printf(String, (&off_404068)[Number * <span class=\"supfact\">i</span>]);\n    clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      (*<span class=\"supfact\">v7</span>)(<span class=\"supfact\">v9</span>, Number L);\n      _mm_sfence();\n    }\n    clock_gettime(Number, &<span class=\"supfact\">v4</span>);\n    <span class=\"supfact\">v6</span> =\n        Number * (<span class=\"supfact\">v4</span>.tv_sec - <span class=\"supfact\">tp</span>.tv_sec);\n    <span class=\"supfact\">v6</span> +=\n        <span class=\"supfact\">v4</span>.tv_nsec - <span class=\"supfact\">tp</span>.tv_nsec;\n    printf(String, <span class=\"supfact\">v6</span> / Number);\n  }\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  timespec <span class=\"supfact\">now</span>;\n  timespec <span class=\"supfact\">then</span>;\n  __int64 <span class=\"supfact\">nsec_elapsed</span>;\n  zero_func *<span class=\"supfact\">cur</span>;\n  int <span class=\"supfact\">nr_tests</span>;\n  char *<span class=\"supfact\">dst_buf</span>;\n  int <span class=\"supfact\">j</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">dst_buf</span> = (char *)alloc_buffer(Number);\n  <span class=\"supfact\">nr_tests</span> = Number;\n  printf(String, Number L, Number L);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> < <span class=\"supfact\">nr_tests</span>;\n       ++<span class=\"supfact\">i</span>) {\n    <span class=\"supfact\">cur</span> = (zero_func *)(Number L * <span class=\"supfact\">i</span> + Number);\n    printf(String, funcs[<span class=\"supfact\">i</span>].name);\n    clock_gettime(Number, &<span class=\"supfact\">then</span>);\n    for (<span class=\"supfact\">j</span> = Number; <span class=\"supfact\">j</span> <= Number;\n         ++<span class=\"supfact\">j</span>) {\n      <span class=\"supfact\">cur</span>->func(<span class=\"supfact\">dst_buf</span>, Number L);\n      _mm_sfence();\n    }\n    clock_gettime(Number, &<span class=\"supfact\">now</span>);\n    <span class=\"supfact\">nsec_elapsed</span> =\n        Number * (<span class=\"supfact\">now</span>.tv_sec - <span class=\"supfact\">then</span>.tv_sec);\n    <span class=\"supfact\">nsec_elapsed</span> +=\n        <span class=\"supfact\">now</span>.tv_nsec - <span class=\"supfact\">then</span>.tv_nsec;\n    printf(String, <span class=\"supfact\">nsec_elapsed</span> / Number);\n  }\n  return Number;\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "then", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}, {"name": "v4", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "ref_name": "now", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "archos-sa", "repo_name": "libav-avp", "path": "archos-sa/libav-avp/f2a993cd0e36072ce306124d64bd06b06c72cc3d5965c60eb3ca2b97c77e5651", "path_in_repo": "archos-sa/libav-avp//libavcodec/huffyuvdec.o", "objdump": "0000000000000d9e <read_old_huffman_tables>:\n     d9e:\t48 83 ec 48          \tsub    $0x48,%rsp\n     da2:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n     da7:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n     dac:\tba 50 01 00 00       \tmov    $0x150,%edx\n     db1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     db6:\t48 89 c7             \tmov    %rax,%rdi\n     db9:\te8 f1 f3 ff ff       \tcallq  1af <init_get_bits>\n     dbe:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n     dc2:\t83 7c 24 38 00       \tcmpl   $0x0,0x38(%rsp)\n     dc7:\t79 09                \tjns    dd2 <read_old_huffman_tables+0x34>\n     dc9:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n     dcd:\te9 b8 02 00 00       \tjmpq   108a <read_old_huffman_tables+0x2ec>\n     dd2:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     dd7:\t48 8d 90 a0 18 00 00 \tlea    0x18a0(%rax),%rdx\n     dde:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n     de3:\t48 89 c6             \tmov    %rax,%rsi\n     de6:\t48 89 d7             \tmov    %rdx,%rdi\n     de9:\te8 e8 f5 ff ff       \tcallq  3d6 <read_len_table>\n     dee:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n     df2:\t83 7c 24 38 00       \tcmpl   $0x0,0x38(%rsp)\n     df7:\t79 09                \tjns    e02 <read_old_huffman_tables+0x64>\n     df9:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n     dfd:\te9 88 02 00 00       \tjmpq   108a <read_old_huffman_tables+0x2ec>\n     e02:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n     e07:\tba d8 01 00 00       \tmov    $0x1d8,%edx\n     e0c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     e11:\t48 89 c7             \tmov    %rax,%rdi\n     e14:\te8 96 f3 ff ff       \tcallq  1af <init_get_bits>\n     e19:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n     e1d:\t83 7c 24 38 00       \tcmpl   $0x0,0x38(%rsp)\n     e22:\t79 09                \tjns    e2d <read_old_huffman_tables+0x8f>\n     e24:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n     e28:\te9 5d 02 00 00       \tjmpq   108a <read_old_huffman_tables+0x2ec>\n     e2d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     e32:\t48 8d 90 a0 19 00 00 \tlea    0x19a0(%rax),%rdx\n     e39:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n     e3e:\t48 89 c6             \tmov    %rax,%rsi\n     e41:\t48 89 d7             \tmov    %rdx,%rdi\n     e44:\te8 8d f5 ff ff       \tcallq  3d6 <read_len_table>\n     e49:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n     e4d:\t83 7c 24 38 00       \tcmpl   $0x0,0x38(%rsp)\n     e52:\t79 09                \tjns    e5d <read_old_huffman_tables+0xbf>\n     e54:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n     e58:\te9 2d 02 00 00       \tjmpq   108a <read_old_huffman_tables+0x2ec>\n     e5d:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n     e64:\t00 \n     e65:\teb 2b                \tjmp    e92 <read_old_huffman_tables+0xf4>\n     e67:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n     e6b:\t48 98                \tcltq   \n     e6d:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n     e74:\t0f b6 d0             \tmovzbl %al,%edx\n     e77:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     e7c:\t8b 4c 24 3c          \tmov    0x3c(%rsp),%ecx\n     e80:\t48 63 c9             \tmovslq %ecx,%rcx\n     e83:\t48 81 c1 e8 06 00 00 \tadd    $0x6e8,%rcx\n     e8a:\t89 14 88             \tmov    %edx,(%rax,%rcx,4)\n     e8d:\t83 44 24 3c 01       \taddl   $0x1,0x3c(%rsp)\n     e92:\t81 7c 24 3c ff 00 00 \tcmpl   $0xff,0x3c(%rsp)\n     e99:\t00 \n     e9a:\t7e cb                \tjle    e67 <read_old_huffman_tables+0xc9>\n     e9c:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n     ea3:\t00 \n     ea4:\teb 2b                \tjmp    ed1 <read_old_huffman_tables+0x133>\n     ea6:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n     eaa:\t48 98                \tcltq   \n     eac:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n     eb3:\t0f b6 d0             \tmovzbl %al,%edx\n     eb6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     ebb:\t8b 4c 24 3c          \tmov    0x3c(%rsp),%ecx\n     ebf:\t48 63 c9             \tmovslq %ecx,%rcx\n     ec2:\t48 81 c1 e8 07 00 00 \tadd    $0x7e8,%rcx\n     ec9:\t89 14 88             \tmov    %edx,(%rax,%rcx,4)\n     ecc:\t83 44 24 3c 01       \taddl   $0x1,0x3c(%rsp)\n     ed1:\t81 7c 24 3c ff 00 00 \tcmpl   $0xff,0x3c(%rsp)\n     ed8:\t00 \n     ed9:\t7e cb                \tjle    ea6 <read_old_huffman_tables+0x108>\n     edb:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     ee0:\t8b 40 60             \tmov    0x60(%rax),%eax\n     ee3:\t83 f8 17             \tcmp    $0x17,%eax\n     ee6:\t7e 4e                \tjle    f36 <read_old_huffman_tables+0x198>\n     ee8:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     eed:\t48 8d 88 a0 1b 00 00 \tlea    0x1ba0(%rax),%rcx\n     ef4:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     ef9:\t48 05 a0 1f 00 00    \tadd    $0x1fa0,%rax\n     eff:\tba 00 04 00 00       \tmov    $0x400,%edx\n     f04:\t48 89 ce             \tmov    %rcx,%rsi\n     f07:\t48 89 c7             \tmov    %rax,%rdi\n     f0a:\te8 00 00 00 00       \tcallq  f0f <read_old_huffman_tables+0x171>\n     f0f:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f14:\t48 8d 88 a0 18 00 00 \tlea    0x18a0(%rax),%rcx\n     f1b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f20:\t48 05 a0 19 00 00    \tadd    $0x19a0,%rax\n     f26:\tba 00 01 00 00       \tmov    $0x100,%edx\n     f2b:\t48 89 ce             \tmov    %rcx,%rsi\n     f2e:\t48 89 c7             \tmov    %rax,%rdi\n     f31:\te8 00 00 00 00       \tcallq  f36 <read_old_huffman_tables+0x198>\n     f36:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f3b:\t48 8d 88 a0 1f 00 00 \tlea    0x1fa0(%rax),%rcx\n     f42:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f47:\t48 05 a0 23 00 00    \tadd    $0x23a0,%rax\n     f4d:\tba 00 04 00 00       \tmov    $0x400,%edx\n     f52:\t48 89 ce             \tmov    %rcx,%rsi\n     f55:\t48 89 c7             \tmov    %rax,%rdi\n     f58:\te8 00 00 00 00       \tcallq  f5d <read_old_huffman_tables+0x1bf>\n     f5d:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f62:\t48 8d 88 a0 19 00 00 \tlea    0x19a0(%rax),%rcx\n     f69:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     f6e:\t48 05 a0 1a 00 00    \tadd    $0x1aa0,%rax\n     f74:\tba 00 01 00 00       \tmov    $0x100,%edx\n     f79:\t48 89 ce             \tmov    %rcx,%rsi\n     f7c:\t48 89 c7             \tmov    %rax,%rdi\n     f7f:\te8 00 00 00 00       \tcallq  f84 <read_old_huffman_tables+0x1e6>\n     f84:\tc7 44 24 3c 00 00 00 \tmovl   $0x0,0x3c(%rsp)\n     f8b:\t00 \n     f8c:\te9 cb 00 00 00       \tjmpq   105c <read_old_huffman_tables+0x2be>\n     f91:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n     f95:\t48 63 d0             \tmovslq %eax,%rdx\n     f98:\t48 89 d0             \tmov    %rdx,%rax\n     f9b:\t48 01 c0             \tadd    %rax,%rax\n     f9e:\t48 01 d0             \tadd    %rdx,%rax\n     fa1:\t48 c1 e0 03          \tshl    $0x3,%rax\n     fa5:\t48 8d 90 a0 47 00 00 \tlea    0x47a0(%rax),%rdx\n     fac:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     fb1:\t48 01 d0             \tadd    %rdx,%rax\n     fb4:\t48 89 c7             \tmov    %rax,%rdi\n     fb7:\te8 00 00 00 00       \tcallq  fbc <read_old_huffman_tables+0x21e>\n     fbc:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n     fc0:\t48 98                \tcltq   \n     fc2:\t48 c1 e0 0a          \tshl    $0xa,%rax\n     fc6:\t48 8d 90 a0 1b 00 00 \tlea    0x1ba0(%rax),%rdx\n     fcd:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     fd2:\t48 8d 34 02          \tlea    (%rdx,%rax,1),%rsi\n     fd6:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n     fda:\t48 98                \tcltq   \n     fdc:\t48 c1 e0 08          \tshl    $0x8,%rax\n     fe0:\t48 8d 90 a0 18 00 00 \tlea    0x18a0(%rax),%rdx\n     fe7:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     fec:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n     ff0:\t8b 44 24 3c          \tmov    0x3c(%rsp),%eax\n     ff4:\t48 63 d0             \tmovslq %eax,%rdx\n     ff7:\t48 89 d0             \tmov    %rdx,%rax\n     ffa:\t48 01 c0             \tadd    %rax,%rax\n     ffd:\t48 01 d0             \tadd    %rdx,%rax\n    1000:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1004:\t48 8d 90 a0 47 00 00 \tlea    0x47a0(%rax),%rdx\n    100b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    1010:\t48 01 d0             \tadd    %rdx,%rax\n    1013:\t48 83 ec 08          \tsub    $0x8,%rsp\n    1017:\t6a 00                \tpushq  $0x0\n    1019:\t6a 00                \tpushq  $0x0\n    101b:\t6a 00                \tpushq  $0x0\n    101d:\t6a 00                \tpushq  $0x0\n    101f:\t6a 04                \tpushq  $0x4\n    1021:\t6a 04                \tpushq  $0x4\n    1023:\t56                   \tpush   %rsi\n    1024:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n    102a:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    1030:\tba 00 01 00 00       \tmov    $0x100,%edx\n    1035:\tbe 0b 00 00 00       \tmov    $0xb,%esi\n    103a:\t48 89 c7             \tmov    %rax,%rdi\n    103d:\te8 00 00 00 00       \tcallq  1042 <read_old_huffman_tables+0x2a4>\n    1042:\t48 83 c4 40          \tadd    $0x40,%rsp\n    1046:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n    104a:\t83 7c 24 38 00       \tcmpl   $0x0,0x38(%rsp)\n    104f:\t79 06                \tjns    1057 <read_old_huffman_tables+0x2b9>\n    1051:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n    1055:\teb 33                \tjmp    108a <read_old_huffman_tables+0x2ec>\n    1057:\t83 44 24 3c 01       \taddl   $0x1,0x3c(%rsp)\n    105c:\t83 7c 24 3c 02       \tcmpl   $0x2,0x3c(%rsp)\n    1061:\t0f 8e 2a ff ff ff    \tjle    f91 <read_old_huffman_tables+0x1f3>\n    1067:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    106c:\t48 89 c7             \tmov    %rax,%rdi\n    106f:\te8 46 f4 ff ff       \tcallq  4ba <generate_joint_tables>\n    1074:\t89 44 24 38          \tmov    %eax,0x38(%rsp)\n    1078:\t83 7c 24 38 00       \tcmpl   $0x0,0x38(%rsp)\n    107d:\t79 06                \tjns    1085 <read_old_huffman_tables+0x2e7>\n    107f:\t8b 44 24 38          \tmov    0x38(%rsp),%eax\n    1083:\teb 05                \tjmp    108a <read_old_huffman_tables+0x2ec>\n    1085:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    108a:\t48 83 c4 48          \tadd    $0x48,%rsp\n    108e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_old_huffman_tables(int *a1) {\n  __int64 result;\n  char <span class=\"supfact\">v2</span>[Number];\n  unsigned int <span class=\"supfact\">v3</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">v3</span> = init_get_bits((__int64)<span class=\"supfact\">v2</span>,\n                                     (__int64)&classic_shift_luma, Number);\n  if ((<span class=\"supfact\">v3</span> & Number) != Number)\n    return <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> =\n      read_len_table((__int64)(a1 + Number), (__int64)<span class=\"supfact\">v2</span>);\n  if ((<span class=\"supfact\">v3</span> & Number) != Number)\n    return <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = init_get_bits((__int64)<span class=\"supfact\">v2</span>,\n                                     (__int64)&classic_shift_chroma, Number);\n  if ((<span class=\"supfact\">v3</span> & Number) != Number)\n    return <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> =\n      read_len_table((__int64)(a1 + Number), (__int64)<span class=\"supfact\">v2</span>);\n  if ((<span class=\"supfact\">v3</span> & Number) != Number)\n    return <span class=\"supfact\">v3</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    a1[<span class=\"supfact\">i</span> + Number] =\n        (unsigned __int8)classic_add_luma[<span class=\"supfact\">i</span>];\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    a1[<span class=\"supfact\">i</span> + Number] =\n        (unsigned __int8)classic_add_chroma[<span class=\"supfact\">i</span>];\n  if (a1[Number] > Number) {\n    memcpy(a1 + Number, a1 + Number, Number);\n    memcpy(a1 + Number, a1 + Number, Number);\n  }\n  memcpy(a1 + Number, a1 + Number, Number);\n  memcpy(a1 + Number, a1 + Number, Number);\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    ff_free_vlc(&a1[Number * <span class=\"supfact\">i</span> + Number]);\n    <span class=\"supfact\">v3</span> = ff_init_vlc_sparse(\n        &a1[Number * <span class=\"supfact\">i</span> + Number], Number L, Number L,\n        &a1[Number * (__int64)<span class=\"supfact\">i</span> + Number], Number L, Number L,\n        &a1[Number * (__int64)<span class=\"supfact\">i</span> + Number], Number L, Number L,\n        Number L, Number L, Number L, Number L);\n    if ((<span class=\"supfact\">v3</span> & Number) != Number)\n      return <span class=\"supfact\">v3</span>;\n  }\n  <span class=\"supfact\">v3</span> = generate_joint_tables((__int64)a1);\n  if ((<span class=\"supfact\">v3</span> & Number) == Number)\n    result = Number L;\n  else\n    result = <span class=\"supfact\">v3</span>;\n  return result;\n}", "code_t": "int __cdecl read_old_huffman_tables(HYuvContext_0 *s) {\n  int result;\n  GetBitContext_0 <span class=\"supfact\">gb</span>;\n  int <span class=\"supfact\">ret</span>;\n  int <span class=\"supfact\">i</span>;\n  <span class=\"supfact\">ret</span> =\n      init_get_bits(&<span class=\"supfact\">gb</span>, classic_shift_luma, Number);\n  if (<span class=\"supfact\">ret</span> < Number)\n    return <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = read_len_table((uint8_t *)s->len, &<span class=\"supfact\">gb</span>);\n  if (<span class=\"supfact\">ret</span> < Number)\n    return <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> =\n      init_get_bits(&<span class=\"supfact\">gb</span>, classic_shift_chroma, Number);\n  if (<span class=\"supfact\">ret</span> < Number)\n    return <span class=\"supfact\">ret</span>;\n  <span class=\"supfact\">ret</span> = read_len_table(s->len[Number], &<span class=\"supfact\">gb</span>);\n  if (<span class=\"supfact\">ret</span> < Number)\n    return <span class=\"supfact\">ret</span>;\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    s->bits[Number][<span class=\"supfact\">i</span>] = classic_add_luma[<span class=\"supfact\">i</span>];\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>)\n    s->bits[Number][<span class=\"supfact\">i</span>] = classic_add_chroma[<span class=\"supfact\">i</span>];\n  if (s->bitstream_bpp > Number) {\n    memcpy(s->bits[Number], s->bits, sizeof(s->bits[Number]));\n    memcpy(s->len[Number], s->len, sizeof(s->len[Number]));\n  }\n  memcpy(s->bits[Number], s->bits[Number], sizeof(s->bits[Number]));\n  memcpy(s->len[Number], s->len[Number], sizeof(s->len[Number]));\n  for (<span class=\"supfact\">i</span> = Number; <span class=\"supfact\">i</span> <= Number;\n       ++<span class=\"supfact\">i</span>) {\n    ff_free_vlc(&s->vlc[<span class=\"supfact\">i</span>]);\n    <span class=\"supfact\">ret</span> = ff_init_vlc_sparse(\n        &s->vlc[<span class=\"supfact\">i</span>], Number L, Number L,\n        s->len[(__int64)<span class=\"supfact\">i</span>], Number L, Number L,\n        s->bits[(__int64)<span class=\"supfact\">i</span>], Number L, Number L, Number L,\n        Number L, Number L, Number L);\n    if (<span class=\"supfact\">ret</span> < Number)\n      return <span class=\"supfact\">ret</span>;\n  }\n  <span class=\"supfact\">ret</span> = generate_joint_tables(s);\n  if (<span class=\"supfact\">ret</span> >= Number)\n    result = Number;\n  else\n    result = <span class=\"supfact\">ret</span>;\n  return result;\n}", "var": [{"name": "v2", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }", "ref_name": "gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/1e1e7cb97ebb80eac8dbb33680b64d176ff61b4eaa68df0fca22659194da5490", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/stateful_proxy", "objdump": "00000000004316a2 <pj_dns_resolver_add_entry>:\n  4316a2:\t55                   \tpush   %rbp\n  4316a3:\t48 89 e5             \tmov    %rsp,%rbp\n  4316a6:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  4316ad:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n  4316b4:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n  4316bb:\t89 95 5c ff ff ff    \tmov    %edx,-0xa4(%rbp)\n  4316c1:\t48 83 bd 68 ff ff ff \tcmpq   $0x0,-0x98(%rbp)\n  4316c8:\t00 \n  4316c9:\t74 0a                \tje     4316d5 <pj_dns_resolver_add_entry+0x33>\n  4316cb:\t48 83 bd 60 ff ff ff \tcmpq   $0x0,-0xa0(%rbp)\n  4316d2:\t00 \n  4316d3:\t75 37                \tjne    43170c <pj_dns_resolver_add_entry+0x6a>\n  4316d5:\t48 83 bd 68 ff ff ff \tcmpq   $0x0,-0x98(%rbp)\n  4316dc:\t00 \n  4316dd:\t74 0a                \tje     4316e9 <pj_dns_resolver_add_entry+0x47>\n  4316df:\t48 83 bd 60 ff ff ff \tcmpq   $0x0,-0xa0(%rbp)\n  4316e6:\t00 \n  4316e7:\t75 19                \tjne    431702 <pj_dns_resolver_add_entry+0x60>\n  4316e9:\tb9 d0 15 47 00       \tmov    $0x4715d0,%ecx\n  4316ee:\tba 20 07 00 00       \tmov    $0x720,%edx\n  4316f3:\tbe 13 0f 47 00       \tmov    $0x470f13,%esi\n  4316f8:\tbf 47 12 47 00       \tmov    $0x471247,%edi\n  4316fd:\te8 be 29 fd ff       \tcallq  4040c0 <__assert_fail@plt>\n  431702:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n  431707:\te9 77 02 00 00       \tjmpq   431983 <pj_dns_resolver_add_entry+0x2e1>\n  43170c:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  431713:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n  431717:\t66 c1 e8 0f          \tshr    $0xf,%ax\n  43171b:\t0f b7 c0             \tmovzwl %ax,%eax\n  43171e:\t83 e0 01             \tand    $0x1,%eax\n  431721:\t85 c0                \ttest   %eax,%eax\n  431723:\t75 3c                \tjne    431761 <pj_dns_resolver_add_entry+0xbf>\n  431725:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  43172c:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n  431730:\t66 c1 e8 0f          \tshr    $0xf,%ax\n  431734:\t0f b7 c0             \tmovzwl %ax,%eax\n  431737:\t83 e0 01             \tand    $0x1,%eax\n  43173a:\t85 c0                \ttest   %eax,%eax\n  43173c:\t75 19                \tjne    431757 <pj_dns_resolver_add_entry+0xb5>\n  43173e:\tb9 d0 15 47 00       \tmov    $0x4715d0,%ecx\n  431743:\tba 23 07 00 00       \tmov    $0x723,%edx\n  431748:\tbe 13 0f 47 00       \tmov    $0x470f13,%esi\n  43174d:\tbf 58 12 47 00       \tmov    $0x471258,%edi\n  431752:\te8 69 29 fd ff       \tcallq  4040c0 <__assert_fail@plt>\n  431757:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n  43175c:\te9 22 02 00 00       \tjmpq   431983 <pj_dns_resolver_add_entry+0x2e1>\n  431761:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  431768:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n  43176c:\t66 85 c0             \ttest   %ax,%ax\n  43176f:\t74 14                \tje     431785 <pj_dns_resolver_add_entry+0xe3>\n  431771:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  431778:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  43177c:\t48 85 c0             \ttest   %rax,%rax\n  43177f:\t0f 85 83 00 00 00    \tjne    431808 <pj_dns_resolver_add_entry+0x166>\n  431785:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  43178c:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n  431790:\t66 85 c0             \ttest   %ax,%ax\n  431793:\t74 10                \tje     4317a5 <pj_dns_resolver_add_entry+0x103>\n  431795:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  43179c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4317a0:\t48 85 c0             \ttest   %rax,%rax\n  4317a3:\t75 63                \tjne    431808 <pj_dns_resolver_add_entry+0x166>\n  4317a5:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4317ac:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n  4317b0:\t66 85 c0             \ttest   %ax,%ax\n  4317b3:\t74 10                \tje     4317c5 <pj_dns_resolver_add_entry+0x123>\n  4317b5:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4317bc:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4317c0:\t48 85 c0             \ttest   %rax,%rax\n  4317c3:\t75 39                \tjne    4317fe <pj_dns_resolver_add_entry+0x15c>\n  4317c5:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4317cc:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n  4317d0:\t66 85 c0             \ttest   %ax,%ax\n  4317d3:\t74 10                \tje     4317e5 <pj_dns_resolver_add_entry+0x143>\n  4317d5:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4317dc:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4317e0:\t48 85 c0             \ttest   %rax,%rax\n  4317e3:\t75 19                \tjne    4317fe <pj_dns_resolver_add_entry+0x15c>\n  4317e5:\tb9 d0 15 47 00       \tmov    $0x4715d0,%ecx\n  4317ea:\tba 26 07 00 00       \tmov    $0x726,%edx\n  4317ef:\tbe 13 0f 47 00       \tmov    $0x470f13,%esi\n  4317f4:\tbf 98 12 47 00       \tmov    $0x471298,%edi\n  4317f9:\te8 c2 28 fd ff       \tcallq  4040c0 <__assert_fail@plt>\n  4317fe:\tb8 2f e2 04 00       \tmov    $0x4e22f,%eax\n  431803:\te9 7b 01 00 00       \tjmpq   431983 <pj_dns_resolver_add_entry+0x2e1>\n  431808:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  43180f:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  431813:\t48 89 c7             \tmov    %rax,%rdi\n  431816:\te8 54 8a 02 00       \tcallq  45a26f <pj_mutex_lock>\n  43181b:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  431822:\tbe 82 00 00 00       \tmov    $0x82,%esi\n  431827:\t48 89 c7             \tmov    %rax,%rdi\n  43182a:\te8 32 c8 ff ff       \tcallq  42e061 <pj_bzero>\n  43182f:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  431836:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n  43183a:\t66 85 c0             \ttest   %ax,%ax\n  43183d:\t0f 84 80 00 00 00    \tje     4318c3 <pj_dns_resolver_add_entry+0x221>\n  431843:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  43184a:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  43184e:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  431852:\t48 83 f8 7f          \tcmp    $0x7f,%rax\n  431856:\t7e 38                \tjle    431890 <pj_dns_resolver_add_entry+0x1ee>\n  431858:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  43185f:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  431863:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  431867:\t48 83 f8 7f          \tcmp    $0x7f,%rax\n  43186b:\t7e 19                \tjle    431886 <pj_dns_resolver_add_entry+0x1e4>\n  43186d:\tb9 d0 15 47 00       \tmov    $0x4715d0,%ecx\n  431872:\tba 30 07 00 00       \tmov    $0x730,%edx\n  431877:\tbe 13 0f 47 00       \tmov    $0x470f13,%esi\n  43187c:\tbf d8 12 47 00       \tmov    $0x4712d8,%edi\n  431881:\te8 3a 28 fd ff       \tcallq  4040c0 <__assert_fail@plt>\n  431886:\tb8 75 11 01 00       \tmov    $0x11175,%eax\n  43188b:\te9 f3 00 00 00       \tjmpq   431983 <pj_dns_resolver_add_entry+0x2e1>\n  431890:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  431897:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  43189b:\t48 89 c2             \tmov    %rax,%rdx\n  43189e:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4318a5:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  4318a9:\t0f b7 40 10          \tmovzwl 0x10(%rax),%eax\n  4318ad:\t0f b7 c8             \tmovzwl %ax,%ecx\n  4318b0:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4318b7:\t89 ce                \tmov    %ecx,%esi\n  4318b9:\t48 89 c7             \tmov    %rax,%rdi\n  4318bc:\te8 f2 d8 ff ff       \tcallq  42f1b3 <init_res_key>\n  4318c1:\teb 7b                \tjmp    43193e <pj_dns_resolver_add_entry+0x29c>\n  4318c3:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4318ca:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4318ce:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4318d2:\t48 83 f8 7f          \tcmp    $0x7f,%rax\n  4318d6:\t7e 35                \tjle    43190d <pj_dns_resolver_add_entry+0x26b>\n  4318d8:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  4318df:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4318e3:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4318e7:\t48 83 f8 7f          \tcmp    $0x7f,%rax\n  4318eb:\t7e 19                \tjle    431906 <pj_dns_resolver_add_entry+0x264>\n  4318ed:\tb9 d0 15 47 00       \tmov    $0x4715d0,%ecx\n  4318f2:\tba 37 07 00 00       \tmov    $0x737,%edx\n  4318f7:\tbe 13 0f 47 00       \tmov    $0x470f13,%esi\n  4318fc:\tbf f6 12 47 00       \tmov    $0x4712f6,%edi\n  431901:\te8 ba 27 fd ff       \tcallq  4040c0 <__assert_fail@plt>\n  431906:\tb8 75 11 01 00       \tmov    $0x11175,%eax\n  43190b:\teb 76                \tjmp    431983 <pj_dns_resolver_add_entry+0x2e1>\n  43190d:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  431914:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  431918:\t48 89 c2             \tmov    %rax,%rdx\n  43191b:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n  431922:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  431926:\t0f b7 40 10          \tmovzwl 0x10(%rax),%eax\n  43192a:\t0f b7 c8             \tmovzwl %ax,%ecx\n  43192d:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  431934:\t89 ce                \tmov    %ecx,%esi\n  431936:\t48 89 c7             \tmov    %rax,%rdi\n  431939:\te8 75 d8 ff ff       \tcallq  42f1b3 <init_res_key>\n  43193e:\t48 8b 8d 60 ff ff ff \tmov    -0xa0(%rbp),%rcx\n  431945:\t8b 95 5c ff ff ff    \tmov    -0xa4(%rbp),%edx\n  43194b:\t48 8d b5 70 ff ff ff \tlea    -0x90(%rbp),%rsi\n  431952:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  431959:\t49 89 c8             \tmov    %rcx,%r8\n  43195c:\t89 d1                \tmov    %edx,%ecx\n  43195e:\tba 00 00 00 00       \tmov    $0x0,%edx\n  431963:\t48 89 c7             \tmov    %rax,%rdi\n  431966:\te8 ab f0 ff ff       \tcallq  430a16 <update_res_cache>\n  43196b:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  431972:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  431976:\t48 89 c7             \tmov    %rax,%rdi\n  431979:\te8 aa 89 02 00       \tcallq  45a328 <pj_mutex_unlock>\n  43197e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  431983:\tc9                   \tleaveq \n  431984:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_dns_resolver_add_entry(__int64 a1, __int64 a2, int a3) {\n  __int64 result;\n  _WORD <span class=\"supfact\">v5</span>[Number];\n  if (a1 && a2) {\n    if (*(__int16 *)(a2 + Number) >= Number)\n      __assert_fail(String, String, Number, String);\n    if (*(_WORD *)(a2 + Number) && *(_QWORD *)(a2 + Number) ||\n        *(_WORD *)(a2 + Number) && *(_QWORD *)(a2 + Number)) {\n      pj_mutex_lock(*(_QWORD *)(a1 + Number));\n      pj_bzero_11(<span class=\"supfact\">v5</span>, Number);\n      if (*(_WORD *)(a2 + Number)) {\n        if (*(__int64 *)(*(_QWORD *)(a2 + Number) + Number L) > Number)\n          __assert_fail(String, String, Number, String);\n        init_res_key(<span class=\"supfact\">v5</span>,\n                     *(_WORD *)(*(_QWORD *)(a2 + Number) + Number L),\n                     *(unsigned __int8 ***)(a2 + Number));\n      } else {\n        if (*(__int64 *)(*(_QWORD *)(a2 + Number) + Number L) > Number)\n          __assert_fail(String, String, Number, String);\n        init_res_key(<span class=\"supfact\">v5</span>,\n                     *(_WORD *)(*(_QWORD *)(a2 + Number) + Number L),\n                     *(unsigned __int8 ***)(a2 + Number));\n      }\n      update_res_cache(a1, <span class=\"supfact\">v5</span>, Number, a3, a2);\n      pj_mutex_unlock(*(_QWORD *)(a1 + Number));\n      result = Number L;\n    } else {\n      if ((!*(_WORD *)(a2 + Number) || !*(_QWORD *)(a2 + Number)) &&\n          (!*(_WORD *)(a2 + Number) || !*(_QWORD *)(a2 + Number)))\n        __assert_fail(String, String, Number, String);\n      result = Number L;\n    }\n  } else {\n    if (!a1 || !a2)\n      __assert_fail(String, String, Number, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl pj_dns_resolver_add_entry(pj_dns_resolver_0 *resolver,\n                                              const pj_dns_parsed_packet_0 *pkt,\n                                              pj_bool_t set_ttl) {\n  pj_status_t result;\n  res_key <span class=\"supfact\">key</span>;\n  if (resolver && pkt) {\n    if ((pkt->hdr.flags & Number) == Number)\n      __assert_fail(String, String, Number, String);\n    if (pkt->hdr.anscount && pkt->ans || pkt->hdr.qdcount && pkt->q) {\n      pj_mutex_lock(resolver->mutex);\n      pj_bzero_11(&<span class=\"supfact\">key</span>, Number);\n      if (pkt->hdr.anscount) {\n        if (pkt->ans->name.slen > Number)\n          __assert_fail(String, String, Number, String);\n        init_res_key(&<span class=\"supfact\">key</span>, pkt->ans->type, &pkt->ans->name);\n      } else {\n        if (pkt->q->name.slen > Number)\n          __assert_fail(String, String, Number, String);\n        init_res_key(&<span class=\"supfact\">key</span>, pkt->q->type, &pkt->q->name);\n      }\n      update_res_cache(resolver, &<span class=\"supfact\">key</span>, Number, set_ttl, pkt);\n      pj_mutex_unlock(resolver->mutex);\n      result = Number;\n    } else {\n      if ((!pkt->hdr.anscount || !pkt->ans) && (!pkt->hdr.qdcount || !pkt->q))\n        __assert_fail(String, String, Number, String);\n      result = Number;\n    }\n  } else {\n    if (!resolver || !pkt)\n      __assert_fail(String, String, Number, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v5", "type": "struct res_key { pj_uint16_t qtype; char[128] name; }", "ref_name": "key", "ref_type": "struct res_key { pj_uint16_t qtype; char[128] name; }"}], "body_in_train": false}, {"repo_owner": "silentbicycle", "repo_name": "theft", "path": "silentbicycle/theft/9fc0f9a90674f1b4b865b1b87da67249141d0961a38ddb1b8cb18ebc954a2cdf", "path_in_repo": "silentbicycle/theft//build/test_char_array.o", "objdump": "0000000000000025 <char_fail_shrinkage>:\n  25:\t55                   \tpush   %rbp\n  26:\t48 89 e5             \tmov    %rsp,%rbp\n  29:\t48 81 ec 20 01 00 00 \tsub    $0x120,%rsp\n  30:\te8 00 00 00 00       \tcallq  35 <char_fail_shrinkage+0x10>\n  35:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  39:\t48 8d 95 e0 fe ff ff \tlea    -0x120(%rbp),%rdx\n  40:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  45:\tb9 23 00 00 00       \tmov    $0x23,%ecx\n  4a:\t48 89 d7             \tmov    %rdx,%rdi\n  4d:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  50:\t48 8d 05 a9 ff ff ff \tlea    -0x57(%rip),%rax        # 0 <prop_char_fails_cause_shrink>\n  57:\t48 89 85 e0 fe ff ff \tmov    %rax,-0x120(%rbp)\n  5e:\tbf 0e 00 00 00       \tmov    $0xe,%edi\n  63:\te8 00 00 00 00       \tcallq  68 <char_fail_shrinkage+0x43>\n  68:\t48 89 85 18 ff ff ff \tmov    %rax,-0xe8(%rbp)\n  6f:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 76 <char_fail_shrinkage+0x51>\n  76:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n  7d:\t48 c7 85 68 ff ff ff \tmovq   $0x1,-0x98(%rbp)\n  84:\t01 00 00 00 \n  88:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  8c:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n  93:\tc6 85 78 ff ff ff 14 \tmovb   $0x14,-0x88(%rbp)\n  9a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a1 <char_fail_shrinkage+0x7c>\n  a1:\t8b 40 44             \tmov    0x44(%rax),%eax\n  a4:\t8d 50 01             \tlea    0x1(%rax),%edx\n  a7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ae <char_fail_shrinkage+0x89>\n  ae:\t89 50 44             \tmov    %edx,0x44(%rax)\n  b1:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n  b8:\t48 89 c7             \tmov    %rax,%rdi\n  bb:\te8 00 00 00 00       \tcallq  c0 <char_fail_shrinkage+0x9b>\n  c0:\t83 f8 01             \tcmp    $0x1,%eax\n  c3:\t74 52                \tje     117 <char_fail_shrinkage+0xf2>\n  c5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cc <char_fail_shrinkage+0xa7>\n  cc:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # d3 <char_fail_shrinkage+0xae>\n  d3:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n  d7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # de <char_fail_shrinkage+0xb9>\n  de:\tc7 40 48 1a 00 00 00 \tmovl   $0x1a,0x48(%rax)\n  e5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ec <char_fail_shrinkage+0xc7>\n  ec:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # f3 <char_fail_shrinkage+0xce>\n  f3:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n  f7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # fe <char_fail_shrinkage+0xd9>\n  fe:\t0f b6 00             \tmovzbl (%rax),%eax\n 101:\t0f b6 c0             \tmovzbl %al,%eax\n 104:\t83 e0 04             \tand    $0x4,%eax\n 107:\t85 c0                \ttest   %eax,%eax\n 109:\t74 05                \tje     110 <char_fail_shrinkage+0xeb>\n 10b:\te8 00 00 00 00       \tcallq  110 <char_fail_shrinkage+0xeb>\n 110:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 115:\teb 14                \tjmp    12b <char_fail_shrinkage+0x106>\n 117:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 11e <char_fail_shrinkage+0xf9>\n 11e:\t48 c7 40 58 00 00 00 \tmovq   $0x0,0x58(%rax)\n 125:\t00 \n 126:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 12b:\tc9                   \tleaveq \n 12c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall char_fail_shrinkage(__int64 a1, __int64 a2) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = theft_seed_of_time();\n  memset(<span class=\"supfact\">v3</span>, Number, sizeof(<span class=\"supfact\">v3</span>));\n  <span class=\"supfact\">v3</span>[Number] = (__int64)prop_char_fails_cause_shrink;\n  <span class=\"supfact\">v3</span>[Number] =\n      theft_get_builtin_type_info(Number L, a2, <span class=\"supfact\">v3</span>);\n  <span class=\"supfact\">v3</span>[Number] = (__int64)String;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  <span class=\"supfact\">v3</span>[Number] = <span class=\"supfact\">v4</span>;\n  LOBYTE(<span class=\"supfact\">v3</span>[Number]) = Number;\n  ++*((_DWORD *)&greatest_info + Number);\n  if ((unsigned int)theft_run(<span class=\"supfact\">v3</span>) == Number) {\n    *((_QWORD *)&greatest_info + Number) = Number L;\n    result = Number L;\n  } else {\n    *((_QWORD *)&greatest_info + Number) = String;\n    *((_DWORD *)&greatest_info + Number) = Number;\n    *((_QWORD *)&greatest_info + Number) = String;\n    if ((greatest_info & Number) != Number)\n      abort();\n    result = Number;\n  }\n  return result;\n}", "code_t": "greatest_test_res __cdecl char_fail_shrinkage() {\n  __int64 v0;\n  greatest_test_res result;\n  theft_run_config <span class=\"supfact\">cfg</span>;\n  theft_seed <span class=\"supfact\">seed</span>;\n  <span class=\"supfact\">seed</span> = theft_seed_of_time();\n  memset(&<span class=\"supfact\">cfg</span>, Number, sizeof(<span class=\"supfact\">cfg</span>));\n  <span class=\"supfact\">cfg</span>.prop1 = (theft_propfun1 *)prop_char_fails_cause_shrink;\n  <span class=\"supfact\">cfg</span>.type_info[Number] =\n      (const theft_type_info *)theft_get_builtin_type_info(\n          Number L, v0, &<span class=\"supfact\">cfg</span>);\n  <span class=\"supfact\">cfg</span>.name = String;\n  <span class=\"supfact\">cfg</span>.trials = Number L;\n  <span class=\"supfact\">cfg</span>.<span class=\"supfact\">seed</span> = <span class=\"supfact\">seed</span>;\n  <span class=\"supfact\">cfg</span>.bloom_bits = Number;\n  ++*((_DWORD *)&greatest_info + Number);\n  if ((unsigned int)theft_run(&<span class=\"supfact\">cfg</span>) == Number) {\n    *((_QWORD *)&greatest_info + Number) = Number L;\n    result = GREATEST_TEST_RES_PASS;\n  } else {\n    *((_QWORD *)&greatest_info + Number) = String;\n    *((_DWORD *)&greatest_info + Number) = Number;\n    *((_QWORD *)&greatest_info + Number) = String;\n    if ((greatest_info & Number) != Number)\n      abort();\n    result = GREATEST_TEST_RES_FAIL;\n  }\n  return result;\n}", "var": [{"name": "v3", "type": "__unk__", "ref_name": "cfg", "ref_type": "struct theft_run_config { theft_propfun1 * prop1; theft_propfun2 * prop2; theft_propfun3 * prop3; theft_propfun4 * prop4; theft_propfun5 * prop5; theft_propfun6 * prop6; theft_propfun7 * prop7; const theft_type_info *[7] type_info; const char * name; size_t always_seed_count; theft_seed * always_seeds; size_t trials; theft_seed seed; uint8_t bloom_bits; PADDING (7); $1169078AED1AEB32693D11A2FE9368C4 fork; $426D6590B0318B973A92003B274969BB hooks; }"}], "body_in_train": false}, {"repo_owner": "lalilulelulz", "repo_name": "Chromium-OS-Coreboot", "path": "lalilulelulz/Chromium-OS-Coreboot/68ec60b9478ca529583e57b7c9371016bc572cabe131fc3c0df544ed49a79593", "path_in_repo": "lalilulelulz/Chromium-OS-Coreboot/payloads/coreinfo/build/util/kconfig/conf", "objdump": "00000000004086d5 <conf_get_default_confname>:\n  4086d5:\t55                   \tpush   %rbp\n  4086d6:\t48 89 e5             \tmov    %rsp,%rbp\n  4086d9:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  4086e0:\tbf b0 39 41 00       \tmov    $0x4139b0,%edi\n  4086e5:\te8 b3 fe ff ff       \tcallq  40859d <conf_expand_value>\n  4086ea:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4086ee:\tbf 87 38 41 00       \tmov    $0x413887,%edi\n  4086f3:\te8 38 99 ff ff       \tcallq  402030 <getenv@plt>\n  4086f8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4086fc:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  408701:\t74 41                \tje     408744 <conf_get_default_confname+0x6f>\n  408703:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  408707:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  40870b:\t48 89 d1             \tmov    %rdx,%rcx\n  40870e:\t48 89 c2             \tmov    %rax,%rdx\n  408711:\tbe 8f 38 41 00       \tmov    $0x41388f,%esi\n  408716:\tbf 20 8d 41 00       \tmov    $0x418d20,%edi\n  40871b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  408720:\te8 ab 9c ff ff       \tcallq  4023d0 <sprintf@plt>\n  408725:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  40872c:\t48 89 c6             \tmov    %rax,%rsi\n  40872f:\tbf 20 8d 41 00       \tmov    $0x418d20,%edi\n  408734:\te8 f7 7f 00 00       \tcallq  410730 <__stat>\n  408739:\t85 c0                \ttest   %eax,%eax\n  40873b:\t75 07                \tjne    408744 <conf_get_default_confname+0x6f>\n  40873d:\tb8 20 8d 41 00       \tmov    $0x418d20,%eax\n  408742:\teb 04                \tjmp    408748 <conf_get_default_confname+0x73>\n  408744:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  408748:\tc9                   \tleaveq \n  408749:\tc3                   \tretq   ", "code_s": "char *conf_get_default_confname() {\n  char *result;\n  struct stat <span class=\"supfact\">v1</span>;\n  char *<span class=\"supfact\">v2</span>;\n  char *<span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = conf_expand_value(String);\n  <span class=\"supfact\">v2</span> = getenv(String);\n  if (!<span class=\"supfact\">v2</span> ||\n      (sprintf(fullname_5235, String, <span class=\"supfact\">v2</span>, <span class=\"supfact\">v3</span>),\n       (unsigned int)stat(fullname_5235, &<span class=\"supfact\">v1</span>)))\n    result = <span class=\"supfact\">v3</span>;\n  else\n    result = fullname_5235;\n  return result;\n}", "code_t": "char *__cdecl conf_get_default_confname() {\n  char *result;\n  stat <span class=\"supfact\">buf</span>;\n  char *<span class=\"supfact\">env</span>;\n  char *<span class=\"supfact\">name</span>;\n  <span class=\"supfact\">name</span> = conf_expand_value(String);\n  <span class=\"supfact\">env</span> = getenv(String);\n  if (!<span class=\"supfact\">env</span> ||\n      (sprintf(fullname_5235, String, <span class=\"supfact\">env</span>,\n               <span class=\"supfact\">name</span>),\n       (unsigned int)stat_0(fullname_5235, &<span class=\"supfact\">buf</span>)))\n    result = <span class=\"supfact\">name</span>;\n  else\n    result = fullname_5235;\n  return result;\n}", "var": [{"name": "v1", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "ref_name": "buf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": false}, {"repo_owner": "zhenghuijie", "repo_name": "learngit", "path": "zhenghuijie/learngit/cafa4e0cb4c5683b4b15c7cfb77fc461376b977053d5cdc9264688096613d8f8", "path_in_repo": "zhenghuijie/learngit/third_party/open_newpppoe/pppd/main.o", "objdump": "0000000000001a48 <update_link_stats>:\n    1a48:\t55                   \tpush   %rbp\n    1a49:\t48 89 e5             \tmov    %rsp,%rbp\n    1a4c:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1a50:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n    1a53:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    1a56:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1a5b:\t89 c7                \tmov    %eax,%edi\n    1a5d:\te8 00 00 00 00       \tcallq  1a62 <update_link_stats+0x1a>\n    1a62:\t85 c0                \ttest   %eax,%eax\n    1a64:\t0f 84 3f 01 00 00    \tje     1ba9 <update_link_stats+0x161>\n    1a6a:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n    1a6e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1a73:\t48 89 c7             \tmov    %rax,%rdi\n    1a76:\te8 00 00 00 00       \tcallq  1a7b <update_link_stats+0x33>\n    1a7b:\t85 c0                \ttest   %eax,%eax\n    1a7d:\t0f 88 26 01 00 00    \tjs     1ba9 <update_link_stats+0x161>\n    1a83:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1a87:\t89 c2                \tmov    %eax,%edx\n    1a89:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a90 <update_link_stats+0x48>\n    1a90:\t29 c2                \tsub    %eax,%edx\n    1a92:\t89 d0                \tmov    %edx,%eax\n    1a94:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1a9a <update_link_stats+0x52>\n    1a9a:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 1aa4 <update_link_stats+0x5c>\n    1aa1:\t00 00 00 \n    1aa4:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1aaa <update_link_stats+0x62>\n    1aaa:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1ab0 <update_link_stats+0x68>\n    1ab0:\t29 c2                \tsub    %eax,%edx\n    1ab2:\t89 d0                \tmov    %edx,%eax\n    1ab4:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1aba <update_link_stats+0x72>\n    1aba:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1ac0 <update_link_stats+0x78>\n    1ac0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1ac6 <update_link_stats+0x7e>\n    1ac6:\t29 c2                \tsub    %eax,%edx\n    1ac8:\t89 d0                \tmov    %edx,%eax\n    1aca:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1ad0 <update_link_stats+0x88>\n    1ad0:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1ad6 <update_link_stats+0x8e>\n    1ad6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1adc <update_link_stats+0x94>\n    1adc:\t29 c2                \tsub    %eax,%edx\n    1ade:\t89 d0                \tmov    %edx,%eax\n    1ae0:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1ae6 <update_link_stats+0x9e>\n    1ae6:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1aec <update_link_stats+0xa4>\n    1aec:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1af2 <update_link_stats+0xaa>\n    1af2:\t29 c2                \tsub    %eax,%edx\n    1af4:\t89 d0                \tmov    %edx,%eax\n    1af6:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1afc <update_link_stats+0xb4>\n    1afc:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1b02 <update_link_stats+0xba>\n    1b02:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b06:\t89 d1                \tmov    %edx,%ecx\n    1b08:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b0d:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    1b12:\t48 89 c7             \tmov    %rax,%rdi\n    1b15:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b1a:\te8 00 00 00 00       \tcallq  1b1f <update_link_stats+0xd7>\n    1b1f:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b23:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b28:\t48 89 c6             \tmov    %rax,%rsi\n    1b2b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1b30:\te8 00 00 00 00       \tcallq  1b35 <update_link_stats+0xed>\n    1b35:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1b3b <update_link_stats+0xf3>\n    1b3b:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b3f:\t89 d1                \tmov    %edx,%ecx\n    1b41:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b46:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    1b4b:\t48 89 c7             \tmov    %rax,%rdi\n    1b4e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b53:\te8 00 00 00 00       \tcallq  1b58 <update_link_stats+0x110>\n    1b58:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b5c:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b61:\t48 89 c6             \tmov    %rax,%rsi\n    1b64:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1b69:\te8 00 00 00 00       \tcallq  1b6e <update_link_stats+0x126>\n    1b6e:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1b74 <update_link_stats+0x12c>\n    1b74:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b78:\t89 d1                \tmov    %edx,%ecx\n    1b7a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b7f:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    1b84:\t48 89 c7             \tmov    %rax,%rdi\n    1b87:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b8c:\te8 00 00 00 00       \tcallq  1b91 <update_link_stats+0x149>\n    1b91:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    1b95:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b9a:\t48 89 c6             \tmov    %rax,%rsi\n    1b9d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1ba2:\te8 00 00 00 00       \tcallq  1ba7 <update_link_stats+0x15f>\n    1ba7:\teb 01                \tjmp    1baa <update_link_stats+0x162>\n    1ba9:\t90                   \tnop\n    1baa:\tc9                   \tleaveq \n    1bab:\tc3                   \tretq   ", "code_s": "int __fastcall update_link_stats(unsigned int a1) {\n  int result;\n  char <span class=\"supfact\">v2</span>[Number];\n  struct timeval <span class=\"supfact\">tv</span>;\n  result = get_ppp_stats(a1, link_stats);\n  if (result) {\n    result = gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    if (result >= Number) {\n      link_connect_time =\n          LODWORD(<span class=\"supfact\">tv</span>.tv_sec) - LODWORD(start_time.tv_sec);\n      link_stats_valid = Number;\n      link_stats[Number] -= old_link_stats;\n      link_stats[Number] -= dword_5D44;\n      link_stats[Number] -= dword_5D48;\n      link_stats[Number] -= dword_5D4C;\n      slprintf(<span class=\"supfact\">v2</span>, Number L, String,\n               (unsigned int)link_connect_time);\n      script_setenv(String, <span class=\"supfact\">v2</span>, Number L);\n      slprintf(<span class=\"supfact\">v2</span>, Number L, String, link_stats[Number]);\n      script_setenv(String, <span class=\"supfact\">v2</span>, Number L);\n      slprintf(<span class=\"supfact\">v2</span>, Number L, String, link_stats[Number]);\n      result = script_setenv(String, <span class=\"supfact\">v2</span>, Number L);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl update_link_stats(int u) {\n  char <span class=\"supfact\">numbuf</span>[Number];\n  timeval <span class=\"supfact\">now</span>;\n  if ((unsigned int)get_ppp_stats((unsigned int)u, link_stats)) {\n    if (gettimeofday(&<span class=\"supfact\">now</span>, Number L) >= Number) {\n      link_connect_time =\n          LODWORD(<span class=\"supfact\">now</span>.tv_sec) - LODWORD(start_time.tv_sec);\n      link_stats_valid = Number;\n      link_stats[Number] -= old_link_stats.bytes_in;\n      link_stats[Number] -= old_link_stats.bytes_out;\n      link_stats[Number] -= old_link_stats.pkts_in;\n      link_stats[Number] -= old_link_stats.pkts_out;\n      slprintf(<span class=\"supfact\">numbuf</span>, Number L, String,\n               (unsigned int)link_connect_time);\n      script_setenv(String, <span class=\"supfact\">numbuf</span>, Number);\n      slprintf(<span class=\"supfact\">numbuf</span>, Number L, String, link_stats[Number]);\n      script_setenv(String, <span class=\"supfact\">numbuf</span>, Number);\n      slprintf(<span class=\"supfact\">numbuf</span>, Number L, String, link_stats[Number]);\n      script_setenv(String, <span class=\"supfact\">numbuf</span>, Number);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "rusalexd", "repo_name": "ostis", "path": "rusalexd/ostis/55695343149e74496691883caeb3661940d7f4a942209cfb4cc5befe116582df", "path_in_repo": "rusalexd/ostis/sc-machine/scripts/redis-2.8.4/src/anet.o", "objdump": "0000000000000cf6 <_anetTcpServer>:\n     cf6:\t55                   \tpush   %rbp\n     cf7:\t48 89 e5             \tmov    %rsp,%rbp\n     cfa:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n     cfe:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n     d02:\t89 75 94             \tmov    %esi,-0x6c(%rbp)\n     d05:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n     d09:\t89 4d 90             \tmov    %ecx,-0x70(%rbp)\n     d0c:\t8b 55 94             \tmov    -0x6c(%rbp),%edx\n     d0f:\t48 8d 45 e6          \tlea    -0x1a(%rbp),%rax\n     d13:\t89 d1                \tmov    %edx,%ecx\n     d15:\tba 00 00 00 00       \tmov    $0x0,%edx\n     d1a:\tbe 06 00 00 00       \tmov    $0x6,%esi\n     d1f:\t48 89 c7             \tmov    %rax,%rdi\n     d22:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d27:\te8 00 00 00 00       \tcallq  d2c <_anetTcpServer+0x36>\n     d2c:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     d30:\tba 30 00 00 00       \tmov    $0x30,%edx\n     d35:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d3a:\t48 89 c7             \tmov    %rax,%rdi\n     d3d:\te8 00 00 00 00       \tcallq  d42 <_anetTcpServer+0x4c>\n     d42:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n     d45:\t89 45 b4             \tmov    %eax,-0x4c(%rbp)\n     d48:\tc7 45 b8 01 00 00 00 \tmovl   $0x1,-0x48(%rbp)\n     d4f:\tc7 45 b0 01 00 00 00 \tmovl   $0x1,-0x50(%rbp)\n     d56:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n     d5a:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n     d5e:\t48 8d 75 e6          \tlea    -0x1a(%rbp),%rsi\n     d62:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     d66:\t48 89 c7             \tmov    %rax,%rdi\n     d69:\te8 00 00 00 00       \tcallq  d6e <_anetTcpServer+0x78>\n     d6e:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     d71:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     d75:\t74 2d                \tje     da4 <_anetTcpServer+0xae>\n     d77:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     d7a:\t89 c7                \tmov    %eax,%edi\n     d7c:\te8 00 00 00 00       \tcallq  d81 <_anetTcpServer+0x8b>\n     d81:\t48 89 c2             \tmov    %rax,%rdx\n     d84:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     d88:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d8d:\t48 89 c7             \tmov    %rax,%rdi\n     d90:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d95:\te8 66 f2 ff ff       \tcallq  0 <anetSetError>\n     d9a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     d9f:\te9 e3 00 00 00       \tjmpq   e87 <_anetTcpServer+0x191>\n     da4:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     da8:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     dac:\te9 8c 00 00 00       \tjmpq   e3d <_anetTcpServer+0x147>\n     db1:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     db5:\t8b 50 0c             \tmov    0xc(%rax),%edx\n     db8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     dbc:\t8b 48 08             \tmov    0x8(%rax),%ecx\n     dbf:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     dc3:\t8b 40 04             \tmov    0x4(%rax),%eax\n     dc6:\t89 ce                \tmov    %ecx,%esi\n     dc8:\t89 c7                \tmov    %eax,%edi\n     dca:\te8 00 00 00 00       \tcallq  dcf <_anetTcpServer+0xd9>\n     dcf:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     dd2:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n     dd6:\t75 0e                \tjne    de6 <_anetTcpServer+0xf0>\n     dd8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     ddc:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n     de0:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     de4:\teb 57                \tjmp    e3d <_anetTcpServer+0x147>\n     de6:\t83 7d 90 0a          \tcmpl   $0xa,-0x70(%rbp)\n     dea:\t75 16                \tjne    e02 <_anetTcpServer+0x10c>\n     dec:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     def:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     df3:\t89 d6                \tmov    %edx,%esi\n     df5:\t48 89 c7             \tmov    %rax,%rdi\n     df8:\te8 7e fe ff ff       \tcallq  c7b <anetV6Only>\n     dfd:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     e00:\t74 65                \tje     e67 <_anetTcpServer+0x171>\n     e02:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     e05:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     e09:\t89 d6                \tmov    %edx,%esi\n     e0b:\t48 89 c7             \tmov    %rax,%rdi\n     e0e:\te8 29 f8 ff ff       \tcallq  63c <anetSetReuseAddr>\n     e13:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     e16:\t74 52                \tje     e6a <_anetTcpServer+0x174>\n     e18:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     e1c:\t8b 48 10             \tmov    0x10(%rax),%ecx\n     e1f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     e23:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n     e27:\t8b 75 fc             \tmov    -0x4(%rbp),%esi\n     e2a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     e2e:\t48 89 c7             \tmov    %rax,%rdi\n     e31:\te8 8b fd ff ff       \tcallq  bc1 <anetListen>\n     e36:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     e39:\t75 3c                \tjne    e77 <_anetTcpServer+0x181>\n     e3b:\teb 31                \tjmp    e6e <_anetTcpServer+0x178>\n     e3d:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     e42:\t0f 85 69 ff ff ff    \tjne    db1 <_anetTcpServer+0xbb>\n     e48:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     e4d:\t75 1e                \tjne    e6d <_anetTcpServer+0x177>\n     e4f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     e53:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     e58:\t48 89 c7             \tmov    %rax,%rdi\n     e5b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e60:\te8 9b f1 ff ff       \tcallq  0 <anetSetError>\n     e65:\teb 07                \tjmp    e6e <_anetTcpServer+0x178>\n     e67:\t90                   \tnop\n     e68:\teb 04                \tjmp    e6e <_anetTcpServer+0x178>\n     e6a:\t90                   \tnop\n     e6b:\teb 01                \tjmp    e6e <_anetTcpServer+0x178>\n     e6d:\t90                   \tnop\n     e6e:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n     e75:\teb 01                \tjmp    e78 <_anetTcpServer+0x182>\n     e77:\t90                   \tnop\n     e78:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     e7c:\t48 89 c7             \tmov    %rax,%rdi\n     e7f:\te8 00 00 00 00       \tcallq  e84 <_anetTcpServer+0x18e>\n     e84:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     e87:\tc9                   \tleaveq \n     e88:\tc3                   \tretq   ", "code_s": "__int64 __fastcall anetTcpServer(char *a1, unsigned int a2, const char *a3,\n                                 int a4) {\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  const char *v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 result;\n  struct addrinfo *<span class=\"supfact\">pai</span>;\n  struct addrinfo <span class=\"supfact\">req</span>;\n  char <span class=\"supfact\">s</span>[Number];\n  int <span class=\"supfact\">ecode</span>;\n  struct addrinfo *<span class=\"supfact\">i</span>;\n  unsigned int <span class=\"supfact\">v20</span>;\n  snprintf(<span class=\"supfact\">s</span>, Number, String, a2);\n  memset(&<span class=\"supfact\">req</span>, Number, sizeof(<span class=\"supfact\">req</span>));\n  <span class=\"supfact\">req</span>.ai_family = a4;\n  <span class=\"supfact\">req</span>.ai_socktype = Number;\n  <span class=\"supfact\">req</span>.ai_flags = Number;\n  <span class=\"supfact\">ecode</span> = getaddrinfo(\n      a3, <span class=\"supfact\">s</span>, &<span class=\"supfact\">req</span>, &<span class=\"supfact\">pai</span>);\n  if (<span class=\"supfact\">ecode</span>) {\n    v8 = gai_strerror(<span class=\"supfact\">ecode</span>);\n    anetSetError(a1, String, (__int64)v8, v9, v10, v11);\n    result = Number;\n  } else {\n    for (<span class=\"supfact\">i</span> = <span class=\"supfact\">pai</span>;;\n         <span class=\"supfact\">i</span> = <span class=\"supfact\">i</span>->ai_next) {\n      if (!<span class=\"supfact\">i</span>) {\n        anetSetError(a1, String, v4, v5, v6, v7);\n      LABEL_13:\n        <span class=\"supfact\">v20</span> = Number;\n        goto LABEL_14;\n      }\n      <span class=\"supfact\">v20</span> =\n          socket(<span class=\"supfact\">i</span>->ai_family, <span class=\"supfact\">i</span>->ai_socktype,\n                 <span class=\"supfact\">i</span>->ai_protocol);\n      if (<span class=\"supfact\">v20</span> != Number)\n        break;\n    }\n    if (a4 == Number &&\n            (unsigned int)anetV6Only(a1, <span class=\"supfact\">v20</span>) == Number ||\n        (unsigned int)anetSetReuseAddr(a1, <span class=\"supfact\">v20</span>) == Number ||\n        (unsigned int)anetListen(a1, <span class=\"supfact\">v20</span>,\n                                 <span class=\"supfact\">i</span>->ai_addr,\n                                 <span class=\"supfact\">i</span>->ai_addrlen) == Number) {\n      goto LABEL_13;\n    }\n  LABEL_14:\n    freeaddrinfo(<span class=\"supfact\">pai</span>);\n    result = <span class=\"supfact\">v20</span>;\n  }\n  return result;\n}", "code_t": "int __cdecl anetTcpServer(char *err, int port, char *bindaddr, int af_0) {\n  const char *v4;\n  int result;\n  addrinfo *<span class=\"supfact\">servinfo</span>;\n  addrinfo <span class=\"supfact\">hints</span>;\n  char <span class=\"supfact\">_port</span>[Number];\n  int <span class=\"supfact\">rv</span>;\n  addrinfo *<span class=\"supfact\">p</span>;\n  int <span class=\"supfact\">s</span>;\n  snprintf(<span class=\"supfact\">_port</span>, Number, String, (unsigned int)port);\n  memset(&<span class=\"supfact\">hints</span>, Number, sizeof(<span class=\"supfact\">hints</span>));\n  <span class=\"supfact\">hints</span>.ai_family = af_0;\n  <span class=\"supfact\">hints</span>.ai_socktype = Number;\n  <span class=\"supfact\">hints</span>.ai_flags = Number;\n  <span class=\"supfact\">rv</span> =\n      getaddrinfo(bindaddr, <span class=\"supfact\">_port</span>, &<span class=\"supfact\">hints</span>,\n                  &<span class=\"supfact\">servinfo</span>);\n  if (<span class=\"supfact\">rv</span>) {\n    v4 = gai_strerror(<span class=\"supfact\">rv</span>);\n    anetSetError(err, String, v4);\n    result = Number;\n  } else {\n    for (<span class=\"supfact\">p</span> = <span class=\"supfact\">servinfo</span>;;\n         <span class=\"supfact\">p</span> = <span class=\"supfact\">p</span>->ai_next) {\n      if (!<span class=\"supfact\">p</span>) {\n        anetSetError(err, String);\n      error:\n        <span class=\"supfact\">s</span> = Number;\n        goto end;\n      }\n      <span class=\"supfact\">s</span> =\n          socket(<span class=\"supfact\">p</span>->ai_family, <span class=\"supfact\">p</span>->ai_socktype,\n                 <span class=\"supfact\">p</span>->ai_protocol);\n      if (<span class=\"supfact\">s</span> != Number)\n        break;\n    }\n    if (af_0 == Number && anetV6Only(err, <span class=\"supfact\">s</span>) == Number ||\n        anetSetReuseAddr(err, <span class=\"supfact\">s</span>) == Number ||\n        anetListen(err, <span class=\"supfact\">s</span>, <span class=\"supfact\">p</span>->ai_addr,\n                   <span class=\"supfact\">p</span>->ai_addrlen) == Number) {\n      goto error;\n    }\n  end:\n    freeaddrinfo(<span class=\"supfact\">servinfo</span>);\n    result = <span class=\"supfact\">s</span>;\n  }\n  return result;\n}", "var": [{"name": "req", "type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }", "ref_name": "hints", "ref_type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }"}], "body_in_train": false}, {"repo_owner": "trakons", "repo_name": "QEMU-s5l89xx-test", "path": "trakons/QEMU-s5l89xx-test/2d53edb2434ec64b313381a8520f55f785991cf5b2474d10030c414f3da403e7", "path_in_repo": "trakons/QEMU-s5l89xx-test//qemu-io", "objdump": "000000000040675d <info_f>:\n  40675d:\t55                   \tpush   %rbp\n  40675e:\t48 89 e5             \tmov    %rsp,%rbp\n  406761:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n  406768:\t89 bd 4c ff ff ff    \tmov    %edi,-0xb4(%rbp)\n  40676e:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n  406775:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  40677c:\t00 00 \n  40677e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  406782:\t31 c0                \txor    %eax,%eax\n  406784:\t48 8b 05 c5 8b 06 00 \tmov    0x68bc5(%rip),%rax        # 46f350 <bs>\n  40678b:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  40678f:\t48 85 c0             \ttest   %rax,%rax\n  406792:\t74 33                \tje     4067c7 <info_f+0x6a>\n  406794:\t48 8b 05 b5 8b 06 00 \tmov    0x68bb5(%rip),%rax        # 46f350 <bs>\n  40679b:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  40679f:\t48 8b 00             \tmov    (%rax),%rax\n  4067a2:\t48 85 c0             \ttest   %rax,%rax\n  4067a5:\t74 20                \tje     4067c7 <info_f+0x6a>\n  4067a7:\t48 8b 05 a2 8b 06 00 \tmov    0x68ba2(%rip),%rax        # 46f350 <bs>\n  4067ae:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  4067b2:\t48 8b 00             \tmov    (%rax),%rax\n  4067b5:\t48 89 c6             \tmov    %rax,%rsi\n  4067b8:\tbf 00 0b 45 00       \tmov    $0x450b00,%edi\n  4067bd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4067c2:\te8 89 c8 ff ff       \tcallq  403050 <printf@plt>\n  4067c7:\t48 8b 05 82 8b 06 00 \tmov    0x68b82(%rip),%rax        # 46f350 <bs>\n  4067ce:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  4067d2:\t48 85 c0             \ttest   %rax,%rax\n  4067d5:\t74 3b                \tje     406812 <info_f+0xb5>\n  4067d7:\t48 8b 05 72 8b 06 00 \tmov    0x68b72(%rip),%rax        # 46f350 <bs>\n  4067de:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  4067e2:\t48 8b 80 a0 00 00 00 \tmov    0xa0(%rax),%rax\n  4067e9:\t48 85 c0             \ttest   %rax,%rax\n  4067ec:\t74 24                \tje     406812 <info_f+0xb5>\n  4067ee:\t48 8b 05 5b 8b 06 00 \tmov    0x68b5b(%rip),%rax        # 46f350 <bs>\n  4067f5:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n  4067f9:\t48 8b 80 a0 00 00 00 \tmov    0xa0(%rax),%rax\n  406800:\t48 89 c6             \tmov    %rax,%rsi\n  406803:\tbf 00 0b 45 00       \tmov    $0x450b00,%edi\n  406808:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40680d:\te8 3e c8 ff ff       \tcallq  403050 <printf@plt>\n  406812:\t48 8b 05 37 8b 06 00 \tmov    0x68b37(%rip),%rax        # 46f350 <bs>\n  406819:\t48 8d 95 60 ff ff ff \tlea    -0xa0(%rbp),%rdx\n  406820:\t48 89 d6             \tmov    %rdx,%rsi\n  406823:\t48 89 c7             \tmov    %rax,%rdi\n  406826:\te8 db dc 00 00       \tcallq  414506 <bdrv_get_info>\n  40682b:\t89 85 5c ff ff ff    \tmov    %eax,-0xa4(%rbp)\n  406831:\t83 bd 5c ff ff ff 00 \tcmpl   $0x0,-0xa4(%rbp)\n  406838:\t74 07                \tje     406841 <info_f+0xe4>\n  40683a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40683f:\teb 6f                \tjmp    4068b0 <info_f+0x153>\n  406841:\t8b 85 60 ff ff ff    \tmov    -0xa0(%rbp),%eax\n  406847:\tf2 0f 2a c0          \tcvtsi2sd %eax,%xmm0\n  40684b:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  406852:\tbe 40 00 00 00       \tmov    $0x40,%esi\n  406857:\t48 89 c7             \tmov    %rax,%rdi\n  40685a:\te8 66 19 00 00       \tcallq  4081c5 <cvtstr>\n  40685f:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n  406866:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n  40686b:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  40686f:\tbe 40 00 00 00       \tmov    $0x40,%esi\n  406874:\t48 89 c7             \tmov    %rax,%rdi\n  406877:\te8 49 19 00 00       \tcallq  4081c5 <cvtstr>\n  40687c:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  406883:\t48 89 c6             \tmov    %rax,%rsi\n  406886:\tbf 11 0b 45 00       \tmov    $0x450b11,%edi\n  40688b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  406890:\te8 bb c7 ff ff       \tcallq  403050 <printf@plt>\n  406895:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  406899:\t48 89 c6             \tmov    %rax,%rsi\n  40689c:\tbf 23 0b 45 00       \tmov    $0x450b23,%edi\n  4068a1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4068a6:\te8 a5 c7 ff ff       \tcallq  403050 <printf@plt>\n  4068ab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4068b0:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  4068b4:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n  4068bb:\t00 00 \n  4068bd:\t74 05                \tje     4068c4 <info_f+0x167>\n  4068bf:\te8 9c cc ff ff       \tcallq  403560 <__stack_chk_fail@plt>\n  4068c4:\tc9                   \tleaveq \n  4068c5:\tc3                   \tretq   ", "code_s": "__int64 info_f() {\n  int <span class=\"supfact\">v1</span>[Number];\n  char <span class=\"supfact\">v2</span>[Number];\n  char <span class=\"supfact\">v3</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v4</span>;\n  <span class=\"supfact\">v4</span> = __readfsqword(Number);\n  if (*(_QWORD *)(bs + Number) && **(_QWORD **)(bs + Number))\n    printf(String, **(const char ***)(bs + Number));\n  if (*(_QWORD *)(bs + Number) &&\n      *(_QWORD *)(*(_QWORD *)(bs + Number) + Number L))\n    printf(String, *(const char **)(*(_QWORD *)(bs + Number) + Number L));\n  if (!(unsigned int)bdrv_get_info(bs, <span class=\"supfact\">v1</span>)) {\n    cvtstr(<span class=\"supfact\">v2</span>, Number L, (double)<span class=\"supfact\">v1</span>[Number]);\n    cvtstr(<span class=\"supfact\">v3</span>, Number L, (double)<span class=\"supfact\">v1</span>[Number]);\n    printf(String, <span class=\"supfact\">v2</span>);\n    printf(String, <span class=\"supfact\">v3</span>);\n  }\n  return Number L;\n}", "code_t": "int __cdecl info_f(int argc, char **argv) {\n  BlockDriverInfo_0 <span class=\"supfact\">bdi</span>;\n  char <span class=\"supfact\">s1</span>[Number];\n  char <span class=\"supfact\">s2</span>[Number];\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (bs->drv && bs->drv->format_name)\n    printf(String, bs->drv->format_name);\n  if (bs->drv && bs->drv->protocol_name)\n    printf(String, bs->drv->protocol_name);\n  if (!bdrv_get_info(bs, &<span class=\"supfact\">bdi</span>)) {\n    cvtstr((double)<span class=\"supfact\">bdi</span>.cluster_size, <span class=\"supfact\">s1</span>,\n           Number);\n    cvtstr((double)SLODWORD(<span class=\"supfact\">bdi</span>.vm_state_offset),\n           <span class=\"supfact\">s2</span>, Number);\n    printf(String, <span class=\"supfact\">s1</span>);\n    printf(String, <span class=\"supfact\">s2</span>);\n  }\n  return Number;\n}", "var": [{"name": "v1", "type": "struct BlockDriverInfo_0 { int cluster_size; PADDING (4); int64_t vm_state_offset; }", "ref_name": "bdi", "ref_type": "struct BlockDriverInfo_0 { int cluster_size; PADDING (4); int64_t vm_state_offset; }"}], "body_in_train": false}, {"repo_owner": "mthuurne", "repo_name": "qemu-dingoo", "path": "mthuurne/qemu-dingoo/54b1befca550d081af56e78ada11be73983f0f776e0f17dc67503e1d7a69a772", "path_in_repo": "mthuurne/qemu-dingoo//net/socket.o", "objdump": "00000000000007be <net_socket_fd_init_dgram>:\n     7be:\t55                   \tpush   %rbp\n     7bf:\t48 89 e5             \tmov    %rsp,%rbp\n     7c2:\t53                   \tpush   %rbx\n     7c3:\t48 83 ec 68          \tsub    $0x68,%rsp\n     7c7:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n     7cb:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n     7cf:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n     7d3:\t89 4d 94             \tmov    %ecx,-0x6c(%rbp)\n     7d6:\t44 89 45 90          \tmov    %r8d,-0x70(%rbp)\n     7da:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     7e1:\t00 00 \n     7e3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     7e7:\t31 c0                \txor    %eax,%eax\n     7e9:\t83 7d 90 00          \tcmpl   $0x0,-0x70(%rbp)\n     7ed:\t0f 84 c4 00 00 00    \tje     8b7 <net_socket_fd_init_dgram+0xf9>\n     7f3:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     7f7:\t48 89 c1             \tmov    %rax,%rcx\n     7fa:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n     7fe:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n     801:\t48 89 ce             \tmov    %rcx,%rsi\n     804:\t89 c7                \tmov    %eax,%edi\n     806:\te8 00 00 00 00       \tcallq  80b <net_socket_fd_init_dgram+0x4d>\n     80b:\t85 c0                \ttest   %eax,%eax\n     80d:\t75 71                \tjne    880 <net_socket_fd_init_dgram+0xc2>\n     80f:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     812:\t85 c0                \ttest   %eax,%eax\n     814:\t75 26                \tjne    83c <net_socket_fd_init_dgram+0x7e>\n     816:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 81d <net_socket_fd_init_dgram+0x5f>\n     81d:\t8b 55 94             \tmov    -0x6c(%rbp),%edx\n     820:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     825:\t48 89 c7             \tmov    %rax,%rdi\n     828:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     82d:\te8 00 00 00 00       \tcallq  832 <net_socket_fd_init_dgram+0x74>\n     832:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     837:\te9 66 01 00 00       \tjmpq   9a2 <net_socket_fd_init_dgram+0x1e4>\n     83c:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n     840:\t48 89 c7             \tmov    %rax,%rdi\n     843:\te8 1f fd ff ff       \tcallq  567 <net_socket_mcast_create>\n     848:\t89 45 b4             \tmov    %eax,-0x4c(%rbp)\n     84b:\t83 7d b4 00          \tcmpl   $0x0,-0x4c(%rbp)\n     84f:\t79 14                \tjns    865 <net_socket_fd_init_dgram+0xa7>\n     851:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n     854:\t89 c7                \tmov    %eax,%edi\n     856:\te8 00 00 00 00       \tcallq  85b <net_socket_fd_init_dgram+0x9d>\n     85b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     860:\te9 3d 01 00 00       \tjmpq   9a2 <net_socket_fd_init_dgram+0x1e4>\n     865:\t8b 55 94             \tmov    -0x6c(%rbp),%edx\n     868:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n     86b:\t89 d6                \tmov    %edx,%esi\n     86d:\t89 c7                \tmov    %eax,%edi\n     86f:\te8 00 00 00 00       \tcallq  874 <net_socket_fd_init_dgram+0xb6>\n     874:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n     877:\t89 c7                \tmov    %eax,%edi\n     879:\te8 00 00 00 00       \tcallq  87e <net_socket_fd_init_dgram+0xc0>\n     87e:\teb 37                \tjmp    8b7 <net_socket_fd_init_dgram+0xf9>\n     880:\te8 00 00 00 00       \tcallq  885 <net_socket_fd_init_dgram+0xc7>\n     885:\t8b 00                \tmov    (%rax),%eax\n     887:\t89 c7                \tmov    %eax,%edi\n     889:\te8 00 00 00 00       \tcallq  88e <net_socket_fd_init_dgram+0xd0>\n     88e:\t48 89 c1             \tmov    %rax,%rcx\n     891:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 898 <net_socket_fd_init_dgram+0xda>\n     898:\t8b 55 94             \tmov    -0x6c(%rbp),%edx\n     89b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     8a0:\t48 89 c7             \tmov    %rax,%rdi\n     8a3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     8a8:\te8 00 00 00 00       \tcallq  8ad <net_socket_fd_init_dgram+0xef>\n     8ad:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     8b2:\te9 eb 00 00 00       \tjmpq   9a2 <net_socket_fd_init_dgram+0x1e4>\n     8b7:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n     8bb:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n     8bf:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     8c3:\t49 89 c8             \tmov    %rcx,%r8\n     8c6:\t48 89 d1             \tmov    %rdx,%rcx\n     8c9:\tba 00 00 00 00       \tmov    $0x0,%edx\n     8ce:\t48 89 c6             \tmov    %rax,%rsi\n     8d1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     8d6:\te8 00 00 00 00       \tcallq  8db <net_socket_fd_init_dgram+0x11d>\n     8db:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n     8df:\t0f b7 45 d2          \tmovzwl -0x2e(%rbp),%eax\n     8e3:\t0f b7 c0             \tmovzwl %ax,%eax\n     8e6:\t89 c7                \tmov    %eax,%edi\n     8e8:\te8 00 00 00 00       \tcallq  8ed <net_socket_fd_init_dgram+0x12f>\n     8ed:\t0f b7 d8             \tmovzwl %ax,%ebx\n     8f0:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     8f3:\t89 c7                \tmov    %eax,%edi\n     8f5:\te8 00 00 00 00       \tcallq  8fa <net_socket_fd_init_dgram+0x13c>\n     8fa:\t48 89 c2             \tmov    %rax,%rdx\n     8fd:\t83 7d 90 00          \tcmpl   $0x0,-0x70(%rbp)\n     901:\t74 07                \tje     90a <net_socket_fd_init_dgram+0x14c>\n     903:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     908:\teb 05                \tjmp    90f <net_socket_fd_init_dgram+0x151>\n     90a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     90f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     913:\t48 8d 78 48          \tlea    0x48(%rax),%rdi\n     917:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n     91a:\t48 83 ec 08          \tsub    $0x8,%rsp\n     91e:\t53                   \tpush   %rbx\n     91f:\t49 89 d1             \tmov    %rdx,%r9\n     922:\t49 89 c8             \tmov    %rcx,%r8\n     925:\t89 c1                \tmov    %eax,%ecx\n     927:\tba 00 00 00 00       \tmov    $0x0,%edx\n     92c:\tbe 00 01 00 00       \tmov    $0x100,%esi\n     931:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     936:\te8 00 00 00 00       \tcallq  93b <net_socket_fd_init_dgram+0x17d>\n     93b:\t48 83 c4 10          \tadd    $0x10,%rsp\n     93f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     943:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     947:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     94b:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     94f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     953:\t8b 55 94             \tmov    -0x6c(%rbp),%edx\n     956:\t89 90 50 01 00 00    \tmov    %edx,0x150(%rax)\n     95c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     960:\t8b 80 50 01 00 00    \tmov    0x150(%rax),%eax\n     966:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n     96a:\t48 89 d1             \tmov    %rdx,%rcx\n     96d:\tba 00 00 00 00       \tmov    $0x0,%edx\n     972:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     977:\t89 c7                \tmov    %eax,%edi\n     979:\te8 00 00 00 00       \tcallq  97e <net_socket_fd_init_dgram+0x1c0>\n     97e:\t83 7d 90 00          \tcmpl   $0x0,-0x70(%rbp)\n     982:\t74 1a                \tje     99e <net_socket_fd_init_dgram+0x1e0>\n     984:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n     988:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     98c:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     990:\t48 89 81 60 11 00 00 \tmov    %rax,0x1160(%rcx)\n     997:\t48 89 91 68 11 00 00 \tmov    %rdx,0x1168(%rcx)\n     99e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     9a2:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n     9a6:\t64 48 33 1c 25 28 00 \txor    %fs:0x28,%rbx\n     9ad:\t00 00 \n     9af:\t74 05                \tje     9b6 <net_socket_fd_init_dgram+0x1f8>\n     9b1:\te8 00 00 00 00       \tcallq  9b6 <net_socket_fd_init_dgram+0x1f8>\n     9b6:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n     9ba:\tc9                   \tleaveq \n     9bb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall net_socket_fd_init_dgram(__int64 a1, __int64 a2, __int64 a3,\n                                            unsigned int a4, int a5) {\n  int *v6;\n  char *v7;\n  __int64 v8;\n  char *v9;\n  const char *v10;\n  __int64 v11;\n  __int64 v12;\n  socklen_t <span class=\"supfact\">len</span>;\n  int <span class=\"supfact\">v17</span>;\n  __int64 <span class=\"supfact\">v18</span>;\n  __int64 <span class=\"supfact\">v19</span>;\n  __int64 <span class=\"supfact\">v20</span>;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  unsigned __int64 <span class=\"supfact\">v22</span>;\n  <span class=\"supfact\">v22</span> = __readfsqword(Number);\n  if (a5) {\n    if (getsockname(a4, &<span class=\"supfact\">addr</span>, &<span class=\"supfact\">len</span>)) {\n      v6 = _errno_location();\n      v7 = strerror(*v6);\n      fprintf(stderr, String, a4, v7);\n      return Number L;\n    }\n    if (!*(_DWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number]) {\n      fprintf(stderr, String, a4);\n      return Number L;\n    }\n    <span class=\"supfact\">v17</span> =\n        net_socket_mcast_create((__int64)&<span class=\"supfact\">addr</span>);\n    if (<span class=\"supfact\">v17</span> < Number) {\n      close(a4);\n      return Number L;\n    }\n    dup2(<span class=\"supfact\">v17</span>, a4);\n    close(<span class=\"supfact\">v17</span>);\n  }\n  <span class=\"supfact\">v18</span> =\n      qemu_new_net_client(&net_dgram_socket_info, a1, Number L, a2, a3);\n  v8 = ntohs(*(uint16_t *)<span class=\"supfact\">addr</span>.sa_data);\n  v9 = inet_ntoa(*(struct in_addr *)&<span class=\"supfact\">addr</span>.sa_data[Number]);\n  if (a5)\n    v10 = String;\n  else\n    v10 = (const char *)&unk_1730;\n  snprintf((char *)(<span class=\"supfact\">v18</span> + Number), Number, String, a4, v10, v9,\n           v8);\n  <span class=\"supfact\">v19</span> = <span class=\"supfact\">v18</span>;\n  <span class=\"supfact\">v20</span> = <span class=\"supfact\">v18</span>;\n  *(_DWORD *)(<span class=\"supfact\">v18</span> + Number) = a4;\n  qemu_set_fd_handler(*(unsigned int *)(<span class=\"supfact\">v20</span> + Number),\n                      net_socket_send_dgram, Number L, <span class=\"supfact\">v20</span>);\n  if (a5) {\n    v11 = <span class=\"supfact\">v20</span>;\n    v12 = *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number];\n    *(_QWORD *)(<span class=\"supfact\">v20</span> + Number) =\n        *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_family;\n    *(_QWORD *)(v11 + Number) = v12;\n  }\n  return <span class=\"supfact\">v20</span>;\n}", "code_t": "NetSocketState_0 *__cdecl net_socket_fd_init_dgram(VLANState_0 *vlan,\n                                                   const char *model,\n                                                   const char *name, int fd,\n                                                   int is_connected) {\n  int *v6;\n  char *v7;\n  __int64 v8;\n  char *v9;\n  const char *v10;\n  NetSocketState_0 *v11;\n  __int64 v12;\n  socklen_t <span class=\"supfact\">saddr_len</span>;\n  int <span class=\"supfact\">newfd</span>;\n  VLANClientState_0 *<span class=\"supfact\">nc</span>;\n  const VLANClientState_0 *<span class=\"supfact\">__mptr</span>;\n  NetSocketState_0 *<span class=\"supfact\">s</span>;\n  sockaddr_in <span class=\"supfact\">saddr</span>;\n  unsigned __int64 <span class=\"supfact\">v22</span>;\n  <span class=\"supfact\">v22</span> = __readfsqword(Number);\n  if (is_connected) {\n    if (getsockname(fd, (struct sockaddr *)&<span class=\"supfact\">saddr</span>,\n                    &<span class=\"supfact\">saddr_len</span>)) {\n      v6 = _errno_location();\n      v7 = strerror(*v6);\n      fprintf(stderr, String, (unsigned int)fd, v7);\n      return Number L;\n    }\n    if (!<span class=\"supfact\">saddr</span>.sin_addr.s_addr) {\n      fprintf(stderr, String, (unsigned int)fd);\n      return Number L;\n    }\n    <span class=\"supfact\">newfd</span> = net_socket_mcast_create(&<span class=\"supfact\">saddr</span>);\n    if (<span class=\"supfact\">newfd</span> < Number) {\n      close(fd);\n      return Number L;\n    }\n    dup2(<span class=\"supfact\">newfd</span>, fd);\n    close(<span class=\"supfact\">newfd</span>);\n  }\n  <span class=\"supfact\">nc</span> = (VLANClientState_0 *)qemu_new_net_client(\n      &net_dgram_socket_info, vlan, Number L, model, name);\n  v8 = ntohs(<span class=\"supfact\">saddr</span>.sin_port);\n  v9 = inet_ntoa(<span class=\"supfact\">saddr</span>.sin_addr);\n  if (is_connected)\n    v10 = String;\n  else\n    v10 = (const char *)&unk_1730;\n  snprintf(<span class=\"supfact\">nc</span>->info_str, Number, String, (unsigned int)fd, v10,\n           v9, v8);\n  <span class=\"supfact\">__mptr</span> = <span class=\"supfact\">nc</span>;\n  <span class=\"supfact\">s</span> = (NetSocketState_0 *)<span class=\"supfact\">nc</span>;\n  LODWORD(<span class=\"supfact\">nc</span>[Number].info) = fd;\n  qemu_set_fd_handler((unsigned int)<span class=\"supfact\">s</span>->fd,\n                      net_socket_send_dgram, Number L, <span class=\"supfact\">s</span>);\n  if (is_connected) {\n    v11 = <span class=\"supfact\">s</span>;\n    v12 = *(_QWORD *)<span class=\"supfact\">saddr</span>.sin_zero;\n    *(_QWORD *)&<span class=\"supfact\">s</span>->dgram_dst.sin_family =\n        *(_QWORD *)&<span class=\"supfact\">saddr</span>.sin_family;\n    *(_QWORD *)v11->dgram_dst.sin_zero = v12;\n  }\n  return <span class=\"supfact\">s</span>;\n}", "var": [{"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "ref_name": "saddr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "silentbicycle", "repo_name": "theft", "path": "silentbicycle/theft/87c15ad1a2fbbed817818486acb7ddc78f0c1d916a84ede0f59adef464ab4e28", "path_in_repo": "silentbicycle/theft//build/test_theft_autoshrink.o", "objdump": "0000000000003f86 <double_abs_lt1>:\n    3f86:\t55                   \tpush   %rbp\n    3f87:\t48 89 e5             \tmov    %rsp,%rbp\n    3f8a:\t48 81 ec 40 01 00 00 \tsub    $0x140,%rsp\n    3f91:\te8 00 00 00 00       \tcallq  3f96 <double_abs_lt1+0x10>\n    3f96:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3f9a:\tc6 45 df 00          \tmovb   $0x0,-0x21(%rbp)\n    3f9e:\t48 8d 95 c0 fe ff ff \tlea    -0x140(%rbp),%rdx\n    3fa5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3faa:\tb9 23 00 00 00       \tmov    $0x23,%ecx\n    3faf:\t48 89 d7             \tmov    %rdx,%rdi\n    3fb2:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n    3fb5:\t48 8d 05 03 ff ff ff \tlea    -0xfd(%rip),%rax        # 3ebf <prop_abs_lt1>\n    3fbc:\t48 89 85 c0 fe ff ff \tmov    %rax,-0x140(%rbp)\n    3fc3:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n    3fc8:\te8 00 00 00 00       \tcallq  3fcd <double_abs_lt1+0x47>\n    3fcd:\t48 89 85 f8 fe ff ff \tmov    %rax,-0x108(%rbp)\n    3fd4:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 3fdb <double_abs_lt1+0x55>\n    3fdb:\t48 89 85 30 ff ff ff \tmov    %rax,-0xd0(%rbp)\n    3fe2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3fe6:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n    3fed:\t48 8d 05 11 ff ff ff \tlea    -0xef(%rip),%rax        # 3f05 <halt_after_seeing_1>\n    3ff4:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n    3ff8:\t48 8d 05 33 ff ff ff \tlea    -0xcd(%rip),%rax        # 3f32 <note_1>\n    3fff:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    4003:\t48 8d 45 df          \tlea    -0x21(%rbp),%rax\n    4007:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    400b:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n    4012:\t48 89 c7             \tmov    %rax,%rdi\n    4015:\te8 00 00 00 00       \tcallq  401a <double_abs_lt1+0x94>\n    401a:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    401d:\tc7 45 f0 01 00 00 00 \tmovl   $0x1,-0x10(%rbp)\n    4024:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4027:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    402a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4031 <double_abs_lt1+0xab>\n    4031:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4035:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    4038:\t3b 45 ec             \tcmp    -0x14(%rbp),%eax\n    403b:\t0f 84 ad 00 00 00    \tje     40ee <double_abs_lt1+0x168>\n    4041:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    4044:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    4048:\t89 c7                \tmov    %eax,%edi\n    404a:\tff d2                \tcallq  *%rdx\n    404c:\t48 89 c2             \tmov    %rax,%rdx\n    404f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4056 <double_abs_lt1+0xd0>\n    4056:\t48 8b 00             \tmov    (%rax),%rax\n    4059:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4060 <double_abs_lt1+0xda>\n    4060:\t48 89 c7             \tmov    %rax,%rdi\n    4063:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4068:\te8 00 00 00 00       \tcallq  406d <double_abs_lt1+0xe7>\n    406d:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    4070:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    4074:\t89 c7                \tmov    %eax,%edi\n    4076:\tff d2                \tcallq  *%rdx\n    4078:\t48 89 c2             \tmov    %rax,%rdx\n    407b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4082 <double_abs_lt1+0xfc>\n    4082:\t48 8b 00             \tmov    (%rax),%rax\n    4085:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 408c <double_abs_lt1+0x106>\n    408c:\t48 89 c7             \tmov    %rax,%rdi\n    408f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4094:\te8 00 00 00 00       \tcallq  4099 <double_abs_lt1+0x113>\n    4099:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40a0 <double_abs_lt1+0x11a>\n    40a0:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 40a7 <double_abs_lt1+0x121>\n    40a7:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n    40ab:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40b2 <double_abs_lt1+0x12c>\n    40b2:\tc7 40 48 22 04 00 00 \tmovl   $0x422,0x48(%rax)\n    40b9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40c0 <double_abs_lt1+0x13a>\n    40c0:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 40c7 <double_abs_lt1+0x141>\n    40c7:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n    40cb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40d2 <double_abs_lt1+0x14c>\n    40d2:\t0f b6 00             \tmovzbl (%rax),%eax\n    40d5:\t0f b6 c0             \tmovzbl %al,%eax\n    40d8:\t83 e0 04             \tand    $0x4,%eax\n    40db:\t85 c0                \ttest   %eax,%eax\n    40dd:\t74 05                \tje     40e4 <double_abs_lt1+0x15e>\n    40df:\te8 00 00 00 00       \tcallq  40e4 <double_abs_lt1+0x15e>\n    40e4:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    40e9:\te9 88 00 00 00       \tjmpq   4176 <double_abs_lt1+0x1f0>\n    40ee:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40f5 <double_abs_lt1+0x16f>\n    40f5:\t8b 40 44             \tmov    0x44(%rax),%eax\n    40f8:\t8d 50 01             \tlea    0x1(%rax),%edx\n    40fb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4102 <double_abs_lt1+0x17c>\n    4102:\t89 50 44             \tmov    %edx,0x44(%rax)\n    4105:\t0f b6 45 df          \tmovzbl -0x21(%rbp),%eax\n    4109:\t83 f0 01             \txor    $0x1,%eax\n    410c:\t84 c0                \ttest   %al,%al\n    410e:\t74 52                \tje     4162 <double_abs_lt1+0x1dc>\n    4110:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4117 <double_abs_lt1+0x191>\n    4117:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 411e <double_abs_lt1+0x198>\n    411e:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n    4122:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4129 <double_abs_lt1+0x1a3>\n    4129:\tc7 40 48 24 04 00 00 \tmovl   $0x424,0x48(%rax)\n    4130:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4137 <double_abs_lt1+0x1b1>\n    4137:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 413e <double_abs_lt1+0x1b8>\n    413e:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n    4142:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4149 <double_abs_lt1+0x1c3>\n    4149:\t0f b6 00             \tmovzbl (%rax),%eax\n    414c:\t0f b6 c0             \tmovzbl %al,%eax\n    414f:\t83 e0 04             \tand    $0x4,%eax\n    4152:\t85 c0                \ttest   %eax,%eax\n    4154:\t74 05                \tje     415b <double_abs_lt1+0x1d5>\n    4156:\te8 00 00 00 00       \tcallq  415b <double_abs_lt1+0x1d5>\n    415b:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    4160:\teb 14                \tjmp    4176 <double_abs_lt1+0x1f0>\n    4162:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4169 <double_abs_lt1+0x1e3>\n    4169:\t48 c7 40 58 00 00 00 \tmovq   $0x0,0x58(%rax)\n    4170:\t00 \n    4171:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4176:\tc9                   \tleaveq \n    4177:\tc3                   \tretq   ", "code_s": "__int64 __fastcall double_abs_lt1(__int64 a1, __int64 a2) {\n  __int64 v2;\n  const char *v3;\n  const char *v4;\n  __int64 result;\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>;\n  __int64(__fastcall * <span class=\"supfact\">v8</span>)(_QWORD);\n  unsigned int <span class=\"supfact\">v9</span>;\n  unsigned int <span class=\"supfact\">v10</span>;\n  unsigned int <span class=\"supfact\">v11</span>;\n  __int64 <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v12</span> = theft_seed_of_time();\n  <span class=\"supfact\">v7</span> = Number;\n  memset(<span class=\"supfact\">v6</span>, Number, sizeof(<span class=\"supfact\">v6</span>));\n  <span class=\"supfact\">v6</span>[Number] = (__int64)prop_abs_lt1;\n  <span class=\"supfact\">v6</span>[Number] =\n      theft_get_builtin_type_info(Number L, a2, <span class=\"supfact\">v6</span>);\n  <span class=\"supfact\">v6</span>[Number] = (__int64)String;\n  <span class=\"supfact\">v6</span>[Number] = <span class=\"supfact\">v12</span>;\n  <span class=\"supfact\">v6</span>[Number] = (__int64)halt_after_seeing_1;\n  <span class=\"supfact\">v6</span>[Number] = (__int64)note_1;\n  <span class=\"supfact\">v6</span>[Number] = (__int64)&<span class=\"supfact\">v7</span>;\n  <span class=\"supfact\">v11</span> = theft_run(<span class=\"supfact\">v6</span>, a2, v2);\n  <span class=\"supfact\">v10</span> = Number;\n  <span class=\"supfact\">v9</span> = <span class=\"supfact\">v11</span>;\n  <span class=\"supfact\">v8</span> = (__int64(__fastcall *)(_QWORD)) & theft_run_res_str;\n  if (<span class=\"supfact\">v11</span> == Number) {\n    ++*((_DWORD *)&greatest_info + Number);\n    if (<span class=\"supfact\">v7</span> != Number) {\n      *((_QWORD *)&greatest_info + Number) = String;\n      *((_DWORD *)&greatest_info + Number) = Number;\n      *((_QWORD *)&greatest_info + Number) = String;\n      if ((greatest_info & Number) != Number)\n        abort();\n      result = Number;\n    } else {\n      *((_QWORD *)&greatest_info + Number) = Number L;\n      result = Number L;\n    }\n  } else {\n    v3 = (const char *)<span class=\"supfact\">v8</span>(<span class=\"supfact\">v10</span>);\n    fprintf(stdout, String, v3);\n    v4 = (const char *)<span class=\"supfact\">v8</span>(<span class=\"supfact\">v9</span>);\n    fprintf(stdout, String, v4);\n    *((_QWORD *)&greatest_info + Number) = String;\n    *((_DWORD *)&greatest_info + Number) = Number;\n    *((_QWORD *)&greatest_info + Number) = String;\n    if ((greatest_info & Number) != Number)\n      abort();\n    result = Number;\n  }\n  return result;\n}", "code_t": "greatest_test_res __cdecl double_abs_lt1() {\n  __int64 v0;\n  const char *v1;\n  const char *v2;\n  greatest_test_res result;\n  theft_run_config <span class=\"supfact\">cfg</span>;\n  test_env <span class=\"supfact\">e</span>;\n  greatest_enum_str_fun *<span class=\"supfact\">greatest_ENUM_STR</span>;\n  int <span class=\"supfact\">greatest_GOT</span>;\n  int <span class=\"supfact\">greatest_EXP</span>;\n  theft_run_res <span class=\"supfact\">res</span>;\n  theft_seed <span class=\"supfact\">seed</span>;\n  <span class=\"supfact\">seed</span> = theft_seed_of_time();\n  <span class=\"supfact\">e</span>.passed = Number;\n  memset(&<span class=\"supfact\">cfg</span>, Number, sizeof(<span class=\"supfact\">cfg</span>));\n  <span class=\"supfact\">cfg</span>.prop1 = (theft_propfun1 *)prop_abs_lt1;\n  <span class=\"supfact\">cfg</span>.type_info[Number] =\n      (const theft_type_info *)theft_get_builtin_type_info(\n          Number L, v0, &<span class=\"supfact\">cfg</span>);\n  <span class=\"supfact\">cfg</span>.name = String;\n  <span class=\"supfact\">cfg</span>.<span class=\"supfact\">seed</span> = <span class=\"supfact\">seed</span>;\n  <span class=\"supfact\">cfg</span>.hooks.trial_pre =\n      (theft_hook_trial_pre_cb *)halt_after_seeing_1;\n  <span class=\"supfact\">cfg</span>.hooks.trial_post = (theft_hook_trial_post_cb *)note_1;\n  <span class=\"supfact\">cfg</span>.hooks.env = &<span class=\"supfact\">e</span>;\n  <span class=\"supfact\">res</span> = (unsigned int)theft_run(&<span class=\"supfact\">cfg</span>, v0);\n  <span class=\"supfact\">greatest_EXP</span> = Number;\n  <span class=\"supfact\">greatest_GOT</span> = <span class=\"supfact\">res</span>;\n  <span class=\"supfact\">greatest_ENUM_STR</span> =\n      (greatest_enum_str_fun *)&theft_run_res_str;\n  if (<span class=\"supfact\">res</span> == THEFT_RUN_FAIL) {\n    ++*((_DWORD *)&greatest_info + Number);\n    if (!<span class=\"supfact\">e</span>.passed) {\n      *((_QWORD *)&greatest_info + Number) = String;\n      *((_DWORD *)&greatest_info + Number) = Number;\n      *((_QWORD *)&greatest_info + Number) = String;\n      if ((greatest_info & Number) != Number)\n        abort();\n      result = GREATEST_TEST_RES_FAIL;\n    } else {\n      *((_QWORD *)&greatest_info + Number) = Number L;\n      result = GREATEST_TEST_RES_PASS;\n    }\n  } else {\n    v1 = <span class=\"supfact\">greatest_ENUM_STR</span>(<span class=\"supfact\">greatest_EXP</span>);\n    fprintf(stdout, String, v1);\n    v2 = <span class=\"supfact\">greatest_ENUM_STR</span>(<span class=\"supfact\">greatest_GOT</span>);\n    fprintf(stdout, String, v2);\n    *((_QWORD *)&greatest_info + Number) = String;\n    *((_DWORD *)&greatest_info + Number) = Number;\n    *((_QWORD *)&greatest_info + Number) = String;\n    if ((greatest_info & Number) != Number)\n      abort();\n    result = GREATEST_TEST_RES_FAIL;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "__unk__", "ref_name": "cfg", "ref_type": "struct theft_run_config { theft_propfun1 * prop1; theft_propfun2 * prop2; theft_propfun3 * prop3; theft_propfun4 * prop4; theft_propfun5 * prop5; theft_propfun6 * prop6; theft_propfun7 * prop7; const theft_type_info *[7] type_info; const char * name; size_t always_seed_count; theft_seed * always_seeds; size_t trials; theft_seed seed; uint8_t bloom_bits; PADDING (7); $1169078AED1AEB32693D11A2FE9368C4 fork; $426D6590B0318B973A92003B274969BB hooks; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/d4a3e7148b67bff6fe668513f6b0b311eb206e1822da210277eb341beb1dc43d", "path_in_repo": "XanClic/qemu//arm-softmmu/hw/arm/smmuv3.o", "objdump": "0000000000000d10 <_nocheck__trace_smmuv3_find_ste>:\n     d10:\t55                   \tpush   %rbp\n     d11:\t48 89 e5             \tmov    %rsp,%rbp\n     d14:\t41 56                \tpush   %r14\n     d16:\t41 55                \tpush   %r13\n     d18:\t41 54                \tpush   %r12\n     d1a:\t53                   \tpush   %rbx\n     d1b:\t48 83 ec 30          \tsub    $0x30,%rsp\n     d1f:\t89 f9                \tmov    %edi,%ecx\n     d21:\t89 75 b8             \tmov    %esi,-0x48(%rbp)\n     d24:\t89 d0                \tmov    %edx,%eax\n     d26:\t89 ca                \tmov    %ecx,%edx\n     d28:\t66 89 55 bc          \tmov    %dx,-0x44(%rbp)\n     d2c:\t66 89 45 b4          \tmov    %ax,-0x4c(%rbp)\n     d30:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     d37:\t00 00 \n     d39:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     d3d:\t31 c0                \txor    %eax,%eax\n     d3f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # d45 <_nocheck__trace_smmuv3_find_ste+0x35>\n     d45:\t85 c0                \ttest   %eax,%eax\n     d47:\t0f 95 c0             \tsetne  %al\n     d4a:\t0f b6 c0             \tmovzbl %al,%eax\n     d4d:\t48 85 c0             \ttest   %rax,%rax\n     d50:\t74 72                \tje     dc4 <_nocheck__trace_smmuv3_find_ste+0xb4>\n     d52:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # d59 <_nocheck__trace_smmuv3_find_ste+0x49>\n     d59:\t66 85 c0             \ttest   %ax,%ax\n     d5c:\t74 66                \tje     dc4 <_nocheck__trace_smmuv3_find_ste+0xb4>\n     d5e:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n     d63:\te8 e9 f5 ff ff       \tcallq  351 <qemu_loglevel_mask>\n     d68:\t84 c0                \ttest   %al,%al\n     d6a:\t74 58                \tje     dc4 <_nocheck__trace_smmuv3_find_ste+0xb4>\n     d6c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     d70:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     d75:\t48 89 c7             \tmov    %rax,%rdi\n     d78:\te8 00 00 00 00       \tcallq  d7d <_nocheck__trace_smmuv3_find_ste+0x6d>\n     d7d:\t0f b7 5d b4          \tmovzwl -0x4c(%rbp),%ebx\n     d81:\t44 0f b7 65 bc       \tmovzwl -0x44(%rbp),%r12d\n     d86:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     d8a:\t49 89 c6             \tmov    %rax,%r14\n     d8d:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     d91:\t49 89 c5             \tmov    %rax,%r13\n     d94:\te8 00 00 00 00       \tcallq  d99 <_nocheck__trace_smmuv3_find_ste+0x89>\n     d99:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n     d9c:\t48 83 ec 08          \tsub    $0x8,%rsp\n     da0:\t53                   \tpush   %rbx\n     da1:\t41 89 d1             \tmov    %edx,%r9d\n     da4:\t45 89 e0             \tmov    %r12d,%r8d\n     da7:\t4c 89 f1             \tmov    %r14,%rcx\n     daa:\t4c 89 ea             \tmov    %r13,%rdx\n     dad:\t89 c6                \tmov    %eax,%esi\n     daf:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # db6 <_nocheck__trace_smmuv3_find_ste+0xa6>\n     db6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     dbb:\te8 00 00 00 00       \tcallq  dc0 <_nocheck__trace_smmuv3_find_ste+0xb0>\n     dc0:\t48 83 c4 10          \tadd    $0x10,%rsp\n     dc4:\t90                   \tnop\n     dc5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     dc9:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     dd0:\t00 00 \n     dd2:\t74 05                \tje     dd9 <_nocheck__trace_smmuv3_find_ste+0xc9>\n     dd4:\te8 00 00 00 00       \tcallq  dd9 <_nocheck__trace_smmuv3_find_ste+0xc9>\n     dd9:\t48 8d 65 e0          \tlea    -0x20(%rbp),%rsp\n     ddd:\t5b                   \tpop    %rbx\n     dde:\t41 5c                \tpop    %r12\n     de0:\t41 5d                \tpop    %r13\n     de2:\t41 5e                \tpop    %r14\n     de4:\t5d                   \tpop    %rbp\n     de5:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall nocheck__trace_smmuv3_find_ste(\n    unsigned __int16 a1, unsigned int a2, unsigned __int16 a3) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_FIND_STE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v3 = <span class=\"supfact\">tv</span>.tv_usec;\n    v4 = <span class=\"supfact\">tv</span>.tv_sec;\n    v5 = qemu_get_thread_id();\n    qemu_log(String, v5, v4, v3, a1, a2, a3);\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v9</span>;\n}", "code_t": "void __cdecl nocheck__trace_smmuv3_find_ste(uint16_t sid, uint32_t features,\n                                            uint16_t sid_split) {\n  __suseconds_t v3;\n  __time_t v4;\n  unsigned int v5;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v8</span>;\n  <span class=\"supfact\">v8</span> = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_SMMUV3_FIND_STE_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v3 = <span class=\"supfact\">_now</span>.tv_usec;\n    v4 = <span class=\"supfact\">_now</span>.tv_sec;\n    v5 = qemu_get_thread_id();\n    qemu_log(String, v5, v4, v3, sid, features, sid_split);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "Maxul", "repo_name": "sgx_vmx_protocol", "path": "Maxul/sgx_vmx_protocol/a96df6cdeee09fe88076f7d6baef2e61b97161c65b693921b604d83b4da16744", "path_in_repo": "Maxul/sgx_vmx_protocol/Sandbox/qemu-sgx-master/migration/socket.o", "objdump": "00000000000000bd <trace_migration_socket_outgoing_connected>:\n  bd:\t55                   \tpush   %rbp\n  be:\t48 89 e5             \tmov    %rsp,%rbp\n  c1:\t41 54                \tpush   %r12\n  c3:\t53                   \tpush   %rbx\n  c4:\t48 83 ec 30          \tsub    $0x30,%rsp\n  c8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  cc:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  d3:\t00 00 \n  d5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  d9:\t31 c0                \txor    %eax,%eax\n  db:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # e1 <trace_migration_socket_outgoing_connected+0x24>\n  e1:\t85 c0                \ttest   %eax,%eax\n  e3:\t0f 95 c0             \tsetne  %al\n  e6:\t0f b6 c0             \tmovzbl %al,%eax\n  e9:\t48 85 c0             \ttest   %rax,%rax\n  ec:\t74 62                \tje     150 <trace_migration_socket_outgoing_connected+0x93>\n  ee:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # f5 <trace_migration_socket_outgoing_connected+0x38>\n  f5:\t66 85 c0             \ttest   %ax,%ax\n  f8:\t74 56                \tje     150 <trace_migration_socket_outgoing_connected+0x93>\n  fa:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  fe:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 103:\t48 89 c7             \tmov    %rax,%rdi\n 106:\te8 00 00 00 00       \tcallq  10b <trace_migration_socket_outgoing_connected+0x4e>\n 10b:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n 110:\te8 eb fe ff ff       \tcallq  0 <qemu_loglevel_mask>\n 115:\t0f b6 c0             \tmovzbl %al,%eax\n 118:\t48 85 c0             \ttest   %rax,%rax\n 11b:\t74 33                \tje     150 <trace_migration_socket_outgoing_connected+0x93>\n 11d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 121:\t49 89 c4             \tmov    %rax,%r12\n 124:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 128:\t48 89 c3             \tmov    %rax,%rbx\n 12b:\te8 00 00 00 00       \tcallq  130 <trace_migration_socket_outgoing_connected+0x73>\n 130:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 134:\t49 89 d0             \tmov    %rdx,%r8\n 137:\t4c 89 e1             \tmov    %r12,%rcx\n 13a:\t48 89 da             \tmov    %rbx,%rdx\n 13d:\t89 c6                \tmov    %eax,%esi\n 13f:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 146 <trace_migration_socket_outgoing_connected+0x89>\n 146:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 14b:\te8 00 00 00 00       \tcallq  150 <trace_migration_socket_outgoing_connected+0x93>\n 150:\t90                   \tnop\n 151:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 155:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 15c:\t00 00 \n 15e:\t74 05                \tje     165 <trace_migration_socket_outgoing_connected+0xa8>\n 160:\te8 00 00 00 00       \tcallq  165 <trace_migration_socket_outgoing_connected+0xa8>\n 165:\t48 83 c4 30          \tadd    $0x30,%rsp\n 169:\t5b                   \tpop    %rbx\n 16a:\t41 5c                \tpop    %r12\n 16c:\t5d                   \tpop    %rbp\n 16d:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall trace_migration_socket_outgoing_connected(\n    const char *a1) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 <span class=\"supfact\">v6</span>;\n  <span class=\"supfact\">v6</span> = __readfsqword(Number);\n  if (trace_events_enabled_count) {\n    if (TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_DSTATE) {\n      gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n      if (qemu_loglevel_mask(Number)) {\n        v1 = <span class=\"supfact\">tv</span>.tv_usec;\n        v2 = <span class=\"supfact\">tv</span>.tv_sec;\n        v3 = getpid();\n        qemu_log(String, v3, v2, v1, a1);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ <span class=\"supfact\">v6</span>;\n}", "code_t": "void __cdecl trace_migration_socket_outgoing_connected(const char *hostname) {\n  __suseconds_t v1;\n  __time_t v2;\n  unsigned int v3;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span> = __readfsqword(Number);\n  if (trace_events_enabled_count &&\n      TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_DSTATE) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    if (qemu_loglevel_mask(Number)) {\n      v1 = <span class=\"supfact\">_now</span>.tv_usec;\n      v2 = <span class=\"supfact\">_now</span>.tv_sec;\n      v3 = getpid();\n      qemu_log(String, v3, v2, v1, hostname);\n    }\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"code_s": "void __fastcall DSP56K XMemoryDataMove_2\ndisassemble(DSP56K XMemoryDataMove_2 *this, astring *a2) {\n  char <span class=\"supfact\">v2</span>[Number];\n  char <span class=\"supfact\">v3</span>[Number];\n  operator+((astring *)<span class=\"supfact\">v3</span>,\n            (DSP56K XMemoryDataMove_2 *)((char *)this + Number), String);\n  operator+((astring *)<span class=\"supfact\">v2</span>, (const astring *)<span class=\"supfact\">v3</span>,\n            (DSP56K XMemoryDataMove_2 *)((char *)this + Number));\n  astring operator=(a2, (const astring *)<span class=\"supfact\">v2</span>);\n  astring ~astring((astring *)<span class=\"supfact\">v2</span>);\n  astring ~astring((astring *)<span class=\"supfact\">v3</span>);\n}", "code_t": "void __cdecl DSP56K XMemoryDataMove_2\ndisassemble(const DSP56K XMemoryDataMove_2 *const this, astring *retString) {\n  astring <span class=\"supfact\">string</span>;\n  astring <span class=\"supfact\">lhs</span>;\n  operator+(&<span class=\"supfact\">lhs</span>, &this->m_source, String);\n  operator+(&<span class=\"supfact\">string</span>, &<span class=\"supfact\">lhs</span>,\n            &this->m_destination);\n  astring operator=(retString, &<span class=\"supfact\">string</span>);\n  astring ~astring(&<span class=\"supfact\">string</span>);\n  astring ~astring(&<span class=\"supfact\">lhs</span>);\n}", "var": [{"name": "v3", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "lhs", "ref_type": "struct astring { _astring_base baseclass_0; }"}, {"name": "v2", "type": "struct astring { _astring_base baseclass_0; }", "ref_name": "string", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "allklier", "repo_name": "apache-auto-blacklist", "path": "allklier/apache-auto-blacklist/7d54362cfdc4a6f7d34165a912b95cf27d10fd671680f0605f9ccda54343c2e5", "path_in_repo": "allklier/apache-auto-blacklist//modsec_mon", "objdump": "0000000000401f86 <parse_timestamp>:\n  401f86:\t55                   \tpush   %rbp\n  401f87:\t48 89 e5             \tmov    %rsp,%rbp\n  401f8a:\t48 83 ec 60          \tsub    $0x60,%rsp\n  401f8e:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n  401f92:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  401f96:\t4c 8d 40 08          \tlea    0x8(%rax),%r8\n  401f9a:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  401f9e:\t48 8d 78 0c          \tlea    0xc(%rax),%rdi\n  401fa2:\t48 8d 4d b8          \tlea    -0x48(%rbp),%rcx\n  401fa6:\t48 8d 55 bc          \tlea    -0x44(%rbp),%rdx\n  401faa:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  401fae:\t48 83 ec 08          \tsub    $0x8,%rsp\n  401fb2:\t48 8d 75 c0          \tlea    -0x40(%rbp),%rsi\n  401fb6:\t48 83 c6 14          \tadd    $0x14,%rsi\n  401fba:\t56                   \tpush   %rsi\n  401fbb:\t48 8d 75 c0          \tlea    -0x40(%rbp),%rsi\n  401fbf:\t56                   \tpush   %rsi\n  401fc0:\t48 8d 75 c0          \tlea    -0x40(%rbp),%rsi\n  401fc4:\t48 83 c6 04          \tadd    $0x4,%rsi\n  401fc8:\t56                   \tpush   %rsi\n  401fc9:\t4d 89 c1             \tmov    %r8,%r9\n  401fcc:\t49 89 f8             \tmov    %rdi,%r8\n  401fcf:\tbe 38 34 40 00       \tmov    $0x403438,%esi\n  401fd4:\t48 89 c7             \tmov    %rax,%rdi\n  401fd7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401fdc:\te8 8f f1 ff ff       \tcallq  401170 <__isoc99_sscanf@plt>\n  401fe1:\t48 83 c4 20          \tadd    $0x20,%rsp\n  401fe5:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  401fe8:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  401feb:\t2d 6c 07 00 00       \tsub    $0x76c,%eax\n  401ff0:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  401ff3:\tc7 45 d0 00 00 00 00 \tmovl   $0x0,-0x30(%rbp)\n  401ffa:\teb 29                \tjmp    402025 <parse_timestamp+0x9f>\n  401ffc:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  401fff:\t48 98                \tcltq   \n  402001:\t48 8b 14 c5 80 51 40 \tmov    0x405180(,%rax,8),%rdx\n  402008:\t00 \n  402009:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  40200d:\t48 89 d6             \tmov    %rdx,%rsi\n  402010:\t48 89 c7             \tmov    %rax,%rdi\n  402013:\te8 c8 f0 ff ff       \tcallq  4010e0 <strcmp@plt>\n  402018:\t85 c0                \ttest   %eax,%eax\n  40201a:\t74 13                \tje     40202f <parse_timestamp+0xa9>\n  40201c:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  40201f:\t83 c0 01             \tadd    $0x1,%eax\n  402022:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  402025:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  402028:\t83 f8 0b             \tcmp    $0xb,%eax\n  40202b:\t7e cf                \tjle    401ffc <parse_timestamp+0x76>\n  40202d:\teb 01                \tjmp    402030 <parse_timestamp+0xaa>\n  40202f:\t90                   \tnop\n  402030:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  402034:\t48 89 c7             \tmov    %rax,%rdi\n  402037:\te8 64 f1 ff ff       \tcallq  4011a0 <mktime@plt>\n  40203c:\tc9                   \tleaveq \n  40203d:\tc3                   \tretq   ", "code_s": "time_t parse_timestamp() {\n  char <span class=\"supfact\">s1</span>[Number];\n  struct tm <span class=\"supfact\">tp</span>;\n  int <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v3</span> = __isoc99_sscanf();\n  <span class=\"supfact\">tp</span>.tm_year -= Number;\n  for (<span class=\"supfact\">tp</span>.tm_mon = Number;\n       <span class=\"supfact\">tp</span>.tm_mon <= Number &&\n       strcmp(<span class=\"supfact\">s1</span>, (&l_mon_4028)[<span class=\"supfact\">tp</span>.tm_mon]);\n       ++<span class=\"supfact\">tp</span>.tm_mon)\n    ;\n  return mktime(&<span class=\"supfact\">tp</span>);\n}", "code_t": "time_t __cdecl parse_timestamp(const char *timestring) {\n  char <span class=\"supfact\">t_mon</span>[Number];\n  tm <span class=\"supfact\">t</span>;\n  int <span class=\"supfact\">status</span>;\n  <span class=\"supfact\">status</span> = __isoc99_sscanf();\n  <span class=\"supfact\">t</span>.tm_year -= Number;\n  for (<span class=\"supfact\">t</span>.tm_mon = Number;\n       <span class=\"supfact\">t</span>.tm_mon <= Number &&\n       strcmp(<span class=\"supfact\">t_mon</span>, l_mon_4028[<span class=\"supfact\">t</span>.tm_mon]);\n       ++<span class=\"supfact\">t</span>.tm_mon)\n    ;\n  return mktime(&<span class=\"supfact\">t</span>);\n}", "var": [{"name": "tp", "type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }", "ref_name": "t", "ref_type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}], "body_in_train": false}, {"repo_owner": "mannannlegur", "repo_name": "CTU-FIT-Bachelor", "path": "mannannlegur/CTU-FIT-Bachelor/d8edbf383dfe6ba3837f34c3bb39d9c6ff4b609fee00dd96f08ef3cd000f39eb", "path_in_repo": "mannannlegur/CTU-FIT-Bachelor/PA2/ASCII-Plot/ASCII-Plot/obj/CBarChart.o", "objdump": "0000000000002a28 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN9CBarChart7setVarsEvEUlRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_E0_EclINS_17__normal_iteratorIPS8_St6vectorIS8_SaIS8_EEEESI_EEbT_T0_>:\n    2a28:\t55                   \tpush   %rbp\n    2a29:\t48 89 e5             \tmov    %rsp,%rbp\n    2a2c:\t41 54                \tpush   %r12\n    2a2e:\t53                   \tpush   %rbx\n    2a2f:\t48 83 ec 20          \tsub    $0x20,%rsp\n    2a33:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    2a37:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    2a3b:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    2a3f:\t48 8b 5d e8          \tmov    -0x18(%rbp),%rbx\n    2a43:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n    2a47:\t48 89 c7             \tmov    %rax,%rdi\n    2a4a:\te8 00 00 00 00       \tcallq  2a4f <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN9CBarChart7setVarsEvEUlRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_E0_EclINS_17__normal_iteratorIPS8_St6vectorIS8_SaIS8_EEEESI_EEbT_T0_+0x27>\n    2a4f:\t49 89 c4             \tmov    %rax,%r12\n    2a52:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    2a56:\t48 89 c7             \tmov    %rax,%rdi\n    2a59:\te8 00 00 00 00       \tcallq  2a5e <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN9CBarChart7setVarsEvEUlRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_E0_EclINS_17__normal_iteratorIPS8_St6vectorIS8_SaIS8_EEEESI_EEbT_T0_+0x36>\n    2a5e:\t4c 89 e2             \tmov    %r12,%rdx\n    2a61:\t48 89 c6             \tmov    %rax,%rsi\n    2a64:\t48 89 df             \tmov    %rbx,%rdi\n    2a67:\te8 74 dd ff ff       \tcallq  7e0 <_ZZN9CBarChart7setVarsEvENKUlRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_E0_clES6_S6_>\n    2a6c:\t48 83 c4 20          \tadd    $0x20,%rsp\n    2a70:\t5b                   \tpop    %rbx\n    2a71:\t41 5c                \tpop    %r12\n    2a73:\t5d                   \tpop    %rbp\n    2a74:\tc3                   \tretq   ", "code_s": "bool __fastcall __gnu_cxx __ops _Iter_comp_iter<CBarChart setVars(void){\n    lambda(std __cxx11\n               basic_string<char, std char_traits<char>, std allocator<char>> &,\n           std __cxx11 basic_string<char, std char_traits<char>,\n                                    std allocator<char>> &) #Number}>\noperator()<__gnu_cxx __normal_iterator<\n               std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> *,\n               std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>,\n           __gnu_cxx __normal_iterator<\n               std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> *,\n               std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>>(\n    __int64 a1, __int64 a2, __int64 a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  <span class=\"supfact\">v7</span>[Number] = a1;\n  <span class=\"supfact\">v7</span>[Number] = a2;\n  <span class=\"supfact\">v6</span> = a3;\n  v3 = __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n  operator*(&<span class=\"supfact\">v6</span>);\n  v4 = __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n  operator*(<span class=\"supfact\">v7</span>);\n  return CBarChart setVars(void) {\n    lambda(std __cxx11\n               basic_string<char, std char_traits<char>, std allocator<char>> &,\n           std __cxx11 basic_string<char, std char_traits<char>,\n                                    std allocator<char>> &) #Number\n  }\n  operator()(a1, v4, v3);\n}", "code_t": "bool __cdecl __gnu_cxx __ops _Iter_comp_iter<CBarChart setVars(void){\n    lambda(std __cxx11\n               basic_string<char, std char_traits<char>, std allocator<char>> &,\n           std __cxx11 basic_string<char, std char_traits<char>,\n                                    std allocator<char>> &) #Number}>\noperator()<__gnu_cxx __normal_iterator<\n               std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> *,\n               std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>,\n           __gnu_cxx __normal_iterator<\n               std __cxx11 basic_string<char, std char_traits<char>,\n                                        std allocator<char>> *,\n               std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                                   std allocator<char>>>>>(\n    __gnu_cxx __ops _Iter_comp_iter<\n        CBarChart setVars() < lambda(std string &, std string &)> > *const this,\n    __gnu_cxx __normal_iterator<\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>> *,\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>>\n        __it1,\n    __gnu_cxx __normal_iterator<\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>> *,\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>>\n        __it2) {\n  std string *v3;\n  std string *v4;\n  __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      <span class=\"supfact\">__it2a</span>;\n  __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      <span class=\"supfact\">__it1a</span>;\n  __gnu_cxx __ops _Iter_comp_iter<CBarChart setVars() <\n                                  lambda(std string &, std string &)> > *thisa;\n  thisa = this;\n  <span class=\"supfact\">__it1a</span>._M_current = __it1._M_current;\n  <span class=\"supfact\">__it2a</span>._M_current = __it2._M_current;\n  v3 = __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n  operator*(&<span class=\"supfact\">__it2a</span>);\n  v4 = __gnu_cxx __normal_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n  operator*(&<span class=\"supfact\">__it1a</span>);\n  return CBarChart setVars(void) {\n    lambda(std __cxx11\n               basic_string<char, std char_traits<char>, std allocator<char>> &,\n           std __cxx11 basic_string<char, std char_traits<char>,\n                                    std allocator<char>> &) #Number\n  }\n  operator()(&this->_M_comp, v4, v3);\n}", "var": [{"name": "v7", "type": "__int64[4]", "ref_name": "__it1a", "ref_type": "struct __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*,std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}, {"name": "v6", "type": "__int64", "ref_name": "__it2a", "ref_type": "struct __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*,std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}], "body_in_train": false}, {"repo_owner": "vmware", "repo_name": "likewise-open", "path": "vmware/likewise-open/48dab409c9dcf0d375f8f10fc74340f8587a566df7083c9e4d3be0db81ea8243", "path_in_repo": "vmware/likewise-open/openssl/ssl/t1_enc.o", "objdump": "0000000000000000 <tls1_P_hash>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 81 ec 70 02 00 00 \tsub    $0x270,%rsp\n       b:\t48 89 bd b8 fd ff ff \tmov    %rdi,-0x248(%rbp)\n      12:\t48 89 b5 b0 fd ff ff \tmov    %rsi,-0x250(%rbp)\n      19:\t89 95 ac fd ff ff    \tmov    %edx,-0x254(%rbp)\n      1f:\t48 89 8d a0 fd ff ff \tmov    %rcx,-0x260(%rbp)\n      26:\t44 89 85 a8 fd ff ff \tmov    %r8d,-0x258(%rbp)\n      2d:\t4c 89 8d 98 fd ff ff \tmov    %r9,-0x268(%rbp)\n      34:\t48 8b 85 b8 fd ff ff \tmov    -0x248(%rbp),%rax\n      3b:\t48 89 c7             \tmov    %rax,%rdi\n      3e:\te8 00 00 00 00       \tcallq  43 <tls1_P_hash+0x43>\n      43:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n      46:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n      4d:\t48 89 c7             \tmov    %rax,%rdi\n      50:\te8 00 00 00 00       \tcallq  55 <tls1_P_hash+0x55>\n      55:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n      5c:\t48 89 c7             \tmov    %rax,%rdi\n      5f:\te8 00 00 00 00       \tcallq  64 <tls1_P_hash+0x64>\n      64:\t48 8b 8d b8 fd ff ff \tmov    -0x248(%rbp),%rcx\n      6b:\t8b 95 ac fd ff ff    \tmov    -0x254(%rbp),%edx\n      71:\t48 8b b5 b0 fd ff ff \tmov    -0x250(%rbp),%rsi\n      78:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n      7f:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n      85:\t48 89 c7             \tmov    %rax,%rdi\n      88:\te8 00 00 00 00       \tcallq  8d <tls1_P_hash+0x8d>\n      8d:\t48 8b 8d b8 fd ff ff \tmov    -0x248(%rbp),%rcx\n      94:\t8b 95 ac fd ff ff    \tmov    -0x254(%rbp),%edx\n      9a:\t48 8b b5 b0 fd ff ff \tmov    -0x250(%rbp),%rsi\n      a1:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n      a8:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n      ae:\t48 89 c7             \tmov    %rax,%rdi\n      b1:\te8 00 00 00 00       \tcallq  b6 <tls1_P_hash+0xb6>\n      b6:\t8b 85 a8 fd ff ff    \tmov    -0x258(%rbp),%eax\n      bc:\t48 63 d0             \tmovslq %eax,%rdx\n      bf:\t48 8b 8d a0 fd ff ff \tmov    -0x260(%rbp),%rcx\n      c6:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n      cd:\t48 89 ce             \tmov    %rcx,%rsi\n      d0:\t48 89 c7             \tmov    %rax,%rdi\n      d3:\te8 00 00 00 00       \tcallq  d8 <tls1_P_hash+0xd8>\n      d8:\t48 8d 95 cc fd ff ff \tlea    -0x234(%rbp),%rdx\n      df:\t48 8d 8d d0 fd ff ff \tlea    -0x230(%rbp),%rcx\n      e6:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n      ed:\t48 89 ce             \tmov    %rcx,%rsi\n      f0:\t48 89 c7             \tmov    %rax,%rdi\n      f3:\te8 00 00 00 00       \tcallq  f8 <tls1_P_hash+0xf8>\n      f8:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n      ff:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n     106:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     10c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     111:\tba 00 00 00 00       \tmov    $0x0,%edx\n     116:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     11b:\t48 89 c7             \tmov    %rax,%rdi\n     11e:\te8 00 00 00 00       \tcallq  123 <tls1_P_hash+0x123>\n     123:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     12a:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     130:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     135:\tba 00 00 00 00       \tmov    $0x0,%edx\n     13a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     13f:\t48 89 c7             \tmov    %rax,%rdi\n     142:\te8 00 00 00 00       \tcallq  147 <tls1_P_hash+0x147>\n     147:\t8b 85 cc fd ff ff    \tmov    -0x234(%rbp),%eax\n     14d:\t89 c2                \tmov    %eax,%edx\n     14f:\t48 8d 8d d0 fd ff ff \tlea    -0x230(%rbp),%rcx\n     156:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n     15d:\t48 89 ce             \tmov    %rcx,%rsi\n     160:\t48 89 c7             \tmov    %rax,%rdi\n     163:\te8 00 00 00 00       \tcallq  168 <tls1_P_hash+0x168>\n     168:\t8b 85 cc fd ff ff    \tmov    -0x234(%rbp),%eax\n     16e:\t89 c2                \tmov    %eax,%edx\n     170:\t48 8d 8d d0 fd ff ff \tlea    -0x230(%rbp),%rcx\n     177:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     17e:\t48 89 ce             \tmov    %rcx,%rsi\n     181:\t48 89 c7             \tmov    %rax,%rdi\n     184:\te8 00 00 00 00       \tcallq  189 <tls1_P_hash+0x189>\n     189:\t8b 85 a8 fd ff ff    \tmov    -0x258(%rbp),%eax\n     18f:\t48 63 d0             \tmovslq %eax,%rdx\n     192:\t48 8b 8d a0 fd ff ff \tmov    -0x260(%rbp),%rcx\n     199:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n     1a0:\t48 89 ce             \tmov    %rcx,%rsi\n     1a3:\t48 89 c7             \tmov    %rax,%rdi\n     1a6:\te8 00 00 00 00       \tcallq  1ab <tls1_P_hash+0x1ab>\n     1ab:\t8b 45 10             \tmov    0x10(%rbp),%eax\n     1ae:\t3b 45 fc             \tcmp    -0x4(%rbp),%eax\n     1b1:\t7e 5b                \tjle    20e <tls1_P_hash+0x20e>\n     1b3:\t48 8d 55 f4          \tlea    -0xc(%rbp),%rdx\n     1b7:\t48 8b 8d 98 fd ff ff \tmov    -0x268(%rbp),%rcx\n     1be:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n     1c5:\t48 89 ce             \tmov    %rcx,%rsi\n     1c8:\t48 89 c7             \tmov    %rax,%rdi\n     1cb:\te8 00 00 00 00       \tcallq  1d0 <tls1_P_hash+0x1d0>\n     1d0:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     1d3:\t89 c0                \tmov    %eax,%eax\n     1d5:\t48 01 85 98 fd ff ff \tadd    %rax,-0x268(%rbp)\n     1dc:\t8b 55 10             \tmov    0x10(%rbp),%edx\n     1df:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     1e2:\t29 c2                \tsub    %eax,%edx\n     1e4:\t89 d0                \tmov    %edx,%eax\n     1e6:\t89 45 10             \tmov    %eax,0x10(%rbp)\n     1e9:\t48 8d 95 cc fd ff ff \tlea    -0x234(%rbp),%rdx\n     1f0:\t48 8d 8d d0 fd ff ff \tlea    -0x230(%rbp),%rcx\n     1f7:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     1fe:\t48 89 ce             \tmov    %rcx,%rsi\n     201:\t48 89 c7             \tmov    %rax,%rdi\n     204:\te8 00 00 00 00       \tcallq  209 <tls1_P_hash+0x209>\n     209:\te9 f1 fe ff ff       \tjmpq   ff <tls1_P_hash+0xff>\n     20e:\t48 8d 95 cc fd ff ff \tlea    -0x234(%rbp),%rdx\n     215:\t48 8d 8d d0 fd ff ff \tlea    -0x230(%rbp),%rcx\n     21c:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n     223:\t48 89 ce             \tmov    %rcx,%rsi\n     226:\t48 89 c7             \tmov    %rax,%rdi\n     229:\te8 00 00 00 00       \tcallq  22e <tls1_P_hash+0x22e>\n     22e:\t8b 45 10             \tmov    0x10(%rbp),%eax\n     231:\t48 63 d0             \tmovslq %eax,%rdx\n     234:\t48 8d 8d d0 fd ff ff \tlea    -0x230(%rbp),%rcx\n     23b:\t48 8b 85 98 fd ff ff \tmov    -0x268(%rbp),%rax\n     242:\t48 89 ce             \tmov    %rcx,%rsi\n     245:\t48 89 c7             \tmov    %rax,%rdi\n     248:\te8 00 00 00 00       \tcallq  24d <tls1_P_hash+0x24d>\n     24d:\t90                   \tnop\n     24e:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n     255:\t48 89 c7             \tmov    %rax,%rdi\n     258:\te8 00 00 00 00       \tcallq  25d <tls1_P_hash+0x25d>\n     25d:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     264:\t48 89 c7             \tmov    %rax,%rdi\n     267:\te8 00 00 00 00       \tcallq  26c <tls1_P_hash+0x26c>\n     26c:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n     273:\tbe 40 00 00 00       \tmov    $0x40,%esi\n     278:\t48 89 c7             \tmov    %rax,%rdi\n     27b:\te8 00 00 00 00       \tcallq  280 <tls1_P_hash+0x280>\n     280:\t90                   \tnop\n     281:\tc9                   \tleaveq \n     282:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tls1_P_hash(__int64 a1, __int64 a2, unsigned int a3,\n                               __int64 a4, int a5, char *a6,\n                               int <span class=\"supfact\">a7</span>) {\n  unsigned int <span class=\"supfact\">v12</span>;\n  char <span class=\"supfact\">src</span>[Number];\n  char <span class=\"supfact\">v14</span>[Number];\n  char <span class=\"supfact\">v15</span>[Number];\n  int <span class=\"supfact\">v16</span>[Number];\n  int <span class=\"supfact\">v17</span>;\n  <span class=\"supfact\">v17</span> = EVP_MD_size(a1);\n  HMAC_CTX_init(<span class=\"supfact\">v15</span>);\n  HMAC_CTX_init(<span class=\"supfact\">v14</span>);\n  HMAC_Init_ex(<span class=\"supfact\">v15</span>, a2, a3, a1, Number L);\n  HMAC_Init_ex(<span class=\"supfact\">v14</span>, a2, a3, a1, Number L);\n  HMAC_Update(<span class=\"supfact\">v15</span>, a4, a5);\n  HMAC_Final(<span class=\"supfact\">v15</span>, <span class=\"supfact\">src</span>, &<span class=\"supfact\">v12</span>);\n  <span class=\"supfact\">v16</span>[Number] = Number;\n  while (Number) {\n    HMAC_Init_ex(<span class=\"supfact\">v15</span>, Number L, Number L, Number L, Number L);\n    HMAC_Init_ex(<span class=\"supfact\">v14</span>, Number L, Number L, Number L, Number L);\n    HMAC_Update(<span class=\"supfact\">v15</span>, <span class=\"supfact\">src</span>, <span class=\"supfact\">v12</span>);\n    HMAC_Update(<span class=\"supfact\">v14</span>, <span class=\"supfact\">src</span>, <span class=\"supfact\">v12</span>);\n    HMAC_Update(<span class=\"supfact\">v15</span>, a4, a5);\n    if (<span class=\"supfact\">a7</span> <= <span class=\"supfact\">v17</span>)\n      break;\n    HMAC_Final(<span class=\"supfact\">v15</span>, a6, <span class=\"supfact\">v16</span>);\n    a6 += (unsigned int)<span class=\"supfact\">v16</span>[Number];\n    <span class=\"supfact\">a7</span> -= <span class=\"supfact\">v16</span>[Number];\n    HMAC_Final(<span class=\"supfact\">v14</span>, <span class=\"supfact\">src</span>, &<span class=\"supfact\">v12</span>);\n  }\n  HMAC_Final(<span class=\"supfact\">v15</span>, <span class=\"supfact\">src</span>, &<span class=\"supfact\">v12</span>);\n  memcpy(a6, <span class=\"supfact\">src</span>, <span class=\"supfact\">a7</span>);\n  HMAC_CTX_cleanup(<span class=\"supfact\">v15</span>);\n  HMAC_CTX_cleanup(<span class=\"supfact\">v14</span>);\n  return OPENSSL_cleanse(<span class=\"supfact\">src</span>, Number L);\n}", "code_t": "void __cdecl tls1_P_hash(const EVP_MD *md, const unsigned __int8 *sec,\n                         int sec_len, unsigned __int8 *seed, int seed_len,\n                         unsigned __int8 *out, int olen) {\n  unsigned int <span class=\"supfact\">A1_len</span>;\n  unsigned __int8 <span class=\"supfact\">A1</span>[Number];\n  HMAC_CTX <span class=\"supfact\">ctx_tmp</span>;\n  HMAC_CTX <span class=\"supfact\">ctx</span>;\n  unsigned int <span class=\"supfact\">j</span>;\n  int n;\n  int <span class=\"supfact\">chunk</span>;\n  <span class=\"supfact\">chunk</span> = EVP_MD_size(md);\n  HMAC_CTX_init(&<span class=\"supfact\">ctx</span>);\n  HMAC_CTX_init(&<span class=\"supfact\">ctx_tmp</span>);\n  HMAC_Init_ex(&<span class=\"supfact\">ctx</span>, sec, (unsigned int)sec_len, md, Number L);\n  HMAC_Init_ex(&<span class=\"supfact\">ctx_tmp</span>, sec, (unsigned int)sec_len, md,\n               Number L);\n  HMAC_Update(&<span class=\"supfact\">ctx</span>, seed, seed_len);\n  HMAC_Final(&<span class=\"supfact\">ctx</span>, <span class=\"supfact\">A1</span>, &<span class=\"supfact\">A1_len</span>);\n  n = Number;\n  while (Number) {\n    HMAC_Init_ex(&<span class=\"supfact\">ctx</span>, Number L, Number L, Number L, Number L);\n    HMAC_Init_ex(&<span class=\"supfact\">ctx_tmp</span>, Number L, Number L, Number L,\n                 Number L);\n    HMAC_Update(&<span class=\"supfact\">ctx</span>, <span class=\"supfact\">A1</span>,\n                <span class=\"supfact\">A1_len</span>);\n    HMAC_Update(&<span class=\"supfact\">ctx_tmp</span>, <span class=\"supfact\">A1</span>,\n                <span class=\"supfact\">A1_len</span>);\n    HMAC_Update(&<span class=\"supfact\">ctx</span>, seed, seed_len);\n    if (olen <= <span class=\"supfact\">chunk</span>)\n      break;\n    HMAC_Final(&<span class=\"supfact\">ctx</span>, out, &<span class=\"supfact\">j</span>);\n    out += <span class=\"supfact\">j</span>;\n    olen -= <span class=\"supfact\">j</span>;\n    HMAC_Final(&<span class=\"supfact\">ctx_tmp</span>, <span class=\"supfact\">A1</span>,\n               &<span class=\"supfact\">A1_len</span>);\n  }\n  HMAC_Final(&<span class=\"supfact\">ctx</span>, <span class=\"supfact\">A1</span>, &<span class=\"supfact\">A1_len</span>);\n  memcpy(out, <span class=\"supfact\">A1</span>, olen);\n  HMAC_CTX_cleanup(&<span class=\"supfact\">ctx</span>);\n  HMAC_CTX_cleanup(&<span class=\"supfact\">ctx_tmp</span>);\n  OPENSSL_cleanse(<span class=\"supfact\">A1</span>, Number L);\n}", "var": [{"name": "v15", "type": "struct HMAC_CTX { const EVP_MD * md; EVP_MD_CTX md_ctx; EVP_MD_CTX i_ctx; EVP_MD_CTX o_ctx; unsigned int key_length; unsigned __int8[128] key; PADDING (4); }", "ref_name": "ctx", "ref_type": "struct HMAC_CTX { const EVP_MD * md; EVP_MD_CTX md_ctx; EVP_MD_CTX i_ctx; EVP_MD_CTX o_ctx; unsigned int key_length; unsigned __int8[128] key; PADDING (4); }"}, {"name": "v14", "type": "struct HMAC_CTX { const EVP_MD * md; EVP_MD_CTX md_ctx; EVP_MD_CTX i_ctx; EVP_MD_CTX o_ctx; unsigned int key_length; unsigned __int8[128] key; PADDING (4); }", "ref_name": "ctx_tmp", "ref_type": "struct HMAC_CTX { const EVP_MD * md; EVP_MD_CTX md_ctx; EVP_MD_CTX i_ctx; EVP_MD_CTX o_ctx; unsigned int key_length; unsigned __int8[128] key; PADDING (4); }"}], "body_in_train": false}]