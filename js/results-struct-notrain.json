[{"repo_owner": "hthetiot", "repo_name": "node-snowball", "path": "hthetiot/node-snowball/a11b83418afd09aca74722273e9a30cdcb5ba8183248cd6693f6d5a1af03438e", "path_in_repo": "hthetiot/node-snowball/src/libstemmer/src_c/stem_ISO_8859_1_italian.o", "objdump": "00000000000018f0 <italian_ISO_8859_1_stem>:\n    18f0:\t55                   \tpush   %rbp\n    18f1:\t48 89 e5             \tmov    %rsp,%rbp\n    18f4:\t48 83 ec 50          \tsub    $0x50,%rsp\n    18f8:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    18fc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1900:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1903:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    1906:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    190a:\t48 89 c7             \tmov    %rax,%rdi\n    190d:\te8 ee e6 ff ff       \tcallq  0 <r_prelude>\n    1912:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    1915:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n    1919:\t74 0e                \tje     1929 <italian_ISO_8859_1_stem+0x39>\n    191b:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n    191f:\t79 0b                \tjns    192c <italian_ISO_8859_1_stem+0x3c>\n    1921:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    1924:\te9 e9 01 00 00       \tjmpq   1b12 <italian_ISO_8859_1_stem+0x222>\n    1929:\t90                   \tnop\n    192a:\teb 01                \tjmp    192d <italian_ISO_8859_1_stem+0x3d>\n    192c:\t90                   \tnop\n    192d:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1931:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    1934:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1937:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    193b:\t8b 40 08             \tmov    0x8(%rax),%eax\n    193e:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    1941:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1945:\t48 89 c7             \tmov    %rax,%rdi\n    1948:\te8 7f ea ff ff       \tcallq  3cc <r_mark_regions>\n    194d:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n    1950:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n    1954:\t74 0e                \tje     1964 <italian_ISO_8859_1_stem+0x74>\n    1956:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n    195a:\t79 0b                \tjns    1967 <italian_ISO_8859_1_stem+0x77>\n    195c:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n    195f:\te9 ae 01 00 00       \tjmpq   1b12 <italian_ISO_8859_1_stem+0x222>\n    1964:\t90                   \tnop\n    1965:\teb 01                \tjmp    1968 <italian_ISO_8859_1_stem+0x78>\n    1967:\t90                   \tnop\n    1968:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    196c:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n    196f:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1972:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1976:\t8b 50 08             \tmov    0x8(%rax),%edx\n    1979:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    197d:\t89 50 10             \tmov    %edx,0x10(%rax)\n    1980:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1984:\t8b 50 0c             \tmov    0xc(%rax),%edx\n    1987:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    198b:\t89 50 08             \tmov    %edx,0x8(%rax)\n    198e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1992:\t8b 50 0c             \tmov    0xc(%rax),%edx\n    1995:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1999:\t8b 40 08             \tmov    0x8(%rax),%eax\n    199c:\t29 c2                \tsub    %eax,%edx\n    199e:\t89 d0                \tmov    %edx,%eax\n    19a0:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    19a3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    19a7:\t48 89 c7             \tmov    %rax,%rdi\n    19aa:\te8 e6 ef ff ff       \tcallq  995 <r_attached_pronoun>\n    19af:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    19b2:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n    19b6:\t74 0e                \tje     19c6 <italian_ISO_8859_1_stem+0xd6>\n    19b8:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n    19bc:\t79 0b                \tjns    19c9 <italian_ISO_8859_1_stem+0xd9>\n    19be:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    19c1:\te9 4c 01 00 00       \tjmpq   1b12 <italian_ISO_8859_1_stem+0x222>\n    19c6:\t90                   \tnop\n    19c7:\teb 01                \tjmp    19ca <italian_ISO_8859_1_stem+0xda>\n    19c9:\t90                   \tnop\n    19ca:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    19ce:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    19d1:\t2b 45 ec             \tsub    -0x14(%rbp),%eax\n    19d4:\t89 c2                \tmov    %eax,%edx\n    19d6:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    19da:\t89 50 08             \tmov    %edx,0x8(%rax)\n    19dd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    19e1:\t8b 50 0c             \tmov    0xc(%rax),%edx\n    19e4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    19e8:\t8b 40 08             \tmov    0x8(%rax),%eax\n    19eb:\t29 c2                \tsub    %eax,%edx\n    19ed:\t89 d0                \tmov    %edx,%eax\n    19ef:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    19f2:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    19f6:\t8b 50 0c             \tmov    0xc(%rax),%edx\n    19f9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    19fd:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1a00:\t29 c2                \tsub    %eax,%edx\n    1a02:\t89 d0                \tmov    %edx,%eax\n    1a04:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    1a07:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a0b:\t48 89 c7             \tmov    %rax,%rdi\n    1a0e:\te8 48 f1 ff ff       \tcallq  b5b <r_standard_suffix>\n    1a13:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n    1a16:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    1a1a:\t74 0e                \tje     1a2a <italian_ISO_8859_1_stem+0x13a>\n    1a1c:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    1a20:\t79 3f                \tjns    1a61 <italian_ISO_8859_1_stem+0x171>\n    1a22:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    1a25:\te9 e8 00 00 00       \tjmpq   1b12 <italian_ISO_8859_1_stem+0x222>\n    1a2a:\t90                   \tnop\n    1a2b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a2f:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    1a32:\t2b 45 e0             \tsub    -0x20(%rbp),%eax\n    1a35:\t89 c2                \tmov    %eax,%edx\n    1a37:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a3b:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1a3e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a42:\t48 89 c7             \tmov    %rax,%rdi\n    1a45:\te8 de fa ff ff       \tcallq  1528 <r_verb_suffix>\n    1a4a:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    1a4d:\t83 7d d8 00          \tcmpl   $0x0,-0x28(%rbp)\n    1a51:\t74 11                \tje     1a64 <italian_ISO_8859_1_stem+0x174>\n    1a53:\t83 7d d8 00          \tcmpl   $0x0,-0x28(%rbp)\n    1a57:\t79 0e                \tjns    1a67 <italian_ISO_8859_1_stem+0x177>\n    1a59:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n    1a5c:\te9 b1 00 00 00       \tjmpq   1b12 <italian_ISO_8859_1_stem+0x222>\n    1a61:\t90                   \tnop\n    1a62:\teb 04                \tjmp    1a68 <italian_ISO_8859_1_stem+0x178>\n    1a64:\t90                   \tnop\n    1a65:\teb 01                \tjmp    1a68 <italian_ISO_8859_1_stem+0x178>\n    1a67:\t90                   \tnop\n    1a68:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a6c:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    1a6f:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n    1a72:\t89 c2                \tmov    %eax,%edx\n    1a74:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a78:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1a7b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a7f:\t8b 50 0c             \tmov    0xc(%rax),%edx\n    1a82:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a86:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1a89:\t29 c2                \tsub    %eax,%edx\n    1a8b:\t89 d0                \tmov    %edx,%eax\n    1a8d:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n    1a90:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1a94:\t48 89 c7             \tmov    %rax,%rdi\n    1a97:\te8 9f fb ff ff       \tcallq  163b <r_vowel_suffix>\n    1a9c:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n    1a9f:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n    1aa3:\t74 0b                \tje     1ab0 <italian_ISO_8859_1_stem+0x1c0>\n    1aa5:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n    1aa9:\t79 08                \tjns    1ab3 <italian_ISO_8859_1_stem+0x1c3>\n    1aab:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n    1aae:\teb 62                \tjmp    1b12 <italian_ISO_8859_1_stem+0x222>\n    1ab0:\t90                   \tnop\n    1ab1:\teb 01                \tjmp    1ab4 <italian_ISO_8859_1_stem+0x1c4>\n    1ab3:\t90                   \tnop\n    1ab4:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1ab8:\t8b 40 0c             \tmov    0xc(%rax),%eax\n    1abb:\t2b 45 d4             \tsub    -0x2c(%rbp),%eax\n    1abe:\t89 c2                \tmov    %eax,%edx\n    1ac0:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1ac4:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1ac7:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1acb:\t8b 50 10             \tmov    0x10(%rax),%edx\n    1ace:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1ad2:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1ad5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1ad9:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1adc:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    1adf:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1ae3:\t48 89 c7             \tmov    %rax,%rdi\n    1ae6:\te8 bb ec ff ff       \tcallq  7a6 <r_postlude>\n    1aeb:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n    1aee:\t83 7d c8 00          \tcmpl   $0x0,-0x38(%rbp)\n    1af2:\t74 0b                \tje     1aff <italian_ISO_8859_1_stem+0x20f>\n    1af4:\t83 7d c8 00          \tcmpl   $0x0,-0x38(%rbp)\n    1af8:\t79 08                \tjns    1b02 <italian_ISO_8859_1_stem+0x212>\n    1afa:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    1afd:\teb 13                \tjmp    1b12 <italian_ISO_8859_1_stem+0x222>\n    1aff:\t90                   \tnop\n    1b00:\teb 01                \tjmp    1b03 <italian_ISO_8859_1_stem+0x213>\n    1b02:\t90                   \tnop\n    1b03:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1b07:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    1b0a:\t89 50 08             \tmov    %edx,0x8(%rax)\n    1b0d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1b12:\tc9                   \tleaveq \n    1b13:\tc3                   \tretq   ", "code_s": "__int64 __fastcall italian_ISO_8859_1_stem(_DWORD *a1) {\n  int v2;\n  int v3;\n  int v4;\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  int v10;\n  int v11;\n  int v12;\n  int v13;\n  int v14;\n  v14 = a1[Number];\n  v13 = r_prelude((__int64)a1);\n  if (v13 && v13 < Number)\n    return (unsigned int)v13;\n  a1[Number] = v14;\n  v12 = a1[Number];\n  v11 = r_mark_regions((__int64)a1);\n  if (v11 && v11 < Number)\n    return (unsigned int)v11;\n  a1[Number] = v12;\n  a1[Number] = a1[Number];\n  a1[Number] = a1[Number];\n  v10 = a1[Number] - a1[Number];\n  v9 = r_attached_pronoun((__int64)a1);\n  if (v9 && v9 < Number)\n    return (unsigned int)v9;\n  a1[Number] = a1[Number] - v10;\n  v8 = a1[Number] - a1[Number];\n  v7 = r_standard_suffix((__int64)a1);\n  if (v7) {\n    if (v7 < Number)\n      return (unsigned int)v7;\n  } else {\n    a1[Number] = a1[Number] - v8;\n    v6 = r_verb_suffix((__int64)a1);\n    if (v6 && v6 < Number)\n      return (unsigned int)v6;\n  }\n  a1[Number] = a1[Number] - v8;\n  v5 = a1[Number] - a1[Number];\n  v4 = r_vowel_suffix((__int64)a1);\n  if (v4 && v4 < Number)\n    return (unsigned int)v4;\n  a1[Number] = a1[Number] - v5;\n  a1[Number] = a1[Number];\n  v3 = a1[Number];\n  v2 = r_postlude((__int64)a1);\n  if (v2 && v2 < Number)\n    return (unsigned int)v2;\n  a1[Number] = v3;\n  return Number L;\n}", "code_t": "int __cdecl italian_ISO_8859_1_stem(SN_env *z) {\n  int ret_5;\n  int c7;\n  int ret_4;\n  int m6;\n  int ret_3;\n  int ret_2;\n  int m4;\n  int ret_1;\n  int m3;\n  int ret_0;\n  int c2;\n  int ret;\n  int c1;\n  c1 = z->c;\n  ret = r_prelude(z);\n  if (ret && ret < Number)\n    return ret;\n  z->c = c1;\n  c2 = z->c;\n  ret_0 = r_mark_regions(z);\n  if (ret_0 && ret_0 < Number)\n    return ret_0;\n  z->c = c2;\n  z->lb = z->c;\n  z->c = z->l;\n  m3 = z->l - z->c;\n  ret_1 = r_attached_pronoun(z);\n  if (ret_1 && ret_1 < Number)\n    return ret_1;\n  z->c = z->l - m3;\n  m4 = z->l - z->c;\n  ret_2 = r_standard_suffix(z);\n  if (ret_2) {\n    if (ret_2 < Number)\n      return ret_2;\n  } else {\n    z->c = z->l - m4;\n    ret_3 = r_verb_suffix(z);\n    if (ret_3 && ret_3 < Number)\n      return ret_3;\n  }\n  z->c = z->l - m4;\n  m6 = z->l - z->c;\n  ret_4 = r_vowel_suffix(z);\n  if (ret_4 && ret_4 < Number)\n    return ret_4;\n  z->c = z->l - m6;\n  z->c = z->lb;\n  c7 = z->c;\n  ret_5 = r_postlude(z);\n  if (ret_5 && ret_5 < Number)\n    return ret_5;\n  z->c = c7;\n  return Number;\n}", "var": [], "body_in_train": false}, {"repo_owner": "yu-chen-surf", "repo_name": "shepherd", "path": "yu-chen-surf/shepherd/1463b4fb8527926a5e9416fa1e9f70d6b29e8dcd974c2fabb4ec854dd892800e", "path_in_repo": "yu-chen-surf/shepherd/tools/perf/util/intel-pt-decoder/intel-pt-insn-decoder.o", "objdump": "0000000000000109 <inat_last_prefix_id>:\n     109:\t55                   \tpush   %rbp\n     10a:\t48 89 e5             \tmov    %rsp,%rbp\n     10d:\t48 83 ec 20          \tsub    $0x20,%rsp\n     111:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n     114:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     11b:\t00 00 \n     11d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     121:\t31 c0                \txor    %eax,%eax\n     123:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     126:\t83 e0 0c             \tand    $0xc,%eax\n     129:\t85 c0                \ttest   %eax,%eax\n     12b:\t74 07                \tje     134 <inat_last_prefix_id+0x2b>\n     12d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     132:\teb 06                \tjmp    13a <inat_last_prefix_id+0x31>\n     134:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n     137:\t83 e0 0f             \tand    $0xf,%eax\n     13a:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     13e:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n     145:\t00 00 \n     147:\t74 05                \tje     14e <inat_last_prefix_id+0x45>\n     149:\te8 00 00 00 00       \tcallq  14e <inat_last_prefix_id+0x45>\n     14e:\tc9                   \tleaveq \n     14f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall inat_last_prefix_id(char a1) {\n  __int64 result;\n  if ((a1 & Number) != Number)\n    result = Number L;\n  else\n    result = a1 & Number;\n  return result;\n}", "code_t": "int __cdecl inat_last_prefix_id(insn_attr_t attr) {\n  int result;\n  if ((attr & Number) != Number)\n    result = Number;\n  else\n    result = attr & Number;\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "sdoddam1", "repo_name": "qemu-2.5.0", "path": "sdoddam1/qemu-2.5.0/7a13783f1427a445210642c2f59745d384e26df01a27c28d491d497ccab6b6cc", "path_in_repo": "sdoddam1/qemu-2.5.0//hw/9pfs/coxattr.o", "objdump": "0000000000000076 <v9fs_co_llistxattr>:\n  76:\t55                   \tpush   %rbp\n  77:\t48 89 e5             \tmov    %rsp,%rbp\n  7a:\t48 83 ec 40          \tsub    $0x40,%rsp\n  7e:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  82:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  86:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  8a:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  8e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  92:\t48 8b 80 28 c0 00 00 \tmov    0xc028(%rax),%rax\n  99:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  9d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  a1:\t48 89 c7             \tmov    %rax,%rdi\n  a4:\te8 bb ff ff ff       \tcallq  64 <v9fs_request_cancelled>\n  a9:\t84 c0                \ttest   %al,%al\n  ab:\t74 0a                \tje     b7 <v9fs_co_llistxattr+0x41>\n  ad:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n  b2:\te9 9c 00 00 00       \tjmpq   153 <v9fs_co_llistxattr+0xdd>\n  b7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  bb:\t48 89 c7             \tmov    %rax,%rdi\n  be:\te8 3d ff ff ff       \tcallq  0 <v9fs_path_read_lock>\n  c3:\te8 00 00 00 00       \tcallq  c8 <v9fs_co_llistxattr+0x52>\n  c8:\t48 89 c6             \tmov    %rax,%rsi\n  cb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d2 <v9fs_co_llistxattr+0x5c>\n  d2:\t48 89 c7             \tmov    %rax,%rdi\n  d5:\te8 00 00 00 00       \tcallq  da <v9fs_co_llistxattr+0x64>\n  da:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  de:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  e2:\t48 89 c7             \tmov    %rax,%rdi\n  e5:\te8 00 00 00 00       \tcallq  ea <v9fs_co_llistxattr+0x74>\n  ea:\te8 00 00 00 00       \tcallq  ef <v9fs_co_llistxattr+0x79>\n  ef:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  f3:\t48 89 c7             \tmov    %rax,%rdi\n  f6:\te8 00 00 00 00       \tcallq  fb <v9fs_co_llistxattr+0x85>\n  fb:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  ff:\t48 8b 80 00 21 60 00 \tmov    0x602100(%rax),%rax\n 106:\t4c 8b 80 f0 00 00 00 \tmov    0xf0(%rax),%r8\n 10d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 111:\t48 8d b8 08 21 60 00 \tlea    0x602108(%rax),%rdi\n 118:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n 11c:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n 120:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 124:\t48 89 c6             \tmov    %rax,%rsi\n 127:\t41 ff d0             \tcallq  *%r8\n 12a:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 12d:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n 131:\t79 0c                \tjns    13f <v9fs_co_llistxattr+0xc9>\n 133:\te8 00 00 00 00       \tcallq  138 <v9fs_co_llistxattr+0xc2>\n 138:\t8b 00                \tmov    (%rax),%eax\n 13a:\tf7 d8                \tneg    %eax\n 13c:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 13f:\te8 00 00 00 00       \tcallq  144 <v9fs_co_llistxattr+0xce>\n 144:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 148:\t48 89 c7             \tmov    %rax,%rdi\n 14b:\te8 e2 fe ff ff       \tcallq  32 <v9fs_path_unlock>\n 150:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 153:\tc9                   \tleaveq \n 154:\tc3                   \tretq   ", "code_s": "__int64 __fastcall v9fs_co_llistxattr(__int64 a1, __int64 a2, __int64 a3,\n                                      __int64 a4) {\n  __int64 v5;\n  int v8;\n  __int64 v9;\n  __int64 v10;\n  v9 = *(_QWORD *)(a1 + Number);\n  if ((unsigned __int8)v9fs_request_cancelled(a1))\n    return Number L;\n  v9fs_path_read_lock(v9);\n  v5 = qemu_coroutine_self();\n  v10 = qemu_bh_new(&co_run_in_worker_bh, v5);\n  qemu_bh_schedule(v10);\n  qemu_coroutine_yield();\n  qemu_bh_delete(v10);\n  v8 = (*(__int64(__fastcall **)(__int64, __int64, __int64, __int64))(\n      *(_QWORD *)(v9 + Number) + Number L))(v9 + Number, a2, a3, a4);\n  if (v8 < Number)\n    v8 = -*_errno_location();\n  qemu_coroutine_yield();\n  v9fs_path_unlock(v9);\n  return (unsigned int)v8;\n}", "code_t": "int __cdecl v9fs_co_llistxattr(V9fsPDU_0 *pdu, V9fsPath_0 *path, void *value,\n                               size_t size) {\n  __int64 v5;\n  int err;\n  V9fsState *s;\n  QEMUBH_0 *co_bh;\n  s = pdu->s;\n  if (v9fs_request_cancelled(pdu))\n    return Number;\n  v9fs_path_read_lock(s);\n  v5 = qemu_coroutine_self();\n  co_bh = (QEMUBH_0 *)qemu_bh_new(&co_run_in_worker_bh, v5);\n  qemu_bh_schedule(co_bh);\n  qemu_coroutine_yield();\n  qemu_bh_delete(co_bh);\n  err = s->ops->llistxattr(&s->ctx, path, value, size);\n  if (err < Number)\n    err = -*_errno_location();\n  qemu_coroutine_yield();\n  v9fs_path_unlock(s);\n  return err;\n}", "var": [], "body_in_train": false}, {"repo_owner": "yosh1k104", "repo_name": "D-Switch", "path": "yosh1k104/D-Switch/577cea50f0925c4e4a2d54117689e2360ee85621ecbc158d94ce9b884c56562e", "path_in_repo": "yosh1k104/D-Switch/contiki-2.6/examples/webserver-ipv6/obj_native/uip-ds6.o", "objdump": "0000000000000aea <uip_ds6_prefix_add>:\n     aea:\t55                   \tpush   %rbp\n     aeb:\t48 89 e5             \tmov    %rsp,%rbp\n     aee:\t48 83 ec 30          \tsub    $0x30,%rsp\n     af2:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     af6:\t89 c8                \tmov    %ecx,%eax\n     af8:\t4c 89 45 e0          \tmov    %r8,-0x20(%rbp)\n     afc:\t4c 89 4d d8          \tmov    %r9,-0x28(%rbp)\n     b00:\t89 f1                \tmov    %esi,%ecx\n     b02:\t88 4d f4             \tmov    %cl,-0xc(%rbp)\n     b05:\t88 55 f0             \tmov    %dl,-0x10(%rbp)\n     b08:\t88 45 ec             \tmov    %al,-0x14(%rbp)\n     b0b:\t0f b6 55 f4          \tmovzbl -0xc(%rbp),%edx\n     b0f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     b13:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n     b19:\t41 89 d0             \tmov    %edx,%r8d\n     b1c:\t48 89 c1             \tmov    %rax,%rcx\n     b1f:\tba 20 00 00 00       \tmov    $0x20,%edx\n     b24:\tbe 03 00 00 00       \tmov    $0x3,%esi\n     b29:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     b2e:\te8 00 00 00 00       \tcallq  b33 <uip_ds6_prefix_add+0x49>\n     b33:\t3c 01                \tcmp    $0x1,%al\n     b35:\t75 73                \tjne    baa <uip_ds6_prefix_add+0xc0>\n     b37:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b3e <uip_ds6_prefix_add+0x54>\n     b3e:\tc6 00 01             \tmovb   $0x1,(%rax)\n     b41:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # b48 <uip_ds6_prefix_add+0x5e>\n     b48:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     b4c:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n     b50:\t48 8b 00             \tmov    (%rax),%rax\n     b53:\t48 89 41 02          \tmov    %rax,0x2(%rcx)\n     b57:\t48 89 51 0a          \tmov    %rdx,0xa(%rcx)\n     b5b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b62 <uip_ds6_prefix_add+0x78>\n     b62:\t0f b6 55 f4          \tmovzbl -0xc(%rbp),%edx\n     b66:\t88 50 12             \tmov    %dl,0x12(%rax)\n     b69:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b70 <uip_ds6_prefix_add+0x86>\n     b70:\t0f b6 55 f0          \tmovzbl -0x10(%rbp),%edx\n     b74:\t88 50 13             \tmov    %dl,0x13(%rax)\n     b77:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b7e <uip_ds6_prefix_add+0x94>\n     b7e:\t0f b6 55 ec          \tmovzbl -0x14(%rbp),%edx\n     b82:\t88 50 1c             \tmov    %dl,0x1c(%rax)\n     b85:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b8c <uip_ds6_prefix_add+0xa2>\n     b8c:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     b90:\t89 50 14             \tmov    %edx,0x14(%rax)\n     b93:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b9a <uip_ds6_prefix_add+0xb0>\n     b9a:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     b9e:\t89 50 18             \tmov    %edx,0x18(%rax)\n     ba1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ba8 <uip_ds6_prefix_add+0xbe>\n     ba8:\teb 05                \tjmp    baf <uip_ds6_prefix_add+0xc5>\n     baa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     baf:\tc9                   \tleaveq \n     bb0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall uip_ds6_prefix_add(_QWORD *a1, unsigned __int8 a2, char a3,\n                                      char a4, int a5, int a6) {\n  __int64 v6;\n  __int64 v7;\n  if ((unsigned __int8)uip_ds6_list_loop(uip_ds6_prefix_list, Number, Number,\n                                         a1, a2, &locprefix) != Number)\n    return Number L;\n  *(_BYTE *)locprefix = Number;\n  v6 = locprefix;\n  v7 = a1[Number];\n  *(_QWORD *)(locprefix + Number) = *a1;\n  *(_QWORD *)(v6 + Number) = v7;\n  *(_BYTE *)(locprefix + Number) = a2;\n  *(_BYTE *)(locprefix + Number) = a3;\n  *(_BYTE *)(locprefix + Number) = a4;\n  *(_DWORD *)(locprefix + Number) = a5;\n  *(_DWORD *)(locprefix + Number) = a6;\n  return locprefix;\n}", "code_t": "uip_ds6_prefix_t *__cdecl uip_ds6_prefix_add(uip_ipaddr_t *ipaddr,\n                                             uint8_t ipaddrlen,\n                                             uint8_t advertise, uint8_t flags,\n                                             unsigned __int64 vtime,\n                                             unsigned __int64 ptime) {\n  uip_ds6_prefix_t *v6;\n  __int64 v7;\n  uint32_t ptimea;\n  uint32_t vtimea;\n  vtimea = vtime;\n  ptimea = ptime;\n  if (uip_ds6_list_loop(&uip_ds6_prefix_list, Number, Number, ipaddr, ipaddrlen,\n                        (uip_ds6_element_t **)&locprefix) != Number)\n    return Number L;\n  locprefix->isused = Number;\n  v6 = locprefix;\n  v7 = *(_QWORD *)&ipaddr->u16[Number];\n  *(_QWORD *)locprefix->ipaddr.u8 = *(_QWORD *)ipaddr->u8;\n  *(_QWORD *)&v6->ipaddr.u16[Number] = v7;\n  locprefix->length = ipaddrlen;\n  locprefix->advertise = advertise;\n  locprefix->l_a_reserved = flags;\n  locprefix->vlifetime = vtimea;\n  locprefix->plifetime = ptimea;\n  return locprefix;\n}", "var": [], "body_in_train": true}, {"repo_owner": "himyxia", "repo_name": "c", "path": "himyxia/c/3824e960e5a413f67b7139f19f35385c9065ddf7acc57ab0f0b7e247b3d86968", "path_in_repo": "himyxia/c/network/unpv13e/names/daytimetcpcli1", "objdump": "0000000000402f20 <Sock_ntop>:\n  402f20:\t53                   \tpush   %rbx\n  402f21:\te8 fa fd ff ff       \tcallq  402d20 <sock_ntop>\n  402f26:\t48 85 c0             \ttest   %rax,%rax\n  402f29:\t48 89 c3             \tmov    %rax,%rbx\n  402f2c:\t74 0a                \tje     402f38 <Sock_ntop+0x18>\n  402f2e:\t48 89 d8             \tmov    %rbx,%rax\n  402f31:\t5b                   \tpop    %rbx\n  402f32:\tc3                   \tretq   \n  402f33:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n  402f38:\t31 c0                \txor    %eax,%eax\n  402f3a:\tbf a3 40 40 00       \tmov    $0x4040a3,%edi\n  402f3f:\te8 4c fb ff ff       \tcallq  402a90 <err_sys>\n  402f44:\t48 89 d8             \tmov    %rbx,%rax\n  402f47:\t5b                   \tpop    %rbx\n  402f48:\tc3                   \tretq   \n  402f49:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)", "code_s": "char *__fastcall Sock_ntop(const char *a1, __int64 a2) {\n  char *result;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  char v7;\n  result = sock_ntop(a1);\n  if (!result)\n    err_sys((__int64)String, a2, v3, v4, v5, v6, v7);\n  return result;\n}", "code_t": "char *__fastcall Sock_ntop(const sockaddr *sa, socklen_t salen) {\n  char *result;\n  result = sock_ntop(sa, salen);\n  if (!result)\n    err_sys(String);\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "grivon", "repo_name": "yabusame-qemu-dpt", "path": "grivon/yabusame-qemu-dpt/7fe17919bdf9419a366524d8242d69f627b64e8dd40431a2d09dd4ceadd6bc43", "path_in_repo": "grivon/yabusame-qemu-dpt//armeb-linux-user/uaccess.o", "objdump": "0000000000000000 <access_ok>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n   b:\t89 75 e8             \tmov    %esi,-0x18(%rbp)\n   e:\t89 55 e4             \tmov    %edx,-0x1c(%rbp)\n  11:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n  18:\t00 00 \n  1a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  1e:\t31 c0                \txor    %eax,%eax\n  20:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  24:\t75 07                \tjne    2d <access_ok+0x2d>\n  26:\tba 01 00 00 00       \tmov    $0x1,%edx\n  2b:\teb 05                \tjmp    32 <access_ok+0x32>\n  2d:\tba 03 00 00 00       \tmov    $0x3,%edx\n  32:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n  35:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  38:\t89 ce                \tmov    %ecx,%esi\n  3a:\t89 c7                \tmov    %eax,%edi\n  3c:\te8 00 00 00 00       \tcallq  41 <access_ok+0x41>\n  41:\t85 c0                \ttest   %eax,%eax\n  43:\t0f 94 c0             \tsete   %al\n  46:\t0f b6 c0             \tmovzbl %al,%eax\n  49:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  4d:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n  54:\t00 00 \n  56:\t74 05                \tje     5d <access_ok+0x5d>\n  58:\te8 00 00 00 00       \tcallq  5d <access_ok+0x5d>\n  5d:\tc9                   \tleaveq \n  5e:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall access_ok(int a1, unsigned int a2, unsigned int a3) {\n  __int64 v3;\n  if (a1)\n    v3 = Number L;\n  else\n    v3 = Number L;\n  return (unsigned int)page_check_range(a2, a3, v3) == Number;\n}", "code_t": "int __cdecl access_ok(int type, abi_ulong addr, abi_ulong size) {\n  __int64 v3;\n  if (type)\n    v3 = Number L;\n  else\n    v3 = Number L;\n  return page_check_range(addr, size, v3) == Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "nyilas", "repo_name": "OpenTSD", "path": "nyilas/OpenTSD/e72a3af7fda6f718e11428593633fb1b7399f4de0f9c473d84933d686475479b", "path_in_repo": "nyilas/OpenTSD/ssl/s23_srvr.o", "objdump": "0000000000000000 <ssl23_get_server_method>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 83 ec 10          \tsub    $0x10,%rsp\n       8:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n       b:\t83 7d fc 02          \tcmpl   $0x2,-0x4(%rbp)\n       f:\t75 07                \tjne    18 <ssl23_get_server_method+0x18>\n      11:\te8 00 00 00 00       \tcallq  16 <ssl23_get_server_method+0x16>\n      16:\teb 45                \tjmp    5d <ssl23_get_server_method+0x5d>\n      18:\t81 7d fc 00 03 00 00 \tcmpl   $0x300,-0x4(%rbp)\n      1f:\t75 07                \tjne    28 <ssl23_get_server_method+0x28>\n      21:\te8 00 00 00 00       \tcallq  26 <ssl23_get_server_method+0x26>\n      26:\teb 35                \tjmp    5d <ssl23_get_server_method+0x5d>\n      28:\t81 7d fc 01 03 00 00 \tcmpl   $0x301,-0x4(%rbp)\n      2f:\t75 07                \tjne    38 <ssl23_get_server_method+0x38>\n      31:\te8 00 00 00 00       \tcallq  36 <ssl23_get_server_method+0x36>\n      36:\teb 25                \tjmp    5d <ssl23_get_server_method+0x5d>\n      38:\t81 7d fc 02 03 00 00 \tcmpl   $0x302,-0x4(%rbp)\n      3f:\t75 07                \tjne    48 <ssl23_get_server_method+0x48>\n      41:\te8 00 00 00 00       \tcallq  46 <ssl23_get_server_method+0x46>\n      46:\teb 15                \tjmp    5d <ssl23_get_server_method+0x5d>\n      48:\t81 7d fc 03 03 00 00 \tcmpl   $0x303,-0x4(%rbp)\n      4f:\t75 07                \tjne    58 <ssl23_get_server_method+0x58>\n      51:\te8 00 00 00 00       \tcallq  56 <ssl23_get_server_method+0x56>\n      56:\teb 05                \tjmp    5d <ssl23_get_server_method+0x5d>\n      58:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      5d:\tc9                   \tleaveq \n      5e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ssl23_get_server_method(int a1) {\n  switch (a1) {\n  case Number:\n    return SSLv2_server_method();\n  case Number:\n    return SSLv3_server_method();\n  case Number:\n    return TLSv1_server_method();\n  case Number:\n    return TLSv1_1_server_method();\n  case Number:\n    return TLSv1_2_server_method();\n  }\n  return Number L;\n}", "code_t": "const SSL_METHOD *__cdecl ssl23_get_server_method(int ver) {\n  switch (ver) {\n  case Number:\n    return (const SSL_METHOD *)SSLv2_server_method();\n  case Number:\n    return (const SSL_METHOD *)SSLv3_server_method();\n  case Number:\n    return (const SSL_METHOD *)TLSv1_server_method();\n  case Number:\n    return (const SSL_METHOD *)TLSv1_1_server_method();\n  case Number:\n    return (const SSL_METHOD *)TLSv1_2_server_method();\n  }\n  return Number L;\n}", "var": [], "body_in_train": true}, {"repo_owner": "kaber", "repo_name": "net-next-netlink-mmap", "path": "kaber/net-next-netlink-mmap/1cc8894e70453df244e13fe404d6115e438f24bf77c73bdb07734a4c83463d98", "path_in_repo": "kaber/net-next-netlink-mmap/tools/perf/builtin-timechart.o", "objdump": "0000000000001ee8 <__cmd_timechart>:\n    1ee8:\t55                   \tpush   %rbp\n    1ee9:\t48 89 e5             \tmov    %rsp,%rbp\n    1eec:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1ef0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1ef7:\t00 00 \n    1ef9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1efd:\t31 c0                \txor    %eax,%eax\n    1eff:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1f06 <__cmd_timechart+0x1e>\n    1f06:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1f0c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1f11:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1f16:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f1b:\t48 89 c7             \tmov    %rax,%rdi\n    1f1e:\te8 00 00 00 00       \tcallq  1f23 <__cmd_timechart+0x3b>\n    1f23:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1f27:\tc7 45 ec ea ff ff ff \tmovl   $0xffffffea,-0x14(%rbp)\n    1f2e:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    1f33:\t75 0a                \tjne    1f3f <__cmd_timechart+0x57>\n    1f35:\tb8 f4 ff ff ff       \tmov    $0xfffffff4,%eax\n    1f3a:\te9 c3 00 00 00       \tjmpq   2002 <__cmd_timechart+0x11a>\n    1f3f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1f43:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f48:\t48 89 c7             \tmov    %rax,%rdi\n    1f4b:\te8 00 00 00 00       \tcallq  1f50 <__cmd_timechart+0x68>\n    1f50:\t83 f0 01             \txor    $0x1,%eax\n    1f53:\t84 c0                \ttest   %al,%al\n    1f55:\t0f 85 94 00 00 00    \tjne    1fef <__cmd_timechart+0x107>\n    1f5b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1f5f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f64:\t48 89 c7             \tmov    %rax,%rdi\n    1f67:\te8 00 00 00 00       \tcallq  1f6c <__cmd_timechart+0x84>\n    1f6c:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    1f6f:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    1f73:\t75 7d                \tjne    1ff2 <__cmd_timechart+0x10a>\n    1f75:\te8 e6 ef ff ff       \tcallq  f60 <end_sample_processing>\n    1f7a:\te8 36 f1 ff ff       \tcallq  10b5 <sort_pids>\n    1f7f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1f86 <__cmd_timechart+0x9e>\n    1f86:\t48 89 c7             \tmov    %rax,%rdi\n    1f89:\te8 73 fe ff ff       \tcallq  1e01 <write_svg_file>\n    1f8e:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 1f95 <__cmd_timechart+0xad>\n    1f95:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1f9c <__cmd_timechart+0xb4>\n    1f9c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1fa3 <__cmd_timechart+0xbb>\n    1fa3:\t48 29 c2             \tsub    %rax,%rdx\n    1fa6:\t48 89 d0             \tmov    %rdx,%rax\n    1fa9:\t48 85 c0             \ttest   %rax,%rax\n    1fac:\t78 07                \tjs     1fb5 <__cmd_timechart+0xcd>\n    1fae:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n    1fb3:\teb 15                \tjmp    1fca <__cmd_timechart+0xe2>\n    1fb5:\t48 89 c2             \tmov    %rax,%rdx\n    1fb8:\t48 d1 ea             \tshr    %rdx\n    1fbb:\t83 e0 01             \tand    $0x1,%eax\n    1fbe:\t48 09 c2             \tor     %rax,%rdx\n    1fc1:\tf2 48 0f 2a c2       \tcvtsi2sd %rdx,%xmm0\n    1fc6:\tf2 0f 58 c0          \taddsd  %xmm0,%xmm0\n    1fca:\tf2 0f 10 0d 00 00 00 \tmovsd  0x0(%rip),%xmm1        # 1fd2 <__cmd_timechart+0xea>\n    1fd1:\t00 \n    1fd2:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    1fd6:\t48 89 ca             \tmov    %rcx,%rdx\n    1fd9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1fde:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1fe3:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1fe8:\te8 00 00 00 00       \tcallq  1fed <__cmd_timechart+0x105>\n    1fed:\teb 04                \tjmp    1ff3 <__cmd_timechart+0x10b>\n    1fef:\t90                   \tnop\n    1ff0:\teb 01                \tjmp    1ff3 <__cmd_timechart+0x10b>\n    1ff2:\t90                   \tnop\n    1ff3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1ff7:\t48 89 c7             \tmov    %rax,%rdi\n    1ffa:\te8 00 00 00 00       \tcallq  1fff <__cmd_timechart+0x117>\n    1fff:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    2002:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    2006:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    200d:\t00 00 \n    200f:\t74 05                \tje     2016 <__cmd_timechart+0x12e>\n    2011:\te8 00 00 00 00       \tcallq  2016 <__cmd_timechart+0x12e>\n    2016:\tc9                   \tleaveq \n    2017:\tc3                   \tretq   ", "code_s": "__int64 _cmd_timechart() {\n  unsigned __int64 v1;\n  double v2;\n  unsigned int v3;\n  __int64 v4;\n  v4 = perf_session__new(input_name, Number L, Number L, Number L,\n                         perf_timechart);\n  v3 = Number;\n  if (!v4)\n    return Number L;\n  if ((unsigned __int8)perf_session__has_traces(v4, String) == Number) {\n    v3 = perf_session__process_events(v4, perf_timechart);\n    if (!v3) {\n      end_sample_processing();\n      sort_pids();\n      write_svg_file((__int64)output_name);\n      v1 = last_time - first_time;\n      if (last_time - first_time < Number)\n        v2 = (double)(int)(v1 & Number | (v1 >> Number)) +\n             (double)(int)(v1 & Number | (v1 >> Number));\n      else\n        v2 = (double)(int)v1;\n      eprintf(Number L, String, v2 / Number, output_name);\n    }\n  }\n  perf_session__delete(v4);\n  return v3;\n}", "code_t": "int __cdecl _cmd_timechart() {\n  u64 v1;\n  double v2;\n  int ret;\n  perf_session *session;\n  session = (perf_session *)perf_session__new(input_name, Number L, Number L,\n                                              Number L, &perf_timechart);\n  ret = Number;\n  if (!session)\n    return Number;\n  if ((unsigned __int8)perf_session__has_traces(session, String) == Number) {\n    ret = perf_session__process_events(session, &perf_timechart);\n    if (!ret) {\n      end_sample_processing();\n      sort_pids();\n      write_svg_file(output_name);\n      v1 = last_time - first_time;\n      if ((__int64)(last_time - first_time) < Number)\n        v2 = (double)(int)(v1 & Number | (v1 >> Number)) +\n             (double)(int)(v1 & Number | (v1 >> Number));\n      else\n        v2 = (double)(int)v1;\n      eprintf(Number L, String, v2 / Number, output_name);\n    }\n  }\n  perf_session__delete(session);\n  return ret;\n}", "var": [], "body_in_train": true}, {"repo_owner": "lalithsuresh", "repo_name": "QEMU-Device-State-Visualisations", "path": "lalithsuresh/QEMU-Device-State-Visualisations/2017fac48fc6545a10b1209dc56c22bff7d2c4f99df1100b873ebcad55e8806b", "path_in_repo": "lalithsuresh/QEMU-Device-State-Visualisations//arm-linux-user/syscall.o", "objdump": "000000000000af20 <syscall_init>:\n    af20:\t55                   \tpush   %rbp\n    af21:\t48 89 e5             \tmov    %rsp,%rbp\n    af24:\t48 83 ec 20          \tsub    $0x20,%rsp\n    af28:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    af2f:\t00 00 \n    af31:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    af35:\t31 c0                \txor    %eax,%eax\n    af37:\tba 00 00 00 00       \tmov    $0x0,%edx\n    af3c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    af41:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    af46:\te8 00 00 00 00       \tcallq  af4b <syscall_init+0x2b>\n    af4b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    af50:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    af55:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    af5a:\te8 00 00 00 00       \tcallq  af5f <syscall_init+0x3f>\n    af5f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    af64:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    af69:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    af6e:\te8 00 00 00 00       \tcallq  af73 <syscall_init+0x53>\n    af73:\tba 00 00 00 00       \tmov    $0x0,%edx\n    af78:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    af7d:\tbf 03 00 00 00       \tmov    $0x3,%edi\n    af82:\te8 00 00 00 00       \tcallq  af87 <syscall_init+0x67>\n    af87:\tba 00 00 00 00       \tmov    $0x0,%edx\n    af8c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    af91:\tbf 04 00 00 00       \tmov    $0x4,%edi\n    af96:\te8 00 00 00 00       \tcallq  af9b <syscall_init+0x7b>\n    af9b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    afa0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    afa5:\tbf 05 00 00 00       \tmov    $0x5,%edi\n    afaa:\te8 00 00 00 00       \tcallq  afaf <syscall_init+0x8f>\n    afaf:\tba 00 00 00 00       \tmov    $0x0,%edx\n    afb4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    afb9:\tbf 06 00 00 00       \tmov    $0x6,%edi\n    afbe:\te8 00 00 00 00       \tcallq  afc3 <syscall_init+0xa3>\n    afc3:\tba 00 00 00 00       \tmov    $0x0,%edx\n    afc8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    afcd:\tbf 07 00 00 00       \tmov    $0x7,%edi\n    afd2:\te8 00 00 00 00       \tcallq  afd7 <syscall_init+0xb7>\n    afd7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    afdc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    afe1:\tbf 08 00 00 00       \tmov    $0x8,%edi\n    afe6:\te8 00 00 00 00       \tcallq  afeb <syscall_init+0xcb>\n    afeb:\tba 00 00 00 00       \tmov    $0x0,%edx\n    aff0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    aff5:\tbf 09 00 00 00       \tmov    $0x9,%edi\n    affa:\te8 00 00 00 00       \tcallq  afff <syscall_init+0xdf>\n    afff:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b004:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b009:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n    b00e:\te8 00 00 00 00       \tcallq  b013 <syscall_init+0xf3>\n    b013:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b018:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b01d:\tbf 0b 00 00 00       \tmov    $0xb,%edi\n    b022:\te8 00 00 00 00       \tcallq  b027 <syscall_init+0x107>\n    b027:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b02c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b031:\tbf 0c 00 00 00       \tmov    $0xc,%edi\n    b036:\te8 00 00 00 00       \tcallq  b03b <syscall_init+0x11b>\n    b03b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b040:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b045:\tbf 0d 00 00 00       \tmov    $0xd,%edi\n    b04a:\te8 00 00 00 00       \tcallq  b04f <syscall_init+0x12f>\n    b04f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b054:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b059:\tbf 0e 00 00 00       \tmov    $0xe,%edi\n    b05e:\te8 00 00 00 00       \tcallq  b063 <syscall_init+0x143>\n    b063:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b068:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b06d:\tbf 0f 00 00 00       \tmov    $0xf,%edi\n    b072:\te8 00 00 00 00       \tcallq  b077 <syscall_init+0x157>\n    b077:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b07c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b081:\tbf 10 00 00 00       \tmov    $0x10,%edi\n    b086:\te8 00 00 00 00       \tcallq  b08b <syscall_init+0x16b>\n    b08b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b090:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b095:\tbf 11 00 00 00       \tmov    $0x11,%edi\n    b09a:\te8 00 00 00 00       \tcallq  b09f <syscall_init+0x17f>\n    b09f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b0a4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b0a9:\tbf 12 00 00 00       \tmov    $0x12,%edi\n    b0ae:\te8 00 00 00 00       \tcallq  b0b3 <syscall_init+0x193>\n    b0b3:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b0b8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b0bd:\tbf 13 00 00 00       \tmov    $0x13,%edi\n    b0c2:\te8 00 00 00 00       \tcallq  b0c7 <syscall_init+0x1a7>\n    b0c7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b0cc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b0d1:\tbf 14 00 00 00       \tmov    $0x14,%edi\n    b0d6:\te8 00 00 00 00       \tcallq  b0db <syscall_init+0x1bb>\n    b0db:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b0e0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b0e5:\tbf 15 00 00 00       \tmov    $0x15,%edi\n    b0ea:\te8 00 00 00 00       \tcallq  b0ef <syscall_init+0x1cf>\n    b0ef:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b0f4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b0f9:\tbf 16 00 00 00       \tmov    $0x16,%edi\n    b0fe:\te8 00 00 00 00       \tcallq  b103 <syscall_init+0x1e3>\n    b103:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b108:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b10d:\tbf 17 00 00 00       \tmov    $0x17,%edi\n    b112:\te8 00 00 00 00       \tcallq  b117 <syscall_init+0x1f7>\n    b117:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b11c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b121:\tbf 18 00 00 00       \tmov    $0x18,%edi\n    b126:\te8 00 00 00 00       \tcallq  b12b <syscall_init+0x20b>\n    b12b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b130:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b135:\tbf 19 00 00 00       \tmov    $0x19,%edi\n    b13a:\te8 00 00 00 00       \tcallq  b13f <syscall_init+0x21f>\n    b13f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b144:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b149:\tbf 1a 00 00 00       \tmov    $0x1a,%edi\n    b14e:\te8 00 00 00 00       \tcallq  b153 <syscall_init+0x233>\n    b153:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b158:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b15d:\tbf 1b 00 00 00       \tmov    $0x1b,%edi\n    b162:\te8 00 00 00 00       \tcallq  b167 <syscall_init+0x247>\n    b167:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b16c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b171:\tbf 1c 00 00 00       \tmov    $0x1c,%edi\n    b176:\te8 00 00 00 00       \tcallq  b17b <syscall_init+0x25b>\n    b17b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b180:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b185:\tbf 1d 00 00 00       \tmov    $0x1d,%edi\n    b18a:\te8 00 00 00 00       \tcallq  b18f <syscall_init+0x26f>\n    b18f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b194:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b199:\tbf 1e 00 00 00       \tmov    $0x1e,%edi\n    b19e:\te8 00 00 00 00       \tcallq  b1a3 <syscall_init+0x283>\n    b1a3:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b1a8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b1ad:\tbf 1f 00 00 00       \tmov    $0x1f,%edi\n    b1b2:\te8 00 00 00 00       \tcallq  b1b7 <syscall_init+0x297>\n    b1b7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b1bc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b1c1:\tbf 20 00 00 00       \tmov    $0x20,%edi\n    b1c6:\te8 00 00 00 00       \tcallq  b1cb <syscall_init+0x2ab>\n    b1cb:\tba 00 00 00 00       \tmov    $0x0,%edx\n    b1d0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b1d5:\tbf 21 00 00 00       \tmov    $0x21,%edi\n    b1da:\te8 00 00 00 00       \tcallq  b1df <syscall_init+0x2bf>\n    b1df:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    b1e6:\t00 \n    b1e7:\te9 c1 00 00 00       \tjmpq   b2ad <syscall_init+0x38d>\n    b1ec:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b1f0:\t8b 00                \tmov    (%rax),%eax\n    b1f2:\tc1 e8 10             \tshr    $0x10,%eax\n    b1f5:\t25 ff 3f 00 00       \tand    $0x3fff,%eax\n    b1fa:\t3d ff 3f 00 00       \tcmp    $0x3fff,%eax\n    b1ff:\t75 74                \tjne    b275 <syscall_init+0x355>\n    b201:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b205:\t48 83 c0 20          \tadd    $0x20,%rax\n    b209:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    b20d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    b211:\t8b 00                \tmov    (%rax),%eax\n    b213:\t83 f8 09             \tcmp    $0x9,%eax\n    b216:\t74 29                \tje     b241 <syscall_init+0x321>\n    b218:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b21c:\t8b 10                \tmov    (%rax),%edx\n    b21e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b225 <syscall_init+0x305>\n    b225:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b22a:\t48 89 c7             \tmov    %rax,%rdi\n    b22d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    b232:\te8 00 00 00 00       \tcallq  b237 <syscall_init+0x317>\n    b237:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    b23c:\te8 00 00 00 00       \tcallq  b241 <syscall_init+0x321>\n    b241:\t48 83 45 f0 04       \taddq   $0x4,-0x10(%rbp)\n    b246:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    b24a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    b24f:\t48 89 c7             \tmov    %rax,%rdi\n    b252:\te8 0b 4f ff ff       \tcallq  162 <thunk_type_size>\n    b257:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    b25a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b25e:\t8b 00                \tmov    (%rax),%eax\n    b260:\t25 ff ff 00 c0       \tand    $0xc000ffff,%eax\n    b265:\t89 c2                \tmov    %eax,%edx\n    b267:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n    b26a:\tc1 e0 10             \tshl    $0x10,%eax\n    b26d:\t09 c2                \tor     %eax,%edx\n    b26f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b273:\t89 10                \tmov    %edx,(%rax)\n    b275:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n    b27c:\teb 21                \tjmp    b29f <syscall_init+0x37f>\n    b27e:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n    b281:\t48 98                \tcltq   \n    b283:\t0f b7 84 00 00 00 00 \tmovzwl 0x0(%rax,%rax,1),%eax\n    b28a:\t00 \n    b28b:\t0f b7 c0             \tmovzwl %ax,%eax\n    b28e:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n    b291:\t48 98                \tcltq   \n    b293:\t66 89 94 00 00 00 00 \tmov    %dx,0x0(%rax,%rax,1)\n    b29a:\t00 \n    b29b:\t83 45 e0 01          \taddl   $0x1,-0x20(%rbp)\n    b29f:\t81 7d e0 af 04 00 00 \tcmpl   $0x4af,-0x20(%rbp)\n    b2a6:\t7e d6                \tjle    b27e <syscall_init+0x35e>\n    b2a8:\t48 83 45 e8 38       \taddq   $0x38,-0x18(%rbp)\n    b2ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    b2b1:\t8b 00                \tmov    (%rax),%eax\n    b2b3:\t85 c0                \ttest   %eax,%eax\n    b2b5:\t0f 85 31 ff ff ff    \tjne    b1ec <syscall_init+0x2cc>\n    b2bb:\t90                   \tnop\n    b2bc:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    b2c0:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    b2c7:\t00 00 \n    b2c9:\t74 05                \tje     b2d0 <syscall_init+0x3b0>\n    b2cb:\te8 00 00 00 00       \tcallq  b2d0 <syscall_init+0x3b0>\n    b2d0:\tc9                   \tleaveq \n    b2d1:\tc3                   \tretq   ", "code_s": "unsigned __int64 syscall_init() {\n  int j;\n  unsigned int *i;\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  thunk_register_struct_direct(Number L, String, &struct_termios_def);\n  thunk_register_struct(Number L, String, &struct_winsize_def);\n  thunk_register_struct(Number L, String, &struct_serial_multiport_struct_def);\n  thunk_register_struct(Number L, String, &struct_serial_icounter_struct_def);\n  thunk_register_struct(Number L, String, &struct_sockaddr_def);\n  thunk_register_struct(Number L, String, &struct_rtentry_def);\n  thunk_register_struct(Number L, String, &struct_ifmap_def);\n  thunk_register_struct(Number L, String, &struct_sockaddr_ifreq_def);\n  thunk_register_struct(Number L, String, &struct_short_ifreq_def);\n  thunk_register_struct(Number L, String, &struct_int_ifreq_def);\n  thunk_register_struct(Number L, String, &struct_ifmap_ifreq_def);\n  thunk_register_struct(Number L, String, &struct_char_ifreq_def);\n  thunk_register_struct(Number L, String, &struct_ptr_ifreq_def);\n  thunk_register_struct(Number L, String, &struct_ifconf_def);\n  thunk_register_struct(Number L, String, &struct_arpreq_def);\n  thunk_register_struct(Number L, String, &struct_arpreq_old_def);\n  thunk_register_struct(Number L, String, &struct_cdrom_read_audio_def);\n  thunk_register_struct(Number L, String, &struct_hd_geometry_def);\n  thunk_register_struct(Number L, String, &struct_dirent_def);\n  thunk_register_struct(Number L, String, &struct_kbentry_def);\n  thunk_register_struct(Number L, String, &struct_kbsentry_def);\n  thunk_register_struct(Number L, String, &struct_audio_buf_info_def);\n  thunk_register_struct(Number L, String, &struct_count_info_def);\n  thunk_register_struct(Number L, String, &struct_mixer_info_def);\n  thunk_register_struct(Number L, String, &struct_loop_info_def);\n  thunk_register_struct(Number L, String, &struct_loop_info64_def);\n  thunk_register_struct(Number L, String, &struct_mtop_def);\n  thunk_register_struct(Number L, String, &struct_mtget_def);\n  thunk_register_struct(Number L, String, &struct_mtpos_def);\n  thunk_register_struct(Number L, String, &struct_fb_fix_screeninfo_def);\n  thunk_register_struct(Number L, String, &struct_fb_var_screeninfo_def);\n  thunk_register_struct(Number L, String, &struct_vt_stat_def);\n  thunk_register_struct(Number L, String, &struct_fiemap_extent_def);\n  thunk_register_struct(Number L, String, &struct_fiemap_def);\n  for (i = (unsigned int *)&ioctl_entries; *i; i += Number) {\n    if ((HIWORD(*i) & Number) == Number) {\n      if (i[Number] != Number) {\n        fprintf(stderr, String, *i);\n        exit(Number);\n      }\n      *i = ((unsigned int)thunk_type_size(i + Number, Number) << Number) |\n           *i & Number;\n    }\n    for (j = Number; j <= Number; ++j)\n      target_to_host_errno_table[(\n          unsigned __int16)host_to_target_errno_table[j]] = j;\n  }\n  return __readfsqword(Number) ^ v3;\n}", "code_t": "void __cdecl syscall_init() {\n  int i;\n  IOCTLEntry_0 *ie;\n  thunk_register_struct_direct(Number L, String, &struct_termios_def);\n  thunk_register_struct(Number L, String, struct_winsize_def);\n  thunk_register_struct(Number L, String, struct_serial_multiport_struct_def);\n  thunk_register_struct(Number L, String, struct_serial_icounter_struct_def);\n  thunk_register_struct(Number L, String, struct_sockaddr_def);\n  thunk_register_struct(Number L, String, struct_rtentry_def);\n  thunk_register_struct(Number L, String, struct_ifmap_def);\n  thunk_register_struct(Number L, String, struct_sockaddr_ifreq_def);\n  thunk_register_struct(Number L, String, struct_short_ifreq_def);\n  thunk_register_struct(Number L, String, struct_int_ifreq_def);\n  thunk_register_struct(Number L, String, struct_ifmap_ifreq_def);\n  thunk_register_struct(Number L, String, struct_char_ifreq_def);\n  thunk_register_struct(Number L, String, struct_ptr_ifreq_def);\n  thunk_register_struct(Number L, String, struct_ifconf_def);\n  thunk_register_struct(Number L, String, struct_arpreq_def);\n  thunk_register_struct(Number L, String, struct_arpreq_old_def);\n  thunk_register_struct(Number L, String, struct_cdrom_read_audio_def);\n  thunk_register_struct(Number L, String, struct_hd_geometry_def);\n  thunk_register_struct(Number L, String, struct_dirent_def);\n  thunk_register_struct(Number L, String, struct_kbentry_def);\n  thunk_register_struct(Number L, String, struct_kbsentry_def);\n  thunk_register_struct(Number L, String, struct_audio_buf_info_def);\n  thunk_register_struct(Number L, String, struct_count_info_def);\n  thunk_register_struct(Number L, String, struct_mixer_info_def);\n  thunk_register_struct(Number L, String, struct_loop_info_def);\n  thunk_register_struct(Number L, String, struct_loop_info64_def);\n  thunk_register_struct(Number L, String, struct_mtop_def);\n  thunk_register_struct(Number L, String, struct_mtget_def);\n  thunk_register_struct(Number L, String, struct_mtpos_def);\n  thunk_register_struct(Number L, String, struct_fb_fix_screeninfo_def);\n  thunk_register_struct(Number L, String, struct_fb_var_screeninfo_def);\n  thunk_register_struct(Number L, String, struct_vt_stat_def);\n  thunk_register_struct(Number L, String, struct_fiemap_extent_def);\n  thunk_register_struct(Number L, String, struct_fiemap_def);\n  for (ie = ioctl_entries; ie->target_cmd; ++ie) {\n    if ((HIWORD(ie->target_cmd) & Number) == Number) {\n      if (ie->arg_type[Number] != TYPE_PTR) {\n        fprintf(stderr, String, ie->target_cmd);\n        exit(Number);\n      }\n      ie->target_cmd =\n          (thunk_type_size(&ie->arg_type[Number], Number) << Number) |\n          ie->target_cmd & Number;\n    }\n    for (i = Number; i <= Number; ++i)\n      target_to_host_errno_table[host_to_target_errno_table[i]] = i;\n  }\n}", "var": [], "body_in_train": false}, {"repo_owner": "elisam98", "repo_name": "volt_combo", "path": "elisam98/volt_combo/ccadaa7cece6f43931a37bcc725b19776e7de203522e163fbbf88f5c34e2454c", "path_in_repo": "elisam98/volt_combo/kernel/lge/msm8226/tools/power/cpupower/utils/idle_monitor/cpupower-monitor.o", "objdump": "0000000000000ace <list_monitors>:\n     ace:\t55                   \tpush   %rbp\n     acf:\t48 89 e5             \tmov    %rsp,%rbp\n     ad2:\t41 55                \tpush   %r13\n     ad4:\t41 54                \tpush   %r12\n     ad6:\t53                   \tpush   %rbx\n     ad7:\t48 83 ec 78          \tsub    $0x78,%rsp\n     adb:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n     ae2:\te9 46 01 00 00       \tjmpq   c2d <list_monitors+0x15f>\n     ae7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     aea:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     af1:\t00 \n     af2:\t44 8b 60 48          \tmov    0x48(%rax),%r12d\n     af6:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     af9:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     b00:\t00 \n     b01:\t8b 58 18             \tmov    0x18(%rax),%ebx\n     b04:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     b07:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     b0e:\t00 \n     b0f:\t49 89 c5             \tmov    %rax,%r13\n     b12:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     b17:\te8 00 00 00 00       \tcallq  b1c <list_monitors+0x4e>\n     b1c:\t44 89 e1             \tmov    %r12d,%ecx\n     b1f:\t89 da                \tmov    %ebx,%edx\n     b21:\t4c 89 ee             \tmov    %r13,%rsi\n     b24:\t48 89 c7             \tmov    %rax,%rdi\n     b27:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b2c:\te8 00 00 00 00       \tcallq  b31 <list_monitors+0x63>\n     b31:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n     b38:\te9 d5 00 00 00       \tjmpq   c12 <list_monitors+0x144>\n     b3d:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     b40:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     b47:\t00 \n     b48:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n     b4c:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n     b4f:\t48 63 d0             \tmovslq %eax,%rdx\n     b52:\t48 89 d0             \tmov    %rdx,%rax\n     b55:\t48 01 c0             \tadd    %rax,%rax\n     b58:\t48 01 d0             \tadd    %rdx,%rax\n     b5b:\t48 c1 e0 05          \tshl    $0x5,%rax\n     b5f:\t48 01 c8             \tadd    %rcx,%rax\n     b62:\t48 8b 08             \tmov    (%rax),%rcx\n     b65:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n     b69:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n     b70:\t48 89 9d 78 ff ff ff \tmov    %rbx,-0x88(%rbp)\n     b77:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n     b7b:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n     b7f:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n     b83:\t48 89 5d 88          \tmov    %rbx,-0x78(%rbp)\n     b87:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n     b8b:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n     b8f:\t48 89 4d 90          \tmov    %rcx,-0x70(%rbp)\n     b93:\t48 89 5d 98          \tmov    %rbx,-0x68(%rbp)\n     b97:\t48 8b 48 30          \tmov    0x30(%rax),%rcx\n     b9b:\t48 8b 58 38          \tmov    0x38(%rax),%rbx\n     b9f:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n     ba3:\t48 89 5d a8          \tmov    %rbx,-0x58(%rbp)\n     ba7:\t48 8b 48 40          \tmov    0x40(%rax),%rcx\n     bab:\t48 8b 58 48          \tmov    0x48(%rax),%rbx\n     baf:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n     bb3:\t48 89 5d b8          \tmov    %rbx,-0x48(%rbp)\n     bb7:\t48 8b 50 58          \tmov    0x58(%rax),%rdx\n     bbb:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     bbf:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     bc3:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n     bc7:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n     bce:\t48 83 c0 0d          \tadd    $0xd,%rax\n     bd2:\t48 89 c7             \tmov    %rax,%rdi\n     bd5:\te8 00 00 00 00       \tcallq  bda <list_monitors+0x10c>\n     bda:\t48 89 c2             \tmov    %rax,%rdx\n     bdd:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n     be3:\t89 c0                \tmov    %eax,%eax\n     be5:\t0f b6 80 00 00 00 00 \tmovzbl 0x0(%rax),%eax\n     bec:\t0f be c0             \tmovsbl %al,%eax\n     bef:\t48 8d 8d 70 ff ff ff \tlea    -0x90(%rbp),%rcx\n     bf6:\t48 8d 71 08          \tlea    0x8(%rcx),%rsi\n     bfa:\t48 89 d1             \tmov    %rdx,%rcx\n     bfd:\t89 c2                \tmov    %eax,%edx\n     bff:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c04:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c09:\te8 00 00 00 00       \tcallq  c0e <list_monitors+0x140>\n     c0e:\t83 45 d8 01          \taddl   $0x1,-0x28(%rbp)\n     c12:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     c15:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     c1c:\t00 \n     c1d:\t8b 40 18             \tmov    0x18(%rax),%eax\n     c20:\t39 45 d8             \tcmp    %eax,-0x28(%rbp)\n     c23:\t0f 8c 14 ff ff ff    \tjl     b3d <list_monitors+0x6f>\n     c29:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n     c2d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # c33 <list_monitors+0x165>\n     c33:\t39 45 dc             \tcmp    %eax,-0x24(%rbp)\n     c36:\t0f 82 ab fe ff ff    \tjb     ae7 <list_monitors+0x19>\n     c3c:\t90                   \tnop\n     c3d:\t90                   \tnop\n     c3e:\t48 83 c4 78          \tadd    $0x78,%rsp\n     c42:\t5b                   \tpop    %rbx\n     c43:\t41 5c                \tpop    %r12\n     c45:\t41 5d                \tpop    %r13\n     c47:\t5d                   \tpop    %rbp\n     c48:\tc3                   \tretq   ", "code_s": "__int64 list_monitors() {\n  unsigned int v0;\n  unsigned int v1;\n  char *v2;\n  char *v3;\n  __int64 *v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  char *v10;\n  __int64 result;\n  __int64 <span class=\"supfact\">v12</span>;\n  __int64 v13[Number];\n  int j;\n  unsigned int i;\n  for (i = Number;; ++i) {\n    result = (unsigned int)avail_monitors;\n    if (i >= avail_monitors)\n      break;\n    v0 = *((_DWORD *)(&monitors)[i] + Number);\n    v1 = *((_DWORD *)(&monitors)[i] + Number);\n    v2 = (&monitors)[i];\n    v3 = gettext(String);\n    printf(v3, v2, v1, v0);\n    for (j = Number; j < *((_DWORD *)(&monitors)[i] + Number); ++j) {\n      v4 = (__int64 *)(*((_QWORD *)(&monitors)[i] + Number) + Number L * j);\n      <span class=\"supfact\">v12</span> = *v4;\n      v13[Number] = v4[Number];\n      v5 = v4[Number];\n      v13[Number] = v4[Number];\n      v13[Number] = v5;\n      v6 = v4[Number];\n      v13[Number] = v4[Number];\n      v13[Number] = v6;\n      v7 = v4[Number];\n      v13[Number] = v4[Number];\n      v13[Number] = v7;\n      v8 = v4[Number];\n      v13[Number] = v4[Number];\n      v13[Number] = v8;\n      v9 = v4[Number];\n      v13[Number] = v4[Number];\n      v13[Number] = v9;\n      v10 = gettext((const char *)v13 + Number);\n      printf(String, (const char *)v13,\n             (unsigned int)range_abbr[HIDWORD(<span class=\"supfact\">v12</span>)], v10);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl list_monitors() {\n  unsigned int v0;\n  unsigned int v1;\n  cpuidle_monitor *v2;\n  char *v3;\n  cstate_t *v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  int (*v9)(unsigned int, unsigned __int64 *, unsigned int);\n  char *v10;\n  cstate_t <span class=\"supfact\">s</span>;\n  int state;\n  unsigned int mon;\n  for (mon = Number; mon < avail_monitors; ++mon) {\n    v0 = monitors[mon]->overflow_s;\n    v1 = monitors[mon]->hw_states_num;\n    v2 = monitors[mon];\n    v3 = gettext(String);\n    printf(v3, v2, v1, v0);\n    for (state = Number; state < monitors[mon]->hw_states_num; ++state) {\n      v4 = &monitors[mon]->hw_states[state];\n      *(_QWORD *)&<span class=\"supfact\">s</span>.id = *(_QWORD *)&v4->id;\n      *(_QWORD *)<span class=\"supfact\">s</span>.name = *(_QWORD *)v4->name;\n      v5 = *(_QWORD *)&v4->desc[Number];\n      *(_QWORD *)&<span class=\"supfact\">s</span>.desc[Number] = *(_QWORD *)&v4->desc[Number];\n      *(_QWORD *)&<span class=\"supfact\">s</span>.desc[Number] = v5;\n      v6 = *(_QWORD *)&v4->desc[Number];\n      *(_QWORD *)&<span class=\"supfact\">s</span>.desc[Number] = *(_QWORD *)&v4->desc[Number];\n      *(_QWORD *)&<span class=\"supfact\">s</span>.desc[Number] = v6;\n      v7 = *(_QWORD *)&v4->desc[Number];\n      *(_QWORD *)&<span class=\"supfact\">s</span>.desc[Number] = *(_QWORD *)&v4->desc[Number];\n      *(_QWORD *)&<span class=\"supfact\">s</span>.desc[Number] = v7;\n      v8 = *(_QWORD *)&v4->desc[Number];\n      *(_QWORD *)&<span class=\"supfact\">s</span>.desc[Number] = *(_QWORD *)&v4->desc[Number];\n      *(_QWORD *)&<span class=\"supfact\">s</span>.desc[Number] = v8;\n      v9 = v4->get_count;\n      <span class=\"supfact\">s</span>.get_count_percent = v4->get_count_percent;\n      <span class=\"supfact\">s</span>.get_count = v9;\n      v10 = gettext(<span class=\"supfact\">s</span>.desc);\n      printf(String, <span class=\"supfact\">s</span>.name,\n             (unsigned int)range_abbr[<span class=\"supfact\">s</span>.range], v10);\n    }\n  }\n}", "var": [{"name": "v12", "type": "struct cstate_t { int id; power_range_e range; char[5] name; char[60] desc; PADDING (7); int (*)(unsigned int, double *, unsigned int) get_count_percent; int (*)(unsigned int, unsigned __int64 *, unsigned int) get_count; }", "pred_name": "s", "ref_name": "s", "ref_type": "struct cstate_t { int id; power_range_e range; char[5] name; char[60] desc; PADDING (7); int (*)(unsigned int, double *, unsigned int) get_count_percent; int (*)(unsigned int, unsigned __int64 *, unsigned int) get_count; }"}], "body_in_train": true}, {"repo_owner": "KG7QIN", "repo_name": "AllStarLink", "path": "KG7QIN/AllStarLink/d3c3e587603e063e0c62ddb53dc3d84bc42778a19f0602149ed285567058ed21", "path_in_repo": "KG7QIN/AllStarLink/trunk/zaptel/menuselect/menuselect.o", "objdump": "0000000000000000 <strlen_zero>:\n       0:\t55                   \tpush   %rbp\n       1:\t48 89 e5             \tmov    %rsp,%rbp\n       4:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n       8:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n       d:\t74 0b                \tje     1a <strlen_zero+0x1a>\n       f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n      13:\t0f b6 00             \tmovzbl (%rax),%eax\n      16:\t84 c0                \ttest   %al,%al\n      18:\t75 07                \tjne    21 <strlen_zero+0x21>\n      1a:\tb8 01 00 00 00       \tmov    $0x1,%eax\n      1f:\teb 05                \tjmp    26 <strlen_zero+0x26>\n      21:\tb8 00 00 00 00       \tmov    $0x0,%eax\n      26:\t5d                   \tpop    %rbp\n      27:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall strlen_zero(_BYTE *a1) { return !a1 || !*a1; }", "code_t": "int __cdecl strlen_zero(const char *s) { return !s || !*s; }", "var": [], "body_in_train": true}, {"repo_owner": "ausbin", "repo_name": "astro", "path": "ausbin/astro/8736752136407eed6e53ed06de3bf69ea17e0c22a96e2996795cb34dc728602c", "path_in_repo": "ausbin/astro/submods/unicorn/qemu/aarch64-softmmu/hw/arm/tosa.o", "objdump": "0000000000000063 <tosa_machine_init_aarch64>:\n  63:\t55                   \tpush   %rbp\n  64:\t48 89 e5             \tmov    %rsp,%rbp\n  67:\t48 83 ec 10          \tsub    $0x10,%rsp\n  6b:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  6f:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 76 <tosa_machine_init_aarch64+0x13>\n  76:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 7d <tosa_machine_init_aarch64+0x1a>\n  7d:\t48 8d 05 7c ff ff ff \tlea    -0x84(%rip),%rax        # 0 <tosa_init_aarch64>\n  84:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 8b <tosa_machine_init_aarch64+0x28>\n  8b:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 95 <tosa_machine_init_aarch64+0x32>\n  92:\t00 00 00 \n  95:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 9f <tosa_machine_init_aarch64+0x3c>\n  9c:\t00 00 00 \n  9f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  a3:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  a8:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # af <tosa_machine_init_aarch64+0x4c>\n  af:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # b6 <tosa_machine_init_aarch64+0x53>\n  b6:\t48 89 c7             \tmov    %rax,%rdi\n  b9:\te8 00 00 00 00       \tcallq  be <tosa_machine_init_aarch64+0x5b>\n  be:\t90                   \tnop\n  bf:\tc9                   \tleaveq \n  c0:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall tosa_machine_init_aarch64(__int64 a1) {\n  qword_E8 = (__int64)String;\n  qword_F0 = (__int64)tosa_init_aarch64;\n  dword_104 = Number;\n  dword_108 = Number;\n  return qemu_register_machine(a1, &tosapda_machine_14837, String, Number L);\n}", "code_t": "void __cdecl tosa_machine_init_aarch64(uc_struct *uc) {\n  tosapda_machine_14837.name = String;\n  tosapda_machine_14837.init = (QEMUMachineInitFunc *)tosa_init_aarch64;\n  tosapda_machine_14837.is_default = Number;\n  tosapda_machine_14837.arch = Number;\n  qemu_register_machine(uc, &tosapda_machine_14837, String, Number L);\n}", "var": [], "body_in_train": false}, {"repo_owner": "afni", "repo_name": "afni", "path": "afni/afni/12f9e4a9d90aa4f3633a7351f4acfc4d9829f9345666ef901b82ad04dd05acd1", "path_in_repo": "afni/afni/src/gifti/gifti_tool", "objdump": "0000000000421875 <nifti_image_load_bricks>:\n  421875:\t55                   \tpush   %rbp\n  421876:\t48 89 e5             \tmov    %rsp,%rbp\n  421879:\t48 83 ec 40          \tsub    $0x40,%rsp\n  42187d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  421881:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  421885:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  421889:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n  42188d:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n  421894:\t00 \n  421895:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  42189c:\t00 \n  42189d:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  4218a2:\t74 07                \tje     4218ab <nifti_image_load_bricks+0x36>\n  4218a4:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n  4218a9:\t75 2b                \tjne    4218d6 <nifti_image_load_bricks+0x61>\n  4218ab:\t48 8b 05 ee d6 03 00 \tmov    0x3d6ee(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  4218b2:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  4218b6:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  4218ba:\tbe 38 28 45 00       \tmov    $0x452838,%esi\n  4218bf:\t48 89 c7             \tmov    %rax,%rdi\n  4218c2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4218c7:\te8 74 0a fe ff       \tcallq  402340 <fprintf@plt>\n  4218cc:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4218d1:\te9 db 01 00 00       \tjmpq   421ab1 <nifti_image_load_bricks+0x23c>\n  4218d6:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  4218db:\t74 37                \tje     421914 <nifti_image_load_bricks+0x9f>\n  4218dd:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  4218e2:\t7f 30                \tjg     421914 <nifti_image_load_bricks+0x9f>\n  4218e4:\t8b 05 76 d6 03 00    \tmov    0x3d676(%rip),%eax        # 45ef60 <g_opts>\n  4218ea:\t83 f8 01             \tcmp    $0x1,%eax\n  4218ed:\t7e 1d                \tjle    42190c <nifti_image_load_bricks+0x97>\n  4218ef:\t48 8b 05 aa d6 03 00 \tmov    0x3d6aa(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  4218f6:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  4218fa:\tbe 68 28 45 00       \tmov    $0x452868,%esi\n  4218ff:\t48 89 c7             \tmov    %rax,%rdi\n  421902:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  421907:\te8 34 0a fe ff       \tcallq  402340 <fprintf@plt>\n  42190c:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n  421913:\t00 \n  421914:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  421919:\t74 30                \tje     42194b <nifti_image_load_bricks+0xd6>\n  42191b:\t8b 05 3f d6 03 00    \tmov    0x3d63f(%rip),%eax        # 45ef60 <g_opts>\n  421921:\t85 c0                \ttest   %eax,%eax\n  421923:\t0f 9f c0             \tsetg   %al\n  421926:\t0f b6 c8             \tmovzbl %al,%ecx\n  421929:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  42192d:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n  421931:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421935:\t48 89 c7             \tmov    %rax,%rdi\n  421938:\te8 74 0d 00 00       \tcallq  4226b1 <valid_nifti_brick_list>\n  42193d:\t85 c0                \ttest   %eax,%eax\n  42193f:\t75 0a                \tjne    42194b <nifti_image_load_bricks+0xd6>\n  421941:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  421946:\te9 66 01 00 00       \tjmpq   421ab1 <nifti_image_load_bricks+0x23c>\n  42194b:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  421950:\t74 26                \tje     421978 <nifti_image_load_bricks+0x103>\n  421952:\t48 8d 4d e8          \tlea    -0x18(%rbp),%rcx\n  421956:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  42195a:\t48 8b 75 c8          \tmov    -0x38(%rbp),%rsi\n  42195e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  421962:\t48 89 c7             \tmov    %rax,%rdi\n  421965:\te8 30 08 00 00       \tcallq  42219a <nifti_copynsort>\n  42196a:\t85 c0                \ttest   %eax,%eax\n  42196c:\t74 0a                \tje     421978 <nifti_image_load_bricks+0x103>\n  42196e:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  421973:\te9 39 01 00 00       \tjmpq   421ab1 <nifti_image_load_bricks+0x23c>\n  421978:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  42197c:\t48 89 c7             \tmov    %rax,%rdi\n  42197f:\te8 83 21 01 00       \tcallq  433b07 <nifti_image_load_prep>\n  421984:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  421988:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  42198c:\t48 85 c0             \ttest   %rax,%rax\n  42198f:\t75 51                \tjne    4219e2 <nifti_image_load_bricks+0x16d>\n  421991:\t8b 05 c9 d5 03 00    \tmov    0x3d5c9(%rip),%eax        # 45ef60 <g_opts>\n  421997:\t85 c0                \ttest   %eax,%eax\n  421999:\t7e 1e                \tjle    4219b9 <nifti_image_load_bricks+0x144>\n  42199b:\t48 8b 05 fe d5 03 00 \tmov    0x3d5fe(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  4219a2:\t48 89 c1             \tmov    %rax,%rcx\n  4219a5:\tba 2d 00 00 00       \tmov    $0x2d,%edx\n  4219aa:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4219af:\tbf b0 28 45 00       \tmov    $0x4528b0,%edi\n  4219b4:\te8 57 0b fe ff       \tcallq  402510 <fwrite@plt>\n  4219b9:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  4219be:\t74 18                \tje     4219d8 <nifti_image_load_bricks+0x163>\n  4219c0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4219c4:\t48 89 c7             \tmov    %rax,%rdi\n  4219c7:\te8 84 06 fe ff       \tcallq  402050 <free@plt>\n  4219cc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4219d0:\t48 89 c7             \tmov    %rax,%rdi\n  4219d3:\te8 78 06 fe ff       \tcallq  402050 <free@plt>\n  4219d8:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4219dd:\te9 cf 00 00 00       \tjmpq   421ab1 <nifti_image_load_bricks+0x23c>\n  4219e2:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  4219e7:\t75 08                \tjne    4219f1 <nifti_image_load_bricks+0x17c>\n  4219e9:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  4219f0:\t00 \n  4219f1:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  4219f5:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  4219f9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4219fd:\t48 89 ce             \tmov    %rcx,%rsi\n  421a00:\t48 89 c7             \tmov    %rax,%rdi\n  421a03:\te8 5d 05 00 00       \tcallq  421f65 <nifti_alloc_NBL_mem>\n  421a08:\t85 c0                \ttest   %eax,%eax\n  421a0a:\t74 32                \tje     421a3e <nifti_image_load_bricks+0x1c9>\n  421a0c:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  421a11:\t74 18                \tje     421a2b <nifti_image_load_bricks+0x1b6>\n  421a13:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  421a17:\t48 89 c7             \tmov    %rax,%rdi\n  421a1a:\te8 31 06 fe ff       \tcallq  402050 <free@plt>\n  421a1f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  421a23:\t48 89 c7             \tmov    %rax,%rdi\n  421a26:\te8 25 06 fe ff       \tcallq  402050 <free@plt>\n  421a2b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  421a2f:\t48 89 c7             \tmov    %rax,%rdi\n  421a32:\te8 51 c2 01 00       \tcallq  43dc88 <Xznzclose>\n  421a37:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  421a3c:\teb 73                \tjmp    421ab1 <nifti_image_load_bricks+0x23c>\n  421a3e:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n  421a42:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  421a46:\t48 8b 75 f0          \tmov    -0x10(%rbp),%rsi\n  421a4a:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  421a4e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  421a52:\t49 89 f8             \tmov    %rdi,%r8\n  421a55:\t48 89 c7             \tmov    %rax,%rdi\n  421a58:\te8 04 01 00 00       \tcallq  421b61 <nifti_load_NBL_bricks>\n  421a5d:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  421a60:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  421a64:\t74 17                \tje     421a7d <nifti_image_load_bricks+0x208>\n  421a66:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  421a6a:\t48 89 c7             \tmov    %rax,%rdi\n  421a6d:\te8 41 00 00 00       \tcallq  421ab3 <nifti_free_NBL>\n  421a72:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  421a76:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  421a7d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  421a81:\t48 85 c0             \ttest   %rax,%rax\n  421a84:\t74 18                \tje     421a9e <nifti_image_load_bricks+0x229>\n  421a86:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  421a8a:\t48 89 c7             \tmov    %rax,%rdi\n  421a8d:\te8 be 05 fe ff       \tcallq  402050 <free@plt>\n  421a92:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  421a96:\t48 89 c7             \tmov    %rax,%rdi\n  421a99:\te8 b2 05 fe ff       \tcallq  402050 <free@plt>\n  421a9e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  421aa2:\t48 89 c7             \tmov    %rax,%rdi\n  421aa5:\te8 de c1 01 00       \tcallq  43dc88 <Xznzclose>\n  421aaa:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  421aae:\t48 8b 00             \tmov    (%rax),%rax\n  421ab1:\tc9                   \tleaveq \n  421ab2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall nifti_image_load_bricks(const void *a1, __int64 a2,\n                                           __int64 a3, __int64 *a4) {\n  __int64 result;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  void *v9;\n  void *ptr;\n  v7 = a2;\n  v6 = a3;\n  ptr = Number L;\n  v9 = Number L;\n  if (a1 && a4) {\n    if (a3 && a2 <= Number) {\n      if (g_opts > Number)\n        fprintf(stderr, String, a2);\n      v6 = Number L;\n    }\n    if (!v6 ||\n        (unsigned int)valid_nifti_brick_list(a1, a2, v6, g_opts > Number)) {\n      if (v6 && (unsigned int)nifti_copynsort(a2, v6, &ptr, &v9)) {\n        result = Number;\n      } else {\n        v8 = nifti_image_load_prep(a1);\n        if (v8) {\n          if (!v6)\n            v7 = Number L;\n          if ((unsigned int)nifti_alloc_NBL_mem(a1, v7, a4)) {\n            if (v6) {\n              free(ptr);\n              free(v9);\n            }\n            Xznzclose(&v8);\n            result = Number;\n          } else {\n            if ((unsigned int)nifti_load_NBL_bricks(a1, ptr, v9, a4, v8)) {\n              nifti_free_NBL(a4);\n              *a4 = Number L;\n            }\n            if (ptr) {\n              free(ptr);\n              free(v9);\n            }\n            Xznzclose(&v8);\n            result = *a4;\n          }\n        } else {\n          if (g_opts > Number)\n            fwrite(String, Number, Number, stderr);\n          if (v6) {\n            free(ptr);\n            free(v9);\n          }\n          result = Number;\n        }\n      }\n    } else {\n      result = Number;\n    }\n  } else {\n    fprintf(stderr, String, a1, a4);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl nifti_image_load_bricks(nifti_image *nim, int64_t nbricks,\n                                    const int64_t *blist,\n                                    nifti_brick_list *NBL) {\n  int64_t v4;\n  const int64_t *blista;\n  int64_t nbricksa;\n  znzFile fp;\n  int64_t *sindex;\n  int64_t *slist;\n  nbricksa = nbricks;\n  blista = blist;\n  slist = Number L;\n  sindex = Number L;\n  if (nim && NBL) {\n    if (blist && nbricks <= Number) {\n      if (g_opts.debug > Number)\n        fprintf(stderr, String, nbricks);\n      blista = Number L;\n    }\n    if (!blista ||\n        valid_nifti_brick_list(nim, nbricks, blista, g_opts.debug > Number)) {\n      if (blista && nifti_copynsort(nbricks, blista, &slist, &sindex)) {\n        LODWORD(v4) = Number;\n      } else {\n        fp = nifti_image_load_prep(nim);\n        if (fp) {\n          if (!blista)\n            nbricksa = Number L;\n          if (nifti_alloc_NBL_mem(nim, nbricksa, NBL)) {\n            if (blista) {\n              free(slist);\n              free(sindex);\n            }\n            Xznzclose(&fp);\n            LODWORD(v4) = Number;\n          } else {\n            if (nifti_load_NBL_bricks(nim, slist, sindex, NBL, fp)) {\n              nifti_free_NBL(NBL);\n              NBL->nbricks = Number L;\n            }\n            if (slist) {\n              free(slist);\n              free(sindex);\n            }\n            Xznzclose(&fp);\n            v4 = NBL->nbricks;\n          }\n        } else {\n          if (g_opts.debug > Number)\n            fwrite(String, Number, Number, stderr);\n          if (blista) {\n            free(slist);\n            free(sindex);\n          }\n          LODWORD(v4) = Number;\n        }\n      }\n    } else {\n      LODWORD(v4) = Number;\n    }\n  } else {\n    fprintf(stderr, String, nim, NBL);\n    LODWORD(v4) = Number;\n  }\n  return v4;\n}", "var": [], "body_in_train": false}, {"repo_owner": "tcdog001", "repo_name": "lsdk_ar9531", "path": "tcdog001/lsdk_ar9531/757b6cf2fc94d0f558218cef36a99f239ba3f7265e4b813643a6f0337f91862f", "path_in_repo": "tcdog001/lsdk_ar9531/apps/athr-hostap/wpa_supplicant/dbus/dbus_new_helpers.o", "objdump": "0000000000000a74 <message_handler>:\n     a74:\t55                   \tpush   %rbp\n     a75:\t48 89 e5             \tmov    %rsp,%rbp\n     a78:\t48 83 ec 50          \tsub    $0x50,%rsp\n     a7c:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     a80:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     a84:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n     a88:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     a8c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     a90:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     a94:\t48 89 c7             \tmov    %rax,%rdi\n     a97:\te8 00 00 00 00       \tcallq  a9c <message_handler+0x28>\n     a9c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     aa0:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     aa4:\t48 89 c7             \tmov    %rax,%rdi\n     aa7:\te8 00 00 00 00       \tcallq  aac <message_handler+0x38>\n     aac:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     ab0:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     ab4:\t48 89 c7             \tmov    %rax,%rdi\n     ab7:\te8 00 00 00 00       \tcallq  abc <message_handler+0x48>\n     abc:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     ac0:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     ac5:\t74 0e                \tje     ad5 <message_handler+0x61>\n     ac7:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n     acc:\t74 07                \tje     ad5 <message_handler+0x61>\n     ace:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n     ad3:\t75 0a                \tjne    adf <message_handler+0x6b>\n     ad5:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     ada:\te9 4d 01 00 00       \tjmpq   c2c <message_handler+0x1b8>\n     adf:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n     ae3:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     ae7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     aeb:\t49 89 c8             \tmov    %rcx,%r8\n     aee:\t48 89 d1             \tmov    %rdx,%rcx\n     af1:\t48 89 c2             \tmov    %rax,%rdx\n     af4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     af9:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     afe:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     b03:\te8 00 00 00 00       \tcallq  b08 <message_handler+0x94>\n     b08:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     b0c:\tba 00 00 00 00       \tmov    $0x0,%edx\n     b11:\tb9 0b 00 00 00       \tmov    $0xb,%ecx\n     b16:\t48 89 d6             \tmov    %rdx,%rsi\n     b19:\t48 89 c7             \tmov    %rax,%rdi\n     b1c:\tf3 a6                \trepz cmpsb %es:(%rdi),%ds:(%rsi)\n     b1e:\t0f 97 c2             \tseta   %dl\n     b21:\t0f 92 c0             \tsetb   %al\n     b24:\t29 c2                \tsub    %eax,%edx\n     b26:\t89 d0                \tmov    %edx,%eax\n     b28:\t0f be c0             \tmovsbl %al,%eax\n     b2b:\t85 c0                \ttest   %eax,%eax\n     b2d:\t75 43                \tjne    b72 <message_handler+0xfe>\n     b2f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b33:\tba 00 00 00 00       \tmov    $0x0,%edx\n     b38:\tb9 24 00 00 00       \tmov    $0x24,%ecx\n     b3d:\t48 89 d6             \tmov    %rdx,%rsi\n     b40:\t48 89 c7             \tmov    %rax,%rdi\n     b43:\tf3 a6                \trepz cmpsb %es:(%rdi),%ds:(%rsi)\n     b45:\t0f 97 c2             \tseta   %dl\n     b48:\t0f 92 c0             \tsetb   %al\n     b4b:\t29 c2                \tsub    %eax,%edx\n     b4d:\t89 d0                \tmov    %edx,%eax\n     b4f:\t0f be c0             \tmovsbl %al,%eax\n     b52:\t85 c0                \ttest   %eax,%eax\n     b54:\t75 1c                \tjne    b72 <message_handler+0xfe>\n     b56:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     b5a:\tba 00 00 00 00       \tmov    $0x0,%edx\n     b5f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b64:\t48 89 c7             \tmov    %rax,%rdi\n     b67:\te8 00 00 00 00       \tcallq  b6c <message_handler+0xf8>\n     b6c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     b70:\teb 57                \tjmp    bc9 <message_handler+0x155>\n     b72:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     b76:\tba 00 00 00 00       \tmov    $0x0,%edx\n     b7b:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n     b80:\t48 89 d6             \tmov    %rdx,%rsi\n     b83:\t48 89 c7             \tmov    %rax,%rdi\n     b86:\tf3 a6                \trepz cmpsb %es:(%rdi),%ds:(%rsi)\n     b88:\t0f 97 c2             \tseta   %dl\n     b8b:\t0f 92 c0             \tsetb   %al\n     b8e:\t29 c2                \tsub    %eax,%edx\n     b90:\t89 d0                \tmov    %edx,%eax\n     b92:\t0f be c0             \tmovsbl %al,%eax\n     b95:\t85 c0                \ttest   %eax,%eax\n     b97:\t75 19                \tjne    bb2 <message_handler+0x13e>\n     b99:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     b9d:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     ba1:\t48 89 d6             \tmov    %rdx,%rsi\n     ba4:\t48 89 c7             \tmov    %rax,%rdi\n     ba7:\te8 27 fc ff ff       \tcallq  7d3 <properties_handler>\n     bac:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     bb0:\teb 17                \tjmp    bc9 <message_handler+0x155>\n     bb2:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n     bb6:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     bba:\t48 89 d6             \tmov    %rdx,%rsi\n     bbd:\t48 89 c7             \tmov    %rax,%rdi\n     bc0:\te8 6b fd ff ff       \tcallq  930 <msg_method_handler>\n     bc5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     bc9:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     bce:\t75 10                \tjne    be0 <message_handler+0x16c>\n     bd0:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     bd4:\t48 89 c7             \tmov    %rax,%rdi\n     bd7:\te8 00 00 00 00       \tcallq  bdc <message_handler+0x168>\n     bdc:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     be0:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     be5:\t74 34                \tje     c1b <message_handler+0x1a7>\n     be7:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     beb:\t48 89 c7             \tmov    %rax,%rdi\n     bee:\te8 00 00 00 00       \tcallq  bf3 <message_handler+0x17f>\n     bf3:\t85 c0                \ttest   %eax,%eax\n     bf5:\t75 18                \tjne    c0f <message_handler+0x19b>\n     bf7:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     bfb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     bff:\tba 00 00 00 00       \tmov    $0x0,%edx\n     c04:\t48 89 ce             \tmov    %rcx,%rsi\n     c07:\t48 89 c7             \tmov    %rax,%rdi\n     c0a:\te8 00 00 00 00       \tcallq  c0f <message_handler+0x19b>\n     c0f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     c13:\t48 89 c7             \tmov    %rax,%rdi\n     c16:\te8 00 00 00 00       \tcallq  c1b <message_handler+0x1a7>\n     c1b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     c1f:\t48 89 c7             \tmov    %rax,%rdi\n     c22:\te8 00 00 00 00       \tcallq  c27 <message_handler+0x1b3>\n     c27:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     c2c:\tc9                   \tleaveq \n     c2d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall message_handler(__int64 a1, __int64 a2, __int64 a3) {\n  const char *v4;\n  const char *v5;\n  const char *v6;\n  __int64 v8;\n  v6 = (const char *)dbus_message_get_member(a2);\n  v5 = (const char *)dbus_message_get_path(a2);\n  v4 = (const char *)dbus_message_get_interface(a2);\n  if (!v6 || !v5 || !v4)\n    return Number L;\n  wpa_printf(Number L, String, v4, v6, v5);\n  if (!strcmp(String, v6) && !strcmp(String, v4)) {\n    v8 = dbus_message_new_error(a2, String, String);\n  } else if (!strcmp(String, v4)) {\n    v8 = properties_handler(a2, a3);\n  } else {\n    v8 = msg_method_handler(a2, a3);\n  }\n  if (!v8)\n    v8 = dbus_message_new_method_return(a2);\n  if (v8) {\n    if (!(unsigned int)dbus_message_get_no_reply(a2))\n      dbus_connection_send(a1, v8, Number L);\n    dbus_message_unref(v8);\n  }\n  wpa_dbus_flush_all_changed_properties(a1);\n  return Number L;\n}", "code_t": "DBusHandlerResult __cdecl message_handler(DBusConnection_0 *connection,\n                                          DBusMessage_0 *message,\n                                          void *user_data) {\n  const char *msg_interface;\n  const char *path;\n  const char *method;\n  DBusMessage_0 *reply;\n  method = (const char *)dbus_message_get_member(message);\n  path = (const char *)dbus_message_get_path(message);\n  msg_interface = (const char *)dbus_message_get_interface(message);\n  if (!method || !path || !msg_interface)\n    return Number;\n  wpa_printf(Number L, String, msg_interface, method, path);\n  if (!strcmp(String, method) && !strcmp(String, msg_interface)) {\n    reply = (DBusMessage_0 *)dbus_message_new_error(message, String, String);\n  } else if (!strcmp(String, msg_interface)) {\n    reply = properties_handler(message, (wpa_dbus_object_desc *)user_data);\n  } else {\n    reply = msg_method_handler(message, (wpa_dbus_object_desc *)user_data);\n  }\n  if (!reply)\n    reply = (DBusMessage_0 *)dbus_message_new_method_return(message);\n  if (reply) {\n    if (!(unsigned int)dbus_message_get_no_reply(message))\n      dbus_connection_send(connection, reply, Number L);\n    dbus_message_unref(reply);\n  }\n  wpa_dbus_flush_all_changed_properties(connection);\n  return Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/5fae17a50187af69e9ae7e5262fbc52b74d2aaec1d57bb3ced44e47274d2abe6", "path_in_repo": "XanClic/qemu//sparc-softmmu/migration/ram.o", "objdump": "0000000000008398 <ram_postcopy_migrated_memory_release>:\n    8398:\t55                   \tpush   %rbp\n    8399:\t48 89 e5             \tmov    %rsp,%rbp\n    839c:\t48 83 ec 50          \tsub    $0x50,%rsp\n    83a0:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    83a4:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    83ab:\t00 00 \n    83ad:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    83b1:\t31 c0                \txor    %eax,%eax\n    83b3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 83ba <ram_postcopy_migrated_memory_release+0x22>\n    83ba:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    83be:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    83c2:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    83c6:\te9 df 00 00 00       \tjmpq   84aa <ram_postcopy_migrated_memory_release+0x112>\n    83cb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    83cf:\t48 89 c7             \tmov    %rax,%rdi\n    83d2:\te8 64 aa ff ff       \tcallq  2e3b <ramblock_is_ignored>\n    83d7:\t84 c0                \ttest   %al,%al\n    83d9:\t0f 85 b2 00 00 00    \tjne    8491 <ram_postcopy_migrated_memory_release+0xf9>\n    83df:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    83e3:\t48 8b 80 78 01 00 00 \tmov    0x178(%rax),%rax\n    83ea:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    83ee:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    83f2:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    83f6:\t48 c1 e8 0c          \tshr    $0xc,%rax\n    83fa:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    83fe:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    8402:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8406:\tba 00 00 00 00       \tmov    $0x0,%edx\n    840b:\t48 89 ce             \tmov    %rcx,%rsi\n    840e:\t48 89 c7             \tmov    %rax,%rdi\n    8411:\te8 00 00 00 00       \tcallq  8416 <ram_postcopy_migrated_memory_release+0x7e>\n    8416:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    841a:\teb 6b                \tjmp    8487 <ram_postcopy_migrated_memory_release+0xef>\n    841c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    8420:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    8424:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    8428:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    842c:\t48 89 ce             \tmov    %rcx,%rsi\n    842f:\t48 89 c7             \tmov    %rax,%rdi\n    8432:\te8 00 00 00 00       \tcallq  8437 <ram_postcopy_migrated_memory_release+0x9f>\n    8437:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    843b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    843f:\t48 2b 45 d8          \tsub    -0x28(%rbp),%rax\n    8443:\t48 c1 e0 0c          \tshl    $0xc,%rax\n    8447:\t48 89 c2             \tmov    %rax,%rdx\n    844a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    844e:\t48 c1 e0 0c          \tshl    $0xc,%rax\n    8452:\t48 89 c1             \tmov    %rax,%rcx\n    8455:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    8459:\t48 83 c0 4c          \tadd    $0x4c,%rax\n    845d:\t48 89 ce             \tmov    %rcx,%rsi\n    8460:\t48 89 c7             \tmov    %rax,%rdi\n    8463:\te8 00 00 00 00       \tcallq  8468 <ram_postcopy_migrated_memory_release+0xd0>\n    8468:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    846c:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    8470:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    8474:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    8478:\t48 89 ce             \tmov    %rcx,%rsi\n    847b:\t48 89 c7             \tmov    %rax,%rdi\n    847e:\te8 00 00 00 00       \tcallq  8483 <ram_postcopy_migrated_memory_release+0xeb>\n    8483:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    8487:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    848b:\t48 3b 45 e8          \tcmp    -0x18(%rbp),%rax\n    848f:\t72 8b                \tjb     841c <ram_postcopy_migrated_memory_release+0x84>\n    8491:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    8495:\t48 05 50 01 00 00    \tadd    $0x150,%rax\n    849b:\t48 8b 00             \tmov    (%rax),%rax\n    849e:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    84a2:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    84a6:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    84aa:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n    84af:\t0f 85 16 ff ff ff    \tjne    83cb <ram_postcopy_migrated_memory_release+0x33>\n    84b5:\t90                   \tnop\n    84b6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    84ba:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    84c1:\t00 00 \n    84c3:\t74 05                \tje     84ca <ram_postcopy_migrated_memory_release+0x132>\n    84c5:\te8 00 00 00 00       \tcallq  84ca <ram_postcopy_migrated_memory_release+0x132>\n    84ca:\tc9                   \tleaveq \n    84cb:\tc3                   \tretq   ", "code_s": "unsigned __int64 ram_postcopy_migrated_memory_release() {\n  _QWORD *i;\n  unsigned __int64 j;\n  __int64 v3;\n  unsigned __int64 v4;\n  __int64 v5;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  for (i = (_QWORD *)ram_list[Number]; i; i = (_QWORD *)i[Number]) {\n    if (!ramblock_is_ignored((__int64)i)) {\n      v3 = i[Number];\n      v4 = i[Number] >> Number;\n      for (j = find_next_zero_bit(v3, v4, Number L); j < v4;\n           j = find_next_zero_bit(v3, v4, v5 + Number)) {\n        v5 = find_next_bit(v3, v4, j + Number);\n        ram_discard_range((char *)i + Number, j << Number, (v5 - j) << Number);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl ram_postcopy_migrated_memory_release(MigrationState_0 *ms) {\n  RAMBlock *block;\n  unsigned __int64 run_start;\n  unsigned __int64 *bitmap;\n  unsigned __int64 range;\n  unsigned __int64 run_end;\n  for (block = (RAMBlock *)ram_list[Number]; block;\n       block = block->next.le_next) {\n    if (!ramblock_is_ignored(block)) {\n      bitmap = block->bmap;\n      range = block->used_length >> Number;\n      for (run_start = find_next_zero_bit(bitmap, range, Number L);\n           run_start < range;\n           run_start = find_next_zero_bit(bitmap, range, run_end + Number)) {\n        run_end = find_next_bit(bitmap, range, run_start + Number);\n        ram_discard_range(block->idstr, run_start << Number,\n                          (run_end - run_start) << Number);\n      }\n    }\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "rockchip-toybrick", "repo_name": "external-wpa_supplicant_8", "path": "rockchip-toybrick/external-wpa_supplicant_8/6c2672fab34303e61c1d7e93a0407c1791fe28b43ea8f5250feccdda94afd81e", "path_in_repo": "rockchip-toybrick/external-wpa_supplicant_8/hostapd/hostapd", "objdump": "0000000000434b5b <wpa_get_ntp_timestamp>:\n  434b5b:\t55                   \tpush   %rbp\n  434b5c:\t48 89 e5             \tmov    %rsp,%rbp\n  434b5f:\t48 83 ec 40          \tsub    $0x40,%rsp\n  434b63:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  434b67:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  434b6b:\t48 89 c7             \tmov    %rax,%rdi\n  434b6e:\te8 ea 36 00 00       \tcallq  43825d <os_get_time>\n  434b73:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  434b77:\t2d 80 81 55 7c       \tsub    $0x7c558180,%eax\n  434b7c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  434b7f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  434b83:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  434b86:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  434b89:\t69 c0 c7 10 00 00    \timul   $0x10c7,%eax,%eax\n  434b8f:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  434b92:\tc1 ea 05             \tshr    $0x5,%edx\n  434b95:\t29 d0                \tsub    %edx,%eax\n  434b97:\t89 c2                \tmov    %eax,%edx\n  434b99:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  434b9c:\tc1 e8 09             \tshr    $0x9,%eax\n  434b9f:\t29 c2                \tsub    %eax,%edx\n  434ba1:\t89 d0                \tmov    %edx,%eax\n  434ba3:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  434ba6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  434ba9:\t89 c7                \tmov    %eax,%edi\n  434bab:\te8 a9 f8 ff ff       \tcallq  434459 <__bswap_32>\n  434bb0:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  434bb3:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n  434bb6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  434bba:\t89 10                \tmov    %edx,(%rax)\n  434bbc:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  434bbf:\t89 c7                \tmov    %eax,%edi\n  434bc1:\te8 93 f8 ff ff       \tcallq  434459 <__bswap_32>\n  434bc6:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  434bc9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  434bcd:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n  434bd1:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  434bd4:\t89 02                \tmov    %eax,(%rdx)\n  434bd6:\t90                   \tnop\n  434bd7:\tc9                   \tleaveq \n  434bd8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall wpa_get_ntp_timestamp(_DWORD *a1) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 v3;\n  unsigned int v4;\n  int v5;\n  os_get_time(&<span class=\"supfact\">v2</span>);\n  v5 = <span class=\"supfact\">v2</span> - Number;\n  v4 =\n      Number * v3 - ((unsigned int)v3 >> Number) - ((unsigned int)v3 >> Number);\n  *a1 = _bswap_32((int)<span class=\"supfact\">v2</span> - Number);\n  result = (unsigned int)_bswap_32(v4);\n  a1[Number] = result;\n  return result;\n}", "code_t": "void __cdecl wpa_get_ntp_timestamp(u8 *buf) {\n  os_time <span class=\"supfact\">now</span>;\n  u32 usec;\n  u32 sec;\n  os_get_time(&<span class=\"supfact\">now</span>);\n  sec = LODWORD(<span class=\"supfact\">now</span>.sec) - Number;\n  usec = Number * LODWORD(<span class=\"supfact\">now</span>.usec) -\n         (LODWORD(<span class=\"supfact\">now</span>.usec) >> Number) -\n         (LODWORD(<span class=\"supfact\">now</span>.usec) >> Number);\n  *(_DWORD *)buf = _bswap_32(LODWORD(<span class=\"supfact\">now</span>.sec) - Number);\n  *((_DWORD *)buf + Number) = _bswap_32(usec);\n}", "var": [{"name": "v2", "type": "struct os_time { os_time_t sec; os_time_t usec; }", "pred_name": "now", "ref_name": "now", "ref_type": "struct os_time { os_time_t sec; os_time_t usec; }"}], "body_in_train": true}, {"repo_owner": "realraum", "repo_name": "rf433rcv", "path": "realraum/rf433rcv/0fbddb85f1b9b6df915201c74f4c50eaa0e14514b428c21c4f8cb66fb9f94e5f", "path_in_repo": "realraum/rf433rcv/pc/uncompress", "objdump": "0000000000401250 <__libc_csu_init>:\n  401250:\t41 57                \tpush   %r15\n  401252:\t49 89 d7             \tmov    %rdx,%r15\n  401255:\t41 56                \tpush   %r14\n  401257:\t49 89 f6             \tmov    %rsi,%r14\n  40125a:\t41 55                \tpush   %r13\n  40125c:\t41 89 fd             \tmov    %edi,%r13d\n  40125f:\t41 54                \tpush   %r12\n  401261:\t4c 8d 25 98 2b 00 00 \tlea    0x2b98(%rip),%r12        # 403e00 <__frame_dummy_init_array_entry>\n  401268:\t55                   \tpush   %rbp\n  401269:\t48 8d 2d 98 2b 00 00 \tlea    0x2b98(%rip),%rbp        # 403e08 <__do_global_dtors_aux_fini_array_entry>\n  401270:\t53                   \tpush   %rbx\n  401271:\t4c 29 e5             \tsub    %r12,%rbp\n  401274:\t48 83 ec 08          \tsub    $0x8,%rsp\n  401278:\te8 83 fd ff ff       \tcallq  401000 <_init>\n  40127d:\t48 c1 fd 03          \tsar    $0x3,%rbp\n  401281:\t74 1b                \tje     40129e <__libc_csu_init+0x4e>\n  401283:\t31 db                \txor    %ebx,%ebx\n  401285:\t0f 1f 00             \tnopl   (%rax)\n  401288:\t4c 89 fa             \tmov    %r15,%rdx\n  40128b:\t4c 89 f6             \tmov    %r14,%rsi\n  40128e:\t44 89 ef             \tmov    %r13d,%edi\n  401291:\t41 ff 14 dc          \tcallq  *(%r12,%rbx,8)\n  401295:\t48 83 c3 01          \tadd    $0x1,%rbx\n  401299:\t48 39 dd             \tcmp    %rbx,%rbp\n  40129c:\t75 ea                \tjne    401288 <__libc_csu_init+0x38>\n  40129e:\t48 83 c4 08          \tadd    $0x8,%rsp\n  4012a2:\t5b                   \tpop    %rbx\n  4012a3:\t5d                   \tpop    %rbp\n  4012a4:\t41 5c                \tpop    %r12\n  4012a6:\t41 5d                \tpop    %r13\n  4012a8:\t41 5e                \tpop    %r14\n  4012aa:\t41 5f                \tpop    %r15\n  4012ac:\tc3                   \tretq   \n  4012ad:\t0f 1f 00             \tnopl   (%rax)", "code_s": "void __fastcall _libc_csu_init(unsigned int a1, __int64 a2, __int64 a3) {\n  signed __int64 v4;\n  __int64 i;\n  init_proc();\n  v4 = &_do_global_dtors_aux_fini_array_entry - &_frame_dummy_init_array_entry;\n  if (v4) {\n    for (i = Number L; i != v4; ++i)\n      ((void(__fastcall *)(_QWORD, __int64, __int64)) *\n       (&_frame_dummy_init_array_entry + i))(a1, a2, a3);\n  }\n}", "code_t": "void __fastcall _libc_csu_init(unsigned int a1, __int64 a2, __int64 a3) {\n  signed __int64 v4;\n  __int64 i;\n  init_proc();\n  v4 = &_do_global_dtors_aux_fini_array_entry - &_frame_dummy_init_array_entry;\n  if (v4) {\n    for (i = Number L; i != v4; ++i)\n      ((void(__fastcall *)(_QWORD, __int64, __int64)) *\n       (&_frame_dummy_init_array_entry + i))(a1, a2, a3);\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "himyxia", "repo_name": "c", "path": "himyxia/c/3824e960e5a413f67b7139f19f35385c9065ddf7acc57ab0f0b7e247b3d86968", "path_in_repo": "himyxia/c/network/unpv13e/names/daytimetcpcli1", "objdump": "00000000004030b0 <Inet6_rth_space>:\n  4030b0:\t53                   \tpush   %rbx\n  4030b1:\t31 c0                \txor    %eax,%eax\n  4030b3:\te8 88 f0 ff ff       \tcallq  402140 <inet6_rth_space@plt>\n  4030b8:\t85 c0                \ttest   %eax,%eax\n  4030ba:\t89 c3                \tmov    %eax,%ebx\n  4030bc:\t78 0a                \tjs     4030c8 <Inet6_rth_space+0x18>\n  4030be:\t89 d8                \tmov    %ebx,%eax\n  4030c0:\t5b                   \tpop    %rbx\n  4030c1:\tc3                   \tretq   \n  4030c2:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n  4030c8:\t31 c0                \txor    %eax,%eax\n  4030ca:\tbf 3b 41 40 00       \tmov    $0x40413b,%edi\n  4030cf:\te8 ac fb ff ff       \tcallq  402c80 <err_quit>\n  4030d4:\t89 d8                \tmov    %ebx,%eax\n  4030d6:\t5b                   \tpop    %rbx\n  4030d7:\tc3                   \tretq   \n  4030d8:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n  4030df:\t00 ", "code_s": "__int64 __fastcall Inet6_rth_space(int a1, int a2) {\n  signed int v2;\n  v2 = inet6_rth_space(a1, a2);\n  if (v2 < Number)\n    err_quit();\n  return (unsigned int)v2;\n}", "code_t": "int __fastcall Inet6_rth_space(int type, int segments) {\n  int v2;\n  v2 = inet6_rth_space(type, segments);\n  if (v2 < Number)\n    err_quit(String);\n  return v2;\n}", "var": [], "body_in_train": true}, {"repo_owner": "Team-OctOS-Devices", "repo_name": "kraken_kernel_samsung_jf", "path": "Team-OctOS-Devices/kraken_kernel_samsung_jf/3fd6564412d17b71e515e24bf1af93bfc02761b40592a2fc7d23b65427e2d182", "path_in_repo": "Team-OctOS-Devices/kraken_kernel_samsung_jf/tools/perf/util/trace-event-parse.o", "objdump": "00000000000058a9 <free_args>:\n    58a9:\t55                   \tpush   %rbp\n    58aa:\t48 89 e5             \tmov    %rsp,%rbp\n    58ad:\t48 83 ec 20          \tsub    $0x20,%rsp\n    58b1:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    58b5:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    58bc:\t00 00 \n    58be:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    58c2:\t31 c0                \txor    %eax,%eax\n    58c4:\teb 4d                \tjmp    5913 <free_args+0x6a>\n    58c6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    58ca:\t48 8b 00             \tmov    (%rax),%rax\n    58cd:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    58d1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    58d5:\t8b 40 08             \tmov    0x8(%rax),%eax\n    58d8:\t83 f8 01             \tcmp    $0x1,%eax\n    58db:\t75 12                \tjne    58ef <free_args+0x46>\n    58dd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    58e1:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    58e5:\t48 89 c7             \tmov    %rax,%rdi\n    58e8:\te8 00 00 00 00       \tcallq  58ed <free_args+0x44>\n    58ed:\teb 10                \tjmp    58ff <free_args+0x56>\n    58ef:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    58f3:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    58f7:\t48 89 c7             \tmov    %rax,%rdi\n    58fa:\te8 00 00 00 00       \tcallq  58ff <free_args+0x56>\n    58ff:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5903:\t48 89 c7             \tmov    %rax,%rdi\n    5906:\te8 00 00 00 00       \tcallq  590b <free_args+0x62>\n    590b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    590f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    5913:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    5918:\t75 ac                \tjne    58c6 <free_args+0x1d>\n    591a:\t90                   \tnop\n    591b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    591f:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    5926:\t00 00 \n    5928:\t74 05                \tje     592f <free_args+0x86>\n    592a:\te8 00 00 00 00       \tcallq  592f <free_args+0x86>\n    592f:\tc9                   \tleaveq \n    5930:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall free_args(void **a1) {\n  void **v3;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  while (a1) {\n    v3 = (void **)*a1;\n    free(a1[Number]);\n    free(a1);\n    a1 = v3;\n  }\n  return __readfsqword(Number) ^ v4;\n}", "code_t": "void __cdecl free_args(print_arg *args) {\n  print_arg *next;\n  while (args) {\n    next = args->next;\n    free(args->_anon_0.atom.atom);\n    free(args);\n    args = next;\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "xorgy", "repo_name": "graphicsmagick", "path": "xorgy/graphicsmagick/47393fe6465ed89af39307e89df5eca47f26a2a127fda5f01818d178760cf17a", "path_in_repo": "xorgy/graphicsmagick/bzlib/bzip2", "objdump": "0000000000402af5 <compress>:\n  402af5:\t55                   \tpush   %rbp\n  402af6:\t48 89 e5             \tmov    %rsp,%rbp\n  402af9:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n  402b00:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n  402b07:\tc6 05 de d4 01 00 00 \tmovb   $0x0,0x1d4de(%rip)        # 41ffec <deleteOutputOnInterrupt>\n  402b0e:\t48 83 bd 48 ff ff ff \tcmpq   $0x0,-0xb8(%rbp)\n  402b15:\t00 \n  402b16:\t75 15                \tjne    402b2d <compress+0x38>\n  402b18:\t8b 05 8a cc 01 00    \tmov    0x1cc8a(%rip),%eax        # 41f7a8 <srcMode>\n  402b1e:\t83 f8 01             \tcmp    $0x1,%eax\n  402b21:\t74 0a                \tje     402b2d <compress+0x38>\n  402b23:\tbf 6d 9f 41 00       \tmov    $0x419f6d,%edi\n  402b28:\te8 a4 f9 ff ff       \tcallq  4024d1 <panic>\n  402b2d:\t8b 05 75 cc 01 00    \tmov    0x1cc75(%rip),%eax        # 41f7a8 <srcMode>\n  402b33:\t83 f8 03             \tcmp    $0x3,%eax\n  402b36:\t74 3f                \tje     402b77 <compress+0x82>\n  402b38:\t83 f8 03             \tcmp    $0x3,%eax\n  402b3b:\t0f 8f b7 00 00 00    \tjg     402bf8 <compress+0x103>\n  402b41:\t83 f8 01             \tcmp    $0x1,%eax\n  402b44:\t74 0e                \tje     402b54 <compress+0x5f>\n  402b46:\t83 f8 02             \tcmp    $0x2,%eax\n  402b49:\t0f 84 85 00 00 00    \tje     402bd4 <compress+0xdf>\n  402b4f:\te9 a4 00 00 00       \tjmpq   402bf8 <compress+0x103>\n  402b54:\tbe 82 9f 41 00       \tmov    $0x419f82,%esi\n  402b59:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402b5e:\te8 06 fc ff ff       \tcallq  402769 <copyFileName>\n  402b63:\tbe 8a 9f 41 00       \tmov    $0x419f8a,%esi\n  402b68:\tbf c0 f7 41 00       \tmov    $0x41f7c0,%edi\n  402b6d:\te8 f7 fb ff ff       \tcallq  402769 <copyFileName>\n  402b72:\te9 81 00 00 00       \tjmpq   402bf8 <compress+0x103>\n  402b77:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  402b7e:\t48 89 c6             \tmov    %rax,%rsi\n  402b81:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402b86:\te8 de fb ff ff       \tcallq  402769 <copyFileName>\n  402b8b:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  402b92:\t48 89 c6             \tmov    %rax,%rsi\n  402b95:\tbf c0 f7 41 00       \tmov    $0x41f7c0,%edi\n  402b9a:\te8 ca fb ff ff       \tcallq  402769 <copyFileName>\n  402b9f:\tb8 c0 f7 41 00       \tmov    $0x41f7c0,%eax\n  402ba4:\t48 c7 c1 ff ff ff ff \tmov    $0xffffffffffffffff,%rcx\n  402bab:\t48 89 c2             \tmov    %rax,%rdx\n  402bae:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402bb3:\t48 89 d7             \tmov    %rdx,%rdi\n  402bb6:\tf2 ae                \trepnz scas %es:(%rdi),%al\n  402bb8:\t48 89 c8             \tmov    %rcx,%rax\n  402bbb:\t48 f7 d0             \tnot    %rax\n  402bbe:\t48 83 e8 01          \tsub    $0x1,%rax\n  402bc2:\t48 05 c0 f7 41 00    \tadd    $0x41f7c0,%rax\n  402bc8:\tc7 00 2e 62 7a 32    \tmovl   $0x327a622e,(%rax)\n  402bce:\tc6 40 04 00          \tmovb   $0x0,0x4(%rax)\n  402bd2:\teb 24                \tjmp    402bf8 <compress+0x103>\n  402bd4:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n  402bdb:\t48 89 c6             \tmov    %rax,%rsi\n  402bde:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402be3:\te8 81 fb ff ff       \tcallq  402769 <copyFileName>\n  402be8:\tbe 8a 9f 41 00       \tmov    $0x419f8a,%esi\n  402bed:\tbf c0 f7 41 00       \tmov    $0x41f7c0,%edi\n  402bf2:\te8 72 fb ff ff       \tcallq  402769 <copyFileName>\n  402bf7:\t90                   \tnop\n  402bf8:\t8b 05 aa cb 01 00    \tmov    0x1cbaa(%rip),%eax        # 41f7a8 <srcMode>\n  402bfe:\t83 f8 01             \tcmp    $0x1,%eax\n  402c01:\t74 4d                \tje     402c50 <compress+0x15b>\n  402c03:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402c08:\te8 e9 fd ff ff       \tcallq  4029f6 <containsDubiousChars>\n  402c0d:\t84 c0                \ttest   %al,%al\n  402c0f:\t74 3f                \tje     402c50 <compress+0x15b>\n  402c11:\t0f b6 05 a0 cb 01 00 \tmovzbl 0x1cba0(%rip),%eax        # 41f7b8 <noisy>\n  402c18:\t84 c0                \ttest   %al,%al\n  402c1a:\t74 25                \tje     402c41 <compress+0x14c>\n  402c1c:\t48 8b 15 d5 d3 01 00 \tmov    0x1d3d5(%rip),%rdx        # 41fff8 <progName>\n  402c23:\t48 8b 05 76 c2 01 00 \tmov    0x1c276(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  402c2a:\tb9 e0 fb 41 00       \tmov    $0x41fbe0,%ecx\n  402c2f:\tbe 98 9f 41 00       \tmov    $0x419f98,%esi\n  402c34:\t48 89 c7             \tmov    %rax,%rdi\n  402c37:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402c3c:\te8 2f e5 ff ff       \tcallq  401170 <fprintf@plt>\n  402c41:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402c46:\te8 16 f6 ff ff       \tcallq  402261 <setExit>\n  402c4b:\te9 00 06 00 00       \tjmpq   403250 <compress+0x75b>\n  402c50:\t8b 05 52 cb 01 00    \tmov    0x1cb52(%rip),%eax        # 41f7a8 <srcMode>\n  402c56:\t83 f8 01             \tcmp    $0x1,%eax\n  402c59:\t74 56                \tje     402cb1 <compress+0x1bc>\n  402c5b:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402c60:\te8 89 fb ff ff       \tcallq  4027ee <fileExists>\n  402c65:\t84 c0                \ttest   %al,%al\n  402c67:\t75 48                \tjne    402cb1 <compress+0x1bc>\n  402c69:\te8 f2 e3 ff ff       \tcallq  401060 <__errno_location@plt>\n  402c6e:\t8b 00                \tmov    (%rax),%eax\n  402c70:\t89 c7                \tmov    %eax,%edi\n  402c72:\te8 e9 e5 ff ff       \tcallq  401260 <strerror@plt>\n  402c77:\t48 89 c1             \tmov    %rax,%rcx\n  402c7a:\t48 8b 15 77 d3 01 00 \tmov    0x1d377(%rip),%rdx        # 41fff8 <progName>\n  402c81:\t48 8b 05 18 c2 01 00 \tmov    0x1c218(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  402c88:\t49 89 c8             \tmov    %rcx,%r8\n  402c8b:\tb9 e0 fb 41 00       \tmov    $0x41fbe0,%ecx\n  402c90:\tbe c0 9f 41 00       \tmov    $0x419fc0,%esi\n  402c95:\t48 89 c7             \tmov    %rax,%rdi\n  402c98:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402c9d:\te8 ce e4 ff ff       \tcallq  401170 <fprintf@plt>\n  402ca2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402ca7:\te8 b5 f5 ff ff       \tcallq  402261 <setExit>\n  402cac:\te9 9f 05 00 00       \tjmpq   403250 <compress+0x75b>\n  402cb1:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  402cb8:\teb 71                \tjmp    402d2b <compress+0x236>\n  402cba:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  402cbd:\t48 98                \tcltq   \n  402cbf:\t48 8b 04 c5 80 e1 41 \tmov    0x41e180(,%rax,8),%rax\n  402cc6:\t00 \n  402cc7:\t48 89 c6             \tmov    %rax,%rsi\n  402cca:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402ccf:\te8 31 fd ff ff       \tcallq  402a05 <hasSuffix>\n  402cd4:\t84 c0                \ttest   %al,%al\n  402cd6:\t74 4f                \tje     402d27 <compress+0x232>\n  402cd8:\t0f b6 05 d9 ca 01 00 \tmovzbl 0x1cad9(%rip),%eax        # 41f7b8 <noisy>\n  402cdf:\t84 c0                \ttest   %al,%al\n  402ce1:\t74 35                \tje     402d18 <compress+0x223>\n  402ce3:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  402ce6:\t48 98                \tcltq   \n  402ce8:\t48 8b 0c c5 80 e1 41 \tmov    0x41e180(,%rax,8),%rcx\n  402cef:\t00 \n  402cf0:\t48 8b 15 01 d3 01 00 \tmov    0x1d301(%rip),%rdx        # 41fff8 <progName>\n  402cf7:\t48 8b 05 a2 c1 01 00 \tmov    0x1c1a2(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  402cfe:\t49 89 c8             \tmov    %rcx,%r8\n  402d01:\tb9 e0 fb 41 00       \tmov    $0x41fbe0,%ecx\n  402d06:\tbe e8 9f 41 00       \tmov    $0x419fe8,%esi\n  402d0b:\t48 89 c7             \tmov    %rax,%rdi\n  402d0e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402d13:\te8 58 e4 ff ff       \tcallq  401170 <fprintf@plt>\n  402d18:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402d1d:\te8 3f f5 ff ff       \tcallq  402261 <setExit>\n  402d22:\te9 29 05 00 00       \tjmpq   403250 <compress+0x75b>\n  402d27:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  402d2b:\t83 7d ec 03          \tcmpl   $0x3,-0x14(%rbp)\n  402d2f:\t7e 89                \tjle    402cba <compress+0x1c5>\n  402d31:\t8b 05 71 ca 01 00    \tmov    0x1ca71(%rip),%eax        # 41f7a8 <srcMode>\n  402d37:\t83 f8 03             \tcmp    $0x3,%eax\n  402d3a:\t74 0b                \tje     402d47 <compress+0x252>\n  402d3c:\t8b 05 66 ca 01 00    \tmov    0x1ca66(%rip),%eax        # 41f7a8 <srcMode>\n  402d42:\t83 f8 02             \tcmp    $0x2,%eax\n  402d45:\t75 5a                \tjne    402da1 <compress+0x2ac>\n  402d47:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n  402d4e:\t48 89 c6             \tmov    %rax,%rsi\n  402d51:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402d56:\te8 45 55 01 00       \tcallq  4182a0 <stat64>\n  402d5b:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n  402d61:\t25 00 f0 00 00       \tand    $0xf000,%eax\n  402d66:\t3d 00 40 00 00       \tcmp    $0x4000,%eax\n  402d6b:\t75 34                \tjne    402da1 <compress+0x2ac>\n  402d6d:\t48 8b 15 84 d2 01 00 \tmov    0x1d284(%rip),%rdx        # 41fff8 <progName>\n  402d74:\t48 8b 05 25 c1 01 00 \tmov    0x1c125(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  402d7b:\tb9 e0 fb 41 00       \tmov    $0x41fbe0,%ecx\n  402d80:\tbe 18 a0 41 00       \tmov    $0x41a018,%esi\n  402d85:\t48 89 c7             \tmov    %rax,%rdi\n  402d88:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402d8d:\te8 de e3 ff ff       \tcallq  401170 <fprintf@plt>\n  402d92:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402d97:\te8 c5 f4 ff ff       \tcallq  402261 <setExit>\n  402d9c:\te9 af 04 00 00       \tjmpq   403250 <compress+0x75b>\n  402da1:\t8b 05 01 ca 01 00    \tmov    0x1ca01(%rip),%eax        # 41f7a8 <srcMode>\n  402da7:\t83 f8 03             \tcmp    $0x3,%eax\n  402daa:\t75 58                \tjne    402e04 <compress+0x30f>\n  402dac:\t0f b6 05 38 d2 01 00 \tmovzbl 0x1d238(%rip),%eax        # 41ffeb <forceOverwrite>\n  402db3:\t84 c0                \ttest   %al,%al\n  402db5:\t75 4d                \tjne    402e04 <compress+0x30f>\n  402db7:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402dbc:\te8 d9 fa ff ff       \tcallq  40289a <notAStandardFile>\n  402dc1:\t84 c0                \ttest   %al,%al\n  402dc3:\t74 3f                \tje     402e04 <compress+0x30f>\n  402dc5:\t0f b6 05 ec c9 01 00 \tmovzbl 0x1c9ec(%rip),%eax        # 41f7b8 <noisy>\n  402dcc:\t84 c0                \ttest   %al,%al\n  402dce:\t74 25                \tje     402df5 <compress+0x300>\n  402dd0:\t48 8b 15 21 d2 01 00 \tmov    0x1d221(%rip),%rdx        # 41fff8 <progName>\n  402dd7:\t48 8b 05 c2 c0 01 00 \tmov    0x1c0c2(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  402dde:\tb9 e0 fb 41 00       \tmov    $0x41fbe0,%ecx\n  402de3:\tbe 40 a0 41 00       \tmov    $0x41a040,%esi\n  402de8:\t48 89 c7             \tmov    %rax,%rdi\n  402deb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402df0:\te8 7b e3 ff ff       \tcallq  401170 <fprintf@plt>\n  402df5:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402dfa:\te8 62 f4 ff ff       \tcallq  402261 <setExit>\n  402dff:\te9 4c 04 00 00       \tjmpq   403250 <compress+0x75b>\n  402e04:\t8b 05 9e c9 01 00    \tmov    0x1c99e(%rip),%eax        # 41f7a8 <srcMode>\n  402e0a:\t83 f8 03             \tcmp    $0x3,%eax\n  402e0d:\t75 59                \tjne    402e68 <compress+0x373>\n  402e0f:\tbf c0 f7 41 00       \tmov    $0x41f7c0,%edi\n  402e14:\te8 d5 f9 ff ff       \tcallq  4027ee <fileExists>\n  402e19:\t84 c0                \ttest   %al,%al\n  402e1b:\t74 4b                \tje     402e68 <compress+0x373>\n  402e1d:\t0f b6 05 c7 d1 01 00 \tmovzbl 0x1d1c7(%rip),%eax        # 41ffeb <forceOverwrite>\n  402e24:\t84 c0                \ttest   %al,%al\n  402e26:\t74 0c                \tje     402e34 <compress+0x33f>\n  402e28:\tbf c0 f7 41 00       \tmov    $0x41f7c0,%edi\n  402e2d:\te8 4e e2 ff ff       \tcallq  401080 <remove@plt>\n  402e32:\teb 34                \tjmp    402e68 <compress+0x373>\n  402e34:\t48 8b 15 bd d1 01 00 \tmov    0x1d1bd(%rip),%rdx        # 41fff8 <progName>\n  402e3b:\t48 8b 05 5e c0 01 00 \tmov    0x1c05e(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  402e42:\tb9 c0 f7 41 00       \tmov    $0x41f7c0,%ecx\n  402e47:\tbe 70 a0 41 00       \tmov    $0x41a070,%esi\n  402e4c:\t48 89 c7             \tmov    %rax,%rdi\n  402e4f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402e54:\te8 17 e3 ff ff       \tcallq  401170 <fprintf@plt>\n  402e59:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402e5e:\te8 fe f3 ff ff       \tcallq  402261 <setExit>\n  402e63:\te9 e8 03 00 00       \tjmpq   403250 <compress+0x75b>\n  402e68:\t8b 05 3a c9 01 00    \tmov    0x1c93a(%rip),%eax        # 41f7a8 <srcMode>\n  402e6e:\t83 f8 03             \tcmp    $0x3,%eax\n  402e71:\t75 6d                \tjne    402ee0 <compress+0x3eb>\n  402e73:\t0f b6 05 71 d1 01 00 \tmovzbl 0x1d171(%rip),%eax        # 41ffeb <forceOverwrite>\n  402e7a:\t84 c0                \ttest   %al,%al\n  402e7c:\t75 62                \tjne    402ee0 <compress+0x3eb>\n  402e7e:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402e83:\te8 6d fa ff ff       \tcallq  4028f5 <countHardLinks>\n  402e88:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  402e8b:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  402e8f:\t7e 4f                \tjle    402ee0 <compress+0x3eb>\n  402e91:\t83 7d e8 01          \tcmpl   $0x1,-0x18(%rbp)\n  402e95:\t7e 07                \tjle    402e9e <compress+0x3a9>\n  402e97:\tbe 94 a0 41 00       \tmov    $0x41a094,%esi\n  402e9c:\teb 05                \tjmp    402ea3 <compress+0x3ae>\n  402e9e:\tbe 67 9f 41 00       \tmov    $0x419f67,%esi\n  402ea3:\t48 8b 15 4e d1 01 00 \tmov    0x1d14e(%rip),%rdx        # 41fff8 <progName>\n  402eaa:\t48 8b 05 ef bf 01 00 \tmov    0x1bfef(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  402eb1:\t8b 4d e8             \tmov    -0x18(%rbp),%ecx\n  402eb4:\t49 89 f1             \tmov    %rsi,%r9\n  402eb7:\t41 89 c8             \tmov    %ecx,%r8d\n  402eba:\tb9 e0 fb 41 00       \tmov    $0x41fbe0,%ecx\n  402ebf:\tbe 98 a0 41 00       \tmov    $0x41a098,%esi\n  402ec4:\t48 89 c7             \tmov    %rax,%rdi\n  402ec7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402ecc:\te8 9f e2 ff ff       \tcallq  401170 <fprintf@plt>\n  402ed1:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402ed6:\te8 86 f3 ff ff       \tcallq  402261 <setExit>\n  402edb:\te9 70 03 00 00       \tjmpq   403250 <compress+0x75b>\n  402ee0:\t8b 05 c2 c8 01 00    \tmov    0x1c8c2(%rip),%eax        # 41f7a8 <srcMode>\n  402ee6:\t83 f8 03             \tcmp    $0x3,%eax\n  402ee9:\t75 0a                \tjne    402ef5 <compress+0x400>\n  402eeb:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402ef0:\te8 47 fa ff ff       \tcallq  40293c <saveInputFileMetaInfo>\n  402ef5:\t8b 05 ad c8 01 00    \tmov    0x1c8ad(%rip),%eax        # 41f7a8 <srcMode>\n  402efb:\t83 f8 03             \tcmp    $0x3,%eax\n  402efe:\t0f 84 9a 01 00 00    \tje     40309e <compress+0x5a9>\n  402f04:\t83 f8 03             \tcmp    $0x3,%eax\n  402f07:\t0f 8f 7b 02 00 00    \tjg     403188 <compress+0x693>\n  402f0d:\t83 f8 01             \tcmp    $0x1,%eax\n  402f10:\t74 0e                \tje     402f20 <compress+0x42b>\n  402f12:\t83 f8 02             \tcmp    $0x2,%eax\n  402f15:\t0f 84 8f 00 00 00    \tje     402faa <compress+0x4b5>\n  402f1b:\te9 68 02 00 00       \tjmpq   403188 <compress+0x693>\n  402f20:\t48 8b 05 69 bf 01 00 \tmov    0x1bf69(%rip),%rax        # 41ee90 <stdin@@GLIBC_2.2.5>\n  402f27:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  402f2b:\t48 8b 05 4e bf 01 00 \tmov    0x1bf4e(%rip),%rax        # 41ee80 <stdout@@GLIBC_2.2.5>\n  402f32:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  402f36:\t48 8b 05 43 bf 01 00 \tmov    0x1bf43(%rip),%rax        # 41ee80 <stdout@@GLIBC_2.2.5>\n  402f3d:\t48 89 c7             \tmov    %rax,%rdi\n  402f40:\te8 4b e2 ff ff       \tcallq  401190 <fileno@plt>\n  402f45:\t89 c7                \tmov    %eax,%edi\n  402f47:\te8 74 e1 ff ff       \tcallq  4010c0 <isatty@plt>\n  402f4c:\t85 c0                \ttest   %eax,%eax\n  402f4e:\t0f 84 3e 02 00 00    \tje     403192 <compress+0x69d>\n  402f54:\t48 8b 15 9d d0 01 00 \tmov    0x1d09d(%rip),%rdx        # 41fff8 <progName>\n  402f5b:\t48 8b 05 3e bf 01 00 \tmov    0x1bf3e(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  402f62:\tbe c0 a0 41 00       \tmov    $0x41a0c0,%esi\n  402f67:\t48 89 c7             \tmov    %rax,%rdi\n  402f6a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402f6f:\te8 fc e1 ff ff       \tcallq  401170 <fprintf@plt>\n  402f74:\t48 8b 0d 7d d0 01 00 \tmov    0x1d07d(%rip),%rcx        # 41fff8 <progName>\n  402f7b:\t48 8b 15 76 d0 01 00 \tmov    0x1d076(%rip),%rdx        # 41fff8 <progName>\n  402f82:\t48 8b 05 17 bf 01 00 \tmov    0x1bf17(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  402f89:\tbe f8 a0 41 00       \tmov    $0x41a0f8,%esi\n  402f8e:\t48 89 c7             \tmov    %rax,%rdi\n  402f91:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402f96:\te8 d5 e1 ff ff       \tcallq  401170 <fprintf@plt>\n  402f9b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  402fa0:\te8 bc f2 ff ff       \tcallq  402261 <setExit>\n  402fa5:\te9 a6 02 00 00       \tjmpq   403250 <compress+0x75b>\n  402faa:\tbe 50 9f 41 00       \tmov    $0x419f50,%esi\n  402faf:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  402fb4:\te8 c7 e1 ff ff       \tcallq  401180 <fopen64@plt>\n  402fb9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  402fbd:\t48 8b 05 bc be 01 00 \tmov    0x1bebc(%rip),%rax        # 41ee80 <stdout@@GLIBC_2.2.5>\n  402fc4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  402fc8:\t48 8b 05 b1 be 01 00 \tmov    0x1beb1(%rip),%rax        # 41ee80 <stdout@@GLIBC_2.2.5>\n  402fcf:\t48 89 c7             \tmov    %rax,%rdi\n  402fd2:\te8 b9 e1 ff ff       \tcallq  401190 <fileno@plt>\n  402fd7:\t89 c7                \tmov    %eax,%edi\n  402fd9:\te8 e2 e0 ff ff       \tcallq  4010c0 <isatty@plt>\n  402fde:\t85 c0                \ttest   %eax,%eax\n  402fe0:\t74 69                \tje     40304b <compress+0x556>\n  402fe2:\t48 8b 15 0f d0 01 00 \tmov    0x1d00f(%rip),%rdx        # 41fff8 <progName>\n  402fe9:\t48 8b 05 b0 be 01 00 \tmov    0x1beb0(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  402ff0:\tbe c0 a0 41 00       \tmov    $0x41a0c0,%esi\n  402ff5:\t48 89 c7             \tmov    %rax,%rdi\n  402ff8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402ffd:\te8 6e e1 ff ff       \tcallq  401170 <fprintf@plt>\n  403002:\t48 8b 0d ef cf 01 00 \tmov    0x1cfef(%rip),%rcx        # 41fff8 <progName>\n  403009:\t48 8b 15 e8 cf 01 00 \tmov    0x1cfe8(%rip),%rdx        # 41fff8 <progName>\n  403010:\t48 8b 05 89 be 01 00 \tmov    0x1be89(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  403017:\tbe f8 a0 41 00       \tmov    $0x41a0f8,%esi\n  40301c:\t48 89 c7             \tmov    %rax,%rdi\n  40301f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403024:\te8 47 e1 ff ff       \tcallq  401170 <fprintf@plt>\n  403029:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40302e:\t74 0c                \tje     40303c <compress+0x547>\n  403030:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  403034:\t48 89 c7             \tmov    %rax,%rdi\n  403037:\te8 a4 e0 ff ff       \tcallq  4010e0 <fclose@plt>\n  40303c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  403041:\te8 1b f2 ff ff       \tcallq  402261 <setExit>\n  403046:\te9 05 02 00 00       \tjmpq   403250 <compress+0x75b>\n  40304b:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  403050:\t0f 85 3f 01 00 00    \tjne    403195 <compress+0x6a0>\n  403056:\te8 05 e0 ff ff       \tcallq  401060 <__errno_location@plt>\n  40305b:\t8b 00                \tmov    (%rax),%eax\n  40305d:\t89 c7                \tmov    %eax,%edi\n  40305f:\te8 fc e1 ff ff       \tcallq  401260 <strerror@plt>\n  403064:\t48 89 c1             \tmov    %rax,%rcx\n  403067:\t48 8b 15 8a cf 01 00 \tmov    0x1cf8a(%rip),%rdx        # 41fff8 <progName>\n  40306e:\t48 8b 05 2b be 01 00 \tmov    0x1be2b(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  403075:\t49 89 c8             \tmov    %rcx,%r8\n  403078:\tb9 e0 fb 41 00       \tmov    $0x41fbe0,%ecx\n  40307d:\tbe c0 9f 41 00       \tmov    $0x419fc0,%esi\n  403082:\t48 89 c7             \tmov    %rax,%rdi\n  403085:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40308a:\te8 e1 e0 ff ff       \tcallq  401170 <fprintf@plt>\n  40308f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  403094:\te8 c8 f1 ff ff       \tcallq  402261 <setExit>\n  403099:\te9 b2 01 00 00       \tjmpq   403250 <compress+0x75b>\n  40309e:\tbe 50 9f 41 00       \tmov    $0x419f50,%esi\n  4030a3:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  4030a8:\te8 d3 e0 ff ff       \tcallq  401180 <fopen64@plt>\n  4030ad:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4030b1:\tbe 1a a1 41 00       \tmov    $0x41a11a,%esi\n  4030b6:\tbf c0 f7 41 00       \tmov    $0x41f7c0,%edi\n  4030bb:\te8 73 f7 ff ff       \tcallq  402833 <fopen_output_safely>\n  4030c0:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4030c4:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  4030c9:\t75 5b                \tjne    403126 <compress+0x631>\n  4030cb:\te8 90 df ff ff       \tcallq  401060 <__errno_location@plt>\n  4030d0:\t8b 00                \tmov    (%rax),%eax\n  4030d2:\t89 c7                \tmov    %eax,%edi\n  4030d4:\te8 87 e1 ff ff       \tcallq  401260 <strerror@plt>\n  4030d9:\t48 89 c1             \tmov    %rax,%rcx\n  4030dc:\t48 8b 15 15 cf 01 00 \tmov    0x1cf15(%rip),%rdx        # 41fff8 <progName>\n  4030e3:\t48 8b 05 b6 bd 01 00 \tmov    0x1bdb6(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  4030ea:\t49 89 c8             \tmov    %rcx,%r8\n  4030ed:\tb9 c0 f7 41 00       \tmov    $0x41f7c0,%ecx\n  4030f2:\tbe 20 a1 41 00       \tmov    $0x41a120,%esi\n  4030f7:\t48 89 c7             \tmov    %rax,%rdi\n  4030fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4030ff:\te8 6c e0 ff ff       \tcallq  401170 <fprintf@plt>\n  403104:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  403109:\t74 0c                \tje     403117 <compress+0x622>\n  40310b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40310f:\t48 89 c7             \tmov    %rax,%rdi\n  403112:\te8 c9 df ff ff       \tcallq  4010e0 <fclose@plt>\n  403117:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40311c:\te8 40 f1 ff ff       \tcallq  402261 <setExit>\n  403121:\te9 2a 01 00 00       \tjmpq   403250 <compress+0x75b>\n  403126:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  40312b:\t75 6b                \tjne    403198 <compress+0x6a3>\n  40312d:\te8 2e df ff ff       \tcallq  401060 <__errno_location@plt>\n  403132:\t8b 00                \tmov    (%rax),%eax\n  403134:\t89 c7                \tmov    %eax,%edi\n  403136:\te8 25 e1 ff ff       \tcallq  401260 <strerror@plt>\n  40313b:\t48 89 c1             \tmov    %rax,%rcx\n  40313e:\t48 8b 15 b3 ce 01 00 \tmov    0x1ceb3(%rip),%rdx        # 41fff8 <progName>\n  403145:\t48 8b 05 54 bd 01 00 \tmov    0x1bd54(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  40314c:\t49 89 c8             \tmov    %rcx,%r8\n  40314f:\tb9 e0 fb 41 00       \tmov    $0x41fbe0,%ecx\n  403154:\tbe c0 9f 41 00       \tmov    $0x419fc0,%esi\n  403159:\t48 89 c7             \tmov    %rax,%rdi\n  40315c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  403161:\te8 0a e0 ff ff       \tcallq  401170 <fprintf@plt>\n  403166:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  40316b:\t74 0c                \tje     403179 <compress+0x684>\n  40316d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  403171:\t48 89 c7             \tmov    %rax,%rdi\n  403174:\te8 67 df ff ff       \tcallq  4010e0 <fclose@plt>\n  403179:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  40317e:\te8 de f0 ff ff       \tcallq  402261 <setExit>\n  403183:\te9 c8 00 00 00       \tjmpq   403250 <compress+0x75b>\n  403188:\tbf 46 a1 41 00       \tmov    $0x41a146,%edi\n  40318d:\te8 3f f3 ff ff       \tcallq  4024d1 <panic>\n  403192:\t90                   \tnop\n  403193:\teb 04                \tjmp    403199 <compress+0x6a4>\n  403195:\t90                   \tnop\n  403196:\teb 01                \tjmp    403199 <compress+0x6a4>\n  403198:\t90                   \tnop\n  403199:\t8b 05 cd c1 01 00    \tmov    0x1c1cd(%rip),%eax        # 41f36c <verbosity>\n  40319f:\t85 c0                \ttest   %eax,%eax\n  4031a1:\t7e 37                \tjle    4031da <compress+0x6e5>\n  4031a3:\t48 8b 05 f6 bc 01 00 \tmov    0x1bcf6(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  4031aa:\tba e0 fb 41 00       \tmov    $0x41fbe0,%edx\n  4031af:\tbe 5c a1 41 00       \tmov    $0x41a15c,%esi\n  4031b4:\t48 89 c7             \tmov    %rax,%rdi\n  4031b7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4031bc:\te8 af df ff ff       \tcallq  401170 <fprintf@plt>\n  4031c1:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  4031c6:\te8 33 f5 ff ff       \tcallq  4026fe <pad>\n  4031cb:\t48 8b 05 ce bc 01 00 \tmov    0x1bcce(%rip),%rax        # 41eea0 <stderr@@GLIBC_2.2.5>\n  4031d2:\t48 89 c7             \tmov    %rax,%rdi\n  4031d5:\te8 d6 df ff ff       \tcallq  4011b0 <fflush@plt>\n  4031da:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4031de:\t48 89 05 b3 c5 01 00 \tmov    %rax,0x1c5b3(%rip)        # 41f798 <outputHandleJustInCase>\n  4031e5:\tc6 05 00 ce 01 00 01 \tmovb   $0x1,0x1ce00(%rip)        # 41ffec <deleteOutputOnInterrupt>\n  4031ec:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  4031f0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4031f4:\t48 89 d6             \tmov    %rdx,%rsi\n  4031f7:\t48 89 c7             \tmov    %rax,%rdi\n  4031fa:\te8 10 e4 ff ff       \tcallq  40160f <compressStream>\n  4031ff:\t48 c7 05 8e c5 01 00 \tmovq   $0x0,0x1c58e(%rip)        # 41f798 <outputHandleJustInCase>\n  403206:\t00 00 00 00 \n  40320a:\t8b 05 98 c5 01 00    \tmov    0x1c598(%rip),%eax        # 41f7a8 <srcMode>\n  403210:\t83 f8 03             \tcmp    $0x3,%eax\n  403213:\t75 34                \tjne    403249 <compress+0x754>\n  403215:\tbf c0 f7 41 00       \tmov    $0x41f7c0,%edi\n  40321a:\te8 4b f7 ff ff       \tcallq  40296a <applySavedTimeInfoToOutputFile>\n  40321f:\tc6 05 c6 cd 01 00 00 \tmovb   $0x0,0x1cdc6(%rip)        # 41ffec <deleteOutputOnInterrupt>\n  403226:\t0f b6 05 7f c5 01 00 \tmovzbl 0x1c57f(%rip),%eax        # 41f7ac <keepInputFiles>\n  40322d:\t84 c0                \ttest   %al,%al\n  40322f:\t75 18                \tjne    403249 <compress+0x754>\n  403231:\tbf e0 fb 41 00       \tmov    $0x41fbe0,%edi\n  403236:\te8 45 de ff ff       \tcallq  401080 <remove@plt>\n  40323b:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  40323e:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  403242:\t74 05                \tje     403249 <compress+0x754>\n  403244:\te8 51 f3 ff ff       \tcallq  40259a <ioError>\n  403249:\tc6 05 9c cd 01 00 00 \tmovb   $0x0,0x1cd9c(%rip)        # 41ffec <deleteOutputOnInterrupt>\n  403250:\tc9                   \tleaveq \n  403251:\tc3                   \tretq   ", "code_s": "int __fastcall compress(const char *a1) {\n  int result;\n  int *v2;\n  char *v3;\n  const char *v4;\n  int v5;\n  int v6;\n  int *v7;\n  char *v8;\n  int *v9;\n  char *v10;\n  int *v11;\n  char *v12;\n  struct stat64 <span class=\"supfact\">v13</span>;\n  int v14;\n  int v15;\n  int i;\n  FILE *v17;\n  FILE *stream;\n  deleteOutputOnInterrupt = Number;\n  if (!a1 && srcMode != Number)\n    panic(String);\n  if (srcMode == Number) {\n    copyFileName(inName, a1);\n    copyFileName(outName, a1);\n    strcpy((char *)(strlen(outName) + Number), String);\n  } else if (srcMode <= Number) {\n    if (srcMode == Number) {\n      copyFileName(inName, String);\n      copyFileName(outName, String);\n    } else if (srcMode == Number) {\n      copyFileName(inName, a1);\n      copyFileName(outName, String);\n    }\n  }\n  if (srcMode != Number && (unsigned __int8)containsDubiousChars(inName)) {\n    if (noisy)\n      fprintf(stderr, String, progName, inName);\n    return setExit(Number);\n  }\n  if (srcMode != Number && !fileExists(inName)) {\n    v2 = __errno_location();\n    v3 = strerror(*v2);\n    fprintf(stderr, String, progName, inName, v3);\n    return setExit(Number);\n  }\n  for (i = Number;; ++i) {\n    if (i > Number) {\n      if (srcMode == Number || srcMode == Number) {\n        stat64(inName, &<span class=\"supfact\">v13</span>);\n        if ((<span class=\"supfact\">v13</span>.st_mode & Number) == Number) {\n          fprintf(stderr, String, progName, inName);\n          return setExit(Number);\n        }\n      }\n      if (srcMode == Number && !forceOverwrite && notAStandardFile(inName)) {\n        if (noisy)\n          fprintf(stderr, String, progName, inName);\n        return setExit(Number);\n      }\n      if (srcMode == Number && fileExists(outName)) {\n        if (!forceOverwrite) {\n          fprintf(stderr, String, progName, outName);\n          return setExit(Number);\n        }\n        remove(outName);\n      }\n      if (srcMode == Number && !forceOverwrite) {\n        v15 = countHardLinks(inName);\n        if (v15 > Number) {\n          if (v15 <= Number)\n            v4 = (const char *)&unk_419F67;\n          else\n            v4 = String;\n          fprintf(stderr, String, progName, inName, (unsigned int)v15, v4);\n          return setExit(Number);\n        }\n      }\n      if (srcMode == Number)\n        saveInputFileMetaInfo(inName);\n      if (srcMode == Number) {\n        stream = fopen64(inName, String);\n        v17 = fopen_output_safely(outName, String);\n        if (!v17) {\n          v9 = __errno_location();\n          v10 = strerror(*v9);\n          fprintf(stderr, String, progName, outName, v10);\n          if (stream)\n            fclose(stream);\n          return setExit(Number);\n        }\n        if (!stream) {\n          v11 = __errno_location();\n          v12 = strerror(*v11);\n          fprintf(stderr, String, progName, inName, v12);\n          if (v17)\n            fclose(v17);\n          return setExit(Number);\n        }\n      } else {\n        if (srcMode > Number)\n          goto LABEL_72;\n        if (srcMode == Number) {\n          stream = stdin;\n          v17 = stdout;\n          v5 = fileno(stdout);\n          if (isatty(v5)) {\n            fprintf(stderr, String, progName);\n            fprintf(stderr, String, progName, progName);\n            return setExit(Number);\n          }\n        } else {\n          if (srcMode != Number)\n          LABEL_72:\n            panic(String);\n          stream = fopen64(inName, String);\n          v17 = stdout;\n          v6 = fileno(stdout);\n          if (isatty(v6)) {\n            fprintf(stderr, String, progName);\n            fprintf(stderr, String, progName, progName);\n            if (stream)\n              fclose(stream);\n            return setExit(Number);\n          }\n          if (!stream) {\n            v7 = __errno_location();\n            v8 = strerror(*v7);\n            fprintf(stderr, String, progName, inName, v8);\n            return setExit(Number);\n          }\n        }\n      }\n      if (verbosity > Number) {\n        fprintf(stderr, String, inName);\n        pad(inName);\n        fflush(stderr);\n      }\n      outputHandleJustInCase = v17;\n      deleteOutputOnInterrupt = Number;\n      compressStream(stream, v17);\n      outputHandleJustInCase = Number L;\n      result = srcMode;\n      if (srcMode == Number) {\n        applySavedTimeInfoToOutputFile(outName);\n        deleteOutputOnInterrupt = Number;\n        result = (unsigned __int8)keepInputFiles;\n        if (!keepInputFiles) {\n          result = remove(inName);\n          v14 = result;\n          if (result)\n            ioError();\n        }\n      }\n      deleteOutputOnInterrupt = Number;\n      return result;\n    }\n    if (hasSuffix(inName, zSuffix[i]))\n      break;\n  }\n  if (noisy)\n    fprintf(stderr, String, progName, inName, zSuffix[i]);\n  return setExit(Number);\n}", "code_t": "void __cdecl compress(Char *name) {\n  int *v1;\n  char *v2;\n  const char *v3;\n  int v4;\n  int v5;\n  int *v6;\n  char *v7;\n  int *v8;\n  char *v9;\n  int *v10;\n  char *v11;\n  stat <span class=\"supfact\">statBuf</span>;\n  Int32 n;\n  Int32 i;\n  FILE *outStr;\n  FILE *inStr;\n  deleteOutputOnInterrupt = Number;\n  if (!name && srcMode != Number)\n    panic(String);\n  if (srcMode == Number) {\n    copyFileName(inName, name);\n    copyFileName(outName, name);\n    strcpy((char *)(strlen(outName) + Number), String);\n  } else if (srcMode <= Number) {\n    if (srcMode == Number) {\n      copyFileName(inName, (Char *)String);\n      copyFileName(outName, (Char *)String);\n    } else if (srcMode == Number) {\n      copyFileName(inName, name);\n      copyFileName(outName, (Char *)String);\n    }\n  }\n  if (srcMode != Number && containsDubiousChars(inName)) {\n    if (noisy)\n      fprintf(stderr, String, progName, inName);\n    goto LABEL_16;\n  }\n  if (srcMode != Number && !fileExists(inName)) {\n    v1 = __errno_location();\n    v2 = strerror(*v1);\n    fprintf(stderr, String, progName, inName, v2);\n    setExit(Number);\n    return;\n  }\n  for (i = Number;; ++i) {\n    if (i > Number) {\n      if (srcMode == Number || srcMode == Number) {\n        stat64(inName, (struct stat64 *)&<span class=\"supfact\">statBuf</span>);\n        if ((<span class=\"supfact\">statBuf</span>.st_mode & Number) == Number) {\n          fprintf(stderr, String, progName, inName);\n          setExit(Number);\n          return;\n        }\n      }\n      if (srcMode == Number && !forceOverwrite && notAStandardFile(inName)) {\n        if (noisy)\n          fprintf(stderr, String, progName, inName);\n      LABEL_71:\n        setExit(Number);\n        return;\n      }\n      if (srcMode == Number && fileExists(outName)) {\n        if (!forceOverwrite) {\n          fprintf(stderr, String, progName, outName);\n          setExit(Number);\n          return;\n        }\n        remove(outName);\n      }\n      if (srcMode == Number && !forceOverwrite) {\n        n = countHardLinks(inName);\n        if (n > Number) {\n          if (n <= Number)\n            v3 = (const char *)&unk_419F67;\n          else\n            v3 = String;\n          fprintf(stderr, String, progName, inName, (unsigned int)n, v3);\n          setExit(Number);\n          return;\n        }\n      }\n      if (srcMode == Number)\n        saveInputFileMetaInfo(inName);\n      if (srcMode == Number) {\n        inStr = fopen64(inName, String);\n        outStr = fopen_output_safely(outName, String);\n        if (!outStr) {\n          v8 = __errno_location();\n          v9 = strerror(*v8);\n          fprintf(stderr, String, progName, outName, v9);\n          if (inStr)\n            fclose(inStr);\n          goto LABEL_71;\n        }\n        if (!inStr) {\n          v10 = __errno_location();\n          v11 = strerror(*v10);\n          fprintf(stderr, String, progName, inName, v11);\n          if (outStr)\n            fclose(outStr);\n          goto LABEL_71;\n        }\n      } else {\n        if (srcMode > Number)\n          goto LABEL_72;\n        if (srcMode == Number) {\n          inStr = stdin;\n          outStr = stdout;\n          v4 = fileno(stdout);\n          if (isatty(v4)) {\n            fprintf(stderr, String, progName);\n            fprintf(stderr, String, progName, progName);\n            setExit(Number);\n            return;\n          }\n        } else {\n          if (srcMode != Number)\n          LABEL_72:\n            panic(String);\n          inStr = fopen64(inName, String);\n          outStr = stdout;\n          v5 = fileno(stdout);\n          if (isatty(v5)) {\n            fprintf(stderr, String, progName);\n            fprintf(stderr, String, progName, progName);\n            if (inStr)\n              fclose(inStr);\n            goto LABEL_71;\n          }\n          if (!inStr) {\n            v6 = __errno_location();\n            v7 = strerror(*v6);\n            fprintf(stderr, String, progName, inName, v7);\n            setExit(Number);\n            return;\n          }\n        }\n      }\n      if (verbosity > Number) {\n        fprintf(stderr, String, inName);\n        pad(inName);\n        fflush(stderr);\n      }\n      outputHandleJustInCase = outStr;\n      deleteOutputOnInterrupt = Number;\n      compressStream(inStr, outStr);\n      outputHandleJustInCase = Number L;\n      if (srcMode == Number) {\n        applySavedTimeInfoToOutputFile(outName);\n        deleteOutputOnInterrupt = Number;\n        if (!keepInputFiles) {\n          if (remove(inName))\n            ioError();\n        }\n      }\n      deleteOutputOnInterrupt = Number;\n      return;\n    }\n    if (hasSuffix(inName, zSuffix[i]))\n      break;\n  }\n  if (noisy)\n    fprintf(stderr, String, progName, inName, zSuffix[i]);\nLABEL_16:\n  setExit(Number);\n}", "var": [{"name": "v13", "type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }", "pred_name": "statBuf", "ref_name": "statBuf", "ref_type": "struct stat { __dev_t st_dev; __ino_t st_ino; __nlink_t st_nlink; __mode_t st_mode; __uid_t st_uid; __gid_t st_gid; int __pad0; __dev_t st_rdev; __off_t st_size; __blksize_t st_blksize; __blkcnt_t st_blocks; timespec st_atim; timespec st_mtim; timespec st_ctim; __syscall_slong_t[3] __glibc_reserved; }"}], "body_in_train": true}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/33f4c241ebdb4b85d8488b334f3ee04d0a45a7bc1a54ecf9fec13e5e4695d1b5", "path_in_repo": "eerimoq/pumbaa/simba/tst/oam/upgrade/build/linux/obj/usr/src/repo/simba/3pp/compat/mbedtls/library/mbedtls_sha256.o", "objdump": "0000000000000000 <mbedtls_sha256_finish>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\te8 00 00 00 00       \tcallq  d <mbedtls_sha256_finish+0xd>\n   d:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  11:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  15:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c <mbedtls_sha256_finish+0x1c>\n  1c:\t48 83 c0 01          \tadd    $0x1,%rax\n  20:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 27 <mbedtls_sha256_finish+0x27>\n  27:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  2b:\t8b 00                \tmov    (%rax),%eax\n  2d:\tc1 e8 1d             \tshr    $0x1d,%eax\n  30:\t89 c2                \tmov    %eax,%edx\n  32:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  36:\t8b 40 04             \tmov    0x4(%rax),%eax\n  39:\tc1 e0 03             \tshl    $0x3,%eax\n  3c:\t09 d0                \tor     %edx,%eax\n  3e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  45:\t8b 00                \tmov    (%rax),%eax\n  47:\tc1 e0 03             \tshl    $0x3,%eax\n  4a:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  50:\tc1 e8 18             \tshr    $0x18,%eax\n  53:\t88 45 e8             \tmov    %al,-0x18(%rbp)\n  56:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  59:\tc1 e8 10             \tshr    $0x10,%eax\n  5c:\t88 45 e9             \tmov    %al,-0x17(%rbp)\n  5f:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  62:\tc1 e8 08             \tshr    $0x8,%eax\n  65:\t88 45 ea             \tmov    %al,-0x16(%rbp)\n  68:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  6b:\t88 45 eb             \tmov    %al,-0x15(%rbp)\n  6e:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  71:\tc1 e8 18             \tshr    $0x18,%eax\n  74:\t88 45 ec             \tmov    %al,-0x14(%rbp)\n  77:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  7a:\tc1 e8 10             \tshr    $0x10,%eax\n  7d:\t88 45 ed             \tmov    %al,-0x13(%rbp)\n  80:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  83:\tc1 e8 08             \tshr    $0x8,%eax\n  86:\t88 45 ee             \tmov    %al,-0x12(%rbp)\n  89:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  8c:\t88 45 ef             \tmov    %al,-0x11(%rbp)\n  8f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  93:\t8b 00                \tmov    (%rax),%eax\n  95:\t83 e0 3f             \tand    $0x3f,%eax\n  98:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  9b:\t83 7d f4 37          \tcmpl   $0x37,-0xc(%rbp)\n  9f:\t77 1c                \tja     bd <mbedtls_sha256_finish+0xbd>\n  a1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a8 <mbedtls_sha256_finish+0xa8>\n  a8:\t48 83 c0 01          \tadd    $0x1,%rax\n  ac:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # b3 <mbedtls_sha256_finish+0xb3>\n  b3:\tb8 38 00 00 00       \tmov    $0x38,%eax\n  b8:\t2b 45 f4             \tsub    -0xc(%rbp),%eax\n  bb:\teb 08                \tjmp    c5 <mbedtls_sha256_finish+0xc5>\n  bd:\tb8 78 00 00 00       \tmov    $0x78,%eax\n  c2:\t2b 45 f4             \tsub    -0xc(%rbp),%eax\n  c5:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  c8:\t8b 55 f0             \tmov    -0x10(%rbp),%edx\n  cb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  cf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  d4:\t48 89 c7             \tmov    %rax,%rdi\n  d7:\te8 00 00 00 00       \tcallq  dc <mbedtls_sha256_finish+0xdc>\n  dc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e3 <mbedtls_sha256_finish+0xe3>\n  e3:\t48 83 c0 01          \tadd    $0x1,%rax\n  e7:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # ee <mbedtls_sha256_finish+0xee>\n  ee:\t48 8d 4d e8          \tlea    -0x18(%rbp),%rcx\n  f2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  f6:\tba 08 00 00 00       \tmov    $0x8,%edx\n  fb:\t48 89 ce             \tmov    %rcx,%rsi\n  fe:\t48 89 c7             \tmov    %rax,%rdi\n 101:\te8 00 00 00 00       \tcallq  106 <mbedtls_sha256_finish+0x106>\n 106:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 10d <mbedtls_sha256_finish+0x10d>\n 10d:\t48 83 c0 01          \tadd    $0x1,%rax\n 111:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 118 <mbedtls_sha256_finish+0x118>\n 118:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 11c:\t8b 40 08             \tmov    0x8(%rax),%eax\n 11f:\tc1 e8 18             \tshr    $0x18,%eax\n 122:\t89 c2                \tmov    %eax,%edx\n 124:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 128:\t88 10                \tmov    %dl,(%rax)\n 12a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 12e:\t8b 40 08             \tmov    0x8(%rax),%eax\n 131:\tc1 e8 10             \tshr    $0x10,%eax\n 134:\t89 c2                \tmov    %eax,%edx\n 136:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 13a:\t48 83 c0 01          \tadd    $0x1,%rax\n 13e:\t88 10                \tmov    %dl,(%rax)\n 140:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 144:\t8b 40 08             \tmov    0x8(%rax),%eax\n 147:\tc1 e8 08             \tshr    $0x8,%eax\n 14a:\t89 c2                \tmov    %eax,%edx\n 14c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 150:\t48 83 c0 02          \tadd    $0x2,%rax\n 154:\t88 10                \tmov    %dl,(%rax)\n 156:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 15a:\t8b 50 08             \tmov    0x8(%rax),%edx\n 15d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 161:\t48 83 c0 03          \tadd    $0x3,%rax\n 165:\t88 10                \tmov    %dl,(%rax)\n 167:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 16b:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 16e:\tc1 e8 18             \tshr    $0x18,%eax\n 171:\t89 c2                \tmov    %eax,%edx\n 173:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 177:\t48 83 c0 04          \tadd    $0x4,%rax\n 17b:\t88 10                \tmov    %dl,(%rax)\n 17d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 181:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 184:\tc1 e8 10             \tshr    $0x10,%eax\n 187:\t89 c2                \tmov    %eax,%edx\n 189:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 18d:\t48 83 c0 05          \tadd    $0x5,%rax\n 191:\t88 10                \tmov    %dl,(%rax)\n 193:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 197:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 19a:\tc1 e8 08             \tshr    $0x8,%eax\n 19d:\t89 c2                \tmov    %eax,%edx\n 19f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 1a3:\t48 83 c0 06          \tadd    $0x6,%rax\n 1a7:\t88 10                \tmov    %dl,(%rax)\n 1a9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1ad:\t8b 50 0c             \tmov    0xc(%rax),%edx\n 1b0:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 1b4:\t48 83 c0 07          \tadd    $0x7,%rax\n 1b8:\t88 10                \tmov    %dl,(%rax)\n 1ba:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1be:\t8b 40 10             \tmov    0x10(%rax),%eax\n 1c1:\tc1 e8 18             \tshr    $0x18,%eax\n 1c4:\t89 c2                \tmov    %eax,%edx\n 1c6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 1ca:\t48 83 c0 08          \tadd    $0x8,%rax\n 1ce:\t88 10                \tmov    %dl,(%rax)\n 1d0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1d4:\t8b 40 10             \tmov    0x10(%rax),%eax\n 1d7:\tc1 e8 10             \tshr    $0x10,%eax\n 1da:\t89 c2                \tmov    %eax,%edx\n 1dc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 1e0:\t48 83 c0 09          \tadd    $0x9,%rax\n 1e4:\t88 10                \tmov    %dl,(%rax)\n 1e6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1ea:\t8b 40 10             \tmov    0x10(%rax),%eax\n 1ed:\tc1 e8 08             \tshr    $0x8,%eax\n 1f0:\t89 c2                \tmov    %eax,%edx\n 1f2:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 1f6:\t48 83 c0 0a          \tadd    $0xa,%rax\n 1fa:\t88 10                \tmov    %dl,(%rax)\n 1fc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 200:\t8b 50 10             \tmov    0x10(%rax),%edx\n 203:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 207:\t48 83 c0 0b          \tadd    $0xb,%rax\n 20b:\t88 10                \tmov    %dl,(%rax)\n 20d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 211:\t8b 40 14             \tmov    0x14(%rax),%eax\n 214:\tc1 e8 18             \tshr    $0x18,%eax\n 217:\t89 c2                \tmov    %eax,%edx\n 219:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 21d:\t48 83 c0 0c          \tadd    $0xc,%rax\n 221:\t88 10                \tmov    %dl,(%rax)\n 223:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 227:\t8b 40 14             \tmov    0x14(%rax),%eax\n 22a:\tc1 e8 10             \tshr    $0x10,%eax\n 22d:\t89 c2                \tmov    %eax,%edx\n 22f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 233:\t48 83 c0 0d          \tadd    $0xd,%rax\n 237:\t88 10                \tmov    %dl,(%rax)\n 239:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 23d:\t8b 40 14             \tmov    0x14(%rax),%eax\n 240:\tc1 e8 08             \tshr    $0x8,%eax\n 243:\t89 c2                \tmov    %eax,%edx\n 245:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 249:\t48 83 c0 0e          \tadd    $0xe,%rax\n 24d:\t88 10                \tmov    %dl,(%rax)\n 24f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 253:\t8b 50 14             \tmov    0x14(%rax),%edx\n 256:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 25a:\t48 83 c0 0f          \tadd    $0xf,%rax\n 25e:\t88 10                \tmov    %dl,(%rax)\n 260:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 264:\t8b 40 18             \tmov    0x18(%rax),%eax\n 267:\tc1 e8 18             \tshr    $0x18,%eax\n 26a:\t89 c2                \tmov    %eax,%edx\n 26c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 270:\t48 83 c0 10          \tadd    $0x10,%rax\n 274:\t88 10                \tmov    %dl,(%rax)\n 276:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 27a:\t8b 40 18             \tmov    0x18(%rax),%eax\n 27d:\tc1 e8 10             \tshr    $0x10,%eax\n 280:\t89 c2                \tmov    %eax,%edx\n 282:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 286:\t48 83 c0 11          \tadd    $0x11,%rax\n 28a:\t88 10                \tmov    %dl,(%rax)\n 28c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 290:\t8b 40 18             \tmov    0x18(%rax),%eax\n 293:\tc1 e8 08             \tshr    $0x8,%eax\n 296:\t89 c2                \tmov    %eax,%edx\n 298:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 29c:\t48 83 c0 12          \tadd    $0x12,%rax\n 2a0:\t88 10                \tmov    %dl,(%rax)\n 2a2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 2a6:\t8b 50 18             \tmov    0x18(%rax),%edx\n 2a9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 2ad:\t48 83 c0 13          \tadd    $0x13,%rax\n 2b1:\t88 10                \tmov    %dl,(%rax)\n 2b3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 2b7:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n 2ba:\tc1 e8 18             \tshr    $0x18,%eax\n 2bd:\t89 c2                \tmov    %eax,%edx\n 2bf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 2c3:\t48 83 c0 14          \tadd    $0x14,%rax\n 2c7:\t88 10                \tmov    %dl,(%rax)\n 2c9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 2cd:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n 2d0:\tc1 e8 10             \tshr    $0x10,%eax\n 2d3:\t89 c2                \tmov    %eax,%edx\n 2d5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 2d9:\t48 83 c0 15          \tadd    $0x15,%rax\n 2dd:\t88 10                \tmov    %dl,(%rax)\n 2df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 2e3:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n 2e6:\tc1 e8 08             \tshr    $0x8,%eax\n 2e9:\t89 c2                \tmov    %eax,%edx\n 2eb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 2ef:\t48 83 c0 16          \tadd    $0x16,%rax\n 2f3:\t88 10                \tmov    %dl,(%rax)\n 2f5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 2f9:\t8b 50 1c             \tmov    0x1c(%rax),%edx\n 2fc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 300:\t48 83 c0 17          \tadd    $0x17,%rax\n 304:\t88 10                \tmov    %dl,(%rax)\n 306:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 30a:\t8b 40 20             \tmov    0x20(%rax),%eax\n 30d:\tc1 e8 18             \tshr    $0x18,%eax\n 310:\t89 c2                \tmov    %eax,%edx\n 312:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 316:\t48 83 c0 18          \tadd    $0x18,%rax\n 31a:\t88 10                \tmov    %dl,(%rax)\n 31c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 320:\t8b 40 20             \tmov    0x20(%rax),%eax\n 323:\tc1 e8 10             \tshr    $0x10,%eax\n 326:\t89 c2                \tmov    %eax,%edx\n 328:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 32c:\t48 83 c0 19          \tadd    $0x19,%rax\n 330:\t88 10                \tmov    %dl,(%rax)\n 332:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 336:\t8b 40 20             \tmov    0x20(%rax),%eax\n 339:\tc1 e8 08             \tshr    $0x8,%eax\n 33c:\t89 c2                \tmov    %eax,%edx\n 33e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 342:\t48 83 c0 1a          \tadd    $0x1a,%rax\n 346:\t88 10                \tmov    %dl,(%rax)\n 348:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 34c:\t8b 50 20             \tmov    0x20(%rax),%edx\n 34f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 353:\t48 83 c0 1b          \tadd    $0x1b,%rax\n 357:\t88 10                \tmov    %dl,(%rax)\n 359:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 35d:\t8b 40 68             \tmov    0x68(%rax),%eax\n 360:\t85 c0                \ttest   %eax,%eax\n 362:\t75 65                \tjne    3c9 <mbedtls_sha256_finish+0x3c9>\n 364:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 368:\t8b 40 24             \tmov    0x24(%rax),%eax\n 36b:\tc1 e8 18             \tshr    $0x18,%eax\n 36e:\t89 c2                \tmov    %eax,%edx\n 370:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 374:\t48 83 c0 1c          \tadd    $0x1c,%rax\n 378:\t88 10                \tmov    %dl,(%rax)\n 37a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 37e:\t8b 40 24             \tmov    0x24(%rax),%eax\n 381:\tc1 e8 10             \tshr    $0x10,%eax\n 384:\t89 c2                \tmov    %eax,%edx\n 386:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 38a:\t48 83 c0 1d          \tadd    $0x1d,%rax\n 38e:\t88 10                \tmov    %dl,(%rax)\n 390:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 394:\t8b 40 24             \tmov    0x24(%rax),%eax\n 397:\tc1 e8 08             \tshr    $0x8,%eax\n 39a:\t89 c2                \tmov    %eax,%edx\n 39c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 3a0:\t48 83 c0 1e          \tadd    $0x1e,%rax\n 3a4:\t88 10                \tmov    %dl,(%rax)\n 3a6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3aa:\t8b 50 24             \tmov    0x24(%rax),%edx\n 3ad:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 3b1:\t48 83 c0 1f          \tadd    $0x1f,%rax\n 3b5:\t88 10                \tmov    %dl,(%rax)\n 3b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3be <mbedtls_sha256_finish+0x3be>\n 3be:\t48 83 c0 01          \tadd    $0x1,%rax\n 3c2:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 3c9 <mbedtls_sha256_finish+0x3c9>\n 3c9:\t90                   \tnop\n 3ca:\tc9                   \tleaveq \n 3cb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mbedtls_sha256_finish(unsigned int *a1, _BYTE *a2) {\n  unsigned int v2;\n  __int64 result;\n  char v4[Number];\n  unsigned int v5;\n  unsigned int v6;\n  __int64 v7;\n  ++_gcov0_mbedtls_sha256_finish;\n  v7 = Number L * *(_QWORD *)a1;\n  v4[Number] = HIBYTE(v7);\n  v4[Number] = BYTE6(v7);\n  v4[Number] = BYTE5(v7);\n  v4[Number] = BYTE4(v7);\n  v4[Number] = BYTE3(v7);\n  v4[Number] = BYTE2(v7);\n  v4[Number] = BYTE1(v7);\n  v4[Number] = v7;\n  v6 = *a1 & Number;\n  if (v6 > Number) {\n    v2 = Number - v6;\n  } else {\n    ++qword_2668;\n    v2 = Number - v6;\n  }\n  v5 = v2;\n  mbedtls_sha256_update(a1, sha256_padding, v2);\n  ++qword_2670;\n  mbedtls_sha256_update(a1, v4, Number);\n  ++qword_2678;\n  *a2 = HIBYTE(a1[Number]);\n  a2[Number] = BYTE2(a1[Number]);\n  a2[Number] = BYTE1(a1[Number]);\n  a2[Number] = a1[Number];\n  a2[Number] = HIBYTE(a1[Number]);\n  a2[Number] = BYTE2(a1[Number]);\n  a2[Number] = BYTE1(a1[Number]);\n  a2[Number] = a1[Number];\n  a2[Number] = HIBYTE(a1[Number]);\n  a2[Number] = BYTE2(a1[Number]);\n  a2[Number] = BYTE1(a1[Number]);\n  a2[Number] = a1[Number];\n  a2[Number] = HIBYTE(a1[Number]);\n  a2[Number] = BYTE2(a1[Number]);\n  a2[Number] = BYTE1(a1[Number]);\n  a2[Number] = a1[Number];\n  a2[Number] = HIBYTE(a1[Number]);\n  a2[Number] = BYTE2(a1[Number]);\n  a2[Number] = BYTE1(a1[Number]);\n  a2[Number] = a1[Number];\n  a2[Number] = HIBYTE(a1[Number]);\n  a2[Number] = BYTE2(a1[Number]);\n  a2[Number] = BYTE1(a1[Number]);\n  a2[Number] = a1[Number];\n  a2[Number] = HIBYTE(a1[Number]);\n  a2[Number] = BYTE2(a1[Number]);\n  a2[Number] = BYTE1(a1[Number]);\n  a2[Number] = a1[Number];\n  result = a1[Number];\n  if (!(_DWORD)result) {\n    a2[Number] = HIBYTE(a1[Number]);\n    a2[Number] = BYTE2(a1[Number]);\n    a2[Number] = BYTE1(a1[Number]);\n    a2[Number] = a1[Number];\n    result = ++qword_2680;\n  }\n  return result;\n}", "code_t": "void __cdecl mbedtls_sha256_finish(mbedtls_sha256_context *ctx,\n                                   unsigned __int8 *output) {\n  uint32_t v2;\n  unsigned __int8 msglen[Number];\n  uint32_t padn;\n  uint32_t last;\n  __int64 low;\n  ++_gcov0_mbedtls_sha256_finish;\n  low = Number L * *(_QWORD *)ctx->total;\n  msglen[Number] = HIBYTE(low);\n  msglen[Number] = BYTE6(low);\n  msglen[Number] = BYTE5(low);\n  msglen[Number] = BYTE4(low);\n  msglen[Number] = BYTE3(low);\n  msglen[Number] = BYTE2(low);\n  msglen[Number] = BYTE1(low);\n  msglen[Number] = low;\n  last = ctx->total[Number] & Number;\n  if (last > Number) {\n    v2 = Number - last;\n  } else {\n    ++qword_2668;\n    v2 = Number - last;\n  }\n  padn = v2;\n  mbedtls_sha256_update(ctx, sha256_padding, v2);\n  ++qword_2670;\n  mbedtls_sha256_update(ctx, msglen, Number);\n  ++qword_2678;\n  *output = HIBYTE(ctx->state[Number]);\n  output[Number] = BYTE2(ctx->state[Number]);\n  output[Number] = BYTE1(ctx->state[Number]);\n  output[Number] = ctx->state[Number];\n  output[Number] = HIBYTE(ctx->state[Number]);\n  output[Number] = BYTE2(ctx->state[Number]);\n  output[Number] = BYTE1(ctx->state[Number]);\n  output[Number] = ctx->state[Number];\n  output[Number] = HIBYTE(ctx->state[Number]);\n  output[Number] = BYTE2(ctx->state[Number]);\n  output[Number] = BYTE1(ctx->state[Number]);\n  output[Number] = ctx->state[Number];\n  output[Number] = HIBYTE(ctx->state[Number]);\n  output[Number] = BYTE2(ctx->state[Number]);\n  output[Number] = BYTE1(ctx->state[Number]);\n  output[Number] = ctx->state[Number];\n  output[Number] = HIBYTE(ctx->state[Number]);\n  output[Number] = BYTE2(ctx->state[Number]);\n  output[Number] = BYTE1(ctx->state[Number]);\n  output[Number] = ctx->state[Number];\n  output[Number] = HIBYTE(ctx->state[Number]);\n  output[Number] = BYTE2(ctx->state[Number]);\n  output[Number] = BYTE1(ctx->state[Number]);\n  output[Number] = ctx->state[Number];\n  output[Number] = HIBYTE(ctx->state[Number]);\n  output[Number] = BYTE2(ctx->state[Number]);\n  output[Number] = BYTE1(ctx->state[Number]);\n  output[Number] = ctx->state[Number];\n  if (!ctx->is224) {\n    output[Number] = HIBYTE(ctx->state[Number]);\n    output[Number] = BYTE2(ctx->state[Number]);\n    output[Number] = BYTE1(ctx->state[Number]);\n    output[Number] = ctx->state[Number];\n    ++qword_2680;\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "aschils", "repo_name": "packetdrill_mptcp", "path": "aschils/packetdrill_mptcp/f12586e93c870ce6d623d457774db79bece9afbd194c2c1db368116c352992a8", "path_in_repo": "aschils/packetdrill_mptcp/gtests/net/packetdrill/packet_to_string_test", "objdump": "", "code_s": "int asprintf(char **ptr, const char *fmt, ...) { return asprintf(ptr, fmt); }", "code_t": "int asprintf(char **ptr, const char *fmt, ...) { return asprintf(ptr, fmt); }", "var": [], "body_in_train": true}, {"repo_owner": "rockchip-toybrick", "repo_name": "external-wpa_supplicant_8", "path": "rockchip-toybrick/external-wpa_supplicant_8/6c2672fab34303e61c1d7e93a0407c1791fe28b43ea8f5250feccdda94afd81e", "path_in_repo": "rockchip-toybrick/external-wpa_supplicant_8/hostapd/hostapd", "objdump": "0000000000434459 <__bswap_32>:\n  434459:\t55                   \tpush   %rbp\n  43445a:\t48 89 e5             \tmov    %rsp,%rbp\n  43445d:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n  434460:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  434463:\t0f c8                \tbswap  %eax\n  434465:\t5d                   \tpop    %rbp\n  434466:\tc3                   \tretq   ", "code_s": "__int64 __fastcall _bswap_32(unsigned int a1) { return _byteswap_ulong(a1); }", "code_t": "__uint32_t __cdecl _bswap_32(__uint32_t __bsx) {\n  return _byteswap_ulong(__bsx);\n}", "var": [], "body_in_train": true}, {"repo_owner": "HexHive", "repo_name": "SMoTherSpectre", "path": "HexHive/SMoTherSpectre/0090651ee44885e30dc851784d669160cbbfa90478fed264f6fff59ae2b1922a", "path_in_repo": "HexHive/SMoTherSpectre/openssl_attack/openssl/ssl/statem/statem_lib.o", "objdump": "0000000000003407 <tls_get_message_body>:\n    3407:\t55                   \tpush   %rbp\n    3408:\t48 89 e5             \tmov    %rsp,%rbp\n    340b:\t48 83 ec 30          \tsub    $0x30,%rsp\n    340f:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    3413:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    3417:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    341b:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n    3422:\t8b 80 30 02 00 00    \tmov    0x230(%rax),%eax\n    3428:\t3d 01 01 00 00       \tcmp    $0x101,%eax\n    342d:\t75 1c                \tjne    344b <tls_get_message_body+0x44>\n    342f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3433:\t48 8b 90 98 00 00 00 \tmov    0x98(%rax),%rdx\n    343a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    343e:\t48 89 10             \tmov    %rdx,(%rax)\n    3441:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    3446:\te9 7b 03 00 00       \tjmpq   37c6 <tls_get_message_body+0x3bf>\n    344b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    344f:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n    3456:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    345a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    345e:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n    3465:\t48 8b 90 28 02 00 00 \tmov    0x228(%rax),%rdx\n    346c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3470:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    3477:\t48 29 c2             \tsub    %rax,%rdx\n    347a:\t48 89 d0             \tmov    %rdx,%rax\n    347d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3481:\te9 9d 00 00 00       \tjmpq   3523 <tls_get_message_body+0x11c>\n    3486:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    348a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    348e:\t4c 8b 50 68          \tmov    0x68(%rax),%r10\n    3492:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3496:\t48 8b 90 98 00 00 00 \tmov    0x98(%rax),%rdx\n    349d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    34a1:\t48 01 c2             \tadd    %rax,%rdx\n    34a4:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n    34a8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    34ac:\t48 83 ec 08          \tsub    $0x8,%rsp\n    34b0:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n    34b4:\t51                   \tpush   %rcx\n    34b5:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    34bb:\t49 89 f0             \tmov    %rsi,%r8\n    34be:\t48 89 d1             \tmov    %rdx,%rcx\n    34c1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    34c6:\tbe 16 00 00 00       \tmov    $0x16,%esi\n    34cb:\t48 89 c7             \tmov    %rax,%rdi\n    34ce:\t41 ff d2             \tcallq  *%r10\n    34d1:\t48 83 c4 10          \tadd    $0x10,%rsp\n    34d5:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    34d8:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n    34dc:\t7f 20                \tjg     34fe <tls_get_message_body+0xf7>\n    34de:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    34e2:\tc7 40 28 03 00 00 00 \tmovl   $0x3,0x28(%rax)\n    34e9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    34ed:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    34f4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    34f9:\te9 c8 02 00 00       \tjmpq   37c6 <tls_get_message_body+0x3bf>\n    34fe:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3502:\t48 8b 90 98 00 00 00 \tmov    0x98(%rax),%rdx\n    3509:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    350d:\t48 01 c2             \tadd    %rax,%rdx\n    3510:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3514:\t48 89 90 98 00 00 00 \tmov    %rdx,0x98(%rax)\n    351b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    351f:\t48 29 45 f8          \tsub    %rax,-0x8(%rbp)\n    3523:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    3528:\t0f 85 58 ff ff ff    \tjne    3486 <tls_get_message_body+0x7f>\n    352e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3532:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    3539:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    353d:\t0f b6 00             \tmovzbl (%rax),%eax\n    3540:\t3c 14                \tcmp    $0x14,%al\n    3542:\t75 25                \tjne    3569 <tls_get_message_body+0x162>\n    3544:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3548:\t48 89 c7             \tmov    %rax,%rdi\n    354b:\te8 00 00 00 00       \tcallq  3550 <tls_get_message_body+0x149>\n    3550:\t85 c0                \ttest   %eax,%eax\n    3552:\t75 15                \tjne    3569 <tls_get_message_body+0x162>\n    3554:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3558:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    355f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3564:\te9 5d 02 00 00       \tjmpq   37c6 <tls_get_message_body+0x3bf>\n    3569:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    356d:\t48 05 10 08 00 00    \tadd    $0x810,%rax\n    3573:\t48 89 c7             \tmov    %rax,%rdi\n    3576:\te8 00 00 00 00       \tcallq  357b <tls_get_message_body+0x174>\n    357b:\t85 c0                \ttest   %eax,%eax\n    357d:\t0f 84 b3 00 00 00    \tje     3636 <tls_get_message_body+0x22f>\n    3583:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3587:\t48 8b 90 98 00 00 00 \tmov    0x98(%rax),%rdx\n    358e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3592:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    3599:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n    359d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    35a1:\t48 89 ce             \tmov    %rcx,%rsi\n    35a4:\t48 89 c7             \tmov    %rax,%rdi\n    35a7:\te8 00 00 00 00       \tcallq  35ac <tls_get_message_body+0x1a5>\n    35ac:\t85 c0                \ttest   %eax,%eax\n    35ae:\t75 15                \tjne    35c5 <tls_get_message_body+0x1be>\n    35b0:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    35b4:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    35bb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    35c0:\te9 01 02 00 00       \tjmpq   37c6 <tls_get_message_body+0x3bf>\n    35c5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    35c9:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n    35d0:\t48 85 c0             \ttest   %rax,%rax\n    35d3:\t0f 84 d6 01 00 00    \tje     37af <tls_get_message_body+0x3a8>\n    35d9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    35dd:\t4c 8b 90 b8 00 00 00 \tmov    0xb8(%rax),%r10\n    35e4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    35e8:\t48 8b 90 c0 00 00 00 \tmov    0xc0(%rax),%rdx\n    35ef:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    35f3:\t48 8b 88 98 00 00 00 \tmov    0x98(%rax),%rcx\n    35fa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    35fe:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    3605:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3609:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    360d:\t48 83 ec 08          \tsub    $0x8,%rsp\n    3611:\t52                   \tpush   %rdx\n    3612:\t49 89 f1             \tmov    %rsi,%r9\n    3615:\t49 89 c8             \tmov    %rcx,%r8\n    3618:\t48 89 c1             \tmov    %rax,%rcx\n    361b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    3620:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    3625:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    362a:\t41 ff d2             \tcallq  *%r10\n    362d:\t48 83 c4 10          \tadd    $0x10,%rsp\n    3631:\te9 79 01 00 00       \tjmpq   37af <tls_get_message_body+0x3a8>\n    3636:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    363a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    363e:\t48 8b 80 c0 00 00 00 \tmov    0xc0(%rax),%rax\n    3645:\t8b 40 60             \tmov    0x60(%rax),%eax\n    3648:\t83 e0 08             \tand    $0x8,%eax\n    364b:\t85 c0                \ttest   %eax,%eax\n    364d:\t75 56                \tjne    36a5 <tls_get_message_body+0x29e>\n    364f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3653:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3657:\t8b 00                \tmov    (%rax),%eax\n    3659:\t3d 03 03 00 00       \tcmp    $0x303,%eax\n    365e:\t7e 45                \tjle    36a5 <tls_get_message_body+0x29e>\n    3660:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3664:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    3668:\t8b 00                \tmov    (%rax),%eax\n    366a:\t3d 00 00 01 00       \tcmp    $0x10000,%eax\n    366f:\t74 34                \tje     36a5 <tls_get_message_body+0x29e>\n    3671:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3675:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n    367c:\t8b 80 30 02 00 00    \tmov    0x230(%rax),%eax\n    3682:\t83 f8 04             \tcmp    $0x4,%eax\n    3685:\t0f 84 b5 00 00 00    \tje     3740 <tls_get_message_body+0x339>\n    368b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    368f:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n    3696:\t8b 80 30 02 00 00    \tmov    0x230(%rax),%eax\n    369c:\t83 f8 18             \tcmp    $0x18,%eax\n    369f:\t0f 84 9b 00 00 00    \tje     3740 <tls_get_message_body+0x339>\n    36a5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    36a9:\t48 8b 80 a8 00 00 00 \tmov    0xa8(%rax),%rax\n    36b0:\t8b 80 30 02 00 00    \tmov    0x230(%rax),%eax\n    36b6:\t83 f8 02             \tcmp    $0x2,%eax\n    36b9:\t75 3f                \tjne    36fa <tls_get_message_body+0x2f3>\n    36bb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    36bf:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    36c6:\t48 83 f8 25          \tcmp    $0x25,%rax\n    36ca:\t76 2e                \tjbe    36fa <tls_get_message_body+0x2f3>\n    36cc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    36d0:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    36d7:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    36db:\t48 83 c0 06          \tadd    $0x6,%rax\n    36df:\tba 20 00 00 00       \tmov    $0x20,%edx\n    36e4:\t48 89 c6             \tmov    %rax,%rsi\n    36e7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 36ee <tls_get_message_body+0x2e7>\n    36ee:\t48 89 c7             \tmov    %rax,%rdi\n    36f1:\te8 00 00 00 00       \tcallq  36f6 <tls_get_message_body+0x2ef>\n    36f6:\t85 c0                \ttest   %eax,%eax\n    36f8:\t74 46                \tje     3740 <tls_get_message_body+0x339>\n    36fa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    36fe:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    3705:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n    3709:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    370d:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    3714:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n    3718:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    371c:\t48 89 ce             \tmov    %rcx,%rsi\n    371f:\t48 89 c7             \tmov    %rax,%rdi\n    3722:\te8 00 00 00 00       \tcallq  3727 <tls_get_message_body+0x320>\n    3727:\t85 c0                \ttest   %eax,%eax\n    3729:\t75 15                \tjne    3740 <tls_get_message_body+0x339>\n    372b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    372f:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    3736:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    373b:\te9 86 00 00 00       \tjmpq   37c6 <tls_get_message_body+0x3bf>\n    3740:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3744:\t48 8b 80 b8 00 00 00 \tmov    0xb8(%rax),%rax\n    374b:\t48 85 c0             \ttest   %rax,%rax\n    374e:\t74 5f                \tje     37af <tls_get_message_body+0x3a8>\n    3750:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3754:\t4c 8b 90 b8 00 00 00 \tmov    0xb8(%rax),%r10\n    375b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    375f:\t48 8b 88 c0 00 00 00 \tmov    0xc0(%rax),%rcx\n    3766:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    376a:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    3771:\t48 8d 78 04          \tlea    0x4(%rax),%rdi\n    3775:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3779:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n    3780:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    3784:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3788:\t8b 00                \tmov    (%rax),%eax\n    378a:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    378e:\t48 83 ec 08          \tsub    $0x8,%rsp\n    3792:\t51                   \tpush   %rcx\n    3793:\t49 89 f1             \tmov    %rsi,%r9\n    3796:\t49 89 f8             \tmov    %rdi,%r8\n    3799:\t48 89 d1             \tmov    %rdx,%rcx\n    379c:\tba 16 00 00 00       \tmov    $0x16,%edx\n    37a1:\t89 c6                \tmov    %eax,%esi\n    37a3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    37a8:\t41 ff d2             \tcallq  *%r10\n    37ab:\t48 83 c4 10          \tadd    $0x10,%rsp\n    37af:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    37b3:\t48 8b 90 98 00 00 00 \tmov    0x98(%rax),%rdx\n    37ba:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    37be:\t48 89 10             \tmov    %rdx,(%rax)\n    37c1:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    37c6:\tc9                   \tleaveq \n    37c7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall tls_get_message_body(unsigned int *a1, _QWORD *a2) {\n  __int64 v3;\n  int v4;\n  __int64 v5;\n  __int64 i;\n  if (*(_DWORD *)(*((_QWORD *)a1 + Number) + Number L) == Number) {\n    *a2 = *((_QWORD *)a1 + Number);\n    return Number L;\n  }\n  v5 = *((_QWORD *)a1 + Number);\n  for (i = *(_QWORD *)(*((_QWORD *)a1 + Number) + Number L) -\n           *((_QWORD *)a1 + Number);\n       i; i -= v3) {\n    v4 = (*(__int64(__fastcall **)(unsigned int *, __int64, _QWORD, __int64,\n                                   __int64, _QWORD, __int64 *))(\n        *((_QWORD *)a1 + Number) + Number L))(a1, Number L, Number L,\n                                              v5 + *((_QWORD *)a1 + Number), i,\n                                              Number L, &v3);\n    if (v4 <= Number) {\n      a1[Number] = Number;\n      *a2 = Number L;\n      return Number L;\n    }\n    *((_QWORD *)a1 + Number) += v3;\n  }\n  if (**(_BYTE **)(*((_QWORD *)a1 + Number) + Number L) == Number &&\n      !ssl3_take_mac((__int64)a1)) {\n    *a2 = Number L;\n    return Number L;\n  }\n  if ((unsigned int)RECORD_LAYER_is_sslv2_record(a1 + Number)) {\n    if (!(unsigned int)ssl3_finish_mac(\n            a1, *(_QWORD *)(*((_QWORD *)a1 + Number) + Number L),\n            *((_QWORD *)a1 + Number))) {\n      *a2 = Number L;\n      return Number L;\n    }\n    if (*((_QWORD *)a1 + Number))\n      (*((void(__fastcall **)(_QWORD, __int64, _QWORD, _QWORD, _QWORD,\n                              unsigned int *, _QWORD))a1 +\n         Number))(Number L, Number L, Number L,\n                  *(_QWORD *)(*((_QWORD *)a1 + Number) + Number L),\n                  *((_QWORD *)a1 + Number), a1, *((_QWORD *)a1 + Number));\n  } else {\n    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + Number) + Number L) +\n                      Number L) &\n          Number) != Number ||\n         **((int **)a1 + Number) <= Number ||\n         **((_DWORD **)a1 + Number) == Number ||\n         *(_DWORD *)(*((_QWORD *)a1 + Number) + Number L) != Number &&\n             *(_DWORD *)(*((_QWORD *)a1 + Number) + Number L) != Number) &&\n        (*(_DWORD *)(*((_QWORD *)a1 + Number) + Number L) != Number ||\n         *((_QWORD *)a1 + Number) <= Number ||\n         memcmp(\n             &hrrrandom,\n             (const void *)(*(_QWORD *)(*((_QWORD *)a1 + Number) + Number L) +\n                            Number L),\n             Number)) &&\n        !(unsigned int)ssl3_finish_mac(\n            a1, *(_QWORD *)(*((_QWORD *)a1 + Number) + Number L),\n            *((_QWORD *)a1 + Number) + Number L)) {\n      *a2 = Number L;\n      return Number L;\n    }\n    if (*((_QWORD *)a1 + Number))\n      (*((void(__fastcall **)(_QWORD, _QWORD, __int64, _QWORD, __int64,\n                              unsigned int *, _QWORD))a1 +\n         Number))(Number L, *a1, Number L,\n                  *(_QWORD *)(*((_QWORD *)a1 + Number) + Number L),\n                  *((_QWORD *)a1 + Number) + Number L, a1,\n                  *((_QWORD *)a1 + Number));\n  }\n  *a2 = *((_QWORD *)a1 + Number);\n  return Number L;\n}", "code_t": "int __cdecl tls_get_message_body(SSL *s, size_t *len) {\n  size_t readbytes;\n  int i;\n  unsigned __int8 *p;\n  size_t n;\n  if (s->s3->tmp.message_type == Number) {\n    *len = s->init_num;\n    return Number;\n  }\n  p = (unsigned __int8 *)s->init_msg;\n  for (n = s->s3->tmp.message_size - s->init_num; n; n -= readbytes) {\n    i = s->method->ssl_read_bytes(s, Number, Number L, &p[s->init_num], n,\n                                  Number, &readbytes);\n    if (i <= Number) {\n      s->rwstate = Number;\n      *len = Number L;\n      return Number;\n    }\n    s->init_num += readbytes;\n  }\n  if (*s->init_buf->data == Number && !ssl3_take_mac(s)) {\n    *len = Number L;\n    return Number;\n  }\n  if ((unsigned int)RECORD_LAYER_is_sslv2_record(&s->rlayer)) {\n    if (!(unsigned int)ssl3_finish_mac(s, s->init_buf->data, s->init_num)) {\n      *len = Number L;\n      return Number;\n    }\n    if (s->msg_callback)\n      s->msg_callback(Number, Number, Number, s->init_buf->data, s->init_num, s,\n                      s->msg_callback_arg);\n  } else {\n    if (((s->method->ssl3_enc->enc_flags & Number) != Number ||\n         s->method->version <= Number || s->method->version == Number ||\n         s->s3->tmp.message_type != Number &&\n             s->s3->tmp.message_type != Number) &&\n        (s->s3->tmp.message_type != Number || s->init_num <= Number ||\n         memcmp(hrrrandom, s->init_buf->data + Number, Number)) &&\n        !(unsigned int)ssl3_finish_mac(s, s->init_buf->data,\n                                       s->init_num + Number)) {\n      *len = Number L;\n      return Number;\n    }\n    if (s->msg_callback)\n      s->msg_callback(Number, s->version, Number, s->init_buf->data,\n                      s->init_num + Number, s, s->msg_callback_arg);\n  }\n  *len = s->init_num;\n  return Number;\n}", "var": [], "body_in_train": false}, {"repo_owner": "Bvangoor", "repo_name": "Operating-Systems-506", "path": "Bvangoor/Operating-Systems-506/ddcdd56ad3bfc44d10eb3fc3a3da793efd77abb7fe5481908c20673d43f42e73", "path_in_repo": "Bvangoor/Operating-Systems-506/HomeWork2/hw2-bvangoor/tools/perf/ui/helpline.o", "objdump": "000000000000011a <ui_helpline__vpush>:\n 11a:\t55                   \tpush   %rbp\n 11b:\t48 89 e5             \tmov    %rsp,%rbp\n 11e:\t48 83 ec 20          \tsub    $0x20,%rsp\n 122:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 126:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n 12a:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 131:\t00 00 \n 133:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 137:\t31 c0                \txor    %eax,%eax\n 139:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 13d:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n 141:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n 145:\t48 89 ce             \tmov    %rcx,%rsi\n 148:\t48 89 c7             \tmov    %rax,%rdi\n 14b:\te8 00 00 00 00       \tcallq  150 <ui_helpline__vpush+0x36>\n 150:\t85 c0                \ttest   %eax,%eax\n 152:\t79 1c                \tjns    170 <ui_helpline__vpush+0x56>\n 154:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 15b <ui_helpline__vpush+0x41>\n 15b:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n 15f:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n 163:\t48 89 ce             \tmov    %rcx,%rsi\n 166:\t48 89 c7             \tmov    %rax,%rdi\n 169:\te8 00 00 00 00       \tcallq  16e <ui_helpline__vpush+0x54>\n 16e:\teb 18                \tjmp    188 <ui_helpline__vpush+0x6e>\n 170:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 174:\t48 89 c7             \tmov    %rax,%rdi\n 177:\te8 00 00 00 00       \tcallq  17c <ui_helpline__vpush+0x62>\n 17c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 180:\t48 89 c7             \tmov    %rax,%rdi\n 183:\te8 00 00 00 00       \tcallq  188 <ui_helpline__vpush+0x6e>\n 188:\t90                   \tnop\n 189:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 18d:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 194:\t00 00 \n 196:\t74 05                \tje     19d <ui_helpline__vpush+0x83>\n 198:\te8 00 00 00 00       \tcallq  19d <ui_helpline__vpush+0x83>\n 19d:\tc9                   \tleaveq \n 19e:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall ui_helpline__vpush(const char *a1, void *a2) {\n  char *ptr;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (vasprintf(&ptr, a1, a2) >= Number) {\n    ui_helpline__push((__int64)ptr);\n    free(ptr);\n  } else {\n    vfprintf(stderr, a1, a2);\n  }\n  return __readfsqword(Number) ^ v4;\n}", "code_t": "void __cdecl ui_helpline__vpush(const char *fmt, __va_list_tag *ap) {\n  char *s[Number];\n  s[Number] = (char *)__readfsqword(Number);\n  if (vasprintf(s, fmt, ap) >= Number) {\n    ui_helpline__push(s[Number]);\n    free(s[Number]);\n  } else {\n    (*(void(__fastcall **)(struct _IO_FILE *, const char *,\n                           __va_list_tag *))vfprintf)(stderr, fmt, ap);\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/c6a3e3ec9a797a9e95ce5b7b29267efc9da9440ad075b5fc4eea708a0b99b4f9", "path_in_repo": "XanClic/qemu//ppc-softmmu/accel/tcg/cputlb.o", "objdump": "0000000000008e9a <helper_atomic_fetch_orl_le_mmu>:\n    8e9a:\t55                   \tpush   %rbp\n    8e9b:\t48 89 e5             \tmov    %rsp,%rbp\n    8e9e:\t48 83 ec 30          \tsub    $0x30,%rsp\n    8ea2:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    8ea6:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    8ea9:\t89 55 e0             \tmov    %edx,-0x20(%rbp)\n    8eac:\t89 4d dc             \tmov    %ecx,-0x24(%rbp)\n    8eaf:\t4c 89 45 d0          \tmov    %r8,-0x30(%rbp)\n    8eb3:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n    8eb7:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    8eba:\t8b 75 e4             \tmov    -0x1c(%rbp),%esi\n    8ebd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    8ec1:\t48 89 c7             \tmov    %rax,%rdi\n    8ec4:\te8 7e b4 ff ff       \tcallq  4347 <atomic_mmu_lookup>\n    8ec9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    8ecd:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    8ed0:\t89 c7                \tmov    %eax,%edi\n    8ed2:\te8 99 7c ff ff       \tcallq  b70 <get_mmuidx>\n    8ed7:\t89 c2                \tmov    %eax,%edx\n    8ed9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    8ede:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    8ee3:\te8 31 81 ff ff       \tcallq  1019 <trace_mem_build_info_no_se_le>\n    8ee8:\t66 89 45 f2          \tmov    %ax,-0xe(%rbp)\n    8eec:\t0f b7 55 f2          \tmovzwl -0xe(%rbp),%edx\n    8ef0:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n    8ef3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    8ef7:\t89 ce                \tmov    %ecx,%esi\n    8ef9:\t48 89 c7             \tmov    %rax,%rdi\n    8efc:\te8 5b cc ff ff       \tcallq  5b5c <atomic_trace_rmw_pre>\n    8f01:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    8f05:\t8b 02                \tmov    (%rdx),%eax\n    8f07:\t89 c6                \tmov    %eax,%esi\n    8f09:\t89 c1                \tmov    %eax,%ecx\n    8f0b:\t0b 4d e0             \tor     -0x20(%rbp),%ecx\n    8f0e:\tf0 0f b1 0a          \tlock cmpxchg %ecx,(%rdx)\n    8f12:\t0f 94 c1             \tsete   %cl\n    8f15:\t84 c9                \ttest   %cl,%cl\n    8f17:\t74 ee                \tje     8f07 <helper_atomic_fetch_orl_le_mmu+0x6d>\n    8f19:\t89 75 f4             \tmov    %esi,-0xc(%rbp)\n    8f1c:\t0f b7 55 f2          \tmovzwl -0xe(%rbp),%edx\n    8f20:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n    8f23:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    8f27:\t89 ce                \tmov    %ecx,%esi\n    8f29:\t48 89 c7             \tmov    %rax,%rdi\n    8f2c:\te8 85 cc ff ff       \tcallq  5bb6 <atomic_trace_rmw_post>\n    8f31:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    8f34:\tc9                   \tleaveq \n    8f35:\tc3                   \tretq   ", "code_s": "__int64 __fastcall helper_atomic_fetch_orl_le_mmu(__int64 a1, unsigned int a2,\n                                                  int a3, unsigned int a4,\n                                                  __int64 a5) {\n  char v5;\n  signed __int32 v6;\n  unsigned __int32 v7;\n  signed __int32 v8;\n  char v10;\n  unsigned __int16 v12;\n  volatile signed __int32 *v13;\n  v10 = a4;\n  v13 = (volatile signed __int32 *)atomic_mmu_lookup(a1, a2, a4, a5);\n  v5 = get_mmuidx(v10);\n  v12 = trace_mem_build_info_no_se_le(Number, Number, v5);\n  atomic_trace_rmw_pre(a1, a2, v12);\n  v6 = *v13;\n  do {\n    v7 = v6;\n    v8 = v6;\n    v6 = _InterlockedCompareExchange(v13, a3 | v6, v6);\n  } while (v8 != v6);\n  atomic_trace_rmw_post(a1);\n  return v7;\n}", "code_t": "uint32_t __cdecl helper_atomic_fetch_orl_le_mmu(CPUArchState *env,\n                                                target_ulong addr, uint32_t val,\n                                                TCGMemOpIdx oi,\n                                                uintptr_t retaddr) {\n  unsigned int v5;\n  signed __int32 v6;\n  uint32_t v7;\n  signed __int32 v8;\n  uint16_t info;\n  volatile signed __int32 *haddr;\n  haddr = (volatile signed __int32 *)atomic_mmu_lookup(env, addr, oi, retaddr);\n  v5 = get_mmuidx(oi);\n  info = trace_mem_build_info_no_se_le(Number, Number, v5);\n  atomic_trace_rmw_pre(env, addr, info);\n  v6 = *haddr;\n  do {\n    v7 = v6;\n    v8 = v6;\n    v6 = _InterlockedCompareExchange(haddr, val | v6, v6);\n  } while (v8 != v6);\n  atomic_trace_rmw_post(env, addr, info);\n  return v7;\n}", "var": [], "body_in_train": true}, {"repo_owner": "HexHive", "repo_name": "SMoTherSpectre", "path": "HexHive/SMoTherSpectre/2613df62911a163448f37be1b5391610f5f958f48c1ed5ce06a64ee4ee101414", "path_in_repo": "HexHive/SMoTherSpectre/openssl_attack/openssl/crypto/bn/bn_mont.o", "objdump": "000000000000076d <BN_MONT_CTX_set>:\n 76d:\t55                   \tpush   %rbp\n 76e:\t48 89 e5             \tmov    %rsp,%rbp\n 771:\t48 83 ec 60          \tsub    $0x60,%rsp\n 775:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n 779:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n 77d:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n 781:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n 788:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 78c:\t48 89 c7             \tmov    %rax,%rdi\n 78f:\te8 00 00 00 00       \tcallq  794 <BN_MONT_CTX_set+0x27>\n 794:\t85 c0                \ttest   %eax,%eax\n 796:\t74 0a                \tje     7a2 <BN_MONT_CTX_set+0x35>\n 798:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 79d:\te9 35 03 00 00       \tjmpq   ad7 <BN_MONT_CTX_set+0x36a>\n 7a2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 7a6:\t48 89 c7             \tmov    %rax,%rdi\n 7a9:\te8 00 00 00 00       \tcallq  7ae <BN_MONT_CTX_set+0x41>\n 7ae:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 7b2:\t48 89 c7             \tmov    %rax,%rdi\n 7b5:\te8 00 00 00 00       \tcallq  7ba <BN_MONT_CTX_set+0x4d>\n 7ba:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 7be:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 7c3:\t0f 84 e6 02 00 00    \tje     aaf <BN_MONT_CTX_set+0x342>\n 7c9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 7cd:\t48 83 c0 08          \tadd    $0x8,%rax\n 7d1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 7d5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 7d9:\t48 8d 50 20          \tlea    0x20(%rax),%rdx\n 7dd:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 7e1:\t48 89 c6             \tmov    %rax,%rsi\n 7e4:\t48 89 d7             \tmov    %rdx,%rdi\n 7e7:\te8 00 00 00 00       \tcallq  7ec <BN_MONT_CTX_set+0x7f>\n 7ec:\t48 85 c0             \ttest   %rax,%rax\n 7ef:\t0f 84 bd 02 00 00    \tje     ab2 <BN_MONT_CTX_set+0x345>\n 7f5:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 7f9:\tbe 04 00 00 00       \tmov    $0x4,%esi\n 7fe:\t48 89 c7             \tmov    %rax,%rdi\n 801:\te8 00 00 00 00       \tcallq  806 <BN_MONT_CTX_set+0x99>\n 806:\t85 c0                \ttest   %eax,%eax\n 808:\t74 15                \tje     81f <BN_MONT_CTX_set+0xb2>\n 80a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 80e:\t48 83 c0 20          \tadd    $0x20,%rax\n 812:\tbe 04 00 00 00       \tmov    $0x4,%esi\n 817:\t48 89 c7             \tmov    %rax,%rdi\n 81a:\te8 00 00 00 00       \tcallq  81f <BN_MONT_CTX_set+0xb2>\n 81f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 823:\tc7 40 30 00 00 00 00 \tmovl   $0x0,0x30(%rax)\n 82a:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 82e:\t48 89 c7             \tmov    %rax,%rdi\n 831:\te8 00 00 00 00       \tcallq  836 <BN_MONT_CTX_set+0xc9>\n 836:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 83a:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 83e:\tc7 45 dc 02 00 00 00 \tmovl   $0x2,-0x24(%rbp)\n 845:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n 84c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 850:\tbe 04 00 00 00       \tmov    $0x4,%esi\n 855:\t48 89 c7             \tmov    %rax,%rdi\n 858:\te8 00 00 00 00       \tcallq  85d <BN_MONT_CTX_set+0xf0>\n 85d:\t85 c0                \ttest   %eax,%eax\n 85f:\t74 11                \tje     872 <BN_MONT_CTX_set+0x105>\n 861:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 865:\tbe 04 00 00 00       \tmov    $0x4,%esi\n 86a:\t48 89 c7             \tmov    %rax,%rdi\n 86d:\te8 00 00 00 00       \tcallq  872 <BN_MONT_CTX_set+0x105>\n 872:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 876:\t48 89 c7             \tmov    %rax,%rdi\n 879:\te8 00 00 00 00       \tcallq  87e <BN_MONT_CTX_set+0x111>\n 87e:\t83 c0 3f             \tadd    $0x3f,%eax\n 881:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n 884:\t85 c0                \ttest   %eax,%eax\n 886:\t0f 48 c2             \tcmovs  %edx,%eax\n 889:\tc1 f8 06             \tsar    $0x6,%eax\n 88c:\tc1 e0 06             \tshl    $0x6,%eax\n 88f:\t89 c2                \tmov    %eax,%edx\n 891:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 895:\t89 10                \tmov    %edx,(%rax)\n 897:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 89b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 8a0:\t48 89 c7             \tmov    %rax,%rdi\n 8a3:\te8 00 00 00 00       \tcallq  8a8 <BN_MONT_CTX_set+0x13b>\n 8a8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 8ac:\tbe 40 00 00 00       \tmov    $0x40,%esi\n 8b1:\t48 89 c7             \tmov    %rax,%rdi\n 8b4:\te8 00 00 00 00       \tcallq  8b9 <BN_MONT_CTX_set+0x14c>\n 8b9:\t85 c0                \ttest   %eax,%eax\n 8bb:\t0f 84 f4 01 00 00    \tje     ab5 <BN_MONT_CTX_set+0x348>\n 8c1:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 8c5:\t48 8b 00             \tmov    (%rax),%rax\n 8c8:\t48 8b 00             \tmov    (%rax),%rax\n 8cb:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n 8cf:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n 8d6:\t00 \n 8d7:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 8db:\t48 85 c0             \ttest   %rax,%rax\n 8de:\t0f 95 c0             \tsetne  %al\n 8e1:\t0f b6 c0             \tmovzbl %al,%eax\n 8e4:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n 8e7:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 8eb:\t48 89 c7             \tmov    %rax,%rdi\n 8ee:\te8 00 00 00 00       \tcallq  8f3 <BN_MONT_CTX_set+0x186>\n 8f3:\t85 c0                \ttest   %eax,%eax\n 8f5:\t74 13                \tje     90a <BN_MONT_CTX_set+0x19d>\n 8f7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 8fb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 900:\t48 89 c7             \tmov    %rax,%rdi\n 903:\te8 00 00 00 00       \tcallq  908 <BN_MONT_CTX_set+0x19b>\n 908:\teb 21                \tjmp    92b <BN_MONT_CTX_set+0x1be>\n 90a:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n 90e:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n 912:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n 916:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 91a:\t48 89 c7             \tmov    %rax,%rdi\n 91d:\te8 00 00 00 00       \tcallq  922 <BN_MONT_CTX_set+0x1b5>\n 922:\t48 85 c0             \ttest   %rax,%rax\n 925:\t0f 84 8d 01 00 00    \tje     ab8 <BN_MONT_CTX_set+0x34b>\n 92b:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n 92f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 933:\tba 40 00 00 00       \tmov    $0x40,%edx\n 938:\t48 89 ce             \tmov    %rcx,%rsi\n 93b:\t48 89 c7             \tmov    %rax,%rdi\n 93e:\te8 00 00 00 00       \tcallq  943 <BN_MONT_CTX_set+0x1d6>\n 943:\t85 c0                \ttest   %eax,%eax\n 945:\t0f 84 70 01 00 00    \tje     abb <BN_MONT_CTX_set+0x34e>\n 94b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 94f:\t48 89 c7             \tmov    %rax,%rdi\n 952:\te8 00 00 00 00       \tcallq  957 <BN_MONT_CTX_set+0x1ea>\n 957:\t85 c0                \ttest   %eax,%eax\n 959:\t75 1a                \tjne    975 <BN_MONT_CTX_set+0x208>\n 95b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 95f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 964:\t48 89 c7             \tmov    %rax,%rdi\n 967:\te8 00 00 00 00       \tcallq  96c <BN_MONT_CTX_set+0x1ff>\n 96c:\t85 c0                \ttest   %eax,%eax\n 96e:\t75 20                \tjne    990 <BN_MONT_CTX_set+0x223>\n 970:\te9 53 01 00 00       \tjmpq   ac8 <BN_MONT_CTX_set+0x35b>\n 975:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 979:\t48 c7 c6 ff ff ff ff \tmov    $0xffffffffffffffff,%rsi\n 980:\t48 89 c7             \tmov    %rax,%rdi\n 983:\te8 00 00 00 00       \tcallq  988 <BN_MONT_CTX_set+0x21b>\n 988:\t85 c0                \ttest   %eax,%eax\n 98a:\t0f 84 2e 01 00 00    \tje     abe <BN_MONT_CTX_set+0x351>\n 990:\t48 8b 75 a8          \tmov    -0x58(%rbp),%rsi\n 994:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n 998:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 99c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 9a0:\t49 89 f0             \tmov    %rsi,%r8\n 9a3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 9a8:\t48 89 c7             \tmov    %rax,%rdi\n 9ab:\te8 00 00 00 00       \tcallq  9b0 <BN_MONT_CTX_set+0x243>\n 9b0:\t85 c0                \ttest   %eax,%eax\n 9b2:\t0f 84 09 01 00 00    \tje     ac1 <BN_MONT_CTX_set+0x354>\n 9b8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 9bc:\t8b 40 08             \tmov    0x8(%rax),%eax\n 9bf:\t85 c0                \ttest   %eax,%eax\n 9c1:\t7e 0c                \tjle    9cf <BN_MONT_CTX_set+0x262>\n 9c3:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 9c7:\t48 8b 00             \tmov    (%rax),%rax\n 9ca:\t48 8b 00             \tmov    (%rax),%rax\n 9cd:\teb 05                \tjmp    9d4 <BN_MONT_CTX_set+0x267>\n 9cf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 9d4:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n 9d8:\t48 89 42 50          \tmov    %rax,0x50(%rdx)\n 9dc:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 9e0:\t48 c7 40 58 00 00 00 \tmovq   $0x0,0x58(%rax)\n 9e7:\t00 \n 9e8:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 9ec:\t48 83 c0 08          \tadd    $0x8,%rax\n 9f0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 9f5:\t48 89 c7             \tmov    %rax,%rdi\n 9f8:\te8 00 00 00 00       \tcallq  9fd <BN_MONT_CTX_set+0x290>\n 9fd:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a01:\t8b 00                \tmov    (%rax),%eax\n a03:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n a06:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a0a:\t48 83 c0 08          \tadd    $0x8,%rax\n a0e:\t89 d6                \tmov    %edx,%esi\n a10:\t48 89 c7             \tmov    %rax,%rdi\n a13:\te8 00 00 00 00       \tcallq  a18 <BN_MONT_CTX_set+0x2ab>\n a18:\t85 c0                \ttest   %eax,%eax\n a1a:\t0f 84 a4 00 00 00    \tje     ac4 <BN_MONT_CTX_set+0x357>\n a20:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a24:\t48 8d 48 20          \tlea    0x20(%rax),%rcx\n a28:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a2c:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n a30:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a34:\t48 83 c0 08          \tadd    $0x8,%rax\n a38:\t48 8b 75 a8          \tmov    -0x58(%rbp),%rsi\n a3c:\t49 89 f0             \tmov    %rsi,%r8\n a3f:\t48 89 c6             \tmov    %rax,%rsi\n a42:\tbf 00 00 00 00       \tmov    $0x0,%edi\n a47:\te8 00 00 00 00       \tcallq  a4c <BN_MONT_CTX_set+0x2df>\n a4c:\t85 c0                \ttest   %eax,%eax\n a4e:\t74 77                \tje     ac7 <BN_MONT_CTX_set+0x35a>\n a50:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a54:\t8b 40 10             \tmov    0x10(%rax),%eax\n a57:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n a5a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a5e:\t8b 40 28             \tmov    0x28(%rax),%eax\n a61:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n a64:\teb 20                \tjmp    a86 <BN_MONT_CTX_set+0x319>\n a66:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a6a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n a6e:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n a71:\t48 63 d2             \tmovslq %edx,%rdx\n a74:\t48 c1 e2 03          \tshl    $0x3,%rdx\n a78:\t48 01 d0             \tadd    %rdx,%rax\n a7b:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n a82:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n a86:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n a89:\t3b 45 f8             \tcmp    -0x8(%rbp),%eax\n a8c:\t7c d8                \tjl     a66 <BN_MONT_CTX_set+0x2f9>\n a8e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a92:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n a95:\t89 50 10             \tmov    %edx,0x10(%rax)\n a98:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n a9c:\t8b 50 1c             \tmov    0x1c(%rax),%edx\n a9f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n aa3:\t89 50 1c             \tmov    %edx,0x1c(%rax)\n aa6:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n aad:\teb 19                \tjmp    ac8 <BN_MONT_CTX_set+0x35b>\n aaf:\t90                   \tnop\n ab0:\teb 16                \tjmp    ac8 <BN_MONT_CTX_set+0x35b>\n ab2:\t90                   \tnop\n ab3:\teb 13                \tjmp    ac8 <BN_MONT_CTX_set+0x35b>\n ab5:\t90                   \tnop\n ab6:\teb 10                \tjmp    ac8 <BN_MONT_CTX_set+0x35b>\n ab8:\t90                   \tnop\n ab9:\teb 0d                \tjmp    ac8 <BN_MONT_CTX_set+0x35b>\n abb:\t90                   \tnop\n abc:\teb 0a                \tjmp    ac8 <BN_MONT_CTX_set+0x35b>\n abe:\t90                   \tnop\n abf:\teb 07                \tjmp    ac8 <BN_MONT_CTX_set+0x35b>\n ac1:\t90                   \tnop\n ac2:\teb 04                \tjmp    ac8 <BN_MONT_CTX_set+0x35b>\n ac4:\t90                   \tnop\n ac5:\teb 01                \tjmp    ac8 <BN_MONT_CTX_set+0x35b>\n ac7:\t90                   \tnop\n ac8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n acc:\t48 89 c7             \tmov    %rax,%rdi\n acf:\te8 00 00 00 00       \tcallq  ad4 <BN_MONT_CTX_set+0x367>\n ad4:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n ad7:\tc9                   \tleaveq \n ad8:\tc3                   \tretq   ", "code_s": "__int64 __fastcall BN_MONT_CTX_set(__int64 a1, __int64 **a2, __int64 a3) {\n  __int64 v4;\n  __int64 v6[Number];\n  __int64 *<span class=\"supfact\">v7</span>;\n  _BOOL4 v8;\n  int v9;\n  int v10;\n  __int64 v11;\n  int *v12;\n  unsigned int v13;\n  int v14;\n  v13 = Number;\n  if ((unsigned int)BN_is_zero(a2))\n    return Number L;\n  BN_CTX_start(a3);\n  v12 = (int *)BN_CTX_get(a3);\n  if (v12) {\n    v11 = a1 + Number;\n    if (BN_copy(a1 + Number, a2)) {\n      if ((unsigned int)BN_get_flags(a2, Number L))\n        BN_set_flags(a1 + Number, Number L);\n      *(_DWORD *)(a1 + Number) = Number;\n      bn_init(&<span class=\"supfact\">v7</span>);\n      <span class=\"supfact\">v7</span> = v6;\n      v9 = Number;\n      v10 = Number;\n      if ((unsigned int)BN_get_flags(a2, Number L))\n        BN_set_flags(&<span class=\"supfact\">v7</span>, Number L);\n      *(_DWORD *)a1 = ((int)(BN_num_bits(a2) + Number) / Number) << Number;\n      BN_set_word(v11, Number L);\n      if ((unsigned int)BN_set_bit(v11, Number L)) {\n        v6[Number] = **a2;\n        v6[Number] = Number L;\n        v8 = v6[Number] != Number;\n        if ((unsigned int)BN_is_one(&<span class=\"supfact\">v7</span>)) {\n          BN_set_word(v12, Number L);\n        } else if (!BN_mod_inverse(v12, v11, &<span class=\"supfact\">v7</span>, a3)) {\n          goto LABEL_28;\n        }\n        if ((unsigned int)BN_lshift(v12, v12, Number L)) {\n          if (!(unsigned int)BN_is_zero(v12)) {\n            if (!(unsigned int)BN_sub_word(v12, Number L))\n              goto LABEL_28;\n          LABEL_18:\n            if ((unsigned int)BN_div(v12, Number L, v12, &<span class=\"supfact\">v7</span>,\n                                     a3)) {\n              if (v12[Number] <= Number)\n                v4 = Number L;\n              else\n                v4 = **(_QWORD **)v12;\n              *(_QWORD *)(a1 + Number) = v4;\n              *(_QWORD *)(a1 + Number) = Number L;\n              BN_set_word(a1 + Number, Number L);\n              if ((unsigned int)BN_set_bit(\n                      a1 + Number, (unsigned int)(Number * *(_DWORD *)a1)) &&\n                  (unsigned int)BN_div(Number L, a1 + Number, a1 + Number,\n                                       a1 + Number, a3)) {\n                v14 = *(_DWORD *)(a1 + Number);\n                v13 = *(_DWORD *)(a1 + Number);\n                while (v14 < (int)v13)\n                  *(_QWORD *)(Number L * v14++ + *(_QWORD *)(a1 + Number)) =\n                      Number L;\n                *(_DWORD *)(a1 + Number) = v13;\n                *(_DWORD *)(a1 + Number) = *(_DWORD *)(a1 + Number);\n                v13 = Number;\n              }\n            }\n            goto LABEL_28;\n          }\n          if ((unsigned int)BN_set_word(v12, Number))\n            goto LABEL_18;\n        }\n      }\n    }\n  }\nLABEL_28:\n  BN_CTX_end(a3);\n  return v13;\n}", "code_t": "int __cdecl BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx) {\n  unsigned __int64 v4;\n  unsigned __int64 buf[Number];\n  BIGNUM <span class=\"supfact\">tmod</span>;\n  BIGNUM *R;\n  BIGNUM *Ri;\n  int ret;\n  int i;\n  ret = Number;\n  if ((unsigned int)BN_is_zero(mod))\n    return Number;\n  BN_CTX_start(ctx);\n  Ri = (BIGNUM *)BN_CTX_get(ctx);\n  if (Ri) {\n    R = &mont->RR;\n    if (BN_copy(&mont->N, mod)) {\n      if ((unsigned int)BN_get_flags(mod, Number L))\n        BN_set_flags(&mont->N, Number L);\n      mont->N.neg = Number;\n      bn_init(&<span class=\"supfact\">tmod</span>);\n      <span class=\"supfact\">tmod</span>.d = buf;\n      <span class=\"supfact\">tmod</span>.dmax = Number;\n      <span class=\"supfact\">tmod</span>.neg = Number;\n      if ((unsigned int)BN_get_flags(mod, Number L))\n        BN_set_flags(&<span class=\"supfact\">tmod</span>, Number L);\n      mont->ri = ((int)(BN_num_bits(mod) + Number) / Number) << Number;\n      BN_set_word(R, Number L);\n      if ((unsigned int)BN_set_bit(R, Number L)) {\n        buf[Number] = *mod->d;\n        buf[Number] = Number L;\n        <span class=\"supfact\">tmod</span>.top = buf[Number] != Number;\n        if ((unsigned int)BN_is_one(&<span class=\"supfact\">tmod</span>)) {\n          BN_set_word(Ri, Number L);\n        } else if (!BN_mod_inverse(Ri, R, &<span class=\"supfact\">tmod</span>, ctx)) {\n          goto err;\n        }\n        if ((unsigned int)BN_lshift(Ri, Ri, Number L)) {\n          if (!(unsigned int)BN_is_zero(Ri)) {\n            if (!(unsigned int)BN_sub_word(Ri, Number L))\n              goto err;\n          LABEL_18:\n            if ((unsigned int)BN_div(Ri, Number L, Ri, &<span class=\"supfact\">tmod</span>,\n                                     ctx)) {\n              if (Ri->top <= Number)\n                v4 = Number L;\n              else\n                v4 = *Ri->d;\n              mont->n0[Number] = v4;\n              mont->n0[Number] = Number L;\n              BN_set_word(&mont->RR, Number L);\n              if ((unsigned int)BN_set_bit(&mont->RR,\n                                           (unsigned int)(Number * mont->ri)) &&\n                  (unsigned int)BN_div(Number L, &mont->RR, &mont->RR, &mont->N,\n                                       ctx)) {\n                i = mont->RR.top;\n                ret = mont->N.top;\n                while (i < ret)\n                  mont->RR.d[i++] = Number L;\n                mont->RR.top = ret;\n                mont->RR.flags = mont->RR.flags;\n                ret = Number;\n              }\n            }\n            goto err;\n          }\n          if ((unsigned int)BN_set_word(Ri, Number))\n            goto LABEL_18;\n        }\n      }\n    }\n  }\nerr:\n  BN_CTX_end(ctx);\n  return ret;\n}", "var": [{"name": "v7", "type": "struct BIGNUM { unsigned __int64 * d; int top; int dmax; int neg; int flags; }", "pred_name": "tmod", "ref_name": "tmod", "ref_type": "struct BIGNUM { unsigned __int64 * d; int top; int dmax; int neg; int flags; }"}], "body_in_train": true}, {"repo_owner": "xgamecoindev", "repo_name": "lightning", "path": "xgamecoindev/lightning/33cdb47c054f0a2548a74af86b9b72fe9895a8698338723d9f143609742e3cfd", "path_in_repo": "xgamecoindev/lightning//ccan-crypto-ripemd160.o", "objdump": "00000000000026d6 <ripemd160_u64>:\n    26d6:\t55                   \tpush   %rbp\n    26d7:\t48 89 e5             \tmov    %rsp,%rbp\n    26da:\t48 83 ec 10          \tsub    $0x10,%rsp\n    26de:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    26e2:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n    26e6:\t48 8d 4d f0          \tlea    -0x10(%rbp),%rcx\n    26ea:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    26ee:\tba 08 00 00 00       \tmov    $0x8,%edx\n    26f3:\t48 89 ce             \tmov    %rcx,%rsi\n    26f6:\t48 89 c7             \tmov    %rax,%rdi\n    26f9:\te8 00 00 00 00       \tcallq  26fe <ripemd160_u64+0x28>\n    26fe:\t90                   \tnop\n    26ff:\tc9                   \tleaveq \n    2700:\tc3                   \tretq   ", "code_s": "int *__fastcall ripemd160_u64(__int64 a1, __int64 a2) {\n  __int64 v3[Number];\n  v3[Number] = a1;\n  v3[Number] = a2;\n  return ripemd160_update(a1, (unsigned int *)v3, Number);\n}", "code_t": "void __cdecl ripemd160_u64(ripemd160_ctx *ctx, uint64_t v) {\n  uint64_t va;\n  ripemd160_ctx *ctxa;\n  ctxa = ctx;\n  va = v;\n  ripemd160_update(ctx, &va, Number);\n}", "var": [], "body_in_train": false}, {"repo_owner": "bvberkum", "repo_name": "udanax-1999-09-29", "path": "bvberkum/udanax-1999-09-29/dde1ee360dfb75b69b1ba27a7eb86c78b167f39ae7284489722f56d89bdc8d14", "path_in_repo": "bvberkum/udanax-1999-09-29/green/be_source/get2fe.o", "objdump": "00000000000005f6 <getvspec>:\n 5f6:\t55                   \tpush   %rbp\n 5f7:\t48 89 e5             \tmov    %rsp,%rbp\n 5fa:\t48 83 ec 10          \tsub    $0x10,%rsp\n 5fe:\te8 00 00 00 00       \tcallq  603 <getvspec+0xd>\n 603:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n 607:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n 60b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 60f:\tc6 40 08 03          \tmovb   $0x3,0x8(%rax)\n 613:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 617:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n 61e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 622:\t48 8d 50 10          \tlea    0x10(%rax),%rdx\n 626:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 62a:\t48 89 d6             \tmov    %rdx,%rsi\n 62d:\t48 89 c7             \tmov    %rax,%rdi\n 630:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 635:\te8 00 00 00 00       \tcallq  63a <getvspec+0x44>\n 63a:\t85 c0                \ttest   %eax,%eax\n 63c:\t74 2c                \tje     66a <getvspec+0x74>\n 63e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 642:\t48 8d 48 48          \tlea    0x48(%rax),%rcx\n 646:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 64a:\tba 02 00 00 00       \tmov    $0x2,%edx\n 64f:\t48 89 ce             \tmov    %rcx,%rsi\n 652:\t48 89 c7             \tmov    %rax,%rdi\n 655:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 65a:\te8 00 00 00 00       \tcallq  65f <getvspec+0x69>\n 65f:\t85 c0                \ttest   %eax,%eax\n 661:\t74 07                \tje     66a <getvspec+0x74>\n 663:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 668:\teb 05                \tjmp    66f <getvspec+0x79>\n 66a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 66f:\tc9                   \tleaveq \n 670:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall getvspec(__int64 a1, __int64 a2) {\n  *(_BYTE *)(a2 + Number) = Number;\n  *(_QWORD *)a2 = Number L;\n  return gettumbler(a1, a2 + Number) &&\n         (unsigned int)getspanset(a1, a2 + Number, Number L);\n}", "code_t": "bool __cdecl getvspec(typetask *taskptr, typevspec *vspecptr) {\n  vspecptr->itemid = Number;\n  vspecptr->next = Number L;\n  return gettumbler(taskptr, &vspecptr->docisa) &&\n         getspanset(taskptr, &vspecptr->vspanset, Number);\n}", "var": [], "body_in_train": false}, {"repo_owner": "malczuuu", "repo_name": "battleships", "path": "malczuuu/battleships/e45ca0e0831d3a7422425629bf98a71c0c68710b50d13b369fa5e96ca5c4953e", "path_in_repo": "malczuuu/battleships//build/battleships", "objdump": "0000000000401232 <match>:\n  401232:\t55                   \tpush   %rbp\n  401233:\t48 89 e5             \tmov    %rsp,%rbp\n  401236:\t53                   \tpush   %rbx\n  401237:\t48 81 ec b8 00 00 00 \tsub    $0xb8,%rsp\n  40123e:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  401245:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n  40124c:\t48 89 95 48 ff ff ff \tmov    %rdx,-0xb8(%rbp)\n  401253:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n  40125a:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  40125e:\tba 09 00 00 00       \tmov    $0x9,%edx\n  401263:\t48 89 ce             \tmov    %rcx,%rsi\n  401266:\t48 89 c7             \tmov    %rax,%rdi\n  401269:\te8 22 fe ff ff       \tcallq  401090 <regcomp@plt>\n  40126e:\t85 c0                \ttest   %eax,%eax\n  401270:\t74 0a                \tje     40127c <match+0x4a>\n  401272:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401277:\te9 a0 01 00 00       \tjmpq   40141c <match+0x1ea>\n  40127c:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  401283:\t48 8b b5 50 ff ff ff \tmov    -0xb0(%rbp),%rsi\n  40128a:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  40128e:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  401294:\t48 89 d1             \tmov    %rdx,%rcx\n  401297:\tba 06 00 00 00       \tmov    $0x6,%edx\n  40129c:\t48 89 c7             \tmov    %rax,%rdi\n  40129f:\te8 3c fe ff ff       \tcallq  4010e0 <regexec@plt>\n  4012a4:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4012a7:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  4012ab:\t74 0a                \tje     4012b7 <match+0x85>\n  4012ad:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4012b2:\te9 65 01 00 00       \tjmpq   40141c <match+0x1ea>\n  4012b7:\t48 c7 85 68 ff ff ff \tmovq   $0x0,-0x98(%rbp)\n  4012be:\t00 00 00 00 \n  4012c2:\te8 79 fe ff ff       \tcallq  401140 <__ctype_b_loc@plt>\n  4012c7:\t48 8b 10             \tmov    (%rax),%rdx\n  4012ca:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4012d1:\t0f b6 00             \tmovzbl (%rax),%eax\n  4012d4:\t48 0f be c0          \tmovsbq %al,%rax\n  4012d8:\t48 01 c0             \tadd    %rax,%rax\n  4012db:\t48 01 d0             \tadd    %rdx,%rax\n  4012de:\t0f b7 00             \tmovzwl (%rax),%eax\n  4012e1:\t0f b7 c0             \tmovzwl %ax,%eax\n  4012e4:\t25 00 04 00 00       \tand    $0x400,%eax\n  4012e9:\t85 c0                \ttest   %eax,%eax\n  4012eb:\t74 6e                \tje     40135b <match+0x129>\n  4012ed:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4012f4:\t48 89 c7             \tmov    %rax,%rdi\n  4012f7:\te8 64 fd ff ff       \tcallq  401060 <strlen@plt>\n  4012fc:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n  401300:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  401307:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n  40130b:\t48 8d 85 68 ff ff ff \tlea    -0x98(%rbp),%rax\n  401312:\t48 89 ce             \tmov    %rcx,%rsi\n  401315:\t48 89 c7             \tmov    %rax,%rdi\n  401318:\te8 93 fd ff ff       \tcallq  4010b0 <memcpy@plt>\n  40131d:\t48 8d 85 68 ff ff ff \tlea    -0x98(%rbp),%rax\n  401324:\t48 89 c7             \tmov    %rax,%rdi\n  401327:\te8 c4 fd ff ff       \tcallq  4010f0 <atoi@plt>\n  40132c:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  401333:\t89 02                \tmov    %eax,(%rdx)\n  401335:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  40133c:\t0f b6 00             \tmovzbl (%rax),%eax\n  40133f:\t0f be c0             \tmovsbl %al,%eax\n  401342:\t89 c7                \tmov    %eax,%edi\n  401344:\te8 f7 fc ff ff       \tcallq  401040 <toupper@plt>\n  401349:\t8d 50 c0             \tlea    -0x40(%rax),%edx\n  40134c:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401353:\t89 50 04             \tmov    %edx,0x4(%rax)\n  401356:\te9 bc 00 00 00       \tjmpq   401417 <match+0x1e5>\n  40135b:\te8 e0 fd ff ff       \tcallq  401140 <__ctype_b_loc@plt>\n  401360:\t48 8b 18             \tmov    (%rax),%rbx\n  401363:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  40136a:\t48 89 c7             \tmov    %rax,%rdi\n  40136d:\te8 ee fc ff ff       \tcallq  401060 <strlen@plt>\n  401372:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n  401376:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  40137d:\t48 01 d0             \tadd    %rdx,%rax\n  401380:\t0f b6 00             \tmovzbl (%rax),%eax\n  401383:\t48 0f be c0          \tmovsbq %al,%rax\n  401387:\t48 01 c0             \tadd    %rax,%rax\n  40138a:\t48 01 d8             \tadd    %rbx,%rax\n  40138d:\t0f b7 00             \tmovzwl (%rax),%eax\n  401390:\t0f b7 c0             \tmovzwl %ax,%eax\n  401393:\t25 00 04 00 00       \tand    $0x400,%eax\n  401398:\t85 c0                \ttest   %eax,%eax\n  40139a:\t74 7b                \tje     401417 <match+0x1e5>\n  40139c:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4013a3:\t48 89 c7             \tmov    %rax,%rdi\n  4013a6:\te8 b5 fc ff ff       \tcallq  401060 <strlen@plt>\n  4013ab:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n  4013af:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n  4013b6:\t48 8d 85 68 ff ff ff \tlea    -0x98(%rbp),%rax\n  4013bd:\t48 89 ce             \tmov    %rcx,%rsi\n  4013c0:\t48 89 c7             \tmov    %rax,%rdi\n  4013c3:\te8 e8 fc ff ff       \tcallq  4010b0 <memcpy@plt>\n  4013c8:\t48 8d 85 68 ff ff ff \tlea    -0x98(%rbp),%rax\n  4013cf:\t48 89 c7             \tmov    %rax,%rdi\n  4013d2:\te8 19 fd ff ff       \tcallq  4010f0 <atoi@plt>\n  4013d7:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  4013de:\t89 02                \tmov    %eax,(%rdx)\n  4013e0:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4013e7:\t48 89 c7             \tmov    %rax,%rdi\n  4013ea:\te8 71 fc ff ff       \tcallq  401060 <strlen@plt>\n  4013ef:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n  4013f3:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n  4013fa:\t48 01 d0             \tadd    %rdx,%rax\n  4013fd:\t0f b6 00             \tmovzbl (%rax),%eax\n  401400:\t0f be c0             \tmovsbl %al,%eax\n  401403:\t89 c7                \tmov    %eax,%edi\n  401405:\te8 36 fc ff ff       \tcallq  401040 <toupper@plt>\n  40140a:\t8d 50 c0             \tlea    -0x40(%rax),%edx\n  40140d:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401414:\t89 50 04             \tmov    %edx,0x4(%rax)\n  401417:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40141c:\t48 81 c4 b8 00 00 00 \tadd    $0xb8,%rsp\n  401423:\t5b                   \tpop    %rbx\n  401424:\t5d                   \tpop    %rbp\n  401425:\tc3                   \tretq   ", "code_s": "__int64 __fastcall match(int *a1, const char *a2, const char *a3) {\n  size_t v4;\n  const unsigned __int16 *v5;\n  size_t v6;\n  size_t v7;\n  __int64 dest;\n  regmatch_t v9;\n  regex_t <span class=\"supfact\">preg</span>;\n  if (regcomp(&<span class=\"supfact\">preg</span>, a3, Number))\n    return Number L;\n  if (regexec(&<span class=\"supfact\">preg</span>, a2, Number, &v9, Number))\n    return Number;\n  dest = Number L;\n  if (((*__ctype_b_loc())[*a2] & Number) != Number) {\n    v4 = strlen(a2);\n    memcpy(&dest, a2 + Number, v4 - Number);\n    *a1 = atoi((const char *)&dest);\n    a1[Number] = toupper(*a2) - Number;\n  } else {\n    v5 = *__ctype_b_loc();\n    if ((v5[a2[strlen(a2) - Number]] & Number) != Number) {\n      v6 = strlen(a2);\n      memcpy(&dest, a2, v6 - Number);\n      *a1 = atoi((const char *)&dest);\n      v7 = strlen(a2);\n      a1[Number] = toupper(a2[v7 - Number]) - Number;\n    }\n  }\n  return Number L;\n}", "code_t": "int __cdecl match(coords_t *coords, char *string, char *pattern) {\n  size_t v4;\n  const unsigned __int16 *v5;\n  size_t v6;\n  size_t v7;\n  char buff[Number];\n  regmatch_t groups[Number];\n  regex_t <span class=\"supfact\">re</span>;\n  if (regcomp(&<span class=\"supfact\">re</span>, pattern, Number))\n    return Number;\n  if (regexec(&<span class=\"supfact\">re</span>, string, Number, groups, Number))\n    return Number;\n  *(_QWORD *)buff = Number L;\n  if (((*__ctype_b_loc())[*string] & Number) != Number) {\n    v4 = strlen(string);\n    memcpy(buff, string + Number, v4 - Number);\n    coords->x = atoi(buff);\n    coords->y = toupper(*string) - Number;\n  } else {\n    v5 = *__ctype_b_loc();\n    if ((v5[string[strlen(string) - Number]] & Number) != Number) {\n      v6 = strlen(string);\n      memcpy(buff, string, v6 - Number);\n      coords->x = atoi(buff);\n      v7 = strlen(string);\n      coords->y = toupper(string[v7 - Number]) - Number;\n    }\n  }\n  return Number;\n}", "var": [{"name": "preg", "type": "struct regex_t { re_dfa_t * buffer; __re_long_size_t allocated; __re_long_size_t used; reg_syntax_t syntax; char * fastmap; unsigned __int8 * translate; size_t re_nsub; unsigned __int32 : 1 can_be_null; unsigned __int32 : 2 regs_allocated; unsigned __int32 : 1 fastmap_accurate; unsigned __int32 : 1 no_sub; unsigned __int32 : 1 not_bol; unsigned __int32 : 1 not_eol; unsigned __int32 : 1 newline_anchor; PADDING (7); }", "pred_name": "reg", "ref_name": "re", "ref_type": "struct regex_t { re_dfa_t * __buffer; __re_long_size_t __allocated; __re_long_size_t __used; reg_syntax_t __syntax; char * __fastmap; unsigned __int8 * __translate; size_t re_nsub; unsigned __int32 : 1 __can_be_null; unsigned __int32 : 2 __regs_allocated; unsigned __int32 : 1 __fastmap_accurate; unsigned __int32 : 1 __no_sub; unsigned __int32 : 1 __not_bol; unsigned __int32 : 1 __not_eol; unsigned __int32 : 1 __newline_anchor; PADDING (7); }"}], "body_in_train": false}, {"repo_owner": "Notevill", "repo_name": "Reporter", "path": "Notevill/Reporter/cf01a52b4c37a3332459dbf279850b200158ddea5f86cd310f53da6a41102033", "path_in_repo": "Notevill/Reporter/IncludeLibraries/myhtml-master/examples/myhtml/serialization_high_level", "objdump": "000000000040d3a4 <myhtml_token_node_string>:\n  40d3a4:\t55                   \tpush   %rbp\n  40d3a5:\t48 89 e5             \tmov    %rsp,%rbp\n  40d3a8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  40d3ac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40d3b0:\t48 83 c0 08          \tadd    $0x8,%rax\n  40d3b4:\t5d                   \tpop    %rbp\n  40d3b5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall myhtml_token_node_string(__int64 a1) { return a1 + Number; }", "code_t": "mycore_string_t *__cdecl myhtml_token_node_string(\n    myhtml_token_node_t *token_node) {\n  return &token_node->str;\n}", "var": [], "body_in_train": true}, {"repo_owner": "shiv6146", "repo_name": "babble", "path": "shiv6146/babble/39eea0b109907aa55fcb9db241d3b407b0161e21cb6589f03ad911b39c4714bf", "path_in_repo": "shiv6146/babble/stage_4/stress_test.run", "objdump": "0000000000401e57 <read_data>:\n  401e57:\t55                   \tpush   %rbp\n  401e58:\t48 89 e5             \tmov    %rsp,%rbp\n  401e5b:\t48 83 ec 30          \tsub    $0x30,%rsp\n  401e5f:\t89 7d ec             \tmov    %edi,-0x14(%rbp)\n  401e62:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  401e66:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  401e6a:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  401e71:\t00 \n  401e72:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401e76:\t48 2b 45 f8          \tsub    -0x8(%rbp),%rax\n  401e7a:\t48 89 c2             \tmov    %rax,%rdx\n  401e7d:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  401e81:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401e85:\t48 01 c1             \tadd    %rax,%rcx\n  401e88:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  401e8b:\t48 89 ce             \tmov    %rcx,%rsi\n  401e8e:\t89 c7                \tmov    %eax,%edi\n  401e90:\te8 5b f2 ff ff       \tcallq  4010f0 <read@plt>\n  401e95:\t48 01 45 f8          \tadd    %rax,-0x8(%rbp)\n  401e99:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401e9d:\t48 3b 45 e0          \tcmp    -0x20(%rbp),%rax\n  401ea1:\t73 0c                \tjae    401eaf <read_data+0x58>\n  401ea3:\te8 a8 f1 ff ff       \tcallq  401050 <__errno_location@plt>\n  401ea8:\t8b 00                \tmov    (%rax),%eax\n  401eaa:\t83 f8 04             \tcmp    $0x4,%eax\n  401ead:\t74 c3                \tje     401e72 <read_data+0x1b>\n  401eaf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401eb3:\t48 3b 45 e0          \tcmp    -0x20(%rbp),%rax\n  401eb7:\t73 21                \tjae    401eda <read_data+0x83>\n  401eb9:\t48 8b 05 e0 43 00 00 \tmov    0x43e0(%rip),%rax        # 4062a0 <stderr@@GLIBC_2.2.5>\n  401ec0:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  401ec4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  401ec8:\tbe b1 43 40 00       \tmov    $0x4043b1,%esi\n  401ecd:\t48 89 c7             \tmov    %rax,%rdi\n  401ed0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401ed5:\te8 36 f2 ff ff       \tcallq  401110 <fprintf@plt>\n  401eda:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401ede:\t48 3b 45 e0          \tcmp    -0x20(%rbp),%rax\n  401ee2:\t75 06                \tjne    401eea <read_data+0x93>\n  401ee4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401ee8:\teb 05                \tjmp    401eef <read_data+0x98>\n  401eea:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  401eef:\tc9                   \tleaveq \n  401ef0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_data(int a1, unsigned __int64 a2, __int64 a3) {\n  __int64 result;\n  unsigned __int64 v5;\n  v5 = Number L;\n  do\n    v5 += read(a1, (void *)(v5 + a3), a2 - v5);\n  while (v5 < a2 && *__errno_location() == Number);\n  if (v5 < a2)\n    fprintf(stderr, String, v5, a2);\n  if (v5 == a2)\n    result = v5;\n  else\n    result = Number;\n  return result;\n}", "code_t": "int __cdecl read_data(int fd, unsigned __int64 size, void *buf) {\n  int result;\n  unsigned __int64 total_recv;\n  total_recv = Number L;\n  do\n    total_recv += read(fd, (char *)buf + total_recv, size - total_recv);\n  while (total_recv < size && *__errno_location() == Number);\n  if (total_recv < size)\n    fprintf(stderr, String, total_recv, size);\n  if (total_recv == size)\n    result = total_recv;\n  else\n    result = Number;\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "afni", "repo_name": "afni", "path": "afni/afni/12f9e4a9d90aa4f3633a7351f4acfc4d9829f9345666ef901b82ad04dd05acd1", "path_in_repo": "afni/afni/src/gifti/gifti_tool", "objdump": "00000000004347f4 <nifti_write_extensions>:\n  4347f4:\t55                   \tpush   %rbp\n  4347f5:\t48 89 e5             \tmov    %rsp,%rbp\n  4347f8:\t48 83 ec 30          \tsub    $0x30,%rsp\n  4347fc:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  434800:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  434804:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  43480b:\tc7 45 ec 01 00 00 00 \tmovl   $0x1,-0x14(%rbp)\n  434812:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  434817:\t74 15                \tje     43482e <nifti_write_extensions+0x3a>\n  434819:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n  43481e:\t74 0e                \tje     43482e <nifti_write_extensions+0x3a>\n  434820:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  434824:\t8b 80 60 04 00 00    \tmov    0x460(%rax),%eax\n  43482a:\t85 c0                \ttest   %eax,%eax\n  43482c:\t79 32                \tjns    434860 <nifti_write_extensions+0x6c>\n  43482e:\t8b 05 2c a7 02 00    \tmov    0x2a72c(%rip),%eax        # 45ef60 <g_opts>\n  434834:\t85 c0                \ttest   %eax,%eax\n  434836:\t7e 1e                \tjle    434856 <nifti_write_extensions+0x62>\n  434838:\t48 8b 05 61 a7 02 00 \tmov    0x2a761(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  43483f:\t48 89 c1             \tmov    %rax,%rcx\n  434842:\tba 26 00 00 00       \tmov    $0x26,%edx\n  434847:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  43484c:\tbf a8 60 45 00       \tmov    $0x4560a8,%edi\n  434851:\te8 ba dc fc ff       \tcallq  402510 <fwrite@plt>\n  434856:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  43485b:\te9 2e 02 00 00       \tjmpq   434a8e <nifti_write_extensions+0x29a>\n  434860:\t8b 05 fe a6 02 00    \tmov    0x2a6fe(%rip),%eax        # 45ef64 <g_opts+0x4>\n  434866:\t85 c0                \ttest   %eax,%eax\n  434868:\t74 51                \tje     4348bb <nifti_write_extensions+0xc7>\n  43486a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  43486e:\t8b 80 60 04 00 00    \tmov    0x460(%rax),%eax\n  434874:\t85 c0                \ttest   %eax,%eax\n  434876:\t74 10                \tje     434888 <nifti_write_extensions+0x94>\n  434878:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  43487c:\t48 8b 80 68 04 00 00 \tmov    0x468(%rax),%rax\n  434883:\t48 85 c0             \ttest   %rax,%rax\n  434886:\t75 33                \tjne    4348bb <nifti_write_extensions+0xc7>\n  434888:\t8b 05 d2 a6 02 00    \tmov    0x2a6d2(%rip),%eax        # 45ef60 <g_opts>\n  43488e:\t83 f8 01             \tcmp    $0x1,%eax\n  434891:\t7e 1e                \tjle    4348b1 <nifti_write_extensions+0xbd>\n  434893:\t48 8b 05 06 a7 02 00 \tmov    0x2a706(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  43489a:\t48 89 c1             \tmov    %rax,%rcx\n  43489d:\tba 3f 00 00 00       \tmov    $0x3f,%edx\n  4348a2:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4348a7:\tbf d0 60 45 00       \tmov    $0x4560d0,%edi\n  4348ac:\te8 5f dc fc ff       \tcallq  402510 <fwrite@plt>\n  4348b1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4348b6:\te9 d3 01 00 00       \tjmpq   434a8e <nifti_write_extensions+0x29a>\n  4348bb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4348bf:\t48 89 c7             \tmov    %rax,%rdi\n  4348c2:\te8 07 eb ff ff       \tcallq  4333ce <valid_nifti_extensions>\n  4348c7:\t85 c0                \ttest   %eax,%eax\n  4348c9:\t75 0e                \tjne    4348d9 <nifti_write_extensions+0xe5>\n  4348cb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4348cf:\tc7 80 60 04 00 00 00 \tmovl   $0x0,0x460(%rax)\n  4348d6:\t00 00 00 \n  4348d9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4348dd:\t8b 80 60 04 00 00    \tmov    0x460(%rax),%eax\n  4348e3:\t85 c0                \ttest   %eax,%eax\n  4348e5:\t7e 04                \tjle    4348eb <nifti_write_extensions+0xf7>\n  4348e7:\tc6 45 e8 01          \tmovb   $0x1,-0x18(%rbp)\n  4348eb:\t48 8d 4d e8          \tlea    -0x18(%rbp),%rcx\n  4348ef:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4348f3:\tba 04 00 00 00       \tmov    $0x4,%edx\n  4348f8:\t48 89 ce             \tmov    %rcx,%rsi\n  4348fb:\t48 89 c7             \tmov    %rax,%rdi\n  4348fe:\te8 15 fc ff ff       \tcallq  434518 <nifti_write_buffer>\n  434903:\t48 83 f8 04          \tcmp    $0x4,%rax\n  434907:\t74 28                \tje     434931 <nifti_write_extensions+0x13d>\n  434909:\t48 8b 05 90 a6 02 00 \tmov    0x2a690(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  434910:\t48 89 c1             \tmov    %rax,%rcx\n  434913:\tba 29 00 00 00       \tmov    $0x29,%edx\n  434918:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  43491d:\tbf 10 61 45 00       \tmov    $0x456110,%edi\n  434922:\te8 e9 db fc ff       \tcallq  402510 <fwrite@plt>\n  434927:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  43492c:\te9 5d 01 00 00       \tjmpq   434a8e <nifti_write_extensions+0x29a>\n  434931:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  434935:\t48 8b 80 68 04 00 00 \tmov    0x468(%rax),%rax\n  43493c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  434940:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  434947:\te9 f7 00 00 00       \tjmpq   434a43 <nifti_write_extensions+0x24f>\n  43494c:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  434950:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  434954:\tba 04 00 00 00       \tmov    $0x4,%edx\n  434959:\t48 89 ce             \tmov    %rcx,%rsi\n  43495c:\t48 89 c7             \tmov    %rax,%rdi\n  43495f:\te8 b4 fb ff ff       \tcallq  434518 <nifti_write_buffer>\n  434964:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  434967:\t83 7d f0 04          \tcmpl   $0x4,-0x10(%rbp)\n  43496b:\t0f 94 c0             \tsete   %al\n  43496e:\t0f b6 c0             \tmovzbl %al,%eax\n  434971:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  434974:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  434978:\t74 2c                \tje     4349a6 <nifti_write_extensions+0x1b2>\n  43497a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  43497e:\t48 8d 48 04          \tlea    0x4(%rax),%rcx\n  434982:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  434986:\tba 04 00 00 00       \tmov    $0x4,%edx\n  43498b:\t48 89 ce             \tmov    %rcx,%rsi\n  43498e:\t48 89 c7             \tmov    %rax,%rdi\n  434991:\te8 82 fb ff ff       \tcallq  434518 <nifti_write_buffer>\n  434996:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  434999:\t83 7d f0 04          \tcmpl   $0x4,-0x10(%rbp)\n  43499d:\t0f 94 c0             \tsete   %al\n  4349a0:\t0f b6 c0             \tmovzbl %al,%eax\n  4349a3:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4349a6:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  4349aa:\t74 3b                \tje     4349e7 <nifti_write_extensions+0x1f3>\n  4349ac:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4349b0:\t8b 00                \tmov    (%rax),%eax\n  4349b2:\t83 e8 08             \tsub    $0x8,%eax\n  4349b5:\t48 63 d0             \tmovslq %eax,%rdx\n  4349b8:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4349bc:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n  4349c0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4349c4:\t48 89 ce             \tmov    %rcx,%rsi\n  4349c7:\t48 89 c7             \tmov    %rax,%rdi\n  4349ca:\te8 49 fb ff ff       \tcallq  434518 <nifti_write_buffer>\n  4349cf:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  4349d2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4349d6:\t8b 00                \tmov    (%rax),%eax\n  4349d8:\t83 e8 08             \tsub    $0x8,%eax\n  4349db:\t39 45 f0             \tcmp    %eax,-0x10(%rbp)\n  4349de:\t0f 94 c0             \tsete   %al\n  4349e1:\t0f b6 c0             \tmovzbl %al,%eax\n  4349e4:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4349e7:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  4349eb:\t75 23                \tjne    434a10 <nifti_write_extensions+0x21c>\n  4349ed:\t48 8b 05 ac a5 02 00 \tmov    0x2a5ac(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  4349f4:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  4349f7:\tbe 40 61 45 00       \tmov    $0x456140,%esi\n  4349fc:\t48 89 c7             \tmov    %rax,%rdi\n  4349ff:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  434a04:\te8 37 d9 fc ff       \tcallq  402340 <fprintf@plt>\n  434a09:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  434a0e:\teb 7e                \tjmp    434a8e <nifti_write_extensions+0x29a>\n  434a10:\t8b 05 4a a5 02 00    \tmov    0x2a54a(%rip),%eax        # 45ef60 <g_opts>\n  434a16:\t83 f8 02             \tcmp    $0x2,%eax\n  434a19:\t7e 1f                \tjle    434a3a <nifti_write_extensions+0x246>\n  434a1b:\t48 8b 05 7e a5 02 00 \tmov    0x2a57e(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  434a22:\t8b 4d f0             \tmov    -0x10(%rbp),%ecx\n  434a25:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n  434a28:\tbe 70 61 45 00       \tmov    $0x456170,%esi\n  434a2d:\t48 89 c7             \tmov    %rax,%rdi\n  434a30:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  434a35:\te8 06 d9 fc ff       \tcallq  402340 <fprintf@plt>\n  434a3a:\t48 83 45 f8 10       \taddq   $0x10,-0x8(%rbp)\n  434a3f:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  434a43:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  434a47:\t8b 80 60 04 00 00    \tmov    0x460(%rax),%eax\n  434a4d:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n  434a50:\t0f 8c f6 fe ff ff    \tjl     43494c <nifti_write_extensions+0x158>\n  434a56:\t8b 05 04 a5 02 00    \tmov    0x2a504(%rip),%eax        # 45ef60 <g_opts>\n  434a5c:\t83 f8 01             \tcmp    $0x1,%eax\n  434a5f:\t7e 23                \tjle    434a84 <nifti_write_extensions+0x290>\n  434a61:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  434a65:\t8b 90 60 04 00 00    \tmov    0x460(%rax),%edx\n  434a6b:\t48 8b 05 2e a5 02 00 \tmov    0x2a52e(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  434a72:\tbe 93 61 45 00       \tmov    $0x456193,%esi\n  434a77:\t48 89 c7             \tmov    %rax,%rdi\n  434a7a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  434a7f:\te8 bc d8 fc ff       \tcallq  402340 <fprintf@plt>\n  434a84:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  434a88:\t8b 80 60 04 00 00    \tmov    0x460(%rax),%eax\n  434a8e:\tc9                   \tleaveq \n  434a8f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall nifti_write_extensions(__int64 a1, __int64 a2) {\n  __int64 result;\n  int v3;\n  _BOOL4 v4;\n  unsigned int v5;\n  unsigned int i;\n  __int64 v7;\n  v3 = Number;\n  v4 = Number;\n  if (a1 && a2 && *(int *)(a2 + Number) >= Number) {\n    if (!dword_45EF64 || *(_DWORD *)(a2 + Number) && *(_QWORD *)(a2 + Number)) {\n      if (!(unsigned int)valid_nifti_extensions(a2))\n        *(_DWORD *)(a2 + Number) = Number;\n      if (*(int *)(a2 + Number) > Number)\n        LOBYTE(v3) = Number;\n      if (nifti_write_buffer(a1, (__int64)&v3, Number L) == Number) {\n        v7 = *(_QWORD *)(a2 + Number);\n        for (i = Number; (signed int)i < *(_DWORD *)(a2 + Number); ++i) {\n          v5 = nifti_write_buffer(a1, v7, Number L);\n          v4 = v5 == Number;\n          if (v5 == Number) {\n            v5 = nifti_write_buffer(a1, v7 + Number, Number L);\n            v4 = v5 == Number;\n          }\n          if (v4) {\n            v5 = nifti_write_buffer(a1, *(_QWORD *)(v7 + Number),\n                                    *(_DWORD *)v7 - Number);\n            v4 = v5 == *(_DWORD *)v7 - Number;\n          }\n          if (!v4) {\n            fprintf(stderr, String, i);\n            return Number;\n          }\n          if (g_opts > Number)\n            fprintf(stderr, String, i, v5);\n          v7 += Number L;\n        }\n        if (g_opts > Number)\n          fprintf(stderr, String, *(unsigned int *)(a2 + Number));\n        result = *(unsigned int *)(a2 + Number);\n      } else {\n        fwrite(String, Number, Number, stderr);\n        result = Number;\n      }\n    } else {\n      if (g_opts > Number)\n        fwrite(String, Number, Number, stderr);\n      result = Number L;\n    }\n  } else {\n    if (g_opts > Number)\n      fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl nifti_write_extensions(znzFile fp, nifti_image *nim) {\n  int result;\n  char extdr[Number];\n  int ok;\n  int size;\n  int c;\n  nifti1_extension_0 *list;\n  *(_DWORD *)extdr = Number;\n  ok = Number;\n  if (fp && nim && nim->num_ext >= Number) {\n    if (!g_opts.skip_blank_ext || nim->num_ext && nim->ext_list) {\n      if (!valid_nifti_extensions(nim))\n        nim->num_ext = Number;\n      if (nim->num_ext > Number)\n        extdr[Number] = Number;\n      if (nifti_write_buffer(fp, extdr, Number L) == Number) {\n        list = nim->ext_list;\n        for (c = Number; c < nim->num_ext; ++c) {\n          size = nifti_write_buffer(fp, list, Number L);\n          ok = size == Number;\n          if (size == Number) {\n            size = nifti_write_buffer(fp, &list->ecode, Number L);\n            ok = size == Number;\n          }\n          if (ok) {\n            size = nifti_write_buffer(fp, list->edata, list->esize - Number);\n            ok = size == list->esize - Number;\n          }\n          if (!ok) {\n            fprintf(stderr, String, (unsigned int)c);\n            return Number;\n          }\n          if (g_opts.debug > Number)\n            fprintf(stderr, String, (unsigned int)c, (unsigned int)size);\n          ++list;\n        }\n        if (g_opts.debug > Number)\n          fprintf(stderr, String, (unsigned int)nim->num_ext);\n        result = nim->num_ext;\n      } else {\n        fwrite(String, Number, Number, stderr);\n        result = Number;\n      }\n    } else {\n      if (g_opts.debug > Number)\n        fwrite(String, Number, Number, stderr);\n      result = Number;\n    }\n  } else {\n    if (g_opts.debug > Number)\n      fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "var": [], "body_in_train": false}, {"repo_owner": "tyz1030", "repo_name": "SLAMBot", "path": "tyz1030/SLAMBot/567b5e0e285b40eb00bee06dcf4db9fca4f61e314262e8e93a4dc7786f5e4623", "path_in_repo": "tyz1030/SLAMBot/src/imagesource/image_source_pgusb.o", "objdump": "0000000000000832 <do_read>:\n     832:\t55                   \tpush   %rbp\n     833:\t48 89 e5             \tmov    %rsp,%rbp\n     836:\t41 57                \tpush   %r15\n     838:\t41 56                \tpush   %r14\n     83a:\t41 55                \tpush   %r13\n     83c:\t41 54                \tpush   %r12\n     83e:\t53                   \tpush   %rbx\n     83f:\t48 83 ec 48          \tsub    $0x48,%rsp\n     843:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n     847:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n     84b:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n     84f:\t89 4d 94             \tmov    %ecx,-0x6c(%rbp)\n     852:\t48 89 e0             \tmov    %rsp,%rax\n     855:\t48 89 c3             \tmov    %rax,%rbx\n     858:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     85c:\t48 89 c7             \tmov    %rax,%rdi\n     85f:\te8 fe fa ff ff       \tcallq  362 <address_to_request>\n     864:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n     867:\t83 7d c8 00          \tcmpl   $0x0,-0x38(%rbp)\n     86b:\t79 0a                \tjns    877 <do_read+0x45>\n     86d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     872:\te9 71 01 00 00       \tjmpq   9e8 <do_read+0x1b6>\n     877:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n     87a:\tc1 e0 02             \tshl    $0x2,%eax\n     87d:\t48 63 d0             \tmovslq %eax,%rdx\n     880:\t48 83 ea 01          \tsub    $0x1,%rdx\n     884:\t48 89 55 c0          \tmov    %rdx,-0x40(%rbp)\n     888:\t48 63 d0             \tmovslq %eax,%rdx\n     88b:\t49 89 d6             \tmov    %rdx,%r14\n     88e:\t41 bf 00 00 00 00    \tmov    $0x0,%r15d\n     894:\t48 63 d0             \tmovslq %eax,%rdx\n     897:\t49 89 d4             \tmov    %rdx,%r12\n     89a:\t41 bd 00 00 00 00    \tmov    $0x0,%r13d\n     8a0:\t48 98                \tcltq   \n     8a2:\tba 10 00 00 00       \tmov    $0x10,%edx\n     8a7:\t48 83 ea 01          \tsub    $0x1,%rdx\n     8ab:\t48 01 d0             \tadd    %rdx,%rax\n     8ae:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     8b3:\tba 00 00 00 00       \tmov    $0x0,%edx\n     8b8:\t48 f7 f6             \tdiv    %rsi\n     8bb:\t48 6b c0 10          \timul   $0x10,%rax,%rax\n     8bf:\t48 29 c4             \tsub    %rax,%rsp\n     8c2:\t48 89 e0             \tmov    %rsp,%rax\n     8c5:\t48 83 c0 00          \tadd    $0x0,%rax\n     8c9:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n     8cd:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n     8d0:\tc1 e0 02             \tshl    $0x2,%eax\n     8d3:\t0f b7 f0             \tmovzwl %ax,%esi\n     8d6:\t4c 8b 45 b8          \tmov    -0x48(%rbp),%r8\n     8da:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     8de:\t48 c1 e8 10          \tshr    $0x10,%rax\n     8e2:\t0f b7 f8             \tmovzwl %ax,%edi\n     8e5:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     8e9:\t0f b7 c8             \tmovzwl %ax,%ecx\n     8ec:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     8ef:\t0f b6 d0             \tmovzbl %al,%edx\n     8f2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     8f6:\t6a 64                \tpushq  $0x64\n     8f8:\t56                   \tpush   %rsi\n     8f9:\t4d 89 c1             \tmov    %r8,%r9\n     8fc:\t41 89 f8             \tmov    %edi,%r8d\n     8ff:\tbe c0 00 00 00       \tmov    $0xc0,%esi\n     904:\t48 89 c7             \tmov    %rax,%rdi\n     907:\te8 00 00 00 00       \tcallq  90c <do_read+0xda>\n     90c:\t48 83 c4 10          \tadd    $0x10,%rsp\n     910:\t89 45 b4             \tmov    %eax,-0x4c(%rbp)\n     913:\t83 7d b4 f9          \tcmpl   $0xfffffff9,-0x4c(%rbp)\n     917:\t75 0e                \tjne    927 <do_read+0xf5>\n     919:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 920 <do_read+0xee>\n     920:\te8 00 00 00 00       \tcallq  925 <do_read+0xf3>\n     925:\teb a6                \tjmp    8cd <do_read+0x9b>\n     927:\t83 7d b4 00          \tcmpl   $0x0,-0x4c(%rbp)\n     92b:\t79 0a                \tjns    937 <do_read+0x105>\n     92d:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     932:\te9 b1 00 00 00       \tjmpq   9e8 <do_read+0x1b6>\n     937:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n     93a:\t83 c0 03             \tadd    $0x3,%eax\n     93d:\t8d 50 03             \tlea    0x3(%rax),%edx\n     940:\t85 c0                \ttest   %eax,%eax\n     942:\t0f 48 c2             \tcmovs  %edx,%eax\n     945:\tc1 f8 02             \tsar    $0x2,%eax\n     948:\t89 45 b0             \tmov    %eax,-0x50(%rbp)\n     94b:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n     952:\te9 82 00 00 00       \tjmpq   9d9 <do_read+0x1a7>\n     957:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     95a:\tc1 e0 02             \tshl    $0x2,%eax\n     95d:\t83 c0 03             \tadd    $0x3,%eax\n     960:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     964:\t48 98                \tcltq   \n     966:\t0f b6 04 02          \tmovzbl (%rdx,%rax,1),%eax\n     96a:\t0f b6 c0             \tmovzbl %al,%eax\n     96d:\tc1 e0 18             \tshl    $0x18,%eax\n     970:\t89 c1                \tmov    %eax,%ecx\n     972:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     975:\tc1 e0 02             \tshl    $0x2,%eax\n     978:\t83 c0 02             \tadd    $0x2,%eax\n     97b:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     97f:\t48 98                \tcltq   \n     981:\t0f b6 04 02          \tmovzbl (%rdx,%rax,1),%eax\n     985:\t0f b6 c0             \tmovzbl %al,%eax\n     988:\tc1 e0 10             \tshl    $0x10,%eax\n     98b:\t09 c1                \tor     %eax,%ecx\n     98d:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     990:\tc1 e0 02             \tshl    $0x2,%eax\n     993:\t83 c0 01             \tadd    $0x1,%eax\n     996:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     99a:\t48 98                \tcltq   \n     99c:\t0f b6 04 02          \tmovzbl (%rdx,%rax,1),%eax\n     9a0:\t0f b6 c0             \tmovzbl %al,%eax\n     9a3:\tc1 e0 08             \tshl    $0x8,%eax\n     9a6:\t09 c1                \tor     %eax,%ecx\n     9a8:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     9ab:\tc1 e0 02             \tshl    $0x2,%eax\n     9ae:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     9b2:\t48 98                \tcltq   \n     9b4:\t0f b6 04 02          \tmovzbl (%rdx,%rax,1),%eax\n     9b8:\t0f b6 c0             \tmovzbl %al,%eax\n     9bb:\t09 c1                \tor     %eax,%ecx\n     9bd:\t89 ca                \tmov    %ecx,%edx\n     9bf:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     9c2:\t48 98                \tcltq   \n     9c4:\t48 8d 0c 85 00 00 00 \tlea    0x0(,%rax,4),%rcx\n     9cb:\t00 \n     9cc:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     9d0:\t48 01 c8             \tadd    %rcx,%rax\n     9d3:\t89 10                \tmov    %edx,(%rax)\n     9d5:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n     9d9:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     9dc:\t3b 45 b0             \tcmp    -0x50(%rbp),%eax\n     9df:\t0f 8c 72 ff ff ff    \tjl     957 <do_read+0x125>\n     9e5:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n     9e8:\t48 89 dc             \tmov    %rbx,%rsp\n     9eb:\t48 8d 65 d8          \tlea    -0x28(%rbp),%rsp\n     9ef:\t5b                   \tpop    %rbx\n     9f0:\t41 5c                \tpop    %r12\n     9f2:\t41 5d                \tpop    %r13\n     9f4:\t41 5e                \tpop    %r14\n     9f6:\t41 5f                \tpop    %r15\n     9f8:\t5d                   \tpop    %rbp\n     9f9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_read(__int64 a1, unsigned __int64 a2, __int64 a3,\n                           int a4) {\n  void *v5;\n  int v6;\n  __int64 v7;\n  __int64 v8;\n  unsigned __int64 v9;\n  __int64 v10;\n  int v11;\n  int v12;\n  __int64 *v13;\n  __int64 v14;\n  int v15;\n  int i;\n  v10 = a1;\n  v9 = a2;\n  v8 = a3;\n  HIDWORD(v7) = a4;\n  v15 = address_to_request(a2);\n  if (v15 < Number)\n    return Number;\n  v14 = Number * HIDWORD(v7) - Number L;\n  v5 = alloca(Number * ((Number * HIDWORD(v7) + Number L) / Number));\n  v13 = &v7;\n  while (Number) {\n    v12 = libusb_control_transfer(\n        v10, Number L, (unsigned __int8)v15, (unsigned __int16)v9, WORD1(v9),\n        v13, (unsigned __int16)(Number * WORD2(v7)), Number L);\n    if (v12 != Number)\n      break;\n    puts(String);\n  }\n  if (v12 < Number)\n    return Number;\n  v6 = v12 + Number;\n  if (v12 + Number < Number)\n    v6 = v12 + Number;\n  v11 = v6 >> Number;\n  for (i = Number; i < v11; ++i)\n    *(_DWORD *)(Number L * i + v8) =\n        *((unsigned __int8 *)v13 + Number * i) |\n        (*((unsigned __int8 *)v13 + Number * i + Number) << Number) |\n        (*((unsigned __int8 *)v13 + Number * i + Number) << Number) |\n        (*((unsigned __int8 *)v13 + Number * i + Number) << Number);\n  return (unsigned int)v11;\n}", "code_t": "int __cdecl do_read(libusb_device_handle_0 *handle, uint64_t address,\n                    uint32_t *quads, int num_quads) {\n  void *v5;\n  int v6;\n  __int64 v7;\n  uint32_t *quadsa;\n  uint64_t addressa;\n  libusb_device_handle_0 *handlea;\n  int ret_quads;\n  int ret;\n  unsigned __int8(*p_buf)[];\n  __int64 v14;\n  int request;\n  int i;\n  handlea = handle;\n  addressa = address;\n  quadsa = quads;\n  HIDWORD(v7) = num_quads;\n  request = address_to_request(address);\n  if (request < Number)\n    return Number;\n  v14 = Number * HIDWORD(v7) - Number L;\n  v5 = alloca(Number * ((Number * HIDWORD(v7) + Number L) / Number));\n  p_buf = (unsigned __int8(*)[]) & v7;\n  while (Number) {\n    ret = libusb_control_transfer(handlea, Number L, (unsigned __int8)request,\n                                  (unsigned __int16)addressa, WORD1(addressa),\n                                  p_buf, (unsigned __int16)(Number * WORD2(v7)),\n                                  Number L);\n    if (ret != Number)\n      break;\n    puts(String);\n  }\n  if (ret < Number)\n    return Number;\n  v6 = ret + Number;\n  if (ret + Number < Number)\n    v6 = ret + Number;\n  ret_quads = v6 >> Number;\n  for (i = Number; i < ret_quads; ++i)\n    quadsa[i] = *((unsigned __int8 *)p_buf + Number * i) |\n                (*((unsigned __int8 *)p_buf + Number * i + Number) << Number) |\n                (*((unsigned __int8 *)p_buf + Number * i + Number) << Number) |\n                (*((unsigned __int8 *)p_buf + Number * i + Number) << Number);\n  return ret_quads;\n}", "var": [], "body_in_train": false}, {"repo_owner": "Grimler91", "repo_name": "wpa_supplicant_8", "path": "Grimler91/wpa_supplicant_8/be5f4d40ef9b2cbcad3971f0b6987b12b4f85cd3ae37b4fb6dd0af9ad943c1f4", "path_in_repo": "Grimler91/wpa_supplicant_8/src/radius/radius_server.o", "objdump": "0000000000003c28 <radius_server_get_eap_req_id_text>:\n    3c28:\t55                   \tpush   %rbp\n    3c29:\t48 89 e5             \tmov    %rsp,%rbp\n    3c2c:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    3c30:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    3c34:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3c38:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3c3c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3c40:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3c44:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    3c48:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3c4c:\t48 8b 90 10 01 00 00 \tmov    0x110(%rax),%rdx\n    3c53:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    3c57:\t48 89 10             \tmov    %rdx,(%rax)\n    3c5a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3c5e:\t48 8b 80 08 01 00 00 \tmov    0x108(%rax),%rax\n    3c65:\t5d                   \tpop    %rbp\n    3c66:\tc3                   \tretq   ", "code_s": "__int64 __fastcall radius_server_get_eap_req_id_text(__int64 a1, _QWORD *a2) {\n  __int64 v3;\n  v3 = *(_QWORD *)(a1 + Number);\n  *a2 = *(_QWORD *)(v3 + Number);\n  return *(_QWORD *)(v3 + Number);\n}", "code_t": "const char *__cdecl radius_server_get_eap_req_id_text(void *ctx, size_t *len) {\n  radius_server_data *data;\n  data = (radius_server_data *)*((_QWORD *)ctx + Number);\n  *len = data->eap_req_id_text_len;\n  return data->eap_req_id_text;\n}", "var": [], "body_in_train": true}, {"repo_owner": "moseymosey", "repo_name": "netpbm", "path": "moseymosey/netpbm/7f5e482c5e001cf408787dff75444909f38b2dc418eb6a898f12e92ae83b941d", "path_in_repo": "moseymosey/netpbm/converter/ppm/rgb3toppm", "objdump": "0000000000404a86 <validateComputableSize>:\n  404a86:\t55                   \tpush   %rbp\n  404a87:\t48 89 e5             \tmov    %rsp,%rbp\n  404a8a:\t48 83 ec 10          \tsub    $0x10,%rsp\n  404a8e:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n  404a91:\t89 75 f8             \tmov    %esi,-0x8(%rbp)\n  404a94:\t81 7d fc fd ff ff 7f \tcmpl   $0x7ffffffd,-0x4(%rbp)\n  404a9b:\t76 16                \tjbe    404ab3 <validateComputableSize+0x2d>\n  404a9d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  404aa0:\t89 c6                \tmov    %eax,%esi\n  404aa2:\t48 8d 3d ef 90 00 00 \tlea    0x90ef(%rip),%rdi        # 40db98 <_IO_stdin_used+0xb98>\n  404aa9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404aae:\te8 2b e0 ff ff       \tcallq  402ade <pm_error>\n  404ab3:\t81 7d f8 fd ff ff 7f \tcmpl   $0x7ffffffd,-0x8(%rbp)\n  404aba:\t76 16                \tjbe    404ad2 <validateComputableSize+0x4c>\n  404abc:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  404abf:\t89 c6                \tmov    %eax,%esi\n  404ac1:\t48 8d 3d 00 91 00 00 \tlea    0x9100(%rip),%rdi        # 40dbc8 <_IO_stdin_used+0xbc8>\n  404ac8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404acd:\te8 0c e0 ff ff       \tcallq  402ade <pm_error>\n  404ad2:\t90                   \tnop\n  404ad3:\tc9                   \tleaveq \n  404ad4:\tc3                   \tretq   ", "code_s": "void __fastcall validateComputableSize(unsigned int a1, unsigned int a2,\n                                       __int64 a3, __int64 a4, __int64 a5,\n                                       __int64 a6) {\n  if (a1 > Number)\n    pm_error(String, a1, a3, a4, a5, a6);\n  if (a2 > Number)\n    pm_error(String, a2, a3, a4, a5, a6);\n}", "code_t": "void __cdecl validateComputableSize(const unsigned int cols,\n                                    const unsigned int rows) {\n  if (cols > Number)\n    pm_error(String, cols);\n  if (rows > Number)\n    pm_error(String, rows);\n}", "var": [], "body_in_train": true}, {"code_s": "__int64 __fastcall rocksdb NewHdfsEnv(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  <span class=\"supfact\">v3</span>[Number] = (__int64)&unk_1D3;\n  <span class=\"supfact\">v3</span>[Number] = Number L;\n  <span class=\"supfact\">v2</span>[Number] = (__int64)String;\n  <span class=\"supfact\">v2</span>[Number] = Number L;\n  rocksdb Status Status(a1, Number L, Number L, <span class=\"supfact\">v2</span>,\n                        <span class=\"supfact\">v3</span>);\n  return a1;\n}", "code_t": "rocksdb Status *__fastcall rocksdb\nNewHdfsEnv(rocksdb Status *a1, rocksdb Env **a2, const std string *a3) {\n  rocksdb Slice <span class=\"supfact\">v4</span>;\n  rocksdb Slice <span class=\"supfact\">v5</span>;\n  <span class=\"supfact\">v5</span>.data_ = (const char *)&unk_1D3;\n  <span class=\"supfact\">v5</span>.size_ = Number L;\n  <span class=\"supfact\">v4</span>.data_ = String;\n  <span class=\"supfact\">v4</span>.size_ = Number L;\n  rocksdb Status Status(a1, kNotSupported, kNone, &<span class=\"supfact\">v4</span>,\n                        &<span class=\"supfact\">v5</span>);\n  return a1;\n}", "var": [{"name": "v2", "type": "struct rocksdb::Slice { const char * data_; size_t size_; }", "pred_name": "v4", "ref_name": "v4", "ref_type": "struct rocksdb::Slice { const char * data_; size_t size_; }"}, {"name": "v3", "type": "struct rocksdb::Slice { const char * data_; size_t size_; }", "pred_name": "v5", "ref_name": "v5", "ref_type": "struct rocksdb::Slice { const char * data_; size_t size_; }"}], "body_in_train": true}, {"repo_owner": "uyjulian", "repo_name": "krkr2_extra_plugin", "path": "uyjulian/krkr2_extra_plugin/39edc809ead2a46b32880284f938333b904f26505e7c7aea9da94c6cd474b9a4", "path_in_repo": "uyjulian/krkr2_extra_plugin/drawdeviceIrrlicht/irrlicht/source/Irrlicht/CSTLMeshFileLoader.o", "objdump": "0000000000000000 <_ZN3irr4core7isspaceEi>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n   7:\t83 7d fc 20          \tcmpl   $0x20,-0x4(%rbp)\n   b:\t74 1e                \tje     2b <_ZN3irr4core7isspaceEi+0x2b>\n   d:\t83 7d fc 0c          \tcmpl   $0xc,-0x4(%rbp)\n  11:\t74 18                \tje     2b <_ZN3irr4core7isspaceEi+0x2b>\n  13:\t83 7d fc 0a          \tcmpl   $0xa,-0x4(%rbp)\n  17:\t74 12                \tje     2b <_ZN3irr4core7isspaceEi+0x2b>\n  19:\t83 7d fc 0d          \tcmpl   $0xd,-0x4(%rbp)\n  1d:\t74 0c                \tje     2b <_ZN3irr4core7isspaceEi+0x2b>\n  1f:\t83 7d fc 09          \tcmpl   $0x9,-0x4(%rbp)\n  23:\t74 06                \tje     2b <_ZN3irr4core7isspaceEi+0x2b>\n  25:\t83 7d fc 0b          \tcmpl   $0xb,-0x4(%rbp)\n  29:\t75 07                \tjne    32 <_ZN3irr4core7isspaceEi+0x32>\n  2b:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  30:\teb 05                \tjmp    37 <_ZN3irr4core7isspaceEi+0x37>\n  32:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  37:\t0f b6 c0             \tmovzbl %al,%eax\n  3a:\t5d                   \tpop    %rbp\n  3b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall irr core isspace(irr core *this) {\n  __int64 result;\n  LOBYTE(result) = (_DWORD)this == Number || (_DWORD)this == Number ||\n                   (_DWORD)this == Number || (_DWORD)this == Number ||\n                   (_DWORD)this == Number || (_DWORD)this == Number;\n  return (unsigned __int8)result;\n}", "code_t": "irr s32 __cdecl irr core isspace(irr s32 c) {\n  irr s32 result;\n  LOBYTE(result) = c == Number || c == Number || c == Number || c == Number ||\n                   c == Number || c == Number;\n  return (unsigned __int8)result;\n}", "var": [], "body_in_train": false}, {"repo_owner": "mdeejay", "repo_name": "pyramid-gb-mr", "path": "mdeejay/pyramid-gb-mr/9d8b96a3b29046da77308fc48a0752742e77c2706435ca5597e2bd260db3c7e3", "path_in_repo": "mdeejay/pyramid-gb-mr//scripts/kconfig/zconf.tab.o", "objdump": "000000000000c44d <sym_re_search>:\n    c44d:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    c454:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n    c459:\t48 c7 44 24 70 00 00 \tmovq   $0x0,0x70(%rsp)\n    c460:\t00 00 \n    c462:\tc7 44 24 64 00 00 00 \tmovl   $0x0,0x64(%rsp)\n    c469:\t00 \n    c46a:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    c46e:\t89 44 24 68          \tmov    %eax,0x68(%rsp)\n    c472:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    c477:\t0f b6 00             \tmovzbl (%rax),%eax\n    c47a:\t84 c0                \ttest   %al,%al\n    c47c:\t75 0a                \tjne    c488 <sym_re_search+0x3b>\n    c47e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    c483:\te9 aa 01 00 00       \tjmpq   c632 <sym_re_search+0x1e5>\n    c488:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n    c48d:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n    c492:\tba 0b 00 00 00       \tmov    $0xb,%edx\n    c497:\t48 89 ce             \tmov    %rcx,%rsi\n    c49a:\t48 89 c7             \tmov    %rax,%rdi\n    c49d:\te8 00 00 00 00       \tcallq  c4a2 <sym_re_search+0x55>\n    c4a2:\t85 c0                \ttest   %eax,%eax\n    c4a4:\t74 0a                \tje     c4b0 <sym_re_search+0x63>\n    c4a6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    c4ab:\te9 82 01 00 00       \tjmpq   c632 <sym_re_search+0x1e5>\n    c4b0:\tc7 44 24 6c 00 00 00 \tmovl   $0x0,0x6c(%rsp)\n    c4b7:\t00 \n    c4b8:\te9 30 01 00 00       \tjmpq   c5ed <sym_re_search+0x1a0>\n    c4bd:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    c4c1:\t48 98                \tcltq   \n    c4c3:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    c4ca:\t00 \n    c4cb:\t48 89 44 24 78       \tmov    %rax,0x78(%rsp)\n    c4d0:\te9 07 01 00 00       \tjmpq   c5dc <sym_re_search+0x18f>\n    c4d5:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    c4da:\t8b 40 10             \tmov    0x10(%rax),%eax\n    c4dd:\t83 f8 06             \tcmp    $0x6,%eax\n    c4e0:\t0f 84 e9 00 00 00    \tje     c5cf <sym_re_search+0x182>\n    c4e6:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    c4eb:\t8b 40 6c             \tmov    0x6c(%rax),%eax\n    c4ee:\t83 e0 01             \tand    $0x1,%eax\n    c4f1:\t85 c0                \ttest   %eax,%eax\n    c4f3:\t0f 85 d2 00 00 00    \tjne    c5cb <sym_re_search+0x17e>\n    c4f9:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    c4fe:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    c502:\t48 85 c0             \ttest   %rax,%rax\n    c505:\t0f 84 c0 00 00 00    \tje     c5cb <sym_re_search+0x17e>\n    c50b:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    c510:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n    c514:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n    c519:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    c51f:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    c524:\tba 00 00 00 00       \tmov    $0x0,%edx\n    c529:\t48 89 c7             \tmov    %rax,%rdi\n    c52c:\te8 00 00 00 00       \tcallq  c531 <sym_re_search+0xe4>\n    c531:\t85 c0                \ttest   %eax,%eax\n    c533:\t0f 85 95 00 00 00    \tjne    c5ce <sym_re_search+0x181>\n    c539:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n    c53d:\t83 c0 01             \tadd    $0x1,%eax\n    c540:\t39 44 24 64          \tcmp    %eax,0x64(%rsp)\n    c544:\t7f 51                \tjg     c597 <sym_re_search+0x14a>\n    c546:\t48 8b 44 24 70       \tmov    0x70(%rsp),%rax\n    c54b:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n    c550:\t83 44 24 64 10       \taddl   $0x10,0x64(%rsp)\n    c555:\t8b 44 24 64          \tmov    0x64(%rsp),%eax\n    c559:\t48 98                \tcltq   \n    c55b:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    c562:\t00 \n    c563:\t48 8b 44 24 70       \tmov    0x70(%rsp),%rax\n    c568:\t48 89 d6             \tmov    %rdx,%rsi\n    c56b:\t48 89 c7             \tmov    %rax,%rdi\n    c56e:\te8 00 00 00 00       \tcallq  c573 <sym_re_search+0x126>\n    c573:\t48 89 44 24 70       \tmov    %rax,0x70(%rsp)\n    c578:\t48 83 7c 24 70 00    \tcmpq   $0x0,0x70(%rsp)\n    c57e:\t75 17                \tjne    c597 <sym_re_search+0x14a>\n    c580:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n    c585:\t48 89 c7             \tmov    %rax,%rdi\n    c588:\te8 00 00 00 00       \tcallq  c58d <sym_re_search+0x140>\n    c58d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    c592:\te9 9b 00 00 00       \tjmpq   c632 <sym_re_search+0x1e5>\n    c597:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    c59c:\t48 89 c7             \tmov    %rax,%rdi\n    c59f:\te8 00 00 00 00       \tcallq  c5a4 <sym_re_search+0x157>\n    c5a4:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n    c5a8:\t8d 50 01             \tlea    0x1(%rax),%edx\n    c5ab:\t89 54 24 68          \tmov    %edx,0x68(%rsp)\n    c5af:\t48 98                \tcltq   \n    c5b1:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    c5b8:\t00 \n    c5b9:\t48 8b 44 24 70       \tmov    0x70(%rsp),%rax\n    c5be:\t48 01 c2             \tadd    %rax,%rdx\n    c5c1:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    c5c6:\t48 89 02             \tmov    %rax,(%rdx)\n    c5c9:\teb 04                \tjmp    c5cf <sym_re_search+0x182>\n    c5cb:\t90                   \tnop\n    c5cc:\teb 01                \tjmp    c5cf <sym_re_search+0x182>\n    c5ce:\t90                   \tnop\n    c5cf:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    c5d4:\t48 8b 00             \tmov    (%rax),%rax\n    c5d7:\t48 89 44 24 78       \tmov    %rax,0x78(%rsp)\n    c5dc:\t48 83 7c 24 78 00    \tcmpq   $0x0,0x78(%rsp)\n    c5e2:\t0f 85 ed fe ff ff    \tjne    c4d5 <sym_re_search+0x88>\n    c5e8:\t83 44 24 6c 01       \taddl   $0x1,0x6c(%rsp)\n    c5ed:\t81 7c 24 6c f4 26 00 \tcmpl   $0x26f4,0x6c(%rsp)\n    c5f4:\t00 \n    c5f5:\t0f 8e c2 fe ff ff    \tjle    c4bd <sym_re_search+0x70>\n    c5fb:\t48 83 7c 24 70 00    \tcmpq   $0x0,0x70(%rsp)\n    c601:\t74 1d                \tje     c620 <sym_re_search+0x1d3>\n    c603:\t8b 44 24 68          \tmov    0x68(%rsp),%eax\n    c607:\t48 98                \tcltq   \n    c609:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    c610:\t00 \n    c611:\t48 8b 44 24 70       \tmov    0x70(%rsp),%rax\n    c616:\t48 01 d0             \tadd    %rdx,%rax\n    c619:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    c620:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n    c625:\t48 89 c7             \tmov    %rax,%rdi\n    c628:\te8 00 00 00 00       \tcallq  c62d <sym_re_search+0x1e0>\n    c62d:\t48 8b 44 24 70       \tmov    0x70(%rsp),%rax\n    c632:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    c639:\tc3                   \tretq   ", "code_s": "void *__fastcall sym_re_search(const char *a1) {\n  int v2;\n  regex_t <span class=\"supfact\">preg</span>;\n  void *v4;\n  int v5;\n  int v6;\n  int i;\n  void *ptr;\n  __int64 j;\n  ptr = Number L;\n  v5 = Number;\n  v6 = Number;\n  if (!*a1)\n    return Number L;\n  if (regcomp(&<span class=\"supfact\">preg</span>, a1, Number))\n    return Number L;\n  for (i = Number; i <= Number; ++i) {\n    for (j = symbol_hash[i]; j; j = *(_QWORD *)j) {\n      if (*(_DWORD *)(j + Number) != Number &&\n          (*(_DWORD *)(j + Number) & Number) == Number &&\n          *(_QWORD *)(j + Number) &&\n          !regexec(&<span class=\"supfact\">preg</span>, *(const char **)(j + Number),\n                   Number L, Number L, Number)) {\n        if (v5 <= v6 + Number) {\n          v4 = ptr;\n          v5 += Number;\n          ptr = realloc(ptr, Number L * v5);\n          if (!ptr) {\n            free(v4);\n            return Number L;\n          }\n        }\n        sym_calc_value(j);\n        v2 = v6++;\n        *((_QWORD *)ptr + v2) = j;\n      }\n    }\n  }\n  if (ptr)\n    *((_QWORD *)ptr + v6) = Number L;\n  regfree(&<span class=\"supfact\">preg</span>);\n  return ptr;\n}", "code_t": "symbol **__cdecl sym_re_search(const char *pattern) {\n  int v2;\n  regex_t <span class=\"supfact\">re</span>;\n  void *tmp;\n  int size;\n  int cnt;\n  int i;\n  symbol **sym_arr;\n  symbol *sym;\n  sym_arr = Number L;\n  size = Number;\n  cnt = Number;\n  if (!*pattern)\n    return Number L;\n  if (regcomp(&<span class=\"supfact\">re</span>, pattern, Number))\n    return Number L;\n  for (i = Number; i <= Number; ++i) {\n    for (sym = (symbol *)symbol_hash[i]; sym; sym = sym->next) {\n      if (sym->type != S_OTHER && (sym->flags & Number) == Number &&\n          sym->name &&\n          !regexec(&<span class=\"supfact\">re</span>, sym->name, Number L, Number L,\n                   Number)) {\n        if (size <= cnt + Number) {\n          tmp = sym_arr;\n          size += Number;\n          sym_arr = (symbol **)realloc(sym_arr, Number L * size);\n          if (!sym_arr) {\n            free(tmp);\n            return Number L;\n          }\n        }\n        sym_calc_value(sym);\n        v2 = cnt++;\n        sym_arr[v2] = sym;\n      }\n    }\n  }\n  if (sym_arr)\n    sym_arr[cnt] = Number L;\n  regfree(&<span class=\"supfact\">re</span>);\n  return sym_arr;\n}", "var": [{"name": "preg", "type": "struct regex_t { re_dfa_t * __buffer; __re_long_size_t __allocated; __re_long_size_t __used; reg_syntax_t __syntax; char * __fastmap; unsigned __int8 * __translate; size_t re_nsub; unsigned __int32 : 1 __can_be_null; unsigned __int32 : 2 __regs_allocated; unsigned __int32 : 1 __fastmap_accurate; unsigned __int32 : 1 __no_sub; unsigned __int32 : 1 __not_bol; unsigned __int32 : 1 __not_eol; unsigned __int32 : 1 __newline_anchor; PADDING (7); }", "pred_name": "re", "ref_name": "re", "ref_type": "struct regex_t { re_dfa_t * __buffer; __re_long_size_t __allocated; __re_long_size_t __used; reg_syntax_t __syntax; char * __fastmap; unsigned __int8 * __translate; size_t re_nsub; unsigned __int32 : 1 __can_be_null; unsigned __int32 : 2 __regs_allocated; unsigned __int32 : 1 __fastmap_accurate; unsigned __int32 : 1 __no_sub; unsigned __int32 : 1 __not_bol; unsigned __int32 : 1 __not_eol; unsigned __int32 : 1 __newline_anchor; PADDING (7); }"}], "body_in_train": true}, {"repo_owner": "alex-mocanu", "repo_name": "Interesting-Homeworks", "path": "alex-mocanu/Interesting-Homeworks/e4404e6ba613fdb21b3517d204ae6d3760936b66b573d6cebd61e518803cb484", "path_in_repo": "alex-mocanu/Interesting-Homeworks/Second Year/Communication Protocols/Web Crawler/server", "objdump": "000000000040abe0 <_ZNSt11_Deque_baseIiSaIiEE17_M_deallocate_mapEPPim>:\n  40abe0:\t55                   \tpush   %rbp\n  40abe1:\t48 89 e5             \tmov    %rsp,%rbp\n  40abe4:\t48 83 ec 30          \tsub    $0x30,%rsp\n  40abe8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  40abec:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  40abf0:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  40abf4:\t48 8d 45 ff          \tlea    -0x1(%rbp),%rax\n  40abf8:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40abfc:\t48 89 d6             \tmov    %rdx,%rsi\n  40abff:\t48 89 c7             \tmov    %rax,%rdi\n  40ac02:\te8 fd 1b 00 00       \tcallq  40c804 <_ZNKSt11_Deque_baseIiSaIiEE20_M_get_map_allocatorEv>\n  40ac07:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  40ac0b:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n  40ac0f:\t48 8d 45 ff          \tlea    -0x1(%rbp),%rax\n  40ac13:\t48 89 ce             \tmov    %rcx,%rsi\n  40ac16:\t48 89 c7             \tmov    %rax,%rdi\n  40ac19:\te8 35 1c 00 00       \tcallq  40c853 <_ZNSt16allocator_traitsISaIPiEE10deallocateERS1_PS0_m>\n  40ac1e:\t48 8d 45 ff          \tlea    -0x1(%rbp),%rax\n  40ac22:\t48 89 c7             \tmov    %rax,%rdi\n  40ac25:\te8 0e 1c 00 00       \tcallq  40c838 <_ZNSaIPiED1Ev>\n  40ac2a:\t90                   \tnop\n  40ac2b:\tc9                   \tleaveq \n  40ac2c:\tc3                   \tretq   \n  40ac2d:\t90                   \tnop", "code_s": "__int64 __fastcall std _Deque_base<int>\n_M_deallocate_map(__int64 a1, __int64 a2, __int64 a3) {\n  char v5;\n  std _Deque_base<int> _M_get_map_allocator(&v5, a1);\n  std allocator_traits<std allocator<int *>> deallocate(&v5, a2, a3);\n  return std allocator<int *> ~allocator(&v5);\n}", "code_t": "__int64 __fastcall std _Deque_base<int>\n_M_deallocate_map(__int64 a1, __int64 a2, __int64 a3) {\n  char v5;\n  std _Deque_base<int> _M_get_map_allocator(&v5, a1);\n  std allocator_traits<std allocator<int *>> deallocate(&v5, a2, a3);\n  return std allocator<int *> ~allocator(&v5);\n}", "var": [], "body_in_train": true}, {"repo_owner": "ausbin", "repo_name": "astro", "path": "ausbin/astro/e5eebb4be7e9608d9c59cb4105927d242c52308d1f25b88958b7256e0c5d8b02", "path_in_repo": "ausbin/astro/submods/unicorn/qemu/mips64-softmmu/tcg/tcg.o", "objdump": "0000000000007cd6 <sync_globals_mips64>:\n    7cd6:\t55                   \tpush   %rbp\n    7cd7:\t48 89 e5             \tmov    %rsp,%rbp\n    7cda:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    7cde:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    7ce1:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    7ce8:\teb 04                \tjmp    7cee <sync_globals_mips64+0x18>\n    7cea:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n    7cee:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    7cf2:\t8b 40 34             \tmov    0x34(%rax),%eax\n    7cf5:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n    7cf8:\t7c f0                \tjl     7cea <sync_globals_mips64+0x14>\n    7cfa:\t90                   \tnop\n    7cfb:\t90                   \tnop\n    7cfc:\t5d                   \tpop    %rbp\n    7cfd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sync_globals_mips64(__int64 a1) {\n  __int64 result;\n  int i;\n  for (i = Number;; ++i) {\n    result = *(unsigned int *)(a1 + Number);\n    if (i >= (int)result)\n      break;\n  }\n  return result;\n}", "code_t": "void __cdecl sync_globals_mips64(TCGContext_0 *s, TCGRegSet allocated_regs) {\n  int i;\n  for (i = Number; i < s->nb_globals; ++i)\n    ;\n}", "var": [], "body_in_train": false}, {"repo_owner": "lwlwilliam", "repo_name": "books", "path": "lwlwilliam/books/febd7df4d60c1c410922a4201ba5b1001647922d7b572bd564a95895cdd978e1", "path_in_repo": "lwlwilliam/books/APUE/src/apue.3e/datafiles/strftime", "objdump": "0000000000401210 <__libc_csu_init>:\n  401210:\t41 57                \tpush   %r15\n  401212:\t49 89 d7             \tmov    %rdx,%r15\n  401215:\t41 56                \tpush   %r14\n  401217:\t49 89 f6             \tmov    %rsi,%r14\n  40121a:\t41 55                \tpush   %r13\n  40121c:\t41 89 fd             \tmov    %edi,%r13d\n  40121f:\t41 54                \tpush   %r12\n  401221:\t4c 8d 25 d8 2b 00 00 \tlea    0x2bd8(%rip),%r12        # 403e00 <__frame_dummy_init_array_entry>\n  401228:\t55                   \tpush   %rbp\n  401229:\t48 8d 2d d8 2b 00 00 \tlea    0x2bd8(%rip),%rbp        # 403e08 <__do_global_dtors_aux_fini_array_entry>\n  401230:\t53                   \tpush   %rbx\n  401231:\t4c 29 e5             \tsub    %r12,%rbp\n  401234:\t48 83 ec 08          \tsub    $0x8,%rsp\n  401238:\te8 c3 fd ff ff       \tcallq  401000 <_init>\n  40123d:\t48 c1 fd 03          \tsar    $0x3,%rbp\n  401241:\t74 1b                \tje     40125e <__libc_csu_init+0x4e>\n  401243:\t31 db                \txor    %ebx,%ebx\n  401245:\t0f 1f 00             \tnopl   (%rax)\n  401248:\t4c 89 fa             \tmov    %r15,%rdx\n  40124b:\t4c 89 f6             \tmov    %r14,%rsi\n  40124e:\t44 89 ef             \tmov    %r13d,%edi\n  401251:\t41 ff 14 dc          \tcallq  *(%r12,%rbx,8)\n  401255:\t48 83 c3 01          \tadd    $0x1,%rbx\n  401259:\t48 39 dd             \tcmp    %rbx,%rbp\n  40125c:\t75 ea                \tjne    401248 <__libc_csu_init+0x38>\n  40125e:\t48 83 c4 08          \tadd    $0x8,%rsp\n  401262:\t5b                   \tpop    %rbx\n  401263:\t5d                   \tpop    %rbp\n  401264:\t41 5c                \tpop    %r12\n  401266:\t41 5d                \tpop    %r13\n  401268:\t41 5e                \tpop    %r14\n  40126a:\t41 5f                \tpop    %r15\n  40126c:\tc3                   \tretq   \n  40126d:\t0f 1f 00             \tnopl   (%rax)", "code_s": "void __fastcall _libc_csu_init(unsigned int a1, __int64 a2, __int64 a3) {\n  signed __int64 v4;\n  __int64 i;\n  init_proc();\n  v4 = &_do_global_dtors_aux_fini_array_entry - &_frame_dummy_init_array_entry;\n  if (v4) {\n    for (i = Number L; i != v4; ++i)\n      ((void(__fastcall *)(_QWORD, __int64, __int64)) *\n       (&_frame_dummy_init_array_entry + i))(a1, a2, a3);\n  }\n}", "code_t": "void __fastcall _libc_csu_init(unsigned int a1, __int64 a2, __int64 a3) {\n  signed __int64 v4;\n  __int64 i;\n  init_proc();\n  v4 = &_do_global_dtors_aux_fini_array_entry - &_frame_dummy_init_array_entry;\n  if (v4) {\n    for (i = Number L; i != v4; ++i)\n      ((void(__fastcall *)(_QWORD, __int64, __int64)) *\n       (&_frame_dummy_init_array_entry + i))(a1, a2, a3);\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "lalithsuresh", "repo_name": "QEMU-Device-State-Visualisations", "path": "lalithsuresh/QEMU-Device-State-Visualisations/64cf06a41ca1d2670eec2fee358d5713aeb81dff67bc84a8c106db96fe7d7902", "path_in_repo": "lalithsuresh/QEMU-Device-State-Visualisations//ppc-softmmu/ppc405_boards.o", "objdump": "0000000000000d9c <taihu_cpld_readl>:\n     d9c:\t55                   \tpush   %rbp\n     d9d:\t48 89 e5             \tmov    %rsp,%rbp\n     da0:\t48 83 ec 20          \tsub    $0x20,%rsp\n     da4:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     da8:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     dab:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     db2:\t00 00 \n     db4:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     db8:\t31 c0                \txor    %eax,%eax\n     dba:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     dbd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     dc1:\t89 d6                \tmov    %edx,%esi\n     dc3:\t48 89 c7             \tmov    %rax,%rdi\n     dc6:\te8 2f fe ff ff       \tcallq  bfa <taihu_cpld_readb>\n     dcb:\tc1 e0 18             \tshl    $0x18,%eax\n     dce:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n     dd1:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     dd4:\t8d 50 01             \tlea    0x1(%rax),%edx\n     dd7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ddb:\t89 d6                \tmov    %edx,%esi\n     ddd:\t48 89 c7             \tmov    %rax,%rdi\n     de0:\te8 15 fe ff ff       \tcallq  bfa <taihu_cpld_readb>\n     de5:\tc1 e0 10             \tshl    $0x10,%eax\n     de8:\t09 45 f4             \tor     %eax,-0xc(%rbp)\n     deb:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     dee:\t8d 50 02             \tlea    0x2(%rax),%edx\n     df1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     df5:\t89 d6                \tmov    %edx,%esi\n     df7:\t48 89 c7             \tmov    %rax,%rdi\n     dfa:\te8 fb fd ff ff       \tcallq  bfa <taihu_cpld_readb>\n     dff:\tc1 e0 08             \tshl    $0x8,%eax\n     e02:\t09 45 f4             \tor     %eax,-0xc(%rbp)\n     e05:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     e08:\t8d 50 03             \tlea    0x3(%rax),%edx\n     e0b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e0f:\t89 d6                \tmov    %edx,%esi\n     e11:\t48 89 c7             \tmov    %rax,%rdi\n     e14:\te8 e1 fd ff ff       \tcallq  bfa <taihu_cpld_readb>\n     e19:\t09 45 f4             \tor     %eax,-0xc(%rbp)\n     e1c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n     e1f:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     e23:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     e2a:\t00 00 \n     e2c:\t74 05                \tje     e33 <taihu_cpld_readl+0x97>\n     e2e:\te8 00 00 00 00       \tcallq  e33 <taihu_cpld_readl+0x97>\n     e33:\tc9                   \tleaveq \n     e34:\tc3                   \tretq   ", "code_s": "__int64 __fastcall taihu_cpld_readl(unsigned __int8 *a1, int a2) {\n  unsigned int v3;\n  unsigned int v4;\n  unsigned int v5;\n  v3 = (unsigned int)taihu_cpld_readb(a1, a2) << Number;\n  v4 = ((unsigned int)taihu_cpld_readb(a1, a2 + Number) << Number) | v3;\n  v5 = ((unsigned int)taihu_cpld_readb(a1, a2 + Number) << Number) | v4;\n  return (unsigned int)taihu_cpld_readb(a1, a2 + Number) | v5;\n}", "code_t": "uint32_t __cdecl taihu_cpld_readl(void *opaque, target_phys_addr_t addr) {\n  uint32_t ret;\n  uint32_t reta;\n  uint32_t retb;\n  ret = taihu_cpld_readb(opaque, addr) << Number;\n  reta = (taihu_cpld_readb(opaque, addr + Number) << Number) | ret;\n  retb = (taihu_cpld_readb(opaque, addr + Number) << Number) | reta;\n  return taihu_cpld_readb(opaque, addr + Number) | retb;\n}", "var": [], "body_in_train": false}, {"repo_owner": "wmalik", "repo_name": "Qebek_Linux", "path": "wmalik/Qebek_Linux/656e76567e66bf573f078a7a189bc9af1c8aeed7d6ea1b1bead4b5452941c40e", "path_in_repo": "wmalik/Qebek_Linux/virtualization/qebek/trunk/ui/sdl_zoom.o", "objdump": "0000000000001b2c <sdl_zoom_blit>:\n    1b2c:\t55                   \tpush   %rbp\n    1b2d:\t48 89 e5             \tmov    %rsp,%rbp\n    1b30:\t48 83 ec 40          \tsub    $0x40,%rsp\n    1b34:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1b38:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    1b3c:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n    1b3f:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n    1b43:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1b4a:\t00 00 \n    1b4c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1b50:\t31 c0                \txor    %eax,%eax\n    1b52:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1b56:\t0f b7 00             \tmovzwl (%rax),%eax\n    1b59:\t66 85 c0             \ttest   %ax,%ax\n    1b5c:\t7e 0c                \tjle    1b6a <sdl_zoom_blit+0x3e>\n    1b5e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1b62:\t0f b7 00             \tmovzwl (%rax),%eax\n    1b65:\t83 e8 01             \tsub    $0x1,%eax\n    1b68:\teb 05                \tjmp    1b6f <sdl_zoom_blit+0x43>\n    1b6a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b6f:\t66 89 45 f0          \tmov    %ax,-0x10(%rbp)\n    1b73:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1b77:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n    1b7b:\t66 85 c0             \ttest   %ax,%ax\n    1b7e:\t7e 0d                \tjle    1b8d <sdl_zoom_blit+0x61>\n    1b80:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1b84:\t0f b7 40 02          \tmovzwl 0x2(%rax),%eax\n    1b88:\t83 e8 01             \tsub    $0x1,%eax\n    1b8b:\teb 05                \tjmp    1b92 <sdl_zoom_blit+0x66>\n    1b8d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b92:\t66 89 45 f2          \tmov    %ax,-0xe(%rbp)\n    1b96:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1b9a:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    1b9e:\t83 c0 01             \tadd    $0x1,%eax\n    1ba1:\t66 89 45 f4          \tmov    %ax,-0xc(%rbp)\n    1ba5:\t0f b7 45 f0          \tmovzwl -0x10(%rbp),%eax\n    1ba9:\t0f bf d0             \tmovswl %ax,%edx\n    1bac:\t0f b7 45 f4          \tmovzwl -0xc(%rbp),%eax\n    1bb0:\t0f b7 c0             \tmovzwl %ax,%eax\n    1bb3:\t01 c2                \tadd    %eax,%edx\n    1bb5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1bb9:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1bbc:\t39 c2                \tcmp    %eax,%edx\n    1bbe:\t7e 15                \tjle    1bd5 <sdl_zoom_blit+0xa9>\n    1bc0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1bc4:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1bc7:\t89 c2                \tmov    %eax,%edx\n    1bc9:\t0f b7 45 f0          \tmovzwl -0x10(%rbp),%eax\n    1bcd:\t29 c2                \tsub    %eax,%edx\n    1bcf:\t89 d0                \tmov    %edx,%eax\n    1bd1:\t66 89 45 f4          \tmov    %ax,-0xc(%rbp)\n    1bd5:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1bd9:\t0f b7 40 06          \tmovzwl 0x6(%rax),%eax\n    1bdd:\t83 c0 01             \tadd    $0x1,%eax\n    1be0:\t66 89 45 f6          \tmov    %ax,-0xa(%rbp)\n    1be4:\t0f b7 45 f2          \tmovzwl -0xe(%rbp),%eax\n    1be8:\t0f bf d0             \tmovswl %ax,%edx\n    1beb:\t0f b7 45 f6          \tmovzwl -0xa(%rbp),%eax\n    1bef:\t0f b7 c0             \tmovzwl %ax,%eax\n    1bf2:\t01 c2                \tadd    %eax,%edx\n    1bf4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1bf8:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1bfb:\t39 c2                \tcmp    %eax,%edx\n    1bfd:\t7e 15                \tjle    1c14 <sdl_zoom_blit+0xe8>\n    1bff:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c03:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1c06:\t89 c2                \tmov    %eax,%edx\n    1c08:\t0f b7 45 f2          \tmovzwl -0xe(%rbp),%eax\n    1c0c:\t29 c2                \tsub    %eax,%edx\n    1c0e:\t89 d0                \tmov    %edx,%eax\n    1c10:\t66 89 45 f6          \tmov    %ax,-0xa(%rbp)\n    1c14:\t0f b7 45 f0          \tmovzwl -0x10(%rbp),%eax\n    1c18:\t0f bf d0             \tmovswl %ax,%edx\n    1c1b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1c1f:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1c22:\t0f af c2             \timul   %edx,%eax\n    1c25:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    1c29:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c2d:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1c30:\tf3 0f 2a c8          \tcvtsi2ss %eax,%xmm1\n    1c34:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n    1c38:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n    1c3c:\t66 89 45 e8          \tmov    %ax,-0x18(%rbp)\n    1c40:\t0f b7 45 f2          \tmovzwl -0xe(%rbp),%eax\n    1c44:\t0f bf d0             \tmovswl %ax,%edx\n    1c47:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1c4b:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1c4e:\t0f af c2             \timul   %edx,%eax\n    1c51:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n    1c55:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c59:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1c5c:\tf3 0f 2a c8          \tcvtsi2ss %eax,%xmm1\n    1c60:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n    1c64:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n    1c68:\t66 89 45 ea          \tmov    %ax,-0x16(%rbp)\n    1c6c:\t0f b7 45 f4          \tmovzwl -0xc(%rbp),%eax\n    1c70:\t0f b7 d0             \tmovzwl %ax,%edx\n    1c73:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1c77:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1c7a:\t0f af d0             \timul   %eax,%edx\n    1c7d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c81:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1c84:\t83 e8 01             \tsub    $0x1,%eax\n    1c87:\t01 d0                \tadd    %edx,%eax\n    1c89:\tf2 0f 2a c0          \tcvtsi2sd %eax,%xmm0\n    1c8d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c91:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1c94:\tf2 0f 2a c8          \tcvtsi2sd %eax,%xmm1\n    1c98:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    1c9c:\tf2 0f 2c c0          \tcvttsd2si %xmm0,%eax\n    1ca0:\t66 89 45 ec          \tmov    %ax,-0x14(%rbp)\n    1ca4:\t0f b7 45 f6          \tmovzwl -0xa(%rbp),%eax\n    1ca8:\t0f b7 d0             \tmovzwl %ax,%edx\n    1cab:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1caf:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1cb2:\t0f af d0             \timul   %eax,%edx\n    1cb5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1cb9:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1cbc:\t83 e8 01             \tsub    $0x1,%eax\n    1cbf:\t01 d0                \tadd    %edx,%eax\n    1cc1:\tf2 0f 2a c0          \tcvtsi2sd %eax,%xmm0\n    1cc5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1cc9:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1ccc:\tf2 0f 2a c8          \tcvtsi2sd %eax,%xmm1\n    1cd0:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    1cd4:\tf2 0f 2c c0          \tcvttsd2si %xmm0,%eax\n    1cd8:\t66 89 45 ee          \tmov    %ax,-0x12(%rbp)\n    1cdc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1ce0:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1ce3:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n    1ce6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1cea:\t8b 78 10             \tmov    0x10(%rax),%edi\n    1ced:\t89 c8                \tmov    %ecx,%eax\n    1cef:\t99                   \tcltd   \n    1cf0:\tf7 ff                \tidiv   %edi\n    1cf2:\t83 c0 01             \tadd    $0x1,%eax\n    1cf5:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    1cf8:\t0f b7 45 e8          \tmovzwl -0x18(%rbp),%eax\n    1cfc:\t0f bf d0             \tmovswl %ax,%edx\n    1cff:\t0f b7 45 ec          \tmovzwl -0x14(%rbp),%eax\n    1d03:\t0f b7 c0             \tmovzwl %ax,%eax\n    1d06:\t01 c2                \tadd    %eax,%edx\n    1d08:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1d0c:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1d0f:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n    1d12:\t39 c2                \tcmp    %eax,%edx\n    1d14:\t7d 0f                \tjge    1d25 <sdl_zoom_blit+0x1f9>\n    1d16:\t0f b7 45 ec          \tmovzwl -0x14(%rbp),%eax\n    1d1a:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    1d1d:\t01 d0                \tadd    %edx,%eax\n    1d1f:\t66 89 45 ec          \tmov    %ax,-0x14(%rbp)\n    1d23:\teb 15                \tjmp    1d3a <sdl_zoom_blit+0x20e>\n    1d25:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1d29:\t8b 40 10             \tmov    0x10(%rax),%eax\n    1d2c:\t89 c2                \tmov    %eax,%edx\n    1d2e:\t0f b7 45 e8          \tmovzwl -0x18(%rbp),%eax\n    1d32:\t29 c2                \tsub    %eax,%edx\n    1d34:\t89 d0                \tmov    %edx,%eax\n    1d36:\t66 89 45 ec          \tmov    %ax,-0x14(%rbp)\n    1d3a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1d3e:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1d41:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n    1d44:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1d48:\t8b 78 14             \tmov    0x14(%rax),%edi\n    1d4b:\t89 c8                \tmov    %ecx,%eax\n    1d4d:\t99                   \tcltd   \n    1d4e:\tf7 ff                \tidiv   %edi\n    1d50:\t83 c0 01             \tadd    $0x1,%eax\n    1d53:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    1d56:\t0f b7 45 ea          \tmovzwl -0x16(%rbp),%eax\n    1d5a:\t0f bf d0             \tmovswl %ax,%edx\n    1d5d:\t0f b7 45 ee          \tmovzwl -0x12(%rbp),%eax\n    1d61:\t0f b7 c0             \tmovzwl %ax,%eax\n    1d64:\t01 c2                \tadd    %eax,%edx\n    1d66:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1d6a:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1d6d:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n    1d70:\t39 c2                \tcmp    %eax,%edx\n    1d72:\t7d 0f                \tjge    1d83 <sdl_zoom_blit+0x257>\n    1d74:\t0f b7 45 ee          \tmovzwl -0x12(%rbp),%eax\n    1d78:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    1d7b:\t01 d0                \tadd    %edx,%eax\n    1d7d:\t66 89 45 ee          \tmov    %ax,-0x12(%rbp)\n    1d81:\teb 15                \tjmp    1d98 <sdl_zoom_blit+0x26c>\n    1d83:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1d87:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1d8a:\t89 c2                \tmov    %eax,%edx\n    1d8c:\t0f b7 45 ea          \tmovzwl -0x16(%rbp),%eax\n    1d90:\t29 c2                \tsub    %eax,%edx\n    1d92:\t89 d0                \tmov    %edx,%eax\n    1d94:\t66 89 45 ee          \tmov    %ax,-0x12(%rbp)\n    1d98:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1d9c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1da0:\t0f b6 40 08          \tmovzbl 0x8(%rax),%eax\n    1da4:\t3c 20                \tcmp    $0x20,%al\n    1da6:\t75 19                \tjne    1dc1 <sdl_zoom_blit+0x295>\n    1da8:\t48 8d 4d e8          \tlea    -0x18(%rbp),%rcx\n    1dac:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    1daf:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n    1db3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1db7:\t48 89 c7             \tmov    %rax,%rdi\n    1dba:\te8 41 e2 ff ff       \tcallq  0 <sdl_zoom_rgb32>\n    1dbf:\teb 4e                \tjmp    1e0f <sdl_zoom_blit+0x2e3>\n    1dc1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1dc5:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1dc9:\t0f b6 40 08          \tmovzbl 0x8(%rax),%eax\n    1dcd:\t3c 10                \tcmp    $0x10,%al\n    1dcf:\t75 19                \tjne    1dea <sdl_zoom_blit+0x2be>\n    1dd1:\t48 8d 4d e8          \tlea    -0x18(%rbp),%rcx\n    1dd5:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n    1dd8:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n    1ddc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1de0:\t48 89 c7             \tmov    %rax,%rdi\n    1de3:\te8 80 ef ff ff       \tcallq  d68 <sdl_zoom_rgb16>\n    1de8:\teb 25                \tjmp    1e0f <sdl_zoom_blit+0x2e3>\n    1dea:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1df1 <sdl_zoom_blit+0x2c5>\n    1df1:\t48 89 c1             \tmov    %rax,%rcx\n    1df4:\tba 1b 00 00 00       \tmov    $0x1b,%edx\n    1df9:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1dfe:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1e03:\te8 00 00 00 00       \tcallq  1e08 <sdl_zoom_blit+0x2dc>\n    1e08:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1e0d:\teb 10                \tjmp    1e1f <sdl_zoom_blit+0x2f3>\n    1e0f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1e13:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    1e17:\t48 89 10             \tmov    %rdx,(%rax)\n    1e1a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e1f:\t48 8b 7d f8          \tmov    -0x8(%rbp),%rdi\n    1e23:\t64 48 33 3c 25 28 00 \txor    %fs:0x28,%rdi\n    1e2a:\t00 00 \n    1e2c:\t74 05                \tje     1e33 <sdl_zoom_blit+0x307>\n    1e2e:\te8 00 00 00 00       \tcallq  1e33 <sdl_zoom_blit+0x307>\n    1e33:\tc9                   \tleaveq \n    1e34:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall sdl_zoom_blit(__int64 a1, __int64 a2, int a3, __int16 *a4) {\n  __int16 v4;\n  __int16 v5;\n  int v8;\n  int v9;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int16 <span class=\"supfact\">v11</span>;\n  __int16 v12;\n  unsigned __int16 v13;\n  unsigned __int16 v14;\n  unsigned __int64 v15;\n  v15 = __readfsqword(Number);\n  if (*a4 <= Number)\n    v4 = Number;\n  else\n    v4 = *a4 - Number;\n  <span class=\"supfact\">v11</span> = v4;\n  if (a4[Number] <= Number)\n    v5 = Number;\n  else\n    v5 = a4[Number] - Number;\n  v12 = v5;\n  v13 = a4[Number] + Number;\n  if (v13 + <span class=\"supfact\">v11</span> > *(_DWORD *)(a1 + Number))\n    v13 = *(_DWORD *)(a1 + Number) - <span class=\"supfact\">v11</span>;\n  v14 = a4[Number] + Number;\n  if (v14 + v12 > *(_DWORD *)(a1 + Number))\n    v14 = *(_DWORD *)(a1 + Number) - v12;\n  LOWORD(<span class=\"supfact\">v10</span>) =\n      (int)(float)((float)(<span class=\"supfact\">v11</span> * *(_DWORD *)(a2 + Number)) /\n                   (float)*(int *)(a1 + Number));\n  WORD1(<span class=\"supfact\">v10</span>) =\n      (int)(float)((float)(v12 * *(_DWORD *)(a2 + Number)) /\n                   (float)*(int *)(a1 + Number));\n  WORD2(<span class=\"supfact\">v10</span>) =\n      (int)((double)(*(_DWORD *)(a2 + Number) * v13 + *(_DWORD *)(a1 + Number) -\n                     Number) /\n            (double)*(int *)(a1 + Number));\n  HIWORD(<span class=\"supfact\">v10</span>) =\n      (int)((double)(*(_DWORD *)(a2 + Number) * v14 + *(_DWORD *)(a1 + Number) -\n                     Number) /\n            (double)*(int *)(a1 + Number));\n  v8 = (*(_DWORD *)(a2 + Number) - Number) / *(_DWORD *)(a1 + Number) + Number;\n  if (WORD2(<span class=\"supfact\">v10</span>) + (__int16)<span class=\"supfact\">v10</span> >=\n      *(_DWORD *)(a2 + Number) - v8)\n    WORD2(<span class=\"supfact\">v10</span>) = *(_DWORD *)(a2 + Number) - <span class=\"supfact\">v10</span>;\n  else\n    WORD2(<span class=\"supfact\">v10</span>) += v8;\n  v9 = (*(_DWORD *)(a2 + Number) - Number) / *(_DWORD *)(a1 + Number) + Number;\n  if (HIWORD(<span class=\"supfact\">v10</span>) + SWORD1(<span class=\"supfact\">v10</span>) >=\n      *(_DWORD *)(a2 + Number) - v9)\n    HIWORD(<span class=\"supfact\">v10</span>) =\n        *(_DWORD *)(a2 + Number) - WORD1(<span class=\"supfact\">v10</span>);\n  else\n    HIWORD(<span class=\"supfact\">v10</span>) += v9;\n  if (*(_BYTE *)(*(_QWORD *)(a1 + Number) + Number L) == Number) {\n    sdl_zoom_rgb32(a1, a2, a3, (__int16 *)&<span class=\"supfact\">v10</span>);\n  } else {\n    if (*(_BYTE *)(*(_QWORD *)(a1 + Number) + Number L) != Number) {\n      fwrite(String, Number, Number, stderr);\n      return Number;\n    }\n    sdl_zoom_rgb16(a1, a2, a3, (__int16 *)&<span class=\"supfact\">v10</span>);\n  }\n  *(_QWORD *)a4 = <span class=\"supfact\">v10</span>;\n  return Number L;\n}", "code_t": "int __cdecl sdl_zoom_blit(SDL_Surface_0 *src_sfc, SDL_Surface_0 *dst_sfc,\n                          int smooth, SDL_Rect_0 *in_rect) {\n  Sint16 v4;\n  Sint16 v5;\n  int extra;\n  int extraa;\n  SDL_Rect_0 <span class=\"supfact\">zoom</span>;\n  SDL_Rect_0 <span class=\"supfact\">src_rect</span>;\n  unsigned __int64 v12;\n  v12 = __readfsqword(Number);\n  if (in_rect->x <= Number)\n    v4 = Number;\n  else\n    v4 = in_rect->x - Number;\n  <span class=\"supfact\">src_rect</span>.x = v4;\n  if (in_rect->y <= Number)\n    v5 = Number;\n  else\n    v5 = in_rect->y - Number;\n  <span class=\"supfact\">src_rect</span>.y = v5;\n  <span class=\"supfact\">src_rect</span>.w = in_rect->w + Number;\n  if (<span class=\"supfact\">src_rect</span>.w + <span class=\"supfact\">src_rect</span>.x > src_sfc->w)\n    <span class=\"supfact\">src_rect</span>.w = src_sfc->w - <span class=\"supfact\">src_rect</span>.x;\n  <span class=\"supfact\">src_rect</span>.h = in_rect->h + Number;\n  if (<span class=\"supfact\">src_rect</span>.h + <span class=\"supfact\">src_rect</span>.y > src_sfc->h)\n    <span class=\"supfact\">src_rect</span>.h = src_sfc->h - <span class=\"supfact\">src_rect</span>.y;\n  <span class=\"supfact\">zoom</span>.x =\n      (int)(float)((float)(<span class=\"supfact\">src_rect</span>.x * dst_sfc->w) /\n                   (float)src_sfc->w);\n  <span class=\"supfact\">zoom</span>.y =\n      (int)(float)((float)(<span class=\"supfact\">src_rect</span>.y * dst_sfc->h) /\n                   (float)src_sfc->h);\n  <span class=\"supfact\">zoom</span>.w =\n      (int)((double)(dst_sfc->w * <span class=\"supfact\">src_rect</span>.w + src_sfc->w -\n                     Number) /\n            (double)src_sfc->w);\n  <span class=\"supfact\">zoom</span>.h =\n      (int)((double)(dst_sfc->h * <span class=\"supfact\">src_rect</span>.h + src_sfc->h -\n                     Number) /\n            (double)src_sfc->h);\n  extra = (dst_sfc->w - Number) / src_sfc->w + Number;\n  if (<span class=\"supfact\">zoom</span>.w + <span class=\"supfact\">zoom</span>.x >= dst_sfc->w - extra)\n    <span class=\"supfact\">zoom</span>.w = dst_sfc->w - <span class=\"supfact\">zoom</span>.x;\n  else\n    <span class=\"supfact\">zoom</span>.w += extra;\n  extraa = (dst_sfc->h - Number) / src_sfc->h + Number;\n  if (<span class=\"supfact\">zoom</span>.h + <span class=\"supfact\">zoom</span>.y >= dst_sfc->h - extraa)\n    <span class=\"supfact\">zoom</span>.h = dst_sfc->h - <span class=\"supfact\">zoom</span>.y;\n  else\n    <span class=\"supfact\">zoom</span>.h += extraa;\n  if (src_sfc->format->BitsPerPixel == Number) {\n    sdl_zoom_rgb32(src_sfc, dst_sfc, smooth, &<span class=\"supfact\">zoom</span>);\n  } else {\n    if (src_sfc->format->BitsPerPixel != Number) {\n      fwrite(String, Number, Number, stderr);\n      return Number;\n    }\n    sdl_zoom_rgb16(src_sfc, dst_sfc, smooth, &<span class=\"supfact\">zoom</span>);\n  }\n  *in_rect = <span class=\"supfact\">zoom</span>;\n  return Number;\n}", "var": [{"name": "v10", "type": "SDL_Surface_0 *", "pred_name": "dsta", "ref_name": "zoom", "ref_type": "struct SDL_Rect_0 { Sint16 x; Sint16 y; Uint16 w; Uint16 h; }"}, {"name": "v11", "type": "struct SDL_Rect_0 { Sint16 x; Sint16 y; Uint16 w; Uint16 h; }", "pred_name": "zoom", "ref_name": "src_rect", "ref_type": "struct SDL_Rect_0 { Sint16 x; Sint16 y; Uint16 w; Uint16 h; }"}], "body_in_train": true}, {"repo_owner": "centic9", "repo_name": "git-ppa", "path": "centic9/git-ppa/6bb8ab4996a28c36b7d10b5fd82f944bd73d24461e693228b6f5e6c81233b6ea", "path_in_repo": "centic9/git-ppa//diffcore-pickaxe.o", "objdump": "0000000000000507 <pickaxe>:\n 507:\t55                   \tpush   %rbp\n 508:\t48 89 e5             \tmov    %rsp,%rbp\n 50b:\t48 83 ec 60          \tsub    $0x60,%rsp\n 50f:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 513:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n 517:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n 51b:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n 51f:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n 523:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n 52a:\t00 \n 52b:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n 532:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 535:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n 538:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 53c:\t8b 40 58             \tmov    0x58(%rax),%eax\n 53f:\t83 e0 01             \tand    $0x1,%eax\n 542:\t85 c0                \ttest   %eax,%eax\n 544:\t0f 84 95 00 00 00    \tje     5df <pickaxe+0xd8>\n 54a:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 551:\teb 46                \tjmp    599 <pickaxe+0x92>\n 553:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 557:\t48 8b 00             \tmov    (%rax),%rax\n 55a:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 55d:\t48 63 d2             \tmovslq %edx,%rdx\n 560:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 564:\t48 01 d0             \tadd    %rdx,%rax\n 567:\t48 8b 00             \tmov    (%rax),%rax\n 56a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 56e:\t48 8b 7d a8          \tmov    -0x58(%rbp),%rdi\n 572:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n 576:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n 57a:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n 57e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 582:\t49 89 f8             \tmov    %rdi,%r8\n 585:\t48 89 c7             \tmov    %rax,%rdi\n 588:\te8 d5 fd ff ff       \tcallq  362 <pickaxe_match>\n 58d:\t85 c0                \ttest   %eax,%eax\n 58f:\t0f 85 e6 00 00 00    \tjne    67b <pickaxe+0x174>\n 595:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 599:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 59d:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 5a0:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 5a3:\t7c ae                \tjl     553 <pickaxe+0x4c>\n 5a5:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 5ac:\teb 23                \tjmp    5d1 <pickaxe+0xca>\n 5ae:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 5b2:\t48 8b 00             \tmov    (%rax),%rax\n 5b5:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 5b8:\t48 63 d2             \tmovslq %edx,%rdx\n 5bb:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 5bf:\t48 01 d0             \tadd    %rdx,%rax\n 5c2:\t48 8b 00             \tmov    (%rax),%rax\n 5c5:\t48 89 c7             \tmov    %rax,%rdi\n 5c8:\te8 00 00 00 00       \tcallq  5cd <pickaxe+0xc6>\n 5cd:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 5d1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 5d5:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 5d8:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 5db:\t7c d1                \tjl     5ae <pickaxe+0xa7>\n 5dd:\teb 78                \tjmp    657 <pickaxe+0x150>\n 5df:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 5e6:\teb 63                \tjmp    64b <pickaxe+0x144>\n 5e8:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 5ec:\t48 8b 00             \tmov    (%rax),%rax\n 5ef:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 5f2:\t48 63 d2             \tmovslq %edx,%rdx\n 5f5:\t48 c1 e2 03          \tshl    $0x3,%rdx\n 5f9:\t48 01 d0             \tadd    %rdx,%rax\n 5fc:\t48 8b 00             \tmov    (%rax),%rax\n 5ff:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 603:\t48 8b 7d a8          \tmov    -0x58(%rbp),%rdi\n 607:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n 60b:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n 60f:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n 613:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 617:\t49 89 f8             \tmov    %rdi,%r8\n 61a:\t48 89 c7             \tmov    %rax,%rdi\n 61d:\te8 40 fd ff ff       \tcallq  362 <pickaxe_match>\n 622:\t85 c0                \ttest   %eax,%eax\n 624:\t74 15                \tje     63b <pickaxe+0x134>\n 626:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 62a:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 62e:\t48 89 d6             \tmov    %rdx,%rsi\n 631:\t48 89 c7             \tmov    %rax,%rdi\n 634:\te8 00 00 00 00       \tcallq  639 <pickaxe+0x132>\n 639:\teb 0c                \tjmp    647 <pickaxe+0x140>\n 63b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 63f:\t48 89 c7             \tmov    %rax,%rdi\n 642:\te8 00 00 00 00       \tcallq  647 <pickaxe+0x140>\n 647:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 64b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 64f:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 652:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 655:\t7c 91                \tjl     5e8 <pickaxe+0xe1>\n 657:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 65b:\t48 8b 00             \tmov    (%rax),%rax\n 65e:\t48 89 c7             \tmov    %rax,%rdi\n 661:\te8 00 00 00 00       \tcallq  666 <pickaxe+0x15f>\n 666:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n 66a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 66e:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 672:\t48 89 01             \tmov    %rax,(%rcx)\n 675:\t48 89 51 08          \tmov    %rdx,0x8(%rcx)\n 679:\teb 01                \tjmp    67c <pickaxe+0x175>\n 67b:\t90                   \tnop\n 67c:\tc9                   \tleaveq \n 67d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pickaxe(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n                           __int64(__fastcall *a5)(void **, void **, __int64,\n                                                   __int64, __int64)) {\n  __int64 result;\n  __int64 v6;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 v11;\n  _QWORD *v12;\n  _QWORD *v13;\n  int i;\n  <span class=\"supfact\">v10</span> = Number L;\n  v11 = Number L;\n  if ((*(_DWORD *)(a2 + Number) & Number) != Number) {\n    for (i = Number; i < *(_DWORD *)(a1 + Number); ++i) {\n      v12 = *(_QWORD **)(Number L * i + *(_QWORD *)a1);\n      result = pickaxe_match(v12, a2, a3, a4, a5);\n      if ((_DWORD)result)\n        return result;\n    }\n    for (i = Number; i < *(_DWORD *)(a1 + Number); ++i)\n      diff_free_filepair(*(_QWORD *)(Number L * i + *(_QWORD *)a1));\n  } else {\n    for (i = Number; i < *(_DWORD *)(a1 + Number); ++i) {\n      v13 = *(_QWORD **)(Number L * i + *(_QWORD *)a1);\n      if ((unsigned int)pickaxe_match(v13, a2, a3, a4, a5))\n        diff_q(&<span class=\"supfact\">v10</span>, v13);\n      else\n        diff_free_filepair(v13);\n    }\n  }\n  free(*(void **)a1);\n  result = <span class=\"supfact\">v10</span>;\n  v6 = v11;\n  *(_QWORD *)a1 = <span class=\"supfact\">v10</span>;\n  *(_QWORD *)(a1 + Number) = v6;\n  return result;\n}", "code_t": "void __cdecl pickaxe(diff_queue_struct *q, diff_options *o, regex_t *regexp,\n                     kwset_t_0 kws, pickaxe_fn fn) {\n  __int64 v5;\n  diff_queue_struct <span class=\"supfact\">outq</span>;\n  diff_filepair *p;\n  diff_filepair *p_0;\n  int i;\n  <span class=\"supfact\">outq</span>.queue = Number L;\n  <span class=\"supfact\">outq</span>.alloc = Number;\n  <span class=\"supfact\">outq</span>.nr = Number;\n  if ((o->pickaxe_opts & Number) != Number) {\n    for (i = Number; i < q->nr; ++i) {\n      p = q->queue[i];\n      if (pickaxe_match(p, o, regexp, kws, fn))\n        return;\n    }\n    for (i = Number; i < q->nr; ++i)\n      diff_free_filepair(q->queue[i]);\n  } else {\n    for (i = Number; i < q->nr; ++i) {\n      p_0 = q->queue[i];\n      if (pickaxe_match(p_0, o, regexp, kws, fn))\n        diff_q(&<span class=\"supfact\">outq</span>, p_0);\n      else\n        diff_free_filepair(p_0);\n    }\n  }\n  free(q->queue);\n  v5 = *(_QWORD *)&<span class=\"supfact\">outq</span>.alloc;\n  q->queue = <span class=\"supfact\">outq</span>.queue;\n  *(_QWORD *)&q->alloc = v5;\n}", "var": [{"name": "v10", "type": "struct diff_queue_struct { diff_filepair ** queue; int alloc; int nr; }", "pred_name": "outq", "ref_name": "outq", "ref_type": "struct diff_queue_struct { diff_filepair ** queue; int alloc; int nr; }"}], "body_in_train": true}, {"repo_owner": "Chadster766", "repo_name": "McWRT", "path": "Chadster766/McWRT/8161a116325d80774a947b6eee9d3e76babfabbf185dab3cf9726dff777ae0b5", "path_in_repo": "Chadster766/McWRT/attitude_adjustment/build_dir/host/cmake-2.8.12/Source/CMakeFiles/CMakeLib.dir/cmGeneratorExpression.cxx.o", "objdump": "", "code_s": "__int64 __fastcall std\n    allocator<cmGeneratorExpressionToken> ~allocator(__int64 a1) {\n  return __gnu_cxx new_allocator<cmGeneratorExpressionToken> ~new_allocator(a1);\n}", "code_t": "__int64 __fastcall std\n    allocator<cmGeneratorExpressionToken> ~allocator(__int64 a1) {\n  return __gnu_cxx new_allocator<cmGeneratorExpressionToken> ~new_allocator(a1);\n}", "var": [], "body_in_train": false}, {"repo_owner": "Shoko84", "repo_name": "arcadeplusplus", "path": "Shoko84/arcadeplusplus/69261b135f6769d0bc919ca4cf1aa572440591107d5adc15a63a32d0245a60d5", "path_in_repo": "Shoko84/arcadeplusplus/lib/Libcaca/lib_arcade_libcaca.so", "objdump": "", "code_s": "__int64 __fastcall std allocator<std __detail _Hash_node_base *>\nallocator<std __detail _Hash_node<\n    std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                      std allocator<char>> const,\n             arcade Sprite>,\n    true>>(__int64 a1) {\n  return __gnu_cxx new_allocator<std __detail _Hash_node_base *> new_allocator(\n      a1);\n}", "code_t": "__int64 __fastcall std allocator<std __detail _Hash_node_base *>\nallocator<std __detail _Hash_node<\n    std pair<std __cxx11 basic_string<char, std char_traits<char>,\n                                      std allocator<char>> const,\n             arcade Sprite>,\n    true>>(__int64 a1) {\n  return __gnu_cxx new_allocator<std __detail _Hash_node_base *> new_allocator(\n      a1);\n}", "var": [], "body_in_train": true}, {"repo_owner": "firejox", "repo_name": "minipascal", "path": "firejox/minipascal/ac85b40237e5a55d37b498555e8f09b6804f1598fa5518a7ca9255a178657711", "path_in_repo": "firejox/minipascal//scan.o", "objdump": "0000000000000317 <text_iterate>:\n 317:\t55                   \tpush   %rbp\n 318:\t48 89 e5             \tmov    %rsp,%rbp\n 31b:\t48 83 ec 20          \tsub    $0x20,%rsp\n 31f:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n 323:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 32a:\teb 36                \tjmp    362 <text_iterate+0x4b>\n 32c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 32f:\t48 98                \tcltq   \n 331:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 338:\t00 \n 339:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 33d:\teb 18                \tjmp    357 <text_iterate+0x40>\n 33f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 343:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 347:\t48 89 c7             \tmov    %rax,%rdi\n 34a:\tff d2                \tcallq  *%rdx\n 34c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 350:\t48 8b 00             \tmov    (%rax),%rax\n 353:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 357:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n 35c:\t75 e1                \tjne    33f <text_iterate+0x28>\n 35e:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 362:\t83 7d fc 7e          \tcmpl   $0x7e,-0x4(%rbp)\n 366:\t7e c4                \tjle    32c <text_iterate+0x15>\n 368:\t90                   \tnop\n 369:\t90                   \tnop\n 36a:\tc9                   \tleaveq \n 36b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall text_iterate(void(__fastcall *a1)(__int64 *)) {\n  __int64 result;\n  __int64 *j;\n  int i;\n  for (i = Number; i <= Number; ++i) {\n    result = txttab[i];\n    for (j = (__int64 *)result; j; j = (__int64 *)*j) {\n      a1(j);\n      result = *j;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl text_iterate(void (*proc)(TEXT *)) {\n  TEXT *p;\n  int i;\n  for (i = Number; i <= Number; ++i) {\n    for (p = txttab[i]; p; p = p->text_next)\n      proc(p);\n  }\n}", "var": [], "body_in_train": false}, {"repo_owner": "csjpeter", "repo_name": "psqldroid", "path": "csjpeter/psqldroid/94c7084f66ef578b98993829ffd1ba68cfa8a73106849332b149f95918961413", "path_in_repo": "csjpeter/psqldroid//src/backend/nodes/copyfuncs.o", "objdump": "00000000000051c9 <_copyAlterTableStmt>:\n    51c9:\t55                   \tpush   %rbp\n    51ca:\t48 89 e5             \tmov    %rsp,%rbp\n    51cd:\t48 83 ec 20          \tsub    $0x20,%rsp\n    51d1:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    51d5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 51dc <_copyAlterTableStmt+0x13>\n    51dc:\tbe 20 00 00 00       \tmov    $0x20,%esi\n    51e1:\t48 89 c7             \tmov    %rax,%rdi\n    51e4:\te8 00 00 00 00       \tcallq  51e9 <_copyAlterTableStmt+0x20>\n    51e9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    51ed:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    51f1:\tc7 00 c2 02 00 00    \tmovl   $0x2c2,(%rax)\n    51f7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    51fb:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    51ff:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5203:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    5207:\t48 89 c7             \tmov    %rax,%rdi\n    520a:\te8 00 00 00 00       \tcallq  520f <_copyAlterTableStmt+0x46>\n    520f:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    5213:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n    5217:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    521b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    521f:\t48 89 c7             \tmov    %rax,%rdi\n    5222:\te8 00 00 00 00       \tcallq  5227 <_copyAlterTableStmt+0x5e>\n    5227:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    522b:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n    522f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5233:\t8b 50 18             \tmov    0x18(%rax),%edx\n    5236:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    523a:\t89 50 18             \tmov    %edx,0x18(%rax)\n    523d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    5241:\tc9                   \tleaveq \n    5242:\tc3                   \tretq   ", "code_s": "__int64 __fastcall copyAlterTableStmt(__int64 a1) {\n  __int64 v2;\n  v2 = MemoryContextAllocZeroAligned(CurrentMemoryContext, Number L);\n  *(_DWORD *)v2 = Number;\n  *(_QWORD *)(v2 + Number) = copyObject(*(_QWORD *)(a1 + Number));\n  *(_QWORD *)(v2 + Number) = copyObject(*(_QWORD *)(a1 + Number));\n  *(_DWORD *)(v2 + Number) = *(_DWORD *)(a1 + Number);\n  return v2;\n}", "code_t": "AlterTableStmt_0 *__cdecl copyAlterTableStmt(AlterTableStmt_0 *from) {\n  Node_0 *_result;\n  _result =\n      (Node_0 *)MemoryContextAllocZeroAligned(CurrentMemoryContext, Number L);\n  _result->type = T_AlterTableStmt;\n  *(_QWORD *)&_result[Number].type = copyObject(from->relation);\n  *(_QWORD *)&_result[Number].type = copyObject(from->cmds);\n  _result[Number].type = (NodeTag_0)from->relkind;\n  return (AlterTableStmt_0 *)_result;\n}", "var": [], "body_in_train": false}, {"repo_owner": "the0ry", "repo_name": "gfiber-gflt100", "path": "the0ry/gfiber-gflt100/cadc8f960aa71b0587735655e0d5bdc4b019d2ed6c1d18c59137f8398cd5f4c0", "path_in_repo": "the0ry/gfiber-gflt100/userspace/gpl/apps/sysstat/sadc", "objdump": "", "code_s": "int open(const char *file, int oflag, ...) { return open(file, oflag); }", "code_t": "int open(const char *file, int oflag, ...) { return open(file, oflag); }", "var": [], "body_in_train": true}, {"repo_owner": "dchadic", "repo_name": "linux-cmps107", "path": "dchadic/linux-cmps107/a2f20e4392e025c7ef1e81dba67338622cf72e8df67cc495b536bae3664d818b", "path_in_repo": "dchadic/linux-cmps107/tools/lib/traceevent/event-parse.o", "objdump": "0000000000004f44 <process_flags>:\n    4f44:\t55                   \tpush   %rbp\n    4f45:\t48 89 e5             \tmov    %rsp,%rbp\n    4f48:\t48 83 ec 40          \tsub    $0x40,%rsp\n    4f4c:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    4f50:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    4f54:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    4f58:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    4f5f:\t00 \n    4f60:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    4f64:\tba 30 00 00 00       \tmov    $0x30,%edx\n    4f69:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4f6e:\t48 89 c7             \tmov    %rax,%rdi\n    4f71:\te8 00 00 00 00       \tcallq  4f76 <process_flags+0x32>\n    4f76:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    4f7a:\tc7 40 08 03 00 00 00 \tmovl   $0x3,0x8(%rax)\n    4f81:\te8 00 00 00 00       \tcallq  4f86 <process_flags+0x42>\n    4f86:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    4f8a:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    4f8f:\t75 64                \tjne    4ff5 <process_flags+0xb1>\n    4f91:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4f97 <process_flags+0x53>\n    4f97:\t85 c0                \ttest   %eax,%eax\n    4f99:\t74 54                \tje     4fef <process_flags+0xab>\n    4f9b:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    4fa0:\t74 30                \tje     4fd2 <process_flags+0x8e>\n    4fa2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4fa6:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    4faa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    4fae:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    4fb2:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 4fb9 <process_flags+0x75>\n    4fb9:\t48 89 c6             \tmov    %rax,%rsi\n    4fbc:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4fc3 <process_flags+0x7f>\n    4fc3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4fc8:\te8 00 00 00 00       \tcallq  4fcd <process_flags+0x89>\n    4fcd:\te9 5e 01 00 00       \tjmpq   5130 <process_flags+0x1ec>\n    4fd2:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 4fd9 <process_flags+0x95>\n    4fd9:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 4fe0 <process_flags+0x9c>\n    4fe0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4fe5:\te8 00 00 00 00       \tcallq  4fea <process_flags+0xa6>\n    4fea:\te9 41 01 00 00       \tjmpq   5130 <process_flags+0x1ec>\n    4fef:\t90                   \tnop\n    4ff0:\te9 3b 01 00 00       \tjmpq   5130 <process_flags+0x1ec>\n    4ff5:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    4ff9:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    4ffd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    5001:\t48 89 ce             \tmov    %rcx,%rsi\n    5004:\t48 89 c7             \tmov    %rax,%rdi\n    5007:\te8 f9 de ff ff       \tcallq  2f05 <process_field_arg>\n    500c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    500f:\teb 1a                \tjmp    502b <process_flags+0xe7>\n    5011:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    5015:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    5019:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    501d:\t48 89 ce             \tmov    %rcx,%rsi\n    5020:\t48 89 c7             \tmov    %rax,%rdi\n    5023:\te8 ad e4 ff ff       \tcallq  34d5 <process_op>\n    5028:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    502b:\t83 7d fc 04          \tcmpl   $0x4,-0x4(%rbp)\n    502f:\t74 e0                \tje     5011 <process_flags+0xcd>\n    5031:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    5035:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    5038:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 503f <process_flags+0xfb>\n    503f:\tba 05 00 00 00       \tmov    $0x5,%edx\n    5044:\t89 c7                \tmov    %eax,%edi\n    5046:\te8 ad cd ff ff       \tcallq  1df8 <test_type_token>\n    504b:\t85 c0                \ttest   %eax,%eax\n    504d:\t0f 85 ca 00 00 00    \tjne    511d <process_flags+0x1d9>\n    5053:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5057:\t48 89 c7             \tmov    %rax,%rdi\n    505a:\te8 78 cc ff ff       \tcallq  1cd7 <free_token>\n    505f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5063:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    5067:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    506b:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n    506f:\t48 89 c7             \tmov    %rax,%rdi\n    5072:\te8 f0 cc ff ff       \tcallq  1d67 <read_token_item>\n    5077:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    507a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    507d:\t89 c7                \tmov    %eax,%edi\n    507f:\te8 7d c2 ff ff       \tcallq  1301 <event_item_type>\n    5084:\t85 c0                \ttest   %eax,%eax\n    5086:\t74 1b                \tje     50a3 <process_flags+0x15f>\n    5088:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    508c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    5090:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n    5094:\t48 8d 45 e8          \tlea    -0x18(%rbp),%rax\n    5098:\t48 89 c7             \tmov    %rax,%rdi\n    509b:\te8 c7 cc ff ff       \tcallq  1d67 <read_token_item>\n    50a0:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    50a3:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    50a7:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    50aa:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 50b1 <process_flags+0x16d>\n    50b1:\tba 05 00 00 00       \tmov    $0x5,%edx\n    50b6:\t89 c7                \tmov    %eax,%edi\n    50b8:\te8 3b cd ff ff       \tcallq  1df8 <test_type_token>\n    50bd:\t85 c0                \ttest   %eax,%eax\n    50bf:\t75 6b                \tjne    512c <process_flags+0x1e8>\n    50c1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    50c5:\t48 8d 48 20          \tlea    0x20(%rax),%rcx\n    50c9:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n    50cd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    50d1:\t48 89 ce             \tmov    %rcx,%rsi\n    50d4:\t48 89 c7             \tmov    %rax,%rdi\n    50d7:\te8 aa fb ff ff       \tcallq  4c86 <process_fields>\n    50dc:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    50df:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    50e3:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    50e6:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 50ed <process_flags+0x1a9>\n    50ed:\tba 05 00 00 00       \tmov    $0x5,%edx\n    50f2:\t89 c7                \tmov    %eax,%edi\n    50f4:\te8 ff cc ff ff       \tcallq  1df8 <test_type_token>\n    50f9:\t85 c0                \ttest   %eax,%eax\n    50fb:\t75 32                \tjne    512f <process_flags+0x1eb>\n    50fd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5101:\t48 89 c7             \tmov    %rax,%rdi\n    5104:\te8 ce cb ff ff       \tcallq  1cd7 <free_token>\n    5109:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    510d:\t48 89 c7             \tmov    %rax,%rdi\n    5110:\te8 52 cc ff ff       \tcallq  1d67 <read_token_item>\n    5115:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    5118:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    511b:\teb 2f                \tjmp    514c <process_flags+0x208>\n    511d:\t90                   \tnop\n    511e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    5122:\t48 89 c7             \tmov    %rax,%rdi\n    5125:\te8 4f c2 ff ff       \tcallq  1379 <free_arg>\n    512a:\teb 04                \tjmp    5130 <process_flags+0x1ec>\n    512c:\t90                   \tnop\n    512d:\teb 01                \tjmp    5130 <process_flags+0x1ec>\n    512f:\t90                   \tnop\n    5130:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    5134:\t48 89 c7             \tmov    %rax,%rdi\n    5137:\te8 9b cb ff ff       \tcallq  1cd7 <free_token>\n    513c:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    5140:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    5147:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    514c:\tc9                   \tleaveq \n    514d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall process_flags(__int64 a1, __int64 a2, void **a3) {\n  void *v5;\n  void *v6;\n  unsigned int i;\n  v5 = Number L;\n  memset((void *)a2, Number, Number);\n  *(_DWORD *)(a2 + Number) = Number;\n  v6 = alloc_arg();\n  if (v6) {\n    for (i = process_field_arg(a1, (__int64)v6, &v5); i == Number;\n         i = process_op(a1, (__int64)v6, (char **)&v5))\n      ;\n    if ((unsigned int)test_type_token(i, (const char *)v5, Number, String)) {\n      free_arg((__int64)v6);\n    } else {\n      free_token(v5);\n      *(_QWORD *)(a2 + Number) = v6;\n      i = read_token_item(&v5);\n      if (event_item_type(i)) {\n        *(_QWORD *)(a2 + Number) = v5;\n        i = read_token_item(&v5);\n      }\n      if (!(unsigned int)test_type_token(i, (const char *)v5, Number, String)) {\n        i = process_fields(a1, (void **)(a2 + Number), (char **)&v5);\n        if (!(unsigned int)test_type_token(i, (const char *)v5, Number,\n                                           &asc_DF44[Number])) {\n          free_token(v5);\n          return (unsigned int)read_token_item(a3);\n        }\n      }\n    }\n  } else if (show_warning) {\n    if (a1)\n      warning(String, *(const char **)(a1 + Number),\n              *(const char **)(a1 + Number), String);\n    else\n      warning(String, String);\n  }\n  free_token(v5);\n  *a3 = Number L;\n  return Number L;\n}", "code_t": "event_type __cdecl process_flags(event_format *event, print_arg *arg,\n                                 char **tok) {\n  event_type result;\n  char *token;\n  print_arg *field;\n  event_type type;\n  token = Number L;\n  memset(arg, Number, sizeof(print_arg));\n  arg->type = PRINT_FLAGS;\n  field = alloc_arg();\n  if (field) {\n    for (type = process_field_arg(event, field, &token); type == EVENT_OP;\n         type = process_op(event, field, &token))\n      ;\n    if (test_type_token(type, token, EVENT_DELIM, String)) {\n      free_arg(field);\n    } else {\n      free_token(token);\n      arg->_anon_0.atom.atom = (char *)field;\n      type = read_token_item(&token);\n      if (event_item_type(type)) {\n        arg->_anon_0.field.field = (format_field *)token;\n        type = read_token_item(&token);\n      }\n      if (!test_type_token(type, token, EVENT_DELIM, String)) {\n        type = process_fields(event, &arg->_anon_0.flags.flags, &token);\n        if (!test_type_token(type, token, EVENT_DELIM, &asc_DF44[Number])) {\n          free_token(token);\n          result = read_token_item(tok);\n          type = result;\n          return result;\n        }\n      }\n    }\n  } else if (show_warning) {\n    if (event)\n      warning(String, event->system, event->name, String);\n    else\n      warning(String, String);\n  }\n  free_token(token);\n  *tok = Number L;\n  return Number;\n}", "var": [], "body_in_train": false}, {"repo_owner": "peresvetos", "repo_name": "xsrc", "path": "peresvetos/xsrc/5125d945b2e7e3195481e7d5cc97737f625a9140066f067510dfc472626520f5", "path_in_repo": "peresvetos/xsrc/external/mit/MesaLib7/dist/src/mapi/glapi/glapi_dispatch.o", "objdump": "0000000000008b89 <glIsQuery>:\n    8b89:\t55                   \tpush   %rbp\n    8b8a:\t48 89 e5             \tmov    %rsp,%rbp\n    8b8d:\t48 83 ec 10          \tsub    $0x10,%rsp\n    8b91:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n    8b94:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8b9b <glIsQuery+0x12>\n    8b9b:\t48 8b 90 80 10 00 00 \tmov    0x1080(%rax),%rdx\n    8ba2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    8ba5:\t89 c7                \tmov    %eax,%edi\n    8ba7:\tff d2                \tcallq  *%rdx\n    8ba9:\tc9                   \tleaveq \n    8baa:\tc3                   \tretq   ", "code_s": "__int64 __fastcall glIsQuery(unsigned int a1) {\n  return (*(__int64(__fastcall **)(_QWORD))(glapi_Dispatch + Number L))(a1);\n}", "code_t": "GLboolean __cdecl glIsQuery(GLuint id) {\n  return (*(__int64(__fastcall **)(_QWORD))(glapi_Dispatch + Number L))(id);\n}", "var": [], "body_in_train": false}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/8b1c36f1820ad78592a8eeb6243995fb40768eced7a96aa7882eeaff47ccc798", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Applications/SPASS/Output/proofcheck.o", "objdump": "00000000000009d5 <clause_IsFromSplitting>:\n     9d5:\t55                   \tpush   %rbp\n     9d6:\t48 89 e5             \tmov    %rsp,%rbp\n     9d9:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     9dd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     9e1:\t8b 40 4c             \tmov    0x4c(%rax),%eax\n     9e4:\t83 f8 0f             \tcmp    $0xf,%eax\n     9e7:\t0f 94 c0             \tsete   %al\n     9ea:\t0f b6 c0             \tmovzbl %al,%eax\n     9ed:\t5d                   \tpop    %rbp\n     9ee:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall clause_IsFromSplitting(__int64 a1) {\n  return *(_DWORD *)(a1 + Number) == Number;\n}", "code_t": "BOOL __cdecl clause_IsFromSplitting(CLAUSE Clause) {\n  return Clause->origin == SPLITTING;\n}", "var": [], "body_in_train": true}, {"repo_owner": "routeal", "repo_name": "json-clib", "path": "routeal/json-clib/79558a2dd14e806a1016165c06f9fb4f3d22fb8e9cdbc12b87d3c54661ac37e6", "path_in_repo": "routeal/json-clib//examples/example03", "objdump": "", "code_s": "__int64 (**init_proc())(void) {\n  __int64 (**result)(void);\n  result = &_gmon_start__;\n  if (&_gmon_start__)\n    result = (__int64 (**)(void))_gmon_start__();\n  return result;\n}", "code_t": "__int64 (**init_proc())(void) {\n  __int64 (**result)(void);\n  result = &_gmon_start__;\n  if (&_gmon_start__)\n    result = (__int64 (**)(void))_gmon_start__();\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "rim99", "repo_name": "PostgreSQL-src", "path": "rim99/PostgreSQL-src/8110bc20b8b67f951746699e5f0443b9ddd8eaac822c0a537a383d8bcc4923f6", "path_in_repo": "rim99/PostgreSQL-src//src/interfaces/ecpg/preproc/type.o", "objdump": "0000000000000eaf <ECPGdump_a_simple>:\n     eaf:\t55                   \tpush   %rbp\n     eb0:\t48 89 e5             \tmov    %rsp,%rbp\n     eb3:\t53                   \tpush   %rbx\n     eb4:\t48 83 ec 58          \tsub    $0x58,%rsp\n     eb8:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     ebc:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     ec0:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n     ec3:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n     ec7:\t4c 89 45 a8          \tmov    %r8,-0x58(%rbp)\n     ecb:\t4c 89 4d a0          \tmov    %r9,-0x60(%rbp)\n     ecf:\t83 7d bc 1d          \tcmpl   $0x1d,-0x44(%rbp)\n     ed3:\t75 20                \tjne    ef5 <ECPGdump_a_simple+0x46>\n     ed5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     ed9:\t48 89 c1             \tmov    %rax,%rcx\n     edc:\tba 29 00 00 00       \tmov    $0x29,%edx\n     ee1:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     ee6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     eeb:\te8 00 00 00 00       \tcallq  ef0 <ECPGdump_a_simple+0x41>\n     ef0:\te9 e6 05 00 00       \tjmpq   14db <ECPGdump_a_simple+0x62c>\n     ef5:\t83 7d bc 18          \tcmpl   $0x18,-0x44(%rbp)\n     ef9:\t75 1f                \tjne    f1a <ECPGdump_a_simple+0x6b>\n     efb:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n     eff:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     f03:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f08:\t48 89 c7             \tmov    %rax,%rdi\n     f0b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f10:\te8 00 00 00 00       \tcallq  f15 <ECPGdump_a_simple+0x66>\n     f15:\te9 c1 05 00 00       \tjmpq   14db <ECPGdump_a_simple+0x62c>\n     f1a:\t83 7d bc 1f          \tcmpl   $0x1f,-0x44(%rbp)\n     f1e:\t75 1f                \tjne    f3f <ECPGdump_a_simple+0x90>\n     f20:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n     f24:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     f28:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f2d:\t48 89 c7             \tmov    %rax,%rdi\n     f30:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f35:\te8 00 00 00 00       \tcallq  f3a <ECPGdump_a_simple+0x8b>\n     f3a:\te9 9c 05 00 00       \tjmpq   14db <ECPGdump_a_simple+0x62c>\n     f3f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f43:\t48 89 c7             \tmov    %rax,%rdi\n     f46:\te8 00 00 00 00       \tcallq  f4b <ECPGdump_a_simple+0x9c>\n     f4b:\t48 89 c3             \tmov    %rax,%rbx\n     f4e:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n     f53:\t74 0b                \tje     f60 <ECPGdump_a_simple+0xb1>\n     f55:\t48 8b 7d 10          \tmov    0x10(%rbp),%rdi\n     f59:\te8 00 00 00 00       \tcallq  f5e <ECPGdump_a_simple+0xaf>\n     f5e:\teb 05                \tjmp    f65 <ECPGdump_a_simple+0xb6>\n     f60:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f65:\t48 01 d8             \tadd    %rbx,%rax\n     f68:\t48 83 c0 04          \tadd    $0x4,%rax\n     f6c:\t48 89 c7             \tmov    %rax,%rdi\n     f6f:\te8 00 00 00 00       \tcallq  f74 <ECPGdump_a_simple+0xc5>\n     f74:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     f78:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f7c:\t48 89 c7             \tmov    %rax,%rdi\n     f7f:\te8 00 00 00 00       \tcallq  f84 <ECPGdump_a_simple+0xd5>\n     f84:\t48 89 c3             \tmov    %rax,%rbx\n     f87:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     f8b:\t48 89 c7             \tmov    %rax,%rdi\n     f8e:\te8 00 00 00 00       \tcallq  f93 <ECPGdump_a_simple+0xe4>\n     f93:\t48 01 d8             \tadd    %rbx,%rax\n     f96:\t48 05 82 00 00 00    \tadd    $0x82,%rax\n     f9c:\t48 89 c7             \tmov    %rax,%rdi\n     f9f:\te8 00 00 00 00       \tcallq  fa4 <ECPGdump_a_simple+0xf5>\n     fa4:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     fa8:\t83 7d bc 1e          \tcmpl   $0x1e,-0x44(%rbp)\n     fac:\t0f 87 91 03 00 00    \tja     1343 <ECPGdump_a_simple+0x494>\n     fb2:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n     fb5:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     fbc:\t00 \n     fbd:\tff e0                \tjmpq   *%rax\n     fbf:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     fc3:\t48 89 c7             \tmov    %rax,%rdi\n     fc6:\te8 00 00 00 00       \tcallq  fcb <ECPGdump_a_simple+0x11c>\n     fcb:\t85 c0                \ttest   %eax,%eax\n     fcd:\t7f 25                \tjg     ff4 <ECPGdump_a_simple+0x145>\n     fcf:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     fd3:\t48 89 c7             \tmov    %rax,%rdi\n     fd6:\te8 00 00 00 00       \tcallq  fdb <ECPGdump_a_simple+0x12c>\n     fdb:\t85 c0                \ttest   %eax,%eax\n     fdd:\t75 4d                \tjne    102c <ECPGdump_a_simple+0x17d>\n     fdf:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     fe3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     fe8:\t48 89 c7             \tmov    %rax,%rdi\n     feb:\te8 00 00 00 00       \tcallq  ff0 <ECPGdump_a_simple+0x141>\n     ff0:\t85 c0                \ttest   %eax,%eax\n     ff2:\t74 38                \tje     102c <ECPGdump_a_simple+0x17d>\n     ff4:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n     ff9:\t75 31                \tjne    102c <ECPGdump_a_simple+0x17d>\n     ffb:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n    1000:\t74 06                \tje     1008 <ECPGdump_a_simple+0x159>\n    1002:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n    1006:\teb 05                \tjmp    100d <ECPGdump_a_simple+0x15e>\n    1008:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    100d:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    1011:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    1015:\t48 89 d1             \tmov    %rdx,%rcx\n    1018:\t48 89 c2             \tmov    %rax,%rdx\n    101b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1020:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1025:\te8 00 00 00 00       \tcallq  102a <ECPGdump_a_simple+0x17b>\n    102a:\teb 2f                \tjmp    105b <ECPGdump_a_simple+0x1ac>\n    102c:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n    1031:\t74 06                \tje     1039 <ECPGdump_a_simple+0x18a>\n    1033:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n    1037:\teb 05                \tjmp    103e <ECPGdump_a_simple+0x18f>\n    1039:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    103e:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    1042:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    1046:\t48 89 d1             \tmov    %rdx,%rcx\n    1049:\t48 89 c2             \tmov    %rax,%rdx\n    104c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1051:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1056:\te8 00 00 00 00       \tcallq  105b <ECPGdump_a_simple+0x1ac>\n    105b:\t83 7d 18 00          \tcmpl   $0x0,0x18(%rbp)\n    105f:\t74 1e                \tje     107f <ECPGdump_a_simple+0x1d0>\n    1061:\t8b 55 18             \tmov    0x18(%rbp),%edx\n    1064:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1068:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    106d:\t48 89 c7             \tmov    %rax,%rdi\n    1070:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1075:\te8 00 00 00 00       \tcallq  107a <ECPGdump_a_simple+0x1cb>\n    107a:\te9 84 03 00 00       \tjmpq   1403 <ECPGdump_a_simple+0x554>\n    107f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1083:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1088:\t48 89 c7             \tmov    %rax,%rdi\n    108b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1090:\te8 00 00 00 00       \tcallq  1095 <ECPGdump_a_simple+0x1e6>\n    1095:\te9 69 03 00 00       \tjmpq   1403 <ECPGdump_a_simple+0x554>\n    109a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    10a1:\t00 \n    10a2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    10a6:\t48 89 c7             \tmov    %rax,%rdi\n    10a9:\te8 00 00 00 00       \tcallq  10ae <ECPGdump_a_simple+0x1ff>\n    10ae:\t83 f8 01             \tcmp    $0x1,%eax\n    10b1:\t7f 5a                \tjg     110d <ECPGdump_a_simple+0x25e>\n    10b3:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    10b7:\t48 89 c7             \tmov    %rax,%rdi\n    10ba:\te8 00 00 00 00       \tcallq  10bf <ECPGdump_a_simple+0x210>\n    10bf:\t85 c0                \ttest   %eax,%eax\n    10c1:\t7f 4a                \tjg     110d <ECPGdump_a_simple+0x25e>\n    10c3:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    10c7:\t48 89 c7             \tmov    %rax,%rdi\n    10ca:\te8 00 00 00 00       \tcallq  10cf <ECPGdump_a_simple+0x220>\n    10cf:\t85 c0                \ttest   %eax,%eax\n    10d1:\t75 15                \tjne    10e8 <ECPGdump_a_simple+0x239>\n    10d3:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    10d7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    10dc:\t48 89 c7             \tmov    %rax,%rdi\n    10df:\te8 00 00 00 00       \tcallq  10e4 <ECPGdump_a_simple+0x235>\n    10e4:\t85 c0                \ttest   %eax,%eax\n    10e6:\t75 25                \tjne    110d <ECPGdump_a_simple+0x25e>\n    10e8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    10ec:\t48 89 c7             \tmov    %rax,%rdi\n    10ef:\te8 00 00 00 00       \tcallq  10f4 <ECPGdump_a_simple+0x245>\n    10f4:\t85 c0                \ttest   %eax,%eax\n    10f6:\t75 76                \tjne    116e <ECPGdump_a_simple+0x2bf>\n    10f8:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    10fc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1101:\t48 89 c7             \tmov    %rax,%rdi\n    1104:\te8 00 00 00 00       \tcallq  1109 <ECPGdump_a_simple+0x25a>\n    1109:\t85 c0                \ttest   %eax,%eax\n    110b:\t74 61                \tje     116e <ECPGdump_a_simple+0x2bf>\n    110d:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n    1112:\t75 5a                \tjne    116e <ECPGdump_a_simple+0x2bf>\n    1114:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n    1119:\t74 06                \tje     1121 <ECPGdump_a_simple+0x272>\n    111b:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n    111f:\teb 05                \tjmp    1126 <ECPGdump_a_simple+0x277>\n    1121:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1126:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    112a:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    112e:\t48 89 d1             \tmov    %rdx,%rcx\n    1131:\t48 89 c2             \tmov    %rax,%rdx\n    1134:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1139:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    113e:\te8 00 00 00 00       \tcallq  1143 <ECPGdump_a_simple+0x294>\n    1143:\t83 7d bc 01          \tcmpl   $0x1,-0x44(%rbp)\n    1147:\t74 06                \tje     114f <ECPGdump_a_simple+0x2a0>\n    1149:\t83 7d bc 02          \tcmpl   $0x2,-0x44(%rbp)\n    114d:\t75 50                \tjne    119f <ECPGdump_a_simple+0x2f0>\n    114f:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1153:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1158:\t48 89 c7             \tmov    %rax,%rdi\n    115b:\te8 00 00 00 00       \tcallq  1160 <ECPGdump_a_simple+0x2b1>\n    1160:\t85 c0                \ttest   %eax,%eax\n    1162:\t75 3b                \tjne    119f <ECPGdump_a_simple+0x2f0>\n    1164:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    116b:\t00 \n    116c:\teb 31                \tjmp    119f <ECPGdump_a_simple+0x2f0>\n    116e:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n    1173:\t74 06                \tje     117b <ECPGdump_a_simple+0x2cc>\n    1175:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n    1179:\teb 05                \tjmp    1180 <ECPGdump_a_simple+0x2d1>\n    117b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1180:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    1184:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    1188:\t48 89 d1             \tmov    %rdx,%rcx\n    118b:\t48 89 c2             \tmov    %rax,%rdx\n    118e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1193:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1198:\te8 00 00 00 00       \tcallq  119d <ECPGdump_a_simple+0x2ee>\n    119d:\teb 01                \tjmp    11a0 <ECPGdump_a_simple+0x2f1>\n    119f:\t90                   \tnop\n    11a0:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    11a4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11a9:\t48 89 c7             \tmov    %rax,%rdi\n    11ac:\te8 00 00 00 00       \tcallq  11b1 <ECPGdump_a_simple+0x302>\n    11b1:\t85 c0                \ttest   %eax,%eax\n    11b3:\t74 06                \tje     11bb <ECPGdump_a_simple+0x30c>\n    11b5:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    11b9:\teb 05                \tjmp    11c0 <ECPGdump_a_simple+0x311>\n    11bb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    11c0:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    11c4:\t48 8b 7d d8          \tmov    -0x28(%rbp),%rdi\n    11c8:\t48 89 d1             \tmov    %rdx,%rcx\n    11cb:\t48 89 c2             \tmov    %rax,%rdx\n    11ce:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11d3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    11d8:\te8 00 00 00 00       \tcallq  11dd <ECPGdump_a_simple+0x32e>\n    11dd:\te9 21 02 00 00       \tjmpq   1403 <ECPGdump_a_simple+0x554>\n    11e2:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n    11e7:\t74 06                \tje     11ef <ECPGdump_a_simple+0x340>\n    11e9:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n    11ed:\teb 05                \tjmp    11f4 <ECPGdump_a_simple+0x345>\n    11ef:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    11f4:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    11f8:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    11fc:\t48 89 d1             \tmov    %rdx,%rcx\n    11ff:\t48 89 c2             \tmov    %rax,%rdx\n    1202:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1207:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    120c:\te8 00 00 00 00       \tcallq  1211 <ECPGdump_a_simple+0x362>\n    1211:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1215:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    121a:\t48 89 c7             \tmov    %rax,%rdi\n    121d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1222:\te8 00 00 00 00       \tcallq  1227 <ECPGdump_a_simple+0x378>\n    1227:\te9 d7 01 00 00       \tjmpq   1403 <ECPGdump_a_simple+0x554>\n    122c:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n    1231:\t74 06                \tje     1239 <ECPGdump_a_simple+0x38a>\n    1233:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n    1237:\teb 05                \tjmp    123e <ECPGdump_a_simple+0x38f>\n    1239:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    123e:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    1242:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    1246:\t48 89 d1             \tmov    %rdx,%rcx\n    1249:\t48 89 c2             \tmov    %rax,%rdx\n    124c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1251:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1256:\te8 00 00 00 00       \tcallq  125b <ECPGdump_a_simple+0x3ac>\n    125b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    125f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1264:\t48 89 c7             \tmov    %rax,%rdi\n    1267:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    126c:\te8 00 00 00 00       \tcallq  1271 <ECPGdump_a_simple+0x3c2>\n    1271:\te9 8d 01 00 00       \tjmpq   1403 <ECPGdump_a_simple+0x554>\n    1276:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n    127b:\t74 06                \tje     1283 <ECPGdump_a_simple+0x3d4>\n    127d:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n    1281:\teb 05                \tjmp    1288 <ECPGdump_a_simple+0x3d9>\n    1283:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1288:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    128c:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    1290:\t48 89 d1             \tmov    %rdx,%rcx\n    1293:\t48 89 c2             \tmov    %rax,%rdx\n    1296:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    129b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12a0:\te8 00 00 00 00       \tcallq  12a5 <ECPGdump_a_simple+0x3f6>\n    12a5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    12a9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    12ae:\t48 89 c7             \tmov    %rax,%rdi\n    12b1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12b6:\te8 00 00 00 00       \tcallq  12bb <ECPGdump_a_simple+0x40c>\n    12bb:\te9 43 01 00 00       \tjmpq   1403 <ECPGdump_a_simple+0x554>\n    12c0:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n    12c5:\t74 06                \tje     12cd <ECPGdump_a_simple+0x41e>\n    12c7:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n    12cb:\teb 05                \tjmp    12d2 <ECPGdump_a_simple+0x423>\n    12cd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12d2:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    12d6:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    12da:\t48 89 d1             \tmov    %rdx,%rcx\n    12dd:\t48 89 c2             \tmov    %rax,%rdx\n    12e0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    12e5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12ea:\te8 00 00 00 00       \tcallq  12ef <ECPGdump_a_simple+0x440>\n    12ef:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    12f3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    12f8:\t48 89 c7             \tmov    %rax,%rdi\n    12fb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1300:\te8 00 00 00 00       \tcallq  1305 <ECPGdump_a_simple+0x456>\n    1305:\te9 f9 00 00 00       \tjmpq   1403 <ECPGdump_a_simple+0x554>\n    130a:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    130e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1312:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1317:\t48 89 c7             \tmov    %rax,%rdi\n    131a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    131f:\te8 00 00 00 00       \tcallq  1324 <ECPGdump_a_simple+0x475>\n    1324:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    1328:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    132c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1331:\t48 89 c7             \tmov    %rax,%rdi\n    1334:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1339:\te8 00 00 00 00       \tcallq  133e <ECPGdump_a_simple+0x48f>\n    133e:\te9 c0 00 00 00       \tjmpq   1403 <ECPGdump_a_simple+0x554>\n    1343:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1347:\t48 89 c7             \tmov    %rax,%rdi\n    134a:\te8 00 00 00 00       \tcallq  134f <ECPGdump_a_simple+0x4a0>\n    134f:\t85 c0                \ttest   %eax,%eax\n    1351:\t7f 25                \tjg     1378 <ECPGdump_a_simple+0x4c9>\n    1353:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1357:\t48 89 c7             \tmov    %rax,%rdi\n    135a:\te8 00 00 00 00       \tcallq  135f <ECPGdump_a_simple+0x4b0>\n    135f:\t85 c0                \ttest   %eax,%eax\n    1361:\t75 4d                \tjne    13b0 <ECPGdump_a_simple+0x501>\n    1363:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1367:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    136c:\t48 89 c7             \tmov    %rax,%rdi\n    136f:\te8 00 00 00 00       \tcallq  1374 <ECPGdump_a_simple+0x4c5>\n    1374:\t85 c0                \ttest   %eax,%eax\n    1376:\t74 38                \tje     13b0 <ECPGdump_a_simple+0x501>\n    1378:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n    137d:\t75 31                \tjne    13b0 <ECPGdump_a_simple+0x501>\n    137f:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n    1384:\t74 06                \tje     138c <ECPGdump_a_simple+0x4dd>\n    1386:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n    138a:\teb 05                \tjmp    1391 <ECPGdump_a_simple+0x4e2>\n    138c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1391:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    1395:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    1399:\t48 89 d1             \tmov    %rdx,%rcx\n    139c:\t48 89 c2             \tmov    %rax,%rdx\n    139f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    13a4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    13a9:\te8 00 00 00 00       \tcallq  13ae <ECPGdump_a_simple+0x4ff>\n    13ae:\teb 2f                \tjmp    13df <ECPGdump_a_simple+0x530>\n    13b0:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n    13b5:\t74 06                \tje     13bd <ECPGdump_a_simple+0x50e>\n    13b7:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n    13bb:\teb 05                \tjmp    13c2 <ECPGdump_a_simple+0x513>\n    13bd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    13c2:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n    13c6:\t48 8b 7d e0          \tmov    -0x20(%rbp),%rdi\n    13ca:\t48 89 d1             \tmov    %rdx,%rcx\n    13cd:\t48 89 c2             \tmov    %rax,%rdx\n    13d0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    13d5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    13da:\te8 00 00 00 00       \tcallq  13df <ECPGdump_a_simple+0x530>\n    13df:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    13e2:\t89 c7                \tmov    %eax,%edi\n    13e4:\te8 00 00 00 00       \tcallq  13e9 <ECPGdump_a_simple+0x53a>\n    13e9:\t48 89 c2             \tmov    %rax,%rdx\n    13ec:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    13f0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    13f5:\t48 89 c7             \tmov    %rax,%rdi\n    13f8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    13fd:\te8 00 00 00 00       \tcallq  1402 <ECPGdump_a_simple+0x553>\n    1402:\t90                   \tnop\n    1403:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1407:\t48 89 c7             \tmov    %rax,%rdi\n    140a:\te8 00 00 00 00       \tcallq  140f <ECPGdump_a_simple+0x560>\n    140f:\t85 c0                \ttest   %eax,%eax\n    1411:\t79 10                \tjns    1423 <ECPGdump_a_simple+0x574>\n    1413:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n    1418:\t75 09                \tjne    1423 <ECPGdump_a_simple+0x574>\n    141a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    141e:\t66 c7 00 31 00       \tmovw   $0x31,(%rax)\n    1423:\t48 83 7d a0 00       \tcmpq   $0x0,-0x60(%rbp)\n    1428:\t74 0b                \tje     1435 <ECPGdump_a_simple+0x586>\n    142a:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    142e:\t0f b6 00             \tmovzbl (%rax),%eax\n    1431:\t84 c0                \ttest   %al,%al\n    1433:\t75 48                \tjne    147d <ECPGdump_a_simple+0x5ce>\n    1435:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    1438:\t89 c7                \tmov    %eax,%edi\n    143a:\te8 a4 ef ff ff       \tcallq  3e3 <get_type>\n    143f:\t48 89 c6             \tmov    %rax,%rsi\n    1442:\t48 8b 7d a8          \tmov    -0x58(%rbp),%rdi\n    1446:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n    144a:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    144e:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1452:\t48 83 ec 08          \tsub    $0x8,%rsp\n    1456:\tff 75 d8             \tpushq  -0x28(%rbp)\n    1459:\t49 89 f9             \tmov    %rdi,%r9\n    145c:\t49 89 c8             \tmov    %rcx,%r8\n    145f:\t48 89 d1             \tmov    %rdx,%rcx\n    1462:\t48 89 f2             \tmov    %rsi,%rdx\n    1465:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    146a:\t48 89 c7             \tmov    %rax,%rdi\n    146d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1472:\te8 00 00 00 00       \tcallq  1477 <ECPGdump_a_simple+0x5c8>\n    1477:\t48 83 c4 10          \tadd    $0x10,%rsp\n    147b:\teb 46                \tjmp    14c3 <ECPGdump_a_simple+0x614>\n    147d:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    1480:\t89 c7                \tmov    %eax,%edi\n    1482:\te8 5c ef ff ff       \tcallq  3e3 <get_type>\n    1487:\t48 89 c6             \tmov    %rax,%rsi\n    148a:\t48 8b 7d a8          \tmov    -0x58(%rbp),%rdi\n    148e:\t48 8b 4d b0          \tmov    -0x50(%rbp),%rcx\n    1492:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    1496:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    149a:\t48 83 ec 08          \tsub    $0x8,%rsp\n    149e:\tff 75 a0             \tpushq  -0x60(%rbp)\n    14a1:\t49 89 f9             \tmov    %rdi,%r9\n    14a4:\t49 89 c8             \tmov    %rcx,%r8\n    14a7:\t48 89 d1             \tmov    %rdx,%rcx\n    14aa:\t48 89 f2             \tmov    %rsi,%rdx\n    14ad:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    14b2:\t48 89 c7             \tmov    %rax,%rdi\n    14b5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    14ba:\te8 00 00 00 00       \tcallq  14bf <ECPGdump_a_simple+0x610>\n    14bf:\t48 83 c4 10          \tadd    $0x10,%rsp\n    14c3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    14c7:\t48 89 c7             \tmov    %rax,%rdi\n    14ca:\te8 00 00 00 00       \tcallq  14cf <ECPGdump_a_simple+0x620>\n    14cf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    14d3:\t48 89 c7             \tmov    %rax,%rdi\n    14d6:\te8 00 00 00 00       \tcallq  14db <ECPGdump_a_simple+0x62c>\n    14db:\t90                   \tnop\n    14dc:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n    14e0:\tc9                   \tleaveq \n    14e1:\tc3                   \tretq   ", "code_s": "void __fastcall ECPGdump_a_simple(FILE *a1, const char *a2, unsigned int a3,\n                                  const char *a4, char *a5, const char *a6,\n                                  char *a7, int a8) {\n  size_t v8;\n  size_t v9;\n  size_t v10;\n  size_t v11;\n  char *v12;\n  char *v13;\n  char *v14;\n  char *v15;\n  const char *v16;\n  char *v17;\n  char *v18;\n  char *v19;\n  char *v20;\n  char *v21;\n  char *v22;\n  const char *v23;\n  const char *v24;\n  const char *v25;\n  char *v30;\n  char *v31;\n  const char *v32;\n  switch (a3) {\n  case Number:\n    fwrite(String, Number, Number, a1);\n    break;\n  case Number:\n    fprintf(a1, String, a2);\n    break;\n  case Number:\n    fprintf(a1, String, a2);\n    break;\n  default:\n    v8 = strlen(a2);\n    if (a7)\n      v9 = strlen(a7);\n    else\n      v9 = Number L;\n    v31 = (char *)mm_alloc(v8 + v9 + Number);\n    v10 = strlen(a2);\n    v11 = strlen(a4);\n    v30 = (char *)mm_alloc(v10 + v11 + Number);\n    switch (a3) {\n    case Number:\n    case Number:\n    case Number:\n    case Number:\n      v32 = String;\n      if (atoi(a4) <= Number && atoi(a5) <= Number &&\n              (atoi(a4) || !strcmp(a4, String)) &&\n              (atoi(a5) || !strcmp(a5, String)) ||\n          a6) {\n        if (a7)\n          v15 = a7;\n        else\n          v15 = (char *)&unk_1F99;\n        sprintf(v31, String, v15, a2);\n      } else {\n        if (a7)\n          v14 = a7;\n        else\n          v14 = (char *)&unk_1F99;\n        sprintf(v31, String, v14, a2);\n        if ((a3 == Number || a3 == Number) && !strcmp(a4, String))\n          v32 = String;\n      }\n      if (!strcmp(a4, String))\n        v16 = String;\n      else\n        v16 = a4;\n      sprintf(v30, String, v16, v32);\n      break;\n    case Number:\n      if (atoi(a5) <= Number && (atoi(a5) || !strcmp(a5, String)) || a6) {\n        if (a7)\n          v13 = a7;\n        else\n          v13 = (char *)&unk_1F99;\n        sprintf(v31, String, v13, a2);\n      } else {\n        if (a7)\n          v12 = a7;\n        else\n          v12 = (char *)&unk_1F99;\n        sprintf(v31, String, v12, a2);\n      }\n      if (a8)\n        sprintf(v30, String, (unsigned int)a8);\n      else sprintf ( v30 , String ; break ; case Number : if ( a7 ) v17 = a7 ; else v17 = ( char * ) & unk_1F99 ; sprintf ( v31 , String , v17 , a2 ) ; sprintf ( v30 , String ) ; break ; case Number : if ( a7 ) v19 = a7 ; else v19 = ( char * ) & unk_1F99 ; sprintf ( v31 , String , v19 , a2 ) ; sprintf ( v30 , String ) ; break ; case Number : if ( a7 ) v20 = a7 ; else v20 = ( char * ) & unk_1F99 ; sprintf ( v31 , String , v20 , a2 ) ; sprintf ( v30 , String ) ; break ; case Number : if ( a7 ) v18 = a7 ; else v18 = ( char * ) & unk_1F99 ; sprintf ( v31 , String , v18 , a2 ) ; sprintf ( v30 , String ) ; break ; case Number : sprintf ( v31 , String , a2 ) ; sprintf ( v30 , String , a2 ) ; break ; default : if ( atoi ( a5 ) <= Number && ( atoi ( a5 ) || ! strcmp ( a5 , String ) ) || a6 ) {\n          if (a7)\n            v22 = a7;\n          else\n            v22 = (char *)&unk_1F99;\n          sprintf(v31, String, v22, a2); } else {\n          if (a7)\n            v21 = a7;\n          else\n            v21 = (char *)&unk_1F99;\n          sprintf(v31, String, v21, a2); } v23 = ( const char * ) ecpg_type_name ( a3 ) ; sprintf ( v30 , String , v23 ) ; break ;\n    }\n    if (atoi(a5) < Number && !a6)\n      *(_WORD *)a5 = Number;\n    if (a6 && *a6) {\n      v25 = get_type(a3);\n      fprintf(a1, String, v25, v31, a4, a5, a6);\n    } else {\n      v24 = get_type(a3);\n      fprintf(a1, String, v24, v31, a4, a5, v30);\n    }\n    free(v31);\n    free(v30);\n    break;\n  }\n}", "code_t": "void __cdecl ECPGdump_a_simple(FILE *o, const char *name, ECPGttype type,\n                               char *varcharsize, char *arrsize,\n                               const char *siz, const char *prefix,\n                               int counter) {\n  size_t v8;\n  size_t v9;\n  size_t v10;\n  size_t v11;\n  const char *v12;\n  const char *v13;\n  const char *v14;\n  const char *v15;\n  char *v16;\n  const char *v17;\n  const char *v18;\n  const char *v19;\n  const char *v20;\n  const char *v21;\n  const char *v22;\n  const char *v23;\n  const char *v24;\n  const char *v25;\n  char *offset;\n  char *variable;\n  char *sizeof_name;\n  switch (type) {\n  case ECPGt_NO_INDICATOR:\n    fwrite(String, Number, Number, o);\n    break;\n  case ECPGt_descriptor:\n    fprintf(o, String, name);\n    break;\n  case ECPGt_sqlda:\n    fprintf(o, String, name);\n    break;\n  default:\n    v8 = strlen(name);\n    if (prefix)\n      v9 = strlen(prefix);\n    else\n      v9 = Number L;\n    variable = (char *)mm_alloc(v8 + v9 + Number);\n    v10 = strlen(name);\n    v11 = strlen(varcharsize);\n    offset = (char *)mm_alloc(v10 + v11 + Number);\n    switch (type) {\n    case ECPGt_char:\n    case ECPGt_unsigned_char:\n    case ECPGt_char_variable:\n    case ECPGt_string:\n      sizeof_name = String;\n      if (atoi(varcharsize) <= Number && atoi(arrsize) <= Number &&\n              (atoi(varcharsize) || !strcmp(varcharsize, String)) &&\n              (atoi(arrsize) || !strcmp(arrsize, String)) ||\n          siz) {\n        if (prefix)\n          v15 = prefix;\n        else\n          v15 = (const char *)&unk_1F99;\n        sprintf(variable, String, v15, name);\n      } else {\n        if (prefix)\n          v14 = prefix;\n        else\n          v14 = (const char *)&unk_1F99;\n        sprintf(variable, String, v14, name);\n        if ((type == ECPGt_char || type == ECPGt_unsigned_char) &&\n            !strcmp(varcharsize, String))\n          sizeof_name = String;\n      }\n      if (!strcmp(varcharsize, String))\n        v16 = String;\n      else\n        v16 = varcharsize;\n      sprintf(offset, String, v16, sizeof_name);\n      break;\n    case ECPGt_varchar:\n      if (atoi(arrsize) <= Number &&\n              (atoi(arrsize) || !strcmp(arrsize, String)) ||\n          siz) {\n        if (prefix)\n          v13 = prefix;\n        else\n          v13 = (const char *)&unk_1F99;\n        sprintf(variable, String, v13, name);\n      } else {\n        if (prefix)\n          v12 = prefix;\n        else\n          v12 = (const char *)&unk_1F99;\n        sprintf(variable, String, v12, name);\n      }\n      if (counter)\n        sprintf(offset, String, (unsigned int)counter);\n      else sprintf ( offset , String ; break ; case ECPGt_numeric : if ( prefix ) v17 = prefix ; else v17 = ( const char * ) & unk_1F99 ; sprintf ( variable , String , v17 , name ) ; sprintf ( offset , String ) ; break ; case ECPGt_date : if ( prefix ) v19 = prefix ; else v19 = ( const char * ) & unk_1F99 ; sprintf ( variable , String , v19 , name ) ; sprintf ( offset , String ) ; break ; case ECPGt_timestamp : if ( prefix ) v20 = prefix ; else v20 = ( const char * ) & unk_1F99 ; sprintf ( variable , String , v20 , name ) ; sprintf ( offset , String ) ; break ; case ECPGt_interval : if ( prefix ) v18 = prefix ; else v18 = ( const char * ) & unk_1F99 ; sprintf ( variable , String , v18 , name ) ; sprintf ( offset , String ) ; break ; case ECPGt_const : sprintf ( variable , String , name ) ; sprintf ( offset , String , name ) ; break ; default : if ( atoi ( arrsize ) <= Number && ( atoi ( arrsize ) || ! strcmp ( arrsize , String ) ) || siz ) {\n          if (prefix)\n            v22 = prefix;\n          else\n            v22 = (const char *)&unk_1F99;\n          sprintf(variable, String, v22, name); } else {\n          if (prefix)\n            v21 = prefix;\n          else\n            v21 = (const char *)&unk_1F99;\n          sprintf(variable, String, v21, name); } v23 = ( const char * ) ecpg_type_name ( ( unsigned int ) type ) ; sprintf ( offset , String , v23 ) ; break ;\n    }\n    if (atoi(arrsize) < Number && !siz)\n      *(_WORD *)arrsize = Number;\n    if (siz && *siz) {\n      v25 = get_type(type);\n      fprintf(o, String, v25, variable, varcharsize, arrsize, siz);\n    } else {\n      v24 = get_type(type);\n      fprintf(o, String, v24, variable, varcharsize, arrsize, offset);\n    }\n    free(variable);\n    free(offset);\n    break;\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "zzilla", "repo_name": "CodeCollection", "path": "zzilla/CodeCollection/42735c0c75c8ec8f4aecd0a6fde375a98ccb7280b29a1128b06ccdc385be3e47", "path_in_repo": "zzilla/CodeCollection/A-V/ffmpeg/libavdevice/sndio_enc.o", "objdump": "0000000000000000 <audio_write_header>:\n   0:\t48 83 ec 38          \tsub    $0x38,%rsp\n   4:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n   9:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n   e:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  12:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n  17:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  1c:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  20:\t48 8b 00             \tmov    (%rax),%rax\n  23:\t48 89 44 24 20       \tmov    %rax,0x20(%rsp)\n  28:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n  2d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  31:\t8b 50 50             \tmov    0x50(%rax),%edx\n  34:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  39:\t89 50 40             \tmov    %edx,0x40(%rax)\n  3c:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n  41:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  45:\t8b 50 54             \tmov    0x54(%rax),%edx\n  48:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n  4d:\t89 50 3c             \tmov    %edx,0x3c(%rax)\n  50:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  55:\t48 8d 50 38          \tlea    0x38(%rax),%rdx\n  59:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n  5e:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  63:\t48 89 c7             \tmov    %rax,%rdi\n  66:\te8 00 00 00 00       \tcallq  6b <audio_write_header+0x6b>\n  6b:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n  6f:\t8b 44 24 1c          \tmov    0x1c(%rsp),%eax\n  73:\t48 83 c4 38          \tadd    $0x38,%rsp\n  77:\tc3                   \tretq   ", "code_s": "__int64 __fastcall audio_write_header(__int64 a1) {\n  __int64 v2;\n  __int64 v3;\n  v3 = *(_QWORD *)(a1 + Number);\n  v2 = **(_QWORD **)(a1 + Number);\n  *(_DWORD *)(v3 + Number) = *(_DWORD *)(*(_QWORD *)(v2 + Number) + Number L);\n  *(_DWORD *)(v3 + Number) = *(_DWORD *)(*(_QWORD *)(v2 + Number) + Number L);\n  return (unsigned int)ff_sndio_open(a1, Number L, a1 + Number);\n}", "code_t": "int __cdecl audio_write_header(AVFormatContext_0 *s1) {\n  AVStream_0 *st;\n  SndioData *s;\n  s = (SndioData *)s1->priv_data;\n  st = *s1->streams;\n  s->sample_rate = st->codec->sample_rate;\n  s->channels = st->codec->channels;\n  return ff_sndio_open(s1, Number L, s1->filename);\n}", "var": [], "body_in_train": true}, {"repo_owner": "WiWa", "repo_name": "objectify", "path": "WiWa/objectify/c2e8ec6843100cfe61bd269346ce9a6f1d338b8abc65832eb3d0ea9b26260719", "path_in_repo": "WiWa/objectify/bundler_sfm/lib/imagelib/fit.o", "objdump": "000000000000057f <line_point_distance>:\n     57f:\t55                   \tpush   %rbp\n     580:\t48 89 e5             \tmov    %rsp,%rbp\n     583:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     587:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     58c:\tba 00 00 00 00       \tmov    $0x0,%edx\n     591:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n     596:\t66 48 0f 7e ca       \tmovq   %xmm1,%rdx\n     59b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     59f:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n     5a3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     5a7:\tf2 0f 10 08          \tmovsd  (%rax),%xmm1\n     5ab:\tf2 0f 10 45 e0       \tmovsd  -0x20(%rbp),%xmm0\n     5b0:\tf2 0f 59 c8          \tmulsd  %xmm0,%xmm1\n     5b4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     5b8:\t48 83 c0 08          \tadd    $0x8,%rax\n     5bc:\tf2 0f 10 10          \tmovsd  (%rax),%xmm2\n     5c0:\tf2 0f 10 45 e8       \tmovsd  -0x18(%rbp),%xmm0\n     5c5:\tf2 0f 59 c2          \tmulsd  %xmm2,%xmm0\n     5c9:\tf2 0f 58 c8          \taddsd  %xmm0,%xmm1\n     5cd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     5d1:\t48 83 c0 10          \tadd    $0x10,%rax\n     5d5:\tf2 0f 10 00          \tmovsd  (%rax),%xmm0\n     5d9:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     5dd:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 5e5 <line_point_distance+0x66>\n     5e4:\t00 \n     5e5:\t66 0f 54 c1          \tandpd  %xmm1,%xmm0\n     5e9:\t5d                   \tpop    %rbp\n     5ea:\tc3                   \tretq   ", "code_s": "__m128d __fastcall line_point_distance(__int64 a1, double <span class=\"supfact\">a2</span>,\n                                       double a3) {\n  double v3;\n  __m128d v4;\n  v3 = *(double *)a1 * <span class=\"supfact\">a2</span> + a3 * *(double *)(a1 + Number);\n  v4 = (__m128d) * (unsigned __int64 *)(a1 + Number);\n  v4.m128d_f64[Number] = v4.m128d_f64[Number] + v3;\n  return _mm_and_pd(v4, (__m128d)_mm_loadl_epi64((const __m128i *)&qword_1A30));\n}", "code_t": "double __cdecl line_point_distance(double *line, v2_t <span class=\"supfact\">pt</span>) {\n  return fabs(line[Number] + *line * <span class=\"supfact\">pt</span>.p[Number] +\n              <span class=\"supfact\">pt</span>.p[Number] * line[Number]);\n}", "var": [{"name": "a2", "type": "disappear", "pred_name": "", "ref_name": "pt", "ref_type": "struct v2_t { double[2] p; }"}], "body_in_train": false}, {"repo_owner": "JayFoxRox", "repo_name": "xqemu-jfr", "path": "JayFoxRox/xqemu-jfr/11164d045483a0347fe3d2259d34c6a5f05d48699dae88b423b71d97fd2af2ad", "path_in_repo": "JayFoxRox/xqemu-jfr//hw/bt/l2cap.o", "objdump": "0000000000000066 <le32_to_cpu>:\n      66:\t55                   \tpush   %rbp\n      67:\t48 89 e5             \tmov    %rsp,%rbp\n      6a:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n      6d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n      70:\t5d                   \tpop    %rbp\n      71:\tc3                   \tretq   ", "code_s": "__int64 __fastcall le32_to_cpu(unsigned int a1) { return a1; }", "code_t": "uint32_t __cdecl le32_to_cpu(uint32_t v) { return v; }", "var": [], "body_in_train": true}, {"repo_owner": "centic9", "repo_name": "git-ppa", "path": "centic9/git-ppa/d416f959eda32f59bc013e2065949068965dcde1d3aa3c3e10040a2916b4e551", "path_in_repo": "centic9/git-ppa//builtin/update-index.o", "objdump": "0000000000000e8a <read_index_info>:\n     e8a:\t55                   \tpush   %rbp\n     e8b:\t48 89 e5             \tmov    %rsp,%rbp\n     e8e:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n     e95:\t89 bd 7c ff ff ff    \tmov    %edi,-0x84(%rbp)\n     e9b:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n     ea2:\t00 \n     ea3:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n     eaa:\t00 \n     eab:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n     eb2:\t00 \n     eb3:\t48 c7 45 a0 00 00 00 \tmovq   $0x0,-0x60(%rbp)\n     eba:\t00 \n     ebb:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n     ec2:\t00 \n     ec3:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n     eca:\t00 \n     ecb:\te9 66 02 00 00       \tjmpq   1136 <read_index_info+0x2ac>\n     ed0:\te8 00 00 00 00       \tcallq  ed5 <read_index_info+0x4b>\n     ed5:\tc7 00 00 00 00 00    \tmovl   $0x0,(%rax)\n     edb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     edf:\t48 8d 4d 98          \tlea    -0x68(%rbp),%rcx\n     ee3:\tba 08 00 00 00       \tmov    $0x8,%edx\n     ee8:\t48 89 ce             \tmov    %rcx,%rsi\n     eeb:\t48 89 c7             \tmov    %rax,%rdi\n     eee:\te8 00 00 00 00       \tcallq  ef3 <read_index_info+0x69>\n     ef3:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     ef7:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     efb:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     eff:\t48 39 c2             \tcmp    %rax,%rdx\n     f02:\t0f 84 10 02 00 00    \tje     1118 <read_index_info+0x28e>\n     f08:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     f0c:\t0f b6 00             \tmovzbl (%rax),%eax\n     f0f:\t3c 20                \tcmp    $0x20,%al\n     f11:\t0f 85 01 02 00 00    \tjne    1118 <read_index_info+0x28e>\n     f17:\te8 00 00 00 00       \tcallq  f1c <read_index_info+0x92>\n     f1c:\t8b 00                \tmov    (%rax),%eax\n     f1e:\t85 c0                \ttest   %eax,%eax\n     f20:\t0f 85 f2 01 00 00    \tjne    1118 <read_index_info+0x28e>\n     f26:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f2a:\t89 c0                \tmov    %eax,%eax\n     f2c:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n     f30:\t0f 85 e2 01 00 00    \tjne    1118 <read_index_info+0x28e>\n     f36:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f3a:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n     f3d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     f41:\tbe 09 00 00 00       \tmov    $0x9,%esi\n     f46:\t48 89 c7             \tmov    %rax,%rdi\n     f49:\te8 00 00 00 00       \tcallq  f4e <read_index_info+0xc4>\n     f4e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     f52:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     f57:\t0f 84 be 01 00 00    \tje     111b <read_index_info+0x291>\n     f5d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     f61:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     f65:\t48 29 c2             \tsub    %rax,%rdx\n     f68:\t48 89 d0             \tmov    %rdx,%rax\n     f6b:\t48 83 f8 28          \tcmp    $0x28,%rax\n     f6f:\t0f 8e a6 01 00 00    \tjle    111b <read_index_info+0x291>\n     f75:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     f79:\t48 83 e8 02          \tsub    $0x2,%rax\n     f7d:\t0f b6 00             \tmovzbl (%rax),%eax\n     f80:\t3c 20                \tcmp    $0x20,%al\n     f82:\t75 45                \tjne    fc9 <read_index_info+0x13f>\n     f84:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     f88:\t48 83 e8 01          \tsub    $0x1,%rax\n     f8c:\t0f b6 00             \tmovzbl (%rax),%eax\n     f8f:\t3c 2f                \tcmp    $0x2f,%al\n     f91:\t7e 36                \tjle    fc9 <read_index_info+0x13f>\n     f93:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     f97:\t48 83 e8 01          \tsub    $0x1,%rax\n     f9b:\t0f b6 00             \tmovzbl (%rax),%eax\n     f9e:\t3c 33                \tcmp    $0x33,%al\n     fa0:\t7f 27                \tjg     fc9 <read_index_info+0x13f>\n     fa2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     fa6:\t48 83 e8 01          \tsub    $0x1,%rax\n     faa:\t0f b6 00             \tmovzbl (%rax),%eax\n     fad:\t0f be c0             \tmovsbl %al,%eax\n     fb0:\t83 e8 30             \tsub    $0x30,%eax\n     fb3:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n     fb6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     fba:\t48 83 c0 01          \tadd    $0x1,%rax\n     fbe:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n     fc2:\t48 83 6d f8 02       \tsubq   $0x2,-0x8(%rbp)\n     fc7:\teb 13                \tjmp    fdc <read_index_info+0x152>\n     fc9:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n     fd0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     fd4:\t48 83 c0 01          \tadd    $0x1,%rax\n     fd8:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n     fdc:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     fe0:\t48 8d 50 d8          \tlea    -0x28(%rax),%rdx\n     fe4:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n     fe8:\t48 89 c6             \tmov    %rax,%rsi\n     feb:\t48 89 d7             \tmov    %rdx,%rdi\n     fee:\te8 00 00 00 00       \tcallq  ff3 <read_index_info+0x169>\n     ff3:\t85 c0                \ttest   %eax,%eax\n     ff5:\t0f 85 23 01 00 00    \tjne    111e <read_index_info+0x294>\n     ffb:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     fff:\t48 83 e8 29          \tsub    $0x29,%rax\n    1003:\t0f b6 00             \tmovzbl (%rax),%eax\n    1006:\t3c 20                \tcmp    $0x20,%al\n    1008:\t0f 85 10 01 00 00    \tjne    111e <read_index_info+0x294>\n    100e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    1012:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1016:\t83 bd 7c ff ff ff 00 \tcmpl   $0x0,-0x84(%rbp)\n    101d:\t74 4f                \tje     106e <read_index_info+0x1e4>\n    101f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1023:\t0f b6 00             \tmovzbl (%rax),%eax\n    1026:\t3c 22                \tcmp    $0x22,%al\n    1028:\t75 44                \tjne    106e <read_index_info+0x1e4>\n    102a:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    102e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1033:\t48 89 c7             \tmov    %rax,%rdi\n    1036:\te8 b1 f0 ff ff       \tcallq  ec <strbuf_setlen>\n    103b:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n    103f:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    1043:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1048:\t48 89 ce             \tmov    %rcx,%rsi\n    104b:\t48 89 c7             \tmov    %rax,%rdi\n    104e:\te8 00 00 00 00       \tcallq  1053 <read_index_info+0x1c9>\n    1053:\t85 c0                \ttest   %eax,%eax\n    1055:\t74 0f                \tje     1066 <read_index_info+0x1dc>\n    1057:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    105c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1061:\te8 00 00 00 00       \tcallq  1066 <read_index_info+0x1dc>\n    1066:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    106a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    106e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1072:\t48 89 c7             \tmov    %rax,%rdi\n    1075:\te8 00 00 00 00       \tcallq  107a <read_index_info+0x1f0>\n    107a:\t85 c0                \ttest   %eax,%eax\n    107c:\t75 22                \tjne    10a0 <read_index_info+0x216>\n    107e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1085 <read_index_info+0x1fb>\n    1085:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    1089:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    108e:\t48 89 c7             \tmov    %rax,%rdi\n    1091:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1096:\te8 00 00 00 00       \tcallq  109b <read_index_info+0x211>\n    109b:\te9 96 00 00 00       \tjmpq   1136 <read_index_info+0x2ac>\n    10a0:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    10a4:\t75 2b                \tjne    10d1 <read_index_info+0x247>\n    10a6:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    10aa:\t48 89 c6             \tmov    %rax,%rsi\n    10ad:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    10b2:\te8 00 00 00 00       \tcallq  10b7 <read_index_info+0x22d>\n    10b7:\t85 c0                \ttest   %eax,%eax\n    10b9:\t74 7a                \tje     1135 <read_index_info+0x2ab>\n    10bb:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    10bf:\t48 89 c6             \tmov    %rax,%rsi\n    10c2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    10c7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    10cc:\te8 00 00 00 00       \tcallq  10d1 <read_index_info+0x247>\n    10d1:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    10d5:\t48 83 e8 01          \tsub    $0x1,%rax\n    10d9:\tc6 00 00             \tmovb   $0x0,(%rax)\n    10dc:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n    10e0:\t48 83 ea 2a          \tsub    $0x2a,%rdx\n    10e4:\t0f b6 00             \tmovzbl (%rax),%eax\n    10e7:\t88 02                \tmov    %al,(%rdx)\n    10e9:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n    10ec:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n    10f0:\t48 8d 75 80          \tlea    -0x80(%rbp),%rsi\n    10f4:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    10f7:\t89 c7                \tmov    %eax,%edi\n    10f9:\te8 a9 f9 ff ff       \tcallq  aa7 <add_cacheinfo>\n    10fe:\t85 c0                \ttest   %eax,%eax\n    1100:\t74 33                \tje     1135 <read_index_info+0x2ab>\n    1102:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1106:\t48 89 c6             \tmov    %rax,%rsi\n    1109:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    110e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1113:\te8 00 00 00 00       \tcallq  1118 <read_index_info+0x28e>\n    1118:\t90                   \tnop\n    1119:\teb 04                \tjmp    111f <read_index_info+0x295>\n    111b:\t90                   \tnop\n    111c:\teb 01                \tjmp    111f <read_index_info+0x295>\n    111e:\t90                   \tnop\n    111f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1123:\t48 89 c6             \tmov    %rax,%rsi\n    1126:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    112b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1130:\te8 00 00 00 00       \tcallq  1135 <read_index_info+0x2ab>\n    1135:\t90                   \tnop\n    1136:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 113d <read_index_info+0x2b3>\n    113d:\t8b 95 7c ff ff ff    \tmov    -0x84(%rbp),%edx\n    1143:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1147:\t48 89 ce             \tmov    %rcx,%rsi\n    114a:\t48 89 c7             \tmov    %rax,%rdi\n    114d:\te8 00 00 00 00       \tcallq  1152 <read_index_info+0x2c8>\n    1152:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    1155:\t0f 85 75 fd ff ff    \tjne    ed0 <read_index_info+0x46>\n    115b:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    115f:\t48 89 c7             \tmov    %rax,%rdi\n    1162:\te8 00 00 00 00       \tcallq  1167 <read_index_info+0x2dd>\n    1167:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    116b:\t48 89 c7             \tmov    %rax,%rdi\n    116e:\te8 00 00 00 00       \tcallq  1173 <read_index_info+0x2e9>\n    1173:\t90                   \tnop\n    1174:\tc9                   \tleaveq \n    1175:\tc3                   \tretq   ", "code_s": "__int64 __fastcall read_index_info(unsigned int a1) {\n  char *v1;\n  char v3[Number];\n  char *endptr;\n  __int64 <span class=\"supfact\">v5</span>[Number];\n  const char *v6;\n  __int64 <span class=\"supfact\">v7</span>[Number];\n  char *nptr;\n  int v9;\n  unsigned __int64 v10;\n  int v11;\n  char *v12;\n  char *v13;\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  <span class=\"supfact\">v7</span>[Number] = Number L;\n  nptr = (char *)&strbuf_slopbuf;\n  <span class=\"supfact\">v5</span>[Number] = Number L;\n  <span class=\"supfact\">v5</span>[Number] = Number L;\n  v6 = (const char *)&strbuf_slopbuf;\n  while ((unsigned int)strbuf_getline(<span class=\"supfact\">v7</span>, stdin, a1) !=\n         Number) {\n    *_errno_location() = Number;\n    v10 = strtoul(nptr, &endptr, Number);\n    if (nptr != endptr && *endptr == Number && !*_errno_location() &&\n        v10 == (unsigned int)v10 &&\n        (v9 = v10, (v13 = strchr(endptr, Number)) != Number L) &&\n        v13 - endptr > Number &&\n        (*(v13 - Number) != Number || *(v13 - Number) <= Number ||\n                 *(v13 - Number) > Number\n             ? (v11 = Number, endptr = v13 + Number)\n             : (v11 = *(v13 - Number) - Number, endptr = v13 + Number,\n                v13 -= Number),\n         !(unsigned int)get_sha1_hex(v13 - Number, v3) &&\n             *(v13 - Number) == Number)) {\n      v12 = endptr;\n      if (a1 && *v12 == Number) {\n        strbuf_setlen(<span class=\"supfact\">v5</span>, Number L);\n        if ((unsigned int)unquote_c_style(<span class=\"supfact\">v5</span>, v12, Number L))\n          die(String);\n        v12 = (char *)v6;\n      }\n      if ((unsigned int)verify_path(v12)) {\n        if (v9) {\n        LABEL_25:\n          v1 = endptr - Number;\n          *v1 = Number;\n          *(endptr - Number) = *v1;\n          if ((unsigned int)add_cacheinfo(v9, v3, v12, v11)) {\n            die(String, v12);\n            goto LABEL_27;\n          }\n        } else if ((unsigned int)remove_file_from_index(&the_index, v12)) {\n          die(String, endptr);\n          goto LABEL_25;\n        }\n      } else {\n        fprintf(stderr, String, v12);\n      }\n    } else {\n    LABEL_27:\n      die(String, nptr);\n    }\n  }\n  strbuf_release(<span class=\"supfact\">v7</span>);\n  return strbuf_release(<span class=\"supfact\">v5</span>);\n}", "code_t": "void __cdecl read_index_info(int line_termination) {\n  char *v1;\n  unsigned __int8 sha1[Number];\n  char *ptr;\n  strbuf <span class=\"supfact\">uq</span>;\n  strbuf <span class=\"supfact\">buf</span>;\n  unsigned int mode;\n  unsigned __int64 ul;\n  int stage;\n  char *path_name;\n  char *tab;\n  <span class=\"supfact\">buf</span>.alloc = Number L;\n  <span class=\"supfact\">buf</span>.len = Number L;\n  <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span> = (char *)&strbuf_slopbuf;\n  <span class=\"supfact\">uq</span>.alloc = Number L;\n  <span class=\"supfact\">uq</span>.len = Number L;\n  <span class=\"supfact\">uq</span>.<span class=\"supfact\">buf</span> = (char *)&strbuf_slopbuf;\n  while ((unsigned int)strbuf_getline(&<span class=\"supfact\">buf</span>, stdin,\n                                      (unsigned int)line_termination) !=\n         Number) {\n    *_errno_location() = Number;\n    ul = strtoul(<span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>, &ptr, Number);\n    if (<span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span> != ptr && *ptr == Number &&\n        !*_errno_location() && ul == (unsigned int)ul &&\n        (mode = ul, (tab = strchr(ptr, Number)) != Number L) &&\n        tab - ptr > Number &&\n        (*(tab - Number) != Number || *(tab - Number) <= Number ||\n                 *(tab - Number) > Number\n             ? (stage = Number, ptr = tab + Number)\n             : (stage = *(tab - Number) - Number, ptr = tab + Number,\n                tab -= Number),\n         !(unsigned int)get_sha1_hex(tab - Number, sha1) &&\n             *(tab - Number) == Number)) {\n      path_name = ptr;\n      if (line_termination && *path_name == Number) {\n        strbuf_setlen(&<span class=\"supfact\">uq</span>, Number L);\n        if ((unsigned int)unquote_c_style(&<span class=\"supfact\">uq</span>, path_name,\n                                          Number L))\n          die(String);\n        path_name = <span class=\"supfact\">uq</span>.<span class=\"supfact\">buf</span>;\n      }\n      if ((unsigned int)verify_path(path_name)) {\n        if (mode) {\n        LABEL_25:\n          v1 = ptr - Number;\n          *v1 = Number;\n          *(ptr - Number) = *v1;\n          if (add_cacheinfo(mode, sha1, path_name, stage)) {\n            die(String, path_name);\n            goto bad_line;\n          }\n        } else if ((unsigned int)remove_file_from_index(&the_index,\n                                                        path_name)) {\n          die(String, ptr);\n          goto LABEL_25;\n        }\n      } else {\n        fprintf(stderr, String, path_name);\n      }\n    } else {\n    bad_line:\n      die(String, <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>);\n    }\n  }\n  strbuf_release(&<span class=\"supfact\">buf</span>);\n  strbuf_release(&<span class=\"supfact\">uq</span>);\n}", "var": [{"name": "v5", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "pred_name": "sb", "ref_name": "uq", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}, {"name": "v7", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "pred_name": "sb", "ref_name": "buf", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": false}, {"repo_owner": "cmr", "repo_name": "blake2", "path": "cmr/blake2/90e6dd9730c0998185cfa754601f845c35eb37f110734d964e198017bbead484", "path_in_repo": "cmr/blake2/sse/blake2s", "objdump": "00000000004011f2 <blake2s_set_lastnode>:\n  4011f2:\t55                   \tpush   %rbp\n  4011f3:\t48 89 e5             \tmov    %rsp,%rbp\n  4011f6:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n  4011fa:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4011fe:\tc7 40 2c ff ff ff ff \tmovl   $0xffffffff,0x2c(%rax)\n  401205:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40120a:\t5d                   \tpop    %rbp\n  40120b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall blake2s_set_lastnode(__int64 a1) {\n  *(_DWORD *)(a1 + Number) = Number;\n  return Number L;\n}", "code_t": "int __cdecl blake2s_set_lastnode(blake2s_state *S) {\n  S->f[Number] = Number;\n  return Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "popo55668", "repo_name": "DAG-Aware-MIG-Rewriting", "path": "popo55668/DAG-Aware-MIG-Rewriting/68c564c85357893f38da63b41f84d0c1f7d8b6ab469b8345d0d2d3132e60d475", "path_in_repo": "popo55668/DAG-Aware-MIG-Rewriting//src/aig/gia/giaBidec.o", "objdump": "0000000000000083 <Abc_Lit2Var>:\n      83:\t55                   \tpush   %rbp\n      84:\t48 89 e5             \tmov    %rsp,%rbp\n      87:\t48 83 ec 10          \tsub    $0x10,%rsp\n      8b:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n      8e:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n      92:\t79 19                \tjns    ad <Abc_Lit2Var+0x2a>\n      94:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n      99:\tba 0a 01 00 00       \tmov    $0x10a,%edx\n      9e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n      a3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n      a8:\te8 00 00 00 00       \tcallq  ad <Abc_Lit2Var+0x2a>\n      ad:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n      b0:\td1 f8                \tsar    %eax\n      b2:\tc9                   \tleaveq \n      b3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Abc_Lit2Var(int a1) {\n  if (a1 < Number)\n    _assert_fail(String, String, Number, String);\n  return (unsigned int)(a1 >> Number);\n}", "code_t": "int __cdecl Abc_Lit2Var(int Lit) {\n  if (Lit < Number)\n    _assert_fail(String, String, Number, String);\n  return Lit >> Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "converse2006", "repo_name": "ArduinoUno-QEMU", "path": "converse2006/ArduinoUno-QEMU/26377f0681ef29dba6113296dad42bf6042b65faa3db64a4f1ba296308d450ca", "path_in_repo": "converse2006/ArduinoUno-QEMU//mips64-softmmu/cirrus_vga.o", "objdump": "0000000000025aa5 <cirrus_linear_writel>:\n   25aa5:\t55                   \tpush   %rbp\n   25aa6:\t48 89 e5             \tmov    %rsp,%rbp\n   25aa9:\t48 83 ec 30          \tsub    $0x30,%rsp\n   25aad:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   25ab1:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n   25ab5:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n   25ab8:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n   25abf:\t00 00 \n   25ac1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   25ac5:\t31 c0                \txor    %eax,%eax\n   25ac7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   25aca:\tc1 e8 18             \tshr    $0x18,%eax\n   25acd:\t89 c2                \tmov    %eax,%edx\n   25acf:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n   25ad3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   25ad7:\t48 89 ce             \tmov    %rcx,%rsi\n   25ada:\t48 89 c7             \tmov    %rax,%rdi\n   25add:\te8 45 fd ff ff       \tcallq  25827 <cirrus_linear_writeb>\n   25ae2:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   25ae5:\tc1 e8 10             \tshr    $0x10,%eax\n   25ae8:\t0f b6 d0             \tmovzbl %al,%edx\n   25aeb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   25aef:\t48 8d 48 01          \tlea    0x1(%rax),%rcx\n   25af3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   25af7:\t48 89 ce             \tmov    %rcx,%rsi\n   25afa:\t48 89 c7             \tmov    %rax,%rdi\n   25afd:\te8 25 fd ff ff       \tcallq  25827 <cirrus_linear_writeb>\n   25b02:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   25b05:\tc1 e8 08             \tshr    $0x8,%eax\n   25b08:\t0f b6 d0             \tmovzbl %al,%edx\n   25b0b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   25b0f:\t48 8d 48 02          \tlea    0x2(%rax),%rcx\n   25b13:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   25b17:\t48 89 ce             \tmov    %rcx,%rsi\n   25b1a:\t48 89 c7             \tmov    %rax,%rdi\n   25b1d:\te8 05 fd ff ff       \tcallq  25827 <cirrus_linear_writeb>\n   25b22:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n   25b25:\t0f b6 d0             \tmovzbl %al,%edx\n   25b28:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n   25b2c:\t48 8d 48 03          \tlea    0x3(%rax),%rcx\n   25b30:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   25b34:\t48 89 ce             \tmov    %rcx,%rsi\n   25b37:\t48 89 c7             \tmov    %rax,%rdi\n   25b3a:\te8 e8 fc ff ff       \tcallq  25827 <cirrus_linear_writeb>\n   25b3f:\t90                   \tnop\n   25b40:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   25b44:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n   25b4b:\t00 00 \n   25b4d:\t74 05                \tje     25b54 <cirrus_linear_writel+0xaf>\n   25b4f:\te8 00 00 00 00       \tcallq  25b54 <cirrus_linear_writel+0xaf>\n   25b54:\tc9                   \tleaveq \n   25b55:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall cirrus_linear_writel(__int64 a1, int a2, int a3) {\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  cirrus_linear_writeb(a1, a2, SHIBYTE(a3));\n  cirrus_linear_writeb(a1, a2 + Number, SBYTE2(a3));\n  cirrus_linear_writeb(a1, a2 + Number, SBYTE1(a3));\n  cirrus_linear_writeb(a1, a2 + Number, a3);\n  return __readfsqword(Number) ^ v5;\n}", "code_t": "void __cdecl cirrus_linear_writel(void *opaque, target_phys_addr_t addr,\n                                  uint32_t val) {\n  cirrus_linear_writeb(opaque, addr, HIBYTE(val));\n  cirrus_linear_writeb(opaque, addr + Number, BYTE2(val));\n  cirrus_linear_writeb(opaque, addr + Number, BYTE1(val));\n  cirrus_linear_writeb(opaque, addr + Number, (unsigned __int8)val);\n}", "var": [], "body_in_train": true}, {"repo_owner": "slapin", "repo_name": "q2-dev", "path": "slapin/q2-dev/e1b91f1ae6f6bf16d95fca94468a1efb869b9f59680796b18b71f5c99abc0058", "path_in_repo": "slapin/q2-dev/quake2/releasex86_64/ref_glx.so", "objdump": "000000000001780b <R_RenderDlights>:\n   1780b:\t48 83 ec 18          \tsub    $0x18,%rsp\n   1780f:\t48 8b 05 22 5f 03 00 \tmov    0x35f22(%rip),%rax        # 4d738 <gl_flashblend@@Base-0xfd168>\n   17816:\t48 8b 00             \tmov    (%rax),%rax\n   17819:\tf3 0f 10 40 20       \tmovss  0x20(%rax),%xmm0\n   1781e:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n   17822:\t0f 2f c1             \tcomiss %xmm1,%xmm0\n   17825:\t0f 84 1d 01 00 00    \tje     17948 <R_RenderDlights+0x13d>\n   1782b:\t48 8b 05 1e 64 03 00 \tmov    0x3641e(%rip),%rax        # 4dc50 <r_framecount@@Base-0xfcd88>\n   17832:\t8b 00                \tmov    (%rax),%eax\n   17834:\t8d 50 01             \tlea    0x1(%rax),%edx\n   17837:\t48 8b 05 a2 5c 03 00 \tmov    0x35ca2(%rip),%rax        # 4d4e0 <r_dlightframecount@@Base-0x670c8>\n   1783e:\t89 10                \tmov    %edx,(%rax)\n   17840:\t48 8b 05 39 62 03 00 \tmov    0x36239(%rip),%rax        # 4da80 <qglDepthMask@@Base-0xfe0d8>\n   17847:\t48 8b 00             \tmov    (%rax),%rax\n   1784a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n   1784f:\tff d0                \tcallq  *%rax\n   17851:\t48 8b 05 10 65 03 00 \tmov    0x36510(%rip),%rax        # 4dd68 <qglDisable@@Base-0xfdfa8>\n   17858:\t48 8b 00             \tmov    (%rax),%rax\n   1785b:\tbf e1 0d 00 00       \tmov    $0xde1,%edi\n   17860:\tff d0                \tcallq  *%rax\n   17862:\t48 8b 05 df 5c 03 00 \tmov    0x35cdf(%rip),%rax        # 4d548 <qglShadeModel@@Base-0xfe2a8>\n   17869:\t48 8b 00             \tmov    (%rax),%rax\n   1786c:\tbf 01 1d 00 00       \tmov    $0x1d01,%edi\n   17871:\tff d0                \tcallq  *%rax\n   17873:\t48 8b 05 6e 59 03 00 \tmov    0x3596e(%rip),%rax        # 4d1e8 <qglEnable@@Base-0xfe400>\n   1787a:\t48 8b 00             \tmov    (%rax),%rax\n   1787d:\tbf e2 0b 00 00       \tmov    $0xbe2,%edi\n   17882:\tff d0                \tcallq  *%rax\n   17884:\t48 8b 05 d5 5d 03 00 \tmov    0x35dd5(%rip),%rax        # 4d660 <qglBlendFunc@@Base-0xfe240>\n   1788b:\t48 8b 00             \tmov    (%rax),%rax\n   1788e:\tbe 01 00 00 00       \tmov    $0x1,%esi\n   17893:\tbf 01 00 00 00       \tmov    $0x1,%edi\n   17898:\tff d0                \tcallq  *%rax\n   1789a:\t48 8b 05 f7 59 03 00 \tmov    0x359f7(%rip),%rax        # 4d298 <r_newrefdef@@Base-0xfd4a8>\n   178a1:\t48 8b 40 70          \tmov    0x70(%rax),%rax\n   178a5:\t48 89 04 24          \tmov    %rax,(%rsp)\n   178a9:\tc7 44 24 0c 00 00 00 \tmovl   $0x0,0xc(%rsp)\n   178b0:\t00 \n   178b1:\teb 16                \tjmp    178c9 <R_RenderDlights+0xbe>\n   178b3:\t48 8b 04 24          \tmov    (%rsp),%rax\n   178b7:\t48 89 c7             \tmov    %rax,%rdi\n   178ba:\te8 41 9e ff ff       \tcallq  11700 <R_RenderDlight@plt>\n   178bf:\t83 44 24 0c 01       \taddl   $0x1,0xc(%rsp)\n   178c4:\t48 83 04 24 1c       \taddq   $0x1c,(%rsp)\n   178c9:\t48 8b 05 c8 59 03 00 \tmov    0x359c8(%rip),%rax        # 4d298 <r_newrefdef@@Base-0xfd4a8>\n   178d0:\t8b 40 68             \tmov    0x68(%rax),%eax\n   178d3:\t39 44 24 0c          \tcmp    %eax,0xc(%rsp)\n   178d7:\t7c da                \tjl     178b3 <R_RenderDlights+0xa8>\n   178d9:\t48 8b 05 10 61 03 00 \tmov    0x36110(%rip),%rax        # 4d9f0 <qglColor3f@@Base-0xfe118>\n   178e0:\t48 8b 00             \tmov    (%rax),%rax\n   178e3:\tf3 0f 10 15 dd ab 02 \tmovss  0x2abdd(%rip),%xmm2        # 424c8 <_fini+0xd38>\n   178ea:\t00 \n   178eb:\tf3 0f 10 0d d5 ab 02 \tmovss  0x2abd5(%rip),%xmm1        # 424c8 <_fini+0xd38>\n   178f2:\t00 \n   178f3:\tf3 0f 10 05 cd ab 02 \tmovss  0x2abcd(%rip),%xmm0        # 424c8 <_fini+0xd38>\n   178fa:\t00 \n   178fb:\tff d0                \tcallq  *%rax\n   178fd:\t48 8b 05 64 64 03 00 \tmov    0x36464(%rip),%rax        # 4dd68 <qglDisable@@Base-0xfdfa8>\n   17904:\t48 8b 00             \tmov    (%rax),%rax\n   17907:\tbf e2 0b 00 00       \tmov    $0xbe2,%edi\n   1790c:\tff d0                \tcallq  *%rax\n   1790e:\t48 8b 05 d3 58 03 00 \tmov    0x358d3(%rip),%rax        # 4d1e8 <qglEnable@@Base-0xfe400>\n   17915:\t48 8b 00             \tmov    (%rax),%rax\n   17918:\tbf e1 0d 00 00       \tmov    $0xde1,%edi\n   1791d:\tff d0                \tcallq  *%rax\n   1791f:\t48 8b 05 3a 5d 03 00 \tmov    0x35d3a(%rip),%rax        # 4d660 <qglBlendFunc@@Base-0xfe240>\n   17926:\t48 8b 00             \tmov    (%rax),%rax\n   17929:\tbe 03 03 00 00       \tmov    $0x303,%esi\n   1792e:\tbf 02 03 00 00       \tmov    $0x302,%edi\n   17933:\tff d0                \tcallq  *%rax\n   17935:\t48 8b 05 44 61 03 00 \tmov    0x36144(%rip),%rax        # 4da80 <qglDepthMask@@Base-0xfe0d8>\n   1793c:\t48 8b 00             \tmov    (%rax),%rax\n   1793f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n   17944:\tff d0                \tcallq  *%rax\n   17946:\teb 01                \tjmp    17949 <R_RenderDlights+0x13e>\n   17948:\t90                   \tnop\n   17949:\t48 83 c4 18          \tadd    $0x18,%rsp\n   1794d:\tc3                   \tretq   ", "code_s": "__int64 R_RenderDlights() {\n  __int64 result;\n  __int64 v1;\n  int i;\n  result = gl_flashblend;\n  if (*(float *)(gl_flashblend + Number L) != Number) {\n    r_dlightframecount = r_framecount + Number;\n    qglDepthMask(Number L);\n    qglDisable(Number L);\n    qglShadeModel(Number L);\n    qglEnable(Number L);\n    qglBlendFunc(Number L, Number L);\n    v1 = *((_QWORD *)&r_newrefdef + Number);\n    for (i = Number; i < *((_DWORD *)&r_newrefdef + Number); ++i) {\n      R_RenderDlight(v1);\n      v1 += Number L;\n    }\n    qglColor3f(Number, Number, Number);\n    qglDisable(Number L);\n    qglEnable(Number L);\n    qglBlendFunc(Number L, Number L);\n    result = qglDepthMask(Number L);\n  }\n  return result;\n}", "code_t": "void __cdecl R_RenderDlights() {\n  dlight_t *l;\n  int i;\n  if (gl_flashblend->value != Number) {\n    r_dlightframecount = r_framecount + Number;\n    qglDepthMask(Number);\n    qglDisable(Number);\n    qglShadeModel(Number);\n    qglEnable(Number);\n    qglBlendFunc(Number, Number);\n    l = r_newrefdef.dlights;\n    for (i = Number; i < r_newrefdef.num_dlights; ++i)\n      R_RenderDlight(l++);\n    qglColor3f(Number, Number, Number);\n    qglDisable(Number);\n    qglEnable(Number);\n    qglBlendFunc(Number, Number);\n    qglDepthMask(Number);\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/2af4e000b03dbd36bf5f5b1e94bd385a31b5c6a785c70e9770f2544cd62ecd92", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/emu/cpu/m68000/m68kops.o", "objdump": "000000000000ba70 <_ZL20m68k_op_and_16_er_diP15_m68ki_cpu_core>:\n    ba70:\t55                   \tpush   %rbp\n    ba71:\t48 89 e5             \tmov    %rsp,%rbp\n    ba74:\t48 83 ec 10          \tsub    $0x10,%rsp\n    ba78:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n    ba7c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    ba80:\t48 89 c7             \tmov    %rax,%rdi\n    ba83:\te8 3a 55 ff ff       \tcallq  fc2 <_ZL13OPER_AY_DI_16P15_m68ki_cpu_core>\n    ba88:\t0d 00 00 ff ff       \tor     $0xffff0000,%eax\n    ba8d:\t89 c1                \tmov    %eax,%ecx\n    ba8f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    ba93:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n    ba99:\tc1 e8 09             \tshr    $0x9,%eax\n    ba9c:\t83 e0 07             \tand    $0x7,%eax\n    ba9f:\t89 c2                \tmov    %eax,%edx\n    baa1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    baa5:\t89 d2                \tmov    %edx,%edx\n    baa7:\t8b 54 90 08          \tmov    0x8(%rax,%rdx,4),%edx\n    baab:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    baaf:\t8b 80 80 00 00 00    \tmov    0x80(%rax),%eax\n    bab5:\tc1 e8 09             \tshr    $0x9,%eax\n    bab8:\t83 e0 07             \tand    $0x7,%eax\n    babb:\t89 c6                \tmov    %eax,%esi\n    babd:\t21 ca                \tand    %ecx,%edx\n    babf:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    bac3:\t89 f1                \tmov    %esi,%ecx\n    bac5:\t89 54 88 08          \tmov    %edx,0x8(%rax,%rcx,4)\n    bac9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    bacd:\t89 f2                \tmov    %esi,%edx\n    bacf:\t8b 44 90 08          \tmov    0x8(%rax,%rdx,4),%eax\n    bad3:\t0f b7 d0             \tmovzwl %ax,%edx\n    bad6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    bada:\t89 90 2c 01 00 00    \tmov    %edx,0x12c(%rax)\n    bae0:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    bae4:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n    baea:\tc1 e8 08             \tshr    $0x8,%eax\n    baed:\t89 c2                \tmov    %eax,%edx\n    baef:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    baf3:\t89 90 28 01 00 00    \tmov    %edx,0x128(%rax)\n    baf9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    bafd:\tc7 80 34 01 00 00 00 \tmovl   $0x0,0x134(%rax)\n    bb04:\t00 00 00 \n    bb07:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    bb0b:\tc7 80 30 01 00 00 00 \tmovl   $0x0,0x130(%rax)\n    bb12:\t00 00 00 \n    bb15:\t90                   \tnop\n    bb16:\tc9                   \tleaveq \n    bb17:\tc3                   \tretq   ", "code_s": "_DWORD *__fastcall m68k_op_and_16_er_di(_DWORD *a1) {\n  __int16 v1;\n  __int64 v2;\n  _DWORD *result;\n  v1 = OPER_AY_DI_16((__int64)a1);\n  v2 = (a1[Number] >> Number) & Number;\n  a1[v2 + Number] &= *(_DWORD *)&v1 | Number;\n  a1[Number] = (unsigned __int16)a1[v2 + Number];\n  a1[Number] = a1[Number] >> Number;\n  a1[Number] = Number;\n  result = a1;\n  a1[Number] = Number;\n  return result;\n}", "code_t": "void __cdecl m68k_op_and_16_er_di(m68ki_cpu_core *m68k) {\n  __int16 v1;\n  __int64 v2;\n  v1 = OPER_AY_DI_16(m68k);\n  v2 = (m68k->ir >> Number) & Number;\n  m68k->dar[v2] &= *(_DWORD *)&v1 | Number;\n  m68k->not_z_flag = (unsigned __int16)m68k->dar[v2];\n  m68k->n_flag = m68k->not_z_flag >> Number;\n  m68k->c_flag = Number;\n  m68k->v_flag = Number;\n}", "var": [], "body_in_train": false}, {"repo_owner": "google-code-export", "repo_name": "jmupdf", "path": "google-code-export/jmupdf/8308bb9a47435d59cdf43ed861c93a7c9ddb91a59b62f61c151b5e501c6c023f", "path_in_repo": "google-code-export/jmupdf/mupdf/build/debug/pdf_object.o", "objdump": "000000000000238f <pdf_dict_put>:\n    238f:\t55                   \tpush   %rbp\n    2390:\t48 89 e5             \tmov    %rsp,%rbp\n    2393:\t53                   \tpush   %rbx\n    2394:\t48 83 ec 38          \tsub    $0x38,%rsp\n    2398:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    239c:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    23a0:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n    23a4:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    23a9:\t74 1c                \tje     23c7 <pdf_dict_put+0x38>\n    23ab:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    23af:\t8b 40 04             \tmov    0x4(%rax),%eax\n    23b2:\t83 f8 08             \tcmp    $0x8,%eax\n    23b5:\t75 10                \tjne    23c7 <pdf_dict_put+0x38>\n    23b7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    23bb:\t48 89 c7             \tmov    %rax,%rdi\n    23be:\te8 00 00 00 00       \tcallq  23c3 <pdf_dict_put+0x34>\n    23c3:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    23c7:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    23cc:\t0f 84 82 02 00 00    \tje     2654 <pdf_dict_put+0x2c5>\n    23d2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    23d6:\t8b 40 04             \tmov    0x4(%rax),%eax\n    23d9:\t83 f8 07             \tcmp    $0x7,%eax\n    23dc:\t74 30                \tje     240e <pdf_dict_put+0x7f>\n    23de:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    23e2:\t48 89 c7             \tmov    %rax,%rdi\n    23e5:\te8 06 e9 ff ff       \tcallq  cf0 <pdf_objkindstr>\n    23ea:\t48 89 c2             \tmov    %rax,%rdx\n    23ed:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    23f1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    23f5:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 23fc <pdf_dict_put+0x6d>\n    23fc:\t48 89 c7             \tmov    %rax,%rdi\n    23ff:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2404:\te8 00 00 00 00       \tcallq  2409 <pdf_dict_put+0x7a>\n    2409:\te9 47 02 00 00       \tjmpq   2655 <pdf_dict_put+0x2c6>\n    240e:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n    2413:\t74 1c                \tje     2431 <pdf_dict_put+0xa2>\n    2415:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2419:\t8b 40 04             \tmov    0x4(%rax),%eax\n    241c:\t83 f8 08             \tcmp    $0x8,%eax\n    241f:\t75 10                \tjne    2431 <pdf_dict_put+0xa2>\n    2421:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2425:\t48 89 c7             \tmov    %rax,%rdi\n    2428:\te8 00 00 00 00       \tcallq  242d <pdf_dict_put+0x9e>\n    242d:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    2431:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n    2436:\t74 0c                \tje     2444 <pdf_dict_put+0xb5>\n    2438:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    243c:\t8b 40 04             \tmov    0x4(%rax),%eax\n    243f:\t83 f8 05             \tcmp    $0x5,%eax\n    2442:\t74 30                \tje     2474 <pdf_dict_put+0xe5>\n    2444:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2448:\t48 89 c7             \tmov    %rax,%rdi\n    244b:\te8 a0 e8 ff ff       \tcallq  cf0 <pdf_objkindstr>\n    2450:\t48 89 c2             \tmov    %rax,%rdx\n    2453:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2457:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    245b:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 2462 <pdf_dict_put+0xd3>\n    2462:\t48 89 c7             \tmov    %rax,%rdi\n    2465:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    246a:\te8 00 00 00 00       \tcallq  246f <pdf_dict_put+0xe0>\n    246f:\te9 e1 01 00 00       \tjmpq   2655 <pdf_dict_put+0x2c6>\n    2474:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2478:\t48 89 c7             \tmov    %rax,%rdi\n    247b:\te8 00 00 00 00       \tcallq  2480 <pdf_dict_put+0xf1>\n    2480:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2484:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    2489:\t75 25                \tjne    24b0 <pdf_dict_put+0x121>\n    248b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    248f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    2493:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    2497:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 249e <pdf_dict_put+0x10f>\n    249e:\t48 89 c7             \tmov    %rax,%rdi\n    24a1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24a6:\te8 00 00 00 00       \tcallq  24ab <pdf_dict_put+0x11c>\n    24ab:\te9 a5 01 00 00       \tjmpq   2655 <pdf_dict_put+0x2c6>\n    24b0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    24b4:\t8b 40 14             \tmov    0x14(%rax),%eax\n    24b7:\t83 f8 64             \tcmp    $0x64,%eax\n    24ba:\t7e 18                \tjle    24d4 <pdf_dict_put+0x145>\n    24bc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    24c0:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n    24c4:\t84 c0                \ttest   %al,%al\n    24c6:\t75 0c                \tjne    24d4 <pdf_dict_put+0x145>\n    24c8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    24cc:\t48 89 c7             \tmov    %rax,%rdi\n    24cf:\te8 00 00 00 00       \tcallq  24d4 <pdf_dict_put+0x145>\n    24d4:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    24d8:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n    24dc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    24e0:\t48 89 ce             \tmov    %rcx,%rsi\n    24e3:\t48 89 c7             \tmov    %rax,%rdi\n    24e6:\te8 f4 fa ff ff       \tcallq  1fdf <pdf_dict_finds>\n    24eb:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    24ee:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n    24f2:\t78 7b                \tjs     256f <pdf_dict_put+0x1e0>\n    24f4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    24f8:\t8b 40 14             \tmov    0x14(%rax),%eax\n    24fb:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n    24fe:\t7d 6f                \tjge    256f <pdf_dict_put+0x1e0>\n    2500:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2504:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    2508:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    250b:\t48 63 d2             \tmovslq %edx,%rdx\n    250e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    2512:\t48 01 d0             \tadd    %rdx,%rax\n    2515:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    2519:\t48 39 45 c8          \tcmp    %rax,-0x38(%rbp)\n    251d:\t0f 84 32 01 00 00    \tje     2655 <pdf_dict_put+0x2c6>\n    2523:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2527:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    252b:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    252e:\t48 63 d2             \tmovslq %edx,%rdx\n    2531:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    2535:\t48 01 d0             \tadd    %rdx,%rax\n    2538:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    253c:\t48 89 c7             \tmov    %rax,%rdi\n    253f:\te8 00 00 00 00       \tcallq  2544 <pdf_dict_put+0x1b5>\n    2544:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2548:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    254c:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    254f:\t48 63 d2             \tmovslq %edx,%rdx\n    2552:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    2556:\t48 8d 1c 10          \tlea    (%rax,%rdx,1),%rbx\n    255a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    255e:\t48 89 c7             \tmov    %rax,%rdi\n    2561:\te8 00 00 00 00       \tcallq  2566 <pdf_dict_put+0x1d7>\n    2566:\t48 89 43 08          \tmov    %rax,0x8(%rbx)\n    256a:\te9 e6 00 00 00       \tjmpq   2655 <pdf_dict_put+0x2c6>\n    256f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2573:\t8b 50 14             \tmov    0x14(%rax),%edx\n    2576:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    257a:\t8b 40 18             \tmov    0x18(%rax),%eax\n    257d:\t39 c2                \tcmp    %eax,%edx\n    257f:\t7c 0c                \tjl     258d <pdf_dict_put+0x1fe>\n    2581:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2585:\t48 89 c7             \tmov    %rax,%rdi\n    2588:\te8 5b f7 ff ff       \tcallq  1ce8 <pdf_dict_grow>\n    258d:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n    2590:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    2593:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2597:\t0f b6 40 10          \tmovzbl 0x10(%rax),%eax\n    259b:\t84 c0                \ttest   %al,%al\n    259d:\t74 57                \tje     25f6 <pdf_dict_put+0x267>\n    259f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    25a3:\t8b 40 14             \tmov    0x14(%rax),%eax\n    25a6:\t85 c0                \ttest   %eax,%eax\n    25a8:\t7e 4c                \tjle    25f6 <pdf_dict_put+0x267>\n    25aa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    25ae:\t8b 40 14             \tmov    0x14(%rax),%eax\n    25b1:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n    25b4:\t48 98                \tcltq   \n    25b6:\t48 c1 e0 04          \tshl    $0x4,%rax\n    25ba:\t48 89 c2             \tmov    %rax,%rdx\n    25bd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    25c1:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    25c5:\t8b 4d e4             \tmov    -0x1c(%rbp),%ecx\n    25c8:\t48 63 c9             \tmovslq %ecx,%rcx\n    25cb:\t48 c1 e1 04          \tshl    $0x4,%rcx\n    25cf:\t48 01 c1             \tadd    %rax,%rcx\n    25d2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    25d6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    25da:\t8b 75 e4             \tmov    -0x1c(%rbp),%esi\n    25dd:\t48 63 f6             \tmovslq %esi,%rsi\n    25e0:\t48 83 c6 01          \tadd    $0x1,%rsi\n    25e4:\t48 c1 e6 04          \tshl    $0x4,%rsi\n    25e8:\t48 01 f0             \tadd    %rsi,%rax\n    25eb:\t48 89 ce             \tmov    %rcx,%rsi\n    25ee:\t48 89 c7             \tmov    %rax,%rdi\n    25f1:\te8 00 00 00 00       \tcallq  25f6 <pdf_dict_put+0x267>\n    25f6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    25fa:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    25fe:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    2601:\t48 63 d2             \tmovslq %edx,%rdx\n    2604:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    2608:\t48 8d 1c 10          \tlea    (%rax,%rdx,1),%rbx\n    260c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2610:\t48 89 c7             \tmov    %rax,%rdi\n    2613:\te8 00 00 00 00       \tcallq  2618 <pdf_dict_put+0x289>\n    2618:\t48 89 03             \tmov    %rax,(%rbx)\n    261b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    261f:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    2623:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    2626:\t48 63 d2             \tmovslq %edx,%rdx\n    2629:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    262d:\t48 8d 1c 10          \tlea    (%rax,%rdx,1),%rbx\n    2631:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2635:\t48 89 c7             \tmov    %rax,%rdi\n    2638:\te8 00 00 00 00       \tcallq  263d <pdf_dict_put+0x2ae>\n    263d:\t48 89 43 08          \tmov    %rax,0x8(%rbx)\n    2641:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2645:\t8b 40 14             \tmov    0x14(%rax),%eax\n    2648:\t8d 50 01             \tlea    0x1(%rax),%edx\n    264b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    264f:\t89 50 14             \tmov    %edx,0x14(%rax)\n    2652:\teb 01                \tjmp    2655 <pdf_dict_put+0x2c6>\n    2654:\t90                   \tnop\n    2655:\t48 83 c4 38          \tadd    $0x38,%rsp\n    2659:\t5b                   \tpop    %rbx\n    265a:\t5d                   \tpop    %rbp\n    265b:\tc3                   \tretq   ", "code_s": "void __fastcall pdf_dict_put(__int64 a1, _DWORD *a2, _DWORD *a3) {\n  const char *v3;\n  const char *v4;\n  __int64 v5;\n  _QWORD *v6;\n  __int64 v7;\n  _DWORD *v9;\n  __int64 v10;\n  int v11;\n  int v12;\n  const char *v13;\n  v10 = a1;\n  v9 = a2;\n  if (a1 && *(_DWORD *)(a1 + Number) == Number)\n    v10 = pdf_resolve_indirect(a1);\n  if (v10) {\n    if (*(_DWORD *)(v10 + Number) == Number) {\n      if (a2 && a2[Number] == Number)\n        v9 = (_DWORD *)pdf_resolve_indirect(a2);\n      if (v9 && v9[Number] == Number) {\n        v13 = (const char *)pdf_to_name((__int64)v9);\n        if (a3) {\n          if (*(int *)(v10 + Number) > Number && !*(_BYTE *)(v10 + Number))\n            pdf_sort_dict(v10);\n          v12 = pdf_dict_finds(v10, v13, &v11);\n          if (v12 < Number || v12 >= *(_DWORD *)(v10 + Number)) {\n            if (*(_DWORD *)(v10 + Number) >= *(_DWORD *)(v10 + Number))\n              pdf_dict_grow(v10);\n            v12 = v11;\n            if (*(_BYTE *)(v10 + Number) && *(int *)(v10 + Number) > Number)\n              memmove(\n                  (void *)(Number * (v12 + Number L) +\n                           *(_QWORD *)(v10 + Number)),\n                  (const void *)(*(_QWORD *)(v10 + Number) + Number L * v12),\n                  Number L * (*(_DWORD *)(v10 + Number) - v12));\n            v6 = (_QWORD *)(*(_QWORD *)(v10 + Number) + Number L * v12);\n            *v6 = pdf_keep_obj(v9);\n            v7 = *(_QWORD *)(v10 + Number) + Number L * v12;\n            *(_QWORD *)(v7 + Number) = pdf_keep_obj(a3);\n            ++*(_DWORD *)(v10 + Number);\n          } else if (a3 != *(_DWORD **)(Number L * v12 +\n                                        *(_QWORD *)(v10 + Number) + Number)) {\n            pdf_drop_obj(*(_QWORD *)(Number L * v12 +\n                                     *(_QWORD *)(v10 + Number) + Number));\n            v5 = *(_QWORD *)(v10 + Number) + Number L * v12;\n            *(_QWORD *)(v5 + Number) = pdf_keep_obj(a3);\n          }\n        } else {\n          fz_warn(*(_QWORD *)(v10 + Number), String, v13);\n        }\n      } else {\n        v4 = pdf_objkindstr(v10);\n        fz_warn(*(_QWORD *)(v10 + Number), String, v4);\n      }\n    } else {\n      v3 = pdf_objkindstr(v10);\n      fz_warn(*(_QWORD *)(v10 + Number), String, v3);\n    }\n  }\n}", "code_t": "void __cdecl pdf_dict_put(pdf_obj *obj, pdf_obj *key, pdf_obj *val) {\n  char *v3;\n  char *v4;\n  __int64 v5;\n  keyval *v6;\n  __int64 v7;\n  pdf_obj *keya;\n  pdf_obj *obja;\n  int location;\n  int i;\n  char *s;\n  obja = obj;\n  keya = key;\n  if (obj && obj->kind == PDF_INDIRECT)\n    obja = (pdf_obj *)pdf_resolve_indirect(obj);\n  if (obja) {\n    if (obja->kind == PDF_DICT) {\n      if (key && key->kind == PDF_INDIRECT)\n        keya = (pdf_obj *)pdf_resolve_indirect(key);\n      if (keya && keya->kind == PDF_NAME) {\n        s = pdf_to_name(keya);\n        if (val) {\n          if (obja->u.a.cap > Number && !obja->u.n[Number])\n            pdf_sort_dict(obja);\n          i = pdf_dict_finds(obja, s, &location);\n          if (i < Number || i >= obja->u.a.cap) {\n            if (obja->u.a.cap >= obja->u.d.cap)\n              pdf_dict_grow(obja);\n            i = location;\n            if (obja->u.n[Number] && obja->u.a.cap > Number)\n              memmove(&obja->u.d.items[i + Number], &obja->u.d.items[i],\n                      Number L * (obja->u.a.cap - i));\n            v6 = &obja->u.d.items[i];\n            v6->k = pdf_keep_obj(keya);\n            v7 = (__int64)&obja->u.d.items[i];\n            *(_QWORD *)(v7 + Number) = pdf_keep_obj(val);\n            ++obja->u.a.cap;\n          } else if (val != obja->u.d.items[i].v) {\n            pdf_drop_obj(obja->u.d.items[i].v);\n            v5 = (__int64)&obja->u.d.items[i];\n            *(_QWORD *)(v5 + Number) = pdf_keep_obj(val);\n          }\n        } else {\n          fz_warn(obja->ctx, String, s);\n        }\n      } else {\n        v4 = pdf_objkindstr(obja);\n        fz_warn(obja->ctx, String, v4);\n      }\n    } else {\n      v3 = pdf_objkindstr(obja);\n      fz_warn(obja->ctx, String, v3);\n    }\n  }\n}", "var": [], "body_in_train": false}, {"repo_owner": "FillipeAs", "repo_name": "Linuuux", "path": "FillipeAs/Linuuux/d870ddb0ae564a6aa95e619ac8b6db768eeb33fa4467c6f15df0bbb4d9842eb5", "path_in_repo": "FillipeAs/Linuuux/tools/perf/ui/libperf-in.o", "objdump": "00000000000026fc <hpp__color_overhead_guest_us>:\n    26fc:\t55                   \tpush   %rbp\n    26fd:\t48 89 e5             \tmov    %rsp,%rbp\n    2700:\t48 83 ec 30          \tsub    $0x30,%rsp\n    2704:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    2708:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    270c:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n    2710:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2717:\t00 00 \n    2719:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    271d:\t31 c0                \txor    %eax,%eax\n    271f:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n    2723:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n    2727:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    272b:\t48 83 ec 08          \tsub    $0x8,%rsp\n    272f:\t6a 01                \tpushq  $0x1\n    2731:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n    2737:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    273d:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    2742:\t48 89 c7             \tmov    %rax,%rdi\n    2745:\te8 00 00 00 00       \tcallq  274a <hpp__color_overhead_guest_us+0x4e>\n    274a:\t48 83 c4 10          \tadd    $0x10,%rsp\n    274e:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    2752:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    2759:\t00 00 \n    275b:\t74 05                \tje     2762 <hpp__color_overhead_guest_us+0x66>\n    275d:\te8 00 00 00 00       \tcallq  2762 <hpp__color_overhead_guest_us+0x66>\n    2762:\tc9                   \tleaveq \n    2763:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hpp__color_overhead_guest_us(__int64 a1, __int64 *a2,\n                                                __int64 a3) {\n  return hpp__fmt(a1, a2, a3, he_get_period_guest_us, (__int64)String,\n                  (__int64(__fastcall *)(__int64 *, __int64, _QWORD,\n                                         double))hpp_color_scnprintf,\n                  Number);\n}", "code_t": "int __cdecl hpp__color_overhead_guest_us(perf_hpp_fmt *fmt, perf_hpp *hpp,\n                                         hist_entry *he) {\n  return hpp__fmt(fmt, hpp, he, (hpp_field_fn)he_get_period_guest_us, String,\n                  hpp_color_scnprintf, Number);\n}", "var": [], "body_in_train": true}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/31433cf766b26e41da89f229871135b8835af5ec31025ee51c6c59f7931c203a", "path_in_repo": "XanClic/qemu//s390x-softmmu/tcg/tcg-op-gvec.o", "objdump": "00000000000002d8 <temp_tcgv_ptr>:\n     2d8:\t55                   \tpush   %rbp\n     2d9:\t48 89 e5             \tmov    %rsp,%rbp\n     2dc:\t48 83 ec 08          \tsub    $0x8,%rsp\n     2e0:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n     2e4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     2e8:\t48 89 c7             \tmov    %rax,%rdi\n     2eb:\te8 9f ff ff ff       \tcallq  28f <temp_tcgv_i32>\n     2f0:\tc9                   \tleaveq \n     2f1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall temp_tcgv_ptr(__int64 a1) { return temp_tcgv_i32(a1); }", "code_t": "TCGv_ptr __cdecl temp_tcgv_ptr(TCGTemp_0 *t) { return temp_tcgv_i32(t); }", "var": [], "body_in_train": true}, {"repo_owner": "nmacs", "repo_name": "print3d", "path": "nmacs/print3d/142ee0ab03aaea08c1cce3b49aba610648f7bc1ddb53dfc348f2f9408898fa3c", "path_in_repo": "nmacs/print3d//toolchain/openocd-0.7.0/jimtcl/jimsh", "objdump": "0000000000436f75 <Jim_RegsubCmd>:\n  436f75:\t55                   \tpush   %rbp\n  436f76:\t48 89 e5             \tmov    %rsp,%rbp\n  436f79:\t48 81 ec b0 02 00 00 \tsub    $0x2b0,%rsp\n  436f80:\t48 89 bd 68 fd ff ff \tmov    %rdi,-0x298(%rbp)\n  436f87:\t89 b5 64 fd ff ff    \tmov    %esi,-0x29c(%rbp)\n  436f8d:\t48 89 95 58 fd ff ff \tmov    %rdx,-0x2a8(%rbp)\n  436f94:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  436f9b:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  436fa2:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  436fa9:\tc7 85 7c ff ff ff 00 \tmovl   $0x0,-0x84(%rbp)\n  436fb0:\t00 00 00 \n  436fb3:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n  436fba:\t83 bd 64 fd ff ff 03 \tcmpl   $0x3,-0x29c(%rbp)\n  436fc1:\t7f 31                \tjg     436ff4 <Jim_RegsubCmd+0x7f>\n  436fc3:\t90                   \tnop\n  436fc4:\teb 04                \tjmp    436fca <Jim_RegsubCmd+0x55>\n  436fc6:\t90                   \tnop\n  436fc7:\teb 01                \tjmp    436fca <Jim_RegsubCmd+0x55>\n  436fc9:\t90                   \tnop\n  436fca:\t48 8b 95 58 fd ff ff \tmov    -0x2a8(%rbp),%rdx\n  436fd1:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  436fd8:\tb9 90 4b 44 00       \tmov    $0x444b90,%ecx\n  436fdd:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  436fe2:\t48 89 c7             \tmov    %rax,%rdi\n  436fe5:\te8 09 57 fe ff       \tcallq  41c6f3 <Jim_WrongNumArgs>\n  436fea:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  436fef:\te9 09 07 00 00       \tjmpq   4376fd <Jim_RegsubCmd+0x788>\n  436ff4:\tc7 45 dc 01 00 00 00 \tmovl   $0x1,-0x24(%rbp)\n  436ffb:\te9 2e 01 00 00       \tjmpq   43712e <Jim_RegsubCmd+0x1b9>\n  437000:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  437003:\t48 98                \tcltq   \n  437005:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  43700c:\t00 \n  43700d:\t48 8b 85 58 fd ff ff \tmov    -0x2a8(%rbp),%rax\n  437014:\t48 01 d0             \tadd    %rdx,%rax\n  437017:\t48 8b 00             \tmov    (%rax),%rax\n  43701a:\t48 89 c7             \tmov    %rax,%rdi\n  43701d:\te8 ac 42 fd ff       \tcallq  40b2ce <Jim_String>\n  437022:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  437026:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  43702a:\t0f b6 00             \tmovzbl (%rax),%eax\n  43702d:\t3c 2d                \tcmp    $0x2d,%al\n  43702f:\t0f 85 0a 01 00 00    \tjne    43713f <Jim_RegsubCmd+0x1ca>\n  437035:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  437038:\t48 98                \tcltq   \n  43703a:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  437041:\t00 \n  437042:\t48 8b 85 58 fd ff ff \tmov    -0x2a8(%rbp),%rax\n  437049:\t48 01 d0             \tadd    %rdx,%rax\n  43704c:\t48 8b 30             \tmov    (%rax),%rsi\n  43704f:\t48 8d 95 d4 fd ff ff \tlea    -0x22c(%rbp),%rdx\n  437056:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  43705d:\t41 b9 03 00 00 00    \tmov    $0x3,%r9d\n  437063:\t41 b8 f7 4a 44 00    \tmov    $0x444af7,%r8d\n  437069:\t48 89 d1             \tmov    %rdx,%rcx\n  43706c:\tba 40 4c 44 00       \tmov    $0x444c40,%edx\n  437071:\t48 89 c7             \tmov    %rax,%rdi\n  437074:\te8 ee 09 ff ff       \tcallq  427a67 <Jim_GetEnum>\n  437079:\t85 c0                \ttest   %eax,%eax\n  43707b:\t74 0a                \tje     437087 <Jim_RegsubCmd+0x112>\n  43707d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  437082:\te9 76 06 00 00       \tjmpq   4376fd <Jim_RegsubCmd+0x788>\n  437087:\t8b 85 d4 fd ff ff    \tmov    -0x22c(%rbp),%eax\n  43708d:\t83 f8 04             \tcmp    $0x4,%eax\n  437090:\t75 09                \tjne    43709b <Jim_RegsubCmd+0x126>\n  437092:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n  437096:\te9 a5 00 00 00       \tjmpq   437140 <Jim_RegsubCmd+0x1cb>\n  43709b:\t8b 85 d4 fd ff ff    \tmov    -0x22c(%rbp),%eax\n  4370a1:\t83 f8 03             \tcmp    $0x3,%eax\n  4370a4:\t74 2f                \tje     4370d5 <Jim_RegsubCmd+0x160>\n  4370a6:\t83 f8 03             \tcmp    $0x3,%eax\n  4370a9:\t7f 7f                \tjg     43712a <Jim_RegsubCmd+0x1b5>\n  4370ab:\t83 f8 02             \tcmp    $0x2,%eax\n  4370ae:\t74 1c                \tje     4370cc <Jim_RegsubCmd+0x157>\n  4370b0:\t83 f8 02             \tcmp    $0x2,%eax\n  4370b3:\t7f 75                \tjg     43712a <Jim_RegsubCmd+0x1b5>\n  4370b5:\t85 c0                \ttest   %eax,%eax\n  4370b7:\t74 07                \tje     4370c0 <Jim_RegsubCmd+0x14b>\n  4370b9:\t83 f8 01             \tcmp    $0x1,%eax\n  4370bc:\t74 08                \tje     4370c6 <Jim_RegsubCmd+0x151>\n  4370be:\teb 6a                \tjmp    43712a <Jim_RegsubCmd+0x1b5>\n  4370c0:\t83 4d fc 02          \torl    $0x2,-0x4(%rbp)\n  4370c4:\teb 64                \tjmp    43712a <Jim_RegsubCmd+0x1b5>\n  4370c6:\t83 4d fc 01          \torl    $0x1,-0x4(%rbp)\n  4370ca:\teb 5e                \tjmp    43712a <Jim_RegsubCmd+0x1b5>\n  4370cc:\tc7 45 f4 01 00 00 00 \tmovl   $0x1,-0xc(%rbp)\n  4370d3:\teb 55                \tjmp    43712a <Jim_RegsubCmd+0x1b5>\n  4370d5:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n  4370d9:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4370dc:\t3b 85 64 fd ff ff    \tcmp    -0x29c(%rbp),%eax\n  4370e2:\t0f 84 de fe ff ff    \tje     436fc6 <Jim_RegsubCmd+0x51>\n  4370e8:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4370eb:\t48 98                \tcltq   \n  4370ed:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4370f4:\t00 \n  4370f5:\t48 8b 85 58 fd ff ff \tmov    -0x2a8(%rbp),%rax\n  4370fc:\t48 01 d0             \tadd    %rdx,%rax\n  4370ff:\t48 8b 08             \tmov    (%rax),%rcx\n  437102:\t48 8d 95 7c ff ff ff \tlea    -0x84(%rbp),%rdx\n  437109:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437110:\t48 89 ce             \tmov    %rcx,%rsi\n  437113:\t48 89 c7             \tmov    %rax,%rdi\n  437116:\te8 c6 d9 fd ff       \tcallq  414ae1 <Jim_GetIndex>\n  43711b:\t85 c0                \ttest   %eax,%eax\n  43711d:\t74 0a                \tje     437129 <Jim_RegsubCmd+0x1b4>\n  43711f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  437124:\te9 d4 05 00 00       \tjmpq   4376fd <Jim_RegsubCmd+0x788>\n  437129:\t90                   \tnop\n  43712a:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n  43712e:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  437131:\t3b 85 64 fd ff ff    \tcmp    -0x29c(%rbp),%eax\n  437137:\t0f 8c c3 fe ff ff    \tjl     437000 <Jim_RegsubCmd+0x8b>\n  43713d:\teb 01                \tjmp    437140 <Jim_RegsubCmd+0x1cb>\n  43713f:\t90                   \tnop\n  437140:\t8b 85 64 fd ff ff    \tmov    -0x29c(%rbp),%eax\n  437146:\t2b 45 dc             \tsub    -0x24(%rbp),%eax\n  437149:\t83 f8 03             \tcmp    $0x3,%eax\n  43714c:\t74 12                \tje     437160 <Jim_RegsubCmd+0x1eb>\n  43714e:\t8b 85 64 fd ff ff    \tmov    -0x29c(%rbp),%eax\n  437154:\t2b 45 dc             \tsub    -0x24(%rbp),%eax\n  437157:\t83 f8 04             \tcmp    $0x4,%eax\n  43715a:\t0f 85 69 fe ff ff    \tjne    436fc9 <Jim_RegsubCmd+0x54>\n  437160:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  437163:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  437166:\t48 98                \tcltq   \n  437168:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n  43716f:\t00 \n  437170:\t48 8b 85 58 fd ff ff \tmov    -0x2a8(%rbp),%rax\n  437177:\t48 01 c8             \tadd    %rcx,%rax\n  43717a:\t48 8b 08             \tmov    (%rax),%rcx\n  43717d:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437184:\t48 89 ce             \tmov    %rcx,%rsi\n  437187:\t48 89 c7             \tmov    %rax,%rdi\n  43718a:\te8 d5 f3 ff ff       \tcallq  436564 <SetRegexpFromAny>\n  43718f:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  437193:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n  437198:\t75 0a                \tjne    4371a4 <Jim_RegsubCmd+0x22f>\n  43719a:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  43719f:\te9 59 05 00 00       \tjmpq   4376fd <Jim_RegsubCmd+0x788>\n  4371a4:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4371a7:\t48 98                \tcltq   \n  4371a9:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4371b0:\t00 \n  4371b1:\t48 8b 85 58 fd ff ff \tmov    -0x2a8(%rbp),%rax\n  4371b8:\t48 01 d0             \tadd    %rdx,%rax\n  4371bb:\t48 8b 00             \tmov    (%rax),%rax\n  4371be:\t48 89 c7             \tmov    %rax,%rdi\n  4371c1:\te8 08 41 fd ff       \tcallq  40b2ce <Jim_String>\n  4371c6:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  4371ca:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4371cd:\t48 98                \tcltq   \n  4371cf:\t48 83 c0 01          \tadd    $0x1,%rax\n  4371d3:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  4371da:\t00 \n  4371db:\t48 8b 85 58 fd ff ff \tmov    -0x2a8(%rbp),%rax\n  4371e2:\t48 01 d0             \tadd    %rdx,%rax\n  4371e5:\t48 8b 00             \tmov    (%rax),%rax\n  4371e8:\t48 8d 95 dc fd ff ff \tlea    -0x224(%rbp),%rdx\n  4371ef:\t48 89 d6             \tmov    %rdx,%rsi\n  4371f2:\t48 89 c7             \tmov    %rax,%rdi\n  4371f5:\te8 50 40 fd ff       \tcallq  40b24a <Jim_GetString>\n  4371fa:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  4371fe:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  437201:\t48 98                \tcltq   \n  437203:\t48 83 c0 02          \tadd    $0x2,%rax\n  437207:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  43720e:\t00 \n  43720f:\t48 8b 85 58 fd ff ff \tmov    -0x2a8(%rbp),%rax\n  437216:\t48 01 d0             \tadd    %rdx,%rax\n  437219:\t48 8b 00             \tmov    (%rax),%rax\n  43721c:\t48 8d 95 d8 fd ff ff \tlea    -0x228(%rbp),%rdx\n  437223:\t48 89 d6             \tmov    %rdx,%rsi\n  437226:\t48 89 c7             \tmov    %rax,%rdi\n  437229:\te8 1c 40 fd ff       \tcallq  40b24a <Jim_GetString>\n  43722e:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n  437232:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  437235:\t48 98                \tcltq   \n  437237:\t48 83 c0 03          \tadd    $0x3,%rax\n  43723b:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n  437242:\t00 \n  437243:\t48 8b 85 58 fd ff ff \tmov    -0x2a8(%rbp),%rax\n  43724a:\t48 01 d0             \tadd    %rdx,%rax\n  43724d:\t48 8b 00             \tmov    (%rax),%rax\n  437250:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n  437254:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  43725b:\tba 00 00 00 00       \tmov    $0x0,%edx\n  437260:\tbe 59 4b 44 00       \tmov    $0x444b59,%esi\n  437265:\t48 89 c7             \tmov    %rax,%rdi\n  437268:\te8 d1 41 fd ff       \tcallq  40b43e <Jim_NewStringObj>\n  43726d:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n  437271:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n  437277:\t85 c0                \ttest   %eax,%eax\n  437279:\t74 53                \tje     4372ce <Jim_RegsubCmd+0x359>\n  43727b:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n  437281:\t85 c0                \ttest   %eax,%eax\n  437283:\t79 17                \tjns    43729c <Jim_RegsubCmd+0x327>\n  437285:\t8b 85 dc fd ff ff    \tmov    -0x224(%rbp),%eax\n  43728b:\t8d 50 01             \tlea    0x1(%rax),%edx\n  43728e:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n  437294:\t01 d0                \tadd    %edx,%eax\n  437296:\t89 85 7c ff ff ff    \tmov    %eax,-0x84(%rbp)\n  43729c:\t8b 95 7c ff ff ff    \tmov    -0x84(%rbp),%edx\n  4372a2:\t8b 85 dc fd ff ff    \tmov    -0x224(%rbp),%eax\n  4372a8:\t39 c2                \tcmp    %eax,%edx\n  4372aa:\t7e 0e                \tjle    4372ba <Jim_RegsubCmd+0x345>\n  4372ac:\t8b 85 dc fd ff ff    \tmov    -0x224(%rbp),%eax\n  4372b2:\t89 85 7c ff ff ff    \tmov    %eax,-0x84(%rbp)\n  4372b8:\teb 14                \tjmp    4372ce <Jim_RegsubCmd+0x359>\n  4372ba:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n  4372c0:\t85 c0                \ttest   %eax,%eax\n  4372c2:\t79 0a                \tjns    4372ce <Jim_RegsubCmd+0x359>\n  4372c4:\tc7 85 7c ff ff ff 00 \tmovl   $0x0,-0x84(%rbp)\n  4372cb:\t00 00 00 \n  4372ce:\t8b 8d 7c ff ff ff    \tmov    -0x84(%rbp),%ecx\n  4372d4:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  4372d8:\t48 8b 75 98          \tmov    -0x68(%rbp),%rsi\n  4372dc:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  4372e3:\t48 89 c7             \tmov    %rax,%rdi\n  4372e6:\te8 df 43 fd ff       \tcallq  40b6ca <Jim_AppendString>\n  4372eb:\t8b 95 dc fd ff ff    \tmov    -0x224(%rbp),%edx\n  4372f1:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n  4372f7:\t29 c2                \tsub    %eax,%edx\n  4372f9:\t89 d0                \tmov    %edx,%eax\n  4372fb:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  4372fe:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n  437304:\t48 63 d0             \tmovslq %eax,%rdx\n  437307:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  43730b:\t48 01 d0             \tadd    %rdx,%rax\n  43730e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  437312:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n  437315:\t48 8d 95 e0 fd ff ff \tlea    -0x220(%rbp),%rdx\n  43731c:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n  437320:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  437324:\t41 89 c8             \tmov    %ecx,%r8d\n  437327:\t48 89 d1             \tmov    %rdx,%rcx\n  43732a:\tba 32 00 00 00       \tmov    $0x32,%edx\n  43732f:\t48 89 c7             \tmov    %rax,%rdi\n  437332:\te8 9d 54 00 00       \tcallq  43c7d4 <regexec>\n  437337:\t89 45 94             \tmov    %eax,-0x6c(%rbp)\n  43733a:\t83 7d 94 01          \tcmpl   $0x1,-0x6c(%rbp)\n  43733e:\t7e 44                \tjle    437384 <Jim_RegsubCmd+0x40f>\n  437340:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  437347:\t48 8b 75 c0          \tmov    -0x40(%rbp),%rsi\n  43734b:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n  43734e:\tb9 64 00 00 00       \tmov    $0x64,%ecx\n  437353:\t89 c7                \tmov    %eax,%edi\n  437355:\te8 45 66 00 00       \tcallq  43d99f <regerror>\n  43735a:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  437361:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437368:\tbe 38 4b 44 00       \tmov    $0x444b38,%esi\n  43736d:\t48 89 c7             \tmov    %rax,%rdi\n  437370:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  437375:\te8 00 09 ff ff       \tcallq  427c7a <Jim_SetResultFormatted>\n  43737a:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  43737f:\te9 79 03 00 00       \tjmpq   4376fd <Jim_RegsubCmd+0x788>\n  437384:\t83 7d 94 01          \tcmpl   $0x1,-0x6c(%rbp)\n  437388:\t0f 84 28 02 00 00    \tje     4375b6 <Jim_RegsubCmd+0x641>\n  43738e:\t83 45 e0 01          \taddl   $0x1,-0x20(%rbp)\n  437392:\t8b 8d e0 fd ff ff    \tmov    -0x220(%rbp),%ecx\n  437398:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  43739c:\t48 8b 75 98          \tmov    -0x68(%rbp),%rsi\n  4373a0:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  4373a7:\t48 89 c7             \tmov    %rax,%rdi\n  4373aa:\te8 1b 43 fd ff       \tcallq  40b6ca <Jim_AppendString>\n  4373af:\tc7 45 d8 00 00 00 00 \tmovl   $0x0,-0x28(%rbp)\n  4373b6:\te9 70 01 00 00       \tjmpq   43752b <Jim_RegsubCmd+0x5b6>\n  4373bb:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  4373be:\t48 63 d0             \tmovslq %eax,%rdx\n  4373c1:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4373c5:\t48 01 d0             \tadd    %rdx,%rax\n  4373c8:\t0f b6 00             \tmovzbl (%rax),%eax\n  4373cb:\t0f be c0             \tmovsbl %al,%eax\n  4373ce:\t89 45 90             \tmov    %eax,-0x70(%rbp)\n  4373d1:\t83 7d 90 26          \tcmpl   $0x26,-0x70(%rbp)\n  4373d5:\t75 0c                \tjne    4373e3 <Jim_RegsubCmd+0x46e>\n  4373d7:\tc7 45 d0 00 00 00 00 \tmovl   $0x0,-0x30(%rbp)\n  4373de:\te9 d7 00 00 00       \tjmpq   4374ba <Jim_RegsubCmd+0x545>\n  4373e3:\t83 7d 90 5c          \tcmpl   $0x5c,-0x70(%rbp)\n  4373e7:\t0f 85 a6 00 00 00    \tjne    437493 <Jim_RegsubCmd+0x51e>\n  4373ed:\t8b 85 d8 fd ff ff    \tmov    -0x228(%rbp),%eax\n  4373f3:\t39 45 d8             \tcmp    %eax,-0x28(%rbp)\n  4373f6:\t0f 8d 97 00 00 00    \tjge    437493 <Jim_RegsubCmd+0x51e>\n  4373fc:\t83 45 d8 01          \taddl   $0x1,-0x28(%rbp)\n  437400:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  437403:\t48 63 d0             \tmovslq %eax,%rdx\n  437406:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  43740a:\t48 01 d0             \tadd    %rdx,%rax\n  43740d:\t0f b6 00             \tmovzbl (%rax),%eax\n  437410:\t0f be c0             \tmovsbl %al,%eax\n  437413:\t89 45 90             \tmov    %eax,-0x70(%rbp)\n  437416:\t83 7d 90 2f          \tcmpl   $0x2f,-0x70(%rbp)\n  43741a:\t7e 14                \tjle    437430 <Jim_RegsubCmd+0x4bb>\n  43741c:\t83 7d 90 39          \tcmpl   $0x39,-0x70(%rbp)\n  437420:\t7f 0e                \tjg     437430 <Jim_RegsubCmd+0x4bb>\n  437422:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n  437425:\t83 e8 30             \tsub    $0x30,%eax\n  437428:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  43742b:\te9 8a 00 00 00       \tjmpq   4374ba <Jim_RegsubCmd+0x545>\n  437430:\t83 7d 90 5c          \tcmpl   $0x5c,-0x70(%rbp)\n  437434:\t74 06                \tje     43743c <Jim_RegsubCmd+0x4c7>\n  437436:\t83 7d 90 26          \tcmpl   $0x26,-0x70(%rbp)\n  43743a:\t75 2a                \tjne    437466 <Jim_RegsubCmd+0x4f1>\n  43743c:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  43743f:\t48 63 d0             \tmovslq %eax,%rdx\n  437442:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  437446:\t48 01 c2             \tadd    %rax,%rdx\n  437449:\t48 8b 75 98          \tmov    -0x68(%rbp),%rsi\n  43744d:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437454:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n  437459:\t48 89 c7             \tmov    %rax,%rdi\n  43745c:\te8 69 42 fd ff       \tcallq  40b6ca <Jim_AppendString>\n  437461:\te9 c1 00 00 00       \tjmpq   437527 <Jim_RegsubCmd+0x5b2>\n  437466:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  437469:\t48 98                \tcltq   \n  43746b:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n  43746f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  437473:\t48 01 c2             \tadd    %rax,%rdx\n  437476:\t48 8b 75 98          \tmov    -0x68(%rbp),%rsi\n  43747a:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437481:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n  437486:\t48 89 c7             \tmov    %rax,%rdi\n  437489:\te8 3c 42 fd ff       \tcallq  40b6ca <Jim_AppendString>\n  43748e:\te9 94 00 00 00       \tjmpq   437527 <Jim_RegsubCmd+0x5b2>\n  437493:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  437496:\t48 63 d0             \tmovslq %eax,%rdx\n  437499:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  43749d:\t48 01 c2             \tadd    %rax,%rdx\n  4374a0:\t48 8b 75 98          \tmov    -0x68(%rbp),%rsi\n  4374a4:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  4374ab:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n  4374b0:\t48 89 c7             \tmov    %rax,%rdi\n  4374b3:\te8 12 42 fd ff       \tcallq  40b6ca <Jim_AppendString>\n  4374b8:\teb 6d                \tjmp    437527 <Jim_RegsubCmd+0x5b2>\n  4374ba:\t83 7d d0 31          \tcmpl   $0x31,-0x30(%rbp)\n  4374be:\t7f 67                \tjg     437527 <Jim_RegsubCmd+0x5b2>\n  4374c0:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  4374c3:\t48 98                \tcltq   \n  4374c5:\t8b 84 c5 e0 fd ff ff \tmov    -0x220(%rbp,%rax,8),%eax\n  4374cc:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4374cf:\t74 56                \tje     437527 <Jim_RegsubCmd+0x5b2>\n  4374d1:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  4374d4:\t48 98                \tcltq   \n  4374d6:\t8b 84 c5 e4 fd ff ff \tmov    -0x21c(%rbp,%rax,8),%eax\n  4374dd:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  4374e0:\t74 45                \tje     437527 <Jim_RegsubCmd+0x5b2>\n  4374e2:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  4374e5:\t48 98                \tcltq   \n  4374e7:\t8b 94 c5 e4 fd ff ff \tmov    -0x21c(%rbp,%rax,8),%edx\n  4374ee:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  4374f1:\t48 98                \tcltq   \n  4374f3:\t8b 84 c5 e0 fd ff ff \tmov    -0x220(%rbp,%rax,8),%eax\n  4374fa:\t89 d1                \tmov    %edx,%ecx\n  4374fc:\t29 c1                \tsub    %eax,%ecx\n  4374fe:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n  437501:\t48 98                \tcltq   \n  437503:\t8b 84 c5 e0 fd ff ff \tmov    -0x220(%rbp,%rax,8),%eax\n  43750a:\t48 63 d0             \tmovslq %eax,%rdx\n  43750d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  437511:\t48 01 c2             \tadd    %rax,%rdx\n  437514:\t48 8b 75 98          \tmov    -0x68(%rbp),%rsi\n  437518:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  43751f:\t48 89 c7             \tmov    %rax,%rdi\n  437522:\te8 a3 41 fd ff       \tcallq  40b6ca <Jim_AppendString>\n  437527:\t83 45 d8 01          \taddl   $0x1,-0x28(%rbp)\n  43752b:\t8b 85 d8 fd ff ff    \tmov    -0x228(%rbp),%eax\n  437531:\t39 45 d8             \tcmp    %eax,-0x28(%rbp)\n  437534:\t0f 8c 81 fe ff ff    \tjl     4373bb <Jim_RegsubCmd+0x446>\n  43753a:\t8b 85 e4 fd ff ff    \tmov    -0x21c(%rbp),%eax\n  437540:\t48 98                \tcltq   \n  437542:\t48 01 45 e8          \tadd    %rax,-0x18(%rbp)\n  437546:\t8b 85 e4 fd ff ff    \tmov    -0x21c(%rbp),%eax\n  43754c:\t29 45 d4             \tsub    %eax,-0x2c(%rbp)\n  43754f:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  437553:\t74 65                \tje     4375ba <Jim_RegsubCmd+0x645>\n  437555:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n  437559:\t74 5f                \tje     4375ba <Jim_RegsubCmd+0x645>\n  43755b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  43755e:\t83 e0 01             \tand    $0x1,%eax\n  437561:\t85 c0                \ttest   %eax,%eax\n  437563:\t75 0b                \tjne    437570 <Jim_RegsubCmd+0x5fb>\n  437565:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  437569:\t0f b6 00             \tmovzbl (%rax),%eax\n  43756c:\t3c 5e                \tcmp    $0x5e,%al\n  43756e:\t74 49                \tje     4375b9 <Jim_RegsubCmd+0x644>\n  437570:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  437574:\t0f b6 00             \tmovzbl (%rax),%eax\n  437577:\t84 c0                \ttest   %al,%al\n  437579:\t75 2b                \tjne    4375a6 <Jim_RegsubCmd+0x631>\n  43757b:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n  43757f:\t74 25                \tje     4375a6 <Jim_RegsubCmd+0x631>\n  437581:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  437585:\t48 8b 75 98          \tmov    -0x68(%rbp),%rsi\n  437589:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437590:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n  437595:\t48 89 c7             \tmov    %rax,%rdi\n  437598:\te8 2d 41 fd ff       \tcallq  40b6ca <Jim_AppendString>\n  43759d:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n  4375a2:\t83 6d d4 01          \tsubl   $0x1,-0x2c(%rbp)\n  4375a6:\t83 4d f8 10          \torl    $0x10,-0x8(%rbp)\n  4375aa:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n  4375ae:\t0f 85 5e fd ff ff    \tjne    437312 <Jim_RegsubCmd+0x39d>\n  4375b4:\teb 04                \tjmp    4375ba <Jim_RegsubCmd+0x645>\n  4375b6:\t90                   \tnop\n  4375b7:\teb 01                \tjmp    4375ba <Jim_RegsubCmd+0x645>\n  4375b9:\t90                   \tnop\n  4375ba:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  4375be:\t48 8b 75 98          \tmov    -0x68(%rbp),%rsi\n  4375c2:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  4375c9:\tb9 ff ff ff ff       \tmov    $0xffffffff,%ecx\n  4375ce:\t48 89 c7             \tmov    %rax,%rdi\n  4375d1:\te8 f4 40 fd ff       \tcallq  40b6ca <Jim_AppendString>\n  4375d6:\t8b 85 64 fd ff ff    \tmov    -0x29c(%rbp),%eax\n  4375dc:\t2b 45 dc             \tsub    -0x24(%rbp),%eax\n  4375df:\t83 f8 04             \tcmp    $0x4,%eax\n  4375e2:\t0f 85 ae 00 00 00    \tjne    437696 <Jim_RegsubCmd+0x721>\n  4375e8:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  4375ec:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n  4375f0:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  4375f7:\t48 89 ce             \tmov    %rcx,%rsi\n  4375fa:\t48 89 c7             \tmov    %rax,%rdi\n  4375fd:\te8 88 72 fd ff       \tcallq  40e88a <Jim_SetVariable>\n  437602:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  437605:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  437609:\t75 73                \tjne    43767e <Jim_RegsubCmd+0x709>\n  43760b:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  43760e:\t48 63 d0             \tmovslq %eax,%rdx\n  437611:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437618:\t48 89 d6             \tmov    %rdx,%rsi\n  43761b:\t48 89 c7             \tmov    %rax,%rdi\n  43761e:\te8 ac a6 fd ff       \tcallq  411ccf <Jim_NewIntObj>\n  437623:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n  437627:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  43762b:\t8b 40 10             \tmov    0x10(%rax),%eax\n  43762e:\t8d 50 01             \tlea    0x1(%rax),%edx\n  437631:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  437635:\t89 50 10             \tmov    %edx,0x10(%rax)\n  437638:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  43763f:\t48 8b 00             \tmov    (%rax),%rax\n  437642:\t8b 50 10             \tmov    0x10(%rax),%edx\n  437645:\t83 ea 01             \tsub    $0x1,%edx\n  437648:\t89 50 10             \tmov    %edx,0x10(%rax)\n  43764b:\t8b 40 10             \tmov    0x10(%rax),%eax\n  43764e:\t85 c0                \ttest   %eax,%eax\n  437650:\t7f 1c                \tjg     43766e <Jim_RegsubCmd+0x6f9>\n  437652:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437659:\t48 8b 10             \tmov    (%rax),%rdx\n  43765c:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437663:\t48 89 d6             \tmov    %rdx,%rsi\n  437666:\t48 89 c7             \tmov    %rax,%rdi\n  437669:\te8 2a 39 fd ff       \tcallq  40af98 <Jim_FreeObj>\n  43766e:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437675:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n  437679:\t48 89 10             \tmov    %rdx,(%rax)\n  43767c:\teb 7c                \tjmp    4376fa <Jim_RegsubCmd+0x785>\n  43767e:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n  437682:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  437689:\t48 89 d6             \tmov    %rdx,%rsi\n  43768c:\t48 89 c7             \tmov    %rax,%rdi\n  43768f:\te8 04 39 fd ff       \tcallq  40af98 <Jim_FreeObj>\n  437694:\teb 64                \tjmp    4376fa <Jim_RegsubCmd+0x785>\n  437696:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43769a:\t48 89 45 88          \tmov    %rax,-0x78(%rbp)\n  43769e:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4376a2:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4376a5:\t8d 50 01             \tlea    0x1(%rax),%edx\n  4376a8:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n  4376ac:\t89 50 10             \tmov    %edx,0x10(%rax)\n  4376af:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  4376b6:\t48 8b 00             \tmov    (%rax),%rax\n  4376b9:\t8b 50 10             \tmov    0x10(%rax),%edx\n  4376bc:\t83 ea 01             \tsub    $0x1,%edx\n  4376bf:\t89 50 10             \tmov    %edx,0x10(%rax)\n  4376c2:\t8b 40 10             \tmov    0x10(%rax),%eax\n  4376c5:\t85 c0                \ttest   %eax,%eax\n  4376c7:\t7f 1c                \tjg     4376e5 <Jim_RegsubCmd+0x770>\n  4376c9:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  4376d0:\t48 8b 10             \tmov    (%rax),%rdx\n  4376d3:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  4376da:\t48 89 d6             \tmov    %rdx,%rsi\n  4376dd:\t48 89 c7             \tmov    %rax,%rdi\n  4376e0:\te8 b3 38 fd ff       \tcallq  40af98 <Jim_FreeObj>\n  4376e5:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  4376ec:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n  4376f0:\t48 89 10             \tmov    %rdx,(%rax)\n  4376f3:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n  4376fa:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4376fd:\tc9                   \tleaveq \n  4376fe:\tc3                   \tretq   ", "code_s": "__int64 __fastcall Jim_RegsubCmd(__int64 *a1, int a2, __int64 a3) {\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  char v10[Number];\n  int v11;\n  int v12;\n  int v13;\n  int v14;\n  int v15[Number];\n  int v16;\n  _QWORD *v17;\n  _QWORD *v18;\n  int v19;\n  unsigned int v20;\n  _QWORD *v21;\n  __int64 v22;\n  __int64 v23;\n  const char *v24;\n  _BYTE *v25;\n  void *v26;\n  _BYTE *v27;\n  int v28;\n  int v29;\n  int j;\n  int i;\n  int v32;\n  unsigned int v33;\n  const char *v34;\n  int v35;\n  unsigned int v36;\n  unsigned int v37;\n  v37 = Number;\n  v36 = Number;\n  v35 = Number;\n  v16 = Number;\n  v32 = Number;\n  if (a2 <= Number)\n    goto LABEL_2;\n  for (i = Number; i < a2; ++i) {\n    v27 = (_BYTE *)Jim_String(*(_QWORD **)(Number L * i + a3));\n    if (*v27 != Number)\n      break;\n    if ((unsigned int)Jim_GetEnum(a1, *(_QWORD *)(Number L * i + a3),\n                                  (const char **)options_4305, &v11, String,\n                                  Number))\n      return Number L;\n    if (v11 == Number) {\n      ++i;\n      break;\n    }\n    if (v11 == Number) {\n      if (++i == a2)\n        goto LABEL_2;\n      if ((unsigned int)Jim_GetIndex((__int64)a1,\n                                     *(_QWORD *)(Number L * i + a3), &v16))\n        return Number L;\n    } else if (v11 <= Number) {\n      if (v11 == Number) {\n        v35 = Number;\n      } else if (v11) {\n        if (v11 == Number)\n          v37 |= Number;\n      } else {\n        v37 |= Number;\n      }\n    }\n  }\n  if (a2 - i != Number && a2 - i != Number) {\n  LABEL_2:\n    Jim_WrongNumArgs(a1, Number, a3, String);\n    return Number L;\n  }\n  v26 = SetRegexpFromAny(a1, *(_QWORD *)(Number L * i + a3), v37);\n  if (!v26)\n    return Number L;\n  v25 = (_BYTE *)Jim_String(*(_QWORD **)(Number L * i + a3));\n  v24 = (const char *)Jim_GetString(*(_QWORD *)(Number * (i + Number L) + a3),\n                                    &v13);\n  v23 = Jim_GetString(*(_QWORD *)(Number * (i + Number L) + a3), &v12);\n  v22 = *(_QWORD *)(Number * (i + Number L) + a3);\n  v21 = Jim_NewStringObj((__int64)a1, byte_444B59, Number);\n  if (v16) {\n    if (v16 < Number)\n      v16 += v13 + Number;\n    if (v16 <= v13) {\n      if (v16 < Number)\n        v16 = Number;\n    } else {\n      v16 = v13;\n    }\n  }\n  Jim_AppendString((__int64)a1, (__int64)v21, v24, v16);\n  v29 = v13 - v16;\n  v34 = &v24[v16];\n  do {\n    v20 = regexec(v26, v34, Number L, &v14, v36);\n    if ((int)v20 > Number) {\n      regerror(v20, v26, v10, Number L);\n      Jim_SetResultFormatted(a1, String, (__int64)v10, v4, v5, v6);\n      return Number L;\n    }\n    if (v20 == Number)\n      break;\n    ++v32;\n    Jim_AppendString((__int64)a1, (__int64)v21, v34, v14);\n    for (j = Number; j < v12; ++j) {\n      v19 = *(char *)(j + v23);\n      if (v19 == Number) {\n        v28 = Number;\n      LABEL_51:\n        if (v28 <= Number && *(&v14 + Number * v28) != Number &&\n            v15[Number * v28] != Number)\n          Jim_AppendString((__int64)a1, (__int64)v21,\n                           &v34[*(&v14 + Number * v28)],\n                           v15[Number * v28] - *(&v14 + Number * v28));\n        continue;\n      }\n      if (v19 != Number || j >= v12) {\n      LABEL_48:\n        Jim_AppendString((__int64)a1, (__int64)v21, (const char *)(v23 + j),\n                         Number);\n        continue;\n      }\n      v19 = *(char *)(++j + v23);\n      if (v19 > Number && v19 <= Number) {\n        v28 = v19 - Number;\n        goto LABEL_51;\n      }\n      if (v19 == Number || v19 == Number)\n        goto LABEL_48;\n      Jim_AppendString((__int64)a1, (__int64)v21,\n                       (const char *)(v23 + j - Number L), Number);\n    }\n    v34 += v15[Number];\n    v29 -= v15[Number];\n    if (!v35 || !v29 || (v37 & Number) == Number && *v25 == Number)\n      break;\n    if (!*v25) {\n      Jim_AppendString((__int64)a1, (__int64)v21, v34++, Number);\n      --v29;\n    }\n    v36 |= Number;\n  } while (v29);\n  Jim_AppendString((__int64)a1, (__int64)v21, v34, Number);\n  if (a2 - i == Number) {\n    v33 = Jim_SetVariable((__int64)a1, v22, (__int64)v21);\n    if (v33) {\n      Jim_FreeObj((__int64)a1, (__int64)v21);\n    } else {\n      v17 = Jim_NewIntObj((__int64)a1, v32);\n      ++*((_DWORD *)v17 + Number);\n      v7 = *a1;\n      *(_DWORD *)(v7 + Number) = *(_DWORD *)(*a1 + Number) - Number;\n      if (*(int *)(v7 + Number) <= Number)\n        Jim_FreeObj((__int64)a1, *a1);\n      *a1 = (__int64)v17;\n    }\n  } else {\n    v18 = v21;\n    ++*((_DWORD *)v21 + Number);\n    v8 = *a1;\n    *(_DWORD *)(v8 + Number) = *(_DWORD *)(*a1 + Number) - Number;\n    if (*(int *)(v8 + Number) <= Number)\n      Jim_FreeObj((__int64)a1, *a1);\n    *a1 = (__int64)v18;\n    v33 = Number;\n  }\n  return v33;\n}", "code_t": "int __cdecl Jim_RegsubCmd(Jim_Interp_0 *interp, int argc,\n                          Jim_Obj_0 *const *argv) {\n  Jim_Obj_0 *v4;\n  Jim_Obj_0 *v5;\n  char buf[Number];\n  int option;\n  int replace_len;\n  int source_len;\n  regmatch_t pmatch[Number];\n  int offset;\n  Jim_Obj_0 *_resultObjPtr_;\n  Jim_Obj_0 *_resultObjPtr__0;\n  int c;\n  int match;\n  Jim_Obj_0 *resultObj;\n  Jim_Obj_0 *varname;\n  const char *replace_str;\n  const char *source_str;\n  const char *pattern;\n  regex_t *regex;\n  const char *opt;\n  int idx;\n  int n;\n  int j;\n  int i;\n  int num_matches;\n  int result;\n  const char *p;\n  int opt_all;\n  int regexec_flags;\n  int regcomp_flags;\n  regcomp_flags = Number;\n  regexec_flags = Number;\n  opt_all = Number;\n  offset = Number;\n  num_matches = Number;\n  if (argc <= Number)\n    goto wrongNumArgs;\n  for (i = Number; i < argc; ++i) {\n    opt = Jim_String(argv[i]);\n    if (*opt != Number)\n      break;\n    if (Jim_GetEnum(interp, argv[i], options_4305, &option, String, Number))\n      return Number;\n    if (option == Number) {\n      ++i;\n      break;\n    }\n    if (option == Number) {\n      if (++i == argc)\n        goto wrongNumArgs;\n      if (Jim_GetIndex(interp, argv[i], &offset))\n        return Number;\n    } else if (option <= Number) {\n      if (option == Number) {\n        opt_all = Number;\n      } else if (option) {\n        if (option == Number)\n          regcomp_flags |= Number;\n      } else {\n        regcomp_flags |= Number;\n      }\n    }\n  }\n  if (argc - i != Number && argc - i != Number) {\n  wrongNumArgs:\n    Jim_WrongNumArgs(interp, Number, argv, String);\n    return Number;\n  }\n  regex = SetRegexpFromAny(interp, argv[i], regcomp_flags);\n  if (!regex)\n    return Number;\n  pattern = Jim_String(argv[i]);\n  source_str = Jim_GetString(argv[i + Number], &source_len);\n  replace_str = Jim_GetString(argv[i + Number], &replace_len);\n  varname = argv[i + Number];\n  resultObj = Jim_NewStringObj(interp, byte_444B59, Number);\n  if (offset) {\n    if (offset < Number)\n      offset += source_len + Number;\n    if (offset <= source_len) {\n      if (offset < Number)\n        offset = Number;\n    } else {\n      offset = source_len;\n    }\n  }\n  Jim_AppendString(interp, resultObj, source_str, offset);\n  n = source_len - offset;\n  p = &source_str[offset];\n  do {\n    match = regexec(regex, p, Number, pmatch, regexec_flags);\n    if (match > Number) {\n      regerror(match, regex, buf, Number);\n      Jim_SetResultFormatted(interp, String, buf);\n      return Number;\n    }\n    if (match == Number)\n      break;\n    ++num_matches;\n    Jim_AppendString(interp, resultObj, p, pmatch[Number].rm_so);\n    for (j = Number; j < replace_len; ++j) {\n      c = replace_str[j];\n      if (c == Number) {\n        idx = Number;\n      LABEL_51:\n        if (idx <= Number && pmatch[idx].rm_so != Number &&\n            pmatch[idx].rm_eo != Number)\n          Jim_AppendString(interp, resultObj, &p[pmatch[idx].rm_so],\n                           pmatch[idx].rm_eo - pmatch[idx].rm_so);\n        continue;\n      }\n      if (c != Number || j >= replace_len) {\n      LABEL_48:\n        Jim_AppendString(interp, resultObj, &replace_str[j], Number);\n        continue;\n      }\n      c = replace_str[++j];\n      if (c > Number && c <= Number) {\n        idx = c - Number;\n        goto LABEL_51;\n      }\n      if (c == Number || c == Number)\n        goto LABEL_48;\n      Jim_AppendString(interp, resultObj, &replace_str[j - Number], Number);\n    }\n    p += pmatch[Number].rm_eo;\n    n -= pmatch[Number].rm_eo;\n    if (!opt_all || !n ||\n        (regcomp_flags & Number) == Number && *pattern == Number)\n      break;\n    if (!*pattern) {\n      Jim_AppendString(interp, resultObj, p++, Number);\n      --n;\n    }\n    regexec_flags |= Number;\n  } while (n);\n  Jim_AppendString(interp, resultObj, p, Number);\n  if (argc - i == Number) {\n    result = Jim_SetVariable(interp, varname, resultObj);\n    if (result) {\n      Jim_FreeObj(interp, resultObj);\n    } else {\n      _resultObjPtr_ = Jim_NewIntObj(interp, num_matches);\n      ++_resultObjPtr_->refCount;\n      v4 = interp->result;\n      v4->refCount = interp->result->refCount - Number;\n      if (v4->refCount <= Number)\n        Jim_FreeObj(interp, interp->result);\n      interp->result = _resultObjPtr_;\n    }\n  } else {\n    _resultObjPtr__0 = resultObj;\n    ++resultObj->refCount;\n    v5 = interp->result;\n    v5->refCount = interp->result->refCount - Number;\n    if (v5->refCount <= Number)\n      Jim_FreeObj(interp, interp->result);\n    interp->result = _resultObjPtr__0;\n    result = Number;\n  }\n  return result;\n}", "var": [], "body_in_train": false}, {"repo_owner": "Team-OctOS-Devices", "repo_name": "kraken_kernel_samsung_jf", "path": "Team-OctOS-Devices/kraken_kernel_samsung_jf/3fd6564412d17b71e515e24bf1af93bfc02761b40592a2fc7d23b65427e2d182", "path_in_repo": "Team-OctOS-Devices/kraken_kernel_samsung_jf/tools/perf/util/trace-event-parse.o", "objdump": "0000000000001a6b <event_read_id>:\n    1a6b:\t55                   \tpush   %rbp\n    1a6c:\t48 89 e5             \tmov    %rsp,%rbp\n    1a6f:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1a73:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1a7a:\t00 00 \n    1a7c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1a80:\t31 c0                \txor    %eax,%eax\n    1a82:\tc7 45 ec ff ff ff ff \tmovl   $0xffffffff,-0x14(%rbp)\n    1a89:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1a8e:\tbf 06 00 00 00       \tmov    $0x6,%edi\n    1a93:\te8 f9 fe ff ff       \tcallq  1991 <read_expected_item>\n    1a98:\t85 c0                \ttest   %eax,%eax\n    1a9a:\t79 07                \tjns    1aa3 <event_read_id+0x38>\n    1a9c:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1aa1:\teb 5a                \tjmp    1afd <event_read_id+0x92>\n    1aa3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1aa8:\tbf 04 00 00 00       \tmov    $0x4,%edi\n    1aad:\te8 93 fe ff ff       \tcallq  1945 <read_expected>\n    1ab2:\t85 c0                \ttest   %eax,%eax\n    1ab4:\t79 07                \tjns    1abd <event_read_id+0x52>\n    1ab6:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    1abb:\teb 40                \tjmp    1afd <event_read_id+0x92>\n    1abd:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n    1ac1:\t48 89 c6             \tmov    %rax,%rsi\n    1ac4:\tbf 06 00 00 00       \tmov    $0x6,%edi\n    1ac9:\te8 9d fd ff ff       \tcallq  186b <read_expect_type>\n    1ace:\t85 c0                \ttest   %eax,%eax\n    1ad0:\t78 1b                \tjs     1aed <event_read_id+0x82>\n    1ad2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1ad6:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1adb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ae0:\t48 89 c7             \tmov    %rax,%rdi\n    1ae3:\te8 00 00 00 00       \tcallq  1ae8 <event_read_id+0x7d>\n    1ae8:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    1aeb:\teb 01                \tjmp    1aee <event_read_id+0x83>\n    1aed:\t90                   \tnop\n    1aee:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1af2:\t48 89 c7             \tmov    %rax,%rdi\n    1af5:\te8 9e fa ff ff       \tcallq  1598 <free_token>\n    1afa:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    1afd:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    1b01:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    1b08:\t00 00 \n    1b0a:\t74 05                \tje     1b11 <event_read_id+0xa6>\n    1b0c:\te8 00 00 00 00       \tcallq  1b11 <event_read_id+0xa6>\n    1b11:\tc9                   \tleaveq \n    1b12:\tc3                   \tretq   ", "code_s": "__int64 event_read_id() {\n  unsigned int v1;\n  char *nptr[Number];\n  nptr[Number] = (char *)__readfsqword(Number);\n  v1 = Number;\n  if ((int)read_expected_item(Number, String) < Number)\n    return Number;\n  if ((int)read_expected(Number, String) < Number)\n    return Number;\n  if ((int)read_expect_type(Number, (void **)nptr) >= Number)\n    v1 = strtoul(nptr[Number], Number L, Number);\n  free_token(nptr[Number]);\n  return v1;\n}", "code_t": "int __cdecl event_read_id() {\n  int id;\n  char *token[Number];\n  token[Number] = (char *)__readfsqword(Number);\n  id = Number;\n  if (read_expected_item(EVENT_ITEM, String) < Number)\n    return Number;\n  if (read_expected(EVENT_OP, String) < Number)\n    return Number;\n  if (read_expect_type(EVENT_ITEM, token) >= Number)\n    id = strtoul(token[Number], Number L, Number);\n  free_token(token[Number]);\n  return id;\n}", "var": [], "body_in_train": true}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/72d863e358d23a9787e1d769e3a76917875ec295a59ff580baf5a03eba41f638", "path_in_repo": "ftnapps/pkg-sbbs/src/uifc/gcc.linux.exe.debug/uifctest", "objdump": "000000000041cfb4 <listFree>:\n  41cfb4:\t55                   \tpush   %rbp\n  41cfb5:\t48 89 e5             \tmov    %rsp,%rbp\n  41cfb8:\t48 83 ec 40          \tsub    $0x40,%rsp\n  41cfbc:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  41cfc0:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n  41cfc5:\t75 0a                \tjne    41cfd1 <listFree+0x1d>\n  41cfc7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41cfcc:\te9 a4 01 00 00       \tjmpq   41d175 <listFree+0x1c1>\n  41cfd1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41cfd5:\t48 89 c7             \tmov    %rax,%rdi\n  41cfd8:\te8 ee fe ff ff       \tcallq  41cecb <listFreeNodes>\n  41cfdd:\t48 85 c0             \ttest   %rax,%rax\n  41cfe0:\t74 0a                \tje     41cfec <listFree+0x38>\n  41cfe2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41cfe7:\te9 89 01 00 00       \tjmpq   41d175 <listFree+0x1c1>\n  41cfec:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41cff0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  41cff4:\t83 e0 08             \tand    $0x8,%eax\n  41cff7:\t48 85 c0             \ttest   %rax,%rax\n  41cffa:\t0f 84 94 00 00 00    \tje     41d094 <listFree+0xe0>\n  41d000:\teb 79                \tjmp    41d07b <listFree+0xc7>\n  41d002:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  41d009:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41d00c:\t48 63 d0             \tmovslq %eax,%rdx\n  41d00f:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  41d016:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  41d01a:\tc1 fa 06             \tsar    $0x6,%edx\n  41d01d:\tc1 f8 1f             \tsar    $0x1f,%eax\n  41d020:\t29 c2                \tsub    %eax,%edx\n  41d022:\t89 d0                \tmov    %edx,%eax\n  41d024:\t48 98                \tcltq   \n  41d026:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  41d02a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41d02d:\t48 63 d0             \tmovslq %eax,%rdx\n  41d030:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  41d037:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  41d03b:\t89 d1                \tmov    %edx,%ecx\n  41d03d:\tc1 f9 06             \tsar    $0x6,%ecx\n  41d040:\t99                   \tcltd   \n  41d041:\t29 d1                \tsub    %edx,%ecx\n  41d043:\t89 ca                \tmov    %ecx,%edx\n  41d045:\t69 d2 e8 03 00 00    \timul   $0x3e8,%edx,%edx\n  41d04b:\t29 d0                \tsub    %edx,%eax\n  41d04d:\t89 c2                \tmov    %eax,%edx\n  41d04f:\t69 c2 e8 03 00 00    \timul   $0x3e8,%edx,%eax\n  41d055:\t48 98                \tcltq   \n  41d057:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  41d05b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  41d05f:\t49 89 c0             \tmov    %rax,%r8\n  41d062:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  41d067:\tba 00 00 00 00       \tmov    $0x0,%edx\n  41d06c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  41d071:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  41d076:\te8 e5 60 fe ff       \tcallq  403160 <select@plt>\n  41d07b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41d07f:\t48 83 c0 30          \tadd    $0x30,%rax\n  41d083:\t48 89 c7             \tmov    %rax,%rdi\n  41d086:\te8 75 66 fe ff       \tcallq  403700 <pthread_mutex_destroy@plt>\n  41d08b:\t83 f8 10             \tcmp    $0x10,%eax\n  41d08e:\t0f 84 6e ff ff ff    \tje     41d002 <listFree+0x4e>\n  41d094:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41d098:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  41d09c:\t83 e0 10             \tand    $0x10,%eax\n  41d09f:\t48 85 c0             \ttest   %rax,%rax\n  41d0a2:\t0f 84 ac 00 00 00    \tje     41d154 <listFree+0x1a0>\n  41d0a8:\teb 79                \tjmp    41d123 <listFree+0x16f>\n  41d0aa:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n  41d0b1:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41d0b4:\t48 63 d0             \tmovslq %eax,%rdx\n  41d0b7:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  41d0be:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  41d0c2:\tc1 fa 06             \tsar    $0x6,%edx\n  41d0c5:\tc1 f8 1f             \tsar    $0x1f,%eax\n  41d0c8:\t29 c2                \tsub    %eax,%edx\n  41d0ca:\t89 d0                \tmov    %edx,%eax\n  41d0cc:\t48 98                \tcltq   \n  41d0ce:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  41d0d2:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  41d0d5:\t48 63 d0             \tmovslq %eax,%rdx\n  41d0d8:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  41d0df:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  41d0e3:\t89 d1                \tmov    %edx,%ecx\n  41d0e5:\tc1 f9 06             \tsar    $0x6,%ecx\n  41d0e8:\t99                   \tcltd   \n  41d0e9:\t29 d1                \tsub    %edx,%ecx\n  41d0eb:\t89 ca                \tmov    %ecx,%edx\n  41d0ed:\t69 d2 e8 03 00 00    \timul   $0x3e8,%edx,%edx\n  41d0f3:\t29 d0                \tsub    %edx,%eax\n  41d0f5:\t89 c2                \tmov    %eax,%edx\n  41d0f7:\t69 c2 e8 03 00 00    \timul   $0x3e8,%edx,%eax\n  41d0fd:\t48 98                \tcltq   \n  41d0ff:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  41d103:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  41d107:\t49 89 c0             \tmov    %rax,%r8\n  41d10a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  41d10f:\tba 00 00 00 00       \tmov    $0x0,%edx\n  41d114:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  41d119:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  41d11e:\te8 3d 60 fe ff       \tcallq  403160 <select@plt>\n  41d123:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41d127:\t48 83 c0 58          \tadd    $0x58,%rax\n  41d12b:\t48 89 c7             \tmov    %rax,%rdi\n  41d12e:\te8 03 28 00 00       \tcallq  41f936 <xp_sem_destroy>\n  41d133:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  41d136:\t75 10                \tjne    41d148 <listFree+0x194>\n  41d138:\te8 63 63 fe ff       \tcallq  4034a0 <__errno_location@plt>\n  41d13d:\t8b 00                \tmov    (%rax),%eax\n  41d13f:\t83 f8 10             \tcmp    $0x10,%eax\n  41d142:\t0f 84 62 ff ff ff    \tje     41d0aa <listFree+0xf6>\n  41d148:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41d14c:\t48 c7 40 58 00 00 00 \tmovq   $0x0,0x58(%rax)\n  41d153:\t00 \n  41d154:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41d158:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  41d15c:\t83 e0 01             \tand    $0x1,%eax\n  41d15f:\t48 85 c0             \ttest   %rax,%rax\n  41d162:\t74 0c                \tje     41d170 <listFree+0x1bc>\n  41d164:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n  41d168:\t48 89 c7             \tmov    %rax,%rdi\n  41d16b:\te8 20 61 fe ff       \tcallq  403290 <free@plt>\n  41d170:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  41d175:\tc9                   \tleaveq \n  41d176:\tc3                   \tretq   ", "code_s": "__int64 __fastcall listFree(__int64 a1) {\n  struct timeval <span class=\"supfact\">v2</span>;\n  struct timeval <span class=\"supfact\">timeout</span>;\n  int v4;\n  int v5;\n  if (!a1)\n    return Number L;\n  if (listFreeNodes(a1))\n    return Number L;\n  if ((*(_QWORD *)(a1 + Number) & Number L) != Number) {\n    while (pthread_mutex_destroy((pthread_mutex_t *)(a1 + Number)) == Number) {\n      v5 = Number;\n      <span class=\"supfact\">timeout</span>.tv_sec = Number L;\n      <span class=\"supfact\">timeout</span>.tv_usec = Number L;\n      select(Number, Number L, Number L, Number L, &<span class=\"supfact\">timeout</span>);\n    }\n  }\n  if ((*(_QWORD *)(a1 + Number) & Number) != Number) {\n    while ((unsigned int)xp_sem_destroy(a1 + Number) == Number &&\n           *__errno_location() == Number) {\n      v4 = Number;\n      <span class=\"supfact\">v2</span>.tv_sec = Number L;\n      <span class=\"supfact\">v2</span>.tv_usec = Number L;\n      select(Number, Number L, Number L, Number L, &<span class=\"supfact\">v2</span>);\n    }\n    *(_QWORD *)(a1 + Number) = Number L;\n  }\n  if ((*(_QWORD *)(a1 + Number) & Number L) != Number)\n    free((void *)a1);\n  return Number L;\n}", "code_t": "int __cdecl listFree(link_list_t *list) {\n  timeval <span class=\"supfact\">tv_0</span>;\n  timeval <span class=\"supfact\">tv</span>;\n  int sleep_msecs_0;\n  int sleep_msecs;\n  if (!list)\n    return Number;\n  if (listFreeNodes(list))\n    return Number;\n  if ((list->flags & Number) != Number) {\n    while (pthread_mutex_destroy(&list->mutex) == Number) {\n      sleep_msecs = Number;\n      <span class=\"supfact\">tv</span>.tv_sec = Number L;\n      <span class=\"supfact\">tv</span>.tv_usec = Number L;\n      select(Number, Number L, Number L, Number L, &<span class=\"supfact\">tv</span>);\n    }\n  }\n  if ((list->flags & Number) != Number) {\n    while (xp_sem_destroy(&list->sem) == Number &&\n           *__errno_location() == Number) {\n      sleep_msecs_0 = Number;\n      <span class=\"supfact\">tv_0</span>.tv_sec = Number L;\n      <span class=\"supfact\">tv_0</span>.tv_usec = Number L;\n      select(Number, Number L, Number L, Number L, &<span class=\"supfact\">tv_0</span>);\n    }\n    list->sem = Number L;\n  }\n  if ((list->flags & Number) != Number)\n    free(list);\n  return Number;\n}", "var": [{"name": "v2", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "tv_0", "ref_name": "tv_0", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}, {"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "tv", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": true}, {"repo_owner": "maemo-leste", "repo_name": "droid4-linux", "path": "maemo-leste/droid4-linux/eda7b5273544e1e85c8ed2ab6338100357b352bd7e78c8e4fab61562b58dfced", "path_in_repo": "maemo-leste/droid4-linux/tools/perf/util/evlist.o", "objdump": "00000000000007eb <list_splice>:\n     7eb:\t55                   \tpush   %rbp\n     7ec:\t48 89 e5             \tmov    %rsp,%rbp\n     7ef:\t48 83 ec 20          \tsub    $0x20,%rsp\n     7f3:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     7f7:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n     7fb:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     802:\t00 00 \n     804:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     808:\t31 c0                \txor    %eax,%eax\n     80a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     80e:\t48 89 c7             \tmov    %rax,%rdi\n     811:\te8 14 ff ff ff       \tcallq  72a <list_empty>\n     816:\t85 c0                \ttest   %eax,%eax\n     818:\t75 1a                \tjne    834 <list_splice+0x49>\n     81a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     81e:\t48 8b 10             \tmov    (%rax),%rdx\n     821:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n     825:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     829:\t48 89 ce             \tmov    %rcx,%rsi\n     82c:\t48 89 c7             \tmov    %rax,%rdi\n     82f:\te8 38 ff ff ff       \tcallq  76c <__list_splice>\n     834:\t90                   \tnop\n     835:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     839:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     840:\t00 00 \n     842:\t74 05                \tje     849 <list_splice+0x5e>\n     844:\te8 00 00 00 00       \tcallq  849 <list_splice+0x5e>\n     849:\tc9                   \tleaveq \n     84a:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall list_splice(__int64 *a1, __int64 *a2) {\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  if (!list_empty(a1))\n    _list_splice(a1, a2, *a2);\n  return __readfsqword(Number) ^ v3;\n}", "code_t": "void __cdecl list_splice(const list_head *list, list_head *head) {\n  if (!list_empty(list))\n    _list_splice(list, head, head->next);\n}", "var": [], "body_in_train": true}, {"repo_owner": "smarabbit", "repo_name": "jscapel", "path": "smarabbit/jscapel/bdc5ec43b2cb281af4bf9ebf9a015acd15259f9e1c507427d74f454581937e3a", "path_in_repo": "smarabbit/jscapel/decaf/roms/ipxe/src/util/zbin", "objdump": "", "code_s": "int __fxstat(int ver, int fildes, struct stat *<span class=\"supfact\">stat_buf</span>) {\n  return _fxstat(ver, fildes, <span class=\"supfact\">stat_buf</span>);\n}", "code_t": "int __fxstat(int ver, int fildes, struct stat *<span class=\"supfact\">stat_buf</span>) {\n  return _fxstat(ver, fildes, <span class=\"supfact\">stat_buf</span>);\n}", "var": [{"name": "stat_buf", "type": "struct stat *", "pred_name": "stat_buf", "ref_name": "stat_buf", "ref_type": "struct stat *"}], "body_in_train": true}, {"repo_owner": "jikk", "repo_name": "intflow-llvm", "path": "jikk/intflow-llvm/31feca0b01f7963552d84f00505fe4a77a17dbe5b130536a7d7912b04adf2717", "path_in_repo": "jikk/intflow-llvm/projects/test-suite/MultiSource/Applications/d/Output/make_dparser.native", "objdump": "0000000000418263 <commit_tree>:\n  418263:\t55                   \tpush   %rbp\n  418264:\t48 89 e5             \tmov    %rsp,%rbp\n  418267:\t53                   \tpush   %rbx\n  418268:\t48 83 ec 28          \tsub    $0x28,%rsp\n  41826c:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  418270:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  418274:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  41827b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41827f:\t0f b6 40 54          \tmovzbl 0x54(%rax),%eax\n  418283:\t84 c0                \ttest   %al,%al\n  418285:\t74 09                \tje     418290 <commit_tree+0x2d>\n  418287:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41828b:\te9 2e 02 00 00       \tjmpq   4184be <commit_tree+0x25b>\n  418290:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  418294:\t48 8b 90 a0 00 00 00 \tmov    0xa0(%rax),%rdx\n  41829b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41829f:\t48 8b 80 c0 00 00 00 \tmov    0xc0(%rax),%rax\n  4182a6:\t48 39 c2             \tcmp    %rax,%rdx\n  4182a9:\t75 1e                \tjne    4182c9 <commit_tree+0x66>\n  4182ab:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4182af:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4182b3:\t48 85 c0             \ttest   %rax,%rax\n  4182b6:\t74 11                \tje     4182c9 <commit_tree+0x66>\n  4182b8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4182bc:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4182c0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4182c4:\t48 85 c0             \ttest   %rax,%rax\n  4182c7:\t75 08                \tjne    4182d1 <commit_tree+0x6e>\n  4182c9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4182cd:\tc6 40 54 01          \tmovb   $0x1,0x54(%rax)\n  4182d1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4182d5:\t48 8b 40 68          \tmov    0x68(%rax),%rax\n  4182d9:\t48 85 c0             \ttest   %rax,%rax\n  4182dc:\t74 17                \tje     4182f5 <commit_tree+0x92>\n  4182de:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  4182e2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4182e6:\t48 89 d6             \tmov    %rdx,%rsi\n  4182e9:\t48 89 c7             \tmov    %rax,%rdi\n  4182ec:\te8 b4 f9 ff ff       \tcallq  417ca5 <resolve_ambiguities>\n  4182f1:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4182f5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4182f9:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n  418300:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  418304:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  418308:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n  41830e:\t48 63 d0             \tmovslq %eax,%rdx\n  418311:\t48 89 d0             \tmov    %rdx,%rax\n  418314:\t48 01 c0             \tadd    %rax,%rax\n  418317:\t48 01 d0             \tadd    %rdx,%rax\n  41831a:\t48 c1 e0 03          \tshl    $0x3,%rax\n  41831e:\t48 01 c8             \tadd    %rcx,%rax\n  418321:\t8b 00                \tmov    (%rax),%eax\n  418323:\t83 f8 02             \tcmp    $0x2,%eax\n  418326:\t0f 94 c0             \tsete   %al\n  418329:\t0f b6 c0             \tmovzbl %al,%eax\n  41832c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  41832f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  418333:\t8b 40 60             \tmov    0x60(%rax),%eax\n  418336:\t85 c0                \ttest   %eax,%eax\n  418338:\t75 0d                \tjne    418347 <commit_tree+0xe4>\n  41833a:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  41833e:\t74 07                \tje     418347 <commit_tree+0xe4>\n  418340:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  418345:\teb 05                \tjmp    41834c <commit_tree+0xe9>\n  418347:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41834c:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  41834f:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  418356:\te9 ca 00 00 00       \tjmpq   418425 <commit_tree+0x1c2>\n  41835b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41835f:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  418363:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  418366:\t48 63 d2             \tmovslq %edx,%rdx\n  418369:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  41836d:\t48 01 d0             \tadd    %rdx,%rax\n  418370:\t48 8b 10             \tmov    (%rax),%rdx\n  418373:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  418377:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  41837b:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n  41837e:\t48 63 c9             \tmovslq %ecx,%rcx\n  418381:\t48 c1 e1 03          \tshl    $0x3,%rcx\n  418385:\t48 8d 1c 08          \tlea    (%rax,%rcx,1),%rbx\n  418389:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41838d:\t48 89 d6             \tmov    %rdx,%rsi\n  418390:\t48 89 c7             \tmov    %rax,%rdi\n  418393:\te8 cb fe ff ff       \tcallq  418263 <commit_tree>\n  418398:\t48 89 03             \tmov    %rax,(%rbx)\n  41839b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41839f:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  4183a3:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4183a6:\t48 63 d2             \tmovslq %edx,%rdx\n  4183a9:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  4183ad:\t48 01 d0             \tadd    %rdx,%rax\n  4183b0:\t48 8b 00             \tmov    (%rax),%rax\n  4183b3:\t8b 40 28             \tmov    0x28(%rax),%eax\n  4183b6:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n  4183b9:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  4183bd:\t74 62                \tje     418421 <commit_tree+0x1be>\n  4183bf:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4183c3:\t48 8b 80 90 00 00 00 \tmov    0x90(%rax),%rax\n  4183ca:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n  4183ce:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4183d2:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  4183d6:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4183d9:\t48 63 d2             \tmovslq %edx,%rdx\n  4183dc:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  4183e0:\t48 01 d0             \tadd    %rdx,%rax\n  4183e3:\t48 8b 00             \tmov    (%rax),%rax\n  4183e6:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n  4183ec:\t48 63 d0             \tmovslq %eax,%rdx\n  4183ef:\t48 89 d0             \tmov    %rdx,%rax\n  4183f2:\t48 01 c0             \tadd    %rax,%rax\n  4183f5:\t48 01 d0             \tadd    %rdx,%rax\n  4183f8:\t48 c1 e0 03          \tshl    $0x3,%rax\n  4183fc:\t48 01 c8             \tadd    %rcx,%rax\n  4183ff:\t8b 00                \tmov    (%rax),%eax\n  418401:\t83 f8 02             \tcmp    $0x2,%eax\n  418404:\t75 1b                \tjne    418421 <commit_tree+0x1be>\n  418406:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  418409:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  41840d:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  418411:\t48 89 ce             \tmov    %rcx,%rsi\n  418414:\t48 89 c7             \tmov    %rax,%rdi\n  418417:\te8 4f fb ff ff       \tcallq  417f6b <fixup_internal_symbol>\n  41841c:\t83 6d ec 01          \tsubl   $0x1,-0x14(%rbp)\n  418420:\t90                   \tnop\n  418421:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  418425:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  418429:\t8b 50 28             \tmov    0x28(%rax),%edx\n  41842c:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  41842f:\t39 c2                \tcmp    %eax,%edx\n  418431:\t0f 87 24 ff ff ff    \tja     41835b <commit_tree+0xf8>\n  418437:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41843b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  41843f:\t48 85 c0             \ttest   %rax,%rax\n  418442:\t74 46                \tje     41848a <commit_tree+0x227>\n  418444:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  418448:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  41844c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  418450:\t48 85 c0             \ttest   %rax,%rax\n  418453:\t74 35                \tje     41848a <commit_tree+0x227>\n  418455:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  418459:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  41845d:\t4c 8b 48 10          \tmov    0x10(%rax),%r9\n  418461:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  418465:\t8b 40 28             \tmov    0x28(%rax),%eax\n  418468:\t89 c7                \tmov    %eax,%edi\n  41846a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41846e:\t48 8b 70 30          \tmov    0x30(%rax),%rsi\n  418472:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  418476:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41847a:\t49 89 d0             \tmov    %rdx,%r8\n  41847d:\tb9 98 00 00 00       \tmov    $0x98,%ecx\n  418482:\t89 fa                \tmov    %edi,%edx\n  418484:\t48 89 c7             \tmov    %rax,%rdi\n  418487:\t41 ff d1             \tcallq  *%r9\n  41848a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  41848e:\t0f b6 40 54          \tmovzbl 0x54(%rax),%eax\n  418492:\t84 c0                \ttest   %al,%al\n  418494:\t74 24                \tje     4184ba <commit_tree+0x257>\n  418496:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41849a:\t8b 40 58             \tmov    0x58(%rax),%eax\n  41849d:\t85 c0                \ttest   %eax,%eax\n  41849f:\t75 19                \tjne    4184ba <commit_tree+0x257>\n  4184a1:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  4184a5:\t75 13                \tjne    4184ba <commit_tree+0x257>\n  4184a7:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  4184ab:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4184af:\t48 89 d6             \tmov    %rdx,%rsi\n  4184b2:\t48 89 c7             \tmov    %rax,%rdi\n  4184b5:\te8 7c f5 ff ff       \tcallq  417a36 <free_ParseTreeBelow>\n  4184ba:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4184be:\t48 83 c4 28          \tadd    $0x28,%rsp\n  4184c2:\t5b                   \tpop    %rbx\n  4184c3:\t5d                   \tpop    %rbp\n  4184c4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall commit_tree(__int64 a1, __int64 a2) {\n  _BOOL4 v3;\n  _QWORD *v4;\n  int v5;\n  int v6;\n  __int64 v7;\n  _BOOL4 v8;\n  _BOOL4 v9;\n  int i;\n  v7 = a2;\n  if (*(_BYTE *)(a2 + Number))\n    return a2;\n  if (*(_QWORD *)(a2 + Number) != *(_QWORD *)(a2 + Number) ||\n      !*(_QWORD *)(a2 + Number) ||\n      !*(_QWORD *)(*(_QWORD *)(a2 + Number) + Number L)) {\n    *(_BYTE *)(a2 + Number) = Number;\n  }\n  if (*(_QWORD *)(a2 + Number))\n    v7 = resolve_ambiguities(a1, (_QWORD *)a2);\n  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L) +\n                   Number L * *(int *)(v7 + Number)) == Number;\n  v3 = !*(_DWORD *)(a1 + Number) &&\n       *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L) +\n                   Number L * *(int *)(v7 + Number)) == Number;\n  v9 = v3;\n  for (i = Number; *(_DWORD *)(v7 + Number) > (unsigned int)i; ++i) {\n    v4 = (_QWORD *)(*(_QWORD *)(v7 + Number) + Number L * i);\n    *v4 = commit_tree(a1, *v4);\n    if (v9 &&\n        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L) +\n                    Number L * *(int *)(*(_QWORD *)(Number L * i +\n                                                    *(_QWORD *)(v7 + Number)) +\n                                        Number L)) == Number) {\n      fixup_internal_symbol(a1, v7, i--, v7, v5, v6);\n    }\n  }\n  if (*(_QWORD *)(v7 + Number) &&\n      *(_QWORD *)(*(_QWORD *)(v7 + Number) + Number L))\n    (*(void(__fastcall **)(__int64, _QWORD, _QWORD, __int64, __int64))(\n        *(_QWORD *)(v7 + Number) + Number L))(v7, *(_QWORD *)(v7 + Number),\n                                              *(unsigned int *)(v7 + Number),\n                                              Number L, a1);\n  if (*(_BYTE *)(v7 + Number) && !*(_DWORD *)(a1 + Number) && !v8)\n    free_ParseTreeBelow(a1, v7);\n  return v7;\n}", "code_t": "PNode_0 *__cdecl commit_tree(Parser_0 *p, PNode_0 *pn) {\n  _BOOL4 v3;\n  PNode_0 **v4;\n  PNode_0 *pna;\n  int internal;\n  int fixup;\n  int i;\n  pna = pn;\n  if (pn->evaluated)\n    return pn;\n  if (pn->parse_node.start_loc.s != pn->parse_node.end || !pn->reduction ||\n      !pn->reduction->final_code)\n    pn->evaluated = Number;\n  if (pn->ambiguities)\n    pna = resolve_ambiguities(p, pn);\n  internal = p->t->symbols[pna->parse_node.symbol].kind == Number;\n  v3 = !p->user.dont_fixup_internal_productions &&\n       p->t->symbols[pna->parse_node.symbol].kind == Number;\n  fixup = v3;\n  for (i = Number; pna->children.n > i; ++i) {\n    v4 = &pna->children.v[i];\n    *v4 = commit_tree(p, *v4);\n    if (fixup &&\n        p->t->symbols[pna->children.v[i]->parse_node.symbol].kind == Number)\n      fixup_internal_symbol(p, pna, i--);\n  }\n  if (pna->reduction && pna->reduction->final_code)\n    pna->reduction->final_code(pna, (void **)pna->children.v, pna->children.n,\n                               Number, &p->user);\n  if (pna->evaluated && !p->user.save_parse_tree && !internal)\n    free_ParseTreeBelow(p, pna);\n  return pna;\n}", "var": [], "body_in_train": false}, {"repo_owner": "lolo32", "repo_name": "mupdf-mirror", "path": "lolo32/mupdf-mirror/0542c2d9046ac8dd641070dad3827c18a3386323896d39f480d9faada1eb4bf0", "path_in_repo": "lolo32/mupdf-mirror//build/debug/pdf/pdf-object.o", "objdump": "000000000000177a <pdf_array_insert>:\n    177a:\t55                   \tpush   %rbp\n    177b:\t48 89 e5             \tmov    %rsp,%rbp\n    177e:\t53                   \tpush   %rbx\n    177f:\t48 83 ec 28          \tsub    $0x28,%rsp\n    1783:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    1787:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n    178b:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n    178e:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    1793:\t74 1c                \tje     17b1 <pdf_array_insert+0x37>\n    1795:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1799:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n    179d:\t3c 72                \tcmp    $0x72,%al\n    179f:\t75 10                \tjne    17b1 <pdf_array_insert+0x37>\n    17a1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    17a5:\t48 89 c7             \tmov    %rax,%rdi\n    17a8:\te8 00 00 00 00       \tcallq  17ad <pdf_array_insert+0x33>\n    17ad:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    17b1:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    17b6:\t0f 84 3e 01 00 00    \tje     18fa <pdf_array_insert+0x180>\n    17bc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    17c0:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n    17c4:\t3c 61                \tcmp    $0x61,%al\n    17c6:\t74 35                \tje     17fd <pdf_array_insert+0x83>\n    17c8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    17cc:\t48 89 c7             \tmov    %rax,%rdi\n    17cf:\te8 4f f6 ff ff       \tcallq  e23 <pdf_objkindstr>\n    17d4:\t48 89 c2             \tmov    %rax,%rdx\n    17d7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    17db:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    17df:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    17e6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    17eb:\t48 89 c7             \tmov    %rax,%rdi\n    17ee:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    17f3:\te8 00 00 00 00       \tcallq  17f8 <pdf_array_insert+0x7e>\n    17f8:\te9 e8 00 00 00       \tjmpq   18e5 <pdf_array_insert+0x16b>\n    17fd:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    1801:\t78 0c                \tjs     180f <pdf_array_insert+0x95>\n    1803:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1807:\t8b 40 18             \tmov    0x18(%rax),%eax\n    180a:\t39 45 dc             \tcmp    %eax,-0x24(%rbp)\n    180d:\t7e 35                \tjle    1844 <pdf_array_insert+0xca>\n    180f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1813:\t8b 48 18             \tmov    0x18(%rax),%ecx\n    1816:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    181a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    181e:\t48 8b 80 98 00 00 00 \tmov    0x98(%rax),%rax\n    1825:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    1828:\t41 89 c8             \tmov    %ecx,%r8d\n    182b:\t89 d1                \tmov    %edx,%ecx\n    182d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1832:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    1837:\t48 89 c7             \tmov    %rax,%rdi\n    183a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    183f:\te8 00 00 00 00       \tcallq  1844 <pdf_array_insert+0xca>\n    1844:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1848:\t8b 50 18             \tmov    0x18(%rax),%edx\n    184b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    184f:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    1852:\t39 c2                \tcmp    %eax,%edx\n    1854:\t7c 0c                \tjl     1862 <pdf_array_insert+0xe8>\n    1856:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    185a:\t48 89 c7             \tmov    %rax,%rdi\n    185d:\te8 49 f8 ff ff       \tcallq  10ab <pdf_array_grow>\n    1862:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1866:\t8b 40 18             \tmov    0x18(%rax),%eax\n    1869:\t2b 45 dc             \tsub    -0x24(%rbp),%eax\n    186c:\t48 98                \tcltq   \n    186e:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    1875:\t00 \n    1876:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    187a:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    187e:\t8b 4d dc             \tmov    -0x24(%rbp),%ecx\n    1881:\t48 63 c9             \tmovslq %ecx,%rcx\n    1884:\t48 c1 e1 03          \tshl    $0x3,%rcx\n    1888:\t48 01 c1             \tadd    %rax,%rcx\n    188b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    188f:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    1893:\t8b 75 dc             \tmov    -0x24(%rbp),%esi\n    1896:\t48 63 f6             \tmovslq %esi,%rsi\n    1899:\t48 83 c6 01          \tadd    $0x1,%rsi\n    189d:\t48 c1 e6 03          \tshl    $0x3,%rsi\n    18a1:\t48 01 f0             \tadd    %rsi,%rax\n    18a4:\t48 89 ce             \tmov    %rcx,%rsi\n    18a7:\t48 89 c7             \tmov    %rax,%rdi\n    18aa:\te8 00 00 00 00       \tcallq  18af <pdf_array_insert+0x135>\n    18af:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18b3:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n    18b7:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n    18ba:\t48 63 d2             \tmovslq %edx,%rdx\n    18bd:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    18c1:\t48 8d 1c 10          \tlea    (%rax,%rdx,1),%rbx\n    18c5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    18c9:\t48 89 c7             \tmov    %rax,%rdi\n    18cc:\te8 00 00 00 00       \tcallq  18d1 <pdf_array_insert+0x157>\n    18d1:\t48 89 03             \tmov    %rax,(%rbx)\n    18d4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18d8:\t8b 40 18             \tmov    0x18(%rax),%eax\n    18db:\t8d 50 01             \tlea    0x1(%rax),%edx\n    18de:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18e2:\t89 50 18             \tmov    %edx,0x18(%rax)\n    18e5:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    18e9:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    18ed:\t48 89 d6             \tmov    %rdx,%rsi\n    18f0:\t48 89 c7             \tmov    %rax,%rdi\n    18f3:\te8 13 fa ff ff       \tcallq  130b <object_altered>\n    18f8:\teb 01                \tjmp    18fb <pdf_array_insert+0x181>\n    18fa:\t90                   \tnop\n    18fb:\t48 83 c4 28          \tadd    $0x28,%rsp\n    18ff:\t5b                   \tpop    %rbx\n    1900:\t5d                   \tpop    %rbp\n    1901:\tc3                   \tretq   ", "code_s": "void __fastcall pdf_array_insert(__int64 a1, _DWORD *a2, int a3) {\n  const char *v3;\n  _QWORD *v4;\n  __int64 v6;\n  v6 = a1;\n  if (a1 && *(_BYTE *)(a1 + Number) == Number)\n    v6 = pdf_resolve_indirect(a1);\n  if (v6) {\n    if (*(_BYTE *)(v6 + Number) == Number) {\n      if (a3 < Number || a3 > *(_DWORD *)(v6 + Number))\n        fz_throw(*(_QWORD *)(*(_QWORD *)(v6 + Number) + Number L), Number L,\n                 String, (unsigned int)a3, *(unsigned int *)(v6 + Number));\n      if (*(_DWORD *)(v6 + Number) >= *(_DWORD *)(v6 + Number))\n        pdf_array_grow(v6);\n      memmove((void *)(Number * (a3 + Number L) + *(_QWORD *)(v6 + Number)),\n              (const void *)(*(_QWORD *)(v6 + Number) + Number L * a3),\n              Number L * (*(_DWORD *)(v6 + Number) - a3));\n      v4 = (_QWORD *)(*(_QWORD *)(v6 + Number) + Number L * a3);\n      *v4 = pdf_keep_obj(a2);\n      ++*(_DWORD *)(v6 + Number);\n    } else {\n      v3 = pdf_objkindstr(v6);\n      fz_warn(*(_QWORD *)(*(_QWORD *)(v6 + Number) + Number L), String, v3);\n    }\n    object_altered(v6, (__int64)a2);\n  }\n}", "code_t": "void __cdecl pdf_array_insert(pdf_obj *obj, pdf_obj *item, int i) {\n  char *v3;\n  pdf_obj **v4;\n  pdf_obj *obja;\n  obja = obj;\n  if (obj && obj->kind == Number)\n    obja = (pdf_obj *)pdf_resolve_indirect(obj);\n  if (obja) {\n    if (obja->kind == Number) {\n      if (i < Number || i > obja->u.b)\n        fz_throw(obja->doc->ctx, Number L, String, (unsigned int)i,\n                 (unsigned int)obja->u.b);\n      if (obja->u.b >= obja->u.a.cap)\n        pdf_array_grow(obja);\n      memmove(&obja->u.a.items[i + Number], &obja->u.a.items[i],\n              Number L * (obja->u.b - i));\n      v4 = &obja->u.a.items[i];\n      *v4 = pdf_keep_obj(item);\n      ++obja->u.b;\n    } else {\n      v3 = pdf_objkindstr(obja);\n      fz_warn(obja->doc->ctx, String, v3);\n    }\n    object_altered(obja, item);\n  }\n}", "var": [], "body_in_train": false}, {"repo_owner": "MegabytePhreak", "repo_name": "qemu-mcf5307", "path": "MegabytePhreak/qemu-mcf5307/cefc662fe1c461e94554f57ae3fa64d1e48d8fe4cc39b2784e5d7922ff89dbf5", "path_in_repo": "MegabytePhreak/qemu-mcf5307//net/socket.o", "objdump": "00000000000007a1 <net_socket_cleanup>:\n     7a1:\t55                   \tpush   %rbp\n     7a2:\t48 89 e5             \tmov    %rsp,%rbp\n     7a5:\t48 83 ec 30          \tsub    $0x30,%rsp\n     7a9:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n     7ad:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     7b4:\t00 00 \n     7b6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     7ba:\t31 c0                \txor    %eax,%eax\n     7bc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7c0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     7c4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     7c8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     7cc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7d0:\t8b 80 50 01 00 00    \tmov    0x150(%rax),%eax\n     7d6:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     7db:\tba 00 00 00 00       \tmov    $0x0,%edx\n     7e0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     7e5:\t89 c7                \tmov    %eax,%edi\n     7e7:\te8 00 00 00 00       \tcallq  7ec <net_socket_cleanup+0x4b>\n     7ec:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     7f0:\t8b 80 50 01 00 00    \tmov    0x150(%rax),%eax\n     7f6:\t89 c7                \tmov    %eax,%edi\n     7f8:\te8 00 00 00 00       \tcallq  7fd <net_socket_cleanup+0x5c>\n     7fd:\t90                   \tnop\n     7fe:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     802:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     809:\t00 00 \n     80b:\t74 05                \tje     812 <net_socket_cleanup+0x71>\n     80d:\te8 00 00 00 00       \tcallq  812 <net_socket_cleanup+0x71>\n     812:\tc9                   \tleaveq \n     813:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall net_socket_cleanup(__int64 a1) {\n  unsigned __int64 v2;\n  v2 = __readfsqword(Number);\n  qemu_set_fd_handler(*(unsigned int *)(a1 + Number), Number L, Number L,\n                      Number L);\n  close(*(_DWORD *)(a1 + Number));\n  return __readfsqword(Number) ^ v2;\n}", "code_t": "void __cdecl net_socket_cleanup(VLANClientState_0 *nc) {\n  qemu_set_fd_handler(LODWORD(nc[Number].info), Number L, Number L, Number L);\n  close((int)nc[Number].info);\n}", "var": [], "body_in_train": true}, {"repo_owner": "raziebe", "repo_name": "hyplet-virt", "path": "raziebe/hyplet-virt/038c58581d3526cc23a91c34736645277c87297eee99395ac81232bf6f501939", "path_in_repo": "raziebe/hyplet-virt/tools/testing/selftests/x86/mpx-mini-test_64", "objdump": "", "code_s": "void perror(const char *s) { perror(s); }", "code_t": "void perror(const char *s) { perror(s); }", "var": [], "body_in_train": true}, {"repo_owner": "TOSanthony", "repo_name": "kernel", "path": "TOSanthony/kernel/1962785d0cd8be5c5dd2f0472c727c67a262edc88b49627d8e84fe495dedc0fb", "path_in_repo": "TOSanthony/kernel/tools/perf/util/evsel.o", "objdump": "0000000000000263 <PTR_ERR>:\n     263:\t55                   \tpush   %rbp\n     264:\t48 89 e5             \tmov    %rsp,%rbp\n     267:\t48 83 ec 20          \tsub    $0x20,%rsp\n     26b:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     26f:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     276:\t00 00 \n     278:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     27c:\t31 c0                \txor    %eax,%eax\n     27e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     282:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     286:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n     28d:\t00 00 \n     28f:\t74 05                \tje     296 <PTR_ERR+0x33>\n     291:\te8 00 00 00 00       \tcallq  296 <PTR_ERR+0x33>\n     296:\tc9                   \tleaveq \n     297:\tc3                   \tretq   ", "code_s": "__int64 __fastcall PTR_ERR(__int64 a1) { return a1; }", "code_t": "__int64 __cdecl PTR_ERR(const void *ptr) { return (__int64)ptr; }", "var": [], "body_in_train": true}, {"repo_owner": "kaber", "repo_name": "net-next-netlink-mmap", "path": "kaber/net-next-netlink-mmap/1cc8894e70453df244e13fe404d6115e438f24bf77c73bdb07734a4c83463d98", "path_in_repo": "kaber/net-next-netlink-mmap/tools/perf/builtin-timechart.o", "objdump": "000000000000160e <draw_cpu_usage>:\n    160e:\t55                   \tpush   %rbp\n    160f:\t48 89 e5             \tmov    %rsp,%rbp\n    1612:\t48 83 ec 20          \tsub    $0x20,%rsp\n    1616:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    161d:\t00 00 \n    161f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1623:\t31 c0                \txor    %eax,%eax\n    1625:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 162c <draw_cpu_usage+0x1e>\n    162c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1630:\te9 85 00 00 00       \tjmpq   16ba <draw_cpu_usage+0xac>\n    1635:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1639:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    163d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1641:\teb 65                \tjmp    16a8 <draw_cpu_usage+0x9a>\n    1643:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1647:\t48 8b 40 40          \tmov    0x40(%rax),%rax\n    164b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    164f:\teb 45                \tjmp    1696 <draw_cpu_usage+0x88>\n    1651:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1655:\t8b 40 18             \tmov    0x18(%rax),%eax\n    1658:\t83 f8 01             \tcmp    $0x1,%eax\n    165b:\t75 2e                \tjne    168b <draw_cpu_usage+0x7d>\n    165d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1661:\t48 8b 48 38          \tmov    0x38(%rax),%rcx\n    1665:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1669:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    166d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1671:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n    1675:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1679:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    167c:\t49 89 c8             \tmov    %rcx,%r8\n    167f:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1684:\t89 c7                \tmov    %eax,%edi\n    1686:\te8 00 00 00 00       \tcallq  168b <draw_cpu_usage+0x7d>\n    168b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    168f:\t48 8b 00             \tmov    (%rax),%rax\n    1692:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    1696:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n    169b:\t75 b4                \tjne    1651 <draw_cpu_usage+0x43>\n    169d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    16a1:\t48 8b 00             \tmov    (%rax),%rax\n    16a4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    16a8:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n    16ad:\t75 94                \tjne    1643 <draw_cpu_usage+0x35>\n    16af:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    16b3:\t48 8b 00             \tmov    (%rax),%rax\n    16b6:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    16ba:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    16bf:\t0f 85 70 ff ff ff    \tjne    1635 <draw_cpu_usage+0x27>\n    16c5:\t90                   \tnop\n    16c6:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    16ca:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    16d1:\t00 00 \n    16d3:\t74 05                \tje     16da <draw_cpu_usage+0xcc>\n    16d5:\te8 00 00 00 00       \tcallq  16da <draw_cpu_usage+0xcc>\n    16da:\tc9                   \tleaveq \n    16db:\tc3                   \tretq   ", "code_s": "unsigned __int64 draw_cpu_usage() {\n  _QWORD *i;\n  _QWORD *j;\n  __int64 *k;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  for (i = (_QWORD *)all_data; i; i = (_QWORD *)*i) {\n    for (j = (_QWORD *)i[Number]; j; j = (_QWORD *)*j) {\n      for (k = (__int64 *)j[Number]; k; k = (__int64 *)*k) {\n        if (*((_DWORD *)k + Number) == Number)\n          svg_process(*((unsigned int *)k + Number), k[Number], k[Number],\n                      String, j[Number]);\n      }\n    }\n  }\n  return __readfsqword(Number) ^ v4;\n}", "code_t": "void __cdecl draw_cpu_usage() {\n  per_pid *p;\n  per_pidcomm *c;\n  cpu_sample *sample;\n  for (p = all_data; p; p = p->next) {\n    for (c = p->all; c; c = c->next) {\n      for (sample = c->samples; sample; sample = sample->next) {\n        if (sample->type == Number)\n          svg_process((unsigned int)sample->cpu, sample->start_time,\n                      sample->end_time, String, c->comm);\n      }\n    }\n  }\n}", "var": [], "body_in_train": true}, {"repo_owner": "jhhung", "repo_name": "SLAM-Seq-Aligner", "path": "jhhung/SLAM-Seq-Aligner/0764e693164a3a57c210242f1f8a061c130acf312205eea67713070ba603d181", "path_in_repo": "jhhung/SLAM-Seq-Aligner/tmp/krb5-1.13.1/src/kadmin/server/ipropd_svc.o", "objdump": "0000000000000135 <buf_to_string>:\n     135:\t55                   \tpush   %rbp\n     136:\t48 89 e5             \tmov    %rsp,%rbp\n     139:\t48 83 ec 20          \tsub    $0x20,%rsp\n     13d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     141:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     145:\t48 8b 00             \tmov    (%rax),%rax\n     148:\t48 83 c0 01          \tadd    $0x1,%rax\n     14c:\t48 89 c7             \tmov    %rax,%rdi\n     14f:\te8 00 00 00 00       \tcallq  154 <buf_to_string+0x1f>\n     154:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     158:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     15d:\t74 2f                \tje     18e <buf_to_string+0x59>\n     15f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     163:\t48 8b 10             \tmov    (%rax),%rdx\n     166:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     16a:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n     16e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     172:\t48 89 ce             \tmov    %rcx,%rsi\n     175:\t48 89 c7             \tmov    %rax,%rdi\n     178:\te8 00 00 00 00       \tcallq  17d <buf_to_string+0x48>\n     17d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     181:\t48 8b 10             \tmov    (%rax),%rdx\n     184:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     188:\t48 01 d0             \tadd    %rdx,%rax\n     18b:\tc6 00 00             \tmovb   $0x0,(%rax)\n     18e:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n     192:\t48 8d 45 f4          \tlea    -0xc(%rbp),%rax\n     196:\t48 89 d6             \tmov    %rdx,%rsi\n     199:\t48 89 c7             \tmov    %rax,%rdi\n     19c:\te8 00 00 00 00       \tcallq  1a1 <buf_to_string+0x6c>\n     1a1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     1a5:\tc9                   \tleaveq \n     1a6:\tc3                   \tretq   ", "code_s": "void *__fastcall buf_to_string(__int64 a1) {\n  char v2[Number];\n  void *dest;\n  dest = malloc(*(_QWORD *)a1 + Number L);\n  if (dest) {\n    memcpy(dest, *(const void **)(a1 + Number), *(_QWORD *)a1);\n    *((_BYTE *)dest + *(_QWORD *)a1) = Number;\n  }\n  gss_release_buffer(v2, a1);\n  return dest;\n}", "code_t": "char *__cdecl buf_to_string(gss_buffer_desc *b) {\n  OM_uint32 min_stat;\n  char *s;\n  s = (char *)malloc(b->length + Number);\n  if (s) {\n    memcpy(s, b->value, b->length);\n    s[b->length] = Number;\n  }\n  gss_release_buffer(&min_stat, b);\n  return s;\n}", "var": [], "body_in_train": false}, {"repo_owner": "I-am-wzs", "repo_name": "lichee-2017", "path": "I-am-wzs/lichee-2017/84b832356da09cd7dbdb7cd9ccecaaaab9f4c0981bb61fb24cd27270dcd79830", "path_in_repo": "I-am-wzs/lichee-2017/linux-3.4/tools/perf/util/help.o", "objdump": "0000000000000862 <list_commands_in_dir>:\n     862:\t55                   \tpush   %rbp\n     863:\t48 89 e5             \tmov    %rsp,%rbp\n     866:\t48 83 ec 60          \tsub    $0x60,%rsp\n     86a:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     86e:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     872:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n     876:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     87d:\t00 00 \n     87f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     883:\t31 c0                \txor    %eax,%eax\n     885:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     889:\t48 89 c7             \tmov    %rax,%rdi\n     88c:\te8 00 00 00 00       \tcallq  891 <list_commands_in_dir+0x2f>\n     891:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     895:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n     89c:\t00 \n     89d:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     8a4:\t00 \n     8a5:\t48 c7 45 f0 00 00 00 \tmovq   $0x0,-0x10(%rbp)\n     8ac:\t00 \n     8ad:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n     8b2:\t0f 84 35 01 00 00    \tje     9ed <list_commands_in_dir+0x18b>\n     8b8:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n     8bd:\t75 08                \tjne    8c7 <list_commands_in_dir+0x65>\n     8bf:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n     8c6:\t00 \n     8c7:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     8cb:\t48 89 c7             \tmov    %rax,%rdi\n     8ce:\te8 00 00 00 00       \tcallq  8d3 <list_commands_in_dir+0x71>\n     8d3:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n     8d6:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n     8da:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     8de:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     8e3:\t48 89 c7             \tmov    %rax,%rdi\n     8e6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     8eb:\te8 00 00 00 00       \tcallq  8f0 <list_commands_in_dir+0x8e>\n     8f0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     8f4:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n     8f7:\te9 bc 00 00 00       \tjmpq   9b8 <list_commands_in_dir+0x156>\n     8fc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     900:\t48 8d 50 13          \tlea    0x13(%rax),%rdx\n     904:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     908:\t48 89 c6             \tmov    %rax,%rsi\n     90b:\t48 89 d7             \tmov    %rdx,%rdi\n     90e:\te8 00 00 00 00       \tcallq  913 <list_commands_in_dir+0xb1>\n     913:\t85 c0                \ttest   %eax,%eax\n     915:\t74 05                \tje     91c <list_commands_in_dir+0xba>\n     917:\te9 9c 00 00 00       \tjmpq   9b8 <list_commands_in_dir+0x156>\n     91c:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     91f:\t48 63 d0             \tmovslq %eax,%rdx\n     922:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     926:\t48 89 d6             \tmov    %rdx,%rsi\n     929:\t48 89 c7             \tmov    %rax,%rdi\n     92c:\te8 64 f7 ff ff       \tcallq  95 <strbuf_setlen>\n     931:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     935:\t48 8d 50 13          \tlea    0x13(%rax),%rdx\n     939:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     93d:\t48 89 d6             \tmov    %rdx,%rsi\n     940:\t48 89 c7             \tmov    %rax,%rdi\n     943:\te8 e4 f7 ff ff       \tcallq  12c <strbuf_addstr>\n     948:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     94c:\t48 89 c7             \tmov    %rax,%rdi\n     94f:\te8 98 fe ff ff       \tcallq  7ec <is_executable>\n     954:\t85 c0                \ttest   %eax,%eax\n     956:\t75 02                \tjne    95a <list_commands_in_dir+0xf8>\n     958:\teb 5e                \tjmp    9b8 <list_commands_in_dir+0x156>\n     95a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     95e:\t48 83 c0 13          \tadd    $0x13,%rax\n     962:\t48 89 c7             \tmov    %rax,%rdi\n     965:\te8 00 00 00 00       \tcallq  96a <list_commands_in_dir+0x108>\n     96a:\t89 c2                \tmov    %eax,%edx\n     96c:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     96f:\t29 c2                \tsub    %eax,%edx\n     971:\t89 d0                \tmov    %edx,%eax\n     973:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n     976:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     97a:\t48 83 c0 13          \tadd    $0x13,%rax\n     97e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     983:\t48 89 c7             \tmov    %rax,%rdi\n     986:\te8 75 f6 ff ff       \tcallq  0 <has_extension>\n     98b:\t85 c0                \ttest   %eax,%eax\n     98d:\t74 04                \tje     993 <list_commands_in_dir+0x131>\n     98f:\t83 6d c4 04          \tsubl   $0x4,-0x3c(%rbp)\n     993:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n     996:\t48 63 d0             \tmovslq %eax,%rdx\n     999:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     99d:\t48 8d 48 13          \tlea    0x13(%rax),%rcx\n     9a1:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n     9a4:\t48 98                \tcltq   \n     9a6:\t48 01 c1             \tadd    %rax,%rcx\n     9a9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     9ad:\t48 89 ce             \tmov    %rcx,%rsi\n     9b0:\t48 89 c7             \tmov    %rax,%rdi\n     9b3:\te8 00 00 00 00       \tcallq  9b8 <list_commands_in_dir+0x156>\n     9b8:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     9bc:\t48 89 c7             \tmov    %rax,%rdi\n     9bf:\te8 00 00 00 00       \tcallq  9c4 <list_commands_in_dir+0x162>\n     9c4:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     9c8:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n     9cd:\t0f 85 29 ff ff ff    \tjne    8fc <list_commands_in_dir+0x9a>\n     9d3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     9d7:\t48 89 c7             \tmov    %rax,%rdi\n     9da:\te8 00 00 00 00       \tcallq  9df <list_commands_in_dir+0x17d>\n     9df:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     9e3:\t48 89 c7             \tmov    %rax,%rdi\n     9e6:\te8 00 00 00 00       \tcallq  9eb <list_commands_in_dir+0x189>\n     9eb:\teb 01                \tjmp    9ee <list_commands_in_dir+0x18c>\n     9ed:\t90                   \tnop\n     9ee:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     9f2:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n     9f9:\t00 00 \n     9fb:\t74 05                \tje     a02 <list_commands_in_dir+0x1a0>\n     9fd:\te8 00 00 00 00       \tcallq  a02 <list_commands_in_dir+0x1a0>\n     a02:\tc9                   \tleaveq \n     a03:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall list_commands_in_dir(unsigned __int64 *a1,\n                                                 const char *a2,\n                                                 const char *a3) {\n  int v5;\n  int v6;\n  int v7;\n  DIR *dirp;\n  struct dirent64 *v9;\n  unsigned __int64 <span class=\"supfact\">v10</span>;\n  __int64 v11;\n  const char *v12;\n  unsigned __int64 v13;\n  v13 = __readfsqword(Number);\n  dirp = opendir(a2);\n  <span class=\"supfact\">v10</span> = Number L;\n  v11 = Number L;\n  v12 = (const char *)&strbuf_slopbuf;\n  if (dirp) {\n    if (!a3)\n      a3 = String;\n    v6 = strlen(a3);\n    strbuf_addf(&<span class=\"supfact\">v10</span>, String, a2);\n    v7 = v11;\n    while (Number) {\n      v9 = readdir64(dirp);\n      if (!v9)\n        break;\n      if (!(unsigned int)prefixcmp(v9->d_name, a3)) {\n        strbuf_setlen(&<span class=\"supfact\">v10</span>, v7);\n        strbuf_addstr((__int64)&<span class=\"supfact\">v10</span>, v9->d_name);\n        if ((unsigned int)is_executable(v12)) {\n          v5 = strlen(v9->d_name) - v6;\n          if (has_extension(v9->d_name, String))\n            v5 -= Number;\n          add_cmdname(a1, &v9->d_name[v6], v5);\n        }\n      }\n    }\n    closedir(dirp);\n    strbuf_release(&<span class=\"supfact\">v10</span>);\n  }\n  return __readfsqword(Number) ^ v13;\n}", "code_t": "void __cdecl list_commands_in_dir(cmdnames *cmds, const char *path,\n                                  const char *prefix) {\n  int entlen;\n  int prefix_len;\n  int len;\n  DIR *dir;\n  dirent *de;\n  strbuf <span class=\"supfact\">buf</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  dir = opendir(path);\n  <span class=\"supfact\">buf</span>.alloc = Number L;\n  <span class=\"supfact\">buf</span>.len = Number L;\n  <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span> = (char *)&strbuf_slopbuf;\n  if (dir) {\n    if (!prefix)\n      prefix = String;\n    prefix_len = strlen(prefix);\n    strbuf_addf(&<span class=\"supfact\">buf</span>, String, path);\n    len = <span class=\"supfact\">buf</span>.len;\n    while (Number) {\n      de = (dirent *)readdir64(dir);\n      if (!de)\n        break;\n      if (!(unsigned int)prefixcmp(de->d_name, prefix)) {\n        strbuf_setlen(&<span class=\"supfact\">buf</span>, len);\n        strbuf_addstr(&<span class=\"supfact\">buf</span>, de->d_name);\n        if (is_executable(<span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>)) {\n          entlen = strlen(de->d_name) - prefix_len;\n          if (has_extension(de->d_name, String))\n            entlen -= Number;\n          add_cmdname(cmds, &de->d_name[prefix_len], entlen);\n        }\n      }\n    }\n    closedir(dir);\n    strbuf_release(&<span class=\"supfact\">buf</span>);\n  }\n}", "var": [{"name": "v10", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "pred_name": "buf", "ref_name": "buf", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": true}, {"repo_owner": "antmicro", "repo_name": "tx2-deep-learning-kit-bsp", "path": "antmicro/tx2-deep-learning-kit-bsp/a1e93bf48bda1ba4595297c4afcd996d744a7cbce9ccee41cd0afd0b75c7530b", "path_in_repo": "antmicro/tx2-deep-learning-kit-bsp/tx2-baseboard-module-install/resources/linux-headers-4.4.38-antmicro/tools/perf/ui/browsers/libperf-in.o", "objdump": "0000000000004dec <callchain_node__set_folding>:\n    4dec:\t55                   \tpush   %rbp\n    4ded:\t48 89 e5             \tmov    %rsp,%rbp\n    4df0:\t48 83 ec 40          \tsub    $0x40,%rsp\n    4df4:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    4df8:\t89 f0                \tmov    %esi,%eax\n    4dfa:\t88 45 c4             \tmov    %al,-0x3c(%rbp)\n    4dfd:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    4e04:\t00 00 \n    4e06:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    4e0a:\t31 c0                \txor    %eax,%eax\n    4e0c:\tc6 45 db 00          \tmovb   $0x0,-0x25(%rbp)\n    4e10:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    4e17:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4e1b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    4e1f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    4e23:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4e27:\t48 83 e8 28          \tsub    $0x28,%rax\n    4e2b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4e2f:\teb 39                \tjmp    4e6a <callchain_node__set_folding+0x7e>\n    4e31:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n    4e35:\t0f b6 55 c4          \tmovzbl -0x3c(%rbp),%edx\n    4e39:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    4e3d:\t89 d6                \tmov    %edx,%esi\n    4e3f:\t48 89 c7             \tmov    %rax,%rdi\n    4e42:\te8 31 f6 ff ff       \tcallq  4478 <callchain_list__set_folding>\n    4e47:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    4e4b:\t0f b6 40 19          \tmovzbl 0x19(%rax),%eax\n    4e4f:\t88 45 db             \tmov    %al,-0x25(%rbp)\n    4e52:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    4e56:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    4e5a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    4e5e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    4e62:\t48 83 e8 28          \tsub    $0x28,%rax\n    4e66:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    4e6a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    4e6e:\t48 8d 50 28          \tlea    0x28(%rax),%rdx\n    4e72:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4e76:\t48 83 c0 08          \tadd    $0x8,%rax\n    4e7a:\t48 39 c2             \tcmp    %rax,%rdx\n    4e7d:\t75 b2                \tjne    4e31 <callchain_node__set_folding+0x45>\n    4e7f:\t80 7d db 00          \tcmpb   $0x0,-0x25(%rbp)\n    4e83:\t74 15                \tje     4e9a <callchain_node__set_folding+0xae>\n    4e85:\t0f b6 55 c4          \tmovzbl -0x3c(%rbp),%edx\n    4e89:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    4e8d:\t89 d6                \tmov    %edx,%esi\n    4e8f:\t48 89 c7             \tmov    %rax,%rdi\n    4e92:\te8 46 fe ff ff       \tcallq  4cdd <callchain_node__set_folding_rb_tree>\n    4e97:\t01 45 dc             \tadd    %eax,-0x24(%rbp)\n    4e9a:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    4e9d:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    4ea1:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    4ea8:\t00 00 \n    4eaa:\t74 05                \tje     4eb1 <callchain_node__set_folding+0xc5>\n    4eac:\te8 00 00 00 00       \tcallq  4eb1 <callchain_node__set_folding+0xc5>\n    4eb1:\tc9                   \tleaveq \n    4eb2:\tc3                   \tretq   ", "code_s": "__int64 __fastcall callchain_node__set_folding(__int64 a1, char a2) {\n  char v3;\n  unsigned int v4;\n  __int64 i;\n  v3 = Number;\n  v4 = Number;\n  for (i = *(_QWORD *)(a1 + Number) - Number L; i + Number != a1 + Number;\n       i = *(_QWORD *)(i + Number) - Number L) {\n    ++v4;\n    callchain_list__set_folding(i, a2);\n    v3 = *(_BYTE *)(i + Number);\n  }\n  if (v3)\n    v4 += callchain_node__set_folding_rb_tree(a1, a2);\n  return v4;\n}", "code_t": "int __cdecl callchain_node__set_folding(callchain_node *node, bool unfold) {\n  bool has_children;\n  int n;\n  callchain_list *chain;\n  has_children = Number;\n  n = Number;\n  for (chain = (callchain_list *)&node->val.next[Number].prev;\n       &chain->list != &node->val;\n       chain = (callchain_list *)&chain->list.next[Number].prev) {\n    ++n;\n    callchain_list__set_folding(chain, unfold);\n    has_children = chain->_anon_0.has_children;\n  }\n  if (has_children)\n    n += callchain_node__set_folding_rb_tree(node, unfold);\n  return n;\n}", "var": [], "body_in_train": true}, {"repo_owner": "hacxman", "repo_name": "qemu", "path": "hacxman/qemu/ebd8990f960244f88d263b84e6716bb57eb08d23f9afbba959cfe55c379bb07f", "path_in_repo": "hacxman/qemu//hw/net/vmxnet_rx_pkt.o", "objdump": "00000000000005f9 <vmxnet_rx_pkt_get_vlan_tag>:\n 5f9:\t55                   \tpush   %rbp\n 5fa:\t48 89 e5             \tmov    %rsp,%rbp\n 5fd:\t48 83 ec 10          \tsub    $0x10,%rsp\n 601:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n 605:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 60a:\t75 1f                \tjne    62b <vmxnet_rx_pkt_get_vlan_tag+0x32>\n 60c:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 613 <vmxnet_rx_pkt_get_vlan_tag+0x1a>\n 613:\tba b8 00 00 00       \tmov    $0xb8,%edx\n 618:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 61f <vmxnet_rx_pkt_get_vlan_tag+0x26>\n 61f:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 626 <vmxnet_rx_pkt_get_vlan_tag+0x2d>\n 626:\te8 00 00 00 00       \tcallq  62b <vmxnet_rx_pkt_get_vlan_tag+0x32>\n 62b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 62f:\t0f b7 40 48          \tmovzwl 0x48(%rax),%eax\n 633:\tc9                   \tleaveq \n 634:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall vmxnet_rx_pkt_get_vlan_tag(__int64 a1) {\n  if (!a1)\n    _assert_fail(String, String, Number, String);\n  return *(unsigned __int16 *)(a1 + Number);\n}", "code_t": "uint16_t __cdecl vmxnet_rx_pkt_get_vlan_tag(VmxnetRxPkt *pkt) {\n  if (!pkt)\n    _assert_fail(String, String, Number, String);\n  return pkt->tci;\n}", "var": [], "body_in_train": true}, {"repo_owner": "cnm", "repo_name": "mia_vita", "path": "cnm/mia_vita/9d1f9265001c7bda2af1443e0813cb996b0ff6a4470067a6c304044f4ba370b5", "path_in_repo": "cnm/mia_vita/rt2501/sources/ralink_wpasupplicant_files/hostap/src/crypto/ms_funcs.o", "objdump": "0000000000000656 <encrypt_pw_block_with_password_hash>:\n 656:\t55                   \tpush   %rbp\n 657:\t48 89 e5             \tmov    %rsp,%rbp\n 65a:\t48 83 ec 40          \tsub    $0x40,%rsp\n 65e:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 662:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n 666:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n 66a:\t48 89 4d c0          \tmov    %rcx,-0x40(%rbp)\n 66e:\t48 81 7d d0 00 01 00 \tcmpq   $0x100,-0x30(%rbp)\n 675:\t00 \n 676:\t76 0a                \tjbe    682 <encrypt_pw_block_with_password_hash+0x2c>\n 678:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 67d:\te9 df 00 00 00       \tjmpq   761 <encrypt_pw_block_with_password_hash+0x10b>\n 682:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 686:\tba 04 02 00 00       \tmov    $0x204,%edx\n 68b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 690:\t48 89 c7             \tmov    %rax,%rdi\n 693:\te8 00 00 00 00       \tcallq  698 <encrypt_pw_block_with_password_hash+0x42>\n 698:\tb8 00 01 00 00       \tmov    $0x100,%eax\n 69d:\t48 2b 45 d0          \tsub    -0x30(%rbp),%rax\n 6a1:\t48 01 c0             \tadd    %rax,%rax\n 6a4:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n 6a8:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 6ac:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 6b0:\t48 89 d6             \tmov    %rdx,%rsi\n 6b3:\t48 89 c7             \tmov    %rax,%rdi\n 6b6:\te8 00 00 00 00       \tcallq  6bb <encrypt_pw_block_with_password_hash+0x65>\n 6bb:\t85 c0                \ttest   %eax,%eax\n 6bd:\t79 0a                \tjns    6c9 <encrypt_pw_block_with_password_hash+0x73>\n 6bf:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 6c4:\te9 98 00 00 00       \tjmpq   761 <encrypt_pw_block_with_password_hash+0x10b>\n 6c9:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n 6d0:\t00 \n 6d1:\teb 2b                \tjmp    6fe <encrypt_pw_block_with_password_hash+0xa8>\n 6d3:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 6d7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 6db:\t48 01 d0             \tadd    %rdx,%rax\n 6de:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n 6e2:\t48 8d 0c 12          \tlea    (%rdx,%rdx,1),%rcx\n 6e6:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 6ea:\t48 01 d1             \tadd    %rdx,%rcx\n 6ed:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n 6f1:\t48 01 ca             \tadd    %rcx,%rdx\n 6f4:\t0f b6 00             \tmovzbl (%rax),%eax\n 6f7:\t88 02                \tmov    %al,(%rdx)\n 6f9:\t48 83 45 f8 01       \taddq   $0x1,-0x8(%rbp)\n 6fe:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 702:\t48 3b 45 d0          \tcmp    -0x30(%rbp),%rax\n 706:\t72 cb                \tjb     6d3 <encrypt_pw_block_with_password_hash+0x7d>\n 708:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 70c:\t48 05 00 02 00 00    \tadd    $0x200,%rax\n 712:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 716:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 71a:\t01 c0                \tadd    %eax,%eax\n 71c:\t66 c1 e8 08          \tshr    $0x8,%ax\n 720:\t89 c2                \tmov    %eax,%edx\n 722:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 726:\t48 83 c0 01          \tadd    $0x1,%rax\n 72a:\t88 10                \tmov    %dl,(%rax)\n 72c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 730:\t8d 14 00             \tlea    (%rax,%rax,1),%edx\n 733:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 737:\t88 10                \tmov    %dl,(%rax)\n 739:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n 73d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 741:\t41 b8 04 02 00 00    \tmov    $0x204,%r8d\n 747:\t48 89 d1             \tmov    %rdx,%rcx\n 74a:\tba 00 00 00 00       \tmov    $0x0,%edx\n 74f:\tbe 10 00 00 00       \tmov    $0x10,%esi\n 754:\t48 89 c7             \tmov    %rax,%rdi\n 757:\te8 00 00 00 00       \tcallq  75c <encrypt_pw_block_with_password_hash+0x106>\n 75c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 761:\tc9                   \tleaveq \n 762:\tc3                   \tretq   ", "code_s": "__int64 __fastcall encrypt_pw_block_with_password_hash(__int64 a1,\n                                                       unsigned __int64 a2,\n                                                       __int64 a3, _WORD *a4) {\n  unsigned __int64 i;\n  if (a2 > Number)\n    return Number;\n  memset(a4, Number, Number);\n  if ((int)os_get_random(a4, Number * (Number - a2)) < Number)\n    return Number;\n  for (i = Number L; i < a2; ++i)\n    LOBYTE(a4[Number - a2 + i]) = *(_BYTE *)(a1 + i);\n  a4[Number] = Number * a2;\n  rc4_skip(a3, Number L, Number L, a4, Number L);\n  return Number L;\n}", "code_t": "int __cdecl encrypt_pw_block_with_password_hash(const u8 *password,\n                                                size_t password_len,\n                                                const u8 *password_hash,\n                                                u8 *pw_block) {\n  size_t i;\n  if (password_len > Number)\n    return Number;\n  memset(pw_block, Number, Number);\n  if ((int)os_get_random(pw_block, Number * (Number - password_len)) < Number)\n    return Number;\n  for (i = Number L; i < password_len; ++i)\n    pw_block[Number * (Number - password_len) + Number * i] = password[i];\n  *((_WORD *)pw_block + Number) = Number * password_len;\n  rc4_skip(password_hash, Number L, Number L, pw_block, Number L);\n  return Number;\n}", "var": [], "body_in_train": true}, {"repo_owner": "iortcw", "repo_name": "iortcw", "path": "iortcw/iortcw/6dfcaccef83d6a63ce21634448d641397429ba88686e385dde828ba25495a0ff", "path_in_repo": "iortcw/iortcw/SP/build/release-linux-x86_64/renderer/psaux.o", "objdump": "0000000000010455 <cf2_stack_init>:\n   10455:\t55                   \tpush   %rbp\n   10456:\t48 89 e5             \tmov    %rsp,%rbp\n   10459:\t48 83 ec 30          \tsub    $0x30,%rsp\n   1045d:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   10461:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n   10465:\t89 55 dc             \tmov    %edx,-0x24(%rbp)\n   10468:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n   1046f:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n   10476:\t00 \n   10477:\t48 8d 55 f4          \tlea    -0xc(%rbp),%rdx\n   1047b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   1047f:\tbe 28 00 00 00       \tmov    $0x28,%esi\n   10484:\t48 89 c7             \tmov    %rax,%rdi\n   10487:\te8 00 00 00 00       \tcallq  1048c <cf2_stack_init+0x37>\n   1048c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n   10490:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n   10493:\t85 c0                \ttest   %eax,%eax\n   10495:\t75 17                \tjne    104ae <cf2_stack_init+0x59>\n   10497:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   1049b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n   1049f:\t48 89 10             \tmov    %rdx,(%rax)\n   104a2:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   104a6:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n   104aa:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n   104ae:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n   104b1:\t48 8d 4d f4          \tlea    -0xc(%rbp),%rcx\n   104b5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   104b9:\t49 89 c9             \tmov    %rcx,%r9\n   104bc:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n   104c2:\t48 89 d1             \tmov    %rdx,%rcx\n   104c5:\tba 00 00 00 00       \tmov    $0x0,%edx\n   104ca:\tbe 08 00 00 00       \tmov    $0x8,%esi\n   104cf:\t48 89 c7             \tmov    %rax,%rdi\n   104d2:\te8 00 00 00 00       \tcallq  104d7 <cf2_stack_init+0x82>\n   104d7:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   104db:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n   104df:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n   104e2:\t85 c0                \ttest   %eax,%eax\n   104e4:\t74 22                \tje     10508 <cf2_stack_init+0xb3>\n   104e6:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n   104ea:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n   104ee:\t48 89 d6             \tmov    %rdx,%rsi\n   104f1:\t48 89 c7             \tmov    %rax,%rdi\n   104f4:\te8 00 00 00 00       \tcallq  104f9 <cf2_stack_init+0xa4>\n   104f9:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n   10500:\t00 \n   10501:\tb8 00 00 00 00       \tmov    $0x0,%eax\n   10506:\teb 1e                \tjmp    10526 <cf2_stack_init+0xd1>\n   10508:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   1050c:\t8b 55 dc             \tmov    -0x24(%rbp),%edx\n   1050f:\t89 50 20             \tmov    %edx,0x20(%rax)\n   10512:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   10516:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n   1051a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   1051e:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n   10522:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n   10526:\tc9                   \tleaveq \n   10527:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cf2_stack_init(__int64 a1, __int64 a2, unsigned int a3) {\n  __int64 v3;\n  __int64 result;\n  int v6;\n  __int64 v7;\n  v6 = Number;\n  v7 = Number L;\n  v7 = ft_mem_alloc(a1, Number L, &v6);\n  if (!v6) {\n    *(_QWORD *)v7 = a1;\n    *(_QWORD *)(v7 + Number) = a2;\n  }\n  v3 = ft_mem_realloc(a1, Number L, Number L, a3, Number L, &v6);\n  *(_QWORD *)(v7 + Number) = v3;\n  if (v6) {\n    ft_mem_free(a1, v7);\n    v7 = Number L;\n    result = Number L;\n  } else {\n    *(_DWORD *)(v7 + Number) = a3;\n    *(_QWORD *)(v7 + Number) = *(_QWORD *)(v7 + Number);\n    result = v7;\n  }\n  return result;\n}", "code_t": "CF2_Stack __cdecl cf2_stack_init(FT_Memory memory, FT_Error *e,\n                                 FT_UInt stackSize) {\n  CF2_StackNumber *v3;\n  CF2_Stack result;\n  FT_Error error;\n  CF2_Stack stack;\n  error = Number;\n  stack = Number L;\n  stack = (CF2_Stack)ft_mem_alloc(memory, Number L, &error);\n  if (!error) {\n    stack->memory = memory;\n    stack->error = e;\n  }\n  v3 = (CF2_StackNumber *)ft_mem_realloc(memory, Number L, Number L, stackSize,\n                                         Number L, &error);\n  stack->buffer = v3;\n  if (error) {\n    ft_mem_free(memory, stack);\n    stack = Number L;\n    result = Number L;\n  } else {\n    stack->stackSize = stackSize;\n    stack->top = stack->buffer;\n    result = stack;\n  }\n  return result;\n}", "var": [], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/9da36a4e4dbca66621560f380d0e1d6d3b4827d820fb5a5af9ad7c12551a2aee", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/audio/triplhnt.o", "objdump": "", "code_s": "discrete_node_base_factory\n    *__fastcall discrete_node_factory<discrete_dss_input_data_node>\n    discrete_node_factory(discrete_node_base_factory *a1) {\n  discrete_node_base_factory *result;\n  discrete_node_base_factory discrete_node_base_factory(a1);\n  result = a1; * ( _QWORD * ) a1 = ( unsigned int ) ( ( _DWORD ) & ` vtable for ' discrete_node_factory < discrete_dss_input_data_node > + Number ) ; return result ; }", "code_t": "void __cdecl discrete_node_factory<discrete_dss_input_data_node>\ndiscrete_node_factory(\n    discrete_node_factory<discrete_dss_input_data_node> *const this) {\n  discrete_node_base_factory discrete_node_base_factory(this); this -> _vptr_discrete_node_base_factory = ( int ( * * ) ( ... ) ) ( unsigned int ) ( ( _DWORD ) & ` vtable for ' discrete_node_factory < discrete_dss_input_data_node > + Number ) ; }", "var": [], "body_in_train": true}, {"repo_owner": "NathanToporek", "repo_name": "pentago", "path": "NathanToporek/pentago/a01a206f1fcf683e09bf2cd8dbdb50b28b79ecf4151944304c3de44d61ee24d3", "path_in_repo": "NathanToporek/pentago/src/exe.exe", "objdump": "000000000040164b <copy_GameState>:\n  40164b:\t55                   \tpush   %rbp\n  40164c:\t48 89 e5             \tmov    %rsp,%rbp\n  40164f:\t48 83 ec 20          \tsub    $0x20,%rsp\n  401653:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  401657:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n  40165c:\t75 0a                \tjne    401668 <copy_GameState+0x1d>\n  40165e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401663:\te9 cc 00 00 00       \tjmpq   401734 <copy_GameState+0xe9>\n  401668:\tbf 30 00 00 00       \tmov    $0x30,%edi\n  40166d:\te8 4e fa ff ff       \tcallq  4010c0 <malloc@plt>\n  401672:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  401676:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n  40167b:\t75 0a                \tjne    401687 <copy_GameState+0x3c>\n  40167d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401682:\te9 ad 00 00 00       \tjmpq   401734 <copy_GameState+0xe9>\n  401687:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40168b:\t0f b6 50 24          \tmovzbl 0x24(%rax),%edx\n  40168f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401693:\t88 50 24             \tmov    %dl,0x24(%rax)\n  401696:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40169a:\t8b 50 28             \tmov    0x28(%rax),%edx\n  40169d:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4016a1:\t89 50 28             \tmov    %edx,0x28(%rax)\n  4016a4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4016a8:\t8b 50 2c             \tmov    0x2c(%rax),%edx\n  4016ab:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4016af:\t89 50 2c             \tmov    %edx,0x2c(%rax)\n  4016b2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4016b6:\t0f b6 50 25          \tmovzbl 0x25(%rax),%edx\n  4016ba:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  4016be:\t88 50 25             \tmov    %dl,0x25(%rax)\n  4016c1:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4016c8:\teb 60                \tjmp    40172a <copy_GameState+0xdf>\n  4016ca:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n  4016d1:\teb 4d                \tjmp    401720 <copy_GameState+0xd5>\n  4016d3:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n  4016d7:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4016da:\t48 63 c8             \tmovslq %eax,%rcx\n  4016dd:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4016e0:\t48 63 d0             \tmovslq %eax,%rdx\n  4016e3:\t48 89 d0             \tmov    %rdx,%rax\n  4016e6:\t48 01 c0             \tadd    %rax,%rax\n  4016e9:\t48 01 d0             \tadd    %rdx,%rax\n  4016ec:\t48 01 c0             \tadd    %rax,%rax\n  4016ef:\t48 01 f0             \tadd    %rsi,%rax\n  4016f2:\t48 01 c8             \tadd    %rcx,%rax\n  4016f5:\t0f b6 08             \tmovzbl (%rax),%ecx\n  4016f8:\t48 8b 7d f0          \tmov    -0x10(%rbp),%rdi\n  4016fc:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4016ff:\t48 63 f0             \tmovslq %eax,%rsi\n  401702:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  401705:\t48 63 d0             \tmovslq %eax,%rdx\n  401708:\t48 89 d0             \tmov    %rdx,%rax\n  40170b:\t48 01 c0             \tadd    %rax,%rax\n  40170e:\t48 01 d0             \tadd    %rdx,%rax\n  401711:\t48 01 c0             \tadd    %rax,%rax\n  401714:\t48 01 f8             \tadd    %rdi,%rax\n  401717:\t48 01 f0             \tadd    %rsi,%rax\n  40171a:\t88 08                \tmov    %cl,(%rax)\n  40171c:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  401720:\t83 7d f8 05          \tcmpl   $0x5,-0x8(%rbp)\n  401724:\t7e ad                \tjle    4016d3 <copy_GameState+0x88>\n  401726:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40172a:\t83 7d fc 05          \tcmpl   $0x5,-0x4(%rbp)\n  40172e:\t7e 9a                \tjle    4016ca <copy_GameState+0x7f>\n  401730:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401734:\tc9                   \tleaveq \n  401735:\tc3                   \tretq   ", "code_s": "_BYTE *__fastcall copy_GameState(__int64 a1) {\n  _BYTE *v2;\n  int j;\n  int i;\n  if (!a1)\n    return Number L;\n  v2 = malloc(Number);\n  if (!v2)\n    return Number L;\n  v2[Number] = *(_BYTE *)(a1 + Number);\n  *((_DWORD *)v2 + Number) = *(_DWORD *)(a1 + Number);\n  *((_DWORD *)v2 + Number) = *(_DWORD *)(a1 + Number);\n  v2[Number] = *(_BYTE *)(a1 + Number);\n  for (i = Number; i <= Number; ++i) {\n    for (j = Number; j <= Number; ++j)\n      v2[Number * i + j] = *(_BYTE *)(j + a1 + Number L * i);\n  }\n  return v2;\n}", "code_t": "GameState *__cdecl copy_GameState(GameState *gs_0) {\n  GameState *cpy;\n  int x;\n  int y;\n  if (!gs_0)\n    return Number L;\n  cpy = (GameState *)malloc(Number);\n  if (!cpy)\n    return Number L;\n  cpy->currTurn = gs_0->currTurn;\n  cpy->blackWon = gs_0->blackWon;\n  cpy->whiteWon = gs_0->whiteWon;\n  cpy->myTurn = gs_0->myTurn;\n  for (y = Number; y <= Number; ++y) {\n    for (x = Number; x <= Number; ++x)\n      cpy->state[y][x] = gs_0->state[y][x];\n  }\n  return cpy;\n}", "var": [], "body_in_train": false}, {"repo_owner": "davidek", "repo_name": "peerstreamer-GRAPES", "path": "davidek/peerstreamer-GRAPES/dd4a6fc5fa22fc8efc692347bd3ee0bf72dabf118e4f6ff4340bea5203a0ec9d", "path_in_repo": "davidek/peerstreamer-GRAPES/src/Cache/topocache.o", "objdump": "0000000000000949 <cache_delay>:\n     949:\t55                   \tpush   %rbp\n     94a:\t48 89 e5             \tmov    %rsp,%rbp\n     94d:\t48 83 ec 20          \tsub    $0x20,%rsp\n     951:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     955:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     958:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     95f:\te9 e8 00 00 00       \tjmpq   a4c <cache_delay+0x103>\n     964:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     968:\t8b 40 20             \tmov    0x20(%rax),%eax\n     96b:\t85 c0                \ttest   %eax,%eax\n     96d:\t0f 84 a2 00 00 00    \tje     a15 <cache_delay+0xcc>\n     973:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     977:\t48 8b 00             \tmov    (%rax),%rax\n     97a:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     97d:\t48 63 d2             \tmovslq %edx,%rdx\n     980:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     984:\t48 01 d0             \tadd    %rdx,%rax\n     987:\t8b 50 08             \tmov    0x8(%rax),%edx\n     98a:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     98d:\t01 c2                \tadd    %eax,%edx\n     98f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     993:\t8b 40 20             \tmov    0x20(%rax),%eax\n     996:\t39 c2                \tcmp    %eax,%edx\n     998:\t76 7b                \tjbe    a15 <cache_delay+0xcc>\n     99a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     99d:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n     9a0:\teb 3f                \tjmp    9e1 <cache_delay+0x98>\n     9a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9a6:\t48 8b 00             \tmov    (%rax),%rax\n     9a9:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n     9ac:\t48 63 d2             \tmovslq %edx,%rdx\n     9af:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     9b3:\t48 01 d0             \tadd    %rdx,%rax\n     9b6:\t48 8b 00             \tmov    (%rax),%rax\n     9b9:\t48 89 c7             \tmov    %rax,%rdi\n     9bc:\te8 00 00 00 00       \tcallq  9c1 <cache_delay+0x78>\n     9c1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9c5:\t48 8b 08             \tmov    (%rax),%rcx\n     9c8:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     9cb:\t8d 50 01             \tlea    0x1(%rax),%edx\n     9ce:\t89 55 f8             \tmov    %edx,-0x8(%rbp)\n     9d1:\t48 98                \tcltq   \n     9d3:\t48 c1 e0 04          \tshl    $0x4,%rax\n     9d7:\t48 01 c8             \tadd    %rcx,%rax\n     9da:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     9e1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9e5:\t8b 40 0c             \tmov    0xc(%rax),%eax\n     9e8:\t39 45 f8             \tcmp    %eax,-0x8(%rbp)\n     9eb:\t7d 1c                \tjge    a09 <cache_delay+0xc0>\n     9ed:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9f1:\t48 8b 00             \tmov    (%rax),%rax\n     9f4:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n     9f7:\t48 63 d2             \tmovslq %edx,%rdx\n     9fa:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     9fe:\t48 01 d0             \tadd    %rdx,%rax\n     a01:\t48 8b 00             \tmov    (%rax),%rax\n     a04:\t48 85 c0             \ttest   %rax,%rax\n     a07:\t75 99                \tjne    9a2 <cache_delay+0x59>\n     a09:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a0d:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     a10:\t89 50 0c             \tmov    %edx,0xc(%rax)\n     a13:\teb 33                \tjmp    a48 <cache_delay+0xff>\n     a15:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a19:\t48 8b 00             \tmov    (%rax),%rax\n     a1c:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     a1f:\t48 63 d2             \tmovslq %edx,%rdx\n     a22:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     a26:\t48 01 d0             \tadd    %rdx,%rax\n     a29:\t8b 48 08             \tmov    0x8(%rax),%ecx\n     a2c:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     a2f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a33:\t48 8b 00             \tmov    (%rax),%rax\n     a36:\t8b 75 fc             \tmov    -0x4(%rbp),%esi\n     a39:\t48 63 f6             \tmovslq %esi,%rsi\n     a3c:\t48 c1 e6 04          \tshl    $0x4,%rsi\n     a40:\t48 01 f0             \tadd    %rsi,%rax\n     a43:\t01 ca                \tadd    %ecx,%edx\n     a45:\t89 50 08             \tmov    %edx,0x8(%rax)\n     a48:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     a4c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a50:\t8b 40 0c             \tmov    0xc(%rax),%eax\n     a53:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n     a56:\t0f 8c 08 ff ff ff    \tjl     964 <cache_delay+0x1b>\n     a5c:\t90                   \tnop\n     a5d:\t90                   \tnop\n     a5e:\tc9                   \tleaveq \n     a5f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cache_delay(__int64 a1, int a2) {\n  int v2;\n  __int64 result;\n  int j;\n  int i;\n  for (i = Number;; ++i) {\n    result = *(unsigned int *)(a1 + Number);\n    if (i >= (int)result)\n      break;\n    if (*(_DWORD *)(a1 + Number) &&\n        (unsigned int)(a2 + *(_DWORD *)(Number L * i + *(_QWORD *)a1 +\n                                        Number)) > *(_DWORD *)(a1 + Number)) {\n      for (j = i; j < *(_DWORD *)(a1 + Number) &&\n                  *(_QWORD *)(Number L * j + *(_QWORD *)a1);\n           ++j) {\n        nodeid_free(*(_QWORD *)(Number L * j + *(_QWORD *)a1));\n        v2 = j;\n        *(_QWORD *)(*(_QWORD *)a1 + Number L * v2) = Number L;\n      }\n      *(_DWORD *)(a1 + Number) = i;\n    } else {\n      *(_DWORD *)(Number L * i + *(_QWORD *)a1 + Number) += a2;\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl cache_delay(peer_cache *c, int dts) {\n  int v2;\n  int j;\n  int i;\n  for (i = Number; i < c->current_size; ++i) {\n    if (c->max_timestamp && dts + c->entries[i].timestamp > c->max_timestamp) {\n      for (j = i; j < c->current_size && c->entries[j].id; ++j) {\n        nodeid_free(c->entries[j].id);\n        v2 = j;\n        c->entries[v2].id = Number L;\n      }\n      c->current_size = i;\n    } else {\n      c->entries[i].timestamp += dts;\n    }\n  }\n}", "var": [], "body_in_train": false}, {"repo_owner": "dtsund", "repo_name": "crawl-light", "path": "dtsund/crawl-light/0e9bf8f40d1fe670f556bd9b8dcb709112b5166b701083fe9f34617006955ea9", "path_in_repo": "dtsund/crawl-light/crawl-ref/source/abl-show.o", "objdump": "", "code_s": "void __fastcall mgen_data ~mgen_data(mgen_data *this) {\n  char *v2;\n  char *v3;\n  CrawlHashTable ~CrawlHashTable((mgen_data *)((char *)this + Number));\n  v2 = (char *)*((_QWORD *)this + Number);\n  if (v2 != (char *)this + Number)\n    operator delete(v2);\n  v3 = (char *)*((_QWORD *)this + Number);\n  if (v3 != (char *)this + Number)\n    operator delete(v3);\n}", "code_t": "void __fastcall mgen_data ~mgen_data(mgen_data *this) {\n  char *v2;\n  char *v3;\n  CrawlHashTable ~CrawlHashTable((mgen_data *)((char *)this + Number));\n  v2 = (char *)*((_QWORD *)this + Number);\n  if (v2 != (char *)this + Number)\n    operator delete(v2);\n  v3 = (char *)*((_QWORD *)this + Number);\n  if (v3 != (char *)this + Number)\n    operator delete(v3);\n}", "var": [], "body_in_train": true}, {"repo_owner": "wjfsanhe", "repo_name": "newPlayer", "path": "wjfsanhe/newPlayer/bb7f4c8af23ffcb79a4a712851df51eff14cbc7fbe3ccc859d44a79493db8ac3", "path_in_repo": "wjfsanhe/newPlayer/amffmpeg/src/libavcodec/dsputil.o", "objdump": "000000000001e356 <avg_h264_qpel8_mc00_c>:\n   1e356:\t48 83 ec 18          \tsub    $0x18,%rsp\n   1e35a:\t48 89 7c 24 10       \tmov    %rdi,0x10(%rsp)\n   1e35f:\t48 89 74 24 08       \tmov    %rsi,0x8(%rsp)\n   1e364:\t89 54 24 04          \tmov    %edx,0x4(%rsp)\n   1e368:\t8b 54 24 04          \tmov    0x4(%rsp),%edx\n   1e36c:\t48 8b 74 24 08       \tmov    0x8(%rsp),%rsi\n   1e371:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n   1e376:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n   1e37b:\t48 89 c7             \tmov    %rax,%rdi\n   1e37e:\te8 03 49 fe ff       \tcallq  2c86 <avg_pixels8_c>\n   1e383:\t90                   \tnop\n   1e384:\t48 83 c4 18          \tadd    $0x18,%rsp\n   1e388:\tc3                   \tretq   ", "code_s": "__int64 __fastcall avg_h264_qpel8_mc00_c(unsigned int *a1, int *a2, int a3) {\n  return avg_pixels8_c(a1, a2, a3, Number);\n}", "code_t": "void __cdecl avg_h264_qpel8_mc00_c(uint8_t *dst, uint8_t *src, int stride) {\n  avg_pixels8_c(dst, src, stride, Number);\n}", "var": [], "body_in_train": true}, {"repo_owner": "jhuttner", "repo_name": "cgit", "path": "jhuttner/cgit/bab3cc17e86004f196fce031982e6cc4d097c20484ed110c5f0fa2eb4e1e879b", "path_in_repo": "jhuttner/cgit/git/refs.o", "objdump": "000000000000245d <lock_ref_sha1_basic>:\n    245d:\t55                   \tpush   %rbp\n    245e:\t48 89 e5             \tmov    %rsp,%rbp\n    2461:\t48 83 ec 50          \tsub    $0x50,%rsp\n    2465:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    2469:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n    246d:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n    2470:\t48 89 4d b0          \tmov    %rcx,-0x50(%rbp)\n    2474:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2478:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    247c:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n    2483:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n    2488:\t74 17                \tje     24a1 <lock_ref_sha1_basic+0x44>\n    248a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    248e:\t48 89 c7             \tmov    %rax,%rdi\n    2491:\te8 7c dc ff ff       \tcallq  112 <is_null_sha1>\n    2496:\t85 c0                \ttest   %eax,%eax\n    2498:\t75 07                \tjne    24a1 <lock_ref_sha1_basic+0x44>\n    249a:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    249f:\teb 05                \tjmp    24a6 <lock_ref_sha1_basic+0x49>\n    24a1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24a6:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    24a9:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n    24b0:\tbe 38 00 00 00       \tmov    $0x38,%esi\n    24b5:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    24ba:\te8 00 00 00 00       \tcallq  24bf <lock_ref_sha1_basic+0x62>\n    24bf:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    24c3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    24c7:\tc7 40 2c ff ff ff ff \tmovl   $0xffffffff,0x2c(%rax)\n    24ce:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    24d2:\t48 8d 70 18          \tlea    0x18(%rax),%rsi\n    24d6:\t48 8d 4d d4          \tlea    -0x2c(%rbp),%rcx\n    24da:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    24dd:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    24e1:\t48 89 c7             \tmov    %rax,%rdi\n    24e4:\te8 00 00 00 00       \tcallq  24e9 <lock_ref_sha1_basic+0x8c>\n    24e9:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    24ed:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    24f2:\t75 7a                \tjne    256e <lock_ref_sha1_basic+0x111>\n    24f4:\te8 00 00 00 00       \tcallq  24f9 <lock_ref_sha1_basic+0x9c>\n    24f9:\t8b 00                \tmov    (%rax),%eax\n    24fb:\t83 f8 15             \tcmp    $0x15,%eax\n    24fe:\t75 6e                \tjne    256e <lock_ref_sha1_basic+0x111>\n    2500:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2504:\t48 89 c6             \tmov    %rax,%rsi\n    2507:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    250c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2511:\te8 00 00 00 00       \tcallq  2516 <lock_ref_sha1_basic+0xb9>\n    2516:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    251a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    251e:\t48 89 c7             \tmov    %rax,%rdi\n    2521:\te8 d7 fd ff ff       \tcallq  22fd <remove_empty_directories>\n    2526:\t85 c0                \ttest   %eax,%eax\n    2528:\t74 25                \tje     254f <lock_ref_sha1_basic+0xf2>\n    252a:\te8 00 00 00 00       \tcallq  252f <lock_ref_sha1_basic+0xd2>\n    252f:\t8b 00                \tmov    (%rax),%eax\n    2531:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    2534:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2538:\t48 89 c6             \tmov    %rax,%rsi\n    253b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2540:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2545:\te8 00 00 00 00       \tcallq  254a <lock_ref_sha1_basic+0xed>\n    254a:\te9 d5 01 00 00       \tjmpq   2724 <lock_ref_sha1_basic+0x2c7>\n    254f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2553:\t48 8d 70 18          \tlea    0x18(%rax),%rsi\n    2557:\t48 8d 4d d4          \tlea    -0x2c(%rbp),%rcx\n    255b:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    255e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2562:\t48 89 c7             \tmov    %rax,%rdi\n    2565:\te8 00 00 00 00       \tcallq  256a <lock_ref_sha1_basic+0x10d>\n    256a:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    256e:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n    2573:\t74 09                \tje     257e <lock_ref_sha1_basic+0x121>\n    2575:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n    2578:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    257c:\t89 10                \tmov    %edx,(%rax)\n    257e:\t48 83 7d c8 00       \tcmpq   $0x0,-0x38(%rbp)\n    2583:\t75 36                \tjne    25bb <lock_ref_sha1_basic+0x15e>\n    2585:\te8 00 00 00 00       \tcallq  258a <lock_ref_sha1_basic+0x12d>\n    258a:\t8b 00                \tmov    (%rax),%eax\n    258c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    258f:\te8 00 00 00 00       \tcallq  2594 <lock_ref_sha1_basic+0x137>\n    2594:\t8b 00                \tmov    (%rax),%eax\n    2596:\t89 c7                \tmov    %eax,%edi\n    2598:\te8 00 00 00 00       \tcallq  259d <lock_ref_sha1_basic+0x140>\n    259d:\t48 89 c2             \tmov    %rax,%rdx\n    25a0:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    25a4:\t48 89 c6             \tmov    %rax,%rsi\n    25a7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    25ac:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    25b1:\te8 00 00 00 00       \tcallq  25b6 <lock_ref_sha1_basic+0x159>\n    25b6:\te9 69 01 00 00       \tjmpq   2724 <lock_ref_sha1_basic+0x2c7>\n    25bb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    25bf:\t48 83 c0 18          \tadd    $0x18,%rax\n    25c3:\t48 89 c7             \tmov    %rax,%rdi\n    25c6:\te8 47 db ff ff       \tcallq  112 <is_null_sha1>\n    25cb:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    25ce:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n    25d2:\t74 33                \tje     2607 <lock_ref_sha1_basic+0x1aa>\n    25d4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    25d9:\te8 88 e2 ff ff       \tcallq  866 <get_packed_refs>\n    25de:\t48 89 c2             \tmov    %rax,%rdx\n    25e1:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    25e5:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    25ea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    25ef:\t48 89 c7             \tmov    %rax,%rdi\n    25f2:\te8 5b fd ff ff       \tcallq  2352 <is_refname_available>\n    25f7:\t85 c0                \ttest   %eax,%eax\n    25f9:\t75 0c                \tjne    2607 <lock_ref_sha1_basic+0x1aa>\n    25fb:\tc7 45 fc 14 00 00 00 \tmovl   $0x14,-0x4(%rbp)\n    2602:\te9 1d 01 00 00       \tjmpq   2724 <lock_ref_sha1_basic+0x2c7>\n    2607:\tbe 18 10 00 00       \tmov    $0x1018,%esi\n    260c:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    2611:\te8 00 00 00 00       \tcallq  2616 <lock_ref_sha1_basic+0x1b9>\n    2616:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    261a:\t48 89 42 10          \tmov    %rax,0x10(%rdx)\n    261e:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%rbp)\n    2625:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    2628:\t83 e0 01             \tand    $0x1,%eax\n    262b:\t85 c0                \ttest   %eax,%eax\n    262d:\t74 0c                \tje     263b <lock_ref_sha1_basic+0x1de>\n    262f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2633:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    2637:\t83 4d f8 02          \torl    $0x2,-0x8(%rbp)\n    263b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    263f:\t48 89 c7             \tmov    %rax,%rdi\n    2642:\te8 00 00 00 00       \tcallq  2647 <lock_ref_sha1_basic+0x1ea>\n    2647:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    264b:\t48 89 02             \tmov    %rax,(%rdx)\n    264e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    2652:\t48 89 c7             \tmov    %rax,%rdi\n    2655:\te8 00 00 00 00       \tcallq  265a <lock_ref_sha1_basic+0x1fd>\n    265a:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    265e:\t48 89 42 08          \tmov    %rax,0x8(%rdx)\n    2662:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2666:\t48 89 c6             \tmov    %rax,%rsi\n    2669:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    266e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2673:\te8 00 00 00 00       \tcallq  2678 <lock_ref_sha1_basic+0x21b>\n    2678:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    267c:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n    2680:\t74 0b                \tje     268d <lock_ref_sha1_basic+0x230>\n    2682:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2686:\tc7 40 30 01 00 00 00 \tmovl   $0x1,0x30(%rax)\n    268d:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    2690:\t83 e0 01             \tand    $0x1,%eax\n    2693:\t85 c0                \ttest   %eax,%eax\n    2695:\t74 15                \tje     26ac <lock_ref_sha1_basic+0x24f>\n    2697:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    269a:\t83 e0 01             \tand    $0x1,%eax\n    269d:\t85 c0                \ttest   %eax,%eax\n    269f:\t74 0b                \tje     26ac <lock_ref_sha1_basic+0x24f>\n    26a1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    26a5:\tc7 40 30 01 00 00 00 \tmovl   $0x1,0x30(%rax)\n    26ac:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    26b0:\t48 89 c7             \tmov    %rax,%rdi\n    26b3:\te8 00 00 00 00       \tcallq  26b8 <lock_ref_sha1_basic+0x25b>\n    26b8:\t85 c0                \ttest   %eax,%eax\n    26ba:\t74 22                \tje     26de <lock_ref_sha1_basic+0x281>\n    26bc:\te8 00 00 00 00       \tcallq  26c1 <lock_ref_sha1_basic+0x264>\n    26c1:\t8b 00                \tmov    (%rax),%eax\n    26c3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    26c6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    26ca:\t48 89 c6             \tmov    %rax,%rsi\n    26cd:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    26d2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    26d7:\te8 00 00 00 00       \tcallq  26dc <lock_ref_sha1_basic+0x27f>\n    26dc:\teb 46                \tjmp    2724 <lock_ref_sha1_basic+0x2c7>\n    26de:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    26e2:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    26e6:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n    26e9:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n    26ed:\t48 89 ce             \tmov    %rcx,%rsi\n    26f0:\t48 89 c7             \tmov    %rax,%rdi\n    26f3:\te8 00 00 00 00       \tcallq  26f8 <lock_ref_sha1_basic+0x29b>\n    26f8:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n    26fc:\t89 42 2c             \tmov    %eax,0x2c(%rdx)\n    26ff:\t48 83 7d c0 00       \tcmpq   $0x0,-0x40(%rbp)\n    2704:\t74 18                \tje     271e <lock_ref_sha1_basic+0x2c1>\n    2706:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    2709:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n    270d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2711:\t48 89 ce             \tmov    %rcx,%rsi\n    2714:\t48 89 c7             \tmov    %rax,%rdi\n    2717:\te8 06 fb ff ff       \tcallq  2222 <verify_lock>\n    271c:\teb 21                \tjmp    273f <lock_ref_sha1_basic+0x2e2>\n    271e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2722:\teb 1b                \tjmp    273f <lock_ref_sha1_basic+0x2e2>\n    2724:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2728:\t48 89 c7             \tmov    %rax,%rdi\n    272b:\te8 00 00 00 00       \tcallq  2730 <lock_ref_sha1_basic+0x2d3>\n    2730:\te8 00 00 00 00       \tcallq  2735 <lock_ref_sha1_basic+0x2d8>\n    2735:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    2738:\t89 10                \tmov    %edx,(%rax)\n    273a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    273f:\tc9                   \tleaveq \n    2740:\tc3                   \tretq   ", "code_s": "const char **__fastcall lock_ref_sha1_basic(const char *a1, const void *a2,\n                                            char a3, _DWORD *a4) {\n  _BOOL4 v4;\n  const char *v5;\n  int *v6;\n  char *v7;\n  const char *v8;\n  const char *v9;\n  const char *v10;\n  const char *v11;\n  const char *v12;\n  int v13;\n  const char **result;\n  const char *v17;\n  int v18;\n  int v19[Number];\n  const char **v20;\n  _BOOL4 v21;\n  int v22;\n  int errnum[Number];\n  unsigned int v24;\n  int v25;\n  *(_QWORD *)errnum = a1;\n  v25 = Number;\n  v4 = a2 && !is_null_sha1(a2);\n  v22 = v4;\n  v21 = Number;\n  v20 = (const char **)xcalloc(Number L, Number L);\n  *((_DWORD *)v20 + Number) = Number;\n  v17 = resolve_ref(a1, v20 + Number, v22, &v18);\n  if (!v17 && *_errno_location() == Number) {\n    *(_QWORD *)v19 = git_path(String, *(const char **)errnum);\n    if ((unsigned int)remove_empty_directories(*(const char **)v19)) {\n      v25 = *_errno_location();\n      error((int)String, errnum[Number], v5);\n    LABEL_29:\n      unlock_ref(v20);\n      *_errno_location() = v25;\n      return Number L;\n    }\n    v17 = resolve_ref(*(const char **)errnum, v20 + Number, v22, &v18);\n  }\n  if (a4)\n    *a4 = v18;\n  if (!v17) {\n    v25 = *_errno_location();\n    v6 = _errno_location();\n    v7 = strerror(*v6);\n    error((int)String, errnum[Number], v7);\n    goto LABEL_29;\n  }\n  v21 = is_null_sha1(v20 + Number);\n  if (v21) {\n    v8 = (const char *)get_packed_refs(Number L);\n    if (!(unsigned int)is_refname_available(v17, Number L, v8, Number)) {\n      v25 = Number;\n      goto LABEL_29;\n    }\n  }\n  v9 = (const char *)xcalloc(Number L, Number L);\n  v20[Number] = v9;\n  v24 = Number;\n  if ((a3 & Number) != Number) {\n    v17 = *(const char **)errnum;\n    v24 |= Number;\n  }\n  v10 = (const char *)xstrdup(v17);\n  *v20 = v10;\n  v11 = (const char *)xstrdup(*(_QWORD *)errnum);\n  v20[Number] = v11;\n  *(_QWORD *)v19 = git_path(String, v17);\n  if (v21)\n    *((_DWORD *)v20 + Number) = Number;\n  if ((a3 & Number) != Number && (v18 & Number) != Number)\n    *((_DWORD *)v20 + Number) = Number;\n  if ((unsigned int)safe_create_leading_directories(*(_QWORD *)v19)) {\n    v25 = *_errno_location();\n    error((int)String, v19[Number], v12);\n    goto LABEL_29;\n  }\n  v13 = hold_lock_file_for_update(v20[Number], *(_QWORD *)v19, v24);\n  *((_DWORD *)v20 + Number) = v13;\n  if (a2)\n    result = verify_lock(v20, a2, v22);\n  else\n    result = v20;\n  return result;\n}", "code_t": "ref_lock *__cdecl lock_ref_sha1_basic(const char *ref,\n                                      const unsigned __int8 *old_sha1,\n                                      int flags, int *type_p) {\n  int v4;\n  const char *v5;\n  int *v6;\n  char *v7;\n  ref_list *v8;\n  lock_file *v9;\n  char *v10;\n  char *v11;\n  const char *v12;\n  int v13;\n  ref_lock *result;\n  char flagsa;\n  const char *refa;\n  int type;\n  char *ref_file;\n  ref_lock *lock;\n  int missing;\n  int mustexist;\n  const char *orig_ref;\n  int lflags;\n  int last_errno;\n  flagsa = flags;\n  orig_ref = ref;\n  last_errno = Number;\n  v4 = old_sha1 && !is_null_sha1(old_sha1);\n  mustexist = v4;\n  missing = Number;\n  lock = (ref_lock *)xcalloc(Number L, Number L);\n  lock->lock_fd = Number;\n  refa = resolve_ref(ref, lock->old_sha1, mustexist, &type);\n  if (!refa && *_errno_location() == Number) {\n    ref_file = (char *)git_path(String, orig_ref);\n    if (remove_empty_directories(ref_file)) {\n      last_errno = *_errno_location();\n      error((int)String, (int)orig_ref, v5);\n    error_return:\n      unlock_ref(lock);\n      *_errno_location() = last_errno;\n      return Number L;\n    }\n    refa = resolve_ref(orig_ref, lock->old_sha1, mustexist, &type);\n  }\n  if (type_p)\n    *type_p = type;\n  if (!refa) {\n    last_errno = *_errno_location();\n    v6 = _errno_location();\n    v7 = strerror(*v6);\n    error((int)String, (int)orig_ref, v7);\n    goto error_return;\n  }\n  missing = is_null_sha1(lock->old_sha1);\n  if (missing) {\n    v8 = get_packed_refs(Number L);\n    if (!is_refname_available(refa, Number L, v8, Number)) {\n      last_errno = Number;\n      goto error_return;\n    }\n  }\n  v9 = (lock_file *)xcalloc(Number L, Number L);\n  lock->lk = v9;\n  lflags = Number;\n  if ((flagsa & Number) != Number) {\n    refa = orig_ref;\n    lflags |= Number;\n  }\n  v10 = (char *)xstrdup(refa);\n  lock->ref_name = v10;\n  v11 = (char *)xstrdup(orig_ref);\n  lock->orig_ref_name = v11;\n  ref_file = (char *)git_path(String, refa);\n  if (missing)\n    lock->force_write = Number;\n  if ((flagsa & Number) != Number && (type & Number) != Number)\n    lock->force_write = Number;\n  if ((unsigned int)safe_create_leading_directories(ref_file)) {\n    last_errno = *_errno_location();\n    error((int)String, (int)ref_file, v12);\n    goto error_return;\n  }\n  v13 = hold_lock_file_for_update(lock->lk, ref_file, (unsigned int)lflags);\n  lock->lock_fd = v13;\n  if (old_sha1)\n    result = verify_lock(lock, old_sha1, mustexist);\n  else\n    result = lock;\n  return result;\n}", "var": [], "body_in_train": false}, {"repo_owner": "BlastarIndia", "repo_name": "Blastarix", "path": "BlastarIndia/Blastarix/9fc221ba749f2ea6522131d48af4b04c8487284a64ffa490c18e420c15d1c3b2", "path_in_repo": "BlastarIndia/Blastarix/qemu-1.7.0/ui/vnc-enc-hextile.o", "objdump": "0000000000001465 <vnc_hextile_send_framebuffer_update>:\n    1465:\t55                   \tpush   %rbp\n    1466:\t48 89 e5             \tmov    %rsp,%rbp\n    1469:\t48 83 ec 50          \tsub    $0x50,%rsp\n    146d:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    1471:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    1474:\t89 55 c0             \tmov    %edx,-0x40(%rbp)\n    1477:\t89 4d bc             \tmov    %ecx,-0x44(%rbp)\n    147a:\t44 89 45 b8          \tmov    %r8d,-0x48(%rbp)\n    147e:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    1485:\t00 00 \n    1487:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    148b:\t31 c0                \txor    %eax,%eax\n    148d:\tbf 04 00 00 00       \tmov    $0x4,%edi\n    1492:\te8 00 00 00 00       \tcallq  1497 <vnc_hextile_send_framebuffer_update+0x32>\n    1497:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    149b:\tbf 04 00 00 00       \tmov    $0x4,%edi\n    14a0:\te8 00 00 00 00       \tcallq  14a5 <vnc_hextile_send_framebuffer_update+0x40>\n    14a5:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    14a9:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    14b0:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    14b3:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    14b6:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    14b9:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    14bc:\te9 82 00 00 00       \tjmpq   1543 <vnc_hextile_send_framebuffer_update+0xde>\n    14c1:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    14c4:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    14c7:\teb 69                \tjmp    1532 <vnc_hextile_send_framebuffer_update+0xcd>\n    14c9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    14cd:\t4c 8b 90 f0 c5 00 00 \tmov    0xc5f0(%rax),%r10\n    14d4:\t8b 55 c0             \tmov    -0x40(%rbp),%edx\n    14d7:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n    14da:\t01 d0                \tadd    %edx,%eax\n    14dc:\t2b 45 e4             \tsub    -0x1c(%rbp),%eax\n    14df:\tba 10 00 00 00       \tmov    $0x10,%edx\n    14e4:\t83 f8 10             \tcmp    $0x10,%eax\n    14e7:\t0f 4e d0             \tcmovle %eax,%edx\n    14ea:\t41 89 d0             \tmov    %edx,%r8d\n    14ed:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    14f0:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    14f3:\t01 d0                \tadd    %edx,%eax\n    14f5:\t2b 45 e0             \tsub    -0x20(%rbp),%eax\n    14f8:\tba 10 00 00 00       \tmov    $0x10,%edx\n    14fd:\t83 f8 10             \tcmp    $0x10,%eax\n    1500:\t89 d1                \tmov    %edx,%ecx\n    1502:\t0f 4e c8             \tcmovle %eax,%ecx\n    1505:\t4c 8b 4d f0          \tmov    -0x10(%rbp),%r9\n    1509:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    150c:\t8b 75 e0             \tmov    -0x20(%rbp),%esi\n    150f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1513:\t48 83 ec 08          \tsub    $0x8,%rsp\n    1517:\t48 8d 7d d8          \tlea    -0x28(%rbp),%rdi\n    151b:\t57                   \tpush   %rdi\n    151c:\t48 8d 7d dc          \tlea    -0x24(%rbp),%rdi\n    1520:\t57                   \tpush   %rdi\n    1521:\tff 75 e8             \tpushq  -0x18(%rbp)\n    1524:\t48 89 c7             \tmov    %rax,%rdi\n    1527:\t41 ff d2             \tcallq  *%r10\n    152a:\t48 83 c4 20          \tadd    $0x20,%rsp\n    152e:\t83 45 e0 10          \taddl   $0x10,-0x20(%rbp)\n    1532:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n    1535:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    1538:\t01 d0                \tadd    %edx,%eax\n    153a:\t39 45 e0             \tcmp    %eax,-0x20(%rbp)\n    153d:\t7c 8a                \tjl     14c9 <vnc_hextile_send_framebuffer_update+0x64>\n    153f:\t83 45 e4 10          \taddl   $0x10,-0x1c(%rbp)\n    1543:\t8b 55 c0             \tmov    -0x40(%rbp),%edx\n    1546:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n    1549:\t01 d0                \tadd    %edx,%eax\n    154b:\t39 45 e4             \tcmp    %eax,-0x1c(%rbp)\n    154e:\t0f 8c 6d ff ff ff    \tjl     14c1 <vnc_hextile_send_framebuffer_update+0x5c>\n    1554:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1558:\t48 89 c7             \tmov    %rax,%rdi\n    155b:\te8 00 00 00 00       \tcallq  1560 <vnc_hextile_send_framebuffer_update+0xfb>\n    1560:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    1564:\t48 89 c7             \tmov    %rax,%rdi\n    1567:\te8 00 00 00 00       \tcallq  156c <vnc_hextile_send_framebuffer_update+0x107>\n    156c:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1571:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n    1575:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n    157c:\t00 00 \n    157e:\t74 05                \tje     1585 <vnc_hextile_send_framebuffer_update+0x120>\n    1580:\te8 00 00 00 00       \tcallq  1585 <vnc_hextile_send_framebuffer_update+0x120>\n    1585:\tc9                   \tleaveq \n    1586:\tc3                   \tretq   ", "code_s": "__int64 __fastcall vnc_hextile_send_framebuffer_update(__int64 a1,\n                                                       unsigned int a2,\n                                                       unsigned int a3, int a4,\n                                                       int a5) {\n  unsigned int v5;\n  int v6;\n  __int64 v7;\n  int v12;\n  int v13;\n  unsigned int j;\n  unsigned int i;\n  __int64 v16;\n  __int64 v17;\n  unsigned __int64 v18;\n  v18 = __readfsqword(Number);\n  v16 = g_malloc(Number L);\n  v17 = g_malloc(Number L);\n  v13 = Number;\n  v12 = Number;\n  for (i = a3; (int)i < (int)(a3 + a5); i += Number) {\n    for (j = a2; (int)j < (int)(a2 + a4); j += Number) {\n      v5 = Number;\n      if ((int)(a3 + a5 - i) <= Number)\n        v5 = a3 + a5 - i;\n      v6 = a2 + a4 - j;\n      v7 = Number L;\n      if (v6 <= Number)\n        v7 = (unsigned int)v6;\n      (*(void(__fastcall **)(__int64, _QWORD, _QWORD, __int64, _QWORD, __int64,\n                             __int64, int *, int *))(a1 + Number))(\n          a1, j, i, v7, v5, v17, v16, &v13, &v12);\n    }\n  }\n  g_free(v16);\n  g_free(v17);\n  return Number L;\n}", "code_t": "int __cdecl vnc_hextile_send_framebuffer_update(VncState_0 *vs, int x, int y,\n                                                int w, int h) {\n  int v5;\n  int v6;\n  __int64 v7;\n  int has_fg;\n  int has_bg;\n  int i;\n  int j;\n  uint8_t *last_fg;\n  uint8_t *last_bg;\n  unsigned __int64 v18;\n  v18 = __readfsqword(Number);\n  last_fg = (uint8_t *)g_malloc(Number L);\n  last_bg = (uint8_t *)g_malloc(Number L);\n  has_bg = Number;\n  has_fg = Number;\n  for (j = y; j < y + h; j += Number) {\n    for (i = x; i < x + w; i += Number) {\n      v5 = Number;\n      if (y + h - j <= Number)\n        v5 = y + h - j;\n      v6 = x + w - i;\n      v7 = Number L;\n      if (v6 <= Number)\n        v7 = (unsigned int)v6;\n      vs->hextile.send_tile(vs, i, j, v7, v5, last_bg, last_fg, &has_bg,\n                            &has_fg);\n    }\n  }\n  g_free(last_fg);\n  g_free(last_bg);\n  return Number;\n}", "var": [], "body_in_train": false}, {"repo_owner": "AICP", "repo_name": "kernel_htc_msm8994", "path": "AICP/kernel_htc_msm8994/316300b471037d506859bfd87099e16f7028c347368ddff540f4dc8fc93c9a6b", "path_in_repo": "AICP/kernel_htc_msm8994/tools/perf/util/header.o", "objdump": "0000000000000d03 <do_read_string>:\n     d03:\t55                   \tpush   %rbp\n     d04:\t48 89 e5             \tmov    %rsp,%rbp\n     d07:\t48 83 ec 40          \tsub    $0x40,%rsp\n     d0b:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n     d0e:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n     d12:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     d19:\t00 00 \n     d1b:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d1f:\t31 c0                \txor    %eax,%eax\n     d21:\t48 8d 4d dc          \tlea    -0x24(%rbp),%rcx\n     d25:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     d28:\tba 04 00 00 00       \tmov    $0x4,%edx\n     d2d:\t48 89 ce             \tmov    %rcx,%rsi\n     d30:\t89 c7                \tmov    %eax,%edi\n     d32:\te8 00 00 00 00       \tcallq  d37 <do_read_string+0x34>\n     d37:\t48 98                \tcltq   \n     d39:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     d3d:\t48 83 7d e0 03       \tcmpq   $0x3,-0x20(%rbp)\n     d42:\t7f 07                \tjg     d4b <do_read_string+0x48>\n     d44:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d49:\teb 76                \tjmp    dc1 <do_read_string+0xbe>\n     d4b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     d4f:\t0f b6 40 04          \tmovzbl 0x4(%rax),%eax\n     d53:\t84 c0                \ttest   %al,%al\n     d55:\t74 0d                \tje     d64 <do_read_string+0x61>\n     d57:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     d5a:\t89 c7                \tmov    %eax,%edi\n     d5c:\te8 9f f2 ff ff       \tcallq  0 <__bswap_32>\n     d61:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n     d64:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     d67:\t89 c0                \tmov    %eax,%eax\n     d69:\t48 89 c7             \tmov    %rax,%rdi\n     d6c:\te8 00 00 00 00       \tcallq  d71 <do_read_string+0x6e>\n     d71:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     d75:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     d7a:\t75 07                \tjne    d83 <do_read_string+0x80>\n     d7c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d81:\teb 3e                \tjmp    dc1 <do_read_string+0xbe>\n     d83:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     d86:\t89 c2                \tmov    %eax,%edx\n     d88:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n     d8c:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n     d8f:\t48 89 ce             \tmov    %rcx,%rsi\n     d92:\t89 c7                \tmov    %eax,%edi\n     d94:\te8 00 00 00 00       \tcallq  d99 <do_read_string+0x96>\n     d99:\t48 98                \tcltq   \n     d9b:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     d9f:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n     da2:\t89 c0                \tmov    %eax,%eax\n     da4:\t48 39 45 f0          \tcmp    %rax,-0x10(%rbp)\n     da8:\t75 06                \tjne    db0 <do_read_string+0xad>\n     daa:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     dae:\teb 11                \tjmp    dc1 <do_read_string+0xbe>\n     db0:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     db4:\t48 89 c7             \tmov    %rax,%rdi\n     db7:\te8 00 00 00 00       \tcallq  dbc <do_read_string+0xb9>\n     dbc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     dc1:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n     dc5:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n     dcc:\t00 00 \n     dce:\t74 05                \tje     dd5 <do_read_string+0xd2>\n     dd0:\te8 00 00 00 00       \tcallq  dd5 <do_read_string+0xd2>\n     dd5:\tc9                   \tleaveq \n     dd6:\tc3                   \tretq   ", "code_s": "void *__fastcall do_read_string(unsigned int a1, __int64 a2) {\n  unsigned int size[Number];\n  void *ptr;\n  __int64 v5;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  *(_QWORD *)&size[Number] = (int)readn(a1, size, Number L);\n  if (*(__int64 *)&size[Number] <= Number)\n    return Number L;\n  if (*(_BYTE *)(a2 + Number))\n    size[Number] = _bswap_32(size[Number]);\n  ptr = malloc(size[Number]);\n  if (!ptr)\n    return Number L;\n  v5 = (int)readn(a1, ptr, size[Number]);\n  if (v5 == size[Number])\n    return ptr;\n  free(ptr);\n  return Number L;\n}", "code_t": "char *__cdecl do_read_string(int fd, perf_header *ph) {\n  u32 len;\n  ssize_t sz;\n  char *buf;\n  ssize_t ret;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  sz = (int)readn((unsigned int)fd, &len, Number L);\n  if (sz <= Number)\n    return Number L;\n  if (ph->needs_swap)\n    len = _bswap_32(len);\n  buf = (char *)malloc(len);\n  if (!buf)\n    return Number L;\n  ret = (int)readn((unsigned int)fd, buf, len);\n  if (ret == len)\n    return buf;\n  free(buf);\n  return Number L;\n}", "var": [], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/7e0ccd139ec4e288be30e1f86458aeb266d18752a4ba571bc7b2ab7505fe4227", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/88games.o", "objdump": "0000000000000000 <_Z12device_stateP8device_t>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t41 54                \tpush   %r12\n   6:\t53                   \tpush   %rbx\n   7:\t48 83 ec 20          \tsub    $0x20,%rsp\n   b:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   f:\t48 8d 55 e8          \tlea    -0x18(%rbp),%rdx\n  13:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  17:\t48 89 d6             \tmov    %rdx,%rsi\n  1a:\t48 89 c7             \tmov    %rax,%rdi\n  1d:\te8 00 00 00 00       \tcallq  22 <_Z12device_stateP8device_t+0x22>\n  22:\t83 f0 01             \txor    $0x1,%eax\n  25:\t84 c0                \ttest   %al,%al\n  27:\t74 40                \tje     69 <_Z12device_stateP8device_t+0x69>\n  29:\tbf 10 04 00 00       \tmov    $0x410,%edi\n  2e:\te8 00 00 00 00       \tcallq  33 <_Z12device_stateP8device_t+0x33>\n  33:\t48 89 c3             \tmov    %rax,%rbx\n  36:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  3a:\t48 89 c7             \tmov    %rax,%rdi\n  3d:\te8 00 00 00 00       \tcallq  42 <_Z12device_stateP8device_t+0x42>\n  42:\t48 89 c2             \tmov    %rax,%rdx\n  45:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4a:\t48 89 df             \tmov    %rbx,%rdi\n  4d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  52:\te8 00 00 00 00       \tcallq  57 <_Z12device_stateP8device_t+0x57>\n  57:\tba 00 00 00 00       \tmov    $0x0,%edx\n  5c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  61:\t48 89 df             \tmov    %rbx,%rdi\n  64:\te8 00 00 00 00       \tcallq  69 <_Z12device_stateP8device_t+0x69>\n  69:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  6d:\teb 16                \tjmp    85 <_Z12device_stateP8device_t+0x85>\n  6f:\t49 89 c4             \tmov    %rax,%r12\n  72:\t48 89 df             \tmov    %rbx,%rdi\n  75:\te8 00 00 00 00       \tcallq  7a <_Z12device_stateP8device_t+0x7a>\n  7a:\t4c 89 e0             \tmov    %r12,%rax\n  7d:\t48 89 c7             \tmov    %rax,%rdi\n  80:\te8 00 00 00 00       \tcallq  85 <_Z12device_stateP8device_t+0x85>\n  85:\t48 83 c4 20          \tadd    $0x20,%rsp\n  89:\t5b                   \tpop    %rbx\n  8a:\t41 5c                \tpop    %r12\n  8c:\t5d                   \tpop    %rbp\n  8d:\tc3                   \tretq   ", "code_s": "device_state_interface *__fastcall device_state(device_t *a1) {\n  emu_fatalerror *v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  device_state_interface *v7;\n  if (!device_t dev_interface(a1, &v7)) {\n    v1 = (emu_fatalerror *)_cxa_allocate_exception(Number);\n    v2 = device_t tag(a1);\n    emu_fatalerror emu_fatalerror(v1, String, v2, v3, v4, v5); _cxa_throw ( v1 , ( struct type_info * ) & ` typeinfo for ' emu_fatalerror , emu_fatalerror ~ emu_fatalerror ) ; } return v7 ; }", "code_t": "device_state_interface *__cdecl device_state(device_t *device) {\n  emu_fatalerror *v1;\n  const char *v2;\n  device_state_interface *intf;\n  if (!device_t dev_interface(device, &intf)) {\n    v1 = (emu_fatalerror *)_cxa_allocate_exception(Number);\n    v2 = device_t tag(device);\n    emu_fatalerror emu_fatalerror(v1, String, v2); _cxa_throw ( v1 , ( struct type_info * ) & ` typeinfo for ' emu_fatalerror , ( void ( __fastcall * ) ( void * ) ) emu_fatalerror ~ emu_fatalerror ) ; } return intf ; }", "var": [], "body_in_train": true}, {"repo_owner": "wlanjie", "repo_name": "MacFFPlay", "path": "wlanjie/MacFFPlay/d0d99f8742d7d47328d04aefaad00c3b59a386eecf8287653c32774910ae5c36", "path_in_repo": "wlanjie/MacFFPlay/ffmpeg/libavcodec/error_resilience.o", "objdump": "000000000000007b <put_bits>:\n      7b:\t48 83 ec 28          \tsub    $0x28,%rsp\n      7f:\t48 89 7c 24 08       \tmov    %rdi,0x8(%rsp)\n      84:\t89 74 24 04          \tmov    %esi,0x4(%rsp)\n      88:\t89 14 24             \tmov    %edx,(%rsp)\n      8b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n      90:\t8b 00                \tmov    (%rax),%eax\n      92:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n      96:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n      9b:\t8b 40 04             \tmov    0x4(%rax),%eax\n      9e:\t89 44 24 18          \tmov    %eax,0x18(%rsp)\n      a2:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n      a6:\t3b 44 24 18          \tcmp    0x18(%rsp),%eax\n      aa:\t7d 22                \tjge    ce <put_bits+0x53>\n      ac:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n      b0:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n      b4:\t89 c1                \tmov    %eax,%ecx\n      b6:\td3 e2                \tshl    %cl,%edx\n      b8:\t89 d0                \tmov    %edx,%eax\n      ba:\t0b 04 24             \tor     (%rsp),%eax\n      bd:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n      c1:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n      c5:\t29 44 24 18          \tsub    %eax,0x18(%rsp)\n      c9:\te9 c8 00 00 00       \tjmpq   196 <put_bits+0x11b>\n      ce:\t8b 44 24 18          \tmov    0x18(%rsp),%eax\n      d2:\t89 c1                \tmov    %eax,%ecx\n      d4:\td3 64 24 1c          \tshll   %cl,0x1c(%rsp)\n      d8:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n      dc:\t2b 44 24 18          \tsub    0x18(%rsp),%eax\n      e0:\t8b 14 24             \tmov    (%rsp),%edx\n      e3:\t89 c1                \tmov    %eax,%ecx\n      e5:\td3 ea                \tshr    %cl,%edx\n      e7:\t89 d0                \tmov    %edx,%eax\n      e9:\t09 44 24 1c          \tor     %eax,0x1c(%rsp)\n      ed:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n      f2:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n      f6:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n      fb:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n      ff:\t48 29 c2             \tsub    %rax,%rdx\n     102:\t48 89 d0             \tmov    %rdx,%rax\n     105:\t48 83 f8 03          \tcmp    $0x3,%rax\n     109:\t7e 5e                \tjle    169 <put_bits+0xee>\n     10b:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     110:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     114:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n     118:\t89 54 24 14          \tmov    %edx,0x14(%rsp)\n     11c:\t8b 54 24 14          \tmov    0x14(%rsp),%edx\n     120:\tc1 e2 08             \tshl    $0x8,%edx\n     123:\t0f b7 ca             \tmovzwl %dx,%ecx\n     126:\t8b 54 24 14          \tmov    0x14(%rsp),%edx\n     12a:\tc1 ea 08             \tshr    $0x8,%edx\n     12d:\t0f b6 d2             \tmovzbl %dl,%edx\n     130:\t09 ca                \tor     %ecx,%edx\n     132:\t89 d6                \tmov    %edx,%esi\n     134:\tc1 e6 10             \tshl    $0x10,%esi\n     137:\t8b 54 24 14          \tmov    0x14(%rsp),%edx\n     13b:\tc1 ea 10             \tshr    $0x10,%edx\n     13e:\tc1 e2 08             \tshl    $0x8,%edx\n     141:\t0f b7 d2             \tmovzwl %dx,%edx\n     144:\t8b 4c 24 14          \tmov    0x14(%rsp),%ecx\n     148:\tc1 e9 18             \tshr    $0x18,%ecx\n     14b:\t09 ca                \tor     %ecx,%edx\n     14d:\t09 f2                \tor     %esi,%edx\n     14f:\t89 10                \tmov    %edx,(%rax)\n     151:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     156:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     15a:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n     15e:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     163:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     167:\teb 19                \tjmp    182 <put_bits+0x107>\n     169:\tba 00 00 00 00       \tmov    $0x0,%edx\n     16e:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     173:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     178:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     17d:\te8 00 00 00 00       \tcallq  182 <put_bits+0x107>\n     182:\tb8 20 00 00 00       \tmov    $0x20,%eax\n     187:\t2b 44 24 04          \tsub    0x4(%rsp),%eax\n     18b:\t01 44 24 18          \tadd    %eax,0x18(%rsp)\n     18f:\t8b 04 24             \tmov    (%rsp),%eax\n     192:\t89 44 24 1c          \tmov    %eax,0x1c(%rsp)\n     196:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     19b:\t8b 54 24 1c          \tmov    0x1c(%rsp),%edx\n     19f:\t89 10                \tmov    %edx,(%rax)\n     1a1:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n     1a6:\t8b 54 24 18          \tmov    0x18(%rsp),%edx\n     1aa:\t89 50 04             \tmov    %edx,0x4(%rax)\n     1ad:\t90                   \tnop\n     1ae:\t48 83 c4 28          \tadd    $0x28,%rsp\n     1b2:\tc3                   \tretq   ", "code_s": "int *__fastcall put_bits(int *a1, int a2, unsigned int a3) {\n  int *result;\n  int v5;\n  int v6;\n  int v7;\n  int v8;\n  unsigned int v9;\n  v7 = *a1;\n  v5 = a1[Number];\n  if (a2 >= v5) {\n    v9 = (a3 >> (a2 - v5)) | (v7 << v5);\n    if ((__int64)(*((_QWORD *)a1 + Number) - *((_QWORD *)a1 + Number)) <=\n        Number) {\n      av_log(Number L, Number L, String);\n    } else {\n      **((_DWORD **)a1 + Number) =\n          (((unsigned __int16)((_WORD)v9 << Number) | BYTE1(v9)) << Number) |\n          HIBYTE(v9) | (unsigned __int16)(HIWORD(v9) << Number);\n      *((_QWORD *)a1 + Number) += Number L;\n    }\n    v6 = Number - a2 + v5;\n    v8 = a3;\n  } else {\n    v8 = a3 | (v7 << a2);\n    v6 = v5 - a2;\n  }\n  *a1 = v8;\n  result = a1;\n  a1[Number] = v6;\n  return result;\n}", "code_t": "void __cdecl put_bits(PutBitContext_0 *s, int n, unsigned int value) {\n  int bit_left;\n  int bit_lefta;\n  unsigned int bit_buf;\n  uint32_t bit_bufa;\n  unsigned int bit_bufb;\n  bit_buf = s->bit_buf;\n  bit_left = s->bit_left;\n  if (n >= bit_left) {\n    bit_bufb = (value >> (n - bit_left)) | (bit_buf << bit_left);\n    if (s->buf_end - s->buf_ptr <= Number) {\n      av_log(Number L, Number L, String);\n    } else {\n      *(_DWORD *)s->buf_ptr =\n          (((unsigned __int16)((_WORD)bit_bufb << Number) | BYTE1(bit_bufb))\n           << Number) |\n          HIBYTE(bit_bufb) | (unsigned __int16)(HIWORD(bit_bufb) << Number);\n      s->buf_ptr += Number;\n    }\n    bit_lefta = Number - n + bit_left;\n    bit_bufa = value;\n  } else {\n    bit_bufa = value | (bit_buf << n);\n    bit_lefta = bit_left - n;\n  }\n  s->bit_buf = bit_bufa;\n  s->bit_left = bit_lefta;\n}", "var": [], "body_in_train": true}, {"repo_owner": "nypdmax", "repo_name": "NUMA", "path": "nypdmax/NUMA/8528089515c3bdbd4f367a8c25e9667484e9682955ae2b8db1587747c4a502d5", "path_in_repo": "nypdmax/NUMA/tools/qemu-xen/hw/block/pflash_cfi01.o", "objdump": "0000000000000128 <extract32>:\n     128:\t55                   \tpush   %rbp\n     129:\t48 89 e5             \tmov    %rsp,%rbp\n     12c:\t48 83 ec 10          \tsub    $0x10,%rsp\n     130:\t89 7d fc             \tmov    %edi,-0x4(%rbp)\n     133:\t89 75 f8             \tmov    %esi,-0x8(%rbp)\n     136:\t89 55 f4             \tmov    %edx,-0xc(%rbp)\n     139:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n     13d:\t78 13                \tjs     152 <extract32+0x2a>\n     13f:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n     143:\t7e 0d                \tjle    152 <extract32+0x2a>\n     145:\tb8 20 00 00 00       \tmov    $0x20,%eax\n     14a:\t2b 45 f8             \tsub    -0x8(%rbp),%eax\n     14d:\t39 45 f4             \tcmp    %eax,-0xc(%rbp)\n     150:\t7e 1f                \tjle    171 <extract32+0x49>\n     152:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 159 <extract32+0x31>\n     159:\tba 19 01 00 00       \tmov    $0x119,%edx\n     15e:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 165 <extract32+0x3d>\n     165:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 16c <extract32+0x44>\n     16c:\te8 00 00 00 00       \tcallq  171 <extract32+0x49>\n     171:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     174:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     177:\t89 c1                \tmov    %eax,%ecx\n     179:\td3 ea                \tshr    %cl,%edx\n     17b:\tb8 20 00 00 00       \tmov    $0x20,%eax\n     180:\t2b 45 f4             \tsub    -0xc(%rbp),%eax\n     183:\tbe ff ff ff ff       \tmov    $0xffffffff,%esi\n     188:\t89 c1                \tmov    %eax,%ecx\n     18a:\td3 ee                \tshr    %cl,%esi\n     18c:\t89 f0                \tmov    %esi,%eax\n     18e:\t21 d0                \tand    %edx,%eax\n     190:\tc9                   \tleaveq \n     191:\tc3                   \tretq   ", "code_s": "__int64 __fastcall extract32(unsigned int a1, int a2, int a3) {\n  if (a2 < Number || a3 <= Number || a3 > Number - a2)\n    _assert_fail(String, String, Number, String);\n  return (a1 >> a2) & (Number >> (Number - a3));\n}", "code_t": "uint32_t __cdecl extract32(uint32_t value, int start, int length) {\n  if (start < Number || length <= Number || length > Number - start)\n    _assert_fail(String, String, Number, String);\n  return (value >> start) & (Number >> (Number - length));\n}", "var": [], "body_in_train": true}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/d6b6466f6c90e5b2565ef22189fb44ef4c38aeb41f5ad0967e3fa7ff5d3da89c", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/video/system1.o", "objdump": "0000000000000c1c <_Z18system1_videoram_wP13address_spacejh>:\n     c1c:\t55                   \tpush   %rbp\n     c1d:\t48 89 e5             \tmov    %rsp,%rbp\n     c20:\t48 83 ec 20          \tsub    $0x20,%rsp\n     c24:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n     c28:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n     c2b:\t89 d0                \tmov    %edx,%eax\n     c2d:\t88 45 e0             \tmov    %al,-0x20(%rbp)\n     c30:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c34:\t48 89 c7             \tmov    %rax,%rdi\n     c37:\te8 00 00 00 00       \tcallq  c3c <_Z18system1_videoram_wP13address_spacejh+0x20>\n     c3c:\t48 89 c7             \tmov    %rax,%rdi\n     c3f:\te8 00 00 00 00       \tcallq  c44 <_Z18system1_videoram_wP13address_spacejh+0x28>\n     c44:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     c48:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     c4c:\t48 8b 80 f0 01 00 00 \tmov    0x1f0(%rax),%rax\n     c53:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     c57:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c5b:\t48 89 c7             \tmov    %rax,%rdi\n     c5e:\te8 00 00 00 00       \tcallq  c63 <_Z18system1_videoram_wP13address_spacejh+0x47>\n     c63:\t48 8b 80 58 03 00 00 \tmov    0x358(%rax),%rax\n     c6a:\t48 89 c7             \tmov    %rax,%rdi\n     c6d:\te8 c5 fe ff ff       \tcallq  b37 <_ZL20videoram_wait_statesP10cpu_device>\n     c72:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     c76:\t0f b6 80 59 02 00 00 \tmovzbl 0x259(%rax),%eax\n     c7d:\t0f b6 c0             \tmovzbl %al,%eax\n     c80:\td1 f8                \tsar    %eax\n     c82:\t89 c2                \tmov    %eax,%edx\n     c84:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     c88:\t0f b6 80 a0 02 00 00 \tmovzbl 0x2a0(%rax),%eax\n     c8f:\td0 e8                \tshr    %al\n     c91:\t0f b6 c8             \tmovzbl %al,%ecx\n     c94:\t89 d0                \tmov    %edx,%eax\n     c96:\t99                   \tcltd   \n     c97:\tf7 f9                \tidiv   %ecx\n     c99:\t89 d0                \tmov    %edx,%eax\n     c9b:\tc1 e0 0c             \tshl    $0xc,%eax\n     c9e:\t09 45 e4             \tor     %eax,-0x1c(%rbp)\n     ca1:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n     ca4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     ca8:\t48 01 c2             \tadd    %rax,%rdx\n     cab:\t0f b6 45 e0          \tmovzbl -0x20(%rbp),%eax\n     caf:\t88 02                \tmov    %al,(%rdx)\n     cb1:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     cb4:\t25 ff 07 00 00       \tand    $0x7ff,%eax\n     cb9:\td1 e8                \tshr    %eax\n     cbb:\t89 c2                \tmov    %eax,%edx\n     cbd:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     cc0:\tc1 e8 0b             \tshr    $0xb,%eax\n     cc3:\t89 c1                \tmov    %eax,%ecx\n     cc5:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     cc9:\t89 c9                \tmov    %ecx,%ecx\n     ccb:\t48 83 c1 4c          \tadd    $0x4c,%rcx\n     ccf:\t48 8b 04 c8          \tmov    (%rax,%rcx,8),%rax\n     cd3:\t89 d6                \tmov    %edx,%esi\n     cd5:\t48 89 c7             \tmov    %rax,%rdi\n     cd8:\te8 00 00 00 00       \tcallq  cdd <_Z18system1_videoram_wP13address_spacejh+0xc1>\n     cdd:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     ce1:\t0f b6 80 a0 02 00 00 \tmovzbl 0x2a0(%rax),%eax\n     ce8:\t3c 02                \tcmp    $0x2,%al\n     cea:\t76 37                \tjbe    d23 <_Z18system1_videoram_wP13address_spacejh+0x107>\n     cec:\t81 7d e4 3f 07 00 00 \tcmpl   $0x73f,-0x1c(%rbp)\n     cf3:\t76 2e                \tjbe    d23 <_Z18system1_videoram_wP13address_spacejh+0x107>\n     cf5:\t81 7d e4 47 07 00 00 \tcmpl   $0x747,-0x1c(%rbp)\n     cfc:\t77 25                \tja     d23 <_Z18system1_videoram_wP13address_spacejh+0x107>\n     cfe:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n     d01:\t83 e0 01             \tand    $0x1,%eax\n     d04:\t85 c0                \ttest   %eax,%eax\n     d06:\t75 1b                \tjne    d23 <_Z18system1_videoram_wP13address_spacejh+0x107>\n     d08:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d0c:\t48 89 c7             \tmov    %rax,%rdi\n     d0f:\te8 00 00 00 00       \tcallq  d14 <_Z18system1_videoram_wP13address_spacejh+0xf8>\n     d14:\t48 8b 80 60 04 00 00 \tmov    0x460(%rax),%rax\n     d1b:\t48 89 c7             \tmov    %rax,%rdi\n     d1e:\te8 00 00 00 00       \tcallq  d23 <_Z18system1_videoram_wP13address_spacejh+0x107>\n     d23:\t90                   \tnop\n     d24:\tc9                   \tleaveq \n     d25:\tc3                   \tretq   ", "code_s": "__int64 __fastcall system1_videoram_w(address_space *a1, int a2, char a3) {\n  __int64 v3;\n  __int64 v4;\n  __int64 result;\n  __int64 v6;\n  unsigned int v8;\n  __int64 v9;\n  __int64 v10;\n  v3 = address_space machine(a1);\n  v10 = running_machine driver_data<system1_state>(v3);\n  v9 = *(_QWORD *)(v10 + Number);\n  v4 = address_space machine(a1);\n  videoram_wait_states(*(_QWORD *)(v4 + Number));\n  v8 = ((((int)*(unsigned __int8 *)(v10 + Number) >> Number) %\n         (*(_BYTE *)(v10 + Number) >> Number))\n        << Number) |\n       a2;\n  *(_BYTE *)(v9 + v8) = a3;\n  tilemap_mark_tile_dirty(\n      *(_QWORD *)(v10 + Number * ((v8 >> Number) + Number L)),\n      (unsigned __int16)(v8 & Number) >> Number);\n  result = *(unsigned __int8 *)(v10 + Number);\n  if ((unsigned __int8)result > Number && v8 > Number && v8 <= Number) {\n    result = v8 & Number;\n    if ((v8 & Number) == Number) {\n      v6 = address_space machine(a1);\n      result = screen_device update_now(*(screen_device **)(v6 + Number));\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl system1_videoram_w(address_space *space, offs_t offset,\n                                UINT8 data) {\n  running_machine *v3;\n  running_machine *v4;\n  running_machine *v5;\n  offs_t offseta;\n  UINT8 *videoram;\n  system1_state *state;\n  v3 = address_space machine(space);\n  state = running_machine driver_data<system1_state>(v3);\n  videoram = state->m_videoram;\n  v4 = address_space machine(space);\n  videoram_wait_states(v4->firstcpu);\n  offseta = ((((int)state->m_videoram_bank >> Number) %\n              (state->m_tilemap_pages >> Number))\n             << Number) |\n            offset;\n  videoram[offseta] = data;\n  tilemap_mark_tile_dirty(state->m_tilemap_page[offseta >> Number],\n                          (unsigned __int16)(offseta & Number) >> Number);\n  if (state->m_tilemap_pages > Number && offseta > Number &&\n      offseta <= Number && (offseta & Number) == Number) {\n    v5 = address_space machine(space);\n    screen_device update_now(v5->primary_screen);\n  }\n}", "var": [], "body_in_train": false}, {"repo_owner": "sethsong90", "repo_name": "vendor_qcom", "path": "sethsong90/vendor_qcom/e8d00195b15b05d33fa2ca8e484c177b85f0815d5f401135965aed3f21bd83f9", "path_in_repo": "sethsong90/vendor_qcom/llvm-rs/lib/CodeGen/SelectionDAG/Release+Asserts/InstrEmitter.o", "objdump": "0000000000000600 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE>:\n     600:\t41 57                \tpush   %r15\n     602:\t41 56                \tpush   %r14\n     604:\t41 55                \tpush   %r13\n     606:\t41 54                \tpush   %r12\n     608:\t55                   \tpush   %rbp\n     609:\t53                   \tpush   %rbx\n     60a:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n     611:\t89 4c 24 38          \tmov    %ecx,0x38(%rsp)\n     615:\t44 89 4c 24 04       \tmov    %r9d,0x4(%rsp)\n     61a:\t41 81 f9 ff ff ff 3f \tcmp    $0x3fffffff,%r9d\n     621:\t0f 8f af 08 00 00    \tjg     ed6 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8d6>\n     627:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n     62b:\t49 89 f4             \tmov    %rsi,%r12\n     62e:\t41 89 d5             \tmov    %edx,%r13d\n     631:\t85 c0                \ttest   %eax,%eax\n     633:\t0f 88 ef 04 00 00    \tjs     b28 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x528>\n     639:\t0f b7 56 3a          \tmovzwl 0x3a(%rsi),%edx\n     63d:\t48 8b 46 28          \tmov    0x28(%rsi),%rax\n     641:\t41 39 d5             \tcmp    %edx,%r13d\n     644:\t0f 83 87 08 00 00    \tjae    ed1 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8d1>\n     64a:\t44 89 ea             \tmov    %r13d,%edx\n     64d:\t49 89 fa             \tmov    %rdi,%r10\n     650:\t48 c1 e2 04          \tshl    $0x4,%rdx\n     654:\t48 01 d0             \tadd    %rdx,%rax\n     657:\t8b 38                \tmov    (%rax),%edi\n     659:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     65d:\t89 7c 24 3c          \tmov    %edi,0x3c(%rsp)\n     661:\t89 ff                \tmov    %edi,%edi\n     663:\t48 89 44 24 28       \tmov    %rax,0x28(%rsp)\n     668:\t48 89 7c 24 30       \tmov    %rdi,0x30(%rsp)\n     66d:\t81 ff ff 00 00 00    \tcmp    $0xff,%edi\n     673:\t0f 8e 8f 02 00 00    \tjle    908 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x308>\n     679:\t45 89 c1             \tmov    %r8d,%r9d\n     67c:\t44 0a 4c 24 38       \tor     0x38(%rsp),%r9b\n     681:\t0f 85 f1 06 00 00    \tjne    d78 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x778>\n     687:\t4d 8b 7c 24 30       \tmov    0x30(%r12),%r15\n     68c:\t4d 85 ff             \ttest   %r15,%r15\n     68f:\t0f 84 9e 08 00 00    \tje     f33 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x933>\n     695:\t45 31 db             \txor    %r11d,%r11d\n     698:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n     69e:\teb 60                \tjmp    700 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x100>\n     6a0:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n     6a4:\t66 83 fa 02          \tcmp    $0x2,%dx\n     6a8:\t0f 86 0c 07 00 00    \tjbe    dba <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x7ba>\n     6ae:\t4c 3b 60 50          \tcmp    0x50(%rax),%r12\n     6b2:\t75 63                \tjne    717 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x117>\n     6b4:\t44 3b 68 58          \tcmp    0x58(%rax),%r13d\n     6b8:\t75 5d                \tjne    717 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x117>\n     6ba:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n     6be:\t66 83 78 18 08       \tcmpw   $0x8,0x18(%rax)\n     6c3:\t0f 85 e9 07 00 00    \tjne    eb2 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8b2>\n     6c9:\t8b 58 44             \tmov    0x44(%rax),%ebx\n     6cc:\t81 fb ff ff ff 3f    \tcmp    $0x3fffffff,%ebx\n     6d2:\t0f 8f fe 07 00 00    \tjg     ed6 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8d6>\n     6d8:\t85 db                \ttest   %ebx,%ebx\n     6da:\t0f 88 c0 02 00 00    \tjs     9a0 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x3a0>\n     6e0:\t3b 5c 24 04          \tcmp    0x4(%rsp),%ebx\n     6e4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     6e9:\t44 0f 45 c8          \tcmovne %eax,%r9d\n     6ed:\t4d 8b 7f 20          \tmov    0x20(%r15),%r15\n     6f1:\t4d 85 ff             \ttest   %r15,%r15\n     6f4:\t0f 84 6e 01 00 00    \tje     868 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x268>\n     6fa:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n     700:\t49 8b 6f 10          \tmov    0x10(%r15),%rbp\n     704:\t66 83 7d 18 29       \tcmpw   $0x29,0x18(%rbp)\n     709:\t0f b7 55 38          \tmovzwl 0x38(%rbp),%edx\n     70d:\t74 91                \tje     6a0 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0xa0>\n     70f:\t85 d2                \ttest   %edx,%edx\n     711:\t74 da                \tje     6ed <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0xed>\n     713:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n     717:\t44 8d 72 ff          \tlea    -0x1(%rdx),%r14d\n     71b:\t31 db                \txor    %ebx,%ebx\n     71d:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n     723:\teb 20                \tjmp    745 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x145>\n     725:\t0f 1f 00             \tnopl   (%rax)\n     728:\t4c 39 f3             \tcmp    %r14,%rbx\n     72b:\t0f 84 27 01 00 00    \tje     858 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x258>\n     731:\t0f b7 55 38          \tmovzwl 0x38(%rbp),%edx\n     735:\t48 83 c3 01          \tadd    $0x1,%rbx\n     739:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n     73d:\t39 da                \tcmp    %ebx,%edx\n     73f:\t0f 86 75 06 00 00    \tjbe    dba <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x7ba>\n     745:\t48 8d 14 9b          \tlea    (%rbx,%rbx,4),%rdx\n     749:\t48 8d 14 d0          \tlea    (%rax,%rdx,8),%rdx\n     74d:\t8b 42 08             \tmov    0x8(%rdx),%eax\n     750:\t4c 39 22             \tcmp    %r12,(%rdx)\n     753:\t40 0f 95 c6          \tsetne  %sil\n     757:\t44 39 e8             \tcmp    %r13d,%eax\n     75a:\t0f 95 c2             \tsetne  %dl\n     75d:\t40 08 d6             \tor     %dl,%sil\n     760:\t75 c6                \tjne    728 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x128>\n     762:\t41 0f b7 74 24 3a    \tmovzwl 0x3a(%r12),%esi\n     768:\t49 8b 54 24 28       \tmov    0x28(%r12),%rdx\n     76d:\t39 f0                \tcmp    %esi,%eax\n     76f:\t0f 83 ff 06 00 00    \tjae    e74 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x874>\n     775:\t48 c1 e0 04          \tshl    $0x4,%rax\n     779:\t8b 04 02             \tmov    (%rdx,%rax,1),%eax\n     77c:\t83 f8 24             \tcmp    $0x24,%eax\n     77f:\t74 a7                \tje     728 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x128>\n     781:\t85 c0                \ttest   %eax,%eax\n     783:\t74 a3                \tje     728 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x128>\n     785:\t0f bf 45 18          \tmovswl 0x18(%rbp),%eax\n     789:\t45 31 c0             \txor    %r8d,%r8d\n     78c:\t66 85 c0             \ttest   %ax,%ax\n     78f:\t79 97                \tjns    728 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x128>\n     791:\t49 8b 7a 18          \tmov    0x18(%r10),%rdi\n     795:\tf7 d0                \tnot    %eax\n     797:\t48 8b 57 08          \tmov    0x8(%rdi),%rdx\n     79b:\t39 47 20             \tcmp    %eax,0x20(%rdi)\n     79e:\t0f 86 51 07 00 00    \tjbe    ef5 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8f5>\n     7a4:\t48 98                \tcltq   \n     7a6:\t48 8d 34 40          \tlea    (%rax,%rax,2),%rsi\n     7aa:\t48 c1 e6 04          \tshl    $0x4,%rsi\n     7ae:\t48 01 d6             \tadd    %rdx,%rsi\n     7b1:\t0f b7 56 04          \tmovzwl 0x4(%rsi),%edx\n     7b5:\t0f b7 46 02          \tmovzwl 0x2(%rsi),%eax\n     7b9:\t01 da                \tadd    %ebx,%edx\n     7bb:\t39 c2                \tcmp    %eax,%edx\n     7bd:\t0f 83 65 ff ff ff    \tjae    728 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x128>\n     7c3:\t49 8b 4a 20          \tmov    0x20(%r10),%rcx\n     7c7:\t4c 89 5c 24 20       \tmov    %r11,0x20(%rsp)\n     7cc:\t44 88 4c 24 18       \tmov    %r9b,0x18(%rsp)\n     7d1:\t44 88 44 24 10       \tmov    %r8b,0x10(%rsp)\n     7d6:\t4c 89 54 24 08       \tmov    %r10,0x8(%rsp)\n     7db:\te8 00 00 00 00       \tcallq  7e0 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x1e0>\n     7e0:\t4c 8b 5c 24 20       \tmov    0x20(%rsp),%r11\n     7e5:\t4c 8b 54 24 08       \tmov    0x8(%rsp),%r10\n     7ea:\t44 0f b6 44 24 10    \tmovzbl 0x10(%rsp),%r8d\n     7f0:\t44 0f b6 4c 24 18    \tmovzbl 0x18(%rsp),%r9d\n     7f6:\t48 89 c2             \tmov    %rax,%rdx\n     7f9:\t4d 85 db             \ttest   %r11,%r11\n     7fc:\t0f 84 1e 03 00 00    \tje     b20 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x520>\n     802:\t48 85 c0             \ttest   %rax,%rax\n     805:\t0f 84 1d ff ff ff    \tje     728 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x128>\n     80b:\t49 8b 7a 20          \tmov    0x20(%r10),%rdi\n     80f:\t4c 89 de             \tmov    %r11,%rsi\n     812:\t44 88 4c 24 20       \tmov    %r9b,0x20(%rsp)\n     817:\t44 88 44 24 18       \tmov    %r8b,0x18(%rsp)\n     81c:\t4c 89 54 24 10       \tmov    %r10,0x10(%rsp)\n     821:\t4c 89 5c 24 08       \tmov    %r11,0x8(%rsp)\n     826:\te8 00 00 00 00       \tcallq  82b <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x22b>\n     82b:\t4c 8b 5c 24 08       \tmov    0x8(%rsp),%r11\n     830:\t4c 8b 54 24 10       \tmov    0x10(%rsp),%r10\n     835:\t48 85 c0             \ttest   %rax,%rax\n     838:\t44 0f b6 44 24 18    \tmovzbl 0x18(%rsp),%r8d\n     83e:\t44 0f b6 4c 24 20    \tmovzbl 0x20(%rsp),%r9d\n     844:\t4c 0f 45 d8          \tcmovne %rax,%r11\n     848:\t4c 39 f3             \tcmp    %r14,%rbx\n     84b:\t0f 85 e0 fe ff ff    \tjne    731 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x131>\n     851:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n     858:\t4d 8b 7f 20          \tmov    0x20(%r15),%r15\n     85c:\t45 21 c1             \tand    %r8d,%r9d\n     85f:\t4d 85 ff             \ttest   %r15,%r15\n     862:\t0f 85 98 fe ff ff    \tjne    700 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x100>\n     868:\t49 8b 7a 20          \tmov    0x20(%r10),%rdi\n     86c:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n     870:\t4c 89 5c 24 18       \tmov    %r11,0x18(%rsp)\n     875:\t48 8b 4c 24 28       \tmov    0x28(%rsp),%rcx\n     87a:\t8b 74 24 04          \tmov    0x4(%rsp),%esi\n     87e:\t44 88 4c 24 10       \tmov    %r9b,0x10(%rsp)\n     883:\t4c 89 54 24 08       \tmov    %r10,0x8(%rsp)\n     888:\te8 00 00 00 00       \tcallq  88d <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x28d>\n     88d:\t4c 8b 5c 24 18       \tmov    0x18(%rsp),%r11\n     892:\t4c 8b 54 24 08       \tmov    0x8(%rsp),%r10\n     897:\t44 0f b6 4c 24 10    \tmovzbl 0x10(%rsp),%r9d\n     89d:\t48 89 c3             \tmov    %rax,%rbx\n     8a0:\t4d 85 db             \ttest   %r11,%r11\n     8a3:\t0f 85 17 03 00 00    \tjne    bc0 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x5c0>\n     8a9:\t49 8b 7a 28          \tmov    0x28(%r10),%rdi\n     8ad:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 8b4 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x2b4>\n     8b4:\t48 8b 07             \tmov    (%rdi),%rax\n     8b7:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     8bb:\t48 39 d0             \tcmp    %rdx,%rax\n     8be:\t0f 85 88 05 00 00    \tjne    e4c <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x84c>\n     8c4:\t81 7c 24 3c ff 00 00 \tcmpl   $0xff,0x3c(%rsp)\n     8cb:\t00 \n     8cc:\t0f 8f c1 05 00 00    \tjg     e93 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x893>\n     8d2:\t48 63 44 24 3c       \tmovslq 0x3c(%rsp),%rax\n     8d7:\t4c 8b 5c c7 68       \tmov    0x68(%rdi,%rax,8),%r11\n     8dc:\t4d 85 db             \ttest   %r11,%r11\n     8df:\t0f 85 01 03 00 00    \tjne    be6 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x5e6>\n     8e5:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 8ec <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x2ec>\n     8ec:\tba c4 00 00 00       \tmov    $0xc4,%edx\n     8f1:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 8f8 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x2f8>\n     8f8:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 8ff <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x2ff>\n     8ff:\te8 00 00 00 00       \tcallq  904 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x304>\n     904:\t0f 1f 40 00          \tnopl   0x0(%rax)\n     908:\t83 ff 26             \tcmp    $0x26,%edi\n     90b:\t0f 87 03 06 00 00    \tja     f14 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x914>\n     911:\t49 8b 7a 28          \tmov    0x28(%r10),%rdi\n     915:\t48 63 44 24 3c       \tmovslq 0x3c(%rsp),%rax\n     91a:\t44 0f b6 4c 24 38    \tmovzbl 0x38(%rsp),%r9d\n     920:\t4c 8b 5c c7 68       \tmov    0x68(%rdi,%rax,8),%r11\n     925:\t45 09 c1             \tor     %r8d,%r9d\n     928:\t4d 85 db             \ttest   %r11,%r11\n     92b:\t0f 84 48 fd ff ff    \tje     679 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x79>\n     931:\t48 8b 07             \tmov    (%rdi),%rax\n     934:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 93b <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x33b>\n     93b:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n     93f:\t48 39 d0             \tcmp    %rdx,%rax\n     942:\t0f 85 91 04 00 00    \tjne    dd9 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x7d9>\n     948:\t45 84 c9             \ttest   %r9b,%r9b\n     94b:\t0f 85 37 02 00 00    \tjne    b88 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x588>\n     951:\t4c 8b 7e 30          \tmov    0x30(%rsi),%r15\n     955:\t4d 85 ff             \ttest   %r15,%r15\n     958:\t0f 85 3a fd ff ff    \tjne    698 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x98>\n     95e:\t49 8b 7a 20          \tmov    0x20(%r10),%rdi\n     962:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n     966:\t4c 89 5c 24 10       \tmov    %r11,0x10(%rsp)\n     96b:\t48 8b 4c 24 28       \tmov    0x28(%rsp),%rcx\n     970:\t8b 74 24 04          \tmov    0x4(%rsp),%esi\n     974:\t4c 89 54 24 08       \tmov    %r10,0x8(%rsp)\n     979:\te8 00 00 00 00       \tcallq  97e <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x37e>\n     97e:\t4c 8b 54 24 08       \tmov    0x8(%rsp),%r10\n     983:\t4c 8b 5c 24 10       \tmov    0x10(%rsp),%r11\n     988:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n     98e:\t48 89 c3             \tmov    %rax,%rbx\n     991:\te9 2a 02 00 00       \tjmpq   bc0 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x5c0>\n     996:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n     99d:\t00 00 00 \n     9a0:\t49 8b 7a 20          \tmov    0x20(%r10),%rdi\n     9a4:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n     9a8:\t4c 89 54 24 08       \tmov    %r10,0x8(%rsp)\n     9ad:\t81 e3 ff ff ff 7f    \tand    $0x7fffffff,%ebx\n     9b3:\t48 8b 4c 24 28       \tmov    0x28(%rsp),%rcx\n     9b8:\t8b 74 24 04          \tmov    0x4(%rsp),%esi\n     9bc:\te8 00 00 00 00       \tcallq  9c1 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x3c1>\n     9c1:\t4c 8b 54 24 08       \tmov    0x8(%rsp),%r10\n     9c6:\t49 8b 7a 08          \tmov    0x8(%r10),%rdi\n     9ca:\t48 8b 57 10          \tmov    0x10(%rdi),%rdx\n     9ce:\t48 8b 47 18          \tmov    0x18(%rdi),%rax\n     9d2:\t48 29 d0             \tsub    %rdx,%rax\n     9d5:\t48 c1 f8 04          \tsar    $0x4,%rax\n     9d9:\t48 39 c3             \tcmp    %rax,%rbx\n     9dc:\t0f 83 9e 05 00 00    \tjae    f80 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x980>\n     9e2:\t48 c1 e3 04          \tshl    $0x4,%rbx\n     9e6:\t4c 8b 1c 1a          \tmov    (%rdx,%rbx,1),%r11\n     9ea:\t4c 89 de             \tmov    %r11,%rsi\n     9ed:\t4c 89 54 24 08       \tmov    %r10,0x8(%rsp)\n     9f2:\te8 00 00 00 00       \tcallq  9f7 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x3f7>\n     9f7:\t4c 8b 54 24 08       \tmov    0x8(%rsp),%r10\n     9fc:\t89 c3                \tmov    %eax,%ebx\n     9fe:\t49 8b 42 18          \tmov    0x18(%r10),%rax\n     a02:\t83 78 20 0d          \tcmpl   $0xd,0x20(%rax)\n     a06:\t48 8b 70 08          \tmov    0x8(%rax),%rsi\n     a0a:\t0f 86 ae 05 00 00    \tjbe    fbe <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x9be>\n     a10:\t4d 8b 72 30          \tmov    0x30(%r10),%r14\n     a14:\t49 8b 54 24 3c       \tmov    0x3c(%r12),%rdx\n     a19:\t48 81 c6 70 02 00 00 \tadd    $0x270,%rsi\n     a20:\t31 c9                \txor    %ecx,%ecx\n     a22:\t49 8b 42 40          \tmov    0x40(%r10),%rax\n     a26:\t49 8b 7e 38          \tmov    0x38(%r14),%rdi\n     a2a:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n     a2f:\te8 00 00 00 00       \tcallq  a34 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x434>\n     a34:\t48 89 c5             \tmov    %rax,%rbp\n     a37:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n     a3c:\t48 8b 10             \tmov    (%rax),%rdx\n     a3f:\t66 48 0f 6e c8       \tmovq   %rax,%xmm1\n     a44:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n     a49:\t66 0f 6c c1          \tpunpcklqdq %xmm1,%xmm0\n     a4d:\t0f 11 45 00          \tmovups %xmm0,0x0(%rbp)\n     a51:\t49 3b 46 20          \tcmp    0x20(%r14),%rax\n     a55:\t0f 84 14 03 00 00    \tje     d6f <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x76f>\n     a5b:\t48 89 6a 08          \tmov    %rbp,0x8(%rdx)\n     a5f:\t48 89 28             \tmov    %rbp,(%rax)\n     a62:\t49 8d 7e 10          \tlea    0x10(%r14),%rdi\n     a66:\t48 89 ee             \tmov    %rbp,%rsi\n     a69:\te8 00 00 00 00       \tcallq  a6e <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x46e>\n     a6e:\tf6 45 18 02          \ttestb  $0x2,0x18(%rbp)\n     a72:\t0f 85 e9 04 00 00    \tjne    f61 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x961>\n     a78:\t4c 8d 74 24 60       \tlea    0x60(%rsp),%r14\n     a7d:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n     a81:\t48 89 ef             \tmov    %rbp,%rdi\n     a84:\t89 5c 24 64          \tmov    %ebx,0x64(%rsp)\n     a88:\t4c 89 f6             \tmov    %r14,%rsi\n     a8b:\t0f 29 44 24 70       \tmovaps %xmm0,0x70(%rsp)\n     a90:\t48 c7 44 24 68 00 00 \tmovq   $0x0,0x68(%rsp)\n     a97:\t00 00 \n     a99:\tc7 44 24 60 00 00 00 \tmovl   $0x1000000,0x60(%rsp)\n     aa0:\t01 \n     aa1:\te8 00 00 00 00       \tcallq  aa6 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x4a6>\n     aa6:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n     aaa:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n     aae:\t4c 89 f6             \tmov    %r14,%rsi\n     ab1:\t48 89 ef             \tmov    %rbp,%rdi\n     ab4:\tc7 44 24 60 00 00 00 \tmovl   $0x0,0x60(%rsp)\n     abb:\t00 \n     abc:\t48 c7 44 24 68 00 00 \tmovq   $0x0,0x68(%rsp)\n     ac3:\t00 00 \n     ac5:\t89 44 24 64          \tmov    %eax,0x64(%rsp)\n     ac9:\t0f 29 44 24 70       \tmovaps %xmm0,0x70(%rsp)\n     ace:\te8 00 00 00 00       \tcallq  ad3 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x4d3>\n     ad3:\t80 7c 24 38 00       \tcmpb   $0x0,0x38(%rsp)\n     ad8:\t0f 85 52 01 00 00    \tjne    c30 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x630>\n     ade:\t48 8d 7c 24 60       \tlea    0x60(%rsp),%rdi\n     ae3:\t48 8d 54 24 40       \tlea    0x40(%rsp),%rdx\n     ae8:\t4c 89 64 24 40       \tmov    %r12,0x40(%rsp)\n     aed:\t48 8b b4 24 c0 00 00 \tmov    0xc0(%rsp),%rsi\n     af4:\t00 \n     af5:\t44 89 6c 24 48       \tmov    %r13d,0x48(%rsp)\n     afa:\t89 5c 24 50          \tmov    %ebx,0x50(%rsp)\n     afe:\te8 00 00 00 00       \tcallq  b03 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x503>\n     b03:\t80 7c 24 70 00       \tcmpb   $0x0,0x70(%rsp)\n     b08:\t0f 84 91 04 00 00    \tje     f9f <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x99f>\n     b0e:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n     b15:\t5b                   \tpop    %rbx\n     b16:\t5d                   \tpop    %rbp\n     b17:\t41 5c                \tpop    %r12\n     b19:\t41 5d                \tpop    %r13\n     b1b:\t41 5e                \tpop    %r14\n     b1d:\t41 5f                \tpop    %r15\n     b1f:\tc3                   \tretq   \n     b20:\t49 89 c3             \tmov    %rax,%r11\n     b23:\te9 00 fc ff ff       \tjmpq   728 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x128>\n     b28:\t80 7c 24 38 00       \tcmpb   $0x0,0x38(%rsp)\n     b2d:\t0f 85 93 01 00 00    \tjne    cc6 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x6c6>\n     b33:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n     b37:\t48 8d 7c 24 60       \tlea    0x60(%rsp),%rdi\n     b3c:\t48 8d 54 24 40       \tlea    0x40(%rsp),%rdx\n     b41:\t48 8b b4 24 c0 00 00 \tmov    0xc0(%rsp),%rsi\n     b48:\t00 \n     b49:\t4c 89 64 24 40       \tmov    %r12,0x40(%rsp)\n     b4e:\t44 89 6c 24 48       \tmov    %r13d,0x48(%rsp)\n     b53:\t89 44 24 50          \tmov    %eax,0x50(%rsp)\n     b57:\te8 00 00 00 00       \tcallq  b5c <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x55c>\n     b5c:\t80 7c 24 70 00       \tcmpb   $0x0,0x70(%rsp)\n     b61:\t75 ab                \tjne    b0e <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x50e>\n     b63:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # b6a <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x56a>\n     b6a:\tba 4d 00 00 00       \tmov    $0x4d,%edx\n     b6f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # b76 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x576>\n     b76:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # b7d <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x57d>\n     b7d:\te8 00 00 00 00       \tcallq  b82 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x582>\n     b82:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n     b88:\t49 8b 7a 20          \tmov    0x20(%r10),%rdi\n     b8c:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n     b90:\t4c 89 5c 24 18       \tmov    %r11,0x18(%rsp)\n     b95:\t48 8b 4c 24 28       \tmov    0x28(%rsp),%rcx\n     b9a:\t8b 74 24 04          \tmov    0x4(%rsp),%esi\n     b9e:\t44 88 4c 24 10       \tmov    %r9b,0x10(%rsp)\n     ba3:\t4c 89 54 24 08       \tmov    %r10,0x8(%rsp)\n     ba8:\te8 00 00 00 00       \tcallq  bad <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x5ad>\n     bad:\t4c 8b 54 24 08       \tmov    0x8(%rsp),%r10\n     bb2:\t44 0f b6 4c 24 10    \tmovzbl 0x10(%rsp),%r9d\n     bb8:\t4c 8b 5c 24 18       \tmov    0x18(%rsp),%r11\n     bbd:\t48 89 c3             \tmov    %rax,%rbx\n     bc0:\t49 8b 43 08          \tmov    0x8(%r11),%rax\n     bc4:\t8b 10                \tmov    (%rax),%edx\n     bc6:\t85 d2                \ttest   %edx,%edx\n     bc8:\t74 41                \tje     c0b <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x60b>\n     bca:\t8b 4c 24 3c          \tmov    0x3c(%rsp),%ecx\n     bce:\t48 83 c0 04          \tadd    $0x4,%rax\n     bd2:\t39 d1                \tcmp    %edx,%ecx\n     bd4:\t75 2b                \tjne    c01 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x601>\n     bd6:\t48 83 7c 24 28 00    \tcmpq   $0x0,0x28(%rsp)\n     bdc:\t74 08                \tje     be6 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x5e6>\n     bde:\t81 f9 00 01 00 00    \tcmp    $0x100,%ecx\n     be4:\t74 1b                \tje     c01 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x601>\n     be6:\t45 84 c9             \ttest   %r9b,%r9b\n     be9:\t74 0d                \tje     bf8 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x5f8>\n     beb:\t48 8b 03             \tmov    (%rbx),%rax\n     bee:\t80 78 22 00          \tcmpb   $0x0,0x22(%rax)\n     bf2:\t0f 88 5f 01 00 00    \tjs     d57 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x757>\n     bf8:\t49 8b 7a 08          \tmov    0x8(%r10),%rdi\n     bfc:\te9 e9 fd ff ff       \tjmpq   9ea <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x3ea>\n     c01:\t8b 10                \tmov    (%rax),%edx\n     c03:\t48 83 c0 04          \tadd    $0x4,%rax\n     c07:\t85 d2                \ttest   %edx,%edx\n     c09:\t75 c7                \tjne    bd2 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x5d2>\n     c0b:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # c12 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x612>\n     c12:\tba 90 00 00 00       \tmov    $0x90,%edx\n     c17:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # c1e <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x61e>\n     c1e:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # c25 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x625>\n     c25:\te8 00 00 00 00       \tcallq  c2a <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x62a>\n     c2a:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n     c30:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n     c37:\t00 \n     c38:\t8b 08                \tmov    (%rax),%ecx\n     c3a:\t85 c9                \ttest   %ecx,%ecx\n     c3c:\t0f 84 9c fe ff ff    \tje     ade <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x4de>\n     c42:\t45 85 ed             \ttest   %r13d,%r13d\n     c45:\t75 0a                \tjne    c51 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x651>\n     c47:\t49 83 fc ff          \tcmp    $0xffffffffffffffff,%r12\n     c4b:\t0f 84 dc 01 00 00    \tje     e2d <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x82d>\n     c51:\t4c 89 e0             \tmov    %r12,%rax\n     c54:\t4c 89 e2             \tmov    %r12,%rdx\n     c57:\t48 8b bc 24 c0 00 00 \tmov    0xc0(%rsp),%rdi\n     c5e:\t00 \n     c5f:\t83 e9 01             \tsub    $0x1,%ecx\n     c62:\t48 c1 e8 04          \tshr    $0x4,%rax\n     c66:\t48 c1 ea 09          \tshr    $0x9,%rdx\n     c6a:\t31 d0                \txor    %edx,%eax\n     c6c:\t4c 8b 47 08          \tmov    0x8(%rdi),%r8\n     c70:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     c75:\t44 01 e8             \tadd    %r13d,%eax\n     c78:\teb 0f                \tjmp    c89 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x689>\n     c7a:\t48 83 fe ff          \tcmp    $0xffffffffffffffff,%rsi\n     c7e:\t0f 84 dc 00 00 00    \tje     d60 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x760>\n     c84:\t01 f8                \tadd    %edi,%eax\n     c86:\t83 c7 01             \tadd    $0x1,%edi\n     c89:\t89 c2                \tmov    %eax,%edx\n     c8b:\t21 ca                \tand    %ecx,%edx\n     c8d:\t48 8d 14 52          \tlea    (%rdx,%rdx,2),%rdx\n     c91:\t49 8d 14 d0          \tlea    (%r8,%rdx,8),%rdx\n     c95:\t48 8b 32             \tmov    (%rdx),%rsi\n     c98:\t49 39 f4             \tcmp    %rsi,%r12\n     c9b:\t75 dd                \tjne    c7a <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x67a>\n     c9d:\t44 3b 6a 08          \tcmp    0x8(%rdx),%r13d\n     ca1:\t75 d7                \tjne    c7a <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x67a>\n     ca3:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n     caa:\t00 \n     cab:\t48 c7 02 ff ff ff ff \tmovq   $0xffffffffffffffff,(%rdx)\n     cb2:\tc7 42 08 00 00 00 00 \tmovl   $0x0,0x8(%rdx)\n     cb9:\t83 68 10 01          \tsubl   $0x1,0x10(%rax)\n     cbd:\t83 40 14 01          \taddl   $0x1,0x14(%rax)\n     cc1:\te9 18 fe ff ff       \tjmpq   ade <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x4de>\n     cc6:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n     ccd:\t00 \n     cce:\t8b 10                \tmov    (%rax),%edx\n     cd0:\t85 d2                \ttest   %edx,%edx\n     cd2:\t0f 84 5b fe ff ff    \tje     b33 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x533>\n     cd8:\t48 83 fe ff          \tcmp    $0xffffffffffffffff,%rsi\n     cdc:\t0f 84 3e 01 00 00    \tje     e20 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x820>\n     ce2:\t4c 89 e0             \tmov    %r12,%rax\n     ce5:\t4c 89 e1             \tmov    %r12,%rcx\n     ce8:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     ced:\t48 8b bc 24 c0 00 00 \tmov    0xc0(%rsp),%rdi\n     cf4:\t00 \n     cf5:\t48 c1 e9 09          \tshr    $0x9,%rcx\n     cf9:\t48 c1 e8 04          \tshr    $0x4,%rax\n     cfd:\t31 c8                \txor    %ecx,%eax\n     cff:\t4c 8b 47 08          \tmov    0x8(%rdi),%r8\n     d03:\t8d 4a ff             \tlea    -0x1(%rdx),%ecx\n     d06:\t44 01 e8             \tadd    %r13d,%eax\n     d09:\teb 0f                \tjmp    d1a <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x71a>\n     d0b:\t48 83 ff ff          \tcmp    $0xffffffffffffffff,%rdi\n     d0f:\t0f 84 96 00 00 00    \tje     dab <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x7ab>\n     d15:\t01 f0                \tadd    %esi,%eax\n     d17:\t83 c6 01             \tadd    $0x1,%esi\n     d1a:\t89 ca                \tmov    %ecx,%edx\n     d1c:\t21 c2                \tand    %eax,%edx\n     d1e:\t48 8d 14 52          \tlea    (%rdx,%rdx,2),%rdx\n     d22:\t49 8d 14 d0          \tlea    (%r8,%rdx,8),%rdx\n     d26:\t48 8b 3a             \tmov    (%rdx),%rdi\n     d29:\t49 39 fc             \tcmp    %rdi,%r12\n     d2c:\t75 dd                \tjne    d0b <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x70b>\n     d2e:\t44 3b 6a 08          \tcmp    0x8(%rdx),%r13d\n     d32:\t75 d7                \tjne    d0b <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x70b>\n     d34:\t48 8b 84 24 c0 00 00 \tmov    0xc0(%rsp),%rax\n     d3b:\t00 \n     d3c:\t48 c7 02 ff ff ff ff \tmovq   $0xffffffffffffffff,(%rdx)\n     d43:\tc7 42 08 00 00 00 00 \tmovl   $0x0,0x8(%rdx)\n     d4a:\t83 68 10 01          \tsubl   $0x1,0x10(%rax)\n     d4e:\t83 40 14 01          \taddl   $0x1,0x14(%rax)\n     d52:\te9 dc fd ff ff       \tjmpq   b33 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x533>\n     d57:\t8b 5c 24 04          \tmov    0x4(%rsp),%ebx\n     d5b:\te9 73 fd ff ff       \tjmpq   ad3 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x4d3>\n     d60:\t83 7a 08 ff          \tcmpl   $0xffffffff,0x8(%rdx)\n     d64:\t0f 85 1a ff ff ff    \tjne    c84 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x684>\n     d6a:\te9 6f fd ff ff       \tjmpq   ade <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x4de>\n     d6f:\t49 89 6e 20          \tmov    %rbp,0x20(%r14)\n     d73:\te9 e7 fc ff ff       \tjmpq   a5f <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x45f>\n     d78:\t49 8b 7a 20          \tmov    0x20(%r10),%rdi\n     d7c:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n     d80:\t44 88 4c 24 10       \tmov    %r9b,0x10(%rsp)\n     d85:\t48 8b 4c 24 28       \tmov    0x28(%rsp),%rcx\n     d8a:\t8b 74 24 04          \tmov    0x4(%rsp),%esi\n     d8e:\t4c 89 54 24 08       \tmov    %r10,0x8(%rsp)\n     d93:\te8 00 00 00 00       \tcallq  d98 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x798>\n     d98:\t4c 8b 54 24 08       \tmov    0x8(%rsp),%r10\n     d9d:\t44 0f b6 4c 24 10    \tmovzbl 0x10(%rsp),%r9d\n     da3:\t48 89 c3             \tmov    %rax,%rbx\n     da6:\te9 fe fa ff ff       \tjmpq   8a9 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x2a9>\n     dab:\t83 7a 08 ff          \tcmpl   $0xffffffff,0x8(%rdx)\n     daf:\t0f 85 60 ff ff ff    \tjne    d15 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x715>\n     db5:\te9 79 fd ff ff       \tjmpq   b33 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x533>\n     dba:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # dc1 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x7c1>\n     dc1:\tba 16 02 00 00       \tmov    $0x216,%edx\n     dc6:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # dcd <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x7cd>\n     dcd:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # dd4 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x7d4>\n     dd4:\te8 00 00 00 00       \tcallq  dd9 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x7d9>\n     dd9:\t8b 74 24 30          \tmov    0x30(%rsp),%esi\n     ddd:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n     de2:\t4c 89 54 24 10       \tmov    %r10,0x10(%rsp)\n     de7:\t44 88 4c 24 08       \tmov    %r9b,0x8(%rsp)\n     dec:\tff d0                \tcallq  *%rax\n     dee:\t44 0f b6 4c 24 08    \tmovzbl 0x8(%rsp),%r9d\n     df4:\t4c 8b 54 24 10       \tmov    0x10(%rsp),%r10\n     df9:\t49 89 c3             \tmov    %rax,%r11\n     dfc:\t45 84 c9             \ttest   %r9b,%r9b\n     dff:\t0f 85 63 fa ff ff    \tjne    868 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x268>\n     e05:\t4d 8b 7c 24 30       \tmov    0x30(%r12),%r15\n     e0a:\t4d 85 ff             \ttest   %r15,%r15\n     e0d:\t0f 85 85 f8 ff ff    \tjne    698 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x98>\n     e13:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n     e19:\te9 4a fa ff ff       \tjmpq   868 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x268>\n     e1e:\t66 90                \txchg   %ax,%ax\n     e20:\t41 8d 45 ff          \tlea    -0x1(%r13),%eax\n     e24:\t83 f8 fd             \tcmp    $0xfffffffd,%eax\n     e27:\t0f 86 b5 fe ff ff    \tjbe    ce2 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x6e2>\n     e2d:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # e34 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x834>\n     e34:\tba 69 01 00 00       \tmov    $0x169,%edx\n     e39:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # e40 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x840>\n     e40:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # e47 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x847>\n     e47:\te8 00 00 00 00       \tcallq  e4c <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x84c>\n     e4c:\t8b 74 24 30          \tmov    0x30(%rsp),%esi\n     e50:\t48 8b 54 24 28       \tmov    0x28(%rsp),%rdx\n     e55:\t4c 89 54 24 10       \tmov    %r10,0x10(%rsp)\n     e5a:\t44 88 4c 24 08       \tmov    %r9b,0x8(%rsp)\n     e5f:\tff d0                \tcallq  *%rax\n     e61:\t44 0f b6 4c 24 08    \tmovzbl 0x8(%rsp),%r9d\n     e67:\t4c 8b 54 24 10       \tmov    0x10(%rsp),%r10\n     e6c:\t49 89 c3             \tmov    %rax,%r11\n     e6f:\te9 72 fd ff ff       \tjmpq   be6 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x5e6>\n     e74:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # e7b <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x87b>\n     e7b:\tba 4d 02 00 00       \tmov    $0x24d,%edx\n     e80:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # e87 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x887>\n     e87:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # e8e <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x88e>\n     e8e:\te8 00 00 00 00       \tcallq  e93 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x893>\n     e93:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # e9a <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x89a>\n     e9a:\tba c2 00 00 00       \tmov    $0xc2,%edx\n     e9f:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # ea6 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8a6>\n     ea6:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # ead <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8ad>\n     ead:\te8 00 00 00 00       \tcallq  eb2 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8b2>\n     eb2:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # eb9 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8b9>\n     eb9:\tba c2 00 00 00       \tmov    $0xc2,%edx\n     ebe:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # ec5 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8c5>\n     ec5:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # ecc <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8cc>\n     ecc:\te8 00 00 00 00       \tcallq  ed1 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8d1>\n     ed1:\te8 5a f1 ff ff       \tcallq  30 <_ZNK4llvm6SDNode12getValueTypeEj.isra.0.part.0>\n     ed6:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # edd <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8dd>\n     edd:\tba 19 01 00 00       \tmov    $0x119,%edx\n     ee2:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # ee9 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8e9>\n     ee9:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # ef0 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8f0>\n     ef0:\te8 00 00 00 00       \tcallq  ef5 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8f5>\n     ef5:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # efc <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x8fc>\n     efc:\tba 31 00 00 00       \tmov    $0x31,%edx\n     f01:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # f08 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x908>\n     f08:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # f0f <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x90f>\n     f0f:\te8 00 00 00 00       \tcallq  f14 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x914>\n     f14:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # f1b <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x91b>\n     f1b:\tba de 00 00 00       \tmov    $0xde,%edx\n     f20:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # f27 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x927>\n     f27:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # f2e <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x92e>\n     f2e:\te8 00 00 00 00       \tcallq  f33 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x933>\n     f33:\t49 8b 7a 20          \tmov    0x20(%r10),%rdi\n     f37:\t8b 54 24 30          \tmov    0x30(%rsp),%edx\n     f3b:\t4c 89 54 24 08       \tmov    %r10,0x8(%rsp)\n     f40:\t48 8b 4c 24 28       \tmov    0x28(%rsp),%rcx\n     f45:\t8b 74 24 04          \tmov    0x4(%rsp),%esi\n     f49:\te8 00 00 00 00       \tcallq  f4e <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x94e>\n     f4e:\t4c 8b 54 24 08       \tmov    0x8(%rsp),%r10\n     f53:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n     f59:\t48 89 c3             \tmov    %rax,%rbx\n     f5c:\te9 48 f9 ff ff       \tjmpq   8a9 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x2a9>\n     f61:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # f68 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x968>\n     f68:\tba 93 00 00 00       \tmov    $0x93,%edx\n     f6d:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # f74 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x974>\n     f74:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # f7b <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x97b>\n     f7b:\te8 00 00 00 00       \tcallq  f80 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x980>\n     f80:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # f87 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x987>\n     f87:\tba 36 00 00 00       \tmov    $0x36,%edx\n     f8c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # f93 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x993>\n     f93:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # f9a <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x99a>\n     f9a:\te8 00 00 00 00       \tcallq  f9f <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x99f>\n     f9f:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # fa6 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x9a6>\n     fa6:\tba a6 00 00 00       \tmov    $0xa6,%edx\n     fab:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # fb2 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x9b2>\n     fb2:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # fb9 <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x9b9>\n     fb9:\te8 00 00 00 00       \tcallq  fbe <_ZN4llvm12InstrEmitter15EmitCopyFromRegEPNS_6SDNodeEjbbjRNS_8DenseMapINS_7SDValueEjNS_12DenseMapInfoIS4_EEEE+0x9be>\n     fbe:\te8 9d f0 ff ff       \tcallq  60 <_ZNK4llvm11MCInstrInfo3getEj.isra.0.part.0>\n     fc3:\t90                   \tnop\n     fc4:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n     fcb:\t00 00 00 00 \n     fcf:\t90                   \tnop", "code_s": "__int64 __fastcall llvm InstrEmitter\nEmitCopyFromReg(_QWORD *a1, unsigned __int64 a2, unsigned int a3, __int64 a4,\n                __int64 a5, unsigned int a6, __int64 a7) {\n  __int64 v9;\n  _QWORD *v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  char v14;\n  __int64 v15;\n  __int64 v16;\n  int v17;\n  __int64 v18;\n  int v19;\n  __int64 v20;\n  __int64 v21;\n  char v22;\n  __int64 v23;\n  __int64 v24;\n  int v25;\n  __int64 v26;\n  int v27;\n  __int64 v28;\n  __int64 v29;\n  __int64 v30;\n  __int64 v31;\n  __int64 v32;\n  __int64 v33;\n  _QWORD *v34;\n  char v35;\n  __int64 v36;\n  __int64 v37;\n  __int64(__fastcall * v38)();\n  __int64 v39;\n  __int64(__fastcall * v40)();\n  __int64 v41;\n  unsigned int v42;\n  __int64 v43;\n  __int64 v44;\n  int v45;\n  __int64 v46;\n  __int64 v47;\n  __int64 v48;\n  __int64 v49;\n  __int64 v50;\n  __m128i *v51;\n  __m128i **v52;\n  __m128i *v53;\n  __int64 result;\n  __int64 v55;\n  int *v56;\n  int v57;\n  int *v58;\n  int v59;\n  unsigned int i;\n  __int64 v61;\n  int v62;\n  int j;\n  __int64 v64;\n  __int64 v65;\n  __int64 v66;\n  __int64 v67;\n  __int64 v68;\n  _QWORD *v70;\n  _QWORD *v71;\n  _QWORD *v72;\n  _QWORD *v73;\n  _QWORD *v74;\n  _QWORD *v75;\n  _QWORD *v76;\n  char v77;\n  char v78;\n  _QWORD *v79;\n  char v80;\n  __int64 v81;\n  char v82;\n  char v83;\n  _QWORD *v84;\n  _QWORD *v85;\n  char v86;\n  __int64 v87;\n  __int64 v88;\n  __int64 v89;\n  __int64 v90;\n  unsigned int v91;\n  char v92;\n  int v93;\n  unsigned __int64 v94;\n  __m128i **v95;\n  unsigned int v96;\n  int v97;\n  unsigned int v98;\n  __int64 v99;\n  __int128 v100;\n  v92 = a4;\n  if ((int)a6 > Number)\n  LABEL_108:\n    _assert_fail(String, String, Number, String);\n  if ((a6 & Number) == Number) {\n    v9 = *(unsigned __int16 *)(a2 + Number);\n    if (a3 >= (unsigned int)v9)\n      llvm SDNode getValueType(a1, a2, v9, a4, a5);\n    v10 = a1;\n    v11 = Number L * a3 + *(_QWORD *)(a2 + Number);\n    v93 = *(_DWORD *)v11;\n    v90 = *(_QWORD *)(v11 + Number);\n    v91 = *(_DWORD *)v11;\n    if (*(int *)v11 > Number)\n      goto LABEL_118;\n    if (*(_DWORD *)v11 > Number)\n      _assert_fail(String, String, Number, String);\n    v39 = a1[Number];\n    v13 = *(_QWORD *)(v39 + Number L * v93 + Number);\n    if (v13) {\n      v40 = *(__int64(__fastcall **)())(*(_QWORD *)v39 + Number L);\n      if (v40 == llvm TargetLowering getRegClassFor) {\n        if ((unsigned __int8)a5 | (unsigned __int8)a4) {\n          v88 = *(_QWORD *)(v39 + Number L * v93 + Number);\n          v82 = a5 | a4;\n          v75 = v10;\n          v55 = llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6,\n                                                               v91, v90);\n          v34 = v75;\n          v35 = v82;\n          v33 = v88;\n          v36 = v55;\n          goto LABEL_63;\n        }\n        v12 = *(_QWORD *)(a2 + Number);\n        if (!v12) {\n          v81 = *(_QWORD *)(v39 + Number L * v93 + Number);\n          v72 = v10;\n          v41 = llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6,\n                                                               v91, v90);\n          v34 = v72;\n          v33 = v81;\n          v35 = Number;\n          v36 = v41;\n          goto LABEL_63;\n        }\n        goto LABEL_8;\n      }\n      v84 = v10;\n      v77 = a5 | a4;\n      v66 =\n          ((__int64(__fastcall *)(__int64, _QWORD, __int64))v40)(v39, v91, v90);\n      v14 = v77;\n      v10 = v84;\n      v13 = v66;\n      if (v77)\n        goto LABEL_37;\n      v12 = *(_QWORD *)(a2 + Number);\n      if (!v12) {\n        v14 = Number;\n      LABEL_37:\n        v87 = v13;\n        v80 = v14;\n        v71 = v10;\n        v32 = llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6,\n                                                             v91, v90);\n        v33 = v87;\n        v34 = v71;\n        v35 = v80;\n        v36 = v32;\n        if (v87) {\n        LABEL_63:\n          v56 = *(int **)(v33 + Number);\n          v57 = *v56;\n          if (!*v56)\n          LABEL_72:\n            _assert_fail(String, String, Number, String String);\n          v58 = v56 + Number;\n          while (v93 != v57 || v90 && v93 == Number) {\n            v57 = *v58++;\n            if (!v57)\n              goto LABEL_72;\n          }\n        LABEL_68:\n          if (!v35 || *(char *)(*(_QWORD *)v36 + Number L) >= Number) {\n            v43 = v34[Number];\n            goto LABEL_50;\n          }\n          v45 = a6;\n        LABEL_55:\n          if (!v92 || !*(_DWORD *)a7)\n            goto LABEL_56;\n          if (a3 || a2 != Number) {\n            v59 = Number;\n            for (i = a3 + ((a2 >> Number) ^ (a2 >> Number));; i += v59++) {\n              v61 = *(_QWORD *)(a7 + Number) +\n                    Number L * ((*(_DWORD *)a7 - Number) & i);\n              if (a2 == *(_QWORD *)v61 && a3 == *(_DWORD *)(v61 + Number))\n                break;\n              if (*(_QWORD *)v61 == Number &&\n                  *(_DWORD *)(v61 + Number) == Number)\n                goto LABEL_56;\n            }\n            *(_QWORD *)v61 = Number;\n            *(_DWORD *)(v61 + Number) = Number;\n            --*(_DWORD *)(a7 + Number);\n            ++*(_DWORD *)(a7 + Number);\n          LABEL_56:\n            v94 = a2;\n            LODWORD(v95) = a3;\n            v96 = v45;\n            result = llvm DenseMap<llvm SDValue, unsigned int,\n                                   llvm DenseMapInfo<llvm SDValue>>\n                insert(&v97, a7, &v94);\n            if (!(_BYTE)v100)\n              _assert_fail(String, String, Number, String String);\n            return result;\n          }\n        LABEL_102:\n          _assert_fail(String String, String, Number,\n                       String String String String);\n        }\n      LABEL_38:\n        v37 = v34[Number];\n        v38 = *(__int64(__fastcall **)())(*(_QWORD *)v37 + Number L);\n        if (v38 == llvm TargetLowering getRegClassFor) {\n          if (v93 > Number)\n            _assert_fail(String, String, Number, String);\n          v33 = *(_QWORD *)(v37 + Number L * v93 + Number);\n          if (!v33)\n            _assert_fail(String, String, Number, String);\n        } else {\n          v85 = v34;\n          v78 = v35;\n          v67 = ((__int64(__fastcall *)(__int64, _QWORD, __int64))v38)(v37, v91,\n                                                                       v90);\n          v35 = v78;\n          v34 = v85;\n          v33 = v67;\n        }\n        goto LABEL_68;\n      }\n    } else {\n    LABEL_118:\n      if ((unsigned __int8)a4 | (unsigned __int8)a5) {\n        v83 = a4 | a5;\n        v76 = v10;\n        v65 = llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6,\n                                                             v91, v90);\n        v34 = v76;\n        v35 = v83;\n        v36 = v65;\n        goto LABEL_38;\n      }\n      v12 = *(_QWORD *)(a2 + Number);\n      if (!v12) {\n        v79 = v10;\n        v68 = llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6,\n                                                             v91, v90);\n        v34 = v79;\n        v35 = Number;\n        v36 = v68;\n        goto LABEL_38;\n      }\n      v13 = Number L;\n    }\n  LABEL_8:\n    v14 = Number;\n    while (Number) {\n      while (Number) {\n        v18 = *(_QWORD *)(v12 + Number);\n        v19 = *(unsigned __int16 *)(v18 + Number);\n        if (*(_WORD *)(v18 + Number) != Number)\n          break;\n        v15 = *(_QWORD *)(v18 + Number);\n        if ((unsigned __int16)v19 <= Number)\n        LABEL_97:\n          _assert_fail(String, String, Number, String);\n        if (a2 != *(_QWORD *)(v15 + Number) || a3 != *(_DWORD *)(v15 + Number))\n          goto LABEL_21;\n        v16 = *(_QWORD *)(v15 + Number);\n        if (*(_WORD *)(v16 + Number) != Number)\n          _assert_fail(String, String, Number, String String);\n        v17 = *(_DWORD *)(v16 + Number);\n        if (v17 > Number)\n          goto LABEL_108;\n        if (v17 < Number) {\n          v73 = v10;\n          v42 = v17 & Number;\n          llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6, v91,\n                                                         v90);\n          v34 = v73;\n          v43 = v73[Number];\n          v44 = *(_QWORD *)(v43 + Number);\n          if (v42 >=\n              (unsigned __int64)((*(_QWORD *)(v43 + Number) - v44) >> Number))\n            _assert_fail(String, String, Number,\n                         String String String String String);\n          v33 = *(_QWORD *)(v44 + Number L * v42);\n        LABEL_50:\n          v74 = v34;\n          v45 = llvm MachineRegisterInfo createVirtualRegister(v43, v33);\n          v46 = v74[Number];\n          v47 = *(_QWORD *)(v46 + Number);\n          if (*(_DWORD *)(v46 + Number) <= Number)\n            llvm MCInstrInfo get(v43, v47);\n          v48 = v74[Number];\n          v49 = *(_QWORD *)(a2 + Number);\n          v50 = *(_QWORD *)(v48 + Number);\n          v95 = (__m128i **)v74[Number];\n          v51 = (__m128i *)llvm MachineFunction CreateMachineInstr(\n              v50, v47 + Number, v49, Number L);\n          v52 = v95;\n          v53 = *v95;\n          *v51 = _mm_unpacklo_epi64((__m128i)(unsigned __int64)*v95,\n                                    (__m128i)(unsigned __int64)v95);\n          if (v52 == *(__m128i ***)(v48 + Number))\n            *(_QWORD *)(v48 + Number) = v51;\n          else\n            v53->m128i_i64[Number] = (__int64)v51;\n          *v52 = v51;\n          llvm ilist_traits<llvm MachineInstr> addNodeToList(v48 + Number, v51);\n          if ((v51[Number].m128i_i8[Number] & Number) != Number)\n            _assert_fail(String, String, Number, String String);\n          v98 = v45;\n          v100 = Number L;\n          v99 = Number L;\n          v97 = Number;\n          llvm MachineInstr addOperand(v51, &v97);\n          v97 = Number;\n          v99 = Number L;\n          v98 = a6;\n          v100 = Number L;\n          llvm MachineInstr addOperand(v51, &v97);\n          goto LABEL_55;\n        }\n        if (v17 != a6)\n          v14 = Number;\n      LABEL_17:\n        v12 = *(_QWORD *)(v12 + Number);\n        if (!v12)\n          goto LABEL_37;\n      }\n      if (!*(_WORD *)(v18 + Number))\n        goto LABEL_17;\n      v15 = *(_QWORD *)(v18 + Number);\n    LABEL_21:\n      v20 = (unsigned int)(v19 - Number);\n      v21 = Number L;\n      v22 = Number;\n      while (Number) {\n        v23 = v15 + Number * v21;\n        v24 = *(unsigned int *)(v23 + Number);\n        if ((_DWORD)v24 != a3 || *(_QWORD *)v23 != a2)\n          goto LABEL_22;\n        if ((unsigned int)v24 >= *(unsigned __int16 *)(a2 + Number))\n          _assert_fail(String, String, Number, String);\n        v25 = *(_DWORD *)(*(_QWORD *)(a2 + Number) + Number * v24);\n        if (v25 == Number)\n          goto LABEL_22;\n        if (!v25)\n          goto LABEL_22;\n        v22 = Number;\n        if (*(__int16 *)(v18 + Number) >= Number)\n          goto LABEL_22;\n        v26 = v10[Number];\n        v27 = ~*(__int16 *)(v18 + Number);\n        if (*(_DWORD *)(v26 + Number) <= (unsigned int)v27)\n          _assert_fail(String, String, Number, String);\n        v28 = *(_QWORD *)(v26 + Number) + Number L * v27;\n        v29 = (unsigned int)v21 + *(unsigned __int16 *)(v28 + Number);\n        if ((unsigned int)v29 >= *(unsigned __int16 *)(v28 + Number))\n          goto LABEL_22;\n        v89 = v13;\n        v86 = v14;\n        v70 = v10;\n        v30 = llvm TargetInstrInfo getRegClass(v26, v28, v29, v10[Number]);\n        v13 = v89;\n        v10 = v70;\n        v22 = Number;\n        v14 = v86;\n        if (!v89) {\n          v13 = v30;\n        LABEL_22:\n          if (v21 == v20)\n            break;\n          goto LABEL_23;\n        }\n        if (!v30)\n          goto LABEL_22;\n        v31 = llvm TargetRegisterInfo getCommonSubClass(v70[Number], v89, v30);\n        v13 = v89;\n        v10 = v70;\n        v22 = Number;\n        v14 = v86;\n        if (v31)\n          v13 = v31;\n        if (v21 == v20)\n          break;\n      LABEL_23:\n        ++v21;\n        v15 = *(_QWORD *)(v18 + Number);\n        if (*(unsigned __int16 *)(v18 + Number) <= (unsigned int)v21)\n          goto LABEL_97;\n      }\n      v12 = *(_QWORD *)(v12 + Number);\n      v14 &= v22;\n      if (!v12)\n        goto LABEL_37;\n    }\n  }\n  if ((_BYTE)a4 && *(_DWORD *)a7) {\n    if (a2 == Number && a3 - Number > Number)\n      goto LABEL_102;\n    v62 = Number;\n    for (j = a3 + ((a2 >> Number) ^ (a2 >> Number));; j += v62++) {\n      v64 = *(_QWORD *)(a7 + Number) +\n            Number L * (j & (unsigned int)(*(_DWORD *)a7 - Number));\n      if (a2 == *(_QWORD *)v64 && a3 == *(_DWORD *)(v64 + Number))\n        break;\n      if (*(_QWORD *)v64 == Number && *(_DWORD *)(v64 + Number) == Number)\n        goto LABEL_60;\n    }\n    *(_QWORD *)v64 = Number;\n    *(_DWORD *)(v64 + Number) = Number;\n    --*(_DWORD *)(a7 + Number);\n    ++*(_DWORD *)(a7 + Number);\n  }\nLABEL_60:\n  v94 = a2;\n  LODWORD(v95) = a3;\n  v96 = a6;\n  result =\n      llvm DenseMap<llvm SDValue, unsigned int, llvm DenseMapInfo<llvm SDValue>>\n          insert(&v97, a7, &v94);\n  if (!(_BYTE)v100)\n    _assert_fail(String, String, Number, String String);\n  return result;\n}", "code_t": "__int64 __fastcall llvm InstrEmitter\nEmitCopyFromReg(_QWORD *a1, unsigned __int64 a2, unsigned int a3, __int64 a4,\n                __int64 a5, unsigned int a6, __int64 a7) {\n  __int64 v9;\n  _QWORD *v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  char v14;\n  __int64 v15;\n  __int64 v16;\n  int v17;\n  __int64 v18;\n  int v19;\n  __int64 v20;\n  __int64 v21;\n  char v22;\n  __int64 v23;\n  __int64 v24;\n  int v25;\n  __int64 v26;\n  int v27;\n  __int64 v28;\n  __int64 v29;\n  __int64 v30;\n  __int64 v31;\n  __int64 v32;\n  __int64 v33;\n  _QWORD *v34;\n  char v35;\n  __int64 v36;\n  __int64 v37;\n  __int64(__fastcall * v38)();\n  __int64 v39;\n  __int64(__fastcall * v40)();\n  __int64 v41;\n  unsigned int v42;\n  __int64 v43;\n  __int64 v44;\n  int v45;\n  __int64 v46;\n  __int64 v47;\n  __int64 v48;\n  __int64 v49;\n  __int64 v50;\n  __m128i *v51;\n  __m128i **v52;\n  __m128i *v53;\n  __int64 result;\n  __int64 v55;\n  int *v56;\n  int v57;\n  int *v58;\n  int v59;\n  unsigned int i;\n  __int64 v61;\n  int v62;\n  int j;\n  __int64 v64;\n  __int64 v65;\n  __int64 v66;\n  __int64 v67;\n  __int64 v68;\n  _QWORD *v70;\n  _QWORD *v71;\n  _QWORD *v72;\n  _QWORD *v73;\n  _QWORD *v74;\n  _QWORD *v75;\n  _QWORD *v76;\n  char v77;\n  char v78;\n  _QWORD *v79;\n  char v80;\n  __int64 v81;\n  char v82;\n  char v83;\n  _QWORD *v84;\n  _QWORD *v85;\n  char v86;\n  __int64 v87;\n  __int64 v88;\n  __int64 v89;\n  __int64 v90;\n  unsigned int v91;\n  char v92;\n  int v93;\n  unsigned __int64 v94;\n  __m128i **v95;\n  unsigned int v96;\n  int v97;\n  unsigned int v98;\n  __int64 v99;\n  __int128 v100;\n  v92 = a4;\n  if ((int)a6 > Number)\n  LABEL_108:\n    _assert_fail(String, String, Number, String);\n  if ((a6 & Number) == Number) {\n    v9 = *(unsigned __int16 *)(a2 + Number);\n    if (a3 >= (unsigned int)v9)\n      llvm SDNode getValueType(a1, a2, v9, a4, a5);\n    v10 = a1;\n    v11 = Number L * a3 + *(_QWORD *)(a2 + Number);\n    v93 = *(_DWORD *)v11;\n    v90 = *(_QWORD *)(v11 + Number);\n    v91 = *(_DWORD *)v11;\n    if (*(int *)v11 > Number)\n      goto LABEL_118;\n    if (*(_DWORD *)v11 > Number)\n      _assert_fail(String, String, Number, String);\n    v39 = a1[Number];\n    v13 = *(_QWORD *)(v39 + Number L * v93 + Number);\n    if (v13) {\n      v40 = *(__int64(__fastcall **)())(*(_QWORD *)v39 + Number L);\n      if (v40 == llvm TargetLowering getRegClassFor) {\n        if ((unsigned __int8)a5 | (unsigned __int8)a4) {\n          v88 = *(_QWORD *)(v39 + Number L * v93 + Number);\n          v82 = a5 | a4;\n          v75 = v10;\n          v55 = llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6,\n                                                               v91, v90);\n          v34 = v75;\n          v35 = v82;\n          v33 = v88;\n          v36 = v55;\n          goto LABEL_63;\n        }\n        v12 = *(_QWORD *)(a2 + Number);\n        if (!v12) {\n          v81 = *(_QWORD *)(v39 + Number L * v93 + Number);\n          v72 = v10;\n          v41 = llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6,\n                                                               v91, v90);\n          v34 = v72;\n          v33 = v81;\n          v35 = Number;\n          v36 = v41;\n          goto LABEL_63;\n        }\n        goto LABEL_8;\n      }\n      v84 = v10;\n      v77 = a5 | a4;\n      v66 =\n          ((__int64(__fastcall *)(__int64, _QWORD, __int64))v40)(v39, v91, v90);\n      v14 = v77;\n      v10 = v84;\n      v13 = v66;\n      if (v77)\n        goto LABEL_37;\n      v12 = *(_QWORD *)(a2 + Number);\n      if (!v12) {\n        v14 = Number;\n      LABEL_37:\n        v87 = v13;\n        v80 = v14;\n        v71 = v10;\n        v32 = llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6,\n                                                             v91, v90);\n        v33 = v87;\n        v34 = v71;\n        v35 = v80;\n        v36 = v32;\n        if (v87) {\n        LABEL_63:\n          v56 = *(int **)(v33 + Number);\n          v57 = *v56;\n          if (!*v56)\n          LABEL_72:\n            _assert_fail(String, String, Number, String String);\n          v58 = v56 + Number;\n          while (v93 != v57 || v90 && v93 == Number) {\n            v57 = *v58++;\n            if (!v57)\n              goto LABEL_72;\n          }\n        LABEL_68:\n          if (!v35 || *(char *)(*(_QWORD *)v36 + Number L) >= Number) {\n            v43 = v34[Number];\n            goto LABEL_50;\n          }\n          v45 = a6;\n        LABEL_55:\n          if (!v92 || !*(_DWORD *)a7)\n            goto LABEL_56;\n          if (a3 || a2 != Number) {\n            v59 = Number;\n            for (i = a3 + ((a2 >> Number) ^ (a2 >> Number));; i += v59++) {\n              v61 = *(_QWORD *)(a7 + Number) +\n                    Number L * ((*(_DWORD *)a7 - Number) & i);\n              if (a2 == *(_QWORD *)v61 && a3 == *(_DWORD *)(v61 + Number))\n                break;\n              if (*(_QWORD *)v61 == Number &&\n                  *(_DWORD *)(v61 + Number) == Number)\n                goto LABEL_56;\n            }\n            *(_QWORD *)v61 = Number;\n            *(_DWORD *)(v61 + Number) = Number;\n            --*(_DWORD *)(a7 + Number);\n            ++*(_DWORD *)(a7 + Number);\n          LABEL_56:\n            v94 = a2;\n            LODWORD(v95) = a3;\n            v96 = v45;\n            result = llvm DenseMap<llvm SDValue, unsigned int,\n                                   llvm DenseMapInfo<llvm SDValue>>\n                insert(&v97, a7, &v94);\n            if (!(_BYTE)v100)\n              _assert_fail(String, String, Number, String String);\n            return result;\n          }\n        LABEL_102:\n          _assert_fail(String String, String, Number,\n                       String String String String);\n        }\n      LABEL_38:\n        v37 = v34[Number];\n        v38 = *(__int64(__fastcall **)())(*(_QWORD *)v37 + Number L);\n        if (v38 == llvm TargetLowering getRegClassFor) {\n          if (v93 > Number)\n            _assert_fail(String, String, Number, String);\n          v33 = *(_QWORD *)(v37 + Number L * v93 + Number);\n          if (!v33)\n            _assert_fail(String, String, Number, String);\n        } else {\n          v85 = v34;\n          v78 = v35;\n          v67 = ((__int64(__fastcall *)(__int64, _QWORD, __int64))v38)(v37, v91,\n                                                                       v90);\n          v35 = v78;\n          v34 = v85;\n          v33 = v67;\n        }\n        goto LABEL_68;\n      }\n    } else {\n    LABEL_118:\n      if ((unsigned __int8)a4 | (unsigned __int8)a5) {\n        v83 = a4 | a5;\n        v76 = v10;\n        v65 = llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6,\n                                                             v91, v90);\n        v34 = v76;\n        v35 = v83;\n        v36 = v65;\n        goto LABEL_38;\n      }\n      v12 = *(_QWORD *)(a2 + Number);\n      if (!v12) {\n        v79 = v10;\n        v68 = llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6,\n                                                             v91, v90);\n        v34 = v79;\n        v35 = Number;\n        v36 = v68;\n        goto LABEL_38;\n      }\n      v13 = Number L;\n    }\n  LABEL_8:\n    v14 = Number;\n    while (Number) {\n      while (Number) {\n        v18 = *(_QWORD *)(v12 + Number);\n        v19 = *(unsigned __int16 *)(v18 + Number);\n        if (*(_WORD *)(v18 + Number) != Number)\n          break;\n        v15 = *(_QWORD *)(v18 + Number);\n        if ((unsigned __int16)v19 <= Number)\n        LABEL_97:\n          _assert_fail(String, String, Number, String);\n        if (a2 != *(_QWORD *)(v15 + Number) || a3 != *(_DWORD *)(v15 + Number))\n          goto LABEL_21;\n        v16 = *(_QWORD *)(v15 + Number);\n        if (*(_WORD *)(v16 + Number) != Number)\n          _assert_fail(String, String, Number, String String);\n        v17 = *(_DWORD *)(v16 + Number);\n        if (v17 > Number)\n          goto LABEL_108;\n        if (v17 < Number) {\n          v73 = v10;\n          v42 = v17 & Number;\n          llvm TargetRegisterInfo getMinimalPhysRegClass(v10[Number], a6, v91,\n                                                         v90);\n          v34 = v73;\n          v43 = v73[Number];\n          v44 = *(_QWORD *)(v43 + Number);\n          if (v42 >=\n              (unsigned __int64)((*(_QWORD *)(v43 + Number) - v44) >> Number))\n            _assert_fail(String, String, Number,\n                         String String String String String);\n          v33 = *(_QWORD *)(v44 + Number L * v42);\n        LABEL_50:\n          v74 = v34;\n          v45 = llvm MachineRegisterInfo createVirtualRegister(v43, v33);\n          v46 = v74[Number];\n          v47 = *(_QWORD *)(v46 + Number);\n          if (*(_DWORD *)(v46 + Number) <= Number)\n            llvm MCInstrInfo get(v43, v47);\n          v48 = v74[Number];\n          v49 = *(_QWORD *)(a2 + Number);\n          v50 = *(_QWORD *)(v48 + Number);\n          v95 = (__m128i **)v74[Number];\n          v51 = (__m128i *)llvm MachineFunction CreateMachineInstr(\n              v50, v47 + Number, v49, Number L);\n          v52 = v95;\n          v53 = *v95;\n          *v51 = _mm_unpacklo_epi64((__m128i)(unsigned __int64)*v95,\n                                    (__m128i)(unsigned __int64)v95);\n          if (v52 == *(__m128i ***)(v48 + Number))\n            *(_QWORD *)(v48 + Number) = v51;\n          else\n            v53->m128i_i64[Number] = (__int64)v51;\n          *v52 = v51;\n          llvm ilist_traits<llvm MachineInstr> addNodeToList(v48 + Number, v51);\n          if ((v51[Number].m128i_i8[Number] & Number) != Number)\n            _assert_fail(String, String, Number, String String);\n          v98 = v45;\n          v100 = Number L;\n          v99 = Number L;\n          v97 = Number;\n          llvm MachineInstr addOperand(v51, &v97);\n          v97 = Number;\n          v99 = Number L;\n          v98 = a6;\n          v100 = Number L;\n          llvm MachineInstr addOperand(v51, &v97);\n          goto LABEL_55;\n        }\n        if (v17 != a6)\n          v14 = Number;\n      LABEL_17:\n        v12 = *(_QWORD *)(v12 + Number);\n        if (!v12)\n          goto LABEL_37;\n      }\n      if (!*(_WORD *)(v18 + Number))\n        goto LABEL_17;\n      v15 = *(_QWORD *)(v18 + Number);\n    LABEL_21:\n      v20 = (unsigned int)(v19 - Number);\n      v21 = Number L;\n      v22 = Number;\n      while (Number) {\n        v23 = v15 + Number * v21;\n        v24 = *(unsigned int *)(v23 + Number);\n        if ((_DWORD)v24 != a3 || *(_QWORD *)v23 != a2)\n          goto LABEL_22;\n        if ((unsigned int)v24 >= *(unsigned __int16 *)(a2 + Number))\n          _assert_fail(String, String, Number, String);\n        v25 = *(_DWORD *)(*(_QWORD *)(a2 + Number) + Number * v24);\n        if (v25 == Number)\n          goto LABEL_22;\n        if (!v25)\n          goto LABEL_22;\n        v22 = Number;\n        if (*(__int16 *)(v18 + Number) >= Number)\n          goto LABEL_22;\n        v26 = v10[Number];\n        v27 = ~*(__int16 *)(v18 + Number);\n        if (*(_DWORD *)(v26 + Number) <= (unsigned int)v27)\n          _assert_fail(String, String, Number, String);\n        v28 = *(_QWORD *)(v26 + Number) + Number L * v27;\n        v29 = (unsigned int)v21 + *(unsigned __int16 *)(v28 + Number);\n        if ((unsigned int)v29 >= *(unsigned __int16 *)(v28 + Number))\n          goto LABEL_22;\n        v89 = v13;\n        v86 = v14;\n        v70 = v10;\n        v30 = llvm TargetInstrInfo getRegClass(v26, v28, v29, v10[Number]);\n        v13 = v89;\n        v10 = v70;\n        v22 = Number;\n        v14 = v86;\n        if (!v89) {\n          v13 = v30;\n        LABEL_22:\n          if (v21 == v20)\n            break;\n          goto LABEL_23;\n        }\n        if (!v30)\n          goto LABEL_22;\n        v31 = llvm TargetRegisterInfo getCommonSubClass(v70[Number], v89, v30);\n        v13 = v89;\n        v10 = v70;\n        v22 = Number;\n        v14 = v86;\n        if (v31)\n          v13 = v31;\n        if (v21 == v20)\n          break;\n      LABEL_23:\n        ++v21;\n        v15 = *(_QWORD *)(v18 + Number);\n        if (*(unsigned __int16 *)(v18 + Number) <= (unsigned int)v21)\n          goto LABEL_97;\n      }\n      v12 = *(_QWORD *)(v12 + Number);\n      v14 &= v22;\n      if (!v12)\n        goto LABEL_37;\n    }\n  }\n  if ((_BYTE)a4 && *(_DWORD *)a7) {\n    if (a2 == Number && a3 - Number > Number)\n      goto LABEL_102;\n    v62 = Number;\n    for (j = a3 + ((a2 >> Number) ^ (a2 >> Number));; j += v62++) {\n      v64 = *(_QWORD *)(a7 + Number) +\n            Number L * (j & (unsigned int)(*(_DWORD *)a7 - Number));\n      if (a2 == *(_QWORD *)v64 && a3 == *(_DWORD *)(v64 + Number))\n        break;\n      if (*(_QWORD *)v64 == Number && *(_DWORD *)(v64 + Number) == Number)\n        goto LABEL_60;\n    }\n    *(_QWORD *)v64 = Number;\n    *(_DWORD *)(v64 + Number) = Number;\n    --*(_DWORD *)(a7 + Number);\n    ++*(_DWORD *)(a7 + Number);\n  }\nLABEL_60:\n  v94 = a2;\n  LODWORD(v95) = a3;\n  v96 = a6;\n  result =\n      llvm DenseMap<llvm SDValue, unsigned int, llvm DenseMapInfo<llvm SDValue>>\n          insert(&v97, a7, &v94);\n  if (!(_BYTE)v100)\n    _assert_fail(String, String, Number, String String);\n  return result;\n}", "var": [], "body_in_train": false}, {"repo_owner": "zhy1905", "repo_name": "dolphin-player", "path": "zhy1905/dolphin-player/0d56cb1a5eec9a78075c89716ff228725c56e723641bfbd79997b5ac2b9f51b5", "path_in_repo": "zhy1905/dolphin-player/p/native/ffmpeg/ffmpeg-0.11.1/libavcodec/dv_profile.o", "objdump": "0000000000000220 <avpriv_dv_codec_profile>:\n 220:\t48 89 7c 24 e8       \tmov    %rdi,-0x18(%rsp)\n 225:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 22a:\t8b 80 9c 00 00 00    \tmov    0x9c(%rax),%eax\n 230:\t85 c0                \ttest   %eax,%eax\n 232:\t75 0f                \tjne    243 <avpriv_dv_codec_profile+0x23>\n 234:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 239:\t8b 80 a0 00 00 00    \tmov    0xa0(%rax),%eax\n 23f:\t85 c0                \ttest   %eax,%eax\n 241:\t74 20                \tje     263 <avpriv_dv_codec_profile+0x43>\n 243:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 248:\t8b 80 9c 00 00 00    \tmov    0x9c(%rax),%eax\n 24e:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n 252:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 257:\t8b 80 a0 00 00 00    \tmov    0xa0(%rax),%eax\n 25d:\t89 44 24 f4          \tmov    %eax,-0xc(%rsp)\n 261:\teb 1e                \tjmp    281 <avpriv_dv_codec_profile+0x61>\n 263:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 268:\t8b 80 94 00 00 00    \tmov    0x94(%rax),%eax\n 26e:\t89 44 24 f8          \tmov    %eax,-0x8(%rsp)\n 272:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 277:\t8b 80 98 00 00 00    \tmov    0x98(%rax),%eax\n 27d:\t89 44 24 f4          \tmov    %eax,-0xc(%rsp)\n 281:\tc7 44 24 fc 00 00 00 \tmovl   $0x0,-0x4(%rsp)\n 288:\t00 \n 289:\te9 93 00 00 00       \tjmpq   321 <avpriv_dv_codec_profile+0x101>\n 28e:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n 292:\t48 63 d0             \tmovslq %eax,%rdx\n 295:\t48 89 d0             \tmov    %rdx,%rax\n 298:\t48 c1 e0 04          \tshl    $0x4,%rax\n 29c:\t48 01 d0             \tadd    %rdx,%rax\n 29f:\t48 c1 e0 03          \tshl    $0x3,%rax\n 2a3:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 2a9:\t8b 00                \tmov    (%rax),%eax\n 2ab:\t39 44 24 f4          \tcmp    %eax,-0xc(%rsp)\n 2af:\t75 6b                \tjne    31c <avpriv_dv_codec_profile+0xfc>\n 2b1:\t48 8b 44 24 e8       \tmov    -0x18(%rsp),%rax\n 2b6:\t8b 88 a8 00 00 00    \tmov    0xa8(%rax),%ecx\n 2bc:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n 2c0:\t48 63 d0             \tmovslq %eax,%rdx\n 2c3:\t48 89 d0             \tmov    %rdx,%rax\n 2c6:\t48 c1 e0 04          \tshl    $0x4,%rax\n 2ca:\t48 01 d0             \tadd    %rdx,%rax\n 2cd:\t48 c1 e0 03          \tshl    $0x3,%rax\n 2d1:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 2d7:\t8b 00                \tmov    (%rax),%eax\n 2d9:\t39 c1                \tcmp    %eax,%ecx\n 2db:\t75 3f                \tjne    31c <avpriv_dv_codec_profile+0xfc>\n 2dd:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n 2e1:\t48 63 d0             \tmovslq %eax,%rdx\n 2e4:\t48 89 d0             \tmov    %rdx,%rax\n 2e7:\t48 c1 e0 04          \tshl    $0x4,%rax\n 2eb:\t48 01 d0             \tadd    %rdx,%rax\n 2ee:\t48 c1 e0 03          \tshl    $0x3,%rax\n 2f2:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 2f8:\t8b 00                \tmov    (%rax),%eax\n 2fa:\t39 44 24 f8          \tcmp    %eax,-0x8(%rsp)\n 2fe:\t75 1c                \tjne    31c <avpriv_dv_codec_profile+0xfc>\n 300:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n 304:\t48 63 d0             \tmovslq %eax,%rdx\n 307:\t48 89 d0             \tmov    %rdx,%rax\n 30a:\t48 c1 e0 04          \tshl    $0x4,%rax\n 30e:\t48 01 d0             \tadd    %rdx,%rax\n 311:\t48 c1 e0 03          \tshl    $0x3,%rax\n 315:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n 31b:\tc3                   \tretq   \n 31c:\t83 44 24 fc 01       \taddl   $0x1,-0x4(%rsp)\n 321:\t8b 44 24 fc          \tmov    -0x4(%rsp),%eax\n 325:\t83 f8 09             \tcmp    $0x9,%eax\n 328:\t0f 86 60 ff ff ff    \tjbe    28e <avpriv_dv_codec_profile+0x6e>\n 32e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 333:\tc3                   \tretq   ", "code_s": "char *__fastcall avpriv_dv_codec_profile(_DWORD *a1) {\n  int v2;\n  int v3;\n  unsigned int i;\n  if (a1[Number] || a1[Number]) {\n    v3 = a1[Number];\n    v2 = a1[Number];\n  } else {\n    v3 = a1[Number];\n    v2 = a1[Number];\n  }\n  for (i = Number; i <= Number; ++i) {\n    if (v2 == *((_DWORD *)&unk_26720 + Number * (int)i) &&\n        a1[Number] == *((_DWORD *)&unk_26748 + Number * (int)i) &&\n        v3 == *((_DWORD *)&unk_26724 + Number * (int)i)) {\n      return (char *)&dv_profiles + Number * (int)i;\n    }\n  }\n  return Number L;\n}", "code_t": "const DVprofile_0 *__cdecl avpriv_dv_codec_profile(AVCodecContext_0 *codec) {\n  int h;\n  int w;\n  unsigned int i;\n  if (codec->coded_width || codec->coded_height) {\n    w = codec->coded_width;\n    h = codec->coded_height;\n  } else {\n    w = codec->width;\n    h = codec->height;\n  }\n  for (i = Number; i <= Number; ++i) {\n    if (h == dv_profiles[i].height &&\n        codec->pix_fmt == dv_profiles[i].pix_fmt && w == dv_profiles[i].width)\n      return &dv_profiles[i];\n  }\n  return Number L;\n}", "var": [], "body_in_train": true}, {"repo_owner": "estonetechnology", "repo_name": "ppc-4510-android-kernel-imx", "path": "estonetechnology/ppc-4510-android-kernel-imx/bcfee7e905c401c02e192956aae33c506c17f1272653b3f7ca0a33c7d0a93952", "path_in_repo": "estonetechnology/ppc-4510-android-kernel-imx/tools/perf/util/session.o", "objdump": "0000000000000070 <__bswap_64>:\n      70:\t55                   \tpush   %rbp\n      71:\t48 89 e5             \tmov    %rsp,%rbp\n      74:\t48 83 ec 20          \tsub    $0x20,%rsp\n      78:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n      7c:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n      83:\t00 00 \n      85:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n      89:\t31 c0                \txor    %eax,%eax\n      8b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n      8f:\t48 0f c8             \tbswap  %rax\n      92:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n      96:\t64 48 33 14 25 28 00 \txor    %fs:0x28,%rdx\n      9d:\t00 00 \n      9f:\t74 05                \tje     a6 <__bswap_64+0x36>\n      a1:\te8 00 00 00 00       \tcallq  a6 <__bswap_64+0x36>\n      a6:\tc9                   \tleaveq \n      a7:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall _bswap_64(unsigned __int64 a1) {\n  return _byteswap_uint64(a1);\n}", "code_t": "__uint64_t __cdecl _bswap_64(__uint64_t __bsx) {\n  return _byteswap_uint64(__bsx);\n}", "var": [], "body_in_train": true}, {"repo_owner": "grivon", "repo_name": "yabusame-qemu-dpt", "path": "grivon/yabusame-qemu-dpt/1ef9e9770519bfc399ef021c87f603368648d14266e79d7a80ab603d77be9610", "path_in_repo": "grivon/yabusame-qemu-dpt//ui/vnc.o", "objdump": "0000000000004601 <press_key>:\n    4601:\t55                   \tpush   %rbp\n    4602:\t48 89 e5             \tmov    %rsp,%rbp\n    4605:\t48 83 ec 20          \tsub    $0x20,%rsp\n    4609:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n    460d:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n    4610:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    4617:\t00 00 \n    4619:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    461d:\t31 c0                \txor    %eax,%eax\n    461f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    4623:\t48 8b 80 18 c0 00 00 \tmov    0xc018(%rax),%rax\n    462a:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n    462e:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n    4631:\t89 d6                \tmov    %edx,%esi\n    4633:\t48 89 c7             \tmov    %rax,%rdi\n    4636:\te8 00 00 00 00       \tcallq  463b <press_key+0x3a>\n    463b:\t25 ff 00 00 00       \tand    $0xff,%eax\n    4640:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    4643:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4646:\t25 80 00 00 00       \tand    $0x80,%eax\n    464b:\t85 c0                \ttest   %eax,%eax\n    464d:\t74 0a                \tje     4659 <press_key+0x58>\n    464f:\tbf e0 00 00 00       \tmov    $0xe0,%edi\n    4654:\te8 00 00 00 00       \tcallq  4659 <press_key+0x58>\n    4659:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    465c:\t83 e0 7f             \tand    $0x7f,%eax\n    465f:\t89 c7                \tmov    %eax,%edi\n    4661:\te8 00 00 00 00       \tcallq  4666 <press_key+0x65>\n    4666:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    4669:\t25 80 00 00 00       \tand    $0x80,%eax\n    466e:\t85 c0                \ttest   %eax,%eax\n    4670:\t74 0a                \tje     467c <press_key+0x7b>\n    4672:\tbf e0 00 00 00       \tmov    $0xe0,%edi\n    4677:\te8 00 00 00 00       \tcallq  467c <press_key+0x7b>\n    467c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n    467f:\t0c 80                \tor     $0x80,%al\n    4681:\t89 c7                \tmov    %eax,%edi\n    4683:\te8 00 00 00 00       \tcallq  4688 <press_key+0x87>\n    4688:\t90                   \tnop\n    4689:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    468d:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    4694:\t00 00 \n    4696:\t74 05                \tje     469d <press_key+0x9c>\n    4698:\te8 00 00 00 00       \tcallq  469d <press_key+0x9c>\n    469d:\tc9                   \tleaveq \n    469e:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall press_key(__int64 a1, unsigned int a2) {\n  unsigned __int8 v2;\n  unsigned int v3;\n  unsigned int v5;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  v2 = keysym2scancode(*(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L), a2);\n  v5 = v2;\n  if ((v2 & Number) != Number)\n    kbd_put_keycode(Number L);\n  kbd_put_keycode(v5 & Number);\n  if ((v5 & Number) != Number)\n    kbd_put_keycode(Number L);\n  v3 = v5;\n  LOBYTE(v3) = v5 | Number;\n  kbd_put_keycode(v3);\n  return __readfsqword(Number) ^ v6;\n}", "code_t": "void __cdecl press_key(VncState_0 *vs, int keysym) {\n  unsigned __int8 v2;\n  unsigned int v3;\n  int keycode;\n  v2 = keysym2scancode(vs->vd->kbd_layout, (unsigned int)keysym);\n  keycode = v2;\n  if ((v2 & Number) != Number)\n    kbd_put_keycode(Number L);\n  kbd_put_keycode(keycode & Number);\n  if ((keycode & Number) != Number)\n    kbd_put_keycode(Number L);\n  v3 = keycode;\n  LOBYTE(v3) = keycode | Number;\n  kbd_put_keycode(v3);\n}", "var": [], "body_in_train": false}]