[{"repo_owner": "AndersTrier", "repo_name": "QEMU-bitflip", "path": "AndersTrier/QEMU-bitflip/c34f35a1106ddcaca4ca4f421478cc6ebdc6681fbc51ffefdfce2779c51c088f", "path_in_repo": "AndersTrier/QEMU-bitflip//block/io.o", "objdump": "00000000000064c3 <bdrv_co_ioctl>:\n    64c3:\t55                   \tpush   %rbp\n    64c4:\t48 89 e5             \tmov    %rsp,%rbp\n    64c7:\t48 83 ec 50          \tsub    $0x50,%rsp\n    64cb:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    64cf:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    64d2:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n    64d6:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    64dd:\t00 00 \n    64df:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    64e3:\t31 c0                \txor    %eax,%eax\n    64e5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    64e9:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n    64ed:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    64f1:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    64f8:\t00 \n    64f9:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    6500:\t00 \n    6501:\te8 00 00 00 00       \tcallq  6506 <bdrv_co_ioctl+0x43>\n    6506:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    650a:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    650e:\t48 89 c7             \tmov    %rax,%rdi\n    6511:\te8 00 00 00 00       \tcallq  6516 <bdrv_co_ioctl+0x53>\n    6516:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n    651b:\t74 20                \tje     653d <bdrv_co_ioctl+0x7a>\n    651d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    6521:\t48 8b 80 b8 01 00 00 \tmov    0x1b8(%rax),%rax\n    6528:\t48 85 c0             \ttest   %rax,%rax\n    652b:\t75 19                \tjne    6546 <bdrv_co_ioctl+0x83>\n    652d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    6531:\t48 8b 80 c0 01 00 00 \tmov    0x1c0(%rax),%rax\n    6538:\t48 85 c0             \ttest   %rax,%rax\n    653b:\t75 09                \tjne    6546 <bdrv_co_ioctl+0x83>\n    653d:\tc7 45 e8 a1 ff ff ff \tmovl   $0xffffffa1,-0x18(%rbp)\n    6544:\teb 7d                \tjmp    65c3 <bdrv_co_ioctl+0x100>\n    6546:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    654a:\t48 8b 80 c0 01 00 00 \tmov    0x1c0(%rax),%rax\n    6551:\t48 85 c0             \ttest   %rax,%rax\n    6554:\t74 27                \tje     657d <bdrv_co_ioctl+0xba>\n    6556:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    655a:\t4c 8b 80 c0 01 00 00 \tmov    0x1c0(%rax),%r8\n    6561:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    6564:\t48 63 c8             \tmovslq %eax,%rcx\n    6567:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    656b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    656f:\t48 89 ce             \tmov    %rcx,%rsi\n    6572:\t48 89 c7             \tmov    %rax,%rdi\n    6575:\t41 ff d0             \tcallq  *%r8\n    6578:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    657b:\teb 46                \tjmp    65c3 <bdrv_co_ioctl+0x100>\n    657d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    6581:\t4c 8b 88 b8 01 00 00 \tmov    0x1b8(%rax),%r9\n    6588:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    658b:\t48 63 f0             \tmovslq %eax,%rsi\n    658e:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n    6592:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    6596:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    659a:\t49 89 c8             \tmov    %rcx,%r8\n    659d:\t48 8d 0d 9d ba ff ff \tlea    -0x4563(%rip),%rcx        # 2041 <bdrv_co_io_em_complete>\n    65a4:\t48 89 c7             \tmov    %rax,%rdi\n    65a7:\t41 ff d1             \tcallq  *%r9\n    65aa:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    65ae:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    65b3:\t75 09                \tjne    65be <bdrv_co_ioctl+0xfb>\n    65b5:\tc7 45 e8 a1 ff ff ff \tmovl   $0xffffffa1,-0x18(%rbp)\n    65bc:\teb 05                \tjmp    65c3 <bdrv_co_ioctl+0x100>\n    65be:\te8 00 00 00 00       \tcallq  65c3 <bdrv_co_ioctl+0x100>\n    65c3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    65c7:\t48 89 c7             \tmov    %rax,%rdi\n    65ca:\te8 00 00 00 00       \tcallq  65cf <bdrv_co_ioctl+0x10c>\n    65cf:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n    65d2:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    65d6:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    65dd:\t00 00 \n    65df:\t74 05                \tje     65e6 <bdrv_co_ioctl+0x123>\n    65e1:\te8 00 00 00 00       \tcallq  65e6 <bdrv_co_ioctl+0x123>\n    65e6:\tc9                   \tleaveq \n    65e7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall bdrv_co_ioctl(__int64 a1, int a2, __int64 a3) {\n  __int64 v5;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 v7;\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  v5 = *(_QWORD *)(a1 + Number);\n  v7 = Number L;\n  <span class=\"supfact\">v6</span> = qemu_coroutine_self();\n  bdrv_inc_in_flight(a1);\n  if (v5 && (*(_QWORD *)(v5 + Number) || *(_QWORD *)(v5 + Number))) {\n    if (*(_QWORD *)(v5 + Number)) {\n      LODWORD(v7) = (*(__int64(__fastcall **)(__int64, _QWORD, __int64))(\n          v5 + Number))(a1, a2, a3);\n    } else if ((*(__int64(__fastcall **)(__int64, _QWORD, __int64,\n                                         __int64(__fastcall *)(__int64, int),\n                                         __int64 *))(v5 + Number))(\n                   a1, a2, a3, bdrv_co_io_em_complete, &<span class=\"supfact\">v6</span>)) {\n      qemu_coroutine_yield();\n    } else {\n      LODWORD(v7) = Number;\n    }\n  } else {\n    LODWORD(v7) = Number;\n  }\n  bdrv_dec_in_flight(a1);\n  return (unsigned int)v7;\n}", "code_t": "int __cdecl bdrv_co_ioctl(BlockDriverState_0 *bs, int req, void *buf) {\n  BlockDriver_0 *drv;\n  CoroutineIOCompletion_0 <span class=\"supfact\">co</span>;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  drv = bs->drv;\n  *(_QWORD *)&<span class=\"supfact\">co</span>.ret = Number L;\n  <span class=\"supfact\">co</span>.coroutine = (Coroutine_0 *)qemu_coroutine_self();\n  bdrv_inc_in_flight(bs);\n  if (drv && (drv->bdrv_aio_ioctl || drv->bdrv_co_ioctl)) {\n    if (drv->bdrv_co_ioctl) {\n      <span class=\"supfact\">co</span>.ret = drv->bdrv_co_ioctl(bs, req, buf);\n    } else if (drv->bdrv_aio_ioctl(\n                   bs, req, buf, (BlockCompletionFunc *)bdrv_co_io_em_complete,\n                   &<span class=\"supfact\">co</span>)) {\n      qemu_coroutine_yield();\n    } else {\n      <span class=\"supfact\">co</span>.ret = Number;\n    }\n  } else {\n    <span class=\"supfact\">co</span>.ret = Number;\n  }\n  bdrv_dec_in_flight(bs);\n  return <span class=\"supfact\">co</span>.ret;\n}", "var": [{"name": "v6", "type": "struct CoroutineIOCompletion_0 { Coroutine_0 * coroutine; int ret; PADDING (4); }", "pred_name": "co", "ref_name": "co", "ref_type": "struct CoroutineIOCompletion_0 { Coroutine_0 * coroutine; int ret; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "franziskuskiefer", "repo_name": "nss-benchmark", "path": "franziskuskiefer/nss-benchmark/71d3b443d1732395e32dd7f5c54d703494c3586ced7efb8a5685017cee5e721d", "path_in_repo": "franziskuskiefer/nss-benchmark/supercop-20171218/ntl-10.5.0/src/quad_float.o", "objdump": "0000000000000d70 <_ZN3NTL17random_quad_floatEv>:\n     d70:\t48 83 ec 18          \tsub    $0x18,%rsp\n     d74:\t48 89 e7             \tmov    %rsp,%rdi\n     d77:\t48 c7 04 24 00 00 00 \tmovq   $0x0,(%rsp)\n     d7e:\t00 \n     d7f:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n     d86:\t00 00 \n     d88:\te8 00 00 00 00       \tcallq  d8d <_ZN3NTL17random_quad_floatEv+0x1d>\n     d8d:\tc5 fb 10 04 24       \tvmovsd (%rsp),%xmm0\n     d92:\tc5 fb 10 4c 24 08    \tvmovsd 0x8(%rsp),%xmm1\n     d98:\t48 83 c4 18          \tadd    $0x18,%rsp\n     d9c:\tc3                   \tretq   \n     d9d:\t0f 1f 00             \tnopl   (%rax)", "code_s": "__int64 __fastcall NTL random_quad_float(NTL *this, NTL quad_float *a2) {\n  __int64 result;\n  __int64 <span class=\"supfact\">v5</span>;\n  __int64 v6;\n  <span class=\"supfact\">v5</span> = Number L;\n  v6 = Number L;\n  result = NTL random((NTL *)&<span class=\"supfact\">v5</span>, a2);\n  __asm { vmovsd xmm0 , [ rsp + Number h + var_18 ] vmovsd xmm1 , [ rsp + Number h + var_10 ]\n  }\n  return result;\n}", "code_t": "NTL quad_float __cdecl NTL random_quad_float() {\n  NTL quad_float *v0;\n  NTL quad_float result;\n  NTL quad_float <span class=\"supfact\">x</span>;\n  <span class=\"supfact\">x</span>.hi = Number;\n  <span class=\"supfact\">x</span>.lo = Number;\n  NTL random((NTL *)&<span class=\"supfact\">x</span>, v0);\n  __asm { vmovsd xmm0 , [ rsp + Number h + <span class=\"supfact\">x</span> . hi ] vmovsd xmm1 , [ rsp + Number h + <span class=\"supfact\">x</span> . lo ]}\n  result.lo = *(double *)&_XMM1;\n  result.hi = *(double *)&_XMM0;\n  return result;\n}", "var": [{"name": "v5", "type": "__int64", "pred_name": "v5", "ref_name": "x", "ref_type": "struct NTL::quad_float { double hi; double lo; }"}], "body_in_train": false}, {"repo_owner": "netconstructor", "repo_name": "freeswitch", "path": "netconstructor/freeswitch/364cb615de8d14c8183c50655fd432811a674c6985edc223c4cd2252eb32d997", "path_in_repo": "netconstructor/freeswitch/libs/xmlrpc-c/src/cpp/param_list.o", "objdump": "0000000000001d0e <_ZNK8xmlrpc_c9paramList5getI8Ejxx>:\n    1d0e:\t55                   \tpush   %rbp\n    1d0f:\t48 89 e5             \tmov    %rsp,%rbp\n    1d12:\t41 54                \tpush   %r12\n    1d14:\t53                   \tpush   %rbx\n    1d15:\t48 81 ec f0 00 00 00 \tsub    $0xf0,%rsp\n    1d1c:\t48 89 bd 18 ff ff ff \tmov    %rdi,-0xe8(%rbp)\n    1d23:\t89 b5 14 ff ff ff    \tmov    %esi,-0xec(%rbp)\n    1d29:\t48 89 95 08 ff ff ff \tmov    %rdx,-0xf8(%rbp)\n    1d30:\t48 89 8d 00 ff ff ff \tmov    %rcx,-0x100(%rbp)\n    1d37:\t8b 9d 14 ff ff ff    \tmov    -0xec(%rbp),%ebx\n    1d3d:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    1d44:\t48 89 c7             \tmov    %rax,%rdi\n    1d47:\te8 00 00 00 00       \tcallq  1d4c <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x3e>\n    1d4c:\t48 39 c3             \tcmp    %rax,%rbx\n    1d4f:\t0f 93 c0             \tsetae  %al\n    1d52:\t84 c0                \ttest   %al,%al\n    1d54:\t74 7e                \tje     1dd4 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0xc6>\n    1d56:\tbf 28 00 00 00       \tmov    $0x28,%edi\n    1d5b:\te8 00 00 00 00       \tcallq  1d60 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x52>\n    1d60:\t48 89 c3             \tmov    %rax,%rbx\n    1d63:\t48 8d 85 4f ff ff ff \tlea    -0xb1(%rbp),%rax\n    1d6a:\t48 89 c7             \tmov    %rax,%rdi\n    1d6d:\te8 00 00 00 00       \tcallq  1d72 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x64>\n    1d72:\t48 8d 95 4f ff ff ff \tlea    -0xb1(%rbp),%rdx\n    1d79:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    1d80:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1d85:\t48 89 c7             \tmov    %rax,%rdi\n    1d88:\te8 00 00 00 00       \tcallq  1d8d <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x7f>\n    1d8d:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    1d94:\tba 0b fe ff ff       \tmov    $0xfffffe0b,%edx\n    1d99:\t48 89 c6             \tmov    %rax,%rsi\n    1d9c:\t48 89 df             \tmov    %rbx,%rdi\n    1d9f:\te8 00 00 00 00       \tcallq  1da4 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x96>\n    1da4:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    1dab:\t48 89 c7             \tmov    %rax,%rdi\n    1dae:\te8 00 00 00 00       \tcallq  1db3 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0xa5>\n    1db3:\t48 8d 85 4f ff ff ff \tlea    -0xb1(%rbp),%rax\n    1dba:\t48 89 c7             \tmov    %rax,%rdi\n    1dbd:\te8 00 00 00 00       \tcallq  1dc2 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0xb4>\n    1dc2:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1dc7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1dcc:\t48 89 df             \tmov    %rbx,%rdi\n    1dcf:\te8 00 00 00 00       \tcallq  1dd4 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0xc6>\n    1dd4:\t8b 95 14 ff ff ff    \tmov    -0xec(%rbp),%edx\n    1dda:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    1de1:\t48 89 d6             \tmov    %rdx,%rsi\n    1de4:\t48 89 c7             \tmov    %rax,%rdi\n    1de7:\te8 00 00 00 00       \tcallq  1dec <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0xde>\n    1dec:\t48 89 c7             \tmov    %rax,%rdi\n    1def:\te8 00 00 00 00       \tcallq  1df4 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0xe6>\n    1df4:\t83 f8 0a             \tcmp    $0xa,%eax\n    1df7:\t0f 95 c0             \tsetne  %al\n    1dfa:\t84 c0                \ttest   %al,%al\n    1dfc:\t74 7e                \tje     1e7c <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x16e>\n    1dfe:\tbf 28 00 00 00       \tmov    $0x28,%edi\n    1e03:\te8 00 00 00 00       \tcallq  1e08 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0xfa>\n    1e08:\t48 89 c3             \tmov    %rax,%rbx\n    1e0b:\t48 8d 85 7f ff ff ff \tlea    -0x81(%rbp),%rax\n    1e12:\t48 89 c7             \tmov    %rax,%rdi\n    1e15:\te8 00 00 00 00       \tcallq  1e1a <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x10c>\n    1e1a:\t48 8d 95 7f ff ff ff \tlea    -0x81(%rbp),%rdx\n    1e21:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    1e28:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e2d:\t48 89 c7             \tmov    %rax,%rdi\n    1e30:\te8 00 00 00 00       \tcallq  1e35 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x127>\n    1e35:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    1e3c:\tba 0b fe ff ff       \tmov    $0xfffffe0b,%edx\n    1e41:\t48 89 c6             \tmov    %rax,%rsi\n    1e44:\t48 89 df             \tmov    %rbx,%rdi\n    1e47:\te8 00 00 00 00       \tcallq  1e4c <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x13e>\n    1e4c:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    1e53:\t48 89 c7             \tmov    %rax,%rdi\n    1e56:\te8 00 00 00 00       \tcallq  1e5b <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x14d>\n    1e5b:\t48 8d 85 7f ff ff ff \tlea    -0x81(%rbp),%rax\n    1e62:\t48 89 c7             \tmov    %rax,%rdi\n    1e65:\te8 00 00 00 00       \tcallq  1e6a <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x15c>\n    1e6a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1e6f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1e74:\t48 89 df             \tmov    %rbx,%rdi\n    1e77:\te8 00 00 00 00       \tcallq  1e7c <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x16e>\n    1e7c:\t8b 95 14 ff ff ff    \tmov    -0xec(%rbp),%edx\n    1e82:\t48 8b 85 18 ff ff ff \tmov    -0xe8(%rbp),%rax\n    1e89:\t48 89 d6             \tmov    %rdx,%rsi\n    1e8c:\t48 89 c7             \tmov    %rax,%rdi\n    1e8f:\te8 00 00 00 00       \tcallq  1e94 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x186>\n    1e94:\t48 89 c2             \tmov    %rax,%rdx\n    1e97:\t48 8d 45 88          \tlea    -0x78(%rbp),%rax\n    1e9b:\t48 89 d6             \tmov    %rdx,%rsi\n    1e9e:\t48 89 c7             \tmov    %rax,%rdi\n    1ea1:\te8 00 00 00 00       \tcallq  1ea6 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x198>\n    1ea6:\t48 8d 55 88          \tlea    -0x78(%rbp),%rdx\n    1eaa:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    1eae:\t48 89 d6             \tmov    %rdx,%rsi\n    1eb1:\t48 89 c7             \tmov    %rax,%rdi\n    1eb4:\te8 00 00 00 00       \tcallq  1eb9 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x1ab>\n    1eb9:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    1ebd:\t48 89 c7             \tmov    %rax,%rdi\n    1ec0:\te8 00 00 00 00       \tcallq  1ec5 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x1b7>\n    1ec5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1ec9:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    1ecd:\t48 89 c7             \tmov    %rax,%rdi\n    1ed0:\te8 00 00 00 00       \tcallq  1ed5 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x1c7>\n    1ed5:\t48 8d 45 88          \tlea    -0x78(%rbp),%rax\n    1ed9:\t48 89 c7             \tmov    %rax,%rdi\n    1edc:\te8 00 00 00 00       \tcallq  1ee1 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x1d3>\n    1ee1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1ee5:\t48 3b 85 08 ff ff ff \tcmp    -0xf8(%rbp),%rax\n    1eec:\t7d 6c                \tjge    1f5a <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x24c>\n    1eee:\tbf 28 00 00 00       \tmov    $0x28,%edi\n    1ef3:\te8 00 00 00 00       \tcallq  1ef8 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x1ea>\n    1ef8:\t48 89 c3             \tmov    %rax,%rbx\n    1efb:\t48 8d 45 bf          \tlea    -0x41(%rbp),%rax\n    1eff:\t48 89 c7             \tmov    %rax,%rdi\n    1f02:\te8 00 00 00 00       \tcallq  1f07 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x1f9>\n    1f07:\t48 8d 55 bf          \tlea    -0x41(%rbp),%rdx\n    1f0b:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    1f0f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f14:\t48 89 c7             \tmov    %rax,%rdi\n    1f17:\te8 00 00 00 00       \tcallq  1f1c <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x20e>\n    1f1c:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    1f20:\tba 0b fe ff ff       \tmov    $0xfffffe0b,%edx\n    1f25:\t48 89 c6             \tmov    %rax,%rsi\n    1f28:\t48 89 df             \tmov    %rbx,%rdi\n    1f2b:\te8 00 00 00 00       \tcallq  1f30 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x222>\n    1f30:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    1f34:\t48 89 c7             \tmov    %rax,%rdi\n    1f37:\te8 00 00 00 00       \tcallq  1f3c <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x22e>\n    1f3c:\t48 8d 45 bf          \tlea    -0x41(%rbp),%rax\n    1f40:\t48 89 c7             \tmov    %rax,%rdi\n    1f43:\te8 00 00 00 00       \tcallq  1f48 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x23a>\n    1f48:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1f4d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f52:\t48 89 df             \tmov    %rbx,%rdi\n    1f55:\te8 00 00 00 00       \tcallq  1f5a <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x24c>\n    1f5a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1f5e:\t48 3b 85 00 ff ff ff \tcmp    -0x100(%rbp),%rax\n    1f65:\t7e 6c                \tjle    1fd3 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x2c5>\n    1f67:\tbf 28 00 00 00       \tmov    $0x28,%edi\n    1f6c:\te8 00 00 00 00       \tcallq  1f71 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x263>\n    1f71:\t48 89 c3             \tmov    %rax,%rbx\n    1f74:\t48 8d 45 e7          \tlea    -0x19(%rbp),%rax\n    1f78:\t48 89 c7             \tmov    %rax,%rdi\n    1f7b:\te8 00 00 00 00       \tcallq  1f80 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x272>\n    1f80:\t48 8d 55 e7          \tlea    -0x19(%rbp),%rdx\n    1f84:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1f88:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f8d:\t48 89 c7             \tmov    %rax,%rdi\n    1f90:\te8 00 00 00 00       \tcallq  1f95 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x287>\n    1f95:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1f99:\tba 0b fe ff ff       \tmov    $0xfffffe0b,%edx\n    1f9e:\t48 89 c6             \tmov    %rax,%rsi\n    1fa1:\t48 89 df             \tmov    %rbx,%rdi\n    1fa4:\te8 00 00 00 00       \tcallq  1fa9 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x29b>\n    1fa9:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    1fad:\t48 89 c7             \tmov    %rax,%rdi\n    1fb0:\te8 00 00 00 00       \tcallq  1fb5 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x2a7>\n    1fb5:\t48 8d 45 e7          \tlea    -0x19(%rbp),%rax\n    1fb9:\t48 89 c7             \tmov    %rax,%rdi\n    1fbc:\te8 00 00 00 00       \tcallq  1fc1 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x2b3>\n    1fc1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1fc6:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1fcb:\t48 89 df             \tmov    %rbx,%rdi\n    1fce:\te8 00 00 00 00       \tcallq  1fd3 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x2c5>\n    1fd3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    1fd7:\te9 03 01 00 00       \tjmpq   20df <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x3d1>\n    1fdc:\t49 89 c4             \tmov    %rax,%r12\n    1fdf:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    1fe6:\t48 89 c7             \tmov    %rax,%rdi\n    1fe9:\te8 00 00 00 00       \tcallq  1fee <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x2e0>\n    1fee:\teb 03                \tjmp    1ff3 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x2e5>\n    1ff0:\t49 89 c4             \tmov    %rax,%r12\n    1ff3:\t48 8d 85 4f ff ff ff \tlea    -0xb1(%rbp),%rax\n    1ffa:\t48 89 c7             \tmov    %rax,%rdi\n    1ffd:\te8 00 00 00 00       \tcallq  2002 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x2f4>\n    2002:\t48 89 df             \tmov    %rbx,%rdi\n    2005:\te8 00 00 00 00       \tcallq  200a <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x2fc>\n    200a:\t4c 89 e0             \tmov    %r12,%rax\n    200d:\t48 89 c7             \tmov    %rax,%rdi\n    2010:\te8 00 00 00 00       \tcallq  2015 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x307>\n    2015:\t49 89 c4             \tmov    %rax,%r12\n    2018:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n    201f:\t48 89 c7             \tmov    %rax,%rdi\n    2022:\te8 00 00 00 00       \tcallq  2027 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x319>\n    2027:\teb 03                \tjmp    202c <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x31e>\n    2029:\t49 89 c4             \tmov    %rax,%r12\n    202c:\t48 8d 85 7f ff ff ff \tlea    -0x81(%rbp),%rax\n    2033:\t48 89 c7             \tmov    %rax,%rdi\n    2036:\te8 00 00 00 00       \tcallq  203b <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x32d>\n    203b:\t48 89 df             \tmov    %rbx,%rdi\n    203e:\te8 00 00 00 00       \tcallq  2043 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x335>\n    2043:\t4c 89 e0             \tmov    %r12,%rax\n    2046:\t48 89 c7             \tmov    %rax,%rdi\n    2049:\te8 00 00 00 00       \tcallq  204e <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x340>\n    204e:\t48 89 c3             \tmov    %rax,%rbx\n    2051:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    2055:\t48 89 c7             \tmov    %rax,%rdi\n    2058:\te8 00 00 00 00       \tcallq  205d <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x34f>\n    205d:\teb 03                \tjmp    2062 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x354>\n    205f:\t48 89 c3             \tmov    %rax,%rbx\n    2062:\t48 8d 45 88          \tlea    -0x78(%rbp),%rax\n    2066:\t48 89 c7             \tmov    %rax,%rdi\n    2069:\te8 00 00 00 00       \tcallq  206e <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x360>\n    206e:\t48 89 d8             \tmov    %rbx,%rax\n    2071:\t48 89 c7             \tmov    %rax,%rdi\n    2074:\te8 00 00 00 00       \tcallq  2079 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x36b>\n    2079:\t49 89 c4             \tmov    %rax,%r12\n    207c:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    2080:\t48 89 c7             \tmov    %rax,%rdi\n    2083:\te8 00 00 00 00       \tcallq  2088 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x37a>\n    2088:\teb 03                \tjmp    208d <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x37f>\n    208a:\t49 89 c4             \tmov    %rax,%r12\n    208d:\t48 8d 45 bf          \tlea    -0x41(%rbp),%rax\n    2091:\t48 89 c7             \tmov    %rax,%rdi\n    2094:\te8 00 00 00 00       \tcallq  2099 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x38b>\n    2099:\t48 89 df             \tmov    %rbx,%rdi\n    209c:\te8 00 00 00 00       \tcallq  20a1 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x393>\n    20a1:\t4c 89 e0             \tmov    %r12,%rax\n    20a4:\t48 89 c7             \tmov    %rax,%rdi\n    20a7:\te8 00 00 00 00       \tcallq  20ac <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x39e>\n    20ac:\t49 89 c4             \tmov    %rax,%r12\n    20af:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    20b3:\t48 89 c7             \tmov    %rax,%rdi\n    20b6:\te8 00 00 00 00       \tcallq  20bb <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x3ad>\n    20bb:\teb 03                \tjmp    20c0 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x3b2>\n    20bd:\t49 89 c4             \tmov    %rax,%r12\n    20c0:\t48 8d 45 e7          \tlea    -0x19(%rbp),%rax\n    20c4:\t48 89 c7             \tmov    %rax,%rdi\n    20c7:\te8 00 00 00 00       \tcallq  20cc <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x3be>\n    20cc:\t48 89 df             \tmov    %rbx,%rdi\n    20cf:\te8 00 00 00 00       \tcallq  20d4 <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x3c6>\n    20d4:\t4c 89 e0             \tmov    %r12,%rax\n    20d7:\t48 89 c7             \tmov    %rax,%rdi\n    20da:\te8 00 00 00 00       \tcallq  20df <_ZNK8xmlrpc_c9paramList5getI8Ejxx+0x3d1>\n    20df:\t48 81 c4 f0 00 00 00 \tadd    $0xf0,%rsp\n    20e6:\t5b                   \tpop    %rbx\n    20e7:\t41 5c                \tpop    %r12\n    20e9:\t5d                   \tpop    %rbp\n    20ea:\tc3                   \tretq   \n    20eb:\t90                   \tnop", "code_s": "__int64 __fastcall xmlrpc_c paramList getI8(xmlrpc_c paramList *this,\n                                            unsigned int a2, __int64 a3,\n                                            __int64 a4) {\n  void *v4;\n  xmlrpc_c value *v5;\n  void *v6;\n  const xmlrpc_c value *v7;\n  void *v8;\n  void *v9;\n  char v13[Number];\n  char v14;\n  char v15[Number];\n  char v16;\n  char <span class=\"supfact\">v17</span>[Number];\n  char <span class=\"supfact\">v18</span>[Number];\n  char v19[Number];\n  char v20;\n  char v21[Number];\n  char v22;\n  __int64 v23;\n  if (a2 >= (unsigned __int64)std vector<xmlrpc_c value> size(this)) {\n    v4 = _cxa_allocate_exception(Number);\n    std allocator<char> allocator(&v14);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(v13, String, &v14);\n    xmlrpc_c fault fault(v4, v13, Number L);\n    std __cxx11 basic_string<char, std char_traits<char>,\n                             std allocator<char>> ~basic_string(v13);\n    std allocator<char> ~allocator(&v14); _cxa_throw ( v4 , ( struct type_info * ) & ` typeinfo for ' xmlrpc_c fault , xmlrpc_c fault ~ fault ) ; } v5 = ( xmlrpc_c value * ) std vector < xmlrpc_c value > operator [ ] ( this , a2 ) ; if ( ( unsigned int ) xmlrpc_c value type ( v5 ) != Number ) { v6 = _cxa_allocate_exception ( Number ) ; std allocator < char > allocator ( & v16 ) ; std __cxx11 basic_string < char , std char_traits < char > , std allocator < char >> basic_string ( v15 , String , & v16 ) ; xmlrpc_c fault fault ( v6 , v15 , Number L ) ; std __cxx11 basic_string < char , std char_traits < char > , std allocator < char >> ~ basic_string ( v15 ) ; std allocator < char > ~ allocator ( & v16 ) ; _cxa_throw ( v6 , ( struct type_info * ) & ` typeinfo for ' xmlrpc_c fault , xmlrpc_c fault ~ fault ) ;\n  }\n  v7 = (const xmlrpc_c value *)std vector<xmlrpc_c value> operator[](this, a2);\n  xmlrpc_c value value((xmlrpc_c value *)<span class=\"supfact\">v18</span>, v7);\n  xmlrpc_c value_i8 value_i8(<span class=\"supfact\">v17</span>, <span class=\"supfact\">v18</span>);\n  v23 = xmlrpc_c value_i8 operator long long(<span class=\"supfact\">v17</span>);\n  xmlrpc_c value_i8 ~value_i8((xmlrpc_c value_i8 *)<span class=\"supfact\">v17</span>);\n  xmlrpc_c value ~value((xmlrpc_c value *)<span class=\"supfact\">v18</span>);\n  if (v23 < a3) {\n    v8 = _cxa_allocate_exception(Number);\n    std allocator<char> allocator(&v20);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(v19, String, &v20);\n    xmlrpc_c fault fault(v8, v19, Number L);\n    std __cxx11 basic_string<char, std char_traits<char>,\n                             std allocator<char>> ~basic_string(v19);\n    std allocator<char> ~allocator(&v20); _cxa_throw ( v8 , ( struct type_info * ) & ` typeinfo for ' xmlrpc_c fault , xmlrpc_c fault ~ fault ) ; } if ( v23 > a4 ) { v9 = _cxa_allocate_exception ( Number ) ; std allocator < char > allocator ( & v22 ) ; std __cxx11 basic_string < char , std char_traits < char > , std allocator < char >> basic_string ( v21 , String , & v22 ) ; xmlrpc_c fault fault ( v9 , v21 , Number L ) ; std __cxx11 basic_string < char , std char_traits < char > , std allocator < char >> ~ basic_string ( v21 ) ; std allocator < char > ~ allocator ( & v22 ) ; _cxa_throw ( v9 , ( struct type_info * ) & ` typeinfo for ' xmlrpc_c fault , xmlrpc_c fault ~ fault ) ;\n  }\n  return v23;\n}", "code_t": "xmlrpc_int64 __cdecl xmlrpc_c paramList\ngetI8(const xmlrpc_c paramList *const this, const unsigned int paramNumber,\n      const __int64 minimum, const __int64 maximum) {\n  void *v4;\n  xmlrpc_c value *v5;\n  void *v6;\n  const xmlrpc_c value *v7;\n  void *v8;\n  void *v9;\n  char v13[Number];\n  char v14;\n  char v15[Number];\n  char v16;\n  xmlrpc_c value_i8 <span class=\"supfact\">v17</span>;\n  xmlrpc_c value <span class=\"supfact\">v18</span>;\n  char v19[Number];\n  char v20;\n  char v21[Number];\n  char v22;\n  __int64 longlongvalue;\n  if (paramNumber >= std vector<xmlrpc_c value> size(&this->paramVector)) {\n    v4 = _cxa_allocate_exception(Number);\n    std allocator<char> allocator(&v14);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(v13, String, &v14);\n    xmlrpc_c fault fault(v4, v13, Number L);\n    std __cxx11 basic_string<char, std char_traits<char>,\n                             std allocator<char>> ~basic_string(v13);\n    std allocator<char> ~allocator(&v14); _cxa_throw ( v4 , ( struct type_info * ) & ` typeinfo for ' xmlrpc_c fault , ( void ( __fastcall * ) ( void * ) ) xmlrpc_c fault ~ fault ) ; } v5 = ( xmlrpc_c value * ) std vector < xmlrpc_c value > operator [ ] ( & this -> paramVector , paramNumber ) ; if ( ( unsigned int ) xmlrpc_c value type ( v5 ) != Number ) { v6 = _cxa_allocate_exception ( Number ) ; std allocator < char > allocator ( & v16 ) ; std __cxx11 basic_string < char , std char_traits < char > , std allocator < char >> basic_string ( v15 , String , & v16 ) ; xmlrpc_c fault fault ( v6 , v15 , Number L ) ; std __cxx11 basic_string < char , std char_traits < char > , std allocator < char >> ~ basic_string ( v15 ) ; std allocator < char > ~ allocator ( & v16 ) ; _cxa_throw ( v6 , ( struct type_info * ) & ` typeinfo for ' xmlrpc_c fault , ( void ( __fastcall * ) ( void * ) ) xmlrpc_c fault ~ fault ) ;\n  }\n  v7 = std vector<xmlrpc_c value> operator[](&this->paramVector, paramNumber);\n  xmlrpc_c value value(&<span class=\"supfact\">v18</span>, v7);\n  xmlrpc_c value_i8 value_i8(&<span class=\"supfact\">v17</span>,\n                             (xmlrpc_c value)&<span class=\"supfact\">v18</span>);\n  longlongvalue = xmlrpc_c value_i8 operator long long(&<span class=\"supfact\">v17</span>);\n  xmlrpc_c value_i8 ~value_i8(&<span class=\"supfact\">v17</span>);\n  xmlrpc_c value ~value(&<span class=\"supfact\">v18</span>);\n  if (longlongvalue < minimum) {\n    v8 = _cxa_allocate_exception(Number);\n    std allocator<char> allocator(&v20);\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(v19, String, &v20);\n    xmlrpc_c fault fault(v8, v19, Number L);\n    std __cxx11 basic_string<char, std char_traits<char>,\n                             std allocator<char>> ~basic_string(v19);\n    std allocator<char> ~allocator(&v20); _cxa_throw ( v8 , ( struct type_info * ) & ` typeinfo for ' xmlrpc_c fault , ( void ( __fastcall * ) ( void * ) ) xmlrpc_c fault ~ fault ) ; } if ( longlongvalue > maximum ) { v9 = _cxa_allocate_exception ( Number ) ; std allocator < char > allocator ( & v22 ) ; std __cxx11 basic_string < char , std char_traits < char > , std allocator < char >> basic_string ( v21 , String , & v22 ) ; xmlrpc_c fault fault ( v9 , v21 , Number L ) ; std __cxx11 basic_string < char , std char_traits < char > , std allocator < char >> ~ basic_string ( v21 ) ; std allocator < char > ~ allocator ( & v22 ) ; _cxa_throw ( v9 , ( struct type_info * ) & ` typeinfo for ' xmlrpc_c fault , ( void ( __fastcall * ) ( void * ) ) xmlrpc_c fault ~ fault ) ;\n  }\n  return longlongvalue;\n}", "var": [{"name": "v17", "type": "char[8]", "pred_name": "v17", "ref_name": "v17", "ref_type": "struct xmlrpc_c::value_i8 { xmlrpc_c::value baseclass_0; }"}, {"name": "v18", "type": "char[8]", "pred_name": "v18", "ref_name": "v18", "ref_type": "struct xmlrpc_c::value { xmlrpc_value * cValueP; }"}], "body_in_train": false}, {"repo_owner": "darrensessions", "repo_name": "rtn56u", "path": "darrensessions/rtn56u/7f89053b04f28945c02c3401a4ecd4a5d90f8f361044543c2c5b7c1e35e65095", "path_in_repo": "darrensessions/rtn56u/user/bridge-utils/libbridge/libbridge_if.o", "objdump": "0000000000000216 <br_del_interface>:\n 216:\t55                   \tpush   %rbp\n 217:\t48 89 e5             \tmov    %rsp,%rbp\n 21a:\t48 83 ec 60          \tsub    $0x60,%rsp\n 21e:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n 222:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n 226:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n 22a:\t48 89 c7             \tmov    %rax,%rdi\n 22d:\te8 00 00 00 00       \tcallq  232 <br_del_interface+0x1c>\n 232:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 235:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n 239:\t75 0a                \tjne    245 <br_del_interface+0x2f>\n 23b:\tb8 13 00 00 00       \tmov    $0x13,%eax\n 240:\te9 9d 00 00 00       \tjmpq   2e2 <br_del_interface+0xcc>\n 245:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n 249:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n 24d:\tba 10 00 00 00       \tmov    $0x10,%edx\n 252:\t48 89 ce             \tmov    %rcx,%rsi\n 255:\t48 89 c7             \tmov    %rax,%rdi\n 258:\te8 00 00 00 00       \tcallq  25d <br_del_interface+0x47>\n 25d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 260:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n 263:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 269 <br_del_interface+0x53>\n 269:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n 26d:\tbe a3 89 00 00       \tmov    $0x89a3,%esi\n 272:\t89 c7                \tmov    %eax,%edi\n 274:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 279:\te8 00 00 00 00       \tcallq  27e <br_del_interface+0x68>\n 27e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 281:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 285:\t79 47                \tjns    2ce <br_del_interface+0xb8>\n 287:\t48 c7 45 b0 05 00 00 \tmovq   $0x5,-0x50(%rbp)\n 28e:\t00 \n 28f:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 292:\t48 98                \tcltq   \n 294:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n 298:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n 29f:\t00 \n 2a0:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n 2a7:\t00 \n 2a8:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n 2ac:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 2b0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2b6 <br_del_interface+0xa0>\n 2b6:\t48 8d 55 d0          \tlea    -0x30(%rbp),%rdx\n 2ba:\tbe f0 89 00 00       \tmov    $0x89f0,%esi\n 2bf:\t89 c7                \tmov    %eax,%edi\n 2c1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2c6:\te8 00 00 00 00       \tcallq  2cb <br_del_interface+0xb5>\n 2cb:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 2ce:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 2d2:\t79 09                \tjns    2dd <br_del_interface+0xc7>\n 2d4:\te8 00 00 00 00       \tcallq  2d9 <br_del_interface+0xc3>\n 2d9:\t8b 00                \tmov    (%rax),%eax\n 2db:\teb 05                \tjmp    2e2 <br_del_interface+0xcc>\n 2dd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2e2:\tc9                   \tleaveq \n 2e3:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall br_del_interface(const char *a1, const char *a2) {\n  __int64 result;\n  __int64 v3[Number];\n  char <span class=\"supfact\">dest</span>[Number];\n  __int64 *v5;\n  unsigned int v6;\n  int v7;\n  v6 = if_nametoindex(a2);\n  if (!v6)\n    return Number L;\n  strncpy(<span class=\"supfact\">dest</span>, a1, Number);\n  LODWORD(v5) = v6;\n  v7 = ioctl(br_socket_fd, Number, <span class=\"supfact\">dest</span>);\n  if (v7 < Number) {\n    v3[Number] = Number L;\n    v3[Number] = (int)v6;\n    v3[Number] = Number L;\n    v3[Number] = Number L;\n    v5 = v3;\n    v7 = ioctl(br_socket_fd, Number, <span class=\"supfact\">dest</span>);\n  }\n  if (v7 >= Number)\n    result = Number L;\n  else\n    result = (unsigned int)*_errno_location();\n  return result;\n}", "code_t": "int __cdecl br_del_interface(const char *bridge, const char *dev) {\n  int result;\n  unsigned __int64 args[Number];\n  ifreq <span class=\"supfact\">ifr</span>;\n  int ifindex;\n  int err;\n  ifindex = if_nametoindex(dev);\n  if (!ifindex)\n    return Number;\n  strncpy(<span class=\"supfact\">ifr</span>.ifr_ifrn.ifrn_name, bridge, Number);\n  <span class=\"supfact\">ifr</span>.ifr_ifru.ifru_ivalue = ifindex;\n  err = ioctl(br_socket_fd, Number, &<span class=\"supfact\">ifr</span>);\n  if (err < Number) {\n    args[Number] = Number L;\n    args[Number] = ifindex;\n    args[Number] = Number L;\n    args[Number] = Number L;\n    <span class=\"supfact\">ifr</span>.ifr_ifru.ifru_map.mem_start = (unsigned __int64)args;\n    err = ioctl(br_socket_fd, Number, &<span class=\"supfact\">ifr</span>);\n  }\n  if (err >= Number)\n    result = Number;\n  else\n    result = *_errno_location();\n  return result;\n}", "var": [{"name": "dest", "type": "struct ifreq { $EC3FB77B1F5CBB3C6B6AB4B4CE5B261D ifr_ifrn; $3766CEB1D20AE6FB37CD7F05C4AF9C4E ifr_ifru; }", "pred_name": "ifr", "ref_name": "ifr", "ref_type": "struct ifreq { $EC3FB77B1F5CBB3C6B6AB4B4CE5B261D ifr_ifrn; $3766CEB1D20AE6FB37CD7F05C4AF9C4E ifr_ifru; }"}], "body_in_train": false}, {"repo_owner": "josn-jys", "repo_name": "NEM-Code_Opensource-EMUI5.0", "path": "josn-jys/NEM-Code_Opensource-EMUI5.0/ea4de80d6e2fe235af11e6fa452c0a57bc88d0d58c079316fd6fecd73ff0c3c9", "path_in_repo": "josn-jys/NEM-Code_Opensource-EMUI5.0/kernel/tools/testing/selftests/timers/alarmtimer-suspend", "objdump": "0000000000401396 <main>:\n  401396:\t55                   \tpush   %rbp\n  401397:\t48 89 e5             \tmov    %rsp,%rbp\n  40139a:\t41 54                \tpush   %r12\n  40139c:\t53                   \tpush   %rbx\n  40139d:\t48 81 ec 30 01 00 00 \tsub    $0x130,%rsp\n  4013a4:\te8 37 fd ff ff       \tcallq  4010e0 <__libc_current_sigrtmax@plt>\n  4013a9:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  4013ac:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n  4013b3:\t48 83 c0 08          \tadd    $0x8,%rax\n  4013b7:\t48 89 c7             \tmov    %rax,%rdi\n  4013ba:\te8 c1 fc ff ff       \tcallq  401080 <sigfillset@plt>\n  4013bf:\tc7 85 48 ff ff ff 00 \tmovl   $0x0,-0xb8(%rbp)\n  4013c6:\t00 00 00 \n  4013c9:\t48 c7 85 c0 fe ff ff \tmovq   $0x4012c8,-0x140(%rbp)\n  4013d0:\tc8 12 40 00 \n  4013d4:\t48 8d 8d c0 fe ff ff \tlea    -0x140(%rbp),%rcx\n  4013db:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  4013de:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4013e3:\t48 89 ce             \tmov    %rcx,%rsi\n  4013e6:\t89 c7                \tmov    %eax,%edi\n  4013e8:\te8 53 fc ff ff       \tcallq  401040 <sigaction@plt>\n  4013ed:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n  4013f4:\tba 40 00 00 00       \tmov    $0x40,%edx\n  4013f9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4013fe:\t48 89 c7             \tmov    %rax,%rdi\n  401401:\te8 6a fc ff ff       \tcallq  401070 <memset@plt>\n  401406:\tc7 85 6c ff ff ff 00 \tmovl   $0x0,-0x94(%rbp)\n  40140d:\t00 00 00 \n  401410:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  401413:\t89 85 68 ff ff ff    \tmov    %eax,-0x98(%rbp)\n  401419:\tc7 85 60 ff ff ff 00 \tmovl   $0x0,-0xa0(%rbp)\n  401420:\t00 00 00 \n  401423:\tc7 05 a3 2c 00 00 08 \tmovl   $0x8,0x2ca3(%rip)        # 4040d0 <alarm_clock_id>\n  40142a:\t00 00 00 \n  40142d:\te9 32 01 00 00       \tjmpq   401564 <main+0x1ce>\n  401432:\tc7 05 b4 2c 00 00 00 \tmovl   $0x0,0x2cb4(%rip)        # 4040f0 <alarmcount>\n  401439:\t00 00 00 \n  40143c:\t8b 05 8e 2c 00 00    \tmov    0x2c8e(%rip),%eax        # 4040d0 <alarm_clock_id>\n  401442:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  401446:\t48 8d 8d 60 ff ff ff \tlea    -0xa0(%rbp),%rcx\n  40144d:\t48 89 ce             \tmov    %rcx,%rsi\n  401450:\t89 c7                \tmov    %eax,%edi\n  401452:\te8 59 fc ff ff       \tcallq  4010b0 <timer_create@plt>\n  401457:\t8b 05 73 2c 00 00    \tmov    0x2c73(%rip),%eax        # 4040d0 <alarm_clock_id>\n  40145d:\tbe e0 40 40 00       \tmov    $0x4040e0,%esi\n  401462:\t89 c7                \tmov    %eax,%edi\n  401464:\te8 27 fc ff ff       \tcallq  401090 <clock_gettime@plt>\n  401469:\t4c 8b 25 78 2c 00 00 \tmov    0x2c78(%rip),%r12        # 4040e8 <start_time+0x8>\n  401470:\t48 8b 1d 69 2c 00 00 \tmov    0x2c69(%rip),%rbx        # 4040e0 <start_time>\n  401477:\t8b 05 53 2c 00 00    \tmov    0x2c53(%rip),%eax        # 4040d0 <alarm_clock_id>\n  40147d:\t89 c7                \tmov    %eax,%edi\n  40147f:\te8 7a fd ff ff       \tcallq  4011fe <clockstring>\n  401484:\t4c 89 e1             \tmov    %r12,%rcx\n  401487:\t48 89 da             \tmov    %rbx,%rdx\n  40148a:\t48 89 c6             \tmov    %rax,%rsi\n  40148d:\tbf 81 21 40 00       \tmov    $0x402181,%edi\n  401492:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401497:\te8 c4 fb ff ff       \tcallq  401060 <printf@plt>\n  40149c:\tbe 0f 00 00 00       \tmov    $0xf,%esi\n  4014a1:\tbf a0 21 40 00       \tmov    $0x4021a0,%edi\n  4014a6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4014ab:\te8 b0 fb ff ff       \tcallq  401060 <printf@plt>\n  4014b0:\t48 8b 05 29 2c 00 00 \tmov    0x2c29(%rip),%rax        # 4040e0 <start_time>\n  4014b7:\t48 8b 15 2a 2c 00 00 \tmov    0x2c2a(%rip),%rdx        # 4040e8 <start_time+0x8>\n  4014be:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4014c2:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  4014c6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  4014ca:\t48 83 c0 0f          \tadd    $0xf,%rax\n  4014ce:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  4014d2:\t48 c7 45 c0 0f 00 00 \tmovq   $0xf,-0x40(%rbp)\n  4014d9:\t00 \n  4014da:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n  4014e1:\t00 \n  4014e2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4014e6:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n  4014ea:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  4014ee:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4014f3:\t48 89 c7             \tmov    %rax,%rdi\n  4014f6:\te8 a5 fb ff ff       \tcallq  4010a0 <timer_settime@plt>\n  4014fb:\teb 0a                \tjmp    401507 <main+0x171>\n  4014fd:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401502:\te8 e9 fb ff ff       \tcallq  4010f0 <sleep@plt>\n  401507:\t8b 05 e3 2b 00 00    \tmov    0x2be3(%rip),%eax        # 4040f0 <alarmcount>\n  40150d:\t83 f8 04             \tcmp    $0x4,%eax\n  401510:\t7e eb                \tjle    4014fd <main+0x167>\n  401512:\tbf c4 21 40 00       \tmov    $0x4021c4,%edi\n  401517:\te8 14 fb ff ff       \tcallq  401030 <puts@plt>\n  40151c:\teb 1d                \tjmp    40153b <main+0x1a5>\n  40151e:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401523:\te8 c8 fb ff ff       \tcallq  4010f0 <sleep@plt>\n  401528:\tbf db 21 40 00       \tmov    $0x4021db,%edi\n  40152d:\te8 1e fb ff ff       \tcallq  401050 <system@plt>\n  401532:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  401535:\t83 7d e8 00          \tcmpl   $0x0,-0x18(%rbp)\n  401539:\t75 0d                \tjne    401548 <main+0x1b2>\n  40153b:\t8b 05 af 2b 00 00    \tmov    0x2baf(%rip),%eax        # 4040f0 <alarmcount>\n  401541:\t83 f8 09             \tcmp    $0x9,%eax\n  401544:\t7e d8                \tjle    40151e <main+0x188>\n  401546:\teb 01                \tjmp    401549 <main+0x1b3>\n  401548:\t90                   \tnop\n  401549:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40154d:\t48 89 c7             \tmov    %rax,%rdi\n  401550:\te8 7b fb ff ff       \tcallq  4010d0 <timer_delete@plt>\n  401555:\t8b 05 75 2b 00 00    \tmov    0x2b75(%rip),%eax        # 4040d0 <alarm_clock_id>\n  40155b:\t83 c0 01             \tadd    $0x1,%eax\n  40155e:\t89 05 6c 2b 00 00    \tmov    %eax,0x2b6c(%rip)        # 4040d0 <alarm_clock_id>\n  401564:\t8b 05 66 2b 00 00    \tmov    0x2b66(%rip),%eax        # 4040d0 <alarm_clock_id>\n  40156a:\t83 f8 09             \tcmp    $0x9,%eax\n  40156d:\t0f 8e bf fe ff ff    \tjle    401432 <main+0x9c>\n  401573:\t8b 05 27 2b 00 00    \tmov    0x2b27(%rip),%eax        # 4040a0 <final_ret>\n  401579:\t85 c0                \ttest   %eax,%eax\n  40157b:\t74 07                \tje     401584 <main+0x1ee>\n  40157d:\te8 6e fc ff ff       \tcallq  4011f0 <ksft_exit_fail>\n  401582:\teb 05                \tjmp    401589 <main+0x1f3>\n  401584:\te8 59 fc ff ff       \tcallq  4011e2 <ksft_exit_pass>\n  401589:\t48 81 c4 30 01 00 00 \tadd    $0x130,%rsp\n  401590:\t5b                   \tpop    %rbx\n  401591:\t41 5c                \tpop    %r12\n  401593:\t5d                   \tpop    %rbp\n  401594:\tc3                   \tretq   \n  401595:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  40159c:\t00 00 00 \n  40159f:\t90                   \tnop", "code_s": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  __syscall_slong_t v3;\n  __time_t v4;\n  const char *v5;\n  struct sigaction <span class=\"supfact\">v6</span>;\n  struct sigevent <span class=\"supfact\">s</span>;\n  struct itimerspec <span class=\"supfact\">ovalue</span>;\n  struct itimerspec <span class=\"supfact\">value</span>;\n  timer_t timerid;\n  int sig;\n  sig = __libc_current_sigrtmax();\n  sigfillset(&<span class=\"supfact\">v6</span>.sa_mask);\n  <span class=\"supfact\">v6</span>.sa_flags = Number;\n  <span class=\"supfact\">v6</span>.sa_handler = (__sighandler_t)sigalarm;\n  sigaction(sig, &<span class=\"supfact\">v6</span>, Number L);\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.sigev_notify = Number;\n  <span class=\"supfact\">s</span>.sigev_signo = sig;\n  <span class=\"supfact\">s</span>.sigev_value.sival_int = Number;\n  for (alarm_clock_id = Number; alarm_clock_id <= Number; ++alarm_clock_id) {\n    alarmcount = Number;\n    timer_create(alarm_clock_id, &<span class=\"supfact\">s</span>, &timerid);\n    clock_gettime(alarm_clock_id, &start_time);\n    v3 = start_time.tv_nsec;\n    v4 = start_time.tv_sec;\n    v5 = clockstring(alarm_clock_id);\n    printf(String, v5, v4, v3);\n    printf(String, Number L);\n    <span class=\"supfact\">value</span>.it_value.tv_nsec = start_time.tv_nsec;\n    <span class=\"supfact\">value</span>.it_value.tv_sec = start_time.tv_sec + Number;\n    <span class=\"supfact\">value</span>.it_interval.tv_sec = Number L;\n    <span class=\"supfact\">value</span>.it_interval.tv_nsec = Number L;\n    timer_settime(timerid, Number, &<span class=\"supfact\">value</span>,\n                  &<span class=\"supfact\">ovalue</span>);\n    while (alarmcount <= Number)\n      sleep(Number);\n    puts(String);\n    do {\n      if (alarmcount > Number)\n        break;\n      sleep(Number);\n    } while (!system(String));\n    timer_delete(timerid);\n  }\n  if (final_ret)\n    ksft_exit_fail();\n  ksft_exit_pass();\n}", "code_t": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  __syscall_slong_t v3;\n  __time_t v4;\n  char *v5;\n  sigaction <span class=\"supfact\">act</span>;\n  sigevent <span class=\"supfact\">se</span>;\n  itimerspec <span class=\"supfact\">its2</span>;\n  itimerspec <span class=\"supfact\">its1</span>;\n  timer_t tm1;\n  int signum;\n  signum = __libc_current_sigrtmax();\n  sigfillset(&<span class=\"supfact\">act</span>.sa_mask);\n  <span class=\"supfact\">act</span>.sa_flags = Number;\n  <span class=\"supfact\">act</span>.sa_handler = (__sighandler_t)sigalarm;\n  sigaction(signum, &<span class=\"supfact\">act</span>, Number L);\n  memset(&<span class=\"supfact\">se</span>, Number, sizeof(<span class=\"supfact\">se</span>));\n  <span class=\"supfact\">se</span>.sigev_notify = Number;\n  <span class=\"supfact\">se</span>.sigev_signo = signum;\n  <span class=\"supfact\">se</span>.sigev_value.sival_int = Number;\n  for (alarm_clock_id = Number; alarm_clock_id <= Number; ++alarm_clock_id) {\n    alarmcount = Number;\n    timer_create(alarm_clock_id, &<span class=\"supfact\">se</span>, &tm1);\n    clock_gettime(alarm_clock_id, &start_time);\n    v3 = start_time.tv_nsec;\n    v4 = start_time.tv_sec;\n    v5 = clockstring(alarm_clock_id);\n    printf(String, v5, v4, v3);\n    printf(String, Number L);\n    <span class=\"supfact\">its1</span>.it_value.tv_nsec = start_time.tv_nsec;\n    <span class=\"supfact\">its1</span>.it_value.tv_sec = start_time.tv_sec + Number;\n    <span class=\"supfact\">its1</span>.it_interval.tv_sec = Number L;\n    <span class=\"supfact\">its1</span>.it_interval.tv_nsec = Number L;\n    timer_settime(tm1, Number, &<span class=\"supfact\">its1</span>, &<span class=\"supfact\">its2</span>);\n    while (alarmcount <= Number)\n      sleep(Number);\n    puts(String);\n    do {\n      if (alarmcount > Number)\n        break;\n      sleep(Number);\n    } while (!system(String));\n    timer_delete(tm1);\n  }\n  if (final_ret)\n    ksft_exit_fail();\n  ksft_exit_pass();\n}", "var": [{"name": "v6", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "pred_name": "act", "ref_name": "act", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}, {"name": "s", "type": "struct sigevent { __sigval_t sigev_value; int sigev_signo; int sigev_notify; $F04ECE2729E321874BA10B45CE3F6043 _sigev_un; }", "pred_name": "se", "ref_name": "se", "ref_type": "struct sigevent { __sigval_t sigev_value; int sigev_signo; int sigev_notify; $F04ECE2729E321874BA10B45CE3F6043 _sigev_un; }"}, {"name": "ovalue", "type": "struct itimerspec { timespec it_interval; timespec it_value; }", "pred_name": "its2", "ref_name": "its2", "ref_type": "struct itimerspec { timespec it_interval; timespec it_value; }"}, {"name": "value", "type": "struct itimerspec { timespec it_interval; timespec it_value; }", "pred_name": "its1", "ref_name": "its1", "ref_type": "struct itimerspec { timespec it_interval; timespec it_value; }"}], "body_in_train": false}, {"repo_owner": "dtsund", "repo_name": "dtsund-crawl-mod", "path": "dtsund/dtsund-crawl-mod/09edf38ab155b8fd44d57d0b248a4ef0ef50bb52c241e289648eaebb88cd10a0", "path_in_repo": "dtsund/dtsund-crawl-mod/source/describe.o", "objdump": "0000000000000604 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold>:\n     604:\t48 8b 7c 24 30       \tmov    0x30(%rsp),%rdi\n     609:\t48 3b 7c 24 08       \tcmp    0x8(%rsp),%rdi\n     60e:\t74 05                \tje     615 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x11>\n     610:\te8 00 00 00 00       \tcallq  615 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x11>\n     615:\t48 8b 7c 24 50       \tmov    0x50(%rsp),%rdi\n     61a:\t48 3b 7c 24 10       \tcmp    0x10(%rsp),%rdi\n     61f:\t74 05                \tje     626 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x22>\n     621:\te8 00 00 00 00       \tcallq  626 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x22>\n     626:\t48 8b 7c 24 70       \tmov    0x70(%rsp),%rdi\n     62b:\t48 3b 7c 24 18       \tcmp    0x18(%rsp),%rdi\n     630:\t74 05                \tje     637 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x33>\n     632:\te8 00 00 00 00       \tcallq  637 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x33>\n     637:\t48 89 ef             \tmov    %rbp,%rdi\n     63a:\te8 00 00 00 00       \tcallq  63f <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x3b>\n     63f:\t48 8b 7c 24 30       \tmov    0x30(%rsp),%rdi\n     644:\t48 3b 7c 24 08       \tcmp    0x8(%rsp),%rdi\n     649:\t74 05                \tje     650 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x4c>\n     64b:\te8 00 00 00 00       \tcallq  650 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x4c>\n     650:\t48 8b 7c 24 50       \tmov    0x50(%rsp),%rdi\n     655:\t48 3b 7c 24 10       \tcmp    0x10(%rsp),%rdi\n     65a:\t74 05                \tje     661 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x5d>\n     65c:\te8 00 00 00 00       \tcallq  661 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x5d>\n     661:\t48 8b 7c 24 70       \tmov    0x70(%rsp),%rdi\n     666:\t48 3b 7c 24 18       \tcmp    0x18(%rsp),%rdi\n     66b:\t74 05                \tje     672 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x6e>\n     66d:\te8 00 00 00 00       \tcallq  672 <_ZN13alt_desc_proc10get_stringERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold+0x6e>\n     672:\t48 89 ef             \tmov    %rbp,%rdi\n     675:\te8 00 00 00 00       \tcallq  67a <_Z11print_quoteRK13describe_info.cold>", "code_s": "void __fastcall __noreturn alt_desc_proc\nget_string(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5,\n           __int64 a6, void *a7, void *a8, void *a9, __int64 a10, __int64 a11,\n           void *a12, __int64 a13, __int64 a14, __int64 a15, void *a16,\n           __int64 a17, __int64 a18, __int64 a19, void *a20) {\n  struct _Unwind_Exception *<span class=\"supfact\">v20</span>;\n  if (a12 != a7)\n    operator delete(a12);\n  if (a16 != a8)\n    operator delete(a16);\n  if (a20 != a9)\n    operator delete(a20);\n  Unwind_Resume(<span class=\"supfact\">v20</span>);\n}", "code_t": "void __fastcall __noreturn alt_desc_proc\nget_string(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5,\n           __int64 a6, void *a7, void *a8, void *a9, __int64 a10, __int64 a11,\n           void *a12, __int64 a13, __int64 a14, __int64 a15, void *a16,\n           __int64 a17, __int64 a18, __int64 a19, void *a20) {\n  struct _Unwind_Exception *<span class=\"supfact\">v20</span>;\n  if (a12 != a7)\n    operator delete(a12);\n  if (a16 != a8)\n    operator delete(a16);\n  if (a20 != a9)\n    operator delete(a20);\n  Unwind_Resume(<span class=\"supfact\">v20</span>);\n}", "var": [{"name": "v20", "type": "struct _Unwind_Exception *", "pred_name": "v20", "ref_name": "v20", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "franziskuskiefer", "repo_name": "nss-benchmark", "path": "franziskuskiefer/nss-benchmark/0cd9bc721c370efa169a79962c2449acc48f375d6d576e87190b3ee5a1a4a906", "path_in_repo": "franziskuskiefer/nss-benchmark/supercop-20171218/ntl-10.5.0/src/GF2EX.o", "objdump": "0000000000004040 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE>:\n    4040:\t41 57                \tpush   %r15\n    4042:\t41 56                \tpush   %r14\n    4044:\t41 55                \tpush   %r13\n    4046:\t41 54                \tpush   %r12\n    4048:\t55                   \tpush   %rbp\n    4049:\t48 89 fd             \tmov    %rdi,%rbp\n    404c:\t53                   \tpush   %rbx\n    404d:\t48 83 ec 18          \tsub    $0x18,%rsp\n    4051:\t48 8b 06             \tmov    (%rsi),%rax\n    4054:\t48 85 c0             \ttest   %rax,%rax\n    4057:\t74 07                \tje     4060 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x20>\n    4059:\t48 83 78 e0 00       \tcmpq   $0x0,-0x20(%rax)\n    405e:\t75 50                \tjne    40b0 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x70>\n    4060:\t48 8b 45 00          \tmov    0x0(%rbp),%rax\n    4064:\t48 85 c0             \ttest   %rax,%rax\n    4067:\t74 07                \tje     4070 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x30>\n    4069:\t48 83 78 f8 00       \tcmpq   $0x0,-0x8(%rax)\n    406e:\t74 20                \tje     4090 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x50>\n    4070:\t48 89 ef             \tmov    %rbp,%rdi\n    4073:\t31 f6                \txor    %esi,%esi\n    4075:\te8 00 00 00 00       \tcallq  407a <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x3a>\n    407a:\t48 83 c4 18          \tadd    $0x18,%rsp\n    407e:\t5b                   \tpop    %rbx\n    407f:\t5d                   \tpop    %rbp\n    4080:\t41 5c                \tpop    %r12\n    4082:\t41 5d                \tpop    %r13\n    4084:\t41 5e                \tpop    %r14\n    4086:\t41 5f                \tpop    %r15\n    4088:\tc3                   \tretq   \n    4089:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n    4090:\t48 83 78 f0 00       \tcmpq   $0x0,-0x10(%rax)\n    4095:\t78 d9                \tjs     4070 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x30>\n    4097:\t48 c7 40 e0 00 00 00 \tmovq   $0x0,-0x20(%rax)\n    409e:\t00 \n    409f:\t48 83 c4 18          \tadd    $0x18,%rsp\n    40a3:\t5b                   \tpop    %rbx\n    40a4:\t5d                   \tpop    %rbp\n    40a5:\t41 5c                \tpop    %r12\n    40a7:\t41 5d                \tpop    %r13\n    40a9:\t41 5e                \tpop    %r14\n    40ab:\t41 5f                \tpop    %r15\n    40ad:\tc3                   \tretq   \n    40ae:\t66 90                \txchg   %ax,%ax\n    40b0:\t48 89 d7             \tmov    %rdx,%rdi\n    40b3:\t49 89 f5             \tmov    %rsi,%r13\n    40b6:\t49 89 d4             \tmov    %rdx,%r12\n    40b9:\te8 00 00 00 00       \tcallq  40be <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x7e>\n    40be:\t48 89 c3             \tmov    %rax,%rbx\n    40c1:\t48 85 c0             \ttest   %rax,%rax\n    40c4:\t75 9a                \tjne    4060 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x20>\n    40c6:\t4c 89 e6             \tmov    %r12,%rsi\n    40c9:\t48 89 e7             \tmov    %rsp,%rdi\n    40cc:\t48 c7 04 24 00 00 00 \tmovq   $0x0,(%rsp)\n    40d3:\t00 \n    40d4:\t4c 8d 7c 24 08       \tlea    0x8(%rsp),%r15\n    40d9:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n    40e0:\t00 00 \n    40e2:\te8 00 00 00 00       \tcallq  40e7 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0xa7>\n    40e7:\t49 8b 45 00          \tmov    0x0(%r13),%rax\n    40eb:\t4c 8b 65 00          \tmov    0x0(%rbp),%r12\n    40ef:\t48 85 c0             \ttest   %rax,%rax\n    40f2:\t0f 84 a8 00 00 00    \tje     41a0 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x160>\n    40f8:\t4c 8b 70 e0          \tmov    -0x20(%rax),%r14\n    40fc:\t4d 85 e4             \ttest   %r12,%r12\n    40ff:\t74 11                \tje     4112 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0xd2>\n    4101:\t49 83 7c 24 f8 00    \tcmpq   $0x0,-0x8(%r12)\n    4107:\t75 09                \tjne    4112 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0xd2>\n    4109:\t4d 85 f6             \ttest   %r14,%r14\n    410c:\t0f 89 b9 00 00 00    \tjns    41cb <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x18b>\n    4112:\t4c 89 f6             \tmov    %r14,%rsi\n    4115:\t48 89 ef             \tmov    %rbp,%rdi\n    4118:\t4c 8d 7c 24 08       \tlea    0x8(%rsp),%r15\n    411d:\te8 00 00 00 00       \tcallq  4122 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0xe2>\n    4122:\t4c 8b 65 00          \tmov    0x0(%rbp),%r12\n    4126:\t49 8b 45 00          \tmov    0x0(%r13),%rax\n    412a:\t4d 85 f6             \ttest   %r14,%r14\n    412d:\t0f 8e bc 00 00 00    \tjle    41ef <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x1af>\n    4133:\t49 89 c5             \tmov    %rax,%r13\n    4136:\t4c 8d 7c 24 08       \tlea    0x8(%rsp),%r15\n    413b:\t0f 1f 44 00 00       \tnopl   0x0(%rax,%rax,1)\n    4140:\t48 89 e2             \tmov    %rsp,%rdx\n    4143:\t4c 89 ee             \tmov    %r13,%rsi\n    4146:\t4c 89 ff             \tmov    %r15,%rdi\n    4149:\te8 00 00 00 00       \tcallq  414e <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x10e>\n    414e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 4155 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x115>\n    4155:\t4c 89 fe             \tmov    %r15,%rsi\n    4158:\t4c 89 e7             \tmov    %r12,%rdi\n    415b:\te8 00 00 00 00       \tcallq  4160 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x120>\n    4160:\t48 ff c3             \tinc    %rbx\n    4163:\t49 83 c5 08          \tadd    $0x8,%r13\n    4167:\t49 83 c4 08          \tadd    $0x8,%r12\n    416b:\t4c 39 f3             \tcmp    %r14,%rbx\n    416e:\t75 d0                \tjne    4140 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x100>\n    4170:\t48 89 ef             \tmov    %rbp,%rdi\n    4173:\te8 00 00 00 00       \tcallq  4178 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x138>\n    4178:\t4c 89 ff             \tmov    %r15,%rdi\n    417b:\te8 00 00 00 00       \tcallq  4180 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x140>\n    4180:\t48 89 e7             \tmov    %rsp,%rdi\n    4183:\te8 00 00 00 00       \tcallq  4188 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x148>\n    4188:\t48 83 c4 18          \tadd    $0x18,%rsp\n    418c:\t5b                   \tpop    %rbx\n    418d:\t5d                   \tpop    %rbp\n    418e:\t41 5c                \tpop    %r12\n    4190:\t41 5d                \tpop    %r13\n    4192:\t41 5e                \tpop    %r14\n    4194:\t41 5f                \tpop    %r15\n    4196:\tc3                   \tretq   \n    4197:\t66 0f 1f 84 00 00 00 \tnopw   0x0(%rax,%rax,1)\n    419e:\t00 00 \n    41a0:\t4d 85 e4             \ttest   %r12,%r12\n    41a3:\t74 3b                \tje     41e0 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x1a0>\n    41a5:\t4d 8b 74 24 f8       \tmov    -0x8(%r12),%r14\n    41aa:\t4d 85 f6             \ttest   %r14,%r14\n    41ad:\t75 31                \tjne    41e0 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x1a0>\n    41af:\t49 83 7c 24 f0 00    \tcmpq   $0x0,-0x10(%r12)\n    41b5:\t0f 88 57 ff ff ff    \tjs     4112 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0xd2>\n    41bb:\t49 c7 44 24 e0 00 00 \tmovq   $0x0,-0x20(%r12)\n    41c2:\t00 00 \n    41c4:\t4c 8d 7c 24 08       \tlea    0x8(%rsp),%r15\n    41c9:\teb a5                \tjmp    4170 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x130>\n    41cb:\t4d 3b 74 24 f0       \tcmp    -0x10(%r12),%r14\n    41d0:\t0f 8f 3c ff ff ff    \tjg     4112 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0xd2>\n    41d6:\t4d 89 74 24 e0       \tmov    %r14,-0x20(%r12)\n    41db:\te9 4a ff ff ff       \tjmpq   412a <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0xea>\n    41e0:\t31 f6                \txor    %esi,%esi\n    41e2:\t48 89 ef             \tmov    %rbp,%rdi\n    41e5:\t4c 8d 7c 24 08       \tlea    0x8(%rsp),%r15\n    41ea:\te8 00 00 00 00       \tcallq  41ef <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x1af>\n    41ef:\t4c 8d 7c 24 08       \tlea    0x8(%rsp),%r15\n    41f4:\te9 77 ff ff ff       \tjmpq   4170 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x130>\n    41f9:\t48 89 c5             \tmov    %rax,%rbp\n    41fc:\te9 00 00 00 00       \tjmpq   4201 <_ZN3NTL3mulERNS_5GF2EXERKS0_RKNS_4GF2EE+0x1c1>\n    4201:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n    4208:\t00 00 00 00 \n    420c:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "void __fastcall NTL mul(NTL *this, NTL GF2EX *a2, const NTL GF2EX *a3,\n                        const NTL GF2E *a4) {\n  __int64 v4;\n  __int64 v7;\n  const NTL GF2EX *v8;\n  const NTL GF2X *v9;\n  NTL GF2X *v10;\n  __int64 v11;\n  __int64 v12;\n  NTL GF2X *v13;\n  __int64 <span class=\"supfact\">v14</span>;\n  __int64 <span class=\"supfact\">v15</span>[Number];\n  if (*(_QWORD *)a2) {\n    if (*(_QWORD *)(*(_QWORD *)a2 - Number L)) {\n      v7 = NTL IsZero(a3, a2);\n      if (!v7) {\n        v8 = a3;\n        <span class=\"supfact\">v14</span> = Number L;\n        <span class=\"supfact\">v15</span>[Number] = Number L;\n        NTL WordVector operator=(&<span class=\"supfact\">v14</span>, a3);\n        v10 = *(NTL GF2X **)a2;\n        v11 = *(_QWORD *)this;\n        if (*(_QWORD *)a2) {\n          v12 = *((_QWORD *)v10 - Number);\n          if (v11 && !*(_QWORD *)(v11 - Number) && v12 >= Number &&\n              v12 <= *(_QWORD *)(v11 - Number)) {\n            *(_QWORD *)(v11 - Number) = v12;\n          LABEL_14:\n            if (v12 > Number) {\n              v13 = v10;\n              do {\n                NTL mul((NTL *)<span class=\"supfact\">v15</span>, v13,\n                        (const NTL GF2X *)&<span class=\"supfact\">v14</span>, v9);\n                v8 = (const NTL GF2EX *)<span class=\"supfact\">v15</span>;\n                NTL rem(v11, <span class=\"supfact\">v15</span>, NTL GF2EInfo);\n                ++v7;\n                v13 = (NTL GF2X *)((char *)v13 + Number);\n                v11 += Number L;\n              } while (v7 != v12);\n            }\n            goto LABEL_17;\n          }\n        LABEL_13:\n          v8 = (const NTL GF2EX *)v12;\n          NTL Vec<NTL GF2E> DoSetLength(this, v12);\n          v11 = *(_QWORD *)this;\n          v10 = *(NTL GF2X **)a2;\n          goto LABEL_14;\n        }\n        if (!v11 || (v12 = *(_QWORD *)(v11 - Number)) != Number) {\n          v8 = Number L;\n          NTL Vec<NTL GF2E> DoSetLength(this, Number L);\n        } else {\n          if (*(__int64 *)(v11 - Number) < Number)\n            goto LABEL_13;\n          *(_QWORD *)(v11 - Number) = Number L;\n        }\n      LABEL_17:\n        NTL GF2EX normalize(this, v8);\n        NTL WordVector ~WordVector((NTL WordVector *)<span class=\"supfact\">v15</span>);\n        NTL WordVector ~WordVector((NTL WordVector *)&<span class=\"supfact\">v14</span>);\n        return;\n      }\n    }\n  }\n  v4 = *(_QWORD *)this;\n  if (!*(_QWORD *)this || *(_QWORD *)(v4 - Number) ||\n      *(__int64 *)(v4 - Number) < Number)\n    NTL Vec<NTL GF2E> DoSetLength(this, Number L);\n  else\n    *(_QWORD *)(v4 - Number) = Number L;\n}", "code_t": "void __fastcall NTL mul(NTL Vec<NTL GF2E> *this, NTL GF2EX *a2,\n                        const NTL GF2EX *a3, const NTL GF2E *a4) {\n  NTL WrappedPtr<NTL GF2E, NTL Vec<NTL GF2E> _vec_deleter> raw_ptr v4;\n  __int64 v6;\n  const NTL GF2X *v7;\n  NTL WrappedPtr<NTL GF2E, NTL Vec<NTL GF2E> _vec_deleter> raw_ptr v8;\n  NTL *v9;\n  __int64 v10;\n  NTL GF2X *v11;\n  const NTL GF2XModulus *v12;\n  NTL WordVector <span class=\"supfact\">v13</span>;\n  NTL WordVector <span class=\"supfact\">v14</span>;\n  if (a2->rep._vec__rep.rep) {\n    if (a2->rep._vec__rep.rep[Number]._GF2E__rep.xrep.rep) {\n      v6 = NTL IsZero((NTL *)a3, (const NTL GF2X *)a2);\n      if (!v6) {\n        <span class=\"supfact\">v13</span>.rep = Number L;\n        <span class=\"supfact\">v14</span>.rep = Number L;\n        NTL WordVector operator=(&<span class=\"supfact\">v13</span>, a3);\n        v8 = a2->rep._vec__rep.rep;\n        v9 = (NTL *)this->_vec__rep.rep;\n        if (a2->rep._vec__rep.rep) {\n          v10 = (__int64)v8[Number]._GF2E__rep.xrep.rep;\n          if (v9 && !*((_QWORD *)v9 - Number) && v10 >= Number &&\n              v10 <= *((_QWORD *)v9 - Number)) {\n            *((_QWORD *)v9 - Number) = v10;\n          LABEL_14:\n            if (v10 > Number) {\n              v11 = &v8->_GF2E__rep;\n              do {\n                NTL mul((NTL *)&<span class=\"supfact\">v14</span>, v11,\n                        (const NTL GF2X *)&<span class=\"supfact\">v13</span>, v7);\n                NTL rem(v9, (NTL GF2X *)&<span class=\"supfact\">v14</span>, NTL GF2EInfo,\n                        v12);\n                ++v6;\n                ++v11;\n                v9 = (NTL *)((char *)v9 + Number);\n              } while (v6 != v10);\n            }\n            goto LABEL_17;\n          }\n        LABEL_13:\n          NTL Vec<NTL GF2E> DoSetLength(this, v10);\n          v9 = (NTL *)this->_vec__rep.rep;\n          v8 = a2->rep._vec__rep.rep;\n          goto LABEL_14;\n        }\n        if (!v9 || (v10 = *((_QWORD *)v9 - Number)) != Number) {\n          NTL Vec<NTL GF2E> DoSetLength(this, Number L);\n        } else {\n          if (*((__int64 *)v9 - Number) < Number)\n            goto LABEL_13;\n          *((_QWORD *)v9 - Number) = Number L;\n        }\n      LABEL_17:\n        NTL GF2EX normalize((NTL GF2EX *const)this);\n        NTL WordVector ~WordVector(&<span class=\"supfact\">v14</span>);\n        NTL WordVector ~WordVector(&<span class=\"supfact\">v13</span>);\n        return;\n      }\n    }\n  }\n  v4 = this->_vec__rep.rep;\n  if (!this->_vec__rep.rep || v4[Number]._GF2E__rep.xrep.rep ||\n      (__int64)v4[Number]._GF2E__rep.xrep.rep < Number)\n    NTL Vec<NTL GF2E> DoSetLength(this, Number L);\n  else\n    v4[Number]._GF2E__rep.xrep.rep = Number L;\n}", "var": [{"name": "v14", "type": "__int64", "pred_name": "v14", "ref_name": "v13", "ref_type": "struct NTL::WordVector { _ntl_ulong * rep; }"}, {"name": "v15", "type": "struct NTL::Vec<NTL::zz_p> { NTL::WrappedPtr<NTL::zz_p,NTL::Vec<NTL::zz_p>::_vec_deleter> _vec__rep; }", "pred_name": "v15", "ref_name": "v14", "ref_type": "struct NTL::WordVector { _ntl_ulong * rep; }"}], "body_in_train": false}, {"repo_owner": "v4o6", "repo_name": "cpsc314", "path": "v4o6/cpsc314/a25c6f651200c99b5d3b2a5b5317b70c75a4cab6d83283e756e97ad31a5762e2", "path_in_repo": "v4o6/cpsc314/template_clean/a3", "objdump": "", "code_s": "__int64 __fastcall std vector<std vector<Object Vertex>> vector(__int64 *a1,\n                                                                _QWORD *a2) {\n  __int64 v2;\n  unsigned __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 result;\n  char <span class=\"supfact\">v9</span>[Number];\n  v2 = std _Vector_base<std vector<Object Vertex>> _M_get_Tp_allocator(a2);\n  __gnu_cxx __alloc_traits<std allocator<std vector<Object Vertex>>,\n                           std vector<Object Vertex>>\n      _S_select_on_copy(<span class=\"supfact\">v9</span>, v2);\n  v3 = std vector<std vector<Object Vertex>> size(a2);\n  std _Vector_base<std vector<Object Vertex>> _Vector_base(a1, v3,\n                                                           <span class=\"supfact\">v9</span>);\n  std allocator<std vector<Object Vertex>> ~allocator(\n      (__int64)<span class=\"supfact\">v9</span>);\n  v4 = std _Vector_base<std vector<Object Vertex>> _M_get_Tp_allocator(a1);\n  v5 = *a1;\n  v6 = std vector<std vector<Object Vertex>> end(a2);\n  v7 = std vector<std vector<Object Vertex>> begin(a2);\n  result = std __uninitialized_copy_a<\n      __gnu_cxx __normal_iterator<std vector<Object Vertex> const *,\n                                  std vector<std vector<Object Vertex>>>,\n      std vector<Object Vertex> *, std vector<Object Vertex>>(v7, v6, v5, v4);\n  a1[Number] = result;\n  return result;\n}", "code_t": "void __cdecl std vector<std vector<Object Vertex>>\nvector(std vector<std vector<Object Vertex>> *const this,\n       const std vector<std vector<Object Vertex>> *__x) {\n  std size_t v2;\n  std allocator<std vector<Object Vertex>> *v3;\n  std vector<Object Vertex> *v4;\n  const std vector<Object Vertex> *v5;\n  std vector<std vector<Object Vertex>> const_iterator v6;\n  std allocator<std vector<Object Vertex>> <span class=\"supfact\">__a</span>;\n  std _Vector_base<std vector<Object Vertex>> _M_get_Tp_allocator(__x);\n  __gnu_cxx __alloc_traits<std allocator<std vector<Object Vertex>>,\n                           std vector<Object Vertex>>\n      _S_select_on_copy(&<span class=\"supfact\">__a</span>);\n  v2 = std vector<std vector<Object Vertex>> size(__x);\n  std _Vector_base<std vector<Object Vertex>> _Vector_base(\n      this, v2, &<span class=\"supfact\">__a</span>);\n  std allocator<std vector<Object Vertex>> ~allocator(&<span class=\"supfact\">__a</span>);\n  v3 = std _Vector_base<std vector<Object Vertex>> _M_get_Tp_allocator(this);\n  v4 = this->_M_impl._M_start;\n  v5 = std vector<std vector<Object Vertex>> end(__x)._M_current;\n  v6._M_current = std vector<std vector<Object Vertex>> begin(__x)._M_current;\n  this->_M_impl._M_finish = std __uninitialized_copy_a<\n      __gnu_cxx __normal_iterator<std vector<Object Vertex> const *,\n                                  std vector<std vector<Object Vertex>>>,\n      std vector<Object Vertex> *, std vector<Object Vertex>>(\n      v6,\n      (__gnu_cxx __normal_iterator<const std vector<Object Vertex> *,\n                                   std vector<std vector<Object Vertex>>>)v5,\n      v4, v3);\n}", "var": [{"name": "v9", "type": "char[33]", "pred_name": "v9", "ref_name": "__a", "ref_type": "struct std::allocator<std::vector<Object::Vertex> > { __gnu_cxx::new_allocator<std::vector<Object::Vertex> > baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "crossbuild", "repo_name": "isl", "path": "crossbuild/isl/e659db3779578487c71b05efb588796cb8c6aca0e0ee495e3e0d4f37a59b7478", "path_in_repo": "crossbuild/isl/imath/pi", "objdump": "0000000000401986 <mp_int_set_value>:\n  401986:\t55                   \tpush   %rbp\n  401987:\t48 89 e5             \tmov    %rsp,%rbp\n  40198a:\t48 83 ec 40          \tsub    $0x40,%rsp\n  40198e:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n  401992:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n  401996:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n  40199a:\t48 8b 4d c0          \tmov    -0x40(%rbp),%rcx\n  40199e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4019a2:\t48 89 ce             \tmov    %rcx,%rsi\n  4019a5:\t48 89 c7             \tmov    %rax,%rdi\n  4019a8:\te8 aa 40 00 00       \tcallq  405a57 <s_fake>\n  4019ad:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4019b1:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4019b5:\t48 89 d6             \tmov    %rdx,%rsi\n  4019b8:\t48 89 c7             \tmov    %rax,%rdi\n  4019bb:\te8 d7 00 00 00       \tcallq  401a97 <mp_int_copy>\n  4019c0:\tc9                   \tleaveq \n  4019c1:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mp_int_set_value(__int64 a1, __int64 a2) {\n  char v3[Number];\n  char <span class=\"supfact\">v4</span>[Number];\n  s_fake(<span class=\"supfact\">v4</span>, a2, v3);\n  return mp_int_copy(<span class=\"supfact\">v4</span>, a1);\n}", "code_t": "mp_result __cdecl mp_int_set_value(mp_int z, mp_small value) {\n  mp_digit vbuf[Number];\n  mpz_t <span class=\"supfact\">vtmp</span>;\n  s_fake(&<span class=\"supfact\">vtmp</span>, value, vbuf);\n  return mp_int_copy(&<span class=\"supfact\">vtmp</span>, z);\n}", "var": [{"name": "v4", "type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }", "pred_name": "ta", "ref_name": "vtmp", "ref_type": "struct mpz_t { mp_digit single; PADDING (4); mp_digit * digits; mp_size alloc; mp_size used; mp_sign sign; PADDING (7); }"}], "body_in_train": false}, {"repo_owner": "lunixbochs", "repo_name": "inscount", "path": "lunixbochs/inscount/716619e5783f2ddffc2dafac191feed49047b34c80e21316243efd48b6c7ec74", "path_in_repo": "lunixbochs/inscount//hw/audio/pcspk.o", "objdump": "0000000000000399 <pcspk_io_read>:\n 399:\t55                   \tpush   %rbp\n 39a:\t48 89 e5             \tmov    %rsp,%rbp\n 39d:\t48 83 ec 50          \tsub    $0x50,%rsp\n 3a1:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n 3a5:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n 3a9:\t89 55 bc             \tmov    %edx,-0x44(%rbp)\n 3ac:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 3b3:\t00 00 \n 3b5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 3b9:\t31 c0                \txor    %eax,%eax\n 3bb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 3bf:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 3c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3c7:\t48 8b 80 a0 08 00 00 \tmov    0x8a0(%rax),%rax\n 3ce:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 3d2:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 3d7:\t48 89 c7             \tmov    %rax,%rdi\n 3da:\te8 00 00 00 00       \tcallq  3df <pcspk_io_read+0x46>\n 3df:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3e3:\t8b 80 b8 08 00 00    \tmov    0x8b8(%rax),%eax\n 3e9:\t83 f0 10             \txor    $0x10,%eax\n 3ec:\t89 c2                \tmov    %eax,%edx\n 3ee:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3f2:\t89 90 b8 08 00 00    \tmov    %edx,0x8b8(%rax)\n 3f8:\t8b 55 e0             \tmov    -0x20(%rbp),%edx\n 3fb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 3ff:\t8b 80 b4 08 00 00    \tmov    0x8b4(%rax),%eax\n 405:\t01 c0                \tadd    %eax,%eax\n 407:\t09 c2                \tor     %eax,%edx\n 409:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 40d:\t8b 80 b8 08 00 00    \tmov    0x8b8(%rax),%eax\n 413:\t09 c2                \tor     %eax,%edx\n 415:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 418:\tc1 e0 05             \tshl    $0x5,%eax\n 41b:\t09 d0                \tor     %edx,%eax\n 41d:\t48 98                \tcltq   \n 41f:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 423:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 42a:\t00 00 \n 42c:\t74 05                \tje     433 <pcspk_io_read+0x9a>\n 42e:\te8 00 00 00 00       \tcallq  433 <pcspk_io_read+0x9a>\n 433:\tc9                   \tleaveq \n 434:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pcspk_io_read(__int64 a1) {\n  int <span class=\"supfact\">v2</span>[Number];\n  unsigned __int64 v3;\n  v3 = __readfsqword(Number);\n  pit_get_channel_info(*(_QWORD *)(a1 + Number), Number L, <span class=\"supfact\">v2</span>);\n  *(_DWORD *)(a1 + Number) ^= Number;\n  return *(_DWORD *)(a1 + Number) | (Number * *(_DWORD *)(a1 + Number)) |\n         <span class=\"supfact\">v2</span>[Number] | (Number * <span class=\"supfact\">v2</span>[Number]);\n}", "code_t": "uint64_t __cdecl pcspk_io_read(void *opaque, hwaddr addr, unsigned int size) {\n  PITChannelInfo_0 <span class=\"supfact\">ch_0</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  pit_get_channel_info(*((_QWORD *)opaque + Number), Number L,\n                       &<span class=\"supfact\">ch_0</span>);\n  *((_DWORD *)opaque + Number) ^= Number;\n  return *((_DWORD *)opaque + Number) |\n         (Number * *((_DWORD *)opaque + Number)) | <span class=\"supfact\">ch_0</span>.gate |\n         (Number * <span class=\"supfact\">ch_0</span>.out);\n}", "var": [{"name": "v2", "type": "struct PITChannelInfo_0 { int gate; int mode; int initial_count; int out; }", "pred_name": "ch_0", "ref_name": "ch_0", "ref_type": "struct PITChannelInfo_0 { int gate; int mode; int initial_count; int out; }"}], "body_in_train": false}, {"repo_owner": "PLEASE-EXCUSE-MY-DOPE-ASS-SWAG", "repo_name": "OHBot", "path": "PLEASE-EXCUSE-MY-DOPE-ASS-SWAG/OHBot/15aca905b501e38c682f9bb9e11fe52759e6eb1ec67bc5617903d75db1d6419d", "path_in_repo": "PLEASE-EXCUSE-MY-DOPE-ASS-SWAG/OHBot/bncsutil/src/bncsutil/libbncsutil.so", "objdump": "0000000000004865 <file_open.cold>:\n    4865:\t48 83 e8 01          \tsub    $0x1,%rax\n    4869:\t75 34                \tjne    489f <file_open.cold+0x3a>\n    486b:\t48 8b 05 36 b7 00 00 \tmov    0xb736(%rip),%rax        # ffa8 <_ZTVSt9bad_alloc@GLIBCXX_3.4>\n    4872:\t48 83 c0 10          \tadd    $0x10,%rax\n    4876:\t48 89 44 24 08       \tmov    %rax,0x8(%rsp)\n    487b:\te8 10 f9 ff ff       \tcallq  4190 <__cxa_begin_catch@plt>\n    4880:\t4c 89 ef             \tmov    %r13,%rdi\n    4883:\te8 c8 fb ff ff       \tcallq  4450 <fclose@plt>\n    4888:\t48 8d 7c 24 08       \tlea    0x8(%rsp),%rdi\n    488d:\t45 31 e4             \txor    %r12d,%r12d\n    4890:\te8 1b fa ff ff       \tcallq  42b0 <_ZNSt9bad_allocD1Ev@plt>\n    4895:\te8 86 fe ff ff       \tcallq  4720 <__cxa_end_catch@plt>\n    489a:\te9 b0 3f 00 00       \tjmpq   884f <file_open+0x9f>\n    489f:\te8 0c ff ff ff       \tcallq  47b0 <_Unwind_Resume@plt>\n    48a4:\t48 89 c5             \tmov    %rax,%rbp\n    48a7:\t48 8d 7c 24 08       \tlea    0x8(%rsp),%rdi\n    48ac:\te8 ff f9 ff ff       \tcallq  42b0 <_ZNSt9bad_allocD1Ev@plt>\n    48b1:\te8 6a fe ff ff       \tcallq  4720 <__cxa_end_catch@plt>\n    48b6:\t48 89 ef             \tmov    %rbp,%rdi\n    48b9:\te8 f2 fe ff ff       \tcallq  47b0 <_Unwind_Resume@plt>\n    48be:\t66 90                \txchg   %ax,%ax", "code_s": "void __fastcall file_open_cold(struct _Unwind_Exception *<span class=\"supfact\">a1</span>,\n                               struct _Unwind_Exception <span class=\"supfact\">a2</span>) {\n  __int64 v2;\n  FILE *v3;\n  if (v2 == Number) { * ( _QWORD * ) & <span class=\"supfact\">a2</span> . exception_class = ( char * ) & ` vtable for ' std bad_alloc + Number ; __cxa_begin_catch ( <span class=\"supfact\">a1</span> ) ; fclose ( v3 ) ; std bad_alloc ~ bad_alloc ( ( std bad_alloc * ) & <span class=\"supfact\">a2</span> ) ; __cxa_end_catch ( ) ; JUMPOUT ( Number ) ; } _Unwind_Resume ( <span class=\"supfact\">a1</span> ) ; }", "code_t": "void __fastcall file_open_cold(struct _Unwind_Exception *<span class=\"supfact\">a1</span>,\n                               struct _Unwind_Exception <span class=\"supfact\">a2</span>) {\n  __int64 v2;\n  FILE *v3;\n  if (v2 == Number) { * ( _QWORD * ) & <span class=\"supfact\">a2</span> . exception_class = ( char * ) & ` vtable for ' std bad_alloc + Number ; __cxa_begin_catch ( <span class=\"supfact\">a1</span> ) ; fclose ( v3 ) ; std bad_alloc ~ bad_alloc ( ( std bad_alloc * ) & <span class=\"supfact\">a2</span> ) ; __cxa_end_catch ( ) ; JUMPOUT ( Number ) ; } _Unwind_Resume ( <span class=\"supfact\">a1</span> ) ; }", "var": [{"name": "a1", "type": "struct _Unwind_Exception *", "pred_name": "a1", "ref_name": "a1", "ref_type": "struct _Unwind_Exception *"}, {"name": "a2", "type": "const exception *", "pred_name": "a2", "ref_name": "a2", "ref_type": "struct struct _Unwind_Exception { _Unwind_Exception_Class exception_class; PADDING (4); _Unwind_Exception_Cleanup_Fn exception_cleanup; _Unwind_Word private_1; _Unwind_Word private_2; PADDING (8); }"}], "body_in_train": false}, {"repo_owner": "v4o6", "repo_name": "cpsc314", "path": "v4o6/cpsc314/a25c6f651200c99b5d3b2a5b5317b70c75a4cab6d83283e756e97ad31a5762e2", "path_in_repo": "v4o6/cpsc314/template_clean/a3", "objdump": "0000000000408fb4 <_Z7myScaleddd>:\n  408fb4:\t55                   \tpush   %rbp\n  408fb5:\t48 89 e5             \tmov    %rsp,%rbp\n  408fb8:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n  408fbf:\tf2 0f 11 85 78 ff ff \tmovsd  %xmm0,-0x88(%rbp)\n  408fc6:\tff \n  408fc7:\tf2 0f 11 8d 70 ff ff \tmovsd  %xmm1,-0x90(%rbp)\n  408fce:\tff \n  408fcf:\tf2 0f 11 95 68 ff ff \tmovsd  %xmm2,-0x98(%rbp)\n  408fd6:\tff \n  408fd7:\tf2 0f 10 8d 70 ff ff \tmovsd  -0x90(%rbp),%xmm1\n  408fde:\tff \n  408fdf:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n  408fe6:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  408fea:\tf2 0f 10 05 8e 13 01 \tmovsd  0x1138e(%rip),%xmm0        # 41a380 <_ZStL6ignore+0x1de>\n  408ff1:\t00 \n  408ff2:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  408ff7:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  408ffc:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  409000:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  409005:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  40900a:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40900e:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  409013:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  409018:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40901c:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  409021:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  409026:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40902a:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  40902f:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  409034:\tff b5 68 ff ff ff    \tpushq  -0x98(%rbp)\n  40903a:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40903e:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  409043:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  409048:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40904c:\t48 8d 64 24 f8       \tlea    -0x8(%rsp),%rsp\n  409051:\tf2 0f 11 04 24       \tmovsd  %xmm0,(%rsp)\n  409056:\t66 0f ef ff          \tpxor   %xmm7,%xmm7\n  40905a:\t66 0f ef f6          \tpxor   %xmm6,%xmm6\n  40905e:\t66 0f 28 e9          \tmovapd %xmm1,%xmm5\n  409062:\t66 0f ef e4          \tpxor   %xmm4,%xmm4\n  409066:\t66 0f ef db          \tpxor   %xmm3,%xmm3\n  40906a:\t66 0f ef d2          \tpxor   %xmm2,%xmm2\n  40906e:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n  409072:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  409077:\t48 89 c7             \tmov    %rax,%rdi\n  40907a:\te8 83 73 00 00       \tcallq  410402 <_ZN6MatrixC1Edddddddddddddddd>\n  40907f:\t48 83 c4 40          \tadd    $0x40,%rsp\n  409083:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  409087:\t48 89 c6             \tmov    %rax,%rsi\n  40908a:\tbf 80 46 42 00       \tmov    $0x424680,%edi\n  40908f:\te8 f8 85 00 00       \tcallq  41168c <_ZN6MatrixmLERKS_>\n  409094:\t90                   \tnop\n  409095:\tc9                   \tleaveq \n  409096:\tc3                   \tretq   ", "code_s": "__int64 __fastcall myScale(double a1, double a2, double a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  Matrix Matrix((Matrix *)<span class=\"supfact\">v4</span>, a1, Number, Number, Number,\n                Number, a2, Number, Number, Number, Number, a3, Number, Number,\n                Number, Number, Number);\n  return Matrix operator*=(&modelViewMatrix, <span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl myScale(double sx, double sy, double sz) {\n  Matrix <span class=\"supfact\">other</span>;\n  Matrix Matrix(&<span class=\"supfact\">other</span>, sx, Number, Number, Number, Number, sy,\n                Number, Number, Number, Number, sz, Number, Number, Number,\n                Number, Number);\n  Matrix operator*=(&modelViewMatrix, &<span class=\"supfact\">other</span>);\n}", "var": [{"name": "v4", "type": "__unk__", "pred_name": "v4", "ref_name": "other", "ref_type": "struct Matrix { Vector[4] data_; }"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/53d830a43215f228fc0a4c27e6f0f8ad5a6e43d5f5cf7f601c574db1fd46c809", "path_in_repo": "AlexanderVangelov/pjsip//pjsip-apps/bin/samples/x86_64-unknown-linux-gnu/recfile", "objdump": "00000000004148ba <pjmedia_aud_stream_create>:\n  4148ba:\t55                   \tpush   %rbp\n  4148bb:\t48 89 e5             \tmov    %rsp,%rbp\n  4148be:\t48 81 ec d0 00 00 00 \tsub    $0xd0,%rsp\n  4148c5:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  4148cc:\t48 89 b5 50 ff ff ff \tmov    %rsi,-0xb0(%rbp)\n  4148d3:\t48 89 95 48 ff ff ff \tmov    %rdx,-0xb8(%rbp)\n  4148da:\t48 89 8d 40 ff ff ff \tmov    %rcx,-0xc0(%rbp)\n  4148e1:\t4c 89 85 38 ff ff ff \tmov    %r8,-0xc8(%rbp)\n  4148e8:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n  4148ef:\t00 \n  4148f0:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n  4148f7:\t00 \n  4148f8:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n  4148ff:\t00 \n  414900:\t48 83 bd 58 ff ff ff \tcmpq   $0x0,-0xa8(%rbp)\n  414907:\t00 \n  414908:\t74 17                \tje     414921 <pjmedia_aud_stream_create+0x67>\n  41490a:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  414911:\t8b 00                \tmov    (%rax),%eax\n  414913:\t85 c0                \ttest   %eax,%eax\n  414915:\t74 0a                \tje     414921 <pjmedia_aud_stream_create+0x67>\n  414917:\t48 83 bd 38 ff ff ff \tcmpq   $0x0,-0xc8(%rbp)\n  41491e:\t00 \n  41491f:\t75 44                \tjne    414965 <pjmedia_aud_stream_create+0xab>\n  414921:\t48 83 bd 58 ff ff ff \tcmpq   $0x0,-0xa8(%rbp)\n  414928:\t00 \n  414929:\t74 17                \tje     414942 <pjmedia_aud_stream_create+0x88>\n  41492b:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  414932:\t8b 00                \tmov    (%rax),%eax\n  414934:\t85 c0                \ttest   %eax,%eax\n  414936:\t74 0a                \tje     414942 <pjmedia_aud_stream_create+0x88>\n  414938:\t48 83 bd 38 ff ff ff \tcmpq   $0x0,-0xc8(%rbp)\n  41493f:\t00 \n  414940:\t75 19                \tjne    41495b <pjmedia_aud_stream_create+0xa1>\n  414942:\tb9 d0 e6 48 00       \tmov    $0x48e6d0,%ecx\n  414947:\tba 04 02 00 00       \tmov    $0x204,%edx\n  41494c:\tbe 6d e4 48 00       \tmov    $0x48e46d,%esi\n  414951:\tbf 55 e5 48 00       \tmov    $0x48e555,%edi\n  414956:\te8 a5 17 ff ff       \tcallq  406100 <__assert_fail@plt>\n  41495b:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n  414960:\te9 77 02 00 00       \tjmpq   414bdc <pjmedia_aud_stream_create+0x322>\n  414965:\t48 8b 05 3c 3f 0a 00 \tmov    0xa3f3c(%rip),%rax        # 4b88a8 <aud_subsys+0x8>\n  41496c:\t48 85 c0             \ttest   %rax,%rax\n  41496f:\t75 2f                \tjne    4149a0 <pjmedia_aud_stream_create+0xe6>\n  414971:\t48 8b 05 30 3f 0a 00 \tmov    0xa3f30(%rip),%rax        # 4b88a8 <aud_subsys+0x8>\n  414978:\t48 85 c0             \ttest   %rax,%rax\n  41497b:\t75 19                \tjne    414996 <pjmedia_aud_stream_create+0xdc>\n  41497d:\tb9 d0 e6 48 00       \tmov    $0x48e6d0,%ecx\n  414982:\tba 05 02 00 00       \tmov    $0x205,%edx\n  414987:\tbe 6d e4 48 00       \tmov    $0x48e46d,%esi\n  41498c:\tbf 04 e5 48 00       \tmov    $0x48e504,%edi\n  414991:\te8 6a 17 ff ff       \tcallq  406100 <__assert_fail@plt>\n  414996:\tb8 a3 68 06 00       \tmov    $0x668a3,%eax\n  41499b:\te9 3c 02 00 00       \tjmpq   414bdc <pjmedia_aud_stream_create+0x322>\n  4149a0:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4149a7:\t8b 00                \tmov    (%rax),%eax\n  4149a9:\t83 f8 01             \tcmp    $0x1,%eax\n  4149ac:\t74 69                \tje     414a17 <pjmedia_aud_stream_create+0x15d>\n  4149ae:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4149b5:\t8b 00                \tmov    (%rax),%eax\n  4149b7:\t83 f8 02             \tcmp    $0x2,%eax\n  4149ba:\t74 5b                \tje     414a17 <pjmedia_aud_stream_create+0x15d>\n  4149bc:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4149c3:\t8b 00                \tmov    (%rax),%eax\n  4149c5:\t83 f8 03             \tcmp    $0x3,%eax\n  4149c8:\t74 4d                \tje     414a17 <pjmedia_aud_stream_create+0x15d>\n  4149ca:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4149d1:\t8b 00                \tmov    (%rax),%eax\n  4149d3:\t83 f8 01             \tcmp    $0x1,%eax\n  4149d6:\t74 35                \tje     414a0d <pjmedia_aud_stream_create+0x153>\n  4149d8:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4149df:\t8b 00                \tmov    (%rax),%eax\n  4149e1:\t83 f8 02             \tcmp    $0x2,%eax\n  4149e4:\t74 27                \tje     414a0d <pjmedia_aud_stream_create+0x153>\n  4149e6:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4149ed:\t8b 00                \tmov    (%rax),%eax\n  4149ef:\t83 f8 03             \tcmp    $0x3,%eax\n  4149f2:\t74 19                \tje     414a0d <pjmedia_aud_stream_create+0x153>\n  4149f4:\tb9 d0 e6 48 00       \tmov    $0x48e6d0,%ecx\n  4149f9:\tba 06 02 00 00       \tmov    $0x206,%edx\n  4149fe:\tbe 6d e4 48 00       \tmov    $0x48e46d,%esi\n  414a03:\tbf 78 e5 48 00       \tmov    $0x48e578,%edi\n  414a08:\te8 f3 16 ff ff       \tcallq  406100 <__assert_fail@plt>\n  414a0d:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n  414a12:\te9 c5 01 00 00       \tjmpq   414bdc <pjmedia_aud_stream_create+0x322>\n  414a17:\t48 8b 8d 58 ff ff ff \tmov    -0xa8(%rbp),%rcx\n  414a1e:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  414a25:\tba 70 00 00 00       \tmov    $0x70,%edx\n  414a2a:\t48 89 ce             \tmov    %rcx,%rsi\n  414a2d:\t48 89 c7             \tmov    %rax,%rdi\n  414a30:\te8 7b ef ff ff       \tcallq  4139b0 <pj_memcpy>\n  414a35:\t8b 85 70 ff ff ff    \tmov    -0x90(%rbp),%eax\n  414a3b:\t83 e0 01             \tand    $0x1,%eax\n  414a3e:\t85 c0                \ttest   %eax,%eax\n  414a40:\t74 54                \tje     414a96 <pjmedia_aud_stream_create+0x1dc>\n  414a42:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n  414a48:\t85 c0                \ttest   %eax,%eax\n  414a4a:\t79 0a                \tjns    414a56 <pjmedia_aud_stream_create+0x19c>\n  414a4c:\tc7 85 74 ff ff ff ff \tmovl   $0xffffffff,-0x8c(%rbp)\n  414a53:\tff ff ff \n  414a56:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n  414a5c:\t48 8d 95 6c ff ff ff \tlea    -0x94(%rbp),%rdx\n  414a63:\t48 8d 4d e8          \tlea    -0x18(%rbp),%rcx\n  414a67:\t48 89 ce             \tmov    %rcx,%rsi\n  414a6a:\t89 c7                \tmov    %eax,%edi\n  414a6c:\te8 b5 f8 ff ff       \tcallq  414326 <lookup_dev>\n  414a71:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  414a74:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  414a78:\t74 08                \tje     414a82 <pjmedia_aud_stream_create+0x1c8>\n  414a7a:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  414a7d:\te9 5a 01 00 00       \tjmpq   414bdc <pjmedia_aud_stream_create+0x322>\n  414a82:\t8b 85 6c ff ff ff    \tmov    -0x94(%rbp),%eax\n  414a88:\t89 85 74 ff ff ff    \tmov    %eax,-0x8c(%rbp)\n  414a8e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  414a92:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  414a96:\t8b 85 70 ff ff ff    \tmov    -0x90(%rbp),%eax\n  414a9c:\t83 e0 02             \tand    $0x2,%eax\n  414a9f:\t85 c0                \ttest   %eax,%eax\n  414aa1:\t74 54                \tje     414af7 <pjmedia_aud_stream_create+0x23d>\n  414aa3:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n  414aa9:\t85 c0                \ttest   %eax,%eax\n  414aab:\t79 0a                \tjns    414ab7 <pjmedia_aud_stream_create+0x1fd>\n  414aad:\tc7 85 78 ff ff ff fe \tmovl   $0xfffffffe,-0x88(%rbp)\n  414ab4:\tff ff ff \n  414ab7:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n  414abd:\t48 8d 95 68 ff ff ff \tlea    -0x98(%rbp),%rdx\n  414ac4:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  414ac8:\t48 89 ce             \tmov    %rcx,%rsi\n  414acb:\t89 c7                \tmov    %eax,%edi\n  414acd:\te8 54 f8 ff ff       \tcallq  414326 <lookup_dev>\n  414ad2:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  414ad5:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  414ad9:\t74 08                \tje     414ae3 <pjmedia_aud_stream_create+0x229>\n  414adb:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  414ade:\te9 f9 00 00 00       \tjmpq   414bdc <pjmedia_aud_stream_create+0x322>\n  414ae3:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n  414ae9:\t89 85 78 ff ff ff    \tmov    %eax,-0x88(%rbp)\n  414aef:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  414af3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  414af7:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  414afc:\t75 2a                \tjne    414b28 <pjmedia_aud_stream_create+0x26e>\n  414afe:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  414b03:\t75 19                \tjne    414b1e <pjmedia_aud_stream_create+0x264>\n  414b05:\tb9 d0 e6 48 00       \tmov    $0x48e6d0,%ecx\n  414b0a:\tba 2c 02 00 00       \tmov    $0x22c,%edx\n  414b0f:\tbe 6d e4 48 00       \tmov    $0x48e46d,%esi\n  414b14:\tbf e2 e5 48 00       \tmov    $0x48e5e2,%edi\n  414b19:\te8 e2 15 ff ff       \tcallq  406100 <__assert_fail@plt>\n  414b1e:\tb8 78 11 01 00       \tmov    $0x11178,%eax\n  414b23:\te9 b4 00 00 00       \tjmpq   414bdc <pjmedia_aud_stream_create+0x322>\n  414b28:\t8b 85 70 ff ff ff    \tmov    -0x90(%rbp),%eax\n  414b2e:\t83 f8 03             \tcmp    $0x3,%eax\n  414b31:\t75 45                \tjne    414b78 <pjmedia_aud_stream_create+0x2be>\n  414b33:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  414b37:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  414b3b:\t48 39 c2             \tcmp    %rax,%rdx\n  414b3e:\t74 38                \tje     414b78 <pjmedia_aud_stream_create+0x2be>\n  414b40:\t8b 85 70 ff ff ff    \tmov    -0x90(%rbp),%eax\n  414b46:\t83 f8 03             \tcmp    $0x3,%eax\n  414b49:\t75 26                \tjne    414b71 <pjmedia_aud_stream_create+0x2b7>\n  414b4b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  414b4f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  414b53:\t48 39 c2             \tcmp    %rax,%rdx\n  414b56:\t74 19                \tje     414b71 <pjmedia_aud_stream_create+0x2b7>\n  414b58:\tb9 d0 e6 48 00       \tmov    $0x48e6d0,%ecx\n  414b5d:\tba 2f 02 00 00       \tmov    $0x22f,%edx\n  414b62:\tbe 6d e4 48 00       \tmov    $0x48e46d,%esi\n  414b67:\tbf f8 e5 48 00       \tmov    $0x48e5f8,%edi\n  414b6c:\te8 8f 15 ff ff       \tcallq  406100 <__assert_fail@plt>\n  414b71:\tb8 a4 68 06 00       \tmov    $0x668a4,%eax\n  414b76:\teb 64                \tjmp    414bdc <pjmedia_aud_stream_create+0x322>\n  414b78:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  414b7c:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  414b80:\t4c 8b 50 28          \tmov    0x28(%rax),%r10\n  414b84:\t4c 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%r8\n  414b8b:\t48 8b bd 40 ff ff ff \tmov    -0xc0(%rbp),%rdi\n  414b92:\t48 8b 8d 48 ff ff ff \tmov    -0xb8(%rbp),%rcx\n  414b99:\t48 8b 95 50 ff ff ff \tmov    -0xb0(%rbp),%rdx\n  414ba0:\t48 8d b5 70 ff ff ff \tlea    -0x90(%rbp),%rsi\n  414ba7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  414bab:\t4d 89 c1             \tmov    %r8,%r9\n  414bae:\t49 89 f8             \tmov    %rdi,%r8\n  414bb1:\t48 89 c7             \tmov    %rax,%rdi\n  414bb4:\t41 ff d2             \tcallq  *%r10\n  414bb7:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  414bba:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n  414bbe:\t74 05                \tje     414bc5 <pjmedia_aud_stream_create+0x30b>\n  414bc0:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  414bc3:\teb 17                \tjmp    414bdc <pjmedia_aud_stream_create+0x322>\n  414bc5:\t48 8b 85 38 ff ff ff \tmov    -0xc8(%rbp),%rax\n  414bcc:\t48 8b 00             \tmov    (%rax),%rax\n  414bcf:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  414bd3:\t8b 12                \tmov    (%rdx),%edx\n  414bd5:\t89 10                \tmov    %edx,(%rax)\n  414bd7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  414bdc:\tc9                   \tleaveq \n  414bdd:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pjmedia_aud_stream_create(_DWORD *a1, __int64 a2, __int64 a3,\n                                             __int64 a4, _DWORD **a5) {\n  __int64 result;\n  int v9;\n  int v10;\n  int <span class=\"supfact\">v11</span>;\n  int v12;\n  int v13;\n  __int64 v14;\n  __int64 v15;\n  unsigned int v16;\n  __int64 v17;\n  v15 = Number L;\n  v14 = Number L;\n  v17 = Number L;\n  if (a1 && *a1 && a5) {\n    if (!qword_4B88A8)\n      __assert_fail(String, String, Number, String);\n    if (*a1 == Number || *a1 == Number || *a1 == Number) {\n      pj_memcpy_3(&<span class=\"supfact\">v11</span>, a1, Number);\n      if ((<span class=\"supfact\">v11</span> & Number) != Number) {\n        if (v12 < Number)\n          v12 = Number;\n        v16 = lookup_dev(v12, &v15, &v10);\n        if (v16)\n          return v16;\n        v12 = v10;\n        v17 = v15;\n      }\n      if ((<span class=\"supfact\">v11</span> & Number) != Number) {\n        if (v13 < Number)\n          v13 = Number;\n        v16 = lookup_dev(v13, &v14, &v9);\n        if (v16)\n          return v16;\n        v13 = v9;\n        v17 = v14;\n      }\n      if (!v17)\n        __assert_fail(String, String, Number, String);\n      if (<span class=\"supfact\">v11</span> == Number && v15 != v14)\n        __assert_fail(String, String, Number, String);\n      v16 = (*(__int64(__fastcall **)(__int64, int *, __int64, __int64, __int64,\n                                      _DWORD **))(\n          *(_QWORD *)(v17 + Number) + Number L))(v17, &<span class=\"supfact\">v11</span>, a2,\n                                                 a3, a4, a5);\n      if (v16) {\n        result = v16;\n      } else {\n        **a5 = *(_DWORD *)v17;\n        result = Number L;\n      }\n    } else {\n      if (*a1 != Number && *a1 != Number && *a1 != Number)\n        __assert_fail(String, String, Number, String);\n      result = Number L;\n    }\n  } else {\n    if (!a1 || !*a1 || !a5)\n      __assert_fail(String, String, Number, String);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "pj_status_t __cdecl pjmedia_aud_stream_create(\n    const pjmedia_aud_param_0 *prm, pjmedia_aud_rec_cb rec_cb,\n    pjmedia_aud_play_cb play_cb, void *user_data,\n    pjmedia_aud_stream_0 **p_aud_strm) {\n  pj_status_t result;\n  unsigned int index_0;\n  unsigned int index;\n  pjmedia_aud_param_0 <span class=\"supfact\">param</span>;\n  pjmedia_aud_dev_factory_0 *play_f;\n  pjmedia_aud_dev_factory_0 *rec_f;\n  pj_status_t status;\n  pjmedia_aud_dev_factory_0 *f;\n  rec_f = Number L;\n  play_f = Number L;\n  f = Number L;\n  if (prm && prm->dir && p_aud_strm) {\n    if (!aud_subsys.pf)\n      __assert_fail(String, String, Number, String);\n    if (prm->dir == PJMEDIA_DIR_ENCODING || prm->dir == PJMEDIA_DIR_DECODING ||\n        prm->dir == PJMEDIA_DIR_ENCODING_DECODING) {\n      pj_memcpy_3(&<span class=\"supfact\">param</span>, prm, Number);\n      if ((<span class=\"supfact\">param</span>.dir & Number) != Number) {\n        if (<span class=\"supfact\">param</span>.rec_id < Number)\n          <span class=\"supfact\">param</span>.rec_id = Number;\n        status = lookup_dev(<span class=\"supfact\">param</span>.rec_id, &rec_f, &index);\n        if (status)\n          return status;\n        <span class=\"supfact\">param</span>.rec_id = index;\n        f = rec_f;\n      }\n      if ((<span class=\"supfact\">param</span>.dir & Number) != Number) {\n        if (<span class=\"supfact\">param</span>.play_id < Number)\n          <span class=\"supfact\">param</span>.play_id = Number;\n        status = lookup_dev(<span class=\"supfact\">param</span>.play_id, &play_f, &index_0);\n        if (status)\n          return status;\n        <span class=\"supfact\">param</span>.play_id = index_0;\n        f = play_f;\n      }\n      if (!f)\n        __assert_fail(String, String, Number, String);\n      if (<span class=\"supfact\">param</span>.dir == PJMEDIA_DIR_ENCODING_DECODING &&\n          rec_f != play_f)\n        __assert_fail(String, String, Number, String);\n      status = f->op->create_stream(f, &<span class=\"supfact\">param</span>, rec_cb, play_cb,\n                                    user_data, p_aud_strm);\n      if (status) {\n        result = status;\n      } else {\n        (*p_aud_strm)->sys.drv_idx = f->sys.drv_idx;\n        result = Number;\n      }\n    } else {\n      if (prm->dir != PJMEDIA_DIR_ENCODING &&\n          prm->dir != PJMEDIA_DIR_DECODING &&\n          prm->dir != PJMEDIA_DIR_ENCODING_DECODING) {\n        __assert_fail(String, String, Number, String);\n      }\n      result = Number;\n    }\n  } else {\n    if (!prm || prm->dir == PJMEDIA_DIR_NONE || !p_aud_strm)\n      __assert_fail(String, String, Number, String);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v11", "type": "struct pjmedia_aud_param_0 { pjmedia_dir_0 dir; pjmedia_aud_dev_index rec_id; pjmedia_aud_dev_index play_id; unsigned int clock_rate; unsigned int channel_count; unsigned int samples_per_frame; unsigned int bits_per_sample; unsigned int flags; pjmedia_format_0 ext_fmt; unsigned int input_latency_ms; unsigned int output_latency_ms; unsigned int input_vol; unsigned int output_vol; pjmedia_aud_dev_route_0 input_route; pjmedia_aud_dev_route_0 output_route; pj_bool_t ec_enabled; unsigned int ec_tail_ms; pj_bool_t plc_enabled; pj_bool_t cng_enabled; pj_bool_t vad_enabled; }", "pred_name": "param", "ref_name": "param", "ref_type": "struct pjmedia_aud_param_0 { pjmedia_dir_0 dir; pjmedia_aud_dev_index rec_id; pjmedia_aud_dev_index play_id; unsigned int clock_rate; unsigned int channel_count; unsigned int samples_per_frame; unsigned int bits_per_sample; unsigned int flags; pjmedia_format_0 ext_fmt; unsigned int input_latency_ms; unsigned int output_latency_ms; unsigned int input_vol; unsigned int output_vol; pjmedia_aud_dev_route_0 input_route; pjmedia_aud_dev_route_0 output_route; pj_bool_t ec_enabled; unsigned int ec_tail_ms; pj_bool_t plc_enabled; pj_bool_t cng_enabled; pj_bool_t vad_enabled; }"}], "body_in_train": false}, {"repo_owner": "Wyvern", "repo_name": "git", "path": "Wyvern/git/d2f47fb800dc5e6e0d2e97ef521a75498289a1e0471f65ca92b2c9adaa3dc434", "path_in_repo": "Wyvern/git//builtin/am.o", "objdump": "0000000000004f4a <am_rerere_clear>:\n    4f4a:\t55                   \tpush   %rbp\n    4f4b:\t48 89 e5             \tmov    %rsp,%rbp\n    4f4e:\t48 83 ec 20          \tsub    $0x20,%rsp\n    4f52:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    4f59:\t00 \n    4f5a:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n    4f61:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    4f68:\t0f b6 45 f0          \tmovzbl -0x10(%rbp),%eax\n    4f6c:\t83 c8 01             \tor     $0x1,%eax\n    4f6f:\t88 45 f0             \tmov    %al,-0x10(%rbp)\n    4f72:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    4f79:\t00 \n    4f7a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4f81 <am_rerere_clear+0x37>\n    4f81:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n    4f85:\t48 89 d6             \tmov    %rdx,%rsi\n    4f88:\t48 89 c7             \tmov    %rax,%rdi\n    4f8b:\te8 00 00 00 00       \tcallq  4f90 <am_rerere_clear+0x46>\n    4f90:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    4f94:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    4f99:\t48 89 c7             \tmov    %rax,%rdi\n    4f9c:\te8 00 00 00 00       \tcallq  4fa1 <am_rerere_clear+0x57>\n    4fa1:\t90                   \tnop\n    4fa2:\tc9                   \tleaveq \n    4fa3:\tc3                   \tretq   ", "code_s": "__int64 am_rerere_clear() {\n  __int64 <span class=\"supfact\">v1</span>;\n  int v2;\n  int v3;\n  char v4;\n  __int64 v5;\n  <span class=\"supfact\">v1</span> = Number L;\n  v2 = Number;\n  v3 = Number;\n  v4 |= Number;\n  v5 = Number L;\n  rerere_clear(the_repository, &<span class=\"supfact\">v1</span>);\n  return string_list_clear(&<span class=\"supfact\">v1</span>, Number L);\n}", "code_t": "void __cdecl am_rerere_clear() {\n  string_list <span class=\"supfact\">merge_rr</span>;\n  <span class=\"supfact\">merge_rr</span>.items = Number L;\n  <span class=\"supfact\">merge_rr</span>.nr = Number;\n  <span class=\"supfact\">merge_rr</span>.alloc = Number;\n  *((_BYTE *)&<span class=\"supfact\">merge_rr</span> + Number) |= Number;\n  <span class=\"supfact\">merge_rr</span>.cmp = Number L;\n  rerere_clear(the_repository, &<span class=\"supfact\">merge_rr</span>);\n  string_list_clear(&<span class=\"supfact\">merge_rr</span>, Number L);\n}", "var": [{"name": "v1", "type": "struct string_list { string_list_item * items; unsigned int nr; unsigned int alloc; unsigned __int32 : 1 strdup_strings; PADDING (7); compare_strings_fn cmp; }", "pred_name": "merge_rr", "ref_name": "merge_rr", "ref_type": "struct string_list { string_list_item * items; unsigned int nr; unsigned int alloc; unsigned __int32 : 1 strdup_strings; PADDING (7); compare_strings_fn cmp; }"}], "body_in_train": false}, {"repo_owner": "li-ch", "repo_name": "rdma-examples", "path": "li-ch/rdma-examples/69e4e099373ca8f6a88d78c6a066e2a18a1d7ed45ae1a1ae76a1bf6055e88a6c", "path_in_repo": "li-ch/rdma-examples/rdma_st/src/3_rdma/2-rc_send/sock.o", "objdump": "000000000000024a <sock_client_connect>:\n 24a:\t55                   \tpush   %rbp\n 24b:\t48 89 e5             \tmov    %rsp,%rbp\n 24e:\t48 83 ec 70          \tsub    $0x70,%rsp\n 252:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n 256:\t89 75 94             \tmov    %esi,-0x6c(%rbp)\n 259:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n 260:\t00 \n 261:\t48 c7 45 b8 00 00 00 \tmovq   $0x0,-0x48(%rbp)\n 268:\t00 \n 269:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n 270:\t00 \n 271:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n 278:\t00 \n 279:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n 280:\t00 \n 281:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n 288:\t00 \n 289:\tc7 45 b8 01 00 00 00 \tmovl   $0x1,-0x48(%rbp)\n 290:\tc7 45 f4 ff ff ff ff \tmovl   $0xffffffff,-0xc(%rbp)\n 297:\t8b 55 94             \tmov    -0x6c(%rbp),%edx\n 29a:\t48 8d 45 a8          \tlea    -0x58(%rbp),%rax\n 29e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2a3:\t48 89 c7             \tmov    %rax,%rdi\n 2a6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2ab:\te8 00 00 00 00       \tcallq  2b0 <sock_client_connect+0x66>\n 2b0:\t85 c0                \ttest   %eax,%eax\n 2b2:\t79 28                \tjns    2dc <sock_client_connect+0x92>\n 2b4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2bb <sock_client_connect+0x71>\n 2bb:\t48 89 c1             \tmov    %rax,%rcx\n 2be:\tba 10 00 00 00       \tmov    $0x10,%edx\n 2c3:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 2c8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2cd:\te8 00 00 00 00       \tcallq  2d2 <sock_client_connect+0x88>\n 2d2:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 2d7:\te9 30 01 00 00       \tjmpq   40c <sock_client_connect+0x1c2>\n 2dc:\t48 8b 75 a8          \tmov    -0x58(%rbp),%rsi\n 2e0:\t48 8d 4d e8          \tlea    -0x18(%rbp),%rcx\n 2e4:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n 2e8:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 2ec:\t48 89 c7             \tmov    %rax,%rdi\n 2ef:\te8 00 00 00 00       \tcallq  2f4 <sock_client_connect+0xaa>\n 2f4:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n 2f7:\t83 7d f0 00          \tcmpl   $0x0,-0x10(%rbp)\n 2fb:\t79 4c                \tjns    349 <sock_client_connect+0xff>\n 2fd:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 300:\t89 c7                \tmov    %eax,%edi\n 302:\te8 00 00 00 00       \tcallq  307 <sock_client_connect+0xbd>\n 307:\t48 89 c6             \tmov    %rax,%rsi\n 30a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 311 <sock_client_connect+0xc7>\n 311:\t8b 4d 94             \tmov    -0x6c(%rbp),%ecx\n 314:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n 318:\t41 89 c8             \tmov    %ecx,%r8d\n 31b:\t48 89 d1             \tmov    %rdx,%rcx\n 31e:\t48 89 f2             \tmov    %rsi,%rdx\n 321:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 326:\t48 89 c7             \tmov    %rax,%rdi\n 329:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 32e:\te8 00 00 00 00       \tcallq  333 <sock_client_connect+0xe9>\n 333:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 337:\t48 89 c7             \tmov    %rax,%rdi\n 33a:\te8 00 00 00 00       \tcallq  33f <sock_client_connect+0xf5>\n 33f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 344:\te9 c3 00 00 00       \tjmpq   40c <sock_client_connect+0x1c2>\n 349:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 34d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 351:\teb 67                \tjmp    3ba <sock_client_connect+0x170>\n 353:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 357:\t8b 50 0c             \tmov    0xc(%rax),%edx\n 35a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 35e:\t8b 48 08             \tmov    0x8(%rax),%ecx\n 361:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 365:\t8b 40 04             \tmov    0x4(%rax),%eax\n 368:\t89 ce                \tmov    %ecx,%esi\n 36a:\t89 c7                \tmov    %eax,%edi\n 36c:\te8 00 00 00 00       \tcallq  371 <sock_client_connect+0x127>\n 371:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 374:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 378:\t78 34                \tjs     3ae <sock_client_connect+0x164>\n 37a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 37e:\t8b 50 10             \tmov    0x10(%rax),%edx\n 381:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 385:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 389:\t48 89 c1             \tmov    %rax,%rcx\n 38c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 38f:\t48 89 ce             \tmov    %rcx,%rsi\n 392:\t89 c7                \tmov    %eax,%edi\n 394:\te8 00 00 00 00       \tcallq  399 <sock_client_connect+0x14f>\n 399:\t85 c0                \ttest   %eax,%eax\n 39b:\t74 26                \tje     3c3 <sock_client_connect+0x179>\n 39d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 3a0:\t89 c7                \tmov    %eax,%edi\n 3a2:\te8 00 00 00 00       \tcallq  3a7 <sock_client_connect+0x15d>\n 3a7:\tc7 45 f4 ff ff ff ff \tmovl   $0xffffffff,-0xc(%rbp)\n 3ae:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 3b2:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n 3b6:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 3ba:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n 3bf:\t75 92                \tjne    353 <sock_client_connect+0x109>\n 3c1:\teb 01                \tjmp    3c4 <sock_client_connect+0x17a>\n 3c3:\t90                   \tnop\n 3c4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3c8:\t48 89 c7             \tmov    %rax,%rdi\n 3cb:\te8 00 00 00 00       \tcallq  3d0 <sock_client_connect+0x186>\n 3d0:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n 3d4:\t48 89 c7             \tmov    %rax,%rdi\n 3d7:\te8 00 00 00 00       \tcallq  3dc <sock_client_connect+0x192>\n 3dc:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n 3e0:\t79 27                \tjns    409 <sock_client_connect+0x1bf>\n 3e2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3e9 <sock_client_connect+0x19f>\n 3e9:\t8b 4d 94             \tmov    -0x6c(%rbp),%ecx\n 3ec:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n 3f0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3f5:\t48 89 c7             \tmov    %rax,%rdi\n 3f8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 3fd:\te8 00 00 00 00       \tcallq  402 <sock_client_connect+0x1b8>\n 402:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n 407:\teb 03                \tjmp    40c <sock_client_connect+0x1c2>\n 409:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 40c:\tc9                   \tleaveq \n 40d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall sock_client_connect(const char *a1, unsigned int a2) {\n  __int64 result;\n  const char *v3;\n  char *ptr;\n  struct addrinfo <span class=\"supfact\">req</span>;\n  struct addrinfo *pai;\n  int ecode;\n  int fd;\n  struct addrinfo *i;\n  *(_QWORD *)&<span class=\"supfact\">req</span>.ai_flags = Number L;\n  *(_QWORD *)&<span class=\"supfact\">req</span>.ai_socktype = Number L;\n  *(_QWORD *)&<span class=\"supfact\">req</span>.ai_addrlen = Number L;\n  <span class=\"supfact\">req</span>.ai_addr = Number L;\n  <span class=\"supfact\">req</span>.ai_canonname = Number L;\n  <span class=\"supfact\">req</span>.ai_next = Number L;\n  fd = Number;\n  if (asprintf(&ptr, String, a2) >= Number) {\n    ecode = getaddrinfo(a1, ptr, &<span class=\"supfact\">req</span>, &pai);\n    if (ecode >= Number) {\n      for (i = pai; i; i = i->ai_next) {\n        fd = socket(i->ai_family, i->ai_socktype, i->ai_protocol);\n        if (fd >= Number) {\n          if (!connect(fd, i->ai_addr, i->ai_addrlen))\n            break;\n          close(fd);\n          fd = Number;\n        }\n      }\n      freeaddrinfo(pai);\n      free(ptr);\n      if (fd >= Number) {\n        result = (unsigned int)fd;\n      } else {\n        fprintf(stderr, String, a1, a2);\n        result = Number;\n      }\n    } else {\n      v3 = gai_strerror(ecode);\n      fprintf(stderr, String, v3, a1, a2);\n      free(ptr);\n      result = Number;\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl sock_client_connect(const char *server_name, int port) {\n  int result;\n  const char *v3;\n  char *service;\n  addrinfo <span class=\"supfact\">hints</span>;\n  addrinfo *res;\n  int n;\n  int sockfd;\n  addrinfo *t;\n  *(_QWORD *)&<span class=\"supfact\">hints</span>.ai_flags = Number L;\n  *(_QWORD *)&<span class=\"supfact\">hints</span>.ai_socktype = Number L;\n  *(_QWORD *)&<span class=\"supfact\">hints</span>.ai_addrlen = Number L;\n  <span class=\"supfact\">hints</span>.ai_addr = Number L;\n  <span class=\"supfact\">hints</span>.ai_canonname = Number L;\n  <span class=\"supfact\">hints</span>.ai_next = Number L;\n  sockfd = Number;\n  if (asprintf(&service, String, (unsigned int)port) >= Number) {\n    n = getaddrinfo(server_name, service, &<span class=\"supfact\">hints</span>, &res);\n    if (n >= Number) {\n      for (t = res; t; t = t->ai_next) {\n        sockfd = socket(t->ai_family, t->ai_socktype, t->ai_protocol);\n        if (sockfd >= Number) {\n          if (!connect(sockfd, t->ai_addr, t->ai_addrlen))\n            break;\n          close(sockfd);\n          sockfd = Number;\n        }\n      }\n      freeaddrinfo(res);\n      free(service);\n      if (sockfd >= Number) {\n        result = sockfd;\n      } else {\n        fprintf(stderr, String, server_name, (unsigned int)port);\n        result = Number;\n      }\n    } else {\n      v3 = gai_strerror(n);\n      fprintf(stderr, String, v3, server_name, (unsigned int)port);\n      free(service);\n      result = Number;\n    }\n  } else {\n    fwrite(String, Number, Number, stderr);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "req", "type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }", "pred_name": "hints", "ref_name": "hints", "ref_type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }"}], "body_in_train": false}, {"repo_owner": "jtsiomb", "repo_name": "colcycle", "path": "jtsiomb/colcycle/d9362ea3d82426ab93b1b8b27da6c7f5b4f6d376cb17ee7819c565b10c3a21c8", "path_in_repo": "jtsiomb/colcycle//colcycle", "objdump": "00000000004024f2 <file_is_lbm>:\n  4024f2:\t55                   \tpush   %rbp\n  4024f3:\t48 89 e5             \tmov    %rsp,%rbp\n  4024f6:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4024fa:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4024fe:\teb 7f                \tjmp    40257f <file_is_lbm+0x8d>\n  402500:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  402503:\t3d 4d 52 4f 46       \tcmp    $0x464f524d,%eax\n  402508:\t74 14                \tje     40251e <file_is_lbm+0x2c>\n  40250a:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40250d:\t3d 20 54 41 43       \tcmp    $0x43415420,%eax\n  402512:\t74 0a                \tje     40251e <file_is_lbm+0x2c>\n  402514:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  402517:\t3d 54 53 49 4c       \tcmp    $0x4c495354,%eax\n  40251c:\t75 48                \tjne    402566 <file_is_lbm+0x74>\n  40251e:\t48 8d 55 fc          \tlea    -0x4(%rbp),%rdx\n  402522:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402526:\t48 89 d6             \tmov    %rdx,%rsi\n  402529:\t48 89 c7             \tmov    %rax,%rdi\n  40252c:\te8 18 0f 00 00       \tcallq  403449 <read32>\n  402531:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  402534:\t74 67                \tje     40259d <file_is_lbm+0xab>\n  402536:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402539:\t3d 4d 42 4c 49       \tcmp    $0x494c424d,%eax\n  40253e:\t74 0a                \tje     40254a <file_is_lbm+0x58>\n  402540:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  402543:\t3d 20 4d 42 50       \tcmp    $0x50424d20,%eax\n  402548:\t75 13                \tjne    40255d <file_is_lbm+0x6b>\n  40254a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40254e:\t48 89 c7             \tmov    %rax,%rdi\n  402551:\te8 fa fc ff ff       \tcallq  402250 <rewind@plt>\n  402556:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40255b:\teb 5c                \tjmp    4025b9 <file_is_lbm+0xc7>\n  40255d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  402560:\t83 e8 04             \tsub    $0x4,%eax\n  402563:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  402566:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  402569:\t89 c1                \tmov    %eax,%ecx\n  40256b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40256f:\tba 01 00 00 00       \tmov    $0x1,%edx\n  402574:\t48 89 ce             \tmov    %rcx,%rsi\n  402577:\t48 89 c7             \tmov    %rax,%rdi\n  40257a:\te8 11 fb ff ff       \tcallq  402090 <fseek@plt>\n  40257f:\t48 8d 55 f4          \tlea    -0xc(%rbp),%rdx\n  402583:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  402587:\t48 89 d6             \tmov    %rdx,%rsi\n  40258a:\t48 89 c7             \tmov    %rax,%rdi\n  40258d:\te8 b2 01 00 00       \tcallq  402744 <read_header>\n  402592:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  402595:\t0f 85 65 ff ff ff    \tjne    402500 <file_is_lbm+0xe>\n  40259b:\teb 01                \tjmp    40259e <file_is_lbm+0xac>\n  40259d:\t90                   \tnop\n  40259e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4025a2:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4025a7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4025ac:\t48 89 c7             \tmov    %rax,%rdi\n  4025af:\te8 dc fa ff ff       \tcallq  402090 <fseek@plt>\n  4025b4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4025b9:\tc9                   \tleaveq \n  4025ba:\tc3                   \tretq   ", "code_s": "__int64 __fastcall file_is_lbm(FILE *a1) {\n  int i;\n  int <span class=\"supfact\">v3</span>;\n  __int64 off;\n  for (i = read_header(a1, &<span class=\"supfact\">v3</span>); i != Number;\n       i = read_header(a1, &<span class=\"supfact\">v3</span>)) {\n    if (<span class=\"supfact\">v3</span> == Number || <span class=\"supfact\">v3</span> == Number ||\n        <span class=\"supfact\">v3</span> == Number) {\n      if ((unsigned int)read32(a1, (char *)&off + Number) == Number)\n        break;\n      if (HIDWORD(off) == Number || HIDWORD(off) == Number) {\n        rewind(a1);\n        return Number L;\n      }\n      LODWORD(off) = off - Number;\n    }\n    fseek(a1, (unsigned int)off, Number);\n  }\n  fseek(a1, Number L, Number);\n  return Number L;\n}", "code_t": "int __cdecl file_is_lbm(FILE *fp) {\n  chdr <span class=\"supfact\">hdr</span>;\n  uint32_t type;\n  while (read_header(fp, &<span class=\"supfact\">hdr</span>) != Number) {\n    if (<span class=\"supfact\">hdr</span>.id == Number || <span class=\"supfact\">hdr</span>.id == Number ||\n        <span class=\"supfact\">hdr</span>.id == Number) {\n      if (read32(fp, &type) == Number)\n        break;\n      if (type == Number || type == Number) {\n        rewind(fp);\n        return Number;\n      }\n      <span class=\"supfact\">hdr</span>.size -= Number;\n    }\n    fseek(fp, <span class=\"supfact\">hdr</span>.size, Number);\n  }\n  fseek(fp, Number L, Number);\n  return Number;\n}", "var": [{"name": "v3", "type": "int", "pred_name": "__unk__", "ref_name": "hdr", "ref_type": "struct chdr { uint32_t id; uint32_t size; }"}], "body_in_train": false}, {"repo_owner": "eerimoq", "repo_name": "pumbaa", "path": "eerimoq/pumbaa/9e7879d21d487a1a1a720f1fe540487b3adac6cf77d0f194d5b1d0d9bf7b09c2", "path_in_repo": "eerimoq/pumbaa/simba/tst/oam/upgrade/kermit/build/linux/kermit_suite.out", "objdump": "000000000041e07d <fat16_dir_open>:\n  41e07d:\t55                   \tpush   %rbp\n  41e07e:\t48 89 e5             \tmov    %rsp,%rbp\n  41e081:\t48 83 ec 60          \tsub    $0x60,%rsp\n  41e085:\te8 c6 40 fe ff       \tcallq  402150 <mcount@plt>\n  41e08a:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  41e08e:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n  41e092:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n  41e096:\t89 4d a4             \tmov    %ecx,-0x5c(%rbp)\n  41e099:\t48 8b 05 c0 e6 0a 00 \tmov    0xae6c0(%rip),%rax        # 4cc760 <__gcov0.fat16_dir_open>\n  41e0a0:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e0a4:\t48 89 05 b5 e6 0a 00 \tmov    %rax,0xae6b5(%rip)        # 4cc760 <__gcov0.fat16_dir_open>\n  41e0ab:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n  41e0b0:\t75 41                \tjne    41e0f3 <fat16_dir_open+0x76>\n  41e0b2:\t48 8b 05 af e6 0a 00 \tmov    0xae6af(%rip),%rax        # 4cc768 <__gcov0.fat16_dir_open+0x8>\n  41e0b9:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e0bd:\t48 89 05 a4 e6 0a 00 \tmov    %rax,0xae6a4(%rip)        # 4cc768 <__gcov0.fat16_dir_open+0x8>\n  41e0c4:\tbf 08 0c 45 00       \tmov    $0x450c08,%edi\n  41e0c9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41e0ce:\te8 54 52 01 00       \tcallq  433327 <std_printf>\n  41e0d3:\t48 8b 05 96 e6 0a 00 \tmov    0xae696(%rip),%rax        # 4cc770 <__gcov0.fat16_dir_open+0x10>\n  41e0da:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e0de:\t48 89 05 8b e6 0a 00 \tmov    %rax,0xae68b(%rip)        # 4cc770 <__gcov0.fat16_dir_open+0x10>\n  41e0e5:\t48 8b 05 b4 39 06 00 \tmov    0x639b4(%rip),%rax        # 481aa0 <sys>\n  41e0ec:\tbf 16 00 00 00       \tmov    $0x16,%edi\n  41e0f1:\tff d0                \tcallq  *%rax\n  41e0f3:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n  41e0f8:\t75 41                \tjne    41e13b <fat16_dir_open+0xbe>\n  41e0fa:\t48 8b 05 77 e6 0a 00 \tmov    0xae677(%rip),%rax        # 4cc778 <__gcov0.fat16_dir_open+0x18>\n  41e101:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e105:\t48 89 05 6c e6 0a 00 \tmov    %rax,0xae66c(%rip)        # 4cc778 <__gcov0.fat16_dir_open+0x18>\n  41e10c:\tbf 58 0c 45 00       \tmov    $0x450c58,%edi\n  41e111:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41e116:\te8 0c 52 01 00       \tcallq  433327 <std_printf>\n  41e11b:\t48 8b 05 5e e6 0a 00 \tmov    0xae65e(%rip),%rax        # 4cc780 <__gcov0.fat16_dir_open+0x20>\n  41e122:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e126:\t48 89 05 53 e6 0a 00 \tmov    %rax,0xae653(%rip)        # 4cc780 <__gcov0.fat16_dir_open+0x20>\n  41e12d:\t48 8b 05 6c 39 06 00 \tmov    0x6396c(%rip),%rax        # 481aa0 <sys>\n  41e134:\tbf 16 00 00 00       \tmov    $0x16,%edi\n  41e139:\tff d0                \tcallq  *%rax\n  41e13b:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  41e13f:\t48 83 c0 08          \tadd    $0x8,%rax\n  41e143:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  41e147:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  41e14b:\tbe a9 0c 45 00       \tmov    $0x450ca9,%esi\n  41e150:\t48 89 c7             \tmov    %rax,%rdi\n  41e153:\te8 28 41 fe ff       \tcallq  402280 <strcmp@plt>\n  41e158:\t85 c0                \ttest   %eax,%eax\n  41e15a:\t75 4c                \tjne    41e1a8 <fat16_dir_open+0x12b>\n  41e15c:\t48 8b 05 25 e6 0a 00 \tmov    0xae625(%rip),%rax        # 4cc788 <__gcov0.fat16_dir_open+0x28>\n  41e163:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e167:\t48 89 05 1a e6 0a 00 \tmov    %rax,0xae61a(%rip)        # 4cc788 <__gcov0.fat16_dir_open+0x28>\n  41e16e:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  41e171:\t83 e0 01             \tand    $0x1,%eax\n  41e174:\t85 c0                \ttest   %eax,%eax\n  41e176:\t74 30                \tje     41e1a8 <fat16_dir_open+0x12b>\n  41e178:\t48 8b 05 11 e6 0a 00 \tmov    0xae611(%rip),%rax        # 4cc790 <__gcov0.fat16_dir_open+0x30>\n  41e17f:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e183:\t48 89 05 06 e6 0a 00 \tmov    %rax,0xae606(%rip)        # 4cc790 <__gcov0.fat16_dir_open+0x30>\n  41e18a:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  41e18e:\t66 c7 00 00 00       \tmovw   $0x0,(%rax)\n  41e193:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41e197:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  41e19b:\t48 89 10             \tmov    %rdx,(%rax)\n  41e19e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41e1a3:\te9 85 01 00 00       \tjmpq   41e32d <fat16_dir_open+0x2b0>\n  41e1a8:\t8b 4d a4             \tmov    -0x5c(%rbp),%ecx\n  41e1ab:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n  41e1af:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n  41e1b3:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  41e1b7:\t41 b8 10 00 00 00    \tmov    $0x10,%r8d\n  41e1bd:\t48 89 c7             \tmov    %rax,%rdi\n  41e1c0:\te8 ec ea ff ff       \tcallq  41ccb1 <file_open>\n  41e1c5:\t48 8b 15 cc e5 0a 00 \tmov    0xae5cc(%rip),%rdx        # 4cc798 <__gcov0.fat16_dir_open+0x38>\n  41e1cc:\t48 83 c2 01          \tadd    $0x1,%rdx\n  41e1d0:\t48 89 15 c1 e5 0a 00 \tmov    %rdx,0xae5c1(%rip)        # 4cc798 <__gcov0.fat16_dir_open+0x38>\n  41e1d7:\t85 c0                \ttest   %eax,%eax\n  41e1d9:\t74 1c                \tje     41e1f7 <fat16_dir_open+0x17a>\n  41e1db:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41e1e0:\t48 8b 15 b9 e5 0a 00 \tmov    0xae5b9(%rip),%rdx        # 4cc7a0 <__gcov0.fat16_dir_open+0x40>\n  41e1e7:\t48 83 c2 01          \tadd    $0x1,%rdx\n  41e1eb:\t48 89 15 ae e5 0a 00 \tmov    %rdx,0xae5ae(%rip)        # 4cc7a0 <__gcov0.fat16_dir_open+0x40>\n  41e1f2:\te9 36 01 00 00       \tjmpq   41e32d <fat16_dir_open+0x2b0>\n  41e1f7:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  41e1fb:\t66 c7 00 ff ff       \tmovw   $0xffff,(%rax)\n  41e200:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  41e203:\t83 e0 12             \tand    $0x12,%eax\n  41e206:\t83 f8 12             \tcmp    $0x12,%eax\n  41e209:\t0f 85 07 01 00 00    \tjne    41e316 <fat16_dir_open+0x299>\n  41e20f:\t48 8b 05 92 e5 0a 00 \tmov    0xae592(%rip),%rax        # 4cc7a8 <__gcov0.fat16_dir_open+0x48>\n  41e216:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e21a:\t48 89 05 87 e5 0a 00 \tmov    %rax,0xae587(%rip)        # 4cc7a8 <__gcov0.fat16_dir_open+0x48>\n  41e221:\t48 8d 45 ed          \tlea    -0x13(%rbp),%rax\n  41e225:\tba 0b 00 00 00       \tmov    $0xb,%edx\n  41e22a:\tbe 20 00 00 00       \tmov    $0x20,%esi\n  41e22f:\t48 89 c7             \tmov    %rax,%rdi\n  41e232:\te8 b9 3e fe ff       \tcallq  4020f0 <memset@plt>\n  41e237:\tc6 45 ed 2e          \tmovb   $0x2e,-0x13(%rbp)\n  41e23b:\t48 8d 4d ed          \tlea    -0x13(%rbp),%rcx\n  41e23f:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  41e243:\tba 10 00 00 00       \tmov    $0x10,%edx\n  41e248:\t48 89 ce             \tmov    %rcx,%rsi\n  41e24b:\t48 89 c7             \tmov    %rax,%rdi\n  41e24e:\te8 4f dc ff ff       \tcallq  41bea2 <dir_init>\n  41e253:\t48 8b 05 56 e5 0a 00 \tmov    0xae556(%rip),%rax        # 4cc7b0 <__gcov0.fat16_dir_open+0x50>\n  41e25a:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e25e:\t48 89 05 4b e5 0a 00 \tmov    %rax,0xae54b(%rip)        # 4cc7b0 <__gcov0.fat16_dir_open+0x50>\n  41e265:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n  41e269:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41e26d:\tba 20 00 00 00       \tmov    $0x20,%edx\n  41e272:\t48 89 ce             \tmov    %rcx,%rsi\n  41e275:\t48 89 c7             \tmov    %rax,%rdi\n  41e278:\te8 70 f2 ff ff       \tcallq  41d4ed <fat16_file_write>\n  41e27d:\t48 83 f8 20          \tcmp    $0x20,%rax\n  41e281:\t74 1c                \tje     41e29f <fat16_dir_open+0x222>\n  41e283:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41e288:\t48 8b 15 31 e5 0a 00 \tmov    0xae531(%rip),%rdx        # 4cc7c0 <__gcov0.fat16_dir_open+0x60>\n  41e28f:\t48 83 c2 01          \tadd    $0x1,%rdx\n  41e293:\t48 89 15 26 e5 0a 00 \tmov    %rdx,0xae526(%rip)        # 4cc7c0 <__gcov0.fat16_dir_open+0x60>\n  41e29a:\te9 8e 00 00 00       \tjmpq   41e32d <fat16_dir_open+0x2b0>\n  41e29f:\t48 8b 05 12 e5 0a 00 \tmov    0xae512(%rip),%rax        # 4cc7b8 <__gcov0.fat16_dir_open+0x58>\n  41e2a6:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e2aa:\t48 89 05 07 e5 0a 00 \tmov    %rax,0xae507(%rip)        # 4cc7b8 <__gcov0.fat16_dir_open+0x58>\n  41e2b1:\tc6 45 ee 2e          \tmovb   $0x2e,-0x12(%rbp)\n  41e2b5:\t48 8d 4d ed          \tlea    -0x13(%rbp),%rcx\n  41e2b9:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  41e2bd:\tba 10 00 00 00       \tmov    $0x10,%edx\n  41e2c2:\t48 89 ce             \tmov    %rcx,%rsi\n  41e2c5:\t48 89 c7             \tmov    %rax,%rdi\n  41e2c8:\te8 d5 db ff ff       \tcallq  41bea2 <dir_init>\n  41e2cd:\t48 8b 05 f4 e4 0a 00 \tmov    0xae4f4(%rip),%rax        # 4cc7c8 <__gcov0.fat16_dir_open+0x68>\n  41e2d4:\t48 83 c0 01          \tadd    $0x1,%rax\n  41e2d8:\t48 89 05 e9 e4 0a 00 \tmov    %rax,0xae4e9(%rip)        # 4cc7c8 <__gcov0.fat16_dir_open+0x68>\n  41e2df:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n  41e2e3:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41e2e7:\tba 20 00 00 00       \tmov    $0x20,%edx\n  41e2ec:\t48 89 ce             \tmov    %rcx,%rsi\n  41e2ef:\t48 89 c7             \tmov    %rax,%rdi\n  41e2f2:\te8 f6 f1 ff ff       \tcallq  41d4ed <fat16_file_write>\n  41e2f7:\t48 83 f8 20          \tcmp    $0x20,%rax\n  41e2fb:\t74 19                \tje     41e316 <fat16_dir_open+0x299>\n  41e2fd:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  41e302:\t48 8b 15 c7 e4 0a 00 \tmov    0xae4c7(%rip),%rdx        # 4cc7d0 <__gcov0.fat16_dir_open+0x70>\n  41e309:\t48 83 c2 01          \tadd    $0x1,%rdx\n  41e30d:\t48 89 15 bc e4 0a 00 \tmov    %rdx,0xae4bc(%rip)        # 4cc7d0 <__gcov0.fat16_dir_open+0x70>\n  41e314:\teb 17                \tjmp    41e32d <fat16_dir_open+0x2b0>\n  41e316:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41e31b:\t48 8b 15 b6 e4 0a 00 \tmov    0xae4b6(%rip),%rdx        # 4cc7d8 <__gcov0.fat16_dir_open+0x78>\n  41e322:\t48 83 c2 01          \tadd    $0x1,%rdx\n  41e326:\t48 89 15 ab e4 0a 00 \tmov    %rdx,0xae4ab(%rip)        # 4cc7d8 <__gcov0.fat16_dir_open+0x78>\n  41e32d:\tc9                   \tleaveq \n  41e32e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall fat16_dir_open(__int64 a1, _WORD *a2, char *a3, char a4,\n                                  int a5, int a6) {\n  __int64 result;\n  int v7;\n  int v8;\n  int v9;\n  int v10;\n  int v11;\n  char <span class=\"supfact\">v14</span>[Number];\n  char s[Number];\n  __int64 *v16;\n  ++_gcov0_fat16_dir_open;\n  if (!a2) {\n    ++qword_4CC768;\n    std_printf((unsigned int)String, Number, (_DWORD)a3, a4, a5, a6);\n    ++qword_4CC770;\n    sys(Number L);\n  }\n  if (!a3) {\n    ++qword_4CC778;\n    std_printf((unsigned int)String, (_DWORD)a2, Number, a4, a5, a6);\n    ++qword_4CC780;\n    sys(Number L);\n  }\n  v16 = (__int64 *)(a2 + Number);\n  if (!strcmp(a3, String)) {\n    ++qword_4CC788;\n    if ((a4 & Number) != Number) {\n      ++qword_4CC790;\n      *a2 = Number;\n      *v16 = a1;\n      return Number L;\n    }\n  }\n  v7 = file_open(a1, (__int64)v16, a3, a4, Number);\n  ++qword_4CC798;\n  if (v7) {\n    result = Number;\n    ++qword_4CC7A0;\n    return result;\n  }\n  *a2 = Number;\n  if ((a4 & Number) != Number)\n    goto LABEL_15;\n  ++qword_4CC7A8;\n  memset(s, Number, sizeof(s));\n  s[Number] = Number;\n  dir_init((__int64)<span class=\"supfact\">v14</span>, s, Number);\n  ++qword_4CC7B0;\n  if (fat16_file_write((__int64)v16, <span class=\"supfact\">v14</span>, Number,\n                       (int)<span class=\"supfact\">v14</span>, v8, v9) != Number) {\n    result = Number;\n    ++qword_4CC7C0;\n    return result;\n  }\n  ++qword_4CC7B8;\n  s[Number] = Number;\n  dir_init((__int64)<span class=\"supfact\">v14</span>, s, Number);\n  ++qword_4CC7C8;\n  if (fat16_file_write((__int64)v16, <span class=\"supfact\">v14</span>, Number,\n                       (int)<span class=\"supfact\">v14</span>, v10, v11) == Number) {\n  LABEL_15:\n    result = Number L;\n    ++qword_4CC7D8;\n  } else {\n    result = Number;\n    ++qword_4CC7D0;\n  }\n  return result;\n}", "code_t": "int __cdecl fat16_dir_open(fat16_t *self_p, fat16_dir_t *dir_p,\n                           const char *path_p, int oflag) {\n  int result;\n  int v5;\n  dir_t <span class=\"supfact\">dir</span>;\n  uint8_t dname[Number];\n  fat16_file_t *file_p;\n  ++_gcov0_fat16_dir_open;\n  if (!dir_p) {\n    ++qword_4CC768;\n    std_printf(String);\n    ++qword_4CC770;\n    ((void(__fastcall *)(int))sys.on_fatal_callback)(Number);\n  }\n  if (!path_p) {\n    ++qword_4CC778;\n    std_printf(String);\n    ++qword_4CC780;\n    ((void(__fastcall *)(int))sys.on_fatal_callback)(Number);\n  }\n  file_p = &dir_p->file;\n  if (!strcmp(path_p, String)) {\n    ++qword_4CC788;\n    if ((oflag & Number) != Number) {\n      ++qword_4CC790;\n      dir_p->root_index = Number;\n      file_p->fat16_p = self_p;\n      return Number;\n    }\n  }\n  v5 = file_open(self_p, file_p, path_p, oflag, Number);\n  ++qword_4CC798;\n  if (v5) {\n    result = Number;\n    ++qword_4CC7A0;\n    return result;\n  }\n  dir_p->root_index = Number;\n  if ((oflag & Number) != Number)\n    goto LABEL_15;\n  ++qword_4CC7A8;\n  memset(dname, Number, sizeof(dname));\n  dname[Number] = Number;\n  dir_init(&<span class=\"supfact\">dir</span>, dname, Number);\n  ++qword_4CC7B0;\n  if (fat16_file_write(file_p, &<span class=\"supfact\">dir</span>, Number) != Number) {\n    result = Number;\n    ++qword_4CC7C0;\n    return result;\n  }\n  ++qword_4CC7B8;\n  dname[Number] = Number;\n  dir_init(&<span class=\"supfact\">dir</span>, dname, Number);\n  ++qword_4CC7C8;\n  if (fat16_file_write(file_p, &<span class=\"supfact\">dir</span>, Number) == Number) {\n  LABEL_15:\n    result = Number;\n    ++qword_4CC7D8;\n  } else {\n    result = Number;\n    ++qword_4CC7D0;\n  }\n  return result;\n}", "var": [{"name": "v14", "type": "struct dir_t { uint8_t[11] name; uint8_t attributes; uint8_t reserved1; uint8_t creation_time_tenths; uint16_t creation_time; uint16_t creation_date; uint16_t last_access_date; uint16_t first_cluster_high; uint16_t last_write_time; uint16_t last_write_date; uint16_t first_cluster_low; uint32_t file_size; }", "pred_name": "dir", "ref_name": "dir", "ref_type": "struct dir_t { uint8_t[11] name; uint8_t attributes; uint8_t reserved1; uint8_t creation_time_tenths; uint16_t creation_time; uint16_t creation_date; uint16_t last_access_date; uint16_t first_cluster_high; uint16_t last_write_time; uint16_t last_write_date; uint16_t first_cluster_low; uint32_t file_size; }"}], "body_in_train": false}, {"repo_owner": "xurubin", "repo_name": "wl530g-mini", "path": "xurubin/wl530g-mini/cbf1f1aaf82fc3d58684c8f62d8ad5cb42060d9d3b81017e222910243ad073f0", "path_in_repo": "xurubin/wl530g-mini/Src/uClinux-dist/user/wget/src/wget", "objdump": "000000000041c73a <touch>:\n  41c73a:\t55                   \tpush   %rbp\n  41c73b:\t48 89 e5             \tmov    %rsp,%rbp\n  41c73e:\t48 83 ec 20          \tsub    $0x20,%rsp\n  41c742:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  41c746:\t48 89 75 e0          \tmov    %rsi,-0x20(%rbp)\n  41c74a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  41c74e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  41c752:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  41c756:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  41c75a:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  41c75e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41c762:\t48 89 d6             \tmov    %rdx,%rsi\n  41c765:\t48 89 c7             \tmov    %rax,%rdi\n  41c768:\te8 d3 58 fe ff       \tcallq  402040 <utime@plt>\n  41c76d:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  41c770:\t75 2f                \tjne    41c7a1 <touch+0x67>\n  41c772:\te8 29 59 fe ff       \tcallq  4020a0 <__errno_location@plt>\n  41c777:\t8b 00                \tmov    (%rax),%eax\n  41c779:\t89 c7                \tmov    %eax,%edi\n  41c77b:\te8 20 5e fe ff       \tcallq  4025a0 <strerror@plt>\n  41c780:\t48 89 c2             \tmov    %rax,%rdx\n  41c783:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  41c787:\t48 89 d1             \tmov    %rdx,%rcx\n  41c78a:\t48 89 c2             \tmov    %rax,%rdx\n  41c78d:\tbe d9 2d 42 00       \tmov    $0x422dd9,%esi\n  41c792:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  41c797:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  41c79c:\te8 f8 5f ff ff       \tcallq  412799 <logprintf>\n  41c7a1:\t90                   \tnop\n  41c7a2:\tc9                   \tleaveq \n  41c7a3:\tc3                   \tretq   ", "code_s": "int __fastcall touch(const char *a1, __time_t a2) {\n  int result;\n  int *v3;\n  char *v4;\n  __int64 v5;\n  __int64 v6;\n  struct utimbuf <span class=\"supfact\">file_times</span>;\n  <span class=\"supfact\">file_times</span>.modtime = a2;\n  <span class=\"supfact\">file_times</span>.actime = a2;\n  result = utime(a1, &<span class=\"supfact\">file_times</span>);\n  if (result == Number) {\n    v3 = __errno_location();\n    v4 = strerror(*v3);\n    result = logprintf(Number, String, (__int64)a1, (__int64)v4, v5, v6, a2);\n  }\n  return result;\n}", "code_t": "void __cdecl touch(const char *file, time_t tm) {\n  int *v2;\n  char *v3;\n  utimbuf <span class=\"supfact\">times</span>;\n  <span class=\"supfact\">times</span>.modtime = tm;\n  <span class=\"supfact\">times</span>.actime = tm;\n  if (utime(file, &<span class=\"supfact\">times</span>) == Number) {\n    v2 = __errno_location();\n    v3 = strerror(*v2);\n    logprintf(LOG_NOTQUIET, String, file, v3);\n  }\n}", "var": [{"name": "file_times", "type": "struct utimbuf { __time_t actime; __time_t modtime; }", "pred_name": "settime", "ref_name": "times", "ref_type": "struct utimbuf { __time_t actime; __time_t modtime; }"}], "body_in_train": false}, {"repo_owner": "jdkoftinoff", "repo_name": "mb-linux-msli", "path": "jdkoftinoff/mb-linux-msli/f45be285a1c68e70686b7ca295707f859e9f7937feb245a0a305c309e7486edf", "path_in_repo": "jdkoftinoff/mb-linux-msli/uClinux-dist/user/mgetty/voice/pvftools/pvfnoise.o", "objdump": "0000000000000181 <main>:\n 181:\t55                   \tpush   %rbp\n 182:\t48 89 e5             \tmov    %rsp,%rbp\n 185:\t53                   \tpush   %rbx\n 186:\t48 83 ec 68          \tsub    $0x68,%rsp\n 18a:\t89 7d 9c             \tmov    %edi,-0x64(%rbp)\n 18d:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n 191:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 198 <main+0x17>\n 198:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 19c:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n 1a3:\t00 \n 1a4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ab <main+0x2a>\n 1ab:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1b2 <main+0x31>\n 1b2:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n 1b6:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n 1ba:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c1 <main+0x40>\n 1c1:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1c8 <main+0x47>\n 1c8:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n 1cc:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n 1d0:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # 1d8 <main+0x57>\n 1d7:\t00 \n 1d8:\tf2 0f 11 45 d8       \tmovsd  %xmm0,-0x28(%rbp)\n 1dd:\te8 00 00 00 00       \tcallq  1e2 <main+0x61>\n 1e2:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1e6:\t48 8b 00             \tmov    (%rax),%rax\n 1e9:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1f0 <main+0x6f>\n 1f0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1f5:\te8 00 00 00 00       \tcallq  1fa <main+0x79>\n 1fa:\t89 c3                \tmov    %eax,%ebx\n 1fc:\te8 00 00 00 00       \tcallq  201 <main+0x80>\n 201:\t09 d8                \tor     %ebx,%eax\n 203:\t89 c7                \tmov    %eax,%edi\n 205:\te8 00 00 00 00       \tcallq  20a <main+0x89>\n 20a:\teb 77                \tjmp    283 <main+0x102>\n 20c:\t8b 45 d0             \tmov    -0x30(%rbp),%eax\n 20f:\t83 e8 31             \tsub    $0x31,%eax\n 212:\t83 f8 42             \tcmp    $0x42,%eax\n 215:\t77 67                \tja     27e <main+0xfd>\n 217:\t89 c0                \tmov    %eax,%eax\n 219:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n 220:\t00 \n 221:\tff e0                \tjmpq   *%rax\n 223:\tc7 45 a0 01 00 00 00 \tmovl   $0x1,-0x60(%rbp)\n 22a:\teb 57                \tjmp    283 <main+0x102>\n 22c:\tc7 45 a0 00 00 00 00 \tmovl   $0x0,-0x60(%rbp)\n 233:\teb 4e                \tjmp    283 <main+0x102>\n 235:\tc7 45 ac 08 00 00 00 \tmovl   $0x8,-0x54(%rbp)\n 23c:\teb 45                \tjmp    283 <main+0x102>\n 23e:\tc7 45 ac 10 00 00 00 \tmovl   $0x10,-0x54(%rbp)\n 245:\teb 3c                \tjmp    283 <main+0x102>\n 247:\tc7 45 ac 20 00 00 00 \tmovl   $0x20,-0x54(%rbp)\n 24e:\teb 33                \tjmp    283 <main+0x102>\n 250:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 257 <main+0xd6>\n 257:\t48 89 c7             \tmov    %rax,%rdi\n 25a:\te8 00 00 00 00       \tcallq  25f <main+0xde>\n 25f:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n 264:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 268:\teb 19                \tjmp    283 <main+0x102>\n 26a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 271 <main+0xf0>\n 271:\t48 89 c7             \tmov    %rax,%rdi\n 274:\te8 00 00 00 00       \tcallq  279 <main+0xf8>\n 279:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n 27c:\teb 05                \tjmp    283 <main+0x102>\n 27e:\te8 7d fd ff ff       \tcallq  0 <usage>\n 283:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n 287:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n 28a:\tba 00 00 00 00       \tmov    $0x0,%edx\n 28f:\t48 89 ce             \tmov    %rcx,%rsi\n 292:\t89 c7                \tmov    %eax,%edi\n 294:\te8 00 00 00 00       \tcallq  299 <main+0x118>\n 299:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n 29c:\t83 7d d0 ff          \tcmpl   $0xffffffff,-0x30(%rbp)\n 2a0:\t0f 85 66 ff ff ff    \tjne    20c <main+0x8b>\n 2a6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2ac <main+0x12b>\n 2ac:\t39 45 9c             \tcmp    %eax,-0x64(%rbp)\n 2af:\t7e 68                \tjle    319 <main+0x198>\n 2b1:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 2b7 <main+0x136>\n 2b7:\t48 98                \tcltq   \n 2b9:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n 2c0:\t00 \n 2c1:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 2c5:\t48 01 d0             \tadd    %rdx,%rax\n 2c8:\t48 8b 00             \tmov    (%rax),%rax\n 2cb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 2cf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 2d3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 2d8:\t48 89 c7             \tmov    %rax,%rdi\n 2db:\te8 00 00 00 00       \tcallq  2e0 <main+0x15f>\n 2e0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 2e4:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n 2e9:\t75 2e                \tjne    319 <main+0x198>\n 2eb:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 2f2 <main+0x171>\n 2f2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2f9 <main+0x178>\n 2f9:\t48 8b 4d e0          \tmov    -0x20(%rbp),%rcx\n 2fd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 302:\t48 89 c7             \tmov    %rax,%rdi\n 305:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 30a:\te8 00 00 00 00       \tcallq  30f <main+0x18e>\n 30f:\tbf ff ff ff ff       \tmov    $0xffffffff,%edi\n 314:\te8 00 00 00 00       \tcallq  319 <main+0x198>\n 319:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n 31d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 321:\t48 89 d6             \tmov    %rdx,%rsi\n 324:\t48 89 c7             \tmov    %rax,%rdi\n 327:\te8 00 00 00 00       \tcallq  32c <main+0x1ab>\n 32c:\t85 c0                \ttest   %eax,%eax\n 32e:\t74 2f                \tje     35f <main+0x1de>\n 330:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 334:\t48 89 c7             \tmov    %rax,%rdi\n 337:\te8 00 00 00 00       \tcallq  33c <main+0x1bb>\n 33c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 343 <main+0x1c2>\n 343:\t48 39 45 e8          \tcmp    %rax,-0x18(%rbp)\n 347:\t74 0c                \tje     355 <main+0x1d4>\n 349:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 34d:\t48 89 c7             \tmov    %rax,%rdi\n 350:\te8 00 00 00 00       \tcallq  355 <main+0x1d4>\n 355:\tbf ff ff ff ff       \tmov    $0xffffffff,%edi\n 35a:\te8 00 00 00 00       \tcallq  35f <main+0x1de>\n 35f:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n 362:\tf2 0f 2a c0          \tcvtsi2sd %eax,%xmm0\n 366:\tf2 0f 59 45 d8       \tmulsd  -0x28(%rbp),%xmm0\n 36b:\tf2 0f 2c c0          \tcvttsd2si %xmm0,%eax\n 36f:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n 372:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n 379:\teb 2b                \tjmp    3a6 <main+0x225>\n 37b:\t48 8b 5d b8          \tmov    -0x48(%rbp),%rbx\n 37f:\te8 00 00 00 00       \tcallq  384 <main+0x203>\n 384:\t99                   \tcltd   \n 385:\tc1 ea 08             \tshr    $0x8,%edx\n 388:\t01 d0                \tadd    %edx,%eax\n 38a:\t25 ff ff ff 00       \tand    $0xffffff,%eax\n 38f:\t29 d0                \tsub    %edx,%eax\n 391:\t8d 90 00 00 80 ff    \tlea    -0x800000(%rax),%edx\n 397:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 39b:\t89 d6                \tmov    %edx,%esi\n 39d:\t48 89 c7             \tmov    %rax,%rdi\n 3a0:\tff d3                \tcallq  *%rbx\n 3a2:\t83 45 d4 01          \taddl   $0x1,-0x2c(%rbp)\n 3a6:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 3a9:\t3b 45 cc             \tcmp    -0x34(%rbp),%eax\n 3ac:\t7c cd                \tjl     37b <main+0x1fa>\n 3ae:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 3b2:\t48 89 c7             \tmov    %rax,%rdi\n 3b5:\te8 00 00 00 00       \tcallq  3ba <main+0x239>\n 3ba:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 3bf:\te8 00 00 00 00       \tcallq  3c4 <main+0x243>\n", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  __int64 v3;\n  __int64 v4;\n  int v5;\n  __pid_t v6;\n  void(__fastcall * v7)(FILE *, _QWORD);\n  int v8;\n  int result;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 v11;\n  __int64 v12;\n  void(__fastcall * v13)(FILE *, _QWORD);\n  int v14;\n  int v15;\n  int i;\n  double v17;\n  char *filename;\n  FILE *stream;\n  stream = stdout;\n  filename = String;\n  v3 = init_pvf_header[Number];\n  <span class=\"supfact\">v10</span> = init_pvf_header[Number];\n  v11 = v3;\n  v4 = init_pvf_header[Number];\n  v12 = init_pvf_header[Number];\n  v13 = (void(__fastcall *)(FILE *, _QWORD))v4;\n  v17 = Number;\n  check_system();\n  program_name = (__int64)*argv;\n  v5 = time(Number L);\n  v6 = getpid();\n  srand(v5 | v6);\n  while (Number) {\n    v15 = getopt(argc, (char *const *)argv, String);\n    if (v15 == Number)\n      break;\n    switch (v15) {\n    case String:\n    case String:\n      HIDWORD(v11) = Number;\n      break;\n    case String:\n    case String:\n      HIDWORD(v11) = Number;\n      break;\n    case String:\n      HIDWORD(v11) = Number;\n      break;\n    case String:\n      v17 = atof(optarg);\n      break;\n    case String:\n      LODWORD(<span class=\"supfact\">v10</span>) = Number;\n      break;\n    case String:\n      LODWORD(<span class=\"supfact\">v10</span>) = Number;\n      break;\n    case String:\n      LODWORD(v11) = atoi(optarg);\n      break;\n    default:\n      usage();\n      return result;\n    }\n  }\n  if (argc > optind) {\n    filename = (char *)argv[optind];\n    stream = fopen(filename, String);\n    if (!stream) {\n      fprintf(stderr, String, (const char *)program_name, filename);\n      exit(Number);\n    }\n  }\n  if ((unsigned int)write_pvf_header(stream, &<span class=\"supfact\">v10</span>)) {\n    fclose(stream);\n    if (stream != stdout)\n      unlink(filename);\n    exit(Number);\n  }\n  v14 = (int)((double)(int)v11 * v17);\n  for (i = Number; i < v14; ++i) {\n    v7 = v13;\n    v8 = rand();\n    v7(stream, (unsigned int)(v8 % Number - Number));\n  }\n  fclose(stream);\n  exit(Number);\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  __int64 v3;\n  void (*v4)(FILE *, int);\n  int v5;\n  __pid_t v6;\n  void (*v7)(FILE *, int);\n  int v8;\n  int result;\n  pvf_header <span class=\"supfact\">header_out</span>;\n  int length;\n  int option;\n  int i;\n  double flength;\n  char *name_out;\n  FILE *fd_out;\n  fd_out = stdout;\n  name_out = String;\n  v3 = init_pvf_header[Number];\n  *(_QWORD *)&<span class=\"supfact\">header_out</span>.ascii = init_pvf_header[Number];\n  *(_QWORD *)&<span class=\"supfact\">header_out</span>.speed = v3;\n  v4 = (void (*)(FILE *, int))init_pvf_header[Number];\n  <span class=\"supfact\">header_out</span>.read_pvf_data =\n      (int (*)(FILE *))init_pvf_header[Number];\n  <span class=\"supfact\">header_out</span>.write_pvf_data = v4;\n  flength = Number;\n  check_system();\n  program_name = (__int64)*argv;\n  v5 = time(Number L);\n  v6 = getpid();\n  srand(v5 | v6);\n  while (Number) {\n    option = getopt(argc, (char *const *)argv, String);\n    if (option == Number)\n      break;\n    switch (option) {\n    case String:\n    case String:\n      <span class=\"supfact\">header_out</span>.nbits = Number;\n      break;\n    case String:\n    case String:\n      <span class=\"supfact\">header_out</span>.nbits = Number;\n      break;\n    case String:\n      <span class=\"supfact\">header_out</span>.nbits = Number;\n      break;\n    case String:\n      flength = atof(optarg);\n      break;\n    case String:\n      <span class=\"supfact\">header_out</span>.ascii = Number;\n      break;\n    case String:\n      <span class=\"supfact\">header_out</span>.ascii = Number;\n      break;\n    case String:\n      <span class=\"supfact\">header_out</span>.speed = atoi(optarg);\n      break;\n    default:\n      usage();\n      return result;\n    }\n  }\n  if (argc > optind) {\n    name_out = (char *)argv[optind];\n    fd_out = fopen(name_out, String);\n    if (!fd_out) {\n      fprintf(stderr, String, (const char *)program_name, name_out);\n      exit(Number);\n    }\n  }\n  if ((unsigned int)write_pvf_header(fd_out, &<span class=\"supfact\">header_out</span>)) {\n    fclose(fd_out);\n    if (fd_out != stdout)\n      unlink(name_out);\n    exit(Number);\n  }\n  length = (int)((double)<span class=\"supfact\">header_out</span>.speed * flength);\n  for (i = Number; i < length; ++i) {\n    v7 = <span class=\"supfact\">header_out</span>.write_pvf_data;\n    v8 = rand();\n    v7(fd_out, v8 % Number - Number);\n  }\n  fclose(fd_out);\n  exit(Number);\n}", "var": [{"name": "v10", "type": "struct pvf_header { int ascii; int channels; int speed; int nbits; int (*)(FILE *) read_pvf_data; void (*)(FILE *, int) write_pvf_data; }", "pred_name": "header_in", "ref_name": "header_out", "ref_type": "struct pvf_header { int ascii; int channels; int speed; int nbits; int (*)(FILE *) read_pvf_data; void (*)(FILE *, int) write_pvf_data; }"}], "body_in_train": false}, {"repo_owner": "tnbw", "repo_name": "multi1", "path": "tnbw/multi1/6105ce972e981ff0d61be3df29525ee162fe834db19349a2d24d75946d5524d1", "path_in_repo": "tnbw/multi1/tools/perf/builtin-stat.o", "objdump": "000000000000449e <print_metric_headers>:\n    449e:\t55                   \tpush   %rbp\n    449f:\t48 89 e5             \tmov    %rsp,%rbp\n    44a2:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n    44a9:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n    44b0:\t89 f0                \tmov    %esi,%eax\n    44b2:\t88 85 74 ff ff ff    \tmov    %al,-0x8c(%rbp)\n    44b8:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    44bf:\t00 00 \n    44c1:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    44c5:\t31 c0                \txor    %eax,%eax\n    44c7:\t48 c7 45 c0 00 00 00 \tmovq   $0x0,-0x40(%rbp)\n    44ce:\t00 \n    44cf:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n    44d6:\t00 \n    44d7:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n    44de:\t00 \n    44df:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    44e6:\t00 \n    44e7:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    44ee:\t00 \n    44ef:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    44f6:\t00 \n    44f7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 44fe <print_metric_headers+0x60>\n    44fe:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    4502:\t48 83 bd 78 ff ff ff \tcmpq   $0x0,-0x88(%rbp)\n    4509:\t00 \n    450a:\t74 19                \tje     4525 <print_metric_headers+0x87>\n    450c:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 4513 <print_metric_headers+0x75>\n    4513:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    451a:\t48 89 d6             \tmov    %rdx,%rsi\n    451d:\t48 89 c7             \tmov    %rax,%rdi\n    4520:\te8 00 00 00 00       \tcallq  4525 <print_metric_headers+0x87>\n    4525:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 452c <print_metric_headers+0x8e>\n    452c:\t83 f0 01             \txor    $0x1,%eax\n    452f:\t84 c0                \ttest   %al,%al\n    4531:\t74 3b                \tje     456e <print_metric_headers+0xd0>\n    4533:\t0f b6 85 74 ff ff ff \tmovzbl -0x8c(%rbp),%eax\n    453a:\t83 f0 01             \txor    $0x1,%eax\n    453d:\t84 c0                \ttest   %al,%al\n    453f:\t74 2d                \tje     456e <print_metric_headers+0xd0>\n    4541:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 4547 <print_metric_headers+0xa9>\n    4547:\t89 c0                \tmov    %eax,%eax\n    4549:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    4550:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4557 <print_metric_headers+0xb9>\n    4557:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    455c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4561:\t48 89 c7             \tmov    %rax,%rdi\n    4564:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4569:\te8 00 00 00 00       \tcallq  456e <print_metric_headers+0xd0>\n    456e:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 4575 <print_metric_headers+0xd7>\n    4575:\t84 c0                \ttest   %al,%al\n    4577:\t74 4a                \tje     45c3 <print_metric_headers+0x125>\n    4579:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 457f <print_metric_headers+0xe1>\n    457f:\t85 c0                \ttest   %eax,%eax\n    4581:\t74 1e                \tje     45a1 <print_metric_headers+0x103>\n    4583:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 458a <print_metric_headers+0xec>\n    458a:\t48 89 c1             \tmov    %rax,%rcx\n    458d:\tba 05 00 00 00       \tmov    $0x5,%edx\n    4592:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    4597:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    459c:\te8 00 00 00 00       \tcallq  45a1 <print_metric_headers+0x103>\n    45a1:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 45a8 <print_metric_headers+0x10a>\n    45a8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 45ae <print_metric_headers+0x110>\n    45ae:\t89 c0                \tmov    %eax,%eax\n    45b0:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    45b7:\t00 \n    45b8:\t48 89 d6             \tmov    %rdx,%rsi\n    45bb:\t48 89 c7             \tmov    %rax,%rdi\n    45be:\te8 00 00 00 00       \tcallq  45c3 <print_metric_headers+0x125>\n    45c3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 45ca <print_metric_headers+0x12c>\n    45ca:\t48 8b 00             \tmov    (%rax),%rax\n    45cd:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n    45d1:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n    45d5:\t48 89 45 88          \tmov    %rax,-0x78(%rbp)\n    45d9:\teb 58                \tjmp    4633 <print_metric_headers+0x195>\n    45db:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    45df:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    45e3:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    45e7:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n    45eb:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n    45f2:\t00 \n    45f3:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n    45fa:\t00 \n    45fb:\tc6 45 b8 01          \tmovb   $0x1,-0x48(%rbp)\n    45ff:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    4603:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    4607:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n    460b:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    460f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4614:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n    4618:\t48 89 c7             \tmov    %rax,%rdi\n    461b:\te8 00 00 00 00       \tcallq  4620 <print_metric_headers+0x182>\n    4620:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    4624:\t48 8b 00             \tmov    (%rax),%rax\n    4627:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n    462b:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n    462f:\t48 89 45 88          \tmov    %rax,-0x78(%rbp)\n    4633:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 463a <print_metric_headers+0x19c>\n    463a:\t48 39 45 88          \tcmp    %rax,-0x78(%rbp)\n    463e:\t75 9b                \tjne    45db <print_metric_headers+0x13d>\n    4640:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4647 <print_metric_headers+0x1a9>\n    4647:\t48 89 c6             \tmov    %rax,%rsi\n    464a:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n    464f:\te8 00 00 00 00       \tcallq  4654 <print_metric_headers+0x1b6>\n    4654:\t90                   \tnop\n    4655:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    4659:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    4660:\t00 00 \n    4662:\t74 05                \tje     4669 <print_metric_headers+0x1cb>\n    4664:\te8 00 00 00 00       \tcallq  4669 <print_metric_headers+0x1cb>\n    4669:\tc9                   \tleaveq \n    466a:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall print_metric_headers(const char *a1, char a2) {\n  _QWORD *i;\n  __int64 <span class=\"supfact\">v4</span>[Number];\n  char v5;\n  __int64 <span class=\"supfact\">v6</span>[Number];\n  _QWORD *v7;\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  <span class=\"supfact\">v6</span>[Number] = Number L;\n  <span class=\"supfact\">v6</span>[Number] = Number L;\n  <span class=\"supfact\">v6</span>[Number] = Number L;\n  <span class=\"supfact\">v6</span>[Number] = Number L;\n  v7 = Number L;\n  <span class=\"supfact\">v6</span>[Number] = (__int64)stream;\n  if (a1)\n    fputs(a1, stream);\n  if (csv_output != Number && a2 != Number)\n    fprintf(stream, String, aggr_header_lens[stat_config], &locale);\n  if (csv_output) {\n    if (dword_7950)\n      fwrite(String, Number, Number, stream);\n    fputs((&aggr_header_csv)[stat_config], stream);\n  }\n  for (i = *(_QWORD **)evsel_list; i != (_QWORD *)evsel_list;\n       i = (_QWORD *)*i) {\n    <span class=\"supfact\">v4</span>[Number] = (__int64)<span class=\"supfact\">v6</span>;\n    <span class=\"supfact\">v4</span>[Number] = (__int64)print_metric_header;\n    <span class=\"supfact\">v4</span>[Number] = (__int64)new_line_metric;\n    v5 = Number;\n    v7 = i;\n    perf_stat__print_shadow_stats(i, Number L, <span class=\"supfact\">v4</span>, Number);\n  }\n  fputc(Number, stream);\n  return __readfsqword(Number) ^ v8;\n}", "code_t": "void __cdecl print_metric_headers(const char *prefix, bool no_indent) {\n  perf_evsel *counter;\n  perf_stat_output_ctx <span class=\"supfact\">out</span>;\n  outstate <span class=\"supfact\">os</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  *(_QWORD *)&<span class=\"supfact\">os</span>.newline = Number L;\n  <span class=\"supfact\">os</span>.prefix = Number L;\n  *(_QWORD *)&<span class=\"supfact\">os</span>.nfields = Number L;\n  *(_QWORD *)&<span class=\"supfact\">os</span>.nr = Number L;\n  <span class=\"supfact\">os</span>.evsel = Number L;\n  <span class=\"supfact\">os</span>.fh = stat_config.output;\n  if (prefix)\n    fputs(prefix, stat_config.output);\n  if (!csv_output && !no_indent)\n    fprintf(stat_config.output, String, aggr_header_lens[stat_config.aggr_mode],\n            &locale);\n  if (csv_output) {\n    if (stat_config.interval)\n      fwrite(String, Number, Number, stat_config.output);\n    fputs(aggr_header_csv[stat_config.aggr_mode], stat_config.output);\n  }\n  for (counter = (perf_evsel *)evsel_list->entries.next;\n       counter != (perf_evsel *)evsel_list;\n       counter = (perf_evsel *)counter->node.next) {\n    <span class=\"supfact\">out</span>.ctx = &<span class=\"supfact\">os</span>;\n    <span class=\"supfact\">out</span>.print_metric = (print_metric_t)print_metric_header;\n    <span class=\"supfact\">out</span>.new_line = (new_line_t)new_line_metric;\n    <span class=\"supfact\">out</span>.force_header = Number;\n    <span class=\"supfact\">os</span>.evsel = counter;\n    perf_stat__print_shadow_stats(counter, Number L, &<span class=\"supfact\">out</span>,\n                                  Number);\n  }\n  fputc(Number, stat_config.output);\n}", "var": [{"name": "v4", "type": "__unk__", "pred_name": "out", "ref_name": "out", "ref_type": "struct perf_stat_output_ctx { void * ctx; print_metric_t print_metric; new_line_t new_line; bool force_header; PADDING (7); }"}, {"name": "v6", "type": "struct outstate { FILE * fh; bool newline; PADDING (7); const char * prefix; int nfields; int id; int nr; PADDING (4); perf_evsel * evsel; }", "pred_name": "os", "ref_name": "os", "ref_type": "struct outstate { FILE * fh; bool newline; PADDING (7); const char * prefix; int nfields; int id; int nr; PADDING (4); perf_evsel * evsel; }"}], "body_in_train": false}, {"repo_owner": "himyxia", "repo_name": "c", "path": "himyxia/c/701d9f9d41a10089bb4976db0cd6ae7e9a2f1cf3cdeffb9d09c66e2874f0486f", "path_in_repo": "himyxia/c/network/unpv13e/bcast/udpcli06", "objdump": "00000000004026b9 <dg_cli>:\n  4026b9:\t55                   \tpush   %rbp\n  4026ba:\t48 89 e5             \tmov    %rsp,%rbp\n  4026bd:\t48 81 ec e0 20 00 00 \tsub    $0x20e0,%rsp\n  4026c4:\t48 89 bd 38 df ff ff \tmov    %rdi,-0x20c8(%rbp)\n  4026cb:\t89 b5 34 df ff ff    \tmov    %esi,-0x20cc(%rbp)\n  4026d1:\t48 89 95 28 df ff ff \tmov    %rdx,-0x20d8(%rbp)\n  4026d8:\t89 8d 30 df ff ff    \tmov    %ecx,-0x20d0(%rbp)\n  4026de:\tc7 45 e4 01 00 00 00 \tmovl   $0x1,-0x1c(%rbp)\n  4026e5:\t8b 85 30 df ff ff    \tmov    -0x20d0(%rbp),%eax\n  4026eb:\t48 89 c7             \tmov    %rax,%rdi\n  4026ee:\te8 dd 11 00 00       \tcallq  4038d0 <Malloc>\n  4026f3:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  4026f7:\t48 8d 55 e4          \tlea    -0x1c(%rbp),%rdx\n  4026fb:\t8b 85 34 df ff ff    \tmov    -0x20cc(%rbp),%eax\n  402701:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n  402707:\t48 89 d1             \tmov    %rdx,%rcx\n  40270a:\tba 06 00 00 00       \tmov    $0x6,%edx\n  40270f:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  402714:\t89 c7                \tmov    %eax,%edi\n  402716:\te8 95 0e 00 00       \tcallq  4035b0 <Setsockopt>\n  40271b:\tbf f0 72 40 00       \tmov    $0x4072f0,%edi\n  402720:\te8 6b 12 00 00       \tcallq  403990 <Pipe>\n  402725:\t8b 05 c5 4b 00 00    \tmov    0x4bc5(%rip),%eax        # 4072f0 <pipefd>\n  40272b:\t39 85 34 df ff ff    \tcmp    %eax,-0x20cc(%rbp)\n  402731:\t0f 4d 85 34 df ff ff \tcmovge -0x20cc(%rbp),%eax\n  402738:\t83 c0 01             \tadd    $0x1,%eax\n  40273b:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  40273e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  402743:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n  402748:\t48 8d 95 50 df ff ff \tlea    -0x20b0(%rbp),%rdx\n  40274f:\t48 89 d7             \tmov    %rdx,%rdi\n  402752:\tfc                   \tcld    \n  402753:\tf3 48 ab             \trep stos %rax,%es:(%rdi)\n  402756:\t89 f8                \tmov    %edi,%eax\n  402758:\t89 ca                \tmov    %ecx,%edx\n  40275a:\t89 55 f0             \tmov    %edx,-0x10(%rbp)\n  40275d:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n  402760:\tbe f8 29 40 00       \tmov    $0x4029f8,%esi\n  402765:\tbf 0e 00 00 00       \tmov    $0xe,%edi\n  40276a:\te8 c1 07 00 00       \tcallq  402f30 <Signal>\n  40276f:\te9 51 02 00 00       \tjmpq   4029c5 <dg_cli+0x30c>\n  402774:\t48 8d 85 e0 ef ff ff \tlea    -0x1020(%rbp),%rax\n  40277b:\t48 89 c7             \tmov    %rax,%rdi\n  40277e:\te8 0d fa ff ff       \tcallq  402190 <strlen@plt>\n  402783:\t48 89 c2             \tmov    %rax,%rdx\n  402786:\t8b bd 30 df ff ff    \tmov    -0x20d0(%rbp),%edi\n  40278c:\t48 8b 8d 28 df ff ff \tmov    -0x20d8(%rbp),%rcx\n  402793:\t48 8d b5 e0 ef ff ff \tlea    -0x1020(%rbp),%rsi\n  40279a:\t8b 85 34 df ff ff    \tmov    -0x20cc(%rbp),%eax\n  4027a0:\t41 89 f9             \tmov    %edi,%r9d\n  4027a3:\t49 89 c8             \tmov    %rcx,%r8\n  4027a6:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  4027ab:\t89 c7                \tmov    %eax,%edi\n  4027ad:\te8 7e 0d 00 00       \tcallq  403530 <Sendto>\n  4027b2:\tbf 05 00 00 00       \tmov    $0x5,%edi\n  4027b7:\te8 94 fa ff ff       \tcallq  402250 <alarm@plt>\n  4027bc:\t8b 85 34 df ff ff    \tmov    -0x20cc(%rbp),%eax\n  4027c2:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  4027c5:\t85 c0                \ttest   %eax,%eax\n  4027c7:\t0f 48 c2             \tcmovs  %edx,%eax\n  4027ca:\tc1 f8 06             \tsar    $0x6,%eax\n  4027cd:\t89 c6                \tmov    %eax,%esi\n  4027cf:\t48 63 c6             \tmovslq %esi,%rax\n  4027d2:\t48 8b bc c5 50 df ff \tmov    -0x20b0(%rbp,%rax,8),%rdi\n  4027d9:\tff \n  4027da:\t8b 85 34 df ff ff    \tmov    -0x20cc(%rbp),%eax\n  4027e0:\t99                   \tcltd   \n  4027e1:\tc1 ea 1a             \tshr    $0x1a,%edx\n  4027e4:\t01 d0                \tadd    %edx,%eax\n  4027e6:\t83 e0 3f             \tand    $0x3f,%eax\n  4027e9:\t29 d0                \tsub    %edx,%eax\n  4027eb:\tba 01 00 00 00       \tmov    $0x1,%edx\n  4027f0:\t89 c1                \tmov    %eax,%ecx\n  4027f2:\t48 d3 e2             \tshl    %cl,%rdx\n  4027f5:\t48 89 d0             \tmov    %rdx,%rax\n  4027f8:\t48 09 c7             \tor     %rax,%rdi\n  4027fb:\t48 89 fa             \tmov    %rdi,%rdx\n  4027fe:\t48 63 c6             \tmovslq %esi,%rax\n  402801:\t48 89 94 c5 50 df ff \tmov    %rdx,-0x20b0(%rbp,%rax,8)\n  402808:\tff \n  402809:\t8b 05 e1 4a 00 00    \tmov    0x4ae1(%rip),%eax        # 4072f0 <pipefd>\n  40280f:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  402812:\t85 c0                \ttest   %eax,%eax\n  402814:\t0f 48 c2             \tcmovs  %edx,%eax\n  402817:\tc1 f8 06             \tsar    $0x6,%eax\n  40281a:\t89 c6                \tmov    %eax,%esi\n  40281c:\t48 63 c6             \tmovslq %esi,%rax\n  40281f:\t48 8b bc c5 50 df ff \tmov    -0x20b0(%rbp,%rax,8),%rdi\n  402826:\tff \n  402827:\t8b 05 c3 4a 00 00    \tmov    0x4ac3(%rip),%eax        # 4072f0 <pipefd>\n  40282d:\t99                   \tcltd   \n  40282e:\tc1 ea 1a             \tshr    $0x1a,%edx\n  402831:\t01 d0                \tadd    %edx,%eax\n  402833:\t83 e0 3f             \tand    $0x3f,%eax\n  402836:\t29 d0                \tsub    %edx,%eax\n  402838:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40283d:\t89 c1                \tmov    %eax,%ecx\n  40283f:\t48 d3 e2             \tshl    %cl,%rdx\n  402842:\t48 89 d0             \tmov    %rdx,%rax\n  402845:\t48 09 c7             \tor     %rax,%rdi\n  402848:\t48 89 fa             \tmov    %rdi,%rdx\n  40284b:\t48 63 c6             \tmovslq %esi,%rax\n  40284e:\t48 89 94 c5 50 df ff \tmov    %rdx,-0x20b0(%rbp,%rax,8)\n  402855:\tff \n  402856:\t48 8d b5 50 df ff ff \tlea    -0x20b0(%rbp),%rsi\n  40285d:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  402860:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  402866:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  40286b:\tba 00 00 00 00       \tmov    $0x0,%edx\n  402870:\t89 c7                \tmov    %eax,%edi\n  402872:\te8 c9 fa ff ff       \tcallq  402340 <select@plt>\n  402877:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  40287a:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40287d:\t85 c0                \ttest   %eax,%eax\n  40287f:\t79 1f                \tjns    4028a0 <dg_cli+0x1e7>\n  402881:\te8 4a f8 ff ff       \tcallq  4020d0 <__errno_location@plt>\n  402886:\t8b 00                \tmov    (%rax),%eax\n  402888:\t83 f8 04             \tcmp    $0x4,%eax\n  40288b:\t0f 84 2e 01 00 00    \tje     4029bf <dg_cli+0x306>\n  402891:\tbf 20 40 40 00       \tmov    $0x404020,%edi\n  402896:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40289b:\te8 a0 03 00 00       \tcallq  402c40 <err_sys>\n  4028a0:\t8b 85 34 df ff ff    \tmov    -0x20cc(%rbp),%eax\n  4028a6:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  4028a9:\t85 c0                \ttest   %eax,%eax\n  4028ab:\t0f 48 c2             \tcmovs  %edx,%eax\n  4028ae:\tc1 f8 06             \tsar    $0x6,%eax\n  4028b1:\t48 98                \tcltq   \n  4028b3:\t48 8b b4 c5 50 df ff \tmov    -0x20b0(%rbp,%rax,8),%rsi\n  4028ba:\tff \n  4028bb:\t8b 85 34 df ff ff    \tmov    -0x20cc(%rbp),%eax\n  4028c1:\t99                   \tcltd   \n  4028c2:\tc1 ea 1a             \tshr    $0x1a,%edx\n  4028c5:\t01 d0                \tadd    %edx,%eax\n  4028c7:\t83 e0 3f             \tand    $0x3f,%eax\n  4028ca:\t29 d0                \tsub    %edx,%eax\n  4028cc:\tba 01 00 00 00       \tmov    $0x1,%edx\n  4028d1:\t89 c1                \tmov    %eax,%ecx\n  4028d3:\t48 d3 e2             \tshl    %cl,%rdx\n  4028d6:\t48 89 d0             \tmov    %rdx,%rax\n  4028d9:\t48 21 f0             \tand    %rsi,%rax\n  4028dc:\t48 85 c0             \ttest   %rax,%rax\n  4028df:\t74 7e                \tje     40295f <dg_cli+0x2a6>\n  4028e1:\t8b 85 30 df ff ff    \tmov    -0x20d0(%rbp),%eax\n  4028e7:\t89 85 4c df ff ff    \tmov    %eax,-0x20b4(%rbp)\n  4028ed:\t48 8d 8d 4c df ff ff \tlea    -0x20b4(%rbp),%rcx\n  4028f4:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n  4028f8:\t48 8d b5 d0 df ff ff \tlea    -0x2030(%rbp),%rsi\n  4028ff:\t8b 85 34 df ff ff    \tmov    -0x20cc(%rbp),%eax\n  402905:\t49 89 c9             \tmov    %rcx,%r9\n  402908:\t49 89 d0             \tmov    %rdx,%r8\n  40290b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  402910:\tba 00 10 00 00       \tmov    $0x1000,%edx\n  402915:\t89 c7                \tmov    %eax,%edi\n  402917:\te8 64 0b 00 00       \tcallq  403480 <Recvfrom>\n  40291c:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  40291f:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  402922:\t48 98                \tcltq   \n  402924:\tc6 84 05 d0 df ff ff \tmovb   $0x0,-0x2030(%rbp,%rax,1)\n  40292b:\t00 \n  40292c:\t8b 95 4c df ff ff    \tmov    -0x20b4(%rbp),%edx\n  402932:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  402936:\t89 d6                \tmov    %edx,%esi\n  402938:\t48 89 c7             \tmov    %rax,%rdi\n  40293b:\te8 30 07 00 00       \tcallq  403070 <Sock_ntop_host>\n  402940:\t48 89 c1             \tmov    %rax,%rcx\n  402943:\t48 8d 85 d0 df ff ff \tlea    -0x2030(%rbp),%rax\n  40294a:\t48 89 c2             \tmov    %rax,%rdx\n  40294d:\t48 89 ce             \tmov    %rcx,%rsi\n  402950:\tbf 2d 40 40 00       \tmov    $0x40402d,%edi\n  402955:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40295a:\te8 91 f8 ff ff       \tcallq  4021f0 <printf@plt>\n  40295f:\t8b 05 8b 49 00 00    \tmov    0x498b(%rip),%eax        # 4072f0 <pipefd>\n  402965:\t8d 50 3f             \tlea    0x3f(%rax),%edx\n  402968:\t85 c0                \ttest   %eax,%eax\n  40296a:\t0f 48 c2             \tcmovs  %edx,%eax\n  40296d:\tc1 f8 06             \tsar    $0x6,%eax\n  402970:\t48 98                \tcltq   \n  402972:\t48 8b b4 c5 50 df ff \tmov    -0x20b0(%rbp,%rax,8),%rsi\n  402979:\tff \n  40297a:\t8b 05 70 49 00 00    \tmov    0x4970(%rip),%eax        # 4072f0 <pipefd>\n  402980:\t99                   \tcltd   \n  402981:\tc1 ea 1a             \tshr    $0x1a,%edx\n  402984:\t01 d0                \tadd    %edx,%eax\n  402986:\t83 e0 3f             \tand    $0x3f,%eax\n  402989:\t29 d0                \tsub    %edx,%eax\n  40298b:\tba 01 00 00 00       \tmov    $0x1,%edx\n  402990:\t89 c1                \tmov    %eax,%ecx\n  402992:\t48 d3 e2             \tshl    %cl,%rdx\n  402995:\t48 89 d0             \tmov    %rdx,%rax\n  402998:\t48 21 f0             \tand    %rsi,%rax\n  40299b:\t48 85 c0             \ttest   %rax,%rax\n  40299e:\t0f 84 18 fe ff ff    \tje     4027bc <dg_cli+0x103>\n  4029a4:\t8b 05 46 49 00 00    \tmov    0x4946(%rip),%eax        # 4072f0 <pipefd>\n  4029aa:\t48 8d 4d e8          \tlea    -0x18(%rbp),%rcx\n  4029ae:\tba 01 00 00 00       \tmov    $0x1,%edx\n  4029b3:\t48 89 ce             \tmov    %rcx,%rsi\n  4029b6:\t89 c7                \tmov    %eax,%edi\n  4029b8:\te8 03 10 00 00       \tcallq  4039c0 <Read>\n  4029bd:\teb 06                \tjmp    4029c5 <dg_cli+0x30c>\n  4029bf:\t90                   \tnop\n  4029c0:\te9 f7 fd ff ff       \tjmpq   4027bc <dg_cli+0x103>\n  4029c5:\t48 8b 95 38 df ff ff \tmov    -0x20c8(%rbp),%rdx\n  4029cc:\t48 8d 85 e0 ef ff ff \tlea    -0x1020(%rbp),%rax\n  4029d3:\tbe 00 10 00 00       \tmov    $0x1000,%esi\n  4029d8:\t48 89 c7             \tmov    %rax,%rdi\n  4029db:\te8 00 0d 00 00       \tcallq  4036e0 <Fgets>\n  4029e0:\t48 85 c0             \ttest   %rax,%rax\n  4029e3:\t0f 85 8b fd ff ff    \tjne    402774 <dg_cli+0xbb>\n  4029e9:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4029ed:\t48 89 c7             \tmov    %rax,%rdi\n  4029f0:\te8 9b f6 ff ff       \tcallq  402090 <free@plt>\n  4029f5:\t90                   \tnop\n  4029f6:\tc9                   \tleaveq \n  4029f7:\tc3                   \tretq   ", "code_s": "void __fastcall dg_cli(__int64 a1, int a2, __int64 a3, unsigned int a4) {\n  int v4;\n  size_t v5;\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  const char *v10;\n  unsigned int v13;\n  fd_set <span class=\"supfact\">readfds</span>;\n  char v15[Number];\n  char s[Number];\n  int v17;\n  int v18[Number];\n  int nfds;\n  void *ptr;\n  v17 = Number;\n  ptr = (void *)Malloc(a4);\n  Setsockopt((unsigned int)a2, Number L, Number L, &v17, Number L);\n  Pipe(&pipefd);\n  v4 = pipefd;\n  if (a2 >= pipefd)\n    v4 = a2;\n  nfds = v4 + Number;\n  memset(&<span class=\"supfact\">readfds</span>, Number, sizeof(<span class=\"supfact\">readfds</span>));\n  v18[Number] = Number;\n  v18[Number] = (unsigned int)v15;\n  Signal(Number L, recvfrom_alarm);\n  while (Fgets(s, Number L, a1)) {\n    v5 = strlen(s);\n    Sendto((unsigned int)a2, s, v5, Number L, a3, a4);\n    alarm(Number);\n    do {\n      while (Number) {\n        <span class=\"supfact\">readfds</span>.fds_bits[a2 / Number] |= Number L\n                                                         << (a2 % Number);\n        <span class=\"supfact\">readfds</span>.fds_bits[pipefd / Number] |=\n            Number L << (pipefd % Number);\n        v18[Number] = select(nfds, &<span class=\"supfact\">readfds</span>, Number L, Number L,\n                             Number L);\n        if (v18[Number] >= Number)\n          break;\n        if (*__errno_location() != Number)\n          err_sys((unsigned int)String, (unsigned int)&<span class=\"supfact\">readfds</span>,\n                  v6, v7, v8, v9);\n      }\n      if ((<span class=\"supfact\">readfds</span>.fds_bits[a2 / Number] &\n           (Number L << (a2 % Number))) != Number) {\n        v13 = a4;\n        v18[Number] =\n            Recvfrom((unsigned int)a2, v15, Number L, Number L, ptr, &v13);\n        v15[v18[Number]] = Number;\n        v10 = (const char *)Sock_ntop_host(ptr, v13);\n        printf(String, v10, v15);\n      }\n    } while ((<span class=\"supfact\">readfds</span>.fds_bits[pipefd / Number] &\n              (Number L << (pipefd % Number))) == Number);\n    Read((unsigned int)pipefd, v18, Number L);\n  }\n  free(ptr);\n}", "code_t": "void __cdecl dg_cli(FILE *fp, int sockfd, const sockaddr *pservaddr,\n                    socklen_t servlen) {\n  int v4;\n  size_t v5;\n  char *v6;\n  socklen_t len;\n  fd_set <span class=\"supfact\">rset</span>;\n  char recvline[Number];\n  char sendline[Number];\n  int on;\n  int n;\n  int __d1;\n  int __d0;\n  int maxfdp1;\n  sockaddr *preply_addr;\n  on = Number;\n  preply_addr = (sockaddr *)Malloc(servlen);\n  Setsockopt(sockfd, Number, Number, &on, Number);\n  Pipe(pipefd);\n  v4 = pipefd[Number];\n  if (sockfd >= pipefd[Number])\n    v4 = sockfd;\n  maxfdp1 = v4 + Number;\n  memset(&<span class=\"supfact\">rset</span>, Number, sizeof(<span class=\"supfact\">rset</span>));\n  __d0 = Number;\n  __d1 = (unsigned int)recvline;\n  Signal(Number, (Sigfunc *)recvfrom_alarm);\n  while (Fgets(sendline, Number, (FILE_0 *)fp)) {\n    v5 = strlen(sendline);\n    Sendto(sockfd, sendline, v5, Number, pservaddr, servlen);\n    alarm(Number);\n    do {\n      while (Number) {\n        <span class=\"supfact\">rset</span>.__fds_bits[sockfd / Number] |=\n            Number L << (sockfd % Number);\n        <span class=\"supfact\">rset</span>.__fds_bits[pipefd[Number] / Number] |=\n            Number L << (pipefd[Number] % Number);\n        n = select(maxfdp1, &<span class=\"supfact\">rset</span>, Number L, Number L,\n                   Number L);\n        if (n >= Number)\n          break;\n        if (*__errno_location() != Number)\n          err_sys(String);\n      }\n      if ((<span class=\"supfact\">rset</span>.__fds_bits[sockfd / Number] &\n           (Number L << (sockfd % Number))) != Number) {\n        len = servlen;\n        n = Recvfrom(sockfd, recvline, Number, Number, preply_addr, &len);\n        recvline[n] = Number;\n        v6 = Sock_ntop_host(preply_addr, len);\n        printf(String, v6, recvline);\n      }\n    } while ((<span class=\"supfact\">rset</span>.__fds_bits[pipefd[Number] / Number] &\n              (Number L << (pipefd[Number] % Number))) == Number);\n    Read(pipefd[Number], &n, Number);\n  }\n  free(preply_addr);\n}", "var": [{"name": "readfds", "type": "struct fd_set { __fd_mask[16] __fds_bits; }", "pred_name": "rset", "ref_name": "rset", "ref_type": "struct fd_set { __fd_mask[16] __fds_bits; }"}], "body_in_train": false}, {"repo_owner": "joostrenes", "repo_name": "web", "path": "joostrenes/web/4c54da1514a53c97595728a59d4ee0787c1ca7104fce40dad058a3a005f7855e", "path_in_repo": "joostrenes/web/software/kummer/cref-kl25519/test/test", "objdump": "00000000004022ee <fe25519_invert>:\n  4022ee:\t55                   \tpush   %rbp\n  4022ef:\t48 89 e5             \tmov    %rsp,%rbp\n  4022f2:\t48 81 ec a0 02 00 00 \tsub    $0x2a0,%rsp\n  4022f9:\t48 89 bd 68 fd ff ff \tmov    %rdi,-0x298(%rbp)\n  402300:\t48 89 b5 60 fd ff ff \tmov    %rsi,-0x2a0(%rbp)\n  402307:\t48 8b 95 60 fd ff ff \tmov    -0x2a0(%rbp),%rdx\n  40230e:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  402315:\t48 89 d6             \tmov    %rdx,%rsi\n  402318:\t48 89 c7             \tmov    %rax,%rdi\n  40231b:\te8 a4 ff ff ff       \tcallq  4022c4 <fe25519_square>\n  402320:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  402327:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  40232e:\t48 89 d6             \tmov    %rdx,%rsi\n  402331:\t48 89 c7             \tmov    %rax,%rdi\n  402334:\te8 8b ff ff ff       \tcallq  4022c4 <fe25519_square>\n  402339:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  402340:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  402347:\t48 89 d6             \tmov    %rdx,%rsi\n  40234a:\t48 89 c7             \tmov    %rax,%rdi\n  40234d:\te8 72 ff ff ff       \tcallq  4022c4 <fe25519_square>\n  402352:\t48 8b 95 60 fd ff ff \tmov    -0x2a0(%rbp),%rdx\n  402359:\t48 8d 8d 70 fe ff ff \tlea    -0x190(%rbp),%rcx\n  402360:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n  402367:\t48 89 ce             \tmov    %rcx,%rsi\n  40236a:\t48 89 c7             \tmov    %rax,%rdi\n  40236d:\te8 2a fe ff ff       \tcallq  40219c <fe25519_mul>\n  402372:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  402379:\t48 8d 8d f0 fd ff ff \tlea    -0x210(%rbp),%rcx\n  402380:\t48 8d 85 70 fd ff ff \tlea    -0x290(%rbp),%rax\n  402387:\t48 89 ce             \tmov    %rcx,%rsi\n  40238a:\t48 89 c7             \tmov    %rax,%rdi\n  40238d:\te8 0a fe ff ff       \tcallq  40219c <fe25519_mul>\n  402392:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  402399:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  4023a0:\t48 89 d6             \tmov    %rdx,%rsi\n  4023a3:\t48 89 c7             \tmov    %rax,%rdi\n  4023a6:\te8 19 ff ff ff       \tcallq  4022c4 <fe25519_square>\n  4023ab:\t48 8d 95 f0 fd ff ff \tlea    -0x210(%rbp),%rdx\n  4023b2:\t48 8d 8d 70 fe ff ff \tlea    -0x190(%rbp),%rcx\n  4023b9:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4023c0:\t48 89 ce             \tmov    %rcx,%rsi\n  4023c3:\t48 89 c7             \tmov    %rax,%rdi\n  4023c6:\te8 d1 fd ff ff       \tcallq  40219c <fe25519_mul>\n  4023cb:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  4023d2:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  4023d9:\t48 89 d6             \tmov    %rdx,%rsi\n  4023dc:\t48 89 c7             \tmov    %rax,%rdi\n  4023df:\te8 e0 fe ff ff       \tcallq  4022c4 <fe25519_square>\n  4023e4:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  4023eb:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4023f2:\t48 89 d6             \tmov    %rdx,%rsi\n  4023f5:\t48 89 c7             \tmov    %rax,%rdi\n  4023f8:\te8 c7 fe ff ff       \tcallq  4022c4 <fe25519_square>\n  4023fd:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  402404:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  40240b:\t48 89 d6             \tmov    %rdx,%rsi\n  40240e:\t48 89 c7             \tmov    %rax,%rdi\n  402411:\te8 ae fe ff ff       \tcallq  4022c4 <fe25519_square>\n  402416:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  40241d:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402424:\t48 89 d6             \tmov    %rdx,%rsi\n  402427:\t48 89 c7             \tmov    %rax,%rdi\n  40242a:\te8 95 fe ff ff       \tcallq  4022c4 <fe25519_square>\n  40242f:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  402436:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  40243d:\t48 89 d6             \tmov    %rdx,%rsi\n  402440:\t48 89 c7             \tmov    %rax,%rdi\n  402443:\te8 7c fe ff ff       \tcallq  4022c4 <fe25519_square>\n  402448:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  40244f:\t48 8d 8d 70 fe ff ff \tlea    -0x190(%rbp),%rcx\n  402456:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  40245d:\t48 89 ce             \tmov    %rcx,%rsi\n  402460:\t48 89 c7             \tmov    %rax,%rdi\n  402463:\te8 34 fd ff ff       \tcallq  40219c <fe25519_mul>\n  402468:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  40246f:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  402476:\t48 89 d6             \tmov    %rdx,%rsi\n  402479:\t48 89 c7             \tmov    %rax,%rdi\n  40247c:\te8 43 fe ff ff       \tcallq  4022c4 <fe25519_square>\n  402481:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  402488:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  40248f:\t48 89 d6             \tmov    %rdx,%rsi\n  402492:\t48 89 c7             \tmov    %rax,%rdi\n  402495:\te8 2a fe ff ff       \tcallq  4022c4 <fe25519_square>\n  40249a:\tc7 45 fc 02 00 00 00 \tmovl   $0x2,-0x4(%rbp)\n  4024a1:\teb 36                \tjmp    4024d9 <fe25519_invert+0x1eb>\n  4024a3:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  4024aa:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  4024b1:\t48 89 d6             \tmov    %rdx,%rsi\n  4024b4:\t48 89 c7             \tmov    %rax,%rdi\n  4024b7:\te8 08 fe ff ff       \tcallq  4022c4 <fe25519_square>\n  4024bc:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  4024c3:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4024ca:\t48 89 d6             \tmov    %rdx,%rsi\n  4024cd:\t48 89 c7             \tmov    %rax,%rdi\n  4024d0:\te8 ef fd ff ff       \tcallq  4022c4 <fe25519_square>\n  4024d5:\t83 45 fc 02          \taddl   $0x2,-0x4(%rbp)\n  4024d9:\t83 7d fc 09          \tcmpl   $0x9,-0x4(%rbp)\n  4024dd:\t7e c4                \tjle    4024a3 <fe25519_invert+0x1b5>\n  4024df:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  4024e6:\t48 8d 8d f0 fe ff ff \tlea    -0x110(%rbp),%rcx\n  4024ed:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n  4024f4:\t48 89 ce             \tmov    %rcx,%rsi\n  4024f7:\t48 89 c7             \tmov    %rax,%rdi\n  4024fa:\te8 9d fc ff ff       \tcallq  40219c <fe25519_mul>\n  4024ff:\t48 8d 95 f0 fd ff ff \tlea    -0x210(%rbp),%rdx\n  402506:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  40250d:\t48 89 d6             \tmov    %rdx,%rsi\n  402510:\t48 89 c7             \tmov    %rax,%rdi\n  402513:\te8 ac fd ff ff       \tcallq  4022c4 <fe25519_square>\n  402518:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  40251f:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402526:\t48 89 d6             \tmov    %rdx,%rsi\n  402529:\t48 89 c7             \tmov    %rax,%rdi\n  40252c:\te8 93 fd ff ff       \tcallq  4022c4 <fe25519_square>\n  402531:\tc7 45 fc 02 00 00 00 \tmovl   $0x2,-0x4(%rbp)\n  402538:\teb 36                \tjmp    402570 <fe25519_invert+0x282>\n  40253a:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  402541:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  402548:\t48 89 d6             \tmov    %rdx,%rsi\n  40254b:\t48 89 c7             \tmov    %rax,%rdi\n  40254e:\te8 71 fd ff ff       \tcallq  4022c4 <fe25519_square>\n  402553:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  40255a:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402561:\t48 89 d6             \tmov    %rdx,%rsi\n  402564:\t48 89 c7             \tmov    %rax,%rdi\n  402567:\te8 58 fd ff ff       \tcallq  4022c4 <fe25519_square>\n  40256c:\t83 45 fc 02          \taddl   $0x2,-0x4(%rbp)\n  402570:\t83 7d fc 13          \tcmpl   $0x13,-0x4(%rbp)\n  402574:\t7e c4                \tjle    40253a <fe25519_invert+0x24c>\n  402576:\t48 8d 95 f0 fd ff ff \tlea    -0x210(%rbp),%rdx\n  40257d:\t48 8d 8d f0 fe ff ff \tlea    -0x110(%rbp),%rcx\n  402584:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  40258b:\t48 89 ce             \tmov    %rcx,%rsi\n  40258e:\t48 89 c7             \tmov    %rax,%rdi\n  402591:\te8 06 fc ff ff       \tcallq  40219c <fe25519_mul>\n  402596:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  40259d:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4025a4:\t48 89 d6             \tmov    %rdx,%rsi\n  4025a7:\t48 89 c7             \tmov    %rax,%rdi\n  4025aa:\te8 15 fd ff ff       \tcallq  4022c4 <fe25519_square>\n  4025af:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  4025b6:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  4025bd:\t48 89 d6             \tmov    %rdx,%rsi\n  4025c0:\t48 89 c7             \tmov    %rax,%rdi\n  4025c3:\te8 fc fc ff ff       \tcallq  4022c4 <fe25519_square>\n  4025c8:\tc7 45 fc 02 00 00 00 \tmovl   $0x2,-0x4(%rbp)\n  4025cf:\teb 36                \tjmp    402607 <fe25519_invert+0x319>\n  4025d1:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  4025d8:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4025df:\t48 89 d6             \tmov    %rdx,%rsi\n  4025e2:\t48 89 c7             \tmov    %rax,%rdi\n  4025e5:\te8 da fc ff ff       \tcallq  4022c4 <fe25519_square>\n  4025ea:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  4025f1:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  4025f8:\t48 89 d6             \tmov    %rdx,%rsi\n  4025fb:\t48 89 c7             \tmov    %rax,%rdi\n  4025fe:\te8 c1 fc ff ff       \tcallq  4022c4 <fe25519_square>\n  402603:\t83 45 fc 02          \taddl   $0x2,-0x4(%rbp)\n  402607:\t83 7d fc 09          \tcmpl   $0x9,-0x4(%rbp)\n  40260b:\t7e c4                \tjle    4025d1 <fe25519_invert+0x2e3>\n  40260d:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  402614:\t48 8d 8d 70 fe ff ff \tlea    -0x190(%rbp),%rcx\n  40261b:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  402622:\t48 89 ce             \tmov    %rcx,%rsi\n  402625:\t48 89 c7             \tmov    %rax,%rdi\n  402628:\te8 6f fb ff ff       \tcallq  40219c <fe25519_mul>\n  40262d:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  402634:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  40263b:\t48 89 d6             \tmov    %rdx,%rsi\n  40263e:\t48 89 c7             \tmov    %rax,%rdi\n  402641:\te8 7e fc ff ff       \tcallq  4022c4 <fe25519_square>\n  402646:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  40264d:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402654:\t48 89 d6             \tmov    %rdx,%rsi\n  402657:\t48 89 c7             \tmov    %rax,%rdi\n  40265a:\te8 65 fc ff ff       \tcallq  4022c4 <fe25519_square>\n  40265f:\tc7 45 fc 02 00 00 00 \tmovl   $0x2,-0x4(%rbp)\n  402666:\teb 36                \tjmp    40269e <fe25519_invert+0x3b0>\n  402668:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  40266f:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  402676:\t48 89 d6             \tmov    %rdx,%rsi\n  402679:\t48 89 c7             \tmov    %rax,%rdi\n  40267c:\te8 43 fc ff ff       \tcallq  4022c4 <fe25519_square>\n  402681:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  402688:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  40268f:\t48 89 d6             \tmov    %rdx,%rsi\n  402692:\t48 89 c7             \tmov    %rax,%rdi\n  402695:\te8 2a fc ff ff       \tcallq  4022c4 <fe25519_square>\n  40269a:\t83 45 fc 02          \taddl   $0x2,-0x4(%rbp)\n  40269e:\t83 7d fc 31          \tcmpl   $0x31,-0x4(%rbp)\n  4026a2:\t7e c4                \tjle    402668 <fe25519_invert+0x37a>\n  4026a4:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  4026ab:\t48 8d 8d f0 fe ff ff \tlea    -0x110(%rbp),%rcx\n  4026b2:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n  4026b9:\t48 89 ce             \tmov    %rcx,%rsi\n  4026bc:\t48 89 c7             \tmov    %rax,%rdi\n  4026bf:\te8 d8 fa ff ff       \tcallq  40219c <fe25519_mul>\n  4026c4:\t48 8d 95 f0 fd ff ff \tlea    -0x210(%rbp),%rdx\n  4026cb:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4026d2:\t48 89 d6             \tmov    %rdx,%rsi\n  4026d5:\t48 89 c7             \tmov    %rax,%rdi\n  4026d8:\te8 e7 fb ff ff       \tcallq  4022c4 <fe25519_square>\n  4026dd:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  4026e4:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  4026eb:\t48 89 d6             \tmov    %rdx,%rsi\n  4026ee:\t48 89 c7             \tmov    %rax,%rdi\n  4026f1:\te8 ce fb ff ff       \tcallq  4022c4 <fe25519_square>\n  4026f6:\tc7 45 fc 02 00 00 00 \tmovl   $0x2,-0x4(%rbp)\n  4026fd:\teb 36                \tjmp    402735 <fe25519_invert+0x447>\n  4026ff:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  402706:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  40270d:\t48 89 d6             \tmov    %rdx,%rsi\n  402710:\t48 89 c7             \tmov    %rax,%rdi\n  402713:\te8 ac fb ff ff       \tcallq  4022c4 <fe25519_square>\n  402718:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  40271f:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  402726:\t48 89 d6             \tmov    %rdx,%rsi\n  402729:\t48 89 c7             \tmov    %rax,%rdi\n  40272c:\te8 93 fb ff ff       \tcallq  4022c4 <fe25519_square>\n  402731:\t83 45 fc 02          \taddl   $0x2,-0x4(%rbp)\n  402735:\t83 7d fc 63          \tcmpl   $0x63,-0x4(%rbp)\n  402739:\t7e c4                \tjle    4026ff <fe25519_invert+0x411>\n  40273b:\t48 8d 95 f0 fd ff ff \tlea    -0x210(%rbp),%rdx\n  402742:\t48 8d 8d 70 fe ff ff \tlea    -0x190(%rbp),%rcx\n  402749:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402750:\t48 89 ce             \tmov    %rcx,%rsi\n  402753:\t48 89 c7             \tmov    %rax,%rdi\n  402756:\te8 41 fa ff ff       \tcallq  40219c <fe25519_mul>\n  40275b:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  402762:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  402769:\t48 89 d6             \tmov    %rdx,%rsi\n  40276c:\t48 89 c7             \tmov    %rax,%rdi\n  40276f:\te8 50 fb ff ff       \tcallq  4022c4 <fe25519_square>\n  402774:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  40277b:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402782:\t48 89 d6             \tmov    %rdx,%rsi\n  402785:\t48 89 c7             \tmov    %rax,%rdi\n  402788:\te8 37 fb ff ff       \tcallq  4022c4 <fe25519_square>\n  40278d:\tc7 45 fc 02 00 00 00 \tmovl   $0x2,-0x4(%rbp)\n  402794:\teb 36                \tjmp    4027cc <fe25519_invert+0x4de>\n  402796:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  40279d:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  4027a4:\t48 89 d6             \tmov    %rdx,%rsi\n  4027a7:\t48 89 c7             \tmov    %rax,%rdi\n  4027aa:\te8 15 fb ff ff       \tcallq  4022c4 <fe25519_square>\n  4027af:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  4027b6:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  4027bd:\t48 89 d6             \tmov    %rdx,%rsi\n  4027c0:\t48 89 c7             \tmov    %rax,%rdi\n  4027c3:\te8 fc fa ff ff       \tcallq  4022c4 <fe25519_square>\n  4027c8:\t83 45 fc 02          \taddl   $0x2,-0x4(%rbp)\n  4027cc:\t83 7d fc 31          \tcmpl   $0x31,-0x4(%rbp)\n  4027d0:\t7e c4                \tjle    402796 <fe25519_invert+0x4a8>\n  4027d2:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n  4027d9:\t48 8d 8d f0 fe ff ff \tlea    -0x110(%rbp),%rcx\n  4027e0:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  4027e7:\t48 89 ce             \tmov    %rcx,%rsi\n  4027ea:\t48 89 c7             \tmov    %rax,%rdi\n  4027ed:\te8 aa f9 ff ff       \tcallq  40219c <fe25519_mul>\n  4027f2:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  4027f9:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402800:\t48 89 d6             \tmov    %rdx,%rsi\n  402803:\t48 89 c7             \tmov    %rax,%rdi\n  402806:\te8 b9 fa ff ff       \tcallq  4022c4 <fe25519_square>\n  40280b:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  402812:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  402819:\t48 89 d6             \tmov    %rdx,%rsi\n  40281c:\t48 89 c7             \tmov    %rax,%rdi\n  40281f:\te8 a0 fa ff ff       \tcallq  4022c4 <fe25519_square>\n  402824:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  40282b:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402832:\t48 89 d6             \tmov    %rdx,%rsi\n  402835:\t48 89 c7             \tmov    %rax,%rdi\n  402838:\te8 87 fa ff ff       \tcallq  4022c4 <fe25519_square>\n  40283d:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n  402844:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  40284b:\t48 89 d6             \tmov    %rdx,%rsi\n  40284e:\t48 89 c7             \tmov    %rax,%rdi\n  402851:\te8 6e fa ff ff       \tcallq  4022c4 <fe25519_square>\n  402856:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n  40285d:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n  402864:\t48 89 d6             \tmov    %rdx,%rsi\n  402867:\t48 89 c7             \tmov    %rax,%rdi\n  40286a:\te8 55 fa ff ff       \tcallq  4022c4 <fe25519_square>\n  40286f:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n  402876:\t48 8d 8d f0 fe ff ff \tlea    -0x110(%rbp),%rcx\n  40287d:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n  402884:\t48 89 ce             \tmov    %rcx,%rsi\n  402887:\t48 89 c7             \tmov    %rax,%rdi\n  40288a:\te8 0d f9 ff ff       \tcallq  40219c <fe25519_mul>\n  40288f:\t90                   \tnop\n  402890:\tc9                   \tleaveq \n  402891:\tc3                   \tretq   ", "code_s": "void __fastcall fe25519_invert(_DWORD *a1, __int64 a2) {\n  _DWORD <span class=\"supfact\">v2</span>[Number];\n  _DWORD <span class=\"supfact\">v3</span>[Number];\n  _DWORD <span class=\"supfact\">v4</span>[Number];\n  _DWORD <span class=\"supfact\">v5</span>[Number];\n  _DWORD <span class=\"supfact\">v6</span>[Number];\n  int i;\n  fe25519_square(<span class=\"supfact\">v6</span>, a2);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  fe25519_mul(<span class=\"supfact\">v3</span>, (__int64)<span class=\"supfact\">v4</span>, a2);\n  fe25519_mul(<span class=\"supfact\">v2</span>, (__int64)<span class=\"supfact\">v3</span>,\n              (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v2</span>);\n  fe25519_mul(<span class=\"supfact\">v6</span>, (__int64)<span class=\"supfact\">v4</span>,\n              (__int64)<span class=\"supfact\">v3</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  fe25519_mul(<span class=\"supfact\">v6</span>, (__int64)<span class=\"supfact\">v4</span>,\n              (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n    fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  }\n  fe25519_mul(<span class=\"supfact\">v3</span>, (__int64)<span class=\"supfact\">v5</span>,\n              (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v3</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n    fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  }\n  fe25519_mul(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>,\n              (__int64)<span class=\"supfact\">v3</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n    fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  }\n  fe25519_mul(<span class=\"supfact\">v6</span>, (__int64)<span class=\"supfact\">v4</span>,\n              (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n    fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  }\n  fe25519_mul(<span class=\"supfact\">v3</span>, (__int64)<span class=\"supfact\">v5</span>,\n              (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v3</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n    fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  }\n  fe25519_mul(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>,\n              (__int64)<span class=\"supfact\">v3</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n    fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  }\n  fe25519_mul(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>,\n              (__int64)<span class=\"supfact\">v6</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  fe25519_square(<span class=\"supfact\">v4</span>, (__int64)<span class=\"supfact\">v5</span>);\n  fe25519_square(<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v4</span>);\n  fe25519_mul(a1, (__int64)<span class=\"supfact\">v5</span>, (__int64)<span class=\"supfact\">v2</span>);\n}", "code_t": "void __cdecl fe25519_invert(fe25519 *r, const fe25519 *x) {\n  fe25519 <span class=\"supfact\">z11</span>;\n  fe25519 <span class=\"supfact\">z9</span>;\n  fe25519 <span class=\"supfact\">t0</span>;\n  fe25519 <span class=\"supfact\">t1</span>;\n  fe25519 <span class=\"supfact\">z2</span>;\n  int i;\n  fe25519_square(&<span class=\"supfact\">z2</span>, x);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">z2</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n  fe25519_mul(&<span class=\"supfact\">z9</span>, &<span class=\"supfact\">t0</span>, x);\n  fe25519_mul(&<span class=\"supfact\">z11</span>, &<span class=\"supfact\">z9</span>, &<span class=\"supfact\">z2</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">z11</span>);\n  fe25519_mul(&<span class=\"supfact\">z2</span>, &<span class=\"supfact\">t0</span>, &<span class=\"supfact\">z9</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">z2</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n  fe25519_mul(&<span class=\"supfact\">z2</span>, &<span class=\"supfact\">t0</span>, &<span class=\"supfact\">z2</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">z2</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n    fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  }\n  fe25519_mul(&<span class=\"supfact\">z9</span>, &<span class=\"supfact\">t1</span>, &<span class=\"supfact\">z2</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">z9</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n    fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  }\n  fe25519_mul(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>, &<span class=\"supfact\">z9</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n    fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n  }\n  fe25519_mul(&<span class=\"supfact\">z2</span>, &<span class=\"supfact\">t0</span>, &<span class=\"supfact\">z2</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">z2</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n    fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  }\n  fe25519_mul(&<span class=\"supfact\">z9</span>, &<span class=\"supfact\">t1</span>, &<span class=\"supfact\">z2</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">z9</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n    fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n  }\n  fe25519_mul(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>, &<span class=\"supfact\">z9</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  for (i = Number; i <= Number; i += Number) {\n    fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n    fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  }\n  fe25519_mul(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>, &<span class=\"supfact\">z2</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  fe25519_square(&<span class=\"supfact\">t0</span>, &<span class=\"supfact\">t1</span>);\n  fe25519_square(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t0</span>);\n  fe25519_mul(r, &<span class=\"supfact\">t1</span>, &<span class=\"supfact\">z11</span>);\n}", "var": [{"name": "v2", "type": "int[32]", "pred_name": "s2", "ref_name": "z11", "ref_type": "struct fe25519 { crypto_uint32[32] v; }"}, {"name": "v3", "type": "int[32]", "pred_name": "s1", "ref_name": "z9", "ref_type": "struct fe25519 { crypto_uint32[32] v; }"}, {"name": "v4", "type": "int[32]", "pred_name": "y1", "ref_name": "t0", "ref_type": "struct fe25519 { crypto_uint32[32] v; }"}, {"name": "v5", "type": "int[32]", "pred_name": "x1", "ref_name": "t1", "ref_type": "struct fe25519 { crypto_uint32[32] v; }"}, {"name": "v6", "type": "char[512]", "pred_name": "z1", "ref_name": "z2", "ref_type": "struct fe25519 { crypto_uint32[32] v; }"}], "body_in_train": false}, {"repo_owner": "btrask", "repo_name": "stronglink", "path": "btrask/stronglink/1183daa29fe6715f49b9547f3359105c5dd640c0ab29292af53c01137bdb5b17", "path_in_repo": "btrask/stronglink/deps/libasync/deps/libressl-portable/crypto/dsa/dsa_pmeth.o", "objdump": "00000000000006f7 <pkey_dsa_paramgen>:\n 6f7:\t55                   \tpush   %rbp\n 6f8:\t48 89 e5             \tmov    %rsp,%rbp\n 6fb:\t48 83 ec 50          \tsub    $0x50,%rsp\n 6ff:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n 703:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n 707:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 70e:\t00 00 \n 710:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 714:\t31 c0                \txor    %eax,%eax\n 716:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n 71d:\t00 \n 71e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 722:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n 726:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 72a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 72e:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n 732:\t48 85 c0             \ttest   %rax,%rax\n 735:\t74 1d                \tje     754 <pkey_dsa_paramgen+0x5d>\n 737:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 73b:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n 73f:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n 743:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n 747:\t48 89 d6             \tmov    %rdx,%rsi\n 74a:\t48 89 c7             \tmov    %rax,%rdi\n 74d:\te8 00 00 00 00       \tcallq  752 <pkey_dsa_paramgen+0x5b>\n 752:\teb 08                \tjmp    75c <pkey_dsa_paramgen+0x65>\n 754:\t48 c7 45 c8 00 00 00 \tmovq   $0x0,-0x38(%rbp)\n 75b:\t00 \n 75c:\te8 00 00 00 00       \tcallq  761 <pkey_dsa_paramgen+0x6a>\n 761:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n 765:\t48 83 7d d0 00       \tcmpq   $0x0,-0x30(%rbp)\n 76a:\t75 07                \tjne    773 <pkey_dsa_paramgen+0x7c>\n 76c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 771:\teb 6f                \tjmp    7e2 <pkey_dsa_paramgen+0xeb>\n 773:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 777:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n 77b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 77f:\t8b 40 04             \tmov    0x4(%rax),%eax\n 782:\t48 63 d0             \tmovslq %eax,%rdx\n 785:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 789:\t8b 00                \tmov    (%rax),%eax\n 78b:\t48 63 f0             \tmovslq %eax,%rsi\n 78e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 792:\tff 75 c8             \tpushq  -0x38(%rbp)\n 795:\t6a 00                \tpushq  $0x0\n 797:\t6a 00                \tpushq  $0x0\n 799:\t6a 00                \tpushq  $0x0\n 79b:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n 7a1:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 7a7:\t48 89 c7             \tmov    %rax,%rdi\n 7aa:\te8 00 00 00 00       \tcallq  7af <pkey_dsa_paramgen+0xb8>\n 7af:\t48 83 c4 20          \tadd    $0x20,%rsp\n 7b3:\t89 45 c4             \tmov    %eax,-0x3c(%rbp)\n 7b6:\t83 7d c4 00          \tcmpl   $0x0,-0x3c(%rbp)\n 7ba:\t74 17                \tje     7d3 <pkey_dsa_paramgen+0xdc>\n 7bc:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 7c0:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n 7c4:\tbe 74 00 00 00       \tmov    $0x74,%esi\n 7c9:\t48 89 c7             \tmov    %rax,%rdi\n 7cc:\te8 00 00 00 00       \tcallq  7d1 <pkey_dsa_paramgen+0xda>\n 7d1:\teb 0c                \tjmp    7df <pkey_dsa_paramgen+0xe8>\n 7d3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n 7d7:\t48 89 c7             \tmov    %rax,%rdi\n 7da:\te8 00 00 00 00       \tcallq  7df <pkey_dsa_paramgen+0xe8>\n 7df:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n 7e2:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n 7e6:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n 7ed:\t00 00 \n 7ef:\t74 05                \tje     7f6 <pkey_dsa_paramgen+0xff>\n 7f1:\te8 00 00 00 00       \tcallq  7f6 <pkey_dsa_paramgen+0xff>\n 7f6:\tc9                   \tleaveq \n 7f7:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pkey_dsa_paramgen(__int64 a1, __int64 a2) {\n  unsigned int v3;\n  char *v4;\n  __int64 v5;\n  int *v6;\n  char <span class=\"supfact\">v7</span>[Number];\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  v6 = *(int **)(a1 + Number);\n  if (*(_QWORD *)(a1 + Number)) {\n    v4 = <span class=\"supfact\">v7</span>;\n    evp_pkey_set_cb_translate(<span class=\"supfact\">v7</span>, a1);\n  } else {\n    v4 = Number L;\n  }\n  v5 = DSA_new();\n  if (!v5)\n    return Number L;\n  v3 = dsa_builtin_paramgen(v5, *v6, v6[Number], *((_QWORD *)v6 + Number),\n                            Number L, Number L, Number L, Number L, Number L,\n                            v4);\n  if (v3)\n    EVP_PKEY_assign(a2, Number L, v5);\n  else\n    DSA_free(v5);\n  return v3;\n}", "code_t": "int __cdecl pkey_dsa_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey) {\n  int ret;\n  BN_GENCB *pcb;\n  DSA *dsa;\n  DSA_PKEY_CTX *dctx;\n  BN_GENCB <span class=\"supfact\">cb</span>;\n  unsigned __int64 v8;\n  v8 = __readfsqword(Number);\n  dctx = (DSA_PKEY_CTX *)ctx->data;\n  if (ctx->pkey_gencb) {\n    pcb = &<span class=\"supfact\">cb</span>;\n    evp_pkey_set_cb_translate(&<span class=\"supfact\">cb</span>, ctx);\n  } else {\n    pcb = Number L;\n  }\n  dsa = (DSA *)DSA_new();\n  if (!dsa)\n    return Number;\n  ret = dsa_builtin_paramgen(dsa, dctx->nbits, dctx->qbits, dctx->pmd, Number L,\n                             Number L, Number L, Number L, Number L, pcb);\n  if (ret)\n    EVP_PKEY_assign(pkey, Number L, dsa);\n  else\n    DSA_free(dsa);\n  return ret;\n}", "var": [{"name": "v7", "type": "char[24]", "pred_name": "param", "ref_name": "cb", "ref_type": "struct BN_GENCB { unsigned int ver; PADDING (4); void * arg; $80C9AFFEFC010BC3DF322CE7AB13384D cb; }"}], "body_in_train": false}, {"repo_owner": "afni", "repo_name": "afni", "path": "afni/afni/12f9e4a9d90aa4f3633a7351f4acfc4d9829f9345666ef901b82ad04dd05acd1", "path_in_repo": "afni/afni/src/gifti/gifti_tool", "objdump": "00000000004352ad <nifti_convert_nim2n1hdr>:\n  4352ad:\t55                   \tpush   %rbp\n  4352ae:\t48 89 e5             \tmov    %rsp,%rbp\n  4352b1:\t48 81 ec 70 01 00 00 \tsub    $0x170,%rsp\n  4352b8:\t48 89 bd 98 fe ff ff \tmov    %rdi,-0x168(%rbp)\n  4352bf:\t48 89 b5 90 fe ff ff \tmov    %rsi,-0x170(%rbp)\n  4352c6:\t48 83 bd 90 fe ff ff \tcmpq   $0x0,-0x170(%rbp)\n  4352cd:\t00 \n  4352ce:\t75 28                \tjne    4352f8 <nifti_convert_nim2n1hdr+0x4b>\n  4352d0:\t48 8b 05 c9 9c 02 00 \tmov    0x29cc9(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  4352d7:\t48 89 c1             \tmov    %rax,%rcx\n  4352da:\tba 22 00 00 00       \tmov    $0x22,%edx\n  4352df:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4352e4:\tbf b8 63 45 00       \tmov    $0x4563b8,%edi\n  4352e9:\te8 22 d2 fc ff       \tcallq  402510 <fwrite@plt>\n  4352ee:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4352f3:\te9 c7 0d 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  4352f8:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  4352ff:\tba 5c 01 00 00       \tmov    $0x15c,%edx\n  435304:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  435309:\t48 89 c7             \tmov    %rax,%rdi\n  43530c:\te8 0f cf fc ff       \tcallq  402220 <memset@plt>\n  435311:\tc7 85 a0 fe ff ff 5c \tmovl   $0x15c,-0x160(%rbp)\n  435318:\t01 00 00 \n  43531b:\tc6 85 c6 fe ff ff 72 \tmovb   $0x72,-0x13a(%rbp)\n  435322:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435329:\t48 8b 00             \tmov    (%rax),%rax\n  43532c:\t48 3d ff 7f 00 00    \tcmp    $0x7fff,%rax\n  435332:\t7f 12                \tjg     435346 <nifti_convert_nim2n1hdr+0x99>\n  435334:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43533b:\t48 8b 00             \tmov    (%rax),%rax\n  43533e:\t48 3d 00 80 ff ff    \tcmp    $0xffffffffffff8000,%rax\n  435344:\t7d 35                \tjge    43537b <nifti_convert_nim2n1hdr+0xce>\n  435346:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43534d:\t48 8b 10             \tmov    (%rax),%rdx\n  435350:\t48 8b 05 49 9c 02 00 \tmov    0x29c49(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  435357:\t48 89 d1             \tmov    %rdx,%rcx\n  43535a:\tba db 63 45 00       \tmov    $0x4563db,%edx\n  43535f:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  435364:\t48 89 c7             \tmov    %rax,%rdi\n  435367:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  43536c:\te8 cf cf fc ff       \tcallq  402340 <fprintf@plt>\n  435371:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  435376:\te9 44 0d 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  43537b:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435382:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  435386:\t48 3d ff 7f 00 00    \tcmp    $0x7fff,%rax\n  43538c:\t7f 13                \tjg     4353a1 <nifti_convert_nim2n1hdr+0xf4>\n  43538e:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435395:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  435399:\t48 3d 00 80 ff ff    \tcmp    $0xffffffffffff8000,%rax\n  43539f:\t7d 36                \tjge    4353d7 <nifti_convert_nim2n1hdr+0x12a>\n  4353a1:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4353a8:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n  4353ac:\t48 8b 05 ed 9b 02 00 \tmov    0x29bed(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  4353b3:\t48 89 d1             \tmov    %rdx,%rcx\n  4353b6:\tba 13 64 45 00       \tmov    $0x456413,%edx\n  4353bb:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  4353c0:\t48 89 c7             \tmov    %rax,%rdi\n  4353c3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4353c8:\te8 73 cf fc ff       \tcallq  402340 <fprintf@plt>\n  4353cd:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4353d2:\te9 e8 0c 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  4353d7:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4353de:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4353e2:\t48 3d ff 7f 00 00    \tcmp    $0x7fff,%rax\n  4353e8:\t7f 13                \tjg     4353fd <nifti_convert_nim2n1hdr+0x150>\n  4353ea:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4353f1:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4353f5:\t48 3d 00 80 ff ff    \tcmp    $0xffffffffffff8000,%rax\n  4353fb:\t7d 36                \tjge    435433 <nifti_convert_nim2n1hdr+0x186>\n  4353fd:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435404:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  435408:\t48 8b 05 91 9b 02 00 \tmov    0x29b91(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  43540f:\t48 89 d1             \tmov    %rdx,%rcx\n  435412:\tba 16 64 45 00       \tmov    $0x456416,%edx\n  435417:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  43541c:\t48 89 c7             \tmov    %rax,%rdi\n  43541f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435424:\te8 17 cf fc ff       \tcallq  402340 <fprintf@plt>\n  435429:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  43542e:\te9 8c 0c 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  435433:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43543a:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  43543e:\t48 3d ff 7f 00 00    \tcmp    $0x7fff,%rax\n  435444:\t7f 13                \tjg     435459 <nifti_convert_nim2n1hdr+0x1ac>\n  435446:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43544d:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  435451:\t48 3d 00 80 ff ff    \tcmp    $0xffffffffffff8000,%rax\n  435457:\t7d 36                \tjge    43548f <nifti_convert_nim2n1hdr+0x1e2>\n  435459:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435460:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n  435464:\t48 8b 05 35 9b 02 00 \tmov    0x29b35(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  43546b:\t48 89 d1             \tmov    %rdx,%rcx\n  43546e:\tba 19 64 45 00       \tmov    $0x456419,%edx\n  435473:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  435478:\t48 89 c7             \tmov    %rax,%rdi\n  43547b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435480:\te8 bb ce fc ff       \tcallq  402340 <fprintf@plt>\n  435485:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  43548a:\te9 30 0c 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  43548f:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435496:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  43549a:\t48 3d ff 7f 00 00    \tcmp    $0x7fff,%rax\n  4354a0:\t7f 13                \tjg     4354b5 <nifti_convert_nim2n1hdr+0x208>\n  4354a2:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4354a9:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  4354ad:\t48 3d 00 80 ff ff    \tcmp    $0xffffffffffff8000,%rax\n  4354b3:\t7d 36                \tjge    4354eb <nifti_convert_nim2n1hdr+0x23e>\n  4354b5:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4354bc:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n  4354c0:\t48 8b 05 d9 9a 02 00 \tmov    0x29ad9(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  4354c7:\t48 89 d1             \tmov    %rdx,%rcx\n  4354ca:\tba 1c 64 45 00       \tmov    $0x45641c,%edx\n  4354cf:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  4354d4:\t48 89 c7             \tmov    %rax,%rdi\n  4354d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4354dc:\te8 5f ce fc ff       \tcallq  402340 <fprintf@plt>\n  4354e1:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4354e6:\te9 d4 0b 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  4354eb:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4354f2:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  4354f6:\t48 3d ff 7f 00 00    \tcmp    $0x7fff,%rax\n  4354fc:\t7f 13                \tjg     435511 <nifti_convert_nim2n1hdr+0x264>\n  4354fe:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435505:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  435509:\t48 3d 00 80 ff ff    \tcmp    $0xffffffffffff8000,%rax\n  43550f:\t7d 36                \tjge    435547 <nifti_convert_nim2n1hdr+0x29a>\n  435511:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435518:\t48 8b 50 28          \tmov    0x28(%rax),%rdx\n  43551c:\t48 8b 05 7d 9a 02 00 \tmov    0x29a7d(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  435523:\t48 89 d1             \tmov    %rdx,%rcx\n  435526:\tba 1f 64 45 00       \tmov    $0x45641f,%edx\n  43552b:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  435530:\t48 89 c7             \tmov    %rax,%rdi\n  435533:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435538:\te8 03 ce fc ff       \tcallq  402340 <fprintf@plt>\n  43553d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  435542:\te9 78 0b 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  435547:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43554e:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  435552:\t48 3d ff 7f 00 00    \tcmp    $0x7fff,%rax\n  435558:\t7f 13                \tjg     43556d <nifti_convert_nim2n1hdr+0x2c0>\n  43555a:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435561:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  435565:\t48 3d 00 80 ff ff    \tcmp    $0xffffffffffff8000,%rax\n  43556b:\t7d 36                \tjge    4355a3 <nifti_convert_nim2n1hdr+0x2f6>\n  43556d:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435574:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n  435578:\t48 8b 05 21 9a 02 00 \tmov    0x29a21(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  43557f:\t48 89 d1             \tmov    %rdx,%rcx\n  435582:\tba 22 64 45 00       \tmov    $0x456422,%edx\n  435587:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  43558c:\t48 89 c7             \tmov    %rax,%rdi\n  43558f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435594:\te8 a7 cd fc ff       \tcallq  402340 <fprintf@plt>\n  435599:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  43559e:\te9 1c 0b 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  4355a3:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4355aa:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  4355ae:\t48 3d ff 7f 00 00    \tcmp    $0x7fff,%rax\n  4355b4:\t7f 13                \tjg     4355c9 <nifti_convert_nim2n1hdr+0x31c>\n  4355b6:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4355bd:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  4355c1:\t48 3d 00 80 ff ff    \tcmp    $0xffffffffffff8000,%rax\n  4355c7:\t7d 36                \tjge    4355ff <nifti_convert_nim2n1hdr+0x352>\n  4355c9:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4355d0:\t48 8b 50 38          \tmov    0x38(%rax),%rdx\n  4355d4:\t48 8b 05 c5 99 02 00 \tmov    0x299c5(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  4355db:\t48 89 d1             \tmov    %rdx,%rcx\n  4355de:\tba 25 64 45 00       \tmov    $0x456425,%edx\n  4355e3:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  4355e8:\t48 89 c7             \tmov    %rax,%rdi\n  4355eb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4355f0:\te8 4b cd fc ff       \tcallq  402340 <fprintf@plt>\n  4355f5:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4355fa:\te9 c0 0a 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  4355ff:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435606:\t8b 80 8c 00 00 00    \tmov    0x8c(%rax),%eax\n  43560c:\t3d ff 7f 00 00       \tcmp    $0x7fff,%eax\n  435611:\t7f 14                \tjg     435627 <nifti_convert_nim2n1hdr+0x37a>\n  435613:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43561a:\t8b 80 8c 00 00 00    \tmov    0x8c(%rax),%eax\n  435620:\t3d 00 80 ff ff       \tcmp    $0xffff8000,%eax\n  435625:\t7d 3b                \tjge    435662 <nifti_convert_nim2n1hdr+0x3b5>\n  435627:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43562e:\t8b 80 8c 00 00 00    \tmov    0x8c(%rax),%eax\n  435634:\t48 63 d0             \tmovslq %eax,%rdx\n  435637:\t48 8b 05 62 99 02 00 \tmov    0x29962(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  43563e:\t48 89 d1             \tmov    %rdx,%rcx\n  435641:\tba 28 64 45 00       \tmov    $0x456428,%edx\n  435646:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  43564b:\t48 89 c7             \tmov    %rax,%rdi\n  43564e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435653:\te8 e8 cc fc ff       \tcallq  402340 <fprintf@plt>\n  435658:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  43565d:\te9 5d 0a 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  435662:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435669:\t8b 80 88 00 00 00    \tmov    0x88(%rax),%eax\n  43566f:\t3d ff 7f 00 00       \tcmp    $0x7fff,%eax\n  435674:\t7f 14                \tjg     43568a <nifti_convert_nim2n1hdr+0x3dd>\n  435676:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43567d:\t8b 80 88 00 00 00    \tmov    0x88(%rax),%eax\n  435683:\t3d 00 80 ff ff       \tcmp    $0xffff8000,%eax\n  435688:\t7d 3b                \tjge    4356c5 <nifti_convert_nim2n1hdr+0x418>\n  43568a:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435691:\t8b 80 88 00 00 00    \tmov    0x88(%rax),%eax\n  435697:\t48 63 d0             \tmovslq %eax,%rdx\n  43569a:\t48 8b 05 ff 98 02 00 \tmov    0x298ff(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  4356a1:\t48 89 d1             \tmov    %rdx,%rcx\n  4356a4:\tba 31 64 45 00       \tmov    $0x456431,%edx\n  4356a9:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  4356ae:\t48 89 c7             \tmov    %rax,%rdi\n  4356b1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4356b6:\te8 85 cc fc ff       \tcallq  402340 <fprintf@plt>\n  4356bb:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  4356c0:\te9 fa 09 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  4356c5:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4356cc:\t48 8b 00             \tmov    (%rax),%rax\n  4356cf:\t66 89 85 c8 fe ff ff \tmov    %ax,-0x138(%rbp)\n  4356d6:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4356dd:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n  4356e1:\t66 89 85 ca fe ff ff \tmov    %ax,-0x136(%rbp)\n  4356e8:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4356ef:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4356f3:\t66 89 85 cc fe ff ff \tmov    %ax,-0x134(%rbp)\n  4356fa:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435701:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  435705:\t66 89 85 ce fe ff ff \tmov    %ax,-0x132(%rbp)\n  43570c:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435713:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n  435717:\t66 89 85 d0 fe ff ff \tmov    %ax,-0x130(%rbp)\n  43571e:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435725:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  435729:\t66 89 85 d2 fe ff ff \tmov    %ax,-0x12e(%rbp)\n  435730:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435737:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  43573b:\t66 89 85 d4 fe ff ff \tmov    %ax,-0x12c(%rbp)\n  435742:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435749:\t48 8b 40 38          \tmov    0x38(%rax),%rax\n  43574d:\t66 89 85 d6 fe ff ff \tmov    %ax,-0x12a(%rbp)\n  435754:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  435758:\tf3 0f 11 85 ec fe ff \tmovss  %xmm0,-0x114(%rbp)\n  43575f:\tff \n  435760:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435767:\tf2 0f 10 80 90 00 00 \tmovsd  0x90(%rax),%xmm0\n  43576e:\t00 \n  43576f:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435773:\tf3 0f 11 85 f0 fe ff \tmovss  %xmm0,-0x110(%rbp)\n  43577a:\tff \n  43577b:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435782:\tf2 0f 10 80 98 00 00 \tmovsd  0x98(%rax),%xmm0\n  435789:\t00 \n  43578a:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  43578e:\tf3 0f 11 85 f4 fe ff \tmovss  %xmm0,-0x10c(%rbp)\n  435795:\tff \n  435796:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43579d:\tf2 0f 10 80 a0 00 00 \tmovsd  0xa0(%rax),%xmm0\n  4357a4:\t00 \n  4357a5:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  4357a9:\tf3 0f 11 85 f8 fe ff \tmovss  %xmm0,-0x108(%rbp)\n  4357b0:\tff \n  4357b1:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4357b8:\tf2 0f 10 80 a8 00 00 \tmovsd  0xa8(%rax),%xmm0\n  4357bf:\t00 \n  4357c0:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  4357c4:\tf3 0f 11 85 fc fe ff \tmovss  %xmm0,-0x104(%rbp)\n  4357cb:\tff \n  4357cc:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4357d3:\tf2 0f 10 80 b0 00 00 \tmovsd  0xb0(%rax),%xmm0\n  4357da:\t00 \n  4357db:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  4357df:\tf3 0f 11 85 00 ff ff \tmovss  %xmm0,-0x100(%rbp)\n  4357e6:\tff \n  4357e7:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4357ee:\tf2 0f 10 80 b8 00 00 \tmovsd  0xb8(%rax),%xmm0\n  4357f5:\t00 \n  4357f6:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  4357fa:\tf3 0f 11 85 04 ff ff \tmovss  %xmm0,-0xfc(%rbp)\n  435801:\tff \n  435802:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435809:\tf2 0f 10 80 c0 00 00 \tmovsd  0xc0(%rax),%xmm0\n  435810:\t00 \n  435811:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435815:\tf3 0f 11 85 08 ff ff \tmovss  %xmm0,-0xf8(%rbp)\n  43581c:\tff \n  43581d:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435824:\t8b 80 8c 00 00 00    \tmov    0x8c(%rax),%eax\n  43582a:\t66 89 85 e6 fe ff ff \tmov    %ax,-0x11a(%rbp)\n  435831:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435838:\t8b 80 88 00 00 00    \tmov    0x88(%rax),%eax\n  43583e:\tc1 e0 03             \tshl    $0x3,%eax\n  435841:\t66 89 85 e8 fe ff ff \tmov    %ax,-0x118(%rbp)\n  435848:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43584f:\tf2 0f 10 80 20 01 00 \tmovsd  0x120(%rax),%xmm0\n  435856:\t00 \n  435857:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43585e:\tf2 0f 10 88 18 01 00 \tmovsd  0x118(%rax),%xmm1\n  435865:\t00 \n  435866:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n  43586a:\t76 36                \tjbe    4358a2 <nifti_convert_nim2n1hdr+0x5f5>\n  43586c:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435873:\tf2 0f 10 80 20 01 00 \tmovsd  0x120(%rax),%xmm0\n  43587a:\t00 \n  43587b:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  43587f:\tf3 0f 11 85 1c ff ff \tmovss  %xmm0,-0xe4(%rbp)\n  435886:\tff \n  435887:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43588e:\tf2 0f 10 80 18 01 00 \tmovsd  0x118(%rax),%xmm0\n  435895:\t00 \n  435896:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  43589a:\tf3 0f 11 85 20 ff ff \tmovss  %xmm0,-0xe0(%rbp)\n  4358a1:\tff \n  4358a2:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4358a9:\tf2 0f 10 80 08 01 00 \tmovsd  0x108(%rax),%xmm0\n  4358b0:\t00 \n  4358b1:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n  4358b5:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n  4358b9:\t7a 0a                \tjp     4358c5 <nifti_convert_nim2n1hdr+0x618>\n  4358bb:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n  4358bf:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n  4358c3:\t74 36                \tje     4358fb <nifti_convert_nim2n1hdr+0x64e>\n  4358c5:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4358cc:\tf2 0f 10 80 08 01 00 \tmovsd  0x108(%rax),%xmm0\n  4358d3:\t00 \n  4358d4:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  4358d8:\tf3 0f 11 85 10 ff ff \tmovss  %xmm0,-0xf0(%rbp)\n  4358df:\tff \n  4358e0:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  4358e7:\tf2 0f 10 80 10 01 00 \tmovsd  0x110(%rax),%xmm0\n  4358ee:\t00 \n  4358ef:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  4358f3:\tf3 0f 11 85 14 ff ff \tmovss  %xmm0,-0xec(%rbp)\n  4358fa:\tff \n  4358fb:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435902:\t0f b6 80 d0 03 00 00 \tmovzbl 0x3d0(%rax),%eax\n  435909:\t84 c0                \ttest   %al,%al\n  43590b:\t74 2f                \tje     43593c <nifti_convert_nim2n1hdr+0x68f>\n  43590d:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435914:\t48 8d 88 d0 03 00 00 \tlea    0x3d0(%rax),%rcx\n  43591b:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  435922:\t48 05 94 00 00 00    \tadd    $0x94,%rax\n  435928:\tba 4f 00 00 00       \tmov    $0x4f,%edx\n  43592d:\t48 89 ce             \tmov    %rcx,%rsi\n  435930:\t48 89 c7             \tmov    %rax,%rdi\n  435933:\te8 48 ca fc ff       \tcallq  402380 <memcpy@plt>\n  435938:\tc6 45 83 00          \tmovb   $0x0,-0x7d(%rbp)\n  43593c:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435943:\t0f b6 80 20 04 00 00 \tmovzbl 0x420(%rax),%eax\n  43594a:\t84 c0                \ttest   %al,%al\n  43594c:\t74 2f                \tje     43597d <nifti_convert_nim2n1hdr+0x6d0>\n  43594e:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435955:\t48 8d 88 20 04 00 00 \tlea    0x420(%rax),%rcx\n  43595c:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  435963:\t48 05 e4 00 00 00    \tadd    $0xe4,%rax\n  435969:\tba 17 00 00 00       \tmov    $0x17,%edx\n  43596e:\t48 89 ce             \tmov    %rcx,%rsi\n  435971:\t48 89 c7             \tmov    %rax,%rdi\n  435974:\te8 07 ca fc ff       \tcallq  402380 <memcpy@plt>\n  435979:\tc6 45 9b 00          \tmovb   $0x0,-0x65(%rbp)\n  43597d:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435984:\t8b 80 a0 03 00 00    \tmov    0x3a0(%rax),%eax\n  43598a:\t85 c0                \ttest   %eax,%eax\n  43598c:\t0f 8e 0a 07 00 00    \tjle    43609c <nifti_convert_nim2n1hdr+0xdef>\n  435992:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435999:\t8b 80 a0 03 00 00    \tmov    0x3a0(%rax),%eax\n  43599f:\t83 f8 01             \tcmp    $0x1,%eax\n  4359a2:\t75 09                \tjne    4359ad <nifti_convert_nim2n1hdr+0x700>\n  4359a4:\tc7 45 f8 6e 2b 31 00 \tmovl   $0x312b6e,-0x8(%rbp)\n  4359ab:\teb 07                \tjmp    4359b4 <nifti_convert_nim2n1hdr+0x707>\n  4359ad:\tc7 45 f8 6e 69 31 00 \tmovl   $0x31696e,-0x8(%rbp)\n  4359b4:\tf3 0f 10 85 f0 fe ff \tmovss  -0x110(%rbp),%xmm0\n  4359bb:\tff \n  4359bc:\tf3 0f 10 0d 7c 25 02 \tmovss  0x2257c(%rip),%xmm1        # 457f40 <nifti_type_list+0x5d00>\n  4359c3:\t00 \n  4359c4:\t0f 54 c1             \tandps  %xmm1,%xmm0\n  4359c7:\tf3 0f 11 85 f0 fe ff \tmovss  %xmm0,-0x110(%rbp)\n  4359ce:\tff \n  4359cf:\tf3 0f 10 85 f4 fe ff \tmovss  -0x10c(%rbp),%xmm0\n  4359d6:\tff \n  4359d7:\tf3 0f 10 0d 61 25 02 \tmovss  0x22561(%rip),%xmm1        # 457f40 <nifti_type_list+0x5d00>\n  4359de:\t00 \n  4359df:\t0f 54 c1             \tandps  %xmm1,%xmm0\n  4359e2:\tf3 0f 11 85 f4 fe ff \tmovss  %xmm0,-0x10c(%rbp)\n  4359e9:\tff \n  4359ea:\tf3 0f 10 85 f8 fe ff \tmovss  -0x108(%rbp),%xmm0\n  4359f1:\tff \n  4359f2:\tf3 0f 10 0d 46 25 02 \tmovss  0x22546(%rip),%xmm1        # 457f40 <nifti_type_list+0x5d00>\n  4359f9:\t00 \n  4359fa:\t0f 54 c1             \tandps  %xmm1,%xmm0\n  4359fd:\tf3 0f 11 85 f8 fe ff \tmovss  %xmm0,-0x108(%rbp)\n  435a04:\tff \n  435a05:\tf3 0f 10 85 fc fe ff \tmovss  -0x104(%rbp),%xmm0\n  435a0c:\tff \n  435a0d:\tf3 0f 10 0d 2b 25 02 \tmovss  0x2252b(%rip),%xmm1        # 457f40 <nifti_type_list+0x5d00>\n  435a14:\t00 \n  435a15:\t0f 54 c1             \tandps  %xmm1,%xmm0\n  435a18:\tf3 0f 11 85 fc fe ff \tmovss  %xmm0,-0x104(%rbp)\n  435a1f:\tff \n  435a20:\tf3 0f 10 85 00 ff ff \tmovss  -0x100(%rbp),%xmm0\n  435a27:\tff \n  435a28:\tf3 0f 10 0d 10 25 02 \tmovss  0x22510(%rip),%xmm1        # 457f40 <nifti_type_list+0x5d00>\n  435a2f:\t00 \n  435a30:\t0f 54 c1             \tandps  %xmm1,%xmm0\n  435a33:\tf3 0f 11 85 00 ff ff \tmovss  %xmm0,-0x100(%rbp)\n  435a3a:\tff \n  435a3b:\tf3 0f 10 85 04 ff ff \tmovss  -0xfc(%rbp),%xmm0\n  435a42:\tff \n  435a43:\tf3 0f 10 0d f5 24 02 \tmovss  0x224f5(%rip),%xmm1        # 457f40 <nifti_type_list+0x5d00>\n  435a4a:\t00 \n  435a4b:\t0f 54 c1             \tandps  %xmm1,%xmm0\n  435a4e:\tf3 0f 11 85 04 ff ff \tmovss  %xmm0,-0xfc(%rbp)\n  435a55:\tff \n  435a56:\tf3 0f 10 85 08 ff ff \tmovss  -0xf8(%rbp),%xmm0\n  435a5d:\tff \n  435a5e:\tf3 0f 10 0d da 24 02 \tmovss  0x224da(%rip),%xmm1        # 457f40 <nifti_type_list+0x5d00>\n  435a65:\t00 \n  435a66:\t0f 54 c1             \tandps  %xmm1,%xmm0\n  435a69:\tf3 0f 11 85 08 ff ff \tmovss  %xmm0,-0xf8(%rbp)\n  435a70:\tff \n  435a71:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435a78:\t8b 80 a4 03 00 00    \tmov    0x3a4(%rax),%eax\n  435a7e:\t3d ff 7f 00 00       \tcmp    $0x7fff,%eax\n  435a83:\t7f 14                \tjg     435a99 <nifti_convert_nim2n1hdr+0x7ec>\n  435a85:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435a8c:\t8b 80 a4 03 00 00    \tmov    0x3a4(%rax),%eax\n  435a92:\t3d 00 80 ff ff       \tcmp    $0xffff8000,%eax\n  435a97:\t7d 3b                \tjge    435ad4 <nifti_convert_nim2n1hdr+0x827>\n  435a99:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435aa0:\t8b 80 a4 03 00 00    \tmov    0x3a4(%rax),%eax\n  435aa6:\t48 63 d0             \tmovslq %eax,%rdx\n  435aa9:\t48 8b 05 f0 94 02 00 \tmov    0x294f0(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  435ab0:\t48 89 d1             \tmov    %rdx,%rcx\n  435ab3:\tba 38 64 45 00       \tmov    $0x456438,%edx\n  435ab8:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  435abd:\t48 89 c7             \tmov    %rax,%rdi\n  435ac0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435ac5:\te8 76 c8 fc ff       \tcallq  402340 <fprintf@plt>\n  435aca:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  435acf:\te9 eb 05 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  435ad4:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435adb:\t8b 80 28 01 00 00    \tmov    0x128(%rax),%eax\n  435ae1:\t3d ff 7f 00 00       \tcmp    $0x7fff,%eax\n  435ae6:\t7f 14                \tjg     435afc <nifti_convert_nim2n1hdr+0x84f>\n  435ae8:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435aef:\t8b 80 28 01 00 00    \tmov    0x128(%rax),%eax\n  435af5:\t3d 00 80 ff ff       \tcmp    $0xffff8000,%eax\n  435afa:\t7d 3b                \tjge    435b37 <nifti_convert_nim2n1hdr+0x88a>\n  435afc:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435b03:\t8b 80 28 01 00 00    \tmov    0x128(%rax),%eax\n  435b09:\t48 63 d0             \tmovslq %eax,%rdx\n  435b0c:\t48 8b 05 8d 94 02 00 \tmov    0x2948d(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  435b13:\t48 89 d1             \tmov    %rdx,%rcx\n  435b16:\tba 44 64 45 00       \tmov    $0x456444,%edx\n  435b1b:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  435b20:\t48 89 c7             \tmov    %rax,%rdi\n  435b23:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435b28:\te8 13 c8 fc ff       \tcallq  402340 <fprintf@plt>\n  435b2d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  435b32:\te9 88 05 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  435b37:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435b3e:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n  435b44:\t3d ff 7f 00 00       \tcmp    $0x7fff,%eax\n  435b49:\t7f 14                \tjg     435b5f <nifti_convert_nim2n1hdr+0x8b2>\n  435b4b:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435b52:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n  435b58:\t3d 00 80 ff ff       \tcmp    $0xffff8000,%eax\n  435b5d:\t7d 3b                \tjge    435b9a <nifti_convert_nim2n1hdr+0x8ed>\n  435b5f:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435b66:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n  435b6c:\t48 63 d0             \tmovslq %eax,%rdx\n  435b6f:\t48 8b 05 2a 94 02 00 \tmov    0x2942a(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  435b76:\t48 89 d1             \tmov    %rdx,%rcx\n  435b79:\tba 4f 64 45 00       \tmov    $0x45644f,%edx\n  435b7e:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  435b83:\t48 89 c7             \tmov    %rax,%rdi\n  435b86:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435b8b:\te8 b0 c7 fc ff       \tcallq  402340 <fprintf@plt>\n  435b90:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  435b95:\te9 25 05 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  435b9a:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435ba1:\t8b 80 a4 03 00 00    \tmov    0x3a4(%rax),%eax\n  435ba7:\t66 89 85 e4 fe ff ff \tmov    %ax,-0x11c(%rbp)\n  435bae:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435bb5:\tf2 0f 10 80 a8 03 00 \tmovsd  0x3a8(%rax),%xmm0\n  435bbc:\t00 \n  435bbd:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435bc1:\tf3 0f 11 85 d8 fe ff \tmovss  %xmm0,-0x128(%rbp)\n  435bc8:\tff \n  435bc9:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435bd0:\tf2 0f 10 80 b0 03 00 \tmovsd  0x3b0(%rax),%xmm0\n  435bd7:\t00 \n  435bd8:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435bdc:\tf3 0f 11 85 dc fe ff \tmovss  %xmm0,-0x124(%rbp)\n  435be3:\tff \n  435be4:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435beb:\tf2 0f 10 80 b8 03 00 \tmovsd  0x3b8(%rax),%xmm0\n  435bf2:\t00 \n  435bf3:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435bf7:\tf3 0f 11 85 e0 fe ff \tmovss  %xmm0,-0x120(%rbp)\n  435bfe:\tff \n  435bff:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435c06:\t0f b6 80 c0 03 00 00 \tmovzbl 0x3c0(%rax),%eax\n  435c0d:\t84 c0                \ttest   %al,%al\n  435c0f:\t74 2f                \tje     435c40 <nifti_convert_nim2n1hdr+0x993>\n  435c11:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435c18:\t48 8d 88 c0 03 00 00 \tlea    0x3c0(%rax),%rcx\n  435c1f:\t48 8d 85 a0 fe ff ff \tlea    -0x160(%rbp),%rax\n  435c26:\t48 05 48 01 00 00    \tadd    $0x148,%rax\n  435c2c:\tba 0f 00 00 00       \tmov    $0xf,%edx\n  435c31:\t48 89 ce             \tmov    %rcx,%rsi\n  435c34:\t48 89 c7             \tmov    %rax,%rdi\n  435c37:\te8 44 c7 fc ff       \tcallq  402380 <memcpy@plt>\n  435c3c:\tc6 45 f7 00          \tmovb   $0x0,-0x9(%rbp)\n  435c40:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435c47:\t48 8b 80 48 04 00 00 \tmov    0x448(%rax),%rax\n  435c4e:\tf3 48 0f 2a c0       \tcvtsi2ss %rax,%xmm0\n  435c53:\tf3 0f 11 85 0c ff ff \tmovss  %xmm0,-0xf4(%rbp)\n  435c5a:\tff \n  435c5b:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435c62:\t8b 80 98 03 00 00    \tmov    0x398(%rax),%eax\n  435c68:\t83 e0 07             \tand    $0x7,%eax\n  435c6b:\t89 c2                \tmov    %eax,%edx\n  435c6d:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435c74:\t8b 80 9c 03 00 00    \tmov    0x39c(%rax),%eax\n  435c7a:\t83 e0 38             \tand    $0x38,%eax\n  435c7d:\t09 d0                \tor     %edx,%eax\n  435c7f:\t88 85 1b ff ff ff    \tmov    %al,-0xe5(%rbp)\n  435c85:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435c8c:\tf2 0f 10 80 90 03 00 \tmovsd  0x390(%rax),%xmm0\n  435c93:\t00 \n  435c94:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435c98:\tf3 0f 11 85 28 ff ff \tmovss  %xmm0,-0xd8(%rbp)\n  435c9f:\tff \n  435ca0:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435ca7:\t8b 80 28 01 00 00    \tmov    0x128(%rax),%eax\n  435cad:\t85 c0                \ttest   %eax,%eax\n  435caf:\t0f 8e d4 00 00 00    \tjle    435d89 <nifti_convert_nim2n1hdr+0xadc>\n  435cb5:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435cbc:\t8b 80 28 01 00 00    \tmov    0x128(%rax),%eax\n  435cc2:\t66 89 45 9c          \tmov    %ax,-0x64(%rbp)\n  435cc6:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435ccd:\tf2 0f 10 80 58 01 00 \tmovsd  0x158(%rax),%xmm0\n  435cd4:\t00 \n  435cd5:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435cd9:\tf3 0f 11 45 a0       \tmovss  %xmm0,-0x60(%rbp)\n  435cde:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435ce5:\tf2 0f 10 80 60 01 00 \tmovsd  0x160(%rax),%xmm0\n  435cec:\t00 \n  435ced:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435cf1:\tf3 0f 11 45 a4       \tmovss  %xmm0,-0x5c(%rbp)\n  435cf6:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435cfd:\tf2 0f 10 80 68 01 00 \tmovsd  0x168(%rax),%xmm0\n  435d04:\t00 \n  435d05:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435d09:\tf3 0f 11 45 a8       \tmovss  %xmm0,-0x58(%rbp)\n  435d0e:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435d15:\tf2 0f 10 80 70 01 00 \tmovsd  0x170(%rax),%xmm0\n  435d1c:\t00 \n  435d1d:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435d21:\tf3 0f 11 45 ac       \tmovss  %xmm0,-0x54(%rbp)\n  435d26:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435d2d:\tf2 0f 10 80 78 01 00 \tmovsd  0x178(%rax),%xmm0\n  435d34:\t00 \n  435d35:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435d39:\tf3 0f 11 45 b0       \tmovss  %xmm0,-0x50(%rbp)\n  435d3e:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435d45:\tf2 0f 10 80 80 01 00 \tmovsd  0x180(%rax),%xmm0\n  435d4c:\t00 \n  435d4d:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435d51:\tf3 0f 11 45 b4       \tmovss  %xmm0,-0x4c(%rbp)\n  435d56:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435d5d:\tf2 0f 10 80 88 01 00 \tmovsd  0x188(%rax),%xmm0\n  435d64:\t00 \n  435d65:\t66 0f ef c9          \tpxor   %xmm1,%xmm1\n  435d69:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n  435d6d:\t72 0a                \tjb     435d79 <nifti_convert_nim2n1hdr+0xacc>\n  435d6f:\tf3 0f 10 05 69 21 02 \tmovss  0x22169(%rip),%xmm0        # 457ee0 <nifti_type_list+0x5ca0>\n  435d76:\t00 \n  435d77:\teb 08                \tjmp    435d81 <nifti_convert_nim2n1hdr+0xad4>\n  435d79:\tf3 0f 10 05 9f 21 02 \tmovss  0x2219f(%rip),%xmm0        # 457f20 <nifti_type_list+0x5ce0>\n  435d80:\t00 \n  435d81:\tf3 0f 11 85 ec fe ff \tmovss  %xmm0,-0x114(%rbp)\n  435d88:\tff \n  435d89:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435d90:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n  435d96:\t85 c0                \ttest   %eax,%eax\n  435d98:\t0f 8e 31 01 00 00    \tjle    435ecf <nifti_convert_nim2n1hdr+0xc22>\n  435d9e:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435da5:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n  435dab:\t66 89 45 9e          \tmov    %ax,-0x62(%rbp)\n  435daf:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435db6:\tf2 0f 10 80 90 02 00 \tmovsd  0x290(%rax),%xmm0\n  435dbd:\t00 \n  435dbe:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435dc2:\tf3 0f 11 45 b8       \tmovss  %xmm0,-0x48(%rbp)\n  435dc7:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435dce:\tf2 0f 10 80 98 02 00 \tmovsd  0x298(%rax),%xmm0\n  435dd5:\t00 \n  435dd6:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435dda:\tf3 0f 11 45 bc       \tmovss  %xmm0,-0x44(%rbp)\n  435ddf:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435de6:\tf2 0f 10 80 a0 02 00 \tmovsd  0x2a0(%rax),%xmm0\n  435ded:\t00 \n  435dee:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435df2:\tf3 0f 11 45 c0       \tmovss  %xmm0,-0x40(%rbp)\n  435df7:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435dfe:\tf2 0f 10 80 a8 02 00 \tmovsd  0x2a8(%rax),%xmm0\n  435e05:\t00 \n  435e06:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435e0a:\tf3 0f 11 45 c4       \tmovss  %xmm0,-0x3c(%rbp)\n  435e0f:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435e16:\tf2 0f 10 80 b0 02 00 \tmovsd  0x2b0(%rax),%xmm0\n  435e1d:\t00 \n  435e1e:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435e22:\tf3 0f 11 45 c8       \tmovss  %xmm0,-0x38(%rbp)\n  435e27:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435e2e:\tf2 0f 10 80 b8 02 00 \tmovsd  0x2b8(%rax),%xmm0\n  435e35:\t00 \n  435e36:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435e3a:\tf3 0f 11 45 cc       \tmovss  %xmm0,-0x34(%rbp)\n  435e3f:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435e46:\tf2 0f 10 80 c0 02 00 \tmovsd  0x2c0(%rax),%xmm0\n  435e4d:\t00 \n  435e4e:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435e52:\tf3 0f 11 45 d0       \tmovss  %xmm0,-0x30(%rbp)\n  435e57:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435e5e:\tf2 0f 10 80 c8 02 00 \tmovsd  0x2c8(%rax),%xmm0\n  435e65:\t00 \n  435e66:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435e6a:\tf3 0f 11 45 d4       \tmovss  %xmm0,-0x2c(%rbp)\n  435e6f:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435e76:\tf2 0f 10 80 d0 02 00 \tmovsd  0x2d0(%rax),%xmm0\n  435e7d:\t00 \n  435e7e:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435e82:\tf3 0f 11 45 d8       \tmovss  %xmm0,-0x28(%rbp)\n  435e87:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435e8e:\tf2 0f 10 80 d8 02 00 \tmovsd  0x2d8(%rax),%xmm0\n  435e95:\t00 \n  435e96:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435e9a:\tf3 0f 11 45 dc       \tmovss  %xmm0,-0x24(%rbp)\n  435e9f:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435ea6:\tf2 0f 10 80 e0 02 00 \tmovsd  0x2e0(%rax),%xmm0\n  435ead:\t00 \n  435eae:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435eb2:\tf3 0f 11 45 e0       \tmovss  %xmm0,-0x20(%rbp)\n  435eb7:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435ebe:\tf2 0f 10 80 e8 02 00 \tmovsd  0x2e8(%rax),%xmm0\n  435ec5:\t00 \n  435ec6:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  435eca:\tf3 0f 11 45 e4       \tmovss  %xmm0,-0x1c(%rbp)\n  435ecf:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435ed6:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n  435edc:\t3d ff 7f 00 00       \tcmp    $0x7fff,%eax\n  435ee1:\t7f 14                \tjg     435ef7 <nifti_convert_nim2n1hdr+0xc4a>\n  435ee3:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435eea:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n  435ef0:\t3d 00 80 ff ff       \tcmp    $0xffff8000,%eax\n  435ef5:\t7d 3b                \tjge    435f32 <nifti_convert_nim2n1hdr+0xc85>\n  435ef7:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435efe:\t8b 80 2c 01 00 00    \tmov    0x12c(%rax),%eax\n  435f04:\t48 63 d0             \tmovslq %eax,%rdx\n  435f07:\t48 8b 05 92 90 02 00 \tmov    0x29092(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  435f0e:\t48 89 d1             \tmov    %rdx,%rcx\n  435f11:\tba 4f 64 45 00       \tmov    $0x45644f,%edx\n  435f16:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  435f1b:\t48 89 c7             \tmov    %rax,%rdi\n  435f1e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435f23:\te8 18 c4 fc ff       \tcallq  402340 <fprintf@plt>\n  435f28:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  435f2d:\te9 8d 01 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  435f32:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435f39:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n  435f40:\t48 3d ff 7f 00 00    \tcmp    $0x7fff,%rax\n  435f46:\t7f 16                \tjg     435f5e <nifti_convert_nim2n1hdr+0xcb1>\n  435f48:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435f4f:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n  435f56:\t48 3d 00 80 ff ff    \tcmp    $0xffffffffffff8000,%rax\n  435f5c:\t7d 39                \tjge    435f97 <nifti_convert_nim2n1hdr+0xcea>\n  435f5e:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435f65:\t48 8b 90 40 01 00 00 \tmov    0x140(%rax),%rdx\n  435f6c:\t48 8b 05 2d 90 02 00 \tmov    0x2902d(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  435f73:\t48 89 d1             \tmov    %rdx,%rcx\n  435f76:\tba 5a 64 45 00       \tmov    $0x45645a,%edx\n  435f7b:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  435f80:\t48 89 c7             \tmov    %rax,%rdi\n  435f83:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435f88:\te8 b3 c3 fc ff       \tcallq  402340 <fprintf@plt>\n  435f8d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  435f92:\te9 28 01 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  435f97:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435f9e:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n  435fa5:\t48 3d ff 7f 00 00    \tcmp    $0x7fff,%rax\n  435fab:\t7f 16                \tjg     435fc3 <nifti_convert_nim2n1hdr+0xd16>\n  435fad:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435fb4:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n  435fbb:\t48 3d 00 80 ff ff    \tcmp    $0xffffffffffff8000,%rax\n  435fc1:\t7d 39                \tjge    435ffc <nifti_convert_nim2n1hdr+0xd4f>\n  435fc3:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  435fca:\t48 8b 90 48 01 00 00 \tmov    0x148(%rax),%rdx\n  435fd1:\t48 8b 05 c8 8f 02 00 \tmov    0x28fc8(%rip),%rax        # 45efa0 <stderr@@GLIBC_2.2.5>\n  435fd8:\t48 89 d1             \tmov    %rdx,%rcx\n  435fdb:\tba 66 64 45 00       \tmov    $0x456466,%edx\n  435fe0:\tbe e0 63 45 00       \tmov    $0x4563e0,%esi\n  435fe5:\t48 89 c7             \tmov    %rax,%rdi\n  435fe8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  435fed:\te8 4e c3 fc ff       \tcallq  402340 <fprintf@plt>\n  435ff2:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  435ff7:\te9 c3 00 00 00       \tjmpq   4360bf <nifti_convert_nim2n1hdr+0xe12>\n  435ffc:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  436003:\t8b 80 30 01 00 00    \tmov    0x130(%rax),%eax\n  436009:\t83 e0 03             \tand    $0x3,%eax\n  43600c:\t89 c2                \tmov    %eax,%edx\n  43600e:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  436015:\t8b 80 34 01 00 00    \tmov    0x134(%rax),%eax\n  43601b:\t0f be c0             \tmovsbl %al,%eax\n  43601e:\tc1 e0 02             \tshl    $0x2,%eax\n  436021:\t83 e0 0c             \tand    $0xc,%eax\n  436024:\t09 c2                \tor     %eax,%edx\n  436026:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43602d:\t8b 80 38 01 00 00    \tmov    0x138(%rax),%eax\n  436033:\t0f be c0             \tmovsbl %al,%eax\n  436036:\tc1 e0 04             \tshl    $0x4,%eax\n  436039:\t83 e0 30             \tand    $0x30,%eax\n  43603c:\t09 d0                \tor     %edx,%eax\n  43603e:\t88 85 c7 fe ff ff    \tmov    %al,-0x139(%rbp)\n  436044:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43604b:\t8b 80 3c 01 00 00    \tmov    0x13c(%rax),%eax\n  436051:\t88 85 1a ff ff ff    \tmov    %al,-0xe6(%rbp)\n  436057:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  43605e:\t48 8b 80 40 01 00 00 \tmov    0x140(%rax),%rax\n  436065:\t66 89 85 ea fe ff ff \tmov    %ax,-0x116(%rbp)\n  43606c:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  436073:\t48 8b 80 48 01 00 00 \tmov    0x148(%rax),%rax\n  43607a:\t66 89 85 18 ff ff ff \tmov    %ax,-0xe8(%rbp)\n  436081:\t48 8b 85 98 fe ff ff \tmov    -0x168(%rbp),%rax\n  436088:\tf2 0f 10 80 50 01 00 \tmovsd  0x150(%rax),%xmm0\n  43608f:\t00 \n  436090:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n  436094:\tf3 0f 11 85 24 ff ff \tmovss  %xmm0,-0xdc(%rbp)\n  43609b:\tff \n  43609c:\t48 8d 8d a0 fe ff ff \tlea    -0x160(%rbp),%rcx\n  4360a3:\t48 8b 85 90 fe ff ff \tmov    -0x170(%rbp),%rax\n  4360aa:\tba 5c 01 00 00       \tmov    $0x15c,%edx\n  4360af:\t48 89 ce             \tmov    %rcx,%rsi\n  4360b2:\t48 89 c7             \tmov    %rax,%rdi\n  4360b5:\te8 c6 c2 fc ff       \tcallq  402380 <memcpy@plt>\n  4360ba:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4360bf:\tc9                   \tleaveq \n  4360c0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall nifti_convert_nim2n1hdr(_BYTE *a1, void *a2) {\n  float v3;\n  float v4;\n  float v5;\n  float v6;\n  float v7;\n  float v8;\n  float v9;\n  float v10;\n  float v11;\n  float v12;\n  float v13;\n  float v14;\n  float v15;\n  float v16;\n  float v17;\n  float v18;\n  float v19;\n  float v20;\n  float v21;\n  float v22;\n  float v23;\n  int v24;\n  float v25;\n  float v26;\n  float v27;\n  float v28;\n  float v29;\n  float v30;\n  float v31;\n  float v32;\n  float v33;\n  float v34;\n  float v35;\n  float v36;\n  float v37;\n  int <span class=\"supfact\">s</span>[Number];\n  char v39;\n  char v40;\n  __int16 v41;\n  __int16 v42;\n  __int16 v43;\n  __int16 v44;\n  __int16 v45;\n  __int16 v46;\n  __int16 v47;\n  __int16 v48;\n  float v49;\n  float v50;\n  float v51;\n  __int16 v52;\n  __int16 v53;\n  __int16 v54;\n  __int16 v55;\n  int v56;\n  float v57;\n  float v58;\n  float v59;\n  float v60;\n  float v61;\n  float v62;\n  float v63;\n  float v64;\n  float v65;\n  float v66;\n  __int16 v67;\n  char v68;\n  char v69;\n  float v70;\n  float v71;\n  float v72;\n  float v73;\n  _BYTE v74[Number];\n  _BYTE v75[Number];\n  __int16 v76;\n  __int16 v77;\n  float v78;\n  float v79;\n  float v80;\n  float v81;\n  float v82;\n  float v83;\n  float v84;\n  float v85;\n  float v86;\n  float v87;\n  float v88;\n  float v89;\n  float v90;\n  float v91;\n  float v92;\n  float v93;\n  float v94;\n  float v95;\n  _BYTE v96[Number];\n  int v97;\n  if (!a2) {\n    fwrite(String, Number, Number, stderr);\n    return Number L;\n  }\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  <span class=\"supfact\">s</span>[Number] = Number;\n  v39 = Number;\n  if (*(__int64 *)a1 > Number || *(__int64 *)a1 < Number) {\n    fprintf(stderr, String, String, *(_QWORD *)a1);\n    return Number L;\n  }\n  if (*((__int64 *)a1 + Number) > Number ||\n      *((__int64 *)a1 + Number) < Number) {\n    fprintf(stderr, String, String, *((_QWORD *)a1 + Number));\n    return Number L;\n  }\n  if (*((__int64 *)a1 + Number) > Number ||\n      *((__int64 *)a1 + Number) < Number) {\n    fprintf(stderr, String, String, *((_QWORD *)a1 + Number));\n    return Number L;\n  }\n  if (*((__int64 *)a1 + Number) > Number ||\n      *((__int64 *)a1 + Number) < Number) {\n    fprintf(stderr, String, String, *((_QWORD *)a1 + Number));\n    return Number L;\n  }\n  if (*((__int64 *)a1 + Number) > Number ||\n      *((__int64 *)a1 + Number) < Number) {\n    fprintf(stderr, String, String, *((_QWORD *)a1 + Number));\n    return Number L;\n  }\n  if (*((__int64 *)a1 + Number) > Number ||\n      *((__int64 *)a1 + Number) < Number) {\n    fprintf(stderr, String, String, *((_QWORD *)a1 + Number));\n    return Number L;\n  }\n  if (*((__int64 *)a1 + Number) > Number ||\n      *((__int64 *)a1 + Number) < Number) {\n    fprintf(stderr, String, String, *((_QWORD *)a1 + Number));\n    return Number L;\n  }\n  if (*((__int64 *)a1 + Number) > Number ||\n      *((__int64 *)a1 + Number) < Number) {\n    fprintf(stderr, String, String, *((_QWORD *)a1 + Number));\n    return Number L;\n  }\n  if (*((int *)a1 + Number) > Number || *((int *)a1 + Number) < Number) {\n    fprintf(stderr, String, String, *((int *)a1 + Number));\n    return Number L;\n  }\n  if (*((int *)a1 + Number) > Number || *((int *)a1 + Number) < Number) {\n    fprintf(stderr, String, String, *((int *)a1 + Number));\n    return Number L;\n  }\n  v41 = *(_QWORD *)a1;\n  v42 = *((_QWORD *)a1 + Number);\n  v43 = *((_QWORD *)a1 + Number);\n  v44 = *((_QWORD *)a1 + Number);\n  v45 = *((_QWORD *)a1 + Number);\n  v46 = *((_QWORD *)a1 + Number);\n  v47 = *((_QWORD *)a1 + Number);\n  v48 = *((_QWORD *)a1 + Number);\n  v56 = Number;\n  v3 = *((double *)a1 + Number);\n  v57 = v3;\n  v4 = *((double *)a1 + Number);\n  v58 = v4;\n  v5 = *((double *)a1 + Number);\n  v59 = v5;\n  v6 = *((double *)a1 + Number);\n  v60 = v6;\n  v7 = *((double *)a1 + Number);\n  v61 = v7;\n  v8 = *((double *)a1 + Number);\n  v62 = v8;\n  v9 = *((double *)a1 + Number);\n  v63 = v9;\n  v53 = *((_DWORD *)a1 + Number);\n  v54 = Number * *((_DWORD *)a1 + Number);\n  if (*((double *)a1 + Number) > *((double *)a1 + Number)) {\n    v10 = *((double *)a1 + Number);\n    v70 = v10;\n    v11 = *((double *)a1 + Number);\n    v71 = v11;\n  }\n  if (*((double *)a1 + Number) != Number) {\n    v12 = *((double *)a1 + Number);\n    v65 = v12;\n    v13 = *((double *)a1 + Number);\n    v66 = v13;\n  }\n  if (a1[Number]) {\n    memcpy(v74, a1 + Number, Number);\n    v74[Number] = Number;\n  }\n  if (a1[Number]) {\n    memcpy(v75, a1 + Number, Number);\n    v75[Number] = Number;\n  }\n  if (*((int *)a1 + Number) > Number) {\n    if (*((_DWORD *)a1 + Number) == Number)\n      v97 = Number;\n    else\n      v97 = Number;\n    v57 = fabs(v57);\n    v58 = fabs(v58);\n    v59 = fabs(v59);\n    v60 = fabs(v60);\n    v61 = fabs(v61);\n    v62 = fabs(v62);\n    v63 = fabs(v63);\n    if (*((int *)a1 + Number) > Number || *((int *)a1 + Number) < Number) {\n      fprintf(stderr, String, String, *((int *)a1 + Number));\n      return Number L;\n    }\n    if (*((int *)a1 + Number) > Number || *((int *)a1 + Number) < Number) {\n      fprintf(stderr, String, String, *((int *)a1 + Number));\n      return Number L;\n    }\n    if (*((int *)a1 + Number) > Number || *((int *)a1 + Number) < Number)\n      goto LABEL_53;\n    v52 = *((_DWORD *)a1 + Number);\n    v14 = *((double *)a1 + Number);\n    v49 = v14;\n    v15 = *((double *)a1 + Number);\n    v50 = v15;\n    v16 = *((double *)a1 + Number);\n    v51 = v16;\n    if (a1[Number]) {\n      memcpy(v96, a1 + Number, Number);\n      v96[Number] = Number;\n    }\n    v64 = (float)(int)*((_QWORD *)a1 + Number);\n    v69 = a1[Number] & Number | *((_DWORD *)a1 + Number) & Number;\n    v17 = *((double *)a1 + Number);\n    v73 = v17;\n    if (*((int *)a1 + Number) > Number) {\n      v76 = *((_DWORD *)a1 + Number);\n      v18 = *((double *)a1 + Number);\n      v78 = v18;\n      v19 = *((double *)a1 + Number);\n      v79 = v19;\n      v20 = *((double *)a1 + Number);\n      v80 = v20;\n      v21 = *((double *)a1 + Number);\n      v81 = v21;\n      v22 = *((double *)a1 + Number);\n      v82 = v22;\n      v23 = *((double *)a1 + Number);\n      v83 = v23;\n      if (*((double *)a1 + Number) < Number)\n        v24 = Number;\n      else\n        v24 = Number;\n      v56 = v24;\n    }\n    if (*((int *)a1 + Number) > Number) {\n      v77 = *((_DWORD *)a1 + Number);\n      v25 = *((double *)a1 + Number);\n      v84 = v25;\n      v26 = *((double *)a1 + Number);\n      v85 = v26;\n      v27 = *((double *)a1 + Number);\n      v86 = v27;\n      v28 = *((double *)a1 + Number);\n      v87 = v28;\n      v29 = *((double *)a1 + Number);\n      v88 = v29;\n      v30 = *((double *)a1 + Number);\n      v89 = v30;\n      v31 = *((double *)a1 + Number);\n      v90 = v31;\n      v32 = *((double *)a1 + Number);\n      v91 = v32;\n      v33 = *((double *)a1 + Number);\n      v92 = v33;\n      v34 = *((double *)a1 + Number);\n      v93 = v34;\n      v35 = *((double *)a1 + Number);\n      v94 = v35;\n      v36 = *((double *)a1 + Number);\n      v95 = v36;\n    }\n    if (*((int *)a1 + Number) > Number || *((int *)a1 + Number) < Number) {\n    LABEL_53:\n      fprintf(stderr, String, String, *((int *)a1 + Number));\n      return Number L;\n    }\n    if (*((__int64 *)a1 + Number) > Number ||\n        *((__int64 *)a1 + Number) < Number) {\n      fprintf(stderr, String, String, *((_QWORD *)a1 + Number));\n      return Number L;\n    }\n    if (*((__int64 *)a1 + Number) > Number ||\n        *((__int64 *)a1 + Number) < Number) {\n      fprintf(stderr, String, String, *((_QWORD *)a1 + Number));\n      return Number L;\n    }\n    v40 = (Number * *((_DWORD *)a1 + Number)) & Number | a1[Number] & Number |\n          (Number * *((_DWORD *)a1 + Number)) & Number;\n    v68 = *((_DWORD *)a1 + Number);\n    v55 = *((_QWORD *)a1 + Number);\n    v67 = *((_QWORD *)a1 + Number);\n    v37 = *((double *)a1 + Number);\n    v72 = v37;\n  }\n  memcpy(a2, <span class=\"supfact\">s</span>, Number);\n  return Number L;\n}", "code_t": "int __cdecl nifti_convert_nim2n1hdr(const nifti_image *nim,\n                                    nifti_1_header_0 *hdr) {\n  float v3;\n  float v4;\n  float v5;\n  float v6;\n  float v7;\n  float v8;\n  float v9;\n  float v10;\n  float v11;\n  float v12;\n  float v13;\n  float v14;\n  float v15;\n  float v16;\n  float v17;\n  float v18;\n  float v19;\n  float v20;\n  float v21;\n  float v22;\n  float v23;\n  int v24;\n  float v25;\n  float v26;\n  float v27;\n  float v28;\n  float v29;\n  float v30;\n  float v31;\n  float v32;\n  float v33;\n  float v34;\n  float v35;\n  float v36;\n  float v37;\n  nifti_1_header_0 <span class=\"supfact\">nhdr</span>;\n  if (!hdr) {\n    fwrite(String, Number, Number, stderr);\n    return Number;\n  }\n  memset(&<span class=\"supfact\">nhdr</span>, Number, sizeof(<span class=\"supfact\">nhdr</span>));\n  <span class=\"supfact\">nhdr</span>.sizeof_hdr = Number;\n  <span class=\"supfact\">nhdr</span>.regular = Number;\n  if (nim->ndim > Number || nim->ndim < Number) {\n    fprintf(stderr, String, String, nim->ndim);\n    return Number;\n  }\n  if (nim->nx > Number || nim->nx < Number) {\n    fprintf(stderr, String, String, nim->nx);\n    return Number;\n  }\n  if (nim->ny > Number || nim->ny < Number) {\n    fprintf(stderr, String, String, nim->ny);\n    return Number;\n  }\n  if (nim->nz > Number || nim->nz < Number) {\n    fprintf(stderr, String, String, nim->nz);\n    return Number;\n  }\n  if (nim->nt > Number || nim->nt < Number) {\n    fprintf(stderr, String, String, nim->nt);\n    return Number;\n  }\n  if (nim->nu > Number || nim->nu < Number) {\n    fprintf(stderr, String, String, nim->nu);\n    return Number;\n  }\n  if (nim->nv > Number || nim->nv < Number) {\n    fprintf(stderr, String, String, nim->nv);\n    return Number;\n  }\n  if (nim->nw > Number || nim->nw < Number) {\n    fprintf(stderr, String, String, nim->nw);\n    return Number;\n  }\n  if (nim->datatype > Number || nim->datatype < Number) {\n    fprintf(stderr, String, String, nim->datatype);\n    return Number;\n  }\n  if (nim->nbyper > Number || nim->nbyper < Number) {\n    fprintf(stderr, String, String, nim->nbyper);\n    return Number;\n  }\n  <span class=\"supfact\">nhdr</span>.dim[Number] = nim->ndim;\n  <span class=\"supfact\">nhdr</span>.dim[Number] = nim->nx;\n  <span class=\"supfact\">nhdr</span>.dim[Number] = nim->ny;\n  <span class=\"supfact\">nhdr</span>.dim[Number] = nim->nz;\n  <span class=\"supfact\">nhdr</span>.dim[Number] = nim->nt;\n  <span class=\"supfact\">nhdr</span>.dim[Number] = nim->nu;\n  <span class=\"supfact\">nhdr</span>.dim[Number] = nim->nv;\n  <span class=\"supfact\">nhdr</span>.dim[Number] = nim->nw;\n  <span class=\"supfact\">nhdr</span>.pixdim[Number] = Number;\n  v3 = nim->dx;\n  <span class=\"supfact\">nhdr</span>.pixdim[Number] = v3;\n  v4 = nim->dy;\n  <span class=\"supfact\">nhdr</span>.pixdim[Number] = v4;\n  v5 = nim->dz;\n  <span class=\"supfact\">nhdr</span>.pixdim[Number] = v5;\n  v6 = nim->dt;\n  <span class=\"supfact\">nhdr</span>.pixdim[Number] = v6;\n  v7 = nim->du;\n  <span class=\"supfact\">nhdr</span>.pixdim[Number] = v7;\n  v8 = nim->dv;\n  <span class=\"supfact\">nhdr</span>.pixdim[Number] = v8;\n  v9 = nim->dw;\n  <span class=\"supfact\">nhdr</span>.pixdim[Number] = v9;\n  <span class=\"supfact\">nhdr</span>.datatype = nim->datatype;\n  <span class=\"supfact\">nhdr</span>.bitpix = Number * nim->nbyper;\n  if (nim->cal_max > nim->cal_min) {\n    v10 = nim->cal_max;\n    <span class=\"supfact\">nhdr</span>.cal_max = v10;\n    v11 = nim->cal_min;\n    <span class=\"supfact\">nhdr</span>.cal_min = v11;\n  }\n  if (nim->scl_slope != Number) {\n    v12 = nim->scl_slope;\n    <span class=\"supfact\">nhdr</span>.scl_slope = v12;\n    v13 = nim->scl_inter;\n    <span class=\"supfact\">nhdr</span>.scl_inter = v13;\n  }\n  if (nim->descrip[Number]) {\n    memcpy(<span class=\"supfact\">nhdr</span>.descrip, nim->descrip, Number);\n    <span class=\"supfact\">nhdr</span>.descrip[Number] = Number;\n  }\n  if (nim->aux_file[Number]) {\n    memcpy(<span class=\"supfact\">nhdr</span>.aux_file, nim->aux_file, Number);\n    <span class=\"supfact\">nhdr</span>.aux_file[Number] = Number;\n  }\n  if (nim->nifti_type > Number) {\n    if (nim->nifti_type == Number)\n      strcpy(<span class=\"supfact\">nhdr</span>.magic, String);\n    else\n      strcpy(<span class=\"supfact\">nhdr</span>.magic, String);\n    <span class=\"supfact\">nhdr</span>.pixdim[Number] =\n        fabs(<span class=\"supfact\">nhdr</span>.pixdim[Number]);\n    <span class=\"supfact\">nhdr</span>.pixdim[Number] =\n        fabs(<span class=\"supfact\">nhdr</span>.pixdim[Number]);\n    <span class=\"supfact\">nhdr</span>.pixdim[Number] =\n        fabs(<span class=\"supfact\">nhdr</span>.pixdim[Number]);\n    <span class=\"supfact\">nhdr</span>.pixdim[Number] =\n        fabs(<span class=\"supfact\">nhdr</span>.pixdim[Number]);\n    <span class=\"supfact\">nhdr</span>.pixdim[Number] =\n        fabs(<span class=\"supfact\">nhdr</span>.pixdim[Number]);\n    <span class=\"supfact\">nhdr</span>.pixdim[Number] =\n        fabs(<span class=\"supfact\">nhdr</span>.pixdim[Number]);\n    <span class=\"supfact\">nhdr</span>.pixdim[Number] =\n        fabs(<span class=\"supfact\">nhdr</span>.pixdim[Number]);\n    if (nim->intent_code > Number || nim->intent_code < Number) {\n      fprintf(stderr, String, String, nim->intent_code);\n      return Number;\n    }\n    if (nim->qform_code > Number || nim->qform_code < Number) {\n      fprintf(stderr, String, String, nim->qform_code);\n      return Number;\n    }\n    if (nim->sform_code > Number || nim->sform_code < Number)\n      goto LABEL_53;\n    <span class=\"supfact\">nhdr</span>.intent_code = nim->intent_code;\n    v14 = nim->intent_p1;\n    <span class=\"supfact\">nhdr</span>.intent_p1 = v14;\n    v15 = nim->intent_p2;\n    <span class=\"supfact\">nhdr</span>.intent_p2 = v15;\n    v16 = nim->intent_p3;\n    <span class=\"supfact\">nhdr</span>.intent_p3 = v16;\n    if (nim->intent_name[Number]) {\n      memcpy(<span class=\"supfact\">nhdr</span>.intent_name, nim->intent_name, Number);\n      <span class=\"supfact\">nhdr</span>.intent_name[Number] = Number;\n    }\n    <span class=\"supfact\">nhdr</span>.vox_offset = (float)(int)nim->iname_offset;\n    <span class=\"supfact\">nhdr</span>.xyzt_units =\n        nim->xyz_units & Number | nim->time_units & Number;\n    v17 = nim->toffset;\n    <span class=\"supfact\">nhdr</span>.toffset = v17;\n    if (nim->qform_code > Number) {\n      <span class=\"supfact\">nhdr</span>.qform_code = nim->qform_code;\n      v18 = nim->quatern_b;\n      <span class=\"supfact\">nhdr</span>.quatern_b = v18;\n      v19 = nim->quatern_c;\n      <span class=\"supfact\">nhdr</span>.quatern_c = v19;\n      v20 = nim->quatern_d;\n      <span class=\"supfact\">nhdr</span>.quatern_d = v20;\n      v21 = nim->qoffset_x;\n      <span class=\"supfact\">nhdr</span>.qoffset_x = v21;\n      v22 = nim->qoffset_y;\n      <span class=\"supfact\">nhdr</span>.qoffset_y = v22;\n      v23 = nim->qoffset_z;\n      <span class=\"supfact\">nhdr</span>.qoffset_z = v23;\n      if (nim->qfac < Number)\n        v24 = Number;\n      else\n        v24 = Number;\n      LODWORD(<span class=\"supfact\">nhdr</span>.pixdim[Number]) = v24;\n    }\n    if (nim->sform_code > Number) {\n      <span class=\"supfact\">nhdr</span>.sform_code = nim->sform_code;\n      v25 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_x[Number] = v25;\n      v26 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_x[Number] = v26;\n      v27 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_x[Number] = v27;\n      v28 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_x[Number] = v28;\n      v29 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_y[Number] = v29;\n      v30 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_y[Number] = v30;\n      v31 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_y[Number] = v31;\n      v32 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_y[Number] = v32;\n      v33 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_z[Number] = v33;\n      v34 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_z[Number] = v34;\n      v35 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_z[Number] = v35;\n      v36 = nim->sto_xyz.m[Number][Number];\n      <span class=\"supfact\">nhdr</span>.srow_z[Number] = v36;\n    }\n    if (nim->sform_code > Number || nim->sform_code < Number) {\n    LABEL_53:\n      fprintf(stderr, String, String, nim->sform_code);\n      return Number;\n    }\n    if (nim->slice_start > Number || nim->slice_start < Number) {\n      fprintf(stderr, String, String, nim->slice_start);\n      return Number;\n    }\n    if (nim->slice_end > Number || nim->slice_end < Number) {\n      fprintf(stderr, String, String, nim->slice_end);\n      return Number;\n    }\n    <span class=\"supfact\">nhdr</span>.dim_info = (Number * nim->phase_dim) & Number |\n                                    nim->freq_dim & Number |\n                                    (Number * nim->slice_dim) & Number;\n    <span class=\"supfact\">nhdr</span>.slice_code = nim->slice_code;\n    <span class=\"supfact\">nhdr</span>.slice_start = nim->slice_start;\n    <span class=\"supfact\">nhdr</span>.slice_end = nim->slice_end;\n    v37 = nim->slice_duration;\n    <span class=\"supfact\">nhdr</span>.slice_duration = v37;\n  }\n  memcpy(hdr, &<span class=\"supfact\">nhdr</span>, sizeof(nifti_1_header_0));\n  return Number;\n}", "var": [{"name": "s", "type": "__unk__", "pred_name": "__unk__", "ref_name": "nhdr", "ref_type": "struct nifti_1_header_0 { int sizeof_hdr; char[10] data_type; char[18] db_name; int extents; __int16 session_error; char regular; char dim_info; __int16[8] dim; float intent_p1; float intent_p2; float intent_p3; __int16 intent_code; __int16 datatype; __int16 bitpix; __int16 slice_start; float[8] pixdim; float vox_offset; float scl_slope; float scl_inter; __int16 slice_end; char slice_code; char xyzt_units; float cal_max; float cal_min; float slice_duration; float toffset; int glmax; int glmin; char[80] descrip; char[24] aux_file; __int16 qform_code; __int16 sform_code; float quatern_b; float quatern_c; float quatern_d; float qoffset_x; float qoffset_y; float qoffset_z; float[4] srow_x; float[4] srow_y; float[4] srow_z; char[16] intent_name; char[4] magic; }"}], "body_in_train": false}, {"repo_owner": "converse2006", "repo_name": "ArduinoUno-QEMU", "path": "converse2006/ArduinoUno-QEMU/3f04d99f985f4531cb3d34397d5c9f098a1ca85ef84445b10faf27cb84b679eb", "path_in_repo": "converse2006/ArduinoUno-QEMU//x86_64-linux-user/signal.o", "objdump": "00000000000012b0 <do_sigaltstack>:\n    12b0:\t55                   \tpush   %rbp\n    12b1:\t48 89 e5             \tmov    %rsp,%rbp\n    12b4:\t53                   \tpush   %rbx\n    12b5:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n    12bc:\t48 89 bd 78 ff ff ff \tmov    %rdi,-0x88(%rbp)\n    12c3:\t48 89 b5 70 ff ff ff \tmov    %rsi,-0x90(%rbp)\n    12ca:\t48 89 95 68 ff ff ff \tmov    %rdx,-0x98(%rbp)\n    12d1:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    12d8:\t00 00 \n    12da:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    12de:\t31 c0                \txor    %eax,%eax\n    12e0:\t48 83 bd 70 ff ff ff \tcmpq   $0x0,-0x90(%rbp)\n    12e7:\t00 \n    12e8:\t0f 84 f6 01 00 00    \tje     14e4 <do_sigaltstack+0x234>\n    12ee:\tc7 45 90 08 00 00 00 \tmovl   $0x8,-0x70(%rbp)\n    12f5:\t83 7d 90 08          \tcmpl   $0x8,-0x70(%rbp)\n    12f9:\t74 5f                \tje     135a <do_sigaltstack+0xaa>\n    12fb:\t83 7d 90 08          \tcmpl   $0x8,-0x70(%rbp)\n    12ff:\t7f 71                \tjg     1372 <do_sigaltstack+0xc2>\n    1301:\t83 7d 90 04          \tcmpl   $0x4,-0x70(%rbp)\n    1305:\t74 3d                \tje     1344 <do_sigaltstack+0x94>\n    1307:\t83 7d 90 04          \tcmpl   $0x4,-0x70(%rbp)\n    130b:\t7f 65                \tjg     1372 <do_sigaltstack+0xc2>\n    130d:\t83 7d 90 01          \tcmpl   $0x1,-0x70(%rbp)\n    1311:\t74 08                \tje     131b <do_sigaltstack+0x6b>\n    1313:\t83 7d 90 02          \tcmpl   $0x2,-0x70(%rbp)\n    1317:\t74 11                \tje     132a <do_sigaltstack+0x7a>\n    1319:\teb 57                \tjmp    1372 <do_sigaltstack+0xc2>\n    131b:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1322 <do_sigaltstack+0x72>\n    1322:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    1326:\t88 10                \tmov    %dl,(%rax)\n    1328:\teb 4d                \tjmp    1377 <do_sigaltstack+0xc7>\n    132a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1331 <do_sigaltstack+0x81>\n    1331:\t0f b7 c0             \tmovzwl %ax,%eax\n    1334:\t48 8d 5d b0          \tlea    -0x50(%rbp),%rbx\n    1338:\t89 c7                \tmov    %eax,%edi\n    133a:\te8 c1 ec ff ff       \tcallq  0 <tswap16>\n    133f:\t66 89 03             \tmov    %ax,(%rbx)\n    1342:\teb 33                \tjmp    1377 <do_sigaltstack+0xc7>\n    1344:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 134b <do_sigaltstack+0x9b>\n    134b:\t48 8d 5d b0          \tlea    -0x50(%rbp),%rbx\n    134f:\t89 c7                \tmov    %eax,%edi\n    1351:\te8 e1 ec ff ff       \tcallq  37 <tswap32>\n    1356:\t89 03                \tmov    %eax,(%rbx)\n    1358:\teb 1d                \tjmp    1377 <do_sigaltstack+0xc7>\n    135a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1361 <do_sigaltstack+0xb1>\n    1361:\t48 8d 5d b0          \tlea    -0x50(%rbp),%rbx\n    1365:\t48 89 c7             \tmov    %rax,%rdi\n    1368:\te8 fd ec ff ff       \tcallq  6a <tswap64>\n    136d:\t48 89 03             \tmov    %rax,(%rbx)\n    1370:\teb 05                \tjmp    1377 <do_sigaltstack+0xc7>\n    1372:\te8 00 00 00 00       \tcallq  1377 <do_sigaltstack+0xc7>\n    1377:\tc7 45 94 08 00 00 00 \tmovl   $0x8,-0x6c(%rbp)\n    137e:\t83 7d 94 08          \tcmpl   $0x8,-0x6c(%rbp)\n    1382:\t74 71                \tje     13f5 <do_sigaltstack+0x145>\n    1384:\t83 7d 94 08          \tcmpl   $0x8,-0x6c(%rbp)\n    1388:\t0f 8f 83 00 00 00    \tjg     1411 <do_sigaltstack+0x161>\n    138e:\t83 7d 94 04          \tcmpl   $0x4,-0x6c(%rbp)\n    1392:\t74 45                \tje     13d9 <do_sigaltstack+0x129>\n    1394:\t83 7d 94 04          \tcmpl   $0x4,-0x6c(%rbp)\n    1398:\t7f 77                \tjg     1411 <do_sigaltstack+0x161>\n    139a:\t83 7d 94 01          \tcmpl   $0x1,-0x6c(%rbp)\n    139e:\t74 08                \tje     13a8 <do_sigaltstack+0xf8>\n    13a0:\t83 7d 94 02          \tcmpl   $0x2,-0x6c(%rbp)\n    13a4:\t74 15                \tje     13bb <do_sigaltstack+0x10b>\n    13a6:\teb 69                \tjmp    1411 <do_sigaltstack+0x161>\n    13a8:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 13af <do_sigaltstack+0xff>\n    13af:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    13b3:\t48 83 c0 10          \tadd    $0x10,%rax\n    13b7:\t88 10                \tmov    %dl,(%rax)\n    13b9:\teb 5b                \tjmp    1416 <do_sigaltstack+0x166>\n    13bb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 13c2 <do_sigaltstack+0x112>\n    13c2:\t0f b7 c0             \tmovzwl %ax,%eax\n    13c5:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    13c9:\t48 8d 5a 10          \tlea    0x10(%rdx),%rbx\n    13cd:\t89 c7                \tmov    %eax,%edi\n    13cf:\te8 2c ec ff ff       \tcallq  0 <tswap16>\n    13d4:\t66 89 03             \tmov    %ax,(%rbx)\n    13d7:\teb 3d                \tjmp    1416 <do_sigaltstack+0x166>\n    13d9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 13e0 <do_sigaltstack+0x130>\n    13e0:\t89 c2                \tmov    %eax,%edx\n    13e2:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    13e6:\t48 8d 58 10          \tlea    0x10(%rax),%rbx\n    13ea:\t89 d7                \tmov    %edx,%edi\n    13ec:\te8 46 ec ff ff       \tcallq  37 <tswap32>\n    13f1:\t89 03                \tmov    %eax,(%rbx)\n    13f3:\teb 21                \tjmp    1416 <do_sigaltstack+0x166>\n    13f5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 13fc <do_sigaltstack+0x14c>\n    13fc:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    1400:\t48 8d 5a 10          \tlea    0x10(%rdx),%rbx\n    1404:\t48 89 c7             \tmov    %rax,%rdi\n    1407:\te8 5e ec ff ff       \tcallq  6a <tswap64>\n    140c:\t48 89 03             \tmov    %rax,(%rbx)\n    140f:\teb 05                \tjmp    1416 <do_sigaltstack+0x166>\n    1411:\te8 00 00 00 00       \tcallq  1416 <do_sigaltstack+0x166>\n    1416:\tc7 45 98 08 00 00 00 \tmovl   $0x8,-0x68(%rbp)\n    141d:\t83 7d 98 08          \tcmpl   $0x8,-0x68(%rbp)\n    1421:\t0f 84 92 00 00 00    \tje     14b9 <do_sigaltstack+0x209>\n    1427:\t83 7d 98 08          \tcmpl   $0x8,-0x68(%rbp)\n    142b:\t0f 8f ae 00 00 00    \tjg     14df <do_sigaltstack+0x22f>\n    1431:\t83 7d 98 04          \tcmpl   $0x4,-0x68(%rbp)\n    1435:\t74 5e                \tje     1495 <do_sigaltstack+0x1e5>\n    1437:\t83 7d 98 04          \tcmpl   $0x4,-0x68(%rbp)\n    143b:\t0f 8f 9e 00 00 00    \tjg     14df <do_sigaltstack+0x22f>\n    1441:\t83 7d 98 01          \tcmpl   $0x1,-0x68(%rbp)\n    1445:\t74 0b                \tje     1452 <do_sigaltstack+0x1a2>\n    1447:\t83 7d 98 02          \tcmpl   $0x2,-0x68(%rbp)\n    144b:\t74 22                \tje     146f <do_sigaltstack+0x1bf>\n    144d:\te9 8d 00 00 00       \tjmpq   14df <do_sigaltstack+0x22f>\n    1452:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    1459:\t48 89 c7             \tmov    %rax,%rdi\n    145c:\te8 95 ed ff ff       \tcallq  1f6 <sas_ss_flags>\n    1461:\t89 c2                \tmov    %eax,%edx\n    1463:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    1467:\t48 83 c0 08          \tadd    $0x8,%rax\n    146b:\t88 10                \tmov    %dl,(%rax)\n    146d:\teb 75                \tjmp    14e4 <do_sigaltstack+0x234>\n    146f:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    1476:\t48 89 c7             \tmov    %rax,%rdi\n    1479:\te8 78 ed ff ff       \tcallq  1f6 <sas_ss_flags>\n    147e:\t0f b7 c0             \tmovzwl %ax,%eax\n    1481:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    1485:\t48 8d 5a 08          \tlea    0x8(%rdx),%rbx\n    1489:\t89 c7                \tmov    %eax,%edi\n    148b:\te8 70 eb ff ff       \tcallq  0 <tswap16>\n    1490:\t66 89 03             \tmov    %ax,(%rbx)\n    1493:\teb 4f                \tjmp    14e4 <do_sigaltstack+0x234>\n    1495:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    149c:\t48 89 c7             \tmov    %rax,%rdi\n    149f:\te8 52 ed ff ff       \tcallq  1f6 <sas_ss_flags>\n    14a4:\t89 c2                \tmov    %eax,%edx\n    14a6:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    14aa:\t48 8d 58 08          \tlea    0x8(%rax),%rbx\n    14ae:\t89 d7                \tmov    %edx,%edi\n    14b0:\te8 82 eb ff ff       \tcallq  37 <tswap32>\n    14b5:\t89 03                \tmov    %eax,(%rbx)\n    14b7:\teb 2b                \tjmp    14e4 <do_sigaltstack+0x234>\n    14b9:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    14c0:\t48 89 c7             \tmov    %rax,%rdi\n    14c3:\te8 2e ed ff ff       \tcallq  1f6 <sas_ss_flags>\n    14c8:\t48 98                \tcltq   \n    14ca:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n    14ce:\t48 8d 5a 08          \tlea    0x8(%rdx),%rbx\n    14d2:\t48 89 c7             \tmov    %rax,%rdi\n    14d5:\te8 90 eb ff ff       \tcallq  6a <tswap64>\n    14da:\t48 89 03             \tmov    %rax,(%rbx)\n    14dd:\teb 05                \tjmp    14e4 <do_sigaltstack+0x234>\n    14df:\te8 00 00 00 00       \tcallq  14e4 <do_sigaltstack+0x234>\n    14e4:\t48 83 bd 78 ff ff ff \tcmpq   $0x0,-0x88(%rbp)\n    14eb:\t00 \n    14ec:\t0f 84 cb 02 00 00    \tje     17bd <do_sigaltstack+0x50d>\n    14f2:\tc7 45 8c f2 ff ff ff \tmovl   $0xfffffff2,-0x74(%rbp)\n    14f9:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n    1500:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    1505:\tba 18 00 00 00       \tmov    $0x18,%edx\n    150a:\t48 89 c6             \tmov    %rax,%rsi\n    150d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1512:\te8 ed eb ff ff       \tcallq  104 <lock_user>\n    1517:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    151b:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n    1520:\t0f 84 d1 02 00 00    \tje     17f7 <do_sigaltstack+0x547>\n    1526:\tc7 45 9c 08 00 00 00 \tmovl   $0x8,-0x64(%rbp)\n    152d:\t83 7d 9c 08          \tcmpl   $0x8,-0x64(%rbp)\n    1531:\t74 5f                \tje     1592 <do_sigaltstack+0x2e2>\n    1533:\t83 7d 9c 08          \tcmpl   $0x8,-0x64(%rbp)\n    1537:\t7f 6e                \tjg     15a7 <do_sigaltstack+0x2f7>\n    1539:\t83 7d 9c 04          \tcmpl   $0x4,-0x64(%rbp)\n    153d:\t74 3e                \tje     157d <do_sigaltstack+0x2cd>\n    153f:\t83 7d 9c 04          \tcmpl   $0x4,-0x64(%rbp)\n    1543:\t7f 62                \tjg     15a7 <do_sigaltstack+0x2f7>\n    1545:\t83 7d 9c 01          \tcmpl   $0x1,-0x64(%rbp)\n    1549:\t74 08                \tje     1553 <do_sigaltstack+0x2a3>\n    154b:\t83 7d 9c 02          \tcmpl   $0x2,-0x64(%rbp)\n    154f:\t74 12                \tje     1563 <do_sigaltstack+0x2b3>\n    1551:\teb 54                \tjmp    15a7 <do_sigaltstack+0x2f7>\n    1553:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1557:\t0f b6 00             \tmovzbl (%rax),%eax\n    155a:\t0f b6 c0             \tmovzbl %al,%eax\n    155d:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    1561:\teb 51                \tjmp    15b4 <do_sigaltstack+0x304>\n    1563:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1567:\t0f b7 00             \tmovzwl (%rax),%eax\n    156a:\t0f b7 c0             \tmovzwl %ax,%eax\n    156d:\t89 c7                \tmov    %eax,%edi\n    156f:\te8 8c ea ff ff       \tcallq  0 <tswap16>\n    1574:\t0f b7 c0             \tmovzwl %ax,%eax\n    1577:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    157b:\teb 37                \tjmp    15b4 <do_sigaltstack+0x304>\n    157d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1581:\t8b 00                \tmov    (%rax),%eax\n    1583:\t89 c7                \tmov    %eax,%edi\n    1585:\te8 ad ea ff ff       \tcallq  37 <tswap32>\n    158a:\t89 c0                \tmov    %eax,%eax\n    158c:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    1590:\teb 22                \tjmp    15b4 <do_sigaltstack+0x304>\n    1592:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1596:\t48 8b 00             \tmov    (%rax),%rax\n    1599:\t48 89 c7             \tmov    %rax,%rdi\n    159c:\te8 c9 ea ff ff       \tcallq  6a <tswap64>\n    15a1:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    15a5:\teb 0d                \tjmp    15b4 <do_sigaltstack+0x304>\n    15a7:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n    15ae:\t00 \n    15af:\te8 00 00 00 00       \tcallq  15b4 <do_sigaltstack+0x304>\n    15b4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    15b9:\t85 c0                \ttest   %eax,%eax\n    15bb:\t0f 85 36 02 00 00    \tjne    17f7 <do_sigaltstack+0x547>\n    15c1:\tc7 45 a0 08 00 00 00 \tmovl   $0x8,-0x60(%rbp)\n    15c8:\t83 7d a0 08          \tcmpl   $0x8,-0x60(%rbp)\n    15cc:\t74 6b                \tje     1639 <do_sigaltstack+0x389>\n    15ce:\t83 7d a0 08          \tcmpl   $0x8,-0x60(%rbp)\n    15d2:\t7f 7e                \tjg     1652 <do_sigaltstack+0x3a2>\n    15d4:\t83 7d a0 04          \tcmpl   $0x4,-0x60(%rbp)\n    15d8:\t74 46                \tje     1620 <do_sigaltstack+0x370>\n    15da:\t83 7d a0 04          \tcmpl   $0x4,-0x60(%rbp)\n    15de:\t7f 72                \tjg     1652 <do_sigaltstack+0x3a2>\n    15e0:\t83 7d a0 01          \tcmpl   $0x1,-0x60(%rbp)\n    15e4:\t74 08                \tje     15ee <do_sigaltstack+0x33e>\n    15e6:\t83 7d a0 02          \tcmpl   $0x2,-0x60(%rbp)\n    15ea:\t74 16                \tje     1602 <do_sigaltstack+0x352>\n    15ec:\teb 64                \tjmp    1652 <do_sigaltstack+0x3a2>\n    15ee:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    15f2:\t48 83 c0 10          \tadd    $0x10,%rax\n    15f6:\t0f b6 00             \tmovzbl (%rax),%eax\n    15f9:\t0f b6 c0             \tmovzbl %al,%eax\n    15fc:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1600:\teb 5d                \tjmp    165f <do_sigaltstack+0x3af>\n    1602:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1606:\t48 83 c0 10          \tadd    $0x10,%rax\n    160a:\t0f b7 00             \tmovzwl (%rax),%eax\n    160d:\t0f b7 c0             \tmovzwl %ax,%eax\n    1610:\t89 c7                \tmov    %eax,%edi\n    1612:\te8 e9 e9 ff ff       \tcallq  0 <tswap16>\n    1617:\t0f b7 c0             \tmovzwl %ax,%eax\n    161a:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    161e:\teb 3f                \tjmp    165f <do_sigaltstack+0x3af>\n    1620:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1624:\t48 83 c0 10          \tadd    $0x10,%rax\n    1628:\t8b 00                \tmov    (%rax),%eax\n    162a:\t89 c7                \tmov    %eax,%edi\n    162c:\te8 06 ea ff ff       \tcallq  37 <tswap32>\n    1631:\t89 c0                \tmov    %eax,%eax\n    1633:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1637:\teb 26                \tjmp    165f <do_sigaltstack+0x3af>\n    1639:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    163d:\t48 83 c0 10          \tadd    $0x10,%rax\n    1641:\t48 8b 00             \tmov    (%rax),%rax\n    1644:\t48 89 c7             \tmov    %rax,%rdi\n    1647:\te8 1e ea ff ff       \tcallq  6a <tswap64>\n    164c:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1650:\teb 0d                \tjmp    165f <do_sigaltstack+0x3af>\n    1652:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    1659:\t00 \n    165a:\te8 00 00 00 00       \tcallq  165f <do_sigaltstack+0x3af>\n    165f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1664:\t85 c0                \ttest   %eax,%eax\n    1666:\t0f 85 8b 01 00 00    \tjne    17f7 <do_sigaltstack+0x547>\n    166c:\tc7 45 a4 08 00 00 00 \tmovl   $0x8,-0x5c(%rbp)\n    1673:\t83 7d a4 08          \tcmpl   $0x8,-0x5c(%rbp)\n    1677:\t74 6b                \tje     16e4 <do_sigaltstack+0x434>\n    1679:\t83 7d a4 08          \tcmpl   $0x8,-0x5c(%rbp)\n    167d:\t7f 7e                \tjg     16fd <do_sigaltstack+0x44d>\n    167f:\t83 7d a4 04          \tcmpl   $0x4,-0x5c(%rbp)\n    1683:\t74 46                \tje     16cb <do_sigaltstack+0x41b>\n    1685:\t83 7d a4 04          \tcmpl   $0x4,-0x5c(%rbp)\n    1689:\t7f 72                \tjg     16fd <do_sigaltstack+0x44d>\n    168b:\t83 7d a4 01          \tcmpl   $0x1,-0x5c(%rbp)\n    168f:\t74 08                \tje     1699 <do_sigaltstack+0x3e9>\n    1691:\t83 7d a4 02          \tcmpl   $0x2,-0x5c(%rbp)\n    1695:\t74 16                \tje     16ad <do_sigaltstack+0x3fd>\n    1697:\teb 64                \tjmp    16fd <do_sigaltstack+0x44d>\n    1699:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    169d:\t48 83 c0 08          \tadd    $0x8,%rax\n    16a1:\t0f b6 00             \tmovzbl (%rax),%eax\n    16a4:\t0f b6 c0             \tmovzbl %al,%eax\n    16a7:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    16ab:\teb 5d                \tjmp    170a <do_sigaltstack+0x45a>\n    16ad:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    16b1:\t48 83 c0 08          \tadd    $0x8,%rax\n    16b5:\t0f b7 00             \tmovzwl (%rax),%eax\n    16b8:\t0f b7 c0             \tmovzwl %ax,%eax\n    16bb:\t89 c7                \tmov    %eax,%edi\n    16bd:\te8 3e e9 ff ff       \tcallq  0 <tswap16>\n    16c2:\t0f b7 c0             \tmovzwl %ax,%eax\n    16c5:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    16c9:\teb 3f                \tjmp    170a <do_sigaltstack+0x45a>\n    16cb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    16cf:\t48 83 c0 08          \tadd    $0x8,%rax\n    16d3:\t8b 00                \tmov    (%rax),%eax\n    16d5:\t89 c7                \tmov    %eax,%edi\n    16d7:\te8 5b e9 ff ff       \tcallq  37 <tswap32>\n    16dc:\t89 c0                \tmov    %eax,%eax\n    16de:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    16e2:\teb 26                \tjmp    170a <do_sigaltstack+0x45a>\n    16e4:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    16e8:\t48 83 c0 08          \tadd    $0x8,%rax\n    16ec:\t48 8b 00             \tmov    (%rax),%rax\n    16ef:\t48 89 c7             \tmov    %rax,%rdi\n    16f2:\te8 73 e9 ff ff       \tcallq  6a <tswap64>\n    16f7:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    16fb:\teb 0d                \tjmp    170a <do_sigaltstack+0x45a>\n    16fd:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    1704:\t00 \n    1705:\te8 00 00 00 00       \tcallq  170a <do_sigaltstack+0x45a>\n    170a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    170f:\t85 c0                \ttest   %eax,%eax\n    1711:\t0f 85 e0 00 00 00    \tjne    17f7 <do_sigaltstack+0x547>\n    1717:\t48 8b 8d 78 ff ff ff \tmov    -0x88(%rbp),%rcx\n    171e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1722:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1727:\t48 89 ce             \tmov    %rcx,%rsi\n    172a:\t48 89 c7             \tmov    %rax,%rdi\n    172d:\te8 3b ea ff ff       \tcallq  16d <unlock_user>\n    1732:\tc7 45 8c ff ff ff ff \tmovl   $0xffffffff,-0x74(%rbp)\n    1739:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    1740:\t48 89 c7             \tmov    %rax,%rdi\n    1743:\te8 5f ea ff ff       \tcallq  1a7 <on_sig_stack>\n    1748:\t85 c0                \ttest   %eax,%eax\n    174a:\t0f 85 aa 00 00 00    \tjne    17fa <do_sigaltstack+0x54a>\n    1750:\tc7 45 8c ea ff ff ff \tmovl   $0xffffffea,-0x74(%rbp)\n    1757:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    175b:\t48 83 f8 02          \tcmp    $0x2,%rax\n    175f:\t74 17                \tje     1778 <do_sigaltstack+0x4c8>\n    1761:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1765:\t48 83 f8 01          \tcmp    $0x1,%rax\n    1769:\t74 0d                \tje     1778 <do_sigaltstack+0x4c8>\n    176b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    176f:\t48 85 c0             \ttest   %rax,%rax\n    1772:\t0f 85 85 00 00 00    \tjne    17fd <do_sigaltstack+0x54d>\n    1778:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    177c:\t48 83 f8 02          \tcmp    $0x2,%rax\n    1780:\t75 12                \tjne    1794 <do_sigaltstack+0x4e4>\n    1782:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    1789:\t00 \n    178a:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n    1791:\t00 \n    1792:\teb 13                \tjmp    17a7 <do_sigaltstack+0x4f7>\n    1794:\tc7 45 8c f4 ff ff ff \tmovl   $0xfffffff4,-0x74(%rbp)\n    179b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    179f:\t48 3d ff 07 00 00    \tcmp    $0x7ff,%rax\n    17a5:\t76 59                \tjbe    1800 <do_sigaltstack+0x550>\n    17a7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    17ab:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 17b2 <do_sigaltstack+0x502>\n    17b2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    17b6:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 17bd <do_sigaltstack+0x50d>\n    17bd:\t48 83 bd 70 ff ff ff \tcmpq   $0x0,-0x90(%rbp)\n    17c4:\t00 \n    17c5:\t74 27                \tje     17ee <do_sigaltstack+0x53e>\n    17c7:\tc7 45 8c f2 ff ff ff \tmovl   $0xfffffff2,-0x74(%rbp)\n    17ce:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n    17d2:\t48 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%rax\n    17d9:\tba 18 00 00 00       \tmov    $0x18,%edx\n    17de:\t48 89 ce             \tmov    %rcx,%rsi\n    17e1:\t48 89 c7             \tmov    %rax,%rdi\n    17e4:\te8 00 00 00 00       \tcallq  17e9 <do_sigaltstack+0x539>\n    17e9:\t48 85 c0             \ttest   %rax,%rax\n    17ec:\t75 15                \tjne    1803 <do_sigaltstack+0x553>\n    17ee:\tc7 45 8c 00 00 00 00 \tmovl   $0x0,-0x74(%rbp)\n    17f5:\teb 0d                \tjmp    1804 <do_sigaltstack+0x554>\n    17f7:\t90                   \tnop\n    17f8:\teb 0a                \tjmp    1804 <do_sigaltstack+0x554>\n    17fa:\t90                   \tnop\n    17fb:\teb 07                \tjmp    1804 <do_sigaltstack+0x554>\n    17fd:\t90                   \tnop\n    17fe:\teb 04                \tjmp    1804 <do_sigaltstack+0x554>\n    1800:\t90                   \tnop\n    1801:\teb 01                \tjmp    1804 <do_sigaltstack+0x554>\n    1803:\t90                   \tnop\n    1804:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n    1807:\t48 98                \tcltq   \n    1809:\t48 8b 75 e8          \tmov    -0x18(%rbp),%rsi\n    180d:\t64 48 33 34 25 28 00 \txor    %fs:0x28,%rsi\n    1814:\t00 00 \n    1816:\t74 05                \tje     181d <do_sigaltstack+0x56d>\n    1818:\te8 00 00 00 00       \tcallq  181d <do_sigaltstack+0x56d>\n    181d:\t48 81 c4 98 00 00 00 \tadd    $0x98,%rsp\n    1824:\t5b                   \tpop    %rbx\n    1825:\t5d                   \tpop    %rbp\n    1826:\tc3                   \tretq   ", "code_s": "__int64 __fastcall do_sigaltstack(__int64 a1, __int64 a2, __int64 a3) {\n  int v3;\n  int v6;\n  __int64 *v7;\n  _QWORD <span class=\"supfact\">v8</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>;\n  __int64 v10;\n  unsigned __int64 v11;\n  unsigned __int64 v12;\n  v12 = __readfsqword(Number);\n  if (a2) {\n    <span class=\"supfact\">v8</span>[Number] = tswap64(target_sigaltstack_used);\n    <span class=\"supfact\">v8</span>[Number] = tswap64(qword_1F70);\n    v3 = sas_ss_flags(a3);\n    <span class=\"supfact\">v8</span>[Number] = tswap64(v3);\n  }\n  if (a1) {\n    v6 = Number;\n    v7 = (__int64 *)lock_user(Number, a1, Number L);\n    if (!v7)\n      return v6;\n    <span class=\"supfact\">v9</span> = tswap64(*v7);\n    v11 = tswap64(v7[Number]);\n    v10 = tswap64(v7[Number]);\n    unlock_user(v7, a1, Number L);\n    v6 = Number;\n    if (on_sig_stack(a3))\n      return v6;\n    v6 = Number;\n    if (v10 != Number && v10 != Number && v10)\n      return v6;\n    if (v10 == Number) {\n      v11 = Number L;\n      <span class=\"supfact\">v9</span> = Number L;\n    } else {\n      v6 = Number;\n      if (v11 <= Number)\n        return v6;\n    }\n    target_sigaltstack_used = <span class=\"supfact\">v9</span>;\n    qword_1F70 = v11;\n  }\n  if (!a2 || (v6 = Number, !copy_to_user(a2, <span class=\"supfact\">v8</span>, Number L)))\n    v6 = Number;\n  return v6;\n}", "code_t": "abi_long __cdecl do_sigaltstack(abi_ulong uss_addr, abi_ulong uoss_addr,\n                                abi_ulong sp_0) {\n  int v3;\n  int ret;\n  target_sigaltstack *uss;\n  target_sigaltstack <span class=\"supfact\">oss</span>;\n  target_sigaltstack <span class=\"supfact\">ss_0</span>;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  if (uoss_addr) {\n    <span class=\"supfact\">oss</span>.ss_sp = tswap64(target_sigaltstack_used.ss_sp);\n    <span class=\"supfact\">oss</span>.ss_size = tswap64(target_sigaltstack_used.ss_size);\n    v3 = sas_ss_flags(sp_0);\n    <span class=\"supfact\">oss</span>.ss_flags = tswap64(v3);\n  }\n  if (uss_addr) {\n    ret = Number;\n    uss = (target_sigaltstack *)lock_user(Number, uss_addr, Number L, Number);\n    if (!uss)\n      return ret;\n    <span class=\"supfact\">ss_0</span>.ss_sp = tswap64(uss->ss_sp);\n    <span class=\"supfact\">ss_0</span>.ss_size = tswap64(uss->ss_size);\n    <span class=\"supfact\">ss_0</span>.ss_flags = tswap64(uss->ss_flags);\n    unlock_user(uss, uss_addr, Number L);\n    ret = Number;\n    if (on_sig_stack(sp_0))\n      return ret;\n    ret = Number;\n    if (<span class=\"supfact\">ss_0</span>.ss_flags != Number &&\n        <span class=\"supfact\">ss_0</span>.ss_flags != Number &&\n        <span class=\"supfact\">ss_0</span>.ss_flags)\n      return ret;\n    if (<span class=\"supfact\">ss_0</span>.ss_flags == Number) {\n      <span class=\"supfact\">ss_0</span>.ss_size = Number L;\n      <span class=\"supfact\">ss_0</span>.ss_sp = Number L;\n    } else {\n      ret = Number;\n      if (<span class=\"supfact\">ss_0</span>.ss_size <= Number)\n        return ret;\n    }\n    target_sigaltstack_used.ss_sp = <span class=\"supfact\">ss_0</span>.ss_sp;\n    target_sigaltstack_used.ss_size = <span class=\"supfact\">ss_0</span>.ss_size;\n  }\n  if (!uoss_addr ||\n      (ret = Number, !copy_to_user(uoss_addr, &<span class=\"supfact\">oss</span>, Number L)))\n    ret = Number;\n  return ret;\n}", "var": [{"name": "v8", "type": "struct target_sigaltstack { abi_ulong ss_sp; abi_long ss_flags; abi_ulong ss_size; }", "pred_name": "oss", "ref_name": "oss", "ref_type": "struct target_sigaltstack { abi_ulong ss_sp; abi_long ss_flags; abi_ulong ss_size; }"}, {"name": "v9", "type": "struct target_sigaltstack { abi_ulong ss_sp; abi_long ss_flags; abi_ulong ss_size; }", "pred_name": "ss_0", "ref_name": "ss_0", "ref_type": "struct target_sigaltstack { abi_ulong ss_sp; abi_long ss_flags; abi_ulong ss_size; }"}], "body_in_train": false}, {"repo_owner": "franziskuskiefer", "repo_name": "nss-benchmark", "path": "franziskuskiefer/nss-benchmark/71d3b443d1732395e32dd7f5c54d703494c3586ced7efb8a5685017cee5e721d", "path_in_repo": "franziskuskiefer/nss-benchmark/supercop-20171218/ntl-10.5.0/src/quad_float.o", "objdump": "0000000000000000 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 fd             \tmov    %rdi,%rbp\n   4:\t53                   \tpush   %rbx\n   5:\t48 89 f3             \tmov    %rsi,%rbx\n   8:\t48 81 ec 68 01 00 00 \tsub    $0x168,%rsp\n   f:\t48 85 f6             \ttest   %rsi,%rsi\n  12:\t0f 84 48 01 00 00    \tje     160 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x160>\n  18:\t48 8d 7c 24 38       \tlea    0x38(%rsp),%rdi\n  1d:\t48 c7 04 24 00 00 00 \tmovq   $0x0,(%rsp)\n  24:\t00 \n  25:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n  2c:\t00 00 \n  2e:\t48 c7 44 24 10 00 00 \tmovq   $0x0,0x10(%rsp)\n  35:\t00 00 \n  37:\t48 c7 44 24 18 00 00 \tmovq   $0x0,0x18(%rsp)\n  3e:\t00 00 \n  40:\t48 c7 44 24 20 00 00 \tmovq   $0x0,0x20(%rsp)\n  47:\t00 00 \n  49:\t48 c7 44 24 28 00 00 \tmovq   $0x0,0x28(%rsp)\n  50:\t00 00 \n  52:\t48 c7 44 24 30 00 00 \tmovq   $0x0,0x30(%rsp)\n  59:\t00 00 \n  5b:\te8 00 00 00 00       \tcallq  60 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x60>\n  60:\t48 89 df             \tmov    %rbx,%rdi\n  63:\t48 c7 04 24 00 00 00 \tmovq   $0x0,(%rsp)\n  6a:\t00 \n  6b:\te8 00 00 00 00       \tcallq  70 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x70>\n  70:\t48 89 5c 24 08       \tmov    %rbx,0x8(%rsp)\n  75:\t48 8d 7c 24 50       \tlea    0x50(%rsp),%rdi\n  7a:\t48 89 5c 24 10       \tmov    %rbx,0x10(%rsp)\n  7f:\t48 01 c3             \tadd    %rax,%rbx\n  82:\t48 89 5c 24 18       \tmov    %rbx,0x18(%rsp)\n  87:\te8 00 00 00 00       \tcallq  8c <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x8c>\n  8c:\t31 c0                \txor    %eax,%eax\n  8e:\t48 89 e6             \tmov    %rsp,%rsi\n  91:\t48 8d 7c 24 50       \tlea    0x50(%rsp),%rdi\n  96:\t48 c7 84 24 28 01 00 \tmovq   $0x0,0x128(%rsp)\n  9d:\t00 00 00 00 00 \n  a2:\t66 89 84 24 30 01 00 \tmov    %ax,0x130(%rsp)\n  a9:\t00 \n  aa:\t48 c7 84 24 38 01 00 \tmovq   $0x0,0x138(%rsp)\n  b1:\t00 00 00 00 00 \n  b6:\t48 c7 84 24 40 01 00 \tmovq   $0x0,0x140(%rsp)\n  bd:\t00 00 00 00 00 \n  c2:\t48 c7 84 24 48 01 00 \tmovq   $0x0,0x148(%rsp)\n  c9:\t00 00 00 00 00 \n  ce:\t48 c7 84 24 50 01 00 \tmovq   $0x0,0x150(%rsp)\n  d5:\t00 00 00 00 00 \n  da:\t48 c7 44 24 40 00 00 \tmovq   $0x0,0x40(%rsp)\n  e1:\t00 00 \n  e3:\t48 c7 44 24 50 00 00 \tmovq   $0x0,0x50(%rsp)\n  ea:\t00 00 \n  ec:\t48 c7 44 24 48 00 00 \tmovq   $0x0,0x48(%rsp)\n  f3:\t00 00 \n  f5:\te8 00 00 00 00       \tcallq  fa <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0xfa>\n  fa:\t48 89 ee             \tmov    %rbp,%rsi\n  fd:\t48 8d 7c 24 40       \tlea    0x40(%rsp),%rdi\n 102:\te8 00 00 00 00       \tcallq  107 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x107>\n 107:\t48 8b 10             \tmov    (%rax),%rdx\n 10a:\t48 8b 52 e8          \tmov    -0x18(%rdx),%rdx\n 10e:\tf6 44 10 20 05       \ttestb  $0x5,0x20(%rax,%rdx,1)\n 113:\t74 0a                \tje     11f <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x11f>\n 115:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 11a:\te8 00 00 00 00       \tcallq  11f <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x11f>\n 11f:\t48 c7 44 24 40 00 00 \tmovq   $0x0,0x40(%rsp)\n 126:\t00 00 \n 128:\t48 8d 7c 24 50       \tlea    0x50(%rsp),%rdi\n 12d:\t48 c7 44 24 48 00 00 \tmovq   $0x0,0x48(%rsp)\n 134:\t00 00 \n 136:\t48 c7 44 24 50 00 00 \tmovq   $0x0,0x50(%rsp)\n 13d:\t00 00 \n 13f:\te8 00 00 00 00       \tcallq  144 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x144>\n 144:\t48 8d 7c 24 38       \tlea    0x38(%rsp),%rdi\n 149:\t48 c7 04 24 00 00 00 \tmovq   $0x0,(%rsp)\n 150:\t00 \n 151:\te8 00 00 00 00       \tcallq  156 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x156>\n 156:\t48 81 c4 68 01 00 00 \tadd    $0x168,%rsp\n 15d:\t5b                   \tpop    %rbx\n 15e:\t5d                   \tpop    %rbp\n 15f:\tc3                   \tretq   \n 160:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 165:\te8 00 00 00 00       \tcallq  16a <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x16a>\n 16a:\te9 a9 fe ff ff       \tjmpq   18 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x18>\n 16f:\t48 89 c5             \tmov    %rax,%rbp\n 172:\teb 05                \tjmp    179 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x179>\n 174:\t48 89 c5             \tmov    %rax,%rbp\n 177:\teb 30                \tjmp    1a9 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x1a9>\n 179:\t48 c7 44 24 50 00 00 \tmovq   $0x0,0x50(%rsp)\n 180:\t00 00 \n 182:\t48 8d 7c 24 50       \tlea    0x50(%rsp),%rdi\n 187:\tc5 f8 77             \tvzeroupper \n 18a:\te8 00 00 00 00       \tcallq  18f <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x18f>\n 18f:\t48 8d 7c 24 38       \tlea    0x38(%rsp),%rdi\n 194:\t48 c7 04 24 00 00 00 \tmovq   $0x0,(%rsp)\n 19b:\t00 \n 19c:\te8 00 00 00 00       \tcallq  1a1 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x1a1>\n 1a1:\t48 89 ef             \tmov    %rbp,%rdi\n 1a4:\te8 00 00 00 00       \tcallq  1a9 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x1a9>\n 1a9:\t48 c7 44 24 40 00 00 \tmovq   $0x0,0x40(%rsp)\n 1b0:\t00 00 \n 1b2:\t48 c7 44 24 48 00 00 \tmovq   $0x0,0x48(%rsp)\n 1b9:\t00 00 \n 1bb:\teb bc                \tjmp    179 <_ZN3NTL4convINS_10quad_floatEPKcEEN14_ntl_enable_ifIXsr20_ntl_is_char_pointerIT0_E5valueEvE4typeERT_S6_+0x179>", "code_s": "void __fastcall NTL conv<NTL quad_float, char const *>(char *a1, char *s) {\n  _QWORD *v2;\n  __int64 v3[Number];\n  char <span class=\"supfact\">v4</span>[Number];\n  __int64 v5;\n  __int64 v6;\n  __int64 v7[Number];\n  __int16 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  if (!s)\n    NTL TerminalError((NTL *)String, Number L);\n  v3[Number] = Number L;\n  v3[Number] = Number L;\n  v3[Number] = Number L;\n  std locale locale((std locale *)<span class=\"supfact\">v4</span>); v3 [ Number ] = ( __int64 ) ( & ` vtable for ' NTL plain_c_string_streambuf + Number ) ; v3 [ Number ] = ( __int64 ) s ; v3 [ Number ] = ( __int64 ) s ; v3 [ Number ] = ( __int64 ) & s [ strlen ( s ) ] ; std ios_base ios_base ( ( std ios_base * ) v7 ) ; v7 [ Number ] = Number L ; v8 = Number ; v9 = Number L ; v10 = Number L ; v11 = Number L ; v12 = Number L ; v5 = ( __int64 ) & ` vtable for ' std istream + Number ; v7 [ Number ] = ( __int64 ) & ` vtable for ' std istream + Number ; v6 = Number L ; std ios init ( v7 , v3 ) ; v2 = NTL operator >> ( & v5 , ( NTL * ) a1 ) ; if ( ( * ( ( _BYTE * ) v2 + * ( _QWORD * ) ( * v2 - Number L ) + Number ) & Number ) != Number ) NTL TerminalError ( ( NTL * ) String , a1 ) ; v5 = ( __int64 ) & ` vtable for ' std istream + Number ; v6 = Number L ; v7 [ Number ] = ( __int64 ) & ` vtable for ' std ios + Number ; std ios_base ~ ios_base ( ( std ios_base * ) v7 ) ; v3 [ Number ] = ( __int64 ) & ` vtable for ' std streambuf + Number ; std locale ~ locale ( ( std locale * ) <span class=\"supfact\">v4</span> ) ;\n}", "code_t": "void __fastcall NTL conv<NTL quad_float, char const *>(NTL quad_float *x,\n                                                       const char *y) {\n  _QWORD *v2;\n  __int64 *v3;\n  const char *ya;\n  const char *v5;\n  const char *v6;\n  __int64 v7;\n  __int64 v8;\n  __int64 v9;\n  std locale <span class=\"supfact\">v10</span>;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13[Number];\n  __int16 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  __int64 v18;\n  if (!y)\n    NTL TerminalError((NTL *)String, Number L);\n  v7 = Number L;\n  v8 = Number L;\n  v9 = Number L;\n  std locale locale(&<span class=\"supfact\">v10</span>); v3 = & ` vtable for ' NTL plain_c_string_streambuf + Number ; ya = y ; v5 = y ; v6 = & y [ strlen ( y ) ] ; std ios_base ios_base ( ( std ios_base * ) v13 ) ; v13 [ Number ] = Number L ; v14 = Number ; v15 = Number L ; v16 = Number L ; v17 = Number L ; v18 = Number L ; v11 = ( __int64 ) & ` vtable for ' std istream + Number ; v13 [ Number ] = ( __int64 ) & ` vtable for ' std istream + Number ; v12 = Number L ; std ios init ( v13 , & v3 ) ; v2 = NTL operator >> ( & v11 , ( NTL * ) x ) ; if ( ( * ( ( _BYTE * ) v2 + * ( _QWORD * ) ( * v2 - Number L ) + Number ) & Number ) != Number ) NTL TerminalError ( ( NTL * ) String , ( const char * ) x ) ; v11 = ( __int64 ) & ` vtable for ' std istream + Number ;\n  v12 = Number L;\n  v13[Number] =\n      (__int64)& ` vtable for ' std ios + Number ; std ios_base ~ ios_base ( ( std ios_base * ) v13 ) ; v3 = ( __int64 * ) ( ( char * ) & ` vtable for ' std\n          streambuf +\n      Number);\n  std locale ~locale(&<span class=\"supfact\">v10</span>);\n}", "var": [{"name": "v4", "type": "char[8]", "pred_name": "v4", "ref_name": "v10", "ref_type": "struct std::locale { std::locale::_Impl * _M_impl; }"}], "body_in_train": false}, {"repo_owner": "gyc2015", "repo_name": "GYC", "path": "gyc2015/GYC/56b566358efc31a405e4a2e7e8792375bb832b0505b212bf908ac7ddbe85bbec", "path_in_repo": "gyc2015/GYC/examples/tdictionary", "objdump": "0000000000401202 <main>:\n  401202:\t55                   \tpush   %rbp\n  401203:\t48 89 e5             \tmov    %rsp,%rbp\n  401206:\t53                   \tpush   %rbx\n  401207:\t48 83 ec 68          \tsub    $0x68,%rsp\n  40120b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401210:\te8 c5 02 00 00       \tcallq  4014da <dic_setup>\n  401215:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  401219:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  40121e:\t48 89 c7             \tmov    %rax,%rdi\n  401221:\te8 21 4a 00 00       \tcallq  405c47 <vector_char_init>\n  401226:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  40122a:\tc6 00 00             \tmovb   $0x0,(%rax)\n  40122d:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  401232:\te8 d1 02 00 00       \tcallq  401508 <new_dictionary>\n  401237:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40123b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40123f:\tbe 04 a0 40 00       \tmov    $0x40a004,%esi\n  401244:\t48 89 c7             \tmov    %rax,%rdi\n  401247:\te8 6b 05 00 00       \tcallq  4017b7 <dict_add_str>\n  40124c:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  401250:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401254:\tbe 0b a0 40 00       \tmov    $0x40a00b,%esi\n  401259:\t48 89 c7             \tmov    %rax,%rdi\n  40125c:\te8 56 05 00 00       \tcallq  4017b7 <dict_add_str>\n  401261:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  401265:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401269:\tbe 14 a0 40 00       \tmov    $0x40a014,%esi\n  40126e:\t48 89 c7             \tmov    %rax,%rdi\n  401271:\te8 41 05 00 00       \tcallq  4017b7 <dict_add_str>\n  401276:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  40127a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40127e:\tbe 14 a0 40 00       \tmov    $0x40a014,%esi\n  401283:\t48 89 c7             \tmov    %rax,%rdi\n  401286:\te8 2c 05 00 00       \tcallq  4017b7 <dict_add_str>\n  40128b:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  40128f:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  401293:\t48 89 c7             \tmov    %rax,%rdi\n  401296:\te8 c5 fd ff ff       \tcallq  401060 <strlen@plt>\n  40129b:\t48 89 c3             \tmov    %rax,%rbx\n  40129e:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n  4012a2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4012a6:\t48 89 d6             \tmov    %rdx,%rsi\n  4012a9:\t48 89 c7             \tmov    %rax,%rdi\n  4012ac:\te8 47 01 00 00       \tcallq  4013f8 <dic_traceback_string>\n  4012b1:\t48 89 da             \tmov    %rbx,%rdx\n  4012b4:\t48 89 c6             \tmov    %rax,%rsi\n  4012b7:\tbf 1c a0 40 00       \tmov    $0x40a01c,%edi\n  4012bc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4012c1:\te8 aa fd ff ff       \tcallq  401070 <printf@plt>\n  4012c6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4012ca:\t48 89 c7             \tmov    %rax,%rdi\n  4012cd:\te8 a9 04 00 00       \tcallq  40177b <dict_size>\n  4012d2:\t89 c6                \tmov    %eax,%esi\n  4012d4:\tbf 29 a0 40 00       \tmov    $0x40a029,%edi\n  4012d9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4012de:\te8 8d fd ff ff       \tcallq  401070 <printf@plt>\n  4012e3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  4012e7:\t48 89 c7             \tmov    %rax,%rdi\n  4012ea:\te8 8c 04 00 00       \tcallq  40177b <dict_size>\n  4012ef:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n  4012f2:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  4012f9:\teb 3e                \tjmp    401339 <main+0x137>\n  4012fb:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n  4012fe:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401302:\t89 d6                \tmov    %edx,%esi\n  401304:\t48 89 c7             \tmov    %rax,%rdi\n  401307:\te8 16 04 00 00       \tcallq  401722 <dict_ele>\n  40130c:\t48 89 c2             \tmov    %rax,%rdx\n  40130f:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n  401313:\t48 89 c6             \tmov    %rax,%rsi\n  401316:\t48 89 d7             \tmov    %rdx,%rdi\n  401319:\te8 da 00 00 00       \tcallq  4013f8 <dic_traceback_string>\n  40131e:\t48 89 c2             \tmov    %rax,%rdx\n  401321:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  401324:\t89 c6                \tmov    %eax,%esi\n  401326:\tbf 33 a0 40 00       \tmov    $0x40a033,%edi\n  40132b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401330:\te8 3b fd ff ff       \tcallq  401070 <printf@plt>\n  401335:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  401339:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n  40133c:\t3b 45 bc             \tcmp    -0x44(%rbp),%eax\n  40133f:\t7c ba                \tjl     4012fb <main+0xf9>\n  401341:\tbf 40 a0 40 00       \tmov    $0x40a040,%edi\n  401346:\te8 05 fd ff ff       \tcallq  401050 <puts@plt>\n  40134b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40134f:\tbe 04 a0 40 00       \tmov    $0x40a004,%esi\n  401354:\t48 89 c7             \tmov    %rax,%rdi\n  401357:\te8 e2 04 00 00       \tcallq  40183e <dict_find_str>\n  40135c:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  401360:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401364:\t48 8b 00             \tmov    (%rax),%rax\n  401367:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n  40136b:\t48 39 45 b0          \tcmp    %rax,-0x50(%rbp)\n  40136f:\t74 37                \tje     4013a8 <main+0x1a6>\n  401371:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  401375:\t48 89 c7             \tmov    %rax,%rdi\n  401378:\te8 e3 fc ff ff       \tcallq  401060 <strlen@plt>\n  40137d:\t48 89 c3             \tmov    %rax,%rbx\n  401380:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n  401384:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  401388:\t48 89 d6             \tmov    %rdx,%rsi\n  40138b:\t48 89 c7             \tmov    %rax,%rdi\n  40138e:\te8 65 00 00 00       \tcallq  4013f8 <dic_traceback_string>\n  401393:\t48 89 da             \tmov    %rbx,%rdx\n  401396:\t48 89 c6             \tmov    %rax,%rsi\n  401399:\tbf 1c a0 40 00       \tmov    $0x40a01c,%edi\n  40139e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013a3:\te8 c8 fc ff ff       \tcallq  401070 <printf@plt>\n  4013a8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013ad:\t48 83 c4 68          \tadd    $0x68,%rsp\n  4013b1:\t5b                   \tpop    %rbx\n  4013b2:\t5d                   \tpop    %rbp\n  4013b3:\tc3                   \tretq   ", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  size_t v3;\n  const char *v4;\n  unsigned int v5;\n  __int64 v6;\n  const char *v7;\n  size_t v8;\n  const char *v9;\n  char *<span class=\"supfact\">s</span>[Number];\n  __int64 v12;\n  int v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  __int64 v17;\n  __int64 v18;\n  unsigned int i;\n  dic_setup(argc, argv, envp);\n  vector_char_init(<span class=\"supfact\">s</span>, Number L);\n  *<span class=\"supfact\">s</span>[Number] = Number;\n  v18 = new_dictionary(Number L);\n  v17 = dict_add_str(v18, String);\n  v16 = dict_add_str(v18, String);\n  v15 = dict_add_str(v18, String);\n  v14 = dict_add_str(v18, String);\n  v3 = strlen(<span class=\"supfact\">s</span>[Number]);\n  v4 = (const char *)dic_traceback_string(v17, <span class=\"supfact\">s</span>);\n  printf(String, v4, v3);\n  v5 = dict_size(v18);\n  printf(String, v5);\n  v13 = dict_size(v18);\n  for (i = Number; (int)i < v13; ++i) {\n    v6 = dict_ele(v18, i);\n    v7 = (const char *)dic_traceback_string(v6, <span class=\"supfact\">s</span>);\n    printf(String, i, v7);\n  }\n  puts(String);\n  v12 = dict_find_str(v18, String);\n  if (v12 != *(_QWORD *)(*(_QWORD *)v18 + Number L)) {\n    v8 = strlen(<span class=\"supfact\">s</span>[Number]);\n    v9 = (const char *)dic_traceback_string(v12, <span class=\"supfact\">s</span>);\n    printf(String, v9, v8);\n  }\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  size_t v3;\n  char *v4;\n  unsigned int v5;\n  rb_node *v6;\n  char *v7;\n  size_t v8;\n  char *v9;\n  vector_char_0 <span class=\"supfact\">str</span>;\n  rb_node *e;\n  int n;\n  rb_node *d;\n  rb_node *c;\n  rb_node *b;\n  rb_node *a;\n  dictionary *dict;\n  int i;\n  dic_setup();\n  vector_char_init(&<span class=\"supfact\">str</span>, Number);\n  *<span class=\"supfact\">str</span>.stor_begin = Number;\n  dict = new_dictionary(Number);\n  a = dict_add_str(dict, String);\n  b = dict_add_str(dict, String);\n  c = dict_add_str(dict, String);\n  d = dict_add_str(dict, String);\n  v3 = strlen(<span class=\"supfact\">str</span>.stor_begin);\n  v4 = dic_traceback_string(a, &<span class=\"supfact\">str</span>);\n  printf(String, v4, v3);\n  v5 = dict_size(dict);\n  printf(String, v5);\n  n = dict_size(dict);\n  for (i = Number; i < n; ++i) {\n    v6 = dict_ele(dict, i);\n    v7 = dic_traceback_string(v6, &<span class=\"supfact\">str</span>);\n    printf(String, (unsigned int)i, v7);\n  }\n  puts(String);\n  e = dict_find_str(dict, String);\n  if (e != dict->root->nil) {\n    v8 = strlen(<span class=\"supfact\">str</span>.stor_begin);\n    v9 = dic_traceback_string(e, &<span class=\"supfact\">str</span>);\n    printf(String, v9, v8);\n  }\n  return Number;\n}", "var": [{"name": "s", "type": "char *[3]", "pred_name": "s", "ref_name": "str", "ref_type": "struct vector_char_0 { char * stor_begin; char * stor_end; char * end; }"}], "body_in_train": false}, {"repo_owner": "SupraSummus", "repo_name": "musl", "path": "SupraSummus/musl/72ac0369e90a60e4a6cb61fdeb1e53986a417992599b6ba5c2e9a64180e3ac27", "path_in_repo": "SupraSummus/musl//obj/src/crypt/crypt_sha512.lo", "objdump": "0000000000000000 <sha512crypt>:\n   0:\t48 81 ec 18 02 00 00 \tsub    $0x218,%rsp\n   7:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n   c:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n  11:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n  16:\t48 c7 44 24 30 00 00 \tmovq   $0x0,0x30(%rsp)\n  1d:\t00 00 \n  1f:\t48 c7 44 24 38 00 00 \tmovq   $0x0,0x38(%rsp)\n  26:\t00 00 \n  28:\tc7 44 24 40 00 00 00 \tmovl   $0x0,0x40(%rsp)\n  2f:\t00 \n  30:\tc7 84 24 0c 02 00 00 \tmovl   $0x0,0x20c(%rsp)\n  37:\t00 00 00 00 \n  3b:\teb 08                \tjmp    45 <sha512crypt+0x45>\n  3d:\t83 84 24 0c 02 00 00 \taddl   $0x1,0x20c(%rsp)\n  44:\t01 \n  45:\t81 bc 24 0c 02 00 00 \tcmpl   $0x100,0x20c(%rsp)\n  4c:\t00 01 00 00 \n  50:\t77 16                \tja     68 <sha512crypt+0x68>\n  52:\t8b 94 24 0c 02 00 00 \tmov    0x20c(%rsp),%edx\n  59:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n  5e:\t48 01 d0             \tadd    %rdx,%rax\n  61:\t0f b6 00             \tmovzbl (%rax),%eax\n  64:\t84 c0                \ttest   %al,%al\n  66:\t75 d5                \tjne    3d <sha512crypt+0x3d>\n  68:\t81 bc 24 0c 02 00 00 \tcmpl   $0x100,0x20c(%rsp)\n  6f:\t00 01 00 00 \n  73:\t76 0a                \tjbe    7f <sha512crypt+0x7f>\n  75:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  7a:\te9 39 07 00 00       \tjmpq   7b8 <sha512crypt+0x7b8>\n  7f:\t8b 84 24 0c 02 00 00 \tmov    0x20c(%rsp),%eax\n  86:\t89 84 24 f4 01 00 00 \tmov    %eax,0x1f4(%rsp)\n  8d:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n  92:\tba 03 00 00 00       \tmov    $0x3,%edx\n  97:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 9e <sha512crypt+0x9e>\n  9e:\t48 89 c7             \tmov    %rax,%rdi\n  a1:\te8 00 00 00 00       \tcallq  a6 <sha512crypt+0xa6>\n  a6:\t85 c0                \ttest   %eax,%eax\n  a8:\t74 0a                \tje     b4 <sha512crypt+0xb4>\n  aa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  af:\te9 04 07 00 00       \tjmpq   7b8 <sha512crypt+0x7b8>\n  b4:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n  b9:\t48 83 c0 03          \tadd    $0x3,%rax\n  bd:\t48 89 84 24 00 02 00 \tmov    %rax,0x200(%rsp)\n  c4:\t00 \n  c5:\tc7 84 24 08 02 00 00 \tmovl   $0x1388,0x208(%rsp)\n  cc:\t88 13 00 00 \n  d0:\t48 8b 84 24 00 02 00 \tmov    0x200(%rsp),%rax\n  d7:\t00 \n  d8:\tba 07 00 00 00       \tmov    $0x7,%edx\n  dd:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # e4 <sha512crypt+0xe4>\n  e4:\t48 89 c7             \tmov    %rax,%rdi\n  e7:\te8 00 00 00 00       \tcallq  ec <sha512crypt+0xec>\n  ec:\t85 c0                \ttest   %eax,%eax\n  ee:\t0f 85 d7 00 00 00    \tjne    1cb <sha512crypt+0x1cb>\n  f4:\t48 83 84 24 00 02 00 \taddq   $0x7,0x200(%rsp)\n  fb:\t00 07 \n  fd:\t48 8b 84 24 00 02 00 \tmov    0x200(%rsp),%rax\n 104:\t00 \n 105:\t0f b6 00             \tmovzbl (%rax),%eax\n 108:\t0f be c0             \tmovsbl %al,%eax\n 10b:\t83 e8 30             \tsub    $0x30,%eax\n 10e:\t83 f8 09             \tcmp    $0x9,%eax\n 111:\t76 0a                \tjbe    11d <sha512crypt+0x11d>\n 113:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 118:\te9 9b 06 00 00       \tjmpq   7b8 <sha512crypt+0x7b8>\n 11d:\t48 8d 4c 24 28       \tlea    0x28(%rsp),%rcx\n 122:\t48 8b 84 24 00 02 00 \tmov    0x200(%rsp),%rax\n 129:\t00 \n 12a:\tba 0a 00 00 00       \tmov    $0xa,%edx\n 12f:\t48 89 ce             \tmov    %rcx,%rsi\n 132:\t48 89 c7             \tmov    %rax,%rdi\n 135:\te8 00 00 00 00       \tcallq  13a <sha512crypt+0x13a>\n 13a:\t48 89 84 24 e8 01 00 \tmov    %rax,0x1e8(%rsp)\n 141:\t00 \n 142:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n 147:\t0f b6 00             \tmovzbl (%rax),%eax\n 14a:\t3c 24                \tcmp    $0x24,%al\n 14c:\t74 0a                \tje     158 <sha512crypt+0x158>\n 14e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 153:\te9 60 06 00 00       \tjmpq   7b8 <sha512crypt+0x7b8>\n 158:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n 15d:\t48 83 c0 01          \tadd    $0x1,%rax\n 161:\t48 89 84 24 00 02 00 \tmov    %rax,0x200(%rsp)\n 168:\t00 \n 169:\t48 81 bc 24 e8 01 00 \tcmpq   $0x3e7,0x1e8(%rsp)\n 170:\t00 e7 03 00 00 \n 175:\t77 0d                \tja     184 <sha512crypt+0x184>\n 177:\tc7 84 24 08 02 00 00 \tmovl   $0x3e8,0x208(%rsp)\n 17e:\te8 03 00 00 \n 182:\teb 27                \tjmp    1ab <sha512crypt+0x1ab>\n 184:\t48 81 bc 24 e8 01 00 \tcmpq   $0x98967f,0x1e8(%rsp)\n 18b:\t00 7f 96 98 00 \n 190:\t76 0a                \tjbe    19c <sha512crypt+0x19c>\n 192:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 197:\te9 1c 06 00 00       \tjmpq   7b8 <sha512crypt+0x7b8>\n 19c:\t48 8b 84 24 e8 01 00 \tmov    0x1e8(%rsp),%rax\n 1a3:\t00 \n 1a4:\t89 84 24 08 02 00 00 \tmov    %eax,0x208(%rsp)\n 1ab:\t8b 94 24 08 02 00 00 \tmov    0x208(%rsp),%edx\n 1b2:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n 1b7:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 1be <sha512crypt+0x1be>\n 1be:\t48 89 c7             \tmov    %rax,%rdi\n 1c1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1c6:\te8 00 00 00 00       \tcallq  1cb <sha512crypt+0x1cb>\n 1cb:\tc7 84 24 0c 02 00 00 \tmovl   $0x0,0x20c(%rsp)\n 1d2:\t00 00 00 00 \n 1d6:\teb 44                \tjmp    21c <sha512crypt+0x21c>\n 1d8:\t8b 94 24 0c 02 00 00 \tmov    0x20c(%rsp),%edx\n 1df:\t48 8b 84 24 00 02 00 \tmov    0x200(%rsp),%rax\n 1e6:\t00 \n 1e7:\t48 01 d0             \tadd    %rdx,%rax\n 1ea:\t0f b6 00             \tmovzbl (%rax),%eax\n 1ed:\t3c 0a                \tcmp    $0xa,%al\n 1ef:\t74 19                \tje     20a <sha512crypt+0x20a>\n 1f1:\t8b 94 24 0c 02 00 00 \tmov    0x20c(%rsp),%edx\n 1f8:\t48 8b 84 24 00 02 00 \tmov    0x200(%rsp),%rax\n 1ff:\t00 \n 200:\t48 01 d0             \tadd    %rdx,%rax\n 203:\t0f b6 00             \tmovzbl (%rax),%eax\n 206:\t3c 3a                \tcmp    $0x3a,%al\n 208:\t75 0a                \tjne    214 <sha512crypt+0x214>\n 20a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 20f:\te9 a4 05 00 00       \tjmpq   7b8 <sha512crypt+0x7b8>\n 214:\t83 84 24 0c 02 00 00 \taddl   $0x1,0x20c(%rsp)\n 21b:\t01 \n 21c:\t83 bc 24 0c 02 00 00 \tcmpl   $0xf,0x20c(%rsp)\n 223:\t0f \n 224:\t77 32                \tja     258 <sha512crypt+0x258>\n 226:\t8b 94 24 0c 02 00 00 \tmov    0x20c(%rsp),%edx\n 22d:\t48 8b 84 24 00 02 00 \tmov    0x200(%rsp),%rax\n 234:\t00 \n 235:\t48 01 d0             \tadd    %rdx,%rax\n 238:\t0f b6 00             \tmovzbl (%rax),%eax\n 23b:\t84 c0                \ttest   %al,%al\n 23d:\t74 19                \tje     258 <sha512crypt+0x258>\n 23f:\t8b 94 24 0c 02 00 00 \tmov    0x20c(%rsp),%edx\n 246:\t48 8b 84 24 00 02 00 \tmov    0x200(%rsp),%rax\n 24d:\t00 \n 24e:\t48 01 d0             \tadd    %rdx,%rax\n 251:\t0f b6 00             \tmovzbl (%rax),%eax\n 254:\t3c 24                \tcmp    $0x24,%al\n 256:\t75 80                \tjne    1d8 <sha512crypt+0x1d8>\n 258:\t8b 84 24 0c 02 00 00 \tmov    0x20c(%rsp),%eax\n 25f:\t89 84 24 e4 01 00 00 \tmov    %eax,0x1e4(%rsp)\n 266:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 26d:\t00 \n 26e:\t48 89 c7             \tmov    %rax,%rdi\n 271:\te8 00 00 00 00       \tcallq  276 <sha512crypt+0x276>\n 276:\t8b 94 24 f4 01 00 00 \tmov    0x1f4(%rsp),%edx\n 27d:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n 282:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 289:\t00 \n 28a:\t48 89 ce             \tmov    %rcx,%rsi\n 28d:\t48 89 c7             \tmov    %rax,%rdi\n 290:\te8 00 00 00 00       \tcallq  295 <sha512crypt+0x295>\n 295:\t8b 94 24 e4 01 00 00 \tmov    0x1e4(%rsp),%edx\n 29c:\t48 8b 8c 24 00 02 00 \tmov    0x200(%rsp),%rcx\n 2a3:\t00 \n 2a4:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 2ab:\t00 \n 2ac:\t48 89 ce             \tmov    %rcx,%rsi\n 2af:\t48 89 c7             \tmov    %rax,%rdi\n 2b2:\te8 00 00 00 00       \tcallq  2b7 <sha512crypt+0x2b7>\n 2b7:\t8b 94 24 f4 01 00 00 \tmov    0x1f4(%rsp),%edx\n 2be:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n 2c3:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 2ca:\t00 \n 2cb:\t48 89 ce             \tmov    %rcx,%rsi\n 2ce:\t48 89 c7             \tmov    %rax,%rdi\n 2d1:\te8 00 00 00 00       \tcallq  2d6 <sha512crypt+0x2d6>\n 2d6:\t48 8d 94 24 d0 00 00 \tlea    0xd0(%rsp),%rdx\n 2dd:\t00 \n 2de:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 2e5:\t00 \n 2e6:\t48 89 d6             \tmov    %rdx,%rsi\n 2e9:\t48 89 c7             \tmov    %rax,%rdi\n 2ec:\te8 00 00 00 00       \tcallq  2f1 <sha512crypt+0x2f1>\n 2f1:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 2f8:\t00 \n 2f9:\t48 89 c7             \tmov    %rax,%rdi\n 2fc:\te8 00 00 00 00       \tcallq  301 <sha512crypt+0x301>\n 301:\t8b 94 24 f4 01 00 00 \tmov    0x1f4(%rsp),%edx\n 308:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n 30d:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 314:\t00 \n 315:\t48 89 ce             \tmov    %rcx,%rsi\n 318:\t48 89 c7             \tmov    %rax,%rdi\n 31b:\te8 00 00 00 00       \tcallq  320 <sha512crypt+0x320>\n 320:\t8b 94 24 e4 01 00 00 \tmov    0x1e4(%rsp),%edx\n 327:\t48 8b 8c 24 00 02 00 \tmov    0x200(%rsp),%rcx\n 32e:\t00 \n 32f:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 336:\t00 \n 337:\t48 89 ce             \tmov    %rcx,%rsi\n 33a:\t48 89 c7             \tmov    %rax,%rdi\n 33d:\te8 00 00 00 00       \tcallq  342 <sha512crypt+0x342>\n 342:\t48 8d 94 24 d0 00 00 \tlea    0xd0(%rsp),%rdx\n 349:\t00 \n 34a:\t8b 8c 24 f4 01 00 00 \tmov    0x1f4(%rsp),%ecx\n 351:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 358:\t00 \n 359:\t89 ce                \tmov    %ecx,%esi\n 35b:\t48 89 c7             \tmov    %rax,%rdi\n 35e:\te8 00 00 00 00       \tcallq  363 <sha512crypt+0x363>\n 363:\t8b 84 24 f4 01 00 00 \tmov    0x1f4(%rsp),%eax\n 36a:\t89 84 24 0c 02 00 00 \tmov    %eax,0x20c(%rsp)\n 371:\teb 56                \tjmp    3c9 <sha512crypt+0x3c9>\n 373:\t8b 84 24 0c 02 00 00 \tmov    0x20c(%rsp),%eax\n 37a:\t83 e0 01             \tand    $0x1,%eax\n 37d:\t85 c0                \ttest   %eax,%eax\n 37f:\t74 22                \tje     3a3 <sha512crypt+0x3a3>\n 381:\t48 8d 8c 24 d0 00 00 \tlea    0xd0(%rsp),%rcx\n 388:\t00 \n 389:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 390:\t00 \n 391:\tba 40 00 00 00       \tmov    $0x40,%edx\n 396:\t48 89 ce             \tmov    %rcx,%rsi\n 399:\t48 89 c7             \tmov    %rax,%rdi\n 39c:\te8 00 00 00 00       \tcallq  3a1 <sha512crypt+0x3a1>\n 3a1:\teb 1f                \tjmp    3c2 <sha512crypt+0x3c2>\n 3a3:\t8b 94 24 f4 01 00 00 \tmov    0x1f4(%rsp),%edx\n 3aa:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n 3af:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 3b6:\t00 \n 3b7:\t48 89 ce             \tmov    %rcx,%rsi\n 3ba:\t48 89 c7             \tmov    %rax,%rdi\n 3bd:\te8 00 00 00 00       \tcallq  3c2 <sha512crypt+0x3c2>\n 3c2:\td1 ac 24 0c 02 00 00 \tshrl   0x20c(%rsp)\n 3c9:\t83 bc 24 0c 02 00 00 \tcmpl   $0x0,0x20c(%rsp)\n 3d0:\t00 \n 3d1:\t75 a0                \tjne    373 <sha512crypt+0x373>\n 3d3:\t48 8d 94 24 d0 00 00 \tlea    0xd0(%rsp),%rdx\n 3da:\t00 \n 3db:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 3e2:\t00 \n 3e3:\t48 89 d6             \tmov    %rdx,%rsi\n 3e6:\t48 89 c7             \tmov    %rax,%rdi\n 3e9:\te8 00 00 00 00       \tcallq  3ee <sha512crypt+0x3ee>\n 3ee:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 3f5:\t00 \n 3f6:\t48 89 c7             \tmov    %rax,%rdi\n 3f9:\te8 00 00 00 00       \tcallq  3fe <sha512crypt+0x3fe>\n 3fe:\tc7 84 24 0c 02 00 00 \tmovl   $0x0,0x20c(%rsp)\n 405:\t00 00 00 00 \n 409:\teb 27                \tjmp    432 <sha512crypt+0x432>\n 40b:\t8b 94 24 f4 01 00 00 \tmov    0x1f4(%rsp),%edx\n 412:\t48 8b 4c 24 18       \tmov    0x18(%rsp),%rcx\n 417:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 41e:\t00 \n 41f:\t48 89 ce             \tmov    %rcx,%rsi\n 422:\t48 89 c7             \tmov    %rax,%rdi\n 425:\te8 00 00 00 00       \tcallq  42a <sha512crypt+0x42a>\n 42a:\t83 84 24 0c 02 00 00 \taddl   $0x1,0x20c(%rsp)\n 431:\t01 \n 432:\t8b 84 24 0c 02 00 00 \tmov    0x20c(%rsp),%eax\n 439:\t3b 84 24 f4 01 00 00 \tcmp    0x1f4(%rsp),%eax\n 440:\t72 c9                \tjb     40b <sha512crypt+0x40b>\n 442:\t48 8d 94 24 90 00 00 \tlea    0x90(%rsp),%rdx\n 449:\t00 \n 44a:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 451:\t00 \n 452:\t48 89 d6             \tmov    %rdx,%rsi\n 455:\t48 89 c7             \tmov    %rax,%rdi\n 458:\te8 00 00 00 00       \tcallq  45d <sha512crypt+0x45d>\n 45d:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 464:\t00 \n 465:\t48 89 c7             \tmov    %rax,%rdi\n 468:\te8 00 00 00 00       \tcallq  46d <sha512crypt+0x46d>\n 46d:\tc7 84 24 0c 02 00 00 \tmovl   $0x0,0x20c(%rsp)\n 474:\t00 00 00 00 \n 478:\teb 2a                \tjmp    4a4 <sha512crypt+0x4a4>\n 47a:\t8b 94 24 e4 01 00 00 \tmov    0x1e4(%rsp),%edx\n 481:\t48 8b 8c 24 00 02 00 \tmov    0x200(%rsp),%rcx\n 488:\t00 \n 489:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 490:\t00 \n 491:\t48 89 ce             \tmov    %rcx,%rsi\n 494:\t48 89 c7             \tmov    %rax,%rdi\n 497:\te8 00 00 00 00       \tcallq  49c <sha512crypt+0x49c>\n 49c:\t83 84 24 0c 02 00 00 \taddl   $0x1,0x20c(%rsp)\n 4a3:\t01 \n 4a4:\t0f b6 84 24 d0 00 00 \tmovzbl 0xd0(%rsp),%eax\n 4ab:\t00 \n 4ac:\t0f b6 c0             \tmovzbl %al,%eax\n 4af:\t83 c0 10             \tadd    $0x10,%eax\n 4b2:\t39 84 24 0c 02 00 00 \tcmp    %eax,0x20c(%rsp)\n 4b9:\t72 bf                \tjb     47a <sha512crypt+0x47a>\n 4bb:\t48 8d 54 24 50       \tlea    0x50(%rsp),%rdx\n 4c0:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 4c7:\t00 \n 4c8:\t48 89 d6             \tmov    %rdx,%rsi\n 4cb:\t48 89 c7             \tmov    %rax,%rdi\n 4ce:\te8 00 00 00 00       \tcallq  4d3 <sha512crypt+0x4d3>\n 4d3:\tc7 84 24 0c 02 00 00 \tmovl   $0x0,0x20c(%rsp)\n 4da:\t00 00 00 00 \n 4de:\te9 69 01 00 00       \tjmpq   64c <sha512crypt+0x64c>\n 4e3:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 4ea:\t00 \n 4eb:\t48 89 c7             \tmov    %rax,%rdi\n 4ee:\te8 00 00 00 00       \tcallq  4f3 <sha512crypt+0x4f3>\n 4f3:\t8b 84 24 0c 02 00 00 \tmov    0x20c(%rsp),%eax\n 4fa:\t83 e0 01             \tand    $0x1,%eax\n 4fd:\t85 c0                \ttest   %eax,%eax\n 4ff:\t74 23                \tje     524 <sha512crypt+0x524>\n 501:\t48 8d 94 24 90 00 00 \tlea    0x90(%rsp),%rdx\n 508:\t00 \n 509:\t8b 8c 24 f4 01 00 00 \tmov    0x1f4(%rsp),%ecx\n 510:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 517:\t00 \n 518:\t89 ce                \tmov    %ecx,%esi\n 51a:\t48 89 c7             \tmov    %rax,%rdi\n 51d:\te8 00 00 00 00       \tcallq  522 <sha512crypt+0x522>\n 522:\teb 20                \tjmp    544 <sha512crypt+0x544>\n 524:\t48 8d 8c 24 d0 00 00 \tlea    0xd0(%rsp),%rcx\n 52b:\t00 \n 52c:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 533:\t00 \n 534:\tba 40 00 00 00       \tmov    $0x40,%edx\n 539:\t48 89 ce             \tmov    %rcx,%rsi\n 53c:\t48 89 c7             \tmov    %rax,%rdi\n 53f:\te8 00 00 00 00       \tcallq  544 <sha512crypt+0x544>\n 544:\t8b 8c 24 0c 02 00 00 \tmov    0x20c(%rsp),%ecx\n 54b:\t89 ca                \tmov    %ecx,%edx\n 54d:\tb8 ab aa aa aa       \tmov    $0xaaaaaaab,%eax\n 552:\t48 0f af c2          \timul   %rdx,%rax\n 556:\t48 c1 e8 20          \tshr    $0x20,%rax\n 55a:\td1 e8                \tshr    %eax\n 55c:\t89 c2                \tmov    %eax,%edx\n 55e:\t01 d2                \tadd    %edx,%edx\n 560:\t01 c2                \tadd    %eax,%edx\n 562:\t89 c8                \tmov    %ecx,%eax\n 564:\t29 d0                \tsub    %edx,%eax\n 566:\t85 c0                \ttest   %eax,%eax\n 568:\t74 1f                \tje     589 <sha512crypt+0x589>\n 56a:\t8b 94 24 e4 01 00 00 \tmov    0x1e4(%rsp),%edx\n 571:\t48 8d 4c 24 50       \tlea    0x50(%rsp),%rcx\n 576:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 57d:\t00 \n 57e:\t48 89 ce             \tmov    %rcx,%rsi\n 581:\t48 89 c7             \tmov    %rax,%rdi\n 584:\te8 00 00 00 00       \tcallq  589 <sha512crypt+0x589>\n 589:\t8b 8c 24 0c 02 00 00 \tmov    0x20c(%rsp),%ecx\n 590:\t89 c8                \tmov    %ecx,%eax\n 592:\t48 69 c0 25 49 92 24 \timul   $0x24924925,%rax,%rax\n 599:\t48 c1 e8 20          \tshr    $0x20,%rax\n 59d:\t89 ca                \tmov    %ecx,%edx\n 59f:\t29 c2                \tsub    %eax,%edx\n 5a1:\td1 ea                \tshr    %edx\n 5a3:\t01 d0                \tadd    %edx,%eax\n 5a5:\tc1 e8 02             \tshr    $0x2,%eax\n 5a8:\t89 c2                \tmov    %eax,%edx\n 5aa:\tc1 e2 03             \tshl    $0x3,%edx\n 5ad:\t29 c2                \tsub    %eax,%edx\n 5af:\t89 c8                \tmov    %ecx,%eax\n 5b1:\t29 d0                \tsub    %edx,%eax\n 5b3:\t85 c0                \ttest   %eax,%eax\n 5b5:\t74 21                \tje     5d8 <sha512crypt+0x5d8>\n 5b7:\t48 8d 94 24 90 00 00 \tlea    0x90(%rsp),%rdx\n 5be:\t00 \n 5bf:\t8b 8c 24 f4 01 00 00 \tmov    0x1f4(%rsp),%ecx\n 5c6:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 5cd:\t00 \n 5ce:\t89 ce                \tmov    %ecx,%esi\n 5d0:\t48 89 c7             \tmov    %rax,%rdi\n 5d3:\te8 00 00 00 00       \tcallq  5d8 <sha512crypt+0x5d8>\n 5d8:\t8b 84 24 0c 02 00 00 \tmov    0x20c(%rsp),%eax\n 5df:\t83 e0 01             \tand    $0x1,%eax\n 5e2:\t85 c0                \ttest   %eax,%eax\n 5e4:\t74 22                \tje     608 <sha512crypt+0x608>\n 5e6:\t48 8d 8c 24 d0 00 00 \tlea    0xd0(%rsp),%rcx\n 5ed:\t00 \n 5ee:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 5f5:\t00 \n 5f6:\tba 40 00 00 00       \tmov    $0x40,%edx\n 5fb:\t48 89 ce             \tmov    %rcx,%rsi\n 5fe:\t48 89 c7             \tmov    %rax,%rdi\n 601:\te8 00 00 00 00       \tcallq  606 <sha512crypt+0x606>\n 606:\teb 21                \tjmp    629 <sha512crypt+0x629>\n 608:\t48 8d 94 24 90 00 00 \tlea    0x90(%rsp),%rdx\n 60f:\t00 \n 610:\t8b 8c 24 f4 01 00 00 \tmov    0x1f4(%rsp),%ecx\n 617:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 61e:\t00 \n 61f:\t89 ce                \tmov    %ecx,%esi\n 621:\t48 89 c7             \tmov    %rax,%rdi\n 624:\te8 00 00 00 00       \tcallq  629 <sha512crypt+0x629>\n 629:\t48 8d 94 24 d0 00 00 \tlea    0xd0(%rsp),%rdx\n 630:\t00 \n 631:\t48 8d 84 24 10 01 00 \tlea    0x110(%rsp),%rax\n 638:\t00 \n 639:\t48 89 d6             \tmov    %rdx,%rsi\n 63c:\t48 89 c7             \tmov    %rax,%rdi\n 63f:\te8 00 00 00 00       \tcallq  644 <sha512crypt+0x644>\n 644:\t83 84 24 0c 02 00 00 \taddl   $0x1,0x20c(%rsp)\n 64b:\t01 \n 64c:\t8b 84 24 0c 02 00 00 \tmov    0x20c(%rsp),%eax\n 653:\t3b 84 24 08 02 00 00 \tcmp    0x208(%rsp),%eax\n 65a:\t0f 82 83 fe ff ff    \tjb     4e3 <sha512crypt+0x4e3>\n 660:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 665:\t48 89 84 24 f8 01 00 \tmov    %rax,0x1f8(%rsp)\n 66c:\t00 \n 66d:\t48 8b b4 24 00 02 00 \tmov    0x200(%rsp),%rsi\n 674:\t00 \n 675:\t8b 8c 24 e4 01 00 00 \tmov    0x1e4(%rsp),%ecx\n 67c:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n 681:\t48 8b 84 24 f8 01 00 \tmov    0x1f8(%rsp),%rax\n 688:\t00 \n 689:\t49 89 f0             \tmov    %rsi,%r8\n 68c:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 693 <sha512crypt+0x693>\n 693:\t48 89 c7             \tmov    %rax,%rdi\n 696:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 69b:\te8 00 00 00 00       \tcallq  6a0 <sha512crypt+0x6a0>\n 6a0:\t48 98                \tcltq   \n 6a2:\t48 01 84 24 f8 01 00 \tadd    %rax,0x1f8(%rsp)\n 6a9:\t00 \n 6aa:\tc7 84 24 0c 02 00 00 \tmovl   $0x0,0x20c(%rsp)\n 6b1:\t00 00 00 00 \n 6b5:\te9 b6 00 00 00       \tjmpq   770 <sha512crypt+0x770>\n 6ba:\t8b 94 24 0c 02 00 00 \tmov    0x20c(%rsp),%edx\n 6c1:\t48 89 d0             \tmov    %rdx,%rax\n 6c4:\t48 01 c0             \tadd    %rax,%rax\n 6c7:\t48 01 c2             \tadd    %rax,%rdx\n 6ca:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 6d1 <sha512crypt+0x6d1>\n 6d1:\t0f b6 04 02          \tmovzbl (%rdx,%rax,1),%eax\n 6d5:\t0f b6 c0             \tmovzbl %al,%eax\n 6d8:\t48 98                \tcltq   \n 6da:\t0f b6 84 04 d0 00 00 \tmovzbl 0xd0(%rsp,%rax,1),%eax\n 6e1:\t00 \n 6e2:\t0f b6 c0             \tmovzbl %al,%eax\n 6e5:\tc1 e0 10             \tshl    $0x10,%eax\n 6e8:\t89 c1                \tmov    %eax,%ecx\n 6ea:\t8b 94 24 0c 02 00 00 \tmov    0x20c(%rsp),%edx\n 6f1:\t48 89 d0             \tmov    %rdx,%rax\n 6f4:\t48 01 c0             \tadd    %rax,%rax\n 6f7:\t48 01 c2             \tadd    %rax,%rdx\n 6fa:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 701 <sha512crypt+0x701>\n 701:\t0f b6 04 02          \tmovzbl (%rdx,%rax,1),%eax\n 705:\t0f b6 c0             \tmovzbl %al,%eax\n 708:\t48 98                \tcltq   \n 70a:\t0f b6 84 04 d0 00 00 \tmovzbl 0xd0(%rsp,%rax,1),%eax\n 711:\t00 \n 712:\t0f b6 c0             \tmovzbl %al,%eax\n 715:\tc1 e0 08             \tshl    $0x8,%eax\n 718:\t09 c1                \tor     %eax,%ecx\n 71a:\t8b 94 24 0c 02 00 00 \tmov    0x20c(%rsp),%edx\n 721:\t48 89 d0             \tmov    %rdx,%rax\n 724:\t48 01 c0             \tadd    %rax,%rax\n 727:\t48 01 c2             \tadd    %rax,%rdx\n 72a:\t48 8d 05 00 00 00 00 \tlea    0x0(%rip),%rax        # 731 <sha512crypt+0x731>\n 731:\t0f b6 04 02          \tmovzbl (%rdx,%rax,1),%eax\n 735:\t0f b6 c0             \tmovzbl %al,%eax\n 738:\t48 98                \tcltq   \n 73a:\t0f b6 84 04 d0 00 00 \tmovzbl 0xd0(%rsp,%rax,1),%eax\n 741:\t00 \n 742:\t0f b6 c0             \tmovzbl %al,%eax\n 745:\t09 c8                \tor     %ecx,%eax\n 747:\t89 c1                \tmov    %eax,%ecx\n 749:\t48 8b 84 24 f8 01 00 \tmov    0x1f8(%rsp),%rax\n 750:\t00 \n 751:\tba 04 00 00 00       \tmov    $0x4,%edx\n 756:\t89 ce                \tmov    %ecx,%esi\n 758:\t48 89 c7             \tmov    %rax,%rdi\n 75b:\te8 00 00 00 00       \tcallq  760 <sha512crypt+0x760>\n 760:\t48 89 84 24 f8 01 00 \tmov    %rax,0x1f8(%rsp)\n 767:\t00 \n 768:\t83 84 24 0c 02 00 00 \taddl   $0x1,0x20c(%rsp)\n 76f:\t01 \n 770:\t83 bc 24 0c 02 00 00 \tcmpl   $0x14,0x20c(%rsp)\n 777:\t14 \n 778:\t0f 86 3c ff ff ff    \tjbe    6ba <sha512crypt+0x6ba>\n 77e:\t0f b6 84 24 0f 01 00 \tmovzbl 0x10f(%rsp),%eax\n 785:\t00 \n 786:\t0f b6 c8             \tmovzbl %al,%ecx\n 789:\t48 8b 84 24 f8 01 00 \tmov    0x1f8(%rsp),%rax\n 790:\t00 \n 791:\tba 02 00 00 00       \tmov    $0x2,%edx\n 796:\t89 ce                \tmov    %ecx,%esi\n 798:\t48 89 c7             \tmov    %rax,%rdi\n 79b:\te8 00 00 00 00       \tcallq  7a0 <sha512crypt+0x7a0>\n 7a0:\t48 89 84 24 f8 01 00 \tmov    %rax,0x1f8(%rsp)\n 7a7:\t00 \n 7a8:\t48 8b 84 24 f8 01 00 \tmov    0x1f8(%rsp),%rax\n 7af:\t00 \n 7b0:\tc6 00 00             \tmovb   $0x0,(%rax)\n 7b3:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n 7b8:\t48 81 c4 18 02 00 00 \tadd    $0x218,%rsp\n 7bf:\tc3                   \tretq   ", "code_s": "char *__fastcall sha512crypt(char *a1, __int64 a2, char *a3) {\n  int v4;\n  char *endptr;\n  char s[Number];\n  __int64 v8;\n  int v9;\n  char v10[Number];\n  char v11[Number];\n  char v12[Number];\n  _QWORD <span class=\"supfact\">v13</span>[Number];\n  unsigned int v14;\n  unsigned __int64 v15;\n  unsigned int v16;\n  char *v17;\n  char *nptr;\n  unsigned int v19;\n  unsigned int i;\n  *(_QWORD *)s = Number L;\n  v8 = Number L;\n  v9 = Number;\n  for (i = Number; i <= Number && a1[i]; ++i)\n    ;\n  if (i > Number)\n    return Number L;\n  v16 = i;\n  if (strncmp((const char *)a2, String, Number))\n    return Number L;\n  nptr = (char *)(a2 + Number);\n  v19 = Number;\n  if (!strncmp((const char *)(a2 + Number), String, Number)) {\n    nptr += Number;\n    if ((unsigned int)(*nptr - Number) > Number)\n      return Number L;\n    v15 = strtoul(nptr, &endptr, Number);\n    if (*endptr != Number)\n      return Number L;\n    nptr = endptr + Number;\n    if (v15 > Number) {\n      if (v15 > Number)\n        return Number L;\n      v19 = v15;\n    } else {\n      v19 = Number;\n    }\n    sprintf(s, String, v19);\n  }\n  for (i = Number; i <= Number && nptr[i] && nptr[i] != Number; ++i) {\n    if (nptr[i] == Number || nptr[i] == Number)\n      return Number L;\n  }\n  v14 = i;\n  sha512_init(<span class=\"supfact\">v13</span>);\n  sha512_update(<span class=\"supfact\">v13</span>, a1, v16);\n  sha512_update(<span class=\"supfact\">v13</span>, nptr, v14);\n  sha512_update(<span class=\"supfact\">v13</span>, a1, v16);\n  sha512_sum((__int64)<span class=\"supfact\">v13</span>, (__int64)v12);\n  sha512_init(<span class=\"supfact\">v13</span>);\n  sha512_update(<span class=\"supfact\">v13</span>, a1, v16);\n  sha512_update(<span class=\"supfact\">v13</span>, nptr, v14);\n  hashmd(<span class=\"supfact\">v13</span>, v16, v12);\n  for (i = v16; i; i >>= Number) {\n    if ((i & Number) != Number)\n      sha512_update(<span class=\"supfact\">v13</span>, v12, Number);\n    else\n      sha512_update(<span class=\"supfact\">v13</span>, a1, v16);\n  }\n  sha512_sum((__int64)<span class=\"supfact\">v13</span>, (__int64)v12);\n  sha512_init(<span class=\"supfact\">v13</span>);\n  for (i = Number; i < v16; ++i)\n    sha512_update(<span class=\"supfact\">v13</span>, a1, v16);\n  sha512_sum((__int64)<span class=\"supfact\">v13</span>, (__int64)v11);\n  sha512_init(<span class=\"supfact\">v13</span>);\n  for (i = Number; i < (unsigned int)(unsigned __int8)v12[Number] + Number; ++i)\n    sha512_update(<span class=\"supfact\">v13</span>, nptr, v14);\n  sha512_sum((__int64)<span class=\"supfact\">v13</span>, (__int64)v10);\n  for (i = Number; i < v19; ++i) {\n    sha512_init(<span class=\"supfact\">v13</span>);\n    if ((i & Number) != Number)\n      hashmd(<span class=\"supfact\">v13</span>, v16, v11);\n    else\n      sha512_update(<span class=\"supfact\">v13</span>, v12, Number);\n    if (i % Number)\n      sha512_update(<span class=\"supfact\">v13</span>, v10, v14);\n    if (i % Number)\n      hashmd(<span class=\"supfact\">v13</span>, v16, v11);\n    if ((i & Number) != Number)\n      sha512_update(<span class=\"supfact\">v13</span>, v12, Number);\n    else\n      hashmd(<span class=\"supfact\">v13</span>, v16, v11);\n    sha512_sum((__int64)<span class=\"supfact\">v13</span>, (__int64)v12);\n  }\n  v17 = a3;\n  v4 = sprintf(a3, String, s, v14, nptr);\n  v17 += v4;\n  for (i = Number; i <= Number; ++i)\n    v17 = to64(\n        v17,\n        ((unsigned __int8)v12[*((unsigned __int8 *)&unk_1841 + Number * i)]\n         << Number) |\n            ((unsigned __int8)v12[*((unsigned __int8 *)&perm_2165 + Number * i)]\n             << Number) |\n            (unsigned int)(unsigned __int8)v12[byte_1842[Number * i]],\n        Number);\n  v17 = to64(v17, (unsigned __int8)v12[Number], Number);\n  *v17 = Number;\n  return a3;\n}", "code_t": "char *__cdecl sha512crypt(const char *key, const char *setting, char *output) {\n  int v4;\n  char *end;\n  char rounds[Number];\n  unsigned __int8 smd[Number];\n  unsigned __int8 kmd[Number];\n  unsigned __int8 md[Number];\n  sha512 <span class=\"supfact\">ctx</span>;\n  unsigned int slen;\n  unsigned __int64 u;\n  unsigned int klen;\n  char *p;\n  const char *salt;\n  unsigned int r;\n  unsigned int i;\n  *(_QWORD *)rounds = Number L;\n  *(_QWORD *)&rounds[Number] = Number L;\n  *(_DWORD *)&rounds[Number] = Number;\n  for (i = Number; i <= Number && key[i]; ++i)\n    ;\n  if (i > Number)\n    return Number L;\n  klen = i;\n  if (strncmp(setting, String, Number))\n    return Number L;\n  salt = setting + Number;\n  r = Number;\n  if (!strncmp(setting + Number, String, Number)) {\n    salt += Number;\n    if ((unsigned int)(*salt - Number) > Number)\n      return Number L;\n    u = strtoul(salt, &end, Number);\n    if (*end != Number)\n      return Number L;\n    salt = end + Number;\n    if (u > Number) {\n      if (u > Number)\n        return Number L;\n      r = u;\n    } else {\n      r = Number;\n    }\n    sprintf(rounds, String, r);\n  }\n  for (i = Number; i <= Number && salt[i] && salt[i] != Number; ++i) {\n    if (salt[i] == Number || salt[i] == Number)\n      return Number L;\n  }\n  slen = i;\n  sha512_init(&<span class=\"supfact\">ctx</span>);\n  sha512_update(&<span class=\"supfact\">ctx</span>, key, klen);\n  sha512_update(&<span class=\"supfact\">ctx</span>, salt, slen);\n  sha512_update(&<span class=\"supfact\">ctx</span>, key, klen);\n  sha512_sum(&<span class=\"supfact\">ctx</span>, md);\n  sha512_init(&<span class=\"supfact\">ctx</span>);\n  sha512_update(&<span class=\"supfact\">ctx</span>, key, klen);\n  sha512_update(&<span class=\"supfact\">ctx</span>, salt, slen);\n  hashmd(&<span class=\"supfact\">ctx</span>, klen, md);\n  for (i = klen; i; i >>= Number) {\n    if ((i & Number) != Number)\n      sha512_update(&<span class=\"supfact\">ctx</span>, md, Number);\n    else\n      sha512_update(&<span class=\"supfact\">ctx</span>, key, klen);\n  }\n  sha512_sum(&<span class=\"supfact\">ctx</span>, md);\n  sha512_init(&<span class=\"supfact\">ctx</span>);\n  for (i = Number; i < klen; ++i)\n    sha512_update(&<span class=\"supfact\">ctx</span>, key, klen);\n  sha512_sum(&<span class=\"supfact\">ctx</span>, kmd);\n  sha512_init(&<span class=\"supfact\">ctx</span>);\n  for (i = Number; i < (unsigned int)md[Number] + Number; ++i)\n    sha512_update(&<span class=\"supfact\">ctx</span>, salt, slen);\n  sha512_sum(&<span class=\"supfact\">ctx</span>, smd);\n  for (i = Number; i < r; ++i) {\n    sha512_init(&<span class=\"supfact\">ctx</span>);\n    if ((i & Number) != Number)\n      hashmd(&<span class=\"supfact\">ctx</span>, klen, kmd);\n    else\n      sha512_update(&<span class=\"supfact\">ctx</span>, md, Number);\n    if (i % Number)\n      sha512_update(&<span class=\"supfact\">ctx</span>, smd, slen);\n    if (i % Number)\n      hashmd(&<span class=\"supfact\">ctx</span>, klen, kmd);\n    if ((i & Number) != Number)\n      sha512_update(&<span class=\"supfact\">ctx</span>, md, Number);\n    else\n      hashmd(&<span class=\"supfact\">ctx</span>, klen, kmd);\n    sha512_sum(&<span class=\"supfact\">ctx</span>, md);\n  }\n  p = output;\n  v4 = sprintf(output, String, rounds, slen, salt);\n  p += v4;\n  for (i = Number; i <= Number; ++i)\n    p = to64(p,\n             (md[perm_2165[i][Number]] << Number) |\n                 (md[perm_2165[i][Number]] << Number) |\n                 (unsigned int)md[perm_2165[i][Number]],\n             Number);\n  p = to64(p, md[Number], Number);\n  *p = Number;\n  return output;\n}", "var": [{"name": "v13", "type": "__unk__", "pred_name": "ctx", "ref_name": "ctx", "ref_type": "struct sha512 { uint64_t len; uint64_t[8] h; uint8_t[128] buf; }"}], "body_in_train": false}, {"repo_owner": "shujunqiao", "repo_name": "FEX", "path": "shujunqiao/FEX/ec61745f5ae8f0dcd1380ce5de3ac3b1482a4d6fc1b93ce22c7584ef8f0ccdde", "path_in_repo": "shujunqiao/FEX/libs/cocos2dx/proj.linux/obj/release/actions/CCActionCatmullRom.o", "objdump": "000000000000004c <_ZN7cocos2d18CCCardinalSplineTo12copyWithZoneEPNS_6CCZoneE.cold>:\n  4c:\t4c 89 e7             \tmov    %r12,%rdi\n  4f:\tbe 58 00 00 00       \tmov    $0x58,%esi\n  54:\te8 00 00 00 00       \tcallq  59 <_ZN7cocos2d18CCCardinalSplineTo12copyWithZoneEPNS_6CCZoneE.cold+0xd>\n  59:\t48 89 ef             \tmov    %rbp,%rdi\n  5c:\te8 00 00 00 00       \tcallq  61 <_ZN7cocos2d18CCCardinalSplineTo12copyWithZoneEPNS_6CCZoneE.cold+0x15>\n  61:\t48 89 ef             \tmov    %rbp,%rdi\n  64:\tbe 08 00 00 00       \tmov    $0x8,%esi\n  69:\te8 00 00 00 00       \tcallq  6e <_ZN7cocos2d18CCCardinalSplineTo12copyWithZoneEPNS_6CCZoneE.cold+0x22>\n  6e:\t4c 89 e7             \tmov    %r12,%rdi\n  71:\te8 00 00 00 00       \tcallq  76 <_ZN7cocos2d18CCCardinalSplineByC2Ev.cold>", "code_s": "void __fastcall __noreturn cocos2d CCCardinalSplineTo copyWithZone() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  void *v1;\n  operator delete(v1, Number);\n  Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "code_t": "void __fastcall __noreturn cocos2d CCCardinalSplineTo copyWithZone() {\n  struct _Unwind_Exception *<span class=\"supfact\">v0</span>;\n  void *v1;\n  operator delete(v1, Number);\n  Unwind_Resume(<span class=\"supfact\">v0</span>);\n}", "var": [{"name": "v0", "type": "struct _Unwind_Exception *", "pred_name": "v0", "ref_name": "v0", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "RJVB", "repo_name": "FFusion", "path": "RJVB/FFusion/bf6e8bec78ee398784560236882fd4e6bf6dc6a49fcb8ff46649304244ff1cdc", "path_in_repo": "RJVB/FFusion/FFmpeg/source/libavcodec/qdm2.o", "objdump": "0000000000004748 <process_subpacket_10>:\n    4748:\t48 83 ec 48          \tsub    $0x48,%rsp\n    474c:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    4751:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    4756:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n    475a:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n    4760:\t74 12                \tje     4774 <process_subpacket_10+0x2c>\n    4762:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    4767:\t48 8b 00             \tmov    (%rax),%rax\n    476a:\t8b 40 04             \tmov    0x4(%rax),%eax\n    476d:\tc1 e0 03             \tshl    $0x3,%eax\n    4770:\t89 c2                \tmov    %eax,%edx\n    4772:\teb 05                \tjmp    4779 <process_subpacket_10+0x31>\n    4774:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4779:\t48 83 7c 24 10 00    \tcmpq   $0x0,0x10(%rsp)\n    477f:\t74 0e                \tje     478f <process_subpacket_10+0x47>\n    4781:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    4786:\t48 8b 00             \tmov    (%rax),%rax\n    4789:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    478d:\teb 05                \tjmp    4794 <process_subpacket_10+0x4c>\n    478f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4794:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    4799:\t48 89 c6             \tmov    %rax,%rsi\n    479c:\t48 89 cf             \tmov    %rcx,%rdi\n    479f:\te8 c3 b9 ff ff       \tcallq  167 <init_get_bits>\n    47a4:\t83 7c 24 0c 00       \tcmpl   $0x0,0xc(%rsp)\n    47a9:\t74 2d                \tje     47d8 <process_subpacket_10+0x90>\n    47ab:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n    47af:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    47b4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    47b9:\t48 89 ce             \tmov    %rcx,%rsi\n    47bc:\t48 89 c7             \tmov    %rax,%rdi\n    47bf:\te8 e3 f7 ff ff       \tcallq  3fa7 <init_tone_level_dequantization>\n    47c4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    47c9:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    47ce:\t48 89 c7             \tmov    %rax,%rdi\n    47d1:\te8 8d d1 ff ff       \tcallq  1963 <fill_tone_level_array>\n    47d6:\teb 12                \tjmp    47ea <process_subpacket_10+0xa2>\n    47d8:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    47dd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    47e2:\t48 89 c7             \tmov    %rax,%rdi\n    47e5:\te8 79 d1 ff ff       \tcallq  1963 <fill_tone_level_array>\n    47ea:\t90                   \tnop\n    47eb:\t48 83 c4 48          \tadd    $0x48,%rsp\n    47ef:\tc3                   \tretq   ", "code_s": "__int64 __fastcall process_subpacket_10(signed int *a1, __int64 a2, int a3) {\n  int v3;\n  void *v4;\n  char <span class=\"supfact\">v7</span>[Number];\n  if (a2)\n    v3 = Number * *(_DWORD *)(*(_QWORD *)a2 + Number L);\n  else\n    v3 = Number;\n  if (a2)\n    v4 = *(void **)(*(_QWORD *)a2 + Number L);\n  else\n    v4 = &empty_buffer;\n  init_get_bits((__int64)<span class=\"supfact\">v7</span>, (__int64)v4, v3);\n  if (!a3)\n    return fill_tone_level_array(a1, Number);\n  init_tone_level_dequantization(a1, (__int64)<span class=\"supfact\">v7</span>, a3);\n  return fill_tone_level_array(a1, Number);\n}", "code_t": "void __cdecl process_subpacket_10(QDM2Context *q, QDM2SubPNode_0 *node,\n                                  int length) {\n  int v3;\n  uint8_t *v4;\n  GetBitContext_0 <span class=\"supfact\">gb</span>;\n  if (node)\n    v3 = Number * node->packet->size;\n  else\n    v3 = Number;\n  if (node)\n    v4 = (uint8_t *)node->packet->data;\n  else\n    v4 = empty_buffer;\n  init_get_bits(&<span class=\"supfact\">gb</span>, v4, v3);\n  if (length) {\n    init_tone_level_dequantization(q, &<span class=\"supfact\">gb</span>, length);\n    fill_tone_level_array(q, Number);\n  } else {\n    fill_tone_level_array(q, Number);\n  }\n}", "var": [{"name": "v7", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }", "pred_name": "gb", "ref_name": "gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; }"}], "body_in_train": false}, {"repo_owner": "csjpeter", "repo_name": "psqldroid", "path": "csjpeter/psqldroid/fcf7d4e42425392efb81d0a17dc8edc9f761102581e479c1f14acf871f5e8ca8", "path_in_repo": "csjpeter/psqldroid//src/backend/commands/prepare.o", "objdump": "0000000000000b4b <InitQueryHashTable>:\n     b4b:\t55                   \tpush   %rbp\n     b4c:\t48 89 e5             \tmov    %rsp,%rbp\n     b4f:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n     b56:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n     b5d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     b61:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n     b68:\t48 c7 45 e0 68 00 00 \tmovq   $0x68,-0x20(%rbp)\n     b6f:\t00 \n     b70:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     b74:\t83 e0 07             \tand    $0x7,%eax\n     b77:\t48 85 c0             \ttest   %rax,%rax\n     b7a:\t75 54                \tjne    bd0 <InitQueryHashTable+0x85>\n     b7c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     b80:\t83 e0 07             \tand    $0x7,%eax\n     b83:\t48 85 c0             \ttest   %rax,%rax\n     b86:\t75 48                \tjne    bd0 <InitQueryHashTable+0x85>\n     b88:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n     b8c:\t75 42                \tjne    bd0 <InitQueryHashTable+0x85>\n     b8e:\t48 81 7d e0 00 04 00 \tcmpq   $0x400,-0x20(%rbp)\n     b95:\t00 \n     b96:\t77 38                \tja     bd0 <InitQueryHashTable+0x85>\n     b98:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     b9c:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     ba0:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     ba4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     ba8:\t48 01 d0             \tadd    %rdx,%rax\n     bab:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     baf:\teb 13                \tjmp    bc4 <InitQueryHashTable+0x79>\n     bb1:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     bb5:\t48 8d 50 08          \tlea    0x8(%rax),%rdx\n     bb9:\t48 89 55 f8          \tmov    %rdx,-0x8(%rbp)\n     bbd:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     bc4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     bc8:\t48 3b 45 d8          \tcmp    -0x28(%rbp),%rax\n     bcc:\t72 e3                \tjb     bb1 <InitQueryHashTable+0x66>\n     bce:\teb 15                \tjmp    be5 <InitQueryHashTable+0x9a>\n     bd0:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n     bd4:\t8b 4d ec             \tmov    -0x14(%rbp),%ecx\n     bd7:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     bdb:\t89 ce                \tmov    %ecx,%esi\n     bdd:\t48 89 c7             \tmov    %rax,%rdi\n     be0:\te8 00 00 00 00       \tcallq  be5 <InitQueryHashTable+0x9a>\n     be5:\t48 c7 45 98 40 00 00 \tmovq   $0x40,-0x68(%rbp)\n     bec:\t00 \n     bed:\t48 c7 45 a0 58 00 00 \tmovq   $0x58,-0x60(%rbp)\n     bf4:\t00 \n     bf5:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n     bfc:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n     c01:\t48 89 c2             \tmov    %rax,%rdx\n     c04:\tbe 20 00 00 00       \tmov    $0x20,%esi\n     c09:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c0e:\te8 00 00 00 00       \tcallq  c13 <InitQueryHashTable+0xc8>\n     c13:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # c1a <InitQueryHashTable+0xcf>\n     c1a:\t90                   \tnop\n     c1b:\tc9                   \tleaveq \n     c1c:\tc3                   \tretq   ", "code_s": "__int64 InitQueryHashTable() {\n  _QWORD *v0;\n  __int64 result;\n  char <span class=\"supfact\">v2</span>[Number];\n  __int64 v3;\n  __int64 v4;\n  unsigned __int64 v5;\n  size_t n;\n  int c;\n  void *s;\n  _QWORD *v9;\n  s = <span class=\"supfact\">v2</span>;\n  c = Number;\n  n = Number L;\n  if (((unsigned __int8)<span class=\"supfact\">v2</span> & Number) != Number ||\n      (n & Number) != Number) {\n    memset(s, c, n);\n  } else {\n    v9 = s;\n    v5 = (unsigned __int64)s + n;\n    while ((unsigned __int64)v9 < v5) {\n      v0 = v9++;\n      *v0 = Number L;\n    }\n  }\n  v3 = Number L;\n  v4 = Number L;\n  result = hash_create(String, Number L, <span class=\"supfact\">v2</span>, Number L);\n  prepared_queries = result;\n  return result;\n}", "code_t": "void __cdecl InitQueryHashTable() {\n  __int64 *v0;\n  HASHCTL_0 <span class=\"supfact\">hash_ctl</span>;\n  __int64 *_stop;\n  Size _len;\n  int _val;\n  void *_vstart;\n  __int64 *_start;\n  _vstart = &<span class=\"supfact\">hash_ctl</span>;\n  _val = Number;\n  _len = Number L;\n  if (((unsigned __int8)&<span class=\"supfact\">hash_ctl</span> & Number) != Number ||\n      (_len & Number) != Number) {\n    memset(_vstart, _val, _len);\n  } else {\n    _start = (__int64 *)_vstart;\n    _stop = (__int64 *)((char *)_vstart + _len);\n    while (_start < _stop) {\n      v0 = _start++;\n      *v0 = Number L;\n    }\n  }\n  <span class=\"supfact\">hash_ctl</span>.keysize = Number L;\n  <span class=\"supfact\">hash_ctl</span>.entrysize = Number L;\n  prepared_queries = (HTAB_0 *)hash_create(String, Number L,\n                                           &<span class=\"supfact\">hash_ctl</span>, Number L);\n}", "var": [{"name": "v2", "type": "struct HASHCTL_0 { __int64 num_partitions; __int64 ssize; __int64 dsize; __int64 max_dsize; __int64 ffactor; Size keysize; Size entrysize; HashValueFunc hash; HashCompareFunc match; HashCopyFunc keycopy; HashAllocFunc alloc; MemoryContext hcxt; HASHHDR_0 * hctl; }", "pred_name": "ctl", "ref_name": "hash_ctl", "ref_type": "struct HASHCTL_0 { __int64 num_partitions; __int64 ssize; __int64 dsize; __int64 max_dsize; __int64 ffactor; Size keysize; Size entrysize; HashValueFunc hash; HashCompareFunc match; HashCopyFunc keycopy; HashAllocFunc alloc; MemoryContext hcxt; HASHHDR_0 * hctl; }"}], "body_in_train": false}, {"repo_owner": "mligor", "repo_name": "jucpp", "path": "mligor/jucpp/cc29fc3e9694847e1e3419d302477cfee7793b4552555260ffbb248b3bd65f3a", "path_in_repo": "mligor/jucpp//build/session.obj", "objdump": "0000000000000224 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE>:\n     224:\t55                   \tpush   %rbp\n     225:\t48 89 e5             \tmov    %rsp,%rbp\n     228:\t41 56                \tpush   %r14\n     22a:\t41 55                \tpush   %r13\n     22c:\t41 54                \tpush   %r12\n     22e:\t53                   \tpush   %rbx\n     22f:\t48 81 ec 90 02 00 00 \tsub    $0x290,%rsp\n     236:\t48 89 bd 68 fd ff ff \tmov    %rdi,-0x298(%rbp)\n     23d:\t48 89 b5 60 fd ff ff \tmov    %rsi,-0x2a0(%rbp)\n     244:\t48 89 95 58 fd ff ff \tmov    %rdx,-0x2a8(%rbp)\n     24b:\t48 89 8d 50 fd ff ff \tmov    %rcx,-0x2b0(%rbp)\n     252:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     259:\t48 89 c7             \tmov    %rax,%rdi\n     25c:\te8 00 00 00 00       \tcallq  261 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x3d>\n     261:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n     268:\t48 89 c7             \tmov    %rax,%rdi\n     26b:\te8 00 00 00 00       \tcallq  270 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x4c>\n     270:\t48 8b 85 50 fd ff ff \tmov    -0x2b0(%rbp),%rax\n     277:\t48 89 c7             \tmov    %rax,%rdi\n     27a:\te8 00 00 00 00       \tcallq  27f <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x5b>\n     27f:\t48 85 c0             \ttest   %rax,%rax\n     282:\t0f 95 c0             \tsetne  %al\n     285:\t84 c0                \ttest   %al,%al\n     287:\t0f 84 0f 01 00 00    \tje     39c <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x178>\n     28d:\t48 8b 85 50 fd ff ff \tmov    -0x2b0(%rbp),%rax\n     294:\tba 00 00 00 00       \tmov    $0x0,%edx\n     299:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     29e:\t48 89 c7             \tmov    %rax,%rdi\n     2a1:\te8 00 00 00 00       \tcallq  2a6 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x82>\n     2a6:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     2aa:\t48 83 7d d8 ff       \tcmpq   $0xffffffffffffffff,-0x28(%rbp)\n     2af:\t0f 84 e7 00 00 00    \tje     39c <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x178>\n     2b5:\t48 8b b5 50 fd ff ff \tmov    -0x2b0(%rbp),%rsi\n     2bc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     2c0:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     2c4:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n     2cb:\t48 c7 c1 ff ff ff ff \tmov    $0xffffffffffffffff,%rcx\n     2d2:\t48 89 c7             \tmov    %rax,%rdi\n     2d5:\te8 00 00 00 00       \tcallq  2da <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0xb6>\n     2da:\t48 8d 95 50 fe ff ff \tlea    -0x1b0(%rbp),%rdx\n     2e1:\t48 8d 85 30 fe ff ff \tlea    -0x1d0(%rbp),%rax\n     2e8:\t48 89 d6             \tmov    %rdx,%rsi\n     2eb:\t48 89 c7             \tmov    %rax,%rdi\n     2ee:\te8 00 00 00 00       \tcallq  2f3 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0xcf>\n     2f3:\t48 8d 95 30 fe ff ff \tlea    -0x1d0(%rbp),%rdx\n     2fa:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     301:\t48 89 d6             \tmov    %rdx,%rsi\n     304:\t48 89 c7             \tmov    %rax,%rdi\n     307:\te8 00 00 00 00       \tcallq  30c <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0xe8>\n     30c:\t48 8d 85 30 fe ff ff \tlea    -0x1d0(%rbp),%rax\n     313:\t48 89 c7             \tmov    %rax,%rdi\n     316:\te8 00 00 00 00       \tcallq  31b <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0xf7>\n     31b:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n     322:\t48 89 c7             \tmov    %rax,%rdi\n     325:\te8 00 00 00 00       \tcallq  32a <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x106>\n     32a:\t48 8b b5 50 fd ff ff \tmov    -0x2b0(%rbp),%rsi\n     331:\t48 8d 85 90 fe ff ff \tlea    -0x170(%rbp),%rax\n     338:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     33c:\t48 89 d1             \tmov    %rdx,%rcx\n     33f:\tba 00 00 00 00       \tmov    $0x0,%edx\n     344:\t48 89 c7             \tmov    %rax,%rdi\n     347:\te8 00 00 00 00       \tcallq  34c <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x128>\n     34c:\t48 8d 95 90 fe ff ff \tlea    -0x170(%rbp),%rdx\n     353:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n     35a:\t48 89 d6             \tmov    %rdx,%rsi\n     35d:\t48 89 c7             \tmov    %rax,%rdi\n     360:\te8 00 00 00 00       \tcallq  365 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x141>\n     365:\t48 8d 95 70 fe ff ff \tlea    -0x190(%rbp),%rdx\n     36c:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n     373:\t48 89 d6             \tmov    %rdx,%rsi\n     376:\t48 89 c7             \tmov    %rax,%rdi\n     379:\te8 00 00 00 00       \tcallq  37e <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x15a>\n     37e:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n     385:\t48 89 c7             \tmov    %rax,%rdi\n     388:\te8 00 00 00 00       \tcallq  38d <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x169>\n     38d:\t48 8d 85 90 fe ff ff \tlea    -0x170(%rbp),%rax\n     394:\t48 89 c7             \tmov    %rax,%rdi\n     397:\te8 00 00 00 00       \tcallq  39c <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x178>\n     39c:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n     3a3:\t48 8b 95 58 fd ff ff \tmov    -0x2a8(%rbp),%rdx\n     3aa:\t48 89 d6             \tmov    %rdx,%rsi\n     3ad:\t48 89 c7             \tmov    %rax,%rdi\n     3b0:\te8 00 00 00 00       \tcallq  3b5 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x191>\n     3b5:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     3bc:\t48 89 c7             \tmov    %rax,%rdi\n     3bf:\te8 00 00 00 00       \tcallq  3c4 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x1a0>\n     3c4:\t48 85 c0             \ttest   %rax,%rax\n     3c7:\t74 1b                \tje     3e4 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x1c0>\n     3c9:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n     3d0:\t48 89 c7             \tmov    %rax,%rdi\n     3d3:\te8 00 00 00 00       \tcallq  3d8 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x1b4>\n     3d8:\t48 85 c0             \ttest   %rax,%rax\n     3db:\t74 07                \tje     3e4 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x1c0>\n     3dd:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     3e2:\teb 05                \tjmp    3e9 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x1c5>\n     3e4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     3e9:\t84 c0                \ttest   %al,%al\n     3eb:\t0f 84 0a 02 00 00    \tje     5fb <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x3d7>\n     3f1:\t48 8b 9d 60 fd ff ff \tmov    -0x2a0(%rbp),%rbx\n     3f8:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     3ff:\t48 89 c7             \tmov    %rax,%rdi\n     402:\te8 00 00 00 00       \tcallq  407 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x1e3>\n     407:\t48 89 c2             \tmov    %rax,%rdx\n     40a:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n     411:\t48 89 d1             \tmov    %rdx,%rcx\n     414:\tba 00 00 00 00       \tmov    $0x0,%edx\n     419:\t48 89 de             \tmov    %rbx,%rsi\n     41c:\t48 89 c7             \tmov    %rax,%rdi\n     41f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     424:\te8 00 00 00 00       \tcallq  429 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x205>\n     429:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n     430:\t48 89 c7             \tmov    %rax,%rdi\n     433:\te8 00 00 00 00       \tcallq  438 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x214>\n     438:\t85 c0                \ttest   %eax,%eax\n     43a:\t0f 95 c0             \tsetne  %al\n     43d:\t84 c0                \ttest   %al,%al\n     43f:\t0f 84 99 01 00 00    \tje     5de <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x3ba>\n     445:\t48 8d 95 f0 fd ff ff \tlea    -0x210(%rbp),%rdx\n     44c:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n     453:\t48 89 d6             \tmov    %rdx,%rsi\n     456:\t48 89 c7             \tmov    %rax,%rdi\n     459:\te8 00 00 00 00       \tcallq  45e <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x23a>\n     45e:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n     465:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     46a:\t48 89 c7             \tmov    %rax,%rdi\n     46d:\te8 00 00 00 00       \tcallq  472 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x24e>\n     472:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     477:\t48 89 c7             \tmov    %rax,%rdi\n     47a:\te8 00 00 00 00       \tcallq  47f <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x25b>\n     47f:\t48 89 c2             \tmov    %rax,%rdx\n     482:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n     489:\t48 89 c6             \tmov    %rax,%rsi\n     48c:\t48 89 d7             \tmov    %rdx,%rdi\n     48f:\te8 00 00 00 00       \tcallq  494 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x270>\n     494:\t89 c3                \tmov    %eax,%ebx\n     496:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n     49d:\t48 89 c7             \tmov    %rax,%rdi\n     4a0:\te8 00 00 00 00       \tcallq  4a5 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x281>\n     4a5:\t84 db                \ttest   %bl,%bl\n     4a7:\t0f 84 31 01 00 00    \tje     5de <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x3ba>\n     4ad:\t48 8b 9d 60 fd ff ff \tmov    -0x2a0(%rbp),%rbx\n     4b4:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n     4bb:\t48 89 c7             \tmov    %rax,%rdi\n     4be:\te8 00 00 00 00       \tcallq  4c3 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x29f>\n     4c3:\t49 89 c4             \tmov    %rax,%r12\n     4c6:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n     4cd:\t48 89 c7             \tmov    %rax,%rdi\n     4d0:\te8 00 00 00 00       \tcallq  4d5 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x2b1>\n     4d5:\t49 89 c6             \tmov    %rax,%r14\n     4d8:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     4df:\t48 89 c7             \tmov    %rax,%rdi\n     4e2:\te8 00 00 00 00       \tcallq  4e7 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x2c3>\n     4e7:\t49 89 c5             \tmov    %rax,%r13\n     4ea:\t48 8b 85 60 fd ff ff \tmov    -0x2a0(%rbp),%rax\n     4f1:\t48 89 c7             \tmov    %rax,%rdi\n     4f4:\te8 00 00 00 00       \tcallq  4f9 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x2d5>\n     4f9:\t48 89 c2             \tmov    %rax,%rdx\n     4fc:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n     503:\t48 83 ec 08          \tsub    $0x8,%rsp\n     507:\t41 54                \tpush   %r12\n     509:\t4d 89 f1             \tmov    %r14,%r9\n     50c:\t4d 89 e8             \tmov    %r13,%r8\n     50f:\t48 89 d1             \tmov    %rdx,%rcx\n     512:\tba 00 00 00 00       \tmov    $0x0,%edx\n     517:\t48 89 de             \tmov    %rbx,%rsi\n     51a:\t48 89 c7             \tmov    %rax,%rdi\n     51d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     522:\te8 00 00 00 00       \tcallq  527 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x303>\n     527:\t48 83 c4 10          \tadd    $0x10,%rsp\n     52b:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n     532:\t48 89 c7             \tmov    %rax,%rdi\n     535:\te8 00 00 00 00       \tcallq  53a <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x316>\n     53a:\t48 8d 85 10 ff ff ff \tlea    -0xf0(%rbp),%rax\n     541:\t48 8d 8d f0 fd ff ff \tlea    -0x210(%rbp),%rcx\n     548:\tba 00 00 00 00       \tmov    $0x0,%edx\n     54d:\t48 89 ce             \tmov    %rcx,%rsi\n     550:\t48 89 c7             \tmov    %rax,%rdi\n     553:\te8 00 00 00 00       \tcallq  558 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x334>\n     558:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n     55f:\t48 8d 95 10 fe ff ff \tlea    -0x1f0(%rbp),%rdx\n     566:\t48 8d 8d 10 ff ff ff \tlea    -0xf0(%rbp),%rcx\n     56d:\t48 89 ce             \tmov    %rcx,%rsi\n     570:\t48 89 c7             \tmov    %rax,%rdi\n     573:\te8 00 00 00 00       \tcallq  578 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x354>\n     578:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n     57f:\t48 8d 85 70 fd ff ff \tlea    -0x290(%rbp),%rax\n     586:\t48 89 d6             \tmov    %rdx,%rsi\n     589:\t48 89 c7             \tmov    %rax,%rdi\n     58c:\te8 00 00 00 00       \tcallq  591 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x36d>\n     591:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n     598:\t48 89 c7             \tmov    %rax,%rdi\n     59b:\te8 00 00 00 00       \tcallq  5a0 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x37c>\n     5a0:\t48 8d 85 10 ff ff ff \tlea    -0xf0(%rbp),%rax\n     5a7:\t48 89 c7             \tmov    %rax,%rdi\n     5aa:\te8 00 00 00 00       \tcallq  5af <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x38b>\n     5af:\t48 8d 95 70 fd ff ff \tlea    -0x290(%rbp),%rdx\n     5b6:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n     5bd:\t48 89 d6             \tmov    %rdx,%rsi\n     5c0:\t48 89 c7             \tmov    %rax,%rdi\n     5c3:\te8 00 00 00 00       \tcallq  5c8 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x3a4>\n     5c8:\t48 8d 85 70 fd ff ff \tlea    -0x290(%rbp),%rax\n     5cf:\t48 89 c7             \tmov    %rax,%rdi\n     5d2:\te8 00 00 00 00       \tcallq  5d7 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x3b3>\n     5d7:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n     5dc:\teb 05                \tjmp    5e3 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x3bf>\n     5de:\tbb 01 00 00 00       \tmov    $0x1,%ebx\n     5e3:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n     5ea:\t48 89 c7             \tmov    %rax,%rdi\n     5ed:\te8 00 00 00 00       \tcallq  5f2 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x3ce>\n     5f2:\t83 fb 01             \tcmp    $0x1,%ebx\n     5f5:\t0f 85 79 01 00 00    \tjne    774 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x550>\n     5fb:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n     602:\tbe 40 00 00 00       \tmov    $0x40,%esi\n     607:\t48 89 c7             \tmov    %rax,%rdi\n     60a:\te8 00 00 00 00       \tcallq  60f <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x3eb>\n     60f:\t48 8d 95 30 ff ff ff \tlea    -0xd0(%rbp),%rdx\n     616:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n     61d:\t48 89 d6             \tmov    %rdx,%rsi\n     620:\t48 89 c7             \tmov    %rax,%rdi\n     623:\te8 00 00 00 00       \tcallq  628 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x404>\n     628:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n     62f:\t48 89 c7             \tmov    %rax,%rdi\n     632:\te8 00 00 00 00       \tcallq  637 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x413>\n     637:\t48 8b 9d 60 fd ff ff \tmov    -0x2a0(%rbp),%rbx\n     63e:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n     645:\t48 89 c7             \tmov    %rax,%rdi\n     648:\te8 00 00 00 00       \tcallq  64d <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x429>\n     64d:\t49 89 c5             \tmov    %rax,%r13\n     650:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n     657:\t48 89 c7             \tmov    %rax,%rdi\n     65a:\te8 00 00 00 00       \tcallq  65f <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x43b>\n     65f:\t49 89 c4             \tmov    %rax,%r12\n     662:\t48 8b 85 60 fd ff ff \tmov    -0x2a0(%rbp),%rax\n     669:\t48 89 c7             \tmov    %rax,%rdi\n     66c:\te8 00 00 00 00       \tcallq  671 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x44d>\n     671:\t48 89 c2             \tmov    %rax,%rdx\n     674:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n     67b:\t4d 89 e9             \tmov    %r13,%r9\n     67e:\t4d 89 e0             \tmov    %r12,%r8\n     681:\t48 89 d1             \tmov    %rdx,%rcx\n     684:\tba 00 00 00 00       \tmov    $0x0,%edx\n     689:\t48 89 de             \tmov    %rbx,%rsi\n     68c:\t48 89 c7             \tmov    %rax,%rdi\n     68f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     694:\te8 00 00 00 00       \tcallq  699 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x475>\n     699:\t48 8d 85 50 ff ff ff \tlea    -0xb0(%rbp),%rax\n     6a0:\t48 89 c7             \tmov    %rax,%rdi\n     6a3:\te8 00 00 00 00       \tcallq  6a8 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x484>\n     6a8:\t48 8b 95 60 fd ff ff \tmov    -0x2a0(%rbp),%rdx\n     6af:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n     6b6:\t48 89 d6             \tmov    %rdx,%rsi\n     6b9:\t48 89 c7             \tmov    %rax,%rdi\n     6bc:\te8 00 00 00 00       \tcallq  6c1 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x49d>\n     6c1:\t48 8d 95 70 ff ff ff \tlea    -0x90(%rbp),%rdx\n     6c8:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     6cf:\t48 89 d6             \tmov    %rdx,%rsi\n     6d2:\t48 89 c7             \tmov    %rax,%rdi\n     6d5:\te8 00 00 00 00       \tcallq  6da <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x4b6>\n     6da:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n     6e1:\t48 89 c7             \tmov    %rax,%rdi\n     6e4:\te8 00 00 00 00       \tcallq  6e9 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x4c5>\n     6e9:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     6ed:\t48 8d 8d f0 fd ff ff \tlea    -0x210(%rbp),%rcx\n     6f4:\tba 00 00 00 00       \tmov    $0x0,%edx\n     6f9:\t48 89 ce             \tmov    %rcx,%rsi\n     6fc:\t48 89 c7             \tmov    %rax,%rdi\n     6ff:\te8 00 00 00 00       \tcallq  704 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x4e0>\n     704:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n     708:\t48 8d 95 10 fe ff ff \tlea    -0x1f0(%rbp),%rdx\n     70f:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n     713:\t48 89 ce             \tmov    %rcx,%rsi\n     716:\t48 89 c7             \tmov    %rax,%rdi\n     719:\te8 00 00 00 00       \tcallq  71e <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x4fa>\n     71e:\t48 8d 55 90          \tlea    -0x70(%rbp),%rdx\n     722:\t48 8d 85 b0 fd ff ff \tlea    -0x250(%rbp),%rax\n     729:\t48 89 d6             \tmov    %rdx,%rsi\n     72c:\t48 89 c7             \tmov    %rax,%rdi\n     72f:\te8 00 00 00 00       \tcallq  734 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x510>\n     734:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n     738:\t48 89 c7             \tmov    %rax,%rdi\n     73b:\te8 00 00 00 00       \tcallq  740 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x51c>\n     740:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     744:\t48 89 c7             \tmov    %rax,%rdi\n     747:\te8 00 00 00 00       \tcallq  74c <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x528>\n     74c:\t48 8d 95 b0 fd ff ff \tlea    -0x250(%rbp),%rdx\n     753:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n     75a:\t48 89 d6             \tmov    %rdx,%rsi\n     75d:\t48 89 c7             \tmov    %rax,%rdi\n     760:\te8 00 00 00 00       \tcallq  765 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x541>\n     765:\t48 8d 85 b0 fd ff ff \tlea    -0x250(%rbp),%rax\n     76c:\t48 89 c7             \tmov    %rax,%rdi\n     76f:\te8 00 00 00 00       \tcallq  774 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x550>\n     774:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n     77b:\t48 89 c7             \tmov    %rax,%rdi\n     77e:\te8 00 00 00 00       \tcallq  783 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x55f>\n     783:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n     78a:\t48 89 c7             \tmov    %rax,%rdi\n     78d:\te8 00 00 00 00       \tcallq  792 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x56e>\n     792:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     799:\t48 89 c7             \tmov    %rax,%rdi\n     79c:\te8 00 00 00 00       \tcallq  7a1 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x57d>\n     7a1:\te9 e0 00 00 00       \tjmpq   886 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x662>\n     7a6:\t48 89 c3             \tmov    %rax,%rbx\n     7a9:\t48 8d 85 50 fe ff ff \tlea    -0x1b0(%rbp),%rax\n     7b0:\t48 89 c7             \tmov    %rax,%rdi\n     7b3:\te8 00 00 00 00       \tcallq  7b8 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x594>\n     7b8:\te9 a0 00 00 00       \tjmpq   85d <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x639>\n     7bd:\t48 89 c3             \tmov    %rax,%rbx\n     7c0:\t48 8d 85 90 fe ff ff \tlea    -0x170(%rbp),%rax\n     7c7:\t48 89 c7             \tmov    %rax,%rdi\n     7ca:\te8 00 00 00 00       \tcallq  7cf <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x5ab>\n     7cf:\te9 89 00 00 00       \tjmpq   85d <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x639>\n     7d4:\t48 89 c3             \tmov    %rax,%rbx\n     7d7:\t48 8d 85 b0 fe ff ff \tlea    -0x150(%rbp),%rax\n     7de:\t48 89 c7             \tmov    %rax,%rdi\n     7e1:\te8 00 00 00 00       \tcallq  7e6 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x5c2>\n     7e6:\teb 2b                \tjmp    813 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x5ef>\n     7e8:\t48 89 c3             \tmov    %rax,%rbx\n     7eb:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n     7f2:\t48 89 c7             \tmov    %rax,%rdi\n     7f5:\te8 00 00 00 00       \tcallq  7fa <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x5d6>\n     7fa:\teb 03                \tjmp    7ff <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x5db>\n     7fc:\t48 89 c3             \tmov    %rax,%rbx\n     7ff:\t48 8d 85 10 ff ff ff \tlea    -0xf0(%rbp),%rax\n     806:\t48 89 c7             \tmov    %rax,%rdi\n     809:\te8 00 00 00 00       \tcallq  80e <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x5ea>\n     80e:\teb 03                \tjmp    813 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x5ef>\n     810:\t48 89 c3             \tmov    %rax,%rbx\n     813:\t48 8d 85 90 fd ff ff \tlea    -0x270(%rbp),%rax\n     81a:\t48 89 c7             \tmov    %rax,%rdi\n     81d:\te8 00 00 00 00       \tcallq  822 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x5fe>\n     822:\teb 25                \tjmp    849 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x625>\n     824:\t48 89 c3             \tmov    %rax,%rbx\n     827:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n     82b:\t48 89 c7             \tmov    %rax,%rdi\n     82e:\te8 00 00 00 00       \tcallq  833 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x60f>\n     833:\teb 03                \tjmp    838 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x614>\n     835:\t48 89 c3             \tmov    %rax,%rbx\n     838:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n     83c:\t48 89 c7             \tmov    %rax,%rdi\n     83f:\te8 00 00 00 00       \tcallq  844 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x620>\n     844:\teb 03                \tjmp    849 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x625>\n     846:\t48 89 c3             \tmov    %rax,%rbx\n     849:\t48 8d 85 d0 fd ff ff \tlea    -0x230(%rbp),%rax\n     850:\t48 89 c7             \tmov    %rax,%rdi\n     853:\te8 00 00 00 00       \tcallq  858 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x634>\n     858:\teb 03                \tjmp    85d <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x639>\n     85a:\t48 89 c3             \tmov    %rax,%rbx\n     85d:\t48 8d 85 f0 fd ff ff \tlea    -0x210(%rbp),%rax\n     864:\t48 89 c7             \tmov    %rax,%rdi\n     867:\te8 00 00 00 00       \tcallq  86c <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x648>\n     86c:\t48 8d 85 10 fe ff ff \tlea    -0x1f0(%rbp),%rax\n     873:\t48 89 c7             \tmov    %rax,%rdi\n     876:\te8 00 00 00 00       \tcallq  87b <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x657>\n     87b:\t48 89 d8             \tmov    %rbx,%rax\n     87e:\t48 89 c7             \tmov    %rax,%rdi\n     881:\te8 00 00 00 00       \tcallq  886 <_ZN5jucpp4http14SessionManager10setSessionEN4Json5ValueENS_6StringE+0x662>\n     886:\t48 8b 85 68 fd ff ff \tmov    -0x298(%rbp),%rax\n     88d:\t48 8d 65 e0          \tlea    -0x20(%rbp),%rsp\n     891:\t5b                   \tpop    %rbx\n     892:\t41 5c                \tpop    %r12\n     894:\t41 5d                \tpop    %r13\n     896:\t41 5e                \tpop    %r14\n     898:\t5d                   \tpop    %rbp\n     899:\tc3                   \tretq   ", "code_s": "__int64 __fastcall jucpp http SessionManager setSession(__int64 a1, char *a2,\n                                                        const Json Value *a3,\n                                                        __int64 a4) {\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  char v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  int v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  char <span class=\"supfact\">v20</span>[Number];\n  char <span class=\"supfact\">v21</span>[Number];\n  char <span class=\"supfact\">v22</span>[Number];\n  char <span class=\"supfact\">v23</span>[Number];\n  char <span class=\"supfact\">v24</span>[Number];\n  char <span class=\"supfact\">v25</span>[Number];\n  char <span class=\"supfact\">v26</span>[Number];\n  char <span class=\"supfact\">v27</span>[Number];\n  char <span class=\"supfact\">v28</span>[Number];\n  char <span class=\"supfact\">v29</span>[Number];\n  char <span class=\"supfact\">v30</span>[Number];\n  char <span class=\"supfact\">v31</span>[Number];\n  char <span class=\"supfact\">v32</span>[Number];\n  char <span class=\"supfact\">v33</span>[Number];\n  char <span class=\"supfact\">v34</span>[Number];\n  char <span class=\"supfact\">v35</span>[Number];\n  char <span class=\"supfact\">v36</span>[Number];\n  char <span class=\"supfact\">v37</span>[Number];\n  char <span class=\"supfact\">v38</span>[Number];\n  __int64 v39;\n  jucpp String String((jucpp String *)<span class=\"supfact\">v25</span>);\n  jucpp String String((jucpp String *)<span class=\"supfact\">v24</span>);\n  if (std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          length(a4)) {\n    v39 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        find(a4, String, Number L);\n    if (v39 != Number) {\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          substr(<span class=\"supfact\">v27</span>, a4, v39 + Number, Number);\n      jucpp String String(<span class=\"supfact\">v26</span>, <span class=\"supfact\">v27</span>);\n      jucpp String operator=(<span class=\"supfact\">v25</span>, <span class=\"supfact\">v26</span>);\n      jucpp String ~String(<span class=\"supfact\">v26</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(<span class=\"supfact\">v27</span>);\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      substr(<span class=\"supfact\">v29</span>, a4, Number L, v39);\n      jucpp String String(<span class=\"supfact\">v28</span>, <span class=\"supfact\">v29</span>);\n      jucpp String operator=(<span class=\"supfact\">v24</span>, <span class=\"supfact\">v28</span>);\n      jucpp String ~String(<span class=\"supfact\">v28</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(<span class=\"supfact\">v29</span>);\n    }\n  }\n  jucpp http Server jsonEncode((jucpp http Server *)<span class=\"supfact\">v23</span>, a3);\n  if (!std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>\n              length(<span class=\"supfact\">v25</span>) ||\n      !std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>\n              length(<span class=\"supfact\">v24</span>)) {\n    goto LABEL_14;\n  }\n  v5 =\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          c_str(<span class=\"supfact\">v25</span>);\n  jucpp sql SQLDB query((jucpp sql SQLDB *)<span class=\"supfact\">v21</span>, a2, String, v5);\n  if ((unsigned int)Json Value size((Json Value *)<span class=\"supfact\">v21</span>) &&\n      (Json Value Value(<span class=\"supfact\">v30</span>, <span class=\"supfact\">v24</span>),\n       v6 = jucpp Array operator[](<span class=\"supfact\">v21</span>, Number L),\n       v7 = Json Value operator[](v6, String),\n       v8 = Json Value operator==(v7, <span class=\"supfact\">v30</span>),\n       Json Value ~Value((Json Value *)<span class=\"supfact\">v30</span>), v8)) {\n    v9 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            c_str(<span class=\"supfact\">v23</span>);\n    v10 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            c_str(<span class=\"supfact\">v24</span>);\n    v11 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            c_str(<span class=\"supfact\">v25</span>);\n    v12 = jucpp sql SQLDB NOW((jucpp sql SQLDB *)a2);\n    jucpp sql SQLDB query((jucpp sql SQLDB *)<span class=\"supfact\">v31</span>, a2, String,\n                          v12, v11, v10, v9);\n    jucpp Array ~Array((jucpp Array *)<span class=\"supfact\">v31</span>);\n    std operator+<char>(<span class=\"supfact\">v33</span>, <span class=\"supfact\">v24</span>, String);\n    std operator+\n        <char>(<span class=\"supfact\">v32</span>, <span class=\"supfact\">v33</span>, <span class=\"supfact\">v25</span>);\n    jucpp String String(<span class=\"supfact\">v20</span>, <span class=\"supfact\">v32</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v32</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v33</span>);\n    jucpp String String(a1, <span class=\"supfact\">v20</span>);\n    jucpp String ~String(<span class=\"supfact\">v20</span>);\n    v13 = Number;\n  } else {\n    v13 = Number;\n  }\n  jucpp Array ~Array((jucpp Array *)<span class=\"supfact\">v21</span>);\n  if (v13 == Number) {\n  LABEL_14:\n    jucpp http SessionManager random_string(\n        (jucpp http SessionManager *)<span class=\"supfact\">v34</span>, Number L);\n    jucpp String operator=(<span class=\"supfact\">v24</span>, <span class=\"supfact\">v34</span>);\n    jucpp String ~String(<span class=\"supfact\">v34</span>);\n    v14 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            c_str(<span class=\"supfact\">v23</span>);\n    v15 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            c_str(<span class=\"supfact\">v24</span>);\n    v16 = jucpp sql SQLDB NOW((jucpp sql SQLDB *)a2);\n    jucpp sql SQLDB query((jucpp sql SQLDB *)<span class=\"supfact\">v35</span>, a2, String,\n                          v16, v15, v14);\n    jucpp Array ~Array((jucpp Array *)<span class=\"supfact\">v35</span>);\n    jucpp sql SQLDB lastInsertRowId((jucpp sql SQLDB *)<span class=\"supfact\">v36</span>);\n    jucpp String operator=(<span class=\"supfact\">v25</span>, <span class=\"supfact\">v36</span>);\n    jucpp String ~String(<span class=\"supfact\">v36</span>);\n    std operator+<char>(<span class=\"supfact\">v38</span>, <span class=\"supfact\">v24</span>, String);\n    std operator+\n        <char>(<span class=\"supfact\">v37</span>, <span class=\"supfact\">v38</span>, <span class=\"supfact\">v25</span>);\n    jucpp String String(<span class=\"supfact\">v22</span>, <span class=\"supfact\">v37</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v37</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(<span class=\"supfact\">v38</span>);\n    jucpp String String(a1, <span class=\"supfact\">v22</span>);\n    jucpp String ~String(<span class=\"supfact\">v22</span>);\n  }\n  jucpp String ~String(<span class=\"supfact\">v23</span>);\n  jucpp String ~String(<span class=\"supfact\">v24</span>);\n  jucpp String ~String(<span class=\"supfact\">v25</span>);\n  return a1;\n}", "code_t": "jucpp String *__cdecl jucpp http SessionManager\nsetSession(jucpp String *retstr, jucpp http SessionManager *const this,\n           jucpp Variant *p_o, jucpp String *p_s) {\n  __int64 v5;\n  Json Value *v6;\n  __int64 v7;\n  char v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  __int64 v12;\n  int v13;\n  __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  jucpp String <span class=\"supfact\">sessionId_0</span>;\n  jucpp sql SQLDB Result <span class=\"supfact\">r</span>;\n  jucpp String <span class=\"supfact\">sessionId</span>;\n  jucpp String <span class=\"supfact\">value</span>;\n  jucpp String <span class=\"supfact\">check</span>;\n  jucpp String <span class=\"supfact\">id</span>;\n  jucpp String <span class=\"supfact\">v26</span>;\n  std string <span class=\"supfact\">str</span>;\n  jucpp String <span class=\"supfact\">v28</span>;\n  std string <span class=\"supfact\">v29</span>;\n  Json Value <span class=\"supfact\">v30</span>;\n  jucpp Array <span class=\"supfact\">v31</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">v32</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">__lhs</span>;\n  jucpp String <span class=\"supfact\">v34</span>;\n  jucpp Array <span class=\"supfact\">v35</span>;\n  jucpp String <span class=\"supfact\">v36</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">v37</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">v38</span>;\n  size_t pos;\n  jucpp String String(&<span class=\"supfact\">id</span>);\n  jucpp String String(&<span class=\"supfact\">check</span>);\n  if (std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          length(p_s)) {\n    pos = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n        find(p_s, String, Number L);\n    if (pos != Number) {\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          substr(&<span class=\"supfact\">str</span>, p_s, pos + Number, Number);\n      jucpp String String(&<span class=\"supfact\">v26</span>, &<span class=\"supfact\">str</span>);\n      jucpp String operator=(&<span class=\"supfact\">id</span>, &<span class=\"supfact\">v26</span>);\n      jucpp String ~String(&<span class=\"supfact\">v26</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(&<span class=\"supfact\">str</span>);\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      substr(&<span class=\"supfact\">v29</span>, p_s, Number L, pos);\n      jucpp String String(&<span class=\"supfact\">v28</span>, &<span class=\"supfact\">v29</span>);\n      jucpp String operator=(&<span class=\"supfact\">check</span>, &<span class=\"supfact\">v28</span>);\n      jucpp String ~String(&<span class=\"supfact\">v28</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(&<span class=\"supfact\">v29</span>);\n    }\n  }\n  jucpp http Server jsonEncode((jucpp http Server *)&<span class=\"supfact\">value</span>,\n                               p_o);\n  if (!std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>\n              length(&<span class=\"supfact\">id</span>) ||\n      !std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>\n              length(&<span class=\"supfact\">check</span>)) {\n    goto LABEL_14;\n  }\n  v5 =\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          c_str(&<span class=\"supfact\">id</span>);\n  jucpp sql SQLDB query((jucpp sql SQLDB *)&<span class=\"supfact\">r</span>,\n                        (const char *)this, String, v5);\n  if ((unsigned int)Json Value size(&<span class=\"supfact\">r</span>) &&\n      (Json Value Value(&<span class=\"supfact\">v30</span>, &<span class=\"supfact\">check</span>),\n       v6 = jucpp Array operator[](&<span class=\"supfact\">r</span>, Number),\n       v7 = Json Value operator[](v6, String),\n       v8 = Json Value operator==(v7, &<span class=\"supfact\">v30</span>),\n       Json Value ~Value(&<span class=\"supfact\">v30</span>), v8)) {\n    v9 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            c_str(&<span class=\"supfact\">value</span>);\n    v10 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            c_str(&<span class=\"supfact\">check</span>);\n    v11 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            c_str(&<span class=\"supfact\">id</span>);\n    v12 = jucpp sql SQLDB NOW(&this->m_db);\n    jucpp sql SQLDB query((jucpp sql SQLDB *)&<span class=\"supfact\">v31</span>,\n                          (const char *)this, String, v12, v11, v10, v9);\n    jucpp Array ~Array(&<span class=\"supfact\">v31</span>);\n    std operator+<char>(&<span class=\"supfact\">__lhs</span>, &<span class=\"supfact\">check</span>, String);\n    std operator+<char>(&<span class=\"supfact\">v32</span>, &<span class=\"supfact\">__lhs</span>,\n                        &<span class=\"supfact\">id</span>);\n    jucpp String String(&<span class=\"supfact\">sessionId_0</span>, &<span class=\"supfact\">v32</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">v32</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">__lhs</span>);\n    jucpp String String(retstr, &<span class=\"supfact\">sessionId_0</span>);\n    jucpp String ~String(&<span class=\"supfact\">sessionId_0</span>);\n    v13 = Number;\n  } else {\n    v13 = Number;\n  }\n  jucpp Array ~Array(&<span class=\"supfact\">r</span>);\n  if (v13 == Number) {\n  LABEL_14:\n    jucpp http SessionManager random_string(&<span class=\"supfact\">v34</span>, Number);\n    jucpp String operator=(&<span class=\"supfact\">check</span>, &<span class=\"supfact\">v34</span>);\n    jucpp String ~String(&<span class=\"supfact\">v34</span>);\n    v14 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            c_str(&<span class=\"supfact\">value</span>);\n    v15 = std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>>\n            c_str(&<span class=\"supfact\">check</span>);\n    v16 = jucpp sql SQLDB NOW(&this->m_db);\n    jucpp sql SQLDB query((jucpp sql SQLDB *)&<span class=\"supfact\">v35</span>,\n                          (const char *)this, String, v16, v15, v14);\n    jucpp Array ~Array(&<span class=\"supfact\">v35</span>);\n    jucpp sql SQLDB lastInsertRowId((jucpp sql SQLDB *)&<span class=\"supfact\">v36</span>);\n    jucpp String operator=(&<span class=\"supfact\">id</span>, &<span class=\"supfact\">v36</span>);\n    jucpp String ~String(&<span class=\"supfact\">v36</span>);\n    std operator+<char>(&<span class=\"supfact\">v38</span>, &<span class=\"supfact\">check</span>, String);\n    std operator+\n        <char>(&<span class=\"supfact\">v37</span>, &<span class=\"supfact\">v38</span>, &<span class=\"supfact\">id</span>);\n    jucpp String String(&<span class=\"supfact\">sessionId</span>, &<span class=\"supfact\">v37</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">v37</span>);\n    std __cxx11\n        basic_string<char, std char_traits<char>,\n                     std allocator<char>> ~basic_string(&<span class=\"supfact\">v38</span>);\n    jucpp String String(retstr, &<span class=\"supfact\">sessionId</span>);\n    jucpp String ~String(&<span class=\"supfact\">sessionId</span>);\n  }\n  jucpp String ~String(&<span class=\"supfact\">value</span>);\n  jucpp String ~String(&<span class=\"supfact\">check</span>);\n  jucpp String ~String(&<span class=\"supfact\">id</span>);\n  return retstr;\n}", "var": [{"name": "v20", "type": "char[32]", "pred_name": "v20", "ref_name": "sessionId_0", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v21", "type": "char[32]", "pred_name": "v21", "ref_name": "r", "ref_type": "struct jucpp::sql::SQLDB::Result { Json::Value baseclass_0; }"}, {"name": "v22", "type": "char[32]", "pred_name": "v22", "ref_name": "sessionId", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v23", "type": "char[32]", "pred_name": "v23", "ref_name": "value", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v24", "type": "char[32]", "pred_name": "v24", "ref_name": "check", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v25", "type": "char[32]", "pred_name": "v25", "ref_name": "id", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v26", "type": "char[32]", "pred_name": "v26", "ref_name": "v26", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v27", "type": "char[32]", "pred_name": "v27", "ref_name": "str", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v28", "type": "char[32]", "pred_name": "v28", "ref_name": "v28", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v29", "type": "char[32]", "pred_name": "v29", "ref_name": "v29", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v30", "type": "char[32]", "pred_name": "v30", "ref_name": "v30", "ref_type": "struct Json::Value { Json::Value::ValueHolder value_; __int32 : 8 type_; __int32 : 1 allocated_; PADDING (6); Json::Value::CommentInfo * comments_; }"}, {"name": "v31", "type": "char[32]", "pred_name": "v31", "ref_name": "v31", "ref_type": "struct jucpp::Array { Json::Value baseclass_0; }"}, {"name": "v32", "type": "char[32]", "pred_name": "v32", "ref_name": "v32", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v33", "type": "char[32]", "pred_name": "v33", "ref_name": "__lhs", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v34", "type": "char[32]", "pred_name": "v34", "ref_name": "v34", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v35", "type": "char[32]", "pred_name": "v35", "ref_name": "v35", "ref_type": "struct jucpp::Array { Json::Value baseclass_0; }"}, {"name": "v36", "type": "char[32]", "pred_name": "v36", "ref_name": "v36", "ref_type": "struct jucpp::String { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > baseclass_0; }"}, {"name": "v37", "type": "char[32]", "pred_name": "v37", "ref_name": "v37", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v38", "type": "char[40]", "pred_name": "v38", "ref_name": "v38", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "AlexanderVangelov", "repo_name": "pjsip", "path": "AlexanderVangelov/pjsip/b91df0dd35cf5646c5a75dc0470b01a9002de38c1a4bbbd76c40360aac3725bd", "path_in_repo": "AlexanderVangelov/pjsip//pjlib/bin/pjlib-test-x86_64-unknown-linux-gnu", "objdump": "0000000000436f1d <pj_ssl_sock_start_connect>:\n  436f1d:\t55                   \tpush   %rbp\n  436f1e:\t48 89 e5             \tmov    %rsp,%rbp\n  436f21:\t48 81 ec 90 00 00 00 \tsub    $0x90,%rsp\n  436f28:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n  436f2c:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n  436f30:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n  436f34:\t48 89 4d 80          \tmov    %rcx,-0x80(%rbp)\n  436f38:\t44 89 85 7c ff ff ff \tmov    %r8d,-0x84(%rbp)\n  436f3f:\t48 83 7d 98 00       \tcmpq   $0x0,-0x68(%rbp)\n  436f44:\t74 1e                \tje     436f64 <pj_ssl_sock_start_connect+0x47>\n  436f46:\t48 83 7d 90 00       \tcmpq   $0x0,-0x70(%rbp)\n  436f4b:\t74 17                \tje     436f64 <pj_ssl_sock_start_connect+0x47>\n  436f4d:\t48 83 7d 88 00       \tcmpq   $0x0,-0x78(%rbp)\n  436f52:\t74 10                \tje     436f64 <pj_ssl_sock_start_connect+0x47>\n  436f54:\t48 83 7d 80 00       \tcmpq   $0x0,-0x80(%rbp)\n  436f59:\t74 09                \tje     436f64 <pj_ssl_sock_start_connect+0x47>\n  436f5b:\t83 bd 7c ff ff ff 00 \tcmpl   $0x0,-0x84(%rbp)\n  436f62:\t75 48                \tjne    436fac <pj_ssl_sock_start_connect+0x8f>\n  436f64:\t48 83 7d 98 00       \tcmpq   $0x0,-0x68(%rbp)\n  436f69:\t74 1e                \tje     436f89 <pj_ssl_sock_start_connect+0x6c>\n  436f6b:\t48 83 7d 90 00       \tcmpq   $0x0,-0x70(%rbp)\n  436f70:\t74 17                \tje     436f89 <pj_ssl_sock_start_connect+0x6c>\n  436f72:\t48 83 7d 88 00       \tcmpq   $0x0,-0x78(%rbp)\n  436f77:\t74 10                \tje     436f89 <pj_ssl_sock_start_connect+0x6c>\n  436f79:\t48 83 7d 80 00       \tcmpq   $0x0,-0x80(%rbp)\n  436f7e:\t74 09                \tje     436f89 <pj_ssl_sock_start_connect+0x6c>\n  436f80:\t83 bd 7c ff ff ff 00 \tcmpl   $0x0,-0x84(%rbp)\n  436f87:\t75 19                \tjne    436fa2 <pj_ssl_sock_start_connect+0x85>\n  436f89:\tb9 f0 3c 44 00       \tmov    $0x443cf0,%ecx\n  436f8e:\tba ed 0c 00 00       \tmov    $0xced,%edx\n  436f93:\tbe 42 32 44 00       \tmov    $0x443242,%esi\n  436f98:\tbf 60 3a 44 00       \tmov    $0x443a60,%edi\n  436f9d:\te8 ae e1 fc ff       \tcallq  405150 <__assert_fail@plt>\n  436fa2:\tb8 74 11 01 00       \tmov    $0x11174,%eax\n  436fa7:\te9 39 03 00 00       \tjmpq   4372e5 <pj_ssl_sock_start_connect+0x3c8>\n  436fac:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  436fb0:\t48 8d 90 88 05 00 00 \tlea    0x588(%rax),%rdx\n  436fb7:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  436fbb:\t8b 70 1c             \tmov    0x1c(%rax),%esi\n  436fbe:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  436fc2:\t8b 40 18             \tmov    0x18(%rax),%eax\n  436fc5:\t48 89 d1             \tmov    %rdx,%rcx\n  436fc8:\tba 00 00 00 00       \tmov    $0x0,%edx\n  436fcd:\t89 c7                \tmov    %eax,%edi\n  436fcf:\te8 05 f1 fe ff       \tcallq  4260d9 <pj_sock_socket>\n  436fd4:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  436fd7:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  436fdb:\t0f 85 e5 02 00 00    \tjne    4372c6 <pj_ssl_sock_start_connect+0x3a9>\n  436fe1:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  436fe5:\t48 8b 00             \tmov    (%rax),%rax\n  436fe8:\t48 8d 48 10          \tlea    0x10(%rax),%rcx\n  436fec:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  436ff0:\t48 8d 90 f8 00 00 00 \tlea    0xf8(%rax),%rdx\n  436ff7:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  436ffb:\t8b b0 f4 00 00 00    \tmov    0xf4(%rax),%esi\n  437001:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437005:\t48 8b 80 88 05 00 00 \tmov    0x588(%rax),%rax\n  43700c:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  437012:\t49 89 c8             \tmov    %rcx,%r8\n  437015:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n  43701a:\t48 89 c7             \tmov    %rax,%rdi\n  43701d:\te8 a7 45 00 00       \tcallq  43b5c9 <pj_sock_apply_qos2>\n  437022:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  437025:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  437029:\t74 12                \tje     43703d <pj_ssl_sock_start_connect+0x120>\n  43702b:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43702f:\t8b 80 00 01 00 00    \tmov    0x100(%rax),%eax\n  437035:\t85 c0                \ttest   %eax,%eax\n  437037:\t0f 84 8c 02 00 00    \tje     4372c9 <pj_ssl_sock_start_connect+0x3ac>\n  43703d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437041:\t8b 80 08 01 00 00    \tmov    0x108(%rax),%eax\n  437047:\t85 c0                \ttest   %eax,%eax\n  437049:\t74 3c                \tje     437087 <pj_ssl_sock_start_connect+0x16a>\n  43704b:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43704f:\t48 8d 90 08 01 00 00 \tlea    0x108(%rax),%rdx\n  437056:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43705a:\t48 8b 80 88 05 00 00 \tmov    0x588(%rax),%rax\n  437061:\t48 89 d6             \tmov    %rdx,%rsi\n  437064:\t48 89 c7             \tmov    %rax,%rdi\n  437067:\te8 47 f7 fe ff       \tcallq  4267b3 <pj_sock_setsockopt_params>\n  43706c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  43706f:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  437073:\t74 12                \tje     437087 <pj_ssl_sock_start_connect+0x16a>\n  437075:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437079:\t8b 80 70 01 00 00    \tmov    0x170(%rax),%eax\n  43707f:\t85 c0                \ttest   %eax,%eax\n  437081:\t0f 84 45 02 00 00    \tje     4372cc <pj_ssl_sock_start_connect+0x3af>\n  437087:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43708b:\t48 8b 80 88 05 00 00 \tmov    0x588(%rax),%rax\n  437092:\t8b 95 7c ff ff ff    \tmov    -0x84(%rbp),%edx\n  437098:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n  43709c:\t48 89 ce             \tmov    %rcx,%rsi\n  43709f:\t48 89 c7             \tmov    %rax,%rdi\n  4370a2:\te8 3b f1 fe ff       \tcallq  4261e2 <pj_sock_bind>\n  4370a7:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4370aa:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4370ae:\t0f 85 1b 02 00 00    \tjne    4372cf <pj_ssl_sock_start_connect+0x3b2>\n  4370b4:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  4370b8:\t48 89 c7             \tmov    %rax,%rdi\n  4370bb:\te8 ad fc fe ff       \tcallq  426d6d <pj_activesock_cfg_default>\n  4370c0:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4370c4:\t8b 40 64             \tmov    0x64(%rax),%eax\n  4370c7:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n  4370ca:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4370ce:\t8b 40 68             \tmov    0x68(%rax),%eax\n  4370d1:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n  4370d4:\tc7 45 b0 01 00 00 00 \tmovl   $0x1,-0x50(%rbp)\n  4370db:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4370df:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n  4370e3:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n  4370e7:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  4370eb:\tbe 30 00 00 00       \tmov    $0x30,%esi\n  4370f0:\t48 89 c7             \tmov    %rax,%rdi\n  4370f3:\te8 1b a3 ff ff       \tcallq  431413 <pj_bzero>\n  4370f8:\t48 c7 45 e8 8a 54 43 \tmovq   $0x43548a,-0x18(%rbp)\n  4370ff:\t00 \n  437100:\t48 c7 45 c0 9c 49 43 \tmovq   $0x43499c,-0x40(%rbp)\n  437107:\t00 \n  437108:\t48 c7 45 d0 cd 4d 43 \tmovq   $0x434dcd,-0x30(%rbp)\n  43710f:\t00 \n  437110:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437114:\t48 8d b8 90 05 00 00 \tlea    0x590(%rax),%rdi\n  43711b:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43711f:\t4c 8b 40 20          \tmov    0x20(%rax),%r8\n  437123:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437127:\t8b 50 1c             \tmov    0x1c(%rax),%edx\n  43712a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43712e:\t48 8b b0 88 05 00 00 \tmov    0x588(%rax),%rsi\n  437135:\t4c 8d 4d c0          \tlea    -0x40(%rbp),%r9\n  437139:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n  43713d:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  437141:\t57                   \tpush   %rdi\n  437142:\tff 75 98             \tpushq  -0x68(%rbp)\n  437145:\t48 89 c7             \tmov    %rax,%rdi\n  437148:\te8 61 fc fe ff       \tcallq  426dae <pj_activesock_create>\n  43714d:\t48 83 c4 10          \tadd    $0x10,%rsp\n  437151:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  437154:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  437158:\t0f 85 74 01 00 00    \tjne    4372d2 <pj_ssl_sock_start_connect+0x3b5>\n  43715e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437162:\t48 8d 90 b4 05 00 00 \tlea    0x5b4(%rax),%rdx\n  437169:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n  43716d:\t48 89 c6             \tmov    %rax,%rsi\n  437170:\t48 89 d7             \tmov    %rdx,%rdi\n  437173:\te8 2b 85 ff ff       \tcallq  42f6a3 <pj_sockaddr_cp>\n  437178:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43717c:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  437180:\t48 85 c0             \ttest   %rax,%rax\n  437183:\t0f 84 9c 00 00 00    \tje     437225 <pj_ssl_sock_start_connect+0x308>\n  437189:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43718d:\t48 8b 80 c8 00 00 00 \tmov    0xc8(%rax),%rax\n  437194:\t48 85 c0             \ttest   %rax,%rax\n  437197:\t75 10                \tjne    4371a9 <pj_ssl_sock_start_connect+0x28c>\n  437199:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43719d:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n  4371a4:\t48 85 c0             \ttest   %rax,%rax\n  4371a7:\t74 7c                \tje     437225 <pj_ssl_sock_start_connect+0x308>\n  4371a9:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4371ad:\t8b 80 48 05 00 00    \tmov    0x548(%rax),%eax\n  4371b3:\t85 c0                \ttest   %eax,%eax\n  4371b5:\t74 19                \tje     4371d0 <pj_ssl_sock_start_connect+0x2b3>\n  4371b7:\tb9 f0 3c 44 00       \tmov    $0x443cf0,%ecx\n  4371bc:\tba 2a 0d 00 00       \tmov    $0xd2a,%edx\n  4371c1:\tbe 42 32 44 00       \tmov    $0x443242,%esi\n  4371c6:\tbf fd 37 44 00       \tmov    $0x4437fd,%edi\n  4371cb:\te8 80 df fc ff       \tcallq  405150 <__assert_fail@plt>\n  4371d0:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4371d4:\tc7 80 48 05 00 00 01 \tmovl   $0x1,0x548(%rax)\n  4371db:\t00 00 00 \n  4371de:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4371e2:\t48 8d 90 c8 00 00 00 \tlea    0xc8(%rax),%rdx\n  4371e9:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4371ed:\t48 8d 88 40 05 00 00 \tlea    0x540(%rax),%rcx\n  4371f4:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4371f8:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  4371fc:\t48 89 ce             \tmov    %rcx,%rsi\n  4371ff:\t48 89 c7             \tmov    %rax,%rdi\n  437202:\te8 4a 34 00 00       \tcallq  43a651 <pj_timer_heap_schedule>\n  437207:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  43720a:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  43720e:\t74 15                \tje     437225 <pj_ssl_sock_start_connect+0x308>\n  437210:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437214:\tc7 80 48 05 00 00 00 \tmovl   $0x0,0x548(%rax)\n  43721b:\t00 00 00 \n  43721e:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  437225:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437229:\t48 8b 80 90 05 00 00 \tmov    0x590(%rax),%rax\n  437230:\t8b 8d 7c ff ff ff    \tmov    -0x84(%rbp),%ecx\n  437236:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n  43723a:\t48 8b 75 90          \tmov    -0x70(%rbp),%rsi\n  43723e:\t48 89 c7             \tmov    %rax,%rdi\n  437241:\te8 8b 13 ff ff       \tcallq  4285d1 <pj_activesock_start_connect>\n  437246:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  437249:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  43724d:\t75 1a                \tjne    437269 <pj_ssl_sock_start_connect+0x34c>\n  43724f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437253:\t48 8b 80 90 05 00 00 \tmov    0x590(%rax),%rax\n  43725a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  43725f:\t48 89 c7             \tmov    %rax,%rdi\n  437262:\te8 23 e2 ff ff       \tcallq  43548a <asock_on_connect_complete>\n  437267:\teb 09                \tjmp    437272 <pj_ssl_sock_start_connect+0x355>\n  437269:\t81 7d fc 72 11 01 00 \tcmpl   $0x11172,-0x4(%rbp)\n  437270:\t75 63                \tjne    4372d5 <pj_ssl_sock_start_connect+0x3b8>\n  437272:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437276:\t8b 95 7c ff ff ff    \tmov    -0x84(%rbp),%edx\n  43727c:\t89 90 d0 05 00 00    \tmov    %edx,0x5d0(%rax)\n  437282:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437286:\t48 8d 90 d0 05 00 00 \tlea    0x5d0(%rax),%rdx\n  43728d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  437291:\t48 8d 88 98 05 00 00 \tlea    0x598(%rax),%rcx\n  437298:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  43729c:\t48 8b 80 88 05 00 00 \tmov    0x588(%rax),%rax\n  4372a3:\t48 89 ce             \tmov    %rcx,%rsi\n  4372a6:\t48 89 c7             \tmov    %rax,%rdi\n  4372a9:\te8 ca f0 fe ff       \tcallq  426378 <pj_sock_getsockname>\n  4372ae:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4372b1:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4372b5:\tc7 80 28 04 00 00 00 \tmovl   $0x0,0x428(%rax)\n  4372bc:\t00 00 00 \n  4372bf:\tb8 72 11 01 00       \tmov    $0x11172,%eax\n  4372c4:\teb 1f                \tjmp    4372e5 <pj_ssl_sock_start_connect+0x3c8>\n  4372c6:\t90                   \tnop\n  4372c7:\teb 0d                \tjmp    4372d6 <pj_ssl_sock_start_connect+0x3b9>\n  4372c9:\t90                   \tnop\n  4372ca:\teb 0a                \tjmp    4372d6 <pj_ssl_sock_start_connect+0x3b9>\n  4372cc:\t90                   \tnop\n  4372cd:\teb 07                \tjmp    4372d6 <pj_ssl_sock_start_connect+0x3b9>\n  4372cf:\t90                   \tnop\n  4372d0:\teb 04                \tjmp    4372d6 <pj_ssl_sock_start_connect+0x3b9>\n  4372d2:\t90                   \tnop\n  4372d3:\teb 01                \tjmp    4372d6 <pj_ssl_sock_start_connect+0x3b9>\n  4372d5:\t90                   \tnop\n  4372d6:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  4372da:\t48 89 c7             \tmov    %rax,%rdi\n  4372dd:\te8 6f ba ff ff       \tcallq  432d51 <reset_ssl_sock_state>\n  4372e2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4372e5:\tc9                   \tleaveq \n  4372e6:\tc3                   \tretq   ", "code_s": "__int64 __fastcall pj_ssl_sock_start_connect(__int64 a1, __int64 a2,\n                                             const struct sockaddr *a3,\n                                             _WORD *a4, unsigned int a5) {\n  __int64 <span class=\"supfact\">v9</span>;\n  int v10;\n  int v11;\n  int v12;\n  __int64 <span class=\"supfact\">v13</span>[Number];\n  unsigned int v14;\n  if (a1 && a2 && a3 && a4 && a5) {\n    v14 = pj_sock_socket(*(_DWORD *)(a1 + Number), *(_DWORD *)(a1 + Number),\n                         Number, (_QWORD *)(a1 + Number));\n    if (!v14) {\n      v14 = pj_sock_apply_qos2(*(_QWORD *)(a1 + Number),\n                               *(unsigned int *)(a1 + Number), a1 + Number,\n                               Number L, *(_QWORD *)a1 + Number L, Number L);\n      if ((!v14 || *(_DWORD *)(a1 + Number)) &&\n          (!*(_DWORD *)(a1 + Number) ||\n           (v14 = pj_sock_setsockopt_params(*(_QWORD *)(a1 + Number),\n                                            (unsigned int *)(a1 + Number))) ==\n               Number ||\n           *(_DWORD *)(a1 + Number))) {\n        v14 = pj_sock_bind(*(_QWORD *)(a1 + Number), a3, a5);\n        if (!v14) {\n          pj_activesock_cfg_default(&<span class=\"supfact\">v9</span>);\n          v10 = *(_DWORD *)(a1 + Number);\n          v11 = *(_DWORD *)(a1 + Number);\n          v12 = Number;\n          <span class=\"supfact\">v9</span> = *(_QWORD *)(a1 + Number);\n          pj_bzero_18(<span class=\"supfact\">v13</span>, Number);\n          <span class=\"supfact\">v13</span>[Number] = (__int64)asock_on_connect_complete_0;\n          <span class=\"supfact\">v13</span>[Number] = (__int64)asock_on_data_read_0;\n          <span class=\"supfact\">v13</span>[Number] = (__int64)asock_on_data_sent;\n          v14 = pj_activesock_create(\n              a2, *(_QWORD *)(a1 + Number), *(_DWORD *)(a1 + Number),\n              (__int64)&<span class=\"supfact\">v9</span>, *(_QWORD **)(a1 + Number),\n              <span class=\"supfact\">v13</span>, a1, (_QWORD *)(a1 + Number));\n          if (!v14) {\n            pj_sockaddr_cp((void *)(a1 + Number), a4);\n            if (*(_QWORD *)(a1 + Number) &&\n                (*(_QWORD *)(a1 + Number) || *(_QWORD *)(a1 + Number))) {\n              if (*(_DWORD *)(a1 + Number))\n                __assert_fail(String, String, Number, String);\n              *(_DWORD *)(a1 + Number) = Number;\n              v14 = pj_timer_heap_schedule(*(_QWORD *)(a1 + Number),\n                                           a1 + Number, a1 + Number);\n              if (v14) {\n                *(_DWORD *)(a1 + Number) = Number;\n                v14 = Number;\n              }\n            }\n            v14 = pj_activesock_start_connect(*(_QWORD *)(a1 + Number), a2,\n                                              (__int64)a4, a5);\n            if (!v14) {\n              asock_on_connect_complete_0(*(_QWORD *)(a1 + Number), Number);\n            LABEL_31:\n              *(_DWORD *)(a1 + Number) = a5;\n              v14 = pj_sock_getsockname(*(_QWORD *)(a1 + Number),\n                                        (struct sockaddr *)(a1 + Number),\n                                        (socklen_t *)(a1 + Number));\n              *(_DWORD *)(a1 + Number) = Number;\n              return Number L;\n            }\n            if (v14 == Number)\n              goto LABEL_31;\n          }\n        }\n      }\n    }\n    reset_ssl_sock_state(a1);\n    return v14;\n  }\n  if (!a1 || !a2 || !a3 || !a4 || !a5)\n    __assert_fail(String, String, Number, String);\n  return Number L;\n}", "code_t": "pj_status_t __cdecl pj_ssl_sock_start_connect(pj_ssl_sock_t_0 *ssock,\n                                              pj_pool_t_0 *pool,\n                                              const pj_sockaddr_t *localaddr,\n                                              const pj_sockaddr_t *remaddr,\n                                              int addr_len) {\n  pj_activesock_cfg_0 <span class=\"supfact\">asock_cfg</span>;\n  pj_activesock_cb_0 <span class=\"supfact\">asock_cb</span>;\n  pj_status_t status;\n  if (ssock && pool && localaddr && remaddr && addr_len) {\n    status = pj_sock_socket(ssock->param.sock_af, ssock->param.sock_type,\n                            Number, &ssock->sock);\n    if (!status) {\n      status = pj_sock_apply_qos2(ssock->sock, ssock->param.qos_type,\n                                  &ssock->param.qos_params, Number,\n                                  ssock->pool->obj_name, Number L);\n      if ((!status || ssock->param.qos_ignore_error) &&\n          (!ssock->param.sockopt_params.cnt ||\n           (status = pj_sock_setsockopt_params(\n                ssock->sock, &ssock->param.sockopt_params)) == Number ||\n           ssock->param.sockopt_ignore_error)) {\n        status = pj_sock_bind(ssock->sock, localaddr, addr_len);\n        if (!status) {\n          pj_activesock_cfg_default(&<span class=\"supfact\">asock_cfg</span>);\n          <span class=\"supfact\">asock_cfg</span>.async_cnt = ssock->param.async_cnt;\n          <span class=\"supfact\">asock_cfg</span>.concurrency = ssock->param.concurrency;\n          <span class=\"supfact\">asock_cfg</span>.whole_data = Number;\n          <span class=\"supfact\">asock_cfg</span>.grp_lock = ssock->param.grp_lock;\n          pj_bzero_18(&<span class=\"supfact\">asock_cb</span>, Number);\n          <span class=\"supfact\">asock_cb</span>.on_connect_complete = (pj_bool_t(*)(\n              pj_activesock_t_0 *, pj_status_t))asock_on_connect_complete_0;\n          <span class=\"supfact\">asock_cb</span>.on_data_read =\n              (pj_bool_t(*)(pj_activesock_t_0 *, void *, pj_size_t, pj_status_t,\n                            pj_size_t *))asock_on_data_read_0;\n          <span class=\"supfact\">asock_cb</span>.on_data_sent =\n              (pj_bool_t(*)(pj_activesock_t_0 *, pj_ioqueue_op_key_t_0 *,\n                            pj_ssize_t))asock_on_data_sent;\n          status = pj_activesock_create(\n              pool, ssock->sock, ssock->param.sock_type,\n              &<span class=\"supfact\">asock_cfg</span>, ssock->param.ioqueue,\n              &<span class=\"supfact\">asock_cb</span>, ssock, &ssock->asock);\n          if (!status) {\n            pj_sockaddr_cp(&ssock->rem_addr, remaddr);\n            if (ssock->param.timer_heap &&\n                (ssock->param.timeout.sec || ssock->param.timeout.msec)) {\n              if (ssock->timer.id)\n                __assert_fail(String, String, Number, String);\n              ssock->timer.id = Number;\n              status =\n                  pj_timer_heap_schedule(ssock->param.timer_heap, &ssock->timer,\n                                         &ssock->param.timeout);\n              if (status) {\n                ssock->timer.id = Number;\n                status = Number;\n              }\n            }\n            status = pj_activesock_start_connect(ssock->asock, pool, remaddr,\n                                                 addr_len);\n            if (!status) {\n              asock_on_connect_complete_0(ssock->asock, Number);\n            LABEL_31:\n              ssock->addr_len = addr_len;\n              status = pj_sock_getsockname(ssock->sock, &ssock->local_addr,\n                                           &ssock->addr_len);\n              ssock->is_server = Number;\n              return Number;\n            }\n            if (status == Number)\n              goto LABEL_31;\n          }\n        }\n      }\n    }\n    reset_ssl_sock_state(ssock);\n    return status;\n  }\n  if (!ssock || !pool || !localaddr || !remaddr || !addr_len)\n    __assert_fail(String, String, Number, String);\n  return Number;\n}", "var": [{"name": "v9", "type": "__unk__", "pred_name": "__unk__", "ref_name": "asock_cfg", "ref_type": "struct pj_activesock_cfg_0 { pj_grp_lock_t_0 * grp_lock; unsigned int async_cnt; int concurrency; pj_bool_t whole_data; PADDING (4); }"}, {"name": "v13", "type": "pj_status_t", "pred_name": "st", "ref_name": "asock_cb", "ref_type": "struct pj_activesock_cb_0 { pj_bool_t (*)(pj_activesock_t_0 *, void *, pj_size_t, pj_status_t, pj_size_t *) on_data_read; pj_bool_t (*)(pj_activesock_t_0 *, void *, pj_size_t, const pj_sockaddr_t *, int, pj_status_t) on_data_recvfrom; pj_bool_t (*)(pj_activesock_t_0 *, pj_ioqueue_op_key_t_0 *, pj_ssize_t) on_data_sent; pj_bool_t (*)(pj_activesock_t_0 *, pj_sock_t, const pj_sockaddr_t *, int) on_accept_complete; pj_bool_t (*)(pj_activesock_t_0 *, pj_sock_t, const pj_sockaddr_t *, int, pj_status_t) on_accept_complete2; pj_bool_t (*)(pj_activesock_t_0 *, pj_status_t) on_connect_complete; }"}], "body_in_train": false}, {"repo_owner": "rcls", "repo_name": "scg", "path": "rcls/scg/51b3ce5d3e618e43ca1835266df4e4a8dfdfc0f4f0c2b44b6caa05ef50753b55", "path_in_repo": "rcls/scg//mtrace/symboltable-pic.o", "objdump": "00000000000006a8 <replace_elf>:\n     6a8:\t53                   \tpush   %rbx\n     6a9:\t48 81 ec a0 00 00 00 \tsub    $0xa0,%rsp\n     6b0:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n     6b5:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n     6ba:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n     6be:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     6c3:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n     6c7:\t48 8d 54 24 60       \tlea    0x60(%rsp),%rdx\n     6cc:\t48 89 d6             \tmov    %rdx,%rsi\n     6cf:\t48 89 c7             \tmov    %rax,%rdi\n     6d2:\te8 00 00 00 00       \tcallq  6d7 <replace_elf+0x2f>\n     6d7:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n     6db:\t48 8d 54 24 20       \tlea    0x20(%rsp),%rdx\n     6e0:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     6e5:\t48 89 d6             \tmov    %rdx,%rsi\n     6e8:\t48 89 c7             \tmov    %rax,%rdi\n     6eb:\te8 00 00 00 00       \tcallq  6f0 <replace_elf+0x48>\n     6f0:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n     6f4:\t48 29 c3             \tsub    %rax,%rbx\n     6f7:\t48 89 da             \tmov    %rbx,%rdx\n     6fa:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     6ff:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     703:\t48 01 d0             \tadd    %rdx,%rax\n     706:\t48 89 c2             \tmov    %rax,%rdx\n     709:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     70e:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n     712:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     717:\t8b 50 30             \tmov    0x30(%rax),%edx\n     71a:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     71f:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n     723:\t89 d6                \tmov    %edx,%esi\n     725:\t48 89 c7             \tmov    %rax,%rdi\n     728:\te8 16 fe ff ff       \tcallq  543 <close_elf>\n     72d:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     732:\t48 8b 54 24 10       \tmov    0x10(%rsp),%rdx\n     737:\t48 89 50 28          \tmov    %rdx,0x28(%rax)\n     73b:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     740:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n     744:\t89 50 30             \tmov    %edx,0x30(%rax)\n     747:\t90                   \tnop\n     748:\t48 81 c4 a0 00 00 00 \tadd    $0xa0,%rsp\n     74f:\t5b                   \tpop    %rbx\n     750:\tc3                   \tretq   ", "code_s": "__int64 __fastcall replace_elf(__int64 a1, __int64 a2, int a3) {\n  __int64 v3;\n  __int64 result;\n  char <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  v3 = *(_QWORD *)(gelf_getehdr(*(_QWORD *)(a1 + Number), <span class=\"supfact\">v7</span>) +\n                   Number);\n  *(_QWORD *)(a1 + Number) +=\n      v3 - *(_QWORD *)(gelf_getehdr(a2, <span class=\"supfact\">v6</span>) + Number);\n  close_elf(*(_QWORD *)(a1 + Number), *(_DWORD *)(a1 + Number));\n  *(_QWORD *)(a1 + Number) = a2;\n  result = a1;\n  *(_DWORD *)(a1 + Number) = a3;\n  return result;\n}", "code_t": "void __cdecl replace_elf(ElfObject_0 *it, Elf_0 *elf, int fd) {\n  __int64 v3;\n  GElf_Ehdr <span class=\"supfact\">new_header</span>;\n  GElf_Ehdr <span class=\"supfact\">old_header</span>;\n  v3 = *(_QWORD *)(gelf_getehdr(it->elf, &<span class=\"supfact\">old_header</span>) + Number);\n  it->delta +=\n      v3 - *(_QWORD *)(gelf_getehdr(elf, &<span class=\"supfact\">new_header</span>) + Number);\n  close_elf(it->elf, it->fd);\n  it->elf = elf;\n  it->fd = fd;\n}", "var": [{"name": "v6", "type": "struct GElf_Shdr { Elf64_Word sh_name; Elf64_Word sh_type; Elf64_Xword sh_flags; Elf64_Addr sh_addr; Elf64_Off sh_offset; Elf64_Xword sh_size; Elf64_Word sh_link; Elf64_Word sh_info; Elf64_Xword sh_addralign; Elf64_Xword sh_entsize; }", "pred_name": "shdr", "ref_name": "new_header", "ref_type": "struct GElf_Ehdr { unsigned __int8[16] e_ident; Elf64_Half e_type; Elf64_Half e_machine; Elf64_Word e_version; Elf64_Addr e_entry; Elf64_Off e_phoff; Elf64_Off e_shoff; Elf64_Word e_flags; Elf64_Half e_ehsize; Elf64_Half e_phentsize; Elf64_Half e_phnum; Elf64_Half e_shentsize; Elf64_Half e_shnum; Elf64_Half e_shstrndx; }"}, {"name": "v7", "type": "struct GElf_Ehdr { unsigned __int8[16] e_ident; Elf64_Half e_type; Elf64_Half e_machine; Elf64_Word e_version; Elf64_Addr e_entry; Elf64_Off e_phoff; Elf64_Off e_shoff; Elf64_Word e_flags; Elf64_Half e_ehsize; Elf64_Half e_phentsize; Elf64_Half e_phnum; Elf64_Half e_shentsize; Elf64_Half e_shnum; Elf64_Half e_shstrndx; }", "pred_name": "ehdr", "ref_name": "old_header", "ref_type": "struct GElf_Ehdr { unsigned __int8[16] e_ident; Elf64_Half e_type; Elf64_Half e_machine; Elf64_Word e_version; Elf64_Addr e_entry; Elf64_Off e_phoff; Elf64_Off e_shoff; Elf64_Word e_flags; Elf64_Half e_ehsize; Elf64_Half e_phentsize; Elf64_Half e_phnum; Elf64_Half e_shentsize; Elf64_Half e_shnum; Elf64_Half e_shstrndx; }"}], "body_in_train": false}, {"repo_owner": "rim99", "repo_name": "PostgreSQL-src", "path": "rim99/PostgreSQL-src/ac59f825b127bac71e62b517ee49d7c88d662e8aef5b7c2be05c057d798db1ab", "path_in_repo": "rim99/PostgreSQL-src//src/bin/psql/psql", "objdump": "0000000000416cbd <describeAccessMethods>:\n  416cbd:\t55                   \tpush   %rbp\n  416cbe:\t48 89 e5             \tmov    %rsp,%rbp\n  416cc1:\t48 81 ec f0 00 00 00 \tsub    $0xf0,%rsp\n  416cc8:\t48 89 bd 18 ff ff ff \tmov    %rdi,-0xe8(%rbp)\n  416ccf:\t89 f0                \tmov    %esi,%eax\n  416cd1:\t88 85 14 ff ff ff    \tmov    %al,-0xec(%rbp)\n  416cd7:\t48 8b 05 f2 21 07 00 \tmov    0x721f2(%rip),%rax        # 488ed0 <pset+0x30>\n  416cde:\t48 8b 15 f3 21 07 00 \tmov    0x721f3(%rip),%rdx        # 488ed8 <pset+0x38>\n  416ce5:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n  416cec:\t48 89 95 48 ff ff ff \tmov    %rdx,-0xb8(%rbp)\n  416cf3:\t48 8b 05 e6 21 07 00 \tmov    0x721e6(%rip),%rax        # 488ee0 <pset+0x40>\n  416cfa:\t48 8b 15 e7 21 07 00 \tmov    0x721e7(%rip),%rdx        # 488ee8 <pset+0x48>\n  416d01:\t48 89 85 50 ff ff ff \tmov    %rax,-0xb0(%rbp)\n  416d08:\t48 89 95 58 ff ff ff \tmov    %rdx,-0xa8(%rbp)\n  416d0f:\t48 8b 05 da 21 07 00 \tmov    0x721da(%rip),%rax        # 488ef0 <pset+0x50>\n  416d16:\t48 8b 15 db 21 07 00 \tmov    0x721db(%rip),%rdx        # 488ef8 <pset+0x58>\n  416d1d:\t48 89 85 60 ff ff ff \tmov    %rax,-0xa0(%rbp)\n  416d24:\t48 89 95 68 ff ff ff \tmov    %rdx,-0x98(%rbp)\n  416d2b:\t48 8b 05 ce 21 07 00 \tmov    0x721ce(%rip),%rax        # 488f00 <pset+0x60>\n  416d32:\t48 8b 15 cf 21 07 00 \tmov    0x721cf(%rip),%rdx        # 488f08 <pset+0x68>\n  416d39:\t48 89 85 70 ff ff ff \tmov    %rax,-0x90(%rbp)\n  416d40:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n  416d47:\t48 8b 05 c2 21 07 00 \tmov    0x721c2(%rip),%rax        # 488f10 <pset+0x70>\n  416d4e:\t48 8b 15 c3 21 07 00 \tmov    0x721c3(%rip),%rdx        # 488f18 <pset+0x78>\n  416d55:\t48 89 45 80          \tmov    %rax,-0x80(%rbp)\n  416d59:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n  416d5d:\t48 8b 05 bc 21 07 00 \tmov    0x721bc(%rip),%rax        # 488f20 <pset+0x80>\n  416d64:\t48 8b 15 bd 21 07 00 \tmov    0x721bd(%rip),%rdx        # 488f28 <pset+0x88>\n  416d6b:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n  416d6f:\t48 89 55 98          \tmov    %rdx,-0x68(%rbp)\n  416d73:\t48 8b 05 b6 21 07 00 \tmov    0x721b6(%rip),%rax        # 488f30 <pset+0x90>\n  416d7a:\t48 8b 15 b7 21 07 00 \tmov    0x721b7(%rip),%rdx        # 488f38 <pset+0x98>\n  416d81:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n  416d85:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n  416d89:\t48 8b 05 b0 21 07 00 \tmov    0x721b0(%rip),%rax        # 488f40 <pset+0xa0>\n  416d90:\t48 8b 15 b1 21 07 00 \tmov    0x721b1(%rip),%rdx        # 488f48 <pset+0xa8>\n  416d97:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n  416d9b:\t48 89 55 b8          \tmov    %rdx,-0x48(%rbp)\n  416d9f:\t48 8b 05 aa 21 07 00 \tmov    0x721aa(%rip),%rax        # 488f50 <pset+0xb0>\n  416da6:\t48 8b 15 ab 21 07 00 \tmov    0x721ab(%rip),%rdx        # 488f58 <pset+0xb8>\n  416dad:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  416db1:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  416db5:\t48 8b 05 a4 21 07 00 \tmov    0x721a4(%rip),%rax        # 488f60 <pset+0xc0>\n  416dbc:\t48 8b 15 a5 21 07 00 \tmov    0x721a5(%rip),%rdx        # 488f68 <pset+0xc8>\n  416dc3:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  416dc7:\t48 89 55 d8          \tmov    %rdx,-0x28(%rbp)\n  416dcb:\t8b 05 eb 21 07 00    \tmov    0x721eb(%rip),%eax        # 488fbc <pset+0x11c>\n  416dd1:\t3d e7 61 01 00       \tcmp    $0x161e7,%eax\n  416dd6:\t7f 3a                \tjg     416e12 <describeAccessMethods+0x155>\n  416dd8:\t8b 05 de 21 07 00    \tmov    0x721de(%rip),%eax        # 488fbc <pset+0x11c>\n  416dde:\t48 8d 95 20 ff ff ff \tlea    -0xe0(%rbp),%rdx\n  416de5:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n  416dea:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  416def:\t89 c7                \tmov    %eax,%edi\n  416df1:\te8 75 56 03 00       \tcallq  44c46b <formatPGVersionNumber>\n  416df6:\t48 89 c6             \tmov    %rax,%rsi\n  416df9:\tbf 48 5c 45 00       \tmov    $0x455c48,%edi\n  416dfe:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  416e03:\te8 34 4f ff ff       \tcallq  40bd3c <psql_error>\n  416e08:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  416e0d:\te9 40 01 00 00       \tjmpq   416f52 <describeAccessMethods+0x295>\n  416e12:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  416e16:\t48 89 c7             \tmov    %rax,%rdi\n  416e19:\te8 82 d2 fe ff       \tcallq  4040a0 <initPQExpBuffer@plt>\n  416e1e:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  416e22:\t41 b8 82 5c 45 00    \tmov    $0x455c82,%r8d\n  416e28:\tb9 87 5c 45 00       \tmov    $0x455c87,%ecx\n  416e2d:\tba 41 58 45 00       \tmov    $0x455841,%edx\n  416e32:\tbe 90 5c 45 00       \tmov    $0x455c90,%esi\n  416e37:\t48 89 c7             \tmov    %rax,%rdi\n  416e3a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  416e3f:\te8 dc d3 fe ff       \tcallq  404220 <printfPQExpBuffer@plt>\n  416e44:\t80 bd 14 ff ff ff 00 \tcmpb   $0x0,-0xec(%rbp)\n  416e4b:\t74 20                \tje     416e6d <describeAccessMethods+0x1b0>\n  416e4d:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  416e51:\tb9 cb 5a 45 00       \tmov    $0x455acb,%ecx\n  416e56:\tba d4 5c 45 00       \tmov    $0x455cd4,%edx\n  416e5b:\tbe e0 5c 45 00       \tmov    $0x455ce0,%esi\n  416e60:\t48 89 c7             \tmov    %rax,%rdi\n  416e63:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  416e68:\te8 23 d4 fe ff       \tcallq  404290 <appendPQExpBuffer@plt>\n  416e6d:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  416e71:\tbe 2a 5d 45 00       \tmov    $0x455d2a,%esi\n  416e76:\t48 89 c7             \tmov    %rax,%rdi\n  416e79:\te8 82 db fe ff       \tcallq  404a00 <appendPQExpBufferStr@plt>\n  416e7e:\t48 8b 05 1b 20 07 00 \tmov    0x7201b(%rip),%rax        # 488ea0 <pset>\n  416e85:\t48 8b 95 18 ff ff ff \tmov    -0xe8(%rbp),%rdx\n  416e8c:\t48 8d 75 e0          \tlea    -0x20(%rbp),%rsi\n  416e90:\t48 83 ec 08          \tsub    $0x8,%rsp\n  416e94:\t6a 00                \tpushq  $0x0\n  416e96:\t6a 00                \tpushq  $0x0\n  416e98:\t68 42 5d 45 00       \tpushq  $0x455d42\n  416e9d:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  416ea3:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n  416ea9:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  416eae:\t48 89 c7             \tmov    %rax,%rdi\n  416eb1:\te8 ce 63 03 00       \tcallq  44d284 <processSQLNamePattern>\n  416eb6:\t48 83 c4 20          \tadd    $0x20,%rsp\n  416eba:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  416ebe:\tbe 49 5d 45 00       \tmov    $0x455d49,%esi\n  416ec3:\t48 89 c7             \tmov    %rax,%rdi\n  416ec6:\te8 35 db fe ff       \tcallq  404a00 <appendPQExpBufferStr@plt>\n  416ecb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  416ecf:\t48 89 c7             \tmov    %rax,%rdi\n  416ed2:\te8 60 53 ff ff       \tcallq  40c237 <PSQLexec>\n  416ed7:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  416edb:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  416edf:\t48 89 c7             \tmov    %rax,%rdi\n  416ee2:\te8 a9 da fe ff       \tcallq  404990 <termPQExpBuffer@plt>\n  416ee7:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n  416eec:\t75 07                \tjne    416ef5 <describeAccessMethods+0x238>\n  416eee:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  416ef3:\teb 5d                \tjmp    416f52 <describeAccessMethods+0x295>\n  416ef5:\t48 c7 45 b0 00 00 00 \tmovq   $0x0,-0x50(%rbp)\n  416efc:\t00 \n  416efd:\t48 c7 45 b8 55 5d 45 \tmovq   $0x455d55,-0x48(%rbp)\n  416f04:\t00 \n  416f05:\tc6 45 c8 01          \tmovb   $0x1,-0x38(%rbp)\n  416f09:\t48 c7 45 d0 c5 ec 45 \tmovq   $0x45ecc5,-0x30(%rbp)\n  416f10:\t00 \n  416f11:\tc7 45 d8 04 00 00 00 \tmovl   $0x4,-0x28(%rbp)\n  416f18:\t48 8b 0d c9 20 07 00 \tmov    0x720c9(%rip),%rcx        # 488fe8 <pset+0x148>\n  416f1f:\t48 8b 15 8a 1f 07 00 \tmov    0x71f8a(%rip),%rdx        # 488eb0 <pset+0x10>\n  416f26:\t48 8d b5 40 ff ff ff \tlea    -0xc0(%rbp),%rsi\n  416f2d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  416f31:\t49 89 c8             \tmov    %rcx,%r8\n  416f34:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  416f39:\t48 89 c7             \tmov    %rax,%rdi\n  416f3c:\te8 b4 08 03 00       \tcallq  4477f5 <printQuery>\n  416f41:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  416f45:\t48 89 c7             \tmov    %rax,%rdi\n  416f48:\te8 e3 db fe ff       \tcallq  404b30 <PQclear@plt>\n  416f4d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  416f52:\tc9                   \tleaveq \n  416f53:\tc3                   \tretq   ", "code_s": "__int64 __fastcall describeAccessMethods(int a1, char a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 result;\n  __int64 v8;\n  __int64 v9;\n  __int64 v10;\n  __int64 v11;\n  char v12[Number];\n  __int64 <span class=\"supfact\">v13</span>[Number];\n  __int64 v14;\n  const char *v15;\n  __int64 v16;\n  __int64 v17;\n  void *v18;\n  __int64 v19;\n  const char *<span class=\"supfact\">v20</span>;\n  __int64 v21;\n  <span class=\"supfact\">v13</span>[Number] = qword_488ED0;\n  <span class=\"supfact\">v13</span>[Number] = qword_488ED8;\n  <span class=\"supfact\">v13</span>[Number] = qword_488EE0;\n  <span class=\"supfact\">v13</span>[Number] = qword_488EE8;\n  <span class=\"supfact\">v13</span>[Number] = qword_488EF0;\n  <span class=\"supfact\">v13</span>[Number] = qword_488EF8;\n  <span class=\"supfact\">v13</span>[Number] = qword_488F00;\n  <span class=\"supfact\">v13</span>[Number] = qword_488F08;\n  <span class=\"supfact\">v13</span>[Number] = qword_488F10;\n  <span class=\"supfact\">v13</span>[Number] = qword_488F18;\n  <span class=\"supfact\">v13</span>[Number] = qword_488F20;\n  <span class=\"supfact\">v13</span>[Number] = qword_488F28;\n  <span class=\"supfact\">v13</span>[Number] = qword_488F30;\n  <span class=\"supfact\">v13</span>[Number] = qword_488F38;\n  v14 = qword_488F40;\n  v15 = (const char *)qword_488F48;\n  v16 = qword_488F50;\n  v17 = qword_488F58;\n  v18 = (void *)qword_488F60;\n  v19 = qword_488F68;\n  if (dword_488FBC > Number) {\n    initPQExpBuffer();\n    printfPQExpBuffer();\n    if (a2)\n      appendPQExpBuffer();\n    appendPQExpBufferStr();\n    processSQLNamePattern(pset, (unsigned int)&<span class=\"supfact\">v20</span>, a1, Number,\n                          Number, Number, (__int64)String, Number L, Number L);\n    appendPQExpBufferStr();\n    v21 = PSQLexec(<span class=\"supfact\">v20</span>, (__int64)String, v8, v9, v10, v11);\n    termPQExpBuffer();\n    if (v21) {\n      v14 = Number L;\n      v15 = String;\n      LOBYTE(v17) = Number;\n      v18 = &translate_columns_5806;\n      LODWORD(v19) = Number;\n      printQuery(v21, <span class=\"supfact\">v13</span>, stream, Number L, qword_488FE8);\n      PQclear();\n      result = Number L;\n    } else {\n      result = Number L;\n    }\n  } else {\n    v2 = formatPGVersionNumber((unsigned int)dword_488FBC, Number L, v12,\n                               Number L);\n    psql_error(String, v2, v3, v4, v5, v6);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "bool __cdecl describeAccessMethods(const char *pattern, bool verbose) {\n  char *v2;\n  bool result;\n  char sverbuf[Number];\n  printQueryOpt_0 <span class=\"supfact\">myopt</span>;\n  PQExpBufferData_0 <span class=\"supfact\">buf</span>;\n  PGresult *res;\n  <span class=\"supfact\">myopt</span> = pset.popt;\n  if (pset.sversion > Number) {\n    initPQExpBuffer();\n    printfPQExpBuffer();\n    if (verbose)\n      appendPQExpBuffer();\n    appendPQExpBufferStr();\n    processSQLNamePattern(pset.db, &<span class=\"supfact\">buf</span>, pattern, Number,\n                          Number, Number L, String, Number L, Number L);\n    appendPQExpBufferStr();\n    res = PSQLexec(<span class=\"supfact\">buf</span>.data);\n    termPQExpBuffer();\n    if (res) {\n      <span class=\"supfact\">myopt</span>.nullPrint = Number L;\n      <span class=\"supfact\">myopt</span>.title = String;\n      <span class=\"supfact\">myopt</span>.translate_header = Number;\n      <span class=\"supfact\">myopt</span>.translate_columns = translate_columns_5806;\n      <span class=\"supfact\">myopt</span>.n_translate_columns = Number;\n      printQuery(res, &<span class=\"supfact\">myopt</span>, pset.queryFout, Number,\n                 pset.logfile);\n      PQclear();\n      result = Number;\n    } else {\n      result = Number;\n    }\n  } else {\n    v2 = formatPGVersionNumber(pset.sversion, Number, sverbuf, Number);\n    psql_error(String, v2);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v13", "type": "PQExpBuffer", "pred_name": "__unk__", "ref_name": "myopt", "ref_type": "struct printQueryOpt_0 { printTableOpt_0 topt; char * nullPrint; char * title; char ** footers; bool translate_header; PADDING (7); const bool * translate_columns; int n_translate_columns; PADDING (4); }"}, {"name": "v20", "type": "disappear", "pred_name": "", "ref_name": "buf", "ref_type": "struct PQExpBufferData_0 { char * data; size_t len; size_t maxlen; }"}], "body_in_train": false}, {"repo_owner": "Panopto", "repo_name": "panopto-ffmpeg", "path": "Panopto/panopto-ffmpeg/355514d46c96709d74f8db390b52bcaef5f2a2637c757fc7bcdab1db8a7f77dd", "path_in_repo": "Panopto/panopto-ffmpeg//libavcodec/dfa.o", "objdump": "0000000000002192 <dfa_decode_frame>:\n    2192:\t48 81 ec f8 00 00 00 \tsub    $0xf8,%rsp\n    2199:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n    219e:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n    21a3:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n    21a8:\t48 89 0c 24          \tmov    %rcx,(%rsp)\n    21ac:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    21b1:\t48 89 84 24 d0 00 00 \tmov    %rax,0xd0(%rsp)\n    21b8:\t00 \n    21b9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    21be:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n    21c2:\t48 89 84 24 c8 00 00 \tmov    %rax,0xc8(%rsp)\n    21c9:\t00 \n    21ca:\t48 8b 04 24          \tmov    (%rsp),%rax\n    21ce:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n    21d2:\t48 89 84 24 e8 00 00 \tmov    %rax,0xe8(%rsp)\n    21d9:\t00 \n    21da:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    21df:\t8b 80 88 00 00 00    \tmov    0x88(%rax),%eax\n    21e5:\t83 f8 02             \tcmp    $0x2,%eax\n    21e8:\t75 14                \tjne    21fe <dfa_decode_frame+0x6c>\n    21ea:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    21ef:\t48 8b 80 80 00 00 00 \tmov    0x80(%rax),%rax\n    21f6:\t0f b7 00             \tmovzwl (%rax),%eax\n    21f9:\t0f b7 c0             \tmovzwl %ax,%eax\n    21fc:\teb 05                \tjmp    2203 <dfa_decode_frame+0x71>\n    21fe:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2203:\t89 84 24 c4 00 00 00 \tmov    %eax,0xc4(%rsp)\n    220a:\t48 8b 8c 24 d0 00 00 \tmov    0xd0(%rsp),%rcx\n    2211:\t00 \n    2212:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2217:\tba 00 00 00 00       \tmov    $0x0,%edx\n    221c:\t48 89 ce             \tmov    %rcx,%rsi\n    221f:\t48 89 c7             \tmov    %rax,%rdi\n    2222:\te8 00 00 00 00       \tcallq  2227 <dfa_decode_frame+0x95>\n    2227:\t89 84 24 c0 00 00 00 \tmov    %eax,0xc0(%rsp)\n    222e:\t83 bc 24 c0 00 00 00 \tcmpl   $0x0,0xc0(%rsp)\n    2235:\t00 \n    2236:\t79 0c                \tjns    2244 <dfa_decode_frame+0xb2>\n    2238:\t8b 84 24 c0 00 00 00 \tmov    0xc0(%rsp),%eax\n    223f:\te9 a3 06 00 00       \tjmpq   28e7 <dfa_decode_frame+0x755>\n    2244:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2248:\t8b 40 20             \tmov    0x20(%rax),%eax\n    224b:\t48 8b 14 24          \tmov    (%rsp),%rdx\n    224f:\t48 8b 52 18          \tmov    0x18(%rdx),%rdx\n    2253:\t48 8d 4c 24 20       \tlea    0x20(%rsp),%rcx\n    2258:\t48 89 8c 24 a8 00 00 \tmov    %rcx,0xa8(%rsp)\n    225f:\t00 \n    2260:\t48 89 94 24 a0 00 00 \tmov    %rdx,0xa0(%rsp)\n    2267:\t00 \n    2268:\t89 84 24 9c 00 00 00 \tmov    %eax,0x9c(%rsp)\n    226f:\t83 bc 24 9c 00 00 00 \tcmpl   $0x0,0x9c(%rsp)\n    2276:\t00 \n    2277:\t79 2f                \tjns    22a8 <dfa_decode_frame+0x116>\n    2279:\t41 b9 89 00 00 00    \tmov    $0x89,%r9d\n    227f:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    2285:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    228a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    228f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2294:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2299:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    229e:\te8 00 00 00 00       \tcallq  22a3 <dfa_decode_frame+0x111>\n    22a3:\te8 00 00 00 00       \tcallq  22a8 <dfa_decode_frame+0x116>\n    22a8:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    22af:\t00 \n    22b0:\t48 8b 94 24 a0 00 00 \tmov    0xa0(%rsp),%rdx\n    22b7:\t00 \n    22b8:\t48 89 10             \tmov    %rdx,(%rax)\n    22bb:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    22c2:\t00 \n    22c3:\t48 8b 94 24 a0 00 00 \tmov    0xa0(%rsp),%rdx\n    22ca:\t00 \n    22cb:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    22cf:\t8b 84 24 9c 00 00 00 \tmov    0x9c(%rsp),%eax\n    22d6:\t48 63 d0             \tmovslq %eax,%rdx\n    22d9:\t48 8b 84 24 a0 00 00 \tmov    0xa0(%rsp),%rax\n    22e0:\t00 \n    22e1:\t48 01 c2             \tadd    %rax,%rdx\n    22e4:\t48 8b 84 24 a8 00 00 \tmov    0xa8(%rsp),%rax\n    22eb:\t00 \n    22ec:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n    22f0:\t90                   \tnop\n    22f1:\te9 f0 03 00 00       \tjmpq   26e6 <dfa_decode_frame+0x554>\n    22f6:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    22fb:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n    2300:\tc7 44 24 5c 04 00 00 \tmovl   $0x4,0x5c(%rsp)\n    2307:\t00 \n    2308:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    230d:\t48 8b 10             \tmov    (%rax),%rdx\n    2310:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    2315:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n    2319:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    231e:\t48 8b 00             \tmov    (%rax),%rax\n    2321:\t48 29 c1             \tsub    %rax,%rcx\n    2324:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n    2328:\t48 39 c1             \tcmp    %rax,%rcx\n    232b:\t7e 06                \tjle    2333 <dfa_decode_frame+0x1a1>\n    232d:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n    2331:\teb 17                \tjmp    234a <dfa_decode_frame+0x1b8>\n    2333:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    2338:\t48 8b 48 08          \tmov    0x8(%rax),%rcx\n    233c:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    2341:\t48 8b 00             \tmov    (%rax),%rax\n    2344:\t48 29 c1             \tsub    %rax,%rcx\n    2347:\t48 89 c8             \tmov    %rcx,%rax\n    234a:\t48 01 c2             \tadd    %rax,%rdx\n    234d:\t48 8b 44 24 60       \tmov    0x60(%rsp),%rax\n    2352:\t48 89 10             \tmov    %rdx,(%rax)\n    2355:\t90                   \tnop\n    2356:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    235b:\t48 89 44 24 78       \tmov    %rax,0x78(%rsp)\n    2360:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    2365:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    2369:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    236e:\t48 8b 00             \tmov    (%rax),%rax\n    2371:\t48 29 c2             \tsub    %rax,%rdx\n    2374:\t48 89 d0             \tmov    %rdx,%rax\n    2377:\t48 83 f8 03          \tcmp    $0x3,%rax\n    237b:\t7f 18                \tjg     2395 <dfa_decode_frame+0x203>\n    237d:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    2382:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    2386:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    238b:\t48 89 10             \tmov    %rdx,(%rax)\n    238e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2393:\teb 38                \tjmp    23cd <dfa_decode_frame+0x23b>\n    2395:\t48 8b 44 24 78       \tmov    0x78(%rsp),%rax\n    239a:\t48 89 44 24 70       \tmov    %rax,0x70(%rsp)\n    239f:\t48 8b 44 24 70       \tmov    0x70(%rsp),%rax\n    23a4:\t48 89 44 24 68       \tmov    %rax,0x68(%rsp)\n    23a9:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    23ae:\t48 8b 00             \tmov    (%rax),%rax\n    23b1:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n    23b5:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    23ba:\t48 89 10             \tmov    %rdx,(%rax)\n    23bd:\t48 8b 44 24 68       \tmov    0x68(%rsp),%rax\n    23c2:\t48 8b 00             \tmov    (%rax),%rax\n    23c5:\t48 83 e8 04          \tsub    $0x4,%rax\n    23c9:\t8b 00                \tmov    (%rax),%eax\n    23cb:\t90                   \tnop\n    23cc:\t90                   \tnop\n    23cd:\t89 84 24 bc 00 00 00 \tmov    %eax,0xbc(%rsp)\n    23d4:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    23d9:\t48 89 84 24 90 00 00 \tmov    %rax,0x90(%rsp)\n    23e0:\t00 \n    23e1:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    23e8:\t00 \n    23e9:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    23ed:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    23f4:\t00 \n    23f5:\t48 8b 00             \tmov    (%rax),%rax\n    23f8:\t48 29 c2             \tsub    %rax,%rdx\n    23fb:\t48 89 d0             \tmov    %rdx,%rax\n    23fe:\t48 83 f8 03          \tcmp    $0x3,%rax\n    2402:\t7f 1e                \tjg     2422 <dfa_decode_frame+0x290>\n    2404:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    240b:\t00 \n    240c:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    2410:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    2417:\t00 \n    2418:\t48 89 10             \tmov    %rdx,(%rax)\n    241b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2420:\teb 4d                \tjmp    246f <dfa_decode_frame+0x2dd>\n    2422:\t48 8b 84 24 90 00 00 \tmov    0x90(%rsp),%rax\n    2429:\t00 \n    242a:\t48 89 84 24 88 00 00 \tmov    %rax,0x88(%rsp)\n    2431:\t00 \n    2432:\t48 8b 84 24 88 00 00 \tmov    0x88(%rsp),%rax\n    2439:\t00 \n    243a:\t48 89 84 24 80 00 00 \tmov    %rax,0x80(%rsp)\n    2441:\t00 \n    2442:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    2449:\t00 \n    244a:\t48 8b 00             \tmov    (%rax),%rax\n    244d:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n    2451:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    2458:\t00 \n    2459:\t48 89 10             \tmov    %rdx,(%rax)\n    245c:\t48 8b 84 24 80 00 00 \tmov    0x80(%rsp),%rax\n    2463:\t00 \n    2464:\t48 8b 00             \tmov    (%rax),%rax\n    2467:\t48 83 e8 04          \tsub    $0x4,%rax\n    246b:\t8b 00                \tmov    (%rax),%eax\n    246d:\t90                   \tnop\n    246e:\t90                   \tnop\n    246f:\t89 84 24 b8 00 00 00 \tmov    %eax,0xb8(%rsp)\n    2476:\t83 bc 24 b8 00 00 00 \tcmpl   $0x0,0xb8(%rsp)\n    247d:\t00 \n    247e:\t0f 84 8d 02 00 00    \tje     2711 <dfa_decode_frame+0x57f>\n    2484:\t83 bc 24 b8 00 00 00 \tcmpl   $0x1,0xb8(%rsp)\n    248b:\t01 \n    248c:\t0f 85 8d 01 00 00    \tjne    261f <dfa_decode_frame+0x48d>\n    2492:\t81 bc 24 bc 00 00 00 \tcmpl   $0x302,0xbc(%rsp)\n    2499:\t02 03 00 00 \n    249d:\t77 1a                \tja     24b9 <dfa_decode_frame+0x327>\n    249f:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    24a6:\t89 c2                \tmov    %eax,%edx\n    24a8:\tb8 ab aa aa aa       \tmov    $0xaaaaaaab,%eax\n    24ad:\t48 0f af c2          \timul   %rdx,%rax\n    24b1:\t48 c1 e8 20          \tshr    $0x20,%rax\n    24b5:\td1 e8                \tshr    %eax\n    24b7:\teb 05                \tjmp    24be <dfa_decode_frame+0x32c>\n    24b9:\tb8 00 01 00 00       \tmov    $0x100,%eax\n    24be:\t89 84 24 b4 00 00 00 \tmov    %eax,0xb4(%rsp)\n    24c5:\tc7 84 24 dc 00 00 00 \tmovl   $0x0,0xdc(%rsp)\n    24cc:\t00 00 00 00 \n    24d0:\te9 1f 01 00 00       \tjmpq   25f4 <dfa_decode_frame+0x462>\n    24d5:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    24da:\t48 89 44 24 50       \tmov    %rax,0x50(%rsp)\n    24df:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    24e4:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    24e8:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    24ed:\t48 8b 00             \tmov    (%rax),%rax\n    24f0:\t48 29 c2             \tsub    %rax,%rdx\n    24f3:\t48 89 d0             \tmov    %rdx,%rax\n    24f6:\t48 83 f8 02          \tcmp    $0x2,%rax\n    24fa:\t7f 18                \tjg     2514 <dfa_decode_frame+0x382>\n    24fc:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    2501:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    2505:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    250a:\t48 89 10             \tmov    %rdx,(%rax)\n    250d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2512:\teb 6c                \tjmp    2580 <dfa_decode_frame+0x3ee>\n    2514:\t48 8b 44 24 50       \tmov    0x50(%rsp),%rax\n    2519:\t48 89 44 24 48       \tmov    %rax,0x48(%rsp)\n    251e:\t48 8b 44 24 48       \tmov    0x48(%rsp),%rax\n    2523:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n    2528:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    252d:\t48 8b 00             \tmov    (%rax),%rax\n    2530:\t48 8d 50 03          \tlea    0x3(%rax),%rdx\n    2534:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    2539:\t48 89 10             \tmov    %rdx,(%rax)\n    253c:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    2541:\t48 8b 00             \tmov    (%rax),%rax\n    2544:\t48 83 e8 03          \tsub    $0x3,%rax\n    2548:\t0f b6 00             \tmovzbl (%rax),%eax\n    254b:\t0f b6 c0             \tmovzbl %al,%eax\n    254e:\tc1 e0 10             \tshl    $0x10,%eax\n    2551:\t89 c2                \tmov    %eax,%edx\n    2553:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    2558:\t48 8b 00             \tmov    (%rax),%rax\n    255b:\t48 83 e8 02          \tsub    $0x2,%rax\n    255f:\t0f b6 00             \tmovzbl (%rax),%eax\n    2562:\t0f b6 c0             \tmovzbl %al,%eax\n    2565:\tc1 e0 08             \tshl    $0x8,%eax\n    2568:\t09 c2                \tor     %eax,%edx\n    256a:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    256f:\t48 8b 00             \tmov    (%rax),%rax\n    2572:\t48 83 e8 01          \tsub    $0x1,%rax\n    2576:\t0f b6 00             \tmovzbl (%rax),%eax\n    2579:\t0f b6 c0             \tmovzbl %al,%eax\n    257c:\t09 d0                \tor     %edx,%eax\n    257e:\t90                   \tnop\n    257f:\t90                   \tnop\n    2580:\t8d 0c 85 00 00 00 00 \tlea    0x0(,%rax,4),%ecx\n    2587:\t48 8b 84 24 c8 00 00 \tmov    0xc8(%rsp),%rax\n    258e:\t00 \n    258f:\t8b 94 24 dc 00 00 00 \tmov    0xdc(%rsp),%edx\n    2596:\t48 63 d2             \tmovslq %edx,%rdx\n    2599:\t89 0c 90             \tmov    %ecx,(%rax,%rdx,4)\n    259c:\t48 8b 84 24 c8 00 00 \tmov    0xc8(%rsp),%rax\n    25a3:\t00 \n    25a4:\t8b 94 24 dc 00 00 00 \tmov    0xdc(%rsp),%edx\n    25ab:\t48 63 d2             \tmovslq %edx,%rdx\n    25ae:\t8b 0c 90             \tmov    (%rax,%rdx,4),%ecx\n    25b1:\t48 8b 84 24 c8 00 00 \tmov    0xc8(%rsp),%rax\n    25b8:\t00 \n    25b9:\t8b 94 24 dc 00 00 00 \tmov    0xdc(%rsp),%edx\n    25c0:\t48 63 d2             \tmovslq %edx,%rdx\n    25c3:\t8b 04 90             \tmov    (%rax,%rdx,4),%eax\n    25c6:\tc1 e8 06             \tshr    $0x6,%eax\n    25c9:\t25 03 03 03 00       \tand    $0x30303,%eax\n    25ce:\t09 c8                \tor     %ecx,%eax\n    25d0:\t0d 00 00 00 ff       \tor     $0xff000000,%eax\n    25d5:\t89 c1                \tmov    %eax,%ecx\n    25d7:\t48 8b 84 24 c8 00 00 \tmov    0xc8(%rsp),%rax\n    25de:\t00 \n    25df:\t8b 94 24 dc 00 00 00 \tmov    0xdc(%rsp),%edx\n    25e6:\t48 63 d2             \tmovslq %edx,%rdx\n    25e9:\t89 0c 90             \tmov    %ecx,(%rax,%rdx,4)\n    25ec:\t83 84 24 dc 00 00 00 \taddl   $0x1,0xdc(%rsp)\n    25f3:\t01 \n    25f4:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    25fb:\t3b 84 24 b4 00 00 00 \tcmp    0xb4(%rsp),%eax\n    2602:\t0f 8c cd fe ff ff    \tjl     24d5 <dfa_decode_frame+0x343>\n    2608:\t48 8b 84 24 d0 00 00 \tmov    0xd0(%rsp),%rax\n    260f:\t00 \n    2610:\tc7 80 04 01 00 00 01 \tmovl   $0x1,0x104(%rax)\n    2617:\t00 00 00 \n    261a:\te9 b8 00 00 00       \tjmpq   26d7 <dfa_decode_frame+0x545>\n    261f:\t83 bc 24 b8 00 00 00 \tcmpl   $0x9,0xb8(%rsp)\n    2626:\t09 \n    2627:\t0f 87 85 00 00 00    \tja     26b2 <dfa_decode_frame+0x520>\n    262d:\t8b 84 24 b8 00 00 00 \tmov    0xb8(%rsp),%eax\n    2634:\t83 e8 02             \tsub    $0x2,%eax\n    2637:\t89 c0                \tmov    %eax,%eax\n    2639:\t4c 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%r8\n    2640:\t00 \n    2641:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2646:\t8b 88 a0 00 00 00    \tmov    0xa0(%rax),%ecx\n    264c:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2651:\t8b 90 9c 00 00 00    \tmov    0x9c(%rax),%edx\n    2657:\t48 8b 84 24 c8 00 00 \tmov    0xc8(%rsp),%rax\n    265e:\t00 \n    265f:\t48 8b b0 00 04 00 00 \tmov    0x400(%rax),%rsi\n    2666:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    266b:\t48 89 c7             \tmov    %rax,%rdi\n    266e:\t41 ff d0             \tcallq  *%r8\n    2671:\t85 c0                \ttest   %eax,%eax\n    2673:\t74 62                \tje     26d7 <dfa_decode_frame+0x545>\n    2675:\t8b 84 24 b8 00 00 00 \tmov    0xb8(%rsp),%eax\n    267c:\t83 e8 02             \tsub    $0x2,%eax\n    267f:\t89 c0                \tmov    %eax,%eax\n    2681:\t48 8b 14 c5 00 00 00 \tmov    0x0(,%rax,8),%rdx\n    2688:\t00 \n    2689:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    268e:\t48 89 d1             \tmov    %rdx,%rcx\n    2691:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2696:\tbe 10 00 00 00       \tmov    $0x10,%esi\n    269b:\t48 89 c7             \tmov    %rax,%rdi\n    269e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    26a3:\te8 00 00 00 00       \tcallq  26a8 <dfa_decode_frame+0x516>\n    26a8:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n    26ad:\te9 35 02 00 00       \tjmpq   28e7 <dfa_decode_frame+0x755>\n    26b2:\t8b 94 24 b8 00 00 00 \tmov    0xb8(%rsp),%edx\n    26b9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    26be:\t89 d1                \tmov    %edx,%ecx\n    26c0:\tba 00 00 00 00       \tmov    $0x0,%edx\n    26c5:\tbe 18 00 00 00       \tmov    $0x18,%esi\n    26ca:\t48 89 c7             \tmov    %rax,%rdi\n    26cd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    26d2:\te8 00 00 00 00       \tcallq  26d7 <dfa_decode_frame+0x545>\n    26d7:\t8b 84 24 bc 00 00 00 \tmov    0xbc(%rsp),%eax\n    26de:\t48 01 84 24 e8 00 00 \tadd    %rax,0xe8(%rsp)\n    26e5:\t00 \n    26e6:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    26eb:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    26f0:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    26f5:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    26f9:\t48 8b 44 24 38       \tmov    0x38(%rsp),%rax\n    26fe:\t48 8b 00             \tmov    (%rax),%rax\n    2701:\t48 29 c2             \tsub    %rax,%rdx\n    2704:\t48 89 d0             \tmov    %rdx,%rax\n    2707:\t85 c0                \ttest   %eax,%eax\n    2709:\t0f 85 e7 fb ff ff    \tjne    22f6 <dfa_decode_frame+0x164>\n    270f:\teb 01                \tjmp    2712 <dfa_decode_frame+0x580>\n    2711:\t90                   \tnop\n    2712:\t48 8b 84 24 c8 00 00 \tmov    0xc8(%rsp),%rax\n    2719:\t00 \n    271a:\t48 8b 80 00 04 00 00 \tmov    0x400(%rax),%rax\n    2721:\t48 89 84 24 e8 00 00 \tmov    %rax,0xe8(%rsp)\n    2728:\t00 \n    2729:\t48 8b 84 24 d0 00 00 \tmov    0xd0(%rsp),%rax\n    2730:\t00 \n    2731:\t48 8b 00             \tmov    (%rax),%rax\n    2734:\t48 89 84 24 e0 00 00 \tmov    %rax,0xe0(%rsp)\n    273b:\t00 \n    273c:\tc7 84 24 dc 00 00 00 \tmovl   $0x0,0xdc(%rsp)\n    2743:\t00 00 00 00 \n    2747:\te9 4d 01 00 00       \tjmpq   2899 <dfa_decode_frame+0x707>\n    274c:\t81 bc 24 c4 00 00 00 \tcmpl   $0x100,0xc4(%rsp)\n    2753:\t00 01 00 00 \n    2757:\t0f 85 e1 00 00 00    \tjne    283e <dfa_decode_frame+0x6ac>\n    275d:\tc7 84 24 d8 00 00 00 \tmovl   $0x0,0xd8(%rsp)\n    2764:\t00 00 00 00 \n    2768:\te9 b7 00 00 00       \tjmpq   2824 <dfa_decode_frame+0x692>\n    276d:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    2774:\t83 e0 03             \tand    $0x3,%eax\n    2777:\t89 c1                \tmov    %eax,%ecx\n    2779:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    277e:\t8b 80 9c 00 00 00    \tmov    0x9c(%rax),%eax\n    2784:\t8d 50 03             \tlea    0x3(%rax),%edx\n    2787:\t85 c0                \ttest   %eax,%eax\n    2789:\t0f 48 c2             \tcmovs  %edx,%eax\n    278c:\tc1 f8 02             \tsar    $0x2,%eax\n    278f:\t0f af c8             \timul   %eax,%ecx\n    2792:\t89 ca                \tmov    %ecx,%edx\n    2794:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n    279b:\t8d 48 03             \tlea    0x3(%rax),%ecx\n    279e:\t85 c0                \ttest   %eax,%eax\n    27a0:\t0f 48 c1             \tcmovs  %ecx,%eax\n    27a3:\tc1 f8 02             \tsar    $0x2,%eax\n    27a6:\t8d 34 02             \tlea    (%rdx,%rax,1),%esi\n    27a9:\t8b 84 24 d8 00 00 00 \tmov    0xd8(%rsp),%eax\n    27b0:\t83 e0 03             \tand    $0x3,%eax\n    27b3:\t89 c1                \tmov    %eax,%ecx\n    27b5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    27ba:\t8b 80 a0 00 00 00    \tmov    0xa0(%rax),%eax\n    27c0:\t8d 50 03             \tlea    0x3(%rax),%edx\n    27c3:\t85 c0                \ttest   %eax,%eax\n    27c5:\t0f 48 c2             \tcmovs  %edx,%eax\n    27c8:\tc1 f8 02             \tsar    $0x2,%eax\n    27cb:\t0f af c8             \timul   %eax,%ecx\n    27ce:\t89 ca                \tmov    %ecx,%edx\n    27d0:\t8b 84 24 dc 00 00 00 \tmov    0xdc(%rsp),%eax\n    27d7:\t8d 48 03             \tlea    0x3(%rax),%ecx\n    27da:\t85 c0                \ttest   %eax,%eax\n    27dc:\t0f 48 c1             \tcmovs  %ecx,%eax\n    27df:\tc1 f8 02             \tsar    $0x2,%eax\n    27e2:\t01 c2                \tadd    %eax,%edx\n    27e4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    27e9:\t8b 80 9c 00 00 00    \tmov    0x9c(%rax),%eax\n    27ef:\t0f af c2             \timul   %edx,%eax\n    27f2:\t01 f0                \tadd    %esi,%eax\n    27f4:\t48 63 d0             \tmovslq %eax,%rdx\n    27f7:\t48 8b 84 24 e8 00 00 \tmov    0xe8(%rsp),%rax\n    27fe:\t00 \n    27ff:\t48 01 d0             \tadd    %rdx,%rax\n    2802:\t8b 94 24 d8 00 00 00 \tmov    0xd8(%rsp),%edx\n    2809:\t48 63 ca             \tmovslq %edx,%rcx\n    280c:\t48 8b 94 24 e0 00 00 \tmov    0xe0(%rsp),%rdx\n    2813:\t00 \n    2814:\t48 01 ca             \tadd    %rcx,%rdx\n    2817:\t0f b6 00             \tmovzbl (%rax),%eax\n    281a:\t88 02                \tmov    %al,(%rdx)\n    281c:\t83 84 24 d8 00 00 00 \taddl   $0x1,0xd8(%rsp)\n    2823:\t01 \n    2824:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2829:\t8b 80 9c 00 00 00    \tmov    0x9c(%rax),%eax\n    282f:\t39 84 24 d8 00 00 00 \tcmp    %eax,0xd8(%rsp)\n    2836:\t0f 8c 31 ff ff ff    \tjl     276d <dfa_decode_frame+0x5db>\n    283c:\teb 3e                \tjmp    287c <dfa_decode_frame+0x6ea>\n    283e:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    2843:\t8b 80 9c 00 00 00    \tmov    0x9c(%rax),%eax\n    2849:\t48 63 d0             \tmovslq %eax,%rdx\n    284c:\t48 8b 8c 24 e8 00 00 \tmov    0xe8(%rsp),%rcx\n    2853:\t00 \n    2854:\t48 8b 84 24 e0 00 00 \tmov    0xe0(%rsp),%rax\n    285b:\t00 \n    285c:\t48 89 ce             \tmov    %rcx,%rsi\n    285f:\t48 89 c7             \tmov    %rax,%rdi\n    2862:\te8 00 00 00 00       \tcallq  2867 <dfa_decode_frame+0x6d5>\n    2867:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    286c:\t8b 80 9c 00 00 00    \tmov    0x9c(%rax),%eax\n    2872:\t48 98                \tcltq   \n    2874:\t48 01 84 24 e8 00 00 \tadd    %rax,0xe8(%rsp)\n    287b:\t00 \n    287c:\t48 8b 84 24 d0 00 00 \tmov    0xd0(%rsp),%rax\n    2883:\t00 \n    2884:\t8b 40 40             \tmov    0x40(%rax),%eax\n    2887:\t48 98                \tcltq   \n    2889:\t48 01 84 24 e0 00 00 \tadd    %rax,0xe0(%rsp)\n    2890:\t00 \n    2891:\t83 84 24 dc 00 00 00 \taddl   $0x1,0xdc(%rsp)\n    2898:\t01 \n    2899:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    289e:\t8b 80 a0 00 00 00    \tmov    0xa0(%rax),%eax\n    28a4:\t39 84 24 dc 00 00 00 \tcmp    %eax,0xdc(%rsp)\n    28ab:\t0f 8c 9b fe ff ff    \tjl     274c <dfa_decode_frame+0x5ba>\n    28b1:\t48 8b 8c 24 c8 00 00 \tmov    0xc8(%rsp),%rcx\n    28b8:\t00 \n    28b9:\t48 8b 84 24 d0 00 00 \tmov    0xd0(%rsp),%rax\n    28c0:\t00 \n    28c1:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    28c5:\tba 00 04 00 00       \tmov    $0x400,%edx\n    28ca:\t48 89 ce             \tmov    %rcx,%rsi\n    28cd:\t48 89 c7             \tmov    %rax,%rdi\n    28d0:\te8 00 00 00 00       \tcallq  28d5 <dfa_decode_frame+0x743>\n    28d5:\t48 8b 44 24 08       \tmov    0x8(%rsp),%rax\n    28da:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n    28e0:\t48 8b 04 24          \tmov    (%rsp),%rax\n    28e4:\t8b 40 20             \tmov    0x20(%rax),%eax\n    28e7:\t48 81 c4 f8 00 00 00 \tadd    $0xf8,%rsp\n    28ee:\tc3                   \tretq   ", "code_s": "__int64 __fastcall dfa_decode_frame(__int64 a1, __int64 a2, _DWORD *a3,\n                                    __int64 a4) {\n  int v4;\n  int v6;\n  __int64 v7;\n  unsigned __int64 v8;\n  unsigned int v9;\n  unsigned int v10;\n  unsigned int v11;\n  int v12;\n  __int64 <span class=\"supfact\">v15</span>;\n  __int64 v16;\n  __int64 *v17;\n  __int64 *v18;\n  __int64 *v19;\n  __int64 *v20;\n  unsigned int v21;\n  __int64 *v22;\n  __int64 *v23;\n  __int64 *v24;\n  __int64 *v25;\n  __int64 *v26;\n  __int64 *v27;\n  __int64 *v28;\n  int v29;\n  __int64 v30;\n  __int64 *v31;\n  int v32;\n  unsigned int v33;\n  unsigned int v34;\n  unsigned int v35;\n  int v36;\n  void *v37;\n  __int64 v38;\n  int j;\n  int i;\n  void *dest;\n  void *src;\n  v38 = a2;\n  v37 = *(void **)(a1 + Number);\n  src = *(void **)(a4 + Number);\n  if (*(_DWORD *)(a1 + Number) == Number)\n    v4 = **(unsigned __int16 **)(a1 + Number);\n  else\n    v4 = Number;\n  v36 = v4;\n  v35 = ff_get_buffer(a1, v38, Number L);\n  if ((v35 & Number) != Number)\n    return v35;\n  v6 = *(_DWORD *)(a4 + Number);\n  v7 = *(_QWORD *)(a4 + Number);\n  v31 = &<span class=\"supfact\">v15</span>;\n  v30 = v7;\n  v29 = v6;\n  if (v6 < Number) {\n    av_log(Number L, Number L, String, String, String, Number L);\n    abort();\n  }\n  *v31 = v30;\n  v31[Number] = v30;\n  v31[Number] = v30 + v29;\n  while (Number) {\n    v17 = &<span class=\"supfact\">v15</span>;\n    if ((_DWORD)v16 == (_DWORD)<span class=\"supfact\">v15</span>)\n      break;\n    v22 = &<span class=\"supfact\">v15</span>;\n    v21 = Number;\n    v8 = v16 - <span class=\"supfact\">v15</span> <= Number ? v22[Number] - *v22\n                                             : (unsigned __int64)v21;\n    *v22 = v8 + <span class=\"supfact\">v15</span>;\n    v25 = &<span class=\"supfact\">v15</span>;\n    if (v16 - <span class=\"supfact\">v15</span> > Number) {\n      v24 = v25;\n      v23 = v25;\n      *v25 += Number L;\n      v9 = *(_DWORD *)(*v23 - Number);\n    } else {\n      *v25 = v25[Number];\n      v9 = Number;\n    }\n    v34 = v9;\n    v28 = &<span class=\"supfact\">v15</span>;\n    if (v16 - <span class=\"supfact\">v15</span> > Number) {\n      v27 = v28;\n      v26 = v28;\n      *v28 += Number L;\n      v10 = *(_DWORD *)(*v26 - Number);\n    } else {\n      *v28 = v28[Number];\n      v10 = Number;\n    }\n    v33 = v10;\n    if (!v10)\n      break;\n    if (v33 == Number) {\n      if (v34 > Number)\n        v11 = Number;\n      else\n        v11 = v34 / Number;\n      v32 = v11;\n      for (i = Number; i < v32; ++i) {\n        v20 = &<span class=\"supfact\">v15</span>;\n        if (v16 - <span class=\"supfact\">v15</span> > Number) {\n          v19 = v20;\n          v18 = v20;\n          *v20 += Number L;\n          v12 = (*(unsigned __int8 *)(*v18 - Number) << Number) |\n                (*(unsigned __int8 *)(*v18 - Number) << Number) |\n                *(unsigned __int8 *)(*v18 - Number);\n        } else {\n          *v20 = v20[Number];\n          v12 = Number;\n        }\n        *((_DWORD *)v37 + i) = Number * v12;\n        *((_DWORD *)v37 + i) |=\n            (*((_DWORD *)v37 + i) >> Number) & Number | Number;\n      }\n      *(_DWORD *)(v38 + Number) = Number;\n    } else if (v33 > Number) {\n      av_log(a1, Number L, String, v33);\n    } else if (((unsigned int(__fastcall *)(__int64, void *, int,\n                                            int))decoder[v33 - Number])(\n                   (__int64)&<span class=\"supfact\">v15</span>, *((void **)v37 + Number),\n                   *(_DWORD *)(a1 + Number), *(_DWORD *)(a1 + Number))) {\n      av_log(a1, Number L, String, chunk_name[v33 - Number]);\n      return Number L;\n    }\n    src = (char *)src + v34;\n  }\n  src = (void *)*((_QWORD *)v37 + Number);\n  dest = *(void **)v38;\n  for (i = Number; i < *(_DWORD *)(a1 + Number); ++i) {\n    if (v36 == Number) {\n      for (j = Number; j < *(_DWORD *)(a1 + Number); ++j)\n        *((_BYTE *)dest + j) =\n            *((_BYTE *)src + *(_DWORD *)(a1 + Number) / Number * (i & Number) +\n              j / Number +\n              (i / Number + *(_DWORD *)(a1 + Number) / Number * (j & Number)) *\n                  *(_DWORD *)(a1 + Number));\n    } else {\n      memcpy(dest, src, *(int *)(a1 + Number));\n      src = (char *)src + *(int *)(a1 + Number);\n    }\n    dest = (char *)dest + *(int *)(v38 + Number);\n  }\n  memcpy(*(void **)(v38 + Number), v37, Number);\n  *a3 = Number;\n  return *(unsigned int *)(a4 + Number);\n}", "code_t": "int __cdecl dfa_decode_frame(AVCodecContext_0 *avctx, void *data,\n                             int *got_frame, AVPacket_0 *avpkt) {\n  int v4;\n  int v6;\n  uint8_t *v7;\n  unsigned __int64 v8;\n  uint32_t v9;\n  uint32_t v10;\n  int v11;\n  int v12;\n  GetByteContext_0 <span class=\"supfact\">gb</span>;\n  GetByteContext_0 *v16;\n  GetByteContext_0 *v17;\n  GetByteContext_0 *v18;\n  GetByteContext_0 *v19;\n  unsigned int v20;\n  GetByteContext_0 *v21;\n  GetByteContext_0 *v22;\n  GetByteContext_0 *v23;\n  GetByteContext_0 *v24;\n  GetByteContext_0 *v25;\n  GetByteContext_0 *v26;\n  GetByteContext_0 *v27;\n  int v28;\n  uint8_t *v29;\n  GetByteContext_0 *v30;\n  int pal_elems;\n  uint32_t chunk_type;\n  uint32_t chunk_size;\n  int ret;\n  int version;\n  DfaContext_0 *s;\n  AVFrame_0 *frame;\n  int j;\n  int i;\n  uint8_t *dst;\n  const uint8_t *buf;\n  frame = (AVFrame_0 *)data;\n  s = (DfaContext_0 *)avctx->priv_data;\n  buf = avpkt->data;\n  if (avctx->extradata_size == Number)\n    v4 = *(unsigned __int16 *)avctx->extradata;\n  else\n    v4 = Number;\n  version = v4;\n  ret = ff_get_buffer(avctx, frame, Number L);\n  if (ret < Number)\n    return ret;\n  v6 = avpkt->size;\n  v7 = avpkt->data;\n  v30 = &<span class=\"supfact\">gb</span>;\n  v29 = v7;\n  v28 = v6;\n  if (v6 < Number) {\n    av_log(Number L, Number L, String, String, String, Number L);\n    abort();\n  }\n  v30->buffer = v29;\n  v30->buffer_start = v29;\n  v30->buffer_end = &v29[v28];\n  while (Number) {\n    v16 = &<span class=\"supfact\">gb</span>;\n    if (LODWORD(<span class=\"supfact\">gb</span>.buffer_end) ==\n        LODWORD(<span class=\"supfact\">gb</span>.buffer))\n      break;\n    v21 = &<span class=\"supfact\">gb</span>;\n    v20 = Number;\n    v8 = <span class=\"supfact\">gb</span>.buffer_end - <span class=\"supfact\">gb</span>.buffer <= Number\n             ? v21->buffer_end - v21->buffer\n             : (unsigned __int64)v20;\n    v21->buffer = &<span class=\"supfact\">gb</span>.buffer[v8];\n    v24 = &<span class=\"supfact\">gb</span>;\n    if (<span class=\"supfact\">gb</span>.buffer_end - <span class=\"supfact\">gb</span>.buffer > Number) {\n      v23 = v24;\n      v22 = v24;\n      v24->buffer += Number;\n      v9 = *((_DWORD *)v22->buffer - Number);\n    } else {\n      v24->buffer = v24->buffer_end;\n      v9 = Number;\n    }\n    chunk_size = v9;\n    v27 = &<span class=\"supfact\">gb</span>;\n    if (<span class=\"supfact\">gb</span>.buffer_end - <span class=\"supfact\">gb</span>.buffer > Number) {\n      v26 = v27;\n      v25 = v27;\n      v27->buffer += Number;\n      v10 = *((_DWORD *)v25->buffer - Number);\n    } else {\n      v27->buffer = v27->buffer_end;\n      v10 = Number;\n    }\n    chunk_type = v10;\n    if (!v10)\n      break;\n    if (chunk_type == Number) {\n      if (chunk_size > Number)\n        v11 = Number;\n      else\n        v11 = chunk_size / Number;\n      pal_elems = v11;\n      for (i = Number; i < pal_elems; ++i) {\n        v19 = &<span class=\"supfact\">gb</span>;\n        if (<span class=\"supfact\">gb</span>.buffer_end - <span class=\"supfact\">gb</span>.buffer >\n            Number) {\n          v18 = v19;\n          v17 = v19;\n          v19->buffer += Number;\n          v12 = (*((unsigned __int8 *)v17->buffer - Number) << Number) |\n                (*((unsigned __int8 *)v17->buffer - Number) << Number) |\n                *((unsigned __int8 *)v17->buffer - Number);\n        } else {\n          v19->buffer = v19->buffer_end;\n          v12 = Number;\n        }\n        s->pal[i] = Number * v12;\n        s->pal[i] |= (s->pal[i] >> Number) & Number | Number;\n      }\n      frame->palette_has_changed = Number;\n    } else if (chunk_type > Number) {\n      av_log(avctx, Number L, String, chunk_type);\n    } else if (((int(__cdecl *)(GetByteContext_0 *, uint8_t *, int,\n                                int))decoder[chunk_type - Number])(\n                   &<span class=\"supfact\">gb</span>, s->frame_buf, avctx->width,\n                   avctx->height)) {\n      av_log(avctx, Number L, String, chunk_name[chunk_type - Number]);\n      return Number;\n    }\n    buf += chunk_size;\n  }\n  buf = s->frame_buf;\n  dst = frame->data[Number];\n  for (i = Number; i < avctx->height; ++i) {\n    if (version == Number) {\n      for (j = Number; j < avctx->width; ++j)\n        dst[j] = buf[avctx->width / Number * (i & Number) + j / Number +\n                     (i / Number + avctx->height / Number * (j & Number)) *\n                         avctx->width];\n    } else {\n      memcpy(dst, buf, avctx->width);\n      buf += avctx->width;\n    }\n    dst += frame->linesize[Number];\n  }\n  memcpy(frame->data[Number], s, Number);\n  *got_frame = Number;\n  return avpkt->size;\n}", "var": [{"name": "v15", "type": "struct GetByteContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; const uint8_t * buffer_start; }", "pred_name": "gb", "ref_name": "gb", "ref_type": "struct GetByteContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; const uint8_t * buffer_start; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/9e6df9e2c631c4399a2b510a69f5d4ebb48e9c7572d8214e1855d3510300d8d8", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/shanghai.o", "objdump": "0000000000001906 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring>:\n    1906:\t55                   \tpush   %rbp\n    1907:\t48 89 e5             \tmov    %rsp,%rbp\n    190a:\t53                   \tpush   %rbx\n    190b:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    1912:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    1916:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n    191a:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    1921:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    1925:\t48 89 c7             \tmov    %rax,%rdi\n    1928:\te8 00 00 00 00       \tcallq  192d <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n    192d:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1934:\t00 \n    1935:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    193c:\t00 \n    193d:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    1944:\t00 \n    1945:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    194c:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    1950:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    1954:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1959:\t48 89 ce             \tmov    %rcx,%rsi\n    195c:\t48 89 c7             \tmov    %rax,%rdi\n    195f:\te8 00 00 00 00       \tcallq  1964 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x5e>\n    1964:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1968:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    196f:\t00 \n    1970:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1977:\t00 \n    1978:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    197f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1983:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1989:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    198e:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1993:\tbe 2f 00 00 00       \tmov    $0x2f,%esi\n    1998:\t48 89 c7             \tmov    %rax,%rdi\n    199b:\te8 00 00 00 00       \tcallq  19a0 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x9a>\n    19a0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    19a4:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    19ab:\t00 \n    19ac:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    19b0:\tc6 80 f0 01 00 00 08 \tmovb   $0x8,0x1f0(%rax)\n    19b7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    19bb:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    19c1:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n    19c6:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    19cb:\tbe 30 00 00 00       \tmov    $0x30,%esi\n    19d0:\t48 89 c7             \tmov    %rax,%rdi\n    19d3:\te8 00 00 00 00       \tcallq  19d8 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xd2>\n    19d8:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    19dc:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    19e3:\t00 \n    19e4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    19e8:\tc6 80 f0 01 00 00 08 \tmovb   $0x8,0x1f0(%rax)\n    19ef:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    19f3:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    19f9:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n    19fe:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1a03:\tbe 31 00 00 00       \tmov    $0x31,%esi\n    1a08:\t48 89 c7             \tmov    %rax,%rdi\n    1a0b:\te8 00 00 00 00       \tcallq  1a10 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x10a>\n    1a10:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1a14:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1a1b:\t00 \n    1a1c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1a20:\tc6 80 f0 01 00 00 08 \tmovb   $0x8,0x1f0(%rax)\n    1a27:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1a2b:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1a31:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n    1a36:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1a3b:\tbe 32 00 00 00       \tmov    $0x32,%esi\n    1a40:\t48 89 c7             \tmov    %rax,%rdi\n    1a43:\te8 00 00 00 00       \tcallq  1a48 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x142>\n    1a48:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1a4c:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1a53:\t00 \n    1a54:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1a58:\tc6 80 f0 01 00 00 08 \tmovb   $0x8,0x1f0(%rax)\n    1a5f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1a63:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1a69:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    1a6e:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1a73:\tbe 3b 00 00 00       \tmov    $0x3b,%esi\n    1a78:\t48 89 c7             \tmov    %rax,%rdi\n    1a7b:\te8 00 00 00 00       \tcallq  1a80 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x17a>\n    1a80:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1a84:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1a8b:\t00 \n    1a8c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1a90:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1a96:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n    1a9b:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1aa0:\tbe 3c 00 00 00       \tmov    $0x3c,%esi\n    1aa5:\t48 89 c7             \tmov    %rax,%rdi\n    1aa8:\te8 00 00 00 00       \tcallq  1aad <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x1a7>\n    1aad:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1ab1:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1ab8:\t00 \n    1ab9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1abd:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1ac3:\tb9 40 00 00 00       \tmov    $0x40,%ecx\n    1ac8:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1acd:\tbe 3d 00 00 00       \tmov    $0x3d,%esi\n    1ad2:\t48 89 c7             \tmov    %rax,%rdi\n    1ad5:\te8 00 00 00 00       \tcallq  1ada <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x1d4>\n    1ada:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1ade:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1ae5:\t00 \n    1ae6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1aea:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1af0:\tb9 80 00 00 00       \tmov    $0x80,%ecx\n    1af5:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1afa:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    1aff:\t48 89 c7             \tmov    %rax,%rdi\n    1b02:\te8 00 00 00 00       \tcallq  1b07 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x201>\n    1b07:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1b0b:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1b12:\t00 \n    1b13:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    1b17:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    1b1b:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b20:\t48 89 ce             \tmov    %rcx,%rsi\n    1b23:\t48 89 c7             \tmov    %rax,%rdi\n    1b26:\te8 00 00 00 00       \tcallq  1b2b <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x225>\n    1b2b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1b2f:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    1b36:\t00 \n    1b37:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1b3e:\t00 \n    1b3f:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    1b46:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1b4a:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1b50:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    1b55:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1b5a:\tbe 2f 00 00 00       \tmov    $0x2f,%esi\n    1b5f:\t48 89 c7             \tmov    %rax,%rdi\n    1b62:\te8 00 00 00 00       \tcallq  1b67 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x261>\n    1b67:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1b6b:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1b72:\t00 \n    1b73:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1b77:\tc6 80 f0 01 00 00 08 \tmovb   $0x8,0x1f0(%rax)\n    1b7e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1b82:\t8b 40 28             \tmov    0x28(%rax),%eax\n    1b85:\t83 c8 02             \tor     $0x2,%eax\n    1b88:\t89 c2                \tmov    %eax,%edx\n    1b8a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1b8e:\t89 50 28             \tmov    %edx,0x28(%rax)\n    1b91:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1b95:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n    1b99:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1b9d:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1ba3:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n    1ba8:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1bad:\tbe 30 00 00 00       \tmov    $0x30,%esi\n    1bb2:\t48 89 c7             \tmov    %rax,%rdi\n    1bb5:\te8 00 00 00 00       \tcallq  1bba <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x2b4>\n    1bba:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1bbe:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1bc5:\t00 \n    1bc6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1bca:\tc6 80 f0 01 00 00 08 \tmovb   $0x8,0x1f0(%rax)\n    1bd1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1bd5:\t8b 40 28             \tmov    0x28(%rax),%eax\n    1bd8:\t83 c8 02             \tor     $0x2,%eax\n    1bdb:\t89 c2                \tmov    %eax,%edx\n    1bdd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1be1:\t89 50 28             \tmov    %edx,0x28(%rax)\n    1be4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1be8:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n    1bec:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1bf0:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1bf6:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n    1bfb:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1c00:\tbe 31 00 00 00       \tmov    $0x31,%esi\n    1c05:\t48 89 c7             \tmov    %rax,%rdi\n    1c08:\te8 00 00 00 00       \tcallq  1c0d <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x307>\n    1c0d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1c11:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1c18:\t00 \n    1c19:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c1d:\tc6 80 f0 01 00 00 08 \tmovb   $0x8,0x1f0(%rax)\n    1c24:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c28:\t8b 40 28             \tmov    0x28(%rax),%eax\n    1c2b:\t83 c8 02             \tor     $0x2,%eax\n    1c2e:\t89 c2                \tmov    %eax,%edx\n    1c30:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c34:\t89 50 28             \tmov    %edx,0x28(%rax)\n    1c37:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c3b:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n    1c3f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c43:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1c49:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n    1c4e:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1c53:\tbe 32 00 00 00       \tmov    $0x32,%esi\n    1c58:\t48 89 c7             \tmov    %rax,%rdi\n    1c5b:\te8 00 00 00 00       \tcallq  1c60 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x35a>\n    1c60:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1c64:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1c6b:\t00 \n    1c6c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c70:\tc6 80 f0 01 00 00 08 \tmovb   $0x8,0x1f0(%rax)\n    1c77:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c7b:\t8b 40 28             \tmov    0x28(%rax),%eax\n    1c7e:\t83 c8 02             \tor     $0x2,%eax\n    1c81:\t89 c2                \tmov    %eax,%edx\n    1c83:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c87:\t89 50 28             \tmov    %edx,0x28(%rax)\n    1c8a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c8e:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n    1c92:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c96:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1c9c:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    1ca1:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1ca6:\tbe 3b 00 00 00       \tmov    $0x3b,%esi\n    1cab:\t48 89 c7             \tmov    %rax,%rdi\n    1cae:\te8 00 00 00 00       \tcallq  1cb3 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x3ad>\n    1cb3:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1cb7:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1cbe:\t00 \n    1cbf:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1cc3:\t8b 40 28             \tmov    0x28(%rax),%eax\n    1cc6:\t83 c8 02             \tor     $0x2,%eax\n    1cc9:\t89 c2                \tmov    %eax,%edx\n    1ccb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1ccf:\t89 50 28             \tmov    %edx,0x28(%rax)\n    1cd2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1cd6:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n    1cda:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1cde:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1ce4:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n    1ce9:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1cee:\tbe 3c 00 00 00       \tmov    $0x3c,%esi\n    1cf3:\t48 89 c7             \tmov    %rax,%rdi\n    1cf6:\te8 00 00 00 00       \tcallq  1cfb <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x3f5>\n    1cfb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1cff:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1d06:\t00 \n    1d07:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1d0b:\t8b 40 28             \tmov    0x28(%rax),%eax\n    1d0e:\t83 c8 02             \tor     $0x2,%eax\n    1d11:\t89 c2                \tmov    %eax,%edx\n    1d13:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1d17:\t89 50 28             \tmov    %edx,0x28(%rax)\n    1d1a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1d1e:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n    1d22:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1d26:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1d2c:\tb9 40 00 00 00       \tmov    $0x40,%ecx\n    1d31:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1d36:\tbe 3d 00 00 00       \tmov    $0x3d,%esi\n    1d3b:\t48 89 c7             \tmov    %rax,%rdi\n    1d3e:\te8 00 00 00 00       \tcallq  1d43 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x43d>\n    1d43:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1d47:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1d4e:\t00 \n    1d4f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1d53:\t8b 40 28             \tmov    0x28(%rax),%eax\n    1d56:\t83 c8 02             \tor     $0x2,%eax\n    1d59:\t89 c2                \tmov    %eax,%edx\n    1d5b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1d5f:\t89 50 28             \tmov    %edx,0x28(%rax)\n    1d62:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1d66:\tc6 40 24 01          \tmovb   $0x1,0x24(%rax)\n    1d6a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1d6e:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1d74:\tb9 80 00 00 00       \tmov    $0x80,%ecx\n    1d79:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1d7e:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    1d83:\t48 89 c7             \tmov    %rax,%rdi\n    1d86:\te8 00 00 00 00       \tcallq  1d8b <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x485>\n    1d8b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1d8f:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1d96:\t00 \n    1d97:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    1d9b:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    1d9f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1da4:\t48 89 ce             \tmov    %rcx,%rsi\n    1da7:\t48 89 c7             \tmov    %rax,%rdi\n    1daa:\te8 00 00 00 00       \tcallq  1daf <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x4a9>\n    1daf:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1db3:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    1dba:\t00 \n    1dbb:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1dc2:\t00 \n    1dc3:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    1dca:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1dce:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1dd4:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    1dd9:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1dde:\tbe 11 00 00 00       \tmov    $0x11,%esi\n    1de3:\t48 89 c7             \tmov    %rax,%rdi\n    1de6:\te8 00 00 00 00       \tcallq  1deb <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x4e5>\n    1deb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1def:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1df6:\t00 \n    1df7:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1dfb:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1e01:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n    1e06:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1e0b:\tbe 12 00 00 00       \tmov    $0x12,%esi\n    1e10:\t48 89 c7             \tmov    %rax,%rdi\n    1e13:\te8 00 00 00 00       \tcallq  1e18 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x512>\n    1e18:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1e1c:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1e23:\t00 \n    1e24:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1e28:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1e2e:\tb9 04 00 00 00       \tmov    $0x4,%ecx\n    1e33:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1e38:\tbe 13 00 00 00       \tmov    $0x13,%esi\n    1e3d:\t48 89 c7             \tmov    %rax,%rdi\n    1e40:\te8 00 00 00 00       \tcallq  1e45 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x53f>\n    1e45:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1e49:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1e50:\t00 \n    1e51:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1e55:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1e5b:\tb9 08 00 00 00       \tmov    $0x8,%ecx\n    1e60:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1e65:\tbe 09 00 00 00       \tmov    $0x9,%esi\n    1e6a:\t48 89 c7             \tmov    %rax,%rdi\n    1e6d:\te8 00 00 00 00       \tcallq  1e72 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x56c>\n    1e72:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1e76:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1e7d:\t00 \n    1e7e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1e82:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1e88:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    1e8d:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1e92:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n    1e97:\t48 89 c7             \tmov    %rax,%rdi\n    1e9a:\te8 00 00 00 00       \tcallq  1e9f <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x599>\n    1e9f:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1ea3:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1eaa:\t00 \n    1eab:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1eaf:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1eb5:\tb9 20 00 00 00       \tmov    $0x20,%ecx\n    1eba:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1ebf:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    1ec4:\t48 89 c7             \tmov    %rax,%rdi\n    1ec7:\te8 00 00 00 00       \tcallq  1ecc <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x5c6>\n    1ecc:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1ed0:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1ed7:\t00 \n    1ed8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1edc:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1ee2:\tb9 40 00 00 00       \tmov    $0x40,%ecx\n    1ee7:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1eec:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    1ef1:\t48 89 c7             \tmov    %rax,%rdi\n    1ef4:\te8 00 00 00 00       \tcallq  1ef9 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x5f3>\n    1ef9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1efd:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1f04:\t00 \n    1f05:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1f09:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1f0f:\tb9 80 00 00 00       \tmov    $0x80,%ecx\n    1f14:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1f19:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    1f1e:\t48 89 c7             \tmov    %rax,%rdi\n    1f21:\te8 00 00 00 00       \tcallq  1f26 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x620>\n    1f26:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1f2a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1f31:\t00 \n    1f32:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    1f36:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    1f3a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1f3f:\t48 89 ce             \tmov    %rcx,%rsi\n    1f42:\t48 89 c7             \tmov    %rax,%rdi\n    1f45:\te8 00 00 00 00       \tcallq  1f4a <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x644>\n    1f4a:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1f4e:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    1f55:\t00 \n    1f56:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1f5d:\t00 \n    1f5e:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    1f65:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    1f6c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1f70:\t49 89 d1             \tmov    %rdx,%r9\n    1f73:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    1f79:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    1f7e:\tba ff ff ff ff       \tmov    $0xffffffff,%edx\n    1f83:\tbe 33 00 00 00       \tmov    $0x33,%esi\n    1f88:\t48 89 c7             \tmov    %rax,%rdi\n    1f8b:\te8 00 00 00 00       \tcallq  1f90 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x68a>\n    1f90:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1f94:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1f9b:\t00 \n    1f9c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1fa0:\t41 b8 69 00 00 00    \tmov    $0x69,%r8d\n    1fa6:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n    1fab:\tba 02 00 00 00       \tmov    $0x2,%edx\n    1fb0:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    1fb5:\t48 89 c7             \tmov    %rax,%rdi\n    1fb8:\te8 00 00 00 00       \tcallq  1fbd <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x6b7>\n    1fbd:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1fc1:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    1fc8:\t00 \n    1fc9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1fcd:\tba 03 00 00 00       \tmov    $0x3,%edx\n    1fd2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1fd7:\t48 89 c7             \tmov    %rax,%rdi\n    1fda:\te8 00 00 00 00       \tcallq  1fdf <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x6d9>\n    1fdf:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1fe3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1fe7:\t8b 00                \tmov    (%rax),%eax\n    1fe9:\t83 e0 02             \tand    $0x2,%eax\n    1fec:\t89 c1                \tmov    %eax,%ecx\n    1fee:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1ff2:\tba 04 00 00 00       \tmov    $0x4,%edx\n    1ff7:\t89 ce                \tmov    %ecx,%esi\n    1ff9:\t48 89 c7             \tmov    %rax,%rdi\n    1ffc:\te8 00 00 00 00       \tcallq  2001 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x6fb>\n    2001:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2005:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2009:\t41 b8 0b 00 00 00    \tmov    $0xb,%r8d\n    200f:\tb9 1c 00 00 00       \tmov    $0x1c,%ecx\n    2014:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    2019:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    201e:\t48 89 c7             \tmov    %rax,%rdi\n    2021:\te8 00 00 00 00       \tcallq  2026 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x720>\n    2026:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    202a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    2031:\t00 \n    2032:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2036:\tba 10 00 00 00       \tmov    $0x10,%edx\n    203b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2040:\t48 89 c7             \tmov    %rax,%rdi\n    2043:\te8 00 00 00 00       \tcallq  2048 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x742>\n    2048:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    204c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2050:\t8b 00                \tmov    (%rax),%eax\n    2052:\t83 e0 04             \tand    $0x4,%eax\n    2055:\t89 c1                \tmov    %eax,%ecx\n    2057:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    205b:\tba 11 00 00 00       \tmov    $0x11,%edx\n    2060:\t89 ce                \tmov    %ecx,%esi\n    2062:\t48 89 c7             \tmov    %rax,%rdi\n    2065:\te8 00 00 00 00       \tcallq  206a <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x764>\n    206a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    206e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2072:\t8b 00                \tmov    (%rax),%eax\n    2074:\t83 e0 08             \tand    $0x8,%eax\n    2077:\t89 c1                \tmov    %eax,%ecx\n    2079:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    207d:\tba 12 00 00 00       \tmov    $0x12,%edx\n    2082:\t89 ce                \tmov    %ecx,%esi\n    2084:\t48 89 c7             \tmov    %rax,%rdi\n    2087:\te8 00 00 00 00       \tcallq  208c <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x786>\n    208c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2090:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2094:\t8b 00                \tmov    (%rax),%eax\n    2096:\t83 e0 0c             \tand    $0xc,%eax\n    2099:\t89 c1                \tmov    %eax,%ecx\n    209b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    209f:\tba 15 00 00 00       \tmov    $0x15,%edx\n    20a4:\t89 ce                \tmov    %ecx,%esi\n    20a6:\t48 89 c7             \tmov    %rax,%rdi\n    20a9:\te8 00 00 00 00       \tcallq  20ae <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x7a8>\n    20ae:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    20b2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    20b6:\t8b 00                \tmov    (%rax),%eax\n    20b8:\t83 e0 1c             \tand    $0x1c,%eax\n    20bb:\t89 c1                \tmov    %eax,%ecx\n    20bd:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    20c1:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    20c6:\t89 ce                \tmov    %ecx,%esi\n    20c8:\t48 89 c7             \tmov    %rax,%rdi\n    20cb:\te8 00 00 00 00       \tcallq  20d0 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x7ca>\n    20d0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    20d4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    20d8:\t8b 00                \tmov    (%rax),%eax\n    20da:\t83 e0 18             \tand    $0x18,%eax\n    20dd:\t89 c1                \tmov    %eax,%ecx\n    20df:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    20e3:\tba 22 00 00 00       \tmov    $0x22,%edx\n    20e8:\t89 ce                \tmov    %ecx,%esi\n    20ea:\t48 89 c7             \tmov    %rax,%rdi\n    20ed:\te8 00 00 00 00       \tcallq  20f2 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x7ec>\n    20f2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    20f6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    20fa:\t8b 00                \tmov    (%rax),%eax\n    20fc:\t83 e0 14             \tand    $0x14,%eax\n    20ff:\t89 c1                \tmov    %eax,%ecx\n    2101:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2105:\tba 25 00 00 00       \tmov    $0x25,%edx\n    210a:\t89 ce                \tmov    %ecx,%esi\n    210c:\t48 89 c7             \tmov    %rax,%rdi\n    210f:\te8 00 00 00 00       \tcallq  2114 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x80e>\n    2114:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2118:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    211c:\t8b 00                \tmov    (%rax),%eax\n    211e:\t83 e0 10             \tand    $0x10,%eax\n    2121:\t89 c1                \tmov    %eax,%ecx\n    2123:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2127:\tba 28 00 00 00       \tmov    $0x28,%edx\n    212c:\t89 ce                \tmov    %ecx,%esi\n    212e:\t48 89 c7             \tmov    %rax,%rdi\n    2131:\te8 00 00 00 00       \tcallq  2136 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x830>\n    2136:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    213a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    213e:\t41 b8 0a 00 00 00    \tmov    $0xa,%r8d\n    2144:\tb9 e0 00 00 00       \tmov    $0xe0,%ecx\n    2149:\tba e0 00 00 00       \tmov    $0xe0,%edx\n    214e:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    2153:\t48 89 c7             \tmov    %rax,%rdi\n    2156:\te8 00 00 00 00       \tcallq  215b <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x855>\n    215b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    215f:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    2166:\t00 \n    2167:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    216b:\tba 10 00 00 00       \tmov    $0x10,%edx\n    2170:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2175:\t48 89 c7             \tmov    %rax,%rdi\n    2178:\te8 00 00 00 00       \tcallq  217d <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x877>\n    217d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2181:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2185:\t8b 00                \tmov    (%rax),%eax\n    2187:\t83 e0 20             \tand    $0x20,%eax\n    218a:\t89 c1                \tmov    %eax,%ecx\n    218c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2190:\tba 11 00 00 00       \tmov    $0x11,%edx\n    2195:\t89 ce                \tmov    %ecx,%esi\n    2197:\t48 89 c7             \tmov    %rax,%rdi\n    219a:\te8 00 00 00 00       \tcallq  219f <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x899>\n    219f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    21a3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    21a7:\t8b 00                \tmov    (%rax),%eax\n    21a9:\t83 e0 40             \tand    $0x40,%eax\n    21ac:\t89 c1                \tmov    %eax,%ecx\n    21ae:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    21b2:\tba 12 00 00 00       \tmov    $0x12,%edx\n    21b7:\t89 ce                \tmov    %ecx,%esi\n    21b9:\t48 89 c7             \tmov    %rax,%rdi\n    21bc:\te8 00 00 00 00       \tcallq  21c1 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x8bb>\n    21c1:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    21c5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    21c9:\t8b 00                \tmov    (%rax),%eax\n    21cb:\t83 e0 60             \tand    $0x60,%eax\n    21ce:\t89 c1                \tmov    %eax,%ecx\n    21d0:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    21d4:\tba 15 00 00 00       \tmov    $0x15,%edx\n    21d9:\t89 ce                \tmov    %ecx,%esi\n    21db:\t48 89 c7             \tmov    %rax,%rdi\n    21de:\te8 00 00 00 00       \tcallq  21e3 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x8dd>\n    21e3:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    21e7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    21eb:\t8b 00                \tmov    (%rax),%eax\n    21ed:\t25 e0 00 00 00       \tand    $0xe0,%eax\n    21f2:\t89 c1                \tmov    %eax,%ecx\n    21f4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    21f8:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    21fd:\t89 ce                \tmov    %ecx,%esi\n    21ff:\t48 89 c7             \tmov    %rax,%rdi\n    2202:\te8 00 00 00 00       \tcallq  2207 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x901>\n    2207:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    220b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    220f:\t8b 00                \tmov    (%rax),%eax\n    2211:\t25 c0 00 00 00       \tand    $0xc0,%eax\n    2216:\t89 c1                \tmov    %eax,%ecx\n    2218:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    221c:\tba 22 00 00 00       \tmov    $0x22,%edx\n    2221:\t89 ce                \tmov    %ecx,%esi\n    2223:\t48 89 c7             \tmov    %rax,%rdi\n    2226:\te8 00 00 00 00       \tcallq  222b <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x925>\n    222b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    222f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2233:\t8b 00                \tmov    (%rax),%eax\n    2235:\t25 a0 00 00 00       \tand    $0xa0,%eax\n    223a:\t89 c1                \tmov    %eax,%ecx\n    223c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2240:\tba 25 00 00 00       \tmov    $0x25,%edx\n    2245:\t89 ce                \tmov    %ecx,%esi\n    2247:\t48 89 c7             \tmov    %rax,%rdi\n    224a:\te8 00 00 00 00       \tcallq  224f <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x949>\n    224f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2253:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2257:\t8b 00                \tmov    (%rax),%eax\n    2259:\t25 80 00 00 00       \tand    $0x80,%eax\n    225e:\t89 c1                \tmov    %eax,%ecx\n    2260:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2264:\tba 28 00 00 00       \tmov    $0x28,%edx\n    2269:\t89 ce                \tmov    %ecx,%esi\n    226b:\t48 89 c7             \tmov    %rax,%rdi\n    226e:\te8 00 00 00 00       \tcallq  2273 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x96d>\n    2273:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2277:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    227b:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    227f:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2284:\t48 89 ce             \tmov    %rcx,%rsi\n    2287:\t48 89 c7             \tmov    %rax,%rdi\n    228a:\te8 00 00 00 00       \tcallq  228f <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x989>\n    228f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    2293:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    229a:\t00 \n    229b:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    22a2:\t00 \n    22a3:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    22aa:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    22ae:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    22b4:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    22b9:\tba 01 00 00 00       \tmov    $0x1,%edx\n    22be:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    22c3:\t48 89 c7             \tmov    %rax,%rdi\n    22c6:\te8 00 00 00 00       \tcallq  22cb <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x9c5>\n    22cb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    22cf:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    22d6:\t00 \n    22d7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    22db:\t8b 00                \tmov    (%rax),%eax\n    22dd:\t83 e0 01             \tand    $0x1,%eax\n    22e0:\t89 c1                \tmov    %eax,%ecx\n    22e2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    22e6:\tba 03 00 00 00       \tmov    $0x3,%edx\n    22eb:\t89 ce                \tmov    %ecx,%esi\n    22ed:\t48 89 c7             \tmov    %rax,%rdi\n    22f0:\te8 00 00 00 00       \tcallq  22f5 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0x9ef>\n    22f5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    22f9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    22fd:\tba 04 00 00 00       \tmov    $0x4,%edx\n    2302:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2307:\t48 89 c7             \tmov    %rax,%rdi\n    230a:\te8 00 00 00 00       \tcallq  230f <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xa09>\n    230f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2313:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2317:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    231d:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n    2322:\tba 02 00 00 00       \tmov    $0x2,%edx\n    2327:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    232c:\t48 89 c7             \tmov    %rax,%rdi\n    232f:\te8 00 00 00 00       \tcallq  2334 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xa2e>\n    2334:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    2338:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    233f:\t00 \n    2340:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2344:\tba 01 00 00 00       \tmov    $0x1,%edx\n    2349:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    234e:\t48 89 c7             \tmov    %rax,%rdi\n    2351:\te8 00 00 00 00       \tcallq  2356 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xa50>\n    2356:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    235a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    235e:\t8b 00                \tmov    (%rax),%eax\n    2360:\t83 e0 02             \tand    $0x2,%eax\n    2363:\t89 c1                \tmov    %eax,%ecx\n    2365:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2369:\tba 02 00 00 00       \tmov    $0x2,%edx\n    236e:\t89 ce                \tmov    %ecx,%esi\n    2370:\t48 89 c7             \tmov    %rax,%rdi\n    2373:\te8 00 00 00 00       \tcallq  2378 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xa72>\n    2378:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    237c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2380:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    2386:\tb9 0c 00 00 00       \tmov    $0xc,%ecx\n    238b:\tba 08 00 00 00       \tmov    $0x8,%edx\n    2390:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    2395:\t48 89 c7             \tmov    %rax,%rdi\n    2398:\te8 00 00 00 00       \tcallq  239d <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xa97>\n    239d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    23a1:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    23a8:\t00 \n    23a9:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    23ad:\t8b 00                \tmov    (%rax),%eax\n    23af:\t83 e0 0c             \tand    $0xc,%eax\n    23b2:\t89 c1                \tmov    %eax,%ecx\n    23b4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    23b8:\tba 00 00 00 00       \tmov    $0x0,%edx\n    23bd:\t89 ce                \tmov    %ecx,%esi\n    23bf:\t48 89 c7             \tmov    %rax,%rdi\n    23c2:\te8 00 00 00 00       \tcallq  23c7 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xac1>\n    23c7:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    23cb:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    23cf:\t8b 00                \tmov    (%rax),%eax\n    23d1:\t83 e0 08             \tand    $0x8,%eax\n    23d4:\t89 c1                \tmov    %eax,%ecx\n    23d6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    23da:\tba 00 00 00 00       \tmov    $0x0,%edx\n    23df:\t89 ce                \tmov    %ecx,%esi\n    23e1:\t48 89 c7             \tmov    %rax,%rdi\n    23e4:\te8 00 00 00 00       \tcallq  23e9 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xae3>\n    23e9:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    23ed:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    23f1:\t8b 00                \tmov    (%rax),%eax\n    23f3:\t83 e0 04             \tand    $0x4,%eax\n    23f6:\t89 c1                \tmov    %eax,%ecx\n    23f8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    23fc:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2401:\t89 ce                \tmov    %ecx,%esi\n    2403:\t48 89 c7             \tmov    %rax,%rdi\n    2406:\te8 00 00 00 00       \tcallq  240b <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xb05>\n    240b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    240f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2413:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2418:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    241d:\t48 89 c7             \tmov    %rax,%rdi\n    2420:\te8 00 00 00 00       \tcallq  2425 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xb1f>\n    2425:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2429:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    242d:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    2433:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n    2438:\tba 20 00 00 00       \tmov    $0x20,%edx\n    243d:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    2442:\t48 89 c7             \tmov    %rax,%rdi\n    2445:\te8 00 00 00 00       \tcallq  244a <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xb44>\n    244a:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    244e:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    2455:\t00 \n    2456:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    245a:\t8b 00                \tmov    (%rax),%eax\n    245c:\t83 e0 30             \tand    $0x30,%eax\n    245f:\t89 c1                \tmov    %eax,%ecx\n    2461:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2465:\tba 00 00 00 00       \tmov    $0x0,%edx\n    246a:\t89 ce                \tmov    %ecx,%esi\n    246c:\t48 89 c7             \tmov    %rax,%rdi\n    246f:\te8 00 00 00 00       \tcallq  2474 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xb6e>\n    2474:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2478:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    247c:\t8b 00                \tmov    (%rax),%eax\n    247e:\t83 e0 20             \tand    $0x20,%eax\n    2481:\t89 c1                \tmov    %eax,%ecx\n    2483:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2487:\tba 00 00 00 00       \tmov    $0x0,%edx\n    248c:\t89 ce                \tmov    %ecx,%esi\n    248e:\t48 89 c7             \tmov    %rax,%rdi\n    2491:\te8 00 00 00 00       \tcallq  2496 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xb90>\n    2496:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    249a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    249e:\t8b 00                \tmov    (%rax),%eax\n    24a0:\t83 e0 10             \tand    $0x10,%eax\n    24a3:\t89 c1                \tmov    %eax,%ecx\n    24a5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    24a9:\tba 00 00 00 00       \tmov    $0x0,%edx\n    24ae:\t89 ce                \tmov    %ecx,%esi\n    24b0:\t48 89 c7             \tmov    %rax,%rdi\n    24b3:\te8 00 00 00 00       \tcallq  24b8 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xbb2>\n    24b8:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    24bc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    24c0:\tba 00 00 00 00       \tmov    $0x0,%edx\n    24c5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    24ca:\t48 89 c7             \tmov    %rax,%rdi\n    24cd:\te8 00 00 00 00       \tcallq  24d2 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xbcc>\n    24d2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    24d6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    24da:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    24e0:\tb9 c0 00 00 00       \tmov    $0xc0,%ecx\n    24e5:\tba 40 00 00 00       \tmov    $0x40,%edx\n    24ea:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    24ef:\t48 89 c7             \tmov    %rax,%rdi\n    24f2:\te8 00 00 00 00       \tcallq  24f7 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xbf1>\n    24f7:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    24fb:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    2502:\t00 \n    2503:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2507:\t8b 00                \tmov    (%rax),%eax\n    2509:\t25 c0 00 00 00       \tand    $0xc0,%eax\n    250e:\t89 c1                \tmov    %eax,%ecx\n    2510:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2514:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2519:\t89 ce                \tmov    %ecx,%esi\n    251b:\t48 89 c7             \tmov    %rax,%rdi\n    251e:\te8 00 00 00 00       \tcallq  2523 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xc1d>\n    2523:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2527:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    252b:\t8b 00                \tmov    (%rax),%eax\n    252d:\t25 80 00 00 00       \tand    $0x80,%eax\n    2532:\t89 c1                \tmov    %eax,%ecx\n    2534:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2538:\tba 00 00 00 00       \tmov    $0x0,%edx\n    253d:\t89 ce                \tmov    %ecx,%esi\n    253f:\t48 89 c7             \tmov    %rax,%rdi\n    2542:\te8 00 00 00 00       \tcallq  2547 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xc41>\n    2547:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    254b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    254f:\t8b 00                \tmov    (%rax),%eax\n    2551:\t83 e0 40             \tand    $0x40,%eax\n    2554:\t89 c1                \tmov    %eax,%ecx\n    2556:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    255a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    255f:\t89 ce                \tmov    %ecx,%esi\n    2561:\t48 89 c7             \tmov    %rax,%rdi\n    2564:\te8 00 00 00 00       \tcallq  2569 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xc63>\n    2569:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    256d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2571:\tba 00 00 00 00       \tmov    $0x0,%edx\n    2576:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    257b:\t48 89 c7             \tmov    %rax,%rdi\n    257e:\te8 00 00 00 00       \tcallq  2583 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xc7d>\n    2583:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2587:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    258b:\t48 89 c7             \tmov    %rax,%rdi\n    258e:\te8 00 00 00 00       \tcallq  2593 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xc8d>\n    2593:\teb 1a                \tjmp    25af <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xca9>\n    2595:\t48 89 c3             \tmov    %rax,%rbx\n    2598:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    259c:\t48 89 c7             \tmov    %rax,%rdi\n    259f:\te8 00 00 00 00       \tcallq  25a4 <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xc9e>\n    25a4:\t48 89 d8             \tmov    %rbx,%rax\n    25a7:\t48 89 c7             \tmov    %rax,%rdi\n    25aa:\te8 00 00 00 00       \tcallq  25af <_ZL25construct_ioport_shanghaiR8device_tR11tagged_listI17input_port_configER7astring+0xca9>\n    25af:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    25b6:\t5b                   \tpop    %rbx\n    25b7:\t5d                   \tpop    %rbp\n    25b8:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_shanghai(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  int v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  v8 = Number L;\n  v7 = Number L;\n  v6 = Number L;\n  v5 = Number;\n  v6 = ioconfig_alloc_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v6 = ioconfig_alloc_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_BYTE *)(v7 + Number) = Number;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  *(_DWORD *)(v7 + Number) |= Number;\n  *(_BYTE *)(v7 + Number) = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v6 = ioconfig_alloc_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number, Number L, Number L);\n  v8 = Number L;\n  v6 = ioconfig_alloc_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = ioconfig_alloc_onoff(v6, Number L, Number, Number L, Number L, a3);\n  v8 = Number L;\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v6 = ioconfig_alloc_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, String);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, String);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, Number L);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, String);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, String);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, String);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, String);\n  v8 = ioconfig_alloc_setting(v7, Number L, String);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, String);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, a3456);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, &a3456[Number]);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, &a3456[Number]);\n  v8 = ioconfig_alloc_setting(v7, Number L, &a3456[Number]);\n  v7 = ioconfig_alloc_field(v6, Number L, Number L, Number L, String);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, String);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, String);\n  v8 = ioconfig_alloc_setting(v7, *(_DWORD *)v7 & Number, String);\n  v8 = ioconfig_alloc_setting(v7, Number L, String);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl construct_ioport_shanghai(device_t *owner, ioport_list *portlist,\n                                       astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value maskbits;\n  input_port_config *curport;\n  input_field_config *curfield;\n  input_setting_config *cursetting;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  cursetting = Number L;\n  curfield = Number L;\n  curport = Number L;\n  maskbits = Number;\n  curport = (input_port_config *)ioconfig_alloc_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curport = (input_port_config *)ioconfig_alloc_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->way = Number;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield->flags |= Number;\n  curfield->player = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curport = (input_port_config *)ioconfig_alloc_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, Number L);\n  cursetting = Number L;\n  curport = (input_port_config *)ioconfig_alloc_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_onoff(\n      curport, (const char *)&loc_31 + Number, Number, Number, Number L,\n      errorbuf);\n  cursetting = Number L;\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_69);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_1 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_4);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_8 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_F + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_F + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_12);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_12 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_16 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_20 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_25);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_28);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_8 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_F + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_F + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_12);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_12 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_16 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_20 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_25);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_28);\n  curport = (input_port_config *)ioconfig_alloc_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, String);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_4);\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, String);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_1);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1 + Number);\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, String);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, String);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, String);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, String);\n  cursetting =\n      (input_setting_config *)ioconfig_alloc_setting(curfield, Number, String);\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, String);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, a3456);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, &a3456[Number]);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, &a3456[Number]);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(curfield, Number,\n                                                              &a3456[Number]);\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, String);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, String);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, String);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, String);\n  cursetting =\n      (input_setting_config *)ioconfig_alloc_setting(curfield, Number, String);\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "pred_name": "fulltag", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "hustustor", "repo_name": "simplecfs", "path": "hustustor/simplecfs/03d3fc7841a6a8a7e7cdbb3e8233e32a755a92a7841ed37e8cb8d16c17000199", "path_in_repo": "hustustor/simplecfs//ext/gf-complete/src/gf_w64.o", "objdump": "0000000000003a34 <gf_w64_bytwo_p_nosse_multiply_region>:\n    3a34:\t55                   \tpush   %rbp\n    3a35:\t48 89 e5             \tmov    %rsp,%rbp\n    3a38:\t48 81 ec c0 00 00 00 \tsub    $0xc0,%rsp\n    3a3f:\t48 89 bd 68 ff ff ff \tmov    %rdi,-0x98(%rbp)\n    3a46:\t48 89 b5 60 ff ff ff \tmov    %rsi,-0xa0(%rbp)\n    3a4d:\t48 89 95 58 ff ff ff \tmov    %rdx,-0xa8(%rbp)\n    3a54:\t48 89 8d 50 ff ff ff \tmov    %rcx,-0xb0(%rbp)\n    3a5b:\t44 89 85 4c ff ff ff \tmov    %r8d,-0xb4(%rbp)\n    3a62:\t44 89 8d 48 ff ff ff \tmov    %r9d,-0xb8(%rbp)\n    3a69:\t48 83 bd 50 ff ff ff \tcmpq   $0x0,-0xb0(%rbp)\n    3a70:\t00 \n    3a71:\t75 22                \tjne    3a95 <gf_w64_bytwo_p_nosse_multiply_region+0x61>\n    3a73:\t8b 95 48 ff ff ff    \tmov    -0xb8(%rbp),%edx\n    3a79:\t8b 8d 4c ff ff ff    \tmov    -0xb4(%rbp),%ecx\n    3a7f:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n    3a86:\t89 ce                \tmov    %ecx,%esi\n    3a88:\t48 89 c7             \tmov    %rax,%rdi\n    3a8b:\te8 00 00 00 00       \tcallq  3a90 <gf_w64_bytwo_p_nosse_multiply_region+0x5c>\n    3a90:\te9 f8 01 00 00       \tjmpq   3c8d <gf_w64_bytwo_p_nosse_multiply_region+0x259>\n    3a95:\t48 83 bd 50 ff ff ff \tcmpq   $0x1,-0xb0(%rbp)\n    3a9c:\t01 \n    3a9d:\t75 27                \tjne    3ac6 <gf_w64_bytwo_p_nosse_multiply_region+0x92>\n    3a9f:\t8b 8d 48 ff ff ff    \tmov    -0xb8(%rbp),%ecx\n    3aa5:\t8b 95 4c ff ff ff    \tmov    -0xb4(%rbp),%edx\n    3aab:\t48 8b b5 58 ff ff ff \tmov    -0xa8(%rbp),%rsi\n    3ab2:\t48 8b 85 60 ff ff ff \tmov    -0xa0(%rbp),%rax\n    3ab9:\t48 89 c7             \tmov    %rax,%rdi\n    3abc:\te8 00 00 00 00       \tcallq  3ac1 <gf_w64_bytwo_p_nosse_multiply_region+0x8d>\n    3ac1:\te9 c7 01 00 00       \tjmpq   3c8d <gf_w64_bytwo_p_nosse_multiply_region+0x259>\n    3ac6:\t4c 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%r9\n    3acd:\t44 8b 85 4c ff ff ff \tmov    -0xb4(%rbp),%r8d\n    3ad4:\t48 8b 8d 58 ff ff ff \tmov    -0xa8(%rbp),%rcx\n    3adb:\t48 8b 95 60 ff ff ff \tmov    -0xa0(%rbp),%rdx\n    3ae2:\t48 8b b5 68 ff ff ff \tmov    -0x98(%rbp),%rsi\n    3ae9:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    3af0:\t6a 08                \tpushq  $0x8\n    3af2:\t8b bd 48 ff ff ff    \tmov    -0xb8(%rbp),%edi\n    3af8:\t57                   \tpush   %rdi\n    3af9:\t48 89 c7             \tmov    %rax,%rdi\n    3afc:\te8 00 00 00 00       \tcallq  3b01 <gf_w64_bytwo_p_nosse_multiply_region+0xcd>\n    3b01:\t48 83 c4 10          \tadd    $0x10,%rsp\n    3b05:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    3b0c:\t48 89 c7             \tmov    %rax,%rdi\n    3b0f:\te8 00 00 00 00       \tcallq  3b14 <gf_w64_bytwo_p_nosse_multiply_region+0xe0>\n    3b14:\t48 8b 85 68 ff ff ff \tmov    -0x98(%rbp),%rax\n    3b1b:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    3b1f:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    3b23:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    3b27:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    3b2b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    3b2f:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n    3b33:\tb8 00 00 00 80       \tmov    $0x80000000,%eax\n    3b38:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    3b3c:\t48 c1 65 d0 20       \tshlq   $0x20,-0x30(%rbp)\n    3b41:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    3b45:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3b49:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    3b4d:\t83 bd 48 ff ff ff 00 \tcmpl   $0x0,-0xb8(%rbp)\n    3b54:\t0f 84 16 01 00 00    \tje     3c70 <gf_w64_bytwo_p_nosse_multiply_region+0x23c>\n    3b5a:\te9 84 00 00 00       \tjmpq   3be3 <gf_w64_bytwo_p_nosse_multiply_region+0x1af>\n    3b5f:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    3b66:\t00 \n    3b67:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3b6b:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    3b6f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3b73:\t48 8b 00             \tmov    (%rax),%rax\n    3b76:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    3b7a:\teb 41                \tjmp    3bbd <gf_w64_bytwo_p_nosse_multiply_region+0x189>\n    3b7c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3b80:\t48 23 45 d0          \tand    -0x30(%rbp),%rax\n    3b84:\t48 85 c0             \ttest   %rax,%rax\n    3b87:\t74 0d                \tje     3b96 <gf_w64_bytwo_p_nosse_multiply_region+0x162>\n    3b89:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3b8d:\t48 01 c0             \tadd    %rax,%rax\n    3b90:\t48 33 45 c8          \txor    -0x38(%rbp),%rax\n    3b94:\teb 07                \tjmp    3b9d <gf_w64_bytwo_p_nosse_multiply_region+0x169>\n    3b96:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3b9a:\t48 01 c0             \tadd    %rax,%rax\n    3b9d:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    3ba1:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    3ba8:\t48 23 45 e0          \tand    -0x20(%rbp),%rax\n    3bac:\t48 85 c0             \ttest   %rax,%rax\n    3baf:\t74 08                \tje     3bb9 <gf_w64_bytwo_p_nosse_multiply_region+0x185>\n    3bb1:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    3bb5:\t48 31 45 e8          \txor    %rax,-0x18(%rbp)\n    3bb9:\t48 d1 6d e0          \tshrq   -0x20(%rbp)\n    3bbd:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    3bc2:\t75 b8                \tjne    3b7c <gf_w64_bytwo_p_nosse_multiply_region+0x148>\n    3bc4:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3bc8:\t48 8b 00             \tmov    (%rax),%rax\n    3bcb:\t48 33 45 e8          \txor    -0x18(%rbp),%rax\n    3bcf:\t48 89 c2             \tmov    %rax,%rdx\n    3bd2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3bd6:\t48 89 10             \tmov    %rdx,(%rax)\n    3bd9:\t48 83 45 f0 08       \taddq   $0x8,-0x10(%rbp)\n    3bde:\t48 83 45 f8 08       \taddq   $0x8,-0x8(%rbp)\n    3be3:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    3be7:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n    3beb:\t0f 82 6e ff ff ff    \tjb     3b5f <gf_w64_bytwo_p_nosse_multiply_region+0x12b>\n    3bf1:\te9 88 00 00 00       \tjmpq   3c7e <gf_w64_bytwo_p_nosse_multiply_region+0x24a>\n    3bf6:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    3bfd:\t00 \n    3bfe:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    3c02:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    3c06:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n    3c0a:\t48 8b 00             \tmov    (%rax),%rax\n    3c0d:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    3c11:\teb 41                \tjmp    3c54 <gf_w64_bytwo_p_nosse_multiply_region+0x220>\n    3c13:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3c17:\t48 23 45 d0          \tand    -0x30(%rbp),%rax\n    3c1b:\t48 85 c0             \ttest   %rax,%rax\n    3c1e:\t74 0d                \tje     3c2d <gf_w64_bytwo_p_nosse_multiply_region+0x1f9>\n    3c20:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3c24:\t48 01 c0             \tadd    %rax,%rax\n    3c27:\t48 33 45 c8          \txor    -0x38(%rbp),%rax\n    3c2b:\teb 07                \tjmp    3c34 <gf_w64_bytwo_p_nosse_multiply_region+0x200>\n    3c2d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    3c31:\t48 01 c0             \tadd    %rax,%rax\n    3c34:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    3c38:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    3c3f:\t48 23 45 e0          \tand    -0x20(%rbp),%rax\n    3c43:\t48 85 c0             \ttest   %rax,%rax\n    3c46:\t74 08                \tje     3c50 <gf_w64_bytwo_p_nosse_multiply_region+0x21c>\n    3c48:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    3c4c:\t48 31 45 e8          \txor    %rax,-0x18(%rbp)\n    3c50:\t48 d1 6d e0          \tshrq   -0x20(%rbp)\n    3c54:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    3c59:\t75 b8                \tjne    3c13 <gf_w64_bytwo_p_nosse_multiply_region+0x1df>\n    3c5b:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n    3c5f:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    3c63:\t48 89 10             \tmov    %rdx,(%rax)\n    3c66:\t48 83 45 f0 08       \taddq   $0x8,-0x10(%rbp)\n    3c6b:\t48 83 45 f8 08       \taddq   $0x8,-0x8(%rbp)\n    3c70:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    3c74:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n    3c78:\t0f 82 78 ff ff ff    \tjb     3bf6 <gf_w64_bytwo_p_nosse_multiply_region+0x1c2>\n    3c7e:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n    3c85:\t48 89 c7             \tmov    %rax,%rdi\n    3c88:\te8 00 00 00 00       \tcallq  3c8d <gf_w64_bytwo_p_nosse_multiply_region+0x259>\n    3c8d:\tc9                   \tleaveq \n    3c8e:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gf_w64_bytwo_p_nosse_multiply_region(__int64 a1, __int64 a2,\n                                                        __int64 a3, __int64 a4,\n                                                        unsigned int a5,\n                                                        unsigned int a6) {\n  __int64 v7;\n  __int64 v8;\n  char <span class=\"supfact\">v11</span>[Number];\n  __int64 *v12;\n  _QWORD *v13;\n  unsigned __int64 v14;\n  __int64 v15;\n  __int64 v16;\n  unsigned __int64 v17;\n  __int64 v18;\n  unsigned __int64 v19;\n  __int64 v20;\n  _QWORD *v21;\n  __int64 *v22;\n  if (!a4)\n    return gf_multby_zero(a3, a5, a6);\n  if (a4 == Number)\n    return gf_multby_one(a2, a3, a5, a6);\n  gf_set_region_data(<span class=\"supfact\">v11</span>, a1, a2, a3, a5, a4, a6, Number L);\n  gf_do_initial_region_alignment(<span class=\"supfact\">v11</span>);\n  v18 = *(_QWORD *)(a1 + Number);\n  v22 = v12;\n  v21 = v13;\n  v17 = Number;\n  v16 = *(_QWORD *)(v18 + Number);\n  if (a6) {\n    while ((unsigned __int64)v22 < v14) {\n      v20 = Number L;\n      v19 = v17;\n      v15 = *v22;\n      while (v19) {\n        if ((v17 & v20) != Number)\n          v7 = v16 ^ (Number * v20);\n        else\n          v7 = Number * v20;\n        v20 = v7;\n        if ((v19 & a4) != Number)\n          v20 ^= v15;\n        v19 >>= Number;\n      }\n      *v21++ ^= v20;\n      ++v22;\n    }\n  } else {\n    while ((unsigned __int64)v22 < v14) {\n      v20 = Number L;\n      v19 = v17;\n      v15 = *v22;\n      while (v19) {\n        if ((v17 & v20) != Number)\n          v8 = v16 ^ (Number * v20);\n        else\n          v8 = Number * v20;\n        v20 = v8;\n        if ((v19 & a4) != Number)\n          v20 ^= v15;\n        v19 >>= Number;\n      }\n      *v21++ = v20;\n      ++v22;\n    }\n  }\n  return gf_do_final_region_alignment(<span class=\"supfact\">v11</span>);\n}", "code_t": "void __cdecl gf_w64_bytwo_p_nosse_multiply_region(gf_t *gf, void *src,\n                                                  void *dest, gf_val_64_t val,\n                                                  int bytes, int xor) {\n  uint64_t v6;\n  uint64_t v7;\n  gf_region_data <span class=\"supfact\">rd</span>;\n  uint64_t ta;\n  uint64_t pp;\n  uint64_t pmask;\n  gf_internal_t *h;\n  uint64_t amask;\n  uint64_t prod;\n  uint64_t *d64;\n  uint64_t *s64;\n  if (val) {\n    if (val == Number) {\n      gf_multby_one(src, dest, (unsigned int)bytes, (unsigned int)xor);\n    } else {\n      gf_set_region_data(&<span class=\"supfact\">rd</span>, gf, src, dest,\n                         (unsigned int)bytes, val, (unsigned int)xor, Number L);\n      gf_do_initial_region_alignment(&<span class=\"supfact\">rd</span>);\n      h = (gf_internal_t *)gf->scratch;\n      s64 = (uint64_t *)<span class=\"supfact\">rd</span>.s_start;\n      d64 = (uint64_t *)<span class=\"supfact\">rd</span>.d_start;\n      pmask = Number;\n      pp = h->prim_poly;\n      if (xor) {\n        while (s64 < <span class=\"supfact\">rd</span>.s_top) {\n          prod = Number L;\n          amask = pmask;\n          ta = *s64;\n          while (amask) {\n            if ((pmask & prod) != Number)\n              v6 = pp ^ (Number * prod);\n            else\n              v6 = Number * prod;\n            prod = v6;\n            if ((amask & val) != Number)\n              prod ^= ta;\n            amask >>= Number;\n          }\n          *d64++ ^= prod;\n          ++s64;\n        }\n      } else {\n        while (s64 < <span class=\"supfact\">rd</span>.s_top) {\n          prod = Number L;\n          amask = pmask;\n          ta = *s64;\n          while (amask) {\n            if ((pmask & prod) != Number)\n              v7 = pp ^ (Number * prod);\n            else\n              v7 = Number * prod;\n            prod = v7;\n            if ((amask & val) != Number)\n              prod ^= ta;\n            amask >>= Number;\n          }\n          *d64++ = prod;\n          ++s64;\n        }\n      }\n      gf_do_final_region_alignment(&<span class=\"supfact\">rd</span>);\n    }\n  } else {\n    gf_multby_zero(dest, (unsigned int)bytes, (unsigned int)xor);\n  }\n}", "var": [{"name": "v11", "type": "gf_val_32_t", "pred_name": "__unk__", "ref_name": "rd", "ref_type": "struct gf_region_data { gf_t * gf; void * src; void * dest; int bytes; PADDING (4); uint64_t val; int xor; int align; void * s_start; void * d_start; void * s_top; void * d_top; }"}], "body_in_train": false}, {"repo_owner": "quectel-wireless-solutions", "repo_name": "QuecOpen", "path": "quectel-wireless-solutions/QuecOpen/3dda3246cdc69e626df5a5df1c73730ae845f87639c8d0c89d12fcd4d89ef68f", "path_in_repo": "quectel-wireless-solutions/QuecOpen/example/socket/tcp/example_tcp_server.o", "objdump": "0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec 50 04 00 00 \tsub    $0x450,%rsp\n   b:\t89 bd bc fb ff ff    \tmov    %edi,-0x444(%rbp)\n  11:\t48 89 b5 b0 fb ff ff \tmov    %rsi,-0x450(%rbp)\n  18:\tba 00 00 00 00       \tmov    $0x0,%edx\n  1d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  22:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  27:\te8 00 00 00 00       \tcallq  2c <main+0x2c>\n  2c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  2f:\t83 7d fc ff          \tcmpl   $0xffffffff,-0x4(%rbp)\n  33:\t75 34                \tjne    69 <main+0x69>\n  35:\te8 00 00 00 00       \tcallq  3a <main+0x3a>\n  3a:\t8b 00                \tmov    (%rax),%eax\n  3c:\t89 c7                \tmov    %eax,%edi\n  3e:\te8 00 00 00 00       \tcallq  43 <main+0x43>\n  43:\t48 89 c2             \tmov    %rax,%rdx\n  46:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4d <main+0x4d>\n  4d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  52:\t48 89 c7             \tmov    %rax,%rdi\n  55:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  5a:\te8 00 00 00 00       \tcallq  5f <main+0x5f>\n  5f:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  64:\te8 00 00 00 00       \tcallq  69 <main+0x69>\n  69:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  6d:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n  74:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n  7b:\t00 \n  7c:\t66 c7 45 e0 02 00    \tmovw   $0x2,-0x20(%rbp)\n  82:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  87:\te8 00 00 00 00       \tcallq  8c <main+0x8c>\n  8c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  8f:\tbf 05 0d 00 00       \tmov    $0xd05,%edi\n  94:\te8 00 00 00 00       \tcallq  99 <main+0x99>\n  99:\t66 89 45 e2          \tmov    %ax,-0x1e(%rbp)\n  9d:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  a1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  a4:\tba 10 00 00 00       \tmov    $0x10,%edx\n  a9:\t48 89 ce             \tmov    %rcx,%rsi\n  ac:\t89 c7                \tmov    %eax,%edi\n  ae:\te8 00 00 00 00       \tcallq  b3 <main+0xb3>\n  b3:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  b6:\t75 34                \tjne    ec <main+0xec>\n  b8:\te8 00 00 00 00       \tcallq  bd <main+0xbd>\n  bd:\t8b 00                \tmov    (%rax),%eax\n  bf:\t89 c7                \tmov    %eax,%edi\n  c1:\te8 00 00 00 00       \tcallq  c6 <main+0xc6>\n  c6:\t48 89 c2             \tmov    %rax,%rdx\n  c9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d0 <main+0xd0>\n  d0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  d5:\t48 89 c7             \tmov    %rax,%rdi\n  d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  dd:\te8 00 00 00 00       \tcallq  e2 <main+0xe2>\n  e2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  e7:\te8 00 00 00 00       \tcallq  ec <main+0xec>\n  ec:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  ef:\tbe 05 00 00 00       \tmov    $0x5,%esi\n  f4:\t89 c7                \tmov    %eax,%edi\n  f6:\te8 00 00 00 00       \tcallq  fb <main+0xfb>\n  fb:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  fe:\t75 34                \tjne    134 <main+0x134>\n 100:\te8 00 00 00 00       \tcallq  105 <main+0x105>\n 105:\t8b 00                \tmov    (%rax),%eax\n 107:\t89 c7                \tmov    %eax,%edi\n 109:\te8 00 00 00 00       \tcallq  10e <main+0x10e>\n 10e:\t48 89 c2             \tmov    %rax,%rdx\n 111:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 118 <main+0x118>\n 118:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 11d:\t48 89 c7             \tmov    %rax,%rdi\n 120:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 125:\te8 00 00 00 00       \tcallq  12a <main+0x12a>\n 12a:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 12f:\te8 00 00 00 00       \tcallq  134 <main+0x134>\n 134:\tc7 45 cc 10 00 00 00 \tmovl   $0x10,-0x34(%rbp)\n 13b:\t48 8d 55 cc          \tlea    -0x34(%rbp),%rdx\n 13f:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n 143:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 146:\t48 89 ce             \tmov    %rcx,%rsi\n 149:\t89 c7                \tmov    %eax,%edi\n 14b:\te8 00 00 00 00       \tcallq  150 <main+0x150>\n 150:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n 153:\t83 7d f8 ff          \tcmpl   $0xffffffff,-0x8(%rbp)\n 157:\t75 34                \tjne    18d <main+0x18d>\n 159:\te8 00 00 00 00       \tcallq  15e <main+0x15e>\n 15e:\t8b 00                \tmov    (%rax),%eax\n 160:\t89 c7                \tmov    %eax,%edi\n 162:\te8 00 00 00 00       \tcallq  167 <main+0x167>\n 167:\t48 89 c2             \tmov    %rax,%rdx\n 16a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 171 <main+0x171>\n 171:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 176:\t48 89 c7             \tmov    %rax,%rdi\n 179:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 17e:\te8 00 00 00 00       \tcallq  183 <main+0x183>\n 183:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 188:\te8 00 00 00 00       \tcallq  18d <main+0x18d>\n 18d:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 190:\t89 c7                \tmov    %eax,%edi\n 192:\te8 00 00 00 00       \tcallq  197 <main+0x197>\n 197:\t48 89 c6             \tmov    %rax,%rsi\n 19a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 19f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1a4:\te8 00 00 00 00       \tcallq  1a9 <main+0x1a9>\n 1a9:\t48 8d 8d c0 fb ff ff \tlea    -0x440(%rbp),%rcx\n 1b0:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 1b3:\tba 00 04 00 00       \tmov    $0x400,%edx\n 1b8:\t48 89 ce             \tmov    %rcx,%rsi\n 1bb:\t89 c7                \tmov    %eax,%edi\n 1bd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1c2:\te8 00 00 00 00       \tcallq  1c7 <main+0x1c7>\n 1c7:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 1ca:\t83 7d f4 ff          \tcmpl   $0xffffffff,-0xc(%rbp)\n 1ce:\t75 34                \tjne    204 <main+0x204>\n 1d0:\te8 00 00 00 00       \tcallq  1d5 <main+0x1d5>\n 1d5:\t8b 00                \tmov    (%rax),%eax\n 1d7:\t89 c7                \tmov    %eax,%edi\n 1d9:\te8 00 00 00 00       \tcallq  1de <main+0x1de>\n 1de:\t48 89 c2             \tmov    %rax,%rdx\n 1e1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e8 <main+0x1e8>\n 1e8:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 1ed:\t48 89 c7             \tmov    %rax,%rdi\n 1f0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1f5:\te8 00 00 00 00       \tcallq  1fa <main+0x1fa>\n 1fa:\tbf 01 00 00 00       \tmov    $0x1,%edi\n 1ff:\te8 00 00 00 00       \tcallq  204 <main+0x204>\n 204:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 207:\t48 98                \tcltq   \n 209:\tc6 84 05 c0 fb ff ff \tmovb   $0x0,-0x440(%rbp,%rax,1)\n 210:\t00 \n 211:\t48 8d 85 c0 fb ff ff \tlea    -0x440(%rbp),%rax\n 218:\t48 89 c6             \tmov    %rax,%rsi\n 21b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 220:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 225:\te8 00 00 00 00       \tcallq  22a <main+0x22a>\n 22a:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 22d:\t89 c7                \tmov    %eax,%edi\n 22f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 234:\te8 00 00 00 00       \tcallq  239 <main+0x239>\n 239:\te9 f6 fe ff ff       \tjmpq   134 <main+0x134>\n", "code_s": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  int *v3;\n  char *v4;\n  int *v5;\n  char *v6;\n  int *v7;\n  char *v8;\n  int *v9;\n  char *v10;\n  char *v11;\n  int *v12;\n  char *v13;\n  char buf[Number];\n  socklen_t addr_len;\n  struct sockaddr <span class=\"supfact\">v16</span>;\n  struct sockaddr <span class=\"supfact\">addr</span>;\n  int v18;\n  int v19;\n  int fd;\n  fd = socket(Number, Number, Number);\n  if (fd == Number) {\n    v3 = _errno_location();\n    v4 = strerror(*v3);\n    fprintf(stderr, String, v4);\n    exit(Number);\n  }\n  <span class=\"supfact\">addr</span>.sa_family = Number;\n  *(_QWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = Number L;\n  *(_DWORD *)&<span class=\"supfact\">addr</span>.sa_data[Number] = htonl(Number);\n  *(_WORD *)<span class=\"supfact\">addr</span>.sa_data = htons(Number);\n  if (bind(fd, &<span class=\"supfact\">addr</span>, Number) == Number) {\n    v5 = _errno_location();\n    v6 = strerror(*v5);\n    fprintf(stderr, String, v6);\n    exit(Number);\n  }\n  if (listen(fd, Number) == Number) {\n    v7 = _errno_location();\n    v8 = strerror(*v7);\n    fprintf(stderr, String, v8);\n    exit(Number);\n  }\n  while (Number) {\n    addr_len = Number;\n    v19 = accept(fd, &<span class=\"supfact\">v16</span>, &addr_len);\n    if (v19 == Number)\n      break;\n    v11 = inet_ntoa(*(struct in_addr *)&<span class=\"supfact\">v16</span>.sa_data[Number]);\n    printf(String, v11);\n    v18 = read(v19, buf, Number);\n    if (v18 == Number) {\n      v12 = _errno_location();\n      v13 = strerror(*v12);\n      fprintf(stderr, String, v13);\n      exit(Number);\n    }\n    buf[v18] = Number;\n    printf(String, buf);\n    close(v19);\n  }\n  v9 = _errno_location();\n  v10 = strerror(*v9);\n  fprintf(stderr, String, v10);\n  exit(Number);\n}", "code_t": "int __cdecl __noreturn main(int argc, const char **argv, const char **envp) {\n  int *v3;\n  char *v4;\n  int *v5;\n  char *v6;\n  int *v7;\n  char *v8;\n  int *v9;\n  char *v10;\n  char *v11;\n  int *v12;\n  char *v13;\n  char buffer[Number];\n  int sin_size;\n  sockaddr_in <span class=\"supfact\">client_addr</span>;\n  sockaddr_in <span class=\"supfact\">server_addr</span>;\n  int nbytes;\n  int new_fd;\n  int sockfd;\n  sockfd = socket(Number, Number, Number);\n  if (sockfd == Number) {\n    v3 = _errno_location();\n    v4 = strerror(*v3);\n    fprintf(stderr, String, v4);\n    exit(Number);\n  }\n  <span class=\"supfact\">server_addr</span>.sin_family = Number;\n  *(_QWORD *)<span class=\"supfact\">server_addr</span>.sin_zero = Number L;\n  <span class=\"supfact\">server_addr</span>.sin_addr.s_addr = htonl(Number);\n  <span class=\"supfact\">server_addr</span>.sin_port = htons(Number);\n  if (bind(sockfd, (const struct sockaddr *)&<span class=\"supfact\">server_addr</span>,\n           Number) == Number) {\n    v5 = _errno_location();\n    v6 = strerror(*v5);\n    fprintf(stderr, String, v6);\n    exit(Number);\n  }\n  if (listen(sockfd, Number) == Number) {\n    v7 = _errno_location();\n    v8 = strerror(*v7);\n    fprintf(stderr, String, v8);\n    exit(Number);\n  }\n  while (Number) {\n    sin_size = Number;\n    new_fd = accept(sockfd, (struct sockaddr *)&<span class=\"supfact\">client_addr</span>,\n                    (socklen_t *)&sin_size);\n    if (new_fd == Number)\n      break;\n    v11 = inet_ntoa(<span class=\"supfact\">client_addr</span>.sin_addr);\n    printf(String, v11);\n    nbytes = read(new_fd, buffer, Number);\n    if (nbytes == Number) {\n      v12 = _errno_location();\n      v13 = strerror(*v12);\n      fprintf(stderr, String, v13);\n      exit(Number);\n    }\n    buffer[nbytes] = Number;\n    printf(String, buffer);\n    close(new_fd);\n  }\n  v9 = _errno_location();\n  v10 = strerror(*v9);\n  fprintf(stderr, String, v10);\n  exit(Number);\n}", "var": [{"name": "v16", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "pred_name": "__unk__", "ref_name": "client_addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}, {"name": "addr", "type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }", "pred_name": "__unk__", "ref_name": "server_addr", "ref_type": "struct sockaddr_in { sa_family_t sin_family; in_port_t sin_port; in_addr sin_addr; unsigned __int8[8] sin_zero; }"}], "body_in_train": false}, {"repo_owner": "luotao717", "repo_name": "dytpro", "path": "luotao717/dytpro/0cd1a9e388798b97fc1308504612a98788a448b6d523fc5c0f2339695da590bf", "path_in_repo": "luotao717/dytpro/ra5350/lktos_sdk/source/user/ppp-2.4.2/pppd/ipv6cp.o", "objdump": "000000000000096c <ipv6cp_nakci>:\n     96c:\t55                   \tpush   %rbp\n     96d:\t48 89 e5             \tmov    %rsp,%rbp\n     970:\t53                   \tpush   %rbx\n     971:\t48 81 ec c8 00 00 00 \tsub    $0xc8,%rsp\n     978:\t48 89 bd 48 ff ff ff \tmov    %rdi,-0xb8(%rbp)\n     97f:\t48 89 b5 40 ff ff ff \tmov    %rsi,-0xc0(%rbp)\n     986:\t89 95 3c ff ff ff    \tmov    %edx,-0xc4(%rbp)\n     98c:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     993:\t8b 00                \tmov    (%rax),%eax\n     995:\t48 63 d0             \tmovslq %eax,%rdx\n     998:\t48 89 d0             \tmov    %rdx,%rax\n     99b:\t48 01 c0             \tadd    %rax,%rax\n     99e:\t48 01 d0             \tadd    %rdx,%rax\n     9a1:\t48 c1 e0 02          \tshl    $0x2,%rax\n     9a5:\t48 01 d0             \tadd    %rdx,%rax\n     9a8:\t48 c1 e0 02          \tshl    $0x2,%rax\n     9ac:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n     9b2:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     9b6:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n     9ba:\tba 34 00 00 00       \tmov    $0x34,%edx\n     9bf:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     9c4:\t48 89 c7             \tmov    %rax,%rdi\n     9c7:\te8 00 00 00 00       \tcallq  9cc <ipv6cp_nakci+0x60>\n     9cc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     9d0:\t48 8b 08             \tmov    (%rax),%rcx\n     9d3:\t48 8b 58 08          \tmov    0x8(%rax),%rbx\n     9d7:\t48 89 8d 50 ff ff ff \tmov    %rcx,-0xb0(%rbp)\n     9de:\t48 89 9d 58 ff ff ff \tmov    %rbx,-0xa8(%rbp)\n     9e5:\t48 8b 48 10          \tmov    0x10(%rax),%rcx\n     9e9:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n     9ed:\t48 89 8d 60 ff ff ff \tmov    %rcx,-0xa0(%rbp)\n     9f4:\t48 89 9d 68 ff ff ff \tmov    %rbx,-0x98(%rbp)\n     9fb:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n     9ff:\t48 8b 58 28          \tmov    0x28(%rax),%rbx\n     a03:\t48 89 8d 70 ff ff ff \tmov    %rcx,-0x90(%rbp)\n     a0a:\t48 89 9d 78 ff ff ff \tmov    %rbx,-0x88(%rbp)\n     a11:\t8b 40 30             \tmov    0x30(%rax),%eax\n     a14:\t89 45 80             \tmov    %eax,-0x80(%rbp)\n     a17:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a1b:\t8b 00                \tmov    (%rax),%eax\n     a1d:\t85 c0                \ttest   %eax,%eax\n     a1f:\t0f 84 c3 00 00 00    \tje     ae8 <ipv6cp_nakci+0x17c>\n     a25:\tc6 45 e7 0a          \tmovb   $0xa,-0x19(%rbp)\n     a29:\t83 bd 3c ff ff ff 09 \tcmpl   $0x9,-0xc4(%rbp)\n     a30:\t0f 8e b2 00 00 00    \tjle    ae8 <ipv6cp_nakci+0x17c>\n     a36:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     a3d:\t48 83 c0 01          \tadd    $0x1,%rax\n     a41:\t0f b6 00             \tmovzbl (%rax),%eax\n     a44:\t38 45 e7             \tcmp    %al,-0x19(%rbp)\n     a47:\t0f 85 9b 00 00 00    \tjne    ae8 <ipv6cp_nakci+0x17c>\n     a4d:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     a54:\t0f b6 00             \tmovzbl (%rax),%eax\n     a57:\t3c 01                \tcmp    $0x1,%al\n     a59:\t0f 85 89 00 00 00    \tjne    ae8 <ipv6cp_nakci+0x17c>\n     a5f:\t0f b6 45 e7          \tmovzbl -0x19(%rbp),%eax\n     a63:\t29 85 3c ff ff ff    \tsub    %eax,-0xc4(%rbp)\n     a69:\t48 83 85 40 ff ff ff \taddq   $0x2,-0xc0(%rbp)\n     a70:\t02 \n     a71:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     a78:\t48 8b 00             \tmov    (%rax),%rax\n     a7b:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     a7f:\t48 83 85 40 ff ff ff \taddq   $0x8,-0xc0(%rbp)\n     a86:\t08 \n     a87:\tc7 45 90 01 00 00 00 \tmovl   $0x1,-0x70(%rbp)\n     a8e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     a92:\t8b 40 08             \tmov    0x8(%rax),%eax\n     a95:\t85 c0                \ttest   %eax,%eax\n     a97:\t74 4f                \tje     ae8 <ipv6cp_nakci+0x17c>\n     a99:\teb 1a                \tjmp    ab5 <ipv6cp_nakci+0x149>\n     a9b:\te8 00 00 00 00       \tcallq  aa0 <ipv6cp_nakci+0x134>\n     aa0:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n     aa3:\te8 00 00 00 00       \tcallq  aa8 <ipv6cp_nakci+0x13c>\n     aa8:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n     aab:\t0f b6 45 d0          \tmovzbl -0x30(%rbp),%eax\n     aaf:\t83 e0 fd             \tand    $0xfffffffd,%eax\n     ab2:\t88 45 d0             \tmov    %al,-0x30(%rbp)\n     ab5:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n     ab8:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     abb:\t09 d0                \tor     %edx,%eax\n     abd:\t85 c0                \ttest   %eax,%eax\n     abf:\t74 da                \tje     a9b <ipv6cp_nakci+0x12f>\n     ac1:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n     ac4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ac8:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n     acb:\t39 c2                \tcmp    %eax,%edx\n     acd:\t75 0e                \tjne    add <ipv6cp_nakci+0x171>\n     acf:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n     ad2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     ad6:\t8b 40 30             \tmov    0x30(%rax),%eax\n     ad9:\t39 c2                \tcmp    %eax,%edx\n     adb:\t74 be                \tje     a9b <ipv6cp_nakci+0x12f>\n     add:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     ae1:\t48 89 85 74 ff ff ff \tmov    %rax,-0x8c(%rbp)\n     ae8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     aec:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n     aef:\t85 c0                \ttest   %eax,%eax\n     af1:\t0f 84 f6 01 00 00    \tje     ced <ipv6cp_nakci+0x381>\n     af7:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     afe:\t0f b6 40 01          \tmovzbl 0x1(%rax),%eax\n     b02:\t88 45 e7             \tmov    %al,-0x19(%rbp)\n     b05:\t80 7d e7 04          \tcmpb   $0x4,-0x19(%rbp)\n     b09:\t0f 85 de 01 00 00    \tjne    ced <ipv6cp_nakci+0x381>\n     b0f:\t0f b6 45 e7          \tmovzbl -0x19(%rbp),%eax\n     b13:\t39 85 3c ff ff ff    \tcmp    %eax,-0xc4(%rbp)\n     b19:\t0f 8c ce 01 00 00    \tjl     ced <ipv6cp_nakci+0x381>\n     b1f:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     b26:\t0f b6 00             \tmovzbl (%rax),%eax\n     b29:\t3c 02                \tcmp    $0x2,%al\n     b2b:\t0f 85 bc 01 00 00    \tjne    ced <ipv6cp_nakci+0x381>\n     b31:\t0f b6 45 e7          \tmovzbl -0x19(%rbp),%eax\n     b35:\t29 85 3c ff ff ff    \tsub    %eax,-0xc4(%rbp)\n     b3b:\t48 83 85 40 ff ff ff \taddq   $0x2,-0xc0(%rbp)\n     b42:\t02 \n     b43:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     b4a:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     b4e:\t48 89 95 40 ff ff ff \tmov    %rdx,-0xc0(%rbp)\n     b55:\t0f b6 00             \tmovzbl (%rax),%eax\n     b58:\t0f b6 c0             \tmovzbl %al,%eax\n     b5b:\tc1 e0 08             \tshl    $0x8,%eax\n     b5e:\t66 89 45 e4          \tmov    %ax,-0x1c(%rbp)\n     b62:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     b69:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     b6d:\t48 89 95 40 ff ff ff \tmov    %rdx,-0xc0(%rbp)\n     b74:\t0f b6 00             \tmovzbl (%rax),%eax\n     b77:\t0f b6 c0             \tmovzbl %al,%eax\n     b7a:\t66 09 45 e4          \tor     %ax,-0x1c(%rbp)\n     b7e:\tc7 45 ac 01 00 00 00 \tmovl   $0x1,-0x54(%rbp)\n     b85:\tc7 85 6c ff ff ff 00 \tmovl   $0x0,-0x94(%rbp)\n     b8c:\t00 00 00 \n     b8f:\te9 59 01 00 00       \tjmpq   ced <ipv6cp_nakci+0x381>\n     b94:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     b9b:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     b9f:\t48 89 95 40 ff ff ff \tmov    %rdx,-0xc0(%rbp)\n     ba6:\t0f b6 00             \tmovzbl (%rax),%eax\n     ba9:\t88 45 e3             \tmov    %al,-0x1d(%rbp)\n     bac:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     bb3:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n     bb7:\t48 89 95 40 ff ff ff \tmov    %rdx,-0xc0(%rbp)\n     bbe:\t0f b6 00             \tmovzbl (%rax),%eax\n     bc1:\t88 45 e7             \tmov    %al,-0x19(%rbp)\n     bc4:\t80 7d e7 01          \tcmpb   $0x1,-0x19(%rbp)\n     bc8:\t0f 86 96 01 00 00    \tjbe    d64 <ipv6cp_nakci+0x3f8>\n     bce:\t0f b6 45 e7          \tmovzbl -0x19(%rbp),%eax\n     bd2:\t29 85 3c ff ff ff    \tsub    %eax,-0xc4(%rbp)\n     bd8:\t83 bd 3c ff ff ff 00 \tcmpl   $0x0,-0xc4(%rbp)\n     bdf:\t0f 88 7f 01 00 00    \tjs     d64 <ipv6cp_nakci+0x3f8>\n     be5:\t0f b6 45 e7          \tmovzbl -0x19(%rbp),%eax\n     be9:\t48 8d 50 fe          \tlea    -0x2(%rax),%rdx\n     bed:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     bf4:\t48 01 d0             \tadd    %rdx,%rax\n     bf7:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     bfb:\t0f b6 45 e3          \tmovzbl -0x1d(%rbp),%eax\n     bff:\t83 f8 01             \tcmp    $0x1,%eax\n     c02:\t74 39                \tje     c3d <ipv6cp_nakci+0x2d1>\n     c04:\t83 f8 02             \tcmp    $0x2,%eax\n     c07:\t0f 85 d5 00 00 00    \tjne    ce2 <ipv6cp_nakci+0x376>\n     c0d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c11:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n     c14:\t85 c0                \ttest   %eax,%eax\n     c16:\t0f 85 4b 01 00 00    \tjne    d67 <ipv6cp_nakci+0x3fb>\n     c1c:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n     c1f:\t85 c0                \ttest   %eax,%eax\n     c21:\t0f 85 40 01 00 00    \tjne    d67 <ipv6cp_nakci+0x3fb>\n     c27:\t80 7d e7 04          \tcmpb   $0x4,-0x19(%rbp)\n     c2b:\t0f 85 36 01 00 00    \tjne    d67 <ipv6cp_nakci+0x3fb>\n     c31:\tc7 45 ac 01 00 00 00 \tmovl   $0x1,-0x54(%rbp)\n     c38:\te9 a5 00 00 00       \tjmpq   ce2 <ipv6cp_nakci+0x376>\n     c3d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c41:\t8b 00                \tmov    (%rax),%eax\n     c43:\t85 c0                \ttest   %eax,%eax\n     c45:\t0f 85 1f 01 00 00    \tjne    d6a <ipv6cp_nakci+0x3fe>\n     c4b:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n     c4e:\t85 c0                \ttest   %eax,%eax\n     c50:\t0f 85 14 01 00 00    \tjne    d6a <ipv6cp_nakci+0x3fe>\n     c56:\t80 7d e7 0a          \tcmpb   $0xa,-0x19(%rbp)\n     c5a:\t0f 85 0a 01 00 00    \tjne    d6a <ipv6cp_nakci+0x3fe>\n     c60:\tc7 85 50 ff ff ff 01 \tmovl   $0x1,-0xb0(%rbp)\n     c67:\t00 00 00 \n     c6a:\t48 8b 85 40 ff ff ff \tmov    -0xc0(%rbp),%rax\n     c71:\t48 8b 00             \tmov    (%rax),%rax\n     c74:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     c78:\t48 83 85 40 ff ff ff \taddq   $0x8,-0xc0(%rbp)\n     c7f:\t08 \n     c80:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c84:\t8b 40 08             \tmov    0x8(%rax),%eax\n     c87:\t85 c0                \ttest   %eax,%eax\n     c89:\t74 4f                \tje     cda <ipv6cp_nakci+0x36e>\n     c8b:\teb 1a                \tjmp    ca7 <ipv6cp_nakci+0x33b>\n     c8d:\te8 00 00 00 00       \tcallq  c92 <ipv6cp_nakci+0x326>\n     c92:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n     c95:\te8 00 00 00 00       \tcallq  c9a <ipv6cp_nakci+0x32e>\n     c9a:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n     c9d:\t0f b6 45 d0          \tmovzbl -0x30(%rbp),%eax\n     ca1:\t83 e0 fd             \tand    $0xfffffffd,%eax\n     ca4:\t88 45 d0             \tmov    %al,-0x30(%rbp)\n     ca7:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n     caa:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n     cad:\t09 d0                \tor     %edx,%eax\n     caf:\t85 c0                \ttest   %eax,%eax\n     cb1:\t74 da                \tje     c8d <ipv6cp_nakci+0x321>\n     cb3:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n     cb6:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     cba:\t8b 40 2c             \tmov    0x2c(%rax),%eax\n     cbd:\t39 c2                \tcmp    %eax,%edx\n     cbf:\t75 0e                \tjne    ccf <ipv6cp_nakci+0x363>\n     cc1:\t8b 55 d4             \tmov    -0x2c(%rbp),%edx\n     cc4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     cc8:\t8b 40 30             \tmov    0x30(%rax),%eax\n     ccb:\t39 c2                \tcmp    %eax,%edx\n     ccd:\t74 be                \tje     c8d <ipv6cp_nakci+0x321>\n     ccf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     cd3:\t48 89 85 74 ff ff ff \tmov    %rax,-0x8c(%rbp)\n     cda:\tc7 45 90 01 00 00 00 \tmovl   $0x1,-0x70(%rbp)\n     ce1:\t90                   \tnop\n     ce2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ce6:\t48 89 85 40 ff ff ff \tmov    %rax,-0xc0(%rbp)\n     ced:\t83 bd 3c ff ff ff 01 \tcmpl   $0x1,-0xc4(%rbp)\n     cf4:\t0f 8f 9a fe ff ff    \tjg     b94 <ipv6cp_nakci+0x228>\n     cfa:\t83 bd 3c ff ff ff 00 \tcmpl   $0x0,-0xc4(%rbp)\n     d01:\t75 6a                \tjne    d6d <ipv6cp_nakci+0x401>\n     d03:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n     d0a:\t8b 40 08             \tmov    0x8(%rax),%eax\n     d0d:\t83 f8 09             \tcmp    $0x9,%eax\n     d10:\t74 4b                \tje     d5d <ipv6cp_nakci+0x3f1>\n     d12:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     d16:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n     d1d:\t48 8b 9d 58 ff ff ff \tmov    -0xa8(%rbp),%rbx\n     d24:\t48 89 08             \tmov    %rcx,(%rax)\n     d27:\t48 89 58 08          \tmov    %rbx,0x8(%rax)\n     d2b:\t48 8b 8d 60 ff ff ff \tmov    -0xa0(%rbp),%rcx\n     d32:\t48 8b 9d 68 ff ff ff \tmov    -0x98(%rbp),%rbx\n     d39:\t48 89 48 10          \tmov    %rcx,0x10(%rax)\n     d3d:\t48 89 58 18          \tmov    %rbx,0x18(%rax)\n     d41:\t48 8b 8d 70 ff ff ff \tmov    -0x90(%rbp),%rcx\n     d48:\t48 8b 9d 78 ff ff ff \tmov    -0x88(%rbp),%rbx\n     d4f:\t48 89 48 20          \tmov    %rcx,0x20(%rax)\n     d53:\t48 89 58 28          \tmov    %rbx,0x28(%rax)\n     d57:\t8b 55 80             \tmov    -0x80(%rbp),%edx\n     d5a:\t89 50 30             \tmov    %edx,0x30(%rax)\n     d5d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     d62:\teb 0f                \tjmp    d73 <ipv6cp_nakci+0x407>\n     d64:\t90                   \tnop\n     d65:\teb 07                \tjmp    d6e <ipv6cp_nakci+0x402>\n     d67:\t90                   \tnop\n     d68:\teb 04                \tjmp    d6e <ipv6cp_nakci+0x402>\n     d6a:\t90                   \tnop\n     d6b:\teb 01                \tjmp    d6e <ipv6cp_nakci+0x402>\n     d6d:\t90                   \tnop\n     d6e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d73:\t48 81 c4 c8 00 00 00 \tadd    $0xc8,%rsp\n     d7a:\t5b                   \tpop    %rbx\n     d7b:\t5d                   \tpop    %rbp\n     d7c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ipv6cp_nakci(int *a1, __int64 a2, int a3) {\n  unsigned __int8 *v3;\n  char *v4;\n  char *v5;\n  _BYTE *v8;\n  __int64 *v9;\n  __int64 <span class=\"supfact\">v10</span>;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  __int128 v14;\n  int v15;\n  int <span class=\"supfact\">s</span>[Number];\n  __int64 v17;\n  _BYTE *v18;\n  char v19;\n  __int16 v20;\n  unsigned __int8 v21;\n  char *v22;\n  v8 = (_BYTE *)a2;\n  v22 = &ipv6cp_gotoptions[Number * *a1];\n  memset(<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">v10</span> = *(_QWORD *)v22;\n  v11 = *((_QWORD *)v22 + Number);\n  v12 = *((_QWORD *)v22 + Number);\n  v13 = *((_QWORD *)v22 + Number);\n  v14 = *((_OWORD *)v22 + Number);\n  v15 = *((_DWORD *)v22 + Number);\n  if (*(_DWORD *)v22) {\n    v21 = Number;\n    if (a3 > Number && v21 == *(_BYTE *)(a2 + Number) &&\n        *(_BYTE *)a2 == Number) {\n      a3 -= v21;\n      v17 = *(_QWORD *)(a2 + Number);\n      v8 = (_BYTE *)(a2 + Number);\n      <span class=\"supfact\">s</span>[Number] = Number;\n      if (*((_DWORD *)v22 + Number)) {\n        while (!v17 || v17 == *(_QWORD *)(v22 + Number)) {\n          LODWORD(v17) = magic();\n          HIDWORD(v17) = magic();\n          LOBYTE(v17) = v17 & Number;\n        }\n        *(_QWORD *)((char *)&v14 + Number) = v17;\n      }\n    }\n  }\n  if (*((_DWORD *)v22 + Number)) {\n    v21 = v8[Number];\n    if (v21 == Number && a3 >= Number && *v8 == Number) {\n      a3 -= v21;\n      v20 = (unsigned __int8)v8[Number] << Number;\n      v3 = v8 + Number;\n      v8 += Number;\n      v20 |= *v3;\n      <span class=\"supfact\">s</span>[Number] = Number;\n      HIDWORD(v13) = Number;\n    }\n  }\n  while (a3 > Number) {\n    v19 = *v8;\n    v4 = v8 + Number;\n    v9 = (__int64 *)(v8 + Number);\n    v21 = *v4;\n    if (v21 <= Number)\n      return Number L;\n    a3 -= v21;\n    if (a3 < Number)\n      return Number L;\n    v18 = (char *)v9 + v21 - Number;\n    if (v19 == Number) {\n      if (*(_DWORD *)v22 || <span class=\"supfact\">s</span>[Number] || v21 != Number)\n        return Number L;\n      LODWORD(<span class=\"supfact\">v10</span>) = Number;\n      v17 = *v9;\n      if (*((_DWORD *)v22 + Number)) {\n        while (!v17 || v17 == *(_QWORD *)(v22 + Number)) {\n          LODWORD(v17) = magic();\n          HIDWORD(v17) = magic();\n          LOBYTE(v17) = v17 & Number;\n        }\n        *(_QWORD *)((char *)&v14 + Number) = v17;\n      }\n      <span class=\"supfact\">s</span>[Number] = Number;\n    } else if (v19 == Number) {\n      if (*((_DWORD *)v22 + Number) || <span class=\"supfact\">s</span>[Number] ||\n          v21 != Number)\n        return Number L;\n      <span class=\"supfact\">s</span>[Number] = Number;\n    }\n    v8 = v18;\n  }\n  if (a3)\n    return Number L;\n  if (a1[Number] != Number) {\n    v5 = v22;\n    *(_QWORD *)v22 = <span class=\"supfact\">v10</span>;\n    *((_QWORD *)v5 + Number) = v11;\n    *((_QWORD *)v5 + Number) = v12;\n    *((_QWORD *)v5 + Number) = v13;\n    *((_OWORD *)v5 + Number) = v14;\n    *((_DWORD *)v5 + Number) = v15;\n  }\n  return Number L;\n}", "code_t": "int __cdecl ipv6cp_nakci(fsm_0 *f, u_char *p, int len) {\n  unsigned __int8 *v3;\n  u_char *v4;\n  u_char *pa;\n  eui64_t *pb;\n  ipv6cp_options_0 <span class=\"supfact\">trya</span>;\n  ipv6cp_options_0 <span class=\"supfact\">no</span>;\n  eui64_t ifaceid;\n  u_char *next;\n  u_char citype;\n  u_short cishort;\n  u_char cilen;\n  ipv6cp_options_0 *go;\n  pa = p;\n  go = (ipv6cp_options_0 *)&ipv6cp_gotoptions[Number * f->unit];\n  memset(&<span class=\"supfact\">no</span>, Number, sizeof(<span class=\"supfact\">no</span>));\n  <span class=\"supfact\">trya</span> = *go;\n  if (go->neg_ifaceid) {\n    cilen = Number;\n    if (len > Number && cilen == p[Number] && *p == Number) {\n      len -= cilen;\n      ifaceid = *(eui64_t *)(p + Number);\n      pa = p + Number;\n      <span class=\"supfact\">no</span>.neg_ifaceid = Number;\n      if (go->accept_local) {\n        while (!*(_QWORD *)&ifaceid ||\n               *(_QWORD *)&ifaceid == *(_QWORD *)&go->hisid) {\n          ifaceid.e32[Number] = magic();\n          ifaceid.e32[Number] = magic();\n          ifaceid.e8[Number] &= Number;\n        }\n        <span class=\"supfact\">trya</span>.ourid = ifaceid;\n      }\n    }\n  }\n  if (go->neg_vj) {\n    cilen = pa[Number];\n    if (cilen == Number && len >= Number && *pa == Number) {\n      len -= cilen;\n      cishort = pa[Number] << Number;\n      v3 = pa + Number;\n      pa += Number;\n      cishort |= *v3;\n      <span class=\"supfact\">no</span>.neg_vj = Number;\n      <span class=\"supfact\">trya</span>.neg_vj = Number;\n    }\n  }\n  while (len > Number) {\n    citype = *pa;\n    v4 = pa + Number;\n    pb = (eui64_t *)(pa + Number);\n    cilen = *v4;\n    if (cilen <= Number)\n      return Number;\n    len -= cilen;\n    if (len < Number)\n      return Number;\n    next = (u_char *)pb + cilen - Number;\n    if (citype == Number) {\n      if (go->neg_ifaceid || <span class=\"supfact\">no</span>.neg_ifaceid || cilen != Number)\n        return Number;\n      <span class=\"supfact\">trya</span>.neg_ifaceid = Number;\n      ifaceid = *pb;\n      if (go->accept_local) {\n        while (!*(_QWORD *)&ifaceid ||\n               *(_QWORD *)&ifaceid == *(_QWORD *)&go->hisid) {\n          ifaceid.e32[Number] = magic();\n          ifaceid.e32[Number] = magic();\n          ifaceid.e8[Number] &= Number;\n        }\n        <span class=\"supfact\">trya</span>.ourid = ifaceid;\n      }\n      <span class=\"supfact\">no</span>.neg_ifaceid = Number;\n    } else if (citype == Number) {\n      if (go->neg_vj || <span class=\"supfact\">no</span>.neg_vj || cilen != Number)\n        return Number;\n      <span class=\"supfact\">no</span>.neg_vj = Number;\n    }\n    pa = next;\n  }\n  if (len)\n    return Number;\n  if (f->state != Number)\n    *go = <span class=\"supfact\">trya</span>;\n  return Number;\n}", "var": [{"name": "v10", "type": "__unk__", "pred_name": "trya", "ref_name": "trya", "ref_type": "struct ipv6cp_options_0 { int neg_ifaceid; int req_ifaceid; int accept_local; int opt_local; int opt_remote; int use_ip; int use_persistent; int neg_vj; u_short vj_protocol; PADDING (2); eui64_t ourid; eui64_t hisid; }"}, {"name": "s", "type": "__unk__", "pred_name": "no", "ref_name": "no", "ref_type": "struct ipv6cp_options_0 { int neg_ifaceid; int req_ifaceid; int accept_local; int opt_local; int opt_remote; int use_ip; int use_persistent; int neg_vj; u_short vj_protocol; PADDING (2); eui64_t ourid; eui64_t hisid; }"}], "body_in_train": false}, {"repo_owner": "jhuttner", "repo_name": "cgit", "path": "jhuttner/cgit/3fb61587963d61d47db6dcb4dd7d9628191c5229a2c352ac80027d83c7b88abd", "path_in_repo": "jhuttner/cgit/git/builtin/remote.o", "objdump": "00000000000018f7 <mv>:\n    18f7:\t55                   \tpush   %rbp\n    18f8:\t48 89 e5             \tmov    %rsp,%rbp\n    18fb:\t41 54                \tpush   %r12\n    18fd:\t53                   \tpush   %rbx\n    18fe:\t48 81 ec 60 01 00 00 \tsub    $0x160,%rsp\n    1905:\t89 bd 9c fe ff ff    \tmov    %edi,-0x164(%rbp)\n    190b:\t48 89 b5 90 fe ff ff \tmov    %rsi,-0x170(%rbp)\n    1912:\t48 c7 85 60 ff ff ff \tmovq   $0x0,-0xa0(%rbp)\n    1919:\t00 00 00 00 \n    191d:\t48 c7 85 68 ff ff ff \tmovq   $0x0,-0x98(%rbp)\n    1924:\t00 00 00 00 \n    1928:\t48 c7 85 70 ff ff ff \tmovq   $0x0,-0x90(%rbp)\n    192f:\t00 00 00 00 \n    1933:\t48 c7 85 78 ff ff ff \tmovq   $0x0,-0x88(%rbp)\n    193a:\t00 00 00 00 \n    193e:\t48 c7 45 80 00 00 00 \tmovq   $0x0,-0x80(%rbp)\n    1945:\t00 \n    1946:\t48 c7 45 88 00 00 00 \tmovq   $0x0,-0x78(%rbp)\n    194d:\t00 \n    194e:\t48 c7 45 90 00 00 00 \tmovq   $0x0,-0x70(%rbp)\n    1955:\t00 \n    1956:\t48 c7 45 98 00 00 00 \tmovq   $0x0,-0x68(%rbp)\n    195d:\t00 \n    195e:\t48 c7 85 40 ff ff ff \tmovq   $0x0,-0xc0(%rbp)\n    1965:\t00 00 00 00 \n    1969:\t48 c7 85 48 ff ff ff \tmovq   $0x0,-0xb8(%rbp)\n    1970:\t00 00 00 00 \n    1974:\t48 c7 85 50 ff ff ff \tmovq   $0x0,-0xb0(%rbp)\n    197b:\t00 00 00 00 \n    197f:\t48 c7 85 20 ff ff ff \tmovq   $0x0,-0xe0(%rbp)\n    1986:\t00 00 00 00 \n    198a:\t48 c7 85 28 ff ff ff \tmovq   $0x0,-0xd8(%rbp)\n    1991:\t00 00 00 00 \n    1995:\t48 c7 85 30 ff ff ff \tmovq   $0x0,-0xd0(%rbp)\n    199c:\t00 00 00 00 \n    19a0:\t48 c7 85 00 ff ff ff \tmovq   $0x0,-0x100(%rbp)\n    19a7:\t00 00 00 00 \n    19ab:\t48 c7 85 08 ff ff ff \tmovq   $0x0,-0xf8(%rbp)\n    19b2:\t00 00 00 00 \n    19b6:\t48 c7 85 10 ff ff ff \tmovq   $0x0,-0xf0(%rbp)\n    19bd:\t00 00 00 00 \n    19c1:\t48 c7 85 e0 fe ff ff \tmovq   $0x0,-0x120(%rbp)\n    19c8:\t00 00 00 00 \n    19cc:\tc7 85 e8 fe ff ff 00 \tmovl   $0x0,-0x118(%rbp)\n    19d3:\t00 00 00 \n    19d6:\tc7 85 ec fe ff ff 00 \tmovl   $0x0,-0x114(%rbp)\n    19dd:\t00 00 00 \n    19e0:\t0f b6 85 f0 fe ff ff \tmovzbl -0x110(%rbp),%eax\n    19e7:\t83 e0 fe             \tand    $0xfffffffe,%eax\n    19ea:\t88 85 f0 fe ff ff    \tmov    %al,-0x110(%rbp)\n    19f0:\t83 bd 9c fe ff ff 03 \tcmpl   $0x3,-0x164(%rbp)\n    19f7:\t74 14                \tje     1a0d <mv+0x116>\n    19f9:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    1a00:\t48 89 c6             \tmov    %rax,%rsi\n    1a03:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1a08:\te8 00 00 00 00       \tcallq  1a0d <mv+0x116>\n    1a0d:\t48 8b 85 90 fe ff ff \tmov    -0x170(%rbp),%rax\n    1a14:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a18:\t48 89 85 c0 fe ff ff \tmov    %rax,-0x140(%rbp)\n    1a1f:\t48 8b 85 90 fe ff ff \tmov    -0x170(%rbp),%rax\n    1a26:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1a2a:\t48 89 85 c8 fe ff ff \tmov    %rax,-0x138(%rbp)\n    1a31:\t48 8d 85 e0 fe ff ff \tlea    -0x120(%rbp),%rax\n    1a38:\t48 89 85 d0 fe ff ff \tmov    %rax,-0x130(%rbp)\n    1a3f:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    1a46:\t48 89 c7             \tmov    %rax,%rdi\n    1a49:\te8 00 00 00 00       \tcallq  1a4e <mv+0x157>\n    1a4e:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    1a52:\t48 83 7d e0 00       \tcmpq   $0x0,-0x20(%rbp)\n    1a57:\t75 19                \tjne    1a72 <mv+0x17b>\n    1a59:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    1a60:\t48 89 c6             \tmov    %rax,%rsi\n    1a63:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1a68:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1a6d:\te8 00 00 00 00       \tcallq  1a72 <mv+0x17b>\n    1a72:\t48 8b 95 c8 fe ff ff \tmov    -0x138(%rbp),%rdx\n    1a79:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    1a80:\t48 89 d6             \tmov    %rdx,%rsi\n    1a83:\t48 89 c7             \tmov    %rax,%rdi\n    1a86:\te8 00 00 00 00       \tcallq  1a8b <mv+0x194>\n    1a8b:\t85 c0                \ttest   %eax,%eax\n    1a8d:\t75 1c                \tjne    1aab <mv+0x1b4>\n    1a8f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1a93:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1a96:\t85 c0                \ttest   %eax,%eax\n    1a98:\t74 11                \tje     1aab <mv+0x1b4>\n    1a9a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1a9e:\t48 89 c7             \tmov    %rax,%rdi\n    1aa1:\te8 c7 fb ff ff       \tcallq  166d <migrate_file>\n    1aa6:\te9 40 07 00 00       \tjmpq   21eb <mv+0x8f4>\n    1aab:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    1ab2:\t48 89 c7             \tmov    %rax,%rdi\n    1ab5:\te8 00 00 00 00       \tcallq  1aba <mv+0x1c3>\n    1aba:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    1abe:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    1ac3:\t74 30                \tje     1af5 <mv+0x1fe>\n    1ac5:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1ac9:\t8b 40 20             \tmov    0x20(%rax),%eax\n    1acc:\t83 f8 01             \tcmp    $0x1,%eax\n    1acf:\t7f 0b                \tjg     1adc <mv+0x1e5>\n    1ad1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1ad5:\t8b 40 60             \tmov    0x60(%rax),%eax\n    1ad8:\t85 c0                \ttest   %eax,%eax\n    1ada:\t74 19                \tje     1af5 <mv+0x1fe>\n    1adc:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    1ae3:\t48 89 c6             \tmov    %rax,%rsi\n    1ae6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1aeb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1af0:\te8 00 00 00 00       \tcallq  1af5 <mv+0x1fe>\n    1af5:\t48 8b 95 c8 fe ff ff \tmov    -0x138(%rbp),%rdx\n    1afc:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1b03:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b08:\t48 89 c7             \tmov    %rax,%rdi\n    1b0b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b10:\te8 00 00 00 00       \tcallq  1b15 <mv+0x21e>\n    1b15:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1b1c:\t48 89 c7             \tmov    %rax,%rdi\n    1b1f:\te8 00 00 00 00       \tcallq  1b24 <mv+0x22d>\n    1b24:\t85 c0                \ttest   %eax,%eax\n    1b26:\t75 19                \tjne    1b41 <mv+0x24a>\n    1b28:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    1b2f:\t48 89 c6             \tmov    %rax,%rsi\n    1b32:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1b37:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b3c:\te8 00 00 00 00       \tcallq  1b41 <mv+0x24a>\n    1b41:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1b48:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b4d:\t48 89 c7             \tmov    %rax,%rdi\n    1b50:\te8 fa e4 ff ff       \tcallq  4f <strbuf_setlen>\n    1b55:\t48 8b 95 c0 fe ff ff \tmov    -0x140(%rbp),%rdx\n    1b5c:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1b63:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b68:\t48 89 c7             \tmov    %rax,%rdi\n    1b6b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b70:\te8 00 00 00 00       \tcallq  1b75 <mv+0x27e>\n    1b75:\t48 8b 95 c8 fe ff ff \tmov    -0x138(%rbp),%rdx\n    1b7c:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    1b83:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1b88:\t48 89 c7             \tmov    %rax,%rdi\n    1b8b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b90:\te8 00 00 00 00       \tcallq  1b95 <mv+0x29e>\n    1b95:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n    1b9c:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1ba3:\t48 89 d6             \tmov    %rdx,%rsi\n    1ba6:\t48 89 c7             \tmov    %rax,%rdi\n    1ba9:\te8 00 00 00 00       \tcallq  1bae <mv+0x2b7>\n    1bae:\t85 c0                \ttest   %eax,%eax\n    1bb0:\t7f 25                \tjg     1bd7 <mv+0x2e0>\n    1bb2:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n    1bb9:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1bc0:\t48 89 c6             \tmov    %rax,%rsi\n    1bc3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1bc8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1bcd:\te8 00 00 00 00       \tcallq  1bd2 <mv+0x2db>\n    1bd2:\te9 14 06 00 00       \tjmpq   21eb <mv+0x8f4>\n    1bd7:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1bde:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1be3:\t48 89 c7             \tmov    %rax,%rdi\n    1be6:\te8 64 e4 ff ff       \tcallq  4f <strbuf_setlen>\n    1beb:\t48 8b 95 c8 fe ff ff \tmov    -0x138(%rbp),%rdx\n    1bf2:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1bf9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1bfe:\t48 89 c7             \tmov    %rax,%rdi\n    1c01:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c06:\te8 00 00 00 00       \tcallq  1c0b <mv+0x314>\n    1c0b:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1c12:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    1c17:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1c1c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c21:\t48 89 c7             \tmov    %rax,%rdi\n    1c24:\te8 00 00 00 00       \tcallq  1c29 <mv+0x332>\n    1c29:\t85 c0                \ttest   %eax,%eax\n    1c2b:\t74 1e                \tje     1c4b <mv+0x354>\n    1c2d:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1c34:\t48 89 c6             \tmov    %rax,%rsi\n    1c37:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1c3c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c41:\te8 00 00 00 00       \tcallq  1c46 <mv+0x34f>\n    1c46:\te9 a0 05 00 00       \tjmpq   21eb <mv+0x8f4>\n    1c4b:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    1c52:\te9 fc 00 00 00       \tjmpq   1d53 <mv+0x45c>\n    1c57:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    1c5e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1c63:\t48 89 c7             \tmov    %rax,%rdi\n    1c66:\te8 e4 e3 ff ff       \tcallq  4f <strbuf_setlen>\n    1c6b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1c6f:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n    1c73:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    1c76:\t48 63 d2             \tmovslq %edx,%rdx\n    1c79:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    1c7d:\t48 01 d0             \tadd    %rdx,%rax\n    1c80:\t48 8b 10             \tmov    (%rax),%rdx\n    1c83:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    1c8a:\t48 89 d6             \tmov    %rdx,%rsi\n    1c8d:\t48 89 c7             \tmov    %rax,%rdi\n    1c90:\te8 8b e4 ff ff       \tcallq  120 <strbuf_addstr>\n    1c95:\t48 8b 95 c0 fe ff ff \tmov    -0x140(%rbp),%rdx\n    1c9c:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n    1ca3:\t48 89 d6             \tmov    %rdx,%rsi\n    1ca6:\t48 89 c7             \tmov    %rax,%rdi\n    1ca9:\te8 00 00 00 00       \tcallq  1cae <mv+0x3b7>\n    1cae:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    1cb2:\t48 83 7d a8 00       \tcmpq   $0x0,-0x58(%rbp)\n    1cb7:\t74 54                \tje     1d0d <mv+0x416>\n    1cb9:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    1cc0:\t48 89 c7             \tmov    %rax,%rdi\n    1cc3:\te8 00 00 00 00       \tcallq  1cc8 <mv+0x3d1>\n    1cc8:\t49 89 c4             \tmov    %rax,%r12\n    1ccb:\t48 8b 9d c8 fe ff ff \tmov    -0x138(%rbp),%rbx\n    1cd2:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    1cd9:\t48 89 c7             \tmov    %rax,%rdi\n    1cdc:\te8 00 00 00 00       \tcallq  1ce1 <mv+0x3ea>\n    1ce1:\t48 89 c2             \tmov    %rax,%rdx\n    1ce4:\t48 8b 85 30 ff ff ff \tmov    -0xd0(%rbp),%rax\n    1ceb:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n    1cef:\t48 29 c1             \tsub    %rax,%rcx\n    1cf2:\t48 89 c8             \tmov    %rcx,%rax\n    1cf5:\t48 89 c6             \tmov    %rax,%rsi\n    1cf8:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    1cff:\t4d 89 e0             \tmov    %r12,%r8\n    1d02:\t48 89 d9             \tmov    %rbx,%rcx\n    1d05:\t48 89 c7             \tmov    %rax,%rdi\n    1d08:\te8 00 00 00 00       \tcallq  1d0d <mv+0x416>\n    1d0d:\t48 8b b5 30 ff ff ff \tmov    -0xd0(%rbp),%rsi\n    1d14:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1d1b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    1d20:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1d25:\t48 89 c7             \tmov    %rax,%rdi\n    1d28:\te8 00 00 00 00       \tcallq  1d2d <mv+0x436>\n    1d2d:\t85 c0                \ttest   %eax,%eax\n    1d2f:\t74 1e                \tje     1d4f <mv+0x458>\n    1d31:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1d38:\t48 89 c6             \tmov    %rax,%rsi\n    1d3b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1d40:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1d45:\te8 00 00 00 00       \tcallq  1d4a <mv+0x453>\n    1d4a:\te9 9c 04 00 00       \tjmpq   21eb <mv+0x8f4>\n    1d4f:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    1d53:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1d57:\t8b 40 60             \tmov    0x60(%rax),%eax\n    1d5a:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n    1d5d:\t0f 8c f4 fe ff ff    \tjl     1c57 <mv+0x360>\n    1d63:\te8 a6 ee ff ff       \tcallq  c0e <read_branches>\n    1d68:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    1d6f:\te9 c4 00 00 00       \tjmpq   1e38 <mv+0x541>\n    1d74:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d7b <mv+0x484>\n    1d7b:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    1d7e:\t48 63 d2             \tmovslq %edx,%rdx\n    1d81:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    1d85:\t48 01 d0             \tadd    %rdx,%rax\n    1d88:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n    1d8c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1d90:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1d94:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    1d98:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1d9c:\t48 8b 00             \tmov    (%rax),%rax\n    1d9f:\t48 85 c0             \ttest   %rax,%rax\n    1da2:\t0f 84 8c 00 00 00    \tje     1e34 <mv+0x53d>\n    1da8:\t48 8b 95 c0 fe ff ff \tmov    -0x140(%rbp),%rdx\n    1daf:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1db3:\t48 8b 00             \tmov    (%rax),%rax\n    1db6:\t48 89 d6             \tmov    %rdx,%rsi\n    1db9:\t48 89 c7             \tmov    %rax,%rdi\n    1dbc:\te8 00 00 00 00       \tcallq  1dc1 <mv+0x4ca>\n    1dc1:\t85 c0                \ttest   %eax,%eax\n    1dc3:\t75 6f                \tjne    1e34 <mv+0x53d>\n    1dc5:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1dcc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1dd1:\t48 89 c7             \tmov    %rax,%rdi\n    1dd4:\te8 76 e2 ff ff       \tcallq  4f <strbuf_setlen>\n    1dd9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    1ddd:\t48 8b 10             \tmov    (%rax),%rdx\n    1de0:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1de7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1dec:\t48 89 c7             \tmov    %rax,%rdi\n    1def:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1df4:\te8 00 00 00 00       \tcallq  1df9 <mv+0x502>\n    1df9:\t48 8b 95 c8 fe ff ff \tmov    -0x138(%rbp),%rdx\n    1e00:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1e07:\t48 89 d6             \tmov    %rdx,%rsi\n    1e0a:\t48 89 c7             \tmov    %rax,%rdi\n    1e0d:\te8 00 00 00 00       \tcallq  1e12 <mv+0x51b>\n    1e12:\t85 c0                \ttest   %eax,%eax\n    1e14:\t74 1e                \tje     1e34 <mv+0x53d>\n    1e16:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    1e1d:\t48 89 c6             \tmov    %rax,%rsi\n    1e20:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1e25:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1e2a:\te8 00 00 00 00       \tcallq  1e2f <mv+0x538>\n    1e2f:\te9 b7 03 00 00       \tjmpq   21eb <mv+0x8f4>\n    1e34:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    1e38:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 1e3e <mv+0x547>\n    1e3e:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    1e41:\t39 c2                \tcmp    %eax,%edx\n    1e43:\t0f 87 2b ff ff ff    \tja     1d74 <mv+0x47d>\n    1e49:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n    1e50:\t48 89 c6             \tmov    %rax,%rsi\n    1e53:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1e58:\te8 00 00 00 00       \tcallq  1e5d <mv+0x566>\n    1e5d:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    1e64:\te9 8f 00 00 00       \tjmpq   1ef8 <mv+0x601>\n    1e69:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    1e70:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    1e73:\t48 63 d2             \tmovslq %edx,%rdx\n    1e76:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    1e7a:\t48 01 d0             \tadd    %rdx,%rax\n    1e7d:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n    1e81:\tc7 85 bc fe ff ff 00 \tmovl   $0x0,-0x144(%rbp)\n    1e88:\t00 00 00 \n    1e8b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1e8f:\t48 8b 00             \tmov    (%rax),%rax\n    1e92:\t48 8d 95 bc fe ff ff \tlea    -0x144(%rbp),%rdx\n    1e99:\t48 8d b5 a0 fe ff ff \tlea    -0x160(%rbp),%rsi\n    1ea0:\t48 89 d1             \tmov    %rdx,%rcx\n    1ea3:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1ea8:\t48 89 c7             \tmov    %rax,%rdi\n    1eab:\te8 00 00 00 00       \tcallq  1eb0 <mv+0x5b9>\n    1eb0:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n    1eb6:\t83 e0 01             \tand    $0x1,%eax\n    1eb9:\t85 c0                \ttest   %eax,%eax\n    1ebb:\t74 36                \tje     1ef3 <mv+0x5fc>\n    1ebd:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1ec1:\t48 8b 00             \tmov    (%rax),%rax\n    1ec4:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1ec9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1ece:\t48 89 c7             \tmov    %rax,%rdi\n    1ed1:\te8 00 00 00 00       \tcallq  1ed6 <mv+0x5df>\n    1ed6:\t85 c0                \ttest   %eax,%eax\n    1ed8:\t74 1a                \tje     1ef4 <mv+0x5fd>\n    1eda:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1ede:\t48 8b 00             \tmov    (%rax),%rax\n    1ee1:\t48 89 c6             \tmov    %rax,%rsi\n    1ee4:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    1ee9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1eee:\te8 00 00 00 00       \tcallq  1ef3 <mv+0x5fc>\n    1ef3:\t90                   \tnop\n    1ef4:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    1ef8:\t8b 95 e8 fe ff ff    \tmov    -0x118(%rbp),%edx\n    1efe:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    1f01:\t39 c2                \tcmp    %eax,%edx\n    1f03:\t0f 87 60 ff ff ff    \tja     1e69 <mv+0x572>\n    1f09:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    1f10:\te9 18 01 00 00       \tjmpq   202d <mv+0x736>\n    1f15:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    1f1c:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    1f1f:\t48 63 d2             \tmovslq %edx,%rdx\n    1f22:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    1f26:\t48 01 d0             \tadd    %rdx,%rax\n    1f29:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    1f2d:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1f31:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1f35:\t48 85 c0             \ttest   %rax,%rax\n    1f38:\t0f 85 ea 00 00 00    \tjne    2028 <mv+0x731>\n    1f3e:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1f45:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1f4a:\t48 89 c7             \tmov    %rax,%rdi\n    1f4d:\te8 fd e0 ff ff       \tcallq  4f <strbuf_setlen>\n    1f52:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1f56:\t48 8b 10             \tmov    (%rax),%rdx\n    1f59:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1f60:\t48 89 d6             \tmov    %rdx,%rsi\n    1f63:\t48 89 c7             \tmov    %rax,%rdi\n    1f66:\te8 b5 e1 ff ff       \tcallq  120 <strbuf_addstr>\n    1f6b:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    1f72:\t48 89 c7             \tmov    %rax,%rdi\n    1f75:\te8 00 00 00 00       \tcallq  1f7a <mv+0x683>\n    1f7a:\t49 89 c4             \tmov    %rax,%r12\n    1f7d:\t48 8b 9d c8 fe ff ff \tmov    -0x138(%rbp),%rbx\n    1f84:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    1f8b:\t48 89 c7             \tmov    %rax,%rdi\n    1f8e:\te8 00 00 00 00       \tcallq  1f93 <mv+0x69c>\n    1f93:\t48 89 c2             \tmov    %rax,%rdx\n    1f96:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    1f9d:\t4d 89 e0             \tmov    %r12,%r8\n    1fa0:\t48 89 d9             \tmov    %rbx,%rcx\n    1fa3:\tbe 0d 00 00 00       \tmov    $0xd,%esi\n    1fa8:\t48 89 c7             \tmov    %rax,%rdi\n    1fab:\te8 00 00 00 00       \tcallq  1fb0 <mv+0x6b9>\n    1fb0:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    1fb7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1fbc:\t48 89 c7             \tmov    %rax,%rdi\n    1fbf:\te8 8b e0 ff ff       \tcallq  4f <strbuf_setlen>\n    1fc4:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n    1fcb:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1fcf:\t48 8b 10             \tmov    (%rax),%rdx\n    1fd2:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    1fd9:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1fde:\t48 89 c7             \tmov    %rax,%rdi\n    1fe1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1fe6:\te8 00 00 00 00       \tcallq  1feb <mv+0x6f4>\n    1feb:\t48 8b 95 30 ff ff ff \tmov    -0xd0(%rbp),%rdx\n    1ff2:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n    1ff9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1ffd:\t48 8b 00             \tmov    (%rax),%rax\n    2000:\t48 89 ce             \tmov    %rcx,%rsi\n    2003:\t48 89 c7             \tmov    %rax,%rdi\n    2006:\te8 00 00 00 00       \tcallq  200b <mv+0x714>\n    200b:\t85 c0                \ttest   %eax,%eax\n    200d:\t74 1a                \tje     2029 <mv+0x732>\n    200f:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    2013:\t48 8b 00             \tmov    (%rax),%rax\n    2016:\t48 89 c6             \tmov    %rax,%rsi\n    2019:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    201e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2023:\te8 00 00 00 00       \tcallq  2028 <mv+0x731>\n    2028:\t90                   \tnop\n    2029:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    202d:\t8b 95 e8 fe ff ff    \tmov    -0x118(%rbp),%edx\n    2033:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    2036:\t39 c2                \tcmp    %eax,%edx\n    2038:\t0f 87 d7 fe ff ff    \tja     1f15 <mv+0x61e>\n    203e:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n    2045:\te9 8b 01 00 00       \tjmpq   21d5 <mv+0x8de>\n    204a:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    2051:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n    2054:\t48 63 d2             \tmovslq %edx,%rdx\n    2057:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    205b:\t48 01 d0             \tadd    %rdx,%rax\n    205e:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    2062:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2066:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    206a:\t48 85 c0             \ttest   %rax,%rax\n    206d:\t0f 84 5d 01 00 00    \tje     21d0 <mv+0x8d9>\n    2073:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    207a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    207f:\t48 89 c7             \tmov    %rax,%rdi\n    2082:\te8 c8 df ff ff       \tcallq  4f <strbuf_setlen>\n    2087:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    208b:\t48 8b 10             \tmov    (%rax),%rdx\n    208e:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    2095:\t48 89 d6             \tmov    %rdx,%rsi\n    2098:\t48 89 c7             \tmov    %rax,%rdi\n    209b:\te8 80 e0 ff ff       \tcallq  120 <strbuf_addstr>\n    20a0:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    20a7:\t48 89 c7             \tmov    %rax,%rdi\n    20aa:\te8 00 00 00 00       \tcallq  20af <mv+0x7b8>\n    20af:\t49 89 c4             \tmov    %rax,%r12\n    20b2:\t48 8b 9d c8 fe ff ff \tmov    -0x138(%rbp),%rbx\n    20b9:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    20c0:\t48 89 c7             \tmov    %rax,%rdi\n    20c3:\te8 00 00 00 00       \tcallq  20c8 <mv+0x7d1>\n    20c8:\t48 89 c2             \tmov    %rax,%rdx\n    20cb:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    20d2:\t4d 89 e0             \tmov    %r12,%r8\n    20d5:\t48 89 d9             \tmov    %rbx,%rcx\n    20d8:\tbe 0d 00 00 00       \tmov    $0xd,%esi\n    20dd:\t48 89 c7             \tmov    %rax,%rdi\n    20e0:\te8 00 00 00 00       \tcallq  20e5 <mv+0x7ee>\n    20e5:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    20ec:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    20f1:\t48 89 c7             \tmov    %rax,%rdi\n    20f4:\te8 56 df ff ff       \tcallq  4f <strbuf_setlen>\n    20f9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    20fd:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    2101:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    2108:\t48 89 d6             \tmov    %rdx,%rsi\n    210b:\t48 89 c7             \tmov    %rax,%rdi\n    210e:\te8 0d e0 ff ff       \tcallq  120 <strbuf_addstr>\n    2113:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    211a:\t48 89 c7             \tmov    %rax,%rdi\n    211d:\te8 00 00 00 00       \tcallq  2122 <mv+0x82b>\n    2122:\t49 89 c4             \tmov    %rax,%r12\n    2125:\t48 8b 9d c8 fe ff ff \tmov    -0x138(%rbp),%rbx\n    212c:\t48 8b 85 c0 fe ff ff \tmov    -0x140(%rbp),%rax\n    2133:\t48 89 c7             \tmov    %rax,%rdi\n    2136:\te8 00 00 00 00       \tcallq  213b <mv+0x844>\n    213b:\t48 89 c2             \tmov    %rax,%rdx\n    213e:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    2145:\t4d 89 e0             \tmov    %r12,%r8\n    2148:\t48 89 d9             \tmov    %rbx,%rcx\n    214b:\tbe 0d 00 00 00       \tmov    $0xd,%esi\n    2150:\t48 89 c7             \tmov    %rax,%rdi\n    2153:\te8 00 00 00 00       \tcallq  2158 <mv+0x861>\n    2158:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n    215f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2164:\t48 89 c7             \tmov    %rax,%rdi\n    2167:\te8 e3 de ff ff       \tcallq  4f <strbuf_setlen>\n    216c:\t48 8b 8d 50 ff ff ff \tmov    -0xb0(%rbp),%rcx\n    2173:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    2177:\t48 8b 10             \tmov    (%rax),%rdx\n    217a:\t48 8d 85 00 ff ff ff \tlea    -0x100(%rbp),%rax\n    2181:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2186:\t48 89 c7             \tmov    %rax,%rdi\n    2189:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    218e:\te8 00 00 00 00       \tcallq  2193 <mv+0x89c>\n    2193:\t48 8b 95 10 ff ff ff \tmov    -0xf0(%rbp),%rdx\n    219a:\t48 8b 8d 30 ff ff ff \tmov    -0xd0(%rbp),%rcx\n    21a1:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    21a8:\t48 89 ce             \tmov    %rcx,%rsi\n    21ab:\t48 89 c7             \tmov    %rax,%rdi\n    21ae:\te8 00 00 00 00       \tcallq  21b3 <mv+0x8bc>\n    21b3:\t85 c0                \ttest   %eax,%eax\n    21b5:\t74 1a                \tje     21d1 <mv+0x8da>\n    21b7:\t48 8b 85 50 ff ff ff \tmov    -0xb0(%rbp),%rax\n    21be:\t48 89 c6             \tmov    %rax,%rsi\n    21c1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    21c6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    21cb:\te8 00 00 00 00       \tcallq  21d0 <mv+0x8d9>\n    21d0:\t90                   \tnop\n    21d1:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n    21d5:\t8b 95 e8 fe ff ff    \tmov    -0x118(%rbp),%edx\n    21db:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n    21de:\t39 c2                \tcmp    %eax,%edx\n    21e0:\t0f 87 64 fe ff ff    \tja     204a <mv+0x753>\n    21e6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    21eb:\t48 81 c4 60 01 00 00 \tadd    $0x160,%rsp\n    21f2:\t5b                   \tpop    %rbx\n    21f3:\t41 5c                \tpop    %r12\n    21f5:\t5d                   \tpop    %rbp\n    21f6:\tc3                   \tretq   ", "code_s": "void __fastcall mv(int a1, __int64 a2) {\n  const char *v2;\n  size_t v3;\n  size_t v4;\n  const char *v5;\n  const char *v6;\n  size_t v7;\n  char *v8;\n  size_t v9;\n  size_t v10;\n  char *v11;\n  size_t v12;\n  size_t v13;\n  char *v14;\n  size_t v15;\n  char v16[Number];\n  int v17;\n  char *<span class=\"supfact\">s1</span>;\n  char *s2;\n  __int64 *v20;\n  __int64 <span class=\"supfact\">v21</span>;\n  unsigned int v22;\n  int v23;\n  char v24;\n  unsigned __int64 <span class=\"supfact\">v25</span>[Number];\n  void *v26;\n  unsigned __int64 <span class=\"supfact\">v27</span>[Number];\n  char *format;\n  unsigned __int64 <span class=\"supfact\">v29</span>[Number];\n  int errnum[Number];\n  __int64 v31[Number];\n  char *v32;\n  const char **v33;\n  __int64 v34;\n  const char **v35;\n  const char **v36;\n  const char **v37;\n  __int64 v38;\n  const char **v39;\n  unsigned int i;\n  v31[Number] = Number L;\n  v31[Number] = Number L;\n  v31[Number] = Number L;\n  v31[Number] = Number L;\n  v31[Number] = Number L;\n  v31[Number] = Number L;\n  v31[Number] = Number L;\n  v31[Number] = Number L;\n  <span class=\"supfact\">v29</span>[Number] = Number L;\n  <span class=\"supfact\">v29</span>[Number] = Number L;\n  *(_QWORD *)errnum = &strbuf_slopbuf;\n  <span class=\"supfact\">v27</span>[Number] = Number L;\n  <span class=\"supfact\">v27</span>[Number] = Number L;\n  format = (char *)&strbuf_slopbuf;\n  <span class=\"supfact\">v25</span>[Number] = Number L;\n  <span class=\"supfact\">v25</span>[Number] = Number L;\n  v26 = &strbuf_slopbuf;\n  <span class=\"supfact\">v21</span> = Number L;\n  v22 = Number;\n  v23 = Number;\n  v24 &= Number;\n  if (a1 != Number)\n    usage_with_options(&builtin_remote_rename_usage, v31);\n  <span class=\"supfact\">s1</span> = *(char **)(a2 + Number);\n  s2 = *(char **)(a2 + Number);\n  v20 = &<span class=\"supfact\">v21</span>;\n  v39 = (const char **)remote_get(<span class=\"supfact\">s1</span>);\n  if (!v39)\n    die(String, <span class=\"supfact\">s1</span>);\n  if (!strcmp(<span class=\"supfact\">s1</span>, s2) && *((_DWORD *)v39 + Number)) {\n    migrate_file(v39);\n  } else {\n    v38 = remote_get(s2);\n    if (v38 && (*(int *)(v38 + Number) > Number || *(_DWORD *)(v38 + Number)))\n      die(String, s2);\n    strbuf_addf(<span class=\"supfact\">v29</span>, String, s2);\n    if (!(unsigned int)valid_fetch_refspec(*(_QWORD *)errnum))\n      die(String, s2);\n    strbuf_setlen(<span class=\"supfact\">v29</span>, Number L);\n    strbuf_addf(<span class=\"supfact\">v29</span>, String, <span class=\"supfact\">s1</span>);\n    strbuf_addf(<span class=\"supfact\">v27</span>, String, s2);\n    if ((int)git_config_rename_section(*(_QWORD *)errnum, format) > Number) {\n      strbuf_setlen(<span class=\"supfact\">v29</span>, Number L);\n      strbuf_addf(<span class=\"supfact\">v29</span>, String, s2);\n      if ((unsigned int)git_config_set_multivar(*(_QWORD *)errnum, Number L,\n                                                Number L, Number L)) {\n        error((int)String, errnum[Number], v2);\n      } else {\n        for (i = Number; (signed int)i < *((_DWORD *)v39 + Number); ++i) {\n          strbuf_setlen(<span class=\"supfact\">v27</span>, Number L);\n          strbuf_addstr((__int64)<span class=\"supfact\">v27</span>,\n                        *(const char **)&v39[Number][Number * i]);\n          v32 = strstr(format, <span class=\"supfact\">s1</span>);\n          if (v32) {\n            v3 = strlen(s2);\n            v4 = strlen(<span class=\"supfact\">s1</span>);\n            strbuf_splice(<span class=\"supfact\">v27</span>, v32 - format, v4, s2, v3);\n          }\n          if ((unsigned int)git_config_set_multivar(*(_QWORD *)errnum, format,\n                                                    String, Number L)) {\n            error((int)String, errnum[Number], v5);\n            return;\n          }\n        }\n        read_branches();\n        for (i = Number; dword_4AB8 > i; ++i) {\n          v34 = Number L * (int)i + branch_list;\n          v33 = *(const char ***)(v34 + Number);\n          if (*v33) {\n            if (!strcmp(*v33, <span class=\"supfact\">s1</span>)) {\n              strbuf_setlen(<span class=\"supfact\">v29</span>, Number L);\n              strbuf_addf(<span class=\"supfact\">v29</span>, String, *(const char **)v34);\n              if ((unsigned int)git_config_set(*(_QWORD *)errnum, s2)) {\n                error((int)String, errnum[Number], v6);\n                return;\n              }\n            }\n          }\n        }\n        for_each_ref(read_remote_branches, &<span class=\"supfact\">s1</span>);\n        for (i = Number; v22 > i; ++i) {\n          v35 = (const char **)(Number L * (int)i + <span class=\"supfact\">v21</span>);\n          v17 = Number;\n          resolve_ref(*v35, v16, Number L, &v17);\n          if ((v17 & Number) != Number &&\n              (unsigned int)delete_ref(*v35, Number L, Number L))\n            die(String, *v35);\n        }\n        for (i = Number; v22 > i; ++i) {\n          v36 = (const char **)(Number L * (int)i + <span class=\"supfact\">v21</span>);\n          if (!v36[Number]) {\n            strbuf_setlen(<span class=\"supfact\">v29</span>, Number L);\n            strbuf_addstr((__int64)<span class=\"supfact\">v29</span>, *v36);\n            v7 = strlen(s2);\n            v8 = s2;\n            v9 = strlen(<span class=\"supfact\">s1</span>);\n            strbuf_splice(<span class=\"supfact\">v29</span>, Number L, v9, v8, v7);\n            strbuf_setlen(<span class=\"supfact\">v27</span>, Number L);\n            strbuf_addf(<span class=\"supfact\">v27</span>, String, *v36,\n                        *(const char **)errnum);\n            if ((unsigned int)rename_ref(*v36, *(_QWORD *)errnum, format))\n              die(String, *v36);\n          }\n        }\n        for (i = Number; v22 > i; ++i) {\n          v37 = (const char **)(Number L * (int)i + <span class=\"supfact\">v21</span>);\n          if (v37[Number]) {\n            strbuf_setlen(<span class=\"supfact\">v29</span>, Number L);\n            strbuf_addstr((__int64)<span class=\"supfact\">v29</span>, *v37);\n            v10 = strlen(s2);\n            v11 = s2;\n            v12 = strlen(<span class=\"supfact\">s1</span>);\n            strbuf_splice(<span class=\"supfact\">v29</span>, Number L, v12, v11, v10);\n            strbuf_setlen(<span class=\"supfact\">v27</span>, Number L);\n            strbuf_addstr((__int64)<span class=\"supfact\">v27</span>, v37[Number]);\n            v13 = strlen(s2);\n            v14 = s2;\n            v15 = strlen(<span class=\"supfact\">s1</span>);\n            strbuf_splice(<span class=\"supfact\">v27</span>, Number L, v15, v14, v13);\n            strbuf_setlen(<span class=\"supfact\">v25</span>, Number L);\n            strbuf_addf(<span class=\"supfact\">v25</span>, String, *v37,\n                        *(const char **)errnum);\n            if ((unsigned int)create_symref(*(_QWORD *)errnum, format, v26))\n              die(String, *(const char **)errnum);\n          }\n        }\n      }\n    } else {\n      error((int)String, errnum[Number], format);\n    }\n  }\n}", "code_t": "int __cdecl mv(int argc, const char **argv) {\n  int result;\n  const char *v3;\n  size_t v4;\n  size_t v5;\n  const char *v6;\n  const char *v7;\n  size_t v8;\n  const char *v9;\n  size_t v10;\n  size_t v11;\n  const char *v12;\n  size_t v13;\n  size_t v14;\n  const char *v15;\n  size_t v16;\n  unsigned __int8 sha1[Number];\n  int flag;\n  rename_info <span class=\"supfact\">rename</span>;\n  string_list <span class=\"supfact\">remote_branches</span>;\n  strbuf <span class=\"supfact\">buf3</span>;\n  strbuf <span class=\"supfact\">buf2</span>;\n  strbuf <span class=\"supfact\">buf</span>;\n  option options[Number];\n  char *ptr;\n  branch_info *info;\n  string_list_item *item;\n  string_list_item *item_0;\n  string_list_item *item_1;\n  string_list_item *item_2;\n  remote *newremote;\n  remote *oldremote;\n  int i;\n  *(_QWORD *)&options[Number].type = Number L;\n  options[Number].long_name = Number L;\n  options[Number].value = Number L;\n  options[Number].argh = Number L;\n  options[Number].help = Number L;\n  *(_QWORD *)&options[Number].flags = Number L;\n  options[Number].callback = Number L;\n  options[Number].defval = Number L;\n  <span class=\"supfact\">buf</span>.alloc = Number L;\n  <span class=\"supfact\">buf</span>.len = Number L;\n  <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span> = (char *)&strbuf_slopbuf;\n  <span class=\"supfact\">buf2</span>.alloc = Number L;\n  <span class=\"supfact\">buf2</span>.len = Number L;\n  <span class=\"supfact\">buf2</span>.<span class=\"supfact\">buf</span> = (char *)&strbuf_slopbuf;\n  <span class=\"supfact\">buf3</span>.alloc = Number L;\n  <span class=\"supfact\">buf3</span>.len = Number L;\n  <span class=\"supfact\">buf3</span>.<span class=\"supfact\">buf</span> = (char *)&strbuf_slopbuf;\n  <span class=\"supfact\">remote_branches</span>.items = Number L;\n  <span class=\"supfact\">remote_branches</span>.nr = Number;\n  <span class=\"supfact\">remote_branches</span>.alloc = Number;\n  *((_BYTE *)&<span class=\"supfact\">remote_branches</span> + Number) &= Number;\n  if (argc != Number)\n    usage_with_options(builtin_remote_rename_usage, options);\n  <span class=\"supfact\">rename</span>.old = argv[Number];\n  <span class=\"supfact\">rename</span>.new = argv[Number];\n  <span class=\"supfact\">rename</span>.<span class=\"supfact\">remote_branches</span> =\n      &<span class=\"supfact\">remote_branches</span>;\n  oldremote = (remote *)remote_get(<span class=\"supfact\">rename</span>.old);\n  if (!oldremote)\n    die(String, <span class=\"supfact\">rename</span>.old);\n  if (!strcmp(<span class=\"supfact\">rename</span>.old, <span class=\"supfact\">rename</span>.new) &&\n      oldremote->origin)\n    return migrate_file(oldremote);\n  newremote = (remote *)remote_get(<span class=\"supfact\">rename</span>.new);\n  if (newremote && (newremote->url_nr > Number || newremote->fetch_refspec_nr))\n    die(String, <span class=\"supfact\">rename</span>.new);\n  strbuf_addf(&<span class=\"supfact\">buf</span>, String, <span class=\"supfact\">rename</span>.new);\n  if (!(unsigned int)valid_fetch_refspec(\n          <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>))\n    die(String, <span class=\"supfact\">rename</span>.new);\n  strbuf_setlen(&<span class=\"supfact\">buf</span>, Number L);\n  strbuf_addf(&<span class=\"supfact\">buf</span>, String, <span class=\"supfact\">rename</span>.old);\n  strbuf_addf(&<span class=\"supfact\">buf2</span>, String, <span class=\"supfact\">rename</span>.new);\n  if ((int)git_config_rename_section(<span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>,\n                                     <span class=\"supfact\">buf2</span>.<span class=\"supfact\">buf</span>) >\n      Number) {\n    strbuf_setlen(&<span class=\"supfact\">buf</span>, Number L);\n    strbuf_addf(&<span class=\"supfact\">buf</span>, String, <span class=\"supfact\">rename</span>.new);\n    if ((unsigned int)git_config_set_multivar(\n            <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>, Number L, Number L,\n            Number L)) {\n      error((int)String, (int)<span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>, v3);\n    } else {\n      for (i = Number; i < oldremote->fetch_refspec_nr; ++i) {\n        strbuf_setlen(&<span class=\"supfact\">buf2</span>, Number L);\n        strbuf_addstr(&<span class=\"supfact\">buf2</span>, oldremote->fetch_refspec[i]);\n        ptr = strstr(<span class=\"supfact\">buf2</span>.<span class=\"supfact\">buf</span>,\n                     <span class=\"supfact\">rename</span>.old);\n        if (ptr) {\n          v4 = strlen(<span class=\"supfact\">rename</span>.new);\n          v5 = strlen(<span class=\"supfact\">rename</span>.old);\n          strbuf_splice(&<span class=\"supfact\">buf2</span>,\n                        ptr - <span class=\"supfact\">buf2</span>.<span class=\"supfact\">buf</span>, v5,\n                        <span class=\"supfact\">rename</span>.new, v4);\n        }\n        if ((unsigned int)git_config_set_multivar(\n                <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>,\n                <span class=\"supfact\">buf2</span>.<span class=\"supfact\">buf</span>, String, Number L)) {\n          error((int)String, (int)<span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>, v6);\n          return result;\n        }\n      }\n      read_branches();\n      for (i = Number; branch_list.nr > i; ++i) {\n        item = &branch_list.items[i];\n        info = (branch_info *)item->util;\n        if (info->remote_name) {\n          if (!strcmp(info->remote_name, <span class=\"supfact\">rename</span>.old)) {\n            strbuf_setlen(&<span class=\"supfact\">buf</span>, Number L);\n            strbuf_addf(&<span class=\"supfact\">buf</span>, String, item->string);\n            if ((unsigned int)git_config_set(\n                    <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>,\n                    <span class=\"supfact\">rename</span>.new)) {\n              error((int)String, (int)<span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>,\n                    v7);\n              return result;\n            }\n          }\n        }\n      }\n      for_each_ref(read_remote_branches, &<span class=\"supfact\">rename</span>);\n      for (i = Number; <span class=\"supfact\">remote_branches</span>.nr > i; ++i) {\n        item_0 = &<span class=\"supfact\">remote_branches</span>.items[i];\n        flag = Number;\n        resolve_ref(item_0->string, sha1, Number L, &flag);\n        if ((flag & Number) != Number &&\n            (unsigned int)delete_ref(item_0->string, Number L, Number L))\n          die(String, item_0->string);\n      }\n      for (i = Number; <span class=\"supfact\">remote_branches</span>.nr > i; ++i) {\n        item_1 = &<span class=\"supfact\">remote_branches</span>.items[i];\n        if (!item_1->util) {\n          strbuf_setlen(&<span class=\"supfact\">buf</span>, Number L);\n          strbuf_addstr(&<span class=\"supfact\">buf</span>, item_1->string);\n          v8 = strlen(<span class=\"supfact\">rename</span>.new);\n          v9 = <span class=\"supfact\">rename</span>.new;\n          v10 = strlen(<span class=\"supfact\">rename</span>.old);\n          strbuf_splice(&<span class=\"supfact\">buf</span>, Number L, v10, v9, v8);\n          strbuf_setlen(&<span class=\"supfact\">buf2</span>, Number L);\n          strbuf_addf(&<span class=\"supfact\">buf2</span>, String, item_1->string,\n                      <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>);\n          if ((unsigned int)rename_ref(\n                  item_1->string, <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>,\n                  <span class=\"supfact\">buf2</span>.<span class=\"supfact\">buf</span>))\n            die(String, item_1->string);\n        }\n      }\n      for (i = Number; <span class=\"supfact\">remote_branches</span>.nr > i; ++i) {\n        item_2 = &<span class=\"supfact\">remote_branches</span>.items[i];\n        if (item_2->util) {\n          strbuf_setlen(&<span class=\"supfact\">buf</span>, Number L);\n          strbuf_addstr(&<span class=\"supfact\">buf</span>, item_2->string);\n          v11 = strlen(<span class=\"supfact\">rename</span>.new);\n          v12 = <span class=\"supfact\">rename</span>.new;\n          v13 = strlen(<span class=\"supfact\">rename</span>.old);\n          strbuf_splice(&<span class=\"supfact\">buf</span>, Number L, v13, v12, v11);\n          strbuf_setlen(&<span class=\"supfact\">buf2</span>, Number L);\n          strbuf_addstr(&<span class=\"supfact\">buf2</span>, (const char *)item_2->util);\n          v14 = strlen(<span class=\"supfact\">rename</span>.new);\n          v15 = <span class=\"supfact\">rename</span>.new;\n          v16 = strlen(<span class=\"supfact\">rename</span>.old);\n          strbuf_splice(&<span class=\"supfact\">buf2</span>, Number L, v16, v15, v14);\n          strbuf_setlen(&<span class=\"supfact\">buf3</span>, Number L);\n          strbuf_addf(&<span class=\"supfact\">buf3</span>, String, item_2->string,\n                      <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>);\n          if ((unsigned int)create_symref(\n                  <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>,\n                  <span class=\"supfact\">buf2</span>.<span class=\"supfact\">buf</span>,\n                  <span class=\"supfact\">buf3</span>.<span class=\"supfact\">buf</span>))\n            die(String, <span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>);\n        }\n      }\n      result = Number;\n    }\n  } else {\n    error((int)String, (int)<span class=\"supfact\">buf</span>.<span class=\"supfact\">buf</span>,\n          <span class=\"supfact\">buf2</span>.<span class=\"supfact\">buf</span>);\n  }\n  return result;\n}", "var": [{"name": "s1", "type": "const char *", "pred_name": "__unk__", "ref_name": "rename", "ref_type": "struct rename_info { const char * old; const char * new; string_list * remote_branches; }"}, {"name": "v21", "type": "struct string_list { string_list_item * items; unsigned int nr; unsigned int alloc; unsigned __int32 : 1 strdup_strings; PADDING (7); compare_strings_fn cmp; }", "pred_name": "__unk__", "ref_name": "remote_branches", "ref_type": "struct string_list { string_list_item * items; unsigned int nr; unsigned int alloc; unsigned __int32 : 1 strdup_strings; PADDING (8); }"}, {"name": "v25", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "pred_name": "buf3", "ref_name": "buf3", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}, {"name": "v27", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "pred_name": "buf2", "ref_name": "buf2", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}, {"name": "v29", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "pred_name": "buf", "ref_name": "buf", "ref_type": "struct strbuf { size_t alloc; size_t len; char * buf; }"}], "body_in_train": false}, {"repo_owner": "Hyperion4ik", "repo_name": "bsd_kernel", "path": "Hyperion4ik/bsd_kernel/45a13c27262dc81f068888215b1a289b9111eb53666e05a57cf192b65f0c94f4", "path_in_repo": "Hyperion4ik/bsd_kernel/contrib/groff/src/roff/troff/env.o", "objdump": "0000000000008af0 <_Z16temporary_indentv>:\n    8af0:\t53                   \tpush   %rbx\n    8af1:\tbe 6d 00 00 00       \tmov    $0x6d,%esi\n    8af6:\t48 83 ec 10          \tsub    $0x10,%rsp\n    8afa:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8b01 <_Z16temporary_indentv+0x11>\n    8b01:\t48 8d 7c 24 0c       \tlea    0xc(%rsp),%rdi\n    8b06:\tc7 44 24 0c 00 00 00 \tmovl   $0x0,0xc(%rsp)\n    8b0d:\t00 \n    8b0e:\t8b 90 84 00 00 00    \tmov    0x84(%rax),%edx\n    8b14:\te8 00 00 00 00       \tcallq  8b19 <_Z16temporary_indentv+0x29>\n    8b19:\t89 c3                \tmov    %eax,%ebx\n    8b1b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8b21 <_Z16temporary_indentv+0x31>\n    8b21:\t83 f8 1c             \tcmp    $0x1c,%eax\n    8b24:\t75 1f                \tjne    8b45 <_Z16temporary_indentv+0x55>\n    8b26:\teb 22                \tjmp    8b4a <_Z16temporary_indentv+0x5a>\n    8b28:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n    8b2f:\t00 \n    8b30:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    8b35:\te8 00 00 00 00       \tcallq  8b3a <_Z16temporary_indentv+0x4a>\n    8b3a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8b40 <_Z16temporary_indentv+0x50>\n    8b40:\t83 f8 1c             \tcmp    $0x1c,%eax\n    8b43:\t74 05                \tje     8b4a <_Z16temporary_indentv+0x5a>\n    8b45:\t83 f8 0d             \tcmp    $0xd,%eax\n    8b48:\t75 e6                \tjne    8b30 <_Z16temporary_indentv+0x40>\n    8b4a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8b50 <_Z16temporary_indentv+0x60>\n    8b50:\t85 c0                \ttest   %eax,%eax\n    8b52:\t75 24                \tjne    8b78 <_Z16temporary_indentv+0x88>\n    8b54:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8b5a <_Z16temporary_indentv+0x6a>\n    8b5a:\t39 44 24 0c          \tcmp    %eax,0xc(%rsp)\n    8b5e:\t7c 32                \tjl     8b92 <_Z16temporary_indentv+0xa2>\n    8b60:\t85 db                \ttest   %ebx,%ebx\n    8b62:\t75 57                \tjne    8bbb <_Z16temporary_indentv+0xcb>\n    8b64:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    8b69:\te8 00 00 00 00       \tcallq  8b6e <_Z16temporary_indentv+0x7e>\n    8b6e:\t48 83 c4 10          \tadd    $0x10,%rsp\n    8b72:\t5b                   \tpop    %rbx\n    8b73:\tc3                   \tretq   \n    8b74:\t0f 1f 40 00          \tnopl   0x0(%rax)\n    8b78:\t48 8b 3d 00 00 00 00 \tmov    0x0(%rip),%rdi        # 8b7f <_Z16temporary_indentv+0x8f>\n    8b7f:\t31 f6                \txor    %esi,%esi\n    8b81:\te8 00 00 00 00       \tcallq  8b86 <_Z16temporary_indentv+0x96>\n    8b86:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8b8c <_Z16temporary_indentv+0x9c>\n    8b8c:\t39 44 24 0c          \tcmp    %eax,0xc(%rsp)\n    8b90:\t7d ce                \tjge    8b60 <_Z16temporary_indentv+0x70>\n    8b92:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    8b98:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    8b9d:\tbf 40 00 00 00       \tmov    $0x40,%edi\n    8ba2:\t4c 89 c1             \tmov    %r8,%rcx\n    8ba5:\t4c 89 c2             \tmov    %r8,%rdx\n    8ba8:\te8 00 00 00 00       \tcallq  8bad <_Z16temporary_indentv+0xbd>\n    8bad:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8bb3 <_Z16temporary_indentv+0xc3>\n    8bb3:\t89 44 24 0c          \tmov    %eax,0xc(%rsp)\n    8bb7:\t85 db                \ttest   %ebx,%ebx\n    8bb9:\t74 a9                \tje     8b64 <_Z16temporary_indentv+0x74>\n    8bbb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8bc2 <_Z16temporary_indentv+0xd2>\n    8bc2:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n    8bc6:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    8bcb:\t89 90 88 00 00 00    \tmov    %edx,0x88(%rax)\n    8bd1:\tc7 80 8c 00 00 00 01 \tmovl   $0x1,0x8c(%rax)\n    8bd8:\t00 00 00 \n    8bdb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8be2 <_Z16temporary_indentv+0xf2>\n    8be2:\t48 8d 78 5c          \tlea    0x5c(%rax),%rdi\n    8be6:\te8 00 00 00 00       \tcallq  8beb <_Z16temporary_indentv+0xfb>\n    8beb:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    8bf0:\te8 00 00 00 00       \tcallq  8bf5 <_Z16temporary_indentv+0x105>\n    8bf5:\t48 83 c4 10          \tadd    $0x10,%rsp\n    8bf9:\t5b                   \tpop    %rbx\n    8bfa:\tc3                   \tretq   \n    8bfb:\t90                   \tnop\n    8bfc:\t0f 1f 40 00          \tnopl   0x0(%rax)", "code_s": "__int64 temporary_indent(void) {\n  int v0;\n  int i;\n  environment *v3;\n  int <span class=\"supfact\">v4</span>[Number];\n  <span class=\"supfact\">v4</span>[Number] = Number;\n  v0 = get_hunits(<span class=\"supfact\">v4</span>, Number L,\n                  *((unsigned int *)curenv + Number));\n  for (i = *((_DWORD *)&tok + Number); i != Number;\n       i = *((_DWORD *)&tok + Number)) {\n    if (i == Number)\n      break;\n    token next(&tok);\n  }\n  if (!break_flag) {\n    if (<span class=\"supfact\">v4</span>[Number] >= H0)\n      goto LABEL_7;\n  LABEL_10:\n    warning(Number L, String, &empty_errarg, &empty_errarg);\n    <span class=\"supfact\">v4</span>[Number] = H0;\n    if (!v0)\n      return token next(&tok);\n    goto LABEL_11;\n  }\n  environment do_break(curenv, Number);\n  if (<span class=\"supfact\">v4</span>[Number] < H0)\n    goto LABEL_10;\nLABEL_7:\n  if (!v0)\n    return token next(&tok);\nLABEL_11:\n  v3 = curenv;\n  *((_DWORD *)curenv + Number) = <span class=\"supfact\">v4</span>[Number];\n  *((_DWORD *)v3 + Number) = Number;\n  state_set incl(curdiv + Number L, Number L);\n  return token next(&tok);\n}", "code_t": "void __cdecl temporary_indent() {\n  int v0;\n  token token_type i;\n  environment *v2;\n  hunits <span class=\"supfact\">temp</span>;\n  <span class=\"supfact\">temp</span>.n = Number;\n  v0 = get_hunits(&<span class=\"supfact\">temp</span>, Number, curenv->indent);\n  for (i = tok.type; i != TOKEN_EOF; i = tok.type) {\n    if (i == TOKEN_NEWLINE)\n      break;\n    token next(&tok);\n  }\n  if (!break_flag) {\n    if (<span class=\"supfact\">temp</span>.n >= H0.n)\n      goto LABEL_7;\n  LABEL_10:\n    warning(WARN_RANGE, String, &empty_errarg, &empty_errarg, &empty_errarg);\n    <span class=\"supfact\">temp</span>.n = H0.n;\n    if (!v0)\n      goto LABEL_8;\n    goto LABEL_11;\n  }\n  environment do_break(curenv, Number);\n  if (<span class=\"supfact\">temp</span>.n < H0.n)\n    goto LABEL_10;\nLABEL_7:\n  if (!v0) {\n  LABEL_8:\n    token next(&tok);\n    return;\n  }\nLABEL_11:\n  v2 = curenv;\n  curenv->temporary_indent = <span class=\"supfact\">temp</span>;\n  v2->have_temporary_indent = Number;\n  state_set incl((state_set *)(curdiv + Number L), MTSM_TI);\n  token next(&tok);\n}", "var": [{"name": "v4", "type": "int[3]", "pred_name": "cv", "ref_name": "temp", "ref_type": "struct hunits { int n; }"}], "body_in_train": false}, {"repo_owner": "juj", "repo_name": "posixtestsuite", "path": "juj/posixtestsuite/659c1e792d3803b214fb60c8a3c2eaa967f756eaf959b1cb4abe1703e74e803d", "path_in_repo": "juj/posixtestsuite/functional/threads/pi_test/pitest-4", "objdump": "0000000000401549 <thread_fn>:\n  401549:\t55                   \tpush   %rbp\n  40154a:\t48 89 e5             \tmov    %rsp,%rbp\n  40154d:\t53                   \tpush   %rbx\n  40154e:\t48 83 ec 48          \tsub    $0x48,%rsp\n  401552:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n  401556:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  40155a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  40155e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401562:\t8b 40 20             \tmov    0x20(%rax),%eax\n  401565:\tba 01 00 00 00       \tmov    $0x1,%edx\n  40156a:\t89 c1                \tmov    %eax,%ecx\n  40156c:\td3 e2                \tshl    %cl,%edx\n  40156e:\t89 d0                \tmov    %edx,%eax\n  401570:\t48 98                \tcltq   \n  401572:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n  401576:\t48 8d 45 c8          \tlea    -0x38(%rbp),%rax\n  40157a:\t48 89 c2             \tmov    %rax,%rdx\n  40157d:\tbe 08 00 00 00       \tmov    $0x8,%esi\n  401582:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401587:\te8 24 fb ff ff       \tcallq  4010b0 <sched_setaffinity@plt>\n  40158c:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  40158f:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  401593:\t79 57                \tjns    4015ec <thread_fn+0xa3>\n  401595:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  401598:\t89 c7                \tmov    %eax,%edi\n  40159a:\te8 c1 fb ff ff       \tcallq  401160 <strerror@plt>\n  40159f:\t48 89 c2             \tmov    %rax,%rdx\n  4015a2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4015a6:\t8b 30                \tmov    (%rax),%esi\n  4015a8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4015ac:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n  4015b0:\t48 8b 05 e9 3c 00 00 \tmov    0x3ce9(%rip),%rax        # 4052a0 <stderr@@GLIBC_2.2.5>\n  4015b7:\t52                   \tpush   %rdx\n  4015b8:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  4015bb:\t52                   \tpush   %rdx\n  4015bc:\t41 89 f1             \tmov    %esi,%r9d\n  4015bf:\t49 89 c8             \tmov    %rcx,%r8\n  4015c2:\tb9 6a 00 00 00       \tmov    $0x6a,%ecx\n  4015c7:\tba 3f 31 40 00       \tmov    $0x40313f,%edx\n  4015cc:\tbe 50 31 40 00       \tmov    $0x403150,%esi\n  4015d1:\t48 89 c7             \tmov    %rax,%rdi\n  4015d4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4015d9:\te8 02 fb ff ff       \tcallq  4010e0 <fprintf@plt>\n  4015de:\t48 83 c4 10          \tadd    $0x10,%rsp\n  4015e2:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  4015e7:\te8 54 fb ff ff       \tcallq  401140 <exit@plt>\n  4015ec:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4015f0:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  4015f3:\t89 c3                \tmov    %eax,%ebx\n  4015f5:\te8 16 fb ff ff       \tcallq  401110 <pthread_self@plt>\n  4015fa:\t89 da                \tmov    %ebx,%edx\n  4015fc:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401601:\t48 89 c7             \tmov    %rax,%rdi\n  401604:\te8 b6 fc ff ff       \tcallq  4012bf <test_set_priority>\n  401609:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40160d:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  401611:\te8 6c fc ff ff       \tcallq  401282 <seconds_read>\n  401616:\tf2 0f 10 0d 0a 3d 00 \tmovsd  0x3d0a(%rip),%xmm1        # 405328 <base_time>\n  40161d:\t00 \n  40161e:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n  401622:\t48 8b 05 57 3c 00 00 \tmov    0x3c57(%rip),%rax        # 405280 <stdout@@GLIBC_2.2.5>\n  401629:\t48 89 da             \tmov    %rbx,%rdx\n  40162c:\tbe 93 31 40 00       \tmov    $0x403193,%esi\n  401631:\t48 89 c7             \tmov    %rax,%rdi\n  401634:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  401639:\te8 a2 fa ff ff       \tcallq  4010e0 <fprintf@plt>\n  40163e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401642:\t8b 08                \tmov    (%rax),%ecx\n  401644:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401648:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n  40164c:\t48 8b 05 4d 3c 00 00 \tmov    0x3c4d(%rip),%rax        # 4052a0 <stderr@@GLIBC_2.2.5>\n  401653:\tbe b0 31 40 00       \tmov    $0x4031b0,%esi\n  401658:\t48 89 c7             \tmov    %rax,%rdi\n  40165b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401660:\te8 7b fa ff ff       \tcallq  4010e0 <fprintf@plt>\n  401665:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401669:\tc7 40 2c 00 00 00 00 \tmovl   $0x0,0x2c(%rax)\n  401670:\t48 c7 45 d0 00 00 00 \tmovq   $0x0,-0x30(%rbp)\n  401677:\t00 \n  401678:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40167c:\t8b 40 08             \tmov    0x8(%rax),%eax\n  40167f:\t69 c0 40 42 0f 00    \timul   $0xf4240,%eax,%eax\n  401685:\t48 98                \tcltq   \n  401687:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  40168b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40168f:\t8b 00                \tmov    (%rax),%eax\n  401691:\t85 c0                \ttest   %eax,%eax\n  401693:\t0f 85 a2 00 00 00    \tjne    40173b <thread_fn+0x1f2>\n  401699:\tbf 00 53 40 00       \tmov    $0x405300,%edi\n  40169e:\te8 ed fa ff ff       \tcallq  401190 <pthread_mutex_lock@plt>\n  4016a3:\te9 93 00 00 00       \tjmpq   40173b <thread_fn+0x1f2>\n  4016a8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4016ac:\t48 83 c0 2c          \tadd    $0x2c,%rax\n  4016b0:\t48 89 c6             \tmov    %rax,%rsi\n  4016b3:\tbf 05 00 00 00       \tmov    $0x5,%edi\n  4016b8:\te8 2f fe ff ff       \tcallq  4014ec <do_work>\n  4016bd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4016c1:\t8b 40 08             \tmov    0x8(%rax),%eax\n  4016c4:\t85 c0                \ttest   %eax,%eax\n  4016c6:\t75 02                \tjne    4016ca <thread_fn+0x181>\n  4016c8:\teb 71                \tjmp    40173b <thread_fn+0x1f2>\n  4016ca:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4016ce:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4016d3:\t48 89 c7             \tmov    %rax,%rdi\n  4016d6:\te8 95 f9 ff ff       \tcallq  401070 <nanosleep@plt>\n  4016db:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  4016de:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  4016e2:\t79 57                \tjns    40173b <thread_fn+0x1f2>\n  4016e4:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4016e7:\t89 c7                \tmov    %eax,%edi\n  4016e9:\te8 72 fa ff ff       \tcallq  401160 <strerror@plt>\n  4016ee:\t48 89 c2             \tmov    %rax,%rdx\n  4016f1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4016f5:\t8b 30                \tmov    (%rax),%esi\n  4016f7:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4016fb:\t48 8b 48 18          \tmov    0x18(%rax),%rcx\n  4016ff:\t48 8b 05 9a 3b 00 00 \tmov    0x3b9a(%rip),%rax        # 4052a0 <stderr@@GLIBC_2.2.5>\n  401706:\t52                   \tpush   %rdx\n  401707:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  40170a:\t52                   \tpush   %rdx\n  40170b:\t41 89 f1             \tmov    %esi,%r9d\n  40170e:\t49 89 c8             \tmov    %rcx,%r8\n  401711:\tb9 80 00 00 00       \tmov    $0x80,%ecx\n  401716:\tba 3f 31 40 00       \tmov    $0x40313f,%edx\n  40171b:\tbe d0 31 40 00       \tmov    $0x4031d0,%esi\n  401720:\t48 89 c7             \tmov    %rax,%rdi\n  401723:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401728:\te8 b3 f9 ff ff       \tcallq  4010e0 <fprintf@plt>\n  40172d:\t48 83 c4 10          \tadd    $0x10,%rsp\n  401731:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  401736:\te8 05 fa ff ff       \tcallq  401140 <exit@plt>\n  40173b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40173f:\t8b 40 04             \tmov    0x4(%rax),%eax\n  401742:\t85 c0                \ttest   %eax,%eax\n  401744:\t0f 84 5e ff ff ff    \tje     4016a8 <thread_fn+0x15f>\n  40174a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40174e:\t8b 00                \tmov    (%rax),%eax\n  401750:\t85 c0                \ttest   %eax,%eax\n  401752:\t75 0a                \tjne    40175e <thread_fn+0x215>\n  401754:\tbf 00 53 40 00       \tmov    $0x405300,%edi\n  401759:\te8 a2 f9 ff ff       \tcallq  401100 <pthread_mutex_unlock@plt>\n  40175e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  401762:\t48 8b 58 18          \tmov    0x18(%rax),%rbx\n  401766:\te8 17 fb ff ff       \tcallq  401282 <seconds_read>\n  40176b:\tf2 0f 10 0d b5 3b 00 \tmovsd  0x3bb5(%rip),%xmm1        # 405328 <base_time>\n  401772:\t00 \n  401773:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n  401777:\t48 8b 05 02 3b 00 00 \tmov    0x3b02(%rip),%rax        # 405280 <stdout@@GLIBC_2.2.5>\n  40177e:\t48 89 da             \tmov    %rbx,%rdx\n  401781:\tbe 0c 32 40 00       \tmov    $0x40320c,%esi\n  401786:\t48 89 c7             \tmov    %rax,%rdi\n  401789:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40178e:\te8 4d f9 ff ff       \tcallq  4010e0 <fprintf@plt>\n  401793:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401798:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n  40179c:\tc9                   \tleaveq \n  40179d:\tc3                   \tretq   ", "code_s": "void *__fastcall thread_fn(void *a1) {\n  char *v1;\n  unsigned int v2;\n  pthread_t v3;\n  const char *v4;\n  double v5;\n  char *v6;\n  const char *v7;\n  double v8;\n  __int64 v10;\n  struct timespec <span class=\"supfact\">requested_time</span>;\n  int errnum;\n  unsigned int *v13;\n  v13 = (unsigned int *)a1;\n  v10 = Number << *((_DWORD *)a1 + Number);\n  errnum = sched_setaffinity(Number, Number, (const cpu_set_t *)&v10);\n  if (errnum < Number) {\n    v1 = strerror(errnum);\n    fprintf(stderr, String, String, Number L, *((const char **)v13 + Number),\n            *v13, (unsigned int)errnum, v1);\n    exit(Number);\n  }\n  v2 = v13[Number];\n  v3 = pthread_self();\n  test_set_priority(v3, Number, v2);\n  v4 = (const char *)*((_QWORD *)v13 + Number);\n  v5 = seconds_read();\n  fprintf(_bss_start, String, v5 - *(double *)&base_time, v4);\n  fprintf(stderr, String, *((const char **)v13 + Number), *v13);\n  v13[Number] = Number;\n  <span class=\"supfact\">requested_time</span>.tv_sec = Number L;\n  <span class=\"supfact\">requested_time</span>.tv_nsec = (int)(Number * v13[Number]);\n  if (!*v13)\n    pthread_mutex_lock(&mutex1);\n  while (!v13[Number]) {\n    do_work(Number, v13 + Number);\n    if (v13[Number]) {\n      errnum = nanosleep(&<span class=\"supfact\">requested_time</span>, Number L);\n      if (errnum < Number) {\n        v6 = strerror(errnum);\n        fprintf(stderr, String, String, Number L,\n                *((const char **)v13 + Number), *v13, (unsigned int)errnum, v6);\n        exit(Number);\n      }\n    }\n  }\n  if (!*v13)\n    pthread_mutex_unlock(&mutex1);\n  v7 = (const char *)*((_QWORD *)v13 + Number);\n  v8 = seconds_read();\n  fprintf(_bss_start, String, v8 - *(double *)&base_time, v7);\n  return Number L;\n}", "code_t": "void *__cdecl thread_fn(void *param) {\n  char *v1;\n  int v2;\n  pthread_t v3;\n  const char *v4;\n  double v5;\n  char *v6;\n  const char *v7;\n  double v8;\n  unsigned __int64 mask;\n  timespec <span class=\"supfact\">ts</span>;\n  int rc;\n  thread_param *tp;\n  tp = (thread_param *)param;\n  mask = Number << *((_DWORD *)param + Number);\n  rc = sched_setaffinity(Number, Number, (const cpu_set_t *)&mask);\n  if (rc < Number) {\n    v1 = strerror(rc);\n    fprintf(stderr, String, String, Number L, tp->name, (unsigned int)tp->index,\n            (unsigned int)rc, v1);\n    exit(Number);\n  }\n  v2 = tp->priority;\n  v3 = pthread_self();\n  test_set_priority(v3, Number, v2);\n  v4 = tp->name;\n  v5 = seconds_read();\n  fprintf(_bss_start, String, v5 - base_time, v4);\n  fprintf(stderr, String, tp->name, (unsigned int)tp->index);\n  tp->progress = Number;\n  <span class=\"supfact\">ts</span>.tv_sec = Number L;\n  <span class=\"supfact\">ts</span>.tv_nsec = Number * tp->sleep_ms;\n  if (!tp->index)\n    pthread_mutex_lock(&mutex1);\n  while (!tp->stop) {\n    do_work(Number, &tp->progress);\n    if (tp->sleep_ms) {\n      rc = nanosleep(&<span class=\"supfact\">ts</span>, Number L);\n      if (rc < Number) {\n        v6 = strerror(rc);\n        fprintf(stderr, String, String, Number L, tp->name,\n                (unsigned int)tp->index, (unsigned int)rc, v6);\n        exit(Number);\n      }\n    }\n  }\n  if (!tp->index)\n    pthread_mutex_unlock(&mutex1);\n  v7 = tp->name;\n  v8 = seconds_read();\n  fprintf(_bss_start, String, v8 - base_time, v7);\n  return Number L;\n}", "var": [{"name": "requested_time", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "pred_name": "ts", "ref_name": "ts", "ref_type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "euiko", "repo_name": "platchamer", "path": "euiko/platchamer/367ec57e0b105587d6f339daffeeca40572f30e9b2c0afc01de628a12c6230e5", "path_in_repo": "euiko/platchamer/3rdparty/bgfx/3rdparty/spirv-cross/spirv_cpp.o", "objdump": "0000000000000366 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold>:\n 366:\t48 8b 7c 24 20       \tmov    0x20(%rsp),%rdi\n 36b:\t4c 39 ef             \tcmp    %r13,%rdi\n 36e:\t74 05                \tje     375 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0xf>\n 370:\te8 00 00 00 00       \tcallq  375 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0xf>\n 375:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n 379:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n 37e:\t48 39 c7             \tcmp    %rax,%rdi\n 381:\t74 05                \tje     388 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x22>\n 383:\te8 00 00 00 00       \tcallq  388 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x22>\n 388:\t48 89 ef             \tmov    %rbp,%rdi\n 38b:\te8 00 00 00 00       \tcallq  390 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x2a>\n 390:\t48 89 c5             \tmov    %rax,%rbp\n 393:\teb e0                \tjmp    375 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0xf>\n 395:\tbf 10 00 00 00       \tmov    $0x10,%edi\n 39a:\te8 00 00 00 00       \tcallq  39f <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x39>\n 39f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3a4:\t48 8d 7c 24 20       \tlea    0x20(%rsp),%rdi\n 3a9:\t49 89 c4             \tmov    %rax,%r12\n 3ac:\te8 4f fc ff ff       \tcallq  0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>\n 3b1:\t48 8d 74 24 20       \tlea    0x20(%rsp),%rsi\n 3b6:\t4c 89 e7             \tmov    %r12,%rdi\n 3b9:\te8 00 00 00 00       \tcallq  3be <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x58>\n 3be:\t48 8b 7c 24 20       \tmov    0x20(%rsp),%rdi\n 3c3:\t49 c7 04 24 00 00 00 \tmovq   $0x0,(%r12)\n 3ca:\t00 \n 3cb:\t4c 39 ef             \tcmp    %r13,%rdi\n 3ce:\t74 05                \tje     3d5 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x6f>\n 3d0:\te8 00 00 00 00       \tcallq  3d5 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x6f>\n 3d5:\tba 00 00 00 00       \tmov    $0x0,%edx\n 3da:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3df:\t4c 89 e7             \tmov    %r12,%rdi\n 3e2:\te8 00 00 00 00       \tcallq  3e7 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x81>\n 3e7:\t48 8b 7c 24 20       \tmov    0x20(%rsp),%rdi\n 3ec:\t48 89 c5             \tmov    %rax,%rbp\n 3ef:\t4c 39 ef             \tcmp    %r13,%rdi\n 3f2:\t74 05                \tje     3f9 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x93>\n 3f4:\te8 00 00 00 00       \tcallq  3f9 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x93>\n 3f9:\t4c 89 e7             \tmov    %r12,%rdi\n 3fc:\te8 00 00 00 00       \tcallq  401 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x9b>\n 401:\te9 6f ff ff ff       \tjmpq   375 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0xf>\n 406:\t48 8b 7c 24 20       \tmov    0x20(%rsp),%rdi\n 40b:\t48 8d 44 24 30       \tlea    0x30(%rsp),%rax\n 410:\t48 39 c7             \tcmp    %rax,%rdi\n 413:\t0f 85 57 ff ff ff    \tjne    370 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0xa>\n 419:\te9 57 ff ff ff       \tjmpq   375 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0xf>\n 41e:\t48 89 c5             \tmov    %rax,%rbp\n 421:\teb d6                \tjmp    3f9 <_ZN11spirv_cross11CompilerCPP23emit_function_prototypeERNS_12SPIRFunctionERKNS_6BitsetE.cold+0x93>\n 423:\t90                   \tnop", "code_s": "void __fastcall __noreturn spirv_cross CompilerCPP emit_function_prototype(\n    __int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6,\n    __int64 a7, char a8, __int64 a9, void *a10) {\n  struct _Unwind_Exception *<span class=\"supfact\">v10</span>;\n  void *v11;\n  char *retaddr;\n  if (a10 != v11)\n    operator delete(a10);\n  if (retaddr != &a8)\n    operator delete(retaddr);\n  Unwind_Resume(<span class=\"supfact\">v10</span>);\n}", "code_t": "void __fastcall __noreturn spirv_cross CompilerCPP emit_function_prototype(\n    __int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6,\n    __int64 a7, char a8, __int64 a9, void *a10) {\n  struct _Unwind_Exception *<span class=\"supfact\">v10</span>;\n  void *v11;\n  char *retaddr;\n  if (a10 != v11)\n    operator delete(a10);\n  if (retaddr != &a8)\n    operator delete(retaddr);\n  Unwind_Resume(<span class=\"supfact\">v10</span>);\n}", "var": [{"name": "v10", "type": "struct _Unwind_Exception *", "pred_name": "v10", "ref_name": "v10", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/d9a9b43abfca51ad3b3e95fcbe7518d68be1347d72728b5aecd48947d03b9624", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/megaplay.o", "objdump": "0000000000000e47 <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring>:\n     e47:\t55                   \tpush   %rbp\n     e48:\t48 89 e5             \tmov    %rsp,%rbp\n     e4b:\t53                   \tpush   %rbx\n     e4c:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n     e53:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n     e57:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n     e5b:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n     e62:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n     e66:\t48 89 c7             \tmov    %rax,%rdi\n     e69:\te8 00 00 00 00       \tcallq  e6e <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n     e6e:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     e75:\t00 \n     e76:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n     e7d:\t00 \n     e7e:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n     e85:\t00 \n     e86:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n     e8d:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     e94:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n     e98:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     e9c:\t48 89 ce             \tmov    %rcx,%rsi\n     e9f:\t48 89 c7             \tmov    %rax,%rdi\n     ea2:\te8 43 f2 ff ff       \tcallq  ea <_ZL25construct_ioport_megaplayR8device_tR11tagged_listI17input_port_configER7astring>\n     ea7:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n     eab:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     eaf:\tba 00 00 00 00       \tmov    $0x0,%edx\n     eb4:\t48 89 ce             \tmov    %rcx,%rsi\n     eb7:\t48 89 c7             \tmov    %rax,%rdi\n     eba:\te8 00 00 00 00       \tcallq  ebf <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x78>\n     ebf:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     ec3:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n     eca:\t00 \n     ecb:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     ed2:\t00 \n     ed3:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n     eda:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     ede:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     ee4:\tb9 03 00 00 00       \tmov    $0x3,%ecx\n     ee9:\tba 01 00 00 00       \tmov    $0x1,%edx\n     eee:\tbe 05 00 00 00       \tmov    $0x5,%esi\n     ef3:\t48 89 c7             \tmov    %rax,%rdi\n     ef6:\te8 00 00 00 00       \tcallq  efb <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0xb4>\n     efb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     eff:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     f06:\t00 \n     f07:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     f0e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f12:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f17:\t48 89 c7             \tmov    %rax,%rdi\n     f1a:\te8 00 00 00 00       \tcallq  f1f <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0xd8>\n     f1f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f23:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f28:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f2d:\t48 89 c7             \tmov    %rax,%rdi\n     f30:\te8 00 00 00 00       \tcallq  f35 <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0xee>\n     f35:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     f39:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f3d:\t8b 00                \tmov    (%rax),%eax\n     f3f:\t83 e0 01             \tand    $0x1,%eax\n     f42:\t89 c1                \tmov    %eax,%ecx\n     f44:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f48:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f4d:\t89 ce                \tmov    %ecx,%esi\n     f4f:\t48 89 c7             \tmov    %rax,%rdi\n     f52:\te8 00 00 00 00       \tcallq  f57 <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x110>\n     f57:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     f5b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f5f:\t8b 00                \tmov    (%rax),%eax\n     f61:\t83 e0 02             \tand    $0x2,%eax\n     f64:\t89 c1                \tmov    %eax,%ecx\n     f66:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f6a:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f6f:\t89 ce                \tmov    %ecx,%esi\n     f71:\t48 89 c7             \tmov    %rax,%rdi\n     f74:\te8 00 00 00 00       \tcallq  f79 <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x132>\n     f79:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     f7d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f81:\t8b 00                \tmov    (%rax),%eax\n     f83:\t83 e0 03             \tand    $0x3,%eax\n     f86:\t89 c1                \tmov    %eax,%ecx\n     f88:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     f8c:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f91:\t89 ce                \tmov    %ecx,%esi\n     f93:\t48 89 c7             \tmov    %rax,%rdi\n     f96:\te8 00 00 00 00       \tcallq  f9b <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x154>\n     f9b:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     f9f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     fa3:\t41 b8 07 00 00 00    \tmov    $0x7,%r8d\n     fa9:\tb9 0c 00 00 00       \tmov    $0xc,%ecx\n     fae:\tba 0c 00 00 00       \tmov    $0xc,%edx\n     fb3:\tbe 05 00 00 00       \tmov    $0x5,%esi\n     fb8:\t48 89 c7             \tmov    %rax,%rdi\n     fbb:\te8 00 00 00 00       \tcallq  fc0 <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x179>\n     fc0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     fc4:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     fcb:\t00 \n     fcc:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n     fd3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     fd7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     fdc:\t48 89 c7             \tmov    %rax,%rdi\n     fdf:\te8 00 00 00 00       \tcallq  fe4 <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x19d>\n     fe4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     fe8:\tba 51 00 00 00       \tmov    $0x51,%edx\n     fed:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     ff2:\t48 89 c7             \tmov    %rax,%rdi\n     ff5:\te8 00 00 00 00       \tcallq  ffa <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x1b3>\n     ffa:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     ffe:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1002:\t8b 00                \tmov    (%rax),%eax\n    1004:\t83 e0 04             \tand    $0x4,%eax\n    1007:\t89 c1                \tmov    %eax,%ecx\n    1009:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    100d:\tba 4f 00 00 00       \tmov    $0x4f,%edx\n    1012:\t89 ce                \tmov    %ecx,%esi\n    1014:\t48 89 c7             \tmov    %rax,%rdi\n    1017:\te8 00 00 00 00       \tcallq  101c <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x1d5>\n    101c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1020:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1024:\t8b 00                \tmov    (%rax),%eax\n    1026:\t83 e0 08             \tand    $0x8,%eax\n    1029:\t89 c1                \tmov    %eax,%ecx\n    102b:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    102f:\tba 4a 00 00 00       \tmov    $0x4a,%edx\n    1034:\t89 ce                \tmov    %ecx,%esi\n    1036:\t48 89 c7             \tmov    %rax,%rdi\n    1039:\te8 00 00 00 00       \tcallq  103e <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x1f7>\n    103e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1042:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1046:\t8b 00                \tmov    (%rax),%eax\n    1048:\t83 e0 0c             \tand    $0xc,%eax\n    104b:\t89 c1                \tmov    %eax,%ecx\n    104d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1051:\tba 4c 00 00 00       \tmov    $0x4c,%edx\n    1056:\t89 ce                \tmov    %ecx,%esi\n    1058:\t48 89 c7             \tmov    %rax,%rdi\n    105b:\te8 00 00 00 00       \tcallq  1060 <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n    1060:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    1064:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    1068:\t48 89 c7             \tmov    %rax,%rdi\n    106b:\te8 00 00 00 00       \tcallq  1070 <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x229>\n    1070:\teb 1a                \tjmp    108c <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x245>\n    1072:\t48 89 c3             \tmov    %rax,%rbx\n    1075:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    1079:\t48 89 c7             \tmov    %rax,%rdi\n    107c:\te8 00 00 00 00       \tcallq  1081 <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x23a>\n    1081:\t48 89 d8             \tmov    %rbx,%rax\n    1084:\t48 89 c7             \tmov    %rax,%rdi\n    1087:\te8 00 00 00 00       \tcallq  108c <_ZL25construct_ioport_mp_sonicR8device_tR11tagged_listI17input_port_configER7astring+0x245>\n    108c:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    1093:\t5b                   \tpop    %rbx\n    1094:\t5d                   \tpop    %rbp\n    1095:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_mp_sonic(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  int v5;\n  __int64 v6;\n  _DWORD *v7;\n  __int64 v8;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  v8 = Number L;\n  v7 = Number L;\n  v6 = Number L;\n  v5 = Number;\n  construct_ioport_megaplay(a1, a2, a3);\n  v6 = ioconfig_modify_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = (_DWORD *)ioconfig_alloc_field(v6, Number L, Number L, Number L, String);\n  v8 = Number L;\n  diplocation_list_alloc(v7, String, a3);\n  v8 = ioconfig_alloc_setting(v7, Number L, String);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, a321);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, &a321[Number]);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, &a321[Number]);\n  v7 = (_DWORD *)ioconfig_alloc_field(v6, Number L, Number L, Number L,\n                                      Number L);\n  v8 = Number L;\n  diplocation_list_alloc(v7, String, a3);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl construct_ioport_mp_sonic(device_t *owner, ioport_list *portlist,\n                                       astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value maskbits;\n  input_port_config *curport;\n  input_field_config *curfield;\n  input_setting_config *cursetting;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  cursetting = Number L;\n  curfield = Number L;\n  curport = Number L;\n  maskbits = Number;\n  construct_ioport_megaplay(owner, portlist, errorbuf);\n  curport = (input_port_config *)ioconfig_modify_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(curport, Number, Number,\n                                                        Number, String);\n  cursetting = Number L;\n  diplocation_list_alloc(curfield, String, errorbuf);\n  cursetting =\n      (input_setting_config *)ioconfig_alloc_setting(curfield, Number, String);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, a321);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, &a321[Number]);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, &a321[Number]);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_4 + Number);\n  cursetting = Number L;\n  diplocation_list_alloc(curfield, String, errorbuf);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&locret_51);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_4D + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_48 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_4B + Number);\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "pred_name": "fulltag", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "hustustor", "repo_name": "simplecfs", "path": "hustustor/simplecfs/03d3fc7841a6a8a7e7cdbb3e8233e32a755a92a7841ed37e8cb8d16c17000199", "path_in_repo": "hustustor/simplecfs//ext/gf-complete/src/gf_w64.o", "objdump": "0000000000010222 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region>:\n   10222:\t55                   \tpush   %rbp\n   10223:\t48 89 e5             \tmov    %rsp,%rbp\n   10226:\t41 57                \tpush   %r15\n   10228:\t41 56                \tpush   %r14\n   1022a:\t41 55                \tpush   %r13\n   1022c:\t41 54                \tpush   %r12\n   1022e:\t53                   \tpush   %rbx\n   1022f:\t48 81 ec d8 0a 00 00 \tsub    $0xad8,%rsp\n   10236:\t48 89 bd 28 f5 ff ff \tmov    %rdi,-0xad8(%rbp)\n   1023d:\t48 89 b5 20 f5 ff ff \tmov    %rsi,-0xae0(%rbp)\n   10244:\t48 89 95 18 f5 ff ff \tmov    %rdx,-0xae8(%rbp)\n   1024b:\t48 89 8d 10 f5 ff ff \tmov    %rcx,-0xaf0(%rbp)\n   10252:\t44 89 85 0c f5 ff ff \tmov    %r8d,-0xaf4(%rbp)\n   10259:\t44 89 8d 08 f5 ff ff \tmov    %r9d,-0xaf8(%rbp)\n   10260:\t48 83 bd 10 f5 ff ff \tcmpq   $0x0,-0xaf0(%rbp)\n   10267:\t00 \n   10268:\t75 22                \tjne    1028c <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x6a>\n   1026a:\t8b 95 08 f5 ff ff    \tmov    -0xaf8(%rbp),%edx\n   10270:\t8b 8d 0c f5 ff ff    \tmov    -0xaf4(%rbp),%ecx\n   10276:\t48 8b 85 18 f5 ff ff \tmov    -0xae8(%rbp),%rax\n   1027d:\t89 ce                \tmov    %ecx,%esi\n   1027f:\t48 89 c7             \tmov    %rax,%rdi\n   10282:\te8 00 00 00 00       \tcallq  10287 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x65>\n   10287:\te9 21 08 00 00       \tjmpq   10aad <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x88b>\n   1028c:\t48 83 bd 10 f5 ff ff \tcmpq   $0x1,-0xaf0(%rbp)\n   10293:\t01 \n   10294:\t75 27                \tjne    102bd <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x9b>\n   10296:\t8b 8d 08 f5 ff ff    \tmov    -0xaf8(%rbp),%ecx\n   1029c:\t8b 95 0c f5 ff ff    \tmov    -0xaf4(%rbp),%edx\n   102a2:\t48 8b b5 18 f5 ff ff \tmov    -0xae8(%rbp),%rsi\n   102a9:\t48 8b 85 20 f5 ff ff \tmov    -0xae0(%rbp),%rax\n   102b0:\t48 89 c7             \tmov    %rax,%rdi\n   102b3:\te8 00 00 00 00       \tcallq  102b8 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x96>\n   102b8:\te9 f0 07 00 00       \tjmpq   10aad <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x88b>\n   102bd:\t48 8b 85 28 f5 ff ff \tmov    -0xad8(%rbp),%rax\n   102c4:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n   102c8:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n   102cc:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   102d0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n   102d4:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n   102d8:\t4c 8b 8d 10 f5 ff ff \tmov    -0xaf0(%rbp),%r9\n   102df:\t44 8b 85 0c f5 ff ff \tmov    -0xaf4(%rbp),%r8d\n   102e6:\t48 8b 8d 18 f5 ff ff \tmov    -0xae8(%rbp),%rcx\n   102ed:\t48 8b 95 20 f5 ff ff \tmov    -0xae0(%rbp),%rdx\n   102f4:\t48 8b b5 28 f5 ff ff \tmov    -0xad8(%rbp),%rsi\n   102fb:\t48 8d 85 30 f5 ff ff \tlea    -0xad0(%rbp),%rax\n   10302:\t68 80 00 00 00       \tpushq  $0x80\n   10307:\t8b bd 08 f5 ff ff    \tmov    -0xaf8(%rbp),%edi\n   1030d:\t57                   \tpush   %rdi\n   1030e:\t48 89 c7             \tmov    %rax,%rdi\n   10311:\te8 00 00 00 00       \tcallq  10316 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0xf4>\n   10316:\t48 83 c4 10          \tadd    $0x10,%rsp\n   1031a:\t48 8d 85 30 f5 ff ff \tlea    -0xad0(%rbp),%rax\n   10321:\t48 89 c7             \tmov    %rax,%rdi\n   10324:\te8 00 00 00 00       \tcallq  10329 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x107>\n   10329:\t48 8b 85 60 f5 ff ff \tmov    -0xaa0(%rbp),%rax\n   10330:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n   10334:\t48 8b 85 68 f5 ff ff \tmov    -0xa98(%rbp),%rax\n   1033b:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n   1033f:\t48 8b 85 78 f5 ff ff \tmov    -0xa88(%rbp),%rax\n   10346:\t48 89 45 90          \tmov    %rax,-0x70(%rbp)\n   1034a:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n   1034e:\t48 8b 40 30          \tmov    0x30(%rax),%rax\n   10352:\t48 89 45 88          \tmov    %rax,-0x78(%rbp)\n   10356:\t48 8b 85 10 f5 ff ff \tmov    -0xaf0(%rbp),%rax\n   1035d:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n   10361:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n   10368:\te9 7d 01 00 00       \tjmpq   104ea <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x2c8>\n   1036d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   10371:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n   10374:\t48 63 d2             \tmovslq %edx,%rdx\n   10377:\t48 c1 e2 07          \tshl    $0x7,%rdx\n   1037b:\t48 01 d0             \tadd    %rdx,%rax\n   1037e:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n   10385:\tc7 45 c8 01 00 00 00 \tmovl   $0x1,-0x38(%rbp)\n   1038c:\teb 7b                \tjmp    10409 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x1e7>\n   1038e:\tc7 45 c4 00 00 00 00 \tmovl   $0x0,-0x3c(%rbp)\n   10395:\teb 46                \tjmp    103dd <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x1bb>\n   10397:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   1039b:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n   1039e:\t48 63 d2             \tmovslq %edx,%rdx\n   103a1:\t8b 4d cc             \tmov    -0x34(%rbp),%ecx\n   103a4:\t48 63 c9             \tmovslq %ecx,%rcx\n   103a7:\t48 c1 e1 04          \tshl    $0x4,%rcx\n   103ab:\t48 01 ca             \tadd    %rcx,%rdx\n   103ae:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n   103b2:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n   103b5:\t89 d1                \tmov    %edx,%ecx\n   103b7:\t33 4d c8             \txor    -0x38(%rbp),%ecx\n   103ba:\t48 33 45 b8          \txor    -0x48(%rbp),%rax\n   103be:\t48 89 c2             \tmov    %rax,%rdx\n   103c1:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   103c5:\t48 63 c9             \tmovslq %ecx,%rcx\n   103c8:\t8b 75 cc             \tmov    -0x34(%rbp),%esi\n   103cb:\t48 63 f6             \tmovslq %esi,%rsi\n   103ce:\t48 c1 e6 04          \tshl    $0x4,%rsi\n   103d2:\t48 01 f1             \tadd    %rsi,%rcx\n   103d5:\t48 89 14 c8          \tmov    %rdx,(%rax,%rcx,8)\n   103d9:\t83 45 c4 01          \taddl   $0x1,-0x3c(%rbp)\n   103dd:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n   103e0:\t3b 45 c8             \tcmp    -0x38(%rbp),%eax\n   103e3:\t7c b2                \tjl     10397 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x175>\n   103e5:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   103e9:\t48 85 c0             \ttest   %rax,%rax\n   103ec:\t79 0d                \tjns    103fb <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x1d9>\n   103ee:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   103f2:\t48 01 c0             \tadd    %rax,%rax\n   103f5:\t48 33 45 98          \txor    -0x68(%rbp),%rax\n   103f9:\teb 07                \tjmp    10402 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x1e0>\n   103fb:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n   103ff:\t48 01 c0             \tadd    %rax,%rax\n   10402:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n   10406:\td1 65 c8             \tshll   -0x38(%rbp)\n   10409:\t83 7d c8 0f          \tcmpl   $0xf,-0x38(%rbp)\n   1040d:\t0f 8e 7b ff ff ff    \tjle    1038e <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x16c>\n   10413:\tc7 45 c8 00 00 00 00 \tmovl   $0x0,-0x38(%rbp)\n   1041a:\te9 bd 00 00 00       \tjmpq   104dc <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x2ba>\n   1041f:\tc7 45 c4 00 00 00 00 \tmovl   $0x0,-0x3c(%rbp)\n   10426:\teb 6a                \tjmp    10492 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x270>\n   10428:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   1042c:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n   1042f:\t48 63 d2             \tmovslq %edx,%rdx\n   10432:\t8b 4d cc             \tmov    -0x34(%rbp),%ecx\n   10435:\t48 63 c9             \tmovslq %ecx,%rcx\n   10438:\t48 c1 e1 04          \tshl    $0x4,%rcx\n   1043c:\t48 01 ca             \tadd    %rcx,%rdx\n   1043f:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n   10443:\t89 c2                \tmov    %eax,%edx\n   10445:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n   10448:\t48 98                \tcltq   \n   1044a:\t88 94 05 80 f5 ff ff \tmov    %dl,-0xa80(%rbp,%rax,1)\n   10451:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   10455:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n   10458:\t48 63 d2             \tmovslq %edx,%rdx\n   1045b:\t8b 4d cc             \tmov    -0x34(%rbp),%ecx\n   1045e:\t48 63 c9             \tmovslq %ecx,%rcx\n   10461:\t48 c1 e1 04          \tshl    $0x4,%rcx\n   10465:\t48 01 ca             \tadd    %rcx,%rdx\n   10468:\t48 8b 04 d0          \tmov    (%rax,%rdx,8),%rax\n   1046c:\t48 c1 e8 08          \tshr    $0x8,%rax\n   10470:\t48 89 c1             \tmov    %rax,%rcx\n   10473:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n   10477:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n   1047a:\t48 63 d2             \tmovslq %edx,%rdx\n   1047d:\t8b 75 cc             \tmov    -0x34(%rbp),%esi\n   10480:\t48 63 f6             \tmovslq %esi,%rsi\n   10483:\t48 c1 e6 04          \tshl    $0x4,%rsi\n   10487:\t48 01 f2             \tadd    %rsi,%rdx\n   1048a:\t48 89 0c d0          \tmov    %rcx,(%rax,%rdx,8)\n   1048e:\t83 45 c4 01          \taddl   $0x1,-0x3c(%rbp)\n   10492:\t83 7d c4 0f          \tcmpl   $0xf,-0x3c(%rbp)\n   10496:\t7e 90                \tjle    10428 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x206>\n   10498:\t48 8d 85 80 f5 ff ff \tlea    -0xa80(%rbp),%rax\n   1049f:\t48 89 85 48 ff ff ff \tmov    %rax,-0xb8(%rbp)\n   104a6:\t48 8b 85 48 ff ff ff \tmov    -0xb8(%rbp),%rax\n   104ad:\tc5 fa 6f 00          \tvmovdqu (%rax),%xmm0\n   104b1:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   104b4:\t48 98                \tcltq   \n   104b6:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n   104b9:\t48 63 d2             \tmovslq %edx,%rdx\n   104bc:\t48 c1 e2 03          \tshl    $0x3,%rdx\n   104c0:\t48 01 d0             \tadd    %rdx,%rax\n   104c3:\t48 c1 e0 04          \tshl    $0x4,%rax\n   104c7:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   104cb:\t48 01 d8             \tadd    %rbx,%rax\n   104ce:\t48 2d c0 09 00 00    \tsub    $0x9c0,%rax\n   104d4:\tc5 f8 29 00          \tvmovaps %xmm0,(%rax)\n   104d8:\t83 45 c8 01          \taddl   $0x1,-0x38(%rbp)\n   104dc:\t83 7d c8 07          \tcmpl   $0x7,-0x38(%rbp)\n   104e0:\t0f 8e 39 ff ff ff    \tjle    1041f <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x1fd>\n   104e6:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   104ea:\t83 7d cc 0f          \tcmpl   $0xf,-0x34(%rbp)\n   104ee:\t0f 8e 79 fe ff ff    \tjle    1036d <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x14b>\n   104f4:\tc6 85 47 ff ff ff 0f \tmovb   $0xf,-0xb9(%rbp)\n   104fb:\t0f be 95 47 ff ff ff \tmovsbl -0xb9(%rbp),%edx\n   10502:\t0f be 8d 47 ff ff ff \tmovsbl -0xb9(%rbp),%ecx\n   10509:\t0f be b5 47 ff ff ff \tmovsbl -0xb9(%rbp),%esi\n   10510:\t0f be bd 47 ff ff ff \tmovsbl -0xb9(%rbp),%edi\n   10517:\t44 0f be 85 47 ff ff \tmovsbl -0xb9(%rbp),%r8d\n   1051e:\tff \n   1051f:\t44 0f be 8d 47 ff ff \tmovsbl -0xb9(%rbp),%r9d\n   10526:\tff \n   10527:\t44 0f be 95 47 ff ff \tmovsbl -0xb9(%rbp),%r10d\n   1052e:\tff \n   1052f:\t44 0f be 9d 47 ff ff \tmovsbl -0xb9(%rbp),%r11d\n   10536:\tff \n   10537:\t0f be 9d 47 ff ff ff \tmovsbl -0xb9(%rbp),%ebx\n   1053e:\t44 0f be a5 47 ff ff \tmovsbl -0xb9(%rbp),%r12d\n   10545:\tff \n   10546:\t44 0f be ad 47 ff ff \tmovsbl -0xb9(%rbp),%r13d\n   1054d:\tff \n   1054e:\t44 0f be b5 47 ff ff \tmovsbl -0xb9(%rbp),%r14d\n   10555:\tff \n   10556:\t44 0f be bd 47 ff ff \tmovsbl -0xb9(%rbp),%r15d\n   1055d:\tff \n   1055e:\t0f be 85 47 ff ff ff \tmovsbl -0xb9(%rbp),%eax\n   10565:\t89 85 04 f5 ff ff    \tmov    %eax,-0xafc(%rbp)\n   1056b:\t0f be 85 47 ff ff ff \tmovsbl -0xb9(%rbp),%eax\n   10572:\t89 85 00 f5 ff ff    \tmov    %eax,-0xb00(%rbp)\n   10578:\t0f be 85 47 ff ff ff \tmovsbl -0xb9(%rbp),%eax\n   1057f:\t88 85 46 ff ff ff    \tmov    %al,-0xba(%rbp)\n   10585:\t0f b6 85 00 f5 ff ff \tmovzbl -0xb00(%rbp),%eax\n   1058c:\t88 85 45 ff ff ff    \tmov    %al,-0xbb(%rbp)\n   10592:\t0f b6 85 04 f5 ff ff \tmovzbl -0xafc(%rbp),%eax\n   10599:\t88 85 44 ff ff ff    \tmov    %al,-0xbc(%rbp)\n   1059f:\t44 88 bd 43 ff ff ff \tmov    %r15b,-0xbd(%rbp)\n   105a6:\t44 88 b5 42 ff ff ff \tmov    %r14b,-0xbe(%rbp)\n   105ad:\t44 88 ad 41 ff ff ff \tmov    %r13b,-0xbf(%rbp)\n   105b4:\t44 88 a5 40 ff ff ff \tmov    %r12b,-0xc0(%rbp)\n   105bb:\t88 9d 3f ff ff ff    \tmov    %bl,-0xc1(%rbp)\n   105c1:\t44 88 9d 3e ff ff ff \tmov    %r11b,-0xc2(%rbp)\n   105c8:\t44 88 95 3d ff ff ff \tmov    %r10b,-0xc3(%rbp)\n   105cf:\t44 88 8d 3c ff ff ff \tmov    %r9b,-0xc4(%rbp)\n   105d6:\t44 88 85 3b ff ff ff \tmov    %r8b,-0xc5(%rbp)\n   105dd:\t40 88 bd 3a ff ff ff \tmov    %dil,-0xc6(%rbp)\n   105e4:\t40 88 b5 39 ff ff ff \tmov    %sil,-0xc7(%rbp)\n   105eb:\t88 8d 38 ff ff ff    \tmov    %cl,-0xc8(%rbp)\n   105f1:\t88 95 37 ff ff ff    \tmov    %dl,-0xc9(%rbp)\n   105f7:\t0f b6 85 37 ff ff ff \tmovzbl -0xc9(%rbp),%eax\n   105fe:\tc5 f9 6e c0          \tvmovd  %eax,%xmm0\n   10602:\t0f b6 85 38 ff ff ff \tmovzbl -0xc8(%rbp),%eax\n   10609:\tc4 e3 79 20 c0 01    \tvpinsrb $0x1,%eax,%xmm0,%xmm0\n   1060f:\tc5 f9 6f c8          \tvmovdqa %xmm0,%xmm1\n   10613:\t0f b6 85 39 ff ff ff \tmovzbl -0xc7(%rbp),%eax\n   1061a:\tc5 f9 6e c0          \tvmovd  %eax,%xmm0\n   1061e:\t0f b6 85 3a ff ff ff \tmovzbl -0xc6(%rbp),%eax\n   10625:\tc4 e3 79 20 c0 01    \tvpinsrb $0x1,%eax,%xmm0,%xmm0\n   1062b:\tc5 79 6f c0          \tvmovdqa %xmm0,%xmm8\n   1062f:\t0f b6 85 3b ff ff ff \tmovzbl -0xc5(%rbp),%eax\n   10636:\tc5 f9 6e c0          \tvmovd  %eax,%xmm0\n   1063a:\t0f b6 85 3c ff ff ff \tmovzbl -0xc4(%rbp),%eax\n   10641:\tc4 e3 79 20 c0 01    \tvpinsrb $0x1,%eax,%xmm0,%xmm0\n   10647:\tc5 f9 6f e0          \tvmovdqa %xmm0,%xmm4\n   1064b:\t0f b6 85 3d ff ff ff \tmovzbl -0xc3(%rbp),%eax\n   10652:\tc5 f9 6e c0          \tvmovd  %eax,%xmm0\n   10656:\t0f b6 85 3e ff ff ff \tmovzbl -0xc2(%rbp),%eax\n   1065d:\tc4 e3 79 20 c0 01    \tvpinsrb $0x1,%eax,%xmm0,%xmm0\n   10663:\tc5 f9 6f f8          \tvmovdqa %xmm0,%xmm7\n   10667:\t0f b6 85 3f ff ff ff \tmovzbl -0xc1(%rbp),%eax\n   1066e:\tc5 f9 6e c0          \tvmovd  %eax,%xmm0\n   10672:\t0f b6 85 40 ff ff ff \tmovzbl -0xc0(%rbp),%eax\n   10679:\tc4 e3 79 20 c0 01    \tvpinsrb $0x1,%eax,%xmm0,%xmm0\n   1067f:\tc5 f9 6f d0          \tvmovdqa %xmm0,%xmm2\n   10683:\t0f b6 85 41 ff ff ff \tmovzbl -0xbf(%rbp),%eax\n   1068a:\tc5 f9 6e c0          \tvmovd  %eax,%xmm0\n   1068e:\t0f b6 85 42 ff ff ff \tmovzbl -0xbe(%rbp),%eax\n   10695:\tc4 e3 79 20 c0 01    \tvpinsrb $0x1,%eax,%xmm0,%xmm0\n   1069b:\tc5 f9 6f f0          \tvmovdqa %xmm0,%xmm6\n   1069f:\t0f b6 85 43 ff ff ff \tmovzbl -0xbd(%rbp),%eax\n   106a6:\tc5 f9 6e c0          \tvmovd  %eax,%xmm0\n   106aa:\t0f b6 85 44 ff ff ff \tmovzbl -0xbc(%rbp),%eax\n   106b1:\tc4 e3 79 20 c0 01    \tvpinsrb $0x1,%eax,%xmm0,%xmm0\n   106b7:\tc5 f9 6f d8          \tvmovdqa %xmm0,%xmm3\n   106bb:\t0f b6 85 45 ff ff ff \tmovzbl -0xbb(%rbp),%eax\n   106c2:\tc5 f9 6e c0          \tvmovd  %eax,%xmm0\n   106c6:\t0f b6 85 46 ff ff ff \tmovzbl -0xba(%rbp),%eax\n   106cd:\tc4 e3 79 20 c0 01    \tvpinsrb $0x1,%eax,%xmm0,%xmm0\n   106d3:\tc5 f9 6f e8          \tvmovdqa %xmm0,%xmm5\n   106d7:\tc4 c1 71 61 c0       \tvpunpcklwd %xmm8,%xmm1,%xmm0\n   106dc:\tc5 f9 6f c8          \tvmovdqa %xmm0,%xmm1\n   106e0:\tc5 d9 61 c7          \tvpunpcklwd %xmm7,%xmm4,%xmm0\n   106e4:\tc5 f9 6f e0          \tvmovdqa %xmm0,%xmm4\n   106e8:\tc5 e9 61 c6          \tvpunpcklwd %xmm6,%xmm2,%xmm0\n   106ec:\tc5 f9 6f d0          \tvmovdqa %xmm0,%xmm2\n   106f0:\tc5 e1 61 c5          \tvpunpcklwd %xmm5,%xmm3,%xmm0\n   106f4:\tc5 f9 6f d8          \tvmovdqa %xmm0,%xmm3\n   106f8:\tc5 f1 62 c4          \tvpunpckldq %xmm4,%xmm1,%xmm0\n   106fc:\tc5 f9 6f c8          \tvmovdqa %xmm0,%xmm1\n   10700:\tc5 e9 62 c3          \tvpunpckldq %xmm3,%xmm2,%xmm0\n   10704:\tc5 f1 6c c0          \tvpunpcklqdq %xmm0,%xmm1,%xmm0\n   10708:\t90                   \tnop\n   10709:\tc5 f8 29 85 70 ff ff \tvmovaps %xmm0,-0x90(%rbp)\n   10710:\tff \n   10711:\te9 7a 03 00 00       \tjmpq   10a90 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x86e>\n   10716:\t83 bd 08 f5 ff ff 00 \tcmpl   $0x0,-0xaf8(%rbp)\n   1071d:\t74 57                \tje     10776 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x554>\n   1071f:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n   10726:\teb 46                \tjmp    1076e <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x54c>\n   10728:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   1072b:\t01 c0                \tadd    %eax,%eax\n   1072d:\t48 98                \tcltq   \n   1072f:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n   10736:\t00 \n   10737:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   1073b:\t48 01 d0             \tadd    %rdx,%rax\n   1073e:\t48 89 85 28 ff ff ff \tmov    %rax,-0xd8(%rbp)\n   10745:\t48 8b 85 28 ff ff ff \tmov    -0xd8(%rbp),%rax\n   1074c:\tc5 f9 6f 00          \tvmovdqa (%rax),%xmm0\n   10750:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   10753:\t48 98                \tcltq   \n   10755:\t48 c1 e0 04          \tshl    $0x4,%rax\n   10759:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   1075d:\t48 01 d8             \tadd    %rbx,%rax\n   10760:\t48 2d 40 0a 00 00    \tsub    $0xa40,%rax\n   10766:\tc5 f8 29 00          \tvmovaps %xmm0,(%rax)\n   1076a:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   1076e:\t83 7d cc 07          \tcmpl   $0x7,-0x34(%rbp)\n   10772:\t7e b4                \tjle    10728 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x506>\n   10774:\teb 31                \tjmp    107a7 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x585>\n   10776:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n   1077d:\teb 22                \tjmp    107a1 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x57f>\n   1077f:\tc5 f9 ef c0          \tvpxor  %xmm0,%xmm0,%xmm0\n   10783:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   10786:\t48 98                \tcltq   \n   10788:\t48 c1 e0 04          \tshl    $0x4,%rax\n   1078c:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   10790:\t48 01 d8             \tadd    %rbx,%rax\n   10793:\t48 2d 40 0a 00 00    \tsub    $0xa40,%rax\n   10799:\tc5 f8 29 00          \tvmovaps %xmm0,(%rax)\n   1079d:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   107a1:\t83 7d cc 07          \tcmpl   $0x7,-0x34(%rbp)\n   107a5:\t7e d8                \tjle    1077f <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x55d>\n   107a7:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n   107ae:\tc7 45 c4 00 00 00 00 \tmovl   $0x0,-0x3c(%rbp)\n   107b5:\te9 73 02 00 00       \tjmpq   10a2d <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x80b>\n   107ba:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n   107be:\t48 89 85 f8 fe ff ff \tmov    %rax,-0x108(%rbp)\n   107c5:\t48 8b 85 f8 fe ff ff \tmov    -0x108(%rbp),%rax\n   107cc:\tc5 f9 6f 00          \tvmovdqa (%rax),%xmm0\n   107d0:\tc5 f8 29 85 60 ff ff \tvmovaps %xmm0,-0xa0(%rbp)\n   107d7:\tff \n   107d8:\t48 83 45 b0 10       \taddq   $0x10,-0x50(%rbp)\n   107dd:\tc5 f9 6f 85 60 ff ff \tvmovdqa -0xa0(%rbp),%xmm0\n   107e4:\tff \n   107e5:\tc5 f8 29 85 10 ff ff \tvmovaps %xmm0,-0xf0(%rbp)\n   107ec:\tff \n   107ed:\tc5 f9 6f 85 70 ff ff \tvmovdqa -0x90(%rbp),%xmm0\n   107f4:\tff \n   107f5:\tc5 f8 29 85 00 ff ff \tvmovaps %xmm0,-0x100(%rbp)\n   107fc:\tff \n   107fd:\tc5 f9 6f 8d 10 ff ff \tvmovdqa -0xf0(%rbp),%xmm1\n   10804:\tff \n   10805:\tc5 f9 6f 85 00 ff ff \tvmovdqa -0x100(%rbp),%xmm0\n   1080c:\tff \n   1080d:\tc5 f1 db c0          \tvpand  %xmm0,%xmm1,%xmm0\n   10811:\tc5 f8 29 85 50 ff ff \tvmovaps %xmm0,-0xb0(%rbp)\n   10818:\tff \n   10819:\tc7 45 c8 00 00 00 00 \tmovl   $0x0,-0x38(%rbp)\n   10820:\te9 b5 00 00 00       \tjmpq   108da <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x6b8>\n   10825:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   10828:\t48 98                \tcltq   \n   1082a:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n   1082d:\t48 63 d2             \tmovslq %edx,%rdx\n   10830:\t48 c1 e2 03          \tshl    $0x3,%rdx\n   10834:\t48 01 d0             \tadd    %rdx,%rax\n   10837:\t48 c1 e0 04          \tshl    $0x4,%rax\n   1083b:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   1083f:\t48 01 d8             \tadd    %rbx,%rax\n   10842:\t48 2d c0 09 00 00    \tsub    $0x9c0,%rax\n   10848:\tc5 f9 6f 00          \tvmovdqa (%rax),%xmm0\n   1084c:\tc5 f8 29 85 c0 fe ff \tvmovaps %xmm0,-0x140(%rbp)\n   10853:\tff \n   10854:\tc5 f9 6f 85 50 ff ff \tvmovdqa -0xb0(%rbp),%xmm0\n   1085b:\tff \n   1085c:\tc5 f8 29 85 b0 fe ff \tvmovaps %xmm0,-0x150(%rbp)\n   10863:\tff \n   10864:\tc5 f9 6f 8d b0 fe ff \tvmovdqa -0x150(%rbp),%xmm1\n   1086b:\tff \n   1086c:\tc5 f9 6f 85 c0 fe ff \tvmovdqa -0x140(%rbp),%xmm0\n   10873:\tff \n   10874:\tc4 e2 79 00 c1       \tvpshufb %xmm1,%xmm0,%xmm0\n   10879:\tc5 f9 6f c8          \tvmovdqa %xmm0,%xmm1\n   1087d:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   10880:\t48 98                \tcltq   \n   10882:\t48 c1 e0 04          \tshl    $0x4,%rax\n   10886:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n   1088a:\t48 01 f8             \tadd    %rdi,%rax\n   1088d:\t48 2d 40 0a 00 00    \tsub    $0xa40,%rax\n   10893:\tc5 f9 6f 00          \tvmovdqa (%rax),%xmm0\n   10897:\tc5 f8 29 85 e0 fe ff \tvmovaps %xmm0,-0x120(%rbp)\n   1089e:\tff \n   1089f:\tc5 f8 29 8d d0 fe ff \tvmovaps %xmm1,-0x130(%rbp)\n   108a6:\tff \n   108a7:\tc5 f9 6f 8d e0 fe ff \tvmovdqa -0x120(%rbp),%xmm1\n   108ae:\tff \n   108af:\tc5 f9 6f 85 d0 fe ff \tvmovdqa -0x130(%rbp),%xmm0\n   108b6:\tff \n   108b7:\tc5 f1 ef c0          \tvpxor  %xmm0,%xmm1,%xmm0\n   108bb:\t90                   \tnop\n   108bc:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   108bf:\t48 98                \tcltq   \n   108c1:\t48 c1 e0 04          \tshl    $0x4,%rax\n   108c5:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   108c9:\t48 01 d8             \tadd    %rbx,%rax\n   108cc:\t48 2d 40 0a 00 00    \tsub    $0xa40,%rax\n   108d2:\tc5 f8 29 00          \tvmovaps %xmm0,(%rax)\n   108d6:\t83 45 c8 01          \taddl   $0x1,-0x38(%rbp)\n   108da:\t83 7d c8 07          \tcmpl   $0x7,-0x38(%rbp)\n   108de:\t0f 8e 41 ff ff ff    \tjle    10825 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x603>\n   108e4:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   108e8:\tc5 f9 6f 85 60 ff ff \tvmovdqa -0xa0(%rbp),%xmm0\n   108ef:\tff \n   108f0:\tc5 f8 29 85 80 fe ff \tvmovaps %xmm0,-0x180(%rbp)\n   108f7:\tff \n   108f8:\tc7 85 7c fe ff ff 04 \tmovl   $0x4,-0x184(%rbp)\n   108ff:\t00 00 00 \n   10902:\tc5 f9 6f 8d 80 fe ff \tvmovdqa -0x180(%rbp),%xmm1\n   10909:\tff \n   1090a:\tc5 f9 6e 85 7c fe ff \tvmovd  -0x184(%rbp),%xmm0\n   10911:\tff \n   10912:\tc5 f1 d2 c0          \tvpsrld %xmm0,%xmm1,%xmm0\n   10916:\tc5 f8 29 85 60 ff ff \tvmovaps %xmm0,-0xa0(%rbp)\n   1091d:\tff \n   1091e:\tc5 f9 6f 85 60 ff ff \tvmovdqa -0xa0(%rbp),%xmm0\n   10925:\tff \n   10926:\tc5 f8 29 85 a0 fe ff \tvmovaps %xmm0,-0x160(%rbp)\n   1092d:\tff \n   1092e:\tc5 f9 6f 85 70 ff ff \tvmovdqa -0x90(%rbp),%xmm0\n   10935:\tff \n   10936:\tc5 f8 29 85 90 fe ff \tvmovaps %xmm0,-0x170(%rbp)\n   1093d:\tff \n   1093e:\tc5 f9 6f 8d a0 fe ff \tvmovdqa -0x160(%rbp),%xmm1\n   10945:\tff \n   10946:\tc5 f9 6f 85 90 fe ff \tvmovdqa -0x170(%rbp),%xmm0\n   1094d:\tff \n   1094e:\tc5 f1 db c0          \tvpand  %xmm0,%xmm1,%xmm0\n   10952:\tc5 f8 29 85 50 ff ff \tvmovaps %xmm0,-0xb0(%rbp)\n   10959:\tff \n   1095a:\tc7 45 c8 00 00 00 00 \tmovl   $0x0,-0x38(%rbp)\n   10961:\te9 b5 00 00 00       \tjmpq   10a1b <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x7f9>\n   10966:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   10969:\t48 98                \tcltq   \n   1096b:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n   1096e:\t48 63 d2             \tmovslq %edx,%rdx\n   10971:\t48 c1 e2 03          \tshl    $0x3,%rdx\n   10975:\t48 01 d0             \tadd    %rdx,%rax\n   10978:\t48 c1 e0 04          \tshl    $0x4,%rax\n   1097c:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n   10980:\t48 01 f8             \tadd    %rdi,%rax\n   10983:\t48 2d c0 09 00 00    \tsub    $0x9c0,%rax\n   10989:\tc5 f9 6f 00          \tvmovdqa (%rax),%xmm0\n   1098d:\tc5 f8 29 85 40 fe ff \tvmovaps %xmm0,-0x1c0(%rbp)\n   10994:\tff \n   10995:\tc5 f9 6f 85 50 ff ff \tvmovdqa -0xb0(%rbp),%xmm0\n   1099c:\tff \n   1099d:\tc5 f8 29 85 30 fe ff \tvmovaps %xmm0,-0x1d0(%rbp)\n   109a4:\tff \n   109a5:\tc5 f9 6f 8d 30 fe ff \tvmovdqa -0x1d0(%rbp),%xmm1\n   109ac:\tff \n   109ad:\tc5 f9 6f 85 40 fe ff \tvmovdqa -0x1c0(%rbp),%xmm0\n   109b4:\tff \n   109b5:\tc4 e2 79 00 c1       \tvpshufb %xmm1,%xmm0,%xmm0\n   109ba:\tc5 f9 6f c8          \tvmovdqa %xmm0,%xmm1\n   109be:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   109c1:\t48 98                \tcltq   \n   109c3:\t48 c1 e0 04          \tshl    $0x4,%rax\n   109c7:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   109cb:\t48 01 d8             \tadd    %rbx,%rax\n   109ce:\t48 2d 40 0a 00 00    \tsub    $0xa40,%rax\n   109d4:\tc5 f9 6f 00          \tvmovdqa (%rax),%xmm0\n   109d8:\tc5 f8 29 85 60 fe ff \tvmovaps %xmm0,-0x1a0(%rbp)\n   109df:\tff \n   109e0:\tc5 f8 29 8d 50 fe ff \tvmovaps %xmm1,-0x1b0(%rbp)\n   109e7:\tff \n   109e8:\tc5 f9 6f 8d 60 fe ff \tvmovdqa -0x1a0(%rbp),%xmm1\n   109ef:\tff \n   109f0:\tc5 f9 6f 85 50 fe ff \tvmovdqa -0x1b0(%rbp),%xmm0\n   109f7:\tff \n   109f8:\tc5 f1 ef c0          \tvpxor  %xmm0,%xmm1,%xmm0\n   109fc:\t90                   \tnop\n   109fd:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n   10a00:\t48 98                \tcltq   \n   10a02:\t48 c1 e0 04          \tshl    $0x4,%rax\n   10a06:\t48 8d 7d d0          \tlea    -0x30(%rbp),%rdi\n   10a0a:\t48 01 f8             \tadd    %rdi,%rax\n   10a0d:\t48 2d 40 0a 00 00    \tsub    $0xa40,%rax\n   10a13:\tc5 f8 29 00          \tvmovaps %xmm0,(%rax)\n   10a17:\t83 45 c8 01          \taddl   $0x1,-0x38(%rbp)\n   10a1b:\t83 7d c8 07          \tcmpl   $0x7,-0x38(%rbp)\n   10a1f:\t0f 8e 41 ff ff ff    \tjle    10966 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x744>\n   10a25:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   10a29:\t83 45 c4 01          \taddl   $0x1,-0x3c(%rbp)\n   10a2d:\t83 7d c4 07          \tcmpl   $0x7,-0x3c(%rbp)\n   10a31:\t0f 8e 83 fd ff ff    \tjle    107ba <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x598>\n   10a37:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n   10a3e:\teb 4a                \tjmp    10a8a <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x868>\n   10a40:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n   10a43:\t48 98                \tcltq   \n   10a45:\t48 c1 e0 04          \tshl    $0x4,%rax\n   10a49:\t48 8d 5d d0          \tlea    -0x30(%rbp),%rbx\n   10a4d:\t48 01 d8             \tadd    %rbx,%rax\n   10a50:\t48 2d 40 0a 00 00    \tsub    $0xa40,%rax\n   10a56:\tc5 f9 6f 00          \tvmovdqa (%rax),%xmm0\n   10a5a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   10a5e:\t48 89 85 28 fe ff ff \tmov    %rax,-0x1d8(%rbp)\n   10a65:\tc5 f8 29 85 10 fe ff \tvmovaps %xmm0,-0x1f0(%rbp)\n   10a6c:\tff \n   10a6d:\t48 8b 85 28 fe ff ff \tmov    -0x1d8(%rbp),%rax\n   10a74:\tc5 f9 6f 85 10 fe ff \tvmovdqa -0x1f0(%rbp),%xmm0\n   10a7b:\tff \n   10a7c:\tc5 f8 29 00          \tvmovaps %xmm0,(%rax)\n   10a80:\t90                   \tnop\n   10a81:\t48 83 45 a8 10       \taddq   $0x10,-0x58(%rbp)\n   10a86:\t83 45 cc 01          \taddl   $0x1,-0x34(%rbp)\n   10a8a:\t83 7d cc 07          \tcmpl   $0x7,-0x34(%rbp)\n   10a8e:\t7e b0                \tjle    10a40 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x81e>\n   10a90:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n   10a94:\t48 3b 45 90          \tcmp    -0x70(%rbp),%rax\n   10a98:\t0f 85 78 fc ff ff    \tjne    10716 <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x4f4>\n   10a9e:\t48 8d 85 30 f5 ff ff \tlea    -0xad0(%rbp),%rax\n   10aa5:\t48 89 c7             \tmov    %rax,%rdi\n   10aa8:\te8 00 00 00 00       \tcallq  10aad <gf_w64_split_4_64_lazy_sse_altmap_multiply_region+0x88b>\n   10aad:\t48 8d 65 d8          \tlea    -0x28(%rbp),%rsp\n   10ab1:\t5b                   \tpop    %rbx\n   10ab2:\t41 5c                \tpop    %r12\n   10ab4:\t41 5d                \tpop    %r13\n   10ab6:\t41 5e                \tpop    %r14\n   10ab8:\t41 5f                \tpop    %r15\n   10aba:\t5d                   \tpop    %rbp\n   10abb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gf_w64_split_4_64_lazy_sse_altmap_multiply_region(\n    __int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned int a5,\n    unsigned int a6) {\n  __int64 v7;\n  char <span class=\"supfact\">v101</span>[Number];\n  __int64 v102;\n  __int64 v103;\n  __int64 v104;\n  char v105[Number];\n  __int64 v107;\n  int v112;\n  __int64 v120;\n  __int64 v123;\n  char v124;\n  char v125;\n  char v126;\n  char v127;\n  char v128;\n  char v129;\n  char v130;\n  char v131;\n  char v132;\n  char v133;\n  char v134;\n  char v135;\n  char v136;\n  char v137;\n  char v138;\n  char v139;\n  char v140;\n  char *v141;\n  __int64 v145;\n  __int64 v146;\n  __int64 v147;\n  __int64 v148;\n  __int64 v149;\n  __int64 v150;\n  __int64 v151;\n  int k;\n  int j;\n  int i;\n  _OWORD v155[Number];\n  if (!a4)\n    return gf_multby_zero(a3, a5, a6);\n  if (a4 == Number)\n    return gf_multby_one(a2, a3, a5, a6);\n  v148 = *(_QWORD *)(a1 + Number);\n  v147 = *(_QWORD *)(v148 + Number);\n  gf_set_region_data(<span class=\"supfact\">v101</span>, a1, a2, a3, a5, a4, a6, Number L);\n  gf_do_initial_region_alignment(<span class=\"supfact\">v101</span>);\n  v150 = v102;\n  v149 = v103;\n  v146 = v104;\n  v145 = *(_QWORD *)(v148 + Number);\n  v151 = a4;\n  for (i = Number; i <= Number; ++i) {\n    *(_QWORD *)(((__int64)i << Number) + v145) = Number L;\n    for (j = Number; j <= Number; j *= Number) {\n      for (k = Number; k < j; ++k)\n        *(_QWORD *)(v145 + Number * (Number L * i + (j ^ k))) =\n            v151 ^ *(_QWORD *)(v145 + Number * (Number L * i + k));\n      if (v151 >= Number)\n        v7 = Number * v151;\n      else\n        v7 = v147 ^ (Number * v151);\n      v151 = v7;\n    }\n    for (j = Number; j <= Number; ++j) {\n      for (k = Number; k <= Number; ++k) {\n        v105[k] = *(_QWORD *)(v145 + Number * (Number L * i + k));\n        *(_QWORD *)(v145 + Number * (Number L * i + k)) >>= Number;\n      }\n      v141 = v105;\n      _RAX = v105;\n      __asm { vmovdqu xmm0 , xmmword ptr [ rax ]}\n      _RAX = &v155[Number * i - Number + j];\n      __asm { vmovaps xmmword ptr [ rax ] , xmm0 }\n    }\n  }\n  v140 = Number;\n  v139 = Number;\n  v138 = Number;\n  v137 = Number;\n  v136 = Number;\n  v135 = Number;\n  v134 = Number;\n  v133 = Number;\n  v132 = Number;\n  v131 = Number;\n  v130 = Number;\n  v129 = Number;\n  v128 = Number;\n  v127 = Number;\n  v126 = Number;\n  v125 = Number;\n  v124 = Number;\n  _EAX = Number;\n  __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm1 , xmm0}\n  _EAX = Number;\n  __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm8 , xmm0}\n  _EAX = Number;\n  __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm4 , xmm0}\n  _EAX = Number;\n  __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm7 , xmm0}\n  _EAX = Number;\n  __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm2 , xmm0}\n  _EAX = Number;\n  __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm6 , xmm0}\n  _EAX = Number;\n  __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm3 , xmm0}\n  _EAX = Number;\n  __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm5 , xmm0 vpunpcklwd xmm0 , xmm1 , xmm8 vmovdqa xmm1 , xmm0 vpunpcklwd xmm0 , xmm4 , xmm7 vmovdqa xmm4 , xmm0 vpunpcklwd xmm0 , xmm2 , xmm6 vmovdqa xmm2 , xmm0 vpunpcklwd xmm0 , xmm3 , xmm5 vmovdqa xmm3 , xmm0 vpunpckldq xmm0 , xmm1 , xmm4 vmovdqa xmm1 , xmm0 vpunpckldq xmm0 , xmm2 , xmm3 vpunpcklqdq xmm0 , xmm1 , xmm0 vmovaps [ rbp + var_90 ] , xmm0\n  }\n  while (v149 != v146) {\n    if (a6) {\n      for (i = Number; i <= Number; ++i) {\n        v123 = Number L * i + v149;\n        _RAX = v123;\n        __asm { vmovdqa xmm0 , xmmword ptr [ rax ]}\n        _RAX = &v155[i - Number];\n        __asm { vmovaps xmmword ptr [ rax ] , xmm0 }\n      }\n    } else {\n      for (i = Number; i <= Number; ++i) {\n        __asm { vpxor xmm0 , xmm0 , xmm0}\n        _RAX = &v155[i - Number];\n        __asm { vmovaps xmmword ptr [ rax ] , xmm0 }\n      }\n    }\n    i = Number;\n    for (k = Number; k <= Number; ++k) {\n      v120 = v150;\n      _RAX = v150;\n      __asm { vmovdqa xmm0 , xmmword ptr [ rax ] vmovaps [ rbp + var_A0 ] , xmm0}\n      v150 += Number L;\n      __asm { vmovdqa xmm0 , [ rbp + var_A0 ] vmovaps [ rbp + var_F0 ] , xmm0 vmovdqa xmm0 , [ rbp + var_90 ] vmovaps [ rbp + var_100 ] , xmm0 vmovdqa xmm1 , [ rbp + var_F0 ] vmovdqa xmm0 , [ rbp + var_100 ] vpand xmm0 , xmm1 , xmm0 vmovaps [ rbp + var_B0 ] , xmm0\n      }\n      for (j = Number; j <= Number; ++j) {\n        _RAX = &v155[Number * i - Number + j];\n        __asm { vmovdqa xmm0 , xmmword ptr [ rax ] vmovaps [ rbp + var_140 ] , xmm0 vmovdqa xmm0 , [ rbp + var_B0 ] vmovaps [ rbp + var_150 ] , xmm0 vmovdqa xmm1 , [ rbp + var_150 ] vmovdqa xmm0 , [ rbp + var_140 ] vpshufb xmm0 , xmm0 , xmm1 vmovdqa xmm1 , xmm0}\n        _RAX = &v155[j - Number];\n        __asm { vmovdqa xmm0 , xmmword ptr [ rax ] vmovaps [ rbp + var_120 ] , xmm0 vmovaps [ rbp + var_130 ] , xmm1 vmovdqa xmm1 , [ rbp + var_120 ] vmovdqa xmm0 , [ rbp + var_130 ] vpxor xmm0 , xmm1 , xmm0 vmovaps xmmword ptr [ rax ] , xmm0\n        }\n      }\n      ++i;\n      __asm { vmovdqa xmm0 , [ rbp + var_A0 ] vmovaps [ rbp + var_180 ] , xmm0}\n      v112 = Number;\n      __asm { vmovdqa xmm1 , [ rbp + var_180 ] vmovd xmm0 , [ rbp + var_184 ] vpsrld xmm0 , xmm1 , xmm0 vmovaps [ rbp + var_A0 ] , xmm0 vmovdqa xmm0 , [ rbp + var_A0 ] vmovaps [ rbp + var_160 ] , xmm0 vmovdqa xmm0 , [ rbp + var_90 ] vmovaps [ rbp + var_170 ] , xmm0 vmovdqa xmm1 , [ rbp + var_160 ] vmovdqa xmm0 , [ rbp + var_170 ] vpand xmm0 , xmm1 , xmm0 vmovaps [ rbp + var_B0 ] , xmm0\n      }\n      for (j = Number; j <= Number; ++j) {\n        _RAX = &v155[Number * i - Number + j];\n        __asm { vmovdqa xmm0 , xmmword ptr [ rax ] vmovaps [ rbp + var_1C0 ] , xmm0 vmovdqa xmm0 , [ rbp + var_B0 ] vmovaps [ rbp + var_1D0 ] , xmm0 vmovdqa xmm1 , [ rbp + var_1D0 ] vmovdqa xmm0 , [ rbp + var_1C0 ] vpshufb xmm0 , xmm0 , xmm1 vmovdqa xmm1 , xmm0}\n        _RAX = &v155[j - Number];\n        __asm { vmovdqa xmm0 , xmmword ptr [ rax ] vmovaps [ rbp + var_1A0 ] , xmm0 vmovaps [ rbp + var_1B0 ] , xmm1 vmovdqa xmm1 , [ rbp + var_1A0 ] vmovdqa xmm0 , [ rbp + var_1B0 ] vpxor xmm0 , xmm1 , xmm0 vmovaps xmmword ptr [ rax ] , xmm0\n        }\n      }\n      ++i;\n    }\n    for (i = Number; i <= Number; ++i) {\n      _RAX = &v155[i - Number];\n      __asm { vmovdqa xmm0 , xmmword ptr [ rax ]}\n      v107 = v149;\n      __asm { vmovaps [ rbp + var_1F0 ] , xmm0}\n      _RAX = v149;\n      __asm { vmovdqa xmm0 , [ rbp + var_1F0 ] vmovaps xmmword ptr [ rax ] , xmm0}\n      v149 += Number L;\n    }\n  }\n  return gf_do_final_region_alignment(<span class=\"supfact\">v101</span>);\n}", "code_t": "void __cdecl gf_w64_split_4_64_lazy_sse_altmap_multiply_region(\n    gf_t *gf, void *src, void *dest, uint64_t val, int bytes, int xor) {\n  uint64_t v6;\n  gf_region_data <span class=\"supfact\">rd</span>;\n  uint8_t btable[Number];\n  uint64_t *v103;\n  int v108;\n  uint64_t *v116;\n  uint64_t *v119;\n  char v120;\n  char v121;\n  char v122;\n  char v123;\n  char v124;\n  char v125;\n  char v126;\n  char v127;\n  char v128;\n  char v129;\n  char v130;\n  char v131;\n  char v132;\n  char v133;\n  char v134;\n  char v135;\n  char v136;\n  uint8_t *v137;\n  gf_split_4_64_lazy_data *ld;\n  uint64_t *top;\n  uint64_t pp;\n  gf_internal_t *h;\n  uint64_t *d64;\n  uint64_t *s64;\n  uint64_t v;\n  int k;\n  int j;\n  int i;\n  _OWORD v151[Number];\n  if (val) {\n    if (val == Number) {\n      gf_multby_one(src, dest, (unsigned int)bytes, (unsigned int)xor);\n    } else {\n      h = (gf_internal_t *)gf->scratch;\n      pp = h->prim_poly;\n      gf_set_region_data(&<span class=\"supfact\">rd</span>, gf, src, dest,\n                         (unsigned int)bytes, val, (unsigned int)xor, Number L);\n      gf_do_initial_region_alignment(&<span class=\"supfact\">rd</span>);\n      s64 = (uint64_t *)<span class=\"supfact\">rd</span>.s_start;\n      d64 = (uint64_t *)<span class=\"supfact\">rd</span>.d_start;\n      top = (uint64_t *)<span class=\"supfact\">rd</span>.d_top;\n      ld = (gf_split_4_64_lazy_data *)h->private;\n      v = val;\n      for (i = Number; i <= Number; ++i) {\n        ld->tables[(__int64)i][Number] = Number L;\n        for (j = Number; j <= Number; j *= Number) {\n          for (k = Number; k < j; ++k)\n            ld->tables[i][j ^ k] = v ^ ld->tables[i][k];\n          if ((v & Number) == Number L)\n            v6 = Number * v;\n          else\n            v6 = pp ^ (Number * v);\n          v = v6;\n        }\n        for (j = Number; j <= Number; ++j) {\n          for (k = Number; k <= Number; ++k) {\n            btable[k] = ld->tables[i][k];\n            ld->tables[i][k] >>= Number;\n          }\n          v137 = btable;\n          _RAX = btable;\n          __asm { vmovdqu xmm0 , xmmword ptr [ rax ]}\n          _RAX = &v151[Number * i - Number + j];\n          __asm { vmovaps xmmword ptr [ rax ] , xmm0 }\n        }\n      }\n      v136 = Number;\n      v135 = Number;\n      v134 = Number;\n      v133 = Number;\n      v132 = Number;\n      v131 = Number;\n      v130 = Number;\n      v129 = Number;\n      v128 = Number;\n      v127 = Number;\n      v126 = Number;\n      v125 = Number;\n      v124 = Number;\n      v123 = Number;\n      v122 = Number;\n      v121 = Number;\n      v120 = Number;\n      _EAX = Number;\n      __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm1 , xmm0}\n      _EAX = Number;\n      __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm8 , xmm0}\n      _EAX = Number;\n      __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm4 , xmm0}\n      _EAX = Number;\n      __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm7 , xmm0}\n      _EAX = Number;\n      __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm2 , xmm0}\n      _EAX = Number;\n      __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm6 , xmm0}\n      _EAX = Number;\n      __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm3 , xmm0}\n      _EAX = Number;\n      __asm { vmovd xmm0 , eax vpinsrb xmm0 , xmm0 , eax , Number vmovdqa xmm5 , xmm0 vpunpcklwd xmm0 , xmm1 , xmm8 vmovdqa xmm1 , xmm0 vpunpcklwd xmm0 , xmm4 , xmm7 vmovdqa xmm4 , xmm0 vpunpcklwd xmm0 , xmm2 , xmm6 vmovdqa xmm2 , xmm0 vpunpcklwd xmm0 , xmm3 , xmm5 vmovdqa xmm3 , xmm0 vpunpckldq xmm0 , xmm1 , xmm4 vmovdqa xmm1 , xmm0 vpunpckldq xmm0 , xmm2 , xmm3 vpunpcklqdq xmm0 , xmm1 , xmm0 vmovaps xmmword ptr [ rbp + mask1 ] , xmm0\n      }\n      while (d64 != top) {\n        if (xor) {\n          for (i = Number; i <= Number; ++i) {\n            v119 = &d64[Number * i];\n            _RAX = v119;\n            __asm { vmovdqa xmm0 , xmmword ptr [ rax ]}\n            _RAX = &v151[i - Number];\n            __asm { vmovaps xmmword ptr [ rax ] , xmm0 }\n          }\n        } else {\n          for (i = Number; i <= Number; ++i) {\n            __asm { vpxor xmm0 , xmm0 , xmm0}\n            _RAX = &v151[i - Number];\n            __asm { vmovaps xmmword ptr [ rax ] , xmm0 }\n          }\n        }\n        i = Number;\n        for (k = Number; k <= Number; ++k) {\n          v116 = s64;\n          _RAX = s64;\n          __asm { vmovdqa xmm0 , xmmword ptr [ rax ] vmovaps xmmword ptr [ rbp + v0 ] , xmm0}\n          s64 += Number;\n          __asm { vmovdqa xmm0 , xmmword ptr [ rbp + v0 ] vmovaps [ rbp + var_F0 ] , xmm0 vmovdqa xmm0 , xmmword ptr [ rbp + mask1 ] vmovaps [ rbp + var_100 ] , xmm0 vmovdqa xmm1 , [ rbp + var_F0 ] vmovdqa xmm0 , [ rbp + var_100 ] vpand xmm0 , xmm1 , xmm0 vmovaps xmmword ptr [ rbp + si_0 ] , xmm0\n          }\n          for (j = Number; j <= Number; ++j) {\n            _RAX = &v151[Number * i - Number + j];\n            __asm { vmovdqa xmm0 , xmmword ptr [ rax ] vmovaps [ rbp + var_140 ] , xmm0 vmovdqa xmm0 , xmmword ptr [ rbp + si_0 ] vmovaps [ rbp + var_150 ] , xmm0 vmovdqa xmm1 , [ rbp + var_150 ] vmovdqa xmm0 , [ rbp + var_140 ] vpshufb xmm0 , xmm0 , xmm1 vmovdqa xmm1 , xmm0}\n            _RAX = &v151[j - Number];\n            __asm { vmovdqa xmm0 , xmmword ptr [ rax ] vmovaps [ rbp + var_120 ] , xmm0 vmovaps [ rbp + var_130 ] , xmm1 vmovdqa xmm1 , [ rbp + var_120 ] vmovdqa xmm0 , [ rbp + var_130 ] vpxor xmm0 , xmm1 , xmm0 vmovaps xmmword ptr [ rax ] , xmm0\n            }\n          }\n          ++i;\n          __asm { vmovdqa xmm0 , xmmword ptr [ rbp + v0 ] vmovaps [ rbp + var_180 ] , xmm0}\n          v108 = Number;\n          __asm { vmovdqa xmm1 , [ rbp + var_180 ] vmovd xmm0 , [ rbp + var_184 ] vpsrld xmm0 , xmm1 , xmm0 vmovaps xmmword ptr [ rbp + v0 ] , xmm0 vmovdqa xmm0 , xmmword ptr [ rbp + v0 ] vmovaps [ rbp + var_160 ] , xmm0 vmovdqa xmm0 , xmmword ptr [ rbp + mask1 ] vmovaps [ rbp + var_170 ] , xmm0 vmovdqa xmm1 , [ rbp + var_160 ] vmovdqa xmm0 , [ rbp + var_170 ] vpand xmm0 , xmm1 , xmm0 vmovaps xmmword ptr [ rbp + si_0 ] , xmm0\n          }\n          for (j = Number; j <= Number; ++j) {\n            _RAX = &v151[Number * i - Number + j];\n            __asm { vmovdqa xmm0 , xmmword ptr [ rax ] vmovaps [ rbp + var_1C0 ] , xmm0 vmovdqa xmm0 , xmmword ptr [ rbp + si_0 ] vmovaps [ rbp + var_1D0 ] , xmm0 vmovdqa xmm1 , [ rbp + var_1D0 ] vmovdqa xmm0 , [ rbp + var_1C0 ] vpshufb xmm0 , xmm0 , xmm1 vmovdqa xmm1 , xmm0}\n            _RAX = &v151[j - Number];\n            __asm { vmovdqa xmm0 , xmmword ptr [ rax ] vmovaps [ rbp + var_1A0 ] , xmm0 vmovaps [ rbp + var_1B0 ] , xmm1 vmovdqa xmm1 , [ rbp + var_1A0 ] vmovdqa xmm0 , [ rbp + var_1B0 ] vpxor xmm0 , xmm1 , xmm0 vmovaps xmmword ptr [ rax ] , xmm0\n            }\n          }\n          ++i;\n        }\n        for (i = Number; i <= Number; ++i) {\n          _RAX = &v151[i - Number];\n          __asm { vmovdqa xmm0 , xmmword ptr [ rax ]}\n          v103 = d64;\n          __asm { vmovaps [ rbp + var_1F0 ] , xmm0}\n          _RAX = d64;\n          __asm { vmovdqa xmm0 , [ rbp + var_1F0 ] vmovaps xmmword ptr [ rax ] , xmm0}\n          d64 += Number;\n        }\n      }\n      gf_do_final_region_alignment(&<span class=\"supfact\">rd</span>);\n    }\n  } else {\n    gf_multby_zero(dest, (unsigned int)bytes, (unsigned int)xor);\n  }\n}", "var": [{"name": "v101", "type": "char[48]", "pred_name": "__unk__", "ref_name": "rd", "ref_type": "struct gf_region_data { gf_t * gf; void * src; void * dest; int bytes; PADDING (4); uint64_t val; int xor; int align; void * s_start; void * d_start; void * s_top; void * d_top; }"}], "body_in_train": false}, {"repo_owner": "daniloegea", "repo_name": "freebsd", "path": "daniloegea/freebsd/aeae63fb709049f5d1786436080f6ac9bed86c1793e6a23aea7af49a9d02c439", "path_in_repo": "daniloegea/freebsd/contrib/groff/src/roff/troff/input.o", "objdump": "0000000000000b2e <_Z21charinfo_to_node_listP8charinfoPK11environment.cold>:\n b2e:\tbe 98 00 00 00       \tmov    $0x98,%esi\n b33:\t48 89 ef             \tmov    %rbp,%rdi\n b36:\te8 00 00 00 00       \tcallq  b3b <_Z21charinfo_to_node_listP8charinfoPK11environment.cold+0xd>\n b3b:\t48 8b 7c 24 18       \tmov    0x18(%rsp),%rdi\n b40:\t48 85 ff             \ttest   %rdi,%rdi\n b43:\t74 06                \tje     b4b <_Z21charinfo_to_node_listP8charinfoPK11environment.cold+0x1d>\n b45:\t48 8b 07             \tmov    (%rdi),%rax\n b48:\tff 50 08             \tcallq  *0x8(%rax)\n b4b:\t4c 89 e7             \tmov    %r12,%rdi\n b4e:\te8 00 00 00 00       \tcallq  b53 <_Z21charinfo_to_node_listP8charinfoPK11environment.cold+0x25>\n b53:\t48 89 df             \tmov    %rbx,%rdi\n b56:\te8 00 00 00 00       \tcallq  b5b <_ZN13file_iteratorD1Ev+0x1b>", "code_s": "void __fastcall __noreturn charinfo_to_node_list(__int64 a1, __int64 a2,\n                                                 __int64 a3, __int64 a4,\n                                                 __int64 a5, __int64 a6,\n                                                 __int64 a7, __int64 a8,\n                                                 __int64 a9) {\n  struct _Unwind_Exception *<span class=\"supfact\">v9</span>;\n  void *v10;\n  environment *v11;\n  operator delete(v10, Number);\n  if (a9)\n    (*(void(__fastcall **)(__int64))(*(_QWORD *)a9 + Number L))(a9);\n  environment ~environment(v11);\n  Unwind_Resume(<span class=\"supfact\">v9</span>);\n}", "code_t": "void __fastcall __noreturn charinfo_to_node_list(__int64 a1, __int64 a2,\n                                                 __int64 a3, __int64 a4,\n                                                 __int64 a5, __int64 a6,\n                                                 __int64 a7, __int64 a8,\n                                                 __int64 a9) {\n  struct _Unwind_Exception *<span class=\"supfact\">v9</span>;\n  void *v10;\n  environment *v11;\n  operator delete(v10, Number);\n  if (a9)\n    (*(void(__fastcall **)(__int64))(*(_QWORD *)a9 + Number L))(a9);\n  environment ~environment(v11);\n  Unwind_Resume(<span class=\"supfact\">v9</span>);\n}", "var": [{"name": "v9", "type": "struct _Unwind_Exception *", "pred_name": "v9", "ref_name": "v9", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "nmacs", "repo_name": "print3d", "path": "nmacs/print3d/142ee0ab03aaea08c1cce3b49aba610648f7bc1ddb53dfc348f2f9408898fa3c", "path_in_repo": "nmacs/print3d//toolchain/openocd-0.7.0/jimtcl/jimsh", "objdump": "00000000004285e2 <getWindowSize>:\n  4285e2:\t55                   \tpush   %rbp\n  4285e3:\t48 89 e5             \tmov    %rsp,%rbp\n  4285e6:\t48 83 ec 20          \tsub    $0x20,%rsp\n  4285ea:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  4285ee:\t48 8d 45 f0          \tlea    -0x10(%rbp),%rax\n  4285f2:\t48 89 c2             \tmov    %rax,%rdx\n  4285f5:\tbe 13 54 00 00       \tmov    $0x5413,%esi\n  4285fa:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4285ff:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  428604:\te8 a7 dd fd ff       \tcallq  4063b0 <ioctl@plt>\n  428609:\t85 c0                \ttest   %eax,%eax\n  42860b:\t75 21                \tjne    42862e <getWindowSize+0x4c>\n  42860d:\t0f b7 45 f2          \tmovzwl -0xe(%rbp),%eax\n  428611:\t66 85 c0             \ttest   %ax,%ax\n  428614:\t74 18                \tje     42862e <getWindowSize+0x4c>\n  428616:\t0f b7 45 f2          \tmovzwl -0xe(%rbp),%eax\n  42861a:\t0f b7 d0             \tmovzwl %ax,%edx\n  42861d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  428621:\t89 50 18             \tmov    %edx,0x18(%rax)\n  428624:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  428629:\te9 e0 00 00 00       \tjmpq   42870e <getWindowSize+0x12c>\n  42862e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  428632:\t8b 40 18             \tmov    0x18(%rax),%eax\n  428635:\t85 c0                \ttest   %eax,%eax\n  428637:\t0f 85 cc 00 00 00    \tjne    428709 <getWindowSize+0x127>\n  42863d:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  428641:\tc7 40 18 50 00 00 00 \tmovl   $0x50,0x18(%rax)\n  428648:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42864c:\t8b 40 28             \tmov    0x28(%rax),%eax\n  42864f:\tbe 33 2a 44 00       \tmov    $0x442a33,%esi\n  428654:\t89 c7                \tmov    %eax,%edi\n  428656:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42865b:\te8 2a fd ff ff       \tcallq  42838a <fd_printf>\n  428660:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  428664:\t8b 40 28             \tmov    0x28(%rax),%eax\n  428667:\tbe 64 00 00 00       \tmov    $0x64,%esi\n  42866c:\t89 c7                \tmov    %eax,%edi\n  42866e:\te8 e9 fe ff ff       \tcallq  42855c <fd_read_char>\n  428673:\t83 f8 1b             \tcmp    $0x1b,%eax\n  428676:\t0f 85 8d 00 00 00    \tjne    428709 <getWindowSize+0x127>\n  42867c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  428680:\t8b 40 28             \tmov    0x28(%rax),%eax\n  428683:\tbe 64 00 00 00       \tmov    $0x64,%esi\n  428688:\t89 c7                \tmov    %eax,%edi\n  42868a:\te8 cd fe ff ff       \tcallq  42855c <fd_read_char>\n  42868f:\t83 f8 5b             \tcmp    $0x5b,%eax\n  428692:\t75 75                \tjne    428709 <getWindowSize+0x127>\n  428694:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  42869b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  42869f:\t8b 40 28             \tmov    0x28(%rax),%eax\n  4286a2:\tbe 64 00 00 00       \tmov    $0x64,%esi\n  4286a7:\t89 c7                \tmov    %eax,%edi\n  4286a9:\te8 ae fe ff ff       \tcallq  42855c <fd_read_char>\n  4286ae:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4286b1:\t83 7d f8 3b          \tcmpl   $0x3b,-0x8(%rbp)\n  4286b5:\t75 09                \tjne    4286c0 <getWindowSize+0xde>\n  4286b7:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  4286be:\teb db                \tjmp    42869b <getWindowSize+0xb9>\n  4286c0:\t83 7d f8 52          \tcmpl   $0x52,-0x8(%rbp)\n  4286c4:\t75 1b                \tjne    4286e1 <getWindowSize+0xff>\n  4286c6:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4286ca:\t74 3c                \tje     428708 <getWindowSize+0x126>\n  4286cc:\t81 7d fc e7 03 00 00 \tcmpl   $0x3e7,-0x4(%rbp)\n  4286d3:\t7f 33                \tjg     428708 <getWindowSize+0x126>\n  4286d5:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4286d9:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4286dc:\t89 50 18             \tmov    %edx,0x18(%rax)\n  4286df:\teb 27                \tjmp    428708 <getWindowSize+0x126>\n  4286e1:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%rbp)\n  4286e5:\t78 22                \tjs     428709 <getWindowSize+0x127>\n  4286e7:\t83 7d f8 39          \tcmpl   $0x39,-0x8(%rbp)\n  4286eb:\t7f 1c                \tjg     428709 <getWindowSize+0x127>\n  4286ed:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  4286f0:\t89 d0                \tmov    %edx,%eax\n  4286f2:\tc1 e0 02             \tshl    $0x2,%eax\n  4286f5:\t01 d0                \tadd    %edx,%eax\n  4286f7:\t01 c0                \tadd    %eax,%eax\n  4286f9:\t89 c2                \tmov    %eax,%edx\n  4286fb:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4286fe:\t01 d0                \tadd    %edx,%eax\n  428700:\t83 e8 30             \tsub    $0x30,%eax\n  428703:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  428706:\teb 93                \tjmp    42869b <getWindowSize+0xb9>\n  428708:\t90                   \tnop\n  428709:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  42870e:\tc9                   \tleaveq \n  42870f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall getWindowSize(__int64 a1) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 result;\n  char <span class=\"supfact\">v6</span>[Number];\n  unsigned __int16 v7;\n  int v8;\n  int i;\n  if (ioctl(Number, Number, <span class=\"supfact\">v6</span>) || !v7) {\n    if (!*(_DWORD *)(a1 + Number)) {\n      *(_DWORD *)(a1 + Number) = Number;\n      fd_printf(*(_DWORD *)(a1 + Number), String, v1, v2, v3, v4);\n      if ((unsigned int)fd_read_char(*(_DWORD *)(a1 + Number), Number) ==\n              Number &&\n          (unsigned int)fd_read_char(*(_DWORD *)(a1 + Number), Number) ==\n              Number) {\n        for (i = Number;; i = Number * i + v8 - Number) {\n          while (Number) {\n            v8 = fd_read_char(*(_DWORD *)(a1 + Number), Number);\n            if (v8 != Number)\n              break;\n            i = Number;\n          }\n          if (v8 == Number)\n            break;\n          if (v8 < Number || v8 > Number)\n            goto LABEL_17;\n        }\n        if (i) {\n          if (i <= Number)\n            *(_DWORD *)(a1 + Number) = i;\n        }\n      }\n    }\n  LABEL_17:\n    result = Number L;\n  } else {\n    *(_DWORD *)(a1 + Number) = v7;\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl getWindowSize(current *current) {\n  int result;\n  winsize <span class=\"supfact\">ws</span>;\n  int ch_0;\n  int n;\n  if (ioctl(Number, Number, &<span class=\"supfact\">ws</span>) ||\n      !<span class=\"supfact\">ws</span>.ws_col) {\n    if (!current->cols) {\n      current->cols = Number;\n      fd_printf(current->fd, String);\n      if (fd_read_char(current->fd, Number) == Number &&\n          fd_read_char(current->fd, Number) == Number) {\n        for (n = Number;; n = Number * n + ch_0 - Number) {\n          while (Number) {\n            ch_0 = fd_read_char(current->fd, Number);\n            if (ch_0 != Number)\n              break;\n            n = Number;\n          }\n          if (ch_0 == Number)\n            break;\n          if (ch_0 < Number || ch_0 > Number)\n            goto LABEL_17;\n        }\n        if (n) {\n          if (n <= Number)\n            current->cols = n;\n        }\n      }\n    }\n  LABEL_17:\n    result = Number;\n  } else {\n    current->cols = <span class=\"supfact\">ws</span>.ws_col;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v6", "type": "disappear", "pred_name": "", "ref_name": "ws", "ref_type": "struct winsize { unsigned __int16 ws_row; unsigned __int16 ws_col; unsigned __int16 ws_xpixel; unsigned __int16 ws_ypixel; }"}], "body_in_train": false}, {"repo_owner": "sattarab", "repo_name": "hazard-lab", "path": "sattarab/hazard-lab/d9b0da0d506a0b0fcc9e2502d36ee74f1e4728b19554593fd8e73dad39fca61d", "path_in_repo": "sattarab/hazard-lab/simplesim-3.0d-ece552f-assign1/sim-profile.o", "objdump": "0000000000000b17 <sim_main>:\n     b17:\t55                   \tpush   %rbp\n     b18:\t48 89 e5             \tmov    %rsp,%rbp\n     b1b:\t41 55                \tpush   %r13\n     b1d:\t41 54                \tpush   %r12\n     b1f:\t53                   \tpush   %rbx\n     b20:\t48 81 ec 98 01 00 00 \tsub    $0x198,%rsp\n     b27:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b2e <sim_main+0x17>\n     b2e:\t48 89 c1             \tmov    %rax,%rcx\n     b31:\tba 2a 00 00 00       \tmov    $0x2a,%edx\n     b36:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     b3b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     b40:\te8 00 00 00 00       \tcallq  b45 <sim_main+0x2e>\n     b45:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # b4b <sim_main+0x34>\n     b4b:\t83 c0 08             \tadd    $0x8,%eax\n     b4e:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # b54 <sim_main+0x3d>\n     b54:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # b5a <sim_main+0x43>\n     b5a:\t85 c0                \ttest   %eax,%eax\n     b5c:\t75 0a                \tjne    b68 <sim_main+0x51>\n     b5e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # b64 <sim_main+0x4d>\n     b64:\t85 c0                \ttest   %eax,%eax\n     b66:\t74 52                \tje     bba <sim_main+0xa3>\n     b68:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # b6e <sim_main+0x57>\n     b6e:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     b74:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     b79:\tba 00 00 00 00       \tmov    $0x0,%edx\n     b7e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b83:\t89 c7                \tmov    %eax,%edi\n     b85:\te8 00 00 00 00       \tcallq  b8a <sim_main+0x73>\n     b8a:\t85 c0                \ttest   %eax,%eax\n     b8c:\t74 2c                \tje     bba <sim_main+0xa3>\n     b8e:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # b95 <sim_main+0x7e>\n     b95:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # b9c <sim_main+0x85>\n     b9c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # ba2 <sim_main+0x8b>\n     ba2:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # ba8 <sim_main+0x91>\n     ba8:\t8d 79 f8             \tlea    -0x8(%rcx),%edi\n     bab:\t49 89 f0             \tmov    %rsi,%r8\n     bae:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     bb3:\t89 c6                \tmov    %eax,%esi\n     bb5:\te8 00 00 00 00       \tcallq  bba <sim_main+0xa3>\n     bba:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # bc4 <sim_main+0xad>\n     bc1:\t00 00 00 \n     bc4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # bcb <sim_main+0xb4>\n     bcb:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # bd1 <sim_main+0xba>\n     bd1:\tc1 ea 0c             \tshr    $0xc,%edx\n     bd4:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     bda:\t89 d2                \tmov    %edx,%edx\n     bdc:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     be1:\t48 85 c0             \ttest   %rax,%rax\n     be4:\t74 6f                \tje     c55 <sim_main+0x13e>\n     be6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # bed <sim_main+0xd6>\n     bed:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # bf3 <sim_main+0xdc>\n     bf3:\tc1 ea 0c             \tshr    $0xc,%edx\n     bf6:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     bfc:\t89 d2                \tmov    %edx,%edx\n     bfe:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     c03:\t8b 40 08             \tmov    0x8(%rax),%eax\n     c06:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # c0c <sim_main+0xf5>\n     c0c:\tc1 ea 1b             \tshr    $0x1b,%edx\n     c0f:\t39 d0                \tcmp    %edx,%eax\n     c11:\t75 42                \tjne    c55 <sim_main+0x13e>\n     c13:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c1a <sim_main+0x103>\n     c1a:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n     c21:\t48 83 c2 01          \tadd    $0x1,%rdx\n     c25:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n     c2c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c33 <sim_main+0x11c>\n     c33:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # c39 <sim_main+0x122>\n     c39:\tc1 ea 0c             \tshr    $0xc,%edx\n     c3c:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     c42:\t89 d2                \tmov    %edx,%edx\n     c44:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     c49:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     c4d:\t48 85 c0             \ttest   %rax,%rax\n     c50:\t0f 95 c0             \tsetne  %al\n     c53:\teb 1d                \tjmp    c72 <sim_main+0x15b>\n     c55:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # c5b <sim_main+0x144>\n     c5b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c62 <sim_main+0x14b>\n     c62:\t89 d6                \tmov    %edx,%esi\n     c64:\t48 89 c7             \tmov    %rax,%rdi\n     c67:\te8 00 00 00 00       \tcallq  c6c <sim_main+0x155>\n     c6c:\t48 85 c0             \ttest   %rax,%rax\n     c6f:\t0f 95 c0             \tsetne  %al\n     c72:\t84 c0                \ttest   %al,%al\n     c74:\t0f 84 b7 00 00 00    \tje     d31 <sim_main+0x21a>\n     c7a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # c81 <sim_main+0x16a>\n     c81:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # c87 <sim_main+0x170>\n     c87:\tc1 ea 0c             \tshr    $0xc,%edx\n     c8a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     c90:\t89 d2                \tmov    %edx,%edx\n     c92:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     c97:\t48 85 c0             \ttest   %rax,%rax\n     c9a:\t74 69                \tje     d05 <sim_main+0x1ee>\n     c9c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ca3 <sim_main+0x18c>\n     ca3:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # ca9 <sim_main+0x192>\n     ca9:\tc1 ea 0c             \tshr    $0xc,%edx\n     cac:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     cb2:\t89 d2                \tmov    %edx,%edx\n     cb4:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     cb9:\t8b 40 08             \tmov    0x8(%rax),%eax\n     cbc:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # cc2 <sim_main+0x1ab>\n     cc2:\tc1 ea 1b             \tshr    $0x1b,%edx\n     cc5:\t39 d0                \tcmp    %edx,%eax\n     cc7:\t75 3c                \tjne    d05 <sim_main+0x1ee>\n     cc9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # cd0 <sim_main+0x1b9>\n     cd0:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n     cd7:\t48 83 c2 01          \tadd    $0x1,%rdx\n     cdb:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n     ce2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ce9 <sim_main+0x1d2>\n     ce9:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # cef <sim_main+0x1d8>\n     cef:\tc1 ea 0c             \tshr    $0xc,%edx\n     cf2:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     cf8:\t89 d2                \tmov    %edx,%edx\n     cfa:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     cff:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     d03:\teb 17                \tjmp    d1c <sim_main+0x205>\n     d05:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # d0b <sim_main+0x1f4>\n     d0b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d12 <sim_main+0x1fb>\n     d12:\t89 d6                \tmov    %edx,%esi\n     d14:\t48 89 c7             \tmov    %rax,%rdi\n     d17:\te8 00 00 00 00       \tcallq  d1c <sim_main+0x205>\n     d1c:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # d22 <sim_main+0x20b>\n     d22:\t89 d2                \tmov    %edx,%edx\n     d24:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n     d2a:\t48 01 d0             \tadd    %rdx,%rax\n     d2d:\t8b 00                \tmov    (%rax),%eax\n     d2f:\teb 05                \tjmp    d36 <sim_main+0x21f>\n     d31:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     d36:\t89 85 5c fe ff ff    \tmov    %eax,-0x1a4(%rbp)\n     d3c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d43 <sim_main+0x22c>\n     d43:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # d49 <sim_main+0x232>\n     d49:\t83 c2 04             \tadd    $0x4,%edx\n     d4c:\tc1 ea 0c             \tshr    $0xc,%edx\n     d4f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     d55:\t89 d2                \tmov    %edx,%edx\n     d57:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     d5c:\t48 85 c0             \ttest   %rax,%rax\n     d5f:\t74 78                \tje     dd9 <sim_main+0x2c2>\n     d61:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d68 <sim_main+0x251>\n     d68:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # d6e <sim_main+0x257>\n     d6e:\t83 c2 04             \tadd    $0x4,%edx\n     d71:\tc1 ea 0c             \tshr    $0xc,%edx\n     d74:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     d7a:\t89 d2                \tmov    %edx,%edx\n     d7c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     d81:\t8b 40 08             \tmov    0x8(%rax),%eax\n     d84:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # d8a <sim_main+0x273>\n     d8a:\t83 c2 04             \tadd    $0x4,%edx\n     d8d:\tc1 ea 1b             \tshr    $0x1b,%edx\n     d90:\t39 d0                \tcmp    %edx,%eax\n     d92:\t75 45                \tjne    dd9 <sim_main+0x2c2>\n     d94:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # d9b <sim_main+0x284>\n     d9b:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n     da2:\t48 83 c2 01          \tadd    $0x1,%rdx\n     da6:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n     dad:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # db4 <sim_main+0x29d>\n     db4:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # dba <sim_main+0x2a3>\n     dba:\t83 c2 04             \tadd    $0x4,%edx\n     dbd:\tc1 ea 0c             \tshr    $0xc,%edx\n     dc0:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     dc6:\t89 d2                \tmov    %edx,%edx\n     dc8:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     dcd:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     dd1:\t48 85 c0             \ttest   %rax,%rax\n     dd4:\t0f 95 c0             \tsetne  %al\n     dd7:\teb 20                \tjmp    df9 <sim_main+0x2e2>\n     dd9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # ddf <sim_main+0x2c8>\n     ddf:\t8d 50 04             \tlea    0x4(%rax),%edx\n     de2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # de9 <sim_main+0x2d2>\n     de9:\t89 d6                \tmov    %edx,%esi\n     deb:\t48 89 c7             \tmov    %rax,%rdi\n     dee:\te8 00 00 00 00       \tcallq  df3 <sim_main+0x2dc>\n     df3:\t48 85 c0             \ttest   %rax,%rax\n     df6:\t0f 95 c0             \tsetne  %al\n     df9:\t84 c0                \ttest   %al,%al\n     dfb:\t0f 84 ca 00 00 00    \tje     ecb <sim_main+0x3b4>\n     e01:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e08 <sim_main+0x2f1>\n     e08:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # e0e <sim_main+0x2f7>\n     e0e:\t83 c2 04             \tadd    $0x4,%edx\n     e11:\tc1 ea 0c             \tshr    $0xc,%edx\n     e14:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     e1a:\t89 d2                \tmov    %edx,%edx\n     e1c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     e21:\t48 85 c0             \ttest   %rax,%rax\n     e24:\t74 72                \tje     e98 <sim_main+0x381>\n     e26:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e2d <sim_main+0x316>\n     e2d:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # e33 <sim_main+0x31c>\n     e33:\t83 c2 04             \tadd    $0x4,%edx\n     e36:\tc1 ea 0c             \tshr    $0xc,%edx\n     e39:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     e3f:\t89 d2                \tmov    %edx,%edx\n     e41:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     e46:\t8b 40 08             \tmov    0x8(%rax),%eax\n     e49:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # e4f <sim_main+0x338>\n     e4f:\t83 c2 04             \tadd    $0x4,%edx\n     e52:\tc1 ea 1b             \tshr    $0x1b,%edx\n     e55:\t39 d0                \tcmp    %edx,%eax\n     e57:\t75 3f                \tjne    e98 <sim_main+0x381>\n     e59:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e60 <sim_main+0x349>\n     e60:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n     e67:\t48 83 c2 01          \tadd    $0x1,%rdx\n     e6b:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n     e72:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e79 <sim_main+0x362>\n     e79:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # e7f <sim_main+0x368>\n     e7f:\t83 c2 04             \tadd    $0x4,%edx\n     e82:\tc1 ea 0c             \tshr    $0xc,%edx\n     e85:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n     e8b:\t89 d2                \tmov    %edx,%edx\n     e8d:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n     e92:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n     e96:\teb 1a                \tjmp    eb2 <sim_main+0x39b>\n     e98:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # e9e <sim_main+0x387>\n     e9e:\t8d 50 04             \tlea    0x4(%rax),%edx\n     ea1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ea8 <sim_main+0x391>\n     ea8:\t89 d6                \tmov    %edx,%esi\n     eaa:\t48 89 c7             \tmov    %rax,%rdi\n     ead:\te8 00 00 00 00       \tcallq  eb2 <sim_main+0x39b>\n     eb2:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # eb8 <sim_main+0x3a1>\n     eb8:\t89 d2                \tmov    %edx,%edx\n     eba:\t48 83 c2 04          \tadd    $0x4,%rdx\n     ebe:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n     ec4:\t48 01 d0             \tadd    %rdx,%rax\n     ec7:\t8b 00                \tmov    (%rax),%eax\n     ec9:\teb 05                \tjmp    ed0 <sim_main+0x3b9>\n     ecb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ed0:\t89 85 60 fe ff ff    \tmov    %eax,-0x1a0(%rbp)\n     ed6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # edc <sim_main+0x3c5>\n     edc:\t85 c0                \ttest   %eax,%eax\n     ede:\t74 58                \tje     f38 <sim_main+0x421>\n     ee0:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # ee6 <sim_main+0x3cf>\n     ee6:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # eed <sim_main+0x3d6>\n     eed:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ef4 <sim_main+0x3dd>\n     ef4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     ef9:\t48 89 c7             \tmov    %rax,%rdi\n     efc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f01:\te8 00 00 00 00       \tcallq  f06 <sim_main+0x3ef>\n     f06:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # f0d <sim_main+0x3f6>\n     f0d:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # f13 <sim_main+0x3fc>\n     f13:\t48 8b 85 5c fe ff ff \tmov    -0x1a4(%rbp),%rax\n     f1a:\t89 ce                \tmov    %ecx,%esi\n     f1c:\t48 89 c7             \tmov    %rax,%rdi\n     f1f:\te8 00 00 00 00       \tcallq  f24 <sim_main+0x40d>\n     f24:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f2b <sim_main+0x414>\n     f2b:\t48 89 c6             \tmov    %rax,%rsi\n     f2e:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n     f33:\te8 00 00 00 00       \tcallq  f38 <sim_main+0x421>\n     f38:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f3f <sim_main+0x428>\n     f3f:\t48 83 c0 01          \tadd    $0x1,%rax\n     f43:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # f4a <sim_main+0x433>\n     f4a:\tbb 00 00 00 00       \tmov    $0x0,%ebx\n     f4f:\t41 bd 00 00 00 00    \tmov    $0x0,%r13d\n     f55:\tc7 45 ac 00 00 00 00 \tmovl   $0x0,-0x54(%rbp)\n     f5c:\t8b 85 5c fe ff ff    \tmov    -0x1a4(%rbp),%eax\n     f62:\t25 ff 00 00 00       \tand    $0xff,%eax\n     f67:\t89 45 a8             \tmov    %eax,-0x58(%rbp)\n     f6a:\t83 7d a8 77          \tcmpl   $0x77,-0x58(%rbp)\n     f6e:\t0f 87 96 76 00 00    \tja     860a <sim_main+0x7af3>\n     f74:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n     f77:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     f7e:\t00 \n     f7f:\tff e0                \tjmpq   *%rax\n     f81:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # f87 <sim_main+0x470>\n     f87:\t25 00 00 00 f0       \tand    $0xf0000000,%eax\n     f8c:\t89 c2                \tmov    %eax,%edx\n     f8e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n     f94:\tc1 e0 02             \tshl    $0x2,%eax\n     f97:\t25 fc ff ff 0f       \tand    $0xffffffc,%eax\n     f9c:\t09 d0                \tor     %edx,%eax\n     f9e:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # fa4 <sim_main+0x48d>\n     fa4:\te9 d1 76 00 00       \tjmpq   867a <sim_main+0x7b63>\n     fa9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # faf <sim_main+0x498>\n     faf:\t25 00 00 00 f0       \tand    $0xf0000000,%eax\n     fb4:\t89 c2                \tmov    %eax,%edx\n     fb6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n     fbc:\tc1 e0 02             \tshl    $0x2,%eax\n     fbf:\t25 fc ff ff 0f       \tand    $0xffffffc,%eax\n     fc4:\t09 d0                \tor     %edx,%eax\n     fc6:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # fcc <sim_main+0x4b5>\n     fcc:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # fd2 <sim_main+0x4bb>\n     fd2:\t83 c0 08             \tadd    $0x8,%eax\n     fd5:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # fdb <sim_main+0x4c4>\n     fdb:\te9 9a 76 00 00       \tjmpq   867a <sim_main+0x7b63>\n     fe0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n     fe6:\tc1 e8 18             \tshr    $0x18,%eax\n     fe9:\t89 c0                \tmov    %eax,%eax\n     feb:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n     ff2:\t83 e0 07             \tand    $0x7,%eax\n     ff5:\t85 c0                \ttest   %eax,%eax\n     ff7:\t74 0c                \tje     1005 <sim_main+0x4ee>\n     ff9:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    1000:\te9 75 76 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1005:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    100b:\tc1 e8 18             \tshr    $0x18,%eax\n    100e:\t89 c0                \tmov    %eax,%eax\n    1010:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    1017:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 101d <sim_main+0x506>\n    101d:\te9 58 76 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1022:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1028:\tc1 e8 18             \tshr    $0x18,%eax\n    102b:\t89 c0                \tmov    %eax,%eax\n    102d:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    1034:\t83 e0 07             \tand    $0x7,%eax\n    1037:\t85 c0                \ttest   %eax,%eax\n    1039:\t74 0c                \tje     1047 <sim_main+0x530>\n    103b:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    1042:\te9 33 76 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1047:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 104d <sim_main+0x536>\n    104d:\t8d 50 08             \tlea    0x8(%rax),%edx\n    1050:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1056:\tc1 e8 08             \tshr    $0x8,%eax\n    1059:\t0f b6 c0             \tmovzbl %al,%eax\n    105c:\t89 c0                \tmov    %eax,%eax\n    105e:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n    1065:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    106b:\tc1 e8 18             \tshr    $0x18,%eax\n    106e:\t89 c0                \tmov    %eax,%eax\n    1070:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    1077:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 107d <sim_main+0x566>\n    107d:\te9 f8 75 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1082:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1088:\tc1 e8 18             \tshr    $0x18,%eax\n    108b:\t89 c0                \tmov    %eax,%eax\n    108d:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    1094:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    109a:\tc1 e8 10             \tshr    $0x10,%eax\n    109d:\t0f b6 c0             \tmovzbl %al,%eax\n    10a0:\t89 c0                \tmov    %eax,%eax\n    10a2:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    10a9:\t39 c2                \tcmp    %eax,%edx\n    10ab:\t0f 85 7a 75 00 00    \tjne    862b <sim_main+0x7b14>\n    10b1:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 10b7 <sim_main+0x5a0>\n    10b7:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    10bd:\t0f bf d2             \tmovswl %dx,%edx\n    10c0:\tc1 e2 02             \tshl    $0x2,%edx\n    10c3:\t01 d0                \tadd    %edx,%eax\n    10c5:\t83 c0 08             \tadd    $0x8,%eax\n    10c8:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 10ce <sim_main+0x5b7>\n    10ce:\te9 58 75 00 00       \tjmpq   862b <sim_main+0x7b14>\n    10d3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    10d9:\tc1 e8 18             \tshr    $0x18,%eax\n    10dc:\t89 c0                \tmov    %eax,%eax\n    10de:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    10e5:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    10eb:\tc1 e8 10             \tshr    $0x10,%eax\n    10ee:\t0f b6 c0             \tmovzbl %al,%eax\n    10f1:\t89 c0                \tmov    %eax,%eax\n    10f3:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    10fa:\t39 c2                \tcmp    %eax,%edx\n    10fc:\t0f 84 2c 75 00 00    \tje     862e <sim_main+0x7b17>\n    1102:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1108 <sim_main+0x5f1>\n    1108:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    110e:\t0f bf d2             \tmovswl %dx,%edx\n    1111:\tc1 e2 02             \tshl    $0x2,%edx\n    1114:\t01 d0                \tadd    %edx,%eax\n    1116:\t83 c0 08             \tadd    $0x8,%eax\n    1119:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 111f <sim_main+0x608>\n    111f:\te9 0a 75 00 00       \tjmpq   862e <sim_main+0x7b17>\n    1124:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    112a:\tc1 e8 18             \tshr    $0x18,%eax\n    112d:\t89 c0                \tmov    %eax,%eax\n    112f:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    1136:\t85 c0                \ttest   %eax,%eax\n    1138:\t0f 8f f3 74 00 00    \tjg     8631 <sim_main+0x7b1a>\n    113e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1144 <sim_main+0x62d>\n    1144:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    114a:\t0f bf d2             \tmovswl %dx,%edx\n    114d:\tc1 e2 02             \tshl    $0x2,%edx\n    1150:\t01 d0                \tadd    %edx,%eax\n    1152:\t83 c0 08             \tadd    $0x8,%eax\n    1155:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 115b <sim_main+0x644>\n    115b:\te9 d1 74 00 00       \tjmpq   8631 <sim_main+0x7b1a>\n    1160:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1166:\tc1 e8 18             \tshr    $0x18,%eax\n    1169:\t89 c0                \tmov    %eax,%eax\n    116b:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    1172:\t85 c0                \ttest   %eax,%eax\n    1174:\t0f 8e ba 74 00 00    \tjle    8634 <sim_main+0x7b1d>\n    117a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1180 <sim_main+0x669>\n    1180:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    1186:\t0f bf d2             \tmovswl %dx,%edx\n    1189:\tc1 e2 02             \tshl    $0x2,%edx\n    118c:\t01 d0                \tadd    %edx,%eax\n    118e:\t83 c0 08             \tadd    $0x8,%eax\n    1191:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 1197 <sim_main+0x680>\n    1197:\te9 98 74 00 00       \tjmpq   8634 <sim_main+0x7b1d>\n    119c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    11a2:\tc1 e8 18             \tshr    $0x18,%eax\n    11a5:\t89 c0                \tmov    %eax,%eax\n    11a7:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    11ae:\t85 c0                \ttest   %eax,%eax\n    11b0:\t0f 89 81 74 00 00    \tjns    8637 <sim_main+0x7b20>\n    11b6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 11bc <sim_main+0x6a5>\n    11bc:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    11c2:\t0f bf d2             \tmovswl %dx,%edx\n    11c5:\tc1 e2 02             \tshl    $0x2,%edx\n    11c8:\t01 d0                \tadd    %edx,%eax\n    11ca:\t83 c0 08             \tadd    $0x8,%eax\n    11cd:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 11d3 <sim_main+0x6bc>\n    11d3:\te9 5f 74 00 00       \tjmpq   8637 <sim_main+0x7b20>\n    11d8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    11de:\tc1 e8 18             \tshr    $0x18,%eax\n    11e1:\t89 c0                \tmov    %eax,%eax\n    11e3:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    11ea:\t85 c0                \ttest   %eax,%eax\n    11ec:\t0f 88 48 74 00 00    \tjs     863a <sim_main+0x7b23>\n    11f2:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 11f8 <sim_main+0x6e1>\n    11f8:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    11fe:\t0f bf d2             \tmovswl %dx,%edx\n    1201:\tc1 e2 02             \tshl    $0x2,%edx\n    1204:\t01 d0                \tadd    %edx,%eax\n    1206:\t83 c0 08             \tadd    $0x8,%eax\n    1209:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 120f <sim_main+0x6f8>\n    120f:\te9 26 74 00 00       \tjmpq   863a <sim_main+0x7b23>\n    1214:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 121a <sim_main+0x703>\n    121a:\t85 c0                \ttest   %eax,%eax\n    121c:\t0f 85 1b 74 00 00    \tjne    863d <sim_main+0x7b26>\n    1222:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1228 <sim_main+0x711>\n    1228:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    122e:\t0f bf d2             \tmovswl %dx,%edx\n    1231:\tc1 e2 02             \tshl    $0x2,%edx\n    1234:\t01 d0                \tadd    %edx,%eax\n    1236:\t83 c0 08             \tadd    $0x8,%eax\n    1239:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 123f <sim_main+0x728>\n    123f:\te9 f9 73 00 00       \tjmpq   863d <sim_main+0x7b26>\n    1244:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 124a <sim_main+0x733>\n    124a:\t85 c0                \ttest   %eax,%eax\n    124c:\t0f 84 ee 73 00 00    \tje     8640 <sim_main+0x7b29>\n    1252:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 1258 <sim_main+0x741>\n    1258:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    125e:\t0f bf d2             \tmovswl %dx,%edx\n    1261:\tc1 e2 02             \tshl    $0x2,%edx\n    1264:\t01 d0                \tadd    %edx,%eax\n    1266:\t83 c0 08             \tadd    $0x8,%eax\n    1269:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 126f <sim_main+0x758>\n    126f:\te9 cc 73 00 00       \tjmpq   8640 <sim_main+0x7b29>\n    1274:\tc7 85 7c fe ff ff 00 \tmovl   $0x0,-0x184(%rbp)\n    127b:\t00 00 00 \n    127e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1284:\tc1 e8 18             \tshr    $0x18,%eax\n    1287:\t89 c0                \tmov    %eax,%eax\n    1289:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    1290:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1296:\t98                   \tcwtl   \n    1297:\t01 d0                \tadd    %edx,%eax\n    1299:\t89 c3                \tmov    %eax,%ebx\n    129b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 12a2 <sim_main+0x78b>\n    12a2:\t89 da                \tmov    %ebx,%edx\n    12a4:\tc1 ea 0c             \tshr    $0xc,%edx\n    12a7:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    12ad:\t89 d2                \tmov    %edx,%edx\n    12af:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    12b4:\t48 85 c0             \ttest   %rax,%rax\n    12b7:\t74 63                \tje     131c <sim_main+0x805>\n    12b9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 12c0 <sim_main+0x7a9>\n    12c0:\t89 da                \tmov    %ebx,%edx\n    12c2:\tc1 ea 0c             \tshr    $0xc,%edx\n    12c5:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    12cb:\t89 d2                \tmov    %edx,%edx\n    12cd:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    12d2:\t8b 40 08             \tmov    0x8(%rax),%eax\n    12d5:\t89 da                \tmov    %ebx,%edx\n    12d7:\tc1 ea 1b             \tshr    $0x1b,%edx\n    12da:\t39 d0                \tcmp    %edx,%eax\n    12dc:\t75 3e                \tjne    131c <sim_main+0x805>\n    12de:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 12e5 <sim_main+0x7ce>\n    12e5:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    12ec:\t48 83 c2 01          \tadd    $0x1,%rdx\n    12f0:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    12f7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 12fe <sim_main+0x7e7>\n    12fe:\t89 da                \tmov    %ebx,%edx\n    1300:\tc1 ea 0c             \tshr    $0xc,%edx\n    1303:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1309:\t89 d2                \tmov    %edx,%edx\n    130b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1310:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1314:\t48 85 c0             \ttest   %rax,%rax\n    1317:\t0f 95 c0             \tsetne  %al\n    131a:\teb 17                \tjmp    1333 <sim_main+0x81c>\n    131c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1323 <sim_main+0x80c>\n    1323:\t89 de                \tmov    %ebx,%esi\n    1325:\t48 89 c7             \tmov    %rax,%rdi\n    1328:\te8 00 00 00 00       \tcallq  132d <sim_main+0x816>\n    132d:\t48 85 c0             \ttest   %rax,%rax\n    1330:\t0f 95 c0             \tsetne  %al\n    1333:\t84 c0                \ttest   %al,%al\n    1335:\t0f 84 9c 00 00 00    \tje     13d7 <sim_main+0x8c0>\n    133b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1342 <sim_main+0x82b>\n    1342:\t89 da                \tmov    %ebx,%edx\n    1344:\tc1 ea 0c             \tshr    $0xc,%edx\n    1347:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    134d:\t89 d2                \tmov    %edx,%edx\n    134f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1354:\t48 85 c0             \ttest   %rax,%rax\n    1357:\t74 5d                \tje     13b6 <sim_main+0x89f>\n    1359:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1360 <sim_main+0x849>\n    1360:\t89 da                \tmov    %ebx,%edx\n    1362:\tc1 ea 0c             \tshr    $0xc,%edx\n    1365:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    136b:\t89 d2                \tmov    %edx,%edx\n    136d:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1372:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1375:\t89 da                \tmov    %ebx,%edx\n    1377:\tc1 ea 1b             \tshr    $0x1b,%edx\n    137a:\t39 d0                \tcmp    %edx,%eax\n    137c:\t75 38                \tjne    13b6 <sim_main+0x89f>\n    137e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1385 <sim_main+0x86e>\n    1385:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    138c:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1390:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    1397:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 139e <sim_main+0x887>\n    139e:\t89 da                \tmov    %ebx,%edx\n    13a0:\tc1 ea 0c             \tshr    $0xc,%edx\n    13a3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    13a9:\t89 d2                \tmov    %edx,%edx\n    13ab:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    13b0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    13b4:\teb 11                \tjmp    13c7 <sim_main+0x8b0>\n    13b6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 13bd <sim_main+0x8a6>\n    13bd:\t89 de                \tmov    %ebx,%esi\n    13bf:\t48 89 c7             \tmov    %rax,%rdi\n    13c2:\te8 00 00 00 00       \tcallq  13c7 <sim_main+0x8b0>\n    13c7:\t89 da                \tmov    %ebx,%edx\n    13c9:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    13cf:\t48 01 d0             \tadd    %rdx,%rax\n    13d2:\t0f b6 00             \tmovzbl (%rax),%eax\n    13d5:\teb 05                \tjmp    13dc <sim_main+0x8c5>\n    13d7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    13dc:\t88 85 7b fe ff ff    \tmov    %al,-0x185(%rbp)\n    13e2:\t83 bd 7c fe ff ff 00 \tcmpl   $0x0,-0x184(%rbp)\n    13e9:\t74 0e                \tje     13f9 <sim_main+0x8e2>\n    13eb:\t8b 85 7c fe ff ff    \tmov    -0x184(%rbp),%eax\n    13f1:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    13f4:\te9 81 72 00 00       \tjmpq   867a <sim_main+0x7b63>\n    13f9:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    13ff:\tc1 e8 10             \tshr    $0x10,%eax\n    1402:\t0f b6 d0             \tmovzbl %al,%edx\n    1405:\t0f be 85 7b fe ff ff \tmovsbl -0x185(%rbp),%eax\n    140c:\t89 d2                \tmov    %edx,%edx\n    140e:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    1415:\te9 60 72 00 00       \tjmpq   867a <sim_main+0x7b63>\n    141a:\tc7 85 84 fe ff ff 00 \tmovl   $0x0,-0x17c(%rbp)\n    1421:\t00 00 00 \n    1424:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    142a:\tc1 e8 18             \tshr    $0x18,%eax\n    142d:\t89 c0                \tmov    %eax,%eax\n    142f:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    1436:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    143c:\t98                   \tcwtl   \n    143d:\t01 d0                \tadd    %edx,%eax\n    143f:\t89 c3                \tmov    %eax,%ebx\n    1441:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1448 <sim_main+0x931>\n    1448:\t89 da                \tmov    %ebx,%edx\n    144a:\tc1 ea 0c             \tshr    $0xc,%edx\n    144d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1453:\t89 d2                \tmov    %edx,%edx\n    1455:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    145a:\t48 85 c0             \ttest   %rax,%rax\n    145d:\t74 63                \tje     14c2 <sim_main+0x9ab>\n    145f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1466 <sim_main+0x94f>\n    1466:\t89 da                \tmov    %ebx,%edx\n    1468:\tc1 ea 0c             \tshr    $0xc,%edx\n    146b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1471:\t89 d2                \tmov    %edx,%edx\n    1473:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1478:\t8b 40 08             \tmov    0x8(%rax),%eax\n    147b:\t89 da                \tmov    %ebx,%edx\n    147d:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1480:\t39 d0                \tcmp    %edx,%eax\n    1482:\t75 3e                \tjne    14c2 <sim_main+0x9ab>\n    1484:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 148b <sim_main+0x974>\n    148b:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1492:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1496:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    149d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 14a4 <sim_main+0x98d>\n    14a4:\t89 da                \tmov    %ebx,%edx\n    14a6:\tc1 ea 0c             \tshr    $0xc,%edx\n    14a9:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    14af:\t89 d2                \tmov    %edx,%edx\n    14b1:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    14b6:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    14ba:\t48 85 c0             \ttest   %rax,%rax\n    14bd:\t0f 95 c0             \tsetne  %al\n    14c0:\teb 17                \tjmp    14d9 <sim_main+0x9c2>\n    14c2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 14c9 <sim_main+0x9b2>\n    14c9:\t89 de                \tmov    %ebx,%esi\n    14cb:\t48 89 c7             \tmov    %rax,%rdi\n    14ce:\te8 00 00 00 00       \tcallq  14d3 <sim_main+0x9bc>\n    14d3:\t48 85 c0             \ttest   %rax,%rax\n    14d6:\t0f 95 c0             \tsetne  %al\n    14d9:\t84 c0                \ttest   %al,%al\n    14db:\t0f 84 9c 00 00 00    \tje     157d <sim_main+0xa66>\n    14e1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 14e8 <sim_main+0x9d1>\n    14e8:\t89 da                \tmov    %ebx,%edx\n    14ea:\tc1 ea 0c             \tshr    $0xc,%edx\n    14ed:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    14f3:\t89 d2                \tmov    %edx,%edx\n    14f5:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    14fa:\t48 85 c0             \ttest   %rax,%rax\n    14fd:\t74 5d                \tje     155c <sim_main+0xa45>\n    14ff:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1506 <sim_main+0x9ef>\n    1506:\t89 da                \tmov    %ebx,%edx\n    1508:\tc1 ea 0c             \tshr    $0xc,%edx\n    150b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1511:\t89 d2                \tmov    %edx,%edx\n    1513:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1518:\t8b 40 08             \tmov    0x8(%rax),%eax\n    151b:\t89 da                \tmov    %ebx,%edx\n    151d:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1520:\t39 d0                \tcmp    %edx,%eax\n    1522:\t75 38                \tjne    155c <sim_main+0xa45>\n    1524:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 152b <sim_main+0xa14>\n    152b:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1532:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1536:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    153d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1544 <sim_main+0xa2d>\n    1544:\t89 da                \tmov    %ebx,%edx\n    1546:\tc1 ea 0c             \tshr    $0xc,%edx\n    1549:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    154f:\t89 d2                \tmov    %edx,%edx\n    1551:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1556:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    155a:\teb 11                \tjmp    156d <sim_main+0xa56>\n    155c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1563 <sim_main+0xa4c>\n    1563:\t89 de                \tmov    %ebx,%esi\n    1565:\t48 89 c7             \tmov    %rax,%rdi\n    1568:\te8 00 00 00 00       \tcallq  156d <sim_main+0xa56>\n    156d:\t89 da                \tmov    %ebx,%edx\n    156f:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    1575:\t48 01 d0             \tadd    %rdx,%rax\n    1578:\t0f b6 00             \tmovzbl (%rax),%eax\n    157b:\teb 05                \tjmp    1582 <sim_main+0xa6b>\n    157d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1582:\t88 85 83 fe ff ff    \tmov    %al,-0x17d(%rbp)\n    1588:\t83 bd 84 fe ff ff 00 \tcmpl   $0x0,-0x17c(%rbp)\n    158f:\t74 0e                \tje     159f <sim_main+0xa88>\n    1591:\t8b 85 84 fe ff ff    \tmov    -0x17c(%rbp),%eax\n    1597:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    159a:\te9 db 70 00 00       \tjmpq   867a <sim_main+0x7b63>\n    159f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    15a5:\tc1 e8 10             \tshr    $0x10,%eax\n    15a8:\t0f b6 d0             \tmovzbl %al,%edx\n    15ab:\t0f b6 85 83 fe ff ff \tmovzbl -0x17d(%rbp),%eax\n    15b2:\t89 d2                \tmov    %edx,%edx\n    15b4:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    15bb:\te9 ba 70 00 00       \tjmpq   867a <sim_main+0x7b63>\n    15c0:\tc7 85 8c fe ff ff 00 \tmovl   $0x0,-0x174(%rbp)\n    15c7:\t00 00 00 \n    15ca:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    15d0:\tc1 e8 18             \tshr    $0x18,%eax\n    15d3:\t89 c0                \tmov    %eax,%eax\n    15d5:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    15dc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    15e2:\t98                   \tcwtl   \n    15e3:\t01 d0                \tadd    %edx,%eax\n    15e5:\t89 c3                \tmov    %eax,%ebx\n    15e7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 15ee <sim_main+0xad7>\n    15ee:\t89 da                \tmov    %ebx,%edx\n    15f0:\tc1 ea 0c             \tshr    $0xc,%edx\n    15f3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    15f9:\t89 d2                \tmov    %edx,%edx\n    15fb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1600:\t48 85 c0             \ttest   %rax,%rax\n    1603:\t74 63                \tje     1668 <sim_main+0xb51>\n    1605:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 160c <sim_main+0xaf5>\n    160c:\t89 da                \tmov    %ebx,%edx\n    160e:\tc1 ea 0c             \tshr    $0xc,%edx\n    1611:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1617:\t89 d2                \tmov    %edx,%edx\n    1619:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    161e:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1621:\t89 da                \tmov    %ebx,%edx\n    1623:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1626:\t39 d0                \tcmp    %edx,%eax\n    1628:\t75 3e                \tjne    1668 <sim_main+0xb51>\n    162a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1631 <sim_main+0xb1a>\n    1631:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1638:\t48 83 c2 01          \tadd    $0x1,%rdx\n    163c:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    1643:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 164a <sim_main+0xb33>\n    164a:\t89 da                \tmov    %ebx,%edx\n    164c:\tc1 ea 0c             \tshr    $0xc,%edx\n    164f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1655:\t89 d2                \tmov    %edx,%edx\n    1657:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    165c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1660:\t48 85 c0             \ttest   %rax,%rax\n    1663:\t0f 95 c0             \tsetne  %al\n    1666:\teb 17                \tjmp    167f <sim_main+0xb68>\n    1668:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 166f <sim_main+0xb58>\n    166f:\t89 de                \tmov    %ebx,%esi\n    1671:\t48 89 c7             \tmov    %rax,%rdi\n    1674:\te8 00 00 00 00       \tcallq  1679 <sim_main+0xb62>\n    1679:\t48 85 c0             \ttest   %rax,%rax\n    167c:\t0f 95 c0             \tsetne  %al\n    167f:\t84 c0                \ttest   %al,%al\n    1681:\t0f 84 9c 00 00 00    \tje     1723 <sim_main+0xc0c>\n    1687:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 168e <sim_main+0xb77>\n    168e:\t89 da                \tmov    %ebx,%edx\n    1690:\tc1 ea 0c             \tshr    $0xc,%edx\n    1693:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1699:\t89 d2                \tmov    %edx,%edx\n    169b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    16a0:\t48 85 c0             \ttest   %rax,%rax\n    16a3:\t74 5d                \tje     1702 <sim_main+0xbeb>\n    16a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 16ac <sim_main+0xb95>\n    16ac:\t89 da                \tmov    %ebx,%edx\n    16ae:\tc1 ea 0c             \tshr    $0xc,%edx\n    16b1:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    16b7:\t89 d2                \tmov    %edx,%edx\n    16b9:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    16be:\t8b 40 08             \tmov    0x8(%rax),%eax\n    16c1:\t89 da                \tmov    %ebx,%edx\n    16c3:\tc1 ea 1b             \tshr    $0x1b,%edx\n    16c6:\t39 d0                \tcmp    %edx,%eax\n    16c8:\t75 38                \tjne    1702 <sim_main+0xbeb>\n    16ca:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 16d1 <sim_main+0xbba>\n    16d1:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    16d8:\t48 83 c2 01          \tadd    $0x1,%rdx\n    16dc:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    16e3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 16ea <sim_main+0xbd3>\n    16ea:\t89 da                \tmov    %ebx,%edx\n    16ec:\tc1 ea 0c             \tshr    $0xc,%edx\n    16ef:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    16f5:\t89 d2                \tmov    %edx,%edx\n    16f7:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    16fc:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1700:\teb 11                \tjmp    1713 <sim_main+0xbfc>\n    1702:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1709 <sim_main+0xbf2>\n    1709:\t89 de                \tmov    %ebx,%esi\n    170b:\t48 89 c7             \tmov    %rax,%rdi\n    170e:\te8 00 00 00 00       \tcallq  1713 <sim_main+0xbfc>\n    1713:\t89 da                \tmov    %ebx,%edx\n    1715:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    171b:\t48 01 d0             \tadd    %rdx,%rax\n    171e:\t0f b7 00             \tmovzwl (%rax),%eax\n    1721:\teb 05                \tjmp    1728 <sim_main+0xc11>\n    1723:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1728:\t66 89 85 8a fe ff ff \tmov    %ax,-0x176(%rbp)\n    172f:\t83 bd 8c fe ff ff 00 \tcmpl   $0x0,-0x174(%rbp)\n    1736:\t74 0e                \tje     1746 <sim_main+0xc2f>\n    1738:\t8b 85 8c fe ff ff    \tmov    -0x174(%rbp),%eax\n    173e:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    1741:\te9 34 6f 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1746:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    174c:\tc1 e8 10             \tshr    $0x10,%eax\n    174f:\t0f b6 d0             \tmovzbl %al,%edx\n    1752:\t0f bf 85 8a fe ff ff \tmovswl -0x176(%rbp),%eax\n    1759:\t89 d2                \tmov    %edx,%edx\n    175b:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    1762:\te9 13 6f 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1767:\tc7 85 94 fe ff ff 00 \tmovl   $0x0,-0x16c(%rbp)\n    176e:\t00 00 00 \n    1771:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1777:\tc1 e8 18             \tshr    $0x18,%eax\n    177a:\t89 c0                \tmov    %eax,%eax\n    177c:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    1783:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1789:\t98                   \tcwtl   \n    178a:\t01 d0                \tadd    %edx,%eax\n    178c:\t89 c3                \tmov    %eax,%ebx\n    178e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1795 <sim_main+0xc7e>\n    1795:\t89 da                \tmov    %ebx,%edx\n    1797:\tc1 ea 0c             \tshr    $0xc,%edx\n    179a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    17a0:\t89 d2                \tmov    %edx,%edx\n    17a2:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    17a7:\t48 85 c0             \ttest   %rax,%rax\n    17aa:\t74 63                \tje     180f <sim_main+0xcf8>\n    17ac:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 17b3 <sim_main+0xc9c>\n    17b3:\t89 da                \tmov    %ebx,%edx\n    17b5:\tc1 ea 0c             \tshr    $0xc,%edx\n    17b8:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    17be:\t89 d2                \tmov    %edx,%edx\n    17c0:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    17c5:\t8b 40 08             \tmov    0x8(%rax),%eax\n    17c8:\t89 da                \tmov    %ebx,%edx\n    17ca:\tc1 ea 1b             \tshr    $0x1b,%edx\n    17cd:\t39 d0                \tcmp    %edx,%eax\n    17cf:\t75 3e                \tjne    180f <sim_main+0xcf8>\n    17d1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 17d8 <sim_main+0xcc1>\n    17d8:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    17df:\t48 83 c2 01          \tadd    $0x1,%rdx\n    17e3:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    17ea:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 17f1 <sim_main+0xcda>\n    17f1:\t89 da                \tmov    %ebx,%edx\n    17f3:\tc1 ea 0c             \tshr    $0xc,%edx\n    17f6:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    17fc:\t89 d2                \tmov    %edx,%edx\n    17fe:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1803:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1807:\t48 85 c0             \ttest   %rax,%rax\n    180a:\t0f 95 c0             \tsetne  %al\n    180d:\teb 17                \tjmp    1826 <sim_main+0xd0f>\n    180f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1816 <sim_main+0xcff>\n    1816:\t89 de                \tmov    %ebx,%esi\n    1818:\t48 89 c7             \tmov    %rax,%rdi\n    181b:\te8 00 00 00 00       \tcallq  1820 <sim_main+0xd09>\n    1820:\t48 85 c0             \ttest   %rax,%rax\n    1823:\t0f 95 c0             \tsetne  %al\n    1826:\t84 c0                \ttest   %al,%al\n    1828:\t0f 84 9c 00 00 00    \tje     18ca <sim_main+0xdb3>\n    182e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1835 <sim_main+0xd1e>\n    1835:\t89 da                \tmov    %ebx,%edx\n    1837:\tc1 ea 0c             \tshr    $0xc,%edx\n    183a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1840:\t89 d2                \tmov    %edx,%edx\n    1842:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1847:\t48 85 c0             \ttest   %rax,%rax\n    184a:\t74 5d                \tje     18a9 <sim_main+0xd92>\n    184c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1853 <sim_main+0xd3c>\n    1853:\t89 da                \tmov    %ebx,%edx\n    1855:\tc1 ea 0c             \tshr    $0xc,%edx\n    1858:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    185e:\t89 d2                \tmov    %edx,%edx\n    1860:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1865:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1868:\t89 da                \tmov    %ebx,%edx\n    186a:\tc1 ea 1b             \tshr    $0x1b,%edx\n    186d:\t39 d0                \tcmp    %edx,%eax\n    186f:\t75 38                \tjne    18a9 <sim_main+0xd92>\n    1871:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1878 <sim_main+0xd61>\n    1878:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    187f:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1883:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    188a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1891 <sim_main+0xd7a>\n    1891:\t89 da                \tmov    %ebx,%edx\n    1893:\tc1 ea 0c             \tshr    $0xc,%edx\n    1896:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    189c:\t89 d2                \tmov    %edx,%edx\n    189e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    18a3:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    18a7:\teb 11                \tjmp    18ba <sim_main+0xda3>\n    18a9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 18b0 <sim_main+0xd99>\n    18b0:\t89 de                \tmov    %ebx,%esi\n    18b2:\t48 89 c7             \tmov    %rax,%rdi\n    18b5:\te8 00 00 00 00       \tcallq  18ba <sim_main+0xda3>\n    18ba:\t89 da                \tmov    %ebx,%edx\n    18bc:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    18c2:\t48 01 d0             \tadd    %rdx,%rax\n    18c5:\t0f b7 00             \tmovzwl (%rax),%eax\n    18c8:\teb 05                \tjmp    18cf <sim_main+0xdb8>\n    18ca:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    18cf:\t66 89 85 92 fe ff ff \tmov    %ax,-0x16e(%rbp)\n    18d6:\t83 bd 94 fe ff ff 00 \tcmpl   $0x0,-0x16c(%rbp)\n    18dd:\t74 0e                \tje     18ed <sim_main+0xdd6>\n    18df:\t8b 85 94 fe ff ff    \tmov    -0x16c(%rbp),%eax\n    18e5:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    18e8:\te9 8d 6d 00 00       \tjmpq   867a <sim_main+0x7b63>\n    18ed:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    18f3:\tc1 e8 10             \tshr    $0x10,%eax\n    18f6:\t0f b6 d0             \tmovzbl %al,%edx\n    18f9:\t0f b7 85 92 fe ff ff \tmovzwl -0x16e(%rbp),%eax\n    1900:\t89 d2                \tmov    %edx,%edx\n    1902:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    1909:\te9 6c 6d 00 00       \tjmpq   867a <sim_main+0x7b63>\n    190e:\tc7 85 9c fe ff ff 00 \tmovl   $0x0,-0x164(%rbp)\n    1915:\t00 00 00 \n    1918:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    191e:\tc1 e8 18             \tshr    $0x18,%eax\n    1921:\t89 c0                \tmov    %eax,%eax\n    1923:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    192a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1930:\t98                   \tcwtl   \n    1931:\t01 d0                \tadd    %edx,%eax\n    1933:\t89 c3                \tmov    %eax,%ebx\n    1935:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 193c <sim_main+0xe25>\n    193c:\t89 da                \tmov    %ebx,%edx\n    193e:\tc1 ea 0c             \tshr    $0xc,%edx\n    1941:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1947:\t89 d2                \tmov    %edx,%edx\n    1949:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    194e:\t48 85 c0             \ttest   %rax,%rax\n    1951:\t74 63                \tje     19b6 <sim_main+0xe9f>\n    1953:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 195a <sim_main+0xe43>\n    195a:\t89 da                \tmov    %ebx,%edx\n    195c:\tc1 ea 0c             \tshr    $0xc,%edx\n    195f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1965:\t89 d2                \tmov    %edx,%edx\n    1967:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    196c:\t8b 40 08             \tmov    0x8(%rax),%eax\n    196f:\t89 da                \tmov    %ebx,%edx\n    1971:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1974:\t39 d0                \tcmp    %edx,%eax\n    1976:\t75 3e                \tjne    19b6 <sim_main+0xe9f>\n    1978:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 197f <sim_main+0xe68>\n    197f:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1986:\t48 83 c2 01          \tadd    $0x1,%rdx\n    198a:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    1991:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1998 <sim_main+0xe81>\n    1998:\t89 da                \tmov    %ebx,%edx\n    199a:\tc1 ea 0c             \tshr    $0xc,%edx\n    199d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    19a3:\t89 d2                \tmov    %edx,%edx\n    19a5:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    19aa:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    19ae:\t48 85 c0             \ttest   %rax,%rax\n    19b1:\t0f 95 c0             \tsetne  %al\n    19b4:\teb 17                \tjmp    19cd <sim_main+0xeb6>\n    19b6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 19bd <sim_main+0xea6>\n    19bd:\t89 de                \tmov    %ebx,%esi\n    19bf:\t48 89 c7             \tmov    %rax,%rdi\n    19c2:\te8 00 00 00 00       \tcallq  19c7 <sim_main+0xeb0>\n    19c7:\t48 85 c0             \ttest   %rax,%rax\n    19ca:\t0f 95 c0             \tsetne  %al\n    19cd:\t84 c0                \ttest   %al,%al\n    19cf:\t0f 84 9b 00 00 00    \tje     1a70 <sim_main+0xf59>\n    19d5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 19dc <sim_main+0xec5>\n    19dc:\t89 da                \tmov    %ebx,%edx\n    19de:\tc1 ea 0c             \tshr    $0xc,%edx\n    19e1:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    19e7:\t89 d2                \tmov    %edx,%edx\n    19e9:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    19ee:\t48 85 c0             \ttest   %rax,%rax\n    19f1:\t74 5d                \tje     1a50 <sim_main+0xf39>\n    19f3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 19fa <sim_main+0xee3>\n    19fa:\t89 da                \tmov    %ebx,%edx\n    19fc:\tc1 ea 0c             \tshr    $0xc,%edx\n    19ff:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1a05:\t89 d2                \tmov    %edx,%edx\n    1a07:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1a0c:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1a0f:\t89 da                \tmov    %ebx,%edx\n    1a11:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1a14:\t39 d0                \tcmp    %edx,%eax\n    1a16:\t75 38                \tjne    1a50 <sim_main+0xf39>\n    1a18:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a1f <sim_main+0xf08>\n    1a1f:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1a26:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1a2a:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    1a31:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a38 <sim_main+0xf21>\n    1a38:\t89 da                \tmov    %ebx,%edx\n    1a3a:\tc1 ea 0c             \tshr    $0xc,%edx\n    1a3d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1a43:\t89 d2                \tmov    %edx,%edx\n    1a45:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1a4a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1a4e:\teb 11                \tjmp    1a61 <sim_main+0xf4a>\n    1a50:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a57 <sim_main+0xf40>\n    1a57:\t89 de                \tmov    %ebx,%esi\n    1a59:\t48 89 c7             \tmov    %rax,%rdi\n    1a5c:\te8 00 00 00 00       \tcallq  1a61 <sim_main+0xf4a>\n    1a61:\t89 da                \tmov    %ebx,%edx\n    1a63:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    1a69:\t48 01 d0             \tadd    %rdx,%rax\n    1a6c:\t8b 00                \tmov    (%rax),%eax\n    1a6e:\teb 05                \tjmp    1a75 <sim_main+0xf5e>\n    1a70:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1a75:\t89 85 98 fe ff ff    \tmov    %eax,-0x168(%rbp)\n    1a7b:\t83 bd 9c fe ff ff 00 \tcmpl   $0x0,-0x164(%rbp)\n    1a82:\t74 0e                \tje     1a92 <sim_main+0xf7b>\n    1a84:\t8b 85 9c fe ff ff    \tmov    -0x164(%rbp),%eax\n    1a8a:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    1a8d:\te9 e8 6b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1a92:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1a98:\tc1 e8 10             \tshr    $0x10,%eax\n    1a9b:\t0f b6 d0             \tmovzbl %al,%edx\n    1a9e:\t8b 85 98 fe ff ff    \tmov    -0x168(%rbp),%eax\n    1aa4:\t89 d2                \tmov    %edx,%edx\n    1aa6:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    1aad:\te9 c8 6b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1ab2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1ab8:\t25 00 00 01 00       \tand    $0x10000,%eax\n    1abd:\t85 c0                \ttest   %eax,%eax\n    1abf:\t74 0c                \tje     1acd <sim_main+0xfb6>\n    1ac1:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    1ac8:\te9 ad 6b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1acd:\tc7 85 a8 fe ff ff 00 \tmovl   $0x0,-0x158(%rbp)\n    1ad4:\t00 00 00 \n    1ad7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1add:\tc1 e8 18             \tshr    $0x18,%eax\n    1ae0:\t89 c0                \tmov    %eax,%eax\n    1ae2:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    1ae9:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1aef:\t98                   \tcwtl   \n    1af0:\t01 d0                \tadd    %edx,%eax\n    1af2:\t89 c3                \tmov    %eax,%ebx\n    1af4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1afb <sim_main+0xfe4>\n    1afb:\t89 da                \tmov    %ebx,%edx\n    1afd:\tc1 ea 0c             \tshr    $0xc,%edx\n    1b00:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1b06:\t89 d2                \tmov    %edx,%edx\n    1b08:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1b0d:\t48 85 c0             \ttest   %rax,%rax\n    1b10:\t74 63                \tje     1b75 <sim_main+0x105e>\n    1b12:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1b19 <sim_main+0x1002>\n    1b19:\t89 da                \tmov    %ebx,%edx\n    1b1b:\tc1 ea 0c             \tshr    $0xc,%edx\n    1b1e:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1b24:\t89 d2                \tmov    %edx,%edx\n    1b26:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1b2b:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1b2e:\t89 da                \tmov    %ebx,%edx\n    1b30:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1b33:\t39 d0                \tcmp    %edx,%eax\n    1b35:\t75 3e                \tjne    1b75 <sim_main+0x105e>\n    1b37:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1b3e <sim_main+0x1027>\n    1b3e:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1b45:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1b49:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    1b50:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1b57 <sim_main+0x1040>\n    1b57:\t89 da                \tmov    %ebx,%edx\n    1b59:\tc1 ea 0c             \tshr    $0xc,%edx\n    1b5c:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1b62:\t89 d2                \tmov    %edx,%edx\n    1b64:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1b69:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1b6d:\t48 85 c0             \ttest   %rax,%rax\n    1b70:\t0f 95 c0             \tsetne  %al\n    1b73:\teb 17                \tjmp    1b8c <sim_main+0x1075>\n    1b75:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1b7c <sim_main+0x1065>\n    1b7c:\t89 de                \tmov    %ebx,%esi\n    1b7e:\t48 89 c7             \tmov    %rax,%rdi\n    1b81:\te8 00 00 00 00       \tcallq  1b86 <sim_main+0x106f>\n    1b86:\t48 85 c0             \ttest   %rax,%rax\n    1b89:\t0f 95 c0             \tsetne  %al\n    1b8c:\t84 c0                \ttest   %al,%al\n    1b8e:\t0f 84 9b 00 00 00    \tje     1c2f <sim_main+0x1118>\n    1b94:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1b9b <sim_main+0x1084>\n    1b9b:\t89 da                \tmov    %ebx,%edx\n    1b9d:\tc1 ea 0c             \tshr    $0xc,%edx\n    1ba0:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1ba6:\t89 d2                \tmov    %edx,%edx\n    1ba8:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1bad:\t48 85 c0             \ttest   %rax,%rax\n    1bb0:\t74 5d                \tje     1c0f <sim_main+0x10f8>\n    1bb2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1bb9 <sim_main+0x10a2>\n    1bb9:\t89 da                \tmov    %ebx,%edx\n    1bbb:\tc1 ea 0c             \tshr    $0xc,%edx\n    1bbe:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1bc4:\t89 d2                \tmov    %edx,%edx\n    1bc6:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1bcb:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1bce:\t89 da                \tmov    %ebx,%edx\n    1bd0:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1bd3:\t39 d0                \tcmp    %edx,%eax\n    1bd5:\t75 38                \tjne    1c0f <sim_main+0x10f8>\n    1bd7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1bde <sim_main+0x10c7>\n    1bde:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1be5:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1be9:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    1bf0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1bf7 <sim_main+0x10e0>\n    1bf7:\t89 da                \tmov    %ebx,%edx\n    1bf9:\tc1 ea 0c             \tshr    $0xc,%edx\n    1bfc:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1c02:\t89 d2                \tmov    %edx,%edx\n    1c04:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1c09:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1c0d:\teb 11                \tjmp    1c20 <sim_main+0x1109>\n    1c0f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c16 <sim_main+0x10ff>\n    1c16:\t89 de                \tmov    %ebx,%esi\n    1c18:\t48 89 c7             \tmov    %rax,%rdi\n    1c1b:\te8 00 00 00 00       \tcallq  1c20 <sim_main+0x1109>\n    1c20:\t89 da                \tmov    %ebx,%edx\n    1c22:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    1c28:\t48 01 d0             \tadd    %rdx,%rax\n    1c2b:\t8b 00                \tmov    (%rax),%eax\n    1c2d:\teb 05                \tjmp    1c34 <sim_main+0x111d>\n    1c2f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c34:\t89 85 a4 fe ff ff    \tmov    %eax,-0x15c(%rbp)\n    1c3a:\t83 bd a8 fe ff ff 00 \tcmpl   $0x0,-0x158(%rbp)\n    1c41:\t74 0e                \tje     1c51 <sim_main+0x113a>\n    1c43:\t8b 85 a8 fe ff ff    \tmov    -0x158(%rbp),%eax\n    1c49:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    1c4c:\te9 29 6a 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1c51:\tc7 85 a8 fe ff ff 00 \tmovl   $0x0,-0x158(%rbp)\n    1c58:\t00 00 00 \n    1c5b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1c61:\tc1 e8 18             \tshr    $0x18,%eax\n    1c64:\t89 c0                \tmov    %eax,%eax\n    1c66:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    1c6d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1c73:\t98                   \tcwtl   \n    1c74:\t01 d0                \tadd    %edx,%eax\n    1c76:\t83 c0 04             \tadd    $0x4,%eax\n    1c79:\t89 c3                \tmov    %eax,%ebx\n    1c7b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c82 <sim_main+0x116b>\n    1c82:\t89 da                \tmov    %ebx,%edx\n    1c84:\tc1 ea 0c             \tshr    $0xc,%edx\n    1c87:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1c8d:\t89 d2                \tmov    %edx,%edx\n    1c8f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1c94:\t48 85 c0             \ttest   %rax,%rax\n    1c97:\t74 63                \tje     1cfc <sim_main+0x11e5>\n    1c99:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ca0 <sim_main+0x1189>\n    1ca0:\t89 da                \tmov    %ebx,%edx\n    1ca2:\tc1 ea 0c             \tshr    $0xc,%edx\n    1ca5:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1cab:\t89 d2                \tmov    %edx,%edx\n    1cad:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1cb2:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1cb5:\t89 da                \tmov    %ebx,%edx\n    1cb7:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1cba:\t39 d0                \tcmp    %edx,%eax\n    1cbc:\t75 3e                \tjne    1cfc <sim_main+0x11e5>\n    1cbe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1cc5 <sim_main+0x11ae>\n    1cc5:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1ccc:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1cd0:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    1cd7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1cde <sim_main+0x11c7>\n    1cde:\t89 da                \tmov    %ebx,%edx\n    1ce0:\tc1 ea 0c             \tshr    $0xc,%edx\n    1ce3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1ce9:\t89 d2                \tmov    %edx,%edx\n    1ceb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1cf0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1cf4:\t48 85 c0             \ttest   %rax,%rax\n    1cf7:\t0f 95 c0             \tsetne  %al\n    1cfa:\teb 17                \tjmp    1d13 <sim_main+0x11fc>\n    1cfc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d03 <sim_main+0x11ec>\n    1d03:\t89 de                \tmov    %ebx,%esi\n    1d05:\t48 89 c7             \tmov    %rax,%rdi\n    1d08:\te8 00 00 00 00       \tcallq  1d0d <sim_main+0x11f6>\n    1d0d:\t48 85 c0             \ttest   %rax,%rax\n    1d10:\t0f 95 c0             \tsetne  %al\n    1d13:\t84 c0                \ttest   %al,%al\n    1d15:\t0f 84 9b 00 00 00    \tje     1db6 <sim_main+0x129f>\n    1d1b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d22 <sim_main+0x120b>\n    1d22:\t89 da                \tmov    %ebx,%edx\n    1d24:\tc1 ea 0c             \tshr    $0xc,%edx\n    1d27:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1d2d:\t89 d2                \tmov    %edx,%edx\n    1d2f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1d34:\t48 85 c0             \ttest   %rax,%rax\n    1d37:\t74 5d                \tje     1d96 <sim_main+0x127f>\n    1d39:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d40 <sim_main+0x1229>\n    1d40:\t89 da                \tmov    %ebx,%edx\n    1d42:\tc1 ea 0c             \tshr    $0xc,%edx\n    1d45:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1d4b:\t89 d2                \tmov    %edx,%edx\n    1d4d:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1d52:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1d55:\t89 da                \tmov    %ebx,%edx\n    1d57:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1d5a:\t39 d0                \tcmp    %edx,%eax\n    1d5c:\t75 38                \tjne    1d96 <sim_main+0x127f>\n    1d5e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d65 <sim_main+0x124e>\n    1d65:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1d6c:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1d70:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    1d77:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d7e <sim_main+0x1267>\n    1d7e:\t89 da                \tmov    %ebx,%edx\n    1d80:\tc1 ea 0c             \tshr    $0xc,%edx\n    1d83:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1d89:\t89 d2                \tmov    %edx,%edx\n    1d8b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1d90:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1d94:\teb 11                \tjmp    1da7 <sim_main+0x1290>\n    1d96:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1d9d <sim_main+0x1286>\n    1d9d:\t89 de                \tmov    %ebx,%esi\n    1d9f:\t48 89 c7             \tmov    %rax,%rdi\n    1da2:\te8 00 00 00 00       \tcallq  1da7 <sim_main+0x1290>\n    1da7:\t89 da                \tmov    %ebx,%edx\n    1da9:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    1daf:\t48 01 d0             \tadd    %rdx,%rax\n    1db2:\t8b 00                \tmov    (%rax),%eax\n    1db4:\teb 05                \tjmp    1dbb <sim_main+0x12a4>\n    1db6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1dbb:\t89 85 a0 fe ff ff    \tmov    %eax,-0x160(%rbp)\n    1dc1:\t83 bd a8 fe ff ff 00 \tcmpl   $0x0,-0x158(%rbp)\n    1dc8:\t74 0e                \tje     1dd8 <sim_main+0x12c1>\n    1dca:\t8b 85 a8 fe ff ff    \tmov    -0x158(%rbp),%eax\n    1dd0:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    1dd3:\te9 a2 68 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1dd8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1dde:\tc1 e8 10             \tshr    $0x10,%eax\n    1de1:\t0f b6 d0             \tmovzbl %al,%edx\n    1de4:\t8b 85 a4 fe ff ff    \tmov    -0x15c(%rbp),%eax\n    1dea:\t89 d2                \tmov    %edx,%edx\n    1dec:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    1df3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1df9:\tc1 e8 10             \tshr    $0x10,%eax\n    1dfc:\t0f b6 c0             \tmovzbl %al,%eax\n    1dff:\t8d 50 01             \tlea    0x1(%rax),%edx\n    1e02:\t8b 85 a0 fe ff ff    \tmov    -0x160(%rbp),%eax\n    1e08:\t89 d2                \tmov    %edx,%edx\n    1e0a:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    1e11:\te9 64 68 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1e16:\tc7 85 b0 fe ff ff 00 \tmovl   $0x0,-0x150(%rbp)\n    1e1d:\t00 00 00 \n    1e20:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1e26:\tc1 e8 18             \tshr    $0x18,%eax\n    1e29:\t89 c0                \tmov    %eax,%eax\n    1e2b:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    1e32:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1e38:\t98                   \tcwtl   \n    1e39:\t01 d0                \tadd    %edx,%eax\n    1e3b:\t89 c3                \tmov    %eax,%ebx\n    1e3d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e44 <sim_main+0x132d>\n    1e44:\t89 da                \tmov    %ebx,%edx\n    1e46:\tc1 ea 0c             \tshr    $0xc,%edx\n    1e49:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1e4f:\t89 d2                \tmov    %edx,%edx\n    1e51:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1e56:\t48 85 c0             \ttest   %rax,%rax\n    1e59:\t74 63                \tje     1ebe <sim_main+0x13a7>\n    1e5b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e62 <sim_main+0x134b>\n    1e62:\t89 da                \tmov    %ebx,%edx\n    1e64:\tc1 ea 0c             \tshr    $0xc,%edx\n    1e67:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1e6d:\t89 d2                \tmov    %edx,%edx\n    1e6f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1e74:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1e77:\t89 da                \tmov    %ebx,%edx\n    1e79:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1e7c:\t39 d0                \tcmp    %edx,%eax\n    1e7e:\t75 3e                \tjne    1ebe <sim_main+0x13a7>\n    1e80:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1e87 <sim_main+0x1370>\n    1e87:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1e8e:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1e92:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    1e99:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ea0 <sim_main+0x1389>\n    1ea0:\t89 da                \tmov    %ebx,%edx\n    1ea2:\tc1 ea 0c             \tshr    $0xc,%edx\n    1ea5:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1eab:\t89 d2                \tmov    %edx,%edx\n    1ead:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1eb2:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1eb6:\t48 85 c0             \ttest   %rax,%rax\n    1eb9:\t0f 95 c0             \tsetne  %al\n    1ebc:\teb 17                \tjmp    1ed5 <sim_main+0x13be>\n    1ebe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ec5 <sim_main+0x13ae>\n    1ec5:\t89 de                \tmov    %ebx,%esi\n    1ec7:\t48 89 c7             \tmov    %rax,%rdi\n    1eca:\te8 00 00 00 00       \tcallq  1ecf <sim_main+0x13b8>\n    1ecf:\t48 85 c0             \ttest   %rax,%rax\n    1ed2:\t0f 95 c0             \tsetne  %al\n    1ed5:\t84 c0                \ttest   %al,%al\n    1ed7:\t0f 84 9b 00 00 00    \tje     1f78 <sim_main+0x1461>\n    1edd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1ee4 <sim_main+0x13cd>\n    1ee4:\t89 da                \tmov    %ebx,%edx\n    1ee6:\tc1 ea 0c             \tshr    $0xc,%edx\n    1ee9:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1eef:\t89 d2                \tmov    %edx,%edx\n    1ef1:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1ef6:\t48 85 c0             \ttest   %rax,%rax\n    1ef9:\t74 5d                \tje     1f58 <sim_main+0x1441>\n    1efb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1f02 <sim_main+0x13eb>\n    1f02:\t89 da                \tmov    %ebx,%edx\n    1f04:\tc1 ea 0c             \tshr    $0xc,%edx\n    1f07:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1f0d:\t89 d2                \tmov    %edx,%edx\n    1f0f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1f14:\t8b 40 08             \tmov    0x8(%rax),%eax\n    1f17:\t89 da                \tmov    %ebx,%edx\n    1f19:\tc1 ea 1b             \tshr    $0x1b,%edx\n    1f1c:\t39 d0                \tcmp    %edx,%eax\n    1f1e:\t75 38                \tjne    1f58 <sim_main+0x1441>\n    1f20:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1f27 <sim_main+0x1410>\n    1f27:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    1f2e:\t48 83 c2 01          \tadd    $0x1,%rdx\n    1f32:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    1f39:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1f40 <sim_main+0x1429>\n    1f40:\t89 da                \tmov    %ebx,%edx\n    1f42:\tc1 ea 0c             \tshr    $0xc,%edx\n    1f45:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    1f4b:\t89 d2                \tmov    %edx,%edx\n    1f4d:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    1f52:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    1f56:\teb 11                \tjmp    1f69 <sim_main+0x1452>\n    1f58:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1f5f <sim_main+0x1448>\n    1f5f:\t89 de                \tmov    %ebx,%esi\n    1f61:\t48 89 c7             \tmov    %rax,%rdi\n    1f64:\te8 00 00 00 00       \tcallq  1f69 <sim_main+0x1452>\n    1f69:\t89 da                \tmov    %ebx,%edx\n    1f6b:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    1f71:\t48 01 d0             \tadd    %rdx,%rax\n    1f74:\t8b 00                \tmov    (%rax),%eax\n    1f76:\teb 05                \tjmp    1f7d <sim_main+0x1466>\n    1f78:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1f7d:\t89 85 ac fe ff ff    \tmov    %eax,-0x154(%rbp)\n    1f83:\t83 bd b0 fe ff ff 00 \tcmpl   $0x0,-0x150(%rbp)\n    1f8a:\t74 0e                \tje     1f9a <sim_main+0x1483>\n    1f8c:\t8b 85 b0 fe ff ff    \tmov    -0x150(%rbp),%eax\n    1f92:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    1f95:\te9 e0 66 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1f9a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1fa0:\tc1 e8 10             \tshr    $0x10,%eax\n    1fa3:\t0f b6 d0             \tmovzbl %al,%edx\n    1fa6:\t8b 85 ac fe ff ff    \tmov    -0x154(%rbp),%eax\n    1fac:\t89 d2                \tmov    %edx,%edx\n    1fae:\t48 83 c2 20          \tadd    $0x20,%rdx\n    1fb2:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    1fb9:\te9 bc 66 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1fbe:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1fc4:\t25 00 00 01 00       \tand    $0x10000,%eax\n    1fc9:\t85 c0                \ttest   %eax,%eax\n    1fcb:\t74 0c                \tje     1fd9 <sim_main+0x14c2>\n    1fcd:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    1fd4:\te9 a1 66 00 00       \tjmpq   867a <sim_main+0x7b63>\n    1fd9:\tc7 85 bc fe ff ff 00 \tmovl   $0x0,-0x144(%rbp)\n    1fe0:\t00 00 00 \n    1fe3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1fe9:\tc1 e8 18             \tshr    $0x18,%eax\n    1fec:\t89 c0                \tmov    %eax,%eax\n    1fee:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    1ff5:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    1ffb:\t98                   \tcwtl   \n    1ffc:\t01 d0                \tadd    %edx,%eax\n    1ffe:\t89 c3                \tmov    %eax,%ebx\n    2000:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2007 <sim_main+0x14f0>\n    2007:\t89 da                \tmov    %ebx,%edx\n    2009:\tc1 ea 0c             \tshr    $0xc,%edx\n    200c:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2012:\t89 d2                \tmov    %edx,%edx\n    2014:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2019:\t48 85 c0             \ttest   %rax,%rax\n    201c:\t74 63                \tje     2081 <sim_main+0x156a>\n    201e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2025 <sim_main+0x150e>\n    2025:\t89 da                \tmov    %ebx,%edx\n    2027:\tc1 ea 0c             \tshr    $0xc,%edx\n    202a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2030:\t89 d2                \tmov    %edx,%edx\n    2032:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2037:\t8b 40 08             \tmov    0x8(%rax),%eax\n    203a:\t89 da                \tmov    %ebx,%edx\n    203c:\tc1 ea 1b             \tshr    $0x1b,%edx\n    203f:\t39 d0                \tcmp    %edx,%eax\n    2041:\t75 3e                \tjne    2081 <sim_main+0x156a>\n    2043:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 204a <sim_main+0x1533>\n    204a:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2051:\t48 83 c2 01          \tadd    $0x1,%rdx\n    2055:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    205c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2063 <sim_main+0x154c>\n    2063:\t89 da                \tmov    %ebx,%edx\n    2065:\tc1 ea 0c             \tshr    $0xc,%edx\n    2068:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    206e:\t89 d2                \tmov    %edx,%edx\n    2070:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2075:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2079:\t48 85 c0             \ttest   %rax,%rax\n    207c:\t0f 95 c0             \tsetne  %al\n    207f:\teb 17                \tjmp    2098 <sim_main+0x1581>\n    2081:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2088 <sim_main+0x1571>\n    2088:\t89 de                \tmov    %ebx,%esi\n    208a:\t48 89 c7             \tmov    %rax,%rdi\n    208d:\te8 00 00 00 00       \tcallq  2092 <sim_main+0x157b>\n    2092:\t48 85 c0             \ttest   %rax,%rax\n    2095:\t0f 95 c0             \tsetne  %al\n    2098:\t84 c0                \ttest   %al,%al\n    209a:\t0f 84 9b 00 00 00    \tje     213b <sim_main+0x1624>\n    20a0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 20a7 <sim_main+0x1590>\n    20a7:\t89 da                \tmov    %ebx,%edx\n    20a9:\tc1 ea 0c             \tshr    $0xc,%edx\n    20ac:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    20b2:\t89 d2                \tmov    %edx,%edx\n    20b4:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    20b9:\t48 85 c0             \ttest   %rax,%rax\n    20bc:\t74 5d                \tje     211b <sim_main+0x1604>\n    20be:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 20c5 <sim_main+0x15ae>\n    20c5:\t89 da                \tmov    %ebx,%edx\n    20c7:\tc1 ea 0c             \tshr    $0xc,%edx\n    20ca:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    20d0:\t89 d2                \tmov    %edx,%edx\n    20d2:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    20d7:\t8b 40 08             \tmov    0x8(%rax),%eax\n    20da:\t89 da                \tmov    %ebx,%edx\n    20dc:\tc1 ea 1b             \tshr    $0x1b,%edx\n    20df:\t39 d0                \tcmp    %edx,%eax\n    20e1:\t75 38                \tjne    211b <sim_main+0x1604>\n    20e3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 20ea <sim_main+0x15d3>\n    20ea:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    20f1:\t48 83 c2 01          \tadd    $0x1,%rdx\n    20f5:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    20fc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2103 <sim_main+0x15ec>\n    2103:\t89 da                \tmov    %ebx,%edx\n    2105:\tc1 ea 0c             \tshr    $0xc,%edx\n    2108:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    210e:\t89 d2                \tmov    %edx,%edx\n    2110:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2115:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2119:\teb 11                \tjmp    212c <sim_main+0x1615>\n    211b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2122 <sim_main+0x160b>\n    2122:\t89 de                \tmov    %ebx,%esi\n    2124:\t48 89 c7             \tmov    %rax,%rdi\n    2127:\te8 00 00 00 00       \tcallq  212c <sim_main+0x1615>\n    212c:\t89 da                \tmov    %ebx,%edx\n    212e:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    2134:\t48 01 d0             \tadd    %rdx,%rax\n    2137:\t8b 00                \tmov    (%rax),%eax\n    2139:\teb 05                \tjmp    2140 <sim_main+0x1629>\n    213b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2140:\t89 85 b8 fe ff ff    \tmov    %eax,-0x148(%rbp)\n    2146:\t83 bd bc fe ff ff 00 \tcmpl   $0x0,-0x144(%rbp)\n    214d:\t74 0e                \tje     215d <sim_main+0x1646>\n    214f:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n    2155:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    2158:\te9 1d 65 00 00       \tjmpq   867a <sim_main+0x7b63>\n    215d:\tc7 85 bc fe ff ff 00 \tmovl   $0x0,-0x144(%rbp)\n    2164:\t00 00 00 \n    2167:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    216d:\tc1 e8 18             \tshr    $0x18,%eax\n    2170:\t89 c0                \tmov    %eax,%eax\n    2172:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    2179:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    217f:\t98                   \tcwtl   \n    2180:\t01 d0                \tadd    %edx,%eax\n    2182:\t83 c0 04             \tadd    $0x4,%eax\n    2185:\t89 c3                \tmov    %eax,%ebx\n    2187:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 218e <sim_main+0x1677>\n    218e:\t89 da                \tmov    %ebx,%edx\n    2190:\tc1 ea 0c             \tshr    $0xc,%edx\n    2193:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2199:\t89 d2                \tmov    %edx,%edx\n    219b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    21a0:\t48 85 c0             \ttest   %rax,%rax\n    21a3:\t74 63                \tje     2208 <sim_main+0x16f1>\n    21a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 21ac <sim_main+0x1695>\n    21ac:\t89 da                \tmov    %ebx,%edx\n    21ae:\tc1 ea 0c             \tshr    $0xc,%edx\n    21b1:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    21b7:\t89 d2                \tmov    %edx,%edx\n    21b9:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    21be:\t8b 40 08             \tmov    0x8(%rax),%eax\n    21c1:\t89 da                \tmov    %ebx,%edx\n    21c3:\tc1 ea 1b             \tshr    $0x1b,%edx\n    21c6:\t39 d0                \tcmp    %edx,%eax\n    21c8:\t75 3e                \tjne    2208 <sim_main+0x16f1>\n    21ca:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 21d1 <sim_main+0x16ba>\n    21d1:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    21d8:\t48 83 c2 01          \tadd    $0x1,%rdx\n    21dc:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    21e3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 21ea <sim_main+0x16d3>\n    21ea:\t89 da                \tmov    %ebx,%edx\n    21ec:\tc1 ea 0c             \tshr    $0xc,%edx\n    21ef:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    21f5:\t89 d2                \tmov    %edx,%edx\n    21f7:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    21fc:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2200:\t48 85 c0             \ttest   %rax,%rax\n    2203:\t0f 95 c0             \tsetne  %al\n    2206:\teb 17                \tjmp    221f <sim_main+0x1708>\n    2208:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 220f <sim_main+0x16f8>\n    220f:\t89 de                \tmov    %ebx,%esi\n    2211:\t48 89 c7             \tmov    %rax,%rdi\n    2214:\te8 00 00 00 00       \tcallq  2219 <sim_main+0x1702>\n    2219:\t48 85 c0             \ttest   %rax,%rax\n    221c:\t0f 95 c0             \tsetne  %al\n    221f:\t84 c0                \ttest   %al,%al\n    2221:\t0f 84 9b 00 00 00    \tje     22c2 <sim_main+0x17ab>\n    2227:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 222e <sim_main+0x1717>\n    222e:\t89 da                \tmov    %ebx,%edx\n    2230:\tc1 ea 0c             \tshr    $0xc,%edx\n    2233:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2239:\t89 d2                \tmov    %edx,%edx\n    223b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2240:\t48 85 c0             \ttest   %rax,%rax\n    2243:\t74 5d                \tje     22a2 <sim_main+0x178b>\n    2245:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 224c <sim_main+0x1735>\n    224c:\t89 da                \tmov    %ebx,%edx\n    224e:\tc1 ea 0c             \tshr    $0xc,%edx\n    2251:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2257:\t89 d2                \tmov    %edx,%edx\n    2259:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    225e:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2261:\t89 da                \tmov    %ebx,%edx\n    2263:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2266:\t39 d0                \tcmp    %edx,%eax\n    2268:\t75 38                \tjne    22a2 <sim_main+0x178b>\n    226a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2271 <sim_main+0x175a>\n    2271:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2278:\t48 83 c2 01          \tadd    $0x1,%rdx\n    227c:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    2283:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 228a <sim_main+0x1773>\n    228a:\t89 da                \tmov    %ebx,%edx\n    228c:\tc1 ea 0c             \tshr    $0xc,%edx\n    228f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2295:\t89 d2                \tmov    %edx,%edx\n    2297:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    229c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    22a0:\teb 11                \tjmp    22b3 <sim_main+0x179c>\n    22a2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 22a9 <sim_main+0x1792>\n    22a9:\t89 de                \tmov    %ebx,%esi\n    22ab:\t48 89 c7             \tmov    %rax,%rdi\n    22ae:\te8 00 00 00 00       \tcallq  22b3 <sim_main+0x179c>\n    22b3:\t89 da                \tmov    %ebx,%edx\n    22b5:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    22bb:\t48 01 d0             \tadd    %rdx,%rax\n    22be:\t8b 00                \tmov    (%rax),%eax\n    22c0:\teb 05                \tjmp    22c7 <sim_main+0x17b0>\n    22c2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    22c7:\t89 85 b4 fe ff ff    \tmov    %eax,-0x14c(%rbp)\n    22cd:\t83 bd bc fe ff ff 00 \tcmpl   $0x0,-0x144(%rbp)\n    22d4:\t74 0e                \tje     22e4 <sim_main+0x17cd>\n    22d6:\t8b 85 bc fe ff ff    \tmov    -0x144(%rbp),%eax\n    22dc:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    22df:\te9 96 63 00 00       \tjmpq   867a <sim_main+0x7b63>\n    22e4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    22ea:\tc1 e8 10             \tshr    $0x10,%eax\n    22ed:\t0f b6 d0             \tmovzbl %al,%edx\n    22f0:\t8b 85 b8 fe ff ff    \tmov    -0x148(%rbp),%eax\n    22f6:\t89 d2                \tmov    %edx,%edx\n    22f8:\t48 83 c2 20          \tadd    $0x20,%rdx\n    22fc:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    2303:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2309:\tc1 e8 10             \tshr    $0x10,%eax\n    230c:\t0f b6 c0             \tmovzbl %al,%eax\n    230f:\t8d 50 01             \tlea    0x1(%rax),%edx\n    2312:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n    2318:\t89 d2                \tmov    %edx,%edx\n    231a:\t48 83 c2 20          \tadd    $0x20,%rdx\n    231e:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    2325:\te9 50 63 00 00       \tjmpq   867a <sim_main+0x7b63>\n    232a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2330:\tc1 e8 18             \tshr    $0x18,%eax\n    2333:\t89 c0                \tmov    %eax,%eax\n    2335:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    233c:\t89 85 c8 fe ff ff    \tmov    %eax,-0x138(%rbp)\n    2342:\tc7 85 c4 fe ff ff 00 \tmovl   $0x0,-0x13c(%rbp)\n    2349:\t00 00 00 \n    234c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2352:\t0f bf d0             \tmovswl %ax,%edx\n    2355:\t8b 85 c8 fe ff ff    \tmov    -0x138(%rbp),%eax\n    235b:\t01 d0                \tadd    %edx,%eax\n    235d:\t83 e0 fc             \tand    $0xfffffffc,%eax\n    2360:\t89 c3                \tmov    %eax,%ebx\n    2362:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2369 <sim_main+0x1852>\n    2369:\t89 da                \tmov    %ebx,%edx\n    236b:\tc1 ea 0c             \tshr    $0xc,%edx\n    236e:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2374:\t89 d2                \tmov    %edx,%edx\n    2376:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    237b:\t48 85 c0             \ttest   %rax,%rax\n    237e:\t74 63                \tje     23e3 <sim_main+0x18cc>\n    2380:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2387 <sim_main+0x1870>\n    2387:\t89 da                \tmov    %ebx,%edx\n    2389:\tc1 ea 0c             \tshr    $0xc,%edx\n    238c:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2392:\t89 d2                \tmov    %edx,%edx\n    2394:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2399:\t8b 40 08             \tmov    0x8(%rax),%eax\n    239c:\t89 da                \tmov    %ebx,%edx\n    239e:\tc1 ea 1b             \tshr    $0x1b,%edx\n    23a1:\t39 d0                \tcmp    %edx,%eax\n    23a3:\t75 3e                \tjne    23e3 <sim_main+0x18cc>\n    23a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 23ac <sim_main+0x1895>\n    23ac:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    23b3:\t48 83 c2 01          \tadd    $0x1,%rdx\n    23b7:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    23be:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 23c5 <sim_main+0x18ae>\n    23c5:\t89 da                \tmov    %ebx,%edx\n    23c7:\tc1 ea 0c             \tshr    $0xc,%edx\n    23ca:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    23d0:\t89 d2                \tmov    %edx,%edx\n    23d2:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    23d7:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    23db:\t48 85 c0             \ttest   %rax,%rax\n    23de:\t0f 95 c0             \tsetne  %al\n    23e1:\teb 17                \tjmp    23fa <sim_main+0x18e3>\n    23e3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 23ea <sim_main+0x18d3>\n    23ea:\t89 de                \tmov    %ebx,%esi\n    23ec:\t48 89 c7             \tmov    %rax,%rdi\n    23ef:\te8 00 00 00 00       \tcallq  23f4 <sim_main+0x18dd>\n    23f4:\t48 85 c0             \ttest   %rax,%rax\n    23f7:\t0f 95 c0             \tsetne  %al\n    23fa:\t84 c0                \ttest   %al,%al\n    23fc:\t0f 84 9b 00 00 00    \tje     249d <sim_main+0x1986>\n    2402:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2409 <sim_main+0x18f2>\n    2409:\t89 da                \tmov    %ebx,%edx\n    240b:\tc1 ea 0c             \tshr    $0xc,%edx\n    240e:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2414:\t89 d2                \tmov    %edx,%edx\n    2416:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    241b:\t48 85 c0             \ttest   %rax,%rax\n    241e:\t74 5d                \tje     247d <sim_main+0x1966>\n    2420:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2427 <sim_main+0x1910>\n    2427:\t89 da                \tmov    %ebx,%edx\n    2429:\tc1 ea 0c             \tshr    $0xc,%edx\n    242c:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2432:\t89 d2                \tmov    %edx,%edx\n    2434:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2439:\t8b 40 08             \tmov    0x8(%rax),%eax\n    243c:\t89 da                \tmov    %ebx,%edx\n    243e:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2441:\t39 d0                \tcmp    %edx,%eax\n    2443:\t75 38                \tjne    247d <sim_main+0x1966>\n    2445:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 244c <sim_main+0x1935>\n    244c:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2453:\t48 83 c2 01          \tadd    $0x1,%rdx\n    2457:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    245e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2465 <sim_main+0x194e>\n    2465:\t89 da                \tmov    %ebx,%edx\n    2467:\tc1 ea 0c             \tshr    $0xc,%edx\n    246a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2470:\t89 d2                \tmov    %edx,%edx\n    2472:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2477:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    247b:\teb 11                \tjmp    248e <sim_main+0x1977>\n    247d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2484 <sim_main+0x196d>\n    2484:\t89 de                \tmov    %ebx,%esi\n    2486:\t48 89 c7             \tmov    %rax,%rdi\n    2489:\te8 00 00 00 00       \tcallq  248e <sim_main+0x1977>\n    248e:\t89 da                \tmov    %ebx,%edx\n    2490:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    2496:\t48 01 d0             \tadd    %rdx,%rax\n    2499:\t8b 00                \tmov    (%rax),%eax\n    249b:\teb 05                \tjmp    24a2 <sim_main+0x198b>\n    249d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24a2:\t89 85 c0 fe ff ff    \tmov    %eax,-0x140(%rbp)\n    24a8:\t83 bd c4 fe ff ff 00 \tcmpl   $0x0,-0x13c(%rbp)\n    24af:\t74 0e                \tje     24bf <sim_main+0x19a8>\n    24b1:\t8b 85 c4 fe ff ff    \tmov    -0x13c(%rbp),%eax\n    24b7:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    24ba:\te9 bb 61 00 00       \tjmpq   867a <sim_main+0x7b63>\n    24bf:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    24c5:\tc1 e8 10             \tshr    $0x10,%eax\n    24c8:\t0f b6 c0             \tmovzbl %al,%eax\n    24cb:\t89 c0                \tmov    %eax,%eax\n    24cd:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    24d4:\t89 c1                \tmov    %eax,%ecx\n    24d6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    24dc:\t0f bf d0             \tmovswl %ax,%edx\n    24df:\t8b 85 c8 fe ff ff    \tmov    -0x138(%rbp),%eax\n    24e5:\t01 d0                \tadd    %edx,%eax\n    24e7:\t83 e0 03             \tand    $0x3,%eax\n    24ea:\t83 c0 01             \tadd    $0x1,%eax\n    24ed:\t89 c0                \tmov    %eax,%eax\n    24ef:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    24f6:\t21 c1                \tand    %eax,%ecx\n    24f8:\t89 ce                \tmov    %ecx,%esi\n    24fa:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2500:\t0f bf d0             \tmovswl %ax,%edx\n    2503:\t8b 85 c8 fe ff ff    \tmov    -0x138(%rbp),%eax\n    2509:\t01 d0                \tadd    %edx,%eax\n    250b:\tf7 d0                \tnot    %eax\n    250d:\t83 e0 03             \tand    $0x3,%eax\n    2510:\tc1 e0 03             \tshl    $0x3,%eax\n    2513:\t8b 95 c0 fe ff ff    \tmov    -0x140(%rbp),%edx\n    2519:\t89 c1                \tmov    %eax,%ecx\n    251b:\td3 e2                \tshl    %cl,%edx\n    251d:\t89 d1                \tmov    %edx,%ecx\n    251f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2525:\t0f bf d0             \tmovswl %ax,%edx\n    2528:\t8b 85 c8 fe ff ff    \tmov    -0x138(%rbp),%eax\n    252e:\t01 d0                \tadd    %edx,%eax\n    2530:\t83 e0 03             \tand    $0x3,%eax\n    2533:\t83 c0 01             \tadd    $0x1,%eax\n    2536:\t89 c0                \tmov    %eax,%eax\n    2538:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    253f:\tf7 d0                \tnot    %eax\n    2541:\t21 c8                \tand    %ecx,%eax\n    2543:\t09 c6                \tor     %eax,%esi\n    2545:\t89 f2                \tmov    %esi,%edx\n    2547:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    254d:\tc1 e8 10             \tshr    $0x10,%eax\n    2550:\t0f b6 c0             \tmovzbl %al,%eax\n    2553:\t89 c0                \tmov    %eax,%eax\n    2555:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n    255c:\te9 19 61 00 00       \tjmpq   867a <sim_main+0x7b63>\n    2561:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2567:\tc1 e8 18             \tshr    $0x18,%eax\n    256a:\t89 c0                \tmov    %eax,%eax\n    256c:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    2573:\t89 85 d4 fe ff ff    \tmov    %eax,-0x12c(%rbp)\n    2579:\tc7 85 d0 fe ff ff 00 \tmovl   $0x0,-0x130(%rbp)\n    2580:\t00 00 00 \n    2583:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2589:\t0f bf d0             \tmovswl %ax,%edx\n    258c:\t8b 85 d4 fe ff ff    \tmov    -0x12c(%rbp),%eax\n    2592:\t01 d0                \tadd    %edx,%eax\n    2594:\t83 e0 fc             \tand    $0xfffffffc,%eax\n    2597:\t89 c3                \tmov    %eax,%ebx\n    2599:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 25a0 <sim_main+0x1a89>\n    25a0:\t89 da                \tmov    %ebx,%edx\n    25a2:\tc1 ea 0c             \tshr    $0xc,%edx\n    25a5:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    25ab:\t89 d2                \tmov    %edx,%edx\n    25ad:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    25b2:\t48 85 c0             \ttest   %rax,%rax\n    25b5:\t74 63                \tje     261a <sim_main+0x1b03>\n    25b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 25be <sim_main+0x1aa7>\n    25be:\t89 da                \tmov    %ebx,%edx\n    25c0:\tc1 ea 0c             \tshr    $0xc,%edx\n    25c3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    25c9:\t89 d2                \tmov    %edx,%edx\n    25cb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    25d0:\t8b 40 08             \tmov    0x8(%rax),%eax\n    25d3:\t89 da                \tmov    %ebx,%edx\n    25d5:\tc1 ea 1b             \tshr    $0x1b,%edx\n    25d8:\t39 d0                \tcmp    %edx,%eax\n    25da:\t75 3e                \tjne    261a <sim_main+0x1b03>\n    25dc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 25e3 <sim_main+0x1acc>\n    25e3:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    25ea:\t48 83 c2 01          \tadd    $0x1,%rdx\n    25ee:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    25f5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 25fc <sim_main+0x1ae5>\n    25fc:\t89 da                \tmov    %ebx,%edx\n    25fe:\tc1 ea 0c             \tshr    $0xc,%edx\n    2601:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2607:\t89 d2                \tmov    %edx,%edx\n    2609:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    260e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2612:\t48 85 c0             \ttest   %rax,%rax\n    2615:\t0f 95 c0             \tsetne  %al\n    2618:\teb 17                \tjmp    2631 <sim_main+0x1b1a>\n    261a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2621 <sim_main+0x1b0a>\n    2621:\t89 de                \tmov    %ebx,%esi\n    2623:\t48 89 c7             \tmov    %rax,%rdi\n    2626:\te8 00 00 00 00       \tcallq  262b <sim_main+0x1b14>\n    262b:\t48 85 c0             \ttest   %rax,%rax\n    262e:\t0f 95 c0             \tsetne  %al\n    2631:\t84 c0                \ttest   %al,%al\n    2633:\t0f 84 9b 00 00 00    \tje     26d4 <sim_main+0x1bbd>\n    2639:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2640 <sim_main+0x1b29>\n    2640:\t89 da                \tmov    %ebx,%edx\n    2642:\tc1 ea 0c             \tshr    $0xc,%edx\n    2645:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    264b:\t89 d2                \tmov    %edx,%edx\n    264d:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2652:\t48 85 c0             \ttest   %rax,%rax\n    2655:\t74 5d                \tje     26b4 <sim_main+0x1b9d>\n    2657:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 265e <sim_main+0x1b47>\n    265e:\t89 da                \tmov    %ebx,%edx\n    2660:\tc1 ea 0c             \tshr    $0xc,%edx\n    2663:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2669:\t89 d2                \tmov    %edx,%edx\n    266b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2670:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2673:\t89 da                \tmov    %ebx,%edx\n    2675:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2678:\t39 d0                \tcmp    %edx,%eax\n    267a:\t75 38                \tjne    26b4 <sim_main+0x1b9d>\n    267c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2683 <sim_main+0x1b6c>\n    2683:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    268a:\t48 83 c2 01          \tadd    $0x1,%rdx\n    268e:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    2695:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 269c <sim_main+0x1b85>\n    269c:\t89 da                \tmov    %ebx,%edx\n    269e:\tc1 ea 0c             \tshr    $0xc,%edx\n    26a1:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    26a7:\t89 d2                \tmov    %edx,%edx\n    26a9:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    26ae:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    26b2:\teb 11                \tjmp    26c5 <sim_main+0x1bae>\n    26b4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 26bb <sim_main+0x1ba4>\n    26bb:\t89 de                \tmov    %ebx,%esi\n    26bd:\t48 89 c7             \tmov    %rax,%rdi\n    26c0:\te8 00 00 00 00       \tcallq  26c5 <sim_main+0x1bae>\n    26c5:\t89 da                \tmov    %ebx,%edx\n    26c7:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    26cd:\t48 01 d0             \tadd    %rdx,%rax\n    26d0:\t8b 00                \tmov    (%rax),%eax\n    26d2:\teb 05                \tjmp    26d9 <sim_main+0x1bc2>\n    26d4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    26d9:\t89 85 cc fe ff ff    \tmov    %eax,-0x134(%rbp)\n    26df:\t83 bd d0 fe ff ff 00 \tcmpl   $0x0,-0x130(%rbp)\n    26e6:\t74 0e                \tje     26f6 <sim_main+0x1bdf>\n    26e8:\t8b 85 d0 fe ff ff    \tmov    -0x130(%rbp),%eax\n    26ee:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    26f1:\te9 84 5f 00 00       \tjmpq   867a <sim_main+0x7b63>\n    26f6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    26fc:\tc1 e8 10             \tshr    $0x10,%eax\n    26ff:\t0f b6 c0             \tmovzbl %al,%eax\n    2702:\t89 c0                \tmov    %eax,%eax\n    2704:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    270b:\t89 c1                \tmov    %eax,%ecx\n    270d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2713:\t0f bf d0             \tmovswl %ax,%edx\n    2716:\t8b 85 d4 fe ff ff    \tmov    -0x12c(%rbp),%eax\n    271c:\t01 d0                \tadd    %edx,%eax\n    271e:\t83 e0 03             \tand    $0x3,%eax\n    2721:\t89 c0                \tmov    %eax,%eax\n    2723:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    272a:\tf7 d0                \tnot    %eax\n    272c:\t21 c1                \tand    %eax,%ecx\n    272e:\t89 ce                \tmov    %ecx,%esi\n    2730:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2736:\t0f bf d0             \tmovswl %ax,%edx\n    2739:\t8b 85 d4 fe ff ff    \tmov    -0x12c(%rbp),%eax\n    273f:\t01 d0                \tadd    %edx,%eax\n    2741:\t83 e0 03             \tand    $0x3,%eax\n    2744:\tc1 e0 03             \tshl    $0x3,%eax\n    2747:\t8b 95 cc fe ff ff    \tmov    -0x134(%rbp),%edx\n    274d:\t89 c1                \tmov    %eax,%ecx\n    274f:\td3 ea                \tshr    %cl,%edx\n    2751:\t89 d1                \tmov    %edx,%ecx\n    2753:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2759:\t0f bf d0             \tmovswl %ax,%edx\n    275c:\t8b 85 d4 fe ff ff    \tmov    -0x12c(%rbp),%eax\n    2762:\t01 d0                \tadd    %edx,%eax\n    2764:\t83 e0 03             \tand    $0x3,%eax\n    2767:\t89 c0                \tmov    %eax,%eax\n    2769:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    2770:\t21 c8                \tand    %ecx,%eax\n    2772:\t09 c6                \tor     %eax,%esi\n    2774:\t89 f2                \tmov    %esi,%edx\n    2776:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    277c:\tc1 e8 10             \tshr    $0x10,%eax\n    277f:\t0f b6 c0             \tmovzbl %al,%eax\n    2782:\t89 c0                \tmov    %eax,%eax\n    2784:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n    278b:\te9 ea 5e 00 00       \tjmpq   867a <sim_main+0x7b63>\n    2790:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2796:\tc1 e8 10             \tshr    $0x10,%eax\n    2799:\t0f b6 c0             \tmovzbl %al,%eax\n    279c:\t89 c0                \tmov    %eax,%eax\n    279e:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    27a5:\t88 85 df fe ff ff    \tmov    %al,-0x121(%rbp)\n    27ab:\tc7 85 d8 fe ff ff 00 \tmovl   $0x0,-0x128(%rbp)\n    27b2:\t00 00 00 \n    27b5:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    27bb:\tc1 e8 18             \tshr    $0x18,%eax\n    27be:\t89 c0                \tmov    %eax,%eax\n    27c0:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    27c7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    27cd:\t98                   \tcwtl   \n    27ce:\t01 d0                \tadd    %edx,%eax\n    27d0:\t89 c3                \tmov    %eax,%ebx\n    27d2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 27d9 <sim_main+0x1cc2>\n    27d9:\t89 da                \tmov    %ebx,%edx\n    27db:\tc1 ea 0c             \tshr    $0xc,%edx\n    27de:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    27e4:\t89 d2                \tmov    %edx,%edx\n    27e6:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    27eb:\t48 85 c0             \ttest   %rax,%rax\n    27ee:\t74 63                \tje     2853 <sim_main+0x1d3c>\n    27f0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 27f7 <sim_main+0x1ce0>\n    27f7:\t89 da                \tmov    %ebx,%edx\n    27f9:\tc1 ea 0c             \tshr    $0xc,%edx\n    27fc:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2802:\t89 d2                \tmov    %edx,%edx\n    2804:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2809:\t8b 40 08             \tmov    0x8(%rax),%eax\n    280c:\t89 da                \tmov    %ebx,%edx\n    280e:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2811:\t39 d0                \tcmp    %edx,%eax\n    2813:\t75 3e                \tjne    2853 <sim_main+0x1d3c>\n    2815:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 281c <sim_main+0x1d05>\n    281c:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2823:\t48 83 c2 01          \tadd    $0x1,%rdx\n    2827:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    282e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2835 <sim_main+0x1d1e>\n    2835:\t89 da                \tmov    %ebx,%edx\n    2837:\tc1 ea 0c             \tshr    $0xc,%edx\n    283a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2840:\t89 d2                \tmov    %edx,%edx\n    2842:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2847:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    284b:\t48 85 c0             \ttest   %rax,%rax\n    284e:\t0f 94 c0             \tsete   %al\n    2851:\teb 17                \tjmp    286a <sim_main+0x1d53>\n    2853:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 285a <sim_main+0x1d43>\n    285a:\t89 de                \tmov    %ebx,%esi\n    285c:\t48 89 c7             \tmov    %rax,%rdi\n    285f:\te8 00 00 00 00       \tcallq  2864 <sim_main+0x1d4d>\n    2864:\t48 85 c0             \ttest   %rax,%rax\n    2867:\t0f 94 c0             \tsete   %al\n    286a:\t84 c0                \ttest   %al,%al\n    286c:\t74 11                \tje     287f <sim_main+0x1d68>\n    286e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2875 <sim_main+0x1d5e>\n    2875:\t89 de                \tmov    %ebx,%esi\n    2877:\t48 89 c7             \tmov    %rax,%rdi\n    287a:\te8 00 00 00 00       \tcallq  287f <sim_main+0x1d68>\n    287f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2886 <sim_main+0x1d6f>\n    2886:\t89 da                \tmov    %ebx,%edx\n    2888:\tc1 ea 0c             \tshr    $0xc,%edx\n    288b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2891:\t89 d2                \tmov    %edx,%edx\n    2893:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2898:\t48 85 c0             \ttest   %rax,%rax\n    289b:\t74 5d                \tje     28fa <sim_main+0x1de3>\n    289d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 28a4 <sim_main+0x1d8d>\n    28a4:\t89 da                \tmov    %ebx,%edx\n    28a6:\tc1 ea 0c             \tshr    $0xc,%edx\n    28a9:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    28af:\t89 d2                \tmov    %edx,%edx\n    28b1:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    28b6:\t8b 40 08             \tmov    0x8(%rax),%eax\n    28b9:\t89 da                \tmov    %ebx,%edx\n    28bb:\tc1 ea 1b             \tshr    $0x1b,%edx\n    28be:\t39 d0                \tcmp    %edx,%eax\n    28c0:\t75 38                \tjne    28fa <sim_main+0x1de3>\n    28c2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 28c9 <sim_main+0x1db2>\n    28c9:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    28d0:\t48 83 c2 01          \tadd    $0x1,%rdx\n    28d4:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    28db:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 28e2 <sim_main+0x1dcb>\n    28e2:\t89 da                \tmov    %ebx,%edx\n    28e4:\tc1 ea 0c             \tshr    $0xc,%edx\n    28e7:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    28ed:\t89 d2                \tmov    %edx,%edx\n    28ef:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    28f4:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    28f8:\teb 11                \tjmp    290b <sim_main+0x1df4>\n    28fa:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2901 <sim_main+0x1dea>\n    2901:\t89 de                \tmov    %ebx,%esi\n    2903:\t48 89 c7             \tmov    %rax,%rdi\n    2906:\te8 00 00 00 00       \tcallq  290b <sim_main+0x1df4>\n    290b:\t89 da                \tmov    %ebx,%edx\n    290d:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    2913:\t48 01 c2             \tadd    %rax,%rdx\n    2916:\t0f b6 85 df fe ff ff \tmovzbl -0x121(%rbp),%eax\n    291d:\t88 02                \tmov    %al,(%rdx)\n    291f:\t83 bd d8 fe ff ff 00 \tcmpl   $0x0,-0x128(%rbp)\n    2926:\t0f 84 17 5d 00 00    \tje     8643 <sim_main+0x7b2c>\n    292c:\t8b 85 d8 fe ff ff    \tmov    -0x128(%rbp),%eax\n    2932:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    2935:\te9 40 5d 00 00       \tjmpq   867a <sim_main+0x7b63>\n    293a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2940:\tc1 e8 10             \tshr    $0x10,%eax\n    2943:\t0f b6 c0             \tmovzbl %al,%eax\n    2946:\t89 c0                \tmov    %eax,%eax\n    2948:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    294f:\t66 89 85 e6 fe ff ff \tmov    %ax,-0x11a(%rbp)\n    2956:\tc7 85 e0 fe ff ff 00 \tmovl   $0x0,-0x120(%rbp)\n    295d:\t00 00 00 \n    2960:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2966:\tc1 e8 18             \tshr    $0x18,%eax\n    2969:\t89 c0                \tmov    %eax,%eax\n    296b:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    2972:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2978:\t98                   \tcwtl   \n    2979:\t01 d0                \tadd    %edx,%eax\n    297b:\t89 c3                \tmov    %eax,%ebx\n    297d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2984 <sim_main+0x1e6d>\n    2984:\t89 da                \tmov    %ebx,%edx\n    2986:\tc1 ea 0c             \tshr    $0xc,%edx\n    2989:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    298f:\t89 d2                \tmov    %edx,%edx\n    2991:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2996:\t48 85 c0             \ttest   %rax,%rax\n    2999:\t74 63                \tje     29fe <sim_main+0x1ee7>\n    299b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 29a2 <sim_main+0x1e8b>\n    29a2:\t89 da                \tmov    %ebx,%edx\n    29a4:\tc1 ea 0c             \tshr    $0xc,%edx\n    29a7:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    29ad:\t89 d2                \tmov    %edx,%edx\n    29af:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    29b4:\t8b 40 08             \tmov    0x8(%rax),%eax\n    29b7:\t89 da                \tmov    %ebx,%edx\n    29b9:\tc1 ea 1b             \tshr    $0x1b,%edx\n    29bc:\t39 d0                \tcmp    %edx,%eax\n    29be:\t75 3e                \tjne    29fe <sim_main+0x1ee7>\n    29c0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 29c7 <sim_main+0x1eb0>\n    29c7:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    29ce:\t48 83 c2 01          \tadd    $0x1,%rdx\n    29d2:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    29d9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 29e0 <sim_main+0x1ec9>\n    29e0:\t89 da                \tmov    %ebx,%edx\n    29e2:\tc1 ea 0c             \tshr    $0xc,%edx\n    29e5:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    29eb:\t89 d2                \tmov    %edx,%edx\n    29ed:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    29f2:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    29f6:\t48 85 c0             \ttest   %rax,%rax\n    29f9:\t0f 94 c0             \tsete   %al\n    29fc:\teb 17                \tjmp    2a15 <sim_main+0x1efe>\n    29fe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2a05 <sim_main+0x1eee>\n    2a05:\t89 de                \tmov    %ebx,%esi\n    2a07:\t48 89 c7             \tmov    %rax,%rdi\n    2a0a:\te8 00 00 00 00       \tcallq  2a0f <sim_main+0x1ef8>\n    2a0f:\t48 85 c0             \ttest   %rax,%rax\n    2a12:\t0f 94 c0             \tsete   %al\n    2a15:\t84 c0                \ttest   %al,%al\n    2a17:\t74 11                \tje     2a2a <sim_main+0x1f13>\n    2a19:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2a20 <sim_main+0x1f09>\n    2a20:\t89 de                \tmov    %ebx,%esi\n    2a22:\t48 89 c7             \tmov    %rax,%rdi\n    2a25:\te8 00 00 00 00       \tcallq  2a2a <sim_main+0x1f13>\n    2a2a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2a31 <sim_main+0x1f1a>\n    2a31:\t89 da                \tmov    %ebx,%edx\n    2a33:\tc1 ea 0c             \tshr    $0xc,%edx\n    2a36:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2a3c:\t89 d2                \tmov    %edx,%edx\n    2a3e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2a43:\t48 85 c0             \ttest   %rax,%rax\n    2a46:\t74 5d                \tje     2aa5 <sim_main+0x1f8e>\n    2a48:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2a4f <sim_main+0x1f38>\n    2a4f:\t89 da                \tmov    %ebx,%edx\n    2a51:\tc1 ea 0c             \tshr    $0xc,%edx\n    2a54:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2a5a:\t89 d2                \tmov    %edx,%edx\n    2a5c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2a61:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2a64:\t89 da                \tmov    %ebx,%edx\n    2a66:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2a69:\t39 d0                \tcmp    %edx,%eax\n    2a6b:\t75 38                \tjne    2aa5 <sim_main+0x1f8e>\n    2a6d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2a74 <sim_main+0x1f5d>\n    2a74:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2a7b:\t48 83 c2 01          \tadd    $0x1,%rdx\n    2a7f:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    2a86:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2a8d <sim_main+0x1f76>\n    2a8d:\t89 da                \tmov    %ebx,%edx\n    2a8f:\tc1 ea 0c             \tshr    $0xc,%edx\n    2a92:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2a98:\t89 d2                \tmov    %edx,%edx\n    2a9a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2a9f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2aa3:\teb 11                \tjmp    2ab6 <sim_main+0x1f9f>\n    2aa5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2aac <sim_main+0x1f95>\n    2aac:\t89 de                \tmov    %ebx,%esi\n    2aae:\t48 89 c7             \tmov    %rax,%rdi\n    2ab1:\te8 00 00 00 00       \tcallq  2ab6 <sim_main+0x1f9f>\n    2ab6:\t89 da                \tmov    %ebx,%edx\n    2ab8:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    2abe:\t48 01 c2             \tadd    %rax,%rdx\n    2ac1:\t0f b7 85 e6 fe ff ff \tmovzwl -0x11a(%rbp),%eax\n    2ac8:\t66 89 02             \tmov    %ax,(%rdx)\n    2acb:\t83 bd e0 fe ff ff 00 \tcmpl   $0x0,-0x120(%rbp)\n    2ad2:\t0f 84 6e 5b 00 00    \tje     8646 <sim_main+0x7b2f>\n    2ad8:\t8b 85 e0 fe ff ff    \tmov    -0x120(%rbp),%eax\n    2ade:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    2ae1:\te9 94 5b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    2ae6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2aec:\tc1 e8 10             \tshr    $0x10,%eax\n    2aef:\t0f b6 c0             \tmovzbl %al,%eax\n    2af2:\t89 c0                \tmov    %eax,%eax\n    2af4:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    2afb:\t89 85 ec fe ff ff    \tmov    %eax,-0x114(%rbp)\n    2b01:\tc7 85 e8 fe ff ff 00 \tmovl   $0x0,-0x118(%rbp)\n    2b08:\t00 00 00 \n    2b0b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2b11:\tc1 e8 18             \tshr    $0x18,%eax\n    2b14:\t89 c0                \tmov    %eax,%eax\n    2b16:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    2b1d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2b23:\t98                   \tcwtl   \n    2b24:\t01 d0                \tadd    %edx,%eax\n    2b26:\t89 c3                \tmov    %eax,%ebx\n    2b28:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b2f <sim_main+0x2018>\n    2b2f:\t89 da                \tmov    %ebx,%edx\n    2b31:\tc1 ea 0c             \tshr    $0xc,%edx\n    2b34:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2b3a:\t89 d2                \tmov    %edx,%edx\n    2b3c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2b41:\t48 85 c0             \ttest   %rax,%rax\n    2b44:\t74 63                \tje     2ba9 <sim_main+0x2092>\n    2b46:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b4d <sim_main+0x2036>\n    2b4d:\t89 da                \tmov    %ebx,%edx\n    2b4f:\tc1 ea 0c             \tshr    $0xc,%edx\n    2b52:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2b58:\t89 d2                \tmov    %edx,%edx\n    2b5a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2b5f:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2b62:\t89 da                \tmov    %ebx,%edx\n    2b64:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2b67:\t39 d0                \tcmp    %edx,%eax\n    2b69:\t75 3e                \tjne    2ba9 <sim_main+0x2092>\n    2b6b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b72 <sim_main+0x205b>\n    2b72:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2b79:\t48 83 c2 01          \tadd    $0x1,%rdx\n    2b7d:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    2b84:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2b8b <sim_main+0x2074>\n    2b8b:\t89 da                \tmov    %ebx,%edx\n    2b8d:\tc1 ea 0c             \tshr    $0xc,%edx\n    2b90:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2b96:\t89 d2                \tmov    %edx,%edx\n    2b98:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2b9d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2ba1:\t48 85 c0             \ttest   %rax,%rax\n    2ba4:\t0f 94 c0             \tsete   %al\n    2ba7:\teb 17                \tjmp    2bc0 <sim_main+0x20a9>\n    2ba9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2bb0 <sim_main+0x2099>\n    2bb0:\t89 de                \tmov    %ebx,%esi\n    2bb2:\t48 89 c7             \tmov    %rax,%rdi\n    2bb5:\te8 00 00 00 00       \tcallq  2bba <sim_main+0x20a3>\n    2bba:\t48 85 c0             \ttest   %rax,%rax\n    2bbd:\t0f 94 c0             \tsete   %al\n    2bc0:\t84 c0                \ttest   %al,%al\n    2bc2:\t74 11                \tje     2bd5 <sim_main+0x20be>\n    2bc4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2bcb <sim_main+0x20b4>\n    2bcb:\t89 de                \tmov    %ebx,%esi\n    2bcd:\t48 89 c7             \tmov    %rax,%rdi\n    2bd0:\te8 00 00 00 00       \tcallq  2bd5 <sim_main+0x20be>\n    2bd5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2bdc <sim_main+0x20c5>\n    2bdc:\t89 da                \tmov    %ebx,%edx\n    2bde:\tc1 ea 0c             \tshr    $0xc,%edx\n    2be1:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2be7:\t89 d2                \tmov    %edx,%edx\n    2be9:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2bee:\t48 85 c0             \ttest   %rax,%rax\n    2bf1:\t74 5d                \tje     2c50 <sim_main+0x2139>\n    2bf3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2bfa <sim_main+0x20e3>\n    2bfa:\t89 da                \tmov    %ebx,%edx\n    2bfc:\tc1 ea 0c             \tshr    $0xc,%edx\n    2bff:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2c05:\t89 d2                \tmov    %edx,%edx\n    2c07:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2c0c:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2c0f:\t89 da                \tmov    %ebx,%edx\n    2c11:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2c14:\t39 d0                \tcmp    %edx,%eax\n    2c16:\t75 38                \tjne    2c50 <sim_main+0x2139>\n    2c18:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2c1f <sim_main+0x2108>\n    2c1f:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2c26:\t48 83 c2 01          \tadd    $0x1,%rdx\n    2c2a:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    2c31:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2c38 <sim_main+0x2121>\n    2c38:\t89 da                \tmov    %ebx,%edx\n    2c3a:\tc1 ea 0c             \tshr    $0xc,%edx\n    2c3d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2c43:\t89 d2                \tmov    %edx,%edx\n    2c45:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2c4a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2c4e:\teb 11                \tjmp    2c61 <sim_main+0x214a>\n    2c50:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2c57 <sim_main+0x2140>\n    2c57:\t89 de                \tmov    %ebx,%esi\n    2c59:\t48 89 c7             \tmov    %rax,%rdi\n    2c5c:\te8 00 00 00 00       \tcallq  2c61 <sim_main+0x214a>\n    2c61:\t89 da                \tmov    %ebx,%edx\n    2c63:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    2c69:\t48 01 c2             \tadd    %rax,%rdx\n    2c6c:\t8b 85 ec fe ff ff    \tmov    -0x114(%rbp),%eax\n    2c72:\t89 02                \tmov    %eax,(%rdx)\n    2c74:\t83 bd e8 fe ff ff 00 \tcmpl   $0x0,-0x118(%rbp)\n    2c7b:\t0f 84 c8 59 00 00    \tje     8649 <sim_main+0x7b32>\n    2c81:\t8b 85 e8 fe ff ff    \tmov    -0x118(%rbp),%eax\n    2c87:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    2c8a:\te9 eb 59 00 00       \tjmpq   867a <sim_main+0x7b63>\n    2c8f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2c95:\t25 00 00 01 00       \tand    $0x10000,%eax\n    2c9a:\t85 c0                \ttest   %eax,%eax\n    2c9c:\t74 0c                \tje     2caa <sim_main+0x2193>\n    2c9e:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    2ca5:\te9 d0 59 00 00       \tjmpq   867a <sim_main+0x7b63>\n    2caa:\tc7 85 f0 fe ff ff 00 \tmovl   $0x0,-0x110(%rbp)\n    2cb1:\t00 00 00 \n    2cb4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2cba:\tc1 e8 18             \tshr    $0x18,%eax\n    2cbd:\t89 c0                \tmov    %eax,%eax\n    2cbf:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    2cc6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2ccc:\t98                   \tcwtl   \n    2ccd:\t01 d0                \tadd    %edx,%eax\n    2ccf:\t89 c3                \tmov    %eax,%ebx\n    2cd1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2cd8 <sim_main+0x21c1>\n    2cd8:\t89 da                \tmov    %ebx,%edx\n    2cda:\tc1 ea 0c             \tshr    $0xc,%edx\n    2cdd:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2ce3:\t89 d2                \tmov    %edx,%edx\n    2ce5:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2cea:\t48 85 c0             \ttest   %rax,%rax\n    2ced:\t74 63                \tje     2d52 <sim_main+0x223b>\n    2cef:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2cf6 <sim_main+0x21df>\n    2cf6:\t89 da                \tmov    %ebx,%edx\n    2cf8:\tc1 ea 0c             \tshr    $0xc,%edx\n    2cfb:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2d01:\t89 d2                \tmov    %edx,%edx\n    2d03:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2d08:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2d0b:\t89 da                \tmov    %ebx,%edx\n    2d0d:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2d10:\t39 d0                \tcmp    %edx,%eax\n    2d12:\t75 3e                \tjne    2d52 <sim_main+0x223b>\n    2d14:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2d1b <sim_main+0x2204>\n    2d1b:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2d22:\t48 83 c2 01          \tadd    $0x1,%rdx\n    2d26:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    2d2d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2d34 <sim_main+0x221d>\n    2d34:\t89 da                \tmov    %ebx,%edx\n    2d36:\tc1 ea 0c             \tshr    $0xc,%edx\n    2d39:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2d3f:\t89 d2                \tmov    %edx,%edx\n    2d41:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2d46:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2d4a:\t48 85 c0             \ttest   %rax,%rax\n    2d4d:\t0f 94 c0             \tsete   %al\n    2d50:\teb 17                \tjmp    2d69 <sim_main+0x2252>\n    2d52:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2d59 <sim_main+0x2242>\n    2d59:\t89 de                \tmov    %ebx,%esi\n    2d5b:\t48 89 c7             \tmov    %rax,%rdi\n    2d5e:\te8 00 00 00 00       \tcallq  2d63 <sim_main+0x224c>\n    2d63:\t48 85 c0             \ttest   %rax,%rax\n    2d66:\t0f 94 c0             \tsete   %al\n    2d69:\t84 c0                \ttest   %al,%al\n    2d6b:\t74 11                \tje     2d7e <sim_main+0x2267>\n    2d6d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2d74 <sim_main+0x225d>\n    2d74:\t89 de                \tmov    %ebx,%esi\n    2d76:\t48 89 c7             \tmov    %rax,%rdi\n    2d79:\te8 00 00 00 00       \tcallq  2d7e <sim_main+0x2267>\n    2d7e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2d84:\tc1 e8 10             \tshr    $0x10,%eax\n    2d87:\t0f b6 c0             \tmovzbl %al,%eax\n    2d8a:\t89 c0                \tmov    %eax,%eax\n    2d8c:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    2d93:\t00 \n    2d94:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2d9b <sim_main+0x2284>\n    2d9b:\t89 da                \tmov    %ebx,%edx\n    2d9d:\tc1 ea 0c             \tshr    $0xc,%edx\n    2da0:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2da6:\t89 d2                \tmov    %edx,%edx\n    2da8:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2dad:\t48 85 c0             \ttest   %rax,%rax\n    2db0:\t74 5d                \tje     2e0f <sim_main+0x22f8>\n    2db2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2db9 <sim_main+0x22a2>\n    2db9:\t89 da                \tmov    %ebx,%edx\n    2dbb:\tc1 ea 0c             \tshr    $0xc,%edx\n    2dbe:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2dc4:\t89 d2                \tmov    %edx,%edx\n    2dc6:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2dcb:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2dce:\t89 da                \tmov    %ebx,%edx\n    2dd0:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2dd3:\t39 d0                \tcmp    %edx,%eax\n    2dd5:\t75 38                \tjne    2e0f <sim_main+0x22f8>\n    2dd7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2dde <sim_main+0x22c7>\n    2dde:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2de5:\t48 83 c2 01          \tadd    $0x1,%rdx\n    2de9:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    2df0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2df7 <sim_main+0x22e0>\n    2df7:\t89 da                \tmov    %ebx,%edx\n    2df9:\tc1 ea 0c             \tshr    $0xc,%edx\n    2dfc:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2e02:\t89 d2                \tmov    %edx,%edx\n    2e04:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2e09:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2e0d:\teb 11                \tjmp    2e20 <sim_main+0x2309>\n    2e0f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2e16 <sim_main+0x22ff>\n    2e16:\t89 de                \tmov    %ebx,%esi\n    2e18:\t48 89 c7             \tmov    %rax,%rdi\n    2e1b:\te8 00 00 00 00       \tcallq  2e20 <sim_main+0x2309>\n    2e20:\t89 da                \tmov    %ebx,%edx\n    2e22:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    2e28:\t48 01 d0             \tadd    %rdx,%rax\n    2e2b:\t44 89 e2             \tmov    %r12d,%edx\n    2e2e:\t89 10                \tmov    %edx,(%rax)\n    2e30:\t83 bd f0 fe ff ff 00 \tcmpl   $0x0,-0x110(%rbp)\n    2e37:\t74 0e                \tje     2e47 <sim_main+0x2330>\n    2e39:\t8b 85 f0 fe ff ff    \tmov    -0x110(%rbp),%eax\n    2e3f:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    2e42:\te9 33 58 00 00       \tjmpq   867a <sim_main+0x7b63>\n    2e47:\tc7 85 f0 fe ff ff 00 \tmovl   $0x0,-0x110(%rbp)\n    2e4e:\t00 00 00 \n    2e51:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2e57:\tc1 e8 18             \tshr    $0x18,%eax\n    2e5a:\t89 c0                \tmov    %eax,%eax\n    2e5c:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    2e63:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2e69:\t98                   \tcwtl   \n    2e6a:\t01 d0                \tadd    %edx,%eax\n    2e6c:\t83 c0 04             \tadd    $0x4,%eax\n    2e6f:\t89 c3                \tmov    %eax,%ebx\n    2e71:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2e78 <sim_main+0x2361>\n    2e78:\t89 da                \tmov    %ebx,%edx\n    2e7a:\tc1 ea 0c             \tshr    $0xc,%edx\n    2e7d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2e83:\t89 d2                \tmov    %edx,%edx\n    2e85:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2e8a:\t48 85 c0             \ttest   %rax,%rax\n    2e8d:\t74 63                \tje     2ef2 <sim_main+0x23db>\n    2e8f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2e96 <sim_main+0x237f>\n    2e96:\t89 da                \tmov    %ebx,%edx\n    2e98:\tc1 ea 0c             \tshr    $0xc,%edx\n    2e9b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2ea1:\t89 d2                \tmov    %edx,%edx\n    2ea3:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2ea8:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2eab:\t89 da                \tmov    %ebx,%edx\n    2ead:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2eb0:\t39 d0                \tcmp    %edx,%eax\n    2eb2:\t75 3e                \tjne    2ef2 <sim_main+0x23db>\n    2eb4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2ebb <sim_main+0x23a4>\n    2ebb:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2ec2:\t48 83 c2 01          \tadd    $0x1,%rdx\n    2ec6:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    2ecd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2ed4 <sim_main+0x23bd>\n    2ed4:\t89 da                \tmov    %ebx,%edx\n    2ed6:\tc1 ea 0c             \tshr    $0xc,%edx\n    2ed9:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2edf:\t89 d2                \tmov    %edx,%edx\n    2ee1:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2ee6:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2eea:\t48 85 c0             \ttest   %rax,%rax\n    2eed:\t0f 94 c0             \tsete   %al\n    2ef0:\teb 17                \tjmp    2f09 <sim_main+0x23f2>\n    2ef2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2ef9 <sim_main+0x23e2>\n    2ef9:\t89 de                \tmov    %ebx,%esi\n    2efb:\t48 89 c7             \tmov    %rax,%rdi\n    2efe:\te8 00 00 00 00       \tcallq  2f03 <sim_main+0x23ec>\n    2f03:\t48 85 c0             \ttest   %rax,%rax\n    2f06:\t0f 94 c0             \tsete   %al\n    2f09:\t84 c0                \ttest   %al,%al\n    2f0b:\t74 11                \tje     2f1e <sim_main+0x2407>\n    2f0d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2f14 <sim_main+0x23fd>\n    2f14:\t89 de                \tmov    %ebx,%esi\n    2f16:\t48 89 c7             \tmov    %rax,%rdi\n    2f19:\te8 00 00 00 00       \tcallq  2f1e <sim_main+0x2407>\n    2f1e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2f24:\tc1 e8 10             \tshr    $0x10,%eax\n    2f27:\t0f b6 c0             \tmovzbl %al,%eax\n    2f2a:\t83 c0 01             \tadd    $0x1,%eax\n    2f2d:\t89 c0                \tmov    %eax,%eax\n    2f2f:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    2f36:\t00 \n    2f37:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2f3e <sim_main+0x2427>\n    2f3e:\t89 da                \tmov    %ebx,%edx\n    2f40:\tc1 ea 0c             \tshr    $0xc,%edx\n    2f43:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2f49:\t89 d2                \tmov    %edx,%edx\n    2f4b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2f50:\t48 85 c0             \ttest   %rax,%rax\n    2f53:\t74 5d                \tje     2fb2 <sim_main+0x249b>\n    2f55:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2f5c <sim_main+0x2445>\n    2f5c:\t89 da                \tmov    %ebx,%edx\n    2f5e:\tc1 ea 0c             \tshr    $0xc,%edx\n    2f61:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2f67:\t89 d2                \tmov    %edx,%edx\n    2f69:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2f6e:\t8b 40 08             \tmov    0x8(%rax),%eax\n    2f71:\t89 da                \tmov    %ebx,%edx\n    2f73:\tc1 ea 1b             \tshr    $0x1b,%edx\n    2f76:\t39 d0                \tcmp    %edx,%eax\n    2f78:\t75 38                \tjne    2fb2 <sim_main+0x249b>\n    2f7a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2f81 <sim_main+0x246a>\n    2f81:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    2f88:\t48 83 c2 01          \tadd    $0x1,%rdx\n    2f8c:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    2f93:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2f9a <sim_main+0x2483>\n    2f9a:\t89 da                \tmov    %ebx,%edx\n    2f9c:\tc1 ea 0c             \tshr    $0xc,%edx\n    2f9f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    2fa5:\t89 d2                \tmov    %edx,%edx\n    2fa7:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    2fac:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    2fb0:\teb 11                \tjmp    2fc3 <sim_main+0x24ac>\n    2fb2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2fb9 <sim_main+0x24a2>\n    2fb9:\t89 de                \tmov    %ebx,%esi\n    2fbb:\t48 89 c7             \tmov    %rax,%rdi\n    2fbe:\te8 00 00 00 00       \tcallq  2fc3 <sim_main+0x24ac>\n    2fc3:\t89 da                \tmov    %ebx,%edx\n    2fc5:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    2fcb:\t48 01 d0             \tadd    %rdx,%rax\n    2fce:\t44 89 e2             \tmov    %r12d,%edx\n    2fd1:\t89 10                \tmov    %edx,(%rax)\n    2fd3:\t83 bd f0 fe ff ff 00 \tcmpl   $0x0,-0x110(%rbp)\n    2fda:\t0f 84 6c 56 00 00    \tje     864c <sim_main+0x7b35>\n    2fe0:\t8b 85 f0 fe ff ff    \tmov    -0x110(%rbp),%eax\n    2fe6:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    2fe9:\te9 8c 56 00 00       \tjmpq   867a <sim_main+0x7b63>\n    2fee:\tc7 85 f4 fe ff ff 00 \tmovl   $0x0,-0x10c(%rbp)\n    2ff5:\t00 00 00 \n    2ff8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    2ffe:\tc1 e8 18             \tshr    $0x18,%eax\n    3001:\t89 c0                \tmov    %eax,%eax\n    3003:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    300a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3010:\t98                   \tcwtl   \n    3011:\t01 d0                \tadd    %edx,%eax\n    3013:\t89 c3                \tmov    %eax,%ebx\n    3015:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 301c <sim_main+0x2505>\n    301c:\t89 da                \tmov    %ebx,%edx\n    301e:\tc1 ea 0c             \tshr    $0xc,%edx\n    3021:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3027:\t89 d2                \tmov    %edx,%edx\n    3029:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    302e:\t48 85 c0             \ttest   %rax,%rax\n    3031:\t74 63                \tje     3096 <sim_main+0x257f>\n    3033:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 303a <sim_main+0x2523>\n    303a:\t89 da                \tmov    %ebx,%edx\n    303c:\tc1 ea 0c             \tshr    $0xc,%edx\n    303f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3045:\t89 d2                \tmov    %edx,%edx\n    3047:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    304c:\t8b 40 08             \tmov    0x8(%rax),%eax\n    304f:\t89 da                \tmov    %ebx,%edx\n    3051:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3054:\t39 d0                \tcmp    %edx,%eax\n    3056:\t75 3e                \tjne    3096 <sim_main+0x257f>\n    3058:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 305f <sim_main+0x2548>\n    305f:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3066:\t48 83 c2 01          \tadd    $0x1,%rdx\n    306a:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3071:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3078 <sim_main+0x2561>\n    3078:\t89 da                \tmov    %ebx,%edx\n    307a:\tc1 ea 0c             \tshr    $0xc,%edx\n    307d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3083:\t89 d2                \tmov    %edx,%edx\n    3085:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    308a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    308e:\t48 85 c0             \ttest   %rax,%rax\n    3091:\t0f 94 c0             \tsete   %al\n    3094:\teb 17                \tjmp    30ad <sim_main+0x2596>\n    3096:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 309d <sim_main+0x2586>\n    309d:\t89 de                \tmov    %ebx,%esi\n    309f:\t48 89 c7             \tmov    %rax,%rdi\n    30a2:\te8 00 00 00 00       \tcallq  30a7 <sim_main+0x2590>\n    30a7:\t48 85 c0             \ttest   %rax,%rax\n    30aa:\t0f 94 c0             \tsete   %al\n    30ad:\t84 c0                \ttest   %al,%al\n    30af:\t74 11                \tje     30c2 <sim_main+0x25ab>\n    30b1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 30b8 <sim_main+0x25a1>\n    30b8:\t89 de                \tmov    %ebx,%esi\n    30ba:\t48 89 c7             \tmov    %rax,%rdi\n    30bd:\te8 00 00 00 00       \tcallq  30c2 <sim_main+0x25ab>\n    30c2:\t44 8b 25 00 00 00 00 \tmov    0x0(%rip),%r12d        # 30c9 <sim_main+0x25b2>\n    30c9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 30d0 <sim_main+0x25b9>\n    30d0:\t89 da                \tmov    %ebx,%edx\n    30d2:\tc1 ea 0c             \tshr    $0xc,%edx\n    30d5:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    30db:\t89 d2                \tmov    %edx,%edx\n    30dd:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    30e2:\t48 85 c0             \ttest   %rax,%rax\n    30e5:\t74 5d                \tje     3144 <sim_main+0x262d>\n    30e7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 30ee <sim_main+0x25d7>\n    30ee:\t89 da                \tmov    %ebx,%edx\n    30f0:\tc1 ea 0c             \tshr    $0xc,%edx\n    30f3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    30f9:\t89 d2                \tmov    %edx,%edx\n    30fb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3100:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3103:\t89 da                \tmov    %ebx,%edx\n    3105:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3108:\t39 d0                \tcmp    %edx,%eax\n    310a:\t75 38                \tjne    3144 <sim_main+0x262d>\n    310c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3113 <sim_main+0x25fc>\n    3113:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    311a:\t48 83 c2 01          \tadd    $0x1,%rdx\n    311e:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3125:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 312c <sim_main+0x2615>\n    312c:\t89 da                \tmov    %ebx,%edx\n    312e:\tc1 ea 0c             \tshr    $0xc,%edx\n    3131:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3137:\t89 d2                \tmov    %edx,%edx\n    3139:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    313e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3142:\teb 11                \tjmp    3155 <sim_main+0x263e>\n    3144:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 314b <sim_main+0x2634>\n    314b:\t89 de                \tmov    %ebx,%esi\n    314d:\t48 89 c7             \tmov    %rax,%rdi\n    3150:\te8 00 00 00 00       \tcallq  3155 <sim_main+0x263e>\n    3155:\t89 da                \tmov    %ebx,%edx\n    3157:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    315d:\t48 01 d0             \tadd    %rdx,%rax\n    3160:\t44 89 e2             \tmov    %r12d,%edx\n    3163:\t89 10                \tmov    %edx,(%rax)\n    3165:\t83 bd f4 fe ff ff 00 \tcmpl   $0x0,-0x10c(%rbp)\n    316c:\t74 0e                \tje     317c <sim_main+0x2665>\n    316e:\t8b 85 f4 fe ff ff    \tmov    -0x10c(%rbp),%eax\n    3174:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    3177:\te9 fe 54 00 00       \tjmpq   867a <sim_main+0x7b63>\n    317c:\tc7 85 f4 fe ff ff 00 \tmovl   $0x0,-0x10c(%rbp)\n    3183:\t00 00 00 \n    3186:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    318c:\tc1 e8 18             \tshr    $0x18,%eax\n    318f:\t89 c0                \tmov    %eax,%eax\n    3191:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    3198:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    319e:\t98                   \tcwtl   \n    319f:\t01 d0                \tadd    %edx,%eax\n    31a1:\t83 c0 04             \tadd    $0x4,%eax\n    31a4:\t89 c3                \tmov    %eax,%ebx\n    31a6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 31ad <sim_main+0x2696>\n    31ad:\t89 da                \tmov    %ebx,%edx\n    31af:\tc1 ea 0c             \tshr    $0xc,%edx\n    31b2:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    31b8:\t89 d2                \tmov    %edx,%edx\n    31ba:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    31bf:\t48 85 c0             \ttest   %rax,%rax\n    31c2:\t74 63                \tje     3227 <sim_main+0x2710>\n    31c4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 31cb <sim_main+0x26b4>\n    31cb:\t89 da                \tmov    %ebx,%edx\n    31cd:\tc1 ea 0c             \tshr    $0xc,%edx\n    31d0:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    31d6:\t89 d2                \tmov    %edx,%edx\n    31d8:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    31dd:\t8b 40 08             \tmov    0x8(%rax),%eax\n    31e0:\t89 da                \tmov    %ebx,%edx\n    31e2:\tc1 ea 1b             \tshr    $0x1b,%edx\n    31e5:\t39 d0                \tcmp    %edx,%eax\n    31e7:\t75 3e                \tjne    3227 <sim_main+0x2710>\n    31e9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 31f0 <sim_main+0x26d9>\n    31f0:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    31f7:\t48 83 c2 01          \tadd    $0x1,%rdx\n    31fb:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3202:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3209 <sim_main+0x26f2>\n    3209:\t89 da                \tmov    %ebx,%edx\n    320b:\tc1 ea 0c             \tshr    $0xc,%edx\n    320e:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3214:\t89 d2                \tmov    %edx,%edx\n    3216:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    321b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    321f:\t48 85 c0             \ttest   %rax,%rax\n    3222:\t0f 94 c0             \tsete   %al\n    3225:\teb 17                \tjmp    323e <sim_main+0x2727>\n    3227:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 322e <sim_main+0x2717>\n    322e:\t89 de                \tmov    %ebx,%esi\n    3230:\t48 89 c7             \tmov    %rax,%rdi\n    3233:\te8 00 00 00 00       \tcallq  3238 <sim_main+0x2721>\n    3238:\t48 85 c0             \ttest   %rax,%rax\n    323b:\t0f 94 c0             \tsete   %al\n    323e:\t84 c0                \ttest   %al,%al\n    3240:\t74 11                \tje     3253 <sim_main+0x273c>\n    3242:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3249 <sim_main+0x2732>\n    3249:\t89 de                \tmov    %ebx,%esi\n    324b:\t48 89 c7             \tmov    %rax,%rdi\n    324e:\te8 00 00 00 00       \tcallq  3253 <sim_main+0x273c>\n    3253:\t44 8b 25 00 00 00 00 \tmov    0x0(%rip),%r12d        # 325a <sim_main+0x2743>\n    325a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3261 <sim_main+0x274a>\n    3261:\t89 da                \tmov    %ebx,%edx\n    3263:\tc1 ea 0c             \tshr    $0xc,%edx\n    3266:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    326c:\t89 d2                \tmov    %edx,%edx\n    326e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3273:\t48 85 c0             \ttest   %rax,%rax\n    3276:\t74 5d                \tje     32d5 <sim_main+0x27be>\n    3278:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 327f <sim_main+0x2768>\n    327f:\t89 da                \tmov    %ebx,%edx\n    3281:\tc1 ea 0c             \tshr    $0xc,%edx\n    3284:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    328a:\t89 d2                \tmov    %edx,%edx\n    328c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3291:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3294:\t89 da                \tmov    %ebx,%edx\n    3296:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3299:\t39 d0                \tcmp    %edx,%eax\n    329b:\t75 38                \tjne    32d5 <sim_main+0x27be>\n    329d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 32a4 <sim_main+0x278d>\n    32a4:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    32ab:\t48 83 c2 01          \tadd    $0x1,%rdx\n    32af:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    32b6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 32bd <sim_main+0x27a6>\n    32bd:\t89 da                \tmov    %ebx,%edx\n    32bf:\tc1 ea 0c             \tshr    $0xc,%edx\n    32c2:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    32c8:\t89 d2                \tmov    %edx,%edx\n    32ca:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    32cf:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    32d3:\teb 11                \tjmp    32e6 <sim_main+0x27cf>\n    32d5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 32dc <sim_main+0x27c5>\n    32dc:\t89 de                \tmov    %ebx,%esi\n    32de:\t48 89 c7             \tmov    %rax,%rdi\n    32e1:\te8 00 00 00 00       \tcallq  32e6 <sim_main+0x27cf>\n    32e6:\t89 da                \tmov    %ebx,%edx\n    32e8:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    32ee:\t48 01 d0             \tadd    %rdx,%rax\n    32f1:\t44 89 e2             \tmov    %r12d,%edx\n    32f4:\t89 10                \tmov    %edx,(%rax)\n    32f6:\t83 bd f4 fe ff ff 00 \tcmpl   $0x0,-0x10c(%rbp)\n    32fd:\t0f 84 4c 53 00 00    \tje     864f <sim_main+0x7b38>\n    3303:\t8b 85 f4 fe ff ff    \tmov    -0x10c(%rbp),%eax\n    3309:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    330c:\te9 69 53 00 00       \tjmpq   867a <sim_main+0x7b63>\n    3311:\tc7 85 f8 fe ff ff 00 \tmovl   $0x0,-0x108(%rbp)\n    3318:\t00 00 00 \n    331b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3321:\tc1 e8 18             \tshr    $0x18,%eax\n    3324:\t89 c0                \tmov    %eax,%eax\n    3326:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    332d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3333:\t98                   \tcwtl   \n    3334:\t01 d0                \tadd    %edx,%eax\n    3336:\t89 c3                \tmov    %eax,%ebx\n    3338:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 333f <sim_main+0x2828>\n    333f:\t89 da                \tmov    %ebx,%edx\n    3341:\tc1 ea 0c             \tshr    $0xc,%edx\n    3344:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    334a:\t89 d2                \tmov    %edx,%edx\n    334c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3351:\t48 85 c0             \ttest   %rax,%rax\n    3354:\t74 63                \tje     33b9 <sim_main+0x28a2>\n    3356:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 335d <sim_main+0x2846>\n    335d:\t89 da                \tmov    %ebx,%edx\n    335f:\tc1 ea 0c             \tshr    $0xc,%edx\n    3362:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3368:\t89 d2                \tmov    %edx,%edx\n    336a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    336f:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3372:\t89 da                \tmov    %ebx,%edx\n    3374:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3377:\t39 d0                \tcmp    %edx,%eax\n    3379:\t75 3e                \tjne    33b9 <sim_main+0x28a2>\n    337b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3382 <sim_main+0x286b>\n    3382:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3389:\t48 83 c2 01          \tadd    $0x1,%rdx\n    338d:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3394:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 339b <sim_main+0x2884>\n    339b:\t89 da                \tmov    %ebx,%edx\n    339d:\tc1 ea 0c             \tshr    $0xc,%edx\n    33a0:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    33a6:\t89 d2                \tmov    %edx,%edx\n    33a8:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    33ad:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    33b1:\t48 85 c0             \ttest   %rax,%rax\n    33b4:\t0f 94 c0             \tsete   %al\n    33b7:\teb 17                \tjmp    33d0 <sim_main+0x28b9>\n    33b9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 33c0 <sim_main+0x28a9>\n    33c0:\t89 de                \tmov    %ebx,%esi\n    33c2:\t48 89 c7             \tmov    %rax,%rdi\n    33c5:\te8 00 00 00 00       \tcallq  33ca <sim_main+0x28b3>\n    33ca:\t48 85 c0             \ttest   %rax,%rax\n    33cd:\t0f 94 c0             \tsete   %al\n    33d0:\t84 c0                \ttest   %al,%al\n    33d2:\t74 11                \tje     33e5 <sim_main+0x28ce>\n    33d4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 33db <sim_main+0x28c4>\n    33db:\t89 de                \tmov    %ebx,%esi\n    33dd:\t48 89 c7             \tmov    %rax,%rdi\n    33e0:\te8 00 00 00 00       \tcallq  33e5 <sim_main+0x28ce>\n    33e5:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    33eb:\tc1 e8 10             \tshr    $0x10,%eax\n    33ee:\t0f b6 c0             \tmovzbl %al,%eax\n    33f1:\t89 c0                \tmov    %eax,%eax\n    33f3:\t48 83 c0 20          \tadd    $0x20,%rax\n    33f7:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    33fe:\t00 \n    33ff:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3406 <sim_main+0x28ef>\n    3406:\t89 da                \tmov    %ebx,%edx\n    3408:\tc1 ea 0c             \tshr    $0xc,%edx\n    340b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3411:\t89 d2                \tmov    %edx,%edx\n    3413:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3418:\t48 85 c0             \ttest   %rax,%rax\n    341b:\t74 5d                \tje     347a <sim_main+0x2963>\n    341d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3424 <sim_main+0x290d>\n    3424:\t89 da                \tmov    %ebx,%edx\n    3426:\tc1 ea 0c             \tshr    $0xc,%edx\n    3429:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    342f:\t89 d2                \tmov    %edx,%edx\n    3431:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3436:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3439:\t89 da                \tmov    %ebx,%edx\n    343b:\tc1 ea 1b             \tshr    $0x1b,%edx\n    343e:\t39 d0                \tcmp    %edx,%eax\n    3440:\t75 38                \tjne    347a <sim_main+0x2963>\n    3442:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3449 <sim_main+0x2932>\n    3449:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3450:\t48 83 c2 01          \tadd    $0x1,%rdx\n    3454:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    345b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3462 <sim_main+0x294b>\n    3462:\t89 da                \tmov    %ebx,%edx\n    3464:\tc1 ea 0c             \tshr    $0xc,%edx\n    3467:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    346d:\t89 d2                \tmov    %edx,%edx\n    346f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3474:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3478:\teb 11                \tjmp    348b <sim_main+0x2974>\n    347a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3481 <sim_main+0x296a>\n    3481:\t89 de                \tmov    %ebx,%esi\n    3483:\t48 89 c7             \tmov    %rax,%rdi\n    3486:\te8 00 00 00 00       \tcallq  348b <sim_main+0x2974>\n    348b:\t89 da                \tmov    %ebx,%edx\n    348d:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    3493:\t48 01 d0             \tadd    %rdx,%rax\n    3496:\t44 89 e2             \tmov    %r12d,%edx\n    3499:\t89 10                \tmov    %edx,(%rax)\n    349b:\t83 bd f8 fe ff ff 00 \tcmpl   $0x0,-0x108(%rbp)\n    34a2:\t0f 84 aa 51 00 00    \tje     8652 <sim_main+0x7b3b>\n    34a8:\t8b 85 f8 fe ff ff    \tmov    -0x108(%rbp),%eax\n    34ae:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    34b1:\te9 c4 51 00 00       \tjmpq   867a <sim_main+0x7b63>\n    34b6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    34bc:\t25 00 00 01 00       \tand    $0x10000,%eax\n    34c1:\t85 c0                \ttest   %eax,%eax\n    34c3:\t74 0c                \tje     34d1 <sim_main+0x29ba>\n    34c5:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    34cc:\te9 a9 51 00 00       \tjmpq   867a <sim_main+0x7b63>\n    34d1:\tc7 85 fc fe ff ff 00 \tmovl   $0x0,-0x104(%rbp)\n    34d8:\t00 00 00 \n    34db:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    34e1:\tc1 e8 18             \tshr    $0x18,%eax\n    34e4:\t89 c0                \tmov    %eax,%eax\n    34e6:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    34ed:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    34f3:\t98                   \tcwtl   \n    34f4:\t01 d0                \tadd    %edx,%eax\n    34f6:\t89 c3                \tmov    %eax,%ebx\n    34f8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 34ff <sim_main+0x29e8>\n    34ff:\t89 da                \tmov    %ebx,%edx\n    3501:\tc1 ea 0c             \tshr    $0xc,%edx\n    3504:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    350a:\t89 d2                \tmov    %edx,%edx\n    350c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3511:\t48 85 c0             \ttest   %rax,%rax\n    3514:\t74 63                \tje     3579 <sim_main+0x2a62>\n    3516:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 351d <sim_main+0x2a06>\n    351d:\t89 da                \tmov    %ebx,%edx\n    351f:\tc1 ea 0c             \tshr    $0xc,%edx\n    3522:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3528:\t89 d2                \tmov    %edx,%edx\n    352a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    352f:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3532:\t89 da                \tmov    %ebx,%edx\n    3534:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3537:\t39 d0                \tcmp    %edx,%eax\n    3539:\t75 3e                \tjne    3579 <sim_main+0x2a62>\n    353b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3542 <sim_main+0x2a2b>\n    3542:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3549:\t48 83 c2 01          \tadd    $0x1,%rdx\n    354d:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3554:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 355b <sim_main+0x2a44>\n    355b:\t89 da                \tmov    %ebx,%edx\n    355d:\tc1 ea 0c             \tshr    $0xc,%edx\n    3560:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3566:\t89 d2                \tmov    %edx,%edx\n    3568:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    356d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3571:\t48 85 c0             \ttest   %rax,%rax\n    3574:\t0f 94 c0             \tsete   %al\n    3577:\teb 17                \tjmp    3590 <sim_main+0x2a79>\n    3579:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3580 <sim_main+0x2a69>\n    3580:\t89 de                \tmov    %ebx,%esi\n    3582:\t48 89 c7             \tmov    %rax,%rdi\n    3585:\te8 00 00 00 00       \tcallq  358a <sim_main+0x2a73>\n    358a:\t48 85 c0             \ttest   %rax,%rax\n    358d:\t0f 94 c0             \tsete   %al\n    3590:\t84 c0                \ttest   %al,%al\n    3592:\t74 11                \tje     35a5 <sim_main+0x2a8e>\n    3594:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 359b <sim_main+0x2a84>\n    359b:\t89 de                \tmov    %ebx,%esi\n    359d:\t48 89 c7             \tmov    %rax,%rdi\n    35a0:\te8 00 00 00 00       \tcallq  35a5 <sim_main+0x2a8e>\n    35a5:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    35ab:\tc1 e8 10             \tshr    $0x10,%eax\n    35ae:\t0f b6 c0             \tmovzbl %al,%eax\n    35b1:\t89 c0                \tmov    %eax,%eax\n    35b3:\t48 83 c0 20          \tadd    $0x20,%rax\n    35b7:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    35be:\t00 \n    35bf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 35c6 <sim_main+0x2aaf>\n    35c6:\t89 da                \tmov    %ebx,%edx\n    35c8:\tc1 ea 0c             \tshr    $0xc,%edx\n    35cb:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    35d1:\t89 d2                \tmov    %edx,%edx\n    35d3:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    35d8:\t48 85 c0             \ttest   %rax,%rax\n    35db:\t74 5d                \tje     363a <sim_main+0x2b23>\n    35dd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 35e4 <sim_main+0x2acd>\n    35e4:\t89 da                \tmov    %ebx,%edx\n    35e6:\tc1 ea 0c             \tshr    $0xc,%edx\n    35e9:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    35ef:\t89 d2                \tmov    %edx,%edx\n    35f1:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    35f6:\t8b 40 08             \tmov    0x8(%rax),%eax\n    35f9:\t89 da                \tmov    %ebx,%edx\n    35fb:\tc1 ea 1b             \tshr    $0x1b,%edx\n    35fe:\t39 d0                \tcmp    %edx,%eax\n    3600:\t75 38                \tjne    363a <sim_main+0x2b23>\n    3602:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3609 <sim_main+0x2af2>\n    3609:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3610:\t48 83 c2 01          \tadd    $0x1,%rdx\n    3614:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    361b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3622 <sim_main+0x2b0b>\n    3622:\t89 da                \tmov    %ebx,%edx\n    3624:\tc1 ea 0c             \tshr    $0xc,%edx\n    3627:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    362d:\t89 d2                \tmov    %edx,%edx\n    362f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3634:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3638:\teb 11                \tjmp    364b <sim_main+0x2b34>\n    363a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3641 <sim_main+0x2b2a>\n    3641:\t89 de                \tmov    %ebx,%esi\n    3643:\t48 89 c7             \tmov    %rax,%rdi\n    3646:\te8 00 00 00 00       \tcallq  364b <sim_main+0x2b34>\n    364b:\t89 da                \tmov    %ebx,%edx\n    364d:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    3653:\t48 01 d0             \tadd    %rdx,%rax\n    3656:\t44 89 e2             \tmov    %r12d,%edx\n    3659:\t89 10                \tmov    %edx,(%rax)\n    365b:\t83 bd fc fe ff ff 00 \tcmpl   $0x0,-0x104(%rbp)\n    3662:\t74 0e                \tje     3672 <sim_main+0x2b5b>\n    3664:\t8b 85 fc fe ff ff    \tmov    -0x104(%rbp),%eax\n    366a:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    366d:\te9 08 50 00 00       \tjmpq   867a <sim_main+0x7b63>\n    3672:\tc7 85 fc fe ff ff 00 \tmovl   $0x0,-0x104(%rbp)\n    3679:\t00 00 00 \n    367c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3682:\tc1 e8 18             \tshr    $0x18,%eax\n    3685:\t89 c0                \tmov    %eax,%eax\n    3687:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    368e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3694:\t98                   \tcwtl   \n    3695:\t01 d0                \tadd    %edx,%eax\n    3697:\t83 c0 04             \tadd    $0x4,%eax\n    369a:\t89 c3                \tmov    %eax,%ebx\n    369c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 36a3 <sim_main+0x2b8c>\n    36a3:\t89 da                \tmov    %ebx,%edx\n    36a5:\tc1 ea 0c             \tshr    $0xc,%edx\n    36a8:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    36ae:\t89 d2                \tmov    %edx,%edx\n    36b0:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    36b5:\t48 85 c0             \ttest   %rax,%rax\n    36b8:\t74 63                \tje     371d <sim_main+0x2c06>\n    36ba:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 36c1 <sim_main+0x2baa>\n    36c1:\t89 da                \tmov    %ebx,%edx\n    36c3:\tc1 ea 0c             \tshr    $0xc,%edx\n    36c6:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    36cc:\t89 d2                \tmov    %edx,%edx\n    36ce:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    36d3:\t8b 40 08             \tmov    0x8(%rax),%eax\n    36d6:\t89 da                \tmov    %ebx,%edx\n    36d8:\tc1 ea 1b             \tshr    $0x1b,%edx\n    36db:\t39 d0                \tcmp    %edx,%eax\n    36dd:\t75 3e                \tjne    371d <sim_main+0x2c06>\n    36df:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 36e6 <sim_main+0x2bcf>\n    36e6:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    36ed:\t48 83 c2 01          \tadd    $0x1,%rdx\n    36f1:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    36f8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 36ff <sim_main+0x2be8>\n    36ff:\t89 da                \tmov    %ebx,%edx\n    3701:\tc1 ea 0c             \tshr    $0xc,%edx\n    3704:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    370a:\t89 d2                \tmov    %edx,%edx\n    370c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3711:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3715:\t48 85 c0             \ttest   %rax,%rax\n    3718:\t0f 94 c0             \tsete   %al\n    371b:\teb 17                \tjmp    3734 <sim_main+0x2c1d>\n    371d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3724 <sim_main+0x2c0d>\n    3724:\t89 de                \tmov    %ebx,%esi\n    3726:\t48 89 c7             \tmov    %rax,%rdi\n    3729:\te8 00 00 00 00       \tcallq  372e <sim_main+0x2c17>\n    372e:\t48 85 c0             \ttest   %rax,%rax\n    3731:\t0f 94 c0             \tsete   %al\n    3734:\t84 c0                \ttest   %al,%al\n    3736:\t74 11                \tje     3749 <sim_main+0x2c32>\n    3738:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 373f <sim_main+0x2c28>\n    373f:\t89 de                \tmov    %ebx,%esi\n    3741:\t48 89 c7             \tmov    %rax,%rdi\n    3744:\te8 00 00 00 00       \tcallq  3749 <sim_main+0x2c32>\n    3749:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    374f:\tc1 e8 10             \tshr    $0x10,%eax\n    3752:\t0f b6 c0             \tmovzbl %al,%eax\n    3755:\t83 c0 01             \tadd    $0x1,%eax\n    3758:\t89 c0                \tmov    %eax,%eax\n    375a:\t48 83 c0 20          \tadd    $0x20,%rax\n    375e:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    3765:\t00 \n    3766:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 376d <sim_main+0x2c56>\n    376d:\t89 da                \tmov    %ebx,%edx\n    376f:\tc1 ea 0c             \tshr    $0xc,%edx\n    3772:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3778:\t89 d2                \tmov    %edx,%edx\n    377a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    377f:\t48 85 c0             \ttest   %rax,%rax\n    3782:\t74 5d                \tje     37e1 <sim_main+0x2cca>\n    3784:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 378b <sim_main+0x2c74>\n    378b:\t89 da                \tmov    %ebx,%edx\n    378d:\tc1 ea 0c             \tshr    $0xc,%edx\n    3790:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3796:\t89 d2                \tmov    %edx,%edx\n    3798:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    379d:\t8b 40 08             \tmov    0x8(%rax),%eax\n    37a0:\t89 da                \tmov    %ebx,%edx\n    37a2:\tc1 ea 1b             \tshr    $0x1b,%edx\n    37a5:\t39 d0                \tcmp    %edx,%eax\n    37a7:\t75 38                \tjne    37e1 <sim_main+0x2cca>\n    37a9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 37b0 <sim_main+0x2c99>\n    37b0:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    37b7:\t48 83 c2 01          \tadd    $0x1,%rdx\n    37bb:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    37c2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 37c9 <sim_main+0x2cb2>\n    37c9:\t89 da                \tmov    %ebx,%edx\n    37cb:\tc1 ea 0c             \tshr    $0xc,%edx\n    37ce:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    37d4:\t89 d2                \tmov    %edx,%edx\n    37d6:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    37db:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    37df:\teb 11                \tjmp    37f2 <sim_main+0x2cdb>\n    37e1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 37e8 <sim_main+0x2cd1>\n    37e8:\t89 de                \tmov    %ebx,%esi\n    37ea:\t48 89 c7             \tmov    %rax,%rdi\n    37ed:\te8 00 00 00 00       \tcallq  37f2 <sim_main+0x2cdb>\n    37f2:\t89 da                \tmov    %ebx,%edx\n    37f4:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    37fa:\t48 01 d0             \tadd    %rdx,%rax\n    37fd:\t44 89 e2             \tmov    %r12d,%edx\n    3800:\t89 10                \tmov    %edx,(%rax)\n    3802:\t83 bd fc fe ff ff 00 \tcmpl   $0x0,-0x104(%rbp)\n    3809:\t0f 84 46 4e 00 00    \tje     8655 <sim_main+0x7b3e>\n    380f:\t8b 85 fc fe ff ff    \tmov    -0x104(%rbp),%eax\n    3815:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    3818:\te9 5d 4e 00 00       \tjmpq   867a <sim_main+0x7b63>\n    381d:\tc7 85 04 ff ff ff 00 \tmovl   $0x0,-0xfc(%rbp)\n    3824:\t00 00 00 \n    3827:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    382d:\tc1 e8 18             \tshr    $0x18,%eax\n    3830:\t89 c0                \tmov    %eax,%eax\n    3832:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    3839:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    383f:\t98                   \tcwtl   \n    3840:\t01 d0                \tadd    %edx,%eax\n    3842:\t83 e0 fc             \tand    $0xfffffffc,%eax\n    3845:\t89 c3                \tmov    %eax,%ebx\n    3847:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 384e <sim_main+0x2d37>\n    384e:\t89 da                \tmov    %ebx,%edx\n    3850:\tc1 ea 0c             \tshr    $0xc,%edx\n    3853:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3859:\t89 d2                \tmov    %edx,%edx\n    385b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3860:\t48 85 c0             \ttest   %rax,%rax\n    3863:\t74 63                \tje     38c8 <sim_main+0x2db1>\n    3865:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 386c <sim_main+0x2d55>\n    386c:\t89 da                \tmov    %ebx,%edx\n    386e:\tc1 ea 0c             \tshr    $0xc,%edx\n    3871:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3877:\t89 d2                \tmov    %edx,%edx\n    3879:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    387e:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3881:\t89 da                \tmov    %ebx,%edx\n    3883:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3886:\t39 d0                \tcmp    %edx,%eax\n    3888:\t75 3e                \tjne    38c8 <sim_main+0x2db1>\n    388a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3891 <sim_main+0x2d7a>\n    3891:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3898:\t48 83 c2 01          \tadd    $0x1,%rdx\n    389c:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    38a3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 38aa <sim_main+0x2d93>\n    38aa:\t89 da                \tmov    %ebx,%edx\n    38ac:\tc1 ea 0c             \tshr    $0xc,%edx\n    38af:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    38b5:\t89 d2                \tmov    %edx,%edx\n    38b7:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    38bc:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    38c0:\t48 85 c0             \ttest   %rax,%rax\n    38c3:\t0f 95 c0             \tsetne  %al\n    38c6:\teb 17                \tjmp    38df <sim_main+0x2dc8>\n    38c8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 38cf <sim_main+0x2db8>\n    38cf:\t89 de                \tmov    %ebx,%esi\n    38d1:\t48 89 c7             \tmov    %rax,%rdi\n    38d4:\te8 00 00 00 00       \tcallq  38d9 <sim_main+0x2dc2>\n    38d9:\t48 85 c0             \ttest   %rax,%rax\n    38dc:\t0f 95 c0             \tsetne  %al\n    38df:\t84 c0                \ttest   %al,%al\n    38e1:\t0f 84 9b 00 00 00    \tje     3982 <sim_main+0x2e6b>\n    38e7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 38ee <sim_main+0x2dd7>\n    38ee:\t89 da                \tmov    %ebx,%edx\n    38f0:\tc1 ea 0c             \tshr    $0xc,%edx\n    38f3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    38f9:\t89 d2                \tmov    %edx,%edx\n    38fb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3900:\t48 85 c0             \ttest   %rax,%rax\n    3903:\t74 5d                \tje     3962 <sim_main+0x2e4b>\n    3905:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 390c <sim_main+0x2df5>\n    390c:\t89 da                \tmov    %ebx,%edx\n    390e:\tc1 ea 0c             \tshr    $0xc,%edx\n    3911:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3917:\t89 d2                \tmov    %edx,%edx\n    3919:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    391e:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3921:\t89 da                \tmov    %ebx,%edx\n    3923:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3926:\t39 d0                \tcmp    %edx,%eax\n    3928:\t75 38                \tjne    3962 <sim_main+0x2e4b>\n    392a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3931 <sim_main+0x2e1a>\n    3931:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3938:\t48 83 c2 01          \tadd    $0x1,%rdx\n    393c:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3943:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 394a <sim_main+0x2e33>\n    394a:\t89 da                \tmov    %ebx,%edx\n    394c:\tc1 ea 0c             \tshr    $0xc,%edx\n    394f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3955:\t89 d2                \tmov    %edx,%edx\n    3957:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    395c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3960:\teb 11                \tjmp    3973 <sim_main+0x2e5c>\n    3962:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3969 <sim_main+0x2e52>\n    3969:\t89 de                \tmov    %ebx,%esi\n    396b:\t48 89 c7             \tmov    %rax,%rdi\n    396e:\te8 00 00 00 00       \tcallq  3973 <sim_main+0x2e5c>\n    3973:\t89 da                \tmov    %ebx,%edx\n    3975:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    397b:\t48 01 d0             \tadd    %rdx,%rax\n    397e:\t8b 00                \tmov    (%rax),%eax\n    3980:\teb 05                \tjmp    3987 <sim_main+0x2e70>\n    3982:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3987:\t89 85 00 ff ff ff    \tmov    %eax,-0x100(%rbp)\n    398d:\t83 bd 04 ff ff ff 00 \tcmpl   $0x0,-0xfc(%rbp)\n    3994:\t74 0e                \tje     39a4 <sim_main+0x2e8d>\n    3996:\t8b 85 04 ff ff ff    \tmov    -0xfc(%rbp),%eax\n    399c:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    399f:\te9 d6 4c 00 00       \tjmpq   867a <sim_main+0x7b63>\n    39a4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    39aa:\tc1 e8 10             \tshr    $0x10,%eax\n    39ad:\t0f b6 c0             \tmovzbl %al,%eax\n    39b0:\t89 c0                \tmov    %eax,%eax\n    39b2:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    39b9:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    39bf:\tc1 e8 18             \tshr    $0x18,%eax\n    39c2:\t89 c0                \tmov    %eax,%eax\n    39c4:\t8b 0c 85 00 00 00 00 \tmov    0x0(,%rax,4),%ecx\n    39cb:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    39d1:\t98                   \tcwtl   \n    39d2:\t01 c8                \tadd    %ecx,%eax\n    39d4:\tf7 d0                \tnot    %eax\n    39d6:\t83 e0 03             \tand    $0x3,%eax\n    39d9:\tc1 e0 03             \tshl    $0x3,%eax\n    39dc:\t89 c1                \tmov    %eax,%ecx\n    39de:\td3 fa                \tsar    %cl,%edx\n    39e0:\t89 d0                \tmov    %edx,%eax\n    39e2:\t89 c1                \tmov    %eax,%ecx\n    39e4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    39ea:\tc1 e8 18             \tshr    $0x18,%eax\n    39ed:\t89 c0                \tmov    %eax,%eax\n    39ef:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    39f6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    39fc:\t98                   \tcwtl   \n    39fd:\t01 d0                \tadd    %edx,%eax\n    39ff:\tf7 d0                \tnot    %eax\n    3a01:\t83 e0 03             \tand    $0x3,%eax\n    3a04:\t48 98                \tcltq   \n    3a06:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    3a0d:\t21 c1                \tand    %eax,%ecx\n    3a0f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3a15:\tc1 e8 18             \tshr    $0x18,%eax\n    3a18:\t89 c0                \tmov    %eax,%eax\n    3a1a:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    3a21:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3a27:\t98                   \tcwtl   \n    3a28:\t01 d0                \tadd    %edx,%eax\n    3a2a:\tf7 d0                \tnot    %eax\n    3a2c:\t83 e0 03             \tand    $0x3,%eax\n    3a2f:\t48 98                \tcltq   \n    3a31:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    3a38:\tf7 d0                \tnot    %eax\n    3a3a:\t23 85 00 ff ff ff    \tand    -0x100(%rbp),%eax\n    3a40:\t09 c8                \tor     %ecx,%eax\n    3a42:\t89 85 00 ff ff ff    \tmov    %eax,-0x100(%rbp)\n    3a48:\tc7 85 04 ff ff ff 00 \tmovl   $0x0,-0xfc(%rbp)\n    3a4f:\t00 00 00 \n    3a52:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3a58:\tc1 e8 18             \tshr    $0x18,%eax\n    3a5b:\t89 c0                \tmov    %eax,%eax\n    3a5d:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    3a64:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3a6a:\t98                   \tcwtl   \n    3a6b:\t01 d0                \tadd    %edx,%eax\n    3a6d:\t83 e0 fc             \tand    $0xfffffffc,%eax\n    3a70:\t89 c3                \tmov    %eax,%ebx\n    3a72:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3a79 <sim_main+0x2f62>\n    3a79:\t89 da                \tmov    %ebx,%edx\n    3a7b:\tc1 ea 0c             \tshr    $0xc,%edx\n    3a7e:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3a84:\t89 d2                \tmov    %edx,%edx\n    3a86:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3a8b:\t48 85 c0             \ttest   %rax,%rax\n    3a8e:\t74 63                \tje     3af3 <sim_main+0x2fdc>\n    3a90:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3a97 <sim_main+0x2f80>\n    3a97:\t89 da                \tmov    %ebx,%edx\n    3a99:\tc1 ea 0c             \tshr    $0xc,%edx\n    3a9c:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3aa2:\t89 d2                \tmov    %edx,%edx\n    3aa4:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3aa9:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3aac:\t89 da                \tmov    %ebx,%edx\n    3aae:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3ab1:\t39 d0                \tcmp    %edx,%eax\n    3ab3:\t75 3e                \tjne    3af3 <sim_main+0x2fdc>\n    3ab5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3abc <sim_main+0x2fa5>\n    3abc:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3ac3:\t48 83 c2 01          \tadd    $0x1,%rdx\n    3ac7:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3ace:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3ad5 <sim_main+0x2fbe>\n    3ad5:\t89 da                \tmov    %ebx,%edx\n    3ad7:\tc1 ea 0c             \tshr    $0xc,%edx\n    3ada:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3ae0:\t89 d2                \tmov    %edx,%edx\n    3ae2:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3ae7:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3aeb:\t48 85 c0             \ttest   %rax,%rax\n    3aee:\t0f 94 c0             \tsete   %al\n    3af1:\teb 17                \tjmp    3b0a <sim_main+0x2ff3>\n    3af3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3afa <sim_main+0x2fe3>\n    3afa:\t89 de                \tmov    %ebx,%esi\n    3afc:\t48 89 c7             \tmov    %rax,%rdi\n    3aff:\te8 00 00 00 00       \tcallq  3b04 <sim_main+0x2fed>\n    3b04:\t48 85 c0             \ttest   %rax,%rax\n    3b07:\t0f 94 c0             \tsete   %al\n    3b0a:\t84 c0                \ttest   %al,%al\n    3b0c:\t74 11                \tje     3b1f <sim_main+0x3008>\n    3b0e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3b15 <sim_main+0x2ffe>\n    3b15:\t89 de                \tmov    %ebx,%esi\n    3b17:\t48 89 c7             \tmov    %rax,%rdi\n    3b1a:\te8 00 00 00 00       \tcallq  3b1f <sim_main+0x3008>\n    3b1f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3b26 <sim_main+0x300f>\n    3b26:\t89 da                \tmov    %ebx,%edx\n    3b28:\tc1 ea 0c             \tshr    $0xc,%edx\n    3b2b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3b31:\t89 d2                \tmov    %edx,%edx\n    3b33:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3b38:\t48 85 c0             \ttest   %rax,%rax\n    3b3b:\t74 5d                \tje     3b9a <sim_main+0x3083>\n    3b3d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3b44 <sim_main+0x302d>\n    3b44:\t89 da                \tmov    %ebx,%edx\n    3b46:\tc1 ea 0c             \tshr    $0xc,%edx\n    3b49:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3b4f:\t89 d2                \tmov    %edx,%edx\n    3b51:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3b56:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3b59:\t89 da                \tmov    %ebx,%edx\n    3b5b:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3b5e:\t39 d0                \tcmp    %edx,%eax\n    3b60:\t75 38                \tjne    3b9a <sim_main+0x3083>\n    3b62:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3b69 <sim_main+0x3052>\n    3b69:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3b70:\t48 83 c2 01          \tadd    $0x1,%rdx\n    3b74:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3b7b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3b82 <sim_main+0x306b>\n    3b82:\t89 da                \tmov    %ebx,%edx\n    3b84:\tc1 ea 0c             \tshr    $0xc,%edx\n    3b87:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3b8d:\t89 d2                \tmov    %edx,%edx\n    3b8f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3b94:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3b98:\teb 11                \tjmp    3bab <sim_main+0x3094>\n    3b9a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3ba1 <sim_main+0x308a>\n    3ba1:\t89 de                \tmov    %ebx,%esi\n    3ba3:\t48 89 c7             \tmov    %rax,%rdi\n    3ba6:\te8 00 00 00 00       \tcallq  3bab <sim_main+0x3094>\n    3bab:\t89 da                \tmov    %ebx,%edx\n    3bad:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    3bb3:\t48 01 c2             \tadd    %rax,%rdx\n    3bb6:\t8b 85 00 ff ff ff    \tmov    -0x100(%rbp),%eax\n    3bbc:\t89 02                \tmov    %eax,(%rdx)\n    3bbe:\t83 bd 04 ff ff ff 00 \tcmpl   $0x0,-0xfc(%rbp)\n    3bc5:\t0f 84 8d 4a 00 00    \tje     8658 <sim_main+0x7b41>\n    3bcb:\t8b 85 04 ff ff ff    \tmov    -0xfc(%rbp),%eax\n    3bd1:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    3bd4:\te9 a1 4a 00 00       \tjmpq   867a <sim_main+0x7b63>\n    3bd9:\tc7 85 0c ff ff ff 00 \tmovl   $0x0,-0xf4(%rbp)\n    3be0:\t00 00 00 \n    3be3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3be9:\tc1 e8 18             \tshr    $0x18,%eax\n    3bec:\t89 c0                \tmov    %eax,%eax\n    3bee:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    3bf5:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3bfb:\t98                   \tcwtl   \n    3bfc:\t01 d0                \tadd    %edx,%eax\n    3bfe:\t83 e0 fc             \tand    $0xfffffffc,%eax\n    3c01:\t89 c3                \tmov    %eax,%ebx\n    3c03:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3c0a <sim_main+0x30f3>\n    3c0a:\t89 da                \tmov    %ebx,%edx\n    3c0c:\tc1 ea 0c             \tshr    $0xc,%edx\n    3c0f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3c15:\t89 d2                \tmov    %edx,%edx\n    3c17:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3c1c:\t48 85 c0             \ttest   %rax,%rax\n    3c1f:\t74 63                \tje     3c84 <sim_main+0x316d>\n    3c21:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3c28 <sim_main+0x3111>\n    3c28:\t89 da                \tmov    %ebx,%edx\n    3c2a:\tc1 ea 0c             \tshr    $0xc,%edx\n    3c2d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3c33:\t89 d2                \tmov    %edx,%edx\n    3c35:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3c3a:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3c3d:\t89 da                \tmov    %ebx,%edx\n    3c3f:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3c42:\t39 d0                \tcmp    %edx,%eax\n    3c44:\t75 3e                \tjne    3c84 <sim_main+0x316d>\n    3c46:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3c4d <sim_main+0x3136>\n    3c4d:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3c54:\t48 83 c2 01          \tadd    $0x1,%rdx\n    3c58:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3c5f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3c66 <sim_main+0x314f>\n    3c66:\t89 da                \tmov    %ebx,%edx\n    3c68:\tc1 ea 0c             \tshr    $0xc,%edx\n    3c6b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3c71:\t89 d2                \tmov    %edx,%edx\n    3c73:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3c78:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3c7c:\t48 85 c0             \ttest   %rax,%rax\n    3c7f:\t0f 95 c0             \tsetne  %al\n    3c82:\teb 17                \tjmp    3c9b <sim_main+0x3184>\n    3c84:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3c8b <sim_main+0x3174>\n    3c8b:\t89 de                \tmov    %ebx,%esi\n    3c8d:\t48 89 c7             \tmov    %rax,%rdi\n    3c90:\te8 00 00 00 00       \tcallq  3c95 <sim_main+0x317e>\n    3c95:\t48 85 c0             \ttest   %rax,%rax\n    3c98:\t0f 95 c0             \tsetne  %al\n    3c9b:\t84 c0                \ttest   %al,%al\n    3c9d:\t0f 84 9b 00 00 00    \tje     3d3e <sim_main+0x3227>\n    3ca3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3caa <sim_main+0x3193>\n    3caa:\t89 da                \tmov    %ebx,%edx\n    3cac:\tc1 ea 0c             \tshr    $0xc,%edx\n    3caf:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3cb5:\t89 d2                \tmov    %edx,%edx\n    3cb7:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3cbc:\t48 85 c0             \ttest   %rax,%rax\n    3cbf:\t74 5d                \tje     3d1e <sim_main+0x3207>\n    3cc1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3cc8 <sim_main+0x31b1>\n    3cc8:\t89 da                \tmov    %ebx,%edx\n    3cca:\tc1 ea 0c             \tshr    $0xc,%edx\n    3ccd:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3cd3:\t89 d2                \tmov    %edx,%edx\n    3cd5:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3cda:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3cdd:\t89 da                \tmov    %ebx,%edx\n    3cdf:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3ce2:\t39 d0                \tcmp    %edx,%eax\n    3ce4:\t75 38                \tjne    3d1e <sim_main+0x3207>\n    3ce6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3ced <sim_main+0x31d6>\n    3ced:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3cf4:\t48 83 c2 01          \tadd    $0x1,%rdx\n    3cf8:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3cff:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3d06 <sim_main+0x31ef>\n    3d06:\t89 da                \tmov    %ebx,%edx\n    3d08:\tc1 ea 0c             \tshr    $0xc,%edx\n    3d0b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3d11:\t89 d2                \tmov    %edx,%edx\n    3d13:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3d18:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3d1c:\teb 11                \tjmp    3d2f <sim_main+0x3218>\n    3d1e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3d25 <sim_main+0x320e>\n    3d25:\t89 de                \tmov    %ebx,%esi\n    3d27:\t48 89 c7             \tmov    %rax,%rdi\n    3d2a:\te8 00 00 00 00       \tcallq  3d2f <sim_main+0x3218>\n    3d2f:\t89 da                \tmov    %ebx,%edx\n    3d31:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    3d37:\t48 01 d0             \tadd    %rdx,%rax\n    3d3a:\t8b 00                \tmov    (%rax),%eax\n    3d3c:\teb 05                \tjmp    3d43 <sim_main+0x322c>\n    3d3e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    3d43:\t89 85 08 ff ff ff    \tmov    %eax,-0xf8(%rbp)\n    3d49:\t83 bd 0c ff ff ff 00 \tcmpl   $0x0,-0xf4(%rbp)\n    3d50:\t74 0e                \tje     3d60 <sim_main+0x3249>\n    3d52:\t8b 85 0c ff ff ff    \tmov    -0xf4(%rbp),%eax\n    3d58:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    3d5b:\te9 1a 49 00 00       \tjmpq   867a <sim_main+0x7b63>\n    3d60:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3d66:\tc1 e8 10             \tshr    $0x10,%eax\n    3d69:\t0f b6 c0             \tmovzbl %al,%eax\n    3d6c:\t89 c0                \tmov    %eax,%eax\n    3d6e:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    3d75:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3d7b:\tc1 e8 18             \tshr    $0x18,%eax\n    3d7e:\t89 c0                \tmov    %eax,%eax\n    3d80:\t8b 0c 85 00 00 00 00 \tmov    0x0(,%rax,4),%ecx\n    3d87:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3d8d:\t98                   \tcwtl   \n    3d8e:\t01 c8                \tadd    %ecx,%eax\n    3d90:\t83 e0 03             \tand    $0x3,%eax\n    3d93:\tc1 e0 03             \tshl    $0x3,%eax\n    3d96:\t89 c1                \tmov    %eax,%ecx\n    3d98:\td3 e2                \tshl    %cl,%edx\n    3d9a:\t89 d0                \tmov    %edx,%eax\n    3d9c:\t89 c1                \tmov    %eax,%ecx\n    3d9e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3da4:\tc1 e8 18             \tshr    $0x18,%eax\n    3da7:\t89 c0                \tmov    %eax,%eax\n    3da9:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    3db0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3db6:\t98                   \tcwtl   \n    3db7:\t01 d0                \tadd    %edx,%eax\n    3db9:\t83 e0 03             \tand    $0x3,%eax\n    3dbc:\tba 04 00 00 00       \tmov    $0x4,%edx\n    3dc1:\t29 c2                \tsub    %eax,%edx\n    3dc3:\t89 d0                \tmov    %edx,%eax\n    3dc5:\t48 98                \tcltq   \n    3dc7:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    3dce:\tf7 d0                \tnot    %eax\n    3dd0:\t21 c1                \tand    %eax,%ecx\n    3dd2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3dd8:\tc1 e8 18             \tshr    $0x18,%eax\n    3ddb:\t89 c0                \tmov    %eax,%eax\n    3ddd:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    3de4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3dea:\t98                   \tcwtl   \n    3deb:\t01 d0                \tadd    %edx,%eax\n    3ded:\t83 e0 03             \tand    $0x3,%eax\n    3df0:\tba 04 00 00 00       \tmov    $0x4,%edx\n    3df5:\t29 c2                \tsub    %eax,%edx\n    3df7:\t89 d0                \tmov    %edx,%eax\n    3df9:\t48 98                \tcltq   \n    3dfb:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    3e02:\t23 85 08 ff ff ff    \tand    -0xf8(%rbp),%eax\n    3e08:\t09 c8                \tor     %ecx,%eax\n    3e0a:\t89 85 08 ff ff ff    \tmov    %eax,-0xf8(%rbp)\n    3e10:\tc7 85 0c ff ff ff 00 \tmovl   $0x0,-0xf4(%rbp)\n    3e17:\t00 00 00 \n    3e1a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3e20:\tc1 e8 18             \tshr    $0x18,%eax\n    3e23:\t89 c0                \tmov    %eax,%eax\n    3e25:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    3e2c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3e32:\t98                   \tcwtl   \n    3e33:\t01 d0                \tadd    %edx,%eax\n    3e35:\t83 e0 fc             \tand    $0xfffffffc,%eax\n    3e38:\t89 c3                \tmov    %eax,%ebx\n    3e3a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3e41 <sim_main+0x332a>\n    3e41:\t89 da                \tmov    %ebx,%edx\n    3e43:\tc1 ea 0c             \tshr    $0xc,%edx\n    3e46:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3e4c:\t89 d2                \tmov    %edx,%edx\n    3e4e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3e53:\t48 85 c0             \ttest   %rax,%rax\n    3e56:\t74 63                \tje     3ebb <sim_main+0x33a4>\n    3e58:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3e5f <sim_main+0x3348>\n    3e5f:\t89 da                \tmov    %ebx,%edx\n    3e61:\tc1 ea 0c             \tshr    $0xc,%edx\n    3e64:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3e6a:\t89 d2                \tmov    %edx,%edx\n    3e6c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3e71:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3e74:\t89 da                \tmov    %ebx,%edx\n    3e76:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3e79:\t39 d0                \tcmp    %edx,%eax\n    3e7b:\t75 3e                \tjne    3ebb <sim_main+0x33a4>\n    3e7d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3e84 <sim_main+0x336d>\n    3e84:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3e8b:\t48 83 c2 01          \tadd    $0x1,%rdx\n    3e8f:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3e96:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3e9d <sim_main+0x3386>\n    3e9d:\t89 da                \tmov    %ebx,%edx\n    3e9f:\tc1 ea 0c             \tshr    $0xc,%edx\n    3ea2:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3ea8:\t89 d2                \tmov    %edx,%edx\n    3eaa:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3eaf:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3eb3:\t48 85 c0             \ttest   %rax,%rax\n    3eb6:\t0f 94 c0             \tsete   %al\n    3eb9:\teb 17                \tjmp    3ed2 <sim_main+0x33bb>\n    3ebb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3ec2 <sim_main+0x33ab>\n    3ec2:\t89 de                \tmov    %ebx,%esi\n    3ec4:\t48 89 c7             \tmov    %rax,%rdi\n    3ec7:\te8 00 00 00 00       \tcallq  3ecc <sim_main+0x33b5>\n    3ecc:\t48 85 c0             \ttest   %rax,%rax\n    3ecf:\t0f 94 c0             \tsete   %al\n    3ed2:\t84 c0                \ttest   %al,%al\n    3ed4:\t74 11                \tje     3ee7 <sim_main+0x33d0>\n    3ed6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3edd <sim_main+0x33c6>\n    3edd:\t89 de                \tmov    %ebx,%esi\n    3edf:\t48 89 c7             \tmov    %rax,%rdi\n    3ee2:\te8 00 00 00 00       \tcallq  3ee7 <sim_main+0x33d0>\n    3ee7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3eee <sim_main+0x33d7>\n    3eee:\t89 da                \tmov    %ebx,%edx\n    3ef0:\tc1 ea 0c             \tshr    $0xc,%edx\n    3ef3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3ef9:\t89 d2                \tmov    %edx,%edx\n    3efb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3f00:\t48 85 c0             \ttest   %rax,%rax\n    3f03:\t74 5d                \tje     3f62 <sim_main+0x344b>\n    3f05:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3f0c <sim_main+0x33f5>\n    3f0c:\t89 da                \tmov    %ebx,%edx\n    3f0e:\tc1 ea 0c             \tshr    $0xc,%edx\n    3f11:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3f17:\t89 d2                \tmov    %edx,%edx\n    3f19:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3f1e:\t8b 40 08             \tmov    0x8(%rax),%eax\n    3f21:\t89 da                \tmov    %ebx,%edx\n    3f23:\tc1 ea 1b             \tshr    $0x1b,%edx\n    3f26:\t39 d0                \tcmp    %edx,%eax\n    3f28:\t75 38                \tjne    3f62 <sim_main+0x344b>\n    3f2a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3f31 <sim_main+0x341a>\n    3f31:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    3f38:\t48 83 c2 01          \tadd    $0x1,%rdx\n    3f3c:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    3f43:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3f4a <sim_main+0x3433>\n    3f4a:\t89 da                \tmov    %ebx,%edx\n    3f4c:\tc1 ea 0c             \tshr    $0xc,%edx\n    3f4f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3f55:\t89 d2                \tmov    %edx,%edx\n    3f57:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3f5c:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    3f60:\teb 11                \tjmp    3f73 <sim_main+0x345c>\n    3f62:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3f69 <sim_main+0x3452>\n    3f69:\t89 de                \tmov    %ebx,%esi\n    3f6b:\t48 89 c7             \tmov    %rax,%rdi\n    3f6e:\te8 00 00 00 00       \tcallq  3f73 <sim_main+0x345c>\n    3f73:\t89 da                \tmov    %ebx,%edx\n    3f75:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    3f7b:\t48 01 c2             \tadd    %rax,%rdx\n    3f7e:\t8b 85 08 ff ff ff    \tmov    -0xf8(%rbp),%eax\n    3f84:\t89 02                \tmov    %eax,(%rdx)\n    3f86:\t83 bd 0c ff ff ff 00 \tcmpl   $0x0,-0xf4(%rbp)\n    3f8d:\t0f 84 c8 46 00 00    \tje     865b <sim_main+0x7b44>\n    3f93:\t8b 85 0c ff ff ff    \tmov    -0xf4(%rbp),%eax\n    3f99:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    3f9c:\te9 d9 46 00 00       \tjmpq   867a <sim_main+0x7b63>\n    3fa1:\tc7 85 14 ff ff ff 00 \tmovl   $0x0,-0xec(%rbp)\n    3fa8:\t00 00 00 \n    3fab:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3fb1:\tc1 e8 18             \tshr    $0x18,%eax\n    3fb4:\t89 c0                \tmov    %eax,%eax\n    3fb6:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    3fbd:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    3fc3:\tc1 e8 08             \tshr    $0x8,%eax\n    3fc6:\t0f b6 c0             \tmovzbl %al,%eax\n    3fc9:\t89 c0                \tmov    %eax,%eax\n    3fcb:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    3fd2:\t01 d0                \tadd    %edx,%eax\n    3fd4:\t89 c3                \tmov    %eax,%ebx\n    3fd6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3fdd <sim_main+0x34c6>\n    3fdd:\t89 da                \tmov    %ebx,%edx\n    3fdf:\tc1 ea 0c             \tshr    $0xc,%edx\n    3fe2:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    3fe8:\t89 d2                \tmov    %edx,%edx\n    3fea:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    3fef:\t48 85 c0             \ttest   %rax,%rax\n    3ff2:\t74 63                \tje     4057 <sim_main+0x3540>\n    3ff4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3ffb <sim_main+0x34e4>\n    3ffb:\t89 da                \tmov    %ebx,%edx\n    3ffd:\tc1 ea 0c             \tshr    $0xc,%edx\n    4000:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4006:\t89 d2                \tmov    %edx,%edx\n    4008:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    400d:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4010:\t89 da                \tmov    %ebx,%edx\n    4012:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4015:\t39 d0                \tcmp    %edx,%eax\n    4017:\t75 3e                \tjne    4057 <sim_main+0x3540>\n    4019:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4020 <sim_main+0x3509>\n    4020:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4027:\t48 83 c2 01          \tadd    $0x1,%rdx\n    402b:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4032:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4039 <sim_main+0x3522>\n    4039:\t89 da                \tmov    %ebx,%edx\n    403b:\tc1 ea 0c             \tshr    $0xc,%edx\n    403e:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4044:\t89 d2                \tmov    %edx,%edx\n    4046:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    404b:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    404f:\t48 85 c0             \ttest   %rax,%rax\n    4052:\t0f 95 c0             \tsetne  %al\n    4055:\teb 17                \tjmp    406e <sim_main+0x3557>\n    4057:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 405e <sim_main+0x3547>\n    405e:\t89 de                \tmov    %ebx,%esi\n    4060:\t48 89 c7             \tmov    %rax,%rdi\n    4063:\te8 00 00 00 00       \tcallq  4068 <sim_main+0x3551>\n    4068:\t48 85 c0             \ttest   %rax,%rax\n    406b:\t0f 95 c0             \tsetne  %al\n    406e:\t84 c0                \ttest   %al,%al\n    4070:\t0f 84 9c 00 00 00    \tje     4112 <sim_main+0x35fb>\n    4076:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 407d <sim_main+0x3566>\n    407d:\t89 da                \tmov    %ebx,%edx\n    407f:\tc1 ea 0c             \tshr    $0xc,%edx\n    4082:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4088:\t89 d2                \tmov    %edx,%edx\n    408a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    408f:\t48 85 c0             \ttest   %rax,%rax\n    4092:\t74 5d                \tje     40f1 <sim_main+0x35da>\n    4094:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 409b <sim_main+0x3584>\n    409b:\t89 da                \tmov    %ebx,%edx\n    409d:\tc1 ea 0c             \tshr    $0xc,%edx\n    40a0:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    40a6:\t89 d2                \tmov    %edx,%edx\n    40a8:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    40ad:\t8b 40 08             \tmov    0x8(%rax),%eax\n    40b0:\t89 da                \tmov    %ebx,%edx\n    40b2:\tc1 ea 1b             \tshr    $0x1b,%edx\n    40b5:\t39 d0                \tcmp    %edx,%eax\n    40b7:\t75 38                \tjne    40f1 <sim_main+0x35da>\n    40b9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40c0 <sim_main+0x35a9>\n    40c0:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    40c7:\t48 83 c2 01          \tadd    $0x1,%rdx\n    40cb:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    40d2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40d9 <sim_main+0x35c2>\n    40d9:\t89 da                \tmov    %ebx,%edx\n    40db:\tc1 ea 0c             \tshr    $0xc,%edx\n    40de:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    40e4:\t89 d2                \tmov    %edx,%edx\n    40e6:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    40eb:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    40ef:\teb 11                \tjmp    4102 <sim_main+0x35eb>\n    40f1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 40f8 <sim_main+0x35e1>\n    40f8:\t89 de                \tmov    %ebx,%esi\n    40fa:\t48 89 c7             \tmov    %rax,%rdi\n    40fd:\te8 00 00 00 00       \tcallq  4102 <sim_main+0x35eb>\n    4102:\t89 da                \tmov    %ebx,%edx\n    4104:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    410a:\t48 01 d0             \tadd    %rdx,%rax\n    410d:\t0f b6 00             \tmovzbl (%rax),%eax\n    4110:\teb 05                \tjmp    4117 <sim_main+0x3600>\n    4112:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4117:\t88 85 13 ff ff ff    \tmov    %al,-0xed(%rbp)\n    411d:\t83 bd 14 ff ff ff 00 \tcmpl   $0x0,-0xec(%rbp)\n    4124:\t74 0e                \tje     4134 <sim_main+0x361d>\n    4126:\t8b 85 14 ff ff ff    \tmov    -0xec(%rbp),%eax\n    412c:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    412f:\te9 46 45 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4134:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    413a:\tc1 e8 10             \tshr    $0x10,%eax\n    413d:\t0f b6 d0             \tmovzbl %al,%edx\n    4140:\t0f be 85 13 ff ff ff \tmovsbl -0xed(%rbp),%eax\n    4147:\t89 d2                \tmov    %edx,%edx\n    4149:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    4150:\te9 25 45 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4155:\tc7 85 1c ff ff ff 00 \tmovl   $0x0,-0xe4(%rbp)\n    415c:\t00 00 00 \n    415f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4165:\tc1 e8 18             \tshr    $0x18,%eax\n    4168:\t89 c0                \tmov    %eax,%eax\n    416a:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    4171:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4177:\tc1 e8 08             \tshr    $0x8,%eax\n    417a:\t0f b6 c0             \tmovzbl %al,%eax\n    417d:\t89 c0                \tmov    %eax,%eax\n    417f:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    4186:\t01 d0                \tadd    %edx,%eax\n    4188:\t89 c3                \tmov    %eax,%ebx\n    418a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4191 <sim_main+0x367a>\n    4191:\t89 da                \tmov    %ebx,%edx\n    4193:\tc1 ea 0c             \tshr    $0xc,%edx\n    4196:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    419c:\t89 d2                \tmov    %edx,%edx\n    419e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    41a3:\t48 85 c0             \ttest   %rax,%rax\n    41a6:\t74 63                \tje     420b <sim_main+0x36f4>\n    41a8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 41af <sim_main+0x3698>\n    41af:\t89 da                \tmov    %ebx,%edx\n    41b1:\tc1 ea 0c             \tshr    $0xc,%edx\n    41b4:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    41ba:\t89 d2                \tmov    %edx,%edx\n    41bc:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    41c1:\t8b 40 08             \tmov    0x8(%rax),%eax\n    41c4:\t89 da                \tmov    %ebx,%edx\n    41c6:\tc1 ea 1b             \tshr    $0x1b,%edx\n    41c9:\t39 d0                \tcmp    %edx,%eax\n    41cb:\t75 3e                \tjne    420b <sim_main+0x36f4>\n    41cd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 41d4 <sim_main+0x36bd>\n    41d4:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    41db:\t48 83 c2 01          \tadd    $0x1,%rdx\n    41df:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    41e6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 41ed <sim_main+0x36d6>\n    41ed:\t89 da                \tmov    %ebx,%edx\n    41ef:\tc1 ea 0c             \tshr    $0xc,%edx\n    41f2:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    41f8:\t89 d2                \tmov    %edx,%edx\n    41fa:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    41ff:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4203:\t48 85 c0             \ttest   %rax,%rax\n    4206:\t0f 95 c0             \tsetne  %al\n    4209:\teb 17                \tjmp    4222 <sim_main+0x370b>\n    420b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4212 <sim_main+0x36fb>\n    4212:\t89 de                \tmov    %ebx,%esi\n    4214:\t48 89 c7             \tmov    %rax,%rdi\n    4217:\te8 00 00 00 00       \tcallq  421c <sim_main+0x3705>\n    421c:\t48 85 c0             \ttest   %rax,%rax\n    421f:\t0f 95 c0             \tsetne  %al\n    4222:\t84 c0                \ttest   %al,%al\n    4224:\t0f 84 9c 00 00 00    \tje     42c6 <sim_main+0x37af>\n    422a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4231 <sim_main+0x371a>\n    4231:\t89 da                \tmov    %ebx,%edx\n    4233:\tc1 ea 0c             \tshr    $0xc,%edx\n    4236:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    423c:\t89 d2                \tmov    %edx,%edx\n    423e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4243:\t48 85 c0             \ttest   %rax,%rax\n    4246:\t74 5d                \tje     42a5 <sim_main+0x378e>\n    4248:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 424f <sim_main+0x3738>\n    424f:\t89 da                \tmov    %ebx,%edx\n    4251:\tc1 ea 0c             \tshr    $0xc,%edx\n    4254:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    425a:\t89 d2                \tmov    %edx,%edx\n    425c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4261:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4264:\t89 da                \tmov    %ebx,%edx\n    4266:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4269:\t39 d0                \tcmp    %edx,%eax\n    426b:\t75 38                \tjne    42a5 <sim_main+0x378e>\n    426d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4274 <sim_main+0x375d>\n    4274:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    427b:\t48 83 c2 01          \tadd    $0x1,%rdx\n    427f:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4286:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 428d <sim_main+0x3776>\n    428d:\t89 da                \tmov    %ebx,%edx\n    428f:\tc1 ea 0c             \tshr    $0xc,%edx\n    4292:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4298:\t89 d2                \tmov    %edx,%edx\n    429a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    429f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    42a3:\teb 11                \tjmp    42b6 <sim_main+0x379f>\n    42a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 42ac <sim_main+0x3795>\n    42ac:\t89 de                \tmov    %ebx,%esi\n    42ae:\t48 89 c7             \tmov    %rax,%rdi\n    42b1:\te8 00 00 00 00       \tcallq  42b6 <sim_main+0x379f>\n    42b6:\t89 da                \tmov    %ebx,%edx\n    42b8:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    42be:\t48 01 d0             \tadd    %rdx,%rax\n    42c1:\t0f b6 00             \tmovzbl (%rax),%eax\n    42c4:\teb 05                \tjmp    42cb <sim_main+0x37b4>\n    42c6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    42cb:\t88 85 1b ff ff ff    \tmov    %al,-0xe5(%rbp)\n    42d1:\t83 bd 1c ff ff ff 00 \tcmpl   $0x0,-0xe4(%rbp)\n    42d8:\t74 0e                \tje     42e8 <sim_main+0x37d1>\n    42da:\t8b 85 1c ff ff ff    \tmov    -0xe4(%rbp),%eax\n    42e0:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    42e3:\te9 92 43 00 00       \tjmpq   867a <sim_main+0x7b63>\n    42e8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    42ee:\tc1 e8 10             \tshr    $0x10,%eax\n    42f1:\t0f b6 d0             \tmovzbl %al,%edx\n    42f4:\t0f b6 85 1b ff ff ff \tmovzbl -0xe5(%rbp),%eax\n    42fb:\t89 d2                \tmov    %edx,%edx\n    42fd:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    4304:\te9 71 43 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4309:\tc7 85 24 ff ff ff 00 \tmovl   $0x0,-0xdc(%rbp)\n    4310:\t00 00 00 \n    4313:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4319:\tc1 e8 18             \tshr    $0x18,%eax\n    431c:\t89 c0                \tmov    %eax,%eax\n    431e:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    4325:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    432b:\tc1 e8 08             \tshr    $0x8,%eax\n    432e:\t0f b6 c0             \tmovzbl %al,%eax\n    4331:\t89 c0                \tmov    %eax,%eax\n    4333:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    433a:\t01 d0                \tadd    %edx,%eax\n    433c:\t89 c3                \tmov    %eax,%ebx\n    433e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4345 <sim_main+0x382e>\n    4345:\t89 da                \tmov    %ebx,%edx\n    4347:\tc1 ea 0c             \tshr    $0xc,%edx\n    434a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4350:\t89 d2                \tmov    %edx,%edx\n    4352:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4357:\t48 85 c0             \ttest   %rax,%rax\n    435a:\t74 63                \tje     43bf <sim_main+0x38a8>\n    435c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4363 <sim_main+0x384c>\n    4363:\t89 da                \tmov    %ebx,%edx\n    4365:\tc1 ea 0c             \tshr    $0xc,%edx\n    4368:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    436e:\t89 d2                \tmov    %edx,%edx\n    4370:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4375:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4378:\t89 da                \tmov    %ebx,%edx\n    437a:\tc1 ea 1b             \tshr    $0x1b,%edx\n    437d:\t39 d0                \tcmp    %edx,%eax\n    437f:\t75 3e                \tjne    43bf <sim_main+0x38a8>\n    4381:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4388 <sim_main+0x3871>\n    4388:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    438f:\t48 83 c2 01          \tadd    $0x1,%rdx\n    4393:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    439a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 43a1 <sim_main+0x388a>\n    43a1:\t89 da                \tmov    %ebx,%edx\n    43a3:\tc1 ea 0c             \tshr    $0xc,%edx\n    43a6:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    43ac:\t89 d2                \tmov    %edx,%edx\n    43ae:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    43b3:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    43b7:\t48 85 c0             \ttest   %rax,%rax\n    43ba:\t0f 95 c0             \tsetne  %al\n    43bd:\teb 17                \tjmp    43d6 <sim_main+0x38bf>\n    43bf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 43c6 <sim_main+0x38af>\n    43c6:\t89 de                \tmov    %ebx,%esi\n    43c8:\t48 89 c7             \tmov    %rax,%rdi\n    43cb:\te8 00 00 00 00       \tcallq  43d0 <sim_main+0x38b9>\n    43d0:\t48 85 c0             \ttest   %rax,%rax\n    43d3:\t0f 95 c0             \tsetne  %al\n    43d6:\t84 c0                \ttest   %al,%al\n    43d8:\t0f 84 9c 00 00 00    \tje     447a <sim_main+0x3963>\n    43de:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 43e5 <sim_main+0x38ce>\n    43e5:\t89 da                \tmov    %ebx,%edx\n    43e7:\tc1 ea 0c             \tshr    $0xc,%edx\n    43ea:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    43f0:\t89 d2                \tmov    %edx,%edx\n    43f2:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    43f7:\t48 85 c0             \ttest   %rax,%rax\n    43fa:\t74 5d                \tje     4459 <sim_main+0x3942>\n    43fc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4403 <sim_main+0x38ec>\n    4403:\t89 da                \tmov    %ebx,%edx\n    4405:\tc1 ea 0c             \tshr    $0xc,%edx\n    4408:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    440e:\t89 d2                \tmov    %edx,%edx\n    4410:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4415:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4418:\t89 da                \tmov    %ebx,%edx\n    441a:\tc1 ea 1b             \tshr    $0x1b,%edx\n    441d:\t39 d0                \tcmp    %edx,%eax\n    441f:\t75 38                \tjne    4459 <sim_main+0x3942>\n    4421:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4428 <sim_main+0x3911>\n    4428:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    442f:\t48 83 c2 01          \tadd    $0x1,%rdx\n    4433:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    443a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4441 <sim_main+0x392a>\n    4441:\t89 da                \tmov    %ebx,%edx\n    4443:\tc1 ea 0c             \tshr    $0xc,%edx\n    4446:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    444c:\t89 d2                \tmov    %edx,%edx\n    444e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4453:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4457:\teb 11                \tjmp    446a <sim_main+0x3953>\n    4459:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4460 <sim_main+0x3949>\n    4460:\t89 de                \tmov    %ebx,%esi\n    4462:\t48 89 c7             \tmov    %rax,%rdi\n    4465:\te8 00 00 00 00       \tcallq  446a <sim_main+0x3953>\n    446a:\t89 da                \tmov    %ebx,%edx\n    446c:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    4472:\t48 01 d0             \tadd    %rdx,%rax\n    4475:\t0f b7 00             \tmovzwl (%rax),%eax\n    4478:\teb 05                \tjmp    447f <sim_main+0x3968>\n    447a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    447f:\t66 89 85 22 ff ff ff \tmov    %ax,-0xde(%rbp)\n    4486:\t83 bd 24 ff ff ff 00 \tcmpl   $0x0,-0xdc(%rbp)\n    448d:\t74 0e                \tje     449d <sim_main+0x3986>\n    448f:\t8b 85 24 ff ff ff    \tmov    -0xdc(%rbp),%eax\n    4495:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    4498:\te9 dd 41 00 00       \tjmpq   867a <sim_main+0x7b63>\n    449d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    44a3:\tc1 e8 10             \tshr    $0x10,%eax\n    44a6:\t0f b6 d0             \tmovzbl %al,%edx\n    44a9:\t0f bf 85 22 ff ff ff \tmovswl -0xde(%rbp),%eax\n    44b0:\t89 d2                \tmov    %edx,%edx\n    44b2:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    44b9:\te9 bc 41 00 00       \tjmpq   867a <sim_main+0x7b63>\n    44be:\tc7 85 2c ff ff ff 00 \tmovl   $0x0,-0xd4(%rbp)\n    44c5:\t00 00 00 \n    44c8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    44ce:\tc1 e8 18             \tshr    $0x18,%eax\n    44d1:\t89 c0                \tmov    %eax,%eax\n    44d3:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    44da:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    44e0:\tc1 e8 08             \tshr    $0x8,%eax\n    44e3:\t0f b6 c0             \tmovzbl %al,%eax\n    44e6:\t89 c0                \tmov    %eax,%eax\n    44e8:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    44ef:\t01 d0                \tadd    %edx,%eax\n    44f1:\t89 c3                \tmov    %eax,%ebx\n    44f3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 44fa <sim_main+0x39e3>\n    44fa:\t89 da                \tmov    %ebx,%edx\n    44fc:\tc1 ea 0c             \tshr    $0xc,%edx\n    44ff:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4505:\t89 d2                \tmov    %edx,%edx\n    4507:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    450c:\t48 85 c0             \ttest   %rax,%rax\n    450f:\t74 63                \tje     4574 <sim_main+0x3a5d>\n    4511:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4518 <sim_main+0x3a01>\n    4518:\t89 da                \tmov    %ebx,%edx\n    451a:\tc1 ea 0c             \tshr    $0xc,%edx\n    451d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4523:\t89 d2                \tmov    %edx,%edx\n    4525:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    452a:\t8b 40 08             \tmov    0x8(%rax),%eax\n    452d:\t89 da                \tmov    %ebx,%edx\n    452f:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4532:\t39 d0                \tcmp    %edx,%eax\n    4534:\t75 3e                \tjne    4574 <sim_main+0x3a5d>\n    4536:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 453d <sim_main+0x3a26>\n    453d:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4544:\t48 83 c2 01          \tadd    $0x1,%rdx\n    4548:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    454f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4556 <sim_main+0x3a3f>\n    4556:\t89 da                \tmov    %ebx,%edx\n    4558:\tc1 ea 0c             \tshr    $0xc,%edx\n    455b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4561:\t89 d2                \tmov    %edx,%edx\n    4563:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4568:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    456c:\t48 85 c0             \ttest   %rax,%rax\n    456f:\t0f 95 c0             \tsetne  %al\n    4572:\teb 17                \tjmp    458b <sim_main+0x3a74>\n    4574:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 457b <sim_main+0x3a64>\n    457b:\t89 de                \tmov    %ebx,%esi\n    457d:\t48 89 c7             \tmov    %rax,%rdi\n    4580:\te8 00 00 00 00       \tcallq  4585 <sim_main+0x3a6e>\n    4585:\t48 85 c0             \ttest   %rax,%rax\n    4588:\t0f 95 c0             \tsetne  %al\n    458b:\t84 c0                \ttest   %al,%al\n    458d:\t0f 84 9c 00 00 00    \tje     462f <sim_main+0x3b18>\n    4593:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 459a <sim_main+0x3a83>\n    459a:\t89 da                \tmov    %ebx,%edx\n    459c:\tc1 ea 0c             \tshr    $0xc,%edx\n    459f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    45a5:\t89 d2                \tmov    %edx,%edx\n    45a7:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    45ac:\t48 85 c0             \ttest   %rax,%rax\n    45af:\t74 5d                \tje     460e <sim_main+0x3af7>\n    45b1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 45b8 <sim_main+0x3aa1>\n    45b8:\t89 da                \tmov    %ebx,%edx\n    45ba:\tc1 ea 0c             \tshr    $0xc,%edx\n    45bd:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    45c3:\t89 d2                \tmov    %edx,%edx\n    45c5:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    45ca:\t8b 40 08             \tmov    0x8(%rax),%eax\n    45cd:\t89 da                \tmov    %ebx,%edx\n    45cf:\tc1 ea 1b             \tshr    $0x1b,%edx\n    45d2:\t39 d0                \tcmp    %edx,%eax\n    45d4:\t75 38                \tjne    460e <sim_main+0x3af7>\n    45d6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 45dd <sim_main+0x3ac6>\n    45dd:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    45e4:\t48 83 c2 01          \tadd    $0x1,%rdx\n    45e8:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    45ef:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 45f6 <sim_main+0x3adf>\n    45f6:\t89 da                \tmov    %ebx,%edx\n    45f8:\tc1 ea 0c             \tshr    $0xc,%edx\n    45fb:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4601:\t89 d2                \tmov    %edx,%edx\n    4603:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4608:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    460c:\teb 11                \tjmp    461f <sim_main+0x3b08>\n    460e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4615 <sim_main+0x3afe>\n    4615:\t89 de                \tmov    %ebx,%esi\n    4617:\t48 89 c7             \tmov    %rax,%rdi\n    461a:\te8 00 00 00 00       \tcallq  461f <sim_main+0x3b08>\n    461f:\t89 da                \tmov    %ebx,%edx\n    4621:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    4627:\t48 01 d0             \tadd    %rdx,%rax\n    462a:\t0f b7 00             \tmovzwl (%rax),%eax\n    462d:\teb 05                \tjmp    4634 <sim_main+0x3b1d>\n    462f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4634:\t66 89 85 2a ff ff ff \tmov    %ax,-0xd6(%rbp)\n    463b:\t83 bd 2c ff ff ff 00 \tcmpl   $0x0,-0xd4(%rbp)\n    4642:\t74 0e                \tje     4652 <sim_main+0x3b3b>\n    4644:\t8b 85 2c ff ff ff    \tmov    -0xd4(%rbp),%eax\n    464a:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    464d:\te9 28 40 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4652:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4658:\tc1 e8 10             \tshr    $0x10,%eax\n    465b:\t0f b6 d0             \tmovzbl %al,%edx\n    465e:\t0f b7 85 2a ff ff ff \tmovzwl -0xd6(%rbp),%eax\n    4665:\t89 d2                \tmov    %edx,%edx\n    4667:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    466e:\te9 07 40 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4673:\tc7 85 34 ff ff ff 00 \tmovl   $0x0,-0xcc(%rbp)\n    467a:\t00 00 00 \n    467d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4683:\tc1 e8 18             \tshr    $0x18,%eax\n    4686:\t89 c0                \tmov    %eax,%eax\n    4688:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    468f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4695:\tc1 e8 08             \tshr    $0x8,%eax\n    4698:\t0f b6 c0             \tmovzbl %al,%eax\n    469b:\t89 c0                \tmov    %eax,%eax\n    469d:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    46a4:\t01 d0                \tadd    %edx,%eax\n    46a6:\t89 c3                \tmov    %eax,%ebx\n    46a8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 46af <sim_main+0x3b98>\n    46af:\t89 da                \tmov    %ebx,%edx\n    46b1:\tc1 ea 0c             \tshr    $0xc,%edx\n    46b4:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    46ba:\t89 d2                \tmov    %edx,%edx\n    46bc:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    46c1:\t48 85 c0             \ttest   %rax,%rax\n    46c4:\t74 63                \tje     4729 <sim_main+0x3c12>\n    46c6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 46cd <sim_main+0x3bb6>\n    46cd:\t89 da                \tmov    %ebx,%edx\n    46cf:\tc1 ea 0c             \tshr    $0xc,%edx\n    46d2:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    46d8:\t89 d2                \tmov    %edx,%edx\n    46da:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    46df:\t8b 40 08             \tmov    0x8(%rax),%eax\n    46e2:\t89 da                \tmov    %ebx,%edx\n    46e4:\tc1 ea 1b             \tshr    $0x1b,%edx\n    46e7:\t39 d0                \tcmp    %edx,%eax\n    46e9:\t75 3e                \tjne    4729 <sim_main+0x3c12>\n    46eb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 46f2 <sim_main+0x3bdb>\n    46f2:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    46f9:\t48 83 c2 01          \tadd    $0x1,%rdx\n    46fd:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4704:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 470b <sim_main+0x3bf4>\n    470b:\t89 da                \tmov    %ebx,%edx\n    470d:\tc1 ea 0c             \tshr    $0xc,%edx\n    4710:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4716:\t89 d2                \tmov    %edx,%edx\n    4718:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    471d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4721:\t48 85 c0             \ttest   %rax,%rax\n    4724:\t0f 95 c0             \tsetne  %al\n    4727:\teb 17                \tjmp    4740 <sim_main+0x3c29>\n    4729:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4730 <sim_main+0x3c19>\n    4730:\t89 de                \tmov    %ebx,%esi\n    4732:\t48 89 c7             \tmov    %rax,%rdi\n    4735:\te8 00 00 00 00       \tcallq  473a <sim_main+0x3c23>\n    473a:\t48 85 c0             \ttest   %rax,%rax\n    473d:\t0f 95 c0             \tsetne  %al\n    4740:\t84 c0                \ttest   %al,%al\n    4742:\t0f 84 9b 00 00 00    \tje     47e3 <sim_main+0x3ccc>\n    4748:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 474f <sim_main+0x3c38>\n    474f:\t89 da                \tmov    %ebx,%edx\n    4751:\tc1 ea 0c             \tshr    $0xc,%edx\n    4754:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    475a:\t89 d2                \tmov    %edx,%edx\n    475c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4761:\t48 85 c0             \ttest   %rax,%rax\n    4764:\t74 5d                \tje     47c3 <sim_main+0x3cac>\n    4766:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 476d <sim_main+0x3c56>\n    476d:\t89 da                \tmov    %ebx,%edx\n    476f:\tc1 ea 0c             \tshr    $0xc,%edx\n    4772:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4778:\t89 d2                \tmov    %edx,%edx\n    477a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    477f:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4782:\t89 da                \tmov    %ebx,%edx\n    4784:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4787:\t39 d0                \tcmp    %edx,%eax\n    4789:\t75 38                \tjne    47c3 <sim_main+0x3cac>\n    478b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4792 <sim_main+0x3c7b>\n    4792:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4799:\t48 83 c2 01          \tadd    $0x1,%rdx\n    479d:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    47a4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 47ab <sim_main+0x3c94>\n    47ab:\t89 da                \tmov    %ebx,%edx\n    47ad:\tc1 ea 0c             \tshr    $0xc,%edx\n    47b0:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    47b6:\t89 d2                \tmov    %edx,%edx\n    47b8:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    47bd:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    47c1:\teb 11                \tjmp    47d4 <sim_main+0x3cbd>\n    47c3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 47ca <sim_main+0x3cb3>\n    47ca:\t89 de                \tmov    %ebx,%esi\n    47cc:\t48 89 c7             \tmov    %rax,%rdi\n    47cf:\te8 00 00 00 00       \tcallq  47d4 <sim_main+0x3cbd>\n    47d4:\t89 da                \tmov    %ebx,%edx\n    47d6:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    47dc:\t48 01 d0             \tadd    %rdx,%rax\n    47df:\t8b 00                \tmov    (%rax),%eax\n    47e1:\teb 05                \tjmp    47e8 <sim_main+0x3cd1>\n    47e3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    47e8:\t89 85 30 ff ff ff    \tmov    %eax,-0xd0(%rbp)\n    47ee:\t83 bd 34 ff ff ff 00 \tcmpl   $0x0,-0xcc(%rbp)\n    47f5:\t74 0e                \tje     4805 <sim_main+0x3cee>\n    47f7:\t8b 85 34 ff ff ff    \tmov    -0xcc(%rbp),%eax\n    47fd:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    4800:\te9 75 3e 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4805:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    480b:\tc1 e8 10             \tshr    $0x10,%eax\n    480e:\t0f b6 d0             \tmovzbl %al,%edx\n    4811:\t8b 85 30 ff ff ff    \tmov    -0xd0(%rbp),%eax\n    4817:\t89 d2                \tmov    %edx,%edx\n    4819:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    4820:\te9 55 3e 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4825:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    482b:\t25 00 00 01 00       \tand    $0x10000,%eax\n    4830:\t85 c0                \ttest   %eax,%eax\n    4832:\t74 0c                \tje     4840 <sim_main+0x3d29>\n    4834:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    483b:\te9 3a 3e 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4840:\tc7 85 40 ff ff ff 00 \tmovl   $0x0,-0xc0(%rbp)\n    4847:\t00 00 00 \n    484a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4850:\tc1 e8 18             \tshr    $0x18,%eax\n    4853:\t89 c0                \tmov    %eax,%eax\n    4855:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    485c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4862:\tc1 e8 08             \tshr    $0x8,%eax\n    4865:\t0f b6 c0             \tmovzbl %al,%eax\n    4868:\t89 c0                \tmov    %eax,%eax\n    486a:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    4871:\t01 d0                \tadd    %edx,%eax\n    4873:\t89 c3                \tmov    %eax,%ebx\n    4875:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 487c <sim_main+0x3d65>\n    487c:\t89 da                \tmov    %ebx,%edx\n    487e:\tc1 ea 0c             \tshr    $0xc,%edx\n    4881:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4887:\t89 d2                \tmov    %edx,%edx\n    4889:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    488e:\t48 85 c0             \ttest   %rax,%rax\n    4891:\t74 63                \tje     48f6 <sim_main+0x3ddf>\n    4893:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 489a <sim_main+0x3d83>\n    489a:\t89 da                \tmov    %ebx,%edx\n    489c:\tc1 ea 0c             \tshr    $0xc,%edx\n    489f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    48a5:\t89 d2                \tmov    %edx,%edx\n    48a7:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    48ac:\t8b 40 08             \tmov    0x8(%rax),%eax\n    48af:\t89 da                \tmov    %ebx,%edx\n    48b1:\tc1 ea 1b             \tshr    $0x1b,%edx\n    48b4:\t39 d0                \tcmp    %edx,%eax\n    48b6:\t75 3e                \tjne    48f6 <sim_main+0x3ddf>\n    48b8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 48bf <sim_main+0x3da8>\n    48bf:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    48c6:\t48 83 c2 01          \tadd    $0x1,%rdx\n    48ca:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    48d1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 48d8 <sim_main+0x3dc1>\n    48d8:\t89 da                \tmov    %ebx,%edx\n    48da:\tc1 ea 0c             \tshr    $0xc,%edx\n    48dd:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    48e3:\t89 d2                \tmov    %edx,%edx\n    48e5:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    48ea:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    48ee:\t48 85 c0             \ttest   %rax,%rax\n    48f1:\t0f 95 c0             \tsetne  %al\n    48f4:\teb 17                \tjmp    490d <sim_main+0x3df6>\n    48f6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 48fd <sim_main+0x3de6>\n    48fd:\t89 de                \tmov    %ebx,%esi\n    48ff:\t48 89 c7             \tmov    %rax,%rdi\n    4902:\te8 00 00 00 00       \tcallq  4907 <sim_main+0x3df0>\n    4907:\t48 85 c0             \ttest   %rax,%rax\n    490a:\t0f 95 c0             \tsetne  %al\n    490d:\t84 c0                \ttest   %al,%al\n    490f:\t0f 84 9b 00 00 00    \tje     49b0 <sim_main+0x3e99>\n    4915:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 491c <sim_main+0x3e05>\n    491c:\t89 da                \tmov    %ebx,%edx\n    491e:\tc1 ea 0c             \tshr    $0xc,%edx\n    4921:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4927:\t89 d2                \tmov    %edx,%edx\n    4929:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    492e:\t48 85 c0             \ttest   %rax,%rax\n    4931:\t74 5d                \tje     4990 <sim_main+0x3e79>\n    4933:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 493a <sim_main+0x3e23>\n    493a:\t89 da                \tmov    %ebx,%edx\n    493c:\tc1 ea 0c             \tshr    $0xc,%edx\n    493f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4945:\t89 d2                \tmov    %edx,%edx\n    4947:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    494c:\t8b 40 08             \tmov    0x8(%rax),%eax\n    494f:\t89 da                \tmov    %ebx,%edx\n    4951:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4954:\t39 d0                \tcmp    %edx,%eax\n    4956:\t75 38                \tjne    4990 <sim_main+0x3e79>\n    4958:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 495f <sim_main+0x3e48>\n    495f:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4966:\t48 83 c2 01          \tadd    $0x1,%rdx\n    496a:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4971:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4978 <sim_main+0x3e61>\n    4978:\t89 da                \tmov    %ebx,%edx\n    497a:\tc1 ea 0c             \tshr    $0xc,%edx\n    497d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4983:\t89 d2                \tmov    %edx,%edx\n    4985:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    498a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    498e:\teb 11                \tjmp    49a1 <sim_main+0x3e8a>\n    4990:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4997 <sim_main+0x3e80>\n    4997:\t89 de                \tmov    %ebx,%esi\n    4999:\t48 89 c7             \tmov    %rax,%rdi\n    499c:\te8 00 00 00 00       \tcallq  49a1 <sim_main+0x3e8a>\n    49a1:\t89 da                \tmov    %ebx,%edx\n    49a3:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    49a9:\t48 01 d0             \tadd    %rdx,%rax\n    49ac:\t8b 00                \tmov    (%rax),%eax\n    49ae:\teb 05                \tjmp    49b5 <sim_main+0x3e9e>\n    49b0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    49b5:\t89 85 3c ff ff ff    \tmov    %eax,-0xc4(%rbp)\n    49bb:\t83 bd 40 ff ff ff 00 \tcmpl   $0x0,-0xc0(%rbp)\n    49c2:\t74 0e                \tje     49d2 <sim_main+0x3ebb>\n    49c4:\t8b 85 40 ff ff ff    \tmov    -0xc0(%rbp),%eax\n    49ca:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    49cd:\te9 a8 3c 00 00       \tjmpq   867a <sim_main+0x7b63>\n    49d2:\tc7 85 40 ff ff ff 00 \tmovl   $0x0,-0xc0(%rbp)\n    49d9:\t00 00 00 \n    49dc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    49e2:\tc1 e8 18             \tshr    $0x18,%eax\n    49e5:\t89 c0                \tmov    %eax,%eax\n    49e7:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    49ee:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    49f4:\tc1 e8 08             \tshr    $0x8,%eax\n    49f7:\t0f b6 c0             \tmovzbl %al,%eax\n    49fa:\t89 c0                \tmov    %eax,%eax\n    49fc:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    4a03:\t01 d0                \tadd    %edx,%eax\n    4a05:\t83 c0 04             \tadd    $0x4,%eax\n    4a08:\t89 c3                \tmov    %eax,%ebx\n    4a0a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4a11 <sim_main+0x3efa>\n    4a11:\t89 da                \tmov    %ebx,%edx\n    4a13:\tc1 ea 0c             \tshr    $0xc,%edx\n    4a16:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4a1c:\t89 d2                \tmov    %edx,%edx\n    4a1e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4a23:\t48 85 c0             \ttest   %rax,%rax\n    4a26:\t74 63                \tje     4a8b <sim_main+0x3f74>\n    4a28:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4a2f <sim_main+0x3f18>\n    4a2f:\t89 da                \tmov    %ebx,%edx\n    4a31:\tc1 ea 0c             \tshr    $0xc,%edx\n    4a34:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4a3a:\t89 d2                \tmov    %edx,%edx\n    4a3c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4a41:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4a44:\t89 da                \tmov    %ebx,%edx\n    4a46:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4a49:\t39 d0                \tcmp    %edx,%eax\n    4a4b:\t75 3e                \tjne    4a8b <sim_main+0x3f74>\n    4a4d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4a54 <sim_main+0x3f3d>\n    4a54:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4a5b:\t48 83 c2 01          \tadd    $0x1,%rdx\n    4a5f:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4a66:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4a6d <sim_main+0x3f56>\n    4a6d:\t89 da                \tmov    %ebx,%edx\n    4a6f:\tc1 ea 0c             \tshr    $0xc,%edx\n    4a72:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4a78:\t89 d2                \tmov    %edx,%edx\n    4a7a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4a7f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4a83:\t48 85 c0             \ttest   %rax,%rax\n    4a86:\t0f 95 c0             \tsetne  %al\n    4a89:\teb 17                \tjmp    4aa2 <sim_main+0x3f8b>\n    4a8b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4a92 <sim_main+0x3f7b>\n    4a92:\t89 de                \tmov    %ebx,%esi\n    4a94:\t48 89 c7             \tmov    %rax,%rdi\n    4a97:\te8 00 00 00 00       \tcallq  4a9c <sim_main+0x3f85>\n    4a9c:\t48 85 c0             \ttest   %rax,%rax\n    4a9f:\t0f 95 c0             \tsetne  %al\n    4aa2:\t84 c0                \ttest   %al,%al\n    4aa4:\t0f 84 9b 00 00 00    \tje     4b45 <sim_main+0x402e>\n    4aaa:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4ab1 <sim_main+0x3f9a>\n    4ab1:\t89 da                \tmov    %ebx,%edx\n    4ab3:\tc1 ea 0c             \tshr    $0xc,%edx\n    4ab6:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4abc:\t89 d2                \tmov    %edx,%edx\n    4abe:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4ac3:\t48 85 c0             \ttest   %rax,%rax\n    4ac6:\t74 5d                \tje     4b25 <sim_main+0x400e>\n    4ac8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4acf <sim_main+0x3fb8>\n    4acf:\t89 da                \tmov    %ebx,%edx\n    4ad1:\tc1 ea 0c             \tshr    $0xc,%edx\n    4ad4:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4ada:\t89 d2                \tmov    %edx,%edx\n    4adc:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4ae1:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4ae4:\t89 da                \tmov    %ebx,%edx\n    4ae6:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4ae9:\t39 d0                \tcmp    %edx,%eax\n    4aeb:\t75 38                \tjne    4b25 <sim_main+0x400e>\n    4aed:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4af4 <sim_main+0x3fdd>\n    4af4:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4afb:\t48 83 c2 01          \tadd    $0x1,%rdx\n    4aff:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4b06:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4b0d <sim_main+0x3ff6>\n    4b0d:\t89 da                \tmov    %ebx,%edx\n    4b0f:\tc1 ea 0c             \tshr    $0xc,%edx\n    4b12:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4b18:\t89 d2                \tmov    %edx,%edx\n    4b1a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4b1f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4b23:\teb 11                \tjmp    4b36 <sim_main+0x401f>\n    4b25:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4b2c <sim_main+0x4015>\n    4b2c:\t89 de                \tmov    %ebx,%esi\n    4b2e:\t48 89 c7             \tmov    %rax,%rdi\n    4b31:\te8 00 00 00 00       \tcallq  4b36 <sim_main+0x401f>\n    4b36:\t89 da                \tmov    %ebx,%edx\n    4b38:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    4b3e:\t48 01 d0             \tadd    %rdx,%rax\n    4b41:\t8b 00                \tmov    (%rax),%eax\n    4b43:\teb 05                \tjmp    4b4a <sim_main+0x4033>\n    4b45:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4b4a:\t89 85 38 ff ff ff    \tmov    %eax,-0xc8(%rbp)\n    4b50:\t83 bd 40 ff ff ff 00 \tcmpl   $0x0,-0xc0(%rbp)\n    4b57:\t74 0e                \tje     4b67 <sim_main+0x4050>\n    4b59:\t8b 85 40 ff ff ff    \tmov    -0xc0(%rbp),%eax\n    4b5f:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    4b62:\te9 13 3b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4b67:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4b6d:\tc1 e8 10             \tshr    $0x10,%eax\n    4b70:\t0f b6 d0             \tmovzbl %al,%edx\n    4b73:\t8b 85 3c ff ff ff    \tmov    -0xc4(%rbp),%eax\n    4b79:\t89 d2                \tmov    %edx,%edx\n    4b7b:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    4b82:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4b88:\tc1 e8 10             \tshr    $0x10,%eax\n    4b8b:\t0f b6 c0             \tmovzbl %al,%eax\n    4b8e:\t8d 50 01             \tlea    0x1(%rax),%edx\n    4b91:\t8b 85 38 ff ff ff    \tmov    -0xc8(%rbp),%eax\n    4b97:\t89 d2                \tmov    %edx,%edx\n    4b99:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    4ba0:\te9 d5 3a 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4ba5:\tc7 85 48 ff ff ff 00 \tmovl   $0x0,-0xb8(%rbp)\n    4bac:\t00 00 00 \n    4baf:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4bb5:\tc1 e8 18             \tshr    $0x18,%eax\n    4bb8:\t89 c0                \tmov    %eax,%eax\n    4bba:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    4bc1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4bc7:\tc1 e8 08             \tshr    $0x8,%eax\n    4bca:\t0f b6 c0             \tmovzbl %al,%eax\n    4bcd:\t89 c0                \tmov    %eax,%eax\n    4bcf:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    4bd6:\t01 d0                \tadd    %edx,%eax\n    4bd8:\t89 c3                \tmov    %eax,%ebx\n    4bda:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4be1 <sim_main+0x40ca>\n    4be1:\t89 da                \tmov    %ebx,%edx\n    4be3:\tc1 ea 0c             \tshr    $0xc,%edx\n    4be6:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4bec:\t89 d2                \tmov    %edx,%edx\n    4bee:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4bf3:\t48 85 c0             \ttest   %rax,%rax\n    4bf6:\t74 63                \tje     4c5b <sim_main+0x4144>\n    4bf8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4bff <sim_main+0x40e8>\n    4bff:\t89 da                \tmov    %ebx,%edx\n    4c01:\tc1 ea 0c             \tshr    $0xc,%edx\n    4c04:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4c0a:\t89 d2                \tmov    %edx,%edx\n    4c0c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4c11:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4c14:\t89 da                \tmov    %ebx,%edx\n    4c16:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4c19:\t39 d0                \tcmp    %edx,%eax\n    4c1b:\t75 3e                \tjne    4c5b <sim_main+0x4144>\n    4c1d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4c24 <sim_main+0x410d>\n    4c24:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4c2b:\t48 83 c2 01          \tadd    $0x1,%rdx\n    4c2f:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4c36:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4c3d <sim_main+0x4126>\n    4c3d:\t89 da                \tmov    %ebx,%edx\n    4c3f:\tc1 ea 0c             \tshr    $0xc,%edx\n    4c42:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4c48:\t89 d2                \tmov    %edx,%edx\n    4c4a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4c4f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4c53:\t48 85 c0             \ttest   %rax,%rax\n    4c56:\t0f 95 c0             \tsetne  %al\n    4c59:\teb 17                \tjmp    4c72 <sim_main+0x415b>\n    4c5b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4c62 <sim_main+0x414b>\n    4c62:\t89 de                \tmov    %ebx,%esi\n    4c64:\t48 89 c7             \tmov    %rax,%rdi\n    4c67:\te8 00 00 00 00       \tcallq  4c6c <sim_main+0x4155>\n    4c6c:\t48 85 c0             \ttest   %rax,%rax\n    4c6f:\t0f 95 c0             \tsetne  %al\n    4c72:\t84 c0                \ttest   %al,%al\n    4c74:\t0f 84 9b 00 00 00    \tje     4d15 <sim_main+0x41fe>\n    4c7a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4c81 <sim_main+0x416a>\n    4c81:\t89 da                \tmov    %ebx,%edx\n    4c83:\tc1 ea 0c             \tshr    $0xc,%edx\n    4c86:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4c8c:\t89 d2                \tmov    %edx,%edx\n    4c8e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4c93:\t48 85 c0             \ttest   %rax,%rax\n    4c96:\t74 5d                \tje     4cf5 <sim_main+0x41de>\n    4c98:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4c9f <sim_main+0x4188>\n    4c9f:\t89 da                \tmov    %ebx,%edx\n    4ca1:\tc1 ea 0c             \tshr    $0xc,%edx\n    4ca4:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4caa:\t89 d2                \tmov    %edx,%edx\n    4cac:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4cb1:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4cb4:\t89 da                \tmov    %ebx,%edx\n    4cb6:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4cb9:\t39 d0                \tcmp    %edx,%eax\n    4cbb:\t75 38                \tjne    4cf5 <sim_main+0x41de>\n    4cbd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4cc4 <sim_main+0x41ad>\n    4cc4:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4ccb:\t48 83 c2 01          \tadd    $0x1,%rdx\n    4ccf:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4cd6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4cdd <sim_main+0x41c6>\n    4cdd:\t89 da                \tmov    %ebx,%edx\n    4cdf:\tc1 ea 0c             \tshr    $0xc,%edx\n    4ce2:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4ce8:\t89 d2                \tmov    %edx,%edx\n    4cea:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4cef:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4cf3:\teb 11                \tjmp    4d06 <sim_main+0x41ef>\n    4cf5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4cfc <sim_main+0x41e5>\n    4cfc:\t89 de                \tmov    %ebx,%esi\n    4cfe:\t48 89 c7             \tmov    %rax,%rdi\n    4d01:\te8 00 00 00 00       \tcallq  4d06 <sim_main+0x41ef>\n    4d06:\t89 da                \tmov    %ebx,%edx\n    4d08:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    4d0e:\t48 01 d0             \tadd    %rdx,%rax\n    4d11:\t8b 00                \tmov    (%rax),%eax\n    4d13:\teb 05                \tjmp    4d1a <sim_main+0x4203>\n    4d15:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4d1a:\t89 85 44 ff ff ff    \tmov    %eax,-0xbc(%rbp)\n    4d20:\t83 bd 48 ff ff ff 00 \tcmpl   $0x0,-0xb8(%rbp)\n    4d27:\t74 0e                \tje     4d37 <sim_main+0x4220>\n    4d29:\t8b 85 48 ff ff ff    \tmov    -0xb8(%rbp),%eax\n    4d2f:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    4d32:\te9 43 39 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4d37:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4d3d:\tc1 e8 10             \tshr    $0x10,%eax\n    4d40:\t0f b6 d0             \tmovzbl %al,%edx\n    4d43:\t8b 85 44 ff ff ff    \tmov    -0xbc(%rbp),%eax\n    4d49:\t89 d2                \tmov    %edx,%edx\n    4d4b:\t48 83 c2 20          \tadd    $0x20,%rdx\n    4d4f:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    4d56:\te9 1f 39 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4d5b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4d61:\t25 00 00 01 00       \tand    $0x10000,%eax\n    4d66:\t85 c0                \ttest   %eax,%eax\n    4d68:\t74 0c                \tje     4d76 <sim_main+0x425f>\n    4d6a:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    4d71:\te9 04 39 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4d76:\tc7 85 54 ff ff ff 00 \tmovl   $0x0,-0xac(%rbp)\n    4d7d:\t00 00 00 \n    4d80:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4d86:\tc1 e8 18             \tshr    $0x18,%eax\n    4d89:\t89 c0                \tmov    %eax,%eax\n    4d8b:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    4d92:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4d98:\tc1 e8 08             \tshr    $0x8,%eax\n    4d9b:\t0f b6 c0             \tmovzbl %al,%eax\n    4d9e:\t89 c0                \tmov    %eax,%eax\n    4da0:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    4da7:\t01 d0                \tadd    %edx,%eax\n    4da9:\t89 c3                \tmov    %eax,%ebx\n    4dab:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4db2 <sim_main+0x429b>\n    4db2:\t89 da                \tmov    %ebx,%edx\n    4db4:\tc1 ea 0c             \tshr    $0xc,%edx\n    4db7:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4dbd:\t89 d2                \tmov    %edx,%edx\n    4dbf:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4dc4:\t48 85 c0             \ttest   %rax,%rax\n    4dc7:\t74 63                \tje     4e2c <sim_main+0x4315>\n    4dc9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4dd0 <sim_main+0x42b9>\n    4dd0:\t89 da                \tmov    %ebx,%edx\n    4dd2:\tc1 ea 0c             \tshr    $0xc,%edx\n    4dd5:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4ddb:\t89 d2                \tmov    %edx,%edx\n    4ddd:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4de2:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4de5:\t89 da                \tmov    %ebx,%edx\n    4de7:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4dea:\t39 d0                \tcmp    %edx,%eax\n    4dec:\t75 3e                \tjne    4e2c <sim_main+0x4315>\n    4dee:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4df5 <sim_main+0x42de>\n    4df5:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4dfc:\t48 83 c2 01          \tadd    $0x1,%rdx\n    4e00:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4e07:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4e0e <sim_main+0x42f7>\n    4e0e:\t89 da                \tmov    %ebx,%edx\n    4e10:\tc1 ea 0c             \tshr    $0xc,%edx\n    4e13:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4e19:\t89 d2                \tmov    %edx,%edx\n    4e1b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4e20:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4e24:\t48 85 c0             \ttest   %rax,%rax\n    4e27:\t0f 95 c0             \tsetne  %al\n    4e2a:\teb 17                \tjmp    4e43 <sim_main+0x432c>\n    4e2c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4e33 <sim_main+0x431c>\n    4e33:\t89 de                \tmov    %ebx,%esi\n    4e35:\t48 89 c7             \tmov    %rax,%rdi\n    4e38:\te8 00 00 00 00       \tcallq  4e3d <sim_main+0x4326>\n    4e3d:\t48 85 c0             \ttest   %rax,%rax\n    4e40:\t0f 95 c0             \tsetne  %al\n    4e43:\t84 c0                \ttest   %al,%al\n    4e45:\t0f 84 9b 00 00 00    \tje     4ee6 <sim_main+0x43cf>\n    4e4b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4e52 <sim_main+0x433b>\n    4e52:\t89 da                \tmov    %ebx,%edx\n    4e54:\tc1 ea 0c             \tshr    $0xc,%edx\n    4e57:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4e5d:\t89 d2                \tmov    %edx,%edx\n    4e5f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4e64:\t48 85 c0             \ttest   %rax,%rax\n    4e67:\t74 5d                \tje     4ec6 <sim_main+0x43af>\n    4e69:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4e70 <sim_main+0x4359>\n    4e70:\t89 da                \tmov    %ebx,%edx\n    4e72:\tc1 ea 0c             \tshr    $0xc,%edx\n    4e75:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4e7b:\t89 d2                \tmov    %edx,%edx\n    4e7d:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4e82:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4e85:\t89 da                \tmov    %ebx,%edx\n    4e87:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4e8a:\t39 d0                \tcmp    %edx,%eax\n    4e8c:\t75 38                \tjne    4ec6 <sim_main+0x43af>\n    4e8e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4e95 <sim_main+0x437e>\n    4e95:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4e9c:\t48 83 c2 01          \tadd    $0x1,%rdx\n    4ea0:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4ea7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4eae <sim_main+0x4397>\n    4eae:\t89 da                \tmov    %ebx,%edx\n    4eb0:\tc1 ea 0c             \tshr    $0xc,%edx\n    4eb3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4eb9:\t89 d2                \tmov    %edx,%edx\n    4ebb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4ec0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4ec4:\teb 11                \tjmp    4ed7 <sim_main+0x43c0>\n    4ec6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4ecd <sim_main+0x43b6>\n    4ecd:\t89 de                \tmov    %ebx,%esi\n    4ecf:\t48 89 c7             \tmov    %rax,%rdi\n    4ed2:\te8 00 00 00 00       \tcallq  4ed7 <sim_main+0x43c0>\n    4ed7:\t89 da                \tmov    %ebx,%edx\n    4ed9:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    4edf:\t48 01 d0             \tadd    %rdx,%rax\n    4ee2:\t8b 00                \tmov    (%rax),%eax\n    4ee4:\teb 05                \tjmp    4eeb <sim_main+0x43d4>\n    4ee6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4eeb:\t89 85 50 ff ff ff    \tmov    %eax,-0xb0(%rbp)\n    4ef1:\t83 bd 54 ff ff ff 00 \tcmpl   $0x0,-0xac(%rbp)\n    4ef8:\t74 0e                \tje     4f08 <sim_main+0x43f1>\n    4efa:\t8b 85 54 ff ff ff    \tmov    -0xac(%rbp),%eax\n    4f00:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    4f03:\te9 72 37 00 00       \tjmpq   867a <sim_main+0x7b63>\n    4f08:\tc7 85 54 ff ff ff 00 \tmovl   $0x0,-0xac(%rbp)\n    4f0f:\t00 00 00 \n    4f12:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4f18:\tc1 e8 18             \tshr    $0x18,%eax\n    4f1b:\t89 c0                \tmov    %eax,%eax\n    4f1d:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    4f24:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    4f2a:\tc1 e8 08             \tshr    $0x8,%eax\n    4f2d:\t0f b6 c0             \tmovzbl %al,%eax\n    4f30:\t89 c0                \tmov    %eax,%eax\n    4f32:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    4f39:\t01 d0                \tadd    %edx,%eax\n    4f3b:\t83 c0 04             \tadd    $0x4,%eax\n    4f3e:\t89 c3                \tmov    %eax,%ebx\n    4f40:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4f47 <sim_main+0x4430>\n    4f47:\t89 da                \tmov    %ebx,%edx\n    4f49:\tc1 ea 0c             \tshr    $0xc,%edx\n    4f4c:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4f52:\t89 d2                \tmov    %edx,%edx\n    4f54:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4f59:\t48 85 c0             \ttest   %rax,%rax\n    4f5c:\t74 63                \tje     4fc1 <sim_main+0x44aa>\n    4f5e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4f65 <sim_main+0x444e>\n    4f65:\t89 da                \tmov    %ebx,%edx\n    4f67:\tc1 ea 0c             \tshr    $0xc,%edx\n    4f6a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4f70:\t89 d2                \tmov    %edx,%edx\n    4f72:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4f77:\t8b 40 08             \tmov    0x8(%rax),%eax\n    4f7a:\t89 da                \tmov    %ebx,%edx\n    4f7c:\tc1 ea 1b             \tshr    $0x1b,%edx\n    4f7f:\t39 d0                \tcmp    %edx,%eax\n    4f81:\t75 3e                \tjne    4fc1 <sim_main+0x44aa>\n    4f83:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4f8a <sim_main+0x4473>\n    4f8a:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    4f91:\t48 83 c2 01          \tadd    $0x1,%rdx\n    4f95:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    4f9c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4fa3 <sim_main+0x448c>\n    4fa3:\t89 da                \tmov    %ebx,%edx\n    4fa5:\tc1 ea 0c             \tshr    $0xc,%edx\n    4fa8:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4fae:\t89 d2                \tmov    %edx,%edx\n    4fb0:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4fb5:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    4fb9:\t48 85 c0             \ttest   %rax,%rax\n    4fbc:\t0f 95 c0             \tsetne  %al\n    4fbf:\teb 17                \tjmp    4fd8 <sim_main+0x44c1>\n    4fc1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4fc8 <sim_main+0x44b1>\n    4fc8:\t89 de                \tmov    %ebx,%esi\n    4fca:\t48 89 c7             \tmov    %rax,%rdi\n    4fcd:\te8 00 00 00 00       \tcallq  4fd2 <sim_main+0x44bb>\n    4fd2:\t48 85 c0             \ttest   %rax,%rax\n    4fd5:\t0f 95 c0             \tsetne  %al\n    4fd8:\t84 c0                \ttest   %al,%al\n    4fda:\t0f 84 9b 00 00 00    \tje     507b <sim_main+0x4564>\n    4fe0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4fe7 <sim_main+0x44d0>\n    4fe7:\t89 da                \tmov    %ebx,%edx\n    4fe9:\tc1 ea 0c             \tshr    $0xc,%edx\n    4fec:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    4ff2:\t89 d2                \tmov    %edx,%edx\n    4ff4:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    4ff9:\t48 85 c0             \ttest   %rax,%rax\n    4ffc:\t74 5d                \tje     505b <sim_main+0x4544>\n    4ffe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5005 <sim_main+0x44ee>\n    5005:\t89 da                \tmov    %ebx,%edx\n    5007:\tc1 ea 0c             \tshr    $0xc,%edx\n    500a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5010:\t89 d2                \tmov    %edx,%edx\n    5012:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5017:\t8b 40 08             \tmov    0x8(%rax),%eax\n    501a:\t89 da                \tmov    %ebx,%edx\n    501c:\tc1 ea 1b             \tshr    $0x1b,%edx\n    501f:\t39 d0                \tcmp    %edx,%eax\n    5021:\t75 38                \tjne    505b <sim_main+0x4544>\n    5023:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 502a <sim_main+0x4513>\n    502a:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5031:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5035:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    503c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5043 <sim_main+0x452c>\n    5043:\t89 da                \tmov    %ebx,%edx\n    5045:\tc1 ea 0c             \tshr    $0xc,%edx\n    5048:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    504e:\t89 d2                \tmov    %edx,%edx\n    5050:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5055:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5059:\teb 11                \tjmp    506c <sim_main+0x4555>\n    505b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5062 <sim_main+0x454b>\n    5062:\t89 de                \tmov    %ebx,%esi\n    5064:\t48 89 c7             \tmov    %rax,%rdi\n    5067:\te8 00 00 00 00       \tcallq  506c <sim_main+0x4555>\n    506c:\t89 da                \tmov    %ebx,%edx\n    506e:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    5074:\t48 01 d0             \tadd    %rdx,%rax\n    5077:\t8b 00                \tmov    (%rax),%eax\n    5079:\teb 05                \tjmp    5080 <sim_main+0x4569>\n    507b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    5080:\t89 85 4c ff ff ff    \tmov    %eax,-0xb4(%rbp)\n    5086:\t83 bd 54 ff ff ff 00 \tcmpl   $0x0,-0xac(%rbp)\n    508d:\t74 0e                \tje     509d <sim_main+0x4586>\n    508f:\t8b 85 54 ff ff ff    \tmov    -0xac(%rbp),%eax\n    5095:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    5098:\te9 dd 35 00 00       \tjmpq   867a <sim_main+0x7b63>\n    509d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    50a3:\tc1 e8 10             \tshr    $0x10,%eax\n    50a6:\t0f b6 d0             \tmovzbl %al,%edx\n    50a9:\t8b 85 50 ff ff ff    \tmov    -0xb0(%rbp),%eax\n    50af:\t89 d2                \tmov    %edx,%edx\n    50b1:\t48 83 c2 20          \tadd    $0x20,%rdx\n    50b5:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    50bc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    50c2:\tc1 e8 10             \tshr    $0x10,%eax\n    50c5:\t0f b6 c0             \tmovzbl %al,%eax\n    50c8:\t8d 50 01             \tlea    0x1(%rax),%edx\n    50cb:\t8b 85 4c ff ff ff    \tmov    -0xb4(%rbp),%eax\n    50d1:\t89 d2                \tmov    %edx,%edx\n    50d3:\t48 83 c2 20          \tadd    $0x20,%rdx\n    50d7:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    50de:\te9 97 35 00 00       \tjmpq   867a <sim_main+0x7b63>\n    50e3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    50e9:\tc1 e8 10             \tshr    $0x10,%eax\n    50ec:\t0f b6 c0             \tmovzbl %al,%eax\n    50ef:\t89 c0                \tmov    %eax,%eax\n    50f1:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    50f8:\t88 85 5f ff ff ff    \tmov    %al,-0xa1(%rbp)\n    50fe:\tc7 85 58 ff ff ff 00 \tmovl   $0x0,-0xa8(%rbp)\n    5105:\t00 00 00 \n    5108:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    510e:\tc1 e8 18             \tshr    $0x18,%eax\n    5111:\t89 c0                \tmov    %eax,%eax\n    5113:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    511a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5120:\tc1 e8 08             \tshr    $0x8,%eax\n    5123:\t0f b6 c0             \tmovzbl %al,%eax\n    5126:\t89 c0                \tmov    %eax,%eax\n    5128:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    512f:\t01 d0                \tadd    %edx,%eax\n    5131:\t89 c3                \tmov    %eax,%ebx\n    5133:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 513a <sim_main+0x4623>\n    513a:\t89 da                \tmov    %ebx,%edx\n    513c:\tc1 ea 0c             \tshr    $0xc,%edx\n    513f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5145:\t89 d2                \tmov    %edx,%edx\n    5147:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    514c:\t48 85 c0             \ttest   %rax,%rax\n    514f:\t74 63                \tje     51b4 <sim_main+0x469d>\n    5151:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5158 <sim_main+0x4641>\n    5158:\t89 da                \tmov    %ebx,%edx\n    515a:\tc1 ea 0c             \tshr    $0xc,%edx\n    515d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5163:\t89 d2                \tmov    %edx,%edx\n    5165:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    516a:\t8b 40 08             \tmov    0x8(%rax),%eax\n    516d:\t89 da                \tmov    %ebx,%edx\n    516f:\tc1 ea 1b             \tshr    $0x1b,%edx\n    5172:\t39 d0                \tcmp    %edx,%eax\n    5174:\t75 3e                \tjne    51b4 <sim_main+0x469d>\n    5176:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 517d <sim_main+0x4666>\n    517d:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5184:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5188:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    518f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5196 <sim_main+0x467f>\n    5196:\t89 da                \tmov    %ebx,%edx\n    5198:\tc1 ea 0c             \tshr    $0xc,%edx\n    519b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    51a1:\t89 d2                \tmov    %edx,%edx\n    51a3:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    51a8:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    51ac:\t48 85 c0             \ttest   %rax,%rax\n    51af:\t0f 94 c0             \tsete   %al\n    51b2:\teb 17                \tjmp    51cb <sim_main+0x46b4>\n    51b4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 51bb <sim_main+0x46a4>\n    51bb:\t89 de                \tmov    %ebx,%esi\n    51bd:\t48 89 c7             \tmov    %rax,%rdi\n    51c0:\te8 00 00 00 00       \tcallq  51c5 <sim_main+0x46ae>\n    51c5:\t48 85 c0             \ttest   %rax,%rax\n    51c8:\t0f 94 c0             \tsete   %al\n    51cb:\t84 c0                \ttest   %al,%al\n    51cd:\t74 11                \tje     51e0 <sim_main+0x46c9>\n    51cf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 51d6 <sim_main+0x46bf>\n    51d6:\t89 de                \tmov    %ebx,%esi\n    51d8:\t48 89 c7             \tmov    %rax,%rdi\n    51db:\te8 00 00 00 00       \tcallq  51e0 <sim_main+0x46c9>\n    51e0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 51e7 <sim_main+0x46d0>\n    51e7:\t89 da                \tmov    %ebx,%edx\n    51e9:\tc1 ea 0c             \tshr    $0xc,%edx\n    51ec:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    51f2:\t89 d2                \tmov    %edx,%edx\n    51f4:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    51f9:\t48 85 c0             \ttest   %rax,%rax\n    51fc:\t74 5d                \tje     525b <sim_main+0x4744>\n    51fe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5205 <sim_main+0x46ee>\n    5205:\t89 da                \tmov    %ebx,%edx\n    5207:\tc1 ea 0c             \tshr    $0xc,%edx\n    520a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5210:\t89 d2                \tmov    %edx,%edx\n    5212:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5217:\t8b 40 08             \tmov    0x8(%rax),%eax\n    521a:\t89 da                \tmov    %ebx,%edx\n    521c:\tc1 ea 1b             \tshr    $0x1b,%edx\n    521f:\t39 d0                \tcmp    %edx,%eax\n    5221:\t75 38                \tjne    525b <sim_main+0x4744>\n    5223:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 522a <sim_main+0x4713>\n    522a:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5231:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5235:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    523c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5243 <sim_main+0x472c>\n    5243:\t89 da                \tmov    %ebx,%edx\n    5245:\tc1 ea 0c             \tshr    $0xc,%edx\n    5248:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    524e:\t89 d2                \tmov    %edx,%edx\n    5250:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5255:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5259:\teb 11                \tjmp    526c <sim_main+0x4755>\n    525b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5262 <sim_main+0x474b>\n    5262:\t89 de                \tmov    %ebx,%esi\n    5264:\t48 89 c7             \tmov    %rax,%rdi\n    5267:\te8 00 00 00 00       \tcallq  526c <sim_main+0x4755>\n    526c:\t89 da                \tmov    %ebx,%edx\n    526e:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    5274:\t48 01 c2             \tadd    %rax,%rdx\n    5277:\t0f b6 85 5f ff ff ff \tmovzbl -0xa1(%rbp),%eax\n    527e:\t88 02                \tmov    %al,(%rdx)\n    5280:\t83 bd 58 ff ff ff 00 \tcmpl   $0x0,-0xa8(%rbp)\n    5287:\t0f 84 d1 33 00 00    \tje     865e <sim_main+0x7b47>\n    528d:\t8b 85 58 ff ff ff    \tmov    -0xa8(%rbp),%eax\n    5293:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    5296:\te9 df 33 00 00       \tjmpq   867a <sim_main+0x7b63>\n    529b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    52a1:\tc1 e8 10             \tshr    $0x10,%eax\n    52a4:\t0f b6 c0             \tmovzbl %al,%eax\n    52a7:\t89 c0                \tmov    %eax,%eax\n    52a9:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    52b0:\t66 89 85 66 ff ff ff \tmov    %ax,-0x9a(%rbp)\n    52b7:\tc7 85 60 ff ff ff 00 \tmovl   $0x0,-0xa0(%rbp)\n    52be:\t00 00 00 \n    52c1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    52c7:\tc1 e8 18             \tshr    $0x18,%eax\n    52ca:\t89 c0                \tmov    %eax,%eax\n    52cc:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    52d3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    52d9:\tc1 e8 08             \tshr    $0x8,%eax\n    52dc:\t0f b6 c0             \tmovzbl %al,%eax\n    52df:\t89 c0                \tmov    %eax,%eax\n    52e1:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    52e8:\t01 d0                \tadd    %edx,%eax\n    52ea:\t89 c3                \tmov    %eax,%ebx\n    52ec:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 52f3 <sim_main+0x47dc>\n    52f3:\t89 da                \tmov    %ebx,%edx\n    52f5:\tc1 ea 0c             \tshr    $0xc,%edx\n    52f8:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    52fe:\t89 d2                \tmov    %edx,%edx\n    5300:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5305:\t48 85 c0             \ttest   %rax,%rax\n    5308:\t74 63                \tje     536d <sim_main+0x4856>\n    530a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5311 <sim_main+0x47fa>\n    5311:\t89 da                \tmov    %ebx,%edx\n    5313:\tc1 ea 0c             \tshr    $0xc,%edx\n    5316:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    531c:\t89 d2                \tmov    %edx,%edx\n    531e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5323:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5326:\t89 da                \tmov    %ebx,%edx\n    5328:\tc1 ea 1b             \tshr    $0x1b,%edx\n    532b:\t39 d0                \tcmp    %edx,%eax\n    532d:\t75 3e                \tjne    536d <sim_main+0x4856>\n    532f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5336 <sim_main+0x481f>\n    5336:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    533d:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5341:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5348:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 534f <sim_main+0x4838>\n    534f:\t89 da                \tmov    %ebx,%edx\n    5351:\tc1 ea 0c             \tshr    $0xc,%edx\n    5354:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    535a:\t89 d2                \tmov    %edx,%edx\n    535c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5361:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5365:\t48 85 c0             \ttest   %rax,%rax\n    5368:\t0f 94 c0             \tsete   %al\n    536b:\teb 17                \tjmp    5384 <sim_main+0x486d>\n    536d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5374 <sim_main+0x485d>\n    5374:\t89 de                \tmov    %ebx,%esi\n    5376:\t48 89 c7             \tmov    %rax,%rdi\n    5379:\te8 00 00 00 00       \tcallq  537e <sim_main+0x4867>\n    537e:\t48 85 c0             \ttest   %rax,%rax\n    5381:\t0f 94 c0             \tsete   %al\n    5384:\t84 c0                \ttest   %al,%al\n    5386:\t74 11                \tje     5399 <sim_main+0x4882>\n    5388:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 538f <sim_main+0x4878>\n    538f:\t89 de                \tmov    %ebx,%esi\n    5391:\t48 89 c7             \tmov    %rax,%rdi\n    5394:\te8 00 00 00 00       \tcallq  5399 <sim_main+0x4882>\n    5399:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 53a0 <sim_main+0x4889>\n    53a0:\t89 da                \tmov    %ebx,%edx\n    53a2:\tc1 ea 0c             \tshr    $0xc,%edx\n    53a5:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    53ab:\t89 d2                \tmov    %edx,%edx\n    53ad:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    53b2:\t48 85 c0             \ttest   %rax,%rax\n    53b5:\t74 5d                \tje     5414 <sim_main+0x48fd>\n    53b7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 53be <sim_main+0x48a7>\n    53be:\t89 da                \tmov    %ebx,%edx\n    53c0:\tc1 ea 0c             \tshr    $0xc,%edx\n    53c3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    53c9:\t89 d2                \tmov    %edx,%edx\n    53cb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    53d0:\t8b 40 08             \tmov    0x8(%rax),%eax\n    53d3:\t89 da                \tmov    %ebx,%edx\n    53d5:\tc1 ea 1b             \tshr    $0x1b,%edx\n    53d8:\t39 d0                \tcmp    %edx,%eax\n    53da:\t75 38                \tjne    5414 <sim_main+0x48fd>\n    53dc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 53e3 <sim_main+0x48cc>\n    53e3:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    53ea:\t48 83 c2 01          \tadd    $0x1,%rdx\n    53ee:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    53f5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 53fc <sim_main+0x48e5>\n    53fc:\t89 da                \tmov    %ebx,%edx\n    53fe:\tc1 ea 0c             \tshr    $0xc,%edx\n    5401:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5407:\t89 d2                \tmov    %edx,%edx\n    5409:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    540e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5412:\teb 11                \tjmp    5425 <sim_main+0x490e>\n    5414:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 541b <sim_main+0x4904>\n    541b:\t89 de                \tmov    %ebx,%esi\n    541d:\t48 89 c7             \tmov    %rax,%rdi\n    5420:\te8 00 00 00 00       \tcallq  5425 <sim_main+0x490e>\n    5425:\t89 da                \tmov    %ebx,%edx\n    5427:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    542d:\t48 01 c2             \tadd    %rax,%rdx\n    5430:\t0f b7 85 66 ff ff ff \tmovzwl -0x9a(%rbp),%eax\n    5437:\t66 89 02             \tmov    %ax,(%rdx)\n    543a:\t83 bd 60 ff ff ff 00 \tcmpl   $0x0,-0xa0(%rbp)\n    5441:\t0f 84 1a 32 00 00    \tje     8661 <sim_main+0x7b4a>\n    5447:\t8b 85 60 ff ff ff    \tmov    -0xa0(%rbp),%eax\n    544d:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    5450:\te9 25 32 00 00       \tjmpq   867a <sim_main+0x7b63>\n    5455:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    545b:\tc1 e8 10             \tshr    $0x10,%eax\n    545e:\t0f b6 c0             \tmovzbl %al,%eax\n    5461:\t89 c0                \tmov    %eax,%eax\n    5463:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    546a:\t89 85 6c ff ff ff    \tmov    %eax,-0x94(%rbp)\n    5470:\tc7 85 68 ff ff ff 00 \tmovl   $0x0,-0x98(%rbp)\n    5477:\t00 00 00 \n    547a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5480:\tc1 e8 18             \tshr    $0x18,%eax\n    5483:\t89 c0                \tmov    %eax,%eax\n    5485:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    548c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5492:\tc1 e8 08             \tshr    $0x8,%eax\n    5495:\t0f b6 c0             \tmovzbl %al,%eax\n    5498:\t89 c0                \tmov    %eax,%eax\n    549a:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    54a1:\t01 d0                \tadd    %edx,%eax\n    54a3:\t89 c3                \tmov    %eax,%ebx\n    54a5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 54ac <sim_main+0x4995>\n    54ac:\t89 da                \tmov    %ebx,%edx\n    54ae:\tc1 ea 0c             \tshr    $0xc,%edx\n    54b1:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    54b7:\t89 d2                \tmov    %edx,%edx\n    54b9:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    54be:\t48 85 c0             \ttest   %rax,%rax\n    54c1:\t74 63                \tje     5526 <sim_main+0x4a0f>\n    54c3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 54ca <sim_main+0x49b3>\n    54ca:\t89 da                \tmov    %ebx,%edx\n    54cc:\tc1 ea 0c             \tshr    $0xc,%edx\n    54cf:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    54d5:\t89 d2                \tmov    %edx,%edx\n    54d7:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    54dc:\t8b 40 08             \tmov    0x8(%rax),%eax\n    54df:\t89 da                \tmov    %ebx,%edx\n    54e1:\tc1 ea 1b             \tshr    $0x1b,%edx\n    54e4:\t39 d0                \tcmp    %edx,%eax\n    54e6:\t75 3e                \tjne    5526 <sim_main+0x4a0f>\n    54e8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 54ef <sim_main+0x49d8>\n    54ef:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    54f6:\t48 83 c2 01          \tadd    $0x1,%rdx\n    54fa:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5501:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5508 <sim_main+0x49f1>\n    5508:\t89 da                \tmov    %ebx,%edx\n    550a:\tc1 ea 0c             \tshr    $0xc,%edx\n    550d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5513:\t89 d2                \tmov    %edx,%edx\n    5515:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    551a:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    551e:\t48 85 c0             \ttest   %rax,%rax\n    5521:\t0f 94 c0             \tsete   %al\n    5524:\teb 17                \tjmp    553d <sim_main+0x4a26>\n    5526:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 552d <sim_main+0x4a16>\n    552d:\t89 de                \tmov    %ebx,%esi\n    552f:\t48 89 c7             \tmov    %rax,%rdi\n    5532:\te8 00 00 00 00       \tcallq  5537 <sim_main+0x4a20>\n    5537:\t48 85 c0             \ttest   %rax,%rax\n    553a:\t0f 94 c0             \tsete   %al\n    553d:\t84 c0                \ttest   %al,%al\n    553f:\t74 11                \tje     5552 <sim_main+0x4a3b>\n    5541:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5548 <sim_main+0x4a31>\n    5548:\t89 de                \tmov    %ebx,%esi\n    554a:\t48 89 c7             \tmov    %rax,%rdi\n    554d:\te8 00 00 00 00       \tcallq  5552 <sim_main+0x4a3b>\n    5552:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5559 <sim_main+0x4a42>\n    5559:\t89 da                \tmov    %ebx,%edx\n    555b:\tc1 ea 0c             \tshr    $0xc,%edx\n    555e:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5564:\t89 d2                \tmov    %edx,%edx\n    5566:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    556b:\t48 85 c0             \ttest   %rax,%rax\n    556e:\t74 5d                \tje     55cd <sim_main+0x4ab6>\n    5570:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5577 <sim_main+0x4a60>\n    5577:\t89 da                \tmov    %ebx,%edx\n    5579:\tc1 ea 0c             \tshr    $0xc,%edx\n    557c:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5582:\t89 d2                \tmov    %edx,%edx\n    5584:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5589:\t8b 40 08             \tmov    0x8(%rax),%eax\n    558c:\t89 da                \tmov    %ebx,%edx\n    558e:\tc1 ea 1b             \tshr    $0x1b,%edx\n    5591:\t39 d0                \tcmp    %edx,%eax\n    5593:\t75 38                \tjne    55cd <sim_main+0x4ab6>\n    5595:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 559c <sim_main+0x4a85>\n    559c:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    55a3:\t48 83 c2 01          \tadd    $0x1,%rdx\n    55a7:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    55ae:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 55b5 <sim_main+0x4a9e>\n    55b5:\t89 da                \tmov    %ebx,%edx\n    55b7:\tc1 ea 0c             \tshr    $0xc,%edx\n    55ba:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    55c0:\t89 d2                \tmov    %edx,%edx\n    55c2:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    55c7:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    55cb:\teb 11                \tjmp    55de <sim_main+0x4ac7>\n    55cd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 55d4 <sim_main+0x4abd>\n    55d4:\t89 de                \tmov    %ebx,%esi\n    55d6:\t48 89 c7             \tmov    %rax,%rdi\n    55d9:\te8 00 00 00 00       \tcallq  55de <sim_main+0x4ac7>\n    55de:\t89 da                \tmov    %ebx,%edx\n    55e0:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    55e6:\t48 01 c2             \tadd    %rax,%rdx\n    55e9:\t8b 85 6c ff ff ff    \tmov    -0x94(%rbp),%eax\n    55ef:\t89 02                \tmov    %eax,(%rdx)\n    55f1:\t83 bd 68 ff ff ff 00 \tcmpl   $0x0,-0x98(%rbp)\n    55f8:\t0f 84 66 30 00 00    \tje     8664 <sim_main+0x7b4d>\n    55fe:\t8b 85 68 ff ff ff    \tmov    -0x98(%rbp),%eax\n    5604:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    5607:\te9 6e 30 00 00       \tjmpq   867a <sim_main+0x7b63>\n    560c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5612:\t25 00 00 01 00       \tand    $0x10000,%eax\n    5617:\t85 c0                \ttest   %eax,%eax\n    5619:\t74 0c                \tje     5627 <sim_main+0x4b10>\n    561b:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    5622:\te9 53 30 00 00       \tjmpq   867a <sim_main+0x7b63>\n    5627:\tc7 85 70 ff ff ff 00 \tmovl   $0x0,-0x90(%rbp)\n    562e:\t00 00 00 \n    5631:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5637:\tc1 e8 18             \tshr    $0x18,%eax\n    563a:\t89 c0                \tmov    %eax,%eax\n    563c:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    5643:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5649:\tc1 e8 08             \tshr    $0x8,%eax\n    564c:\t0f b6 c0             \tmovzbl %al,%eax\n    564f:\t89 c0                \tmov    %eax,%eax\n    5651:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    5658:\t01 d0                \tadd    %edx,%eax\n    565a:\t89 c3                \tmov    %eax,%ebx\n    565c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5663 <sim_main+0x4b4c>\n    5663:\t89 da                \tmov    %ebx,%edx\n    5665:\tc1 ea 0c             \tshr    $0xc,%edx\n    5668:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    566e:\t89 d2                \tmov    %edx,%edx\n    5670:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5675:\t48 85 c0             \ttest   %rax,%rax\n    5678:\t74 63                \tje     56dd <sim_main+0x4bc6>\n    567a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5681 <sim_main+0x4b6a>\n    5681:\t89 da                \tmov    %ebx,%edx\n    5683:\tc1 ea 0c             \tshr    $0xc,%edx\n    5686:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    568c:\t89 d2                \tmov    %edx,%edx\n    568e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5693:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5696:\t89 da                \tmov    %ebx,%edx\n    5698:\tc1 ea 1b             \tshr    $0x1b,%edx\n    569b:\t39 d0                \tcmp    %edx,%eax\n    569d:\t75 3e                \tjne    56dd <sim_main+0x4bc6>\n    569f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 56a6 <sim_main+0x4b8f>\n    56a6:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    56ad:\t48 83 c2 01          \tadd    $0x1,%rdx\n    56b1:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    56b8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 56bf <sim_main+0x4ba8>\n    56bf:\t89 da                \tmov    %ebx,%edx\n    56c1:\tc1 ea 0c             \tshr    $0xc,%edx\n    56c4:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    56ca:\t89 d2                \tmov    %edx,%edx\n    56cc:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    56d1:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    56d5:\t48 85 c0             \ttest   %rax,%rax\n    56d8:\t0f 94 c0             \tsete   %al\n    56db:\teb 17                \tjmp    56f4 <sim_main+0x4bdd>\n    56dd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 56e4 <sim_main+0x4bcd>\n    56e4:\t89 de                \tmov    %ebx,%esi\n    56e6:\t48 89 c7             \tmov    %rax,%rdi\n    56e9:\te8 00 00 00 00       \tcallq  56ee <sim_main+0x4bd7>\n    56ee:\t48 85 c0             \ttest   %rax,%rax\n    56f1:\t0f 94 c0             \tsete   %al\n    56f4:\t84 c0                \ttest   %al,%al\n    56f6:\t74 11                \tje     5709 <sim_main+0x4bf2>\n    56f8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 56ff <sim_main+0x4be8>\n    56ff:\t89 de                \tmov    %ebx,%esi\n    5701:\t48 89 c7             \tmov    %rax,%rdi\n    5704:\te8 00 00 00 00       \tcallq  5709 <sim_main+0x4bf2>\n    5709:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    570f:\tc1 e8 10             \tshr    $0x10,%eax\n    5712:\t0f b6 c0             \tmovzbl %al,%eax\n    5715:\t89 c0                \tmov    %eax,%eax\n    5717:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    571e:\t00 \n    571f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5726 <sim_main+0x4c0f>\n    5726:\t89 da                \tmov    %ebx,%edx\n    5728:\tc1 ea 0c             \tshr    $0xc,%edx\n    572b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5731:\t89 d2                \tmov    %edx,%edx\n    5733:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5738:\t48 85 c0             \ttest   %rax,%rax\n    573b:\t74 5d                \tje     579a <sim_main+0x4c83>\n    573d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5744 <sim_main+0x4c2d>\n    5744:\t89 da                \tmov    %ebx,%edx\n    5746:\tc1 ea 0c             \tshr    $0xc,%edx\n    5749:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    574f:\t89 d2                \tmov    %edx,%edx\n    5751:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5756:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5759:\t89 da                \tmov    %ebx,%edx\n    575b:\tc1 ea 1b             \tshr    $0x1b,%edx\n    575e:\t39 d0                \tcmp    %edx,%eax\n    5760:\t75 38                \tjne    579a <sim_main+0x4c83>\n    5762:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5769 <sim_main+0x4c52>\n    5769:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5770:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5774:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    577b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5782 <sim_main+0x4c6b>\n    5782:\t89 da                \tmov    %ebx,%edx\n    5784:\tc1 ea 0c             \tshr    $0xc,%edx\n    5787:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    578d:\t89 d2                \tmov    %edx,%edx\n    578f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5794:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5798:\teb 11                \tjmp    57ab <sim_main+0x4c94>\n    579a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 57a1 <sim_main+0x4c8a>\n    57a1:\t89 de                \tmov    %ebx,%esi\n    57a3:\t48 89 c7             \tmov    %rax,%rdi\n    57a6:\te8 00 00 00 00       \tcallq  57ab <sim_main+0x4c94>\n    57ab:\t89 da                \tmov    %ebx,%edx\n    57ad:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    57b3:\t48 01 d0             \tadd    %rdx,%rax\n    57b6:\t44 89 e2             \tmov    %r12d,%edx\n    57b9:\t89 10                \tmov    %edx,(%rax)\n    57bb:\t83 bd 70 ff ff ff 00 \tcmpl   $0x0,-0x90(%rbp)\n    57c2:\t74 0e                \tje     57d2 <sim_main+0x4cbb>\n    57c4:\t8b 85 70 ff ff ff    \tmov    -0x90(%rbp),%eax\n    57ca:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    57cd:\te9 a8 2e 00 00       \tjmpq   867a <sim_main+0x7b63>\n    57d2:\tc7 85 70 ff ff ff 00 \tmovl   $0x0,-0x90(%rbp)\n    57d9:\t00 00 00 \n    57dc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    57e2:\tc1 e8 18             \tshr    $0x18,%eax\n    57e5:\t89 c0                \tmov    %eax,%eax\n    57e7:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    57ee:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    57f4:\tc1 e8 08             \tshr    $0x8,%eax\n    57f7:\t0f b6 c0             \tmovzbl %al,%eax\n    57fa:\t89 c0                \tmov    %eax,%eax\n    57fc:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    5803:\t01 d0                \tadd    %edx,%eax\n    5805:\t83 c0 04             \tadd    $0x4,%eax\n    5808:\t89 c3                \tmov    %eax,%ebx\n    580a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5811 <sim_main+0x4cfa>\n    5811:\t89 da                \tmov    %ebx,%edx\n    5813:\tc1 ea 0c             \tshr    $0xc,%edx\n    5816:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    581c:\t89 d2                \tmov    %edx,%edx\n    581e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5823:\t48 85 c0             \ttest   %rax,%rax\n    5826:\t74 63                \tje     588b <sim_main+0x4d74>\n    5828:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 582f <sim_main+0x4d18>\n    582f:\t89 da                \tmov    %ebx,%edx\n    5831:\tc1 ea 0c             \tshr    $0xc,%edx\n    5834:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    583a:\t89 d2                \tmov    %edx,%edx\n    583c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5841:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5844:\t89 da                \tmov    %ebx,%edx\n    5846:\tc1 ea 1b             \tshr    $0x1b,%edx\n    5849:\t39 d0                \tcmp    %edx,%eax\n    584b:\t75 3e                \tjne    588b <sim_main+0x4d74>\n    584d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5854 <sim_main+0x4d3d>\n    5854:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    585b:\t48 83 c2 01          \tadd    $0x1,%rdx\n    585f:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5866:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 586d <sim_main+0x4d56>\n    586d:\t89 da                \tmov    %ebx,%edx\n    586f:\tc1 ea 0c             \tshr    $0xc,%edx\n    5872:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5878:\t89 d2                \tmov    %edx,%edx\n    587a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    587f:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5883:\t48 85 c0             \ttest   %rax,%rax\n    5886:\t0f 94 c0             \tsete   %al\n    5889:\teb 17                \tjmp    58a2 <sim_main+0x4d8b>\n    588b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5892 <sim_main+0x4d7b>\n    5892:\t89 de                \tmov    %ebx,%esi\n    5894:\t48 89 c7             \tmov    %rax,%rdi\n    5897:\te8 00 00 00 00       \tcallq  589c <sim_main+0x4d85>\n    589c:\t48 85 c0             \ttest   %rax,%rax\n    589f:\t0f 94 c0             \tsete   %al\n    58a2:\t84 c0                \ttest   %al,%al\n    58a4:\t74 11                \tje     58b7 <sim_main+0x4da0>\n    58a6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 58ad <sim_main+0x4d96>\n    58ad:\t89 de                \tmov    %ebx,%esi\n    58af:\t48 89 c7             \tmov    %rax,%rdi\n    58b2:\te8 00 00 00 00       \tcallq  58b7 <sim_main+0x4da0>\n    58b7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    58bd:\tc1 e8 10             \tshr    $0x10,%eax\n    58c0:\t0f b6 c0             \tmovzbl %al,%eax\n    58c3:\t83 c0 01             \tadd    $0x1,%eax\n    58c6:\t89 c0                \tmov    %eax,%eax\n    58c8:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    58cf:\t00 \n    58d0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 58d7 <sim_main+0x4dc0>\n    58d7:\t89 da                \tmov    %ebx,%edx\n    58d9:\tc1 ea 0c             \tshr    $0xc,%edx\n    58dc:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    58e2:\t89 d2                \tmov    %edx,%edx\n    58e4:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    58e9:\t48 85 c0             \ttest   %rax,%rax\n    58ec:\t74 5d                \tje     594b <sim_main+0x4e34>\n    58ee:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 58f5 <sim_main+0x4dde>\n    58f5:\t89 da                \tmov    %ebx,%edx\n    58f7:\tc1 ea 0c             \tshr    $0xc,%edx\n    58fa:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5900:\t89 d2                \tmov    %edx,%edx\n    5902:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5907:\t8b 40 08             \tmov    0x8(%rax),%eax\n    590a:\t89 da                \tmov    %ebx,%edx\n    590c:\tc1 ea 1b             \tshr    $0x1b,%edx\n    590f:\t39 d0                \tcmp    %edx,%eax\n    5911:\t75 38                \tjne    594b <sim_main+0x4e34>\n    5913:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 591a <sim_main+0x4e03>\n    591a:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5921:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5925:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    592c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5933 <sim_main+0x4e1c>\n    5933:\t89 da                \tmov    %ebx,%edx\n    5935:\tc1 ea 0c             \tshr    $0xc,%edx\n    5938:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    593e:\t89 d2                \tmov    %edx,%edx\n    5940:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5945:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5949:\teb 11                \tjmp    595c <sim_main+0x4e45>\n    594b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5952 <sim_main+0x4e3b>\n    5952:\t89 de                \tmov    %ebx,%esi\n    5954:\t48 89 c7             \tmov    %rax,%rdi\n    5957:\te8 00 00 00 00       \tcallq  595c <sim_main+0x4e45>\n    595c:\t89 da                \tmov    %ebx,%edx\n    595e:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    5964:\t48 01 d0             \tadd    %rdx,%rax\n    5967:\t44 89 e2             \tmov    %r12d,%edx\n    596a:\t89 10                \tmov    %edx,(%rax)\n    596c:\t83 bd 70 ff ff ff 00 \tcmpl   $0x0,-0x90(%rbp)\n    5973:\t0f 84 ee 2c 00 00    \tje     8667 <sim_main+0x7b50>\n    5979:\t8b 85 70 ff ff ff    \tmov    -0x90(%rbp),%eax\n    597f:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    5982:\te9 f3 2c 00 00       \tjmpq   867a <sim_main+0x7b63>\n    5987:\tc7 85 74 ff ff ff 00 \tmovl   $0x0,-0x8c(%rbp)\n    598e:\t00 00 00 \n    5991:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5997:\tc1 e8 18             \tshr    $0x18,%eax\n    599a:\t89 c0                \tmov    %eax,%eax\n    599c:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    59a3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    59a9:\tc1 e8 08             \tshr    $0x8,%eax\n    59ac:\t0f b6 c0             \tmovzbl %al,%eax\n    59af:\t89 c0                \tmov    %eax,%eax\n    59b1:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    59b8:\t01 d0                \tadd    %edx,%eax\n    59ba:\t89 c3                \tmov    %eax,%ebx\n    59bc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 59c3 <sim_main+0x4eac>\n    59c3:\t89 da                \tmov    %ebx,%edx\n    59c5:\tc1 ea 0c             \tshr    $0xc,%edx\n    59c8:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    59ce:\t89 d2                \tmov    %edx,%edx\n    59d0:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    59d5:\t48 85 c0             \ttest   %rax,%rax\n    59d8:\t74 63                \tje     5a3d <sim_main+0x4f26>\n    59da:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 59e1 <sim_main+0x4eca>\n    59e1:\t89 da                \tmov    %ebx,%edx\n    59e3:\tc1 ea 0c             \tshr    $0xc,%edx\n    59e6:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    59ec:\t89 d2                \tmov    %edx,%edx\n    59ee:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    59f3:\t8b 40 08             \tmov    0x8(%rax),%eax\n    59f6:\t89 da                \tmov    %ebx,%edx\n    59f8:\tc1 ea 1b             \tshr    $0x1b,%edx\n    59fb:\t39 d0                \tcmp    %edx,%eax\n    59fd:\t75 3e                \tjne    5a3d <sim_main+0x4f26>\n    59ff:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a06 <sim_main+0x4eef>\n    5a06:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5a0d:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5a11:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5a18:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a1f <sim_main+0x4f08>\n    5a1f:\t89 da                \tmov    %ebx,%edx\n    5a21:\tc1 ea 0c             \tshr    $0xc,%edx\n    5a24:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5a2a:\t89 d2                \tmov    %edx,%edx\n    5a2c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5a31:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5a35:\t48 85 c0             \ttest   %rax,%rax\n    5a38:\t0f 94 c0             \tsete   %al\n    5a3b:\teb 17                \tjmp    5a54 <sim_main+0x4f3d>\n    5a3d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a44 <sim_main+0x4f2d>\n    5a44:\t89 de                \tmov    %ebx,%esi\n    5a46:\t48 89 c7             \tmov    %rax,%rdi\n    5a49:\te8 00 00 00 00       \tcallq  5a4e <sim_main+0x4f37>\n    5a4e:\t48 85 c0             \ttest   %rax,%rax\n    5a51:\t0f 94 c0             \tsete   %al\n    5a54:\t84 c0                \ttest   %al,%al\n    5a56:\t74 11                \tje     5a69 <sim_main+0x4f52>\n    5a58:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a5f <sim_main+0x4f48>\n    5a5f:\t89 de                \tmov    %ebx,%esi\n    5a61:\t48 89 c7             \tmov    %rax,%rdi\n    5a64:\te8 00 00 00 00       \tcallq  5a69 <sim_main+0x4f52>\n    5a69:\t44 8b 25 00 00 00 00 \tmov    0x0(%rip),%r12d        # 5a70 <sim_main+0x4f59>\n    5a70:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a77 <sim_main+0x4f60>\n    5a77:\t89 da                \tmov    %ebx,%edx\n    5a79:\tc1 ea 0c             \tshr    $0xc,%edx\n    5a7c:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5a82:\t89 d2                \tmov    %edx,%edx\n    5a84:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5a89:\t48 85 c0             \ttest   %rax,%rax\n    5a8c:\t74 5d                \tje     5aeb <sim_main+0x4fd4>\n    5a8e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5a95 <sim_main+0x4f7e>\n    5a95:\t89 da                \tmov    %ebx,%edx\n    5a97:\tc1 ea 0c             \tshr    $0xc,%edx\n    5a9a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5aa0:\t89 d2                \tmov    %edx,%edx\n    5aa2:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5aa7:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5aaa:\t89 da                \tmov    %ebx,%edx\n    5aac:\tc1 ea 1b             \tshr    $0x1b,%edx\n    5aaf:\t39 d0                \tcmp    %edx,%eax\n    5ab1:\t75 38                \tjne    5aeb <sim_main+0x4fd4>\n    5ab3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5aba <sim_main+0x4fa3>\n    5aba:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5ac1:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5ac5:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5acc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5ad3 <sim_main+0x4fbc>\n    5ad3:\t89 da                \tmov    %ebx,%edx\n    5ad5:\tc1 ea 0c             \tshr    $0xc,%edx\n    5ad8:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5ade:\t89 d2                \tmov    %edx,%edx\n    5ae0:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5ae5:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5ae9:\teb 11                \tjmp    5afc <sim_main+0x4fe5>\n    5aeb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5af2 <sim_main+0x4fdb>\n    5af2:\t89 de                \tmov    %ebx,%esi\n    5af4:\t48 89 c7             \tmov    %rax,%rdi\n    5af7:\te8 00 00 00 00       \tcallq  5afc <sim_main+0x4fe5>\n    5afc:\t89 da                \tmov    %ebx,%edx\n    5afe:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    5b04:\t48 01 d0             \tadd    %rdx,%rax\n    5b07:\t44 89 e2             \tmov    %r12d,%edx\n    5b0a:\t89 10                \tmov    %edx,(%rax)\n    5b0c:\t83 bd 74 ff ff ff 00 \tcmpl   $0x0,-0x8c(%rbp)\n    5b13:\t74 0e                \tje     5b23 <sim_main+0x500c>\n    5b15:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n    5b1b:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    5b1e:\te9 57 2b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    5b23:\tc7 85 74 ff ff ff 00 \tmovl   $0x0,-0x8c(%rbp)\n    5b2a:\t00 00 00 \n    5b2d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5b33:\tc1 e8 18             \tshr    $0x18,%eax\n    5b36:\t89 c0                \tmov    %eax,%eax\n    5b38:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    5b3f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5b45:\tc1 e8 08             \tshr    $0x8,%eax\n    5b48:\t0f b6 c0             \tmovzbl %al,%eax\n    5b4b:\t89 c0                \tmov    %eax,%eax\n    5b4d:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    5b54:\t01 d0                \tadd    %edx,%eax\n    5b56:\t83 c0 04             \tadd    $0x4,%eax\n    5b59:\t89 c3                \tmov    %eax,%ebx\n    5b5b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5b62 <sim_main+0x504b>\n    5b62:\t89 da                \tmov    %ebx,%edx\n    5b64:\tc1 ea 0c             \tshr    $0xc,%edx\n    5b67:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5b6d:\t89 d2                \tmov    %edx,%edx\n    5b6f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5b74:\t48 85 c0             \ttest   %rax,%rax\n    5b77:\t74 63                \tje     5bdc <sim_main+0x50c5>\n    5b79:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5b80 <sim_main+0x5069>\n    5b80:\t89 da                \tmov    %ebx,%edx\n    5b82:\tc1 ea 0c             \tshr    $0xc,%edx\n    5b85:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5b8b:\t89 d2                \tmov    %edx,%edx\n    5b8d:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5b92:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5b95:\t89 da                \tmov    %ebx,%edx\n    5b97:\tc1 ea 1b             \tshr    $0x1b,%edx\n    5b9a:\t39 d0                \tcmp    %edx,%eax\n    5b9c:\t75 3e                \tjne    5bdc <sim_main+0x50c5>\n    5b9e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5ba5 <sim_main+0x508e>\n    5ba5:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5bac:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5bb0:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5bb7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5bbe <sim_main+0x50a7>\n    5bbe:\t89 da                \tmov    %ebx,%edx\n    5bc0:\tc1 ea 0c             \tshr    $0xc,%edx\n    5bc3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5bc9:\t89 d2                \tmov    %edx,%edx\n    5bcb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5bd0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5bd4:\t48 85 c0             \ttest   %rax,%rax\n    5bd7:\t0f 94 c0             \tsete   %al\n    5bda:\teb 17                \tjmp    5bf3 <sim_main+0x50dc>\n    5bdc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5be3 <sim_main+0x50cc>\n    5be3:\t89 de                \tmov    %ebx,%esi\n    5be5:\t48 89 c7             \tmov    %rax,%rdi\n    5be8:\te8 00 00 00 00       \tcallq  5bed <sim_main+0x50d6>\n    5bed:\t48 85 c0             \ttest   %rax,%rax\n    5bf0:\t0f 94 c0             \tsete   %al\n    5bf3:\t84 c0                \ttest   %al,%al\n    5bf5:\t74 11                \tje     5c08 <sim_main+0x50f1>\n    5bf7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5bfe <sim_main+0x50e7>\n    5bfe:\t89 de                \tmov    %ebx,%esi\n    5c00:\t48 89 c7             \tmov    %rax,%rdi\n    5c03:\te8 00 00 00 00       \tcallq  5c08 <sim_main+0x50f1>\n    5c08:\t44 8b 25 00 00 00 00 \tmov    0x0(%rip),%r12d        # 5c0f <sim_main+0x50f8>\n    5c0f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5c16 <sim_main+0x50ff>\n    5c16:\t89 da                \tmov    %ebx,%edx\n    5c18:\tc1 ea 0c             \tshr    $0xc,%edx\n    5c1b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5c21:\t89 d2                \tmov    %edx,%edx\n    5c23:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5c28:\t48 85 c0             \ttest   %rax,%rax\n    5c2b:\t74 5d                \tje     5c8a <sim_main+0x5173>\n    5c2d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5c34 <sim_main+0x511d>\n    5c34:\t89 da                \tmov    %ebx,%edx\n    5c36:\tc1 ea 0c             \tshr    $0xc,%edx\n    5c39:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5c3f:\t89 d2                \tmov    %edx,%edx\n    5c41:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5c46:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5c49:\t89 da                \tmov    %ebx,%edx\n    5c4b:\tc1 ea 1b             \tshr    $0x1b,%edx\n    5c4e:\t39 d0                \tcmp    %edx,%eax\n    5c50:\t75 38                \tjne    5c8a <sim_main+0x5173>\n    5c52:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5c59 <sim_main+0x5142>\n    5c59:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5c60:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5c64:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5c6b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5c72 <sim_main+0x515b>\n    5c72:\t89 da                \tmov    %ebx,%edx\n    5c74:\tc1 ea 0c             \tshr    $0xc,%edx\n    5c77:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5c7d:\t89 d2                \tmov    %edx,%edx\n    5c7f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5c84:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5c88:\teb 11                \tjmp    5c9b <sim_main+0x5184>\n    5c8a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5c91 <sim_main+0x517a>\n    5c91:\t89 de                \tmov    %ebx,%esi\n    5c93:\t48 89 c7             \tmov    %rax,%rdi\n    5c96:\te8 00 00 00 00       \tcallq  5c9b <sim_main+0x5184>\n    5c9b:\t89 da                \tmov    %ebx,%edx\n    5c9d:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    5ca3:\t48 01 d0             \tadd    %rdx,%rax\n    5ca6:\t44 89 e2             \tmov    %r12d,%edx\n    5ca9:\t89 10                \tmov    %edx,(%rax)\n    5cab:\t83 bd 74 ff ff ff 00 \tcmpl   $0x0,-0x8c(%rbp)\n    5cb2:\t0f 84 b2 29 00 00    \tje     866a <sim_main+0x7b53>\n    5cb8:\t8b 85 74 ff ff ff    \tmov    -0x8c(%rbp),%eax\n    5cbe:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    5cc1:\te9 b4 29 00 00       \tjmpq   867a <sim_main+0x7b63>\n    5cc6:\tc7 85 78 ff ff ff 00 \tmovl   $0x0,-0x88(%rbp)\n    5ccd:\t00 00 00 \n    5cd0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5cd6:\tc1 e8 18             \tshr    $0x18,%eax\n    5cd9:\t89 c0                \tmov    %eax,%eax\n    5cdb:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    5ce2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5ce8:\tc1 e8 08             \tshr    $0x8,%eax\n    5ceb:\t0f b6 c0             \tmovzbl %al,%eax\n    5cee:\t89 c0                \tmov    %eax,%eax\n    5cf0:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    5cf7:\t01 d0                \tadd    %edx,%eax\n    5cf9:\t89 c3                \tmov    %eax,%ebx\n    5cfb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5d02 <sim_main+0x51eb>\n    5d02:\t89 da                \tmov    %ebx,%edx\n    5d04:\tc1 ea 0c             \tshr    $0xc,%edx\n    5d07:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5d0d:\t89 d2                \tmov    %edx,%edx\n    5d0f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5d14:\t48 85 c0             \ttest   %rax,%rax\n    5d17:\t74 63                \tje     5d7c <sim_main+0x5265>\n    5d19:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5d20 <sim_main+0x5209>\n    5d20:\t89 da                \tmov    %ebx,%edx\n    5d22:\tc1 ea 0c             \tshr    $0xc,%edx\n    5d25:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5d2b:\t89 d2                \tmov    %edx,%edx\n    5d2d:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5d32:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5d35:\t89 da                \tmov    %ebx,%edx\n    5d37:\tc1 ea 1b             \tshr    $0x1b,%edx\n    5d3a:\t39 d0                \tcmp    %edx,%eax\n    5d3c:\t75 3e                \tjne    5d7c <sim_main+0x5265>\n    5d3e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5d45 <sim_main+0x522e>\n    5d45:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5d4c:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5d50:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5d57:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5d5e <sim_main+0x5247>\n    5d5e:\t89 da                \tmov    %ebx,%edx\n    5d60:\tc1 ea 0c             \tshr    $0xc,%edx\n    5d63:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5d69:\t89 d2                \tmov    %edx,%edx\n    5d6b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5d70:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5d74:\t48 85 c0             \ttest   %rax,%rax\n    5d77:\t0f 94 c0             \tsete   %al\n    5d7a:\teb 17                \tjmp    5d93 <sim_main+0x527c>\n    5d7c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5d83 <sim_main+0x526c>\n    5d83:\t89 de                \tmov    %ebx,%esi\n    5d85:\t48 89 c7             \tmov    %rax,%rdi\n    5d88:\te8 00 00 00 00       \tcallq  5d8d <sim_main+0x5276>\n    5d8d:\t48 85 c0             \ttest   %rax,%rax\n    5d90:\t0f 94 c0             \tsete   %al\n    5d93:\t84 c0                \ttest   %al,%al\n    5d95:\t74 11                \tje     5da8 <sim_main+0x5291>\n    5d97:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5d9e <sim_main+0x5287>\n    5d9e:\t89 de                \tmov    %ebx,%esi\n    5da0:\t48 89 c7             \tmov    %rax,%rdi\n    5da3:\te8 00 00 00 00       \tcallq  5da8 <sim_main+0x5291>\n    5da8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5dae:\tc1 e8 10             \tshr    $0x10,%eax\n    5db1:\t0f b6 c0             \tmovzbl %al,%eax\n    5db4:\t89 c0                \tmov    %eax,%eax\n    5db6:\t48 83 c0 20          \tadd    $0x20,%rax\n    5dba:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    5dc1:\t00 \n    5dc2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5dc9 <sim_main+0x52b2>\n    5dc9:\t89 da                \tmov    %ebx,%edx\n    5dcb:\tc1 ea 0c             \tshr    $0xc,%edx\n    5dce:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5dd4:\t89 d2                \tmov    %edx,%edx\n    5dd6:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5ddb:\t48 85 c0             \ttest   %rax,%rax\n    5dde:\t74 5d                \tje     5e3d <sim_main+0x5326>\n    5de0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5de7 <sim_main+0x52d0>\n    5de7:\t89 da                \tmov    %ebx,%edx\n    5de9:\tc1 ea 0c             \tshr    $0xc,%edx\n    5dec:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5df2:\t89 d2                \tmov    %edx,%edx\n    5df4:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5df9:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5dfc:\t89 da                \tmov    %ebx,%edx\n    5dfe:\tc1 ea 1b             \tshr    $0x1b,%edx\n    5e01:\t39 d0                \tcmp    %edx,%eax\n    5e03:\t75 38                \tjne    5e3d <sim_main+0x5326>\n    5e05:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5e0c <sim_main+0x52f5>\n    5e0c:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5e13:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5e17:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5e1e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5e25 <sim_main+0x530e>\n    5e25:\t89 da                \tmov    %ebx,%edx\n    5e27:\tc1 ea 0c             \tshr    $0xc,%edx\n    5e2a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5e30:\t89 d2                \tmov    %edx,%edx\n    5e32:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5e37:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5e3b:\teb 11                \tjmp    5e4e <sim_main+0x5337>\n    5e3d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5e44 <sim_main+0x532d>\n    5e44:\t89 de                \tmov    %ebx,%esi\n    5e46:\t48 89 c7             \tmov    %rax,%rdi\n    5e49:\te8 00 00 00 00       \tcallq  5e4e <sim_main+0x5337>\n    5e4e:\t89 da                \tmov    %ebx,%edx\n    5e50:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    5e56:\t48 01 d0             \tadd    %rdx,%rax\n    5e59:\t44 89 e2             \tmov    %r12d,%edx\n    5e5c:\t89 10                \tmov    %edx,(%rax)\n    5e5e:\t83 bd 78 ff ff ff 00 \tcmpl   $0x0,-0x88(%rbp)\n    5e65:\t0f 84 02 28 00 00    \tje     866d <sim_main+0x7b56>\n    5e6b:\t8b 85 78 ff ff ff    \tmov    -0x88(%rbp),%eax\n    5e71:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    5e74:\te9 01 28 00 00       \tjmpq   867a <sim_main+0x7b63>\n    5e79:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5e7f:\t25 00 00 01 00       \tand    $0x10000,%eax\n    5e84:\t85 c0                \ttest   %eax,%eax\n    5e86:\t74 0c                \tje     5e94 <sim_main+0x537d>\n    5e88:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    5e8f:\te9 e6 27 00 00       \tjmpq   867a <sim_main+0x7b63>\n    5e94:\tc7 85 7c ff ff ff 00 \tmovl   $0x0,-0x84(%rbp)\n    5e9b:\t00 00 00 \n    5e9e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5ea4:\tc1 e8 18             \tshr    $0x18,%eax\n    5ea7:\t89 c0                \tmov    %eax,%eax\n    5ea9:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    5eb0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5eb6:\tc1 e8 08             \tshr    $0x8,%eax\n    5eb9:\t0f b6 c0             \tmovzbl %al,%eax\n    5ebc:\t89 c0                \tmov    %eax,%eax\n    5ebe:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    5ec5:\t01 d0                \tadd    %edx,%eax\n    5ec7:\t89 c3                \tmov    %eax,%ebx\n    5ec9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5ed0 <sim_main+0x53b9>\n    5ed0:\t89 da                \tmov    %ebx,%edx\n    5ed2:\tc1 ea 0c             \tshr    $0xc,%edx\n    5ed5:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5edb:\t89 d2                \tmov    %edx,%edx\n    5edd:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5ee2:\t48 85 c0             \ttest   %rax,%rax\n    5ee5:\t74 63                \tje     5f4a <sim_main+0x5433>\n    5ee7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5eee <sim_main+0x53d7>\n    5eee:\t89 da                \tmov    %ebx,%edx\n    5ef0:\tc1 ea 0c             \tshr    $0xc,%edx\n    5ef3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5ef9:\t89 d2                \tmov    %edx,%edx\n    5efb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5f00:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5f03:\t89 da                \tmov    %ebx,%edx\n    5f05:\tc1 ea 1b             \tshr    $0x1b,%edx\n    5f08:\t39 d0                \tcmp    %edx,%eax\n    5f0a:\t75 3e                \tjne    5f4a <sim_main+0x5433>\n    5f0c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5f13 <sim_main+0x53fc>\n    5f13:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5f1a:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5f1e:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5f25:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5f2c <sim_main+0x5415>\n    5f2c:\t89 da                \tmov    %ebx,%edx\n    5f2e:\tc1 ea 0c             \tshr    $0xc,%edx\n    5f31:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5f37:\t89 d2                \tmov    %edx,%edx\n    5f39:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5f3e:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    5f42:\t48 85 c0             \ttest   %rax,%rax\n    5f45:\t0f 94 c0             \tsete   %al\n    5f48:\teb 17                \tjmp    5f61 <sim_main+0x544a>\n    5f4a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5f51 <sim_main+0x543a>\n    5f51:\t89 de                \tmov    %ebx,%esi\n    5f53:\t48 89 c7             \tmov    %rax,%rdi\n    5f56:\te8 00 00 00 00       \tcallq  5f5b <sim_main+0x5444>\n    5f5b:\t48 85 c0             \ttest   %rax,%rax\n    5f5e:\t0f 94 c0             \tsete   %al\n    5f61:\t84 c0                \ttest   %al,%al\n    5f63:\t74 11                \tje     5f76 <sim_main+0x545f>\n    5f65:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5f6c <sim_main+0x5455>\n    5f6c:\t89 de                \tmov    %ebx,%esi\n    5f6e:\t48 89 c7             \tmov    %rax,%rdi\n    5f71:\te8 00 00 00 00       \tcallq  5f76 <sim_main+0x545f>\n    5f76:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    5f7c:\tc1 e8 10             \tshr    $0x10,%eax\n    5f7f:\t0f b6 c0             \tmovzbl %al,%eax\n    5f82:\t89 c0                \tmov    %eax,%eax\n    5f84:\t48 83 c0 20          \tadd    $0x20,%rax\n    5f88:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    5f8f:\t00 \n    5f90:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5f97 <sim_main+0x5480>\n    5f97:\t89 da                \tmov    %ebx,%edx\n    5f99:\tc1 ea 0c             \tshr    $0xc,%edx\n    5f9c:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5fa2:\t89 d2                \tmov    %edx,%edx\n    5fa4:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5fa9:\t48 85 c0             \ttest   %rax,%rax\n    5fac:\t74 5d                \tje     600b <sim_main+0x54f4>\n    5fae:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5fb5 <sim_main+0x549e>\n    5fb5:\t89 da                \tmov    %ebx,%edx\n    5fb7:\tc1 ea 0c             \tshr    $0xc,%edx\n    5fba:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5fc0:\t89 d2                \tmov    %edx,%edx\n    5fc2:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    5fc7:\t8b 40 08             \tmov    0x8(%rax),%eax\n    5fca:\t89 da                \tmov    %ebx,%edx\n    5fcc:\tc1 ea 1b             \tshr    $0x1b,%edx\n    5fcf:\t39 d0                \tcmp    %edx,%eax\n    5fd1:\t75 38                \tjne    600b <sim_main+0x54f4>\n    5fd3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5fda <sim_main+0x54c3>\n    5fda:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    5fe1:\t48 83 c2 01          \tadd    $0x1,%rdx\n    5fe5:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    5fec:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 5ff3 <sim_main+0x54dc>\n    5ff3:\t89 da                \tmov    %ebx,%edx\n    5ff5:\tc1 ea 0c             \tshr    $0xc,%edx\n    5ff8:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    5ffe:\t89 d2                \tmov    %edx,%edx\n    6000:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6005:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    6009:\teb 11                \tjmp    601c <sim_main+0x5505>\n    600b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6012 <sim_main+0x54fb>\n    6012:\t89 de                \tmov    %ebx,%esi\n    6014:\t48 89 c7             \tmov    %rax,%rdi\n    6017:\te8 00 00 00 00       \tcallq  601c <sim_main+0x5505>\n    601c:\t89 da                \tmov    %ebx,%edx\n    601e:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    6024:\t48 01 d0             \tadd    %rdx,%rax\n    6027:\t44 89 e2             \tmov    %r12d,%edx\n    602a:\t89 10                \tmov    %edx,(%rax)\n    602c:\t83 bd 7c ff ff ff 00 \tcmpl   $0x0,-0x84(%rbp)\n    6033:\t74 0e                \tje     6043 <sim_main+0x552c>\n    6035:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n    603b:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    603e:\te9 37 26 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6043:\tc7 85 7c ff ff ff 00 \tmovl   $0x0,-0x84(%rbp)\n    604a:\t00 00 00 \n    604d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6053:\tc1 e8 18             \tshr    $0x18,%eax\n    6056:\t89 c0                \tmov    %eax,%eax\n    6058:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    605f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6065:\tc1 e8 08             \tshr    $0x8,%eax\n    6068:\t0f b6 c0             \tmovzbl %al,%eax\n    606b:\t89 c0                \tmov    %eax,%eax\n    606d:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6074:\t01 d0                \tadd    %edx,%eax\n    6076:\t83 c0 04             \tadd    $0x4,%eax\n    6079:\t89 c3                \tmov    %eax,%ebx\n    607b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6082 <sim_main+0x556b>\n    6082:\t89 da                \tmov    %ebx,%edx\n    6084:\tc1 ea 0c             \tshr    $0xc,%edx\n    6087:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    608d:\t89 d2                \tmov    %edx,%edx\n    608f:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6094:\t48 85 c0             \ttest   %rax,%rax\n    6097:\t74 63                \tje     60fc <sim_main+0x55e5>\n    6099:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 60a0 <sim_main+0x5589>\n    60a0:\t89 da                \tmov    %ebx,%edx\n    60a2:\tc1 ea 0c             \tshr    $0xc,%edx\n    60a5:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    60ab:\t89 d2                \tmov    %edx,%edx\n    60ad:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    60b2:\t8b 40 08             \tmov    0x8(%rax),%eax\n    60b5:\t89 da                \tmov    %ebx,%edx\n    60b7:\tc1 ea 1b             \tshr    $0x1b,%edx\n    60ba:\t39 d0                \tcmp    %edx,%eax\n    60bc:\t75 3e                \tjne    60fc <sim_main+0x55e5>\n    60be:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 60c5 <sim_main+0x55ae>\n    60c5:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    60cc:\t48 83 c2 01          \tadd    $0x1,%rdx\n    60d0:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    60d7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 60de <sim_main+0x55c7>\n    60de:\t89 da                \tmov    %ebx,%edx\n    60e0:\tc1 ea 0c             \tshr    $0xc,%edx\n    60e3:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    60e9:\t89 d2                \tmov    %edx,%edx\n    60eb:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    60f0:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    60f4:\t48 85 c0             \ttest   %rax,%rax\n    60f7:\t0f 94 c0             \tsete   %al\n    60fa:\teb 17                \tjmp    6113 <sim_main+0x55fc>\n    60fc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6103 <sim_main+0x55ec>\n    6103:\t89 de                \tmov    %ebx,%esi\n    6105:\t48 89 c7             \tmov    %rax,%rdi\n    6108:\te8 00 00 00 00       \tcallq  610d <sim_main+0x55f6>\n    610d:\t48 85 c0             \ttest   %rax,%rax\n    6110:\t0f 94 c0             \tsete   %al\n    6113:\t84 c0                \ttest   %al,%al\n    6115:\t74 11                \tje     6128 <sim_main+0x5611>\n    6117:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 611e <sim_main+0x5607>\n    611e:\t89 de                \tmov    %ebx,%esi\n    6120:\t48 89 c7             \tmov    %rax,%rdi\n    6123:\te8 00 00 00 00       \tcallq  6128 <sim_main+0x5611>\n    6128:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    612e:\tc1 e8 10             \tshr    $0x10,%eax\n    6131:\t0f b6 c0             \tmovzbl %al,%eax\n    6134:\t83 c0 01             \tadd    $0x1,%eax\n    6137:\t89 c0                \tmov    %eax,%eax\n    6139:\t48 83 c0 20          \tadd    $0x20,%rax\n    613d:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    6144:\t00 \n    6145:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 614c <sim_main+0x5635>\n    614c:\t89 da                \tmov    %ebx,%edx\n    614e:\tc1 ea 0c             \tshr    $0xc,%edx\n    6151:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6157:\t89 d2                \tmov    %edx,%edx\n    6159:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    615e:\t48 85 c0             \ttest   %rax,%rax\n    6161:\t74 5d                \tje     61c0 <sim_main+0x56a9>\n    6163:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 616a <sim_main+0x5653>\n    616a:\t89 da                \tmov    %ebx,%edx\n    616c:\tc1 ea 0c             \tshr    $0xc,%edx\n    616f:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6175:\t89 d2                \tmov    %edx,%edx\n    6177:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    617c:\t8b 40 08             \tmov    0x8(%rax),%eax\n    617f:\t89 da                \tmov    %ebx,%edx\n    6181:\tc1 ea 1b             \tshr    $0x1b,%edx\n    6184:\t39 d0                \tcmp    %edx,%eax\n    6186:\t75 38                \tjne    61c0 <sim_main+0x56a9>\n    6188:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 618f <sim_main+0x5678>\n    618f:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    6196:\t48 83 c2 01          \tadd    $0x1,%rdx\n    619a:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    61a1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 61a8 <sim_main+0x5691>\n    61a8:\t89 da                \tmov    %ebx,%edx\n    61aa:\tc1 ea 0c             \tshr    $0xc,%edx\n    61ad:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    61b3:\t89 d2                \tmov    %edx,%edx\n    61b5:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    61ba:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    61be:\teb 11                \tjmp    61d1 <sim_main+0x56ba>\n    61c0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 61c7 <sim_main+0x56b0>\n    61c7:\t89 de                \tmov    %ebx,%esi\n    61c9:\t48 89 c7             \tmov    %rax,%rdi\n    61cc:\te8 00 00 00 00       \tcallq  61d1 <sim_main+0x56ba>\n    61d1:\t89 da                \tmov    %ebx,%edx\n    61d3:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    61d9:\t48 01 d0             \tadd    %rdx,%rax\n    61dc:\t44 89 e2             \tmov    %r12d,%edx\n    61df:\t89 10                \tmov    %edx,(%rax)\n    61e1:\t83 bd 7c ff ff ff 00 \tcmpl   $0x0,-0x84(%rbp)\n    61e8:\t0f 84 82 24 00 00    \tje     8670 <sim_main+0x7b59>\n    61ee:\t8b 85 7c ff ff ff    \tmov    -0x84(%rbp),%eax\n    61f4:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    61f7:\te9 7e 24 00 00       \tjmpq   867a <sim_main+0x7b63>\n    61fc:\tc7 45 84 00 00 00 00 \tmovl   $0x0,-0x7c(%rbp)\n    6203:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6209:\tc1 e8 18             \tshr    $0x18,%eax\n    620c:\t89 c0                \tmov    %eax,%eax\n    620e:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    6215:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    621b:\tc1 e8 08             \tshr    $0x8,%eax\n    621e:\t0f b6 c0             \tmovzbl %al,%eax\n    6221:\t89 c0                \tmov    %eax,%eax\n    6223:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    622a:\t01 d0                \tadd    %edx,%eax\n    622c:\t83 c0 04             \tadd    $0x4,%eax\n    622f:\t89 c3                \tmov    %eax,%ebx\n    6231:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6238 <sim_main+0x5721>\n    6238:\t89 da                \tmov    %ebx,%edx\n    623a:\tc1 ea 0c             \tshr    $0xc,%edx\n    623d:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6243:\t89 d2                \tmov    %edx,%edx\n    6245:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    624a:\t48 85 c0             \ttest   %rax,%rax\n    624d:\t74 63                \tje     62b2 <sim_main+0x579b>\n    624f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6256 <sim_main+0x573f>\n    6256:\t89 da                \tmov    %ebx,%edx\n    6258:\tc1 ea 0c             \tshr    $0xc,%edx\n    625b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6261:\t89 d2                \tmov    %edx,%edx\n    6263:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6268:\t8b 40 08             \tmov    0x8(%rax),%eax\n    626b:\t89 da                \tmov    %ebx,%edx\n    626d:\tc1 ea 1b             \tshr    $0x1b,%edx\n    6270:\t39 d0                \tcmp    %edx,%eax\n    6272:\t75 3e                \tjne    62b2 <sim_main+0x579b>\n    6274:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 627b <sim_main+0x5764>\n    627b:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    6282:\t48 83 c2 01          \tadd    $0x1,%rdx\n    6286:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    628d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6294 <sim_main+0x577d>\n    6294:\t89 da                \tmov    %ebx,%edx\n    6296:\tc1 ea 0c             \tshr    $0xc,%edx\n    6299:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    629f:\t89 d2                \tmov    %edx,%edx\n    62a1:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    62a6:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    62aa:\t48 85 c0             \ttest   %rax,%rax\n    62ad:\t0f 95 c0             \tsetne  %al\n    62b0:\teb 17                \tjmp    62c9 <sim_main+0x57b2>\n    62b2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 62b9 <sim_main+0x57a2>\n    62b9:\t89 de                \tmov    %ebx,%esi\n    62bb:\t48 89 c7             \tmov    %rax,%rdi\n    62be:\te8 00 00 00 00       \tcallq  62c3 <sim_main+0x57ac>\n    62c3:\t48 85 c0             \ttest   %rax,%rax\n    62c6:\t0f 95 c0             \tsetne  %al\n    62c9:\t84 c0                \ttest   %al,%al\n    62cb:\t0f 84 9b 00 00 00    \tje     636c <sim_main+0x5855>\n    62d1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 62d8 <sim_main+0x57c1>\n    62d8:\t89 da                \tmov    %ebx,%edx\n    62da:\tc1 ea 0c             \tshr    $0xc,%edx\n    62dd:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    62e3:\t89 d2                \tmov    %edx,%edx\n    62e5:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    62ea:\t48 85 c0             \ttest   %rax,%rax\n    62ed:\t74 5d                \tje     634c <sim_main+0x5835>\n    62ef:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 62f6 <sim_main+0x57df>\n    62f6:\t89 da                \tmov    %ebx,%edx\n    62f8:\tc1 ea 0c             \tshr    $0xc,%edx\n    62fb:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6301:\t89 d2                \tmov    %edx,%edx\n    6303:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6308:\t8b 40 08             \tmov    0x8(%rax),%eax\n    630b:\t89 da                \tmov    %ebx,%edx\n    630d:\tc1 ea 1b             \tshr    $0x1b,%edx\n    6310:\t39 d0                \tcmp    %edx,%eax\n    6312:\t75 38                \tjne    634c <sim_main+0x5835>\n    6314:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 631b <sim_main+0x5804>\n    631b:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    6322:\t48 83 c2 01          \tadd    $0x1,%rdx\n    6326:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    632d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6334 <sim_main+0x581d>\n    6334:\t89 da                \tmov    %ebx,%edx\n    6336:\tc1 ea 0c             \tshr    $0xc,%edx\n    6339:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    633f:\t89 d2                \tmov    %edx,%edx\n    6341:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6346:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    634a:\teb 11                \tjmp    635d <sim_main+0x5846>\n    634c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6353 <sim_main+0x583c>\n    6353:\t89 de                \tmov    %ebx,%esi\n    6355:\t48 89 c7             \tmov    %rax,%rdi\n    6358:\te8 00 00 00 00       \tcallq  635d <sim_main+0x5846>\n    635d:\t89 da                \tmov    %ebx,%edx\n    635f:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    6365:\t48 01 d0             \tadd    %rdx,%rax\n    6368:\t8b 00                \tmov    (%rax),%eax\n    636a:\teb 05                \tjmp    6371 <sim_main+0x585a>\n    636c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    6371:\t89 45 80             \tmov    %eax,-0x80(%rbp)\n    6374:\t83 7d 84 00          \tcmpl   $0x0,-0x7c(%rbp)\n    6378:\t74 0b                \tje     6385 <sim_main+0x586e>\n    637a:\t8b 45 84             \tmov    -0x7c(%rbp),%eax\n    637d:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    6380:\te9 f5 22 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6385:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    638b:\tc1 e8 10             \tshr    $0x10,%eax\n    638e:\t0f b6 d0             \tmovzbl %al,%edx\n    6391:\t8b 45 80             \tmov    -0x80(%rbp),%eax\n    6394:\t89 d2                \tmov    %edx,%edx\n    6396:\t48 83 c2 20          \tadd    $0x20,%rdx\n    639a:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    63a1:\te9 d4 22 00 00       \tjmpq   867a <sim_main+0x7b63>\n    63a6:\tc7 45 88 00 00 00 00 \tmovl   $0x0,-0x78(%rbp)\n    63ad:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    63b3:\tc1 e8 18             \tshr    $0x18,%eax\n    63b6:\t89 c0                \tmov    %eax,%eax\n    63b8:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    63bf:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    63c5:\tc1 e8 08             \tshr    $0x8,%eax\n    63c8:\t0f b6 c0             \tmovzbl %al,%eax\n    63cb:\t89 c0                \tmov    %eax,%eax\n    63cd:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    63d4:\t01 d0                \tadd    %edx,%eax\n    63d6:\t83 c0 04             \tadd    $0x4,%eax\n    63d9:\t89 c3                \tmov    %eax,%ebx\n    63db:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 63e2 <sim_main+0x58cb>\n    63e2:\t89 da                \tmov    %ebx,%edx\n    63e4:\tc1 ea 0c             \tshr    $0xc,%edx\n    63e7:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    63ed:\t89 d2                \tmov    %edx,%edx\n    63ef:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    63f4:\t48 85 c0             \ttest   %rax,%rax\n    63f7:\t74 63                \tje     645c <sim_main+0x5945>\n    63f9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6400 <sim_main+0x58e9>\n    6400:\t89 da                \tmov    %ebx,%edx\n    6402:\tc1 ea 0c             \tshr    $0xc,%edx\n    6405:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    640b:\t89 d2                \tmov    %edx,%edx\n    640d:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6412:\t8b 40 08             \tmov    0x8(%rax),%eax\n    6415:\t89 da                \tmov    %ebx,%edx\n    6417:\tc1 ea 1b             \tshr    $0x1b,%edx\n    641a:\t39 d0                \tcmp    %edx,%eax\n    641c:\t75 3e                \tjne    645c <sim_main+0x5945>\n    641e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6425 <sim_main+0x590e>\n    6425:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    642c:\t48 83 c2 01          \tadd    $0x1,%rdx\n    6430:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    6437:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 643e <sim_main+0x5927>\n    643e:\t89 da                \tmov    %ebx,%edx\n    6440:\tc1 ea 0c             \tshr    $0xc,%edx\n    6443:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6449:\t89 d2                \tmov    %edx,%edx\n    644b:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6450:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    6454:\t48 85 c0             \ttest   %rax,%rax\n    6457:\t0f 94 c0             \tsete   %al\n    645a:\teb 17                \tjmp    6473 <sim_main+0x595c>\n    645c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6463 <sim_main+0x594c>\n    6463:\t89 de                \tmov    %ebx,%esi\n    6465:\t48 89 c7             \tmov    %rax,%rdi\n    6468:\te8 00 00 00 00       \tcallq  646d <sim_main+0x5956>\n    646d:\t48 85 c0             \ttest   %rax,%rax\n    6470:\t0f 94 c0             \tsete   %al\n    6473:\t84 c0                \ttest   %al,%al\n    6475:\t74 11                \tje     6488 <sim_main+0x5971>\n    6477:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 647e <sim_main+0x5967>\n    647e:\t89 de                \tmov    %ebx,%esi\n    6480:\t48 89 c7             \tmov    %rax,%rdi\n    6483:\te8 00 00 00 00       \tcallq  6488 <sim_main+0x5971>\n    6488:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    648e:\tc1 e8 10             \tshr    $0x10,%eax\n    6491:\t0f b6 c0             \tmovzbl %al,%eax\n    6494:\t89 c0                \tmov    %eax,%eax\n    6496:\t48 83 c0 20          \tadd    $0x20,%rax\n    649a:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    64a1:\t00 \n    64a2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 64a9 <sim_main+0x5992>\n    64a9:\t89 da                \tmov    %ebx,%edx\n    64ab:\tc1 ea 0c             \tshr    $0xc,%edx\n    64ae:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    64b4:\t89 d2                \tmov    %edx,%edx\n    64b6:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    64bb:\t48 85 c0             \ttest   %rax,%rax\n    64be:\t74 5d                \tje     651d <sim_main+0x5a06>\n    64c0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 64c7 <sim_main+0x59b0>\n    64c7:\t89 da                \tmov    %ebx,%edx\n    64c9:\tc1 ea 0c             \tshr    $0xc,%edx\n    64cc:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    64d2:\t89 d2                \tmov    %edx,%edx\n    64d4:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    64d9:\t8b 40 08             \tmov    0x8(%rax),%eax\n    64dc:\t89 da                \tmov    %ebx,%edx\n    64de:\tc1 ea 1b             \tshr    $0x1b,%edx\n    64e1:\t39 d0                \tcmp    %edx,%eax\n    64e3:\t75 38                \tjne    651d <sim_main+0x5a06>\n    64e5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 64ec <sim_main+0x59d5>\n    64ec:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    64f3:\t48 83 c2 01          \tadd    $0x1,%rdx\n    64f7:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    64fe:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6505 <sim_main+0x59ee>\n    6505:\t89 da                \tmov    %ebx,%edx\n    6507:\tc1 ea 0c             \tshr    $0xc,%edx\n    650a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6510:\t89 d2                \tmov    %edx,%edx\n    6512:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6517:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    651b:\teb 11                \tjmp    652e <sim_main+0x5a17>\n    651d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6524 <sim_main+0x5a0d>\n    6524:\t89 de                \tmov    %ebx,%esi\n    6526:\t48 89 c7             \tmov    %rax,%rdi\n    6529:\te8 00 00 00 00       \tcallq  652e <sim_main+0x5a17>\n    652e:\t89 da                \tmov    %ebx,%edx\n    6530:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    6536:\t48 01 d0             \tadd    %rdx,%rax\n    6539:\t44 89 e2             \tmov    %r12d,%edx\n    653c:\t89 10                \tmov    %edx,(%rax)\n    653e:\t83 7d 88 00          \tcmpl   $0x0,-0x78(%rbp)\n    6542:\t0f 84 2b 21 00 00    \tje     8673 <sim_main+0x7b5c>\n    6548:\t8b 45 88             \tmov    -0x78(%rbp),%eax\n    654b:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    654e:\te9 27 21 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6553:\tc7 45 90 00 00 00 00 \tmovl   $0x0,-0x70(%rbp)\n    655a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6560:\tc1 e8 18             \tshr    $0x18,%eax\n    6563:\t89 c0                \tmov    %eax,%eax\n    6565:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    656c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6572:\tc1 e8 08             \tshr    $0x8,%eax\n    6575:\t0f b6 c0             \tmovzbl %al,%eax\n    6578:\t89 c0                \tmov    %eax,%eax\n    657a:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6581:\t01 d0                \tadd    %edx,%eax\n    6583:\t83 c0 04             \tadd    $0x4,%eax\n    6586:\t89 c3                \tmov    %eax,%ebx\n    6588:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 658f <sim_main+0x5a78>\n    658f:\t89 da                \tmov    %ebx,%edx\n    6591:\tc1 ea 0c             \tshr    $0xc,%edx\n    6594:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    659a:\t89 d2                \tmov    %edx,%edx\n    659c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    65a1:\t48 85 c0             \ttest   %rax,%rax\n    65a4:\t74 63                \tje     6609 <sim_main+0x5af2>\n    65a6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 65ad <sim_main+0x5a96>\n    65ad:\t89 da                \tmov    %ebx,%edx\n    65af:\tc1 ea 0c             \tshr    $0xc,%edx\n    65b2:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    65b8:\t89 d2                \tmov    %edx,%edx\n    65ba:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    65bf:\t8b 40 08             \tmov    0x8(%rax),%eax\n    65c2:\t89 da                \tmov    %ebx,%edx\n    65c4:\tc1 ea 1b             \tshr    $0x1b,%edx\n    65c7:\t39 d0                \tcmp    %edx,%eax\n    65c9:\t75 3e                \tjne    6609 <sim_main+0x5af2>\n    65cb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 65d2 <sim_main+0x5abb>\n    65d2:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    65d9:\t48 83 c2 01          \tadd    $0x1,%rdx\n    65dd:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    65e4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 65eb <sim_main+0x5ad4>\n    65eb:\t89 da                \tmov    %ebx,%edx\n    65ed:\tc1 ea 0c             \tshr    $0xc,%edx\n    65f0:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    65f6:\t89 d2                \tmov    %edx,%edx\n    65f8:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    65fd:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    6601:\t48 85 c0             \ttest   %rax,%rax\n    6604:\t0f 95 c0             \tsetne  %al\n    6607:\teb 17                \tjmp    6620 <sim_main+0x5b09>\n    6609:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6610 <sim_main+0x5af9>\n    6610:\t89 de                \tmov    %ebx,%esi\n    6612:\t48 89 c7             \tmov    %rax,%rdi\n    6615:\te8 00 00 00 00       \tcallq  661a <sim_main+0x5b03>\n    661a:\t48 85 c0             \ttest   %rax,%rax\n    661d:\t0f 95 c0             \tsetne  %al\n    6620:\t84 c0                \ttest   %al,%al\n    6622:\t0f 84 9b 00 00 00    \tje     66c3 <sim_main+0x5bac>\n    6628:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 662f <sim_main+0x5b18>\n    662f:\t89 da                \tmov    %ebx,%edx\n    6631:\tc1 ea 0c             \tshr    $0xc,%edx\n    6634:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    663a:\t89 d2                \tmov    %edx,%edx\n    663c:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6641:\t48 85 c0             \ttest   %rax,%rax\n    6644:\t74 5d                \tje     66a3 <sim_main+0x5b8c>\n    6646:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 664d <sim_main+0x5b36>\n    664d:\t89 da                \tmov    %ebx,%edx\n    664f:\tc1 ea 0c             \tshr    $0xc,%edx\n    6652:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6658:\t89 d2                \tmov    %edx,%edx\n    665a:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    665f:\t8b 40 08             \tmov    0x8(%rax),%eax\n    6662:\t89 da                \tmov    %ebx,%edx\n    6664:\tc1 ea 1b             \tshr    $0x1b,%edx\n    6667:\t39 d0                \tcmp    %edx,%eax\n    6669:\t75 38                \tjne    66a3 <sim_main+0x5b8c>\n    666b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6672 <sim_main+0x5b5b>\n    6672:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    6679:\t48 83 c2 01          \tadd    $0x1,%rdx\n    667d:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    6684:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 668b <sim_main+0x5b74>\n    668b:\t89 da                \tmov    %ebx,%edx\n    668d:\tc1 ea 0c             \tshr    $0xc,%edx\n    6690:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6696:\t89 d2                \tmov    %edx,%edx\n    6698:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    669d:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    66a1:\teb 11                \tjmp    66b4 <sim_main+0x5b9d>\n    66a3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 66aa <sim_main+0x5b93>\n    66aa:\t89 de                \tmov    %ebx,%esi\n    66ac:\t48 89 c7             \tmov    %rax,%rdi\n    66af:\te8 00 00 00 00       \tcallq  66b4 <sim_main+0x5b9d>\n    66b4:\t89 da                \tmov    %ebx,%edx\n    66b6:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    66bc:\t48 01 d0             \tadd    %rdx,%rax\n    66bf:\t8b 00                \tmov    (%rax),%eax\n    66c1:\teb 05                \tjmp    66c8 <sim_main+0x5bb1>\n    66c3:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    66c8:\t89 45 8c             \tmov    %eax,-0x74(%rbp)\n    66cb:\t83 7d 90 00          \tcmpl   $0x0,-0x70(%rbp)\n    66cf:\t74 0b                \tje     66dc <sim_main+0x5bc5>\n    66d1:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n    66d4:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    66d7:\te9 9e 1f 00 00       \tjmpq   867a <sim_main+0x7b63>\n    66dc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    66e2:\tc1 e8 10             \tshr    $0x10,%eax\n    66e5:\t0f b6 d0             \tmovzbl %al,%edx\n    66e8:\t8b 45 8c             \tmov    -0x74(%rbp),%eax\n    66eb:\t89 d2                \tmov    %edx,%edx\n    66ed:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    66f4:\te9 81 1f 00 00       \tjmpq   867a <sim_main+0x7b63>\n    66f9:\tc7 45 94 00 00 00 00 \tmovl   $0x0,-0x6c(%rbp)\n    6700:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6706:\tc1 e8 18             \tshr    $0x18,%eax\n    6709:\t89 c0                \tmov    %eax,%eax\n    670b:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    6712:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6718:\tc1 e8 08             \tshr    $0x8,%eax\n    671b:\t0f b6 c0             \tmovzbl %al,%eax\n    671e:\t89 c0                \tmov    %eax,%eax\n    6720:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6727:\t01 d0                \tadd    %edx,%eax\n    6729:\t83 c0 04             \tadd    $0x4,%eax\n    672c:\t89 c3                \tmov    %eax,%ebx\n    672e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6735 <sim_main+0x5c1e>\n    6735:\t89 da                \tmov    %ebx,%edx\n    6737:\tc1 ea 0c             \tshr    $0xc,%edx\n    673a:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6740:\t89 d2                \tmov    %edx,%edx\n    6742:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6747:\t48 85 c0             \ttest   %rax,%rax\n    674a:\t74 63                \tje     67af <sim_main+0x5c98>\n    674c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6753 <sim_main+0x5c3c>\n    6753:\t89 da                \tmov    %ebx,%edx\n    6755:\tc1 ea 0c             \tshr    $0xc,%edx\n    6758:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    675e:\t89 d2                \tmov    %edx,%edx\n    6760:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6765:\t8b 40 08             \tmov    0x8(%rax),%eax\n    6768:\t89 da                \tmov    %ebx,%edx\n    676a:\tc1 ea 1b             \tshr    $0x1b,%edx\n    676d:\t39 d0                \tcmp    %edx,%eax\n    676f:\t75 3e                \tjne    67af <sim_main+0x5c98>\n    6771:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6778 <sim_main+0x5c61>\n    6778:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    677f:\t48 83 c2 01          \tadd    $0x1,%rdx\n    6783:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    678a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6791 <sim_main+0x5c7a>\n    6791:\t89 da                \tmov    %ebx,%edx\n    6793:\tc1 ea 0c             \tshr    $0xc,%edx\n    6796:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    679c:\t89 d2                \tmov    %edx,%edx\n    679e:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    67a3:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    67a7:\t48 85 c0             \ttest   %rax,%rax\n    67aa:\t0f 94 c0             \tsete   %al\n    67ad:\teb 17                \tjmp    67c6 <sim_main+0x5caf>\n    67af:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 67b6 <sim_main+0x5c9f>\n    67b6:\t89 de                \tmov    %ebx,%esi\n    67b8:\t48 89 c7             \tmov    %rax,%rdi\n    67bb:\te8 00 00 00 00       \tcallq  67c0 <sim_main+0x5ca9>\n    67c0:\t48 85 c0             \ttest   %rax,%rax\n    67c3:\t0f 94 c0             \tsete   %al\n    67c6:\t84 c0                \ttest   %al,%al\n    67c8:\t74 11                \tje     67db <sim_main+0x5cc4>\n    67ca:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 67d1 <sim_main+0x5cba>\n    67d1:\t89 de                \tmov    %ebx,%esi\n    67d3:\t48 89 c7             \tmov    %rax,%rdi\n    67d6:\te8 00 00 00 00       \tcallq  67db <sim_main+0x5cc4>\n    67db:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    67e1:\tc1 e8 10             \tshr    $0x10,%eax\n    67e4:\t0f b6 c0             \tmovzbl %al,%eax\n    67e7:\t89 c0                \tmov    %eax,%eax\n    67e9:\t44 8b 24 85 00 00 00 \tmov    0x0(,%rax,4),%r12d\n    67f0:\t00 \n    67f1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 67f8 <sim_main+0x5ce1>\n    67f8:\t89 da                \tmov    %ebx,%edx\n    67fa:\tc1 ea 0c             \tshr    $0xc,%edx\n    67fd:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6803:\t89 d2                \tmov    %edx,%edx\n    6805:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    680a:\t48 85 c0             \ttest   %rax,%rax\n    680d:\t74 5d                \tje     686c <sim_main+0x5d55>\n    680f:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6816 <sim_main+0x5cff>\n    6816:\t89 da                \tmov    %ebx,%edx\n    6818:\tc1 ea 0c             \tshr    $0xc,%edx\n    681b:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    6821:\t89 d2                \tmov    %edx,%edx\n    6823:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6828:\t8b 40 08             \tmov    0x8(%rax),%eax\n    682b:\t89 da                \tmov    %ebx,%edx\n    682d:\tc1 ea 1b             \tshr    $0x1b,%edx\n    6830:\t39 d0                \tcmp    %edx,%eax\n    6832:\t75 38                \tjne    686c <sim_main+0x5d55>\n    6834:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 683b <sim_main+0x5d24>\n    683b:\t48 8b 90 18 00 04 00 \tmov    0x40018(%rax),%rdx\n    6842:\t48 83 c2 01          \tadd    $0x1,%rdx\n    6846:\t48 89 90 18 00 04 00 \tmov    %rdx,0x40018(%rax)\n    684d:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6854 <sim_main+0x5d3d>\n    6854:\t89 da                \tmov    %ebx,%edx\n    6856:\tc1 ea 0c             \tshr    $0xc,%edx\n    6859:\t81 e2 ff 7f 00 00    \tand    $0x7fff,%edx\n    685f:\t89 d2                \tmov    %edx,%edx\n    6861:\t48 8b 44 d0 08       \tmov    0x8(%rax,%rdx,8),%rax\n    6866:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    686a:\teb 11                \tjmp    687d <sim_main+0x5d66>\n    686c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 6873 <sim_main+0x5d5c>\n    6873:\t89 de                \tmov    %ebx,%esi\n    6875:\t48 89 c7             \tmov    %rax,%rdi\n    6878:\te8 00 00 00 00       \tcallq  687d <sim_main+0x5d66>\n    687d:\t89 da                \tmov    %ebx,%edx\n    687f:\t81 e2 ff 0f 00 00    \tand    $0xfff,%edx\n    6885:\t48 01 d0             \tadd    %rdx,%rax\n    6888:\t44 89 e2             \tmov    %r12d,%edx\n    688b:\t89 10                \tmov    %edx,(%rax)\n    688d:\t83 7d 94 00          \tcmpl   $0x0,-0x6c(%rbp)\n    6891:\t0f 84 df 1d 00 00    \tje     8676 <sim_main+0x7b5f>\n    6897:\t8b 45 94             \tmov    -0x6c(%rbp),%eax\n    689a:\t89 45 ac             \tmov    %eax,-0x54(%rbp)\n    689d:\te9 d8 1d 00 00       \tjmpq   867a <sim_main+0x7b63>\n    68a2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    68a8:\tc1 e8 18             \tshr    $0x18,%eax\n    68ab:\t89 c0                \tmov    %eax,%eax\n    68ad:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    68b4:\t85 c0                \ttest   %eax,%eax\n    68b6:\t7e 4b                \tjle    6903 <sim_main+0x5dec>\n    68b8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    68be:\tc1 e8 10             \tshr    $0x10,%eax\n    68c1:\t0f b6 c0             \tmovzbl %al,%eax\n    68c4:\t89 c0                \tmov    %eax,%eax\n    68c6:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    68cd:\t85 c0                \ttest   %eax,%eax\n    68cf:\t7e 32                \tjle    6903 <sim_main+0x5dec>\n    68d1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    68d7:\tc1 e8 18             \tshr    $0x18,%eax\n    68da:\t89 c0                \tmov    %eax,%eax\n    68dc:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    68e3:\tba ff ff ff 7f       \tmov    $0x7fffffff,%edx\n    68e8:\t29 c2                \tsub    %eax,%edx\n    68ea:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    68f0:\tc1 e8 10             \tshr    $0x10,%eax\n    68f3:\t0f b6 c0             \tmovzbl %al,%eax\n    68f6:\t89 c0                \tmov    %eax,%eax\n    68f8:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    68ff:\t39 c2                \tcmp    %eax,%edx\n    6901:\t7c 61                \tjl     6964 <sim_main+0x5e4d>\n    6903:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6909:\tc1 e8 18             \tshr    $0x18,%eax\n    690c:\t89 c0                \tmov    %eax,%eax\n    690e:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6915:\t85 c0                \ttest   %eax,%eax\n    6917:\t79 57                \tjns    6970 <sim_main+0x5e59>\n    6919:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    691f:\tc1 e8 10             \tshr    $0x10,%eax\n    6922:\t0f b6 c0             \tmovzbl %al,%eax\n    6925:\t89 c0                \tmov    %eax,%eax\n    6927:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    692e:\t85 c0                \ttest   %eax,%eax\n    6930:\t79 3e                \tjns    6970 <sim_main+0x5e59>\n    6932:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6938:\tc1 e8 18             \tshr    $0x18,%eax\n    693b:\t89 c0                \tmov    %eax,%eax\n    693d:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6944:\tba 01 00 00 80       \tmov    $0x80000001,%edx\n    6949:\t29 c2                \tsub    %eax,%edx\n    694b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6951:\tc1 e8 10             \tshr    $0x10,%eax\n    6954:\t0f b6 c0             \tmovzbl %al,%eax\n    6957:\t89 c0                \tmov    %eax,%eax\n    6959:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6960:\t39 c2                \tcmp    %eax,%edx\n    6962:\t7e 0c                \tjle    6970 <sim_main+0x5e59>\n    6964:\tc7 45 ac 03 00 00 00 \tmovl   $0x3,-0x54(%rbp)\n    696b:\te9 0a 1d 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6970:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6976:\tc1 e8 18             \tshr    $0x18,%eax\n    6979:\t89 c0                \tmov    %eax,%eax\n    697b:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    6982:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6988:\tc1 e8 10             \tshr    $0x10,%eax\n    698b:\t0f b6 c0             \tmovzbl %al,%eax\n    698e:\t89 c0                \tmov    %eax,%eax\n    6990:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6997:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    699d:\tc1 e9 08             \tshr    $0x8,%ecx\n    69a0:\t0f b6 c9             \tmovzbl %cl,%ecx\n    69a3:\t01 d0                \tadd    %edx,%eax\n    69a5:\t89 ca                \tmov    %ecx,%edx\n    69a7:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    69ae:\te9 c7 1c 00 00       \tjmpq   867a <sim_main+0x7b63>\n    69b3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    69b9:\tc1 e8 18             \tshr    $0x18,%eax\n    69bc:\t89 c0                \tmov    %eax,%eax\n    69be:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    69c5:\t85 c0                \ttest   %eax,%eax\n    69c7:\t7e 2f                \tjle    69f8 <sim_main+0x5ee1>\n    69c9:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    69cf:\t66 85 c0             \ttest   %ax,%ax\n    69d2:\t7e 24                \tjle    69f8 <sim_main+0x5ee1>\n    69d4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    69da:\tc1 e8 18             \tshr    $0x18,%eax\n    69dd:\t89 c0                \tmov    %eax,%eax\n    69df:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    69e6:\tba ff ff ff 7f       \tmov    $0x7fffffff,%edx\n    69eb:\t29 c2                \tsub    %eax,%edx\n    69ed:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    69f3:\t98                   \tcwtl   \n    69f4:\t39 c2                \tcmp    %eax,%edx\n    69f6:\t7c 45                \tjl     6a3d <sim_main+0x5f26>\n    69f8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    69fe:\tc1 e8 18             \tshr    $0x18,%eax\n    6a01:\t89 c0                \tmov    %eax,%eax\n    6a03:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6a0a:\t85 c0                \ttest   %eax,%eax\n    6a0c:\t79 3b                \tjns    6a49 <sim_main+0x5f32>\n    6a0e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6a14:\t66 85 c0             \ttest   %ax,%ax\n    6a17:\t79 30                \tjns    6a49 <sim_main+0x5f32>\n    6a19:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6a1f:\tc1 e8 18             \tshr    $0x18,%eax\n    6a22:\t89 c0                \tmov    %eax,%eax\n    6a24:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6a2b:\tba 01 00 00 80       \tmov    $0x80000001,%edx\n    6a30:\t29 c2                \tsub    %eax,%edx\n    6a32:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6a38:\t98                   \tcwtl   \n    6a39:\t39 c2                \tcmp    %eax,%edx\n    6a3b:\t7e 0c                \tjle    6a49 <sim_main+0x5f32>\n    6a3d:\tc7 45 ac 03 00 00 00 \tmovl   $0x3,-0x54(%rbp)\n    6a44:\te9 31 1c 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6a49:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6a4f:\tc1 e8 18             \tshr    $0x18,%eax\n    6a52:\t89 c0                \tmov    %eax,%eax\n    6a54:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    6a5b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6a61:\t98                   \tcwtl   \n    6a62:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    6a68:\tc1 e9 10             \tshr    $0x10,%ecx\n    6a6b:\t0f b6 c9             \tmovzbl %cl,%ecx\n    6a6e:\t01 d0                \tadd    %edx,%eax\n    6a70:\t89 ca                \tmov    %ecx,%edx\n    6a72:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    6a79:\te9 fc 1b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6a7e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6a84:\tc1 e8 18             \tshr    $0x18,%eax\n    6a87:\t89 c0                \tmov    %eax,%eax\n    6a89:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    6a90:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6a96:\tc1 e8 10             \tshr    $0x10,%eax\n    6a99:\t0f b6 c0             \tmovzbl %al,%eax\n    6a9c:\t89 c0                \tmov    %eax,%eax\n    6a9e:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6aa5:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    6aab:\tc1 e9 08             \tshr    $0x8,%ecx\n    6aae:\t0f b6 c9             \tmovzbl %cl,%ecx\n    6ab1:\t01 d0                \tadd    %edx,%eax\n    6ab3:\t89 ca                \tmov    %ecx,%edx\n    6ab5:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    6abc:\te9 b9 1b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6ac1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6ac7:\tc1 e8 18             \tshr    $0x18,%eax\n    6aca:\t89 c0                \tmov    %eax,%eax\n    6acc:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    6ad3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6ad9:\t98                   \tcwtl   \n    6ada:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    6ae0:\tc1 e9 10             \tshr    $0x10,%ecx\n    6ae3:\t0f b6 c9             \tmovzbl %cl,%ecx\n    6ae6:\t01 d0                \tadd    %edx,%eax\n    6ae8:\t89 ca                \tmov    %ecx,%edx\n    6aea:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    6af1:\te9 84 1b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6af6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6afc:\tc1 e8 18             \tshr    $0x18,%eax\n    6aff:\t89 c0                \tmov    %eax,%eax\n    6b01:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6b08:\t85 c0                \ttest   %eax,%eax\n    6b0a:\t7e 4a                \tjle    6b56 <sim_main+0x603f>\n    6b0c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6b12:\tc1 e8 10             \tshr    $0x10,%eax\n    6b15:\t0f b6 c0             \tmovzbl %al,%eax\n    6b18:\t89 c0                \tmov    %eax,%eax\n    6b1a:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6b21:\t85 c0                \ttest   %eax,%eax\n    6b23:\t79 31                \tjns    6b56 <sim_main+0x603f>\n    6b25:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6b2b:\tc1 e8 10             \tshr    $0x10,%eax\n    6b2e:\t0f b6 c0             \tmovzbl %al,%eax\n    6b31:\t89 c0                \tmov    %eax,%eax\n    6b33:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6b3a:\t8d 90 ff ff ff 7f    \tlea    0x7fffffff(%rax),%edx\n    6b40:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6b46:\tc1 e8 18             \tshr    $0x18,%eax\n    6b49:\t89 c0                \tmov    %eax,%eax\n    6b4b:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6b52:\t39 c2                \tcmp    %eax,%edx\n    6b54:\t7c 60                \tjl     6bb6 <sim_main+0x609f>\n    6b56:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6b5c:\tc1 e8 18             \tshr    $0x18,%eax\n    6b5f:\t89 c0                \tmov    %eax,%eax\n    6b61:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6b68:\t85 c0                \ttest   %eax,%eax\n    6b6a:\t79 56                \tjns    6bc2 <sim_main+0x60ab>\n    6b6c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6b72:\tc1 e8 10             \tshr    $0x10,%eax\n    6b75:\t0f b6 c0             \tmovzbl %al,%eax\n    6b78:\t89 c0                \tmov    %eax,%eax\n    6b7a:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6b81:\t85 c0                \ttest   %eax,%eax\n    6b83:\t7e 3d                \tjle    6bc2 <sim_main+0x60ab>\n    6b85:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6b8b:\tc1 e8 10             \tshr    $0x10,%eax\n    6b8e:\t0f b6 c0             \tmovzbl %al,%eax\n    6b91:\t89 c0                \tmov    %eax,%eax\n    6b93:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6b9a:\t8d 90 01 00 00 80    \tlea    -0x7fffffff(%rax),%edx\n    6ba0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6ba6:\tc1 e8 18             \tshr    $0x18,%eax\n    6ba9:\t89 c0                \tmov    %eax,%eax\n    6bab:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6bb2:\t39 c2                \tcmp    %eax,%edx\n    6bb4:\t7e 0c                \tjle    6bc2 <sim_main+0x60ab>\n    6bb6:\tc7 45 ac 03 00 00 00 \tmovl   $0x3,-0x54(%rbp)\n    6bbd:\te9 b8 1a 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6bc2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6bc8:\tc1 e8 18             \tshr    $0x18,%eax\n    6bcb:\t89 c0                \tmov    %eax,%eax\n    6bcd:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    6bd4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6bda:\tc1 e8 10             \tshr    $0x10,%eax\n    6bdd:\t0f b6 c0             \tmovzbl %al,%eax\n    6be0:\t89 c0                \tmov    %eax,%eax\n    6be2:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6be9:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    6bef:\tc1 e9 08             \tshr    $0x8,%ecx\n    6bf2:\t0f b6 c9             \tmovzbl %cl,%ecx\n    6bf5:\t29 c2                \tsub    %eax,%edx\n    6bf7:\t89 d0                \tmov    %edx,%eax\n    6bf9:\t89 ca                \tmov    %ecx,%edx\n    6bfb:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    6c02:\te9 73 1a 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6c07:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6c0d:\tc1 e8 18             \tshr    $0x18,%eax\n    6c10:\t89 c0                \tmov    %eax,%eax\n    6c12:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    6c19:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6c1f:\tc1 e8 10             \tshr    $0x10,%eax\n    6c22:\t0f b6 c0             \tmovzbl %al,%eax\n    6c25:\t89 c0                \tmov    %eax,%eax\n    6c27:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6c2e:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    6c34:\tc1 e9 08             \tshr    $0x8,%ecx\n    6c37:\t0f b6 c9             \tmovzbl %cl,%ecx\n    6c3a:\t29 c2                \tsub    %eax,%edx\n    6c3c:\t89 d0                \tmov    %edx,%eax\n    6c3e:\t89 ca                \tmov    %ecx,%edx\n    6c40:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    6c47:\te9 2e 1a 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6c4c:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    6c53:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n    6c56:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n    6c59:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 6c63 <sim_main+0x614c>\n    6c60:\t00 00 00 \n    6c63:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 6c6d <sim_main+0x6156>\n    6c6a:\t00 00 00 \n    6c6d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6c73:\tc1 e8 18             \tshr    $0x18,%eax\n    6c76:\t89 c0                \tmov    %eax,%eax\n    6c78:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6c7f:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n    6c82:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6c88:\tc1 e8 10             \tshr    $0x10,%eax\n    6c8b:\t0f b6 c0             \tmovzbl %al,%eax\n    6c8e:\t89 c0                \tmov    %eax,%eax\n    6c90:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6c97:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n    6c9a:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    6c9e:\t79 0a                \tjns    6caa <sim_main+0x6193>\n    6ca0:\tc7 45 d8 01 00 00 00 \tmovl   $0x1,-0x28(%rbp)\n    6ca7:\tf7 5d cc             \tnegl   -0x34(%rbp)\n    6caa:\t83 7d c8 00          \tcmpl   $0x0,-0x38(%rbp)\n    6cae:\t79 0a                \tjns    6cba <sim_main+0x61a3>\n    6cb0:\tc7 45 d4 01 00 00 00 \tmovl   $0x1,-0x2c(%rbp)\n    6cb7:\tf7 5d c8             \tnegl   -0x38(%rbp)\n    6cba:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n    6cbe:\t79 09                \tjns    6cc9 <sim_main+0x61b2>\n    6cc0:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    6cc3:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6cc9 <sim_main+0x61b2>\n    6cc9:\tc7 45 d0 00 00 00 00 \tmovl   $0x0,-0x30(%rbp)\n    6cd0:\te9 9a 00 00 00       \tjmpq   6d6f <sim_main+0x6258>\n    6cd5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6cdb <sim_main+0x61c4>\n    6cdb:\t01 c0                \tadd    %eax,%eax\n    6cdd:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6ce3 <sim_main+0x61cc>\n    6ce3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6ce9 <sim_main+0x61d2>\n    6ce9:\t41 89 c4             \tmov    %eax,%r12d\n    6cec:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6cf2 <sim_main+0x61db>\n    6cf2:\tba 01 00 00 00       \tmov    $0x1,%edx\n    6cf7:\tbe 1f 00 00 00       \tmov    $0x1f,%esi\n    6cfc:\t89 c7                \tmov    %eax,%edi\n    6cfe:\te8 00 00 00 00       \tcallq  6d03 <sim_main+0x61ec>\n    6d03:\t44 01 e0             \tadd    %r12d,%eax\n    6d06:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6d0c <sim_main+0x61f5>\n    6d0c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6d12 <sim_main+0x61fb>\n    6d12:\t01 c0                \tadd    %eax,%eax\n    6d14:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6d1a <sim_main+0x6203>\n    6d1a:\tb8 1e 00 00 00       \tmov    $0x1e,%eax\n    6d1f:\t2b 45 d0             \tsub    -0x30(%rbp),%eax\n    6d22:\t89 c1                \tmov    %eax,%ecx\n    6d24:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    6d27:\tba 01 00 00 00       \tmov    $0x1,%edx\n    6d2c:\t89 ce                \tmov    %ecx,%esi\n    6d2e:\t89 c7                \tmov    %eax,%edi\n    6d30:\te8 00 00 00 00       \tcallq  6d35 <sim_main+0x621e>\n    6d35:\t83 f8 01             \tcmp    $0x1,%eax\n    6d38:\t75 31                \tjne    6d6b <sim_main+0x6254>\n    6d3a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6d40 <sim_main+0x6229>\n    6d40:\tf7 d0                \tnot    %eax\n    6d42:\t89 c2                \tmov    %eax,%edx\n    6d44:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    6d47:\t39 c2                \tcmp    %eax,%edx\n    6d49:\t73 0f                \tjae    6d5a <sim_main+0x6243>\n    6d4b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6d51 <sim_main+0x623a>\n    6d51:\t83 c0 01             \tadd    $0x1,%eax\n    6d54:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6d5a <sim_main+0x6243>\n    6d5a:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 6d60 <sim_main+0x6249>\n    6d60:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    6d63:\t01 d0                \tadd    %edx,%eax\n    6d65:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6d6b <sim_main+0x6254>\n    6d6b:\t83 45 d0 01          \taddl   $0x1,-0x30(%rbp)\n    6d6f:\t83 7d d0 1e          \tcmpl   $0x1e,-0x30(%rbp)\n    6d73:\t0f 8e 5c ff ff ff    \tjle    6cd5 <sim_main+0x61be>\n    6d79:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n    6d7c:\t3b 45 d4             \tcmp    -0x2c(%rbp),%eax\n    6d7f:\t0f 84 f4 18 00 00    \tje     8679 <sim_main+0x7b62>\n    6d85:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6d8b <sim_main+0x6274>\n    6d8b:\tf7 d0                \tnot    %eax\n    6d8d:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6d93 <sim_main+0x627c>\n    6d93:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6d99 <sim_main+0x6282>\n    6d99:\tf7 d0                \tnot    %eax\n    6d9b:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6da1 <sim_main+0x628a>\n    6da1:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6da7 <sim_main+0x6290>\n    6da7:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    6daa:\t75 0f                \tjne    6dbb <sim_main+0x62a4>\n    6dac:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6db2 <sim_main+0x629b>\n    6db2:\t83 c0 01             \tadd    $0x1,%eax\n    6db5:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6dbb <sim_main+0x62a4>\n    6dbb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6dc1 <sim_main+0x62aa>\n    6dc1:\t83 c0 01             \tadd    $0x1,%eax\n    6dc4:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6dca <sim_main+0x62b3>\n    6dca:\te9 aa 18 00 00       \tjmpq   8679 <sim_main+0x7b62>\n    6dcf:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 6dd9 <sim_main+0x62c2>\n    6dd6:\t00 00 00 \n    6dd9:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 6de3 <sim_main+0x62cc>\n    6de0:\t00 00 00 \n    6de3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6de9:\tc1 e8 18             \tshr    $0x18,%eax\n    6dec:\t89 c0                \tmov    %eax,%eax\n    6dee:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6df5:\t85 c0                \ttest   %eax,%eax\n    6df7:\t79 1b                \tjns    6e14 <sim_main+0x62fd>\n    6df9:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6dff:\tc1 e8 10             \tshr    $0x10,%eax\n    6e02:\t0f b6 c0             \tmovzbl %al,%eax\n    6e05:\t89 c0                \tmov    %eax,%eax\n    6e07:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6e0e:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6e14 <sim_main+0x62fd>\n    6e14:\tc7 45 c4 00 00 00 00 \tmovl   $0x0,-0x3c(%rbp)\n    6e1b:\te9 cd 00 00 00       \tjmpq   6eed <sim_main+0x63d6>\n    6e20:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6e26 <sim_main+0x630f>\n    6e26:\t01 c0                \tadd    %eax,%eax\n    6e28:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6e2e <sim_main+0x6317>\n    6e2e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6e34 <sim_main+0x631d>\n    6e34:\t41 89 c4             \tmov    %eax,%r12d\n    6e37:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6e3d <sim_main+0x6326>\n    6e3d:\tba 01 00 00 00       \tmov    $0x1,%edx\n    6e42:\tbe 1f 00 00 00       \tmov    $0x1f,%esi\n    6e47:\t89 c7                \tmov    %eax,%edi\n    6e49:\te8 00 00 00 00       \tcallq  6e4e <sim_main+0x6337>\n    6e4e:\t44 01 e0             \tadd    %r12d,%eax\n    6e51:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6e57 <sim_main+0x6340>\n    6e57:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6e5d <sim_main+0x6346>\n    6e5d:\t01 c0                \tadd    %eax,%eax\n    6e5f:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6e65 <sim_main+0x634e>\n    6e65:\tb8 1e 00 00 00       \tmov    $0x1e,%eax\n    6e6a:\t2b 45 c4             \tsub    -0x3c(%rbp),%eax\n    6e6d:\t89 c1                \tmov    %eax,%ecx\n    6e6f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6e75:\tc1 e8 18             \tshr    $0x18,%eax\n    6e78:\t89 c0                \tmov    %eax,%eax\n    6e7a:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6e81:\tba 01 00 00 00       \tmov    $0x1,%edx\n    6e86:\t89 ce                \tmov    %ecx,%esi\n    6e88:\t89 c7                \tmov    %eax,%edi\n    6e8a:\te8 00 00 00 00       \tcallq  6e8f <sim_main+0x6378>\n    6e8f:\t83 f8 01             \tcmp    $0x1,%eax\n    6e92:\t75 55                \tjne    6ee9 <sim_main+0x63d2>\n    6e94:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6e9a <sim_main+0x6383>\n    6e9a:\tf7 d0                \tnot    %eax\n    6e9c:\t89 c2                \tmov    %eax,%edx\n    6e9e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6ea4:\tc1 e8 10             \tshr    $0x10,%eax\n    6ea7:\t0f b6 c0             \tmovzbl %al,%eax\n    6eaa:\t89 c0                \tmov    %eax,%eax\n    6eac:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6eb3:\t39 c2                \tcmp    %eax,%edx\n    6eb5:\t73 0f                \tjae    6ec6 <sim_main+0x63af>\n    6eb7:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 6ebd <sim_main+0x63a6>\n    6ebd:\t83 c0 01             \tadd    $0x1,%eax\n    6ec0:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6ec6 <sim_main+0x63af>\n    6ec6:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 6ecc <sim_main+0x63b5>\n    6ecc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6ed2:\tc1 e8 10             \tshr    $0x10,%eax\n    6ed5:\t0f b6 c0             \tmovzbl %al,%eax\n    6ed8:\t89 c0                \tmov    %eax,%eax\n    6eda:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6ee1:\t01 d0                \tadd    %edx,%eax\n    6ee3:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6ee9 <sim_main+0x63d2>\n    6ee9:\t83 45 c4 01          \taddl   $0x1,-0x3c(%rbp)\n    6eed:\t83 7d c4 1e          \tcmpl   $0x1e,-0x3c(%rbp)\n    6ef1:\t0f 8e 29 ff ff ff    \tjle    6e20 <sim_main+0x6309>\n    6ef7:\te9 7e 17 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6efc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6f02:\tc1 e8 10             \tshr    $0x10,%eax\n    6f05:\t0f b6 c0             \tmovzbl %al,%eax\n    6f08:\t89 c0                \tmov    %eax,%eax\n    6f0a:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6f11:\t85 c0                \ttest   %eax,%eax\n    6f13:\t75 0c                \tjne    6f21 <sim_main+0x640a>\n    6f15:\tc7 45 ac 04 00 00 00 \tmovl   $0x4,-0x54(%rbp)\n    6f1c:\te9 59 17 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6f21:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6f27:\tc1 e8 18             \tshr    $0x18,%eax\n    6f2a:\t89 c0                \tmov    %eax,%eax\n    6f2c:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6f33:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    6f39:\tc1 ea 10             \tshr    $0x10,%edx\n    6f3c:\t0f b6 d2             \tmovzbl %dl,%edx\n    6f3f:\t89 d2                \tmov    %edx,%edx\n    6f41:\t8b 3c 95 00 00 00 00 \tmov    0x0(,%rdx,4),%edi\n    6f48:\t99                   \tcltd   \n    6f49:\tf7 ff                \tidiv   %edi\n    6f4b:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6f51 <sim_main+0x643a>\n    6f51:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6f57:\tc1 e8 18             \tshr    $0x18,%eax\n    6f5a:\t89 c0                \tmov    %eax,%eax\n    6f5c:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6f63:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    6f69:\tc1 ea 10             \tshr    $0x10,%edx\n    6f6c:\t0f b6 d2             \tmovzbl %dl,%edx\n    6f6f:\t89 d2                \tmov    %edx,%edx\n    6f71:\t8b 0c 95 00 00 00 00 \tmov    0x0(,%rdx,4),%ecx\n    6f78:\t99                   \tcltd   \n    6f79:\tf7 f9                \tidiv   %ecx\n    6f7b:\t89 d0                \tmov    %edx,%eax\n    6f7d:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6f83 <sim_main+0x646c>\n    6f83:\te9 f2 16 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6f88:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6f8e:\tc1 e8 10             \tshr    $0x10,%eax\n    6f91:\t0f b6 c0             \tmovzbl %al,%eax\n    6f94:\t89 c0                \tmov    %eax,%eax\n    6f96:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6f9d:\t85 c0                \ttest   %eax,%eax\n    6f9f:\t75 0c                \tjne    6fad <sim_main+0x6496>\n    6fa1:\tc7 45 ac 04 00 00 00 \tmovl   $0x4,-0x54(%rbp)\n    6fa8:\te9 cd 16 00 00       \tjmpq   867a <sim_main+0x7b63>\n    6fad:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6fb3:\tc1 e8 18             \tshr    $0x18,%eax\n    6fb6:\t89 c0                \tmov    %eax,%eax\n    6fb8:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6fbf:\t89 c2                \tmov    %eax,%edx\n    6fc1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6fc7:\tc1 e8 10             \tshr    $0x10,%eax\n    6fca:\t0f b6 c0             \tmovzbl %al,%eax\n    6fcd:\t89 c0                \tmov    %eax,%eax\n    6fcf:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6fd6:\t89 c1                \tmov    %eax,%ecx\n    6fd8:\t89 d0                \tmov    %edx,%eax\n    6fda:\tba 00 00 00 00       \tmov    $0x0,%edx\n    6fdf:\tf7 f1                \tdiv    %ecx\n    6fe1:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 6fe7 <sim_main+0x64d0>\n    6fe7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    6fed:\tc1 e8 18             \tshr    $0x18,%eax\n    6ff0:\t89 c0                \tmov    %eax,%eax\n    6ff2:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    6ff9:\t89 c2                \tmov    %eax,%edx\n    6ffb:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7001:\tc1 e8 10             \tshr    $0x10,%eax\n    7004:\t0f b6 c0             \tmovzbl %al,%eax\n    7007:\t89 c0                \tmov    %eax,%eax\n    7009:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7010:\t89 c1                \tmov    %eax,%ecx\n    7012:\t89 d0                \tmov    %edx,%eax\n    7014:\tba 00 00 00 00       \tmov    $0x0,%edx\n    7019:\tf7 f1                \tdiv    %ecx\n    701b:\t89 d0                \tmov    %edx,%eax\n    701d:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 7023 <sim_main+0x650c>\n    7023:\te9 52 16 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7028:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    702e:\tc1 e8 08             \tshr    $0x8,%eax\n    7031:\t0f b6 d0             \tmovzbl %al,%edx\n    7034:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 703a <sim_main+0x6523>\n    703a:\t89 d2                \tmov    %edx,%edx\n    703c:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    7043:\te9 32 16 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7048:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    704e:\tc1 e8 18             \tshr    $0x18,%eax\n    7051:\t89 c0                \tmov    %eax,%eax\n    7053:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    705a:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 7060 <sim_main+0x6549>\n    7060:\te9 15 16 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7065:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    706b:\tc1 e8 08             \tshr    $0x8,%eax\n    706e:\t0f b6 d0             \tmovzbl %al,%edx\n    7071:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7077 <sim_main+0x6560>\n    7077:\t89 d2                \tmov    %edx,%edx\n    7079:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    7080:\te9 f5 15 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7085:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    708b:\tc1 e8 18             \tshr    $0x18,%eax\n    708e:\t89 c0                \tmov    %eax,%eax\n    7090:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7097:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 709d <sim_main+0x6586>\n    709d:\te9 d8 15 00 00       \tjmpq   867a <sim_main+0x7b63>\n    70a2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    70a8:\tc1 e8 18             \tshr    $0x18,%eax\n    70ab:\t89 c0                \tmov    %eax,%eax\n    70ad:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    70b4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    70ba:\tc1 e8 10             \tshr    $0x10,%eax\n    70bd:\t0f b6 c0             \tmovzbl %al,%eax\n    70c0:\t89 c0                \tmov    %eax,%eax\n    70c2:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    70c9:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    70cf:\tc1 e9 08             \tshr    $0x8,%ecx\n    70d2:\t0f b6 c9             \tmovzbl %cl,%ecx\n    70d5:\t21 d0                \tand    %edx,%eax\n    70d7:\t89 ca                \tmov    %ecx,%edx\n    70d9:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    70e0:\te9 95 15 00 00       \tjmpq   867a <sim_main+0x7b63>\n    70e5:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    70eb:\tc1 e8 18             \tshr    $0x18,%eax\n    70ee:\t89 c0                \tmov    %eax,%eax\n    70f0:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    70f7:\t89 c2                \tmov    %eax,%edx\n    70f9:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    70ff:\t21 d0                \tand    %edx,%eax\n    7101:\t89 c1                \tmov    %eax,%ecx\n    7103:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7109:\tc1 e8 10             \tshr    $0x10,%eax\n    710c:\t0f b6 d0             \tmovzbl %al,%edx\n    710f:\t0f b7 c1             \tmovzwl %cx,%eax\n    7112:\t89 d2                \tmov    %edx,%edx\n    7114:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    711b:\te9 5a 15 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7120:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7126:\tc1 e8 18             \tshr    $0x18,%eax\n    7129:\t89 c0                \tmov    %eax,%eax\n    712b:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    7132:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7138:\tc1 e8 10             \tshr    $0x10,%eax\n    713b:\t0f b6 c0             \tmovzbl %al,%eax\n    713e:\t89 c0                \tmov    %eax,%eax\n    7140:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7147:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    714d:\tc1 e9 08             \tshr    $0x8,%ecx\n    7150:\t0f b6 c9             \tmovzbl %cl,%ecx\n    7153:\t09 d0                \tor     %edx,%eax\n    7155:\t89 ca                \tmov    %ecx,%edx\n    7157:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    715e:\te9 17 15 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7163:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7169:\tc1 e8 18             \tshr    $0x18,%eax\n    716c:\t89 c0                \tmov    %eax,%eax\n    716e:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7175:\t89 c2                \tmov    %eax,%edx\n    7177:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    717d:\t0f b7 c0             \tmovzwl %ax,%eax\n    7180:\t09 c2                \tor     %eax,%edx\n    7182:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7188:\tc1 e8 10             \tshr    $0x10,%eax\n    718b:\t0f b6 c0             \tmovzbl %al,%eax\n    718e:\t89 c0                \tmov    %eax,%eax\n    7190:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n    7197:\te9 de 14 00 00       \tjmpq   867a <sim_main+0x7b63>\n    719c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    71a2:\tc1 e8 18             \tshr    $0x18,%eax\n    71a5:\t89 c0                \tmov    %eax,%eax\n    71a7:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    71ae:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    71b4:\tc1 e8 10             \tshr    $0x10,%eax\n    71b7:\t0f b6 c0             \tmovzbl %al,%eax\n    71ba:\t89 c0                \tmov    %eax,%eax\n    71bc:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    71c3:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    71c9:\tc1 e9 08             \tshr    $0x8,%ecx\n    71cc:\t0f b6 c9             \tmovzbl %cl,%ecx\n    71cf:\t31 d0                \txor    %edx,%eax\n    71d1:\t89 ca                \tmov    %ecx,%edx\n    71d3:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    71da:\te9 9b 14 00 00       \tjmpq   867a <sim_main+0x7b63>\n    71df:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    71e5:\tc1 e8 18             \tshr    $0x18,%eax\n    71e8:\t89 c0                \tmov    %eax,%eax\n    71ea:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    71f1:\t89 c2                \tmov    %eax,%edx\n    71f3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    71f9:\t0f b7 c0             \tmovzwl %ax,%eax\n    71fc:\t31 c2                \txor    %eax,%edx\n    71fe:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7204:\tc1 e8 10             \tshr    $0x10,%eax\n    7207:\t0f b6 c0             \tmovzbl %al,%eax\n    720a:\t89 c0                \tmov    %eax,%eax\n    720c:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n    7213:\te9 62 14 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7218:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    721e:\tc1 e8 18             \tshr    $0x18,%eax\n    7221:\t89 c0                \tmov    %eax,%eax\n    7223:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    722a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7230:\tc1 e8 10             \tshr    $0x10,%eax\n    7233:\t0f b6 c0             \tmovzbl %al,%eax\n    7236:\t89 c0                \tmov    %eax,%eax\n    7238:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    723f:\t09 c2                \tor     %eax,%edx\n    7241:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7247:\tc1 e8 08             \tshr    $0x8,%eax\n    724a:\t0f b6 c8             \tmovzbl %al,%ecx\n    724d:\t89 d0                \tmov    %edx,%eax\n    724f:\tf7 d0                \tnot    %eax\n    7251:\t89 ca                \tmov    %ecx,%edx\n    7253:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    725a:\te9 1b 14 00 00       \tjmpq   867a <sim_main+0x7b63>\n    725f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7265:\tc1 e8 10             \tshr    $0x10,%eax\n    7268:\t0f b6 c0             \tmovzbl %al,%eax\n    726b:\t89 c0                \tmov    %eax,%eax\n    726d:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    7274:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    727a:\t0f b6 c0             \tmovzbl %al,%eax\n    727d:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    7283:\tc1 e9 08             \tshr    $0x8,%ecx\n    7286:\t0f b6 f1             \tmovzbl %cl,%esi\n    7289:\t89 c1                \tmov    %eax,%ecx\n    728b:\td3 e2                \tshl    %cl,%edx\n    728d:\t89 d0                \tmov    %edx,%eax\n    728f:\t89 f2                \tmov    %esi,%edx\n    7291:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    7298:\te9 dd 13 00 00       \tjmpq   867a <sim_main+0x7b63>\n    729d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    72a3:\tc1 e8 10             \tshr    $0x10,%eax\n    72a6:\t0f b6 c0             \tmovzbl %al,%eax\n    72a9:\t89 c0                \tmov    %eax,%eax\n    72ab:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    72b2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    72b8:\tc1 e8 18             \tshr    $0x18,%eax\n    72bb:\t89 c0                \tmov    %eax,%eax\n    72bd:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    72c4:\t83 e0 1f             \tand    $0x1f,%eax\n    72c7:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    72cd:\tc1 e9 08             \tshr    $0x8,%ecx\n    72d0:\t0f b6 f1             \tmovzbl %cl,%esi\n    72d3:\t89 c1                \tmov    %eax,%ecx\n    72d5:\td3 e2                \tshl    %cl,%edx\n    72d7:\t89 d0                \tmov    %edx,%eax\n    72d9:\t89 f2                \tmov    %esi,%edx\n    72db:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    72e2:\te9 93 13 00 00       \tjmpq   867a <sim_main+0x7b63>\n    72e7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    72ed:\t0f b6 c0             \tmovzbl %al,%eax\n    72f0:\t85 c0                \ttest   %eax,%eax\n    72f2:\t74 47                \tje     733b <sim_main+0x6824>\n    72f4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    72fa:\tc1 e8 10             \tshr    $0x10,%eax\n    72fd:\t0f b6 c0             \tmovzbl %al,%eax\n    7300:\t89 c0                \tmov    %eax,%eax\n    7302:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7309:\td1 e8                \tshr    %eax\n    730b:\t89 45 98             \tmov    %eax,-0x68(%rbp)\n    730e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7314:\t0f b6 c0             \tmovzbl %al,%eax\n    7317:\t83 e8 01             \tsub    $0x1,%eax\n    731a:\t8b 55 98             \tmov    -0x68(%rbp),%edx\n    731d:\t89 c1                \tmov    %eax,%ecx\n    731f:\td3 ea                \tshr    %cl,%edx\n    7321:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7327:\tc1 e8 08             \tshr    $0x8,%eax\n    732a:\t0f b6 c0             \tmovzbl %al,%eax\n    732d:\t89 c0                \tmov    %eax,%eax\n    732f:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n    7336:\te9 3f 13 00 00       \tjmpq   867a <sim_main+0x7b63>\n    733b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7341:\tc1 e8 10             \tshr    $0x10,%eax\n    7344:\t0f b6 c8             \tmovzbl %al,%ecx\n    7347:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    734d:\tc1 e8 08             \tshr    $0x8,%eax\n    7350:\t0f b6 d0             \tmovzbl %al,%edx\n    7353:\t89 c8                \tmov    %ecx,%eax\n    7355:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    735c:\t89 d2                \tmov    %edx,%edx\n    735e:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    7365:\te9 10 13 00 00       \tjmpq   867a <sim_main+0x7b63>\n    736a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7370:\tc1 e8 18             \tshr    $0x18,%eax\n    7373:\t89 c0                \tmov    %eax,%eax\n    7375:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    737c:\t83 e0 1f             \tand    $0x1f,%eax\n    737f:\t89 45 a0             \tmov    %eax,-0x60(%rbp)\n    7382:\t83 7d a0 00          \tcmpl   $0x0,-0x60(%rbp)\n    7386:\t74 41                \tje     73c9 <sim_main+0x68b2>\n    7388:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    738e:\tc1 e8 10             \tshr    $0x10,%eax\n    7391:\t0f b6 c0             \tmovzbl %al,%eax\n    7394:\t89 c0                \tmov    %eax,%eax\n    7396:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    739d:\td1 e8                \tshr    %eax\n    739f:\t89 45 9c             \tmov    %eax,-0x64(%rbp)\n    73a2:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n    73a5:\t83 e8 01             \tsub    $0x1,%eax\n    73a8:\t8b 55 9c             \tmov    -0x64(%rbp),%edx\n    73ab:\t89 c1                \tmov    %eax,%ecx\n    73ad:\td3 ea                \tshr    %cl,%edx\n    73af:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    73b5:\tc1 e8 08             \tshr    $0x8,%eax\n    73b8:\t0f b6 c0             \tmovzbl %al,%eax\n    73bb:\t89 c0                \tmov    %eax,%eax\n    73bd:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n    73c4:\te9 b1 12 00 00       \tjmpq   867a <sim_main+0x7b63>\n    73c9:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    73cf:\tc1 e8 10             \tshr    $0x10,%eax\n    73d2:\t0f b6 c8             \tmovzbl %al,%ecx\n    73d5:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    73db:\tc1 e8 08             \tshr    $0x8,%eax\n    73de:\t0f b6 d0             \tmovzbl %al,%edx\n    73e1:\t89 c8                \tmov    %ecx,%eax\n    73e3:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    73ea:\t89 d2                \tmov    %edx,%edx\n    73ec:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    73f3:\te9 82 12 00 00       \tjmpq   867a <sim_main+0x7b63>\n    73f8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    73fe:\tc1 e8 10             \tshr    $0x10,%eax\n    7401:\t0f b6 c0             \tmovzbl %al,%eax\n    7404:\t89 c0                \tmov    %eax,%eax\n    7406:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    740d:\t85 c0                \ttest   %eax,%eax\n    740f:\t79 7f                \tjns    7490 <sim_main+0x6979>\n    7411:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7417:\tc1 e8 10             \tshr    $0x10,%eax\n    741a:\t0f b6 c8             \tmovzbl %al,%ecx\n    741d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7423:\tc1 e8 08             \tshr    $0x8,%eax\n    7426:\t0f b6 d0             \tmovzbl %al,%edx\n    7429:\t89 c8                \tmov    %ecx,%eax\n    742b:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7432:\t89 d2                \tmov    %edx,%edx\n    7434:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    743b:\tc7 45 c0 00 00 00 00 \tmovl   $0x0,-0x40(%rbp)\n    7442:\teb 37                \tjmp    747b <sim_main+0x6964>\n    7444:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    744a:\tc1 e8 08             \tshr    $0x8,%eax\n    744d:\t0f b6 c0             \tmovzbl %al,%eax\n    7450:\t89 c0                \tmov    %eax,%eax\n    7452:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7459:\td1 f8                \tsar    %eax\n    745b:\t0d 00 00 00 80       \tor     $0x80000000,%eax\n    7460:\t89 c2                \tmov    %eax,%edx\n    7462:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7468:\tc1 e8 08             \tshr    $0x8,%eax\n    746b:\t0f b6 c0             \tmovzbl %al,%eax\n    746e:\t89 c0                \tmov    %eax,%eax\n    7470:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n    7477:\t83 45 c0 01          \taddl   $0x1,-0x40(%rbp)\n    747b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7481:\t0f b6 d0             \tmovzbl %al,%edx\n    7484:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    7487:\t39 c2                \tcmp    %eax,%edx\n    7489:\t77 b9                \tja     7444 <sim_main+0x692d>\n    748b:\te9 ea 11 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7490:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7496:\tc1 e8 10             \tshr    $0x10,%eax\n    7499:\t0f b6 c0             \tmovzbl %al,%eax\n    749c:\t89 c0                \tmov    %eax,%eax\n    749e:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    74a5:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    74ab:\t0f b6 c0             \tmovzbl %al,%eax\n    74ae:\t8b 8d 60 fe ff ff    \tmov    -0x1a0(%rbp),%ecx\n    74b4:\tc1 e9 08             \tshr    $0x8,%ecx\n    74b7:\t0f b6 f1             \tmovzbl %cl,%esi\n    74ba:\t89 c1                \tmov    %eax,%ecx\n    74bc:\td3 fa                \tsar    %cl,%edx\n    74be:\t89 d0                \tmov    %edx,%eax\n    74c0:\t89 f2                \tmov    %esi,%edx\n    74c2:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    74c9:\te9 ac 11 00 00       \tjmpq   867a <sim_main+0x7b63>\n    74ce:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    74d4:\tc1 e8 18             \tshr    $0x18,%eax\n    74d7:\t89 c0                \tmov    %eax,%eax\n    74d9:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    74e0:\t83 e0 1f             \tand    $0x1f,%eax\n    74e3:\t89 45 a4             \tmov    %eax,-0x5c(%rbp)\n    74e6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    74ec:\tc1 e8 10             \tshr    $0x10,%eax\n    74ef:\t0f b6 c0             \tmovzbl %al,%eax\n    74f2:\t89 c0                \tmov    %eax,%eax\n    74f4:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    74fb:\t85 c0                \ttest   %eax,%eax\n    74fd:\t79 77                \tjns    7576 <sim_main+0x6a5f>\n    74ff:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7505:\tc1 e8 10             \tshr    $0x10,%eax\n    7508:\t0f b6 c8             \tmovzbl %al,%ecx\n    750b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7511:\tc1 e8 08             \tshr    $0x8,%eax\n    7514:\t0f b6 d0             \tmovzbl %al,%edx\n    7517:\t89 c8                \tmov    %ecx,%eax\n    7519:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7520:\t89 d2                \tmov    %edx,%edx\n    7522:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    7529:\tc7 45 bc 00 00 00 00 \tmovl   $0x0,-0x44(%rbp)\n    7530:\teb 37                \tjmp    7569 <sim_main+0x6a52>\n    7532:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7538:\tc1 e8 08             \tshr    $0x8,%eax\n    753b:\t0f b6 c0             \tmovzbl %al,%eax\n    753e:\t89 c0                \tmov    %eax,%eax\n    7540:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7547:\td1 f8                \tsar    %eax\n    7549:\t0d 00 00 00 80       \tor     $0x80000000,%eax\n    754e:\t89 c2                \tmov    %eax,%edx\n    7550:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7556:\tc1 e8 08             \tshr    $0x8,%eax\n    7559:\t0f b6 c0             \tmovzbl %al,%eax\n    755c:\t89 c0                \tmov    %eax,%eax\n    755e:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n    7565:\t83 45 bc 01          \taddl   $0x1,-0x44(%rbp)\n    7569:\t8b 45 bc             \tmov    -0x44(%rbp),%eax\n    756c:\t3b 45 a4             \tcmp    -0x5c(%rbp),%eax\n    756f:\t7c c1                \tjl     7532 <sim_main+0x6a1b>\n    7571:\te9 04 11 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7576:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    757c:\tc1 e8 10             \tshr    $0x10,%eax\n    757f:\t0f b6 c0             \tmovzbl %al,%eax\n    7582:\t89 c0                \tmov    %eax,%eax\n    7584:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    758b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7591:\tc1 e8 08             \tshr    $0x8,%eax\n    7594:\t0f b6 f0             \tmovzbl %al,%esi\n    7597:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n    759a:\t89 c1                \tmov    %eax,%ecx\n    759c:\td3 fa                \tsar    %cl,%edx\n    759e:\t89 d0                \tmov    %edx,%eax\n    75a0:\t89 f2                \tmov    %esi,%edx\n    75a2:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    75a9:\te9 cc 10 00 00       \tjmpq   867a <sim_main+0x7b63>\n    75ae:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    75b4:\tc1 e8 18             \tshr    $0x18,%eax\n    75b7:\t89 c0                \tmov    %eax,%eax\n    75b9:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    75c0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    75c6:\tc1 e8 10             \tshr    $0x10,%eax\n    75c9:\t0f b6 c0             \tmovzbl %al,%eax\n    75cc:\t89 c0                \tmov    %eax,%eax\n    75ce:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    75d5:\t39 c2                \tcmp    %eax,%edx\n    75d7:\t7d 1e                \tjge    75f7 <sim_main+0x6ae0>\n    75d9:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    75df:\tc1 e8 08             \tshr    $0x8,%eax\n    75e2:\t0f b6 c0             \tmovzbl %al,%eax\n    75e5:\t89 c0                \tmov    %eax,%eax\n    75e7:\tc7 04 85 00 00 00 00 \tmovl   $0x1,0x0(,%rax,4)\n    75ee:\t01 00 00 00 \n    75f2:\te9 83 10 00 00       \tjmpq   867a <sim_main+0x7b63>\n    75f7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    75fd:\tc1 e8 08             \tshr    $0x8,%eax\n    7600:\t0f b6 c0             \tmovzbl %al,%eax\n    7603:\t89 c0                \tmov    %eax,%eax\n    7605:\tc7 04 85 00 00 00 00 \tmovl   $0x0,0x0(,%rax,4)\n    760c:\t00 00 00 00 \n    7610:\te9 65 10 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7615:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    761b:\tc1 e8 18             \tshr    $0x18,%eax\n    761e:\t89 c0                \tmov    %eax,%eax\n    7620:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    7627:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    762d:\t98                   \tcwtl   \n    762e:\t39 c2                \tcmp    %eax,%edx\n    7630:\t7d 1e                \tjge    7650 <sim_main+0x6b39>\n    7632:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7638:\tc1 e8 10             \tshr    $0x10,%eax\n    763b:\t0f b6 c0             \tmovzbl %al,%eax\n    763e:\t89 c0                \tmov    %eax,%eax\n    7640:\tc7 04 85 00 00 00 00 \tmovl   $0x1,0x0(,%rax,4)\n    7647:\t01 00 00 00 \n    764b:\te9 2a 10 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7650:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7656:\tc1 e8 10             \tshr    $0x10,%eax\n    7659:\t0f b6 c0             \tmovzbl %al,%eax\n    765c:\t89 c0                \tmov    %eax,%eax\n    765e:\tc7 04 85 00 00 00 00 \tmovl   $0x0,0x0(,%rax,4)\n    7665:\t00 00 00 00 \n    7669:\te9 0c 10 00 00       \tjmpq   867a <sim_main+0x7b63>\n    766e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7674:\tc1 e8 18             \tshr    $0x18,%eax\n    7677:\t89 c0                \tmov    %eax,%eax\n    7679:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7680:\t89 c2                \tmov    %eax,%edx\n    7682:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7688:\tc1 e8 10             \tshr    $0x10,%eax\n    768b:\t0f b6 c0             \tmovzbl %al,%eax\n    768e:\t89 c0                \tmov    %eax,%eax\n    7690:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    7697:\t39 c2                \tcmp    %eax,%edx\n    7699:\t73 1e                \tjae    76b9 <sim_main+0x6ba2>\n    769b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    76a1:\tc1 e8 08             \tshr    $0x8,%eax\n    76a4:\t0f b6 c0             \tmovzbl %al,%eax\n    76a7:\t89 c0                \tmov    %eax,%eax\n    76a9:\tc7 04 85 00 00 00 00 \tmovl   $0x1,0x0(,%rax,4)\n    76b0:\t01 00 00 00 \n    76b4:\te9 c1 0f 00 00       \tjmpq   867a <sim_main+0x7b63>\n    76b9:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    76bf:\tc1 e8 08             \tshr    $0x8,%eax\n    76c2:\t0f b6 c0             \tmovzbl %al,%eax\n    76c5:\t89 c0                \tmov    %eax,%eax\n    76c7:\tc7 04 85 00 00 00 00 \tmovl   $0x0,0x0(,%rax,4)\n    76ce:\t00 00 00 00 \n    76d2:\te9 a3 0f 00 00       \tjmpq   867a <sim_main+0x7b63>\n    76d7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    76dd:\tc1 e8 18             \tshr    $0x18,%eax\n    76e0:\t89 c0                \tmov    %eax,%eax\n    76e2:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    76e9:\t89 c2                \tmov    %eax,%edx\n    76eb:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    76f1:\t98                   \tcwtl   \n    76f2:\t39 c2                \tcmp    %eax,%edx\n    76f4:\t73 1e                \tjae    7714 <sim_main+0x6bfd>\n    76f6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    76fc:\tc1 e8 10             \tshr    $0x10,%eax\n    76ff:\t0f b6 c0             \tmovzbl %al,%eax\n    7702:\t89 c0                \tmov    %eax,%eax\n    7704:\tc7 04 85 00 00 00 00 \tmovl   $0x1,0x0(,%rax,4)\n    770b:\t01 00 00 00 \n    770f:\te9 66 0f 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7714:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    771a:\tc1 e8 10             \tshr    $0x10,%eax\n    771d:\t0f b6 c0             \tmovzbl %al,%eax\n    7720:\t89 c0                \tmov    %eax,%eax\n    7722:\tc7 04 85 00 00 00 00 \tmovl   $0x0,0x0(,%rax,4)\n    7729:\t00 00 00 00 \n    772d:\te9 48 0f 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7732:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7738:\t25 00 01 00 00       \tand    $0x100,%eax\n    773d:\t85 c0                \ttest   %eax,%eax\n    773f:\t75 1e                \tjne    775f <sim_main+0x6c48>\n    7741:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7747:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    774c:\t85 c0                \ttest   %eax,%eax\n    774e:\t75 0f                \tjne    775f <sim_main+0x6c48>\n    7750:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7756:\t25 00 00 01 00       \tand    $0x10000,%eax\n    775b:\t85 c0                \ttest   %eax,%eax\n    775d:\t74 0c                \tje     776b <sim_main+0x6c54>\n    775f:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7766:\te9 0f 0f 00 00       \tjmpq   867a <sim_main+0x7b63>\n    776b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7771:\tc1 e8 18             \tshr    $0x18,%eax\n    7774:\t89 c0                \tmov    %eax,%eax\n    7776:\t48 83 c0 20          \tadd    $0x20,%rax\n    777a:\tf3 0f 10 0c 85 00 00 \tmovss  0x0(,%rax,4),%xmm1\n    7781:\t00 00 \n    7783:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7789:\tc1 e8 10             \tshr    $0x10,%eax\n    778c:\t0f b6 c0             \tmovzbl %al,%eax\n    778f:\t89 c0                \tmov    %eax,%eax\n    7791:\t48 83 c0 20          \tadd    $0x20,%rax\n    7795:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    779c:\t00 00 \n    779e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    77a4:\tc1 e8 08             \tshr    $0x8,%eax\n    77a7:\t0f b6 c0             \tmovzbl %al,%eax\n    77aa:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n    77ae:\t89 c0                \tmov    %eax,%eax\n    77b0:\t48 83 c0 20          \tadd    $0x20,%rax\n    77b4:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n    77bb:\t00 00 \n    77bd:\te9 b8 0e 00 00       \tjmpq   867a <sim_main+0x7b63>\n    77c2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    77c8:\t25 00 01 00 00       \tand    $0x100,%eax\n    77cd:\t85 c0                \ttest   %eax,%eax\n    77cf:\t75 1e                \tjne    77ef <sim_main+0x6cd8>\n    77d1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    77d7:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    77dc:\t85 c0                \ttest   %eax,%eax\n    77de:\t75 0f                \tjne    77ef <sim_main+0x6cd8>\n    77e0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    77e6:\t25 00 00 01 00       \tand    $0x10000,%eax\n    77eb:\t85 c0                \ttest   %eax,%eax\n    77ed:\t74 0c                \tje     77fb <sim_main+0x6ce4>\n    77ef:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    77f6:\te9 7f 0e 00 00       \tjmpq   867a <sim_main+0x7b63>\n    77fb:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7801:\tc1 e8 19             \tshr    $0x19,%eax\n    7804:\t89 c0                \tmov    %eax,%eax\n    7806:\t48 83 c0 10          \tadd    $0x10,%rax\n    780a:\tf2 0f 10 0c c5 00 00 \tmovsd  0x0(,%rax,8),%xmm1\n    7811:\t00 00 \n    7813:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7819:\tc1 e8 11             \tshr    $0x11,%eax\n    781c:\t83 e0 7f             \tand    $0x7f,%eax\n    781f:\t89 c0                \tmov    %eax,%eax\n    7821:\t48 83 c0 10          \tadd    $0x10,%rax\n    7825:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    782c:\t00 00 \n    782e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7834:\tc1 e8 09             \tshr    $0x9,%eax\n    7837:\t83 e0 7f             \tand    $0x7f,%eax\n    783a:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n    783e:\t89 c0                \tmov    %eax,%eax\n    7840:\t48 83 c0 10          \tadd    $0x10,%rax\n    7844:\tf2 0f 11 04 c5 00 00 \tmovsd  %xmm0,0x0(,%rax,8)\n    784b:\t00 00 \n    784d:\te9 28 0e 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7852:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7858:\t25 00 01 00 00       \tand    $0x100,%eax\n    785d:\t85 c0                \ttest   %eax,%eax\n    785f:\t75 1e                \tjne    787f <sim_main+0x6d68>\n    7861:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7867:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    786c:\t85 c0                \ttest   %eax,%eax\n    786e:\t75 0f                \tjne    787f <sim_main+0x6d68>\n    7870:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7876:\t25 00 00 01 00       \tand    $0x10000,%eax\n    787b:\t85 c0                \ttest   %eax,%eax\n    787d:\t74 0c                \tje     788b <sim_main+0x6d74>\n    787f:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7886:\te9 ef 0d 00 00       \tjmpq   867a <sim_main+0x7b63>\n    788b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7891:\tc1 e8 18             \tshr    $0x18,%eax\n    7894:\t89 c0                \tmov    %eax,%eax\n    7896:\t48 83 c0 20          \tadd    $0x20,%rax\n    789a:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    78a1:\t00 00 \n    78a3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    78a9:\tc1 e8 10             \tshr    $0x10,%eax\n    78ac:\t0f b6 c0             \tmovzbl %al,%eax\n    78af:\t89 c0                \tmov    %eax,%eax\n    78b1:\t48 83 c0 20          \tadd    $0x20,%rax\n    78b5:\tf3 0f 10 0c 85 00 00 \tmovss  0x0(,%rax,4),%xmm1\n    78bc:\t00 00 \n    78be:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    78c4:\tc1 e8 08             \tshr    $0x8,%eax\n    78c7:\t0f b6 c0             \tmovzbl %al,%eax\n    78ca:\tf3 0f 5c c1          \tsubss  %xmm1,%xmm0\n    78ce:\t89 c0                \tmov    %eax,%eax\n    78d0:\t48 83 c0 20          \tadd    $0x20,%rax\n    78d4:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n    78db:\t00 00 \n    78dd:\te9 98 0d 00 00       \tjmpq   867a <sim_main+0x7b63>\n    78e2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    78e8:\t25 00 01 00 00       \tand    $0x100,%eax\n    78ed:\t85 c0                \ttest   %eax,%eax\n    78ef:\t75 1e                \tjne    790f <sim_main+0x6df8>\n    78f1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    78f7:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    78fc:\t85 c0                \ttest   %eax,%eax\n    78fe:\t75 0f                \tjne    790f <sim_main+0x6df8>\n    7900:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7906:\t25 00 00 01 00       \tand    $0x10000,%eax\n    790b:\t85 c0                \ttest   %eax,%eax\n    790d:\t74 0c                \tje     791b <sim_main+0x6e04>\n    790f:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7916:\te9 5f 0d 00 00       \tjmpq   867a <sim_main+0x7b63>\n    791b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7921:\tc1 e8 19             \tshr    $0x19,%eax\n    7924:\t89 c0                \tmov    %eax,%eax\n    7926:\t48 83 c0 10          \tadd    $0x10,%rax\n    792a:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    7931:\t00 00 \n    7933:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7939:\tc1 e8 11             \tshr    $0x11,%eax\n    793c:\t83 e0 7f             \tand    $0x7f,%eax\n    793f:\t89 c0                \tmov    %eax,%eax\n    7941:\t48 83 c0 10          \tadd    $0x10,%rax\n    7945:\tf2 0f 10 0c c5 00 00 \tmovsd  0x0(,%rax,8),%xmm1\n    794c:\t00 00 \n    794e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7954:\tc1 e8 09             \tshr    $0x9,%eax\n    7957:\t83 e0 7f             \tand    $0x7f,%eax\n    795a:\tf2 0f 5c c1          \tsubsd  %xmm1,%xmm0\n    795e:\t89 c0                \tmov    %eax,%eax\n    7960:\t48 83 c0 10          \tadd    $0x10,%rax\n    7964:\tf2 0f 11 04 c5 00 00 \tmovsd  %xmm0,0x0(,%rax,8)\n    796b:\t00 00 \n    796d:\te9 08 0d 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7972:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7978:\t25 00 01 00 00       \tand    $0x100,%eax\n    797d:\t85 c0                \ttest   %eax,%eax\n    797f:\t75 1e                \tjne    799f <sim_main+0x6e88>\n    7981:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7987:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    798c:\t85 c0                \ttest   %eax,%eax\n    798e:\t75 0f                \tjne    799f <sim_main+0x6e88>\n    7990:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7996:\t25 00 00 01 00       \tand    $0x10000,%eax\n    799b:\t85 c0                \ttest   %eax,%eax\n    799d:\t74 0c                \tje     79ab <sim_main+0x6e94>\n    799f:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    79a6:\te9 cf 0c 00 00       \tjmpq   867a <sim_main+0x7b63>\n    79ab:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    79b1:\tc1 e8 18             \tshr    $0x18,%eax\n    79b4:\t89 c0                \tmov    %eax,%eax\n    79b6:\t48 83 c0 20          \tadd    $0x20,%rax\n    79ba:\tf3 0f 10 0c 85 00 00 \tmovss  0x0(,%rax,4),%xmm1\n    79c1:\t00 00 \n    79c3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    79c9:\tc1 e8 10             \tshr    $0x10,%eax\n    79cc:\t0f b6 c0             \tmovzbl %al,%eax\n    79cf:\t89 c0                \tmov    %eax,%eax\n    79d1:\t48 83 c0 20          \tadd    $0x20,%rax\n    79d5:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    79dc:\t00 00 \n    79de:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    79e4:\tc1 e8 08             \tshr    $0x8,%eax\n    79e7:\t0f b6 c0             \tmovzbl %al,%eax\n    79ea:\tf3 0f 59 c1          \tmulss  %xmm1,%xmm0\n    79ee:\t89 c0                \tmov    %eax,%eax\n    79f0:\t48 83 c0 20          \tadd    $0x20,%rax\n    79f4:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n    79fb:\t00 00 \n    79fd:\te9 78 0c 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7a02:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7a08:\t25 00 01 00 00       \tand    $0x100,%eax\n    7a0d:\t85 c0                \ttest   %eax,%eax\n    7a0f:\t75 1e                \tjne    7a2f <sim_main+0x6f18>\n    7a11:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7a17:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7a1c:\t85 c0                \ttest   %eax,%eax\n    7a1e:\t75 0f                \tjne    7a2f <sim_main+0x6f18>\n    7a20:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7a26:\t25 00 00 01 00       \tand    $0x10000,%eax\n    7a2b:\t85 c0                \ttest   %eax,%eax\n    7a2d:\t74 0c                \tje     7a3b <sim_main+0x6f24>\n    7a2f:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7a36:\te9 3f 0c 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7a3b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7a41:\tc1 e8 19             \tshr    $0x19,%eax\n    7a44:\t89 c0                \tmov    %eax,%eax\n    7a46:\t48 83 c0 10          \tadd    $0x10,%rax\n    7a4a:\tf2 0f 10 0c c5 00 00 \tmovsd  0x0(,%rax,8),%xmm1\n    7a51:\t00 00 \n    7a53:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7a59:\tc1 e8 11             \tshr    $0x11,%eax\n    7a5c:\t83 e0 7f             \tand    $0x7f,%eax\n    7a5f:\t89 c0                \tmov    %eax,%eax\n    7a61:\t48 83 c0 10          \tadd    $0x10,%rax\n    7a65:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    7a6c:\t00 00 \n    7a6e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7a74:\tc1 e8 09             \tshr    $0x9,%eax\n    7a77:\t83 e0 7f             \tand    $0x7f,%eax\n    7a7a:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n    7a7e:\t89 c0                \tmov    %eax,%eax\n    7a80:\t48 83 c0 10          \tadd    $0x10,%rax\n    7a84:\tf2 0f 11 04 c5 00 00 \tmovsd  %xmm0,0x0(,%rax,8)\n    7a8b:\t00 00 \n    7a8d:\te9 e8 0b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7a92:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7a98:\t25 00 01 00 00       \tand    $0x100,%eax\n    7a9d:\t85 c0                \ttest   %eax,%eax\n    7a9f:\t75 1e                \tjne    7abf <sim_main+0x6fa8>\n    7aa1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7aa7:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7aac:\t85 c0                \ttest   %eax,%eax\n    7aae:\t75 0f                \tjne    7abf <sim_main+0x6fa8>\n    7ab0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7ab6:\t25 00 00 01 00       \tand    $0x10000,%eax\n    7abb:\t85 c0                \ttest   %eax,%eax\n    7abd:\t74 0c                \tje     7acb <sim_main+0x6fb4>\n    7abf:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7ac6:\te9 af 0b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7acb:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7ad1:\tc1 e8 18             \tshr    $0x18,%eax\n    7ad4:\t89 c0                \tmov    %eax,%eax\n    7ad6:\t48 83 c0 20          \tadd    $0x20,%rax\n    7ada:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    7ae1:\t00 00 \n    7ae3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7ae9:\tc1 e8 10             \tshr    $0x10,%eax\n    7aec:\t0f b6 c0             \tmovzbl %al,%eax\n    7aef:\t89 c0                \tmov    %eax,%eax\n    7af1:\t48 83 c0 20          \tadd    $0x20,%rax\n    7af5:\tf3 0f 10 0c 85 00 00 \tmovss  0x0(,%rax,4),%xmm1\n    7afc:\t00 00 \n    7afe:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7b04:\tc1 e8 08             \tshr    $0x8,%eax\n    7b07:\t0f b6 c0             \tmovzbl %al,%eax\n    7b0a:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n    7b0e:\t89 c0                \tmov    %eax,%eax\n    7b10:\t48 83 c0 20          \tadd    $0x20,%rax\n    7b14:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n    7b1b:\t00 00 \n    7b1d:\te9 58 0b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7b22:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7b28:\t25 00 01 00 00       \tand    $0x100,%eax\n    7b2d:\t85 c0                \ttest   %eax,%eax\n    7b2f:\t75 1e                \tjne    7b4f <sim_main+0x7038>\n    7b31:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7b37:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7b3c:\t85 c0                \ttest   %eax,%eax\n    7b3e:\t75 0f                \tjne    7b4f <sim_main+0x7038>\n    7b40:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7b46:\t25 00 00 01 00       \tand    $0x10000,%eax\n    7b4b:\t85 c0                \ttest   %eax,%eax\n    7b4d:\t74 0c                \tje     7b5b <sim_main+0x7044>\n    7b4f:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7b56:\te9 1f 0b 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7b5b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7b61:\tc1 e8 19             \tshr    $0x19,%eax\n    7b64:\t89 c0                \tmov    %eax,%eax\n    7b66:\t48 83 c0 10          \tadd    $0x10,%rax\n    7b6a:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    7b71:\t00 00 \n    7b73:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7b79:\tc1 e8 11             \tshr    $0x11,%eax\n    7b7c:\t83 e0 7f             \tand    $0x7f,%eax\n    7b7f:\t89 c0                \tmov    %eax,%eax\n    7b81:\t48 83 c0 10          \tadd    $0x10,%rax\n    7b85:\tf2 0f 10 0c c5 00 00 \tmovsd  0x0(,%rax,8),%xmm1\n    7b8c:\t00 00 \n    7b8e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7b94:\tc1 e8 09             \tshr    $0x9,%eax\n    7b97:\t83 e0 7f             \tand    $0x7f,%eax\n    7b9a:\tf2 0f 5e c1          \tdivsd  %xmm1,%xmm0\n    7b9e:\t89 c0                \tmov    %eax,%eax\n    7ba0:\t48 83 c0 10          \tadd    $0x10,%rax\n    7ba4:\tf2 0f 11 04 c5 00 00 \tmovsd  %xmm0,0x0(,%rax,8)\n    7bab:\t00 00 \n    7bad:\te9 c8 0a 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7bb2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7bb8:\t25 00 01 00 00       \tand    $0x100,%eax\n    7bbd:\t85 c0                \ttest   %eax,%eax\n    7bbf:\t75 0f                \tjne    7bd0 <sim_main+0x70b9>\n    7bc1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7bc7:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7bcc:\t85 c0                \ttest   %eax,%eax\n    7bce:\t74 0c                \tje     7bdc <sim_main+0x70c5>\n    7bd0:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7bd7:\te9 9e 0a 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7bdc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7be2:\tc1 e8 18             \tshr    $0x18,%eax\n    7be5:\t89 c0                \tmov    %eax,%eax\n    7be7:\t48 83 c0 20          \tadd    $0x20,%rax\n    7beb:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    7bf2:\t00 00 \n    7bf4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7bfa:\tc1 e8 08             \tshr    $0x8,%eax\n    7bfd:\t0f b6 c0             \tmovzbl %al,%eax\n    7c00:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # 7c08 <sim_main+0x70f1>\n    7c07:\t00 \n    7c08:\t0f 54 c1             \tandps  %xmm1,%xmm0\n    7c0b:\t89 c0                \tmov    %eax,%eax\n    7c0d:\t48 83 c0 20          \tadd    $0x20,%rax\n    7c11:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n    7c18:\t00 00 \n    7c1a:\te9 5b 0a 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7c1f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7c25:\t25 00 01 00 00       \tand    $0x100,%eax\n    7c2a:\t85 c0                \ttest   %eax,%eax\n    7c2c:\t75 0f                \tjne    7c3d <sim_main+0x7126>\n    7c2e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7c34:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7c39:\t85 c0                \ttest   %eax,%eax\n    7c3b:\t74 0c                \tje     7c49 <sim_main+0x7132>\n    7c3d:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7c44:\te9 31 0a 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7c49:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7c4f:\tc1 e8 19             \tshr    $0x19,%eax\n    7c52:\t89 c0                \tmov    %eax,%eax\n    7c54:\t48 83 c0 10          \tadd    $0x10,%rax\n    7c58:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    7c5f:\t00 00 \n    7c61:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7c67:\tc1 e8 09             \tshr    $0x9,%eax\n    7c6a:\t83 e0 7f             \tand    $0x7f,%eax\n    7c6d:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 7c75 <sim_main+0x715e>\n    7c74:\t00 \n    7c75:\t66 0f 54 c1          \tandpd  %xmm1,%xmm0\n    7c79:\t89 c0                \tmov    %eax,%eax\n    7c7b:\t48 83 c0 10          \tadd    $0x10,%rax\n    7c7f:\tf2 0f 11 04 c5 00 00 \tmovsd  %xmm0,0x0(,%rax,8)\n    7c86:\t00 00 \n    7c88:\te9 ed 09 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7c8d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7c93:\t25 00 01 00 00       \tand    $0x100,%eax\n    7c98:\t85 c0                \ttest   %eax,%eax\n    7c9a:\t75 0f                \tjne    7cab <sim_main+0x7194>\n    7c9c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7ca2:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7ca7:\t85 c0                \ttest   %eax,%eax\n    7ca9:\t74 0c                \tje     7cb7 <sim_main+0x71a0>\n    7cab:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7cb2:\te9 c3 09 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7cb7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7cbd:\tc1 e8 18             \tshr    $0x18,%eax\n    7cc0:\t89 c1                \tmov    %eax,%ecx\n    7cc2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7cc8:\tc1 e8 08             \tshr    $0x8,%eax\n    7ccb:\t0f b6 d0             \tmovzbl %al,%edx\n    7cce:\t89 c8                \tmov    %ecx,%eax\n    7cd0:\t48 83 c0 20          \tadd    $0x20,%rax\n    7cd4:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    7cdb:\t00 00 \n    7cdd:\t89 d0                \tmov    %edx,%eax\n    7cdf:\t48 83 c0 20          \tadd    $0x20,%rax\n    7ce3:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n    7cea:\t00 00 \n    7cec:\te9 89 09 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7cf1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7cf7:\t25 00 01 00 00       \tand    $0x100,%eax\n    7cfc:\t85 c0                \ttest   %eax,%eax\n    7cfe:\t75 0f                \tjne    7d0f <sim_main+0x71f8>\n    7d00:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7d06:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7d0b:\t85 c0                \ttest   %eax,%eax\n    7d0d:\t74 0c                \tje     7d1b <sim_main+0x7204>\n    7d0f:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7d16:\te9 5f 09 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7d1b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7d21:\tc1 e8 19             \tshr    $0x19,%eax\n    7d24:\t89 c1                \tmov    %eax,%ecx\n    7d26:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7d2c:\tc1 e8 09             \tshr    $0x9,%eax\n    7d2f:\t83 e0 7f             \tand    $0x7f,%eax\n    7d32:\t89 c2                \tmov    %eax,%edx\n    7d34:\t89 c8                \tmov    %ecx,%eax\n    7d36:\t48 83 c0 10          \tadd    $0x10,%rax\n    7d3a:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    7d41:\t00 00 \n    7d43:\t89 d0                \tmov    %edx,%eax\n    7d45:\t48 83 c0 10          \tadd    $0x10,%rax\n    7d49:\tf2 0f 11 04 c5 00 00 \tmovsd  %xmm0,0x0(,%rax,8)\n    7d50:\t00 00 \n    7d52:\te9 23 09 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7d57:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7d5d:\t25 00 01 00 00       \tand    $0x100,%eax\n    7d62:\t85 c0                \ttest   %eax,%eax\n    7d64:\t75 0f                \tjne    7d75 <sim_main+0x725e>\n    7d66:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7d6c:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7d71:\t85 c0                \ttest   %eax,%eax\n    7d73:\t74 0c                \tje     7d81 <sim_main+0x726a>\n    7d75:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7d7c:\te9 f9 08 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7d81:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7d87:\tc1 e8 18             \tshr    $0x18,%eax\n    7d8a:\t89 c0                \tmov    %eax,%eax\n    7d8c:\t48 83 c0 20          \tadd    $0x20,%rax\n    7d90:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    7d97:\t00 00 \n    7d99:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7d9f:\tc1 e8 08             \tshr    $0x8,%eax\n    7da2:\t0f b6 c0             \tmovzbl %al,%eax\n    7da5:\tf3 0f 10 0d 00 00 00 \tmovss  0x0(%rip),%xmm1        # 7dad <sim_main+0x7296>\n    7dac:\t00 \n    7dad:\t0f 57 c1             \txorps  %xmm1,%xmm0\n    7db0:\t89 c0                \tmov    %eax,%eax\n    7db2:\t48 83 c0 20          \tadd    $0x20,%rax\n    7db6:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n    7dbd:\t00 00 \n    7dbf:\te9 b6 08 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7dc4:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7dca:\t25 00 01 00 00       \tand    $0x100,%eax\n    7dcf:\t85 c0                \ttest   %eax,%eax\n    7dd1:\t75 0f                \tjne    7de2 <sim_main+0x72cb>\n    7dd3:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7dd9:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7dde:\t85 c0                \ttest   %eax,%eax\n    7de0:\t74 0c                \tje     7dee <sim_main+0x72d7>\n    7de2:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7de9:\te9 8c 08 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7dee:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7df4:\tc1 e8 19             \tshr    $0x19,%eax\n    7df7:\t89 c0                \tmov    %eax,%eax\n    7df9:\t48 83 c0 10          \tadd    $0x10,%rax\n    7dfd:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    7e04:\t00 00 \n    7e06:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7e0c:\tc1 e8 09             \tshr    $0x9,%eax\n    7e0f:\t83 e0 7f             \tand    $0x7f,%eax\n    7e12:\tf3 0f 7e 0d 00 00 00 \tmovq   0x0(%rip),%xmm1        # 7e1a <sim_main+0x7303>\n    7e19:\t00 \n    7e1a:\t66 0f 57 c1          \txorpd  %xmm1,%xmm0\n    7e1e:\t89 c0                \tmov    %eax,%eax\n    7e20:\t48 83 c0 10          \tadd    $0x10,%rax\n    7e24:\tf2 0f 11 04 c5 00 00 \tmovsd  %xmm0,0x0(,%rax,8)\n    7e2b:\t00 00 \n    7e2d:\te9 48 08 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7e32:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7e38:\t25 00 01 00 00       \tand    $0x100,%eax\n    7e3d:\t85 c0                \ttest   %eax,%eax\n    7e3f:\t75 0f                \tjne    7e50 <sim_main+0x7339>\n    7e41:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7e47:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7e4c:\t85 c0                \ttest   %eax,%eax\n    7e4e:\t74 0c                \tje     7e5c <sim_main+0x7345>\n    7e50:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7e57:\te9 1e 08 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7e5c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7e62:\tc1 e8 19             \tshr    $0x19,%eax\n    7e65:\t89 c0                \tmov    %eax,%eax\n    7e67:\t48 83 c0 10          \tadd    $0x10,%rax\n    7e6b:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    7e72:\t00 00 \n    7e74:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7e7a:\tc1 e8 08             \tshr    $0x8,%eax\n    7e7d:\t0f b6 c0             \tmovzbl %al,%eax\n    7e80:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n    7e84:\t89 c0                \tmov    %eax,%eax\n    7e86:\t48 83 c0 20          \tadd    $0x20,%rax\n    7e8a:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n    7e91:\t00 00 \n    7e93:\te9 e2 07 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7e98:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7e9e:\t25 00 01 00 00       \tand    $0x100,%eax\n    7ea3:\t85 c0                \ttest   %eax,%eax\n    7ea5:\t75 0f                \tjne    7eb6 <sim_main+0x739f>\n    7ea7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7ead:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7eb2:\t85 c0                \ttest   %eax,%eax\n    7eb4:\t74 0c                \tje     7ec2 <sim_main+0x73ab>\n    7eb6:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7ebd:\te9 b8 07 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7ec2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7ec8:\tc1 e8 18             \tshr    $0x18,%eax\n    7ecb:\t89 c0                \tmov    %eax,%eax\n    7ecd:\t48 83 c0 20          \tadd    $0x20,%rax\n    7ed1:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    7ed8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7ede:\tc1 e8 08             \tshr    $0x8,%eax\n    7ee1:\t0f b6 c0             \tmovzbl %al,%eax\n    7ee4:\tf3 0f 2a c2          \tcvtsi2ss %edx,%xmm0\n    7ee8:\t89 c0                \tmov    %eax,%eax\n    7eea:\t48 83 c0 20          \tadd    $0x20,%rax\n    7eee:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n    7ef5:\t00 00 \n    7ef7:\te9 7e 07 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7efc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7f02:\t25 00 01 00 00       \tand    $0x100,%eax\n    7f07:\t85 c0                \ttest   %eax,%eax\n    7f09:\t75 0f                \tjne    7f1a <sim_main+0x7403>\n    7f0b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7f11:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7f16:\t85 c0                \ttest   %eax,%eax\n    7f18:\t74 0c                \tje     7f26 <sim_main+0x740f>\n    7f1a:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7f21:\te9 54 07 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7f26:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7f2c:\tc1 e8 18             \tshr    $0x18,%eax\n    7f2f:\t89 c0                \tmov    %eax,%eax\n    7f31:\t48 83 c0 20          \tadd    $0x20,%rax\n    7f35:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    7f3c:\t00 00 \n    7f3e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7f44:\tc1 e8 09             \tshr    $0x9,%eax\n    7f47:\t83 e0 7f             \tand    $0x7f,%eax\n    7f4a:\tf3 0f 5a c0          \tcvtss2sd %xmm0,%xmm0\n    7f4e:\t89 c0                \tmov    %eax,%eax\n    7f50:\t48 83 c0 10          \tadd    $0x10,%rax\n    7f54:\tf2 0f 11 04 c5 00 00 \tmovsd  %xmm0,0x0(,%rax,8)\n    7f5b:\t00 00 \n    7f5d:\te9 18 07 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7f62:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7f68:\t25 00 01 00 00       \tand    $0x100,%eax\n    7f6d:\t85 c0                \ttest   %eax,%eax\n    7f6f:\t75 0f                \tjne    7f80 <sim_main+0x7469>\n    7f71:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7f77:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7f7c:\t85 c0                \ttest   %eax,%eax\n    7f7e:\t74 0c                \tje     7f8c <sim_main+0x7475>\n    7f80:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7f87:\te9 ee 06 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7f8c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7f92:\tc1 e8 18             \tshr    $0x18,%eax\n    7f95:\t89 c0                \tmov    %eax,%eax\n    7f97:\t48 83 c0 20          \tadd    $0x20,%rax\n    7f9b:\t8b 14 85 00 00 00 00 \tmov    0x0(,%rax,4),%edx\n    7fa2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7fa8:\tc1 e8 09             \tshr    $0x9,%eax\n    7fab:\t83 e0 7f             \tand    $0x7f,%eax\n    7fae:\tf2 0f 2a c2          \tcvtsi2sd %edx,%xmm0\n    7fb2:\t89 c0                \tmov    %eax,%eax\n    7fb4:\t48 83 c0 10          \tadd    $0x10,%rax\n    7fb8:\tf2 0f 11 04 c5 00 00 \tmovsd  %xmm0,0x0(,%rax,8)\n    7fbf:\t00 00 \n    7fc1:\te9 b4 06 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7fc6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7fcc:\t25 00 01 00 00       \tand    $0x100,%eax\n    7fd1:\t85 c0                \ttest   %eax,%eax\n    7fd3:\t75 0f                \tjne    7fe4 <sim_main+0x74cd>\n    7fd5:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7fdb:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    7fe0:\t85 c0                \ttest   %eax,%eax\n    7fe2:\t74 0c                \tje     7ff0 <sim_main+0x74d9>\n    7fe4:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    7feb:\te9 8a 06 00 00       \tjmpq   867a <sim_main+0x7b63>\n    7ff0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    7ff6:\tc1 e8 18             \tshr    $0x18,%eax\n    7ff9:\t89 c0                \tmov    %eax,%eax\n    7ffb:\t48 83 c0 20          \tadd    $0x20,%rax\n    7fff:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    8006:\t00 00 \n    8008:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    800e:\tc1 e8 08             \tshr    $0x8,%eax\n    8011:\t0f b6 d0             \tmovzbl %al,%edx\n    8014:\tf3 0f 2c c0          \tcvttss2si %xmm0,%eax\n    8018:\t89 d2                \tmov    %edx,%edx\n    801a:\t48 83 c2 20          \tadd    $0x20,%rdx\n    801e:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    8025:\te9 50 06 00 00       \tjmpq   867a <sim_main+0x7b63>\n    802a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8030:\t25 00 01 00 00       \tand    $0x100,%eax\n    8035:\t85 c0                \ttest   %eax,%eax\n    8037:\t75 0f                \tjne    8048 <sim_main+0x7531>\n    8039:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    803f:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    8044:\t85 c0                \ttest   %eax,%eax\n    8046:\t74 0c                \tje     8054 <sim_main+0x753d>\n    8048:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    804f:\te9 26 06 00 00       \tjmpq   867a <sim_main+0x7b63>\n    8054:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    805a:\tc1 e8 19             \tshr    $0x19,%eax\n    805d:\t89 c0                \tmov    %eax,%eax\n    805f:\t48 83 c0 10          \tadd    $0x10,%rax\n    8063:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    806a:\t00 00 \n    806c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8072:\tc1 e8 08             \tshr    $0x8,%eax\n    8075:\t0f b6 d0             \tmovzbl %al,%edx\n    8078:\tf2 0f 2c c0          \tcvttsd2si %xmm0,%eax\n    807c:\t89 d2                \tmov    %edx,%edx\n    807e:\t48 83 c2 20          \tadd    $0x20,%rdx\n    8082:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    8089:\te9 ec 05 00 00       \tjmpq   867a <sim_main+0x7b63>\n    808e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8094:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    8099:\t85 c0                \ttest   %eax,%eax\n    809b:\t75 0f                \tjne    80ac <sim_main+0x7595>\n    809d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    80a3:\t25 00 00 01 00       \tand    $0x10000,%eax\n    80a8:\t85 c0                \ttest   %eax,%eax\n    80aa:\t74 0c                \tje     80b8 <sim_main+0x75a1>\n    80ac:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    80b3:\te9 c2 05 00 00       \tjmpq   867a <sim_main+0x7b63>\n    80b8:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    80be:\tc1 e8 18             \tshr    $0x18,%eax\n    80c1:\t89 c0                \tmov    %eax,%eax\n    80c3:\t48 83 c0 20          \tadd    $0x20,%rax\n    80c7:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    80ce:\t00 00 \n    80d0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    80d6:\tc1 e8 10             \tshr    $0x10,%eax\n    80d9:\t0f b6 c0             \tmovzbl %al,%eax\n    80dc:\t89 c0                \tmov    %eax,%eax\n    80de:\t48 83 c0 20          \tadd    $0x20,%rax\n    80e2:\tf3 0f 10 0c 85 00 00 \tmovss  0x0(,%rax,4),%xmm1\n    80e9:\t00 00 \n    80eb:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    80ee:\t0f 9b c0             \tsetnp  %al\n    80f1:\tba 00 00 00 00       \tmov    $0x0,%edx\n    80f6:\t0f 2e c1             \tucomiss %xmm1,%xmm0\n    80f9:\t0f 45 c2             \tcmovne %edx,%eax\n    80fc:\t0f b6 c0             \tmovzbl %al,%eax\n    80ff:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 8105 <sim_main+0x75ee>\n    8105:\te9 70 05 00 00       \tjmpq   867a <sim_main+0x7b63>\n    810a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8110:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    8115:\t85 c0                \ttest   %eax,%eax\n    8117:\t75 0f                \tjne    8128 <sim_main+0x7611>\n    8119:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    811f:\t25 00 00 01 00       \tand    $0x10000,%eax\n    8124:\t85 c0                \ttest   %eax,%eax\n    8126:\t74 0c                \tje     8134 <sim_main+0x761d>\n    8128:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    812f:\te9 46 05 00 00       \tjmpq   867a <sim_main+0x7b63>\n    8134:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    813a:\tc1 e8 19             \tshr    $0x19,%eax\n    813d:\t89 c0                \tmov    %eax,%eax\n    813f:\t48 83 c0 10          \tadd    $0x10,%rax\n    8143:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    814a:\t00 00 \n    814c:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8152:\tc1 e8 11             \tshr    $0x11,%eax\n    8155:\t83 e0 7f             \tand    $0x7f,%eax\n    8158:\t89 c0                \tmov    %eax,%eax\n    815a:\t48 83 c0 10          \tadd    $0x10,%rax\n    815e:\tf2 0f 10 0c c5 00 00 \tmovsd  0x0(,%rax,8),%xmm1\n    8165:\t00 00 \n    8167:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n    816b:\t0f 9b c0             \tsetnp  %al\n    816e:\tba 00 00 00 00       \tmov    $0x0,%edx\n    8173:\t66 0f 2e c1          \tucomisd %xmm1,%xmm0\n    8177:\t0f 45 c2             \tcmovne %edx,%eax\n    817a:\t0f b6 c0             \tmovzbl %al,%eax\n    817d:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 8183 <sim_main+0x766c>\n    8183:\te9 f2 04 00 00       \tjmpq   867a <sim_main+0x7b63>\n    8188:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    818e:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    8193:\t85 c0                \ttest   %eax,%eax\n    8195:\t75 0f                \tjne    81a6 <sim_main+0x768f>\n    8197:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    819d:\t25 00 00 01 00       \tand    $0x10000,%eax\n    81a2:\t85 c0                \ttest   %eax,%eax\n    81a4:\t74 0c                \tje     81b2 <sim_main+0x769b>\n    81a6:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    81ad:\te9 c8 04 00 00       \tjmpq   867a <sim_main+0x7b63>\n    81b2:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    81b8:\tc1 e8 18             \tshr    $0x18,%eax\n    81bb:\t89 c0                \tmov    %eax,%eax\n    81bd:\t48 83 c0 20          \tadd    $0x20,%rax\n    81c1:\tf3 0f 10 0c 85 00 00 \tmovss  0x0(,%rax,4),%xmm1\n    81c8:\t00 00 \n    81ca:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    81d0:\tc1 e8 10             \tshr    $0x10,%eax\n    81d3:\t0f b6 c0             \tmovzbl %al,%eax\n    81d6:\t89 c0                \tmov    %eax,%eax\n    81d8:\t48 83 c0 20          \tadd    $0x20,%rax\n    81dc:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    81e3:\t00 00 \n    81e5:\t0f 2f c1             \tcomiss %xmm1,%xmm0\n    81e8:\t0f 97 c0             \tseta   %al\n    81eb:\t0f b6 c0             \tmovzbl %al,%eax\n    81ee:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 81f4 <sim_main+0x76dd>\n    81f4:\te9 81 04 00 00       \tjmpq   867a <sim_main+0x7b63>\n    81f9:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    81ff:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    8204:\t85 c0                \ttest   %eax,%eax\n    8206:\t75 0f                \tjne    8217 <sim_main+0x7700>\n    8208:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    820e:\t25 00 00 01 00       \tand    $0x10000,%eax\n    8213:\t85 c0                \ttest   %eax,%eax\n    8215:\t74 0c                \tje     8223 <sim_main+0x770c>\n    8217:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    821e:\te9 57 04 00 00       \tjmpq   867a <sim_main+0x7b63>\n    8223:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8229:\tc1 e8 19             \tshr    $0x19,%eax\n    822c:\t89 c0                \tmov    %eax,%eax\n    822e:\t48 83 c0 10          \tadd    $0x10,%rax\n    8232:\tf2 0f 10 0c c5 00 00 \tmovsd  0x0(,%rax,8),%xmm1\n    8239:\t00 00 \n    823b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8241:\tc1 e8 11             \tshr    $0x11,%eax\n    8244:\t83 e0 7f             \tand    $0x7f,%eax\n    8247:\t89 c0                \tmov    %eax,%eax\n    8249:\t48 83 c0 10          \tadd    $0x10,%rax\n    824d:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    8254:\t00 00 \n    8256:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    825a:\t0f 97 c0             \tseta   %al\n    825d:\t0f b6 c0             \tmovzbl %al,%eax\n    8260:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 8266 <sim_main+0x774f>\n    8266:\te9 0f 04 00 00       \tjmpq   867a <sim_main+0x7b63>\n    826b:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8271:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    8276:\t85 c0                \ttest   %eax,%eax\n    8278:\t75 0f                \tjne    8289 <sim_main+0x7772>\n    827a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8280:\t25 00 00 01 00       \tand    $0x10000,%eax\n    8285:\t85 c0                \ttest   %eax,%eax\n    8287:\t74 0c                \tje     8295 <sim_main+0x777e>\n    8289:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    8290:\te9 e5 03 00 00       \tjmpq   867a <sim_main+0x7b63>\n    8295:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    829b:\tc1 e8 18             \tshr    $0x18,%eax\n    829e:\t89 c0                \tmov    %eax,%eax\n    82a0:\t48 83 c0 20          \tadd    $0x20,%rax\n    82a4:\tf3 0f 10 0c 85 00 00 \tmovss  0x0(,%rax,4),%xmm1\n    82ab:\t00 00 \n    82ad:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    82b3:\tc1 e8 10             \tshr    $0x10,%eax\n    82b6:\t0f b6 c0             \tmovzbl %al,%eax\n    82b9:\t89 c0                \tmov    %eax,%eax\n    82bb:\t48 83 c0 20          \tadd    $0x20,%rax\n    82bf:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    82c6:\t00 00 \n    82c8:\t0f 2f c1             \tcomiss %xmm1,%xmm0\n    82cb:\t0f 93 c0             \tsetae  %al\n    82ce:\t0f b6 c0             \tmovzbl %al,%eax\n    82d1:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 82d7 <sim_main+0x77c0>\n    82d7:\te9 9e 03 00 00       \tjmpq   867a <sim_main+0x7b63>\n    82dc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    82e2:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    82e7:\t85 c0                \ttest   %eax,%eax\n    82e9:\t75 0f                \tjne    82fa <sim_main+0x77e3>\n    82eb:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    82f1:\t25 00 00 01 00       \tand    $0x10000,%eax\n    82f6:\t85 c0                \ttest   %eax,%eax\n    82f8:\t74 0c                \tje     8306 <sim_main+0x77ef>\n    82fa:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    8301:\te9 74 03 00 00       \tjmpq   867a <sim_main+0x7b63>\n    8306:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    830c:\tc1 e8 19             \tshr    $0x19,%eax\n    830f:\t89 c0                \tmov    %eax,%eax\n    8311:\t48 83 c0 10          \tadd    $0x10,%rax\n    8315:\tf2 0f 10 0c c5 00 00 \tmovsd  0x0(,%rax,8),%xmm1\n    831c:\t00 00 \n    831e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8324:\tc1 e8 11             \tshr    $0x11,%eax\n    8327:\t83 e0 7f             \tand    $0x7f,%eax\n    832a:\t89 c0                \tmov    %eax,%eax\n    832c:\t48 83 c0 10          \tadd    $0x10,%rax\n    8330:\tf2 0f 10 04 c5 00 00 \tmovsd  0x0(,%rax,8),%xmm0\n    8337:\t00 00 \n    8339:\t66 0f 2f c1          \tcomisd %xmm1,%xmm0\n    833d:\t0f 93 c0             \tsetae  %al\n    8340:\t0f b6 c0             \tmovzbl %al,%eax\n    8343:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 8349 <sim_main+0x7832>\n    8349:\te9 2c 03 00 00       \tjmpq   867a <sim_main+0x7b63>\n    834e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8354:\t25 00 01 00 00       \tand    $0x100,%eax\n    8359:\t85 c0                \ttest   %eax,%eax\n    835b:\t75 0f                \tjne    836c <sim_main+0x7855>\n    835d:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8363:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    8368:\t85 c0                \ttest   %eax,%eax\n    836a:\t74 0c                \tje     8378 <sim_main+0x7861>\n    836c:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    8373:\te9 02 03 00 00       \tjmpq   867a <sim_main+0x7b63>\n    8378:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    837e:\tc1 e8 18             \tshr    $0x18,%eax\n    8381:\t89 c0                \tmov    %eax,%eax\n    8383:\t48 83 c0 20          \tadd    $0x20,%rax\n    8387:\tf3 0f 10 04 85 00 00 \tmovss  0x0(,%rax,4),%xmm0\n    838e:\t00 00 \n    8390:\tf3 0f 5a c0          \tcvtss2sd %xmm0,%xmm0\n    8394:\te8 00 00 00 00       \tcallq  8399 <sim_main+0x7882>\n    8399:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    839f:\tc1 e8 08             \tshr    $0x8,%eax\n    83a2:\t0f b6 c0             \tmovzbl %al,%eax\n    83a5:\tf2 0f 5a c0          \tcvtsd2ss %xmm0,%xmm0\n    83a9:\t89 c0                \tmov    %eax,%eax\n    83ab:\t48 83 c0 20          \tadd    $0x20,%rax\n    83af:\tf3 0f 11 04 85 00 00 \tmovss  %xmm0,0x0(,%rax,4)\n    83b6:\t00 00 \n    83b8:\te9 bd 02 00 00       \tjmpq   867a <sim_main+0x7b63>\n    83bd:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    83c3:\t25 00 01 00 00       \tand    $0x100,%eax\n    83c8:\t85 c0                \ttest   %eax,%eax\n    83ca:\t75 0f                \tjne    83db <sim_main+0x78c4>\n    83cc:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    83d2:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    83d7:\t85 c0                \ttest   %eax,%eax\n    83d9:\t74 0c                \tje     83e7 <sim_main+0x78d0>\n    83db:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    83e2:\te9 93 02 00 00       \tjmpq   867a <sim_main+0x7b63>\n    83e7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    83ed:\tc1 e8 19             \tshr    $0x19,%eax\n    83f0:\t89 c0                \tmov    %eax,%eax\n    83f2:\t48 83 c0 10          \tadd    $0x10,%rax\n    83f6:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    83fd:\t00 \n    83fe:\t8b 95 60 fe ff ff    \tmov    -0x1a0(%rbp),%edx\n    8404:\tc1 ea 09             \tshr    $0x9,%edx\n    8407:\t83 e2 7f             \tand    $0x7f,%edx\n    840a:\t41 89 d4             \tmov    %edx,%r12d\n    840d:\t66 48 0f 6e c0       \tmovq   %rax,%xmm0\n    8412:\te8 00 00 00 00       \tcallq  8417 <sim_main+0x7900>\n    8417:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n    841c:\t44 89 e2             \tmov    %r12d,%edx\n    841f:\t48 83 c2 10          \tadd    $0x10,%rdx\n    8423:\t48 89 04 d5 00 00 00 \tmov    %rax,0x0(,%rdx,8)\n    842a:\t00 \n    842b:\te9 4a 02 00 00       \tjmpq   867a <sim_main+0x7b63>\n    8430:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8437 <sim_main+0x7920>\n    8437:\t48 8b 95 5c fe ff ff \tmov    -0x1a4(%rbp),%rdx\n    843e:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    8444:\t48 89 d1             \tmov    %rdx,%rcx\n    8447:\t48 89 c2             \tmov    %rax,%rdx\n    844a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    844f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    8454:\te8 00 00 00 00       \tcallq  8459 <sim_main+0x7942>\n    8459:\te9 1c 02 00 00       \tjmpq   867a <sim_main+0x7b63>\n    845e:\tc7 45 ac 05 00 00 00 \tmovl   $0x5,-0x54(%rbp)\n    8465:\te9 10 02 00 00       \tjmpq   867a <sim_main+0x7b63>\n    846a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8470:\tc1 e0 10             \tshl    $0x10,%eax\n    8473:\t89 c2                \tmov    %eax,%edx\n    8475:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    847b:\tc1 e8 10             \tshr    $0x10,%eax\n    847e:\t0f b6 c0             \tmovzbl %al,%eax\n    8481:\t89 c0                \tmov    %eax,%eax\n    8483:\t89 14 85 00 00 00 00 \tmov    %edx,0x0(,%rax,4)\n    848a:\te9 eb 01 00 00       \tjmpq   867a <sim_main+0x7b63>\n    848f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8495:\tc1 e8 18             \tshr    $0x18,%eax\n    8498:\t89 c1                \tmov    %eax,%ecx\n    849a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    84a0:\tc1 e8 10             \tshr    $0x10,%eax\n    84a3:\t0f b6 d0             \tmovzbl %al,%edx\n    84a6:\t89 c8                \tmov    %ecx,%eax\n    84a8:\t48 83 c0 20          \tadd    $0x20,%rax\n    84ac:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    84b3:\t89 d2                \tmov    %edx,%edx\n    84b5:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    84bc:\te9 b9 01 00 00       \tjmpq   867a <sim_main+0x7b63>\n    84c1:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    84c7:\t25 00 00 01 00       \tand    $0x10000,%eax\n    84cc:\t85 c0                \ttest   %eax,%eax\n    84ce:\t75 0f                \tjne    84df <sim_main+0x79c8>\n    84d0:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    84d6:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    84db:\t85 c0                \ttest   %eax,%eax\n    84dd:\t74 0c                \tje     84eb <sim_main+0x79d4>\n    84df:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    84e6:\te9 8f 01 00 00       \tjmpq   867a <sim_main+0x7b63>\n    84eb:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    84f1:\tc1 e8 18             \tshr    $0x18,%eax\n    84f4:\t89 c1                \tmov    %eax,%ecx\n    84f6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    84fc:\tc1 e8 10             \tshr    $0x10,%eax\n    84ff:\t0f b6 d0             \tmovzbl %al,%edx\n    8502:\t89 c8                \tmov    %ecx,%eax\n    8504:\t48 83 c0 20          \tadd    $0x20,%rax\n    8508:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    850f:\t89 d2                \tmov    %edx,%edx\n    8511:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    8518:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    851e:\tc1 e8 18             \tshr    $0x18,%eax\n    8521:\t8d 48 01             \tlea    0x1(%rax),%ecx\n    8524:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    852a:\tc1 e8 10             \tshr    $0x10,%eax\n    852d:\t0f b6 c0             \tmovzbl %al,%eax\n    8530:\t8d 50 01             \tlea    0x1(%rax),%edx\n    8533:\t89 c8                \tmov    %ecx,%eax\n    8535:\t48 83 c0 20          \tadd    $0x20,%rax\n    8539:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    8540:\t89 d2                \tmov    %edx,%edx\n    8542:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    8549:\te9 2c 01 00 00       \tjmpq   867a <sim_main+0x7b63>\n    854e:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8554:\tc1 e8 10             \tshr    $0x10,%eax\n    8557:\t0f b6 d0             \tmovzbl %al,%edx\n    855a:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8560:\tc1 e8 18             \tshr    $0x18,%eax\n    8563:\t89 c1                \tmov    %eax,%ecx\n    8565:\t89 d0                \tmov    %edx,%eax\n    8567:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    856e:\t89 ca                \tmov    %ecx,%edx\n    8570:\t48 83 c2 20          \tadd    $0x20,%rdx\n    8574:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    857b:\te9 fa 00 00 00       \tjmpq   867a <sim_main+0x7b63>\n    8580:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8586:\t25 00 00 00 01       \tand    $0x1000000,%eax\n    858b:\t85 c0                \ttest   %eax,%eax\n    858d:\t75 0f                \tjne    859e <sim_main+0x7a87>\n    858f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8595:\t25 00 00 01 00       \tand    $0x10000,%eax\n    859a:\t85 c0                \ttest   %eax,%eax\n    859c:\t74 0c                \tje     85aa <sim_main+0x7a93>\n    859e:\tc7 45 ac 02 00 00 00 \tmovl   $0x2,-0x54(%rbp)\n    85a5:\te9 d0 00 00 00       \tjmpq   867a <sim_main+0x7b63>\n    85aa:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    85b0:\tc1 e8 10             \tshr    $0x10,%eax\n    85b3:\t0f b6 d0             \tmovzbl %al,%edx\n    85b6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    85bc:\tc1 e8 18             \tshr    $0x18,%eax\n    85bf:\t89 c1                \tmov    %eax,%ecx\n    85c1:\t89 d0                \tmov    %edx,%eax\n    85c3:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    85ca:\t89 ca                \tmov    %ecx,%edx\n    85cc:\t48 83 c2 20          \tadd    $0x20,%rdx\n    85d0:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    85d7:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    85dd:\tc1 e8 10             \tshr    $0x10,%eax\n    85e0:\t0f b6 c0             \tmovzbl %al,%eax\n    85e3:\t8d 48 01             \tlea    0x1(%rax),%ecx\n    85e6:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    85ec:\tc1 e8 18             \tshr    $0x18,%eax\n    85ef:\t8d 50 01             \tlea    0x1(%rax),%edx\n    85f2:\t89 c8                \tmov    %ecx,%eax\n    85f4:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    85fb:\t89 d2                \tmov    %edx,%edx\n    85fd:\t48 83 c2 20          \tadd    $0x20,%rdx\n    8601:\t89 04 95 00 00 00 00 \tmov    %eax,0x0(,%rdx,4)\n    8608:\teb 70                \tjmp    867a <sim_main+0x7b63>\n    860a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    860f:\tba c3 02 00 00       \tmov    $0x2c3,%edx\n    8614:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    8619:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    861e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    8623:\te8 00 00 00 00       \tcallq  8628 <sim_main+0x7b11>\n    8628:\t90                   \tnop\n    8629:\teb 4f                \tjmp    867a <sim_main+0x7b63>\n    862b:\t90                   \tnop\n    862c:\teb 4c                \tjmp    867a <sim_main+0x7b63>\n    862e:\t90                   \tnop\n    862f:\teb 49                \tjmp    867a <sim_main+0x7b63>\n    8631:\t90                   \tnop\n    8632:\teb 46                \tjmp    867a <sim_main+0x7b63>\n    8634:\t90                   \tnop\n    8635:\teb 43                \tjmp    867a <sim_main+0x7b63>\n    8637:\t90                   \tnop\n    8638:\teb 40                \tjmp    867a <sim_main+0x7b63>\n    863a:\t90                   \tnop\n    863b:\teb 3d                \tjmp    867a <sim_main+0x7b63>\n    863d:\t90                   \tnop\n    863e:\teb 3a                \tjmp    867a <sim_main+0x7b63>\n    8640:\t90                   \tnop\n    8641:\teb 37                \tjmp    867a <sim_main+0x7b63>\n    8643:\t90                   \tnop\n    8644:\teb 34                \tjmp    867a <sim_main+0x7b63>\n    8646:\t90                   \tnop\n    8647:\teb 31                \tjmp    867a <sim_main+0x7b63>\n    8649:\t90                   \tnop\n    864a:\teb 2e                \tjmp    867a <sim_main+0x7b63>\n    864c:\t90                   \tnop\n    864d:\teb 2b                \tjmp    867a <sim_main+0x7b63>\n    864f:\t90                   \tnop\n    8650:\teb 28                \tjmp    867a <sim_main+0x7b63>\n    8652:\t90                   \tnop\n    8653:\teb 25                \tjmp    867a <sim_main+0x7b63>\n    8655:\t90                   \tnop\n    8656:\teb 22                \tjmp    867a <sim_main+0x7b63>\n    8658:\t90                   \tnop\n    8659:\teb 1f                \tjmp    867a <sim_main+0x7b63>\n    865b:\t90                   \tnop\n    865c:\teb 1c                \tjmp    867a <sim_main+0x7b63>\n    865e:\t90                   \tnop\n    865f:\teb 19                \tjmp    867a <sim_main+0x7b63>\n    8661:\t90                   \tnop\n    8662:\teb 16                \tjmp    867a <sim_main+0x7b63>\n    8664:\t90                   \tnop\n    8665:\teb 13                \tjmp    867a <sim_main+0x7b63>\n    8667:\t90                   \tnop\n    8668:\teb 10                \tjmp    867a <sim_main+0x7b63>\n    866a:\t90                   \tnop\n    866b:\teb 0d                \tjmp    867a <sim_main+0x7b63>\n    866d:\t90                   \tnop\n    866e:\teb 0a                \tjmp    867a <sim_main+0x7b63>\n    8670:\t90                   \tnop\n    8671:\teb 07                \tjmp    867a <sim_main+0x7b63>\n    8673:\t90                   \tnop\n    8674:\teb 04                \tjmp    867a <sim_main+0x7b63>\n    8676:\t90                   \tnop\n    8677:\teb 01                \tjmp    867a <sim_main+0x7b63>\n    8679:\t90                   \tnop\n    867a:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    867d:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    8684:\t83 e0 20             \tand    $0x20,%eax\n    8687:\t85 c0                \ttest   %eax,%eax\n    8689:\t74 2b                \tje     86b6 <sim_main+0x7b9f>\n    868b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8692 <sim_main+0x7b7b>\n    8692:\t48 83 c0 01          \tadd    $0x1,%rax\n    8696:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 869d <sim_main+0x7b86>\n    869d:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    86a0:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    86a7:\t25 80 00 00 00       \tand    $0x80,%eax\n    86ac:\t85 c0                \ttest   %eax,%eax\n    86ae:\t74 06                \tje     86b6 <sim_main+0x7b9f>\n    86b0:\t41 bd 01 00 00 00    \tmov    $0x1,%r13d\n    86b6:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    86b9:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    86c0:\t89 85 74 fe ff ff    \tmov    %eax,-0x18c(%rbp)\n    86c6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 86cc <sim_main+0x7bb5>\n    86cc:\t85 c0                \ttest   %eax,%eax\n    86ce:\t0f 84 d6 00 00 00    \tje     87aa <sim_main+0x7c93>\n    86d4:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    86da:\t83 e0 40             \tand    $0x40,%eax\n    86dd:\t85 c0                \ttest   %eax,%eax\n    86df:\t74 0c                \tje     86ed <sim_main+0x7bd6>\n    86e1:\tc7 45 b8 00 00 00 00 \tmovl   $0x0,-0x48(%rbp)\n    86e8:\te9 a9 00 00 00       \tjmpq   8796 <sim_main+0x7c7f>\n    86ed:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    86f3:\t25 80 00 00 00       \tand    $0x80,%eax\n    86f8:\t85 c0                \ttest   %eax,%eax\n    86fa:\t74 0c                \tje     8708 <sim_main+0x7bf1>\n    86fc:\tc7 45 b8 01 00 00 00 \tmovl   $0x1,-0x48(%rbp)\n    8703:\te9 8e 00 00 00       \tjmpq   8796 <sim_main+0x7c7f>\n    8708:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    870e:\t83 e0 08             \tand    $0x8,%eax\n    8711:\t85 c0                \ttest   %eax,%eax\n    8713:\t74 09                \tje     871e <sim_main+0x7c07>\n    8715:\tc7 45 b8 02 00 00 00 \tmovl   $0x2,-0x48(%rbp)\n    871c:\teb 78                \tjmp    8796 <sim_main+0x7c7f>\n    871e:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    8724:\t83 e0 10             \tand    $0x10,%eax\n    8727:\t85 c0                \ttest   %eax,%eax\n    8729:\t74 09                \tje     8734 <sim_main+0x7c1d>\n    872b:\tc7 45 b8 03 00 00 00 \tmovl   $0x3,-0x48(%rbp)\n    8732:\teb 62                \tjmp    8796 <sim_main+0x7c7f>\n    8734:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    873a:\t83 e0 01             \tand    $0x1,%eax\n    873d:\t85 c0                \ttest   %eax,%eax\n    873f:\t74 09                \tje     874a <sim_main+0x7c33>\n    8741:\tc7 45 b8 04 00 00 00 \tmovl   $0x4,-0x48(%rbp)\n    8748:\teb 4c                \tjmp    8796 <sim_main+0x7c7f>\n    874a:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    8750:\t83 e0 02             \tand    $0x2,%eax\n    8753:\t85 c0                \ttest   %eax,%eax\n    8755:\t74 09                \tje     8760 <sim_main+0x7c49>\n    8757:\tc7 45 b8 05 00 00 00 \tmovl   $0x5,-0x48(%rbp)\n    875e:\teb 36                \tjmp    8796 <sim_main+0x7c7f>\n    8760:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    8766:\t25 00 08 00 00       \tand    $0x800,%eax\n    876b:\t85 c0                \ttest   %eax,%eax\n    876d:\t74 09                \tje     8778 <sim_main+0x7c61>\n    876f:\tc7 45 b8 06 00 00 00 \tmovl   $0x6,-0x48(%rbp)\n    8776:\teb 1e                \tjmp    8796 <sim_main+0x7c7f>\n    8778:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    877d:\tba e6 02 00 00       \tmov    $0x2e6,%edx\n    8782:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    8787:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    878c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    8791:\te8 00 00 00 00       \tcallq  8796 <sim_main+0x7c7f>\n    8796:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 879d <sim_main+0x7c86>\n    879d:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n    87a0:\t89 d6                \tmov    %edx,%esi\n    87a2:\t48 89 c7             \tmov    %rax,%rdi\n    87a5:\te8 00 00 00 00       \tcallq  87aa <sim_main+0x7c93>\n    87aa:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 87b0 <sim_main+0x7c99>\n    87b0:\t85 c0                \ttest   %eax,%eax\n    87b2:\t74 19                \tje     87cd <sim_main+0x7cb6>\n    87b4:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    87b7:\t83 e8 01             \tsub    $0x1,%eax\n    87ba:\t89 c2                \tmov    %eax,%edx\n    87bc:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 87c3 <sim_main+0x7cac>\n    87c3:\t89 d6                \tmov    %edx,%esi\n    87c5:\t48 89 c7             \tmov    %rax,%rdi\n    87c8:\te8 00 00 00 00       \tcallq  87cd <sim_main+0x7cb6>\n    87cd:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 87d3 <sim_main+0x7cbc>\n    87d3:\t85 c0                \ttest   %eax,%eax\n    87d5:\t0f 84 eb 00 00 00    \tje     88c6 <sim_main+0x7daf>\n    87db:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    87e1:\t83 e0 04             \tand    $0x4,%eax\n    87e4:\t85 c0                \ttest   %eax,%eax\n    87e6:\t0f 84 da 00 00 00    \tje     88c6 <sim_main+0x7daf>\n    87ec:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    87f2:\t25 00 a0 00 00       \tand    $0xa000,%eax\n    87f7:\t3d 00 a0 00 00       \tcmp    $0xa000,%eax\n    87fc:\t75 0c                \tjne    880a <sim_main+0x7cf3>\n    87fe:\tc7 45 b4 02 00 00 00 \tmovl   $0x2,-0x4c(%rbp)\n    8805:\te9 a8 00 00 00       \tjmpq   88b2 <sim_main+0x7d9b>\n    880a:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    8810:\t25 00 c0 00 00       \tand    $0xc000,%eax\n    8815:\t3d 00 c0 00 00       \tcmp    $0xc000,%eax\n    881a:\t75 0c                \tjne    8828 <sim_main+0x7d11>\n    881c:\tc7 45 b4 05 00 00 00 \tmovl   $0x5,-0x4c(%rbp)\n    8823:\te9 8a 00 00 00       \tjmpq   88b2 <sim_main+0x7d9b>\n    8828:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    882e:\t25 08 20 00 00       \tand    $0x2008,%eax\n    8833:\t3d 08 20 00 00       \tcmp    $0x2008,%eax\n    8838:\t75 09                \tjne    8843 <sim_main+0x7d2c>\n    883a:\tc7 45 b4 00 00 00 00 \tmovl   $0x0,-0x4c(%rbp)\n    8841:\teb 6f                \tjmp    88b2 <sim_main+0x7d9b>\n    8843:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    8849:\t25 08 40 00 00       \tand    $0x4008,%eax\n    884e:\t3d 08 40 00 00       \tcmp    $0x4008,%eax\n    8853:\t75 09                \tjne    885e <sim_main+0x7d47>\n    8855:\tc7 45 b4 03 00 00 00 \tmovl   $0x3,-0x4c(%rbp)\n    885c:\teb 54                \tjmp    88b2 <sim_main+0x7d9b>\n    885e:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    8864:\t25 10 20 00 00       \tand    $0x2010,%eax\n    8869:\t3d 10 20 00 00       \tcmp    $0x2010,%eax\n    886e:\t75 09                \tjne    8879 <sim_main+0x7d62>\n    8870:\tc7 45 b4 01 00 00 00 \tmovl   $0x1,-0x4c(%rbp)\n    8877:\teb 39                \tjmp    88b2 <sim_main+0x7d9b>\n    8879:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    887f:\t25 10 40 00 00       \tand    $0x4010,%eax\n    8884:\t3d 10 40 00 00       \tcmp    $0x4010,%eax\n    8889:\t75 09                \tjne    8894 <sim_main+0x7d7d>\n    888b:\tc7 45 b4 04 00 00 00 \tmovl   $0x4,-0x4c(%rbp)\n    8892:\teb 1e                \tjmp    88b2 <sim_main+0x7d9b>\n    8894:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    8899:\tba 06 03 00 00       \tmov    $0x306,%edx\n    889e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    88a3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    88a8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    88ad:\te8 00 00 00 00       \tcallq  88b2 <sim_main+0x7d9b>\n    88b2:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 88b9 <sim_main+0x7da2>\n    88b9:\t8b 55 b4             \tmov    -0x4c(%rbp),%edx\n    88bc:\t89 d6                \tmov    %edx,%esi\n    88be:\t48 89 c7             \tmov    %rax,%rdi\n    88c1:\te8 00 00 00 00       \tcallq  88c6 <sim_main+0x7daf>\n    88c6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 88cc <sim_main+0x7db5>\n    88cc:\t85 c0                \ttest   %eax,%eax\n    88ce:\t0f 84 03 01 00 00    \tje     89d7 <sim_main+0x7ec0>\n    88d4:\t83 7d a8 71          \tcmpl   $0x71,-0x58(%rbp)\n    88d8:\t75 12                \tjne    88ec <sim_main+0x7dd5>\n    88da:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    88e0:\tc1 e8 10             \tshr    $0x10,%eax\n    88e3:\t0f b6 c0             \tmovzbl %al,%eax\n    88e6:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 88ec <sim_main+0x7dd5>\n    88ec:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    88f2:\t83 e0 20             \tand    $0x20,%eax\n    88f5:\t85 c0                \ttest   %eax,%eax\n    88f7:\t0f 84 da 00 00 00    \tje     89d7 <sim_main+0x7ec0>\n    88fd:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    8900:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    8907:\t25 00 01 00 00       \tand    $0x100,%eax\n    890c:\t85 c0                \ttest   %eax,%eax\n    890e:\t74 6f                \tje     897f <sim_main+0x7e68>\n    8910:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8916:\tc1 e8 18             \tshr    $0x18,%eax\n    8919:\t89 c2                \tmov    %eax,%edx\n    891b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8921 <sim_main+0x7e0a>\n    8921:\t39 c2                \tcmp    %eax,%edx\n    8923:\t75 0c                \tjne    8931 <sim_main+0x7e1a>\n    8925:\tc7 45 b0 00 00 00 00 \tmovl   $0x0,-0x50(%rbp)\n    892c:\te9 88 00 00 00       \tjmpq   89b9 <sim_main+0x7ea2>\n    8931:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8937:\tc1 e8 18             \tshr    $0x18,%eax\n    893a:\t83 f8 1c             \tcmp    $0x1c,%eax\n    893d:\t75 09                \tjne    8948 <sim_main+0x7e31>\n    893f:\tc7 45 b0 01 00 00 00 \tmovl   $0x1,-0x50(%rbp)\n    8946:\teb 71                \tjmp    89b9 <sim_main+0x7ea2>\n    8948:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    894e:\tc1 e8 18             \tshr    $0x18,%eax\n    8951:\t83 f8 1d             \tcmp    $0x1d,%eax\n    8954:\t75 09                \tjne    895f <sim_main+0x7e48>\n    8956:\tc7 45 b0 02 00 00 00 \tmovl   $0x2,-0x50(%rbp)\n    895d:\teb 5a                \tjmp    89b9 <sim_main+0x7ea2>\n    895f:\t8b 85 60 fe ff ff    \tmov    -0x1a0(%rbp),%eax\n    8965:\tc1 e8 18             \tshr    $0x18,%eax\n    8968:\t83 f8 1e             \tcmp    $0x1e,%eax\n    896b:\t75 09                \tjne    8976 <sim_main+0x7e5f>\n    896d:\tc7 45 b0 03 00 00 00 \tmovl   $0x3,-0x50(%rbp)\n    8974:\teb 43                \tjmp    89b9 <sim_main+0x7ea2>\n    8976:\tc7 45 b0 04 00 00 00 \tmovl   $0x4,-0x50(%rbp)\n    897d:\teb 3a                \tjmp    89b9 <sim_main+0x7ea2>\n    897f:\t8b 45 a8             \tmov    -0x58(%rbp),%eax\n    8982:\t8b 04 85 00 00 00 00 \tmov    0x0(,%rax,4),%eax\n    8989:\t25 00 02 00 00       \tand    $0x200,%eax\n    898e:\t85 c0                \ttest   %eax,%eax\n    8990:\t74 09                \tje     899b <sim_main+0x7e84>\n    8992:\tc7 45 b0 05 00 00 00 \tmovl   $0x5,-0x50(%rbp)\n    8999:\teb 1e                \tjmp    89b9 <sim_main+0x7ea2>\n    899b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    89a0:\tba 18 03 00 00       \tmov    $0x318,%edx\n    89a5:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    89aa:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    89af:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    89b4:\te8 00 00 00 00       \tcallq  89b9 <sim_main+0x7ea2>\n    89b9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 89c0 <sim_main+0x7ea9>\n    89c0:\t8b 55 b0             \tmov    -0x50(%rbp),%edx\n    89c3:\t89 d6                \tmov    %edx,%esi\n    89c5:\t48 89 c7             \tmov    %rax,%rdi\n    89c8:\te8 00 00 00 00       \tcallq  89cd <sim_main+0x7eb6>\n    89cd:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # 89d7 <sim_main+0x7ec0>\n    89d4:\t00 00 00 \n    89d7:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 89dd <sim_main+0x7ec6>\n    89dd:\t85 c0                \ttest   %eax,%eax\n    89df:\t74 27                \tje     8a08 <sim_main+0x7ef1>\n    89e1:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    89e7:\t83 e0 20             \tand    $0x20,%eax\n    89ea:\t85 c0                \ttest   %eax,%eax\n    89ec:\t74 1a                \tje     8a08 <sim_main+0x7ef1>\n    89ee:\t89 df                \tmov    %ebx,%edi\n    89f0:\te8 e5 78 ff ff       \tcallq  2da <bind_to_seg>\n    89f5:\t89 c2                \tmov    %eax,%edx\n    89f7:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 89fe <sim_main+0x7ee7>\n    89fe:\t89 d6                \tmov    %edx,%esi\n    8a00:\t48 89 c7             \tmov    %rax,%rdi\n    8a03:\te8 00 00 00 00       \tcallq  8a08 <sim_main+0x7ef1>\n    8a08:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8a0e <sim_main+0x7ef7>\n    8a0e:\t85 c0                \ttest   %eax,%eax\n    8a10:\t74 6f                \tje     8a81 <sim_main+0x7f6a>\n    8a12:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8a18 <sim_main+0x7f01>\n    8a18:\t48 8d b5 58 fe ff ff \tlea    -0x1a8(%rbp),%rsi\n    8a1f:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n    8a24:\tba 00 00 00 00       \tmov    $0x0,%edx\n    8a29:\t89 c7                \tmov    %eax,%edi\n    8a2b:\te8 00 00 00 00       \tcallq  8a30 <sim_main+0x7f19>\n    8a30:\t8b 85 58 fe ff ff    \tmov    -0x1a8(%rbp),%eax\n    8a36:\t85 c0                \ttest   %eax,%eax\n    8a38:\t78 47                \tjs     8a81 <sim_main+0x7f6a>\n    8a3a:\t8b 95 58 fe ff ff    \tmov    -0x1a8(%rbp),%edx\n    8a40:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8a46 <sim_main+0x7f2f>\n    8a46:\t39 c2                \tcmp    %eax,%edx\n    8a48:\t7e 1e                \tjle    8a68 <sim_main+0x7f51>\n    8a4a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    8a4f:\tba 35 03 00 00       \tmov    $0x335,%edx\n    8a54:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    8a59:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    8a5e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    8a63:\te8 00 00 00 00       \tcallq  8a68 <sim_main+0x7f51>\n    8a68:\t8b 85 58 fe ff ff    \tmov    -0x1a8(%rbp),%eax\n    8a6e:\t89 c2                \tmov    %eax,%edx\n    8a70:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8a77 <sim_main+0x7f60>\n    8a77:\t89 d6                \tmov    %edx,%esi\n    8a79:\t48 89 c7             \tmov    %rax,%rdi\n    8a7c:\te8 00 00 00 00       \tcallq  8a81 <sim_main+0x7f6a>\n    8a81:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8a87 <sim_main+0x7f70>\n    8a87:\t85 c0                \ttest   %eax,%eax\n    8a89:\t74 79                \tje     8b04 <sim_main+0x7fed>\n    8a8b:\t8b 85 74 fe ff ff    \tmov    -0x18c(%rbp),%eax\n    8a91:\t83 e0 20             \tand    $0x20,%eax\n    8a94:\t85 c0                \ttest   %eax,%eax\n    8a96:\t74 6c                \tje     8b04 <sim_main+0x7fed>\n    8a98:\t48 8d 85 54 fe ff ff \tlea    -0x1ac(%rbp),%rax\n    8a9f:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n    8aa4:\tba 00 00 00 00       \tmov    $0x0,%edx\n    8aa9:\t48 89 c6             \tmov    %rax,%rsi\n    8aac:\t89 df                \tmov    %ebx,%edi\n    8aae:\te8 00 00 00 00       \tcallq  8ab3 <sim_main+0x7f9c>\n    8ab3:\t8b 85 54 fe ff ff    \tmov    -0x1ac(%rbp),%eax\n    8ab9:\t85 c0                \ttest   %eax,%eax\n    8abb:\t78 47                \tjs     8b04 <sim_main+0x7fed>\n    8abd:\t8b 95 54 fe ff ff    \tmov    -0x1ac(%rbp),%edx\n    8ac3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8ac9 <sim_main+0x7fb2>\n    8ac9:\t39 c2                \tcmp    %eax,%edx\n    8acb:\t7e 1e                \tjle    8aeb <sim_main+0x7fd4>\n    8acd:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    8ad2:\tba 48 03 00 00       \tmov    $0x348,%edx\n    8ad7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    8adc:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    8ae1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    8ae6:\te8 00 00 00 00       \tcallq  8aeb <sim_main+0x7fd4>\n    8aeb:\t8b 85 54 fe ff ff    \tmov    -0x1ac(%rbp),%eax\n    8af1:\t89 c2                \tmov    %eax,%edx\n    8af3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8afa <sim_main+0x7fe3>\n    8afa:\t89 d6                \tmov    %edx,%esi\n    8afc:\t48 89 c7             \tmov    %rax,%rdi\n    8aff:\te8 00 00 00 00       \tcallq  8b04 <sim_main+0x7fed>\n    8b04:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8b0a <sim_main+0x7ff3>\n    8b0a:\t85 c0                \ttest   %eax,%eax\n    8b0c:\t74 17                \tje     8b25 <sim_main+0x800e>\n    8b0e:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 8b14 <sim_main+0x7ffd>\n    8b14:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8b1b <sim_main+0x8004>\n    8b1b:\t89 d6                \tmov    %edx,%esi\n    8b1d:\t48 89 c7             \tmov    %rax,%rdi\n    8b20:\te8 00 00 00 00       \tcallq  8b25 <sim_main+0x800e>\n    8b25:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n    8b2c:\te9 0b 01 00 00       \tjmpq   8c3c <sim_main+0x8125>\n    8b31:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    8b34:\t48 98                \tcltq   \n    8b36:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    8b3d:\t00 \n    8b3e:\t8b 40 20             \tmov    0x20(%rax),%eax\n    8b41:\t85 c0                \ttest   %eax,%eax\n    8b43:\t75 17                \tjne    8b5c <sim_main+0x8045>\n    8b45:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    8b48:\t48 98                \tcltq   \n    8b4a:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    8b51:\t00 \n    8b52:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    8b56:\t8b 00                \tmov    (%rax),%eax\n    8b58:\t48 98                \tcltq   \n    8b5a:\teb 75                \tjmp    8bd1 <sim_main+0x80ba>\n    8b5c:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    8b5f:\t48 98                \tcltq   \n    8b61:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    8b68:\t00 \n    8b69:\t8b 40 20             \tmov    0x20(%rax),%eax\n    8b6c:\t83 f8 01             \tcmp    $0x1,%eax\n    8b6f:\t75 17                \tjne    8b88 <sim_main+0x8071>\n    8b71:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    8b74:\t48 98                \tcltq   \n    8b76:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    8b7d:\t00 \n    8b7e:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    8b82:\t8b 00                \tmov    (%rax),%eax\n    8b84:\t89 c0                \tmov    %eax,%eax\n    8b86:\teb 49                \tjmp    8bd1 <sim_main+0x80ba>\n    8b88:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    8b8b:\t48 98                \tcltq   \n    8b8d:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    8b94:\t00 \n    8b95:\t8b 40 20             \tmov    0x20(%rax),%eax\n    8b98:\t83 f8 03             \tcmp    $0x3,%eax\n    8b9b:\t75 16                \tjne    8bb3 <sim_main+0x809c>\n    8b9d:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    8ba0:\t48 98                \tcltq   \n    8ba2:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    8ba9:\t00 \n    8baa:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    8bae:\t48 8b 00             \tmov    (%rax),%rax\n    8bb1:\teb 1e                \tjmp    8bd1 <sim_main+0x80ba>\n    8bb3:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    8bb8:\tba 5d 03 00 00       \tmov    $0x35d,%edx\n    8bbd:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    8bc2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    8bc7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    8bcc:\te8 00 00 00 00       \tcallq  8bd1 <sim_main+0x80ba>\n    8bd1:\t48 89 85 68 fe ff ff \tmov    %rax,-0x198(%rbp)\n    8bd8:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n    8bdf:\t89 c2                \tmov    %eax,%edx\n    8be1:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    8be4:\t48 98                \tcltq   \n    8be6:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    8bed:\t00 \n    8bee:\t29 c2                \tsub    %eax,%edx\n    8bf0:\t89 d0                \tmov    %edx,%eax\n    8bf2:\t89 85 64 fe ff ff    \tmov    %eax,-0x19c(%rbp)\n    8bf8:\t83 bd 64 fe ff ff 00 \tcmpl   $0x0,-0x19c(%rbp)\n    8bff:\t74 37                \tje     8c38 <sim_main+0x8121>\n    8c01:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 8c07 <sim_main+0x80f0>\n    8c07:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    8c0a:\t48 98                \tcltq   \n    8c0c:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    8c13:\t00 \n    8c14:\t8b 95 64 fe ff ff    \tmov    -0x19c(%rbp),%edx\n    8c1a:\t89 ce                \tmov    %ecx,%esi\n    8c1c:\t48 89 c7             \tmov    %rax,%rdi\n    8c1f:\te8 00 00 00 00       \tcallq  8c24 <sim_main+0x810d>\n    8c24:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n    8c27:\t48 98                \tcltq   \n    8c29:\t48 8b 95 68 fe ff ff \tmov    -0x198(%rbp),%rdx\n    8c30:\t48 89 14 c5 00 00 00 \tmov    %rdx,0x0(,%rax,8)\n    8c37:\t00 \n    8c38:\t83 45 dc 01          \taddl   $0x1,-0x24(%rbp)\n    8c3c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8c42 <sim_main+0x812b>\n    8c42:\t39 45 dc             \tcmp    %eax,-0x24(%rbp)\n    8c45:\t0f 8c e6 fe ff ff    \tjl     8b31 <sim_main+0x801a>\n    8c4b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8c51 <sim_main+0x813a>\n    8c51:\t85 c0                \ttest   %eax,%eax\n    8c53:\t75 0a                \tjne    8c5f <sim_main+0x8148>\n    8c55:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8c5b <sim_main+0x8144>\n    8c5b:\t85 c0                \ttest   %eax,%eax\n    8c5d:\t74 61                \tje     8cc0 <sim_main+0x81a9>\n    8c5f:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 8c66 <sim_main+0x814f>\n    8c66:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 8c6d <sim_main+0x8156>\n    8c6d:\t45 85 ed             \ttest   %r13d,%r13d\n    8c70:\t74 07                \tje     8c79 <sim_main+0x8162>\n    8c72:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    8c77:\teb 05                \tjmp    8c7e <sim_main+0x8167>\n    8c79:\tbe 01 00 00 00       \tmov    $0x1,%esi\n    8c7e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8c84 <sim_main+0x816d>\n    8c84:\t49 89 c8             \tmov    %rcx,%r8\n    8c87:\t48 89 d1             \tmov    %rdx,%rcx\n    8c8a:\t89 da                \tmov    %ebx,%edx\n    8c8c:\t89 c7                \tmov    %eax,%edi\n    8c8e:\te8 00 00 00 00       \tcallq  8c93 <sim_main+0x817c>\n    8c93:\t85 c0                \ttest   %eax,%eax\n    8c95:\t74 29                \tje     8cc0 <sim_main+0x81a9>\n    8c97:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # 8c9e <sim_main+0x8187>\n    8c9e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 8ca5 <sim_main+0x818e>\n    8ca5:\t8b 35 00 00 00 00    \tmov    0x0(%rip),%esi        # 8cab <sim_main+0x8194>\n    8cab:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8cb1 <sim_main+0x819a>\n    8cb1:\t49 89 c8             \tmov    %rcx,%r8\n    8cb4:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    8cb9:\t89 c7                \tmov    %eax,%edi\n    8cbb:\te8 00 00 00 00       \tcallq  8cc0 <sim_main+0x81a9>\n    8cc0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8cc6 <sim_main+0x81af>\n    8cc6:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 8ccc <sim_main+0x81b5>\n    8ccc:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8cd2 <sim_main+0x81bb>\n    8cd2:\t83 c0 08             \tadd    $0x8,%eax\n    8cd5:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 8cdb <sim_main+0x81c4>\n    8cdb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8ce1 <sim_main+0x81ca>\n    8ce1:\t85 c0                \ttest   %eax,%eax\n    8ce3:\t0f 84 d1 7e ff ff    \tje     bba <sim_main+0xa3>\n    8ce9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8cef <sim_main+0x81d8>\n    8cef:\t89 c2                \tmov    %eax,%edx\n    8cf1:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8cf8 <sim_main+0x81e1>\n    8cf8:\t48 39 c2             \tcmp    %rax,%rdx\n    8cfb:\t7e 05                \tjle    8d02 <sim_main+0x81eb>\n    8cfd:\te9 b8 7e ff ff       \tjmpq   bba <sim_main+0xa3>\n    8d02:\t90                   \tnop\n    8d03:\t48 81 c4 98 01 00 00 \tadd    $0x198,%rsp\n    8d0a:\t5b                   \tpop    %rbx\n    8d0b:\t41 5c                \tpop    %r12\n    8d0d:\t41 5d                \tpop    %r13\n    8d0f:\t5d                   \tpop    %rbp\n    8d10:\tc3                   \tretq   \n", "code_s": "__int64 sim_main() {\n  bool v0;\n  __int64 v1;\n  int v2;\n  bool v3;\n  __int64 v4;\n  int v5;\n  unsigned int v6;\n  int v7;\n  bool v8;\n  __int64 v9;\n  char v10;\n  bool v11;\n  __int64 v12;\n  unsigned __int8 v13;\n  bool v14;\n  __int64 v15;\n  __int16 v16;\n  bool v17;\n  __int64 v18;\n  unsigned __int16 v19;\n  bool v20;\n  __int64 v21;\n  int v22;\n  bool v23;\n  __int64 v24;\n  int v25;\n  bool v26;\n  __int64 v27;\n  int v28;\n  bool v29;\n  __int64 v30;\n  int v31;\n  bool v32;\n  __int64 v33;\n  int v34;\n  bool v35;\n  __int64 v36;\n  int v37;\n  bool v38;\n  __int64 v39;\n  int v40;\n  bool v41;\n  __int64 v42;\n  unsigned int v43;\n  bool v44;\n  __int64 v45;\n  bool v46;\n  __int64 v47;\n  bool v48;\n  __int64 v49;\n  bool v50;\n  int v51;\n  __int64 v52;\n  bool v53;\n  int v54;\n  __int64 v55;\n  bool v56;\n  int v57;\n  __int64 v58;\n  bool v59;\n  int v60;\n  __int64 v61;\n  bool v62;\n  int v63;\n  __int64 v64;\n  bool v65;\n  int v66;\n  __int64 v67;\n  bool v68;\n  int v69;\n  __int64 v70;\n  bool v71;\n  __int64 v72;\n  int v73;\n  bool v74;\n  __int64 v75;\n  bool v76;\n  __int64 v77;\n  int v78;\n  bool v79;\n  __int64 v80;\n  bool v81;\n  __int64 v82;\n  char v83;\n  bool v84;\n  __int64 v85;\n  unsigned __int8 v86;\n  bool v87;\n  __int64 v88;\n  __int16 v89;\n  bool v90;\n  __int64 v91;\n  unsigned __int16 v92;\n  bool v93;\n  __int64 v94;\n  int v95;\n  bool v96;\n  __int64 v97;\n  int v98;\n  bool v99;\n  __int64 v100;\n  int v101;\n  bool v102;\n  __int64 v103;\n  int v104;\n  bool v105;\n  __int64 v106;\n  int v107;\n  bool v108;\n  __int64 v109;\n  int v110;\n  bool v111;\n  __int64 v112;\n  bool v113;\n  __int64 v114;\n  bool v115;\n  __int64 v116;\n  bool v117;\n  int v118;\n  __int64 v119;\n  bool v120;\n  int v121;\n  __int64 v122;\n  bool v123;\n  int v124;\n  __int64 v125;\n  bool v126;\n  int v127;\n  __int64 v128;\n  bool v129;\n  int v130;\n  __int64 v131;\n  bool v132;\n  int v133;\n  __int64 v134;\n  bool v135;\n  int v136;\n  __int64 v137;\n  bool v138;\n  __int64 v139;\n  int v140;\n  bool v141;\n  int v142;\n  __int64 v143;\n  bool v144;\n  __int64 v145;\n  int v146;\n  bool v147;\n  int v148;\n  __int64 v149;\n  int v150;\n  int v151;\n  float v152;\n  float v153;\n  unsigned int v154;\n  unsigned int v155;\n  __int64 v156;\n  __int64 v157;\n  __int64 result;\n  int v159;\n  int v160;\n  __int64 <span class=\"supfact\">v161</span>;\n  unsigned int v162;\n  __int64 v163;\n  int v164;\n  char v165;\n  int v166;\n  unsigned __int8 v167;\n  int v168;\n  __int16 v169;\n  int v170;\n  unsigned __int16 v171;\n  int v172;\n  int v173;\n  int v174;\n  int v175;\n  int v176;\n  int v177;\n  int v178;\n  int v179;\n  int v180;\n  int v181;\n  int v182;\n  int v183;\n  int v184;\n  int v185;\n  unsigned int v186;\n  int v187;\n  int v188;\n  int v189;\n  char v190;\n  int v191;\n  __int16 v192;\n  int v193;\n  int v194;\n  int v195;\n  int v196;\n  int v197;\n  int v198;\n  int v199;\n  int v200;\n  int v201;\n  int v202;\n  char v203;\n  int v204;\n  unsigned __int8 v205;\n  int v206;\n  __int16 v207;\n  int v208;\n  unsigned __int16 v209;\n  int v210;\n  int v211;\n  int v212;\n  int v213;\n  int v214;\n  int v215;\n  int v216;\n  int v217;\n  int v218;\n  int v219;\n  int v220;\n  int v221;\n  char v222;\n  int v223;\n  __int16 v224;\n  int v225;\n  int v226;\n  int v227;\n  int v228;\n  int v229;\n  int v230;\n  int v231;\n  int v232;\n  int v233;\n  int v234;\n  int v235;\n  int v236;\n  unsigned int v237;\n  unsigned int v238;\n  int v239;\n  int v240;\n  unsigned int v241;\n  int v242;\n  unsigned int v243;\n  unsigned int v244;\n  unsigned int v245;\n  int l;\n  unsigned int k;\n  int j;\n  unsigned int v249;\n  int v250;\n  int i;\n  int v252;\n  int v253;\n  int m;\n  fwrite(String, Number, Number, stderr);\n  dword_8ED0 = dword_8ECC + Number;\n  if ((dlite_check || dlite_active) &&\n      (unsigned int)_check_break((unsigned int)dword_8ECC, Number L, Number L,\n                                 Number L, Number L))\n    dlite_main((unsigned int)(dword_8ECC - Number), (unsigned int)dword_8ECC,\n               sim_num_insn, &regs, mem);\n  while (Number) {\n    LODWORD(regs) = Number;\n    if (*(_QWORD *)(mem +\n                    Number L * (((unsigned int)dword_8ECC >> Number) & Number) +\n                    Number) &&\n        *(_DWORD *)(*(_QWORD *)(mem +\n                                Number L *\n                                    (((unsigned int)dword_8ECC >> Number) &\n                                     Number) +\n                                Number) +\n                    Number L) == (unsigned int)dword_8ECC >> Number) {\n      ++*(_QWORD *)(mem + Number);\n      v0 = *(_QWORD *)(*(_QWORD *)(mem +\n                                   Number L *\n                                       (((unsigned int)dword_8ECC >> Number) &\n                                        Number) +\n                                   Number) +\n                       Number L) != Number L;\n    } else {\n      v0 = mem_translate(mem, (unsigned int)dword_8ECC) != Number;\n    }\n    if (v0) {\n      if (*(_QWORD *)(mem +\n                      Number L *\n                          (((unsigned int)dword_8ECC >> Number) & Number) +\n                      Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem +\n                                  Number L *\n                                      (((unsigned int)dword_8ECC >> Number) &\n                                       Number) +\n                                  Number) +\n                      Number L) == (unsigned int)dword_8ECC >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v1 = *(_QWORD *)(*(_QWORD *)(mem +\n                                     Number L *\n                                         (((unsigned int)dword_8ECC >> Number) &\n                                          Number) +\n                                     Number) +\n                         Number L);\n      } else {\n        v1 = mem_translate(mem, (unsigned int)dword_8ECC);\n      }\n      v2 = *(_DWORD *)((dword_8ECC & Number) + v1);\n    } else {\n      v2 = Number;\n    }\n    LODWORD(<span class=\"supfact\">v161</span>) = v2;\n    if (*(_QWORD *)(mem +\n                    Number L *\n                        (((unsigned int)(dword_8ECC + Number) >> Number) &\n                         Number) +\n                    Number) &&\n        *(_DWORD *)(*(_QWORD *)(mem +\n                                Number L *\n                                    (((unsigned int)(dword_8ECC + Number) >>\n                                      Number) &\n                                     Number) +\n                                Number) +\n                    Number L) ==\n            (unsigned int)(dword_8ECC + Number) >> Number) {\n      ++*(_QWORD *)(mem + Number);\n      v3 = *(_QWORD *)(*(_QWORD *)(mem +\n                                   Number L *\n                                       (((unsigned int)(dword_8ECC + Number) >>\n                                         Number) &\n                                        Number) +\n                                   Number) +\n                       Number L) != Number L;\n    } else {\n      v3 = mem_translate(mem, (unsigned int)(dword_8ECC + Number)) != Number;\n    }\n    if (v3) {\n      if (*(_QWORD *)(mem +\n                      Number L *\n                          (((unsigned int)(dword_8ECC + Number) >> Number) &\n                           Number) +\n                      Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem +\n                                  Number L *\n                                      (((unsigned int)(dword_8ECC + Number) >>\n                                        Number) &\n                                       Number) +\n                                  Number) +\n                      Number L) ==\n              (unsigned int)(dword_8ECC + Number) >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v4 =\n            *(_QWORD *)(*(_QWORD *)(mem +\n                                    Number L *\n                                        (((unsigned int)(dword_8ECC + Number) >>\n                                          Number) &\n                                         Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v4 = mem_translate(mem, (unsigned int)(dword_8ECC + Number));\n      }\n      v5 = *(_DWORD *)((((_WORD)dword_8ECC + Number) & Number) + v4);\n    } else {\n      v5 = Number;\n    }\n    HIDWORD(<span class=\"supfact\">v161</span>) = v5;\n    if (verbose) {\n      myfprintf(stderr, String, sim_num_insn,\n                (const void *)(unsigned int)dword_8ECC);\n      md_print_insn(<span class=\"supfact\">v161</span>, (unsigned int)dword_8ECC, stderr);\n      fputc(Number, stderr);\n    }\n    ++sim_num_insn;\n    v6 = Number;\n    v7 = Number;\n    v242 = Number;\n    v241 = (unsigned __int8)<span class=\"supfact\">v161</span>;\n    switch ((char)<span class=\"supfact\">v161</span>) {\n    case Number:\n    case Number:\n    case Number:\n      break;\n    case Number:\n      dword_8ED0 = dword_8ECC & Number |\n                   (Number * HIDWORD(<span class=\"supfact\">v161</span>)) & Number;\n      break;\n    case Number:\n      dword_8ED0 = dword_8ECC & Number |\n                   (Number * HIDWORD(<span class=\"supfact\">v161</span>)) & Number;\n      dword_8E3C = dword_8ECC + Number;\n      break;\n    case Number:\n      if ((*((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) &\n           Number) != Number)\n        v242 = Number;\n      else\n        dword_8ED0 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)));\n      break;\n    case Number:\n      if ((*((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) &\n           Number) != Number) {\n        v242 = Number;\n      } else {\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) = dword_8ECC + Number;\n        dword_8ED0 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)));\n      }\n      break;\n    case Number:\n      if (*((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) ==\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)))\n        dword_8ED0 =\n            Number * SWORD2(<span class=\"supfact\">v161</span>) + dword_8ECC + Number;\n      break;\n    case Number:\n      if (*((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) !=\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)))\n        dword_8ED0 =\n            Number * SWORD2(<span class=\"supfact\">v161</span>) + dword_8ECC + Number;\n      break;\n    case Number:\n      if (*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) <= Number)\n        dword_8ED0 =\n            Number * SWORD2(<span class=\"supfact\">v161</span>) + dword_8ECC + Number;\n      break;\n    case Number:\n      if (*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) > Number)\n        dword_8ED0 =\n            Number * SWORD2(<span class=\"supfact\">v161</span>) + dword_8ECC + Number;\n      break;\n    case Number:\n      if (*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) < Number)\n        dword_8ED0 =\n            Number * SWORD2(<span class=\"supfact\">v161</span>) + dword_8ECC + Number;\n      break;\n    case Number:\n      if (*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) >= Number)\n        dword_8ED0 =\n            Number * SWORD2(<span class=\"supfact\">v161</span>) + dword_8ECC + Number;\n      break;\n    case Number:\n      if (!dword_8EC8)\n        dword_8ED0 =\n            Number * SWORD2(<span class=\"supfact\">v161</span>) + dword_8ECC + Number;\n      break;\n    case Number:\n      if (dword_8EC8)\n        dword_8ED0 =\n            Number * SWORD2(<span class=\"supfact\">v161</span>) + dword_8ECC + Number;\n      break;\n    case Number:\n      v166 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v8 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v8 = mem_translate(mem, v6) != Number;\n      }\n      if (v8) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v9 = *(_QWORD *)(*(_QWORD *)(mem +\n                                       Number L * ((v6 >> Number) & Number) +\n                                       Number) +\n                           Number L);\n        } else {\n          v9 = mem_translate(mem, v6);\n        }\n        v10 = *(_BYTE *)((v6 & Number) + v9);\n      } else {\n        v10 = Number;\n      }\n      v165 = v10;\n      if (v166)\n        v242 = v166;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v165;\n      break;\n    case Number:\n      v168 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v11 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v11 = mem_translate(mem, v6) != Number;\n      }\n      if (v11) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v12 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v12 = mem_translate(mem, v6);\n        }\n        v13 = *(_BYTE *)((v6 & Number) + v12);\n      } else {\n        v13 = Number;\n      }\n      v167 = v13;\n      if (v168)\n        v242 = v168;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v167;\n      break;\n    case Number:\n      v170 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v14 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v14 = mem_translate(mem, v6) != Number;\n      }\n      if (v14) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v15 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v15 = mem_translate(mem, v6);\n        }\n        v16 = *(_WORD *)((v6 & Number) + v15);\n      } else {\n        v16 = Number;\n      }\n      v169 = v16;\n      if (v170)\n        v242 = v170;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v169;\n      break;\n    case Number:\n      v172 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v17 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v17 = mem_translate(mem, v6) != Number;\n      }\n      if (v17) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v18 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v18 = mem_translate(mem, v6);\n        }\n        v19 = *(_WORD *)((v6 & Number) + v18);\n      } else {\n        v19 = Number;\n      }\n      v171 = v19;\n      if (v172)\n        v242 = v172;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v171;\n      break;\n    case Number:\n      v174 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v20 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v20 = mem_translate(mem, v6) != Number;\n      }\n      if (v20) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v21 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v21 = mem_translate(mem, v6);\n        }\n        v22 = *(_DWORD *)((v6 & Number) + v21);\n      } else {\n        v22 = Number;\n      }\n      v173 = v22;\n      if (v174)\n        v242 = v174;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v173;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v177 = Number;\n        v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n             SWORD2(<span class=\"supfact\">v161</span>);\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v23 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) != Number L;\n        } else {\n          v23 = mem_translate(mem, v6) != Number;\n        }\n        if (v23) {\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v24 = *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L);\n          } else {\n            v24 = mem_translate(mem, v6);\n          }\n          v25 = *(_DWORD *)((v6 & Number) + v24);\n        } else {\n          v25 = Number;\n        }\n        v176 = v25;\n        if (v177) {\n          v242 = v177;\n        } else {\n          v177 = Number;\n          v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n               SWORD2(<span class=\"supfact\">v161</span>) + Number;\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v26 = *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L) != Number L;\n          } else {\n            v26 = mem_translate(mem, v6) != Number;\n          }\n          if (v26) {\n            if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                            Number) &&\n                *(_DWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == v6 >> Number) {\n              ++*(_QWORD *)(mem + Number);\n              v27 =\n                  *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L);\n            } else {\n              v27 = mem_translate(mem, v6);\n            }\n            v28 = *(_DWORD *)((v6 & Number) + v27);\n          } else {\n            v28 = Number;\n          }\n          v175 = v28;\n          if (v177) {\n            v242 = v177;\n          } else {\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v176;\n            *((_DWORD *)&regs + (unsigned int)BYTE6(<span class=\"supfact\">v161</span>) +\n              Number) = v175;\n          }\n        }\n      }\n      break;\n    case Number:\n      v179 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v29 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v29 = mem_translate(mem, v6) != Number;\n      }\n      if (v29) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v30 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v30 = mem_translate(mem, v6);\n        }\n        v31 = *(_DWORD *)((v6 & Number) + v30);\n      } else {\n        v31 = Number;\n      }\n      v178 = v31;\n      if (v179)\n        v242 = v179;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number) = v178;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v182 = Number;\n        v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n             SWORD2(<span class=\"supfact\">v161</span>);\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v32 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) != Number L;\n        } else {\n          v32 = mem_translate(mem, v6) != Number;\n        }\n        if (v32) {\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v33 = *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L);\n          } else {\n            v33 = mem_translate(mem, v6);\n          }\n          v34 = *(_DWORD *)((v6 & Number) + v33);\n        } else {\n          v34 = Number;\n        }\n        v181 = v34;\n        if (v182) {\n          v242 = v182;\n        } else {\n          v182 = Number;\n          v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n               SWORD2(<span class=\"supfact\">v161</span>) + Number;\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v35 = *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L) != Number L;\n          } else {\n            v35 = mem_translate(mem, v6) != Number;\n          }\n          if (v35) {\n            if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                            Number) &&\n                *(_DWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == v6 >> Number) {\n              ++*(_QWORD *)(mem + Number);\n              v36 =\n                  *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L);\n            } else {\n              v36 = mem_translate(mem, v6);\n            }\n            v37 = *(_DWORD *)((v6 & Number) + v36);\n          } else {\n            v37 = Number;\n          }\n          v180 = v37;\n          if (v182) {\n            v242 = v182;\n          } else {\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number) = v181;\n            *((_DWORD *)&regs + (unsigned int)BYTE6(<span class=\"supfact\">v161</span>) +\n              Number) = v180;\n          }\n        }\n      }\n      break;\n    case Number:\n      v185 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)));\n      v184 = Number;\n      v6 = (SWORD2(<span class=\"supfact\">v161</span>) + v185) & Number;\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v38 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v38 = mem_translate(mem, v6) != Number;\n      }\n      if (v38) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v39 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v39 = mem_translate(mem, v6);\n        }\n        v40 = *(_DWORD *)((v6 & Number) + v39);\n      } else {\n        v40 = Number;\n      }\n      v183 = v40;\n      if (v184)\n        v242 = v184;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n            (v183 << (Number *\n                      (~(BYTE4(<span class=\"supfact\">v161</span>) + v185) & Number))) &\n                ~*((_DWORD *)&md_lr_masks +\n                   ((BYTE4(<span class=\"supfact\">v161</span>) + (_BYTE)v185) & Number) +\n                   Number) |\n            *((_DWORD *)&md_lr_masks +\n              ((BYTE4(<span class=\"supfact\">v161</span>) + (_BYTE)v185) & Number) + Number) &\n                *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      v188 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)));\n      v187 = Number;\n      v6 = (SWORD2(<span class=\"supfact\">v161</span>) + v188) & Number;\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v41 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v41 = mem_translate(mem, v6) != Number;\n      }\n      if (v41) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v42 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v42 = mem_translate(mem, v6);\n        }\n        v43 = *(_DWORD *)((v6 & Number) + v42);\n      } else {\n        v43 = Number;\n      }\n      v186 = v43;\n      if (v187)\n        v242 = v187;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n            (v186 >>\n             (Number * ((BYTE4(<span class=\"supfact\">v161</span>) + v188) & Number))) &\n                *((_DWORD *)&md_lr_masks +\n                  ((BYTE4(<span class=\"supfact\">v161</span>) + (_BYTE)v188) & Number)) |\n            ~*((_DWORD *)&md_lr_masks +\n               ((BYTE4(<span class=\"supfact\">v161</span>) + (_BYTE)v188) & Number)) &\n                *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      v190 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      v189 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v44 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v44 = mem_translate(mem, v6) == Number;\n      }\n      if (v44)\n        mem_newpage(mem, v6);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v45 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v45 = mem_translate(mem, v6);\n      }\n      *(_BYTE *)(v45 + (v6 & Number)) = v190;\n      if (v189)\n        v242 = v189;\n      break;\n    case Number:\n      v192 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      v191 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v46 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v46 = mem_translate(mem, v6) == Number;\n      }\n      if (v46)\n        mem_newpage(mem, v6);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v47 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v47 = mem_translate(mem, v6);\n      }\n      *(_WORD *)(v47 + (v6 & Number)) = v192;\n      if (v191)\n        v242 = v191;\n      break;\n    case Number:\n      v194 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      v193 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v48 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v48 = mem_translate(mem, v6) == Number;\n      }\n      if (v48)\n        mem_newpage(mem, v6);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v49 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v49 = mem_translate(mem, v6);\n      }\n      *(_DWORD *)(v49 + (v6 & Number)) = v194;\n      if (v193)\n        v242 = v193;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v195 = Number;\n        v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n             SWORD2(<span class=\"supfact\">v161</span>);\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v50 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == Number L;\n        } else {\n          v50 = mem_translate(mem, v6) == Number;\n        }\n        if (v50)\n          mem_newpage(mem, v6);\n        v51 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v52 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v52 = mem_translate(mem, v6);\n        }\n        *(_DWORD *)((v6 & Number) + v52) = v51;\n        if (v195) {\n          v242 = v195;\n        } else {\n          v195 = Number;\n          v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n               SWORD2(<span class=\"supfact\">v161</span>) + Number;\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v53 = *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L) == Number L;\n          } else {\n            v53 = mem_translate(mem, v6) == Number;\n          }\n          if (v53)\n            mem_newpage(mem, v6);\n          v54 = *((_DWORD *)&regs + (unsigned int)BYTE6(<span class=\"supfact\">v161</span>) +\n                  Number);\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v55 = *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L);\n          } else {\n            v55 = mem_translate(mem, v6);\n          }\n          *(_DWORD *)((v6 & Number) + v55) = v54;\n          if (v195)\n            v242 = v195;\n        }\n      }\n      break;\n    case Number:\n      v196 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v56 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v56 = mem_translate(mem, v6) == Number;\n      }\n      if (v56)\n        mem_newpage(mem, v6);\n      v57 = LODWORD(regs);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v58 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v58 = mem_translate(mem, v6);\n      }\n      *(_DWORD *)((v6 & Number) + v58) = v57;\n      if (v196) {\n        v242 = v196;\n      } else {\n        v196 = Number;\n        v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n             SWORD2(<span class=\"supfact\">v161</span>) + Number;\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v59 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == Number L;\n        } else {\n          v59 = mem_translate(mem, v6) == Number;\n        }\n        if (v59)\n          mem_newpage(mem, v6);\n        v60 = LODWORD(regs);\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v61 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v61 = mem_translate(mem, v6);\n        }\n        *(_DWORD *)((v6 & Number) + v61) = v60;\n        if (v196)\n          v242 = v196;\n      }\n      break;\n    case Number:\n      v197 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           SWORD2(<span class=\"supfact\">v161</span>);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v62 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v62 = mem_translate(mem, v6) == Number;\n      }\n      if (v62)\n        mem_newpage(mem, v6);\n      v63 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v64 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v64 = mem_translate(mem, v6);\n      }\n      *(_DWORD *)((v6 & Number) + v64) = v63;\n      if (v197)\n        v242 = v197;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v198 = Number;\n        v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n             SWORD2(<span class=\"supfact\">v161</span>);\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v65 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == Number L;\n        } else {\n          v65 = mem_translate(mem, v6) == Number;\n        }\n        if (v65)\n          mem_newpage(mem, v6);\n        v66 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number);\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v67 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v67 = mem_translate(mem, v6);\n        }\n        *(_DWORD *)((v6 & Number) + v67) = v66;\n        if (v198) {\n          v242 = v198;\n        } else {\n          v198 = Number;\n          v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n               SWORD2(<span class=\"supfact\">v161</span>) + Number;\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v68 = *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L) == Number L;\n          } else {\n            v68 = mem_translate(mem, v6) == Number;\n          }\n          if (v68)\n            mem_newpage(mem, v6);\n          v69 = *((_DWORD *)&regs + (unsigned int)BYTE6(<span class=\"supfact\">v161</span>) +\n                  Number);\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v70 = *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L);\n          } else {\n            v70 = mem_translate(mem, v6);\n          }\n          *(_DWORD *)((v6 & Number) + v70) = v69;\n          if (v198)\n            v242 = v198;\n        }\n      }\n      break;\n    case Number:\n      v200 = Number;\n      v6 = (*((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n            SWORD2(<span class=\"supfact\">v161</span>)) &\n           Number;\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v71 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v71 = mem_translate(mem, v6) != Number;\n      }\n      if (v71) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v72 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v72 = mem_translate(mem, v6);\n        }\n        v73 = *(_DWORD *)((v6 & Number) + v72);\n      } else {\n        v73 = Number;\n      }\n      v199 = v73;\n      if (v200) {\n        v242 = v200;\n      } else {\n        v199 = *((_DWORD *)&md_lr_masks +\n                 (~((unsigned __int8)*((_DWORD *)&regs +\n                                       HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n                    BYTE4(<span class=\"supfact\">v161</span>)) &\n                  Number)) &\n                   (*((int *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) >>\n                    (Number * (~(*((_DWORD *)&regs +\n                                   HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n                                 BYTE4(<span class=\"supfact\">v161</span>)) &\n                               Number))) |\n               v199 & ~*((_DWORD *)&md_lr_masks +\n                         (~((unsigned __int8)*(\n                                (_DWORD *)&regs +\n                                HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n                            BYTE4(<span class=\"supfact\">v161</span>)) &\n                          Number));\n        v200 = Number;\n        v6 = (*((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n              SWORD2(<span class=\"supfact\">v161</span>)) &\n             Number;\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v74 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == Number L;\n        } else {\n          v74 = mem_translate(mem, v6) == Number;\n        }\n        if (v74)\n          mem_newpage(mem, v6);\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v75 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v75 = mem_translate(mem, v6);\n        }\n        *(_DWORD *)(v75 + (v6 & Number)) = v199;\n        if (v200)\n          v242 = v200;\n      }\n      break;\n    case Number:\n      v202 = Number;\n      v6 = (*((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n            SWORD2(<span class=\"supfact\">v161</span>)) &\n           Number;\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v76 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v76 = mem_translate(mem, v6) != Number;\n      }\n      if (v76) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v77 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v77 = mem_translate(mem, v6);\n        }\n        v78 = *(_DWORD *)((v6 & Number) + v77);\n      } else {\n        v78 = Number;\n      }\n      v201 = v78;\n      if (v202) {\n        v242 = v202;\n      } else {\n        v201 =\n            ~*((_DWORD *)&md_lr_masks + Number -\n               (((unsigned __int8)*((_DWORD *)&regs +\n                                    HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n                 BYTE4(<span class=\"supfact\">v161</span>)) &\n                Number)) &\n                (*((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>))\n                 << (Number * ((*((_DWORD *)&regs +\n                                  HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n                                BYTE4(<span class=\"supfact\">v161</span>)) &\n                               Number))) |\n            v201 &\n                *((_DWORD *)&md_lr_masks + Number -\n                  (((unsigned __int8)*((_DWORD *)&regs +\n                                       HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n                    BYTE4(<span class=\"supfact\">v161</span>)) &\n                   Number));\n        v202 = Number;\n        v6 = (*((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n              SWORD2(<span class=\"supfact\">v161</span>)) &\n             Number;\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v79 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == Number L;\n        } else {\n          v79 = mem_translate(mem, v6) == Number;\n        }\n        if (v79)\n          mem_newpage(mem, v6);\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v80 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v80 = mem_translate(mem, v6);\n        }\n        *(_DWORD *)(v80 + (v6 & Number)) = v201;\n        if (v202)\n          v242 = v202;\n      }\n      break;\n    case Number:\n      v204 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v81 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v81 = mem_translate(mem, v6) != Number;\n      }\n      if (v81) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v82 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v82 = mem_translate(mem, v6);\n        }\n        v83 = *(_BYTE *)((v6 & Number) + v82);\n      } else {\n        v83 = Number;\n      }\n      v203 = v83;\n      if (v204)\n        v242 = v204;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v203;\n      break;\n    case Number:\n      v206 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v84 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v84 = mem_translate(mem, v6) != Number;\n      }\n      if (v84) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v85 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v85 = mem_translate(mem, v6);\n        }\n        v86 = *(_BYTE *)((v6 & Number) + v85);\n      } else {\n        v86 = Number;\n      }\n      v205 = v86;\n      if (v206)\n        v242 = v206;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v205;\n      break;\n    case Number:\n      v208 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v87 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v87 = mem_translate(mem, v6) != Number;\n      }\n      if (v87) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v88 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v88 = mem_translate(mem, v6);\n        }\n        v89 = *(_WORD *)((v6 & Number) + v88);\n      } else {\n        v89 = Number;\n      }\n      v207 = v89;\n      if (v208)\n        v242 = v208;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v207;\n      break;\n    case Number:\n      v210 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v90 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v90 = mem_translate(mem, v6) != Number;\n      }\n      if (v90) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v91 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v91 = mem_translate(mem, v6);\n        }\n        v92 = *(_WORD *)((v6 & Number) + v91);\n      } else {\n        v92 = Number;\n      }\n      v209 = v92;\n      if (v210)\n        v242 = v210;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v209;\n      break;\n    case Number:\n      v212 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v93 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v93 = mem_translate(mem, v6) != Number;\n      }\n      if (v93) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v94 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n        } else {\n          v94 = mem_translate(mem, v6);\n        }\n        v95 = *(_DWORD *)((v6 & Number) + v94);\n      } else {\n        v95 = Number;\n      }\n      v211 = v95;\n      if (v212)\n        v242 = v212;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v211;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v215 = Number;\n        v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n             *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v96 = *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) != Number L;\n        } else {\n          v96 = mem_translate(mem, v6) != Number;\n        }\n        if (v96) {\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v97 = *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L);\n          } else {\n            v97 = mem_translate(mem, v6);\n          }\n          v98 = *(_DWORD *)((v6 & Number) + v97);\n        } else {\n          v98 = Number;\n        }\n        v214 = v98;\n        if (v215) {\n          v242 = v215;\n        } else {\n          v215 = Number;\n          v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n               *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) + Number;\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v99 = *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L) != Number L;\n          } else {\n            v99 = mem_translate(mem, v6) != Number;\n          }\n          if (v99) {\n            if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                            Number) &&\n                *(_DWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == v6 >> Number) {\n              ++*(_QWORD *)(mem + Number);\n              v100 =\n                  *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L);\n            } else {\n              v100 = mem_translate(mem, v6);\n            }\n            v101 = *(_DWORD *)((v6 & Number) + v100);\n          } else {\n            v101 = Number;\n          }\n          v213 = v101;\n          if (v215) {\n            v242 = v215;\n          } else {\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v214;\n            *((_DWORD *)&regs + (unsigned int)BYTE6(<span class=\"supfact\">v161</span>) +\n              Number) = v213;\n          }\n        }\n      }\n      break;\n    case Number:\n      v217 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v102 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v102 = mem_translate(mem, v6) != Number;\n      }\n      if (v102) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v103 = *(_QWORD *)(*(_QWORD *)(mem +\n                                         Number L * ((v6 >> Number) & Number) +\n                                         Number) +\n                             Number L);\n        } else {\n          v103 = mem_translate(mem, v6);\n        }\n        v104 = *(_DWORD *)((v6 & Number) + v103);\n      } else {\n        v104 = Number;\n      }\n      v216 = v104;\n      if (v217)\n        v242 = v217;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number) = v216;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v220 = Number;\n        v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n             *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v105 = *(_QWORD *)(*(_QWORD *)(mem +\n                                         Number L * ((v6 >> Number) & Number) +\n                                         Number) +\n                             Number L) != Number L;\n        } else {\n          v105 = mem_translate(mem, v6) != Number;\n        }\n        if (v105) {\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v106 =\n                *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n          } else {\n            v106 = mem_translate(mem, v6);\n          }\n          v107 = *(_DWORD *)((v6 & Number) + v106);\n        } else {\n          v107 = Number;\n        }\n        v219 = v107;\n        if (v220) {\n          v242 = v220;\n        } else {\n          v220 = Number;\n          v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n               *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) + Number;\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v108 =\n                *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) != Number L;\n          } else {\n            v108 = mem_translate(mem, v6) != Number;\n          }\n          if (v108) {\n            if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                            Number) &&\n                *(_DWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == v6 >> Number) {\n              ++*(_QWORD *)(mem + Number);\n              v109 =\n                  *(_QWORD *)(*(_QWORD *)(mem +\n                                          Number L * ((v6 >> Number) & Number) +\n                                          Number) +\n                              Number L);\n            } else {\n              v109 = mem_translate(mem, v6);\n            }\n            v110 = *(_DWORD *)((v6 & Number) + v109);\n          } else {\n            v110 = Number;\n          }\n          v218 = v110;\n          if (v220) {\n            v242 = v220;\n          } else {\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number) = v219;\n            *((_DWORD *)&regs + (unsigned int)BYTE6(<span class=\"supfact\">v161</span>) +\n              Number) = v218;\n          }\n        }\n      }\n      break;\n    case Number:\n      v222 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      v221 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v111 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v111 = mem_translate(mem, v6) == Number;\n      }\n      if (v111)\n        mem_newpage(mem, v6);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v112 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v112 = mem_translate(mem, v6);\n      }\n      *(_BYTE *)(v112 + (v6 & Number)) = v222;\n      if (v221)\n        v242 = v221;\n      break;\n    case Number:\n      v224 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      v223 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v113 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v113 = mem_translate(mem, v6) == Number;\n      }\n      if (v113)\n        mem_newpage(mem, v6);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v114 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v114 = mem_translate(mem, v6);\n      }\n      *(_WORD *)(v114 + (v6 & Number)) = v224;\n      if (v223)\n        v242 = v223;\n      break;\n    case Number:\n      v226 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      v225 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v115 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v115 = mem_translate(mem, v6) == Number;\n      }\n      if (v115)\n        mem_newpage(mem, v6);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v116 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v116 = mem_translate(mem, v6);\n      }\n      *(_DWORD *)(v116 + (v6 & Number)) = v226;\n      if (v225)\n        v242 = v225;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v227 = Number;\n        v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n             *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v117 = *(_QWORD *)(*(_QWORD *)(mem +\n                                         Number L * ((v6 >> Number) & Number) +\n                                         Number) +\n                             Number L) == Number L;\n        } else {\n          v117 = mem_translate(mem, v6) == Number;\n        }\n        if (v117)\n          mem_newpage(mem, v6);\n        v118 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v119 = *(_QWORD *)(*(_QWORD *)(mem +\n                                         Number L * ((v6 >> Number) & Number) +\n                                         Number) +\n                             Number L);\n        } else {\n          v119 = mem_translate(mem, v6);\n        }\n        *(_DWORD *)((v6 & Number) + v119) = v118;\n        if (v227) {\n          v242 = v227;\n        } else {\n          v227 = Number;\n          v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n               *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) + Number;\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v120 =\n                *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == Number L;\n          } else {\n            v120 = mem_translate(mem, v6) == Number;\n          }\n          if (v120)\n            mem_newpage(mem, v6);\n          v121 = *((_DWORD *)&regs + (unsigned int)BYTE6(<span class=\"supfact\">v161</span>) +\n                   Number);\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v122 =\n                *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n          } else {\n            v122 = mem_translate(mem, v6);\n          }\n          *(_DWORD *)((v6 & Number) + v122) = v121;\n          if (v227)\n            v242 = v227;\n        }\n      }\n      break;\n    case Number:\n      v228 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v123 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v123 = mem_translate(mem, v6) == Number;\n      }\n      if (v123)\n        mem_newpage(mem, v6);\n      v124 = LODWORD(regs);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v125 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v125 = mem_translate(mem, v6);\n      }\n      *(_DWORD *)((v6 & Number) + v125) = v124;\n      if (v228) {\n        v242 = v228;\n      } else {\n        v228 = Number;\n        v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n             *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) + Number;\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v126 = *(_QWORD *)(*(_QWORD *)(mem +\n                                         Number L * ((v6 >> Number) & Number) +\n                                         Number) +\n                             Number L) == Number L;\n        } else {\n          v126 = mem_translate(mem, v6) == Number;\n        }\n        if (v126)\n          mem_newpage(mem, v6);\n        v127 = LODWORD(regs);\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v128 = *(_QWORD *)(*(_QWORD *)(mem +\n                                         Number L * ((v6 >> Number) & Number) +\n                                         Number) +\n                             Number L);\n        } else {\n          v128 = mem_translate(mem, v6);\n        }\n        *(_DWORD *)((v6 & Number) + v128) = v127;\n        if (v228)\n          v242 = v228;\n      }\n      break;\n    case Number:\n      v229 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v129 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v129 = mem_translate(mem, v6) == Number;\n      }\n      if (v129)\n        mem_newpage(mem, v6);\n      v130 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v131 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v131 = mem_translate(mem, v6);\n      }\n      *(_DWORD *)((v6 & Number) + v131) = v130;\n      if (v229)\n        v242 = v229;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v230 = Number;\n        v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n             *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>));\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v132 = *(_QWORD *)(*(_QWORD *)(mem +\n                                         Number L * ((v6 >> Number) & Number) +\n                                         Number) +\n                             Number L) == Number L;\n        } else {\n          v132 = mem_translate(mem, v6) == Number;\n        }\n        if (v132)\n          mem_newpage(mem, v6);\n        v133 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number);\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v134 = *(_QWORD *)(*(_QWORD *)(mem +\n                                         Number L * ((v6 >> Number) & Number) +\n                                         Number) +\n                             Number L);\n        } else {\n          v134 = mem_translate(mem, v6);\n        }\n        *(_DWORD *)((v6 & Number) + v134) = v133;\n        if (v230) {\n          v242 = v230;\n        } else {\n          v230 = Number;\n          v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n               *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) + Number;\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v135 =\n                *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L) == Number L;\n          } else {\n            v135 = mem_translate(mem, v6) == Number;\n          }\n          if (v135)\n            mem_newpage(mem, v6);\n          v136 = *((_DWORD *)&regs + (unsigned int)BYTE6(<span class=\"supfact\">v161</span>) +\n                   Number);\n          if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                          Number) &&\n              *(_DWORD *)(*(_QWORD *)(mem +\n                                      Number L * ((v6 >> Number) & Number) +\n                                      Number) +\n                          Number L) == v6 >> Number) {\n            ++*(_QWORD *)(mem + Number);\n            v137 =\n                *(_QWORD *)(*(_QWORD *)(mem +\n                                        Number L * ((v6 >> Number) & Number) +\n                                        Number) +\n                            Number L);\n          } else {\n            v137 = mem_translate(mem, v6);\n          }\n          *(_DWORD *)((v6 & Number) + v137) = v136;\n          if (v230)\n            v242 = v230;\n        }\n      }\n      break;\n    case Number:\n      v232 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) + Number;\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v138 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v138 = mem_translate(mem, v6) != Number;\n      }\n      if (v138) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v139 = *(_QWORD *)(*(_QWORD *)(mem +\n                                         Number L * ((v6 >> Number) & Number) +\n                                         Number) +\n                             Number L);\n        } else {\n          v139 = mem_translate(mem, v6);\n        }\n        v140 = *(_DWORD *)((v6 & Number) + v139);\n      } else {\n        v140 = Number;\n      }\n      v231 = v140;\n      if (v232)\n        v242 = v232;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number) = v231;\n      break;\n    case Number:\n      v233 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) + Number;\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v141 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v141 = mem_translate(mem, v6) == Number;\n      }\n      if (v141)\n        mem_newpage(mem, v6);\n      v142 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number);\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v143 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v143 = mem_translate(mem, v6);\n      }\n      *(_DWORD *)((v6 & Number) + v143) = v142;\n      if (v233)\n        v242 = v233;\n      break;\n    case Number:\n      v235 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) + Number;\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v144 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) != Number L;\n      } else {\n        v144 = mem_translate(mem, v6) != Number;\n      }\n      if (v144) {\n        if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n            *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == v6 >> Number) {\n          ++*(_QWORD *)(mem + Number);\n          v145 = *(_QWORD *)(*(_QWORD *)(mem +\n                                         Number L * ((v6 >> Number) & Number) +\n                                         Number) +\n                             Number L);\n        } else {\n          v145 = mem_translate(mem, v6);\n        }\n        v146 = *(_DWORD *)((v6 & Number) + v145);\n      } else {\n        v146 = Number;\n      }\n      v234 = v146;\n      if (v235)\n        v242 = v235;\n      else\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) = v234;\n      break;\n    case Number:\n      v236 = Number;\n      v6 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n           *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) + Number;\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v147 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L) == Number L;\n      } else {\n        v147 = mem_translate(mem, v6) == Number;\n      }\n      if (v147)\n        mem_newpage(mem, v6);\n      v148 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      if (*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) + Number) &&\n          *(_DWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                  Number) +\n                      Number L) == v6 >> Number) {\n        ++*(_QWORD *)(mem + Number);\n        v149 =\n            *(_QWORD *)(*(_QWORD *)(mem + Number L * ((v6 >> Number) & Number) +\n                                    Number) +\n                        Number L);\n      } else {\n        v149 = mem_translate(mem, v6);\n      }\n      *(_DWORD *)((v6 & Number) + v149) = v148;\n      if (v236)\n        v242 = v236;\n      break;\n    case Number:\n      if ((*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) <= Number ||\n           *((int *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) <= Number ||\n           Number -\n                   *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) >=\n               *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>))) &&\n          (*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) >= Number ||\n           *((int *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) >= Number ||\n           Number -\n                   *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) <=\n               *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)))) {\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n            *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      } else {\n        v242 = Number;\n      }\n      break;\n    case Number:\n      if ((*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) <= Number ||\n           SWORD2(<span class=\"supfact\">v161</span>) <= Number ||\n           Number -\n                   *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) >=\n               SWORD2(<span class=\"supfact\">v161</span>)) &&\n          (*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) >= Number ||\n           (<span class=\"supfact\">v161</span> & Number) == Number ||\n           Number -\n                   *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) <=\n               SWORD2(<span class=\"supfact\">v161</span>))) {\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n            *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n            SWORD2(<span class=\"supfact\">v161</span>);\n      } else {\n        v242 = Number;\n      }\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) +\n          SWORD2(<span class=\"supfact\">v161</span>);\n      break;\n    case Number:\n      if ((*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) <= Number ||\n           *((int *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) >= Number ||\n           *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) + Number >=\n               *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)))) &&\n          (*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) >= Number ||\n           *((int *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) <= Number ||\n           *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) - Number <=\n               *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))))) {\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n            *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) -\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      } else {\n        v242 = Number;\n      }\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) -\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      v252 = Number;\n      v253 = Number;\n      dword_8EC0 = Number;\n      dword_8EC4 = Number;\n      v250 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)));\n      v249 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      if (v250 < Number) {\n        v253 = Number;\n        v250 = -v250;\n      }\n      if ((v249 & Number) != Number) {\n        v252 = Number;\n        v249 = -v249;\n      }\n      if (v250 < Number)\n        dword_8EC4 = v249;\n      for (i = Number; i <= Number; ++i) {\n        dword_8EC0 *= Number;\n        v150 = dword_8EC0;\n        dword_8EC0 =\n            v150 + extractl((unsigned int)dword_8EC4, Number L, Number L);\n        dword_8EC4 *= Number;\n        if ((unsigned int)extractl((unsigned int)v250,\n                                   (unsigned int)(Number - i),\n                                   Number L) == Number) {\n          if (~dword_8EC4 < v249)\n            ++dword_8EC0;\n          dword_8EC4 += v249;\n        }\n      }\n      if (v253 != v252) {\n        dword_8EC4 = ~dword_8EC4;\n        dword_8EC0 = ~dword_8EC0;\n        if (dword_8EC4 == Number)\n          ++dword_8EC0;\n        ++dword_8EC4;\n      }\n      break;\n    case Number:\n      dword_8EC0 = Number;\n      dword_8EC4 = Number;\n      if (*((int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) < Number)\n        dword_8EC4 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      for (j = Number; j <= Number; ++j) {\n        dword_8EC0 *= Number;\n        v151 = dword_8EC0;\n        dword_8EC0 =\n            v151 + extractl((unsigned int)dword_8EC4, Number L, Number L);\n        dword_8EC4 *= Number;\n        if ((unsigned int)extractl(*((unsigned int *)&regs +\n                                     HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))),\n                                   (unsigned int)(Number - j),\n                                   Number L) == Number) {\n          if ((unsigned int)~dword_8EC4 <\n              *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)))\n            ++dword_8EC0;\n          dword_8EC4 += *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n        }\n      }\n      break;\n    case Number:\n      if (*((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>))) {\n        dword_8EC4 =\n            *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) /\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n        dword_8EC0 =\n            *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) %\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      } else {\n        v242 = Number;\n      }\n      break;\n    case Number:\n      if (*((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>))) {\n        dword_8EC4 =\n            *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) /\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n        dword_8EC0 =\n            *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) %\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      } else {\n        v242 = Number;\n      }\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) = dword_8EC0;\n      break;\n    case Number:\n      dword_8EC0 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) = dword_8EC4;\n      break;\n    case Number:\n      dword_8EC4 = *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) &\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n          (unsigned __int16)(*((_WORD *)&regs +\n                               Number * HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) &\n                             WORD2(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) |\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n          WORD2(<span class=\"supfact\">v161</span>) |\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) ^\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n          WORD2(<span class=\"supfact\">v161</span>) ^\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n          ~(*((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) |\n            *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>))\n          << SBYTE4(<span class=\"supfact\">v161</span>);\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>))\n          << (*((_BYTE *)&regs +\n                Number * HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) &\n              Number);\n      break;\n    case Number:\n      if (BYTE4(<span class=\"supfact\">v161</span>)) {\n        v237 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) >> Number;\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n            v237 >> (BYTE4(<span class=\"supfact\">v161</span>) - Number);\n      } else {\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      }\n      break;\n    case Number:\n      v239 =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) & Number;\n      if (v239) {\n        v238 = *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) >> Number;\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n            v238 >> (v239 - Number);\n      } else {\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      }\n      break;\n    case Number:\n      if (*((int *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) >= Number) {\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n            *((int *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) >>\n            SBYTE4(<span class=\"supfact\">v161</span>);\n      } else {\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n        for (k = Number; BYTE4(<span class=\"supfact\">v161</span>) > k; ++k)\n          *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n              (*((int *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) >> Number) |\n              Number;\n      }\n      break;\n    case Number:\n      v240 =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) & Number;\n      if (*((int *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) >= Number) {\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n            *((int *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) >> v240;\n      } else {\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n        for (l = Number; l < v240; ++l)\n          *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n              (*((int *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) >> Number) |\n              Number;\n      }\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) <\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) <\n          SWORD2(<span class=\"supfact\">v161</span>);\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) <\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) <\n          (unsigned int)SWORD2(<span class=\"supfact\">v161</span>);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *((float *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) =\n            *((float *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number) +\n            *((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *(&regs + (WORD2(<span class=\"supfact\">v161</span>) >> Number) + Number) =\n            *(&regs + ((HIDWORD(<span class=\"supfact\">v161</span>) >> Number) & Number) +\n              Number) +\n            *(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *((float *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) =\n            *((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number) -\n            *((float *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *(&regs + (WORD2(<span class=\"supfact\">v161</span>) >> Number) + Number) =\n            *(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number) -\n            *(&regs + ((HIDWORD(<span class=\"supfact\">v161</span>) >> Number) & Number) +\n              Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *((float *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) =\n            *((float *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number) *\n            *((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *(&regs + (WORD2(<span class=\"supfact\">v161</span>) >> Number) + Number) =\n            *(&regs + ((HIDWORD(<span class=\"supfact\">v161</span>) >> Number) & Number) +\n              Number) *\n            *(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *((float *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) =\n            *((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number) /\n            *((float *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *(&regs + (WORD2(<span class=\"supfact\">v161</span>) >> Number) + Number) =\n            *(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number) /\n            *(&regs + ((HIDWORD(<span class=\"supfact\">v161</span>) >> Number) & Number) +\n              Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *((float *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) = fabs(\n            *((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number));\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *(&regs + (WORD2(<span class=\"supfact\">v161</span>) >> Number) + Number) =\n            fabs(*(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number));\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) =\n            *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *(&regs + (WORD2(<span class=\"supfact\">v161</span>) >> Number) + Number) =\n            *(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *((float *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) =\n            -*((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *(&regs + (WORD2(<span class=\"supfact\">v161</span>) >> Number) + Number) =\n            -*(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v152 = *(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number);\n        *((float *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) = v152;\n      }\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *((float *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) = (float)*(\n            (int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *(&regs + (WORD2(<span class=\"supfact\">v161</span>) >> Number) + Number) =\n            *((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *(&regs + (WORD2(<span class=\"supfact\">v161</span>) >> Number) + Number) = (double)*(\n            (int *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) = (int)*(\n            (float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        *((_DWORD *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) =\n            (int)*(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        dword_8EC8 = *((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) +\n                       Number) ==\n                     *((float *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        dword_8EC8 =\n            *(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number) ==\n            *(&regs + ((HIDWORD(<span class=\"supfact\">v161</span>) >> Number) & Number) +\n              Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        dword_8EC8 =\n            *((float *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number) >\n            *((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        dword_8EC8 =\n            *(&regs + ((HIDWORD(<span class=\"supfact\">v161</span>) >> Number) & Number) +\n              Number) >\n            *(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        dword_8EC8 =\n            *((float *)&regs + BYTE6(<span class=\"supfact\">v161</span>) + Number) >=\n            *((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number)\n        v242 = Number;\n      else\n        dword_8EC8 =\n            *(&regs + ((HIDWORD(<span class=\"supfact\">v161</span>) >> Number) & Number) +\n              Number) >=\n            *(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v153 = sqrt(\n            *((float *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number));\n        *((float *)&regs + BYTE5(<span class=\"supfact\">v161</span>) + Number) = v153;\n      }\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        v154 = WORD2(<span class=\"supfact\">v161</span>) >> Number;\n        *(&regs + v154 + Number) =\n            sqrt(*(&regs + (HIDWORD(<span class=\"supfact\">v161</span>) >> Number) + Number));\n      }\n      break;\n    case Number:\n      sys_syscall(&regs, &mem_access, mem, <span class=\"supfact\">v161</span>, Number L);\n      break;\n    case Number:\n      v242 = Number;\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n          HIDWORD(<span class=\"supfact\">v161</span>) << Number;\n      break;\n    case Number:\n      *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n          *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>)) =\n            *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number);\n        *((_DWORD *)&regs + (unsigned int)BYTE6(<span class=\"supfact\">v161</span>) +\n          Number) =\n            *((_DWORD *)&regs +\n              (unsigned int)(HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number) +\n              Number);\n      }\n      break;\n    case Number:\n      *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number) =\n          *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n      break;\n    case Number:\n      if ((<span class=\"supfact\">v161</span> & Number) != Number ||\n          (<span class=\"supfact\">v161</span> & Number) != Number) {\n        v242 = Number;\n      } else {\n        *((_DWORD *)&regs + HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number) =\n            *((_DWORD *)&regs + BYTE6(<span class=\"supfact\">v161</span>));\n        *((_DWORD *)&regs +\n          (unsigned int)(HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) + Number) +\n          Number) = *((_DWORD *)&regs +\n                      (unsigned int)BYTE6(<span class=\"supfact\">v161</span>) + Number);\n      }\n      break;\n    default:\n      panic(String, String, Number L, String);\n      break;\n    }\n    if ((*((_DWORD *)&md_op2flags + v241) & Number) != Number) {\n      ++sim_num_refs;\n      if ((*((_DWORD *)&md_op2flags + v241) & Number) != Number)\n        v7 = Number;\n    }\n    v164 = *((_DWORD *)&md_op2flags + v241);\n    if (prof_ic) {\n      if ((v164 & Number) != Number) {\n        v245 = Number;\n      } else if ((v164 & Number) != Number) {\n        v245 = Number;\n      } else if ((v164 & Number) != Number) {\n        v245 = Number;\n      } else if ((v164 & Number) != Number) {\n        v245 = Number;\n      } else if ((v164 & Number) != Number) {\n        v245 = Number;\n      } else if ((v164 & Number) != Number) {\n        v245 = Number;\n      } else if ((v164 & Number) != Number) {\n        v245 = Number;\n      } else {\n        panic(String, String, Number L, String);\n      }\n      stat_add_sample(ic_prof, v245);\n    }\n    if (prof_inst)\n      stat_add_sample(inst_prof, v241 - Number);\n    if (prof_bc && (v164 & Number) != Number) {\n      if ((v164 & Number) == Number) {\n        v244 = Number;\n      } else if ((v164 & Number) == Number) {\n        v244 = Number;\n      } else if ((v164 & Number) == Number) {\n        v244 = Number;\n      } else if ((v164 & Number) == Number) {\n        v244 = Number;\n      } else if ((v164 & Number) == Number) {\n        v244 = Number;\n      } else if ((v164 & Number) == Number) {\n        v244 = Number;\n      } else {\n        panic(String, String, Number L, String);\n      }\n      stat_add_sample(bc_prof, v244);\n    }\n    if (prof_am) {\n      if (v241 == Number)\n        fsm = BYTE6(<span class=\"supfact\">v161</span>);\n      if ((v164 & Number) != Number) {\n        if ((*((_DWORD *)&md_op2flags + v241) & Number) != Number) {\n          if (HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>)) == fsm) {\n            v243 = Number;\n          } else {\n            switch (HIBYTE(HIDWORD(<span class=\"supfact\">v161</span>))) {\n            case Number:\n              v243 = Number;\n              break;\n            case Number:\n              v243 = Number;\n              break;\n            case Number:\n              v243 = Number;\n              break;\n            default:\n              v243 = Number;\n              break;\n            }\n          }\n        } else if ((*((_DWORD *)&md_op2flags + v241) & Number) != Number) {\n          v243 = Number;\n        } else {\n          panic(String, String, Number L, String);\n        }\n        stat_add_sample(am_prof, v243);\n        fsm = Number;\n      }\n    }\n    if (prof_seg && (v164 & Number) != Number) {\n      v155 = bind_to_seg(v6);\n      stat_add_sample(seg_prof, v155);\n    }\n    if (prof_tsyms) {\n      sym_bind_addr((unsigned int)dword_8ECC, &v160, Number L, Number L);\n      if (v160 >= Number) {\n        if (v160 > sym_ntextsyms)\n          panic(String, String, Number L, String);\n        stat_add_sample(tsym_prof, (unsigned int)v160);\n      }\n    }\n    if (prof_dsyms) {\n      if ((v164 & Number) != Number) {\n        sym_bind_addr(v6, &v159, Number L, Number L);\n        if (v159 >= Number) {\n          if (v159 > sym_ndatasyms)\n            panic(String, String, Number L, String);\n          stat_add_sample(dsym_prof, (unsigned int)v159);\n        }\n      }\n    }\n    if (prof_taddr)\n      stat_add_sample(taddr_prof, (unsigned int)dword_8ECC);\n    for (m = Number; m < pcstat_nelt; ++m) {\n      if (*(_DWORD *)(pcstat_stats[m] + Number)) {\n        if (*(_DWORD *)(pcstat_stats[m] + Number) == Number) {\n          v156 = **(unsigned int **)(pcstat_stats[m] + Number);\n        } else if (*(_DWORD *)(pcstat_stats[m] + Number) == Number) {\n          v156 = **(_QWORD **)(pcstat_stats[m] + Number);\n        } else {\n          v156 = panic(String, String, Number L, String);\n        }\n      } else {\n        v156 = **(int **)(pcstat_stats[m] + Number);\n      }\n      v163 = v156;\n      v162 = v156 - pcstat_lastvals[m];\n      if (v162) {\n        stat_add_samples(pcstat_sdists[m], (unsigned int)dword_8ECC, v162);\n        pcstat_lastvals[m] = v163;\n      }\n    }\n    if (dlite_check || dlite_active) {\n      if (v7)\n        v157 = Number L;\n      else\n        v157 = Number L;\n      if ((unsigned int)_check_break((unsigned int)dword_8ED0, v157, v6,\n                                     sim_num_insn, sim_num_insn))\n        dlite_main((unsigned int)dword_8ECC, (unsigned int)dword_8ED0,\n                   sim_num_insn, &regs, mem);\n    }\n    dword_8ECC = dword_8ED0;\n    dword_8ED0 += Number;\n    if (max_insts) {\n      result = sim_num_insn;\n      if ((unsigned int)max_insts <= sim_num_insn)\n        return result;\n    }\n  }\n}", "code_t": "void __cdecl sim_main() {\n  bool v0;\n  byte_t *v1;\n  word_t v2;\n  bool v3;\n  byte_t *v4;\n  word_t v5;\n  unsigned int v6;\n  int v7;\n  bool v8;\n  byte_t *v9;\n  sbyte_t v10;\n  bool v11;\n  byte_t *v12;\n  byte_t v13;\n  bool v14;\n  byte_t *v15;\n  shalf_t v16;\n  bool v17;\n  byte_t *v18;\n  half_t v19;\n  bool v20;\n  byte_t *v21;\n  word_t v22;\n  bool v23;\n  byte_t *v24;\n  word_t v25;\n  bool v26;\n  byte_t *v27;\n  word_t v28;\n  bool v29;\n  byte_t *v30;\n  word_t v31;\n  bool v32;\n  byte_t *v33;\n  word_t v34;\n  bool v35;\n  byte_t *v36;\n  word_t v37;\n  bool v38;\n  byte_t *v39;\n  word_t v40;\n  bool v41;\n  byte_t *v42;\n  word_t v43;\n  bool v44;\n  byte_t *v45;\n  bool v46;\n  byte_t *v47;\n  bool v48;\n  byte_t *v49;\n  bool v50;\n  sword_t v51;\n  byte_t *v52;\n  bool v53;\n  sword_t v54;\n  byte_t *v55;\n  bool v56;\n  sword_t v57;\n  byte_t *v58;\n  bool v59;\n  sword_t v60;\n  byte_t *v61;\n  bool v62;\n  sword_t v63;\n  byte_t *v64;\n  bool v65;\n  sword_t v66;\n  byte_t *v67;\n  bool v68;\n  sword_t v69;\n  byte_t *v70;\n  bool v71;\n  byte_t *v72;\n  word_t v73;\n  bool v74;\n  byte_t *v75;\n  bool v76;\n  byte_t *v77;\n  word_t v78;\n  bool v79;\n  byte_t *v80;\n  bool v81;\n  byte_t *v82;\n  sbyte_t v83;\n  bool v84;\n  byte_t *v85;\n  byte_t v86;\n  bool v87;\n  byte_t *v88;\n  shalf_t v89;\n  bool v90;\n  byte_t *v91;\n  half_t v92;\n  bool v93;\n  byte_t *v94;\n  word_t v95;\n  bool v96;\n  byte_t *v97;\n  word_t v98;\n  bool v99;\n  byte_t *v100;\n  word_t v101;\n  bool v102;\n  byte_t *v103;\n  word_t v104;\n  bool v105;\n  byte_t *v106;\n  word_t v107;\n  bool v108;\n  byte_t *v109;\n  word_t v110;\n  bool v111;\n  byte_t *v112;\n  bool v113;\n  byte_t *v114;\n  bool v115;\n  byte_t *v116;\n  bool v117;\n  sword_t v118;\n  byte_t *v119;\n  bool v120;\n  sword_t v121;\n  byte_t *v122;\n  bool v123;\n  sword_t v124;\n  byte_t *v125;\n  bool v126;\n  sword_t v127;\n  byte_t *v128;\n  bool v129;\n  sword_t v130;\n  byte_t *v131;\n  bool v132;\n  sword_t v133;\n  byte_t *v134;\n  bool v135;\n  sword_t v136;\n  byte_t *v137;\n  bool v138;\n  byte_t *v139;\n  word_t v140;\n  bool v141;\n  sword_t v142;\n  byte_t *v143;\n  bool v144;\n  byte_t *v145;\n  word_t v146;\n  bool v147;\n  sword_t v148;\n  byte_t *v149;\n  sword_t v150;\n  sword_t v151;\n  sfloat_t v152;\n  sfloat_t v153;\n  int v154;\n  addr_seg_t v155;\n  counter_t v156;\n  __int64 v157;\n  int dindex;\n  int tindex;\n  md_inst_t <span class=\"supfact\">inst</span>;\n  int delta;\n  counter_t newval;\n  unsigned int flags;\n  sbyte_t _result;\n  md_fault_type _fault;\n  byte_t _result_0;\n  md_fault_type _fault_0;\n  shalf_t _result_1;\n  md_fault_type _fault_1;\n  half_t _result_2;\n  md_fault_type _fault_2;\n  word_t _result_3;\n  md_fault_type _fault_3;\n  word_t _result_lo;\n  word_t _result_hi;\n  md_fault_type _fault_4;\n  word_t _result_4;\n  md_fault_type _fault_5;\n  word_t _result_lo_0;\n  word_t _result_hi_0;\n  md_fault_type _fault_6;\n  word_t _lr_temp;\n  md_fault_type _fault_7;\n  md_addr_t _temp_bs;\n  word_t _lr_temp_0;\n  md_fault_type _fault_8;\n  md_addr_t _temp_bs_0;\n  md_fault_type _fault_9;\n  byte_t _src;\n  md_fault_type _fault_10;\n  half_t _src_0;\n  md_fault_type _fault_11;\n  word_t _src_1;\n  md_fault_type _fault_12;\n  md_fault_type _fault_13;\n  md_fault_type _fault_14;\n  md_fault_type _fault_15;\n  word_t _lr_temp_1;\n  md_fault_type _fault_16;\n  word_t _lr_temp_2;\n  md_fault_type _fault_17;\n  sbyte_t _result_5;\n  md_fault_type _fault_18;\n  byte_t _result_6;\n  md_fault_type _fault_19;\n  shalf_t _result_7;\n  md_fault_type _fault_20;\n  half_t _result_8;\n  md_fault_type _fault_21;\n  word_t _result_9;\n  md_fault_type _fault_22;\n  word_t _result_lo_1;\n  word_t _result_hi_1;\n  md_fault_type _fault_23;\n  word_t _result_10;\n  md_fault_type _fault_24;\n  word_t _result_lo_2;\n  word_t _result_hi_2;\n  md_fault_type _fault_25;\n  md_fault_type _fault_26;\n  byte_t _src_2;\n  md_fault_type _fault_27;\n  half_t _src_3;\n  md_fault_type _fault_28;\n  word_t _src_4;\n  md_fault_type _fault_29;\n  md_fault_type _fault_30;\n  md_fault_type _fault_31;\n  md_fault_type _fault_32;\n  word_t _result_11;\n  md_fault_type _fault_33;\n  md_fault_type _fault_34;\n  word_t _result_12;\n  md_fault_type _fault_35;\n  md_fault_type _fault_36;\n  word_t _rd;\n  word_t _rd_0;\n  int _shamt;\n  int _shamt_0;\n  md_opcode op;\n  md_fault_type fault;\n  md_amode_type am;\n  branch_class_t bc;\n  inst_class_t ic;\n  int _i_2;\n  int _i_1;\n  int _i_0;\n  sword_t _op2;\n  sword_t _op1;\n  int _i;\n  bool_t _sign2;\n  bool_t _sign1;\n  int i;\n  fwrite(String, Number, Number, stderr);\n  regs.regs_NPC = regs.regs_PC + Number;\n  if ((dlite_check || dlite_active) &&\n      (unsigned int)_check_break(regs.regs_PC, Number L, Number L, Number L,\n                                 Number L))\n    dlite_main(regs.regs_PC - Number, regs.regs_PC, sim_num_insn, &regs, mem);\n  do {\n    regs.regs_R[Number] = Number;\n    if (mem->ptab[(regs.regs_PC >> Number) & Number] &&\n        mem->ptab[(regs.regs_PC >> Number) & Number]->tag ==\n            regs.regs_PC >> Number) {\n      ++mem->ptab_accesses;\n      v0 = mem->ptab[(regs.regs_PC >> Number) & Number]->page != Number L;\n    } else {\n      v0 = mem_translate(mem, regs.regs_PC) != Number;\n    }\n    if (v0) {\n      if (mem->ptab[(regs.regs_PC >> Number) & Number] &&\n          mem->ptab[(regs.regs_PC >> Number) & Number]->tag ==\n              regs.regs_PC >> Number) {\n        ++mem->ptab_accesses;\n        v1 = mem->ptab[(regs.regs_PC >> Number) & Number]->page;\n      } else {\n        v1 = (byte_t *)mem_translate(mem, regs.regs_PC);\n      }\n      v2 = *(_DWORD *)&v1[regs.regs_PC & Number];\n    } else {\n      v2 = Number;\n    }\n    <span class=\"supfact\">inst</span>.a = v2;\n    if (mem->ptab[((regs.regs_PC + Number) >> Number) & Number] &&\n        mem->ptab[((regs.regs_PC + Number) >> Number) & Number]->tag ==\n            (regs.regs_PC + Number) >> Number) {\n      ++mem->ptab_accesses;\n      v3 = mem->ptab[((regs.regs_PC + Number) >> Number) & Number]->page !=\n           Number L;\n    } else {\n      v3 = mem_translate(mem, regs.regs_PC + Number) != Number;\n    }\n    if (v3) {\n      if (mem->ptab[((regs.regs_PC + Number) >> Number) & Number] &&\n          mem->ptab[((regs.regs_PC + Number) >> Number) & Number]->tag ==\n              (regs.regs_PC + Number) >> Number) {\n        ++mem->ptab_accesses;\n        v4 = mem->ptab[((regs.regs_PC + Number) >> Number) & Number]->page;\n      } else {\n        v4 = (byte_t *)mem_translate(mem, regs.regs_PC + Number);\n      }\n      v5 = *(_DWORD *)&v4[(LOWORD(regs.regs_PC) + Number) & Number];\n    } else {\n      v5 = Number;\n    }\n    <span class=\"supfact\">inst</span>.b = v5;\n    if (verbose) {\n      myfprintf(stderr, String, sim_num_insn, (const void *)regs.regs_PC);\n      ((void(__fastcall *)(_QWORD, _QWORD, _QWORD))md_print_insn)(\n          <span class=\"supfact\">inst</span>, regs.regs_PC, stderr);\n      fputc(Number, stderr);\n    }\n    ++sim_num_insn;\n    v6 = Number;\n    v7 = Number;\n    fault = md_fault_none;\n    op = LOBYTE(<span class=\"supfact\">inst</span>.a);\n    switch (LOBYTE(<span class=\"supfact\">inst</span>.a)) {\n    case Number:\n    case Number:\n    case Number:\n      break;\n    case Number:\n      regs.regs_NPC =\n          regs.regs_PC & Number | (Number * <span class=\"supfact\">inst</span>.b) & Number;\n      break;\n    case Number:\n      regs.regs_NPC =\n          regs.regs_PC & Number | (Number * <span class=\"supfact\">inst</span>.b) & Number;\n      regs.regs_R[Number] = regs.regs_PC + Number;\n      break;\n    case Number:\n      if ((regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_NPC = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] = regs.regs_PC + Number;\n        regs.regs_NPC = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      }\n      break;\n    case Number:\n      if (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] ==\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)])\n        regs.regs_NPC =\n            Number * SLOWORD(<span class=\"supfact\">inst</span>.b) + regs.regs_PC + Number;\n      break;\n    case Number:\n      if (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] !=\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)])\n        regs.regs_NPC =\n            Number * SLOWORD(<span class=\"supfact\">inst</span>.b) + regs.regs_PC + Number;\n      break;\n    case Number:\n      if (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] <= Number)\n        regs.regs_NPC =\n            Number * SLOWORD(<span class=\"supfact\">inst</span>.b) + regs.regs_PC + Number;\n      break;\n    case Number:\n      if (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] > Number)\n        regs.regs_NPC =\n            Number * SLOWORD(<span class=\"supfact\">inst</span>.b) + regs.regs_PC + Number;\n      break;\n    case Number:\n      if (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] < Number)\n        regs.regs_NPC =\n            Number * SLOWORD(<span class=\"supfact\">inst</span>.b) + regs.regs_PC + Number;\n      break;\n    case Number:\n      if (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] >= Number)\n        regs.regs_NPC =\n            Number * SLOWORD(<span class=\"supfact\">inst</span>.b) + regs.regs_PC + Number;\n      break;\n    case Number:\n      if (!regs.regs_C.fcc)\n        regs.regs_NPC =\n            Number * SLOWORD(<span class=\"supfact\">inst</span>.b) + regs.regs_PC + Number;\n      break;\n    case Number:\n      if (regs.regs_C.fcc)\n        regs.regs_NPC =\n            Number * SLOWORD(<span class=\"supfact\">inst</span>.b) + regs.regs_PC + Number;\n      break;\n    case Number:\n      _fault = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v8 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v8 = mem_translate(mem, v6) != Number;\n      }\n      if (v8) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v9 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v9 = (byte_t *)mem_translate(mem, v6);\n        }\n        v10 = v9[v6 & Number];\n      } else {\n        v10 = Number;\n      }\n      _result = v10;\n      if (_fault)\n        fault = _fault;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result;\n      break;\n    case Number:\n      _fault_0 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v11 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v11 = mem_translate(mem, v6) != Number;\n      }\n      if (v11) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v12 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v12 = (byte_t *)mem_translate(mem, v6);\n        }\n        v13 = v12[v6 & Number];\n      } else {\n        v13 = Number;\n      }\n      _result_0 = v13;\n      if (_fault_0)\n        fault = _fault_0;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_0;\n      break;\n    case Number:\n      _fault_1 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v14 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v14 = mem_translate(mem, v6) != Number;\n      }\n      if (v14) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v15 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v15 = (byte_t *)mem_translate(mem, v6);\n        }\n        v16 = *(_WORD *)&v15[v6 & Number];\n      } else {\n        v16 = Number;\n      }\n      _result_1 = v16;\n      if (_fault_1)\n        fault = _fault_1;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_1;\n      break;\n    case Number:\n      _fault_2 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v17 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v17 = mem_translate(mem, v6) != Number;\n      }\n      if (v17) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v18 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v18 = (byte_t *)mem_translate(mem, v6);\n        }\n        v19 = *(_WORD *)&v18[v6 & Number];\n      } else {\n        v19 = Number;\n      }\n      _result_2 = v19;\n      if (_fault_2)\n        fault = _fault_2;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_2;\n      break;\n    case Number:\n      _fault_3 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v20 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v20 = mem_translate(mem, v6) != Number;\n      }\n      if (v20) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v21 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v21 = (byte_t *)mem_translate(mem, v6);\n        }\n        v22 = *(_DWORD *)&v21[v6 & Number];\n      } else {\n        v22 = Number;\n      }\n      _result_3 = v22;\n      if (_fault_3)\n        fault = _fault_3;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_3;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        _fault_4 = md_fault_none;\n        v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n             SLOWORD(<span class=\"supfact\">inst</span>.b);\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v23 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n        } else {\n          v23 = mem_translate(mem, v6) != Number;\n        }\n        if (v23) {\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v24 = mem->ptab[(v6 >> Number) & Number]->page;\n          } else {\n            v24 = (byte_t *)mem_translate(mem, v6);\n          }\n          v25 = *(_DWORD *)&v24[v6 & Number];\n        } else {\n          v25 = Number;\n        }\n        _result_hi = v25;\n        if (_fault_4) {\n          fault = _fault_4;\n        } else {\n          _fault_4 = md_fault_none;\n          v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n               SLOWORD(<span class=\"supfact\">inst</span>.b) + Number;\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v26 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n          } else {\n            v26 = mem_translate(mem, v6) != Number;\n          }\n          if (v26) {\n            if (mem->ptab[(v6 >> Number) & Number] &&\n                mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n              ++mem->ptab_accesses;\n              v27 = mem->ptab[(v6 >> Number) & Number]->page;\n            } else {\n              v27 = (byte_t *)mem_translate(mem, v6);\n            }\n            v28 = *(_DWORD *)&v27[v6 & Number];\n          } else {\n            v28 = Number;\n          }\n          _result_lo = v28;\n          if (_fault_4) {\n            fault = _fault_4;\n          } else {\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_hi;\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b) + Number] = _result_lo;\n          }\n        }\n      }\n      break;\n    case Number:\n      _fault_5 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v29 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v29 = mem_translate(mem, v6) != Number;\n      }\n      if (v29) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v30 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v30 = (byte_t *)mem_translate(mem, v6);\n        }\n        v31 = *(_DWORD *)&v30[v6 & Number];\n      } else {\n        v31 = Number;\n      }\n      _result_4 = v31;\n      if (_fault_5)\n        fault = _fault_5;\n      else\n        regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_4;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        _fault_6 = md_fault_none;\n        v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n             SLOWORD(<span class=\"supfact\">inst</span>.b);\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v32 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n        } else {\n          v32 = mem_translate(mem, v6) != Number;\n        }\n        if (v32) {\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v33 = mem->ptab[(v6 >> Number) & Number]->page;\n          } else {\n            v33 = (byte_t *)mem_translate(mem, v6);\n          }\n          v34 = *(_DWORD *)&v33[v6 & Number];\n        } else {\n          v34 = Number;\n        }\n        _result_hi_0 = v34;\n        if (_fault_6) {\n          fault = _fault_6;\n        } else {\n          _fault_6 = md_fault_none;\n          v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n               SLOWORD(<span class=\"supfact\">inst</span>.b) + Number;\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v35 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n          } else {\n            v35 = mem_translate(mem, v6) != Number;\n          }\n          if (v35) {\n            if (mem->ptab[(v6 >> Number) & Number] &&\n                mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n              ++mem->ptab_accesses;\n              v36 = mem->ptab[(v6 >> Number) & Number]->page;\n            } else {\n              v36 = (byte_t *)mem_translate(mem, v6);\n            }\n            v37 = *(_DWORD *)&v36[v6 & Number];\n          } else {\n            v37 = Number;\n          }\n          _result_lo_0 = v37;\n          if (_fault_6) {\n            fault = _fault_6;\n          } else {\n            regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_hi_0;\n            regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b) + Number] =\n                _result_lo_0;\n          }\n        }\n      }\n      break;\n    case Number:\n      _temp_bs = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      _fault_7 = md_fault_none;\n      v6 = (SLOWORD(<span class=\"supfact\">inst</span>.b) + _temp_bs) & Number;\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v38 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v38 = mem_translate(mem, v6) != Number;\n      }\n      if (v38) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v39 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v39 = (byte_t *)mem_translate(mem, v6);\n        }\n        v40 = *(_DWORD *)&v39[v6 & Number];\n      } else {\n        v40 = Number;\n      }\n      _lr_temp = v40;\n      if (_fault_7)\n        fault = _fault_7;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n            (_lr_temp << (Number *\n                          (~(LOBYTE(<span class=\"supfact\">inst</span>.b) + _temp_bs) &\n                           Number))) &\n                ~*((_DWORD *)&md_lr_masks +\n                   ((LOBYTE(<span class=\"supfact\">inst</span>.b) + (_BYTE)_temp_bs) &\n                    Number) +\n                   Number) |\n            *((_DWORD *)&md_lr_masks +\n              ((LOBYTE(<span class=\"supfact\">inst</span>.b) + (_BYTE)_temp_bs) & Number) +\n              Number) &\n                regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      _temp_bs_0 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      _fault_8 = md_fault_none;\n      v6 = (SLOWORD(<span class=\"supfact\">inst</span>.b) + _temp_bs_0) & Number;\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v41 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v41 = mem_translate(mem, v6) != Number;\n      }\n      if (v41) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v42 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v42 = (byte_t *)mem_translate(mem, v6);\n        }\n        v43 = *(_DWORD *)&v42[v6 & Number];\n      } else {\n        v43 = Number;\n      }\n      _lr_temp_0 = v43;\n      if (_fault_8)\n        fault = _fault_8;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n            (_lr_temp_0 >>\n             (Number *\n              ((LOBYTE(<span class=\"supfact\">inst</span>.b) + _temp_bs_0) & Number))) &\n                *((_DWORD *)&md_lr_masks +\n                  ((LOBYTE(<span class=\"supfact\">inst</span>.b) + (_BYTE)_temp_bs_0) &\n                   Number)) |\n            ~*((_DWORD *)&md_lr_masks +\n               ((LOBYTE(<span class=\"supfact\">inst</span>.b) + (_BYTE)_temp_bs_0) &\n                Number)) &\n                regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      _src = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      _fault_9 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v44 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v44 = mem_translate(mem, v6) == Number;\n      }\n      if (v44)\n        mem_newpage(mem, v6);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v45 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v45 = (byte_t *)mem_translate(mem, v6);\n      }\n      v45[v6 & Number] = _src;\n      if (_fault_9)\n        fault = _fault_9;\n      break;\n    case Number:\n      _src_0 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      _fault_10 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v46 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v46 = mem_translate(mem, v6) == Number;\n      }\n      if (v46)\n        mem_newpage(mem, v6);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v47 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v47 = (byte_t *)mem_translate(mem, v6);\n      }\n      *(_WORD *)&v47[v6 & Number] = _src_0;\n      if (_fault_10)\n        fault = _fault_10;\n      break;\n    case Number:\n      _src_1 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      _fault_11 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v48 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v48 = mem_translate(mem, v6) == Number;\n      }\n      if (v48)\n        mem_newpage(mem, v6);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v49 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v49 = (byte_t *)mem_translate(mem, v6);\n      }\n      *(_DWORD *)&v49[v6 & Number] = _src_1;\n      if (_fault_11)\n        fault = _fault_11;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        _fault_12 = md_fault_none;\n        v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n             SLOWORD(<span class=\"supfact\">inst</span>.b);\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v50 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n        } else {\n          v50 = mem_translate(mem, v6) == Number;\n        }\n        if (v50)\n          mem_newpage(mem, v6);\n        v51 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v52 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v52 = (byte_t *)mem_translate(mem, v6);\n        }\n        *(_DWORD *)&v52[v6 & Number] = v51;\n        if (_fault_12) {\n          fault = _fault_12;\n        } else {\n          _fault_12 = md_fault_none;\n          v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n               SLOWORD(<span class=\"supfact\">inst</span>.b) + Number;\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v53 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n          } else {\n            v53 = mem_translate(mem, v6) == Number;\n          }\n          if (v53)\n            mem_newpage(mem, v6);\n          v54 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b) + Number];\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v55 = mem->ptab[(v6 >> Number) & Number]->page;\n          } else {\n            v55 = (byte_t *)mem_translate(mem, v6);\n          }\n          *(_DWORD *)&v55[v6 & Number] = v54;\n          if (_fault_12)\n            fault = _fault_12;\n        }\n      }\n      break;\n    case Number:\n      _fault_13 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v56 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v56 = mem_translate(mem, v6) == Number;\n      }\n      if (v56)\n        mem_newpage(mem, v6);\n      v57 = regs.regs_R[Number];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v58 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v58 = (byte_t *)mem_translate(mem, v6);\n      }\n      *(_DWORD *)&v58[v6 & Number] = v57;\n      if (_fault_13) {\n        fault = _fault_13;\n      } else {\n        _fault_13 = md_fault_none;\n        v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n             SLOWORD(<span class=\"supfact\">inst</span>.b) + Number;\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v59 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n        } else {\n          v59 = mem_translate(mem, v6) == Number;\n        }\n        if (v59)\n          mem_newpage(mem, v6);\n        v60 = regs.regs_R[Number];\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v61 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v61 = (byte_t *)mem_translate(mem, v6);\n        }\n        *(_DWORD *)&v61[v6 & Number] = v60;\n        if (_fault_13)\n          fault = _fault_13;\n      }\n      break;\n    case Number:\n      _fault_14 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           SLOWORD(<span class=\"supfact\">inst</span>.b);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v62 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v62 = mem_translate(mem, v6) == Number;\n      }\n      if (v62)\n        mem_newpage(mem, v6);\n      v63 = regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v64 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v64 = (byte_t *)mem_translate(mem, v6);\n      }\n      *(_DWORD *)&v64[v6 & Number] = v63;\n      if (_fault_14)\n        fault = _fault_14;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        _fault_15 = md_fault_none;\n        v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n             SLOWORD(<span class=\"supfact\">inst</span>.b);\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v65 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n        } else {\n          v65 = mem_translate(mem, v6) == Number;\n        }\n        if (v65)\n          mem_newpage(mem, v6);\n        v66 = regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b)];\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v67 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v67 = (byte_t *)mem_translate(mem, v6);\n        }\n        *(_DWORD *)&v67[v6 & Number] = v66;\n        if (_fault_15) {\n          fault = _fault_15;\n        } else {\n          _fault_15 = md_fault_none;\n          v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n               SLOWORD(<span class=\"supfact\">inst</span>.b) + Number;\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v68 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n          } else {\n            v68 = mem_translate(mem, v6) == Number;\n          }\n          if (v68)\n            mem_newpage(mem, v6);\n          v69 = regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b) + Number];\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v70 = mem->ptab[(v6 >> Number) & Number]->page;\n          } else {\n            v70 = (byte_t *)mem_translate(mem, v6);\n          }\n          *(_DWORD *)&v70[v6 & Number] = v69;\n          if (_fault_15)\n            fault = _fault_15;\n        }\n      }\n      break;\n    case Number:\n      _fault_16 = md_fault_none;\n      v6 = (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n            SLOWORD(<span class=\"supfact\">inst</span>.b)) &\n           Number;\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v71 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v71 = mem_translate(mem, v6) != Number;\n      }\n      if (v71) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v72 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v72 = (byte_t *)mem_translate(mem, v6);\n        }\n        v73 = *(_DWORD *)&v72[v6 & Number];\n      } else {\n        v73 = Number;\n      }\n      _lr_temp_1 = v73;\n      if (_fault_16) {\n        fault = _fault_16;\n      } else {\n        _lr_temp_1 =\n            *((_DWORD *)&md_lr_masks +\n              (~((unsigned __int8)regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n                 LOBYTE(<span class=\"supfact\">inst</span>.b)) &\n               Number)) &\n                (regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] >>\n                 (Number * (~(regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n                              LOBYTE(<span class=\"supfact\">inst</span>.b)) &\n                            Number))) |\n            _lr_temp_1 & ~*((_DWORD *)&md_lr_masks +\n                            (~((unsigned __int8)\n                                   regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n                               LOBYTE(<span class=\"supfact\">inst</span>.b)) &\n                             Number));\n        _fault_16 = md_fault_none;\n        v6 = (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n              SLOWORD(<span class=\"supfact\">inst</span>.b)) &\n             Number;\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v74 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n        } else {\n          v74 = mem_translate(mem, v6) == Number;\n        }\n        if (v74)\n          mem_newpage(mem, v6);\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v75 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v75 = (byte_t *)mem_translate(mem, v6);\n        }\n        *(_DWORD *)&v75[v6 & Number] = _lr_temp_1;\n        if (_fault_16)\n          fault = _fault_16;\n      }\n      break;\n    case Number:\n      _fault_17 = md_fault_none;\n      v6 = (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n            SLOWORD(<span class=\"supfact\">inst</span>.b)) &\n           Number;\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v76 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v76 = mem_translate(mem, v6) != Number;\n      }\n      if (v76) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v77 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v77 = (byte_t *)mem_translate(mem, v6);\n        }\n        v78 = *(_DWORD *)&v77[v6 & Number];\n      } else {\n        v78 = Number;\n      }\n      _lr_temp_2 = v78;\n      if (_fault_17) {\n        fault = _fault_17;\n      } else {\n        _lr_temp_2 =\n            ~*((_DWORD *)&md_lr_masks + Number -\n               (((unsigned __int8)regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n                 LOBYTE(<span class=\"supfact\">inst</span>.b)) &\n                Number)) &\n                (regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)]\n                 << (Number * ((regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n                                LOBYTE(<span class=\"supfact\">inst</span>.b)) &\n                               Number))) |\n            _lr_temp_2 & *((_DWORD *)&md_lr_masks + Number -\n                           (((unsigned __int8)\n                                 regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n                             LOBYTE(<span class=\"supfact\">inst</span>.b)) &\n                            Number));\n        _fault_17 = md_fault_none;\n        v6 = (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n              SLOWORD(<span class=\"supfact\">inst</span>.b)) &\n             Number;\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v79 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n        } else {\n          v79 = mem_translate(mem, v6) == Number;\n        }\n        if (v79)\n          mem_newpage(mem, v6);\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v80 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v80 = (byte_t *)mem_translate(mem, v6);\n        }\n        *(_DWORD *)&v80[v6 & Number] = _lr_temp_2;\n        if (_fault_17)\n          fault = _fault_17;\n      }\n      break;\n    case Number:\n      _fault_18 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v81 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v81 = mem_translate(mem, v6) != Number;\n      }\n      if (v81) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v82 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v82 = (byte_t *)mem_translate(mem, v6);\n        }\n        v83 = v82[v6 & Number];\n      } else {\n        v83 = Number;\n      }\n      _result_5 = v83;\n      if (_fault_18)\n        fault = _fault_18;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_5;\n      break;\n    case Number:\n      _fault_19 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v84 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v84 = mem_translate(mem, v6) != Number;\n      }\n      if (v84) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v85 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v85 = (byte_t *)mem_translate(mem, v6);\n        }\n        v86 = v85[v6 & Number];\n      } else {\n        v86 = Number;\n      }\n      _result_6 = v86;\n      if (_fault_19)\n        fault = _fault_19;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_6;\n      break;\n    case Number:\n      _fault_20 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v87 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v87 = mem_translate(mem, v6) != Number;\n      }\n      if (v87) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v88 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v88 = (byte_t *)mem_translate(mem, v6);\n        }\n        v89 = *(_WORD *)&v88[v6 & Number];\n      } else {\n        v89 = Number;\n      }\n      _result_7 = v89;\n      if (_fault_20)\n        fault = _fault_20;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_7;\n      break;\n    case Number:\n      _fault_21 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v90 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v90 = mem_translate(mem, v6) != Number;\n      }\n      if (v90) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v91 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v91 = (byte_t *)mem_translate(mem, v6);\n        }\n        v92 = *(_WORD *)&v91[v6 & Number];\n      } else {\n        v92 = Number;\n      }\n      _result_8 = v92;\n      if (_fault_21)\n        fault = _fault_21;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_8;\n      break;\n    case Number:\n      _fault_22 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v93 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v93 = mem_translate(mem, v6) != Number;\n      }\n      if (v93) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v94 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v94 = (byte_t *)mem_translate(mem, v6);\n        }\n        v95 = *(_DWORD *)&v94[v6 & Number];\n      } else {\n        v95 = Number;\n      }\n      _result_9 = v95;\n      if (_fault_22)\n        fault = _fault_22;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_9;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        _fault_23 = md_fault_none;\n        v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n             regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v96 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n        } else {\n          v96 = mem_translate(mem, v6) != Number;\n        }\n        if (v96) {\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v97 = mem->ptab[(v6 >> Number) & Number]->page;\n          } else {\n            v97 = (byte_t *)mem_translate(mem, v6);\n          }\n          v98 = *(_DWORD *)&v97[v6 & Number];\n        } else {\n          v98 = Number;\n        }\n        _result_hi_1 = v98;\n        if (_fault_23) {\n          fault = _fault_23;\n        } else {\n          _fault_23 = md_fault_none;\n          v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n               regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] + Number;\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v99 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n          } else {\n            v99 = mem_translate(mem, v6) != Number;\n          }\n          if (v99) {\n            if (mem->ptab[(v6 >> Number) & Number] &&\n                mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n              ++mem->ptab_accesses;\n              v100 = mem->ptab[(v6 >> Number) & Number]->page;\n            } else {\n              v100 = (byte_t *)mem_translate(mem, v6);\n            }\n            v101 = *(_DWORD *)&v100[v6 & Number];\n          } else {\n            v101 = Number;\n          }\n          _result_lo_1 = v101;\n          if (_fault_23) {\n            fault = _fault_23;\n          } else {\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_hi_1;\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b) + Number] = _result_lo_1;\n          }\n        }\n      }\n      break;\n    case Number:\n      _fault_24 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v102 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v102 = mem_translate(mem, v6) != Number;\n      }\n      if (v102) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v103 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v103 = (byte_t *)mem_translate(mem, v6);\n        }\n        v104 = *(_DWORD *)&v103[v6 & Number];\n      } else {\n        v104 = Number;\n      }\n      _result_10 = v104;\n      if (_fault_24)\n        fault = _fault_24;\n      else\n        regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_10;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        _fault_25 = md_fault_none;\n        v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n             regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v105 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n        } else {\n          v105 = mem_translate(mem, v6) != Number;\n        }\n        if (v105) {\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v106 = mem->ptab[(v6 >> Number) & Number]->page;\n          } else {\n            v106 = (byte_t *)mem_translate(mem, v6);\n          }\n          v107 = *(_DWORD *)&v106[v6 & Number];\n        } else {\n          v107 = Number;\n        }\n        _result_hi_2 = v107;\n        if (_fault_25) {\n          fault = _fault_25;\n        } else {\n          _fault_25 = md_fault_none;\n          v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n               regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] + Number;\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v108 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n          } else {\n            v108 = mem_translate(mem, v6) != Number;\n          }\n          if (v108) {\n            if (mem->ptab[(v6 >> Number) & Number] &&\n                mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n              ++mem->ptab_accesses;\n              v109 = mem->ptab[(v6 >> Number) & Number]->page;\n            } else {\n              v109 = (byte_t *)mem_translate(mem, v6);\n            }\n            v110 = *(_DWORD *)&v109[v6 & Number];\n          } else {\n            v110 = Number;\n          }\n          _result_lo_2 = v110;\n          if (_fault_25) {\n            fault = _fault_25;\n          } else {\n            regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_hi_2;\n            regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b) + Number] =\n                _result_lo_2;\n          }\n        }\n      }\n      break;\n    case Number:\n      _src_2 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      _fault_26 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v111 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v111 = mem_translate(mem, v6) == Number;\n      }\n      if (v111)\n        mem_newpage(mem, v6);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v112 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v112 = (byte_t *)mem_translate(mem, v6);\n      }\n      v112[v6 & Number] = _src_2;\n      if (_fault_26)\n        fault = _fault_26;\n      break;\n    case Number:\n      _src_3 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      _fault_27 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v113 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v113 = mem_translate(mem, v6) == Number;\n      }\n      if (v113)\n        mem_newpage(mem, v6);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v114 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v114 = (byte_t *)mem_translate(mem, v6);\n      }\n      *(_WORD *)&v114[v6 & Number] = _src_3;\n      if (_fault_27)\n        fault = _fault_27;\n      break;\n    case Number:\n      _src_4 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      _fault_28 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v115 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v115 = mem_translate(mem, v6) == Number;\n      }\n      if (v115)\n        mem_newpage(mem, v6);\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v116 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v116 = (byte_t *)mem_translate(mem, v6);\n      }\n      *(_DWORD *)&v116[v6 & Number] = _src_4;\n      if (_fault_28)\n        fault = _fault_28;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        _fault_29 = md_fault_none;\n        v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n             regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v117 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n        } else {\n          v117 = mem_translate(mem, v6) == Number;\n        }\n        if (v117)\n          mem_newpage(mem, v6);\n        v118 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v119 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v119 = (byte_t *)mem_translate(mem, v6);\n        }\n        *(_DWORD *)&v119[v6 & Number] = v118;\n        if (_fault_29) {\n          fault = _fault_29;\n        } else {\n          _fault_29 = md_fault_none;\n          v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n               regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] + Number;\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v120 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n          } else {\n            v120 = mem_translate(mem, v6) == Number;\n          }\n          if (v120)\n            mem_newpage(mem, v6);\n          v121 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b) + Number];\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v122 = mem->ptab[(v6 >> Number) & Number]->page;\n          } else {\n            v122 = (byte_t *)mem_translate(mem, v6);\n          }\n          *(_DWORD *)&v122[v6 & Number] = v121;\n          if (_fault_29)\n            fault = _fault_29;\n        }\n      }\n      break;\n    case Number:\n      _fault_30 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v123 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v123 = mem_translate(mem, v6) == Number;\n      }\n      if (v123)\n        mem_newpage(mem, v6);\n      v124 = regs.regs_R[Number];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v125 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v125 = (byte_t *)mem_translate(mem, v6);\n      }\n      *(_DWORD *)&v125[v6 & Number] = v124;\n      if (_fault_30) {\n        fault = _fault_30;\n      } else {\n        _fault_30 = md_fault_none;\n        v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n             regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] + Number;\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v126 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n        } else {\n          v126 = mem_translate(mem, v6) == Number;\n        }\n        if (v126)\n          mem_newpage(mem, v6);\n        v127 = regs.regs_R[Number];\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v128 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v128 = (byte_t *)mem_translate(mem, v6);\n        }\n        *(_DWORD *)&v128[v6 & Number] = v127;\n        if (_fault_30)\n          fault = _fault_30;\n      }\n      break;\n    case Number:\n      _fault_31 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v129 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v129 = mem_translate(mem, v6) == Number;\n      }\n      if (v129)\n        mem_newpage(mem, v6);\n      v130 = regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v131 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v131 = (byte_t *)mem_translate(mem, v6);\n      }\n      *(_DWORD *)&v131[v6 & Number] = v130;\n      if (_fault_31)\n        fault = _fault_31;\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        _fault_32 = md_fault_none;\n        v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n             regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)];\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v132 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n        } else {\n          v132 = mem_translate(mem, v6) == Number;\n        }\n        if (v132)\n          mem_newpage(mem, v6);\n        v133 = regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b)];\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v134 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v134 = (byte_t *)mem_translate(mem, v6);\n        }\n        *(_DWORD *)&v134[v6 & Number] = v133;\n        if (_fault_32) {\n          fault = _fault_32;\n        } else {\n          _fault_32 = md_fault_none;\n          v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n               regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] + Number;\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v135 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n          } else {\n            v135 = mem_translate(mem, v6) == Number;\n          }\n          if (v135)\n            mem_newpage(mem, v6);\n          v136 = regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b) + Number];\n          if (mem->ptab[(v6 >> Number) & Number] &&\n              mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n            ++mem->ptab_accesses;\n            v137 = mem->ptab[(v6 >> Number) & Number]->page;\n          } else {\n            v137 = (byte_t *)mem_translate(mem, v6);\n          }\n          *(_DWORD *)&v137[v6 & Number] = v136;\n          if (_fault_32)\n            fault = _fault_32;\n        }\n      }\n      break;\n    case Number:\n      _fault_33 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] + Number;\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v138 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v138 = mem_translate(mem, v6) != Number;\n      }\n      if (v138) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v139 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v139 = (byte_t *)mem_translate(mem, v6);\n        }\n        v140 = *(_DWORD *)&v139[v6 & Number];\n      } else {\n        v140 = Number;\n      }\n      _result_11 = v140;\n      if (_fault_33)\n        fault = _fault_33;\n      else\n        regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_11;\n      break;\n    case Number:\n      _fault_34 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] + Number;\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v141 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v141 = mem_translate(mem, v6) == Number;\n      }\n      if (v141)\n        mem_newpage(mem, v6);\n      v142 = regs.regs_F.l[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v143 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v143 = (byte_t *)mem_translate(mem, v6);\n      }\n      *(_DWORD *)&v143[v6 & Number] = v142;\n      if (_fault_34)\n        fault = _fault_34;\n      break;\n    case Number:\n      _fault_35 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] + Number;\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v144 = mem->ptab[(v6 >> Number) & Number]->page != Number L;\n      } else {\n        v144 = mem_translate(mem, v6) != Number;\n      }\n      if (v144) {\n        if (mem->ptab[(v6 >> Number) & Number] &&\n            mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n          ++mem->ptab_accesses;\n          v145 = mem->ptab[(v6 >> Number) & Number]->page;\n        } else {\n          v145 = (byte_t *)mem_translate(mem, v6);\n        }\n        v146 = *(_DWORD *)&v145[v6 & Number];\n      } else {\n        v146 = Number;\n      }\n      _result_12 = v146;\n      if (_fault_35)\n        fault = _fault_35;\n      else\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = _result_12;\n      break;\n    case Number:\n      _fault_36 = md_fault_none;\n      v6 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n           regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] + Number;\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v147 = mem->ptab[(v6 >> Number) & Number]->page == Number L;\n      } else {\n        v147 = mem_translate(mem, v6) == Number;\n      }\n      if (v147)\n        mem_newpage(mem, v6);\n      v148 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      if (mem->ptab[(v6 >> Number) & Number] &&\n          mem->ptab[(v6 >> Number) & Number]->tag == v6 >> Number) {\n        ++mem->ptab_accesses;\n        v149 = mem->ptab[(v6 >> Number) & Number]->page;\n      } else {\n        v149 = (byte_t *)mem_translate(mem, v6);\n      }\n      *(_DWORD *)&v149[v6 & Number] = v148;\n      if (_fault_36)\n        fault = _fault_36;\n      break;\n    case Number:\n      if ((regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] <= Number ||\n           regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] <= Number ||\n           Number - regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] >=\n               regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)]) &&\n          (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] >= Number ||\n           regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] >= Number ||\n           Number - regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] <=\n               regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)])) {\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      } else {\n        fault = md_fault_overflow;\n      }\n      break;\n    case Number:\n      if ((regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] <= Number ||\n           SLOWORD(<span class=\"supfact\">inst</span>.b) <= Number ||\n           Number - regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] >=\n               SLOWORD(<span class=\"supfact\">inst</span>.b)) &&\n          (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] >= Number ||\n           SLOWORD(<span class=\"supfact\">inst</span>.b) >= Number ||\n           Number - regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] <=\n               SLOWORD(<span class=\"supfact\">inst</span>.b))) {\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n            SLOWORD(<span class=\"supfact\">inst</span>.b);\n      } else {\n        fault = md_fault_overflow;\n      }\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] +\n          SLOWORD(<span class=\"supfact\">inst</span>.b);\n      break;\n    case Number:\n      if ((regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] <= Number ||\n           regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] >= Number ||\n           regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] + Number >=\n               regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)]) &&\n          (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] >= Number ||\n           regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] <= Number ||\n           regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] - Number <=\n               regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)])) {\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] -\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      } else {\n        fault = md_fault_overflow;\n      }\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] -\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      _sign2 = Number;\n      _sign1 = Number;\n      regs.regs_C.hi = Number;\n      regs.regs_C.lo = Number;\n      _op1 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      _op2 = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      if (_op1 < Number) {\n        _sign1 = Number;\n        _op1 = -_op1;\n      }\n      if (_op2 < Number) {\n        _sign2 = Number;\n        _op2 = -_op2;\n      }\n      if (_op1 < Number)\n        regs.regs_C.lo = _op2;\n      for (_i = Number; _i <= Number; ++_i) {\n        regs.regs_C.hi *= Number;\n        v150 = regs.regs_C.hi;\n        regs.regs_C.hi =\n            v150 + extractl((unsigned int)regs.regs_C.lo, Number L, Number L);\n        regs.regs_C.lo *= Number;\n        if ((unsigned int)extractl((unsigned int)_op1,\n                                   (unsigned int)(Number - _i),\n                                   Number L) == Number) {\n          if (~regs.regs_C.lo < (unsigned int)_op2)\n            ++regs.regs_C.hi;\n          regs.regs_C.lo += _op2;\n        }\n      }\n      if (_sign1 != _sign2) {\n        regs.regs_C.lo = ~regs.regs_C.lo;\n        regs.regs_C.hi = ~regs.regs_C.hi;\n        if (regs.regs_C.lo == Number)\n          ++regs.regs_C.hi;\n        ++regs.regs_C.lo;\n      }\n      break;\n    case Number:\n      regs.regs_C.hi = Number;\n      regs.regs_C.lo = Number;\n      if (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] < Number)\n        regs.regs_C.lo = regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      for (_i_0 = Number; _i_0 <= Number; ++_i_0) {\n        regs.regs_C.hi *= Number;\n        v151 = regs.regs_C.hi;\n        regs.regs_C.hi =\n            v151 + extractl((unsigned int)regs.regs_C.lo, Number L, Number L);\n        regs.regs_C.lo *= Number;\n        if ((unsigned int)extractl(\n                (unsigned int)regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)],\n                (unsigned int)(Number - _i_0), Number L) == Number) {\n          if ((unsigned int)~regs.regs_C.lo <\n              regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)])\n            ++regs.regs_C.hi;\n          regs.regs_C.lo += regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n        }\n      }\n      break;\n    case Number:\n      if (regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)]) {\n        regs.regs_C.lo = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] /\n                         regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n        regs.regs_C.hi = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] %\n                         regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      } else {\n        fault = md_fault_div0;\n      }\n      break;\n    case Number:\n      if (regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)]) {\n        regs.regs_C.lo =\n            regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] /\n            (unsigned int)regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n        regs.regs_C.hi =\n            regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] %\n            (unsigned int)regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      } else {\n        fault = md_fault_div0;\n      }\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] = regs.regs_C.hi;\n      break;\n    case Number:\n      regs.regs_C.hi = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] = regs.regs_C.lo;\n      break;\n    case Number:\n      regs.regs_C.lo = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] &\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n          (unsigned __int16)(regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] &\n                             LOWORD(<span class=\"supfact\">inst</span>.b));\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] |\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n          LOWORD(<span class=\"supfact\">inst</span>.b) |\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] ^\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n          LOWORD(<span class=\"supfact\">inst</span>.b) ^\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n          ~(regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] |\n            regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)]);\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)]\n          << SLOBYTE(<span class=\"supfact\">inst</span>.b);\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)]\n          << (regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] & Number);\n      break;\n    case Number:\n      if (LOBYTE(<span class=\"supfact\">inst</span>.b)) {\n        _rd =\n            (unsigned int)regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] >> Number;\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            _rd >> (LOBYTE(<span class=\"supfact\">inst</span>.b) - Number);\n      } else {\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      }\n      break;\n    case Number:\n      _shamt = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] & Number;\n      if (_shamt) {\n        _rd_0 =\n            (unsigned int)regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] >> Number;\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] = _rd_0 >> (_shamt - Number);\n      } else {\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      }\n      break;\n    case Number:\n      if (regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] >= Number) {\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] >>\n            SLOBYTE(<span class=\"supfact\">inst</span>.b);\n      } else {\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n        for (_i_1 = Number; LOBYTE(<span class=\"supfact\">inst</span>.b) > (unsigned int)_i_1;\n             ++_i_1)\n          regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n              (regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] >> Number) | Number;\n      }\n      break;\n    case Number:\n      _shamt_0 = regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] & Number;\n      if (regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] >= Number) {\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] >> _shamt_0;\n      } else {\n        regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n        for (_i_2 = Number; _i_2 < _shamt_0; ++_i_2)\n          regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n              (regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] >> Number) | Number;\n      }\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] <\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] <\n          SLOWORD(<span class=\"supfact\">inst</span>.b);\n      break;\n    case Number:\n      regs.regs_R[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] <\n          (unsigned int)regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[HIBYTE(<span class=\"supfact\">inst</span>.b)] <\n          (unsigned int)SLOWORD(<span class=\"supfact\">inst</span>.b);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.f[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_F.f[BYTE2(<span class=\"supfact\">inst</span>.b)] +\n            regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.d[LOWORD(<span class=\"supfact\">inst</span>.b) >> Number] =\n            regs.regs_F.d[(<span class=\"supfact\">inst</span>.b >> Number) & Number] +\n            regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.f[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)] -\n            regs.regs_F.f[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.d[LOWORD(<span class=\"supfact\">inst</span>.b) >> Number] =\n            regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number] -\n            regs.regs_F.d[(<span class=\"supfact\">inst</span>.b >> Number) & Number];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.f[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_F.f[BYTE2(<span class=\"supfact\">inst</span>.b)] *\n            regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.d[LOWORD(<span class=\"supfact\">inst</span>.b) >> Number] =\n            regs.regs_F.d[(<span class=\"supfact\">inst</span>.b >> Number) & Number] *\n            regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.f[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)] /\n            regs.regs_F.f[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.d[LOWORD(<span class=\"supfact\">inst</span>.b) >> Number] =\n            regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number] /\n            regs.regs_F.d[(<span class=\"supfact\">inst</span>.b >> Number) & Number];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.f[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            fabs(regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)]);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.d[LOWORD(<span class=\"supfact\">inst</span>.b) >> Number] =\n            fabs(regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number]);\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.l[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_F.l[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.d[LOWORD(<span class=\"supfact\">inst</span>.b) >> Number] =\n            regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.f[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            -regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.d[LOWORD(<span class=\"supfact\">inst</span>.b) >> Number] =\n            -regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        v152 = regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number];\n        regs.regs_F.f[BYTE1(<span class=\"supfact\">inst</span>.b)] = v152;\n      }\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.f[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            (float)regs.regs_F.l[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.d[LOWORD(<span class=\"supfact\">inst</span>.b) >> Number] =\n            regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.d[LOWORD(<span class=\"supfact\">inst</span>.b) >> Number] =\n            (double)regs.regs_F.l[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.l[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            (int)regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_F.l[BYTE1(<span class=\"supfact\">inst</span>.b)] =\n            (int)regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_C.fcc = regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)] ==\n                          regs.regs_F.f[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_C.fcc =\n            regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number] ==\n            regs.regs_F.d[(<span class=\"supfact\">inst</span>.b >> Number) & Number];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_C.fcc = regs.regs_F.f[BYTE2(<span class=\"supfact\">inst</span>.b)] >\n                          regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_C.fcc =\n            regs.regs_F.d[(<span class=\"supfact\">inst</span>.b >> Number) & Number] >\n            regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_C.fcc = regs.regs_F.f[BYTE2(<span class=\"supfact\">inst</span>.b)] >=\n                          regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number)\n        fault = md_fault_alignment;\n      else\n        regs.regs_C.fcc =\n            regs.regs_F.d[(<span class=\"supfact\">inst</span>.b >> Number) & Number] >=\n            regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        v153 = sqrt(regs.regs_F.f[HIBYTE(<span class=\"supfact\">inst</span>.b)]);\n        regs.regs_F.f[BYTE1(<span class=\"supfact\">inst</span>.b)] = v153;\n      }\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        v154 = LOWORD(<span class=\"supfact\">inst</span>.b) >> Number;\n        regs.regs_F.d[v154] =\n            sqrt(regs.regs_F.d[<span class=\"supfact\">inst</span>.b >> Number]);\n      }\n      break;\n    case Number:\n      ((void(__fastcall *)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sys_syscall)(\n          &regs, &mem_access, mem, <span class=\"supfact\">inst</span>, Number L);\n      break;\n    case Number:\n      fault = md_fault_break;\n      break;\n    case Number:\n      regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] = <span class=\"supfact\">inst</span>.b\n                                                   << Number;\n      break;\n    case Number:\n      regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_F.l[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_F.l[HIBYTE(<span class=\"supfact\">inst</span>.b)];\n        regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b) + Number] =\n            regs.regs_F.l[HIBYTE(<span class=\"supfact\">inst</span>.b) + Number];\n      }\n      break;\n    case Number:\n      regs.regs_F.l[HIBYTE(<span class=\"supfact\">inst</span>.b)] =\n          regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n      break;\n    case Number:\n      if ((<span class=\"supfact\">inst</span>.b & Number) != Number ||\n          (<span class=\"supfact\">inst</span>.b & Number) != Number) {\n        fault = md_fault_alignment;\n      } else {\n        regs.regs_F.l[HIBYTE(<span class=\"supfact\">inst</span>.b)] =\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b)];\n        regs.regs_F.l[HIBYTE(<span class=\"supfact\">inst</span>.b) + Number] =\n            regs.regs_R[BYTE2(<span class=\"supfact\">inst</span>.b) + Number];\n      }\n      break;\n    default:\n      panic(String, String, Number L, String);\n      break;\n    }\n    if ((*((_DWORD *)&md_op2flags + (unsigned int)op) & Number) != Number) {\n      ++sim_num_refs;\n      if ((*((_DWORD *)&md_op2flags + (unsigned int)op) & Number) != Number)\n        v7 = Number;\n    }\n    flags = *((_DWORD *)&md_op2flags + (unsigned int)op);\n    if (prof_ic) {\n      if ((flags & Number) != Number) {\n        ic = ic_load;\n      } else if ((flags & Number) != Number) {\n        ic = ic_store;\n      } else if ((flags & Number) != Number) {\n        ic = ic_uncond;\n      } else if ((flags & Number) != Number) {\n        ic = ic_cond;\n      } else if ((flags & Number) != Number) {\n        ic = ic_icomp;\n      } else if ((flags & Number) != Number) {\n        ic = ic_fcomp;\n      } else if ((flags & Number) != Number) {\n        ic = ic_trap;\n      } else {\n        panic(String, String, Number L, String);\n      }\n      stat_add_sample(ic_prof, (unsigned int)ic);\n    }\n    if (prof_inst)\n      stat_add_sample(inst_prof, (unsigned int)(op - Number));\n    if (prof_bc && (flags & Number) != Number) {\n      if ((flags & Number) == Number) {\n        bc = bc_call_dir;\n      } else if ((flags & Number) == Number) {\n        bc = bc_call_indir;\n      } else if ((flags & Number) == Number) {\n        bc = bc_uncond_dir;\n      } else if ((flags & Number) == Number) {\n        bc = bc_uncond_indir;\n      } else if ((flags & Number) == Number) {\n        bc = bc_cond_dir;\n      } else if ((flags & Number) == Number) {\n        bc = bc_cond_indir;\n      } else {\n        panic(String, String, Number L, String);\n      }\n      stat_add_sample(bc_prof, (unsigned int)bc);\n    }\n    if (prof_am) {\n      if (op == LUI)\n        fsm = BYTE2(<span class=\"supfact\">inst</span>.b);\n      if ((flags & Number) != Number) {\n        if ((*((_DWORD *)&md_op2flags + (unsigned int)op) & Number) != Number) {\n          if (HIBYTE(<span class=\"supfact\">inst</span>.b) == fsm) {\n            am = md_amode_imm;\n          } else {\n            switch (HIBYTE(<span class=\"supfact\">inst</span>.b)) {\n            case Number:\n              am = md_amode_gp;\n              break;\n            case Number:\n              am = md_amode_sp;\n              break;\n            case Number:\n              am = md_amode_fp;\n              break;\n            default:\n              am = md_amode_disp;\n              break;\n            }\n          }\n        } else if ((*((_DWORD *)&md_op2flags + (unsigned int)op) & Number) !=\n                   Number) {\n          am = md_amode_rr;\n        } else {\n          panic(String, String, Number L, String);\n        }\n        stat_add_sample(am_prof, (unsigned int)am);\n        fsm = Number;\n      }\n    }\n    if (prof_seg && (flags & Number) != Number) {\n      v155 = bind_to_seg(v6);\n      stat_add_sample(seg_prof, (unsigned int)v155);\n    }\n    if (prof_tsyms) {\n      sym_bind_addr(regs.regs_PC, &tindex, Number L, Number L);\n      if (tindex >= Number) {\n        if (tindex > sym_ntextsyms)\n          panic(String, String, Number L, String);\n        stat_add_sample(tsym_prof, (unsigned int)tindex);\n      }\n    }\n    if (prof_dsyms) {\n      if ((flags & Number) != Number) {\n        sym_bind_addr(v6, &dindex, Number L, Number L);\n        if (dindex >= Number) {\n          if (dindex > sym_ndatasyms)\n            panic(String, String, Number L, String);\n          stat_add_sample(dsym_prof, (unsigned int)dindex);\n        }\n      }\n    }\n    if (prof_taddr)\n      stat_add_sample(taddr_prof, regs.regs_PC);\n    for (i = Number; i < pcstat_nelt; ++i) {\n      if (pcstat_stats[i]->sc) {\n        if (pcstat_stats[i]->sc == sc_uint) {\n          v156 = *pcstat_stats[i]->variant.for_uint.var;\n        } else if (pcstat_stats[i]->sc == sc_sqword) {\n          v156 = *pcstat_stats[i]->variant.for_qword.var;\n        } else {\n          v156 = panic(String, String, Number L, String);\n        }\n      } else {\n        v156 = *pcstat_stats[i]->variant.for_int.var;\n      }\n      newval = v156;\n      delta = v156 - pcstat_lastvals[i];\n      if (delta) {\n        stat_add_samples(pcstat_sdists[i], regs.regs_PC, (unsigned int)delta);\n        pcstat_lastvals[i] = newval;\n      }\n    }\n    if (dlite_check || dlite_active) {\n      if (v7)\n        v157 = Number L;\n      else\n        v157 = Number L;\n      if ((unsigned int)_check_break(regs.regs_NPC, v157, v6, sim_num_insn,\n                                     sim_num_insn))\n        dlite_main(regs.regs_PC, regs.regs_NPC, sim_num_insn, &regs, mem);\n    }\n    regs.regs_PC = regs.regs_NPC;\n    regs.regs_NPC += Number;\n  } while (!max_insts || max_insts > sim_num_insn);\n}", "var": [{"name": "v161", "type": "__int64", "pred_name": "v113", "ref_name": "inst", "ref_type": "struct md_inst_t { word_t a; word_t b; }"}], "body_in_train": false}, {"repo_owner": "PLEASE-EXCUSE-MY-DOPE-ASS-SWAG", "repo_name": "OHBot", "path": "PLEASE-EXCUSE-MY-DOPE-ASS-SWAG/OHBot/15aca905b501e38c682f9bb9e11fe52759e6eb1ec67bc5617903d75db1d6419d", "path_in_repo": "PLEASE-EXCUSE-MY-DOPE-ASS-SWAG/OHBot/bncsutil/src/bncsutil/libbncsutil.so", "objdump": "0000000000004855 <kd_quick.cold>:\n    4855:\t48 89 ef             \tmov    %rbp,%rdi\n    4858:\te8 f3 f7 ff ff       \tcallq  4050 <_ZN12CDKeyDecoderD1Ev@plt>\n    485d:\t4c 89 e7             \tmov    %r12,%rdi\n    4860:\te8 4b ff ff ff       \tcallq  47b0 <_Unwind_Resume@plt>", "code_s": "void __fastcall __noreturn kd_quick_cold() {\n  CDKeyDecoder *v0;\n  struct _Unwind_Exception *<span class=\"supfact\">v1</span>;\n  CDKeyDecoder ~CDKeyDecoder(v0);\n  _Unwind_Resume(<span class=\"supfact\">v1</span>);\n}", "code_t": "void __fastcall __noreturn kd_quick_cold() {\n  CDKeyDecoder *v0;\n  struct _Unwind_Exception *<span class=\"supfact\">v1</span>;\n  CDKeyDecoder ~CDKeyDecoder(v0);\n  _Unwind_Resume(<span class=\"supfact\">v1</span>);\n}", "var": [{"name": "v1", "type": "__unk__", "pred_name": "v1", "ref_name": "v1", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "dtsund", "repo_name": "dtsund-crawl-mod", "path": "dtsund/dtsund-crawl-mod/09edf38ab155b8fd44d57d0b248a4ef0ef50bb52c241e289648eaebb88cd10a0", "path_in_repo": "dtsund/dtsund-crawl-mod/source/describe.o", "objdump": "0000000000001597 <_Z13get_item_descRK8item_defR13describe_infob.cold>:\n    1597:\t48 8b 3c 24          \tmov    (%rsp),%rdi\n    159b:\t48 8d 44 24 10       \tlea    0x10(%rsp),%rax\n    15a0:\t48 39 c7             \tcmp    %rax,%rdi\n    15a3:\t74 05                \tje     15aa <_Z13get_item_descRK8item_defR13describe_infob.cold+0x13>\n    15a5:\te8 00 00 00 00       \tcallq  15aa <_Z13get_item_descRK8item_defR13describe_infob.cold+0x13>\n    15aa:\t48 89 ef             \tmov    %rbp,%rdi\n    15ad:\te8 00 00 00 00       \tcallq  15b2 <_ZL22_show_item_descriptionRK8item_def.cold>", "code_s": "void __fastcall __noreturn get_item_desc(__int64 a1, __int64 a2, __int64 a3,\n                                         __int64 a4, __int64 a5, __int64 a6,\n                                         __int64 a7, char a8) {\n  struct _Unwind_Exception *<span class=\"supfact\">v8</span>;\n  char *retaddr;\n  if (retaddr != &a8)\n    operator delete(retaddr);\n  Unwind_Resume(<span class=\"supfact\">v8</span>);\n}", "code_t": "void __fastcall __noreturn get_item_desc(__int64 a1, __int64 a2, __int64 a3,\n                                         __int64 a4, __int64 a5, __int64 a6,\n                                         __int64 a7, char a8) {\n  struct _Unwind_Exception *<span class=\"supfact\">v8</span>;\n  char *retaddr;\n  if (retaddr != &a8)\n    operator delete(retaddr);\n  Unwind_Resume(<span class=\"supfact\">v8</span>);\n}", "var": [{"name": "v8", "type": "struct _Unwind_Exception *", "pred_name": "v8", "ref_name": "v8", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "yoshii", "repo_name": "qemu", "path": "yoshii/qemu/dc11654f2428040e4047eeda6aa0019acad53575f52d8f38300b6777677ccb7b", "path_in_repo": "yoshii/qemu//microblaze-linux-user/elfload.o", "objdump": "0000000000003786 <lookup_symbolxx>:\n    3786:\t55                   \tpush   %rbp\n    3787:\t48 89 e5             \tmov    %rsp,%rbp\n    378a:\t48 83 ec 40          \tsub    $0x40,%rsp\n    378e:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n    3792:\t89 75 c4             \tmov    %esi,-0x3c(%rbp)\n    3795:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    379c:\t00 00 \n    379e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    37a2:\t31 c0                \txor    %eax,%eax\n    37a4:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    37a8:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n    37ac:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n    37b0:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    37b3:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n    37b6:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    37ba:\t8b 40 08             \tmov    0x8(%rax),%eax\n    37bd:\t89 c2                \tmov    %eax,%edx\n    37bf:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n    37c3:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    37c7:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    37cd:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    37d2:\t48 89 c7             \tmov    %rax,%rdi\n    37d5:\te8 00 00 00 00       \tcallq  37da <lookup_symbolxx+0x54>\n    37da:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    37de:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n    37e3:\t74 15                \tje     37fa <lookup_symbolxx+0x74>\n    37e5:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    37e9:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n    37ed:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    37f1:\t8b 00                \tmov    (%rax),%eax\n    37f3:\t89 c0                \tmov    %eax,%eax\n    37f5:\t48 01 d0             \tadd    %rdx,%rax\n    37f8:\teb 05                \tjmp    37ff <lookup_symbolxx+0x79>\n    37fa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    37ff:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    3803:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    380a:\t00 00 \n    380c:\t74 05                \tje     3813 <lookup_symbolxx+0x8d>\n    380e:\te8 00 00 00 00       \tcallq  3813 <lookup_symbolxx+0x8d>\n    3813:\tc9                   \tleaveq \n    3814:\tc3                   \tretq   ", "code_s": "void *__fastcall lookup_symbolxx(__int64 a1, int a2) {\n  void *result;\n  void *base;\n  unsigned int *v4;\n  char <span class=\"supfact\">key</span>[Number];\n  int v6;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  base = *(void **)(a1 + Number);\n  v6 = a2;\n  v4 = (unsigned int *)bsearch(<span class=\"supfact\">key</span>, base,\n                               *(unsigned int *)(a1 + Number), Number,\n                               (__compar_fn_t)symfind);\n  if (v4)\n    result = (void *)(*(_QWORD *)(a1 + Number) + *v4);\n  else\n    result = &unk_6AA1;\n  return result;\n}", "code_t": "const char *__cdecl lookup_symbolxx(syminfo *s, target_ulong orig_addr) {\n  const char *result;\n  elf32_sym *syms;\n  elf32_sym *sym;\n  elf32_sym <span class=\"supfact\">key</span>;\n  unsigned __int64 v6;\n  v6 = __readfsqword(Number);\n  syms = s->disas_symtab.elf32;\n  <span class=\"supfact\">key</span>.st_value = orig_addr;\n  sym = (elf32_sym *)bsearch(&<span class=\"supfact\">key</span>, syms, s->disas_num_syms,\n                             Number, (__compar_fn_t)symfind);\n  if (sym)\n    result = &s->disas_strtab[sym->st_name];\n  else\n    result = (const char *)&unk_6AA1;\n  return result;\n}", "var": [{"name": "key", "type": "struct elf32_sym { Elf32_Word st_name; Elf32_Addr st_value; Elf32_Word st_size; unsigned __int8 st_info; unsigned __int8 st_other; Elf32_Half st_shndx; }", "pred_name": "key", "ref_name": "key", "ref_type": "struct elf32_sym { Elf32_Word st_name; Elf32_Addr st_value; Elf32_Word st_size; unsigned __int8 st_info; unsigned __int8 st_other; Elf32_Half st_shndx; }"}], "body_in_train": false}, {"repo_owner": "zpymyyn", "repo_name": "linux-rpi-802.11p", "path": "zpymyyn/linux-rpi-802.11p/c148f95a2983de65d5f8bea990ea608707acd7c90db7c6eb7b91d61a41c2b293", "path_in_repo": "zpymyyn/linux-rpi-802.11p/tools/testing/selftests/vm/gup_benchmark", "objdump": "00000000004011c2 <main>:\n  4011c2:\t55                   \tpush   %rbp\n  4011c3:\t48 89 e5             \tmov    %rsp,%rbp\n  4011c6:\t48 83 ec 60          \tsub    $0x60,%rsp\n  4011ca:\t89 7d ac             \tmov    %edi,-0x54(%rbp)\n  4011cd:\t48 89 75 a0          \tmov    %rsi,-0x60(%rbp)\n  4011d1:\t48 c7 45 f8 00 00 00 \tmovq   $0x8000000,-0x8(%rbp)\n  4011d8:\t08 \n  4011d9:\tc7 45 f0 01 00 00 00 \tmovl   $0x1,-0x10(%rbp)\n  4011e0:\tc7 45 ec ff ff ff ff \tmovl   $0xffffffff,-0x14(%rbp)\n  4011e7:\tc7 45 e8 01 00 00 00 \tmovl   $0x1,-0x18(%rbp)\n  4011ee:\tc7 45 dc 00 00 00 00 \tmovl   $0x0,-0x24(%rbp)\n  4011f5:\teb 7d                \tjmp    401274 <main+0xb2>\n  4011f7:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n  4011fa:\t83 e8 54             \tsub    $0x54,%eax\n  4011fd:\t83 f8 23             \tcmp    $0x23,%eax\n  401200:\t77 68                \tja     40126a <main+0xa8>\n  401202:\t89 c0                \tmov    %eax,%eax\n  401204:\t48 8b 04 c5 70 20 40 \tmov    0x402070(,%rax,8),%rax\n  40120b:\t00 \n  40120c:\tff e0                \tjmpq   *%rax\n  40120e:\t48 8b 05 6b 2e 00 00 \tmov    0x2e6b(%rip),%rax        # 404080 <optarg@@GLIBC_2.2.5>\n  401215:\t48 89 c7             \tmov    %rax,%rdi\n  401218:\te8 a3 fe ff ff       \tcallq  4010c0 <atoi@plt>\n  40121d:\t48 98                \tcltq   \n  40121f:\t48 c1 e0 14          \tshl    $0x14,%rax\n  401223:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  401227:\teb 4b                \tjmp    401274 <main+0xb2>\n  401229:\t48 8b 05 50 2e 00 00 \tmov    0x2e50(%rip),%rax        # 404080 <optarg@@GLIBC_2.2.5>\n  401230:\t48 89 c7             \tmov    %rax,%rdi\n  401233:\te8 88 fe ff ff       \tcallq  4010c0 <atoi@plt>\n  401238:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n  40123b:\teb 37                \tjmp    401274 <main+0xb2>\n  40123d:\t48 8b 05 3c 2e 00 00 \tmov    0x2e3c(%rip),%rax        # 404080 <optarg@@GLIBC_2.2.5>\n  401244:\t48 89 c7             \tmov    %rax,%rdi\n  401247:\te8 74 fe ff ff       \tcallq  4010c0 <atoi@plt>\n  40124c:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  40124f:\teb 23                \tjmp    401274 <main+0xb2>\n  401251:\tc7 45 ec 01 00 00 00 \tmovl   $0x1,-0x14(%rbp)\n  401258:\teb 1a                \tjmp    401274 <main+0xb2>\n  40125a:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  401261:\teb 11                \tjmp    401274 <main+0xb2>\n  401263:\tc7 45 dc 01 00 00 00 \tmovl   $0x1,-0x24(%rbp)\n  40126a:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  40126f:\te9 ad 01 00 00       \tjmpq   401421 <main+0x25f>\n  401274:\t48 8b 4d a0          \tmov    -0x60(%rbp),%rcx\n  401278:\t8b 45 ac             \tmov    -0x54(%rbp),%eax\n  40127b:\tba 08 20 40 00       \tmov    $0x402008,%edx\n  401280:\t48 89 ce             \tmov    %rcx,%rsi\n  401283:\t89 c7                \tmov    %eax,%edi\n  401285:\te8 26 fe ff ff       \tcallq  4010b0 <getopt@plt>\n  40128a:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n  40128d:\t83 7d d8 ff          \tcmpl   $0xffffffff,-0x28(%rbp)\n  401291:\t0f 85 60 ff ff ff    \tjne    4011f7 <main+0x35>\n  401297:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  40129a:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n  40129d:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4012a0:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  4012a3:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  4012a8:\tbf 18 20 40 00       \tmov    $0x402018,%edi\n  4012ad:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4012b2:\te8 c9 fd ff ff       \tcallq  401080 <open@plt>\n  4012b7:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  4012ba:\t83 7d d4 ff          \tcmpl   $0xffffffff,-0x2c(%rbp)\n  4012be:\t75 14                \tjne    4012d4 <main+0x112>\n  4012c0:\tbf 38 20 40 00       \tmov    $0x402038,%edi\n  4012c5:\te8 c6 fd ff ff       \tcallq  401090 <perror@plt>\n  4012ca:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4012cf:\te8 fc fd ff ff       \tcallq  4010d0 <exit@plt>\n  4012d4:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  4012d8:\t41 b9 00 00 00 00    \tmov    $0x0,%r9d\n  4012de:\t41 b8 ff ff ff ff    \tmov    $0xffffffff,%r8d\n  4012e4:\tb9 22 00 00 00       \tmov    $0x22,%ecx\n  4012e9:\tba 03 00 00 00       \tmov    $0x3,%edx\n  4012ee:\t48 89 c6             \tmov    %rax,%rsi\n  4012f1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4012f6:\te8 45 fd ff ff       \tcallq  401040 <mmap@plt>\n  4012fb:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  4012ff:\t48 83 7d e0 ff       \tcmpq   $0xffffffffffffffff,-0x20(%rbp)\n  401304:\t75 14                \tjne    40131a <main+0x158>\n  401306:\tbf 3d 20 40 00       \tmov    $0x40203d,%edi\n  40130b:\te8 80 fd ff ff       \tcallq  401090 <perror@plt>\n  401310:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401315:\te8 b6 fd ff ff       \tcallq  4010d0 <exit@plt>\n  40131a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40131e:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  401322:\t83 7d ec 01          \tcmpl   $0x1,-0x14(%rbp)\n  401326:\t75 1a                \tjne    401342 <main+0x180>\n  401328:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  40132c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401330:\tba 0e 00 00 00       \tmov    $0xe,%edx\n  401335:\t48 89 ce             \tmov    %rcx,%rsi\n  401338:\t48 89 c7             \tmov    %rax,%rdi\n  40133b:\te8 30 fd ff ff       \tcallq  401070 <madvise@plt>\n  401340:\teb 35                \tjmp    401377 <main+0x1b5>\n  401342:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  401346:\t75 2f                \tjne    401377 <main+0x1b5>\n  401348:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n  40134c:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401350:\tba 0f 00 00 00       \tmov    $0xf,%edx\n  401355:\t48 89 ce             \tmov    %rcx,%rsi\n  401358:\t48 89 c7             \tmov    %rax,%rdi\n  40135b:\te8 10 fd ff ff       \tcallq  401070 <madvise@plt>\n  401360:\teb 15                \tjmp    401377 <main+0x1b5>\n  401362:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401366:\tc6 00 00             \tmovb   $0x0,(%rax)\n  401369:\tbf 1e 00 00 00       \tmov    $0x1e,%edi\n  40136e:\te8 2d fd ff ff       \tcallq  4010a0 <sysconf@plt>\n  401373:\t48 01 45 e0          \tadd    %rax,-0x20(%rbp)\n  401377:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  40137b:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40137f:\t48 01 c2             \tadd    %rax,%rdx\n  401382:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  401386:\t48 39 c2             \tcmp    %rax,%rdx\n  401389:\t77 d7                \tja     401362 <main+0x1a0>\n  40138b:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  401392:\teb 7c                \tjmp    401410 <main+0x24e>\n  401394:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  401398:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  40139c:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  4013a0:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n  4013a3:\tbe 01 67 20 c0       \tmov    $0xc0206701,%esi\n  4013a8:\t89 c7                \tmov    %eax,%edi\n  4013aa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013af:\te8 ac fc ff ff       \tcallq  401060 <ioctl@plt>\n  4013b4:\t85 c0                \ttest   %eax,%eax\n  4013b6:\t74 14                \tje     4013cc <main+0x20a>\n  4013b8:\tbf 42 20 40 00       \tmov    $0x402042,%edi\n  4013bd:\te8 ce fc ff ff       \tcallq  401090 <perror@plt>\n  4013c2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4013c7:\te8 04 fd ff ff       \tcallq  4010d0 <exit@plt>\n  4013cc:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n  4013d0:\t48 89 c6             \tmov    %rax,%rsi\n  4013d3:\tbf 48 20 40 00       \tmov    $0x402048,%edi\n  4013d8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013dd:\te8 6e fc ff ff       \tcallq  401050 <printf@plt>\n  4013e2:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  4013e6:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n  4013ea:\t74 16                \tje     401402 <main+0x240>\n  4013ec:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n  4013f0:\t48 89 c6             \tmov    %rax,%rsi\n  4013f3:\tbf 56 20 40 00       \tmov    $0x402056,%edi\n  4013f8:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4013fd:\te8 4e fc ff ff       \tcallq  401050 <printf@plt>\n  401402:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  401407:\te8 24 fc ff ff       \tcallq  401030 <putchar@plt>\n  40140c:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  401410:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  401413:\t3b 45 e8             \tcmp    -0x18(%rbp),%eax\n  401416:\t0f 8c 78 ff ff ff    \tjl     401394 <main+0x1d2>\n  40141c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401421:\tc9                   \tleaveq \n  401422:\tc3                   \tretq   \n  401423:\t66 2e 0f 1f 84 00 00 \tnopw   %cs:0x0(%rax,%rax,1)\n  40142a:\t00 00 00 \n  40142d:\t0f 1f 00             \tnopl   (%rax)", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  __int64 <span class=\"supfact\">v4</span>;\n  char *v5;\n  size_t v6;\n  int v7;\n  int v8;\n  int fd;\n  int v10;\n  int v11;\n  void *addr;\n  int v13;\n  int v14;\n  int v15;\n  int i;\n  size_t len;\n  len = Number;\n  v15 = Number;\n  v14 = Number;\n  v13 = Number;\n  v11 = Number;\n  while (Number) {\n    v10 = getopt(argc, (char *const *)argv, String);\n    if (v10 == Number) {\n      v7 = v15;\n      v8 = v11;\n      fd = open(String, Number);\n      if (fd == Number) {\n        perror(String);\n        exit(Number);\n      }\n      addr = mmap(Number L, len, Number, Number, Number, Number L);\n      if (addr == (void *)Number) {\n        perror(String);\n        exit(Number);\n      }\n      v5 = (char *)addr;\n      if (v14 == Number) {\n        madvise(addr, len, Number);\n      } else if (!v14) {\n        madvise(addr, len, Number);\n      }\n      while (&v5[len] > addr) {\n        *(_BYTE *)addr = Number;\n        addr = (char *)addr + sysconf(Number);\n      }\n      for (i = Number; i < v13; ++i) {\n        v6 = len;\n        if (ioctl(fd, Number, &<span class=\"supfact\">v4</span>)) {\n          perror(String);\n          exit(Number);\n        }\n        printf(String, <span class=\"supfact\">v4</span>);\n        if (len != v6)\n          printf(String, v6);\n        putchar(Number);\n      }\n      result = Number;\n    } else {\n      switch (v10) {\n      case String:\n        v14 = Number;\n        continue;\n      case String:\n        len = (__int64)atoi(_bss_start) << Number;\n        continue;\n      case String:\n        v15 = atoi(_bss_start);\n        continue;\n      case String:\n        v13 = atoi(_bss_start);\n        continue;\n      case String:\n        v14 = Number;\n        continue;\n      case String:\n        v11 = Number;\n        break;\n      default:\n        break;\n      }\n      result = Number;\n    }\n    break;\n  }\n  return result;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  int result;\n  gup_benchmark <span class=\"supfact\">gup</span>;\n  int fd;\n  int opt;\n  int write;\n  char *p;\n  int repeats;\n  int thp;\n  int nr_pages;\n  int i;\n  unsigned __int64 size;\n  size = Number;\n  nr_pages = Number;\n  thp = Number;\n  repeats = Number;\n  write = Number;\n  while (Number) {\n    opt = getopt(argc, (char *const *)argv, String);\n    if (opt == Number) {\n      <span class=\"supfact\">gup</span>.nr_pages_per_call = nr_pages;\n      <span class=\"supfact\">gup</span>.flags = write;\n      fd = open(String, Number);\n      if (fd == Number) {\n        perror(String);\n        exit(Number);\n      }\n      p = (char *)mmap(Number L, size, Number, Number, Number, Number L);\n      if (p == (char *)Number) {\n        perror(String);\n        exit(Number);\n      }\n      <span class=\"supfact\">gup</span>.addr = (__u64)p;\n      if (thp == Number) {\n        madvise(p, size, Number);\n      } else if (!thp) {\n        madvise(p, size, Number);\n      }\n      while (size + <span class=\"supfact\">gup</span>.addr > (unsigned __int64)p) {\n        *p = Number;\n        p += sysconf(Number);\n      }\n      for (i = Number; i < repeats; ++i) {\n        <span class=\"supfact\">gup</span>.size = size;\n        if (ioctl(fd, Number, &<span class=\"supfact\">gup</span>)) {\n          perror(String);\n          exit(Number);\n        }\n        printf(String, <span class=\"supfact\">gup</span>.delta_usec);\n        if (size != <span class=\"supfact\">gup</span>.size)\n          printf(String, <span class=\"supfact\">gup</span>.size);\n        putchar(Number);\n      }\n      result = Number;\n    } else {\n      switch (opt) {\n      case String:\n        thp = Number;\n        continue;\n      case String:\n        size = (__int64)atoi(_bss_start) << Number;\n        continue;\n      case String:\n        nr_pages = atoi(_bss_start);\n        continue;\n      case String:\n        repeats = atoi(_bss_start);\n        continue;\n      case String:\n        thp = Number;\n        continue;\n      case String:\n        write = Number;\n        break;\n      default:\n        break;\n      }\n      result = Number;\n    }\n    break;\n  }\n  return result;\n}", "var": [{"name": "v4", "type": "__unk__", "pred_name": "state", "ref_name": "gup", "ref_type": "struct gup_benchmark { __u64 delta_usec; __u64 addr; __u64 size; __u32 nr_pages_per_call; __u32 flags; }"}], "body_in_train": false}, {"repo_owner": "rockchip-toybrick", "repo_name": "external-wpa_supplicant_8", "path": "rockchip-toybrick/external-wpa_supplicant_8/6c2672fab34303e61c1d7e93a0407c1791fe28b43ea8f5250feccdda94afd81e", "path_in_repo": "rockchip-toybrick/external-wpa_supplicant_8/hostapd/hostapd", "objdump": "000000000043ed8a <eapol_auth_tx_canned_eap>:\n  43ed8a:\t55                   \tpush   %rbp\n  43ed8b:\t48 89 e5             \tmov    %rsp,%rbp\n  43ed8e:\t48 83 ec 20          \tsub    $0x20,%rsp\n  43ed92:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  43ed96:\t89 75 e4             \tmov    %esi,-0x1c(%rbp)\n  43ed99:\t48 8d 45 fc          \tlea    -0x4(%rbp),%rax\n  43ed9d:\tba 04 00 00 00       \tmov    $0x4,%edx\n  43eda2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  43eda7:\t48 89 c7             \tmov    %rax,%rdi\n  43edaa:\te8 21 53 fc ff       \tcallq  4040d0 <memset@plt>\n  43edaf:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  43edb3:\t74 07                \tje     43edbc <eapol_auth_tx_canned_eap+0x32>\n  43edb5:\tb8 03 00 00 00       \tmov    $0x3,%eax\n  43edba:\teb 05                \tjmp    43edc1 <eapol_auth_tx_canned_eap+0x37>\n  43edbc:\tb8 04 00 00 00       \tmov    $0x4,%eax\n  43edc1:\t88 45 fc             \tmov    %al,-0x4(%rbp)\n  43edc4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43edc8:\t0f b6 80 20 01 00 00 \tmovzbl 0x120(%rax),%eax\n  43edcf:\t8d 50 01             \tlea    0x1(%rax),%edx\n  43edd2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43edd6:\t88 90 20 01 00 00    \tmov    %dl,0x120(%rax)\n  43eddc:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43ede0:\t0f b6 80 20 01 00 00 \tmovzbl 0x120(%rax),%eax\n  43ede7:\t88 45 fd             \tmov    %al,-0x3(%rbp)\n  43edea:\tbf 04 00 00 00       \tmov    $0x4,%edi\n  43edef:\te8 d2 fd ff ff       \tcallq  43ebc6 <__bswap_16>\n  43edf4:\t66 89 45 fe          \tmov    %ax,-0x2(%rbp)\n  43edf8:\t0f b6 45 fd          \tmovzbl -0x3(%rbp),%eax\n  43edfc:\t0f b6 d0             \tmovzbl %al,%edx\n  43edff:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n  43ee03:\t74 07                \tje     43ee0c <eapol_auth_tx_canned_eap+0x82>\n  43ee05:\tb9 78 90 46 00       \tmov    $0x469078,%ecx\n  43ee0a:\teb 05                \tjmp    43ee11 <eapol_auth_tx_canned_eap+0x87>\n  43ee0c:\tb9 80 90 46 00       \tmov    $0x469080,%ecx\n  43ee11:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43ee15:\t48 8d b0 fc 00 00 00 \tlea    0xfc(%rax),%rsi\n  43ee1c:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43ee20:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n  43ee27:\t41 89 d1             \tmov    %edx,%r9d\n  43ee2a:\t49 89 c8             \tmov    %rcx,%r8\n  43ee2d:\tb9 88 90 46 00       \tmov    $0x469088,%ecx\n  43ee32:\tba 00 00 00 00       \tmov    $0x0,%edx\n  43ee37:\t48 89 c7             \tmov    %rax,%rdi\n  43ee3a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  43ee3f:\te8 0d fe ff ff       \tcallq  43ec51 <eapol_auth_vlogger>\n  43ee44:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43ee48:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n  43ee4f:\t4c 8b 88 b8 00 00 00 \tmov    0xb8(%rax),%r9\n  43ee56:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43ee5a:\t48 8b b0 70 01 00 00 \tmov    0x170(%rax),%rsi\n  43ee61:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43ee65:\t48 8b 80 68 01 00 00 \tmov    0x168(%rax),%rax\n  43ee6c:\t48 8b 80 b0 00 00 00 \tmov    0xb0(%rax),%rax\n  43ee73:\t48 8d 55 fc          \tlea    -0x4(%rbp),%rdx\n  43ee77:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n  43ee7d:\t48 89 d1             \tmov    %rdx,%rcx\n  43ee80:\tba 00 00 00 00       \tmov    $0x0,%edx\n  43ee85:\t48 89 c7             \tmov    %rax,%rdi\n  43ee88:\t41 ff d1             \tcallq  *%r9\n  43ee8b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43ee8f:\t8b 80 d4 00 00 00    \tmov    0xd4(%rax),%eax\n  43ee95:\t8d 50 01             \tlea    0x1(%rax),%edx\n  43ee98:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  43ee9c:\t89 90 d4 00 00 00    \tmov    %edx,0xd4(%rax)\n  43eea2:\t90                   \tnop\n  43eea3:\tc9                   \tleaveq \n  43eea4:\tc3                   \tretq   ", "code_s": "__int64 __fastcall eapol_auth_tx_canned_eap(__int64 a1, int a2) {\n  char v2;\n  const char *v3;\n  __int64 result;\n  char <span class=\"supfact\">s</span>;\n  unsigned __int8 v6;\n  __int16 v7;\n  memset(&<span class=\"supfact\">s</span>, Number, Number);\n  if (a2)\n    v2 = Number;\n  else\n    v2 = Number;\n  <span class=\"supfact\">s</span> = v2;\n  v6 = ++*(_BYTE *)(a1 + Number);\n  v7 = _bswap_16_2(Number);\n  if (a2)\n    v3 = String;\n  else\n    v3 = String;\n  eapol_auth_vlogger(*(_QWORD *)(a1 + Number), a1 + Number, Number, String,\n                     (__int64)v3, v6);\n  (*(void(__fastcall **)(_QWORD, _QWORD, _QWORD, char *, __int64))(\n      *(_QWORD *)(a1 + Number) + Number L))(\n      *(_QWORD *)(*(_QWORD *)(a1 + Number) + Number L),\n      *(_QWORD *)(a1 + Number), Number L, &<span class=\"supfact\">s</span>, Number L);\n  result = a1;\n  ++*(_DWORD *)(a1 + Number);\n  return result;\n}", "code_t": "void __cdecl eapol_auth_tx_canned_eap(eapol_state_machine *sm, int success) {\n  u8 v2;\n  const char *v3;\n  eap_hdr <span class=\"supfact\">eap</span>;\n  memset(&<span class=\"supfact\">eap</span>, Number, sizeof(<span class=\"supfact\">eap</span>));\n  if (success)\n    v2 = Number;\n  else\n    v2 = Number;\n  <span class=\"supfact\">eap</span>.code = v2;\n  <span class=\"supfact\">eap</span>.identifier = ++sm->last_eap_id;\n  <span class=\"supfact\">eap</span>.length = _bswap_16_2(Number);\n  if (success)\n    v3 = String;\n  else\n    v3 = String;\n  eapol_auth_vlogger(sm->eapol, sm->addr, EAPOL_LOGGER_DEBUG, String, v3,\n                     <span class=\"supfact\">eap</span>.identifier);\n  sm->eapol->cb.eapol_send(sm->eapol->conf.ctx, sm->sta, Number L,\n                           (const u8 *)&<span class=\"supfact\">eap</span>, Number L);\n  ++sm->dot1xAuthEapolFramesTx;\n}", "var": [{"name": "s", "type": "u8", "pred_name": "__unk__", "ref_name": "eap", "ref_type": "struct eap_hdr { u8 code; u8 identifier; be16 length; }"}], "body_in_train": false}, {"repo_owner": "isDerek", "repo_name": "BTC-Device", "path": "isDerek/BTC-Device/9eb5bdb0143a63b31132ea31d83410eefa0b801b31f29f5ffc43fd093e6ca1ae", "path_in_repo": "isDerek/BTC-Device/BTC_APP/middleware/multicore/erpc/Debug/Linux/erpcsniffer/obj/erpcgen/src/types/Type.o", "objdump": "0000000000002676 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev>:\n    2676:\t55                   \tpush   %rbp\n    2677:\t48 89 e5             \tmov    %rsp,%rbp\n    267a:\t53                   \tpush   %rbx\n    267b:\t48 81 ec 18 01 00 00 \tsub    $0x118,%rsp\n    2682:\t48 89 bd e8 fe ff ff \tmov    %rdi,-0x118(%rbp)\n    2689:\t48 89 b5 e0 fe ff ff \tmov    %rsi,-0x120(%rbp)\n    2690:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    2697:\t48 89 c7             \tmov    %rax,%rdi\n    269a:\te8 00 00 00 00       \tcallq  269f <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x29>\n    269f:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    26a6:\t48 05 98 00 00 00    \tadd    $0x98,%rax\n    26ac:\t48 89 c6             \tmov    %rax,%rsi\n    26af:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    26b4:\te8 00 00 00 00       \tcallq  26b9 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x43>\n    26b9:\t84 c0                \ttest   %al,%al\n    26bb:\t74 22                \tje     26df <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x69>\n    26bd:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    26c4:\t48 8d 90 98 00 00 00 \tlea    0x98(%rax),%rdx\n    26cb:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    26d2:\t48 89 d6             \tmov    %rdx,%rsi\n    26d5:\t48 89 c7             \tmov    %rax,%rdi\n    26d8:\te8 00 00 00 00       \tcallq  26dd <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x67>\n    26dd:\teb 1e                \tjmp    26fd <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x87>\n    26df:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    26e6:\t8b 90 b8 00 00 00    \tmov    0xb8(%rax),%edx\n    26ec:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    26f3:\t89 d6                \tmov    %edx,%esi\n    26f5:\t48 89 c7             \tmov    %rax,%rdi\n    26f8:\te8 00 00 00 00       \tcallq  26fd <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x87>\n    26fd:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    2704:\t48 8d 95 20 ff ff ff \tlea    -0xe0(%rbp),%rdx\n    270b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2710:\t48 89 c7             \tmov    %rax,%rdi\n    2713:\te8 00 00 00 00       \tcallq  2718 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0xa2>\n    2718:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    271f:\t48 8d 8d 60 ff ff ff \tlea    -0xa0(%rbp),%rcx\n    2726:\tba 00 00 00 00       \tmov    $0x0,%edx\n    272b:\t48 89 ce             \tmov    %rcx,%rsi\n    272e:\t48 89 c7             \tmov    %rax,%rdi\n    2731:\te8 00 00 00 00       \tcallq  2736 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0xc0>\n    2736:\t48 8d 95 40 ff ff ff \tlea    -0xc0(%rbp),%rdx\n    273d:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    2744:\t48 89 d6             \tmov    %rdx,%rsi\n    2747:\t48 89 c7             \tmov    %rax,%rdi\n    274a:\te8 00 00 00 00       \tcallq  274f <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0xd9>\n    274f:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    2756:\t48 89 c7             \tmov    %rax,%rdi\n    2759:\te8 00 00 00 00       \tcallq  275e <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0xe8>\n    275e:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    2765:\t48 89 c7             \tmov    %rax,%rdi\n    2768:\te8 00 00 00 00       \tcallq  276d <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0xf7>\n    276d:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    2774:\t48 89 c7             \tmov    %rax,%rdi\n    2777:\te8 00 00 00 00       \tcallq  277c <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x106>\n    277c:\t84 c0                \ttest   %al,%al\n    277e:\t74 19                \tje     2799 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x123>\n    2780:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    2787:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    278c:\t48 89 c7             \tmov    %rax,%rdi\n    278f:\te8 00 00 00 00       \tcallq  2794 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x11e>\n    2794:\te9 8d 01 00 00       \tjmpq   2926 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x2b0>\n    2799:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    27a0:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    27a5:\t48 89 c7             \tmov    %rax,%rdi\n    27a8:\te8 00 00 00 00       \tcallq  27ad <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x137>\n    27ad:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    27b4:\t48 05 c0 00 00 00    \tadd    $0xc0,%rax\n    27ba:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    27be:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    27c2:\t48 89 c7             \tmov    %rax,%rdi\n    27c5:\te8 00 00 00 00       \tcallq  27ca <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x154>\n    27ca:\t48 89 85 18 ff ff ff \tmov    %rax,-0xe8(%rbp)\n    27d1:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    27d5:\t48 89 c7             \tmov    %rax,%rdi\n    27d8:\te8 00 00 00 00       \tcallq  27dd <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x167>\n    27dd:\t48 89 85 10 ff ff ff \tmov    %rax,-0xf0(%rbp)\n    27e4:\t48 8d 95 10 ff ff ff \tlea    -0xf0(%rbp),%rdx\n    27eb:\t48 8d 85 18 ff ff ff \tlea    -0xe8(%rbp),%rax\n    27f2:\t48 89 d6             \tmov    %rdx,%rsi\n    27f5:\t48 89 c7             \tmov    %rax,%rdi\n    27f8:\te8 00 00 00 00       \tcallq  27fd <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x187>\n    27fd:\t84 c0                \ttest   %al,%al\n    27ff:\t0f 84 0d 01 00 00    \tje     2912 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x29c>\n    2805:\t48 8d 85 18 ff ff ff \tlea    -0xe8(%rbp),%rax\n    280c:\t48 89 c7             \tmov    %rax,%rdi\n    280f:\te8 00 00 00 00       \tcallq  2814 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x19e>\n    2814:\t48 89 c2             \tmov    %rax,%rdx\n    2817:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    281e:\t48 89 d6             \tmov    %rdx,%rsi\n    2821:\t48 89 c7             \tmov    %rax,%rdi\n    2824:\te8 00 00 00 00       \tcallq  2829 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x1b3>\n    2829:\t48 8b 85 e0 fe ff ff \tmov    -0x120(%rbp),%rax\n    2830:\t48 8b 80 d8 00 00 00 \tmov    0xd8(%rax),%rax\n    2837:\t48 8d 95 f0 fe ff ff \tlea    -0x110(%rbp),%rdx\n    283e:\t48 89 d6             \tmov    %rdx,%rsi\n    2841:\t48 89 c7             \tmov    %rax,%rdi\n    2844:\te8 00 00 00 00       \tcallq  2849 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x1d3>\n    2849:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    284d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2851:\t48 89 c7             \tmov    %rax,%rdi\n    2854:\te8 00 00 00 00       \tcallq  2859 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x1e3>\n    2859:\t48 89 c7             \tmov    %rax,%rdi\n    285c:\te8 00 00 00 00       \tcallq  2861 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x1eb>\n    2861:\t48 89 c3             \tmov    %rax,%rbx\n    2864:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    2868:\t48 89 c7             \tmov    %rax,%rdi\n    286b:\te8 00 00 00 00       \tcallq  2870 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x1fa>\n    2870:\t48 89 c1             \tmov    %rax,%rcx\n    2873:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    2877:\tba 00 00 00 00       \tmov    $0x0,%edx\n    287c:\t48 89 ce             \tmov    %rcx,%rsi\n    287f:\t48 89 c7             \tmov    %rax,%rdi\n    2882:\te8 00 00 00 00       \tcallq  2887 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x211>\n    2887:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    288b:\t48 8d 4d c0          \tlea    -0x40(%rbp),%rcx\n    288f:\t48 89 da             \tmov    %rbx,%rdx\n    2892:\t48 89 ce             \tmov    %rcx,%rsi\n    2895:\t48 89 c7             \tmov    %rax,%rdi\n    2898:\te8 00 00 00 00       \tcallq  289d <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x227>\n    289d:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    28a1:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    28a5:\tba 00 00 00 00       \tmov    $0x0,%edx\n    28aa:\t48 89 ce             \tmov    %rcx,%rsi\n    28ad:\t48 89 c7             \tmov    %rax,%rdi\n    28b0:\te8 00 00 00 00       \tcallq  28b5 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x23f>\n    28b5:\t48 8d 55 80          \tlea    -0x80(%rbp),%rdx\n    28b9:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    28c0:\t48 89 d6             \tmov    %rdx,%rsi\n    28c3:\t48 89 c7             \tmov    %rax,%rdi\n    28c6:\te8 00 00 00 00       \tcallq  28cb <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x255>\n    28cb:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    28cf:\t48 89 c7             \tmov    %rax,%rdi\n    28d2:\te8 00 00 00 00       \tcallq  28d7 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x261>\n    28d7:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    28db:\t48 89 c7             \tmov    %rax,%rdi\n    28de:\te8 00 00 00 00       \tcallq  28e3 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x26d>\n    28e3:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    28e7:\t48 89 c7             \tmov    %rax,%rdi\n    28ea:\te8 00 00 00 00       \tcallq  28ef <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x279>\n    28ef:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    28f6:\t48 89 c7             \tmov    %rax,%rdi\n    28f9:\te8 00 00 00 00       \tcallq  28fe <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x288>\n    28fe:\t48 8d 85 18 ff ff ff \tlea    -0xe8(%rbp),%rax\n    2905:\t48 89 c7             \tmov    %rax,%rdi\n    2908:\te8 00 00 00 00       \tcallq  290d <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x297>\n    290d:\te9 d2 fe ff ff       \tjmpq   27e4 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x16e>\n    2912:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    2919:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    291e:\t48 89 c7             \tmov    %rax,%rdi\n    2921:\te8 00 00 00 00       \tcallq  2926 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x2b0>\n    2926:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    292d:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    2932:\t48 89 c7             \tmov    %rax,%rdi\n    2935:\te8 00 00 00 00       \tcallq  293a <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x2c4>\n    293a:\t90                   \tnop\n    293b:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    2942:\t48 89 c7             \tmov    %rax,%rdi\n    2945:\te8 00 00 00 00       \tcallq  294a <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x2d4>\n    294a:\te9 a0 00 00 00       \tjmpq   29ef <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x379>\n    294f:\t48 89 c3             \tmov    %rax,%rbx\n    2952:\t48 8d 85 40 ff ff ff \tlea    -0xc0(%rbp),%rax\n    2959:\t48 89 c7             \tmov    %rax,%rdi\n    295c:\te8 00 00 00 00       \tcallq  2961 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x2eb>\n    2961:\teb 03                \tjmp    2966 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x2f0>\n    2963:\t48 89 c3             \tmov    %rax,%rbx\n    2966:\t48 8d 85 60 ff ff ff \tlea    -0xa0(%rbp),%rax\n    296d:\t48 89 c7             \tmov    %rax,%rdi\n    2970:\te8 00 00 00 00       \tcallq  2975 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x2ff>\n    2975:\teb 4a                \tjmp    29c1 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x34b>\n    2977:\t48 89 c3             \tmov    %rax,%rbx\n    297a:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n    297e:\t48 89 c7             \tmov    %rax,%rdi\n    2981:\te8 00 00 00 00       \tcallq  2986 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x310>\n    2986:\teb 03                \tjmp    298b <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x315>\n    2988:\t48 89 c3             \tmov    %rax,%rbx\n    298b:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n    298f:\t48 89 c7             \tmov    %rax,%rdi\n    2992:\te8 00 00 00 00       \tcallq  2997 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x321>\n    2997:\teb 03                \tjmp    299c <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x326>\n    2999:\t48 89 c3             \tmov    %rax,%rbx\n    299c:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    29a0:\t48 89 c7             \tmov    %rax,%rdi\n    29a3:\te8 00 00 00 00       \tcallq  29a8 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x332>\n    29a8:\teb 03                \tjmp    29ad <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x337>\n    29aa:\t48 89 c3             \tmov    %rax,%rbx\n    29ad:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    29b4:\t48 89 c7             \tmov    %rax,%rdi\n    29b7:\te8 00 00 00 00       \tcallq  29bc <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x346>\n    29bc:\teb 03                \tjmp    29c1 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x34b>\n    29be:\t48 89 c3             \tmov    %rax,%rbx\n    29c1:\t48 8d 85 20 ff ff ff \tlea    -0xe0(%rbp),%rax\n    29c8:\t48 89 c7             \tmov    %rax,%rdi\n    29cb:\te8 00 00 00 00       \tcallq  29d0 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x35a>\n    29d0:\teb 03                \tjmp    29d5 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x35f>\n    29d2:\t48 89 c3             \tmov    %rax,%rbx\n    29d5:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    29dc:\t48 89 c7             \tmov    %rax,%rdi\n    29df:\te8 00 00 00 00       \tcallq  29e4 <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x36e>\n    29e4:\t48 89 d8             \tmov    %rbx,%rax\n    29e7:\t48 89 c7             \tmov    %rax,%rdi\n    29ea:\te8 00 00 00 00       \tcallq  29ef <_ZNK7erpcgen9UnionCase14getDescriptionB5cxx11Ev+0x379>\n    29ef:\t48 8b 85 e8 fe ff ff \tmov    -0x118(%rbp),%rax\n    29f6:\t48 81 c4 18 01 00 00 \tadd    $0x118,%rsp\n    29fd:\t5b                   \tpop    %rbx\n    29fe:\t5d                   \tpop    %rbp\n    29ff:\tc3                   \tretq   ", "code_s": "__int64 __fastcall erpcgen UnionCase getDescription[abi:cxx11](__int64 a1,\n                                                               __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  char <span class=\"supfact\">v7</span>[Number];\n  __int64 <span class=\"supfact\">v8</span>;\n  __int64 <span class=\"supfact\">v9</span>;\n  char <span class=\"supfact\">v10</span>[Number];\n  char <span class=\"supfact\">v11</span>[Number];\n  char <span class=\"supfact\">v12</span>[Number];\n  char <span class=\"supfact\">v13</span>[Number];\n  char <span class=\"supfact\">v14</span>[Number];\n  char <span class=\"supfact\">v15</span>[Number];\n  erpcgen StructMember *v16;\n  __int64 v17;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(a1);\n  if ((unsigned __int8)std operator!=<char>(&unk_3290, a2 + Number))\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(<span class=\"supfact\">v10</span>, a2 + Number);\n  else\n    std __cxx11 to_string((std __cxx11 *)<span class=\"supfact\">v10</span>,\n                          *(_DWORD *)(a2 + Number));\n  std operator+<char>(<span class=\"supfact\">v12</span>, String, <span class=\"supfact\">v10</span>);\n  std operator+<char>(<span class=\"supfact\">v11</span>, <span class=\"supfact\">v12</span>, String);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  operator+=(a1, <span class=\"supfact\">v11</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v11</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v12</span>);\n  if (erpcgen UnionCase caseMemberIsVoid((erpcgen UnionCase *)a2)) {\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator+=(a1, String);\n  } else {\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator+=(a1, String);\n    v17 = a2 + Number;\n    <span class=\"supfact\">v9</span> =\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>\n            begin(a2 + Number);\n    <span class=\"supfact\">v8</span> =\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>\n            end(v17);\n    while ((unsigned __int8)__gnu_cxx operator!=\n           <std __cxx11 basic_string<char, std char_traits<char>,\n                                     std allocator<char>> const *,\n            std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                                std allocator<char>>>>(\n               &<span class=\"supfact\">v9</span>, &<span class=\"supfact\">v8</span>)) {\n      v2 = __gnu_cxx __normal_iterator<\n          std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> const *,\n          std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>>>\n      operator*(&<span class=\"supfact\">v9</span>);\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          basic_string(<span class=\"supfact\">v7</span>, v2);\n      v16 = (erpcgen StructMember *)erpcgen UnionType getUnionMemberDeclaration(\n          *(_QWORD *)(a2 + Number), <span class=\"supfact\">v7</span>);\n      v3 = erpcgen StructMember getDataType(v16);\n      v4 = erpcgen Symbol getName[abi:cxx11](v3);\n      v5 = erpcgen Symbol getName[abi:cxx11](v16);\n      std operator+<char>(<span class=\"supfact\">v15</span>, v5, String);\n      std operator+<char>(<span class=\"supfact\">v14</span>, <span class=\"supfact\">v15</span>, v4);\n      std operator+<char>(<span class=\"supfact\">v13</span>, <span class=\"supfact\">v14</span>, String);\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      operator+=(a1, <span class=\"supfact\">v13</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(<span class=\"supfact\">v13</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(<span class=\"supfact\">v14</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(<span class=\"supfact\">v15</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(<span class=\"supfact\">v7</span>);\n      __gnu_cxx __normal_iterator<\n          std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> const *,\n          std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>>>\n      operator++(&<span class=\"supfact\">v9</span>);\n    }\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator+=(a1, String);\n  }\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  operator+=(a1, String);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(<span class=\"supfact\">v10</span>);\n  return a1;\n}", "code_t": "std string *__cdecl erpcgen\n    UnionCase getDescription[abi:cxx11](std string *retstr,\n                                        const erpcgen UnionCase *const this) {\n  __gnu_cxx __normal_iterator<\n      const std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *,\n      std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                          std allocator<char>>>>\n      reference v2;\n  erpcgen DataType *v3;\n  const std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *v4;\n  const std __cxx11\n      basic_string<char, std char_traits<char>, std allocator<char>> *v5;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">memberName</span>;\n  std vector<std __cxx11\n                 basic_string<char, std char_traits<char>, std allocator<char>>>\n      const_iterator <span class=\"supfact\">__for_end</span>;\n  std vector<std __cxx11\n                 basic_string<char, std char_traits<char>, std allocator<char>>>\n      const_iterator <span class=\"supfact\">__for_begin</span>;\n  std string <span class=\"supfact\">caseName</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">v11</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">__lhs</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">v13</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">v14</span>;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      <span class=\"supfact\">v15</span>;\n  erpcgen StructMember *member;\n  const std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>> *__for_range;\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      basic_string(retstr);\n  if (std operator!=<char>(_rhs, &this->m_caseName))\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n        basic_string(&<span class=\"supfact\">caseName</span>, &this->m_caseName);\n  else\n    std __cxx11 to_string(&<span class=\"supfact\">caseName</span>, this->m_caseValue);\n  std operator+\n      <char>(&<span class=\"supfact\">__lhs</span>, String, &<span class=\"supfact\">caseName</span>);\n  std operator+<char>(&<span class=\"supfact\">v11</span>, &<span class=\"supfact\">__lhs</span>, String);\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  operator+=(retstr, &<span class=\"supfact\">v11</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">v11</span>);\n  std __cxx11\n      basic_string<char, std char_traits<char>,\n                   std allocator<char>> ~basic_string(&<span class=\"supfact\">__lhs</span>);\n  if (erpcgen UnionCase caseMemberIsVoid(this)) {\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator+=(retstr, String);\n  } else {\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator+=(retstr, String);\n    __for_range = &this->m_memberDeclarationNames;\n    <span class=\"supfact\">__for_begin</span>._M_current =\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>\n            begin(&this->m_memberDeclarationNames)._M_current;\n    <span class=\"supfact\">__for_end</span>._M_current =\n        std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                            std allocator<char>>>\n            end(__for_range)._M_current;\n    while (__gnu_cxx operator!=\n           <std __cxx11 basic_string<char, std char_traits<char>,\n                                     std allocator<char>> const *,\n            std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                                std allocator<char>>>>(\n               &<span class=\"supfact\">__for_begin</span>, &<span class=\"supfact\">__for_end</span>)) {\n      v2 = __gnu_cxx __normal_iterator<\n          std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> const *,\n          std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>>>\n      operator*(&<span class=\"supfact\">__for_begin</span>);\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n          basic_string(&<span class=\"supfact\">memberName</span>, v2);\n      member = erpcgen UnionType getUnionMemberDeclaration(\n          this->m_containingUnion, &<span class=\"supfact\">memberName</span>);\n      v3 = erpcgen StructMember getDataType(member);\n      v4 = erpcgen Symbol getName[abi:cxx11](v3);\n      v5 = erpcgen Symbol getName[abi:cxx11](member);\n      std operator+<char>(&<span class=\"supfact\">v15</span>, v5, String);\n      std operator+<char>(&<span class=\"supfact\">v14</span>, &<span class=\"supfact\">v15</span>, v4);\n      std operator+<char>(&<span class=\"supfact\">v13</span>, &<span class=\"supfact\">v14</span>,\n                          (const char *)String);\n      std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n      operator+=(retstr, &<span class=\"supfact\">v13</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(&<span class=\"supfact\">v13</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(&<span class=\"supfact\">v14</span>);\n      std __cxx11\n          basic_string<char, std char_traits<char>,\n                       std allocator<char>> ~basic_string(&<span class=\"supfact\">v15</span>);\n      std __cxx11 basic_string<\n          char, std char_traits<char>,\n          std allocator<char>> ~basic_string(&<span class=\"supfact\">memberName</span>);\n      __gnu_cxx __normal_iterator<\n          std __cxx11 basic_string<char, std char_traits<char>,\n                                   std allocator<char>> const *,\n          std vector<std __cxx11 basic_string<char, std char_traits<char>,\n                                              std allocator<char>>>>\n      operator++(&<span class=\"supfact\">__for_begin</span>);\n    }\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n    operator+=(retstr, String);\n  }\n  std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>\n  operator+=(retstr, String);\n  std __cxx11 basic_string<\n      char, std char_traits<char>,\n      std allocator<char>> ~basic_string(&<span class=\"supfact\">caseName</span>);\n  return retstr;\n}", "var": [{"name": "v7", "type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "__unk__", "ref_name": "memberName", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v8", "type": "__unk__", "pred_name": "v8", "ref_name": "__for_end", "ref_type": "struct std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >>::const_iterator { const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}, {"name": "v9", "type": "__unk__", "pred_name": "v9", "ref_name": "__for_begin", "ref_type": "struct std::vector<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >>::const_iterator { const std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > * _M_current; }"}, {"name": "v10", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v10", "ref_name": "caseName", "ref_type": "struct std::string { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v11", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v11", "ref_name": "v11", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v12", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v12", "ref_name": "__lhs", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v13", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v13", "ref_name": "v13", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v14", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v14", "ref_name": "v14", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}, {"name": "v15", "type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }", "pred_name": "v15", "ref_name": "v15", "ref_type": "struct std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> > { std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider _M_dataplus; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::size_type _M_string_length; std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >::$CFBEC286C7F52157F7E59FC354047095 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "sconklin", "repo_name": "ltp-tools", "path": "sconklin/ltp-tools/cbb8df48ead8c5faf4a13142b295a78a62a530ef4771193df1a46b4423dc5f9b", "path_in_repo": "sconklin/ltp-tools/ltp-full-20110915/testcases/network/stress/ns-tools/ns-udpsender", "objdump": "000000000040182c <create_udp_datagram>:\n  40182c:\t55                   \tpush   %rbp\n  40182d:\t48 89 e5             \tmov    %rsp,%rbp\n  401830:\t48 81 ec b0 00 00 00 \tsub    $0xb0,%rsp\n  401837:\t48 89 bd 58 ff ff ff \tmov    %rdi,-0xa8(%rbp)\n  40183e:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n  401842:\tba 30 00 00 00       \tmov    $0x30,%edx\n  401847:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40184c:\t48 89 c7             \tmov    %rax,%rdi\n  40184f:\te8 ac f8 ff ff       \tcallq  401100 <memset@plt>\n  401854:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40185b:\t0f b7 40 08          \tmovzwl 0x8(%rax),%eax\n  40185f:\t0f b7 c0             \tmovzwl %ax,%eax\n  401862:\t89 45 b4             \tmov    %eax,-0x4c(%rbp)\n  401865:\tc7 45 b8 02 00 00 00 \tmovl   $0x2,-0x48(%rbp)\n  40186c:\tc7 45 bc 11 00 00 00 \tmovl   $0x11,-0x44(%rbp)\n  401873:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40187a:\t48 8b 70 20          \tmov    0x20(%rax),%rsi\n  40187e:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401885:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n  401889:\t48 8d 4d a8          \tlea    -0x58(%rbp),%rcx\n  40188d:\t48 8d 55 b0          \tlea    -0x50(%rbp),%rdx\n  401891:\t48 89 c7             \tmov    %rax,%rdi\n  401894:\te8 a7 f9 ff ff       \tcallq  401240 <getaddrinfo@plt>\n  401899:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  40189c:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  4018a0:\t74 30                \tje     4018d2 <create_udp_datagram+0xa6>\n  4018a2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4018a5:\t89 c7                \tmov    %eax,%edi\n  4018a7:\te8 34 f8 ff ff       \tcallq  4010e0 <gai_strerror@plt>\n  4018ac:\t48 89 c2             \tmov    %rax,%rdx\n  4018af:\t48 8b 05 ca 38 00 00 \tmov    0x38ca(%rip),%rax        # 405180 <stderr@@GLIBC_2.2.5>\n  4018b6:\tbe d8 34 40 00       \tmov    $0x4034d8,%esi\n  4018bb:\t48 89 c7             \tmov    %rax,%rdi\n  4018be:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4018c3:\te8 a8 f8 ff ff       \tcallq  401170 <fprintf@plt>\n  4018c8:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4018cd:\te8 4e f9 ff ff       \tcallq  401220 <exit@plt>\n  4018d2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4018d6:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n  4018da:\t48 85 c0             \ttest   %rax,%rax\n  4018dd:\t74 28                \tje     401907 <create_udp_datagram+0xdb>\n  4018df:\t48 8b 05 9a 38 00 00 \tmov    0x389a(%rip),%rax        # 405180 <stderr@@GLIBC_2.2.5>\n  4018e6:\t48 89 c1             \tmov    %rax,%rcx\n  4018e9:\tba 29 00 00 00       \tmov    $0x29,%edx\n  4018ee:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  4018f3:\tbf f0 34 40 00       \tmov    $0x4034f0,%edi\n  4018f8:\te8 33 f9 ff ff       \tcallq  401230 <fwrite@plt>\n  4018fd:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401902:\te8 19 f9 ff ff       \tcallq  401220 <exit@plt>\n  401907:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  40190b:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  40190e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  401912:\t8b 48 08             \tmov    0x8(%rax),%ecx\n  401915:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  401919:\t8b 40 04             \tmov    0x4(%rax),%eax\n  40191c:\t89 ce                \tmov    %ecx,%esi\n  40191e:\t89 c7                \tmov    %eax,%edi\n  401920:\te8 5b f9 ff ff       \tcallq  401280 <socket@plt>\n  401925:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  40192c:\t89 02                \tmov    %eax,(%rdx)\n  40192e:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401935:\t8b 00                \tmov    (%rax),%eax\n  401937:\t85 c0                \ttest   %eax,%eax\n  401939:\t79 0a                \tjns    401945 <create_udp_datagram+0x119>\n  40193b:\tbf 1a 35 40 00       \tmov    $0x40351a,%edi\n  401940:\te8 f1 03 00 00       \tcallq  401d36 <fatal_error>\n  401945:\tc7 85 7c ff ff ff 01 \tmovl   $0x1,-0x84(%rbp)\n  40194c:\t00 00 00 \n  40194f:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401956:\t8b 00                \tmov    (%rax),%eax\n  401958:\t48 8d 95 7c ff ff ff \tlea    -0x84(%rbp),%rdx\n  40195f:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n  401965:\t48 89 d1             \tmov    %rdx,%rcx\n  401968:\tba 02 00 00 00       \tmov    $0x2,%edx\n  40196d:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  401972:\t89 c7                \tmov    %eax,%edi\n  401974:\te8 07 f7 ff ff       \tcallq  401080 <setsockopt@plt>\n  401979:\t85 c0                \ttest   %eax,%eax\n  40197b:\t74 0a                \tje     401987 <create_udp_datagram+0x15b>\n  40197d:\tbf 23 35 40 00       \tmov    $0x403523,%edi\n  401982:\te8 af 03 00 00       \tcallq  401d36 <fatal_error>\n  401987:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  40198e:\t8b 40 04             \tmov    0x4(%rax),%eax\n  401991:\t85 c0                \ttest   %eax,%eax\n  401993:\t0f 84 02 01 00 00    \tje     401a9b <create_udp_datagram+0x26f>\n  401999:\t48 8d 85 70 ff ff ff \tlea    -0x90(%rbp),%rax\n  4019a0:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  4019a4:\t48 8d 85 6c ff ff ff \tlea    -0x94(%rbp),%rax\n  4019ab:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4019af:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4019b6:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n  4019ba:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4019c1:\t8b 30                \tmov    (%rax),%esi\n  4019c3:\t48 8d 45 80          \tlea    -0x80(%rbp),%rax\n  4019c7:\tb9 33 89 00 00       \tmov    $0x8933,%ecx\n  4019cc:\t48 89 c7             \tmov    %rax,%rdi\n  4019cf:\te8 29 08 00 00       \tcallq  4021fd <get_ifinfo>\n  4019d4:\t8b 45 90             \tmov    -0x70(%rbp),%eax\n  4019d7:\t89 85 6c ff ff ff    \tmov    %eax,-0x94(%rbp)\n  4019dd:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  4019e4:\t0f b7 40 08          \tmovzwl 0x8(%rax),%eax\n  4019e8:\t0f b7 c0             \tmovzwl %ax,%eax\n  4019eb:\t83 f8 02             \tcmp    $0x2,%eax\n  4019ee:\t74 0a                \tje     4019fa <create_udp_datagram+0x1ce>\n  4019f0:\t83 f8 0a             \tcmp    $0xa,%eax\n  4019f3:\t74 6b                \tje     401a60 <create_udp_datagram+0x234>\n  4019f5:\te9 a1 00 00 00       \tjmpq   401a9b <create_udp_datagram+0x26f>\n  4019fa:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  4019fe:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n  401a02:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401a06:\t8b 52 04             \tmov    0x4(%rdx),%edx\n  401a09:\t89 10                \tmov    %edx,(%rax)\n  401a0b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  401a10:\te8 db f6 ff ff       \tcallq  4010f0 <htonl@plt>\n  401a15:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  401a19:\t89 42 04             \tmov    %eax,0x4(%rdx)\n  401a1c:\t8b 95 6c ff ff ff    \tmov    -0x94(%rbp),%edx\n  401a22:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n  401a26:\t89 50 08             \tmov    %edx,0x8(%rax)\n  401a29:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401a30:\t8b 00                \tmov    (%rax),%eax\n  401a32:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n  401a36:\t41 b8 0c 00 00 00    \tmov    $0xc,%r8d\n  401a3c:\t48 89 d1             \tmov    %rdx,%rcx\n  401a3f:\tba 20 00 00 00       \tmov    $0x20,%edx\n  401a44:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  401a49:\t89 c7                \tmov    %eax,%edi\n  401a4b:\te8 30 f6 ff ff       \tcallq  401080 <setsockopt@plt>\n  401a50:\t85 c0                \ttest   %eax,%eax\n  401a52:\t74 43                \tje     401a97 <create_udp_datagram+0x26b>\n  401a54:\tbf 23 35 40 00       \tmov    $0x403523,%edi\n  401a59:\te8 d8 02 00 00       \tcallq  401d36 <fatal_error>\n  401a5e:\teb 37                \tjmp    401a97 <create_udp_datagram+0x26b>\n  401a60:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401a67:\t8b 00                \tmov    (%rax),%eax\n  401a69:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  401a6d:\t41 b8 04 00 00 00    \tmov    $0x4,%r8d\n  401a73:\t48 89 d1             \tmov    %rdx,%rcx\n  401a76:\tba 11 00 00 00       \tmov    $0x11,%edx\n  401a7b:\tbe 29 00 00 00       \tmov    $0x29,%esi\n  401a80:\t89 c7                \tmov    %eax,%edi\n  401a82:\te8 f9 f5 ff ff       \tcallq  401080 <setsockopt@plt>\n  401a87:\t85 c0                \ttest   %eax,%eax\n  401a89:\t74 0f                \tje     401a9a <create_udp_datagram+0x26e>\n  401a8b:\tbf 23 35 40 00       \tmov    $0x403523,%edi\n  401a90:\te8 a1 02 00 00       \tcallq  401d36 <fatal_error>\n  401a95:\teb 03                \tjmp    401a9a <create_udp_datagram+0x26e>\n  401a97:\t90                   \tnop\n  401a98:\teb 01                \tjmp    401a9b <create_udp_datagram+0x26f>\n  401a9a:\t90                   \tnop\n  401a9b:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401aa2:\t48 8b 40 60          \tmov    0x60(%rax),%rax\n  401aa6:\t48 89 c7             \tmov    %rax,%rdi\n  401aa9:\te8 02 f7 ff ff       \tcallq  4011b0 <malloc@plt>\n  401aae:\t48 89 c2             \tmov    %rax,%rdx\n  401ab1:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401ab8:\t48 89 50 58          \tmov    %rdx,0x58(%rax)\n  401abc:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401ac3:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  401ac7:\t48 85 c0             \ttest   %rax,%rax\n  401aca:\t75 14                \tjne    401ae0 <create_udp_datagram+0x2b4>\n  401acc:\tbf 30 35 40 00       \tmov    $0x403530,%edi\n  401ad1:\te8 60 02 00 00       \tcallq  401d36 <fatal_error>\n  401ad6:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401adb:\te8 40 f7 ff ff       \tcallq  401220 <exit@plt>\n  401ae0:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401ae7:\t48 8b 50 60          \tmov    0x60(%rax),%rdx\n  401aeb:\t48 8b 85 58 ff ff ff \tmov    -0xa8(%rbp),%rax\n  401af2:\t48 8b 40 58          \tmov    0x58(%rax),%rax\n  401af6:\t48 89 d6             \tmov    %rdx,%rsi\n  401af9:\t48 89 c7             \tmov    %rax,%rdi\n  401afc:\te8 a3 04 00 00       \tcallq  401fa4 <fill_payload>\n  401b01:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  401b05:\t48 8b 95 58 ff ff ff \tmov    -0xa8(%rbp),%rdx\n  401b0c:\t48 8d 4a 28          \tlea    0x28(%rdx),%rcx\n  401b10:\tba 30 00 00 00       \tmov    $0x30,%edx\n  401b15:\t48 89 c6             \tmov    %rax,%rsi\n  401b18:\t48 89 cf             \tmov    %rcx,%rdi\n  401b1b:\te8 70 f6 ff ff       \tcallq  401190 <memcpy@plt>\n  401b20:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  401b24:\t48 89 c7             \tmov    %rax,%rdi\n  401b27:\te8 44 f7 ff ff       \tcallq  401270 <freeaddrinfo@plt>\n  401b2c:\t90                   \tnop\n  401b2d:\tc9                   \tleaveq \n  401b2e:\tc3                   \tretq   ", "code_s": "void __fastcall create_udp_datagram(int *a1) {\n  const char *v1;\n  int v2;\n  int v3;\n  char <span class=\"supfact\">v4</span>;\n  int optval;\n  char <span class=\"supfact\">v6</span>[Number];\n  int v7;\n  struct addrinfo *pai;\n  struct addrinfo <span class=\"supfact\">s</span>;\n  void *v10;\n  void *v11;\n  int ecode;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  <span class=\"supfact\">s</span>.ai_family = *((unsigned __int16 *)a1 + Number);\n  <span class=\"supfact\">s</span>.ai_socktype = Number;\n  <span class=\"supfact\">s</span>.ai_protocol = Number;\n  ecode = getaddrinfo(*((const char **)a1 + Number),\n                      *((const char **)a1 + Number), &<span class=\"supfact\">s</span>, &pai);\n  if (ecode) {\n    v1 = gai_strerror(ecode);\n    fprintf(stderr, String, v1);\n    exit(Number);\n  }\n  if (pai->ai_next) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  *a1 = socket(pai->ai_family, pai->ai_socktype, pai->ai_protocol);\n  if (*a1 < Number)\n    fatal_error(String);\n  optval = Number;\n  if (setsockopt(*a1, Number, Number, &optval, Number))\n    fatal_error(String);\n  if (a1[Number]) {\n    v11 = &<span class=\"supfact\">v4</span>;\n    v10 = &v3;\n    get_ifinfo(<span class=\"supfact\">v6</span>, (unsigned int)*a1, *((_QWORD *)a1 + Number),\n               Number L);\n    v3 = v7;\n    v2 = *((unsigned __int16 *)a1 + Number);\n    if (v2 == Number) {\n      *(_DWORD *)v11 = *(_DWORD *)&pai->ai_addr->sa_data[Number];\n      *((_DWORD *)v11 + Number) = htonl(Number);\n      *((_DWORD *)v11 + Number) = v3;\n      if (setsockopt(*a1, Number, Number, v11, Number))\n        fatal_error(String);\n    } else if (v2 == Number && setsockopt(*a1, Number, Number, v10, Number)) {\n      fatal_error(String);\n    }\n  }\n  *((_QWORD *)a1 + Number) = malloc(*((_QWORD *)a1 + Number));\n  if (!*((_QWORD *)a1 + Number))\n    fatal_error(String);\n  fill_payload(*((_QWORD *)a1 + Number), *((_QWORD *)a1 + Number));\n  memcpy(a1 + Number, pai, Number);\n  freeaddrinfo(pai);\n}", "code_t": "void __cdecl create_udp_datagram(udp_info *udp_p) {\n  const char *v1;\n  int v2;\n  int ifindex;\n  ip_mreqn <span class=\"supfact\">mcast_req</span>;\n  int on;\n  ifreq <span class=\"supfact\">ifinfo</span>;\n  addrinfo *res;\n  addrinfo <span class=\"supfact\">hints</span>;\n  int *id_p;\n  ip_mreqn *req_p;\n  int err;\n  memset(&<span class=\"supfact\">hints</span>, Number, sizeof(<span class=\"supfact\">hints</span>));\n  <span class=\"supfact\">hints</span>.ai_family = udp_p->family;\n  <span class=\"supfact\">hints</span>.ai_socktype = Number;\n  <span class=\"supfact\">hints</span>.ai_protocol = Number;\n  err = getaddrinfo(udp_p->dst_name, udp_p->dst_port, &<span class=\"supfact\">hints</span>,\n                    &res);\n  if (err) {\n    v1 = gai_strerror(err);\n    fprintf(stderr, String, v1);\n    exit(Number);\n  }\n  if (res->ai_next) {\n    fwrite(String, Number, Number, stderr);\n    exit(Number);\n  }\n  udp_p->sd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n  if (udp_p->sd < Number)\n    fatal_error(String);\n  on = Number;\n  if (setsockopt(udp_p->sd, Number, Number, &on, Number))\n    fatal_error(String);\n  if (udp_p->is_multicast) {\n    req_p = &<span class=\"supfact\">mcast_req</span>;\n    id_p = &ifindex;\n    get_ifinfo(&<span class=\"supfact\">ifinfo</span>, udp_p->sd, udp_p->ifname, Number);\n    ifindex = <span class=\"supfact\">ifinfo</span>.ifr_ifru.ifru_ivalue;\n    v2 = udp_p->family;\n    if (v2 == Number) {\n      req_p->imr_multiaddr.s_addr = *(_DWORD *)&res->ai_addr->sa_data[Number];\n      req_p->imr_address.s_addr = htonl(Number);\n      req_p->imr_ifindex = ifindex;\n      if (setsockopt(udp_p->sd, Number, Number, req_p, Number))\n        fatal_error(String);\n    } else if (v2 == Number &&\n               setsockopt(udp_p->sd, Number, Number, id_p, Number)) {\n      fatal_error(String);\n    }\n  }\n  udp_p->msg = (unsigned __int8 *)malloc(udp_p->msgsize);\n  if (!udp_p->msg)\n    fatal_error(String);\n  fill_payload(udp_p->msg, udp_p->msgsize);\n  memcpy(&udp_p->addr_info, res, sizeof(udp_p->addr_info));\n  freeaddrinfo(res);\n}", "var": [{"name": "v4", "type": "int", "pred_name": "v4", "ref_name": "mcast_req", "ref_type": "struct ip_mreqn { in_addr imr_multiaddr; in_addr imr_address; int imr_ifindex; }"}, {"name": "v6", "type": "char[16]", "pred_name": "__unk__", "ref_name": "ifinfo", "ref_type": "struct ifreq { $EC3FB77B1F5CBB3C6B6AB4B4CE5B261D ifr_ifrn; $3766CEB1D20AE6FB37CD7F05C4AF9C4E ifr_ifru; }"}, {"name": "s", "type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }", "pred_name": "hints", "ref_name": "hints", "ref_type": "struct addrinfo { int ai_flags; int ai_family; int ai_socktype; int ai_protocol; socklen_t ai_addrlen; PADDING (4); sockaddr * ai_addr; char * ai_canonname; addrinfo * ai_next; }"}], "body_in_train": false}, {"repo_owner": "anthony-kolesov", "repo_name": "arc_ltp", "path": "anthony-kolesov/arc_ltp/0f030126ced3ab7e15a41b1fa5a985721a6373dd2b7679ac80b42ba4fad6d096", "path_in_repo": "anthony-kolesov/arc_ltp/testcases/open_posix_testsuite/conformance/interfaces/lio_listio/3-1.run-test", "objdump": "000000000040129d <main>:\n  40129d:\t55                   \tpush   %rbp\n  40129e:\t48 89 e5             \tmov    %rsp,%rbp\n  4012a1:\t53                   \tpush   %rbx\n  4012a2:\t48 81 ec 58 02 00 00 \tsub    $0x258,%rsp\n  4012a9:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n  4012b0:\tbf 0c 00 00 00       \tmov    $0xc,%edi\n  4012b5:\te8 76 fe ff ff       \tcallq  401130 <sysconf@plt>\n  4012ba:\t48 3d af 0d 03 00    \tcmp    $0x30daf,%rax\n  4012c0:\t7f 0a                \tjg     4012cc <main+0x2f>\n  4012c2:\tbf 04 00 00 00       \tmov    $0x4,%edi\n  4012c7:\te8 84 fe ff ff       \tcallq  401150 <exit@plt>\n  4012cc:\te8 bf fd ff ff       \tcallq  401090 <getpid@plt>\n  4012d1:\t89 c2                \tmov    %eax,%edx\n  4012d3:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n  4012da:\t89 d1                \tmov    %edx,%ecx\n  4012dc:\tba 08 20 40 00       \tmov    $0x402008,%edx\n  4012e1:\tbe 00 01 00 00       \tmov    $0x100,%esi\n  4012e6:\t48 89 c7             \tmov    %rax,%rdi\n  4012e9:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4012ee:\te8 cd fd ff ff       \tcallq  4010c0 <snprintf@plt>\n  4012f3:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n  4012fa:\t48 89 c7             \tmov    %rax,%rdi\n  4012fd:\te8 4e fd ff ff       \tcallq  401050 <unlink@plt>\n  401302:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n  401309:\tba 80 01 00 00       \tmov    $0x180,%edx\n  40130e:\tbe c2 00 00 00       \tmov    $0xc2,%esi\n  401313:\t48 89 c7             \tmov    %rax,%rdi\n  401316:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40131b:\te8 00 fe ff ff       \tcallq  401120 <open@plt>\n  401320:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n  401323:\t83 7d e4 ff          \tcmpl   $0xffffffff,-0x1c(%rbp)\n  401327:\t75 2a                \tjne    401353 <main+0xb6>\n  401329:\te8 12 fd ff ff       \tcallq  401040 <__errno_location@plt>\n  40132e:\t8b 00                \tmov    (%rax),%eax\n  401330:\t89 c7                \tmov    %eax,%edi\n  401332:\te8 29 fe ff ff       \tcallq  401160 <strerror@plt>\n  401337:\t48 89 c6             \tmov    %rax,%rsi\n  40133a:\tbf 28 20 40 00       \tmov    $0x402028,%edi\n  40133f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401344:\te8 67 fd ff ff       \tcallq  4010b0 <printf@plt>\n  401349:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40134e:\te8 fd fd ff ff       \tcallq  401150 <exit@plt>\n  401353:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n  40135a:\t48 89 c7             \tmov    %rax,%rdi\n  40135d:\te8 ee fc ff ff       \tcallq  401050 <unlink@plt>\n  401362:\tbf 00 28 00 00       \tmov    $0x2800,%edi\n  401367:\te8 94 fd ff ff       \tcallq  401100 <malloc@plt>\n  40136c:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n  401370:\t48 83 7d d8 00       \tcmpq   $0x0,-0x28(%rbp)\n  401375:\t75 34                \tjne    4013ab <main+0x10e>\n  401377:\te8 c4 fc ff ff       \tcallq  401040 <__errno_location@plt>\n  40137c:\t8b 00                \tmov    (%rax),%eax\n  40137e:\t89 c7                \tmov    %eax,%edi\n  401380:\te8 db fd ff ff       \tcallq  401160 <strerror@plt>\n  401385:\t48 89 c6             \tmov    %rax,%rsi\n  401388:\tbf 50 20 40 00       \tmov    $0x402050,%edi\n  40138d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401392:\te8 19 fd ff ff       \tcallq  4010b0 <printf@plt>\n  401397:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40139a:\t89 c7                \tmov    %eax,%edi\n  40139c:\te8 3f fd ff ff       \tcallq  4010e0 <close@plt>\n  4013a1:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  4013a6:\te8 a5 fd ff ff       \tcallq  401150 <exit@plt>\n  4013ab:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  4013b2:\te9 f2 00 00 00       \tjmpq   4014a9 <main+0x20c>\n  4013b7:\tbf a8 00 00 00       \tmov    $0xa8,%edi\n  4013bc:\te8 3f fd ff ff       \tcallq  401100 <malloc@plt>\n  4013c1:\t48 89 c2             \tmov    %rax,%rdx\n  4013c4:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4013c7:\t48 98                \tcltq   \n  4013c9:\t48 89 94 c5 80 fe ff \tmov    %rdx,-0x180(%rbp,%rax,8)\n  4013d0:\tff \n  4013d1:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4013d4:\t48 98                \tcltq   \n  4013d6:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  4013dd:\tff \n  4013de:\tba a8 00 00 00       \tmov    $0xa8,%edx\n  4013e3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4013e8:\t48 89 c7             \tmov    %rax,%rdi\n  4013eb:\te8 e0 fc ff ff       \tcallq  4010d0 <memset@plt>\n  4013f0:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4013f3:\t48 98                \tcltq   \n  4013f5:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  4013fc:\tff \n  4013fd:\t8b 55 e4             \tmov    -0x1c(%rbp),%edx\n  401400:\t89 10                \tmov    %edx,(%rax)\n  401402:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401405:\t48 98                \tcltq   \n  401407:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  40140e:\tff \n  40140f:\t48 c7 80 80 00 00 00 \tmovq   $0x0,0x80(%rax)\n  401416:\t00 00 00 00 \n  40141a:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40141d:\tc1 e0 0a             \tshl    $0xa,%eax\n  401420:\t48 63 c8             \tmovslq %eax,%rcx\n  401423:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401426:\t48 98                \tcltq   \n  401428:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  40142f:\tff \n  401430:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n  401434:\t48 01 ca             \tadd    %rcx,%rdx\n  401437:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n  40143b:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40143e:\t48 98                \tcltq   \n  401440:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  401447:\tff \n  401448:\t48 c7 40 18 00 04 00 \tmovq   $0x400,0x18(%rax)\n  40144f:\t00 \n  401450:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401453:\t48 98                \tcltq   \n  401455:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  40145c:\tff \n  40145d:\tc7 40 04 01 00 00 00 \tmovl   $0x1,0x4(%rax)\n  401464:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401467:\t48 98                \tcltq   \n  401469:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  401470:\tff \n  401471:\tc7 40 2c 00 00 00 00 \tmovl   $0x0,0x2c(%rax)\n  401478:\te8 c3 fc ff ff       \tcallq  401140 <__libc_current_sigrtmin@plt>\n  40147d:\t89 c2                \tmov    %eax,%edx\n  40147f:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401482:\t48 98                \tcltq   \n  401484:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  40148b:\tff \n  40148c:\t83 c2 01             \tadd    $0x1,%edx\n  40148f:\t89 50 28             \tmov    %edx,0x28(%rax)\n  401492:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401495:\t48 98                \tcltq   \n  401497:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  40149e:\tff \n  40149f:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n  4014a2:\t89 50 20             \tmov    %edx,0x20(%rax)\n  4014a5:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  4014a9:\t83 7d e8 09          \tcmpl   $0x9,-0x18(%rbp)\n  4014ad:\t0f 8e 04 ff ff ff    \tjle    4013b7 <main+0x11a>\n  4014b3:\tc7 85 ac fd ff ff 00 \tmovl   $0x0,-0x254(%rbp)\n  4014ba:\t00 00 00 \n  4014bd:\te8 7e fc ff ff       \tcallq  401140 <__libc_current_sigrtmin@plt>\n  4014c2:\t83 c0 02             \tadd    $0x2,%eax\n  4014c5:\t89 85 a8 fd ff ff    \tmov    %eax,-0x258(%rbp)\n  4014cb:\t48 c7 85 a0 fd ff ff \tmovq   $0x0,-0x260(%rbp)\n  4014d2:\t00 00 00 00 \n  4014d6:\t48 c7 85 e0 fd ff ff \tmovq   $0x401262,-0x220(%rbp)\n  4014dd:\t62 12 40 00 \n  4014e1:\t48 8d 85 e0 fd ff ff \tlea    -0x220(%rbp),%rax\n  4014e8:\t48 83 c0 08          \tadd    $0x8,%rax\n  4014ec:\t48 89 c7             \tmov    %rax,%rdi\n  4014ef:\te8 fc fb ff ff       \tcallq  4010f0 <sigemptyset@plt>\n  4014f4:\tc7 85 68 fe ff ff 04 \tmovl   $0x10000004,-0x198(%rbp)\n  4014fb:\t00 00 10 \n  4014fe:\te8 3d fc ff ff       \tcallq  401140 <__libc_current_sigrtmin@plt>\n  401503:\t8d 48 01             \tlea    0x1(%rax),%ecx\n  401506:\t48 8d 85 e0 fd ff ff \tlea    -0x220(%rbp),%rax\n  40150d:\tba 00 00 00 00       \tmov    $0x0,%edx\n  401512:\t48 89 c6             \tmov    %rax,%rsi\n  401515:\t89 cf                \tmov    %ecx,%edi\n  401517:\te8 64 fb ff ff       \tcallq  401080 <sigaction@plt>\n  40151c:\t48 c7 85 e0 fd ff ff \tmovq   $0x401281,-0x220(%rbp)\n  401523:\t81 12 40 00 \n  401527:\t48 8d 85 e0 fd ff ff \tlea    -0x220(%rbp),%rax\n  40152e:\t48 83 c0 08          \tadd    $0x8,%rax\n  401532:\t48 89 c7             \tmov    %rax,%rdi\n  401535:\te8 b6 fb ff ff       \tcallq  4010f0 <sigemptyset@plt>\n  40153a:\tc7 85 68 fe ff ff 04 \tmovl   $0x10000004,-0x198(%rbp)\n  401541:\t00 00 10 \n  401544:\te8 f7 fb ff ff       \tcallq  401140 <__libc_current_sigrtmin@plt>\n  401549:\t8d 48 02             \tlea    0x2(%rax),%ecx\n  40154c:\t48 8d 85 e0 fd ff ff \tlea    -0x220(%rbp),%rax\n  401553:\tba 00 00 00 00       \tmov    $0x0,%edx\n  401558:\t48 89 c6             \tmov    %rax,%rsi\n  40155b:\t89 cf                \tmov    %ecx,%edi\n  40155d:\te8 1e fb ff ff       \tcallq  401080 <sigaction@plt>\n  401562:\t48 8d 95 a0 fd ff ff \tlea    -0x260(%rbp),%rdx\n  401569:\t48 8d 85 80 fe ff ff \tlea    -0x180(%rbp),%rax\n  401570:\t48 89 d1             \tmov    %rdx,%rcx\n  401573:\tba 0a 00 00 00       \tmov    $0xa,%edx\n  401578:\t48 89 c6             \tmov    %rax,%rsi\n  40157b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401580:\te8 db fa ff ff       \tcallq  401060 <lio_listio@plt>\n  401585:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  401588:\t83 7d d4 00          \tcmpl   $0x0,-0x2c(%rbp)\n  40158c:\t74 7e                \tje     40160c <main+0x36f>\n  40158e:\te8 ad fa ff ff       \tcallq  401040 <__errno_location@plt>\n  401593:\t8b 00                \tmov    (%rax),%eax\n  401595:\t89 c7                \tmov    %eax,%edi\n  401597:\te8 c4 fb ff ff       \tcallq  401160 <strerror@plt>\n  40159c:\t48 89 c3             \tmov    %rax,%rbx\n  40159f:\te8 9c fa ff ff       \tcallq  401040 <__errno_location@plt>\n  4015a4:\t8b 00                \tmov    (%rax),%eax\n  4015a6:\t48 89 da             \tmov    %rbx,%rdx\n  4015a9:\t89 c6                \tmov    %eax,%esi\n  4015ab:\tbf 78 20 40 00       \tmov    $0x402078,%edi\n  4015b0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4015b5:\te8 f6 fa ff ff       \tcallq  4010b0 <printf@plt>\n  4015ba:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  4015c1:\teb 19                \tjmp    4015dc <main+0x33f>\n  4015c3:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4015c6:\t48 98                \tcltq   \n  4015c8:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  4015cf:\tff \n  4015d0:\t48 89 c7             \tmov    %rax,%rdi\n  4015d3:\te8 58 fa ff ff       \tcallq  401030 <free@plt>\n  4015d8:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  4015dc:\t83 7d e8 09          \tcmpl   $0x9,-0x18(%rbp)\n  4015e0:\t7e e1                \tjle    4015c3 <main+0x326>\n  4015e2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4015e6:\t48 89 c7             \tmov    %rax,%rdi\n  4015e9:\te8 42 fa ff ff       \tcallq  401030 <free@plt>\n  4015ee:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4015f1:\t89 c7                \tmov    %eax,%edi\n  4015f3:\te8 e8 fa ff ff       \tcallq  4010e0 <close@plt>\n  4015f8:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4015fd:\te8 4e fb ff ff       \tcallq  401150 <exit@plt>\n  401602:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  401607:\te8 64 fb ff ff       \tcallq  401170 <sleep@plt>\n  40160c:\t8b 05 c6 2a 00 00    \tmov    0x2ac6(%rip),%eax        # 4040d8 <received_all>\n  401612:\t85 c0                \ttest   %eax,%eax\n  401614:\t74 ec                \tje     401602 <main+0x365>\n  401616:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n  40161d:\teb 76                \tjmp    401695 <main+0x3f8>\n  40161f:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401622:\t48 98                \tcltq   \n  401624:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  40162b:\tff \n  40162c:\t48 89 c7             \tmov    %rax,%rdi\n  40162f:\te8 6c fa ff ff       \tcallq  4010a0 <aio_error@plt>\n  401634:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n  401637:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40163a:\t48 98                \tcltq   \n  40163c:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  401643:\tff \n  401644:\t48 89 c7             \tmov    %rax,%rdi\n  401647:\te8 c4 fa ff ff       \tcallq  401110 <aio_return@plt>\n  40164c:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n  40164f:\t83 7d d0 00          \tcmpl   $0x0,-0x30(%rbp)\n  401653:\t74 27                \tje     40167c <main+0x3df>\n  401655:\t81 7d d4 00 04 00 00 \tcmpl   $0x400,-0x2c(%rbp)\n  40165c:\t74 1e                \tje     40167c <main+0x3df>\n  40165e:\t8b 4d d4             \tmov    -0x2c(%rbp),%ecx\n  401661:\t8b 55 d0             \tmov    -0x30(%rbp),%edx\n  401664:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  401667:\t89 c6                \tmov    %eax,%esi\n  401669:\tbf a8 20 40 00       \tmov    $0x4020a8,%edi\n  40166e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  401673:\te8 38 fa ff ff       \tcallq  4010b0 <printf@plt>\n  401678:\t83 45 ec 01          \taddl   $0x1,-0x14(%rbp)\n  40167c:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40167f:\t48 98                \tcltq   \n  401681:\t48 8b 84 c5 80 fe ff \tmov    -0x180(%rbp,%rax,8),%rax\n  401688:\tff \n  401689:\t48 89 c7             \tmov    %rax,%rdi\n  40168c:\te8 9f f9 ff ff       \tcallq  401030 <free@plt>\n  401691:\t83 45 e8 01          \taddl   $0x1,-0x18(%rbp)\n  401695:\t83 7d e8 09          \tcmpl   $0x9,-0x18(%rbp)\n  401699:\t7e 84                \tjle    40161f <main+0x382>\n  40169b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  40169f:\t48 89 c7             \tmov    %rax,%rdi\n  4016a2:\te8 89 f9 ff ff       \tcallq  401030 <free@plt>\n  4016a7:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4016aa:\t89 c7                \tmov    %eax,%edi\n  4016ac:\te8 2f fa ff ff       \tcallq  4010e0 <close@plt>\n  4016b1:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n  4016b5:\t74 0a                \tje     4016c1 <main+0x424>\n  4016b7:\tbf 01 00 00 00       \tmov    $0x1,%edi\n  4016bc:\te8 8f fa ff ff       \tcallq  401150 <exit@plt>\n  4016c1:\tbf db 20 40 00       \tmov    $0x4020db,%edi\n  4016c6:\te8 a5 f9 ff ff       \tcallq  401070 <puts@plt>\n  4016cb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  4016d0:\t48 81 c4 58 02 00 00 \tadd    $0x258,%rsp\n  4016d7:\t5b                   \tpop    %rbx\n  4016d8:\t5d                   \tpop    %rbp\n  4016d9:\tc3                   \tretq   \n  4016da:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  unsigned int v3;\n  int *v4;\n  char *v5;\n  int *v6;\n  char *v7;\n  int v8;\n  int v9;\n  int *v10;\n  char *v11;\n  int *v12;\n  struct sigevent <span class=\"supfact\">sig</span>;\n  struct sigaction <span class=\"supfact\">v15</span>;\n  struct aiocb *list[Number];\n  char s[Number];\n  unsigned int v18;\n  unsigned int v19;\n  void *ptr;\n  int fd;\n  int i;\n  int v23;\n  v23 = Number;\n  if (sysconf(Number) <= Number)\n    exit(Number);\n  v3 = getpid();\n  snprintf(s, Number, String, v3);\n  unlink(s);\n  fd = open(s, Number, Number L);\n  if (fd == Number) {\n    v4 = __errno_location();\n    v5 = strerror(*v4);\n    printf(String, v5);\n    exit(Number);\n  }\n  unlink(s);\n  ptr = malloc(Number);\n  if (!ptr) {\n    v6 = __errno_location();\n    v7 = strerror(*v6);\n    printf(String, v7);\n    close(fd);\n    exit(Number);\n  }\n  for (i = Number; i <= Number; ++i) {\n    list[i] = (struct aiocb *)malloc(Number);\n    memset(list[i], Number, sizeof(struct aiocb));\n    list[i]->aio_fildes = fd;\n    list[i]->aio_offset = Number L;\n    list[i]->aio_buf = (char *)ptr + Number * i;\n    list[i]->aio_nbytes = Number L;\n    list[i]->aio_lio_opcode = Number;\n    list[i]->aio_sigevent.sigev_notify = Number;\n    list[i]->aio_sigevent.sigev_signo = __libc_current_sigrtmin() + Number;\n    list[i]->aio_sigevent.sigev_value.sival_int = i;\n  }\n  <span class=\"supfact\">sig</span>.sigev_notify = Number;\n  <span class=\"supfact\">sig</span>.sigev_signo = __libc_current_sigrtmin() + Number;\n  <span class=\"supfact\">sig</span>.sigev_value.sival_ptr = Number L;\n  <span class=\"supfact\">v15</span>.sa_handler = (__sighandler_t)sigrt1_handler;\n  sigemptyset(&<span class=\"supfact\">v15</span>.sa_mask);\n  <span class=\"supfact\">v15</span>.sa_flags = Number;\n  v8 = __libc_current_sigrtmin();\n  sigaction(v8 + Number, &<span class=\"supfact\">v15</span>, Number L);\n  <span class=\"supfact\">v15</span>.sa_handler = (__sighandler_t)sigrt2_handler;\n  sigemptyset(&<span class=\"supfact\">v15</span>.sa_mask);\n  <span class=\"supfact\">v15</span>.sa_flags = Number;\n  v9 = __libc_current_sigrtmin();\n  sigaction(v9 + Number, &<span class=\"supfact\">v15</span>, Number L);\n  v19 = lio_listio(Number, list, Number, &<span class=\"supfact\">sig</span>);\n  if (v19) {\n    v10 = __errno_location();\n    v11 = strerror(*v10);\n    v12 = __errno_location();\n    printf(String, (unsigned int)*v12, v11);\n    for (i = Number; i <= Number; ++i)\n      free(list[i]);\n    free(ptr);\n    close(fd);\n    exit(Number);\n  }\n  while (!received_all)\n    sleep(Number);\n  for (i = Number; i <= Number; ++i) {\n    v18 = aio_error(list[i]);\n    v19 = aio_return(list[i]);\n    if (v18 && v19 != Number) {\n      printf(String, (unsigned int)i, v18, v19);\n      ++v23;\n    }\n    free(list[i]);\n  }\n  free(ptr);\n  close(fd);\n  if (v23)\n    exit(Number);\n  puts(String);\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  unsigned int v3;\n  int *v4;\n  char *v5;\n  int *v6;\n  char *v7;\n  int v8;\n  int v9;\n  int *v10;\n  char *v11;\n  int *v12;\n  sigevent <span class=\"supfact\">event</span>;\n  sigaction <span class=\"supfact\">action</span>;\n  aiocb *aiocbs[Number];\n  char tmpfname[Number];\n  int err;\n  int ret;\n  char *bufs;\n  int fd;\n  int i;\n  int errors;\n  errors = Number;\n  if (sysconf(Number) <= Number)\n    exit(Number);\n  v3 = getpid();\n  snprintf(tmpfname, Number, String, v3);\n  unlink(tmpfname);\n  fd = open(tmpfname, Number, Number L);\n  if (fd == Number) {\n    v4 = __errno_location();\n    v5 = strerror(*v4);\n    printf(String, v5);\n    exit(Number);\n  }\n  unlink(tmpfname);\n  bufs = (char *)malloc(Number);\n  if (!bufs) {\n    v6 = __errno_location();\n    v7 = strerror(*v6);\n    printf(String, v7);\n    close(fd);\n    exit(Number);\n  }\n  for (i = Number; i <= Number; ++i) {\n    aiocbs[i] = (aiocb *)malloc(Number);\n    memset(aiocbs[i], Number, sizeof(aiocb));\n    aiocbs[i]->aio_fildes = fd;\n    aiocbs[i]->aio_offset = Number L;\n    aiocbs[i]->aio_buf = &bufs[Number * i];\n    aiocbs[i]->aio_nbytes = Number L;\n    aiocbs[i]->aio_lio_opcode = Number;\n    aiocbs[i]->aio_sigevent.sigev_notify = Number;\n    aiocbs[i]->aio_sigevent.sigev_signo = __libc_current_sigrtmin() + Number;\n    aiocbs[i]->aio_sigevent.sigev_value.sival_int = i;\n  }\n  <span class=\"supfact\">event</span>.sigev_notify = Number;\n  <span class=\"supfact\">event</span>.sigev_signo = __libc_current_sigrtmin() + Number;\n  <span class=\"supfact\">event</span>.sigev_value.sival_ptr = Number L;\n  <span class=\"supfact\">action</span>.sa_handler = (__sighandler_t)sigrt1_handler;\n  sigemptyset(&<span class=\"supfact\">action</span>.sa_mask);\n  <span class=\"supfact\">action</span>.sa_flags = Number;\n  v8 = __libc_current_sigrtmin();\n  sigaction(v8 + Number, &<span class=\"supfact\">action</span>, Number L);\n  <span class=\"supfact\">action</span>.sa_handler = (__sighandler_t)sigrt2_handler;\n  sigemptyset(&<span class=\"supfact\">action</span>.sa_mask);\n  <span class=\"supfact\">action</span>.sa_flags = Number;\n  v9 = __libc_current_sigrtmin();\n  sigaction(v9 + Number, &<span class=\"supfact\">action</span>, Number L);\n  ret = lio_listio(Number, aiocbs, Number, &<span class=\"supfact\">event</span>);\n  if (ret) {\n    v10 = __errno_location();\n    v11 = strerror(*v10);\n    v12 = __errno_location();\n    printf(String, (unsigned int)*v12, v11);\n    for (i = Number; i <= Number; ++i)\n      free(aiocbs[i]);\n    free(bufs);\n    close(fd);\n    exit(Number);\n  }\n  while (!received_all)\n    sleep(Number);\n  for (i = Number; i <= Number; ++i) {\n    err = aio_error(aiocbs[i]);\n    ret = aio_return(aiocbs[i]);\n    if (err && ret != Number) {\n      printf(String, (unsigned int)i, (unsigned int)err, (unsigned int)ret);\n      ++errors;\n    }\n    free(aiocbs[i]);\n  }\n  free(bufs);\n  close(fd);\n  if (errors)\n    exit(Number);\n  puts(String);\n  return Number;\n}", "var": [{"name": "sig", "type": "struct sigevent { __sigval_t sigev_value; int sigev_signo; int sigev_notify; $F04ECE2729E321874BA10B45CE3F6043 _sigev_un; }", "pred_name": "event", "ref_name": "event", "ref_type": "struct sigevent { __sigval_t sigev_value; int sigev_signo; int sigev_notify; $F04ECE2729E321874BA10B45CE3F6043 _sigev_un; }"}, {"name": "v15", "type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }", "pred_name": "action", "ref_name": "action", "ref_type": "struct sigaction { $A264F945D93E77C42166F8517888D535 __sigaction_handler; __sigset_t sa_mask; int sa_flags; PADDING (4); void (*)(void) sa_restorer; }"}], "body_in_train": false}, {"repo_owner": "franziskuskiefer", "repo_name": "nss-benchmark", "path": "franziskuskiefer/nss-benchmark/0cd9bc721c370efa169a79962c2449acc48f375d6d576e87190b3ee5a1a4a906", "path_in_repo": "franziskuskiefer/nss-benchmark/supercop-20171218/ntl-10.5.0/src/GF2EX.o", "objdump": "000000000000a4d0 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_>:\n    a4d0:\t41 57                \tpush   %r15\n    a4d2:\t31 c0                \txor    %eax,%eax\n    a4d4:\t49 89 cf             \tmov    %rcx,%r15\n    a4d7:\t41 56                \tpush   %r14\n    a4d9:\t4d 89 ce             \tmov    %r9,%r14\n    a4dc:\t41 55                \tpush   %r13\n    a4de:\t49 89 fd             \tmov    %rdi,%r13\n    a4e1:\t41 54                \tpush   %r12\n    a4e3:\t49 89 d4             \tmov    %rdx,%r12\n    a4e6:\t55                   \tpush   %rbp\n    a4e7:\t48 89 f5             \tmov    %rsi,%rbp\n    a4ea:\t53                   \tpush   %rbx\n    a4eb:\t4c 89 c3             \tmov    %r8,%rbx\n    a4ee:\t48 83 ec 18          \tsub    $0x18,%rsp\n    a4f2:\t48 8b 16             \tmov    (%rsi),%rdx\n    a4f5:\t48 85 d2             \ttest   %rdx,%rdx\n    a4f8:\t74 04                \tje     a4fe <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0x2e>\n    a4fa:\t48 8b 42 e0          \tmov    -0x20(%rdx),%rax\n    a4fe:\t48 39 43 08          \tcmp    %rax,0x8(%rbx)\n    a502:\t0f 8c b8 00 00 00    \tjl     a5c0 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xf0>\n    a508:\t4d 85 e4             \ttest   %r12,%r12\n    a50b:\t0f 88 af 00 00 00    \tjs     a5c0 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xf0>\n    a511:\t4d 85 e4             \ttest   %r12,%r12\n    a514:\t0f 84 b9 00 00 00    \tje     a5d3 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0x103>\n    a51a:\t4c 89 e7             \tmov    %r12,%rdi\n    a51d:\te8 00 00 00 00       \tcallq  a522 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0x52>\n    a522:\t48 89 da             \tmov    %rbx,%rdx\n    a525:\t4c 89 fe             \tmov    %r15,%rsi\n    a528:\t48 8d 7c 24 08       \tlea    0x8(%rsp),%rdi\n    a52d:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n    a534:\t00 00 \n    a536:\t48 89 c1             \tmov    %rax,%rcx\n    a539:\te8 00 00 00 00       \tcallq  a53e <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0x6e>\n    a53e:\t4d 89 f1             \tmov    %r14,%r9\n    a541:\t49 89 d8             \tmov    %rbx,%r8\n    a544:\t48 8d 4c 24 08       \tlea    0x8(%rsp),%rcx\n    a549:\t4c 89 e2             \tmov    %r12,%rdx\n    a54c:\t48 89 ee             \tmov    %rbp,%rsi\n    a54f:\t4c 89 ef             \tmov    %r13,%rdi\n    a552:\te8 00 00 00 00       \tcallq  a557 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0x87>\n    a557:\t48 8b 5c 24 08       \tmov    0x8(%rsp),%rbx\n    a55c:\t48 85 db             \ttest   %rbx,%rbx\n    a55f:\t74 4d                \tje     a5ae <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xde>\n    a561:\t48 8b 43 f0          \tmov    -0x10(%rbx),%rax\n    a565:\t48 85 c0             \ttest   %rax,%rax\n    a568:\t7e 3b                \tjle    a5a5 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xd5>\n    a56a:\t48 8d 2c c3          \tlea    (%rbx,%rax,8),%rbp\n    a56e:\t66 90                \txchg   %ax,%ax\n    a570:\t48 8b 3b             \tmov    (%rbx),%rdi\n    a573:\t48 85 ff             \ttest   %rdi,%rdi\n    a576:\t74 1a                \tje     a592 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xc2>\n    a578:\t48 8b 77 f0          \tmov    -0x10(%rdi),%rsi\n    a57c:\te8 00 00 00 00       \tcallq  a581 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xb1>\n    a581:\t48 8b 3b             \tmov    (%rbx),%rdi\n    a584:\t48 85 ff             \ttest   %rdi,%rdi\n    a587:\t74 09                \tje     a592 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xc2>\n    a589:\t48 83 ef 20          \tsub    $0x20,%rdi\n    a58d:\te8 00 00 00 00       \tcallq  a592 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xc2>\n    a592:\t48 83 c3 08          \tadd    $0x8,%rbx\n    a596:\t48 39 eb             \tcmp    %rbp,%rbx\n    a599:\t75 d5                \tjne    a570 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xa0>\n    a59b:\t48 8b 5c 24 08       \tmov    0x8(%rsp),%rbx\n    a5a0:\t48 85 db             \ttest   %rbx,%rbx\n    a5a3:\t74 09                \tje     a5ae <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xde>\n    a5a5:\t48 8d 7b e0          \tlea    -0x20(%rbx),%rdi\n    a5a9:\te8 00 00 00 00       \tcallq  a5ae <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xde>\n    a5ae:\t48 83 c4 18          \tadd    $0x18,%rsp\n    a5b2:\t5b                   \tpop    %rbx\n    a5b3:\t5d                   \tpop    %rbp\n    a5b4:\t41 5c                \tpop    %r12\n    a5b6:\t41 5d                \tpop    %r13\n    a5b8:\t41 5e                \tpop    %r14\n    a5ba:\t41 5f                \tpop    %r15\n    a5bc:\tc3                   \tretq   \n    a5bd:\t0f 1f 00             \tnopl   (%rax)\n    a5c0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    a5c5:\te8 00 00 00 00       \tcallq  a5ca <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0xfa>\n    a5ca:\t4d 85 e4             \ttest   %r12,%r12\n    a5cd:\t0f 85 47 ff ff ff    \tjne    a51a <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0x4a>\n    a5d3:\t4c 89 ef             \tmov    %r13,%rdi\n    a5d6:\t31 f6                \txor    %esi,%esi\n    a5d8:\te8 00 00 00 00       \tcallq  a5dd <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0x10d>\n    a5dd:\t48 83 c4 18          \tadd    $0x18,%rsp\n    a5e1:\t5b                   \tpop    %rbx\n    a5e2:\t5d                   \tpop    %rbp\n    a5e3:\t41 5c                \tpop    %r12\n    a5e5:\t41 5d                \tpop    %r13\n    a5e7:\t41 5e                \tpop    %r14\n    a5e9:\t41 5f                \tpop    %r15\n    a5eb:\tc3                   \tretq   \n    a5ec:\t48 89 c5             \tmov    %rax,%rbp\n    a5ef:\te9 00 00 00 00       \tjmpq   a5f4 <_ZN3NTL18ProjectPowersTowerERNS_3VecINS_3GF2EEERKNS0_INS_4GF2EEEElRKNS_5GF2EXERKNS_12GF2EXModulusERKS2_+0x124>\n    a5f4:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n    a5fb:\t00 00 00 00 \n    a5ff:\t90                   \tnop", "code_s": "void __fastcall NTL ProjectPowersTower(_QWORD *a1, const char *a2, __int64 a3,\n                                       char *a4, const NTL GF2EX *a5,\n                                       __int64 a6, __m128 a7) {\n  __int64 v7;\n  __int64 v12;\n  __int64 v13;\n  NTL **v14;\n  __int64 v15;\n  NTL **v16;\n  NTL **<span class=\"supfact\">v17</span>[Number];\n  v7 = Number L;\n  if (*(_QWORD *)a2)\n    v7 = *(_QWORD *)(*(_QWORD *)a2 - Number L);\n  if (*((_QWORD *)a5 + Number) < v7 || a3 < Number) {\n    NTL TerminalError((NTL *)String, a2);\n    if (a3)\n      goto LABEL_6;\n  LABEL_17:\n    NTL Vec<NTL GF2> SetLength(a1, Number L);\n    return;\n  }\n  if (!a3)\n    goto LABEL_17;\nLABEL_6:\n  v12 = _ntl_gsqrts(a3);\n  <span class=\"supfact\">v17</span>[Number] = Number L;\n  NTL build(<span class=\"supfact\">v17</span>, a4, a5, v12, a7);\n  NTL ProjectPowersTower(\n      a1, a2, a3, (const NTL GF2EXModulus **)<span class=\"supfact\">v17</span>, a5, a6, a7);\n  v14 = <span class=\"supfact\">v17</span>[Number];\n  if (<span class=\"supfact\">v17</span>[Number]) {\n    v15 = (__int64)*(<span class=\"supfact\">v17</span>[Number] - Number);\n    if (v15 <= Number)\n      goto LABEL_14;\n    v16 = &<span class=\"supfact\">v17</span>[Number][v15];\n    do {\n      if (*v14) {\n        NTL BlockDestroy(*v14, *((NTL GF2E **)*v14 - Number), v13);\n        if (*v14)\n          free((char *)*v14 - Number);\n      }\n      ++v14;\n    } while (v14 != v16);\n    v14 = <span class=\"supfact\">v17</span>[Number];\n    if (<span class=\"supfact\">v17</span>[Number])\n    LABEL_14:\n      free(v14 - Number);\n  }\n}", "code_t": "void __fastcall NTL ProjectPowersTower(_QWORD *a1, const char *a2, __int64 a3,\n                                       const NTL GF2EX *a4,\n                                       const NTL GF2EXModulus *a5, __int64 a6,\n                                       __m128 a7) {\n  __int64 v7;\n  __int64 v12;\n  __int64 v13;\n  NTL **v14;\n  NTL WrappedPtr<NTL GF2E, NTL Vec<NTL GF2E> _vec_deleter> raw_ptr v15;\n  NTL GF2EX *v16;\n  NTL GF2EXArgument <span class=\"supfact\">A</span>;\n  v7 = Number L;\n  if (*(_QWORD *)a2)\n    v7 = *(_QWORD *)(*(_QWORD *)a2 - Number L);\n  if (a5->n < v7 || a3 < Number) {\n    NTL TerminalError((NTL *)String, a2);\n    if (a3)\n      goto LABEL_6;\n  LABEL_17:\n    NTL Vec<NTL GF2> SetLength(a1, Number L);\n    return;\n  }\n  if (!a3)\n    goto LABEL_17;\nLABEL_6:\n  v12 = _ntl_gsqrts(a3);\n  <span class=\"supfact\">A</span>.H._vec__rep.rep = Number L;\n  NTL build(&<span class=\"supfact\">A</span>, a4, a5, v12);\n  NTL ProjectPowersTower(a1, a2, a3,\n                         (const NTL GF2EXModulus **)&<span class=\"supfact\">A</span>,\n                         (const NTL GF2EXTransMultiplier *)a5, a6, a7);\n  v14 = (NTL **)<span class=\"supfact\">A</span>.H._vec__rep.rep;\n  if (<span class=\"supfact\">A</span>.H._vec__rep.rep) {\n    v15 = <span class=\"supfact\">A</span>.H._vec__rep.rep[Number].rep._vec__rep.rep;\n    if ((__int64)v15 <= Number)\n      goto LABEL_14;\n    v16 = &<span class=\"supfact\">A</span>.H._vec__rep.rep[(_QWORD)v15];\n    do {\n      if (*v14) {\n        NTL BlockDestroy(*v14, *((NTL GF2E **)*v14 - Number), v13);\n        if (*v14)\n          free((char *)*v14 - Number);\n      }\n      ++v14;\n    } while (v14 != (NTL **)v16);\n    v14 = (NTL **)<span class=\"supfact\">A</span>.H._vec__rep.rep;\n    if (<span class=\"supfact\">A</span>.H._vec__rep.rep)\n    LABEL_14:\n      free(v14 - Number);\n  }\n}", "var": [{"name": "v17", "type": "struct NTL::Vec<NTL::zz_p> { NTL::WrappedPtr<NTL::zz_p,NTL::Vec<NTL::zz_p>::_vec_deleter> _vec__rep; }", "pred_name": "a", "ref_name": "A", "ref_type": "struct NTL::GF2EXArgument { NTL::vec_GF2EX H; }"}], "body_in_train": false}, {"repo_owner": "chrishaukap", "repo_name": "GameDev", "path": "chrishaukap/GameDev/324ed3b7566922215c3b7f06a2ffc8c0e374f00219ae96bce6308163c544c03c", "path_in_repo": "chrishaukap/GameDev/lib_irrlicht/src/irrlicht-1.5/source/Irrlicht/CCameraSceneNode.o", "objdump": "0000000000000710 <_ZN3irr5scene16CCameraSceneNode9setTargetERKNS_4core8vector3dIfEE>:\n     710:\t55                   \tpush   %rbp\n     711:\t48 89 e5             \tmov    %rsp,%rbp\n     714:\t53                   \tpush   %rbx\n     715:\t48 83 ec 48          \tsub    $0x48,%rsp\n     719:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     71d:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     721:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     725:\t48 8d 90 f4 00 00 00 \tlea    0xf4(%rax),%rdx\n     72c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     730:\t48 89 c6             \tmov    %rax,%rsi\n     733:\t48 89 d7             \tmov    %rdx,%rdi\n     736:\te8 00 00 00 00       \tcallq  73b <_ZN3irr5scene16CCameraSceneNode9setTargetERKNS_4core8vector3dIfEE+0x2b>\n     73b:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     73f:\t0f b6 80 39 03 00 00 \tmovzbl 0x339(%rax),%eax\n     746:\t84 c0                \ttest   %al,%al\n     748:\t74 64                \tje     7ae <_ZN3irr5scene16CCameraSceneNode9setTargetERKNS_4core8vector3dIfEE+0x9e>\n     74a:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n     74e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     752:\t48 8b 00             \tmov    (%rax),%rax\n     755:\t48 05 08 01 00 00    \tadd    $0x108,%rax\n     75b:\t48 8b 08             \tmov    (%rax),%rcx\n     75e:\t48 8d 45 d8          \tlea    -0x28(%rbp),%rax\n     762:\t48 89 d6             \tmov    %rdx,%rsi\n     765:\t48 89 c7             \tmov    %rax,%rdi\n     768:\tff d1                \tcallq  *%rcx\n     76a:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     76e:\t48 8d 88 f4 00 00 00 \tlea    0xf4(%rax),%rcx\n     775:\t48 8d 45 cc          \tlea    -0x34(%rbp),%rax\n     779:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n     77d:\t48 89 ce             \tmov    %rcx,%rsi\n     780:\t48 89 c7             \tmov    %rax,%rdi\n     783:\te8 00 00 00 00       \tcallq  788 <_ZN3irr5scene16CCameraSceneNode9setTargetERKNS_4core8vector3dIfEE+0x78>\n     788:\t48 8b 5d b8          \tmov    -0x48(%rbp),%rbx\n     78c:\t48 8d 45 e4          \tlea    -0x1c(%rbp),%rax\n     790:\t48 8d 55 cc          \tlea    -0x34(%rbp),%rdx\n     794:\t48 89 d6             \tmov    %rdx,%rsi\n     797:\t48 89 c7             \tmov    %rax,%rdi\n     79a:\te8 00 00 00 00       \tcallq  79f <_ZN3irr5scene16CCameraSceneNode9setTargetERKNS_4core8vector3dIfEE+0x8f>\n     79f:\t48 8d 45 e4          \tlea    -0x1c(%rbp),%rax\n     7a3:\t48 89 c6             \tmov    %rax,%rsi\n     7a6:\t48 89 df             \tmov    %rbx,%rdi\n     7a9:\te8 00 00 00 00       \tcallq  7ae <_ZN3irr5scene16CCameraSceneNode9setTargetERKNS_4core8vector3dIfEE+0x9e>\n     7ae:\t90                   \tnop\n     7af:\t48 83 c4 48          \tadd    $0x48,%rsp\n     7b3:\t5b                   \tpop    %rbx\n     7b4:\t5d                   \tpop    %rbp\n     7b5:\tc3                   \tretq   ", "code_s": "__int64 __fastcall irr scene CCameraSceneNode setTarget(unsigned __int8 *a1,\n                                                        __int64 a2) {\n  __int64 result;\n  char <span class=\"supfact\">v3</span>[Number];\n  char v4[Number];\n  char <span class=\"supfact\">v5</span>[Number];\n  irr core vector3d<float> operator=(a1 + Number, a2);\n  result = a1[Number];\n  if ((_BYTE)result) {\n    (*(void(__fastcall **)(char *, unsigned __int8 *))(*(_QWORD *)a1 +\n                                                       Number L))(v4, a1);\n    irr core vector3d<float> operator-(<span class=\"supfact\">v3</span>, a1 + Number, v4);\n    irr core vector3d<float> getHorizontalAngle(<span class=\"supfact\">v5</span>,\n                                                <span class=\"supfact\">v3</span>);\n    result = irr scene ISceneNode setRotation(a1, <span class=\"supfact\">v5</span>);\n  }\n  return result;\n}", "code_t": "void __cdecl irr scene CCameraSceneNode setTarget(\n    irr scene CCameraSceneNode *const this, const irr core vector3df *pos) {\n  irr core vector3df <span class=\"supfact\">toTarget</span>;\n  char v3[Number];\n  irr core vector3d<float> <span class=\"supfact\">rotation</span>;\n  irr core vector3d<float> operator=(&this->Target, pos);\n  if (this->TargetAndRotationAreBound) {\n    (*(void(__fastcall **)(char *, irr scene CCameraSceneNode *const))(\n        *(_QWORD *)this->gap0 + Number L))(v3, this);\n    irr core vector3d<float> operator-(&<span class=\"supfact\">toTarget</span>,\n                                       &this->Target);\n    irr core vector3d<float> getHorizontalAngle(&<span class=\"supfact\">rotation</span>);\n    irr scene ISceneNode setRotation((irr scene ISceneNode *const)this,\n                                     &<span class=\"supfact\">rotation</span>);\n  }\n}", "var": [{"name": "v3", "type": "struct irr::core::vector3d<float> { float X; float Y; float Z; }", "pred_name": "v3", "ref_name": "toTarget", "ref_type": "struct irr::core::vector3df { float X; float Y; float Z; }"}, {"name": "v5", "type": "struct irr::core::vector3d<float> { float X; float Y; float Z; }", "pred_name": "v5", "ref_name": "rotation", "ref_type": "struct irr::core::vector3d<float> { float X; float Y; float Z; }"}], "body_in_train": false}, {"repo_owner": "blacklion", "repo_name": "GEOM-Events", "path": "blacklion/GEOM-Events/dcb998b4450fe67e7fa17e3802f335a47f31d76f0a7f18cba51615312c436e2e", "path_in_repo": "blacklion/GEOM-Events/gnu/usr.bin/gdb/libgdb/infrun.o", "objdump": "0000000000000f3b <handle_step_into_function>:\n     f3b:\t55                   \tpush   %rbp\n     f3c:\t48 89 e5             \tmov    %rsp,%rbp\n     f3f:\t48 83 ec 60          \tsub    $0x60,%rsp\n     f43:\t48 89 7d a8          \tmov    %rdi,-0x58(%rbp)\n     f47:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # f4d <handle_step_into_function+0x12>\n     f4d:\t85 c0                \ttest   %eax,%eax\n     f4f:\t74 2b                \tje     f7c <handle_step_into_function+0x41>\n     f51:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f58 <handle_step_into_function+0x1d>\n     f58:\t48 83 f8 01          \tcmp    $0x1,%rax\n     f5c:\t75 48                \tjne    fa6 <handle_step_into_function+0x6b>\n     f5e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     f62:\t48 8b 50 20          \tmov    0x20(%rax),%rdx\n     f66:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # f6d <handle_step_into_function+0x32>\n     f6d:\t48 89 d6             \tmov    %rdx,%rsi\n     f70:\t48 89 c7             \tmov    %rax,%rdi\n     f73:\te8 00 00 00 00       \tcallq  f78 <handle_step_into_function+0x3d>\n     f78:\t85 c0                \ttest   %eax,%eax\n     f7a:\t74 2a                \tje     fa6 <handle_step_into_function+0x6b>\n     f7c:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # f86 <handle_step_into_function+0x4b>\n     f83:\t00 00 00 \n     f86:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     f8b:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     f90:\te8 46 29 00 00       \tcallq  38db <print_stop_reason>\n     f95:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     f99:\t48 89 c7             \tmov    %rax,%rdi\n     f9c:\te8 33 27 00 00       \tcallq  36d4 <stop_stepping>\n     fa1:\te9 7d 01 00 00       \tjmpq   1123 <handle_step_into_function+0x1e8>\n     fa6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # fac <handle_step_into_function+0x71>\n     fac:\t83 f8 01             \tcmp    $0x1,%eax\n     faf:\t0f 85 9e 00 00 00    \tjne    1053 <handle_step_into_function+0x118>\n     fb5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # fbc <handle_step_into_function+0x81>\n     fbc:\t48 89 c7             \tmov    %rax,%rdi\n     fbf:\te8 35 ff ff ff       \tcallq  ef9 <pc_in_sigtramp>\n     fc4:\t85 c0                \ttest   %eax,%eax\n     fc6:\t74 6e                \tje     1036 <handle_step_into_function+0xfb>\n     fc8:\te8 00 00 00 00       \tcallq  fcd <handle_step_into_function+0x92>\n     fcd:\t48 89 c1             \tmov    %rax,%rcx\n     fd0:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     fd4:\tba 00 00 00 00       \tmov    $0x0,%edx\n     fd9:\t48 89 ce             \tmov    %rcx,%rsi\n     fdc:\t48 89 c7             \tmov    %rax,%rdi\n     fdf:\te8 00 00 00 00       \tcallq  fe4 <handle_step_into_function+0xa9>\n     fe4:\tff 75 f0             \tpushq  -0x10(%rbp)\n     fe7:\tff 75 e8             \tpushq  -0x18(%rbp)\n     fea:\tff 75 e0             \tpushq  -0x20(%rbp)\n     fed:\tff 35 00 00 00 00    \tpushq  0x0(%rip)        # ff3 <handle_step_into_function+0xb8>\n     ff3:\tff 35 00 00 00 00    \tpushq  0x0(%rip)        # ff9 <handle_step_into_function+0xbe>\n     ff9:\tff 35 00 00 00 00    \tpushq  0x0(%rip)        # fff <handle_step_into_function+0xc4>\n     fff:\te8 00 00 00 00       \tcallq  1004 <handle_step_into_function+0xc9>\n    1004:\t48 83 c4 30          \tadd    $0x30,%rsp\n    1008:\t85 c0                \ttest   %eax,%eax\n    100a:\t74 2a                \tje     1036 <handle_step_into_function+0xfb>\n    100c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1013 <handle_step_into_function+0xd8>\n    1013:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 101a <handle_step_into_function+0xdf>\n    101a:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1021 <handle_step_into_function+0xe6>\n    1021:\t48 89 15 00 00 00 00 \tmov    %rdx,0x0(%rip)        # 1028 <handle_step_into_function+0xed>\n    1028:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 102f <handle_step_into_function+0xf4>\n    102f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 1036 <handle_step_into_function+0xfb>\n    1036:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    103a:\t48 89 c7             \tmov    %rax,%rdi\n    103d:\te8 46 25 00 00       \tcallq  3588 <step_over_function>\n    1042:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1046:\t48 89 c7             \tmov    %rax,%rdi\n    1049:\te8 9f 26 00 00       \tcallq  36ed <keep_going>\n    104e:\te9 d0 00 00 00       \tjmpq   1123 <handle_step_into_function+0x1e8>\n    1053:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 105a <handle_step_into_function+0x11f>\n    105a:\t48 89 c7             \tmov    %rax,%rdi\n    105d:\te8 00 00 00 00       \tcallq  1062 <handle_step_into_function+0x127>\n    1062:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    1066:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    106b:\t75 1d                \tjne    108a <handle_step_into_function+0x14f>\n    106d:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 1074 <handle_step_into_function+0x139>\n    1074:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 107b <handle_step_into_function+0x140>\n    107b:\t48 89 d6             \tmov    %rdx,%rsi\n    107e:\t48 89 c7             \tmov    %rax,%rdi\n    1081:\te8 00 00 00 00       \tcallq  1086 <handle_step_into_function+0x14b>\n    1086:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    108a:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n    108f:\t74 0c                \tje     109d <handle_step_into_function+0x162>\n    1091:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1095:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n    1099:\t48 89 50 20          \tmov    %rdx,0x20(%rax)\n    109d:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    10a1:\t48 8b 48 20          \tmov    0x20(%rax),%rcx\n    10a5:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n    10a9:\tba 00 00 00 00       \tmov    $0x0,%edx\n    10ae:\t48 89 ce             \tmov    %rcx,%rsi\n    10b1:\t48 89 c7             \tmov    %rax,%rdi\n    10b4:\te8 00 00 00 00       \tcallq  10b9 <handle_step_into_function+0x17e>\n    10b9:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n    10bc:\t85 c0                \ttest   %eax,%eax\n    10be:\t74 0e                \tje     10ce <handle_step_into_function+0x193>\n    10c0:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    10c4:\t48 89 c7             \tmov    %rax,%rdi\n    10c7:\te8 cf 22 00 00       \tcallq  339b <step_into_function>\n    10cc:\teb 55                \tjmp    1123 <handle_step_into_function+0x1e8>\n    10ce:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 10d4 <handle_step_into_function+0x199>\n    10d4:\t83 f8 02             \tcmp    $0x2,%eax\n    10d7:\t75 31                \tjne    110a <handle_step_into_function+0x1cf>\n    10d9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 10df <handle_step_into_function+0x1a4>\n    10df:\t85 c0                \ttest   %eax,%eax\n    10e1:\t74 27                \tje     110a <handle_step_into_function+0x1cf>\n    10e3:\tc7 05 00 00 00 00 01 \tmovl   $0x1,0x0(%rip)        # 10ed <handle_step_into_function+0x1b2>\n    10ea:\t00 00 00 \n    10ed:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    10f2:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    10f7:\te8 df 27 00 00       \tcallq  38db <print_stop_reason>\n    10fc:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1100:\t48 89 c7             \tmov    %rax,%rdi\n    1103:\te8 cc 25 00 00       \tcallq  36d4 <stop_stepping>\n    1108:\teb 19                \tjmp    1123 <handle_step_into_function+0x1e8>\n    110a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    110e:\t48 89 c7             \tmov    %rax,%rdi\n    1111:\te8 72 24 00 00       \tcallq  3588 <step_over_function>\n    1116:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    111a:\t48 89 c7             \tmov    %rax,%rdi\n    111d:\te8 cb 25 00 00       \tcallq  36ed <keep_going>\n    1122:\t90                   \tnop\n    1123:\tc9                   \tleaveq \n    1124:\tc3                   \tretq   ", "code_s": "__int64 __fastcall handle_step_into_function(__int64 a1) {\n  __int64 result;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  char <span class=\"supfact\">v8</span>[Number];\n  int v9;\n  __int64 v10;\n  __int64 v11;\n  if (!step_over_calls ||\n      step_range_end == Number L &&\n          (unsigned int)in_prologue(prev_pc, *(_QWORD *)(a1 + Number))) {\n    stop_step = Number;\n    print_stop_reason(Number L, Number L);\n    result = stop_stepping(a1);\n  } else if (step_over_calls == Number) {\n    if ((unsigned int)pc_in_sigtramp(stop_pc)) {\n      v2 = read_sp();\n      frame_id_build(&v10, v2, Number L);\n      if ((unsigned int)frame_id_inner(&v10, v2, v3, v4, v5, v6)) {\n        v7 = null_frame_id[Number];\n        step_frame_id[Number] = null_frame_id[Number];\n        step_frame_id[Number] = v7;\n        step_frame_id[Number] = null_frame_id[Number];\n      }\n    }\n    step_over_function(a1);\n    result = keep_going(a1);\n  } else {\n    v11 = skip_language_trampoline(stop_pc);\n    if (!v11)\n      v11 = gdbarch_skip_trampoline_code(current_gdbarch, stop_pc);\n    if (v11)\n      *(_QWORD *)(a1 + Number) = v11;\n    find_pc_line(<span class=\"supfact\">v8</span>, *(_QWORD *)(a1 + Number), Number L);\n    if (v9) {\n      result = step_into_function(a1);\n    } else if (step_over_calls == Number && step_stop_if_no_debug) {\n      stop_step = Number;\n      print_stop_reason(Number L, Number L);\n      result = stop_stepping(a1);\n    } else {\n      step_over_function(a1);\n      result = keep_going(a1);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl handle_step_into_function(execution_control_state *ecs) {\n  __int64 v1;\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  symtab_and_line <span class=\"supfact\">tmp_sal</span>;\n  __int64 v8;\n  CORE_ADDR real_stop_pc;\n  if (!step_over_calls ||\n      step_range_end == Number L &&\n          (unsigned int)in_prologue(prev_pc, ecs->stop_func_start)) {\n    stop_step = Number;\n    print_stop_reason(END_STEPPING_RANGE, Number);\n    stop_stepping(ecs);\n  } else if (step_over_calls == Number) {\n    if (pc_in_sigtramp(stop_pc)) {\n      v1 = read_sp();\n      frame_id_build(&v8, v1, Number L);\n      if ((unsigned int)frame_id_inner(&v8, v1, v2, v3, v4, v5)) {\n        v6 = null_frame_id[Number];\n        step_frame_id[Number] = null_frame_id[Number];\n        step_frame_id[Number] = v6;\n        step_frame_id[Number] = null_frame_id[Number];\n      }\n    }\n    step_over_function(ecs);\n    keep_going(ecs);\n  } else {\n    real_stop_pc = skip_language_trampoline(stop_pc);\n    if (!real_stop_pc)\n      real_stop_pc = gdbarch_skip_trampoline_code(current_gdbarch, stop_pc);\n    if (real_stop_pc)\n      ecs->stop_func_start = real_stop_pc;\n    find_pc_line(&<span class=\"supfact\">tmp_sal</span>, ecs->stop_func_start, Number L);\n    if (<span class=\"supfact\">tmp_sal</span>.line) {\n      step_into_function(ecs);\n    } else if (step_over_calls == Number && step_stop_if_no_debug) {\n      stop_step = Number;\n      print_stop_reason(END_STEPPING_RANGE, Number);\n      stop_stepping(ecs);\n    } else {\n      step_over_function(ecs);\n      keep_going(ecs);\n    }\n  }\n}", "var": [{"name": "v8", "type": "__unk__", "pred_name": "__unk__", "ref_name": "tmp_sal", "ref_type": "struct symtab_and_line { symtab * symtab; asection * section; int line; PADDING (4); CORE_ADDR pc; CORE_ADDR end; }"}], "body_in_train": false}, {"repo_owner": "daniloegea", "repo_name": "freebsd", "path": "daniloegea/freebsd/aeae63fb709049f5d1786436080f6ac9bed86c1793e6a23aea7af49a9d02c439", "path_in_repo": "daniloegea/freebsd/contrib/groff/src/roff/troff/input.o", "objdump": "000000000000d600 <_Z14unformat_macrov>:\n    d600:\t55                   \tpush   %rbp\n    d601:\tbf 01 00 00 00       \tmov    $0x1,%edi\n    d606:\t48 81 ec e0 00 00 00 \tsub    $0xe0,%rsp\n    d60d:\te8 00 00 00 00       \tcallq  d612 <_Z14unformat_macrov+0x12>\n    d612:\t48 85 c0             \ttest   %rax,%rax\n    d615:\t0f 84 d3 00 00 00    \tje     d6ee <_Z14unformat_macrov+0xee>\n    d61b:\t48 89 c7             \tmov    %rax,%rdi\n    d61e:\te8 9d 50 ff ff       \tcallq  26c0 <_ZL14lookup_request6symbol>\n    d623:\t48 89 c7             \tmov    %rax,%rdi\n    d626:\t48 8b 00             \tmov    (%rax),%rax\n    d629:\tff 50 18             \tcallq  *0x18(%rax)\n    d62c:\t48 89 c5             \tmov    %rax,%rbp\n    d62f:\t48 85 c0             \ttest   %rax,%rax\n    d632:\t0f 84 c8 00 00 00    \tje     d700 <_Z14unformat_macrov+0x100>\n    d638:\t48 8d 7c 24 10       \tlea    0x10(%rsp),%rdi\n    d63d:\te8 00 00 00 00       \tcallq  d642 <_Z14unformat_macrov+0x42>\n    d642:\t31 d2                \txor    %edx,%edx\n    d644:\t48 89 ee             \tmov    %rbp,%rsi\n    d647:\t48 8d 7c 24 40       \tlea    0x40(%rsp),%rdi\n    d64c:\t48 8b 0d 00 00 00 00 \tmov    0x0(%rip),%rcx        # d653 <_Z14unformat_macrov+0x53>\n    d653:\te8 00 00 00 00       \tcallq  d658 <_Z14unformat_macrov+0x58>\n    d658:\t0f 1f 84 00 00 00 00 \tnopl   0x0(%rax,%rax,1)\n    d65f:\t00 \n    d660:\t48 c7 44 24 08 00 00 \tmovq   $0x0,0x8(%rsp)\n    d667:\t00 00 \n    d669:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n    d66e:\t48 3b 44 24 60       \tcmp    0x60(%rsp),%rax\n    d673:\t73 3b                \tjae    d6b0 <_Z14unformat_macrov+0xb0>\n    d675:\t48 8d 50 01          \tlea    0x1(%rax),%rdx\n    d679:\t48 89 54 24 58       \tmov    %rdx,0x58(%rsp)\n    d67e:\t0f b6 00             \tmovzbl (%rax),%eax\n    d681:\t85 c0                \ttest   %eax,%eax\n    d683:\t0f 85 a7 00 00 00    \tjne    d730 <_Z14unformat_macrov+0x130>\n    d689:\t48 8b 7c 24 08       \tmov    0x8(%rsp),%rdi\n    d68e:\t48 8b 07             \tmov    (%rdi),%rax\n    d691:\tff 50 18             \tcallq  *0x18(%rax)\n    d694:\t85 c0                \ttest   %eax,%eax\n    d696:\t74 c8                \tje     d660 <_Z14unformat_macrov+0x60>\n    d698:\t48 8b 74 24 08       \tmov    0x8(%rsp),%rsi\n    d69d:\t48 8d 7c 24 10       \tlea    0x10(%rsp),%rdi\n    d6a2:\te8 00 00 00 00       \tcallq  d6a7 <_Z14unformat_macrov+0xa7>\n    d6a7:\teb b7                \tjmp    d660 <_Z14unformat_macrov+0x60>\n    d6a9:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n    d6b0:\t48 8d 74 24 08       \tlea    0x8(%rsp),%rsi\n    d6b5:\t48 8d 7c 24 40       \tlea    0x40(%rsp),%rdi\n    d6ba:\te8 00 00 00 00       \tcallq  d6bf <_Z14unformat_macrov+0xbf>\n    d6bf:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n    d6c2:\t75 bd                \tjne    d681 <_Z14unformat_macrov+0x81>\n    d6c4:\t48 8d 74 24 10       \tlea    0x10(%rsp),%rsi\n    d6c9:\t48 89 ef             \tmov    %rbp,%rdi\n    d6cc:\te8 00 00 00 00       \tcallq  d6d1 <_Z14unformat_macrov+0xd1>\n    d6d1:\t48 8d 7c 24 70       \tlea    0x70(%rsp),%rdi\n    d6d6:\t48 c7 44 24 40 00 00 \tmovq   $0x0,0x40(%rsp)\n    d6dd:\t00 00 \n    d6df:\te8 00 00 00 00       \tcallq  d6e4 <_Z14unformat_macrov+0xe4>\n    d6e4:\t48 8d 7c 24 10       \tlea    0x10(%rsp),%rdi\n    d6e9:\te8 00 00 00 00       \tcallq  d6ee <_Z14unformat_macrov+0xee>\n    d6ee:\te8 00 00 00 00       \tcallq  d6f3 <_Z14unformat_macrov+0xf3>\n    d6f3:\t48 81 c4 e0 00 00 00 \tadd    $0xe0,%rsp\n    d6fa:\t5d                   \tpop    %rbp\n    d6fb:\tc3                   \tretq   \n    d6fc:\t0f 1f 40 00          \tnopl   0x0(%rax)\n    d700:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    d706:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    d70b:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    d710:\t4c 89 c1             \tmov    %r8,%rcx\n    d713:\t4c 89 c2             \tmov    %r8,%rdx\n    d716:\te8 85 39 ff ff       \tcallq  10a0 <_ZL8do_error10error_typePKcRK6errargS4_S4_>\n    d71b:\te8 00 00 00 00       \tcallq  d720 <_Z14unformat_macrov+0x120>\n    d720:\t48 81 c4 e0 00 00 00 \tadd    $0xe0,%rsp\n    d727:\t5d                   \tpop    %rbp\n    d728:\tc3                   \tretq   \n    d729:\t0f 1f 80 00 00 00 00 \tnopl   0x0(%rax)\n    d730:\t0f b6 f0             \tmovzbl %al,%esi\n    d733:\t48 8d 7c 24 10       \tlea    0x10(%rsp),%rdi\n    d738:\te8 00 00 00 00       \tcallq  d73d <_Z14unformat_macrov+0x13d>\n    d73d:\te9 1e ff ff ff       \tjmpq   d660 <_Z14unformat_macrov+0x60>\n    d742:\t48 89 c5             \tmov    %rax,%rbp\n    d745:\te9 00 00 00 00       \tjmpq   d74a <_Z14unformat_macrov+0x14a>\n    d74a:\t48 89 c5             \tmov    %rax,%rbp\n    d74d:\te9 00 00 00 00       \tjmpq   d752 <_Z14unformat_macrov+0x152>\n    d752:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n    d759:\t00 00 00 00 \n    d75d:\t0f 1f 00             \tnopl   (%rax)", "code_s": "void __fastcall unformat_macro(__int64 a1, char *a2) {\n  char *v2;\n  const char *v3;\n  __int64 v4;\n  const macro *v5;\n  unsigned __int8 *v6;\n  int v7;\n  node *v8;\n  char <span class=\"supfact\">v9</span>[Number];\n  __int64 <span class=\"supfact\">v10</span>[Number];\n  unsigned __int64 v11;\n  unsigned __int64 v12;\n  char v13[Number];\n  v2 = (_BYTE *)(input_iterator fill + Number);\n  v3 = (const char *)get_name(Number, (__int64)a2);\n  if (v3) {\n    v4 = lookup_request(v3);\n    v5 = (const macro *)(*(__int64(__fastcall **)(__int64))(*(_QWORD *)v4 +\n                                                            Number L))(v4);\n    if (v5) {\n      macro macro((macro *)<span class=\"supfact\">v9</span>);\n      string_iterator string_iterator((__int64)<span class=\"supfact\">v10</span>, v5,\n                                      Number L, NULL_SYMBOL);\n      while (Number) {\n        v8 = Number L;\n        v6 = (unsigned __int8 *)v11;\n        if (v11 >= v12) {\n          v7 =\n              string_iterator fill((string_iterator *)<span class=\"supfact\">v10</span>, &v8);\n          if (v7 == Number) {\n            a2 = <span class=\"supfact\">v9</span>;\n            macro operator=((__int64)v5, (__int64)<span class=\"supfact\">v9</span>); <span class=\"supfact\">v10</span> [ Number ] = ( __int64 ) ( & ` vtable for ' string_iterator + Number ) ; macro ~ macro ( ( macro * ) v13 ) ; v2 = <span class=\"supfact\">v9</span> ; macro ~ macro ( ( macro * ) <span class=\"supfact\">v9</span> ) ; goto LABEL_11 ; } } else { ++ v11 ; v7 = * v6 ; } if ( v7 ) { macro append ( ( macro * ) <span class=\"supfact\">v9</span> , v7 ) ; } else if ( ( * ( unsigned int ( __fastcall * * ) ( node * ) ) ( * ( _QWORD * ) v8 + Number L ) ) ( v8 ) ) { macro append ( ( macro * ) <span class=\"supfact\">v9</span> , v8 ) ; } } } do_error ( ( input_stack * ) ( ( char * ) input_iterator fill + Number ) , String , ( const errarg * ) & empty_errarg , ( const errarg * ) & empty_errarg , ( const errarg * ) & empty_errarg ) ; skip_line ( Number L , ( __int64 ) String ) ; } else { LABEL_11 : skip_line ( ( __int64 ) v2 , ( __int64 ) a2 ) ; } }", "code_t": "void unformat_macro(void) {\n  symbol v0;\n  macro *v1;\n  macro *v2;\n  const unsigned __int8 *v3;\n  int v4;\n  node *n;\n  macro <span class=\"supfact\">m</span>;\n  string_iterator <span class=\"supfact\">v7</span>;\n  v0.s = get_name(Number).s;\n  if (v0.s) {\n    v1 = lookup_request(v0);\n    v2 = (macro *)(*(__int64(__fastcall **)(macro *))(\n        *(_QWORD *)v1->baseclass_0 + Number L))(v1);\n    if (v2) {\n      macro macro(&<span class=\"supfact\">m</span>);\n      string_iterator string_iterator(&<span class=\"supfact\">v7</span>, v2, Number L,\n                                      NULL_SYMBOL);\n      while (Number) {\n        n = Number L;\n        v3 = <span class=\"supfact\">v7</span>.ptr;\n        if (<span class=\"supfact\">v7</span>.ptr >= <span class=\"supfact\">v7</span>.eptr) {\n          v4 = string_iterator fill(&<span class=\"supfact\">v7</span>, &n);\n          if (v4 == Number) {\n            macro operator=(v2, &<span class=\"supfact\">m</span>); <span class=\"supfact\">v7</span> . _vptr_input_iterator = ( int ( * * ) ( ... ) ) ( & ` vtable for ' string_iterator + Number ) ; macro ~ macro ( & <span class=\"supfact\">v7</span> . mac ) ; macro ~ macro ( & <span class=\"supfact\">m</span> ) ; goto LABEL_11 ; } } else { ++ <span class=\"supfact\">v7</span> . ptr ; v4 = * v3 ; } if ( v4 ) { macro append ( & <span class=\"supfact\">m</span> , v4 ) ; } else if ( ( * ( ( unsigned int ( __fastcall * * ) ( node * ) ) n -> _vptr_node + Number ) ) ( n ) ) { macro append ( & <span class=\"supfact\">m</span> , n ) ; } } } do_error ( ERROR , String , & empty_errarg , & empty_errarg , & empty_errarg ) ; skip_line ( ) ; } else { LABEL_11 : skip_line ( ) ; } }", "var": [{"name": "v9", "type": "char[48]", "pred_name": "v9", "ref_name": "m", "ref_type": "struct macro { request_or_macro baseclass_0; const char * filename; int lineno; int len; int empty_macro; int is_a_diversion; macro_header * p; }"}, {"name": "v10", "type": "__int64[3]", "pred_name": "v10", "ref_name": "v7", "ref_type": "struct string_iterator { input_iterator baseclass_0; macro mac; const char * how_invoked; int newline_flag; int lineno; char_block * bp; int count; PADDING (4); node * nd; int saved_compatible_flag; PADDING (4); symbol nm; }"}], "body_in_train": false}, {"repo_owner": "lunixbochs", "repo_name": "inscount", "path": "lunixbochs/inscount/716619e5783f2ddffc2dafac191feed49047b34c80e21316243efd48b6c7ec74", "path_in_repo": "lunixbochs/inscount//hw/audio/pcspk.o", "objdump": "0000000000000142 <pcspk_callback>:\n 142:\t55                   \tpush   %rbp\n 143:\t48 89 e5             \tmov    %rsp,%rbp\n 146:\t48 83 ec 50          \tsub    $0x50,%rsp\n 14a:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n 14e:\t89 75 b4             \tmov    %esi,-0x4c(%rbp)\n 151:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n 158:\t00 00 \n 15a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 15e:\t31 c0                \txor    %eax,%eax\n 160:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 164:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 168:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 16c:\t48 8b 80 a0 08 00 00 \tmov    0x8a0(%rax),%rax\n 173:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 177:\tbe 02 00 00 00       \tmov    $0x2,%esi\n 17c:\t48 89 c7             \tmov    %rax,%rdi\n 17f:\te8 00 00 00 00       \tcallq  184 <pcspk_callback+0x42>\n 184:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n 187:\t83 f8 03             \tcmp    $0x3,%eax\n 18a:\t0f 85 01 01 00 00    \tjne    291 <pcspk_callback+0x14f>\n 190:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n 193:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n 196:\t83 7d cc 4a          \tcmpl   $0x4a,-0x34(%rbp)\n 19a:\t77 07                \tja     1a3 <pcspk_callback+0x61>\n 19c:\tc7 45 cc 00 00 00 00 \tmovl   $0x0,-0x34(%rbp)\n 1a3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1a7:\t8b 80 a8 08 00 00    \tmov    0x8a8(%rax),%eax\n 1ad:\t39 45 cc             \tcmp    %eax,-0x34(%rbp)\n 1b0:\t0f 84 cf 00 00 00    \tje     285 <pcspk_callback+0x143>\n 1b6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1ba:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n 1bd:\t89 90 a8 08 00 00    \tmov    %edx,0x8a8(%rax)\n 1c3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1c7:\tc7 80 b0 08 00 00 00 \tmovl   $0x0,0x8b0(%rax)\n 1ce:\t00 00 00 \n 1d1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1d5:\t48 89 c7             \tmov    %rax,%rdi\n 1d8:\te8 7a fe ff ff       \tcallq  57 <generate_samples>\n 1dd:\te9 a3 00 00 00       \tjmpq   285 <pcspk_callback+0x143>\n 1e2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1e6:\t8b 90 ac 08 00 00    \tmov    0x8ac(%rax),%edx\n 1ec:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1f0:\t8b 80 b0 08 00 00    \tmov    0x8b0(%rax),%eax\n 1f6:\t29 c2                \tsub    %eax,%edx\n 1f8:\t89 d0                \tmov    %edx,%eax\n 1fa:\t89 45 d0             \tmov    %eax,-0x30(%rbp)\n 1fd:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n 200:\t89 45 d4             \tmov    %eax,-0x2c(%rbp)\n 203:\t8b 45 d4             \tmov    -0x2c(%rbp),%eax\n 206:\t39 45 d0             \tcmp    %eax,-0x30(%rbp)\n 209:\t0f 46 45 d0          \tcmovbe -0x30(%rbp),%eax\n 20d:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n 210:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n 213:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 217:\t8b 80 b0 08 00 00    \tmov    0x8b0(%rax),%eax\n 21d:\t89 c0                \tmov    %eax,%eax\n 21f:\t48 8d 88 70 01 00 00 \tlea    0x170(%rax),%rcx\n 226:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 22a:\t48 01 c8             \tadd    %rcx,%rax\n 22d:\t48 8d 48 0c          \tlea    0xc(%rax),%rcx\n 231:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 235:\t48 8b 80 98 08 00 00 \tmov    0x898(%rax),%rax\n 23c:\t48 89 ce             \tmov    %rcx,%rsi\n 23f:\t48 89 c7             \tmov    %rax,%rdi\n 242:\te8 00 00 00 00       \tcallq  247 <pcspk_callback+0x105>\n 247:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n 24a:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n 24e:\t74 44                \tje     294 <pcspk_callback+0x152>\n 250:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 254:\t8b 90 b0 08 00 00    \tmov    0x8b0(%rax),%edx\n 25a:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n 25d:\t01 c2                \tadd    %eax,%edx\n 25f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 263:\t8b 88 ac 08 00 00    \tmov    0x8ac(%rax),%ecx\n 269:\t89 d0                \tmov    %edx,%eax\n 26b:\tba 00 00 00 00       \tmov    $0x0,%edx\n 270:\tf7 f1                \tdiv    %ecx\n 272:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 276:\t89 90 b0 08 00 00    \tmov    %edx,0x8b0(%rax)\n 27c:\t8b 45 b4             \tmov    -0x4c(%rbp),%eax\n 27f:\t2b 45 cc             \tsub    -0x34(%rbp),%eax\n 282:\t89 45 b4             \tmov    %eax,-0x4c(%rbp)\n 285:\t83 7d b4 00          \tcmpl   $0x0,-0x4c(%rbp)\n 289:\t0f 8f 53 ff ff ff    \tjg     1e2 <pcspk_callback+0xa0>\n 28f:\teb 04                \tjmp    295 <pcspk_callback+0x153>\n 291:\t90                   \tnop\n 292:\teb 01                \tjmp    295 <pcspk_callback+0x153>\n 294:\t90                   \tnop\n 295:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 299:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n 2a0:\t00 00 \n 2a2:\t74 05                \tje     2a9 <pcspk_callback+0x167>\n 2a4:\te8 00 00 00 00       \tcallq  2a9 <pcspk_callback+0x167>\n 2a9:\tc9                   \tleaveq \n 2aa:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall pcspk_callback(__int64 a1, int a2) {\n  unsigned int v2;\n  unsigned int v5;\n  int v6;\n  char <span class=\"supfact\">v7</span>[Number];\n  int v8;\n  unsigned int v9;\n  unsigned __int64 v10;\n  v10 = __readfsqword(Number);\n  pit_get_channel_info(*(_QWORD *)(a1 + Number), Number L, <span class=\"supfact\">v7</span>);\n  if (v8 == Number) {\n    v5 = v9;\n    if (v9 <= Number)\n      v5 = Number;\n    if (v5 != *(_DWORD *)(a1 + Number)) {\n      *(_DWORD *)(a1 + Number) = v5;\n      *(_DWORD *)(a1 + Number) = Number;\n      generate_samples(a1);\n    }\n    while (a2 > Number) {\n      v2 = a2;\n      if (*(_DWORD *)(a1 + Number) - *(_DWORD *)(a1 + Number) <=\n          (unsigned int)a2)\n        v2 = *(_DWORD *)(a1 + Number) - *(_DWORD *)(a1 + Number);\n      v6 = AUD_write(*(_QWORD *)(a1 + Number),\n                     *(unsigned int *)(a1 + Number) + Number L + a1 + Number,\n                     v2);\n      if (!v6)\n        break;\n      *(_DWORD *)(a1 + Number) = (unsigned int)(v6 + *(_DWORD *)(a1 + Number)) %\n                                 *(_DWORD *)(a1 + Number);\n      a2 -= v6;\n    }\n  }\n  return __readfsqword(Number) ^ v10;\n}", "code_t": "void __cdecl pcspk_callback(void *opaque, int free) {\n  unsigned int v2;\n  int n;\n  unsigned int na;\n  PITChannelInfo_0 <span class=\"supfact\">ch_0</span>;\n  unsigned __int64 v7;\n  v7 = __readfsqword(Number);\n  pit_get_channel_info(*((_QWORD *)opaque + Number), Number L,\n                       &<span class=\"supfact\">ch_0</span>);\n  if (<span class=\"supfact\">ch_0</span>.mode == Number) {\n    n = <span class=\"supfact\">ch_0</span>.initial_count;\n    if (<span class=\"supfact\">ch_0</span>.initial_count <= Number)\n      n = Number;\n    if (n != *((_DWORD *)opaque + Number)) {\n      *((_DWORD *)opaque + Number) = n;\n      *((_DWORD *)opaque + Number) = Number;\n      generate_samples((PCSpkState *)opaque);\n    }\n    while (free > Number) {\n      v2 = free;\n      if (*((_DWORD *)opaque + Number) - *((_DWORD *)opaque + Number) <=\n          (unsigned int)free)\n        v2 = *((_DWORD *)opaque + Number) - *((_DWORD *)opaque + Number);\n      na = AUD_write(\n          *((_QWORD *)opaque + Number),\n          (char *)opaque + *((unsigned int *)opaque + Number) + Number, v2);\n      if (!na)\n        break;\n      *((_DWORD *)opaque + Number) =\n          (na + *((_DWORD *)opaque + Number)) % *((_DWORD *)opaque + Number);\n      free -= na;\n    }\n  }\n}", "var": [{"name": "v7", "type": "struct PITChannelInfo_0 { int gate; int mode; int initial_count; int out; }", "pred_name": "ch_0", "ref_name": "ch_0", "ref_type": "struct PITChannelInfo_0 { int gate; int mode; int initial_count; int out; }"}], "body_in_train": false}, {"repo_owner": "islanderz", "repo_name": "ARDRoneSDK", "path": "islanderz/ARDRoneSDK/c12b797bb589749b507ffe6a0ed9932d2ae6edf3466c202b4fd379f6f7c13aab", "path_in_repo": "islanderz/ARDRoneSDK/ARDroneLib/Soft/Build/targets_versions/ardrone_lib_PROD_MODE_vlib_Linux_4.4.0-164-generic_GNU_Linux_usrcustomscriptsmock_pathgcc_9.2.0/ardrone_tool/Video/video_stage_latency_estimation.o", "objdump": "0000000000000185 <latency_estimation_stage_transform>:\n 185:\t55                   \tpush   %rbp\n 186:\t48 89 e5             \tmov    %rsp,%rbp\n 189:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n 18d:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n 191:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n 195:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n 199:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 19d:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n 1a2:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 1a6:\tf3 0f 11 45 ec       \tmovss  %xmm0,-0x14(%rbp)\n 1ab:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 1af:\tf3 0f 11 45 e8       \tmovss  %xmm0,-0x18(%rbp)\n 1b4:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 1b8:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 1bc:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n 1c0:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1c4:\t8b 40 20             \tmov    0x20(%rax),%eax\n 1c7:\t85 c0                \ttest   %eax,%eax\n 1c9:\t75 0b                \tjne    1d6 <latency_estimation_stage_transform+0x51>\n 1cb:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1cf:\tc7 40 20 01 00 00 00 \tmovl   $0x1,0x20(%rax)\n 1d6:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1da:\t8b 10                \tmov    (%rax),%edx\n 1dc:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1e0:\t89 10                \tmov    %edx,(%rax)\n 1e2:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1e6:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 1ea:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1ee:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n 1f2:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 1f6:\t8b 50 10             \tmov    0x10(%rax),%edx\n 1f9:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 1fd:\t89 50 10             \tmov    %edx,0x10(%rax)\n 200:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 204:\t8b 50 14             \tmov    0x14(%rax),%edx\n 207:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 20b:\t89 50 14             \tmov    %edx,0x14(%rax)\n 20e:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 212:\t48 8b 50 18          \tmov    0x18(%rax),%rdx\n 216:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 21a:\t48 89 50 18          \tmov    %rdx,0x18(%rax)\n 21e:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 222:\t8b 40 20             \tmov    0x20(%rax),%eax\n 225:\t83 f8 01             \tcmp    $0x1,%eax\n 228:\t0f 85 a6 07 00 00    \tjne    9d4 <latency_estimation_stage_transform+0x84f>\n 22e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 232:\t8b 40 08             \tmov    0x8(%rax),%eax\n 235:\t89 c2                \tmov    %eax,%edx\n 237:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 23b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 23f:\t8b 40 04             \tmov    0x4(%rax),%eax\n 242:\t39 c2                \tcmp    %eax,%edx\n 244:\t75 1c                \tjne    262 <latency_estimation_stage_transform+0xdd>\n 246:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 24a:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 24d:\t89 c2                \tmov    %eax,%edx\n 24f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 253:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 257:\t8b 40 08             \tmov    0x8(%rax),%eax\n 25a:\t39 c2                \tcmp    %eax,%edx\n 25c:\t0f 84 29 02 00 00    \tje     48b <latency_estimation_stage_transform+0x306>\n 262:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 266:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 26a:\t8b 40 04             \tmov    0x4(%rax),%eax\n 26d:\t89 c2                \tmov    %eax,%edx\n 26f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 273:\t89 50 08             \tmov    %edx,0x8(%rax)\n 276:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 27a:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 27e:\t8b 40 08             \tmov    0x8(%rax),%eax\n 281:\t89 c2                \tmov    %eax,%edx\n 283:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 287:\t89 50 0c             \tmov    %edx,0xc(%rax)\n 28a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 291 <latency_estimation_stage_transform+0x10c>\n 291:\t48 85 c0             \ttest   %rax,%rax\n 294:\t74 0a                \tje     2a0 <latency_estimation_stage_transform+0x11b>\n 296:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 29b:\te8 00 00 00 00       \tcallq  2a0 <latency_estimation_stage_transform+0x11b>\n 2a0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2a7 <latency_estimation_stage_transform+0x122>\n 2a7:\t48 85 c0             \ttest   %rax,%rax\n 2aa:\t74 0a                \tje     2b6 <latency_estimation_stage_transform+0x131>\n 2ac:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2b1:\te8 00 00 00 00       \tcallq  2b6 <latency_estimation_stage_transform+0x131>\n 2b6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2bd <latency_estimation_stage_transform+0x138>\n 2bd:\t48 85 c0             \ttest   %rax,%rax\n 2c0:\t74 0a                \tje     2cc <latency_estimation_stage_transform+0x147>\n 2c2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2c7:\te8 00 00 00 00       \tcallq  2cc <latency_estimation_stage_transform+0x147>\n 2cc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 2d0:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 2d4:\t8b 00                \tmov    (%rax),%eax\n 2d6:\t83 f8 02             \tcmp    $0x2,%eax\n 2d9:\t75 1c                \tjne    2f7 <latency_estimation_stage_transform+0x172>\n 2db:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 2df:\t8b 50 08             \tmov    0x8(%rax),%edx\n 2e2:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 2e6:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 2e9:\t0f af d0             \timul   %eax,%edx\n 2ec:\t89 d0                \tmov    %edx,%eax\n 2ee:\t01 c0                \tadd    %eax,%eax\n 2f0:\t01 d0                \tadd    %edx,%eax\n 2f2:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 2f5:\teb 17                \tjmp    30e <latency_estimation_stage_transform+0x189>\n 2f7:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 2fb:\t8b 50 08             \tmov    0x8(%rax),%edx\n 2fe:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 302:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 305:\t0f af c2             \timul   %edx,%eax\n 308:\t01 c0                \tadd    %eax,%eax\n 30a:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n 30d:\t90                   \tnop\n 30e:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 311:\t48 98                \tcltq   \n 313:\t48 89 c7             \tmov    %rax,%rdi\n 316:\te8 00 00 00 00       \tcallq  31b <latency_estimation_stage_transform+0x196>\n 31b:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 322 <latency_estimation_stage_transform+0x19d>\n 322:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 325:\t48 98                \tcltq   \n 327:\t48 89 c7             \tmov    %rax,%rdi\n 32a:\te8 00 00 00 00       \tcallq  32f <latency_estimation_stage_transform+0x1aa>\n 32f:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 336 <latency_estimation_stage_transform+0x1b1>\n 336:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 339:\t48 98                \tcltq   \n 33b:\t48 89 c7             \tmov    %rax,%rdi\n 33e:\te8 00 00 00 00       \tcallq  343 <latency_estimation_stage_transform+0x1be>\n 343:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 34a <latency_estimation_stage_transform+0x1c5>\n 34a:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 351 <latency_estimation_stage_transform+0x1cc>\n 351:\t48 85 c0             \ttest   %rax,%rax\n 354:\t74 1a                \tje     370 <latency_estimation_stage_transform+0x1eb>\n 356:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 359:\t48 63 d0             \tmovslq %eax,%rdx\n 35c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 363 <latency_estimation_stage_transform+0x1de>\n 363:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 368:\t48 89 c7             \tmov    %rax,%rdi\n 36b:\te8 90 fc ff ff       \tcallq  0 <vp_os_memset>\n 370:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 377 <latency_estimation_stage_transform+0x1f2>\n 377:\t48 85 c0             \ttest   %rax,%rax\n 37a:\t74 1a                \tje     396 <latency_estimation_stage_transform+0x211>\n 37c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 37f:\t48 63 d0             \tmovslq %eax,%rdx\n 382:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 389 <latency_estimation_stage_transform+0x204>\n 389:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 38e:\t48 89 c7             \tmov    %rax,%rdi\n 391:\te8 6a fc ff ff       \tcallq  0 <vp_os_memset>\n 396:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 39d <latency_estimation_stage_transform+0x218>\n 39d:\t48 85 c0             \ttest   %rax,%rax\n 3a0:\t74 1a                \tje     3bc <latency_estimation_stage_transform+0x237>\n 3a2:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 3a5:\t48 63 d0             \tmovslq %eax,%rdx\n 3a8:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3af <latency_estimation_stage_transform+0x22a>\n 3af:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 3b4:\t48 89 c7             \tmov    %rax,%rdi\n 3b7:\te8 44 fc ff ff       \tcallq  0 <vp_os_memset>\n 3bc:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 3c0:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 3c4:\t8b 00                \tmov    (%rax),%eax\n 3c6:\t83 f8 02             \tcmp    $0x2,%eax\n 3c9:\t75 57                \tjne    422 <latency_estimation_stage_transform+0x29d>\n 3cb:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 3d2:\teb 44                \tjmp    418 <latency_estimation_stage_transform+0x293>\n 3d4:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 3db <latency_estimation_stage_transform+0x256>\n 3db:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 3de:\t48 98                \tcltq   \n 3e0:\t48 01 d0             \tadd    %rdx,%rax\n 3e3:\tc6 00 ff             \tmovb   $0xff,(%rax)\n 3e6:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 3ed <latency_estimation_stage_transform+0x268>\n 3ed:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 3f0:\t48 63 d2             \tmovslq %edx,%rdx\n 3f3:\t48 83 c2 01          \tadd    $0x1,%rdx\n 3f7:\t48 01 d0             \tadd    %rdx,%rax\n 3fa:\tc6 00 ff             \tmovb   $0xff,(%rax)\n 3fd:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 404 <latency_estimation_stage_transform+0x27f>\n 404:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 407:\t48 63 d2             \tmovslq %edx,%rdx\n 40a:\t48 83 c2 02          \tadd    $0x2,%rdx\n 40e:\t48 01 d0             \tadd    %rdx,%rax\n 411:\tc6 00 ff             \tmovb   $0xff,(%rax)\n 414:\t83 45 fc 03          \taddl   $0x3,-0x4(%rbp)\n 418:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 41b:\t3b 45 f4             \tcmp    -0xc(%rbp),%eax\n 41e:\t7c b4                \tjl     3d4 <latency_estimation_stage_transform+0x24f>\n 420:\teb 6a                \tjmp    48c <latency_estimation_stage_transform+0x307>\n 422:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 429:\teb 56                \tjmp    481 <latency_estimation_stage_transform+0x2fc>\n 42b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 432 <latency_estimation_stage_transform+0x2ad>\n 432:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 435:\t48 63 d2             \tmovslq %edx,%rdx\n 438:\t48 83 c2 01          \tadd    $0x1,%rdx\n 43c:\t48 01 d0             \tadd    %rdx,%rax\n 43f:\tc6 00 f8             \tmovb   $0xf8,(%rax)\n 442:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 449 <latency_estimation_stage_transform+0x2c4>\n 449:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n 44c:\t48 63 d2             \tmovslq %edx,%rdx\n 44f:\t48 83 c2 01          \tadd    $0x1,%rdx\n 453:\t48 01 d0             \tadd    %rdx,%rax\n 456:\tc6 00 07             \tmovb   $0x7,(%rax)\n 459:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 460 <latency_estimation_stage_transform+0x2db>\n 460:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 463:\t48 98                \tcltq   \n 465:\t48 01 d0             \tadd    %rdx,%rax\n 468:\tc6 00 e0             \tmovb   $0xe0,(%rax)\n 46b:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 472 <latency_estimation_stage_transform+0x2ed>\n 472:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 475:\t48 98                \tcltq   \n 477:\t48 01 d0             \tadd    %rdx,%rax\n 47a:\tc6 00 1f             \tmovb   $0x1f,(%rax)\n 47d:\t83 45 fc 02          \taddl   $0x2,-0x4(%rbp)\n 481:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 484:\t3b 45 f4             \tcmp    -0xc(%rbp),%eax\n 487:\t7c a2                \tjl     42b <latency_estimation_stage_transform+0x2a6>\n 489:\teb 01                \tjmp    48c <latency_estimation_stage_transform+0x307>\n 48b:\t90                   \tnop\n 48c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 490:\t8b 00                \tmov    (%rax),%eax\n 492:\t83 f8 01             \tcmp    $0x1,%eax\n 495:\t75 1c                \tjne    4b3 <latency_estimation_stage_transform+0x32e>\n 497:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 49b:\t8b 10                \tmov    (%rax),%edx\n 49d:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 4a1:\t89 10                \tmov    %edx,(%rax)\n 4a3:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 4a7:\t8b 50 10             \tmov    0x10(%rax),%edx\n 4aa:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 4ae:\t89 50 10             \tmov    %edx,0x10(%rax)\n 4b1:\teb 15                \tjmp    4c8 <latency_estimation_stage_transform+0x343>\n 4b3:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 4b7:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n 4bd:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 4c1:\tc7 40 10 00 00 00 00 \tmovl   $0x0,0x10(%rax)\n 4c8:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 4cc:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n 4d1:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 4d5:\tf3 0f 11 45 ec       \tmovss  %xmm0,-0x14(%rbp)\n 4da:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 4de:\tf3 0f 11 45 e8       \tmovss  %xmm0,-0x18(%rbp)\n 4e3:\tc7 45 fc fd ff ff ff \tmovl   $0xfffffffd,-0x4(%rbp)\n 4ea:\te9 85 02 00 00       \tjmpq   774 <latency_estimation_stage_transform+0x5ef>\n 4ef:\tc7 45 f8 fd ff ff ff \tmovl   $0xfffffffd,-0x8(%rbp)\n 4f6:\te9 6b 02 00 00       \tjmpq   766 <latency_estimation_stage_transform+0x5e1>\n 4fb:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 4ff:\t8b 40 08             \tmov    0x8(%rax),%eax\n 502:\t89 c2                \tmov    %eax,%edx\n 504:\tc1 ea 1f             \tshr    $0x1f,%edx\n 507:\t01 d0                \tadd    %edx,%eax\n 509:\td1 f8                \tsar    %eax\n 50b:\t89 c2                \tmov    %eax,%edx\n 50d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 510:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n 513:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 517:\t8b 50 08             \tmov    0x8(%rax),%edx\n 51a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 51e:\t8b 40 0c             \tmov    0xc(%rax),%eax\n 521:\t89 c6                \tmov    %eax,%esi\n 523:\tc1 ee 1f             \tshr    $0x1f,%esi\n 526:\t01 f0                \tadd    %esi,%eax\n 528:\td1 f8                \tsar    %eax\n 52a:\t89 c6                \tmov    %eax,%esi\n 52c:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 52f:\t01 f0                \tadd    %esi,%eax\n 531:\t0f af c2             \timul   %edx,%eax\n 534:\t01 c8                \tadd    %ecx,%eax\n 536:\t89 45 d8             \tmov    %eax,-0x28(%rbp)\n 539:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 53d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 541:\t8b 00                \tmov    (%rax),%eax\n 543:\t83 f8 02             \tcmp    $0x2,%eax\n 546:\t74 0e                \tje     556 <latency_estimation_stage_transform+0x3d1>\n 548:\t83 f8 2c             \tcmp    $0x2c,%eax\n 54b:\t0f 84 e1 00 00 00    \tje     632 <latency_estimation_stage_transform+0x4ad>\n 551:\te9 ee 01 00 00       \tjmpq   744 <latency_estimation_stage_transform+0x5bf>\n 556:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 55a:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 55e:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 562:\t8b 40 10             \tmov    0x10(%rax),%eax\n 565:\t89 c0                \tmov    %eax,%eax\n 567:\t48 c1 e0 03          \tshl    $0x3,%rax\n 56b:\t48 01 d0             \tadd    %rdx,%rax\n 56e:\t48 8b 08             \tmov    (%rax),%rcx\n 571:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n 574:\t89 d0                \tmov    %edx,%eax\n 576:\t01 c0                \tadd    %eax,%eax\n 578:\t01 d0                \tadd    %edx,%eax\n 57a:\t48 98                \tcltq   \n 57c:\t48 01 c8             \tadd    %rcx,%rax\n 57f:\t0f b6 00             \tmovzbl (%rax),%eax\n 582:\t88 45 d7             \tmov    %al,-0x29(%rbp)\n 585:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 589:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 58d:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 591:\t8b 40 10             \tmov    0x10(%rax),%eax\n 594:\t89 c0                \tmov    %eax,%eax\n 596:\t48 c1 e0 03          \tshl    $0x3,%rax\n 59a:\t48 01 d0             \tadd    %rdx,%rax\n 59d:\t48 8b 08             \tmov    (%rax),%rcx\n 5a0:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n 5a3:\t89 d0                \tmov    %edx,%eax\n 5a5:\t01 c0                \tadd    %eax,%eax\n 5a7:\t01 d0                \tadd    %edx,%eax\n 5a9:\t48 98                \tcltq   \n 5ab:\t48 83 c0 01          \tadd    $0x1,%rax\n 5af:\t48 01 c8             \tadd    %rcx,%rax\n 5b2:\t0f b6 00             \tmovzbl (%rax),%eax\n 5b5:\t88 45 d6             \tmov    %al,-0x2a(%rbp)\n 5b8:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 5bc:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 5c0:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 5c4:\t8b 40 10             \tmov    0x10(%rax),%eax\n 5c7:\t89 c0                \tmov    %eax,%eax\n 5c9:\t48 c1 e0 03          \tshl    $0x3,%rax\n 5cd:\t48 01 d0             \tadd    %rdx,%rax\n 5d0:\t48 8b 08             \tmov    (%rax),%rcx\n 5d3:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n 5d6:\t89 d0                \tmov    %edx,%eax\n 5d8:\t01 c0                \tadd    %eax,%eax\n 5da:\t01 d0                \tadd    %edx,%eax\n 5dc:\t48 98                \tcltq   \n 5de:\t48 83 c0 02          \tadd    $0x2,%rax\n 5e2:\t48 01 c8             \tadd    %rcx,%rax\n 5e5:\t0f b6 00             \tmovzbl (%rax),%eax\n 5e8:\t88 45 d5             \tmov    %al,-0x2b(%rbp)\n 5eb:\t0f b6 45 d7          \tmovzbl -0x29(%rbp),%eax\n 5ef:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n 5f3:\tf3 0f 10 4d f0       \tmovss  -0x10(%rbp),%xmm1\n 5f8:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n 5fc:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n 601:\t0f b6 45 d6          \tmovzbl -0x2a(%rbp),%eax\n 605:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n 609:\tf3 0f 10 4d ec       \tmovss  -0x14(%rbp),%xmm1\n 60e:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n 612:\tf3 0f 11 45 ec       \tmovss  %xmm0,-0x14(%rbp)\n 617:\t0f b6 45 d5          \tmovzbl -0x2b(%rbp),%eax\n 61b:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n 61f:\tf3 0f 10 4d e8       \tmovss  -0x18(%rbp),%xmm1\n 624:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n 628:\tf3 0f 11 45 e8       \tmovss  %xmm0,-0x18(%rbp)\n 62d:\te9 30 01 00 00       \tjmpq   762 <latency_estimation_stage_transform+0x5dd>\n 632:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 636:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 63a:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 63e:\t8b 40 10             \tmov    0x10(%rax),%eax\n 641:\t89 c0                \tmov    %eax,%eax\n 643:\t48 c1 e0 03          \tshl    $0x3,%rax\n 647:\t48 01 d0             \tadd    %rdx,%rax\n 64a:\t48 8b 00             \tmov    (%rax),%rax\n 64d:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n 650:\t01 d2                \tadd    %edx,%edx\n 652:\t48 63 d2             \tmovslq %edx,%rdx\n 655:\t48 83 c2 01          \tadd    $0x1,%rdx\n 659:\t48 01 d0             \tadd    %rdx,%rax\n 65c:\t0f b6 00             \tmovzbl (%rax),%eax\n 65f:\tc0 e8 03             \tshr    $0x3,%al\n 662:\t88 45 d7             \tmov    %al,-0x29(%rbp)\n 665:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 669:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 66d:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 671:\t8b 40 10             \tmov    0x10(%rax),%eax\n 674:\t89 c0                \tmov    %eax,%eax\n 676:\t48 c1 e0 03          \tshl    $0x3,%rax\n 67a:\t48 01 d0             \tadd    %rdx,%rax\n 67d:\t48 8b 00             \tmov    (%rax),%rax\n 680:\t8b 55 d8             \tmov    -0x28(%rbp),%edx\n 683:\t01 d2                \tadd    %edx,%edx\n 685:\t48 63 d2             \tmovslq %edx,%rdx\n 688:\t48 83 c2 01          \tadd    $0x1,%rdx\n 68c:\t48 01 d0             \tadd    %rdx,%rax\n 68f:\t0f b6 00             \tmovzbl (%rax),%eax\n 692:\t0f b6 c0             \tmovzbl %al,%eax\n 695:\tc1 e0 03             \tshl    $0x3,%eax\n 698:\t83 e0 38             \tand    $0x38,%eax\n 69b:\t89 c1                \tmov    %eax,%ecx\n 69d:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 6a1:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 6a5:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 6a9:\t8b 40 10             \tmov    0x10(%rax),%eax\n 6ac:\t89 c0                \tmov    %eax,%eax\n 6ae:\t48 c1 e0 03          \tshl    $0x3,%rax\n 6b2:\t48 01 d0             \tadd    %rdx,%rax\n 6b5:\t48 8b 10             \tmov    (%rax),%rdx\n 6b8:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 6bb:\t01 c0                \tadd    %eax,%eax\n 6bd:\t48 98                \tcltq   \n 6bf:\t48 01 d0             \tadd    %rdx,%rax\n 6c2:\t0f b6 00             \tmovzbl (%rax),%eax\n 6c5:\tc0 e8 05             \tshr    $0x5,%al\n 6c8:\t01 c8                \tadd    %ecx,%eax\n 6ca:\t88 45 d6             \tmov    %al,-0x2a(%rbp)\n 6cd:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 6d1:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 6d5:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 6d9:\t8b 40 10             \tmov    0x10(%rax),%eax\n 6dc:\t89 c0                \tmov    %eax,%eax\n 6de:\t48 c1 e0 03          \tshl    $0x3,%rax\n 6e2:\t48 01 d0             \tadd    %rdx,%rax\n 6e5:\t48 8b 10             \tmov    (%rax),%rdx\n 6e8:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 6eb:\t01 c0                \tadd    %eax,%eax\n 6ed:\t48 98                \tcltq   \n 6ef:\t48 01 d0             \tadd    %rdx,%rax\n 6f2:\t0f b6 00             \tmovzbl (%rax),%eax\n 6f5:\t83 e0 1f             \tand    $0x1f,%eax\n 6f8:\t88 45 d5             \tmov    %al,-0x2b(%rbp)\n 6fb:\t0f b6 45 d7          \tmovzbl -0x29(%rbp),%eax\n 6ff:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n 703:\tf3 0f 10 4d f0       \tmovss  -0x10(%rbp),%xmm1\n 708:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n 70c:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n 711:\t0f b6 45 d6          \tmovzbl -0x2a(%rbp),%eax\n 715:\td0 e8                \tshr    %al\n 717:\t0f b6 c0             \tmovzbl %al,%eax\n 71a:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n 71e:\tf3 0f 10 4d ec       \tmovss  -0x14(%rbp),%xmm1\n 723:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n 727:\tf3 0f 11 45 ec       \tmovss  %xmm0,-0x14(%rbp)\n 72c:\t0f b6 45 d5          \tmovzbl -0x2b(%rbp),%eax\n 730:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n 734:\tf3 0f 10 4d e8       \tmovss  -0x18(%rbp),%xmm1\n 739:\tf3 0f 58 c1          \taddss  %xmm1,%xmm0\n 73d:\tf3 0f 11 45 e8       \tmovss  %xmm0,-0x18(%rbp)\n 742:\teb 1e                \tjmp    762 <latency_estimation_stage_transform+0x5dd>\n 744:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n 748:\tf3 0f 11 45 e8       \tmovss  %xmm0,-0x18(%rbp)\n 74d:\tf3 0f 10 45 e8       \tmovss  -0x18(%rbp),%xmm0\n 752:\tf3 0f 11 45 ec       \tmovss  %xmm0,-0x14(%rbp)\n 757:\tf3 0f 10 45 ec       \tmovss  -0x14(%rbp),%xmm0\n 75c:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n 761:\t90                   \tnop\n 762:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n 766:\t83 7d f8 03          \tcmpl   $0x3,-0x8(%rbp)\n 76a:\t0f 8e 8b fd ff ff    \tjle    4fb <latency_estimation_stage_transform+0x376>\n 770:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 774:\t83 7d fc 03          \tcmpl   $0x3,-0x4(%rbp)\n 778:\t0f 8e 71 fd ff ff    \tjle    4ef <latency_estimation_stage_transform+0x36a>\n 77e:\tf3 0f 10 05 00 00 00 \tmovss  0x0(%rip),%xmm0        # 786 <latency_estimation_stage_transform+0x601>\n 785:\t00 \n 786:\tf3 0f 11 45 dc       \tmovss  %xmm0,-0x24(%rbp)\n 78b:\tf3 0f 10 45 f0       \tmovss  -0x10(%rbp),%xmm0\n 790:\tf3 0f 5e 45 dc       \tdivss  -0x24(%rbp),%xmm0\n 795:\tf3 0f 11 45 f0       \tmovss  %xmm0,-0x10(%rbp)\n 79a:\tf3 0f 10 45 ec       \tmovss  -0x14(%rbp),%xmm0\n 79f:\tf3 0f 5e 45 dc       \tdivss  -0x24(%rbp),%xmm0\n 7a4:\tf3 0f 11 45 ec       \tmovss  %xmm0,-0x14(%rbp)\n 7a9:\tf3 0f 10 45 e8       \tmovss  -0x18(%rbp),%xmm0\n 7ae:\tf3 0f 5e 45 dc       \tdivss  -0x24(%rbp),%xmm0\n 7b3:\tf3 0f 11 45 e8       \tmovss  %xmm0,-0x18(%rbp)\n 7b8:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 7bc:\t8b 00                \tmov    (%rax),%eax\n 7be:\t83 f8 04             \tcmp    $0x4,%eax\n 7c1:\t0f 84 3f 01 00 00    \tje     906 <latency_estimation_stage_transform+0x781>\n 7c7:\t83 f8 04             \tcmp    $0x4,%eax\n 7ca:\t0f 87 a6 01 00 00    \tja     976 <latency_estimation_stage_transform+0x7f1>\n 7d0:\t83 f8 03             \tcmp    $0x3,%eax\n 7d3:\t0f 84 bd 00 00 00    \tje     896 <latency_estimation_stage_transform+0x711>\n 7d9:\t83 f8 03             \tcmp    $0x3,%eax\n 7dc:\t0f 87 94 01 00 00    \tja     976 <latency_estimation_stage_transform+0x7f1>\n 7e2:\t83 f8 01             \tcmp    $0x1,%eax\n 7e5:\t74 0a                \tje     7f1 <latency_estimation_stage_transform+0x66c>\n 7e7:\t83 f8 02             \tcmp    $0x2,%eax\n 7ea:\t74 34                \tje     820 <latency_estimation_stage_transform+0x69b>\n 7ec:\te9 85 01 00 00       \tjmpq   976 <latency_estimation_stage_transform+0x7f1>\n 7f1:\tf3 0f 10 45 ec       \tmovss  -0x14(%rbp),%xmm0\n 7f6:\t0f 2f 45 f0          \tcomiss -0x10(%rbp),%xmm0\n 7fa:\t77 05                \tja     801 <latency_estimation_stage_transform+0x67c>\n 7fc:\te9 76 01 00 00       \tjmpq   977 <latency_estimation_stage_transform+0x7f2>\n 801:\tf3 0f 10 45 ec       \tmovss  -0x14(%rbp),%xmm0\n 806:\t0f 2f 45 e8          \tcomiss -0x18(%rbp),%xmm0\n 80a:\t77 05                \tja     811 <latency_estimation_stage_transform+0x68c>\n 80c:\te9 66 01 00 00       \tjmpq   977 <latency_estimation_stage_transform+0x7f2>\n 811:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 815:\tc7 00 02 00 00 00    \tmovl   $0x2,(%rax)\n 81b:\te9 57 01 00 00       \tjmpq   977 <latency_estimation_stage_transform+0x7f2>\n 820:\tf3 0f 10 45 ec       \tmovss  -0x14(%rbp),%xmm0\n 825:\t0f 2f 45 f0          \tcomiss -0x10(%rbp),%xmm0\n 829:\t76 17                \tjbe    842 <latency_estimation_stage_transform+0x6bd>\n 82b:\tf3 0f 10 45 ec       \tmovss  -0x14(%rbp),%xmm0\n 830:\t0f 2f 45 e8          \tcomiss -0x18(%rbp),%xmm0\n 834:\t76 0c                \tjbe    842 <latency_estimation_stage_transform+0x6bd>\n 836:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 83a:\tc7 00 02 00 00 00    \tmovl   $0x2,(%rax)\n 840:\teb 4f                \tjmp    891 <latency_estimation_stage_transform+0x70c>\n 842:\tf3 0f 10 45 f0       \tmovss  -0x10(%rbp),%xmm0\n 847:\t0f 2f 45 e8          \tcomiss -0x18(%rbp),%xmm0\n 84b:\t76 17                \tjbe    864 <latency_estimation_stage_transform+0x6df>\n 84d:\tf3 0f 10 45 f0       \tmovss  -0x10(%rbp),%xmm0\n 852:\t0f 2f 45 ec          \tcomiss -0x14(%rbp),%xmm0\n 856:\t76 0c                \tjbe    864 <latency_estimation_stage_transform+0x6df>\n 858:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 85c:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n 862:\teb 2d                \tjmp    891 <latency_estimation_stage_transform+0x70c>\n 864:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 868:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n 86e:\tf3 0f 5a 55 e8       \tcvtss2sd -0x18(%rbp),%xmm2\n 873:\tf3 0f 5a 4d ec       \tcvtss2sd -0x14(%rbp),%xmm1\n 878:\tf3 0f 5a 45 f0       \tcvtss2sd -0x10(%rbp),%xmm0\n 87d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 882:\tb8 03 00 00 00       \tmov    $0x3,%eax\n 887:\te8 00 00 00 00       \tcallq  88c <latency_estimation_stage_transform+0x707>\n 88c:\te9 e6 00 00 00       \tjmpq   977 <latency_estimation_stage_transform+0x7f2>\n 891:\te9 e1 00 00 00       \tjmpq   977 <latency_estimation_stage_transform+0x7f2>\n 896:\tf3 0f 10 45 f0       \tmovss  -0x10(%rbp),%xmm0\n 89b:\t0f 2f 45 e8          \tcomiss -0x18(%rbp),%xmm0\n 89f:\t76 17                \tjbe    8b8 <latency_estimation_stage_transform+0x733>\n 8a1:\tf3 0f 10 45 f0       \tmovss  -0x10(%rbp),%xmm0\n 8a6:\t0f 2f 45 ec          \tcomiss -0x14(%rbp),%xmm0\n 8aa:\t76 0c                \tjbe    8b8 <latency_estimation_stage_transform+0x733>\n 8ac:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 8b0:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n 8b6:\teb 4c                \tjmp    904 <latency_estimation_stage_transform+0x77f>\n 8b8:\tf3 0f 10 45 e8       \tmovss  -0x18(%rbp),%xmm0\n 8bd:\t0f 2f 45 ec          \tcomiss -0x14(%rbp),%xmm0\n 8c1:\t76 17                \tjbe    8da <latency_estimation_stage_transform+0x755>\n 8c3:\tf3 0f 10 45 e8       \tmovss  -0x18(%rbp),%xmm0\n 8c8:\t0f 2f 45 f0          \tcomiss -0x10(%rbp),%xmm0\n 8cc:\t76 0c                \tjbe    8da <latency_estimation_stage_transform+0x755>\n 8ce:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 8d2:\tc7 00 03 00 00 00    \tmovl   $0x3,(%rax)\n 8d8:\teb 2a                \tjmp    904 <latency_estimation_stage_transform+0x77f>\n 8da:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 8de:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n 8e4:\tf3 0f 5a 55 e8       \tcvtss2sd -0x18(%rbp),%xmm2\n 8e9:\tf3 0f 5a 4d ec       \tcvtss2sd -0x14(%rbp),%xmm1\n 8ee:\tf3 0f 5a 45 f0       \tcvtss2sd -0x10(%rbp),%xmm0\n 8f3:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 8f8:\tb8 03 00 00 00       \tmov    $0x3,%eax\n 8fd:\te8 00 00 00 00       \tcallq  902 <latency_estimation_stage_transform+0x77d>\n 902:\teb 73                \tjmp    977 <latency_estimation_stage_transform+0x7f2>\n 904:\teb 71                \tjmp    977 <latency_estimation_stage_transform+0x7f2>\n 906:\tf3 0f 10 45 e8       \tmovss  -0x18(%rbp),%xmm0\n 90b:\t0f 2f 45 ec          \tcomiss -0x14(%rbp),%xmm0\n 90f:\t76 17                \tjbe    928 <latency_estimation_stage_transform+0x7a3>\n 911:\tf3 0f 10 45 e8       \tmovss  -0x18(%rbp),%xmm0\n 916:\t0f 2f 45 f0          \tcomiss -0x10(%rbp),%xmm0\n 91a:\t76 0c                \tjbe    928 <latency_estimation_stage_transform+0x7a3>\n 91c:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 920:\tc7 00 03 00 00 00    \tmovl   $0x3,(%rax)\n 926:\teb 4c                \tjmp    974 <latency_estimation_stage_transform+0x7ef>\n 928:\tf3 0f 10 45 f0       \tmovss  -0x10(%rbp),%xmm0\n 92d:\t0f 2f 45 e8          \tcomiss -0x18(%rbp),%xmm0\n 931:\t76 17                \tjbe    94a <latency_estimation_stage_transform+0x7c5>\n 933:\tf3 0f 10 45 f0       \tmovss  -0x10(%rbp),%xmm0\n 938:\t0f 2f 45 ec          \tcomiss -0x14(%rbp),%xmm0\n 93c:\t76 0c                \tjbe    94a <latency_estimation_stage_transform+0x7c5>\n 93e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 942:\tc7 00 04 00 00 00    \tmovl   $0x4,(%rax)\n 948:\teb 2a                \tjmp    974 <latency_estimation_stage_transform+0x7ef>\n 94a:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 94e:\tc7 00 01 00 00 00    \tmovl   $0x1,(%rax)\n 954:\tf3 0f 5a 55 e8       \tcvtss2sd -0x18(%rbp),%xmm2\n 959:\tf3 0f 5a 4d ec       \tcvtss2sd -0x14(%rbp),%xmm1\n 95e:\tf3 0f 5a 45 f0       \tcvtss2sd -0x10(%rbp),%xmm0\n 963:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 968:\tb8 03 00 00 00       \tmov    $0x3,%eax\n 96d:\te8 00 00 00 00       \tcallq  972 <latency_estimation_stage_transform+0x7ed>\n 972:\teb 03                \tjmp    977 <latency_estimation_stage_transform+0x7f2>\n 974:\teb 01                \tjmp    977 <latency_estimation_stage_transform+0x7f2>\n 976:\t90                   \tnop\n 977:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 97b:\t8b 00                \tmov    (%rax),%eax\n 97d:\t83 f8 04             \tcmp    $0x4,%eax\n 980:\t74 44                \tje     9c6 <latency_estimation_stage_transform+0x841>\n 982:\t83 f8 04             \tcmp    $0x4,%eax\n 985:\t77 11                \tja     998 <latency_estimation_stage_transform+0x813>\n 987:\t83 f8 01             \tcmp    $0x1,%eax\n 98a:\t74 1e                \tje     9aa <latency_estimation_stage_transform+0x825>\n 98c:\t85 c0                \ttest   %eax,%eax\n 98e:\t74 08                \tje     998 <latency_estimation_stage_transform+0x813>\n 990:\t83 e8 02             \tsub    $0x2,%eax\n 993:\t83 f8 01             \tcmp    $0x1,%eax\n 996:\t76 20                \tjbe    9b8 <latency_estimation_stage_transform+0x833>\n 998:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n 99c:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n 9a0:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 9a4:\t48 89 50 08          \tmov    %rdx,0x8(%rax)\n 9a8:\teb 2b                \tjmp    9d5 <latency_estimation_stage_transform+0x850>\n 9aa:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 9ae:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n 9b5:\t00 \n 9b6:\teb 1d                \tjmp    9d5 <latency_estimation_stage_transform+0x850>\n 9b8:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 9bc:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n 9c3:\t00 \n 9c4:\teb 0f                \tjmp    9d5 <latency_estimation_stage_transform+0x850>\n 9c6:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 9ca:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n 9d1:\t00 \n 9d2:\teb 01                \tjmp    9d5 <latency_estimation_stage_transform+0x850>\n 9d4:\t90                   \tnop\n 9d5:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 9d9:\t8b 00                \tmov    (%rax),%eax\n 9db:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 9e1 <latency_estimation_stage_transform+0x85c>\n 9e1:\t39 d0                \tcmp    %edx,%eax\n 9e3:\t0f 84 1a 01 00 00    \tje     b03 <latency_estimation_stage_transform+0x97e>\n 9e9:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 9ed:\t8b 00                \tmov    (%rax),%eax\n 9ef:\t83 f8 02             \tcmp    $0x2,%eax\n 9f2:\t0f 86 0b 01 00 00    \tjbe    b03 <latency_estimation_stage_transform+0x97e>\n 9f8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 9fe <latency_estimation_stage_transform+0x879>\n 9fe:\t83 f8 02             \tcmp    $0x2,%eax\n a01:\t0f 8e fc 00 00 00    \tjle    b03 <latency_estimation_stage_transform+0x97e>\n a07:\t48 8d 45 b0          \tlea    -0x50(%rbp),%rax\n a0b:\tbe 00 00 00 00       \tmov    $0x0,%esi\n a10:\t48 89 c7             \tmov    %rax,%rdi\n a13:\te8 00 00 00 00       \tcallq  a18 <latency_estimation_stage_transform+0x893>\n a18:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n a1c:\t48 69 f0 e8 03 00 00 \timul   $0x3e8,%rax,%rsi\n a23:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n a27:\t48 ba cf f7 53 e3 a5 \tmovabs $0x20c49ba5e353f7cf,%rdx\n a2e:\t9b c4 20 \n a31:\t48 89 c8             \tmov    %rcx,%rax\n a34:\t48 f7 ea             \timul   %rdx\n a37:\t48 c1 fa 07          \tsar    $0x7,%rdx\n a3b:\t48 89 c8             \tmov    %rcx,%rax\n a3e:\t48 c1 f8 3f          \tsar    $0x3f,%rax\n a42:\t48 29 c2             \tsub    %rax,%rdx\n a45:\t48 89 d0             \tmov    %rdx,%rax\n a48:\t48 01 f0             \tadd    %rsi,%rax\n a4b:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # a52 <latency_estimation_stage_transform+0x8cd>\n a52:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # a59 <latency_estimation_stage_transform+0x8d4>\n a59:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a60 <latency_estimation_stage_transform+0x8db>\n a60:\t48 29 c2             \tsub    %rax,%rdx\n a63:\t48 89 d0             \tmov    %rdx,%rax\n a66:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n a6a:\tf3 48 0f 2a 45 c8    \tcvtsi2ssq -0x38(%rbp),%xmm0\n a70:\te8 0f f6 ff ff       \tcallq  84 <average>\n a75:\t66 48 0f 7e c0       \tmovq   %xmm0,%rax\n a7a:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n a7e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a85 <latency_estimation_stage_transform+0x900>\n a85:\t48 85 c0             \ttest   %rax,%rax\n a88:\t74 6b                \tje     af5 <latency_estimation_stage_transform+0x970>\n a8a:\t48 83 7d c8 1e       \tcmpq   $0x1e,-0x38(%rbp)\n a8f:\t7e 64                \tjle    af5 <latency_estimation_stage_transform+0x970>\n a91:\t48 81 7d c8 e7 03 00 \tcmpq   $0x3e7,-0x38(%rbp)\n a98:\t00 \n a99:\t7f 5a                \tjg     af5 <latency_estimation_stage_transform+0x970>\n a9b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n a9f:\t89 c2                \tmov    %eax,%edx\n aa1:\tf3 0f 5a 55 e8       \tcvtss2sd -0x18(%rbp),%xmm2\n aa6:\tf3 0f 5a 4d ec       \tcvtss2sd -0x14(%rbp),%xmm1\n aab:\tf3 0f 5a 45 f0       \tcvtss2sd -0x10(%rbp),%xmm0\n ab0:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n ab4:\t8b 00                \tmov    (%rax),%eax\n ab6:\t89 c6                \tmov    %eax,%esi\n ab8:\tbf 00 00 00 00       \tmov    $0x0,%edi\n abd:\tb8 03 00 00 00       \tmov    $0x3,%eax\n ac2:\te8 00 00 00 00       \tcallq  ac7 <latency_estimation_stage_transform+0x942>\n ac7:\tf3 0f 10 45 a8       \tmovss  -0x58(%rbp),%xmm0\n acc:\tf3 0f 5a c8          \tcvtss2sd %xmm0,%xmm1\n ad0:\tf3 0f 10 45 ac       \tmovss  -0x54(%rbp),%xmm0\n ad5:\tf3 0f 5a c0          \tcvtss2sd %xmm0,%xmm0\n ad9:\tbf 00 00 00 00       \tmov    $0x0,%edi\n ade:\tb8 02 00 00 00       \tmov    $0x2,%eax\n ae3:\te8 00 00 00 00       \tcallq  ae8 <latency_estimation_stage_transform+0x963>\n ae8:\tf3 0f 10 45 ac       \tmovss  -0x54(%rbp),%xmm0\n aed:\tf3 0f 11 05 00 00 00 \tmovss  %xmm0,0x0(%rip)        # af5 <latency_estimation_stage_transform+0x970>\n af4:\t00 \n af5:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # afc <latency_estimation_stage_transform+0x977>\n afc:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # b03 <latency_estimation_stage_transform+0x97e>\n b03:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n b07:\t8b 00                \tmov    (%rax),%eax\n b09:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # b0f <latency_estimation_stage_transform+0x98a>\n b0f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n b14:\tc9                   \tleaveq \n b15:\tc3                   \tretq   ", "code_s": "__int64 __fastcall latency_estimation_stage_transform(unsigned int *a1,\n                                                      __int64 a2, __int64 a3) {\n  int v3;\n  int v4;\n  unsigned int v5;\n  unsigned int v6;\n  double <span class=\"supfact\">v9</span>;\n  struct timeval <span class=\"supfact\">tv</span>;\n  __time_t v11;\n  unsigned __int8 v12;\n  unsigned __int8 v13;\n  unsigned __int8 v14;\n  unsigned int v15;\n  int v16;\n  __int64 v17;\n  float v18;\n  float v19;\n  float v20;\n  int v21;\n  int j;\n  int i;\n  v20 = Number;\n  v19 = Number;\n  v18 = Number;\n  v17 = *((_QWORD *)a1 + Number);\n  if (!*(_DWORD *)(a3 + Number))\n    *(_DWORD *)(a3 + Number) = Number;\n  *(_DWORD *)a3 = *(_DWORD *)a2;\n  *(_QWORD *)(a3 + Number) = *(_QWORD *)(a2 + Number);\n  *(_DWORD *)(a3 + Number) = *(_DWORD *)(a2 + Number);\n  *(_DWORD *)(a3 + Number) = *(_DWORD *)(a2 + Number);\n  *(_QWORD *)(a3 + Number) = *(_QWORD *)(a2 + Number);\n  if (*(_DWORD *)(a3 + Number) != Number)\n    goto LABEL_83;\n  if (a1[Number] != *(_DWORD *)(*(_QWORD *)(v17 + Number) + Number L) ||\n      a1[Number] != *(_DWORD *)(*(_QWORD *)(v17 + Number) + Number L)) {\n    a1[Number] = *(_DWORD *)(*(_QWORD *)(v17 + Number) + Number L);\n    a1[Number] = *(_DWORD *)(*(_QWORD *)(v17 + Number) + Number L);\n    if (red_buffer_11117)\n      vp_os_sfree(&red_buffer_11117);\n    if (green_buffer_11118)\n      vp_os_sfree(&green_buffer_11118);\n    if (blue_buffer_11119)\n      vp_os_sfree(&blue_buffer_11119);\n    if (**(_DWORD **)(v17 + Number) == Number)\n      v3 = Number * a1[Number] * a1[Number];\n    else\n      v3 = Number * a1[Number] * a1[Number];\n    v21 = v3;\n    red_buffer_11117 = vp_os_malloc(v3);\n    green_buffer_11118 = vp_os_malloc(v21);\n    blue_buffer_11119 = vp_os_malloc(v21);\n    if (red_buffer_11117)\n      vp_os_memset((void *)red_buffer_11117, Number, v21);\n    if (green_buffer_11118)\n      vp_os_memset((void *)green_buffer_11118, Number, v21);\n    if (blue_buffer_11119)\n      vp_os_memset((void *)blue_buffer_11119, Number, v21);\n    if (**(_DWORD **)(v17 + Number) == Number) {\n      for (i = Number; i < v21; i += Number) {\n        *(_BYTE *)(red_buffer_11117 + i) = Number;\n        *(_BYTE *)(i + Number L + green_buffer_11118) = Number;\n        *(_BYTE *)(i + Number L + blue_buffer_11119) = Number;\n      }\n    } else {\n      for (i = Number; i < v21; i += Number) {\n        *(_BYTE *)(i + Number L + red_buffer_11117) = Number;\n        *(_BYTE *)(i + Number L + green_buffer_11118) = Number;\n        *(_BYTE *)(green_buffer_11118 + i) = Number;\n        *(_BYTE *)(blue_buffer_11119 + i) = Number;\n      }\n    }\n  }\n  if (*a1 == Number) {\n    *(_DWORD *)a3 = *(_DWORD *)a2;\n    *(_DWORD *)(a3 + Number) = *(_DWORD *)(a2 + Number);\n  } else {\n    *(_DWORD *)a3 = Number;\n    *(_DWORD *)(a3 + Number) = Number;\n  }\n  v20 = Number;\n  v19 = Number;\n  v18 = Number;\n  for (i = Number; i <= Number; ++i) {\n    for (j = Number; j <= Number; ++j) {\n      v15 = (int)a1[Number] / Number + i +\n            a1[Number] * ((int)a1[Number] / Number + j);\n      v4 = **(_DWORD **)(v17 + Number);\n      if (v4 == Number) {\n        v14 =\n            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + Number) +\n                                   Number L * *(unsigned int *)(a2 + Number)) +\n                       (int)(Number * v15));\n        v13 =\n            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + Number) +\n                                   Number L * *(unsigned int *)(a2 + Number)) +\n                       (int)(Number * v15) + Number L);\n        v12 =\n            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + Number) +\n                                   Number L * *(unsigned int *)(a2 + Number)) +\n                       (int)(Number * v15) + Number L);\n        v20 = (float)v14 + v20;\n        v19 = (float)v13 + v19;\n        v18 = (float)v12 + v18;\n      } else if (v4 == Number) {\n        v14 = *(_BYTE *)((int)(Number * v15) + Number L +\n                         *(_QWORD *)(*(_QWORD *)(a2 + Number) +\n                                     Number L *\n                                         *(unsigned int *)(a2 + Number))) >>\n              Number;\n        v13 =\n            ((Number *\n              *(_BYTE *)((int)(Number * v15) + Number L +\n                         *(_QWORD *)(*(_QWORD *)(a2 + Number) +\n                                     Number L *\n                                         *(unsigned int *)(a2 + Number)))) &\n             Number) +\n            (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + Number) +\n                                    Number L * *(unsigned int *)(a2 + Number)) +\n                        (int)(Number * v15)) >>\n             Number);\n        v12 =\n            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + Number) +\n                                   Number L * *(unsigned int *)(a2 + Number)) +\n                       (int)(Number * v15)) &\n            Number;\n        v20 = (float)v14 + v20;\n        v19 = (float)(v13 >> Number) + v19;\n        v18 = (float)v12 + v18;\n      } else {\n        v18 = Number;\n        v19 = Number;\n        v20 = Number;\n      }\n    }\n  }\n  v16 = Number;\n  v20 = v20 / Number;\n  v19 = v19 / Number;\n  v18 = v18 / Number;\n  v5 = *a1;\n  if (*a1 == Number) {\n    if (v18 > v19 && v18 > v20) {\n      *a1 = Number;\n      goto LABEL_74;\n    }\n    if (v20 > v18 && v20 > v19) {\n      *a1 = Number;\n      goto LABEL_74;\n    }\n    goto LABEL_73;\n  }\n  if (v5 > Number)\n    goto LABEL_74;\n  if (v5 == Number) {\n    if (v20 > v18 && v20 > v19) {\n      *a1 = Number;\n      goto LABEL_74;\n    }\n    if (v18 > v19 && v18 > v20) {\n      *a1 = Number;\n      goto LABEL_74;\n    }\n    goto LABEL_73;\n  }\n  if (v5 <= Number) {\n    if (v5 == Number) {\n      if (v19 > v20 && v19 > v18)\n        *a1 = Number;\n      goto LABEL_74;\n    }\n    if (v5 == Number) {\n      if (v19 > v20 && v19 > v18) {\n        *a1 = Number;\n        goto LABEL_74;\n      }\n      if (v20 > v18 && v20 > v19) {\n        *a1 = Number;\n        goto LABEL_74;\n      }\n    LABEL_73:\n      *a1 = Number;\n      printf(String, v20, v19, v18);\n      goto LABEL_74;\n    }\n  }\nLABEL_74:\n  v6 = *a1;\n  if (*a1 == Number) {\n    *(_QWORD *)(a3 + Number) = &blue_buffer_11119;\n    goto LABEL_83;\n  }\n  if (v6 <= Number) {\n    if (v6 == Number) {\n      *(_QWORD *)(a3 + Number) = &green_buffer_11118;\n      goto LABEL_83;\n    }\n    if (v6 && v6 - Number <= Number) {\n      *(_QWORD *)(a3 + Number) = &red_buffer_11117;\n      goto LABEL_83;\n    }\n  }\n  *(_QWORD *)(a3 + Number) = *(_QWORD *)(a2 + Number);\nLABEL_83:\n  if (*a1 != previous_state_11111 && *a1 > Number &&\n      previous_state_11111 > Number) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    timestamp2_11113 = Number * <span class=\"supfact\">tv</span>.tv_sec +\n                       <span class=\"supfact\">tv</span>.tv_usec / Number;\n    v11 = Number * <span class=\"supfact\">tv</span>.tv_sec +\n          <span class=\"supfact\">tv</span>.tv_usec / Number - timestamp1_11112;\n    <span class=\"supfact\">v9</span> = average((float)(int)v11);\n    if (timestamp1_11112 && v11 > Number && v11 <= Number) {\n      printf(String, *a1, v20, v19, v18, (unsigned int)v11);\n      printf(String, *((float *)&<span class=\"supfact\">v9</span> + Number),\n             *(float *)&<span class=\"supfact\">v9</span>);\n      DEBUG_latency = HIDWORD(<span class=\"supfact\">v9</span>);\n    }\n    timestamp1_11112 = timestamp2_11113;\n  }\n  previous_state_11111 = *a1;\n  return Number L;\n}", "code_t": "int __cdecl latency_estimation_stage_transform(\n    vp_stages_latency_estimation_config_t *cfg, vp_api_io_data_t *in,\n    vp_api_io_data_t *out) {\n  int v3;\n  PixelFormat v4;\n  vp_stages_latency_estimation_state v5;\n  vp_stages_latency_estimation_state v6;\n  stat_t <span class=\"supfact\">stat</span>;\n  timeval <span class=\"supfact\">time</span>;\n  __int64 delta;\n  uint8_t blueVal;\n  uint8_t greenVal;\n  uint8_t redVal;\n  int m;\n  float n;\n  video_decoder_config_t *vec;\n  float b;\n  float g;\n  float r;\n  int bufsize;\n  int j;\n  int i;\n  r = Number;\n  g = Number;\n  b = Number;\n  vec = (video_decoder_config_t *)cfg->last_decoded_frame_info;\n  if (out->status == VP_API_STATUS_INIT)\n    out->status = VP_API_STATUS_PROCESSING;\n  out->numBuffers = in->numBuffers;\n  out->buffers = in->buffers;\n  out->indexBuffer = in->indexBuffer;\n  out->size = in->size;\n  out->lineSize = in->lineSize;\n  if (out->status != VP_API_STATUS_PROCESSING)\n    goto LABEL_83;\n  if (cfg->w != vec->dst_picture->width || cfg->h != vec->dst_picture->height) {\n    cfg->w = vec->dst_picture->width;\n    cfg->h = vec->dst_picture->height;\n    if (red_buffer_11117)\n      vp_os_sfree(&red_buffer_11117);\n    if (green_buffer_11118)\n      vp_os_sfree(&green_buffer_11118);\n    if (blue_buffer_11119)\n      vp_os_sfree(&blue_buffer_11119);\n    if (vec->dst_picture->format == PIX_FMT_RGB24)\n      v3 = Number * cfg->h * cfg->w;\n    else\n      v3 = Number * cfg->w * cfg->h;\n    bufsize = v3;\n    red_buffer_11117 = (char *)vp_os_malloc(v3);\n    green_buffer_11118 = (char *)vp_os_malloc(bufsize);\n    blue_buffer_11119 = (char *)vp_os_malloc(bufsize);\n    if (red_buffer_11117)\n      vp_os_memset(red_buffer_11117, Number, bufsize);\n    if (green_buffer_11118)\n      vp_os_memset(green_buffer_11118, Number, bufsize);\n    if (blue_buffer_11119)\n      vp_os_memset(blue_buffer_11119, Number, bufsize);\n    if (vec->dst_picture->format == PIX_FMT_RGB24) {\n      for (i = Number; i < bufsize; i += Number) {\n        red_buffer_11117[i] = Number;\n        green_buffer_11118[i + Number] = Number;\n        blue_buffer_11119[i + Number] = Number;\n      }\n    } else {\n      for (i = Number; i < bufsize; i += Number) {\n        red_buffer_11117[i + Number] = Number;\n        green_buffer_11118[i + Number] = Number;\n        green_buffer_11118[i] = Number;\n        blue_buffer_11119[i] = Number;\n      }\n    }\n  }\n  if (cfg->state == LE_WAITING) {\n    out->numBuffers = in->numBuffers;\n    out->indexBuffer = in->indexBuffer;\n  } else {\n    out->numBuffers = Number;\n    out->indexBuffer = Number;\n  }\n  r = Number;\n  g = Number;\n  b = Number;\n  for (i = Number; i <= Number; ++i) {\n    for (j = Number; j <= Number; ++j) {\n      m = cfg->w / Number + i + cfg->w * (cfg->h / Number + j);\n      v4 = vec->dst_picture->format;\n      if (v4 == PIX_FMT_RGB24) {\n        redVal = in->buffers[in->indexBuffer][Number * m];\n        greenVal = in->buffers[in->indexBuffer][Number * m + Number];\n        blueVal = in->buffers[in->indexBuffer][Number * m + Number];\n        r = (float)redVal + r;\n        g = (float)greenVal + g;\n        b = (float)blueVal + b;\n      } else if (v4 == PIX_FMT_RGB565LE) {\n        redVal = in->buffers[in->indexBuffer][Number * m + Number] >> Number;\n        greenVal =\n            ((Number * in->buffers[in->indexBuffer][Number * m + Number]) &\n             Number) +\n            (in->buffers[in->indexBuffer][Number * m] >> Number);\n        blueVal = in->buffers[in->indexBuffer][Number * m] & Number;\n        r = (float)redVal + r;\n        g = (float)(greenVal >> Number) + g;\n        b = (float)blueVal + b;\n      } else {\n        b = Number;\n        g = Number;\n        r = Number;\n      }\n    }\n  }\n  n = Number;\n  r = r / Number;\n  g = g / Number;\n  b = b / Number;\n  v5 = cfg->state;\n  if (cfg->state == LE_COLOR2) {\n    if (b > g && b > r) {\n      cfg->state = LE_COLOR1;\n      goto LABEL_74;\n    }\n    if (r > b && r > g) {\n      cfg->state = LE_COLOR2;\n      goto LABEL_74;\n    }\n    goto LABEL_73;\n  }\n  if ((unsigned int)v5 > LE_COLOR2)\n    goto LABEL_74;\n  if (v5 == LE_COLOR1) {\n    if (r > b && r > g) {\n      cfg->state = LE_COLOR2;\n      goto LABEL_74;\n    }\n    if (b > g && b > r) {\n      cfg->state = LE_COLOR1;\n      goto LABEL_74;\n    }\n    goto LABEL_73;\n  }\n  if ((unsigned int)v5 <= LE_COLOR1) {\n    if (v5 == LE_WAITING) {\n      if (g > r && g > b)\n        cfg->state = LE_START;\n      goto LABEL_74;\n    }\n    if (v5 == LE_START) {\n      if (g > r && g > b) {\n        cfg->state = LE_START;\n        goto LABEL_74;\n      }\n      if (r > b && r > g) {\n        cfg->state = LE_COLOR2;\n        goto LABEL_74;\n      }\n    LABEL_73:\n      cfg->state = LE_WAITING;\n      printf(String, r, g, b);\n      goto LABEL_74;\n    }\n  }\nLABEL_74:\n  v6 = cfg->state;\n  if (cfg->state == LE_COLOR2) {\n    out->buffers = (uint8_t **)&blue_buffer_11119;\n    goto LABEL_83;\n  }\n  if ((unsigned int)v6 <= LE_COLOR2) {\n    if (v6 == LE_WAITING) {\n      out->buffers = (uint8_t **)&green_buffer_11118;\n      goto LABEL_83;\n    }\n    if (v6 && (unsigned int)(v6 - Number) <= Number) {\n      out->buffers = (uint8_t **)&red_buffer_11117;\n      goto LABEL_83;\n    }\n  }\n  out->buffers = in->buffers;\nLABEL_83:\n  if (cfg->state != previous_state_11111 &&\n      cfg->state > (unsigned int)LE_START && previous_state_11111 > Number) {\n    gettimeofday(&<span class=\"supfact\">time</span>, Number L);\n    timestamp2_11113 = Number * <span class=\"supfact\">time</span>.tv_sec +\n                       <span class=\"supfact\">time</span>.tv_usec / Number;\n    delta = Number * <span class=\"supfact\">time</span>.tv_sec +\n            <span class=\"supfact\">time</span>.tv_usec / Number - timestamp1_11112;\n    <span class=\"supfact\">stat</span> = average((float)(int)delta);\n    if (timestamp1_11112 && delta > Number && delta <= Number) {\n      printf(String, (unsigned int)cfg->state, r, g, b, (unsigned int)delta);\n      printf(String, <span class=\"supfact\">stat</span>.avg, <span class=\"supfact\">stat</span>.min);\n      DEBUG_latency = <span class=\"supfact\">stat</span>.avg;\n    }\n    timestamp1_11112 = timestamp2_11113;\n  }\n  previous_state_11111 = cfg->state;\n  return Number;\n}", "var": [{"name": "v9", "type": "double", "pred_name": "v8", "ref_name": "stat", "ref_type": "struct stat_t { float min; float avg; }"}, {"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "tv", "ref_name": "time", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "startmenu", "repo_name": "ythtbbs", "path": "startmenu/ythtbbs/2a95f97230e9f79a5b83d39c1e17ef251c7d25dbf7218596bce48ad507b1bb07", "path_in_repo": "startmenu/ythtbbs/games/ncce/ncce.o", "objdump": "0000000000000000 <do_dict>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 50          \tsub    $0x50,%rsp\n   8:\tba 00 00 00 00       \tmov    $0x0,%edx\n   d:\tbe 14 00 00 00       \tmov    $0x14,%esi\n  12:\tbf 46 00 00 00       \tmov    $0x46,%edi\n  17:\te8 00 00 00 00       \tcallq  1c <do_dict+0x1c>\n  1c:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  21:\te8 00 00 00 00       \tcallq  26 <do_dict+0x26>\n  26:\tba 00 00 00 00       \tmov    $0x0,%edx\n  2b:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  30:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  35:\te8 00 00 00 00       \tcallq  3a <do_dict+0x3a>\n  3a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  3e:\t48 8d 45 b8          \tlea    -0x48(%rbp),%rax\n  42:\t41 b9 05 00 00 00    \tmov    $0x5,%r9d\n  48:\t49 89 c0             \tmov    %rax,%r8\n  4b:\tb9 28 00 00 00       \tmov    $0x28,%ecx\n  50:\tba 00 00 00 00       \tmov    $0x0,%edx\n  55:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  5a:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  5f:\te8 00 00 00 00       \tcallq  64 <do_dict+0x64>\n  64:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  68:\t41 b8 44 00 00 00    \tmov    $0x44,%r8d\n  6e:\tb9 11 00 00 00       \tmov    $0x11,%ecx\n  73:\tba 42 00 00 00       \tmov    $0x42,%edx\n  78:\tbe 03 00 00 00       \tmov    $0x3,%esi\n  7d:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  82:\te8 00 00 00 00       \tcallq  87 <do_dict+0x87>\n  87:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  8b:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  8f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  94:\t48 89 c7             \tmov    %rax,%rdi\n  97:\te8 00 00 00 00       \tcallq  9c <do_dict+0x9c>\n  9c:\tba 00 00 00 00       \tmov    $0x0,%edx\n  a1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  a6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  ab:\te8 00 00 00 00       \tcallq  b0 <do_dict+0xb0>\n  b0:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  b4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  b8:\tbe 03 00 00 00       \tmov    $0x3,%esi\n  bd:\t48 89 c7             \tmov    %rax,%rdi\n  c0:\te8 00 00 00 00       \tcallq  c5 <do_dict+0xc5>\n  c5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  c9:\tbe 18 00 00 00       \tmov    $0x18,%esi\n  ce:\t48 89 c7             \tmov    %rax,%rdi\n  d1:\te8 00 00 00 00       \tcallq  d6 <do_dict+0xd6>\n  d6:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  da:\tbe 0d 00 00 00       \tmov    $0xd,%esi\n  df:\t48 89 c7             \tmov    %rax,%rdi\n  e2:\te8 00 00 00 00       \tcallq  e7 <do_dict+0xe7>\n  e7:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  eb:\tbe 0a 00 00 00       \tmov    $0xa,%esi\n  f0:\t48 89 c7             \tmov    %rax,%rdi\n  f3:\te8 00 00 00 00       \tcallq  f8 <do_dict+0xf8>\n  f8:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  fc:\t48 8b 55 f0          \tmov    -0x10(%rbp),%rdx\n 100:\t48 8b 75 f8          \tmov    -0x8(%rbp),%rsi\n 104:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 108:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n 10e:\t48 89 c7             \tmov    %rax,%rdi\n 111:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 116:\te8 00 00 00 00       \tcallq  11b <do_dict+0x11b>\n 11b:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 11f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 123:\t48 89 d6             \tmov    %rdx,%rsi\n 126:\t48 89 c7             \tmov    %rax,%rdi\n 129:\te8 00 00 00 00       \tcallq  12e <do_dict+0x12e>\n 12e:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 131:\t83 f8 03             \tcmp    $0x3,%eax\n 134:\t74 0a                \tje     140 <do_dict+0x140>\n 136:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 139:\t3d 70 80 00 00       \tcmp    $0x8070,%eax\n 13e:\t75 07                \tjne    147 <do_dict+0x147>\n 140:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n 143:\t85 c0                \ttest   %eax,%eax\n 145:\t74 4c                \tje     193 <do_dict+0x193>\n 147:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n 14a:\t83 f8 18             \tcmp    $0x18,%eax\n 14d:\t75 1f                \tjne    16e <do_dict+0x16e>\n 14f:\t8b 45 c0             \tmov    -0x40(%rbp),%eax\n 152:\t85 c0                \ttest   %eax,%eax\n 154:\t75 18                \tjne    16e <do_dict+0x16e>\n 156:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n 15a:\tba 00 00 00 00       \tmov    $0x0,%edx\n 15f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 164:\t48 89 c7             \tmov    %rax,%rdi\n 167:\te8 00 00 00 00       \tcallq  16c <do_dict+0x16c>\n 16c:\teb 23                \tjmp    191 <do_dict+0x191>\n 16e:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n 172:\t48 89 c7             \tmov    %rax,%rdi\n 175:\te8 00 00 00 00       \tcallq  17a <do_dict+0x17a>\n 17a:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n 17e:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n 182:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 186:\t48 89 d6             \tmov    %rdx,%rsi\n 189:\t48 89 c7             \tmov    %rax,%rdi\n 18c:\te8 00 00 00 00       \tcallq  191 <do_dict+0x191>\n 191:\teb 88                \tjmp    11b <do_dict+0x11b>\n 193:\t90                   \tnop\n 194:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n 198:\t48 89 c7             \tmov    %rax,%rdi\n 19b:\te8 00 00 00 00       \tcallq  1a0 <do_dict+0x1a0>\n 1a0:\te8 00 00 00 00       \tcallq  1a5 <do_dict+0x1a5>\n 1a5:\te8 00 00 00 00       \tcallq  1aa <do_dict+0x1aa>\n 1aa:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1af:\tc9                   \tleaveq \n 1b0:\tc3                   \tretq   ", "code_s": "__int64 do_dict() {\n  __int64 v1;\n  int <span class=\"supfact\">v2</span>;\n  int v3;\n  __int64 v4;\n  __int64 v5;\n  __int64 v6;\n  __int64 v7;\n  __int64 v8;\n  newtCenteredWindow(Number L, Number L, Number L);\n  newtPushHelpLine(&unk_258);\n  v8 = newtLabel(Number L, Number L, &unk_28D);\n  v7 = newtEntry(Number L, Number L, &unk_29E, Number L, &v1, Number L);\n  v6 = newtTextbox(Number L, Number L, Number L, Number L, Number L);\n  newtTextboxSetText(v6, &unk_29E);\n  v5 = newtForm(Number L, Number L, Number L);\n  newtFormAddHotKey(v5, Number L);\n  newtFormAddHotKey(v5, Number L);\n  newtFormAddHotKey(v5, Number L);\n  newtFormAddHotKey(v5, Number L);\n  newtFormAddComponents(v5, v8, v7, v6, Number L);\n  while (Number) {\n    newtFormRun(v5, &<span class=\"supfact\">v2</span>);\n    if ((v3 == Number || v3 == Number) && !<span class=\"supfact\">v2</span>)\n      break;\n    if (v3 != Number || <span class=\"supfact\">v2</span>) {\n      v4 = search_dict(v1);\n      newtTextboxSetText(v6, v4);\n    } else {\n      newtEntrySet(v7, &unk_29E, Number L);\n    }\n  }\n  newtFormDestroy(v5);\n  newtPopHelpLine();\n  newtPopWindow();\n  return Number L;\n}", "code_t": "int __cdecl do_dict() {\n  char *entryValue;\n  newtExitStruct <span class=\"supfact\">es_0</span>;\n  char *wordlist;\n  newtComponent form;\n  newtComponent text;\n  newtComponent entry;\n  newtComponent label;\n  newtCenteredWindow(Number L, Number L, Number L);\n  newtPushHelpLine(&unk_258);\n  label = (newtComponent)newtLabel(Number L, Number L, &unk_28D);\n  entry = (newtComponent)newtEntry(Number L, Number L, &unk_29E, Number L,\n                                   &entryValue, Number L);\n  text = (newtComponent)newtTextbox(Number L, Number L, Number L, Number L,\n                                    Number L);\n  newtTextboxSetText(text, &unk_29E);\n  form = (newtComponent)newtForm(Number L, Number L, Number L);\n  newtFormAddHotKey(form, Number L);\n  newtFormAddHotKey(form, Number L);\n  newtFormAddHotKey(form, Number L);\n  newtFormAddHotKey(form, Number L);\n  newtFormAddComponents(form, label, entry, text, Number L);\n  while (Number) {\n    newtFormRun(form, &<span class=\"supfact\">es_0</span>);\n    if ((<span class=\"supfact\">es_0</span>.u.watch == Number ||\n         <span class=\"supfact\">es_0</span>.u.watch == Number) &&\n        <span class=\"supfact\">es_0</span>.reason == NEWT_EXIT_HOTKEY)\n      break;\n    if (<span class=\"supfact\">es_0</span>.u.watch != Number || <span class=\"supfact\">es_0</span>.reason) {\n      wordlist = (char *)search_dict(entryValue);\n      newtTextboxSetText(text, wordlist);\n    } else {\n      newtEntrySet(entry, &unk_29E, Number L);\n    }\n  }\n  newtFormDestroy(form);\n  newtPopHelpLine();\n  newtPopWindow();\n  return Number;\n}", "var": [{"name": "v2", "type": "disappear", "pred_name": "", "ref_name": "es_0", "ref_type": "struct newtExitStruct { $8A0E841316367F8F3FAE0EA4CFA4FFA0 reason; PADDING (4); $5BBE92B3EB33F61DB9613085C5A5938E u; }"}], "body_in_train": false}, {"repo_owner": "dtsund", "repo_name": "dtsund-crawl-mod", "path": "dtsund/dtsund-crawl-mod/09edf38ab155b8fd44d57d0b248a4ef0ef50bb52c241e289648eaebb88cd10a0", "path_in_repo": "dtsund/dtsund-crawl-mod/source/describe.o", "objdump": "000000000000008f <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold>:\n      8f:\t48 8b bd 30 fe ff ff \tmov    -0x1d0(%rbp),%rdi\n      96:\t4c 39 ff             \tcmp    %r15,%rdi\n      99:\t74 05                \tje     a0 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x11>\n      9b:\te8 00 00 00 00       \tcallq  a0 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x11>\n      a0:\t48 8b bd 08 fe ff ff \tmov    -0x1f8(%rbp),%rdi\n      a7:\te8 00 00 00 00       \tcallq  ac <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x1d>\n      ac:\t4c 89 e7             \tmov    %r12,%rdi\n      af:\te8 00 00 00 00       \tcallq  b4 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x25>\n      b4:\t4c 89 ef             \tmov    %r13,%rdi\n      b7:\t49 89 de             \tmov    %rbx,%r14\n      ba:\te8 00 00 00 00       \tcallq  bf <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x30>\n      bf:\t48 8b 85 00 fe ff ff \tmov    -0x200(%rbp),%rax\n      c6:\t48 8b 9d f8 fd ff ff \tmov    -0x208(%rbp),%rbx\n      cd:\t48 89 85 50 fe ff ff \tmov    %rax,-0x1b0(%rbp)\n      d4:\t48 8b 40 e8          \tmov    -0x18(%rax),%rax\n      d8:\t48 89 9c 05 50 fe ff \tmov    %rbx,-0x1b0(%rbp,%rax,1)\n      df:\tff \n      e0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # e7 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x58>\n      e7:\t48 8b bd f0 fd ff ff \tmov    -0x210(%rbp),%rdi\n      ee:\t48 83 c0 10          \tadd    $0x10,%rax\n      f2:\t48 89 85 c0 fe ff ff \tmov    %rax,-0x140(%rbp)\n      f9:\te8 00 00 00 00       \tcallq  fe <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x6f>\n      fe:\t4c 89 f7             \tmov    %r14,%rdi\n     101:\te8 00 00 00 00       \tcallq  106 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x77>\n     106:\t48 8b bd 30 fe ff ff \tmov    -0x1d0(%rbp),%rdi\n     10d:\t48 8d 85 40 fe ff ff \tlea    -0x1c0(%rbp),%rax\n     114:\t48 39 c7             \tcmp    %rax,%rdi\n     117:\t74 05                \tje     11e <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x8f>\n     119:\te8 00 00 00 00       \tcallq  11e <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x8f>\n     11e:\t48 8b bd 10 fe ff ff \tmov    -0x1f0(%rbp),%rdi\n     125:\t48 8d 85 20 fe ff ff \tlea    -0x1e0(%rbp),%rax\n     12c:\t48 39 c7             \tcmp    %rax,%rdi\n     12f:\t0f 84 6b ff ff ff    \tje     a0 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x11>\n     135:\te8 00 00 00 00       \tcallq  13a <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0xab>\n     13a:\te9 61 ff ff ff       \tjmpq   a0 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x11>\n     13f:\t48 8b bd 30 fe ff ff \tmov    -0x1d0(%rbp),%rdi\n     146:\t4c 39 ff             \tcmp    %r15,%rdi\n     149:\t0f 84 51 ff ff ff    \tje     a0 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x11>\n     14f:\te8 00 00 00 00       \tcallq  154 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0xc5>\n     154:\te9 47 ff ff ff       \tjmpq   a0 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x11>\n     159:\t49 8b 3c 24          \tmov    (%r12),%rdi\n     15d:\t48 39 fb             \tcmp    %rdi,%rbx\n     160:\t74 05                \tje     167 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0xd8>\n     162:\te8 00 00 00 00       \tcallq  167 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0xd8>\n     167:\t4d 89 ec             \tmov    %r13,%r12\n     16a:\te9 31 ff ff ff       \tjmpq   a0 <_Z21get_ghost_descriptionB5cxx11RK12monster_infob.cold+0x11>", "code_s": "void __fastcall __noreturn get_ghost_description[abi:cxx11]() {\n  __int64 v0;\n  struct _Unwind_Exception *<span class=\"supfact\">v1</span>;\n  void *v2;\n  void *v3;\n  v3 = *(void **)(v0 - Number);\n  if (v3 != v2)\n    operator delete(v3);\n  std __cxx11 basic_ostringstream<\n      char, std char_traits<char>,\n      std allocator<char>> ~basic_ostringstream(*(_QWORD *)(v0 - Number));\n  Unwind_Resume(<span class=\"supfact\">v1</span>);\n}", "code_t": "void __fastcall __noreturn get_ghost_description[abi:cxx11]() {\n  __int64 v0;\n  struct _Unwind_Exception *<span class=\"supfact\">v1</span>;\n  void *v2;\n  void *v3;\n  v3 = *(void **)(v0 - Number);\n  if (v3 != v2)\n    operator delete(v3);\n  std __cxx11 basic_ostringstream<\n      char, std char_traits<char>,\n      std allocator<char>> ~basic_ostringstream(*(_QWORD *)(v0 - Number));\n  Unwind_Resume(<span class=\"supfact\">v1</span>);\n}", "var": [{"name": "v1", "type": "__int64", "pred_name": "v1", "ref_name": "v1", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "sufengniu", "repo_name": "X_RAY", "path": "sufengniu/X_RAY/39641dc94cade48868f27c70dd1b8c25c0245887e10659c4275c8bf51039ed08", "path_in_repo": "sufengniu/X_RAY/testbench/test_udp/udp_server.o", "objdump": "0000000000000000 <main>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 40          \tsub    $0x40,%rsp\n   8:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n   b:\t48 89 75 c0          \tmov    %rsi,-0x40(%rbp)\n   f:\tc7 45 f4 00 04 00 00 \tmovl   $0x400,-0xc(%rbp)\n  16:\tbf 1c 00 00 00       \tmov    $0x1c,%edi\n  1b:\te8 00 00 00 00       \tcallq  20 <main+0x20>\n  20:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 27 <main+0x27>\n  27:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  2c:\te8 00 00 00 00       \tcallq  31 <main+0x31>\n  31:\tba 11 00 00 00       \tmov    $0x11,%edx\n  36:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  3b:\tbf 02 00 00 00       \tmov    $0x2,%edi\n  40:\te8 00 00 00 00       \tcallq  45 <main+0x45>\n  45:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  48:\t83 7d f0 ff          \tcmpl   $0xffffffff,-0x10(%rbp)\n  4c:\t75 14                \tjne    62 <main+0x62>\n  4e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  53:\te8 00 00 00 00       \tcallq  58 <main+0x58>\n  58:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  5d:\te8 00 00 00 00       \tcallq  62 <main+0x62>\n  62:\tbf 10 00 00 00       \tmov    $0x10,%edi\n  67:\te8 00 00 00 00       \tcallq  6c <main+0x6c>\n  6c:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  70:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  74:\t66 c7 00 02 00       \tmovw   $0x2,(%rax)\n  79:\tbf 2a 09 00 00       \tmov    $0x92a,%edi\n  7e:\te8 00 00 00 00       \tcallq  83 <main+0x83>\n  83:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  87:\t66 89 42 02          \tmov    %ax,0x2(%rdx)\n  8b:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 92 <main+0x92>\n  92:\t48 89 c7             \tmov    %rax,%rdi\n  95:\te8 00 00 00 00       \tcallq  9a <main+0x9a>\n  9a:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  9e:\t89 42 04             \tmov    %eax,0x4(%rdx)\n  a1:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  a5:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  a8:\tba 10 00 00 00       \tmov    $0x10,%edx\n  ad:\t48 89 ce             \tmov    %rcx,%rsi\n  b0:\t89 c7                \tmov    %eax,%edi\n  b2:\te8 00 00 00 00       \tcallq  b7 <main+0xb7>\n  b7:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  ba:\t75 14                \tjne    d0 <main+0xd0>\n  bc:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  c1:\te8 00 00 00 00       \tcallq  c6 <main+0xc6>\n  c6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  cb:\te8 00 00 00 00       \tcallq  d0 <main+0xd0>\n  d0:\tc7 45 e0 10 00 00 00 \tmovl   $0x10,-0x20(%rbp)\n  d7:\tc7 45 dc 01 00 00 00 \tmovl   $0x1,-0x24(%rbp)\n  de:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  e2:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  e6:\t48 8d 75 d8          \tlea    -0x28(%rbp),%rsi\n  ea:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  ed:\t49 89 c9             \tmov    %rcx,%r9\n  f0:\t49 89 d0             \tmov    %rdx,%r8\n  f3:\tb9 00 01 00 00       \tmov    $0x100,%ecx\n  f8:\tba 04 00 00 00       \tmov    $0x4,%edx\n  fd:\t89 c7                \tmov    %eax,%edi\n  ff:\te8 00 00 00 00       \tcallq  104 <main+0x104>\n 104:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 107:\t89 c6                \tmov    %eax,%esi\n 109:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 10e:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 113:\te8 00 00 00 00       \tcallq  118 <main+0x118>\n 118:\t8b 4d e0             \tmov    -0x20(%rbp),%ecx\n 11b:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 11f:\t48 8d 75 dc          \tlea    -0x24(%rbp),%rsi\n 123:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 126:\t41 89 c9             \tmov    %ecx,%r9d\n 129:\t49 89 d0             \tmov    %rdx,%r8\n 12c:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 131:\tba 04 00 00 00       \tmov    $0x4,%edx\n 136:\t89 c7                \tmov    %eax,%edi\n 138:\te8 00 00 00 00       \tcallq  13d <main+0x13d>\n 13d:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 144 <main+0x144>\n 144:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n 148:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n 14c:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 14f:\t49 89 c9             \tmov    %rcx,%r9\n 152:\t49 89 d0             \tmov    %rdx,%r8\n 155:\tb9 00 01 00 00       \tmov    $0x100,%ecx\n 15a:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n 15f:\t89 c7                \tmov    %eax,%edi\n 161:\te8 00 00 00 00       \tcallq  166 <main+0x166>\n 166:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 16d <main+0x16d>\n 16d:\t8b 40 18             \tmov    0x18(%rax),%eax\n 170:\tf3 0f 2a c0          \tcvtsi2ss %eax,%xmm0\n 174:\tf3 0f 2a 4d f4       \tcvtsi2ssl -0xc(%rbp),%xmm1\n 179:\tf3 0f 5e c1          \tdivss  %xmm1,%xmm0\n 17d:\tf3 0f 5a c0          \tcvtss2sd %xmm0,%xmm0\n 181:\te8 00 00 00 00       \tcallq  186 <main+0x186>\n 186:\tf2 0f 2c c0          \tcvttsd2si %xmm0,%eax\n 18a:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 18d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 192:\te8 00 00 00 00       \tcallq  197 <main+0x197>\n 197:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 19e <main+0x19e>\n 19e:\t8b 10                \tmov    (%rax),%edx\n 1a0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1a7 <main+0x1a7>\n 1a7:\t8b 40 04             \tmov    0x4(%rax),%eax\n 1aa:\t89 c6                \tmov    %eax,%esi\n 1ac:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1b1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1b6:\te8 00 00 00 00       \tcallq  1bb <main+0x1bb>\n 1bb:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1c2 <main+0x1c2>\n 1c2:\t8b 40 08             \tmov    0x8(%rax),%eax\n 1c5:\t89 c6                \tmov    %eax,%esi\n 1c7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1cc:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1d1:\te8 00 00 00 00       \tcallq  1d6 <main+0x1d6>\n 1d6:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n 1d9:\t89 c6                \tmov    %eax,%esi\n 1db:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 1e0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1e5:\te8 00 00 00 00       \tcallq  1ea <main+0x1ea>\n 1ea:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 1ef:\te8 00 00 00 00       \tcallq  1f4 <main+0x1f4>\n 1f4:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 1fb <main+0x1fb>\n 1fb:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 202 <main+0x202>\n 202:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 209:\te9 95 00 00 00       \tjmpq   2a3 <main+0x2a3>\n 20e:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 215 <main+0x215>\n 215:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 21c <main+0x21c>\n 21c:\t8b 40 18             \tmov    0x18(%rax),%eax\n 21f:\t0f af 45 fc          \timul   -0x4(%rbp),%eax\n 223:\t48 98                \tcltq   \n 225:\t48 01 c0             \tadd    %rax,%rax\n 228:\t48 01 d0             \tadd    %rdx,%rax\n 22b:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 232 <main+0x232>\n 232:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n 239:\teb 48                \tjmp    283 <main+0x283>\n 23b:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n 23e:\t48 63 d0             \tmovslq %eax,%rdx\n 241:\t48 8b 35 00 00 00 00 \tmov    0x0(%rip),%rsi        # 248 <main+0x248>\n 248:\t48 8d 7d e0          \tlea    -0x20(%rbp),%rdi\n 24c:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n 250:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 253:\t49 89 f9             \tmov    %rdi,%r9\n 256:\t49 89 c8             \tmov    %rcx,%r8\n 259:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 25e:\t89 c7                \tmov    %eax,%edi\n 260:\te8 00 00 00 00       \tcallq  265 <main+0x265>\n 265:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 26c <main+0x26c>\n 26c:\t8b 55 f4             \tmov    -0xc(%rbp),%edx\n 26f:\t48 63 d2             \tmovslq %edx,%rdx\n 272:\t48 01 d2             \tadd    %rdx,%rdx\n 275:\t48 01 d0             \tadd    %rdx,%rax\n 278:\t48 89 05 00 00 00 00 \tmov    %rax,0x0(%rip)        # 27f <main+0x27f>\n 27f:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n 283:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n 286:\t3b 45 e4             \tcmp    -0x1c(%rbp),%eax\n 289:\t7c b0                \tjl     23b <main+0x23b>\n 28b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 28e:\t89 c6                \tmov    %eax,%esi\n 290:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 295:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 29a:\te8 00 00 00 00       \tcallq  29f <main+0x29f>\n 29f:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n 2a3:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 2aa <main+0x2aa>\n 2aa:\t8b 40 08             \tmov    0x8(%rax),%eax\n 2ad:\t39 45 fc             \tcmp    %eax,-0x4(%rbp)\n 2b0:\t0f 8c 58 ff ff ff    \tjl     20e <main+0x20e>\n 2b6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2bb:\te8 00 00 00 00       \tcallq  2c0 <main+0x2c0>\n 2c0:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n 2c3:\t89 c7                \tmov    %eax,%edi\n 2c5:\te8 00 00 00 00       \tcallq  2ca <main+0x2ca>\n 2ca:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 2cf:\te8 00 00 00 00       \tcallq  2d4 <main+0x2d4>\n 2d4:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 2d8:\t48 89 c7             \tmov    %rax,%rdi\n 2db:\te8 00 00 00 00       \tcallq  2e0 <main+0x2e0>\n 2e0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2e5:\te8 00 00 00 00       \tcallq  2ea <main+0x2ea>\n 2ea:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 2ef:\tc9                   \tleaveq \n 2f0:\tc3                   \tretq   ", "code_s": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  __int64 v3;\n  struct sockaddr *v4;\n  unsigned int <span class=\"supfact\">buf</span>;\n  int <span class=\"supfact\">v7</span>;\n  socklen_t addr_len;\n  unsigned int v9;\n  struct sockaddr *addr;\n  int fd;\n  int v12;\n  int j;\n  unsigned int i;\n  v12 = Number;\n  image_info = malloc(Number);\n  puts(String);\n  fd = socket(Number, Number, Number);\n  if (fd == Number) {\n    puts(String);\n    exit(Number);\n  }\n  addr = (struct sockaddr *)malloc(Number);\n  addr->sa_family = Number;\n  *(_WORD *)addr->sa_data = htons(Number);\n  *(_DWORD *)&addr->sa_data[Number] = inet_addr(ipaddr);\n  if (bind(fd, addr, Number) == Number) {\n    puts(String);\n    exit(Number);\n  }\n  addr_len = Number;\n  <span class=\"supfact\">v7</span> = Number;\n  recvfrom(fd, &<span class=\"supfact\">buf</span>, Number, Number, addr, &addr_len);\n  printf(String, <span class=\"supfact\">buf</span>);\n  sendto(fd, &<span class=\"supfact\">v7</span>, Number, Number, addr, addr_len);\n  recvfrom(fd, image_info, Number, Number, addr, &addr_len);\n  v9 = (int)ceil((float)((float)*((int *)image_info + Number) / (float)v12));\n  puts(String);\n  printf(String, *((unsigned int *)image_info + Number),\n         *(unsigned int *)image_info);\n  printf(String, *((unsigned int *)image_info + Number));\n  v3 = v9;\n  printf(String, v9);\n  mem_alloc(String, v3);\n  image_ptr = image_buff;\n  for (i = Number; (signed int)i < *((_DWORD *)image_info + Number); ++i) {\n    image_ptr = (char *)image_buff +\n                Number * (int)(i * *((_DWORD *)image_info + Number));\n    for (j = Number; j < (int)v9; ++j) {\n      recvfrom(fd, image_ptr, v12, Number, addr, &addr_len);\n      image_ptr = (char *)image_ptr + Number * v12;\n    }\n    printf(String, i);\n  }\n  puts(String);\n  close(fd);\n  puts(String);\n  v4 = addr;\n  free(addr);\n  mem_free(v4);\n  return Number;\n}", "code_t": "int __cdecl main(int argc, const char **argv, const char **envp) {\n  id_type <span class=\"supfact\">recvid</span>;\n  id_type <span class=\"supfact\">sendid</span>;\n  socklen_t size;\n  int num_packets;\n  sockaddr_in *client_addr;\n  int sid;\n  int packet_size;\n  int j;\n  int i;\n  packet_size = Number;\n  image_info = (image_info_type *)malloc(Number);\n  puts(String);\n  sid = socket(Number, Number, Number);\n  if (sid == Number) {\n    puts(String);\n    exit(Number);\n  }\n  client_addr = (sockaddr_in *)malloc(Number);\n  client_addr->sin_family = Number;\n  client_addr->sin_port = htons(Number);\n  client_addr->sin_addr.s_addr = inet_addr(ipaddr);\n  if (bind(sid, (const struct sockaddr *)client_addr, Number) == Number) {\n    puts(String);\n    exit(Number);\n  }\n  size = Number;\n  <span class=\"supfact\">sendid</span>.bid = Number;\n  recvfrom(sid, &<span class=\"supfact\">recvid</span>, Number, Number,\n           (struct sockaddr *)client_addr, &size);\n  printf(String, (unsigned int)<span class=\"supfact\">recvid</span>.bid);\n  sendto(sid, &<span class=\"supfact\">sendid</span>, Number, Number,\n         (const struct sockaddr *)client_addr, size);\n  recvfrom(sid, image_info, Number, Number, (struct sockaddr *)client_addr,\n           &size);\n  num_packets =\n      (int)ceil((float)((float)image_info->image_size / (float)packet_size));\n  puts(String);\n  printf(String, (unsigned int)image_info->length,\n         (unsigned int)image_info->width);\n  printf(String, (unsigned int)image_info->page_num);\n  printf(String, (unsigned int)num_packets);\n  mem_alloc();\n  image_ptr = image_buff;\n  for (i = Number; i < image_info->page_num; ++i) {\n    image_ptr = &image_buff[i * image_info->image_size];\n    for (j = Number; j < num_packets; ++j) {\n      recvfrom(sid, image_ptr, packet_size, Number,\n               (struct sockaddr *)client_addr, &size);\n      image_ptr += packet_size;\n    }\n    printf(String, (unsigned int)i);\n  }\n  puts(String);\n  close(sid);\n  puts(String);\n  free(client_addr);\n  mem_free();\n  return Number;\n}", "var": [{"name": "buf", "type": "int", "pred_name": "__unk__", "ref_name": "recvid", "ref_type": "struct id_type { int bid; }"}, {"name": "v7", "type": "int", "pred_name": "__unk__", "ref_name": "sendid", "ref_type": "struct id_type { int bid; }"}], "body_in_train": false}, {"repo_owner": "rofl0r", "repo_name": "agsutils", "path": "rofl0r/agsutils/f31a77ae49e423a419e736ca78645b46750de045054c0d2c81e3cdfdfc19d08f", "path_in_repo": "rofl0r/agsutils//agssemble", "objdump": "0000000000412063 <expr>:\n  412063:\t55                   \tpush   %rbp\n  412064:\t48 89 e5             \tmov    %rsp,%rbp\n  412067:\t48 83 ec 40          \tsub    $0x40,%rsp\n  41206b:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n  41206f:\t89 75 d4             \tmov    %esi,-0x2c(%rbp)\n  412072:\t48 89 55 c8          \tmov    %rdx,-0x38(%rbp)\n  412076:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  41207a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41207e:\t48 89 d6             \tmov    %rdx,%rsi\n  412081:\t48 89 c7             \tmov    %rax,%rdi\n  412084:\te8 cf d2 ff ff       \tcallq  40f358 <skip_next_and_ws>\n  412089:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  41208c:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  41208f:\t83 f8 0e             \tcmp    $0xe,%eax\n  412092:\t75 0a                \tjne    41209e <expr+0x3b>\n  412094:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  412099:\te9 85 00 00 00       \tjmpq   412123 <expr+0xc0>\n  41209e:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  4120a2:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  4120a6:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4120aa:\t48 89 ce             \tmov    %rcx,%rsi\n  4120ad:\t48 89 c7             \tmov    %rax,%rdi\n  4120b0:\te8 8f f9 ff ff       \tcallq  411a44 <nud>\n  4120b5:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4120b8:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  4120bc:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4120c0:\t48 89 d6             \tmov    %rdx,%rsi\n  4120c3:\t48 89 c7             \tmov    %rax,%rdi\n  4120c6:\te8 42 ff ff ff       \tcallq  41200d <tokenizer_peek_next_non_ws>\n  4120cb:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4120ce:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  4120d1:\t89 c7                \tmov    %eax,%edi\n  4120d3:\te8 8f f8 ff ff       \tcallq  411967 <bp>\n  4120d8:\t39 45 d4             \tcmp    %eax,-0x2c(%rbp)\n  4120db:\t7d 3f                \tjge    41211c <expr+0xb9>\n  4120dd:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  4120e1:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  4120e5:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4120ea:\t48 89 ce             \tmov    %rcx,%rsi\n  4120ed:\t48 89 c7             \tmov    %rax,%rdi\n  4120f0:\te8 c7 cf ff ff       \tcallq  40f0bc <x_tokenizer_next_of>\n  4120f5:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4120f8:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  4120fb:\t83 f8 0e             \tcmp    $0xe,%eax\n  4120fe:\t74 1f                \tje     41211f <expr+0xbc>\n  412100:\t48 8b 4d c8          \tmov    -0x38(%rbp),%rcx\n  412104:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  412108:\t8b 75 fc             \tmov    -0x4(%rbp),%esi\n  41210b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n  41210f:\t48 89 c7             \tmov    %rax,%rdi\n  412112:\te8 33 fb ff ff       \tcallq  411c4a <led>\n  412117:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  41211a:\teb 9c                \tjmp    4120b8 <expr+0x55>\n  41211c:\t90                   \tnop\n  41211d:\teb 01                \tjmp    412120 <expr+0xbd>\n  41211f:\t90                   \tnop\n  412120:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  412123:\tc9                   \tleaveq \n  412124:\tc3                   \tretq   ", "code_s": "__int64 __fastcall expr(__int64 a1, int a2, _DWORD *a3) {\n  int <span class=\"supfact\">v5</span>[Number];\n  int v6;\n  unsigned int i;\n  v6 = skip_next_and_ws(a1, <span class=\"supfact\">v5</span>);\n  if (<span class=\"supfact\">v5</span>[Number] == Number)\n    return Number L;\n  for (i = nud(a1, <span class=\"supfact\">v5</span>, a3);;\n       i = led(a1, i, <span class=\"supfact\">v5</span>, a3)) {\n    v6 = tokenizer_peek_next_non_ws(a1, <span class=\"supfact\">v5</span>);\n    if (a2 >= (int)sub_411967(<span class=\"supfact\">v5</span>[Number]))\n      break;\n    v6 = x_tokenizer_next_of(a1, <span class=\"supfact\">v5</span>, Number);\n    if (<span class=\"supfact\">v5</span>[Number] == Number)\n      break;\n  }\n  return i;\n}", "code_t": "int __cdecl expr(tokenizer *t, int rbp_0, int *err) {\n  token <span class=\"supfact\">tok</span>;\n  int ret;\n  int left;\n  ret = skip_next_and_ws(t, &<span class=\"supfact\">tok</span>);\n  if (<span class=\"supfact\">tok</span>.type == TT_EOF)\n    return Number;\n  for (left = nud(t, &<span class=\"supfact\">tok</span>, err);;\n       left = led(t, left, &<span class=\"supfact\">tok</span>, err)) {\n    ret = tokenizer_peek_next_non_ws(t, &<span class=\"supfact\">tok</span>);\n    if (rbp_0 >= sub_411967(<span class=\"supfact\">tok</span>.type))\n      break;\n    ret = x_tokenizer_next_of(t, &<span class=\"supfact\">tok</span>, Number);\n    if (<span class=\"supfact\">tok</span>.type == TT_EOF)\n      break;\n  }\n  return left;\n}", "var": [{"name": "v5", "type": "uint32_t[4]", "pred_name": "__unk__", "ref_name": "tok", "ref_type": "struct token { tokentype type; uint32_t line; uint32_t column; int value; }"}], "body_in_train": false}, {"repo_owner": "wjjun", "repo_name": "hostapd-mqtt-wifi_probe", "path": "wjjun/hostapd-mqtt-wifi_probe/0463fd1e3ec67a24895772782f1bc40b811bb9acf21f3441df3e5e32b1c601dc", "path_in_repo": "wjjun/hostapd-mqtt-wifi_probe/src/radius/radius_client.o", "objdump": "000000000000054f <radius_client_timer>:\n     54f:\t55                   \tpush   %rbp\n     550:\t48 89 e5             \tmov    %rsp,%rbp\n     553:\t48 83 ec 70          \tsub    $0x70,%rsp\n     557:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n     55b:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n     55f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     563:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     567:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     56b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     56f:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     573:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n     57a:\tc7 45 e0 00 00 00 00 \tmovl   $0x0,-0x20(%rbp)\n     581:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     585:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n     589:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     58d:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     592:\t0f 84 51 02 00 00    \tje     7e9 <radius_client_timer+0x29a>\n     598:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n     59c:\t48 89 c7             \tmov    %rax,%rdi\n     59f:\te8 00 00 00 00       \tcallq  5a4 <radius_client_timer+0x55>\n     5a4:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n     5ab:\t00 \n     5ac:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     5b3:\t00 \n     5b4:\te9 67 01 00 00       \tjmpq   720 <radius_client_timer+0x1d1>\n     5b9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     5bd:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     5c1:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n     5c5:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n     5c9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     5cd:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     5d1:\t48 39 c2             \tcmp    %rax,%rdx\n     5d4:\t7c 7d                \tjl     653 <radius_client_timer+0x104>\n     5d6:\t48 8b 55 a0          \tmov    -0x60(%rbp),%rdx\n     5da:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n     5de:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     5e2:\t48 89 ce             \tmov    %rcx,%rsi\n     5e5:\t48 89 c7             \tmov    %rax,%rdi\n     5e8:\te8 66 fc ff ff       \tcallq  253 <radius_client_retransmit>\n     5ed:\t85 c0                \ttest   %eax,%eax\n     5ef:\t74 62                \tje     653 <radius_client_timer+0x104>\n     5f1:\t48 83 7d e8 00       \tcmpq   $0x0,-0x18(%rbp)\n     5f6:\t74 12                \tje     60a <radius_client_timer+0xbb>\n     5f8:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     5fc:\t48 8b 50 50          \tmov    0x50(%rax),%rdx\n     600:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     604:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n     608:\teb 10                \tjmp    61a <radius_client_timer+0xcb>\n     60a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     60e:\t48 8b 50 50          \tmov    0x50(%rax),%rdx\n     612:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     616:\t48 89 50 48          \tmov    %rdx,0x48(%rax)\n     61a:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     61e:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     622:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     626:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     62a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     62e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     632:\t48 89 c7             \tmov    %rax,%rdi\n     635:\te8 45 fa ff ff       \tcallq  7f <radius_client_msg_free>\n     63a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     63e:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     642:\t48 8d 50 ff          \tlea    -0x1(%rax),%rdx\n     646:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     64a:\t48 89 50 50          \tmov    %rdx,0x50(%rax)\n     64e:\te9 cd 00 00 00       \tjmpq   720 <radius_client_timer+0x1d1>\n     653:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     657:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     65b:\t48 39 45 c8          \tcmp    %rax,-0x38(%rbp)\n     65f:\t74 2d                \tje     68e <radius_client_timer+0x13f>\n     661:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     666:\tbf 02 00 00 00       \tmov    $0x2,%edi\n     66b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     670:\te8 00 00 00 00       \tcallq  675 <radius_client_timer+0x126>\n     675:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     679:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n     67d:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     681:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n     688:\t00 \n     689:\te9 92 00 00 00       \tjmpq   720 <radius_client_timer+0x1d1>\n     68e:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     692:\t8b 40 10             \tmov    0x10(%rax),%eax\n     695:\t85 c0                \ttest   %eax,%eax\n     697:\t75 09                \tjne    6a2 <radius_client_timer+0x153>\n     699:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     69d:\t8b 40 20             \tmov    0x20(%rax),%eax\n     6a0:\teb 07                \tjmp    6a9 <radius_client_timer+0x15a>\n     6a2:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     6a6:\t8b 40 24             \tmov    0x24(%rax),%eax\n     6a9:\t89 45 bc             \tmov    %eax,-0x44(%rbp)\n     6ac:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     6b0:\t8b 40 28             \tmov    0x28(%rax),%eax\n     6b3:\t83 f8 04             \tcmp    $0x4,%eax\n     6b6:\t7f 11                \tjg     6c9 <radius_client_timer+0x17a>\n     6b8:\t83 7d bc 00          \tcmpl   $0x0,-0x44(%rbp)\n     6bc:\t79 2d                \tjns    6eb <radius_client_timer+0x19c>\n     6be:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     6c2:\t8b 40 28             \tmov    0x28(%rax),%eax\n     6c5:\t85 c0                \ttest   %eax,%eax\n     6c7:\t7e 22                \tjle    6eb <radius_client_timer+0x19c>\n     6c9:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     6cd:\t8b 40 10             \tmov    0x10(%rax),%eax\n     6d0:\t83 f8 01             \tcmp    $0x1,%eax\n     6d3:\t74 0c                \tje     6e1 <radius_client_timer+0x192>\n     6d5:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     6d9:\t8b 40 10             \tmov    0x10(%rax),%eax\n     6dc:\t83 f8 02             \tcmp    $0x2,%eax\n     6df:\t75 06                \tjne    6e7 <radius_client_timer+0x198>\n     6e1:\t83 45 e0 01          \taddl   $0x1,-0x20(%rbp)\n     6e5:\teb 04                \tjmp    6eb <radius_client_timer+0x19c>\n     6e7:\t83 45 e4 01          \taddl   $0x1,-0x1c(%rbp)\n     6eb:\t48 83 7d f8 00       \tcmpq   $0x0,-0x8(%rbp)\n     6f0:\t74 0e                \tje     700 <radius_client_timer+0x1b1>\n     6f2:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     6f6:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     6fa:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n     6fe:\t7e 0c                \tjle    70c <radius_client_timer+0x1bd>\n     700:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     704:\t48 8b 40 20          \tmov    0x20(%rax),%rax\n     708:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     70c:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     710:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     714:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     718:\t48 8b 40 50          \tmov    0x50(%rax),%rax\n     71c:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     720:\t48 83 7d f0 00       \tcmpq   $0x0,-0x10(%rbp)\n     725:\t0f 85 8e fe ff ff    \tjne    5b9 <radius_client_timer+0x6a>\n     72b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     72f:\t48 8b 40 48          \tmov    0x48(%rax),%rax\n     733:\t48 85 c0             \ttest   %rax,%rax\n     736:\t74 73                \tje     7ab <radius_client_timer+0x25c>\n     738:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     73c:\t48 39 45 f8          \tcmp    %rax,-0x8(%rbp)\n     740:\t7d 08                \tjge    74a <radius_client_timer+0x1fb>\n     742:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     746:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     74a:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     74e:\t89 c2                \tmov    %eax,%edx\n     750:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     754:\t89 d7                \tmov    %edx,%edi\n     756:\t29 c7                \tsub    %eax,%edi\n     758:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     75c:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     762:\t48 89 c1             \tmov    %rax,%rcx\n     765:\tba 00 00 00 00       \tmov    $0x0,%edx\n     76a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     76f:\te8 00 00 00 00       \tcallq  774 <radius_client_timer+0x225>\n     774:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     778:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     77c:\t48 29 c2             \tsub    %rax,%rdx\n     77f:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     783:\t48 8b 00             \tmov    (%rax),%rax\n     786:\t49 89 d1             \tmov    %rdx,%r9\n     789:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     78f:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n     794:\tba 04 00 00 00       \tmov    $0x4,%edx\n     799:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     79e:\t48 89 c7             \tmov    %rax,%rdi\n     7a1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     7a6:\te8 00 00 00 00       \tcallq  7ab <radius_client_timer+0x25c>\n     7ab:\t83 7d e4 00          \tcmpl   $0x0,-0x1c(%rbp)\n     7af:\t74 18                \tje     7c9 <radius_client_timer+0x27a>\n     7b1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     7b5:\t8b 40 08             \tmov    0x8(%rax),%eax\n     7b8:\t83 f8 01             \tcmp    $0x1,%eax\n     7bb:\t7e 0c                \tjle    7c9 <radius_client_timer+0x27a>\n     7bd:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7c1:\t48 89 c7             \tmov    %rax,%rdi\n     7c4:\te8 23 00 00 00       \tcallq  7ec <radius_client_auth_failover>\n     7c9:\t83 7d e0 00          \tcmpl   $0x0,-0x20(%rbp)\n     7cd:\t74 1b                \tje     7ea <radius_client_timer+0x29b>\n     7cf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     7d3:\t8b 40 20             \tmov    0x20(%rax),%eax\n     7d6:\t83 f8 01             \tcmp    $0x1,%eax\n     7d9:\t7e 0f                \tjle    7ea <radius_client_timer+0x29b>\n     7db:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     7df:\t48 89 c7             \tmov    %rax,%rdi\n     7e2:\te8 3e 01 00 00       \tcallq  925 <radius_client_acct_failover>\n     7e7:\teb 01                \tjmp    7ea <radius_client_timer+0x29b>\n     7e9:\t90                   \tnop\n     7ea:\tc9                   \tleaveq \n     7eb:\tc3                   \tretq   ", "code_s": "__int64 __fastcall radius_client_timer(__int64 a1) {\n  __int64 result;\n  int v2;\n  __int64 <span class=\"supfact\">v3</span>[Number];\n  int v4;\n  _QWORD *v5;\n  __int64 v6;\n  __int64 v7;\n  int *v8;\n  int v9;\n  int v10;\n  __int64 v11;\n  __int64 v12;\n  __int64 v13;\n  v8 = (int *)a1;\n  v7 = *(_QWORD *)(a1 + Number);\n  v10 = Number;\n  v9 = Number;\n  result = *(_QWORD *)(a1 + Number);\n  v12 = result;\n  if (result) {\n    os_get_reltime(<span class=\"supfact\">v3</span>);\n    v13 = Number L;\n    v11 = Number L;\n    while (v12) {\n      v6 = *((_QWORD *)v8 + Number);\n      if (<span class=\"supfact\">v3</span>[Number] >= *(_QWORD *)(v12 + Number) &&\n          (unsigned int)radius_client_retransmit(v8, v12,\n                                                 <span class=\"supfact\">v3</span>[Number])) {\n        if (v11)\n          *(_QWORD *)(v11 + Number) = *(_QWORD *)(v12 + Number);\n        else\n          *((_QWORD *)v8 + Number) = *(_QWORD *)(v12 + Number);\n        v5 = (_QWORD *)v12;\n        v12 = *(_QWORD *)(v12 + Number);\n        radius_client_msg_free(v5);\n        --*((_QWORD *)v8 + Number);\n      } else if (v6 == *((_QWORD *)v8 + Number)) {\n        if (*(_DWORD *)(v12 + Number))\n          v2 = v8[Number];\n        else\n          v2 = v8[Number];\n        v4 = v2;\n        if (*(int *)(v12 + Number) > Number ||\n            v4<Number &&*(int *)(v12 + Number)> Number) {\n          if (*(_DWORD *)(v12 + Number) == Number ||\n              *(_DWORD *)(v12 + Number) == Number)\n            ++v9;\n          else\n            ++v10;\n        }\n        if (!v13 || v13 > *(_QWORD *)(v12 + Number))\n          v13 = *(_QWORD *)(v12 + Number);\n        v11 = v12;\n        v12 = *(_QWORD *)(v12 + Number);\n      } else {\n        wpa_printf(Number L, String);\n        v12 = *((_QWORD *)v8 + Number);\n        v11 = Number L;\n      }\n    }\n    result = *((_QWORD *)v8 + Number);\n    if (result) {\n      if (v13 < <span class=\"supfact\">v3</span>[Number])\n        v13 = <span class=\"supfact\">v3</span>[Number];\n      eloop_register_timeout(\n          (unsigned int)(v13 - LODWORD(<span class=\"supfact\">v3</span>[Number])), Number L,\n          radius_client_timer, v8, Number L);\n      result = hostapd_logger(*(_QWORD *)v8, Number L, Number L, Number L,\n                              String, v13 - <span class=\"supfact\">v3</span>[Number]);\n    }\n    if (v10) {\n      result = *(unsigned int *)(v7 + Number);\n      if ((int)result > Number)\n        result = radius_client_auth_failover(v8);\n    }\n    if (v9) {\n      result = *(unsigned int *)(v7 + Number);\n      if ((int)result > Number)\n        result = radius_client_acct_failover(v8);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl radius_client_timer(void *eloop_ctx, void *timeout_ctx) {\n  int v2;\n  os_reltime <span class=\"supfact\">now</span>;\n  int s;\n  radius_msg_list *tmp;\n  size_t prev_num_msgs;\n  hostapd_radius_servers *conf;\n  radius_client_data *radius;\n  int acct_failover;\n  int auth_failover;\n  radius_msg_list *prev;\n  radius_msg_list *entry;\n  os_time_t first;\n  radius = (radius_client_data *)eloop_ctx;\n  conf = (hostapd_radius_servers *)*((_QWORD *)eloop_ctx + Number);\n  auth_failover = Number;\n  acct_failover = Number;\n  entry = (radius_msg_list *)*((_QWORD *)eloop_ctx + Number);\n  if (entry) {\n    os_get_reltime(&<span class=\"supfact\">now</span>);\n    first = Number L;\n    prev = Number L;\n    while (entry) {\n      prev_num_msgs = radius->num_msgs;\n      if (<span class=\"supfact\">now</span>.sec >= entry->next_try &&\n          radius_client_retransmit(radius, entry, <span class=\"supfact\">now</span>.sec)) {\n        if (prev)\n          prev->next = entry->next;\n        else\n          radius->msgs = entry->next;\n        tmp = entry;\n        entry = entry->next;\n        radius_client_msg_free(tmp);\n        --radius->num_msgs;\n      } else if (prev_num_msgs == radius->num_msgs) {\n        if (entry->msg_type)\n          v2 = radius->acct_sock;\n        else\n          v2 = radius->auth_sock;\n        s = v2;\n        if (entry->attempts > Number ||\n            s < Number && entry->attempts > Number) {\n          if (entry->msg_type == RADIUS_ACCT ||\n              entry->msg_type == RADIUS_ACCT_INTERIM)\n            ++acct_failover;\n          else\n            ++auth_failover;\n        }\n        if (!first || first > entry->next_try)\n          first = entry->next_try;\n        prev = entry;\n        entry = entry->next;\n      } else {\n        wpa_printf(Number L, String);\n        entry = radius->msgs;\n        prev = Number L;\n      }\n    }\n    if (radius->msgs) {\n      if (first < <span class=\"supfact\">now</span>.sec)\n        first = <span class=\"supfact\">now</span>.sec;\n      eloop_register_timeout(\n          (unsigned int)(first - LODWORD(<span class=\"supfact\">now</span>.sec)), Number L,\n          radius_client_timer, radius, Number L);\n      hostapd_logger(radius->ctx, Number L, Number L, Number L, String,\n                     first - <span class=\"supfact\">now</span>.sec);\n    }\n    if (auth_failover && conf->num_auth_servers > Number)\n      radius_client_auth_failover(radius);\n    if (acct_failover) {\n      if (conf->num_acct_servers > Number)\n        radius_client_acct_failover(radius);\n    }\n  }\n}", "var": [{"name": "v3", "type": "struct os_reltime { os_time_t sec; os_time_t usec; }", "pred_name": "now", "ref_name": "now", "ref_type": "struct os_reltime { os_time_t sec; os_time_t usec; }"}], "body_in_train": false}, {"repo_owner": "draculaw", "repo_name": "yeplayer", "path": "draculaw/yeplayer/bd155ad2d146b783ecaed75c0d41cd8187cfb2320cef562ae94fd3fedb44dbe6", "path_in_repo": "draculaw/yeplayer/jni/ffmpeg/libavfilter/drawutils.o", "objdump": "0000000000002297 <ff_draw_supported_pixel_formats>:\n    2297:\t48 83 ec 68          \tsub    $0x68,%rsp\n    229b:\t89 7c 24 0c          \tmov    %edi,0xc(%rsp)\n    229f:\t48 c7 44 24 18 00 00 \tmovq   $0x0,0x18(%rsp)\n    22a6:\t00 00 \n    22a8:\tc7 44 24 5c 00 00 00 \tmovl   $0x0,0x5c(%rsp)\n    22af:\t00 \n    22b0:\teb 37                \tjmp    22e9 <ff_draw_supported_pixel_formats+0x52>\n    22b2:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n    22b6:\t8b 4c 24 5c          \tmov    0x5c(%rsp),%ecx\n    22ba:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n    22bf:\t89 ce                \tmov    %ecx,%esi\n    22c1:\t48 89 c7             \tmov    %rax,%rdi\n    22c4:\te8 00 00 00 00       \tcallq  22c9 <ff_draw_supported_pixel_formats+0x32>\n    22c9:\t85 c0                \ttest   %eax,%eax\n    22cb:\t78 17                \tjs     22e4 <ff_draw_supported_pixel_formats+0x4d>\n    22cd:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n    22d1:\t48 63 d0             \tmovslq %eax,%rdx\n    22d4:\t48 8d 44 24 18       \tlea    0x18(%rsp),%rax\n    22d9:\t48 89 d6             \tmov    %rdx,%rsi\n    22dc:\t48 89 c7             \tmov    %rax,%rdi\n    22df:\te8 00 00 00 00       \tcallq  22e4 <ff_draw_supported_pixel_formats+0x4d>\n    22e4:\t83 44 24 5c 01       \taddl   $0x1,0x5c(%rsp)\n    22e9:\t8b 44 24 5c          \tmov    0x5c(%rsp),%eax\n    22ed:\t89 c7                \tmov    %eax,%edi\n    22ef:\te8 00 00 00 00       \tcallq  22f4 <ff_draw_supported_pixel_formats+0x5d>\n    22f4:\t48 85 c0             \ttest   %rax,%rax\n    22f7:\t75 b9                \tjne    22b2 <ff_draw_supported_pixel_formats+0x1b>\n    22f9:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    22fe:\t48 83 c4 68          \tadd    $0x68,%rsp\n    2302:\tc3                   \tretq   \n", "code_s": "__int64 ff_draw_supported_pixel_formats() {\n  __int64 v1;\n  __int64 <span class=\"supfact\">v2</span>[Number];\n  signed int i;\n  v1 = Number L;\n  for (i = Number; av_pix_fmt_desc_get((unsigned int)i); ++i) {\n    if ((int)ff_draw_init(<span class=\"supfact\">v2</span>, i) >= Number)\n      ff_add_format(&v1, i);\n  }\n  return v1;\n}", "code_t": "AVFilterFormats_0 *__cdecl ff_draw_supported_pixel_formats(unsigned int flags) {\n  AVFilterFormats_0 *fmts;\n  FFDrawContext_0 <span class=\"supfact\">draw</span>;\n  AVPixelFormat i;\n  fmts = Number L;\n  for (i = AV_PIX_FMT_YUV420P; av_pix_fmt_desc_get((unsigned int)i); ++i) {\n    if (ff_draw_init(&<span class=\"supfact\">draw</span>, i, flags) >= Number)\n      ff_add_format(&fmts, i);\n  }\n  return fmts;\n}", "var": [{"name": "v2", "type": "AVPixelFormat", "pred_name": "ret", "ref_name": "draw", "ref_type": "struct FFDrawContext_0 { const AVPixFmtDescriptor * desc; AVPixelFormat format; unsigned int nb_planes; int[4] pixelstep; uint8_t[4] comp_mask; uint8_t[4] hsub; uint8_t[4] vsub; uint8_t hsub_max; uint8_t vsub_max; PADDING (2); }"}], "body_in_train": false}, {"repo_owner": "ycui1984", "repo_name": "eos", "path": "ycui1984/eos/feabc7d75b40b83a9102ffd050b7b3f78ed5ab171f692d16cceedc46e42de0ca", "path_in_repo": "ycui1984/eos/code/clean/linux-3.8.8/tools/perf/ui/browsers/hists.o", "objdump": "000000000000215c <hist_browser__show_entry>:\n    215c:\t55                   \tpush   %rbp\n    215d:\t48 89 e5             \tmov    %rsp,%rbp\n    2160:\t48 81 ec 70 01 00 00 \tsub    $0x170,%rsp\n    2167:\t48 89 bd a8 fe ff ff \tmov    %rdi,-0x158(%rbp)\n    216e:\t48 89 b5 a0 fe ff ff \tmov    %rsi,-0x160(%rbp)\n    2175:\t89 d0                \tmov    %edx,%eax\n    2177:\t66 89 85 9c fe ff ff \tmov    %ax,-0x164(%rbp)\n    217e:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    2185:\t00 00 \n    2187:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n    218b:\t31 c0                \txor    %eax,%eax\n    218d:\tc7 85 b8 fe ff ff 00 \tmovl   $0x0,-0x148(%rbp)\n    2194:\t00 00 00 \n    2197:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    219e:\t0f b7 40 24          \tmovzwl 0x24(%rax),%eax\n    21a2:\t0f b7 c0             \tmovzwl %ax,%eax\n    21a5:\t89 85 bc fe ff ff    \tmov    %eax,-0x144(%rbp)\n    21ab:\tc6 85 b2 fe ff ff 20 \tmovb   $0x20,-0x14e(%rbp)\n    21b2:\t0f b7 95 9c fe ff ff \tmovzwl -0x164(%rbp),%edx\n    21b9:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    21c0:\t89 d6                \tmov    %edx,%esi\n    21c2:\t48 89 c7             \tmov    %rax,%rdi\n    21c5:\te8 00 00 00 00       \tcallq  21ca <hist_browser__show_entry+0x6e>\n    21ca:\t88 85 b1 fe ff ff    \tmov    %al,-0x14f(%rbp)\n    21d0:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n    21d7:\t0f b7 80 c0 00 00 00 \tmovzwl 0xc0(%rax),%eax\n    21de:\t0f b7 c0             \tmovzwl %ax,%eax\n    21e1:\t48 89 85 c8 fe ff ff \tmov    %rax,-0x138(%rbp)\n    21e8:\tc6 85 b3 fe ff ff 01 \tmovb   $0x1,-0x14d(%rbp)\n    21ef:\t0f b6 85 b1 fe ff ff \tmovzbl -0x14f(%rbp),%eax\n    21f6:\t84 c0                \ttest   %al,%al\n    21f8:\t74 2b                \tje     2225 <hist_browser__show_entry+0xc9>\n    21fa:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2201:\t48 8b 95 a0 fe ff ff \tmov    -0x160(%rbp),%rdx\n    2208:\t48 89 50 78          \tmov    %rdx,0x78(%rax)\n    220c:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n    2213:\t48 8d 50 70          \tlea    0x70(%rax),%rdx\n    2217:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    221e:\t48 89 90 80 00 00 00 \tmov    %rdx,0x80(%rax)\n    2225:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 222c <hist_browser__show_entry+0xd0>\n    222c:\t84 c0                \ttest   %al,%al\n    222e:\t74 24                \tje     2254 <hist_browser__show_entry+0xf8>\n    2230:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n    2237:\t48 89 c7             \tmov    %rax,%rdi\n    223a:\te8 a1 e6 ff ff       \tcallq  8e0 <hist_entry__init_have_children>\n    223f:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n    2246:\t48 89 c7             \tmov    %rax,%rdi\n    2249:\te8 8a e0 ff ff       \tcallq  2d8 <hist_entry__folded>\n    224e:\t88 85 b2 fe ff ff    \tmov    %al,-0x14e(%rbp)\n    2254:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    225b:\t48 85 c0             \ttest   %rax,%rax\n    225e:\t0f 85 b9 02 00 00    \tjne    251d <hist_browser__show_entry+0x3c1>\n    2264:\t48 c7 85 d0 fe ff ff \tmovq   $0x0,-0x130(%rbp)\n    226b:\t00 00 00 00 \n    226f:\t48 c7 85 d8 fe ff ff \tmovq   $0x0,-0x128(%rbp)\n    2276:\t00 00 00 00 \n    227a:\t48 c7 85 e0 fe ff ff \tmovq   $0x0,-0x120(%rbp)\n    2281:\t00 00 00 00 \n    2285:\t48 c7 85 e8 fe ff ff \tmovq   $0x0,-0x118(%rbp)\n    228c:\t00 00 00 00 \n    2290:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    2297:\t48 89 85 d0 fe ff ff \tmov    %rax,-0x130(%rbp)\n    229e:\t48 c7 85 d8 fe ff ff \tmovq   $0x100,-0x128(%rbp)\n    22a5:\t00 01 00 00 \n    22a9:\t0f b7 8d 9c fe ff ff \tmovzwl -0x164(%rbp),%ecx\n    22b0:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    22b7:\tba 00 00 00 00       \tmov    $0x0,%edx\n    22bc:\t89 ce                \tmov    %ecx,%esi\n    22be:\t48 89 c7             \tmov    %rax,%rdi\n    22c1:\te8 00 00 00 00       \tcallq  22c6 <hist_browser__show_entry+0x16a>\n    22c6:\tc7 85 b4 fe ff ff 00 \tmovl   $0x0,-0x14c(%rbp)\n    22cd:\t00 00 00 \n    22d0:\te9 d1 01 00 00       \tjmpq   24a6 <hist_browser__show_entry+0x34a>\n    22d5:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n    22db:\t48 63 d0             \tmovslq %eax,%rdx\n    22de:\t48 89 d0             \tmov    %rdx,%rax\n    22e1:\t48 c1 e0 02          \tshl    $0x2,%rax\n    22e5:\t48 01 d0             \tadd    %rdx,%rax\n    22e8:\t48 c1 e0 03          \tshl    $0x3,%rax\n    22ec:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    22f2:\t0f b6 00             \tmovzbl (%rax),%eax\n    22f5:\t83 f0 01             \txor    $0x1,%eax\n    22f8:\t84 c0                \ttest   %al,%al\n    22fa:\t0f 85 9e 01 00 00    \tjne    249e <hist_browser__show_entry+0x342>\n    2300:\t0f b6 85 b3 fe ff ff \tmovzbl -0x14d(%rbp),%eax\n    2307:\t83 f0 01             \txor    $0x1,%eax\n    230a:\t84 c0                \ttest   %al,%al\n    230c:\t74 16                \tje     2324 <hist_browser__show_entry+0x1c8>\n    230e:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2313:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2318:\te8 00 00 00 00       \tcallq  231d <hist_browser__show_entry+0x1c1>\n    231d:\t83 ad bc fe ff ff 02 \tsubl   $0x2,-0x144(%rbp)\n    2324:\tc6 85 b3 fe ff ff 00 \tmovb   $0x0,-0x14d(%rbp)\n    232b:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n    2331:\t48 63 d0             \tmovslq %eax,%rdx\n    2334:\t48 89 d0             \tmov    %rdx,%rax\n    2337:\t48 c1 e0 02          \tshl    $0x2,%rax\n    233b:\t48 01 d0             \tadd    %rdx,%rax\n    233e:\t48 c1 e0 03          \tshl    $0x3,%rax\n    2342:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    2348:\t48 8b 00             \tmov    (%rax),%rax\n    234b:\t48 85 c0             \ttest   %rax,%rax\n    234e:\t0f 84 f3 00 00 00    \tje     2447 <hist_browser__show_entry+0x2eb>\n    2354:\t48 8d 85 c0 fe ff ff \tlea    -0x140(%rbp),%rax\n    235b:\t48 89 85 e8 fe ff ff \tmov    %rax,-0x118(%rbp)\n    2362:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n    2368:\t48 63 d0             \tmovslq %eax,%rdx\n    236b:\t48 89 d0             \tmov    %rdx,%rax\n    236e:\t48 c1 e0 02          \tshl    $0x2,%rax\n    2372:\t48 01 d0             \tadd    %rdx,%rax\n    2375:\t48 c1 e0 03          \tshl    $0x3,%rax\n    2379:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    237f:\t48 8b 08             \tmov    (%rax),%rcx\n    2382:\t48 8b 95 a0 fe ff ff \tmov    -0x160(%rbp),%rdx\n    2389:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n    2390:\t48 89 d6             \tmov    %rdx,%rsi\n    2393:\t48 89 c7             \tmov    %rax,%rdi\n    2396:\tff d1                \tcallq  *%rcx\n    2398:\t29 85 bc fe ff ff    \tsub    %eax,-0x144(%rbp)\n    239e:\t0f b6 85 b1 fe ff ff \tmovzbl -0x14f(%rbp),%eax\n    23a5:\t0f b6 c8             \tmovzbl %al,%ecx\n    23a8:\t48 8b 95 c0 fe ff ff \tmov    -0x140(%rbp),%rdx\n    23af:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    23b6:\t89 ce                \tmov    %ecx,%esi\n    23b8:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n    23bd:\t48 89 c7             \tmov    %rax,%rdi\n    23c0:\te8 00 00 00 00       \tcallq  23c5 <hist_browser__show_entry+0x269>\n    23c5:\t83 bd b4 fe ff ff 01 \tcmpl   $0x1,-0x14c(%rbp)\n    23cc:\t75 2a                \tjne    23f8 <hist_browser__show_entry+0x29c>\n    23ce:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 23d5 <hist_browser__show_entry+0x279>\n    23d5:\t84 c0                \ttest   %al,%al\n    23d7:\t74 1f                \tje     23f8 <hist_browser__show_entry+0x29c>\n    23d9:\t0f be 85 b2 fe ff ff \tmovsbl -0x14e(%rbp),%eax\n    23e0:\t89 c6                \tmov    %eax,%esi\n    23e2:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    23e7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    23ec:\te8 00 00 00 00       \tcallq  23f1 <hist_browser__show_entry+0x295>\n    23f1:\t83 ad bc fe ff ff 02 \tsubl   $0x2,-0x144(%rbp)\n    23f8:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    23ff:\t48 89 c6             \tmov    %rax,%rsi\n    2402:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2407:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    240c:\te8 00 00 00 00       \tcallq  2411 <hist_browser__show_entry+0x2b5>\n    2411:\t0f b6 85 b1 fe ff ff \tmovzbl -0x14f(%rbp),%eax\n    2418:\t83 f0 01             \txor    $0x1,%eax\n    241b:\t84 c0                \ttest   %al,%al\n    241d:\t75 12                \tjne    2431 <hist_browser__show_entry+0x2d5>\n    241f:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2426:\t0f b6 40 6c          \tmovzbl 0x6c(%rax),%eax\n    242a:\t83 f0 01             \txor    $0x1,%eax\n    242d:\t84 c0                \ttest   %al,%al\n    242f:\t74 6e                \tje     249f <hist_browser__show_entry+0x343>\n    2431:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2438:\tbe 34 00 00 00       \tmov    $0x34,%esi\n    243d:\t48 89 c7             \tmov    %rax,%rdi\n    2440:\te8 00 00 00 00       \tcallq  2445 <hist_browser__show_entry+0x2e9>\n    2445:\teb 58                \tjmp    249f <hist_browser__show_entry+0x343>\n    2447:\t8b 85 b4 fe ff ff    \tmov    -0x14c(%rbp),%eax\n    244d:\t48 63 d0             \tmovslq %eax,%rdx\n    2450:\t48 89 d0             \tmov    %rdx,%rax\n    2453:\t48 c1 e0 02          \tshl    $0x2,%rax\n    2457:\t48 01 d0             \tadd    %rdx,%rax\n    245a:\t48 c1 e0 03          \tshl    $0x3,%rax\n    245e:\t48 05 00 00 00 00    \tadd    $0x0,%rax\n    2464:\t48 8b 08             \tmov    (%rax),%rcx\n    2467:\t48 8b 95 a0 fe ff ff \tmov    -0x160(%rbp),%rdx\n    246e:\t48 8d 85 d0 fe ff ff \tlea    -0x130(%rbp),%rax\n    2475:\t48 89 d6             \tmov    %rdx,%rsi\n    2478:\t48 89 c7             \tmov    %rax,%rdi\n    247b:\tff d1                \tcallq  *%rcx\n    247d:\t29 85 bc fe ff ff    \tsub    %eax,-0x144(%rbp)\n    2483:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    248a:\t48 89 c6             \tmov    %rax,%rsi\n    248d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    2492:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2497:\te8 00 00 00 00       \tcallq  249c <hist_browser__show_entry+0x340>\n    249c:\teb 01                \tjmp    249f <hist_browser__show_entry+0x343>\n    249e:\t90                   \tnop\n    249f:\t83 85 b4 fe ff ff 01 \taddl   $0x1,-0x14c(%rbp)\n    24a6:\t83 bd b4 fe ff ff 0d \tcmpl   $0xd,-0x14c(%rbp)\n    24ad:\t0f 8e 22 fe ff ff    \tjle    22d5 <hist_browser__show_entry+0x179>\n    24b3:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    24ba:\t0f b6 40 6c          \tmovzbl 0x6c(%rax),%eax\n    24be:\t83 f0 01             \txor    $0x1,%eax\n    24c1:\t84 c0                \ttest   %al,%al\n    24c3:\t74 07                \tje     24cc <hist_browser__show_entry+0x370>\n    24c5:\t83 85 bc fe ff ff 01 \taddl   $0x1,-0x144(%rbp)\n    24cc:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    24d3:\t48 8b 50 70          \tmov    0x70(%rax),%rdx\n    24d7:\t48 8d b5 f0 fe ff ff \tlea    -0x110(%rbp),%rsi\n    24de:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n    24e5:\t48 89 d1             \tmov    %rdx,%rcx\n    24e8:\tba 00 01 00 00       \tmov    $0x100,%edx\n    24ed:\t48 89 c7             \tmov    %rax,%rdi\n    24f0:\te8 00 00 00 00       \tcallq  24f5 <hist_browser__show_entry+0x399>\n    24f5:\t8b 95 bc fe ff ff    \tmov    -0x144(%rbp),%edx\n    24fb:\t48 8d 85 f0 fe ff ff \tlea    -0x110(%rbp),%rax\n    2502:\t89 d6                \tmov    %edx,%esi\n    2504:\t48 89 c7             \tmov    %rax,%rdi\n    2507:\te8 00 00 00 00       \tcallq  250c <hist_browser__show_entry+0x3b0>\n    250c:\t66 83 85 9c fe ff ff \taddw   $0x1,-0x164(%rbp)\n    2513:\t01 \n    2514:\t83 85 b8 fe ff ff 01 \taddl   $0x1,-0x148(%rbp)\n    251b:\teb 12                \tjmp    252f <hist_browser__show_entry+0x3d3>\n    251d:\t48 8b 85 c8 fe ff ff \tmov    -0x138(%rbp),%rax\n    2524:\t48 83 e8 01          \tsub    $0x1,%rax\n    2528:\t48 89 85 c8 fe ff ff \tmov    %rax,-0x138(%rbp)\n    252f:\t80 bd b2 fe ff ff 2d \tcmpb   $0x2d,-0x14e(%rbp)\n    2536:\t75 76                \tjne    25ae <hist_browser__show_entry+0x452>\n    2538:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    253f:\t0f b7 40 26          \tmovzwl 0x26(%rax),%eax\n    2543:\t66 39 85 9c fe ff ff \tcmp    %ax,-0x164(%rbp)\n    254a:\t74 62                \tje     25ae <hist_browser__show_entry+0x452>\n    254c:\t0f b7 95 9c fe ff ff \tmovzwl -0x164(%rbp),%edx\n    2553:\t48 8b 85 a0 fe ff ff \tmov    -0x160(%rbp),%rax\n    255a:\t48 8d b0 e0 00 00 00 \tlea    0xe0(%rax),%rsi\n    2561:\t48 8d bd b1 fe ff ff \tlea    -0x14f(%rbp),%rdi\n    2568:\t48 8d 8d c8 fe ff ff \tlea    -0x138(%rbp),%rcx\n    256f:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    2576:\t49 89 f9             \tmov    %rdi,%r9\n    2579:\t49 89 c8             \tmov    %rcx,%r8\n    257c:\t89 d1                \tmov    %edx,%ecx\n    257e:\tba 01 00 00 00       \tmov    $0x1,%edx\n    2583:\t48 89 c7             \tmov    %rax,%rdi\n    2586:\te8 fb f5 ff ff       \tcallq  1b86 <hist_browser__show_callchain>\n    258b:\t01 85 b8 fe ff ff    \tadd    %eax,-0x148(%rbp)\n    2591:\t0f b6 85 b1 fe ff ff \tmovzbl -0x14f(%rbp),%eax\n    2598:\t84 c0                \ttest   %al,%al\n    259a:\t74 12                \tje     25ae <hist_browser__show_entry+0x452>\n    259c:\t48 8b 85 a8 fe ff ff \tmov    -0x158(%rbp),%rax\n    25a3:\t48 8b 95 a0 fe ff ff \tmov    -0x160(%rbp),%rdx\n    25aa:\t48 89 50 78          \tmov    %rdx,0x78(%rax)\n    25ae:\t8b 85 b8 fe ff ff    \tmov    -0x148(%rbp),%eax\n    25b4:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n    25b8:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n    25bf:\t00 00 \n    25c1:\t74 05                \tje     25c8 <hist_browser__show_entry+0x46c>\n    25c3:\te8 00 00 00 00       \tcallq  25c8 <hist_browser__show_entry+0x46c>\n    25c8:\tc9                   \tleaveq \n    25c9:\tc3                   \tretq   ", "code_s": "__int64 __fastcall hist_browser__show_entry(__int64 a1, __int64 a2,\n                                            unsigned __int16 a3) {\n  int v3;\n  unsigned __int16 v5;\n  unsigned __int8 v6;\n  char v7;\n  char v8;\n  int i;\n  unsigned int v10;\n  unsigned int v11;\n  double v12;\n  __int64 v13;\n  __int64 <span class=\"supfact\">v14</span>[Number];\n  double *v15;\n  char v16[Number];\n  unsigned __int64 v17;\n  v5 = a3;\n  v17 = __readfsqword(Number);\n  v10 = Number;\n  v11 = *(unsigned __int16 *)(a1 + Number);\n  v7 = Number;\n  v6 = ui_browser__is_current_entry(a1, a3);\n  v13 = *(unsigned __int16 *)(a2 + Number);\n  v8 = Number;\n  if (v6) {\n    *(_QWORD *)(a1 + Number) = a2;\n    *(_QWORD *)(a1 + Number) = a2 + Number;\n  }\n  if (symbol_conf[Number]) {\n    hist_entry__init_have_children(a2);\n    v7 = hist_entry__folded(a2);\n  }\n  if (v13) {\n    --v13;\n  } else {\n    <span class=\"supfact\">v14</span>[Number] = Number L;\n    v15 = Number L;\n    <span class=\"supfact\">v14</span>[Number] = (__int64)v16;\n    <span class=\"supfact\">v14</span>[Number] = Number L;\n    ui_browser__gotorc(a1, v5, Number L);\n    for (i = Number; i <= Number; ++i) {\n      if (LOBYTE(perf_hpp__format[Number * i]) == Number) {\n        if (v8 != Number) {\n          SLsmg_printf(String);\n          v11 -= Number;\n        }\n        v8 = Number;\n        if (perf_hpp__format[Number * i + Number]) {\n          v15 = &v12;\n          v11 -= ((__int64(__fastcall *)(\n              __int64 *, __int64))perf_hpp__format[Number * i + Number])(\n              <span class=\"supfact\">v14</span>, a2);\n          ui_browser__set_percent_color(a1, v6, v12);\n          if (i == Number && symbol_conf[Number]) {\n            SLsmg_printf(String, (unsigned int)v7);\n            v11 -= Number;\n          }\n          SLsmg_printf(String, v16);\n          if (v6 != Number || *(_BYTE *)(a1 + Number) != Number)\n            ui_browser__set_color(a1, Number L);\n        } else {\n          v11 -= ((__int64(__fastcall *)(\n              __int64 *, __int64))perf_hpp__format[Number * i + Number])(\n              <span class=\"supfact\">v14</span>, a2);\n          SLsmg_printf(String, v16);\n        }\n      }\n    }\n    if (*(_BYTE *)(a1 + Number) != Number)\n      ++v11;\n    hist_entry__sort_snprintf(a2, v16, Number L, *(_QWORD *)(a1 + Number));\n    SLsmg_write_nstring(v16, v11);\n    ++v5;\n    ++v10;\n  }\n  if (v7 == Number && v5 != *(_WORD *)(a1 + Number)) {\n    v3 = hist_browser__show_callchain(a1, a2 + Number, Number, v5, &v13, &v6);\n    v10 += v3;\n    if (v6)\n      *(_QWORD *)(a1 + Number) = a2;\n  }\n  return v10;\n}", "code_t": "int __cdecl hist_browser__show_entry(hist_browser *browser, hist_entry *entry,\n                                     unsigned __int16 row) {\n  int v3;\n  unsigned __int16 rowa;\n  bool current_entry;\n  char folded_sign;\n  bool first;\n  int i;\n  int printed;\n  int width;\n  double percent;\n  off_t row_offset;\n  perf_hpp <span class=\"supfact\">hpp</span>;\n  char s[Number];\n  unsigned __int64 v16;\n  rowa = row;\n  v16 = __readfsqword(Number);\n  printed = Number;\n  width = browser->b.width;\n  folded_sign = Number;\n  current_entry = ui_browser__is_current_entry(browser, row);\n  row_offset = entry->row_offset;\n  first = Number;\n  if (current_entry) {\n    browser->he_selection = entry;\n    browser->selection = &entry->ms;\n  }\n  if (symbol_conf_0[Number]) {\n    hist_entry__init_have_children(entry);\n    folded_sign = hist_entry__folded(entry);\n  }\n  if (row_offset) {\n    --row_offset;\n  } else {\n    <span class=\"supfact\">hpp</span>.sep = Number L;\n    <span class=\"supfact\">hpp</span>.ptr = Number L;\n    <span class=\"supfact\">hpp</span>.buf = s;\n    <span class=\"supfact\">hpp</span>.size = Number L;\n    ui_browser__gotorc(browser, rowa, Number L);\n    for (i = Number; i <= Number; ++i) {\n      if (LOBYTE(perf_hpp__format[Number * i]) == Number) {\n        if (!first) {\n          SLsmg_printf(String);\n          width -= Number;\n        }\n        first = Number;\n        if (perf_hpp__format[Number * i + Number]) {\n          <span class=\"supfact\">hpp</span>.ptr = &percent;\n          width -= ((__int64(__fastcall *)(\n              perf_hpp *, hist_entry *))perf_hpp__format[Number * i + Number])(\n              &<span class=\"supfact\">hpp</span>, entry);\n          ui_browser__set_percent_color(browser, current_entry, percent);\n          if (i == Number && symbol_conf_0[Number]) {\n            SLsmg_printf(String, (unsigned int)folded_sign);\n            width -= Number;\n          }\n          SLsmg_printf(String, s);\n          if (!current_entry || !browser->b.navkeypressed)\n            ui_browser__set_color(browser, Number L);\n        } else {\n          width -= ((__int64(__fastcall *)(\n              perf_hpp *, hist_entry *))perf_hpp__format[Number * i + Number])(\n              &<span class=\"supfact\">hpp</span>, entry);\n          SLsmg_printf(String, s);\n        }\n      }\n    }\n    if (!browser->b.navkeypressed)\n      ++width;\n    hist_entry__sort_snprintf(entry, s, Number L, browser->hists);\n    SLsmg_write_nstring(s, (unsigned int)width);\n    ++rowa;\n    ++printed;\n  }\n  if (folded_sign == Number && rowa != browser->b.height) {\n    v3 = hist_browser__show_callchain(browser, &entry->sorted_chain, Number,\n                                      rowa, &row_offset, &current_entry);\n    printed += v3;\n    if (current_entry)\n      browser->he_selection = entry;\n  }\n  return printed;\n}", "var": [{"name": "v14", "type": "struct perf_hpp { char * buf; size_t size; const char * sep; void * ptr; }", "pred_name": "hpp", "ref_name": "hpp", "ref_type": "struct perf_hpp { char * buf; size_t size; const char * sep; void * ptr; }"}], "body_in_train": false}, {"repo_owner": "claymodel", "repo_name": "voip-foip", "path": "claymodel/voip-foip/4ecd7fd86c352ab0c7a7877aa11b3c0b8a570bb47c010f6c32c2a0a6cdd317e0", "path_in_repo": "claymodel/voip-foip/kamailio-3.1.4/modules_s/ldap/ldap.so", "objdump": "000000000000e0a5 <ldap_gentime2db_datetime>:\n    e0a5:\t55                   \tpush   %rbp\n    e0a6:\t48 89 e5             \tmov    %rsp,%rbp\n    e0a9:\t48 83 ec 50          \tsub    $0x50,%rsp\n    e0ad:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n    e0b1:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n    e0b5:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e0b9:\t8b 40 08             \tmov    0x8(%rax),%eax\n    e0bc:\t83 f8 0b             \tcmp    $0xb,%eax\n    e0bf:\t7f 0a                \tjg     e0cb <ldap_gentime2db_datetime+0x26>\n    e0c1:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    e0c6:\te9 9f 01 00 00       \tjmpq   e26a <ldap_gentime2db_datetime+0x1c5>\n    e0cb:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    e0cf:\tba 38 00 00 00       \tmov    $0x38,%edx\n    e0d4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    e0d9:\t48 89 c7             \tmov    %rax,%rdi\n    e0dc:\te8 ff 50 ff ff       \tcallq  31e0 <memset@plt>\n    e0e1:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e0e5:\t48 8b 00             \tmov    (%rax),%rax\n    e0e8:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n    e0ec:\t48 8d 35 d5 6b 00 00 \tlea    0x6bd5(%rip),%rsi        # 14cc8 <__func__.5837+0x278>\n    e0f3:\t48 89 c7             \tmov    %rax,%rdi\n    e0f6:\te8 d5 53 ff ff       \tcallq  34d0 <strptime@plt>\n    e0fb:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e0ff:\t48 8b 10             \tmov    (%rax),%rdx\n    e102:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e106:\t8b 40 08             \tmov    0x8(%rax),%eax\n    e109:\t48 98                \tcltq   \n    e10b:\t48 83 e8 01          \tsub    $0x1,%rax\n    e10f:\t48 01 d0             \tadd    %rdx,%rax\n    e112:\t0f b6 00             \tmovzbl (%rax),%eax\n    e115:\t3c 5a                \tcmp    $0x5a,%al\n    e117:\t74 40                \tje     e159 <ldap_gentime2db_datetime+0xb4>\n    e119:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e11d:\t48 8b 10             \tmov    (%rax),%rdx\n    e120:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e124:\t8b 40 08             \tmov    0x8(%rax),%eax\n    e127:\t48 98                \tcltq   \n    e129:\t48 83 e8 05          \tsub    $0x5,%rax\n    e12d:\t48 01 d0             \tadd    %rdx,%rax\n    e130:\t0f b6 00             \tmovzbl (%rax),%eax\n    e133:\t3c 2d                \tcmp    $0x2d,%al\n    e135:\t74 22                \tje     e159 <ldap_gentime2db_datetime+0xb4>\n    e137:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e13b:\t48 8b 10             \tmov    (%rax),%rdx\n    e13e:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e142:\t8b 40 08             \tmov    0x8(%rax),%eax\n    e145:\t48 98                \tcltq   \n    e147:\t48 83 e8 05          \tsub    $0x5,%rax\n    e14b:\t48 01 d0             \tadd    %rdx,%rax\n    e14e:\t0f b6 00             \tmovzbl (%rax),%eax\n    e151:\t3c 2b                \tcmp    $0x2b,%al\n    e153:\t0f 85 ef 00 00 00    \tjne    e248 <ldap_gentime2db_datetime+0x1a3>\n    e159:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    e15d:\t48 89 c7             \tmov    %rax,%rdi\n    e160:\te8 2b 52 ff ff       \tcallq  3390 <timegm@plt>\n    e165:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    e169:\t48 89 02             \tmov    %rax,(%rdx)\n    e16c:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e170:\t48 8b 10             \tmov    (%rax),%rdx\n    e173:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e177:\t8b 40 08             \tmov    0x8(%rax),%eax\n    e17a:\t48 98                \tcltq   \n    e17c:\t48 83 e8 01          \tsub    $0x1,%rax\n    e180:\t48 01 d0             \tadd    %rdx,%rax\n    e183:\t0f b6 00             \tmovzbl (%rax),%eax\n    e186:\t3c 5a                \tcmp    $0x5a,%al\n    e188:\t0f 84 b7 00 00 00    \tje     e245 <ldap_gentime2db_datetime+0x1a0>\n    e18e:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    e192:\tba 38 00 00 00       \tmov    $0x38,%edx\n    e197:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    e19c:\t48 89 c7             \tmov    %rax,%rdi\n    e19f:\te8 3c 50 ff ff       \tcallq  31e0 <memset@plt>\n    e1a4:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e1a8:\t48 8b 10             \tmov    (%rax),%rdx\n    e1ab:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e1af:\t8b 40 08             \tmov    0x8(%rax),%eax\n    e1b2:\t48 98                \tcltq   \n    e1b4:\t48 83 e8 04          \tsub    $0x4,%rax\n    e1b8:\t48 8d 0c 02          \tlea    (%rdx,%rax,1),%rcx\n    e1bc:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    e1c0:\t48 89 c2             \tmov    %rax,%rdx\n    e1c3:\t48 8d 35 0b 6b 00 00 \tlea    0x6b0b(%rip),%rsi        # 14cd5 <__func__.5837+0x285>\n    e1ca:\t48 89 cf             \tmov    %rcx,%rdi\n    e1cd:\te8 fe 52 ff ff       \tcallq  34d0 <strptime@plt>\n    e1d2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e1d6:\t48 8b 10             \tmov    (%rax),%rdx\n    e1d9:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    e1dd:\t8b 40 08             \tmov    0x8(%rax),%eax\n    e1e0:\t48 98                \tcltq   \n    e1e2:\t48 83 e8 05          \tsub    $0x5,%rax\n    e1e6:\t48 01 d0             \tadd    %rdx,%rax\n    e1e9:\t0f b6 00             \tmovzbl (%rax),%eax\n    e1ec:\t0f be c0             \tmovsbl %al,%eax\n    e1ef:\t83 f8 2b             \tcmp    $0x2b,%eax\n    e1f2:\t74 2b                \tje     e21f <ldap_gentime2db_datetime+0x17a>\n    e1f4:\t83 f8 2d             \tcmp    $0x2d,%eax\n    e1f7:\t75 6b                \tjne    e264 <ldap_gentime2db_datetime+0x1bf>\n    e1f9:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    e1fd:\t48 8b 10             \tmov    (%rax),%rdx\n    e200:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    e203:\t69 c8 10 0e 00 00    \timul   $0xe10,%eax,%ecx\n    e209:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    e20c:\t6b c0 3c             \timul   $0x3c,%eax,%eax\n    e20f:\t01 c8                \tadd    %ecx,%eax\n    e211:\t48 98                \tcltq   \n    e213:\t48 29 c2             \tsub    %rax,%rdx\n    e216:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    e21a:\t48 89 10             \tmov    %rdx,(%rax)\n    e21d:\teb 27                \tjmp    e246 <ldap_gentime2db_datetime+0x1a1>\n    e21f:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    e223:\t48 8b 10             \tmov    (%rax),%rdx\n    e226:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n    e229:\t69 c8 10 0e 00 00    \timul   $0xe10,%eax,%ecx\n    e22f:\t8b 45 c4             \tmov    -0x3c(%rbp),%eax\n    e232:\t6b c0 3c             \timul   $0x3c,%eax,%eax\n    e235:\t01 c8                \tadd    %ecx,%eax\n    e237:\t48 98                \tcltq   \n    e239:\t48 01 c2             \tadd    %rax,%rdx\n    e23c:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    e240:\t48 89 10             \tmov    %rdx,(%rax)\n    e243:\teb 01                \tjmp    e246 <ldap_gentime2db_datetime+0x1a1>\n    e245:\t90                   \tnop\n    e246:\teb 1c                \tjmp    e264 <ldap_gentime2db_datetime+0x1bf>\n    e248:\tc7 45 e0 ff ff ff ff \tmovl   $0xffffffff,-0x20(%rbp)\n    e24f:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n    e253:\t48 89 c7             \tmov    %rax,%rdi\n    e256:\te8 a5 51 ff ff       \tcallq  3400 <timelocal@plt>\n    e25b:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n    e25f:\t48 89 02             \tmov    %rax,(%rdx)\n    e262:\teb 01                \tjmp    e265 <ldap_gentime2db_datetime+0x1c0>\n    e264:\t90                   \tnop\n    e265:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    e26a:\tc9                   \tleaveq \n    e26b:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ldap_gentime2db_datetime(time_t *a1, __int64 a2) {\n  int v3;\n  struct tm <span class=\"supfact\">s</span>;\n  if (*(int *)(a2 + Number) <= Number)\n    return Number;\n  memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n  strptime(*(const char **)a2, String, &<span class=\"supfact\">s</span>);\n  if (*(_BYTE *)(*(_QWORD *)a2 + *(int *)(a2 + Number) - Number L) == Number ||\n      *(_BYTE *)(*(_QWORD *)a2 + *(int *)(a2 + Number) - Number L) == Number ||\n      *(_BYTE *)(*(_QWORD *)a2 + *(int *)(a2 + Number) - Number L) == Number) {\n    *a1 = timegm(&<span class=\"supfact\">s</span>);\n    if (*(_BYTE *)(*(_QWORD *)a2 + *(int *)(a2 + Number) - Number L) !=\n        Number) {\n      memset(&<span class=\"supfact\">s</span>, Number, sizeof(<span class=\"supfact\">s</span>));\n      strptime((const char *)(*(_QWORD *)a2 + *(int *)(a2 + Number) - Number L),\n               String, &<span class=\"supfact\">s</span>);\n      v3 = *(char *)(*(_QWORD *)a2 + *(int *)(a2 + Number) - Number L);\n      if (v3 == Number) {\n        *a1 += Number * <span class=\"supfact\">s</span>.tm_hour +\n               Number * <span class=\"supfact\">s</span>.tm_min;\n      } else if (v3 == Number) {\n        *a1 -= Number * <span class=\"supfact\">s</span>.tm_hour +\n               Number * <span class=\"supfact\">s</span>.tm_min;\n      }\n    }\n  } else {\n    <span class=\"supfact\">s</span>.tm_isdst = Number;\n    *a1 = timelocal(&<span class=\"supfact\">s</span>);\n  }\n  return Number L;\n}", "code_t": "int __cdecl ldap_gentime2db_datetime(time_t *dst, str *src) {\n  int v3;\n  tm <span class=\"supfact\">time</span>;\n  if (src->len <= Number)\n    return Number;\n  memset(&<span class=\"supfact\">time</span>, Number, sizeof(<span class=\"supfact\">time</span>));\n  strptime(src->s, String, &<span class=\"supfact\">time</span>);\n  if (src->s[src->len - Number] == Number ||\n      src->s[src->len - Number] == Number ||\n      src->s[src->len - Number] == Number) {\n    *dst = timegm(&<span class=\"supfact\">time</span>);\n    if (src->s[src->len - Number] != Number) {\n      memset(&<span class=\"supfact\">time</span>, Number, sizeof(<span class=\"supfact\">time</span>));\n      strptime(&src->s[src->len - Number], String, &<span class=\"supfact\">time</span>);\n      v3 = src->s[src->len - Number];\n      if (v3 == Number) {\n        *dst += Number * <span class=\"supfact\">time</span>.tm_hour +\n                Number * <span class=\"supfact\">time</span>.tm_min;\n      } else if (v3 == Number) {\n        *dst -= Number * <span class=\"supfact\">time</span>.tm_hour +\n                Number * <span class=\"supfact\">time</span>.tm_min;\n      }\n    }\n  } else {\n    <span class=\"supfact\">time</span>.tm_isdst = Number;\n    *dst = timelocal(&<span class=\"supfact\">time</span>);\n  }\n  return Number;\n}", "var": [{"name": "s", "type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }", "pred_name": "tm", "ref_name": "time", "ref_type": "struct tm { int tm_sec; int tm_min; int tm_hour; int tm_mday; int tm_mon; int tm_year; int tm_wday; int tm_yday; int tm_isdst; PADDING (4); __int64 tm_gmtoff; const char * tm_zone; }"}], "body_in_train": false}, {"repo_owner": "bigbluesky123", "repo_name": "decaf-platform", "path": "bigbluesky123/decaf-platform/83803426e29d1a0553b2c3450643215194c0c239cc6527e970468c9a9d85b683", "path_in_repo": "bigbluesky123/decaf-platform/plugins/tracecap/trace_reader/TraceProcessorX86Verify.o", "objdump": "0000000000000000 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EixEl>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 30          \tsub    $0x30,%rsp\n   8:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n   c:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n  10:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  14:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  18:\t48 8b 4d d8          \tmov    -0x28(%rbp),%rcx\n  1c:\t48 89 ce             \tmov    %rcx,%rsi\n  1f:\t48 89 c7             \tmov    %rax,%rdi\n  22:\te8 00 00 00 00       \tcallq  27 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EixEl+0x27>\n  27:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  2b:\t48 89 c7             \tmov    %rax,%rdi\n  2e:\te8 00 00 00 00       \tcallq  33 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EixEl+0x33>\n  33:\tc9                   \tleaveq \n  34:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std _Deque_iterator<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>,\n    std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>> &,\n    std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>> *>\noperator[](__int64 a1, __int64 a2) {\n  char <span class=\"supfact\">v3</span>[Number];\n  std _Deque_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> &,\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *>\n  operator+(<span class=\"supfact\">v3</span>, a1, a2);\n  return std _Deque_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> &,\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *>\n  operator*(<span class=\"supfact\">v3</span>);\n}", "code_t": "std _Deque_iterator<\n    std __cxx11 basic_string<char, std char_traits<char>, std allocator<char>>,\n    std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>> &,\n    std __cxx11\n        basic_string<char, std char_traits<char>, std allocator<char>> *>\n    reference __cdecl std _Deque_iterator<\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>>,\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>> &,\n        std __cxx11\n            basic_string<char, std char_traits<char>, std allocator<char>> *>\n    operator[](\n        const std _Deque_iterator<\n            std __cxx11\n                basic_string<char, std char_traits<char>, std allocator<char>>,\n            std __cxx11 basic_string<char, std char_traits<char>,\n                                     std allocator<char>> &,\n            std __cxx11 basic_string<char, std char_traits<char>,\n                                     std allocator<char>> *> *const this,\n        std _Deque_iterator<\n            std __cxx11\n                basic_string<char, std char_traits<char>, std allocator<char>>,\n            std __cxx11 basic_string<char, std char_traits<char>,\n                                     std allocator<char>> &,\n            std __cxx11 basic_string<char, std char_traits<char>,\n                                     std allocator<char>> *>\n            difference_type __n) {\n  std _Deque_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> &,\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *>\n      _Self <span class=\"supfact\">v3</span>;\n  std _Deque_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> &,\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *>\n  operator+(&<span class=\"supfact\">v3</span>, this, __n);\n  return std _Deque_iterator<\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>>,\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> &,\n      std __cxx11\n          basic_string<char, std char_traits<char>, std allocator<char>> *>\n  operator*(&<span class=\"supfact\">v3</span>);\n}", "var": [{"name": "v3", "type": "char[32]", "pred_name": "v3", "ref_name": "v3", "ref_type": "struct std::_Deque_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >&,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*>::_Self { std::_Deque_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >&,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*>::_Elt_pointer _M_cur; std::_Deque_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >&,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*>::_Elt_pointer _M_first; std::_Deque_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >&,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*>::_Elt_pointer _M_last; std::_Deque_iterator<std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >&,std::__cxx11::basic_string<char,std::char_traits<char>,std::allocator<char> >*>::_Map_pointer _M_node; }"}], "body_in_train": false}, {"repo_owner": "daniloegea", "repo_name": "freebsd", "path": "daniloegea/freebsd/aeae63fb709049f5d1786436080f6ac9bed86c1793e6a23aea7af49a9d02c439", "path_in_repo": "daniloegea/freebsd/contrib/groff/src/roff/troff/input.o", "objdump": "0000000000000892 <_ZN5macro6invokeE6symbol.cold>:\n 892:\t48 89 ef             \tmov    %rbp,%rdi\n 895:\tbe a8 00 00 00       \tmov    $0xa8,%esi\n 89a:\te8 00 00 00 00       \tcallq  89f <_ZN5macro6invokeE6symbol.cold+0xd>\n 89f:\t4c 89 e7             \tmov    %r12,%rdi\n 8a2:\te8 00 00 00 00       \tcallq  8a7 <_Z12read_requestv.cold>", "code_s": "void __fastcall __noreturn macro invoke() {\n  void *v0;\n  struct _Unwind_Exception *<span class=\"supfact\">v1</span>;\n  operator delete(v0, Number);\n  Unwind_Resume(<span class=\"supfact\">v1</span>);\n}", "code_t": "void __fastcall __noreturn macro invoke() {\n  void *v0;\n  struct _Unwind_Exception *<span class=\"supfact\">v1</span>;\n  operator delete(v0, Number);\n  Unwind_Resume(<span class=\"supfact\">v1</span>);\n}", "var": [{"name": "v1", "type": "void *", "pred_name": "v1", "ref_name": "v1", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "mindbergh", "repo_name": "VideoCDN", "path": "mindbergh/VideoCDN/119f053194602b02e2ef0afe82928fb0a01818a4b506aeb009af9f4ad62b597f", "path_in_repo": "mindbergh/VideoCDN/src/proxy", "objdump": "0000000000404e56 <server2client>:\n  404e56:\t55                   \tpush   %rbp\n  404e57:\t48 89 e5             \tmov    %rsp,%rbp\n  404e5a:\t48 83 ec 70          \tsub    $0x70,%rsp\n  404e5e:\t89 7d 9c             \tmov    %edi,-0x64(%rbp)\n  404e61:\t48 8b 05 d8 53 00 00 \tmov    0x53d8(%rip),%rax        # 40a240 <stderr@@GLIBC_2.2.5>\n  404e68:\t48 89 c1             \tmov    %rax,%rcx\n  404e6b:\tba 11 00 00 00       \tmov    $0x11,%edx\n  404e70:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  404e75:\tbf 93 72 40 00       \tmov    $0x407293,%edi\n  404e7a:\te8 51 d5 ff ff       \tcallq  4023d0 <fwrite@plt>\n  404e7f:\t8b 45 9c             \tmov    -0x64(%rbp),%eax\n  404e82:\t48 98                \tcltq   \n  404e84:\t48 05 4a 04 00 00    \tadd    $0x44a,%rax\n  404e8a:\t48 8b 04 c5 88 a2 40 \tmov    0x40a288(,%rax,8),%rax\n  404e91:\t00 \n  404e92:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  404e96:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  404e9a:\t8b 00                \tmov    (%rax),%eax\n  404e9c:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n  404e9f:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  404ea2:\t89 c7                \tmov    %eax,%edi\n  404ea4:\te8 aa 15 00 00       \tcallq  406453 <server_get_conn>\n  404ea9:\t89 45 f0             \tmov    %eax,-0x10(%rbp)\n  404eac:\t83 7d f0 ff          \tcmpl   $0xffffffff,-0x10(%rbp)\n  404eb0:\t75 0f                \tjne    404ec1 <server2client+0x6b>\n  404eb2:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  404eb5:\t89 c7                \tmov    %eax,%edi\n  404eb7:\te8 22 18 00 00       \tcallq  4066de <close_conn>\n  404ebc:\te9 75 03 00 00       \tjmpq   405236 <server2client+0x3e0>\n  404ec1:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  404ec4:\t48 98                \tcltq   \n  404ec6:\t48 05 4a 08 00 00    \tadd    $0x84a,%rax\n  404ecc:\t48 8b 04 c5 88 a2 40 \tmov    0x40a288(,%rax,8),%rax\n  404ed3:\t00 \n  404ed4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  404ed8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  404edc:\t8b 40 04             \tmov    0x4(%rax),%eax\n  404edf:\t48 98                \tcltq   \n  404ee1:\t48 83 c0 4a          \tadd    $0x4a,%rax\n  404ee5:\t48 8b 04 c5 88 a2 40 \tmov    0x40a288(,%rax,8),%rax\n  404eec:\t00 \n  404eed:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  404ef1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  404ef5:\t8b 00                \tmov    (%rax),%eax\n  404ef7:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n  404efa:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n  404efe:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  404f01:\t48 89 d6             \tmov    %rdx,%rsi\n  404f04:\t89 c7                \tmov    %eax,%edi\n  404f06:\te8 27 08 00 00       \tcallq  405732 <read_responeshdrs>\n  404f0b:\t8b 55 a4             \tmov    -0x5c(%rbp),%edx\n  404f0e:\t48 8b 05 2b 53 00 00 \tmov    0x532b(%rip),%rax        # 40a240 <stderr@@GLIBC_2.2.5>\n  404f15:\tbe a5 72 40 00       \tmov    $0x4072a5,%esi\n  404f1a:\t48 89 c7             \tmov    %rax,%rdi\n  404f1d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404f22:\te8 d9 d3 ff ff       \tcallq  402300 <fprintf@plt>\n  404f27:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  404f2a:\t85 c0                \ttest   %eax,%eax\n  404f2c:\t74 07                \tje     404f35 <server2client+0xdf>\n  404f2e:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  404f31:\t85 c0                \ttest   %eax,%eax\n  404f33:\t75 2d                \tjne    404f62 <server2client+0x10c>\n  404f35:\t48 8b 05 04 53 00 00 \tmov    0x5304(%rip),%rax        # 40a240 <stderr@@GLIBC_2.2.5>\n  404f3c:\t48 89 c1             \tmov    %rax,%rcx\n  404f3f:\tba 25 00 00 00       \tmov    $0x25,%edx\n  404f44:\tbe 01 00 00 00       \tmov    $0x1,%esi\n  404f49:\tbf c8 72 40 00       \tmov    $0x4072c8,%edi\n  404f4e:\te8 7d d4 ff ff       \tcallq  4023d0 <fwrite@plt>\n  404f53:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  404f56:\t89 c7                \tmov    %eax,%edi\n  404f58:\te8 81 17 00 00       \tcallq  4066de <close_conn>\n  404f5d:\te9 d4 02 00 00       \tjmpq   405236 <server2client+0x3e0>\n  404f62:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  404f65:\t83 c0 01             \tadd    $0x1,%eax\n  404f68:\t48 98                \tcltq   \n  404f6a:\t48 89 c7             \tmov    %rax,%rdi\n  404f6d:\te8 6e d3 ff ff       \tcallq  4022e0 <malloc@plt>\n  404f72:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n  404f76:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  404f79:\t83 f8 01             \tcmp    $0x1,%eax\n  404f7c:\t0f 85 90 01 00 00    \tjne    405112 <server2client+0x2bc>\n  404f82:\t8b 55 a0             \tmov    -0x60(%rbp),%edx\n  404f85:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  404f89:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  404f8c:\t48 89 ce             \tmov    %rcx,%rsi\n  404f8f:\t89 c7                \tmov    %eax,%edi\n  404f91:\te8 98 e3 ff ff       \tcallq  40332e <io_recvn_block>\n  404f96:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  404f99:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  404f9c:\t39 45 cc             \tcmp    %eax,-0x34(%rbp)\n  404f9f:\t74 0f                \tje     404fb0 <server2client+0x15a>\n  404fa1:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  404fa4:\t89 c7                \tmov    %eax,%edi\n  404fa6:\te8 33 17 00 00       \tcallq  4066de <close_conn>\n  404fab:\te9 86 02 00 00       \tjmpq   405236 <server2client+0x3e0>\n  404fb0:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n  404fb3:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  404fb6:\t89 c6                \tmov    %eax,%esi\n  404fb8:\tbf f0 72 40 00       \tmov    $0x4072f0,%edi\n  404fbd:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  404fc2:\te8 89 d0 ff ff       \tcallq  402050 <printf@plt>\n  404fc7:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  404fca:\t48 63 d0             \tmovslq %eax,%rdx\n  404fcd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  404fd1:\t48 01 d0             \tadd    %rdx,%rax\n  404fd4:\tc6 00 00             \tmovb   $0x0,(%rax)\n  404fd7:\t8b 55 a0             \tmov    -0x60(%rbp),%edx\n  404fda:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  404fde:\t89 d6                \tmov    %edx,%esi\n  404fe0:\t48 89 c7             \tmov    %rax,%rdi\n  404fe3:\te8 a1 1a 00 00       \tcallq  406a89 <parse_xml>\n  404fe8:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n  404fec:\t48 83 7d b8 00       \tcmpq   $0x0,-0x48(%rbp)\n  404ff1:\t0f 84 94 00 00 00    \tje     40508b <server2client+0x235>\n  404ff7:\tbf 1e 73 40 00       \tmov    $0x40731e,%edi\n  404ffc:\te8 4f d3 ff ff       \tcallq  402350 <puts@plt>\n  405001:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  405005:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  405008:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40500c:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  40500f:\t89 d6                \tmov    %edx,%esi\n  405011:\t89 c7                \tmov    %eax,%edi\n  405013:\te8 24 19 00 00       \tcallq  40693c <get_thru_by_addrs>\n  405018:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n  40501b:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  40501e:\t48 98                \tcltq   \n  405020:\t48 05 4a 0c 00 00    \tadd    $0xc4a,%rax\n  405026:\t48 8b 04 c5 88 a2 40 \tmov    0x40a288(,%rax,8),%rax\n  40502d:\t00 \n  40502e:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  405032:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  405036:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  40503a:\t48 89 d6             \tmov    %rdx,%rsi\n  40503d:\t48 89 c7             \tmov    %rax,%rdi\n  405040:\te8 26 1d 00 00       \tcallq  406d6b <loggin>\n  405045:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n  405049:\t48 89 05 88 d4 00 00 \tmov    %rax,0xd488(%rip)        # 4124d8 <bitrates>\n  405050:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  405054:\t48 89 c7             \tmov    %rax,%rdi\n  405057:\te8 24 d2 ff ff       \tcallq  402280 <free@plt>\n  40505c:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n  405063:\t00 \n  405064:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  405068:\t48 89 c7             \tmov    %rax,%rdi\n  40506b:\te8 10 d2 ff ff       \tcallq  402280 <free@plt>\n  405070:\t8b 55 b4             \tmov    -0x4c(%rbp),%edx\n  405073:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405077:\t8b 48 04             \tmov    0x4(%rax),%ecx\n  40507a:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40507d:\t89 ce                \tmov    %ecx,%esi\n  40507f:\t89 c7                \tmov    %eax,%edi\n  405081:\te8 45 0c 00 00       \tcallq  405ccb <ask_for_nolist>\n  405086:\te9 ab 01 00 00       \tjmpq   405236 <server2client+0x3e0>\n  40508b:\tbf 33 73 40 00       \tmov    $0x407333,%edi\n  405090:\te8 bb d2 ff ff       \tcallq  402350 <puts@plt>\n  405095:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405099:\t48 05 28 20 00 00    \tadd    $0x2028,%rax\n  40509f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4050a4:\t48 89 c7             \tmov    %rax,%rdi\n  4050a7:\te8 c4 d2 ff ff       \tcallq  402370 <gettimeofday@plt>\n  4050ac:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n  4050af:\t48 63 d0             \tmovslq %eax,%rdx\n  4050b2:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n  4050b6:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4050b9:\t48 89 ce             \tmov    %rcx,%rsi\n  4050bc:\t89 c7                \tmov    %eax,%edi\n  4050be:\te8 11 e1 ff ff       \tcallq  4031d4 <io_sendn>\n  4050c3:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  4050c6:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n  4050c9:\t39 45 cc             \tcmp    %eax,-0x34(%rbp)\n  4050cc:\t74 0f                \tje     4050dd <server2client+0x287>\n  4050ce:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  4050d1:\t89 c7                \tmov    %eax,%edi\n  4050d3:\te8 06 16 00 00       \tcallq  4066de <close_conn>\n  4050d8:\te9 59 01 00 00       \tjmpq   405236 <server2client+0x3e0>\n  4050dd:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  4050e0:\t48 63 d0             \tmovslq %eax,%rdx\n  4050e3:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  4050e7:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4050ea:\t48 89 ce             \tmov    %rcx,%rsi\n  4050ed:\t89 c7                \tmov    %eax,%edi\n  4050ef:\te8 e0 e0 ff ff       \tcallq  4031d4 <io_sendn>\n  4050f4:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  4050f7:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  4050fa:\t39 45 cc             \tcmp    %eax,-0x34(%rbp)\n  4050fd:\t0f 84 32 01 00 00    \tje     405235 <server2client+0x3df>\n  405103:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  405106:\t89 c7                \tmov    %eax,%edi\n  405108:\te8 d1 15 00 00       \tcallq  4066de <close_conn>\n  40510d:\te9 24 01 00 00       \tjmpq   405236 <server2client+0x3e0>\n  405112:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n  405115:\t48 63 d0             \tmovslq %eax,%rdx\n  405118:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n  40511c:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  40511f:\t48 89 ce             \tmov    %rcx,%rsi\n  405122:\t89 c7                \tmov    %eax,%edi\n  405124:\te8 ab e0 ff ff       \tcallq  4031d4 <io_sendn>\n  405129:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  40512c:\t8b 45 b0             \tmov    -0x50(%rbp),%eax\n  40512f:\t39 45 cc             \tcmp    %eax,-0x34(%rbp)\n  405132:\t74 0f                \tje     405143 <server2client+0x2ed>\n  405134:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  405137:\t89 c7                \tmov    %eax,%edi\n  405139:\te8 a0 15 00 00       \tcallq  4066de <close_conn>\n  40513e:\te9 f3 00 00 00       \tjmpq   405236 <server2client+0x3e0>\n  405143:\t8b 55 a0             \tmov    -0x60(%rbp),%edx\n  405146:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  40514a:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40514d:\t48 89 ce             \tmov    %rcx,%rsi\n  405150:\t89 c7                \tmov    %eax,%edi\n  405152:\te8 d7 e1 ff ff       \tcallq  40332e <io_recvn_block>\n  405157:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  40515a:\t83 7d cc 00          \tcmpl   $0x0,-0x34(%rbp)\n  40515e:\t75 0f                \tjne    40516f <server2client+0x319>\n  405160:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  405163:\t89 c7                \tmov    %eax,%edi\n  405165:\te8 74 15 00 00       \tcallq  4066de <close_conn>\n  40516a:\te9 c7 00 00 00       \tjmpq   405236 <server2client+0x3e0>\n  40516f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  405173:\t48 05 28 20 00 00    \tadd    $0x2028,%rax\n  405179:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  40517e:\t48 89 c7             \tmov    %rax,%rdi\n  405181:\te8 ea d1 ff ff       \tcallq  402370 <gettimeofday@plt>\n  405186:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  40518a:\t8b 50 0c             \tmov    0xc(%rax),%edx\n  40518d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  405191:\t8b 40 0c             \tmov    0xc(%rax),%eax\n  405194:\t89 d6                \tmov    %edx,%esi\n  405196:\t89 c7                \tmov    %eax,%edi\n  405198:\te8 9f 17 00 00       \tcallq  40693c <get_thru_by_addrs>\n  40519d:\t89 45 c8             \tmov    %eax,-0x38(%rbp)\n  4051a0:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  4051a3:\t48 98                \tcltq   \n  4051a5:\t48 05 4a 0c 00 00    \tadd    $0xc4a,%rax\n  4051ab:\t48 8b 04 c5 88 a2 40 \tmov    0x40a288(,%rax,8),%rax\n  4051b2:\t00 \n  4051b3:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n  4051b7:\t8b 45 a4             \tmov    -0x5c(%rbp),%eax\n  4051ba:\t83 f8 02             \tcmp    $0x2,%eax\n  4051bd:\t75 15                \tjne    4051d4 <server2client+0x37e>\n  4051bf:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  4051c2:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  4051c6:\t48 8b 4d e8          \tmov    -0x18(%rbp),%rcx\n  4051ca:\t48 89 ce             \tmov    %rcx,%rsi\n  4051cd:\t89 c7                \tmov    %eax,%edi\n  4051cf:\te8 3b 16 00 00       \tcallq  40680f <update_thruput>\n  4051d4:\t48 8b 55 c0          \tmov    -0x40(%rbp),%rdx\n  4051d8:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  4051dc:\t48 89 d6             \tmov    %rdx,%rsi\n  4051df:\t48 89 c7             \tmov    %rax,%rdi\n  4051e2:\te8 84 1b 00 00       \tcallq  406d6b <loggin>\n  4051e7:\t8b 45 a0             \tmov    -0x60(%rbp),%eax\n  4051ea:\t48 63 d0             \tmovslq %eax,%rdx\n  4051ed:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n  4051f1:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n  4051f4:\t48 89 ce             \tmov    %rcx,%rsi\n  4051f7:\t89 c7                \tmov    %eax,%edi\n  4051f9:\te8 d6 df ff ff       \tcallq  4031d4 <io_sendn>\n  4051fe:\t89 45 cc             \tmov    %eax,-0x34(%rbp)\n  405201:\t83 7d cc ff          \tcmpl   $0xffffffff,-0x34(%rbp)\n  405205:\t75 0c                \tjne    405213 <server2client+0x3bd>\n  405207:\t8b 45 f0             \tmov    -0x10(%rbp),%eax\n  40520a:\t89 c7                \tmov    %eax,%edi\n  40520c:\te8 cd 14 00 00       \tcallq  4066de <close_conn>\n  405211:\teb 23                \tjmp    405236 <server2client+0x3e0>\n  405213:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n  405217:\t48 89 c7             \tmov    %rax,%rdi\n  40521a:\te8 61 d0 ff ff       \tcallq  402280 <free@plt>\n  40521f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n  405223:\t48 89 c7             \tmov    %rax,%rdi\n  405226:\te8 55 d0 ff ff       \tcallq  402280 <free@plt>\n  40522b:\t48 c7 45 a8 00 00 00 \tmovq   $0x0,-0x58(%rbp)\n  405232:\t00 \n  405233:\teb 01                \tjmp    405236 <server2client+0x3e0>\n  405235:\t90                   \tnop\n  405236:\tc9                   \tleaveq \n  405237:\tc3                   \tretq   ", "code_s": "void __fastcall server2client(int a1) {\n  unsigned int <span class=\"supfact\">v1</span>;\n  unsigned int v2;\n  void *ptr;\n  int v4;\n  unsigned int v5;\n  __int64 v6;\n  __int64 v7;\n  int v8;\n  unsigned int v9;\n  void *v10;\n  int v11;\n  __int64 v12;\n  __int64 v13;\n  unsigned int v14;\n  unsigned int v15;\n  unsigned int *v16;\n  fwrite(String, Number, Number, _bss_start);\n  v16 = (unsigned int *)*((_QWORD *)&tv + a1 + Number);\n  v15 = *v16;\n  v14 = server_get_conn(v15);\n  if (v14 == Number) {\n    close_conn(Number);\n    return;\n  }\n  v13 = *((_QWORD *)&tv + (int)v14 + Number);\n  v12 = *((_QWORD *)&tv + *(int *)(v13 + Number) + Number);\n  v11 = *(_DWORD *)v12;\n  read_responeshdrs(v15, &<span class=\"supfact\">v1</span>);\n  fprintf(_bss_start, String, v2);\n  if (!<span class=\"supfact\">v1</span> || !v2) {\n    fwrite(String, Number, Number, _bss_start);\n    close_conn(v14);\n    return;\n  }\n  v10 = malloc((int)(<span class=\"supfact\">v1</span> + Number));\n  if (v2 == Number) {\n    v9 = io_recvn_block(v15, (__int64)v10, <span class=\"supfact\">v1</span>);\n    if (v9 != <span class=\"supfact\">v1</span>)\n      goto LABEL_20;\n    printf(String, v15, v9);\n    *((_BYTE *)v10 + (int)<span class=\"supfact\">v1</span>) = Number;\n    v6 = parse_xml(v10, <span class=\"supfact\">v1</span>);\n    if (v6) {\n      puts(String);\n      v8 = get_thru_by_addrs(*(unsigned int *)(v12 + Number), v16[Number]);\n      v7 = *((_QWORD *)&tv + v8 + Number);\n      loggin(v13, v7);\n      bitrates = v6;\n      free(ptr);\n      ptr = Number L;\n      free(v10);\n      ask_for_nolist(v15, *(unsigned int *)(v13 + Number), v5);\n      return;\n    }\n    puts(String);\n    gettimeofday((struct timeval *)(v13 + Number), Number L);\n    v9 = io_sendn(v11, (char *)ptr, v4);\n    if (v9 != v4)\n      goto LABEL_20;\n    v9 = io_sendn(v11, (char *)v10, (int)<span class=\"supfact\">v1</span>);\n    if (v9 != <span class=\"supfact\">v1</span>)\n      goto LABEL_20;\n  } else {\n    v9 = io_sendn(v11, (char *)ptr, v4);\n    if (v9 != v4)\n      goto LABEL_20;\n    v9 = io_recvn_block(v15, (__int64)v10, <span class=\"supfact\">v1</span>);\n    if (!v9)\n      goto LABEL_20;\n    gettimeofday((struct timeval *)(v13 + Number), Number L);\n    v8 = get_thru_by_addrs(*(unsigned int *)(v12 + Number), v16[Number]);\n    v7 = *((_QWORD *)&tv + v8 + Number);\n    if (v2 == Number)\n      update_thruput(<span class=\"supfact\">v1</span>, v13, v7);\n    loggin(v13, v7);\n    v9 = io_sendn(v11, (char *)v10, (int)<span class=\"supfact\">v1</span>);\n    if (v9 == Number) {\n    LABEL_20:\n      close_conn(v14);\n      return;\n    }\n    free(v10);\n    free(ptr);\n  }\n}", "code_t": "void __cdecl server2client(int serv_idx) {\n  response_t <span class=\"supfact\">res</span>;\n  bit_t *this_bitrates;\n  thruputs_t *thru;\n  int thru_idx;\n  int n;\n  char *buf_internet;\n  int client_fd;\n  client_t *client;\n  conn_t *conn;\n  int conn_idx;\n  int server_fd;\n  server_t *server;\n  fwrite(String, Number, Number, _bss_start);\n  server = pool.server_l[serv_idx];\n  server_fd = server->fd;\n  conn_idx = server_get_conn(server_fd);\n  if (conn_idx == Number) {\n    close_conn(Number);\n    return;\n  }\n  conn = pool.conn_l[conn_idx];\n  client = pool.client_l[conn->clit_idx];\n  client_fd = client->fd;\n  read_responeshdrs(server_fd, &<span class=\"supfact\">res</span>);\n  fprintf(_bss_start, String, (unsigned int)<span class=\"supfact\">res</span>.type);\n  if (!<span class=\"supfact\">res</span>.length || !<span class=\"supfact\">res</span>.type) {\n    fwrite(String, Number, Number, _bss_start);\n    close_conn(conn_idx);\n    return;\n  }\n  buf_internet = (char *)malloc(<span class=\"supfact\">res</span>.length + Number);\n  if (<span class=\"supfact\">res</span>.type == Number) {\n    n = io_recvn_block(server_fd, buf_internet, <span class=\"supfact\">res</span>.length);\n    if (n != <span class=\"supfact\">res</span>.length)\n      goto LABEL_20;\n    printf(String, (unsigned int)server_fd, (unsigned int)n);\n    buf_internet[<span class=\"supfact\">res</span>.length] = Number;\n    this_bitrates = parse_xml(buf_internet, <span class=\"supfact\">res</span>.length);\n    if (this_bitrates) {\n      puts(String);\n      thru_idx = get_thru_by_addrs(client->addr, server->addr);\n      thru = pool.thru_l[thru_idx];\n      loggin(conn, thru);\n      bitrates = this_bitrates;\n      free(<span class=\"supfact\">res</span>.hdr_buf);\n      <span class=\"supfact\">res</span>.hdr_buf = Number L;\n      free(buf_internet);\n      ask_for_nolist(server_fd, conn->clit_idx, <span class=\"supfact\">res</span>.close);\n      return;\n    }\n    puts(String);\n    gettimeofday(&conn->end, Number L);\n    n = io_sendn(client_fd, <span class=\"supfact\">res</span>.hdr_buf,\n                 <span class=\"supfact\">res</span>.hdr_len);\n    if (n != <span class=\"supfact\">res</span>.hdr_len)\n      goto LABEL_20;\n    n = io_sendn(client_fd, buf_internet, <span class=\"supfact\">res</span>.length);\n    if (n != <span class=\"supfact\">res</span>.length)\n      goto LABEL_20;\n  } else {\n    n = io_sendn(client_fd, <span class=\"supfact\">res</span>.hdr_buf,\n                 <span class=\"supfact\">res</span>.hdr_len);\n    if (n != <span class=\"supfact\">res</span>.hdr_len)\n      goto LABEL_20;\n    n = io_recvn_block(server_fd, buf_internet, <span class=\"supfact\">res</span>.length);\n    if (!n)\n      goto LABEL_20;\n    gettimeofday(&conn->end, Number L);\n    thru_idx = get_thru_by_addrs(client->addr, server->addr);\n    thru = pool.thru_l[thru_idx];\n    if (<span class=\"supfact\">res</span>.type == Number)\n      update_thruput(<span class=\"supfact\">res</span>.length, conn, thru);\n    loggin(conn, thru);\n    n = io_sendn(client_fd, buf_internet, <span class=\"supfact\">res</span>.length);\n    if (n == Number) {\n    LABEL_20:\n      close_conn(conn_idx);\n      return;\n    }\n    free(buf_internet);\n    free(<span class=\"supfact\">res</span>.hdr_buf);\n  }\n}", "var": [{"name": "v1", "type": "int", "pred_name": "v1", "ref_name": "res", "ref_type": "struct response_t { int length; int type; char * hdr_buf; int hdr_len; int close; }"}], "body_in_train": false}, {"repo_owner": "Wyvern", "repo_name": "git", "path": "Wyvern/git/d2f47fb800dc5e6e0d2e97ef521a75498289a1e0471f65ca92b2c9adaa3dc434", "path_in_repo": "Wyvern/git//builtin/am.o", "objdump": "0000000000004acb <fast_forward_to>:\n    4acb:\t55                   \tpush   %rbp\n    4acc:\t48 89 e5             \tmov    %rsp,%rbp\n    4acf:\t48 81 ec d0 03 00 00 \tsub    $0x3d0,%rsp\n    4ad6:\t48 89 bd 48 fc ff ff \tmov    %rdi,-0x3b8(%rbp)\n    4add:\t48 89 b5 40 fc ff ff \tmov    %rsi,-0x3c0(%rbp)\n    4ae4:\t89 95 3c fc ff ff    \tmov    %edx,-0x3c4(%rbp)\n    4aea:\t48 c7 45 f8 00 00 00 \tmovq   $0x0,-0x8(%rbp)\n    4af1:\t00 \n    4af2:\t48 8b 85 48 fc ff ff \tmov    -0x3b8(%rbp),%rax\n    4af9:\t48 89 c7             \tmov    %rax,%rdi\n    4afc:\te8 70 b8 ff ff       \tcallq  371 <parse_tree>\n    4b01:\t85 c0                \ttest   %eax,%eax\n    4b03:\t75 13                \tjne    4b18 <fast_forward_to+0x4d>\n    4b05:\t48 8b 85 40 fc ff ff \tmov    -0x3c0(%rbp),%rax\n    4b0c:\t48 89 c7             \tmov    %rax,%rdi\n    4b0f:\te8 5d b8 ff ff       \tcallq  371 <parse_tree>\n    4b14:\t85 c0                \ttest   %eax,%eax\n    4b16:\t74 0a                \tje     4b22 <fast_forward_to+0x57>\n    4b18:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    4b1d:\te9 5a 01 00 00       \tjmpq   4c7c <fast_forward_to+0x1b1>\n    4b22:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 4b29 <fast_forward_to+0x5e>\n    4b29:\t48 8d 4d f8          \tlea    -0x8(%rbp),%rcx\n    4b2d:\tba 01 00 00 00       \tmov    $0x1,%edx\n    4b32:\t48 89 ce             \tmov    %rcx,%rsi\n    4b35:\t48 89 c7             \tmov    %rax,%rdi\n    4b38:\te8 00 00 00 00       \tcallq  4b3d <fast_forward_to+0x72>\n    4b3d:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n    4b43:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n    4b48:\tba 00 00 00 00       \tmov    $0x0,%edx\n    4b4d:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    4b52:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4b57:\te8 00 00 00 00       \tcallq  4b5c <fast_forward_to+0x91>\n    4b5c:\t48 8d 85 d0 fc ff ff \tlea    -0x330(%rbp),%rax\n    4b63:\tba 20 03 00 00       \tmov    $0x320,%edx\n    4b68:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    4b6d:\t48 89 c7             \tmov    %rax,%rdi\n    4b70:\te8 00 00 00 00       \tcallq  4b75 <fast_forward_to+0xaa>\n    4b75:\tc7 85 e0 fe ff ff 01 \tmovl   $0x1,-0x120(%rbp)\n    4b7c:\t00 00 00 \n    4b7f:\t48 c7 85 00 ff ff ff \tmovq   $0x0,-0x100(%rbp)\n    4b86:\t00 00 00 00 \n    4b8a:\t48 c7 85 f8 fe ff ff \tmovq   $0x0,-0x108(%rbp)\n    4b91:\t00 00 00 00 \n    4b95:\tc7 85 d8 fc ff ff 01 \tmovl   $0x1,-0x328(%rbp)\n    4b9c:\t00 00 00 \n    4b9f:\tc7 85 d4 fc ff ff 01 \tmovl   $0x1,-0x32c(%rbp)\n    4ba6:\t00 00 00 \n    4ba9:\t8b 85 3c fc ff ff    \tmov    -0x3c4(%rbp),%eax\n    4baf:\t89 85 d0 fc ff ff    \tmov    %eax,-0x330(%rbp)\n    4bb5:\t48 c7 85 38 fd ff ff \tmovq   $0x0,-0x2c8(%rbp)\n    4bbc:\t00 00 00 00 \n    4bc0:\t48 8b 85 48 fc ff ff \tmov    -0x3b8(%rbp),%rax\n    4bc7:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n    4bcb:\t48 8b 85 48 fc ff ff \tmov    -0x3b8(%rbp),%rax\n    4bd2:\t48 8b 48 28          \tmov    0x28(%rax),%rcx\n    4bd6:\t48 8d 85 50 fc ff ff \tlea    -0x3b0(%rbp),%rax\n    4bdd:\t48 89 ce             \tmov    %rcx,%rsi\n    4be0:\t48 89 c7             \tmov    %rax,%rdi\n    4be3:\te8 00 00 00 00       \tcallq  4be8 <fast_forward_to+0x11d>\n    4be8:\t48 8b 85 40 fc ff ff \tmov    -0x3c0(%rbp),%rax\n    4bef:\t48 8b 50 30          \tmov    0x30(%rax),%rdx\n    4bf3:\t48 8b 85 40 fc ff ff \tmov    -0x3c0(%rbp),%rax\n    4bfa:\t48 8b 40 28          \tmov    0x28(%rax),%rax\n    4bfe:\t48 8d 8d 50 fc ff ff \tlea    -0x3b0(%rbp),%rcx\n    4c05:\t48 83 c1 40          \tadd    $0x40,%rcx\n    4c09:\t48 89 c6             \tmov    %rax,%rsi\n    4c0c:\t48 89 cf             \tmov    %rcx,%rdi\n    4c0f:\te8 00 00 00 00       \tcallq  4c14 <fast_forward_to+0x149>\n    4c14:\t48 8d 95 d0 fc ff ff \tlea    -0x330(%rbp),%rdx\n    4c1b:\t48 8d 85 50 fc ff ff \tlea    -0x3b0(%rbp),%rax\n    4c22:\t48 89 c6             \tmov    %rax,%rsi\n    4c25:\tbf 02 00 00 00       \tmov    $0x2,%edi\n    4c2a:\te8 00 00 00 00       \tcallq  4c2f <fast_forward_to+0x164>\n    4c2f:\t85 c0                \ttest   %eax,%eax\n    4c31:\t74 13                \tje     4c46 <fast_forward_to+0x17b>\n    4c33:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n    4c37:\t48 89 c7             \tmov    %rax,%rdi\n    4c3a:\te8 9b b7 ff ff       \tcallq  3da <rollback_lock_file>\n    4c3f:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n    4c44:\teb 36                \tjmp    4c7c <fast_forward_to+0x1b1>\n    4c46:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n    4c4a:\tba 01 00 00 00       \tmov    $0x1,%edx\n    4c4f:\t48 89 c6             \tmov    %rax,%rsi\n    4c52:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4c57:\te8 00 00 00 00       \tcallq  4c5c <fast_forward_to+0x191>\n    4c5c:\t85 c0                \ttest   %eax,%eax\n    4c5e:\t74 17                \tje     4c77 <fast_forward_to+0x1ac>\n    4c60:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    4c65:\te8 8c b5 ff ff       \tcallq  1f6 <_>\n    4c6a:\t48 89 c7             \tmov    %rax,%rdi\n    4c6d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4c72:\te8 00 00 00 00       \tcallq  4c77 <fast_forward_to+0x1ac>\n    4c77:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    4c7c:\tc9                   \tleaveq \n    4c7d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall fast_forward_to(__int64 a1, __int64 a2, unsigned int a3) {\n  __int64 result;\n  char *v4;\n  char v6[Number];\n  __int64 v7;\n  _QWORD <span class=\"supfact\">s</span>[Number];\n  __int64 <span class=\"supfact\">v9</span>;\n  <span class=\"supfact\">v9</span> = Number L;\n  if ((unsigned int)parse_tree(a1) || (unsigned int)parse_tree(a2))\n    return Number;\n  repo_hold_locked_index(the_repository, &<span class=\"supfact\">v9</span>, Number L);\n  refresh_index(&the_index, Number L, Number L, Number L, Number L);\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  LODWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n  <span class=\"supfact\">s</span>[Number] = &the_index;\n  <span class=\"supfact\">s</span>[Number] = &the_index;\n  LODWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n  <span class=\"supfact\">s</span>[Number] = a3 | Number;\n  <span class=\"supfact\">s</span>[Number] = &twoway_merge;\n  init_tree_desc(v6, *(_QWORD *)(a1 + Number), *(_QWORD *)(a1 + Number));\n  init_tree_desc(&v7, *(_QWORD *)(a2 + Number), *(_QWORD *)(a2 + Number));\n  if ((unsigned int)unpack_trees(Number L, v6, <span class=\"supfact\">s</span>)) {\n    rollback_lock_file((__int64)&<span class=\"supfact\">v9</span>);\n    result = Number;\n  } else {\n    if ((unsigned int)write_locked_index(&the_index, &<span class=\"supfact\">v9</span>,\n                                         Number L)) {\n      v4 = _(String);\n      die(v4);\n    }\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl fast_forward_to(tree *head, tree *remote, int reset) {\n  int result;\n  const char *v4;\n  tree_desc t[Number];\n  unpack_trees_options <span class=\"supfact\">opts</span>;\n  <span class=\"supfact\">lock_file</span> <span class=\"supfact\">lock_file</span>;\n  <span class=\"supfact\">lock_file</span>.tempfile = Number L;\n  if (parse_tree(head) || parse_tree(remote))\n    return Number;\n  repo_hold_locked_index(the_repository, &<span class=\"supfact\">lock_file</span>, Number L);\n  refresh_index(&the_index, Number L, Number L, Number L, Number L);\n  memset(&<span class=\"supfact\">opts</span>, Number, sizeof(<span class=\"supfact\">opts</span>));\n  <span class=\"supfact\">opts</span>.head_idx = Number;\n  <span class=\"supfact\">opts</span>.src_index = (index_state *)&the_index;\n  <span class=\"supfact\">opts</span>.dst_index = (index_state *)&the_index;\n  <span class=\"supfact\">opts</span>.update = Number;\n  <span class=\"supfact\">opts</span>.merge = Number;\n  <span class=\"supfact\">opts</span>.reset = reset;\n  <span class=\"supfact\">opts</span>.fn = (merge_fn_t)&twoway_merge;\n  init_tree_desc(t, head->buffer, head->size);\n  init_tree_desc(&t[Number], remote->buffer, remote->size);\n  if ((unsigned int)unpack_trees(Number L, t, &<span class=\"supfact\">opts</span>)) {\n    rollback_lock_file(&<span class=\"supfact\">lock_file</span>);\n    result = Number;\n  } else {\n    if ((unsigned int)write_locked_index(&the_index, &<span class=\"supfact\">lock_file</span>,\n                                         Number L)) {\n      v4 = _(String);\n      die(v4);\n    }\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "s", "type": "cache_entry *", "pred_name": "ce_0", "ref_name": "opts", "ref_type": "struct unpack_trees_options { unsigned int reset; unsigned int merge; unsigned int update; unsigned int clone; unsigned int index_only; unsigned int nontrivial_merge; unsigned int trivial_merges_only; unsigned int verbose_update; unsigned int aggressive; unsigned int skip_unmerged; unsigned int initial_checkout; unsigned int diff_index_cached; unsigned int debug_unpack; unsigned int skip_sparse_checkout; unsigned int gently; unsigned int exiting_early; unsigned int show_all_errors; unsigned int dry_run; const char * prefix; int cache_bottom; PADDING (4); dir_struct * dir; pathspec * pathspec; merge_fn_t fn; const char *[10] msgs; argv_array msgs_to_free; string_list[10] unpack_rejects; int head_idx; int merge_size; cache_entry * df_conflict_entry; void * unpack_data; index_state * dst_index; index_state * src_index; index_state result; exclude_list * el; }"}, {"name": "v9", "type": "cache_entry *", "pred_name": "ce_0", "ref_name": "lock_file", "ref_type": "struct lock_file { tempfile * tempfile; }"}], "body_in_train": false}, {"repo_owner": "darkspr1te", "repo_name": "s3c44b0x", "path": "darkspr1te/s3c44b0x/86a66dc13bb9380009820fec3d1d9a6de9b5c9267f27d96b66357a0163f17ad4", "path_in_repo": "darkspr1te/s3c44b0x/uClinux-dist/uClibc/libc/sysdeps/linux/common/gethstnm.o", "objdump": "0000000000000000 <gethostname>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 81 ec a0 01 00 00 \tsub    $0x1a0,%rsp\n   b:\t48 89 bd 68 fe ff ff \tmov    %rdi,-0x198(%rbp)\n  12:\t48 89 b5 60 fe ff ff \tmov    %rsi,-0x1a0(%rbp)\n  19:\t48 83 bd 68 fe ff ff \tcmpq   $0x0,-0x198(%rbp)\n  20:\t00 \n  21:\t75 12                \tjne    35 <gethostname+0x35>\n  23:\te8 00 00 00 00       \tcallq  28 <gethostname+0x28>\n  28:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  2e:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  33:\teb 6f                \tjmp    a4 <gethostname+0xa4>\n  35:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  3c:\t48 89 c7             \tmov    %rax,%rdi\n  3f:\te8 00 00 00 00       \tcallq  44 <gethostname+0x44>\n  44:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n  47:\t75 07                \tjne    50 <gethostname+0x50>\n  49:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  4e:\teb 54                \tjmp    a4 <gethostname+0xa4>\n  50:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  57:\t48 83 c0 41          \tadd    $0x41,%rax\n  5b:\t48 89 c7             \tmov    %rax,%rdi\n  5e:\te8 00 00 00 00       \tcallq  63 <gethostname+0x63>\n  63:\t48 83 c0 01          \tadd    $0x1,%rax\n  67:\t48 39 85 60 fe ff ff \tcmp    %rax,-0x1a0(%rbp)\n  6e:\t73 12                \tjae    82 <gethostname+0x82>\n  70:\te8 00 00 00 00       \tcallq  75 <gethostname+0x75>\n  75:\tc7 00 16 00 00 00    \tmovl   $0x16,(%rax)\n  7b:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n  80:\teb 22                \tjmp    a4 <gethostname+0xa4>\n  82:\t48 8d 85 70 fe ff ff \tlea    -0x190(%rbp),%rax\n  89:\t48 8d 50 41          \tlea    0x41(%rax),%rdx\n  8d:\t48 8b 85 68 fe ff ff \tmov    -0x198(%rbp),%rax\n  94:\t48 89 d6             \tmov    %rdx,%rsi\n  97:\t48 89 c7             \tmov    %rax,%rdi\n  9a:\te8 00 00 00 00       \tcallq  9f <gethostname+0x9f>\n  9f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  a4:\tc9                   \tleaveq \n  a5:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall gethostname(char *a1, size_t a2) {\n  __int64 result;\n  struct utsname <span class=\"supfact\">name</span>;\n  if (a1) {\n    if (uname(&<span class=\"supfact\">name</span>) == Number) {\n      result = Number;\n    } else if (a2 >= strlen(<span class=\"supfact\">name</span>.nodename) + Number) {\n      strcpy(a1, <span class=\"supfact\">name</span>.nodename);\n      result = Number L;\n    } else {\n      *_errno_location() = Number;\n      result = Number;\n    }\n  } else {\n    *_errno_location() = Number;\n    result = Number;\n  }\n  return result;\n}", "code_t": "int __cdecl gethostname(char *name, size_t len) {\n  int result;\n  utsname <span class=\"supfact\">uts</span>;\n  if (name) {\n    if (uname(&<span class=\"supfact\">uts</span>) == Number) {\n      result = Number;\n    } else if (len >= strlen(<span class=\"supfact\">uts</span>.nodename) + Number) {\n      strcpy(name, <span class=\"supfact\">uts</span>.nodename);\n      result = Number;\n    } else {\n      *_errno_location() = Number;\n      result = Number;\n    }\n  } else {\n    *_errno_location() = Number;\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "name", "type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] domainname; }", "pred_name": "uts", "ref_name": "uts", "ref_type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] __domainname; }"}], "body_in_train": false}, {"repo_owner": "shishuo365", "repo_name": "ffmpeg-h265", "path": "shishuo365/ffmpeg-h265/7ef08844794cf13186391806d1a3991f1643ad3d4e7d392219097dca3b2bd058", "path_in_repo": "shishuo365/ffmpeg-h265//libavformat/adtsenc.o", "objdump": "0000000000000e1e <adts_decode_extradata>:\n     e1e:\t48 81 ec b8 00 00 00 \tsub    $0xb8,%rsp\n     e25:\t48 89 7c 24 18       \tmov    %rdi,0x18(%rsp)\n     e2a:\t48 89 74 24 10       \tmov    %rsi,0x10(%rsp)\n     e2f:\t48 89 54 24 08       \tmov    %rdx,0x8(%rsp)\n     e34:\t89 4c 24 04          \tmov    %ecx,0x4(%rsp)\n     e38:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n     e3c:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n     e43:\t48 8b 4c 24 08       \tmov    0x8(%rsp),%rcx\n     e48:\t48 8d 84 24 80 00 00 \tlea    0x80(%rsp),%rax\n     e4f:\t00 \n     e50:\t48 89 ce             \tmov    %rcx,%rsi\n     e53:\t48 89 c7             \tmov    %rax,%rdi\n     e56:\te8 53 f3 ff ff       \tcallq  1ae <init_get_bits>\n     e5b:\t8b 44 24 04          \tmov    0x4(%rsp),%eax\n     e5f:\t8d 14 c5 00 00 00 00 \tlea    0x0(,%rax,8),%edx\n     e66:\t48 8b 74 24 08       \tmov    0x8(%rsp),%rsi\n     e6b:\t48 8d 44 24 20       \tlea    0x20(%rsp),%rax\n     e70:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n     e75:\t48 89 c7             \tmov    %rax,%rdi\n     e78:\te8 00 00 00 00       \tcallq  e7d <adts_decode_extradata+0x5f>\n     e7d:\t89 84 24 ac 00 00 00 \tmov    %eax,0xac(%rsp)\n     e84:\t83 bc 24 ac 00 00 00 \tcmpl   $0x0,0xac(%rsp)\n     e8b:\t00 \n     e8c:\t79 0c                \tjns    e9a <adts_decode_extradata+0x7c>\n     e8e:\t8b 84 24 ac 00 00 00 \tmov    0xac(%rsp),%eax\n     e95:\te9 ff 01 00 00       \tjmpq   1099 <adts_decode_extradata+0x27b>\n     e9a:\t8b 94 24 ac 00 00 00 \tmov    0xac(%rsp),%edx\n     ea1:\t48 8d 84 24 80 00 00 \tlea    0x80(%rsp),%rax\n     ea8:\t00 \n     ea9:\t89 d6                \tmov    %edx,%esi\n     eab:\t48 89 c7             \tmov    %rax,%rdi\n     eae:\te8 7f f1 ff ff       \tcallq  32 <skip_bits_long>\n     eb3:\t8b 44 24 20          \tmov    0x20(%rsp),%eax\n     eb7:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n     eba:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     ebf:\t89 50 0c             \tmov    %edx,0xc(%rax)\n     ec2:\t8b 54 24 24          \tmov    0x24(%rsp),%edx\n     ec6:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     ecb:\t89 50 10             \tmov    %edx,0x10(%rax)\n     ece:\t8b 54 24 2c          \tmov    0x2c(%rsp),%edx\n     ed2:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     ed7:\t89 50 14             \tmov    %edx,0x14(%rax)\n     eda:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     edf:\t8b 40 0c             \tmov    0xc(%rax),%eax\n     ee2:\t83 f8 03             \tcmp    $0x3,%eax\n     ee5:\t76 33                \tjbe    f1a <adts_decode_extradata+0xfc>\n     ee7:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     eec:\t8b 40 0c             \tmov    0xc(%rax),%eax\n     eef:\t8d 50 01             \tlea    0x1(%rax),%edx\n     ef2:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     ef7:\t89 d1                \tmov    %edx,%ecx\n     ef9:\tba 00 00 00 00       \tmov    $0x0,%edx\n     efe:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     f03:\t48 89 c7             \tmov    %rax,%rdi\n     f06:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f0b:\te8 00 00 00 00       \tcallq  f10 <adts_decode_extradata+0xf2>\n     f10:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n     f15:\te9 7f 01 00 00       \tjmpq   1099 <adts_decode_extradata+0x27b>\n     f1a:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n     f1f:\t8b 40 10             \tmov    0x10(%rax),%eax\n     f22:\t83 f8 0f             \tcmp    $0xf,%eax\n     f25:\t75 26                \tjne    f4d <adts_decode_extradata+0x12f>\n     f27:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     f2c:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f31:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     f36:\t48 89 c7             \tmov    %rax,%rdi\n     f39:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f3e:\te8 00 00 00 00       \tcallq  f43 <adts_decode_extradata+0x125>\n     f43:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n     f48:\te9 4c 01 00 00       \tjmpq   1099 <adts_decode_extradata+0x27b>\n     f4d:\t48 8d 84 24 80 00 00 \tlea    0x80(%rsp),%rax\n     f54:\t00 \n     f55:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     f5a:\t48 89 c7             \tmov    %rax,%rdi\n     f5d:\te8 3f f1 ff ff       \tcallq  a1 <get_bits>\n     f62:\t85 c0                \ttest   %eax,%eax\n     f64:\t74 26                \tje     f8c <adts_decode_extradata+0x16e>\n     f66:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     f6b:\tba 00 00 00 00       \tmov    $0x0,%edx\n     f70:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     f75:\t48 89 c7             \tmov    %rax,%rdi\n     f78:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     f7d:\te8 00 00 00 00       \tcallq  f82 <adts_decode_extradata+0x164>\n     f82:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n     f87:\te9 0d 01 00 00       \tjmpq   1099 <adts_decode_extradata+0x27b>\n     f8c:\t48 8d 84 24 80 00 00 \tlea    0x80(%rsp),%rax\n     f93:\t00 \n     f94:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     f99:\t48 89 c7             \tmov    %rax,%rdi\n     f9c:\te8 00 f1 ff ff       \tcallq  a1 <get_bits>\n     fa1:\t85 c0                \ttest   %eax,%eax\n     fa3:\t74 26                \tje     fcb <adts_decode_extradata+0x1ad>\n     fa5:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     faa:\tba 00 00 00 00       \tmov    $0x0,%edx\n     faf:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     fb4:\t48 89 c7             \tmov    %rax,%rdi\n     fb7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     fbc:\te8 00 00 00 00       \tcallq  fc1 <adts_decode_extradata+0x1a3>\n     fc1:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n     fc6:\te9 ce 00 00 00       \tjmpq   1099 <adts_decode_extradata+0x27b>\n     fcb:\t48 8d 84 24 80 00 00 \tlea    0x80(%rsp),%rax\n     fd2:\t00 \n     fd3:\tbe 01 00 00 00       \tmov    $0x1,%esi\n     fd8:\t48 89 c7             \tmov    %rax,%rdi\n     fdb:\te8 c1 f0 ff ff       \tcallq  a1 <get_bits>\n     fe0:\t85 c0                \ttest   %eax,%eax\n     fe2:\t74 26                \tje     100a <adts_decode_extradata+0x1ec>\n     fe4:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n     fe9:\tba 00 00 00 00       \tmov    $0x0,%edx\n     fee:\tbe 10 00 00 00       \tmov    $0x10,%esi\n     ff3:\t48 89 c7             \tmov    %rax,%rdi\n     ff6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     ffb:\te8 00 00 00 00       \tcallq  1000 <adts_decode_extradata+0x1e2>\n    1000:\tb8 b7 b1 bb be       \tmov    $0xbebbb1b7,%eax\n    1005:\te9 8f 00 00 00       \tjmpq   1099 <adts_decode_extradata+0x27b>\n    100a:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    100f:\t8b 40 14             \tmov    0x14(%rax),%eax\n    1012:\t85 c0                \ttest   %eax,%eax\n    1014:\t75 72                \tjne    1088 <adts_decode_extradata+0x26a>\n    1016:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    101b:\t48 8d 48 24          \tlea    0x24(%rax),%rcx\n    101f:\t48 8d 44 24 50       \tlea    0x50(%rsp),%rax\n    1024:\tba 40 01 00 00       \tmov    $0x140,%edx\n    1029:\t48 89 ce             \tmov    %rcx,%rsi\n    102c:\t48 89 c7             \tmov    %rax,%rdi\n    102f:\te8 72 f2 ff ff       \tcallq  2a6 <init_put_bits>\n    1034:\t48 8d 44 24 50       \tlea    0x50(%rsp),%rax\n    1039:\tba 05 00 00 00       \tmov    $0x5,%edx\n    103e:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    1043:\t48 89 c7             \tmov    %rax,%rdi\n    1046:\te8 16 f4 ff ff       \tcallq  461 <put_bits>\n    104b:\t48 8d 94 24 80 00 00 \tlea    0x80(%rsp),%rdx\n    1052:\t00 \n    1053:\t48 8d 44 24 50       \tlea    0x50(%rsp),%rax\n    1058:\t48 89 d6             \tmov    %rdx,%rsi\n    105b:\t48 89 c7             \tmov    %rax,%rdi\n    105e:\te8 3f f6 ff ff       \tcallq  6a2 <ff_copy_pce_data>\n    1063:\t83 c0 03             \tadd    $0x3,%eax\n    1066:\t8d 50 07             \tlea    0x7(%rax),%edx\n    1069:\t85 c0                \ttest   %eax,%eax\n    106b:\t0f 48 c2             \tcmovs  %edx,%eax\n    106e:\tc1 f8 03             \tsar    $0x3,%eax\n    1071:\t89 c2                \tmov    %eax,%edx\n    1073:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    1078:\t89 50 18             \tmov    %edx,0x18(%rax)\n    107b:\t48 8d 44 24 50       \tlea    0x50(%rsp),%rax\n    1080:\t48 89 c7             \tmov    %rax,%rdi\n    1083:\te8 e0 f2 ff ff       \tcallq  368 <flush_put_bits>\n    1088:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    108d:\tc7 40 08 01 00 00 00 \tmovl   $0x1,0x8(%rax)\n    1094:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1099:\t48 81 c4 b8 00 00 00 \tadd    $0xb8,%rsp\n    10a0:\tc3                   \tretq   ", "code_s": "__int64 __fastcall adts_decode_extradata(__int64 a1, _DWORD *a2, __int64 a3,\n                                         int a4) {\n  __int64 result;\n  int <span class=\"supfact\">v7</span>[Number];\n  int <span class=\"supfact\">v8</span>[Number];\n  char <span class=\"supfact\">v9</span>[Number];\n  int v10;\n  init_get_bits((__int64)<span class=\"supfact\">v9</span>, a3, Number * a4);\n  v10 = avpriv_mpeg4audio_get_config(<span class=\"supfact\">v7</span>, a3,\n                                     (unsigned int)(Number * a4), Number L);\n  if (v10 < Number)\n    return (unsigned int)v10;\n  skip_bits_long((__int64)<span class=\"supfact\">v9</span>, v10);\n  a2[Number] = <span class=\"supfact\">v7</span>[Number] - Number;\n  a2[Number] = <span class=\"supfact\">v7</span>[Number];\n  a2[Number] = <span class=\"supfact\">v7</span>[Number];\n  if (a2[Number] <= Number) {\n    if (a2[Number] == Number) {\n      av_log(a1, Number L, String);\n      result = Number L;\n    } else if ((unsigned int)get_bits((__int64)<span class=\"supfact\">v9</span>, Number)) {\n      av_log(a1, Number L, String);\n      result = Number L;\n    } else if ((unsigned int)get_bits((__int64)<span class=\"supfact\">v9</span>, Number)) {\n      av_log(a1, Number L, String);\n      result = Number L;\n    } else if ((unsigned int)get_bits((__int64)<span class=\"supfact\">v9</span>, Number)) {\n      av_log(a1, Number L, String);\n      result = Number L;\n    } else {\n      if (!a2[Number]) {\n        init_put_bits((__int64)<span class=\"supfact\">v8</span>, (__int64)(a2 + Number),\n                      Number);\n        put_bits(<span class=\"supfact\">v8</span>, Number, Number);\n        a2[Number] = (int)(ff_copy_pce_data(<span class=\"supfact\">v8</span>,\n                                            (__int64)<span class=\"supfact\">v9</span>) +\n                           Number) /\n                     Number;\n        flush_put_bits((__int64)<span class=\"supfact\">v8</span>);\n      }\n      a2[Number] = Number;\n      result = Number L;\n    }\n  } else {\n    av_log(a1, Number L, String, (unsigned int)(a2[Number] + Number));\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl adts_decode_extradata(AVFormatContext_0 *s, ADTSContext_0 *adts,\n                                  const uint8_t *buf, int size) {\n  int result;\n  MPEG4AudioConfig_0 <span class=\"supfact\">m4ac</span>;\n  PutBitContext_0 <span class=\"supfact\">pb</span>;\n  GetBitContext_0 <span class=\"supfact\">gb</span>;\n  int off;\n  init_get_bits(&<span class=\"supfact\">gb</span>, buf, Number * size);\n  off = avpriv_mpeg4audio_get_config(&<span class=\"supfact\">m4ac</span>, buf,\n                                     (unsigned int)(Number * size), Number L);\n  if (off < Number)\n    return off;\n  skip_bits_long(&<span class=\"supfact\">gb</span>, off);\n  adts->objecttype = <span class=\"supfact\">m4ac</span>.object_type - Number;\n  adts->sample_rate_index = <span class=\"supfact\">m4ac</span>.sampling_index;\n  adts->channel_conf = <span class=\"supfact\">m4ac</span>.chan_config;\n  if (adts->objecttype <= Number) {\n    if (adts->sample_rate_index == Number) {\n      av_log(s, Number L, String);\n      result = Number;\n    } else if (get_bits(&<span class=\"supfact\">gb</span>, Number)) {\n      av_log(s, Number L, String);\n      result = Number;\n    } else if (get_bits(&<span class=\"supfact\">gb</span>, Number)) {\n      av_log(s, Number L, String);\n      result = Number;\n    } else if (get_bits(&<span class=\"supfact\">gb</span>, Number)) {\n      av_log(s, Number L, String);\n      result = Number;\n    } else {\n      if (!adts->channel_conf) {\n        init_put_bits(&<span class=\"supfact\">pb</span>, adts->pce_data, Number);\n        put_bits(&<span class=\"supfact\">pb</span>, Number, Number);\n        adts->pce_size =\n            (ff_copy_pce_data(&<span class=\"supfact\">pb</span>, &<span class=\"supfact\">gb</span>) +\n             Number) /\n            Number;\n        flush_put_bits(&<span class=\"supfact\">pb</span>);\n      }\n      adts->write_adts = Number;\n      result = Number;\n    }\n  } else {\n    av_log(s, Number L, String, (unsigned int)(adts->objecttype + Number));\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "v7", "type": "struct MPEG4AudioConfig_0 { int object_type; int sampling_index; int sample_rate; int chan_config; int sbr; int ext_object_type; int ext_sampling_index; int ext_sample_rate; int ext_chan_config; int channels; int ps; int frame_length_short; }", "pred_name": "m4ac", "ref_name": "m4ac", "ref_type": "struct MPEG4AudioConfig_0 { int object_type; int sampling_index; int sample_rate; int chan_config; int sbr; int ext_object_type; int ext_sampling_index; int ext_sample_rate; int ext_chan_config; int channels; int ps; int frame_length_short; }"}, {"name": "v8", "type": "struct PutBitContext_0 { uint32_t bit_buf; int bit_left; uint8_t * buf; uint8_t * buf_ptr; uint8_t * buf_end; int size_in_bits; PADDING (4); }", "pred_name": "pb", "ref_name": "pb", "ref_type": "struct PutBitContext_0 { uint32_t bit_buf; int bit_left; uint8_t * buf; uint8_t * buf_ptr; uint8_t * buf_end; int size_in_bits; PADDING (4); }"}, {"name": "v9", "type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }", "pred_name": "gb", "ref_name": "gb", "ref_type": "struct GetBitContext_0 { const uint8_t * buffer; const uint8_t * buffer_end; int index; int size_in_bits; int size_in_bits_plus8; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/72d863e358d23a9787e1d769e3a76917875ec295a59ff580baf5a03eba41f638", "path_in_repo": "ftnapps/pkg-sbbs/src/uifc/gcc.linux.exe.debug/uifctest", "objdump": "0000000000413247 <mouse_trywait>:\n  413247:\t55                   \tpush   %rbp\n  413248:\t48 89 e5             \tmov    %rsp,%rbp\n  41324b:\t48 83 ec 20          \tsub    $0x20,%rsp\n  41324f:\teb 79                \tjmp    4132ca <mouse_trywait+0x83>\n  413251:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  413258:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41325b:\t48 63 d0             \tmovslq %eax,%rdx\n  41325e:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  413265:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  413269:\tc1 fa 06             \tsar    $0x6,%edx\n  41326c:\tc1 f8 1f             \tsar    $0x1f,%eax\n  41326f:\t29 c2                \tsub    %eax,%edx\n  413271:\t89 d0                \tmov    %edx,%eax\n  413273:\t48 98                \tcltq   \n  413275:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  413279:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  41327c:\t48 63 d0             \tmovslq %eax,%rdx\n  41327f:\t48 69 d2 d3 4d 62 10 \timul   $0x10624dd3,%rdx,%rdx\n  413286:\t48 c1 ea 20          \tshr    $0x20,%rdx\n  41328a:\t89 d1                \tmov    %edx,%ecx\n  41328c:\tc1 f9 06             \tsar    $0x6,%ecx\n  41328f:\t99                   \tcltd   \n  413290:\t29 d1                \tsub    %edx,%ecx\n  413292:\t89 ca                \tmov    %ecx,%edx\n  413294:\t69 d2 e8 03 00 00    \timul   $0x3e8,%edx,%edx\n  41329a:\t29 d0                \tsub    %edx,%eax\n  41329c:\t89 c2                \tmov    %eax,%edx\n  41329e:\t69 c2 e8 03 00 00    \timul   $0x3e8,%edx,%eax\n  4132a4:\t48 98                \tcltq   \n  4132a6:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n  4132aa:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  4132ae:\t49 89 c0             \tmov    %rax,%r8\n  4132b1:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n  4132b6:\tba 00 00 00 00       \tmov    $0x0,%edx\n  4132bb:\tbe 00 00 00 00       \tmov    $0x0,%esi\n  4132c0:\tbf 00 00 00 00       \tmov    $0x0,%edi\n  4132c5:\te8 96 fe fe ff       \tcallq  403160 <select@plt>\n  4132ca:\t8b 05 e0 72 05 00    \tmov    0x572e0(%rip),%eax        # 46a5b0 <ciolib_mouse_initialized>\n  4132d0:\t85 c0                \ttest   %eax,%eax\n  4132d2:\t0f 84 79 ff ff ff    \tje     413251 <mouse_trywait+0xa>\n  4132d8:\tbf 40 dc 46 00       \tmov    $0x46dc40,%edi\n  4132dd:\te8 92 a0 00 00       \tcallq  41d374 <listSemTryWait>\n  4132e2:\tc9                   \tleaveq \n  4132e3:\tc3                   \tretq   ", "code_s": "__int64 mouse_trywait() {\n  struct timeval <span class=\"supfact\">timeout</span>;\n  int v2;\n  while (!ciolib_mouse_initialized) {\n    v2 = Number;\n    <span class=\"supfact\">timeout</span>.tv_sec = Number L;\n    <span class=\"supfact\">timeout</span>.tv_usec = Number L;\n    select(Number, Number L, Number L, Number L, &<span class=\"supfact\">timeout</span>);\n  }\n  return listSemTryWait(&unk_46DC40);\n}", "code_t": "int __cdecl mouse_trywait() {\n  timeval <span class=\"supfact\">tv</span>;\n  int sleep_msecs;\n  while (!ciolib_mouse_initialized) {\n    sleep_msecs = Number;\n    <span class=\"supfact\">tv</span>.tv_sec = Number L;\n    <span class=\"supfact\">tv</span>.tv_usec = Number L;\n    select(Number, Number L, Number L, Number L, &<span class=\"supfact\">tv</span>);\n  }\n  return listSemTryWait(&state.output);\n}", "var": [{"name": "timeout", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "tv", "ref_name": "tv", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "tcdog001", "repo_name": "autelan", "path": "tcdog001/autelan/3be2125b022a3452f37ed12e48396e4eda7d2f872e9cde26c6ee5b43af366b3a", "path_in_repo": "tcdog001/autelan/rootfs/dropbear-2014.65/libtommath/bn_mp_n_root.o", "objdump": "0000000000000000 <mp_n_root>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 c4 80          \tadd    $0xffffffffffffff80,%rsp\n   8:\t48 89 7d 98          \tmov    %rdi,-0x68(%rbp)\n   c:\t48 89 75 90          \tmov    %rsi,-0x70(%rbp)\n  10:\t48 89 55 88          \tmov    %rdx,-0x78(%rbp)\n  14:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  18:\t83 e0 01             \tand    $0x1,%eax\n  1b:\t48 85 c0             \ttest   %rax,%rax\n  1e:\t75 16                \tjne    36 <mp_n_root+0x36>\n  20:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  24:\t8b 40 08             \tmov    0x8(%rax),%eax\n  27:\t83 f8 01             \tcmp    $0x1,%eax\n  2a:\t75 0a                \tjne    36 <mp_n_root+0x36>\n  2c:\tb8 fd ff ff ff       \tmov    $0xfffffffd,%eax\n  31:\te9 5d 02 00 00       \tjmpq   293 <mp_n_root+0x293>\n  36:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  3a:\t48 89 c7             \tmov    %rax,%rdi\n  3d:\te8 00 00 00 00       \tcallq  42 <mp_n_root+0x42>\n  42:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  45:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  49:\t74 08                \tje     53 <mp_n_root+0x53>\n  4b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  4e:\te9 40 02 00 00       \tjmpq   293 <mp_n_root+0x293>\n  53:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  57:\t48 89 c7             \tmov    %rax,%rdi\n  5a:\te8 00 00 00 00       \tcallq  5f <mp_n_root+0x5f>\n  5f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  62:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  66:\t0f 85 17 02 00 00    \tjne    283 <mp_n_root+0x283>\n  6c:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  70:\t48 89 c7             \tmov    %rax,%rdi\n  73:\te8 00 00 00 00       \tcallq  78 <mp_n_root+0x78>\n  78:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  7b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  7f:\t0f 85 ef 01 00 00    \tjne    274 <mp_n_root+0x274>\n  85:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  89:\t8b 40 08             \tmov    0x8(%rax),%eax\n  8c:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  8f:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n  93:\tc7 40 08 00 00 00 00 \tmovl   $0x0,0x8(%rax)\n  9a:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  9e:\tbe 02 00 00 00       \tmov    $0x2,%esi\n  a3:\t48 89 c7             \tmov    %rax,%rdi\n  a6:\te8 00 00 00 00       \tcallq  ab <mp_n_root+0xab>\n  ab:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n  af:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n  b3:\t48 89 d6             \tmov    %rdx,%rsi\n  b6:\t48 89 c7             \tmov    %rax,%rdi\n  b9:\te8 00 00 00 00       \tcallq  be <mp_n_root+0xbe>\n  be:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  c1:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  c5:\t0f 85 82 01 00 00    \tjne    24d <mp_n_root+0x24d>\n  cb:\t48 8b 45 90          \tmov    -0x70(%rbp),%rax\n  cf:\t48 8d 48 ff          \tlea    -0x1(%rax),%rcx\n  d3:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n  d7:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n  db:\t48 89 ce             \tmov    %rcx,%rsi\n  de:\t48 89 c7             \tmov    %rax,%rdi\n  e1:\te8 00 00 00 00       \tcallq  e6 <mp_n_root+0xe6>\n  e6:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  e9:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n  ed:\t0f 85 5d 01 00 00    \tjne    250 <mp_n_root+0x250>\n  f3:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  f7:\t48 8d 4d e0          \tlea    -0x20(%rbp),%rcx\n  fb:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n  ff:\t48 89 ce             \tmov    %rcx,%rsi\n 102:\t48 89 c7             \tmov    %rax,%rdi\n 105:\te8 00 00 00 00       \tcallq  10a <mp_n_root+0x10a>\n 10a:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 10d:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 111:\t0f 85 3c 01 00 00    \tjne    253 <mp_n_root+0x253>\n 117:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 11b:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n 11f:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 123:\t48 89 ce             \tmov    %rcx,%rsi\n 126:\t48 89 c7             \tmov    %rax,%rdi\n 129:\te8 00 00 00 00       \tcallq  12e <mp_n_root+0x12e>\n 12e:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 131:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 135:\t0f 85 1b 01 00 00    \tjne    256 <mp_n_root+0x256>\n 13b:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n 13f:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n 143:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 147:\t48 89 ce             \tmov    %rcx,%rsi\n 14a:\t48 89 c7             \tmov    %rax,%rdi\n 14d:\te8 00 00 00 00       \tcallq  152 <mp_n_root+0x152>\n 152:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 155:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 159:\t0f 85 fa 00 00 00    \tjne    259 <mp_n_root+0x259>\n 15f:\t48 8d 55 a0          \tlea    -0x60(%rbp),%rdx\n 163:\t48 8d 75 a0          \tlea    -0x60(%rbp),%rsi\n 167:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 16b:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 170:\t48 89 c7             \tmov    %rax,%rdi\n 173:\te8 00 00 00 00       \tcallq  178 <mp_n_root+0x178>\n 178:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 17b:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 17f:\t0f 85 d7 00 00 00    \tjne    25c <mp_n_root+0x25c>\n 185:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 189:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n 18d:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 191:\t48 89 ce             \tmov    %rcx,%rsi\n 194:\t48 89 c7             \tmov    %rax,%rdi\n 197:\te8 00 00 00 00       \tcallq  19c <mp_n_root+0x19c>\n 19c:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 19f:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 1a3:\t0f 85 b6 00 00 00    \tjne    25f <mp_n_root+0x25f>\n 1a9:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 1ad:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 1b1:\t48 89 d6             \tmov    %rdx,%rsi\n 1b4:\t48 89 c7             \tmov    %rax,%rdi\n 1b7:\te8 00 00 00 00       \tcallq  1bc <mp_n_root+0x1bc>\n 1bc:\t85 c0                \ttest   %eax,%eax\n 1be:\t0f 85 e7 fe ff ff    \tjne    ab <mp_n_root+0xab>\n 1c4:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n 1c8:\t48 8b 4d 90          \tmov    -0x70(%rbp),%rcx\n 1cc:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 1d0:\t48 89 ce             \tmov    %rcx,%rsi\n 1d3:\t48 89 c7             \tmov    %rax,%rdi\n 1d6:\te8 00 00 00 00       \tcallq  1db <mp_n_root+0x1db>\n 1db:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 1de:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 1e2:\t75 7e                \tjne    262 <mp_n_root+0x262>\n 1e4:\t48 8b 55 98          \tmov    -0x68(%rbp),%rdx\n 1e8:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 1ec:\t48 89 d6             \tmov    %rdx,%rsi\n 1ef:\t48 89 c7             \tmov    %rax,%rdi\n 1f2:\te8 00 00 00 00       \tcallq  1f7 <mp_n_root+0x1f7>\n 1f7:\t83 f8 01             \tcmp    $0x1,%eax\n 1fa:\t75 20                \tjne    21c <mp_n_root+0x21c>\n 1fc:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 200:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 204:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 209:\t48 89 c7             \tmov    %rax,%rdi\n 20c:\te8 00 00 00 00       \tcallq  211 <mp_n_root+0x211>\n 211:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n 214:\t83 7d fc 00          \tcmpl   $0x0,-0x4(%rbp)\n 218:\t75 4b                \tjne    265 <mp_n_root+0x265>\n 21a:\teb a8                \tjmp    1c4 <mp_n_root+0x1c4>\n 21c:\t90                   \tnop\n 21d:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n 221:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n 224:\t89 50 08             \tmov    %edx,0x8(%rax)\n 227:\t48 8b 55 88          \tmov    -0x78(%rbp),%rdx\n 22b:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 22f:\t48 89 d6             \tmov    %rdx,%rsi\n 232:\t48 89 c7             \tmov    %rax,%rdi\n 235:\te8 00 00 00 00       \tcallq  23a <mp_n_root+0x23a>\n 23a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n 23e:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n 241:\t89 50 08             \tmov    %edx,0x8(%rax)\n 244:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n 24b:\teb 19                \tjmp    266 <mp_n_root+0x266>\n 24d:\t90                   \tnop\n 24e:\teb 16                \tjmp    266 <mp_n_root+0x266>\n 250:\t90                   \tnop\n 251:\teb 13                \tjmp    266 <mp_n_root+0x266>\n 253:\t90                   \tnop\n 254:\teb 10                \tjmp    266 <mp_n_root+0x266>\n 256:\t90                   \tnop\n 257:\teb 0d                \tjmp    266 <mp_n_root+0x266>\n 259:\t90                   \tnop\n 25a:\teb 0a                \tjmp    266 <mp_n_root+0x266>\n 25c:\t90                   \tnop\n 25d:\teb 07                \tjmp    266 <mp_n_root+0x266>\n 25f:\t90                   \tnop\n 260:\teb 04                \tjmp    266 <mp_n_root+0x266>\n 262:\t90                   \tnop\n 263:\teb 01                \tjmp    266 <mp_n_root+0x266>\n 265:\t90                   \tnop\n 266:\t48 8d 45 a0          \tlea    -0x60(%rbp),%rax\n 26a:\t48 89 c7             \tmov    %rax,%rdi\n 26d:\te8 00 00 00 00       \tcallq  272 <mp_n_root+0x272>\n 272:\teb 01                \tjmp    275 <mp_n_root+0x275>\n 274:\t90                   \tnop\n 275:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n 279:\t48 89 c7             \tmov    %rax,%rdi\n 27c:\te8 00 00 00 00       \tcallq  281 <mp_n_root+0x281>\n 281:\teb 01                \tjmp    284 <mp_n_root+0x284>\n 283:\t90                   \tnop\n 284:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 288:\t48 89 c7             \tmov    %rax,%rdi\n 28b:\te8 00 00 00 00       \tcallq  290 <mp_n_root+0x290>\n 290:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n 293:\tc9                   \tleaveq \n 294:\tc3                   \tretq   \n", "code_s": "__int64 __fastcall mp_n_root(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v5</span>[Number];\n  char <span class=\"supfact\">v6</span>[Number];\n  char <span class=\"supfact\">v7</span>[Number];\n  int v8;\n  unsigned int v9;\n  if ((a2 & Number) == Number && *(_DWORD *)(a1 + Number) == Number)\n    return Number L;\n  v9 = mp_init(<span class=\"supfact\">v7</span>);\n  if (v9)\n    return v9;\n  v9 = mp_init(<span class=\"supfact\">v6</span>);\n  if (!v9) {\n    v9 = mp_init(<span class=\"supfact\">v5</span>);\n    if (!v9) {\n      v8 = *(_DWORD *)(a1 + Number);\n      *(_DWORD *)(a1 + Number) = Number;\n      mp_set(<span class=\"supfact\">v6</span>, Number L);\n      while (Number) {\n        v9 = mp_copy(<span class=\"supfact\">v6</span>, <span class=\"supfact\">v7</span>);\n        if (v9)\n          break;\n        v9 = mp_expt_d(<span class=\"supfact\">v7</span>, a2 - Number, <span class=\"supfact\">v5</span>);\n        if (v9)\n          break;\n        v9 = mp_mul(<span class=\"supfact\">v5</span>, <span class=\"supfact\">v7</span>, <span class=\"supfact\">v6</span>);\n        if (v9)\n          break;\n        v9 = mp_sub(<span class=\"supfact\">v6</span>, a1, <span class=\"supfact\">v6</span>);\n        if (v9)\n          break;\n        v9 = mp_mul_d(<span class=\"supfact\">v5</span>, a2, <span class=\"supfact\">v5</span>);\n        if (v9)\n          break;\n        v9 = mp_div(<span class=\"supfact\">v6</span>, <span class=\"supfact\">v5</span>, <span class=\"supfact\">v5</span>,\n                    Number L);\n        if (v9)\n          break;\n        v9 = mp_sub(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v5</span>, <span class=\"supfact\">v6</span>);\n        if (v9)\n          break;\n        if (!(unsigned int)mp_cmp(<span class=\"supfact\">v7</span>, <span class=\"supfact\">v6</span>)) {\n          while (Number) {\n            v9 = mp_expt_d(<span class=\"supfact\">v7</span>, a2, <span class=\"supfact\">v6</span>);\n            if (v9)\n              goto LABEL_22;\n            if ((unsigned int)mp_cmp(<span class=\"supfact\">v6</span>, a1) != Number) {\n              *(_DWORD *)(a1 + Number) = v8;\n              mp_exch(<span class=\"supfact\">v7</span>, a3);\n              *(_DWORD *)(a3 + Number) = v8;\n              v9 = Number;\n              goto LABEL_22;\n            }\n            v9 = mp_sub_d(<span class=\"supfact\">v7</span>, Number L, <span class=\"supfact\">v7</span>);\n            if (v9)\n              goto LABEL_22;\n          }\n        }\n      }\n    LABEL_22:\n      mp_clear(<span class=\"supfact\">v5</span>);\n    }\n    mp_clear(<span class=\"supfact\">v6</span>);\n  }\n  mp_clear(<span class=\"supfact\">v7</span>);\n  return v9;\n}", "code_t": "int __cdecl mp_n_root(mp_int *a, mp_digit b, mp_int *c) {\n  mp_int <span class=\"supfact\">t3</span>;\n  mp_int <span class=\"supfact\">t2</span>;\n  mp_int <span class=\"supfact\">t1</span>;\n  int neg;\n  int res;\n  if ((b & Number) == Number && a->sign == Number)\n    return Number;\n  res = mp_init(&<span class=\"supfact\">t1</span>);\n  if (res)\n    return res;\n  res = mp_init(&<span class=\"supfact\">t2</span>);\n  if (!res) {\n    res = mp_init(&<span class=\"supfact\">t3</span>);\n    if (!res) {\n      neg = a->sign;\n      a->sign = Number;\n      mp_set(&<span class=\"supfact\">t2</span>, Number L);\n      while (Number) {\n        res = mp_copy(&<span class=\"supfact\">t2</span>, &<span class=\"supfact\">t1</span>);\n        if (res)\n          break;\n        res = mp_expt_d(&<span class=\"supfact\">t1</span>, b - Number, &<span class=\"supfact\">t3</span>);\n        if (res)\n          break;\n        res = mp_mul(&<span class=\"supfact\">t3</span>, &<span class=\"supfact\">t1</span>,\n                     &<span class=\"supfact\">t2</span>);\n        if (res)\n          break;\n        res = mp_sub(&<span class=\"supfact\">t2</span>, a, &<span class=\"supfact\">t2</span>);\n        if (res)\n          break;\n        res = mp_mul_d(&<span class=\"supfact\">t3</span>, b, &<span class=\"supfact\">t3</span>);\n        if (res)\n          break;\n        res = mp_div(&<span class=\"supfact\">t2</span>, &<span class=\"supfact\">t3</span>,\n                     &<span class=\"supfact\">t3</span>, Number L);\n        if (res)\n          break;\n        res = mp_sub(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t3</span>,\n                     &<span class=\"supfact\">t2</span>);\n        if (res)\n          break;\n        if (!(unsigned int)mp_cmp(&<span class=\"supfact\">t1</span>, &<span class=\"supfact\">t2</span>)) {\n          while (Number) {\n            res = mp_expt_d(&<span class=\"supfact\">t1</span>, b, &<span class=\"supfact\">t2</span>);\n            if (res)\n              goto LBL_T3;\n            if ((unsigned int)mp_cmp(&<span class=\"supfact\">t2</span>, a) != Number) {\n              a->sign = neg;\n              mp_exch(&<span class=\"supfact\">t1</span>, c);\n              c->sign = neg;\n              res = Number;\n              goto LBL_T3;\n            }\n            res = mp_sub_d(&<span class=\"supfact\">t1</span>, Number L, &<span class=\"supfact\">t1</span>);\n            if (res)\n              goto LBL_T3;\n          }\n        }\n      }\n    LBL_T3:\n      mp_clear(&<span class=\"supfact\">t3</span>);\n    }\n    mp_clear(&<span class=\"supfact\">t2</span>);\n  }\n  mp_clear(&<span class=\"supfact\">t1</span>);\n  return res;\n}", "var": [{"name": "v5", "type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }", "pred_name": "t", "ref_name": "t3", "ref_type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }"}, {"name": "v6", "type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }", "pred_name": "ta", "ref_name": "t2", "ref_type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }"}, {"name": "v7", "type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }", "pred_name": "tb", "ref_name": "t1", "ref_type": "struct mp_int { int used; int alloc; int sign; PADDING (4); mp_digit * dp; }"}], "body_in_train": false}, {"repo_owner": "hustustor", "repo_name": "simplecfs", "path": "hustustor/simplecfs/65b632cfdad7c593431f2762ea99706d07a28165e30b50ab401283c30f9af961", "path_in_repo": "hustustor/simplecfs//ext/gf-complete/src/gf_w4.o", "objdump": "0000000000000418 <gf_w4_multiply_region_from_single>:\n     418:\t55                   \tpush   %rbp\n     419:\t48 89 e5             \tmov    %rsp,%rbp\n     41c:\t53                   \tpush   %rbx\n     41d:\t48 81 ec 98 00 00 00 \tsub    $0x98,%rsp\n     424:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n     428:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n     42c:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n     433:\t89 8d 74 ff ff ff    \tmov    %ecx,-0x8c(%rbp)\n     439:\t44 89 85 70 ff ff ff \tmov    %r8d,-0x90(%rbp)\n     440:\t44 89 8d 6c ff ff ff \tmov    %r9d,-0x94(%rbp)\n     447:\t83 bd 74 ff ff ff 00 \tcmpl   $0x0,-0x8c(%rbp)\n     44e:\t75 22                \tjne    472 <gf_w4_multiply_region_from_single+0x5a>\n     450:\t8b 95 6c ff ff ff    \tmov    -0x94(%rbp),%edx\n     456:\t8b 8d 70 ff ff ff    \tmov    -0x90(%rbp),%ecx\n     45c:\t48 8b 85 78 ff ff ff \tmov    -0x88(%rbp),%rax\n     463:\t89 ce                \tmov    %ecx,%esi\n     465:\t48 89 c7             \tmov    %rax,%rdi\n     468:\te8 00 00 00 00       \tcallq  46d <gf_w4_multiply_region_from_single+0x55>\n     46d:\te9 87 01 00 00       \tjmpq   5f9 <gf_w4_multiply_region_from_single+0x1e1>\n     472:\t83 bd 74 ff ff ff 01 \tcmpl   $0x1,-0x8c(%rbp)\n     479:\t75 24                \tjne    49f <gf_w4_multiply_region_from_single+0x87>\n     47b:\t8b 8d 6c ff ff ff    \tmov    -0x94(%rbp),%ecx\n     481:\t8b 95 70 ff ff ff    \tmov    -0x90(%rbp),%edx\n     487:\t48 8b b5 78 ff ff ff \tmov    -0x88(%rbp),%rsi\n     48e:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n     492:\t48 89 c7             \tmov    %rax,%rdi\n     495:\te8 00 00 00 00       \tcallq  49a <gf_w4_multiply_region_from_single+0x82>\n     49a:\te9 5a 01 00 00       \tjmpq   5f9 <gf_w4_multiply_region_from_single+0x1e1>\n     49f:\t44 8b 8d 74 ff ff ff \tmov    -0x8c(%rbp),%r9d\n     4a6:\t44 8b 85 70 ff ff ff \tmov    -0x90(%rbp),%r8d\n     4ad:\t48 8b 8d 78 ff ff ff \tmov    -0x88(%rbp),%rcx\n     4b4:\t48 8b 55 80          \tmov    -0x80(%rbp),%rdx\n     4b8:\t48 8b 75 88          \tmov    -0x78(%rbp),%rsi\n     4bc:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n     4c0:\t6a 01                \tpushq  $0x1\n     4c2:\t8b bd 6c ff ff ff    \tmov    -0x94(%rbp),%edi\n     4c8:\t57                   \tpush   %rdi\n     4c9:\t48 89 c7             \tmov    %rax,%rdi\n     4cc:\te8 00 00 00 00       \tcallq  4d1 <gf_w4_multiply_region_from_single+0xb9>\n     4d1:\t48 83 c4 10          \tadd    $0x10,%rsp\n     4d5:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n     4d9:\t48 89 c7             \tmov    %rax,%rdi\n     4dc:\te8 00 00 00 00       \tcallq  4e1 <gf_w4_multiply_region_from_single+0xc9>\n     4e1:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     4e5:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     4e9:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     4ed:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     4f1:\t83 bd 6c ff ff ff 00 \tcmpl   $0x0,-0x94(%rbp)\n     4f8:\t0f 84 e5 00 00 00    \tje     5e3 <gf_w4_multiply_region_from_single+0x1cb>\n     4fe:\teb 70                \tjmp    570 <gf_w4_multiply_region_from_single+0x158>\n     500:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     504:\t4c 8b 00             \tmov    (%rax),%r8\n     507:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     50b:\t0f b6 00             \tmovzbl (%rax),%eax\n     50e:\t0f b6 c0             \tmovzbl %al,%eax\n     511:\t83 e0 0f             \tand    $0xf,%eax\n     514:\t89 c2                \tmov    %eax,%edx\n     516:\t8b 8d 74 ff ff ff    \tmov    -0x8c(%rbp),%ecx\n     51c:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     520:\t89 ce                \tmov    %ecx,%esi\n     522:\t48 89 c7             \tmov    %rax,%rdi\n     525:\t41 ff d0             \tcallq  *%r8\n     528:\t89 c3                \tmov    %eax,%ebx\n     52a:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     52e:\t4c 8b 00             \tmov    (%rax),%r8\n     531:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     535:\t0f b6 00             \tmovzbl (%rax),%eax\n     538:\tc0 e8 04             \tshr    $0x4,%al\n     53b:\t0f b6 d0             \tmovzbl %al,%edx\n     53e:\t8b 8d 74 ff ff ff    \tmov    -0x8c(%rbp),%ecx\n     544:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     548:\t89 ce                \tmov    %ecx,%esi\n     54a:\t48 89 c7             \tmov    %rax,%rdi\n     54d:\t41 ff d0             \tcallq  *%r8\n     550:\tc1 e0 04             \tshl    $0x4,%eax\n     553:\t09 c3                \tor     %eax,%ebx\n     555:\t89 da                \tmov    %ebx,%edx\n     557:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     55b:\t0f b6 00             \tmovzbl (%rax),%eax\n     55e:\t31 c2                \txor    %eax,%edx\n     560:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     564:\t88 10                \tmov    %dl,(%rax)\n     566:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n     56b:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n     570:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     574:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n     578:\t72 86                \tjb     500 <gf_w4_multiply_region_from_single+0xe8>\n     57a:\teb 71                \tjmp    5ed <gf_w4_multiply_region_from_single+0x1d5>\n     57c:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     580:\t4c 8b 00             \tmov    (%rax),%r8\n     583:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     587:\t0f b6 00             \tmovzbl (%rax),%eax\n     58a:\t0f b6 c0             \tmovzbl %al,%eax\n     58d:\t83 e0 0f             \tand    $0xf,%eax\n     590:\t89 c2                \tmov    %eax,%edx\n     592:\t8b 8d 74 ff ff ff    \tmov    -0x8c(%rbp),%ecx\n     598:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     59c:\t89 ce                \tmov    %ecx,%esi\n     59e:\t48 89 c7             \tmov    %rax,%rdi\n     5a1:\t41 ff d0             \tcallq  *%r8\n     5a4:\t89 c3                \tmov    %eax,%ebx\n     5a6:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     5aa:\t4c 8b 00             \tmov    (%rax),%r8\n     5ad:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     5b1:\t0f b6 00             \tmovzbl (%rax),%eax\n     5b4:\tc0 e8 04             \tshr    $0x4,%al\n     5b7:\t0f b6 d0             \tmovzbl %al,%edx\n     5ba:\t8b 8d 74 ff ff ff    \tmov    -0x8c(%rbp),%ecx\n     5c0:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n     5c4:\t89 ce                \tmov    %ecx,%esi\n     5c6:\t48 89 c7             \tmov    %rax,%rdi\n     5c9:\t41 ff d0             \tcallq  *%r8\n     5cc:\tc1 e0 04             \tshl    $0x4,%eax\n     5cf:\t09 c3                \tor     %eax,%ebx\n     5d1:\t89 da                \tmov    %ebx,%edx\n     5d3:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n     5d7:\t88 10                \tmov    %dl,(%rax)\n     5d9:\t48 83 45 e0 01       \taddq   $0x1,-0x20(%rbp)\n     5de:\t48 83 45 e8 01       \taddq   $0x1,-0x18(%rbp)\n     5e3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     5e7:\t48 39 45 e0          \tcmp    %rax,-0x20(%rbp)\n     5eb:\t72 8f                \tjb     57c <gf_w4_multiply_region_from_single+0x164>\n     5ed:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n     5f1:\t48 89 c7             \tmov    %rax,%rdi\n     5f4:\te8 00 00 00 00       \tcallq  5f9 <gf_w4_multiply_region_from_single+0x1e1>\n     5f9:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n     5fd:\tc9                   \tleaveq \n     5fe:\tc3                   \tretq   ", "code_s": "__int64 __fastcall gf_w4_multiply_region_from_single(\n    __int64(__fastcall **a1)(_QWORD, _QWORD, _QWORD), __int64 a2, __int64 a3,\n    unsigned int a4, unsigned int a5, unsigned int a6) {\n  int v7;\n  int v8;\n  int v9;\n  int v10;\n  char <span class=\"supfact\">v13</span>[Number];\n  _BYTE *v14;\n  _BYTE *v15;\n  unsigned __int64 v16;\n  _BYTE *v17;\n  _BYTE *v18;\n  if (!a4)\n    return gf_multby_zero(a3, a5, a6);\n  if (a4 == Number)\n    return gf_multby_one(a2, a3, a5, a6);\n  gf_set_region_data(<span class=\"supfact\">v13</span>, a1, a2, a3, a5, a4, a6, Number L);\n  gf_do_initial_region_alignment(<span class=\"supfact\">v13</span>);\n  v18 = v14;\n  v17 = v15;\n  if (a6) {\n    while ((unsigned __int64)v17 < v16) {\n      v7 = (*a1)(a1, a4, *v18 & Number);\n      v8 = (Number * (*a1)(a1, a4, *v18 >> Number)) | v7;\n      *v17++ ^= v8;\n      ++v18;\n    }\n  } else {\n    while ((unsigned __int64)v17 < v16) {\n      v9 = (*a1)(a1, a4, *v18 & Number);\n      v10 = (Number * (*a1)(a1, a4, *v18 >> Number)) | v9;\n      *v17++ = v10;\n      ++v18;\n    }\n  }\n  return gf_do_final_region_alignment(<span class=\"supfact\">v13</span>);\n}", "code_t": "void __cdecl gf_w4_multiply_region_from_single(gf_t *gf, void *src, void *dest,\n                                               gf_val_32_t val, int bytes,\n                                               int xor) {\n  int v6;\n  int v7;\n  int v8;\n  int v9;\n  gf_region_data <span class=\"supfact\">rd</span>;\n  uint8_t *d8;\n  uint8_t *s8;\n  if (val) {\n    if (val == Number) {\n      gf_multby_one(src, dest, (unsigned int)bytes, (unsigned int)xor);\n    } else {\n      gf_set_region_data(&<span class=\"supfact\">rd</span>, gf, src, dest,\n                         (unsigned int)bytes, val, (unsigned int)xor, Number L);\n      gf_do_initial_region_alignment(&<span class=\"supfact\">rd</span>);\n      s8 = (uint8_t *)<span class=\"supfact\">rd</span>.s_start;\n      d8 = (uint8_t *)<span class=\"supfact\">rd</span>.d_start;\n      if (xor) {\n        while (d8 < <span class=\"supfact\">rd</span>.d_top) {\n          v6 = gf->multiply.w32(gf, val, *s8 & Number);\n          v7 = (Number * gf->multiply.w32(gf, val, *s8 >> Number)) | v6;\n          *d8++ ^= v7;\n          ++s8;\n        }\n      } else {\n        while (d8 < <span class=\"supfact\">rd</span>.d_top) {\n          v8 = gf->multiply.w32(gf, val, *s8 & Number);\n          v9 = (Number * gf->multiply.w32(gf, val, *s8 >> Number)) | v8;\n          *d8++ = v9;\n          ++s8;\n        }\n      }\n      gf_do_final_region_alignment(&<span class=\"supfact\">rd</span>);\n    }\n  } else {\n    gf_multby_zero(dest, (unsigned int)bytes, (unsigned int)xor);\n  }\n}", "var": [{"name": "v13", "type": "char[48]", "pred_name": "__unk__", "ref_name": "rd", "ref_type": "struct gf_region_data { gf_t * gf; void * src; void * dest; int bytes; PADDING (4); uint64_t val; int xor; int align; void * s_start; void * d_start; void * s_top; void * d_top; }"}], "body_in_train": false}, {"repo_owner": "Dar13", "repo_name": "OpenMemDB", "path": "Dar13/OpenMemDB/f652a8e8913d63a93adbb5f4dc5a286f4a54baeb0912de7926f3f2c06b1e4428", "path_in_repo": "Dar13/OpenMemDB/database/libomdb/ConsoleDemo/omdb_console", "objdump": "0000000000409b42 <_ZNKSt6vectorIS_IlSaIlEESaIS1_EE5emptyEv>:\n  409b42:\t55                   \tpush   %rbp\n  409b43:\t48 89 e5             \tmov    %rsp,%rbp\n  409b46:\t48 83 ec 20          \tsub    $0x20,%rsp\n  409b4a:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n  409b4e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409b52:\t48 89 c7             \tmov    %rax,%rdi\n  409b55:\te8 ca d2 ff ff       \tcallq  406e24 <_ZNKSt6vectorIS_IlSaIlEESaIS1_EE3endEv>\n  409b5a:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n  409b5e:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n  409b62:\t48 89 c7             \tmov    %rax,%rdi\n  409b65:\te8 8a d2 ff ff       \tcallq  406df4 <_ZNKSt6vectorIS_IlSaIlEESaIS1_EE5beginEv>\n  409b6a:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n  409b6e:\t48 8d 55 f0          \tlea    -0x10(%rbp),%rdx\n  409b72:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  409b76:\t48 89 d6             \tmov    %rdx,%rsi\n  409b79:\t48 89 c7             \tmov    %rax,%rdi\n  409b7c:\te8 85 01 00 00       \tcallq  409d06 <_ZN9__gnu_cxxeqIPKSt6vectorIlSaIlEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>\n  409b81:\tc9                   \tleaveq \n  409b82:\tc3                   \tretq   \n  409b83:\t90                   \tnop", "code_s": "__int64 __fastcall std vector<std vector<long>> empty(__int64 *a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __int64 <span class=\"supfact\">v3</span>;\n  <span class=\"supfact\">v2</span> = std vector<std vector<long>> end((__int64)a1);\n  <span class=\"supfact\">v3</span> = std vector<std vector<long>> begin(a1);\n  return __gnu_cxx operator==\n      <std vector<long> const *, std vector<std vector<long>>>(\n          &<span class=\"supfact\">v3</span>, &<span class=\"supfact\">v2</span>);\n}", "code_t": "bool __cdecl std vector<std vector<long>>\nempty(const std vector<std vector<long int>> *const this) {\n  __gnu_cxx __normal_iterator<const std vector<long int> *,\n                              std vector<std vector<long int>>>\n      <span class=\"supfact\">__rhs</span>;\n  __gnu_cxx __normal_iterator<const std vector<long int> *,\n                              std vector<std vector<long int>>>\n      <span class=\"supfact\">__lhs</span>;\n  <span class=\"supfact\">__rhs</span>._M_current =\n      std vector<std vector<long>> end(this)._M_current;\n  <span class=\"supfact\">__lhs</span>._M_current =\n      std vector<std vector<long>> begin(this)._M_current;\n  return __gnu_cxx operator==\n      <std vector<long> const *, std vector<std vector<long>>>(\n          &<span class=\"supfact\">__lhs</span>, &<span class=\"supfact\">__rhs</span>);\n}", "var": [{"name": "v2", "type": "__int64", "pred_name": "v2", "ref_name": "__rhs", "ref_type": "struct __gnu_cxx::__normal_iterator<const std::vector<long int>*,std::vector<std::vector<long int>> > { const std::vector<long int> * _M_current; }"}, {"name": "v3", "type": "__int64", "pred_name": "v3", "ref_name": "__lhs", "ref_type": "struct __gnu_cxx::__normal_iterator<const std::vector<long int>*,std::vector<std::vector<long int>> > { const std::vector<long int> * _M_current; }"}], "body_in_train": false}, {"repo_owner": "revast", "repo_name": "dvj", "path": "revast/dvj/de364fd336015f9d56e661caab0652177f6dcdab80a3ceb4ac34d23825efabb9", "path_in_repo": "revast/dvj/dep/src/ffmpeg/libavcodec/svq1dec.o", "objdump": "0000000000001ffe <svq1_motion_inter_block>:\n    1ffe:\t48 83 ec 78          \tsub    $0x78,%rsp\n    2002:\t48 89 7c 24 28       \tmov    %rdi,0x28(%rsp)\n    2007:\t48 89 74 24 20       \tmov    %rsi,0x20(%rsp)\n    200c:\t48 89 54 24 18       \tmov    %rdx,0x18(%rsp)\n    2011:\t48 89 4c 24 10       \tmov    %rcx,0x10(%rsp)\n    2016:\t44 89 44 24 0c       \tmov    %r8d,0xc(%rsp)\n    201b:\t4c 89 0c 24          \tmov    %r9,(%rsp)\n    201f:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2023:\t48 89 44 24 30       \tmov    %rax,0x30(%rsp)\n    2028:\t83 bc 24 88 00 00 00 \tcmpl   $0x0,0x88(%rsp)\n    202f:\t00 \n    2030:\t75 16                \tjne    2048 <svq1_motion_inter_block+0x4a>\n    2032:\t48 8b 44 24 30       \tmov    0x30(%rsp),%rax\n    2037:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n    203c:\t48 8b 44 24 40       \tmov    0x40(%rsp),%rax\n    2041:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    2046:\teb 58                \tjmp    20a0 <svq1_motion_inter_block+0xa2>\n    2048:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n    204f:\t8d 50 07             \tlea    0x7(%rax),%edx\n    2052:\t85 c0                \ttest   %eax,%eax\n    2054:\t0f 48 c2             \tcmovs  %edx,%eax\n    2057:\tc1 f8 03             \tsar    $0x3,%eax\n    205a:\t48 98                \tcltq   \n    205c:\t48 83 c0 02          \tadd    $0x2,%rax\n    2060:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    2067:\t00 \n    2068:\t48 8b 04 24          \tmov    (%rsp),%rax\n    206c:\t48 01 d0             \tadd    %rdx,%rax\n    206f:\t48 89 44 24 38       \tmov    %rax,0x38(%rsp)\n    2074:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n    207b:\t8d 50 07             \tlea    0x7(%rax),%edx\n    207e:\t85 c0                \ttest   %eax,%eax\n    2080:\t0f 48 c2             \tcmovs  %edx,%eax\n    2083:\tc1 f8 03             \tsar    $0x3,%eax\n    2086:\t48 98                \tcltq   \n    2088:\t48 83 c0 04          \tadd    $0x4,%rax\n    208c:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    2093:\t00 \n    2094:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2098:\t48 01 d0             \tadd    %rdx,%rax\n    209b:\t48 89 44 24 40       \tmov    %rax,0x40(%rsp)\n    20a0:\t48 8d 54 24 30       \tlea    0x30(%rsp),%rdx\n    20a5:\t48 8d 4c 24 50       \tlea    0x50(%rsp),%rcx\n    20aa:\t48 8b 44 24 20       \tmov    0x20(%rsp),%rax\n    20af:\t48 89 ce             \tmov    %rcx,%rsi\n    20b2:\t48 89 c7             \tmov    %rax,%rdi\n    20b5:\te8 6c fb ff ff       \tcallq  1c26 <svq1_decode_motion_vector>\n    20ba:\t89 44 24 6c          \tmov    %eax,0x6c(%rsp)\n    20be:\t83 7c 24 6c 00       \tcmpl   $0x0,0x6c(%rsp)\n    20c3:\t74 09                \tje     20ce <svq1_motion_inter_block+0xd0>\n    20c5:\t8b 44 24 6c          \tmov    0x6c(%rsp),%eax\n    20c9:\te9 87 01 00 00       \tjmpq   2255 <svq1_motion_inter_block+0x257>\n    20ce:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n    20d5:\t8d 50 07             \tlea    0x7(%rax),%edx\n    20d8:\t85 c0                \ttest   %eax,%eax\n    20da:\t0f 48 c2             \tcmovs  %edx,%eax\n    20dd:\tc1 f8 03             \tsar    $0x3,%eax\n    20e0:\t48 98                \tcltq   \n    20e2:\t48 83 c0 03          \tadd    $0x3,%rax\n    20e6:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    20ed:\t00 \n    20ee:\t48 8b 04 24          \tmov    (%rsp),%rax\n    20f2:\t48 01 c2             \tadd    %rax,%rdx\n    20f5:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n    20f9:\t89 02                \tmov    %eax,(%rdx)\n    20fb:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n    2102:\t8d 48 07             \tlea    0x7(%rax),%ecx\n    2105:\t85 c0                \ttest   %eax,%eax\n    2107:\t0f 48 c1             \tcmovs  %ecx,%eax\n    210a:\tc1 f8 03             \tsar    $0x3,%eax\n    210d:\t48 98                \tcltq   \n    210f:\t48 83 c0 02          \tadd    $0x2,%rax\n    2113:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n    211a:\t00 \n    211b:\t48 8b 04 24          \tmov    (%rsp),%rax\n    211f:\t48 01 c8             \tadd    %rcx,%rax\n    2122:\t8b 12                \tmov    (%rdx),%edx\n    2124:\t89 10                \tmov    %edx,(%rax)\n    2126:\t8b 10                \tmov    (%rax),%edx\n    2128:\t48 8b 04 24          \tmov    (%rsp),%rax\n    212c:\t89 10                \tmov    %edx,(%rax)\n    212e:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n    2135:\t8d 50 07             \tlea    0x7(%rax),%edx\n    2138:\t85 c0                \ttest   %eax,%eax\n    213a:\t0f 48 c2             \tcmovs  %edx,%eax\n    213d:\tc1 f8 03             \tsar    $0x3,%eax\n    2140:\t48 98                \tcltq   \n    2142:\t48 83 c0 03          \tadd    $0x3,%rax\n    2146:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n    214d:\t00 \n    214e:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2152:\t48 01 c2             \tadd    %rax,%rdx\n    2155:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n    2159:\t89 42 04             \tmov    %eax,0x4(%rdx)\n    215c:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n    2163:\t8d 48 07             \tlea    0x7(%rax),%ecx\n    2166:\t85 c0                \ttest   %eax,%eax\n    2168:\t0f 48 c1             \tcmovs  %ecx,%eax\n    216b:\tc1 f8 03             \tsar    $0x3,%eax\n    216e:\t48 98                \tcltq   \n    2170:\t48 83 c0 02          \tadd    $0x2,%rax\n    2174:\t48 8d 0c c5 00 00 00 \tlea    0x0(,%rax,8),%rcx\n    217b:\t00 \n    217c:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2180:\t48 01 c8             \tadd    %rcx,%rax\n    2183:\t8b 52 04             \tmov    0x4(%rdx),%edx\n    2186:\t89 50 04             \tmov    %edx,0x4(%rax)\n    2189:\t8b 50 04             \tmov    0x4(%rax),%edx\n    218c:\t48 8b 04 24          \tmov    (%rsp),%rax\n    2190:\t89 50 04             \tmov    %edx,0x4(%rax)\n    2193:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n    2197:\td1 f8                \tsar    %eax\n    2199:\t89 c2                \tmov    %eax,%edx\n    219b:\t8b 84 24 88 00 00 00 \tmov    0x88(%rsp),%eax\n    21a2:\t01 d0                \tadd    %edx,%eax\n    21a4:\t85 c0                \ttest   %eax,%eax\n    21a6:\t79 08                \tjns    21b0 <svq1_motion_inter_block+0x1b2>\n    21a8:\tc7 44 24 54 00 00 00 \tmovl   $0x0,0x54(%rsp)\n    21af:\t00 \n    21b0:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n    21b4:\td1 f8                \tsar    %eax\n    21b6:\t89 c2                \tmov    %eax,%edx\n    21b8:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n    21bf:\t01 d0                \tadd    %edx,%eax\n    21c1:\t85 c0                \ttest   %eax,%eax\n    21c3:\t79 08                \tjns    21cd <svq1_motion_inter_block+0x1cf>\n    21c5:\tc7 44 24 50 00 00 00 \tmovl   $0x0,0x50(%rsp)\n    21cc:\t00 \n    21cd:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n    21d1:\td1 f8                \tsar    %eax\n    21d3:\t89 c2                \tmov    %eax,%edx\n    21d5:\t8b 84 24 80 00 00 00 \tmov    0x80(%rsp),%eax\n    21dc:\t01 c2                \tadd    %eax,%edx\n    21de:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n    21e2:\td1 f8                \tsar    %eax\n    21e4:\t89 c1                \tmov    %eax,%ecx\n    21e6:\t8b 84 24 88 00 00 00 \tmov    0x88(%rsp),%eax\n    21ed:\t01 c8                \tadd    %ecx,%eax\n    21ef:\t0f af 44 24 0c       \timul   0xc(%rsp),%eax\n    21f4:\t01 d0                \tadd    %edx,%eax\n    21f6:\t48 63 d0             \tmovslq %eax,%rdx\n    21f9:\t48 8b 44 24 10       \tmov    0x10(%rsp),%rax\n    21fe:\t48 01 d0             \tadd    %rdx,%rax\n    2201:\t48 89 44 24 60       \tmov    %rax,0x60(%rsp)\n    2206:\t48 8b 44 24 18       \tmov    0x18(%rsp),%rax\n    220b:\t48 89 44 24 58       \tmov    %rax,0x58(%rsp)\n    2210:\t8b 44 24 54          \tmov    0x54(%rsp),%eax\n    2214:\t01 c0                \tadd    %eax,%eax\n    2216:\t83 e0 02             \tand    $0x2,%eax\n    2219:\t89 c2                \tmov    %eax,%edx\n    221b:\t8b 44 24 50          \tmov    0x50(%rsp),%eax\n    221f:\t83 e0 01             \tand    $0x1,%eax\n    2222:\t09 c2                \tor     %eax,%edx\n    2224:\t48 8b 44 24 28       \tmov    0x28(%rsp),%rax\n    2229:\t48 63 d2             \tmovslq %edx,%rdx\n    222c:\t48 81 c2 4e 02 00 00 \tadd    $0x24e,%rdx\n    2233:\t4c 8b 04 d0          \tmov    (%rax,%rdx,8),%r8\n    2237:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n    223b:\t48 8b 74 24 60       \tmov    0x60(%rsp),%rsi\n    2240:\t48 8b 44 24 58       \tmov    0x58(%rsp),%rax\n    2245:\tb9 10 00 00 00       \tmov    $0x10,%ecx\n    224a:\t48 89 c7             \tmov    %rax,%rdi\n    224d:\t41 ff d0             \tcallq  *%r8\n    2250:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    2255:\t48 83 c4 78          \tadd    $0x78,%rsp\n    2259:\tc3                   \tretq   ", "code_s": "__int64 __fastcall svq1_motion_inter_block(__int64 a1, __int64 a2, __int64 a3,\n                                           __int64 a4, unsigned int a5,\n                                           signed int *a6, int a7, int a8) {\n  signed int *v9;\n  signed int *v10;\n  signed int *v15;\n  signed int *v16;\n  signed int *v17;\n  int <span class=\"supfact\">v18</span>;\n  int v19;\n  __int64 v20;\n  __int64 v21;\n  unsigned int v22;\n  v15 = a6;\n  if (a8) {\n    v16 = &a6[Number * (a7 / Number) + Number];\n    v17 = &a6[Number * (a7 / Number) + Number];\n  } else {\n    v17 = v15;\n    v16 = v15;\n  }\n  v22 = svq1_decode_motion_vector(a2, &<span class=\"supfact\">v18</span>, &v15);\n  if (v22)\n    return v22;\n  v9 = &a6[Number * (a7 / Number) + Number];\n  *v9 = <span class=\"supfact\">v18</span>;\n  v10 = &a6[Number * (a7 / Number) + Number];\n  *v10 = *v9;\n  *a6 = *v10;\n  v9[Number] = v19;\n  v10[Number] = v9[Number];\n  a6[Number] = v10[Number];\n  if ((v19 >> Number) + a8 < Number)\n    v19 = Number;\n  if ((<span class=\"supfact\">v18</span> >> Number) + a7 < Number)\n    <span class=\"supfact\">v18</span> = Number;\n  v21 = (int)(a7 + (<span class=\"supfact\">v18</span> >> Number) +\n              a5 * ((v19 >> Number) + a8)) +\n        a4;\n  v20 = a3;\n  (*(void(__fastcall **)(__int64, __int64, _QWORD, __int64))(\n      a1 + Number * ((<span class=\"supfact\">v18</span> & Number |\n                      (Number * (_BYTE)v19) & Number) +\n                     Number L)))(a3, v21, a5, Number L);\n  return Number L;\n}", "code_t": "int __cdecl svq1_motion_inter_block(MpegEncContext_0 *s,\n                                    GetBitContext_0 *bitbuf, uint8_t *current,\n                                    uint8_t *previous, int pitch,\n                                    svq1_pmv *motion, int x, int y) {\n  svq1_pmv *v9;\n  svq1_pmv *v10;\n  svq1_pmv *pmv[Number];\n  svq1_pmv <span class=\"supfact\">mv</span>;\n  uint8_t *dst;\n  uint8_t *src;\n  int result;\n  pmv[Number] = motion;\n  if (y) {\n    pmv[Number] = &motion[x / Number + Number];\n    pmv[Number] = &motion[x / Number + Number];\n  } else {\n    pmv[Number] = pmv[Number];\n    pmv[Number] = pmv[Number];\n  }\n  result = svq1_decode_motion_vector(bitbuf, &<span class=\"supfact\">mv</span>, pmv);\n  if (result)\n    return result;\n  v9 = &motion[x / Number + Number];\n  v9->x = <span class=\"supfact\">mv</span>.x;\n  v10 = &motion[x / Number + Number];\n  v10->x = v9->x;\n  motion->x = v10->x;\n  v9->y = <span class=\"supfact\">mv</span>.y;\n  v10->y = v9->y;\n  motion->y = v10->y;\n  if ((<span class=\"supfact\">mv</span>.y >> Number) + y < Number)\n    <span class=\"supfact\">mv</span>.y = Number;\n  if ((<span class=\"supfact\">mv</span>.x >> Number) + x < Number)\n    <span class=\"supfact\">mv</span>.x = Number;\n  src = &previous[x + (<span class=\"supfact\">mv</span>.x >> Number) +\n                  pitch * ((<span class=\"supfact\">mv</span>.y >> Number) + y)];\n  dst = current;\n  s->dsp.put_pixels_tab[Number][<span class=\"supfact\">mv</span>.x & Number |\n                                (Number * LOBYTE(<span class=\"supfact\">mv</span>.y)) &\n                                    Number](current, src, pitch, Number);\n  return Number;\n}", "var": [{"name": "v18", "type": "int", "pred_name": "ctx", "ref_name": "mv", "ref_type": "struct svq1_pmv { int x; int y; }"}], "body_in_train": false}, {"repo_owner": "postgrespro", "repo_name": "sqljson", "path": "postgrespro/sqljson/b0ecdfe1dffc8d65e2124af04a2d0bbc85e4ab803996891896dcf2bb925addde", "path_in_repo": "postgrespro/sqljson//src/backend/commands/explain.o", "objdump": "0000000000000a9d <ExplainOnePlan>:\n     a9d:\t55                   \tpush   %rbp\n     a9e:\t48 89 e5             \tmov    %rsp,%rbp\n     aa1:\t48 83 ec 70          \tsub    $0x70,%rsp\n     aa5:\t48 89 7d b8          \tmov    %rdi,-0x48(%rbp)\n     aa9:\t48 89 75 b0          \tmov    %rsi,-0x50(%rbp)\n     aad:\t48 89 55 a8          \tmov    %rdx,-0x58(%rbp)\n     ab1:\t48 89 4d a0          \tmov    %rcx,-0x60(%rbp)\n     ab5:\t4c 89 45 98          \tmov    %r8,-0x68(%rbp)\n     ab9:\t4c 89 4d 90          \tmov    %r9,-0x70(%rbp)\n     abd:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n     ac1:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n     ac6:\tc7 45 e8 00 00 00 00 \tmovl   $0x0,-0x18(%rbp)\n     acd:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     ad1:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n     ad5:\t84 c0                \ttest   %al,%al\n     ad7:\t74 12                \tje     aeb <ExplainOnePlan+0x4e>\n     ad9:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     add:\t0f b6 40 0c          \tmovzbl 0xc(%rax),%eax\n     ae1:\t84 c0                \ttest   %al,%al\n     ae3:\t74 06                \tje     aeb <ExplainOnePlan+0x4e>\n     ae5:\t83 4d e8 01          \torl    $0x1,-0x18(%rbp)\n     ae9:\teb 10                \tjmp    afb <ExplainOnePlan+0x5e>\n     aeb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     aef:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n     af3:\t84 c0                \ttest   %al,%al\n     af5:\t74 04                \tje     afb <ExplainOnePlan+0x5e>\n     af7:\t83 4d e8 04          \torl    $0x4,-0x18(%rbp)\n     afb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     aff:\t0f b6 40 0b          \tmovzbl 0xb(%rax),%eax\n     b03:\t84 c0                \ttest   %al,%al\n     b05:\t74 04                \tje     b0b <ExplainOnePlan+0x6e>\n     b07:\t83 4d e8 02          \torl    $0x2,-0x18(%rbp)\n     b0b:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     b0f:\t48 89 c6             \tmov    %rax,%rsi\n     b12:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     b17:\te8 00 00 00 00       \tcallq  b1c <ExplainOnePlan+0x7f>\n     b1c:\te8 00 00 00 00       \tcallq  b21 <ExplainOnePlan+0x84>\n     b21:\t48 89 c7             \tmov    %rax,%rdi\n     b24:\te8 00 00 00 00       \tcallq  b29 <ExplainOnePlan+0x8c>\n     b29:\te8 00 00 00 00       \tcallq  b2e <ExplainOnePlan+0x91>\n     b2e:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n     b33:\t74 12                \tje     b47 <ExplainOnePlan+0xaa>\n     b35:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     b39:\t48 89 c7             \tmov    %rax,%rdi\n     b3c:\te8 00 00 00 00       \tcallq  b41 <ExplainOnePlan+0xa4>\n     b41:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     b45:\teb 0b                \tjmp    b52 <ExplainOnePlan+0xb5>\n     b47:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # b4e <ExplainOnePlan+0xb1>\n     b4e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     b52:\te8 00 00 00 00       \tcallq  b57 <ExplainOnePlan+0xba>\n     b57:\t48 89 c7             \tmov    %rax,%rdi\n     b5a:\t4c 8b 45 98          \tmov    -0x68(%rbp),%r8\n     b5e:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     b62:\t48 8b 75 a0          \tmov    -0x60(%rbp),%rsi\n     b66:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n     b6a:\t8b 55 e8             \tmov    -0x18(%rbp),%edx\n     b6d:\t52                   \tpush   %rdx\n     b6e:\tff 75 90             \tpushq  -0x70(%rbp)\n     b71:\t4d 89 c1             \tmov    %r8,%r9\n     b74:\t49 89 c8             \tmov    %rcx,%r8\n     b77:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     b7c:\t48 89 fa             \tmov    %rdi,%rdx\n     b7f:\t48 89 c7             \tmov    %rax,%rdi\n     b82:\te8 00 00 00 00       \tcallq  b87 <ExplainOnePlan+0xea>\n     b87:\t48 83 c4 10          \tadd    $0x10,%rsp\n     b8b:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n     b8f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     b93:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n     b97:\t84 c0                \ttest   %al,%al\n     b99:\t74 09                \tje     ba4 <ExplainOnePlan+0x107>\n     b9b:\tc7 45 ec 00 00 00 00 \tmovl   $0x0,-0x14(%rbp)\n     ba2:\teb 07                \tjmp    bab <ExplainOnePlan+0x10e>\n     ba4:\tc7 45 ec 01 00 00 00 \tmovl   $0x1,-0x14(%rbp)\n     bab:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n     bb0:\t74 0f                \tje     bc1 <ExplainOnePlan+0x124>\n     bb2:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     bb6:\t48 89 c7             \tmov    %rax,%rdi\n     bb9:\te8 00 00 00 00       \tcallq  bbe <ExplainOnePlan+0x121>\n     bbe:\t09 45 ec             \tor     %eax,-0x14(%rbp)\n     bc1:\t8b 55 ec             \tmov    -0x14(%rbp),%edx\n     bc4:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     bc8:\t89 d6                \tmov    %edx,%esi\n     bca:\t48 89 c7             \tmov    %rax,%rdi\n     bcd:\te8 00 00 00 00       \tcallq  bd2 <ExplainOnePlan+0x135>\n     bd2:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     bd6:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n     bda:\t84 c0                \ttest   %al,%al\n     bdc:\t74 62                \tje     c40 <ExplainOnePlan+0x1a3>\n     bde:\t48 83 7d b0 00       \tcmpq   $0x0,-0x50(%rbp)\n     be3:\t74 15                \tje     bfa <ExplainOnePlan+0x15d>\n     be5:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n     be9:\t0f b6 40 38          \tmovzbl 0x38(%rax),%eax\n     bed:\t84 c0                \ttest   %al,%al\n     bef:\t74 09                \tje     bfa <ExplainOnePlan+0x15d>\n     bf1:\tc7 45 e4 00 00 00 00 \tmovl   $0x0,-0x1c(%rbp)\n     bf8:\teb 07                \tjmp    c01 <ExplainOnePlan+0x164>\n     bfa:\tc7 45 e4 01 00 00 00 \tmovl   $0x1,-0x1c(%rbp)\n     c01:\t8b 75 e4             \tmov    -0x1c(%rbp),%esi\n     c04:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c08:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n     c0d:\tba 00 00 00 00       \tmov    $0x0,%edx\n     c12:\t48 89 c7             \tmov    %rax,%rdi\n     c15:\te8 00 00 00 00       \tcallq  c1a <ExplainOnePlan+0x17d>\n     c1a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     c1e:\t48 89 c7             \tmov    %rax,%rdi\n     c21:\te8 00 00 00 00       \tcallq  c26 <ExplainOnePlan+0x189>\n     c26:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     c2a:\t48 89 c7             \tmov    %rax,%rdi\n     c2d:\te8 5f 10 00 00       \tcallq  1c91 <elapsed_time>\n     c32:\tf2 0f 10 4d f0       \tmovsd  -0x10(%rbp),%xmm1\n     c37:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     c3b:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n     c40:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     c44:\t48 89 c1             \tmov    %rax,%rcx\n     c47:\tba 01 00 00 00       \tmov    $0x1,%edx\n     c4c:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c51:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     c56:\te8 00 00 00 00       \tcallq  c5b <ExplainOnePlan+0x1be>\n     c5b:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     c5f:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     c63:\t48 89 d6             \tmov    %rdx,%rsi\n     c66:\t48 89 c7             \tmov    %rax,%rdi\n     c69:\te8 00 00 00 00       \tcallq  c6e <ExplainOnePlan+0x1d1>\n     c6e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     c72:\t0f b6 40 0d          \tmovzbl 0xd(%rax),%eax\n     c76:\t84 c0                \ttest   %al,%al\n     c78:\t74 61                \tje     cdb <ExplainOnePlan+0x23e>\n     c7a:\t48 83 7d 10 00       \tcmpq   $0x0,0x10(%rbp)\n     c7f:\t74 5a                \tje     cdb <ExplainOnePlan+0x23e>\n     c81:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n     c85:\t48 8b 00             \tmov    (%rax),%rax\n     c88:\tf2 48 0f 2a c8       \tcvtsi2sd %rax,%xmm1\n     c8d:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n     c91:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     c95:\tf2 48 0f 2a c0       \tcvtsi2sd %rax,%xmm0\n     c9a:\tf2 0f 10 15 00 00 00 \tmovsd  0x0(%rip),%xmm2        # ca2 <ExplainOnePlan+0x205>\n     ca1:\t00 \n     ca2:\tf2 0f 5e c2          \tdivsd  %xmm2,%xmm0\n     ca6:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     caa:\tf2 0f 11 45 d0       \tmovsd  %xmm0,-0x30(%rbp)\n     caf:\tf2 0f 10 4d d0       \tmovsd  -0x30(%rbp),%xmm1\n     cb4:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # cbc <ExplainOnePlan+0x21f>\n     cbb:\t00 \n     cbc:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n     cc0:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     cc4:\t48 89 c1             \tmov    %rax,%rcx\n     cc7:\tba 03 00 00 00       \tmov    $0x3,%edx\n     ccc:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     cd1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     cd6:\te8 00 00 00 00       \tcallq  cdb <ExplainOnePlan+0x23e>\n     cdb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     cdf:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n     ce3:\t84 c0                \ttest   %al,%al\n     ce5:\t74 13                \tje     cfa <ExplainOnePlan+0x25d>\n     ce7:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     ceb:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     cef:\t48 89 d6             \tmov    %rdx,%rsi\n     cf2:\t48 89 c7             \tmov    %rax,%rdi\n     cf5:\te8 00 00 00 00       \tcallq  cfa <ExplainOnePlan+0x25d>\n     cfa:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     cfe:\t0f b6 40 0a          \tmovzbl 0xa(%rax),%eax\n     d02:\t84 c0                \ttest   %al,%al\n     d04:\t74 13                \tje     d19 <ExplainOnePlan+0x27c>\n     d06:\t48 8b 55 d8          \tmov    -0x28(%rbp),%rdx\n     d0a:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     d0e:\t48 89 d6             \tmov    %rdx,%rsi\n     d11:\t48 89 c7             \tmov    %rax,%rdi\n     d14:\te8 00 00 00 00       \tcallq  d19 <ExplainOnePlan+0x27c>\n     d19:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     d1d:\t48 89 c6             \tmov    %rax,%rsi\n     d20:\tbf 01 00 00 00       \tmov    $0x1,%edi\n     d25:\te8 00 00 00 00       \tcallq  d2a <ExplainOnePlan+0x28d>\n     d2a:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d2e:\t48 89 c7             \tmov    %rax,%rdi\n     d31:\te8 00 00 00 00       \tcallq  d36 <ExplainOnePlan+0x299>\n     d36:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     d3a:\t48 89 c7             \tmov    %rax,%rdi\n     d3d:\te8 00 00 00 00       \tcallq  d42 <ExplainOnePlan+0x2a5>\n     d42:\te8 00 00 00 00       \tcallq  d47 <ExplainOnePlan+0x2aa>\n     d47:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     d4b:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n     d4f:\t84 c0                \ttest   %al,%al\n     d51:\t74 05                \tje     d58 <ExplainOnePlan+0x2bb>\n     d53:\te8 00 00 00 00       \tcallq  d58 <ExplainOnePlan+0x2bb>\n     d58:\t48 8d 45 c0          \tlea    -0x40(%rbp),%rax\n     d5c:\t48 89 c7             \tmov    %rax,%rdi\n     d5f:\te8 2d 0f 00 00       \tcallq  1c91 <elapsed_time>\n     d64:\tf2 0f 10 4d f0       \tmovsd  -0x10(%rbp),%xmm1\n     d69:\tf2 0f 58 c1          \taddsd  %xmm1,%xmm0\n     d6d:\tf2 0f 11 45 f0       \tmovsd  %xmm0,-0x10(%rbp)\n     d72:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     d76:\t0f b6 40 0d          \tmovzbl 0xd(%rax),%eax\n     d7a:\t84 c0                \ttest   %al,%al\n     d7c:\t74 38                \tje     db6 <ExplainOnePlan+0x319>\n     d7e:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     d82:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n     d86:\t84 c0                \ttest   %al,%al\n     d88:\t74 2c                \tje     db6 <ExplainOnePlan+0x319>\n     d8a:\tf2 0f 10 4d f0       \tmovsd  -0x10(%rbp),%xmm1\n     d8f:\tf2 0f 10 05 00 00 00 \tmovsd  0x0(%rip),%xmm0        # d97 <ExplainOnePlan+0x2fa>\n     d96:\t00 \n     d97:\tf2 0f 59 c1          \tmulsd  %xmm1,%xmm0\n     d9b:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     d9f:\t48 89 c1             \tmov    %rax,%rcx\n     da2:\tba 03 00 00 00       \tmov    $0x3,%edx\n     da7:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     dac:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     db1:\te8 00 00 00 00       \tcallq  db6 <ExplainOnePlan+0x319>\n     db6:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n     dba:\t48 89 c1             \tmov    %rax,%rcx\n     dbd:\tba 01 00 00 00       \tmov    $0x1,%edx\n     dc2:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     dc7:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     dcc:\te8 00 00 00 00       \tcallq  dd1 <ExplainOnePlan+0x334>\n     dd1:\t90                   \tnop\n     dd2:\tc9                   \tleaveq \n     dd3:\tc3                   \tretq   ", "code_s": "__int64 __fastcall ExplainOnePlan(__int64 a1, __int64 a2, _BYTE *a3, __int64 a4,\n                                  __int64 a5, __int64 a6, _QWORD *a7) {\n  __int64 v7;\n  __int64 v8;\n  int v9;\n  double v10;\n  double v11;\n  struct timespec <span class=\"supfact\">tp</span>;\n  double v18;\n  __int64 v19;\n  _BOOL4 v20;\n  unsigned int v21;\n  unsigned int v22;\n  double v23;\n  __int64 v24;\n  v23 = Number;\n  v21 = Number;\n  if (a3[Number] && a3[Number]) {\n    v21 |= Number;\n  } else if (a3[Number]) {\n    v21 |= Number;\n  }\n  if (a3[Number])\n    v21 |= Number;\n  clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n  v7 = GetActiveSnapshot();\n  PushCopiedSnapshot(v7);\n  UpdateActiveSnapshotCommandId();\n  if (a2)\n    v24 = CreateIntoRelDestReceiver(a2);\n  else\n    v24 = None_Receiver;\n  v8 = GetActiveSnapshot();\n  v19 = CreateQueryDesc(a1, a4, v8, Number L, v24, a5, a6, v21);\n  v22 = a3[Number] == Number;\n  if (a2) {\n    v9 = GetIntoRelEFlags(a2);\n    v22 |= v9;\n  }\n  ExecutorStart(v19, v22);\n  if (a3[Number]) {\n    v20 = !a2 || !*(_BYTE *)(a2 + Number);\n    ExecutorRun(v19, v20, Number L, Number L);\n    ExecutorFinish(v19);\n    v10 = elapsed_time(&<span class=\"supfact\">tp</span>);\n    v23 = v10 + v23;\n  }\n  ExplainOpenGroup(String, Number L, Number L, a3);\n  ExplainPrintPlan(a3, v19);\n  if (a3[Number] && a7) {\n    v18 = (double)(int)a7[Number] / Number + (double)(int)*a7;\n    ExplainPropertyFloat(String, String, Number L, a3, Number * v18);\n  }\n  if (a3[Number])\n    ExplainPrintTriggers(a3, v19);\n  if (a3[Number])\n    ExplainPrintJITSummary(a3, v19);\n  clock_gettime(Number, &<span class=\"supfact\">tp</span>);\n  ExecutorEnd(v19);\n  FreeQueryDesc(v19);\n  PopActiveSnapshot();\n  if (a3[Number])\n    CommandCounterIncrement();\n  v11 = elapsed_time(&<span class=\"supfact\">tp</span>);\n  v23 = v11 + v23;\n  if (a3[Number] && a3[Number])\n    ExplainPropertyFloat(String, String, Number L, a3, Number * v23);\n  return ExplainCloseGroup(String, Number L, Number L, a3);\n}", "code_t": "void __cdecl ExplainOnePlan(PlannedStmt_0 *plannedstmt, IntoClause_0 *into,\n                            ExplainState_0 *es_0, const char *queryString,\n                            ParamListInfo params, QueryEnvironment_0 *queryEnv,\n                            const instr_time *planduration) {\n  __int64 v7;\n  __int64 v8;\n  int v9;\n  double v10;\n  double v11;\n  instr_time <span class=\"supfact\">starttime</span>;\n  double plantime;\n  QueryDesc_0 *queryDesc;\n  ScanDirection_0 dir;\n  int instrument_option;\n  int eflags;\n  double totaltime;\n  DestReceiver *dest;\n  totaltime = Number;\n  instrument_option = Number;\n  if (es_0->analyze && es_0->timing) {\n    instrument_option |= Number;\n  } else if (es_0->analyze) {\n    instrument_option |= Number;\n  }\n  if (es_0->buffers)\n    instrument_option |= Number;\n  clock_gettime(Number, &<span class=\"supfact\">starttime</span>);\n  v7 = GetActiveSnapshot();\n  PushCopiedSnapshot(v7);\n  UpdateActiveSnapshotCommandId();\n  if (into)\n    dest = (DestReceiver *)CreateIntoRelDestReceiver(into);\n  else\n    dest = (DestReceiver *)None_Receiver;\n  v8 = GetActiveSnapshot();\n  queryDesc = (QueryDesc_0 *)CreateQueryDesc(plannedstmt, queryString, v8,\n                                             Number L, dest, params, queryEnv,\n                                             (unsigned int)instrument_option);\n  eflags = !es_0->analyze;\n  if (into) {\n    v9 = GetIntoRelEFlags(into);\n    eflags |= v9;\n  }\n  ExecutorStart(queryDesc, (unsigned int)eflags);\n  if (es_0->analyze) {\n    dir = !into || !into->skipData;\n    ExecutorRun(queryDesc, (unsigned int)dir, Number L, Number L);\n    ExecutorFinish(queryDesc);\n    v10 = elapsed_time(&<span class=\"supfact\">starttime</span>);\n    totaltime = v10 + totaltime;\n  }\n  ExplainOpenGroup(String, Number L, Number, es_0);\n  ExplainPrintPlan(es_0, queryDesc);\n  if (es_0->summary && planduration) {\n    plantime = (double)(int)planduration->tv_nsec / Number +\n               (double)(int)planduration->tv_sec;\n    ExplainPropertyFloat(String, String, Number * plantime, Number, es_0);\n  }\n  if (es_0->analyze)\n    ExplainPrintTriggers(es_0, queryDesc);\n  if (es_0->costs)\n    ExplainPrintJITSummary(es_0, queryDesc);\n  clock_gettime(Number, &<span class=\"supfact\">starttime</span>);\n  ExecutorEnd(queryDesc);\n  FreeQueryDesc(queryDesc);\n  PopActiveSnapshot();\n  if (es_0->analyze)\n    CommandCounterIncrement();\n  v11 = elapsed_time(&<span class=\"supfact\">starttime</span>);\n  totaltime = v11 + totaltime;\n  if (es_0->summary && es_0->analyze)\n    ExplainPropertyFloat(String, String, Number * totaltime, Number, es_0);\n  ExplainCloseGroup(String, Number L, Number, es_0);\n}", "var": [{"name": "tp", "type": "struct timespec { __time_t tv_sec; __syscall_slong_t tv_nsec; }", "pred_name": "__unk__", "ref_name": "starttime", "ref_type": "struct instr_time { __time_t tv_sec; __syscall_slong_t tv_nsec; }"}], "body_in_train": false}, {"repo_owner": "XanClic", "repo_name": "qemu", "path": "XanClic/qemu/4cf2cb65f7fc90c39ef89366e298e5a15abac317d28cbc59f0ce26b66aab6da0", "path_in_repo": "XanClic/qemu//migration/savevm.o", "objdump": "000000000000243a <_nocheck__trace_postcopy_pause_incoming>:\n    243a:\t55                   \tpush   %rbp\n    243b:\t48 89 e5             \tmov    %rsp,%rbp\n    243e:\t41 54                \tpush   %r12\n    2440:\t53                   \tpush   %rbx\n    2441:\t48 83 ec 20          \tsub    $0x20,%rsp\n    2445:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n    244c:\t00 00 \n    244e:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    2452:\t31 c0                \txor    %eax,%eax\n    2454:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 245a <_nocheck__trace_postcopy_pause_incoming+0x20>\n    245a:\t85 c0                \ttest   %eax,%eax\n    245c:\t0f 95 c0             \tsetne  %al\n    245f:\t0f b6 c0             \tmovzbl %al,%eax\n    2462:\t48 85 c0             \ttest   %rax,%rax\n    2465:\t74 57                \tje     24be <_nocheck__trace_postcopy_pause_incoming+0x84>\n    2467:\t0f b7 05 00 00 00 00 \tmovzwl 0x0(%rip),%eax        # 246e <_nocheck__trace_postcopy_pause_incoming+0x34>\n    246e:\t66 85 c0             \ttest   %ax,%ax\n    2471:\t74 4b                \tje     24be <_nocheck__trace_postcopy_pause_incoming+0x84>\n    2473:\tbf 00 80 00 00       \tmov    $0x8000,%edi\n    2478:\te8 49 dd ff ff       \tcallq  1c6 <qemu_loglevel_mask>\n    247d:\t84 c0                \ttest   %al,%al\n    247f:\t74 3d                \tje     24be <_nocheck__trace_postcopy_pause_incoming+0x84>\n    2481:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n    2485:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    248a:\t48 89 c7             \tmov    %rax,%rdi\n    248d:\te8 00 00 00 00       \tcallq  2492 <_nocheck__trace_postcopy_pause_incoming+0x58>\n    2492:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    2496:\t49 89 c4             \tmov    %rax,%r12\n    2499:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    249d:\t48 89 c3             \tmov    %rax,%rbx\n    24a0:\te8 00 00 00 00       \tcallq  24a5 <_nocheck__trace_postcopy_pause_incoming+0x6b>\n    24a5:\t4c 89 e1             \tmov    %r12,%rcx\n    24a8:\t48 89 da             \tmov    %rbx,%rdx\n    24ab:\t89 c6                \tmov    %eax,%esi\n    24ad:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 24b4 <_nocheck__trace_postcopy_pause_incoming+0x7a>\n    24b4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    24b9:\te8 00 00 00 00       \tcallq  24be <_nocheck__trace_postcopy_pause_incoming+0x84>\n    24be:\t90                   \tnop\n    24bf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n    24c3:\t64 48 33 04 25 28 00 \txor    %fs:0x28,%rax\n    24ca:\t00 00 \n    24cc:\t74 05                \tje     24d3 <_nocheck__trace_postcopy_pause_incoming+0x99>\n    24ce:\te8 00 00 00 00       \tcallq  24d3 <_nocheck__trace_postcopy_pause_incoming+0x99>\n    24d3:\t48 83 c4 20          \tadd    $0x20,%rsp\n    24d7:\t5b                   \tpop    %rbx\n    24d8:\t41 5c                \tpop    %r12\n    24da:\t5d                   \tpop    %rbp\n    24db:\tc3                   \tretq   ", "code_s": "unsigned __int64 nocheck__trace_postcopy_pause_incoming() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  struct timeval <span class=\"supfact\">tv</span>;\n  unsigned __int64 v5;\n  v5 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_POSTCOPY_PAUSE_INCOMING_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">tv</span>, Number L);\n    v0 = <span class=\"supfact\">tv</span>.tv_usec;\n    v1 = <span class=\"supfact\">tv</span>.tv_sec;\n    v2 = qemu_get_thread_id();\n    qemu_log(String, v2, v1, v0);\n  }\n  return __readfsqword(Number) ^ v5;\n}", "code_t": "void __cdecl nocheck__trace_postcopy_pause_incoming() {\n  __suseconds_t v0;\n  __time_t v1;\n  unsigned int v2;\n  timeval <span class=\"supfact\">_now</span>;\n  unsigned __int64 v4;\n  v4 = __readfsqword(Number);\n  if (trace_events_enabled_count && TRACE_POSTCOPY_PAUSE_INCOMING_DSTATE &&\n      qemu_loglevel_mask(Number)) {\n    gettimeofday(&<span class=\"supfact\">_now</span>, Number L);\n    v0 = <span class=\"supfact\">_now</span>.tv_usec;\n    v1 = <span class=\"supfact\">_now</span>.tv_sec;\n    v2 = qemu_get_thread_id();\n    qemu_log(String, v2, v1, v0);\n  }\n}", "var": [{"name": "tv", "type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }", "pred_name": "_now", "ref_name": "_now", "ref_type": "struct timeval { __time_t tv_sec; __suseconds_t tv_usec; }"}], "body_in_train": false}, {"repo_owner": "Hyperion4ik", "repo_name": "bsd_kernel", "path": "Hyperion4ik/bsd_kernel/45a13c27262dc81f068888215b1a289b9111eb53666e05a57cf192b65f0c94f4", "path_in_repo": "Hyperion4ik/bsd_kernel/contrib/groff/src/roff/troff/env.o", "objdump": "0000000000000a50 <_Z12title_lengthv>:\n     a50:\t48 83 ec 28          \tsub    $0x28,%rsp\n     a54:\tc7 44 24 0c 00 00 00 \tmovl   $0x0,0xc(%rsp)\n     a5b:\t00 \n     a5c:\te8 00 00 00 00       \tcallq  a61 <_Z12title_lengthv+0x11>\n     a61:\t85 c0                \ttest   %eax,%eax\n     a63:\t75 2b                \tjne    a90 <_Z12title_lengthv+0x40>\n     a65:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a6c <_Z12title_lengthv+0x1c>\n     a6c:\t8b 50 0c             \tmov    0xc(%rax),%edx\n     a6f:\t89 54 24 0c          \tmov    %edx,0xc(%rsp)\n     a73:\t8b 50 10             \tmov    0x10(%rax),%edx\n     a76:\t89 50 0c             \tmov    %edx,0xc(%rax)\n     a79:\t8b 54 24 0c          \tmov    0xc(%rsp),%edx\n     a7d:\t89 50 10             \tmov    %edx,0x10(%rax)\n     a80:\te8 00 00 00 00       \tcallq  a85 <_Z12title_lengthv+0x35>\n     a85:\t48 83 c4 28          \tadd    $0x28,%rsp\n     a89:\tc3                   \tretq   \n     a8a:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n     a90:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # a97 <_Z12title_lengthv+0x47>\n     a97:\tbe 6d 00 00 00       \tmov    $0x6d,%esi\n     a9c:\t48 8d 7c 24 0c       \tlea    0xc(%rsp),%rdi\n     aa1:\t8b 50 10             \tmov    0x10(%rax),%edx\n     aa4:\te8 00 00 00 00       \tcallq  aa9 <_Z12title_lengthv+0x59>\n     aa9:\t85 c0                \ttest   %eax,%eax\n     aab:\t74 b8                \tje     a65 <_Z12title_lengthv+0x15>\n     aad:\t8b 74 24 0c          \tmov    0xc(%rsp),%esi\n     ab1:\t3b 35 00 00 00 00    \tcmp    0x0(%rip),%esi        # ab7 <_Z12title_lengthv+0x67>\n     ab7:\t7c 0f                \tjl     ac8 <_Z12title_lengthv+0x78>\n     ab9:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # ac0 <_Z12title_lengthv+0x70>\n     ac0:\teb b1                \tjmp    a73 <_Z12title_lengthv+0x23>\n     ac2:\t66 0f 1f 44 00 00    \tnopw   0x0(%rax,%rax,1)\n     ac8:\t0f af 35 00 00 00 00 \timul   0x0(%rip),%esi        # acf <_Z12title_lengthv+0x7f>\n     acf:\t48 8d 7c 24 10       \tlea    0x10(%rsp),%rdi\n     ad4:\te8 00 00 00 00       \tcallq  ad9 <_Z12title_lengthv+0x89>\n     ad9:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     adf:\t48 8d 54 24 10       \tlea    0x10(%rsp),%rdx\n     ae4:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     ae9:\t4c 89 c1             \tmov    %r8,%rcx\n     aec:\tbf 40 00 00 00       \tmov    $0x40,%edi\n     af1:\te8 00 00 00 00       \tcallq  af6 <_Z12title_lengthv+0xa6>\n     af6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # afc <_Z12title_lengthv+0xac>\n     afc:\t89 44 24 0c          \tmov    %eax,0xc(%rsp)\n     b00:\teb b7                \tjmp    ab9 <_Z12title_lengthv+0x69>\n     b02:\t66 66 2e 0f 1f 84 00 \tdata16 nopw %cs:0x0(%rax,%rax,1)\n     b09:\t00 00 00 00 \n     b0d:\t0f 1f 00             \tnopl   (%rax)", "code_s": "__int64 title_length(void) {\n  environment *v0;\n  int <span class=\"supfact\">v2</span>;\n  char <span class=\"supfact\">v3</span>[Number];\n  <span class=\"supfact\">v2</span> = Number;\n  if ((unsigned int)has_arg() &&\n      (unsigned int)get_hunits(&<span class=\"supfact\">v2</span>, Number L,\n                               *((unsigned int *)curenv + Number))) {\n    if (<span class=\"supfact\">v2</span> < H0) {\n      errarg errarg((errarg *)<span class=\"supfact\">v3</span>,\n                    hresolution * <span class=\"supfact\">v2</span>);\n      warning(Number L, String, <span class=\"supfact\">v3</span>);\n      <span class=\"supfact\">v2</span> = H0;\n    }\n    v0 = curenv;\n  } else {\n    v0 = curenv;\n    <span class=\"supfact\">v2</span> = *((_DWORD *)curenv + Number);\n  }\n  *((_DWORD *)v0 + Number) = *((_DWORD *)v0 + Number);\n  *((_DWORD *)v0 + Number) = <span class=\"supfact\">v2</span>;\n  return skip_line();\n}", "code_t": "void __cdecl title_length() {\n  environment *v0;\n  hunits <span class=\"supfact\">temp</span>;\n  errarg <span class=\"supfact\">v2</span>;\n  <span class=\"supfact\">temp</span>.n = Number;\n  if ((unsigned int)has_arg() &&\n      (unsigned int)get_hunits(&<span class=\"supfact\">temp</span>, Number,\n                               curenv->title_length)) {\n    if (<span class=\"supfact\">temp</span>.n < H0.n) {\n      errarg errarg(&<span class=\"supfact\">v2</span>, hresolution * <span class=\"supfact\">temp</span>.n);\n      warning(WARN_RANGE, String, &<span class=\"supfact\">v2</span>, &empty_errarg,\n              &empty_errarg);\n      <span class=\"supfact\">temp</span>.n = H0.n;\n    }\n    v0 = curenv;\n  } else {\n    v0 = curenv;\n    <span class=\"supfact\">temp</span>.n = curenv->prev_title_length.n;\n  }\n  v0->prev_title_length.n = v0->title_length.n;\n  v0->title_length = <span class=\"supfact\">temp</span>;\n  skip_line();\n}", "var": [{"name": "v2", "type": "int", "pred_name": "__unk__", "ref_name": "temp", "ref_type": "struct hunits { int n; }"}, {"name": "v3", "type": "char[20]", "pred_name": "__unk__", "ref_name": "v2", "ref_type": "struct errarg { errarg::$CA1737A01D37245DF2E29DE56C3DFD97 type; PADDING (4); errarg::$FC27500F9CE54CAC99383A238CBC1819 _anon_0; }"}], "body_in_train": false}, {"repo_owner": "whistlinwilly", "repo_name": "graphics-project2", "path": "whistlinwilly/graphics-project2/e5b77334a9186e6f25ab057991b7930a49bb119faf5167236fbb049aa41c2052", "path_in_repo": "whistlinwilly/graphics-project2/p2out/bin/debug/scene/mesh.o", "objdump": "0000000000000000 <_ZNSt6vectorIN4_46212MeshTriangleESaIS1_EE5beginEv>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d e8          \tmov    %rdi,-0x18(%rbp)\n   c:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  10:\t48 8d 45 f8          \tlea    -0x8(%rbp),%rax\n  14:\t48 89 d6             \tmov    %rdx,%rsi\n  17:\t48 89 c7             \tmov    %rax,%rdi\n  1a:\te8 00 00 00 00       \tcallq  1f <_ZNSt6vectorIN4_46212MeshTriangleESaIS1_EE5beginEv+0x1f>\n  1f:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  23:\tc9                   \tleaveq \n  24:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std vector<_462 MeshTriangle> begin(__int64 a1) {\n  __int64 <span class=\"supfact\">v2</span>;\n  __gnu_cxx\n      __normal_iterator<_462 MeshTriangle *, std vector<_462 MeshTriangle>>\n          __normal_iterator(&<span class=\"supfact\">v2</span>, a1);\n  return <span class=\"supfact\">v2</span>;\n}", "code_t": "std vector<_462 MeshTriangle> iterator __cdecl std vector<_462 MeshTriangle>\nbegin(std vector<_462 MeshTriangle> *const this) {\n  __gnu_cxx\n      __normal_iterator<_462 MeshTriangle *, std vector<_462 MeshTriangle>>\n          <span class=\"supfact\">v2</span>;\n  __gnu_cxx\n      __normal_iterator<_462 MeshTriangle *, std vector<_462 MeshTriangle>>\n          __normal_iterator(&<span class=\"supfact\">v2</span>, &this->_M_impl._M_start);\n  return <span class=\"supfact\">v2</span>;\n}", "var": [{"name": "v2", "type": "__int64", "pred_name": "v2", "ref_name": "v2", "ref_type": "struct __gnu_cxx::__normal_iterator<_462::MeshTriangle*,std::vector<_462::MeshTriangle> > { _462::MeshTriangle * _M_current; }"}], "body_in_train": false}, {"repo_owner": "janakj", "repo_name": "git-ccn", "path": "janakj/git-ccn/1ed636fb04c758afae560767ac4a2583e6d09c7dce05644e3d9601864e5910b5", "path_in_repo": "janakj/git-ccn//bundle.o", "objdump": "0000000000000acb <create_bundle>:\n     acb:\t55                   \tpush   %rbp\n     acc:\t48 89 e5             \tmov    %rsp,%rbp\n     acf:\t48 81 ec 50 0a 00 00 \tsub    $0xa50,%rsp\n     ad6:\t48 89 bd c8 f5 ff ff \tmov    %rdi,-0xa38(%rbp)\n     add:\t48 89 b5 c0 f5 ff ff \tmov    %rsi,-0xa40(%rbp)\n     ae4:\t89 95 bc f5 ff ff    \tmov    %edx,-0xa44(%rbp)\n     aea:\t48 89 8d b0 f5 ff ff \tmov    %rcx,-0xa50(%rbp)\n     af1:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%rbp)\n     af8:\t8b 85 bc f5 ff ff    \tmov    -0xa44(%rbp),%eax\n     afe:\t83 c0 04             \tadd    $0x4,%eax\n     b01:\t48 98                \tcltq   \n     b03:\t48 c1 e0 03          \tshl    $0x3,%rax\n     b07:\t48 89 c7             \tmov    %rax,%rdi\n     b0a:\te8 00 00 00 00       \tcallq  b0f <create_bundle+0x44>\n     b0f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     b13:\tbf 30 00 00 00       \tmov    $0x30,%edi\n     b18:\te8 00 00 00 00       \tcallq  b1d <create_bundle+0x52>\n     b1d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n     b21:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n     b28:\t48 8b 85 c0 f5 ff ff \tmov    -0xa40(%rbp),%rax\n     b2f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b34:\t48 89 c7             \tmov    %rax,%rdi\n     b37:\te8 00 00 00 00       \tcallq  b3c <create_bundle+0x71>\n     b3c:\t85 c0                \ttest   %eax,%eax\n     b3e:\t0f 94 c0             \tsete   %al\n     b41:\t0f b6 c0             \tmovzbl %al,%eax\n     b44:\t89 45 dc             \tmov    %eax,-0x24(%rbp)\n     b47:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n     b4b:\t74 09                \tje     b56 <create_bundle+0x8b>\n     b4d:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n     b54:\teb 1c                \tjmp    b72 <create_bundle+0xa7>\n     b56:\t48 8b 85 c0 f5 ff ff \tmov    -0xa40(%rbp),%rax\n     b5d:\tba 01 00 00 00       \tmov    $0x1,%edx\n     b62:\t48 89 c6             \tmov    %rax,%rsi\n     b65:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     b6a:\te8 00 00 00 00       \tcallq  b6f <create_bundle+0xa4>\n     b6f:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n     b72:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     b75:\tba 10 00 00 00       \tmov    $0x10,%edx\n     b7a:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b7f:\t89 c7                \tmov    %eax,%edi\n     b81:\te8 00 00 00 00       \tcallq  b86 <create_bundle+0xbb>\n     b86:\tc7 05 00 00 00 00 00 \tmovl   $0x0,0x0(%rip)        # b90 <create_bundle+0xc5>\n     b8d:\t00 00 00 \n     b90:\t48 8d 85 60 f6 ff ff \tlea    -0x9a0(%rbp),%rax\n     b97:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     b9c:\t48 89 c7             \tmov    %rax,%rdi\n     b9f:\te8 00 00 00 00       \tcallq  ba4 <create_bundle+0xd9>\n     ba4:\t8b 85 bc f5 ff ff    \tmov    -0xa44(%rbp),%eax\n     baa:\t48 98                \tcltq   \n     bac:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     bb3:\t00 \n     bb4:\t48 8b 85 b0 f5 ff ff \tmov    -0xa50(%rbp),%rax\n     bbb:\t48 8d 48 08          \tlea    0x8(%rax),%rcx\n     bbf:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bc3:\t48 83 c0 18          \tadd    $0x18,%rax\n     bc7:\t48 89 ce             \tmov    %rcx,%rsi\n     bca:\t48 89 c7             \tmov    %rax,%rdi\n     bcd:\te8 00 00 00 00       \tcallq  bd2 <create_bundle+0x107>\n     bd2:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bd6:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     bdd:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     be1:\t48 83 c0 08          \tadd    $0x8,%rax\n     be5:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     bec:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     bf0:\t48 83 c0 10          \tadd    $0x10,%rax\n     bf4:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     bfb:\t8b 85 bc f5 ff ff    \tmov    -0xa44(%rbp),%eax\n     c01:\t48 98                \tcltq   \n     c03:\t48 83 c0 02          \tadd    $0x2,%rax\n     c07:\t48 8d 14 c5 00 00 00 \tlea    0x0(,%rax,8),%rdx\n     c0e:\t00 \n     c0f:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c13:\t48 01 d0             \tadd    %rdx,%rax\n     c16:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n     c1d:\t48 8d 85 20 f6 ff ff \tlea    -0x9e0(%rbp),%rax\n     c24:\tba 38 00 00 00       \tmov    $0x38,%edx\n     c29:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c2e:\t48 89 c7             \tmov    %rax,%rdi\n     c31:\te8 00 00 00 00       \tcallq  c36 <create_bundle+0x16b>\n     c36:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     c3a:\t48 89 85 20 f6 ff ff \tmov    %rax,-0x9e0(%rbp)\n     c41:\tc7 85 30 f6 ff ff ff \tmovl   $0xffffffff,-0x9d0(%rbp)\n     c48:\tff ff ff \n     c4b:\t0f b6 85 48 f6 ff ff \tmovzbl -0x9b8(%rbp),%eax\n     c52:\t83 c8 08             \tor     $0x8,%eax\n     c55:\t88 85 48 f6 ff ff    \tmov    %al,-0x9b8(%rbp)\n     c5b:\t48 8d 85 20 f6 ff ff \tlea    -0x9e0(%rbp),%rax\n     c62:\t48 89 c7             \tmov    %rax,%rdi\n     c65:\te8 00 00 00 00       \tcallq  c6a <create_bundle+0x19f>\n     c6a:\t85 c0                \ttest   %eax,%eax\n     c6c:\t74 0a                \tje     c78 <create_bundle+0x1ad>\n     c6e:\tb8 ff ff ff ff       \tmov    $0xffffffff,%eax\n     c73:\te9 a1 06 00 00       \tjmpq   1319 <create_bundle+0x84e>\n     c78:\t8b 85 30 f6 ff ff    \tmov    -0x9d0(%rbp),%eax\n     c7e:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     c83:\t89 c7                \tmov    %eax,%edi\n     c85:\te8 00 00 00 00       \tcallq  c8a <create_bundle+0x1bf>\n     c8a:\t48 89 45 d0          \tmov    %rax,-0x30(%rbp)\n     c8e:\te9 fc 00 00 00       \tjmpq   d8f <create_bundle+0x2c4>\n     c93:\t0f b6 85 90 fb ff ff \tmovzbl -0x470(%rbp),%eax\n     c9a:\t3c 2d                \tcmp    $0x2d,%al\n     c9c:\t0f 85 9d 00 00 00    \tjne    d3f <create_bundle+0x274>\n     ca2:\t48 8d 85 90 fb ff ff \tlea    -0x470(%rbp),%rax\n     ca9:\t48 89 c7             \tmov    %rax,%rdi\n     cac:\te8 00 00 00 00       \tcallq  cb1 <create_bundle+0x1e6>\n     cb1:\t48 89 c2             \tmov    %rax,%rdx\n     cb4:\t48 8d 8d 90 fb ff ff \tlea    -0x470(%rbp),%rcx\n     cbb:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     cbe:\t48 89 ce             \tmov    %rcx,%rsi\n     cc1:\t89 c7                \tmov    %eax,%edi\n     cc3:\te8 00 00 00 00       \tcallq  cc8 <create_bundle+0x1fd>\n     cc8:\t48 8d 85 90 fb ff ff \tlea    -0x470(%rbp),%rax\n     ccf:\t48 83 c0 01          \tadd    $0x1,%rax\n     cd3:\t48 8d 95 00 f6 ff ff \tlea    -0xa00(%rbp),%rdx\n     cda:\t48 89 d6             \tmov    %rdx,%rsi\n     cdd:\t48 89 c7             \tmov    %rax,%rdi\n     ce0:\te8 00 00 00 00       \tcallq  ce5 <create_bundle+0x21a>\n     ce5:\t85 c0                \ttest   %eax,%eax\n     ce7:\t0f 85 a2 00 00 00    \tjne    d8f <create_bundle+0x2c4>\n     ced:\t48 8d 85 00 f6 ff ff \tlea    -0xa00(%rbp),%rax\n     cf4:\t48 89 c7             \tmov    %rax,%rdi\n     cf7:\te8 00 00 00 00       \tcallq  cfc <create_bundle+0x231>\n     cfc:\t48 89 45 98          \tmov    %rax,-0x68(%rbp)\n     d00:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     d04:\t8b 00                \tmov    (%rax),%eax\n     d06:\tc1 e8 05             \tshr    $0x5,%eax\n     d09:\t83 c8 02             \tor     $0x2,%eax\n     d0c:\t89 c2                \tmov    %eax,%edx\n     d0e:\t48 8b 45 98          \tmov    -0x68(%rbp),%rax\n     d12:\t89 d1                \tmov    %edx,%ecx\n     d14:\tc1 e1 05             \tshl    $0x5,%ecx\n     d17:\t8b 10                \tmov    (%rax),%edx\n     d19:\t83 e2 1f             \tand    $0x1f,%edx\n     d1c:\t09 ca                \tor     %ecx,%edx\n     d1e:\t89 10                \tmov    %edx,(%rax)\n     d20:\t48 8d 95 90 fb ff ff \tlea    -0x470(%rbp),%rdx\n     d27:\t48 8b 4d 98          \tmov    -0x68(%rbp),%rcx\n     d2b:\t48 8d 85 60 f6 ff ff \tlea    -0x9a0(%rbp),%rax\n     d32:\t48 89 ce             \tmov    %rcx,%rsi\n     d35:\t48 89 c7             \tmov    %rax,%rdi\n     d38:\te8 00 00 00 00       \tcallq  d3d <create_bundle+0x272>\n     d3d:\teb 50                \tjmp    d8f <create_bundle+0x2c4>\n     d3f:\t48 8d 95 00 f6 ff ff \tlea    -0xa00(%rbp),%rdx\n     d46:\t48 8d 85 90 fb ff ff \tlea    -0x470(%rbp),%rax\n     d4d:\t48 89 d6             \tmov    %rdx,%rsi\n     d50:\t48 89 c7             \tmov    %rax,%rdi\n     d53:\te8 00 00 00 00       \tcallq  d58 <create_bundle+0x28d>\n     d58:\t85 c0                \ttest   %eax,%eax\n     d5a:\t75 33                \tjne    d8f <create_bundle+0x2c4>\n     d5c:\t48 8d 85 00 f6 ff ff \tlea    -0xa00(%rbp),%rax\n     d63:\t48 89 c7             \tmov    %rax,%rdi\n     d66:\te8 00 00 00 00       \tcallq  d6b <create_bundle+0x2a0>\n     d6b:\t48 89 45 a0          \tmov    %rax,-0x60(%rbp)\n     d6f:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     d73:\t8b 00                \tmov    (%rax),%eax\n     d75:\tc1 e8 05             \tshr    $0x5,%eax\n     d78:\t83 c8 08             \tor     $0x8,%eax\n     d7b:\t89 c2                \tmov    %eax,%edx\n     d7d:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n     d81:\t89 d1                \tmov    %edx,%ecx\n     d83:\tc1 e1 05             \tshl    $0x5,%ecx\n     d86:\t8b 10                \tmov    (%rax),%edx\n     d88:\t83 e2 1f             \tand    $0x1f,%edx\n     d8b:\t09 ca                \tor     %ecx,%edx\n     d8d:\t89 10                \tmov    %edx,(%rax)\n     d8f:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n     d93:\t48 8d 85 90 fb ff ff \tlea    -0x470(%rbp),%rax\n     d9a:\tbe 00 04 00 00       \tmov    $0x400,%esi\n     d9f:\t48 89 c7             \tmov    %rax,%rdi\n     da2:\te8 00 00 00 00       \tcallq  da7 <create_bundle+0x2dc>\n     da7:\t48 85 c0             \ttest   %rax,%rax\n     daa:\t0f 85 e3 fe ff ff    \tjne    c93 <create_bundle+0x1c8>\n     db0:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n     db4:\t48 89 c7             \tmov    %rax,%rdi\n     db7:\te8 00 00 00 00       \tcallq  dbc <create_bundle+0x2f1>\n     dbc:\t48 8d 85 20 f6 ff ff \tlea    -0x9e0(%rbp),%rax\n     dc3:\t48 89 c7             \tmov    %rax,%rdi\n     dc6:\te8 00 00 00 00       \tcallq  dcb <create_bundle+0x300>\n     dcb:\t85 c0                \ttest   %eax,%eax\n     dcd:\t74 14                \tje     de3 <create_bundle+0x318>\n     dcf:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     dd4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     dd9:\te8 00 00 00 00       \tcallq  dde <create_bundle+0x313>\n     dde:\te9 36 05 00 00       \tjmpq   1319 <create_bundle+0x84e>\n     de3:\t48 8d 95 60 f6 ff ff \tlea    -0x9a0(%rbp),%rdx\n     dea:\t48 8b b5 b0 f5 ff ff \tmov    -0xa50(%rbp),%rsi\n     df1:\t8b 85 bc f5 ff ff    \tmov    -0xa44(%rbp),%eax\n     df7:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     dfc:\t89 c7                \tmov    %eax,%edi\n     dfe:\te8 00 00 00 00       \tcallq  e03 <create_bundle+0x338>\n     e03:\t89 85 bc f5 ff ff    \tmov    %eax,-0xa44(%rbp)\n     e09:\t83 bd bc f5 ff ff 01 \tcmpl   $0x1,-0xa44(%rbp)\n     e10:\t7e 25                \tjle    e37 <create_bundle+0x36c>\n     e12:\t48 8b 85 b0 f5 ff ff \tmov    -0xa50(%rbp),%rax\n     e19:\t48 83 c0 08          \tadd    $0x8,%rax\n     e1d:\t48 8b 00             \tmov    (%rax),%rax\n     e20:\t48 89 c6             \tmov    %rax,%rsi\n     e23:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     e28:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e2d:\te8 00 00 00 00       \tcallq  e32 <create_bundle+0x367>\n     e32:\te9 e2 04 00 00       \tjmpq   1319 <create_bundle+0x84e>\n     e37:\t48 8d 85 60 f6 ff ff \tlea    -0x9a0(%rbp),%rax\n     e3e:\t48 83 c0 08          \tadd    $0x8,%rax\n     e42:\t48 89 c7             \tmov    %rax,%rdi\n     e45:\te8 00 00 00 00       \tcallq  e4a <create_bundle+0x37f>\n     e4a:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n     e51:\te9 ad 02 00 00       \tjmpq   1103 <create_bundle+0x638>\n     e56:\t48 8b 8d 70 f6 ff ff \tmov    -0x990(%rbp),%rcx\n     e5d:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     e60:\t48 63 d0             \tmovslq %eax,%rdx\n     e63:\t48 89 d0             \tmov    %rdx,%rax\n     e66:\t48 01 c0             \tadd    %rax,%rax\n     e69:\t48 01 d0             \tadd    %rdx,%rax\n     e6c:\t48 c1 e0 03          \tshl    $0x3,%rax\n     e70:\t48 01 c8             \tadd    %rcx,%rax\n     e73:\t48 89 45 c0          \tmov    %rax,-0x40(%rbp)\n     e77:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     e7b:\t48 8b 00             \tmov    (%rax),%rax\n     e7e:\t8b 00                \tmov    (%rax),%eax\n     e80:\tc1 e8 05             \tshr    $0x5,%eax\n     e83:\t83 e0 02             \tand    $0x2,%eax\n     e86:\t85 c0                \ttest   %eax,%eax\n     e88:\t0f 85 6d 02 00 00    \tjne    10fb <create_bundle+0x630>\n     e8e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     e92:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     e96:\t48 89 c7             \tmov    %rax,%rdi\n     e99:\te8 00 00 00 00       \tcallq  e9e <create_bundle+0x3d3>\n     e9e:\t89 c6                \tmov    %eax,%esi\n     ea0:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     ea4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     ea8:\t48 8d 8d d8 f5 ff ff \tlea    -0xa28(%rbp),%rcx\n     eaf:\t48 8d 95 e0 f5 ff ff \tlea    -0xa20(%rbp),%rdx\n     eb6:\t48 89 c7             \tmov    %rax,%rdi\n     eb9:\te8 00 00 00 00       \tcallq  ebe <create_bundle+0x3f3>\n     ebe:\t83 f8 01             \tcmp    $0x1,%eax\n     ec1:\t0f 85 37 02 00 00    \tjne    10fe <create_bundle+0x633>\n     ec7:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     ecb:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     ecf:\t48 8d 95 d4 f5 ff ff \tlea    -0xa2c(%rbp),%rdx\n     ed6:\t48 8d b5 e0 f5 ff ff \tlea    -0xa20(%rbp),%rsi\n     edd:\t48 89 d1             \tmov    %rdx,%rcx\n     ee0:\tba 01 00 00 00       \tmov    $0x1,%edx\n     ee5:\t48 89 c7             \tmov    %rax,%rdi\n     ee8:\te8 00 00 00 00       \tcallq  eed <create_bundle+0x422>\n     eed:\t48 85 c0             \ttest   %rax,%rax\n     ef0:\t75 0a                \tjne    efc <create_bundle+0x431>\n     ef2:\tc7 85 d4 f5 ff ff 00 \tmovl   $0x0,-0xa2c(%rbp)\n     ef9:\t00 00 00 \n     efc:\t8b 85 d4 f5 ff ff    \tmov    -0xa2c(%rbp),%eax\n     f02:\t83 e0 01             \tand    $0x1,%eax\n     f05:\t85 c0                \ttest   %eax,%eax\n     f07:\t74 0a                \tje     f13 <create_bundle+0x448>\n     f09:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f0d:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     f11:\teb 07                \tjmp    f1a <create_bundle+0x44f>\n     f13:\t48 8b 85 d8 f5 ff ff \tmov    -0xa28(%rbp),%rax\n     f1a:\t48 89 45 b8          \tmov    %rax,-0x48(%rbp)\n     f1e:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f22:\t48 8b 00             \tmov    (%rax),%rax\n     f25:\t0f b6 00             \tmovzbl (%rax),%eax\n     f28:\t83 e0 1c             \tand    $0x1c,%eax\n     f2b:\t3c 10                \tcmp    $0x10,%al\n     f2d:\t75 48                \tjne    f77 <create_bundle+0x4ac>\n     f2f:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f33:\t48 8b 00             \tmov    (%rax),%rax\n     f36:\t48 8d 95 60 f6 ff ff \tlea    -0x9a0(%rbp),%rdx\n     f3d:\t48 89 d6             \tmov    %rdx,%rsi\n     f40:\t48 89 c7             \tmov    %rax,%rdi\n     f43:\te8 eb f9 ff ff       \tcallq  933 <is_tag_in_date_range>\n     f48:\t85 c0                \ttest   %eax,%eax\n     f4a:\t75 2b                \tjne    f77 <create_bundle+0x4ac>\n     f4c:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f50:\t48 8b 00             \tmov    (%rax),%rax\n     f53:\t8b 00                \tmov    (%rax),%eax\n     f55:\tc1 e8 05             \tshr    $0x5,%eax\n     f58:\t89 c2                \tmov    %eax,%edx\n     f5a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f5e:\t48 8b 00             \tmov    (%rax),%rax\n     f61:\t83 ca 02             \tor     $0x2,%edx\n     f64:\t89 d1                \tmov    %edx,%ecx\n     f66:\tc1 e1 05             \tshl    $0x5,%ecx\n     f69:\t8b 10                \tmov    (%rax),%edx\n     f6b:\t83 e2 1f             \tand    $0x1f,%edx\n     f6e:\t09 ca                \tor     %ecx,%edx\n     f70:\t89 10                \tmov    %edx,(%rax)\n     f72:\te9 88 01 00 00       \tjmpq   10ff <create_bundle+0x634>\n     f77:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f7b:\t48 8b 00             \tmov    (%rax),%rax\n     f7e:\t8b 00                \tmov    (%rax),%eax\n     f80:\tc1 e8 05             \tshr    $0x5,%eax\n     f83:\t83 e0 08             \tand    $0x8,%eax\n     f86:\t85 c0                \ttest   %eax,%eax\n     f88:\t75 3f                \tjne    fc9 <create_bundle+0x4fe>\n     f8a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f8e:\t48 8b 00             \tmov    (%rax),%rax\n     f91:\t0f b6 00             \tmovzbl (%rax),%eax\n     f94:\t83 e0 1c             \tand    $0x1c,%eax\n     f97:\t3c 04                \tcmp    $0x4,%al\n     f99:\t75 2e                \tjne    fc9 <create_bundle+0x4fe>\n     f9b:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     f9f:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n     fa3:\t48 89 c6             \tmov    %rax,%rsi\n     fa6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     fab:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     fb0:\te8 00 00 00 00       \tcallq  fb5 <create_bundle+0x4ea>\n     fb5:\t48 8b 85 d8 f5 ff ff \tmov    -0xa28(%rbp),%rax\n     fbc:\t48 89 c7             \tmov    %rax,%rdi\n     fbf:\te8 00 00 00 00       \tcallq  fc4 <create_bundle+0x4f9>\n     fc4:\te9 36 01 00 00       \tjmpq   10ff <create_bundle+0x634>\n     fc9:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n     fcd:\t48 8b 00             \tmov    (%rax),%rax\n     fd0:\t48 8d 50 04          \tlea    0x4(%rax),%rdx\n     fd4:\t48 8d 85 e0 f5 ff ff \tlea    -0xa20(%rbp),%rax\n     fdb:\t48 89 d6             \tmov    %rdx,%rsi\n     fde:\t48 89 c7             \tmov    %rax,%rdi\n     fe1:\te8 1a f0 ff ff       \tcallq  0 <hashcmp>\n     fe6:\t85 c0                \ttest   %eax,%eax\n     fe8:\t0f 84 88 00 00 00    \tje     1076 <create_bundle+0x5ab>\n     fee:\t48 8d 85 e0 f5 ff ff \tlea    -0xa20(%rbp),%rax\n     ff5:\t48 89 c7             \tmov    %rax,%rdi\n     ff8:\te8 00 00 00 00       \tcallq  ffd <create_bundle+0x532>\n     ffd:\t48 89 45 b0          \tmov    %rax,-0x50(%rbp)\n    1001:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1005:\t48 8b 10             \tmov    (%rax),%rdx\n    1008:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    100c:\t48 39 c2             \tcmp    %rax,%rdx\n    100f:\t75 51                \tjne    1062 <create_bundle+0x597>\n    1011:\t48 8d 85 e0 f5 ff ff \tlea    -0xa20(%rbp),%rax\n    1018:\t48 89 c7             \tmov    %rax,%rdi\n    101b:\te8 00 00 00 00       \tcallq  1020 <create_bundle+0x555>\n    1020:\t48 89 45 a8          \tmov    %rax,-0x58(%rbp)\n    1024:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1028:\t8b 00                \tmov    (%rax),%eax\n    102a:\tc1 e8 05             \tshr    $0x5,%eax\n    102d:\t83 c8 08             \tor     $0x8,%eax\n    1030:\t89 c2                \tmov    %eax,%edx\n    1032:\t48 8b 45 a8          \tmov    -0x58(%rbp),%rax\n    1036:\t89 d1                \tmov    %edx,%ecx\n    1038:\tc1 e1 05             \tshl    $0x5,%ecx\n    103b:\t8b 10                \tmov    (%rax),%edx\n    103d:\t83 e2 1f             \tand    $0x1f,%edx\n    1040:\t09 ca                \tor     %ecx,%edx\n    1042:\t89 10                \tmov    %edx,(%rax)\n    1044:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    1048:\t48 8b 50 08          \tmov    0x8(%rax),%rdx\n    104c:\t48 8b 4d a8          \tmov    -0x58(%rbp),%rcx\n    1050:\t48 8d 85 60 f6 ff ff \tlea    -0x9a0(%rbp),%rax\n    1057:\t48 89 ce             \tmov    %rcx,%rsi\n    105a:\t48 89 c7             \tmov    %rax,%rdi\n    105d:\te8 00 00 00 00       \tcallq  1062 <create_bundle+0x597>\n    1062:\t48 8b 85 d8 f5 ff ff \tmov    -0xa28(%rbp),%rax\n    1069:\t48 89 c7             \tmov    %rax,%rdi\n    106c:\te8 00 00 00 00       \tcallq  1071 <create_bundle+0x5a6>\n    1071:\te9 89 00 00 00       \tjmpq   10ff <create_bundle+0x634>\n    1076:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n    107a:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n    107e:\t48 8b 00             \tmov    (%rax),%rax\n    1081:\t48 83 c0 04          \tadd    $0x4,%rax\n    1085:\t48 89 c7             \tmov    %rax,%rdi\n    1088:\te8 00 00 00 00       \tcallq  108d <create_bundle+0x5c2>\n    108d:\t48 89 c1             \tmov    %rax,%rcx\n    1090:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    1093:\tba 28 00 00 00       \tmov    $0x28,%edx\n    1098:\t48 89 ce             \tmov    %rcx,%rsi\n    109b:\t89 c7                \tmov    %eax,%edi\n    109d:\te8 00 00 00 00       \tcallq  10a2 <create_bundle+0x5d7>\n    10a2:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    10a5:\tba 01 00 00 00       \tmov    $0x1,%edx\n    10aa:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    10af:\t89 c7                \tmov    %eax,%edi\n    10b1:\te8 00 00 00 00       \tcallq  10b6 <create_bundle+0x5eb>\n    10b6:\t48 8b 45 b8          \tmov    -0x48(%rbp),%rax\n    10ba:\t48 89 c7             \tmov    %rax,%rdi\n    10bd:\te8 00 00 00 00       \tcallq  10c2 <create_bundle+0x5f7>\n    10c2:\t48 89 c2             \tmov    %rax,%rdx\n    10c5:\t48 8b 4d b8          \tmov    -0x48(%rbp),%rcx\n    10c9:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    10cc:\t48 89 ce             \tmov    %rcx,%rsi\n    10cf:\t89 c7                \tmov    %eax,%edi\n    10d1:\te8 00 00 00 00       \tcallq  10d6 <create_bundle+0x60b>\n    10d6:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    10d9:\tba 01 00 00 00       \tmov    $0x1,%edx\n    10de:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    10e3:\t89 c7                \tmov    %eax,%edi\n    10e5:\te8 00 00 00 00       \tcallq  10ea <create_bundle+0x61f>\n    10ea:\t48 8b 85 d8 f5 ff ff \tmov    -0xa28(%rbp),%rax\n    10f1:\t48 89 c7             \tmov    %rax,%rdi\n    10f4:\te8 00 00 00 00       \tcallq  10f9 <create_bundle+0x62e>\n    10f9:\teb 04                \tjmp    10ff <create_bundle+0x634>\n    10fb:\t90                   \tnop\n    10fc:\teb 01                \tjmp    10ff <create_bundle+0x634>\n    10fe:\t90                   \tnop\n    10ff:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n    1103:\t8b 95 68 f6 ff ff    \tmov    -0x998(%rbp),%edx\n    1109:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    110c:\t39 c2                \tcmp    %eax,%edx\n    110e:\t0f 87 42 fd ff ff    \tja     e56 <create_bundle+0x38b>\n    1114:\t83 7d f4 00          \tcmpl   $0x0,-0xc(%rbp)\n    1118:\t75 0f                \tjne    1129 <create_bundle+0x65e>\n    111a:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    111f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1124:\te8 00 00 00 00       \tcallq  1129 <create_bundle+0x65e>\n    1129:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    112c:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1131:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    1136:\t89 c7                \tmov    %eax,%edi\n    1138:\te8 00 00 00 00       \tcallq  113d <create_bundle+0x672>\n    113d:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1141:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    1148:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    114c:\t48 83 c0 08          \tadd    $0x8,%rax\n    1150:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    1157:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    115b:\t48 83 c0 10          \tadd    $0x10,%rax\n    115f:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    1166:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    116a:\t48 83 c0 18          \tadd    $0x18,%rax\n    116e:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    1175:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1179:\t48 83 c0 20          \tadd    $0x20,%rax\n    117d:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    1184:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    1188:\t48 83 c0 28          \tadd    $0x28,%rax\n    118c:\t48 c7 00 00 00 00 00 \tmovq   $0x0,(%rax)\n    1193:\t48 8d 85 20 f6 ff ff \tlea    -0x9e0(%rbp),%rax\n    119a:\tba 38 00 00 00       \tmov    $0x38,%edx\n    119f:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    11a4:\t48 89 c7             \tmov    %rax,%rdi\n    11a7:\te8 00 00 00 00       \tcallq  11ac <create_bundle+0x6e1>\n    11ac:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    11b0:\t48 89 85 20 f6 ff ff \tmov    %rax,-0x9e0(%rbp)\n    11b7:\tc7 85 2c f6 ff ff ff \tmovl   $0xffffffff,-0x9d4(%rbp)\n    11be:\tff ff ff \n    11c1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    11c4:\t89 85 30 f6 ff ff    \tmov    %eax,-0x9d0(%rbp)\n    11ca:\t0f b6 85 48 f6 ff ff \tmovzbl -0x9b8(%rbp),%eax\n    11d1:\t83 c8 08             \tor     $0x8,%eax\n    11d4:\t88 85 48 f6 ff ff    \tmov    %al,-0x9b8(%rbp)\n    11da:\t48 8d 85 20 f6 ff ff \tlea    -0x9e0(%rbp),%rax\n    11e1:\t48 89 c7             \tmov    %rax,%rdi\n    11e4:\te8 00 00 00 00       \tcallq  11e9 <create_bundle+0x71e>\n    11e9:\t85 c0                \ttest   %eax,%eax\n    11eb:\t74 14                \tje     1201 <create_bundle+0x736>\n    11ed:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    11f2:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    11f7:\te8 00 00 00 00       \tcallq  11fc <create_bundle+0x731>\n    11fc:\te9 18 01 00 00       \tjmpq   1319 <create_bundle+0x84e>\n    1201:\tc7 05 00 00 00 00 ff \tmovl   $0xffffffff,0x0(%rip)        # 120b <create_bundle+0x740>\n    1208:\tff ff ff \n    120b:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n    1212:\te9 8e 00 00 00       \tjmpq   12a5 <create_bundle+0x7da>\n    1217:\t48 8b 8d 70 f6 ff ff \tmov    -0x990(%rbp),%rcx\n    121e:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    1221:\t48 63 d0             \tmovslq %eax,%rdx\n    1224:\t48 89 d0             \tmov    %rdx,%rax\n    1227:\t48 01 c0             \tadd    %rax,%rax\n    122a:\t48 01 d0             \tadd    %rdx,%rax\n    122d:\t48 c1 e0 03          \tshl    $0x3,%rax\n    1231:\t48 01 c8             \tadd    %rcx,%rax\n    1234:\t48 8b 00             \tmov    (%rax),%rax\n    1237:\t48 89 45 c8          \tmov    %rax,-0x38(%rbp)\n    123b:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    123f:\t8b 00                \tmov    (%rax),%eax\n    1241:\tc1 e8 05             \tshr    $0x5,%eax\n    1244:\t83 e0 02             \tand    $0x2,%eax\n    1247:\t85 c0                \ttest   %eax,%eax\n    1249:\t74 17                \tje     1262 <create_bundle+0x797>\n    124b:\t8b 85 2c f6 ff ff    \tmov    -0x9d4(%rbp),%eax\n    1251:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1256:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    125b:\t89 c7                \tmov    %eax,%edi\n    125d:\te8 00 00 00 00       \tcallq  1262 <create_bundle+0x797>\n    1262:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n    1266:\t48 83 c0 04          \tadd    $0x4,%rax\n    126a:\t48 89 c7             \tmov    %rax,%rdi\n    126d:\te8 00 00 00 00       \tcallq  1272 <create_bundle+0x7a7>\n    1272:\t48 89 c1             \tmov    %rax,%rcx\n    1275:\t8b 85 2c f6 ff ff    \tmov    -0x9d4(%rbp),%eax\n    127b:\tba 28 00 00 00       \tmov    $0x28,%edx\n    1280:\t48 89 ce             \tmov    %rcx,%rsi\n    1283:\t89 c7                \tmov    %eax,%edi\n    1285:\te8 00 00 00 00       \tcallq  128a <create_bundle+0x7bf>\n    128a:\t8b 85 2c f6 ff ff    \tmov    -0x9d4(%rbp),%eax\n    1290:\tba 01 00 00 00       \tmov    $0x1,%edx\n    1295:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    129a:\t89 c7                \tmov    %eax,%edi\n    129c:\te8 00 00 00 00       \tcallq  12a1 <create_bundle+0x7d6>\n    12a1:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n    12a5:\t8b 95 68 f6 ff ff    \tmov    -0x998(%rbp),%edx\n    12ab:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n    12ae:\t39 c2                \tcmp    %eax,%edx\n    12b0:\t0f 87 61 ff ff ff    \tja     1217 <create_bundle+0x74c>\n    12b6:\t8b 85 2c f6 ff ff    \tmov    -0x9d4(%rbp),%eax\n    12bc:\t89 c7                \tmov    %eax,%edi\n    12be:\te8 00 00 00 00       \tcallq  12c3 <create_bundle+0x7f8>\n    12c3:\t48 8d 85 20 f6 ff ff \tlea    -0x9e0(%rbp),%rax\n    12ca:\t48 89 c7             \tmov    %rax,%rdi\n    12cd:\te8 00 00 00 00       \tcallq  12d2 <create_bundle+0x807>\n    12d2:\t85 c0                \ttest   %eax,%eax\n    12d4:\t74 11                \tje     12e7 <create_bundle+0x81c>\n    12d6:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    12db:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    12e0:\te8 00 00 00 00       \tcallq  12e5 <create_bundle+0x81a>\n    12e5:\teb 32                \tjmp    1319 <create_bundle+0x84e>\n    12e7:\t83 7d dc 00          \tcmpl   $0x0,-0x24(%rbp)\n    12eb:\t75 27                \tjne    1314 <create_bundle+0x849>\n    12ed:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    12f2:\te8 00 00 00 00       \tcallq  12f7 <create_bundle+0x82c>\n    12f7:\t85 c0                \ttest   %eax,%eax\n    12f9:\t74 19                \tje     1314 <create_bundle+0x849>\n    12fb:\t48 8b 85 c0 f5 ff ff \tmov    -0xa40(%rbp),%rax\n    1302:\t48 89 c6             \tmov    %rax,%rsi\n    1305:\tbf 00 00 00 00       \tmov    $0x0,%edi\n    130a:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    130f:\te8 00 00 00 00       \tcallq  1314 <create_bundle+0x849>\n    1314:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1319:\tc9                   \tleaveq \n    131a:\tc3                   \tretq   ", "code_s": "void __fastcall create_bundle(__int64 a1, const char *a2, unsigned int a3,\n                              __int64 a4) {\n  int v4;\n  size_t v5;\n  const char *v6;\n  const char *v7;\n  unsigned int v8;\n  char *v9;\n  __int64 v10;\n  size_t v11;\n  const char *v12;\n  const char *v13;\n  __int64 v14;\n  const char *v15;\n  int v19;\n  void *ptr;\n  char v21[Number];\n  char v22[Number];\n  __int64 <span class=\"supfact\">s</span>[Number];\n  char <span class=\"supfact\">v24</span>[Number];\n  unsigned int v25;\n  __int64 v26;\n  char v27;\n  _BYTE v28[Number];\n  int *v29;\n  int *v30;\n  int *v31;\n  const char *v32;\n  char *v33;\n  const char **v34;\n  _DWORD *v35;\n  FILE *stream;\n  _BOOL4 v37;\n  _QWORD *v38;\n  _QWORD *v39;\n  int v40;\n  unsigned int i;\n  unsigned int v42;\n  v42 = Number;\n  v39 = (_QWORD *)xmalloc(Number L * (int)(a3 + Number));\n  v38 = (_QWORD *)xmalloc(Number L);\n  v40 = Number;\n  v4 = strcmp(a2, String);\n  v37 = v4 == Number;\n  if (v4)\n    v42 = hold_lock_file_for_update(&lock_25791, a2, Number L);\n  else\n    v42 = Number;\n  write_or_die(v42, String, Number L);\n  save_commit_buffer = Number;\n  init_revisions(<span class=\"supfact\">v24</span>, Number L);\n  memcpy(v39 + Number, (const void *)(a4 + Number), Number L * (int)a3);\n  *v39 = String;\n  v39[Number] = String;\n  v39[Number] = String;\n  v39[(int)a3 + Number] = Number L;\n  memset(<span class=\"supfact\">s</span>, Number, Number);\n  <span class=\"supfact\">s</span>[Number] = (__int64)v39;\n  LODWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n  LOBYTE(<span class=\"supfact\">s</span>[Number]) |= Number;\n  if (!(unsigned int)start_command(<span class=\"supfact\">s</span>)) {\n    stream = (FILE *)xfdopen(LODWORD(<span class=\"supfact\">s</span>[Number]), String);\n    while (fgets(&v27, Number, stream)) {\n      if (v27 == Number) {\n        v5 = strlen(&v27);\n        write_or_die(v42, &v27, v5);\n        if (!(unsigned int)get_sha1_hex(v28, v22)) {\n          v29 = (int *)parse_object(v22);\n          *v29 = (Number * (((unsigned int)*v29 >> Number) | Number)) |\n                 *v29 & Number;\n          add_pending_object(<span class=\"supfact\">v24</span>, v29, &v27);\n        }\n      } else if (!(unsigned int)get_sha1_hex(&v27, v22)) {\n        v30 = (int *)parse_object(v22);\n        *v30 = (Number * (((unsigned int)*v30 >> Number) | Number)) |\n               *v30 & Number;\n      }\n    }\n    fclose(stream);\n    if ((unsigned int)finish_command(<span class=\"supfact\">s</span>)) {\n      error((int)String, Number, v6);\n    } else if ((int)setup_revisions(a3, a4, <span class=\"supfact\">v24</span>, Number L) <=\n               Number) {\n      object_array_remove_duplicates(&v25);\n      for (i = Number; v25 > i; ++i) {\n        v34 = (const char **)(v26 + Number L * (int)i);\n        if (((*(_DWORD *)*v34 >> Number) & Number) == Number) {\n          v8 = strlen(v34[Number]);\n          if ((unsigned int)dwim_ref(v34[Number], v8, v21, &ptr) == Number) {\n            if (!resolve_ref(v34[Number], v21, Number L, &v19))\n              v19 = Number;\n            if ((v19 & Number) != Number)\n              v9 = (char *)v34[Number];\n            else\n              v9 = (char *)ptr;\n            v33 = v9;\n            if ((**v34 & Number) != Number ||\n                is_tag_in_date_range((__int64)*v34,\n                                     (__int64)<span class=\"supfact\">v24</span>)) {\n              if (((*(_DWORD *)*v34 >> Number) & Number) != Number ||\n                  (**v34 & Number) != Number) {\n                if (hashcmp(v21, *v34 + Number)) {\n                  v32 = (const char *)lookup_commit_reference(v21);\n                  if (*v34 == v32) {\n                    v31 = (int *)parse_object(v21);\n                    *v31 =\n                        (Number * (((unsigned int)*v31 >> Number) | Number)) |\n                        *v31 & Number;\n                    add_pending_object(<span class=\"supfact\">v24</span>, v31, v34[Number]);\n                  }\n                  free(ptr);\n                } else {\n                  ++v40;\n                  v10 = sha1_to_hex(*v34 + Number);\n                  write_or_die(v42, v10, Number L);\n                  write_or_die(v42, String, Number L);\n                  v11 = strlen(v33);\n                  write_or_die(v42, v33, v11);\n                  write_or_die(v42, String, Number L);\n                  free(ptr);\n                }\n              } else {\n                warning(String, v34[Number]);\n                free(ptr);\n              }\n            } else {\n              *(_DWORD *)*v34 =\n                  (Number * ((*(_DWORD *)*v34 >> Number) | Number)) |\n                  *(_DWORD *)*v34 & Number;\n            }\n          }\n        }\n      }\n      if (!v40)\n        die(String);\n      write_or_die(v42, String, Number L);\n      *v38 = String;\n      v38[Number] = String;\n      v38[Number] = String;\n      v38[Number] = String;\n      v38[Number] = String;\n      v38[Number] = Number L;\n      LODWORD(v12) = Number;\n      memset(<span class=\"supfact\">s</span>, Number, Number);\n      <span class=\"supfact\">s</span>[Number] = (__int64)v38;\n      HIDWORD(<span class=\"supfact\">s</span>[Number]) = Number;\n      LODWORD(<span class=\"supfact\">s</span>[Number]) = v42;\n      LOBYTE(<span class=\"supfact\">s</span>[Number]) |= Number;\n      if ((unsigned int)start_command(<span class=\"supfact\">s</span>)) {\n        error((int)String, Number, v13);\n      } else {\n        dword_13E8 = Number;\n        for (i = Number; v25 > i; ++i) {\n          v35 = *(_DWORD **)(v26 + Number L * (int)i);\n          if (((*v35 >> Number) & Number) != Number)\n            write_or_die(HIDWORD(<span class=\"supfact\">s</span>[Number]), String, Number L);\n          v14 = sha1_to_hex(v35 + Number);\n          write_or_die(HIDWORD(<span class=\"supfact\">s</span>[Number]), v14, Number L);\n          v12 = String;\n          write_or_die(HIDWORD(<span class=\"supfact\">s</span>[Number]), String, Number L);\n        }\n        close(SHIDWORD(<span class=\"supfact\">s</span>[Number]));\n        if ((unsigned int)finish_command(<span class=\"supfact\">s</span>)) {\n          error((int)String, (int)v12, v15);\n        } else if (!v37) {\n          if ((unsigned int)commit_lock_file(&lock_25791))\n            die_errno(String, a2);\n        }\n      }\n    } else {\n      error((int)String, *(_QWORD *)(a4 + Number), v7);\n    }\n  }\n}", "code_t": "int __cdecl create_bundle(bundle_header *header, const char *path, int argc,\n                          const char **argv) {\n  int v4;\n  int result;\n  size_t v6;\n  const char *v7;\n  const char *v8;\n  unsigned int v9;\n  const char *v10;\n  __int64 v11;\n  size_t v12;\n  const char *v13;\n  const char *v14;\n  __int64 v15;\n  const char *v16;\n  int flag;\n  char *ref;\n  unsigned __int8 sha1_0[Number];\n  unsigned __int8 sha1[Number];\n  child_process <span class=\"supfact\">rls</span>;\n  rev_info <span class=\"supfact\">revs</span>;\n  char buffer[Number];\n  object *object;\n  object *object_0;\n  object *obj;\n  commit *one;\n  const char *display_ref;\n  object_array_entry *e;\n  object *object_1;\n  FILE *rls_fout;\n  int bundle_to_stdout;\n  const char **argv_pack;\n  const char **argv_boundary;\n  int ref_count;\n  int i;\n  int bundle_fd;\n  bundle_fd = Number;\n  argv_boundary = (const char **)xmalloc(Number L * (argc + Number));\n  argv_pack = (const char **)xmalloc(Number L);\n  ref_count = Number;\n  v4 = strcmp(path, String);\n  bundle_to_stdout = v4 == Number;\n  if (v4)\n    bundle_fd = hold_lock_file_for_update(&lock_25791, path, Number L);\n  else\n    bundle_fd = Number;\n  write_or_die((unsigned int)bundle_fd, String, Number L);\n  save_commit_buffer = Number;\n  init_revisions(&<span class=\"supfact\">revs</span>, Number L);\n  memcpy(argv_boundary + Number, argv + Number, Number L * argc);\n  *argv_boundary = String;\n  argv_boundary[Number] = String;\n  argv_boundary[Number] = String;\n  argv_boundary[argc + Number] = Number L;\n  memset(&<span class=\"supfact\">rls</span>, Number, sizeof(<span class=\"supfact\">rls</span>));\n  <span class=\"supfact\">rls</span>.argv = argv_boundary;\n  <span class=\"supfact\">rls</span>.out = Number;\n  *((_BYTE *)&<span class=\"supfact\">rls</span> + Number) |= Number;\n  if ((unsigned int)start_command(&<span class=\"supfact\">rls</span>))\n    return Number;\n  rls_fout = (FILE *)xfdopen((unsigned int)<span class=\"supfact\">rls</span>.out, String);\n  while (fgets(buffer, Number, rls_fout)) {\n    if (buffer[Number] == Number) {\n      v6 = strlen(buffer);\n      write_or_die((unsigned int)bundle_fd, buffer, v6);\n      if (!(unsigned int)get_sha1_hex(&buffer[Number], sha1)) {\n        object = (object *)parse_object(sha1);\n        *(_DWORD *)object =\n            (Number * ((*(_DWORD *)object >> Number) | Number)) |\n            *(_DWORD *)object & Number;\n        add_pending_object(&<span class=\"supfact\">revs</span>, object, buffer);\n      }\n    } else if (!(unsigned int)get_sha1_hex(buffer, sha1)) {\n      object_0 = (object *)parse_object(sha1);\n      *(_DWORD *)object_0 =\n          (Number * ((*(_DWORD *)object_0 >> Number) | Number)) |\n          *(_DWORD *)object_0 & Number;\n    }\n  }\n  fclose(rls_fout);\n  if ((unsigned int)finish_command(&<span class=\"supfact\">rls</span>)) {\n    error((int)String, Number, v7);\n  } else if ((int)setup_revisions((unsigned int)argc, argv,\n                                  &<span class=\"supfact\">revs</span>, Number L) <= Number) {\n    object_array_remove_duplicates(&<span class=\"supfact\">revs</span>.pending);\n    for (i = Number; <span class=\"supfact\">revs</span>.pending.nr > i; ++i) {\n      e = &<span class=\"supfact\">revs</span>.pending.objects[i];\n      if (((*(_DWORD *)e->item >> Number) & Number) == Number) {\n        v9 = strlen(e->name);\n        if ((unsigned int)dwim_ref(e->name, v9, sha1_0, &ref) == Number) {\n          if (!resolve_ref(e->name, sha1_0, Number L, &flag))\n            flag = Number;\n          if ((flag & Number) != Number)\n            v10 = e->name;\n          else\n            v10 = ref;\n          display_ref = v10;\n          if ((*(_BYTE *)e->item & Number) != Number ||\n              is_tag_in_date_range(e->item, &<span class=\"supfact\">revs</span>)) {\n            if (((*(_DWORD *)e->item >> Number) & Number) != Number ||\n                (*(_BYTE *)e->item & Number) != Number) {\n              if (hashcmp(sha1_0, e->item->sha1)) {\n                one = (commit *)lookup_commit_reference(sha1_0);\n                if ((commit *)e->item == one) {\n                  obj = (object *)parse_object(sha1_0);\n                  *(_DWORD *)obj =\n                      (Number * ((*(_DWORD *)obj >> Number) | Number)) |\n                      *(_DWORD *)obj & Number;\n                  add_pending_object(&<span class=\"supfact\">revs</span>, obj, e->name);\n                }\n                free(ref);\n              } else {\n                ++ref_count;\n                v11 = sha1_to_hex(e->item->sha1);\n                write_or_die((unsigned int)bundle_fd, v11, Number L);\n                write_or_die((unsigned int)bundle_fd, String, Number L);\n                v12 = strlen(display_ref);\n                write_or_die((unsigned int)bundle_fd, display_ref, v12);\n                write_or_die((unsigned int)bundle_fd, String, Number L);\n                free(ref);\n              }\n            } else {\n              warning(String, e->name);\n              free(ref);\n            }\n          } else {\n            *(_DWORD *)e->item =\n                (Number * ((*(_DWORD *)e->item >> Number) | Number)) |\n                *(_DWORD *)e->item & Number;\n          }\n        }\n      }\n    }\n    if (!ref_count)\n      die(String);\n    write_or_die((unsigned int)bundle_fd, String, Number L);\n    *argv_pack = String;\n    argv_pack[Number] = String;\n    argv_pack[Number] = String;\n    argv_pack[Number] = String;\n    argv_pack[Number] = String;\n    argv_pack[Number] = Number L;\n    LODWORD(v13) = Number;\n    memset(&<span class=\"supfact\">rls</span>, Number, sizeof(<span class=\"supfact\">rls</span>));\n    <span class=\"supfact\">rls</span>.argv = argv_pack;\n    <span class=\"supfact\">rls</span>.in = Number;\n    <span class=\"supfact\">rls</span>.out = bundle_fd;\n    *((_BYTE *)&<span class=\"supfact\">rls</span> + Number) |= Number;\n    if ((unsigned int)start_command(&<span class=\"supfact\">rls</span>)) {\n      error((int)String, Number, v14);\n    } else {\n      lock_25791.fd = Number;\n      for (i = Number; <span class=\"supfact\">revs</span>.pending.nr > i; ++i) {\n        object_1 = <span class=\"supfact\">revs</span>.pending.objects[i].item;\n        if (((*(_DWORD *)object_1 >> Number) & Number) != Number)\n          write_or_die((unsigned int)<span class=\"supfact\">rls</span>.in, String, Number L);\n        v15 = sha1_to_hex(object_1->sha1);\n        write_or_die((unsigned int)<span class=\"supfact\">rls</span>.in, v15, Number L);\n        v13 = String;\n        write_or_die((unsigned int)<span class=\"supfact\">rls</span>.in, String, Number L);\n      }\n      close(<span class=\"supfact\">rls</span>.in);\n      if ((unsigned int)finish_command(&<span class=\"supfact\">rls</span>)) {\n        error((int)String, (int)v13, v16);\n      } else {\n        if (!bundle_to_stdout) {\n          if ((unsigned int)commit_lock_file(&lock_25791))\n            die_errno(String, path);\n        }\n        result = Number;\n      }\n    }\n  } else {\n    error((int)String, (int)argv[Number], v8);\n  }\n  return result;\n}", "var": [{"name": "s", "type": "__unk__", "pred_name": "__unk__", "ref_name": "rls", "ref_type": "struct child_process { const char ** argv; pid_t pid; int in; int out; int err; const char * dir; const char *const * env; unsigned __int32 : 1 no_stdin; unsigned __int32 : 1 no_stdout; unsigned __int32 : 1 no_stderr; unsigned __int32 : 1 git_cmd; unsigned __int32 : 1 silent_exec_failure; unsigned __int32 : 1 stdout_to_stderr; unsigned __int32 : 1 use_shell; PADDING (7); void (*)(void) preexec_cb; }"}, {"name": "v24", "type": "struct strbuf { size_t alloc; size_t len; char * buf; }", "pred_name": "buffer", "ref_name": "revs", "ref_type": "struct rev_info { commit_list * commits; object_array pending; object_array boundary_commits; const char * prefix; const char * def; void * prune_data; unsigned int early_output; unsigned __int32 : 1 dense; unsigned __int32 : 1 prune; unsigned __int32 : 1 no_merges; unsigned __int32 : 1 merges_only; unsigned __int32 : 1 no_walk; unsigned __int32 : 1 show_all; unsigned __int32 : 1 remove_empty_trees; unsigned __int32 : 1 simplify_history; unsigned __int32 : 1 lifo; unsigned __int32 : 1 topo_order; unsigned __int32 : 1 simplify_merges; unsigned __int32 : 1 simplify_by_decoration; unsigned __int32 : 1 tag_objects; unsigned __int32 : 1 tree_objects; unsigned __int32 : 1 blob_objects; unsigned __int32 : 1 edge_hint; unsigned __int32 : 1 limited; unsigned __int32 : 1 unpacked; unsigned __int32 : 2 boundary; unsigned __int32 : 1 count; unsigned __int32 : 1 left_right; unsigned __int32 : 1 rewrite_parents; unsigned __int32 : 1 print_parents; unsigned __int32 : 1 show_source; unsigned __int32 : 1 show_decorations; unsigned __int32 : 1 reverse; unsigned __int32 : 1 reverse_output_stage; unsigned __int32 : 1 cherry_pick; unsigned __int32 : 1 bisect; unsigned __int32 : 1 ancestry_path; unsigned __int32 : 1 first_parent_only; unsigned __int32 : 1 diff; unsigned __int32 : 1 full_diff; unsigned __int32 : 1 show_root_diff; unsigned __int32 : 1 no_commit_id; unsigned __int32 : 1 verbose_header; unsigned __int32 : 1 ignore_merges; unsigned __int32 : 1 combine_merges; unsigned __int32 : 1 dense_combined_merges; unsigned __int32 : 1 always_show_header; unsigned __int32 : 1 shown_one; unsigned __int32 : 1 show_merge; unsigned __int32 : 1 show_notes; unsigned __int32 : 1 show_notes_given; unsigned __int32 : 1 pretty_given; unsigned __int32 : 1 abbrev_commit; unsigned __int32 : 1 use_terminator; unsigned __int32 : 1 missing_newline; unsigned __int32 : 1 date_mode_explicit; unsigned __int32 : 1 disable_stdin; PADDING (1); date_mode date_mode; unsigned int abbrev; cmit_fmt commit_format; log_info * loginfo; int nr; int total; const char * mime_boundary; const char * patch_suffix; int numbered_files; PADDING (4); char * message_id; string_list * ref_message_ids; const char * add_signoff; const char * extra_headers; const char * log_reencode; const char * subject_prefix; int no_inline; int show_log_size; grep_opt grep_filter; git_graph * graph; int skip_count; int max_count; unsigned __int64 max_age; unsigned __int64 min_age; diff_options diffopt; diff_options pruning; reflog_walk_info * reflog_info; decoration children; decoration merge_simplification; display_notes_opt notes_opt; int count_left; int count_right; }"}], "body_in_train": false}, {"repo_owner": "cms-externals", "repo_name": "frontier_client", "path": "cms-externals/frontier_client/41fc641d183867082a2d741b498a5f39fe4e0cf13014c1336c343c35397375e4", "path_in_repo": "cms-externals/frontier_client//http/fn-socket.o", "objdump": "000000000000050a <socket_write>:\n 50a:\t55                   \tpush   %rbp\n 50b:\t48 89 e5             \tmov    %rsp,%rbp\n 50e:\t53                   \tpush   %rbx\n 50f:\t48 83 ec 38          \tsub    $0x38,%rsp\n 513:\t89 7d dc             \tmov    %edi,-0x24(%rbp)\n 516:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n 51a:\t89 55 d8             \tmov    %edx,-0x28(%rbp)\n 51d:\t89 4d cc             \tmov    %ecx,-0x34(%rbp)\n 520:\t4c 89 45 c0          \tmov    %r8,-0x40(%rbp)\n 524:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 527:\t41 89 c0             \tmov    %eax,%r8d\n 52a:\t48 8d 0d 00 00 00 00 \tlea    0x0(%rip),%rcx        # 531 <socket_write+0x27>\n 531:\tba 9f 00 00 00       \tmov    $0x9f,%edx\n 536:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 53d <socket_write+0x33>\n 53d:\tbf 00 00 00 00       \tmov    $0x0,%edi\n 542:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 547:\te8 00 00 00 00       \tcallq  54c <socket_write+0x42>\n 54c:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 54f:\t89 45 e4             \tmov    %eax,-0x1c(%rbp)\n 552:\t66 c7 45 e8 04 00    \tmovw   $0x4,-0x18(%rbp)\n 558:\t66 c7 45 ea 00 00    \tmovw   $0x0,-0x16(%rbp)\n 55e:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n 561:\t69 d0 e8 03 00 00    \timul   $0x3e8,%eax,%edx\n 567:\t48 8d 45 e4          \tlea    -0x1c(%rbp),%rax\n 56b:\tbe 01 00 00 00       \tmov    $0x1,%esi\n 570:\t48 89 c7             \tmov    %rax,%rdi\n 573:\te8 00 00 00 00       \tcallq  578 <socket_write+0x6e>\n 578:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 57b:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n 57f:\t79 44                \tjns    5c5 <socket_write+0xbb>\n 581:\te8 00 00 00 00       \tcallq  586 <socket_write+0x7c>\n 586:\t8b 00                \tmov    (%rax),%eax\n 588:\t89 c7                \tmov    %eax,%edi\n 58a:\te8 00 00 00 00       \tcallq  58f <socket_write+0x85>\n 58f:\t48 89 c3             \tmov    %rax,%rbx\n 592:\te8 00 00 00 00       \tcallq  597 <socket_write+0x8d>\n 597:\t8b 00                \tmov    (%rax),%eax\n 599:\t49 89 d8             \tmov    %rbx,%r8\n 59c:\t89 c1                \tmov    %eax,%ecx\n 59e:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 5a5 <socket_write+0x9b>\n 5a5:\tbe a7 00 00 00       \tmov    $0xa7,%esi\n 5aa:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5b1 <socket_write+0xa7>\n 5b1:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 5b6:\te8 00 00 00 00       \tcallq  5bb <socket_write+0xb1>\n 5bb:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n 5c0:\te9 14 01 00 00       \tjmpq   6d9 <socket_write+0x1cf>\n 5c5:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n 5c9:\t75 40                \tjne    60b <socket_write+0x101>\n 5cb:\t48 8b 45 c0          \tmov    -0x40(%rbp),%rax\n 5cf:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 5d3:\t48 89 c7             \tmov    %rax,%rdi\n 5d6:\te8 00 00 00 00       \tcallq  5db <socket_write+0xd1>\n 5db:\t8b 55 cc             \tmov    -0x34(%rbp),%edx\n 5de:\t41 89 d0             \tmov    %edx,%r8d\n 5e1:\t48 89 c1             \tmov    %rax,%rcx\n 5e4:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 5eb <socket_write+0xe1>\n 5eb:\tbe ac 00 00 00       \tmov    $0xac,%esi\n 5f0:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 5f7 <socket_write+0xed>\n 5f7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 5fc:\te8 00 00 00 00       \tcallq  601 <socket_write+0xf7>\n 601:\tb8 fa ff ff ff       \tmov    $0xfffffffa,%eax\n 606:\te9 ce 00 00 00       \tjmpq   6d9 <socket_write+0x1cf>\n 60b:\t0f b7 45 ea          \tmovzwl -0x16(%rbp),%eax\n 60f:\t98                   \tcwtl   \n 610:\t83 e0 04             \tand    $0x4,%eax\n 613:\t85 c0                \ttest   %eax,%eax\n 615:\t75 2c                \tjne    643 <socket_write+0x139>\n 617:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 61a:\t89 c1                \tmov    %eax,%ecx\n 61c:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 623 <socket_write+0x119>\n 623:\tbe b3 00 00 00       \tmov    $0xb3,%esi\n 628:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 62f <socket_write+0x125>\n 62f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 634:\te8 00 00 00 00       \tcallq  639 <socket_write+0x12f>\n 639:\tb8 fb ff ff ff       \tmov    $0xfffffffb,%eax\n 63e:\te9 96 00 00 00       \tjmpq   6d9 <socket_write+0x1cf>\n 643:\t8b 45 d8             \tmov    -0x28(%rbp),%eax\n 646:\t48 63 d0             \tmovslq %eax,%rdx\n 649:\t48 8b 75 d0          \tmov    -0x30(%rbp),%rsi\n 64d:\t8b 45 dc             \tmov    -0x24(%rbp),%eax\n 650:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n 655:\t89 c7                \tmov    %eax,%edi\n 657:\te8 00 00 00 00       \tcallq  65c <socket_write+0x152>\n 65c:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n 65f:\t83 7d ec 00          \tcmpl   $0x0,-0x14(%rbp)\n 663:\t78 05                \tjs     66a <socket_write+0x160>\n 665:\t8b 45 ec             \tmov    -0x14(%rbp),%eax\n 668:\teb 6f                \tjmp    6d9 <socket_write+0x1cf>\n 66a:\te8 00 00 00 00       \tcallq  66f <socket_write+0x165>\n 66f:\t8b 00                \tmov    (%rax),%eax\n 671:\t83 f8 68             \tcmp    $0x68,%eax\n 674:\t75 24                \tjne    69a <socket_write+0x190>\n 676:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 67d <socket_write+0x173>\n 67d:\tbe bc 00 00 00       \tmov    $0xbc,%esi\n 682:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 689 <socket_write+0x17f>\n 689:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 68e:\te8 00 00 00 00       \tcallq  693 <socket_write+0x189>\n 693:\tb8 fa ff ff ff       \tmov    $0xfffffffa,%eax\n 698:\teb 3f                \tjmp    6d9 <socket_write+0x1cf>\n 69a:\te8 00 00 00 00       \tcallq  69f <socket_write+0x195>\n 69f:\t8b 00                \tmov    (%rax),%eax\n 6a1:\t89 c7                \tmov    %eax,%edi\n 6a3:\te8 00 00 00 00       \tcallq  6a8 <socket_write+0x19e>\n 6a8:\t48 89 c3             \tmov    %rax,%rbx\n 6ab:\te8 00 00 00 00       \tcallq  6b0 <socket_write+0x1a6>\n 6b0:\t8b 00                \tmov    (%rax),%eax\n 6b2:\t49 89 d8             \tmov    %rbx,%r8\n 6b5:\t89 c1                \tmov    %eax,%ecx\n 6b7:\t48 8d 15 00 00 00 00 \tlea    0x0(%rip),%rdx        # 6be <socket_write+0x1b4>\n 6be:\tbe c0 00 00 00       \tmov    $0xc0,%esi\n 6c3:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 6ca <socket_write+0x1c0>\n 6ca:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 6cf:\te8 00 00 00 00       \tcallq  6d4 <socket_write+0x1ca>\n 6d4:\tb8 fc ff ff ff       \tmov    $0xfffffffc,%eax\n 6d9:\t48 83 c4 38          \tadd    $0x38,%rsp\n 6dd:\t5b                   \tpop    %rbx\n 6de:\t5d                   \tpop    %rbp\n 6df:\tc3                   \tretq   ", "code_s": "__int64 __fastcall socket_write(unsigned int a1, const void *a2,\n                                unsigned int a3, unsigned int a4, __int64 a5) {\n  int *v5;\n  char *v6;\n  int *v7;\n  __int64 result;\n  char *v9;\n  int *v10;\n  char *v11;\n  int *v12;\n  struct pollfd <span class=\"supfact\">fds</span>;\n  int v17;\n  frontier_log(Number L, String, Number L, String, a3);\n  <span class=\"supfact\">fds</span>.fd = a1;\n  <span class=\"supfact\">fds</span>.events = Number;\n  <span class=\"supfact\">fds</span>.revents = Number;\n  v17 = poll(&<span class=\"supfact\">fds</span>, Number, Number * a4);\n  if (v17 >= Number) {\n    if (v17) {\n      if ((<span class=\"supfact\">fds</span>.revents & Number) != Number) {\n        v17 = send(a1, a2, (int)a3, Number);\n        if (v17 < Number) {\n          if (*_errno_location() == Number) {\n            frontier_setErrorMsg(String, Number L, String);\n            result = Number L;\n          } else {\n            v10 = _errno_location();\n            v11 = strerror(*v10);\n            v12 = _errno_location();\n            frontier_setErrorMsg(String, Number L, String, (unsigned int)*v12,\n                                 v11);\n            result = Number L;\n          }\n        } else {\n          result = (unsigned int)v17;\n        }\n      } else {\n        frontier_setErrorMsg(String, Number L, String, a1);\n        result = Number L;\n      }\n    } else {\n      v9 = frontier_ipaddr(*(_WORD **)(a5 + Number));\n      frontier_setErrorMsg(String, Number L, String, v9, a4);\n      result = Number L;\n    }\n  } else {\n    v5 = _errno_location();\n    v6 = strerror(*v5);\n    v7 = _errno_location();\n    frontier_setErrorMsg(String, Number L, String, (unsigned int)*v7, v6);\n    result = Number L;\n  }\n  return result;\n}", "code_t": "int __cdecl socket_write(int s, const char *buf, int len, int timeoutsecs,\n                         addrinfo *addr) {\n  int *v5;\n  char *v6;\n  int *v7;\n  int result;\n  char *v9;\n  int *v10;\n  char *v11;\n  int *v12;\n  pollfd <span class=\"supfact\">pfd</span>;\n  int ret;\n  frontier_log(Number L, String, Number L, String, (unsigned int)len);\n  <span class=\"supfact\">pfd</span>.fd = s;\n  <span class=\"supfact\">pfd</span>.events = Number;\n  <span class=\"supfact\">pfd</span>.revents = Number;\n  ret = poll(&<span class=\"supfact\">pfd</span>, Number, Number * timeoutsecs);\n  if (ret >= Number) {\n    if (ret) {\n      if ((<span class=\"supfact\">pfd</span>.revents & Number) != Number) {\n        ret = send(s, buf, len, Number);\n        if (ret < Number) {\n          if (*_errno_location() == Number) {\n            frontier_setErrorMsg(String, Number L, String);\n            result = Number;\n          } else {\n            v10 = _errno_location();\n            v11 = strerror(*v10);\n            v12 = _errno_location();\n            frontier_setErrorMsg(String, Number L, String, (unsigned int)*v12,\n                                 v11);\n            result = Number;\n          }\n        } else {\n          result = ret;\n        }\n      } else {\n        frontier_setErrorMsg(String, Number L, String, (unsigned int)s);\n        result = Number;\n      }\n    } else {\n      v9 = frontier_ipaddr(addr->ai_addr);\n      frontier_setErrorMsg(String, Number L, String, v9,\n                           (unsigned int)timeoutsecs);\n      result = Number;\n    }\n  } else {\n    v5 = _errno_location();\n    v6 = strerror(*v5);\n    v7 = _errno_location();\n    frontier_setErrorMsg(String, Number L, String, (unsigned int)*v7, v6);\n    result = Number;\n  }\n  return result;\n}", "var": [{"name": "fds", "type": "struct pollfd { int fd; __int16 events; __int16 revents; }", "pred_name": "pfd", "ref_name": "pfd", "ref_type": "struct pollfd { int fd; __int16 events; __int16 revents; }"}], "body_in_train": false}, {"repo_owner": "pathscale", "repo_name": "nvopencc", "path": "pathscale/nvopencc/94aa531d0efd6b1073acb4bd6e6e916746870d66421b2adf8f96c13c2dc39629", "path_in_repo": "pathscale/nvopencc/src/targia3264_nvisa_rel/gccfe/gnu/cppexp.o", "objdump": "000000000000164c <reduce>:\n    164c:\t55                   \tpush   %rbp\n    164d:\t48 89 e5             \tmov    %rsp,%rbp\n    1650:\t53                   \tpush   %rbx\n    1651:\t48 83 ec 58          \tsub    $0x58,%rsp\n    1655:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n    1659:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n    165d:\t89 55 cc             \tmov    %edx,-0x34(%rbp)\n    1660:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1664:\t8b 40 20             \tmov    0x20(%rax),%eax\n    1667:\t85 c0                \ttest   %eax,%eax\n    1669:\t74 0c                \tje     1677 <reduce+0x2b>\n    166b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    166f:\t8b 40 20             \tmov    0x20(%rax),%eax\n    1672:\t83 f8 1e             \tcmp    $0x1e,%eax\n    1675:\t76 32                \tjbe    16a9 <reduce+0x5d>\n    1677:\t90                   \tnop\n    1678:\teb 01                \tjmp    167b <reduce+0x2f>\n    167a:\t90                   \tnop\n    167b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    167f:\t8b 50 20             \tmov    0x20(%rax),%edx\n    1682:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1686:\t89 d1                \tmov    %edx,%ecx\n    1688:\tba 00 00 00 00       \tmov    $0x0,%edx\n    168d:\tbe 04 00 00 00       \tmov    $0x4,%esi\n    1692:\t48 89 c7             \tmov    %rax,%rdi\n    1695:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    169a:\te8 00 00 00 00       \tcallq  169f <reduce+0x53>\n    169f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    16a4:\te9 11 06 00 00       \tjmpq   1cba <reduce+0x66e>\n    16a9:\t83 7d cc 16          \tcmpl   $0x16,-0x34(%rbp)\n    16ad:\t75 09                \tjne    16b8 <reduce+0x6c>\n    16af:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    16b3:\te9 02 06 00 00       \tjmpq   1cba <reduce+0x66e>\n    16b8:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    16bb:\t0f b6 84 00 00 00 00 \tmovzbl 0x0(%rax,%rax,1),%eax\n    16c2:\t00 \n    16c3:\t0f b6 d0             \tmovzbl %al,%edx\n    16c6:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n    16c9:\t0f b6 84 00 00 00 00 \tmovzbl 0x0(%rax,%rax,1),%eax\n    16d0:\t00 \n    16d1:\t0f b6 c0             \tmovzbl %al,%eax\n    16d4:\t83 e0 02             \tand    $0x2,%eax\n    16d7:\t85 c0                \ttest   %eax,%eax\n    16d9:\t0f 95 c0             \tsetne  %al\n    16dc:\t0f b6 c0             \tmovzbl %al,%eax\n    16df:\t29 c2                \tsub    %eax,%edx\n    16e1:\t89 d0                \tmov    %edx,%eax\n    16e3:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    16e6:\te9 86 05 00 00       \tjmpq   1c71 <reduce+0x625>\n    16eb:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    16ef:\t0f b6 80 d6 02 00 00 \tmovzbl 0x2d6(%rax),%eax\n    16f6:\t84 c0                \ttest   %al,%al\n    16f8:\t74 2e                \tje     1728 <reduce+0xdc>\n    16fa:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    16fe:\t8b 40 20             \tmov    0x20(%rax),%eax\n    1701:\t89 c0                \tmov    %eax,%eax\n    1703:\t0f b6 84 00 00 00 00 \tmovzbl 0x0(%rax,%rax,1),%eax\n    170a:\t00 \n    170b:\t0f b6 c0             \tmovzbl %al,%eax\n    170e:\t83 e0 04             \tand    $0x4,%eax\n    1711:\t85 c0                \ttest   %eax,%eax\n    1713:\t74 13                \tje     1728 <reduce+0xdc>\n    1715:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    1719:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    171d:\t48 89 d6             \tmov    %rdx,%rsi\n    1720:\t48 89 c7             \tmov    %rax,%rdi\n    1723:\te8 6c 06 00 00       \tcallq  1d94 <check_promotion>\n    1728:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    172c:\t8b 40 20             \tmov    0x20(%rax),%eax\n    172f:\t83 f8 1e             \tcmp    $0x1e,%eax\n    1732:\t0f 87 42 ff ff ff    \tja     167a <reduce+0x2e>\n    1738:\t89 c0                \tmov    %eax,%eax\n    173a:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n    1741:\t00 \n    1742:\tff e0                \tjmpq   *%rax\n    1744:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1748:\t8b 50 20             \tmov    0x20(%rax),%edx\n    174b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    174f:\t48 8d 58 d8          \tlea    -0x28(%rax),%rbx\n    1753:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    1757:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    175b:\t48 83 ec 08          \tsub    $0x8,%rsp\n    175f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1763:\tff 70 18             \tpushq  0x18(%rax)\n    1766:\tff 70 10             \tpushq  0x10(%rax)\n    1769:\tff 70 08             \tpushq  0x8(%rax)\n    176c:\t48 89 cf             \tmov    %rcx,%rdi\n    176f:\te8 f6 0f 00 00       \tcallq  276a <num_unary_op>\n    1774:\t48 83 c4 20          \tadd    $0x20,%rsp\n    1778:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    177c:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    1780:\t48 89 43 08          \tmov    %rax,0x8(%rbx)\n    1784:\t48 89 53 10          \tmov    %rdx,0x10(%rbx)\n    1788:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    178c:\t48 89 43 18          \tmov    %rax,0x18(%rbx)\n    1790:\te9 a5 04 00 00       \tjmpq   1c3a <reduce+0x5ee>\n    1795:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1799:\t8b 78 20             \tmov    0x20(%rax),%edi\n    179c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    17a0:\t48 8d 50 d8          \tlea    -0x28(%rax),%rdx\n    17a4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    17a8:\t48 8d 58 d8          \tlea    -0x28(%rax),%rbx\n    17ac:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    17b0:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    17b4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    17b8:\tff 70 18             \tpushq  0x18(%rax)\n    17bb:\tff 70 10             \tpushq  0x10(%rax)\n    17be:\tff 70 08             \tpushq  0x8(%rax)\n    17c1:\tff 72 18             \tpushq  0x18(%rdx)\n    17c4:\tff 72 10             \tpushq  0x10(%rdx)\n    17c7:\tff 72 08             \tpushq  0x8(%rdx)\n    17ca:\t89 fa                \tmov    %edi,%edx\n    17cc:\t48 89 cf             \tmov    %rcx,%rdi\n    17cf:\te8 dd 10 00 00       \tcallq  28b1 <num_binary_op>\n    17d4:\t48 83 c4 30          \tadd    $0x30,%rsp\n    17d8:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    17dc:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    17e0:\t48 89 43 08          \tmov    %rax,0x8(%rbx)\n    17e4:\t48 89 53 10          \tmov    %rdx,0x10(%rbx)\n    17e8:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    17ec:\t48 89 43 18          \tmov    %rax,0x18(%rbx)\n    17f0:\te9 45 04 00 00       \tjmpq   1c3a <reduce+0x5ee>\n    17f5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    17f9:\t8b 78 20             \tmov    0x20(%rax),%edi\n    17fc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1800:\t48 8d 50 d8          \tlea    -0x28(%rax),%rdx\n    1804:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1808:\t48 8d 58 d8          \tlea    -0x28(%rax),%rbx\n    180c:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    1810:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    1814:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1818:\tff 70 18             \tpushq  0x18(%rax)\n    181b:\tff 70 10             \tpushq  0x10(%rax)\n    181e:\tff 70 08             \tpushq  0x8(%rax)\n    1821:\tff 72 18             \tpushq  0x18(%rdx)\n    1824:\tff 72 10             \tpushq  0x10(%rdx)\n    1827:\tff 72 08             \tpushq  0x8(%rdx)\n    182a:\t89 fa                \tmov    %edi,%edx\n    182c:\t48 89 cf             \tmov    %rcx,%rdi\n    182f:\te8 9e 0a 00 00       \tcallq  22d2 <num_inequality_op>\n    1834:\t48 83 c4 30          \tadd    $0x30,%rsp\n    1838:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    183c:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    1840:\t48 89 43 08          \tmov    %rax,0x8(%rbx)\n    1844:\t48 89 53 10          \tmov    %rdx,0x10(%rbx)\n    1848:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    184c:\t48 89 43 18          \tmov    %rax,0x18(%rbx)\n    1850:\te9 e5 03 00 00       \tjmpq   1c3a <reduce+0x5ee>\n    1855:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1859:\t8b 78 20             \tmov    0x20(%rax),%edi\n    185c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1860:\t48 8d 50 d8          \tlea    -0x28(%rax),%rdx\n    1864:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1868:\t48 8d 58 d8          \tlea    -0x28(%rax),%rbx\n    186c:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    1870:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    1874:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1878:\tff 70 18             \tpushq  0x18(%rax)\n    187b:\tff 70 10             \tpushq  0x10(%rax)\n    187e:\tff 70 08             \tpushq  0x8(%rax)\n    1881:\tff 72 18             \tpushq  0x18(%rdx)\n    1884:\tff 72 10             \tpushq  0x10(%rdx)\n    1887:\tff 72 08             \tpushq  0x8(%rdx)\n    188a:\t89 fa                \tmov    %edi,%edx\n    188c:\t48 89 cf             \tmov    %rcx,%rdi\n    188f:\te8 48 0b 00 00       \tcallq  23dc <num_equality_op>\n    1894:\t48 83 c4 30          \tadd    $0x30,%rsp\n    1898:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    189c:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    18a0:\t48 89 43 08          \tmov    %rax,0x8(%rbx)\n    18a4:\t48 89 53 10          \tmov    %rdx,0x10(%rbx)\n    18a8:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    18ac:\t48 89 43 18          \tmov    %rax,0x18(%rbx)\n    18b0:\te9 85 03 00 00       \tjmpq   1c3a <reduce+0x5ee>\n    18b5:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    18b9:\t8b 78 20             \tmov    0x20(%rax),%edi\n    18bc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    18c0:\t48 8d 50 d8          \tlea    -0x28(%rax),%rdx\n    18c4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    18c8:\t48 8d 58 d8          \tlea    -0x28(%rax),%rbx\n    18cc:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    18d0:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    18d4:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    18d8:\tff 70 18             \tpushq  0x18(%rax)\n    18db:\tff 70 10             \tpushq  0x10(%rax)\n    18de:\tff 70 08             \tpushq  0x8(%rax)\n    18e1:\tff 72 18             \tpushq  0x18(%rdx)\n    18e4:\tff 72 10             \tpushq  0x10(%rdx)\n    18e7:\tff 72 08             \tpushq  0x8(%rdx)\n    18ea:\t89 fa                \tmov    %edi,%edx\n    18ec:\t48 89 cf             \tmov    %rcx,%rdi\n    18ef:\te8 1e 09 00 00       \tcallq  2212 <num_bitwise_op>\n    18f4:\t48 83 c4 30          \tadd    $0x30,%rsp\n    18f8:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    18fc:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    1900:\t48 89 43 08          \tmov    %rax,0x8(%rbx)\n    1904:\t48 89 53 10          \tmov    %rdx,0x10(%rbx)\n    1908:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    190c:\t48 89 43 18          \tmov    %rax,0x18(%rbx)\n    1910:\te9 25 03 00 00       \tjmpq   1c3a <reduce+0x5ee>\n    1915:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1919:\t48 8d 50 d8          \tlea    -0x28(%rax),%rdx\n    191d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1921:\t48 8d 58 d8          \tlea    -0x28(%rax),%rbx\n    1925:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    1929:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    192d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1931:\tff 70 18             \tpushq  0x18(%rax)\n    1934:\tff 70 10             \tpushq  0x10(%rax)\n    1937:\tff 70 08             \tpushq  0x8(%rax)\n    193a:\tff 72 18             \tpushq  0x18(%rdx)\n    193d:\tff 72 10             \tpushq  0x10(%rdx)\n    1940:\tff 72 08             \tpushq  0x8(%rdx)\n    1943:\t48 89 cf             \tmov    %rcx,%rdi\n    1946:\te8 0e 14 00 00       \tcallq  2d59 <num_mul>\n    194b:\t48 83 c4 30          \tadd    $0x30,%rsp\n    194f:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    1953:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    1957:\t48 89 43 08          \tmov    %rax,0x8(%rbx)\n    195b:\t48 89 53 10          \tmov    %rdx,0x10(%rbx)\n    195f:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    1963:\t48 89 43 18          \tmov    %rax,0x18(%rbx)\n    1967:\te9 ce 02 00 00       \tjmpq   1c3a <reduce+0x5ee>\n    196c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1970:\t8b 78 20             \tmov    0x20(%rax),%edi\n    1973:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1977:\t48 8d 50 d8          \tlea    -0x28(%rax),%rdx\n    197b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    197f:\t48 8d 58 d8          \tlea    -0x28(%rax),%rbx\n    1983:\t48 8d 4d a0          \tlea    -0x60(%rbp),%rcx\n    1987:\t48 8b 75 d8          \tmov    -0x28(%rbp),%rsi\n    198b:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    198f:\tff 70 18             \tpushq  0x18(%rax)\n    1992:\tff 70 10             \tpushq  0x10(%rax)\n    1995:\tff 70 08             \tpushq  0x8(%rax)\n    1998:\tff 72 18             \tpushq  0x18(%rdx)\n    199b:\tff 72 10             \tpushq  0x10(%rdx)\n    199e:\tff 72 08             \tpushq  0x8(%rdx)\n    19a1:\t89 fa                \tmov    %edi,%edx\n    19a3:\t48 89 cf             \tmov    %rcx,%rdi\n    19a6:\te8 8a 16 00 00       \tcallq  3035 <num_div_op>\n    19ab:\t48 83 c4 30          \tadd    $0x30,%rsp\n    19af:\t48 8b 45 a0          \tmov    -0x60(%rbp),%rax\n    19b3:\t48 8b 55 a8          \tmov    -0x58(%rbp),%rdx\n    19b7:\t48 89 43 08          \tmov    %rax,0x8(%rbx)\n    19bb:\t48 89 53 10          \tmov    %rdx,0x10(%rbx)\n    19bf:\t48 8b 45 b0          \tmov    -0x50(%rbp),%rax\n    19c3:\t48 89 43 18          \tmov    %rax,0x18(%rbx)\n    19c7:\te9 6e 02 00 00       \tjmpq   1c3a <reduce+0x5ee>\n    19cc:\t48 83 6d d0 28       \tsubq   $0x28,-0x30(%rbp)\n    19d1:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    19d5:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    19d9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    19dd:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    19e1:\t48 09 d0             \tor     %rdx,%rax\n    19e4:\t48 85 c0             \ttest   %rax,%rax\n    19e7:\t74 11                \tje     19fa <reduce+0x3ae>\n    19e9:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    19ed:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    19f0:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    19f3:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    19f7:\t89 50 1c             \tmov    %edx,0x1c(%rax)\n    19fa:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    19fe:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1a02:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a06:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a0a:\t48 09 d0             \tor     %rdx,%rax\n    1a0d:\t48 85 c0             \ttest   %rax,%rax\n    1a10:\t75 20                \tjne    1a32 <reduce+0x3e6>\n    1a12:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a16:\t48 83 c0 28          \tadd    $0x28,%rax\n    1a1a:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1a1e:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a22:\t48 83 c0 28          \tadd    $0x28,%rax\n    1a26:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a2a:\t48 09 d0             \tor     %rdx,%rax\n    1a2d:\t48 85 c0             \ttest   %rax,%rax\n    1a30:\t74 07                \tje     1a39 <reduce+0x3ed>\n    1a32:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1a37:\teb 05                \tjmp    1a3e <reduce+0x3f2>\n    1a39:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1a3e:\t48 63 d0             \tmovslq %eax,%rdx\n    1a41:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a45:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    1a49:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a4d:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n    1a54:\t00 \n    1a55:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a59:\tc6 40 18 00          \tmovb   $0x0,0x18(%rax)\n    1a5d:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a61:\tc6 40 19 00          \tmovb   $0x0,0x19(%rax)\n    1a65:\te9 07 02 00 00       \tjmpq   1c71 <reduce+0x625>\n    1a6a:\t48 83 6d d0 28       \tsubq   $0x28,-0x30(%rbp)\n    1a6f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a73:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1a77:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a7b:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1a7f:\t48 09 d0             \tor     %rdx,%rax\n    1a82:\t48 85 c0             \ttest   %rax,%rax\n    1a85:\t75 11                \tjne    1a98 <reduce+0x44c>\n    1a87:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1a8b:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    1a8e:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    1a91:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1a95:\t89 50 1c             \tmov    %edx,0x1c(%rax)\n    1a98:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1a9c:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1aa0:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1aa4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1aa8:\t48 09 d0             \tor     %rdx,%rax\n    1aab:\t48 85 c0             \ttest   %rax,%rax\n    1aae:\t74 27                \tje     1ad7 <reduce+0x48b>\n    1ab0:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1ab4:\t48 83 c0 28          \tadd    $0x28,%rax\n    1ab8:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1abc:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1ac0:\t48 83 c0 28          \tadd    $0x28,%rax\n    1ac4:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1ac8:\t48 09 d0             \tor     %rdx,%rax\n    1acb:\t48 85 c0             \ttest   %rax,%rax\n    1ace:\t74 07                \tje     1ad7 <reduce+0x48b>\n    1ad0:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1ad5:\teb 05                \tjmp    1adc <reduce+0x490>\n    1ad7:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1adc:\t48 63 d0             \tmovslq %eax,%rdx\n    1adf:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1ae3:\t48 89 50 10          \tmov    %rdx,0x10(%rax)\n    1ae7:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1aeb:\t48 c7 40 08 00 00 00 \tmovq   $0x0,0x8(%rax)\n    1af2:\t00 \n    1af3:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1af7:\tc6 40 18 00          \tmovb   $0x0,0x18(%rax)\n    1afb:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1aff:\tc6 40 19 00          \tmovb   $0x0,0x19(%rax)\n    1b03:\te9 69 01 00 00       \tjmpq   1c71 <reduce+0x625>\n    1b08:\t83 7d cc 17          \tcmpl   $0x17,-0x34(%rbp)\n    1b0c:\t74 25                \tje     1b33 <reduce+0x4e7>\n    1b0e:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1b12:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1b17:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    1b1c:\t48 89 c7             \tmov    %rax,%rdi\n    1b1f:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b24:\te8 00 00 00 00       \tcallq  1b29 <reduce+0x4dd>\n    1b29:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1b2e:\te9 87 01 00 00       \tjmpq   1cba <reduce+0x66e>\n    1b33:\t48 83 6d d0 28       \tsubq   $0x28,-0x30(%rbp)\n    1b38:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1b3c:\t48 8d 70 28          \tlea    0x28(%rax),%rsi\n    1b40:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n    1b44:\t48 8b 46 08          \tmov    0x8(%rsi),%rax\n    1b48:\t48 8b 56 10          \tmov    0x10(%rsi),%rdx\n    1b4c:\t48 89 41 08          \tmov    %rax,0x8(%rcx)\n    1b50:\t48 89 51 10          \tmov    %rdx,0x10(%rcx)\n    1b54:\t48 8b 46 18          \tmov    0x18(%rsi),%rax\n    1b58:\t48 89 41 18          \tmov    %rax,0x18(%rcx)\n    1b5c:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1b60:\te9 55 01 00 00       \tjmpq   1cba <reduce+0x66e>\n    1b65:\t48 83 6d d0 50       \tsubq   $0x50,-0x30(%rbp)\n    1b6a:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1b6e:\t48 8b 50 10          \tmov    0x10(%rax),%rdx\n    1b72:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1b76:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    1b7a:\t48 09 d0             \tor     %rdx,%rax\n    1b7d:\t48 85 c0             \ttest   %rax,%rax\n    1b80:\t74 37                \tje     1bb9 <reduce+0x56d>\n    1b82:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1b86:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    1b89:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    1b8c:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1b90:\t89 50 1c             \tmov    %edx,0x1c(%rax)\n    1b93:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1b97:\t48 8d 70 28          \tlea    0x28(%rax),%rsi\n    1b9b:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n    1b9f:\t48 8b 46 08          \tmov    0x8(%rsi),%rax\n    1ba3:\t48 8b 56 10          \tmov    0x10(%rsi),%rdx\n    1ba7:\t48 89 41 08          \tmov    %rax,0x8(%rcx)\n    1bab:\t48 89 51 10          \tmov    %rdx,0x10(%rcx)\n    1baf:\t48 8b 46 18          \tmov    0x18(%rsi),%rax\n    1bb3:\t48 89 41 18          \tmov    %rax,0x18(%rcx)\n    1bb7:\teb 24                \tjmp    1bdd <reduce+0x591>\n    1bb9:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1bbd:\t48 8d 70 50          \tlea    0x50(%rax),%rsi\n    1bc1:\t48 8b 4d d0          \tmov    -0x30(%rbp),%rcx\n    1bc5:\t48 8b 46 08          \tmov    0x8(%rsi),%rax\n    1bc9:\t48 8b 56 10          \tmov    0x10(%rsi),%rdx\n    1bcd:\t48 89 41 08          \tmov    %rax,0x8(%rcx)\n    1bd1:\t48 89 51 10          \tmov    %rdx,0x10(%rcx)\n    1bd5:\t48 8b 46 18          \tmov    0x18(%rsi),%rax\n    1bd9:\t48 89 41 18          \tmov    %rax,0x18(%rcx)\n    1bdd:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1be1:\t48 83 c0 28          \tadd    $0x28,%rax\n    1be5:\t0f b6 40 18          \tmovzbl 0x18(%rax),%eax\n    1be9:\t84 c0                \ttest   %al,%al\n    1beb:\t75 10                \tjne    1bfd <reduce+0x5b1>\n    1bed:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1bf1:\t48 83 c0 50          \tadd    $0x50,%rax\n    1bf5:\t0f b6 40 18          \tmovzbl 0x18(%rax),%eax\n    1bf9:\t84 c0                \ttest   %al,%al\n    1bfb:\t74 07                \tje     1c04 <reduce+0x5b8>\n    1bfd:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    1c02:\teb 05                \tjmp    1c09 <reduce+0x5bd>\n    1c04:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c09:\t83 e0 01             \tand    $0x1,%eax\n    1c0c:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n    1c10:\t88 42 18             \tmov    %al,0x18(%rdx)\n    1c13:\teb 5c                \tjmp    1c71 <reduce+0x625>\n    1c15:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c19:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1c1e:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    1c23:\t48 89 c7             \tmov    %rax,%rdi\n    1c26:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c2b:\te8 00 00 00 00       \tcallq  1c30 <reduce+0x5e4>\n    1c30:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c35:\te9 80 00 00 00       \tjmpq   1cba <reduce+0x66e>\n    1c3a:\t48 83 6d d0 28       \tsubq   $0x28,-0x30(%rbp)\n    1c3f:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1c43:\t0f b6 40 19          \tmovzbl 0x19(%rax),%eax\n    1c47:\t84 c0                \ttest   %al,%al\n    1c49:\t74 26                \tje     1c71 <reduce+0x625>\n    1c4b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c4f:\t8b 40 1c             \tmov    0x1c(%rax),%eax\n    1c52:\t85 c0                \ttest   %eax,%eax\n    1c54:\t75 1b                \tjne    1c71 <reduce+0x625>\n    1c56:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c5a:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1c5f:\tbe 02 00 00 00       \tmov    $0x2,%esi\n    1c64:\t48 89 c7             \tmov    %rax,%rdi\n    1c67:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1c6c:\te8 00 00 00 00       \tcallq  1c71 <reduce+0x625>\n    1c71:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1c75:\t8b 40 20             \tmov    0x20(%rax),%eax\n    1c78:\t89 c0                \tmov    %eax,%eax\n    1c7a:\t0f b6 84 00 00 00 00 \tmovzbl 0x0(%rax,%rax,1),%eax\n    1c81:\t00 \n    1c82:\t0f b6 c0             \tmovzbl %al,%eax\n    1c85:\t39 45 ec             \tcmp    %eax,-0x14(%rbp)\n    1c88:\t0f 82 5d fa ff ff    \tjb     16eb <reduce+0x9f>\n    1c8e:\t83 7d cc 17          \tcmpl   $0x17,-0x34(%rbp)\n    1c92:\t75 22                \tjne    1cb6 <reduce+0x66a>\n    1c94:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    1c98:\tba 00 00 00 00       \tmov    $0x0,%edx\n    1c9d:\tbe 03 00 00 00       \tmov    $0x3,%esi\n    1ca2:\t48 89 c7             \tmov    %rax,%rdi\n    1ca5:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1caa:\te8 00 00 00 00       \tcallq  1caf <reduce+0x663>\n    1caf:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    1cb4:\teb 04                \tjmp    1cba <reduce+0x66e>\n    1cb6:\t48 8b 45 d0          \tmov    -0x30(%rbp),%rax\n    1cba:\t48 8b 5d f8          \tmov    -0x8(%rbp),%rbx\n    1cbe:\tc9                   \tleaveq \n    1cbf:\tc3                   \tretq   ", "code_s": "__int64 __fastcall reduce(__int64 a1, __int64 a2, int a3, __int64 a4, int a5,\n                          int a6) {\n  __int64 result;\n  _QWORD *v7;\n  __int64 v8;\n  _QWORD *v9;\n  __int64 v10;\n  _QWORD *v11;\n  __int64 v12;\n  _QWORD *v13;\n  __int64 v14;\n  _QWORD *v15;\n  __int64 v16;\n  _QWORD *v17;\n  __int64 v18;\n  _QWORD *v19;\n  __int64 v20;\n  _BOOL4 v21;\n  _BOOL4 v22;\n  __int64 v23;\n  __int64 v24;\n  __int64 v25;\n  __int64 v26;\n  __int64 v27;\n  __int64 v28;\n  bool v29;\n  __int64 <span class=\"supfact\">v30</span>;\n  __int64 v31;\n  __int64 v32;\n  int v33;\n  __int64 v34;\n  __int64 v35;\n  unsigned int v36;\n  v35 = a1;\n  v34 = a2;\n  v33 = a3;\n  if (*(_DWORD *)(a2 + Number) && *(_DWORD *)(v34 + Number) <= Number) {\n    if (v33 == Number) {\n      result = v34;\n    } else {\n      v36 = (unsigned __int8)optab[Number * v33] -\n            ((byte_3AC1[Number * v33] & Number) != Number);\n    LABEL_47:\n      while (v36 <\n             (unsigned __int8)optab[Number * *(unsigned int *)(v34 + Number)]) {\n        if (*(_BYTE *)(v35 + Number) &&\n            (byte_3AC1[Number * *(unsigned int *)(v34 + Number)] & Number) !=\n                Number)\n          check_promotion(v35, v34);\n        switch (*(_DWORD *)(v34 + Number)) {\n        case Number:\n        case Number:\n        case Number:\n        case Number:\n          v7 = (_QWORD *)(v34 - Number);\n          num_unary_op((unsigned int)&<span class=\"supfact\">v30</span>, v35,\n                       *(_DWORD *)(v34 + Number),\n                       (unsigned int)&<span class=\"supfact\">v30</span>, a5, a6,\n                       *(_QWORD *)(v34 + Number), *(_QWORD *)(v34 + Number),\n                       *(_QWORD *)(v34 + Number));\n          v8 = v31;\n          v7[Number] = <span class=\"supfact\">v30</span>;\n          v7[Number] = v8;\n          v7[Number] = v32;\n          goto LABEL_44;\n        case Number:\n        case Number:\n        case Number:\n        case Number:\n          v11 = (_QWORD *)(v34 - Number);\n          num_inequality_op(\n              (unsigned int)&<span class=\"supfact\">v30</span>, v35,\n              *(_DWORD *)(v34 + Number), (unsigned int)&<span class=\"supfact\">v30</span>, a5,\n              a6, *(_QWORD *)(v34 - Number + Number),\n              *(_QWORD *)(v34 - Number + Number),\n              *(_QWORD *)(v34 - Number + Number), *(_QWORD *)(v34 + Number),\n              *(_QWORD *)(v34 + Number), *(_QWORD *)(v34 + Number));\n          v12 = v31;\n          v11[Number] = <span class=\"supfact\">v30</span>;\n          v11[Number] = v12;\n          v11[Number] = v32;\n          goto LABEL_44;\n        case Number:\n        case Number:\n        case Number:\n        case Number:\n        case Number:\n        case Number:\n        case Number:\n          v9 = (_QWORD *)(v34 - Number);\n          num_binary_op(\n              (unsigned int)&<span class=\"supfact\">v30</span>, v35,\n              *(_DWORD *)(v34 + Number), (unsigned int)&<span class=\"supfact\">v30</span>, a5,\n              a6, *(_QWORD *)(v34 - Number + Number),\n              *(_QWORD *)(v34 - Number + Number),\n              *(_QWORD *)(v34 - Number + Number), *(_QWORD *)(v34 + Number),\n              *(_QWORD *)(v34 + Number), *(_QWORD *)(v34 + Number));\n          v10 = v31;\n          v9[Number] = <span class=\"supfact\">v30</span>;\n          v9[Number] = v10;\n          v9[Number] = v32;\n          goto LABEL_44;\n        case Number:\n          v17 = (_QWORD *)(v34 - Number);\n          num_mul((unsigned int)&<span class=\"supfact\">v30</span>, v35, v34 - Number,\n                  (unsigned int)&<span class=\"supfact\">v30</span>, a5, a6,\n                  *(_QWORD *)(v34 - Number + Number),\n                  *(_QWORD *)(v34 - Number + Number),\n                  *(_QWORD *)(v34 - Number + Number), *(_QWORD *)(v34 + Number),\n                  *(_QWORD *)(v34 + Number), *(_QWORD *)(v34 + Number));\n          v18 = v31;\n          v17[Number] = <span class=\"supfact\">v30</span>;\n          v17[Number] = v18;\n          v17[Number] = v32;\n          goto LABEL_44;\n        case Number:\n        case Number:\n          v19 = (_QWORD *)(v34 - Number);\n          num_div_op(\n              (unsigned int)&<span class=\"supfact\">v30</span>, v35,\n              *(_DWORD *)(v34 + Number), (unsigned int)&<span class=\"supfact\">v30</span>, a5,\n              a6, *(_QWORD *)(v34 - Number + Number),\n              *(_QWORD *)(v34 - Number + Number),\n              *(_QWORD *)(v34 - Number + Number), *(_QWORD *)(v34 + Number),\n              *(_QWORD *)(v34 + Number), *(_QWORD *)(v34 + Number));\n          v20 = v31;\n          v19[Number] = <span class=\"supfact\">v30</span>;\n          v19[Number] = v20;\n          v19[Number] = v32;\n          goto LABEL_44;\n        case Number:\n        case Number:\n        case Number:\n          v15 = (_QWORD *)(v34 - Number);\n          num_bitwise_op(\n              (unsigned int)&<span class=\"supfact\">v30</span>, v35,\n              *(_DWORD *)(v34 + Number), (unsigned int)&<span class=\"supfact\">v30</span>, a5,\n              a6, *(_QWORD *)(v34 - Number + Number),\n              *(_QWORD *)(v34 - Number + Number),\n              *(_QWORD *)(v34 - Number + Number), *(_QWORD *)(v34 + Number),\n              *(_QWORD *)(v34 + Number), *(_QWORD *)(v34 + Number));\n          v16 = v31;\n          v15[Number] = <span class=\"supfact\">v30</span>;\n          v15[Number] = v16;\n          v15[Number] = v32;\n          goto LABEL_44;\n        case Number:\n          v34 -= Number L;\n          if (*(_OWORD *)(v34 + Number) == Number L)\n            --*(_DWORD *)(v35 + Number);\n          v22 = *(_OWORD *)(v34 + Number) != Number L &&\n                *(_OWORD *)(v34 + Number) != Number L;\n          *(_QWORD *)(v34 + Number) = v22;\n          *(_QWORD *)(v34 + Number) = Number L;\n          *(_BYTE *)(v34 + Number) = Number;\n          *(_BYTE *)(v34 + Number) = Number;\n          goto LABEL_47;\n        case Number:\n          v34 -= Number L;\n          if (*(_OWORD *)(v34 + Number) != Number L)\n            --*(_DWORD *)(v35 + Number);\n          v21 = *(_OWORD *)(v34 + Number) != Number L ||\n                *(_OWORD *)(v34 + Number) != Number L;\n          *(_QWORD *)(v34 + Number) = v21;\n          *(_QWORD *)(v34 + Number) = Number L;\n          *(_BYTE *)(v34 + Number) = Number;\n          *(_BYTE *)(v34 + Number) = Number;\n          goto LABEL_47;\n        case Number:\n          cpp_error(v35, Number L, String);\n          return Number L;\n        case Number:\n          v34 -= Number L;\n          if (*(_OWORD *)(v34 + Number) == Number L) {\n            v26 = v34 + Number;\n            v27 = v34;\n            v28 = *(_QWORD *)(v34 + Number);\n            *(_QWORD *)(v34 + Number) = *(_QWORD *)(v34 + Number);\n          } else {\n            --*(_DWORD *)(v35 + Number);\n            v26 = v34 + Number;\n            v27 = v34;\n            v28 = *(_QWORD *)(v34 + Number);\n            *(_QWORD *)(v34 + Number) = *(_QWORD *)(v34 + Number);\n          }\n          *(_QWORD *)(v27 + Number) = v28;\n          *(_QWORD *)(v27 + Number) = *(_QWORD *)(v26 + Number);\n          v29 = *(_BYTE *)(v34 + Number) || *(_BYTE *)(v34 + Number);\n          *(_BYTE *)(v34 + Number) = v29;\n          goto LABEL_47;\n        case Number:\n          if (v33 == Number) {\n            v34 -= Number L;\n            v23 = v34 + Number;\n            v24 = v34;\n            v25 = *(_QWORD *)(v34 + Number);\n            *(_QWORD *)(v34 + Number) = *(_QWORD *)(v34 + Number);\n            *(_QWORD *)(v24 + Number) = v25;\n            *(_QWORD *)(v24 + Number) = *(_QWORD *)(v23 + Number);\n            result = v34;\n          } else {\n            cpp_error(v35, Number L, String);\n            result = Number L;\n          }\n          return result;\n        case Number:\n        case Number:\n          v13 = (_QWORD *)(v34 - Number);\n          num_equality_op((unsigned int)&<span class=\"supfact\">v30</span>, v35,\n                          *(_DWORD *)(v34 + Number),\n                          (unsigned int)&<span class=\"supfact\">v30</span>, a5, a6,\n                          *(_QWORD *)(v34 - Number + Number),\n                          *(_QWORD *)(v34 - Number + Number),\n                          *(_QWORD *)(v34 - Number + Number),\n                          *(_QWORD *)(v34 + Number), *(_QWORD *)(v34 + Number));\n          v14 = v31;\n          v13[Number] = <span class=\"supfact\">v30</span>;\n          v13[Number] = v14;\n          v13[Number] = v32;\n        LABEL_44:\n          v34 -= Number L;\n          if (*(_BYTE *)(v34 + Number) && !*(_DWORD *)(v35 + Number))\n            cpp_error(v35, Number L, String);\n          break;\n        default:\n          goto LABEL_3;\n        }\n      }\n      if (v33 == Number) {\n        cpp_error(v35, Number L, String);\n        result = Number L;\n      } else {\n        result = v34;\n      }\n    }\n  } else {\n  LABEL_3:\n    cpp_error(v35, Number L, String, *(unsigned int *)(v34 + Number));\n    result = Number L;\n  }\n  return result;\n}", "code_t": "op *__cdecl reduce(cpp_reader_0 *pfile, op *top, cpp_ttype op) {\n  op *result;\n  op *v4;\n  cpp_num_part v5;\n  op *v6;\n  cpp_num_part v7;\n  op *v8;\n  cpp_num_part v9;\n  op *v10;\n  cpp_num_part v11;\n  op *v12;\n  cpp_num_part v13;\n  op *v14;\n  cpp_num_part v15;\n  op *v16;\n  cpp_num_part v17;\n  _BOOL4 v18;\n  _BOOL4 v19;\n  op *v20;\n  op *v21;\n  cpp_num_part v22;\n  op *v23;\n  op *v24;\n  cpp_num_part v25;\n  bool v26;\n  cpp_num_0 <span class=\"supfact\">v27</span>;\n  cpp_ttype opa;\n  op *topa;\n  cpp_reader_0 *pfilea;\n  unsigned int prio;\n  pfilea = pfile;\n  topa = top;\n  opa = op;\n  if (top->op && topa->op <= (unsigned int)CPP_MINUS_EQ) {\n    if (opa == CPP_OPEN_PAREN) {\n      result = topa;\n    } else {\n      prio = optab[opa].prio - ((optab[opa].flags & Number) != Number);\n    LABEL_47:\n      while (prio < optab[topa->op].prio) {\n        if (pfilea->opts.warn_num_sign_change &&\n            (optab[topa->op].flags & Number) != Number)\n          check_promotion(pfilea, topa);\n        switch (topa->op) {\n        case CPP_NOT:\n        case CPP_COMPL:\n        case CPP_PLUS_EQ:\n        case CPP_MINUS_EQ:\n          v4 = topa - Number;\n          num_unary_op(&<span class=\"supfact\">v27</span>, pfilea, topa->value, topa->op);\n          v5 = <span class=\"supfact\">v27</span>.low;\n          v4->value.high = <span class=\"supfact\">v27</span>.high;\n          v4->value.low = v5;\n          *(_QWORD *)&v4->value.unsignedp =\n              *(_QWORD *)&<span class=\"supfact\">v27</span>.unsignedp;\n          goto LABEL_44;\n        case CPP_GREATER:\n        case CPP_LESS:\n        case CPP_GREATER_EQ:\n        case CPP_LESS_EQ:\n          v8 = topa - Number;\n          num_inequality_op(&<span class=\"supfact\">v27</span>, pfilea, topa[Number].value,\n                            topa->value, topa->op);\n          v9 = <span class=\"supfact\">v27</span>.low;\n          v8->value.high = <span class=\"supfact\">v27</span>.high;\n          v8->value.low = v9;\n          *(_QWORD *)&v8->value.unsignedp =\n              *(_QWORD *)&<span class=\"supfact\">v27</span>.unsignedp;\n          goto LABEL_44;\n        case CPP_PLUS:\n        case CPP_MINUS:\n        case CPP_RSHIFT:\n        case CPP_LSHIFT:\n        case CPP_MIN:\n        case CPP_MAX:\n        case CPP_COMMA:\n          v6 = topa - Number;\n          num_binary_op(&<span class=\"supfact\">v27</span>, pfilea, topa[Number].value,\n                        topa->value, topa->op);\n          v7 = <span class=\"supfact\">v27</span>.low;\n          v6->value.high = <span class=\"supfact\">v27</span>.high;\n          v6->value.low = v7;\n          *(_QWORD *)&v6->value.unsignedp =\n              *(_QWORD *)&<span class=\"supfact\">v27</span>.unsignedp;\n          goto LABEL_44;\n        case CPP_MULT:\n          v14 = topa - Number;\n          num_mul(&<span class=\"supfact\">v27</span>, pfilea, topa[Number].value,\n                  topa->value);\n          v15 = <span class=\"supfact\">v27</span>.low;\n          v14->value.high = <span class=\"supfact\">v27</span>.high;\n          v14->value.low = v15;\n          *(_QWORD *)&v14->value.unsignedp =\n              *(_QWORD *)&<span class=\"supfact\">v27</span>.unsignedp;\n          goto LABEL_44;\n        case CPP_DIV:\n        case CPP_MOD:\n          v16 = topa - Number;\n          num_div_op(&<span class=\"supfact\">v27</span>, pfilea, topa[Number].value,\n                     topa->value, topa->op);\n          v17 = <span class=\"supfact\">v27</span>.low;\n          v16->value.high = <span class=\"supfact\">v27</span>.high;\n          v16->value.low = v17;\n          *(_QWORD *)&v16->value.unsignedp =\n              *(_QWORD *)&<span class=\"supfact\">v27</span>.unsignedp;\n          goto LABEL_44;\n        case CPP_AND:\n        case CPP_OR:\n        case CPP_XOR:\n          v12 = topa - Number;\n          num_bitwise_op(&<span class=\"supfact\">v27</span>, pfilea, topa[Number].value,\n                         topa->value, topa->op);\n          v13 = <span class=\"supfact\">v27</span>.low;\n          v12->value.high = <span class=\"supfact\">v27</span>.high;\n          v12->value.low = v13;\n          *(_QWORD *)&v12->value.unsignedp =\n              *(_QWORD *)&<span class=\"supfact\">v27</span>.unsignedp;\n          goto LABEL_44;\n        case CPP_AND_AND:\n          --topa;\n          if (*(_OWORD *)&topa->value.high == Number L)\n            --pfilea->state.skip_eval;\n          v19 = *(_OWORD *)&topa->value.high != Number L &&\n                *(_OWORD *)&topa[Number].value.high != Number L;\n          topa->value.low = v19;\n          topa->value.high = Number L;\n          topa->value.unsignedp = Number;\n          topa->value.overflow = Number;\n          goto LABEL_47;\n        case CPP_OR_OR:\n          --topa;\n          if (*(_OWORD *)&topa->value.high != Number L)\n            --pfilea->state.skip_eval;\n          v18 = *(_OWORD *)&topa->value.high != Number L ||\n                *(_OWORD *)&topa[Number].value.high != Number L;\n          topa->value.low = v18;\n          topa->value.high = Number L;\n          topa->value.unsignedp = Number;\n          topa->value.overflow = Number;\n          goto LABEL_47;\n        case CPP_QUERY:\n          cpp_error(pfilea, Number L, String);\n          return Number L;\n        case CPP_COLON:\n          topa -= Number;\n          if (*(_OWORD *)&topa->value.high == Number L) {\n            v23 = topa + Number;\n            v24 = topa;\n            v25 = topa[Number].value.low;\n            topa->value.high = topa[Number].value.high;\n          } else {\n            --pfilea->state.skip_eval;\n            v23 = topa + Number;\n            v24 = topa;\n            v25 = topa[Number].value.low;\n            topa->value.high = topa[Number].value.high;\n          }\n          v24->value.low = v25;\n          *(_QWORD *)&v24->value.unsignedp = *(_QWORD *)&v23->value.unsignedp;\n          v26 = topa[Number].value.unsignedp || topa[Number].value.unsignedp;\n          topa->value.unsignedp = v26;\n          goto LABEL_47;\n        case CPP_OPEN_PAREN:\n          if (opa == CPP_CLOSE_PAREN) {\n            v20 = topa--;\n            v21 = topa;\n            v22 = topa[Number].value.low;\n            topa->value.high = topa[Number].value.high;\n            v21->value.low = v22;\n            *(_QWORD *)&v21->value.unsignedp = *(_QWORD *)&v20->value.unsignedp;\n            result = topa;\n          } else {\n            cpp_error(pfilea, Number L, String);\n            result = Number L;\n          }\n          return result;\n        case CPP_EQ_EQ:\n        case CPP_NOT_EQ:\n          v10 = topa - Number;\n          num_equality_op(&<span class=\"supfact\">v27</span>, pfilea, topa[Number].value,\n                          topa->value, topa->op);\n          v11 = <span class=\"supfact\">v27</span>.low;\n          v10->value.high = <span class=\"supfact\">v27</span>.high;\n          v10->value.low = v11;\n          *(_QWORD *)&v10->value.unsignedp =\n              *(_QWORD *)&<span class=\"supfact\">v27</span>.unsignedp;\n        LABEL_44:\n          --topa;\n          if (topa->value.overflow && !pfilea->state.skip_eval)\n            cpp_error(pfilea, Number L, String);\n          break;\n        default:\n          goto bad_op;\n        }\n      }\n      if (opa == CPP_CLOSE_PAREN) {\n        cpp_error(pfilea, Number L, String);\n        result = Number L;\n      } else {\n        result = topa;\n      }\n    }\n  } else {\n  bad_op:\n    cpp_error(pfilea, Number L, String, (unsigned int)topa->op);\n    result = Number L;\n  }\n  return result;\n}", "var": [{"name": "v30", "type": "disappear", "pred_name": "", "ref_name": "v27", "ref_type": "struct cpp_num_0 { cpp_num_part high; cpp_num_part low; bool unsignedp; bool overflow; PADDING (6); }"}], "body_in_train": false}, {"repo_owner": "chenbk85", "repo_name": "Dorothy", "path": "chenbk85/Dorothy/ce20adb171dfe21c2c540442dcb7880d3a1b92ec057dd3dd58112baf7e1edfc5", "path_in_repo": "chenbk85/Dorothy/samples/Cpp/TestCpp/proj.linux/obj/release/Classes/SceneTest/SceneTest.o", "objdump": "0000000000000000 <_ZN15SceneTestLayer1C2Ev.cold>:\n   0:\t48 89 ef             \tmov    %rbp,%rdi\n   3:\te8 00 00 00 00       \tcallq  8 <_ZN15SceneTestLayer1C2Ev.cold+0x8>\n   8:\t4c 89 e7             \tmov    %r12,%rdi\n   b:\te8 00 00 00 00       \tcallq  10 <_ZN14SceneTestScene11runThisTestEv.cold>", "code_s": "void __fastcall __noreturn SceneTestLayer1 SceneTestLayer1() {\n  cocos2d CCLayer *v0;\n  struct _Unwind_Exception *<span class=\"supfact\">v1</span>;\n  cocos2d CCLayer ~CCLayer(v0);\n  Unwind_Resume(<span class=\"supfact\">v1</span>);\n}", "code_t": "void __fastcall __noreturn SceneTestLayer1 SceneTestLayer1() {\n  cocos2d CCLayer *v0;\n  struct _Unwind_Exception *<span class=\"supfact\">v1</span>;\n  cocos2d CCLayer ~CCLayer(v0);\n  Unwind_Resume(<span class=\"supfact\">v1</span>);\n}", "var": [{"name": "v1", "type": "struct _Unwind_Exception *", "pred_name": "v1", "ref_name": "v1", "ref_type": "struct _Unwind_Exception *"}], "body_in_train": false}, {"repo_owner": "royceda", "repo_name": "Sudoku-Solver", "path": "royceda/Sudoku-Solver/e42fdcaf890c07c3ce7f9baf730ff78a5c0876a01ee697ee8728eb47bcc6637e", "path_in_repo": "royceda/Sudoku-Solver/src/sudoku.o", "objdump": "00000000000005af <afficheRegleS>:\n     5af:\t55                   \tpush   %rbp\n     5b0:\t48 89 e5             \tmov    %rsp,%rbp\n     5b3:\t48 83 ec 10          \tsub    $0x10,%rsp\n     5b7:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n     5be:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n     5c5:\te9 ae 00 00 00       \tjmpq   678 <afficheRegleS+0xc9>\n     5ca:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n     5cd:\t48 98                \tcltq   \n     5cf:\t48 05 64 2a 02 00    \tadd    $0x22a64,%rax\n     5d5:\t8b 44 85 1c          \tmov    0x1c(%rbp,%rax,4),%eax\n     5d9:\t89 c6                \tmov    %eax,%esi\n     5db:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     5e0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     5e5:\te8 00 00 00 00       \tcallq  5ea <afficheRegleS+0x3b>\n     5ea:\teb 4d                \tjmp    639 <afficheRegleS+0x8a>\n     5ec:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     5ef:\t48 98                \tcltq   \n     5f1:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     5f4:\t48 63 d2             \tmovslq %edx,%rdx\n     5f7:\t48 c1 e2 08          \tshl    $0x8,%rdx\n     5fb:\t48 01 d0             \tadd    %rdx,%rax\n     5fe:\t48 05 32 15 00 00    \tadd    $0x1532,%rax\n     604:\t8b 54 c5 20          \tmov    0x20(%rbp,%rax,8),%edx\n     608:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     60b:\t48 98                \tcltq   \n     60d:\t8b 4d fc             \tmov    -0x4(%rbp),%ecx\n     610:\t48 63 c9             \tmovslq %ecx,%rcx\n     613:\t48 c1 e1 08          \tshl    $0x8,%rcx\n     617:\t48 01 c8             \tadd    %rcx,%rax\n     61a:\t48 05 32 15 00 00    \tadd    $0x1532,%rax\n     620:\t8b 44 c5 1c          \tmov    0x1c(%rbp,%rax,8),%eax\n     624:\t89 c6                \tmov    %eax,%esi\n     626:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     62b:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     630:\te8 00 00 00 00       \tcallq  635 <afficheRegleS+0x86>\n     635:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n     639:\t81 7d f8 ff 00 00 00 \tcmpl   $0xff,-0x8(%rbp)\n     640:\t7f 21                \tjg     663 <afficheRegleS+0xb4>\n     642:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     645:\t48 98                \tcltq   \n     647:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     64a:\t48 63 d2             \tmovslq %edx,%rdx\n     64d:\t48 c1 e2 08          \tshl    $0x8,%rdx\n     651:\t48 01 d0             \tadd    %rdx,%rax\n     654:\t48 05 32 15 00 00    \tadd    $0x1532,%rax\n     65a:\t8b 44 c5 1c          \tmov    0x1c(%rbp,%rax,8),%eax\n     65e:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     661:\t75 89                \tjne    5ec <afficheRegleS+0x3d>\n     663:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n     668:\te8 00 00 00 00       \tcallq  66d <afficheRegleS+0xbe>\n     66d:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n     671:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)\n     678:\t81 7d fc ff 00 00 00 \tcmpl   $0xff,-0x4(%rbp)\n     67f:\t7f 25                \tjg     6a6 <afficheRegleS+0xf7>\n     681:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n     684:\t48 98                \tcltq   \n     686:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n     689:\t48 63 d2             \tmovslq %edx,%rdx\n     68c:\t48 c1 e2 08          \tshl    $0x8,%rdx\n     690:\t48 01 d0             \tadd    %rdx,%rax\n     693:\t48 05 32 15 00 00    \tadd    $0x1532,%rax\n     699:\t8b 44 c5 1c          \tmov    0x1c(%rbp,%rax,8),%eax\n     69d:\t83 f8 ff             \tcmp    $0xffffffff,%eax\n     6a0:\t0f 85 24 ff ff ff    \tjne    5ca <afficheRegleS+0x1b>\n     6a6:\t90                   \tnop\n     6a7:\tc9                   \tleaveq \n     6a8:\tc3                   \tretq   ", "code_s": "int __fastcall afficheRegleS(__int64 a1, __int64 a2, __int64 a3, __int64 a4,\n                             __int64 a5, __int64 a6, int <span class=\"supfact\">a7</span>,\n                             __int64 a8, int a9) {\n  int result;\n  int i;\n  int v11;\n  v11 = Number;\n  for (i = Number; v11 <= Number; i = Number) {\n    result = *((_DWORD *)&a8 + Number * (__int64)v11 + Number);\n    if (result == Number)\n      break;\n    printf(String, *((unsigned int *)&a8 + v11 + Number));\n    while (i <= Number && *((_DWORD *)&a8 + Number * (__int64)v11 + Number * i +\n                            Number) != Number) {\n      printf(\n          String,\n          *((unsigned int *)&a8 + Number * (__int64)v11 + Number * i + Number),\n          (unsigned int)*(&a9 + Number * (__int64)v11 + Number * i + Number));\n      ++i;\n    }\n    result = putchar(Number);\n    ++v11;\n  }\n  return result;\n}", "code_t": "void __cdecl afficheRegleS(Sudoku_0 <span class=\"supfact\">S</span>) {\n  int j;\n  int i;\n  i = Number;\n  j = Number;\n  while (i <= Number &&\n         <span class=\"supfact\">S</span>.RS.<span class=\"supfact\">S</span>[(__int64)i][Number].x !=\n             Number) {\n    printf(String, (unsigned int)<span class=\"supfact\">S</span>.RS.Ssum[i]);\n    while (j <= Number &&\n           <span class=\"supfact\">S</span>.RS.<span class=\"supfact\">S</span>[(__int64)i][j].x != Number) {\n      printf(\n          String,\n          (unsigned int)<span class=\"supfact\">S</span>.RS.<span class=\"supfact\">S</span>[(__int64)i][j].x,\n          (unsigned int)<span class=\"supfact\">S</span>.RS.<span class=\"supfact\">S</span>[(__int64)i][j]\n              .y);\n      ++j;\n    }\n    putchar(Number);\n    ++i;\n    j = Number;\n  }\n}", "var": [{"name": "a7", "type": "__unk__", "pred_name": "hdr", "ref_name": "S", "ref_type": "struct Sudoku_0 { int Nsymbol; int Nrows; int Ncolumns; char nom; PADDING (3); int[16][16] G; ReglesU_0 RU; ReglesO_0 RO; ReglesS_0 RS; int[256] col; }"}], "body_in_train": false}, {"repo_owner": "isDerek", "repo_name": "BTC-Device", "path": "isDerek/BTC-Device/9eb5bdb0143a63b31132ea31d83410eefa0b801b31f29f5ffc43fd093e6ca1ae", "path_in_repo": "isDerek/BTC-Device/BTC_APP/middleware/multicore/erpc/Debug/Linux/erpcsniffer/obj/erpcgen/src/types/Type.o", "objdump": "0000000000000000 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN7erpcgen12StructMemberEES6_EET0_T_S9_S8_>:\n   0:\t55                   \tpush   %rbp\n   1:\t48 89 e5             \tmov    %rsp,%rbp\n   4:\t48 83 ec 20          \tsub    $0x20,%rsp\n   8:\t48 89 7d f8          \tmov    %rdi,-0x8(%rbp)\n   c:\t48 89 75 f0          \tmov    %rsi,-0x10(%rbp)\n  10:\t48 89 55 e8          \tmov    %rdx,-0x18(%rbp)\n  14:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  18:\t48 8b 4d f0          \tmov    -0x10(%rbp),%rcx\n  1c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n  20:\t48 89 ce             \tmov    %rcx,%rsi\n  23:\t48 89 c7             \tmov    %rax,%rdi\n  26:\te8 00 00 00 00       \tcallq  2b <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPN7erpcgen12StructMemberEES6_EET0_T_S9_S8_+0x2b>\n  2b:\tc9                   \tleaveq \n  2c:\tc3                   \tretq   ", "code_s": "__int64 __fastcall std __uninitialized_copy<true>\n__uninit_copy<std move_iterator<erpcgen StructMember **>,\n              erpcgen StructMember **>(__int64 <span class=\"supfact\">a1</span>,\n                                       __int64 <span class=\"supfact\">a2</span>, __int64 a3) {\n  return std\n      copy<std move_iterator<erpcgen StructMember **>, erpcgen StructMember **>(\n          <span class=\"supfact\">a1</span>, <span class=\"supfact\">a2</span>, a3);\n}", "code_t": "erpcgen StructMember **__cdecl std __uninitialized_copy<true>\n__uninit_copy<std move_iterator<erpcgen StructMember **>,\n              erpcgen StructMember **>(\n    std move_iterator<erpcgen StructMember **> <span class=\"supfact\">__first</span>,\n    std move_iterator<erpcgen StructMember **> <span class=\"supfact\">__last</span>,\n    erpcgen StructMember **__result) {\n  return std\n      copy<std move_iterator<erpcgen StructMember **>, erpcgen StructMember **>(\n          <span class=\"supfact\">__first</span>, <span class=\"supfact\">__last</span>, __result);\n}", "var": [{"name": "a1", "type": "struct std::move_iterator<erpcgen::ListType**> { erpcgen::ListType ** _M_current; }", "pred_name": "__first", "ref_name": "__first", "ref_type": "struct std::move_iterator<erpcgen::StructMember**> { erpcgen::StructMember ** _M_current; }"}, {"name": "a2", "type": "struct std::move_iterator<erpcgen::ListType**> { erpcgen::ListType ** _M_current; }", "pred_name": "__last", "ref_name": "__last", "ref_type": "struct std::move_iterator<erpcgen::StructMember**> { erpcgen::StructMember ** _M_current; }"}], "body_in_train": false}, {"repo_owner": "md-jamal", "repo_name": "6LoWPAN", "path": "md-jamal/6LoWPAN/cb02efab211507b42ac8db11432d7119185908c8c6af65c8270632680a5920d7", "path_in_repo": "md-jamal/6LoWPAN/tinyos-release/tools/toolchain/nesc/nesc-1.3.3/src/stmt.o", "objdump": "000000000000082d <check_labels>:\n 82d:\t55                   \tpush   %rbp\n 82e:\t48 89 e5             \tmov    %rsp,%rbp\n 831:\t48 83 ec 30          \tsub    $0x30,%rsp\n 835:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 83c <check_labels+0xf>\n 83c:\t48 8b 80 88 00 00 00 \tmov    0x88(%rax),%rax\n 843:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n 847:\t48 89 d6             \tmov    %rdx,%rsi\n 84a:\t48 89 c7             \tmov    %rax,%rdi\n 84d:\te8 00 00 00 00       \tcallq  852 <check_labels+0x25>\n 852:\teb 71                \tjmp    8c5 <check_labels+0x98>\n 854:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 858:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n 85c:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 860:\t48 8b 40 18          \tmov    0x18(%rax),%rax\n 864:\t48 85 c0             \ttest   %rax,%rax\n 867:\t75 24                \tjne    88d <check_labels+0x60>\n 869:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 86d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 871:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 875:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 879:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 87e:\t48 89 c7             \tmov    %rax,%rdi\n 881:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 886:\te8 00 00 00 00       \tcallq  88b <check_labels+0x5e>\n 88b:\teb 38                \tjmp    8c5 <check_labels+0x98>\n 88d:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 891:\t0f b6 40 09          \tmovzbl 0x9(%rax),%eax\n 895:\t84 c0                \ttest   %al,%al\n 897:\t75 2c                \tjne    8c5 <check_labels+0x98>\n 899:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 89f <check_labels+0x72>\n 89f:\t85 c0                \ttest   %eax,%eax\n 8a1:\t74 22                \tje     8c5 <check_labels+0x98>\n 8a3:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 8a7:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n 8ab:\t48 8b 40 10          \tmov    0x10(%rax),%rax\n 8af:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n 8b3:\tbe 00 00 00 00       \tmov    $0x0,%esi\n 8b8:\t48 89 c7             \tmov    %rax,%rdi\n 8bb:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 8c0:\te8 00 00 00 00       \tcallq  8c5 <check_labels+0x98>\n 8c5:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n 8c9:\t48 8d 4d d0          \tlea    -0x30(%rbp),%rcx\n 8cd:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n 8d1:\t48 89 ce             \tmov    %rcx,%rsi\n 8d4:\t48 89 c7             \tmov    %rax,%rdi\n 8d7:\te8 00 00 00 00       \tcallq  8dc <check_labels+0xaf>\n 8dc:\t84 c0                \ttest   %al,%al\n 8de:\t0f 85 70 ff ff ff    \tjne    854 <check_labels+0x27>\n 8e4:\t90                   \tnop\n 8e5:\t90                   \tnop\n 8e6:\tc9                   \tleaveq \n 8e7:\tc3                   \tretq   ", "code_s": "__int64 check_labels() {\n  __int64 result;\n  const char *v1;\n  __int64 v2;\n  char <span class=\"supfact\">v3</span>[Number];\n  __int64 v4;\n  env_scan(*(_QWORD *)(current[Number] + Number L), <span class=\"supfact\">v3</span>);\n  while (Number) {\n    result = env_next(<span class=\"supfact\">v3</span>, &v1, &v2);\n    if (!(_BYTE)result)\n      break;\n    v4 = v2;\n    if (*(_QWORD *)(v2 + Number)) {\n      if (!*(_BYTE *)(v4 + Number)) {\n        if (warn_unused)\n          warning_with_location(\n              *(_QWORD *)(*(_QWORD *)(v4 + Number) + Number L), String, v1);\n      }\n    } else {\n      error_with_location(*(_QWORD *)(*(_QWORD *)(v4 + Number) + Number L),\n                          String, v1);\n    }\n  }\n  return result;\n}", "code_t": "void __cdecl check_labels() {\n  const char *lname;\n  void *ld;\n  env_scanner <span class=\"supfact\">scan_labels</span>;\n  label_declaration_0 ldecl;\n  env_scan(*(_QWORD *)(current[Number] + Number L),\n           &<span class=\"supfact\">scan_labels</span>);\n  while ((unsigned __int8)env_next(&<span class=\"supfact\">scan_labels</span>, &lname, &ld)) {\n    ldecl = (label_declaration_0)ld;\n    if (*((_QWORD *)ld + Number)) {\n      if (!ldecl->used) {\n        if (warn_unused)\n          warning_with_location(ldecl->firstuse->location, String, lname);\n      }\n    } else {\n      error_with_location(ldecl->firstuse->location, String, lname);\n    }\n  }\n}", "var": [{"name": "v3", "type": "__unk__", "pred_name": "__unk__", "ref_name": "scan_labels", "ref_type": "struct env_scanner { dhash_table_0 h; int index; PADDING (4); }"}], "body_in_train": false}, {"repo_owner": "ftnapps", "repo_name": "pkg-sbbs", "path": "ftnapps/pkg-sbbs/72d863e358d23a9787e1d769e3a76917875ec295a59ff580baf5a03eba41f638", "path_in_repo": "ftnapps/pkg-sbbs/src/uifc/gcc.linux.exe.debug/uifctest", "objdump": "00000000004043d4 <mousetofield>:\n  4043d4:\t55                   \tpush   %rbp\n  4043d5:\t48 89 e5             \tmov    %rsp,%rbp\n  4043d8:\t48 83 ec 50          \tsub    $0x50,%rsp\n  4043dc:\t89 7d cc             \tmov    %edi,-0x34(%rbp)\n  4043df:\t89 75 c8             \tmov    %esi,-0x38(%rbp)\n  4043e2:\t89 55 c4             \tmov    %edx,-0x3c(%rbp)\n  4043e5:\t89 4d c0             \tmov    %ecx,-0x40(%rbp)\n  4043e8:\t44 89 45 bc          \tmov    %r8d,-0x44(%rbp)\n  4043ec:\t44 89 4d b8          \tmov    %r9d,-0x48(%rbp)\n  4043f0:\t8b 45 cc             \tmov    -0x34(%rbp),%eax\n  4043f3:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n  4043f6:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4043fa:\t48 89 c7             \tmov    %rax,%rdi\n  4043fd:\te8 1c f0 00 00       \tcallq  41341e <ciolib_getmouse>\n  404402:\t85 c0                \ttest   %eax,%eax\n  404404:\t0f 85 7f 01 00 00    \tjne    404589 <mousetofield+0x1b5>\n  40440a:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40440d:\t83 f8 05             \tcmp    $0x5,%eax\n  404410:\t7e 74                \tjle    404486 <mousetofield+0xb2>\n  404412:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  404415:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n  404418:\t83 c2 05             \tadd    $0x5,%edx\n  40441b:\t39 d0                \tcmp    %edx,%eax\n  40441d:\t7f 67                \tjg     404486 <mousetofield+0xb2>\n  40441f:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  404422:\t83 f8 05             \tcmp    $0x5,%eax\n  404425:\t7e 5f                \tjle    404486 <mousetofield+0xb2>\n  404427:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40442a:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n  40442d:\t83 c2 05             \tadd    $0x5,%edx\n  404430:\t39 d0                \tcmp    %edx,%eax\n  404432:\t7f 52                \tjg     404486 <mousetofield+0xb2>\n  404434:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40443b:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40443e:\t83 f8 06             \tcmp    $0x6,%eax\n  404441:\t75 0e                \tjne    404451 <mousetofield+0x7d>\n  404443:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  404447:\t48 89 c7             \tmov    %rax,%rdi\n  40444a:\te8 37 f1 00 00       \tcallq  413586 <ciolib_ungetmouse>\n  40444f:\teb 35                \tjmp    404486 <mousetofield+0xb2>\n  404451:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  404454:\t8d 50 fa             \tlea    -0x6(%rax),%edx\n  404457:\t48 8b 45 18          \tmov    0x18(%rbp),%rax\n  40445b:\t8b 00                \tmov    (%rax),%eax\n  40445d:\t29 c2                \tsub    %eax,%edx\n  40445f:\t89 d0                \tmov    %edx,%eax\n  404461:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  404464:\t48 8b 45 18          \tmov    0x18(%rbp),%rax\n  404468:\t8b 10                \tmov    (%rax),%edx\n  40446a:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40446d:\t01 c2                \tadd    %eax,%edx\n  40446f:\t48 8b 45 18          \tmov    0x18(%rbp),%rax\n  404473:\t89 10                \tmov    %edx,(%rax)\n  404475:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  404479:\t8b 10                \tmov    (%rax),%edx\n  40447b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40447e:\t01 c2                \tadd    %eax,%edx\n  404480:\t48 8b 45 10          \tmov    0x10(%rbp),%rax\n  404484:\t89 10                \tmov    %edx,(%rax)\n  404486:\t8b 45 b8             \tmov    -0x48(%rbp),%eax\n  404489:\t8d 50 06             \tlea    0x6(%rax),%edx\n  40448c:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40448f:\t39 c2                \tcmp    %eax,%edx\n  404491:\t7d 7b                \tjge    40450e <mousetofield+0x13a>\n  404493:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  404496:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n  404499:\t83 c2 03             \tadd    $0x3,%edx\n  40449c:\t01 d2                \tadd    %edx,%edx\n  40449e:\t39 d0                \tcmp    %edx,%eax\n  4044a0:\t7f 6c                \tjg     40450e <mousetofield+0x13a>\n  4044a2:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4044a5:\t83 f8 05             \tcmp    $0x5,%eax\n  4044a8:\t7e 64                \tjle    40450e <mousetofield+0x13a>\n  4044aa:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  4044ad:\t8b 55 bc             \tmov    -0x44(%rbp),%edx\n  4044b0:\t83 c2 05             \tadd    $0x5,%edx\n  4044b3:\t39 d0                \tcmp    %edx,%eax\n  4044b5:\t7f 57                \tjg     40450e <mousetofield+0x13a>\n  4044b7:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%rbp)\n  4044be:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  4044c1:\t8b 55 b8             \tmov    -0x48(%rbp),%edx\n  4044c4:\t83 c2 07             \tadd    $0x7,%edx\n  4044c7:\t39 d0                \tcmp    %edx,%eax\n  4044c9:\t75 0e                \tjne    4044d9 <mousetofield+0x105>\n  4044cb:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  4044cf:\t48 89 c7             \tmov    %rax,%rdi\n  4044d2:\te8 af f0 00 00       \tcallq  413586 <ciolib_ungetmouse>\n  4044d7:\teb 35                \tjmp    40450e <mousetofield+0x13a>\n  4044d9:\t8b 45 e0             \tmov    -0x20(%rbp),%eax\n  4044dc:\t8d 50 fa             \tlea    -0x6(%rax),%edx\n  4044df:\t48 8b 45 28          \tmov    0x28(%rbp),%rax\n  4044e3:\t8b 00                \tmov    (%rax),%eax\n  4044e5:\t29 c2                \tsub    %eax,%edx\n  4044e7:\t89 d0                \tmov    %edx,%eax\n  4044e9:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n  4044ec:\t48 8b 45 28          \tmov    0x28(%rbp),%rax\n  4044f0:\t8b 10                \tmov    (%rax),%edx\n  4044f2:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  4044f5:\t01 c2                \tadd    %eax,%edx\n  4044f7:\t48 8b 45 28          \tmov    0x28(%rbp),%rax\n  4044fb:\t89 10                \tmov    %edx,(%rax)\n  4044fd:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n  404501:\t8b 10                \tmov    (%rax),%edx\n  404503:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  404506:\t01 c2                \tadd    %eax,%edx\n  404508:\t48 8b 45 20          \tmov    0x20(%rbp),%rax\n  40450c:\t89 10                \tmov    %edx,(%rax)\n  40450e:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  404511:\t83 e0 01             \tand    $0x1,%eax\n  404514:\t85 c0                \ttest   %eax,%eax\n  404516:\t75 30                \tjne    404548 <mousetofield+0x174>\n  404518:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40451b:\t83 f8 05             \tcmp    $0x5,%eax\n  40451e:\t7e 28                \tjle    404548 <mousetofield+0x174>\n  404520:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  404523:\t8b 55 c0             \tmov    -0x40(%rbp),%edx\n  404526:\t83 c2 03             \tadd    $0x3,%edx\n  404529:\t39 d0                \tcmp    %edx,%eax\n  40452b:\t7f 1b                \tjg     404548 <mousetofield+0x174>\n  40452d:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  404530:\t39 45 c4             \tcmp    %eax,-0x3c(%rbp)\n  404533:\t75 13                \tjne    404548 <mousetofield+0x174>\n  404535:\tc7 45 fc 02 00 00 00 \tmovl   $0x2,-0x4(%rbp)\n  40453c:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  404540:\t48 89 c7             \tmov    %rax,%rdi\n  404543:\te8 3e f0 00 00       \tcallq  413586 <ciolib_ungetmouse>\n  404548:\t8b 45 c8             \tmov    -0x38(%rbp),%eax\n  40454b:\t25 00 01 00 00       \tand    $0x100,%eax\n  404550:\t85 c0                \ttest   %eax,%eax\n  404552:\t74 35                \tje     404589 <mousetofield+0x1b5>\n  404554:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  404557:\t83 f8 05             \tcmp    $0x5,%eax\n  40455a:\t7e 2d                \tjle    404589 <mousetofield+0x1b5>\n  40455c:\t8b 45 e4             \tmov    -0x1c(%rbp),%eax\n  40455f:\t8b 55 c0             \tmov    -0x40(%rbp),%edx\n  404562:\t83 c2 03             \tadd    $0x3,%edx\n  404565:\t39 d0                \tcmp    %edx,%eax\n  404567:\t7f 20                \tjg     404589 <mousetofield+0x1b5>\n  404569:\t8b 45 e8             \tmov    -0x18(%rbp),%eax\n  40456c:\t8b 55 c4             \tmov    -0x3c(%rbp),%edx\n  40456f:\t83 c2 01             \tadd    $0x1,%edx\n  404572:\t39 d0                \tcmp    %edx,%eax\n  404574:\t75 13                \tjne    404589 <mousetofield+0x1b5>\n  404576:\tc7 45 fc 03 00 00 00 \tmovl   $0x3,-0x4(%rbp)\n  40457d:\t48 8d 45 d0          \tlea    -0x30(%rbp),%rax\n  404581:\t48 89 c7             \tmov    %rax,%rdi\n  404584:\te8 fd ef 00 00       \tcallq  413586 <ciolib_ungetmouse>\n  404589:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40458c:\tc9                   \tleaveq \n  40458d:\tc3                   \tretq   ", "code_s": "__int64 __fastcall mousetofield(unsigned int a1, __int16 a2, int a3, int a4,\n                                int a5, int a6, _DWORD *a7, _DWORD *a8,\n                                _DWORD *a9, _DWORD *a10) {\n  char <span class=\"supfact\">v15</span>[Number];\n  int v16;\n  int v17;\n  int v18;\n  int v19;\n  unsigned int v20;\n  v20 = a1;\n  if (!(unsigned int)ciolib_getmouse(<span class=\"supfact\">v15</span>)) {\n    if (v17 > Number && v17 <= a6 + Number && v18 > Number &&\n        v18 <= a5 + Number) {\n      v20 = Number;\n      if (v17 == Number) {\n        ciolib_ungetmouse(<span class=\"supfact\">v15</span>);\n      } else {\n        v19 = v16 - Number - *a8;\n        *a8 += v19;\n        *a7 += v19;\n      }\n    }\n    if (a6 + Number < v17 && v17 <= Number * (a6 + Number) && v18 > Number &&\n        v18 <= a5 + Number) {\n      v20 = Number;\n      if (v17 == a6 + Number) {\n        ciolib_ungetmouse(<span class=\"supfact\">v15</span>);\n      } else {\n        v19 = v16 - Number - *a10;\n        *a10 += v19;\n        *a9 += v19;\n      }\n    }\n    if ((a2 & Number) == Number && v17 > Number && v17 <= a4 + Number &&\n        a3 == v18) {\n      v20 = Number;\n      ciolib_ungetmouse(<span class=\"supfact\">v15</span>);\n    }\n    if ((a2 & Number) != Number && v17 > Number && v17 <= a4 + Number &&\n        v18 == a3 + Number) {\n      v20 = Number;\n      ciolib_ungetmouse(<span class=\"supfact\">v15</span>);\n    }\n  }\n  return v20;\n}", "code_t": "int __cdecl mousetofield(int currfield, int opts, int height, int width,\n                         int listheight, int listwidth, int *dcur, int *dbar,\n                         int *fcur, int *fbar) {\n  mouse_event <span class=\"supfact\">mevnt</span>;\n  int bardif;\n  int newfield;\n  newfield = currfield;\n  if (!ciolib_getmouse(&<span class=\"supfact\">mevnt</span>)) {\n    if (<span class=\"supfact\">mevnt</span>.endx > Number &&\n        <span class=\"supfact\">mevnt</span>.endx <= listwidth + Number &&\n        <span class=\"supfact\">mevnt</span>.endy > Number &&\n        <span class=\"supfact\">mevnt</span>.endy <= listheight + Number) {\n      newfield = Number;\n      if (<span class=\"supfact\">mevnt</span>.endx == Number) {\n        ciolib_ungetmouse(&<span class=\"supfact\">mevnt</span>);\n      } else {\n        bardif = <span class=\"supfact\">mevnt</span>.starty - Number - *dbar;\n        *dbar += bardif;\n        *dcur += bardif;\n      }\n    }\n    if (listwidth + Number < <span class=\"supfact\">mevnt</span>.endx &&\n        <span class=\"supfact\">mevnt</span>.endx <= Number * (listwidth + Number) &&\n        <span class=\"supfact\">mevnt</span>.endy > Number &&\n        <span class=\"supfact\">mevnt</span>.endy <= listheight + Number) {\n      newfield = Number;\n      if (<span class=\"supfact\">mevnt</span>.endx == listwidth + Number) {\n        ciolib_ungetmouse(&<span class=\"supfact\">mevnt</span>);\n      } else {\n        bardif = <span class=\"supfact\">mevnt</span>.starty - Number - *fbar;\n        *fbar += bardif;\n        *fcur += bardif;\n      }\n    }\n    if ((opts & Number) == Number && <span class=\"supfact\">mevnt</span>.endx > Number &&\n        <span class=\"supfact\">mevnt</span>.endx <= width + Number &&\n        height == <span class=\"supfact\">mevnt</span>.endy) {\n      newfield = Number;\n      ciolib_ungetmouse(&<span class=\"supfact\">mevnt</span>);\n    }\n    if ((opts & Number) != Number && <span class=\"supfact\">mevnt</span>.endx > Number &&\n        <span class=\"supfact\">mevnt</span>.endx <= width + Number &&\n        <span class=\"supfact\">mevnt</span>.endy == height + Number) {\n      newfield = Number;\n      ciolib_ungetmouse(&<span class=\"supfact\">mevnt</span>);\n    }\n  }\n  return newfield;\n}", "var": [{"name": "v15", "type": "__unk__", "pred_name": "__unk__", "ref_name": "mevnt", "ref_type": "struct mouse_event { int event; int bstate; int kbsm; int startx; int starty; int endx; int endy; }"}], "body_in_train": false}, {"repo_owner": "pangfudong", "repo_name": "i.mx53", "path": "pangfudong/i.mx53/4460f52ed4b3eac00c25488e487932787aae4973604c6b9cd35f2b367752d545", "path_in_repo": "pangfudong/i.mx53/linux/tools/perf/util/probe-finder.o", "objdump": "00000000000007c4 <die_is_signed_type>:\n     7c4:\t55                   \tpush   %rbp\n     7c5:\t48 89 e5             \tmov    %rsp,%rbp\n     7c8:\t48 83 ec 40          \tsub    $0x40,%rsp\n     7cc:\t48 89 7d c8          \tmov    %rdi,-0x38(%rbp)\n     7d0:\t64 48 8b 04 25 28 00 \tmov    %fs:0x28,%rax\n     7d7:\t00 00 \n     7d9:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     7dd:\t31 c0                \txor    %eax,%eax\n     7df:\t48 8d 55 e0          \tlea    -0x20(%rbp),%rdx\n     7e3:\t48 8b 45 c8          \tmov    -0x38(%rbp),%rax\n     7e7:\tbe 3e 00 00 00       \tmov    $0x3e,%esi\n     7ec:\t48 89 c7             \tmov    %rax,%rdi\n     7ef:\te8 00 00 00 00       \tcallq  7f4 <die_is_signed_type+0x30>\n     7f4:\t48 85 c0             \ttest   %rax,%rax\n     7f7:\t74 17                \tje     810 <die_is_signed_type+0x4c>\n     7f9:\t48 8d 55 d8          \tlea    -0x28(%rbp),%rdx\n     7fd:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n     801:\t48 89 d6             \tmov    %rdx,%rsi\n     804:\t48 89 c7             \tmov    %rax,%rdi\n     807:\te8 00 00 00 00       \tcallq  80c <die_is_signed_type+0x48>\n     80c:\t85 c0                \ttest   %eax,%eax\n     80e:\t74 07                \tje     817 <die_is_signed_type+0x53>\n     810:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     815:\teb 2d                \tjmp    844 <die_is_signed_type+0x80>\n     817:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     81b:\t48 83 f8 06          \tcmp    $0x6,%rax\n     81f:\t74 14                \tje     835 <die_is_signed_type+0x71>\n     821:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     825:\t48 83 f8 05          \tcmp    $0x5,%rax\n     829:\t74 0a                \tje     835 <die_is_signed_type+0x71>\n     82b:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n     82f:\t48 83 f8 0d          \tcmp    $0xd,%rax\n     833:\t75 07                \tjne    83c <die_is_signed_type+0x78>\n     835:\tb8 01 00 00 00       \tmov    $0x1,%eax\n     83a:\teb 05                \tjmp    841 <die_is_signed_type+0x7d>\n     83c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     841:\t83 e0 01             \tand    $0x1,%eax\n     844:\t48 8b 4d f8          \tmov    -0x8(%rbp),%rcx\n     848:\t64 48 33 0c 25 28 00 \txor    %fs:0x28,%rcx\n     84f:\t00 00 \n     851:\t74 05                \tje     858 <die_is_signed_type+0x94>\n     853:\te8 00 00 00 00       \tcallq  858 <die_is_signed_type+0x94>\n     858:\tc9                   \tleaveq \n     859:\tc3                   \tretq   ", "code_s": "_BOOL8 __fastcall die_is_signed_type(struct Dwarf_Die_s *a1, __int64 a2,\n                                     __int64 a3, Dwarf_Error *a4) {\n  __int64 v4;\n  Dwarf_Unsigned v7;\n  Dwarf_Attribute <span class=\"supfact\">v8</span>[Number];\n  <span class=\"supfact\">v8</span>[Number] = (Dwarf_Attribute)__readfsqword(Number);\n  LODWORD(v4) = dwarf_attr(a1, Number, <span class=\"supfact\">v8</span>, a4);\n  if (!v4 || dwarf_formudata((Dwarf_Attribute)<span class=\"supfact\">v8</span>, &v7,\n                             (Dwarf_Error *)&v7))\n    return Number L;\n  return v7 == Number || v7 == Number || v7 == Number;\n}", "code_t": "bool __cdecl die_is_signed_type(Dwarf_Die *tp_die) {\n  __int64 v1;\n  Dwarf_Die v4;\n  Dwarf_Attribute <span class=\"supfact\">attr</span>;\n  unsigned __int64 v6;\n  v4.cu = (Dwarf_CU *)tp_die;\n  v6 = __readfsqword(Number);\n  LODWORD(v1) = dwarf_attr(v4, (Dwarf_Half)tp_die, (Dwarf_Attribute *)&loc_3E,\n                           (Dwarf_Error *)&<span class=\"supfact\">attr</span>);\n  if (!v1 || dwarf_formudata(*(Dwarf_Attribute *)&v4.addr,\n                             (Dwarf_Unsigned *)&<span class=\"supfact\">attr</span>.code,\n                             (Dwarf_Error *)&v4.padding__))\n    return Number;\n  return v4.padding__ == Number || v4.padding__ == Number ||\n         v4.padding__ == Number;\n}", "var": [{"name": "v8", "type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }", "pred_name": "attr", "ref_name": "attr", "ref_type": "struct Dwarf_Attribute { unsigned int code; unsigned int form; unsigned __int8 * valp; Dwarf_CU * cu; }"}], "body_in_train": false}, {"repo_owner": "rogerjowett", "repo_name": "ClientServerMAME", "path": "rogerjowett/ClientServerMAME/1ccdc7a16e0460c308f33b23061c7204da58cf8e87ec9292898ab638c5302fd0", "path_in_repo": "rogerjowett/ClientServerMAME/mame/obj/sdl/mame64/mame/drivers/taito_l.o", "objdump": "000000000000a135 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring>:\n    a135:\t55                   \tpush   %rbp\n    a136:\t48 89 e5             \tmov    %rsp,%rbp\n    a139:\t53                   \tpush   %rbx\n    a13a:\t48 81 ec 88 00 00 00 \tsub    $0x88,%rsp\n    a141:\t48 89 7d 88          \tmov    %rdi,-0x78(%rbp)\n    a145:\t48 89 75 80          \tmov    %rsi,-0x80(%rbp)\n    a149:\t48 89 95 78 ff ff ff \tmov    %rdx,-0x88(%rbp)\n    a150:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    a154:\t48 89 c7             \tmov    %rax,%rdi\n    a157:\te8 00 00 00 00       \tcallq  a15c <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x27>\n    a15c:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    a163:\t00 \n    a164:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    a16b:\t00 \n    a16c:\t48 c7 45 d8 00 00 00 \tmovq   $0x0,-0x28(%rbp)\n    a173:\t00 \n    a174:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    a17b:\t48 8b 95 78 ff ff ff \tmov    -0x88(%rbp),%rdx\n    a182:\t48 8b 4d 80          \tmov    -0x80(%rbp),%rcx\n    a186:\t48 8b 45 88          \tmov    -0x78(%rbp),%rax\n    a18a:\t48 89 ce             \tmov    %rcx,%rsi\n    a18d:\t48 89 c7             \tmov    %rax,%rdi\n    a190:\te8 24 f3 ff ff       \tcallq  94b9 <_ZL25construct_ioport_kurikintR8device_tR11tagged_listI17input_port_configER7astring>\n    a195:\t48 8b 4d 88          \tmov    -0x78(%rbp),%rcx\n    a199:\t48 8b 45 80          \tmov    -0x80(%rbp),%rax\n    a19d:\tba 00 00 00 00       \tmov    $0x0,%edx\n    a1a2:\t48 89 ce             \tmov    %rcx,%rsi\n    a1a5:\t48 89 c7             \tmov    %rax,%rdi\n    a1a8:\te8 00 00 00 00       \tcallq  a1ad <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x78>\n    a1ad:\t48 89 45 d8          \tmov    %rax,-0x28(%rbp)\n    a1b1:\t48 c7 45 e0 00 00 00 \tmovq   $0x0,-0x20(%rbp)\n    a1b8:\t00 \n    a1b9:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    a1c0:\t00 \n    a1c1:\tc7 45 d4 00 00 00 00 \tmovl   $0x0,-0x2c(%rbp)\n    a1c8:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    a1cc:\t41 b8 0a 00 00 00    \tmov    $0xa,%r8d\n    a1d2:\tb9 30 00 00 00       \tmov    $0x30,%ecx\n    a1d7:\tba 30 00 00 00       \tmov    $0x30,%edx\n    a1dc:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    a1e1:\t48 89 c7             \tmov    %rax,%rdi\n    a1e4:\te8 00 00 00 00       \tcallq  a1e9 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0xb4>\n    a1e9:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    a1ed:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    a1f4:\t00 \n    a1f5:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a1f9:\t8b 00                \tmov    (%rax),%eax\n    a1fb:\t83 e0 10             \tand    $0x10,%eax\n    a1fe:\t89 c1                \tmov    %eax,%ecx\n    a200:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a204:\tba 15 00 00 00       \tmov    $0x15,%edx\n    a209:\t89 ce                \tmov    %ecx,%esi\n    a20b:\t48 89 c7             \tmov    %rax,%rdi\n    a20e:\te8 00 00 00 00       \tcallq  a213 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0xde>\n    a213:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    a217:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a21b:\t8b 00                \tmov    (%rax),%eax\n    a21d:\t83 e0 30             \tand    $0x30,%eax\n    a220:\t89 c1                \tmov    %eax,%ecx\n    a222:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a226:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    a22b:\t89 ce                \tmov    %ecx,%esi\n    a22d:\t48 89 c7             \tmov    %rax,%rdi\n    a230:\te8 00 00 00 00       \tcallq  a235 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x100>\n    a235:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    a239:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a23d:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n    a242:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    a247:\t48 89 c7             \tmov    %rax,%rdi\n    a24a:\te8 00 00 00 00       \tcallq  a24f <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x11a>\n    a24f:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    a253:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a257:\t8b 00                \tmov    (%rax),%eax\n    a259:\t83 e0 20             \tand    $0x20,%eax\n    a25c:\t89 c1                \tmov    %eax,%ecx\n    a25e:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a262:\tba 22 00 00 00       \tmov    $0x22,%edx\n    a267:\t89 ce                \tmov    %ecx,%esi\n    a269:\t48 89 c7             \tmov    %rax,%rdi\n    a26c:\te8 00 00 00 00       \tcallq  a271 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x13c>\n    a271:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    a275:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n    a279:\t41 b8 0b 00 00 00    \tmov    $0xb,%r8d\n    a27f:\tb9 c0 00 00 00       \tmov    $0xc0,%ecx\n    a284:\tba c0 00 00 00       \tmov    $0xc0,%edx\n    a289:\tbe 05 00 00 00       \tmov    $0x5,%esi\n    a28e:\t48 89 c7             \tmov    %rax,%rdi\n    a291:\te8 00 00 00 00       \tcallq  a296 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x161>\n    a296:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n    a29a:\t48 c7 45 e8 00 00 00 \tmovq   $0x0,-0x18(%rbp)\n    a2a1:\t00 \n    a2a2:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a2a6:\t8b 00                \tmov    (%rax),%eax\n    a2a8:\t83 e0 40             \tand    $0x40,%eax\n    a2ab:\t89 c1                \tmov    %eax,%ecx\n    a2ad:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a2b1:\tba 15 00 00 00       \tmov    $0x15,%edx\n    a2b6:\t89 ce                \tmov    %ecx,%esi\n    a2b8:\t48 89 c7             \tmov    %rax,%rdi\n    a2bb:\te8 00 00 00 00       \tcallq  a2c0 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x18b>\n    a2c0:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    a2c4:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a2c8:\t8b 00                \tmov    (%rax),%eax\n    a2ca:\t25 c0 00 00 00       \tand    $0xc0,%eax\n    a2cf:\t89 c1                \tmov    %eax,%ecx\n    a2d1:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a2d5:\tba 1c 00 00 00       \tmov    $0x1c,%edx\n    a2da:\t89 ce                \tmov    %ecx,%esi\n    a2dc:\t48 89 c7             \tmov    %rax,%rdi\n    a2df:\te8 00 00 00 00       \tcallq  a2e4 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x1af>\n    a2e4:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    a2e8:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a2ec:\tba 1f 00 00 00       \tmov    $0x1f,%edx\n    a2f1:\tbe 00 00 00 00       \tmov    $0x0,%esi\n    a2f6:\t48 89 c7             \tmov    %rax,%rdi\n    a2f9:\te8 00 00 00 00       \tcallq  a2fe <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x1c9>\n    a2fe:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    a302:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a306:\t8b 00                \tmov    (%rax),%eax\n    a308:\t25 80 00 00 00       \tand    $0x80,%eax\n    a30d:\t89 c1                \tmov    %eax,%ecx\n    a30f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n    a313:\tba 22 00 00 00       \tmov    $0x22,%edx\n    a318:\t89 ce                \tmov    %ecx,%esi\n    a31a:\t48 89 c7             \tmov    %rax,%rdi\n    a31d:\te8 00 00 00 00       \tcallq  a322 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x1ed>\n    a322:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n    a326:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    a32a:\t48 89 c7             \tmov    %rax,%rdi\n    a32d:\te8 00 00 00 00       \tcallq  a332 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x1fd>\n    a332:\teb 1a                \tjmp    a34e <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n    a334:\t48 89 c3             \tmov    %rax,%rbx\n    a337:\t48 8d 45 90          \tlea    -0x70(%rbp),%rax\n    a33b:\t48 89 c7             \tmov    %rax,%rdi\n    a33e:\te8 00 00 00 00       \tcallq  a343 <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x20e>\n    a343:\t48 89 d8             \tmov    %rbx,%rax\n    a346:\t48 89 c7             \tmov    %rax,%rdi\n    a349:\te8 00 00 00 00       \tcallq  a34e <_ZL26construct_ioport_kurikintjR8device_tR11tagged_listI17input_port_configER7astring+0x219>\n    a34e:\t48 81 c4 88 00 00 00 \tadd    $0x88,%rsp\n    a355:\t5b                   \tpop    %rbx\n    a356:\t5d                   \tpop    %rbp\n    a357:\tc3                   \tretq   ", "code_s": "void __fastcall construct_ioport_kurikintj(__int64 a1, __int64 a2, __int64 a3) {\n  char <span class=\"supfact\">v4</span>[Number];\n  int v5;\n  __int64 v6;\n  _DWORD *v7;\n  __int64 v8;\n  astring astring((astring *)<span class=\"supfact\">v4</span>);\n  v8 = Number L;\n  v7 = Number L;\n  v6 = Number L;\n  v5 = Number;\n  construct_ioport_kurikint(a1, a2, a3);\n  v6 = ioconfig_modify_port(a2, a1, String);\n  v7 = Number L;\n  v8 = Number L;\n  v5 = Number;\n  v7 = (_DWORD *)ioconfig_alloc_field(v6, Number L, Number L, Number L,\n                                      Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v7 = (_DWORD *)ioconfig_alloc_field(v6, Number L, Number L, Number L,\n                                      Number L);\n  v8 = Number L;\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  v8 = ioconfig_alloc_setting(v7, Number L, Number L);\n  v8 = ioconfig_alloc_setting(v7, *v7 & Number, Number L);\n  astring ~astring((astring *)<span class=\"supfact\">v4</span>);\n}", "code_t": "void __cdecl construct_ioport_kurikintj(device_t *owner, ioport_list *portlist,\n                                        astring *errorbuf) {\n  astring <span class=\"supfact\">fulltag</span>;\n  input_port_value maskbits;\n  input_port_config *curport;\n  input_field_config *curfield;\n  input_setting_config *cursetting;\n  astring astring(&<span class=\"supfact\">fulltag</span>);\n  cursetting = Number L;\n  curfield = Number L;\n  curport = Number L;\n  maskbits = Number;\n  construct_ioport_kurikint(owner, portlist, errorbuf);\n  curport = (input_port_config *)ioconfig_modify_port(portlist, owner, String);\n  curfield = Number L;\n  cursetting = Number L;\n  maskbits = Number;\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_9 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_14 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1C);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_1F);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_22);\n  curfield = (input_field_config *)ioconfig_alloc_field(\n      curport, Number, Number, Number, (const char *)&loc_9 + Number);\n  cursetting = Number L;\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_14 + Number);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_1C);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, Number, (const char *)&loc_1F);\n  cursetting = (input_setting_config *)ioconfig_alloc_setting(\n      curfield, curfield->mask & Number, (const char *)&loc_22);\n  astring ~astring(&<span class=\"supfact\">fulltag</span>);\n}", "var": [{"name": "v4", "type": "struct astring { _astring_base baseclass_0; }", "pred_name": "fulltag", "ref_name": "fulltag", "ref_type": "struct astring { _astring_base baseclass_0; }"}], "body_in_train": false}, {"repo_owner": "distransient", "repo_name": "st", "path": "distransient/st/0b32f24ab3b5ee0cd70f732ac7e368e838e62125c80edd7169e14b222fe69a21", "path_in_repo": "distransient/st//st.o", "objdump": "0000000000007e7c <xdrawcursor>:\n    7e7c:\t55                   \tpush   %rbp\n    7e7d:\t48 89 e5             \tmov    %rsp,%rbp\n    7e80:\t48 83 ec 20          \tsub    $0x20,%rsp\n    7e84:\tc7 45 e0 20 00 00 00 \tmovl   $0x20,-0x20(%rbp)\n    7e8b:\t66 c7 45 e4 00 00    \tmovw   $0x0,-0x1c(%rbp)\n    7e91:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7e97 <xdrawcursor+0x1b>\n    7e97:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    7e9a:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7ea0 <xdrawcursor+0x24>\n    7ea0:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    7ea3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7ea9 <xdrawcursor+0x2d>\n    7ea9:\t85 c0                \ttest   %eax,%eax\n    7eab:\t78 23                \tjs     7ed0 <xdrawcursor+0x54>\n    7ead:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 7eb3 <xdrawcursor+0x37>\n    7eb3:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7eb9 <xdrawcursor+0x3d>\n    7eb9:\t39 c2                \tcmp    %eax,%edx\n    7ebb:\t7f 0b                \tjg     7ec8 <xdrawcursor+0x4c>\n    7ebd:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7ec3 <xdrawcursor+0x47>\n    7ec3:\t83 e8 01             \tsub    $0x1,%eax\n    7ec6:\teb 0d                \tjmp    7ed5 <xdrawcursor+0x59>\n    7ec8:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7ece <xdrawcursor+0x52>\n    7ece:\teb 05                \tjmp    7ed5 <xdrawcursor+0x59>\n    7ed0:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7ed5:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 7edb <xdrawcursor+0x5f>\n    7edb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7ee1 <xdrawcursor+0x65>\n    7ee1:\t85 c0                \ttest   %eax,%eax\n    7ee3:\t78 23                \tjs     7f08 <xdrawcursor+0x8c>\n    7ee5:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 7eeb <xdrawcursor+0x6f>\n    7eeb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7ef1 <xdrawcursor+0x75>\n    7ef1:\t39 c2                \tcmp    %eax,%edx\n    7ef3:\t7f 0b                \tjg     7f00 <xdrawcursor+0x84>\n    7ef5:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7efb <xdrawcursor+0x7f>\n    7efb:\t83 e8 01             \tsub    $0x1,%eax\n    7efe:\teb 0d                \tjmp    7f0d <xdrawcursor+0x91>\n    7f00:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7f06 <xdrawcursor+0x8a>\n    7f06:\teb 05                \tjmp    7f0d <xdrawcursor+0x91>\n    7f08:\tb8 00 00 00 00       \tmov    $0x0,%eax\n    7f0d:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 7f13 <xdrawcursor+0x97>\n    7f13:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7f19 <xdrawcursor+0x9d>\n    7f19:\t89 45 fc             \tmov    %eax,-0x4(%rbp)\n    7f1c:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7f23 <xdrawcursor+0xa7>\n    7f23:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 7f29 <xdrawcursor+0xad>\n    7f29:\t48 63 d2             \tmovslq %edx,%rdx\n    7f2c:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    7f30:\t48 01 d0             \tadd    %rdx,%rax\n    7f33:\t48 8b 00             \tmov    (%rax),%rax\n    7f36:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 7f3c <xdrawcursor+0xc0>\n    7f3c:\t48 63 d2             \tmovslq %edx,%rdx\n    7f3f:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    7f43:\t48 01 d0             \tadd    %rdx,%rax\n    7f46:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    7f4a:\t0f b7 c0             \tmovzwl %ax,%eax\n    7f4d:\t25 00 04 00 00       \tand    $0x400,%eax\n    7f52:\t85 c0                \ttest   %eax,%eax\n    7f54:\t74 0f                \tje     7f65 <xdrawcursor+0xe9>\n    7f56:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 7f5c <xdrawcursor+0xe0>\n    7f5c:\t83 e8 01             \tsub    $0x1,%eax\n    7f5f:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 7f65 <xdrawcursor+0xe9>\n    7f65:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7f6c <xdrawcursor+0xf0>\n    7f6c:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 7f72 <xdrawcursor+0xf6>\n    7f72:\t48 63 d2             \tmovslq %edx,%rdx\n    7f75:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    7f79:\t48 01 d0             \tadd    %rdx,%rax\n    7f7c:\t48 8b 00             \tmov    (%rax),%rax\n    7f7f:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    7f82:\t48 63 d2             \tmovslq %edx,%rdx\n    7f85:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    7f89:\t48 01 d0             \tadd    %rdx,%rax\n    7f8c:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    7f90:\t0f b7 c0             \tmovzwl %ax,%eax\n    7f93:\t25 00 04 00 00       \tand    $0x400,%eax\n    7f98:\t85 c0                \ttest   %eax,%eax\n    7f9a:\t74 04                \tje     7fa0 <xdrawcursor+0x124>\n    7f9c:\t83 6d fc 01          \tsubl   $0x1,-0x4(%rbp)\n    7fa0:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7fa7 <xdrawcursor+0x12b>\n    7fa7:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 7fad <xdrawcursor+0x131>\n    7fad:\t48 63 d2             \tmovslq %edx,%rdx\n    7fb0:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    7fb4:\t48 01 d0             \tadd    %rdx,%rax\n    7fb7:\t48 8b 00             \tmov    (%rax),%rax\n    7fba:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 7fc0 <xdrawcursor+0x144>\n    7fc0:\t48 63 d2             \tmovslq %edx,%rdx\n    7fc3:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    7fc7:\t48 01 d0             \tadd    %rdx,%rax\n    7fca:\t8b 00                \tmov    (%rax),%eax\n    7fcc:\t89 45 e0             \tmov    %eax,-0x20(%rbp)\n    7fcf:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 7fd6 <xdrawcursor+0x15a>\n    7fd6:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 7fdc <xdrawcursor+0x160>\n    7fdc:\t48 63 d2             \tmovslq %edx,%rdx\n    7fdf:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    7fe3:\t48 01 d0             \tadd    %rdx,%rax\n    7fe6:\t48 8b 00             \tmov    (%rax),%rax\n    7fe9:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 7fef <xdrawcursor+0x173>\n    7fef:\t48 63 d2             \tmovslq %edx,%rdx\n    7ff2:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    7ff6:\t48 01 d0             \tadd    %rdx,%rax\n    7ff9:\t48 89 c7             \tmov    %rax,%rdi\n    7ffc:\te8 84 83 ff ff       \tcallq  385 <utf8len>\n    8001:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    8004:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 800b <xdrawcursor+0x18f>\n    800b:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 8011 <xdrawcursor+0x195>\n    8011:\t48 63 d2             \tmovslq %edx,%rdx\n    8014:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    8018:\t48 01 d0             \tadd    %rdx,%rax\n    801b:\t48 8b 00             \tmov    (%rax),%rax\n    801e:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 8024 <xdrawcursor+0x1a8>\n    8024:\t48 63 d2             \tmovslq %edx,%rdx\n    8027:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    802b:\t48 01 d0             \tadd    %rdx,%rax\n    802e:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    8032:\t0f b7 c0             \tmovzwl %ax,%eax\n    8035:\t25 00 02 00 00       \tand    $0x200,%eax\n    803a:\t85 c0                \ttest   %eax,%eax\n    803c:\t74 07                \tje     8045 <xdrawcursor+0x1c9>\n    803e:\tb8 02 00 00 00       \tmov    $0x2,%eax\n    8043:\teb 05                \tjmp    804a <xdrawcursor+0x1ce>\n    8045:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    804a:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    804d:\t8b 3d 00 00 00 00    \tmov    0x0(%rip),%edi        # 8053 <xdrawcursor+0x1d7>\n    8053:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 8059 <xdrawcursor+0x1dd>\n    8059:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8060 <xdrawcursor+0x1e4>\n    8060:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 8066 <xdrawcursor+0x1ea>\n    8066:\t48 63 d2             \tmovslq %edx,%rdx\n    8069:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    806d:\t48 01 d0             \tadd    %rdx,%rax\n    8070:\t48 8b 00             \tmov    (%rax),%rax\n    8073:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 8079 <xdrawcursor+0x1fd>\n    8079:\t48 63 d2             \tmovslq %edx,%rdx\n    807c:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    8080:\t48 01 d0             \tadd    %rdx,%rax\n    8083:\t48 8b 15 00 00 00 00 \tmov    0x0(%rip),%rdx        # 808a <xdrawcursor+0x20e>\n    808a:\t8b 35 00 00 00 00    \tmov    0x0(%rip),%esi        # 8090 <xdrawcursor+0x214>\n    8090:\t48 63 f6             \tmovslq %esi,%rsi\n    8093:\t48 c1 e6 03          \tshl    $0x3,%rsi\n    8097:\t48 01 f2             \tadd    %rsi,%rdx\n    809a:\t48 8b 12             \tmov    (%rdx),%rdx\n    809d:\t8b 35 00 00 00 00    \tmov    0x0(%rip),%esi        # 80a3 <xdrawcursor+0x227>\n    80a3:\t48 63 f6             \tmovslq %esi,%rsi\n    80a6:\t48 c1 e6 04          \tshl    $0x4,%rsi\n    80aa:\t48 01 f2             \tadd    %rsi,%rdx\n    80ad:\t49 89 d2             \tmov    %rdx,%r10\n    80b0:\t44 8b 45 f4          \tmov    -0xc(%rbp),%r8d\n    80b4:\t48 8b 10             \tmov    (%rax),%rdx\n    80b7:\t48 8b 40 08          \tmov    0x8(%rax),%rax\n    80bb:\t48 83 ec 08          \tsub    $0x8,%rsp\n    80bf:\t8b 75 f8             \tmov    -0x8(%rbp),%esi\n    80c2:\t56                   \tpush   %rsi\n    80c3:\t45 89 c1             \tmov    %r8d,%r9d\n    80c6:\t41 89 f8             \tmov    %edi,%r8d\n    80c9:\t48 89 d6             \tmov    %rdx,%rsi\n    80cc:\t48 89 c2             \tmov    %rax,%rdx\n    80cf:\t4c 89 d7             \tmov    %r10,%rdi\n    80d2:\te8 36 f2 ff ff       \tcallq  730d <xdraws>\n    80d7:\t48 83 c4 10          \tadd    $0x10,%rsp\n    80db:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 80e1 <xdrawcursor+0x265>\n    80e1:\t25 00 02 00 00       \tand    $0x200,%eax\n    80e6:\t85 c0                \ttest   %eax,%eax\n    80e8:\t0f 85 73 02 00 00    \tjne    8361 <xdrawcursor+0x4e5>\n    80ee:\t0f b6 05 00 00 00 00 \tmovzbl 0x0(%rip),%eax        # 80f5 <xdrawcursor+0x279>\n    80f5:\t0f be c0             \tmovsbl %al,%eax\n    80f8:\t83 e0 04             \tand    $0x4,%eax\n    80fb:\t85 c0                \ttest   %eax,%eax\n    80fd:\t0f 84 b7 00 00 00    \tje     81ba <xdrawcursor+0x33e>\n    8103:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8109 <xdrawcursor+0x28d>\n    8109:\t25 80 00 00 00       \tand    $0x80,%eax\n    810e:\t85 c0                \ttest   %eax,%eax\n    8110:\t74 1d                \tje     812f <xdrawcursor+0x2b3>\n    8112:\t0f b7 45 e4          \tmovzwl -0x1c(%rbp),%eax\n    8116:\t83 c8 20             \tor     $0x20,%eax\n    8119:\t66 89 45 e4          \tmov    %ax,-0x1c(%rbp)\n    811d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8123 <xdrawcursor+0x2a7>\n    8123:\t89 45 e8             \tmov    %eax,-0x18(%rbp)\n    8126:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 812c <xdrawcursor+0x2b0>\n    812c:\t89 45 ec             \tmov    %eax,-0x14(%rbp)\n    812f:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    8133:\t48 89 c7             \tmov    %rax,%rdi\n    8136:\te8 4a 82 ff ff       \tcallq  385 <utf8len>\n    813b:\t89 45 f8             \tmov    %eax,-0x8(%rbp)\n    813e:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8145 <xdrawcursor+0x2c9>\n    8145:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 814b <xdrawcursor+0x2cf>\n    814b:\t48 63 d2             \tmovslq %edx,%rdx\n    814e:\t48 c1 e2 03          \tshl    $0x3,%rdx\n    8152:\t48 01 d0             \tadd    %rdx,%rax\n    8155:\t48 8b 00             \tmov    (%rax),%rax\n    8158:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n    815b:\t48 63 d2             \tmovslq %edx,%rdx\n    815e:\t48 c1 e2 04          \tshl    $0x4,%rdx\n    8162:\t48 01 d0             \tadd    %rdx,%rax\n    8165:\t0f b7 40 04          \tmovzwl 0x4(%rax),%eax\n    8169:\t0f b7 c0             \tmovzwl %ax,%eax\n    816c:\t25 00 02 00 00       \tand    $0x200,%eax\n    8171:\t85 c0                \ttest   %eax,%eax\n    8173:\t74 07                \tje     817c <xdrawcursor+0x300>\n    8175:\tb8 02 00 00 00       \tmov    $0x2,%eax\n    817a:\teb 05                \tjmp    8181 <xdrawcursor+0x305>\n    817c:\tb8 01 00 00 00       \tmov    $0x1,%eax\n    8181:\t89 45 f4             \tmov    %eax,-0xc(%rbp)\n    8184:\t44 8b 05 00 00 00 00 \tmov    0x0(%rip),%r8d        # 818b <xdrawcursor+0x30f>\n    818b:\t8b 0d 00 00 00 00    \tmov    0x0(%rip),%ecx        # 8191 <xdrawcursor+0x315>\n    8191:\t44 8b 4d f4          \tmov    -0xc(%rbp),%r9d\n    8195:\t48 8b 75 e0          \tmov    -0x20(%rbp),%rsi\n    8199:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n    819d:\t48 8d 45 e0          \tlea    -0x20(%rbp),%rax\n    81a1:\t48 83 ec 08          \tsub    $0x8,%rsp\n    81a5:\t8b 7d f8             \tmov    -0x8(%rbp),%edi\n    81a8:\t57                   \tpush   %rdi\n    81a9:\t48 89 c7             \tmov    %rax,%rdi\n    81ac:\te8 5c f1 ff ff       \tcallq  730d <xdraws>\n    81b1:\t48 83 c4 10          \tadd    $0x10,%rsp\n    81b5:\te9 90 01 00 00       \tjmpq   834a <xdrawcursor+0x4ce>\n    81ba:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 81c0 <xdrawcursor+0x344>\n    81c0:\t83 e8 01             \tsub    $0x1,%eax\n    81c3:\t89 c7                \tmov    %eax,%edi\n    81c5:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 81cb <xdrawcursor+0x34f>\n    81cb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 81d1 <xdrawcursor+0x355>\n    81d1:\t0f af d0             \timul   %eax,%edx\n    81d4:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 81da <xdrawcursor+0x35e>\n    81da:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    81dd:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 81e3 <xdrawcursor+0x367>\n    81e3:\t0f af 45 fc          \timul   -0x4(%rbp),%eax\n    81e7:\t89 c2                \tmov    %eax,%edx\n    81e9:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 81ef <xdrawcursor+0x373>\n    81ef:\t01 c2                \tadd    %eax,%edx\n    81f1:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 81f7 <xdrawcursor+0x37b>\n    81f7:\t89 c0                \tmov    %eax,%eax\n    81f9:\t48 c1 e0 04          \tshl    $0x4,%rax\n    81fd:\t48 8d b0 00 00 00 00 \tlea    0x0(%rax),%rsi\n    8204:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 820b <xdrawcursor+0x38f>\n    820b:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n    8211:\t41 89 f8             \tmov    %edi,%r8d\n    8214:\t48 89 c7             \tmov    %rax,%rdi\n    8217:\te8 00 00 00 00       \tcallq  821c <xdrawcursor+0x3a0>\n    821c:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8222 <xdrawcursor+0x3a6>\n    8222:\t83 e8 01             \tsub    $0x1,%eax\n    8225:\t89 c7                \tmov    %eax,%edi\n    8227:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 822d <xdrawcursor+0x3b1>\n    822d:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8233 <xdrawcursor+0x3b7>\n    8233:\t0f af d0             \timul   %eax,%edx\n    8236:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 823c <xdrawcursor+0x3c0>\n    823c:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    823f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8245 <xdrawcursor+0x3c9>\n    8245:\t0f af 45 fc          \timul   -0x4(%rbp),%eax\n    8249:\t89 c2                \tmov    %eax,%edx\n    824b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8251 <xdrawcursor+0x3d5>\n    8251:\t01 c2                \tadd    %eax,%edx\n    8253:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8259 <xdrawcursor+0x3dd>\n    8259:\t89 c0                \tmov    %eax,%eax\n    825b:\t48 c1 e0 04          \tshl    $0x4,%rax\n    825f:\t48 8d b0 00 00 00 00 \tlea    0x0(%rax),%rsi\n    8266:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 826d <xdrawcursor+0x3f1>\n    826d:\t41 89 f9             \tmov    %edi,%r9d\n    8270:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    8276:\t48 89 c7             \tmov    %rax,%rdi\n    8279:\te8 00 00 00 00       \tcallq  827e <xdrawcursor+0x402>\n    827e:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8284 <xdrawcursor+0x408>\n    8284:\t83 e8 01             \tsub    $0x1,%eax\n    8287:\t89 c7                \tmov    %eax,%edi\n    8289:\t8b 15 00 00 00 00    \tmov    0x0(%rip),%edx        # 828f <xdrawcursor+0x413>\n    828f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8295 <xdrawcursor+0x419>\n    8295:\t0f af d0             \timul   %eax,%edx\n    8298:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 829e <xdrawcursor+0x422>\n    829e:\t8d 0c 02             \tlea    (%rdx,%rax,1),%ecx\n    82a1:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    82a4:\t8d 50 01             \tlea    0x1(%rax),%edx\n    82a7:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 82ad <xdrawcursor+0x431>\n    82ad:\t0f af d0             \timul   %eax,%edx\n    82b0:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 82b6 <xdrawcursor+0x43a>\n    82b6:\t01 d0                \tadd    %edx,%eax\n    82b8:\t8d 50 ff             \tlea    -0x1(%rax),%edx\n    82bb:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 82c1 <xdrawcursor+0x445>\n    82c1:\t89 c0                \tmov    %eax,%eax\n    82c3:\t48 c1 e0 04          \tshl    $0x4,%rax\n    82c7:\t48 8d b0 00 00 00 00 \tlea    0x0(%rax),%rsi\n    82ce:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 82d5 <xdrawcursor+0x459>\n    82d5:\t41 89 f9             \tmov    %edi,%r9d\n    82d8:\t41 b8 01 00 00 00    \tmov    $0x1,%r8d\n    82de:\t48 89 c7             \tmov    %rax,%rdi\n    82e1:\te8 00 00 00 00       \tcallq  82e6 <xdrawcursor+0x46a>\n    82e6:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 82ec <xdrawcursor+0x470>\n    82ec:\t89 c7                \tmov    %eax,%edi\n    82ee:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 82f4 <xdrawcursor+0x478>\n    82f4:\t8d 50 01             \tlea    0x1(%rax),%edx\n    82f7:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 82fd <xdrawcursor+0x481>\n    82fd:\t0f af d0             \timul   %eax,%edx\n    8300:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8306 <xdrawcursor+0x48a>\n    8306:\t01 d0                \tadd    %edx,%eax\n    8308:\t8d 48 ff             \tlea    -0x1(%rax),%ecx\n    830b:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8311 <xdrawcursor+0x495>\n    8311:\t0f af 45 fc          \timul   -0x4(%rbp),%eax\n    8315:\t89 c2                \tmov    %eax,%edx\n    8317:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 831d <xdrawcursor+0x4a1>\n    831d:\t01 c2                \tadd    %eax,%edx\n    831f:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8325 <xdrawcursor+0x4a9>\n    8325:\t89 c0                \tmov    %eax,%eax\n    8327:\t48 c1 e0 04          \tshl    $0x4,%rax\n    832b:\t48 8d b0 00 00 00 00 \tlea    0x0(%rax),%rsi\n    8332:\t48 8b 05 00 00 00 00 \tmov    0x0(%rip),%rax        # 8339 <xdrawcursor+0x4bd>\n    8339:\t41 b9 01 00 00 00    \tmov    $0x1,%r9d\n    833f:\t41 89 f8             \tmov    %edi,%r8d\n    8342:\t48 89 c7             \tmov    %rax,%rdi\n    8345:\te8 00 00 00 00       \tcallq  834a <xdrawcursor+0x4ce>\n    834a:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n    834d:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 8353 <xdrawcursor+0x4d7>\n    8353:\t8b 05 00 00 00 00    \tmov    0x0(%rip),%eax        # 8359 <xdrawcursor+0x4dd>\n    8359:\t89 05 00 00 00 00    \tmov    %eax,0x0(%rip)        # 835f <xdrawcursor+0x4e3>\n    835f:\teb 01                \tjmp    8362 <xdrawcursor+0x4e6>\n    8361:\t90                   \tnop\n    8362:\tc9                   \tleaveq \n    8363:\tc3                   \tretq   ", "code_s": "__int64 xdrawcursor() {\n  int v0;\n  int v1;\n  int v2;\n  __int64 v3;\n  __int64 result;\n  int v5;\n  __int64 <span class=\"supfact\">v6</span>;\n  __int64 v7;\n  int v8;\n  int v9;\n  int v10;\n  LODWORD(<span class=\"supfact\">v6</span>) = Number;\n  WORD2(<span class=\"supfact\">v6</span>) = Number;\n  v7 = __PAIR64__(defaultcs, defaultbg);\n  if (oldx_13119 < Number) {\n    v0 = Number;\n  } else if (dword_D404 > oldx_13119) {\n    v0 = oldx_13119;\n  } else {\n    v0 = dword_D404 - Number;\n  }\n  oldx_13119 = v0;\n  if (oldy_13120 < Number) {\n    v1 = Number;\n  } else if (term > oldy_13120) {\n    v1 = oldy_13120;\n  } else {\n    v1 = term - Number;\n  }\n  oldy_13120 = v1;\n  v10 = qword_D430;\n  if ((*(_WORD *)(Number L * oldx_13119 + *((_QWORD *)dest + v1) + Number) &\n       Number) != Number)\n    --oldx_13119;\n  if ((*(_WORD *)(Number L * v10 + *((_QWORD *)dest + SHIDWORD(qword_D430)) +\n                  Number) &\n       Number) != Number)\n    --v10;\n  LODWORD(<span class=\"supfact\">v6</span>) =\n      *(_DWORD *)(Number L * (int)qword_D430 +\n                  *((_QWORD *)dest + SHIDWORD(qword_D430)));\n  v9 =\n      utf8len((char *)(Number L * oldx_13119 + *((_QWORD *)dest + oldy_13120)));\n  if ((*(_WORD *)(Number L * oldx_13119 + *((_QWORD *)dest + oldy_13120) +\n                  Number) &\n       Number) != Number)\n    v2 = Number;\n  else\n    v2 = Number;\n  v8 = v2;\n  v3 = Number L * oldx_13119 + *((_QWORD *)dest + oldy_13120);\n  xdraws((char *)v3, *(_QWORD *)v3, *(_QWORD *)(v3 + Number), oldx_13119,\n         oldy_13120, v8, v9);\n  result = dword_D444 & Number;\n  if ((dword_D444 & Number) == Number) {\n    if ((byte_D3FC & Number) != Number) {\n      if ((dword_D444 & Number) != Number) {\n        WORD2(<span class=\"supfact\">v6</span>) |= Number;\n        v7 = __PAIR64__(defaultfg, defaultcs);\n      }\n      v9 = utf8len((char *)&<span class=\"supfact\">v6</span>);\n      if ((*(_WORD *)(Number L * v10 +\n                      *((_QWORD *)dest + SHIDWORD(qword_D430)) + Number) &\n           Number) != Number)\n        v5 = Number;\n      else\n        v5 = Number;\n      v8 = v5;\n      xdraws((char *)&<span class=\"supfact\">v6</span>, <span class=\"supfact\">v6</span>, v7, qword_D430,\n             SHIDWORD(qword_D430), v5, v9);\n    } else {\n      XftDrawRect(qword_D350, &dc[Number * (unsigned int)defaultcs],\n                  (unsigned int)(borderpx + v10 * dword_D3F8),\n                  (unsigned int)(dword_D3F4 * HIDWORD(qword_D430) + borderpx),\n                  (unsigned int)(dword_D3F8 - Number), Number L);\n      XftDrawRect(qword_D350, &dc[Number * (unsigned int)defaultcs],\n                  (unsigned int)(borderpx + v10 * dword_D3F8),\n                  (unsigned int)(dword_D3F4 * HIDWORD(qword_D430) + borderpx),\n                  Number L, (unsigned int)(dword_D3F4 - Number));\n      XftDrawRect(\n          qword_D350, &dc[Number * (unsigned int)defaultcs],\n          (unsigned int)(dword_D3F8 * (v10 + Number) + borderpx - Number),\n          (unsigned int)(dword_D3F4 * HIDWORD(qword_D430) + borderpx), Number L,\n          (unsigned int)(dword_D3F4 - Number));\n      XftDrawRect(qword_D350, &dc[Number * (unsigned int)defaultcs],\n                  (unsigned int)(borderpx + v10 * dword_D3F8),\n                  (unsigned int)(dword_D3F4 * (HIDWORD(qword_D430) + Number) +\n                                 borderpx - Number),\n                  (unsigned int)dword_D3F8, Number L);\n    }\n    oldx_13119 = v10;\n    result = HIDWORD(qword_D430);\n    oldy_13120 = HIDWORD(qword_D430);\n  }\n  return result;\n}", "code_t": "void __cdecl xdrawcursor() {\n  int v0;\n  int v1;\n  int v2;\n  Glyph_ *v3;\n  __int64 v4;\n  __int64 v5;\n  int v6;\n  __int64 v7;\n  __int64 v8;\n  Glyph_ <span class=\"supfact\">g</span>;\n  int width;\n  int sl;\n  int curx;\n  *(_DWORD *)<span class=\"supfact\">g</span>.c = Number;\n  <span class=\"supfact\">g</span>.mode = Number;\n  <span class=\"supfact\">g</span>.fg = defaultbg;\n  <span class=\"supfact\">g</span>.bg = defaultcs;\n  if (oldx_13119 < Number) {\n    v0 = Number;\n  } else if (term.col > oldx_13119) {\n    v0 = oldx_13119;\n  } else {\n    v0 = term.col - Number;\n  }\n  oldx_13119 = v0;\n  if (oldy_13120 < Number) {\n    v1 = Number;\n  } else if (term.row > oldy_13120) {\n    v1 = oldy_13120;\n  } else {\n    v1 = term.row - Number;\n  }\n  oldy_13120 = v1;\n  curx = term.c.x;\n  if ((term.line[v1][oldx_13119].mode & Number) != Number)\n    --oldx_13119;\n  if ((term.line[term.c.y][curx].mode & Number) != Number)\n    --curx;\n  *(_DWORD *)<span class=\"supfact\">g</span>.c = *(_DWORD *)term.line[term.c.y][term.c.x].c;\n  sl = utf8len(term.line[oldy_13120][oldx_13119].c);\n  if ((term.line[oldy_13120][oldx_13119].mode & Number) != Number)\n    v2 = Number;\n  else\n    v2 = Number;\n  width = v2;\n  v3 = &term.line[oldy_13120][oldx_13119];\n  v4 = *(_QWORD *)v3->c;\n  v5 = *(_QWORD *)&v3->fg;\n  xdraws(v3->c, *(Glyph_ *)&v4, oldx_13119, oldy_13120, width, sl);\n  if ((term.mode & Number) == Number) {\n    if ((xw.state & Number) != Number) {\n      if ((term.mode & Number) != Number) {\n        <span class=\"supfact\">g</span>.mode |= Number;\n        <span class=\"supfact\">g</span>.fg = defaultcs;\n        <span class=\"supfact\">g</span>.bg = defaultfg;\n      }\n      sl = utf8len(<span class=\"supfact\">g</span>.c);\n      if ((term.line[term.c.y][curx].mode & Number) != Number)\n        v6 = Number;\n      else\n        v6 = Number;\n      width = v6;\n      v7 = *(_QWORD *)<span class=\"supfact\">g</span>.c;\n      v8 = *(_QWORD *)&<span class=\"supfact\">g</span>.fg;\n      xdraws(<span class=\"supfact\">g</span>.c, *(Glyph_ *)&v7, term.c.x, term.c.y, v6, sl);\n    } else {\n      XftDrawRect(xw.draw, &dc.col[defaultcs],\n                  (unsigned int)(borderpx + curx * xw.cw),\n                  (unsigned int)(xw.ch * term.c.y + borderpx),\n                  (unsigned int)(xw.cw - Number), Number L);\n      XftDrawRect(xw.draw, &dc.col[defaultcs],\n                  (unsigned int)(borderpx + curx * xw.cw),\n                  (unsigned int)(xw.ch * term.c.y + borderpx), Number L,\n                  (unsigned int)(xw.ch - Number));\n      XftDrawRect(xw.draw, &dc.col[defaultcs],\n                  (unsigned int)(xw.cw * (curx + Number) + borderpx - Number),\n                  (unsigned int)(xw.ch * term.c.y + borderpx), Number L,\n                  (unsigned int)(xw.ch - Number));\n      XftDrawRect(\n          xw.draw, &dc.col[defaultcs], (unsigned int)(borderpx + curx * xw.cw),\n          (unsigned int)(xw.ch * (term.c.y + Number) + borderpx - Number),\n          (unsigned int)xw.cw, Number L);\n    }\n    oldx_13119 = curx;\n    oldy_13120 = term.c.y;\n  }\n}", "var": [{"name": "v6", "type": "struct Glyph_ { Rune u; ushort mode; PADDING (2); uint32_t fg; uint32_t bg; }", "pred_name": "og", "ref_name": "g", "ref_type": "struct Glyph_ { char[4] c; ushort mode; PADDING (2); uint32_t fg; uint32_t bg; }"}], "body_in_train": false}, {"repo_owner": "AFD-Illinois", "repo_name": "iharm2d_v3", "path": "AFD-Illinois/iharm2d_v3/d737e0e4f833206c7b634f9a5fe4891a7285bf0a989c25d6fb145fcbb82ea258", "path_in_repo": "AFD-Illinois/iharm2d_v3/prob:shocks/harm", "objdump": "000000000040b6fb <dump>:\n  40b6fb:\t55                   \tpush   %rbp\n  40b6fc:\t48 89 e5             \tmov    %rsp,%rbp\n  40b6ff:\t48 81 ec 00 01 00 00 \tsub    $0x100,%rsp\n  40b706:\t48 89 bd 08 ff ff ff \tmov    %rdi,-0xf8(%rbp)\n  40b70d:\t48 8b 15 a4 86 ce 0a \tmov    0xace86a4(%rip),%rdx        # b0f3db8 <t>\n  40b714:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b71b:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b720:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b725:\t48 89 c7             \tmov    %rax,%rdi\n  40b728:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b72d:\te8 0e 6b ff ff       \tcallq  402240 <fprintf@plt>\n  40b732:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b739:\tba 00 01 00 00       \tmov    $0x100,%edx\n  40b73e:\tbe a8 f5 40 00       \tmov    $0x40f5a8,%esi\n  40b743:\t48 89 c7             \tmov    %rax,%rdi\n  40b746:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b74b:\te8 f0 6a ff ff       \tcallq  402240 <fprintf@plt>\n  40b750:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b757:\tba 00 02 00 00       \tmov    $0x200,%edx\n  40b75c:\tbe a8 f5 40 00       \tmov    $0x40f5a8,%esi\n  40b761:\t48 89 c7             \tmov    %rax,%rdi\n  40b764:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b769:\te8 d2 6a ff ff       \tcallq  402240 <fprintf@plt>\n  40b76e:\t48 8b 15 d3 6b 80 10 \tmov    0x10806bd3(%rip),%rdx        # 10c12348 <startx+0x8>\n  40b775:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b77c:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b781:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b786:\t48 89 c7             \tmov    %rax,%rdi\n  40b789:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b78e:\te8 ad 6a ff ff       \tcallq  402240 <fprintf@plt>\n  40b793:\t48 8b 15 b6 6b 80 10 \tmov    0x10806bb6(%rip),%rdx        # 10c12350 <startx+0x10>\n  40b79a:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b7a1:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b7a6:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b7ab:\t48 89 c7             \tmov    %rax,%rdi\n  40b7ae:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b7b3:\te8 88 6a ff ff       \tcallq  402240 <fprintf@plt>\n  40b7b8:\t48 8b 15 a9 3d 0d 11 \tmov    0x110d3da9(%rip),%rdx        # 114df568 <dx+0x8>\n  40b7bf:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b7c6:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b7cb:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b7d0:\t48 89 c7             \tmov    %rax,%rdi\n  40b7d3:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b7d8:\te8 63 6a ff ff       \tcallq  402240 <fprintf@plt>\n  40b7dd:\t48 8b 15 8c 3d 0d 11 \tmov    0x110d3d8c(%rip),%rdx        # 114df570 <dx+0x10>\n  40b7e4:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b7eb:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b7f0:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b7f5:\t48 89 c7             \tmov    %rax,%rdi\n  40b7f8:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b7fd:\te8 3e 6a ff ff       \tcallq  402240 <fprintf@plt>\n  40b802:\t48 8b 15 9f 85 ce 0a \tmov    0xace859f(%rip),%rdx        # b0f3da8 <tf>\n  40b809:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b810:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b815:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b81a:\t48 89 c7             \tmov    %rax,%rdi\n  40b81d:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b822:\te8 19 6a ff ff       \tcallq  402240 <fprintf@plt>\n  40b827:\t8b 15 73 f4 04 11    \tmov    0x1104f473(%rip),%edx        # 1145aca0 <nstep>\n  40b82d:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b834:\tbe a8 f5 40 00       \tmov    $0x40f5a8,%esi\n  40b839:\t48 89 c7             \tmov    %rax,%rdi\n  40b83c:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b841:\te8 fa 69 ff ff       \tcallq  402240 <fprintf@plt>\n  40b846:\t48 8b 15 7b 0e 53 0b \tmov    0xb530e7b(%rip),%rdx        # b93c6c8 <gam>\n  40b84d:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b854:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b859:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b85e:\t48 89 c7             \tmov    %rax,%rdi\n  40b861:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b866:\te8 d5 69 ff ff       \tcallq  402240 <fprintf@plt>\n  40b86b:\t48 8b 15 8e 9e 3a 01 \tmov    0x13a9e8e(%rip),%rdx        # 17b5700 <cour>\n  40b872:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b879:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b87e:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b883:\t48 89 c7             \tmov    %rax,%rdi\n  40b886:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b88b:\te8 b0 69 ff ff       \tcallq  402240 <fprintf@plt>\n  40b890:\t48 8b 15 39 0e 53 0b \tmov    0xb530e39(%rip),%rdx        # b93c6d0 <DTd>\n  40b897:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b89e:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b8a3:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b8a8:\t48 89 c7             \tmov    %rax,%rdi\n  40b8ab:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b8b0:\te8 8b 69 ff ff       \tcallq  402240 <fprintf@plt>\n  40b8b5:\t48 8b 15 24 56 77 0f \tmov    0xf775624(%rip),%rdx        # fb80ee0 <DTl>\n  40b8bc:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b8c3:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b8c8:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b8cd:\t48 89 c7             \tmov    %rax,%rdi\n  40b8d0:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b8d5:\te8 66 69 ff ff       \tcallq  402240 <fprintf@plt>\n  40b8da:\t48 8b 15 a7 6a 80 10 \tmov    0x10806aa7(%rip),%rdx        # 10c12388 <DTi>\n  40b8e1:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b8e8:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b8ed:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b8f2:\t48 89 c7             \tmov    %rax,%rdi\n  40b8f5:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b8fa:\te8 41 69 ff ff       \tcallq  402240 <fprintf@plt>\n  40b8ff:\t8b 15 a7 3c 0d 11    \tmov    0x110d3ca7(%rip),%edx        # 114df5ac <DTr>\n  40b905:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b90c:\tbe a8 f5 40 00       \tmov    $0x40f5a8,%esi\n  40b911:\t48 89 c7             \tmov    %rax,%rdi\n  40b914:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b919:\te8 22 69 ff ff       \tcallq  402240 <fprintf@plt>\n  40b91e:\t8b 15 fc 67 80 10    \tmov    0x108067fc(%rip),%edx        # 10c12120 <dump_cnt>\n  40b924:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b92b:\tbe a8 f5 40 00       \tmov    $0x40f5a8,%esi\n  40b930:\t48 89 c7             \tmov    %rax,%rdi\n  40b933:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b938:\te8 03 69 ff ff       \tcallq  402240 <fprintf@plt>\n  40b93d:\t8b 15 81 0d 53 0b    \tmov    0xb530d81(%rip),%edx        # b93c6c4 <image_cnt>\n  40b943:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b94a:\tbe a8 f5 40 00       \tmov    $0x40f5a8,%esi\n  40b94f:\t48 89 c7             \tmov    %rax,%rdi\n  40b952:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b957:\te8 e4 68 ff ff       \tcallq  402240 <fprintf@plt>\n  40b95c:\t8b 15 7e 14 b6 00    \tmov    0xb6147e(%rip),%edx        # f6cde0 <rdump_cnt>\n  40b962:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b969:\tbe a8 f5 40 00       \tmov    $0x40f5a8,%esi\n  40b96e:\t48 89 c7             \tmov    %rax,%rdi\n  40b971:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b976:\te8 c5 68 ff ff       \tcallq  402240 <fprintf@plt>\n  40b97b:\t48 8b 15 1e 3c 0d 11 \tmov    0x110d3c1e(%rip),%rdx        # 114df5a0 <dt>\n  40b982:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b989:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40b98e:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b993:\t48 89 c7             \tmov    %rax,%rdi\n  40b996:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b99b:\te8 a0 68 ff ff       \tcallq  402240 <fprintf@plt>\n  40b9a0:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%rbp)\n  40b9a7:\teb 21                \tjmp    40b9ca <dump+0x2cf>\n  40b9a9:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b9b0:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40b9b4:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40b9b9:\t48 89 c7             \tmov    %rax,%rdi\n  40b9bc:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40b9c1:\te8 7a 68 ff ff       \tcallq  402240 <fprintf@plt>\n  40b9c6:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40b9ca:\t83 7d fc 14          \tcmpl   $0x14,-0x4(%rbp)\n  40b9ce:\t7e d9                \tjle    40b9a9 <dump+0x2ae>\n  40b9d0:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40b9d7:\t48 89 c6             \tmov    %rax,%rsi\n  40b9da:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  40b9df:\te8 fc 66 ff ff       \tcallq  4020e0 <fputc@plt>\n  40b9e4:\tb8 00 00 00 00       \tmov    $0x0,%eax\n  40b9e9:\te8 fe a1 ff ff       \tcallq  405bec <current_calc>\n  40b9ee:\tc7 45 fc 03 00 00 00 \tmovl   $0x3,-0x4(%rbp)\n  40b9f5:\te9 b6 04 00 00       \tjmpq   40beb0 <dump+0x7b5>\n  40b9fa:\tc7 45 f8 03 00 00 00 \tmovl   $0x3,-0x8(%rbp)\n  40ba01:\te9 99 04 00 00       \tjmpq   40be9f <dump+0x7a4>\n  40ba06:\t48 8d 55 c0          \tlea    -0x40(%rbp),%rdx\n  40ba0a:\t8b 75 f8             \tmov    -0x8(%rbp),%esi\n  40ba0d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40ba10:\t48 89 d1             \tmov    %rdx,%rcx\n  40ba13:\tba 03 00 00 00       \tmov    $0x3,%edx\n  40ba18:\t89 c7                \tmov    %eax,%edi\n  40ba1a:\te8 2a 94 ff ff       \tcallq  404e49 <coord>\n  40ba1f:\t48 8b 55 c8          \tmov    -0x38(%rbp),%rdx\n  40ba23:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40ba2a:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40ba2f:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40ba34:\t48 89 c7             \tmov    %rax,%rdi\n  40ba37:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40ba3c:\te8 ff 67 ff ff       \tcallq  402240 <fprintf@plt>\n  40ba41:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n  40ba45:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40ba4c:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40ba51:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40ba56:\t48 89 c7             \tmov    %rax,%rdi\n  40ba59:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40ba5e:\te8 dd 67 ff ff       \tcallq  402240 <fprintf@plt>\n  40ba63:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  40ba6a:\teb 4c                \tjmp    40bab8 <dump+0x3bd>\n  40ba6c:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40ba6f:\t48 98                \tcltq   \n  40ba71:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40ba74:\t48 63 ca             \tmovslq %edx,%rcx\n  40ba77:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  40ba7a:\t48 63 d2             \tmovslq %edx,%rdx\n  40ba7d:\t48 69 c9 06 02 00 00 \timul   $0x206,%rcx,%rcx\n  40ba84:\t48 01 ca             \tadd    %rcx,%rdx\n  40ba87:\t48 c1 e2 03          \tshl    $0x3,%rdx\n  40ba8b:\t48 01 d0             \tadd    %rdx,%rax\n  40ba8e:\t48 8b 14 c5 c0 3d 0f \tmov    0xb0f3dc0(,%rax,8),%rdx\n  40ba95:\t0b \n  40ba96:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40ba9d:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40baa2:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40baa7:\t48 89 c7             \tmov    %rax,%rdi\n  40baaa:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40baaf:\te8 8c 67 ff ff       \tcallq  402240 <fprintf@plt>\n  40bab4:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  40bab8:\t83 7d f4 07          \tcmpl   $0x7,-0xc(%rbp)\n  40babc:\t7e ae                \tjle    40ba6c <dump+0x371>\n  40babe:\t83 7d fc 03          \tcmpl   $0x3,-0x4(%rbp)\n  40bac2:\t7e 3a                \tjle    40bafe <dump+0x403>\n  40bac4:\t83 7d f8 03          \tcmpl   $0x3,-0x8(%rbp)\n  40bac8:\t7e 34                \tjle    40bafe <dump+0x403>\n  40baca:\t81 7d fc 02 01 00 00 \tcmpl   $0x102,-0x4(%rbp)\n  40bad1:\t7f 2b                \tjg     40bafe <dump+0x403>\n  40bad3:\t81 7d f8 02 02 00 00 \tcmpl   $0x202,-0x8(%rbp)\n  40bada:\t7f 22                \tjg     40bafe <dump+0x403>\n  40badc:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  40badf:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40bae2:\t89 d6                \tmov    %edx,%esi\n  40bae4:\t89 c7                \tmov    %eax,%edi\n  40bae6:\te8 42 7a ff ff       \tcallq  40352d <divb_calc>\n  40baeb:\tf3 0f 7e 0d bd 3a 00 \tmovq   0x3abd(%rip),%xmm1        # 40f5b0 <_IO_stdin_used+0x5b0>\n  40baf2:\t00 \n  40baf3:\t66 0f 54 c1          \tandpd  %xmm1,%xmm0\n  40baf7:\tf2 0f 11 45 e8       \tmovsd  %xmm0,-0x18(%rbp)\n  40bafc:\teb 09                \tjmp    40bb07 <dump+0x40c>\n  40bafe:\t66 0f ef c0          \tpxor   %xmm0,%xmm0\n  40bb02:\tf2 0f 11 45 e8       \tmovsd  %xmm0,-0x18(%rbp)\n  40bb07:\t48 8b 55 e8          \tmov    -0x18(%rbp),%rdx\n  40bb0b:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bb12:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bb17:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bb1c:\t48 89 c7             \tmov    %rax,%rdi\n  40bb1f:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40bb24:\te8 17 67 ff ff       \tcallq  402240 <fprintf@plt>\n  40bb29:\t8b 4d f8             \tmov    -0x8(%rbp),%ecx\n  40bb2c:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40bb2f:\tba 03 00 00 00       \tmov    $0x3,%edx\n  40bb34:\t89 ce                \tmov    %ecx,%esi\n  40bb36:\t89 c7                \tmov    %eax,%edi\n  40bb38:\te8 49 a0 ff ff       \tcallq  405b86 <get_geometry>\n  40bb3d:\t48 89 45 e0          \tmov    %rax,-0x20(%rbp)\n  40bb41:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40bb44:\t48 63 d0             \tmovslq %eax,%rdx\n  40bb47:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40bb4a:\t48 98                \tcltq   \n  40bb4c:\t48 69 c0 06 02 00 00 \timul   $0x206,%rax,%rax\n  40bb53:\t48 01 d0             \tadd    %rdx,%rax\n  40bb56:\t48 c1 e0 06          \tshl    $0x6,%rax\n  40bb5a:\t48 8d 88 c0 3d 0f 0b \tlea    0xb0f3dc0(%rax),%rcx\n  40bb61:\t48 8d 95 30 ff ff ff \tlea    -0xd0(%rbp),%rdx\n  40bb68:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40bb6c:\t48 89 c6             \tmov    %rax,%rsi\n  40bb6f:\t48 89 cf             \tmov    %rcx,%rdi\n  40bb72:\te8 e5 70 ff ff       \tcallq  402c5c <get_state>\n  40bb77:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  40bb7e:\teb 2f                \tjmp    40bbaf <dump+0x4b4>\n  40bb80:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40bb83:\t48 98                \tcltq   \n  40bb85:\t48 8b 94 c5 30 ff ff \tmov    -0xd0(%rbp,%rax,8),%rdx\n  40bb8c:\tff \n  40bb8d:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bb94:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bb99:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bb9e:\t48 89 c7             \tmov    %rax,%rdi\n  40bba1:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40bba6:\te8 95 66 ff ff       \tcallq  402240 <fprintf@plt>\n  40bbab:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  40bbaf:\t83 7d f4 03          \tcmpl   $0x3,-0xc(%rbp)\n  40bbb3:\t7e cb                \tjle    40bb80 <dump+0x485>\n  40bbb5:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  40bbbc:\teb 33                \tjmp    40bbf1 <dump+0x4f6>\n  40bbbe:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40bbc1:\t48 98                \tcltq   \n  40bbc3:\t48 83 c0 04          \tadd    $0x4,%rax\n  40bbc7:\t48 8b 94 c5 30 ff ff \tmov    -0xd0(%rbp,%rax,8),%rdx\n  40bbce:\tff \n  40bbcf:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bbd6:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bbdb:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bbe0:\t48 89 c7             \tmov    %rax,%rdi\n  40bbe3:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40bbe8:\te8 53 66 ff ff       \tcallq  402240 <fprintf@plt>\n  40bbed:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  40bbf1:\t83 7d f4 03          \tcmpl   $0x3,-0xc(%rbp)\n  40bbf5:\t7e c7                \tjle    40bbbe <dump+0x4c3>\n  40bbf7:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  40bbfe:\teb 33                \tjmp    40bc33 <dump+0x538>\n  40bc00:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40bc03:\t48 98                \tcltq   \n  40bc05:\t48 83 c0 08          \tadd    $0x8,%rax\n  40bc09:\t48 8b 94 c5 30 ff ff \tmov    -0xd0(%rbp,%rax,8),%rdx\n  40bc10:\tff \n  40bc11:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bc18:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bc1d:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bc22:\t48 89 c7             \tmov    %rax,%rdi\n  40bc25:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40bc2a:\te8 11 66 ff ff       \tcallq  402240 <fprintf@plt>\n  40bc2f:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  40bc33:\t83 7d f4 03          \tcmpl   $0x3,-0xc(%rbp)\n  40bc37:\t7e c7                \tjle    40bc00 <dump+0x505>\n  40bc39:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  40bc40:\teb 33                \tjmp    40bc75 <dump+0x57a>\n  40bc42:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40bc45:\t48 98                \tcltq   \n  40bc47:\t48 83 c0 0c          \tadd    $0xc,%rax\n  40bc4b:\t48 8b 94 c5 30 ff ff \tmov    -0xd0(%rbp,%rax,8),%rdx\n  40bc52:\tff \n  40bc53:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bc5a:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bc5f:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bc64:\t48 89 c7             \tmov    %rax,%rdi\n  40bc67:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40bc6c:\te8 cf 65 ff ff       \tcallq  402240 <fprintf@plt>\n  40bc71:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  40bc75:\t83 7d f4 03          \tcmpl   $0x3,-0xc(%rbp)\n  40bc79:\t7e c7                \tjle    40bc42 <dump+0x547>\n  40bc7b:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40bc7e:\t48 63 d0             \tmovslq %eax,%rdx\n  40bc81:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40bc84:\t48 98                \tcltq   \n  40bc86:\t48 69 c0 06 02 00 00 \timul   $0x206,%rax,%rax\n  40bc8d:\t48 01 d0             \tadd    %rdx,%rax\n  40bc90:\t48 c1 e0 06          \tshl    $0x6,%rax\n  40bc94:\t48 8d b8 c0 3d 0f 0b \tlea    0xb0f3dc0(%rax),%rdi\n  40bc9b:\t48 8d 75 b8          \tlea    -0x48(%rbp),%rsi\n  40bc9f:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n  40bca3:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40bca7:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n  40bcae:\t49 89 f1             \tmov    %rsi,%r9\n  40bcb1:\t49 89 c8             \tmov    %rcx,%r8\n  40bcb4:\tb9 01 00 00 00       \tmov    $0x1,%ecx\n  40bcb9:\t48 89 c6             \tmov    %rax,%rsi\n  40bcbc:\te8 70 72 ff ff       \tcallq  402f31 <mhd_vchar>\n  40bcc1:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  40bcc5:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bccc:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bcd1:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bcd6:\t48 89 c7             \tmov    %rax,%rdi\n  40bcd9:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40bcde:\te8 5d 65 ff ff       \tcallq  402240 <fprintf@plt>\n  40bce3:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  40bce7:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bcee:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bcf3:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bcf8:\t48 89 c7             \tmov    %rax,%rdi\n  40bcfb:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40bd00:\te8 3b 65 ff ff       \tcallq  402240 <fprintf@plt>\n  40bd05:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40bd08:\t48 63 d0             \tmovslq %eax,%rdx\n  40bd0b:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40bd0e:\t48 98                \tcltq   \n  40bd10:\t48 69 c0 06 02 00 00 \timul   $0x206,%rax,%rax\n  40bd17:\t48 01 d0             \tadd    %rdx,%rax\n  40bd1a:\t48 c1 e0 06          \tshl    $0x6,%rax\n  40bd1e:\t48 8d b8 c0 3d 0f 0b \tlea    0xb0f3dc0(%rax),%rdi\n  40bd25:\t48 8d 75 b8          \tlea    -0x48(%rbp),%rsi\n  40bd29:\t48 8d 4d b0          \tlea    -0x50(%rbp),%rcx\n  40bd2d:\t48 8b 55 e0          \tmov    -0x20(%rbp),%rdx\n  40bd31:\t48 8d 85 30 ff ff ff \tlea    -0xd0(%rbp),%rax\n  40bd38:\t49 89 f1             \tmov    %rsi,%r9\n  40bd3b:\t49 89 c8             \tmov    %rcx,%r8\n  40bd3e:\tb9 02 00 00 00       \tmov    $0x2,%ecx\n  40bd43:\t48 89 c6             \tmov    %rax,%rsi\n  40bd46:\te8 e6 71 ff ff       \tcallq  402f31 <mhd_vchar>\n  40bd4b:\t48 8b 55 b8          \tmov    -0x48(%rbp),%rdx\n  40bd4f:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bd56:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bd5b:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bd60:\t48 89 c7             \tmov    %rax,%rdi\n  40bd63:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40bd68:\te8 d3 64 ff ff       \tcallq  402240 <fprintf@plt>\n  40bd6d:\t48 8b 55 b0          \tmov    -0x50(%rbp),%rdx\n  40bd71:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bd78:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bd7d:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bd82:\t48 89 c7             \tmov    %rax,%rdi\n  40bd85:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40bd8a:\te8 b1 64 ff ff       \tcallq  402240 <fprintf@plt>\n  40bd8f:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40bd93:\t48 8b 90 00 01 00 00 \tmov    0x100(%rax),%rdx\n  40bd9a:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bda1:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bda6:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bdab:\t48 89 c7             \tmov    %rax,%rdi\n  40bdae:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40bdb3:\te8 88 64 ff ff       \tcallq  402240 <fprintf@plt>\n  40bdb8:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  40bdbf:\teb 4c                \tjmp    40be0d <dump+0x712>\n  40bdc1:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40bdc4:\t48 98                \tcltq   \n  40bdc6:\t8b 55 fc             \tmov    -0x4(%rbp),%edx\n  40bdc9:\t48 63 ca             \tmovslq %edx,%rcx\n  40bdcc:\t8b 55 f8             \tmov    -0x8(%rbp),%edx\n  40bdcf:\t48 63 d2             \tmovslq %edx,%rdx\n  40bdd2:\t48 69 c9 06 02 00 00 \timul   $0x206,%rcx,%rcx\n  40bdd9:\t48 01 ca             \tadd    %rcx,%rdx\n  40bddc:\t48 c1 e2 02          \tshl    $0x2,%rdx\n  40bde0:\t48 01 d0             \tadd    %rdx,%rax\n  40bde3:\t48 8b 14 c5 20 e0 ff \tmov    0x1ffe020(,%rax,8),%rdx\n  40bdea:\t01 \n  40bdeb:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40bdf2:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40bdf7:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40bdfc:\t48 89 c7             \tmov    %rax,%rdi\n  40bdff:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40be04:\te8 37 64 ff ff       \tcallq  402240 <fprintf@plt>\n  40be09:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  40be0d:\t83 7d f4 03          \tcmpl   $0x3,-0xc(%rbp)\n  40be11:\t7e ae                \tjle    40bdc1 <dump+0x6c6>\n  40be13:\t8b 45 f8             \tmov    -0x8(%rbp),%eax\n  40be16:\t48 63 d0             \tmovslq %eax,%rdx\n  40be19:\t8b 45 fc             \tmov    -0x4(%rbp),%eax\n  40be1c:\t48 98                \tcltq   \n  40be1e:\t48 69 c0 06 02 00 00 \timul   $0x206,%rax,%rax\n  40be25:\t48 01 d0             \tadd    %rdx,%rax\n  40be28:\t48 c1 e0 05          \tshl    $0x5,%rax\n  40be2c:\t48 8d 88 20 e0 ff 01 \tlea    0x1ffe020(%rax),%rcx\n  40be33:\t48 8d 95 10 ff ff ff \tlea    -0xf0(%rbp),%rdx\n  40be3a:\t48 8b 45 e0          \tmov    -0x20(%rbp),%rax\n  40be3e:\t48 89 c6             \tmov    %rax,%rsi\n  40be41:\t48 89 cf             \tmov    %rcx,%rdi\n  40be44:\te8 30 99 ff ff       \tcallq  405779 <lower>\n  40be49:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%rbp)\n  40be50:\teb 2f                \tjmp    40be81 <dump+0x786>\n  40be52:\t8b 45 f4             \tmov    -0xc(%rbp),%eax\n  40be55:\t48 98                \tcltq   \n  40be57:\t48 8b 94 c5 10 ff ff \tmov    -0xf0(%rbp,%rax,8),%rdx\n  40be5e:\tff \n  40be5f:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40be66:\t66 48 0f 6e c2       \tmovq   %rdx,%xmm0\n  40be6b:\tbe a0 f5 40 00       \tmov    $0x40f5a0,%esi\n  40be70:\t48 89 c7             \tmov    %rax,%rdi\n  40be73:\tb8 01 00 00 00       \tmov    $0x1,%eax\n  40be78:\te8 c3 63 ff ff       \tcallq  402240 <fprintf@plt>\n  40be7d:\t83 45 f4 01          \taddl   $0x1,-0xc(%rbp)\n  40be81:\t83 7d f4 03          \tcmpl   $0x3,-0xc(%rbp)\n  40be85:\t7e cb                \tjle    40be52 <dump+0x757>\n  40be87:\t48 8b 85 08 ff ff ff \tmov    -0xf8(%rbp),%rax\n  40be8e:\t48 89 c6             \tmov    %rax,%rsi\n  40be91:\tbf 0a 00 00 00       \tmov    $0xa,%edi\n  40be96:\te8 45 62 ff ff       \tcallq  4020e0 <fputc@plt>\n  40be9b:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)\n  40be9f:\t81 7d f8 02 02 00 00 \tcmpl   $0x202,-0x8(%rbp)\n  40bea6:\t0f 8e 5a fb ff ff    \tjle    40ba06 <dump+0x30b>\n  40beac:\t83 45 fc 01          \taddl   $0x1,-0x4(%rbp)\n  40beb0:\t81 7d fc 02 01 00 00 \tcmpl   $0x102,-0x4(%rbp)\n  40beb7:\t0f 8e 3d fb ff ff    \tjle    40b9fa <dump+0x2ff>\n  40bebd:\t90                   \tnop\n  40bebe:\t90                   \tnop\n  40bebf:\tc9                   \tleaveq \n  40bec0:\tc3                   \tretq   ", "code_s": "void __fastcall dump(FILE *a1) {\n  double v1[Number];\n  double <span class=\"supfact\">v2</span>[Number];\n  double v3;\n  double v4;\n  char v5[Number];\n  double v6;\n  double v7;\n  double *v8;\n  double v9;\n  int k;\n  int j;\n  int i;\n  fprintf(a1, String, *(double *)&t);\n  fprintf(a1, String, Number L);\n  fprintf(a1, String, Number L);\n  fprintf(a1, String, *(double *)&qword_10C12348);\n  fprintf(a1, String, *(double *)&qword_10C12350);\n  fprintf(a1, String, *(double *)&qword_114DF568);\n  fprintf(a1, String, *(double *)&qword_114DF570);\n  fprintf(a1, String, *(double *)&qword_B0F3DA8);\n  fprintf(a1, String, (unsigned int)nstep);\n  fprintf(a1, String, *(double *)&gam);\n  fprintf(a1, String, *(double *)&cour);\n  fprintf(a1, String, *(double *)&DTd);\n  fprintf(a1, String, *(double *)&DTl);\n  fprintf(a1, String, *(double *)&DTi);\n  fprintf(a1, String, (unsigned int)DTr);\n  fprintf(a1, String, (unsigned int)dump_cnt);\n  fprintf(a1, String, (unsigned int)image_cnt);\n  fprintf(a1, String, (unsigned int)rdump_cnt);\n  fprintf(a1, String, *(double *)&dt);\n  for (i = Number; i <= Number; ++i)\n    fprintf(a1, String, Number);\n  fputc(Number, a1);\n  current_calc();\n  for (i = Number; i <= Number; ++i) {\n    for (j = Number; j <= Number; ++j) {\n      coord(i, j, Number, (__int64)v5);\n      fprintf(a1, String, v6);\n      fprintf(a1, String, v7);\n      for (k = Number; k <= Number; ++k)\n        fprintf(a1, String, *(double *)&p[Number * i + Number * j + k]);\n      if (i <= Number || j <= Number || i > Number || j > Number)\n        v9 = Number;\n      else\n        v9 = fabs(divb_calc(i, j));\n      fprintf(a1, String, v9);\n      v8 = (double *)get_geometry(i, j, Number);\n      get_state((double *)&p[Number * (j + Number L * i)], (__int64)v8,\n                <span class=\"supfact\">v2</span>);\n      for (k = Number; k <= Number; ++k)\n        fprintf(a1, String, <span class=\"supfact\">v2</span>[k]);\n      for (k = Number; k <= Number; ++k)\n        fprintf(a1, String, <span class=\"supfact\">v2</span>[k + Number]);\n      for (k = Number; k <= Number; ++k)\n        fprintf(a1, String, <span class=\"supfact\">v2</span>[k + Number]);\n      for (k = Number; k <= Number; ++k)\n        fprintf(a1, String, <span class=\"supfact\">v2</span>[k + Number]);\n      mhd_vchar((double *)&p[Number * (j + Number L * i)], <span class=\"supfact\">v2</span>,\n                (__int64)v8, Number, &v3, &v4);\n      fprintf(a1, String, v4);\n      fprintf(a1, String, v3);\n      mhd_vchar((double *)&p[Number * (j + Number L * i)], <span class=\"supfact\">v2</span>,\n                (__int64)v8, Number, &v3, &v4);\n      fprintf(a1, String, v4);\n      fprintf(a1, String, v3);\n      fprintf(a1, String, v8[Number]);\n      for (k = Number; k <= Number; ++k)\n        fprintf(a1, String, Jcon[Number * i + Number * j + k]);\n      lower(&Jcon[Number * i + Number * j], v8, v1);\n      for (k = Number; k <= Number; ++k)\n        fprintf(a1, String, v1[k]);\n      fputc(Number, a1);\n    }\n  }\n}", "code_t": "void __cdecl dump(FILE *fp) {\n  double jcov[Number];\n  of_state <span class=\"supfact\">q</span>;\n  double vmax;\n  double vmin;\n  double X[Number];\n  of_geom *geom;\n  double divb;\n  int k;\n  int j;\n  int i;\n  fprintf(fp, String, t);\n  fprintf(fp, String, Number L);\n  fprintf(fp, String, Number L);\n  fprintf(fp, String, startx[Number]);\n  fprintf(fp, String, startx[Number]);\n  fprintf(fp, String, dbl_114DF560[Number]);\n  fprintf(fp, String, dbl_114DF560[Number]);\n  fprintf(fp, String, dbl_B0F3DA8);\n  fprintf(fp, String, (unsigned int)nstep);\n  fprintf(fp, String, gam);\n  fprintf(fp, String, cour);\n  fprintf(fp, String, DTd);\n  fprintf(fp, String, DTl);\n  fprintf(fp, String, DTi);\n  fprintf(fp, String, (unsigned int)DTr);\n  fprintf(fp, String, (unsigned int)dump_cnt);\n  fprintf(fp, String, (unsigned int)image_cnt);\n  fprintf(fp, String, (unsigned int)rdump_cnt);\n  fprintf(fp, String, dt);\n  for (i = Number; i <= Number; ++i)\n    fprintf(fp, String, Number);\n  fputc(Number, fp);\n  current_calc();\n  for (i = Number; i <= Number; ++i) {\n    for (j = Number; j <= Number; ++j) {\n      coord(i, j, Number, X);\n      fprintf(fp, String, X[Number]);\n      fprintf(fp, String, X[Number]);\n      for (k = Number; k <= Number; ++k)\n        fprintf(fp, String, p[i][j][k]);\n      if (i <= Number || j <= Number || i > Number || j > Number)\n        divb = Number;\n      else\n        divb = fabs(divb_calc(i, j));\n      fprintf(fp, String, divb);\n      geom = get_geometry(i, j, Number);\n      get_state((double *)p + Number * (j + Number L * i), geom,\n                &<span class=\"supfact\">q</span>);\n      for (k = Number; k <= Number; ++k)\n        fprintf(fp, String, <span class=\"supfact\">q</span>.ucon[k]);\n      for (k = Number; k <= Number; ++k)\n        fprintf(fp, String, <span class=\"supfact\">q</span>.ucov[k]);\n      for (k = Number; k <= Number; ++k)\n        fprintf(fp, String, <span class=\"supfact\">q</span>.bcon[k]);\n      for (k = Number; k <= Number; ++k)\n        fprintf(fp, String, <span class=\"supfact\">q</span>.bcov[k]);\n      mhd_vchar((double *)p + Number * (j + Number L * i), &<span class=\"supfact\">q</span>,\n                geom, Number, &vmax, &vmin);\n      fprintf(fp, String, vmin);\n      fprintf(fp, String, vmax);\n      mhd_vchar((double *)p + Number * (j + Number L * i), &<span class=\"supfact\">q</span>,\n                geom, Number, &vmax, &vmin);\n      fprintf(fp, String, vmin);\n      fprintf(fp, String, vmax);\n      fprintf(fp, String, geom->g);\n      for (k = Number; k <= Number; ++k)\n        fprintf(fp, String, Jcon[i][j][k]);\n      lower(Jcon[i][j], geom, jcov);\n      for (k = Number; k <= Number; ++k)\n        fprintf(fp, String, jcov[k]);\n      fputc(Number, fp);\n    }\n  }\n}", "var": [{"name": "v2", "type": "struct of_state { double[4] ucon; double[4] ucov; double[4] bcon; double[4] bcov; }", "pred_name": "q", "ref_name": "q", "ref_type": "struct of_state { double[4] ucon; double[4] ucov; double[4] bcon; double[4] bcov; }"}], "body_in_train": false}, {"repo_owner": "jgross1", "repo_name": "xen", "path": "jgross1/xen/32939b0ce55e746b8a8968ff6b1ec60ae82393fbc0227a0c2d0eb0954989f1c6", "path_in_repo": "jgross1/xen//xen/arch/x86/pv/grant_table.o", "objdump": "0000000000000173 <get_page_from_mfn>:\n 173:\t55                   \tpush   %rbp\n 174:\t48 89 e5             \tmov    %rsp,%rbp\n 177:\t53                   \tpush   %rbx\n 178:\t48 83 ec 28          \tsub    $0x28,%rsp\n 17c:\t48 89 7d d8          \tmov    %rdi,-0x28(%rbp)\n 180:\t48 89 75 d0          \tmov    %rsi,-0x30(%rbp)\n 184:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 188:\t48 89 c7             \tmov    %rax,%rdi\n 18b:\te8 98 ff ff ff       \tcallq  128 <mfn_x>\n 190:\t48 89 c7             \tmov    %rax,%rdi\n 193:\te8 a9 fe ff ff       \tcallq  41 <pfn_to_pdx>\n 198:\t48 c1 e0 05          \tshl    $0x5,%rax\n 19c:\t48 89 c2             \tmov    %rax,%rdx\n 19f:\t48 b8 00 00 00 00 e0 \tmovabs $0xffff82e000000000,%rax\n 1a6:\t82 ff ff \n 1a9:\t48 01 d0             \tadd    %rdx,%rax\n 1ac:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n 1b0:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1b4:\t48 89 c7             \tmov    %rax,%rdi\n 1b7:\te8 6c ff ff ff       \tcallq  128 <mfn_x>\n 1bc:\t48 89 c7             \tmov    %rax,%rdi\n 1bf:\te8 00 00 00 00       \tcallq  1c4 <get_page_from_mfn+0x51>\n 1c4:\t83 f0 01             \txor    $0x1,%eax\n 1c7:\t0f b6 c0             \tmovzbl %al,%eax\n 1ca:\t48 85 c0             \ttest   %rax,%rax\n 1cd:\t75 20                \tjne    1ef <get_page_from_mfn+0x7c>\n 1cf:\t48 8b 55 d0          \tmov    -0x30(%rbp),%rdx\n 1d3:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 1d7:\t48 89 d6             \tmov    %rdx,%rsi\n 1da:\t48 89 c7             \tmov    %rax,%rdi\n 1dd:\te8 00 00 00 00       \tcallq  1e2 <get_page_from_mfn+0x6f>\n 1e2:\t85 c0                \ttest   %eax,%eax\n 1e4:\t0f 94 c0             \tsete   %al\n 1e7:\t0f b6 c0             \tmovzbl %al,%eax\n 1ea:\t48 85 c0             \ttest   %rax,%rax\n 1ed:\t74 45                \tje     234 <get_page_from_mfn+0xc1>\n 1ef:\t48 8b 45 d8          \tmov    -0x28(%rbp),%rax\n 1f3:\t48 89 c7             \tmov    %rax,%rdi\n 1f6:\te8 2d ff ff ff       \tcallq  128 <mfn_x>\n 1fb:\t48 89 c3             \tmov    %rax,%rbx\n 1fe:\te8 fe fe ff ff       \tcallq  101 <get_cpu_info>\n 203:\t48 8b 80 d0 00 00 00 \tmov    0xd0(%rax),%rax\n 20a:\t49 89 d8             \tmov    %rbx,%r8\n 20d:\t48 89 c1             \tmov    %rax,%rcx\n 210:\tba 86 01 00 00       \tmov    $0x186,%edx\n 215:\t48 8d 35 00 00 00 00 \tlea    0x0(%rip),%rsi        # 21c <get_page_from_mfn+0xa9>\n 21c:\t48 8d 3d 00 00 00 00 \tlea    0x0(%rip),%rdi        # 223 <get_page_from_mfn+0xb0>\n 223:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 228:\te8 00 00 00 00       \tcallq  22d <get_page_from_mfn+0xba>\n 22d:\tb8 00 00 00 00       \tmov    $0x0,%eax\n 232:\teb 04                \tjmp    238 <get_page_from_mfn+0xc5>\n 234:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n 238:\t48 83 c4 28          \tadd    $0x28,%rsp\n 23c:\t5b                   \tpop    %rbx\n 23d:\t5d                   \tpop    %rbp\n 23e:\tc3                   \tretq   ", "code_s": "unsigned __int64 __fastcall get_page_from_mfn(__int64 <span class=\"supfact\">a1</span>,\n                                              __int64 a2) {\n  __int64 v2;\n  __int64 v3;\n  __int64 v4;\n  unsigned __int64 v5;\n  unsigned __int64 v7;\n  v2 = mfn_x(<span class=\"supfact\">a1</span>);\n  v7 = Number * pfn_to_pdx(v2) - Number;\n  v3 = mfn_x(<span class=\"supfact\">a1</span>);\n  if ((unsigned __int8)_mfn_valid(v3) == Number &&\n      (unsigned int)get_page(v7, a2))\n    return v7;\n  v4 = mfn_x(<span class=\"supfact\">a1</span>);\n  v5 = get_cpu_info();\n  printk(String, String, Number L, *(const void **)(v5 + Number), v4);\n  return Number L;\n}", "code_t": "page_info *__cdecl get_page_from_mfn(mfn_t <span class=\"supfact\">mfn</span>, domain *d) {\n  unsigned __int64 v2;\n  unsigned __int64 v3;\n  unsigned __int64 v4;\n  cpu_info *v5;\n  page_info *page;\n  v2 = mfn_x(<span class=\"supfact\">mfn</span>);\n  page = (page_info *)(Number * pfn_to_pdx(v2) - Number);\n  v3 = mfn_x(<span class=\"supfact\">mfn</span>);\n  if ((unsigned __int8)_mfn_valid(v3) == Number &&\n      (unsigned int)get_page(page, d))\n    return page;\n  v4 = mfn_x(<span class=\"supfact\">mfn</span>);\n  v5 = get_cpu_info();\n  printk(String, String, Number L, v5->current_vcpu, v4);\n  return Number L;\n}", "var": [{"name": "a1", "type": "domain *", "pred_name": "d", "ref_name": "mfn", "ref_type": "struct mfn_t { unsigned __int64 mfn; }"}], "body_in_train": false}, {"repo_owner": "piaojun", "repo_name": "ocfs2-tools", "path": "piaojun/ocfs2-tools/6dd4c1fd0375c71df483e7882053ac867423c752ceaff3fa0ddeca1be08c5f1f", "path_in_repo": "piaojun/ocfs2-tools/ocfs2cdsl/ocfs2cdsl.o", "objdump": "0000000000000d1c <cdsl_path_expand>:\n     d1c:\t55                   \tpush   %rbp\n     d1d:\t48 89 e5             \tmov    %rsp,%rbp\n     d20:\t48 81 ec b0 01 00 00 \tsub    $0x1b0,%rsp\n     d27:\t48 89 bd 58 fe ff ff \tmov    %rdi,-0x1a8(%rbp)\n     d2e:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n     d35:\t48 89 c7             \tmov    %rax,%rdi\n     d38:\te8 00 00 00 00       \tcallq  d3d <cdsl_path_expand+0x21>\n     d3d:\t48 8b 85 58 fe ff ff \tmov    -0x1a8(%rbp),%rax\n     d44:\t8b 40 24             \tmov    0x24(%rax),%eax\n     d47:\t83 f8 06             \tcmp    $0x6,%eax\n     d4a:\t0f 87 e4 00 00 00    \tja     e34 <cdsl_path_expand+0x118>\n     d50:\t89 c0                \tmov    %eax,%eax\n     d52:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     d59:\t00 \n     d5a:\tff e0                \tjmpq   *%rax\n     d5c:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n     d63:\t48 83 c0 41          \tadd    $0x41,%rax\n     d67:\t48 89 c7             \tmov    %rax,%rdi\n     d6a:\te8 00 00 00 00       \tcallq  d6f <cdsl_path_expand+0x53>\n     d6f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d73:\te9 db 00 00 00       \tjmpq   e53 <cdsl_path_expand+0x137>\n     d78:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n     d7f:\t48 05 04 01 00 00    \tadd    $0x104,%rax\n     d85:\t48 89 c7             \tmov    %rax,%rdi\n     d88:\te8 00 00 00 00       \tcallq  d8d <cdsl_path_expand+0x71>\n     d8d:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     d91:\te9 bd 00 00 00       \tjmpq   e53 <cdsl_path_expand+0x137>\n     d96:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n     d9d:\t48 89 c7             \tmov    %rax,%rdi\n     da0:\te8 00 00 00 00       \tcallq  da5 <cdsl_path_expand+0x89>\n     da5:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     da9:\te9 a5 00 00 00       \tjmpq   e53 <cdsl_path_expand+0x137>\n     dae:\t48 8b 85 58 fe ff ff \tmov    -0x1a8(%rbp),%rax\n     db5:\t48 89 c7             \tmov    %rax,%rdi\n     db8:\te8 ee 03 00 00       \tcallq  11ab <get_node_num>\n     dbd:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     dc1:\te9 8d 00 00 00       \tjmpq   e53 <cdsl_path_expand+0x137>\n     dc6:\t48 8d 85 60 fe ff ff \tlea    -0x1a0(%rbp),%rax\n     dcd:\t48 8d 95 60 fe ff ff \tlea    -0x1a0(%rbp),%rdx\n     dd4:\t48 8d 8a 04 01 00 00 \tlea    0x104(%rdx),%rcx\n     ddb:\t48 89 c2             \tmov    %rax,%rdx\n     dde:\t48 89 ce             \tmov    %rcx,%rsi\n     de1:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     de6:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     deb:\te8 00 00 00 00       \tcallq  df0 <cdsl_path_expand+0xd4>\n     df0:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     df4:\teb 5d                \tjmp    e53 <cdsl_path_expand+0x137>\n     df6:\te8 00 00 00 00       \tcallq  dfb <cdsl_path_expand+0xdf>\n     dfb:\t89 c0                \tmov    %eax,%eax\n     dfd:\t48 89 c6             \tmov    %rax,%rsi\n     e00:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     e05:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e0a:\te8 00 00 00 00       \tcallq  e0f <cdsl_path_expand+0xf3>\n     e0f:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     e13:\teb 3e                \tjmp    e53 <cdsl_path_expand+0x137>\n     e15:\te8 00 00 00 00       \tcallq  e1a <cdsl_path_expand+0xfe>\n     e1a:\t89 c0                \tmov    %eax,%eax\n     e1c:\t48 89 c6             \tmov    %rax,%rsi\n     e1f:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     e24:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e29:\te8 00 00 00 00       \tcallq  e2e <cdsl_path_expand+0x112>\n     e2e:\t48 89 45 f8          \tmov    %rax,-0x8(%rbp)\n     e32:\teb 1f                \tjmp    e53 <cdsl_path_expand+0x137>\n     e34:\t41 b8 00 00 00 00    \tmov    $0x0,%r8d\n     e3a:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     e3f:\tba 2e 02 00 00       \tmov    $0x22e,%edx\n     e44:\tbe 00 00 00 00       \tmov    $0x0,%esi\n     e49:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     e4e:\te8 00 00 00 00       \tcallq  e53 <cdsl_path_expand+0x137>\n     e53:\t48 8b 85 58 fe ff ff \tmov    -0x1a8(%rbp),%rax\n     e5a:\t8b 40 24             \tmov    0x24(%rax),%eax\n     e5d:\t89 c0                \tmov    %eax,%eax\n     e5f:\t48 8b 04 c5 00 00 00 \tmov    0x0(,%rax,8),%rax\n     e66:\t00 \n     e67:\t48 89 45 f0          \tmov    %rax,-0x10(%rbp)\n     e6b:\t48 8b 55 f8          \tmov    -0x8(%rbp),%rdx\n     e6f:\t48 8b 45 f0          \tmov    -0x10(%rbp),%rax\n     e73:\tb9 00 00 00 00       \tmov    $0x0,%ecx\n     e78:\t48 89 c6             \tmov    %rax,%rsi\n     e7b:\tbf 00 00 00 00       \tmov    $0x0,%edi\n     e80:\tb8 00 00 00 00       \tmov    $0x0,%eax\n     e85:\te8 00 00 00 00       \tcallq  e8a <cdsl_path_expand+0x16e>\n     e8a:\t48 89 45 e8          \tmov    %rax,-0x18(%rbp)\n     e8e:\t48 8b 45 f8          \tmov    -0x8(%rbp),%rax\n     e92:\t48 89 c7             \tmov    %rax,%rdi\n     e95:\te8 00 00 00 00       \tcallq  e9a <cdsl_path_expand+0x17e>\n     e9a:\t48 8b 45 e8          \tmov    -0x18(%rbp),%rax\n     e9e:\tc9                   \tleaveq \n     e9f:\tc3                   \tretq   ", "code_s": "__int64 __fastcall cdsl_path_expand(__int64 a1) {\n  __uid_t v1;\n  __gid_t v2;\n  struct utsname <span class=\"supfact\">name</span>;\n  __int64 v5;\n  char *v6;\n  __int64 v7;\n  uname(&<span class=\"supfact\">name</span>);\n  switch (*(_DWORD *)(a1 + Number)) {\n  case Number:\n    v7 = g_strdup(<span class=\"supfact\">name</span>.nodename);\n    break;\n  case Number:\n    v7 = g_strdup(<span class=\"supfact\">name</span>.machine);\n    break;\n  case Number:\n    v7 = g_strdup(&<span class=\"supfact\">name</span>);\n    break;\n  case Number:\n    v7 = get_node_num(a1);\n    break;\n  case Number:\n    v7 = g_strdup_printf(String, <span class=\"supfact\">name</span>.machine,\n                         <span class=\"supfact\">name</span>.sysname);\n    break;\n  case Number:\n    v1 = getuid();\n    v7 = g_strdup_printf(String, v1);\n    break;\n  case Number:\n    v2 = getgid();\n    v7 = g_strdup_printf(String, v2);\n    break;\n  default:\n    g_assertion_message_expr(Number L, String, Number L, String, Number L);\n    break;\n  }\n  v6 = cdsl_names[*(unsigned int *)(a1 + Number)];\n  v5 = g_build_filename(String, v6, v7);\n  g_free(v7);\n  return v5;\n}", "code_t": "char *__cdecl cdsl_path_expand(State *s) {\n  __uid_t v1;\n  __gid_t v2;\n  utsname <span class=\"supfact\">buf</span>;\n  char *ret;\n  const char *prefix;\n  char *val;\n  uname(&<span class=\"supfact\">buf</span>);\n  switch (s->type) {\n  case CDSL_TYPE_HOSTNAME:\n    val = (char *)g_strdup(<span class=\"supfact\">buf</span>.nodename);\n    break;\n  case CDSL_TYPE_MACH:\n    val = (char *)g_strdup(<span class=\"supfact\">buf</span>.machine);\n    break;\n  case CDSL_TYPE_OS:\n    val = (char *)g_strdup(&<span class=\"supfact\">buf</span>);\n    break;\n  case CDSL_TYPE_NODENUM:\n    val = get_node_num(s);\n    break;\n  case CDSL_TYPE_SYS:\n    val = (char *)g_strdup_printf(String, <span class=\"supfact\">buf</span>.machine,\n                                  <span class=\"supfact\">buf</span>.sysname);\n    break;\n  case CDSL_TYPE_UID:\n    v1 = getuid();\n    val = (char *)g_strdup_printf(String, v1);\n    break;\n  case CDSL_TYPE_GID:\n    v2 = getgid();\n    val = (char *)g_strdup_printf(String, v2);\n    break;\n  default:\n    g_assertion_message_expr(Number L, String, Number L, String, Number L);\n    break;\n  }\n  prefix = cdsl_names[s->type];\n  ret = (char *)g_build_filename(String, prefix, val);\n  g_free(val);\n  return ret;\n}", "var": [{"name": "name", "type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] domainname; }", "pred_name": "hostname", "ref_name": "buf", "ref_type": "struct utsname { char[65] sysname; char[65] nodename; char[65] release; char[65] version; char[65] machine; char[65] domainname; }"}], "body_in_train": false}]